WEBVTT FILE

1
00:00:12.240 --> 00:00:18.090
From hanselminutes.com. It's Hansel minutes,
our weekly discussion with web

2
00:00:18.090 --> 00:00:22.980
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.980 --> 00:00:29.520
number two 36. Recorded live
Thursday, October 7th, 2010. Support for Hanselman

4
00:00:29.520 --> 00:00:33.240
it's just provided by Tellerik
rad controls, the most comprehensive

5
00:00:33.240 --> 00:00:37.230
suite of components for windows
forms and asp.net web applications

6
00:00:37.500 --> 00:00:46.170
online@wwwdottelerik.com. In this episode, Scott
talks with Mike Amundson about

7
00:00:46.410 --> 00:00:51.270
rest. Hi, this is Scott
Hanselman. This is another episode

8
00:00:51.270 --> 00:00:53.580
of Hanselminutes today. We have
the pleasure of sitting down

9
00:00:53.580 --> 00:00:56.880
with Mike Amundson. He's a
well known author and lecturer.

10
00:00:56.970 --> 00:00:59.760
He's got a dozen books
under his belt, and most

11
00:00:59.760 --> 00:01:03.450
recently the O'Reilly book, restful
web services cookbook. And he's

12
00:01:03.450 --> 00:01:05.850
going to talk to me
about rest today. Thank you

13
00:01:05.850 --> 00:01:08.600
sir, for taking the time
to chat. It's good to

14
00:01:08.600 --> 00:01:10.760
be here. It's good to
talk to you, Scott. So

15
00:01:10.760 --> 00:01:13.820
let's start at the beginning.
Let's assume I know what

16
00:01:14.180 --> 00:01:17.330
what's soap is. I know
what web services are and

17
00:01:17.330 --> 00:01:22.100
I've been spending some number
of years pushing angle brackets

18
00:01:22.100 --> 00:01:27.590
around the wire making request
messages and response messages with,

19
00:01:27.680 --> 00:01:31.640
with soap. What is rest
and how is it different?

20
00:01:32.900 --> 00:01:36.290
Well, it's a good question.
So just to start with

21
00:01:36.320 --> 00:01:41.900
rest, unlike soap rest is
actually just a style. So

22
00:01:41.900 --> 00:01:47.900
it's a style like Gothic
or Swedish modern or Cubist.

23
00:01:48.530 --> 00:01:52.220
So it's not a standard.
It doesn't have any standards

24
00:01:52.220 --> 00:01:55.670
like soap would have. It's
also not a protocol like

25
00:01:55.670 --> 00:01:59.690
HTTP or something like that.
So rest is really a

26
00:01:59.690 --> 00:02:06.890
style that's applied to network
architecture or architectural style. So

27
00:02:07.160 --> 00:02:09.920
it's, it's different in that
sense, but a very often

28
00:02:09.920 --> 00:02:13.910
it's a considered a pattern
or a way to build

29
00:02:13.910 --> 00:02:18.230
applications themselves. So that sounds
like immediately something that could

30
00:02:18.230 --> 00:02:22.670
be argued about because with
soap, there's the GRPC and

31
00:02:22.670 --> 00:02:25.610
there's document literal and it's
either soap or it's not,

32
00:02:25.610 --> 00:02:28.550
it's valid or it's not,
we have trouble inter-operating, but

33
00:02:28.550 --> 00:02:30.800
it's not really something that
one gets to argue about.

34
00:02:31.370 --> 00:02:34.190
Something's either valid soap or
it's not, but if something

35
00:02:34.190 --> 00:02:37.760
is Gothic or Cubist to
art fans could stand in

36
00:02:37.760 --> 00:02:40.400
front of something and argue
about, Oh, I think that's

37
00:02:40.430 --> 00:02:43.640
the Cubist. Does that happen
in rest? Do people argue

38
00:02:43.640 --> 00:02:48.590
about it? Yes. Constantly. In
fact, it's the primary source

39
00:02:48.590 --> 00:02:53.060
of entertainment for some, because
it is a style, it

40
00:02:53.120 --> 00:02:57.380
does definitely lend itself to
lots of interpretation. And that's

41
00:02:57.380 --> 00:03:00.340
both the beauty and the
curse of working in something

42
00:03:00.340 --> 00:03:03.610
like that. But it's well
along the lines of other,

43
00:03:03.760 --> 00:03:07.540
you know, architectural styles, such
as a pipe and filter

44
00:03:07.540 --> 00:03:10.600
or what used to be
called <inaudible> where component and

45
00:03:10.600 --> 00:03:14.320
connector, which was, you know,
very popular during the local

46
00:03:14.320 --> 00:03:19.060
network or age. So it's,
it's not like it's totally

47
00:03:19.090 --> 00:03:22.330
unidentifiable in matter of fact,
it might be the case

48
00:03:22.330 --> 00:03:23.950
that I know it when
I see it or something

49
00:03:23.950 --> 00:03:26.590
like that, but there's certainly
lots and lots of room

50
00:03:26.590 --> 00:03:31.800
for argumentation and interpretation. But
what, with all styles, someone

51
00:03:31.830 --> 00:03:35.220
Inish is typically recognized as
the creator of that style.

52
00:03:35.220 --> 00:03:37.530
And you could, you know,
you, I love your example

53
00:03:37.530 --> 00:03:40.290
of, you know, cubism versus
Gothic versus sweet is that

54
00:03:40.740 --> 00:03:42.600
you could say, well, this
is the person who innovated

55
00:03:42.600 --> 00:03:44.790
in that space first. Why
don't we just go to

56
00:03:44.790 --> 00:03:47.070
the guy who invented rest
and then he will settle

57
00:03:47.070 --> 00:03:50.340
all of our arguments. Yes,
that that's true. And actually

58
00:03:50.340 --> 00:03:54.450
there is a guy who,
who coined the term, Roy

59
00:03:54.480 --> 00:03:58.350
fielding in a dissertation 10
years ago, actually in one

60
00:03:58.350 --> 00:04:00.450
chapter of a, I think
it's a six or seven

61
00:04:00.450 --> 00:04:05.550
chapter dissertation on network style
analysis, coins rest as a

62
00:04:05.550 --> 00:04:08.220
particular style. And there are
lots of people who appeal

63
00:04:08.220 --> 00:04:10.470
to Roy. It's sort of
like, well, what would Roy

64
00:04:10.500 --> 00:04:14.640
do? Or what did Roy
say, commonly in the discussions,

65
00:04:14.640 --> 00:04:17.010
it's the appeal to authority
model? Well, you know, Roy

66
00:04:17.010 --> 00:04:19.620
wouldn't do that or something
like that. So that goes

67
00:04:19.620 --> 00:04:24.150
on quite a bit, but
Fielding's dissertation outlines the details

68
00:04:24.150 --> 00:04:29.640
of, of the particular style
he mentioned. And actually I

69
00:04:29.640 --> 00:04:33.120
think quite successfully points out
the, what he calls the

70
00:04:33.120 --> 00:04:37.020
constraints that make up the
style. In other words, if

71
00:04:37.020 --> 00:04:40.020
you follow this series of
constraints and he gives reasons

72
00:04:40.020 --> 00:04:43.950
for why each one should
exist, then that's a particular

73
00:04:43.950 --> 00:04:48.060
style that he calls rest.
Okay. So let's try to

74
00:04:48.060 --> 00:04:51.420
get into the, the, the
concrete for those who maybe

75
00:04:51.420 --> 00:04:56.100
haven't gotten a sense yet
of what this is, what

76
00:04:56.100 --> 00:04:58.680
is, what is rest, what
did he describe and what

77
00:04:58.680 --> 00:05:01.200
does it look like with
the co and with HTTP

78
00:05:01.200 --> 00:05:07.710
kind of at its core?
Yeah, basically what, what fielding

79
00:05:07.710 --> 00:05:10.470
was talking about is the
idea that there's a, there's

80
00:05:10.470 --> 00:05:14.280
a particular style for distributed
network applications that can be

81
00:05:14.280 --> 00:05:19.050
very effective and very efficient.
And he outlines a series

82
00:05:19.050 --> 00:05:23.520
of steps and uses after
he, after he outlines these

83
00:05:23.520 --> 00:05:27.990
steps uses HTTP as the
example. So he actually has

84
00:05:27.990 --> 00:05:30.300
a chapter on the style
and the chapter on whether

85
00:05:30.300 --> 00:05:33.900
or not the style is
actually matches HTTP very well

86
00:05:33.900 --> 00:05:35.880
or not. And he does
this because he was actually

87
00:05:35.880 --> 00:05:38.910
working on the HTTP spec
while he was writing his

88
00:05:38.910 --> 00:05:43.620
dissertation. They're kind of cross
fertilizing quite a bit, but

89
00:05:43.620 --> 00:05:47.220
to be more specific, he
actually names just a handful

90
00:05:47.580 --> 00:05:52.590
of constraints or particular items
that would identify something as

91
00:05:52.590 --> 00:05:57.740
a restful style of architecture.
So it's like, you know,

92
00:05:57.770 --> 00:06:01.370
relatively general terms like it's
a client server app, it

93
00:06:01.370 --> 00:06:05.750
uses stateless messaging back and
forth. It employs a cash

94
00:06:05.750 --> 00:06:09.080
or can support a cash
in between any participants in

95
00:06:09.080 --> 00:06:13.310
the network. It's got a
very limited interface between parties

96
00:06:13.730 --> 00:06:17.960
and it also is built
as a layered system. So

97
00:06:17.960 --> 00:06:21.200
systems can join at any
time or leave at any

98
00:06:21.200 --> 00:06:24.470
time without breaking anything. And
then it's got an extra

99
00:06:24.470 --> 00:06:28.280
step of it's possible that
if none of this works

100
00:06:28.280 --> 00:06:32.060
perfectly, you can actually send
code between parties, mobile code

101
00:06:32.060 --> 00:06:34.940
or code on demand. That's
sort of his, you know,

102
00:06:35.240 --> 00:06:38.450
minimal set of what he
calls, constraints that make up

103
00:06:38.450 --> 00:06:42.550
that rest style. So when
I encounter rest or get

104
00:06:42.550 --> 00:06:46.420
into arguments around about rest
in the wild, I typically

105
00:06:46.420 --> 00:06:50.350
hear it expressed as well.
They took crud, create, read,

106
00:06:50.350 --> 00:06:54.940
update, delete, and they basically
mapped it to some existing

107
00:06:54.970 --> 00:06:58.600
verbs in HTTP and post
put, delete, and get, and

108
00:06:59.320 --> 00:07:01.960
it all, it all maps
very nicely, you know, read

109
00:07:01.960 --> 00:07:06.640
as get and yada yada,
yada, and, and that's rest.

110
00:07:07.600 --> 00:07:10.000
Why is that such a
common explanation? If it's more

111
00:07:10.000 --> 00:07:14.380
complicated than, Yeah, it's actually
more complicated and in some

112
00:07:14.380 --> 00:07:17.440
ways, following the crud pattern
can lead you sort of

113
00:07:17.440 --> 00:07:19.750
down the wrong path. You're
going to, if you're going

114
00:07:19.750 --> 00:07:22.480
to be arrested purist type
raft, actually doesn't talk at

115
00:07:22.480 --> 00:07:25.120
all about read, write, update,
or delete or any of

116
00:07:25.120 --> 00:07:28.600
those kinds of things. And
it really talks only in

117
00:07:28.600 --> 00:07:34.060
comparison about HTTP, actually, a
lot of what we commonly

118
00:07:34.060 --> 00:07:36.640
talk about in the wild
as rest, we're really talking

119
00:07:36.640 --> 00:07:40.810
about HTTP, which is a
standard there's definitely a right

120
00:07:40.810 --> 00:07:43.600
and wrong. There are definitely
things you must in may

121
00:07:43.600 --> 00:07:46.480
and should and may not
do. And all those kinds

122
00:07:46.480 --> 00:07:48.550
of things. So very often
when I ended up talking

123
00:07:48.550 --> 00:07:51.880
to folks, we're really sort
of slipping into talking about

124
00:07:51.910 --> 00:07:56.980
a protocol called HTTP rather
than rest itself. Okay. So

125
00:07:56.980 --> 00:08:00.730
with HTTP, there's an, a
kind of an implied envelope

126
00:08:00.730 --> 00:08:03.460
because the body of the
message itself is an envelope.

127
00:08:03.490 --> 00:08:07.840
HTP has headers well with
soap. So pad it's its

128
00:08:07.840 --> 00:08:11.770
own envelope system. So because
it was protocol neutral, I

129
00:08:11.770 --> 00:08:14.080
could take a soap message
and the headers in the

130
00:08:14.080 --> 00:08:16.210
body, and I could take
it around. I could put

131
00:08:16.210 --> 00:08:18.580
it in an MQ. I
could email the soap message.

132
00:08:19.230 --> 00:08:25.120
Does, does rest need HTTP
and its associated metadata? Or

133
00:08:25.120 --> 00:08:28.720
can I apply the rest
to another protocol? Right? So

134
00:08:28.780 --> 00:08:31.630
it's actually, that's a, that's
a great sort of summary

135
00:08:31.630 --> 00:08:35.200
of some comparisons about one
application protocol to another, the

136
00:08:35.200 --> 00:08:39.490
soap pattern to the HTTP
pattern, right? So HTTP has

137
00:08:39.490 --> 00:08:43.090
this header space, this metadata
space, and then the body

138
00:08:43.090 --> 00:08:47.470
of, of itself, the actual
message, right? And rest itself

139
00:08:47.470 --> 00:08:52.900
doesn't make any direct claims
except to say that, you

140
00:08:52.900 --> 00:08:56.550
know, Roy's architectural model makes
a big deal about data

141
00:08:56.550 --> 00:09:00.120
itself as part of the
NEC network architecture. You've got

142
00:09:00.330 --> 00:09:03.150
components that do work connectors
that talk to each other

143
00:09:03.450 --> 00:09:07.680
and data as another component
for the architecture. So to

144
00:09:07.680 --> 00:09:10.380
Roy, the idea of moving
data around, it's not actually

145
00:09:10.380 --> 00:09:14.280
just the information, but it's
also the meta data. The

146
00:09:14.580 --> 00:09:19.800
there are request metadata, there's
response, metadata, there's metadata about

147
00:09:19.800 --> 00:09:24.000
the message itself. So there's
lots of extra stuff. So

148
00:09:24.180 --> 00:09:27.630
in that sense, HTTP then
has this set of what

149
00:09:27.630 --> 00:09:30.510
they call headers. That's where
they store metadata. And then

150
00:09:30.510 --> 00:09:33.120
there's the body of the
message itself. And that looks

151
00:09:33.120 --> 00:09:36.720
very, very similar to a
soap. So does the same

152
00:09:36.720 --> 00:09:40.140
thing because soap has extensions
and so patters and all

153
00:09:40.140 --> 00:09:42.960
those other things that are
very similar, a soap does

154
00:09:42.960 --> 00:09:45.810
it all as a single
message, because again, they want

155
00:09:45.810 --> 00:09:49.890
it to be, be able
to cross different protocols. HTTP

156
00:09:49.890 --> 00:09:54.360
is really that same whole
picture for one application protocol.

157
00:09:56.270 --> 00:09:59.480
Okay. So I can easily
apply rest or other protocols.

158
00:09:59.480 --> 00:10:02.150
You never hear about people
emailing rest messages or putting

159
00:10:02.150 --> 00:10:07.580
West messages on in mainframes.
Right? Well that's because there's

160
00:10:07.580 --> 00:10:10.640
not really a rest message,
right? There's a message that

161
00:10:10.640 --> 00:10:13.100
has these bits, but rest
is the, is sort of

162
00:10:13.340 --> 00:10:17.480
the architectural pattern. Yeah. You
can apply that rest pattern

163
00:10:17.480 --> 00:10:23.060
to, to more than one
particular application level protocol. If

164
00:10:23.060 --> 00:10:25.880
we talk about the, the
various pieces of what Roy

165
00:10:25.910 --> 00:10:29.570
points out as the protocol,
the client server, the stateless,

166
00:10:29.570 --> 00:10:34.370
the cache, the uniform interface,
those can exist without any

167
00:10:34.370 --> 00:10:37.760
particular protocol. They can, they
can be something else. I

168
00:10:37.760 --> 00:10:42.860
am sure that HTTP won't
be around forever. And you

169
00:10:42.860 --> 00:10:45.260
could still use the same
architectural pattern for some other

170
00:10:45.260 --> 00:10:48.470
kind of protocol. This is
the part of the show

171
00:10:48.470 --> 00:10:52.880
where I mock you while
actually Tellerik mock says your

172
00:10:52.880 --> 00:10:56.330
applications that you're testing dependent
on external systems over which

173
00:10:56.330 --> 00:10:58.910
you have no control. Maybe
you're being slowed down by

174
00:10:58.910 --> 00:11:02.120
those systems, their lack of
availability, responsiveness. Do you want

175
00:11:02.120 --> 00:11:05.330
to do TDD? Right? Our
friends at Telerx help you

176
00:11:05.330 --> 00:11:07.940
solve some of those problems
with their newest marketing tool.

177
00:11:08.150 --> 00:11:11.720
Just mock it'll let you
do fast, simple controlled unit

178
00:11:11.720 --> 00:11:16.610
tests, independent of external resources
like databases, web services, proprietary

179
00:11:16.610 --> 00:11:20.810
code, unlike some mocking tools,
just mock works with non-virtual

180
00:11:20.810 --> 00:11:25.070
methods, seal classes, static methods,
giving you a complete control

181
00:11:25.070 --> 00:11:27.710
of your code. You can
get more details. You can

182
00:11:27.710 --> 00:11:32.810
download just mock at tellerik.com/just
mock. And don't forget to

183
00:11:32.810 --> 00:11:35.510
thank Tellerik for supporting Hanselman
it's on their Facebook fan

184
00:11:35.510 --> 00:11:42.080
page, facebook.com/tellerik. Thanks a lot.
I see a lot of

185
00:11:42.080 --> 00:11:46.100
people creating systems that they
say are rest, but then

186
00:11:46.100 --> 00:11:48.830
they end up being what
other people call pox, just

187
00:11:48.860 --> 00:11:51.950
plain old XML, where you
do a get, and some

188
00:11:51.950 --> 00:11:53.860
angle brackets come back. And
I say, look at my

189
00:11:53.980 --> 00:11:57.340
restful System that I've built
is, is parks a bad

190
00:11:57.340 --> 00:11:59.530
thing? Or can they call
that? Are they allowed to

191
00:11:59.530 --> 00:12:02.880
call that rest? Right? Is
pots a bad thing? No.

192
00:12:03.990 --> 00:12:06.410
Can you call it rest?
Yeah, you could. But it's

193
00:12:06.410 --> 00:12:07.830
just like you could say,
Hey, this, this is my

194
00:12:07.830 --> 00:12:11.400
Cubist painting, but I think
one of the things, one

195
00:12:11.400 --> 00:12:13.560
of the things I mentioned
in the list of that

196
00:12:13.560 --> 00:12:16.350
Roy outlines in his dissertation,
when he calls his constraints

197
00:12:16.350 --> 00:12:19.620
is a uniform interface. And
that uniform interface has a

198
00:12:19.620 --> 00:12:23.820
lot to do with how
messages are sent around or

199
00:12:23.820 --> 00:12:26.790
how components and connectors talk
to each other. And one

200
00:12:26.790 --> 00:12:29.250
of the items he mentioned
that is a part of

201
00:12:29.250 --> 00:12:33.420
that interface is the notion
of hypermedia as the engine

202
00:12:33.480 --> 00:12:38.310
of application state or hypermedia
constraint. And hypermedia is the

203
00:12:38.310 --> 00:12:41.520
links that we have inside
a message, the links that

204
00:12:41.520 --> 00:12:44.010
tell us what we can
do next, the link that

205
00:12:44.010 --> 00:12:47.250
tell us what's possible. Can
I send a search? Can

206
00:12:47.250 --> 00:12:49.800
I make a query? Can
I write data to the

207
00:12:49.800 --> 00:12:54.150
server? And typically the pox
pattern or poco or POJO

208
00:12:54.150 --> 00:12:59.550
or any of those terms,
don't contain that hypermedia information

209
00:12:59.550 --> 00:13:02.700
or that hyperlinking information. And,
and that's what separates it

210
00:13:03.810 --> 00:13:07.020
fielding makes a big deal
about how important hypermedia is

211
00:13:07.440 --> 00:13:11.340
in order to make his
particular style of network architecture

212
00:13:11.340 --> 00:13:15.450
work. So would something like
Adam pub be a hypermedia

213
00:13:16.050 --> 00:13:18.960
document in that, in that
it's a, it's an XML

214
00:13:18.960 --> 00:13:21.600
document with links that describe
what you could potentially do

215
00:13:21.600 --> 00:13:26.970
to that document. That's a
great example. You've got two,

216
00:13:27.120 --> 00:13:30.060
two specs, right? You've got
the Adam's syndication format, and

217
00:13:30.060 --> 00:13:33.540
then you've got Adam pub
and that Adam pub RFC,

218
00:13:33.540 --> 00:13:38.640
that documentation actually explains how
to locate links inside the

219
00:13:38.640 --> 00:13:41.880
message and what those links.
I don't understand what those

220
00:13:41.880 --> 00:13:45.030
links mean. You've got REL
equals edit for example, or

221
00:13:45.030 --> 00:13:47.880
you've got rules about how
you can create a message,

222
00:13:47.910 --> 00:13:51.660
which link to find insight
and return message in order

223
00:13:51.660 --> 00:13:54.330
to know how to create
a new item in the

224
00:13:54.330 --> 00:13:59.730
collection. So that document is
specifically documenting the hypermedia aspect

225
00:13:59.790 --> 00:14:02.910
of an atom message. So
Adam is a great example

226
00:14:02.910 --> 00:14:06.330
of a hypermedia format that
works very well in this

227
00:14:06.330 --> 00:14:11.510
restful architectural style. So given
the restful architectural style that

228
00:14:11.550 --> 00:14:14.160
it's out there, it exists
and it's reasonably well understood.

229
00:14:14.190 --> 00:14:16.740
Although there was not a
sample application I can get,

230
00:14:16.740 --> 00:14:18.810
there's nothing I can point
to that says, this is

231
00:14:18.810 --> 00:14:21.330
perfect. This is the pinnacle.
If I were to go

232
00:14:21.330 --> 00:14:23.910
and design something like a
bank, and I'm standing on

233
00:14:23.910 --> 00:14:26.310
the shoulders of giants, or
at least on the shoulders

234
00:14:26.310 --> 00:14:29.370
of one guy with a
PhD, what does rest give

235
00:14:29.370 --> 00:14:31.380
me to start with? When
I sit down and I

236
00:14:31.380 --> 00:14:34.710
save file new project, or
I start white boarding, where

237
00:14:34.710 --> 00:14:37.470
do I start? Right. And,
and, and that's, that's a

238
00:14:37.470 --> 00:14:40.800
great question. When you think
about it, whenever you start

239
00:14:40.800 --> 00:14:43.110
to build a, you know,
a large scale system, you're

240
00:14:43.110 --> 00:14:45.120
going to start asking yourself,
am I going to start,

241
00:14:45.120 --> 00:14:47.670
am I going to use
client server? Am I going

242
00:14:47.670 --> 00:14:51.890
to support caches? Am I
going to support some kind

243
00:14:51.890 --> 00:14:54.530
of limited interface between all
the components that they all

244
00:14:54.530 --> 00:14:58.820
understand? You're really developing an
architectural style and you can

245
00:14:58.820 --> 00:15:03.710
do that from scratch each
time and identify properties of

246
00:15:03.710 --> 00:15:05.930
a system that you like
such as all the components

247
00:15:05.930 --> 00:15:08.750
can talk to each other,
or messages can be cached

248
00:15:08.750 --> 00:15:11.390
and replayed later kind of
thing, and then decide the

249
00:15:11.390 --> 00:15:14.990
constraints that you need. Or
you can start from existing

250
00:15:15.560 --> 00:15:20.090
models, like Fielding's model example
in his fifth chapter of

251
00:15:20.090 --> 00:15:23.240
his dissertation, and start from
there and maybe take that

252
00:15:23.240 --> 00:15:25.730
whole cloth or take that
and modify it in any

253
00:15:25.730 --> 00:15:29.060
way you see fit. So
in building a bank, I

254
00:15:29.060 --> 00:15:32.060
might say, well, do I
need to have, do I

255
00:15:32.060 --> 00:15:37.010
need to communicate across lots?
And lots of clients support,

256
00:15:37.580 --> 00:15:40.370
maybe lots and lots of
servers and things that I

257
00:15:40.370 --> 00:15:42.380
don't own myself. If I,
if I can't build all

258
00:15:42.380 --> 00:15:46.640
those parts, this restful style
that has these disconnected components,

259
00:15:46.640 --> 00:15:49.730
where data is just important
as a component probably works

260
00:15:49.730 --> 00:15:56.080
really well as a starting
place. Hmm. What kind of

261
00:15:56.080 --> 00:15:58.780
misunderstandings would I bump into?
Like what, what, what's a

262
00:15:58.780 --> 00:16:01.450
major mistake that is commonly
made if I were, if

263
00:16:01.450 --> 00:16:04.510
I were building the system.
Oh, that's a, that's a

264
00:16:04.510 --> 00:16:07.300
great, that's a great question
that that could go on

265
00:16:07.300 --> 00:16:09.550
for awhile, but I can
tell you when I talk

266
00:16:09.560 --> 00:16:14.140
to folks, but the sort
of the misunderstanding pattern is,

267
00:16:14.340 --> 00:16:17.140
I think we mentioned this
earlier, the idea that often

268
00:16:17.140 --> 00:16:19.510
what we're really talking, what
we want to talk about

269
00:16:19.510 --> 00:16:24.340
is the application protocol HTTP
and not the, the network

270
00:16:24.340 --> 00:16:26.860
style rests. So a lot
of times when you're discussing

271
00:16:26.860 --> 00:16:29.910
things, it's important to know,
you know, which one you're

272
00:16:29.910 --> 00:16:34.930
you're focused on. But I
think some typical examples are

273
00:16:35.680 --> 00:16:38.050
when I see people talk
about doing rest very often,

274
00:16:38.050 --> 00:16:41.500
they say, well, I've got
really well-designed URLs, or they

275
00:16:41.500 --> 00:16:44.720
call them URS in the,
you know, sometimes. So I've,

276
00:16:44.720 --> 00:16:47.110
I've, I've made sure that
I've got the right slashes

277
00:16:47.110 --> 00:16:49.300
and names and all those
kinds of things. And it

278
00:16:49.300 --> 00:16:53.740
turns out in this architectural
style that fielding talks about

279
00:16:53.980 --> 00:16:58.510
the actual details of the
URL. Don't matter at all.

280
00:16:59.290 --> 00:17:02.470
There's nothing important, except for
the very large grain, there's

281
00:17:02.470 --> 00:17:06.820
a protocol front end, there's
a net domain name server.

282
00:17:06.850 --> 00:17:11.080
There's a domain server name.
There's some segments that have

283
00:17:11.080 --> 00:17:13.450
slashes and there's some stuff
that goes after it. That's

284
00:17:13.450 --> 00:17:16.720
all rest cares about. It
can be all glitz and

285
00:17:16.720 --> 00:17:19.840
it doesn't matter. So the
idea of spending a lot

286
00:17:19.840 --> 00:17:23.590
of time crafting URS, that's
not going to get you

287
00:17:23.590 --> 00:17:26.440
any closer to rest than,
than doing anything else. That's,

288
00:17:26.440 --> 00:17:28.720
that's one of the biggest
ones. And I think the

289
00:17:28.720 --> 00:17:32.590
second one is the idea
that what rest really talks

290
00:17:32.590 --> 00:17:37.090
about is this notion of
mapping credit activity to an

291
00:17:37.090 --> 00:17:40.810
application protocol like HTTP. And
again, rest doesn't even talk

292
00:17:40.810 --> 00:17:43.720
about credit. Doesn't talk about
those, those items at all.

293
00:17:44.020 --> 00:17:47.650
It, so spending a lot
of time figuring out which

294
00:17:48.840 --> 00:17:52.050
HTTP method goes with, which
you are. I is not

295
00:17:52.050 --> 00:17:54.780
really going to improve the
situation a lot either. So

296
00:17:54.780 --> 00:17:57.210
I think those are the
two biggest ones that I

297
00:17:57.210 --> 00:18:00.740
see coming out of discussions
about this. Okay. So hang

298
00:18:00.740 --> 00:18:02.750
on. So this is a
big deal here. You've just

299
00:18:02.750 --> 00:18:07.730
said that worrying about how
pretty your URS are, is

300
00:18:07.730 --> 00:18:10.130
not something that's going to
get you closer to, to

301
00:18:10.130 --> 00:18:13.100
rest in its purest sense.
Yeah. Or, or in any

302
00:18:13.100 --> 00:18:16.280
sense, because rest, doesn't talk
about what the URS ought

303
00:18:16.280 --> 00:18:19.250
to look like. In fact,
it's really important that both

304
00:18:19.280 --> 00:18:23.270
client and server not get
bound up in exactly what

305
00:18:23.270 --> 00:18:25.850
the URI looks like. If
you think about the fact

306
00:18:25.850 --> 00:18:28.280
that I'm writing the client
and you're writing the server,

307
00:18:28.610 --> 00:18:30.680
you want to make sure
as a server writer, if

308
00:18:30.680 --> 00:18:32.990
you need to move that
to another server, or if

309
00:18:32.990 --> 00:18:35.210
you need to change some
kind of technology in some

310
00:18:35.210 --> 00:18:38.420
way that you can safely
do that. And that my

311
00:18:38.420 --> 00:18:41.060
client won't break, just because
you changed a couple of

312
00:18:41.060 --> 00:18:45.110
letters in a URI, that's
a restful aspect of, of

313
00:18:45.110 --> 00:18:47.660
a, of an architectural style.
So if I, as a

314
00:18:47.660 --> 00:18:50.720
client, get all excited about
your documentation, about what a

315
00:18:50.720 --> 00:18:53.090
URL looks like. I could
be in a lot of

316
00:18:53.090 --> 00:18:57.110
trouble if you ever move
your server. So now I

317
00:18:57.110 --> 00:18:58.760
feel like you've kind of
pulled the rug out from

318
00:18:58.760 --> 00:19:00.440
under me, and I've got
nothing to hold on to.

319
00:19:02.060 --> 00:19:05.030
People are always saying restful
your eyes and how fortunate

320
00:19:05.030 --> 00:19:07.190
it is that these you
arise are so, so neat.

321
00:19:07.190 --> 00:19:10.430
They think of like the
term restful your eyes is

322
00:19:10.520 --> 00:19:14.360
kind of a hackable or
friendly that you should spend

323
00:19:14.360 --> 00:19:16.610
time thinking about what your,
your eye looks like, such

324
00:19:16.610 --> 00:19:19.910
that it is a, almost
a user interface element. And

325
00:19:19.910 --> 00:19:22.340
that's not an, a component
of rest as a pattern

326
00:19:22.340 --> 00:19:25.010
at all. No, it's, it's
not a component of rest

327
00:19:25.010 --> 00:19:26.810
at all. I think, I
think it was a Tim

328
00:19:26.810 --> 00:19:29.840
burners. Lee has a, has
a great piece on the

329
00:19:29.840 --> 00:19:33.740
web about what is it,
a cool your eyes don't

330
00:19:33.740 --> 00:19:36.650
change, right? And that doesn't
have anything to do with

331
00:19:36.650 --> 00:19:40.520
an architectural style. It has
to do with Tim's focus

332
00:19:40.520 --> 00:19:44.120
on the notion that once
you put a URI out

333
00:19:44.120 --> 00:19:46.510
there, you can't really take
it back or you, you,

334
00:19:46.530 --> 00:19:50.330
you shouldn't just change things,
Willy nilly. And that's certainly

335
00:19:50.330 --> 00:19:55.160
important. But rest as this
pattern, or as this architectural

336
00:19:55.160 --> 00:19:59.900
view, isn't really concerned about
the actual details of what

337
00:19:59.900 --> 00:20:03.950
they look like, just that
clients and servers know how

338
00:20:03.950 --> 00:20:07.490
to locate them and understand
what they mean or what

339
00:20:07.490 --> 00:20:10.160
they represent. And that's the
exciting part. So when I

340
00:20:10.160 --> 00:20:13.910
talk to people about this
hypermedia pattern, it doesn't matter

341
00:20:13.910 --> 00:20:17.150
what H ref equals, but
it does matter what REL

342
00:20:17.210 --> 00:20:20.180
equals because that's what a
client can bind to. If

343
00:20:20.180 --> 00:20:22.900
it says REL edit, I
can take whatever that that

344
00:20:22.940 --> 00:20:26.060
URI is. And I know
that that's the URI to

345
00:20:26.060 --> 00:20:29.000
use for editing a particular
record. That's the exciting part.

346
00:20:29.870 --> 00:20:31.970
I see. So now I
feel like we're getting to

347
00:20:32.390 --> 00:20:35.600
something I can, I can
use the, the fact that

348
00:20:35.600 --> 00:20:38.180
I can refer to other
things that I can do

349
00:20:38.180 --> 00:20:40.820
with them. That message, like
you said, REL equals edit.

350
00:20:40.820 --> 00:20:44.030
And I can say I
have some, some, some resource

351
00:20:44.090 --> 00:20:46.670
of a book and I
want to edit that book.

352
00:20:46.700 --> 00:20:50.230
Now. I, what the URI
Is for that book. If

353
00:20:50.230 --> 00:20:52.480
the URI is not going
to change, if Tim burners

354
00:20:52.480 --> 00:20:55.720
Lee says respect the permalink,
does it really matter if

355
00:20:55.780 --> 00:20:58.630
it's in that REL equals
edit? Can't it just be

356
00:20:58.630 --> 00:21:00.340
a convention? And then I
don't need to mention it

357
00:21:00.340 --> 00:21:03.330
at all. Sure. If, if
you're sure that that will

358
00:21:03.330 --> 00:21:06.600
never change, you can probably
tell all your clients to

359
00:21:06.600 --> 00:21:08.970
write that in. I mean,
they can code it right

360
00:21:08.970 --> 00:21:11.700
into the hard code. Right.
But if you think that

361
00:21:11.700 --> 00:21:14.860
might change you, you want
to make sure that your,

362
00:21:14.860 --> 00:21:17.970
your clients don't get stuck.
If something goes along the

363
00:21:17.970 --> 00:21:20.580
way, like you have to
redeploy everything. Think if we

364
00:21:20.580 --> 00:21:23.430
had to redeploy browsers, every
time somebody changed the website,

365
00:21:23.460 --> 00:21:26.700
right? You don't want that.
So, yeah. And this is

366
00:21:26.700 --> 00:21:29.130
exactly what you start to
think about going back to

367
00:21:29.130 --> 00:21:32.790
your bank idea, if, if
you're sure that these things

368
00:21:32.790 --> 00:21:36.960
will never change, that's an
aspect of your architectural style

369
00:21:37.200 --> 00:21:40.140
when you build servers and
clients that you don't need

370
00:21:40.140 --> 00:21:46.950
to focus on. Okay. In
reality, I think nobody can

371
00:21:46.950 --> 00:21:49.500
guarantee that, that stuff isn't
going to change at some

372
00:21:49.500 --> 00:21:53.940
point it's possible though. Are
there some examples of some

373
00:21:53.940 --> 00:21:56.610
really good API APIs that
you, that you point to

374
00:21:56.610 --> 00:21:59.070
and you say, Oh, they
really got it, right? Yeah.

375
00:21:59.070 --> 00:22:02.590
That's, that's a great question.
And to be honest, there,

376
00:22:02.590 --> 00:22:05.100
there's a couple of things.
Really good. I would say

377
00:22:05.100 --> 00:22:07.740
one of the ones that
I really like to work

378
00:22:07.740 --> 00:22:10.170
with is one that I'm
not sure a lot of

379
00:22:10.170 --> 00:22:12.990
people know about. It's called
friend feed. So it's another

380
00:22:12.990 --> 00:22:18.000
one of these aggregator services,
but friend feeds initial interface.

381
00:22:18.000 --> 00:22:21.870
Like it's HTML interface actually
works very much like its

382
00:22:21.870 --> 00:22:24.120
API. And I think they
do a very, very good

383
00:22:24.120 --> 00:22:25.680
job with that. I think
they do a good job

384
00:22:25.710 --> 00:22:28.140
and the way they do
logins and the way they,

385
00:22:28.180 --> 00:22:30.960
they add links to their
replies and stuff like that.

386
00:22:30.960 --> 00:22:33.990
So I think that's a
pretty good example. Gmail or

387
00:22:33.990 --> 00:22:36.540
Google does an awful lot
of really, really good things

388
00:22:36.540 --> 00:22:41.670
as well. Most Adam based
systems also do a very

389
00:22:41.670 --> 00:22:44.970
good job as long as
they focus on, you know,

390
00:22:45.000 --> 00:22:50.610
returning links in those payloads,
you're really doing a very

391
00:22:50.610 --> 00:22:53.970
good job of making it
possible for new clients to

392
00:22:53.970 --> 00:22:57.330
be built using just the
spec and not knowing all

393
00:22:57.330 --> 00:23:01.080
the details for, for, for
having new servers join up

394
00:23:01.080 --> 00:23:03.450
or, or things like that.
So I think those are,

395
00:23:03.450 --> 00:23:06.720
those are some really good
examples. Is this ever going

396
00:23:06.720 --> 00:23:08.610
to get easier? I mean,
because it's a style it's

397
00:23:08.610 --> 00:23:10.620
always going to be someone's
opinion about whether or not

398
00:23:10.620 --> 00:23:13.620
I did it the right
way. Well, I would say

399
00:23:14.940 --> 00:23:16.710
what you want to think
about. And I've talked to

400
00:23:16.710 --> 00:23:20.610
a few people who do
this is you may not

401
00:23:20.610 --> 00:23:25.470
want to become a follower
of this particular style. In

402
00:23:25.470 --> 00:23:28.440
other words, you don't, you
may not say I'm going

403
00:23:28.440 --> 00:23:33.030
to write rest from now
on. I actually Roy's dissertation

404
00:23:33.030 --> 00:23:36.900
is not about rest. Rest
was the example, what his

405
00:23:36.900 --> 00:23:41.880
dissertation about was how to
analyze existing architectural styles and

406
00:23:41.880 --> 00:23:48.320
how to actually identify styles
in existing systems. And really

407
00:23:48.320 --> 00:23:51.890
the idea behind all that
was in order to come

408
00:23:51.890 --> 00:23:57.290
up with a working pattern
for creating your own architectural

409
00:23:57.290 --> 00:24:01.370
style, that's reasoned and, you
know, solve the problems you

410
00:24:01.370 --> 00:24:04.370
want to solve. It turns
out people got really excited

411
00:24:04.370 --> 00:24:07.550
about that one chapter, and
I've actually heard him in

412
00:24:07.550 --> 00:24:10.220
a couple of cases, say
he was rather frustrated by

413
00:24:10.220 --> 00:24:14.780
that because his dissertation is
really about network style analysis,

414
00:24:14.810 --> 00:24:18.230
not about one particular example
he gave, but I know

415
00:24:18.230 --> 00:24:22.010
people who, again, going back
to your bank example, use

416
00:24:22.250 --> 00:24:26.750
Roy's dissertation as a lead
on how they can identify

417
00:24:27.170 --> 00:24:30.680
properties. They want to induce
in a large system constraints

418
00:24:30.680 --> 00:24:33.770
that they need to place
on the way components and

419
00:24:33.770 --> 00:24:37.820
connectors and data is handled
in order to get those

420
00:24:37.820 --> 00:24:41.720
properties. And they ended up
inventing their own very well

421
00:24:41.720 --> 00:24:44.750
reasoned and very successful style.
And I think that's the

422
00:24:44.750 --> 00:24:47.360
goal that everybody really wants.
They don't want to just

423
00:24:47.360 --> 00:24:49.970
say I'm doing a particular
style. They want something that

424
00:24:49.970 --> 00:24:53.290
really solves their own problem.
Well, it definitely sounds that

425
00:24:53.290 --> 00:24:55.450
we should stop using rest
as a weapon and remember

426
00:24:55.450 --> 00:24:57.190
that as a style and
not something that you can

427
00:24:57.190 --> 00:25:00.010
go and Reno run a
test against or compile and

428
00:25:00.010 --> 00:25:03.670
say, look it compiled it's
rest. Right? Exactly, exactly. Right.

429
00:25:04.000 --> 00:25:09.040
Treated as an example for
creating an architecture that solves

430
00:25:09.040 --> 00:25:11.170
your problems. And I think
then it becomes a really

431
00:25:11.170 --> 00:25:15.400
handy, really handy thing to
work with. Fantastic. Well, thanks

432
00:25:15.400 --> 00:25:17.410
so much, Mike, for, for
spending time with us on

433
00:25:17.410 --> 00:25:19.660
the show today, I enjoyed
it. Good to talk to

434
00:25:19.660 --> 00:25:22.210
you. Thanks for having me,
Scott. This has been another

435
00:25:22.210 --> 00:25:24.970
episode of Hansel minutes. See
you again next week.

