WEBVTT FILE

1
00:00:12.240 --> 00:00:17.940
From hanselminutes.com. It's Hansel minutes,
our weekly discussion with web

2
00:00:17.970 --> 00:00:22.560
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.560 --> 00:00:28.320
number two 62. Recorded live
Thursday, April 14, 2011. Support

4
00:00:28.320 --> 00:00:30.570
for Hanselman it's as provided
by a teller R a

5
00:00:30.570 --> 00:00:33.840
D control the most comprehensive
suite of components for windows

6
00:00:33.840 --> 00:00:43.080
forms and asp.net web applications
online@wwwdottelerik.com. In this episode, Scott

7
00:00:43.080 --> 00:00:46.440
talks with Sam saffron and
Rob Connery about their micro

8
00:00:46.440 --> 00:00:52.310
ORMs. Hi Scott Hanselman. And
this is another episode of

9
00:00:52.310 --> 00:00:54.980
Hansel minutes, and I'm here
at the lovely Mandalay Bay

10
00:00:54.980 --> 00:00:57.980
resort and casino in the
Hansel suite. And I've got

11
00:00:57.980 --> 00:01:01.400
Sam Shafran from stack overflow
and Rob Connery all the

12
00:01:01.400 --> 00:01:05.930
way from Hawaii. How's it
going guys? Excellent. Fantastic. How

13
00:01:05.930 --> 00:01:08.060
are you, Rob? I'm doing
really good. How are you?

14
00:01:08.120 --> 00:01:14.240
Lovely, lovely, lovely. So a
micro ORMs Sam, you kind

15
00:01:14.240 --> 00:01:16.070
of started a little bit
of a firestorm when you

16
00:01:16.070 --> 00:01:19.760
were really, really cool, interesting
blog post on perf of

17
00:01:19.760 --> 00:01:22.970
object, relational mappers, and then
a couple of weeks earlier,

18
00:01:22.970 --> 00:01:26.360
I know that Rob created
a, a tiny ORM called

19
00:01:26.360 --> 00:01:28.550
massive and did a series
of blog posts in which

20
00:01:28.550 --> 00:01:32.990
he basically refactored by deleting
code. What is it? What

21
00:01:32.990 --> 00:01:35.090
is a micro ORM and
how does it relate to

22
00:01:35.090 --> 00:01:38.510
something like IA for link
to SQL? I guess we

23
00:01:38.660 --> 00:01:41.520
kind of coined the same
time. The idea is a,

24
00:01:41.710 --> 00:01:45.980
an ORM that does a
lot less work. So usually

25
00:01:45.980 --> 00:01:50.270
you're used to having every
feature imaginable inside a RM

26
00:01:50.270 --> 00:01:52.370
and they just keep on
adding and adding with the

27
00:01:52.370 --> 00:01:54.920
versions. The idea with the
micro rooms is to stick

28
00:01:54.920 --> 00:01:58.250
to a small subset of
what an RM does and

29
00:01:58.250 --> 00:02:01.220
do it really well and
really fast. Now isn't an

30
00:02:01.220 --> 00:02:05.750
ORM supposed to abstract away
the database and all and

31
00:02:05.750 --> 00:02:08.360
hide everything in the database.
Isn't it supposed to protect

32
00:02:08.360 --> 00:02:12.620
me from SQL that I
could hurt myself with? Yes,

33
00:02:14.360 --> 00:02:16.910
but also you lose a
large amount of control by

34
00:02:16.910 --> 00:02:23.690
doing that. If you're, if
you are trying to like

35
00:02:23.690 --> 00:02:26.750
hide all the work that
you want to do and

36
00:02:27.110 --> 00:02:29.990
ever need to do anything
slightly tricky, you will not

37
00:02:29.990 --> 00:02:33.080
know how to do it.
And also like the abstractions

38
00:02:33.080 --> 00:02:37.850
leak. So you leak performance,
you leak complexity, certain things

39
00:02:37.850 --> 00:02:42.230
become simpler, but also other
things can become more complicated

40
00:02:43.520 --> 00:02:47.000
by talking sequel. You don't
have to translate all of

41
00:02:47.000 --> 00:02:51.290
these expressions into another language.
So, you know, just one

42
00:02:51.290 --> 00:02:54.680
language, which is the language,
the database talks. I remember

43
00:02:54.680 --> 00:02:58.280
when I started working with
my first ORM, the database

44
00:02:58.280 --> 00:03:02.320
people started to become uncomfortable
and they're uncomfortable because suddenly

45
00:03:02.410 --> 00:03:04.360
they're not in control, but
I think they also have

46
00:03:04.360 --> 00:03:07.810
kind of feared for their
jobs. But I'm hearing you

47
00:03:07.810 --> 00:03:10.750
say that if you use
these, ORMs in the, kind

48
00:03:10.750 --> 00:03:13.990
of the, the classic big
object, relational members that hide

49
00:03:13.990 --> 00:03:17.440
everything and you don't know
what's going on, you're going

50
00:03:17.440 --> 00:03:20.230
to kind of get yourself
in trouble. Are you saying

51
00:03:20.230 --> 00:03:21.910
that we need to know
the full stack? I mean,

52
00:03:22.390 --> 00:03:24.190
with NBC and things like
it, we're supposed to know

53
00:03:24.190 --> 00:03:26.380
HTTP and we're supposed to
HTML and JavaScript. And now

54
00:03:26.380 --> 00:03:29.200
you're asking me to know
all about how cardinality works,

55
00:03:30.190 --> 00:03:33.220
left inner outer, join, whatever
data. This is a lot

56
00:03:33.220 --> 00:03:34.870
of work. I don't know
if I have enough brain

57
00:03:34.870 --> 00:03:38.430
cells to hold all that
information. That's an interesting question.

58
00:03:38.430 --> 00:03:42.090
I think, look at, look
at like a trivial example.

59
00:03:42.090 --> 00:03:45.030
You want to ride a
little windows forms app, and

60
00:03:45.030 --> 00:03:47.400
you want to have a
little embedded database. You have

61
00:03:47.400 --> 00:03:52.530
one little table, which is
your, I don't know, your

62
00:03:52.530 --> 00:03:56.220
invoice table, storing invoices in
there. All you really need

63
00:03:56.220 --> 00:03:59.130
to do to do here
is pull in SQL CE

64
00:03:59.130 --> 00:04:02.850
or something and execute three
different queries on it, to

65
00:04:02.850 --> 00:04:04.770
get all of your data
in, to select the data,

66
00:04:04.770 --> 00:04:08.670
to delete the data. There's
no need for like years

67
00:04:08.670 --> 00:04:11.610
of work that was put
into an IRM to do

68
00:04:11.610 --> 00:04:13.980
that. If you had to
code it manually, you could

69
00:04:14.430 --> 00:04:21.000
do that with SQL data
readers. And, but then there's

70
00:04:21.000 --> 00:04:23.250
a lot of code that
you write, which is tedious,

71
00:04:23.250 --> 00:04:26.040
that you're tired of writing.
You've written it like a

72
00:04:26.040 --> 00:04:29.790
thousand times. You don't wanna
write it again, but by

73
00:04:29.790 --> 00:04:34.680
using, by using an ORM
for this particular case, I

74
00:04:34.680 --> 00:04:36.990
mean, all you need to,
all you need to learn

75
00:04:36.990 --> 00:04:40.680
is like three different SQL
constructs. And you're set. You're

76
00:04:40.680 --> 00:04:44.280
not, it's not like you
have to learn every little

77
00:04:44.280 --> 00:04:46.620
bit of, bit of thing
about the database for like

78
00:04:46.620 --> 00:04:50.370
this trivial example. Cool. So
you're saying that a man

79
00:04:50.370 --> 00:04:53.400
up, you're basically saying I
shouldn't be complaining. And then

80
00:04:53.700 --> 00:04:55.500
there's not that much to
learn. SQL is not as

81
00:04:55.500 --> 00:04:58.290
scary as a, as you,
as you think it is

82
00:05:00.090 --> 00:05:03.690
something that I've discovered too,
is that there's a contradiction

83
00:05:04.590 --> 00:05:07.650
between someone who says I
don't, I don't want SQL,

84
00:05:07.680 --> 00:05:10.140
you know, I don't want
to write SQL, right? Those

85
00:05:10.140 --> 00:05:12.540
are usually the same people
that say, you get your

86
00:05:12.540 --> 00:05:14.130
designer out of my face.
I want to write my

87
00:05:14.130 --> 00:05:18.180
own HTML. And you know,
we we've talked so many

88
00:05:18.180 --> 00:05:21.120
times about abstraction and how
much abstraction do we need

89
00:05:21.120 --> 00:05:22.770
and should I really be
able to get in there

90
00:05:22.770 --> 00:05:27.630
and with, with sequel? I
think, I think, yes, I

91
00:05:27.630 --> 00:05:29.100
think it's one of the
most important things you can

92
00:05:29.100 --> 00:05:31.860
do. And, and I always,
it's kind of been my,

93
00:05:31.920 --> 00:05:35.940
my cause if you will,
SQL is the best DSL

94
00:05:35.940 --> 00:05:38.190
for working with the database
that you can possibly have.

95
00:05:38.730 --> 00:05:42.630
And a DSL is a
domain specific language specific language,

96
00:05:42.660 --> 00:05:44.400
and you need to do
the things you need to

97
00:05:44.400 --> 00:05:47.640
do. Just embrace it. The
SQL. Now that said a

98
00:05:47.640 --> 00:05:50.940
certain amount of abstraction. You
know, you don't want to,

99
00:05:50.940 --> 00:05:54.350
as Sam was saying, right,
insert statements, updates, deletes all

100
00:05:54.350 --> 00:05:56.580
all the time. So you
can abstract a little bit,

101
00:05:56.700 --> 00:05:59.840
but knowing what's going on
underneath is, is critically important.

102
00:05:59.840 --> 00:06:02.450
And for instance, like in
the enterprise, you just talked

103
00:06:02.450 --> 00:06:04.520
about this. If you, if
you use it to like

104
00:06:04.520 --> 00:06:06.920
entity framework or, and hibernate,
and you don't really know

105
00:06:06.920 --> 00:06:08.630
what you're doing, you're a
junior dev, you've set it

106
00:06:08.630 --> 00:06:11.510
all up. And you're working
against a hyper normalized database.

107
00:06:11.510 --> 00:06:14.030
Let's say a big, massive
enterprise system. And you start

108
00:06:14.030 --> 00:06:18.140
using entity framework stitching together.
These link calls, you have

109
00:06:18.140 --> 00:06:22.070
no idea, the oatmeal SQL
that's generated. And next thing

110
00:06:22.070 --> 00:06:23.270
you know, the DBA is
not going to new door.

111
00:06:23.270 --> 00:06:25.190
What are you doing to
my database, with this to

112
00:06:25.190 --> 00:06:28.040
extend? And they want you
to use <inaudible> or the

113
00:06:28.040 --> 00:06:32.390
database person's way of telling
you stop doing exactly right.

114
00:06:33.200 --> 00:06:35.120
And I know that a
lot of database administrators and

115
00:06:35.120 --> 00:06:37.280
databases that I've worked on
a large enterprises, they wouldn't

116
00:06:37.280 --> 00:06:39.950
allow arbitrary SQL. Like, if
you want something you put

117
00:06:39.950 --> 00:06:41.750
in a change request and
you ask for a stored

118
00:06:41.750 --> 00:06:43.280
proc and then go off
and write it for you.

119
00:06:43.280 --> 00:06:45.430
And they call you in
a week when it's, It's

120
00:06:45.430 --> 00:06:48.640
interesting that you mentioned stolen
products. Cause that's like back

121
00:06:48.640 --> 00:06:50.770
to the world of these
micro ORMs, what do you

122
00:06:50.770 --> 00:06:53.980
need for stored? Procs like,
you're just making a simple

123
00:06:53.980 --> 00:06:56.680
call and you're getting a
record set back. There's nothing,

124
00:06:56.980 --> 00:06:58.780
there's no magic going on
there. If you want to

125
00:06:58.780 --> 00:07:00.580
update, you have to call
the stored proc with all

126
00:07:00.580 --> 00:07:03.640
the parameters and send it
in there. You don't have

127
00:07:03.640 --> 00:07:06.760
any of, so, so using
something like entity framework for

128
00:07:06.760 --> 00:07:08.950
like a project that is
purely stored, procs it doesn't

129
00:07:09.430 --> 00:07:12.430
even make sense. There weren't.
There are two arguments for

130
00:07:12.580 --> 00:07:15.820
four stored procs one was
there faster. That was an

131
00:07:15.820 --> 00:07:18.070
argument. And the second one
was that you never know

132
00:07:18.070 --> 00:07:20.380
if your database tables might
change or rename or columns

133
00:07:20.380 --> 00:07:23.020
move around, but the, the,
the stored proc was an

134
00:07:23.020 --> 00:07:25.930
interface that you could count
on. I think that's what

135
00:07:25.930 --> 00:07:28.870
people would say. I think,
I think it's a bit

136
00:07:28.870 --> 00:07:31.450
of a lie. I think
what the real reason is

137
00:07:31.450 --> 00:07:33.760
that when there is push
for stored procs is the

138
00:07:33.760 --> 00:07:37.690
DBS want control. They don't
want to let you mess

139
00:07:37.690 --> 00:07:41.050
up their database. And by
taking the stored products and

140
00:07:41.050 --> 00:07:45.010
owning them, they're not worried
what these silly developers are

141
00:07:45.010 --> 00:07:47.770
going to do. But I
think if you did man

142
00:07:47.770 --> 00:07:52.000
up earlier and learn sequel
and was able to like

143
00:07:52.000 --> 00:07:54.880
structure some of these queries
and started thinking in sets

144
00:07:54.910 --> 00:07:57.670
and not just iteratively, like
a lot of programmers do,

145
00:07:58.270 --> 00:08:01.270
which is like a very,
very common issue that people

146
00:08:01.270 --> 00:08:02.890
are just, you know, I
know how to do a

147
00:08:02.890 --> 00:08:04.900
loop from one to 10
and you don't think, yeah,

148
00:08:04.900 --> 00:08:06.940
well, I'm in SQL. Now.
I need to work in

149
00:08:06.940 --> 00:08:10.390
a set. That's the efficient
way of working. So once

150
00:08:10.390 --> 00:08:12.790
you've had that shift and
you understand how to deal

151
00:08:12.790 --> 00:08:15.020
with it, it becomes a
lot easier. And then the

152
00:08:15.020 --> 00:08:17.980
data DBS respect you more
and allow you to work

153
00:08:17.980 --> 00:08:21.760
against the database. What do
you think, Rob? Sorry, you

154
00:08:21.760 --> 00:08:24.220
look like you had an,
a you're deep deepened thought

155
00:08:24.220 --> 00:08:26.890
and you maybe you'd fallen
asleep. No, it wasn't falling

156
00:08:26.890 --> 00:08:28.870
asleep. I was just thinking
about the DBEs out there

157
00:08:28.870 --> 00:08:32.230
specifically. What are they going
to do? Well, they like

158
00:08:32.230 --> 00:08:36.100
it without the abstraction. You
know, they, I had a

159
00:08:36.100 --> 00:08:38.230
DBA look at massive and
I said, what do you

160
00:08:38.230 --> 00:08:40.180
think? Am I nuts? You
know, and was a good

161
00:08:40.180 --> 00:08:42.310
friend of mine, Rob Sullivan.
And he, he looked at

162
00:08:42.310 --> 00:08:44.740
this and he said, Oh,
I just love you. Thank

163
00:08:44.740 --> 00:08:47.440
you so much. I'm not
having to do it. And

164
00:08:47.440 --> 00:08:49.480
he just started spazzing out
and he started looking at

165
00:08:49.480 --> 00:08:51.670
the way I was sending
in parameters. And so why

166
00:08:51.670 --> 00:08:53.680
did he like that? Cause
Rob Sullivan is a hardcore

167
00:08:53.710 --> 00:08:56.910
DBA. He's a guy who
tends his SQL Tables as

168
00:08:56.970 --> 00:09:00.680
one would tend their garden.
Yeah. He liked it because

169
00:09:00.680 --> 00:09:04.760
he was able to get
into the nitty gritty system,

170
00:09:04.760 --> 00:09:07.640
SQL client stuff, the add
parameters and make sure that

171
00:09:07.640 --> 00:09:10.040
I like the length and
the string call was 4,000.

172
00:09:10.280 --> 00:09:12.590
So it optimized the plans.
So I didn't write SQL

173
00:09:12.590 --> 00:09:14.750
that, that blew up his
indexes and on and on

174
00:09:14.750 --> 00:09:16.910
and on. And, you know,
he could actually prove the

175
00:09:16.910 --> 00:09:20.270
SQL in the code. Okay.
Or send me a block

176
00:09:20.270 --> 00:09:22.580
of SQL or just say,
run this SP either way.

177
00:09:22.970 --> 00:09:28.670
The communication between my code
database, Rob and everything just

178
00:09:28.670 --> 00:09:30.980
was streamlined. It's no longer
like, well, how do I

179
00:09:30.980 --> 00:09:33.950
get entity framework to not
use an in, you know,

180
00:09:33.950 --> 00:09:35.690
in this thing and use
it Right? How do I

181
00:09:35.690 --> 00:09:37.430
flip? So it's like when
someone gives you a bunch

182
00:09:37.430 --> 00:09:39.290
of lights, they give you
a bunch of switches and

183
00:09:39.290 --> 00:09:40.930
then you figure out what
switch turns on which line.

184
00:09:41.270 --> 00:09:43.070
But here's the question I
want to understand. And, and

185
00:09:43.070 --> 00:09:46.310
I, I know you're an
incredibly old man, Robin, I

186
00:09:46.310 --> 00:09:48.470
am also a, of advanced
age and I've been doing

187
00:09:48.470 --> 00:09:51.920
this almost 20 years. Did
we, as an or as

188
00:09:51.920 --> 00:09:54.260
a, as a group, as
a, as a, as a

189
00:09:54.260 --> 00:09:57.860
career go insane for the
last 15 years, because I'm

190
00:09:57.860 --> 00:10:00.890
hearing all of these people,
I respect these, what I

191
00:10:00.890 --> 00:10:07.400
call alpha geeks, reveling in
inline, inline scripting, things like

192
00:10:07.400 --> 00:10:11.690
webpages and PHP and reveling
in select star from episodes

193
00:10:11.690 --> 00:10:15.260
sitting right there next to
JavaScript and HTML and talking

194
00:10:15.260 --> 00:10:19.370
about how refreshing and clean
it is. But in 1995,

195
00:10:19.370 --> 00:10:22.970
when we were doing the
exact same thing, we were

196
00:10:22.970 --> 00:10:25.220
like, Oh, it's hell on
earth. What are we doing?

197
00:10:25.250 --> 00:10:27.980
Oh my God. I mean,
we are writing the same

198
00:10:28.370 --> 00:10:32.630
stuff that I thought was
crap in 1995. Didn't 2011.

199
00:10:33.200 --> 00:10:35.570
Is this just an example
of we're all going to

200
00:10:35.570 --> 00:10:39.200
end up writing lists in
the future anyway? Or did

201
00:10:39.200 --> 00:10:41.060
we go into, did we,
did we have some kind

202
00:10:41.060 --> 00:10:44.480
of break, you know, was
it really was the last

203
00:10:44.480 --> 00:10:47.090
15 years that it really
happened? I think, I think

204
00:10:47.090 --> 00:10:49.910
that users are finally catching
up. And what that means

205
00:10:49.910 --> 00:10:51.470
is in the beginning and
w you know, the web,

206
00:10:51.500 --> 00:10:54.510
the internet, it was mostly
geeks like us, right? And

207
00:10:54.530 --> 00:10:56.540
we don't really care at
times, new Roman is fine.

208
00:10:56.600 --> 00:10:59.330
And, you know, you go
to a message board and

209
00:10:59.330 --> 00:11:02.900
there's a box, you type
into it. And so now

210
00:11:02.930 --> 00:11:05.240
it seems like the web
is, of course, the web

211
00:11:05.960 --> 00:11:08.990
users, like my mom are
on Facebook and they expect

212
00:11:08.990 --> 00:11:11.660
things to look and act
a certain way. The people

213
00:11:11.660 --> 00:11:14.390
that pay attention to that
are the ones that say

214
00:11:14.390 --> 00:11:17.060
you and your architecture and
all your, I don't care,

215
00:11:17.090 --> 00:11:19.760
get it done. And it's
the people that can get

216
00:11:19.760 --> 00:11:22.610
it done that are able
to make this really compelling

217
00:11:22.610 --> 00:11:25.700
designs for users. Get it
out there, thinking user first,

218
00:11:26.240 --> 00:11:28.970
you don't think software first.
I think that's responsible for

219
00:11:28.970 --> 00:11:31.160
a lot of this, to
be honest, You're saying that

220
00:11:31.160 --> 00:11:35.990
the, the get her done
attitude is what's moving us

221
00:11:35.990 --> 00:11:38.620
away from these large, these
large systems, what was moving

222
00:11:38.630 --> 00:11:40.940
us towards them, where we
were all reading Fowler and

223
00:11:40.940 --> 00:11:44.720
all of these different people
and building large systems for

224
00:11:44.720 --> 00:11:47.780
years and years and years,
I was, I was paid

225
00:11:47.780 --> 00:11:50.180
to whiteboard for money when
I was doing consultancies. And

226
00:11:50.180 --> 00:11:52.790
I was explaining how to
build large object oriented systems

227
00:11:53.560 --> 00:11:56.110
and they worked And they
were successful, but are you

228
00:11:56.110 --> 00:11:58.570
telling me they're just not
necessary? Well, let's think about

229
00:11:58.570 --> 00:12:01.480
MSDN not to pick on
Mike or the asp.net site,

230
00:12:01.480 --> 00:12:03.250
right. They just went through
great readers that we use

231
00:12:03.250 --> 00:12:05.260
on Bronco now and ASP
that if you could, if

232
00:12:05.260 --> 00:12:08.080
you can, in a single
sentence, describe the difference between

233
00:12:08.140 --> 00:12:11.920
asp.net. Let's say five years
ago, and today, what would

234
00:12:11.920 --> 00:12:15.430
that sentence be? I mean,
it would be less, more

235
00:12:15.430 --> 00:12:18.100
organized and less is more.
And, and, and it's, it's

236
00:12:18.100 --> 00:12:20.830
a user defined experience before.
It was just basically a

237
00:12:20.830 --> 00:12:23.620
bunch of like, test me
to a sink to, to

238
00:12:23.620 --> 00:12:26.620
saying that a single file
with inline sequel and JavaScript

239
00:12:26.860 --> 00:12:30.040
and HTML is better than
controls and data grids and

240
00:12:30.040 --> 00:12:33.430
data sources and abstraction layers.
Well, for me, the user

241
00:12:33.430 --> 00:12:35.860
experience, again, to come back
to ESPN on that site,

242
00:12:36.190 --> 00:12:38.980
someone sat down and thought
about what is my reader

243
00:12:38.980 --> 00:12:40.930
going to do, and how
are they going to get

244
00:12:41.230 --> 00:12:43.780
to the information rather than,
well, me as an engineer,

245
00:12:43.780 --> 00:12:45.670
I think we should display
links over here. And these

246
00:12:45.670 --> 00:12:49.840
12,000 ads and whatnot thought
about the user first. And

247
00:12:49.840 --> 00:12:52.690
so to bring it back
to your point, sometimes that

248
00:12:52.720 --> 00:12:56.950
simplicity, mental simplicity of, of
taking all the cruft out

249
00:12:56.950 --> 00:13:00.730
of your brain, thinking about
the user makes you develop

250
00:13:00.760 --> 00:13:04.270
a compelling experience, because if
it takes you a circuitous

251
00:13:04.270 --> 00:13:08.290
route to build that user's
experience, you're going to get

252
00:13:08.290 --> 00:13:10.210
fatigued. You're going to say,
I just, just throw a

253
00:13:10.210 --> 00:13:11.650
list box on the page.
I don't, you know, it

254
00:13:11.650 --> 00:13:13.930
doesn't need to do a
dropdown. Okay. What do you

255
00:13:13.930 --> 00:13:15.340
think Sam? Is this just
a, you're not going to

256
00:13:15.340 --> 00:13:17.210
need it. Yes. The Agni
has caught up with us

257
00:13:17.240 --> 00:13:21.060
a decade later. I don't
think it's mutually exclusive. I

258
00:13:21.060 --> 00:13:25.740
think these systems can coexist.
And for some, for some

259
00:13:25.740 --> 00:13:28.830
things, there are some problems
that like having a slightly

260
00:13:28.830 --> 00:13:32.100
more complicated abstraction is really
handy. If you need to

261
00:13:32.130 --> 00:13:35.250
like cut through results in
all sorts of weird ways.

262
00:13:35.250 --> 00:13:38.130
So you've got to display
a list of things and

263
00:13:38.130 --> 00:13:40.410
you have to order it
by this or by that.

264
00:13:40.410 --> 00:13:42.090
And you have to filter
it by this, or by

265
00:13:42.090 --> 00:13:47.220
that you're stuck, composing these
fairly complex things. I think

266
00:13:47.220 --> 00:13:52.560
something that happened is that
because these big, big systems

267
00:13:52.560 --> 00:13:56.940
solved this one complicated problem
and also solved another 1000

268
00:13:57.360 --> 00:14:01.350
problems, we were stuck using
this big complicated system. What

269
00:14:01.350 --> 00:14:04.140
I'm hoping is that we'll
be able to like reduce

270
00:14:04.140 --> 00:14:07.890
this down and build a
smaller piece that does capture

271
00:14:07.890 --> 00:14:12.720
all of those common issues
that we have. So, yeah.

272
00:14:12.750 --> 00:14:15.420
So back to your original
thing, I mean, did we,

273
00:14:15.720 --> 00:14:18.480
were we sleeping for the
last 15 years and did

274
00:14:18.480 --> 00:14:20.640
we make a huge mistake
now? I don't. I don't

275
00:14:20.640 --> 00:14:23.430
think so. I think we
learnt a lot, but I

276
00:14:23.430 --> 00:14:26.100
think once, once in a
while, we have to go

277
00:14:26.100 --> 00:14:29.190
back to basics and try
and figure out what, what

278
00:14:29.190 --> 00:14:31.230
really is happening. We want
to know, we don't want

279
00:14:31.230 --> 00:14:35.820
to be sitting there blind
to these huge systems that

280
00:14:35.820 --> 00:14:37.140
people are throwing it. We
want to be able to

281
00:14:37.140 --> 00:14:40.140
debug down to the lines
that are sending commands to

282
00:14:40.140 --> 00:14:44.010
the database and figure out
what is going on. Hi,

283
00:14:44.010 --> 00:14:46.170
this is Scott coming to
you from another place in

284
00:14:46.170 --> 00:14:49.530
time. Are you using agile
practices to manage your software

285
00:14:49.530 --> 00:14:51.920
development? There's lots of tools
in the, that manage the

286
00:14:51.920 --> 00:14:53.870
steps Of a project, but
most of them focus on

287
00:14:53.870 --> 00:14:57.200
individual roles, get ready for
a solution that caters for

288
00:14:57.200 --> 00:15:00.140
the success of the whole
team. Guys at Tellerik introduced

289
00:15:00.140 --> 00:15:03.620
team pulse. It's an agile
project management tool. That'll help

290
00:15:03.620 --> 00:15:06.980
you gather ideas, estimate plan,
track progress in a common

291
00:15:06.980 --> 00:15:10.670
workspace. Finally, companies, regardless of
their size can use a

292
00:15:10.670 --> 00:15:13.130
lightweight and convenient tool that
makes all the stakeholders work

293
00:15:13.130 --> 00:15:16.340
as a United team. Even
if they're in different countries

294
00:15:17.030 --> 00:15:19.790
by combining intuitive user interface
and the power server light

295
00:15:20.030 --> 00:15:22.610
team poles removes the roadblocks
that you typically face and

296
00:15:22.610 --> 00:15:25.910
applying agile in an effective
manner, no more lost data,

297
00:15:26.000 --> 00:15:29.990
no disparate systems, no lack
of critical analytics regarding the

298
00:15:29.990 --> 00:15:33.770
health philosophy project. So you
yourself get a free copy

299
00:15:33.860 --> 00:15:39.710
for five users in one
project at tellerik.com/team pulse. And

300
00:15:39.710 --> 00:15:42.980
please do thank tolerance for
supporting Hansel minutes on their

301
00:15:42.980 --> 00:15:48.800
Facebook fan page, facebook.com/t L
E R I K Keller.

302
00:15:49.760 --> 00:15:51.680
We do appreciate it. There
wouldn't be a Hansel minutes

303
00:15:51.680 --> 00:15:54.710
if there wasn't teller helping
us. So what I'm hearing

304
00:15:54.710 --> 00:15:58.550
you say is that it's
not that we are saying

305
00:15:58.550 --> 00:16:01.190
the last 10 years was,
was a mistake, but we

306
00:16:01.190 --> 00:16:03.590
are hearkening back to a
simpler time. And we are

307
00:16:03.590 --> 00:16:06.770
saying that, you know, sometimes
you need a power drill

308
00:16:06.770 --> 00:16:08.660
and sometimes you do it
the old fashioned way, the

309
00:16:08.660 --> 00:16:11.930
way our ancestors did in
the early nineties, like there

310
00:16:11.930 --> 00:16:15.560
was time when you do
it, the, the simple close

311
00:16:15.560 --> 00:16:17.180
to the metal way. And
then there's also a place

312
00:16:17.180 --> 00:16:19.790
for the larger things and
perhaps mix and matching when

313
00:16:19.790 --> 00:16:22.090
the tools are appropriate. I
was just thinking that it

314
00:16:22.090 --> 00:16:26.110
also follows a very natural
pattern of complexity, resolving simplicity,

315
00:16:26.140 --> 00:16:30.460
which is lasting out to
complexity. It's like butterfly wings

316
00:16:30.460 --> 00:16:33.340
and hurricane and all that
stuff where you do get

317
00:16:33.340 --> 00:16:35.230
to a point and all
of a sudden everything resolves

318
00:16:35.230 --> 00:16:36.850
and an image pops in
my head. Do you remember

319
00:16:36.850 --> 00:16:41.020
when BMW? I think it
was five or six years

320
00:16:41.020 --> 00:16:43.840
ago. They came out with
a new seven series and

321
00:16:43.840 --> 00:16:46.660
they did away with all
the instrumentation. And you think

322
00:16:46.660 --> 00:16:49.780
about these cars that, you
know, were the technical aspect

323
00:16:49.780 --> 00:16:52.450
of these cars, Oh, four
or five, maybe longer years

324
00:16:52.450 --> 00:16:56.770
ago, dash board covered in
instrumentation. And it was kind

325
00:16:56.770 --> 00:16:58.770
of a calling card. Like,
look how technical and cooled

326
00:16:58.770 --> 00:17:01.300
and lit up and Blinky
our car is. And BMW

327
00:17:01.300 --> 00:17:04.450
came out with a single
knob and the single knob

328
00:17:04.480 --> 00:17:06.730
had a screen and you
page through and you click

329
00:17:06.730 --> 00:17:08.860
click, and it's like, you
know, the iPhones interface too.

330
00:17:09.190 --> 00:17:12.940
I think people are moving
to embrace this simple technology.

331
00:17:13.060 --> 00:17:16.840
I think they'd like it.
So in the embracing of

332
00:17:16.840 --> 00:17:19.840
that, you Sam work at
stack overflow, and I know

333
00:17:19.840 --> 00:17:21.940
that you're really big on
the perf perf is kind

334
00:17:21.940 --> 00:17:23.740
of, one of the things
you're known for is that

335
00:17:23.740 --> 00:17:26.680
I know you four and
stack overflow has I think,

336
00:17:26.680 --> 00:17:29.080
40 or so tables. And
the D they use linked

337
00:17:29.080 --> 00:17:30.880
to sequel for a very
long time. It was all

338
00:17:30.880 --> 00:17:33.190
originally done in linked to
sequel. And you found some

339
00:17:33.190 --> 00:17:35.170
hotspots that you didn't like
and link to sequel was

340
00:17:35.170 --> 00:17:37.210
getting in your way. So
what did you do about

341
00:17:37.210 --> 00:17:41.470
it? So the first step
with any performance issues is

342
00:17:41.470 --> 00:17:43.810
figuring out that you have
a performance issue and where

343
00:17:43.810 --> 00:17:47.500
it is. So like you
said, you found hotspots, but

344
00:17:47.500 --> 00:17:50.400
that, that takes a long
time to discover What they

345
00:17:50.400 --> 00:17:54.450
are. Once we discovered the
hotspots, we, there, there are

346
00:17:54.450 --> 00:17:56.310
two things that you do.
One is you try to

347
00:17:56.310 --> 00:17:59.460
make less database calls if
you can. So if we

348
00:17:59.460 --> 00:18:01.650
had a page that was
doing 60 database calls and

349
00:18:01.650 --> 00:18:04.050
we pare it down to
20, suddenly, there's a lot

350
00:18:04.050 --> 00:18:07.410
less round trips to the
database and a lot less

351
00:18:07.410 --> 00:18:10.380
RM work because suddenly it's
only doing, you know, 20

352
00:18:10.380 --> 00:18:15.300
calls. And once you pair
that down, then you continue

353
00:18:15.300 --> 00:18:17.460
to see, well, you know,
is this fast enough? Am

354
00:18:17.460 --> 00:18:21.120
I happy with it? And
for a couple of our

355
00:18:21.120 --> 00:18:23.820
really hot areas, we weren't
happy with it. And then

356
00:18:23.820 --> 00:18:28.020
we just went and hand
coded them, but we already

357
00:18:28.020 --> 00:18:30.270
had them hand coded before
the trouble was that we

358
00:18:30.270 --> 00:18:32.340
needed to be able to
tell how this Rita was

359
00:18:32.340 --> 00:18:36.030
being constructed. We need to
know the, the pipeline between

360
00:18:36.480 --> 00:18:41.220
my abstraction, to where the
database is executing. We needed

361
00:18:41.220 --> 00:18:43.590
to know what that pipeline
was doing and be able

362
00:18:43.590 --> 00:18:46.470
to control it. So that's
when we stepped in with

363
00:18:46.470 --> 00:18:49.250
dapper and replaced it. Okay.
So they'll give folks that

364
00:18:49.250 --> 00:18:51.080
are listening a little bit
more context, right? Linked to

365
00:18:51.080 --> 00:18:53.780
SQL as a one to
one map or between an

366
00:18:53.780 --> 00:18:56.810
object in a C sharp
object maps directly to a

367
00:18:56.810 --> 00:19:02.090
table. And it's a reasonably
lightweight layer, but it gives

368
00:19:02.090 --> 00:19:04.190
you objects when you do
reads and it expects you

369
00:19:04.190 --> 00:19:08.330
to create objects and do
inserts. And you, when you

370
00:19:08.330 --> 00:19:10.700
say that you went kind
of lower down, are you

371
00:19:10.700 --> 00:19:13.790
talking about like, you know,
DB connections, equal client and

372
00:19:13.790 --> 00:19:17.480
database readers and things like
that? Well, actually, yes, at

373
00:19:17.480 --> 00:19:21.890
some point we had some
hotspots initially, where we just

374
00:19:21.890 --> 00:19:24.380
said, no, we can't take
this anymore. We need to

375
00:19:24.410 --> 00:19:27.080
like write the SQL data
reader. And it was like

376
00:19:27.080 --> 00:19:29.780
back to 20 years ago
when you were sitting with

377
00:19:29.780 --> 00:19:33.260
SQL data readers, and I'm
praying that you get the

378
00:19:33.260 --> 00:19:36.020
numbers for the columns, right?
Because you shift by one,

379
00:19:36.020 --> 00:19:38.270
then everything is going to
explode. And if somebody adds

380
00:19:38.270 --> 00:19:41.420
a column everything's going to
explode. So that code is

381
00:19:41.420 --> 00:19:44.930
incredibly fragile. And then we
looked and said, look, you

382
00:19:44.930 --> 00:19:48.260
know, we can create an
abstraction that is, is simple,

383
00:19:48.260 --> 00:19:52.310
lightweight, and replace that, that
code with it and not

384
00:19:52.310 --> 00:19:54.860
lose much perf. And that
is when, like we introduced

385
00:19:54.860 --> 00:19:57.740
our micro around that. So
your micro ORM, I would

386
00:19:57.740 --> 00:20:00.350
say, if I come back
to the select star from

387
00:20:00.350 --> 00:20:02.360
something, what do I write?
If I'm going to like

388
00:20:02.380 --> 00:20:03.860
it in the teen, in
the keynote, it mixed here.

389
00:20:03.860 --> 00:20:08.150
I wrote a using web
matrix database that open. And

390
00:20:08.150 --> 00:20:10.970
then I went query select
star from episodes. And then

391
00:20:10.970 --> 00:20:13.670
what came out of my
stuff was a dynamic object

392
00:20:13.670 --> 00:20:16.670
that was generated by the
web matrix magic. How would

393
00:20:16.670 --> 00:20:19.010
that work in dapper? What
is happening under the covers?

394
00:20:19.130 --> 00:20:22.040
So, so what we do
in dapper is it's a

395
00:20:22.040 --> 00:20:24.620
generic method. So you tell
it that eats of type

396
00:20:24.620 --> 00:20:28.370
posts and it returns a
list of posts. So we

397
00:20:28.670 --> 00:20:31.580
fortunately had post already defined
for linked to SQL so

398
00:20:31.580 --> 00:20:35.810
we can reuse the object.
So it's identical to the

399
00:20:35.810 --> 00:20:37.730
line that you described, except
that it has a generic

400
00:20:37.730 --> 00:20:42.320
parameter. Now underneath what it
does is it perform some

401
00:20:42.320 --> 00:20:47.060
very, very heavy caching. So
it will generate methods that

402
00:20:47.080 --> 00:20:52.090
will read the parameters. Actually,
I'll, I'll go back back

403
00:20:52.090 --> 00:20:55.480
one step with, with that.
We, we we'd pass the

404
00:20:55.480 --> 00:20:58.840
parameter. Let's say we want
to select staff from where

405
00:20:58.840 --> 00:21:02.500
post ID equals one. You're
not going to hard code

406
00:21:02.530 --> 00:21:04.930
that string a thousand times
because it's not going to

407
00:21:04.930 --> 00:21:07.720
be cached. It's not going
to SQL. Server is not

408
00:21:07.720 --> 00:21:10.300
going to be able to
catch that query. So instead

409
00:21:10.300 --> 00:21:13.630
you parameterize that. And we
parameters that we put at

410
00:21:13.810 --> 00:21:17.470
ID, we pass it in
anonymous methods saying ID equals

411
00:21:17.470 --> 00:21:22.120
one. And then we're able
to cash the piece of

412
00:21:22.120 --> 00:21:24.460
code that is able to
read that parameter and turn

413
00:21:24.460 --> 00:21:27.190
it into a SQL command
and SQL parameters. That's part

414
00:21:27.190 --> 00:21:29.530
one of the code that
we're caching that we're generating

415
00:21:29.530 --> 00:21:32.680
on the fly. And the
second part of code that,

416
00:21:32.680 --> 00:21:35.500
that, that will cash is
the code that will take

417
00:21:35.800 --> 00:21:39.670
the SQL data reader and
a new upper post, and

418
00:21:39.670 --> 00:21:42.550
set every property one at
a time, depending on what

419
00:21:42.550 --> 00:21:45.910
the data reader came back.
And this has done dynamically.

420
00:21:45.910 --> 00:21:48.040
So if you add a
column later on, you've done

421
00:21:48.040 --> 00:21:50.380
select style. You add a
column later on in the

422
00:21:50.380 --> 00:21:54.610
database and you add it
again in your posts class.

423
00:21:54.970 --> 00:21:57.440
It will pick that up
on the next run. And

424
00:21:57.510 --> 00:22:01.530
many of us have written
naive implementations of data reader

425
00:22:01.530 --> 00:22:04.320
to object that use reflection
and different things like that.

426
00:22:04.320 --> 00:22:08.070
But since you're really interested
in perf you're actually emitting

427
00:22:08.520 --> 00:22:12.450
these methods, these, these almost
de serializers a collection of

428
00:22:12.450 --> 00:22:15.570
different D serializers that say,
here's the object post or

429
00:22:15.570 --> 00:22:18.510
in my example, episodes, that
is the shape of the

430
00:22:18.510 --> 00:22:21.210
data reader. And I know
that there's columns saying this

431
00:22:21.340 --> 00:22:24.960
and this object has that
property. So rather than reflecting

432
00:22:24.960 --> 00:22:27.780
around, which would be horrifically
slow, you're actually emitting IRL

433
00:22:28.650 --> 00:22:31.830
and saying here's a little
little just for the, for

434
00:22:31.830 --> 00:22:35.790
this app domains, lifetime little
D serializer. Yes. And it

435
00:22:35.790 --> 00:22:37.650
goes left hand, right hand,
left, hand, right hand data

436
00:22:37.650 --> 00:22:39.180
reader at zero. It goes
in here. I don't know

437
00:22:39.210 --> 00:22:42.630
that Correct exactly like that.
And there, there are two

438
00:22:42.630 --> 00:22:47.250
techniques. These techniques existed back
from.net. One reflection emit was

439
00:22:47.250 --> 00:22:51.360
there, but it became incredibly
efficient in dotnet too, when

440
00:22:51.390 --> 00:22:54.720
they introduced lightweight code gen.
And that allows you to

441
00:22:54.750 --> 00:22:59.370
define static methods that can
bypass visibility checks on objects.

442
00:22:59.370 --> 00:23:02.700
So you can even hydrate
private properties. And so on

443
00:23:03.900 --> 00:23:07.710
in dotnet four with the
dynamic movement, there's a new

444
00:23:08.040 --> 00:23:10.530
way of doing this with
expressions that allows you to

445
00:23:10.590 --> 00:23:15.720
build IRL in expressions. The
trouble with lightweight Kogan is

446
00:23:16.200 --> 00:23:19.050
it's, it's both a blessing
and a curse is that

447
00:23:19.170 --> 00:23:22.500
it is very, very close
to the metal. So you

448
00:23:22.500 --> 00:23:25.200
can very, very easily mess
up. If you make a

449
00:23:25.200 --> 00:23:29.040
bug there, there's no debugging.
It explodes. So if you

450
00:23:29.040 --> 00:23:32.880
make one wrong MSL statement,
the next thing you know,

451
00:23:32.910 --> 00:23:35.370
you've got, you've destabilized the
runtime, that's the area you

452
00:23:35.370 --> 00:23:41.250
get, and you cannot debug
into it. Microsoft introduced expressions

453
00:23:41.280 --> 00:23:44.010
in dotnet three, five, and
beefed it up. And dotnet

454
00:23:44.010 --> 00:23:45.770
for, to allow you to
do a lot of this,

455
00:23:46.460 --> 00:23:49.070
Probably found it to be
fairly straightforward thing to build.

456
00:23:50.080 --> 00:23:53.680
We used dial for, we
used it because we're used

457
00:23:53.680 --> 00:23:56.020
to it, right. Mark and
I are both much more

458
00:23:56.020 --> 00:23:59.680
comfortable in it. Also it'll
allow dapper to work in

459
00:23:59.680 --> 00:24:02.230
dotnet to zero later on
if we want to. And

460
00:24:02.230 --> 00:24:03.580
how big is this? How
many lines of code is,

461
00:24:03.580 --> 00:24:07.570
this is dapper couple hundred,
couple of hundred lines. So,

462
00:24:07.780 --> 00:24:10.480
so this is really interesting.
So here's a person optimizing

463
00:24:10.480 --> 00:24:13.420
for performance, and you found
a solution by which you

464
00:24:13.420 --> 00:24:16.120
would say, you know, I
have an object, here's some

465
00:24:16.120 --> 00:24:19.030
SQL make it happen, and
you optimize for performance and

466
00:24:19.030 --> 00:24:24.160
you found happiness. Now, Rob
is always optimizing for happiness,

467
00:24:25.750 --> 00:24:30.340
right? And so you, you
simultaneously and unbeknownst to Sam,

468
00:24:30.550 --> 00:24:32.860
or are off trying to
figure out how to make

469
00:24:32.860 --> 00:24:35.110
things prettier. You've been working
in web matrix, and you

470
00:24:35.380 --> 00:24:38.980
are also a rubious on
occasion. When you tried to

471
00:24:38.980 --> 00:24:41.590
optimize for happiness, you came
up with something called massive,

472
00:24:41.800 --> 00:24:43.960
right? How did that happen?
And why did you do

473
00:24:43.960 --> 00:24:48.310
it? Well, I was working
with web matrix.data a lot

474
00:24:48.760 --> 00:24:50.920
with our podcast site that
we have the other one

475
00:24:51.430 --> 00:24:54.940
and just a few other
adventures. And it was really

476
00:24:54.940 --> 00:24:57.790
fun, but there's a few
things that were missing. And

477
00:24:58.690 --> 00:25:01.000
as we talked about before,
there's certain things with SQL

478
00:25:01.000 --> 00:25:03.670
that are not fun, insert
into Valley, dah, dah, dah,

479
00:25:03.720 --> 00:25:06.010
you end up writing a
lot of stuff, web matrix.data.

480
00:25:06.010 --> 00:25:08.740
Doesn't support that right now.
And I thought, well, maybe

481
00:25:08.740 --> 00:25:10.120
I could just write a
little bit of love for

482
00:25:10.120 --> 00:25:12.670
this thing. And I started
to put some ideas together

483
00:25:12.670 --> 00:25:15.070
and I thought, well, you
know, I could just make

484
00:25:15.070 --> 00:25:17.140
it a method call, or
what if I just sent

485
00:25:17.140 --> 00:25:19.750
it in an anonymous objects
in diesel? Is that into

486
00:25:19.990 --> 00:25:22.870
a SQL column? I did
that. And it worked. And

487
00:25:22.870 --> 00:25:24.010
then I thought, well, what
if I did it with

488
00:25:24.010 --> 00:25:25.300
a dictionary? What if I
did it with a name

489
00:25:25.310 --> 00:25:27.300
value collection? What if I
did it with an expander

490
00:25:27.310 --> 00:25:30.370
dynamic and all this stuff?
And it was really easy

491
00:25:30.370 --> 00:25:34.000
with all the language enhancements
and C sharp for, so

492
00:25:34.510 --> 00:25:37.540
for me, you know, I
was telling somebody yesterday that

493
00:25:37.870 --> 00:25:42.220
I think 25% of the
whole massive thing is a,

494
00:25:42.230 --> 00:25:45.070
the reading out of the
database, or excuse me, it

495
00:25:45.180 --> 00:25:47.920
is, is the actual inserts
and updates. The rest of

496
00:25:47.920 --> 00:25:49.690
it is the reading of
the, of the data that

497
00:25:50.140 --> 00:25:52.960
the putting in of data
and the updating of data

498
00:25:52.960 --> 00:25:56.350
deleting it. And so on
was actually quite simple. And

499
00:25:56.350 --> 00:25:59.140
I'm looking at this and
I'm thinking, well, I don't

500
00:25:59.140 --> 00:26:02.500
really need to base this
on web matrix data. Let's

501
00:26:02.500 --> 00:26:04.540
go down a level. So
you had built it on

502
00:26:04.540 --> 00:26:06.310
web pages. I did. I
started out a way matrix

503
00:26:06.310 --> 00:26:09.130
I data, and I thought,
well, it doesn't do transactions

504
00:26:09.130 --> 00:26:11.440
the way I would expect.
There's a few things I

505
00:26:11.440 --> 00:26:15.040
want in there for performance.
And so I just went

506
00:26:15.040 --> 00:26:18.700
to system data common, which
is, is data factory. And

507
00:26:18.700 --> 00:26:21.400
now we can open it
up to all providers. And,

508
00:26:21.940 --> 00:26:23.740
and I did that and
I started squeezing code down.

509
00:26:23.740 --> 00:26:27.220
And that became for me,
for some reason, the fun

510
00:26:27.220 --> 00:26:29.110
part of it all is
just let's see how small

511
00:26:29.110 --> 00:26:31.210
I can make this. And
it started out at 500

512
00:26:31.210 --> 00:26:34.690
lines, trimmed it down to
a four 50. Then someone

513
00:26:34.690 --> 00:26:37.480
from the community came in
refactored, a bunch of my

514
00:26:37.480 --> 00:26:41.130
mess, you know, out, squeezed
it down to 360 and

515
00:26:41.180 --> 00:26:43.560
we've hovered around three 60
for awhile. And when you

516
00:26:43.560 --> 00:26:46.110
say squishing it down lines,
you're literally talking about semantics.

517
00:26:46.110 --> 00:26:48.150
You're not talking about just
removing white space and making

518
00:26:48.150 --> 00:26:52.770
everything really long line refactoring
using some better expression syntax.

519
00:26:53.370 --> 00:26:55.830
Yeah. So you started, you
kind of wrote a poem,

520
00:26:56.610 --> 00:26:59.220
basically massive. It's almost like,
you know, it's a high

521
00:26:59.220 --> 00:27:01.230
code, it's a big high
coup I mean, you optimized

522
00:27:01.500 --> 00:27:03.720
first for usefulness and happiness,
and then you tried to

523
00:27:03.720 --> 00:27:05.640
optimize because it became a
challenge to make it really

524
00:27:05.640 --> 00:27:10.890
small. Yeah. And he, Sam
is, is using reflection emit,

525
00:27:10.890 --> 00:27:14.220
and he's bringing out real
objects, a real poster, a

526
00:27:14.220 --> 00:27:16.830
real episode. When I use
massive, what do I get

527
00:27:17.280 --> 00:27:21.210
out of my, my execute
call currently? It's, it's, what's

528
00:27:21.210 --> 00:27:25.110
called an expando object, a
dynamic object in.net. And you

529
00:27:25.110 --> 00:27:27.060
can assign a property to
it, read a property from

530
00:27:27.060 --> 00:27:29.640
it. It's kind of a
Willy nilly Plato, so to

531
00:27:29.640 --> 00:27:32.490
speak. But a lot of
people have been asking for

532
00:27:33.380 --> 00:27:35.340
a generic to be used.
You could do a query

533
00:27:35.700 --> 00:27:38.040
T query of T. And
I was thinking about it.

534
00:27:38.040 --> 00:27:39.960
And it's just a couple
of lines of reflection. And,

535
00:27:39.960 --> 00:27:42.720
you know, so funny, I
was thinking about doing this.

536
00:27:42.780 --> 00:27:45.420
The problem is that you
get into, you get into

537
00:27:45.420 --> 00:27:48.840
type conversion. When you're starting
to do reflection, what's coming

538
00:27:48.840 --> 00:27:51.060
out of the database. It
might not necessarily match exactly

539
00:27:51.060 --> 00:27:53.790
the type. And I keep
thinking, I want to do

540
00:27:53.790 --> 00:27:55.530
it, but then, Oh man,
this is going to open

541
00:27:55.530 --> 00:27:57.660
up a big, but isn't
it already done? You're sitting

542
00:27:57.660 --> 00:27:59.940
next to him. Yeah, no,
I, I mean, I did

543
00:27:59.940 --> 00:28:02.070
it with subsonic and people
have done it in the

544
00:28:02.070 --> 00:28:04.410
past, but should you merge
the two should massive and

545
00:28:04.410 --> 00:28:06.780
dapper become massively dapper. I
am not nearly as smart

546
00:28:06.780 --> 00:28:09.990
as Sam, but the point
is though, is there one

547
00:28:09.990 --> 00:28:12.630
library? Here are two, I
think is the question. What

548
00:28:12.630 --> 00:28:14.970
Sam's is purpose driven, which
I think is great. He

549
00:28:14.970 --> 00:28:18.120
did it for performance, and
I'm not saying there's anything

550
00:28:18.120 --> 00:28:19.380
wrong with it. I'm not
saying it's a difference in

551
00:28:19.380 --> 00:28:22.800
vision, but you know, I
didn't even know an aisle

552
00:28:22.800 --> 00:28:26.160
writer existed until I saw
this code. My eyes crossed.

553
00:28:26.610 --> 00:28:28.560
And we, we had a
great time on Twitter. You

554
00:28:28.560 --> 00:28:30.660
know, Jeff Atwood came out
and said, Oh, we're squeezing

555
00:28:30.660 --> 00:28:32.220
your head. We're coming after
you and your lines of

556
00:28:32.220 --> 00:28:34.200
code. And I looked at
dapper and I saw the

557
00:28:34.200 --> 00:28:36.500
perfect thing. And I'm looking,
I'm like, wait, how could

558
00:28:36.510 --> 00:28:38.370
I double up my, you
know, cause they were twice

559
00:28:38.370 --> 00:28:40.680
as fast as, as massive.
And so I got to

560
00:28:40.710 --> 00:28:42.900
going back and forth to
Sam and email and he's

561
00:28:42.900 --> 00:28:44.730
like, well allow for a
connection to be passed in.

562
00:28:44.730 --> 00:28:48.150
That's already open Dov should
have done that before, led

563
00:28:48.150 --> 00:28:50.400
me to refactor down by
40 lines. And then I

564
00:28:50.400 --> 00:28:53.520
added in an overload. Right.
And so yeah, we matched

565
00:28:53.520 --> 00:28:55.770
up now on some calls
there's still fast. Are there

566
00:28:55.770 --> 00:28:59.250
any examples where you have
four or five lines of

567
00:28:59.250 --> 00:29:02.790
code that was written entirely
separately, but ended up being

568
00:29:03.120 --> 00:29:06.060
the way to do it,
or are they entirely different

569
00:29:06.060 --> 00:29:09.930
and unique implementations that just
happen to have similar signatures

570
00:29:09.930 --> 00:29:13.790
and similar proof? I think
it's like when you're I

571
00:29:13.790 --> 00:29:18.140
added the dynamic piece to
dapper after a massive, just

572
00:29:18.140 --> 00:29:21.140
to try and like have
parody there also internally we

573
00:29:21.140 --> 00:29:24.020
use that quite often that
we don't want to like

574
00:29:24.080 --> 00:29:26.840
create a class it's a
little bit annoying to go

575
00:29:26.840 --> 00:29:28.430
through all of that code.
So it's easier just to

576
00:29:28.430 --> 00:29:32.000
take a dynamic back. But
I think we came to

577
00:29:32.000 --> 00:29:36.260
the same conclusion like independently
of, you know, this is,

578
00:29:36.470 --> 00:29:38.630
it's pretty simple, you know,
you build up and expand

579
00:29:38.630 --> 00:29:42.610
those, set up, all those
things on it. And I

580
00:29:42.610 --> 00:29:46.420
think one of the big
differences between dapper and, and

581
00:29:46.420 --> 00:29:51.130
massive is the way that
we pass parameters in. And

582
00:29:51.230 --> 00:29:54.100
I guess for us, like
we re really, we need

583
00:29:54.100 --> 00:29:56.110
to need it to be
able to pass in big

584
00:29:56.260 --> 00:29:59.650
chunks of sequel with lots
of intertwined parameters and be

585
00:29:59.650 --> 00:30:03.010
able to tell which one
is which, whereas I guess

586
00:30:03.660 --> 00:30:07.480
massive is not dealing as
much with that problem. It's

587
00:30:07.480 --> 00:30:11.290
trying to be something a
lot leaner, but I guess

588
00:30:11.500 --> 00:30:14.650
we'll, we'll pick up things
from each framework as they

589
00:30:15.280 --> 00:30:18.400
meet what we need to
do with it. And I'd

590
00:30:18.400 --> 00:30:22.090
be happy to like take
little classes from Robin. I'm

591
00:30:22.090 --> 00:30:24.570
sure he'd be happy the
other way around. So both

592
00:30:24.570 --> 00:30:27.060
of these dapper and massive
for both in new get,

593
00:30:27.060 --> 00:30:28.770
and that's probably the way
the best way to get

594
00:30:28.770 --> 00:30:32.190
them. And I think you're
both on GitHub. Yup. What

595
00:30:32.190 --> 00:30:36.180
do you tell the there's
this canonical person out there?

596
00:30:36.180 --> 00:30:37.440
I don't know if they
exist or not, but I

597
00:30:37.440 --> 00:30:40.680
always talk about the, the
chief architect of the Nebraska

598
00:30:40.680 --> 00:30:44.040
department of forestry, right. He's
working in a big enterprise.

599
00:30:44.580 --> 00:30:46.980
He's out in the middle
of maybe not quite New York

600
00:30:47.160 --> 00:30:49.830
and he's got a lot
of legacy stuff and he's

601
00:30:49.830 --> 00:30:51.240
trying to get up on
the new stuff, but you

602
00:30:51.240 --> 00:30:54.870
know, he's, he wants to
use things like dapper massive,

603
00:30:54.870 --> 00:30:56.430
but maybe he's got linked
to sequel or maybe he's

604
00:30:56.440 --> 00:31:00.180
got an hibernate. What do
you tell that person? Tell

605
00:31:00.180 --> 00:31:02.880
him, what is your problem?
What are your pain points

606
00:31:02.880 --> 00:31:06.210
at the moment? I don't
tell him, look, there's something

607
00:31:06.210 --> 00:31:08.880
shiny and new that is
fast and is awesome. Use

608
00:31:08.880 --> 00:31:12.720
it. I tell him, look,
this is the other options

609
00:31:12.720 --> 00:31:15.030
that you have that are
out there. If you have

610
00:31:15.060 --> 00:31:17.670
a particular performance bottleneck and
your web servers are running

611
00:31:17.670 --> 00:31:21.360
hot because of your RM,
then these are your options.

612
00:31:21.600 --> 00:31:23.850
One thing that I think
I did with DAPA, which

613
00:31:23.850 --> 00:31:27.570
is really important, was a
very, very good benchmark that

614
00:31:27.570 --> 00:31:30.810
measures what the RM cost
is. And now we have

615
00:31:30.810 --> 00:31:34.260
in hibernate in it linked
to sequel entity framework, I'm

616
00:31:34.260 --> 00:31:37.020
accepting patches to add more
and more. There's a very

617
00:31:37.020 --> 00:31:41.040
similar implementation of what dapper
did called up Peter poco.

618
00:31:41.040 --> 00:31:45.480
That also does something similar.
I tell this guy to

619
00:31:45.600 --> 00:31:47.460
figure it out what it
is that he needs to

620
00:31:47.460 --> 00:31:51.360
solve. Right. And I informed
him that these other Lego

621
00:31:51.360 --> 00:31:54.840
pieces exist. You know, for
me, the interesting thing about

622
00:31:54.840 --> 00:31:57.720
massive is, is I don't,
if I'm talking to mr.

623
00:31:57.740 --> 00:32:02.670
Nebraska department of forestry, you
know, it's not that I

624
00:32:02.670 --> 00:32:05.730
think it's going to necessarily
change a lot of what

625
00:32:05.970 --> 00:32:08.790
they're doing right now. Like
if you use this tool,

626
00:32:08.790 --> 00:32:12.030
you'll have, you know, splendid,
happiness, online, all your lifelong.

627
00:32:14.250 --> 00:32:16.830
What I think people have
found is just by playing

628
00:32:16.830 --> 00:32:18.990
with it, they're able to
see some of the new

629
00:32:18.990 --> 00:32:23.280
things that are, are, are
in system, not dynamic or

630
00:32:23.280 --> 00:32:25.560
in C sharp for like,
Oh, wow. I didn't think

631
00:32:25.560 --> 00:32:28.200
you could do this. Hey,
maybe we can go ahead

632
00:32:28.200 --> 00:32:31.530
and take this approach. Right.
And in a way I've

633
00:32:31.530 --> 00:32:33.090
found a lot of people
come back and said, I

634
00:32:33.090 --> 00:32:35.250
really like massive. But what
we decided to do is

635
00:32:35.250 --> 00:32:37.290
X, Y, Z. And I'm
like, great, go for it.

636
00:32:37.320 --> 00:32:40.310
You know? I mean, so
it is different though than

637
00:32:40.310 --> 00:32:42.800
15 years ago. I mean,
much dynamics and Lamaze and

638
00:32:42.800 --> 00:32:46.430
expressions, and I'll met, it's
not classic ASP all over

639
00:32:46.430 --> 00:32:48.470
again, his own. No. And
that's, you know, to come

640
00:32:48.470 --> 00:32:50.360
back to your thing, are
we, are we going backwards?

641
00:32:50.360 --> 00:32:53.300
I don't think so. I
think we're going forwards because

642
00:32:53.300 --> 00:32:56.390
we, you know, the complexity
is resolving now into these

643
00:32:56.570 --> 00:33:00.380
frameworks are so capable and
there's a lot more functionality

644
00:33:00.380 --> 00:33:03.080
in them and we're able
to take that extreme amount

645
00:33:03.080 --> 00:33:06.830
of functionality and resolve it
into something that's simple, which

646
00:33:06.830 --> 00:33:09.500
I think is elegant. Wonderful.
Very cool. Well, you can

647
00:33:09.500 --> 00:33:12.410
check out massive on GitHub
and on a new and

648
00:33:12.410 --> 00:33:14.990
Rob's blog and you can
also learn more about Debra

649
00:33:14.990 --> 00:33:19.460
at Sam's blog. Thanks a
lot. This has been another

650
00:33:19.460 --> 00:33:22.130
episode of Hansel minutes and
I'll see you again next

651
00:33:22.130 --> 00:33:22.310
week.

