WEBVTT FILE

1
00:00:12.210 --> 00:00:16.770
From Hanselman it's dot com.
It's Hanselman. It's a weekly

2
00:00:16.770 --> 00:00:21.330
discussion with web developer and
technologists. Scott Hanselman. This is

3
00:00:21.330 --> 00:00:27.720
Lawrence Ryan announcing show number one
96. Recorded live Thursday, January 21st, 2010.

4
00:00:28.350 --> 00:00:32.070
Support for Hanselman it's just
provided by Tellerik rad controls,

5
00:00:32.070 --> 00:00:35.190
the most comprehensive suite of
components for windows forms and

6
00:00:35.190 --> 00:00:43.950
ESP got that web applications
online@wwwdottelerik.com. In this episode, Scott

7
00:00:43.950 --> 00:00:50.330
talks about new features in
dotnet four with Jason Olson. Hi,

8
00:00:50.330 --> 00:00:52.730
this is Scott Hanselman, and
this is another episode of

9
00:00:52.730 --> 00:00:55.790
Hansel minutes coming up on
episode 200 here. I'm not

10
00:00:55.790 --> 00:00:57.620
really sure what I'm going
to do for episode 200,

11
00:00:57.620 --> 00:01:00.590
but it'll be cool or
it'll be just another show,

12
00:01:01.040 --> 00:01:04.010
but this in fact is
a show with Jason Olson. My

13
00:01:04.010 --> 00:01:08.060
good buddy from Microsoft DPE.
How's it going, Jason? It's

14
00:01:08.060 --> 00:01:11.240
going very well. How about
yourself, Scott? Oh, you know,

15
00:01:11.240 --> 00:01:13.430
I'm getting there. Can you
do me a favor please?

16
00:01:13.490 --> 00:01:16.670
Every time I try to
explain what DPE is, I

17
00:01:16.670 --> 00:01:18.800
get in trouble. I went
on a show called hurting

18
00:01:18.800 --> 00:01:21.410
code. I explained how I
understood it. And then I

19
00:01:21.410 --> 00:01:24.140
got emails from people saying,
well, it's not really like

20
00:01:24.140 --> 00:01:27.020
that. It's more like this.
So do me a favor.

21
00:01:27.230 --> 00:01:32.480
Put me and you into
context at Microsoft. So I

22
00:01:32.480 --> 00:01:35.900
think evangelism as a role
is pretty interesting. DP of

23
00:01:35.900 --> 00:01:39.880
course stands for developer and
platform evangelism. So it's entirely

24
00:01:39.890 --> 00:01:44.210
an evangelism organization and actually
there's fair. There's a good

25
00:01:44.210 --> 00:01:47.000
amount of work and type
of work in common that

26
00:01:47.000 --> 00:01:50.390
we do with you and
your team. Thinking about technical

27
00:01:50.390 --> 00:01:55.820
evangelism here at corporate. The
biggest disconnect is that here

28
00:01:55.820 --> 00:01:59.150
in corporate, we have technical
evangelists and then in the

29
00:01:59.150 --> 00:02:04.700
field, we may have developer
evangelists, academic evangelists, ISV evangelists,

30
00:02:04.700 --> 00:02:08.030
and all sorts of field
personnel around the world. That'll

31
00:02:08.030 --> 00:02:12.080
go talk to directly to
customers or directly to an

32
00:02:12.080 --> 00:02:16.340
ISV or directly to schools
sharing all the stuff that's

33
00:02:16.340 --> 00:02:20.390
coming out on Microsoft technology,
really from an evangelism standpoint.

34
00:02:20.870 --> 00:02:22.940
Now, one thing that I've
come to appreciate over my

35
00:02:22.940 --> 00:02:26.120
time in DPE that in
the past, I've always pushed

36
00:02:26.120 --> 00:02:28.550
back and said, you know,
DPE is not a marketing

37
00:02:28.550 --> 00:02:31.580
org. It's not marketing. And
the more I've learned about

38
00:02:31.580 --> 00:02:34.190
marketing and marketing's role in
the life cycle of a

39
00:02:34.190 --> 00:02:37.100
product and all that kind
of stuff, my coworkers might

40
00:02:37.100 --> 00:02:41.060
kill me, but DPE is
most definitely very valuable as

41
00:02:41.060 --> 00:02:45.500
a marketing organization. That's what
I always say that like

42
00:02:45.680 --> 00:02:48.350
I like, we're all trying
to sell Microsoft, I guess,

43
00:02:48.350 --> 00:02:51.290
effectively in the sense that
we work and we want

44
00:02:51.290 --> 00:02:54.200
the man to be successful.
I always think of my

45
00:02:54.200 --> 00:02:57.650
team is like an education
team and we're not really

46
00:02:57.950 --> 00:03:03.280
pushing any particular agenda, But
you guys are given, you

47
00:03:03.280 --> 00:03:05.830
know, your bosses want you
to talk about certain things,

48
00:03:05.830 --> 00:03:10.770
right? Yeah. In technical evangelism
here at corporate, the extent

49
00:03:10.800 --> 00:03:12.870
of what they want us
to talk about is really

50
00:03:12.870 --> 00:03:16.050
the technology we're focused on.
So on the team I'm

51
00:03:16.050 --> 00:03:20.040
on, we're focused on visual
studio, 2010 and.net framework four.

52
00:03:20.310 --> 00:03:24.060
So basically anything within that
realm, we're allowed to talk

53
00:03:24.060 --> 00:03:26.790
about even helping the product
team figure out what's the

54
00:03:26.790 --> 00:03:30.600
messaging about this. And what's
valuable about this feature, or

55
00:03:30.600 --> 00:03:34.260
frankly, sometimes we find ourselves
what's not valuable about this.

56
00:03:34.260 --> 00:03:37.650
Where's the disconnect that the
product team doesn't see and

57
00:03:37.650 --> 00:03:42.840
doing that reverse feedback as
well. And what is the

58
00:03:42.840 --> 00:03:45.480
difference between the DPE people
that work in Redmond and

59
00:03:45.480 --> 00:03:48.540
the ones that are wandering
around the world? So the

60
00:03:48.540 --> 00:03:52.530
ones that work in Redmond,
the technical evangelists have very

61
00:03:52.530 --> 00:03:55.890
close ties directly back to
the product team almost to

62
00:03:55.890 --> 00:03:58.710
the extent that we're a
natural extension of the product

63
00:03:58.710 --> 00:04:02.790
team. Like, you know, John
Papa with silver lights and

64
00:04:02.820 --> 00:04:06.660
now managing sensibility framework and
stuff. He's technically not on

65
00:04:06.660 --> 00:04:09.270
those teams, he's in DPE,
but he might as well

66
00:04:09.270 --> 00:04:12.330
be on those teams. So
we have very close ties,

67
00:04:12.330 --> 00:04:15.930
both to the product teams
and as well as the

68
00:04:15.930 --> 00:04:19.560
marketing organization to help push
all our stuff through the

69
00:04:19.560 --> 00:04:22.230
marketing channels and push all
our steps to the people

70
00:04:22.230 --> 00:04:24.210
in the field who were
then going to be the

71
00:04:24.210 --> 00:04:28.350
ones scaling all the effort
to talk to customers directly

72
00:04:28.350 --> 00:04:33.990
in a specific geographic location.
Okay, cool. Okay. That will,

73
00:04:33.990 --> 00:04:36.300
that makes sense. That's pretty
much what I, how I

74
00:04:36.300 --> 00:04:39.030
thought it worked, but somehow
I always explain it much

75
00:04:39.030 --> 00:04:43.080
less eloquently than that, but
enough nonsense about job descriptions

76
00:04:43.080 --> 00:04:46.410
and stuff. Talk to me
about.net for, cause I know

77
00:04:46.410 --> 00:04:47.730
you've been doing a lot
of stuff and done it

78
00:04:47.730 --> 00:04:51.270
for, and you know, we're
coming up on, well, you

79
00:04:51.270 --> 00:04:53.550
know, it's going to come
out soon, right? So what

80
00:04:53.550 --> 00:04:55.830
should we know? There's a
pile of stuff probably more

81
00:04:55.830 --> 00:04:58.080
than we can fit into
one show, but what are

82
00:04:58.080 --> 00:05:00.120
the highlights from the point
of view of a view?

83
00:05:00.870 --> 00:05:03.990
So what's interesting is from
me in our Donna framework

84
00:05:03.990 --> 00:05:06.720
evangelism team, I tend to
cover some of the lower

85
00:05:06.720 --> 00:05:10.440
level library and language stuff.
And then my cohort, my

86
00:05:10.440 --> 00:05:14.610
partner in crime, Jonathan Carter focuses
more on data, access the

87
00:05:14.610 --> 00:05:17.610
web stack and all that
kind of stuff. So it's

88
00:05:17.610 --> 00:05:20.970
amazing when you look at
the entire picture of Donna

89
00:05:20.970 --> 00:05:24.180
framer for we're talking about
a really huge release, you

90
00:05:24.180 --> 00:05:26.910
know, one might argue that
it's too big and Microsoft

91
00:05:26.910 --> 00:05:29.790
needs to learn to modularize
better, but at the end

92
00:05:29.790 --> 00:05:32.550
of the day, it's a
very big release all the

93
00:05:32.550 --> 00:05:36.810
way down the stack. So
I tend to focus on

94
00:05:36.810 --> 00:05:39.900
things like C sharp four
in the enhancements coming in

95
00:05:39.900 --> 00:05:43.410
C sharp for the enhancements
coming in, visual basic some

96
00:05:43.410 --> 00:05:46.860
basic F sharp work, as
well as the CLR itself,

97
00:05:46.860 --> 00:05:49.260
which has a bunch of
changes in it. Not to

98
00:05:49.260 --> 00:05:53.070
even mention the BCL type
improvements with the managing sensibility

99
00:05:53.070 --> 00:05:56.340
framework, parallel extensions to the
dominant framework, all that kind

100
00:05:56.340 --> 00:06:00.110
of stuff. Some of that
are drastically different programming models

101
00:06:00.140 --> 00:06:02.330
than we have access to
today. And on that three,

102
00:06:02.330 --> 00:06:05.500
five S P one, All
right, well then let's start

103
00:06:05.500 --> 00:06:07.420
at the low level stuff
and work our way up.

104
00:06:07.420 --> 00:06:10.270
So this is an all
new CLR and the dotnet

105
00:06:10.270 --> 00:06:12.550
for CLR is side by
side. So you can have

106
00:06:12.550 --> 00:06:15.400
this installed with your existing
sealer and it doesn't, it

107
00:06:15.400 --> 00:06:19.030
doesn't break anything. Absolutely. And
what I find exciting about

108
00:06:19.030 --> 00:06:21.580
what they've done with side
by side in CLR four

109
00:06:22.090 --> 00:06:25.450
is that before with previous,
with CLR too, we were

110
00:06:25.450 --> 00:06:27.490
of course able to have
out of process side by

111
00:06:27.490 --> 00:06:30.100
side, where both could be
on the same machine, but

112
00:06:30.100 --> 00:06:32.920
there were some issues with
auto rolling forward and all

113
00:06:32.920 --> 00:06:36.850
that kind of stuff that
we know about. But with

114
00:06:36.880 --> 00:06:41.470
CLR four, we're also supporting
in-process side by side. So

115
00:06:41.470 --> 00:06:45.070
within the same process, you
can have both the CLR

116
00:06:45.550 --> 00:06:48.190
and CLR two loaded at
the same time. Let's say

117
00:06:48.190 --> 00:06:51.130
if you have a host
application where the host needs

118
00:06:51.130 --> 00:06:54.250
to rev itself, as well
as it wants to rev

119
00:06:54.250 --> 00:06:56.080
itself, let's say the host
wants to be running on

120
00:06:56.080 --> 00:06:58.810
CLR for, but in order
to not break all its

121
00:06:58.810 --> 00:07:01.780
various addins and plugins, it
wants the plugins to run

122
00:07:01.780 --> 00:07:04.990
in CLR to that's PR
that's possible now with this

123
00:07:04.990 --> 00:07:08.740
new in-process side by side
support and CLR for, Because

124
00:07:08.740 --> 00:07:10.810
I remember that this was
a big problem when I

125
00:07:10.810 --> 00:07:13.120
was moving from one, one
to two, Oh, when I

126
00:07:13.120 --> 00:07:16.210
had existing plugins, not just
ones that ran in outlook,

127
00:07:16.210 --> 00:07:20.290
but also ones that ran
in windows Explorer because basically

128
00:07:20.310 --> 00:07:25.780
whatever CLR got their first
one. Exactly. Now you actually,

129
00:07:25.780 --> 00:07:30.430
your comm objects and your
plugins, their choice of CLR

130
00:07:30.430 --> 00:07:33.970
is respected. Yeah, absolutely. And
this is a big deal,

131
00:07:33.970 --> 00:07:37.030
especially when you consider, you
know, how is Microsoft going

132
00:07:37.030 --> 00:07:40.690
to take its own properties
like windows and office and

133
00:07:40.690 --> 00:07:45.160
such and fully embraced.net. And
it just was not possible

134
00:07:45.490 --> 00:07:48.580
without in-process side by side
because of those issues, like

135
00:07:48.580 --> 00:07:51.880
you mentioned, with Explorer and
everything where it's fundamentally its

136
00:07:51.910 --> 00:07:58.930
own process in one process.
So I, I actually put

137
00:07:58.930 --> 00:08:00.220
a thing on my blog
a couple of days ago

138
00:08:00.220 --> 00:08:04.150
about pushing this out via
windows update. And I asked

139
00:08:04.150 --> 00:08:07.330
a bunch of people to
try to basically put in

140
00:08:07.330 --> 00:08:09.910
a little opt in registry
key so that they might

141
00:08:10.000 --> 00:08:13.690
get wind to m.net framework
over windows update. A couple

142
00:08:13.690 --> 00:08:15.190
of things that I noticed
that were cool about done

143
00:08:15.190 --> 00:08:18.990
at four was that it's
really small the client. It

144
00:08:18.990 --> 00:08:21.910
was like 20, 28 megs
or something like that. Yeah.

145
00:08:21.910 --> 00:08:24.040
They've been a lot of
work in that area. Yeah.

146
00:08:24.040 --> 00:08:28.960
It was crazy small and
it, it installed much faster.

147
00:08:29.050 --> 00:08:31.390
It just seemed, I don't
know. I mean, I'm just,

148
00:08:31.390 --> 00:08:33.550
I'm I'm I don't work
on that team, but it

149
00:08:33.550 --> 00:08:36.250
just seemed like it was
lighter weight somehow or, you

150
00:08:36.250 --> 00:08:38.650
know, just generally that the
club is only bringing down

151
00:08:38.650 --> 00:08:41.200
the client, you like, this
means that if your, if

152
00:08:41.200 --> 00:08:43.570
your mom wants to install
like a dotnet Twitter client,

153
00:08:43.570 --> 00:08:46.270
she's not going to go
and get asp.net. So you're

154
00:08:46.270 --> 00:08:50.650
getting the.net framework, you know,
client piece. Right. Which is

155
00:08:50.650 --> 00:08:54.460
all, most people will ever
need on their machine. Exactly,

156
00:08:54.790 --> 00:08:58.050
exactly. Yeah. The other thing
that I think is important

157
00:08:58.050 --> 00:09:00.660
when it comes to installing
the dominant framework for is

158
00:09:00.660 --> 00:09:04.680
because we're not automatically rolling
older applications, let's say I

159
00:09:04.680 --> 00:09:07.860
have dominant framework three, five
installed, and I have an

160
00:09:07.860 --> 00:09:12.090
application that's targeting three five.
If I installed antonym framework

161
00:09:12.120 --> 00:09:17.400
four, we will automatically run
those applications against four we'll

162
00:09:17.400 --> 00:09:19.950
go ahead and run them
against three five. And you

163
00:09:19.950 --> 00:09:22.200
kind of have to opt
in to say automatically roll

164
00:09:22.200 --> 00:09:24.750
me forward. So it helps
with kind of the backwards

165
00:09:24.750 --> 00:09:27.870
compatibility issues that we've faced
in the past with previous

166
00:09:27.870 --> 00:09:30.540
Don and framework released. Okay.
So that means hanging out

167
00:09:30.540 --> 00:09:32.390
with us. So that means
that if I installed it

168
00:09:32.410 --> 00:09:34.910
in a framework, it's not
going to promote my app

169
00:09:34.940 --> 00:09:37.490
without asking, or do I
have to actually opt in

170
00:09:38.750 --> 00:09:42.680
Actually opt in and either
compar, recompile the app specifically

171
00:09:42.680 --> 00:09:45.890
for four or via configuration
say, yes, I want you

172
00:09:45.890 --> 00:09:49.040
to automatically run me in
the context of Donna framework.

173
00:09:51.050 --> 00:09:54.710
Okay. Well, that's good. So
then I could have basically,

174
00:09:54.770 --> 00:09:57.410
you know, I can even
have, I suppose CLR one,

175
00:09:57.410 --> 00:10:00.650
two, three, and four all
on the same machine CLR

176
00:10:00.650 --> 00:10:03.170
rather but done in framework.
And it'll, it'll all just

177
00:10:03.170 --> 00:10:08.060
work. What I like about
that, looking back at previous

178
00:10:08.060 --> 00:10:11.420
jobs I've had, when you
have 30, 40, who knows

179
00:10:11.420 --> 00:10:14.390
how many applications that you're
in charge of, then you

180
00:10:14.390 --> 00:10:18.170
can truly pick and choose
one by one, which ones

181
00:10:18.170 --> 00:10:19.790
you want to take forward
to the new version of

182
00:10:19.790 --> 00:10:25.520
the Hmm. That's cool. Yeah.
Yeah. I think being able

183
00:10:25.520 --> 00:10:29.000
to have all that stuff
in the same IIS instance

184
00:10:29.010 --> 00:10:32.330
could be really important. Cause
I know, I mean like

185
00:10:32.360 --> 00:10:36.110
my last company, we, we
still have one, one applications

186
00:10:36.230 --> 00:10:38.190
out there and a lot
of people do and, and

187
00:10:38.210 --> 00:10:39.620
you know, it's one of
those, if it ain't broke,

188
00:10:39.680 --> 00:10:42.110
don't fix it kind of
a situation. Certainly I don't

189
00:10:42.110 --> 00:10:43.550
want to have to install
a new framework if I've

190
00:10:43.550 --> 00:10:45.710
got an existing app, but
if I'm, you know, maybe

191
00:10:45.710 --> 00:10:48.800
extending that app in an
easy way, but I've also

192
00:10:48.800 --> 00:10:51.350
heard that done at, for,
and I've experienced this with

193
00:10:51.350 --> 00:10:54.110
a couple of my apps
is pretty compatible in the

194
00:10:54.110 --> 00:10:56.750
sense that like, you know,
I know that we've got

195
00:10:56.750 --> 00:10:59.500
dusk blog running on version
four, you know, it's, it's,

196
00:10:59.500 --> 00:11:01.590
it's it's side by side
and it feels like, like

197
00:11:01.630 --> 00:11:05.180
it's dramatically different, but from
a compatibility perspective, it doesn't

198
00:11:05.180 --> 00:11:09.050
seem to be breaking piles
of stuff. But you were

199
00:11:09.050 --> 00:11:11.990
talking about low level, what
kind of low level things

200
00:11:12.290 --> 00:11:13.940
have changed that I might
want to watch out for

201
00:11:16.160 --> 00:11:20.330
Actually not a lot of
things. One that actually may

202
00:11:20.360 --> 00:11:24.350
potentially have an impact if
you're using it heavily is

203
00:11:24.350 --> 00:11:27.620
one that frankly it's a
change that I'm really proud

204
00:11:27.620 --> 00:11:30.680
of that the team has
done that I think has

205
00:11:30.680 --> 00:11:34.550
potential impacts, but we hope
won't have huge impacts in

206
00:11:34.550 --> 00:11:39.050
that the changes in the
CLR for security level. So

207
00:11:39.230 --> 00:11:41.900
essentially the way that I'd
like to say this to

208
00:11:41.900 --> 00:11:47.450
people is code access security
is dead. Hmm. Okay. I'll

209
00:11:47.450 --> 00:11:49.910
kind of let that settle
in where, you know, this

210
00:11:49.910 --> 00:11:54.100
idea of a machine level
policy. That's very, when it

211
00:11:54.100 --> 00:11:57.880
comes to what code can
or can't do is absolutely

212
00:11:57.910 --> 00:12:01.330
gone in dominant framework for
that's been obsoleted. And in

213
00:12:01.330 --> 00:12:04.180
fact, when you installed on
a framework for there, the

214
00:12:04.180 --> 00:12:09.460
machine level policy of code
access decree, your Kaz is

215
00:12:09.670 --> 00:12:14.640
disabled. It's just not Okay.
So now I'm, I begin

216
00:12:14.640 --> 00:12:17.310
to panic now what now
what now talk me down.

217
00:12:18.000 --> 00:12:20.880
Yes, absolutely. So first of
all, the first thing to

218
00:12:20.880 --> 00:12:23.310
talk you down is that
if you need code access

219
00:12:23.310 --> 00:12:26.610
security, there is a configuration
option that you can set

220
00:12:26.610 --> 00:12:29.250
in your app app dot
config to say, yes, I

221
00:12:29.250 --> 00:12:31.920
want you to use the
legacy code access security option.

222
00:12:32.490 --> 00:12:34.650
So that's first one. If
you're making heavy use of

223
00:12:34.650 --> 00:12:38.070
it. Now, the second thing
is by saying there's no

224
00:12:38.070 --> 00:12:41.490
code access security. We don't
mean there's no security period.

225
00:12:41.880 --> 00:12:45.150
What the CLR for what
the full desktop CLR has

226
00:12:45.150 --> 00:12:48.630
done is that it's adopted
the Silverlight model of security,

227
00:12:48.990 --> 00:12:53.850
where we're talking about this
security transport, transparent code, essentially,

228
00:12:54.390 --> 00:12:58.110
where there's the ability of
when you think of attributes

229
00:12:58.110 --> 00:13:02.280
like allow partially trusted callers
and the relationship between untrusted

230
00:13:02.280 --> 00:13:06.840
and trusted code rather than
being merely a verification layer.

231
00:13:06.840 --> 00:13:10.800
That's the full blown security
layer is now as well.

232
00:13:12.150 --> 00:13:15.450
So really the model to
implement security in your application

233
00:13:15.810 --> 00:13:18.150
becomes a heck of a
lot easier than it was.

234
00:13:18.180 --> 00:13:21.180
If I have a host
application that has a set

235
00:13:21.180 --> 00:13:24.600
of Atkins, I, when I
spin up a separate app

236
00:13:24.610 --> 00:13:28.830
domain to host the Atkins,
then I just make my

237
00:13:28.860 --> 00:13:32.700
host API say, these are
the full trusted assemblies that

238
00:13:32.700 --> 00:13:33.990
I'm going to trust and
they're going to run it

239
00:13:33.990 --> 00:13:36.990
full trust. And then if
any of the admins actually

240
00:13:36.990 --> 00:13:41.790
try to reference my what's
called critical code, then that

241
00:13:41.790 --> 00:13:45.720
fails transparent code can not
call into critical code that's

242
00:13:46.110 --> 00:13:48.540
at runtime. If you try
to do that by calling

243
00:13:48.540 --> 00:13:51.270
a method or something in
a critical library that will

244
00:13:51.270 --> 00:13:54.900
throw a runtime exception, that's
a failure. It's not allowed

245
00:13:55.440 --> 00:13:58.410
well in the middle of
transparent code and critical code.

246
00:13:58.800 --> 00:14:02.370
We have what's called safely
critical code, which is, this

247
00:14:02.370 --> 00:14:05.280
is the stuff that you
exposing. I have designed this

248
00:14:05.280 --> 00:14:12.150
specifically to be used and
called from transparent callers. So

249
00:14:12.150 --> 00:14:16.050
this way I can, I
can essentially expose my host

250
00:14:16.050 --> 00:14:18.960
API or a subset of
my host API that I'm

251
00:14:18.960 --> 00:14:23.340
saying my admins are designed
to use these assemblies. So

252
00:14:23.340 --> 00:14:25.980
that way they still get
all the functionality they want.

253
00:14:26.010 --> 00:14:29.910
But if some random addin
tries to call, file dot,

254
00:14:29.910 --> 00:14:33.990
read, or filed, autopen on
some system level or even

255
00:14:33.990 --> 00:14:38.430
on some random file that
will fail because that file

256
00:14:38.430 --> 00:14:42.510
API is considered critical code.
That transparent code isn't allowed

257
00:14:42.510 --> 00:14:46.410
to. I see. So it's,
it's granular, but it's just

258
00:14:46.410 --> 00:14:50.070
not as an intensely granular
as it was before. Right?

259
00:14:50.070 --> 00:14:53.690
Exactly. And the problem with
code access security, wasn't only

260
00:14:53.690 --> 00:14:57.110
the granular aspect of it.
It was the fact that

261
00:14:57.110 --> 00:15:00.590
since you add something completely
external to your application, being

262
00:15:00.590 --> 00:15:04.670
the machine config file, you
could deploy your application. If

263
00:15:04.670 --> 00:15:08.560
it was cows Calves, being
codex, a security, Right? Yeah.

264
00:15:08.770 --> 00:15:12.400
Using code access security, you
deployed your application to two

265
00:15:12.400 --> 00:15:17.950
different environments and the applications
could behave completely differently all

266
00:15:17.950 --> 00:15:20.920
depending on that machine config.
So I could have an

267
00:15:20.920 --> 00:15:25.150
it pro or something that
changes what the machine config

268
00:15:25.160 --> 00:15:27.760
is allowed to do on
a machine, which might break

269
00:15:27.760 --> 00:15:31.000
my application. And so I
would deploy my application there.

270
00:15:31.000 --> 00:15:32.380
It would break and it
would be kind of a

271
00:15:32.380 --> 00:15:36.190
confusing figuring out why it's
broken when it's not broken

272
00:15:36.190 --> 00:15:40.150
on any other machine. So
it became this huge complex

273
00:15:40.150 --> 00:15:43.690
matrix where when you're developing
an app at development time,

274
00:15:44.140 --> 00:15:47.380
if you were using code
access security, you couldn't guarantee

275
00:15:47.620 --> 00:15:50.260
what the security context was
going to be at runtime.

276
00:15:51.820 --> 00:15:53.890
Hey everybody, this is Scott
coming at you from another

277
00:15:53.890 --> 00:15:56.830
place in time. No doubt.
You'll probably bump into testing

278
00:15:56.830 --> 00:15:59.470
tasks now, and then, and
your work and, you know,

279
00:15:59.470 --> 00:16:01.960
writing functional tests is probably
not your favorite thing. It's

280
00:16:01.960 --> 00:16:04.030
kind of difficult. It takes
time and the results can

281
00:16:04.030 --> 00:16:06.790
be dubious. Well, I'll get
ready to start liking tests.

282
00:16:07.030 --> 00:16:10.750
Thanks to Tellerik with the,
the new web testing framework.

283
00:16:10.930 --> 00:16:14.080
Building web automation test is
a breeze. You've got code

284
00:16:14.080 --> 00:16:17.440
automation with advanced asp.net, Ajax
and server light applications. You

285
00:16:17.440 --> 00:16:20.440
can write a single test,
have it executed against multiple

286
00:16:20.440 --> 00:16:23.620
browsers at once. You'd benefit
from a rich API there's

287
00:16:23.620 --> 00:16:27.160
link support integration with visual
studio, unit testing, also end

288
00:16:27.160 --> 00:16:30.370
unit X unit and MB
unit, not to mention the

289
00:16:30.370 --> 00:16:33.610
free rappers for Telerik rad
controls for ESPN and Ajax

290
00:16:33.610 --> 00:16:37.000
and several light, all shipping
with Telerik's new testing tool.

291
00:16:37.630 --> 00:16:40.480
One of the best features,
the webinar testing framework, which

292
00:16:40.480 --> 00:16:43.420
is developed by art of
test is it's absolutely free.

293
00:16:44.320 --> 00:16:47.110
Freddie got hooked on web
by testing framework, start using

294
00:16:47.110 --> 00:16:50.650
it right away, go to
tellerik.com for more info. Thanks

295
00:16:50.650 --> 00:16:53.710
a lot. Alright, so talk
to me about language level

296
00:16:53.710 --> 00:16:56.980
stuff. What's, what's new, what's
better in like C-sharp and

297
00:16:56.980 --> 00:17:01.030
VB. So this is one
where C-sharp and VB, both

298
00:17:01.030 --> 00:17:05.140
of them, the way I
really talk about the improvements

299
00:17:05.140 --> 00:17:07.420
that are coming is this
topic that you hear this

300
00:17:07.420 --> 00:17:10.150
all the time and like
the Ruby world is this

301
00:17:10.150 --> 00:17:14.200
ceremony versus essence. Now it
seems kind of ridiculous at

302
00:17:14.200 --> 00:17:17.170
first to talk about ceremony
versus FN essence for a

303
00:17:17.170 --> 00:17:20.530
statically type language. But I
think it's very true in

304
00:17:20.530 --> 00:17:22.660
the case of, let's say
C-sharp for, if we're going

305
00:17:22.660 --> 00:17:26.440
to dig into specific features
of C sharp for like

306
00:17:26.440 --> 00:17:30.100
the idea of named and
optional parameters is one where

307
00:17:30.100 --> 00:17:32.740
now I can actually, when
I call a method in

308
00:17:32.740 --> 00:17:37.720
my code, I can actually
explicitly say this method, or

309
00:17:37.720 --> 00:17:41.410
excuse me, this parameter name.
So parameter name, colon, and

310
00:17:41.410 --> 00:17:44.590
then the value. And why
I talk about that as

311
00:17:44.590 --> 00:17:48.160
a ceremony versus the essence
issue is the things that

312
00:17:48.160 --> 00:17:51.720
we had to do before
nearly to jump through the

313
00:17:51.720 --> 00:17:55.170
hoops of the compiler in
order to express what we

314
00:17:55.170 --> 00:17:59.070
wanted in code. So the
idea of optional values and

315
00:17:59.070 --> 00:18:03.180
method calls frequently, we would
use method overloading, for example,

316
00:18:03.630 --> 00:18:07.230
where method overloading is a
great language feature, but I

317
00:18:07.230 --> 00:18:10.110
think it's a language feature
that's not meant to express

318
00:18:10.260 --> 00:18:13.650
optional values. It's really meant
to express a method that's

319
00:18:13.650 --> 00:18:17.370
called with different contexts. You
know, in the time that,

320
00:18:17.370 --> 00:18:19.740
you know, if you have,
you know, in some case

321
00:18:19.740 --> 00:18:23.430
of the framework, API APIs,
eight different method, overloads strictly

322
00:18:23.430 --> 00:18:27.060
to express, you know, optional
parameters where one method overload

323
00:18:27.330 --> 00:18:30.870
calls into another method, overload,
passing it in extra value

324
00:18:30.870 --> 00:18:33.900
and so on. I think
it breaks down really quickly.

325
00:18:33.900 --> 00:18:35.550
And it's a lot of
ceremony that you have to

326
00:18:35.550 --> 00:18:39.030
jump through when the presence
of optional parameters and being

327
00:18:39.030 --> 00:18:42.690
able to just say, you
know, in the method declaration

328
00:18:42.690 --> 00:18:46.500
that this value, if it's
not specified defaulted to true,

329
00:18:47.220 --> 00:18:50.880
you know, that is much
more concise with the essence

330
00:18:50.880 --> 00:18:54.030
of the code and what
the developer's actually wanting to

331
00:18:54.030 --> 00:18:58.110
express. So we have named
an optional parameters and the

332
00:18:58.110 --> 00:19:02.010
other big one for C
sharp for that obviously has

333
00:19:02.010 --> 00:19:05.880
a lot of heat in
debate going on about it

334
00:19:05.880 --> 00:19:10.620
is the dynamic keyword. And
to me, the dynamic keyword,

335
00:19:10.620 --> 00:19:13.290
yes, it will, of course
be abused. I mean, we

336
00:19:13.290 --> 00:19:17.280
see other language features abused
as well, but the usefulness

337
00:19:17.310 --> 00:19:20.070
of the dynamic keyword, I
think about it strictly from

338
00:19:20.070 --> 00:19:24.900
an inter-op scenario when you're
interrupting with dynamic code, when

339
00:19:24.900 --> 00:19:29.400
you're interrupting, perhaps with XML,
that's where the dynamic keyword

340
00:19:29.400 --> 00:19:32.610
really comes in handy. Because
frankly, if you're going to,

341
00:19:32.610 --> 00:19:34.680
if you have a scenario
where you're trying to use

342
00:19:34.680 --> 00:19:37.080
it in a bunch of
places, why not just use

343
00:19:37.080 --> 00:19:41.610
a dynamic language. So I
think its real power is

344
00:19:41.610 --> 00:19:47.400
for working like interfacing with
dynamic languages or interfacing, let's

345
00:19:47.400 --> 00:19:52.740
say with comm interfacing with
XML, to me, the dynamic

346
00:19:52.740 --> 00:19:56.490
keyword is all in interop
feature really at the core

347
00:19:56.490 --> 00:19:59.030
of it. But would you
consider it interrupt to talk

348
00:19:59.060 --> 00:20:02.210
C-sharp to like Python or
Ruby? Is that interrupt or

349
00:20:02.210 --> 00:20:04.610
is that just two different
languages talking to each other?

350
00:20:05.300 --> 00:20:08.930
No, I would absolutely consider
that interrupt because we're talking

351
00:20:08.930 --> 00:20:12.710
about a static type system
trying to communicate through a

352
00:20:12.710 --> 00:20:17.060
dynamic type system, which is
kind of a fundamental shift

353
00:20:17.480 --> 00:20:20.270
that you're having to kind
of bridge this rift that

354
00:20:20.270 --> 00:20:23.540
exists between the two. So
I would definitely consider that

355
00:20:23.540 --> 00:20:26.390
an interrupt scenario, just like
I would consider C-sharp to

356
00:20:26.390 --> 00:20:32.360
calm and interrupt scenario. Okay.
It's always explained the dynamic

357
00:20:32.360 --> 00:20:34.730
keyword cause people always, I
was actually presenting a couple

358
00:20:34.730 --> 00:20:36.830
of days ago and someone
said, well, you know, this

359
00:20:36.830 --> 00:20:39.200
is just like VAR. And
I said, well, you know,

360
00:20:39.200 --> 00:20:41.990
VAR is the VAR. Keyword
is your way of saying

361
00:20:42.200 --> 00:20:44.660
kind of I'm too lazy
to tell you what this

362
00:20:44.660 --> 00:20:47.260
is, but I'm pretty sure
you'll figure it out. Actually

363
00:20:47.260 --> 00:20:49.450
I'm a hundred percent sure
you'll figure it out while

364
00:20:49.450 --> 00:20:52.120
the dynamic keyword is the,
I really have absolutely no

365
00:20:52.120 --> 00:20:54.430
idea. And not only can
I not figure it out,

366
00:20:54.430 --> 00:20:56.260
but you probably won't be
able to figure out you

367
00:20:56.260 --> 00:21:01.080
have the compiler until a
runtime. Yeah. Yeah. Really the

368
00:21:01.080 --> 00:21:04.230
dynamic keyword, all it all
I think about it is

369
00:21:04.320 --> 00:21:07.950
essentially runtime dispatch. It's just
runtime called dispatching where you're

370
00:21:07.950 --> 00:21:10.320
saying, you know, I want
you to bind this as

371
00:21:10.320 --> 00:21:13.950
late as possible. Don't figure
out until runtime, what the

372
00:21:13.950 --> 00:21:16.410
heck you need to do
because that's where you'll have

373
00:21:16.410 --> 00:21:20.220
the information that's necessary. What
about VB? What's the love

374
00:21:20.220 --> 00:21:22.050
for VB? Cause it's C
sharp four, but it's VB

375
00:21:22.050 --> 00:21:25.500
10, I guess they're calling
it. Yeah. Visual basic 10.

376
00:21:25.590 --> 00:21:29.640
So VB 10 has actually
several features that have come

377
00:21:29.640 --> 00:21:32.550
forward from previous versions of
C-sharp like you have auto

378
00:21:32.550 --> 00:21:37.710
implemented properties. You have statement
Lambdas, you have multiline Lambdas

379
00:21:37.710 --> 00:21:40.860
stuff that a C sharp
developers seems pretty silly cause

380
00:21:40.860 --> 00:21:44.580
we've had it all along.
But we're real sore points

381
00:21:44.610 --> 00:21:48.180
when writing code with visual
basic nine, because especially as

382
00:21:48.180 --> 00:21:50.970
you're trying to work with
the library, that's perhaps Landa

383
00:21:50.970 --> 00:21:55.860
heavy or very, very heavy
or very, very frequent use

384
00:21:56.460 --> 00:21:58.860
of Lambdas. It became very
painful because there were all

385
00:21:58.860 --> 00:22:01.020
sorts of hacks you'd have
to do where you would

386
00:22:01.020 --> 00:22:05.490
have to implement, implement a
temporary method two in order

387
00:22:05.490 --> 00:22:09.150
or a temporary function. And
then perhaps even return nothing.

388
00:22:09.180 --> 00:22:11.610
If it was just a
statement, which was very, very

389
00:22:11.610 --> 00:22:14.310
ugly. So that stuff is
taken care of and that's

390
00:22:14.310 --> 00:22:17.430
very powerful. And then the
other one is auto implemented

391
00:22:17.430 --> 00:22:19.590
properties is a big one,
which of course we haven't

392
00:22:19.590 --> 00:22:23.130
C-sharp but as a C
sharp developer, why I'm jealous

393
00:22:23.160 --> 00:22:27.540
frankly of visual basic auto
implemented properties is that you

394
00:22:27.540 --> 00:22:30.870
can have your auto prop
and then immediately say, you

395
00:22:30.870 --> 00:22:35.190
know, dim block is property
equals and then the default

396
00:22:35.190 --> 00:22:37.980
value, whereas in C sharp,
like in the constructor or

397
00:22:37.980 --> 00:22:39.840
something else, then you would
have to set the auto

398
00:22:39.840 --> 00:22:43.020
profit, but you can do
it in line with visual

399
00:22:43.020 --> 00:22:47.250
basic. And then one of
the other big ones, which

400
00:22:47.430 --> 00:22:50.160
gets a lot applause when
I'm talking to visual, basic

401
00:22:50.160 --> 00:22:53.760
developers is the removal or
the introduction of implicit line

402
00:22:53.760 --> 00:22:56.940
continuation. So you don't have
to have, for most cases,

403
00:22:56.940 --> 00:22:59.460
you don't have to have
that silly underscore character at

404
00:22:59.460 --> 00:23:02.430
the end of a line
to denote, Hey, this continues

405
00:23:02.430 --> 00:23:05.340
onto the next line, which
is really important when you

406
00:23:05.340 --> 00:23:08.640
have lines, I suppose that
you can have that if

407
00:23:08.640 --> 00:23:11.550
you, if you want to,
which means that old style

408
00:23:11.550 --> 00:23:14.880
code works fine, but you
don't need it anymore. Right?

409
00:23:15.570 --> 00:23:18.300
Right. Yeah. That would certainly
make multiline Lambdas a lot

410
00:23:18.300 --> 00:23:20.730
easier. Now you want to,
do you want a demo

411
00:23:20.730 --> 00:23:24.900
awhile back called Contoso automotive,
which was basically a, you,

412
00:23:24.900 --> 00:23:28.090
you, you always downplay it
Jason, but it's, it's a

413
00:23:28.140 --> 00:23:31.110
kind of, it's a cool
WPF application that it talks

414
00:23:31.110 --> 00:23:34.170
about a theoretical car dealership
and it's got kind of

415
00:23:34.170 --> 00:23:37.080
this generated in memory database
of a couple of hundred

416
00:23:37.080 --> 00:23:41.190
thousand cars and it's got
a plug in model and

417
00:23:41.190 --> 00:23:45.290
it uses a parallel extensions.
It uses PFX and some

418
00:23:45.290 --> 00:23:50.000
of the new stuff that
makes multithreaded and multi-core just

419
00:23:50.000 --> 00:23:51.560
so much easier. And I
use this demo all the

420
00:23:51.560 --> 00:23:53.570
time. I think it's, I
think it's a great demo.

421
00:23:54.170 --> 00:23:58.160
Talk to me about what
we did with parallel extensions

422
00:23:58.160 --> 00:24:00.500
in that and why that,
why I'm, why you know,

423
00:24:00.500 --> 00:24:02.270
why, but why do I
like that demo so much?

424
00:24:03.190 --> 00:24:06.040
Cool. So first of all,
shameless self plug I've gone

425
00:24:06.040 --> 00:24:09.790
ahead and rev Contoso automotive.
Cause there were legal issues

426
00:24:09.790 --> 00:24:12.700
I had to do, like
not using actual real car

427
00:24:12.760 --> 00:24:16.570
dealers and that kind of
stuff. Yeah, exactly. So I

428
00:24:16.570 --> 00:24:19.330
had to change that made
up, you know, use Lauren

429
00:24:19.630 --> 00:24:22.480
Maura MIPS, some to make
up some make-believe car models

430
00:24:22.480 --> 00:24:26.470
and stuff. So, and that's
packaged with our visual studio,

431
00:24:26.470 --> 00:24:30.340
2010 in.net framework for training
kit that our team produces.

432
00:24:30.800 --> 00:24:32.500
I'll make sure to get
you a URL that you

433
00:24:32.500 --> 00:24:36.220
can include in the show
notes to it. What I

434
00:24:36.220 --> 00:24:39.430
love about the parallel extensions
when it comes to using

435
00:24:39.430 --> 00:24:42.910
it as a way to
build a responsive UI like

436
00:24:42.910 --> 00:24:47.260
I did with the simple
app of console automotive, is

437
00:24:47.260 --> 00:24:51.760
that fundamentally in parallel extensions,
the new primitive that you're

438
00:24:51.760 --> 00:24:55.510
dealing with is this task
object where you don't even

439
00:24:55.510 --> 00:24:58.540
have to worry about threads
anymore. You really focus on

440
00:24:58.540 --> 00:25:02.650
tasks, which are very, almost
declarative in a way, not

441
00:25:02.650 --> 00:25:05.230
declarative, as we typically think
it, but declarative in the

442
00:25:05.230 --> 00:25:08.440
sense that you're telling the
computer, you're telling the com

443
00:25:08.830 --> 00:25:11.380
the library, this is what
I want to get done.

444
00:25:11.410 --> 00:25:13.540
I don't care how it
gets done. Just do it.

445
00:25:13.990 --> 00:25:15.790
I don't care if you
do it on another thread.

446
00:25:15.790 --> 00:25:17.230
I don't care if you
do it on the same

447
00:25:17.230 --> 00:25:19.870
thread, you figure that out
for me, but I'm declaring,

448
00:25:19.870 --> 00:25:22.480
this is the task that
needs to be run and

449
00:25:22.480 --> 00:25:26.110
why I use it in
why I use it in

450
00:25:26.110 --> 00:25:31.090
Contoso automotive, as, as opposed
to like background worker or

451
00:25:31.090 --> 00:25:35.620
something else, is that tasks
not only are very powerful

452
00:25:35.620 --> 00:25:39.400
for chaining. So I can
say, and I do say

453
00:25:39.400 --> 00:25:43.030
in Contoso automotive, disabled, the
search buttons. When I actually

454
00:25:43.030 --> 00:25:46.540
execute a search, disable the
search button, then in a

455
00:25:46.540 --> 00:25:51.880
task, run this query to
return the search results. And

456
00:25:51.880 --> 00:25:55.810
then I say, dot continue
with, and then enable search.

457
00:25:56.320 --> 00:26:00.250
So no matter whether that
task fails or what, it'll

458
00:26:00.250 --> 00:26:04.870
automatically continue in order to
enable the re enable the

459
00:26:04.870 --> 00:26:07.960
search. And so I have
this way of almost building

460
00:26:07.960 --> 00:26:11.980
a hierarchy of tasks that
need to be completed or

461
00:26:11.980 --> 00:26:15.130
that I'm going to run.
And then on top of

462
00:26:15.130 --> 00:26:19.060
that, there's this cancellation token
sources. What we call it,

463
00:26:19.450 --> 00:26:22.090
think of this as just
a simple way of a

464
00:26:22.090 --> 00:26:24.370
flag that you can pass
around that says, Hey, when

465
00:26:24.370 --> 00:26:26.530
I signal this, when I
turn on the light, when

466
00:26:26.530 --> 00:26:30.430
it goes off, then cancel
anything that hasn't run yet.

467
00:26:31.390 --> 00:26:35.050
So in the case of
parallel extensions, when I'm doing

468
00:26:35.050 --> 00:26:39.670
the parallel version of the
search for every car, for

469
00:26:39.670 --> 00:26:42.100
every type of car that
it searches against, which is

470
00:26:42.100 --> 00:26:49.200
potentially to six cars, then
it'll actually allow me to

471
00:26:49.890 --> 00:26:53.040
cancel everything to where I
just on the token, I

472
00:26:53.040 --> 00:26:56.970
just say, cancel anything that's
going on. And then the

473
00:26:57.000 --> 00:27:00.270
parallel extensions library will take
care of, Oh, you know,

474
00:27:00.270 --> 00:27:03.120
this, these four queries haven't
run yet. So I'm just

475
00:27:03.120 --> 00:27:04.680
going to throw them out
cause they don't need to

476
00:27:04.680 --> 00:27:07.140
run. And it's a simple
matter where if you look

477
00:27:07.140 --> 00:27:10.920
on the event handler for
the cancel button, it's just

478
00:27:10.950 --> 00:27:13.380
essentially sourced dot canceled. And
I don't have to worry

479
00:27:13.380 --> 00:27:16.560
about anything else. Everything is
automatic. The, all the search

480
00:27:16.560 --> 00:27:19.860
buttons are re enabled. All
the queries are canceled, taken

481
00:27:19.860 --> 00:27:21.930
care of for you by
the library. It's very powerful,

482
00:27:22.460 --> 00:27:24.350
Right? And the way that
it's written is, is, is

483
00:27:24.350 --> 00:27:28.400
very kind of, it's very
fluid. It's very fluent. It's

484
00:27:28.400 --> 00:27:31.700
like, you're, you're saying, you
know, task is a task

485
00:27:31.700 --> 00:27:33.740
fast read, what is it?
What does a task factory

486
00:27:33.740 --> 00:27:37.400
dot task dot starts? I'm
like that Task dot factory

487
00:27:37.400 --> 00:27:40.130
dot start new, and then
you pass it a Lambda.

488
00:27:41.010 --> 00:27:43.970
You say, basically do this.
So you're saying start this

489
00:27:43.970 --> 00:27:46.490
new task. And that happens
in the background. And then

490
00:27:46.490 --> 00:27:48.950
you pass in the cancellation
token and it's kind of

491
00:27:48.950 --> 00:27:52.850
a, it's just this free
object that is really, really

492
00:27:52.850 --> 00:27:54.890
smart about threading so that
you can have your cancel

493
00:27:54.890 --> 00:27:58.400
button, call that without having
to worry about making that

494
00:27:58.400 --> 00:28:00.830
call. And then in the
middle of your loop, you

495
00:28:00.830 --> 00:28:03.950
just check to see if
that's a gone bad or

496
00:28:03.950 --> 00:28:07.130
does it just stop the
threat automatically? Yeah. The version

497
00:28:07.130 --> 00:28:10.730
that I have now will
essentially check to say, Hey,

498
00:28:10.730 --> 00:28:13.310
if I canceled it, I
believe we'll check to say,

499
00:28:13.640 --> 00:28:17.540
if a cancellation is requested,
then go ahead and silently

500
00:28:17.570 --> 00:28:23.480
exit, whatever you're doing now,
what's really cool is there's

501
00:28:23.480 --> 00:28:26.090
going to be some improvements
where they're thinking about the

502
00:28:26.090 --> 00:28:30.590
point where it'll automatically like
that's the sequential version, the

503
00:28:30.590 --> 00:28:33.860
sequential version that does a
for each over the queries.

504
00:28:33.860 --> 00:28:36.860
And does it will do
is cancellation requested, just return.

505
00:28:37.580 --> 00:28:40.670
But the other one, if
you look at it, doesn't

506
00:28:40.730 --> 00:28:43.340
do that. You, I do
have a parallel dot for

507
00:28:43.340 --> 00:28:46.790
each one, which is another
very powerful construct where I

508
00:28:46.790 --> 00:28:49.670
passed in the search or
I've passed in the cancellation

509
00:28:49.670 --> 00:28:53.660
token. And I just run
my queries in that. And

510
00:28:53.660 --> 00:28:57.860
then if the cancellation token
is fired, it'll automatically take

511
00:28:57.860 --> 00:29:00.290
care of, okay, I don't
need to do the other

512
00:29:00.290 --> 00:29:03.500
iterations of the parallel dot
for each and all that

513
00:29:03.500 --> 00:29:07.130
kind of stuff automatically for
you. I've heard them say

514
00:29:07.130 --> 00:29:11.000
that this is concurrency for
the masses is like the

515
00:29:11.000 --> 00:29:15.200
tagline that people have. Yeah.
That's the longterm vision for

516
00:29:15.200 --> 00:29:19.790
parallel. The parallel computing platform
team work is they want

517
00:29:19.790 --> 00:29:22.700
to get where concurrency for
the masses, where you don't

518
00:29:22.700 --> 00:29:25.910
have to have, you know,
your Einstein's are very smart.

519
00:29:25.910 --> 00:29:30.680
People dedicated strictly to concurrency
issues. You know, you want

520
00:29:30.680 --> 00:29:32.660
the people in the trenches
to be able to address

521
00:29:32.660 --> 00:29:37.010
concurrency and parallelism. It's certainly
an improvement in visual studio,

522
00:29:37.010 --> 00:29:40.070
2010. It's not all the
way yet. You still have

523
00:29:40.070 --> 00:29:43.480
to know a lot about
potential dead blocks and performance,

524
00:29:43.480 --> 00:29:46.030
optimizing your code and everything.
Cause you still can hang

525
00:29:46.030 --> 00:29:50.020
yourself. But it's a drastic
step in a really cool

526
00:29:50.020 --> 00:29:53.310
direction that they're going to
continue to take. I think

527
00:29:53.310 --> 00:29:55.980
that when you just said
that you don't have to

528
00:29:55.980 --> 00:29:57.900
be like an Einstein. You,
I don't think it's about

529
00:29:57.930 --> 00:30:00.990
being really, really smart for
me. It's been about it's

530
00:30:00.990 --> 00:30:05.340
about tediousness. There's been so
many times when I've, I've

531
00:30:05.340 --> 00:30:09.090
wanted to add something multithreaded
to an application where even

532
00:30:09.090 --> 00:30:10.860
something like, Oh, I'll just
spin off a thread. It's

533
00:30:10.860 --> 00:30:12.720
just, you know, it's just
not worth the hassle, this

534
00:30:12.720 --> 00:30:16.320
particular project or task or
whatever I'm working wrong. It's

535
00:30:16.320 --> 00:30:19.890
just not worth the, the,
the, the effort, because I'm

536
00:30:19.890 --> 00:30:22.110
always concerned that I'm going
to get the threading wrong.

537
00:30:22.830 --> 00:30:26.220
So I like that that
this is basically encapsulated best

538
00:30:26.220 --> 00:30:30.390
practices for what kind of
those basics. And I thought

539
00:30:30.390 --> 00:30:33.870
it was mostly just basics,
but then Steven TOB, who

540
00:30:33.870 --> 00:30:36.270
works on the team, came
out with this amazing white

541
00:30:36.270 --> 00:30:41.550
paper. That's like 113 pages
or something. Absolutely parallel programming

542
00:30:41.550 --> 00:30:44.610
patterns. Yeah. Parallel programming patterns.
And I was like, Oh

543
00:30:44.610 --> 00:30:47.340
wow, this is so much
deeper than I gave it

544
00:30:47.340 --> 00:30:51.870
credit for. He talks at
the beginning about what he

545
00:30:51.870 --> 00:30:56.700
called. I think it was
embarrassingly SIM embarrassingly parallel, but

546
00:30:56.700 --> 00:31:00.930
then he changed it to
delightfully parallel. These are, yeah,

547
00:31:01.290 --> 00:31:04.560
these are algorithms and problems
that really lend themselves to

548
00:31:04.560 --> 00:31:09.210
parallelism delightfully parallel in the
sense of, there's really no

549
00:31:09.210 --> 00:31:11.340
reason that this can't be
on multiple threads in a

550
00:31:11.340 --> 00:31:14.460
multiple cores. And then as
you move forward in the,

551
00:31:15.600 --> 00:31:17.580
in this little, in this
chapter of this mini book

552
00:31:17.580 --> 00:31:19.740
that he's written, then you
start getting into some really

553
00:31:19.740 --> 00:31:23.130
hardcore, interesting problems that are,
that are much more, much

554
00:31:23.130 --> 00:31:26.280
more complicated. So this is
not just for throw off

555
00:31:26.280 --> 00:31:29.010
something in a background thread,
but you can do some

556
00:31:29.280 --> 00:31:33.390
intense computing with this thing,
Very intense. And it's a

557
00:31:33.390 --> 00:31:37.920
very capable library that frankly,
the Contoso automotive example just

558
00:31:37.920 --> 00:31:39.750
shows, you know, how to
do it simple in the

559
00:31:40.290 --> 00:31:44.190
context of, you know, a
responsive UI. But it's absolutely

560
00:31:44.190 --> 00:31:47.790
so much more than that.
It's not even fun. Wow.

561
00:31:48.480 --> 00:31:52.770
That's crazy. Yeah. So I'm,
I, I hear and forgive

562
00:31:52.770 --> 00:31:55.620
me if I'm telling tales
or anything, but you're, you're

563
00:31:55.620 --> 00:31:58.350
moving into a different role.
You've been in DP while

564
00:31:58.350 --> 00:32:01.590
is that okay to talk
about? Yeah, it is. I've

565
00:32:01.590 --> 00:32:04.320
been in VPE now. Wow.
It's hard to believe. Three

566
00:32:04.320 --> 00:32:06.870
and a half years, I
originally started on windows server

567
00:32:06.870 --> 00:32:11.460
2008 and then migrated over
to visual studio 2010 in

568
00:32:11.460 --> 00:32:15.600
dominant framework for, and have
moved on now onto a

569
00:32:15.600 --> 00:32:19.530
product team, actually shipping code.
So I'm going to be

570
00:32:19.530 --> 00:32:23.700
leaving CPE. And as of
well, by the time this

571
00:32:23.700 --> 00:32:27.960
airs, it'll probably be already
the case, but I'll be

572
00:32:27.960 --> 00:32:31.800
working as a PM in
windows focused on the developer

573
00:32:31.800 --> 00:32:34.890
experience. So you're going to
be responsible. You'd be pink.

574
00:32:35.130 --> 00:32:38.010
You'd be PM-ing. You're gonna
be program manager of a,

575
00:32:38.130 --> 00:32:43.520
of a feature on, on
windows Or multiple features on

576
00:32:43.520 --> 00:32:46.280
windows. We'll wait and see
and see how that goes.

577
00:32:46.520 --> 00:32:50.000
Pretty exciting. I can't believe
that a future version of

578
00:32:50.000 --> 00:32:51.710
windows is going to ship
and I'll be able to

579
00:32:51.710 --> 00:32:54.320
open something up on windows
and be like, see that

580
00:32:55.100 --> 00:33:02.010
I helped that calculator. That
was all me. See that

581
00:33:02.010 --> 00:33:06.620
new note pad, see that
button in notepad, notepad. Jason.

582
00:33:07.960 --> 00:33:11.150
That's my goal in life
is to rock notepad. Alright,

583
00:33:11.150 --> 00:33:14.540
cool. Well, congratulations. That's awesome.
Thanks a bunch. I'm really

584
00:33:14.540 --> 00:33:17.600
looking forward to it. Cool.
Well, thanks for coming on

585
00:33:17.600 --> 00:33:18.760
the show and talking to
me about some of the

586
00:33:18.760 --> 00:33:21.830
low level stuff you sent
me the links and I'll

587
00:33:21.830 --> 00:33:26.780
put them on the show
site for <inaudible> and some

588
00:33:26.780 --> 00:33:29.660
of the parallel extensions. Yeah,
that sounds great. It's been

589
00:33:29.660 --> 00:33:32.510
a pleasure, Scott. This has
been another episode of Hansel

590
00:33:32.510 --> 00:33:34.610
minutes. I'll see you again
next week.

