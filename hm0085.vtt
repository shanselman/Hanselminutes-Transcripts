WEBVTT FILE

1
00:00:12.120 --> 00:00:18.210
From Hansel minutes.com it's Hansel
minutes, weekly discussion with web

2
00:00:18.210 --> 00:00:23.730
developer and technologists. Scott Hanselman
posted by Carl Franklin. This is

3
00:00:23.730 --> 00:00:31.650
Lawrence Ryan announcing show number 85.
Recorded live Monday, October 15th, 2007. Support

4
00:00:31.650 --> 00:00:36.120
for Hanselman is provided by
Tellerik rad controls. The most

5
00:00:36.120 --> 00:00:39.720
comprehensive suite of components for
windows forums and asp.net web

6
00:00:39.720 --> 00:00:50.790
applications. online@wwwdottlerik.com. Support is also
provided by.net developers journal the

7
00:00:50.790 --> 00:00:57.480
world's leading.net developer magazine online
at www dot <inaudible> dot

8
00:00:57.480 --> 00:01:04.740
com. In this episode, Scott
talks with Matt Davis architect@earthclassmail.com.

9
00:01:08.760 --> 00:01:10.710
Hi, this is Scott Hanselman
and this is another episode

10
00:01:10.710 --> 00:01:12.840
of Hansel minutes. And today
I'm sitting here with Matt

11
00:01:12.840 --> 00:01:18.930
Davis, the architect@earthclassmail.com. Now earth
class mail has, was talked

12
00:01:18.930 --> 00:01:20.370
about a little bit here
on Hansel minutes. When we

13
00:01:20.370 --> 00:01:22.680
talked to Tim Ferriss, the
author of a four hour

14
00:01:22.680 --> 00:01:26.670
workweek and he uses it
to dramatically lower the amount

15
00:01:26.670 --> 00:01:29.160
of information that he has
to absorb the amount of

16
00:01:29.160 --> 00:01:31.530
mail he asked to touch.
So, Matt, what is earth

17
00:01:31.530 --> 00:01:34.920
class mail? Basically it works
like kind of like mailboxes,

18
00:01:34.920 --> 00:01:37.920
et cetera, for the 21st
century. You, you give us

19
00:01:37.920 --> 00:01:40.380
a, when you, when you
sign up with us, we'll

20
00:01:40.380 --> 00:01:44.700
give you a virtual PO
box and you change your

21
00:01:44.700 --> 00:01:47.610
address to us. So we
have a number of different

22
00:01:47.610 --> 00:01:50.310
processing facilities around the country
and different addresses at which

23
00:01:50.310 --> 00:01:53.280
you can receive mail. You
change your address to one

24
00:01:53.280 --> 00:01:56.220
of, to one of our
addresses, and then any mail

25
00:01:56.400 --> 00:01:59.460
that we receive, we scan
the envelopes and make them

26
00:01:59.820 --> 00:02:01.710
available to you online. So
you'd log in just like

27
00:02:01.710 --> 00:02:03.480
you would to your Yahoo
mail or your Gmail account.

28
00:02:03.480 --> 00:02:06.300
And you see all the
external envelope images of any

29
00:02:06.300 --> 00:02:09.600
mail that you've received. At
that point. You can do

30
00:02:09.600 --> 00:02:11.370
one of a few things.
You can either ask us

31
00:02:11.370 --> 00:02:14.370
to open it and scan
it. And we'll in our

32
00:02:14.490 --> 00:02:17.700
secure processing facility. We'll open
that up and, and scan

33
00:02:17.700 --> 00:02:19.200
the contents and make them
available to you as a

34
00:02:19.200 --> 00:02:21.900
PDF. Or you can say,
ah, this is junk mail.

35
00:02:21.900 --> 00:02:23.790
I don't want it just
shred it and recycle it,

36
00:02:23.790 --> 00:02:27.450
whichever you choose. The other
thing you can do is

37
00:02:28.320 --> 00:02:30.090
have it shipped to you.
You can, how you can

38
00:02:30.090 --> 00:02:32.040
have it shipped to you
without us opening it, or

39
00:02:32.040 --> 00:02:33.690
we can open and scan
it and ship you the

40
00:02:33.690 --> 00:02:38.640
contents either way. So it
makes your mail available to

41
00:02:38.640 --> 00:02:40.530
you basically anywhere you are
in the world. So if

42
00:02:40.530 --> 00:02:43.140
I let's say I get
10, 10 snail mails that

43
00:02:43.140 --> 00:02:45.480
day, I can go and
say, shred, shred, shred. And

44
00:02:45.480 --> 00:02:47.430
then these seven, mailed them
to me and go back

45
00:02:47.430 --> 00:02:49.170
to them up into a
big envelope and mail me

46
00:02:49.170 --> 00:02:51.870
that whole envelope. That's correct.
And you scan front and

47
00:02:51.870 --> 00:02:54.360
back. So we see the
whole thing. Yep. Wow. So

48
00:02:54.360 --> 00:02:56.280
you can see whatever notes
are written on the envelope

49
00:02:56.280 --> 00:02:58.680
or, or whatever. Yep. Everything
that's in the envelope. I

50
00:02:58.680 --> 00:03:01.720
mean, they, they, they basically
have no, no exceptions policy

51
00:03:01.720 --> 00:03:03.010
on there. So, I mean,
if you get it, if

52
00:03:03.010 --> 00:03:04.270
you get a piece of
junk mail, if you get

53
00:03:04.270 --> 00:03:06.760
your publisher's clearing house thing
and you want to see

54
00:03:06.760 --> 00:03:09.160
every little scrap of paper
that's in there, we're going

55
00:03:09.160 --> 00:03:11.550
to scan it all Really
even like flyers and kind

56
00:03:11.550 --> 00:03:14.430
of like Domino's pizza, you
know, advertisements and coupons. Yep.

57
00:03:14.700 --> 00:03:16.460
It just makes it simpler.
If you just say we

58
00:03:16.470 --> 00:03:18.720
just scan it, I would
suspect that you probably shred

59
00:03:18.720 --> 00:03:20.160
a heck of a lot
of it. Yeah, we do.

60
00:03:20.160 --> 00:03:23.310
There is a monster shredding
pile over there, Thrilling. And

61
00:03:23.310 --> 00:03:24.990
I had this image in
my mind of just like

62
00:03:24.990 --> 00:03:28.790
robots, like, you know, Honda
or Sony robots doing all

63
00:03:28.810 --> 00:03:30.810
this work. I, is it
that? Or is it people

64
00:03:31.410 --> 00:03:33.930
Right now? It's people, you
know, we we've just recently

65
00:03:33.930 --> 00:03:36.750
gotten a nice funding block
that we're, we're just starting

66
00:03:36.750 --> 00:03:39.030
to dip our toe into
the waters of automation. And

67
00:03:39.690 --> 00:03:41.760
so we've got some really
interesting equipment on order that

68
00:03:42.150 --> 00:03:44.280
that's gonna help us get
started with that. And we've

69
00:03:44.280 --> 00:03:45.960
got, obviously, if you, if
you look at the website,

70
00:03:45.960 --> 00:03:48.180
you'll see things about mega
sorters and we've got some

71
00:03:48.180 --> 00:03:52.320
prototype robotics designs and things
for, for doing mass, like

72
00:03:52.350 --> 00:03:56.130
really mass quantity storage of
mail. Wow. So at some

73
00:03:56.130 --> 00:03:58.620
point it'll probably be faster
for the post office just

74
00:03:58.620 --> 00:04:01.320
to hand you the mail
than to deliver it through

75
00:04:01.320 --> 00:04:03.690
the post office. You know,
that would be a, that

76
00:04:03.690 --> 00:04:07.560
would be a wonderful day.
Pretty cool. So this sounds

77
00:04:07.560 --> 00:04:10.380
like a phenomenal, huge amount
of data. I mean, along

78
00:04:10.380 --> 00:04:12.180
with little tiny bits of
data, in the sense of,

79
00:04:12.480 --> 00:04:15.690
I'm just envisioning there's me
and I'm some, some good

80
00:04:15.690 --> 00:04:18.180
or some identity in a
database somewhere, and then there's

81
00:04:18.690 --> 00:04:21.510
unique numbers identify all of
my different pieces of mail

82
00:04:21.510 --> 00:04:24.000
and these are all very
small amounts of information. And

83
00:04:24.000 --> 00:04:27.780
then there's huge PDFs and
images of my, of my

84
00:04:27.780 --> 00:04:30.630
mail. Yep. So it's just
all these little bits of

85
00:04:30.630 --> 00:04:33.420
information that point to all
this huge amounts of information

86
00:04:33.960 --> 00:04:36.840
you're using SQL server, are
you using my SQL or

87
00:04:36.840 --> 00:04:39.630
what what's, what's your guys's
technology? So the system, as

88
00:04:39.630 --> 00:04:43.020
it exists as of this
recording is, is running on

89
00:04:43.020 --> 00:04:46.020
a lamp stack. So Tell
our listeners what lamp is.

90
00:04:46.020 --> 00:04:49.320
Okay. One knows that Linux
Apache, my, my SQL and

91
00:04:49.320 --> 00:04:52.470
PHP. Okay. So yeah, the
system, as it, as it

92
00:04:52.470 --> 00:04:56.160
stands today was, was built
by a Russian contracting firm.

93
00:04:56.640 --> 00:05:00.810
And so it's, I don't
want to make any comments

94
00:05:00.810 --> 00:05:04.080
about quality, but let's say
it, you know, it was

95
00:05:04.140 --> 00:05:06.900
the original, the original system
was, was built quickly and,

96
00:05:07.380 --> 00:05:11.070
and yeah. Built lamp stack.
Yeah. Based on PHP. Yeah.

97
00:05:11.220 --> 00:05:13.230
And, you know, it's taken,
it's taken quite a while

98
00:05:13.230 --> 00:05:16.260
to get that stable, but
it it's quite stable as

99
00:05:16.260 --> 00:05:18.390
it is, but it doesn't
give us a great platform

100
00:05:18.390 --> 00:05:22.590
for growth into the future.
So we are just putting

101
00:05:22.590 --> 00:05:25.710
the finishing touches on our.net
port of the system. And

102
00:05:25.710 --> 00:05:27.600
actually it's not really even
a port, it's a rewrite,

103
00:05:27.630 --> 00:05:30.150
it's a complete rewrite with
not really a lot of

104
00:05:31.230 --> 00:05:33.720
thought to trying to preserve
any of the architecture that

105
00:05:33.720 --> 00:05:35.730
was there. Basically the UI
looks about the same and

106
00:05:35.730 --> 00:05:38.730
that's it? No, it was
the original lamp stack, pretty

107
00:05:38.730 --> 00:05:42.270
straightforward. I mean, web browser
hits Apache web server, Apache

108
00:05:42.270 --> 00:05:45.060
web server writes directly to
probably the file system and,

109
00:05:45.060 --> 00:05:48.030
or my SQL database. Yep.
That's correct. And as you

110
00:05:48.030 --> 00:05:51.450
can imagine that presents a
number of scalability problems. Let's

111
00:05:51.450 --> 00:05:54.120
talk about that. Architecture are
the, the issues primarily just

112
00:05:54.120 --> 00:05:56.820
that it's a straight three
tier architecture, or it looks

113
00:05:57.060 --> 00:05:58.970
more like a tutor RQ.
Yeah. It really is. That's

114
00:05:58.970 --> 00:06:00.530
the, that's one of the,
you don't have an intermediate

115
00:06:00.530 --> 00:06:04.600
in any way That architecture
is a it's it's straight.

116
00:06:04.910 --> 00:06:07.540
The funny thing is that
they did everything in PHP,

117
00:06:07.600 --> 00:06:10.480
like their, you know, their
little backend Daymond processes and

118
00:06:10.480 --> 00:06:12.220
things. I mean, there's actually
Cron jobs that are going

119
00:06:12.220 --> 00:06:14.980
and running PHP scripts that,
you know, on the backend,

120
00:06:15.010 --> 00:06:17.830
they did everything Well, you
know, when, when all you

121
00:06:17.830 --> 00:06:19.990
have is a hammer, everything
looks like a nail that's

122
00:06:19.990 --> 00:06:22.870
right. So it's my SQL
holding up under the, under

123
00:06:22.870 --> 00:06:24.430
the strain or is that
an issue at all? Actually,

124
00:06:24.880 --> 00:06:27.040
Well, stuff hasn't been, we
haven't had any trouble at

125
00:06:27.040 --> 00:06:29.530
all with the, my SQL
stuff. The, the real problems

126
00:06:29.530 --> 00:06:33.790
that we're having are just,
you know, memory and mostly,

127
00:06:33.790 --> 00:06:36.010
you know, implementation details. You
know, I have no doubt

128
00:06:36.010 --> 00:06:38.110
that we could have built,
we could have rebuilt the

129
00:06:38.110 --> 00:06:39.910
system on lamp. You know,
I, I don't want to

130
00:06:39.910 --> 00:06:41.920
get a bunch of flaming
emails from, from the lamp

131
00:06:41.920 --> 00:06:45.040
love. There's no doubt that
we could have rebuilt the

132
00:06:45.040 --> 00:06:48.150
system on lamp and then
been totally fine. But the,

133
00:06:48.150 --> 00:06:51.940
the Danette platform gave us
a lot of really interesting

134
00:06:52.450 --> 00:06:54.580
new bits that we didn't
have to build. Was that

135
00:06:54.580 --> 00:06:56.230
a hard sell? I mean,
I assume that there's some

136
00:06:56.230 --> 00:06:58.770
boss somewhere above you who
has to make those kinds

137
00:06:58.770 --> 00:07:01.150
of decisions. Honestly, I don't
think it was a hard

138
00:07:01.150 --> 00:07:04.450
sell. I actually wasn't even
involved in that decision. I

139
00:07:04.450 --> 00:07:06.670
was, I was hired on
after they decided they wanted

140
00:07:06.670 --> 00:07:08.860
to do, they wanted the
port, the new system to.net.

141
00:07:08.860 --> 00:07:12.010
So they were looking for
a Danette architect that was

142
00:07:12.010 --> 00:07:15.310
used to building fairly large
systems. So I applied and

143
00:07:15.340 --> 00:07:17.380
got the job. So you're
doing this on dotnet two

144
00:07:17.380 --> 00:07:20.920
Oh and visual studio, 2005,
or Actually we, we decided

145
00:07:20.920 --> 00:07:23.140
to go ahead and, and
bite the bullet. We're gonna,

146
00:07:23.200 --> 00:07:25.810
we're building on orcas. So
Really, so you're building a

147
00:07:25.960 --> 00:07:29.860
visual studio 2008. Now, does
that mean just the aid?

148
00:07:29.900 --> 00:07:33.190
Are you using.net 335? We're
using.net three Oh and three

149
00:07:33.190 --> 00:07:37.090
five there. I think the
number of the number of,

150
00:07:38.110 --> 00:07:41.290
of like standard SQL statements
that exist in this, in

151
00:07:41.290 --> 00:07:43.390
this piece of software is
probably could be counted on

152
00:07:43.390 --> 00:07:45.160
one hand. The entire thing
is powered by link to

153
00:07:45.160 --> 00:07:47.710
SQL I'll call the data
tier is powered by link

154
00:07:47.710 --> 00:07:50.860
to SQL. We're using WCF
to communicate between the tiers.

155
00:07:51.610 --> 00:07:54.580
All the operations software is
written in a wind forms

156
00:07:54.580 --> 00:07:59.380
and WPF Really WPF. Are
you doing click ones? Actually,

157
00:07:59.380 --> 00:08:01.780
we, unfortunately we have some
real problems with click wants

158
00:08:01.780 --> 00:08:03.550
because we're doing a lot.
We have to do a

159
00:08:03.550 --> 00:08:05.980
little bit of native native
code interrupt to talk to

160
00:08:05.980 --> 00:08:09.430
scanners and things. So a
click wants doesn't play, you

161
00:08:09.430 --> 00:08:12.310
know, you can make it
work, but the way our,

162
00:08:12.580 --> 00:08:14.320
the other thing, the other
problem with quick click once

163
00:08:14.320 --> 00:08:19.540
that we had is the,
you can't deploy multiple. You

164
00:08:19.570 --> 00:08:22.060
can't deploy to a machine,
you deploy to a user.

165
00:08:22.390 --> 00:08:25.240
So operator workstations are kiosks.
So, you know, we may

166
00:08:25.240 --> 00:08:27.400
have a number of different
operators sitting at a given

167
00:08:27.400 --> 00:08:29.020
station in a given day.
And so each one of

168
00:08:29.020 --> 00:08:31.930
them has their own active
directory login and, and which

169
00:08:31.930 --> 00:08:34.630
means they'd have multiple copies
of the software. And, you

170
00:08:34.630 --> 00:08:36.340
know, given that we have
some, we have some queuing

171
00:08:36.340 --> 00:08:38.410
software and stuff that's running
in the background, as well

172
00:08:38.410 --> 00:08:40.660
as, as a windows service.
It just, it didn't play

173
00:08:40.660 --> 00:08:42.400
too well with click one.
So as it stands today,

174
00:08:42.460 --> 00:08:45.220
unfortunately, So there's a lot
lot going on here. I'm

175
00:08:45.220 --> 00:08:46.720
trying to think of what
we should talk about first.

176
00:08:46.720 --> 00:08:48.070
So let's start at the
back end and work our

177
00:08:48.070 --> 00:08:50.170
way up to the, up
to the glass, up to

178
00:08:50.170 --> 00:08:53.020
the monitor. Okay. So linked
to SQL. So you really

179
00:08:53.020 --> 00:08:56.460
kind of jumped, jumped in
both feet and was that

180
00:08:56.460 --> 00:08:58.380
a hard sell? I mean,
I'm sh cause sometimes there's

181
00:08:59.850 --> 00:09:02.490
sometimes there's shops that are
very database focused and they

182
00:09:02.490 --> 00:09:04.500
really think that Sprockets are
where it's at. Right. And

183
00:09:04.500 --> 00:09:06.480
the logic is in the
South Bronx and, you know,

184
00:09:06.480 --> 00:09:09.210
link to SQL is really
a powerful technology, but I

185
00:09:09.210 --> 00:09:13.040
wouldn't say it's Brock friendly.
Yeah. That I had actually,

186
00:09:13.050 --> 00:09:15.140
I would I'm I might
almost disagree that it's not

187
00:09:15.530 --> 00:09:18.530
Spock friendly that, you know,
you can, you can make

188
00:09:18.530 --> 00:09:20.750
it work with Sprocket, but
obviously the, the real power

189
00:09:20.750 --> 00:09:22.820
and sexiness of linked to
SQL is, is being able

190
00:09:22.820 --> 00:09:26.450
to do everything right there
in the code. You know,

191
00:09:26.450 --> 00:09:28.400
I, I thought it might
be a hard sell. Initially.

192
00:09:28.700 --> 00:09:32.990
My, my boss, the VP
of engineering here is he's,

193
00:09:32.990 --> 00:09:34.850
he's an old, you know,
he's an old school database

194
00:09:34.850 --> 00:09:36.890
head. And so I was
figuring that I was going

195
00:09:36.890 --> 00:09:39.740
to get some pushback on
that, but really, you know,

196
00:09:40.370 --> 00:09:43.100
he, he just said do
whatever he thinks. Right. And

197
00:09:43.100 --> 00:09:45.620
so that's cool initially, you
know, I was a little

198
00:09:45.620 --> 00:09:47.240
nervous about it and, and
I had it all. I

199
00:09:47.240 --> 00:09:49.160
had all the link to
SQL stuff, locked away in

200
00:09:49.160 --> 00:09:50.810
a, you know, in a
class that, you know, I

201
00:09:50.810 --> 00:09:52.700
didn't let anything leak out
of that class. So if,

202
00:09:52.880 --> 00:09:55.040
if, if link to SQL
just completely fell down on

203
00:09:55.040 --> 00:09:57.260
me, that I could go
back in and fix it,

204
00:09:57.260 --> 00:10:00.620
but it's been working fantastic.
I mean, we, we found

205
00:10:00.620 --> 00:10:01.970
a couple of bucks here
and there and we had

206
00:10:01.970 --> 00:10:03.830
some pain going from beta
one to beta two. They

207
00:10:03.830 --> 00:10:06.080
changed the Nelson antics on
us and ended a few

208
00:10:06.080 --> 00:10:10.130
other things. But in general,
it's, it's worked out fantastic.

209
00:10:10.490 --> 00:10:12.560
Okay. So from, let's talk
about it from a design

210
00:10:12.560 --> 00:10:15.320
perspective. So you've got a
bunch of leaked, SQL statements.

211
00:10:15.980 --> 00:10:17.840
You said that they're working
okay with sprog. So there

212
00:10:17.840 --> 00:10:21.200
are some Sprockets that you
call Actually, not other than,

213
00:10:21.230 --> 00:10:22.940
other than, I mean, we've,
we've linked in a couple

214
00:10:22.940 --> 00:10:25.010
of SQL server functions so
that we can use them

215
00:10:25.010 --> 00:10:26.900
directly from the link to
SQL stuff. But no, actually

216
00:10:26.900 --> 00:10:29.480
we have, we have a
zero stored procedures. We have

217
00:10:29.480 --> 00:10:32.030
like two triggers. I mean,
this is pretty much a

218
00:10:32.060 --> 00:10:35.240
code centric application, which makes
the deployment update. So you

219
00:10:35.240 --> 00:10:37.190
were saying just a second
ago that I need to

220
00:10:37.190 --> 00:10:40.850
be educated about this. So
it's friendly. You said it's

221
00:10:41.240 --> 00:10:42.920
linked to sequel is friendly
to some, but you said

222
00:10:42.920 --> 00:10:45.020
also to, you had some
SQL server functions that you'd

223
00:10:45.020 --> 00:10:47.960
LinkedIn, how do you do
that? Basically? Like you have

224
00:10:47.960 --> 00:10:49.670
to hack them right now.
It's not a very good

225
00:10:49.670 --> 00:10:52.310
story. You have to actually
hack the DBML files yourself.

226
00:10:52.310 --> 00:10:55.040
So you, the, the, our
designer doesn't allow you to

227
00:10:55.040 --> 00:10:57.620
drag in system functions, or
at least I haven't figured

228
00:10:57.620 --> 00:11:00.240
out how to get it
to work. You know, there,

229
00:11:00.240 --> 00:11:02.330
there might be some trick,
but I'm not, I'm not

230
00:11:02.330 --> 00:11:04.190
a big user of the
server Explorer. So I don't

231
00:11:04.190 --> 00:11:07.190
know all the different modes
that are there, but yeah,

232
00:11:07.190 --> 00:11:10.760
in general, you, as far
as LinkedIn SQL is concerned,

233
00:11:10.760 --> 00:11:12.890
a system function or a
system Sprocket looks the same

234
00:11:12.890 --> 00:11:15.620
as, as one of yours,
you just, it's just a

235
00:11:15.620 --> 00:11:17.420
matter of how you address
it in the, in the

236
00:11:17.420 --> 00:11:20.210
DBML. So normally, like if
you have, if you have

237
00:11:20.210 --> 00:11:22.940
user defined functions and things
like, and user defined Sprockets,

238
00:11:22.950 --> 00:11:24.650
you'd just drag those in
and out of server Explorer

239
00:11:24.650 --> 00:11:27.950
onto the, our designer surface.
And they, they just magically

240
00:11:27.950 --> 00:11:30.350
appear as methods on your
data context, and you can

241
00:11:30.350 --> 00:11:32.480
call them from anywhere you're
using that link to SQL

242
00:11:32.480 --> 00:11:34.190
data. I'm going to have
to educate myself about that.

243
00:11:34.850 --> 00:11:36.470
Okay. So you said you
had this stuff locked away

244
00:11:36.470 --> 00:11:37.790
in a class. So you've
got a bunch of stuff

245
00:11:37.790 --> 00:11:40.490
on a class and it's
using link to talk to

246
00:11:40.490 --> 00:11:43.280
the database. That's kind of
the right hand. What's going

247
00:11:43.280 --> 00:11:45.410
out the left hand. What
kind of objects are you?

248
00:11:45.430 --> 00:11:47.360
Are you returning out of
there? So this is one

249
00:11:47.360 --> 00:11:49.630
of the other things that
was really sexy about linked

250
00:11:49.630 --> 00:11:53.200
to seagull, the interrupt story
between LinkedIn SQL and w

251
00:11:53.230 --> 00:11:55.690
so we're using WCF. The
left hand is WCL. It

252
00:11:55.690 --> 00:11:59.440
used to be called Indigo.
Yeah. And I loved Indigo.

253
00:11:59.470 --> 00:12:02.230
I've still, I still, I
still die inside a little

254
00:12:02.230 --> 00:12:04.180
bit when I call it
WCF, it's kind of sad,

255
00:12:04.210 --> 00:12:06.180
but so I was glad
they left silver light. Well,

256
00:12:06.180 --> 00:12:10.230
at least link isn't called
WTF or something. Yeah. Link

257
00:12:10.230 --> 00:12:12.390
is actually kind of a
sexy It's the key works.

258
00:12:12.420 --> 00:12:14.400
Yes, it is the cue.
You're right. It's all about

259
00:12:14.400 --> 00:12:18.210
the queue. So anyway, yes,
the left hand side is,

260
00:12:18.510 --> 00:12:23.370
is WCF. And so the,
the interrupt story between LinkedIn

261
00:12:23.370 --> 00:12:27.720
SQL and WCF is a
little scary because I I'm

262
00:12:27.720 --> 00:12:29.670
personally, not one. I don't
like to let my, I

263
00:12:29.670 --> 00:12:31.560
don't let, I don't like
to let my message contracts

264
00:12:31.560 --> 00:12:34.440
and my data contracts look
too much like my database,

265
00:12:34.710 --> 00:12:36.270
I, you know, I like
them to look like the

266
00:12:36.270 --> 00:12:40.170
logical, you know, more, more
logical. So you'd like to

267
00:12:40.170 --> 00:12:42.780
separate your data, transfer objects
in your business objects. Yes.

268
00:12:42.900 --> 00:12:45.180
But with a DBML file,
you point your database at

269
00:12:45.180 --> 00:12:48.390
it, and then kind of
public class food shows up.

270
00:12:48.420 --> 00:12:50.310
If you've got a food
table, unless you decide to

271
00:12:50.310 --> 00:12:53.400
hack that up and then
you can kind of get

272
00:12:53.400 --> 00:12:56.400
to where I was going.
Do you let those objects

273
00:12:56.400 --> 00:12:58.650
out? Yeah. Or do you
make other ones that look

274
00:12:58.650 --> 00:13:00.780
like them? I, I screwed
around for about two weeks

275
00:13:00.780 --> 00:13:03.150
trying to figure out a
decent way to let those

276
00:13:03.150 --> 00:13:06.330
objects out or to decorate
those objects in such a

277
00:13:06.330 --> 00:13:08.400
way that, that I could
control what they looked like.

278
00:13:08.610 --> 00:13:10.200
And actually that's cool What
they look like on the

279
00:13:10.200 --> 00:13:13.290
wire or from the CLR
perspective. Yeah. Well, both, but

280
00:13:13.290 --> 00:13:15.480
more, more what they look
like on the wire. Okay.

281
00:13:15.660 --> 00:13:19.320
So you're talking about putting
data contract and basically WCF

282
00:13:19.350 --> 00:13:23.520
attributes decorating them on the
generators, Correct. Or, or trying

283
00:13:23.520 --> 00:13:24.870
to do it on the,
you know, in a partial

284
00:13:24.870 --> 00:13:26.400
class on the side, or
trying to do it on

285
00:13:26.400 --> 00:13:28.350
a base class. I mean,
I messed around with it

286
00:13:28.350 --> 00:13:29.700
for quite a while, trying
to come up with a

287
00:13:29.700 --> 00:13:32.640
combination that worked. And actually
they changed the story between

288
00:13:32.640 --> 00:13:34.680
beta one and beta two
beta one. You could, you

289
00:13:34.680 --> 00:13:37.200
could apply in the or
designer. You could actually apply

290
00:13:37.200 --> 00:13:40.160
any attributes you wanted to
any of that stuff. They,

291
00:13:40.160 --> 00:13:42.180
they backed off on that.
And now basically there's one

292
00:13:42.180 --> 00:13:44.880
bit that you, there's no
custom attributes support in the,

293
00:13:44.880 --> 00:13:46.980
or designer. There's basically a
bit you can flip on

294
00:13:46.980 --> 00:13:50.220
any class that says serialized
or not. And if, if

295
00:13:50.220 --> 00:13:52.950
you Mark it serialized, it,
it, it adds the data

296
00:13:52.950 --> 00:13:55.710
contract and data member attributes
to everything it's it's all

297
00:13:55.710 --> 00:13:57.960
or nothing. So the serialized
bit that you're talking about

298
00:13:57.960 --> 00:14:01.590
is almost like a make
this WCF friendly or not,

299
00:14:01.920 --> 00:14:04.830
but not the granularity that
you wanted. Right. So what

300
00:14:04.830 --> 00:14:07.050
we ended up doing actually
is building some, just really

301
00:14:07.050 --> 00:14:11.460
simple copy methods that, that
will copy from a given

302
00:14:11.460 --> 00:14:13.260
link type, even do a
deep copy of a given

303
00:14:13.260 --> 00:14:16.530
link type into, into a
given WCF contract type. So

304
00:14:16.530 --> 00:14:19.290
we actually have, you know,
completely separate WCF contract types

305
00:14:19.290 --> 00:14:22.170
defined. And then there are
places where, and the really

306
00:14:22.170 --> 00:14:24.030
cool thing about linked to
SQL was that you can

307
00:14:24.030 --> 00:14:26.940
actually plug that in, in
your select statement. So in

308
00:14:26.940 --> 00:14:30.030
the, in the select, in
the select call on the

309
00:14:30.030 --> 00:14:33.690
link, on the link query,
we actually call that copy

310
00:14:33.690 --> 00:14:35.850
method. So instead of like
getting back a bunch of

311
00:14:35.850 --> 00:14:38.280
objects and then for reaching
over them and copying, making

312
00:14:38.280 --> 00:14:40.650
copies of the WCF objects,
it actually comes straight out

313
00:14:40.650 --> 00:14:43.450
of formal marshaling. Yeah. It
actually comes right out. We,

314
00:14:43.450 --> 00:14:45.870
we squirt the, we squirt
the WCF bits right out

315
00:14:45.870 --> 00:14:47.580
the back of link. So
then what's the point of

316
00:14:47.580 --> 00:14:51.170
this, the link types at
all. So the link types,

317
00:14:51.170 --> 00:14:54.080
still the link types still
have to abstract. I mean,

318
00:14:54.110 --> 00:14:56.290
ultimately at some level you
have to have something that

319
00:14:56.300 --> 00:14:59.900
looks like what's in the
DB. So with, with LinkedIn

320
00:14:59.900 --> 00:15:02.810
SQL, you know, and I
know with entity framework and

321
00:15:02.810 --> 00:15:04.010
some of the other things
that are coming out of

322
00:15:04.010 --> 00:15:05.930
this is the story's a
little different. And I, you

323
00:15:05.930 --> 00:15:08.810
know, entity framework is interesting
to me. I wonder if

324
00:15:08.810 --> 00:15:10.340
it wouldn't solve some of
the problems, but I just

325
00:15:10.340 --> 00:15:12.020
don't have the panel to
look into it since it's

326
00:15:12.020 --> 00:15:14.090
not shipping in a timeframe
that works for us. So

327
00:15:14.480 --> 00:15:16.340
I'll definitely be looking into
it when it comes back.

328
00:15:16.340 --> 00:15:21.290
But anyway, yeah. Link to
SQL. You ultimately have to

329
00:15:21.290 --> 00:15:23.210
have a class somewhere that
looks like what's in the

330
00:15:23.210 --> 00:15:25.340
DB. So that, that, that
Orr mapper can do its

331
00:15:25.340 --> 00:15:28.610
job. So, you know, the
easiest, the easiest way to

332
00:15:28.610 --> 00:15:30.710
get that is to use
the R designer, which is

333
00:15:30.710 --> 00:15:32.990
the, you know, just the
gooey drag and drop tables

334
00:15:32.990 --> 00:15:35.320
out of SQL server. So
there's deep copy. Is this

335
00:15:35.320 --> 00:15:38.320
a reflection thing? No, it's,
it's just straight, you know,

336
00:15:38.320 --> 00:15:41.320
stupid, you know, this field
maps to this field, copies

337
00:15:41.320 --> 00:15:45.370
it Manually written. Yeah. So,
you know, and I'm just

338
00:15:45.370 --> 00:15:47.710
brainstorming here. I'm trying to
challenge my own assumptions as

339
00:15:47.710 --> 00:15:50.770
well as yours. So you
wanted so much control over

340
00:15:50.770 --> 00:15:54.460
the WCF types that you
did that did that left

341
00:15:54.460 --> 00:15:56.650
hand, right hand kind of,
you know, this field, that

342
00:15:56.650 --> 00:15:58.900
field is in that field
work, as well as having

343
00:15:58.900 --> 00:16:01.960
a whole separate kind of
identity. What was wrong with

344
00:16:01.960 --> 00:16:04.570
just the push of button
then it's available to WCF

345
00:16:05.290 --> 00:16:09.010
serialize property. Well, given that
some of the, some of

346
00:16:09.010 --> 00:16:10.660
the growth changes that we
know we're going to be

347
00:16:10.660 --> 00:16:13.630
going through, I think trying
to keep them isolated a

348
00:16:13.630 --> 00:16:15.640
little bit, what basically what
we did is we designed

349
00:16:15.640 --> 00:16:18.910
the WCF types to look
like, you know, to, to

350
00:16:18.910 --> 00:16:21.130
be a little more forward
looking in the way to

351
00:16:21.430 --> 00:16:23.830
have a few features in
there that aren't turned on

352
00:16:23.830 --> 00:16:25.960
yet. And then we have
things that are, we have

353
00:16:25.960 --> 00:16:27.880
things that aren't even in
the DB yet, or we

354
00:16:27.880 --> 00:16:30.400
have things that we made
shortcuts in the DB to,

355
00:16:31.180 --> 00:16:33.670
you know, we, we sacrifice
some normalization to get something

356
00:16:33.670 --> 00:16:36.460
where if we tried to,
if we tried to expose

357
00:16:36.460 --> 00:16:38.470
that directly through the contract's
types, you'd end up with

358
00:16:38.470 --> 00:16:41.350
something that's kind of unwieldy.
It, it actually works really

359
00:16:41.350 --> 00:16:43.180
well when you're talking to
it through link because you

360
00:16:43.180 --> 00:16:46.000
have, you have some fairly
decent control over the, you

361
00:16:46.000 --> 00:16:48.010
know, back references and things
that make them a little

362
00:16:48.010 --> 00:16:52.030
more queryable. It makes it's
just fantastically easy to do

363
00:16:52.030 --> 00:16:54.190
joins and things like that.
I mean, I, I look

364
00:16:54.190 --> 00:16:55.900
at the SQL that I
would have had to write

365
00:16:56.140 --> 00:16:57.910
something that I can write
in, you know, of a

366
00:16:57.910 --> 00:17:00.470
fairly short line of LinkedIn
SQL query. I mean, it

367
00:17:00.490 --> 00:17:02.920
might be, you know, it'd
be, you know, 30 or

368
00:17:02.920 --> 00:17:05.320
40 lines of nasty SQL
that to put it together.

369
00:17:05.320 --> 00:17:07.390
And it generates it for
me every once in a

370
00:17:07.390 --> 00:17:09.910
while, you can watch the
queries that come out every

371
00:17:09.910 --> 00:17:12.430
once in a while, the,
the do the visualizer. Well,

372
00:17:12.430 --> 00:17:14.400
even without the visualizer, you
can sort of see, and,

373
00:17:14.400 --> 00:17:16.840
and that, you know, I
know Scott goop put out

374
00:17:16.840 --> 00:17:20.260
the, a, that asp.net heard
the, the link to SQL

375
00:17:20.260 --> 00:17:23.320
query visualizer. And that thing
is just fantasy. Yeah. Have

376
00:17:23.320 --> 00:17:26.200
you used link pad? I
haven't, I've seen it. Gotta

377
00:17:26.200 --> 00:17:28.210
check that out. Yeah. It
lets you, it's basically a

378
00:17:28.210 --> 00:17:30.370
query analyzer. It lets you
write link and then see

379
00:17:30.370 --> 00:17:33.400
what comes out. So it's
a, it's a query analyzer

380
00:17:33.400 --> 00:17:35.920
like experience where you type
link five type link at

381
00:17:35.920 --> 00:17:39.190
five. So you basically get
your queries right inside of

382
00:17:39.190 --> 00:17:41.110
link Pat, and then copy
paste them over into visuals.

383
00:17:41.380 --> 00:17:43.600
Assuming that's targeting linked to
objects, not linked to SQL

384
00:17:43.750 --> 00:17:45.730
Don't link to sequel link
to objects, link to whatever.

385
00:17:45.910 --> 00:17:48.700
Huh. Interesting. Totally generic thing.
Yeah. Yeah. That'd be interested

386
00:17:48.700 --> 00:17:50.460
to see how they're doing,
how they're doing The class

387
00:17:50.460 --> 00:17:52.620
mapping stuff for the link.
I mean, it is a

388
00:17:52.880 --> 00:17:54.800
Interesting to see if your
stuff works, the stuff that

389
00:17:54.800 --> 00:17:56.750
you're doing, where the objects
actually pop out the side.

390
00:17:56.810 --> 00:18:00.170
Yeah. Yeah. So what about
validation? Because one of the

391
00:18:00.170 --> 00:18:01.670
things that I thought was
cool about link is the

392
00:18:01.670 --> 00:18:06.350
idea that I could have
like public partial class product

393
00:18:06.890 --> 00:18:09.590
and that's inside of the
designer that's generated and the

394
00:18:09.590 --> 00:18:11.810
way that they get around,
not being able to edit

395
00:18:11.810 --> 00:18:16.280
that generated code as well
as avoiding kind of uncomfortable

396
00:18:16.280 --> 00:18:19.610
object hierarchies for things like
validation, being able to like,

397
00:18:20.510 --> 00:18:22.280
like they could have called
it product base and then

398
00:18:22.280 --> 00:18:24.350
you derive and have an
on validate and, and things

399
00:18:24.350 --> 00:18:26.630
like that on insert and
stuff like that. You can

400
00:18:26.630 --> 00:18:30.380
have partial methods, right? So
you could have public partial

401
00:18:30.380 --> 00:18:33.740
method on validate. And that's
the method that gets called

402
00:18:33.740 --> 00:18:37.400
when it's time to, to
validate a particular class. Have

403
00:18:37.400 --> 00:18:39.050
you done that kind of
stuff at all? We've played

404
00:18:39.050 --> 00:18:41.210
with the partial method stuff
a little bit. Unfortunately we

405
00:18:41.210 --> 00:18:43.370
did most of our design
on the beta one stuff

406
00:18:43.370 --> 00:18:45.860
where the partial methods bits
weren't in there yet. So

407
00:18:45.860 --> 00:18:48.110
we've, you know, since switching
to beta two we've, we've

408
00:18:48.110 --> 00:18:50.270
plugged in a few things
there, but a lot of

409
00:18:50.270 --> 00:18:53.450
that stuff was baked unfortunately,
before it was baked after

410
00:18:53.450 --> 00:18:57.200
we had baked our code.
So the partial methods stuff

411
00:18:57.200 --> 00:18:59.030
is really interesting though, because
it is basically just like

412
00:18:59.030 --> 00:19:01.610
lightweight inventing. I mean, it's,
it's really cool that like

413
00:19:01.640 --> 00:19:03.950
the, that the compiler doesn't
generate anything. If, you know,

414
00:19:03.950 --> 00:19:05.840
you don't, you only pay
the price. If you actually,

415
00:19:05.870 --> 00:19:07.610
you only pay the price
for that event and overhead,

416
00:19:07.610 --> 00:19:09.500
if you actually subscribe, if
you actually do something with

417
00:19:09.500 --> 00:19:11.540
the event, if you implement
a handler for, Yeah. It's

418
00:19:11.540 --> 00:19:12.950
taken me a while to
get my brain around it

419
00:19:12.950 --> 00:19:15.080
because, you know, if you
think about how I've got

420
00:19:15.080 --> 00:19:17.990
this class and I say,
you know, data context submit

421
00:19:17.990 --> 00:19:20.630
all changes. And if that
class isn't cool, I want

422
00:19:20.630 --> 00:19:22.430
to know about it. How
could that have been done?

423
00:19:22.430 --> 00:19:23.840
It could have been done
with the pubsub. It could

424
00:19:23.840 --> 00:19:26.540
have been formally inventing Dutton
and events could have been

425
00:19:26.540 --> 00:19:29.870
derivation with a virtual method
that gets called if it's,

426
00:19:29.900 --> 00:19:33.170
if it's overwritten or with
the partial classes, classes where

427
00:19:33.440 --> 00:19:35.690
the partial methods rather, where
if the method is implemented,

428
00:19:35.720 --> 00:19:39.170
it'll get called. How are
you keeping track of validation?

429
00:19:39.170 --> 00:19:41.300
How do you prevent a
foo object from getting into

430
00:19:41.300 --> 00:19:44.810
the database? If it's not
really correct, We have several

431
00:19:44.810 --> 00:19:47.180
layers of a validation going
on. I mean, obviously the

432
00:19:47.180 --> 00:19:49.310
first stuff is happening up
in the UI and, and

433
00:19:49.550 --> 00:19:51.680
in the front or the
front end of the service

434
00:19:51.680 --> 00:19:55.550
tier, just, just doing, you
know, standard old school validation.

435
00:19:55.570 --> 00:19:58.100
So, you know, asp.net validation,
things on the front end

436
00:19:58.100 --> 00:20:02.690
and, and just normal checks
on the backend input, validation

437
00:20:02.690 --> 00:20:08.300
controls, just basic stuff further
back, you know, we've, we've

438
00:20:08.300 --> 00:20:10.490
got a lot of checks
in the DB itself to

439
00:20:10.580 --> 00:20:12.950
th that are doing some
consistency checking. There, there are

440
00:20:12.950 --> 00:20:15.440
a few triggers that run
looking for, for goofy things

441
00:20:15.440 --> 00:20:19.190
that we couldn't catch in
easier ways. But yeah, for

442
00:20:19.190 --> 00:20:21.230
the most part, basically we
do the checking as the

443
00:20:21.230 --> 00:20:23.360
objects are being created, because
usually since there is that

444
00:20:23.360 --> 00:20:26.030
left to right, you know,
where we're converting from a

445
00:20:26.030 --> 00:20:28.490
WCF type to a link
type, sometimes we'll do the

446
00:20:28.490 --> 00:20:32.120
checking in there too. But
the, one of the problems

447
00:20:32.120 --> 00:20:34.670
that we have with validation,
I mean, obviously you usually

448
00:20:34.670 --> 00:20:37.130
have to w when you
split the things across tiers,

449
00:20:37.130 --> 00:20:39.350
that way you usually have
to do the majority of

450
00:20:39.350 --> 00:20:42.200
the validation upfront. So, you
know, we don't want to

451
00:20:42.200 --> 00:20:43.730
have to go all the
way back to the DB

452
00:20:43.730 --> 00:20:45.560
tier to find out that
something's wrong and then have

453
00:20:45.560 --> 00:20:48.520
to marshal some kind of
exception. That's understandable to asp.net

454
00:20:48.520 --> 00:20:50.860
all the way back up.
Right? So the, you know,

455
00:20:50.860 --> 00:20:52.360
the stuff that's going on
in the service tier is

456
00:20:52.360 --> 00:20:55.240
mainly like the, the kind
of the backstop for things

457
00:20:55.240 --> 00:20:58.000
that, you know, did either
didn't get through or were

458
00:20:58.000 --> 00:21:00.460
maliciously stuffed in, you know,
through an Ajax end point

459
00:21:00.460 --> 00:21:04.320
or something that bikes. So
asp.net makes some, some object

460
00:21:04.320 --> 00:21:06.670
that's makes a service proxy.
I assume it makes a

461
00:21:06.680 --> 00:21:09.630
WCF service proxy. Yep. Makes
a, you know, a foo

462
00:21:09.630 --> 00:21:12.900
object that is a WCF
object and then passes it

463
00:21:12.900 --> 00:21:15.720
into WCF. What are those
methods look like and how

464
00:21:15.720 --> 00:21:19.380
do they map all the
way back? Well, so that's

465
00:21:19.380 --> 00:21:21.000
one of the places where
we've kind of gone away

466
00:21:21.000 --> 00:21:23.280
from the Microsoft guidance a
little bit, and we're taking

467
00:21:23.280 --> 00:21:26.610
advantage of some of the
flexibility of WCF. So I'm,

468
00:21:26.900 --> 00:21:29.190
I'm definitely more of a
contract first kind of developer.

469
00:21:29.190 --> 00:21:32.340
I like, I like the
idea of, you know, defining,

470
00:21:32.370 --> 00:21:34.890
defining my wire format to,
to an extent. I mean,

471
00:21:35.160 --> 00:21:37.740
I, you know, I'm not
quite, I'm not quite as

472
00:21:37.860 --> 00:21:40.020
into it as Timmy Walder
or whatever You like your

473
00:21:40.020 --> 00:21:42.060
control. You want your angle
brackets a certain way. I

474
00:21:42.060 --> 00:21:46.440
do. I do. And so
we're actually in almost all

475
00:21:46.440 --> 00:21:49.170
the literature that I've seen
describing WCF that everybody kind

476
00:21:49.170 --> 00:21:53.040
of downplays the message contract.
So the message contract is

477
00:21:53.040 --> 00:21:55.260
the thing that, that basically,
you know, maps to like

478
00:21:55.260 --> 00:21:57.300
a whistle operation, Which is
funny. Cause it seemed to

479
00:21:57.300 --> 00:21:58.590
me like a couple of
years ago it was all

480
00:21:58.590 --> 00:22:00.930
about contract first. Yes. And
then it switched to code

481
00:22:00.930 --> 00:22:03.510
first. And I think I'm
with you, I'm still back

482
00:22:03.510 --> 00:22:06.060
in the contract first. Well,
the thing that bothers me

483
00:22:06.060 --> 00:22:08.190
the most about the, about
the, you know, if you,

484
00:22:08.190 --> 00:22:11.550
if you, if you skip
message contracts in Indigo and

485
00:22:11.550 --> 00:22:16.110
WCF, you end up with,
you know, everything is a

486
00:22:16.110 --> 00:22:18.480
method call, right? And so
if I need to, if

487
00:22:18.480 --> 00:22:21.210
I need to add a
field, well, I just screwed

488
00:22:21.210 --> 00:22:23.610
myself because now, you know,
the next time I reach

489
00:22:23.610 --> 00:22:25.470
in my client, all of
my, all of the other

490
00:22:25.470 --> 00:22:28.230
stuff is going to break.
I don't have, I don't

491
00:22:28.230 --> 00:22:30.210
have as much control if
you do something really screwy

492
00:22:30.210 --> 00:22:32.370
where you like change, where
you change the type of

493
00:22:32.370 --> 00:22:34.890
a, a, of a parameter,
or if you leave something,

494
00:22:35.220 --> 00:22:38.520
you can get some really
subtle, interesting of to debug

495
00:22:38.550 --> 00:22:42.060
issues. So I don't know,
I'm, I'm more a fan

496
00:22:42.060 --> 00:22:44.430
of the message contract programming.
So, so basically all of

497
00:22:44.430 --> 00:22:47.010
our contracts are defined in
terms of, you know, all

498
00:22:47.010 --> 00:22:50.370
the operations are defined in
terms of MES contracts. Okay.

499
00:22:50.370 --> 00:22:54.480
So asp.net guy makes the
service proxy passes some stuff

500
00:22:54.480 --> 00:22:58.560
into, to WCF. So do
you have actual physical tears?

501
00:22:58.560 --> 00:23:00.960
Because sometimes I think that
there's a bit of confusion

502
00:23:00.960 --> 00:23:03.870
when people use tears versus
layers. I think of layers

503
00:23:03.870 --> 00:23:06.390
as logical things and tears
and physical things. So there's

504
00:23:06.390 --> 00:23:09.720
a physical, separate box from
the asp.net box that handles

505
00:23:09.720 --> 00:23:14.070
that all the WCF hosting.
Yeah. In our, in a

506
00:23:14.070 --> 00:23:17.370
deployment scenario. That's true. I
mean, in development, obviously we're

507
00:23:17.370 --> 00:23:20.580
not messing around with that.
So the tiers are both

508
00:23:20.580 --> 00:23:24.000
logical and physical in deployment.
They are, they are set

509
00:23:24.000 --> 00:23:28.680
up for physical separation. So
for instance, the stack that

510
00:23:28.680 --> 00:23:30.960
we have, the, the stack
that we're going live with

511
00:23:30.960 --> 00:23:34.290
on our.net system is eight
servers. So, Hm. So there

512
00:23:34.290 --> 00:23:37.170
are two web servers, two
app servers that handle things

513
00:23:37.170 --> 00:23:40.860
like, you know, billing, email
alerts, all the, the little

514
00:23:40.860 --> 00:23:43.950
just inventing stuff. And then
we have these, these two

515
00:23:43.950 --> 00:23:46.880
large image servers store, all
of the, you know, so

516
00:23:46.880 --> 00:23:48.860
they have a two terabyte
file store on a beach

517
00:23:48.860 --> 00:23:51.860
that store all of the,
you know, all the images

518
00:23:51.860 --> 00:23:54.170
and PDFs and all that
stuff. And, and actually those

519
00:23:54.170 --> 00:23:57.830
also do the, those are
also running a WCF Ajax

520
00:23:57.860 --> 00:24:00.740
service, which is new for
three, five. So we're self,

521
00:24:00.770 --> 00:24:05.090
self hosting, a WCFA Ajax
service in there that the

522
00:24:05.090 --> 00:24:07.070
browser. So we're doing, if
you look at the client

523
00:24:07.070 --> 00:24:09.200
the way the client works
and when it requests all

524
00:24:09.200 --> 00:24:12.260
the metadata about mail. So
when you're doing your, you

525
00:24:12.260 --> 00:24:14.270
know, you look at all
the, your envelope images and

526
00:24:14.270 --> 00:24:16.400
all that stuff, it's making
a, it's making an Ajax

527
00:24:16.400 --> 00:24:19.040
request. It's all client side,
it's making an Ajax request

528
00:24:19.040 --> 00:24:24.050
directly back to that image
store. So the image store

529
00:24:24.050 --> 00:24:26.990
is handling, you know, all
the marshaling that's where all

530
00:24:26.990 --> 00:24:30.470
the link to SQL stuff
that's going on for, for

531
00:24:32.360 --> 00:24:35.740
male, male metadata. So how
do I keep that from,

532
00:24:36.040 --> 00:24:38.020
how do I, like as
a, I'm an evil guy,

533
00:24:38.020 --> 00:24:39.700
and I want to sniff
that Ajax, and I'm going

534
00:24:39.700 --> 00:24:42.070
to go and try to
look for other people's mail.

535
00:24:42.640 --> 00:24:44.980
Oh, go ahead. Give it
a shot. It's probably not

536
00:24:44.980 --> 00:24:47.230
going to work. So how
do you handle that kind

537
00:24:47.230 --> 00:24:50.290
of authorization? I mean, is
this all based on cookies

538
00:24:50.290 --> 00:24:53.980
and the, that the, that
forms authentication ticket is kind

539
00:24:53.980 --> 00:24:56.650
of fundamental, right? Well, actually
the, the problem there is,

540
00:24:56.800 --> 00:24:59.290
so we, we weren't able
to use any of that

541
00:24:59.290 --> 00:25:01.910
stuff because forms are trying
to host forms, authentication outside

542
00:25:01.930 --> 00:25:04.270
asp.net is kind of tricky.
I mean, you can do

543
00:25:04.270 --> 00:25:07.390
it, but we didn't want
to. So like I said,

544
00:25:07.390 --> 00:25:10.750
we're self hosting, the Ajax,
the WCF Ajax services over

545
00:25:10.750 --> 00:25:12.610
there. So the things that
are running on the image

546
00:25:12.610 --> 00:25:15.700
servers, there's no IAS, or,
you know, there's no Posting,

547
00:25:15.700 --> 00:25:17.800
you're saying like, there's like
a console or a window

548
00:25:17.820 --> 00:25:20.470
service. Yes. There's a windows
surface that, that actually hosts

549
00:25:20.470 --> 00:25:25.840
the WCF, the new web
HTTP binding. So it's, it's

550
00:25:25.840 --> 00:25:28.570
a super fast, super lightweight.
It's really nice not having

551
00:25:28.570 --> 00:25:30.460
IAS in the mix, but
you know, you're kind of,

552
00:25:30.460 --> 00:25:32.560
you're kind of out in
the loan Trey world there

553
00:25:32.560 --> 00:25:34.780
because you, you don't have
all the, you don't have

554
00:25:34.780 --> 00:25:37.150
the stuff that comes in
the asp.net pipeline that you

555
00:25:37.150 --> 00:25:38.590
get. So used to it,
you know, you don't get

556
00:25:38.590 --> 00:25:40.540
your cookies, you don't get
your caching, you don't get

557
00:25:40.540 --> 00:25:42.250
it right. You basically, you
know, they give you a

558
00:25:42.250 --> 00:25:44.330
headers collection and you can
stuff, whatever you want to

559
00:25:44.330 --> 00:25:46.390
look, whatever you want. But
that's it good luck with

560
00:25:46.390 --> 00:25:48.460
that. Yeah. There's no, there's
no built in cookie handling.

561
00:25:48.460 --> 00:25:51.580
There's no nothing there. So
We thought about using Vista

562
00:25:51.640 --> 00:25:55.420
and windows activation service. Yeah.
Actually I had wished I

563
00:25:55.420 --> 00:25:57.580
wished we had, I wish
we had built our dev

564
00:25:57.580 --> 00:26:01.150
machines for it, but that
particular instance, right. As it

565
00:26:01.150 --> 00:26:03.910
is right now, we, we
don't use windows activation service.

566
00:26:04.180 --> 00:26:06.310
So there is a, there's
a, there's a console app.

567
00:26:06.340 --> 00:26:08.050
Like when the developers are
working with something, there's a

568
00:26:08.050 --> 00:26:11.020
console app that hosts all
the other individual services. I

569
00:26:11.020 --> 00:26:12.880
see. And then we just
have a few config entries

570
00:26:12.880 --> 00:26:15.130
that point everything to the
right place. But you know,

571
00:26:15.130 --> 00:26:16.660
one of the other really
big problems that we ran

572
00:26:16.660 --> 00:26:21.520
into there was that Ajax
it's, it's kind of loosely

573
00:26:21.520 --> 00:26:23.950
documented the, the behavior of
Ajax when it comes to

574
00:26:23.950 --> 00:26:28.120
multiple hosts is kind of
loosely documented. So everybody talks

575
00:26:28.120 --> 00:26:30.190
about cross domain. You can't
do cross domain. Well, it

576
00:26:30.190 --> 00:26:32.260
turns out you also can't
do cross host, which is

577
00:26:32.260 --> 00:26:34.540
different than everything else. Like
the, you know, if you're,

578
00:26:34.750 --> 00:26:36.700
if you're, if you want
to serve images or anything

579
00:26:36.700 --> 00:26:39.520
from a browser, like a
browser can, can rec and

580
00:26:39.520 --> 00:26:41.350
like through an SSL connection
or not, it doesn't matter

581
00:26:41.350 --> 00:26:43.980
where you can, you can
request different hosts on the

582
00:26:43.980 --> 00:26:46.590
same domain. And that works
fine. Ajax doesn't work that

583
00:26:46.590 --> 00:26:48.830
way. And I found that
out the hard way. Can

584
00:26:48.830 --> 00:26:51.290
you give me some examples
in like a, you're talking

585
00:26:51.290 --> 00:26:54.440
about like www one dot
Well, sure. So, so for

586
00:26:54.440 --> 00:26:56.210
instance, I mean, I told
you that our, our image,

587
00:26:56.380 --> 00:26:58.940
our image and my mail
metadata servers are running on

588
00:26:58.940 --> 00:27:01.760
separate physical hardware. Right. So
the original intent was that

589
00:27:01.760 --> 00:27:03.470
those things would just be
a separate host. You know,

590
00:27:03.470 --> 00:27:06.140
it'd be, you know, Ajax
dot first class mail.com and,

591
00:27:06.590 --> 00:27:08.330
and you would, you would
make a request to that.

592
00:27:08.330 --> 00:27:10.700
Well, a separate sub domain
within the larger domain, right?

593
00:27:10.700 --> 00:27:12.410
It's yeah. It's just separate
hosts. I mean, it shows

594
00:27:12.410 --> 00:27:14.900
up as a separate virtual
IP cause everything everything's all

595
00:27:14.900 --> 00:27:18.560
in an active, active, active
stack, so, right. So, you

596
00:27:18.560 --> 00:27:20.510
know, we just have however
many boxes we need. We

597
00:27:20.510 --> 00:27:22.040
just, I mean, we've got
a load balancer sitting out

598
00:27:22.040 --> 00:27:24.080
front, that's just doing stupid
load value, you know, just

599
00:27:24.110 --> 00:27:30.260
round Robin. Yeah. And everything's
hunky Dory, except that yeah.

600
00:27:30.260 --> 00:27:32.360
You can't do that with
Ajax. It has to go

601
00:27:32.360 --> 00:27:34.600
back exactly to where it
came from. Yep. It has.

602
00:27:34.610 --> 00:27:37.160
That's why people talk about
having Ajax proxies basically it's

603
00:27:37.160 --> 00:27:40.010
services that do nothing but
proxy Ajax drift. Yep. And

604
00:27:40.010 --> 00:27:42.110
this was my first real
experience with Ajax and I

605
00:27:42.110 --> 00:27:43.520
kind of poked out and
played with it a little

606
00:27:43.520 --> 00:27:45.710
bit before, but I'd never
had to deal with it

607
00:27:45.710 --> 00:27:47.270
on any kind of a
scale that where I would

608
00:27:47.270 --> 00:27:49.490
need to do something across
multiple hosts. So we ended

609
00:27:49.490 --> 00:27:51.250
up having to do some
magic on our load balancers,

610
00:27:51.250 --> 00:27:53.960
some layer layer, seven content
redirection to say, okay, anything

611
00:27:53.960 --> 00:27:57.200
that says slash jsom goes
right. Goes to that server.

612
00:27:57.200 --> 00:27:58.790
And yeah. The other way
would have been to have

613
00:27:58.790 --> 00:28:02.210
the asp.net servers that the,
the page was served from

614
00:28:02.420 --> 00:28:05.210
basically host a proxy that
did nothing, but there's left

615
00:28:05.210 --> 00:28:06.770
hand right hand, which would
have been yeah. Which will

616
00:28:06.770 --> 00:28:08.560
be more of a hassle
than right. Well, and, and

617
00:28:08.560 --> 00:28:10.670
it's, I mean, it's a,
it's just a waste of

618
00:28:10.830 --> 00:28:13.100
why would I, why channel
the bits through the asp.net,

619
00:28:13.280 --> 00:28:14.930
Right. When the, when the
load balancer can do it.

620
00:28:14.990 --> 00:28:17.090
Yeah. So back to the
security thing, so you don't

621
00:28:17.090 --> 00:28:20.240
have cookies, you don't have
a lot of automatic stuff

622
00:28:20.270 --> 00:28:22.520
going on. What's you know,
how do you get the,

623
00:28:22.610 --> 00:28:24.680
the image server to not
give back images that the

624
00:28:24.680 --> 00:28:27.620
user shouldn't be allowed to
see? So basically what we

625
00:28:27.620 --> 00:28:29.270
ended up having to do
is roll a little bit

626
00:28:29.270 --> 00:28:31.730
of our own sessioning infrastructure
that goes against the DB.

627
00:28:31.730 --> 00:28:33.560
So one of the nice
things is that we don't

628
00:28:33.560 --> 00:28:37.610
have security below the mailbox
level. So like you, like

629
00:28:37.610 --> 00:28:39.320
if you're a business account,
or if you, if you

630
00:28:39.320 --> 00:28:41.780
have multiple people in your
household, you can, you know,

631
00:28:41.810 --> 00:28:44.780
you're a Scott Hanselman mailbox.
You can, you can grant

632
00:28:44.780 --> 00:28:46.790
access to your mailbox, to
someone else to be able

633
00:28:46.790 --> 00:28:48.360
to Snoop around and see
your mail. Like if, you

634
00:28:48.360 --> 00:28:49.460
know, if you're in a
business and you have a

635
00:28:49.460 --> 00:28:50.840
secretary that you want to
be able to see your

636
00:28:50.840 --> 00:28:52.850
mail or whatever you want
to, you want to delegate

637
00:28:53.090 --> 00:28:54.680
the handling of your mail
to someone else in your

638
00:28:54.680 --> 00:28:56.600
family, while you go on
vacation or whatever, you can

639
00:28:56.600 --> 00:29:00.710
do that. But we don't,
there's no security below the

640
00:29:00.710 --> 00:29:03.380
mailbox level. So the way
all that stuff gets stored,

641
00:29:03.380 --> 00:29:05.570
what we can do is
basically we can grant you

642
00:29:05.570 --> 00:29:08.420
a little token that says,
all right, you know, this

643
00:29:08.420 --> 00:29:11.210
is, this is Scott session.
And back in the DB,

644
00:29:11.210 --> 00:29:13.340
we can know that Scott
session is associated to a,

645
00:29:13.350 --> 00:29:15.230
you know, what we know
what mailbox is you have

646
00:29:15.230 --> 00:29:17.060
access to. And we just
do an access check when

647
00:29:17.060 --> 00:29:18.890
you, so whenever you make
a request, I mean, you're,

648
00:29:19.070 --> 00:29:21.950
you still have a cookie
that came through, but it's

649
00:29:21.950 --> 00:29:24.080
a cookie that we assigned
to you that, you know,

650
00:29:24.080 --> 00:29:26.300
so we're not using asp.net
sessions or anything like that

651
00:29:26.300 --> 00:29:28.070
to do this. We kind
of had to roll our

652
00:29:28.070 --> 00:29:31.190
own session. West comes in
for the picture of my,

653
00:29:32.000 --> 00:29:34.310
my Domino's pizza coupon that
was sent to me. We

654
00:29:34.320 --> 00:29:36.290
go to the database to
make sure that this is

655
00:29:36.290 --> 00:29:38.270
me, that the ticket that
I came in with is

656
00:29:38.270 --> 00:29:42.340
Scott's ticket. Scott's mail are
these things, is this file

657
00:29:42.340 --> 00:29:46.690
that just got requested a
part of Scottsdale. Yeah. That

658
00:29:46.690 --> 00:29:48.370
was some somebody goes and
tries to ask for a

659
00:29:48.370 --> 00:29:51.100
different, I dunno, a different
unique ID and tries to

660
00:29:51.100 --> 00:29:53.650
sneak a look at someone
else's mail. It's not part

661
00:29:53.650 --> 00:29:56.430
of his mailbox. He can't
Right. They're all mailbox qualified.

662
00:29:56.430 --> 00:29:58.680
So, and actually what we
ended up doing is storing

663
00:29:58.680 --> 00:30:01.680
things. So there's actually not
a DB head involved in

664
00:30:01.680 --> 00:30:03.570
any of that, except for
the initial access check on

665
00:30:03.570 --> 00:30:06.120
the mailbox, which we cash.
So basically, you know, you're

666
00:30:06.120 --> 00:30:08.310
always coming to us. You're
always going to be coming

667
00:30:08.310 --> 00:30:10.800
back to us, probably asking
for mail from Scott's mailbox.

668
00:30:10.800 --> 00:30:14.010
I mean, unless, except in
some really strange administrator scenarios

669
00:30:14.010 --> 00:30:16.170
where we allow like an
administrator to have access to

670
00:30:16.170 --> 00:30:19.080
multiple male or equal. Yeah.
Well even, but even if

671
00:30:19.080 --> 00:30:20.520
you're evil, you're like, well,
we're going to tell you

672
00:30:20.520 --> 00:30:22.230
to go away. If you
come and ask for an

673
00:30:22.230 --> 00:30:26.490
image that isn't in your
mailbox. So, but the way

674
00:30:26.490 --> 00:30:28.770
those things are stored on
the file system, we actually

675
00:30:28.770 --> 00:30:31.110
know we know what mailbox
they're stored in. There's some

676
00:30:31.110 --> 00:30:32.670
pointer files and things that
are going on in the

677
00:30:32.670 --> 00:30:34.290
file system so that we
don't actually have to hit

678
00:30:34.290 --> 00:30:35.940
the DB for every one
of those hits. So it's

679
00:30:36.180 --> 00:30:39.540
our image servers are really
nice. Wait, someone, can't, it

680
00:30:39.610 --> 00:30:41.940
kind of cause a denial
of service by virtue of

681
00:30:41.940 --> 00:30:43.320
the fact that you're just
asking, you know, an evil

682
00:30:43.320 --> 00:30:45.300
person asking for a lot
of mail. That's not his,

683
00:30:45.630 --> 00:30:48.000
it doesn't affect the data.
Correct. Because we also catch

684
00:30:48.000 --> 00:30:50.940
the negative. So yeah. If,
if, if you come to

685
00:30:50.940 --> 00:30:52.560
us and try to hit
some other mailbox, we're going

686
00:30:52.560 --> 00:30:55.020
to say, ah, no. And
yeah, we also usually a,

687
00:30:55.030 --> 00:30:57.360
that gets logged as well.
So yeah. Cause of course

688
00:30:57.360 --> 00:30:59.670
it's auditing, right? Because this
is about your mail. Yes.

689
00:30:59.970 --> 00:31:02.640
Very cool. And then just
real briefly, you were talking

690
00:31:02.640 --> 00:31:06.000
about doing WPF on the,
on the client side. So

691
00:31:06.630 --> 00:31:08.430
when people hear WPF, they
think in it kind of,

692
00:31:08.430 --> 00:31:10.650
you know, transparency and animation
and all sorts. So are

693
00:31:10.650 --> 00:31:13.260
these pretty sexy looking applications
for managing mail on the

694
00:31:13.260 --> 00:31:15.210
front end or they're like
the BPF and not just

695
00:31:15.210 --> 00:31:16.890
wind for them, They're a
lot sexier than their wind

696
00:31:16.890 --> 00:31:19.870
farms counterparts, but there there's
actually a fair amount of,

697
00:31:19.950 --> 00:31:22.050
there's a fair amount of
data binding. And obviously, you

698
00:31:22.050 --> 00:31:23.460
know, we're, we're dealing with
a little bit of image

699
00:31:23.460 --> 00:31:25.620
manipulation here. So some of
those things are a little

700
00:31:25.620 --> 00:31:28.050
easier to do in WPF
with the stuff that comes

701
00:31:28.050 --> 00:31:30.720
in the box. You know,
it's, it's a lot easier

702
00:31:30.720 --> 00:31:32.550
to, to scale an image
and get it to work

703
00:31:32.550 --> 00:31:35.940
the way you want. And
there's, we haven't actually deployed

704
00:31:35.940 --> 00:31:38.100
that software yet either. We've
kind of, we've done a

705
00:31:38.100 --> 00:31:40.500
couple of prototypes and test
deployments of it, but you

706
00:31:40.500 --> 00:31:43.080
know, the, the, the look
and feel definitely went over

707
00:31:43.080 --> 00:31:44.970
well with the, the folks
over in the warehouse that

708
00:31:44.970 --> 00:31:47.160
are running it. So That's
interesting. A lot of people

709
00:31:47.280 --> 00:31:49.770
think about the pretty stuff,
but the first thing you

710
00:31:49.770 --> 00:31:52.050
said was the data binding.
That's kind of like one

711
00:31:52.050 --> 00:31:54.810
of the cool things about
WPF that I've read when

712
00:31:54.810 --> 00:31:57.240
I read it in Chris
sales book, Deep data mining

713
00:31:57.240 --> 00:31:58.830
is, is the way of
the future. Is it really,

714
00:31:58.950 --> 00:32:01.730
Oh man, binding path, it's
all about binding and all

715
00:32:01.740 --> 00:32:03.720
that. Cause you can cause,
Oh you can, you can,

716
00:32:03.750 --> 00:32:06.030
you can dot, you can.as
far into an object as

717
00:32:06.030 --> 00:32:07.470
you want for data mining.
And you know, you try

718
00:32:07.480 --> 00:32:09.550
to do that in wind
forms and it's just, it's

719
00:32:09.690 --> 00:32:11.670
kind of a pain really.
Yeah. That sounds like you're

720
00:32:11.670 --> 00:32:13.320
breaking the law to meet
her at that point. If

721
00:32:13.320 --> 00:32:15.720
you can go three, four
deep into an office, Well,

722
00:32:15.720 --> 00:32:17.370
we, we don't usually go
that far, but you know

723
00:32:18.060 --> 00:32:20.880
yeah. But yeah. Cool. Well,
Matt, I really appreciate you

724
00:32:20.880 --> 00:32:22.350
taking the time to talk
to us here on Hansel

725
00:32:22.350 --> 00:32:24.870
minutes and you know, maybe
we'll come by sometime with

726
00:32:24.870 --> 00:32:28.020
a video camera and we'll
do some actual demos maybe

727
00:32:28.020 --> 00:32:30.360
do as kind of a
screencast or certificate with some

728
00:32:30.360 --> 00:32:32.430
of the cool stuff that
you're doing. And so you

729
00:32:32.430 --> 00:32:34.170
can go live with beta
two if we wanted to,

730
00:32:34.170 --> 00:32:36.900
right. Yeah. Go live license.
That's actually our plan. We'll

731
00:32:36.930 --> 00:32:41.710
even, even if, even if
the 2008 TMS before we

732
00:32:41.710 --> 00:32:44.770
actually edit, just because we've
done all the testing too,

733
00:32:45.040 --> 00:32:47.560
we'll probably end up deploying
on beta to do a,

734
00:32:47.860 --> 00:32:49.720
do a quick release. And
over the next few weeks

735
00:32:49.720 --> 00:32:52.690
after we've actually had a
test, a chance to figure

736
00:32:52.690 --> 00:32:55.540
out what changed between beta
two and RTM and Cool.

737
00:32:56.650 --> 00:32:58.690
All right, we'll see you
next week on Hansel minutes.

