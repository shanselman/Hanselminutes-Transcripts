WEBVTT FILE

1
00:00:00.120 --> 00:00:02.850
Hey friends. I want to
thank our sponsor. Reagan, are

2
00:00:02.850 --> 00:00:05.490
you struggling to replicate the
bugs and performance issues that

3
00:00:05.490 --> 00:00:08.760
your customers are reporting? Plug
Reagan into your web and

4
00:00:08.760 --> 00:00:12.390
mobile applications right now, and
diagnose problems in minutes rather

5
00:00:12.390 --> 00:00:15.720
than hours. Kiss goodbye. Having
to dig through log files

6
00:00:15.720 --> 00:00:19.380
and relying on frustrated users
to report issues, make your

7
00:00:19.380 --> 00:00:23.040
software developmental life so much
easier. Using Reagan's error, crash,

8
00:00:23.040 --> 00:00:27.150
and performance monitoring tools. Every
software team can create flawless

9
00:00:27.150 --> 00:00:30.540
software experiences for their customers
with Reagan cry it free

10
00:00:30.570 --> 00:00:49.160
today@raygun.com. That's our a Y
G U n.com. Hi, this

11
00:00:49.160 --> 00:00:52.340
is Scott Hanselman, Hansel minutes.
And today I'm talking with

12
00:00:52.340 --> 00:00:58.010
Steven Kurt farmer And now
working on Apollonia across platforms,

13
00:00:58.040 --> 00:01:01.070
XAML framework. Are you doing
this full time in your

14
00:01:01.070 --> 00:01:05.840
fun employment? I well, almost
full time kind of half

15
00:01:05.840 --> 00:01:09.230
time. I it's not really
paying yet, so I've got

16
00:01:09.230 --> 00:01:12.260
a bit of paid work
going on, but yeah, a

17
00:01:12.260 --> 00:01:14.360
lot more than I was
when I had a full

18
00:01:14.360 --> 00:01:20.450
time job, let's say, alright.
Now when people look@avaloniaatavaloniaui.net, they

19
00:01:20.450 --> 00:01:22.670
might say, Oh, well this
is a, this is a

20
00:01:22.670 --> 00:01:26.690
cross platform, WPF, you know,
Steven and friends of have

21
00:01:26.690 --> 00:01:31.550
reimplemented WPF the windows presentation
foundation, but it's, it's different

22
00:01:31.550 --> 00:01:34.700
than that. Yeah, it's a
little bit different. I'll give

23
00:01:34.700 --> 00:01:39.140
you some background originally. I
was trying to reimplement WPF

24
00:01:39.140 --> 00:01:42.260
and make it cross platform,
but I got a few

25
00:01:42.260 --> 00:01:44.510
months into that and I
was like, I'm not having

26
00:01:44.510 --> 00:01:48.170
fun here. I got to,
I think this collection view,

27
00:01:48.200 --> 00:01:52.520
which is if you try
and reverse engineer that class,

28
00:01:52.940 --> 00:01:56.420
you won't have fun. And
so I kind of decided

29
00:01:56.570 --> 00:01:59.030
the world doesn't need another
UI framework, but no one's

30
00:01:59.030 --> 00:02:01.310
going to use this, you
know, it's just, it's a

31
00:02:01.310 --> 00:02:05.540
fun. So I just kind
of started reimplementing it, how

32
00:02:05.540 --> 00:02:08.600
I wanted to do it.
Taking bits from the BPF

33
00:02:08.600 --> 00:02:13.370
bits from UWP bits, from
CSS, which from HTML, but

34
00:02:13.370 --> 00:02:17.750
mostly it's kind of based
on WPF it's broadly similar.

35
00:02:17.960 --> 00:02:21.560
So maybe rather than a
reimplementation, it's a re-imagining of

36
00:02:21.560 --> 00:02:24.800
how one would do it.
Yeah, kind of. I mean,

37
00:02:24.830 --> 00:02:26.720
I wish I could go
back in time and kind

38
00:02:26.720 --> 00:02:30.830
of make changes, some changes
that I made just for

39
00:02:30.830 --> 00:02:34.700
the sake of it, but
then the incompatibilities that with

40
00:02:34.700 --> 00:02:36.590
the BPF, I kind of
wished that I could go

41
00:02:36.590 --> 00:02:39.770
back in time and, and
do those and just follow

42
00:02:39.770 --> 00:02:43.070
the WPF API a little
bit more closely. But as

43
00:02:43.070 --> 00:02:44.540
I said, I didn't know
it was going to be

44
00:02:44.540 --> 00:02:47.900
used when I started with
this. Well, that's the thing

45
00:02:47.900 --> 00:02:49.760
that was all open source
projects. I mean, I don't

46
00:02:49.760 --> 00:02:51.650
think that the people that
made node thought it would

47
00:02:51.650 --> 00:02:56.330
become node, right? You shouldn't
feel bad about that. Yeah.

48
00:02:56.540 --> 00:02:59.890
I mean, nothing else I'd
written before in my life

49
00:02:59.890 --> 00:03:03.130
has Rarely been used by
anyone more than that, any

50
00:03:03.130 --> 00:03:06.420
more than a handful of
people, at least. So, So

51
00:03:06.450 --> 00:03:09.840
WPF itself, that the way
that WPF works is kind

52
00:03:09.840 --> 00:03:13.080
of different than how people
usually expect things to work

53
00:03:13.080 --> 00:03:16.800
like with, with wind forms.
And I'm familiar with, with

54
00:03:16.800 --> 00:03:21.120
wind farms, it's a very
thin layer over the windows

55
00:03:21.120 --> 00:03:24.840
API. So when you say
put a button on a

56
00:03:24.840 --> 00:03:28.500
screen and you know, with
windows forms, it's a real

57
00:03:28.500 --> 00:03:31.200
windows button. They get, it's
just a layer over wind

58
00:03:31.230 --> 00:03:36.720
32, but does WPF and
Avalonia try to hide the

59
00:03:36.720 --> 00:03:39.840
underlying operating system. Is that
a similar thought? Yeah. Well,

60
00:03:39.870 --> 00:03:42.150
I mean, it doesn't try
to hide it so much

61
00:03:42.150 --> 00:03:46.530
as it completely acknowledged that
that the controls are all

62
00:03:46.590 --> 00:03:51.600
client side client drawn. So
they're completely luckless as well,

63
00:03:51.600 --> 00:03:56.310
which means you can provide
your own themes. So it's

64
00:03:56.310 --> 00:04:00.270
not, Oh, S controls at
all is complete it's is

65
00:04:00.270 --> 00:04:05.100
completely user job. I mean,
I asked controls libraries that

66
00:04:05.310 --> 00:04:08.790
expose those controls are useful
as well. There's ETO forms,

67
00:04:08.820 --> 00:04:11.910
which does that really well.
But you know, it depends

68
00:04:11.910 --> 00:04:13.920
what you're looking for. I
think there are valid use

69
00:04:13.920 --> 00:04:18.450
cases for both And, and
at the heart of WPF

70
00:04:18.480 --> 00:04:22.530
is this thing called XAML
and Avalonia uses XAML, but

71
00:04:22.890 --> 00:04:25.350
the way you phrase it
is it's a XAML dialect.

72
00:04:25.350 --> 00:04:29.580
What do you mean by
that? Well, it's, I mean,

73
00:04:29.580 --> 00:04:33.450
WPF is, is animal dialects
as well, right? WPF and

74
00:04:33.450 --> 00:04:37.680
UWP don't use the same
Samuel exactly. The rest, slight

75
00:04:37.710 --> 00:04:42.390
differences with that Zamo is
kind of the low level

76
00:04:42.420 --> 00:04:49.650
mapping of XML onto objects.
So if you have a

77
00:04:49.650 --> 00:04:53.640
different dotnet object model, you
will have a different SAML

78
00:04:53.640 --> 00:04:59.610
dialects, essentially. Okay. So when
you say like an extra

79
00:04:59.610 --> 00:05:04.110
mental element window, and then
within that scoped a child

80
00:05:04.110 --> 00:05:09.540
element button, you are instantiating
an object. Exactly. Yeah. That's,

81
00:05:09.540 --> 00:05:14.190
that's purely what it's doing
at least recently, since people

82
00:05:14.190 --> 00:05:17.310
have started using as started
using the other loan yet

83
00:05:17.340 --> 00:05:21.180
we've tried to follow WPF
a little bit more when

84
00:05:21.180 --> 00:05:23.070
there's no good reason to
break away from it, we

85
00:05:23.070 --> 00:05:27.780
try to follow it. But
yeah, so it's kind of

86
00:05:27.780 --> 00:05:34.200
about 75% the same, I'd
say 25% different. The main

87
00:05:34.200 --> 00:05:36.900
thing that differs is our
styling system, which is more

88
00:05:36.900 --> 00:05:40.290
like CSS. So the intent
isn't that I go and

89
00:05:40.290 --> 00:05:43.950
dig up some ten-year-old WPF
app and then just swap

90
00:05:43.950 --> 00:05:46.020
out some references and hit
F five and then go

91
00:05:46.020 --> 00:05:49.200
look. Yeah. John Lennox, unfortunately.
No, I mean, that would

92
00:05:49.200 --> 00:05:54.510
be really cool, but I
don't think it would ever

93
00:05:54.510 --> 00:05:56.940
be that easy. I mean,
a lot of people have

94
00:05:56.960 --> 00:06:01.490
been asking about making WPF
cross platform and I don't

95
00:06:01.490 --> 00:06:03.800
think it would be that
easy. A lot of WPF

96
00:06:03.800 --> 00:06:08.000
is very tied to win
32. I mean, there is

97
00:06:08.000 --> 00:06:11.690
a possibility that people on
our project have talks about

98
00:06:11.690 --> 00:06:16.280
this, of taking kind of
the Abalonia backend. The stuff

99
00:06:16.310 --> 00:06:20.240
actually draws the stuff on
the screen and opens the

100
00:06:20.240 --> 00:06:24.950
windows, which is cross platform
and porting that to WPF

101
00:06:25.130 --> 00:06:28.910
because the API is very,
very similar. So it might

102
00:06:28.910 --> 00:06:32.210
be possible that we can
actually take part of Apollonia

103
00:06:32.360 --> 00:06:35.240
and put that into WPF
and make the BPF at

104
00:06:35.240 --> 00:06:38.920
least cross platform in some
ways. Let me add, let

105
00:06:38.920 --> 00:06:40.570
me back up a little
bit and ask you this.

106
00:06:40.570 --> 00:06:45.400
If I were to write
a calculator in WPF and

107
00:06:45.400 --> 00:06:48.430
then write the same calculator
in Avalonia and I put

108
00:06:48.430 --> 00:06:50.920
them on the screen, let's
just start with windows. Would

109
00:06:50.920 --> 00:06:56.620
they look pretty much? Yeah,
kind of similar. Our default

110
00:06:56.620 --> 00:06:59.050
theme looks more like you
to be a VP at

111
00:06:59.050 --> 00:07:02.230
the moment, whereas to BPSD
for theme is kind of

112
00:07:02.260 --> 00:07:06.730
windows this dish. Okay. So
then Avalonia might look a

113
00:07:06.730 --> 00:07:10.330
little bit more modern. Yeah.
A little bit more mineral

114
00:07:10.390 --> 00:07:16.300
like UWP. Okay. EWP of
course the universal windows platform

115
00:07:16.750 --> 00:07:18.400
and it's kind of confusing
to people. How would you

116
00:07:18.400 --> 00:07:20.650
explain all of that? You've
got windows forms. You've got

117
00:07:20.650 --> 00:07:23.350
WPF, you've got UWP, but
ultimately it's all just windows.

118
00:07:23.920 --> 00:07:26.380
This is all just different
ways to put buttons on

119
00:07:26.380 --> 00:07:31.240
screens. Yeah. Like WinForms was
like a follow on from

120
00:07:31.270 --> 00:07:36.160
VB VB sex. And then
they threw everything away and

121
00:07:36.160 --> 00:07:40.570
made the BPF. And then
they threw most about half

122
00:07:40.570 --> 00:07:44.230
of WPA PF away and
made silver light. And then

123
00:07:44.230 --> 00:07:47.650
they threw several lights away
and kind of took most

124
00:07:47.650 --> 00:07:51.370
of silver light and it
turned into w UWP, but

125
00:07:51.370 --> 00:07:54.730
they're all incompatible in different
ways, which is, I guess,

126
00:07:54.730 --> 00:07:56.890
one of the reasons I
don't feel that bad. The

127
00:07:56.890 --> 00:08:01.480
other loan year isn't compatible
with Microsoft summer frameworks. Cause

128
00:08:01.480 --> 00:08:04.960
they're all in compatible with
each other anyway. So Original

129
00:08:04.960 --> 00:08:09.010
point, these are XAML dialects.
So well we can say,

130
00:08:09.010 --> 00:08:10.960
well, this was thrown away
and that was thrown away.

131
00:08:11.560 --> 00:08:14.800
XAML has been there since
WPF first started so that

132
00:08:14.860 --> 00:08:18.400
I assume a comfortable familiarity
with it would be like

133
00:08:18.580 --> 00:08:21.520
speaking Spanish and going to
Italy or going to Portugal

134
00:08:21.520 --> 00:08:23.500
and going, yeah, this isn't
the language I'm used to,

135
00:08:23.500 --> 00:08:27.490
but I can move. Yeah.
Yeah. Something like that. I'd

136
00:08:27.490 --> 00:08:31.780
say, I'd say it's, you
know, living in Italy, I'd

137
00:08:31.780 --> 00:08:35.590
say I go to Spain.
I'd say that it's a

138
00:08:35.590 --> 00:08:37.630
little bit more than that.
You know, you can understand

139
00:08:37.630 --> 00:08:41.890
more of Avalonia knowing WPF
than you could knowing Italian

140
00:08:41.890 --> 00:08:43.570
and going, Oh, that's good
to know. Okay. I have

141
00:08:43.570 --> 00:08:45.880
a Rania is easier than
Italian. So you heard it.

142
00:08:48.160 --> 00:08:53.290
Anything's easy. Of course I'm
going to get letters from

143
00:08:53.290 --> 00:08:56.850
our Italian listeners, but that's
good. Okay. So then if

144
00:08:56.850 --> 00:08:59.520
it's so familiarity with WPF
for UWP is going to

145
00:08:59.520 --> 00:09:01.620
make someone feel comfortable in
Avalonia you're gonna be able

146
00:09:01.620 --> 00:09:03.750
to pick it right up
and fit and you've even

147
00:09:03.750 --> 00:09:06.720
got great documentation where you
say, you know, there's, there's

148
00:09:06.720 --> 00:09:10.320
a doc, I'm looking at
Apollonia for WPF developers where

149
00:09:10.320 --> 00:09:13.170
you literally say, all right,
welcome. You're a WPF developer.

150
00:09:13.260 --> 00:09:17.750
Here's what's Right. Yeah. I
wouldn't say documentation's great. I

151
00:09:17.750 --> 00:09:20.120
mean, that's the number one
complaint that you could give

152
00:09:20.120 --> 00:09:23.870
us that, you know, we're
a purely open source projects.

153
00:09:24.590 --> 00:09:27.590
It's almost always the case
that your documentation isn't the

154
00:09:27.590 --> 00:09:31.010
best, but yeah, we do
have documentation from move from

155
00:09:31.010 --> 00:09:35.330
moving from w U WPF
to Abalonia. Yeah, No, I

156
00:09:35.330 --> 00:09:38.000
think as with most open
source projects, you're too modest.

157
00:09:38.030 --> 00:09:39.860
I think your documentation is
good, but again, that's an

158
00:09:39.860 --> 00:09:43.520
opportunity for anyone who's listening,
who is excited about across

159
00:09:43.520 --> 00:09:46.910
platform UI framework to get,
maybe get involved and help

160
00:09:46.910 --> 00:09:51.710
out with the document. Please,
please, please. You know, we've

161
00:09:51.710 --> 00:09:54.140
got quite a few contributors
now. I'm very happy with

162
00:09:54.140 --> 00:09:56.390
the amount of contributors we
have and then things are

163
00:09:56.390 --> 00:10:00.200
starting to move really fast,
but no one wants to

164
00:10:00.200 --> 00:10:04.430
do documentation Ironic because it's
the, it's like the core

165
00:10:04.430 --> 00:10:06.710
thing. If you want your
project to be successful, you

166
00:10:06.710 --> 00:10:09.560
need good docs. And you
know, if you're maybe not

167
00:10:09.590 --> 00:10:12.050
a hardcore coder, but you're
listening to the show here

168
00:10:12.050 --> 00:10:14.180
and you want to have
not only on your, you

169
00:10:14.180 --> 00:10:17.030
know, on your resume, but
on your GitHub contributions, some

170
00:10:17.030 --> 00:10:20.210
really interesting work, it can
be as simple as fixing

171
00:10:20.210 --> 00:10:23.630
a broken image link or
fixing spelling or making sure

172
00:10:23.630 --> 00:10:28.190
that the samples, Right. Yeah.
I mean, documentation is definitely

173
00:10:28.190 --> 00:10:30.530
the place where you can
have the most impact right

174
00:10:30.530 --> 00:10:33.500
now. I mean, I've spent
the last two days, I

175
00:10:33.500 --> 00:10:36.950
think, trying to improve our
website and the documentation a

176
00:10:36.950 --> 00:10:40.280
little bit, but every one
of those days I'm thinking,

177
00:10:40.280 --> 00:10:43.940
but I could be fixing
books. Good point. Well, because

178
00:10:43.940 --> 00:10:46.220
you want to focus on
what's important. So there's a,

179
00:10:46.310 --> 00:10:48.650
there's a formal call. You
heard it here first on

180
00:10:48.650 --> 00:10:52.010
Hanselman it's Avalonia would definitely
love help with their docs.

181
00:10:53.570 --> 00:10:56.810
Okay. So it's a, XAML
dialect, it'll feel familiar for

182
00:10:56.810 --> 00:11:00.620
anyone who's using WPF or
UWP or Xamarin forms and

183
00:11:00.620 --> 00:11:04.790
you support windows, Linux and
OSX. And is it true

184
00:11:04.790 --> 00:11:08.570
that you're actually looking for
even mobile service? Yeah. Windows,

185
00:11:08.570 --> 00:11:11.780
Linux, and they'll say, Oh,
ASX, excuse me. Are the

186
00:11:11.780 --> 00:11:17.210
main platforms platforms we support.
We also have very, very

187
00:11:17.210 --> 00:11:22.580
experimental support for iOS and
Android, but that's kind of

188
00:11:22.850 --> 00:11:25.670
not really maintained that well,
and it, it kind of

189
00:11:25.670 --> 00:11:28.850
needs things that we're not
ready for at the moment

190
00:11:28.850 --> 00:11:31.430
as well. So that's kind
of, kind of be a

191
00:11:31.490 --> 00:11:36.050
post one point, not feature,
really mobile support, but yeah,

192
00:11:36.080 --> 00:11:39.950
our core platforms are windows,
Linux, and ASX, which should

193
00:11:39.950 --> 00:11:43.880
work reasonably well. Okay. So
this is an opportunity for

194
00:11:43.880 --> 00:11:47.840
someone to create a desktop
UI that works anywhere. And

195
00:11:47.900 --> 00:11:51.590
there's something interesting. I'm noticing
it says four dotnet framework.net

196
00:11:51.620 --> 00:11:56.350
core and mano, or you're
basically runtime agnostic. Any of

197
00:11:56.350 --> 00:12:00.270
the dot nets can run
Avalonia Yeah. Where a.net standard

198
00:12:00.270 --> 00:12:06.600
library.net standard 2.0. So That's
pretty cool. Now, how does

199
00:12:06.600 --> 00:12:09.150
it talk to a backend,
like you said, it is

200
00:12:09.450 --> 00:12:12.210
a, what we call owner
draw, you draw the buttons

201
00:12:12.210 --> 00:12:16.410
yourself, but you have wind
32, you know, windowing, backends,

202
00:12:16.710 --> 00:12:20.280
GTK four for Linux and
mano Mac. How do these

203
00:12:20.280 --> 00:12:22.200
things plug in? Is this
like when I write a,

204
00:12:22.620 --> 00:12:25.380
a standard library that talks
to any database and I

205
00:12:25.380 --> 00:12:27.360
just plug in a database
driver, I'm just plugging in.

206
00:12:28.770 --> 00:12:31.620
Yeah. I think the ducks
you're eating are actually a

207
00:12:31.620 --> 00:12:35.340
little bit out of date,
but we have essentially, there

208
00:12:35.340 --> 00:12:38.040
were two types of backends
who are windowing backend. There's

209
00:12:38.040 --> 00:12:40.950
a window in backend and
the drawing Mackenz for the

210
00:12:40.950 --> 00:12:45.060
wind going back ends. We
have wind 32, we have

211
00:12:45.450 --> 00:12:51.600
a native, our S X
library that's implemented via comm.

212
00:12:51.600 --> 00:12:56.670
And then there's a C
sharp C sharp native thing.

213
00:12:56.700 --> 00:12:58.380
I don't know. I've not
been involved in that much.

214
00:12:58.380 --> 00:13:04.050
I don't have a Mac.
And then there is an

215
00:13:04.050 --> 00:13:08.250
exit 11 back end. So
those are the windowing black

216
00:13:08.250 --> 00:13:11.970
backends. We used to go
via GTK, but we found

217
00:13:11.970 --> 00:13:15.060
that that caused problems. And
because we just basically need

218
00:13:15.060 --> 00:13:17.880
to show a window, it
was easier just to implement

219
00:13:17.880 --> 00:13:21.720
these kinds of things direct
on the platform. And there's

220
00:13:21.720 --> 00:13:25.350
also talk of there being
a wasteland backend. What is

221
00:13:25.350 --> 00:13:30.000
that? Well, Wayland is kind
of the successor two X

222
00:13:30.000 --> 00:13:36.570
11. Mm it's. Still, I
think mostly in development. I

223
00:13:37.050 --> 00:13:40.110
not used it that much,
but yeah. I think it's

224
00:13:40.110 --> 00:13:42.900
intended to be the kind
of successor two X 11,

225
00:13:43.140 --> 00:13:44.970
but we don't have a
backend for that at the

226
00:13:44.970 --> 00:13:50.340
moment. So I'm, Wayland's our
skirt really actually brothers X,

227
00:13:50.340 --> 00:13:55.410
11 apps. Interesting. That, that
I mentioned GTK three and

228
00:13:55.410 --> 00:13:56.850
you're like, well not, we're
not using that. We're trying.

229
00:13:56.850 --> 00:13:59.490
Excellent. And then you're saying,
we're trying Wayland what's it

230
00:13:59.490 --> 00:14:01.800
sounds like it's very nicely
factored that you can in

231
00:14:01.800 --> 00:14:04.410
fact do this. You're swapping
out when doing back ends

232
00:14:05.070 --> 00:14:08.580
to pick the right one
for the, Yeah, exactly. Yeah.

233
00:14:08.610 --> 00:14:11.920
It was written with that
in mind when doing back

234
00:14:11.920 --> 00:14:14.600
end, this is not actually
that big, you know, you

235
00:14:14.610 --> 00:14:18.210
just need things to show
a window, notify you when

236
00:14:18.210 --> 00:14:22.710
you're resizing it. So it's
not actually that big, but

237
00:14:22.710 --> 00:14:25.110
then there's, there's the other
part of it, which is

238
00:14:25.110 --> 00:14:30.000
the rendering mechanisms. So the
rendering backend, we currently have

239
00:14:30.000 --> 00:14:34.410
two, the original one was
the original ones were direct

240
00:14:34.410 --> 00:14:40.170
today on windows and Cairo
on Linux and other platforms.

241
00:14:40.890 --> 00:14:44.880
But we've actually moved away
from that. And I think

242
00:14:44.880 --> 00:14:47.070
we're going to have just
one rendering backend, which is

243
00:14:47.070 --> 00:14:51.800
going to be skier that's
from Google. Yeah. Yeah. Because

244
00:14:51.800 --> 00:14:55.640
scare is cross platform. Anyway,
so, but we, we used

245
00:14:55.640 --> 00:14:58.700
to have this direct to
deep backend, but it was

246
00:14:58.700 --> 00:15:04.010
using sharp the app, which
is just now gone into

247
00:15:04.340 --> 00:15:07.250
maintenance mode. It's no longer
going to be developed. So

248
00:15:07.670 --> 00:15:09.830
where are we thinking whether
we want to keep that

249
00:15:09.830 --> 00:15:14.860
backend around on a, on
supported library, A big thank

250
00:15:14.860 --> 00:15:17.320
you to our sponsors because
they make the show possible.

251
00:15:17.380 --> 00:15:19.270
And I hope that you
support them the way they

252
00:15:19.270 --> 00:15:22.780
support us progress. Software is
the creator of the most

253
00:15:22.780 --> 00:15:26.020
comprehensive developer toolkit for building
modern apps on the market.

254
00:15:26.020 --> 00:15:30.880
Today Tellerik dev craft with
more than 1100 telerik.net and

255
00:15:30.880 --> 00:15:34.480
Kendo, UI JavaScript components and
controls. You can easily build

256
00:15:34.480 --> 00:15:37.840
modern high-performance web mobile and
desktop apps as well as

257
00:15:37.840 --> 00:15:42.490
chatbots. The tools that also
includes reporting solutions, automated testing,

258
00:15:42.490 --> 00:15:45.250
and productivity tools, and comes
with a range of support

259
00:15:45.250 --> 00:15:48.790
options. New this year is
a free online training program

260
00:15:48.790 --> 00:15:52.570
for all licensed holders with
this alongside thousands of demos

261
00:15:52.570 --> 00:15:56.230
and source code available, comprehensive
documentation and a full assortment

262
00:15:56.230 --> 00:15:58.660
of visual studio templates, you'll
be up and running with

263
00:15:58.660 --> 00:16:01.840
the progress Tellerik and Kendall
UI controls in no time,

264
00:16:02.380 --> 00:16:08.380
download a free 30 day
trial today at tellerik.com/hanselman that's

265
00:16:08.380 --> 00:16:13.990
T E L E R
I k.com/hanselman. Okay. So then

266
00:16:13.990 --> 00:16:16.720
if you have a windowing
backend that creates the window

267
00:16:16.720 --> 00:16:19.090
and tells you when it's
being resized, it basically manages

268
00:16:19.090 --> 00:16:21.700
the top level window in
any pop up windows. And

269
00:16:21.700 --> 00:16:24.700
then you have the rendering
engine, which is the, what's

270
00:16:24.700 --> 00:16:27.040
the best way to get
dots on this thing. You

271
00:16:27.040 --> 00:16:29.080
know, like, are we, are
we a game? Are we

272
00:16:29.080 --> 00:16:31.630
a, you know, are we
using, you know, direct 2d?

273
00:16:31.630 --> 00:16:35.020
Are we using ski? We're
using whatever there's things to

274
00:16:35.020 --> 00:16:40.060
think about. Like now DPI
and 4k displays. There's the

275
00:16:40.060 --> 00:16:45.070
scaling of that thing. There's
also accessibility. When you own

276
00:16:45.070 --> 00:16:48.550
or draw a button from
the perspective of the operating

277
00:16:48.550 --> 00:16:51.400
system or a screen reader,
it might not exist. It

278
00:16:51.400 --> 00:16:53.980
might be invisible. How do
you solve that and put

279
00:16:53.980 --> 00:16:55.810
out by invisible? I mean,
it doesn't exist in a

280
00:16:55.810 --> 00:16:59.500
Dom that can be access
programming. Exactly. Yeah. Acts a

281
00:16:59.500 --> 00:17:02.950
bit. Accessibility is probably the
biggest feature that we're missing

282
00:17:02.950 --> 00:17:06.340
before we get to one
point, Sarah, I'm assuming that

283
00:17:06.340 --> 00:17:10.270
will, I mean, it's, it's
needed, it's definitely needed, but

284
00:17:10.420 --> 00:17:14.800
basically none of us working
on the core project right

285
00:17:14.800 --> 00:17:16.870
now know much about it.
So we're going to have

286
00:17:16.870 --> 00:17:19.540
to learn about it or
wait for someone to come

287
00:17:19.540 --> 00:17:23.050
in and be able to
implement that for us. There

288
00:17:23.050 --> 00:17:27.430
you go. There's another exciting
opportunity. See, every one of

289
00:17:27.430 --> 00:17:29.530
these things is an opportunity
for someone in open source

290
00:17:29.530 --> 00:17:33.070
to jump in. So you
would need to implement accessibility,

291
00:17:33.070 --> 00:17:37.630
API APIs, and basically present
a Dom to windows at

292
00:17:37.630 --> 00:17:40.810
document object model to windows
that that expressed what was

293
00:17:40.810 --> 00:17:44.260
on the, The screen. So
that yeah. Someone who couldn't

294
00:17:44.260 --> 00:17:47.920
see could see it. Yeah.
And then at Sandow SX,

295
00:17:47.980 --> 00:17:50.460
I don't know that there
may well be a cross

296
00:17:50.460 --> 00:17:56.010
platform framework for doing that.
I've no idea. Okay. Yeah,

297
00:17:56.190 --> 00:18:00.770
we do definitely need that.
How does Avalonia though compare

298
00:18:00.830 --> 00:18:04.070
to something like electron, like
if someone's listening and they're,

299
00:18:04.070 --> 00:18:05.750
they've made it as far
and they're like, yeah, but

300
00:18:05.750 --> 00:18:08.180
why don't I just use
electron other than the fact

301
00:18:08.180 --> 00:18:11.180
that it's kind of big
and has a lot of

302
00:18:11.240 --> 00:18:14.420
baggage Just that comes along
with it, right? Yeah. I

303
00:18:14.420 --> 00:18:16.630
mean, I'm actually quite a
big fan of electron. I

304
00:18:16.640 --> 00:18:19.010
think it's a great technology.
I know there are a

305
00:18:19.010 --> 00:18:22.460
lot of people who don't
feel that way, but the

306
00:18:22.460 --> 00:18:27.080
main difference is it's running
on.net and you have access

307
00:18:27.080 --> 00:18:31.910
to everything that.net has access
to. So with running on

308
00:18:31.910 --> 00:18:34.190
the electron, you might, you
have to use, you know,

309
00:18:34.190 --> 00:18:36.260
you've got the front end
and then the backend that's

310
00:18:36.260 --> 00:18:38.200
in nodes. And then you
might have to write libraries,

311
00:18:38.200 --> 00:18:42.860
sites and interface with the
operating system. You might just

312
00:18:42.860 --> 00:18:46.100
want to write C-sharp. It
does get a little bit

313
00:18:46.160 --> 00:18:50.030
messy if it's a big,
a big hybrid. Yeah, exactly.

314
00:18:50.090 --> 00:18:54.290
Yeah. But you know, I
like electron and people say

315
00:18:54.290 --> 00:18:57.170
it's, you know, the binary
is a huge and everything,

316
00:18:57.170 --> 00:19:01.040
but I think they're just
lacking a couple of apps.

317
00:19:01.040 --> 00:19:03.020
If you look at, get
her best stop, for example,

318
00:19:03.230 --> 00:19:07.010
which it's quite, it doesn't
use that much memory. So

319
00:19:07.820 --> 00:19:10.970
I think electron definitely has
a place, but basically I'd

320
00:19:10.970 --> 00:19:13.850
say you would use other
lonelier you when you want

321
00:19:13.850 --> 00:19:16.730
it to make a cross
plot farm up in C-sharp

322
00:19:16.730 --> 00:19:21.350
ensemble in Brothen in JS
and HTML. Okay. So if

323
00:19:21.350 --> 00:19:24.560
you're unapologetically a dotnet person
and Avalonia would be your,

324
00:19:24.950 --> 00:19:27.350
your best bet for a
cross platform app and there's

325
00:19:27.350 --> 00:19:29.690
room, there's more than enough
room. It's not a competition

326
00:19:29.690 --> 00:19:32.570
in this case. No, I
don't see it as a

327
00:19:32.570 --> 00:19:37.430
competition. No. I think there's
room for different frameworks and

328
00:19:37.430 --> 00:19:42.800
different languages. Definitely. There are
other frameworks there's like platform,

329
00:19:42.830 --> 00:19:47.330
is it platform UNO? And
I think that Frank Kruger

330
00:19:47.330 --> 00:19:50.720
had a thing called we,
there seem to be other,

331
00:19:50.750 --> 00:19:54.050
lots of people are thinking
about what would Jamel dialects

332
00:19:54.080 --> 00:19:55.880
look like and how would
we get buttons on it?

333
00:19:55.910 --> 00:20:00.740
Screens. Yeah. Platform. It was
an interesting one because it

334
00:20:00.740 --> 00:20:04.190
actually targets the web, which
is something that we don't

335
00:20:04.250 --> 00:20:07.790
do we could potentially do
with wisdom, but it's something

336
00:20:07.790 --> 00:20:10.370
that we're not targeting at
the moment. And people are

337
00:20:10.700 --> 00:20:13.550
often asking us when we're
going to do it. So

338
00:20:13.550 --> 00:20:17.270
that's an interesting one, but
that doesn't target desktop applications.

339
00:20:17.330 --> 00:20:19.590
You know, it's not, it
doesn't create an Exco or

340
00:20:19.590 --> 00:20:21.800
a DLL that you run
on your machine, which is

341
00:20:21.800 --> 00:20:24.590
what we're doing. So they
have a thing that takes

342
00:20:24.590 --> 00:20:27.890
it's basically they call it
a, you know, UWP bridge

343
00:20:28.370 --> 00:20:32.120
so they can basically bridge
it into WebAssembly. So they're

344
00:20:32.120 --> 00:20:35.780
kind of betting on, on
WebAssembly and then you're writing

345
00:20:35.780 --> 00:20:40.490
XAML and that's presenting itself
in, in the, in the,

346
00:20:40.490 --> 00:20:44.510
in the runtime and then
drawing with canvas, which is

347
00:20:44.510 --> 00:20:48.760
different from something like blazer,
which the Dom, the Dom

348
00:20:48.760 --> 00:20:52.450
itself to draw. Exactly. Yeah.
It's a really interesting space

349
00:20:52.450 --> 00:20:54.730
right now. There's a lot
of stuff going on and

350
00:20:54.850 --> 00:20:56.110
I guess none of us
would, it would have been

351
00:20:56.110 --> 00:21:00.220
possible if, if Microsoft had
been slapping open source projects

352
00:21:00.490 --> 00:21:03.190
left and right. You know,
like open sourcing stuff must

353
00:21:03.190 --> 00:21:05.610
have made it easier for
you. Yeah. I don't think

354
00:21:05.790 --> 00:21:08.580
I've been sourcing thought that
core was definitely a big

355
00:21:08.580 --> 00:21:10.980
step towards it, but I
don't think we're actually using

356
00:21:10.980 --> 00:21:16.860
much Microsoft open source technology
yet when I'm, when more

357
00:21:16.860 --> 00:21:20.250
of WPF is open sourced,
we will definitely be able

358
00:21:20.250 --> 00:21:22.200
to take parts of that.
And I would be very

359
00:21:22.200 --> 00:21:25.950
happy to be able to
take parts of that. But

360
00:21:26.310 --> 00:21:28.890
I think, you know, that
the XAML engine we're using

361
00:21:28.890 --> 00:21:32.430
is portable that XAML, which
is a reimplementation of systems.

362
00:21:32.430 --> 00:21:37.380
I'm all. Yeah. I don't
think other than the actual.net,

363
00:21:37.410 --> 00:21:40.590
I don't think we're using
much Microsoft technology. Yeah, I

364
00:21:40.590 --> 00:21:43.410
see. So the core runtime
being open source was helpful.

365
00:21:44.250 --> 00:21:48.240
Core motto. Of course you
have support, but you're not

366
00:21:48.240 --> 00:21:52.110
using much of like the
recent open sourcing of system

367
00:21:52.110 --> 00:21:55.980
dot XAML you have your
own. Yeah. And someone's actually

368
00:21:55.980 --> 00:21:59.910
working on the XAML compiler,
which I'm Nikita on our

369
00:21:59.910 --> 00:22:03.360
projects is actually working on
a Zimmer compiler, which will

370
00:22:03.360 --> 00:22:07.170
hopefully means that Zimmer will
be compiled down so ill.

371
00:22:07.350 --> 00:22:10.440
So it will be, it
would just run as there

372
00:22:10.440 --> 00:22:14.100
will be no passing of
XML XAML it would just

373
00:22:14.340 --> 00:22:16.680
compile down to IRL and
you'll be able to burn.

374
00:22:17.160 --> 00:22:20.460
Oh, wow. Would that help
WPF? Is that something for

375
00:22:20.460 --> 00:22:22.410
an open source that could
then go back over it

376
00:22:22.410 --> 00:22:26.430
and make better? This is
open source and I guess,

377
00:22:26.430 --> 00:22:28.470
I think I'm pretty sure
it could be used by

378
00:22:28.470 --> 00:22:31.200
WPF itself as well. Yeah.
So, you know, we're all

379
00:22:31.200 --> 00:22:33.930
about sharing. Although all of
these things being open source

380
00:22:33.930 --> 00:22:39.210
mean everything improves. And you
know, you were saying earlier

381
00:22:39.210 --> 00:22:41.580
that there's a lot of
movement in this space and

382
00:22:41.580 --> 00:22:43.770
it feels like there was
no movement in this space

383
00:22:43.770 --> 00:22:45.960
for a long time. So
it's really good to see

384
00:22:45.960 --> 00:22:50.070
a lot of movement rather
than, rather than seeing as

385
00:22:50.100 --> 00:22:55.470
you know, like a as
competition. I think it's great

386
00:22:55.470 --> 00:22:57.990
that there's things are starting
to move here again. Yeah.

387
00:22:58.020 --> 00:23:02.370
I've heard the term. Coopertition
where we're all having fun,

388
00:23:02.400 --> 00:23:05.750
cooperating and competing at the
same time, but it's not

389
00:23:05.760 --> 00:23:08.040
a kind of a violent
competition as it may have

390
00:23:08.040 --> 00:23:10.800
been In the past. Yeah.
Yeah. I've never heard that

391
00:23:10.800 --> 00:23:13.950
term, but maybe I'll start
using it. So, so let

392
00:23:13.950 --> 00:23:16.560
me ask you this, someone's
listening and they're thinking, Hey,

393
00:23:16.560 --> 00:23:20.100
I want to rewrite, you
know, TurboTax or QuickBooks or,

394
00:23:20.340 --> 00:23:24.780
you know, not Microsoft word,
but Hanselman word. And you

395
00:23:24.780 --> 00:23:27.360
know, I want to bet
my company on Avalonia is

396
00:23:27.360 --> 00:23:30.210
this, is this production ready?
Are people shipping apps with

397
00:23:30.210 --> 00:23:32.970
this? Or am I taking
a risk? You're taking a

398
00:23:32.970 --> 00:23:35.850
risk. I mean, it's not
one point Sarah, yet it

399
00:23:35.850 --> 00:23:40.770
has currently no commercial backing.
It's purely volunteers. So, you

400
00:23:40.770 --> 00:23:42.690
know, you're taking a risk,
but then you're taking a

401
00:23:42.690 --> 00:23:46.490
risk adopting any technology risk
using node, I would suppose.

402
00:23:46.490 --> 00:23:49.880
I mean, companies that support
it. So maybe you shouldn't

403
00:23:49.880 --> 00:23:52.870
sell yourself short. Yeah. I
mean, people took a risk

404
00:23:54.100 --> 00:23:58.750
writing the programs on Silverlight,
which was discontinued, you know,

405
00:23:58.810 --> 00:24:03.460
so you're taking a risk.
Yep. And we're not 1.0

406
00:24:03.460 --> 00:24:07.090
yet. So there will be
breaking changes. We cut. We

407
00:24:07.090 --> 00:24:10.900
tried to keep the breaking
changes reasonably small, but there

408
00:24:10.900 --> 00:24:15.550
are people writing applications on
it and they're going pretty

409
00:24:15.550 --> 00:24:18.670
well. I'm, I'm constantly surprised
by the things people have

410
00:24:18.670 --> 00:24:21.040
managed to do with it
because you know, for it

411
00:24:21.040 --> 00:24:24.760
to go, I was obviously
there, I wrote it the

412
00:24:24.760 --> 00:24:27.690
first commits, you know, which
was like, wow, I've got,

413
00:24:27.820 --> 00:24:31.270
I've got a rectangle on
the screen to see it

414
00:24:31.270 --> 00:24:34.120
go from being pleased to
have a rectangle on the

415
00:24:34.120 --> 00:24:37.240
screen. So two people actually,
you know, brighten full applications,

416
00:24:37.240 --> 00:24:41.170
ideas, drawing packages on that
is pretty amazing. How would

417
00:24:41.170 --> 00:24:43.300
I know if I like
maybe I have an Avalonia

418
00:24:43.300 --> 00:24:44.980
app on my machine? I
didn't even know it. Is

419
00:24:44.980 --> 00:24:47.080
there a particular favorite or
an app you can mention

420
00:24:47.080 --> 00:24:50.890
that that's using it? Well,
I think probably the most

421
00:24:51.640 --> 00:24:55.000
well known one will be
wasabi wallet, which is a

422
00:24:55.030 --> 00:25:00.280
Bitcoin wallet. That's doing pretty
well. I think others are

423
00:25:00.310 --> 00:25:04.570
other lung studio, which is
an Ida then there's call

424
00:25:04.570 --> 00:25:08.890
to D which is a
drawing package. And I'm sure

425
00:25:08.920 --> 00:25:12.130
I know I'm forgetting some
people. I'm sorry, everyone. I'm

426
00:25:12.130 --> 00:25:16.600
sorry. No, no worries at
all. I'm sure there are

427
00:25:16.600 --> 00:25:18.910
others as well. I know
there are people working on

428
00:25:18.910 --> 00:25:22.270
a kind of, I am
client. There are definitely others

429
00:25:22.270 --> 00:25:25.540
as well. Hopefully you wouldn't
know if that it was

430
00:25:25.540 --> 00:25:27.940
enough alone, the application. I
mean, that would be the

431
00:25:27.940 --> 00:25:30.130
idea, right? Like I think
that would be a time

432
00:25:30.130 --> 00:25:32.860
when you could tell, you
could kind of smell electron

433
00:25:32.890 --> 00:25:35.140
and you'd go, Oh, this
just feels weird. This electron

434
00:25:35.740 --> 00:25:39.310
I'm actually looking at wasabi
wallet right now. I went

435
00:25:39.310 --> 00:25:42.100
through the install, pops right
up. It looks like an

436
00:25:42.100 --> 00:25:45.310
app. It's a very attractive
app. I couldn't really tell

437
00:25:45.310 --> 00:25:47.470
it was anything other than
a windows app. Cause I'm

438
00:25:47.470 --> 00:25:51.730
on windows. It is responsive
and fast and operates about

439
00:25:51.850 --> 00:25:53.590
as an app should, which
is exactly what you would

440
00:25:53.590 --> 00:25:56.080
want. And I, I assume
it looks exactly the same

441
00:25:56.080 --> 00:25:58.960
on a Mac or on
a linear. It should. Yeah,

442
00:25:59.200 --> 00:26:02.590
because yeah, I mean, there
are a few things that

443
00:26:02.590 --> 00:26:04.060
give it away at the
moment. Like I say, we're

444
00:26:04.060 --> 00:26:05.950
still in beta and we're
not feature complete and we

445
00:26:05.950 --> 00:26:09.490
have books. And so there
are certain things that give

446
00:26:09.730 --> 00:26:12.400
as a way at the
moment. But the point that

447
00:26:12.400 --> 00:26:14.920
we hoped to move towards
is that you won't be

448
00:26:14.920 --> 00:26:17.170
able to tell, you know,
it will be just a

449
00:26:17.170 --> 00:26:20.350
framework. You can make it
look. W w we'd like

450
00:26:20.350 --> 00:26:23.680
to have, you know, an
OSX theme with a boon

451
00:26:23.680 --> 00:26:25.960
to theme. So it could
even look different on different

452
00:26:25.960 --> 00:26:28.660
platforms if you wanted to.
That would be really nice.

453
00:26:29.380 --> 00:26:32.110
Yeah. It's just getting there.
Interesting. Okay. That reminds me

454
00:26:32.110 --> 00:26:35.650
of like my time doing
cross-platform UI in Java. The

455
00:26:35.650 --> 00:26:37.810
thing about Java, when you
tried to write an app

456
00:26:37.810 --> 00:26:40.870
that ran anywhere, is it
ended up looking like Java

457
00:26:40.900 --> 00:26:44.220
everywhere, you know, or if
you wrote something in Delphi,

458
00:26:44.250 --> 00:26:46.980
like you find that certain
button with the big green

459
00:26:48.180 --> 00:26:51.240
checkbox and you're like, Oh,
I seen that before. That's

460
00:26:51.240 --> 00:26:55.130
fine. Yeah. Which is actually
getting more common now with

461
00:26:55.130 --> 00:26:58.940
things using more things using
Electrum and not using the

462
00:26:58.940 --> 00:27:02.390
native windows toolkit, it's kind
of more usual that an

463
00:27:02.390 --> 00:27:06.050
app will look the same
across platforms then looking like

464
00:27:06.050 --> 00:27:08.510
it fits on the platform.
Yeah. It seems to be

465
00:27:08.510 --> 00:27:11.450
a philosophy there that some
people feel that you should,

466
00:27:11.810 --> 00:27:14.330
you know, look as much
like a native app as

467
00:27:14.330 --> 00:27:17.270
possible, and other ones have
their own style and they

468
00:27:17.270 --> 00:27:21.440
are kind of unapologetically their
own style. Cause if you

469
00:27:21.440 --> 00:27:24.560
have a visual style for
your, for your brand, for

470
00:27:24.560 --> 00:27:27.950
your, for your company or
whatever, there's no reason that

471
00:27:27.950 --> 00:27:30.260
your app can't look like
a website or use the

472
00:27:30.260 --> 00:27:33.380
same fonts and colors that,
that your users are using.

473
00:27:34.460 --> 00:27:36.620
Yeah, exactly. I think it
depends on where you're coming

474
00:27:36.620 --> 00:27:38.570
from, whether you're coming from
the web or whether you're

475
00:27:38.570 --> 00:27:42.290
coming from, you know, like
I'm writing separate applications for

476
00:27:42.290 --> 00:27:45.490
each platform. And like you
said, the sea at the

477
00:27:45.580 --> 00:27:48.170
styles, the way that you
do styles and Avalonia is

478
00:27:48.170 --> 00:27:52.070
different from WPF and it
kind of borrows concepts from

479
00:27:52.070 --> 00:27:54.380
CSS. So I suppose that
people could make whatever style,

480
00:27:54.380 --> 00:27:57.470
Just make them happy. Yeah.
I mean, our method of

481
00:27:57.500 --> 00:28:02.450
theming controls is broadly the
same as WPF and UWP

482
00:28:02.510 --> 00:28:07.760
in that we use control
templates. It's broadly the same,

483
00:28:07.760 --> 00:28:10.630
but our styles are a
little bit more powerful. I

484
00:28:10.640 --> 00:28:14.510
always found the styling system
in WP F to be

485
00:28:14.510 --> 00:28:18.050
a little lacking. So we
kind of took some ideas

486
00:28:18.050 --> 00:28:21.470
from CSS there, hopefully the
good ideas from CSS and

487
00:28:21.470 --> 00:28:23.180
not the ones that make
you pull your hair out,

488
00:28:23.630 --> 00:28:27.380
but take the, hopefully a
few ideas from CSS that

489
00:28:27.380 --> 00:28:30.980
makes life a little bit
diff a little bit easier

490
00:28:31.130 --> 00:28:34.430
for that. I was noticing
also that you've got Avalonia

491
00:28:34.430 --> 00:28:37.460
for visual studio. So you've
got project templates and a

492
00:28:37.460 --> 00:28:42.020
UI designer, and it's currently
set to work in 2017

493
00:28:42.020 --> 00:28:45.410
and 2019 versions of visual
studio. I assume that that

494
00:28:45.410 --> 00:28:47.570
is the best way to
get started is to install

495
00:28:47.570 --> 00:28:53.180
that, that plugin from the
visual studio. Yeah, definitely. That's

496
00:28:53.180 --> 00:28:55.520
the best way to get
started. We, we still need

497
00:28:55.520 --> 00:28:59.570
to kind of provide plugins
for other ideas as well,

498
00:28:59.600 --> 00:29:03.830
but visual studios, the only
one we support out of

499
00:29:03.830 --> 00:29:05.810
the box while they're out
of the box, but you

500
00:29:05.810 --> 00:29:08.240
know, that we have official
support for at the moment.

501
00:29:08.660 --> 00:29:11.570
Okay. And then from there
you can go and basically

502
00:29:11.570 --> 00:29:13.880
file new project and get
started right away and it'll

503
00:29:13.880 --> 00:29:16.700
go and bring down the
appropriate new, get packages and

504
00:29:16.700 --> 00:29:20.090
then set you up for
success. Yeah. We also have

505
00:29:20.480 --> 00:29:23.210
done that templates as well.
Not that core templates, sorry.

506
00:29:23.300 --> 00:29:25.640
So that you can, you
know, just scuffled a new

507
00:29:25.640 --> 00:29:27.800
project in.net core as well,
but you won't get the

508
00:29:27.800 --> 00:29:30.530
designer, but you don't actually
need the designer, you know,

509
00:29:30.560 --> 00:29:36.770
you can without design now.
So that's just.net, new apollonia.app.

510
00:29:36.780 --> 00:29:41.710
So kind of file new
project. Exactly. Yeah. And then

511
00:29:41.710 --> 00:29:43.840
you've got Two templates there
at the command line. You've

512
00:29:43.840 --> 00:29:48.040
got avalonia.app and then you've
got avalonia.app dot MVVM. So

513
00:29:48.040 --> 00:29:51.640
you're kind of using that
set reactive UI pattern. Yeah.

514
00:29:52.060 --> 00:29:55.960
The MVVM application uses reactive
UI, which is a great

515
00:29:56.200 --> 00:30:00.700
library for model, model, view,
model, view, whatever it's called,

516
00:30:00.700 --> 00:30:08.650
if you split out. So
yeah, we use reactive UI

517
00:30:08.650 --> 00:30:12.040
for that. By default, we
ship a version of reactive

518
00:30:12.040 --> 00:30:15.370
UI, which is kind of
tailored to our, our framework.

519
00:30:15.580 --> 00:30:18.910
So you've got an active
get hub repository. You're working

520
00:30:18.910 --> 00:30:22.150
on this halftime, you're looking
for help, but you also

521
00:30:22.150 --> 00:30:24.430
have a lot of contributors.
I look on the page

522
00:30:24.430 --> 00:30:26.350
there and at the bottom,
there's a lot of faces.

523
00:30:26.350 --> 00:30:28.990
A lot of people who've
been involved. Yeah. Yeah. We've

524
00:30:28.990 --> 00:30:33.290
got a huge amount of
contributors, you know, and that's,

525
00:30:33.420 --> 00:30:36.220
that's actually, we've got so
many contributors that I can't

526
00:30:36.220 --> 00:30:39.250
keep it with pull requests.
So that's another way people

527
00:30:39.250 --> 00:30:43.990
can help like reviewing pull
requests. Yeah. We're getting a

528
00:30:43.990 --> 00:30:47.380
lot of them. I know
we mostly hang out in

529
00:30:47.380 --> 00:30:50.380
getter. There's a guitar room,
which is very, very active

530
00:30:50.380 --> 00:30:53.440
as well. So if anyone's
interested, check out, I'll get

531
00:30:53.440 --> 00:30:55.660
a room drop in and
say, hi. Yeah, it looks

532
00:30:55.660 --> 00:30:59.200
like you've got a thousand
plus closed poll requests, but

533
00:30:59.200 --> 00:31:01.900
you've got 24 open right
now. So there's another opportunity.

534
00:31:01.900 --> 00:31:04.150
And some of those go
back a while. So I

535
00:31:04.150 --> 00:31:06.880
think that's a huge opportunity
here. I always tell people,

536
00:31:07.030 --> 00:31:10.180
find a great project that's
on the come up and

537
00:31:10.180 --> 00:31:12.910
get involved, whether it be
writing docs or helping out.

538
00:31:12.910 --> 00:31:15.040
So where can people get
ahold of you in the

539
00:31:15.040 --> 00:31:18.010
end? The team yeah. Gets
us the best way. Gets

540
00:31:18.010 --> 00:31:21.580
a stroke of a loan.
Yeah. Okay. I think is

541
00:31:21.580 --> 00:31:24.910
the URL. I dunno, I
will make sure that that's

542
00:31:24.910 --> 00:31:27.460
in the show notes. It's
good or not. I am

543
00:31:27.460 --> 00:31:31.090
slash Avalonia UI slash Avalonia.
I'll make sure that the

544
00:31:31.090 --> 00:31:33.820
links to the GitHub repository
and the Gitter channel are

545
00:31:33.820 --> 00:31:35.770
all in the show notes
so people can get involved.

546
00:31:36.370 --> 00:31:38.890
And thank you very much.
Stephen Kirk, for chatting with me

547
00:31:38.890 --> 00:31:43.030
today about Avalonia across platforms,
ammo framework for.net. Thank you.

548
00:31:43.690 --> 00:31:46.570
This has been another episode
of Hanselminutes and we'll see

549
00:31:46.570 --> 00:32:07.470
you again. <inaudible>.

