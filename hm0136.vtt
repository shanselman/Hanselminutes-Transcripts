WEBVTT FILE

1
00:00:12.060 --> 00:00:16.680
From Hanselman it's dot com.
It's Hanselman. It's a weekly

2
00:00:16.680 --> 00:00:20.760
discussion with web developer and
technologist is Scott Hanselman hosted

3
00:00:20.760 --> 00:00:24.960
by Carl Franklin. This is Lauren's
Ryan announcing show number one

4
00:00:24.960 --> 00:00:31.530
36. Recorded live Wednesday, October 29th, 2008.
Support for Hanselman it's just

5
00:00:31.530 --> 00:00:35.640
provided by teller rad controls
and the most comprehensive suite

6
00:00:35.640 --> 00:00:45.810
of components for windows forms
and asp.net web applications. online@wwwdottelerikdotcomandby.net

7
00:00:45.810 --> 00:00:51.690
developers journal the world's leading.net
developer magazine online at www

8
00:00:51.690 --> 00:00:56.760
dot <inaudible> dot com. In
this episode, Scott talks with

9
00:00:56.820 --> 00:00:59.700
each team at the Microsoft
research section at this year's

10
00:00:59.700 --> 00:01:05.970
professional developers conference in Los
Angeles. Hi, this is Scott

11
00:01:05.970 --> 00:01:07.740
Hanselman and this is another
episode of Hansel minutes and

12
00:01:07.740 --> 00:01:11.280
I'm here at Microsoft PDC
2008 in Los Angeles. And

13
00:01:11.280 --> 00:01:13.140
I just happened to be
wandering around by myself here

14
00:01:13.140 --> 00:01:16.260
at the Microsoft research booth.
What they're calling MSR at

15
00:01:16.260 --> 00:01:18.870
PDC. I'm just going to
wander around from booth to

16
00:01:18.870 --> 00:01:21.240
booth and see what folks
at Microsoft research are working

17
00:01:21.240 --> 00:01:25.680
on so high. So what
am I looking at here,

18
00:01:25.680 --> 00:01:29.690
sir? Scott, you are looking
at Microsoft research Alto collage.

19
00:01:29.930 --> 00:01:33.860
This is an application that
came directly from research to

20
00:01:33.860 --> 00:01:38.360
a product. One of our
researchers a while ago came

21
00:01:38.360 --> 00:01:41.180
up with this idea of
creating an automatic collage of

22
00:01:41.180 --> 00:01:43.730
a photo collection. Okay, so
I'm looking here, I'm sitting

23
00:01:43.730 --> 00:01:46.520
here with Alison Sol, a
development manager with Microsoft research,

24
00:01:46.940 --> 00:01:48.920
and I'm looking at pictures
of people's faces kind of

25
00:01:48.920 --> 00:01:52.310
organized in a really attractive
a collage, but not just

26
00:01:52.310 --> 00:01:54.350
a collage where pictures have
been thrown up against a

27
00:01:54.350 --> 00:01:57.650
window, but it's, it's nice
and square. There's fades between

28
00:01:57.650 --> 00:02:00.380
pictures. And I noticed that
everyone's face is visible in

29
00:02:00.380 --> 00:02:05.450
this, this collage. Exactly. So
just paper, it was published

30
00:02:05.870 --> 00:02:09.500
two years ago for the
secret wishes, the most important

31
00:02:09.500 --> 00:02:15.680
confidence in computer graphics. And
it has all the details

32
00:02:15.950 --> 00:02:19.400
of how to create a
collage automatically you point to

33
00:02:19.400 --> 00:02:24.110
a folder and you get
those images through those equations

34
00:02:24.110 --> 00:02:26.810
and it will come up
with a collage automatically for

35
00:02:26.810 --> 00:02:30.920
you. We solve is as
a very good technology that

36
00:02:30.920 --> 00:02:34.820
had the potential of being
integrated in to some Microsoft

37
00:02:34.820 --> 00:02:39.560
product or as it was
this particular case, we will

38
00:02:39.590 --> 00:02:42.410
bring this to market directly.
Okay. So this is a

39
00:02:42.410 --> 00:02:45.020
paper that was published. It
looks like at SIGGRAPH Oh

40
00:02:45.020 --> 00:02:46.640
six, I've been at SIGGRAPH
a number of times, it's

41
00:02:46.640 --> 00:02:50.210
really the most important computer
graphics symposium and conference that

42
00:02:50.210 --> 00:02:52.850
there is. And I'm looking
at an application, which kind

43
00:02:52.850 --> 00:02:55.790
of looks like a, a
windows live gallery, and it's

44
00:02:55.790 --> 00:02:58.790
sucking images out of a
directory. We've got images of

45
00:02:58.790 --> 00:03:03.040
ducks, candles and people and
places, and you're browsing those

46
00:03:03.040 --> 00:03:06.370
images. And right now they're
just kind of scattered on

47
00:03:06.370 --> 00:03:08.620
an, on a, on a
palette. This is a scatter

48
00:03:08.620 --> 00:03:12.360
view. So <inaudible> wants to
give you exactly the idea

49
00:03:12.360 --> 00:03:15.090
that you got those pictures
in your folder. You'll throw

50
00:03:15.090 --> 00:03:18.540
them away, run lonely. And
now you want to create

51
00:03:18.540 --> 00:03:21.360
a collage out that you
need to tell us is

52
00:03:21.360 --> 00:03:24.300
how many images you want
in this collage from seven

53
00:03:24.300 --> 00:03:27.690
to 25, and then you
press the create. Okay. So

54
00:03:27.690 --> 00:03:30.000
he's got 25 images in
his collage here and he's

55
00:03:30.000 --> 00:03:32.520
pulled a slider bar and
now they're kind of the,

56
00:03:32.880 --> 00:03:35.940
the images are dancing around
the screen and kind of

57
00:03:35.940 --> 00:03:39.600
almost like Tetris, they're finding
the right place. It doesn't

58
00:03:39.600 --> 00:03:41.610
look like they were going
to make a perfect square,

59
00:03:41.610 --> 00:03:44.790
but then they did. And
they came together into a

60
00:03:44.790 --> 00:03:47.910
collage of seven images, all
with nice blur effects. Now,

61
00:03:47.970 --> 00:03:50.100
how did it, how did
it know to keep that

62
00:03:50.160 --> 00:03:52.990
castle in frame and that
door and frame? Why didn't

63
00:03:52.990 --> 00:03:58.110
it? Why did it not
clip that incorrectly? Exactly. All

64
00:03:58.120 --> 00:04:02.850
the collage, the technology behind
you is if you look

65
00:04:02.880 --> 00:04:05.970
back at the origin of
just technology, it tries to

66
00:04:05.970 --> 00:04:10.230
address four problems. One given
a large set of images,

67
00:04:10.260 --> 00:04:13.260
how to select a smaller
set that represents that larger.

68
00:04:14.010 --> 00:04:16.470
So it has to recognize
that these are images that

69
00:04:16.470 --> 00:04:18.570
are similar in some way
that's representative of a set.

70
00:04:18.990 --> 00:04:23.010
Yes. Then for each one
of these images, it will

71
00:04:23.010 --> 00:04:27.420
select a region of interest
that has to be in

72
00:04:27.420 --> 00:04:29.340
the final collage. Okay. So
it looks like from the,

73
00:04:29.550 --> 00:04:31.140
from the paper here, which
is written from the point

74
00:04:31.140 --> 00:04:33.510
of view of a PhD,
this image has to be

75
00:04:33.510 --> 00:04:36.930
substantial, substantial, something significant that
you would look at when

76
00:04:36.930 --> 00:04:40.080
you see this image, it's
representative of that image. Like,

77
00:04:40.830 --> 00:04:45.840
So now each of those
inner images that you want

78
00:04:45.840 --> 00:04:48.450
to place in the collage,
they have to go to

79
00:04:48.450 --> 00:04:52.800
a position in the collage
that allows that regional interest

80
00:04:52.830 --> 00:04:56.670
to appear yet. It allows
some overlaps to the next.

81
00:04:58.140 --> 00:05:00.060
It has to have enough
of a margin where it

82
00:05:00.270 --> 00:05:02.580
doesn't lose the region of
interest, but still looks right

83
00:05:02.580 --> 00:05:04.770
when put next to the
next, the next image. And

84
00:05:04.770 --> 00:05:08.580
finally, we have to blend
together those so that the

85
00:05:08.580 --> 00:05:11.490
transition from one image to
the next one is a

86
00:05:11.490 --> 00:05:15.480
smooth transition. When not just
something that you can easily

87
00:05:15.480 --> 00:05:18.420
see, that that image is
started here. And the next

88
00:05:18.420 --> 00:05:23.340
one was ending in the
final column. Now I've seen

89
00:05:23.340 --> 00:05:25.770
these collages being built over
the last several minutes and

90
00:05:25.770 --> 00:05:28.290
it never seems to get
one wrong. They always look

91
00:05:28.290 --> 00:05:31.530
nice. Is there some, what
are some images, examples of

92
00:05:31.530 --> 00:05:34.050
images that would confuse the
algorithm? And it would look

93
00:05:34.290 --> 00:05:38.970
bad. Like if you took
an image, two images together

94
00:05:38.970 --> 00:05:41.370
that were of maybe one
of people and one of,

95
00:05:41.940 --> 00:05:44.760
I don't know, insects, would
it caused them to create

96
00:05:44.760 --> 00:05:49.620
an unattractive collage? Can you
fool the system? The only

97
00:05:49.650 --> 00:05:53.280
images that we have that
really created collage that were

98
00:05:53.280 --> 00:05:58.070
not nice are images that
are not pictures, are images

99
00:05:58.070 --> 00:06:00.950
that we created manually. Like
for example, if you have

100
00:06:01.160 --> 00:06:05.090
an image that is some
color, some single color, one

101
00:06:05.090 --> 00:06:08.690
single digital image that is
the blue color or another

102
00:06:08.690 --> 00:06:10.870
one that is the red
color that will not pay

103
00:06:10.940 --> 00:06:13.790
a nice collage. The application
will not never find nice

104
00:06:13.790 --> 00:06:17.160
borders and nice ways to
make a transition from one

105
00:06:17.550 --> 00:06:20.980
The next. So abstract and
artificially created images, but images

106
00:06:20.980 --> 00:06:24.340
of the real world typically
have something that's coherent. And

107
00:06:24.580 --> 00:06:28.060
you're trying to take a
picture of something. So I

108
00:06:28.060 --> 00:06:30.100
wonder if you took pictures
of clouds and tried to

109
00:06:30.100 --> 00:06:33.310
do that if you had
confused, No, because see clouds,

110
00:06:33.880 --> 00:06:38.860
even though you don't see
those very clearly, they have

111
00:06:38.920 --> 00:06:45.970
variations of the tone of
this clouds color. So that

112
00:06:45.970 --> 00:06:49.030
is something that the algorithm
will consider, and it will

113
00:06:49.030 --> 00:06:52.450
use that to make the
transition as smooth as possible.

114
00:06:52.930 --> 00:06:56.200
The only way that we
really found that can create

115
00:06:56.200 --> 00:07:00.370
a very ugly collage is
if you digitally create an

116
00:07:00.370 --> 00:07:02.550
image that has a single
color, and then you tried

117
00:07:02.550 --> 00:07:05.650
to create a collage of
single. Now we're looking at

118
00:07:05.650 --> 00:07:07.870
a picture, we're looking at
one, two, three, four, five,

119
00:07:07.870 --> 00:07:10.600
six, seven pictures of people.
And one of them has

120
00:07:10.600 --> 00:07:14.440
a picture of you with
a wax Albert Einstein. And

121
00:07:14.440 --> 00:07:16.240
I noticed that when it
was creating the collage, it

122
00:07:16.240 --> 00:07:18.310
definitely thought that was a
person. It put a, I

123
00:07:18.310 --> 00:07:20.560
put a square over his
face. So this knows not

124
00:07:20.560 --> 00:07:24.100
just about significant images, but
if there's a face there,

125
00:07:24.100 --> 00:07:26.290
it really tries hard to
make sure that it might

126
00:07:26.290 --> 00:07:29.290
cut off your body, but
it keeps the face. Exactly.

127
00:07:29.300 --> 00:07:34.840
We are using very good
technology from Microsoft research for

128
00:07:34.840 --> 00:07:40.420
face detection, about 70% of
the faces that are looking

129
00:07:40.420 --> 00:07:45.340
at the camera with the
text perfectly. So it's very

130
00:07:45.340 --> 00:07:48.100
hair for you to miss
a face. But the application

131
00:07:48.100 --> 00:07:51.430
is to allows you, if,
for example, here we are

132
00:07:51.430 --> 00:07:54.370
looking at the picture of
two phases. Let's assume one

133
00:07:54.370 --> 00:07:57.700
of those, where was not
that active. You could manually

134
00:07:57.700 --> 00:08:00.430
come here and say, Oh,
this is the entire 80

135
00:08:00.450 --> 00:08:04.030
that we faces in this
image. And then the application

136
00:08:04.030 --> 00:08:07.810
would consider that and not
have any of those phases,

137
00:08:07.810 --> 00:08:11.770
Curtin Collage. So you're using
the facial recognition, taught technology

138
00:08:11.770 --> 00:08:15.580
as a, a weighted hint
to say, this is a

139
00:08:15.580 --> 00:08:18.370
significant area of interest. Now,
I suppose I could lie.

140
00:08:18.370 --> 00:08:21.700
Let's say that this picture
of this couple is them

141
00:08:21.730 --> 00:08:23.950
getting married. And I want
to Mark his, her hand

142
00:08:24.130 --> 00:08:28.450
because it has a wedding
ring. Exactly. What you just

143
00:08:28.450 --> 00:08:34.180
said is exactly what some
of our users are applying.

144
00:08:34.180 --> 00:08:37.990
Just men will face that
they're looking for. And it

145
00:08:37.990 --> 00:08:41.230
is very interesting because most
of our customers that use

146
00:08:41.230 --> 00:08:44.860
these, they use for animals,
people that like cats and

147
00:08:44.860 --> 00:08:49.210
dogs, of course, we don't
have a cat face detection

148
00:08:49.240 --> 00:08:52.450
technology app, but what they
do is they come here

149
00:08:52.450 --> 00:08:56.130
and if they have, for
example, cat or a dog

150
00:08:56.130 --> 00:08:58.650
In the picture, they come
and they find that as

151
00:08:58.650 --> 00:09:02.610
a face area and the
dire face of the cat

152
00:09:02.610 --> 00:09:05.870
or dog appears in the
final collage. Fantastic. Now people

153
00:09:05.870 --> 00:09:10.220
can see this at research.microsoft.com/auto
collage. And I'll put a

154
00:09:10.220 --> 00:09:12.080
link to that in the
show notes, is this something

155
00:09:12.080 --> 00:09:13.640
that people can download right
now? Or they can only

156
00:09:13.640 --> 00:09:16.100
see videos of it happening,
Right. They can download right

157
00:09:16.100 --> 00:09:19.070
now. It works for windows
XP and windows Vista. And

158
00:09:19.080 --> 00:09:23.370
it only requires.net 3.0 because
we are using WPF for

159
00:09:23.370 --> 00:09:27.230
losing either face. Well, fantastic.
Thank you, Alison. So development

160
00:09:27.230 --> 00:09:32.780
manager at Microsoft research in
Cambridge. Thanks a lot. We're

161
00:09:32.780 --> 00:09:35.540
wandering around at PDC. I'm
at Microsoft research at PDC

162
00:09:35.540 --> 00:09:38.540
or what they're calling MSR
at PDC and I'm with

163
00:09:38.690 --> 00:09:43.130
Christian clinic, a researcher at
Microsoft in Redmond. And what

164
00:09:43.130 --> 00:09:44.810
have we got for me
here today? What, what are

165
00:09:44.810 --> 00:09:47.930
you working on? So this
project is called blues and

166
00:09:48.170 --> 00:09:51.230
it's for all intents and
purposes, it's a newsreader. The

167
00:09:51.410 --> 00:09:55.400
distinguishing features to all other
news aggregation sites is that

168
00:09:55.400 --> 00:09:57.650
it allows you to look
at news and context. What

169
00:09:57.650 --> 00:10:00.080
I mean by that is
it allows you to surface

170
00:10:00.080 --> 00:10:02.960
news. And at the same
time for every article you

171
00:10:02.960 --> 00:10:05.540
happen to be interested in,
you also get all the

172
00:10:05.540 --> 00:10:09.020
blog commentary that we were
able to, to crawl for

173
00:10:09.020 --> 00:10:12.500
that specific article. So for
example, here we have broken

174
00:10:12.500 --> 00:10:16.430
down the commentary into liberal
and conservative bloggers. And while

175
00:10:16.430 --> 00:10:19.310
I'm surfacing here right now
is an article on Troopergate.

176
00:10:19.880 --> 00:10:22.040
And if we drill down,
we see that there were

177
00:10:22.040 --> 00:10:25.460
three conservative bloggers who have
commented on this and not

178
00:10:25.460 --> 00:10:29.210
surprisingly 15 liberal ones. Now
for each of these comments,

179
00:10:29.270 --> 00:10:31.670
I can actually click on
them and surface the blog

180
00:10:31.700 --> 00:10:34.340
post as well. Okay. So
how did you know that

181
00:10:34.340 --> 00:10:37.100
those bloggers were conservative? These
three? Did you manually do

182
00:10:37.100 --> 00:10:38.600
that and look at it
as a human and say,

183
00:10:38.930 --> 00:10:41.990
we have identified this as
a right. Blog is a

184
00:10:41.990 --> 00:10:44.960
very good question. We actually
stayed away from that. So

185
00:10:45.140 --> 00:10:48.200
there are two sources of
information there, either some bloggers

186
00:10:48.200 --> 00:10:52.190
who self identify. And in
addition, there are some preexisting

187
00:10:52.190 --> 00:10:57.800
lists that classify bloggers into
conservative and liberals. However, we

188
00:10:57.800 --> 00:11:01.910
stayed away from making that
judgment ourselves. So that information

189
00:11:01.910 --> 00:11:04.190
though comes from from other
humans who are not us,

190
00:11:04.190 --> 00:11:06.890
there's no computer system that
decided that they were Right.

191
00:11:07.490 --> 00:11:09.650
That's correct. And it's an
input to our system. It's

192
00:11:09.650 --> 00:11:12.620
not something that we are
dealing with in any way.

193
00:11:13.130 --> 00:11:15.710
So we're looking at an
application that has blue on

194
00:11:15.710 --> 00:11:17.450
the left and red on
the right. We've got a

195
00:11:17.450 --> 00:11:20.600
bar chart that's showing off
to the left, indicating that

196
00:11:20.600 --> 00:11:25.000
for example, a 15 bloggers
with a large blue bar

197
00:11:25.010 --> 00:11:28.070
or were liberal or left
leaning and had a comment

198
00:11:28.070 --> 00:11:30.260
on Troopergate. And I assume
that you identified those because

199
00:11:30.260 --> 00:11:34.610
they linked to that, that
story. That's correct. So then

200
00:11:34.610 --> 00:11:37.730
the input is the story,
the number of logs that

201
00:11:37.730 --> 00:11:39.710
linked to it, and then
the, whether or not that

202
00:11:39.710 --> 00:11:43.400
blog was left or right,
Correct. Again. And we actually

203
00:11:43.400 --> 00:11:46.550
create all of that input
by crawling the web and

204
00:11:46.550 --> 00:11:49.460
having a continuous blog stream
that feeds into our system,

205
00:11:49.730 --> 00:11:54.130
which we then clean. We
find duplicate news because a

206
00:11:54.130 --> 00:11:56.800
lot of AP stories get
published on different news sites.

207
00:11:56.800 --> 00:12:00.160
So we clean those up.
We figure out which are

208
00:12:00.160 --> 00:12:03.430
the duplicates. We aggregate all
the links and then have

209
00:12:03.430 --> 00:12:07.690
a server, which is accessed
by this small visual client

210
00:12:07.690 --> 00:12:10.050
that you see. Yeah. So
the bar charts make it

211
00:12:10.050 --> 00:12:13.290
clear whether a liberals or
conservatives are particularly interested in

212
00:12:13.290 --> 00:12:15.660
that story. For example, there's
one from the Washington post

213
00:12:15.660 --> 00:12:18.630
that indicates that Pailin makes
a pit bull look tame.

214
00:12:18.630 --> 00:12:22.230
And interestingly, there are 21
reactions from the liberal side,

215
00:12:22.230 --> 00:12:24.270
probably jumping on that and
saying that that's important to

216
00:12:24.270 --> 00:12:27.660
them while only one conservative,
but there's also a little

217
00:12:28.080 --> 00:12:31.320
gray box and there's some
different colored boxes, gray boxes,

218
00:12:31.680 --> 00:12:34.320
orange, yellow boxes. And then
the, whether one, two or

219
00:12:34.320 --> 00:12:37.350
three, what data is that
indicating to me? So the

220
00:12:37.350 --> 00:12:39.420
final piece of this puzzle
is the fact that we

221
00:12:39.420 --> 00:12:42.510
try to look into the
emotional charge in the discussion

222
00:12:42.810 --> 00:12:45.720
where you have a scale
from going to pure from

223
00:12:45.750 --> 00:12:48.720
pure statements of fact, things
like the fed raised interest

224
00:12:48.720 --> 00:12:51.600
rates, by a point today,
two things that are highly

225
00:12:51.600 --> 00:12:54.990
emotionally charged, something like this
is an outrage. How could

226
00:12:54.990 --> 00:12:58.470
they do that? And we
try to give for any

227
00:12:58.470 --> 00:13:01.890
set of blog comments and
indicator that tells us how

228
00:13:01.920 --> 00:13:06.660
charged this discussion has been.
And this is visualized as

229
00:13:06.660 --> 00:13:09.660
small, glowing boxes on the
side, the more boxes and

230
00:13:09.660 --> 00:13:11.880
the more the glow around
it, the more charge in

231
00:13:11.880 --> 00:13:13.980
the discussion. So one of
these stories here from the

232
00:13:13.980 --> 00:13:16.890
New York post is indicating that
a Domino's pizza worker has

233
00:13:16.890 --> 00:13:20.040
been hounded by community activist
groups. On the liberal side,

234
00:13:20.040 --> 00:13:22.890
it indicates that there were
three boxes. So that liberal

235
00:13:22.890 --> 00:13:26.160
blogger has said something that's
very emotionally charged. While on

236
00:13:26.160 --> 00:13:28.620
the right hand side, there
have been eight conservative reactions.

237
00:13:28.830 --> 00:13:31.230
There's only one box. That's
an occasion that they're speaking

238
00:13:31.260 --> 00:13:34.110
just the facts, Correct. I'm
not sure if it's just

239
00:13:34.110 --> 00:13:37.620
factual, but the language is
very neutral. It's not charged

240
00:13:37.620 --> 00:13:40.950
at all, Maybe inflammatory language,
but that's not using highly

241
00:13:40.950 --> 00:13:46.410
charged emotionally loaded language. Yes,
exactly. Now, where do you

242
00:13:46.410 --> 00:13:49.200
see this going? We're in
an emotionally charged time and

243
00:13:49.200 --> 00:13:50.670
we have the election available
to us, but how do

244
00:13:50.670 --> 00:13:53.670
you see this research going
into the future? So there's,

245
00:13:53.690 --> 00:13:56.190
there's two, two pieces. This
puzzle. The one thing is

246
00:13:56.190 --> 00:13:59.520
that we enable two things
that a user can do.

247
00:13:59.910 --> 00:14:02.550
One is just seeing the
news and context. The other

248
00:14:02.550 --> 00:14:05.760
is actually prioritizing what they
want to read. So I

249
00:14:05.760 --> 00:14:09.330
can ask questions now, like,
what are conservatives talking about?

250
00:14:09.330 --> 00:14:12.330
What are liberals talking about?
What have been the interesting

251
00:14:12.330 --> 00:14:15.420
stories in the past, there's
a keyword search engine integrated

252
00:14:15.420 --> 00:14:18.060
here. So for all intents
and purposes, it allows you

253
00:14:18.060 --> 00:14:20.880
to focus your news, reading
to what you, whatever you

254
00:14:20.880 --> 00:14:23.700
happen to be interested in.
The other piece of the

255
00:14:23.700 --> 00:14:26.760
story is the fact that
unlike this demo here, this

256
00:14:26.760 --> 00:14:30.660
of course generalizes easily beyond
just the political domain. So

257
00:14:30.810 --> 00:14:33.810
you could imagine this going
for financial news for product

258
00:14:33.810 --> 00:14:37.350
reviews, for sports news, and
also for different ways of

259
00:14:37.350 --> 00:14:40.440
splitting of sort of chopping
down the blogosphere. Right now,

260
00:14:40.440 --> 00:14:43.410
we just split into liberal
and conservative bloggers, but it

261
00:14:43.410 --> 00:14:45.990
could be anything that you
could imagine, a breakdown into

262
00:14:46.200 --> 00:14:52.670
location, gender, special interests, affiliation
with certain sports teams, affiliation

263
00:14:52.670 --> 00:14:55.630
with certain employers, et cetera.
Now, from your chart here

264
00:14:55.630 --> 00:14:57.670
and all the glowing boxes.
If I indicated that I

265
00:14:57.670 --> 00:15:01.240
was interested only in reading
news, that is not emotionally

266
00:15:01.240 --> 00:15:03.070
charged, it looks like I
would have nothing to read.

267
00:15:04.570 --> 00:15:07.780
No, actually that's not quite
true, but in the political

268
00:15:07.780 --> 00:15:10.870
domain, it's, it tends to
be rare, very rare. I

269
00:15:10.870 --> 00:15:13.390
wish I wish we had
more factual information, but it

270
00:15:13.390 --> 00:15:16.840
doesn't really look like that
right now, Chart there's virtually

271
00:15:16.840 --> 00:15:19.660
nothing that is not at
least contained some emotionally charged

272
00:15:19.660 --> 00:15:22.690
language. Are you using that
as just English keyword searches

273
00:15:22.690 --> 00:15:25.000
to say that what's an
example of something emotionally charged,

274
00:15:25.000 --> 00:15:27.250
that would cause one of
these glowing boxes to appear.

275
00:15:27.550 --> 00:15:30.430
So What we started out
with is actually have we

276
00:15:30.430 --> 00:15:34.900
had humans label, hundreds of
blog posts. First we tested

277
00:15:35.110 --> 00:15:37.480
if humans agree in their
judgments, which turned out to

278
00:15:37.480 --> 00:15:39.910
be roughly true. And then
we trained up a machine

279
00:15:39.910 --> 00:15:42.550
learning based classifier to figure
out how well does this

280
00:15:42.550 --> 00:15:46.810
classifier emulate the human judgments.
And the classifier gets things

281
00:15:46.990 --> 00:15:50.590
in quotes, right about 80%
of the time, and indeed

282
00:15:50.590 --> 00:15:53.710
uses keywords and combination of
keywords. So we use one

283
00:15:53.710 --> 00:15:56.820
grams, two grams and three
grams. And this enables us

284
00:15:56.860 --> 00:16:01.330
to differentiate between things like
good, not good and not

285
00:16:01.330 --> 00:16:04.150
very good, which are all
very different shades of gray.

286
00:16:04.210 --> 00:16:08.140
And so having more words
and context makes the, makes

287
00:16:08.140 --> 00:16:12.220
the classifier smarter. Now the
source information from my point

288
00:16:12.220 --> 00:16:14.500
of view appears to be
news. So all of these

289
00:16:14.500 --> 00:16:18.370
are blog reactions on news
items. You don't have any

290
00:16:18.640 --> 00:16:21.850
opinion items and then opinions
on those reactions on those

291
00:16:22.120 --> 00:16:25.570
is, is the intent here
to show factual information as

292
00:16:25.570 --> 00:16:29.050
the baseline source and then
opinion on those, or are

293
00:16:29.050 --> 00:16:30.910
the other options or the
other things that you're looking

294
00:16:30.910 --> 00:16:34.030
at liberal news and conservative
news. I'm trying to understand

295
00:16:34.030 --> 00:16:37.750
if this is simply opinions
about facts or opinions about

296
00:16:37.750 --> 00:16:41.770
opinions. The, the prime motivation
was when we started all

297
00:16:41.770 --> 00:16:44.620
of this was actually to
look into, to get a

298
00:16:44.620 --> 00:16:48.700
sense of how news is
received. Now, the problem with

299
00:16:48.880 --> 00:16:51.310
any sort of new site
and even a lot of

300
00:16:51.310 --> 00:16:54.880
the commentary is that people
try to write in a,

301
00:16:55.660 --> 00:16:59.470
at least on the surface,
very objective way, which frustrates

302
00:16:59.530 --> 00:17:04.330
any pure machine-based attempt to
find any spin, find any

303
00:17:04.330 --> 00:17:07.990
sentiment. So based on that,
we looked into the context

304
00:17:07.990 --> 00:17:10.690
of news to see if
that gives us a better

305
00:17:10.690 --> 00:17:14.770
handle on how news is
received, who likes what news.

306
00:17:15.070 --> 00:17:18.610
And if there potentially is
either a spin or a

307
00:17:18.610 --> 00:17:22.000
drift in these things. Now
this whole notion of spin

308
00:17:22.000 --> 00:17:24.340
is not something we surface.
We try to make everything

309
00:17:24.340 --> 00:17:27.310
as transparent as possible. So
what we surface are only

310
00:17:27.310 --> 00:17:30.820
things like how many bloggers
from which camp have linked

311
00:17:30.820 --> 00:17:33.670
to something and allow people
to draw their own conclusions.

312
00:17:33.910 --> 00:17:36.220
Yet at the same time,
it turns out that for

313
00:17:36.220 --> 00:17:39.490
any newspaper article, the context
actually carries a lot of

314
00:17:39.490 --> 00:17:41.920
information that you would miss.
If you purely read the

315
00:17:41.920 --> 00:17:45.040
news. Now, if an article
was, was ultimately really quite

316
00:17:45.040 --> 00:17:48.040
neutral, one of these things
that might be marked for

317
00:17:48.040 --> 00:17:51.060
example is liberal, but the
comments on the same page

318
00:17:51.060 --> 00:17:53.790
were highly emotionally charged. How
do you deal with that?

319
00:17:53.790 --> 00:17:57.600
Our comments and additional and
separately segmented bit of information.

320
00:17:57.600 --> 00:18:00.300
Cause I might be interested
in neutral reporting with very,

321
00:18:00.300 --> 00:18:04.700
very liberal comments, Right? And
right now the emotional charge

322
00:18:04.850 --> 00:18:07.460
only refers to the comments,
not the news at all.

323
00:18:07.640 --> 00:18:10.760
So we do differentiate between
that and what you could

324
00:18:10.760 --> 00:18:12.530
see if you had the
UI as sort of, when

325
00:18:12.530 --> 00:18:16.850
you click on the comment
section for any individual article,

326
00:18:16.850 --> 00:18:20.120
you get the location of
the blogger. You typically get

327
00:18:20.120 --> 00:18:22.970
the title of the blog.
So you get a very

328
00:18:23.000 --> 00:18:25.940
nice overview to start to
begin with of what people

329
00:18:25.940 --> 00:18:28.310
have been saying. And then
you, then you have the

330
00:18:28.310 --> 00:18:31.430
ability to drill down. What
about the additional drilling, the

331
00:18:31.430 --> 00:18:34.460
additional layer of the comments
of the readers of this

332
00:18:34.460 --> 00:18:37.310
particular blog? So here's a
news article. Here's one blogger

333
00:18:37.310 --> 00:18:39.800
who is quote, unquote, commenting
on that, but they may

334
00:18:39.800 --> 00:18:41.960
have a very active comment
board that feels like that's

335
00:18:41.960 --> 00:18:45.470
an additional kind of access
of information. It appears to

336
00:18:45.470 --> 00:18:49.040
me that you are basing
this person's very emotionally charged

337
00:18:49.100 --> 00:18:53.090
blog entry on, I assume
the text that appears on

338
00:18:53.090 --> 00:18:55.100
the permalink of the page
that you crawled, you have

339
00:18:55.100 --> 00:18:58.100
no way of distinguishing between
the story itself and the

340
00:18:58.100 --> 00:19:01.220
comments that appear below the
fold, Right? That's, that's completely

341
00:19:01.220 --> 00:19:03.830
right, right now we are
for all intents and purposes,

342
00:19:03.830 --> 00:19:08.180
ignoring the commentary. That is
something that's in the making.

343
00:19:08.180 --> 00:19:09.740
And we hope to add
at some point in the

344
00:19:09.740 --> 00:19:13.060
future, but it's not being
surfaced. Interesting. So what do

345
00:19:13.060 --> 00:19:16.850
you plan on doing with
this technology? The most important

346
00:19:16.850 --> 00:19:18.890
thing is sort of finding
the right sweet spots to

347
00:19:18.890 --> 00:19:23.540
surface this. This is available
to anyone within Microsoft. So

348
00:19:23.630 --> 00:19:25.550
all you have to do
in order to try this

349
00:19:25.550 --> 00:19:29.150
out is to go to
MSW search for blues, spelled

350
00:19:29.180 --> 00:19:32.240
B L E w S.
And the first page that'll

351
00:19:32.240 --> 00:19:35.750
come up is the blues
page with detailed project members

352
00:19:36.050 --> 00:19:37.970
and a nice link that
once you click on, it

353
00:19:38.060 --> 00:19:41.780
will actually give you the
user interface that we're looking

354
00:19:41.780 --> 00:19:43.730
at right now. So that'll
let me as an internal

355
00:19:43.730 --> 00:19:46.430
Microsoft employee do that. Is
there any idea of putting

356
00:19:46.430 --> 00:19:48.980
this on research.microsoft.com and showing
it to the public at

357
00:19:48.980 --> 00:19:52.970
some point Potentially? Yes. However,
there's already something that's available

358
00:19:52.970 --> 00:19:57.170
outside already, too, and that's
called the social streams project.

359
00:19:57.230 --> 00:20:01.340
So if you go to
social streams.live labs.com And I'll

360
00:20:01.340 --> 00:20:02.960
put links to that in
the show notes for everyone

361
00:20:02.960 --> 00:20:06.050
to see What you get
is a portal that has

362
00:20:06.050 --> 00:20:09.200
been built by the social
media team in live labs,

363
00:20:09.380 --> 00:20:12.770
who we've collaborated with, and
which incorporates a small pieces

364
00:20:12.770 --> 00:20:15.620
of code from the Blue's
code base as well. And

365
00:20:15.770 --> 00:20:18.710
it gives you the same
browsing experience in the sense

366
00:20:18.710 --> 00:20:21.110
that I can browse for
news. I can browse for

367
00:20:21.110 --> 00:20:23.950
blogs. I can browse for
people and whatever I'm focused,

368
00:20:23.950 --> 00:20:26.720
I'm focusing on. I can
now drill down into related

369
00:20:26.720 --> 00:20:30.290
blogs related news at any
point in time it's being

370
00:20:30.290 --> 00:20:33.800
continuously updated. So it follows
the news 24 seven. It

371
00:20:33.800 --> 00:20:36.110
just launched, I think, two
weeks ago, maybe three weeks

372
00:20:36.110 --> 00:20:38.570
ago. So it's just gearing
up and it has a

373
00:20:38.570 --> 00:20:41.930
significant user. Cool. Well, thank
you so much. Christian clinic

374
00:20:42.140 --> 00:20:45.110
researcher with Microsoft research for
talking to me here at

375
00:20:45.110 --> 00:20:49.420
PDC. Hi, this is Scott
Hanselman with a word from

376
00:20:49.420 --> 00:20:52.090
our sponsor. Do you know
how to build web 2.0

377
00:20:52.090 --> 00:20:55.840
Ajax applications with web 1.0
components? You really can't. If

378
00:20:55.840 --> 00:20:58.270
you want to do the
next generation web applications you'll

379
00:20:58.270 --> 00:21:00.820
need next generation components. Just
like the ones that our

380
00:21:00.820 --> 00:21:03.790
friends at Telerik have got
their rad controls for ESPN

381
00:21:03.790 --> 00:21:06.610
and Ajax. It's a huge
pack of web controls built

382
00:21:06.610 --> 00:21:11.170
on top of asp.net Ajax.
That'll add previously impossible performance

383
00:21:11.170 --> 00:21:14.950
interactivity to your next project.
The new controls mirror, the

384
00:21:14.950 --> 00:21:19.360
Ajax API from asp.net. So
development is really straightforward. The

385
00:21:19.360 --> 00:21:22.060
client scripture shared. So loading
time is not a problem.

386
00:21:22.540 --> 00:21:24.160
If you just set a
couple of properties and you'll

387
00:21:24.160 --> 00:21:26.320
be able to automatically bind
to web services for a

388
00:21:26.320 --> 00:21:30.670
really efficient operation, the new
rad editor from ESPN Ajax,

389
00:21:30.670 --> 00:21:34.060
Telerik loads up to four
times faster than before. And

390
00:21:34.060 --> 00:21:36.520
the new rad grid handles
thousands of records and just

391
00:21:36.520 --> 00:21:39.700
milliseconds, but as always, it's
best to try for yourself.

392
00:21:40.360 --> 00:21:43.360
So you can visit <inaudible>
dot com slash ASP, net

393
00:21:43.360 --> 00:21:47.680
Ajax, and download a trial.
Thanks a lot. So continuing

394
00:21:47.680 --> 00:21:51.130
to wander around the Microsoft
research boot here at PDC,

395
00:21:51.130 --> 00:21:53.590
and I'm at MSR at
PDC, I just stumbled upon

396
00:21:53.590 --> 00:21:58.060
Andrew bagel, a research researcher
at Microsoft research. And he's

397
00:21:58.070 --> 00:22:01.180
got a thing that says
deep IntelliSense. I love IntelliSense.

398
00:22:01.180 --> 00:22:03.370
It must be better if
it's deep. Andrew, what have

399
00:22:03.370 --> 00:22:06.570
you got to show me
today? Well, For deep IntelliSense

400
00:22:06.570 --> 00:22:08.910
is a way for developers
and testers to look at

401
00:22:08.910 --> 00:22:11.640
their code when something has
happened to their code, but

402
00:22:11.640 --> 00:22:14.880
they weren't looking. So what
we have inside deep intelligence

403
00:22:14.880 --> 00:22:17.940
is a way to mine
the repository. So if your

404
00:22:17.940 --> 00:22:22.500
version control system of your
bug database of your discussion

405
00:22:22.500 --> 00:22:26.430
forums of your outlook messages
or email mailing lists, and

406
00:22:26.430 --> 00:22:28.440
try to find out anything
that might be related to

407
00:22:28.440 --> 00:22:30.390
the source code that you're
looking at in your editor.

408
00:22:30.960 --> 00:22:33.030
So I'm looking at a
visual studio instance here up

409
00:22:33.030 --> 00:22:35.010
on your big screen, and
you've got some toolboxes on

410
00:22:35.010 --> 00:22:38.610
the right that say current
item related people, event history,

411
00:22:38.610 --> 00:22:40.200
and it's got all sorts
of information. It looks like

412
00:22:40.200 --> 00:22:43.260
some, some calendar items, some
tasks and email. You've got

413
00:22:43.800 --> 00:22:46.320
some bugs in it. You're
pulling this information from all

414
00:22:46.320 --> 00:22:50.940
over. Yes. So basically for
people who are doing investigations

415
00:22:50.940 --> 00:22:54.120
like developers, when they're trying
to understand the rationale behind

416
00:22:54.120 --> 00:22:56.280
bugs, what they need to
do is to look at

417
00:22:56.280 --> 00:22:58.410
all the places that they
can find information that where

418
00:22:58.410 --> 00:23:01.020
somebody might've been talking about
a particular piece of code

419
00:23:01.020 --> 00:23:03.450
that they were probably unfamiliar
with. So often need to

420
00:23:03.450 --> 00:23:05.760
bug your way into somebody
else's code. And you want

421
00:23:05.760 --> 00:23:07.470
to know how did it
get this way? Because it's

422
00:23:07.470 --> 00:23:09.690
causing a problem in my
code. So what they do

423
00:23:09.690 --> 00:23:11.760
is they look at usually
developers tell us that look

424
00:23:11.760 --> 00:23:13.590
at the most recent check-in
and they say, well, let's

425
00:23:13.590 --> 00:23:15.960
let me look at the
diff between the previous one

426
00:23:15.960 --> 00:23:17.700
and the current one, and
I can find out what

427
00:23:17.700 --> 00:23:19.890
exactly happened. Okay. And it's
the same, what kind of

428
00:23:19.890 --> 00:23:21.570
thing? Over and over. It's
like, okay, here's some code

429
00:23:21.570 --> 00:23:24.420
I haven't seen. Let's push
the blame button. Who did

430
00:23:24.420 --> 00:23:26.490
that code? What do I
know about that guy? When

431
00:23:26.490 --> 00:23:29.700
we're doing all of this
rote work ourselves, let's open

432
00:23:29.700 --> 00:23:31.710
up outlook, let's do a
search. I'm hearing you say

433
00:23:31.710 --> 00:23:34.740
you're doing all of that
for us. Yeah, exactly. So,

434
00:23:34.740 --> 00:23:38.280
and even worse, they're often
going into their version control

435
00:23:38.280 --> 00:23:40.620
system. They find that there's
a checkin on a particular

436
00:23:40.620 --> 00:23:42.720
date made by a particular
person. And there's no way

437
00:23:42.720 --> 00:23:44.460
to correlate that with stuff
that comes from the bug

438
00:23:44.460 --> 00:23:46.820
database. Often what they'll do
is they'll do the search

439
00:23:46.820 --> 00:23:49.220
for the same date, same
time and try to see

440
00:23:49.370 --> 00:23:51.740
if somebody edited a bug
or a work item that

441
00:23:51.740 --> 00:23:54.340
the check in that they
think is potentially fixing. So

442
00:23:54.340 --> 00:23:56.350
what is your input into
this? Is it the project

443
00:23:56.350 --> 00:23:58.630
plus the file name and
the line number or at

444
00:23:58.630 --> 00:24:01.660
what level of granularity are
we looking at these, this

445
00:24:01.660 --> 00:24:04.960
bit of deep information? So
the information granularity is really

446
00:24:04.960 --> 00:24:08.590
on the class method, field
and property boundary. So we're

447
00:24:08.590 --> 00:24:12.340
actually parsing the source code,
both on the backend. When

448
00:24:12.340 --> 00:24:15.220
we crawl these repositories and
we form, we put all

449
00:24:15.220 --> 00:24:17.620
the data we have into
a big database. And whenever

450
00:24:17.620 --> 00:24:20.050
you're roaming around the code
inside visual studio, you click

451
00:24:20.050 --> 00:24:22.720
on a function or click
on a method or click

452
00:24:22.720 --> 00:24:25.720
on a field. We look
up the qualified name of

453
00:24:25.720 --> 00:24:27.820
what we find inside our
database. And we take a

454
00:24:27.820 --> 00:24:30.190
look at all the different
bugs and checkins that we

455
00:24:30.190 --> 00:24:32.850
found that are related to
it. That we've discovered that

456
00:24:32.860 --> 00:24:35.290
related to it. Now, is
this information gonna going to

457
00:24:35.290 --> 00:24:38.290
change as I move around
this file, can you show

458
00:24:38.290 --> 00:24:39.610
me that you're going to
move around in a method

459
00:24:39.610 --> 00:24:42.910
by method basis here? So
if I scroll up here,

460
00:24:42.910 --> 00:24:47.180
we can click on blog
enabled method, and then the

461
00:24:48.100 --> 00:24:50.590
views on the right change
to show me that blog

462
00:24:50.590 --> 00:24:53.410
enabled had two check-ins between
November of last year and

463
00:24:53.560 --> 00:24:56.920
August of this year. And
that the check-ins happened by

464
00:24:56.920 --> 00:24:58.750
this guy, the kid who
turns out to be the

465
00:24:58.750 --> 00:25:01.060
most, the owner of the
code, because he's got all

466
00:25:01.060 --> 00:25:03.790
the commits. Interesting. So, and
then looking on the right

467
00:25:03.790 --> 00:25:05.500
hand side here, we've got
a number of bits of

468
00:25:05.500 --> 00:25:08.290
information that are hyperlinked. So
the kid who is the

469
00:25:08.290 --> 00:25:10.810
username of the person who
worked on this particular property

470
00:25:11.050 --> 00:25:12.970
is hyperlinked. If I click
on him, do I get

471
00:25:12.970 --> 00:25:14.800
to I am him? Or
what do I see if

472
00:25:14.800 --> 00:25:16.870
I learn about the kids?
If you click on the

473
00:25:16.870 --> 00:25:19.990
kid, you can send him
an email message through covid.com.

474
00:25:19.990 --> 00:25:24.130
So the source code we're
looking@itactuallycomesfromcodeplex.com, which uses a team

475
00:25:24.130 --> 00:25:27.190
foundation server backend. So the
most of the information is

476
00:25:27.190 --> 00:25:29.920
coming from team foundation server,
but code Plex has additional

477
00:25:29.920 --> 00:25:34.060
information about people and about
discussion forum messages, which happened

478
00:25:34.060 --> 00:25:36.160
on the website. Now, do
you have just specific projects

479
00:25:36.160 --> 00:25:37.390
that you've set up here
to do? Can you check

480
00:25:37.390 --> 00:25:39.430
out my code flex projects
and see information, or have

481
00:25:39.430 --> 00:25:42.610
you pre pre primed the
pump here? We're pre priming

482
00:25:42.610 --> 00:25:44.470
the pump. We have a
client service solution. So the

483
00:25:44.470 --> 00:25:47.710
server has let loose on
your source code repository, and

484
00:25:47.710 --> 00:25:51.700
then crawls, everything takes a
few hours. And then you

485
00:25:51.700 --> 00:25:55.540
point your visual studio clients
at that SQL server backend,

486
00:25:55.780 --> 00:25:58.180
and to get all the
data that you want. Whenever

487
00:25:58.180 --> 00:26:00.100
I look at Microsoft research
stuff, I always feel like

488
00:26:00.100 --> 00:26:02.470
I'm seeing a preview of
some product in like, you

489
00:26:02.470 --> 00:26:04.510
know, 2020. It feels like
this might be, you know,

490
00:26:04.540 --> 00:26:08.470
VSTS 2020. This is a
really taking collaboration to the

491
00:26:08.470 --> 00:26:10.600
next level is the goal
to somehow push this into

492
00:26:10.630 --> 00:26:13.660
a product someday. That would
be a nice goal. We

493
00:26:13.660 --> 00:26:15.940
talked to the development groups
all the time to try

494
00:26:15.940 --> 00:26:18.250
to show them our stuff
and get them excited about

495
00:26:18.460 --> 00:26:20.710
maybe taking this into the
next version of visual studio.

496
00:26:21.430 --> 00:26:23.170
So we're, we're in the
middle of that kind of

497
00:26:23.170 --> 00:26:25.480
process right now. And is
that how it typically works

498
00:26:25.480 --> 00:26:27.810
in Microsoft research? I mean,
you know, Andrew bagels just

499
00:26:27.810 --> 00:26:29.770
sitting around, he goes, you
know, we should do this,

500
00:26:30.010 --> 00:26:31.720
you pitch it to your
boss. He gives you some

501
00:26:31.720 --> 00:26:33.520
money, you pull it off
and then you go shop

502
00:26:33.520 --> 00:26:37.330
it around Almost. I don't
really need to pitch ideas

503
00:26:37.330 --> 00:26:39.040
to my boss or get
money. I just do it.

504
00:26:39.970 --> 00:26:41.770
And then when we finish
it, we usually pitch it

505
00:26:41.770 --> 00:26:44.250
around. We have a tech
Fest conference every year. We

506
00:26:44.250 --> 00:26:46.950
already show off what Microsoft
research does to the rest

507
00:26:46.950 --> 00:26:48.990
of Microsoft to try to
get them excited about the

508
00:26:48.990 --> 00:26:51.210
kinds of things that we
do. And if they're in

509
00:26:51.210 --> 00:26:53.160
the product planning phase, they
usually come to us and

510
00:26:53.160 --> 00:26:55.110
say, I have this idea.
I didn't know if it

511
00:26:55.110 --> 00:26:57.480
was doable, but I see
your product. I want that.

512
00:26:58.130 --> 00:26:59.870
And realized that you guys
had that level of freedom

513
00:26:59.870 --> 00:27:01.730
as researchers, you can just
work on whatever is the

514
00:27:01.730 --> 00:27:05.870
most interesting to you. Exactly.
And aren't there researchers that

515
00:27:05.870 --> 00:27:07.550
are working on things that
aren't interesting and they get

516
00:27:07.550 --> 00:27:10.460
feedback that this thing you're
doing is boring. Not that

517
00:27:10.460 --> 00:27:12.470
I think you're doing something
boring. Well, we have other

518
00:27:12.470 --> 00:27:14.690
ways to get evaluation other
than product groups, which is

519
00:27:14.690 --> 00:27:17.600
academic papers and sort of,
if it's going to be

520
00:27:17.600 --> 00:27:20.930
innovative research, work in the
academic community, then that's value

521
00:27:20.930 --> 00:27:22.970
for us as well. And
how long do you work

522
00:27:22.970 --> 00:27:24.860
on something like this before
you decide that it's baked

523
00:27:24.860 --> 00:27:26.120
and you're going to move
on to the next thing.

524
00:27:26.840 --> 00:27:28.610
This was a three month
project I did with an

525
00:27:28.610 --> 00:27:32.030
intern last fall. And I
spent the last month sort

526
00:27:32.030 --> 00:27:35.420
of jazzing it up for
PDC. But other than that,

527
00:27:35.450 --> 00:27:37.310
we haven't really worked on
it that much, but it

528
00:27:37.310 --> 00:27:39.770
is leading into our next
project, which we're currently working

529
00:27:39.770 --> 00:27:42.770
on back at Microsoft. That
is an amazing amount of

530
00:27:42.770 --> 00:27:44.510
work in three months. Now,
is this something that people

531
00:27:44.510 --> 00:27:48.800
can see@theresearch.microsoft.com site or may
see movies about this information?

532
00:27:49.440 --> 00:27:52.100
They can see a webpage
that I wrote about it.

533
00:27:52.100 --> 00:27:53.900
And also I wrote an
academic paper about it that

534
00:27:53.900 --> 00:27:57.980
they can download. If they
do go to research.microsoft.com, the

535
00:27:58.160 --> 00:28:00.920
tool itself is not available
for download to the external

536
00:28:00.920 --> 00:28:03.710
community. Well, thank you so
much. Andrew bagel, a researcher

537
00:28:03.710 --> 00:28:05.900
at Microsoft research for talking
to me today at PDC

538
00:28:05.900 --> 00:28:12.740
2008. Thanks very much continuing
to wander around the Microsoft

539
00:28:12.740 --> 00:28:16.070
research booth here at PDC
at MSR at PDC, I've

540
00:28:16.070 --> 00:28:19.010
just come upon a project
called chess, and I'm speaking

541
00:28:19.010 --> 00:28:22.250
with shells. <inaudible> a researcher
with Microsoft research. So what

542
00:28:22.250 --> 00:28:24.890
is chess? And what are
we looking at? Chess is

543
00:28:24.890 --> 00:28:27.560
a tool that can help
you find and reproduce in

544
00:28:27.560 --> 00:28:31.550
a systematic and deterministic fashion
bugs that we call Heisenberg's.

545
00:28:32.000 --> 00:28:36.380
So highs and bugs. The
name comes from Heisenberg's uncertainty

546
00:28:36.380 --> 00:28:39.500
principle from back in the
thirties, where the idea was

547
00:28:39.500 --> 00:28:41.720
that if you observe a
physical system, then you change

548
00:28:41.720 --> 00:28:45.080
its properties. So you're not
actually observing the system. So

549
00:28:45.080 --> 00:28:47.090
these are the kinds of
bugs that when you try

550
00:28:47.090 --> 00:28:49.610
to observe them to find
their cause the bugs just

551
00:28:49.610 --> 00:28:51.950
disappear into you. Now was
this the gentleman that said

552
00:28:51.950 --> 00:28:54.290
that you could tell where
something was or how fast

553
00:28:54.290 --> 00:28:56.990
it was going, but, but
not, not both time. Exactly.

554
00:28:57.080 --> 00:28:59.290
That's right. I remember someone
telling me that a Heisenberg

555
00:28:59.300 --> 00:29:00.800
had pulled over by the
police one time and the

556
00:29:00.800 --> 00:29:02.240
guy said, you know how
fast you're going? And he

557
00:29:02.240 --> 00:29:05.360
said, no, but I know
exactly where I am. That

558
00:29:05.360 --> 00:29:09.920
might very well be. Yeah,
I understand that. There's been

559
00:29:09.920 --> 00:29:11.570
a number of bugs that
I've had where I'm debugging

560
00:29:11.570 --> 00:29:13.880
something and it just doesn't
do the same thing in

561
00:29:13.880 --> 00:29:17.300
release mode while debugging. It
works one way, but otherwise

562
00:29:17.300 --> 00:29:19.610
it's It doesn't. So sometimes
it works in the release

563
00:29:19.610 --> 00:29:22.880
mode and it doesn't work
in the debug mode, but

564
00:29:22.880 --> 00:29:25.100
they, even, the worst thing
is that when it does

565
00:29:25.100 --> 00:29:27.080
not work in the release
mode and then you have

566
00:29:27.080 --> 00:29:29.060
to patch it and fix
it. And when you try

567
00:29:29.060 --> 00:29:31.100
to run it in the
debug mode, the bug doesn't

568
00:29:31.100 --> 00:29:33.830
happen anymore. And now you're
stuck because you can reproach.

569
00:29:34.190 --> 00:29:36.950
So how does chess make
this easier? Ah, so the

570
00:29:36.950 --> 00:29:39.290
way chess makes us easier
is that we have identified

571
00:29:39.320 --> 00:29:42.340
that the main cause of
these kinds of Heisenberg's Is

572
00:29:42.340 --> 00:29:45.880
concurrency. So concurrency and other
way to understand concurrency is

573
00:29:45.880 --> 00:29:49.210
that in a multiple multithreaded
application, you have these threads

574
00:29:49.210 --> 00:29:53.680
running and their relative timing
causes problems. So sometimes one

575
00:29:53.680 --> 00:29:56.650
thread goes faster. Sometimes another
thread goes faster and depending

576
00:29:56.650 --> 00:29:59.440
on which thread is going
faster, you get different outcomes.

577
00:29:59.920 --> 00:30:04.240
So what chess can do
is systematically generate all possible

578
00:30:04.270 --> 00:30:08.830
orders of events of the
threads in your application. And

579
00:30:08.890 --> 00:30:11.920
when it does that systematically,
it will eventually find hopefully

580
00:30:12.220 --> 00:30:15.880
a particular execution order that
causes a bug. And once

581
00:30:15.880 --> 00:30:18.940
it finds it, it remembers
it. And the next time

582
00:30:18.940 --> 00:30:22.080
you run the application, it
can reprove that. Now does

583
00:30:22.080 --> 00:30:23.700
this where I like we
all like to think that

584
00:30:23.700 --> 00:30:25.770
our programs are deterministic and
they run the same way

585
00:30:25.770 --> 00:30:29.370
every time are these kinds
of concurrency out of ordering

586
00:30:29.370 --> 00:30:32.040
issues, an issue of the
program or doing things like

587
00:30:32.040 --> 00:30:35.520
inserting sleeps and expecting that
their stuff won't be preempted,

588
00:30:35.850 --> 00:30:38.010
or is this just the
nature of computing and nature

589
00:30:38.010 --> 00:30:42.240
that we really didn't realize
as programmers Nature of concurrent

590
00:30:42.240 --> 00:30:45.360
programs. When you ride a
concurrent program in which multiple

591
00:30:45.360 --> 00:30:50.760
threads are executing at the
same time, the runtime does

592
00:30:50.760 --> 00:30:54.420
not guarantee you that a
particular schedule will be taken.

593
00:30:54.720 --> 00:30:57.840
You have to somehow control
the scheduling decisions by using

594
00:30:57.840 --> 00:31:01.830
synchronization. But that leaves room
for still a huge number

595
00:31:01.830 --> 00:31:04.680
of possible schedules that runtime
can choose any one of

596
00:31:04.680 --> 00:31:07.020
them. And that's the real
problem because the runtime can

597
00:31:07.020 --> 00:31:09.270
choose any one of them.
And it doesn't not guarantee

598
00:31:09.270 --> 00:31:10.530
that the next time you
run the program, it will

599
00:31:10.530 --> 00:31:14.130
choose the exact same schedule.
So sometimes a buggy schedule

600
00:31:14.130 --> 00:31:15.930
is chosen. The next time
you run it, that buggy

601
00:31:15.930 --> 00:31:18.900
schedule might not be chosen.
And then you can reproduce

602
00:31:18.900 --> 00:31:21.870
the bug. What does chess
do if I'm unit testing

603
00:31:21.870 --> 00:31:25.050
and application that is multithreaded
to make this not a

604
00:31:25.050 --> 00:31:28.470
problem anymore? Sure. So what
chess will do is it

605
00:31:28.470 --> 00:31:33.330
will run your unit test
in a loop and chess

606
00:31:33.330 --> 00:31:38.220
inserts. What we like to
think of as a user,

607
00:31:38.220 --> 00:31:43.230
more scheduler between the application
and the underlying runtime, that

608
00:31:43.230 --> 00:31:46.800
user mode scheduler intercepts calls
made to the underlying threading

609
00:31:46.800 --> 00:31:52.470
primitives, and that allows chess
to hijack the scheduling and

610
00:31:52.470 --> 00:31:56.490
control it. So every time
chess runs the application in

611
00:31:56.490 --> 00:31:59.080
a loop, it guarantees that
a different thread schedule will

612
00:31:59.080 --> 00:32:02.820
be taken using this mechanism.
Now, if I had a

613
00:32:02.820 --> 00:32:05.520
highly multi-threaded application, couldn't I
get into a cross product

614
00:32:05.520 --> 00:32:08.370
or Cartesian product situation where
the chess has to pick

615
00:32:08.700 --> 00:32:10.740
a really, really large number
of ways that this could

616
00:32:10.740 --> 00:32:12.450
run and it could take
an hour or two to

617
00:32:12.450 --> 00:32:14.520
let me know all the
different possibilities, right? This is

618
00:32:14.520 --> 00:32:19.530
absolutely true. In fact, there
is this commentorial explosion of

619
00:32:19.530 --> 00:32:21.900
the number of possibilities that
happens as the number of

620
00:32:21.900 --> 00:32:25.110
threads and the number of
steps performed by each thread

621
00:32:25.110 --> 00:32:27.480
increase to give you an
idea of the number of

622
00:32:28.830 --> 00:32:31.620
threads is in. And the
number of steps performed by

623
00:32:31.650 --> 00:32:34.980
each thread is key. Then
the total number of possibilities

624
00:32:35.040 --> 00:32:38.310
is exponential in both an
end game that is really

625
00:32:38.310 --> 00:32:43.700
large. So, but what chess
does is it intelligently picks

626
00:32:44.390 --> 00:32:47.330
these executions that it's trying
to explore. And it has

627
00:32:47.390 --> 00:32:52.070
two different ways of combating
this commentorial explosion. One is

628
00:32:52.070 --> 00:32:57.650
that oftentimes a schedule once
executed is equivalent to many

629
00:32:57.650 --> 00:33:00.980
other possible schedules that could
be good, that could be

630
00:33:00.980 --> 00:33:04.490
executed and chess recognizes that
and just prunes them away.

631
00:33:04.910 --> 00:33:08.120
The second thing chess does
is it prioritizes even among

632
00:33:08.120 --> 00:33:11.840
the schedules that it generates
those schedules that are more

633
00:33:11.840 --> 00:33:15.170
likely to yield bugs. So
let me explain that a

634
00:33:15.170 --> 00:33:20.060
little bit more. We have
observed that preemptions, which are

635
00:33:20.060 --> 00:33:25.040
essentially unexpected context switches are
a real problem in causing

636
00:33:25.040 --> 00:33:29.660
concurrency bugs. So what jazz
does is it says that

637
00:33:29.720 --> 00:33:34.310
it works on this hypothesis
that you need to preempt

638
00:33:34.550 --> 00:33:38.390
at unexpected places to cause
bugs, but you don't need

639
00:33:38.510 --> 00:33:42.050
too many such preemptions. So
what you can do is

640
00:33:42.050 --> 00:33:44.630
you can tell chess to
give Jess a parameter that

641
00:33:44.690 --> 00:33:47.990
okay, bound the number of
preemptions by a say two,

642
00:33:48.320 --> 00:33:51.590
and then chess will systematically
generate schedules in which there

643
00:33:51.590 --> 00:33:54.950
are no more preemptions than
two. So it investigates all

644
00:33:54.950 --> 00:33:57.170
possible place for preempting, but
does not have more than

645
00:33:57.170 --> 00:34:01.580
two preemptions. And this is
very useful because most boasts

646
00:34:01.610 --> 00:34:04.010
a lot of concurrency bugs
that we have found. They

647
00:34:04.010 --> 00:34:07.130
just require one or two
preemptions, and we have found

648
00:34:07.130 --> 00:34:10.360
bugs in large applications using
this method. So let me

649
00:34:10.360 --> 00:34:11.650
see if I can paraphrase
what you just said to

650
00:34:11.650 --> 00:34:13.240
make sure that I understand
it. So now I understand

651
00:34:13.240 --> 00:34:15.310
why this is called chess
because you're making many moves

652
00:34:15.310 --> 00:34:17.860
ahead to see what's going
to happen and then make

653
00:34:17.860 --> 00:34:21.070
the right move for the
future. So in the first

654
00:34:21.070 --> 00:34:23.590
example, you're basically making a,
I guess the equivalent of,

655
00:34:23.920 --> 00:34:27.850
of a hash to say
that this, this thread, this

656
00:34:27.850 --> 00:34:30.730
preemption style and that presenters
are they really hashed at

657
00:34:30.730 --> 00:34:33.160
the same thing. So by
testing, either of them, we

658
00:34:33.160 --> 00:34:36.310
have tested that, that scenario,
right? And then in the

659
00:34:36.310 --> 00:34:39.880
other example, you're in, in
the next way, you're making

660
00:34:39.880 --> 00:34:41.530
out basically a bell curve
and you're saying, we're going

661
00:34:41.530 --> 00:34:46.090
to hit 80% of the
Newer half of the bell

662
00:34:46.090 --> 00:34:50.110
curve. Right? So then you
can basically say, how Exhaustively

663
00:34:50.110 --> 00:34:52.030
do we want to explore
the problem space, which is

664
00:34:52.030 --> 00:34:54.400
ultimately what chess systems like
deep blue do they say?

665
00:34:54.640 --> 00:34:56.530
You know, I have a
pretty good confidence of winning.

666
00:34:56.530 --> 00:34:58.660
If I make this move,
I could probably keep going

667
00:34:58.660 --> 00:35:01.480
for another million years, but
I wouldn't necessarily change the

668
00:35:01.480 --> 00:35:04.720
testicle value of me winning
that's exactly Right. So this

669
00:35:04.720 --> 00:35:06.340
is a very good analogy
from the point of view

670
00:35:06.340 --> 00:35:09.460
of chess, chess wins when
it finds a bug. So

671
00:35:09.460 --> 00:35:11.980
there are lots of strategies
for finding bugs, right? A

672
00:35:11.980 --> 00:35:14.740
strategy, essentially, a schedule that
it can pick. And what

673
00:35:14.740 --> 00:35:17.590
chess is doing is in
this astronomical space of schedules,

674
00:35:17.740 --> 00:35:19.840
it's trying to look for
schedules that are more likely

675
00:35:19.840 --> 00:35:22.990
to yield bugs. And these
are schedules that have fewer

676
00:35:22.990 --> 00:35:25.450
preemption. So what does this
look like physically? I add

677
00:35:25.450 --> 00:35:27.790
a reference in my ms.
Unit test application. Do I

678
00:35:27.790 --> 00:35:30.550
attribute things or how do
I get chest involved? It's

679
00:35:30.550 --> 00:35:33.760
actually very simple. If you
have visual studio team test

680
00:35:33.770 --> 00:35:35.920
installed on your machine, then
all you have to do

681
00:35:35.920 --> 00:35:40.230
is install chess also, and
chess has, is incorporated. Chess

682
00:35:40.230 --> 00:35:43.440
can be then invoked by
giving a host type attribute

683
00:35:43.590 --> 00:35:47.150
called chess to your unit
test. And is this acting

684
00:35:47.150 --> 00:35:49.310
as a profiler or how
are you injecting yourself into

685
00:35:49.310 --> 00:35:53.180
this process? Ah, so basically
what happens is that when

686
00:35:53.180 --> 00:35:57.080
the deal gets loaded into
memory, that the dealer containing

687
00:35:57.080 --> 00:36:01.190
the unit test checks just
hooks into it and it

688
00:36:01.220 --> 00:36:04.730
does IRL rewriting, so that
all the calls to the

689
00:36:04.730 --> 00:36:07.700
system dot threading, API, all
the concurrency API, they get

690
00:36:07.700 --> 00:36:11.900
rerouted to chest rappers and
the chest wrappers make callbacks

691
00:36:11.900 --> 00:36:14.660
to the chess user mode
scheduler. And in addition, pause

692
00:36:14.660 --> 00:36:18.290
those calls to the actual
API. So where can people

693
00:36:18.290 --> 00:36:20.390
learn more about this and
is this something that can

694
00:36:20.390 --> 00:36:22.400
be downloaded in a research
form and, and played with

695
00:36:22.400 --> 00:36:27.500
it all? You can get
lots of information about chess

696
00:36:28.130 --> 00:36:37.400
from the chess website and
the website is research.microsoft.com/projects/chess. And

697
00:36:37.400 --> 00:36:39.200
I'll put links to that
on the show site. Oh,

698
00:36:39.200 --> 00:36:42.830
that'd be great. And the
website contains a download of

699
00:36:42.830 --> 00:36:48.020
chess for unmanaged code and
a whole bunch of research

700
00:36:48.020 --> 00:36:53.690
papers and PowerPoint presentations explaining
the chess system. In addition,

701
00:36:54.680 --> 00:36:57.950
the latest set of chess
bits will be available via

702
00:36:57.950 --> 00:37:02.840
the dev labs portal in
a few months. And these

703
00:37:02.840 --> 00:37:06.080
bits will contain both unmanaged
and managed chess as well

704
00:37:06.080 --> 00:37:10.940
as the visual studio team
test integration of managers. Fantastic.

705
00:37:10.970 --> 00:37:13.160
Thank you so much. I
was clear a researcher from

706
00:37:13.160 --> 00:37:16.400
Microsoft research for sharing chest
with me and making concurrency

707
00:37:16.850 --> 00:37:19.760
easier for the masses. You're
welcome, Scott. Thanks for coming

708
00:37:19.760 --> 00:37:24.170
by Continuing to wander around
here at MSR at PDC,

709
00:37:24.170 --> 00:37:26.570
and I've stumbled upon Jared
Jackson and I'm looking at

710
00:37:26.570 --> 00:37:28.850
a big flat screen monitor
with a really beautiful view

711
00:37:28.850 --> 00:37:31.490
of a, of a map
of a topological map. And

712
00:37:31.490 --> 00:37:34.610
then I've got some what
appears to be windows, workflow

713
00:37:34.760 --> 00:37:37.340
workflows? Well, what am I
looking at Jared? So you're

714
00:37:37.340 --> 00:37:39.380
looking at two things on
the big screen. The map

715
00:37:39.380 --> 00:37:42.500
that you saw there is
actually a application called Cove.

716
00:37:42.950 --> 00:37:45.110
It's, it's written by the
university of Washington who are

717
00:37:45.110 --> 00:37:47.180
a partner of ours. It
works with a lot like

718
00:37:47.180 --> 00:37:49.460
a virtual earth, except that
when you get to the

719
00:37:49.460 --> 00:37:51.770
ocean, it doesn't stay flat
across the ocean. It'll actually

720
00:37:51.770 --> 00:37:54.320
go deep, deep down into
what they call the symmetry,

721
00:37:54.650 --> 00:37:58.940
which is the topography only
underneath the water. And what

722
00:37:58.940 --> 00:38:02.570
we've done is at Microsoft
research is which is on

723
00:38:02.570 --> 00:38:05.750
your other screen, is this
product called Trident. And what

724
00:38:05.750 --> 00:38:08.420
it is is it's an
interface into windows workflow for

725
00:38:08.420 --> 00:38:13.640
scientists who are doing this
research. So what came out

726
00:38:13.640 --> 00:38:15.500
of the oceanography side of
things here in the, our

727
00:38:15.500 --> 00:38:18.080
partners over at the university
of Washington and a project

728
00:38:18.080 --> 00:38:21.830
called Neptune, what they've done
is they've taken a whole

729
00:38:21.830 --> 00:38:24.950
bunch of fiber optic cable
and actually trenched it into

730
00:38:24.950 --> 00:38:27.710
the bottom of the ocean
and then go way out

731
00:38:27.710 --> 00:38:30.350
from the shore. And they're
going all around the Juan

732
00:38:30.350 --> 00:38:32.660
de Fuca plate. That's just
off the coast of Washington.

733
00:38:32.930 --> 00:38:35.470
And they're reading a bunch
of values, you know, heat,

734
00:38:35.500 --> 00:38:39.250
temperature, salinity, current, things like
that. And they bring in

735
00:38:39.250 --> 00:38:41.320
all that data and it
represents quite a bit of

736
00:38:41.320 --> 00:38:45.850
data, say these onsite on
chores data centers, then they

737
00:38:45.850 --> 00:38:48.280
need to do computation on
top of that so that

738
00:38:48.280 --> 00:38:50.850
they can get to an
end result data product. So

739
00:38:50.850 --> 00:38:52.770
these aren't developers, and this
is why they're not using

740
00:38:52.770 --> 00:38:54.930
visual studio. These are researchers
and you're trying to make

741
00:38:54.930 --> 00:38:57.150
it easier for them. Cause
this appears to be a

742
00:38:57.150 --> 00:39:00.270
windows workflow workflow, and you
have the workload Steiner, but

743
00:39:00.270 --> 00:39:04.380
the, the ID is vastly
simplified. This doesn't look like

744
00:39:04.380 --> 00:39:07.080
visual studio. So there's actually
two tiers. The people who

745
00:39:07.080 --> 00:39:10.200
do research in the research
community, the researchers themselves, and

746
00:39:10.200 --> 00:39:13.830
then they tend to have
postdocs and grad students that

747
00:39:13.830 --> 00:39:16.110
are doing some of the
grunt work behind the scenes.

748
00:39:16.530 --> 00:39:19.020
Well, that's all good and
welfare to getting the coding

749
00:39:19.020 --> 00:39:21.720
done, but the researchers are
not programmers and they need

750
00:39:21.720 --> 00:39:23.820
to have an interface where
they can take whatever the

751
00:39:24.120 --> 00:39:26.340
programmers have done it, and
actually be able to not

752
00:39:26.340 --> 00:39:29.010
just run it, but, but
to change things, research is

753
00:39:29.010 --> 00:39:30.930
changing all the time. So
they want to see a

754
00:39:30.930 --> 00:39:33.600
data product and then maybe
make an adjustment to it.

755
00:39:33.990 --> 00:39:36.630
And by giving them this
simplified interface, they can go

756
00:39:36.630 --> 00:39:38.760
in and just get some
dragging and dropping and some

757
00:39:38.760 --> 00:39:42.060
double clicking and typing. They
changed the parameters all around

758
00:39:42.060 --> 00:39:43.800
and get a whole new
date, data product out of

759
00:39:43.800 --> 00:39:45.810
it. And that really is
the point in the story

760
00:39:45.810 --> 00:39:47.700
that the windows workflow team
is saying is that you

761
00:39:47.700 --> 00:39:50.190
might build an application that
is largely complete, but that,

762
00:39:50.410 --> 00:39:52.890
that business logic in the
middle might be changing as

763
00:39:52.890 --> 00:39:54.810
your business needs change. So
that makes total sense where

764
00:39:54.810 --> 00:39:56.820
our researcher would want to
use a visual workflow to,

765
00:39:57.030 --> 00:39:59.700
to do their, to do
their work. What is this

766
00:39:59.700 --> 00:40:03.840
workflow doing here? Take healer.
One is the simplified version

767
00:40:03.850 --> 00:40:06.120
of one that's run over
and over again on notion

768
00:40:06.120 --> 00:40:08.700
and graphic side, they read
a file it's called net

769
00:40:08.700 --> 00:40:12.150
CDF. The format is, and
net CDF is, is two

770
00:40:12.150 --> 00:40:16.830
oceanographers. Like XML is test
developers. They read that and

771
00:40:17.040 --> 00:40:19.500
then they do a processing
step on it. And that

772
00:40:19.500 --> 00:40:21.510
can get really involved in
our demo here. All it

773
00:40:21.510 --> 00:40:23.880
does is it filters out
some of the outlier values.

774
00:40:24.420 --> 00:40:27.120
And from that they produce
a new net CDF file.

775
00:40:27.120 --> 00:40:29.550
That's the third step in
our, in our particular workflow

776
00:40:29.550 --> 00:40:32.430
here. And once that's done,
you have a lot of

777
00:40:32.430 --> 00:40:34.860
options. Do you, do you
publish it? Do you send

778
00:40:34.860 --> 00:40:37.980
it off to, to this
visualizer over here? Well, that's

779
00:40:37.980 --> 00:40:40.290
what we're doing. The very
last step is called COVID

780
00:40:40.320 --> 00:40:43.800
messages sends a message to
our underwater visualizer called Cove

781
00:40:44.430 --> 00:40:46.350
that tells her that there's
a new data product available.

782
00:40:46.350 --> 00:40:48.630
And it will visualize that.
Can you run this right

783
00:40:48.630 --> 00:40:50.310
now and make something happen
on the big screen here?

784
00:40:50.310 --> 00:40:52.230
We're looking at a map,
a topographical map. It's a

785
00:40:52.240 --> 00:40:55.350
big, big fault line there.
I had no idea that

786
00:40:55.350 --> 00:40:57.720
was floating right off the
coast. There. It's really quite

787
00:40:57.720 --> 00:41:02.250
interesting to see the, the
underlying surface of the ocean.

788
00:41:02.250 --> 00:41:04.680
I just don't think about
this really is a planet.

789
00:41:04.680 --> 00:41:08.860
That's a bunch of different
floating template. You know, my

790
00:41:08.860 --> 00:41:11.010
I've got a young, a
young child in his, his

791
00:41:11.010 --> 00:41:12.960
skull has just come together
and a doctor was telling

792
00:41:12.960 --> 00:41:14.850
me, well, it's really an
eight parts that are floating

793
00:41:14.850 --> 00:41:16.440
around his brain. And the
earth seems to be the

794
00:41:16.440 --> 00:41:18.870
same way. So you've just
launched this workflow and it's

795
00:41:18.870 --> 00:41:21.570
popped up a little balloon
help. And the tray here

796
00:41:21.570 --> 00:41:24.060
and something is firing off
some messages if appeared on

797
00:41:24.060 --> 00:41:26.880
the, on the screen what's
happening. So what happened? The

798
00:41:26.880 --> 00:41:29.850
workflow launched over here on
one machine. And the very

799
00:41:29.850 --> 00:41:32.520
last step after about about
a minute of processing was

800
00:41:32.520 --> 00:41:34.820
that it had a file
ready for it. And it

801
00:41:34.820 --> 00:41:37.580
sent a message to Cove
saying that something was available

802
00:41:37.580 --> 00:41:39.230
and we just had a
window pop up that said,

803
00:41:39.230 --> 00:41:41.150
Hey, I have a new
data set available. Do you

804
00:41:41.150 --> 00:41:43.750
want to load it? And
It looks like it says,

805
00:41:43.750 --> 00:41:46.090
model file from Monterey. So
you're doing something off the

806
00:41:46.090 --> 00:41:48.460
coast of Monterey and there's
a big fault line there.

807
00:41:48.460 --> 00:41:52.480
So we're processing that information.
It says completed a load,

808
00:41:52.480 --> 00:41:55.000
that model file for Monterey
Bay and see what happens.

809
00:41:56.900 --> 00:41:59.620
This is all very friendly.
The researchers not looking at

810
00:41:59.620 --> 00:42:01.960
any kind of code, there's
nothing textual here. They're not

811
00:42:01.960 --> 00:42:04.180
really sweating any of the
details. So while we're waiting

812
00:42:04.180 --> 00:42:05.980
for the progress bar here,
I'm just, I'm just thinking

813
00:42:05.980 --> 00:42:07.810
that this really is kind
of the whole point of

814
00:42:07.810 --> 00:42:11.200
windows workflow. You might create
an application that is almost

815
00:42:11.200 --> 00:42:13.750
a little development environment, but
it's specific to the business.

816
00:42:13.750 --> 00:42:16.780
In this case, the business
of research is we're trying

817
00:42:16.780 --> 00:42:19.840
to accomplish. You find that
the research has really understand

818
00:42:19.840 --> 00:42:23.260
what this visualization, right? This
is a little bit separate

819
00:42:23.260 --> 00:42:25.570
than the visualization that you'll
happen to see in, in

820
00:42:25.720 --> 00:42:28.270
safe. You opened up a
workflow in the visual studio

821
00:42:28.270 --> 00:42:31.750
designer. And one of the
big differentiators is the fact

822
00:42:31.750 --> 00:42:35.080
that data is a first
class visualization inside of this.

823
00:42:35.500 --> 00:42:38.740
Researchers are very concerned about
what happens to their data

824
00:42:38.740 --> 00:42:41.470
every step of the way.
And we visualize that directly

825
00:42:41.590 --> 00:42:44.800
in inside of Trident. This
reminds me of applications like

826
00:42:44.800 --> 00:42:48.280
Yahoo pipes, where they're hiding
an entire programming language around

827
00:42:48.280 --> 00:42:51.370
just moving data from one
process to another. And all

828
00:42:51.370 --> 00:42:53.440
you ever think about is
data. There's all sorts of

829
00:42:53.440 --> 00:42:55.900
control, flow things, but ultimately
they're just trying to filter

830
00:42:55.900 --> 00:42:59.110
or sort, or remodify. Yeah,
you could argue that in

831
00:42:59.140 --> 00:43:03.550
windows, workflow control flow is
the number one artifact for

832
00:43:03.550 --> 00:43:06.730
how everything gets executed. From
our point of view, data,

833
00:43:06.760 --> 00:43:09.310
data flow is the number
one thing. Control flow is

834
00:43:09.310 --> 00:43:11.920
still important, but it's probably
second seat to the flow

835
00:43:11.920 --> 00:43:14.290
of the data itself. And
did you have to write

836
00:43:14.290 --> 00:43:18.370
your own kind of owner
draw or custom representation of

837
00:43:18.370 --> 00:43:19.960
what a workflow is? So
this is, this is an

838
00:43:19.960 --> 00:43:22.960
entirely custom WPF application, as
well as the designer surface

839
00:43:22.960 --> 00:43:26.650
itself. Yeah, we did. This
is based on windows workflow,

840
00:43:26.680 --> 00:43:29.740
3.5, what you're seeing here.
And so it was actually

841
00:43:29.770 --> 00:43:32.920
less code to write a
WPF app that we're looking

842
00:43:32.920 --> 00:43:35.680
into the workflow and then
redesign it all from our

843
00:43:35.680 --> 00:43:38.680
understanding and what we've seen
in WWF 4.0, when that

844
00:43:38.680 --> 00:43:41.920
starts coming out, we can
probably rehost the designer that's

845
00:43:41.920 --> 00:43:44.800
there. Well, this is a
fairly simple workflow with four

846
00:43:44.800 --> 00:43:47.740
boxes and inputs and outputs.
Can you drill into this

847
00:43:47.740 --> 00:43:49.150
and look at the other
nodes or what are these

848
00:43:49.150 --> 00:43:51.670
nodes that don't have lines
connecting them? I can see

849
00:43:51.670 --> 00:43:53.860
here that name, you know,
trial name goes to file

850
00:43:53.860 --> 00:43:56.410
name and input goes to
output, but can you drill

851
00:43:56.410 --> 00:43:59.320
in at all? So if
you see a line between

852
00:43:59.320 --> 00:44:01.480
the output of one activity
and the input of another,

853
00:44:01.480 --> 00:44:04.240
that means there's a data
binding. So the result of

854
00:44:04.240 --> 00:44:06.880
that, the output from the
first activity will be the

855
00:44:06.880 --> 00:44:09.580
input for the other one,
but you can set things

856
00:44:09.580 --> 00:44:12.130
just like you would like
in a, in the parameters

857
00:44:12.130 --> 00:44:15.580
of a method. So if
you double click on an

858
00:44:15.580 --> 00:44:18.250
input, for instance, it'll bring
up a dialogue with a

859
00:44:18.250 --> 00:44:21.100
box where you can actually
enter in the value as

860
00:44:21.100 --> 00:44:23.350
a, as a literal, as
opposed to something that's bound.

861
00:44:23.830 --> 00:44:26.620
Every one of every one
of those is set up

862
00:44:26.620 --> 00:44:28.990
to do that. And these
solid ones. In fact, there's,

863
00:44:29.480 --> 00:44:32.070
there's a, there's a key,
these are color, and there's

864
00:44:32.070 --> 00:44:33.570
a key. You can drop
down to find out what

865
00:44:33.570 --> 00:44:35.790
the types are of all
the inputs and outputs. So

866
00:44:35.790 --> 00:44:38.670
that helped you match which,
which ones would link together.

867
00:44:39.210 --> 00:44:41.520
And on top of that,
there's a sense of required

868
00:44:41.520 --> 00:44:44.610
inputs and optional inputs. So
if it looks filled in,

869
00:44:44.610 --> 00:44:46.590
like, you'll see on the
input for our processing step,

870
00:44:46.590 --> 00:44:48.750
you have to have that
data. These other two are

871
00:44:48.750 --> 00:44:51.150
optional. Interesting. Then when you
pull down the list of

872
00:44:51.150 --> 00:44:53.580
data types, you had things
that I recognized like string

873
00:44:53.580 --> 00:44:56.570
and end, and then you
had hypercube string in and

874
00:44:56.580 --> 00:44:59.130
hypercube that exactly the three
top data types that I'm

875
00:44:59.130 --> 00:45:01.650
using. Well, string an in
certainly as way up there,

876
00:45:01.890 --> 00:45:05.910
hypercube is something that's very
specific to. And anybody who's

877
00:45:05.910 --> 00:45:09.420
into computation in the scientific
realm would understand it. It's

878
00:45:09.420 --> 00:45:13.530
a four-dimensional table, basically. So
this is the hypercube, like

879
00:45:13.530 --> 00:45:15.720
the kind that I would
think about it, it's a

880
00:45:15.720 --> 00:45:17.430
cube, but then you add
another dimension and then it

881
00:45:17.430 --> 00:45:21.270
becomes hard to visualize it
is. And so in the

882
00:45:21.270 --> 00:45:24.510
scientists' sense, it's X, Y,
Z, and T, right? So

883
00:45:24.510 --> 00:45:27.450
it's, it's three dimensional space,
plus the time series and

884
00:45:27.450 --> 00:45:29.940
think that X, Y you
get in high school Z

885
00:45:29.940 --> 00:45:31.620
you get, when you go
to college and then nobody

886
00:45:31.620 --> 00:45:34.320
gets T until they get
a PhD. Right. Well, does

887
00:45:34.320 --> 00:45:37.980
anybody really understand time? Yeah,
hopefully the guys at Microsoft

888
00:45:37.980 --> 00:45:40.230
research do, because I sure
don't with my community college

889
00:45:40.230 --> 00:45:42.710
education. So it looks like
our, a progress bar here

890
00:45:42.710 --> 00:45:45.570
is at 98% and it's
marching on. And then what

891
00:45:45.570 --> 00:45:47.130
are we about to up
98? What are we going

892
00:45:47.130 --> 00:45:49.320
to see here on our
giant, our giant map, I'd

893
00:45:49.320 --> 00:45:51.240
hate to ruin the surprise,
but I think we're probably

894
00:45:51.240 --> 00:45:54.390
going to zoom into Monterey
Bay and see some temperature

895
00:45:54.390 --> 00:45:56.670
values. So we just had
a heat map appear and

896
00:45:56.670 --> 00:45:58.680
we zoomed in on Monterey
Bay. And there's a lot

897
00:45:58.680 --> 00:46:00.390
of information here. It's a
heat map because we can

898
00:46:00.390 --> 00:46:03.420
see that the water is
one temperature here and another

899
00:46:03.420 --> 00:46:05.460
temperature there, but there's also
depth. And what else are

900
00:46:05.460 --> 00:46:07.950
we looking at? It's actually
also a time series. So

901
00:46:07.950 --> 00:46:10.380
it'll animate. If we click
right here and you have

902
00:46:10.380 --> 00:46:12.270
to look kind of closely,
but you'll see, as, as

903
00:46:12.270 --> 00:46:14.190
the time goes on, you
can see the timescale and

904
00:46:14.190 --> 00:46:16.500
then in the bottom corner,
and then the colors actually

905
00:46:16.500 --> 00:46:18.660
animate and show you where,
and when it's getting hot

906
00:46:18.660 --> 00:46:21.750
or when it's getting colder.
Interesting, you know, it's got,

907
00:46:21.750 --> 00:46:23.670
this reminds me of those
things you see at the

908
00:46:23.670 --> 00:46:26.340
sharper image where it's a
play a plane that's filled

909
00:46:26.340 --> 00:46:28.410
with nails and you put
your hand on it and

910
00:46:28.410 --> 00:46:29.760
it pushes some of the
nails up and some of

911
00:46:29.760 --> 00:46:33.900
them down. So you've got
not just heat and time

912
00:46:34.050 --> 00:46:37.110
and depth, but temperature at
depth. So there's a lot

913
00:46:37.110 --> 00:46:39.090
of information being displayed there,
which explains why it took

914
00:46:39.090 --> 00:46:42.600
so long to load up
across a network, even, you

915
00:46:42.600 --> 00:46:44.640
know, so this is real
data. This wasn't, can you

916
00:46:44.640 --> 00:46:47.010
really brought this down from
the university of Washington? Yeah.

917
00:46:47.010 --> 00:46:49.140
I'll even show you can,
if you want to have

918
00:46:49.140 --> 00:46:51.000
any question about that, you
go to the first activity.

919
00:46:51.000 --> 00:46:52.920
Look what the input happens
to be as coming from

920
00:46:52.920 --> 00:46:55.680
some skyline server at the
university of Washington. This is

921
00:46:55.680 --> 00:46:59.310
actually a Monterey Bay data
from, I think, 2005 actually.

922
00:46:59.520 --> 00:47:02.910
Well, so he's just, double-clicked
on, on the workflow here,

923
00:47:02.910 --> 00:47:04.350
brought up a file name
and it's just a straight

924
00:47:04.350 --> 00:47:06.990
HTTP address, or you're pulling
this directly from, from their

925
00:47:06.990 --> 00:47:09.600
web, their web server. Absolutely.
Cool. Well, thank you so

926
00:47:09.600 --> 00:47:11.400
much, Jared Jackson for taking
the time to talk to

927
00:47:11.400 --> 00:47:14.820
me here at Microsoft research
at PDC. Thank you.

