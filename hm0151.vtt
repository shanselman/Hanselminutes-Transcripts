WEBVTT FILE

1
00:00:04.380 --> 00:00:16.610
<inaudible> from Hanselman it's dot
com. It's Hanselman. It's a

2
00:00:16.610 --> 00:00:20.840
weekly discussion with web developer
and technologist Scott Hanselman hosted

3
00:00:20.840 --> 00:00:25.820
by Carl Franklin. This is Lawrence Ryan
announcing show number one 51

4
00:00:25.970 --> 00:00:32.090
recorded live Tuesday, February 17th, 2009. Supports
for Hanselman it's just provided

5
00:00:32.090 --> 00:00:36.050
by Tellerik rad controls. The
most comprehensive suite of components

6
00:00:36.050 --> 00:00:46.370
for windows forms and asp.net
web applications. online@wwwdottelerikdotcomandby.net developers journal

7
00:00:46.460 --> 00:00:52.100
the world's leading.net developer magazine
online at www dot <inaudible>

8
00:00:52.130 --> 00:00:56.510
dot com. In this episode,
Scott talks with ward Cunningham

9
00:00:56.570 --> 00:01:00.200
and James shore about fit
and fitness. Hi, this is

10
00:01:00.200 --> 00:01:02.390
Scott Hanselman and this is
another episode of Hansel minutes.

11
00:01:02.780 --> 00:01:05.450
I'm here at the open
agile Northwest conference, and I'm

12
00:01:05.450 --> 00:01:09.680
sitting down today with James
shore, agile practitioner and author

13
00:01:09.680 --> 00:01:13.160
of the art of agile
development. Hi Scott. Hi, how's

14
00:01:13.160 --> 00:01:15.530
it going, sir? And I'm
also here with ward Cunningham,

15
00:01:15.530 --> 00:01:19.670
inventor of the Wiki and
CTO of about us.org and

16
00:01:19.670 --> 00:01:22.160
one of the first practitioners
of a patterns of bringing

17
00:01:22.160 --> 00:01:24.230
patterns to the world. Thank
you, sir. Ah, it's great

18
00:01:24.230 --> 00:01:27.350
to be here. So I
think that we should talk

19
00:01:27.350 --> 00:01:31.490
about fit and fitness. And
I think that although you

20
00:01:31.500 --> 00:01:34.820
sir, are looking very fit
and lately, and I understand

21
00:01:34.820 --> 00:01:36.500
you're doing a lot of
bike riding the fit and

22
00:01:36.500 --> 00:01:38.480
fitness that we're talking about
today is a little different.

23
00:01:38.480 --> 00:01:40.550
So maybe one of you
could familiarize us with those

24
00:01:40.550 --> 00:01:43.940
terms for those of the
listeners that aren't familiar. Sure

25
00:01:44.360 --> 00:01:47.090
fit is well, it's a
tool that we're created. So

26
00:01:47.090 --> 00:01:49.220
maybe I'll give my perspective
and then ask him to

27
00:01:49.280 --> 00:01:52.370
talk about it. More fit
is as I see it,

28
00:01:52.370 --> 00:01:56.360
a tool for agile teams
to communicate well with our

29
00:01:56.360 --> 00:01:58.070
customers. And of course this
can be more than agile

30
00:01:58.070 --> 00:02:00.860
teams, but agile teams really
focused on communicating well with

31
00:02:00.860 --> 00:02:07.100
their customers. Fitness is based
on fit and a lot

32
00:02:07.100 --> 00:02:09.770
of people use, think of
fit and fitness as testing

33
00:02:09.770 --> 00:02:12.020
tools, but I think of
them as customer communication tools,

34
00:02:14.300 --> 00:02:20.570
yeah, the fit fits a
creation in a short period

35
00:02:20.570 --> 00:02:24.290
of time to try to
make a reusable framework that

36
00:02:24.920 --> 00:02:28.010
captured the essence of what
I had done. Maybe four

37
00:02:28.010 --> 00:02:34.400
times over in the course
of different projects needing to

38
00:02:34.400 --> 00:02:37.010
do this communication in the
past, I had done it

39
00:02:37.040 --> 00:02:42.410
in, you know, frameworks that
address the specific needs of

40
00:02:42.410 --> 00:02:46.670
the specific projects and weren't
reusable in any way. And

41
00:02:46.670 --> 00:02:50.330
this was an attempt to
make something reusable and, and

42
00:02:50.570 --> 00:02:54.380
both the Gemini and, and
quite a number of other

43
00:02:54.380 --> 00:02:58.430
people have put, put a
lot of effort into fit

44
00:02:58.460 --> 00:03:02.710
and then combining that with
Wiki to be a repository

45
00:03:02.710 --> 00:03:06.300
of information and that's a
fitness. Okay. So to put

46
00:03:06.300 --> 00:03:09.330
this in concrete terms, someone
is some software that someone

47
00:03:09.330 --> 00:03:13.350
downloads and, and uses and
puts into their workflow. Yeah,

48
00:03:13.520 --> 00:03:16.740
Yeah. It would be a,
it would be software it's.

49
00:03:19.170 --> 00:03:24.630
The original was a, was
a, a Java framework and

50
00:03:24.810 --> 00:03:27.480
probably what was it, 10
classes or something like that,

51
00:03:27.510 --> 00:03:31.470
maybe 15 classes. So not
a very big framework, but

52
00:03:31.650 --> 00:03:36.000
more importantly, it established a
style of testing and we

53
00:03:36.000 --> 00:03:40.020
had the opportunity to, to
implement it in multiple languages.

54
00:03:40.020 --> 00:03:45.810
So I asked Jim who
is, was into.net much more

55
00:03:45.810 --> 00:03:48.720
than I was to help
me translate what I'd done

56
00:03:48.720 --> 00:03:52.920
in java.net. And so Jim
did the.net version of the

57
00:03:52.920 --> 00:03:56.580
framework. And, and the idea
is if somebody was converting

58
00:03:56.580 --> 00:04:00.960
from Java to.net, they could
save all the tests that

59
00:04:00.960 --> 00:04:04.500
they wrote because the tests
would be written as a

60
00:04:04.500 --> 00:04:08.730
file that that fit would
read. The, the format I

61
00:04:08.730 --> 00:04:13.620
chose was, was HTML and
wanting to put the facts

62
00:04:13.620 --> 00:04:16.500
that were going to be
the, you know, the details

63
00:04:16.500 --> 00:04:21.900
of the test in, in,
in tables. But that left

64
00:04:21.900 --> 00:04:25.320
all the space around the
tables to describe why you

65
00:04:25.320 --> 00:04:28.170
cared about those facts and
that made it a communication

66
00:04:28.170 --> 00:04:31.200
tool. Okay. So the pros
around the tables is ignored

67
00:04:31.200 --> 00:04:33.780
by the tool and the
tables themselves are the data

68
00:04:33.810 --> 00:04:36.420
that drives the test. Let
me give you an example

69
00:04:36.420 --> 00:04:38.910
because it's, it's hard to
describe, I think it's still

70
00:04:38.910 --> 00:04:41.280
kind of in the abstract.
Yeah. People are familiar with

71
00:04:41.320 --> 00:04:43.770
unit tests and people are
understand how to write programs

72
00:04:43.770 --> 00:04:46.740
to test things, but So
let me just sort of

73
00:04:46.740 --> 00:04:49.020
give an example. It's, it's
kind of magical what fit

74
00:04:49.020 --> 00:04:50.550
does and when you first
see it, and a lot

75
00:04:50.550 --> 00:04:52.440
of people who've done this,
they get very excited about

76
00:04:52.440 --> 00:04:55.140
the possibilities. What you do
is you write a document

77
00:04:55.230 --> 00:04:57.960
in word or in Wiki,
and it has a bunch

78
00:04:57.960 --> 00:05:00.000
of tables in it that
say that software behaves this

79
00:05:00.000 --> 00:05:03.600
way and you run it
through fit or fitness and

80
00:05:03.630 --> 00:05:06.270
those tables turn green and
red saying, yes, it runs

81
00:05:06.270 --> 00:05:09.300
this way or no, it
doesn't. And I'm under the

82
00:05:09.300 --> 00:05:12.150
covers. It's actually quite simple.
But seeing this happen where

83
00:05:12.150 --> 00:05:14.460
you've got a document that
has pros and it sort

84
00:05:14.460 --> 00:05:17.670
of looks like a specification
or a requirements document, suddenly

85
00:05:17.670 --> 00:05:20.880
telling you whether or not
it's right or not is

86
00:05:20.880 --> 00:05:24.930
really cool. And it's a
and M I think really

87
00:05:24.930 --> 00:05:28.230
interesting. So the way I
thought about it is, is

88
00:05:28.230 --> 00:05:30.900
that we write a document
that says what we desire.

89
00:05:31.620 --> 00:05:35.220
And then what we do
is we run, fit against

90
00:05:35.220 --> 00:05:39.240
the system as built today.
And it annotates the document

91
00:05:39.390 --> 00:05:42.240
by covering individual cells, red
or green. It says this

92
00:05:42.240 --> 00:05:44.340
number is going to come
up 55. And if it

93
00:05:44.340 --> 00:05:47.220
comes up 55, it'll be
green. And if it comes

94
00:05:47.220 --> 00:05:49.980
at 57, it'll be red.
So what is the language

95
00:05:49.980 --> 00:05:51.810
that's in the table? Is
it, are these verbs and

96
00:05:51.810 --> 00:05:54.480
nouns that are known to
fit typically Tends to be

97
00:05:54.480 --> 00:05:58.040
just facts. So if you
were doing a financial software

98
00:05:58.070 --> 00:06:01.250
VZ, it would be dates
and dollar amounts and stuff

99
00:06:01.250 --> 00:06:05.090
like that. And you know,
if, if maybe you're talking

100
00:06:05.090 --> 00:06:07.670
about some kind of financial
instrument, you might have to

101
00:06:07.670 --> 00:06:10.100
run 10 or 15 cases.
So you'll make a table

102
00:06:10.100 --> 00:06:12.920
that has 10 or 15
rows, and I'll have as

103
00:06:12.920 --> 00:06:16.190
many columns as you need
to describe that financial instrument.

104
00:06:17.270 --> 00:06:19.430
If you have a different
financial instrument, you make a

105
00:06:19.430 --> 00:06:21.580
different table with a different
number of columns. And how

106
00:06:21.580 --> 00:06:24.880
does this interface with my
software? That's what fit does

107
00:06:24.880 --> 00:06:29.740
fit would read the table,
read the HTML, and then

108
00:06:29.740 --> 00:06:33.430
make calls into your software
to check those numbers, check

109
00:06:33.430 --> 00:06:36.970
the numbers, and then writes
a new HTML document that

110
00:06:36.970 --> 00:06:39.850
has the annotations has the
color. And of course you

111
00:06:39.850 --> 00:06:42.520
change your software tomorrow. You
run it again, and you

112
00:06:42.520 --> 00:06:45.310
get a different document with
different colors because your program

113
00:06:45.310 --> 00:06:48.100
has improved, But you wouldn't
call this a unit testing

114
00:06:48.100 --> 00:06:50.620
tool, or is this, it's
not really unit testing. It's

115
00:06:50.620 --> 00:06:53.830
like Testing in the sense
that we're going to call

116
00:06:53.830 --> 00:06:57.490
the actual objects that are
present in the program. But

117
00:06:57.490 --> 00:07:01.510
we tend to write tests
at this level tests that,

118
00:07:01.570 --> 00:07:05.260
that are about the concerns
of your customers. Instead of

119
00:07:05.260 --> 00:07:08.590
being about the concerns of
your developers. Unit testing is

120
00:07:08.590 --> 00:07:11.710
very much about what the
API is that the programmers

121
00:07:11.710 --> 00:07:15.880
have to live. And in
fact, we really want these

122
00:07:15.940 --> 00:07:19.060
tests or examples. I prefer
to call them examples. Okay.

123
00:07:19.090 --> 00:07:20.950
We want these examples of
how the program is supposed

124
00:07:20.950 --> 00:07:24.430
to behave to be sourced
from the customer. I mean,

125
00:07:24.430 --> 00:07:27.190
ideally they're writing it because
this is a word document

126
00:07:27.190 --> 00:07:29.290
or a Wiki document. We
want them to write it

127
00:07:30.430 --> 00:07:33.430
at best in practice. Maybe
we're just saying, Hey, can

128
00:07:33.430 --> 00:07:35.560
you give me some examples
on the whiteboard and they're

129
00:07:35.830 --> 00:07:39.310
copying those yet. Okay. So
the difference between fit and

130
00:07:39.310 --> 00:07:43.840
fitness, just to be clear
for the listener fit is

131
00:07:43.840 --> 00:07:47.740
a command line tool that
Ord wrote in Java. And

132
00:07:47.740 --> 00:07:50.590
then we translate it into
C sharp and other people

133
00:07:50.590 --> 00:07:55.000
translated into other languages. Okay.
Fit ness is a Wiki

134
00:07:55.000 --> 00:07:59.080
package that originally called the
fit command line tool. And

135
00:07:59.080 --> 00:08:03.040
now integrates its own version
of fit into this Wiki

136
00:08:03.040 --> 00:08:05.470
package. So the Wiki allows
you to write your documents,

137
00:08:05.830 --> 00:08:08.140
do version control on them.
And then it also has

138
00:08:08.140 --> 00:08:11.980
a little run button that
says, execute this document and

139
00:08:12.040 --> 00:08:14.290
annotate it and tell me
what's going on in the

140
00:08:14.290 --> 00:08:16.030
software. Okay. So if I
try to put this into

141
00:08:16.030 --> 00:08:18.220
a larger context of all
the different families of all

142
00:08:18.220 --> 00:08:20.470
the different kinds of tools
out there, we've got things

143
00:08:20.470 --> 00:08:22.540
like, like end unit and
all the X unit style

144
00:08:22.540 --> 00:08:27.400
tools. We've got things like
selenium, also a, a, a

145
00:08:27.400 --> 00:08:31.480
fit like tool in that
you put instructions in, in

146
00:08:31.480 --> 00:08:33.700
tables, but then it drives
a web browser. It's much

147
00:08:33.700 --> 00:08:35.800
more unit test focused and
lives in the browser. But

148
00:08:36.340 --> 00:08:39.340
sounds like what you're describing.
We've got the different X

149
00:08:39.340 --> 00:08:42.010
spec, you know, our spec
and different kinds of specification

150
00:08:42.010 --> 00:08:45.010
tools. If I want to
make sure that my application

151
00:08:45.010 --> 00:08:48.220
is correct and complete, but
I have, this is a

152
00:08:48.640 --> 00:08:51.670
cornucopia of tools to choose
from where does fit, where

153
00:08:51.670 --> 00:08:54.580
does fit fit, and how
do I pick or do

154
00:08:54.580 --> 00:08:58.440
I bother all? Well, that's
a really interesting question because

155
00:08:58.710 --> 00:09:01.230
earlier ward and I were
talking about what, what happened

156
00:09:01.230 --> 00:09:05.490
to fit. And I think
this is something that is

157
00:09:05.940 --> 00:09:07.890
people have struggled with with
fit is where does it

158
00:09:07.890 --> 00:09:11.430
fit? If you think about
the tools you're talking about,

159
00:09:11.430 --> 00:09:14.010
they're in unit and our
spec, those are programmer testing

160
00:09:14.010 --> 00:09:17.130
tools and specifically unit testing
tools. Something like selenium is

161
00:09:17.130 --> 00:09:21.480
really an end to end
acceptance testing tool and fit

162
00:09:22.560 --> 00:09:24.900
looks like either of those.
But I really see it

163
00:09:24.900 --> 00:09:28.620
as a customer testing tool.
It's not either one, but

164
00:09:28.620 --> 00:09:30.840
that's how I see people
using it in practice. But

165
00:09:30.840 --> 00:09:32.280
I would rather see them
use it as a customer

166
00:09:32.280 --> 00:09:35.100
testing tool. If there's something
that you're having trouble communicating

167
00:09:35.100 --> 00:09:38.220
with your customer, like how
does a financial instrument behave

168
00:09:38.220 --> 00:09:42.990
under certain circumstances? You know,
that's complicated and it's easy

169
00:09:42.990 --> 00:09:44.910
to get wrong and you
might program it correctly and

170
00:09:44.910 --> 00:09:47.370
you might have unit tests
and that your understanding as

171
00:09:47.370 --> 00:09:49.080
a programmer could well be
wrong. And you want to

172
00:09:49.080 --> 00:09:51.240
understand what it really does.
And that's what we want

173
00:09:51.240 --> 00:09:53.520
you to talk to your
customer, get examples and code

174
00:09:53.520 --> 00:09:58.160
those and then execute them.
That's my perspective. Yeah. I

175
00:09:58.190 --> 00:10:02.000
think that's absolutely true. The,
the, the one thing is

176
00:10:02.000 --> 00:10:04.520
whenever we're going to have
a conversation, if, if developers

177
00:10:04.520 --> 00:10:07.010
are going to talk to
their customer, they have to

178
00:10:07.010 --> 00:10:11.990
find some language to talk
to each other. That is

179
00:10:13.100 --> 00:10:17.330
understood by both. And so
as developers, we try not

180
00:10:17.330 --> 00:10:20.720
to use computer jargon, but
as a customer, the customer

181
00:10:20.720 --> 00:10:25.430
needs to, to be focused
and narrow and, and concrete.

182
00:10:25.430 --> 00:10:27.500
So we want to get
the customer to be specific.

183
00:10:27.500 --> 00:10:29.390
So we say, well, don't
tell us you want the

184
00:10:29.390 --> 00:10:32.660
interest rate formula, give us
some examples of the interest

185
00:10:32.660 --> 00:10:35.600
rate formula that we can
check, because there's dozens of

186
00:10:35.600 --> 00:10:38.870
ways to compute interest. And
that means that you might

187
00:10:38.870 --> 00:10:42.830
actually have to do some
interest calculations so that we

188
00:10:42.830 --> 00:10:47.120
can see how our understanding
of interest calculation is different

189
00:10:47.120 --> 00:10:50.750
than yours. And that, that,
so now to bring this

190
00:10:50.750 --> 00:10:53.750
back to the language, you
know, you're there sitting, okay,

191
00:10:53.780 --> 00:10:55.550
I'm sitting at a spreadsheet.
I want to work up

192
00:10:55.550 --> 00:10:59.870
a bunch of interest calculations.
I, as the customer can

193
00:10:59.870 --> 00:11:03.710
decide how many columns there
are for a particular example,

194
00:11:04.070 --> 00:11:09.350
you know, maybe I want
to include certain date calculation

195
00:11:09.350 --> 00:11:12.800
methods, which can, can really
follow up the, you know,

196
00:11:12.800 --> 00:11:15.590
if you're working in what
they call 33 60 time,

197
00:11:16.130 --> 00:11:19.430
you know, which, you know,
assumes every month is 30

198
00:11:19.430 --> 00:11:22.760
days. You know, that that's
a, a real mind bender

199
00:11:22.760 --> 00:11:24.950
there in terms of a
certain kind of a computer

200
00:11:24.950 --> 00:11:28.490
algorithms, because every month doesn't
have 30 days, you know?

201
00:11:28.490 --> 00:11:31.430
So, so to do the
interest calculation, you can, you

202
00:11:31.430 --> 00:11:35.000
know, you need to figure
out where, which month you're

203
00:11:35.000 --> 00:11:37.260
talking about to be able
to do that. And, and

204
00:11:37.280 --> 00:11:39.470
the customer can do that
as well as anybody. So

205
00:11:39.470 --> 00:11:41.630
you're saying if there were
Edge cases that are really

206
00:11:41.630 --> 00:11:45.170
difficult to express program or
not, those edge cases are

207
00:11:45.170 --> 00:11:47.990
ultimately best understood by the
customer and they are the

208
00:11:47.990 --> 00:11:50.270
ones that should be expressing
them in terms of examples.

209
00:11:50.510 --> 00:11:54.310
Absolutely. And we want concrete
examples because what I've found

210
00:11:54.520 --> 00:11:59.230
training people, how to use
this tool is when you

211
00:11:59.230 --> 00:12:03.970
get these domain experts, these
business analysts or, or financial

212
00:12:03.970 --> 00:12:05.830
experts or chemists, or whoever
it is that you have

213
00:12:05.830 --> 00:12:07.240
in the room, and you
get them talking to each

214
00:12:07.240 --> 00:12:09.240
other and they give them
talking to the programmers. I've,

215
00:12:09.340 --> 00:12:11.320
I've seen two things happen
over and over one is

216
00:12:11.320 --> 00:12:13.390
I can't believe the programmers
didn't understand this basic thing.

217
00:12:13.390 --> 00:12:14.860
That's at the foundation of
what we've been doing for

218
00:12:14.860 --> 00:12:16.900
the last two years. How
could they not know this?

219
00:12:16.900 --> 00:12:20.440
When we're already two years
into development? And two, what

220
00:12:20.440 --> 00:12:24.160
do you mean we're using
this to mean that I

221
00:12:24.160 --> 00:12:26.290
thought it meant this. So,
you know, when you start

222
00:12:26.290 --> 00:12:31.570
getting into concrete examples, people,
it flushes out ambiguity and

223
00:12:31.570 --> 00:12:33.910
the domain experts actually start
disagreeing with each other too,

224
00:12:34.510 --> 00:12:38.170
because a big part of
why you see requirements errors

225
00:12:38.170 --> 00:12:40.750
in software is that we're
trying to take fuzzy domain

226
00:12:40.750 --> 00:12:44.620
concepts, translate them into something
that's really unforgiving. And when

227
00:12:44.620 --> 00:12:47.980
we don't, when we allow
that to be fuzzy programmers,

228
00:12:48.070 --> 00:12:50.500
fill in the gaps with
their expectations and assumptions, that

229
00:12:50.500 --> 00:12:55.240
may well be wrong and
often are Okay. But the,

230
00:12:55.240 --> 00:12:59.100
the, the, the, the domain
people, the domain experts, the

231
00:12:59.100 --> 00:13:02.250
customer in this case, maybe
thinking about things at a

232
00:13:02.250 --> 00:13:05.520
certain level, one kind of
customer may be concerned about,

233
00:13:05.850 --> 00:13:07.800
you know, he may, he
may express his business rules

234
00:13:07.800 --> 00:13:10.080
in terms of buttons. And
he say, well, the user

235
00:13:10.080 --> 00:13:12.150
will type here and then
click there. And I expect

236
00:13:12.150 --> 00:13:14.910
this to happen. Well, maybe
a physicist is thinking in

237
00:13:14.910 --> 00:13:19.440
much more abstract concepts and
fitness is ultimately gonna be

238
00:13:19.440 --> 00:13:21.720
calling into code, going to
be calling into the domain.

239
00:13:21.990 --> 00:13:24.990
How do you deal with
that? Pretty significant impedance mismatch?

240
00:13:25.620 --> 00:13:28.320
Well, one assumption I had
is, is that they all

241
00:13:28.320 --> 00:13:32.360
know how to work XL
and, and that if we

242
00:13:32.370 --> 00:13:36.090
ask them to get concrete,
that they're, that, that Xcel

243
00:13:36.090 --> 00:13:38.550
is a good way to
do it. Okay. And so,

244
00:13:38.550 --> 00:13:41.790
so what we needed is
something that could take information

245
00:13:41.790 --> 00:13:45.000
that was in that sort
of table and be able

246
00:13:45.000 --> 00:13:47.580
to check it against the
program. And this is where,

247
00:13:49.740 --> 00:13:52.050
you know, I, I, I'm
a fan of object oriented

248
00:13:52.050 --> 00:13:54.720
programming. I love objects. And
I felt that the objects

249
00:13:55.020 --> 00:13:57.330
boundary was the interface. So
I need something that could

250
00:13:57.330 --> 00:14:00.600
take a quantity that was
in a row of a

251
00:14:00.600 --> 00:14:03.630
table, and be able to
apply that to an object

252
00:14:04.200 --> 00:14:06.930
and then get a result
back from that object and

253
00:14:06.930 --> 00:14:09.270
compare that to some other
quantity and the next row

254
00:14:09.270 --> 00:14:11.370
of the table, or the
next column, I guess it

255
00:14:11.370 --> 00:14:14.700
would be. And, and, you
know, to me, that was

256
00:14:14.700 --> 00:14:21.570
messaged sending. So, so I,
I wanted fit the library

257
00:14:21.780 --> 00:14:24.480
to be part of the
application in the same way

258
00:14:24.480 --> 00:14:27.420
that the user interface is
part of the application, but

259
00:14:27.570 --> 00:14:29.910
I didn't want to talk
to the user interface. I

260
00:14:29.910 --> 00:14:32.760
wanted to talk to the
same application that the user

261
00:14:32.760 --> 00:14:36.000
interface talks to. So I
bypass the user interface, talk

262
00:14:36.000 --> 00:14:40.860
straight to the application, and
that way, you know, a

263
00:14:40.870 --> 00:14:43.800
unit tests do this too,
but here I'm using that

264
00:14:43.800 --> 00:14:48.030
same interface for doing acceptance
tests. And that made sense

265
00:14:48.030 --> 00:14:50.790
to me. Hi, this is
Scott coming at you from

266
00:14:50.790 --> 00:14:53.750
another in time. Are you
looking for an object relational

267
00:14:53.750 --> 00:14:57.650
mapping tool for mission critical
projects using lincoln.net? I wanted

268
00:14:57.650 --> 00:15:01.280
to share with you genome,
so specifically designed for developing.net

269
00:15:01.280 --> 00:15:05.270
enterprise applications. Genome is a
mature link, integrated ORM tool.

270
00:15:05.300 --> 00:15:07.970
It's been employed in numerous
large scale projects over the

271
00:15:07.970 --> 00:15:11.480
last six years, genome was
created for the.net platform as

272
00:15:11.480 --> 00:15:14.540
opposed to being a port
from Java. And it's thrived

273
00:15:14.540 --> 00:15:19.520
on platform innovation since.net. 1.0
genome has supported links since

274
00:15:19.520 --> 00:15:23.030
its CTP release in may
of 2006. It offers several

275
00:15:23.030 --> 00:15:26.030
unique features, such as encapsulation
and reuse of link queries

276
00:15:26.030 --> 00:15:29.180
and expressions. You can really
fully harness the power of

277
00:15:29.180 --> 00:15:32.930
link while benefiting from your
database platforms. Unique features, compose

278
00:15:32.930 --> 00:15:35.840
complex link queries, decompose the
query logic and your domain

279
00:15:35.840 --> 00:15:39.380
model link supports all the
major database platforms you find

280
00:15:39.380 --> 00:15:42.770
in enterprise environments like SQL
server, but also Oracle and

281
00:15:42.770 --> 00:15:46.370
IBM DB two, and find
out more about how genome

282
00:15:46.370 --> 00:15:49.970
integrates tightly with visual studio
and what tools genome offers

283
00:15:49.970 --> 00:15:56.240
to reduce development time@tinyurl.com slash
try genome G N O

284
00:15:56.240 --> 00:15:59.090
M E, where you can
also download a free and

285
00:15:59.090 --> 00:16:02.740
fully functional trial version. I
hope you enjoy it. I

286
00:16:02.740 --> 00:16:06.010
wonder if someone is trying
to make fit work for

287
00:16:06.010 --> 00:16:09.040
them, Replication, if they might
find themselves writing specific Code

288
00:16:09.040 --> 00:16:12.280
to interface with fit to
make their application fit friendly.

289
00:16:12.610 --> 00:16:15.280
Well, yeah, in fact, if
you start out with fit,

290
00:16:15.310 --> 00:16:17.470
then you tend to build
an application that has a

291
00:16:17.470 --> 00:16:21.340
lot of, you know, you
might call them access points

292
00:16:21.340 --> 00:16:24.400
for fit, or I like
to think of is, you

293
00:16:24.400 --> 00:16:28.810
know, internal modularity. And, and
if you do it that

294
00:16:28.810 --> 00:16:31.540
way, then you'll find that
the fit is a natural.

295
00:16:31.870 --> 00:16:34.420
Now there's a lot of
kind of awful programs that

296
00:16:34.420 --> 00:16:37.060
are, you know, just a
hodgepodge and there's no single

297
00:16:37.060 --> 00:16:39.970
way to talk to anything.
And the closest we can

298
00:16:39.970 --> 00:16:43.330
find, do a standard interfaces
that they all, you know,

299
00:16:43.630 --> 00:16:46.750
work through a web browser.
And that makes a tremendous

300
00:16:46.750 --> 00:16:50.920
pressure to make universal tools
that basically operate the browser

301
00:16:51.670 --> 00:16:55.570
under remote control. And what
that does is that separates

302
00:16:55.570 --> 00:16:59.620
you from the objects in
question, for example, you can't

303
00:16:59.620 --> 00:17:03.640
ask it anything that isn't
in the output, you know,

304
00:17:03.640 --> 00:17:06.700
whereas, you know, I, when
I'm talking to the objects

305
00:17:06.700 --> 00:17:09.010
directly, I can ask the
object, the question that isn't

306
00:17:09.010 --> 00:17:11.620
going to be in the
output. Right. You know, and,

307
00:17:11.650 --> 00:17:14.710
and I can get an
answer from it too, because

308
00:17:14.710 --> 00:17:17.110
I'll just, I'll just let
that object do that for

309
00:17:17.110 --> 00:17:20.880
the sake of testing. And,
and you know, that, that,

310
00:17:20.920 --> 00:17:24.400
that, that is the power
of objects. So, you know,

311
00:17:25.360 --> 00:17:28.210
objects that are kind of,
you know, had their day

312
00:17:28.210 --> 00:17:30.850
and people are on to
other things. And, and, you

313
00:17:30.850 --> 00:17:33.460
know, that's a, that's a
technique that was important to

314
00:17:33.460 --> 00:17:36.940
me. And I think that,
you know, it's, it's, it's

315
00:17:36.940 --> 00:17:39.820
something that was a little
bit of my religion that

316
00:17:39.910 --> 00:17:43.660
the, you know, hasn't really
stuck or has, has fit.

317
00:17:43.660 --> 00:17:49.920
Has it stay Jane? Well,
I, so was for a

318
00:17:49.920 --> 00:17:52.230
time I asked, I said
to ward, I've been working

319
00:17:52.230 --> 00:17:56.370
on the C sharp version
and why, why don't I

320
00:17:56.370 --> 00:17:58.770
take over maintenance of the
Java version two and try

321
00:17:58.770 --> 00:18:01.590
to coordinate all this stuff.
And that, that, that was

322
00:18:01.590 --> 00:18:07.020
several years ago. And I
have to say, I I've,

323
00:18:08.700 --> 00:18:10.770
it hasn't, nothing's been happening
with it for a couple

324
00:18:10.770 --> 00:18:13.500
of years, to be quite
honest, it's, it's, it may

325
00:18:13.500 --> 00:18:18.390
have had its day. What
I found is that fit

326
00:18:18.390 --> 00:18:20.970
really wants you to think
about your code in terms

327
00:18:20.970 --> 00:18:23.970
of a domain object layer.
So you take the knowledge

328
00:18:23.970 --> 00:18:25.860
that your customers have, and
you want to encode it

329
00:18:25.860 --> 00:18:28.440
into main objects, which is
a wonderful way of programming

330
00:18:28.440 --> 00:18:32.700
that has just never really
caught on, except among some

331
00:18:32.700 --> 00:18:36.890
of the intelligence yet, Because
there are people that I

332
00:18:36.890 --> 00:18:39.680
know in the domain, you
know, the DDD and some

333
00:18:39.680 --> 00:18:42.890
BDD kind of communities that
are, that are rabidly enthusiastic

334
00:18:42.890 --> 00:18:45.260
about jewels like fit. Yeah.
Yeah. Well, domain driven design

335
00:18:45.260 --> 00:18:49.280
is perfect for, and it's,
it's a great way of

336
00:18:49.280 --> 00:18:52.430
programming. Where does I just
had to grab the mic

337
00:18:52.430 --> 00:18:59.850
and it was, it was
Eric, You know, Eric, Eric Evans.

338
00:18:59.850 --> 00:19:05.270
So, you know, who, you
know, wrote the book on

339
00:19:05.270 --> 00:19:07.940
demander and he says, look,
this, you know, you're describing

340
00:19:07.940 --> 00:19:10.730
here one more time, this
way you test things, you've

341
00:19:10.730 --> 00:19:13.310
got to get that out
there. And I said, okay,

342
00:19:13.310 --> 00:19:15.500
I'll get that out there
by writing a general purpose

343
00:19:15.500 --> 00:19:18.860
library, you know? So, so
yes, I'm, I'm absolutely aligned

344
00:19:18.860 --> 00:19:20.870
with that. And I think
that's the right thing to

345
00:19:20.870 --> 00:19:22.940
do. And of course it's
a natural fit for people

346
00:19:22.940 --> 00:19:26.600
who have, who have already
drunk that Koolaid, But why

347
00:19:26.600 --> 00:19:29.570
isn't a, why isn't catching
on, I mean, companies like

348
00:19:29.570 --> 00:19:32.060
Microsoft and others are building
in all sorts of, of

349
00:19:32.660 --> 00:19:35.930
test, test runners and test
drivers, and everyone wants code

350
00:19:35.930 --> 00:19:40.670
coverage, and everyone wants a
red, green refactor, but not

351
00:19:40.670 --> 00:19:43.040
so much with the, with
the DDD and the fit

352
00:19:43.040 --> 00:19:46.130
and fitness. And it seems
that in the teams I

353
00:19:46.130 --> 00:19:48.770
work with, it just seems
that domain driven design is

354
00:19:48.830 --> 00:19:52.340
a foreign way of thinking
and fit. Just like test

355
00:19:52.340 --> 00:19:54.500
driven development will drive the
design of your code to

356
00:19:54.500 --> 00:19:58.700
more decoupled objects. And to
entry points in the system

357
00:19:59.360 --> 00:20:02.540
fit will drive the design
of your domain layer. And

358
00:20:02.540 --> 00:20:04.700
if you don't have a
domain layer, it's going to

359
00:20:04.700 --> 00:20:08.390
be challenging to use. And
my hope would be that

360
00:20:08.390 --> 00:20:11.030
people who don't have a
domain layer using fit would

361
00:20:11.030 --> 00:20:13.310
learn to create a domain
layer and do that. But

362
00:20:13.310 --> 00:20:17.950
in fact, what has happened
is that they're turning it

363
00:20:17.950 --> 00:20:21.710
into a fairly bad acceptance
testing tool through the web.

364
00:20:22.910 --> 00:20:25.250
And yes, you can do
that with fit. And it

365
00:20:25.250 --> 00:20:27.710
sort of looks like selenium.
And I think selenium actually

366
00:20:27.710 --> 00:20:29.870
was inspired by fit. I
remember hearing from those folks

367
00:20:29.870 --> 00:20:36.710
back when fit was first
becoming publicized, but in order

368
00:20:36.710 --> 00:20:39.470
to do acceptance testing through
the web, you have to

369
00:20:39.470 --> 00:20:41.780
really have sort of a
procedural programming language where you

370
00:20:41.780 --> 00:20:43.640
say, go to this page,
press this button, put this

371
00:20:43.640 --> 00:20:45.380
thing in, go in a
loop. Here's we're going to

372
00:20:45.380 --> 00:20:47.380
log in again. So we
need a set routine. It

373
00:20:47.380 --> 00:20:51.490
turns out that doing that
in HTML tables kind of

374
00:20:51.490 --> 00:20:54.480
sucks. Yeah. Well, and like
where it said not everything

375
00:20:54.480 --> 00:20:57.930
is Exposed via the internet
and it gets very complicated

376
00:20:57.930 --> 00:21:00.450
and it's so it's so
complicated. In fact, you need

377
00:21:00.450 --> 00:21:02.940
variables, you need loops, you
need set routines. It's so

378
00:21:02.940 --> 00:21:05.880
complicated that your customers won't
understand it. So they're not

379
00:21:05.880 --> 00:21:09.000
writing it anymore. Which brings
back, brings you back to

380
00:21:09.000 --> 00:21:11.430
the, kind of the relative
simplicity of Excel. I mean,

381
00:21:11.430 --> 00:21:13.680
if everything can be expressed
in a table of examples,

382
00:21:14.730 --> 00:21:17.100
why isn't that exciting? And
you're saying it's ultimate because

383
00:21:17.100 --> 00:21:21.060
our software designs typically don't
support that. And if, and

384
00:21:21.060 --> 00:21:25.650
if our customers can't understand
the fit tests and fit

385
00:21:25.650 --> 00:21:29.130
is a tool for improving
customer collaboration and really getting

386
00:21:29.160 --> 00:21:32.550
communication and understanding between customers
and programmers, if they can't

387
00:21:32.550 --> 00:21:35.250
understand what we're doing there,
because we're not using domain

388
00:21:35.250 --> 00:21:36.870
driven design, we're going through
the web and it's too

389
00:21:36.870 --> 00:21:39.990
complicated. Why are we using
fit? Why don't we just

390
00:21:39.990 --> 00:21:43.920
use a procedural programming language
and use J unit or

391
00:21:43.920 --> 00:21:46.470
selenium or water or something
else we'll see now, now

392
00:21:46.470 --> 00:21:49.050
I'm hearing a word I'm
hearing fit is dead Long

393
00:21:49.050 --> 00:21:52.920
lived fit. You know, I
would, you know, I would

394
00:21:52.920 --> 00:21:55.200
say that there, there's a
couple of things that I

395
00:21:55.200 --> 00:22:00.840
did that maybe set the
bar too high for fit.

396
00:22:00.870 --> 00:22:03.320
One is I wanted it
to be uniform across a

397
00:22:03.320 --> 00:22:06.180
wide variety of implementations. Cause
I saw it as a

398
00:22:06.180 --> 00:22:10.590
way for people to have
mobility, you know, so that

399
00:22:10.590 --> 00:22:13.290
they wouldn't get trapped in
their own implementation, that they

400
00:22:13.290 --> 00:22:15.120
would be able to say,
well, we're going to go

401
00:22:15.120 --> 00:22:20.280
from Java to.net or from.net
to, you know, Ruby or

402
00:22:20.280 --> 00:22:23.040
whatever. And we're going to
take all our tests along

403
00:22:23.040 --> 00:22:26.250
with us because our tests
are just HTML documents that

404
00:22:26.250 --> 00:22:29.490
have a bunch of facts
expressed as strings and numbers.

405
00:22:30.030 --> 00:22:35.370
Now, to my surprise, producing
a document that has tables

406
00:22:35.370 --> 00:22:37.950
with a bunch of facts
and strings and numbers turns

407
00:22:37.950 --> 00:22:44.520
out to be hard even
here in 2008, 2009. Wait,

408
00:22:44.550 --> 00:22:47.700
Oh, Hey good. Yeah. Well,
that's one of my problems.

409
00:22:48.120 --> 00:22:50.820
Right. But, but, but, but
you know, if I think

410
00:22:50.820 --> 00:22:52.950
about it, if I needed
to make a document right

411
00:22:52.950 --> 00:22:55.980
now that had nice looking
tables in it, I don't

412
00:22:55.980 --> 00:22:58.890
have a tool on my
computer. That'll do it. You

413
00:22:58.890 --> 00:23:01.830
know, that tables turn out
to be in a Wiziwig

414
00:23:01.860 --> 00:23:04.500
kind of context, turn out
to be a little too

415
00:23:04.500 --> 00:23:08.670
hard to do. Right. And,
and I just assumed that

416
00:23:08.670 --> 00:23:11.130
that was a soft problem.
I assumed that people call

417
00:23:11.400 --> 00:23:13.940
people could write documents that
had tables in them and

418
00:23:13.940 --> 00:23:18.990
it could maintain them businesspeople.
Yeah. Gosh, actual suits. Yeah.

419
00:23:18.990 --> 00:23:21.120
You know? Yeah. You turned
that over to your web

420
00:23:21.120 --> 00:23:23.430
design geeks. Right. So, Oh
yeah. It makes them tables,

421
00:23:23.580 --> 00:23:25.740
you know, it's too hard
for me. And, and if

422
00:23:25.740 --> 00:23:29.730
you can't, if you can't
write the language freely then

423
00:23:30.000 --> 00:23:32.910
saying that we're going to
have a communication tool that's

424
00:23:32.910 --> 00:23:36.840
based on this language is,
is just dreaming. And so,

425
00:23:36.900 --> 00:23:39.930
yeah, very frustrating to me.
But I will say that

426
00:23:39.990 --> 00:23:43.230
the ideas, you know, I
think there was an argument

427
00:23:43.230 --> 00:23:46.520
going on early, you know,
that fit kind of stepped

428
00:23:46.520 --> 00:23:49.430
into, and it was like,
is, is, is, is DDD

429
00:23:49.430 --> 00:23:53.570
important. Or, you know, what
is the role of automation

430
00:23:53.570 --> 00:23:58.520
versus, you know, say exploratory
testing and so forth. And

431
00:23:58.520 --> 00:24:02.600
there wasn't anything to point
to that says, this is

432
00:24:02.600 --> 00:24:05.330
a good example of what
can be done. And so

433
00:24:05.770 --> 00:24:09.800
I think there's been enough
successes with fit. You know,

434
00:24:09.800 --> 00:24:12.380
people who say, Oh man,
it has transformed the way

435
00:24:12.380 --> 00:24:14.750
we write software. Even if
it's only one out of

436
00:24:14.750 --> 00:24:16.790
every five people who try
it, have that kind of

437
00:24:16.790 --> 00:24:21.530
success because of successes happened.
It caused people to have

438
00:24:21.530 --> 00:24:25.640
another go at writing these
frameworks. And I think, you

439
00:24:25.640 --> 00:24:28.190
know, the, our aspect is
interesting. And I think cucumber

440
00:24:28.580 --> 00:24:32.270
is one that really is,
is I guess, a wrapper

441
00:24:32.270 --> 00:24:34.220
around our spec. I'm not
sure what it even is,

442
00:24:34.220 --> 00:24:37.970
but it's something where, where
you write text files instead

443
00:24:37.970 --> 00:24:41.660
of HTML documents, but you
get to choose your language

444
00:24:41.690 --> 00:24:48.560
very carefully to be understandable.
And writing text files is

445
00:24:48.560 --> 00:24:51.800
within, you know, the general
ability of the tools that

446
00:24:51.800 --> 00:24:55.190
come with every computer. And
so that, it's probably more

447
00:24:55.190 --> 00:24:57.170
the way to go. It's,
it's, it's a little more

448
00:24:57.470 --> 00:25:00.740
syntactic. And I think in,
in terms of running cucumber

449
00:25:00.740 --> 00:25:04.550
programs, it's, it's, you know,
if you want to run

450
00:25:04.550 --> 00:25:06.770
them through the browser, cause
what you really care about

451
00:25:06.770 --> 00:25:10.490
is, you know, browser anomalies,
you can do that too.

452
00:25:11.240 --> 00:25:14.330
So there's a lot of,
a lot of versatility in

453
00:25:14.330 --> 00:25:16.790
the backend and those wouldn't
exist if it weren't for

454
00:25:16.790 --> 00:25:19.700
fit kind of saying here's
a space and here's something

455
00:25:19.700 --> 00:25:21.980
to do. So now I'm
now I'm torn. I want

456
00:25:21.980 --> 00:25:24.680
to ask you the award
before as the creator of

457
00:25:24.680 --> 00:25:29.180
fit is fit dead. I
don't think so. Okay. And

458
00:25:29.180 --> 00:25:31.910
I think it's what is
fit is going to be

459
00:25:32.210 --> 00:25:39.410
a small piece of a
software transition technology. You know,

460
00:25:39.410 --> 00:25:43.190
the people who bother do
build those tables and recognize

461
00:25:43.190 --> 00:25:45.920
them as assets that are
worth keeping our, you know,

462
00:25:45.920 --> 00:25:48.440
we have to protect their
investment. They thought they were

463
00:25:48.440 --> 00:25:51.440
going to get an investment
and fit we'll be around

464
00:25:51.440 --> 00:25:55.790
for them. It's just that
it isn't a flashy in

465
00:25:55.790 --> 00:25:58.940
any sense. It's like, is
there a community that is

466
00:25:58.940 --> 00:26:03.440
investing in fit right now?
I'm in this room, I

467
00:26:03.440 --> 00:26:08.320
guess. Well, you know, I'm
not investing. Jim is fit

468
00:26:08.320 --> 00:26:14.050
dead. The dream lives on
fit. I, I, I, yes,

469
00:26:14.050 --> 00:26:17.860
I'm equivocating. I at one
point identified myself as the

470
00:26:17.860 --> 00:26:20.320
project coordinator for fit. I'm
no longer doing that. Nobody

471
00:26:20.320 --> 00:26:23.920
else has stepped up. There's
no, t-shirts, there's no t-shirts

472
00:26:24.580 --> 00:26:28.300
however fit nests, which was
an early fork of fit

473
00:26:28.420 --> 00:26:31.720
that does the Wiki is
continued to maintain. It's maintained

474
00:26:31.720 --> 00:26:35.740
by Bob Martin, uncle Bob
at object mentor. And it

475
00:26:35.770 --> 00:26:39.670
is slightly different than fit.
I would like to see

476
00:26:39.670 --> 00:26:42.610
more focused on the communication
customer communication side of things,

477
00:26:43.590 --> 00:26:46.050
but it is still the
same underlying ideas and people

478
00:26:46.050 --> 00:26:48.960
who want fit. We'll find
a nice polished package over

479
00:26:48.960 --> 00:26:52.500
in fitness. So if you're
listening to this and you

480
00:26:52.500 --> 00:26:55.890
think, wow, that sounds really
cool. Go, go check out

481
00:26:55.890 --> 00:26:58.140
fitness. If you've been using
fit and you want to

482
00:26:58.140 --> 00:27:00.210
keep using it, if it's
still there, I mean, it

483
00:27:00.210 --> 00:27:02.730
hasn't gone away, but I
don't know of anybody. Who's

484
00:27:02.730 --> 00:27:06.600
still maintaining the Java and
C sharp versions that ward

485
00:27:06.600 --> 00:27:10.970
and I worked on. So,
you know, I w I

486
00:27:10.970 --> 00:27:13.010
learned a lesson from this
and, and, and you'd think

487
00:27:13.010 --> 00:27:16.820
I would have known it
already. I hooked up a

488
00:27:16.850 --> 00:27:21.620
fit to a Wiki for
the purpose of writing a

489
00:27:21.620 --> 00:27:26.900
documentation about fit, but I
was convinced that people needed,

490
00:27:26.900 --> 00:27:31.040
you know, dozens or hundreds
of columns. And that Xcel

491
00:27:31.040 --> 00:27:33.110
was the thing that was
going to manage those columns.

492
00:27:33.110 --> 00:27:35.360
And so I wanted to
be able to take XL

493
00:27:35.360 --> 00:27:38.780
tables and put them into
documents. And I knew that

494
00:27:38.780 --> 00:27:41.960
the table syntax that people
were doing in wikis wouldn't

495
00:27:41.960 --> 00:27:44.810
stand up to it. Well,
it turns out I was

496
00:27:44.810 --> 00:27:50.030
wrong. It turns out that
the, the ability to collaborate

497
00:27:50.090 --> 00:27:56.030
among developers and customers, and
especially among between different customers,

498
00:27:56.480 --> 00:28:00.230
that the Wiki technology was
attractive enough, that it was

499
00:28:01.430 --> 00:28:05.750
kind of the new ground
that needed to be plowed,

500
00:28:05.750 --> 00:28:10.850
that there is a test
repository and, and it shared

501
00:28:10.850 --> 00:28:14.990
between development and the customer.
And, and that is as

502
00:28:14.990 --> 00:28:16.850
simple as Wiki, even if
it is kind of a

503
00:28:16.850 --> 00:28:20.570
pain in the neck to
deal with tables in Wiki.

504
00:28:20.570 --> 00:28:23.930
It's, it's, it's no, it's
no worse than the, the

505
00:28:23.960 --> 00:28:28.520
pitiful tools you have in
your laptop. So, so collaboration

506
00:28:28.520 --> 00:28:32.600
was more important than the
expressiveness of the languages that

507
00:28:32.600 --> 00:28:34.850
I wanted people to invent
to talk about their problem.

508
00:28:36.500 --> 00:28:40.130
And I think, I mean,
I regret, and maybe this

509
00:28:40.130 --> 00:28:45.320
is because as a consultant,
people, people call me to

510
00:28:45.320 --> 00:28:47.990
help them solve a problem.
So I've seen a lot

511
00:28:47.990 --> 00:28:50.090
of cases where people are
using fit to do these

512
00:28:50.090 --> 00:28:52.760
sort of procedural through the
web interface test. And I

513
00:28:52.760 --> 00:28:54.650
regret that because I think
the real power here is

514
00:28:54.650 --> 00:28:59.300
the domain driven design and
the customer collaboration. And even

515
00:28:59.300 --> 00:29:03.740
if it is dead and
that's, we're not seeing a

516
00:29:03.740 --> 00:29:06.620
lot of that, that's still
necessary. If we're going to

517
00:29:06.620 --> 00:29:08.810
create correct software, we still
have to understand what our

518
00:29:08.810 --> 00:29:11.360
customers need and mean we
still have to do that.

519
00:29:11.360 --> 00:29:15.920
So that's, I think that
is fertile ground. And we

520
00:29:15.920 --> 00:29:17.540
need to keep exploring that.
I think there are people

521
00:29:17.540 --> 00:29:19.850
who are exploring that we
need to keep it, keep

522
00:29:19.850 --> 00:29:24.260
it going. There's also a
lesson here, too. It is

523
00:29:24.320 --> 00:29:27.350
in, in that, is that
we've come to the point

524
00:29:27.350 --> 00:29:31.280
where we judge software by
the community that, that supports

525
00:29:31.280 --> 00:29:35.480
it, you know, and, you
know, I made a kind

526
00:29:35.480 --> 00:29:39.020
of a three month long
effort to, to build a

527
00:29:39.020 --> 00:29:42.370
community of developers. And my
focus was on breath, you

528
00:29:42.370 --> 00:29:47.560
know, of languages and not,
you know, you know, not

529
00:29:47.560 --> 00:29:49.750
changing it or evolving it.
I said, let's hold it

530
00:29:49.750 --> 00:29:52.210
still. So that all the
different developers can get caught

531
00:29:52.210 --> 00:29:56.410
up. And that, that wasn't
a good community building strategy.

532
00:29:56.980 --> 00:30:01.210
And people are, you know,
people look at fit and

533
00:30:01.210 --> 00:30:04.420
they say, well, you know,
where's, the community community seems

534
00:30:04.420 --> 00:30:09.700
to be fitness. And, you
know, so, you know, there

535
00:30:09.700 --> 00:30:11.770
were, there was a fork
and that fork turned out

536
00:30:11.770 --> 00:30:16.030
to have a writer's strategy
than mine. And, but does

537
00:30:16.030 --> 00:30:17.590
that mean it's dead? You
know, I mean, is it

538
00:30:17.590 --> 00:30:21.880
just, you know, it just
spawned, it's a progeny and

539
00:30:21.880 --> 00:30:24.480
that's a, that's where the
action is. All right. Well,

540
00:30:24.480 --> 00:30:26.790
thanks so much, James shore
and ward Cunningham, which it

541
00:30:26.800 --> 00:30:29.100
been talking to me about
fit and fitness today. Thank

542
00:30:29.100 --> 00:30:32.040
you. It's pleasure to be
here. All right. And this

543
00:30:32.040 --> 00:30:34.350
has been another episode of
Hansel minutes. I'll see you

544
00:30:34.350 --> 00:30:35.070
again next week.

