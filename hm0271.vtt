WEBVTT FILE

1
00:00:12.090 --> 00:00:17.790
From hanselminutes.com. It's Hansel minutes,
a weekly discussion with web

2
00:00:17.790 --> 00:00:22.470
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.470 --> 00:00:28.920
number two 71 recorded live
Thursday, June 16th, 2011. Support for Hanselman.

4
00:00:28.920 --> 00:00:32.730
This is provided by Telerik
rad controls, the most comprehensive

5
00:00:32.730 --> 00:00:36.720
suite of components for windows
forms and asp.net web applications

6
00:00:37.020 --> 00:00:45.450
online@wwwdottelerik.com. In this episode, Scott
talks with open source developer,

7
00:00:45.450 --> 00:00:52.530
Frederick Holmstrom about iron JS.
Hi, this is Scott Hanselman.

8
00:00:52.560 --> 00:00:55.290
This is another episode of
Hansel minutes. And today we're

9
00:00:55.290 --> 00:00:58.980
talking actually to Frederick Holmstrom,
who is actually in Gotham,

10
00:00:58.980 --> 00:01:02.790
Berg, Sweden. He works on
iron J S it's an

11
00:01:02.790 --> 00:01:06.330
open source project and it's
an implementation of JavaScript, but

12
00:01:06.330 --> 00:01:09.150
it's written in.net. Thanks for
taking the time to chat

13
00:01:09.150 --> 00:01:13.320
with me. So, so you
ha this is a complete

14
00:01:13.320 --> 00:01:21.130
implementation of JavaScript, is that
correct? Yeah, that's correct. As

15
00:01:21.140 --> 00:01:24.050
closely as possible as follows
the ECMAScript sophistication to the

16
00:01:24.050 --> 00:01:28.700
letter, a full implementation now.
So, so I could use

17
00:01:28.700 --> 00:01:31.070
the, would I use this
to power a browser, or

18
00:01:31.070 --> 00:01:33.620
would I use this as
a scripting language? Why, why

19
00:01:33.620 --> 00:01:37.130
does something like this exist?
I mean, I built it

20
00:01:37.130 --> 00:01:40.550
originally because was, was going
to be a little story.

21
00:01:41.060 --> 00:01:42.920
I was building my own,
like, you know, the whole

22
00:01:42.950 --> 00:01:46.880
no SQL database train or
the, I got on that.

23
00:01:46.880 --> 00:01:50.510
So I was working to
build my own database. I

24
00:01:50.510 --> 00:01:53.120
needed a sort of like
acquire language. I began in

25
00:01:53.120 --> 00:01:56.210
the completely wrong end of,
I started with the querying

26
00:01:56.210 --> 00:01:58.010
and then African space for
some reason. So I was

27
00:01:58.010 --> 00:02:00.020
playing around with that and
I wanted to acquire language

28
00:02:00.680 --> 00:02:02.930
and I was, I've been
looking at couch DB and

29
00:02:02.930 --> 00:02:04.310
a couple of other, and,
you know, it's the whole

30
00:02:04.310 --> 00:02:08.450
Jason JavaScript pretty much everywhere.
And so I decided that

31
00:02:08.450 --> 00:02:11.810
I'd use JavaScript as a
credit language. So I was

32
00:02:11.810 --> 00:02:14.930
looking around and I found
the J script and Jenna,

33
00:02:14.930 --> 00:02:18.620
which is sort of that's
available in, I think.net 3.5,

34
00:02:18.680 --> 00:02:20.090
but I think they cut
it into four point, Oh,

35
00:02:20.120 --> 00:02:22.430
I'm not quite sure, but
it wasn't up to the

36
00:02:22.430 --> 00:02:25.160
task and it's quite slow.
So I decided to write

37
00:02:25.160 --> 00:02:27.710
my own. It turns out
that writing R and D

38
00:02:27.860 --> 00:02:33.050
was a lot more fun
than writing database. Sorry. So

39
00:02:33.500 --> 00:02:35.840
I scrapped the database product
and started working on it.

40
00:02:35.870 --> 00:02:39.770
I'm Jay's full time. That's
excluding my motivation, my original

41
00:02:39.770 --> 00:02:42.770
motivation for building it. At
least You say full time,

42
00:02:42.770 --> 00:02:44.090
is this something you do
as your job? Or is

43
00:02:44.090 --> 00:02:46.730
this like your full time
hobby? A full time hobby?

44
00:02:46.730 --> 00:02:49.730
Yeah, no, I wish I
could do that's a job,

45
00:02:49.730 --> 00:02:53.240
but subtly not Was, was
there already an iron something?

46
00:02:53.240 --> 00:02:55.400
I mean, is there, do
you have to ask somebody

47
00:02:55.400 --> 00:02:58.070
to become an iron or
something? Cause there's iron Python

48
00:02:58.070 --> 00:02:59.950
and there's iron Ruby, or
it just that you were

49
00:02:59.950 --> 00:03:02.680
the first that decided that
you would be built on

50
00:03:02.680 --> 00:03:06.660
the, on the DLR. So
that name made sense. Well,

51
00:03:06.750 --> 00:03:10.230
I think there is, there
was, there was one other

52
00:03:10.230 --> 00:03:14.340
version using the DLR a
while back. There's a couple

53
00:03:14.340 --> 00:03:16.710
of other also available botnets,
but they're not using the

54
00:03:16.710 --> 00:03:19.080
DLR, but I mean, the
name R and J is

55
00:03:19.080 --> 00:03:21.210
for me, it seemed obvious,
sorry. I was looking around

56
00:03:21.210 --> 00:03:23.850
on the internet. See, I
mean, it was free, so

57
00:03:23.850 --> 00:03:28.530
I decided to take it
and complain. So What kind

58
00:03:28.530 --> 00:03:30.930
of things would someone use
this for? I mean, what

59
00:03:30.930 --> 00:03:33.450
would the, what would the
listeners say? Oh, great. There's

60
00:03:33.450 --> 00:03:36.420
a JavaScript for.net. I can
use it to do this.

61
00:03:37.920 --> 00:03:41.160
Like for example, like my
original motivation for building in

62
00:03:41.170 --> 00:03:43.620
was that I needed a
acquire language for an application.

63
00:03:44.380 --> 00:03:47.370
I mean, you can basically,
I mean, anything you'd need

64
00:03:47.370 --> 00:03:49.470
to script or like, have
you use this, be able

65
00:03:49.470 --> 00:03:51.210
to script your application or
stuff like that. You could

66
00:03:51.210 --> 00:03:54.690
use this and hook it
into your, whatever you have

67
00:03:54.690 --> 00:03:57.570
running it, like a wind
farm. So WPF app or

68
00:03:57.570 --> 00:04:00.180
something, or like a game
or a, if you want

69
00:04:00.180 --> 00:04:03.150
to, I mean, everyone knows
about the Monet yesterday and

70
00:04:03.660 --> 00:04:05.190
like the whole, like, if
you would want to build

71
00:04:05.190 --> 00:04:07.450
something like that, you could
do that also. So, I

72
00:04:07.450 --> 00:04:10.860
mean, you could apply it
basically anywhere. You'd want a

73
00:04:10.860 --> 00:04:15.090
programming language that you can
control the environment off. I

74
00:04:15.090 --> 00:04:17.310
bet you bring up an
interesting question there. The idea

75
00:04:17.310 --> 00:04:22.680
of, of no JS. Do
you think that that Microsoft

76
00:04:22.710 --> 00:04:25.710
and the Microsoft to kind
of open source ecosystem needs

77
00:04:26.100 --> 00:04:29.400
and implementation of node or,
or maybe not node, but

78
00:04:29.400 --> 00:04:34.140
some kind of JavaScript on
the server? I have to

79
00:04:34.140 --> 00:04:40.800
say no, because like I
personally, like I liked JavaScript

80
00:04:40.800 --> 00:04:42.810
as a language and I
mean, it's, it's an okay

81
00:04:42.810 --> 00:04:46.050
language, but I'm personally not
convinced of the, of how

82
00:04:46.050 --> 00:04:50.010
valid it is having it
run on server, just because,

83
00:04:50.430 --> 00:04:55.180
I mean, the Microsoft ecosystem
is so, I mean, it's

84
00:04:55.290 --> 00:04:57.030
huge. I mean, you have
a C sharp F sharp

85
00:04:57.030 --> 00:04:59.730
and like everything there and
they pretty much cover everything

86
00:04:59.730 --> 00:05:02.880
you could possibly do with
JavaScript. I mean, yes. I

87
00:05:02.880 --> 00:05:04.260
mean, the language is in
the same and it looks

88
00:05:04.260 --> 00:05:06.150
a bit different, but like
in general, like everything you

89
00:05:06.150 --> 00:05:09.540
could possibly hope to do
or to access in one

90
00:05:09.540 --> 00:05:13.800
way or the other through
the.net framework or Microsoft ecosystem.

91
00:05:14.460 --> 00:05:18.720
So I personally, I'm not
convinced that a building like

92
00:05:19.080 --> 00:05:21.900
no js.net on R and
D is for example, is

93
00:05:22.080 --> 00:05:24.180
the right way to go
about it. I'd rather see

94
00:05:24.180 --> 00:05:26.610
something like a C sharp
version or a F sharp

95
00:05:26.610 --> 00:05:30.330
version using async workflows from
F sharp or something like

96
00:05:30.330 --> 00:05:34.290
that for building a synchronous
services and stuff, instead of

97
00:05:34.620 --> 00:05:37.590
focusing on the JavaScript part
of it. So that's really

98
00:05:37.590 --> 00:05:41.610
interesting because I assume that
as someone who is writing

99
00:05:41.610 --> 00:05:44.850
a compiler effectively, you know,
mean a partial on Alexa

100
00:05:44.850 --> 00:05:46.800
and all of this stuff,
you're doing a lot of

101
00:05:46.800 --> 00:05:50.250
work where you now probably
understand the JavaScript language a

102
00:05:50.250 --> 00:05:52.560
lot more than most people.
I think it'd be fair

103
00:05:52.560 --> 00:05:55.230
to say, right? If you
implement a language, it tends

104
00:05:55.230 --> 00:05:58.730
to get you deep into
the language. So I find

105
00:05:58.730 --> 00:06:00.710
it interesting that someone who
knows the language so well

106
00:06:00.710 --> 00:06:03.650
says that, you know, we
really don't need that language

107
00:06:03.650 --> 00:06:05.330
on the service side. I
think that's kind of interesting.

108
00:06:06.550 --> 00:06:08.800
I mean, like, of course
I would like, I mean,

109
00:06:08.860 --> 00:06:11.740
Oh yeah. I would love
someone to build the JS

110
00:06:11.740 --> 00:06:13.600
or that with R and
J, but I mean, you

111
00:06:13.600 --> 00:06:17.200
also have to be like
realistic. And I mean, I

112
00:06:17.200 --> 00:06:21.520
personally, I'm not believing, I'm
not convinced that that's a

113
00:06:21.520 --> 00:06:24.370
good way to go, because
for example, like F sharp

114
00:06:24.370 --> 00:06:27.690
and my favorite language, if
you take F sharp it's,

115
00:06:28.840 --> 00:06:31.240
I mean, it's so much
more well suited to doing

116
00:06:31.240 --> 00:06:33.460
what no JS does then
what no JS is a

117
00:06:33.460 --> 00:06:36.970
JavaScript, that's all languages. I
mean, like how clean the

118
00:06:36.970 --> 00:06:40.690
code gets and everything. Like,
I don't, I, I mean,

119
00:06:40.690 --> 00:06:42.580
I like the idea of
no JS, but I don't

120
00:06:42.580 --> 00:06:47.350
like the language itself in
that context, because it becomes

121
00:06:47.350 --> 00:06:50.230
awkward and you have to
do the manual. What's it

122
00:06:50.230 --> 00:06:57.100
called? The CPS continuing passing
continuation passing. Sorry, manually basically.

123
00:06:57.760 --> 00:07:01.900
And it's, it's, I'm not
convinced. Interesting. So, so what

124
00:07:01.900 --> 00:07:04.240
kind of things is JavaScript
suited for? I mean, do

125
00:07:04.240 --> 00:07:07.770
you think it's just a,
an interesting language for dominant

126
00:07:07.780 --> 00:07:11.050
violation and that's about it.
I mean, in the browser,

127
00:07:11.050 --> 00:07:14.170
obviously it has, has its
place in the browser. There's

128
00:07:14.170 --> 00:07:17.070
been a lot of talk
about it would be possible.

129
00:07:17.430 --> 00:07:19.120
I mean, you have like
copy script and stuff like

130
00:07:19.120 --> 00:07:22.250
that. That's compiling down to
JavaScript nowadays. And there's a

131
00:07:22.300 --> 00:07:24.310
mother, a couple of small
languages that does the same

132
00:07:24.310 --> 00:07:29.410
thing, but JavaScript as a
language, I think, I don't

133
00:07:29.410 --> 00:07:32.560
know, like, honestly, and this
is kind of an awkward

134
00:07:32.560 --> 00:07:36.070
coming from within this building,
JavaScript runtime, but I mean,

135
00:07:36.220 --> 00:07:39.640
I'm not convinced that how
the language like it's personal

136
00:07:39.640 --> 00:07:44.830
it's, I mean, it's hard
to express where, like, it's

137
00:07:44.890 --> 00:07:47.590
a, I mean, it has
a broad, like, what do

138
00:07:47.590 --> 00:07:50.370
you want to call it
in English? Like, say like

139
00:07:50.410 --> 00:07:52.660
it's available everywhere. Like on
all the browsers, all platforms

140
00:07:53.950 --> 00:07:57.460
itself, it's not hold any
major merit in my point

141
00:07:57.460 --> 00:08:01.600
of view, especially after building
an, a, an implementation of

142
00:08:01.600 --> 00:08:04.270
it, you, you know, all
the idiosyncrasies and all the

143
00:08:05.110 --> 00:08:11.590
weird, excuse me, stupid stuff
in it. That's, that's, that's

144
00:08:11.590 --> 00:08:15.610
very interesting because I think
that the, the ubiquity, right,

145
00:08:15.610 --> 00:08:19.450
the fact that it's available
everywhere is, is certainly it's

146
00:08:19.530 --> 00:08:23.140
it's strength, but it's one
of those things where it's

147
00:08:23.140 --> 00:08:27.670
available everywhere, but it's also
insane, but we tolerate it.

148
00:08:28.450 --> 00:08:30.910
And lately I've been seeing
a lot of talks, a

149
00:08:30.910 --> 00:08:34.480
lot of presentations with people
saying, yeah, JavaScript is great.

150
00:08:34.480 --> 00:08:37.840
JavaScript is fun. And here's
the totally weird stuff where,

151
00:08:38.110 --> 00:08:41.140
you know, no is equal
to false or whatever kind

152
00:08:41.140 --> 00:08:45.310
of weird stuff that people
are coming up, whatever, weird

153
00:08:45.310 --> 00:08:48.790
language design things that happened
organically, that people bring up

154
00:08:48.820 --> 00:08:51.250
and then they kind of
laugh about it. But again,

155
00:08:51.250 --> 00:08:53.770
then they say, well, but
it's available everywhere. So these

156
00:08:53.770 --> 00:08:56.010
are funny, you know, it's
kind of like crazy uncle,

157
00:08:56.280 --> 00:08:58.110
you know, JavaScript is that
crazy uncle that we all

158
00:08:58.110 --> 00:08:59.940
have, but we have to
clean up. He's our uncle,

159
00:08:59.940 --> 00:09:03.230
what are we going to
do? He's always there. Yeah.

160
00:09:03.260 --> 00:09:06.590
I mean, like I said,
like, and then you have

161
00:09:06.590 --> 00:09:08.540
like the whole, like, I'm
not going to start bashing

162
00:09:08.540 --> 00:09:11.060
jobs through too much, but
a major part for me,

163
00:09:11.120 --> 00:09:13.100
a major part of the
problem for me. I mean,

164
00:09:13.100 --> 00:09:15.530
you have all the, either
syncretism, all the really weird

165
00:09:15.530 --> 00:09:18.560
stuff like, you know, is
true and stuff like that.

166
00:09:18.560 --> 00:09:23.090
And, but a big part
for me is that there

167
00:09:23.090 --> 00:09:25.280
is no way to organize
your code in JavaScript. There's

168
00:09:25.280 --> 00:09:28.100
no built in the language.
There's no module system, there's

169
00:09:28.100 --> 00:09:32.720
no name spacing, no nothing.
It's just global free for

170
00:09:32.720 --> 00:09:37.640
all, basically. And this, which
is the major problem for

171
00:09:37.640 --> 00:09:39.770
me, at least coming from
like C sharp, sharp, or

172
00:09:39.770 --> 00:09:43.190
even Python or Ruby, there's
some kind of organizational scheme

173
00:09:43.220 --> 00:09:45.560
in place there, telescope. There's
just like, you have the

174
00:09:45.560 --> 00:09:48.530
global object, which people can
do whatever they want to.

175
00:09:49.220 --> 00:09:52.520
That's not a model. That's
at least for me, it's,

176
00:09:52.700 --> 00:09:55.670
it's not something that could
like if you're going to

177
00:09:55.670 --> 00:10:00.320
build something huge and complex,
it's not good enough. What,

178
00:10:01.190 --> 00:10:04.370
what do you think about
the other languages? The other

179
00:10:04.370 --> 00:10:07.970
ironed languages, not about the
languages themselves, iron Ruby, and

180
00:10:07.970 --> 00:10:11.540
iron Python, but the, the
fact that they exist and

181
00:10:11.540 --> 00:10:15.260
what the community support around
them is. I mean, I

182
00:10:15.260 --> 00:10:17.870
think it's great. And I
mean, personally, like the way

183
00:10:17.870 --> 00:10:20.360
I learned, I mean, if
you're just looking from my

184
00:10:20.360 --> 00:10:21.860
point of view, the way
I learned to DLR was

185
00:10:21.860 --> 00:10:26.090
basically reading the Iram Python
source code top to bottom

186
00:10:26.180 --> 00:10:30.350
pretty much. And I mean,
I think it's great. And

187
00:10:30.650 --> 00:10:32.420
also you have the J
band, I think it's called,

188
00:10:32.450 --> 00:10:35.570
<inaudible> the one that runs
on the JVM for Python.

189
00:10:36.470 --> 00:10:40.250
I mean, they push, I
mean, they push the boundaries

190
00:10:40.250 --> 00:10:43.460
of those languages in terms
of like, for example, you

191
00:10:43.460 --> 00:10:46.460
can get threading in a
J Ruby and iron Ruby

192
00:10:46.850 --> 00:10:48.920
and et cetera. So I
think, I think it's a

193
00:10:48.920 --> 00:10:51.140
good for the language and
the community as a whole

194
00:10:51.140 --> 00:10:54.140
to have those other implementations
available, even though they might

195
00:10:54.140 --> 00:10:59.840
not be like, become the
canonical one or that they

196
00:10:59.840 --> 00:11:03.860
ever will. But it's, So
you're saying that just because

197
00:11:03.860 --> 00:11:06.950
the fact that they're not
perfect implementations, that the fact

198
00:11:06.950 --> 00:11:10.820
that they exist still is
important. Yeah. It sounds like,

199
00:11:10.940 --> 00:11:12.950
I mean, how many I
read a thread on Reddit

200
00:11:12.950 --> 00:11:15.350
a couple of days back,
like there just like, I

201
00:11:15.350 --> 00:11:17.990
don't know how many people
suppose compilers people are saying,

202
00:11:17.990 --> 00:11:20.270
like, why don't we just
have one of them or

203
00:11:20.480 --> 00:11:23.300
one of those, like one
that's the best, but the

204
00:11:23.300 --> 00:11:26.510
problem is like, that's not
really something you can apply

205
00:11:26.510 --> 00:11:28.820
and what's best, it's different
for different types of people.

206
00:11:28.820 --> 00:11:31.220
Like if you're gonna use
Python or Ruby and you

207
00:11:31.220 --> 00:11:34.940
actually need threading, like you
have to have it, then

208
00:11:34.940 --> 00:11:38.120
you can run iron Python,
orange, I thumb, and you'll

209
00:11:38.120 --> 00:11:40.460
actually have a real threading
threading instead of the sort

210
00:11:40.460 --> 00:11:43.370
of half big green threads
or whatever it's called. It's

211
00:11:43.370 --> 00:11:47.060
called on the Rubion stuff
like that. So, I mean,

212
00:11:47.060 --> 00:11:50.030
it's, I think it's good
for the language as a

213
00:11:50.030 --> 00:11:54.130
whole. Yeah. Have you, have
you worked the other iron

214
00:11:54.640 --> 00:11:57.580
fo the other iron people,
the other iron folks and

215
00:11:57.670 --> 00:11:59.920
talked about the DLR or
found any issues in the

216
00:11:59.920 --> 00:12:03.130
DLR itself? The DLR of
course being the, the dynamic

217
00:12:03.160 --> 00:12:10.350
language runtime. Yeah. I mean,
especially the, through the DLR

218
00:12:10.350 --> 00:12:15.210
forums on the.covid.com. I got
into contact with a couple

219
00:12:15.210 --> 00:12:19.560
of people who, who built
the DLR bill Childs, for

220
00:12:19.560 --> 00:12:22.740
example, helped a law, especially
in their earliest stages of

221
00:12:22.740 --> 00:12:24.840
building R and J S
back in say, this is

222
00:12:24.900 --> 00:12:28.740
January, 2010. So about a year
and a half ago, there's

223
00:12:29.370 --> 00:12:32.640
pretty much no documentation available
for the DLR, except for

224
00:12:32.970 --> 00:12:37.470
a demo like demo language
and a, an a, like

225
00:12:37.470 --> 00:12:39.540
a technical specifications. Like what
do, what do you want

226
00:12:39.540 --> 00:12:42.150
to call it? And, and
then when you actually starting

227
00:12:42.150 --> 00:12:46.020
to build something, there's a
million questions, and those guys

228
00:12:46.050 --> 00:12:51.570
really helped me out. They
know who they are. What

229
00:12:51.570 --> 00:12:54.900
is the difference between the,
is there like a DLR

230
00:12:54.900 --> 00:12:59.100
that's inside of a.net that
ships with that net, and

231
00:12:59.100 --> 00:13:02.010
then there's ongoing work? Or
did you just use the

232
00:13:02.010 --> 00:13:05.950
one that came and done
it for, I mean, I

233
00:13:05.950 --> 00:13:07.920
would use uses the ones
I use is one that

234
00:13:08.460 --> 00:13:10.050
came and done at four,
but if you want to

235
00:13:10.050 --> 00:13:13.350
run <inaudible> 3.5 or 3.0
or 2.0, you have to

236
00:13:13.350 --> 00:13:16.020
use the one that's available
from a code Plex and

237
00:13:16.020 --> 00:13:18.630
compile it, or these chips
with all the DLLs and

238
00:13:18.630 --> 00:13:23.340
everything. So, but the main,
I mean, the main, the

239
00:13:23.340 --> 00:13:26.430
main branch is targeted for
4.0, and that's where we

240
00:13:26.430 --> 00:13:28.020
do all the bulk of
our development. And then we

241
00:13:28.020 --> 00:13:30.150
backward, whatever we need to
make it run on a

242
00:13:30.150 --> 00:13:34.950
2.0 to 3.5 or so
without that requires the, the

243
00:13:34.950 --> 00:13:39.330
extra dealer DLLs you get
from a Plex basically. And

244
00:13:39.360 --> 00:13:41.010
does that, so that means
that you have a newer

245
00:13:41.010 --> 00:13:44.640
version of the DLR. If
I want to implement iron

246
00:13:44.640 --> 00:13:48.960
JS in my application. Well,
if you're using 4.0, it's

247
00:13:48.960 --> 00:13:51.360
going to be the deal
art, a chip with 4.0,

248
00:13:52.260 --> 00:13:55.530
but if you're using 3.5,
3.0 or 2.0, it's going

249
00:13:55.530 --> 00:13:59.910
to be the ideal out
of all our available whenever

250
00:13:59.910 --> 00:14:02.550
we grabbed them the last
time, basically. Okay. So then

251
00:14:02.730 --> 00:14:05.070
I guess my kind of
my question, which is probably

252
00:14:05.100 --> 00:14:07.590
more subtle than I wanted
it to be was there's

253
00:14:07.590 --> 00:14:11.040
nothing blocking in the DLR
implementation that shipped with fora.

254
00:14:11.070 --> 00:14:13.290
There's nothing, there's no bug,
that's so awful that you

255
00:14:13.290 --> 00:14:17.910
couldn't do. Oh, no, absolutely
not. I mean, it's built,

256
00:14:18.390 --> 00:14:20.850
it's targeted at the DLR
and 4.0, and that's what

257
00:14:20.850 --> 00:14:23.510
we were working at. Then
there, I mean, there's been,

258
00:14:23.850 --> 00:14:25.890
I think there was one
issue where there was a

259
00:14:25.890 --> 00:14:29.460
feature that had changed or
something that we had to

260
00:14:29.520 --> 00:14:35.250
patch it and fix, but
in general, it's working flawlessly.

261
00:14:36.480 --> 00:14:41.010
Very cool. Very cool. That's
comforting. How much, whenever I

262
00:14:41.010 --> 00:14:45.060
hear about someone writing a
language implementation, I always get

263
00:14:45.060 --> 00:14:48.300
back to, like, when we
did this in computer science,

264
00:14:48.360 --> 00:14:51.500
did you, did you go
to university and, and implement

265
00:14:51.500 --> 00:14:54.280
parsers and lectures and things?
No, I am one of

266
00:14:54.280 --> 00:14:58.210
those. Like, what do you
want to call? Like, like,

267
00:14:58.300 --> 00:15:02.050
I, I barely finished high
school pretty much. And then

268
00:15:02.080 --> 00:15:03.820
I've been programming since I
was like 10, 11 or

269
00:15:03.820 --> 00:15:08.410
something. And I know around
five, six, seven years ago,

270
00:15:08.640 --> 00:15:12.790
I started reading about implementing
languages. And then, I mean,

271
00:15:12.790 --> 00:15:15.970
I learned it as I
went along, building a little

272
00:15:15.970 --> 00:15:17.590
DSL here or building a
little parts of it that

273
00:15:17.590 --> 00:15:19.870
are, you know, like small
stuff. And then it all

274
00:15:19.870 --> 00:15:24.160
culminated in and JS. I
think, I think that the

275
00:15:24.160 --> 00:15:27.100
word for that is a
natural thing. If you're writing

276
00:15:27.640 --> 00:15:30.460
your own language implementation and
you haven't gone to a

277
00:15:30.490 --> 00:15:37.390
university, you're a natural, what,
what, what did, what did

278
00:15:37.390 --> 00:15:39.370
you have to do as
far as like computer science

279
00:15:39.370 --> 00:15:41.500
research? I guess I want
to understand that I always

280
00:15:41.500 --> 00:15:46.090
thought of it as being
an extremely complicated thing. You

281
00:15:46.090 --> 00:15:48.970
know, I remember when I
was doing this in college,

282
00:15:49.600 --> 00:15:52.450
it always seemed like the
most impressive thing. You know,

283
00:15:52.810 --> 00:15:57.250
people dragging buttons around and
making UIs was, was interesting,

284
00:15:57.640 --> 00:15:59.440
but, you know, it was
always the, either the guy

285
00:15:59.440 --> 00:16:02.950
working on the kernel, you
know, doing something low level,

286
00:16:02.950 --> 00:16:05.650
like a driver or it's
the person who's implementing their

287
00:16:05.650 --> 00:16:09.040
own language that really always
blew, blew my mind. Did

288
00:16:09.040 --> 00:16:12.640
you have to do any
research on the correct structure

289
00:16:12.910 --> 00:16:16.540
that kind of the classic
science behind, you know, building

290
00:16:16.540 --> 00:16:20.650
an abstract syntax tree? Or
did you just look to

291
00:16:20.650 --> 00:16:25.180
the existing implementations for your
help? I mean, I don't

292
00:16:25.180 --> 00:16:27.970
know how many books I
read in total. I think

293
00:16:27.970 --> 00:16:30.470
it's about six or seven
books. Like, you know, like,

294
00:16:30.790 --> 00:16:35.020
like tomes basically on everything
from like mixing parsing and

295
00:16:35.440 --> 00:16:38.860
like compiling, implementation, stuff like
that. I think. Yeah. I

296
00:16:38.860 --> 00:16:42.640
think I've read about seven
books in total. And it's

297
00:16:42.640 --> 00:16:45.820
funny that you say that
in like, in the university

298
00:16:45.820 --> 00:16:48.550
of college, like, cause I
was a complete opposite. Like

299
00:16:48.790 --> 00:16:52.030
whenever, whenever, whenever anyone wanted
us to sort of like,

300
00:16:52.060 --> 00:16:53.920
you know, be like you
or I, or build this

301
00:16:53.920 --> 00:16:55.810
or that it's like, it's
boring. I prefer the, like

302
00:16:55.840 --> 00:16:58.930
the lower level of stuff
that like just the black

303
00:16:58.930 --> 00:17:00.730
and white, like there's no
UI, no nothing. This is

304
00:17:00.740 --> 00:17:04.930
like a console output and
that's it that's So that's

305
00:17:04.930 --> 00:17:07.600
just, that's that's what you
just dig. That's your built

306
00:17:07.600 --> 00:17:11.080
in that way? Yeah. I
mean, that's, that's, that's what

307
00:17:11.080 --> 00:17:13.450
I prefer to work with.
Like no graphics or anything,

308
00:17:13.450 --> 00:17:17.890
just like a console UI,
like building libraries and languages

309
00:17:17.890 --> 00:17:21.940
and stuff like that. This
episode of Hansel minutes is

310
00:17:21.940 --> 00:17:25.810
brought to you by careers.
2.0 careers, 2.0 is a

311
00:17:25.810 --> 00:17:28.870
new service by our friends
at stack overflow. You're probably

312
00:17:28.870 --> 00:17:31.450
all familiar with stack overflow,
the online Q and a

313
00:17:31.450 --> 00:17:36.940
resource dedicated specifically to programmers
and programming related topics. Well,

314
00:17:36.940 --> 00:17:40.450
the team at stack overflow
created careers 2.0 to provide

315
00:17:40.450 --> 00:17:43.120
you with access to great
jobs and introduce you to

316
00:17:43.120 --> 00:17:45.130
a bunch of great companies
that you might consider working

317
00:17:45.130 --> 00:17:47.650
for, even if you're not
currently looking for a job,

318
00:17:48.340 --> 00:17:52.080
think of careers. 2.0 is
a program profile gives you

319
00:17:52.080 --> 00:17:55.050
a platform to show that
you're awesome by featuring your

320
00:17:55.050 --> 00:18:00.000
proudest contributions to stack overflow
GitHub SourceForge Bitbucket, anything programming

321
00:18:00.000 --> 00:18:03.090
related, you can even add
your favorite programming books from

322
00:18:03.090 --> 00:18:07.470
amazon.com profiles on careers. 2.0
are free. They're easy to

323
00:18:07.470 --> 00:18:12.120
get started, especially by importing
your LinkedIn profile. However, there's

324
00:18:12.120 --> 00:18:17.610
one catch profiles and career
2.0 or invite only they

325
00:18:17.610 --> 00:18:19.380
did this to keep out
the spam and have a

326
00:18:19.560 --> 00:18:23.490
high quality environment. Fortunately for
you as a Hansel minutes

327
00:18:23.490 --> 00:18:26.910
listener, I've got your back
head on over to careers

328
00:18:27.270 --> 00:18:32.610
dot stack overflow.com/h M to
accept your invitation today, once

329
00:18:32.610 --> 00:18:38.940
again, that's careers dot stack,
overflow.com/hm. I hope you like

330
00:18:38.940 --> 00:18:42.690
it. The, can you walk
us a little bit through

331
00:18:42.690 --> 00:18:47.250
the structure? Like what's actually
involved in this, you know,

332
00:18:47.250 --> 00:18:50.340
you have a text file
with like food dot JS.

333
00:18:50.370 --> 00:18:53.790
Do you have to do
the parsing? What is available

334
00:18:53.790 --> 00:18:56.910
to you as a, as
a language service? You know,

335
00:18:56.910 --> 00:18:58.380
what are you doing? What
do they do, I guess

336
00:18:58.380 --> 00:19:00.020
is my question. If you
start, You mean what the

337
00:19:00.020 --> 00:19:02.870
DLR does and what I
do? Yeah. All the way

338
00:19:02.870 --> 00:19:04.850
from the point where someone
opens this file up and

339
00:19:04.850 --> 00:19:08.180
starts looking at the bite
by bite. How does that

340
00:19:08.180 --> 00:19:11.300
process work? I mean, basically
the first thing I do

341
00:19:11.300 --> 00:19:15.380
is you read the file
and into R and D

342
00:19:15.890 --> 00:19:19.340
it's reads the file into
its compiler. There's a little

343
00:19:19.340 --> 00:19:23.060
extra cause basically splits the
file off into tokens, becomes

344
00:19:23.060 --> 00:19:25.330
a, it's called a stream
of tokens or stream of

345
00:19:25.340 --> 00:19:30.110
vaccines, basically just keywords and
numbers. And you know, like

346
00:19:30.140 --> 00:19:33.770
the building blocks basically there's
no pattern or in Texas.

347
00:19:33.770 --> 00:19:36.410
Yeah. Just like the building
blocks lined up. Did you

348
00:19:36.410 --> 00:19:39.680
have to write the parser?
Yeah. That's that's the handwritten

349
00:19:39.830 --> 00:19:43.680
and Sharpie on pretty much
everything RNJ is, does is

350
00:19:43.700 --> 00:19:47.960
handwritten and sharp. There's no
like outage auto-generated and stuff.

351
00:19:48.530 --> 00:19:50.720
So I wanna make sure
that people understood this because

352
00:19:50.720 --> 00:19:53.810
I just, my mind was
just blown. Most of iron

353
00:19:53.810 --> 00:19:58.880
JS is actually written in
F sharp. Not C-sharp correct.

354
00:19:59.330 --> 00:20:02.390
Yeah. Pretty much. Well there's
only, I mean, the units

355
00:20:02.390 --> 00:20:05.210
has some stuff written in
C sharp, but everything's within

356
00:20:05.210 --> 00:20:08.660
an F sharp. Yes. Wow.
That's go ahead. And do

357
00:20:08.660 --> 00:20:10.820
you think F sharp is
going a little bit of

358
00:20:10.820 --> 00:20:13.820
a tangent, but F sharp
is well suited for doing

359
00:20:13.820 --> 00:20:16.550
this kind of work for
language work? Yeah. I mean,

360
00:20:16.550 --> 00:20:18.800
that's the reason I picked
up sharp. First of all,

361
00:20:18.800 --> 00:20:21.380
I wanted to learn the
language. I mean, I've dabbled

362
00:20:21.380 --> 00:20:23.510
in F sharp before I
started and is, but I

363
00:20:23.510 --> 00:20:28.490
hadn't actually built anything major
in it, but I mean,

364
00:20:28.490 --> 00:20:30.980
functional programming and what I've
learned, I learned over the

365
00:20:30.980 --> 00:20:32.390
year and a half or
two years, I've been working

366
00:20:32.390 --> 00:20:36.080
on this. It's like F
sharp is made for these

367
00:20:36.080 --> 00:20:41.660
types of problems. It's, it's
just, it's perfect. The only

368
00:20:41.660 --> 00:20:45.320
word I have actually. So
building trees, parsing stuff, doing

369
00:20:45.320 --> 00:20:48.460
it in a kind of
a mathematically and very tight

370
00:20:48.460 --> 00:20:50.500
way. This is what I've
sharps tend to be done.

371
00:20:51.030 --> 00:20:54.570
Yeah. And especially like the
amount of it, like how

372
00:20:54.630 --> 00:20:56.550
few lines of code you
end up with like all

373
00:20:56.550 --> 00:20:58.440
of our NJS it's about
nine and a half thousand

374
00:20:58.440 --> 00:21:02.640
lines of code, which is
not a lot. Yeah. I

375
00:21:02.640 --> 00:21:04.890
mean, there is it's of
course, very dense and tears,

376
00:21:05.160 --> 00:21:08.400
but compared to I had
one version in C sharp

377
00:21:08.730 --> 00:21:11.430
that's I think it was
around 30,000 lines, which wasn't

378
00:21:11.430 --> 00:21:18.030
even complete. So I love
the language. It's awesome. Wow.

379
00:21:18.060 --> 00:21:20.580
That seems nine, nine and
a half thousand lines for

380
00:21:20.580 --> 00:21:24.750
the whole thing. And did
it start out that small

381
00:21:24.750 --> 00:21:26.580
and stay small? Or is
it one of those things

382
00:21:26.580 --> 00:21:28.470
where it started out big
and you started yanking stuff

383
00:21:28.500 --> 00:21:32.280
out and you, No, it's
been a, it's been growing

384
00:21:32.280 --> 00:21:35.340
basically as we add more
features. I mean, for a

385
00:21:35.340 --> 00:21:38.280
while we were hovering around
like 6,000 lines or a

386
00:21:38.280 --> 00:21:42.420
couple of months, but then
we added all like the

387
00:21:42.420 --> 00:21:45.750
native, like the built in
JavaScript objects and stuff. And

388
00:21:45.750 --> 00:21:48.540
those take up a lot
of like line space because

389
00:21:48.540 --> 00:21:51.690
there's a lot of where
stuff, well, if you know,

390
00:21:51.690 --> 00:21:53.040
JavaScript, you know what I
mean? There's a lot of

391
00:21:53.040 --> 00:21:55.170
weird methods and weird stuff
you need to account for

392
00:21:55.170 --> 00:22:00.120
in the built in functions
and objects. Those took about

393
00:22:00.150 --> 00:22:04.680
two and a half, 3000
lines, Slick, slick. Okay. So

394
00:22:04.680 --> 00:22:07.770
then this becomes a, you
parse it into tokens and

395
00:22:07.770 --> 00:22:11.880
then the token turns into
an abstract syntax tree. Is

396
00:22:11.880 --> 00:22:15.330
that tree structure provided by
the DLR, or is that

397
00:22:15.330 --> 00:22:19.140
something you have to build?
That's a two structure built

398
00:22:19.140 --> 00:22:24.300
in, if sharp, you could
potentially, you could go directly

399
00:22:24.300 --> 00:22:29.940
to the DLR, like expression
tree, but there's, I want

400
00:22:29.940 --> 00:22:33.270
to do a lot of
optimizations and stuff that can

401
00:22:33.270 --> 00:22:35.820
be done on the expression
trees. So I first build

402
00:22:35.860 --> 00:22:41.220
a like iron JSS, own
syntax tree or aspects index

403
00:22:41.220 --> 00:22:43.800
tree type. So the tree
of that, and then I

404
00:22:44.100 --> 00:22:46.650
do a lot of optimizations
on that. And then I

405
00:22:46.650 --> 00:22:50.520
compared it to a DLR
three, and then I asked

406
00:22:50.860 --> 00:22:53.310
DLR to compile it and
then gives me the all,

407
00:22:54.060 --> 00:22:55.740
and I'm not going to
compile the delegates back that

408
00:22:55.800 --> 00:22:59.250
you can invoke. Okay. So,
so there's the interesting part

409
00:22:59.250 --> 00:23:03.900
there. The, the, the handoff,
what services did the DLR

410
00:23:03.900 --> 00:23:06.480
provide to you once you'd
done the hard work of

411
00:23:06.630 --> 00:23:10.110
parsing the language and understanding
the language? I mean, basically,

412
00:23:10.860 --> 00:23:12.780
so if I back up
a bit, what I will

413
00:23:12.780 --> 00:23:15.230
have, like after I've read
the file and I personally

414
00:23:15.230 --> 00:23:17.280
into an app six abstract
syntax tree, and I'm done

415
00:23:17.280 --> 00:23:21.210
with optimizations, I'll have a
syntax tree that is not

416
00:23:21.240 --> 00:23:24.660
the large specific, RNJ a
specific, then I run into

417
00:23:24.660 --> 00:23:27.480
what is called the compiler
internally in R and J

418
00:23:27.480 --> 00:23:30.900
is, which is what takes
the syntax tree in our

419
00:23:30.900 --> 00:23:33.990
latest form and converts it
to this expression tree, which

420
00:23:33.990 --> 00:23:36.540
is exactly the same month
that you get with Lincoln

421
00:23:36.540 --> 00:23:41.100
stuff in C sharp. And
that's basically what the dealer

422
00:23:41.970 --> 00:23:44.880
provides for me. So I
turn it into these expression,

423
00:23:45.740 --> 00:23:49.970
which I then call con
dot compiled on the top.

424
00:23:49.970 --> 00:23:52.790
Most one of the outer
one, which turns it into

425
00:23:52.790 --> 00:23:57.410
the aisle dynamically and in
a dynamic assembly and done

426
00:23:57.410 --> 00:24:00.500
that 4.2 gives me like
a delegate back or yeah,

427
00:24:02.590 --> 00:24:04.570
One of the things that
people had said would always

428
00:24:04.570 --> 00:24:08.020
be difficult for the whole
iron class of languages was

429
00:24:08.020 --> 00:24:13.510
the idea that, that th
th the DLR is ultimately

430
00:24:13.510 --> 00:24:15.910
still on top of the
CLR and the CLR likes

431
00:24:15.910 --> 00:24:20.380
things compiled. And even though
there's things like, you know,

432
00:24:20.380 --> 00:24:23.980
methods, site caching, and all
sorts of optimizations to make

433
00:24:23.980 --> 00:24:29.230
things fast, ultimately it's just
not structured appropriately for a

434
00:24:29.230 --> 00:24:33.400
language that's so dynamic as,
as JavaScript is, is that

435
00:24:33.430 --> 00:24:37.330
what is keeping you from
being as fast as, you

436
00:24:37.330 --> 00:24:40.930
know, like a C-sharp or
as fast as Google Chrome

437
00:24:40.930 --> 00:24:43.000
or something like that? Is
it just that the CLR

438
00:24:43.000 --> 00:24:45.280
won't let you go that
fast? Or is it something

439
00:24:45.280 --> 00:24:50.410
else We're about, I'd say
we're about a 10 times

440
00:24:50.410 --> 00:24:54.550
slower than Google Chrome currently
there about like 10, 12,

441
00:24:54.580 --> 00:24:57.310
13 town floor. And it's
like, there's going to be

442
00:24:57.310 --> 00:24:59.920
a point where we can't
get any faster because like

443
00:24:59.920 --> 00:25:02.350
the CLR, cause I mean,
like if you have hand,

444
00:25:02.530 --> 00:25:04.630
hand optimized C or C
plus plus code will always

445
00:25:04.630 --> 00:25:07.120
be faster than the equivalency
sharp code because of the

446
00:25:07.120 --> 00:25:11.200
CLR, for example. And there
will be a point when

447
00:25:11.200 --> 00:25:14.320
we hit that wall. I
think I'm expecting it to

448
00:25:14.320 --> 00:25:18.130
be around three or four
times slower than Chrome, sort

449
00:25:18.130 --> 00:25:24.040
of what I'm aiming at.
But right now it's like,

450
00:25:24.040 --> 00:25:28.240
we just haven't had time
to do enough optimizations to

451
00:25:28.240 --> 00:25:30.950
make it that fast. Like
all the optimization tricks that

452
00:25:31.090 --> 00:25:33.130
Google Chrome uses are not
in place. And I, and

453
00:25:33.130 --> 00:25:35.860
J is, so we lose
a lot of performance that

454
00:25:35.860 --> 00:25:40.360
way. We're never going to
be assaulted. I'd say physically

455
00:25:40.360 --> 00:25:43.780
impossible. Since the CLR does
more work per instruction than

456
00:25:44.650 --> 00:25:50.140
the native code does. I
noticed that last, last month

457
00:25:50.140 --> 00:25:54.940
you became faster than I
ate though. I mean, that's

458
00:25:54.940 --> 00:25:57.280
pretty mind blowing. I mean,
that must dependence. I mean,

459
00:25:57.310 --> 00:26:00.280
we did, you know, you
were close to getting that

460
00:26:00.280 --> 00:26:02.080
fast or did you just
test it one day and

461
00:26:02.080 --> 00:26:04.630
say, Oh, wow. Look at
that. I, I knew I

462
00:26:04.630 --> 00:26:07.480
was going to be, I
ate. And I'm like, yeah,

463
00:26:08.050 --> 00:26:12.910
like I've been like, I've
been building prototypes for different

464
00:26:12.910 --> 00:26:16.450
types of features and optimizations
for like, as a side

465
00:26:16.450 --> 00:26:19.840
project. Like my private R
and D is repository house

466
00:26:19.850 --> 00:26:23.290
about 50 branches with different
optimizations to optimization tricks and

467
00:26:23.290 --> 00:26:29.290
stuff in it. And I
knew I was going to

468
00:26:29.290 --> 00:26:32.230
be fascinated. Eventually it was
just a matter of time.

469
00:26:33.310 --> 00:26:36.790
So what we did was
we finished up the, the

470
00:26:36.790 --> 00:26:41.980
0.2 release that basically completes
the ECMO 3.0 certification support.

471
00:26:42.670 --> 00:26:45.000
And then me and John
gets Gibson. Who's helping me

472
00:26:45.000 --> 00:26:48.420
on this. They decided to
start optimizing stuff. And just

473
00:26:48.420 --> 00:26:52.530
basically I started implementing the
tricks that I already discovered

474
00:26:52.530 --> 00:26:54.180
or learned from Chrome and
all ready to try it

475
00:26:54.180 --> 00:26:58.200
out in one of my
development branches is putting them

476
00:26:58.200 --> 00:27:02.090
over. Basically. I see. So,
so iron J has 0.2,

477
00:27:02.090 --> 00:27:04.640
which came out recently was
really more of a correctness

478
00:27:04.640 --> 00:27:11.060
release and not an optimization
release. Yeah, exactly. That's basically

479
00:27:11.060 --> 00:27:16.580
ECMAScript trip 3.0, 2.0, support.
Yeah. Yeah. It's pretty amazing.

480
00:27:16.580 --> 00:27:21.260
It looks like you've got
5,500 tests with over 30,000

481
00:27:21.260 --> 00:27:25.100
assertions and are you passing
them all? Let's see her.

482
00:27:25.130 --> 00:27:27.830
There's actually about 10,000 tests
now. Let's see, I have

483
00:27:27.830 --> 00:27:34.190
that in front of me.
Let's see. Here we have

484
00:27:34.190 --> 00:27:39.650
about 11,000 tests were failing
about 344 of them currently.

485
00:27:40.640 --> 00:27:43.550
Wow. 11,000 tests. And you're
failing under 400 of them.

486
00:27:44.720 --> 00:27:50.450
Yeah. About 350 96.8 pass
rate, if that matters. And

487
00:27:50.450 --> 00:27:54.290
I think it's about 60,000
assertions or something. Wow. So

488
00:27:54.290 --> 00:27:56.840
you think that someone could
totally use, even at 0.2,

489
00:27:56.840 --> 00:27:58.910
they could start looking at
using this as a scripting

490
00:27:58.910 --> 00:28:02.630
language within their existing application,
you would feel comfortable with

491
00:28:02.630 --> 00:28:05.570
it. It's correct enough. Yeah.
I mean, it definitely like

492
00:28:05.630 --> 00:28:09.770
if you're after the feature
set in terms of like,

493
00:28:09.770 --> 00:28:12.020
you want it scripting language,
if you're not looking so

494
00:28:12.020 --> 00:28:15.410
much for speed, a third
0.2 is perfectly suitable for

495
00:28:16.130 --> 00:28:22.430
integrating into your platform of
choice. I mean, we're, we're

496
00:28:22.430 --> 00:28:27.680
looking to get better. You
could easily call like JavaScript

497
00:28:27.680 --> 00:28:31.910
stuff from.net and you can
also like expose classes and

498
00:28:31.910 --> 00:28:35.060
functionality to JavaScript, but we
looking at a better we're

499
00:28:35.480 --> 00:28:39.530
implementing right now, a better,
better way to get like

500
00:28:39.560 --> 00:28:42.440
what we call a seamless
integration, which allows you to

501
00:28:42.470 --> 00:28:45.350
basically pass any done that
object into JavaScript and then

502
00:28:45.350 --> 00:28:48.050
call it like it was
a native JavaScript object or

503
00:28:48.050 --> 00:28:51.260
whatever. That was my next
question. That seems really interesting.

504
00:28:52.450 --> 00:28:54.290
It would be, do you
have any sample applications? It'd

505
00:28:54.290 --> 00:28:56.930
be nice to see if
someone could kind of bring

506
00:28:56.930 --> 00:28:58.670
this down with new, get,
you know, and I could

507
00:28:58.670 --> 00:29:03.910
say, you know, file new
console application, install, package, I,

508
00:29:03.910 --> 00:29:08.180
and JS make a couple
of dotnet objects, throw them

509
00:29:08.180 --> 00:29:12.740
into JavaScript space and start
scripting against them with JavaScript

510
00:29:12.740 --> 00:29:16.310
directly within, you know, 10
lines of code. Yeah. I

511
00:29:16.310 --> 00:29:20.550
mean, we have, I mean,
the problem right now, not

512
00:29:20.780 --> 00:29:22.340
so much a problem with
this, but yeah, we haven't,

513
00:29:22.370 --> 00:29:25.880
I haven't had time to
build the, what I like,

514
00:29:25.910 --> 00:29:30.560
like the integration, all the
DLR binders for the integration

515
00:29:30.590 --> 00:29:34.610
for against CLR objects. But
once that's in place, it's

516
00:29:35.360 --> 00:29:37.510
basically just going to be
passed out. They can call

517
00:29:37.520 --> 00:29:41.350
whatever you want on it.
Then it'll work flawlessly. There

518
00:29:41.350 --> 00:29:43.750
is a way like if
you need to, like, if

519
00:29:43.750 --> 00:29:46.570
you need to use a
0.2 release and you actually

520
00:29:47.020 --> 00:29:49.720
want to pass on an
object and, and call methods

521
00:29:49.720 --> 00:29:52.660
on it, it is possible
today, but it's a bit

522
00:29:53.380 --> 00:29:56.590
annoying because it requires a
bunch of codes to do

523
00:29:56.590 --> 00:30:00.310
it because you need to
expose, expose it as a

524
00:30:00.310 --> 00:30:03.850
native JavaScript object instead of
a CLR object to JavaScript.

525
00:30:03.880 --> 00:30:07.180
So it's a bit annoying.
There's an example on how

526
00:30:07.180 --> 00:30:08.920
to do it in the
Vicki on get hub, but

527
00:30:09.810 --> 00:30:13.160
How, how large is this
project? And do you need,

528
00:30:13.380 --> 00:30:15.090
do you need help? You
know, what would you tell

529
00:30:15.090 --> 00:30:17.490
the community? Is it just
you and an, a couple

530
00:30:17.490 --> 00:30:20.550
of friends or is it
just you who is involved

531
00:30:20.550 --> 00:30:23.940
and how can people help
Basically? I mean, I've done

532
00:30:23.940 --> 00:30:27.930
the bulk work. I'd say
about 90% myself, maybe a

533
00:30:27.930 --> 00:30:32.700
bit less in March or
February of February. I think

534
00:30:32.750 --> 00:30:37.440
a guy named John Gibson from
the States started submitting patches

535
00:30:37.440 --> 00:30:41.820
to it. And after a
couple of days started working

536
00:30:41.820 --> 00:30:45.060
together, he got access and
everything, and we've been running

537
00:30:45.090 --> 00:30:48.630
the show together up to
this point to release and

538
00:30:49.500 --> 00:30:54.270
LR. Basically it's two of
us, like if the community

539
00:30:54.270 --> 00:30:56.760
wants to help the best
way is just to fork

540
00:30:56.760 --> 00:31:00.000
the product and get hub,
make a call like changes

541
00:31:00.000 --> 00:31:02.340
and send a polar request.
And then after like a

542
00:31:02.340 --> 00:31:05.280
couple of good pull requests,
we'll just grant you access

543
00:31:05.280 --> 00:31:07.350
to the main repo and
you can start hacking away

544
00:31:07.350 --> 00:31:11.100
on the master branch. Very
cool. And that really is

545
00:31:11.100 --> 00:31:13.200
the way that it should
be done these days with,

546
00:31:13.860 --> 00:31:17.010
with things like get and
things like mercurial, just fork

547
00:31:17.010 --> 00:31:19.020
it, work on it on
your own, do your thing,

548
00:31:19.050 --> 00:31:22.170
and then say, Hey, look,
I did something interesting and

549
00:31:22.170 --> 00:31:24.990
people will check it out.
Yeah. And it's, it's not

550
00:31:24.990 --> 00:31:28.500
like we require some like
major like, Oh, add completely

551
00:31:28.500 --> 00:31:30.030
new feature or something. We
just like a couple of

552
00:31:30.030 --> 00:31:31.710
lines of fixes that are
like a couple of bucks,

553
00:31:31.710 --> 00:31:33.780
fix his hair or something
and you'll get access and

554
00:31:34.530 --> 00:31:38.010
can start wishing to the
main repo. So, I mean,

555
00:31:38.010 --> 00:31:42.150
that's how John got, and
John got a start on

556
00:31:42.150 --> 00:31:44.430
it. He, I think he
generated new unit tests or

557
00:31:44.430 --> 00:31:46.530
something, which was exactly what
I needed the first moment.

558
00:31:46.530 --> 00:31:49.590
I was just like, Oh
cool. And we started working

559
00:31:49.590 --> 00:31:52.830
together. That's great. That's, that's
how it should work. I

560
00:31:52.830 --> 00:31:55.530
think. Yeah. I mean, I
really liked the sort of

561
00:31:55.530 --> 00:31:58.770
like, I mean, get up
and do what's called Bitbucket

562
00:31:58.770 --> 00:32:00.840
and stuff like that. It's
sort of, it's sort of

563
00:32:00.840 --> 00:32:05.640
like the social network, but
for programmers basically like yeah,

564
00:32:05.670 --> 00:32:10.630
programmers, I think you'd have,
it is as important for

565
00:32:10.770 --> 00:32:14.790
like programmers as Facebook is
for, I don't want to

566
00:32:14.790 --> 00:32:17.340
say normal people, but people
who are not programmers like

567
00:32:17.340 --> 00:32:21.900
that. Cool. Well, I appreciate
your sharing with us. It

568
00:32:21.900 --> 00:32:24.420
looks like there's lots of
information about iron JS up

569
00:32:24.420 --> 00:32:29.220
on iron js.wordpress.com and charts
and graphs. Also at the

570
00:32:29.220 --> 00:32:31.740
GitHub repository, they can look,
bring the whole thing down

571
00:32:31.740 --> 00:32:34.140
and get it running on
their own machines. We'll put

572
00:32:34.140 --> 00:32:36.120
all of that together in
the show notes, as well

573
00:32:36.120 --> 00:32:38.700
as a couple of interesting
articles from places like iwi

574
00:32:38.790 --> 00:32:42.350
and Q about iron JS
and folks, you can probably

575
00:32:42.350 --> 00:32:48.880
follow you on Twitter, I
assume. Yeah. That's my Twitter

576
00:32:48.880 --> 00:32:52.780
handle. We'll link to that
as well. Thanks for the

577
00:32:52.780 --> 00:32:55.000
time. This is really interesting.
I'm glad that people are

578
00:32:55.240 --> 00:32:57.760
still going forward with the
DLR and iron this and

579
00:32:57.760 --> 00:32:59.830
that, because I think that
there is, there is a

580
00:32:59.830 --> 00:33:02.830
need for this stuff and
I hope Microsoft realizes it

581
00:33:02.830 --> 00:33:05.890
one day. Yeah, I agree.
I mean, the DLR is

582
00:33:06.010 --> 00:33:10.030
a great piece of software.
I said this before, but

583
00:33:10.030 --> 00:33:12.430
it's probably the best library
I've ever used in my

584
00:33:12.430 --> 00:33:15.850
whole life. That's a Testament
to how freaking good at

585
00:33:15.850 --> 00:33:19.750
it. Very cool. All right.
This has been another episode

586
00:33:19.750 --> 00:33:22.180
of Hansel minutes and we'll
see you again next week.

