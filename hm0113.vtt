WEBVTT FILE

1
00:00:12.770 --> 00:00:17.750
Hansel minutes.com. It's Hanselman. It's
our weekly discussion with web

2
00:00:17.750 --> 00:00:23.000
developer and technologists. Scott Hanselman
hosted by Carl Franklin. This is

3
00:00:23.000 --> 00:00:29.000
Lawrence Ryan announcing show number one
13 recorded live Thursday, May 15th, 2008.

4
00:00:30.020 --> 00:00:33.800
Support for Hansel minutes as
provided by. Tellerik already controls

5
00:00:34.130 --> 00:00:37.280
the most comprehensive suite of
components for windows forms and

6
00:00:37.280 --> 00:00:47.720
asp.net web applications. online@wwwdottelerik.com. Support
is also provided by Dodman

7
00:00:47.720 --> 00:00:53.690
developer's journal. The world's leading.net
developer magazine online at www

8
00:00:53.690 --> 00:00:58.760
dot <inaudible> dot com. In
this episode, Scott talks with

9
00:00:58.820 --> 00:01:02.390
Owen Rogers, one of the
original authors of cruise control.net

10
00:01:02.510 --> 00:01:09.290
about extending continuous integration with
continuous miles. Hi, this is

11
00:01:09.290 --> 00:01:11.420
Scott Hanselman, and this is
another episode of Hansel minutes,

12
00:01:11.420 --> 00:01:13.400
and I'm sitting here with
Owen Rogers of the small

13
00:01:13.400 --> 00:01:16.040
energy group, formerly of thought
works. And one of the

14
00:01:16.040 --> 00:01:19.220
founders of cruise control.net, and
I've done a couple of

15
00:01:19.220 --> 00:01:21.800
shows before on continuous integration,
but the opportunity to sit

16
00:01:21.800 --> 00:01:23.360
down with one of the
founding members of the cruise

17
00:01:23.360 --> 00:01:26.180
control.net project was too great
to pass up. So I

18
00:01:26.180 --> 00:01:29.420
appreciate you sitting down with
me today. Thanks Scott. So

19
00:01:29.420 --> 00:01:31.490
you had said that there's
some, there's some history going

20
00:01:31.490 --> 00:01:33.500
on about the cruise control.net
project and it was a

21
00:01:33.500 --> 00:01:36.140
more difficult to actually get
out into the world and

22
00:01:36.140 --> 00:01:39.290
maybe a lot of us
realize, Yeah, so I started

23
00:01:39.290 --> 00:01:44.450
with cruise control.net back in
2002. So right at the

24
00:01:44.450 --> 00:01:49.790
time when I joined ThoughtWorks,
ThoughtWorks was embarking on building

25
00:01:49.790 --> 00:01:53.090
a relationship with Microsoft and
they wanted to demonstrate what

26
00:01:53.090 --> 00:01:55.040
some of these tools were
that they were working on

27
00:01:55.040 --> 00:01:59.240
in the, the Java open
source space for Microsoft. So

28
00:01:59.240 --> 00:02:02.870
it was quite serendipitous for
me. I came into ThoughtWorks

29
00:02:02.870 --> 00:02:06.260
with a bit of a.net
experience, and I was involved

30
00:02:06.260 --> 00:02:08.870
in leading a team of
four other developers in Calgary,

31
00:02:09.470 --> 00:02:13.190
working on the initial release
of cruise control.net. So what

32
00:02:13.190 --> 00:02:16.580
we did was get cruise
control.net up to a level

33
00:02:16.580 --> 00:02:20.120
where it was sufficient to
be demonstrated to Microsoft. And

34
00:02:20.120 --> 00:02:24.110
then, and then we took
it from there. Once we

35
00:02:24.110 --> 00:02:25.940
achieved that goal, then there
was a bit of a

36
00:02:25.940 --> 00:02:28.130
dilemma for ThoughtWorks to deal
with, which is what do

37
00:02:28.130 --> 00:02:30.650
we do? What do we
do with this, with this

38
00:02:30.650 --> 00:02:33.440
product? Do we take it,
do we open source it?

39
00:02:33.860 --> 00:02:37.490
Do we turn it into
something that is potentially salable?

40
00:02:38.240 --> 00:02:40.730
And so there was quite
a bit of debate internally

41
00:02:40.730 --> 00:02:44.420
about whether to take it
and release it as open

42
00:02:44.420 --> 00:02:46.820
source or not. So how
does your project get spun

43
00:02:46.820 --> 00:02:48.980
up though, without an expectation
of how it's going to

44
00:02:48.980 --> 00:02:53.060
actually leave the mothership? Well,
it achieved the objective, which

45
00:02:53.060 --> 00:02:57.710
was to credentialize ThoughtWorks within
Microsoft and demonstrate what the

46
00:02:57.710 --> 00:03:00.280
value was associated. Some of
these things that we are

47
00:03:00.300 --> 00:03:04.000
quite excited about within the
Java space, the question was

48
00:03:04.000 --> 00:03:07.870
then how do we best
capitalize on this investment? Because

49
00:03:07.870 --> 00:03:10.780
it had been built up
on ThoughtWorks time. So there

50
00:03:10.780 --> 00:03:14.200
was myself and the other
individuals that were involved were

51
00:03:14.230 --> 00:03:17.080
not assigned to a project,
hence not billing out, not

52
00:03:17.080 --> 00:03:20.080
deriving revenue directly for ThoughtWorks
over that period of time.

53
00:03:20.320 --> 00:03:25.510
So ThoughtWorks was debating how,
how to best take advantage

54
00:03:25.510 --> 00:03:28.510
of this. And so thinking
that okay, being in the

55
00:03:28.510 --> 00:03:31.630
Microsoft space was different than
being in the Java space.

56
00:03:31.660 --> 00:03:36.760
People typically sold products within
the Microsoft space. Should we

57
00:03:36.760 --> 00:03:40.810
follow suit and in turn,
try and sell cruise control.net

58
00:03:40.810 --> 00:03:43.480
or leverage it to our
strategic advantage for new dotnet

59
00:03:43.480 --> 00:03:45.550
engagements. We could go in
and we could say, okay,

60
00:03:45.550 --> 00:03:48.880
we have this tool that
we're able to get up

61
00:03:48.880 --> 00:03:51.670
and running for you very
quickly. And it provides these

62
00:03:51.670 --> 00:03:56.320
benefits, et cetera. Fortunately, as
I said before, the clear

63
00:03:56.320 --> 00:03:59.230
heads prevailed and the decision
was made to open source

64
00:03:59.230 --> 00:04:02.670
the product. And this is,
This has been a product

65
00:04:02.820 --> 00:04:05.100
for me. This was kind
of like the first product

66
00:04:05.100 --> 00:04:07.170
that I use short of
Nant, which I was using

67
00:04:07.170 --> 00:04:09.030
to dry. I was driving
that with cruise control that

68
00:04:09.030 --> 00:04:11.580
really got me into this
whole, what I would, what

69
00:04:11.580 --> 00:04:15.360
I think of as the
alternative.net space. It's the, the

70
00:04:15.360 --> 00:04:18.150
thing that holds it all
together. But I remember trying

71
00:04:18.150 --> 00:04:20.420
to sell it to my
bosses, you know, sell it,

72
00:04:20.430 --> 00:04:23.400
trying to say, sell an
air quotes, telling my bosses

73
00:04:23.400 --> 00:04:25.500
that we should use cruise
control. A lot of them

74
00:04:25.500 --> 00:04:26.880
were saying, well, why you
should just use a batch

75
00:04:26.880 --> 00:04:29.190
file and just schedule it.
Why would I want to

76
00:04:29.190 --> 00:04:32.310
use cruise control.net or, or
any kind of continuous integration

77
00:04:32.310 --> 00:04:34.860
server and not just a
PowerShell script or a batch

78
00:04:34.860 --> 00:04:38.340
file on a schedule? Well,
it's very much been the

79
00:04:38.520 --> 00:04:40.680
kind of thin edge of
the wedge as far as

80
00:04:40.680 --> 00:04:45.000
agile adoption is concerned or
my experience so often. So

81
00:04:45.000 --> 00:04:47.940
I work pregnant predominantly as
an agile coach, actually, very

82
00:04:47.940 --> 00:04:51.450
little of what I do
deals with cruise control.net itself

83
00:04:52.260 --> 00:04:55.800
more often than not. If
it's used at all. My

84
00:04:55.800 --> 00:04:59.550
experience with cruise control.net is
used to help when an

85
00:04:59.550 --> 00:05:04.590
engagement with a client that
is looking to get their

86
00:05:04.860 --> 00:05:08.280
automated integration environment set up
and running, and then things

87
00:05:08.280 --> 00:05:10.680
very much proceed from there
because generally you can go

88
00:05:10.680 --> 00:05:13.290
in and you can set
up cruise control.net relatively quickly.

89
00:05:13.500 --> 00:05:16.440
And then it's like, okay,
now what's your biggest problem.

90
00:05:17.580 --> 00:05:22.920
So it's, it's nice because
it's relatively uncontroversial. Everybody can

91
00:05:22.920 --> 00:05:24.930
look at it and say,
daily builds are a good

92
00:05:24.930 --> 00:05:26.970
idea. What happens if we
make them more frequent? Well,

93
00:05:26.970 --> 00:05:29.400
that's gotta be twice as
good or many times. It's

94
00:05:29.400 --> 00:05:32.910
good. So it's a very
easy way to enter into

95
00:05:32.910 --> 00:05:36.690
an engagement with, with clients.
ThoughtWorks didn't necessarily recognize it

96
00:05:36.690 --> 00:05:40.410
as such the ThoughtWorks, despite
its rep public reputation as

97
00:05:40.410 --> 00:05:45.720
being a company that promotes
open source products has got

98
00:05:45.720 --> 00:05:53.760
a fairly, fairly skin scanty
reputation of harvesting open source

99
00:05:53.760 --> 00:05:58.550
projects internally. Instead it leverages
it to its it's, it's

100
00:05:58.550 --> 00:06:01.300
somewhat controversial internally. Well, it's
a business, right? I mean,

101
00:06:01.300 --> 00:06:03.220
ultimately they're trying to make
the money and pay the

102
00:06:03.220 --> 00:06:07.060
rent at some point. You're
exactly right. Which is that

103
00:06:07.450 --> 00:06:10.870
there was never really a
clear business model for ThoughtWorks

104
00:06:10.870 --> 00:06:14.140
about how do we derive
revenue directly from the open

105
00:06:14.140 --> 00:06:19.060
source assets that the company
had acquired or built up.

106
00:06:19.990 --> 00:06:24.520
So, and so the, the
link was always accepted as

107
00:06:24.520 --> 00:06:29.320
being somewhat tenuous and plus
with open source being open

108
00:06:29.320 --> 00:06:33.370
source, there was generally the
willingness of suckers like myself

109
00:06:33.370 --> 00:06:36.640
to invest a lot of
time outside of work, regular

110
00:06:36.640 --> 00:06:40.270
work hours, billable hours in
order to build up and

111
00:06:40.270 --> 00:06:42.340
enhance this product. That sounds
like a lot of people

112
00:06:42.340 --> 00:06:44.020
put a lot of work
into it. I mean, there's

113
00:06:44.020 --> 00:06:46.300
a great deal of effort
and heart and soul poured

114
00:06:46.300 --> 00:06:49.180
into cruise control that night.
So I don't know if

115
00:06:49.180 --> 00:06:52.300
you know about Olo, it's
a, it's an open source

116
00:06:52.330 --> 00:06:56.650
repository, a repository of metadata
about different Oakland source projects.

117
00:06:57.250 --> 00:07:00.540
It's pronounced. Although I don't
know how it's pronounced. I

118
00:07:00.640 --> 00:07:04.630
was assumed it was pronounced,
although M O L O

119
00:07:04.630 --> 00:07:09.610
H I think. Yeah. Oh,
L O O O L

120
00:07:09.610 --> 00:07:13.060
O H There's only one
only one L O L

121
00:07:13.090 --> 00:07:15.790
O H God, I think
anyway, Certainly put that up

122
00:07:15.790 --> 00:07:17.260
on the, on the show
side, but yeah, it's a,

123
00:07:17.500 --> 00:07:19.840
it's a spider that looks
at an opensource project looks

124
00:07:19.840 --> 00:07:23.440
at check-ins looks at your
repository and says, if these

125
00:07:23.440 --> 00:07:25.540
many people worked on it
in this many hours and

126
00:07:25.540 --> 00:07:27.640
this many lines of code,
this project is worth X

127
00:07:27.640 --> 00:07:30.160
number of dollars. It provides
some pretty interesting and creative

128
00:07:30.160 --> 00:07:33.640
statistics about a project activity.
So I believe, and this

129
00:07:33.640 --> 00:07:36.370
is off the top of
my head that the report

130
00:07:36.370 --> 00:07:40.510
from Olo says the cruise
control.net equates to 62 man

131
00:07:40.510 --> 00:07:44.470
years worth of effort. So
it's pretty substantial. I don't

132
00:07:44.470 --> 00:07:47.320
know exactly how they derive
that information. I believe that

133
00:07:47.320 --> 00:07:50.320
it's related to the number
of committers over the course

134
00:07:50.320 --> 00:07:53.050
of the lifetime of the
project, but it's certainly not

135
00:07:53.050 --> 00:07:55.630
insignificant. I mean, at this
point in time, cruise control.net

136
00:07:55.630 --> 00:08:00.010
is the de facto automated
integration server for the.net platform.

137
00:08:00.010 --> 00:08:05.080
It's had over 80,000 downloads.
So it it's used in

138
00:08:05.080 --> 00:08:10.600
thousands of teams globally. So
it is, it's definitely achieved

139
00:08:10.600 --> 00:08:13.720
its share of success. So
I still have to push

140
00:08:13.750 --> 00:08:17.500
the original question. It's better
than batch files, why Or

141
00:08:17.520 --> 00:08:21.820
the batch files, why it's
better than batch files because

142
00:08:22.120 --> 00:08:26.470
in, so people often talk
about an automated integration server

143
00:08:26.470 --> 00:08:28.990
as being well, it's nothing
other than a while loop.

144
00:08:29.200 --> 00:08:32.860
Right. So true. Why do
you feel Exactly? Why do

145
00:08:32.860 --> 00:08:36.880
you need a tool around
it and admittedly, while that's

146
00:08:36.880 --> 00:08:38.950
true, there's a lot more
that it does for you.

147
00:08:38.980 --> 00:08:41.800
One is it does provide
integration with a large number

148
00:08:41.800 --> 00:08:46.870
of source control systems and
different build tools. It provides

149
00:08:46.870 --> 00:08:50.380
a mechanism, not only for
it to just continuously pull

150
00:08:50.380 --> 00:08:52.930
your repository. You can also
do things like schedule builds.

151
00:08:53.200 --> 00:08:57.390
You can have many builds
running simultaneously. You can set

152
00:08:57.390 --> 00:09:00.180
up queues so that you
can ensure that there is

153
00:09:00.360 --> 00:09:02.700
some sort of exclusion between
builds. So if you've got

154
00:09:02.700 --> 00:09:05.280
bills that both depend on
a common resource, or if

155
00:09:05.280 --> 00:09:07.170
you want to throttle back
the number of builds that

156
00:09:07.170 --> 00:09:10.140
are happening concurrently on a
machine, you've got that ability,

157
00:09:10.320 --> 00:09:12.480
plus there's all the reporting
around it. And that's a

158
00:09:12.480 --> 00:09:14.760
big part of it is
that if it's just a

159
00:09:14.760 --> 00:09:18.360
batch file that's running in
isolation, then it's not really

160
00:09:18.360 --> 00:09:23.250
providing feedback. And feedback is
the core is the essence

161
00:09:23.310 --> 00:09:26.960
of an automated integration. Sorry.
Ah, okay. So the feedback

162
00:09:26.960 --> 00:09:28.520
and the reporting and what
comes out of it and

163
00:09:28.520 --> 00:09:30.530
what we do with that
information is more important than

164
00:09:30.530 --> 00:09:33.390
the simple fact that the
build ran and we scheduled

165
00:09:33.390 --> 00:09:36.050
it at a certain time.
Definitely. And actually I would

166
00:09:36.050 --> 00:09:39.320
say that a product like
cruise control.net or cruise control

167
00:09:39.320 --> 00:09:41.720
or any of the other
automated integration servers out there

168
00:09:42.020 --> 00:09:47.330
are the value is secondary
relative to the associated feedback.

169
00:09:47.570 --> 00:09:49.610
Often I go in and
I talked to a client

170
00:09:49.610 --> 00:09:52.220
and they say, Oh yeah,
we're doing continuous integration. We've

171
00:09:52.220 --> 00:09:55.640
got cruise control.net running. Meanwhile,
they haven't had a passing

172
00:09:55.640 --> 00:09:59.480
build and weeks and their
prac they're, they're certainly not

173
00:09:59.480 --> 00:10:02.930
practicing anything along the lines
of continuous integration. They're checking

174
00:10:02.930 --> 00:10:07.280
in very infrequently. And so
for me, it's more about

175
00:10:07.280 --> 00:10:10.220
the practice and the tool
enables the practice, but it's

176
00:10:10.220 --> 00:10:12.620
important to separate the two
because you can certainly practice

177
00:10:12.620 --> 00:10:16.340
continuous integration without having the
support of an automated integration

178
00:10:16.340 --> 00:10:19.370
server. It just makes it
easier. That's why, I don't

179
00:10:19.370 --> 00:10:20.750
know if you notice when
I'm talking about it, I

180
00:10:20.750 --> 00:10:23.870
refer to cruise control.net as
being an automated integration server

181
00:10:24.140 --> 00:10:26.960
rather than a continuous integration
server, because I think of

182
00:10:26.960 --> 00:10:30.950
continuous integration as being what
people do. It's the practice.

183
00:10:31.370 --> 00:10:33.710
And that is something that
is supported by having an

184
00:10:33.710 --> 00:10:36.440
automated grid integration server in
place. That's a, that's a

185
00:10:36.470 --> 00:10:39.530
subtle but very powerful distinction.
It's one thing to automate,

186
00:10:40.040 --> 00:10:43.280
but to, to apply the,
the, the practices and, you

187
00:10:43.280 --> 00:10:46.610
know, the, the, the appropriate
amount of respect to the

188
00:10:46.610 --> 00:10:48.830
data that is coming out
and act on it and

189
00:10:48.830 --> 00:10:51.830
improve your process. Certainly a
broken build does no one

190
00:10:51.830 --> 00:10:55.180
any good. At my last
company, we built a, a

191
00:10:55.190 --> 00:10:57.470
build server of build servers.
It was basically a super

192
00:10:57.470 --> 00:11:00.020
dashboard by aggregating at the
end. I think we ended

193
00:11:00.020 --> 00:11:05.000
up with 35 or 40
different cruise control build servers

194
00:11:05.120 --> 00:11:07.850
because we had all these
different projects. And there wasn't

195
00:11:07.850 --> 00:11:10.010
a sense of the health
of the organization while each

196
00:11:10.010 --> 00:11:12.350
project knew what their health
was the organization needed to

197
00:11:12.350 --> 00:11:15.740
do, because there was that
remoting interface and Incruse control

198
00:11:15.740 --> 00:11:17.660
that I think was then
changed to be a more

199
00:11:17.660 --> 00:11:21.950
version, independent interface. We made
a super dashboard where someone

200
00:11:21.950 --> 00:11:24.320
could look and say, you
know, gosh, this whole section

201
00:11:24.320 --> 00:11:26.330
of the building is looking
rather healthy, but you know,

202
00:11:26.330 --> 00:11:28.730
there hasn't been a good
build and day's over on

203
00:11:29.390 --> 00:11:32.720
these guys and the project
manager could then have a

204
00:11:32.720 --> 00:11:35.060
dashboard. He didn't need to
see the check-ins. You didn't

205
00:11:35.060 --> 00:11:37.190
need to see the details,
but he could get a

206
00:11:37.190 --> 00:11:41.690
sense of the way he
segmented his organization and, and

207
00:11:42.410 --> 00:11:45.740
the builds within the sub
orgs and then what their

208
00:11:45.740 --> 00:11:48.650
health was that that's right.
Really cool to hear. I

209
00:11:48.650 --> 00:11:51.140
mean, I re one of
the things that's really exciting

210
00:11:51.140 --> 00:11:53.200
about this being an open
source project is going in,

211
00:11:53.260 --> 00:11:56.200
going out and talking to
other people that are using

212
00:11:56.200 --> 00:11:58.930
the tool. And I often
find and talk to people

213
00:11:58.930 --> 00:12:02.710
like yourself that have been
using cruise control.net for far

214
00:12:02.710 --> 00:12:06.460
more projects than I had
ever dreamed that people would

215
00:12:06.460 --> 00:12:09.610
use the tool for. And
the sort of extensibility you're

216
00:12:09.610 --> 00:12:14.200
talking about is exactly why
we built the web dashboard

217
00:12:14.200 --> 00:12:16.990
with a restful API, because
we recognize that the sort

218
00:12:16.990 --> 00:12:20.440
of interface that we would
provide to cruise control.net was

219
00:12:20.440 --> 00:12:22.570
not sufficient in and of
itself. And the people would

220
00:12:22.570 --> 00:12:25.770
naturally want some sort of
mechanism to, I found it

221
00:12:25.860 --> 00:12:27.540
well, and I've seen more
and more projects that are

222
00:12:27.540 --> 00:12:31.650
not just producing bin files
and DLLs rather than dropping

223
00:12:31.650 --> 00:12:34.380
them in a bin folder,
but producing virtual machines as

224
00:12:34.380 --> 00:12:37.470
the result of a build
such that the sales person

225
00:12:37.470 --> 00:12:40.290
could stop by and pick
up that day's daily build,

226
00:12:40.380 --> 00:12:43.920
which the build artifact is
a virtual machine and we've

227
00:12:43.920 --> 00:12:47.100
taken the last job, cruise
control, even farther, such that

228
00:12:47.100 --> 00:12:49.980
we also fire up those
virtual machines and run integration

229
00:12:49.980 --> 00:12:53.130
tests on them. So the
build is one thing, the

230
00:12:53.130 --> 00:12:55.320
test passes and other, we
also have things like code

231
00:12:55.320 --> 00:12:59.820
coverage, Simeon for similarity analysis,
and then going out all

232
00:12:59.820 --> 00:13:03.300
the way to firing up
a VM, starting a test

233
00:13:04.140 --> 00:13:08.040
using like water or Watan
to automate the browser inside

234
00:13:08.040 --> 00:13:11.250
of the VM, and then
saying, this is a good

235
00:13:11.250 --> 00:13:14.040
bill, shutting it down, putting
it into a, a library

236
00:13:14.040 --> 00:13:18.030
of virtual machines, all orchestrated
by, by cruise control. And

237
00:13:18.030 --> 00:13:19.500
then also the thing that
I thought was the most

238
00:13:19.500 --> 00:13:22.560
powerful was the idea of
what is failure became a

239
00:13:22.560 --> 00:13:25.830
really, really important thing at
my last company. The idea

240
00:13:25.830 --> 00:13:29.250
that we could say this
much coverage is, is minimal,

241
00:13:29.400 --> 00:13:32.460
or this many tests, when
you check something in, there

242
00:13:32.460 --> 00:13:34.050
must be a test. And
we started coming up with

243
00:13:34.050 --> 00:13:37.590
all new, different ways to
fail the build that we're

244
00:13:37.590 --> 00:13:40.050
more than just saying a
compiler error. Yeah. There are

245
00:13:40.050 --> 00:13:43.410
many different factors that go
into assessing the health of

246
00:13:43.410 --> 00:13:45.900
a build. I think that
that's a really interesting way

247
00:13:45.900 --> 00:13:48.540
you're talking about in terms
of virtualization. I think that

248
00:13:48.540 --> 00:13:52.770
that's definitely the next wave
that's coming for automated integration

249
00:13:52.770 --> 00:13:56.250
support. I know that some
tool support is happening in

250
00:13:56.250 --> 00:14:00.990
that, in that area, not
specifically with cruisecontrol.net, I'm assuming

251
00:14:00.990 --> 00:14:03.180
that you at your company
would have had to do

252
00:14:03.180 --> 00:14:05.310
quite a bit of custom
work in order to get

253
00:14:05.310 --> 00:14:07.530
that up and going. But
I think in the future,

254
00:14:07.530 --> 00:14:10.590
that's going to be much,
much easier for companies to

255
00:14:10.590 --> 00:14:13.500
spin up a bunch of
virtual machines distribute their build

256
00:14:13.500 --> 00:14:18.060
across a grid that will
run and test that build

257
00:14:18.060 --> 00:14:20.440
that's been created in a
variety of different environment. Yeah,

258
00:14:20.440 --> 00:14:24.000
it was fairly a Rube
Goldberg in, in its design,

259
00:14:24.360 --> 00:14:28.500
but we had a, a
common interface for virtual server,

260
00:14:28.680 --> 00:14:32.010
2005. And I assume that
some of the virtualization stuff

261
00:14:32.010 --> 00:14:35.820
in 2008 will have WMI
or similar interfaces, but it's

262
00:14:35.820 --> 00:14:38.040
still, it's still pretty obscure.
And it was considered pretty

263
00:14:38.040 --> 00:14:41.160
advanced. And it did, we
had our daily, we had

264
00:14:41.160 --> 00:14:43.680
our, our continuous builds so
that someone would check in,

265
00:14:44.490 --> 00:14:46.170
which is an interesting thing
to point out to actually

266
00:14:46.170 --> 00:14:49.500
talk to me about, it's
not just that we're scheduling

267
00:14:49.500 --> 00:14:52.970
builds, like let's say I
something into subversion or into

268
00:14:52.970 --> 00:14:56.960
my source control, cruise controls,
polling. Right. And then what

269
00:14:56.960 --> 00:14:59.030
happens if I check in
immediately afterwards, are we seeing

270
00:14:59.030 --> 00:15:03.970
builds on every single check-in
Not by default? So by

271
00:15:03.970 --> 00:15:07.270
default cruise control.net will because
of the nature of it

272
00:15:07.270 --> 00:15:11.500
pulling the version, your version
control repository on a periodic

273
00:15:11.500 --> 00:15:14.620
basis, it may aggregate a
couple of check-ins together. If

274
00:15:14.620 --> 00:15:18.760
those check-ins have come in
fairly close in sequence, a

275
00:15:18.760 --> 00:15:20.290
big part of it depends
on the length of your

276
00:15:20.290 --> 00:15:22.570
build process. So if you've
got a very long running

277
00:15:22.570 --> 00:15:25.030
build process, then you're more
likely to get a bunch

278
00:15:25.030 --> 00:15:29.350
of check-ins within that single
build. There are, there are

279
00:15:29.350 --> 00:15:33.790
other tools. So sin, for
example, is relatively obscure, automated

280
00:15:33.790 --> 00:15:37.210
integration server. It's built entirely
on top of subversion, it's

281
00:15:37.210 --> 00:15:42.490
called sin sin sin. It
was designed to support a

282
00:15:42.490 --> 00:15:44.890
model where the bill would
never, ever break. So each

283
00:15:44.890 --> 00:15:48.370
developer would always check in
on a new branch and

284
00:15:48.640 --> 00:15:52.570
the automated integration server would
take responsibility for merging those

285
00:15:52.570 --> 00:15:55.480
branches into trunk. And that
would ensure that it was

286
00:15:55.480 --> 00:15:58.690
only pulling in one change
set at a time. I

287
00:15:58.690 --> 00:16:02.020
mean, what cruise control.net does
do is it tracks what

288
00:16:02.020 --> 00:16:04.510
the last, at least in
the example of subversion tracks,

289
00:16:04.510 --> 00:16:07.900
the last change set, and
then determines if what new

290
00:16:07.900 --> 00:16:10.150
change sets have been added
in the interim since the

291
00:16:10.150 --> 00:16:13.060
last build happened. I mean,
ideally you should be keeping

292
00:16:13.060 --> 00:16:16.810
your builds to a sufficiently
small interval. They should run

293
00:16:16.810 --> 00:16:21.280
sufficiently quickly that the likelihood
of there being multiple commits

294
00:16:21.280 --> 00:16:24.940
included in a single build
is reduced substantially. But from

295
00:16:24.940 --> 00:16:29.710
my experience, at least having
multiple commits in a single

296
00:16:30.010 --> 00:16:32.470
checkin is generally not such
a big deal. I mean,

297
00:16:32.470 --> 00:16:35.740
you're really only talking about
maybe two, maybe three commits

298
00:16:35.740 --> 00:16:39.040
depending on the size of
the team. And it's often

299
00:16:39.040 --> 00:16:43.870
pretty easy to determine which
commit was responsible for causing

300
00:16:43.870 --> 00:16:47.170
a build breakage. So you
can determine who has to

301
00:16:47.170 --> 00:16:51.220
deal with the aftermath. Yeah.
That idea that don't leave

302
00:16:51.400 --> 00:16:53.860
the building until you know,
that the build has succeeded

303
00:16:53.860 --> 00:16:55.600
became a really big part
of the culture. And there

304
00:16:55.600 --> 00:16:58.480
were a couple of times
where folks myself included would

305
00:16:58.480 --> 00:17:00.670
check something in on a
Friday afternoon and then take

306
00:17:00.670 --> 00:17:03.670
off and not realize that
the build was going to

307
00:17:03.670 --> 00:17:07.510
be broken and we'd end
up basically screwing everybody for

308
00:17:07.510 --> 00:17:09.550
the weekend who wanted to
do any kind of work.

309
00:17:09.550 --> 00:17:12.100
And that became a big
part of the culture. We

310
00:17:12.100 --> 00:17:15.820
actually bought an ambient orb,
which was this kind of

311
00:17:16.240 --> 00:17:20.350
a crystal ball with lights
that would light up based

312
00:17:20.350 --> 00:17:22.210
on whether or not the
health of the build was

313
00:17:22.210 --> 00:17:25.840
a good thing and put
up signs and lights in

314
00:17:25.840 --> 00:17:28.210
prominent places so that people
would know that the build

315
00:17:28.210 --> 00:17:30.970
was, was healthy. I think
the ambient orb is a

316
00:17:30.970 --> 00:17:34.450
good example because what it
does is it takes audit.

317
00:17:34.510 --> 00:17:36.760
It takes information out of
the system and makes it

318
00:17:36.760 --> 00:17:40.870
accessible as part of the
environment that people actually work

319
00:17:40.870 --> 00:17:43.420
in and interact in so
that you don't actually need

320
00:17:43.420 --> 00:17:46.060
to be logged into a
system in order to see

321
00:17:46.060 --> 00:17:48.160
what the status is of
the build. But I think

322
00:17:48.160 --> 00:17:51.300
that it only takes a
certain distance. There's so much

323
00:17:51.300 --> 00:17:55.080
more information that can be
leveraged rather than just whether

324
00:17:55.080 --> 00:18:00.150
your orb is pulsating and
green, yellow, or red. So

325
00:18:00.420 --> 00:18:04.680
for the agile 2008 conference,
that's going to be here

326
00:18:04.680 --> 00:18:08.310
in Toronto in the start
of August, I'm doing a

327
00:18:08.310 --> 00:18:13.410
session called continuous monitoring beyond
continuous integration. So what continuous

328
00:18:13.410 --> 00:18:18.720
monitoring is about is recognizing
that the build is just

329
00:18:18.720 --> 00:18:21.900
one potential source of information
about the health of a

330
00:18:21.900 --> 00:18:24.690
project. And it's something that
we've invested a lot of

331
00:18:24.690 --> 00:18:28.350
time and effort into it,
certainly for projects that have

332
00:18:28.350 --> 00:18:31.140
an automated integration server up
and going, it is the

333
00:18:31.140 --> 00:18:34.650
heart and lifeblood of that
project, but it only provides

334
00:18:34.650 --> 00:18:38.700
a subset of the possible
amount of information about the

335
00:18:38.700 --> 00:18:40.830
health of a project. I
mean, your build might be

336
00:18:41.670 --> 00:18:45.810
100% green and passing all
the time, but that may

337
00:18:45.810 --> 00:18:48.000
be covering up a host
of other problems that you

338
00:18:48.000 --> 00:18:51.450
have. So there's an there's
many different sources of information

339
00:18:51.450 --> 00:18:54.210
about the health of a
project. And part of what

340
00:18:54.210 --> 00:18:58.740
continuous monitoring is about is
about pulling that information together

341
00:18:58.980 --> 00:19:02.400
and making it accessible in
the same way that that

342
00:19:02.400 --> 00:19:05.040
feedback was that was coming
in from your ambient or

343
00:19:05.580 --> 00:19:09.060
so, as I said before,
the ambient orb is good,

344
00:19:09.060 --> 00:19:12.660
but limited. Really what you
want is the flexibility of

345
00:19:12.660 --> 00:19:15.180
something like a wall mounted
display in order to be

346
00:19:15.180 --> 00:19:18.720
able to provide you with
information about all of these

347
00:19:18.720 --> 00:19:22.920
other facets on your project.
So this for me came

348
00:19:22.920 --> 00:19:26.310
as a realization from the
last couple of projects where

349
00:19:26.310 --> 00:19:30.600
I've been on, where we
have used a relatively low

350
00:19:30.600 --> 00:19:33.870
spec computer that we've set
up in the corner with

351
00:19:33.870 --> 00:19:35.880
a flat screen monitor that
we've been able to Mount

352
00:19:35.880 --> 00:19:40.980
prominently. And we have aggregated
information from the web dashboard

353
00:19:41.250 --> 00:19:44.340
for a number of different
projects onto a single screen.

354
00:19:44.820 --> 00:19:49.560
And that provided the team
with an alternative to the

355
00:19:49.560 --> 00:19:51.900
ambient, or because you can
see more information, not just

356
00:19:51.900 --> 00:19:54.270
whether the bill was passing
your failing, but what it

357
00:19:54.270 --> 00:19:58.380
was currently doing, what the
last successful label was or

358
00:19:58.380 --> 00:20:01.680
what label it was currently
building, et cetera. So there's

359
00:20:01.680 --> 00:20:05.040
just a ton more flexibility.
And what we did from

360
00:20:05.040 --> 00:20:08.370
then was we started to
plug into other sources of

361
00:20:08.370 --> 00:20:10.890
information on our project. So
how many open bugs do

362
00:20:10.890 --> 00:20:13.980
we have in JIRA? What
JIRA being your bug tracking

363
00:20:13.980 --> 00:20:16.920
system? Exactly the issue tracking
system that we, that we

364
00:20:16.920 --> 00:20:19.370
were using on that project
And all of this has

365
00:20:19.370 --> 00:20:22.820
meant to provide a dashboard
that indicates the health of

366
00:20:22.820 --> 00:20:25.340
the park. How are we
doing? Should we panic? It's

367
00:20:25.340 --> 00:20:30.020
to give a comprehensive understanding
of holistic understanding of the

368
00:20:30.020 --> 00:20:32.830
status of the project? Okay.
So I mean, health is

369
00:20:32.840 --> 00:20:34.940
yeah. One description of health,
I guess I'm using the

370
00:20:34.940 --> 00:20:37.130
term health as kind of
an aggregate for all of

371
00:20:37.130 --> 00:20:39.530
the different bits of information
that let us know whether

372
00:20:40.490 --> 00:20:45.110
action should be taken. Exactly.
And if you're not taking

373
00:20:45.110 --> 00:20:48.040
a look at those things,
if those things aren't presented

374
00:20:48.040 --> 00:20:50.560
in a way that's easily
accessible to people, if you,

375
00:20:50.740 --> 00:20:53.470
in other words, have to
go and log into JIRA

376
00:20:53.470 --> 00:20:56.050
and see what the number
of open issues are, then

377
00:20:56.230 --> 00:20:58.210
people are not going to
be as willing to act

378
00:20:58.210 --> 00:21:01.420
on that as if it
was something that was readily

379
00:21:01.420 --> 00:21:03.750
visible within their workspace. So
you're saying that if the

380
00:21:03.750 --> 00:21:07.350
information that they need, isn't
effortless, if there's any barrier

381
00:21:07.350 --> 00:21:09.210
to entry at all, to
get that information that they

382
00:21:09.210 --> 00:21:11.700
might need to make a
particular decision, then they might

383
00:21:11.940 --> 00:21:14.340
never do it Exactly. And
the way to make it

384
00:21:14.340 --> 00:21:17.250
effortless is to make it
ambient, to make it so

385
00:21:17.250 --> 00:21:20.700
that people can absorb that
information passively without actually having

386
00:21:20.700 --> 00:21:23.790
to do something it's part
of their work environment. Their

387
00:21:23.790 --> 00:21:27.990
work environment is projecting information
at them so that when

388
00:21:27.990 --> 00:21:30.990
the status changes of something
that needs to grab their

389
00:21:30.990 --> 00:21:34.080
attention, then it is readily
visible for members of the

390
00:21:34.080 --> 00:21:37.740
team. So going beyond the,
the juror example, number of

391
00:21:37.740 --> 00:21:41.040
open issues, there were other
things like we were using

392
00:21:41.130 --> 00:21:43.950
an operations database, which is
a topic that I talked

393
00:21:43.950 --> 00:21:49.200
about today at the conference
and the operations database held

394
00:21:49.200 --> 00:21:54.120
information about the, the performance
of the system. So what

395
00:21:54.120 --> 00:21:56.400
were the slowest running operations?
We were able to take

396
00:21:56.400 --> 00:21:59.850
that information and present that,
or responding within a dash.

397
00:22:00.120 --> 00:22:02.670
This is sort of an
integration toast, so it's not

398
00:22:02.760 --> 00:22:06.060
pretty gathering. So, okay. This,
the reason I ask is

399
00:22:06.060 --> 00:22:09.120
there's also a larger topic.
It's a fantastic topic because

400
00:22:09.120 --> 00:22:10.650
one of the things that
was happening with us is

401
00:22:10.650 --> 00:22:12.480
we kept trying to provide
information to people and we

402
00:22:12.480 --> 00:22:15.060
would push out these reports
and the email that we

403
00:22:15.060 --> 00:22:17.040
sent out after each bill
got longer and longer and

404
00:22:17.040 --> 00:22:19.500
longer to the point where
people just ignored them, people

405
00:22:19.500 --> 00:22:22.230
would make rules to take
the build servers, email report,

406
00:22:22.230 --> 00:22:24.500
and just put it directly
in the trash. Cause we,

407
00:22:24.500 --> 00:22:27.030
we made a rule company,
Y that you, you must

408
00:22:27.060 --> 00:22:29.730
receive the bill mail, but
that of course doesn't mean

409
00:22:29.730 --> 00:22:32.940
that they have to read
it. Right? So if something

410
00:22:33.060 --> 00:22:35.250
shows up in your inbox,
it's still very easy to

411
00:22:35.250 --> 00:22:39.600
ignore it. Number one, number
two, things transmitted by email

412
00:22:39.600 --> 00:22:42.150
are naturally on a slower
feedback cycle. So there's a

413
00:22:42.150 --> 00:22:47.280
larger disconnect between the point
in time when something changes.

414
00:22:47.550 --> 00:22:50.610
So whatever that thing was
that you're assessing, let's say

415
00:22:50.610 --> 00:22:55.230
code coverage, flip from being
acceptable to not acceptable. And

416
00:22:55.260 --> 00:22:58.710
the third thing is that
you are reading an individually,

417
00:22:58.740 --> 00:23:02.250
there is no collective responsibility
associated with that email. It

418
00:23:02.250 --> 00:23:04.620
was addressed to you. It's
not clear who should take

419
00:23:04.620 --> 00:23:07.920
responsibility for something. Whereas if
it's up and it's written

420
00:23:07.920 --> 00:23:09.600
on the wall that projected
on the wall on a

421
00:23:09.600 --> 00:23:12.510
screen, it's very clear that
this is something that the

422
00:23:12.510 --> 00:23:14.910
team as a whole has
to deal with because anybody

423
00:23:14.910 --> 00:23:17.460
else that comes in and
comes into that environment, they

424
00:23:17.460 --> 00:23:20.970
can see that this information
is prominently displayed and they

425
00:23:20.970 --> 00:23:23.220
can see that there's a
problem here. So the team

426
00:23:23.490 --> 00:23:26.820
has got an incentive to
ensure that they're correcting and

427
00:23:26.820 --> 00:23:29.190
dealing with it as soon
as possible. And, and starting

428
00:23:29.190 --> 00:23:30.660
to kind of, it starts
to make sense to me

429
00:23:30.660 --> 00:23:33.090
full circle, because coming at
it from your point of

430
00:23:33.090 --> 00:23:36.330
view, as an agile coach,
all of this information is

431
00:23:36.330 --> 00:23:38.790
nothing without an appropriate process
wrapped around it. And one

432
00:23:38.790 --> 00:23:41.100
of the fundamental things about
agile that's so important, everyone

433
00:23:41.100 --> 00:23:44.550
is the notion of collective
ownership and collective ownership is

434
00:23:45.040 --> 00:23:48.380
such an anathema to people
who have previously had ownership

435
00:23:48.410 --> 00:23:51.380
over a sub system that
they designed during the big

436
00:23:51.410 --> 00:23:56.420
design upfront and their waterfall
process. But having something like

437
00:23:56.420 --> 00:23:58.190
one of the things that's
important about collective ownership, I

438
00:23:58.190 --> 00:24:00.650
think is co-location, I've always
felt that it's important to

439
00:24:00.650 --> 00:24:03.200
take everyone and put them
in a bullpen. And that

440
00:24:03.200 --> 00:24:05.200
would be where you would
put this giant screen That's

441
00:24:05.200 --> 00:24:08.110
right. But not necessarily because
of the fact that the

442
00:24:08.110 --> 00:24:13.420
information is accessible online. So
you can easily take one

443
00:24:13.420 --> 00:24:16.490
of these monitors or dashboards
and be able to display

444
00:24:16.520 --> 00:24:19.420
remotely. So within ThoughtWorks, one
of the things that I

445
00:24:19.420 --> 00:24:21.940
did a lot of work
on was different distributed projects.

446
00:24:21.940 --> 00:24:23.590
I spent a year and
a half working in India,

447
00:24:23.770 --> 00:24:27.400
six months working in China
on different projects that had

448
00:24:27.640 --> 00:24:31.600
a, an offshore and onshore
component to them. And so

449
00:24:31.600 --> 00:24:35.440
you can take one of
these dashboards and install it

450
00:24:35.440 --> 00:24:38.050
at a client site or
install it on sites for

451
00:24:38.050 --> 00:24:40.240
both teams. And all of
a sudden, they're both looking

452
00:24:40.240 --> 00:24:43.270
at the same set of
information, The screen for them,

453
00:24:43.370 --> 00:24:44.920
get a big screen and
put it up there for

454
00:24:44.920 --> 00:24:47.830
them. No. So this is,
this is a new topic,

455
00:24:47.830 --> 00:24:49.750
and this is something that
I think we're going to

456
00:24:49.750 --> 00:24:53.170
see a lot of development
around in the, in the

457
00:24:53.170 --> 00:24:57.550
next year or so. So
it's something that I think

458
00:24:57.550 --> 00:25:01.060
organizations are only starting to
realize the value of. And

459
00:25:01.060 --> 00:25:04.930
there's a number of things
that make it a little

460
00:25:04.930 --> 00:25:07.960
bit difficult to attain right
now. One is that it

461
00:25:07.960 --> 00:25:11.530
is, it requires the intersection
between both software and hardware.

462
00:25:11.860 --> 00:25:16.450
So it's not simply about
having a software tool that

463
00:25:16.450 --> 00:25:21.070
aggregates this information together, but
it's also having a suitable

464
00:25:21.070 --> 00:25:25.420
display that you can install
in an environment and have

465
00:25:25.420 --> 00:25:28.270
that working in a way
that is easily accessible to

466
00:25:28.270 --> 00:25:32.920
a team. So for example,
if, if you're, if you're

467
00:25:32.920 --> 00:25:37.060
just looking at a flat
screen monitor and a machine

468
00:25:37.060 --> 00:25:41.080
it's often difficult to find
space within a corporate environment

469
00:25:41.080 --> 00:25:43.450
in order to play something
like that. Well, certainly it's

470
00:25:43.450 --> 00:25:46.150
difficult to keep that machine
log in all the time.

471
00:25:46.150 --> 00:25:47.980
And, you know, who's the
user. One of the big

472
00:25:47.980 --> 00:25:49.750
issues we have with our
cruise control servers, one of

473
00:25:49.750 --> 00:25:53.230
the biggest issues was who's
this running as this is

474
00:25:53.230 --> 00:25:56.080
an identity and this identity
has to have access to

475
00:25:56.080 --> 00:25:58.270
network shares, and it's going
to run automatic. So that

476
00:25:58.540 --> 00:26:00.700
there's going to be some
machine logged in all the

477
00:26:00.700 --> 00:26:02.860
time, whether it's logging into
the desktop or whether the

478
00:26:02.860 --> 00:26:05.890
service has the ability to
interact with the desktop. That

479
00:26:05.890 --> 00:26:08.890
was pretty fundamentally a big
deal. Computers are typically in

480
00:26:08.890 --> 00:26:12.070
a corporate environment assigned to
a human being. So now

481
00:26:12.070 --> 00:26:13.300
we're going to have one
that's going to sit there

482
00:26:13.300 --> 00:26:15.430
in the corner and show
it screen and no screen

483
00:26:15.430 --> 00:26:18.310
saver all the time. Exactly.
And that becomes, it becomes

484
00:26:18.310 --> 00:26:20.590
hard to justify the value
of something like that. Like

485
00:26:20.590 --> 00:26:24.910
within most corporate it shops,
inventory is pretty carefully managed.

486
00:26:25.150 --> 00:26:27.070
And so if they see
a machine that's sitting idle,

487
00:26:27.070 --> 00:26:30.460
even for a moment, then
it will be reallocated elsewhere.

488
00:26:30.640 --> 00:26:32.560
So really what you need
is some sort of hardware

489
00:26:32.560 --> 00:26:35.470
that has fit the purpose.
And what I've been looking

490
00:26:35.470 --> 00:26:39.760
at recently is ways in
which you can have this

491
00:26:39.790 --> 00:26:44.760
wall mountable flat screen monitor
displays with an integrated hardware

492
00:26:44.760 --> 00:26:51.360
components. So some sort of
a mountable small computer and

493
00:26:51.690 --> 00:26:54.480
provide that with network access,
whether it be wireless or

494
00:26:54.480 --> 00:27:00.090
wired, ideally both. And that
is your ambient display device.

495
00:27:00.510 --> 00:27:03.420
So then it's a device
that's fit for purpose. There's

496
00:27:03.420 --> 00:27:06.810
no question about it being
allocated elsewhere. It doesn't need

497
00:27:06.810 --> 00:27:09.900
to be high spec because
it's really all it's doing

498
00:27:09.900 --> 00:27:13.110
is pulling and pulling in
information from different sources within

499
00:27:13.110 --> 00:27:16.610
the enterprise. Just run a
browser in kiosk mode. Exactly.

500
00:27:16.610 --> 00:27:18.530
And have the whole thing,
be Ajax calls. Let me

501
00:27:18.530 --> 00:27:20.270
take just a very brief
moment and we'll thank our

502
00:27:20.270 --> 00:27:23.060
sponsors. We'll come back. We'll
hear more about continuous monitoring.

503
00:27:24.920 --> 00:27:26.870
Hi, it's Scott Hanselman here.
Hope you're enjoying the show

504
00:27:26.870 --> 00:27:28.700
so far. I'm coming at
you from another place in

505
00:27:28.700 --> 00:27:30.890
time. Sorry to interrupt the
show, but I want to

506
00:27:30.890 --> 00:27:32.600
let you know that putting
together a podcast like this

507
00:27:32.600 --> 00:27:35.180
every week, isn't free. The
folks that pay the bandwidth

508
00:27:35.180 --> 00:27:37.670
bill is Tellerik they make
the show possible and they

509
00:27:37.670 --> 00:27:40.100
also make some pretty cool
products like Telerik site affinity.

510
00:27:40.580 --> 00:27:43.520
It's a development platform for
constructing websites, community portals, and

511
00:27:43.520 --> 00:27:46.220
Internet's built all on asp.net
to, Oh, so you're using

512
00:27:46.220 --> 00:27:49.940
the various well-known goodies like
master pages and membership services,

513
00:27:49.970 --> 00:27:52.760
data model provider, things that
you already know. It's pretty

514
00:27:52.760 --> 00:27:55.340
flexible. You've got a very
robust core that you can

515
00:27:55.340 --> 00:27:57.680
customize. You can plug in
anything that you want from

516
00:27:58.010 --> 00:28:00.800
complex applications, for a CRM,
or just a little widget

517
00:28:00.800 --> 00:28:03.080
that displays the weather. If
you're not big into the

518
00:28:03.080 --> 00:28:05.510
code thing, that's cool to
get a full set of

519
00:28:05.510 --> 00:28:08.630
features out of the box,
like workflow multi-lingual sites, content,

520
00:28:08.630 --> 00:28:11.540
versioning that can all be
added without code. There's also

521
00:28:11.540 --> 00:28:14.060
a whole bunch of pluggable
modules and components for news

522
00:28:14.060 --> 00:28:17.090
blogs, forums, polls lists. This
is all stuff that you

523
00:28:17.090 --> 00:28:19.640
can do without code. And
it's pretty good looking product

524
00:28:19.640 --> 00:28:22.400
as well. You've got a
nice web 2.0 administrative interface

525
00:28:22.400 --> 00:28:24.650
that lets you as well
as your boss. Who's not

526
00:28:24.650 --> 00:28:28.070
technical and be really productive.
So check out site finity.com

527
00:28:28.220 --> 00:28:30.650
and we'll get you right
back to the show. Thanks

528
00:28:30.650 --> 00:28:35.150
a lot. So you were
talking about putting together a

529
00:28:35.150 --> 00:28:38.000
hardware. Was it a platform
or would this be a

530
00:28:38.000 --> 00:28:40.730
PC that we have hanging
on the wall or this

531
00:28:40.730 --> 00:28:43.820
be something embedded? So I've
been looking at a couple

532
00:28:43.820 --> 00:28:45.710
of different options. One of
the things I've been looking

533
00:28:45.710 --> 00:28:49.520
at recently are these things
called gum sticks, which are

534
00:28:49.700 --> 00:28:52.220
mini computers, about the size
of a pack of gum

535
00:28:52.580 --> 00:28:58.400
that provide a relatively low
spec computing power they're quite

536
00:28:58.400 --> 00:29:02.420
inexpensive to acquire, and they
could be directly attached a

537
00:29:02.420 --> 00:29:08.330
fixed to one of these
flat screen mountable monitors. And

538
00:29:08.930 --> 00:29:12.080
they run. I mean, you
can, you can install what

539
00:29:12.080 --> 00:29:13.520
you want. When you say
a stick of gum. Are

540
00:29:13.520 --> 00:29:16.370
you talking about like, like
juicy fruit, like an actual

541
00:29:16.370 --> 00:29:20.120
stamp gum? Exactly. Like a
USB key size computer. Exactly.

542
00:29:20.300 --> 00:29:24.800
That's creepy. Yeah. So there's
a, the companies in Vancouver,

543
00:29:24.800 --> 00:29:28.490
the manufacturers them, but there's
other, there's other alternatives for

544
00:29:28.490 --> 00:29:31.880
display. Another thing that we've
been looking at, and this

545
00:29:31.880 --> 00:29:38.060
is in conjunction with one
of my colleagues is rather

546
00:29:38.060 --> 00:29:44.140
than using a wall mountable
monitor, you can use electronic

547
00:29:44.140 --> 00:29:49.150
photo albums. So picture frames.
Yeah, exactly. They're chumby that

548
00:29:49.150 --> 00:29:52.000
are designed to display your
photos and some of the

549
00:29:52.000 --> 00:29:54.280
newer ones provide wireless access.
So what you can do

550
00:29:54.280 --> 00:29:57.400
is you can push images
to them so you could

551
00:29:57.400 --> 00:29:59.410
push it to flicker for
all they care. Sure. You

552
00:29:59.410 --> 00:30:01.300
can push it, you can
push it to whatever you

553
00:30:01.300 --> 00:30:04.350
can push it to whatever
you want Flicker as continuous

554
00:30:04.350 --> 00:30:08.010
integration service bus. But I,
I'm not sure if by

555
00:30:08.010 --> 00:30:09.990
flick, like if you're thinking
about the same thing as

556
00:30:09.990 --> 00:30:11.460
I am, because I don't
know some of the sites

557
00:30:11.460 --> 00:30:14.640
that you're, What I'm saying
is that you can go

558
00:30:14.640 --> 00:30:18.420
to the local Costco or
the warehouse and buy for

559
00:30:18.420 --> 00:30:21.840
a hundred dollars, a 10
inch digital picture frame that's

560
00:30:21.840 --> 00:30:24.150
right. And you point it
to your flicker username and

561
00:30:24.150 --> 00:30:26.700
it will start showing a
slideshow instantly from the flicker

562
00:30:26.700 --> 00:30:29.310
service on Yahoo. Exactly. And
it'll pull it from, or

563
00:30:29.310 --> 00:30:32.940
from any arbitrary RSS feed
and you can say to

564
00:30:32.940 --> 00:30:34.860
randomize it, or you can
get a, I think it's

565
00:30:34.860 --> 00:30:37.680
called a chumby and a
chumby is a little four-inch

566
00:30:37.980 --> 00:30:40.410
portable. It looks like a
little fancy alarm clock. It's

567
00:30:40.410 --> 00:30:44.040
an open Linux system and
you buy them for $120

568
00:30:44.040 --> 00:30:45.840
and they sit on your
desk and you can point

569
00:30:45.840 --> 00:30:49.710
them to an arbitrary RSS
feed. And so that's exactly

570
00:30:49.710 --> 00:30:52.440
what I'm talking about. You
put, you're basically saying using

571
00:30:52.440 --> 00:30:56.220
existing ambient information devices from
any one of the many

572
00:30:56.220 --> 00:30:58.500
different sources, some of which
are bringing an open platform,

573
00:30:58.500 --> 00:31:01.470
some are not. And using
techniques like whether it be

574
00:31:01.680 --> 00:31:05.250
flicker as platform RSS or
some custom code that you

575
00:31:05.250 --> 00:31:07.740
would right. Exactly. And the
goal is to keep it

576
00:31:07.740 --> 00:31:11.040
very low cost. So the
digital photo frame is perfect

577
00:31:11.040 --> 00:31:15.570
because it is relatively inexpensive.
It's something that most it

578
00:31:15.570 --> 00:31:18.840
shops wouldn't bat an eye
at going out and just

579
00:31:18.840 --> 00:31:23.640
acquiring. And as long as
that 42 inch plasma, as

580
00:31:23.640 --> 00:31:25.710
long as the software is
there to back it up.

581
00:31:25.710 --> 00:31:28.440
So it's very simple to
plugging in and installed. You've

582
00:31:28.440 --> 00:31:31.800
got a display of what
your dashboard is up and

583
00:31:31.800 --> 00:31:34.800
going then that provides the
hardware end of things. So

584
00:31:34.800 --> 00:31:38.060
that that's, that, that's where
I see that there is

585
00:31:38.160 --> 00:31:41.160
really an opportunity here because
it is this intersection between

586
00:31:41.460 --> 00:31:44.640
both the hardware requirement of
being able to display this

587
00:31:44.640 --> 00:31:48.600
information ambiently and the software
side of things, which integrates

588
00:31:48.600 --> 00:31:52.410
and aggregates this information from
all the different information sources

589
00:31:52.440 --> 00:31:54.720
on a project. Right. I
think that the idea of

590
00:31:54.720 --> 00:31:57.120
having it not be a
PC that someone could log

591
00:31:57.120 --> 00:32:00.330
into and allowing someone to
lock it down simply by

592
00:32:00.330 --> 00:32:03.330
Mac address and saying, we
will give you access to

593
00:32:03.330 --> 00:32:06.420
this XML end point you
can do gets to this

594
00:32:06.420 --> 00:32:09.840
port 80 is about as
locked down as one could

595
00:32:09.840 --> 00:32:12.990
ever hope for an appliance
within a corporation to be.

596
00:32:13.080 --> 00:32:15.150
Yeah. The key of course
is getting the people to

597
00:32:15.150 --> 00:32:17.670
understand that it's, it's more
than just the device, it's

598
00:32:17.670 --> 00:32:20.340
about the information that the
device provides and how to

599
00:32:20.340 --> 00:32:22.560
act on that. Right. And
how do you act on

600
00:32:22.560 --> 00:32:25.500
that? And then you're trying
to using this to sell

601
00:32:25.500 --> 00:32:27.930
agile, basically, as you said,
I liked the way you

602
00:32:27.930 --> 00:32:32.190
phrased it before that continuous
integration servers were the, what

603
00:32:32.190 --> 00:32:34.290
did you say? The thin
edge of the wedge that's

604
00:32:34.290 --> 00:32:37.920
right. It's you, you're using
that to kind of crowbar

605
00:32:37.920 --> 00:32:41.450
your way into an because
who could possibly complain about

606
00:32:41.450 --> 00:32:43.930
a continuous, Right. Exactly. And
then once you've got a

607
00:32:43.930 --> 00:32:46.480
continuous build, well, what else
can I do with it?

608
00:32:46.510 --> 00:32:49.240
Oh, well idea. If I
can increase his values by

609
00:32:49.690 --> 00:32:54.100
adding some tests or adding
in some static code analysis

610
00:32:54.100 --> 00:32:57.970
or whatever, I'm continually impressed
when I visit companies and

611
00:32:57.970 --> 00:33:00.970
they have that the big
glass wall that lets you

612
00:33:00.970 --> 00:33:02.800
see the data center that
they run there rather than

613
00:33:02.800 --> 00:33:05.560
having the data center buried
somewhere. They like at the

614
00:33:05.560 --> 00:33:08.740
camp, I used to work@acompanycalledeighthundred.com
and they put the data

615
00:33:08.740 --> 00:33:10.690
center in the center of
the warehouse. And it was

616
00:33:10.690 --> 00:33:13.510
like in the middle of
this giant glass tube. And

617
00:33:13.510 --> 00:33:15.640
you could look in there
and see the flat screens

618
00:33:15.640 --> 00:33:17.950
that showed the health of
the system. They displayed their

619
00:33:17.950 --> 00:33:21.430
perf stats with pride. You
know, if they could make

620
00:33:21.430 --> 00:33:23.890
an electronic t-shirt that would
show the number of visitors

621
00:33:23.890 --> 00:33:26.110
that was the kind of
culture it had. And this

622
00:33:26.110 --> 00:33:29.050
was 10 Years ago. And
that's also the sort of

623
00:33:29.050 --> 00:33:33.070
information that I'm talking about
aggregating through continuous monitoring. And

624
00:33:33.070 --> 00:33:36.580
that that's was partially the
topic of the session that

625
00:33:36.580 --> 00:33:39.460
I did today about the
operations database is starting to

626
00:33:39.460 --> 00:33:44.020
collect that information that is
available within an operations environment

627
00:33:44.020 --> 00:33:47.020
and make it more accessible
within the organization as a

628
00:33:47.020 --> 00:33:50.410
whole, certainly within the development
side of the it organization,

629
00:33:50.410 --> 00:33:54.070
because the development side is
actually capable of acting on

630
00:33:54.070 --> 00:33:58.210
it. So from my experience
within many organizations, things like

631
00:33:58.240 --> 00:34:03.160
uptime is not something that
developers generally know about. Whereas

632
00:34:03.160 --> 00:34:06.660
if this information was being
displayed continuously as part of

633
00:34:06.670 --> 00:34:10.060
a work environment, and it
would be much more accessible

634
00:34:10.210 --> 00:34:12.850
to developers would be much
more real. And one of

635
00:34:12.850 --> 00:34:16.390
the challenges that I've run
into within many organizations is

636
00:34:16.390 --> 00:34:21.160
that there's this division between
development and operations and they

637
00:34:21.160 --> 00:34:24.460
tend to be in conflict
because they're measured in accordance

638
00:34:24.460 --> 00:34:27.610
with different goals. Development is
assessed on the basis of

639
00:34:27.610 --> 00:34:32.980
being able to release fully
featured software into production. On

640
00:34:32.980 --> 00:34:37.920
time. Operations is measured on
the basis of production systems,

641
00:34:37.920 --> 00:34:41.590
stability and uptime, but the
two are fundamentally in conflict

642
00:34:41.590 --> 00:34:44.830
because there's nothing that is
more destabilizing to a production

643
00:34:44.830 --> 00:34:49.180
environment than to accept a
new release. So from the

644
00:34:49.180 --> 00:34:52.570
operations perspective, if you're not
being measured on the basis

645
00:34:52.570 --> 00:34:56.440
of new functionality coming into
your environment, then what are

646
00:34:56.440 --> 00:34:58.540
you going to do? You're
going to erect barriers and

647
00:34:58.540 --> 00:35:01.570
say, okay, there has to
be this sort of a

648
00:35:01.570 --> 00:35:05.140
rigid change management process associated
with every new release that

649
00:35:05.140 --> 00:35:09.400
we accept into production. And
conversely from the development side

650
00:35:09.400 --> 00:35:15.580
of things, if the system
is failing within production, you

651
00:35:15.580 --> 00:35:17.650
may not know about it.
You may not need to

652
00:35:17.650 --> 00:35:20.710
know about it. There's often
forces within the organization that

653
00:35:20.710 --> 00:35:22.870
would keep you from knowing
about that because it would

654
00:35:22.870 --> 00:35:26.500
be distracting from focusing on
whatever the new set of

655
00:35:26.500 --> 00:35:29.650
features are that you're currently
working on. That's interesting that

656
00:35:29.890 --> 00:35:32.380
it seems that some developers
have a sense of ownership

657
00:35:32.410 --> 00:35:35.800
over the package that they
deliver, but not the actual

658
00:35:35.800 --> 00:35:38.460
thing that's in production. And
there seems to be a

659
00:35:38.460 --> 00:35:44.190
culture of information hiding in
this industry. I mean, it

660
00:35:44.190 --> 00:35:47.490
seems that in the manufacturing
industry, they, they proudly show

661
00:35:47.490 --> 00:35:50.940
signs that say 400 days
since our last accident, which

662
00:35:50.940 --> 00:35:53.820
is their equivalent of uptime,
or we're currently making a

663
00:35:53.820 --> 00:35:58.620
car every 12 seconds. But
I usually don't see signs

664
00:35:58.680 --> 00:36:02.100
up and flat screen monitors
up outside of data centers

665
00:36:02.100 --> 00:36:04.980
that are touting. You know,
we were at we're at

666
00:36:04.980 --> 00:36:06.900
five nines right now. It
seems like that should be

667
00:36:06.900 --> 00:36:09.600
broadcasted to the world. I'm
always impressed when I enter

668
00:36:09.600 --> 00:36:11.490
an organization and not only
have they got signs up

669
00:36:11.520 --> 00:36:14.940
near the, the data center,
but in the lobby, you

670
00:36:14.940 --> 00:36:17.250
know, you want to impress
me, put a 42 inch

671
00:36:17.250 --> 00:36:19.290
flat screen with a perf
mod and some dashboard up

672
00:36:19.290 --> 00:36:22.410
in the lobby of your
building. That's the goal that's

673
00:36:22.740 --> 00:36:24.750
really powerful. What is the
culture that's preventing people to

674
00:36:24.750 --> 00:36:26.690
do that? Well, first off,
I'm really glad that you

675
00:36:26.690 --> 00:36:30.860
mentioned the manufacturing example because
that's partially where the inspiration

676
00:36:30.860 --> 00:36:33.560
for this came from. So
I've been reading a lot

677
00:36:33.560 --> 00:36:37.820
recently about lean manufacturing and
looking for opportunities to apply

678
00:36:38.060 --> 00:36:41.390
ideas from lean into the
software development. Just to be

679
00:36:41.390 --> 00:36:44.540
clear Are folks that are,
are listening that lean doesn't

680
00:36:44.540 --> 00:36:47.330
just mean necessarily the concept
of lean, but this is

681
00:36:47.330 --> 00:36:50.780
a practice. This is the
name of something That's right.

682
00:36:50.780 --> 00:36:53.150
And so it is a
set of ideas that have

683
00:36:53.150 --> 00:36:59.840
helped revolutionize the manufacturing idea
and it is embodied within

684
00:37:00.080 --> 00:37:03.800
the Toyota company. So it
is where many of the

685
00:37:03.800 --> 00:37:07.160
lean ideas first came about.
And so much of the

686
00:37:07.160 --> 00:37:14.600
lean terminology is, is from,
is in Japanese. So there's

687
00:37:14.750 --> 00:37:17.060
a lean concept called an
end in board. And an

688
00:37:17.060 --> 00:37:19.700
end in board is exactly
what I've just been describing.

689
00:37:20.000 --> 00:37:25.160
That's a N D O
N and within Toyota's manufacturing

690
00:37:25.160 --> 00:37:30.050
plants, there is a prominent
display within the assembly area

691
00:37:30.290 --> 00:37:35.150
where every production worker can
see what the status is

692
00:37:35.150 --> 00:37:40.160
of the line. And so
that information is visible. It

693
00:37:40.160 --> 00:37:44.690
is updated continuously and it's
what drives their process. It

694
00:37:44.690 --> 00:37:47.360
helps them ensure that they're
practicing tech time, that they

695
00:37:47.570 --> 00:37:51.560
are meeting the necessary quality
standards that they're meeting the

696
00:37:51.560 --> 00:37:55.010
necessary levels of production that
are required in order to

697
00:37:55.010 --> 00:37:59.180
sustain their lean operation. And
it's exactly the same idea

698
00:37:59.210 --> 00:38:03.740
within software development is to
take and create and in

699
00:38:03.750 --> 00:38:07.460
boards for software teams, that's,
that's the central idea behind

700
00:38:07.460 --> 00:38:10.280
continuous monitoring. And this was
an idea that you're just

701
00:38:10.280 --> 00:38:12.740
kind of working on right
now. This isn't a, I

702
00:38:12.740 --> 00:38:14.360
can't rush out and buy
one of these, but I

703
00:38:14.360 --> 00:38:16.220
can start. How do I
get involved in the conversation?

704
00:38:16.520 --> 00:38:18.200
I think that people who
are listening to this are

705
00:38:18.200 --> 00:38:20.360
going to want to find
where's the Google group, where's

706
00:38:20.360 --> 00:38:22.580
the website, where's the blog.
How do I get more

707
00:38:22.580 --> 00:38:25.370
information about continuous monitoring? What
I can do to make

708
00:38:25.370 --> 00:38:27.410
this happen at my company
today? So at this point

709
00:38:27.410 --> 00:38:29.870
in time, it's pretty much
under the radar. The easiest

710
00:38:29.870 --> 00:38:41.920
thing is to contact me
directly@owenowenatxtechdotcomexortch.com and alternately come to

711
00:38:41.950 --> 00:38:45.640
agile 2008, the start of
August, I'm going to be

712
00:38:45.640 --> 00:38:51.250
doing a three hour tutorial
on this topic and we'll

713
00:38:51.250 --> 00:38:55.480
hopefully have more than just
vaporware to present at least

714
00:38:55.480 --> 00:38:58.300
from the software side and
provide some demos of integration

715
00:38:58.300 --> 00:39:02.020
with hardware. The things that
I've done on projects in

716
00:39:02.020 --> 00:39:06.220
the past have been more
or less cobbled together. And

717
00:39:06.220 --> 00:39:09.040
so this is an attempt
to extend beyond that and

718
00:39:09.040 --> 00:39:13.150
actually explore the interaction between
the software and the hardware

719
00:39:13.150 --> 00:39:15.750
and see where these two
things fit together. Very cool.

720
00:39:15.750 --> 00:39:17.340
Well, thanks so much for
sitting down with me today.

721
00:39:17.340 --> 00:39:19.290
I really appreciate you taking
the time. Yeah, no problem,

722
00:39:19.290 --> 00:39:22.170
Scott. All right. This has
been another episode of Hanselminutes

723
00:39:22.200 --> 00:39:23.550
and we'll see you again
next week.

