WEBVTT FILE

1
00:00:12.000 --> 00:00:17.460
From Hansel minutes.com it's Hansel
minutes, a weekly discussion with

2
00:00:17.460 --> 00:00:22.440
web developer and technologists. Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:22.440 --> 00:00:28.650
show number one 98. Recorded
live Thursday, January 14th, 2010. Support for

4
00:00:28.650 --> 00:00:32.670
Hanselman it's provided by Tellerik
rad controls, the most comprehensive

5
00:00:32.670 --> 00:00:36.360
suite of components for windows
forms and asp.net web applications

6
00:00:36.510 --> 00:00:45.240
online@wwwdottelerik.com. In this episode, Scott
talks about the reactive framework

7
00:00:45.330 --> 00:00:50.780
and linked to events with
Eric Meyer. So Scott Hanselman, and

8
00:00:50.780 --> 00:00:52.610
this is another episode of
Hansel minutes and I'm here

9
00:00:52.610 --> 00:00:55.490
on the Microsoft campus in
Redmond, Washington, and building 35.

10
00:00:55.490 --> 00:00:57.800
And I have the distinct
pleasure of sitting down today

11
00:00:57.800 --> 00:01:00.800
with Eric Meyer. How are you,
sir? I'm very good. Thank

12
00:01:00.800 --> 00:01:03.050
you. Now we're sitting here
and building 35 in the

13
00:01:03.080 --> 00:01:06.320
cloud programmability group, is that
correct? Yes. My team is

14
00:01:06.320 --> 00:01:11.840
sculpted cloud programmability team, and
we're focusing on making, it's

15
00:01:11.840 --> 00:01:13.670
going to, you know what,
another way I say it

16
00:01:13.670 --> 00:01:18.320
just like democratizing the cloud,
democratizing the cloud. Well, wow.

17
00:01:18.350 --> 00:01:21.020
You have a lot of
black squares that are actually

18
00:01:21.020 --> 00:01:23.000
stacked up on your wall
here. These are all a

19
00:01:23.000 --> 00:01:26.390
patent cubes. That's correct. So,
yeah, that's one of my

20
00:01:26.390 --> 00:01:31.460
hobbies to collect or to
collect patents, to write patterns.

21
00:01:31.460 --> 00:01:34.430
When I was, before I
came to Microsoft, I was

22
00:01:34.430 --> 00:01:38.150
a professor and as a
professor, you ride research papers.

23
00:01:39.470 --> 00:01:42.520
And so now when I
came to Microsoft, I'm in

24
00:01:42.530 --> 00:01:45.110
a product team, you don't
ride the research paper. So

25
00:01:45.410 --> 00:01:47.930
I kind of shifts that.
You did that with patents.

26
00:01:48.170 --> 00:01:51.080
Well, it's, it's, it's ever
so imposing to notice that

27
00:01:51.080 --> 00:01:54.830
you've basically used them as
wallpaper. Yeah, my goal is

28
00:01:54.830 --> 00:01:57.500
to kind of fill the
whole window. You've definitely made

29
00:01:57.500 --> 00:01:59.990
your point. One of the
things that I wanted to

30
00:01:59.990 --> 00:02:01.640
come and talk to you
about is this notion of

31
00:02:01.640 --> 00:02:05.360
the reactive framework. I've heard
people refer to it, colloquially

32
00:02:05.360 --> 00:02:07.640
as things like linked to
events, but I want to

33
00:02:07.640 --> 00:02:09.860
start at the beginning because
I think that the listeners

34
00:02:09.860 --> 00:02:12.680
understand linked to objects. I
think most of our listeners

35
00:02:12.680 --> 00:02:16.010
understand the basics of IEnumerable,
but if you wouldn't mind

36
00:02:16.430 --> 00:02:18.830
talking to me, like I'm
a, a four year old,

37
00:02:19.220 --> 00:02:21.230
you know, C sharp or
VB program, and then let's

38
00:02:21.490 --> 00:02:25.670
move our way up to
programming the cloud. Okay. No

39
00:02:25.670 --> 00:02:30.830
problem. So yeah, everybody's familiar
with linked to objects. That's

40
00:02:30.830 --> 00:02:35.110
the workhorse of the.net framework.
And if you look at,

41
00:02:35.150 --> 00:02:39.260
I innumerable, it is an
interface that many collections implement.

42
00:02:39.470 --> 00:02:44.270
So for example, RH lists,
hash tables, they'll implement the

43
00:02:44.270 --> 00:02:48.830
IEnumerable interface. And the I
numerable interface is a full

44
00:02:48.830 --> 00:02:52.010
interface. So if you have
a collection that implements, I

45
00:02:52.010 --> 00:02:56.690
numerable, let's call that the
producer, then the consumer asks

46
00:02:56.690 --> 00:03:00.160
the producer to get the
next element. So you say,

47
00:03:00.310 --> 00:03:03.490
move next or first you
say it gets the numerator,

48
00:03:03.640 --> 00:03:06.670
right? Which gives you a
handle to enumerate the elements

49
00:03:06.670 --> 00:03:11.440
of the collection. And then
whenever you want to have

50
00:03:11.740 --> 00:03:16.090
the next element, you say,
move next, which causes the

51
00:03:16.090 --> 00:03:20.980
producer to create or produce
the next element. But as

52
00:03:20.980 --> 00:03:23.260
the consumer, you're a block.
So you're pooling, but you're

53
00:03:23.260 --> 00:03:27.490
blocked until the producer, hence
you the next element. And

54
00:03:27.490 --> 00:03:31.060
then won't move next returns.
True. Then the value is

55
00:03:31.060 --> 00:03:34.110
available. And current, Does that
mean that as someone who

56
00:03:34.110 --> 00:03:37.440
might implement that interface, I
could write a, a poorly

57
00:03:37.440 --> 00:03:42.420
behaved implementation of IEnumerable such
that I am blocking all

58
00:03:42.420 --> 00:03:45.270
callers or at least making
them slow. Yes. For example,

59
00:03:45.270 --> 00:03:48.090
when you use iterators, you
know, the things that have

60
00:03:48.100 --> 00:03:52.020
yield to return, so you
might write something that returns

61
00:03:52.020 --> 00:03:56.190
an IEnumerable off end, where
you never reached a yield

62
00:03:56.190 --> 00:03:59.190
to return, or, you know,
it might take, you know,

63
00:03:59.190 --> 00:04:01.140
you do a threat, don't
sleep, you know, off an

64
00:04:01.140 --> 00:04:05.610
hour. Right. So, and that
means that now the producer

65
00:04:05.910 --> 00:04:10.260
is kind of dependent on
the collaboration of the producer

66
00:04:10.530 --> 00:04:12.720
to get the, those values.
Well, I think that as

67
00:04:12.720 --> 00:04:15.900
the program or the, the
consumer of those values has

68
00:04:15.900 --> 00:04:19.290
an assumption, just like there
are assumptions at the, at

69
00:04:19.290 --> 00:04:21.390
the method and property level.
When I call a method,

70
00:04:21.390 --> 00:04:23.520
I expect it will take
a little while if I

71
00:04:23.520 --> 00:04:26.910
call a property, I can,
I like, while it's possible

72
00:04:26.910 --> 00:04:29.070
that underneath the get is
a lot of evil and

73
00:04:29.070 --> 00:04:32.370
I sleep for an hour,
there's an implicit contract that

74
00:04:32.520 --> 00:04:35.160
methods take time and properties
don't. And I think that

75
00:04:35.310 --> 00:04:39.590
amongst those, that produce to
me that consume on an

76
00:04:39.590 --> 00:04:42.220
a for each loop. That
is, It's going to be

77
00:04:42.230 --> 00:04:46.950
pretty fast. Yes. But let,
let me give you an

78
00:04:46.950 --> 00:04:52.740
example of like in dotnet
FORO, when you reach files

79
00:04:52.750 --> 00:04:58.620
our directory, that's not readership
IEnumerable of files or file

80
00:04:58.620 --> 00:05:03.510
info filing. So yes, but
depending on, you know, the,

81
00:05:03.540 --> 00:05:05.850
your disk speed and so
on, that might take a

82
00:05:05.850 --> 00:05:08.910
long time. So really there's
a lot of latency in

83
00:05:08.910 --> 00:05:12.630
that call. So instead of
blocking, and instead of like

84
00:05:12.720 --> 00:05:18.360
pulling the data from the
producer, you might be better

85
00:05:18.360 --> 00:05:21.300
off to kinda, you know,
be notified to whenever the

86
00:05:21.300 --> 00:05:25.530
producer has a value available.
And that's kind of push

87
00:05:25.530 --> 00:05:28.770
model is something that we're
all familiar about at Schwab.

88
00:05:28.790 --> 00:05:32.640
Because if you ride a
UI application, you're not asking

89
00:05:32.640 --> 00:05:37.200
a button, you know, give
me your next click. But

90
00:05:37.230 --> 00:05:39.690
when the button has an
X clicks, it will call

91
00:05:39.690 --> 00:05:42.540
you back. Exactly. The button
has, it kind of pushed

92
00:05:42.540 --> 00:05:45.270
me, But I think that
the perception in the past,

93
00:05:45.270 --> 00:05:49.230
and, and is that that's
that slow, that events by

94
00:05:49.230 --> 00:05:52.320
their nature are slow. And
that may be just apocryphal.

95
00:05:52.320 --> 00:05:55.050
It may just be perception,
but that sense of, if

96
00:05:55.050 --> 00:05:57.890
I ask you, I want
it now, if count on

97
00:05:57.890 --> 00:06:00.740
you to tell me it's
going to take awhile for

98
00:06:00.740 --> 00:06:02.870
that message to get back.
So I think that people

99
00:06:02.870 --> 00:06:07.430
would intuitively and perhaps wrongly
think that that kind of

100
00:06:07.430 --> 00:06:12.400
a model would be slow,
But that, I think that's

101
00:06:12.790 --> 00:06:17.410
not really relevant, right? Because
whether it's slow or fast

102
00:06:17.650 --> 00:06:20.740
is really a way to
decouple the speeds from the

103
00:06:20.740 --> 00:06:24.370
producer and the speed of
the consumer, right? With innumerable,

104
00:06:24.850 --> 00:06:28.180
I, as a consumer now
kind of, you know, depend

105
00:06:28.210 --> 00:06:32.200
on the speed of the
producer. So I cannot proceed

106
00:06:32.200 --> 00:06:36.100
until the producer proceeds, whereas
with the push model with

107
00:06:36.100 --> 00:06:39.940
events, right, I can do
stuff while somebody else presses

108
00:06:39.940 --> 00:06:43.390
the button. I'm blocked on
that. And this is the

109
00:06:43.390 --> 00:06:46.240
same why when you're doing
say in silver lights and

110
00:06:46.240 --> 00:06:50.380
when you're making service calls
and they're, you know, you

111
00:06:50.380 --> 00:06:52.450
get in, you make the
call and you get an

112
00:06:52.450 --> 00:06:56.440
event when the call returns,
or you used to begin

113
00:06:56.440 --> 00:06:59.770
invoke and to invoke pattern
there, you also used this

114
00:07:00.730 --> 00:07:06.010
push model because you want
to decouple your progress from

115
00:07:06.010 --> 00:07:09.070
the progress of this other
operation. What is the difference

116
00:07:09.070 --> 00:07:12.220
in that versus maybe a
poor man's implementation in the

117
00:07:12.220 --> 00:07:14.530
sense of a lot of
people are used to spinning

118
00:07:14.530 --> 00:07:17.680
off another thread in order
to go and pull data.

119
00:07:17.710 --> 00:07:19.750
And they may feel that
they've solved the problem by

120
00:07:19.750 --> 00:07:25.090
simply letting another thread Worry
about it. And that's fine

121
00:07:25.390 --> 00:07:28.720
because when you let another
tread worry about that, that's

122
00:07:28.720 --> 00:07:31.180
kind of an implementation detail,
but now you still have

123
00:07:31.180 --> 00:07:35.020
to create a mechanism when,
how that other threat signals

124
00:07:35.020 --> 00:07:40.340
to you when it's done.
And again, like the, the,

125
00:07:40.360 --> 00:07:43.390
the dot-net begin folk and
evoke pattern is a good

126
00:07:43.390 --> 00:07:46.450
example because it gives you
two ways to deal with

127
00:07:46.450 --> 00:07:49.330
that. One way is you
can give a callback to

128
00:07:49.330 --> 00:07:51.700
the begin, right. That will
be called when it's done,

129
00:07:51.730 --> 00:07:57.020
or you can block on
the async results. Right. Right.

130
00:07:57.070 --> 00:07:58.810
So it allows you to
bow, it's kind of, you

131
00:07:58.810 --> 00:08:04.600
know, block or gets called
back. Right. And so, well,

132
00:08:04.630 --> 00:08:07.080
what I'm trying to do
with reactive framework is still

133
00:08:07.080 --> 00:08:11.550
kind of separate and formalize
both these models. So the,

134
00:08:11.550 --> 00:08:14.710
the push model or sort
of pull model, that's already

135
00:08:14.710 --> 00:08:18.160
formalized to the innumerable, right?
So if you have a

136
00:08:18.160 --> 00:08:22.180
source that you pull values
from that source implements, I

137
00:08:22.180 --> 00:08:26.020
innumerable, but we don't have
anything that's formalized as the

138
00:08:26.020 --> 00:08:28.960
push model. So if I
have a source that pushes

139
00:08:28.960 --> 00:08:31.930
stuff at me, what is
the interface for that? So

140
00:08:32.200 --> 00:08:35.170
that I can have multiple
types that implement that source,

141
00:08:35.170 --> 00:08:38.440
such that just like with
innumerable, I can write libraries.

142
00:08:38.740 --> 00:08:41.410
That only depends on the
interface, but not on the

143
00:08:41.410 --> 00:08:44.410
actual time. Okay. So does
that, and I've read up

144
00:08:44.410 --> 00:08:46.570
on this a little bit.
Does this is then the

145
00:08:46.570 --> 00:08:50.920
mathematical duel to link to
objects? Yes. So the, the,

146
00:08:50.920 --> 00:08:54.640
the mechanism at which we
designed the interface we're using,

147
00:08:54.700 --> 00:09:00.090
we're this trick of mathematical
duality, but that sounds really

148
00:09:00.090 --> 00:09:02.470
scary. It's not like I
need a PhD to understand

149
00:09:02.680 --> 00:09:04.260
the end. That's not true
at all. So let's go

150
00:09:04.260 --> 00:09:07.020
back to the simple example
of a button. Excellent. Okay.

151
00:09:07.050 --> 00:09:09.960
Now look at the button
while there's a button. In

152
00:09:09.960 --> 00:09:13.110
my opinion, a button is
really a collection. It's a

153
00:09:13.110 --> 00:09:17.880
collection of clicks. It's a
potential clicks. Yes. Well, no,

154
00:09:17.880 --> 00:09:21.120
but it's really a click
because Oh, you get to

155
00:09:21.120 --> 00:09:24.150
click events, right. In some
sense, it's a collection, but

156
00:09:24.150 --> 00:09:26.700
it's not a collection that
you pull from, but there's

157
00:09:26.700 --> 00:09:29.600
a collection that pushes the
values at you. Oh, it

158
00:09:29.600 --> 00:09:31.130
doesn't really matter that I
don't know how many there

159
00:09:31.130 --> 00:09:35.120
are. No, it is. It's
just a collection. Yes. And

160
00:09:35.330 --> 00:09:39.140
so I'm like, in my
talks, I often use coins.

161
00:09:39.470 --> 00:09:42.740
And then here, I'm old
school, we got a bag

162
00:09:42.740 --> 00:09:46.010
of pennies here. All right.
Yeah. And now you can

163
00:09:46.040 --> 00:09:49.370
visualize. And my math teacher
always said, if you want

164
00:09:49.370 --> 00:09:52.520
to explain something, explain it
with money. All right. Let's

165
00:09:52.520 --> 00:09:54.080
see how we're going to
use the money though. So

166
00:09:54.350 --> 00:09:57.110
like, let's start with the
pool model. The pool model

167
00:09:57.110 --> 00:10:02.960
is, so you are the
sculptor cycle button. I'm going

168
00:10:02.960 --> 00:10:04.660
to hold the money here.
And he used to show,

169
00:10:04.690 --> 00:10:07.100
he used to collection. And
now I have to ask

170
00:10:07.100 --> 00:10:10.790
Scott move next. Okay. And
now Scott, of course is

171
00:10:10.790 --> 00:10:12.650
kind of teasing me and
he's not giving me the

172
00:10:12.650 --> 00:10:15.680
money. He's loving me way
too. He gave me one.

173
00:10:15.920 --> 00:10:18.470
And now I say, move
next again. I'm thinking about

174
00:10:18.470 --> 00:10:21.010
it. And he's thinking about
it. And you know, and

175
00:10:21.010 --> 00:10:23.420
now I get the next
penny. All right. Okay. Makes

176
00:10:23.420 --> 00:10:26.750
sense. And so I'm really
begging Scott's to give me

177
00:10:26.750 --> 00:10:29.120
the next shot. That's another,
a nice feeling. No, it's

178
00:10:29.120 --> 00:10:31.220
not. What I rather have
is I want to have

179
00:10:31.220 --> 00:10:35.090
the push model where I
tell Scott's, you know, whenever

180
00:10:35.090 --> 00:10:37.070
you have a penny, just
throw it at me to

181
00:10:37.120 --> 00:10:40.460
push it at me. Nah,
nah, I'm getting rich. It's

182
00:10:40.460 --> 00:10:42.920
like a jackpot in the
casino, you know, where it's

183
00:10:42.920 --> 00:10:49.160
just the money money's flying
at you. So that's kind

184
00:10:49.160 --> 00:10:52.460
of the difference between the
pool model and the push

185
00:10:52.460 --> 00:10:55.160
model. And you may well
be doing other things, but

186
00:10:55.160 --> 00:10:57.620
you're not as much worried
about waiting around for me

187
00:10:57.620 --> 00:10:59.930
to give you that money.
Exactly. Because while, You know,

188
00:10:59.930 --> 00:11:01.730
I can just have like
a cup here and I

189
00:11:01.730 --> 00:11:04.430
can tell you, put the
money in the cup and

190
00:11:04.430 --> 00:11:07.550
then I can go on
and do other things. Okay.

191
00:11:07.610 --> 00:11:10.670
So that just kind of
the basic idea between the

192
00:11:10.700 --> 00:11:14.120
push model and the pull
model. Okay. And then what

193
00:11:14.930 --> 00:11:19.280
RX, yes. Is basically two
interfaces that to represent a

194
00:11:19.280 --> 00:11:23.480
push based collections. Okay. And
the push based collections, let's

195
00:11:23.810 --> 00:11:28.100
go back to innumerable to
explain how the full collections

196
00:11:28.100 --> 00:11:32.090
work. So in numerable you
first say gets enumerate door

197
00:11:32.840 --> 00:11:34.850
and then when you get
to enumerate or you can

198
00:11:35.060 --> 00:11:37.940
go move next and then
you get to current and

199
00:11:37.940 --> 00:11:40.160
then you call move next
and they go current and

200
00:11:40.160 --> 00:11:42.320
then move next to return
false. And then you're done.

201
00:11:42.710 --> 00:11:47.030
Okay. Now let's look at
how you would do a

202
00:11:47.630 --> 00:11:50.750
push collection. So with a
push collection, you, instead of

203
00:11:50.750 --> 00:11:54.970
saying, get enumerator, you give
the push collection a back

204
00:11:55.390 --> 00:11:59.920
to say, whenever something happens,
no, define me on that

205
00:11:59.920 --> 00:12:04.130
thing. Okay. Now, how do
you get notified? Well, with,

206
00:12:04.270 --> 00:12:08.470
with innumerable, you can be
notified for three things. You

207
00:12:08.470 --> 00:12:11.110
can be notified with the
value that's when move next

208
00:12:11.110 --> 00:12:14.620
return through, and you say
gets current. You can be

209
00:12:14.620 --> 00:12:17.500
notified of the amount of
the collection. That's when moved

210
00:12:17.500 --> 00:12:22.630
next return false. Or it's
gonna throw an exception. Many

211
00:12:22.630 --> 00:12:26.320
people don't realize that. But
if I call, move next

212
00:12:26.350 --> 00:12:29.400
that my throw an exception.
Okay. Should there, there are

213
00:12:29.400 --> 00:12:33.340
three possibilities. Okay. There's three
possible values, a normal value,

214
00:12:33.490 --> 00:12:36.610
determination, or an exception. Okay.
Now the same thing with

215
00:12:37.240 --> 00:12:40.750
push collection. When I hand
you this interface, you can

216
00:12:40.750 --> 00:12:43.150
tell me to rethink, you
can give me a normal

217
00:12:43.150 --> 00:12:46.150
value, like a coin. You
can tell me, I ran

218
00:12:46.150 --> 00:12:49.510
out of money. Don't expect
anything more. Or you can

219
00:12:49.510 --> 00:12:52.560
send me an exception and
say something runs wrong. Heart

220
00:12:52.560 --> 00:12:56.400
attack. There's no money. Exactly.
I'm unavailable. And so that's

221
00:12:56.400 --> 00:13:00.600
the, what we call the
observer interface, which is something

222
00:13:00.600 --> 00:13:03.240
that has three functions on
next to which it gets

223
00:13:03.240 --> 00:13:07.710
the regular value on completed.
That indicates termination and on

224
00:13:07.710 --> 00:13:11.100
error where you sent me
an exception. Okay. Now for

225
00:13:11.100 --> 00:13:13.320
the listeners who have been
thinking about this and been

226
00:13:13.320 --> 00:13:15.540
listening along with us, they
may be saying, well, I've

227
00:13:15.540 --> 00:13:18.990
never personally called get a
numerator. I've never really thought

228
00:13:18.990 --> 00:13:21.750
about I enumerator. I innumerable.
They've been viewing that through

229
00:13:21.750 --> 00:13:25.020
the lens of, for each.
They've been doing that for

230
00:13:25.020 --> 00:13:28.590
the lens of select and
link. Exactly. The DSL that

231
00:13:28.590 --> 00:13:31.980
is link has been hiding
the fact that this is

232
00:13:31.980 --> 00:13:36.300
really happening. Exactly. And so
for the same, we do

233
00:13:36.330 --> 00:13:39.810
exactly the same with RX.
Just like you, can you

234
00:13:39.840 --> 00:13:43.440
hide the whole mechanism of,
you know, get enumerates or

235
00:13:43.440 --> 00:13:46.890
move next in for each
or in particular. Now it

236
00:13:46.890 --> 00:13:52.650
link in where select many
group by all the sequence

237
00:13:52.650 --> 00:13:56.610
operators and you can write
link queries, overdose. We have

238
00:13:56.610 --> 00:14:01.440
to implement it exactly the
same operators on these observable

239
00:14:01.440 --> 00:14:05.880
collections and observable collections is
maybe confusing because there's also

240
00:14:05.880 --> 00:14:10.680
the observable collections in WPF.
Well, on these high observable

241
00:14:10.680 --> 00:14:13.740
collections, these push collections To
be clear, what we know

242
00:14:13.740 --> 00:14:17.640
of as observational collections in
WPF are not, I observable

243
00:14:17.640 --> 00:14:19.680
collections, no, As it relates
to the way they could

244
00:14:19.680 --> 00:14:24.840
implement, I observed, Oh, they,
they signal an event whenever

245
00:14:24.840 --> 00:14:29.610
something changes, which is like,
you know, every event you

246
00:14:29.610 --> 00:14:33.090
can view as an observable.
Okay. So we have implemented

247
00:14:33.090 --> 00:14:37.800
all the link operators over
these IO, observable based collections.

248
00:14:37.800 --> 00:14:42.840
And that's why sometimes people
call this link to events

249
00:14:43.200 --> 00:14:47.400
because an events stream like
a button button clicks is

250
00:14:47.400 --> 00:14:51.240
an example of, of, of
something that isn't a push-based.

251
00:14:53.540 --> 00:14:57.470
Now the nice thing is
that you can write very

252
00:14:57.470 --> 00:15:02.780
cool positional things. Now using
link various that you couldn't

253
00:15:02.780 --> 00:15:06.980
do before. Imagine that you
want to write, everybody's familiar

254
00:15:06.980 --> 00:15:11.210
with this in visual studio.
When you have IntelliSense, whenever

255
00:15:11.210 --> 00:15:15.470
you type something intelligence, doesn't
show up immediately, right? It

256
00:15:15.470 --> 00:15:18.140
only, when you pause for
a little while, then IntelliSense

257
00:15:18.140 --> 00:15:20.900
shows up. Otherwise it would
drive you crazy. Right? You

258
00:15:20.930 --> 00:15:23.060
dive in and deli center
would go up and down.

259
00:15:23.360 --> 00:15:26.330
So it kind of pauses.
And then, so when you

260
00:15:26.330 --> 00:15:29.270
pause for a little bit,
intelligence shows up, well, that's

261
00:15:29.270 --> 00:15:32.000
now an operation that I
can define on any event

262
00:15:32.000 --> 00:15:35.330
stream. So imagine that I
have a button in my

263
00:15:35.330 --> 00:15:38.870
UI, and if you click
on it really fast, I

264
00:15:38.870 --> 00:15:41.450
don't want to go an
action. Whenever you click on

265
00:15:41.450 --> 00:15:44.210
the button, only when you
click on the button and

266
00:15:44.210 --> 00:15:47.600
then there is no click
within a certain time period.

267
00:15:49.090 --> 00:15:51.190
Hey everybody, this is Scott
coming at you from another

268
00:15:51.190 --> 00:15:54.100
place in time. No doubt.
You'll probably bump into testing

269
00:15:54.100 --> 00:15:56.770
tasks now, and then, and
your work and, you know,

270
00:15:56.770 --> 00:15:59.260
writing functional tests is probably
not your favorite thing. It's

271
00:15:59.260 --> 00:16:01.300
kind of difficult. It takes
time and the results can

272
00:16:01.300 --> 00:16:04.570
be dubious. Well, get ready
to start liking tests. Thanks

273
00:16:04.570 --> 00:16:08.530
to Tellerik with the, the
new whereby testing framework building

274
00:16:08.530 --> 00:16:11.890
web automation test is a
breeze. You've got code automation

275
00:16:11.890 --> 00:16:14.860
with advanced asp.net, Ajax and
server light applications. You can

276
00:16:14.860 --> 00:16:18.160
write a single test, have
it executed against multiple browsers

277
00:16:18.160 --> 00:16:21.190
at once. You'd benefit from
a rich API there's link

278
00:16:21.190 --> 00:16:24.730
support integration with visual studio
unit testing, also in unit

279
00:16:24.970 --> 00:16:28.000
X unit and MBA unit,
not to mention the free

280
00:16:28.000 --> 00:16:31.000
rappers for Telerik rad controls
for ESPN and Ajax, and

281
00:16:31.000 --> 00:16:35.080
several light, all shipping with
Telerik's new testing tool. One

282
00:16:35.080 --> 00:16:37.900
of the best features, the
webinar testing framework, which is

283
00:16:37.900 --> 00:16:41.890
developed by art of test
is it's absolutely free. Freddie

284
00:16:41.890 --> 00:16:44.500
got hooked on web by
testing framework, start using it

285
00:16:44.500 --> 00:16:48.010
right away, go to tellerik.com
for more info. Thanks a

286
00:16:48.010 --> 00:16:50.740
lot. Alright, that's the kind
of thing where that would

287
00:16:50.740 --> 00:16:52.690
be kind of difficult. I
think I'd make a timer

288
00:16:52.690 --> 00:16:54.850
and I'd keep a track
of how long it's been.

289
00:16:54.850 --> 00:16:57.160
And, you know, and I
think it would probably take

290
00:16:57.160 --> 00:17:00.670
a little thought eight or
nine lines of yuck and

291
00:17:01.120 --> 00:17:04.450
might have some race conditions
and some weird exactly. Plus

292
00:17:04.450 --> 00:17:06.280
if you now want to
do that for a key

293
00:17:06.280 --> 00:17:09.160
up event, you would have
to write everything again. You

294
00:17:09.160 --> 00:17:11.770
would have to copy and
paste that state machine. Exactly.

295
00:17:12.040 --> 00:17:14.920
And so what we now
can do, if you expose

296
00:17:14.920 --> 00:17:19.270
your events using an eye
observable, then you can reuse

297
00:17:19.360 --> 00:17:23.380
that same library that we
wrote to do that and

298
00:17:23.380 --> 00:17:28.030
apply that to any events
or another interesting. Can you

299
00:17:28.030 --> 00:17:29.500
talk, can you just, before
you go move on, can

300
00:17:29.500 --> 00:17:31.090
you say a little something
about what that syntax might

301
00:17:31.090 --> 00:17:33.550
look like? Cause I'm familiar
with, you know, you know,

302
00:17:33.550 --> 00:17:36.510
from P and people that
kind of, what is this

303
00:17:36.920 --> 00:17:40.090
Do the same thing. So
let me try a little

304
00:17:40.090 --> 00:17:44.290
bit experiment. This is hard
to explain in words, but

305
00:17:44.680 --> 00:17:47.200
my old professor told me
if you cannot explain it

306
00:17:47.200 --> 00:17:50.730
in white ink, you cannot
explain it at all. So

307
00:17:50.790 --> 00:17:55.080
I'm explaining it in white
ink, which is so let's

308
00:17:55.080 --> 00:17:59.550
look at a simple example
of an Ajax application. An

309
00:17:59.550 --> 00:18:05.430
Ajax application usually does the
following. There's some UI and

310
00:18:05.430 --> 00:18:08.550
based on a UI event,
like a key brass or

311
00:18:08.550 --> 00:18:12.180
a button click, you're making
a service call to some

312
00:18:12.180 --> 00:18:16.080
web service, which might take
time. And imagine you're using

313
00:18:16.530 --> 00:18:20.760
a service reference that returns
an event, the results comes

314
00:18:20.760 --> 00:18:23.610
back and then you want
to update the UI. Okay.

315
00:18:23.820 --> 00:18:26.580
So here's how you would
ride this using link. You

316
00:18:26.580 --> 00:18:33.990
say from value in UI
event, from result in surface

317
00:18:33.990 --> 00:18:38.340
call based on the result
of the UI event, select

318
00:18:38.670 --> 00:18:41.130
the result of the service
call. So we have a

319
00:18:41.130 --> 00:18:45.660
little query that joins the
stream of UI events with

320
00:18:45.660 --> 00:18:49.890
the stream of surface reference
results. And I see your

321
00:18:49.890 --> 00:18:52.460
heads here. Yeah, no, I,
I, my head just exploded

322
00:18:52.460 --> 00:18:56.090
and it's leaking onto your
floor. So you've just taken

323
00:18:56.330 --> 00:18:59.810
what would have been the
hooking up of an event

324
00:18:59.810 --> 00:19:02.270
handler, which would be one
line of code up off

325
00:19:02.270 --> 00:19:05.030
somewhere in the top of
my file, the event handler

326
00:19:05.030 --> 00:19:08.510
itself, the method call the
stuff that I would have

327
00:19:08.510 --> 00:19:09.980
to react to. I'd have
to dig it out of

328
00:19:09.980 --> 00:19:15.650
the property that the, the
parameters, and you've distilled it

329
00:19:15.650 --> 00:19:20.030
down into one terse, but
readable single line of code,

330
00:19:20.060 --> 00:19:22.820
which is essentially what link
does. Yes, Exactly. And the

331
00:19:22.820 --> 00:19:25.160
nice thing. And this is
really the power of link.

332
00:19:25.430 --> 00:19:28.310
I think we are still
underestimating the power of link

333
00:19:28.760 --> 00:19:31.010
because a lot of people,
when they hear link, they

334
00:19:31.010 --> 00:19:35.600
think maybe linked to objects
and maybe linked to sequel

335
00:19:35.600 --> 00:19:39.620
or linked to entities, but
link can work on anything

336
00:19:39.620 --> 00:19:43.190
that implements the sequence operators.
And in this case, these

337
00:19:43.190 --> 00:19:46.880
push collections also implement the
sequence operators. So you can

338
00:19:47.570 --> 00:19:50.540
write link various over them.
So all the pushing, all

339
00:19:50.540 --> 00:19:53.510
the announcing, all the threads,
all the synchronization, all the

340
00:19:53.510 --> 00:19:58.150
event throwing is hidden entirely
Inside to the secret side,

341
00:19:58.160 --> 00:20:00.530
the secrets operators. Yes. And
so you can do that

342
00:20:00.530 --> 00:20:03.170
once and for all. And
so we are spending a

343
00:20:03.170 --> 00:20:05.300
lot of time. And when
you came in, you saw

344
00:20:05.300 --> 00:20:07.340
that I was kind of
talking with my team, we're

345
00:20:07.340 --> 00:20:09.530
spending a lot of time
making these things correct. And

346
00:20:09.530 --> 00:20:14.180
especially the edge cases and
race conditions and so on

347
00:20:14.540 --> 00:20:17.240
and such debts, you know,
you can then freely compose

348
00:20:17.240 --> 00:20:21.890
these kind of simple building
blocks in big urbans. And

349
00:20:21.890 --> 00:20:24.080
what about where it's like,
what, when would I use

350
00:20:24.080 --> 00:20:27.020
aware or a filter of
some kind of, Here's an

351
00:20:27.020 --> 00:20:30.530
example, suppose you, you want,
you have your mouse and

352
00:20:30.530 --> 00:20:34.190
you want to restrict your
mouse to do stay within

353
00:20:34.190 --> 00:20:37.250
a certain window of your,
in your screen. I was

354
00:20:37.250 --> 00:20:39.440
doing this just last week.
I was doing this well.

355
00:20:39.440 --> 00:20:41.180
So what you do is
you take your Mo your

356
00:20:41.180 --> 00:20:45.560
module moves, and you just
say, where, you know, exposition

357
00:20:45.560 --> 00:20:48.940
is lash then, you know,
within the boundaries and the

358
00:20:48.940 --> 00:20:51.550
Y position is in the
boundaries. And now you only

359
00:20:51.550 --> 00:20:55.590
get events from the mouse
within Actually not you're, you're,

360
00:20:55.590 --> 00:20:57.990
you're actually filtering the, the
creation of event. You're saying,

361
00:20:57.990 --> 00:20:59.670
I don't even want to
know about the event if

362
00:20:59.670 --> 00:21:02.010
it doesn't meet this. Yes.
Because this is such a

363
00:21:02.010 --> 00:21:06.090
classic problem. And I always
get nailed with the I'm

364
00:21:06.090 --> 00:21:08.550
trying to drag something. And
I didn't think about the

365
00:21:08.550 --> 00:21:10.890
mouse move with the mouse
button down is different than

366
00:21:10.890 --> 00:21:14.180
when it's up. And, you
know, that's the, the, the

367
00:21:14.190 --> 00:21:16.830
best way to, to, to
crash a new program that

368
00:21:16.830 --> 00:21:19.020
does a lot of drag
drop is to grab something

369
00:21:19.170 --> 00:21:21.120
and just start shaking the
mouse around and see whether

370
00:21:21.120 --> 00:21:22.590
or not they're off, they
have an off by one

371
00:21:22.590 --> 00:21:27.090
pixel or negatives, move it
onto another monitor, change, different

372
00:21:27.090 --> 00:21:29.610
coordinate system. Yeah. And, and
just a lot of code.

373
00:21:29.610 --> 00:21:32.910
Yes. And, and funny that
you mentioned it drag and

374
00:21:32.910 --> 00:21:36.780
drop as well enough of
kind of our, our famous

375
00:21:36.780 --> 00:21:40.590
examples. And it's like also
an exercise and it's, it's

376
00:21:40.590 --> 00:21:43.890
incredible in how many ways
you can actually ride dragons

377
00:21:43.890 --> 00:21:47.370
or up using our RX.
And if you go to

378
00:21:47.400 --> 00:21:50.190
our forum, or I think
there's also an example in

379
00:21:50.190 --> 00:21:55.560
the wall, 101 RX samples
to do that, talking about,

380
00:21:55.920 --> 00:21:59.040
you know, writing UI programs.
And a lot of people

381
00:21:59.760 --> 00:22:02.370
think that when you're writing
UI programs, they're hard to

382
00:22:02.400 --> 00:22:05.190
test because if you now,
for example, I have to

383
00:22:05.220 --> 00:22:08.040
test your program that does
drag and drop because how

384
00:22:08.040 --> 00:22:10.200
do you test it? Because
you have to maybe have

385
00:22:10.200 --> 00:22:13.140
a real mouse to move,
right? Because you know, how,

386
00:22:13.380 --> 00:22:15.740
how do I simulate my
mind? How do I ride

387
00:22:15.750 --> 00:22:20.640
a mock mouse street? Well,
if you use RX, it

388
00:22:20.640 --> 00:22:22.980
becomes trivial because what you
can do is you can

389
00:22:23.520 --> 00:22:28.530
replace the implementation, the source
of the mouse, move events

390
00:22:29.040 --> 00:22:33.930
by something else, say an
RA, just a collection of

391
00:22:33.930 --> 00:22:36.690
events. And then you say
to innumerable on that array.

392
00:22:36.930 --> 00:22:40.140
So that's your, your input.
And then you can look

393
00:22:40.140 --> 00:22:43.740
at that the output stream
turned death into another era

394
00:22:43.770 --> 00:22:45.730
Beck. And then you can
just compare that to the,

395
00:22:46.380 --> 00:22:49.380
Which I don't need a
mock mouse because all I

396
00:22:49.380 --> 00:22:51.600
was reacting to before were
events that were in a

397
00:22:51.600 --> 00:22:54.270
collection, I just simply make
that collection and pass it

398
00:22:54.270 --> 00:22:57.990
in. And the data is
the data. Exactly. So by

399
00:22:57.990 --> 00:23:02.340
making events first glass, you
allow to kind of plug

400
00:23:02.340 --> 00:23:05.130
in a different implementation. And
that's kind of one of

401
00:23:05.130 --> 00:23:10.170
the big sources of power
of the reactive extensions events

402
00:23:10.170 --> 00:23:14.280
in dotnet are beautiful things,
but they are not first

403
00:23:14.280 --> 00:23:16.590
class they're there. And what
do I mean by first

404
00:23:16.590 --> 00:23:19.350
glass is that you cannot
take an event and put

405
00:23:19.350 --> 00:23:21.870
it in an IRA, or
you cannot take an event

406
00:23:21.930 --> 00:23:24.540
and pass it as a
parameter or return it's from

407
00:23:24.540 --> 00:23:27.330
a method rather than event
is going to die to

408
00:23:27.330 --> 00:23:30.330
do the class in which
it's declared. What we do

409
00:23:30.330 --> 00:23:35.880
with RX is we free
events from kind of the

410
00:23:35.880 --> 00:23:39.720
bridging of the class. And
now events become first-class things

411
00:23:39.720 --> 00:23:43.080
that you can put in
an array pass around. And

412
00:23:43.080 --> 00:23:46.730
now it becomes really easy
to create a mock source

413
00:23:46.760 --> 00:23:50.280
of events, because it's just
like any other time. And,

414
00:23:50.280 --> 00:23:53.530
and, and, and by including
them into the link ecosystem,

415
00:23:53.530 --> 00:23:55.870
just as you know, that
they are as first-class assistant,

416
00:23:55.870 --> 00:23:58.690
not object right there. Yes.
Whether I'm looking at events

417
00:23:58.690 --> 00:24:01.510
or XML or SQL or
a file systems. Yeah. It's

418
00:24:01.510 --> 00:24:04.030
all what I'm comfortable with
already. Yeah. How do we

419
00:24:04.030 --> 00:24:06.040
get into this now? Help
me understand the state of

420
00:24:06.040 --> 00:24:08.470
the project. Where is it?
What's the ship vehicle? How

421
00:24:08.470 --> 00:24:10.810
do I get it? The
listeners will be interested in

422
00:24:10.810 --> 00:24:13.000
this. Where can they use
it? And where do you

423
00:24:13.000 --> 00:24:15.700
think it's going? Okay. So
that's a good question. So

424
00:24:15.700 --> 00:24:19.540
D D interfaces to do
interfaces. I observer and I

425
00:24:19.540 --> 00:24:25.480
observable are shipping and don't
net FORO. So there, you

426
00:24:25.480 --> 00:24:28.000
can get them. And they're
inside of system dot Corp.

427
00:24:28.480 --> 00:24:34.660
They are in system re
system reactive system reactive. Okay.

428
00:24:35.500 --> 00:24:38.620
Our system observer, But that's
the namespace, but they're probably

429
00:24:38.620 --> 00:24:41.980
in the system about core
physical. Yeah. So, sorry. Yes.

430
00:24:43.030 --> 00:24:45.790
I'm here confused because we
have like many, many versions

431
00:24:45.820 --> 00:24:48.670
that I will explain now.
Okay, good. So the interfaces

432
00:24:48.670 --> 00:24:52.810
are in <inaudible> and the
reason I sounded a little

433
00:24:52.810 --> 00:24:56.050
bit confused here because in
net four, we introduced something

434
00:24:56.050 --> 00:25:00.010
really beautiful, which is go
and contract variance. And since

435
00:25:00.010 --> 00:25:05.500
these are interfaces, they are
go and Contra variant observable

436
00:25:05.920 --> 00:25:09.280
is go variant. And the
observer is <inaudible>. So you

437
00:25:09.280 --> 00:25:10.540
might want to take a
moment. Cause a lot of

438
00:25:10.540 --> 00:25:14.740
our listeners don't necessarily speak
English as their native language,

439
00:25:14.920 --> 00:25:16.900
and they're going to be
off looking this up and

440
00:25:16.900 --> 00:25:18.580
they may or may not
be familiar with the terms

441
00:25:18.580 --> 00:25:20.950
of covariance and Contravent. So
just take a brief moment

442
00:25:20.950 --> 00:25:26.230
and, okay. So what go
means, and many people that

443
00:25:26.230 --> 00:25:30.640
have used collections in dotnet
will have discovered that let's

444
00:25:30.640 --> 00:25:33.880
go back to erase. If
I have an array of

445
00:25:34.780 --> 00:25:38.380
bananas, I can BOSH that
where you need an array

446
00:25:38.380 --> 00:25:43.810
of fruit, because fruit is
a <inaudible> type of fruit.

447
00:25:44.140 --> 00:25:46.240
So if I have an
array of bananas and you

448
00:25:46.240 --> 00:25:48.460
need an array of fruit,
I can pass you that

449
00:25:48.490 --> 00:25:52.390
array. Now, if I ha,
if you expect an innumerable

450
00:25:52.810 --> 00:25:57.580
of fruit, I cannot pass
you an innumerable of bananas

451
00:25:58.000 --> 00:26:02.020
because innumerable until don't match
for or Walston all to

452
00:26:02.020 --> 00:26:04.930
go variant. So the fact
that, you know, even though

453
00:26:05.440 --> 00:26:09.580
banana is a special kind
of fruit, innumerable of banana

454
00:26:09.580 --> 00:26:13.810
was not an innumerable of
fruit, Was a, basically another

455
00:26:13.810 --> 00:26:16.330
way to phrase it as
that array, as simple as

456
00:26:16.330 --> 00:26:19.660
it is, was a first
class citizen and innumerable innumerable

457
00:26:19.660 --> 00:26:22.400
was not at first A
citizen, in some sense, it's,

458
00:26:22.400 --> 00:26:24.820
it's more than not that
it's a first class citizen,

459
00:26:24.820 --> 00:26:26.830
but it's the fact that
it's a, it's a generic

460
00:26:26.830 --> 00:26:29.510
dive that has a diaper
and Muktar, but the, the

461
00:26:29.530 --> 00:26:34.330
sip diving, the inheritance relation
is not carried across the

462
00:26:34.570 --> 00:26:37.030
generics. Okay. So then now
the beautiful thing that you've

463
00:26:37.030 --> 00:26:39.460
added in dotnet four, because
of that is the ability

464
00:26:39.460 --> 00:26:43.440
to do this with events.
Yes. So that's why we

465
00:26:43.440 --> 00:26:46.590
have that in dotnet FORO
but now when we backport,

466
00:26:46.590 --> 00:26:52.380
it's a reactive framework to
3.5, there is no go

467
00:26:52.380 --> 00:26:57.030
variance there, or there is
covariance, but C-sharp three doesn't

468
00:26:57.030 --> 00:27:00.360
X-Box that show. We have
a separate implementation for that.

469
00:27:00.750 --> 00:27:03.930
And then we have a
separate implementation for silver Silverlight

470
00:27:04.290 --> 00:27:09.360
and a separate implementation for
the compact framework. So if

471
00:27:09.360 --> 00:27:12.450
you go to Def labs,
you ask about shipping vehicle.

472
00:27:12.750 --> 00:27:17.790
So on deaf labs, we
have installers available with the

473
00:27:17.790 --> 00:27:20.610
full framework for each of
these platforms, each of these

474
00:27:20.610 --> 00:27:25.380
versions of dotnet. And so
they're all kind of slightly

475
00:27:25.380 --> 00:27:29.220
different. Well, another interesting aspect
here is that in our

476
00:27:29.220 --> 00:27:32.490
ax, you, you mentioned a
while back that you, if

477
00:27:32.490 --> 00:27:34.950
you want to do something
asynchronously, you spin up a

478
00:27:34.950 --> 00:27:41.670
separate threat, right? <inaudible> we
introduced the DPL task, parallel

479
00:27:41.670 --> 00:27:45.540
library, nice firelight library. And
so we said, well, in

480
00:27:45.540 --> 00:27:49.500
case you, you need to
introduce concurrency. Why aren't we

481
00:27:49.500 --> 00:27:54.300
leveraging, you know, the TPL?
So our X is built

482
00:27:54.300 --> 00:27:57.450
on top of the TPL,
but in three, five, there

483
00:27:57.450 --> 00:28:02.190
is no TPL. So we
work together with the VFX

484
00:28:02.190 --> 00:28:07.470
team and Becky <inaudible> parallel
framework extension. And we backport

485
00:28:07.470 --> 00:28:10.230
to that two, three, five.
So if you download RX

486
00:28:10.230 --> 00:28:14.370
from dev labs, you get
an implementation of the parallel

487
00:28:14.370 --> 00:28:17.330
framework for.net three, five. Alright,
Let me see if I

488
00:28:17.330 --> 00:28:19.100
understand this. Cause if I
understand it, I'll be able

489
00:28:19.100 --> 00:28:22.250
to say it back to
you. So the reactive framework

490
00:28:22.250 --> 00:28:24.980
and the, the interfaces that
support it are in done

491
00:28:24.980 --> 00:28:26.990
at four and when done
at four ships they'll have

492
00:28:26.990 --> 00:28:29.420
that. Yeah. They can go
up and get implementations for

493
00:28:29.420 --> 00:28:34.730
server Lite implementations for compact
framework and implementations. For those,

494
00:28:34.730 --> 00:28:37.190
those are the two primary
things Silverlight and compact framework.

495
00:28:37.220 --> 00:28:40.370
No, Silverline Going back to
framework three, five. Okay. And

496
00:28:40.650 --> 00:28:43.670
for FORO the implementation of
the sequence operators, because if

497
00:28:44.180 --> 00:28:47.210
it's only the interfaces Right
now, I can, and that'll

498
00:28:47.210 --> 00:28:50.000
be supported because it's in
FORO. Yes. But the back

499
00:28:50.000 --> 00:28:52.550
port to three, five is
still a labs thing or

500
00:28:52.550 --> 00:28:54.950
is it fully supported? It's
on labs, but we're kind

501
00:28:54.950 --> 00:28:57.410
of, you know, well, this
fully supported, Well, I guess

502
00:28:57.410 --> 00:28:59.180
what I'm saying is if
I'm a big corporate developer,

503
00:28:59.180 --> 00:29:01.430
I'm going to go tell
my boss, I should use

504
00:29:01.430 --> 00:29:04.130
this. Would he be more
happy if I use the

505
00:29:04.130 --> 00:29:06.110
four over version? Then if
I use the back port

506
00:29:06.110 --> 00:29:09.230
at three, To be clear,
the four version only the

507
00:29:09.350 --> 00:29:13.370
only the interfaces are into
BCL, right? The sequence operators

508
00:29:13.370 --> 00:29:17.030
are on dev labs right
now, I'm talking about, can

509
00:29:17.030 --> 00:29:21.080
I use this? We have
a very liberal license where

510
00:29:21.080 --> 00:29:24.680
you can, you can use
this. So it's, it's kind

511
00:29:24.680 --> 00:29:26.810
of different than in the
BCL. But if you read

512
00:29:26.810 --> 00:29:31.460
the license, the way I
think of it is that,

513
00:29:31.460 --> 00:29:35.060
you know, we're trying to
take away all the barriers

514
00:29:35.060 --> 00:29:37.310
for people to use RX.
So there's no one should

515
00:29:37.310 --> 00:29:39.590
be afraid of using this.
It's not a skunkworks thing.

516
00:29:39.590 --> 00:29:42.490
It's a real thing with
a team behind it. Yes.

517
00:29:42.520 --> 00:29:46.030
Okay. Now, interestingly at the
beginning here, you're in the

518
00:29:46.060 --> 00:29:49.000
cloud programmability team and we
haven't said anything about the

519
00:29:49.000 --> 00:29:52.060
cloud. So how does all
this, what we've just talked

520
00:29:52.060 --> 00:29:54.870
about, fit into the cloud.
Okay. Well, showed the cloud

521
00:29:54.870 --> 00:30:00.720
is all about, let's say,
well, this, the, the, the

522
00:30:00.720 --> 00:30:02.370
best way to say the
way I look at the

523
00:30:02.370 --> 00:30:10.260
cloud is that it's meshing
up services from different sources

524
00:30:10.650 --> 00:30:14.640
into a client. Now all
these services to get to

525
00:30:14.640 --> 00:30:17.880
them is an asynchronous call.
You have to go across

526
00:30:17.880 --> 00:30:21.360
the network and make an
asynchronous call. Now on the

527
00:30:21.360 --> 00:30:25.110
client, you have to synchronize
and orchestrate these different services,

528
00:30:26.040 --> 00:30:28.380
which is also an aspect
that we haven't talked about.

529
00:30:28.380 --> 00:30:31.230
But which is very important.
Imagine that I'm making two

530
00:30:31.230 --> 00:30:36.780
service calls or three to
three different translation engines. Okay.

531
00:30:37.530 --> 00:30:40.140
And now I want to
wait until two out of

532
00:30:40.140 --> 00:30:43.170
three have, have returned a
result. That's a, that's a

533
00:30:43.170 --> 00:30:45.120
classic kind of a problem.
That's the kind of thing

534
00:30:45.120 --> 00:30:49.080
where the, the businessman, the
suit that signs, my checks

535
00:30:49.500 --> 00:30:54.090
can say it very easily.
Hey, programmer, call these three,

536
00:30:54.720 --> 00:30:56.970
two out of three within
five seconds and then use

537
00:30:56.970 --> 00:30:58.980
them the third one. Doesn't
come back. Don't worry about

538
00:30:58.980 --> 00:31:01.590
it. If the, if only
one comes back, give up

539
00:31:01.590 --> 00:31:04.200
and show an error, and
he'll say that was crystal

540
00:31:04.200 --> 00:31:06.120
clear. And you're going to
think, all right, well, that's

541
00:31:06.120 --> 00:31:10.950
about 60 hours of work.
Exactly. And with RX, that

542
00:31:10.950 --> 00:31:13.740
should become easier. That's when
w when I mentioned the

543
00:31:13.740 --> 00:31:17.340
beginning, democratizing the cloud, those
are the kinds of scenarios

544
00:31:17.340 --> 00:31:20.220
that I want to make
super, super easy. So one

545
00:31:20.220 --> 00:31:22.770
of the things that we
that's also in the, in,

546
00:31:22.770 --> 00:31:25.800
in our access, something called
to join patterns where you

547
00:31:25.800 --> 00:31:29.610
can ride to rules, think
of like outlook rules that

548
00:31:29.610 --> 00:31:31.500
you have in your inbox.
You know, if a message

549
00:31:31.500 --> 00:31:33.270
comes into the inbox and
it sets, as far as

550
00:31:33.270 --> 00:31:35.850
these things, then put it
here. You can write the

551
00:31:35.850 --> 00:31:39.690
same rules on events, streams,
or on asynchronous computations. So

552
00:31:39.690 --> 00:31:42.870
if these two comments, you
do this, if these two

553
00:31:42.870 --> 00:31:44.340
come in and you do
that. And so you can

554
00:31:44.340 --> 00:31:46.920
write at a very high
level, you can ride with

555
00:31:46.920 --> 00:31:55.080
very concise synchronization, logic to
orchestrates service goals and events,

556
00:31:55.080 --> 00:31:58.320
streams, et cetera, You know,
and, and having little kind

557
00:31:58.320 --> 00:32:00.330
of like firecrackers going off
in my head, because I'm

558
00:32:00.330 --> 00:32:03.510
starting to realize that it
makes total sense why you'd

559
00:32:03.510 --> 00:32:05.700
be working so closely with
the PFX team, but the

560
00:32:05.700 --> 00:32:10.740
parallel team, because they are
democratizing a multiprocessor and threading,

561
00:32:10.740 --> 00:32:15.150
they're trying to make concurrency
accessible as are you, you're

562
00:32:15.300 --> 00:32:17.750
trying to make this kind
of concurrency access. Yes. And

563
00:32:17.790 --> 00:32:19.920
for example, here's a concrete
example. If you take a

564
00:32:19.920 --> 00:32:23.400
task and you can take
a task and turn that

565
00:32:23.400 --> 00:32:28.230
into an observable. So if
you have any API that

566
00:32:28.230 --> 00:32:30.330
works with docs, you can
expose it as an I

567
00:32:30.330 --> 00:32:34.530
observable. And in some sense,
that's comparable to taking an

568
00:32:34.560 --> 00:32:38.070
array and viewing that as
an innumerable. So at DAS

569
00:32:38.070 --> 00:32:40.970
cause a lot of special
properties and, and, and special

570
00:32:40.970 --> 00:32:44.870
operations. But now I want
to glue together a task,

571
00:32:44.870 --> 00:32:48.740
which, you know, button clicks
and that's this world RX

572
00:32:48.750 --> 00:32:51.890
allows to do, because you
can Xpress both in terms

573
00:32:51.890 --> 00:32:55.240
of this higher level interface.
This is really interesting. I'm

574
00:32:55.240 --> 00:32:58.330
starting to realize that looking
at the way that, that

575
00:32:58.330 --> 00:33:00.790
you've integrated with link, the
way that the parallel extension

576
00:33:00.790 --> 00:33:02.680
seems to integrated with link,
that you're going to be

577
00:33:02.680 --> 00:33:07.180
able to write a very,
very clear and crisp statements

578
00:33:07.180 --> 00:33:09.670
that will say things like,
you know, fire off these

579
00:33:09.670 --> 00:33:12.610
services. When these come back,
go off in these cores

580
00:33:12.610 --> 00:33:14.740
and use, you know, four
out of the eight available

581
00:33:14.740 --> 00:33:16.810
cores to process this information,
let me know when it's

582
00:33:16.810 --> 00:33:20.140
done. And it starts to
the code you write starts

583
00:33:20.140 --> 00:33:22.360
to look more like what
the businessman in the suit

584
00:33:22.360 --> 00:33:25.780
actually said. Yes, exactly. And
that's kind of the whole,

585
00:33:25.780 --> 00:33:27.760
the whole point of link
where you can of you're,

586
00:33:27.760 --> 00:33:30.670
you're raising the level of
abstraction where you can write

587
00:33:31.180 --> 00:33:35.620
these things in a much
higher level way without where

588
00:33:35.620 --> 00:33:38.590
you abstract. Again, that we
mentioned this notion of abstraction

589
00:33:38.590 --> 00:33:42.400
a couple of times, right?
All the complicated locking and

590
00:33:42.400 --> 00:33:45.490
so on is now hidden
in the sequence operators, such

591
00:33:45.490 --> 00:33:47.980
that you, as a programmer,
only have to, it's like

592
00:33:47.980 --> 00:33:50.680
Lego blocks. You can kind
of now connect these together.

593
00:33:50.980 --> 00:33:53.830
And then inside these blocks,
there's a lot of complexity,

594
00:33:53.830 --> 00:33:56.080
but that's all hidden for
you. And this is one

595
00:33:56.080 --> 00:33:57.880
of the things that I've
been saying kind of more

596
00:33:57.880 --> 00:33:59.530
and more, and I feel
a little bit like you're

597
00:33:59.530 --> 00:34:01.480
validating what I've said, which
is in Dutton at four

598
00:34:01.480 --> 00:34:03.370
O and I'm going to
sound like a fan boy

599
00:34:03.400 --> 00:34:06.220
here of my own company.
The Lego blocks are the

600
00:34:06.220 --> 00:34:10.510
right size, you know, before
it was like the little

601
00:34:10.510 --> 00:34:12.520
tiny one-piece Legos, and then
the big ones that you

602
00:34:12.520 --> 00:34:14.170
gave to your two year
old child, and you try

603
00:34:14.170 --> 00:34:15.890
to make them work together.
And it doesn't, but, but

604
00:34:15.990 --> 00:34:18.280
I feel like more than
ever that they go blocks

605
00:34:18.280 --> 00:34:21.130
are the appropriate size for
most of the business problems

606
00:34:21.130 --> 00:34:23.890
that I'm trying to solve.
Yep. And, and I would

607
00:34:23.890 --> 00:34:27.520
agree with that. And so
we're, we're writing a lot

608
00:34:27.520 --> 00:34:31.510
of samples and, you know,
even though, as you say,

609
00:34:31.780 --> 00:34:35.410
even though, I mean, I
made this myself, it surprises

610
00:34:35.410 --> 00:34:38.590
me every day. When I
ride a sample, how beautiful

611
00:34:39.120 --> 00:34:42.730
and how elegant you can
describe problems. It's like, okay,

612
00:34:42.730 --> 00:34:45.040
here's a problem. And you,
you scratch your heads a

613
00:34:45.040 --> 00:34:48.670
little bit. And then, Oh,
this is, you know, it's

614
00:34:48.670 --> 00:34:51.250
like, like a little poem
that, you know, your code

615
00:34:51.250 --> 00:34:53.890
is like a poem and
it makes programming a lot

616
00:34:53.890 --> 00:34:56.830
of fun when your code
looks beautiful and kind of

617
00:34:56.920 --> 00:35:00.220
tight and, and does exactly
what it needs to do

618
00:35:00.220 --> 00:35:03.580
without any kind of noise.
That's, that's kind of what

619
00:35:04.300 --> 00:35:07.270
gives me pleasure in life
as a developer. Well, that's

620
00:35:07.270 --> 00:35:09.820
fantastic. Well, Eric Meyer, thank you
so much for sitting down

621
00:35:09.820 --> 00:35:12.190
with me today and sharing
this framework with me. You're

622
00:35:12.190 --> 00:35:14.380
very welcome. We'll put the
links up on the show

623
00:35:14.380 --> 00:35:16.390
site that you have access
to all of this stuff,

624
00:35:16.390 --> 00:35:18.610
and maybe we'll come and
see Eric again some time.

625
00:35:19.030 --> 00:35:21.580
This has been another episode
of Hansel minutes, and I'll

626
00:35:21.580 --> 00:35:22.840
see you again next week.

