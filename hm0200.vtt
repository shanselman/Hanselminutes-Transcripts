WEBVTT FILE

1
00:00:12.210 --> 00:00:17.730
From Hansel minutes.com it's Hansel
minutes or weekly discussion with

2
00:00:17.730 --> 00:00:22.920
web developer and technologists. Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:22.920 --> 00:00:29.430
show number 200 recorded live
Friday, February 12th, 2010. Support for Hanselman

4
00:00:29.430 --> 00:00:32.190
it's just provided by Tellerik
R a D controls the

5
00:00:32.190 --> 00:00:35.940
most comprehensive suite of components
to windows forms and asp.net

6
00:00:35.970 --> 00:00:45.570
web applications online@wwwdottelerik.com. In this
episode, Scott talks with developer,

7
00:00:45.630 --> 00:00:51.090
John skeet. Hi, this is
Scott Hanselman, and this is

8
00:00:51.090 --> 00:00:53.550
another episode of Hansel minutes.
In fact, it is episode

9
00:00:53.550 --> 00:00:56.070
200 of Hanselman. So it
may be a little bit

10
00:00:56.070 --> 00:00:59.760
more than just another episode.
And I thought about who

11
00:00:59.760 --> 00:01:01.590
should I have on this
episode? I said, maybe I

12
00:01:01.590 --> 00:01:05.310
should get bill Gates or
Ray Ozzie or, and in

13
00:01:05.310 --> 00:01:07.320
fact, I realized the person
that I wanted most to

14
00:01:07.320 --> 00:01:11.040
have on my 200 show
representing nearly four years of

15
00:01:11.070 --> 00:01:15.570
weekly podcasts was the Chuck
Norris of programming, John skeet

16
00:01:15.570 --> 00:01:17.550
himself. And he is on
the phone with us now

17
00:01:17.580 --> 00:01:19.940
from England. How are you,
sir? I'm fine. Thank you

18
00:01:19.940 --> 00:01:22.580
very much. How are you?
I am very well. I'm

19
00:01:22.580 --> 00:01:25.130
thrilled. I'm thrilled to meet
you over the phone here.

20
00:01:26.240 --> 00:01:28.880
People, people believe that that
you are in fact, the

21
00:01:28.880 --> 00:01:31.490
Chuck Norris of programming, and
this has been kind of

22
00:01:31.490 --> 00:01:35.660
a controversial thing over on
the, on stack overflow about

23
00:01:35.820 --> 00:01:38.930
a year and a half
ago, someone opened a question

24
00:01:41.030 --> 00:01:47.390
about facts about John skeet
and Chuck Norris. Can, can

25
00:01:47.390 --> 00:01:50.090
you give us a little
background about what exactly happened

26
00:01:50.090 --> 00:01:55.520
and why it was a
little mini controversy? Basically it

27
00:01:55.520 --> 00:01:57.770
was a bit of fun.
So I'd be on stack

28
00:01:57.770 --> 00:02:03.290
overflow for a few months
and had risen reasonably quickly

29
00:02:03.440 --> 00:02:06.040
due to having just enough
knowledge, to be dangerous and

30
00:02:06.050 --> 00:02:09.860
fed fast piping to fingers.
And someone opened this question

31
00:02:09.860 --> 00:02:14.840
saying John skeet fat, which
was clearly not programming related

32
00:02:15.260 --> 00:02:19.640
and various people disliked the
idea of celebrating the cult

33
00:02:19.640 --> 00:02:22.100
of John, et cetera, which
I can completely sympathize with.

34
00:02:23.390 --> 00:02:28.160
But then just afterwards to
started stack overflow weighed in

35
00:02:28.160 --> 00:02:30.500
and said, no stack overflow
is about the users. So

36
00:02:30.530 --> 00:02:32.950
this question is fine and
it's been open the link

37
00:02:32.990 --> 00:02:37.190
closed however many times loads
the times, but at the

38
00:02:37.190 --> 00:02:39.860
same time, it's got hundreds
of answers. It's extremely silly.

39
00:02:39.860 --> 00:02:41.870
To be honest, it's not
about me. It's all it's

40
00:02:41.870 --> 00:02:44.450
about. Let's see what silly
things we can come up

41
00:02:44.450 --> 00:02:49.280
with that a superhero programmer
would have. Certainly, certainly. Yeah,

42
00:02:49.280 --> 00:02:51.800
it's not about, it's not
about John skeet, who we're

43
00:02:51.800 --> 00:02:55.700
talking to. It's about the
mythical mystical mythical beast of

44
00:02:55.700 --> 00:02:57.770
John skeet that we have
never met. If you don't

45
00:02:57.770 --> 00:02:59.090
mind, I'm going to read
a few of these because

46
00:02:59.180 --> 00:03:04.420
truly amazing. John skeet is
immutable. If something's going to

47
00:03:04.420 --> 00:03:06.010
change, it's going to have
to be the rest of

48
00:03:06.010 --> 00:03:10.390
the universe. John skeets code,
doesn't follow a coding convention.

49
00:03:10.390 --> 00:03:13.360
It is the coding convention
and here's the best one.

50
00:03:13.360 --> 00:03:16.150
I think that is the
most stack overflow ish users.

51
00:03:16.150 --> 00:03:20.380
Don't Mark John skeets answers
as accepted the universe, accepts

52
00:03:20.380 --> 00:03:23.890
them out of a sense
of truth and justice. I

53
00:03:23.890 --> 00:03:27.760
think that's pretty fantastic. There's
279 answers on that question

54
00:03:27.760 --> 00:03:29.950
that it continues to go
on and has a life

55
00:03:29.950 --> 00:03:32.590
of itself. But, but you
are very well respected as

56
00:03:32.590 --> 00:03:36.250
a technologist and you work
for Google, but I have

57
00:03:36.250 --> 00:03:39.100
written C-sharp in depth, which
is a, is out now.

58
00:03:39.630 --> 00:03:42.750
Yeah, so I worked for
Google in the London office

59
00:03:42.810 --> 00:03:45.480
on the mobile team, which
means I wrote Java most

60
00:03:45.480 --> 00:03:47.880
of the time. And I
should point out that I

61
00:03:47.880 --> 00:03:50.310
didn't speak for Google in
any way, shape or form.

62
00:03:50.310 --> 00:03:52.980
So don't regard anything that
comes out to my now

63
00:03:53.190 --> 00:03:57.330
as the voice of Google.
But yeah, so I write

64
00:03:57.330 --> 00:04:01.530
in Java, I write about
C sharp. I mostly program

65
00:04:01.540 --> 00:04:04.620
C sharp for fun, and
I find it a lovely

66
00:04:04.620 --> 00:04:07.620
language to work in C
sharp in depth has been

67
00:04:07.620 --> 00:04:10.500
out for about a year
and a half. Now, ironically

68
00:04:10.530 --> 00:04:13.530
it's actually was published about
the same time that's I

69
00:04:13.530 --> 00:04:17.400
came over to the state,
serve Fortnite for nuclear orientation

70
00:04:17.400 --> 00:04:20.250
as they call it. So
just as I was officially

71
00:04:20.250 --> 00:04:24.450
leaving a career in C
sharp, the book came out

72
00:04:24.990 --> 00:04:27.570
and by the time I
got back, there was a

73
00:04:27.570 --> 00:04:31.410
lovely Carlton with my 25
free copies, but the C

74
00:04:31.650 --> 00:04:33.720
the C shelf in that
second edition is what I'm

75
00:04:33.720 --> 00:04:36.480
working on that moment. And
that will come out. We'll

76
00:04:36.510 --> 00:04:40.200
probably June, maybe July. Did
you, did you have a

77
00:04:40.200 --> 00:04:43.740
problem moving from C sharp
to Java, or was it

78
00:04:43.740 --> 00:04:46.200
more about working for Google
regardless of the language that

79
00:04:46.200 --> 00:04:50.370
you, that you'd be using
there? I certainly decided to

80
00:04:50.370 --> 00:04:53.220
work for Google, whatever the
language, and it's a fabulous

81
00:04:53.220 --> 00:04:56.160
place to work. I haven't
had very much problem getting

82
00:04:56.170 --> 00:05:00.180
Java cause I've always been
splitting between the two. So

83
00:05:00.270 --> 00:05:04.920
I started off in Java.
Well, my career started 94,

84
00:05:05.070 --> 00:05:09.480
95, sort of in university
vacations, working for digital. And

85
00:05:09.480 --> 00:05:11.580
I started off in Java.
That was back in Java

86
00:05:11.580 --> 00:05:15.210
one point North when it
was completely interpereted. So it

87
00:05:15.210 --> 00:05:19.710
was a really slow beast
back then. And then my

88
00:05:19.710 --> 00:05:22.440
first job started off in
Java and I did a

89
00:05:22.440 --> 00:05:24.990
fair amount of C sharp,
just near the end. Then

90
00:05:24.990 --> 00:05:26.640
I went to a job
that I thought would be

91
00:05:26.640 --> 00:05:29.670
about C sharp, and it
ended up being in Java

92
00:05:30.480 --> 00:05:32.820
after awhile. And I went
back to another job at

93
00:05:32.820 --> 00:05:36.450
C sharp. Now I'm at
Google, that's being Java. Although

94
00:05:36.450 --> 00:05:39.630
I do do 20% projects
while I'm at Google and

95
00:05:39.750 --> 00:05:44.610
in C sharp, where I
can Are these really are

96
00:05:44.610 --> 00:05:46.950
these two languages really that
close that someone can move

97
00:05:46.950 --> 00:05:49.730
back and forth between them
with, with, with no, with

98
00:05:49.740 --> 00:05:52.110
apparently no major problem? Or
is this just that you're

99
00:05:52.110 --> 00:05:57.530
a good programmer? Oh, certainly
not the latter. I, whether

100
00:05:57.530 --> 00:06:00.650
actually the problem might be
that they're too close to

101
00:06:00.650 --> 00:06:02.900
be comfortable rather than too
far apart. And when people

102
00:06:02.900 --> 00:06:07.280
use different languages all the
time, there are some people

103
00:06:07.280 --> 00:06:09.950
who will write a bit
of JavaScript and then a

104
00:06:09.950 --> 00:06:14.210
bit of Haskell or crazily
far apart things. If you're

105
00:06:14.210 --> 00:06:17.840
doing some enterprise integration, you
might have to maintain some

106
00:06:17.840 --> 00:06:20.900
cable system and then writes
in C sharp or whatever.

107
00:06:21.200 --> 00:06:24.140
The frustrating thing sometimes is
that Java and C sharp

108
00:06:24.470 --> 00:06:27.920
are very similar in many
ways, but Java has just

109
00:06:27.920 --> 00:06:32.300
been evolving that much slower
than C sharp. So I

110
00:06:32.300 --> 00:06:35.660
reckon that when C-sharp originally
came out, it was a

111
00:06:35.660 --> 00:06:38.720
little bit better than Java
and Java was at, I

112
00:06:38.720 --> 00:06:41.630
think 1.4 at that stage.
It hadn't yet got generics.

113
00:06:42.050 --> 00:06:45.560
The Java got its version
of generics before C-sharp did

114
00:06:47.750 --> 00:06:50.810
and uniform. They would be
sort of leapfrogging over each

115
00:06:50.810 --> 00:06:53.120
other all the time. But
Java really hasn't gone very

116
00:06:53.120 --> 00:06:56.000
far in terms of the
language since then, we're sort

117
00:06:56.000 --> 00:06:59.510
of pinning our hoops on
Java seven to really get

118
00:06:59.510 --> 00:07:01.400
a lot of the features
that C sharp already has,

119
00:07:01.700 --> 00:07:05.420
and maybe a few other
ones as well. But yeah,

120
00:07:05.420 --> 00:07:09.610
seashell has just been taking
off incredibly fast. It does

121
00:07:09.610 --> 00:07:11.470
seem to be kind of
a thumb war between the

122
00:07:11.470 --> 00:07:14.740
two, between the two languages.
How many, how many more

123
00:07:14.740 --> 00:07:16.480
features can we add to
a language? I think that

124
00:07:16.840 --> 00:07:19.210
that link is pretty extraordinary
the way that was additive

125
00:07:19.450 --> 00:07:21.640
to C-sharp, you know, is
there something coming down the

126
00:07:21.640 --> 00:07:25.210
line in Java, that's going
to be Linky or in

127
00:07:25.240 --> 00:07:28.090
the sense of adding a
huge DSL to this language?

128
00:07:29.560 --> 00:07:31.930
I don't know of anything
quite on the scale of

129
00:07:31.930 --> 00:07:35.530
link. And I suspect that
if that does come, it

130
00:07:35.530 --> 00:07:39.610
would be a little bit
later. And the main talking

131
00:07:39.610 --> 00:07:41.770
points about Java seven, certainly
from my point of view,

132
00:07:41.770 --> 00:07:45.430
is whether, whether the Java
will get closures and it

133
00:07:45.430 --> 00:07:48.130
was announced a few months
ago, but it now looks

134
00:07:48.130 --> 00:07:50.650
like it will, for a
while. It was no one

135
00:07:50.650 --> 00:07:53.500
can work out what closures
should look like in Java.

136
00:07:54.280 --> 00:08:00.010
So something equivalent to lumbar
expressions in C sharp, and

137
00:08:00.010 --> 00:08:03.190
there's now a proposal which
looks pretty promising and we'll

138
00:08:03.190 --> 00:08:06.040
see whether it happens, but
it's meant to happen. And

139
00:08:06.040 --> 00:08:08.560
that for me is a
huge point because there are

140
00:08:08.560 --> 00:08:11.020
lots of things that are
like link. If you mentioned

141
00:08:11.800 --> 00:08:15.340
that link query expressions didn't
exist in C sharp, but

142
00:08:15.340 --> 00:08:18.100
we still had extension methods
and we still have Lambda

143
00:08:18.100 --> 00:08:21.610
expressions. And we still had
all the type inference improvements

144
00:08:21.610 --> 00:08:24.070
that came in C sharp
three. You could still be

145
00:08:24.250 --> 00:08:27.910
pretty dumb, productive with that
query expression, but icing on

146
00:08:27.910 --> 00:08:30.850
the cake in a way.
So I don't know for

147
00:08:30.850 --> 00:08:32.980
sure whether Java seven looks
like it's going to get

148
00:08:33.190 --> 00:08:37.300
extension methods or something similar,
and everything can be slightly

149
00:08:37.300 --> 00:08:40.030
different, but achieve the same
kind of thing. But just

150
00:08:40.030 --> 00:08:42.580
having closures will make a
lot of things much, much

151
00:08:42.580 --> 00:08:45.880
better. What, what do you
use from an OSTP and

152
00:08:45.880 --> 00:08:49.300
IDE perspective while you're at
work at Google versus what

153
00:08:49.300 --> 00:08:53.080
are you COVID see sharpen
at home. So if I'm

154
00:08:53.410 --> 00:08:56.970
using sea shelf at home,
I'll use visual studio, either

155
00:08:56.970 --> 00:09:00.270
2008 or 2010, I've just
moved to the release comes

156
00:09:00.270 --> 00:09:03.660
and it says essentially 10,
and it's looking lovely at

157
00:09:03.660 --> 00:09:07.200
work. I use eclipse Java
and often, in fact, for

158
00:09:07.200 --> 00:09:10.890
both languages, I'll use just
a plain text editor, particularly

159
00:09:10.890 --> 00:09:14.010
for questions on stack overflow.
I tend to like to

160
00:09:14.100 --> 00:09:17.700
write a small console app,
15 lines long. I've got

161
00:09:17.700 --> 00:09:20.550
a test book Java and
the test dot CS in

162
00:09:20.580 --> 00:09:23.640
the directory that a console
brings me up in. So

163
00:09:23.700 --> 00:09:25.140
all I've got to do
is edit that, run the

164
00:09:25.140 --> 00:09:29.220
command line compiler and I'm
away. And that's considerably quicker

165
00:09:29.220 --> 00:09:32.400
than bring up visual studio,
find a fan books project,

166
00:09:33.540 --> 00:09:36.450
trying to get rid of
whatever you have before firing

167
00:09:36.550 --> 00:09:39.030
for a very quick sort
of Emacs like text editor

168
00:09:39.420 --> 00:09:43.730
is considerably quicker. Yeah, for
that, I've been using a

169
00:09:43.730 --> 00:09:47.630
program called snippet compiler. It's
basically like notepad, but it

170
00:09:47.630 --> 00:09:50.140
compiles. So it does exactly
what you just described. You

171
00:09:50.150 --> 00:09:51.770
know, you may do a
quick edit and you go

172
00:09:51.770 --> 00:09:54.800
CSE at the command line,
but I understand that you

173
00:09:54.800 --> 00:09:57.860
definitely don't want to litter
the world with a file

174
00:09:57.860 --> 00:10:01.130
new console application 96, if
you're just trying to go

175
00:10:01.400 --> 00:10:03.950
pro so what is, what
is the OSTP you're using

176
00:10:03.950 --> 00:10:09.440
though at, at, at, at
Google? We use Linux as

177
00:10:09.440 --> 00:10:13.610
well. I use Linux as
my main desktop. Most people

178
00:10:13.610 --> 00:10:16.730
do most engineers do. I
do also have a windows.

179
00:10:17.840 --> 00:10:23.120
Is it okay to ask
which distribution? I don't know

180
00:10:23.120 --> 00:10:25.610
whether it's okay to ask
or not. So I'm going

181
00:10:25.610 --> 00:10:29.150
to not say anything. All
right. But it is eclipse

182
00:10:29.150 --> 00:10:32.750
and that's. So you've been
using visual studio 2010 RC.

183
00:10:33.110 --> 00:10:34.550
This is the one that
we just released to the

184
00:10:34.550 --> 00:10:37.580
public a couple of days
ago. And we released to

185
00:10:37.820 --> 00:10:41.210
MSDN subscribers a little bit
before that I just installed

186
00:10:41.210 --> 00:10:44.540
it on three different machines,
fast, medium, and slow. And

187
00:10:44.540 --> 00:10:47.300
I'm going to try doing
some tests. What kind of

188
00:10:47.300 --> 00:10:49.010
machine are you running on
it and how's it working

189
00:10:49.010 --> 00:10:52.370
out for you? So I
have a couple of years

190
00:10:52.370 --> 00:10:57.050
old bell inspire on 1720,
which is built, I think

191
00:10:57.440 --> 00:11:05.000
two gigahertz computing vehicle for
my main laptop at home.

192
00:11:05.150 --> 00:11:08.720
And I've also got a
Samsung, NC 10, but the

193
00:11:08.830 --> 00:11:11.120
process of which I use,
because I've got about an

194
00:11:11.120 --> 00:11:13.430
hour long commute each way
or an hour and a

195
00:11:13.430 --> 00:11:16.220
half in the evening, I
tend to try to get

196
00:11:16.220 --> 00:11:19.240
some work done on the
train. So I've been working

197
00:11:19.250 --> 00:11:22.040
the book and writing some
code for the book on

198
00:11:22.040 --> 00:11:24.290
the train. So that really
sort of puts the visual

199
00:11:24.290 --> 00:11:27.280
studio for its places in
terms of speed, the beat.

200
00:11:27.290 --> 00:11:31.400
It was not a pleasant
experience on an output, but

201
00:11:31.400 --> 00:11:35.150
with the release candidates, it's
actually pretty reasonable. Hmm. Yeah.

202
00:11:35.150 --> 00:11:37.730
The general sense of is
that the RC has a

203
00:11:37.730 --> 00:11:40.520
huge number of performance improvements.
I'm going to be really

204
00:11:40.520 --> 00:11:42.980
interested to dig into it
and find out if that's

205
00:11:42.980 --> 00:11:45.950
something that's specific to the
IDE that they made faster,

206
00:11:45.950 --> 00:11:48.800
or if it's underlying things
like making WPF faster or

207
00:11:48.800 --> 00:11:51.470
making other libraries faster in
order to enable the IDE

208
00:11:51.500 --> 00:11:54.430
to be faster as think
that if someone at Microsoft

209
00:11:54.430 --> 00:11:56.950
has learned a great deal
about speed, the rest of

210
00:11:56.950 --> 00:11:59.170
us should learn about it
as well. Take advantage of

211
00:11:59.170 --> 00:12:03.840
that. Yes, it's, it's difficult
to know exactly which bits

212
00:12:03.840 --> 00:12:08.070
will be due to visual
studio itself. I know Rico

213
00:12:08.070 --> 00:12:12.030
Mariani has blogged about things
that they have found whilst

214
00:12:12.840 --> 00:12:15.630
tuning the heck out of
visual studio. And some of

215
00:12:15.630 --> 00:12:18.650
those would be quite specific
where it's interoperating with calm

216
00:12:18.650 --> 00:12:23.160
or whatever in plugins that
most of the most programmers

217
00:12:23.160 --> 00:12:25.650
probably don't do very, very
much common situation. I sort

218
00:12:25.650 --> 00:12:29.700
of personally hope not because
I enjoy using on myself,

219
00:12:31.230 --> 00:12:33.360
but other things I will
be interested that there are

220
00:12:33.360 --> 00:12:37.200
a couple of strange performance
quirks that I've found with

221
00:12:37.380 --> 00:12:39.960
Nullarbor planks. For instance, that
would be really kind of

222
00:12:39.960 --> 00:12:42.150
deep in the CLR. And
I have no idea whether

223
00:12:42.150 --> 00:12:44.730
any of that's changed between
Bita two and three leads

224
00:12:44.740 --> 00:12:48.620
come to this. But yeah,
I don't have unfortunately, a

225
00:12:48.630 --> 00:12:55.440
good performance benchmark other than
essentially my protocol buffers. The

226
00:12:55.440 --> 00:12:58.200
20% project that I mentioned
earlier on, which is a

227
00:12:58.200 --> 00:13:01.500
sort of Sierra elevation and
deserialization framework, I do occasionally

228
00:13:01.500 --> 00:13:03.720
run performance benchmarks with that.
So I can see whether

229
00:13:03.720 --> 00:13:09.690
that's any faster under that
foreman.net 3.5. Now, Hi, this

230
00:13:09.690 --> 00:13:12.360
is Scott Hanselman from another
parallel universe, got to tell

231
00:13:12.360 --> 00:13:14.190
you about some of our
things our sponsors are doing.

232
00:13:14.220 --> 00:13:17.970
They make this free podcast
possible. If you're developing a

233
00:13:17.970 --> 00:13:20.610
new line of business application,
you've probably tried the latest

234
00:13:20.610 --> 00:13:22.950
version of server light. Now
you can get even better

235
00:13:22.950 --> 00:13:25.920
results by combining the functionality
and server Lite for beta,

236
00:13:26.280 --> 00:13:28.290
with some of the richness
or the third party controls

237
00:13:28.290 --> 00:13:31.440
from our friends at Tellerik,
they're the first vendors to

238
00:13:31.440 --> 00:13:33.750
offer native support for the
server Lite for beta and

239
00:13:33.750 --> 00:13:36.210
their rad controls. You've got
a new server Lite for

240
00:13:36.210 --> 00:13:39.210
CTP suite of these controls.
They let you tap into

241
00:13:39.210 --> 00:13:41.790
the frameworks, great potential. You
got native right mouse click

242
00:13:41.790 --> 00:13:44.430
and all the new features
it's server line. There's 38

243
00:13:44.430 --> 00:13:47.550
controls that give you all
these features. You can start

244
00:13:47.550 --> 00:13:50.550
building those compelling line of
business applications right away. I

245
00:13:50.550 --> 00:13:54.570
encourage you to check those
products out at tellerik.com/server light,

246
00:13:55.170 --> 00:13:58.050
and, you know, thank Tellerik
for supporting dot and rock

247
00:13:58.050 --> 00:14:02.100
supporting Hansel minutes on their
Facebook fan page at facebook.com/tellerik.

248
00:14:02.520 --> 00:14:06.330
Now back to the show,
is this new? Is this,

249
00:14:06.720 --> 00:14:08.880
this framework that you're working
on, is that the note

250
00:14:08.880 --> 00:14:11.400
of time, the opensource date
time library that you're working

251
00:14:11.400 --> 00:14:14.730
on, or is that something
else That's something else? So

252
00:14:15.000 --> 00:14:18.510
Moodle is a completely personal
project. It's got sort of

253
00:14:18.570 --> 00:14:20.940
nothing to do with Google
as it were. Whereas protocol

254
00:14:20.940 --> 00:14:25.800
buffers is a Google framework
for serialization. That's effectively just

255
00:14:26.010 --> 00:14:28.770
pull it from the jobs.
Again, they're both jobs at

256
00:14:28.770 --> 00:14:33.360
port really, but the idea
of protocol buffers is you

257
00:14:33.360 --> 00:14:38.310
can have a common, portable
serialization framework so that someone

258
00:14:38.520 --> 00:14:43.440
could send me then my
framework, an object serialized from

259
00:14:43.470 --> 00:14:47.100
<inaudible> or from Pearl, I
think there's a Pearl implementation

260
00:14:47.100 --> 00:14:49.260
or certainly C plus plus
and Java. And I can

261
00:14:49.260 --> 00:14:53.570
interoperate with that and then
something. So it's a lot

262
00:14:53.570 --> 00:14:56.540
less brittle than the sort
of Java and C sharp

263
00:14:58.160 --> 00:15:02.720
serialization binary serialization. That is
very, very specific to that

264
00:15:02.720 --> 00:15:07.760
platform. Obviously it becomes less
flexible at that point as

265
00:15:07.760 --> 00:15:13.100
well. So you have to
specify your serialization messages made

266
00:15:13.100 --> 00:15:17.480
out of various sort of
primitives. Here's a string, here's

267
00:15:17.750 --> 00:15:21.870
a binary blob, here's an
integer, et cetera. The, you

268
00:15:21.870 --> 00:15:25.220
do have to design your
clamps around that, but equally

269
00:15:25.280 --> 00:15:29.960
you suddenly get portability it's
design because obviously Google, we

270
00:15:29.960 --> 00:15:32.630
have lots of different versions
of bits of code running.

271
00:15:33.200 --> 00:15:36.920
You can't upgrade all of
Google's servers to the same

272
00:15:36.920 --> 00:15:40.580
version, just like that. So
you have to have a

273
00:15:40.580 --> 00:15:43.490
lot of tolerance for, well,
this was a message version

274
00:15:43.520 --> 00:15:45.980
two. Can we read it
from version three? Yes, we

275
00:15:45.980 --> 00:15:48.020
can. If we send a
message from version three back

276
00:15:48.020 --> 00:15:50.180
to version two, can we
read that? Yes, we can.

277
00:15:50.540 --> 00:15:53.840
And it's specifically designed for
that sort of thing. Whereas

278
00:15:54.050 --> 00:15:56.900
there to time is a
completely different project that I

279
00:15:56.900 --> 00:16:01.700
really started after talking at
the stack Overflow's fifties conference.

280
00:16:02.120 --> 00:16:06.110
And I gave a fairly
lighthearted thought called humanity ethics

281
00:16:06.110 --> 00:16:09.530
sale, where I described some
of the problems that really

282
00:16:09.530 --> 00:16:12.980
we brought upon ourselves in
terms of computing. So you

283
00:16:12.980 --> 00:16:14.690
would have four, three of
the things that should be

284
00:16:14.720 --> 00:16:18.320
easy dealing with texts, dealing
with numbers and dealing with

285
00:16:18.320 --> 00:16:20.960
dates and planes. Those are
all sort of run as

286
00:16:20.960 --> 00:16:23.120
the middle of things that
we should make failings in

287
00:16:23.420 --> 00:16:26.450
the, all of the more
insanely difficult. And one of

288
00:16:26.450 --> 00:16:30.290
the problems in dotnet is
while the BCL has certainly

289
00:16:30.290 --> 00:16:33.410
been improving and plans and
info, and they climb off

290
00:16:33.410 --> 00:16:38.840
set are very, very welcome.
They don't really span everything

291
00:16:38.840 --> 00:16:41.870
that I think should be
in a decent claim library.

292
00:16:42.200 --> 00:16:45.410
And there's a fabulous library
by a chuckle Stephen Colborn

293
00:16:46.460 --> 00:16:50.990
in Java called Joe to
time. And that is widely

294
00:16:50.990 --> 00:16:53.390
regarded as the library that
you use. If you're going

295
00:16:53.390 --> 00:16:56.000
to use dates and claim
stuff on Java, and you

296
00:16:56.000 --> 00:16:57.950
don't bother with Java util
beats, you don't bother with

297
00:16:57.950 --> 00:17:02.630
Java util calendar. They're too
error prone, too difficult to

298
00:17:02.630 --> 00:17:05.510
use. Now you use your
design. So it seemed to

299
00:17:05.510 --> 00:17:08.360
make sense to me to
put that spot net and

300
00:17:08.360 --> 00:17:10.520
try to do a really
good job of making it

301
00:17:10.520 --> 00:17:14.210
feel like it's a.net library,
not just a port and

302
00:17:14.210 --> 00:17:16.790
at the same time, because
it's an interesting open source

303
00:17:16.790 --> 00:17:19.280
project. I thought it would
be a good idea to

304
00:17:19.490 --> 00:17:22.310
try some, take a record
of the problems that they

305
00:17:22.310 --> 00:17:24.980
faced. One when porting it
to the problems in terms

306
00:17:24.980 --> 00:17:28.490
of what does.net having the
way to build systems, unit,

307
00:17:28.490 --> 00:17:30.980
test systems, et cetera. How
do you choose one for

308
00:17:30.980 --> 00:17:33.140
an open source project? So
I'm going to try to

309
00:17:33.800 --> 00:17:36.020
pull all that together as
a sort of guide to,

310
00:17:36.050 --> 00:17:38.330
so you think you want
to start an open opensource

311
00:17:38.330 --> 00:17:41.200
project. Here are the things
to think about. That's a

312
00:17:41.200 --> 00:17:43.630
great idea. Is this something
that we can, we can

313
00:17:43.630 --> 00:17:46.870
watch? Is there a get
hub or a subversion repository

314
00:17:46.870 --> 00:17:49.620
that we can kind of
Snoop in on? There's a

315
00:17:49.620 --> 00:17:55.980
material Repository at covid.google.com/pin/no. To
time we can put the

316
00:17:56.220 --> 00:17:58.890
link in the show notes,
we've got loads of people

317
00:17:58.890 --> 00:18:01.260
interested. So I tweeted about
it and blog about it

318
00:18:01.260 --> 00:18:04.320
at the time. And last
time I looked, I think

319
00:18:04.320 --> 00:18:08.190
there were sort of 80
or 90 people who were

320
00:18:08.790 --> 00:18:12.810
interested in it and interested
enough to have chipped in

321
00:18:12.870 --> 00:18:17.430
on the mailing list. And
various other committers have definitely

322
00:18:17.430 --> 00:18:20.370
contributed plenty of code. It's
solid from a one man

323
00:18:20.370 --> 00:18:24.600
project. Unfortunately everyone's busy, I'm
busy writing the book, et

324
00:18:24.600 --> 00:18:28.080
cetera. So I started it
in September and my aim

325
00:18:28.080 --> 00:18:32.310
was to have something that
could be useful. And you

326
00:18:32.310 --> 00:18:36.150
wouldn't feel worried about looking
at and using in a

327
00:18:36.150 --> 00:18:39.990
real project in one year's
playing from that September. So

328
00:18:40.020 --> 00:18:42.630
I've still got about seven
months to make it production

329
00:18:42.630 --> 00:18:46.410
ready. We've got some useful
stuff already, but is that

330
00:18:46.410 --> 00:18:48.390
some of the early days?
And I'm hoping that as

331
00:18:48.390 --> 00:18:50.520
soon as I finished C
sharp in that second edition,

332
00:18:50.790 --> 00:18:52.920
I can start to put
some real time into their

333
00:18:52.920 --> 00:18:57.470
design. Will it be as
complete as Joda time? I

334
00:18:57.470 --> 00:19:00.650
mean, Joe time is, is
not just complete it's, it's

335
00:19:00.650 --> 00:19:05.450
like encyclopedic, it supports like
six different kinds of other

336
00:19:05.450 --> 00:19:08.420
calendars. It's not just the
standard for Corian counters, but

337
00:19:08.420 --> 00:19:12.380
it goes out to Islamic
calendars, Coptic calendars. Plus it

338
00:19:12.380 --> 00:19:14.960
has a really interesting flute,
kind of a fluent API.

339
00:19:14.990 --> 00:19:20.000
Are you going to have
similar functionality? Certainly. So we'll

340
00:19:20.000 --> 00:19:23.990
definitely support various different calendar
types. We're restricting some of

341
00:19:23.990 --> 00:19:26.060
it because in some ways,
due to time is a

342
00:19:26.060 --> 00:19:30.050
bit too flexible. It allows
you to create your own

343
00:19:30.320 --> 00:19:33.410
calendar fields. So if you
had some that in some

344
00:19:33.410 --> 00:19:37.160
idea roles, a third of
a week, which third of

345
00:19:37.160 --> 00:19:38.690
the week are we in
at the moment? So you

346
00:19:38.690 --> 00:19:41.510
could add that as your
own field pipe injected time.

347
00:19:41.870 --> 00:19:44.930
And if you hooked it
into every single spot that

348
00:19:44.930 --> 00:19:48.920
you needed to, then you
could start asking what's third

349
00:19:48.920 --> 00:19:52.190
of the week today is
et cetera. Now we thought

350
00:19:52.190 --> 00:19:55.190
that was a little bit
too flexible, just in terms

351
00:19:55.190 --> 00:19:58.340
of it made the interface
harder to understand, harder to

352
00:19:58.340 --> 00:20:01.680
implement, et cetera. So we've
tried to simplify it a

353
00:20:01.690 --> 00:20:05.300
bit. We will have a
fluent interface in the same

354
00:20:05.300 --> 00:20:08.690
places that Jody time does,
although actually there's a lot

355
00:20:08.690 --> 00:20:10.550
to be gained from the
fact that we've got software

356
00:20:10.550 --> 00:20:14.990
it's overloading in net. So
Jayda time tries to stick

357
00:20:14.990 --> 00:20:18.680
to immutable clips in most
places. And in fact, where

358
00:20:18.680 --> 00:20:21.740
they do have multiple types
so far, we've managed to

359
00:20:21.740 --> 00:20:25.250
most and removed them from
time to time. And immutable

360
00:20:25.250 --> 00:20:30.050
pipes are ideal for operators,
you know, adding a period

361
00:20:30.080 --> 00:20:34.580
to an instance, whatever. And
so that's, it's really trying

362
00:20:34.580 --> 00:20:36.380
to take the benefits of
all the stuff that you

363
00:20:36.380 --> 00:20:38.960
can do in.net that you'd
like to be able to

364
00:20:38.960 --> 00:20:41.360
enjoy in Java, but it
just doesn't quite support it.

365
00:20:41.750 --> 00:20:46.010
And likewise in Java, they're
all reference plates, they're all

366
00:20:46.010 --> 00:20:51.550
classes because all you can
specify. Whereas I don't really

367
00:20:51.550 --> 00:20:54.790
find myself writing custom search
in C sharp, but in

368
00:20:54.790 --> 00:20:57.520
fact, we've already got three
different strikes, which are just

369
00:20:57.520 --> 00:21:01.360
wrappers around a single long,
but they're really, really useful

370
00:21:01.360 --> 00:21:04.210
to have as different wrappers.
And in fact, we've got

371
00:21:04.240 --> 00:21:08.140
one slightly strange scenario and
the offset of a date

372
00:21:08.170 --> 00:21:15.250
time from UTC. So for
timezone, it's got that particular

373
00:21:15.250 --> 00:21:18.910
offsets at a particular time,
and we've got the strange

374
00:21:18.910 --> 00:21:22.630
situation that you can only
add it to a UTC

375
00:21:22.630 --> 00:21:25.480
time and you can only
subtract it from a local

376
00:21:25.480 --> 00:21:28.090
plane to get back to
a UGC time. So we've

377
00:21:28.090 --> 00:21:31.180
got this sort of asymmetric
situation, which actually helps you

378
00:21:31.180 --> 00:21:34.600
keep clip safe. You can't
accidentally use it the wrong

379
00:21:34.600 --> 00:21:36.880
way around and end up
with your set going backwards,

380
00:21:37.600 --> 00:21:39.550
which is strange, but has
worked one of the few

381
00:21:39.550 --> 00:21:45.000
while. Wow, I'm going to
deal with time zones. Oh

382
00:21:45.000 --> 00:21:48.060
yes. So we've got plenty
zone support. One of the

383
00:21:48.060 --> 00:21:51.480
things that's missing as far
as I'm aware from the.net

384
00:21:51.480 --> 00:21:54.930
BCL is support for what's
called the orphan database of

385
00:21:54.930 --> 00:21:58.710
time zones. So zone info
has all the windows names

386
00:21:58.710 --> 00:22:02.640
for planes, planes, which is
entirely reasonable given botnets windows

387
00:22:02.640 --> 00:22:04.890
nature, but a lot of
the rest of the world

388
00:22:04.890 --> 00:22:08.910
uses awesome identifies. So Europe
slash London, for example, the

389
00:22:08.910 --> 00:22:12.600
planes and the climate at
the moment. And we support

390
00:22:12.600 --> 00:22:15.540
that. We also supports historical
changes to the plane zone.

391
00:22:15.930 --> 00:22:20.010
So Clemson changing all the
time. One example I had

392
00:22:20.070 --> 00:22:24.420
in November when I was
giving the StackOverflow talk was

393
00:22:24.420 --> 00:22:27.150
one of my unit tests
had just broken and thinking

394
00:22:27.150 --> 00:22:31.070
that Greenland was in Argentina
because the origin plan governments,

395
00:22:31.080 --> 00:22:34.320
government just announced that they
were stopping daylight savings. And

396
00:22:34.320 --> 00:22:36.480
they gave, I think 11
days notice that they were

397
00:22:36.480 --> 00:22:39.750
doing this, which is kind
of a mess as far

398
00:22:39.750 --> 00:22:43.320
as the software in Argentina
is concerned. But it does

399
00:22:43.320 --> 00:22:45.480
mean you need to have
the idea of a time

400
00:22:45.490 --> 00:22:50.010
zone that changes over time.
So we can accurately represent

401
00:22:50.010 --> 00:22:53.670
what happened in history. And
we can accurately represent what

402
00:22:53.670 --> 00:22:57.810
it looks like will happen
in the future. And as

403
00:22:58.170 --> 00:23:00.660
this is updated. So there's,
there's a whole blog to

404
00:23:00.660 --> 00:23:05.100
do with dates and playing
zones changing. And as things

405
00:23:05.100 --> 00:23:09.180
changed and the awesome database
gets updated and then we'd

406
00:23:09.180 --> 00:23:11.850
be able to ship either
a new, complete version of

407
00:23:11.850 --> 00:23:14.850
notice claim, or just a
sort of supplementary here's the

408
00:23:14.850 --> 00:23:17.970
plain zone database bit that
you don't need to change

409
00:23:17.970 --> 00:23:21.900
your binary. Just the time
zone. This really seems like

410
00:23:21.990 --> 00:23:25.830
it'll be a, an exercise
in unit testing. I mean,

411
00:23:25.860 --> 00:23:28.770
date times libraries and daytime
calculations are only as good

412
00:23:28.770 --> 00:23:32.220
as their, as their test
coverage. Absolutely. And it's an

413
00:23:32.220 --> 00:23:35.910
ideal thing for unit tests
because there's no external input.

414
00:23:35.910 --> 00:23:38.190
We don't have to worry
about what does it look

415
00:23:38.190 --> 00:23:40.650
like on the screen? We
don't have to worry about

416
00:23:40.920 --> 00:23:43.890
how is it going to
react when the user typed

417
00:23:43.900 --> 00:23:46.310
something in, because they're not
anything in, it's just the

418
00:23:46.310 --> 00:23:50.090
library. It's plain old, put
some numbers in, get some

419
00:23:50.090 --> 00:23:52.910
numbers out. Are they the
right numbers? Now there are

420
00:23:52.910 --> 00:23:57.050
various internationalization issues. So we'll
have to make sure that

421
00:23:57.050 --> 00:24:01.850
the unit tests don't assume
anything about the culture they're

422
00:24:01.850 --> 00:24:07.580
in or specify the culture
for formatting. For instance, one

423
00:24:07.580 --> 00:24:10.400
of the nice things that
we've got that again, follows

424
00:24:10.400 --> 00:24:12.290
due to time is the
idea of you build a

425
00:24:12.290 --> 00:24:16.280
form letter that moves what
pattern it's using, which means

426
00:24:16.280 --> 00:24:18.680
that you don't have to
pause it all the time.

427
00:24:18.710 --> 00:24:22.260
So every time you call
it date playing a tripod

428
00:24:22.310 --> 00:24:25.730
exact or whatever you're calling,
if you've specified a format,

429
00:24:26.720 --> 00:24:29.390
then the BCL is having
to pause and say, Oh

430
00:24:29.390 --> 00:24:31.920
right, you're expecting some years
to start with them some

431
00:24:31.920 --> 00:24:34.450
months and some days, et
cetera, that what have wasted

432
00:24:34.460 --> 00:24:36.770
time, you're going to use
the same format again and

433
00:24:36.770 --> 00:24:39.110
again and again. So we've
got the idea of a

434
00:24:39.120 --> 00:24:41.870
format that has already got
that custom built into it.

435
00:24:42.410 --> 00:24:44.510
And then it can just
scan through the actual input

436
00:24:44.720 --> 00:24:49.130
text, which will change all
the time. And hopefully that

437
00:24:49.130 --> 00:24:52.580
will be considerably faster than
the BCM completions. We are

438
00:24:52.910 --> 00:24:56.720
checking performance against the BCL.
I'm expecting that a lot

439
00:24:56.720 --> 00:25:00.740
of things will be slower
just because we're not spending

440
00:25:00.770 --> 00:25:03.380
all our professional lives tuning
is in the way that

441
00:25:03.380 --> 00:25:06.200
I'm sure the BCL team
are, but it'll, it'll be

442
00:25:06.200 --> 00:25:09.440
interesting to see whether on
that specific feature, we can

443
00:25:09.440 --> 00:25:11.630
actually help perform the BCL.
I'm really hoping that we

444
00:25:11.630 --> 00:25:14.650
can. Well, it sounds like
if you're willing to put

445
00:25:14.650 --> 00:25:17.980
this much effort into improving.net,
that you definitely think that

446
00:25:17.980 --> 00:25:25.630
there's a future for.net. Yeah.
I, I really it's something

447
00:25:25.630 --> 00:25:28.600
I think about occasionally we
all talk about the COVID

448
00:25:28.620 --> 00:25:32.380
legacy, but I think that
again, there's going to be

449
00:25:32.380 --> 00:25:34.960
a huge legacy in the
future for all of these

450
00:25:34.960 --> 00:25:37.840
platforms, but it's not, it's
not going away. Jobs is

451
00:25:37.840 --> 00:25:40.810
not going away, Ruby and
points that aren't going away.

452
00:25:41.560 --> 00:25:45.910
I really feel for people
who graduate in say 30

453
00:25:45.910 --> 00:25:49.060
years time and have all
these systems, which by then

454
00:25:49.060 --> 00:25:51.400
maybe sort of legacy in
the same way that tubal

455
00:25:51.400 --> 00:25:54.790
is legacy, it will be
still be writing new C-sharp

456
00:25:54.820 --> 00:25:58.990
code in 30 years time.
Probably not, but there'll be

457
00:25:58.990 --> 00:26:01.360
a heck of a lot
of codes, mean things. So

458
00:26:01.750 --> 00:26:05.080
I see a rosy future
for less itself in the

459
00:26:05.080 --> 00:26:07.660
short term and in the
very long term, I'm sure

460
00:26:07.660 --> 00:26:09.850
it will still be around
to be maintained for a

461
00:26:09.850 --> 00:26:16.000
very long time. Indeed, That's
comforting as somebody that kind

462
00:26:16.000 --> 00:26:18.400
of makes their living on
community. That's kind of, that's

463
00:26:18.400 --> 00:26:21.130
pretty important to me. Do
you spend most of your

464
00:26:21.130 --> 00:26:24.430
time on, on stack overflow?
Is that what community is

465
00:26:24.430 --> 00:26:27.940
to you? That's where I
spend most of the plan

466
00:26:27.940 --> 00:26:31.210
that's I think of as
community. Yeah. So I do

467
00:26:31.210 --> 00:26:34.870
run, I do write my
own blog. And in some

468
00:26:34.870 --> 00:26:37.570
ways, I guess you could
call writing a book, a

469
00:26:37.570 --> 00:26:40.450
community activity. It feels solitary
for some of the time.

470
00:26:40.720 --> 00:26:43.890
Although for this second edition,
I've actually tried to get

471
00:26:43.890 --> 00:26:47.580
quite a lot of feedback
by asking questions in blog

472
00:26:47.580 --> 00:26:50.820
posts saying, Hey, how would
people feel about ditching this

473
00:26:50.820 --> 00:26:54.510
chapter or changing the focus
of another chapter and so

474
00:26:54.510 --> 00:26:56.460
on. So I've tried to
get as much feedback as

475
00:26:56.460 --> 00:26:59.670
I can early on in
the process. But other than

476
00:26:59.670 --> 00:27:03.090
that, yeah, I spend a
certain amount of time on

477
00:27:03.090 --> 00:27:07.620
stack overflow. Yeah. I learned
an awful lot just from

478
00:27:07.650 --> 00:27:10.500
trying to answer other people's
questions. I've done that for

479
00:27:10.680 --> 00:27:13.220
well, for as long as
I've been programming in Java

480
00:27:13.220 --> 00:27:15.920
and C seashell upsets me,
I you're still the number

481
00:27:15.920 --> 00:27:20.120
one person on stack overflow,
right? Yeah. And I was

482
00:27:20.120 --> 00:27:22.670
talking about this over breakfast
the other day. It's actually

483
00:27:22.700 --> 00:27:28.100
slightly tricky because I'm now
sufficiently far ahead. If someone

484
00:27:28.100 --> 00:27:32.600
joins stack overflow today. And
if I stopped posting today

485
00:27:32.630 --> 00:27:35.810
then because I've been posting
for nearly a year and

486
00:27:35.810 --> 00:27:38.030
a half, it would take
them a year and a

487
00:27:38.030 --> 00:27:41.600
half. If they posted the
same amount that I have

488
00:27:41.600 --> 00:27:45.980
been doing in order to
catch up. Sometimes I wonder

489
00:27:45.980 --> 00:27:48.500
whether there ought to be
some sort of Decatur reputation,

490
00:27:48.530 --> 00:27:51.260
but equally that doesn't make
sense. In other ways. It

491
00:27:51.260 --> 00:27:55.670
really depends on what you
regard reputation as Miguel by

492
00:27:55.680 --> 00:28:01.640
Casa was tweeting about this
just yesterday saying you really,

493
00:28:01.700 --> 00:28:07.040
there's no chance of beating
me. Well, beating me suggests

494
00:28:07.100 --> 00:28:09.350
it's a competition, which I
guess it is in some

495
00:28:09.350 --> 00:28:12.110
ways, but I think it
would do us all good

496
00:28:12.110 --> 00:28:16.700
to just regard reputation as
happy points. Well, yeah. But

497
00:28:16.700 --> 00:28:18.770
when you, when you have
a main page, that sorts

498
00:28:18.770 --> 00:28:22.910
by happy points, it's pretty.
Oh yeah, yeah, yeah. I

499
00:28:24.110 --> 00:28:28.610
maybe think of it as
a game and I'm competitive

500
00:28:28.730 --> 00:28:32.000
when I'm gaming, particularly like
I play board games quite

501
00:28:32.000 --> 00:28:37.370
a lot at lunchtime, so
yes, I certainly play for,

502
00:28:38.210 --> 00:28:41.030
I play to win when
I'm playing games, but at

503
00:28:41.030 --> 00:28:43.850
the same time you can
take it too seriously and

504
00:28:43.850 --> 00:28:46.340
it would be utterly pointless
to try to get the

505
00:28:46.350 --> 00:28:49.370
system to get more reputation
points just for the sake

506
00:28:49.370 --> 00:28:52.610
of getting more reputation points
at that point. You've really

507
00:28:52.940 --> 00:28:56.180
lost the whole nature of
why you're on stack overflow

508
00:28:56.180 --> 00:28:59.420
to start with, if, if
only it's all sort of

509
00:28:59.420 --> 00:29:02.450
question and someone else offices,
it certainly includes everything else

510
00:29:02.450 --> 00:29:05.720
that I've already written, then
I'll just delete my own.

511
00:29:05.720 --> 00:29:07.850
So there's no point in
keeping it there just to

512
00:29:08.090 --> 00:29:11.180
keep a bit of reputation.
The point is ultimately to

513
00:29:11.180 --> 00:29:13.970
help people as much as
possible and reputation is a

514
00:29:13.970 --> 00:29:16.880
fun game to play along
the way. Really. I think,

515
00:29:16.910 --> 00:29:19.070
I think for me, the
thing that's most significant about

516
00:29:19.070 --> 00:29:24.470
the kind of quote unquote
does stack overflow experience is

517
00:29:24.560 --> 00:29:27.740
the idea that a reputation
enables you to do other

518
00:29:27.740 --> 00:29:30.230
things. Not, not that it's
most interesting to be number

519
00:29:30.230 --> 00:29:32.210
one, but that it's interesting
to have some amount of

520
00:29:32.210 --> 00:29:35.000
effort into it because then
you get ability to moderate

521
00:29:35.000 --> 00:29:37.850
and the ability to self
self maintain. And that it's

522
00:29:37.850 --> 00:29:41.150
not just a, a bit,
a bit flipping, you're either

523
00:29:41.830 --> 00:29:44.860
a newbie or you've been
there, there's a gradient of

524
00:29:44.980 --> 00:29:48.820
various things that you can
unlock and that, and those

525
00:29:48.820 --> 00:29:51.100
things make the experience better.
And then you would continue

526
00:29:51.100 --> 00:29:55.290
on and it's a self
kind of self-maintaining system. Yeah.

527
00:29:55.350 --> 00:29:57.270
And even when you've unlocked
all the sort of special

528
00:29:57.270 --> 00:30:00.570
abilities, there are still the
patches and particularly with the

529
00:30:00.660 --> 00:30:04.410
tack badges. So when you've
had 400 upticks in a

530
00:30:04.410 --> 00:30:07.050
particular PAG, then you get
to silver badge for that.

531
00:30:07.050 --> 00:30:09.420
And if you get a
thousand votes in a particular

532
00:30:09.420 --> 00:30:13.110
tag, you get a gold
badge for that. I always

533
00:30:13.110 --> 00:30:15.600
found it particularly amusing, but
I was the first person

534
00:30:15.600 --> 00:30:18.600
to get a silver badge
for visual basic, which, you

535
00:30:18.600 --> 00:30:22.620
know, isn't a language that's
I regard myself as particularly

536
00:30:24.450 --> 00:30:28.440
certainty. And yet I got
to the silver badge. So

537
00:30:28.440 --> 00:30:30.150
that's in fact, I think,
I mean, now I'm just

538
00:30:30.150 --> 00:30:35.670
checking net. Yes. I now
have a gold badge in

539
00:30:35.670 --> 00:30:39.000
VB. If you ask me
to wait some VB, I

540
00:30:39.000 --> 00:30:42.390
would completely fail. I would
have to compose in C

541
00:30:42.390 --> 00:30:44.690
sharp code and then you
can play with them reflects

542
00:30:44.690 --> 00:30:49.140
or, or whatever. So it
doesn't mean to me, but

543
00:30:49.320 --> 00:30:52.170
that's just cause most, most
questions that people think of

544
00:30:52.170 --> 00:30:55.920
VB questions or actually just.net
questions with a VB accent.

545
00:30:57.330 --> 00:31:00.180
I like that one of
BB accent. Let me ask

546
00:31:00.180 --> 00:31:02.280
you this kind of in
closing, how much time are

547
00:31:02.290 --> 00:31:06.210
you spending on this really?
Oh, I couldn't measure it

548
00:31:06.210 --> 00:31:10.800
because I use it. I
tend to spend idle plane

549
00:31:11.220 --> 00:31:13.050
doing it. You know, how,
how much of the time

550
00:31:13.050 --> 00:31:16.650
do you spend breathing? Not
that I'm equating stack overflow

551
00:31:16.920 --> 00:31:19.470
reading from the unbook point.
That's ridiculous. But you know,

552
00:31:19.500 --> 00:31:21.900
it's just something you do
while you're waiting for other

553
00:31:21.900 --> 00:31:25.920
things. So if I'm waiting
for a complaint happen, whether

554
00:31:25.920 --> 00:31:28.110
that's at work or at
home, I'll just quickly check.

555
00:31:28.740 --> 00:31:33.180
If I'm just taking a
mental breather, I will check.

556
00:31:33.660 --> 00:31:36.990
And then often, usually even
there aren't any questions for

557
00:31:36.990 --> 00:31:39.150
me to have a look
at. And if there is,

558
00:31:39.180 --> 00:31:42.510
I'll take a quick look
at it. Maybe answer for

559
00:31:42.510 --> 00:31:45.990
a few minutes, sometimes on
a single question for half

560
00:31:45.990 --> 00:31:48.350
an hour or an hour,
I have occasionally puts it

561
00:31:48.350 --> 00:31:51.540
in quite a lot of
assets. So it's something that

562
00:31:52.590 --> 00:31:56.040
I spend a lot of
time looking at, but without

563
00:31:56.400 --> 00:31:58.500
wasting much of my time,
she, she was, I mean,

564
00:31:59.430 --> 00:32:03.900
I don't think anything else
would particularly take its place

565
00:32:03.930 --> 00:32:08.400
and make me more productive
or more useful to humanity

566
00:32:08.400 --> 00:32:11.070
in some other way. But
equally it does take a

567
00:32:11.070 --> 00:32:14.520
fair amount of my claim.
Yeah. Okay. But it's not,

568
00:32:14.550 --> 00:32:16.110
it's not like you sit
down and you think of

569
00:32:16.110 --> 00:32:18.900
this as a, a, a
piece of work that needs

570
00:32:18.900 --> 00:32:20.910
to be done. Like, all
right. Gotta pound through the

571
00:32:20.910 --> 00:32:24.390
stack overflow today. It's more
of a, it's your time

572
00:32:24.390 --> 00:32:27.930
filler. Yes. Yes, exactly. So
where some people would sort

573
00:32:27.930 --> 00:32:29.400
of have a game of
sort of attack because you've

574
00:32:29.400 --> 00:32:32.580
got three minutes to film.
For whatever reason you have

575
00:32:32.580 --> 00:32:36.630
a game of pool, his
hair, or you check Seco

576
00:32:37.080 --> 00:32:39.830
sex slash thoughts or whatever.
I tend check stock overflow.

577
00:32:40.640 --> 00:32:44.650
It's just one place to
sync sync my time. Well,

578
00:32:44.650 --> 00:32:46.990
I'm, I'm for one, I'm
glad that you're spending time

579
00:32:46.990 --> 00:32:50.470
over there because it's a
great community. And I enjoy

580
00:32:50.470 --> 00:32:54.850
reading. You're very thorough and
complete questions and answers. Yeah.

581
00:32:54.910 --> 00:32:58.810
It's fabulous. It really is
completely different as community goes

582
00:32:59.920 --> 00:33:02.770
to anything else I've seen.
So I know it looks

583
00:33:02.770 --> 00:33:06.070
a bit like experts exchange.
Yeah. There's the whole it's

584
00:33:06.070 --> 00:33:09.280
experts exchange without the evil,
without having looked at experts,

585
00:33:09.280 --> 00:33:11.830
exchange myself much. I don't
know how evil it really

586
00:33:11.830 --> 00:33:15.730
is, but there we go.
But even compared with newsgroups,

587
00:33:16.330 --> 00:33:19.720
the reaction time is so
fast. So it used to

588
00:33:19.720 --> 00:33:22.630
be on these groups. We
would say, okay, if you

589
00:33:22.630 --> 00:33:26.230
don't hear back within a
day, then it's reasonable to

590
00:33:27.310 --> 00:33:31.660
ping and say, have I
missed something? Did I not

591
00:33:31.780 --> 00:33:35.350
give enough information, et cetera
on sucker, if you haven't

592
00:33:35.350 --> 00:33:39.490
heard back within half an
hour, then I'd be surprised

593
00:33:39.550 --> 00:33:42.910
normally when I've asked questions.
And obviously if, if I'm

594
00:33:42.910 --> 00:33:48.550
asking a question, it tends
to be fairly concentrative or

595
00:33:48.790 --> 00:33:51.790
something about C-sharp fall, but
not many people would have

596
00:33:51.940 --> 00:33:55.600
gone into a particular corner
even. So I got very,

597
00:33:55.600 --> 00:33:59.590
very quickly. It really is
an amazing resource. I think

598
00:33:59.590 --> 00:34:05.380
it's really changing how people
can program and the fact

599
00:34:05.380 --> 00:34:09.520
that it's so wide that
it doesn't just focus on

600
00:34:09.520 --> 00:34:12.130
botnet, but it doesn't just
focus on Java. Yeah. I've

601
00:34:12.130 --> 00:34:14.980
got some really big questions.
I've seen a question I

602
00:34:14.990 --> 00:34:19.000
thought with a bit of
research. So I'm gonna go

603
00:34:19.000 --> 00:34:22.060
ahead, found out what a
certain operator does or have

604
00:34:22.060 --> 00:34:24.760
something to haze. And I've
learned a bit of Ruby.

605
00:34:25.390 --> 00:34:28.090
I'm not a review Reuben
programmers. I would never have

606
00:34:28.180 --> 00:34:31.420
picked it up if I
hadn't seen that question, obviously

607
00:34:31.420 --> 00:34:32.650
I could have done it
for like going out of

608
00:34:32.650 --> 00:34:34.520
my way. I'm sure there
are a great group of

609
00:34:34.560 --> 00:34:37.420
associates, but the fact that
stack overflow just throws them

610
00:34:37.420 --> 00:34:41.740
all together. It means just
that bit more incentive to

611
00:34:41.740 --> 00:34:46.270
learn something beyond that. Yeah.
I love it. I love

612
00:34:46.270 --> 00:34:48.640
it. Thank you so much,
John skeet for talking to

613
00:34:48.640 --> 00:34:51.640
us today on our 200
show council minutes. I really

614
00:34:51.640 --> 00:34:57.700
appreciate, Well, this is show
200 another episode of Hansel

615
00:34:57.700 --> 00:34:59.200
minutes and I'll see you
again next week.

