WEBVTT FILE

1
00:00:00.660 --> 00:00:02.550
Hey friends, this is Scott.
I want you to know

2
00:00:02.550 --> 00:00:04.980
how much I appreciate you
as listeners. And I hope

3
00:00:04.980 --> 00:00:08.220
you appreciate my sponsors because
they make the show possible.

4
00:00:08.910 --> 00:00:12.840
Raygun provides full stack error,
crash, and performance monitoring for

5
00:00:12.840 --> 00:00:16.140
tech teams. Whether you're a
software engineer looking to diagnose

6
00:00:16.140 --> 00:00:18.990
and resolve issues with greater
speed and accuracy or a

7
00:00:18.990 --> 00:00:21.480
product manager drowning in bug
reports, or maybe you're just

8
00:00:21.480 --> 00:00:25.950
concerned. You're losing customers to
poor quality online experiences. Raygun

9
00:00:25.980 --> 00:00:28.890
can provide you with the
answers, get full stack error

10
00:00:28.890 --> 00:00:31.920
and performance monitoring in one
place. The next time you're

11
00:00:31.920 --> 00:00:34.530
struggling to replicate errors and
performance issues and your code

12
00:00:34.530 --> 00:00:38.670
base think Raygun head over
to raygun.com. That's R a

13
00:00:38.670 --> 00:00:41.970
Y G U n.com and
get up and running within

14
00:00:41.970 --> 00:00:45.180
minutes and dramatically improve your
online experiences of your users.

15
00:00:50.300 --> 00:01:00.890
<inaudible> This is Scott Hanselman.
This is another episode of

16
00:01:00.890 --> 00:01:03.620
Hansel minutes. And today I'm
talking with dr. Neil Brown.

17
00:01:03.620 --> 00:01:06.800
He's a research fellow at
Kings college in London. How

18
00:01:06.800 --> 00:01:09.140
are you, sir? I'm fine.
Thank you. How are you?

19
00:01:09.740 --> 00:01:12.890
I'm lovely. And I'm always
excited to talk about teaching

20
00:01:12.890 --> 00:01:18.380
programming and you recently published
a paper in the, in

21
00:01:18.380 --> 00:01:22.250
a computational biology paper on
10 quick tips for teaching

22
00:01:22.250 --> 00:01:25.370
programming, which almost sounds like
a fun blog post and

23
00:01:25.370 --> 00:01:29.120
not a formal paper as
a title. Yeah, it's a,

24
00:01:29.120 --> 00:01:31.850
it's nice actually to write
a sort of summary paper.

25
00:01:31.850 --> 00:01:35.630
So none of this is
particularly our, our own research,

26
00:01:35.660 --> 00:01:37.160
but just to try and
write a summary for a

27
00:01:37.160 --> 00:01:41.570
general audience of how to,
how to teach programming. And

28
00:01:41.570 --> 00:01:44.810
this is a kind of
a summary of research around

29
00:01:44.810 --> 00:01:48.860
the space of educational psychology.
Like how people's brains absorb,

30
00:01:48.890 --> 00:01:53.060
how teachers should teach, how
children learn a subject specific

31
00:01:53.060 --> 00:01:57.500
activities. Yeah, that's right. So
what important sort of result

32
00:01:57.500 --> 00:02:01.850
from from education is that
each discipline is sort of

33
00:02:01.850 --> 00:02:04.970
learnt in a, in a
domain specific way. So there's

34
00:02:04.970 --> 00:02:08.300
a bunch of general education
or sort of teaching tips,

35
00:02:08.330 --> 00:02:11.420
but a lot of the
ones that are very useful

36
00:02:11.420 --> 00:02:14.660
are domain specific. So how
you teach mathematics is different

37
00:02:14.660 --> 00:02:17.060
than how you teach programming
is different than how you

38
00:02:17.060 --> 00:02:20.600
teach science and computing doesn't
really have as long a

39
00:02:20.600 --> 00:02:22.850
history as some of the
other subjects. So we wanted

40
00:02:22.850 --> 00:02:25.520
to try and get together
some of the tips that

41
00:02:25.520 --> 00:02:28.640
people have researched and have
shown work to try and

42
00:02:28.640 --> 00:02:30.890
sort of educate some of
the computing teachers out there

43
00:02:32.420 --> 00:02:35.810
is, is there one way
or one more correct way

44
00:02:35.810 --> 00:02:38.960
to teach something? Because it
seems like there's, we've learned

45
00:02:38.960 --> 00:02:42.110
about different learning styles, acoustic
learners, and visual learners and

46
00:02:42.110 --> 00:02:46.940
kinesthetic learners. How can we
say this is the right

47
00:02:46.940 --> 00:02:50.300
way to teach programming? So,
so interestingly, the, the learning

48
00:02:50.300 --> 00:02:53.930
styles thing has generally not
been supported by research. So,

49
00:02:53.930 --> 00:02:58.070
so that one hasn't actually
been found to be reliable,

50
00:02:59.440 --> 00:03:02.830
but more Generally that there
isn't usually a correct, you

51
00:03:02.830 --> 00:03:04.510
know, a single correct way
to teach it all sort

52
00:03:04.510 --> 00:03:06.970
of comes down to percentages.
To some extent, you know,

53
00:03:06.970 --> 00:03:10.990
this seems to be reasonably
effective. This may be slightly

54
00:03:10.990 --> 00:03:14.050
less effective. There aren't that
many techniques that are sort

55
00:03:14.050 --> 00:03:18.430
of horrifically ineffective, and they
generally aren't in use in

56
00:03:18.430 --> 00:03:21.250
practical settings. So we're not
out to say this is

57
00:03:21.250 --> 00:03:23.710
the one way to teach,
but we want to say

58
00:03:23.890 --> 00:03:26.530
this has been found to
be effective. You know, maybe

59
00:03:26.530 --> 00:03:29.020
you should consider it in
your context if, if that

60
00:03:29.020 --> 00:03:31.890
makes sense. Hmm. I see.
So this isn't a list

61
00:03:31.890 --> 00:03:36.480
of commandments. There's really not
a list of directors and

62
00:03:36.570 --> 00:03:40.320
it's tips mostly like consider
this there's evidence that supports

63
00:03:40.320 --> 00:03:44.040
it. Yeah. Teachers, you know,
we talked to teachers, they

64
00:03:44.040 --> 00:03:46.500
don't like anyone coming in
and saying, you know, this

65
00:03:46.500 --> 00:03:49.050
is how you must do
it. They want to sort

66
00:03:49.050 --> 00:03:51.090
of have ideas that they
can weave into their own

67
00:03:51.090 --> 00:03:55.170
teaching. Maybe they've got students
where pair programming is, is

68
00:03:55.320 --> 00:03:57.090
not going to have sort
of Pat out very well.

69
00:03:57.700 --> 00:03:59.610
And so they want to
drop that tip. Maybe they've

70
00:03:59.610 --> 00:04:01.230
got a setting where they
think it would work really

71
00:04:01.230 --> 00:04:03.330
well. So it's up to
them to, to actually put

72
00:04:03.330 --> 00:04:06.900
it into place. The first
tip. And I think kind

73
00:04:06.900 --> 00:04:09.180
of the one that hits
the hardest is that you

74
00:04:09.180 --> 00:04:13.110
say, remember, there's no geek
gene because in this, in

75
00:04:13.110 --> 00:04:16.290
this world right now in
2018, we're, we're trying to

76
00:04:16.290 --> 00:04:21.570
foster an inclusive environment where
it's not just kind of

77
00:04:21.690 --> 00:04:27.150
old white dudes doing computing.
And just as I mentioned

78
00:04:27.150 --> 00:04:31.020
before, about, about learning styles,
it intuitively feels like that

79
00:04:31.020 --> 00:04:33.810
is, that is a thing.
And you said that the

80
00:04:33.810 --> 00:04:36.810
research doesn't support it. It
intuitively does feel like some

81
00:04:36.810 --> 00:04:39.750
people are, are geeks. And
you're saying the research doesn't

82
00:04:39.750 --> 00:04:42.720
show that. Yeah. So there's
this long been this idea

83
00:04:42.720 --> 00:04:45.810
in computer education of a
bimodal distribution that you've got

84
00:04:46.260 --> 00:04:48.330
the people that get low
marks and just don't get

85
00:04:48.330 --> 00:04:50.460
it. So the people who
got high marks and do

86
00:04:50.460 --> 00:04:53.700
get it, and you know,
I've done some programming teaching

87
00:04:53.700 --> 00:04:55.620
myself at the past, or
do you know, you see

88
00:04:55.620 --> 00:04:57.870
some people who are struggling
and it's very tempting to

89
00:04:57.870 --> 00:05:00.510
just basically give up on
them and say, they're just

90
00:05:00.510 --> 00:05:02.280
not going to get it
while the person next to

91
00:05:02.280 --> 00:05:05.070
them, for some reason just
seems to be flying at

92
00:05:05.070 --> 00:05:08.340
you. Like yeah, they get
it. What the research seems

93
00:05:08.340 --> 00:05:10.770
to suggest is there, isn't
actually as big a difference

94
00:05:10.770 --> 00:05:13.650
as people think. And there's
a sort of interaction with

95
00:05:13.650 --> 00:05:16.680
teacher belief. So people who
think that way, that either

96
00:05:16.680 --> 00:05:18.960
you do get it, or
you don't get it, they'll

97
00:05:18.960 --> 00:05:20.940
tend to lend less support
for the ones who don't

98
00:05:20.940 --> 00:05:23.160
get it. Cause you know,
it, it is more frustrating

99
00:05:23.160 --> 00:05:26.100
to teach somebody who's struggling
with a subject is kind

100
00:05:26.100 --> 00:05:29.160
of more awarding if somebody
is really leaping on themselves,

101
00:05:29.190 --> 00:05:31.560
but they don't actually need
the teaching so much the

102
00:05:31.560 --> 00:05:32.970
ones who need the teaching
and the ones who are

103
00:05:32.970 --> 00:05:36.300
doing worse. And so what
the research seems to suggest

104
00:05:36.300 --> 00:05:38.520
is if you, if you
seek, they're not going to

105
00:05:38.520 --> 00:05:40.500
make it, you maybe give
up on them a bit

106
00:05:40.500 --> 00:05:43.710
more and perhaps encourage more
of this sort of bi-modal

107
00:05:43.710 --> 00:05:46.620
distribution, but it's really not
as wide a separation. As,

108
00:05:47.070 --> 00:05:51.210
as people seem to think.
Interesting in the back in

109
00:05:51.210 --> 00:05:54.600
the nineties, there was a
controversy when a Barbie doll

110
00:05:54.600 --> 00:05:57.290
came out where you pull
the string on barmy Barbie's

111
00:05:57.290 --> 00:06:01.880
back and Barbie said math
is hard. And when someone

112
00:06:01.910 --> 00:06:05.810
gets that in their head,
early on, math is hard,

113
00:06:05.870 --> 00:06:08.270
then they've decided it is
like, for example, I did

114
00:06:08.270 --> 00:06:12.740
poorly in calculus and I
starting to realize with, you

115
00:06:12.740 --> 00:06:17.450
know, the hindsight behind me
that they had built up

116
00:06:17.480 --> 00:06:20.030
calculus as being the most
scary thing. It was the

117
00:06:20.030 --> 00:06:23.090
peak of my high school
career. And, you know, hope

118
00:06:23.090 --> 00:06:26.300
you survive calculus. I think
that if I had been

119
00:06:26.300 --> 00:06:28.460
told from age 10 that
it was going to be

120
00:06:28.460 --> 00:06:31.100
a great fun, positive thing,
it might've changed my attitude.

121
00:06:31.790 --> 00:06:34.520
Yeah. And I think people
can get early impressions of

122
00:06:34.520 --> 00:06:36.980
the subject that will make
a big difference if they

123
00:06:36.980 --> 00:06:39.650
think, Oh, this is hard.
Or this is, you know,

124
00:06:39.650 --> 00:06:43.040
very intricate and technical or
this is difficult. And there's

125
00:06:43.040 --> 00:06:46.310
various sort of more social
teaching tips that we perhaps

126
00:06:46.310 --> 00:06:49.490
didn't include him. But Greg
Wilson who's my Coldwell sir,

127
00:06:49.490 --> 00:06:51.590
is a sort of fan
of them. People saying things

128
00:06:51.590 --> 00:06:54.830
like, Oh, just do this.
You recommend spanning the word

129
00:06:54.860 --> 00:06:57.560
just because it makes it
sound like it's, it's so

130
00:06:57.560 --> 00:07:00.980
simple, you know, why didn't
you just do that? But

131
00:07:01.010 --> 00:07:03.200
the language can make a
difference. So rather than try.

132
00:07:03.200 --> 00:07:06.140
And so the penalize people
for not understanding the early

133
00:07:06.140 --> 00:07:08.960
concepts, just teach some of
the early concepts and support

134
00:07:08.960 --> 00:07:11.810
them in what they're doing.
Don't make some feel sort

135
00:07:11.810 --> 00:07:14.390
of small lifts. They, they
don't immediately take to it.

136
00:07:16.040 --> 00:07:18.770
I appreciate that. You said
that because I I've tweeted

137
00:07:18.980 --> 00:07:21.740
just before. And it seems
like just, and well actually

138
00:07:22.060 --> 00:07:23.990
seemed to be like the
words of the day right

139
00:07:23.990 --> 00:07:26.720
now. It's so, so often
someone will say, why didn't

140
00:07:26.720 --> 00:07:29.630
you just, you know, do
a whatever kind of obscure

141
00:07:29.630 --> 00:07:32.930
bubble short. And then it's
like, wow, there's so much

142
00:07:33.170 --> 00:07:36.770
to unpack in that one
sentence where you minimize me,

143
00:07:36.860 --> 00:07:38.510
told me I was a
dumb and then told me

144
00:07:38.510 --> 00:07:42.200
something I don't understand to
use instead just really is

145
00:07:42.330 --> 00:07:46.760
the, the evil in teaching.
And I find myself saying

146
00:07:46.760 --> 00:07:49.220
just, but when you put
this little thought into somebody's

147
00:07:49.220 --> 00:07:51.830
mind, don't say it. Then
when you do find yourself

148
00:07:51.830 --> 00:07:54.800
saying it, you actually sort
of reconsider, Oh, am I

149
00:07:54.800 --> 00:07:57.860
doing that saying, you know,
it's hard to change your

150
00:07:57.860 --> 00:08:00.380
speech. And it's hard to
sort of rule out doing

151
00:08:00.380 --> 00:08:01.850
things like that. But if
you can just be a

152
00:08:01.850 --> 00:08:04.550
little bit more aware of
it, it just helps a

153
00:08:04.550 --> 00:08:10.130
heart just, yeah, exactly. Does
it matter though, like if

154
00:08:10.400 --> 00:08:13.400
I was talking with my
wife about my son is

155
00:08:13.400 --> 00:08:16.220
struggling with some aspects of
math right now and where

156
00:08:16.560 --> 00:08:20.510
we're struggling because he's lazy,
you know, he's not, he's

157
00:08:20.510 --> 00:08:23.900
just basically sloppy. He's being
sloppy. And in order to

158
00:08:23.900 --> 00:08:26.120
save five minutes or, you
know, in order to he,

159
00:08:26.120 --> 00:08:28.920
so he can play, like
he, he, he, he, he,

160
00:08:29.050 --> 00:08:30.560
he rushes through it. And
then of course we have

161
00:08:30.560 --> 00:08:32.450
to go over his test,
which takes double the time.

162
00:08:32.690 --> 00:08:34.370
So we're trying to explain
to him, if you put

163
00:08:34.370 --> 00:08:37.460
five minutes more checking of
your work, then you will

164
00:08:37.460 --> 00:08:40.280
save yourself like an hour
of going over this later.

165
00:08:40.760 --> 00:08:43.910
And we were trying to
figure how to phrase it.

166
00:08:44.540 --> 00:08:47.660
And we are going back
and forth about how, how

167
00:08:47.660 --> 00:08:50.300
gentle we should be, how
encouraging we should be versus

168
00:08:50.300 --> 00:08:53.720
how crisp we have to
be. Like, you need to,

169
00:08:53.990 --> 00:08:55.680
you need to focus on
this need, like, you know,

170
00:08:55.680 --> 00:08:59.940
tough love as they say,
how important is the language

171
00:08:59.940 --> 00:09:02.610
that we use to encourage
someone and make them succeed?

172
00:09:03.560 --> 00:09:05.960
Yeah. There have been some
bits of research suggested it

173
00:09:05.960 --> 00:09:08.030
can be, make a difference.
And I think it often

174
00:09:08.030 --> 00:09:11.660
makes a difference if people
are more nervous, you know,

175
00:09:11.660 --> 00:09:13.760
to begin with about perhaps
if they're in a course,

176
00:09:13.760 --> 00:09:15.920
for example, about taking the
course. So that may be

177
00:09:15.920 --> 00:09:18.890
that sort of minorities are
a little bit more nervous

178
00:09:18.890 --> 00:09:21.380
about whether they fit in.
So they're more easily put

179
00:09:21.380 --> 00:09:23.780
off by some of these
sort of language issues, whereas

180
00:09:23.780 --> 00:09:27.020
people who are maybe have
some natural confidence and think

181
00:09:27.020 --> 00:09:29.420
they're going to get it,
it maybe doesn't make that

182
00:09:29.630 --> 00:09:31.610
sort of much difference to
them. So you just have

183
00:09:31.610 --> 00:09:34.490
to judge a person by
person basis. I think, is

184
00:09:34.490 --> 00:09:37.460
this a person who I'm
really going to knock if

185
00:09:37.460 --> 00:09:39.620
I give them some tough
love or is it someone

186
00:09:39.620 --> 00:09:43.210
who's overconfidence? And you just
say, you've got to, you've

187
00:09:43.210 --> 00:09:44.960
got to sort this out
and you can just say

188
00:09:44.960 --> 00:09:47.420
something quite Frank to them
and they'll take it on

189
00:09:47.420 --> 00:09:50.480
board. Yeah, that's a good
point. And the last is

190
00:09:50.480 --> 00:09:52.070
the last thing we want
to do is push someone

191
00:09:52.070 --> 00:09:55.610
out of, of the industry
or out of interest within

192
00:09:55.610 --> 00:09:58.490
a topic by being, you
know, by, by too much

193
00:09:58.490 --> 00:10:01.610
tough love. But at the
same time that does require

194
00:10:01.610 --> 00:10:03.710
work. It is a challenge.
Yeah. And that's come up

195
00:10:03.710 --> 00:10:05.870
recently, I think with some
of these discussions about stack

196
00:10:05.870 --> 00:10:08.750
overflow as to whether, you
know, what kind of attitudes

197
00:10:08.750 --> 00:10:12.740
that promotes to people that
people on there can sometimes

198
00:10:12.740 --> 00:10:15.680
be quite sort of dismissive
or come across a bit

199
00:10:15.680 --> 00:10:18.680
more confrontational than they mean
to. And for some people

200
00:10:18.680 --> 00:10:21.050
that's fine. They love it.
They thrive on it and

201
00:10:21.380 --> 00:10:23.510
you know, they're happy with
that. And for other people,

202
00:10:23.510 --> 00:10:25.820
it really puts them off.
And the problem with the

203
00:10:25.820 --> 00:10:28.100
internet is when you write
a public post, you've no

204
00:10:28.100 --> 00:10:29.960
idea who's on the other
end reading it. So it's

205
00:10:29.960 --> 00:10:33.680
quite difficult to pitch pitch
your sort of a tone.

206
00:10:33.680 --> 00:10:37.820
Right. I think, Yeah, it
absolutely is. And you know,

207
00:10:37.820 --> 00:10:40.590
one person might say, well,
yeah, you know, go and

208
00:10:40.590 --> 00:10:42.350
do the work, learn it,
suck it up. And another

209
00:10:42.350 --> 00:10:44.840
person might say, yeah. And
that was the stack overflow

210
00:10:44.840 --> 00:10:47.570
post that made me realize
that people in computing are

211
00:10:47.570 --> 00:10:49.190
not nice and I'm going
to go do another, The

212
00:10:49.190 --> 00:10:53.660
whole industry. Yeah, yeah. Quite.
Yeah. Yeah. You also propose

213
00:10:53.660 --> 00:10:57.530
that peer instruction, not just,
you know, teacher to student,

214
00:10:57.530 --> 00:11:00.680
but one-on-one tutoring, you know,
of course it certainly, if

215
00:11:00.680 --> 00:11:02.630
the teacher can focus on
the student entirely, that'd be

216
00:11:02.630 --> 00:11:06.080
great. But an opportunity there
is to take the other

217
00:11:06.080 --> 00:11:10.160
students and pair them up
in a Appropriate, appropriate levels

218
00:11:10.160 --> 00:11:12.620
of skill and they can
push each other forward. Yeah.

219
00:11:12.620 --> 00:11:14.540
The other part of this
comes from a sort of

220
00:11:14.720 --> 00:11:18.440
modern interest in really scaling
up education. Especially a few

221
00:11:18.440 --> 00:11:21.170
years ago, MOOCs were thought
to be the answer, you

222
00:11:21.170 --> 00:11:23.630
know, how do you scale
up education? Whether you have

223
00:11:23.630 --> 00:11:25.730
one set of materials and
then you just have these

224
00:11:25.730 --> 00:11:29.540
sort of thousands and thousands
of learners, you know, reading

225
00:11:29.550 --> 00:11:32.740
materials and sort of operating
on them independently that seems

226
00:11:32.740 --> 00:11:35.570
to produce sort of quite
high dropout rates. So there's

227
00:11:35.570 --> 00:11:39.110
the question of whether that's
maybe ideal, we get this,

228
00:11:39.110 --> 00:11:41.600
even in sort of traditional
higher education, you might have

229
00:11:41.600 --> 00:11:46.670
a lecture theater of 200,
300 students in someplace. And

230
00:11:47.000 --> 00:11:49.430
you know, how could you
scale that? Obviously the, you

231
00:11:49.430 --> 00:11:51.650
can have one lecturer standing
at the front talking to

232
00:11:51.650 --> 00:11:54.850
them all, but they can't
give individualized feedback to 300

233
00:11:54.850 --> 00:11:58.780
students during the lecture. So
peer instruction was an idea

234
00:11:58.780 --> 00:12:00.760
to try and make it
a bit more interactive and

235
00:12:00.760 --> 00:12:03.910
a bit more scalable that
you join these people into

236
00:12:03.910 --> 00:12:06.010
maybe groups of three who
are sitting next to each

237
00:12:06.010 --> 00:12:09.070
other. You perhaps ask them
a question like here's a,

238
00:12:09.190 --> 00:12:11.740
here's a piece of C
code, what's it going to

239
00:12:11.740 --> 00:12:14.200
produce? And do you have
a particularly sort of tricky

240
00:12:14.200 --> 00:12:17.500
one with, you know, an
intricate quarter case so that

241
00:12:17.500 --> 00:12:19.930
people might get it wrong,
they might get it right.

242
00:12:20.080 --> 00:12:24.310
You then get people to
predict the answer and following

243
00:12:24.400 --> 00:12:26.950
the prediction, you get them
to discuss with their neighbors,

244
00:12:27.280 --> 00:12:29.530
why they made the prediction.
Obviously it works best if

245
00:12:29.530 --> 00:12:32.830
they've made different predictions and
to discuss and talk among

246
00:12:32.830 --> 00:12:35.360
themselves about why they might
be right or wrong. And

247
00:12:35.360 --> 00:12:39.220
then that way you get
individualized feedback on your misconceptions,

248
00:12:39.850 --> 00:12:42.370
in a room potentially of
any size, because you've got

249
00:12:42.370 --> 00:12:45.040
people talking to each other
and trying to work through

250
00:12:45.040 --> 00:12:48.400
it together. So it's quite
an interesting idea on how

251
00:12:48.400 --> 00:12:53.130
to sort of scale up
learning ethic. And just for

252
00:12:53.130 --> 00:12:55.230
people who may have missed
it at the beginning of

253
00:12:55.230 --> 00:13:00.120
that paragraph, you said, move
massively, open online courses, M

254
00:13:00.120 --> 00:13:03.780
O C, this idea that
we can somehow Le let

255
00:13:03.780 --> 00:13:06.720
everyone learn. If they just
go online, join these massive

256
00:13:06.750 --> 00:13:10.650
online courses, which are fairly
homogeneous in the way that

257
00:13:10.650 --> 00:13:12.660
they teach. I mean, you're
in a browser already. You're

258
00:13:12.660 --> 00:13:17.130
online already. You're not really
getting one-on-one experience, but it

259
00:13:17.130 --> 00:13:21.810
wasn't attempt to, to get
to scale learning in the

260
00:13:21.810 --> 00:13:24.810
computer science. Yes. Yeah. I
think it's perhaps fair to

261
00:13:24.810 --> 00:13:27.930
say they haven't, they were
over-hyped to begin with. I

262
00:13:27.930 --> 00:13:30.090
think they potentially have a
role, but that there was

263
00:13:30.090 --> 00:13:33.360
a sort of thought that
they would completely replace universities.

264
00:13:33.360 --> 00:13:35.910
And obviously I'm, I'm biased.
I work at a university,

265
00:13:35.910 --> 00:13:38.670
but I think that's, that's
not going to happen. I

266
00:13:38.670 --> 00:13:42.060
think there'll be a space
for sort of more informal

267
00:13:42.060 --> 00:13:44.670
learning along the lines of
these MOOCs and, and for

268
00:13:44.670 --> 00:13:48.930
more formal learning still. Well,
one of the things that

269
00:13:48.930 --> 00:13:52.110
I found the most useful
about formal learning about sitting

270
00:13:52.110 --> 00:13:55.830
down and like, you know,
taking an electrical engineering class

271
00:13:55.830 --> 00:13:59.280
and building a clock from
scratch using and Gates and

272
00:13:59.280 --> 00:14:01.770
Oregon dates and, you know,
that kind of stuff was,

273
00:14:01.770 --> 00:14:04.410
it helped me get a
sense of the big picture,

274
00:14:04.950 --> 00:14:07.200
but I'm afraid. I realized
that as a, as a

275
00:14:07.200 --> 00:14:11.460
programmer in my forties, I
have the benefit of history

276
00:14:11.460 --> 00:14:16.500
behind me. I've seen, you
know, Moore's law build layers

277
00:14:16.500 --> 00:14:18.390
on top of layers. I've
gone from C to C

278
00:14:18.390 --> 00:14:21.120
plus plus to C sharp.
And I've done Java as

279
00:14:21.120 --> 00:14:23.250
I moved my way up
the stack. There's a new

280
00:14:23.250 --> 00:14:26.040
generation of developer out there
who thinks that Java script

281
00:14:26.040 --> 00:14:28.860
is the metal and they're
coding on the metal at

282
00:14:28.860 --> 00:14:31.710
the low, the lowest level
of JavaScript, but they've got

283
00:14:31.710 --> 00:14:36.030
three virtual machines between them
and the actual metal. Is

284
00:14:36.030 --> 00:14:39.360
that okay? Am I just
a crusty old programmer? And

285
00:14:39.360 --> 00:14:41.130
I, that I feel that
people should learn the whole

286
00:14:41.130 --> 00:14:45.570
stack or is there some
concept, a mental model that

287
00:14:45.930 --> 00:14:48.210
people should have to be
an effective development? Yeah, I

288
00:14:48.210 --> 00:14:50.730
think it's still an open
question. It comes to an

289
00:14:50.730 --> 00:14:54.470
issue research that's called the
notional machine, which is any

290
00:14:54.470 --> 00:14:57.440
programmer who's writing a program
needs to be able to

291
00:14:57.440 --> 00:15:00.740
basically model in their head.
What's going to happen when

292
00:15:00.740 --> 00:15:04.190
the program runs so that
you, you have the code

293
00:15:04.190 --> 00:15:06.530
and then you've got this
notional machine in your minds

294
00:15:06.530 --> 00:15:10.010
that you essentially using to
run the code and obviously

295
00:15:10.010 --> 00:15:14.330
problems arise. If your notional
machine has a mismatch to

296
00:15:14.330 --> 00:15:17.930
the actual sort of machine.
And perhaps early on that

297
00:15:17.930 --> 00:15:21.590
can come down to semantics
that you don't realize exactly

298
00:15:21.590 --> 00:15:23.990
what the instruction will do.
I think it often crops

299
00:15:23.990 --> 00:15:27.110
up in professional programming in
relation to things like performance

300
00:15:27.710 --> 00:15:30.020
and whether people who have
got an idea of what

301
00:15:30.020 --> 00:15:34.340
might be quick or what
might be slow in their

302
00:15:34.340 --> 00:15:36.620
sort of notional machine and
whether that actually matches to

303
00:15:36.620 --> 00:15:39.380
what's quick or slow in
the, in the real machine.

304
00:15:41.650 --> 00:15:45.280
Yeah. That brings up that
idea of assumptions, right? And

305
00:15:45.310 --> 00:15:48.550
like at the beginning of
our stay, our conversation, I

306
00:15:48.550 --> 00:15:50.380
made a couple of assumption.
You said, well, the research

307
00:15:50.380 --> 00:15:53.200
doesn't support that I can
make all kinds of assumptions

308
00:15:53.200 --> 00:15:56.800
about performance, about memory, about
disk. I could build an

309
00:15:56.800 --> 00:15:59.230
entire system and then realize,
Oh, my discs are slower

310
00:15:59.230 --> 00:16:02.200
than I thought they were.
And that, that assumption is

311
00:16:02.200 --> 00:16:05.290
now, you know, the base
of a house of cards

312
00:16:05.290 --> 00:16:07.870
for my entire semester. We
see this in some of

313
00:16:07.870 --> 00:16:10.210
our learners, sometimes a very
prevalent one is that people

314
00:16:10.210 --> 00:16:13.840
come in with notions about,
for example, you wrote a

315
00:16:13.840 --> 00:16:16.810
full loop in C and
you've got the I plus

316
00:16:16.840 --> 00:16:19.240
plus at the end, you
know, I hear sometimes from

317
00:16:19.240 --> 00:16:22.690
our students, although plus plus
I is quicker or like

318
00:16:22.720 --> 00:16:25.570
I plus plus is quicker
than I plus equals one.

319
00:16:27.040 --> 00:16:30.040
These sort of very fine
grain differences these days with

320
00:16:30.040 --> 00:16:32.470
a modern compiler. There's not
going to be a difference

321
00:16:32.470 --> 00:16:36.100
between any of those three
variants, but they have this

322
00:16:36.100 --> 00:16:40.750
notion machine. That's actually a
mismatch for the modern machine.

323
00:16:40.810 --> 00:16:42.280
And I think this is
starting to come to the

324
00:16:42.280 --> 00:16:44.740
fore more and more now
with see even which people

325
00:16:44.740 --> 00:16:48.370
think of as bare metal.
They're realizing actually the C

326
00:16:48.370 --> 00:16:51.430
notional machine doesn't correspond to
what your processor is doing.

327
00:16:52.000 --> 00:16:54.010
You know, very much at
all things like the spectrum

328
00:16:54.020 --> 00:16:57.820
meltdown bug are related to
how the processor actually works,

329
00:16:57.820 --> 00:17:01.840
but that's nowhere near most
people's C notional machine, which

330
00:17:01.840 --> 00:17:06.280
they think of as bare
metal. That's really interesting. I

331
00:17:06.280 --> 00:17:09.340
mean, I think that the
Spectre and meltdown bug was

332
00:17:09.730 --> 00:17:13.390
a shakeup of the entire
world's sense of, of their

333
00:17:13.390 --> 00:17:16.810
notional machine. We all thought
it worked this way, but

334
00:17:16.810 --> 00:17:19.390
then I assume you had
the same experience I did.

335
00:17:19.390 --> 00:17:22.750
Where a couple of days
after you kind of absorbed

336
00:17:22.750 --> 00:17:25.720
the bug and slept on
the bug, You thought to

337
00:17:25.720 --> 00:17:27.910
yourself, Oh, well, how could
this, I've never worked. Of

338
00:17:27.910 --> 00:17:30.760
course, this is, you know,
it's a huge problem. Like

339
00:17:30.760 --> 00:17:33.940
when we finally grokked what
was going on, I could

340
00:17:33.940 --> 00:17:36.790
feel it in my chest.
Like, Oh no. How did

341
00:17:36.790 --> 00:17:39.880
no one think about this?
Because we just At a

342
00:17:39.880 --> 00:17:41.830
different idea in our head
about what the machine was

343
00:17:41.830 --> 00:17:45.970
doing. Yeah, I think so.
Hey friends, this is Scott,

344
00:17:45.970 --> 00:17:48.070
and I've got a word
from a new sponsor and

345
00:17:48.070 --> 00:17:51.270
a really cool sponsor fact
that I use myself. They

346
00:17:51.270 --> 00:17:54.120
are Sikh that's S E
Q, and you can check

347
00:17:54.120 --> 00:17:58.170
them out at, get sikh.net.
That's G E T S

348
00:17:58.200 --> 00:18:01.860
E q.net seek is the
easiest way for your team

349
00:18:01.860 --> 00:18:06.450
to capture and search and
visualize structured log events. You

350
00:18:06.450 --> 00:18:08.610
probably do logging. Maybe you
have a note app or

351
00:18:08.610 --> 00:18:13.770
an asp.net core app, move
beyond text files, check out

352
00:18:13.770 --> 00:18:17.850
structured, logging it, preserves those
individual property values. As well

353
00:18:17.850 --> 00:18:20.010
as the text that's associated
with each event, they get

354
00:18:20.010 --> 00:18:22.950
sent across the network to
seek which then displays them

355
00:18:23.190 --> 00:18:26.130
and makes them searchable. It's
really easy to get started.

356
00:18:26.370 --> 00:18:29.280
You can probably instrument your
application if you're already using

357
00:18:29.280 --> 00:18:32.580
logging in just minutes, just
go to get seek that's

358
00:18:32.580 --> 00:18:36.510
G E T S E
q.net. You install the seek

359
00:18:36.510 --> 00:18:39.690
server, it's a windows service,
and then it listens and

360
00:18:39.690 --> 00:18:42.690
handles all the logging, whether
you're using no JS and

361
00:18:42.690 --> 00:18:45.990
the Bunyan logging library, or
maybe you use Sera log

362
00:18:46.050 --> 00:18:50.100
on.net, or just asp.net core
is built in logging. Sikh

363
00:18:50.100 --> 00:18:52.080
is there for whatever you
want to use, whether it

364
00:18:52.080 --> 00:18:55.260
be.net or node or Python
or Java, it's a really

365
00:18:55.260 --> 00:18:57.660
great product. And I encourage
you to check them out

366
00:18:57.690 --> 00:19:00.540
and support them the way
that they support us here

367
00:19:00.570 --> 00:19:04.070
at Hansel minutes, Relating to
your sort of earlier question

368
00:19:04.070 --> 00:19:06.050
of, do you need to
know the full stack? I

369
00:19:06.050 --> 00:19:09.860
think if you've, if you've
got a solid notional machine

370
00:19:09.860 --> 00:19:12.260
for Java scripts, then you
don't need to know what's

371
00:19:12.260 --> 00:19:15.200
going on under these, you
know, I have a reasonably

372
00:19:15.200 --> 00:19:18.680
sort of classic notional machine
<inaudible> of, of what's going

373
00:19:18.680 --> 00:19:20.840
on, but I don't really
understand what's going on when

374
00:19:20.840 --> 00:19:24.350
you get down to the
register renaming units or whatever.

375
00:19:24.410 --> 00:19:26.300
And it's the job of
the people on the layers

376
00:19:26.300 --> 00:19:29.330
beneath me to try and
insulate me from that one

377
00:19:29.330 --> 00:19:31.730
thing we find in programming
education there's a lot of

378
00:19:31.730 --> 00:19:34.940
the teachers often have this
sort of full stack view

379
00:19:34.940 --> 00:19:37.310
of what's going on, that
they're doing Java, but they

380
00:19:37.310 --> 00:19:40.370
know how the Java maps
into, you know, assembly code.

381
00:19:41.220 --> 00:19:44.600
And they feel like their
students must also gain this

382
00:19:44.600 --> 00:19:48.680
knowledge. But there's sort of
still an open question to

383
00:19:48.680 --> 00:19:50.930
some extent, whereas the students
don't need any of that

384
00:19:50.930 --> 00:19:53.450
knowledge, as long as they
have a, a solid notion

385
00:19:53.450 --> 00:19:56.660
machine of their high level
language. It's fine. And I

386
00:19:56.660 --> 00:19:58.880
think we're sort of at
a certain point in computing's

387
00:19:58.880 --> 00:20:01.460
chronology, where a lot of
the teachers are of the

388
00:20:01.460 --> 00:20:04.470
age that they have this
kind of full stack notion

389
00:20:04.510 --> 00:20:07.250
machine. Cause they started with
the more bare metal languages.

390
00:20:07.580 --> 00:20:09.950
And a lot of the
learners coming in are just

391
00:20:09.950 --> 00:20:12.890
learning the high level languages.
And is it an issue

392
00:20:12.950 --> 00:20:16.220
I suspect the cracks show
through, at points in the

393
00:20:16.220 --> 00:20:19.220
abstraction, but I think generally
it's probably not an issue

394
00:20:19.220 --> 00:20:22.460
if people just have an
accurate notional machine of the

395
00:20:22.620 --> 00:20:25.160
high level languages. I think
that's a really good Kind

396
00:20:25.160 --> 00:20:28.940
of a gut check for
me because I'm so excited

397
00:20:28.940 --> 00:20:33.470
about the full stack that
I'm excited to pour 25

398
00:20:33.470 --> 00:20:38.330
years Software history into a
15 year old mind, but

399
00:20:38.330 --> 00:20:41.000
ultimately they just want to
make some text flash on

400
00:20:41.000 --> 00:20:44.960
the screen. It's okay. That
their metal is different than

401
00:20:44.960 --> 00:20:49.420
my metal. Yeah. What am
I sort of a little

402
00:20:49.420 --> 00:20:53.110
hobby horse issues is whether
we should teach binary or

403
00:20:53.110 --> 00:20:56.230
not. So it's generally thought
to be a core part

404
00:20:56.230 --> 00:20:59.950
of computing sort of unit
binary and how the bits

405
00:20:59.950 --> 00:21:02.260
work and all that sort
of thing. But actually if

406
00:21:02.260 --> 00:21:06.370
you're building in your mind,
a JavaScript notional machine binder,

407
00:21:06.400 --> 00:21:08.740
you probably don't need any
binary at all. You just

408
00:21:08.740 --> 00:21:10.660
need to know that it
will store the numbers. You

409
00:21:10.660 --> 00:21:14.440
might need to know, for
example, floating point representations and

410
00:21:14.440 --> 00:21:18.190
issues around sort of precision
in numbers, but actually sort

411
00:21:18.190 --> 00:21:20.800
of getting down to kind
of, I dunno, choose compliments

412
00:21:20.800 --> 00:21:23.020
seeings. And what happens if
you add with a bit

413
00:21:23.020 --> 00:21:25.630
mask, like a lot of
high level programming these days,

414
00:21:25.630 --> 00:21:28.780
it doesn't really need that.
And people want to teach

415
00:21:28.780 --> 00:21:30.790
sort of you don't, as
you say, 15 year old

416
00:21:30.790 --> 00:21:32.860
learners. And they're like, Oh,
well, you know, we should

417
00:21:32.860 --> 00:21:35.740
really do binary cause it's
a fundamental concept of computing

418
00:21:35.830 --> 00:21:38.530
and it is something that's
quite distinct to computing. But

419
00:21:38.530 --> 00:21:40.690
if you're looking to become
a programmer, I wouldn't say

420
00:21:40.690 --> 00:21:43.660
that actually binary was kind
of, you know, top of

421
00:21:43.660 --> 00:21:46.260
the list of things you
need to know. Yeah. When

422
00:21:46.260 --> 00:21:49.440
I, when I first got
a car, my father insisted

423
00:21:49.440 --> 00:21:51.060
that I would not be
allowed to drive the car

424
00:21:51.060 --> 00:21:54.720
until I learned to change
the oil. Of course, after

425
00:21:54.720 --> 00:21:56.520
the fact, I learned that
you can pay someone to

426
00:21:56.520 --> 00:22:00.810
do that for you and
well, you know, someone may

427
00:22:00.810 --> 00:22:03.270
judge me for my inability
to change a tire. There's

428
00:22:03.270 --> 00:22:05.100
also people that will do
that for you as well,

429
00:22:06.670 --> 00:22:08.670
which takes away from the
joy of driving the car.

430
00:22:09.840 --> 00:22:12.630
Yeah. And I think generally
societal progress has to come

431
00:22:12.630 --> 00:22:17.250
from people specializing, no one
could know all things. And

432
00:22:17.250 --> 00:22:19.740
so, yeah, I'm happy to
pay someone to maintain the

433
00:22:19.740 --> 00:22:22.230
car. I have no idea
about it, but I've specialized

434
00:22:22.230 --> 00:22:25.080
in computing. So, you know,
I'll learn my wage and

435
00:22:25.350 --> 00:22:27.450
pay him the money to
do what he specialized in.

436
00:22:27.900 --> 00:22:30.630
And to some extent, computing
is now large enough that

437
00:22:30.630 --> 00:22:33.120
nobody can understand all of
what's going on in computing.

438
00:22:33.120 --> 00:22:35.760
You can't be an AI
expert or a full stack

439
00:22:35.760 --> 00:22:38.580
experts and the process of
design experts and the user

440
00:22:38.580 --> 00:22:42.240
interface expert. You've got to
specialize in a particular subfield.

441
00:22:42.510 --> 00:22:45.120
And I think that's fine.
And we shouldn't say that

442
00:22:45.120 --> 00:22:48.300
everyone needs to understand everything
because it's just, it's sort

443
00:22:48.300 --> 00:22:51.510
of, And I think that
the implied value judgements that

444
00:22:51.510 --> 00:22:53.670
come through the implicit value
judgements rather than go with,

445
00:22:53.730 --> 00:22:55.410
go with that. We need
to be careful that as

446
00:22:55.410 --> 00:22:59.370
teachers, we don't make anyone
feel bad about that. Like

447
00:22:59.460 --> 00:23:02.040
you don't know binary, or
like you just said, for

448
00:23:02.040 --> 00:23:04.590
example, that you are not
necessarily totally familiar with how

449
00:23:04.590 --> 00:23:06.750
the registers and stuff work.
And my knee jerk was

450
00:23:06.750 --> 00:23:09.480
like, but he's got a
PhD. You probably don't have

451
00:23:09.480 --> 00:23:12.090
a PhD in how registers
and XTP work and that's

452
00:23:12.100 --> 00:23:16.830
okay. Yeah. I think that's
another thing that can put

453
00:23:16.830 --> 00:23:19.470
people off is you get
this sort of gatekeeping effect

454
00:23:19.470 --> 00:23:21.990
where people are like, Oh,
if you don't know X,

455
00:23:21.990 --> 00:23:24.360
you don't really know programming.
If you don't understand what

456
00:23:24.360 --> 00:23:28.200
point is doing under these,
you don't really understand programming,

457
00:23:28.200 --> 00:23:30.900
but again, you could build
a JavaScript notional machine without

458
00:23:31.800 --> 00:23:34.850
sort of, I think, fully
understanding pointers or pointer arithmetic

459
00:23:34.850 --> 00:23:38.430
or, or any of that
stuff. I understand also that

460
00:23:38.430 --> 00:23:40.620
you, you believe that the
way that I learned, which

461
00:23:40.620 --> 00:23:44.010
is with slides and PowerPoints
is really the worst possible

462
00:23:44.010 --> 00:23:46.400
way to learn how to
code better to have the,

463
00:23:46.400 --> 00:23:49.190
the instructor write the code
on the, on the, on

464
00:23:49.190 --> 00:23:53.140
the screen, almost like mob
programming. Yeah. So this is,

465
00:23:53.140 --> 00:23:55.570
this is particularly for, for
houses sort of teaching and

466
00:23:55.570 --> 00:23:58.510
learn programming, but there was
a study that looked at

467
00:23:59.890 --> 00:24:02.620
sort of learners experience in
lecturers that they, you know,

468
00:24:02.680 --> 00:24:05.380
a real novice would come
to a computing lecture. They'd

469
00:24:05.380 --> 00:24:08.140
sit down, the lecturer would
show a slide with code

470
00:24:08.140 --> 00:24:10.060
on it. They'd show another
slide with code on it.

471
00:24:10.420 --> 00:24:13.960
And from the sort of
viewer's perspective, all this code

472
00:24:13.960 --> 00:24:17.230
is perfect. They sort of
get the impression that the

473
00:24:17.230 --> 00:24:19.870
person must have written this
code perfect first time that

474
00:24:19.870 --> 00:24:21.640
they can just submit it
up out of their mind,

475
00:24:21.670 --> 00:24:24.160
just as easily as they
click on the next slide

476
00:24:24.160 --> 00:24:27.250
button and they don't get
any sense of process or

477
00:24:27.250 --> 00:24:29.650
the struggles that go with
that process or anything like

478
00:24:29.650 --> 00:24:32.860
that. Whereas if you do
live coding on the screen,

479
00:24:33.400 --> 00:24:36.460
then often you'll kind of
make a, you know, where

480
00:24:36.460 --> 00:24:39.820
you make typing mistakes as
in, you know, physical typing,

481
00:24:39.820 --> 00:24:45.130
not types. Does that make
sense? Keyboard mistakes? So you'll

482
00:24:45.130 --> 00:24:47.500
make keyboard mistakes. You'll maybe
if you sort of do

483
00:24:47.500 --> 00:24:49.750
longer examples, you'll screw something
up in the middle and

484
00:24:49.750 --> 00:24:51.610
you'll be like, Oh, what
happened there? What's that error.

485
00:24:51.970 --> 00:24:54.940
And actually seeing somebody go
through the process of making

486
00:24:54.940 --> 00:24:57.490
errors and tracking down errors
is very useful for them

487
00:24:57.490 --> 00:25:00.280
to learn. It's okay to
make errors. Here's what you

488
00:25:00.280 --> 00:25:02.920
do about it. And so
on, this is sort of

489
00:25:02.920 --> 00:25:06.370
weird effect. We're actually the
more practiced and smooth you

490
00:25:06.370 --> 00:25:09.010
are as a programmer, probably
the worse you are at

491
00:25:09.010 --> 00:25:11.830
trying to do sort of
live coding to teach because

492
00:25:11.830 --> 00:25:14.950
you don't make mistakes. I
have this workshops that I

493
00:25:14.950 --> 00:25:16.900
do for some of our
software and I've done it

494
00:25:16.900 --> 00:25:19.420
so many times. I can
do it without making any

495
00:25:19.420 --> 00:25:22.630
mistakes. And that's actually not
very useful because seeing the

496
00:25:22.640 --> 00:25:25.240
mistakes is an important part
of sort of the teaching

497
00:25:25.240 --> 00:25:29.170
process. Yeah. The, as a,
as I also say that

498
00:25:29.170 --> 00:25:32.410
senior developers really have just
failed a lot more than

499
00:25:32.410 --> 00:25:36.580
you have. And the really
senior developers fail very, very

500
00:25:36.580 --> 00:25:38.950
fast, you know, fail fast,
fail often. And if you

501
00:25:38.950 --> 00:25:42.160
can, can shorten the, what
I call them, what we

502
00:25:42.160 --> 00:25:45.730
at Microsoft called the developers
inner loop, the shorter that

503
00:25:45.730 --> 00:25:48.880
loop can be the better
if your, your loop, when

504
00:25:48.880 --> 00:25:51.790
you're a beginner might be
an hour before you realize

505
00:25:51.790 --> 00:25:53.440
you've made a mistake. But
if you're, if you can

506
00:25:53.440 --> 00:25:57.160
do that in minutes or
seconds, failing as quickly as

507
00:25:57.160 --> 00:26:00.070
possible is gonna make you
very successful. Yeah. And that's

508
00:26:00.070 --> 00:26:02.200
something we've actually looked at
in the design of some

509
00:26:02.200 --> 00:26:06.580
of our beginner's ideas, because
we've seen behaviors where learners

510
00:26:06.580 --> 00:26:09.670
will write a long bit
of code, maybe 20 lines,

511
00:26:09.700 --> 00:26:12.640
which is a beginner is
a really big program. They'll

512
00:26:12.640 --> 00:26:15.250
write 20 lines of code,
which is, you know, often

513
00:26:15.250 --> 00:26:19.270
got syntax mistakes and, you
know, conceptual mistakes and whatever

514
00:26:19.270 --> 00:26:22.030
in it. And then they
hit the compile button. Or

515
00:26:22.030 --> 00:26:23.890
if you note the dynamic
language, you know, run button

516
00:26:25.750 --> 00:26:28.570
ads, they just get hit
with a wall of mistakes.

517
00:26:28.840 --> 00:26:31.090
And so one thing we
looked at doing was can

518
00:26:31.090 --> 00:26:34.570
we switch to sort of
more professional ID style, error

519
00:26:34.570 --> 00:26:38.440
highlighting as you go? Is
that a better sort of

520
00:26:38.440 --> 00:26:41.140
feedback loop instinctively you'd think
it probably is because the

521
00:26:41.140 --> 00:26:44.730
shorter feedback loop, as you
say, generally, that seems to

522
00:26:44.730 --> 00:26:48.060
work out better for people
when we're learning things. And

523
00:26:48.060 --> 00:26:51.120
you also say that people
spend too much time typing

524
00:26:51.120 --> 00:26:53.850
in boilerplate code. If I'm
trying to say hello world,

525
00:26:54.210 --> 00:26:56.850
why am I typing library
and porch statements and curly

526
00:26:56.850 --> 00:27:01.020
prices and namespaces and stuff,
a live coding, doesn't have

527
00:27:01.020 --> 00:27:05.100
to start with a blank
screen. Yeah, exactly. There's sort

528
00:27:05.100 --> 00:27:07.800
of a, one of the
conceptions is that you, you

529
00:27:07.800 --> 00:27:10.260
must understand everything that you
type and everything that you

530
00:27:10.260 --> 00:27:13.140
interact with and people have
always criticized Java for its

531
00:27:13.140 --> 00:27:16.500
public static void main that
doesn't really make any sense

532
00:27:17.370 --> 00:27:20.430
to beginners, but it, you
know, lots of languages, a

533
00:27:20.430 --> 00:27:22.800
lot of frameworks, you often
have to have some code

534
00:27:22.800 --> 00:27:26.940
that a beginner won't understand,
and you can either, you

535
00:27:26.940 --> 00:27:28.770
know, sort of struggle against
the tide and try and

536
00:27:28.770 --> 00:27:31.800
explain every single piece in
that file before you get

537
00:27:31.800 --> 00:27:34.320
going, or you just accept,
okay, they're not going to

538
00:27:34.320 --> 00:27:36.000
understand all of it. Some
of it's going to be

539
00:27:36.000 --> 00:27:39.150
boiler plate, give them the
boiler plate so that they

540
00:27:39.150 --> 00:27:40.470
don't sort of have to
look at it and then

541
00:27:40.470 --> 00:27:43.020
just focus in on what
you actually want them to

542
00:27:43.020 --> 00:27:45.570
write. And it's better if
you can hide it behind

543
00:27:45.570 --> 00:27:48.000
a software library or a
framework so that they don't

544
00:27:48.000 --> 00:27:51.000
see this extra code, but
sometimes you do actually have

545
00:27:51.000 --> 00:27:53.190
to just put it in
the file that they're they're

546
00:27:53.190 --> 00:27:55.800
editing, but it's all about,
you know, could be scientists

547
00:27:55.810 --> 00:27:57.990
about abstraction. You try and
abstract away all the bits

548
00:27:57.990 --> 00:27:59.940
they don't need to know
so that you can focus

549
00:27:59.940 --> 00:28:01.470
on the bits. So they
do need to know is

550
00:28:01.470 --> 00:28:03.570
what we do with libraries.
And it's no surprise if

551
00:28:03.570 --> 00:28:06.600
we also do it with,
with teaching. Yeah. The public

552
00:28:06.600 --> 00:28:09.570
static void main is awful.
If you think about like,

553
00:28:09.600 --> 00:28:11.340
let's learn how to program,
we're going to say, hello,

554
00:28:11.340 --> 00:28:15.150
world, public static, void main,
well, now here's four concepts

555
00:28:15.450 --> 00:28:17.580
that you need to learn
deeply about before we can

556
00:28:17.580 --> 00:28:20.610
say hello world. Yeah. And
then, so the better thing

557
00:28:20.610 --> 00:28:22.800
to do is just say,
okay, ignore that bit. That's

558
00:28:22.800 --> 00:28:25.320
just got to be there.
Let's type the code in

559
00:28:25.320 --> 00:28:28.200
between the curly brackets here.
And, and you know, then

560
00:28:28.200 --> 00:28:31.800
you're typing one line to
say, hello, world simpler. One

561
00:28:31.800 --> 00:28:34.080
of your tips is that
when teaching, we should use

562
00:28:34.080 --> 00:28:38.430
authentic tasks. And I took
that to mean like real

563
00:28:38.430 --> 00:28:40.890
and, you know, to matter
to the, to the, to

564
00:28:40.890 --> 00:28:43.440
the student, to the kid,
if they're a teenager, they

565
00:28:43.440 --> 00:28:46.410
might be more excited about
listing out MP3s or looking

566
00:28:46.410 --> 00:28:48.900
at the SoundCloud or talking
to someone like that and

567
00:28:48.900 --> 00:28:52.020
not interested in making, you
know, Bezier curves and drawing

568
00:28:52.020 --> 00:28:56.460
spiral crafts. Yeah. Yeah. They
suffered a balance between what

569
00:28:56.460 --> 00:28:59.190
you can do in a
small amount of code was

570
00:28:59.250 --> 00:29:02.430
a small amount of concepts
versus a sort of trying

571
00:29:02.430 --> 00:29:06.450
to make it really engaging
and interesting. But historically programming

572
00:29:06.450 --> 00:29:09.240
used a lot of examples.
So they would, you know,

573
00:29:09.300 --> 00:29:11.580
I remember in the eighties
or so it was kind

574
00:29:11.580 --> 00:29:14.640
of, you know, printing numbers
or printing prime numbers or

575
00:29:15.030 --> 00:29:17.100
a lot of cause all
you had was like the

576
00:29:17.100 --> 00:29:20.460
consults to print out too.
And so those examples are

577
00:29:20.460 --> 00:29:23.730
quite sort of dry. They
don't encourage a lot of

578
00:29:23.730 --> 00:29:28.650
experimentation if you're not very
mathematically minded, all the numerical

579
00:29:28.650 --> 00:29:33.510
ones will generally be a
turnoff. So more interesting, more

580
00:29:33.510 --> 00:29:37.950
engaging examples of better someone
idea in computing education of

581
00:29:37.950 --> 00:29:41.530
media computation, which is trying
to compute with sound and

582
00:29:41.530 --> 00:29:44.530
images so that you get
a, a good sort of

583
00:29:44.530 --> 00:29:47.350
quick idea of whether your
code works. If you try

584
00:29:47.350 --> 00:29:50.230
and turn your image upside
down, you'll see whether you

585
00:29:50.320 --> 00:29:53.380
managed it successfully or not.
And it maybe makes us

586
00:29:53.380 --> 00:29:57.100
at a more interesting task
than these very dry tasks.

587
00:29:58.230 --> 00:30:01.740
Yeah. I think that it's
important to point out that

588
00:30:01.790 --> 00:30:05.550
that not every bit of
context is appropriate for everyone.

589
00:30:05.550 --> 00:30:09.480
There's, there's, there's a cultural
reasons to pick one over

590
00:30:09.480 --> 00:30:12.780
another there's there's generational things.
If I were teaching a

591
00:30:12.780 --> 00:30:15.210
room full of seniors, I
might pick a different context

592
00:30:15.210 --> 00:30:18.390
than a party Room full
of six year olds. Yeah.

593
00:30:18.760 --> 00:30:22.260
You'll never satisfy everybody with
one example. So, you know,

594
00:30:22.260 --> 00:30:24.660
obviously a variety is good
if you've got them for,

595
00:30:24.720 --> 00:30:28.200
for the long term and
just trying to sort of

596
00:30:28.390 --> 00:30:31.710
use the domain to, to
make it relatable and, and

597
00:30:31.710 --> 00:30:35.730
engage as many people as
you can. And the, the

598
00:30:35.730 --> 00:30:37.950
kind of the final tip,
at least we haven't gone

599
00:30:37.950 --> 00:30:39.720
through all 10 and I'll
have links to this. Of

600
00:30:39.720 --> 00:30:43.020
course in the, in the
show notes is you shouldn't

601
00:30:43.020 --> 00:30:46.140
just code. You want to
break things down there's there's

602
00:30:46.140 --> 00:30:49.740
syntax or semantics, just algorithms
coding. Isn't just kind of

603
00:30:49.740 --> 00:30:53.600
wrote memorization and slap on
the keyboard. Yeah. And this,

604
00:30:53.600 --> 00:30:57.090
this, this idea of Parson's
problems, which is where you

605
00:30:57.090 --> 00:31:00.930
give people preformed lines of
code, but you get them

606
00:31:00.930 --> 00:31:03.960
to organize it into the
right order and the right

607
00:31:04.020 --> 00:31:06.480
scopes. So it's sort of
like a, a kind of

608
00:31:06.480 --> 00:31:10.680
rearrangement puzzle rather than the
programming puzzle, the issue, if

609
00:31:10.680 --> 00:31:13.770
you just get them to,
to code from nothing is,

610
00:31:13.800 --> 00:31:15.720
you know, it requires a
lot of sort of memorizing

611
00:31:15.720 --> 00:31:18.420
the commands that it could
be quite intimidating. There are

612
00:31:18.420 --> 00:31:22.440
other ways to learn programming
concepts and learn code other

613
00:31:22.440 --> 00:31:25.350
than just bashing it all
out yourself. Whereas that sort

614
00:31:25.350 --> 00:31:29.820
of code reading tasks, quote,
manipulation tasks, there's, there's a

615
00:31:29.820 --> 00:31:31.500
wider variety. If you could
just be a little bit

616
00:31:31.500 --> 00:31:35.580
more imaginative about what you're
doing. <inaudible> you said Parsons

617
00:31:35.610 --> 00:31:37.740
P a R S O
N problem. So this is

618
00:31:37.740 --> 00:31:40.320
where I would give you
say three or four lines

619
00:31:40.320 --> 00:31:42.450
of code in the wrong
order. And I would put

620
00:31:42.450 --> 00:31:45.150
them together in the right
order. Yeah. Yeah. That's right.

621
00:31:45.990 --> 00:31:50.130
Interesting. And that's kind of
like a multiple choice, but

622
00:31:50.160 --> 00:31:52.410
it's much more complicated because
it has, you know, as

623
00:31:52.410 --> 00:31:56.340
order matters. Yes. Yeah. So
people learn things like the

624
00:31:56.340 --> 00:31:59.100
variable declaration has to go
before the variable use. If

625
00:31:59.100 --> 00:32:03.510
you're doing a language where
you require declarations or, you

626
00:32:03.510 --> 00:32:05.610
know, these lines must go
in the F rather than

627
00:32:05.610 --> 00:32:08.370
outside the F it's, it's
useful if you're, you're really

628
00:32:08.370 --> 00:32:13.170
at the beginning. So w
other than your, your paper,

629
00:32:13.170 --> 00:32:15.210
which I've included a link
to, what are some other

630
00:32:15.210 --> 00:32:17.610
resources that we can leave
people with if they are

631
00:32:17.610 --> 00:32:20.220
out there, either teaching programming,
or maybe they're just going

632
00:32:20.220 --> 00:32:23.310
to user groups and trying
to teach some subject to

633
00:32:23.310 --> 00:32:26.820
their peers. Yeah. So my,
my coauthor on the paper,

634
00:32:26.850 --> 00:32:30.540
Greg Wilson has done a
lot with software carpentry, which

635
00:32:30.540 --> 00:32:34.440
are these schemes to try
and teach people how to

636
00:32:34.440 --> 00:32:36.810
program. And I think they're
particularly interested in sort of,

637
00:32:38.130 --> 00:32:41.600
well, not data, but sort
of just scientists, you know,

638
00:32:41.600 --> 00:32:44.210
people who maybe need to
do some programming as part

639
00:32:44.210 --> 00:32:47.240
of their analysis, maybe to
do some data tidy up

640
00:32:47.240 --> 00:32:50.750
or to, to use a
particular our library on what

641
00:32:50.750 --> 00:32:53.660
they're doing, and don't really
know much programming. So they're

642
00:32:53.660 --> 00:32:57.650
like, you know, these sort
of adults learners need to

643
00:32:57.650 --> 00:32:59.900
just get to grips with
bits of it, to, to

644
00:32:59.900 --> 00:33:02.240
learn how to program. So
software carpentry has got a

645
00:33:02.240 --> 00:33:05.810
lot of interesting resources on
especially sort of teaching adults

646
00:33:05.810 --> 00:33:08.240
or, or people who don't
want to become full time

647
00:33:08.240 --> 00:33:10.940
programmers, but they need a
bit of programming to get

648
00:33:10.940 --> 00:33:15.350
on with what they're doing.
I like that actually such

649
00:33:15.350 --> 00:33:19.910
software hyphened, carpentry.org. And I
like the, the analogy implied

650
00:33:19.910 --> 00:33:22.910
analogy there, because, you know,
my dad has a formal

651
00:33:22.910 --> 00:33:25.820
woodworker and a crafts person,
but sometimes I just want

652
00:33:25.820 --> 00:33:28.520
to cut a piece of
wood finding the right balance

653
00:33:28.550 --> 00:33:30.440
between how deep do I
want to go? You don't

654
00:33:30.440 --> 00:33:32.210
necessarily have to learn computer
science to put up a

655
00:33:32.210 --> 00:33:35.150
WordPress site. Yeah, exactly. And
a lot of people, they

656
00:33:35.150 --> 00:33:37.220
need the sort of small
bits of programs to maybe

657
00:33:37.220 --> 00:33:40.610
read in a CSV and,
you know, manipulate a string

658
00:33:40.610 --> 00:33:42.680
and write it out again.
They don't need to be

659
00:33:42.680 --> 00:33:45.560
sat down and told, okay.
You know, here's sort of

660
00:33:45.560 --> 00:33:49.940
the history of object orientation
and how the register renaming

661
00:33:49.940 --> 00:33:51.710
unit works and all the
rest of it, they just

662
00:33:51.710 --> 00:33:53.600
need a little bit to
get on with what they're

663
00:33:53.600 --> 00:33:56.210
doing. And it's okay if
they don't understand the full

664
00:33:56.210 --> 00:33:58.400
thing, if they're just writing
a bit of code to

665
00:33:58.430 --> 00:34:00.560
do a job. Very cool.
Well, thanks so much for

666
00:34:00.560 --> 00:34:02.780
taking the time to chat
with us today. That's okay.

667
00:34:02.780 --> 00:34:05.540
It's been, it's been great.
This has been another episode

668
00:34:05.540 --> 00:34:28.150
of Hanselminutes and we'll see
you again next week. <inaudible>.

