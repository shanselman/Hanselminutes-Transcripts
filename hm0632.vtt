WEBVTT FILE

1
00:00:00.510 --> 00:00:02.400
Hey friends, this is Scott,
and I've got a word

2
00:00:02.400 --> 00:00:04.800
from a new sponsor and
a really cool sponsor. In

3
00:00:04.800 --> 00:00:08.340
fact that I use myself,
they are Sikh that's S

4
00:00:08.370 --> 00:00:12.360
E Q, and you can
check them out@getsikh.net. That's G

5
00:00:12.360 --> 00:00:16.890
E T S E q.net.
Seek is the easiest way

6
00:00:16.890 --> 00:00:20.580
for your team to capture
and search and visualize structured

7
00:00:20.580 --> 00:00:23.550
log events. You probably do
logging. Maybe you have a

8
00:00:23.550 --> 00:00:27.780
node app or an asp.net
core app. Move beyond text

9
00:00:27.780 --> 00:00:32.340
files, check out structured, logging
it, preserves those individual property

10
00:00:32.340 --> 00:00:35.040
values. As well as the
text that's associated with each

11
00:00:35.040 --> 00:00:37.800
event, they get sent across
the network to seek which

12
00:00:37.800 --> 00:00:41.070
then displays them and makes
them searchable. It's really easy

13
00:00:41.070 --> 00:00:44.100
to get started. You can
probably instrument your application if

14
00:00:44.100 --> 00:00:47.100
you're already using logging in
just minutes, just go to

15
00:00:47.100 --> 00:00:51.390
get seek that's G E
T S E q.net. You

16
00:00:51.390 --> 00:00:54.270
install the seek server. It's
a windows service, and then

17
00:00:54.270 --> 00:00:57.450
it listens and handles all
the logging, whether you're using

18
00:00:57.480 --> 00:01:00.570
no JS and the Bunyan
logging library, or maybe you

19
00:01:00.570 --> 00:01:04.410
use Sera log on.net or
just asp.net core is built

20
00:01:04.410 --> 00:01:07.170
in logging. Sikh is there
for whatever you want to

21
00:01:07.170 --> 00:01:09.840
use, whether it be.net or
node or Python or Java,

22
00:01:10.200 --> 00:01:12.690
it's a really great product.
And I encourage you to

23
00:01:12.690 --> 00:01:15.210
check them out and support
them the way that they

24
00:01:15.210 --> 00:01:31.670
support us here at Hansel
minutes. <inaudible> This is Scott

25
00:01:31.670 --> 00:01:34.580
Hanselman. This is another episode
of Hansel minutes. And today

26
00:01:34.580 --> 00:01:37.940
I'm talking with Eric <inaudible>.
He was a software engineer

27
00:01:37.940 --> 00:01:40.400
on the backwards compat team
at Xbox. How are you

28
00:01:40.400 --> 00:01:44.180
sir? Doing well? How are
you? I'm pretty freaking thrilled

29
00:01:44.210 --> 00:01:46.820
because I have a four
K TV that I spent

30
00:01:46.850 --> 00:01:49.760
an inordinate amount of money
on. And I'm actually getting

31
00:01:49.760 --> 00:01:51.890
a lot of really great
content on it. It's fun.

32
00:01:51.890 --> 00:01:52.880
I thought I was going
to have to buy a

33
00:01:52.880 --> 00:01:55.430
bunch of new games. And
you know, even though there's

34
00:01:55.430 --> 00:01:58.730
a bunch of amazing 4k
stuff on Xbox, one X,

35
00:01:59.960 --> 00:02:03.680
I'm playing all these old
games, I played red dead

36
00:02:03.680 --> 00:02:09.590
redemption yesterday, and it's like
crisper than my memory, which

37
00:02:09.590 --> 00:02:12.350
seems impossible to me. And
you, you and your team

38
00:02:12.350 --> 00:02:14.300
had something to do with
that. Yeah, it's been really

39
00:02:14.300 --> 00:02:16.460
fun. One of these we
kind of talk about is

40
00:02:16.850 --> 00:02:18.560
we were able to present
the games to you the

41
00:02:18.560 --> 00:02:20.660
way you remember them, not
the way they actually looked

42
00:02:20.660 --> 00:02:24.440
at the time, you know,
and you all did that

43
00:02:24.440 --> 00:02:28.940
before with like halo, right?
Like the halo remasters, but

44
00:02:29.030 --> 00:02:32.330
the remasters were people made
new textures and like a

45
00:02:32.330 --> 00:02:34.820
lot of work went into
making it look the way

46
00:02:34.820 --> 00:02:37.490
you remember it, but that
wasn't the same as, as

47
00:02:37.490 --> 00:02:40.040
the stuff that the back
compat team's doing with the,

48
00:02:40.040 --> 00:02:42.290
with the, what do you
call them? They're the up

49
00:02:42.290 --> 00:02:45.650
masters degree, masters, Xbox one
X enhanced versions of titles,

50
00:02:46.340 --> 00:02:50.900
the enhancer Xbox one X
enhanced there that's different than

51
00:02:51.410 --> 00:02:55.400
remastering. Like we see on
other consoles. It's very different.

52
00:02:55.400 --> 00:02:57.560
As you talked about in
a remaster, normally they'll go

53
00:02:57.560 --> 00:03:00.130
in and do higher quality
versions of textures or models

54
00:03:00.130 --> 00:03:02.800
And things like that. And
for us, the game is

55
00:03:02.800 --> 00:03:06.340
running in the emulator, totally
unaware that anything has changed.

56
00:03:06.340 --> 00:03:08.710
It thinks it's running on
a standard Xbox three 60,

57
00:03:09.900 --> 00:03:13.110
Really? So there, this isn't
a find the source code

58
00:03:13.110 --> 00:03:15.840
and frantically recompile it with
new PNGs and a folder

59
00:03:15.840 --> 00:03:19.200
somewhere. If we had access
to source code, that would

60
00:03:19.200 --> 00:03:21.600
be great. Often, you know,
we're sitting there and looking

61
00:03:21.600 --> 00:03:23.880
at a disassembly of code,
trying to figure out what's

62
00:03:23.880 --> 00:03:28.710
going on <inaudible> and everyone
writes their apps differently, right?

63
00:03:28.740 --> 00:03:32.250
Like one, one, one, or
all of these kind of

64
00:03:32.250 --> 00:03:34.200
three D games running, you
know, like if I use

65
00:03:34.200 --> 00:03:36.630
the example of red dead,
you know, it's over the

66
00:03:36.630 --> 00:03:39.390
shoulder, third person I'm running
around in an open world.

67
00:03:39.750 --> 00:03:42.210
There's only so many ways
to write that though. Right?

68
00:03:42.210 --> 00:03:43.860
There's a, there's a, there's
a MIP map and there's

69
00:03:43.860 --> 00:03:47.040
all kinds of textures that
people have put together. Those

70
00:03:47.040 --> 00:03:50.040
textures aren't gonna get any
higher quality. So you end

71
00:03:50.050 --> 00:03:52.530
up with, you know, kind
of engines, they're different engines

72
00:03:52.530 --> 00:03:54.060
that lots of titles you
use. And so you get

73
00:03:54.060 --> 00:03:57.660
similarities there, but there are
a number of different engines

74
00:03:57.660 --> 00:04:01.140
that were used across the
industry. And, and so there

75
00:04:01.140 --> 00:04:04.380
is a, a huge variety
in how the game actually

76
00:04:04.380 --> 00:04:06.870
works under the covers. I
see. So it's not just

77
00:04:06.870 --> 00:04:09.030
like, Oh, make it work
right for unreal. And then

78
00:04:09.030 --> 00:04:11.460
everything gets amazing. It is
a, it is a, an

79
00:04:11.460 --> 00:04:13.290
art form in the sense
that each game is being

80
00:04:13.290 --> 00:04:16.620
tweaked Exactly in each game,
we'll use different rendering techniques

81
00:04:16.620 --> 00:04:20.460
and things like that, that
interact differently with the running

82
00:04:20.460 --> 00:04:23.670
at the high resolution On,
on all of the forums

83
00:04:23.670 --> 00:04:26.430
out there, people are kind
of like doing their armchair

84
00:04:26.430 --> 00:04:29.640
quarterbacking, trying to figure out
how, how this is done

85
00:04:29.640 --> 00:04:32.520
and how, you know, why
didn't we ever do it

86
00:04:32.520 --> 00:04:35.790
before kind of thing. Is
this a breakthrough or is

87
00:04:35.790 --> 00:04:38.190
this something that emulators have
been doing? You know, like

88
00:04:38.670 --> 00:04:40.950
PS one PS, two emulators
have been doing on wind

89
00:04:40.990 --> 00:04:43.650
on windows machines. And I
think there's even some we

90
00:04:43.650 --> 00:04:47.700
emulators or is this a
new technique? So Some simulators

91
00:04:47.700 --> 00:04:49.980
I'm aware of that will
upper as kind of the

92
00:04:49.980 --> 00:04:54.360
final rendering buffer, but along
the way, on, on three

93
00:04:54.360 --> 00:04:56.220
60, the engines were much
more complicated and you'll get

94
00:04:56.310 --> 00:04:58.560
a shadow pass and a
blur pass and a bloom

95
00:04:58.560 --> 00:05:02.490
pass and all these different
passes running. And we've kind

96
00:05:02.490 --> 00:05:05.580
of got the ability to
tweak which passes run at

97
00:05:05.580 --> 00:05:09.360
high resolution, which don't in
order to balance out the

98
00:05:09.360 --> 00:05:13.620
quality of the final output
and performance and produce something

99
00:05:13.620 --> 00:05:16.980
that is the game that
you remember, but looks way

100
00:05:16.980 --> 00:05:20.580
better than it did then.
And is it really because

101
00:05:20.580 --> 00:05:23.520
we just have so much
more processing power. It's like,

102
00:05:23.670 --> 00:05:26.220
well, why not? It is
actually this, this whole thing

103
00:05:26.220 --> 00:05:29.790
started out. As you know,
we've got something called pics

104
00:05:29.790 --> 00:05:32.880
files and that is you
can take a capture of

105
00:05:32.880 --> 00:05:35.730
a game. It takes one
frames capture and it stores

106
00:05:35.730 --> 00:05:39.510
all of the textures, all
of the geometry, all the

107
00:05:39.510 --> 00:05:42.810
shaders, everything in that frame
gets dumped in this file.

108
00:05:43.290 --> 00:05:45.570
And on the compat team,
these have been super useful

109
00:05:46.410 --> 00:05:48.000
one. You can look at
them and try and figure

110
00:05:48.000 --> 00:05:50.700
out where does our rendering
differ from what happened on

111
00:05:50.700 --> 00:05:53.790
an actual three 60. We
also have a huge suite

112
00:05:53.790 --> 00:05:56.640
of these files that we
use for nightly regression. And

113
00:05:56.640 --> 00:05:59.660
so every, we've got a
whole rack full of consoles

114
00:05:59.660 --> 00:06:02.540
that run and take all
of these pixels files and

115
00:06:02.540 --> 00:06:04.880
play them back. So we
get these big files and

116
00:06:04.940 --> 00:06:07.910
at one point I just
decided, you know, it'd be

117
00:06:07.910 --> 00:06:09.440
neat to try and see
what happens if we run

118
00:06:09.440 --> 00:06:11.060
this at a high resolution,
what does it look like?

119
00:06:11.390 --> 00:06:13.760
And, you know, just fooling
around in my office, got

120
00:06:13.760 --> 00:06:15.800
it up and running. And
it turns out the games

121
00:06:15.860 --> 00:06:19.040
look really, really nice. And
this was back prior to

122
00:06:19.070 --> 00:06:22.160
Xbox one X dev kits
even. And so I got

123
00:06:22.160 --> 00:06:24.800
it and then decided, well,
this looks really nice. What

124
00:06:24.800 --> 00:06:27.110
would it look like in
game and was able to

125
00:06:27.110 --> 00:06:29.390
get it up and running
in game? And it was

126
00:06:29.390 --> 00:06:32.570
beautiful. You know, these games
look amazing, but they were

127
00:06:32.570 --> 00:06:35.510
running it like six to
eight frames, a second instead

128
00:06:35.510 --> 00:06:37.280
of 30 frames a second.
And so it was this

129
00:06:37.280 --> 00:06:41.330
really elegant slideshow. And then
later when the Xbox one

130
00:06:41.330 --> 00:06:44.840
X hardware came out, Hmm.
Well, if you look at

131
00:06:44.840 --> 00:06:47.540
the performance difference between that
and a regular Xbox one

132
00:06:47.930 --> 00:06:49.700
that kind of would get
us right to where we

133
00:06:49.700 --> 00:06:51.290
would need to be, to
be running these at the

134
00:06:51.290 --> 00:06:54.110
frame rate we need. And
that was kind of all

135
00:06:54.110 --> 00:06:55.460
right, let's, let's see if
we can turn it into

136
00:06:55.460 --> 00:07:00.700
a real product. Is the
increasing of the resolution easier

137
00:07:01.030 --> 00:07:04.240
than doubling of the frame
rate. I understand that these

138
00:07:04.240 --> 00:07:06.850
games might look amazing, but
they are, you know, quote

139
00:07:06.850 --> 00:07:10.300
unquote still or adjust at
30 frames a second. Would

140
00:07:10.300 --> 00:07:12.790
it confuse the game if
you suddenly just made them

141
00:07:12.790 --> 00:07:14.950
render faster? Or is it,
you know, is that something

142
00:07:14.950 --> 00:07:16.720
that, that, that their engines
couldn't do, even if they

143
00:07:16.720 --> 00:07:18.910
want it to That very
much, that would be a

144
00:07:18.910 --> 00:07:22.090
problem. You know, kind of
the game is built around

145
00:07:22.090 --> 00:07:24.640
this logic of how quickly
my updating, and there are

146
00:07:24.640 --> 00:07:28.180
some games even that have
a fixed frame time. And

147
00:07:28.180 --> 00:07:30.130
if you play them back
too slowly or too fast

148
00:07:30.430 --> 00:07:33.760
time will dilate or expand
in the game. And all

149
00:07:33.760 --> 00:07:35.440
of a sudden, I'm not
holding up frame rate. Now

150
00:07:35.440 --> 00:07:38.560
the game runs and slow-mo,
and so in general games

151
00:07:38.620 --> 00:07:41.620
have many more assumptions built
in about what kind of

152
00:07:41.620 --> 00:07:43.870
frame rate they're on and
how quickly they can update

153
00:07:43.900 --> 00:07:47.680
the game world, all the
logic run, AI, run collisions,

154
00:07:47.680 --> 00:07:51.220
that type of stuff. Whereas
graphics, we've emulated the Xbox

155
00:07:51.220 --> 00:07:54.910
three 60 chip the GPU
in there. And it's impossible

156
00:07:54.910 --> 00:07:57.340
for us to say, well,
we know when we're rendering,

157
00:07:57.340 --> 00:07:59.800
when we do that, we're
going to increase pixel count

158
00:07:59.800 --> 00:08:01.960
here. And, you know, as
I said before, without the

159
00:08:01.960 --> 00:08:04.000
game, even being aware of
it. So when I play

160
00:08:04.000 --> 00:08:06.280
like red dead redemption as
an example, but it will

161
00:08:06.280 --> 00:08:08.950
use it as a, as
a generic example. The dude

162
00:08:08.950 --> 00:08:11.020
that is running around is
amazing. The signs and the

163
00:08:11.020 --> 00:08:14.800
distance are amazing, but like
the HUD generically, the heads

164
00:08:14.800 --> 00:08:17.950
up display, it looks the
same because I guess no

165
00:08:17.950 --> 00:08:19.720
one ever did a high
Rez HUD. And why would

166
00:08:19.720 --> 00:08:22.420
they even imagine that Exactly,
there was no reason to

167
00:08:22.420 --> 00:08:24.160
put a high road in,
cause it was always shown

168
00:08:24.160 --> 00:08:26.320
that some set number of
pixels. And so they probably

169
00:08:26.320 --> 00:08:28.180
designed the art to be
exactly that number of pixels.

170
00:08:29.620 --> 00:08:31.330
How does it not show
up in like the upper

171
00:08:31.330 --> 00:08:34.180
left corner? Like why does
it show up correctly positioned

172
00:08:34.210 --> 00:08:36.070
relative to the rest of
the screen if it's running

173
00:08:36.070 --> 00:08:38.170
at a high resolution? So
that's part of the technique

174
00:08:38.170 --> 00:08:40.510
here is just making sure
that the viewport, that things

175
00:08:40.510 --> 00:08:43.570
are positioned in the same
place on screen, rather than

176
00:08:43.570 --> 00:08:46.300
being offset at a specific
number of pixels. And so

177
00:08:46.300 --> 00:08:48.760
if in the game originally
was offset a specific number

178
00:08:48.760 --> 00:08:51.040
of pixels. Well, now we
scale that up by whatever

179
00:08:51.040 --> 00:08:55.740
factor we've increased, the resolution
I see. Does it, that

180
00:08:55.770 --> 00:09:00.360
4k is exactly four, 10
ADP screens or is that

181
00:09:00.360 --> 00:09:03.500
an overly simplistic benefit at
all? Yeah, so the way

182
00:09:03.500 --> 00:09:05.990
we actually work is most
of the Xbox three 60

183
00:09:05.990 --> 00:09:08.720
games ran at seven 20
P or something similar to

184
00:09:08.720 --> 00:09:11.540
that. Oh wow. And so
we'll up the pixel count

185
00:09:11.540 --> 00:09:15.200
by nine X, three in
horizontal three in vertical. And

186
00:09:15.200 --> 00:09:18.110
so if the game was
7:20 PM, three 60, we run

187
00:09:18.110 --> 00:09:21.230
at exactly four K resolution.
A lot of games ran

188
00:09:21.230 --> 00:09:23.870
at something slightly below seven,
20 P and then we

189
00:09:23.870 --> 00:09:26.360
run it as similar, the
same ratio below four K.

190
00:09:26.990 --> 00:09:29.720
So this is not just
for X. This is huge.

191
00:09:29.750 --> 00:09:32.840
This is almost almost an
order of magnitude clearer, which

192
00:09:32.840 --> 00:09:35.240
apparently in my memory is
also apparently an order of

193
00:09:35.240 --> 00:09:40.190
magnitude clearer because it does
feel both simultaneously amazing. And

194
00:09:40.190 --> 00:09:41.990
you really, I mean, to
be clear, we're talking about

195
00:09:41.990 --> 00:09:43.700
this in a podcast. So
the irony is not lost

196
00:09:43.700 --> 00:09:46.010
on me, but people who
are listening need to find

197
00:09:46.010 --> 00:09:48.110
a friend, go and see
an Xbox one X on

198
00:09:48.110 --> 00:09:51.200
a proper 4k machine. And
you will be blown away

199
00:09:51.200 --> 00:09:53.000
that you were playing a
three 60 game. It is

200
00:09:53.000 --> 00:09:56.210
almost impossible to get your
head around, but it's also

201
00:09:56.210 --> 00:09:58.580
simultaneously exactly how I remember
it. It is. And it's

202
00:09:58.580 --> 00:10:00.950
amazing how well some of
these games hold up and

203
00:10:01.190 --> 00:10:03.800
quote, unquote, all we're doing
is increasing the resolution, but

204
00:10:03.980 --> 00:10:07.370
the assets in there, the
textures were way beyond what

205
00:10:07.370 --> 00:10:09.650
the hardware at the time
was able to display. And

206
00:10:09.650 --> 00:10:12.140
so now we've got more
powerful hardware. Let's take advantage

207
00:10:12.140 --> 00:10:14.600
of that. And you know,
these games look gorgeous. Yeah.

208
00:10:14.640 --> 00:10:16.910
Using red dead. As an
example, as I walk up

209
00:10:16.910 --> 00:10:19.670
to a building, there might
be a wanted sign on

210
00:10:19.670 --> 00:10:22.820
the, on the wall. And
this is now getting into

211
00:10:22.820 --> 00:10:24.710
kind of the mind of
the Redditor. Well, I guess

212
00:10:24.710 --> 00:10:29.090
they're just using the, the
closeup texture all the time.

213
00:10:29.090 --> 00:10:30.980
Like the texture that you
would see, and we would

214
00:10:30.980 --> 00:10:32.660
do this, we've all done
this when we had an

215
00:10:32.660 --> 00:10:35.600
original Xbox or an Xbox
three 60 to get a

216
00:10:35.600 --> 00:10:37.850
feeling that it was super
high rise as you'd walk

217
00:10:37.850 --> 00:10:40.070
right up to someone's face,
you know, like we all

218
00:10:40.070 --> 00:10:43.580
played half-life right. You walk
right up to the bad

219
00:10:43.580 --> 00:10:46.100
guy's face just to see
how good the textures are,

220
00:10:46.460 --> 00:10:48.260
but then you back up
and then they get blurry.

221
00:10:49.070 --> 00:10:51.230
Are you doing everything at
high res or are you,

222
00:10:51.470 --> 00:10:53.540
are you doing it adaptively?
So it feels like it's

223
00:10:53.930 --> 00:10:56.480
Hi. So the fun thing
here is we're not explicitly

224
00:10:56.480 --> 00:10:58.970
doing anything to show a
higher or lower quality version

225
00:10:58.970 --> 00:11:02.450
of the texture. The way
the graphics chip works is

226
00:11:02.720 --> 00:11:04.580
you've got mid matters. So
you've got the highest resolution

227
00:11:04.580 --> 00:11:07.310
version of the texture of
another version. That's a quarter

228
00:11:07.310 --> 00:11:09.130
of the size of that.
And another it's the right

229
00:11:09.130 --> 00:11:10.790
size all the way down
until you get to a

230
00:11:10.790 --> 00:11:13.460
one by one pixel here,
what this would look like

231
00:11:13.460 --> 00:11:17.420
from really far away. And
then as it's rendering, the

232
00:11:17.420 --> 00:11:20.630
GPU will say, how close
together are these pixels that

233
00:11:20.630 --> 00:11:23.900
I'm drawing. If they're really
close together and the texture

234
00:11:23.930 --> 00:11:26.840
they use a high D
highly detailed version of the

235
00:11:26.840 --> 00:11:30.410
bitmap. Whereas if you back
away, well, now the pixels

236
00:11:31.100 --> 00:11:33.710
maybe farther apart in the
texture. And so it will

237
00:11:33.710 --> 00:11:36.350
drop down to a lower
quality MIP. And so what

238
00:11:36.350 --> 00:11:38.990
we've done is increased the
resolution by nine X. That

239
00:11:38.990 --> 00:11:41.750
means that, whereas before it
would be, you know, dropped

240
00:11:41.750 --> 00:11:43.940
down to the second or
third mint map, now it

241
00:11:43.940 --> 00:11:45.830
can be up at the
very top level and giving

242
00:11:45.830 --> 00:11:48.500
you that highest quality thing
that was already there in

243
00:11:48.500 --> 00:11:51.080
memory, but the hardware before
it was limited and just

244
00:11:51.080 --> 00:11:53.950
didn't have enough pixels to
show you it. Okay. And

245
00:11:53.950 --> 00:11:57.340
I Got you now. And,
and again, without, without anyone

246
00:11:57.520 --> 00:12:00.700
being the wiser, like there
is a virtual three 60

247
00:12:01.090 --> 00:12:04.390
in your Xbox one X
with a high rise card,

248
00:12:04.390 --> 00:12:08.280
but it just doesn't know,
Right. That wanted poster exists

249
00:12:08.310 --> 00:12:11.490
in eight different versions, let's
say. And on the three

250
00:12:11.490 --> 00:12:14.790
60 and always did even
did even did exactly. And

251
00:12:14.790 --> 00:12:16.650
on the three 60, when
you walked up super close,

252
00:12:16.680 --> 00:12:18.510
it was able to use
that highest quality one. And

253
00:12:18.510 --> 00:12:20.220
then when you backed away
a little bit, it dropped

254
00:12:20.220 --> 00:12:24.180
down. Whereas in this X-Box
one X enhanced version, as

255
00:12:24.180 --> 00:12:26.310
you back away, we're able
to keep using that high

256
00:12:26.310 --> 00:12:28.830
quality one for much longer
because the pixel density is

257
00:12:28.830 --> 00:12:32.940
so much higher. What about
games that did dynamic resolutions

258
00:12:32.940 --> 00:12:35.670
and adaptive resolutions? I don't
know of any specific ones,

259
00:12:35.670 --> 00:12:37.620
because it all looks amazing
to me, but there are

260
00:12:37.620 --> 00:12:40.710
games that are like frame
locked and resolution locked. And

261
00:12:40.710 --> 00:12:43.410
then there are games where
they they'll talk like halo

262
00:12:43.410 --> 00:12:46.260
will, you know, switch, just
switch the resolution down a

263
00:12:46.270 --> 00:12:50.310
smidge, and then it'll all
happens frame. Yeah. So on

264
00:12:50.370 --> 00:12:53.400
Xbox one, that's gotten to
be a really popular technique.

265
00:12:53.670 --> 00:12:55.530
I'm not aware of anything
that used it back in

266
00:12:55.530 --> 00:12:58.170
the three 60 generation. There
may be something, but in

267
00:12:58.170 --> 00:13:01.050
terms of frame rate lock,
you'll often see games that

268
00:13:01.650 --> 00:13:04.110
it's less of a lock
and more of a third,

269
00:13:04.110 --> 00:13:06.180
just certain scenes and games
that don't keep up with

270
00:13:06.180 --> 00:13:09.060
the intended frame rate and
it'll slow down. And, you

271
00:13:09.060 --> 00:13:11.520
know, very often in the
emulator, we're able to keep

272
00:13:11.550 --> 00:13:14.220
a, maintain a higher frame
rate through certain scenes than,

273
00:13:14.610 --> 00:13:18.870
than the original hardware could.
Yeah. Okay. So why are

274
00:13:18.870 --> 00:13:22.380
people minimizing this so much?
Like you're saying that this

275
00:13:22.380 --> 00:13:24.810
requires you're, you're saying in
a very simple way, like,

276
00:13:24.840 --> 00:13:27.960
Oh, that's how it's done,
but it's more than just,

277
00:13:27.990 --> 00:13:30.570
just otherwise it would have
been done years ago. Right.

278
00:13:30.780 --> 00:13:32.640
I think it's one of
these things of the Xbox

279
00:13:32.640 --> 00:13:36.300
three 60 generation was one
of the first times when

280
00:13:36.330 --> 00:13:39.330
you had that much texture
detail and that much geometry

281
00:13:39.330 --> 00:13:43.020
that, you know, developers really
had built this much visual

282
00:13:43.020 --> 00:13:45.750
fidelity into their game that
wasn't able to shine through.

283
00:13:46.110 --> 00:13:49.020
Oh, and also just in
terms of end and complexity,

284
00:13:49.830 --> 00:13:53.280
things got much more complex.
We've also done some original

285
00:13:53.310 --> 00:13:57.270
Xbox games via compatibility, and
they upscale both on a

286
00:13:57.270 --> 00:14:00.420
regular Xbox one at four
X pixel account and an

287
00:14:00.450 --> 00:14:03.600
Xbox one X at 16
expert's account. And you can

288
00:14:03.600 --> 00:14:06.210
see there, it was starting
to be the quality of

289
00:14:06.210 --> 00:14:09.540
texture and the quality of
geometry. You know, those games

290
00:14:09.540 --> 00:14:11.880
hold up beautifully as well,
too. Yeah. I was praying

291
00:14:11.880 --> 00:14:14.310
Ninja Gaiden. I think it
was music red and black

292
00:14:14.460 --> 00:14:18.030
on my Xbox one X
and at Amos, I mean

293
00:14:18.090 --> 00:14:20.880
a while back, but it
had a, I think it

294
00:14:20.880 --> 00:14:24.420
was 2000 and early two
thousands, 2005. It was a

295
00:14:24.430 --> 00:14:27.420
12, 2004, 2005, something like
that. Yeah. But it was

296
00:14:27.420 --> 00:14:28.650
a 16, it was one
of the, you know, one

297
00:14:28.650 --> 00:14:32.130
of the few 16 by
nines, as I recall, you

298
00:14:32.130 --> 00:14:35.070
can go and buy it
even now, I think for

299
00:14:35.070 --> 00:14:38.100
like five or 10 bucks.
Yeah. 10 bucks at least

300
00:14:38.100 --> 00:14:40.620
10 years ago. And it
does hold up. If you're

301
00:14:40.620 --> 00:14:42.420
sitting in a normal, if
you look at a real

302
00:14:42.420 --> 00:14:45.780
close, you can tell, but
it moves. It's really interestingly

303
00:14:46.050 --> 00:14:49.470
the resolution and the graphics.
Aren't what makes it feel

304
00:14:49.470 --> 00:14:52.790
even a little bit dated.
It's the camera control. Like

305
00:14:52.790 --> 00:14:56.120
we hadn't decided yet as
an industry on to thumb,

306
00:14:57.220 --> 00:14:59.710
It's fascinating to see games
that are this old. And

307
00:14:59.710 --> 00:15:01.870
I played that game back
when it came out and

308
00:15:01.870 --> 00:15:04.000
be able to play it
now and see what it

309
00:15:04.000 --> 00:15:06.460
looked like then versus what
it looks like now and

310
00:15:06.670 --> 00:15:09.460
how well the developer's vision
is coming through there. It's

311
00:15:09.460 --> 00:15:11.680
just really exciting to be
a part of It's exactly

312
00:15:11.680 --> 00:15:13.090
what they, not just, what
is, it's the way I

313
00:15:13.090 --> 00:15:16.150
remembered. It's the way they
always wanted it. Yeah. And

314
00:15:16.150 --> 00:15:18.910
it also, even though you
work on back on the

315
00:15:18.910 --> 00:15:21.700
back compat team, and we're
talking about the graphics aspect

316
00:15:21.700 --> 00:15:24.250
of things, it's worth pointing
out that, like I just

317
00:15:24.250 --> 00:15:27.730
fired up a couple of
hours ago, what's it called?

318
00:15:28.150 --> 00:15:31.000
Tom Clancy, splinter cell conviction.
And I loaded up a

319
00:15:31.090 --> 00:15:34.510
save game from six years
ago that I'd totally forgotten

320
00:15:34.510 --> 00:15:37.690
about and ended up finishing
the game. And I've gone

321
00:15:37.690 --> 00:15:40.060
from an Xbox one to
an Xbox one S to

322
00:15:40.060 --> 00:15:43.780
an Xbox one X from
an original Xbox three 60.

323
00:15:43.780 --> 00:15:46.900
So that's one, two, three,
four consoles from red dead

324
00:15:46.900 --> 00:15:50.230
redemption. And I've been on
the same on the same

325
00:15:50.230 --> 00:15:53.500
safe game for so long.
I it's just cool. I

326
00:15:53.500 --> 00:15:56.230
don't think people get the
respect they deserve for the,

327
00:15:56.530 --> 00:16:00.970
either the organizational willpower that
X-Box gives us a backwards

328
00:16:00.970 --> 00:16:04.570
compatibility across everything, not just
making it pretty, but making

329
00:16:04.570 --> 00:16:06.550
it functional. It's really cool
to be able to light

330
00:16:06.550 --> 00:16:08.440
up the scenario where, you
know, as you said, you

331
00:16:08.440 --> 00:16:10.570
keep your safe game that
you had from 10 years

332
00:16:10.570 --> 00:16:13.540
ago. And, and similarly, all
these games that you bought

333
00:16:13.540 --> 00:16:16.390
digitally and just one day,
Hey, it shows up and

334
00:16:16.390 --> 00:16:19.180
you're ready to install this
week. We've got a new

335
00:16:19.180 --> 00:16:21.940
game ready for combat. And
this game that you played

336
00:16:21.940 --> 00:16:24.700
back then go ahead and
again, yeah. It's funny that

337
00:16:24.700 --> 00:16:26.680
you mentioned that the idea
that I don't, I remember

338
00:16:26.680 --> 00:16:28.810
when I bought that digitally,
you know, and then suddenly,

339
00:16:29.110 --> 00:16:31.170
you know, Knights of the
old Republic is available again.

340
00:16:31.210 --> 00:16:32.740
It's like, Oh, I guess
I can install that and

341
00:16:32.740 --> 00:16:35.230
play that. And more importantly,
introduce it to my kids

342
00:16:35.890 --> 00:16:37.540
and not have them tease
me because at the end

343
00:16:37.540 --> 00:16:39.760
of that movie is black
and white daddy. Yeah, Exactly.

344
00:16:39.760 --> 00:16:41.770
If it had been playing
fusion friendly with my kids

345
00:16:41.770 --> 00:16:44.680
and a Knights of the
old Republic, I'm working through

346
00:16:44.680 --> 00:16:46.420
it with my son, cause
he's a huge star Wars

347
00:16:46.420 --> 00:16:49.060
fan. And it's really cool
to have this experience that,

348
00:16:49.270 --> 00:16:52.270
you know, I have great
memories of the game and

349
00:16:52.450 --> 00:16:55.630
you talk about movies, not
being black and white video

350
00:16:55.630 --> 00:16:58.090
games. There's interesting thing of,
it's kind of historically been

351
00:16:58.090 --> 00:17:00.850
a, well, you play a
generation and then that's it,

352
00:17:00.850 --> 00:17:02.590
it's over. And it's kind
of hard to play those

353
00:17:02.590 --> 00:17:05.740
games anymore. But the great
video game is going to

354
00:17:05.740 --> 00:17:08.200
be a great video game,
10, 20, 30 years from

355
00:17:08.200 --> 00:17:11.470
now, and being able to
preserve my collection of games

356
00:17:11.470 --> 00:17:14.110
and those memories and relive
with my kids, same thing

357
00:17:14.110 --> 00:17:16.420
I would do with a
movie. It's really nice being

358
00:17:16.420 --> 00:17:18.790
a part of that As
a, as a consumer. I

359
00:17:18.790 --> 00:17:21.070
hope, I mean, I don't
have any inside baseball, but

360
00:17:21.070 --> 00:17:23.200
I hope that this is
kind of the end of

361
00:17:23.200 --> 00:17:26.380
the, of the console generation,
every certain number of years.

362
00:17:26.380 --> 00:17:29.530
And if this, if the
entire X-Box, you know, game

363
00:17:29.530 --> 00:17:32.770
library can be brought forward
forever, then you know, like

364
00:17:32.770 --> 00:17:34.600
you say, 20 years from
now, we'll still be playing

365
00:17:34.930 --> 00:17:37.600
games across multiple generations on
a single piece of hardware,

366
00:17:37.600 --> 00:17:40.990
which will be pretty exciting.
Hey folks, Intel is a

367
00:17:40.990 --> 00:17:44.110
sponsor this week and I
welcome them because they're bringing

368
00:17:44.110 --> 00:17:47.500
some high performance developer tools
for all of us check

369
00:17:47.500 --> 00:17:52.170
out Intel's parallel studio X,
E I've talked about parallelism

370
00:17:52.170 --> 00:17:54.300
before on the show and
the importance of using the

371
00:17:54.300 --> 00:17:57.750
complete instruction set, unlocking the
power of the process or

372
00:17:57.750 --> 00:18:00.210
that your code is running
on. Now, you all might

373
00:18:00.210 --> 00:18:03.090
be writing C or C
plus plus Python or even

374
00:18:03.090 --> 00:18:06.060
Fortran, but as your code
building in such a way

375
00:18:06.090 --> 00:18:07.650
and written in such a
way that it uses the

376
00:18:07.650 --> 00:18:14.910
latest techniques for vectorization multithreading
multi-node parallelization or memory optimization,

377
00:18:15.570 --> 00:18:18.270
Intel parallel studio ECC has
a lot of new stuff

378
00:18:18.270 --> 00:18:22.020
for 2018 across all these
languages, get a free download

379
00:18:22.140 --> 00:18:27.330
at <inaudible> dot com slash
parallel studio XE, or certainly

380
00:18:27.330 --> 00:18:30.090
go and Google or Google
with being for Intel parallel

381
00:18:30.090 --> 00:18:33.900
studio XE and get started
boosting your app's performance with

382
00:18:33.900 --> 00:18:37.680
smart parallel code with a
lot less effort, check them

383
00:18:37.680 --> 00:18:44.730
out. bitly.com/parallel studio X E.
So MIP maps back to

384
00:18:44.730 --> 00:18:48.270
the tech MIP maps that's
level of detail, right? That's

385
00:18:48.270 --> 00:18:51.870
the image quality. They were
also originally done to reduce

386
00:18:51.870 --> 00:18:53.910
stress on the GPU and
the CPU because of that

387
00:18:53.910 --> 00:18:57.210
back. How do you do,
do you use the same

388
00:18:57.210 --> 00:18:59.790
kind of techniques to keep
the processor working, but not

389
00:18:59.790 --> 00:19:02.360
working so hard that you're
going to lose? So we

390
00:19:02.360 --> 00:19:04.970
don't, don't particularly in terms
of MyMaps like you get

391
00:19:04.970 --> 00:19:08.720
the benefit of less memory
consumption when things are far

392
00:19:08.720 --> 00:19:13.370
away and you're using lower-level
MIPS, but for us, a

393
00:19:13.370 --> 00:19:16.220
lot of the cost is
we're running an emulator. And

394
00:19:16.220 --> 00:19:19.550
so the normal kind of
emulator thing of in order

395
00:19:19.550 --> 00:19:23.030
to maintain accuracy, you end
up doing, you know, instead

396
00:19:23.030 --> 00:19:25.730
of a simple single operation,
maybe have to do a

397
00:19:25.730 --> 00:19:28.940
few things. One thing that
pops to mind is when

398
00:19:28.940 --> 00:19:31.370
they were emulating the original
Xbox on the Xbox three

399
00:19:31.370 --> 00:19:35.180
60, and they had to
do a floating point divide.

400
00:19:35.930 --> 00:19:40.730
And it turned out that
the original Xbox headaches slightly

401
00:19:40.730 --> 00:19:44.600
more accurate divide in certain
cases. And so in the

402
00:19:44.600 --> 00:19:47.810
emulator, what they would do
is do the divide and

403
00:19:47.810 --> 00:19:51.740
then do a Newton Rapson
iteration to refine the result

404
00:19:51.770 --> 00:19:54.440
and be able to match
bit for bit what the

405
00:19:54.440 --> 00:19:57.620
original console produced. And so
just in general, with emulators,

406
00:19:57.620 --> 00:20:00.770
you ended up doing all
these weird things of, well,

407
00:20:00.770 --> 00:20:04.700
in the case of Nan's
or, you know, certain D

408
00:20:04.700 --> 00:20:07.250
normal values, the results is
different. And so we have

409
00:20:07.250 --> 00:20:09.140
to do these expensive tests
to make sure that we

410
00:20:09.140 --> 00:20:12.640
get bid accurate results. They're
similar kind of thing in

411
00:20:12.650 --> 00:20:16.460
the emulator is that our
shaders ended up being way

412
00:20:16.460 --> 00:20:18.410
more complicated than they would
normally be because we have

413
00:20:18.410 --> 00:20:21.710
to handle some of those
weird edge cases or certain

414
00:20:21.710 --> 00:20:24.200
pieces of hardware. There are
certain techniques on three 60

415
00:20:24.200 --> 00:20:27.500
that were extremely fast and
in emulating them, they end

416
00:20:27.510 --> 00:20:31.090
up consuming huge percentage of
our frame time. And, and

417
00:20:31.100 --> 00:20:33.620
so there's kind of, if
we could just run the

418
00:20:33.620 --> 00:20:36.170
same code, yeah. It'd be
trivial to run this thing

419
00:20:36.200 --> 00:20:38.900
at whatever frame rate we
wanted, but to be able

420
00:20:38.900 --> 00:20:41.480
to run it emulated. So
it's running the same way

421
00:20:41.480 --> 00:20:44.240
it did on a physical
three 60, we ended up

422
00:20:44.240 --> 00:20:48.190
kind of having the tray
sometimes various tricks to make

423
00:20:48.190 --> 00:20:49.570
some of these things that
end up being much more

424
00:20:49.570 --> 00:20:52.600
expensive under an emulator, you
know, where can we reduce

425
00:20:52.600 --> 00:20:55.770
those turn? Some of those
things off The Xbox three

426
00:20:55.770 --> 00:20:59.370
60 was a, was a
IBM power PC based thing,

427
00:20:59.370 --> 00:21:02.160
right? Yes. What is the
Xbox one? X Xbox one

428
00:21:02.160 --> 00:21:05.580
X is X 64. Okay.
So you are literally running

429
00:21:05.580 --> 00:21:09.570
a power PC emulator and
emulating the original GPU and

430
00:21:09.570 --> 00:21:13.080
then assume any of the
weirdnesses of all those things.

431
00:21:13.260 --> 00:21:16.020
Yeah. And you know, if
it did something even remotely

432
00:21:16.020 --> 00:21:19.230
wrong, you also have to
be wrong On purpose. Exactly.

433
00:21:19.230 --> 00:21:21.990
And it may be nobody
ever intentionally assumed that that

434
00:21:21.990 --> 00:21:25.380
wrong thing would happen, but
some game accidentally used it

435
00:21:25.410 --> 00:21:28.410
and took a dependency on
it. And so even if

436
00:21:28.410 --> 00:21:30.750
something was a mistake, well,
we've gotta be able to

437
00:21:30.750 --> 00:21:33.270
faithfully emulate it because some
games going to do it

438
00:21:33.420 --> 00:21:37.140
right. Taking a bug as
a dependency. Exactly. Oftentimes we'll

439
00:21:37.140 --> 00:21:40.050
say there's no way anyone
ever did that. And then

440
00:21:40.260 --> 00:21:42.720
without fail, two months later,
or six months later, we

441
00:21:42.720 --> 00:21:44.850
find out, Nope, here's the
title that did that. Right.

442
00:21:45.180 --> 00:21:47.370
And then also we have
to remember that there's an

443
00:21:47.400 --> 00:21:50.430
Xbox one and Xbox one
S and an X, and

444
00:21:50.430 --> 00:21:53.400
you've got to make it
scale up appropriately as it

445
00:21:53.400 --> 00:21:55.650
moves through these, these kind
of three sub generations of

446
00:21:55.650 --> 00:21:58.440
X-Box ones we do. And
in terms of the development

447
00:21:58.440 --> 00:22:00.330
side for a game that
we're not doing an Xbox

448
00:22:00.330 --> 00:22:03.600
one X enhancement for, and
to just ship it as

449
00:22:03.600 --> 00:22:07.440
is, and it will generally
run fine. Now our testing

450
00:22:07.440 --> 00:22:09.300
has to go through and
make sure that running it

451
00:22:09.300 --> 00:22:12.150
faster on the Xbox one
X doesn't cause problems. But

452
00:22:12.330 --> 00:22:15.180
that's something that we really
haven't seen outside of maybe

453
00:22:15.180 --> 00:22:17.280
a couple of isolated cases.
And does this mean that

454
00:22:17.280 --> 00:22:19.770
people like to have to
play the whole decile? Like

455
00:22:19.860 --> 00:22:21.570
someone's literally like, Oh man,
I got to go through

456
00:22:21.570 --> 00:22:24.690
the Witcher again, We have
an army of testers and

457
00:22:25.350 --> 00:22:27.240
they will go through and
kind of games go through

458
00:22:27.240 --> 00:22:31.140
these different phases of, well,
we've ingested the binary and

459
00:22:31.140 --> 00:22:33.810
that we can make an
emulated version of it. And

460
00:22:33.810 --> 00:22:35.160
then we run it for
a while and capture some

461
00:22:35.160 --> 00:22:37.650
data about it. And then
we have what we think

462
00:22:37.740 --> 00:22:39.840
is a shippable bill. And
then we have them play

463
00:22:39.840 --> 00:22:43.290
through the entire game, start
to finish kind of trying

464
00:22:43.290 --> 00:22:45.870
to find every corner and
make sure everything works. And

465
00:22:45.870 --> 00:22:48.060
now they do that both
on a Xbox one and

466
00:22:48.060 --> 00:22:50.850
the Xbox one X. And
then as we get closer,

467
00:22:50.850 --> 00:22:53.490
there's some more checks before
we ship, but there are

468
00:22:53.490 --> 00:22:56.130
a large number of people
whose job is to play

469
00:22:56.130 --> 00:22:59.580
through these games over and
over. Oh my goodness. Now

470
00:22:59.610 --> 00:23:02.280
there's also something I noticed
that I was surprised me

471
00:23:02.280 --> 00:23:05.640
if you, you know, ordinarily
there's the Xbox guide button,

472
00:23:05.640 --> 00:23:08.040
that big kind of bright
button in the middle of

473
00:23:08.040 --> 00:23:09.870
your controller and you push
it and takes you home

474
00:23:10.230 --> 00:23:12.030
on an Xbox three 60,
it would bring up the

475
00:23:12.060 --> 00:23:14.730
Xbox three 60 guide. The
way that you get to

476
00:23:14.730 --> 00:23:17.610
the guide on Xbox one
X, if you want to

477
00:23:17.610 --> 00:23:19.530
get into the Xbox three
60 guide is kind of

478
00:23:19.530 --> 00:23:22.230
a punch through you, push
start and select or view

479
00:23:22.230 --> 00:23:26.310
and menu simultaneously. And you
get into, is it a

480
00:23:26.310 --> 00:23:30.240
real X-Box guide or an
emulated one Running the emulator

481
00:23:30.250 --> 00:23:32.430
still? And at that point,
it's just emulating what would

482
00:23:32.430 --> 00:23:34.140
happen on a three 60
in terms of bringing up

483
00:23:34.140 --> 00:23:36.930
the guide, right? But it
has a special menu that

484
00:23:36.930 --> 00:23:39.600
says Xbox one X settings,
which kind of increases the

485
00:23:39.600 --> 00:23:43.470
inception of it all because
you're finding a setting within

486
00:23:43.470 --> 00:23:45.770
the emulator that refers back
to the, it's almost like

487
00:23:45.770 --> 00:23:48.380
finding a VM specific setting.
And it has a choice

488
00:23:48.380 --> 00:23:51.370
between graphics or performing. And
it was kind of fun

489
00:23:51.370 --> 00:23:53.440
to put that into the
guide there. Cause that's probably

490
00:23:53.440 --> 00:23:55.480
the last button that will
ever be added on an

491
00:23:55.510 --> 00:23:57.570
Xbox three 60. And what
is it now it's referenced

492
00:23:57.570 --> 00:24:01.870
to this contract, you know,
came out 15 years after

493
00:24:01.870 --> 00:24:03.250
the first one or 10
years or whatever it is.

494
00:24:03.490 --> 00:24:05.260
Why would I ever not
want to optimize the game

495
00:24:05.260 --> 00:24:07.330
for graphics? If you wanted
to see what it looked

496
00:24:07.330 --> 00:24:09.250
like? Originally, one thing we've
seen a lot of people

497
00:24:09.250 --> 00:24:13.000
do is record comparisons of
the graphics mode versus the

498
00:24:13.000 --> 00:24:15.850
performance mode. The other reason
that's in there is if

499
00:24:15.850 --> 00:24:18.940
there's a case where we
aren't able to maintain frame

500
00:24:18.940 --> 00:24:21.790
rate, while running it to
the NYNEX enhanced version, you

501
00:24:21.790 --> 00:24:24.670
could run at a higher
frame rate potentially across all

502
00:24:24.670 --> 00:24:27.820
the games we've shipped there.
Basically no instances. I think

503
00:24:27.820 --> 00:24:29.770
there may be one or
two corner cases where we

504
00:24:29.770 --> 00:24:31.810
don't quite hold the frame
rate running in the enhanced

505
00:24:31.810 --> 00:24:33.580
mode. But in terms of,
if you just want to

506
00:24:33.580 --> 00:24:35.830
enjoy the game, we're very
careful to make sure that

507
00:24:35.830 --> 00:24:38.380
if we're shipping an enhanced
version, it keeps its frame

508
00:24:38.380 --> 00:24:40.840
rate and graphics mode is
what you should be playing

509
00:24:40.840 --> 00:24:43.570
in. This is amazing. So
full frame rate that you

510
00:24:43.570 --> 00:24:46.900
expect at nine X, the
pixel count and virtually no

511
00:24:46.900 --> 00:24:49.450
games that you've seen that
have that, that can't hit

512
00:24:49.450 --> 00:24:51.700
that full, that full four,
right? I've never seen a

513
00:24:51.700 --> 00:24:54.610
slowdown on any of that.
Yeah. The army of testers

514
00:24:54.610 --> 00:24:56.470
has found one or two
scenes where you look a

515
00:24:56.470 --> 00:24:59.050
certain direction and it slows
down, but just playing through

516
00:24:59.050 --> 00:25:02.740
the game. I see. You're
unlikely to find that, Okay,

517
00:25:03.040 --> 00:25:06.610
so what about bugs? Right?
This can't just be, you

518
00:25:06.610 --> 00:25:08.980
know, the, the story that
you told I am, we

519
00:25:08.980 --> 00:25:10.860
figured this out and I
guess it looks like it

520
00:25:10.860 --> 00:25:13.000
looks amazing and it has
so much power. Like of

521
00:25:13.000 --> 00:25:15.670
course it looks amazing. There
must be this game or

522
00:25:15.670 --> 00:25:18.490
that game had a weird
way to thinks about stuff

523
00:25:18.520 --> 00:25:21.910
or bugs that got you
unexpected results. When you started

524
00:25:21.910 --> 00:25:27.190
throwing high res textures and
different, different aliases. Anti-aliasing, There's

525
00:25:27.190 --> 00:25:29.700
been all sorts of books
that come through this one.

526
00:25:29.710 --> 00:25:32.200
One of the more interesting
ones was there's something you

527
00:25:32.200 --> 00:25:34.450
can do called the visibility
query, which is basically a

528
00:25:34.450 --> 00:25:36.370
way for the game to
say, I want to know

529
00:25:36.370 --> 00:25:40.360
how many pixels actually get
drawn by this draw. And

530
00:25:40.360 --> 00:25:43.540
so game will draw some
stuff and then it will

531
00:25:44.260 --> 00:25:47.740
draw something under a visibility
query and use that later

532
00:25:47.740 --> 00:25:49.990
on the CPU or on
a future GPU call to

533
00:25:49.990 --> 00:25:54.070
make a decision. And there
was a game where I

534
00:25:54.070 --> 00:25:56.560
think it was an extra
flashlight got turned on, couldn't

535
00:25:56.560 --> 00:25:59.080
figure out what it was
configured. And eventually attracted down

536
00:25:59.080 --> 00:26:01.810
to the visibility query was
now saying there were nine

537
00:26:01.810 --> 00:26:03.580
times the number of pixels
visible that there had been

538
00:26:03.580 --> 00:26:06.490
before, and the CPU was
doing some calculation and saying,

539
00:26:06.850 --> 00:26:08.980
Oh, that's a bunch of
stuff. I, I guess it

540
00:26:08.980 --> 00:26:12.010
was a light beam, a
glow from a light source.

541
00:26:12.760 --> 00:26:14.860
And so it was saying,
well, that looks like a

542
00:26:14.860 --> 00:26:17.020
lot of pixels were visible
from this light source, even

543
00:26:17.020 --> 00:26:19.870
though it was barely visible,
but since we'd scaled up

544
00:26:19.900 --> 00:26:22.810
the visibility query, the CPU
said, that's visible enough. I

545
00:26:22.810 --> 00:26:26.140
need to show this glow.
And so it's really awkward.

546
00:26:26.140 --> 00:26:27.880
Glow showed through and we
had to go through and

547
00:26:27.880 --> 00:26:30.130
say, Nope, when you're doing
a visibility query, cut that

548
00:26:30.130 --> 00:26:34.480
down by the appropriate ratio
In the windows world. I

549
00:26:34.480 --> 00:26:37.480
know that there's all kinds
of backwards, compatibility kind of

550
00:26:37.510 --> 00:26:40.660
catalogs. So if, and I'm
just picking a name, I

551
00:26:40.660 --> 00:26:41.980
don't know this to be
true. I'm just picking it.

552
00:26:41.980 --> 00:26:45.840
Like, let's say QuickBooks acts
weird on windows eight instead

553
00:26:45.840 --> 00:26:48.450
of windows seven. There's a
whole team at Microsoft that

554
00:26:48.450 --> 00:26:52.290
says, Oh, look, they called
get H wind in a

555
00:26:52.290 --> 00:26:55.050
weird way. They're expecting a
certain thing. So then they

556
00:26:55.050 --> 00:26:59.280
don't actually patch QuickBooks and
they don't really patch windows.

557
00:26:59.580 --> 00:27:02.190
They just kind of like
promise to lie. Or they

558
00:27:02.190 --> 00:27:05.010
patch that one function call
as a way of saying,

559
00:27:05.730 --> 00:27:08.130
yeah, when QuickBooks does it,
it's different. We'll give them

560
00:27:08.130 --> 00:27:11.040
something special. And this is
part of windows, larger dedication

561
00:27:11.040 --> 00:27:15.630
to things just working, right?
How are you patching without

562
00:27:15.630 --> 00:27:18.590
patching in the way that
you're describing? So in terms

563
00:27:18.590 --> 00:27:21.440
of, of things patch like
that, I think more on

564
00:27:21.470 --> 00:27:24.680
the CPU side, where for
instance, we've had games that

565
00:27:24.680 --> 00:27:27.260
were originally multiple discs. And
so you play through your

566
00:27:27.260 --> 00:27:29.210
game and at some point
it pops up a dialogue

567
00:27:29.210 --> 00:27:31.430
that says, please insert disk
two now, and we'll have

568
00:27:31.430 --> 00:27:34.430
people go, no, we want
to ship it digitally. And

569
00:27:34.760 --> 00:27:37.310
there's not another disc to
put in. And so the

570
00:27:37.310 --> 00:27:39.350
devs will go through and
figure out where was that

571
00:27:39.350 --> 00:27:42.980
API call and stub that
out from the game. So

572
00:27:42.980 --> 00:27:45.290
instead of popping up this
dialogue, you just keep playing

573
00:27:45.290 --> 00:27:47.630
through. I'm trying to think
of if there are any

574
00:27:47.930 --> 00:27:50.630
GPU cases that are similar
to that, a lot of

575
00:27:50.630 --> 00:27:52.820
it is just in the
scaled world, make sure we're

576
00:27:52.820 --> 00:27:55.130
lying appropriately. So the game
isn't able to realize that

577
00:27:55.400 --> 00:27:58.430
the pixel counts are different
than what it expected. Is

578
00:27:58.430 --> 00:27:59.840
it kind of a, of
a, of a, a bit

579
00:27:59.840 --> 00:28:01.480
of state management? Do you
have to keep them, like

580
00:28:01.780 --> 00:28:03.260
how, how long have you
been lying? Have you been

581
00:28:03.260 --> 00:28:05.810
lying in consistently? Are any
of our lives gonna come

582
00:28:05.810 --> 00:28:07.130
back on us when they
get to the end of

583
00:28:07.130 --> 00:28:09.260
this level? Yup. Usually we
just have to worry about

584
00:28:09.260 --> 00:28:13.520
within one frame, occasionally things
persist beyond that, but sometimes

585
00:28:13.520 --> 00:28:16.910
it's even this we'll keep
a copy of our super

586
00:28:16.910 --> 00:28:18.830
fancy high res version, but
we'll also make a low

587
00:28:18.830 --> 00:28:21.170
risk version because the CPU
is going to access it

588
00:28:21.170 --> 00:28:23.330
or something else is going
to access it and need

589
00:28:23.330 --> 00:28:27.770
that lower quality version for
whatever reason. Oh, wow. That

590
00:28:27.920 --> 00:28:31.100
just blew my mind. So
what you show the user,

591
00:28:31.130 --> 00:28:34.220
which looks amazing may not
necessarily be what you told

592
00:28:34.220 --> 00:28:36.440
the CPU that we showed
the user and you say,

593
00:28:36.470 --> 00:28:39.290
Hey, here's the low res
version. Here's the, you know,

594
00:28:39.410 --> 00:28:41.480
the non retina display. You
go ahead and look at

595
00:28:41.480 --> 00:28:44.300
that. And it's the same,
don't worry. Exactly. And as

596
00:28:44.300 --> 00:28:46.310
long as you're lying consistently
And keep up that illusion

597
00:28:46.310 --> 00:28:48.800
that, Hey game you're, you're
just running out of normal

598
00:28:48.800 --> 00:28:50.840
life box three 60, everything
you expect to be there,

599
00:28:50.840 --> 00:28:54.140
we'll be there. It feels
like the backward compatibility library.

600
00:28:54.320 --> 00:28:56.990
And again, I'm speaking as
a, as a user started

601
00:28:56.990 --> 00:28:59.690
slow, you heard nothing but
complaints about like, well, what

602
00:28:59.690 --> 00:29:01.970
about this? And what about
that? And now it's coming

603
00:29:01.970 --> 00:29:04.580
faster and faster and faster
and faster have you, or

604
00:29:04.610 --> 00:29:06.770
is it because you all
have built up a library

605
00:29:07.250 --> 00:29:10.460
of tricks and tips and
ways like you've polished the

606
00:29:10.460 --> 00:29:12.260
way you do back in
Pat? So now you can

607
00:29:12.260 --> 00:29:15.020
start not just releasing back
compat, but also Xbox one

608
00:29:15.020 --> 00:29:17.810
enhanced. Yeah, I think a
lot of it just comes

609
00:29:17.810 --> 00:29:20.840
with the maturity of the
emulator and the optimization time

610
00:29:20.840 --> 00:29:23.660
that's been put in back
when we launched, you know,

611
00:29:23.660 --> 00:29:25.580
we had some games that
we wanted to ship that

612
00:29:26.090 --> 00:29:27.470
we just couldn't get to
run a frame rate. We

613
00:29:27.470 --> 00:29:29.180
had games that instead of
at 30, they would run

614
00:29:29.180 --> 00:29:32.330
at 10 or 15 frames
a second and we don't

615
00:29:32.330 --> 00:29:34.730
want to ship this poor
experience. So at the time

616
00:29:34.730 --> 00:29:37.010
we said, you know, here's
a title. We don't think

617
00:29:37.010 --> 00:29:39.830
we're ever going to be
able to ship. And then

618
00:29:40.190 --> 00:29:42.310
over the next year two,
as we put Out more

619
00:29:42.310 --> 00:29:45.850
titles, we optimize various things
and make bug fixes in

620
00:29:45.850 --> 00:29:49.720
the emulator. And the technology
has matured and matured. And

621
00:29:49.720 --> 00:29:51.940
then we came back and
said, Hey, this game that

622
00:29:51.940 --> 00:29:53.770
we didn't ever think we'd
be able to ship. If

623
00:29:53.770 --> 00:29:55.690
you play it now it's
holding 30 most of the

624
00:29:55.690 --> 00:29:59.170
time. And we're able to
go back to it, able

625
00:29:59.170 --> 00:30:01.360
to ship it. And so
there have been titles. We

626
00:30:01.360 --> 00:30:03.700
didn't think we'd be able
to ship. And as of

627
00:30:03.700 --> 00:30:06.790
right now been able to,
to ship one, the first

628
00:30:06.790 --> 00:30:08.890
one that ever stuck out
as this might not be

629
00:30:08.890 --> 00:30:11.170
possible in the emulator. And
so that was a really,

630
00:30:11.170 --> 00:30:14.920
really cool feeling. Yeah. I
I'm actually going and buying

631
00:30:14.920 --> 00:30:16.660
a bunch of these games
that like, you know, for

632
00:30:16.660 --> 00:30:19.810
cheap, like you can buy
the original Assassin's creed, which

633
00:30:19.810 --> 00:30:23.230
was gorgeous at the time.
And it's even more gorgeous

634
00:30:23.230 --> 00:30:25.750
now. And it's like 15
bucks, 10 bucks, 20 bucks,

635
00:30:25.750 --> 00:30:28.000
you know, and then it's
this thing of a great

636
00:30:28.000 --> 00:30:29.770
game is still a great
game. Whether it came out

637
00:30:30.070 --> 00:30:32.740
10 years ago or it
came out this week. Absolutely.

638
00:30:32.950 --> 00:30:35.020
I just, like I say,
I just bought and finished

639
00:30:35.020 --> 00:30:38.260
from an old saved game.
Explain yourself simply because I

640
00:30:38.260 --> 00:30:40.300
saw that, like, I've been
finally waiting for this and

641
00:30:40.300 --> 00:30:43.570
it's, it's backward compat. And
I went on Amazon and

642
00:30:43.570 --> 00:30:45.250
I think I got it
for five bucks and got

643
00:30:45.250 --> 00:30:47.920
it immediately. And I'm looking
forward to getting back into

644
00:30:47.920 --> 00:30:50.050
crackdown. I know I have
a saved game and crackdown

645
00:30:50.350 --> 00:30:52.060
going back awhile and I
never made it through, which

646
00:30:52.060 --> 00:30:54.760
are two, which is now
back compat and enhanced as

647
00:30:54.760 --> 00:30:57.400
well. Yeah. Last question I
have is why is it

648
00:30:57.400 --> 00:30:59.950
called the hygiene method? If
there's a whole team, it

649
00:30:59.950 --> 00:31:01.690
got named after me because
I was kind of the

650
00:31:01.690 --> 00:31:05.590
dev that experimented with it
and got the technology up

651
00:31:05.590 --> 00:31:09.070
and running the GPU team
is relatively small. There's about

652
00:31:09.070 --> 00:31:11.470
five of us or so,
but I've definitely had help

653
00:31:11.620 --> 00:31:14.680
as we've been getting these
games enhanced. So despite having

654
00:31:14.680 --> 00:31:16.420
my name on it, it's,
it's been a team effort.

655
00:31:18.070 --> 00:31:20.020
Do you feel weird having,
like, I assume you see

656
00:31:20.020 --> 00:31:22.390
the, the Reddit threads in
the forum threads, like the

657
00:31:22.390 --> 00:31:25.090
hygiene method, it's a method,
you know, like it's capital

658
00:31:25.090 --> 00:31:27.820
H capital M like, you
know, it's a method. The

659
00:31:27.820 --> 00:31:29.800
weirdest thing for me is
seeing my name spelled correctly

660
00:31:29.800 --> 00:31:32.500
and having people pronounce it
correctly because all throughout my

661
00:31:32.500 --> 00:31:35.350
life, it's been a strange
name and people struggle with

662
00:31:35.350 --> 00:31:39.220
that. And so that's been,
yeah, not anymore. You've got

663
00:31:39.220 --> 00:31:41.950
the juice you get, you
get auto completed when people

664
00:31:41.950 --> 00:31:45.340
type your name now, which
is pretty sweet. Well, thanks

665
00:31:45.340 --> 00:31:47.200
so much for chatting with
me today. It's been a

666
00:31:47.200 --> 00:31:49.780
pleasure. Thanks for having me
on, I would really, really,

667
00:31:49.780 --> 00:31:52.840
really encourage folks that have
Xbox and that have an

668
00:31:52.870 --> 00:31:55.180
Xbox one X, or if
you have a friend check

669
00:31:55.180 --> 00:31:57.880
this out, the backwards compat
is such a joy. It

670
00:31:57.880 --> 00:31:59.860
really cannot be overstated. I
know I sound like a

671
00:31:59.860 --> 00:32:02.650
fan boy, but it has
really opened up my whole

672
00:32:02.650 --> 00:32:05.140
library and brought me back
to a bunch of games

673
00:32:05.140 --> 00:32:07.630
that I I'm just happy
that I've been able to,

674
00:32:07.870 --> 00:32:11.080
to play them again. This
has been another episode of

675
00:32:11.080 --> 00:32:34.230
Hansel minutes and we'll see
you again next week. <inaudible>.

