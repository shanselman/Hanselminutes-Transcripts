WEBVTT FILE

1
00:00:00.510 --> 00:00:02.580
A big thank you to
our sponsors because they make

2
00:00:02.580 --> 00:00:05.100
the show possible. And I
hope that you support them

3
00:00:05.100 --> 00:00:08.670
the way they support us
progress. Software is the creator

4
00:00:08.670 --> 00:00:11.820
of the most comprehensive developer
toolkit for building modern apps

5
00:00:11.820 --> 00:00:15.480
on the market. Today Tellerik
dev craft with more than

6
00:00:15.480 --> 00:00:20.040
1100 telerik.net and Kendo, UI
JavaScript components and controls. You

7
00:00:20.040 --> 00:00:23.580
can easily build modern high-performance
web mobile and desktop apps,

8
00:00:23.640 --> 00:00:27.030
as well as chatbots. The
tools that also includes reporting

9
00:00:27.030 --> 00:00:30.630
solutions, automated testing, and productivity
tools, and come to the

10
00:00:30.630 --> 00:00:33.930
range of support options. New
this year is a free

11
00:00:33.930 --> 00:00:37.770
online trading program for all
license holders. With this alongside

12
00:00:37.770 --> 00:00:41.670
thousands of demos and source
code available, comprehensive documentation and

13
00:00:41.670 --> 00:00:44.370
a full assortment of visual
studio templates, you'll be up

14
00:00:44.370 --> 00:00:47.340
and running with the progress
Tellerik and Kendo UI controls

15
00:00:47.340 --> 00:00:50.970
in no time. Download a
free 30 day trial today

16
00:00:51.030 --> 00:01:12.890
at tellerik.com/hanselman that's T L
E R I k.com/hanselman. Hi,

17
00:01:12.890 --> 00:01:15.440
this is Scott Hanselman. This
is another episode, Cancel minutes.

18
00:01:15.440 --> 00:01:18.320
And today I'm talking with
Andrew Locke. He's just published

19
00:01:18.380 --> 00:01:24.140
asp.net core inaction with Manning
fantastic three-part book that I've

20
00:01:24.140 --> 00:01:26.570
got access to online, and
then you can purchase as

21
00:01:26.570 --> 00:01:30.710
well. We've even put together
a 40% off coupon with

22
00:01:30.740 --> 00:01:35.720
the code pod Hanselman 18.
I'll tell you that code

23
00:01:35.720 --> 00:01:37.460
at the end of the
show, and we'll put it

24
00:01:37.460 --> 00:01:39.470
in a link in the
show notes so you can

25
00:01:39.470 --> 00:01:42.980
get the same book ebook
or physical book for 40%

26
00:01:42.980 --> 00:01:45.890
off. How's it going, sir?
I'm good. Thank you. How

27
00:01:45.890 --> 00:01:49.520
are you doing? I'm okay,
so you survived writing a

28
00:01:49.520 --> 00:01:52.520
book. It's like a 700
page book. I mean, you

29
00:01:52.520 --> 00:01:54.890
really did it. It's it's
got some heft to it.

30
00:01:54.890 --> 00:01:57.140
Yeah. It was a toddler.
I get to go there

31
00:01:57.140 --> 00:02:00.710
in the end. I I've
written a few books as

32
00:02:00.710 --> 00:02:03.530
well, and they are something
where you like, I'm so

33
00:02:03.530 --> 00:02:05.780
excited. I'm writing a book
and then you're like, Oh

34
00:02:05.780 --> 00:02:07.700
my God, I'm writing a
book. I'm like, Oh, am

35
00:02:07.700 --> 00:02:09.380
I, what have I done?
Why have I done this

36
00:02:09.380 --> 00:02:12.230
to myself and my family?
Exactly. And you realize you

37
00:02:12.230 --> 00:02:14.060
got to edit the book
and that's that I started

38
00:02:14.060 --> 00:02:17.720
really, the editing part really
is no fun because you're

39
00:02:17.720 --> 00:02:19.700
like, no, every word I
wrote is exactly as I

40
00:02:19.700 --> 00:02:22.790
wanted it. Like, we don't
want to renumber these chapters.

41
00:02:22.790 --> 00:02:25.040
It's perfect, but you have
to do the work and

42
00:02:25.040 --> 00:02:27.140
you've already read it by
that point, but at 15

43
00:02:27.140 --> 00:02:28.700
times, and now you have
to go through it again.

44
00:02:30.260 --> 00:02:34.520
So, so you wrote this
on asp.net core to do,

45
00:02:34.550 --> 00:02:36.470
have you been following A's
but then of course, since

46
00:02:36.470 --> 00:02:38.600
the beginning or where do
you, you know, what kind,

47
00:02:38.600 --> 00:02:41.660
what are your qualifications pretty
close to the beginning? I,

48
00:02:42.230 --> 00:02:45.590
I was aware of the
whole project K thing, vaguely,

49
00:02:45.590 --> 00:02:47.900
but I didn't really pay
much attention. And it was

50
00:02:47.900 --> 00:02:52.670
around about the RC one
time that I actually do

51
00:02:52.670 --> 00:02:55.610
a bit so I could
play with, and I wasn't

52
00:02:55.610 --> 00:02:57.590
gonna break my machine, trying
to do say that I,

53
00:02:57.890 --> 00:03:02.920
I really started paying attention.
And then I guess it

54
00:03:02.920 --> 00:03:07.150
was just before I paid
attention and played with the

55
00:03:07.150 --> 00:03:10.210
bits RC one, RC two.
And then I started the

56
00:03:10.210 --> 00:03:13.840
book just before the 1.0
release. Oh, wow. This has

57
00:03:13.840 --> 00:03:15.820
been a long time coming.
It has been a long

58
00:03:15.820 --> 00:03:18.310
time coming. Yeah. And it's
been a basically had to

59
00:03:18.310 --> 00:03:23.630
be written from 1.0 to
2.0, because of that. Do

60
00:03:23.640 --> 00:03:26.250
you feel like, I mean,
we all joke about Microsoft

61
00:03:26.250 --> 00:03:28.890
and version numbers and stuff,
but you know, they say

62
00:03:28.890 --> 00:03:31.740
wasteful, wait till version three,
doesn't it feel like, you

63
00:03:31.740 --> 00:03:33.960
know, it's been a core
two Oh two, one kind

64
00:03:33.960 --> 00:03:36.030
of is version three. Like,
is that the one people

65
00:03:36.030 --> 00:03:38.640
should pay attention to? I
mean, yeah. I feel like,

66
00:03:39.810 --> 00:03:42.840
especially with 2.1 being an
LTS release, if you're going

67
00:03:42.840 --> 00:03:45.330
to just coming in, that
seems like a great place

68
00:03:45.330 --> 00:03:47.730
to start. Even if you
don't, even, if you intend

69
00:03:47.760 --> 00:03:50.370
to keep up with the
current leases, it seems like

70
00:03:50.700 --> 00:03:53.790
2.1 is the place to
come in. We should make

71
00:03:53.790 --> 00:03:56.010
sure that we expand our
acronyms for people who might

72
00:03:56.010 --> 00:04:00.750
not be familiar. So LTS
means longterm support. Right? Correct.

73
00:04:00.750 --> 00:04:03.300
And then there's the two
that I think it's three

74
00:04:03.300 --> 00:04:06.270
years of support you get
with that. And then if

75
00:04:06.270 --> 00:04:08.790
you stay on the sort
of the latest releases, which

76
00:04:08.790 --> 00:04:12.900
is the current branch, then
that's supported, I can't remember

77
00:04:12.930 --> 00:04:14.760
the exact dates. You probably
know this better than I

78
00:04:14.760 --> 00:04:17.810
do, but it's basically supported
until the next current release

79
00:04:17.820 --> 00:04:19.530
is. So you have to
make sure you stay up

80
00:04:19.530 --> 00:04:21.540
to date if you stay
on the current Lydia. Right.

81
00:04:21.540 --> 00:04:24.780
And they announced recently that
if you're running asp.net core

82
00:04:24.810 --> 00:04:27.780
2.1 on the, on the
full framework, on the one

83
00:04:27.780 --> 00:04:30.960
that runs on windows that
will be supported effectively indefinitely.

84
00:04:31.770 --> 00:04:34.230
Yeah. Which is great for
people who are migrating from,

85
00:04:34.680 --> 00:04:38.550
from.net framework cross, Which brings
up a really good point

86
00:04:38.550 --> 00:04:42.060
because you started in the,
in the.net, full framework kind

87
00:04:42.060 --> 00:04:45.780
of world, and then core
happened. And I think people

88
00:04:45.810 --> 00:04:48.180
might say that core has
a reputation of being, you

89
00:04:48.180 --> 00:04:52.140
know, kind of moving fast
and breaking things or, you

90
00:04:52.140 --> 00:04:55.530
know, people maybe afraid to
go to asp.net because they're

91
00:04:55.620 --> 00:04:59.160
concerned that it might not
be stable. I think, I

92
00:04:59.160 --> 00:05:02.610
think it's, it's fair to
say that, you know, dot

93
00:05:02.610 --> 00:05:05.310
net core, they left our
far happy to move fast

94
00:05:05.310 --> 00:05:08.910
and, you know, break some
things that that's has happened.

95
00:05:09.720 --> 00:05:12.390
But it feels like at
this point that everything is

96
00:05:12.590 --> 00:05:17.460
sort of calmed down a
bit, donate cord just offers

97
00:05:17.520 --> 00:05:19.470
quite a lot of advantages
that were done that framework

98
00:05:19.470 --> 00:05:23.310
at this point. And especially
with Microsoft saying that while

99
00:05:23.310 --> 00:05:24.780
done it, frameless is going
to be supported. It's not

100
00:05:24.780 --> 00:05:27.870
going to be getting any
more features. It's just done

101
00:05:27.870 --> 00:05:31.260
a core is the place
to be right now. Was

102
00:05:31.260 --> 00:05:33.810
that something that, that you
took and you took into

103
00:05:33.810 --> 00:05:36.090
consideration when you wrote this
book that, that this is

104
00:05:36.090 --> 00:05:37.620
going to be around for
awhile. So you're going to

105
00:05:37.620 --> 00:05:40.920
invest your time. Exactly. Yeah.
It was sort of clear

106
00:05:40.920 --> 00:05:43.230
from the get go in
a way that this was

107
00:05:43.230 --> 00:05:46.020
where all of the focus
will kind of be. So

108
00:05:46.020 --> 00:05:49.350
where is this book from
Difficulty perspective? I think a

109
00:05:49.350 --> 00:05:50.550
piece, a lot of people
who are listening to this

110
00:05:50.550 --> 00:05:54.690
show might have experience with
asp.net web forms or doing

111
00:05:54.690 --> 00:05:58.820
work in MVC. Really wasn't
a product. When we said

112
00:05:58.820 --> 00:06:01.790
asp.net MVC, it was more
of a pattern, but it

113
00:06:01.790 --> 00:06:04.550
became a product that had
version numbers and thing. There

114
00:06:04.550 --> 00:06:05.990
might be a lot of
people out there who have

115
00:06:05.990 --> 00:06:08.600
MVC apps and they are
kind of stuck and not

116
00:06:08.600 --> 00:06:11.320
sure what they should do
next. So the good thing

117
00:06:11.320 --> 00:06:15.730
is the, the whole NVC
web API patterns is the

118
00:06:15.730 --> 00:06:18.490
fact that they've come through
to asp.net core. So if

119
00:06:18.490 --> 00:06:20.680
you are familiar with those
in SPO and Matt land,

120
00:06:21.250 --> 00:06:24.910
it's, it's hugely transferable across.
So you don't really have

121
00:06:24.910 --> 00:06:28.060
to worry. They're not directly
compatible, but there's enough there

122
00:06:28.060 --> 00:06:30.430
that you can change a
few, namespaces add a few

123
00:06:30.430 --> 00:06:33.760
attributes and actually you can
convert if I'm asp.net apps

124
00:06:33.910 --> 00:06:36.730
to asp.net core. Not that
you necessarily should, but you

125
00:06:36.730 --> 00:06:40.330
can, if you're coming from
web forms, it's a bit

126
00:06:40.330 --> 00:06:42.430
more of a struggle in
the same way. Going from

127
00:06:42.430 --> 00:06:46.810
web forms to ASP net
MVC was a big jump.

128
00:06:47.410 --> 00:06:49.420
That's actually something that I
have a little of experience

129
00:06:49.420 --> 00:06:54.850
with because my blog still
runs asp.net, web forums, nearly

130
00:06:54.850 --> 00:06:58.240
15 years old. And people
tease me for not upgrading

131
00:06:58.240 --> 00:07:00.190
it, but it works fine.
So why should I bother?

132
00:07:00.700 --> 00:07:03.640
But I did a show
recently with my buddy Mark

133
00:07:03.640 --> 00:07:06.910
Downey, who has taken the,
this 15 year old web

134
00:07:06.910 --> 00:07:09.610
forms app and converted it
to dotnet core. And he

135
00:07:09.610 --> 00:07:13.750
did it by managing separations
of concerns and he made

136
00:07:13.750 --> 00:07:17.080
the front end MVC, even
though it was originally web

137
00:07:17.080 --> 00:07:21.410
forums, but the engine was
basically net standard and it

138
00:07:21.410 --> 00:07:23.890
didn't have too much trouble
converting it into core and

139
00:07:23.890 --> 00:07:26.890
suddenly it's cross platform. I
think that's, that's really the

140
00:07:26.890 --> 00:07:29.170
crux of it. It depends
how well your, your app

141
00:07:29.170 --> 00:07:33.040
is architected. Initially, if it's
essentially just a, you know,

142
00:07:33.040 --> 00:07:36.820
a UI wrapper around whatever
it is, then.net standard as

143
00:07:36.820 --> 00:07:38.590
well. I mean, so you
can plug in, you know,

144
00:07:38.590 --> 00:07:40.150
you can plug in a
Xamarin front end if you

145
00:07:40.150 --> 00:07:42.280
need to. Exactly. And that's
what he ended up doing.

146
00:07:42.280 --> 00:07:45.190
And well, the front end
did require some, some extra

147
00:07:45.190 --> 00:07:48.670
work, the engine, right? You
know, the data access layer

148
00:07:48.670 --> 00:07:50.950
and all of that stuff
really just moved forward quite

149
00:07:50.950 --> 00:07:54.460
nicely. That's what I found
quite. I've done a bit

150
00:07:54.460 --> 00:07:58.330
of conversion of asp.net apps
to run an asp.net core.

151
00:07:58.750 --> 00:08:01.210
Primarily we want to, we
want to run them in

152
00:08:01.210 --> 00:08:02.920
DACA. We want to be
able to have better sort

153
00:08:02.920 --> 00:08:05.500
of dev ops processes around
them, which is just it's

154
00:08:05.590 --> 00:08:08.620
frankly, easier and asp.net core
than it is running on

155
00:08:08.650 --> 00:08:12.670
Dano framework on windows. It's
funny that people, I don't

156
00:08:12.670 --> 00:08:14.080
know, I don't know if
you've had this experience, but

157
00:08:14.110 --> 00:08:17.500
when I get asp.net apps
running cross platform, or when

158
00:08:17.500 --> 00:08:19.150
I get it running in
Docker for the first time,

159
00:08:19.210 --> 00:08:22.150
I'm always just a little
bit amazed that it actually

160
00:08:22.150 --> 00:08:23.800
worked. You know what I
mean? Like I think new

161
00:08:23.800 --> 00:08:26.080
people who are listening to
this might not understand that,

162
00:08:26.080 --> 00:08:28.360
but people who've been working
in.net for many years might

163
00:08:28.360 --> 00:08:30.190
go and say, wow, that's
really a thing. It runs

164
00:08:30.190 --> 00:08:33.910
in Lennox. It's totally the
first time I, that I

165
00:08:33.910 --> 00:08:38.020
ran my very first asp.net
core app on a Mac,

166
00:08:38.320 --> 00:08:40.570
just natively on a Mac,
not having to try and

167
00:08:40.810 --> 00:08:44.530
work parallels and use all
these weird shortcuts. Cause it

168
00:08:44.530 --> 00:08:46.060
didn't work on my own
or that the first time

169
00:08:46.060 --> 00:08:50.050
it works, it is kind
of mind blowing. I did

170
00:08:50.050 --> 00:08:53.530
work in NBC and I
wrote books on NBC, but

171
00:08:53.530 --> 00:08:56.760
then I kind of took
a break and I'm noticing

172
00:08:56.760 --> 00:09:00.060
that the thing that's the
most powerful thing about asp.net

173
00:09:00.090 --> 00:09:01.860
core. And I wonder if
you agree would be this

174
00:09:01.920 --> 00:09:04.050
idea of the middleware pipeline
and you spend a lot

175
00:09:04.050 --> 00:09:06.650
of time talking about that.
Yeah, totally. That's, it's a

176
00:09:06.650 --> 00:09:11.120
completely different way of thinking
about your app compared to

177
00:09:11.480 --> 00:09:15.110
certainly the women forums way
in MVC, in airspeed on

178
00:09:15.110 --> 00:09:19.760
that, that was the move
towards Owen Catana as a

179
00:09:19.760 --> 00:09:23.030
web server. And that's really
inspired as p.net core. So

180
00:09:23.030 --> 00:09:26.990
if you have worked with
that in asp.net, then that

181
00:09:26.990 --> 00:09:31.580
will be very familiar. Owen
it'd be the open web

182
00:09:31.580 --> 00:09:35.090
interfaces and.net. It was a
community project to describe in

183
00:09:35.090 --> 00:09:37.670
our way to plug middleware
together in a, in a,

184
00:09:38.340 --> 00:09:42.350
a non version specific and
a non non vendor specific

185
00:09:42.350 --> 00:09:45.080
way. Right. It was a
way of kind of removing

186
00:09:45.290 --> 00:09:46.790
we'll give you more control
of the people I would

187
00:09:46.790 --> 00:09:51.110
say. Yeah, exactly. It was.
And I'm not sure exactly

188
00:09:51.110 --> 00:09:53.300
where the inspiration was for
Owen or if it did

189
00:09:53.300 --> 00:09:56.930
come from no was doing
a similar thing as, you

190
00:09:56.930 --> 00:10:00.140
know, composable bits of middleware
to build out your pipeline.

191
00:10:00.410 --> 00:10:01.910
But it's certainly, if you,
if you're from the note

192
00:10:01.910 --> 00:10:03.530
world, it's very similar to
the way you build a

193
00:10:03.530 --> 00:10:06.050
note up. When I was
doing asp.net though, I was

194
00:10:06.050 --> 00:10:09.740
doing HTTP handlers and HTTP
modules and plugging them into

195
00:10:09.740 --> 00:10:13.550
AIS. Is that not the
same as the middleware? That's,

196
00:10:13.730 --> 00:10:17.870
it's, it's similar in some
ways, but it's also different

197
00:10:17.870 --> 00:10:23.180
in others. Fundamentally the, the
way the handlers and the

198
00:10:23.210 --> 00:10:26.990
modules worked was different for
one you're hosting in AIA,

199
00:10:27.020 --> 00:10:37.430
in IAS, which is different
in dotnet core done@coreisnowyouhostthewebserverwithinaconsoleappisjustanormal.net console

200
00:10:37.430 --> 00:10:39.410
app. As you would just
write to the command line

201
00:10:39.770 --> 00:10:43.340
modules and handlers, there were
frankly a bit complicated. You

202
00:10:43.340 --> 00:10:46.520
had to understand the entire
pipeline of a request and

203
00:10:46.970 --> 00:10:49.610
what was happening, where all
the different events that are

204
00:10:49.610 --> 00:10:52.280
raised at different points. And
I asked would then call

205
00:10:52.280 --> 00:11:00.410
into your application@theappropriatepointswith.net core. You
define the entire pipeline exactly

206
00:11:00.410 --> 00:11:03.140
how a request should be
handled within your application. So

207
00:11:03.140 --> 00:11:05.750
you can have different bits
of middleware for different crosscutting

208
00:11:05.750 --> 00:11:10.670
concerns and generate the response
based on the incoming request.

209
00:11:11.810 --> 00:11:14.780
And you get an opportunity
to say, yay or nay,

210
00:11:14.810 --> 00:11:16.430
and then move on to
the next thing in the

211
00:11:16.430 --> 00:11:19.910
pipeline, like in your chapter
three on middleware pipelines, you've

212
00:11:19.910 --> 00:11:22.270
got some really great diagrams,
by the way, I see

213
00:11:22.500 --> 00:11:24.860
the amount of work that
you put into drawing these

214
00:11:24.860 --> 00:11:29.120
diagrams to really explain visually
what's going on. You call

215
00:11:29.120 --> 00:11:32.270
out like static file, middleware
error, handling middleware, each different

216
00:11:32.270 --> 00:11:34.550
piece of middleware, as it
moves through the pipeline gets

217
00:11:34.550 --> 00:11:37.220
an opportunity to say, I
care about this, or no,

218
00:11:37.220 --> 00:11:40.460
go ahead to the next
thing. Exactly. And so to

219
00:11:40.470 --> 00:11:43.520
each piece of middleware, just
it can inspect the request.

220
00:11:43.790 --> 00:11:45.380
If it knows how to
handle it, it can just

221
00:11:45.380 --> 00:11:49.880
regenerate a response and that
that's done. Alternatively, it can,

222
00:11:50.180 --> 00:11:52.640
it could add some headers,
it could change the requests

223
00:11:52.640 --> 00:11:54.850
somehow can completely ignore the
request and pass it on

224
00:11:54.850 --> 00:11:57.970
to the next piece of
middleware. Then that next piece

225
00:11:57.970 --> 00:11:59.710
of middleware can decide what
it wants to do and

226
00:11:59.710 --> 00:12:01.000
it can pass it on
to the next one and

227
00:12:01.000 --> 00:12:05.620
so on. And then once
something generates a response, each

228
00:12:05.620 --> 00:12:07.960
piece of middleware that has
seen the request is going

229
00:12:07.960 --> 00:12:10.270
and gets to see the
response as well. So the

230
00:12:10.270 --> 00:12:14.280
response is back down through
this pipeline briefly, I heard

231
00:12:14.280 --> 00:12:17.730
about net app. NetApp is
a developer's dream for data

232
00:12:17.730 --> 00:12:22.440
management net app can manage
migrate store compress, clone, encrypt

233
00:12:22.440 --> 00:12:25.440
secure, and generally make data,
do things super fast. The

234
00:12:25.440 --> 00:12:29.550
data doesn't always like to
do NetApp gives developers infrastructure

235
00:12:29.550 --> 00:12:33.240
superpowers with Azure net app
files. The only Azure service

236
00:12:33.660 --> 00:12:36.570
to let you move enterprise
file share workloads to the

237
00:12:36.570 --> 00:12:39.870
cloud in minutes, register today
and learn how you can

238
00:12:39.870 --> 00:12:43.860
get Azure NetApp files for
yourself at net app that's

239
00:12:43.860 --> 00:12:50.520
net app.com/azure preview. Someone said
once that they felt that

240
00:12:50.520 --> 00:12:56.610
asp.net core embraced that HTTP
existed more than previous versions

241
00:12:56.610 --> 00:12:59.190
of asp.net that they felt
were trying to hide. That

242
00:12:59.190 --> 00:13:02.760
HDDP existed. That totally makes
sense. I mean, especially from

243
00:13:02.760 --> 00:13:05.790
the, the web forms point
of view, web forums was

244
00:13:05.800 --> 00:13:09.480
obviously, I mean, that was
trying to sort of gloss

245
00:13:09.480 --> 00:13:11.430
over the fact that the
web existed. It was trying

246
00:13:11.430 --> 00:13:14.760
to make it nice and
quick and easy to create

247
00:13:14.970 --> 00:13:18.060
web applications by just ignoring
the fact there's an enormous

248
00:13:18.060 --> 00:13:21.270
pipeline between, you know, the
client and the server NBC,

249
00:13:21.270 --> 00:13:22.740
you sort of exposed a
bit more of that in

250
00:13:22.740 --> 00:13:25.830
the web API, much more,
but this just takes it

251
00:13:25.830 --> 00:13:28.890
up even further. So you,
when you say ignoring the

252
00:13:28.890 --> 00:13:32.520
fact, you're like basically saying,
pretending that this even exists

253
00:13:32.550 --> 00:13:34.530
and telling people don't even
pay attention to that, don't

254
00:13:34.530 --> 00:13:37.470
look behind the curtain. They're
exactly. Yeah. Yeah. I felt

255
00:13:37.470 --> 00:13:41.460
like the, as the web
decided with rest and with,

256
00:13:41.490 --> 00:13:44.940
with JavaScript or vanilla JavaScript
to really embrace that, okay,

257
00:13:44.940 --> 00:13:47.160
let's stop hiding things. Let's
stop hiding the browser. Let's

258
00:13:47.160 --> 00:13:50.850
stop hiding the Dom let's
stop hiding HTTP things got

259
00:13:50.880 --> 00:13:55.080
cleaner and easier in an
MVC. And your part one

260
00:13:55.080 --> 00:13:57.960
where you basically introduce people
to MVC. You talk about

261
00:13:58.320 --> 00:14:02.430
model binding, razor views, mapping
URLs, and the middleware pipeline,

262
00:14:02.880 --> 00:14:06.480
almost an entire book, but
it's condensed. It's, it's simpler.

263
00:14:06.480 --> 00:14:08.850
It's you spend a lot
less time getting to the

264
00:14:08.850 --> 00:14:10.710
point then that I would
say I did in my

265
00:14:10.710 --> 00:14:13.980
books. I think part of
that is probably just cause

266
00:14:13.980 --> 00:14:16.260
these concepts have been around
for a bit longer. Now,

267
00:14:16.740 --> 00:14:22.110
if you've already experienced asp.net,
for example, then you're already

268
00:14:22.110 --> 00:14:25.560
very familiar with most of
these concepts, if not, depending

269
00:14:25.560 --> 00:14:28.920
on exactly which aspects you've
been working with. So it's

270
00:14:28.920 --> 00:14:31.110
just one of those things
where it's, it's just in

271
00:14:31.110 --> 00:14:33.960
the general consciousness more. I
think that you have to

272
00:14:34.080 --> 00:14:36.600
understand how it's two, three
works a bit, at least

273
00:14:37.050 --> 00:14:40.530
in order to do web
development. Another new concept that

274
00:14:40.530 --> 00:14:43.410
people have to understand that
has gone from being something

275
00:14:43.410 --> 00:14:45.960
that I think maybe the
fringe or the more advanced

276
00:14:45.960 --> 00:14:48.720
developers did to now everyone
does is this idea of

277
00:14:48.720 --> 00:14:52.460
dependency injection, which we used
to have shove into asp.net

278
00:14:52.460 --> 00:14:55.330
To get it to work.
Yeah, it was always really

279
00:14:55.330 --> 00:14:58.510
hard work. I mean, I
remember on the one hand,

280
00:14:58.510 --> 00:15:02.890
I remember suddenly discovering dependency
injection when, when I, you

281
00:15:02.890 --> 00:15:05.050
know, had just started, started
programming it and it made

282
00:15:05.410 --> 00:15:07.960
so many, so much sense
for simplifying a lot of

283
00:15:07.960 --> 00:15:11.680
code and then trying to
put it into espionage was

284
00:15:11.890 --> 00:15:14.200
such hard work. That you'd
often question whether it was

285
00:15:14.200 --> 00:15:16.510
worth the hassle or not.
It was possible. It was

286
00:15:16.510 --> 00:15:18.790
totally possible. And we did
it, but it's because it

287
00:15:18.790 --> 00:15:23.740
was clearly an afterthought tacked
on, whereas it's baked in

288
00:15:23.800 --> 00:15:26.740
to asp.net core. They use
it throughout whether you want

289
00:15:26.740 --> 00:15:29.770
to or not. I know
some people are against DIA

290
00:15:29.800 --> 00:15:34.540
generally, but the framework itself
is built very much depending

291
00:15:34.540 --> 00:15:37.960
on depending on injections. So
you may as well embrace

292
00:15:37.960 --> 00:15:42.070
it, frankly. Well, I wonder
how anyone could be against

293
00:15:42.070 --> 00:15:43.960
it. I was trying to
figure out the best way

294
00:15:43.960 --> 00:15:46.210
to teach it or to
explain it to someone because

295
00:15:46.810 --> 00:15:49.150
as with all kind of
like mind bending concepts, it's

296
00:15:49.150 --> 00:15:50.920
one of those things where
you have to look at

297
00:15:50.920 --> 00:15:53.590
it multiple ways and then
eventually it'll, it'll, it'll pop,

298
00:15:53.590 --> 00:15:57.130
it'll click and you'll go,
Oh, and then it all

299
00:15:57.130 --> 00:15:59.320
makes sense. Right. So how
do you express that? How

300
00:15:59.320 --> 00:16:01.330
do you teach someone what
that means? Like when you

301
00:16:01.330 --> 00:16:03.640
say inversion of control, that
makes it sound like you

302
00:16:03.640 --> 00:16:06.250
need a PhD to understand
what's going on. It does.

303
00:16:06.250 --> 00:16:08.980
And there's, there's always the
arguments as well. The fact

304
00:16:08.980 --> 00:16:11.770
that, you know, dependence injection,
isn't the same as version

305
00:16:11.770 --> 00:16:15.970
of control. And, you know,
I can never remember quite

306
00:16:15.970 --> 00:16:18.610
exactly what the arguments are,
which way to be honest.

307
00:16:18.760 --> 00:16:21.220
The main thing that I
find is it, it just

308
00:16:21.280 --> 00:16:24.220
makes unit testing things easier.
A lot of the time,

309
00:16:24.970 --> 00:16:28.180
if you can inject, you
know, an interface instead of

310
00:16:28.180 --> 00:16:32.110
a concrete version of, of
a class, then you can

311
00:16:32.110 --> 00:16:35.140
test that class in isolation.
You can test without having

312
00:16:35.140 --> 00:16:38.440
to, if you've got an
email sending application, for example,

313
00:16:38.620 --> 00:16:42.790
you can inject this interface,
which does the actual email

314
00:16:42.790 --> 00:16:45.970
sending itself. And then you
can test, you know, how

315
00:16:45.970 --> 00:16:49.430
the email is generated and
handling that if you go

316
00:16:49.430 --> 00:16:53.530
to email sender throws an
exception that you can handle

317
00:16:53.530 --> 00:16:57.160
that without actually having to
send emails. It's just that

318
00:16:57.160 --> 00:16:59.830
simple thing that just makes
this making testing so much

319
00:16:59.860 --> 00:17:03.220
easier, fix it worthwhile in
my book. Yeah, that's absolutely

320
00:17:03.220 --> 00:17:07.360
true. There's the website. In
fact, that runs this, this

321
00:17:07.360 --> 00:17:09.670
podcast is written an asp.net
core. And I would have

322
00:17:09.670 --> 00:17:13.090
to admit that in writing
little apps, myself, little personal

323
00:17:13.090 --> 00:17:15.670
apps, I'm not one to
do a lot of testing,

324
00:17:15.970 --> 00:17:19.090
but the testing is so
easy and asp.net core that

325
00:17:19.150 --> 00:17:21.550
for the first time, my
purse, even my personal projects

326
00:17:21.550 --> 00:17:26.080
have an extensive test suite.
Yeah. I'm very much the

327
00:17:26.080 --> 00:17:28.450
same, very much to say.
Well, there's one thing I

328
00:17:28.450 --> 00:17:31.300
particularly liked with the, the
testing ISP dental Corp is

329
00:17:31.300 --> 00:17:34.630
the fact that you can
do integration testing of your

330
00:17:34.630 --> 00:17:39.010
HTP requests without having to
spin up servers. That's really

331
00:17:39.010 --> 00:17:43.240
quite useful for just testing
end to end. It's people

332
00:17:43.240 --> 00:17:46.030
have different feelings about, you
know, the various balance of

333
00:17:46.030 --> 00:17:49.620
whether you should have unit
tests out versus integration and

334
00:17:49.620 --> 00:17:52.050
twin tests, you know, whatever
you want to call them,

335
00:17:52.980 --> 00:17:55.830
but just the ability to
be able to quite easily

336
00:17:55.830 --> 00:18:00.440
spin up integration tests is
really valuable. That's a great

337
00:18:00.440 --> 00:18:02.480
point. There's, there's so many
layers. I mean, you can

338
00:18:02.480 --> 00:18:07.070
spin up and test asp.net
core without spinning it up.

339
00:18:07.100 --> 00:18:11.270
Like you can just make
in-process calls without any web

340
00:18:11.270 --> 00:18:13.220
server, or you can put
a web server on it,

341
00:18:13.280 --> 00:18:16.820
or you could even do
HTTP in memory testing without

342
00:18:16.820 --> 00:18:18.710
an actual web server. Or
if you feel like it,

343
00:18:18.710 --> 00:18:21.260
you can automate the browser
and do full on end

344
00:18:21.260 --> 00:18:24.380
to end selenium testing and
put the browser on the

345
00:18:24.380 --> 00:18:28.250
puppet strings. Exactly. It's a,
there's a, there's a lot

346
00:18:28.250 --> 00:18:30.320
of options. I think that's
the difference is that, you

347
00:18:30.320 --> 00:18:33.590
know, you really do have
a lot of options with

348
00:18:33.590 --> 00:18:37.730
web forms. You just didn't
have those options available. You

349
00:18:37.730 --> 00:18:39.440
know, you, you could do
selenium and you can do

350
00:18:39.440 --> 00:18:41.540
very low level tests, but
you couldn't do that very

351
00:18:41.540 --> 00:18:43.310
easily. You can do that
sort of in between level

352
00:18:43.310 --> 00:18:47.060
tests that you haven't Before
I forget. One of the

353
00:18:47.060 --> 00:18:50.120
things about dependency injection that
I have been using to

354
00:18:50.120 --> 00:18:53.930
explain to people is to
say, it's not your application's

355
00:18:53.930 --> 00:18:58.130
job to new things up
to go and make new

356
00:18:58.130 --> 00:19:02.630
objects. Your application should be
asking for objects because your

357
00:19:02.630 --> 00:19:04.880
app doesn't want to think
about object lifetime and how

358
00:19:04.880 --> 00:19:07.610
long scope should be of
something. It just wants something.

359
00:19:07.610 --> 00:19:10.970
It just wants to send
an email. So why does

360
00:19:10.970 --> 00:19:13.490
it need to suddenly as
a business application, be responsible

361
00:19:13.490 --> 00:19:15.650
for making an object and
throwing it away at the

362
00:19:15.650 --> 00:19:17.600
right time and letting it
live for the certain amount

363
00:19:17.600 --> 00:19:20.600
of time, those things are
concerns that it shouldn't have

364
00:19:21.500 --> 00:19:25.130
Exactly it does. It does
simplify your, like you say,

365
00:19:25.130 --> 00:19:27.680
your application logic a lot.
One thing I would say

366
00:19:27.680 --> 00:19:30.380
is that just because your
application logic, doesn't have to

367
00:19:30.380 --> 00:19:33.590
think about those things doesn't
mean that you can just

368
00:19:33.590 --> 00:19:37.520
not think about them. You
still you're basically delegating that

369
00:19:37.520 --> 00:19:41.360
decision down to the dependency
injection container. And you do

370
00:19:41.360 --> 00:19:44.120
have to bear that in
mind, I've seen a few

371
00:19:44.180 --> 00:19:47.360
issues where basically I've been
using the wrong lifetime without

372
00:19:47.360 --> 00:19:50.180
William. I just, you know,
you just register something with

373
00:19:50.180 --> 00:19:53.210
the DEI container and you
know, don't really think anything

374
00:19:53.210 --> 00:19:55.550
more of it. And then
down the line, you start

375
00:19:55.550 --> 00:19:58.640
getting strange issues because you've
read as registered it as

376
00:19:58.760 --> 00:20:02.120
a single tendon instead of
a scoped service or something

377
00:20:02.120 --> 00:20:04.160
like that. Well, that's a
really good, Great point that

378
00:20:04.160 --> 00:20:07.010
you're making. And it's something
that people could, could hurt

379
00:20:07.010 --> 00:20:10.040
themselves with. If they didn't
think about lifetime, they could

380
00:20:10.040 --> 00:20:12.950
just start injecting dependencies and
forget about lifetimes. And you

381
00:20:12.950 --> 00:20:15.950
spend a nontrivial amount of
time. You have a whole

382
00:20:15.950 --> 00:20:19.820
section on understanding lifetimes to
make sure people get that

383
00:20:19.820 --> 00:20:22.340
right. And I think that's
the key thing was really

384
00:20:22.340 --> 00:20:25.580
with, with the injection. If
you can understand the lifetimes

385
00:20:25.610 --> 00:20:30.650
and you know why you
shouldn't inject scoped services into

386
00:20:30.650 --> 00:20:35.120
singletons and things like this,
then after that, it's all

387
00:20:35.120 --> 00:20:37.910
quite easy. It's, it's fundamentally
just building up a graph

388
00:20:37.910 --> 00:20:41.330
of new objects. And so
once, once you get that

389
00:20:41.330 --> 00:20:44.630
little once, you can get
that concept, then basically all

390
00:20:44.630 --> 00:20:47.950
the difficulty is just managing
lifetimes. In part two of

391
00:20:47.950 --> 00:20:49.840
the Book, once you've moved
past the kind of the

392
00:20:49.840 --> 00:20:52.510
getting started in the concepts,
you start talking about really

393
00:20:52.600 --> 00:20:55.630
building complete apps, like what
does it look like? In

394
00:20:55.630 --> 00:20:58.960
reality, let's stop talking about
samples and start talking about

395
00:20:58.960 --> 00:21:03.160
real stuff like authentication and
authorization and actual publishing, stuff

396
00:21:03.160 --> 00:21:05.590
like that. But what was
a little bit surprised you

397
00:21:05.590 --> 00:21:09.850
have an entire section, an
entire chapter on the filter

398
00:21:09.850 --> 00:21:14.850
pipeline, which I thought was
an interesting decision. It's it's

399
00:21:14.850 --> 00:21:18.220
a complex beast. Unfortunately, when
you get into it, it's,

400
00:21:18.220 --> 00:21:22.140
it's one of those things
that it, again, it's easy

401
00:21:22.140 --> 00:21:25.140
to just pick and choose
little bits of the filter

402
00:21:25.140 --> 00:21:29.160
pipeline and only use the
ones you need. The, the

403
00:21:29.160 --> 00:21:31.920
main thing with the reason
for having a whole chapter

404
00:21:31.920 --> 00:21:35.190
on it was, it was
almost meant to be a

405
00:21:35.190 --> 00:21:38.790
reference guide, to be honest,
there's lots of bits and

406
00:21:38.790 --> 00:21:42.570
pieces around him, documentation and
the documentation in general is

407
00:21:42.570 --> 00:21:47.580
very good now, but understanding
the different filters when you

408
00:21:47.580 --> 00:21:53.130
should use each filter, how
they interact when an exception

409
00:21:53.130 --> 00:21:56.790
is thrown. At some point
in the NBC pipeline with

410
00:21:56.790 --> 00:22:00.120
our result, filter is used
where the response filter is

411
00:22:00.120 --> 00:22:05.970
used. It's all quite complicated.
Arguably it didn't need to

412
00:22:05.970 --> 00:22:10.170
be an entire chapter, but
getting the information down is

413
00:22:10.200 --> 00:22:14.070
that's what it was cool.
I'm in no way implying

414
00:22:14.070 --> 00:22:15.660
it shouldn't be a full
chapter. I just thought it

415
00:22:15.660 --> 00:22:18.690
was a cool Decision because
effectively, if I understand from

416
00:22:18.690 --> 00:22:23.340
reading the chapter, the, the
filter MVC filters are almost

417
00:22:23.340 --> 00:22:26.580
a pipeline within a pipeline.
Right? Cause the cause NBC

418
00:22:26.580 --> 00:22:31.500
itself is a middle. Yeah,
Exactly. Yeah. The DMDC filters

419
00:22:31.530 --> 00:22:34.260
are you say, are they,
then they're not a linear

420
00:22:34.260 --> 00:22:37.530
pipeline. Like middleware. They have
a slightly sort of convoluted,

421
00:22:38.280 --> 00:22:41.370
but they are a pipeline.
And in fact, there's, I

422
00:22:41.370 --> 00:22:45.780
think it was in 1.1
introduced the middleware as filters

423
00:22:47.310 --> 00:22:49.860
feature into ASP net core.
So you can actually use

424
00:22:50.160 --> 00:22:53.880
middleware components as MVC filters.
I think it was that

425
00:22:53.880 --> 00:22:57.970
way around. So that really
just highlights how the fact

426
00:22:57.970 --> 00:23:01.950
that they are just another
pipeline. Yeah. Right. And, and

427
00:23:01.950 --> 00:23:04.500
again, I have to give
you kudos. So forgive me

428
00:23:04.500 --> 00:23:06.960
if I'm a gushing a
little bit too much, but

429
00:23:06.990 --> 00:23:09.690
credit to you for doing
not just a lot of

430
00:23:09.720 --> 00:23:14.190
pros and code, but also
illustrating this stuff with illustrations

431
00:23:14.400 --> 00:23:16.590
that explain the pipeline. I
don't think that I have

432
00:23:16.590 --> 00:23:20.910
understood fully the MVC filter
pipeline until I saw the

433
00:23:20.910 --> 00:23:23.790
diagrams that you created. Cause
as you said, it's not

434
00:23:23.790 --> 00:23:27.450
just boxes on top of
boxes. There is some kind

435
00:23:27.450 --> 00:23:29.220
of going off in the
corner here to do action

436
00:23:29.220 --> 00:23:31.710
and vacation and then coming
back and some optional things.

437
00:23:31.710 --> 00:23:35.120
And when exceptions happen, it's
even even more different. Yeah.

438
00:23:35.250 --> 00:23:37.320
It's, it's a, it's a
complicated beast. Like you say,

439
00:23:37.320 --> 00:23:39.330
you need to, you need
to have some pictures in

440
00:23:39.330 --> 00:23:43.200
there. So I'm glad they
are When you're, when you're

441
00:23:43.200 --> 00:23:48.260
writing a book and simultaneously
the documentation is becoming better

442
00:23:48.260 --> 00:23:51.110
because clearly the docs team
is, has really gotten their

443
00:23:51.110 --> 00:23:53.810
act together. How do you
decide, like what goes in

444
00:23:53.820 --> 00:23:55.820
a book and what is
something that you'd send someone

445
00:23:55.820 --> 00:23:58.610
up to the documentation for
and how do you kind

446
00:23:58.610 --> 00:24:01.550
of compete when you have
a physical book versus a,

447
00:24:02.030 --> 00:24:05.080
you know, ever changing docs?
Yeah. Well, I think it

448
00:24:05.080 --> 00:24:06.600
depends what people are trying
to get out of the

449
00:24:06.640 --> 00:24:10.480
book and versus why they
were going to documentation. I

450
00:24:10.480 --> 00:24:13.870
think the docs are let
you say that so much

451
00:24:13.870 --> 00:24:15.750
better now that they're even
better than what I started

452
00:24:15.760 --> 00:24:17.560
the book, to be honest,
when I started, they were

453
00:24:17.560 --> 00:24:19.210
a bit all over the
place, but now that they're

454
00:24:19.210 --> 00:24:25.450
very consistent, the difference I
think is there's, there's different

455
00:24:25.930 --> 00:24:30.370
types of tutorial versus reference
a document that they have

456
00:24:30.370 --> 00:24:33.110
in docs. And they try
to pull those out as

457
00:24:33.160 --> 00:24:36.970
two different bets. If something
is essentially essentially a technical

458
00:24:36.970 --> 00:24:38.830
reference, you don't want to
read that in a book.

459
00:24:38.860 --> 00:24:41.680
There's no, there's no reason
you're going to sit there

460
00:24:41.680 --> 00:24:45.220
and, you know, read about
the API or every single

461
00:24:45.370 --> 00:24:48.480
minutiae of something. The book
is meant to be it's,

462
00:24:48.480 --> 00:24:52.690
it's a story of sorts
it's taking you through it's

463
00:24:52.690 --> 00:24:54.640
through the application. So it's
not really a story, but

464
00:24:54.730 --> 00:24:57.670
instead, perhaps some interest, frankly,
as opposed to just, I

465
00:24:57.670 --> 00:24:59.650
just need to get this
one little thing done, which

466
00:24:59.710 --> 00:25:02.140
I find a lot of
time. That's why I'm on

467
00:25:02.140 --> 00:25:04.810
dogs. That's a good point.
The, the, the, the linear,

468
00:25:04.810 --> 00:25:06.640
even though a book is
a random access thing, the

469
00:25:06.640 --> 00:25:08.950
linearity of it to like,
you know, let me, let

470
00:25:08.950 --> 00:25:10.540
me tell you a story.
Let me walk you through

471
00:25:10.540 --> 00:25:13.420
this, follow me on this
vector from chapter one, all

472
00:25:13.420 --> 00:25:16.360
the way through, you know,
and the, and also the

473
00:25:16.360 --> 00:25:19.240
physicality of the book, frankly,
I still have a stack

474
00:25:19.240 --> 00:25:20.950
of books next to me,
actually right now that I'm

475
00:25:21.040 --> 00:25:23.950
going through, you really can't
learn a framework unless you

476
00:25:23.950 --> 00:25:28.900
do that linear chapter one
through chapter 20, you know,

477
00:25:29.230 --> 00:25:32.080
at least once or twice.
Yeah. Yeah. I completely agree.

478
00:25:32.440 --> 00:25:34.870
And they have, I don't
think they are, if they're

479
00:25:34.870 --> 00:25:38.260
trying to sort of cover
that base in the docs,

480
00:25:38.260 --> 00:25:40.840
to be honest, they, they
do have tutorials, but they're

481
00:25:40.840 --> 00:25:44.020
generally getting started. They're the
on ramp, as opposed to

482
00:25:44.350 --> 00:25:47.260
right now, let's just do
everything. We also put the

483
00:25:47.260 --> 00:25:50.200
source code for this on
get hub. So how much

484
00:25:50.200 --> 00:25:53.080
of a living book is
this? So th the source

485
00:25:53.080 --> 00:25:56.890
code is, yeah, it's all
on get hub. It's a

486
00:25:57.520 --> 00:25:59.800
combination of some of the,
some of the samples in

487
00:25:59.800 --> 00:26:03.100
there were written in the
sort of 1.0 1.1 timeframe,

488
00:26:03.460 --> 00:26:07.600
and they've been updated to
be, to be 2.0, this

489
00:26:07.600 --> 00:26:10.690
book was, it was finished
sort of just before 2.1

490
00:26:10.690 --> 00:26:13.900
came out. So there's various
references to 2.1, but the

491
00:26:13.900 --> 00:26:18.510
source code currently is covering
2.0. And in some cases,

492
00:26:18.520 --> 00:26:23.200
the 1.1 I'll make fixes
to that as necessary, but

493
00:26:23.200 --> 00:26:25.870
I'm trying to leave them
as two points. So it

494
00:26:25.870 --> 00:26:29.020
matches the book, the physical
book, as opposed to necessarily

495
00:26:29.020 --> 00:26:32.320
keeping it up to date
with a 2.2, 3.0 releases

496
00:26:32.350 --> 00:26:34.900
or anything like that. Well,
I mean, certainly with 2.1

497
00:26:34.900 --> 00:26:39.490
being LTS, the two dot
X asp.net core concepts aren't

498
00:26:39.490 --> 00:26:43.030
changing and the APRs are
changing minimally. So it doesn't

499
00:26:43.050 --> 00:26:46.410
seem like people should be
focused on daily builds of

500
00:26:46.410 --> 00:26:49.080
asp.net core. When in fact
this is one that's going

501
00:26:49.080 --> 00:26:51.320
to be around for many,
many years to come. Exactly.

502
00:26:51.350 --> 00:26:55.550
And the book itself there's,
I don't cover everything in

503
00:26:55.550 --> 00:26:58.760
there. It's just, there's too
much in the framework. And

504
00:26:58.760 --> 00:27:01.990
it's changing too fast to
say it, it covers, as

505
00:27:01.990 --> 00:27:05.600
you say, like really the
core fundamentals and some advanced

506
00:27:05.600 --> 00:27:07.850
concepts that you can go
a long way with, and

507
00:27:07.910 --> 00:27:10.760
those haven't changed at all.
So I think that's a,

508
00:27:11.380 --> 00:27:15.170
that's a good side of
it. Absolutely. It's also worth

509
00:27:15.170 --> 00:27:18.200
pointing out for people who
are listening, that they can

510
00:27:18.200 --> 00:27:21.470
go and take a look@atmanning.com
for ESPN in a coronation.

511
00:27:21.470 --> 00:27:24.590
And you've got free downloads
of both chapter one. But

512
00:27:24.590 --> 00:27:27.410
then as an example, the
filter pipeline, one that I

513
00:27:27.410 --> 00:27:30.100
was gushing about is also
a free chapter. You can

514
00:27:30.110 --> 00:27:32.570
download chapter 13 for free.
You can look at all

515
00:27:32.570 --> 00:27:35.480
the source code all for
free before you decide if

516
00:27:35.480 --> 00:27:37.430
you want to buy it.
And as I pointed out

517
00:27:37.430 --> 00:27:39.710
also, because you came on
the show, I talked to

518
00:27:39.710 --> 00:27:42.710
the folks at Manning and
they put together a coupon

519
00:27:42.710 --> 00:27:48.020
code pod Hanselman 18, that
would get you 40% off

520
00:27:48.080 --> 00:27:50.600
of the book. And I
believe 40% off anything else

521
00:27:50.690 --> 00:27:53.450
on a, on mandy.com, which
is pretty cool. And there's

522
00:27:53.450 --> 00:27:56.150
a live book combo where
you can basically have it

523
00:27:56.240 --> 00:27:58.790
on as an ebook, and
then you can read it

524
00:27:58.790 --> 00:28:00.920
on the web as well,
Which is pretty sweet, pretty

525
00:28:00.920 --> 00:28:03.830
sweet. Yeah. And I think
does it, Mexico's got a,

526
00:28:04.280 --> 00:28:08.150
another free ebook on, on
manning.com, which includes the chapters

527
00:28:08.150 --> 00:28:10.370
from this book and from
his book and from the

528
00:28:10.370 --> 00:28:13.160
ear of corn action book
as well, Really great point.

529
00:28:13.190 --> 00:28:17.990
So there's asp.net core inaction,
and there's dotnet core inaction,

530
00:28:17.990 --> 00:28:21.920
which can give you second
internals of profiling and performance

531
00:28:21.920 --> 00:28:25.370
and multiple runtimes and all
the details of asp.net core

532
00:28:25.640 --> 00:28:28.580
itself. And just as a
point of note, I wrote

533
00:28:28.580 --> 00:28:32.720
the forward for Dustin's book.
So I don't have a

534
00:28:32.720 --> 00:28:35.180
relationship with Manny, but I
do think that those are

535
00:28:35.180 --> 00:28:37.040
great books. So that's why
I'm having you on the

536
00:28:37.040 --> 00:28:39.770
show and why it's worth
checking those books. Yeah, I

537
00:28:39.770 --> 00:28:43.280
appreciate it. Yeah, Absolutely. There's
a lot of cool stuff

538
00:28:43.280 --> 00:28:45.890
going on right now in.net
core. And it's so nice

539
00:28:45.890 --> 00:28:50.900
to see books and source
on GitHub. And I don't

540
00:28:50.900 --> 00:28:52.820
know, it's just so different
than it was 15 years

541
00:28:52.820 --> 00:28:56.480
ago. Totally. I mean, having
the source code on GitHub

542
00:28:56.480 --> 00:29:00.350
was really the, the thing
that got me into.net code

543
00:29:00.350 --> 00:29:02.540
in the first place. It
was being able to just,

544
00:29:02.780 --> 00:29:05.750
just read through and see
how things worked and what

545
00:29:05.750 --> 00:29:08.960
was, what was happening in
that was, it was just

546
00:29:08.960 --> 00:29:11.270
such a pleasure. Well, and
I even liked the fact

547
00:29:11.270 --> 00:29:12.770
that like, I'm looking right
now at your book and

548
00:29:12.770 --> 00:29:16.280
chapter and in chapter one,
there's a screenshot of you

549
00:29:16.280 --> 00:29:19.190
on new Boone too. And
it has a section here

550
00:29:19.190 --> 00:29:21.650
about how to set up,
like it's a book that

551
00:29:21.650 --> 00:29:25.160
doesn't start with and now
download visual studio. You literally

552
00:29:25.160 --> 00:29:27.650
are like, well now pick
them or Emacs or sublime

553
00:29:27.650 --> 00:29:30.560
or Adam or brackets or
whatever, and pick whatever operating

554
00:29:30.560 --> 00:29:32.450
system, whatever editor you want
and let's go and do

555
00:29:32.450 --> 00:29:35.840
this book. And then you
just start. Yeah. I mean,

556
00:29:35.840 --> 00:29:38.330
and that, that is one
of the big selling point

557
00:29:38.330 --> 00:29:40.910
with ASP net core, I
think is just the fact

558
00:29:40.910 --> 00:29:43.840
that is you can Build
it everywhere. You can run

559
00:29:43.840 --> 00:29:47.320
it everywhere. It is such
a, such a pleasure to

560
00:29:47.320 --> 00:29:49.150
do that. I mean, I'm
a windows guy and so

561
00:29:49.150 --> 00:29:52.270
I build on windows, but
then I generally deploy to

562
00:29:52.270 --> 00:29:56.620
Linux and there's no issues
with that. That's fantastic. Well,

563
00:29:56.620 --> 00:29:59.050
thanks so much for coming
on the show. Thanks, Scott.

564
00:29:59.050 --> 00:30:01.450
It's been great. All right.
We've been talking about Andrew

565
00:30:01.450 --> 00:30:05.650
lock's book, asp.net core in
action. Be sure to check

566
00:30:05.650 --> 00:30:09.250
out the show links down
below as well as the

567
00:30:09.250 --> 00:30:13.090
coupon pod Hanselman 18. This
has been another episode of

568
00:30:13.090 --> 00:30:35.800
Hanselminutes and we'll see you
again next week. <inaudible>.

