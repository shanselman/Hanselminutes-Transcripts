WEBVTT FILE

1
00:00:12.090 --> 00:00:17.820
From hanselminutes.com. It's Hanselminutes a
weekly discussion with web developer

2
00:00:17.820 --> 00:00:22.500
and technologist Scott Hanselman. This
is Lawrence Ryan announcing show number

3
00:00:22.500 --> 00:00:28.380
two 75. Recorded live Thursday,
July 14, 2011. Support for

4
00:00:28.380 --> 00:00:32.760
Hanselman is provided by teller
rad controls, the most comprehensive

5
00:00:32.760 --> 00:00:36.570
suite of components for windows
forums and asp.net web applications

6
00:00:36.960 --> 00:00:45.870
online@wwwdottlerik.com. In this episode, Scott
talks with Dan Fernandez about

7
00:00:45.870 --> 00:00:52.350
the Microsoft research connect SDK.
Hi, this is Scott Hanselman.

8
00:00:52.350 --> 00:00:55.260
This is another episode of
Hansel minutes. And today we're

9
00:00:55.260 --> 00:00:57.900
talking with Dan Fernandez. I
want to understand the connect

10
00:00:58.230 --> 00:01:02.820
for windows STK. It's a
really interesting device and Dan

11
00:01:02.820 --> 00:01:06.770
knows all about it. How's
it going down? Hey, wonderful,

12
00:01:06.800 --> 00:01:11.930
wonderful, wonderful Glorious. So help
me understand this. The connect

13
00:01:11.930 --> 00:01:16.430
came out. Everyone said, wow,
this is amazing. They immediately

14
00:01:16.430 --> 00:01:21.350
started hacking it. The public
waited for Microsoft to Sue

15
00:01:21.350 --> 00:01:24.950
the crap out of everyone.
And instead we come out

16
00:01:24.950 --> 00:01:29.090
with an STK what's going
on. Well, you know, it

17
00:01:29.090 --> 00:01:32.450
wasn't actually, you know, I
have to do the Miguel

18
00:01:32.450 --> 00:01:35.930
to cause it, well, actually
people weren't really hacking it.

19
00:01:36.290 --> 00:01:39.680
What they were doing was
that the way connect works,

20
00:01:39.710 --> 00:01:43.490
it sends its raw data
through USB. So they were

21
00:01:43.490 --> 00:01:48.950
just basically understanding the stream
of data and then using

22
00:01:48.950 --> 00:01:52.850
that for applications. Now, there
is a company that Microsoft

23
00:01:52.850 --> 00:01:55.310
partnered with called prime sense,
and they actually built an

24
00:01:55.340 --> 00:01:59.450
API because a lot of
the technology is from the

25
00:01:59.450 --> 00:02:02.390
folks at prime sense in
terms of the actual device.

26
00:02:02.390 --> 00:02:04.430
And you can read the
whole press release when we

27
00:02:04.430 --> 00:02:08.060
originally announced project natal around
that. But a lot of

28
00:02:08.060 --> 00:02:10.370
that technology is from the
company prime sense and they've

29
00:02:10.370 --> 00:02:14.810
actually released an SDK that
works with connect as well

30
00:02:14.810 --> 00:02:19.580
as their own device as
well. Okay. So everyone's saying

31
00:02:19.580 --> 00:02:22.520
connect tax, but really what
they mean is that I,

32
00:02:22.520 --> 00:02:25.430
you know, the public didn't
expect that it's, it's a,

33
00:02:25.430 --> 00:02:28.340
it's a series of cameras.
There's a lot of information,

34
00:02:28.340 --> 00:02:32.160
but it is just over
USB. So it's So, so

35
00:02:32.220 --> 00:02:34.340
think about it this way.
So one just kind of

36
00:02:34.340 --> 00:02:36.620
give, give folks an overview
of what you can do

37
00:02:36.620 --> 00:02:38.900
with the connect, just in
terms of the surface area

38
00:02:38.900 --> 00:02:42.020
of that, of the API.
So the first thing that

39
00:02:42.020 --> 00:02:47.360
connect has is an RGB
camera and this basically sends

40
00:02:47.360 --> 00:02:52.730
still images. It's about 30
frames per second. And the

41
00:02:52.730 --> 00:02:55.580
idea is you, as a
developer can get sort of

42
00:02:55.580 --> 00:03:00.160
like the still image of,
of a particular, and this

43
00:03:00.160 --> 00:03:02.290
is just a regular image.
And when you start playing

44
00:03:02.290 --> 00:03:04.510
that at 30 frames per
second, it looks basically like

45
00:03:04.540 --> 00:03:09.190
a live video stream, right?
So nothing very fancy there.

46
00:03:09.220 --> 00:03:13.870
The next thing is a
depth camera. So the device

47
00:03:13.870 --> 00:03:19.150
has basically shoots out infrared
data does some stuff with,

48
00:03:19.570 --> 00:03:21.970
with IRR filters. I, I
won't get into all the

49
00:03:21.970 --> 00:03:24.940
algorithms and stuff that goes
on there, but what it

50
00:03:24.940 --> 00:03:29.140
does is a depth camera
gives you the same picture,

51
00:03:29.620 --> 00:03:34.660
but instead of say the
color value of as particular

52
00:03:34.660 --> 00:03:38.680
point, like, Hey, at 0.0,
this is the, this is

53
00:03:38.680 --> 00:03:42.130
the color. It gives you
the distance. So, you know,

54
00:03:42.130 --> 00:03:44.860
the distance of every point.
So like in a six,

55
00:03:45.220 --> 00:03:47.560
three 20 by two 40
image, you're going to know

56
00:03:47.560 --> 00:03:51.180
the distance of every single
point. Okay. So let me

57
00:03:51.180 --> 00:03:54.300
see if I understand there's
two cameras and it's sending

58
00:03:54.300 --> 00:03:58.620
me the same frame twice.
Here's a, you know, at

59
00:03:58.620 --> 00:04:01.410
pixel 100, 100, this is
red because he has a

60
00:04:01.410 --> 00:04:05.610
red shirt on the pixel
100, 100, he's about six

61
00:04:05.610 --> 00:04:12.840
feet away. The idea is,
and that's the raw data

62
00:04:12.840 --> 00:04:17.340
that's sent over. So as
well as with audio and

63
00:04:17.340 --> 00:04:22.650
actually the connect for windows
at CK also is the

64
00:04:22.650 --> 00:04:26.550
first, I guess, these toolkits.
And there's been a lot

65
00:04:26.550 --> 00:04:30.750
of excitement around open source
because this is the first

66
00:04:30.750 --> 00:04:35.700
one that actually provides audio
API APIs. And then, so

67
00:04:35.700 --> 00:04:37.770
sorry. So then the last
thing is you get this

68
00:04:37.770 --> 00:04:40.500
raw data. That raw data
is interesting if you want

69
00:04:40.500 --> 00:04:42.660
to work on it at
a low level, but from

70
00:04:42.660 --> 00:04:46.260
a higher level perspective, this
is where the magic of

71
00:04:46.260 --> 00:04:48.900
software comes in. And what
the connect does is interprets

72
00:04:48.900 --> 00:04:53.700
that depth, depth data, and
actually does skeletal tracking. So

73
00:04:53.700 --> 00:04:56.760
give me all the distance
data and based on this,

74
00:04:56.760 --> 00:04:58.650
what I'm going to do
is figure out what the

75
00:04:58.650 --> 00:05:05.100
skeletons are in this particular
scene. Like if you're the

76
00:05:05.100 --> 00:05:07.110
person that's six feet away,
I'm going to know where

77
00:05:07.110 --> 00:05:09.030
your head is. I'm going
to know where your hand

78
00:05:09.030 --> 00:05:11.010
is. I'm going to know
where your wrist is. I'm

79
00:05:11.010 --> 00:05:12.630
going to know where your
shoulders are and all that.

80
00:05:13.290 --> 00:05:15.000
Okay. So this is where
I want to understand more.

81
00:05:15.000 --> 00:05:17.880
I, I can get my
head around. There's two cameras.

82
00:05:18.390 --> 00:05:20.910
And I believe that the
depth camera, like you said,

83
00:05:20.910 --> 00:05:23.970
it shoots out IRR, basically,
it's like a bunch of

84
00:05:23.970 --> 00:05:27.150
tiny remote controls shooting at
you. And then they bounce

85
00:05:27.150 --> 00:05:30.270
back and it determines death.
And then you lose me

86
00:05:30.270 --> 00:05:33.510
at the skeleton part. Yeah.
So it's, it's the challenge

87
00:05:33.510 --> 00:05:36.390
is it actually does some
stuff for, in an IRR

88
00:05:36.400 --> 00:05:40.920
filter and lens. And, and
it's not time of flight

89
00:05:41.080 --> 00:05:43.470
is one thing to point
out, which is the typical,

90
00:05:43.650 --> 00:05:46.080
when it bounces back and
times, it it's a different

91
00:05:46.080 --> 00:05:51.000
technique. It's actually cheaper because
I have a flight devices

92
00:05:51.000 --> 00:05:56.250
can be very expensive for,
for a good implementation. But

93
00:05:56.340 --> 00:05:59.540
like I said, it's, it's
kind of, it's, it's kind

94
00:05:59.540 --> 00:06:03.980
of complicated how it actually
all works, but it shoots

95
00:06:03.980 --> 00:06:06.410
dots. And then based on
the angle of those dots,

96
00:06:07.280 --> 00:06:10.610
it can determine depth data.
There's a, there's a good

97
00:06:10.610 --> 00:06:13.160
article on, on electronic design.
But like I said, it's

98
00:06:13.160 --> 00:06:17.960
pretty, there's a bunch of
algorithms around it around laser

99
00:06:17.960 --> 00:06:23.150
induced differential absorption radar, which
is called LIDAR. And, but,

100
00:06:23.180 --> 00:06:26.120
but at a high level
you get depth data and

101
00:06:26.120 --> 00:06:29.180
that data is the distance.
So just, you know, from

102
00:06:29.180 --> 00:06:31.720
a developer perspective, you just
get depth data. I get

103
00:06:31.720 --> 00:06:36.880
some number that represents an
arbitrary relative depth, or I

104
00:06:36.880 --> 00:06:41.800
get an actual it's six
feet away. Yeah. It's a

105
00:06:41.800 --> 00:06:46.690
distance in millimeters from the
connect. Oh, well millimeters. Yes.

106
00:06:47.110 --> 00:06:49.510
Okay. That's pretty accurate. All
right. So I get that.

107
00:06:49.750 --> 00:06:53.430
I get that part who
is doing the skeleton part.

108
00:06:53.440 --> 00:06:55.120
Cause I'm trying to understand
that. I realized that there's

109
00:06:55.630 --> 00:06:58.060
for the, for the overall
kind of connect experience, the

110
00:06:58.060 --> 00:07:01.870
overarching experience, there's some hardware,
there's some work happening on

111
00:07:01.870 --> 00:07:04.900
the connect, but there's also
work happening on the Xbox

112
00:07:04.900 --> 00:07:06.460
or in this case when
I plug it into the

113
00:07:06.460 --> 00:07:09.160
PC on the PC. When
you talked about the skeleton

114
00:07:09.160 --> 00:07:12.250
part a minute ago, who's
doing the skeleton work who

115
00:07:12.250 --> 00:07:16.750
decides that's my head. Yeah.
So the, the socket on

116
00:07:16.750 --> 00:07:19.570
chip X-Box part and all
that stuff is the part

117
00:07:19.570 --> 00:07:21.730
that's giving you all the
depth data. At that point,

118
00:07:22.030 --> 00:07:25.120
we take that data and
turn it into information. And

119
00:07:25.120 --> 00:07:27.550
that part is when you
install that connect for windows

120
00:07:27.550 --> 00:07:33.820
SDK, or if you have
a, an Xbox, you know,

121
00:07:33.820 --> 00:07:35.920
in one of their updates,
it does all the software

122
00:07:35.920 --> 00:07:38.740
for you. So it's actually,
it's a software problem at

123
00:07:38.740 --> 00:07:41.800
that point to take the
raw data and turn it

124
00:07:41.800 --> 00:07:45.970
into, Hey, there are two
skeletons in this room and

125
00:07:45.970 --> 00:07:50.020
here's every joint position I
see. So that's kind of

126
00:07:50.020 --> 00:07:55.210
a secret sauce. Yes. That's,
that's the magic of software

127
00:07:55.240 --> 00:08:04.300
part. Okay. So the, the
connect SDK includes drivers, right?

128
00:08:04.300 --> 00:08:06.010
Like if I pull up,
let me help me understand

129
00:08:06.010 --> 00:08:08.230
this. When I plugged the
connect into my, into my

130
00:08:08.230 --> 00:08:11.980
computer, without the SDK, what
happens? And then what does

131
00:08:11.980 --> 00:08:17.170
the SDK add? It says
it's like unknown USB device.

132
00:08:17.170 --> 00:08:19.930
Do you want to search
contact windows update to see

133
00:08:19.930 --> 00:08:25.510
if there's a driver? That's
what you currently get when

134
00:08:25.510 --> 00:08:28.300
you install the SDK, it
does the, Hey there is

135
00:08:28.300 --> 00:08:31.690
a USB device and that
USB device is sending this

136
00:08:31.690 --> 00:08:35.950
raw data. And here's how
to communicate with it. Both,

137
00:08:36.220 --> 00:08:38.770
both ways. Cause you can
actually send commands to the,

138
00:08:39.220 --> 00:08:42.730
or at least basic commands,
the connect, the connect device

139
00:08:42.730 --> 00:08:49.300
itself, for example, to tilt
the device, you, for example,

140
00:08:49.810 --> 00:08:51.430
you probably see this on
your Xbox where we're kind

141
00:08:51.430 --> 00:08:54.100
of scans the room automatically,
Right? It does a little

142
00:08:54.100 --> 00:08:57.000
head nod, a little five
head nod September turns on.

143
00:08:57.770 --> 00:09:02.000
Yeah. So that's something that's
not built into the, the

144
00:09:02.030 --> 00:09:04.640
connects for windows SDK is,
but it is exposed as

145
00:09:04.640 --> 00:09:07.490
an API. So you can
pretty much do. I think

146
00:09:07.490 --> 00:09:10.370
it's a range of negative
27, a positive 27 and

147
00:09:10.370 --> 00:09:13.460
that's degrees. So you can
say like whenever your application

148
00:09:13.460 --> 00:09:17.600
starts up, scan the room
and then find out maybe

149
00:09:17.600 --> 00:09:22.340
it's skeletal tracking. You can
find out the best. If

150
00:09:22.340 --> 00:09:25.250
there's any skeleton joints that
are being clipped or not

151
00:09:25.250 --> 00:09:29.120
being represented, maybe they're being
clipped at the very low

152
00:09:29.120 --> 00:09:31.190
angle. Then maybe that means
the connect is actually on

153
00:09:31.190 --> 00:09:34.190
top of a TV or
if they're being clipped, you

154
00:09:34.190 --> 00:09:36.350
know, another place maybe that
like you can see the

155
00:09:36.350 --> 00:09:38.840
head, then maybe change the
angle so that you can

156
00:09:38.840 --> 00:09:41.450
see the most joints possible.
Okay. Now, is that something

157
00:09:41.490 --> 00:09:44.030
that I, that I need
to do the work? Yes.

158
00:09:44.030 --> 00:09:45.620
That is something that you
need to do the work

159
00:09:45.620 --> 00:09:48.350
on. And I will say
the, the actual, the Johnny

160
00:09:48.350 --> 00:09:51.110
five effect, if you will,
of tilting, it is not

161
00:09:51.110 --> 00:09:53.870
something that's designed to do
a lot. I think it's,

162
00:09:54.860 --> 00:09:58.490
there's a certain number of,
of movements. I think it's,

163
00:09:58.580 --> 00:10:01.040
I want to say it's
a handful within two minutes

164
00:10:01.040 --> 00:10:03.650
or so. So it's something
where you probably just want

165
00:10:03.650 --> 00:10:08.780
to scan once when your
application opens up, as opposed

166
00:10:08.780 --> 00:10:12.350
to, you know, making it
be Headbangers ball, if you

167
00:10:12.350 --> 00:10:14.900
will, where it's constantly going
up and down, it's just

168
00:10:14.900 --> 00:10:17.600
not rated for that. And
it'll just stop taking commands.

169
00:10:18.560 --> 00:10:21.260
Is it, I mean, I'm
hearing you say that it's

170
00:10:21.260 --> 00:10:22.850
cool that I can move
it though, but it's not

171
00:10:22.850 --> 00:10:27.080
particularly useful for my application.
Well, well, it would be

172
00:10:27.080 --> 00:10:29.390
useful because you don't know
where some of these places

173
00:10:29.390 --> 00:10:33.530
that connect. Oh, okay. So
you, you give me the

174
00:10:33.530 --> 00:10:36.110
skeleton information. I moved the
head around looking to make

175
00:10:36.110 --> 00:10:37.700
sure that the head and
the feet are both within

176
00:10:37.700 --> 00:10:39.830
the space. And then I
might say something like backup.

177
00:10:40.340 --> 00:10:44.030
Yeah. So the way, the
way I've just built, like

178
00:10:44.030 --> 00:10:47.330
a very dummy version. So
the skeletal tracking each joint

179
00:10:48.050 --> 00:10:53.060
can give you basically it's
tracking state, for example, whether

180
00:10:53.060 --> 00:10:58.130
it's being a clipped, maybe
it's like not, not visible,

181
00:10:58.130 --> 00:11:02.960
like your left elbows out
of the visible range or

182
00:11:02.960 --> 00:11:06.260
whether it's not, whether it
it's not tracked at all.

183
00:11:06.290 --> 00:11:08.720
Say for example, if it's
on top of a desk

184
00:11:08.720 --> 00:11:11.660
and it can't see your
feet or, or even your

185
00:11:11.660 --> 00:11:15.260
knees, right. So if you
do a full scan and

186
00:11:15.260 --> 00:11:19.790
you know, basically where all
the joint positions are, you

187
00:11:19.790 --> 00:11:22.130
can say like, Oh, okay,
I got all 20 joints

188
00:11:22.640 --> 00:11:26.960
at this degree, for example.
Okay. So then if my

189
00:11:26.960 --> 00:11:29.630
application needed to see your
left elbow and it couldn't,

190
00:11:30.740 --> 00:11:33.290
I might adjust the angle,
but I would in fact,

191
00:11:33.290 --> 00:11:37.130
need to say, Hey, you
paused the game. Hey FYI,

192
00:11:37.130 --> 00:11:40.410
I can't see your elbow.
Yeah. Yeah. And I mean,

193
00:11:40.410 --> 00:11:42.800
you've folks who have played
with connects have probably seen

194
00:11:42.800 --> 00:11:45.170
this where the game will
tell you, you know, that

195
00:11:45.170 --> 00:11:47.570
you're being clipped or, or,
or, you know, you could

196
00:11:47.570 --> 00:11:50.240
then show a, a, an
animated arrow to move to

197
00:11:50.240 --> 00:11:54.590
the right, if you will.
So that people know to,

198
00:11:54.590 --> 00:11:56.650
to move into an area
where the connect can actually

199
00:11:56.650 --> 00:11:59.220
track. Okay. That's very helpful
because it gives me a

200
00:11:59.220 --> 00:12:02.880
sense of what's the Connect's
job versus what's my job,

201
00:12:05.430 --> 00:12:08.460
this stream of depth data
that comes in, is this

202
00:12:08.460 --> 00:12:11.550
coming, is this a video
frame that I'm supposed to

203
00:12:11.550 --> 00:12:17.160
do something with? Yeah. So,
I mean, at the, from,

204
00:12:17.940 --> 00:12:21.600
from the actual USB device
to the connect SDK, by

205
00:12:21.600 --> 00:12:24.660
the time you get into
the connect SDK, you are

206
00:12:24.660 --> 00:12:30.390
getting what's, what's called a
plane, our image data types.

207
00:12:30.960 --> 00:12:36.570
So basically it includes the
actual, it's a red, green,

208
00:12:36.570 --> 00:12:39.180
blue, and then the actual
values that you then need

209
00:12:39.180 --> 00:12:42.000
to convert into an image.
So it's a byte array.

210
00:12:42.000 --> 00:12:44.550
So let's say it's a
six 40 by four 80

211
00:12:44.550 --> 00:12:48.120
byte array. You're now converting
that into an image. But

212
00:12:48.120 --> 00:12:52.950
since that's kind of a,
a repetitive task to do

213
00:12:52.950 --> 00:12:57.210
that, would you and, and
using WPF, you know, it

214
00:12:57.210 --> 00:13:01.050
isn't that hard to do
that for a regular image.

215
00:13:01.080 --> 00:13:03.660
You're just using the, I
think it's a create bitmap

216
00:13:03.670 --> 00:13:08.190
source, right? Call we did
for coding for fun. We

217
00:13:08.190 --> 00:13:12.900
just built a series of
extension methods to do this,

218
00:13:12.900 --> 00:13:15.330
which is, if you give
me a plain, our image,

219
00:13:16.200 --> 00:13:21.060
I will call a two
bitmaps source and actually convert

220
00:13:21.060 --> 00:13:24.660
it for you. Okay. So
that, that makes me think

221
00:13:24.660 --> 00:13:27.450
that while the SDK is,
is complete and there's a

222
00:13:27.450 --> 00:13:31.050
lot of school stuff going
on, there's still room for,

223
00:13:31.110 --> 00:13:33.840
for stuff for us to
add as a, as the

224
00:13:33.840 --> 00:13:35.790
community. So, I mean, you,
you right off the bat,

225
00:13:35.790 --> 00:13:37.320
even when you worked for
Microsoft, you're like, wow, we

226
00:13:37.320 --> 00:13:40.200
found ourselves taking the depth
data and turning it into

227
00:13:40.200 --> 00:13:43.410
a false color image all
the time. We'll make, we'll

228
00:13:43.410 --> 00:13:45.960
make a helper for that.
Then there's other things for

229
00:13:45.960 --> 00:13:49.830
us to do. Yeah, absolutely.
So, and actually, you know

230
00:13:49.830 --> 00:13:52.380
what the extension method is
on the image frame, cause

231
00:13:52.380 --> 00:13:56.040
the, our image, you need
the size data or, or

232
00:13:56.040 --> 00:13:58.860
I forget exactly what data
is within the planer image,

233
00:13:59.100 --> 00:14:01.260
but basically when you get
an image frame back, you

234
00:14:01.260 --> 00:14:03.420
call to bitmap source on
it. And at that point,

235
00:14:03.420 --> 00:14:06.780
I can say, let's say
I had a WPF application

236
00:14:07.050 --> 00:14:08.850
with an image on it.
I'd say image one dot

237
00:14:08.850 --> 00:14:13.020
source. There's an event that
I'd register to get a

238
00:14:13.020 --> 00:14:15.570
new image. And I just
say from that event, it'd

239
00:14:15.570 --> 00:14:20.430
be E dot image, frame
that to bitmap source, it's

240
00:14:20.430 --> 00:14:23.190
basically one line of code
to convert that. And one

241
00:14:23.190 --> 00:14:25.500
of the reasons they did
that is to not have

242
00:14:25.770 --> 00:14:30.480
present, to make it presentation,
layer agnostic. In other words,

243
00:14:31.320 --> 00:14:34.560
there isn't a WPF library
in the connect for windows

244
00:14:34.560 --> 00:14:37.500
SDK. There isn't a windows
form or, you know, even

245
00:14:37.500 --> 00:14:40.530
a console or whatever, they'll
give you the raw data

246
00:14:40.530 --> 00:14:43.320
that then you convert to
say X and a two

247
00:14:43.320 --> 00:14:47.190
WPF or to whatever on
the coding for fun side,

248
00:14:47.190 --> 00:14:51.090
we've done it at least
a WPS and windows forms.

249
00:14:52.100 --> 00:14:57.770
That was my next question,
because you keep saying WPF

250
00:14:57.800 --> 00:14:59.180
and you know, maybe I
want to use C plus

251
00:14:59.180 --> 00:15:02.050
plus, or maybe I want
to use something else. Yeah.

252
00:15:02.050 --> 00:15:05.200
So I should say that
the connect for windows STK

253
00:15:05.200 --> 00:15:09.970
is available for, you know,
regular Danette languages. If you

254
00:15:09.970 --> 00:15:13.390
can reference the libraries, you
should be, you should be

255
00:15:13.720 --> 00:15:17.140
happy as well as C
plus plus, but there aren't

256
00:15:17.230 --> 00:15:19.810
a C plus plus libraries
to handle the visualization of

257
00:15:19.810 --> 00:15:25.060
that data. Right. So it's
not, you know, choose your,

258
00:15:25.090 --> 00:15:29.230
choose your C plus plus
a UI toolkit language. There

259
00:15:29.230 --> 00:15:34.780
isn't a representation of that.
Okay. Okay. Data. And then

260
00:15:34.780 --> 00:15:39.910
you convert it back into
a w however, however, whatever

261
00:15:39.910 --> 00:15:43.180
library that you're using for,
for C plus plus UI.

262
00:15:43.720 --> 00:15:47.020
Okay. And the data that
comes out of the connect,

263
00:15:47.080 --> 00:15:49.180
I've heard three 20 by
two 40, and I've also

264
00:15:49.180 --> 00:15:53.080
heard six 40 by four
80, but which isn't, It

265
00:15:53.080 --> 00:15:57.820
actually depends. So one, you
can get a, there's a

266
00:15:57.820 --> 00:16:03.280
call for get valid resolutions
inside the connect SDK and

267
00:16:04.630 --> 00:16:08.020
the, in general, the depth
camera. I think it's three

268
00:16:08.020 --> 00:16:14.410
20 by two 40 is
the highest. And, and the,

269
00:16:14.480 --> 00:16:17.380
the color image is six
40 by four, three 20

270
00:16:17.380 --> 00:16:21.010
by two 46, 40 by
four 80. And I think

271
00:16:21.010 --> 00:16:23.680
there's a 10 24 by
seven 68. And they actually,

272
00:16:23.680 --> 00:16:26.290
I think on the software
side, do some stuff to

273
00:16:26.290 --> 00:16:30.010
convert it into the higher
resolution. Okay. I remember that

274
00:16:30.340 --> 00:16:33.160
A lot of this stuff
is based on the XDK

275
00:16:33.160 --> 00:16:37.450
that you can take of
the connect for windows SDK,

276
00:16:37.450 --> 00:16:42.070
as it starting basis was
using the XDK that's existed

277
00:16:42.070 --> 00:16:45.220
for a while. And then
we built the manage wrapper

278
00:16:45.220 --> 00:16:46.930
on top of it and
try to do things in

279
00:16:46.930 --> 00:16:52.150
a more managed dial if
you will. Okay. Would you

280
00:16:52.150 --> 00:16:54.940
expect that someone who's using
this STK would definitely want

281
00:16:54.940 --> 00:16:57.730
to use managed code that,
that the, the idea that

282
00:16:57.730 --> 00:16:59.440
I might want or even
need to use C plus

283
00:16:59.440 --> 00:17:03.160
plus is not really necessary?
Yeah. I mean, unless you're

284
00:17:03.160 --> 00:17:07.150
building a C plus plus
app, there's, there's no need

285
00:17:07.150 --> 00:17:10.690
to use C plus plus
like in other words, there's

286
00:17:10.690 --> 00:17:13.330
no, there's no secret part
of the API that isn't

287
00:17:13.330 --> 00:17:18.610
exposed via C plus plus.
And I think the majority

288
00:17:18.610 --> 00:17:22.210
of apps I've seen so
far are using C sharp

289
00:17:22.240 --> 00:17:26.680
or VB, but that may
or may just be a

290
00:17:26.680 --> 00:17:31.120
factor of, you know, there's
more C-sharp PB enthusiasts then

291
00:17:31.180 --> 00:17:33.370
say C plus plus folks
which tend to focus more

292
00:17:33.370 --> 00:17:40.060
on, on hardcore ISV apps.
Alright, I got ya. Okay.

293
00:17:41.350 --> 00:17:46.120
When, when I plug it
into the, the PC, can

294
00:17:46.120 --> 00:17:48.670
I start doing things like
controlling windows around and doing

295
00:17:48.670 --> 00:17:54.530
all that of minority report
type stuff? Yeah. So at

296
00:17:54.530 --> 00:17:57.800
that point, so let's say
you downloaded the connect for

297
00:17:57.800 --> 00:18:00.470
windows SDK. It installs a
bunch of drivers. You plug

298
00:18:00.470 --> 00:18:02.150
it in, you're going to
get this blinking green light

299
00:18:02.150 --> 00:18:05.450
that lets you know, alright,
it's now working. You go

300
00:18:05.450 --> 00:18:08.420
into device manager, you'll see
a way to see the,

301
00:18:08.420 --> 00:18:11.930
the motor that camera and,
and audio at that point,

302
00:18:12.410 --> 00:18:15.800
connect is working. You now
need an application to do

303
00:18:15.800 --> 00:18:18.740
the real work. So one
of the things we did

304
00:18:18.740 --> 00:18:23.480
was our good friend, Brian
peek, who I should introduce

305
00:18:23.480 --> 00:18:28.880
you to, because you've met
him 10 times, he built

306
00:18:28.970 --> 00:18:34.310
a cursor application. So, and
I think it's connect cursor

307
00:18:36.590 --> 00:18:41.720
or, you know what I
think it's mouse.covid.com, maybe connect

308
00:18:41.720 --> 00:18:45.080
mouse dot code, flex.com. But
basically think about it as

309
00:18:45.620 --> 00:18:51.020
a yeah. It's connect mouse.code.com.
It's a, a curse that

310
00:18:51.020 --> 00:18:54.590
allows you to use whatever
hand you want, right. Or

311
00:18:54.590 --> 00:19:00.860
left hand as a cursor
in windows. So if you

312
00:19:00.860 --> 00:19:03.770
want a left click, if
you want to drag and

313
00:19:03.770 --> 00:19:07.970
drop images, it's again, it's,
it's an open source code

314
00:19:07.970 --> 00:19:10.940
blocks project, but it just
gives you the basics of,

315
00:19:11.210 --> 00:19:13.700
Hey, wouldn't it be cool
to, you know, maybe surf

316
00:19:13.700 --> 00:19:18.470
the web scroll, a web
page, all using or, or,

317
00:19:18.500 --> 00:19:21.830
you know, in outlook, drag
and drop, you know, an

318
00:19:21.830 --> 00:19:24.350
image into a folder or
something, or an email into

319
00:19:24.350 --> 00:19:29.210
a folder. This episode of
Hansel minutes is brought to

320
00:19:29.210 --> 00:19:33.380
you by careers. 2.0 careers,
2.0 is a new service

321
00:19:33.380 --> 00:19:36.620
by our friends at stack
overflow. You're probably all familiar

322
00:19:36.620 --> 00:19:40.280
with stack overflow. The online
QA resource dedicated specifically to

323
00:19:40.280 --> 00:19:44.660
programmers and programming related topics.
Well, the team at stack

324
00:19:44.660 --> 00:19:48.110
overflow created careers 2.0 to
provide you with access to

325
00:19:48.110 --> 00:19:50.660
great jobs and introduce you
to a bunch of great

326
00:19:50.660 --> 00:19:53.420
companies that you might consider
working for. Even if you're

327
00:19:53.420 --> 00:19:56.570
not currently looking for a
job, think of careers. 2.0

328
00:19:56.570 --> 00:19:59.960
is a programmer profile gives
you a platform to show

329
00:19:59.960 --> 00:20:03.560
that you're awesome by featuring
your proudest contributions to stack

330
00:20:03.560 --> 00:20:08.510
overflow, GitHub SourceForge Bitbucket, anything
programming related, you can even

331
00:20:08.510 --> 00:20:12.830
add your favorite programming books
from amazon.com profiles on careers.

332
00:20:12.830 --> 00:20:16.040
2.0 are free. They're easy
to get started, especially by

333
00:20:16.040 --> 00:20:21.350
importing your LinkedIn profile. However,
there's one catch profiles on

334
00:20:21.350 --> 00:20:25.250
career 2.0 or invite only
they did this to keep

335
00:20:25.250 --> 00:20:29.120
out the spam and have
a high quality environment. Fortunately

336
00:20:29.120 --> 00:20:31.310
for you as a Hansel
minutes listener, I've got your

337
00:20:31.310 --> 00:20:37.520
back head on over to
careers dot stack overflow.com/h M

338
00:20:38.120 --> 00:20:41.570
to accept your invitation today,
once again, that's careers dot

339
00:20:41.570 --> 00:20:47.620
stack, overflow.com/h M. I hope
you like it. Since you've

340
00:20:47.620 --> 00:20:49.600
worked with this for awhile,
you spent quite a bit

341
00:20:49.600 --> 00:20:54.130
of time with the connect
SDK. Do you think that

342
00:20:54.130 --> 00:20:56.530
it's, it's, it's pretty accurate.
I mean, some people have

343
00:20:56.530 --> 00:20:58.900
said that it's amazing. They
can't believe it can see

344
00:20:58.900 --> 00:21:02.380
their fingers. And other people
have said for them, it's

345
00:21:02.380 --> 00:21:04.570
just seems a little shaky
and it can't see their

346
00:21:04.570 --> 00:21:07.480
arm. What, what, what, what
do you see as far

347
00:21:07.480 --> 00:21:10.300
as accuracy and what makes
it more accurate? And is

348
00:21:10.300 --> 00:21:16.080
it getting better? Yeah. So
one thing to keep in

349
00:21:16.080 --> 00:21:18.420
mind, and this is actually
a really good point is

350
00:21:18.420 --> 00:21:23.520
the skeletal tracking just by
default because it's software based,

351
00:21:23.520 --> 00:21:26.580
we'll have what you'd call
jitter, right? So like, imagine

352
00:21:26.580 --> 00:21:29.010
you are tracking, you know,
a hand or an elbow.

353
00:21:29.460 --> 00:21:33.330
There may be a time
where it moves, say 10

354
00:21:33.330 --> 00:21:36.060
or 20 pixels, or maybe
even not that much three

355
00:21:36.060 --> 00:21:39.120
pixels or something. And it
just like, kind of jumps

356
00:21:39.120 --> 00:21:41.910
off. So if it's giving
you that data of a

357
00:21:41.910 --> 00:21:45.630
specific joint, like the middle
of your hand is at,

358
00:21:45.690 --> 00:21:48.240
let's say 100 by 100.
And then all of a

359
00:21:48.240 --> 00:21:50.190
sudden there's one Oh five
by one Oh five and

360
00:21:50.190 --> 00:21:53.550
then 97 by 97. And
it looks like it's kind

361
00:21:53.550 --> 00:21:57.780
of moving and that's where
you get people saying, Hey,

362
00:21:57.780 --> 00:22:01.230
this is I, you know,
I'm getting jitter, what's going

363
00:22:01.230 --> 00:22:04.800
on here. It doesn't seem
that accurate. So one way

364
00:22:04.800 --> 00:22:08.640
to do that and what
was built into both the

365
00:22:08.700 --> 00:22:12.210
XDK that shifts with Xbox
and it's the connect for

366
00:22:12.210 --> 00:22:18.480
windows SDK is smoothing. So
the actual algorithm is a

367
00:22:18.480 --> 00:22:22.410
double exponential filter, but just
at a high level, what

368
00:22:22.410 --> 00:22:26.880
that does is filters out
and you can control this

369
00:22:27.720 --> 00:22:32.010
pretty fine grain control on
how you want the data

370
00:22:32.010 --> 00:22:34.620
to smooth out. So that
way, if there is something

371
00:22:34.620 --> 00:22:39.060
just one random, let's see
out of 30 frames per

372
00:22:39.060 --> 00:22:44.490
second, there's something that's four,
four pixels off. It will,

373
00:22:45.150 --> 00:22:49.800
it'll be a, almost like
a smoothing average excepted. It

374
00:22:50.160 --> 00:22:53.790
expires exponentially. If you will,
I won't get into details

375
00:22:53.790 --> 00:22:56.370
of the actual algorithm, but
if you search for, you

376
00:22:56.370 --> 00:23:00.480
know, exponential, smoothing on Wikipedia,
you can see some of

377
00:23:00.480 --> 00:23:02.400
that stuff. But the point
is you can control kind

378
00:23:02.400 --> 00:23:05.220
of the noise and that
helps you remove the jitter

379
00:23:05.220 --> 00:23:08.190
so that it feels more
accurate. It feels like where

380
00:23:08.190 --> 00:23:10.590
your hand is. It feels
like as you move left

381
00:23:10.590 --> 00:23:13.680
to right, it moves better.
And we use that in

382
00:23:13.680 --> 00:23:18.300
both. Let's see we have
the connect mouse app and

383
00:23:18.300 --> 00:23:21.930
a connect paint app. And
since you're using your hand

384
00:23:21.930 --> 00:23:27.300
as a cursor, you want
it to feel like move,

385
00:23:27.330 --> 00:23:29.640
move those jitteriness. Cause without
those, and you can do

386
00:23:29.640 --> 00:23:33.570
kind of like AB testing,
just comment out the, the

387
00:23:33.570 --> 00:23:37.530
exponential smoothing and, and then
do it with, and you'll

388
00:23:37.530 --> 00:23:41.730
see that it just feels
like it's, it's tracking better

389
00:23:41.730 --> 00:23:47.150
if you will. Okay. So
it, so the hardware is,

390
00:23:47.240 --> 00:23:49.190
I wouldn't say making a
mistake, but the hardware is

391
00:23:49.190 --> 00:23:53.320
misinterpreting something. And then the
software fixes the error. Well,

392
00:23:53.320 --> 00:23:57.040
technically it's when you're talking
about skeletal tracking, it's all

393
00:23:57.040 --> 00:24:03.580
software. So skeletal tracking is
software depth. Data is, and

394
00:24:03.580 --> 00:24:07.720
camera is, is the raw
data from the hardware. So

395
00:24:08.530 --> 00:24:12.100
from the software, yet it
may be tracking something differently.

396
00:24:12.100 --> 00:24:17.560
It may be readjusting things
for, for whatever reason. And

397
00:24:17.560 --> 00:24:19.900
then what this allows you
to do is because there's

398
00:24:19.900 --> 00:24:22.660
so much data being sent.
You're getting this data at

399
00:24:22.660 --> 00:24:26.200
30 frames per second, right?
If there's inaccuracies around those,

400
00:24:26.230 --> 00:24:31.900
it can do the, just
basically removing the noise if

401
00:24:31.900 --> 00:24:36.190
you will. I see. I
see. Cause it's interesting because

402
00:24:36.190 --> 00:24:38.230
I mean, there's, it's all
digital, but there's this analog

403
00:24:38.260 --> 00:24:43.240
aspect of things, which is
our bodies themselves, you know,

404
00:24:43.240 --> 00:24:46.750
an analog is never a
hundred percent accurate. Yeah, absolutely.

405
00:24:47.230 --> 00:24:50.740
So, and I think one
of the things is you

406
00:24:50.740 --> 00:24:53.860
want that it's at least
when you're starting to work

407
00:24:53.860 --> 00:24:57.760
with applications today, you know,
with windows, depending on your

408
00:24:57.760 --> 00:25:02.080
screen and your resolution stuff,
it can be kind of

409
00:25:02.080 --> 00:25:04.300
a pain to click into
something that has a really

410
00:25:04.300 --> 00:25:08.110
small head box area, right?
So if you're going into

411
00:25:08.110 --> 00:25:10.780
you press star, you do
in your programs and you're

412
00:25:10.780 --> 00:25:14.080
doing it to nested windows.
It can be a pain

413
00:25:14.260 --> 00:25:16.900
when you don't have the
level of granularity control. And

414
00:25:16.900 --> 00:25:20.020
I think that's actually something
that is much more difficult

415
00:25:20.020 --> 00:25:23.620
to use for connect for
when you need to do.

416
00:25:23.920 --> 00:25:29.110
There's like really small precision
movements. A mouse is absolutely

417
00:25:29.110 --> 00:25:31.630
the best way to do
that. Even better than, you

418
00:25:31.630 --> 00:25:35.320
know, fingers. Yeah. I think
that, that the dream is

419
00:25:35.320 --> 00:25:38.710
that we'll have mouse level
finger accuracy, a foot away

420
00:25:38.710 --> 00:25:41.680
from the monitor. I mean,
I know that I want

421
00:25:41.710 --> 00:25:45.520
whatever the next version of
windows is to have built

422
00:25:45.520 --> 00:25:48.370
in connect support where I
can put my finger out

423
00:25:48.370 --> 00:25:50.320
and it'll just know that
I want to move that

424
00:25:50.980 --> 00:25:55.870
window onto that monitor. That
would be awesome. Yeah. I

425
00:25:55.870 --> 00:26:00.730
think what you'll find is
it won't be, you won't

426
00:26:00.730 --> 00:26:04.210
want it for everything, but
to be able to, and

427
00:26:04.270 --> 00:26:07.450
you know, they call it
multimodal where, for example, let's

428
00:26:07.450 --> 00:26:13.330
say just window arranging windows,
you know, you probably have

429
00:26:13.630 --> 00:26:18.490
four monitors. Most of us
have to, at least, at

430
00:26:18.490 --> 00:26:23.860
least for developers, you would,
for example, just use a

431
00:26:23.860 --> 00:26:27.520
hand gestures to say, move
windows around or, and not

432
00:26:27.520 --> 00:26:29.980
necessarily for every single thing
you're going to do in

433
00:26:29.980 --> 00:26:32.980
windows, but just for certain
tasks that it works really

434
00:26:32.980 --> 00:26:35.830
well for, or for example,
for zooming in and out

435
00:26:35.830 --> 00:26:38.770
of data or certain types
of data, maybe it's pictures

436
00:26:39.100 --> 00:26:41.950
or whatever it happens to
be. I don't think it'll

437
00:26:42.070 --> 00:26:45.330
it'll replace the mouse, but
I think it'll compliment it

438
00:26:45.390 --> 00:26:50.990
is, is maybe my, my
suggestion. I see, I see,

439
00:26:51.860 --> 00:26:53.930
I think that that, that
we want to see official

440
00:26:53.930 --> 00:26:56.450
kind of official support, which
would be really exciting. You

441
00:26:56.450 --> 00:26:58.100
know, it's one thing to
have it plugged in, but

442
00:26:58.100 --> 00:27:02.660
to really have this thing
be allowed or even even

443
00:27:02.660 --> 00:27:05.420
integrated to be a fundamental
part of windows would be

444
00:27:05.420 --> 00:27:10.280
amazing. And one thing I've
noticed with my Xbox connect

445
00:27:10.280 --> 00:27:12.200
is that every once in
a while I'll get an

446
00:27:12.230 --> 00:27:16.220
Xbox dashboard, you know, something
minor and it'll say updating

447
00:27:16.220 --> 00:27:20.630
device. So somehow the Xbox
connect gets an update from

448
00:27:20.630 --> 00:27:22.730
the cloud and you know,
like a little firmware or

449
00:27:22.730 --> 00:27:24.830
something like that. Do you
know if the SDK will

450
00:27:24.830 --> 00:27:30.440
update the connect also, I
don't know of a, of

451
00:27:30.440 --> 00:27:34.610
a plan to, and when
it says updating devices, it

452
00:27:34.670 --> 00:27:38.090
actually means the connect or
does it mean Xbox? I

453
00:27:38.090 --> 00:27:40.460
don't know. I just know
that I read it a

454
00:27:40.460 --> 00:27:43.130
little, a little dashboard update
comes in and the, it

455
00:27:43.130 --> 00:27:46.400
starts nodding and moving around.
And I'm just wondering if,

456
00:27:46.640 --> 00:27:48.590
if they're, if they're actually
talking to the connect or

457
00:27:48.590 --> 00:27:52.400
if the connect really is
just cameras. Yeah. I mean,

458
00:27:52.400 --> 00:27:55.070
there technically is a way
to upload firmware, but for

459
00:27:55.070 --> 00:27:59.750
example, things like speech recognition.
And in fact that, you

460
00:27:59.750 --> 00:28:02.810
know, we haven't talked about
speech as another big capability,

461
00:28:02.810 --> 00:28:08.750
but the speech recognition, the
way to interpret a language,

462
00:28:08.750 --> 00:28:11.270
the actual language pack that's
used on Xbox has been,

463
00:28:11.810 --> 00:28:14.810
we've made it available to
download for windows users as

464
00:28:14.810 --> 00:28:18.140
well, but all that stuff
is running on the Xbox

465
00:28:18.140 --> 00:28:21.770
or on your PC, not
in the device itself. So

466
00:28:22.580 --> 00:28:26.000
that, again, it, I suspect
that that given that stuff,

467
00:28:26.030 --> 00:28:28.970
let's say there's an update
to language packs to, you

468
00:28:28.970 --> 00:28:33.320
know, add a new language
or to update the, the,

469
00:28:33.400 --> 00:28:36.860
the grammar for Xbox. Let's
say they add, you know,

470
00:28:37.190 --> 00:28:40.220
Netflix voice commands or something
they're going to need to

471
00:28:40.220 --> 00:28:42.860
upload the new set of
commands that you can say

472
00:28:43.010 --> 00:28:46.730
Xbox or, and then give
us particular voice command to.

473
00:28:47.120 --> 00:28:49.790
So that's what I would
expect from, from device updates.

474
00:28:50.090 --> 00:28:53.690
I see. And speaking of
a voice commands, what is

475
00:28:53.690 --> 00:28:58.730
the, the voice recognition support
for the SDK? Cause I

476
00:28:58.730 --> 00:29:00.650
understand that the mic, if
people keep saying that the

477
00:29:00.650 --> 00:29:03.110
microphone in the connector, like
amazing, not only do they,

478
00:29:03.740 --> 00:29:06.290
they know that you're talking,
but they know where you

479
00:29:06.290 --> 00:29:11.840
are in the room. Yeah.
So just at a high

480
00:29:11.840 --> 00:29:16.700
level, the way there's kind
of two ways people use

481
00:29:17.090 --> 00:29:19.430
audio, one is to kind
of just use it as

482
00:29:19.430 --> 00:29:23.330
a microphone. And the cool
thing is the, the connect

483
00:29:23.330 --> 00:29:26.300
actually a mouse as a,
as a full microphone. So

484
00:29:26.300 --> 00:29:29.750
for example, if you are
the next time you're on,

485
00:29:31.100 --> 00:29:33.140
you know, using an audio
application and I was going

486
00:29:33.140 --> 00:29:35.240
to say Skype, but you
can't actually use it with

487
00:29:35.240 --> 00:29:38.030
Skype. There is an issue
using it with Skype, but

488
00:29:38.450 --> 00:29:41.530
next time you're using say
sound recorder, but just the

489
00:29:41.530 --> 00:29:45.160
plain old windows sound recorder,
you can choose a microphone

490
00:29:45.160 --> 00:29:48.910
and choose the connect as
your microphone. So it mounts

491
00:29:48.910 --> 00:29:51.520
as a, as a microphone
array window sees it as

492
00:29:51.520 --> 00:29:55.390
a regular microphone array. And
you can treat it as

493
00:29:55.420 --> 00:29:59.320
a regular microphone array to
say, record sounds in existing

494
00:29:59.320 --> 00:30:04.840
applications or, you know, with
your applications recording sound. So

495
00:30:04.840 --> 00:30:09.040
in addition to that, there
are, you can use the

496
00:30:09.040 --> 00:30:13.480
speech recognition engine to actually
build speech enabled applications. So

497
00:30:13.480 --> 00:30:16.540
one is if you're using,
what is it, a windows

498
00:30:16.540 --> 00:30:20.290
seven, because you do need
windows seven for the connect

499
00:30:20.290 --> 00:30:22.900
for windows SDK. If you're
using windows seven, it ships

500
00:30:22.900 --> 00:30:26.620
with speech recognition. So I
don't know if you've ever

501
00:30:26.620 --> 00:30:30.270
gone into accessibility and turn
on speech recognition. Sure. All

502
00:30:30.270 --> 00:30:34.260
the time. Yeah. All the
time I've done a lot

503
00:30:34.260 --> 00:30:36.390
of work with speech recognition.
I even wrote my first

504
00:30:36.390 --> 00:30:40.950
book for rocks using dragon
naturally speaking. Okay. So the

505
00:30:40.950 --> 00:30:45.360
bill, the builtin windows speech
recognition, where you can say,

506
00:30:45.420 --> 00:30:47.490
like, if you have multiple
windows open, you can say

507
00:30:47.490 --> 00:30:50.340
switch to, and then say
no pad. And that would

508
00:30:50.340 --> 00:30:55.440
switch to a notepad that
just works. So there's no

509
00:30:55.440 --> 00:30:58.860
code. This is just using
features in windows seven after

510
00:30:58.860 --> 00:31:01.710
you plug in the connect
for windows SDK, because it's

511
00:31:01.710 --> 00:31:04.980
treated just as a regular
microphone. Now when you're building

512
00:31:04.980 --> 00:31:09.570
your own application. So, you
know, let's say you wanted

513
00:31:09.570 --> 00:31:14.250
to do voice commands for
PowerPoint to go to next

514
00:31:14.250 --> 00:31:18.540
slide or, or previous slide.
At that point, you need

515
00:31:18.540 --> 00:31:24.630
to build an application you're
using the existing speech recognition

516
00:31:24.660 --> 00:31:27.960
API. So there's, we actually
shipped two sets of API

517
00:31:27.960 --> 00:31:33.480
APIs. One is the one
that ships regularly with a.net

518
00:31:33.480 --> 00:31:36.420
framework, which would be done
at framework for O on

519
00:31:36.420 --> 00:31:42.810
most machines. And that one's
probably a little behind in

520
00:31:42.810 --> 00:31:45.180
terms of features. Then we
ship another version, which is

521
00:31:45.180 --> 00:31:47.820
like the more updated version.
And that's the one we

522
00:31:47.820 --> 00:31:51.840
tend to be pointing people
to. And, and I think

523
00:31:51.840 --> 00:31:56.070
it's under Microsoft desk dot
speech versus windows dot speech.

524
00:31:56.520 --> 00:31:59.760
But the point is, I'm
just using those API APIs

525
00:31:59.760 --> 00:32:03.270
for speech recognition. You create
a grammar, which is, Hey,

526
00:32:03.600 --> 00:32:06.780
start listening to audio and
wait if somebody tells you

527
00:32:06.780 --> 00:32:09.810
this command and this command
will be say, next slide.

528
00:32:09.840 --> 00:32:12.360
If you hear the word
next slide, then, you know,

529
00:32:12.360 --> 00:32:18.780
current slide plus blast, Right?
And that that's basic at

530
00:32:18.780 --> 00:32:22.440
a, at a really 10,000
foot level, how speech recognition

531
00:32:22.470 --> 00:32:25.560
works. It waits for a
certain set of commands, compares

532
00:32:25.570 --> 00:32:28.020
the audio against those commands,
and then you can take

533
00:32:28.020 --> 00:32:33.900
a particular, Okay. Yeah. It's
interesting to understand again, where

534
00:32:33.900 --> 00:32:37.980
the software ends in the
hardware begins. It was interesting

535
00:32:37.980 --> 00:32:40.430
to me to think about
the connects job is, and

536
00:32:40.430 --> 00:32:44.090
then what the algorithmic work
is being done downstream is,

537
00:32:44.420 --> 00:32:47.660
and the same thing, what
value that the hardware provides

538
00:32:47.660 --> 00:32:51.170
in quality and a quality
microphone array. It would be

539
00:32:51.170 --> 00:32:53.390
really interesting for me as
someone who works remotely and

540
00:32:53.450 --> 00:32:57.260
tries, and I have three,
four different microphones here that

541
00:32:57.260 --> 00:33:00.530
I all kind of move
between when I'm Skyping. I'd

542
00:33:00.530 --> 00:33:03.230
really like to hear the
quality of the, of the

543
00:33:03.230 --> 00:33:06.230
connect and as an array
mic, if I could even

544
00:33:06.230 --> 00:33:09.610
pace around and get better
quality than a then a

545
00:33:09.620 --> 00:33:11.420
speaker phone, that would be,
that would be really cool.

546
00:33:12.310 --> 00:33:15.100
Yeah. I think he should,
you should definitely play around

547
00:33:15.100 --> 00:33:16.720
with it and let me
know kind of your results.

548
00:33:16.750 --> 00:33:20.110
Cause I think you're probably
on a, would be a

549
00:33:20.110 --> 00:33:23.100
heavy user for lack of
a better word. Yeah, definitely

550
00:33:23.110 --> 00:33:26.350
a discerning user at the
very least. Thanks for, thanks

551
00:33:26.350 --> 00:33:28.900
for sharing. Tell us where
we can go to get

552
00:33:29.000 --> 00:33:31.660
the coding for fun stuff
as well as the SDK

553
00:33:31.660 --> 00:33:37.300
itself. Yeah. So if you
go to research that microsoft.com

554
00:33:38.080 --> 00:33:45.850
connect SDK and then let's
see the being put on

555
00:33:45.850 --> 00:33:50.050
the spot on the, let's
see the connect one, we

556
00:33:50.050 --> 00:33:52.180
do have a series of
connect for windows quick start

557
00:33:52.180 --> 00:33:55.090
it's actually that I should
make sure to plug and

558
00:33:55.090 --> 00:34:03.700
that's channel nine that mcn.com/series/connect
SDK QuickStarts. And that is

559
00:34:03.760 --> 00:34:07.570
everything from installing and using
the connect sensor, setting up

560
00:34:07.570 --> 00:34:12.430
your dev environment, basic skeletal
tracking, using the depth cameras

561
00:34:13.990 --> 00:34:19.630
that, that high level stuff.
And then let's see, do

562
00:34:20.050 --> 00:34:24.850
do C for S connect
that code plex.com is a

563
00:34:24.850 --> 00:34:27.940
coding for fun connect toolkit.
And that includes extension methods

564
00:34:27.940 --> 00:34:33.850
for WPF and windows forms
includes some basic things like

565
00:34:33.850 --> 00:34:35.680
a tap and hold button
that you can use in

566
00:34:35.680 --> 00:34:42.940
WPS for say selecting something
and some other low level

567
00:34:42.940 --> 00:34:45.430
things to work with the
depth camera as well. Very

568
00:34:45.430 --> 00:34:47.140
cool. And can I, do
I have to buy an

569
00:34:47.170 --> 00:34:48.940
Xbox to do this? Or
can I go buy connect

570
00:34:48.940 --> 00:34:53.440
by itself? Yeah. So you
can buy just a regular

571
00:34:53.440 --> 00:34:55.390
connect by itself. And in
fact, the one thing you

572
00:34:55.390 --> 00:34:57.520
do need to do, if
you've got a bundle, you

573
00:34:57.520 --> 00:35:02.860
may not have a regular
USB cable, but basically if

574
00:35:02.860 --> 00:35:07.420
you have a power cord
for your, your connect and

575
00:35:07.420 --> 00:35:10.720
the power cord plugs into
the end will be a,

576
00:35:10.780 --> 00:35:13.120
what kind of looks like
a USB, but it's actually

577
00:35:13.420 --> 00:35:16.510
is missing a corner and
it's orange in there that

578
00:35:16.510 --> 00:35:18.520
is not a USB. You
can try and force it

579
00:35:18.520 --> 00:35:21.760
into your USB port. It
won't work. Okay. There's a

580
00:35:21.760 --> 00:35:24.040
connection. And if people don't
have it, they can go

581
00:35:24.040 --> 00:35:27.820
to the Microsoft store and
buy it. But that includes

582
00:35:28.360 --> 00:35:31.570
basically a power plug and
a converter to make it

583
00:35:31.570 --> 00:35:34.330
into a USB. But if
you buy the regular standalone

584
00:35:34.330 --> 00:35:37.980
connect, then you can just
use it with no. Okay.

585
00:35:37.980 --> 00:35:40.440
So Then the one I
have has USB, if I

586
00:35:40.440 --> 00:35:43.790
bought a bundle, I needed
it. Yes. Although I think

587
00:35:43.790 --> 00:35:46.310
there may be some bundles
that technically have that adapter,

588
00:35:46.310 --> 00:35:48.590
but I think as a
general rule, if you don't

589
00:35:48.590 --> 00:35:51.710
have the power after, then
you need to, then you

590
00:35:51.710 --> 00:35:54.830
need to buy it. Okay.
Cool. Well, thanks a lot,

591
00:35:54.830 --> 00:35:56.930
Dan. I appreciate it. Get
me up to date on

592
00:35:56.930 --> 00:36:00.950
the connect. Thanks. It's been
great. This has been another

593
00:36:00.950 --> 00:36:03.890
episode of Hanselminutes and we'll
see you again next week.

