WEBVTT FILE

1
00:00:00.720 --> 00:00:03.810
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.810 --> 00:00:07.140
they make the show possible.
Today's show is sponsored by

3
00:00:07.140 --> 00:00:11.430
Tellerik create compelling app experiences
across any screen with the

4
00:00:11.430 --> 00:00:16.290
Tellerik platform Telerx end to
end platform. Uniquely combines industry

5
00:00:16.290 --> 00:00:19.980
leading UI tools with cloud
services to simplify the entire

6
00:00:19.980 --> 00:00:24.450
app development cycle Tellerik offers
everything.net developers need to build

7
00:00:24.450 --> 00:00:33.870
quality apps faster. Try it
free at tellerik.com/platform that's tellerik.com/platform.

8
00:00:39.890 --> 00:00:53.150
<inaudible> Hansel minutes.com. It's Hanselman.
It's a weekly discussion with

9
00:00:53.150 --> 00:00:58.130
web developer and technologists. Scott
Hanselman. This is Lawrence Ryan announcing

10
00:00:58.130 --> 00:01:02.840
show number 511. In this
episode, Scott talks with coworker

11
00:01:02.870 --> 00:01:11.480
Damien Edwards about asp.net core.
Hi, this is Scott Hanselman.

12
00:01:11.480 --> 00:01:13.970
This is another episode of
Hansel minutes today. I'm talking

13
00:01:13.970 --> 00:01:17.690
with Damien Edwards. He is
in fact, my coworker. This

14
00:01:17.690 --> 00:01:19.910
is an unusual show because
I'm going to be asking

15
00:01:19.910 --> 00:01:21.890
some questions that I do
know the answer to, but

16
00:01:21.890 --> 00:01:24.350
in fact, a lot of
them, I don't thanks for

17
00:01:24.350 --> 00:01:27.770
talking to me today, Damien,
of course. So you run

18
00:01:27.980 --> 00:01:31.250
the asp.net team or you're
the PM. Are you the

19
00:01:31.250 --> 00:01:34.430
lead? What? Yeah, I have
a terrible title. My title

20
00:01:34.430 --> 00:01:43.460
is program manager manager. My
title is principal PM manager

21
00:01:43.610 --> 00:01:49.160
and the PM is short
for program manager. Okay. That's

22
00:01:49.190 --> 00:01:53.930
a really good segue into
a discussion of how Microsoft

23
00:01:53.930 --> 00:01:57.830
sucks at naming stuff. Do
we really suck at naming

24
00:01:57.830 --> 00:02:00.380
stuff? Is that basically the
deal let's face it? Everyone

25
00:02:00.380 --> 00:02:04.550
sucks. Naming is hard and
naming is the most subjective

26
00:02:04.550 --> 00:02:08.540
topic you can pick on
the planet. Obviously there are

27
00:02:08.540 --> 00:02:11.210
objective parts to everything and
you can make some fairly

28
00:02:11.210 --> 00:02:13.610
objective arguments about naming, but
when it comes down to

29
00:02:13.610 --> 00:02:17.900
it sort of reads into
a name and what they

30
00:02:17.900 --> 00:02:22.340
think of a name is
pretty much purely subjective. It's

31
00:02:22.340 --> 00:02:26.660
always polarizing. And so like
any sort of political type

32
00:02:26.660 --> 00:02:30.140
of thing, we do our
best to, to appease as

33
00:02:30.140 --> 00:02:32.480
much as we can all
parties when we come up

34
00:02:32.480 --> 00:02:34.460
with names and sometimes we
get it wrong. Then sometimes

35
00:02:34.460 --> 00:02:37.760
we have a chance to
improve things. I'm not going

36
00:02:37.760 --> 00:02:39.620
to say correct. I would
like to say we can

37
00:02:39.620 --> 00:02:42.620
correct things, but we can
improve them. I said a

38
00:02:42.650 --> 00:02:46.010
naming is hard in a
blog post yesterday, and I

39
00:02:46.010 --> 00:02:48.890
thought that was a pretty
clear statement. And then some

40
00:02:48.890 --> 00:02:53.930
people on Twitter, like, is
it like, I don't know,

41
00:02:53.930 --> 00:02:55.490
it's frustrating. Cause it seems
like people feel that they

42
00:02:55.490 --> 00:02:59.030
could just pull a name
out of thin air and

43
00:02:59.080 --> 00:03:02.140
would be better. But anyway,
so what's going on with

44
00:03:02.140 --> 00:03:06.750
asp.net five. So we have
decided after a bunch of

45
00:03:06.990 --> 00:03:10.500
very valid feedback that one
of the most confusing parts

46
00:03:10.500 --> 00:03:14.490
about ACE going at five
was the five bit. The

47
00:03:14.490 --> 00:03:19.170
fact that five is larger
than four, funnily enough, which

48
00:03:19.170 --> 00:03:21.090
was the last version of
ACO net that we shipped

49
00:03:21.780 --> 00:03:23.340
as it's, you know, as
I used to be is

50
00:03:23.340 --> 00:03:27.750
currently known, is it leads
to some confusion. And so

51
00:03:27.960 --> 00:03:29.820
I think as you pointed
out in your posts, like

52
00:03:29.820 --> 00:03:33.240
five implies that it is
a new version of four,

53
00:03:33.270 --> 00:03:35.700
it is bigger, it covers
more things. It is the

54
00:03:35.700 --> 00:03:38.610
next version. And you, if
you have four, you should

55
00:03:38.610 --> 00:03:43.950
move to five. That's really
not what reflects reality with

56
00:03:43.950 --> 00:03:45.720
what we're trying to do
with what was aiming at

57
00:03:45.720 --> 00:03:48.900
five. So we've renamed it
to something new and we've

58
00:03:48.900 --> 00:03:51.360
reset the version number to
one. And so we're now

59
00:03:51.360 --> 00:03:56.070
calling it asp.net core one
point art. Okay. So, so

60
00:03:56.070 --> 00:04:00.810
there's asp.net 4.5 and MVC
and all those things continue

61
00:04:00.810 --> 00:04:05.820
to exist. And theoretically, theoretically,
could there be an ESPN

62
00:04:05.850 --> 00:04:08.310
at five in the future?
Oh, of course. In theory,

63
00:04:08.310 --> 00:04:11.940
there's nothing technically preventing that.
So then this would mean

64
00:04:11.940 --> 00:04:18.000
that it could be potentially
confusing from a, from a

65
00:04:18.000 --> 00:04:21.060
Google, you know, Google juice
perspective. Like people out there

66
00:04:21.060 --> 00:04:23.490
Googling for stuff are going
to be, if they search

67
00:04:23.490 --> 00:04:25.200
for Aspen on at five,
they're currently going to find

68
00:04:25.200 --> 00:04:27.450
a bunch of beta stuff
and a bunch of stack

69
00:04:27.450 --> 00:04:30.360
overflow. Yeah. So I think
history has shown that generally

70
00:04:30.360 --> 00:04:33.270
those types of issues are
point in time issues. Like

71
00:04:33.270 --> 00:04:36.930
for example, Microsoft had a
product called surface that existed

72
00:04:36.930 --> 00:04:39.480
for a number of years,
that was somewhat near category,

73
00:04:39.480 --> 00:04:42.030
defining it, defined its own
category and had pretty good

74
00:04:42.390 --> 00:04:45.270
Google food because you searched
for Microsoft surface and you

75
00:04:45.270 --> 00:04:48.000
got the big ass table.
And then in one fell

76
00:04:48.000 --> 00:04:51.180
swoop, we came out and
said, Microsoft surface is now

77
00:04:51.180 --> 00:04:55.020
an iPad competing tablet and
you know, for a day

78
00:04:55.020 --> 00:04:57.840
or so people thought that
was ridiculous. And now we

79
00:04:57.840 --> 00:04:59.130
look back on that and
no one really blinks an

80
00:04:59.130 --> 00:05:01.590
eyelid at that. And if
you search for Microsoft surface,

81
00:05:01.590 --> 00:05:04.500
you will get the current
generation product. And I think

82
00:05:05.040 --> 00:05:06.960
there are probably other examples
of that as well. And

83
00:05:07.150 --> 00:05:09.810
I really don't think, Yeah,
Google juice kind of works

84
00:05:09.810 --> 00:05:11.610
itself out. I think the
other thing that's worth pointing

85
00:05:11.610 --> 00:05:14.100
out and I'd be interested
if you agree, is that

86
00:05:14.400 --> 00:05:18.150
there's a whole class of
people who simply aren't paying

87
00:05:18.150 --> 00:05:20.430
attention to any of this.
Like, it may seem like

88
00:05:20.430 --> 00:05:21.840
a Tempest in a teacup,
you know, it's a big

89
00:05:21.840 --> 00:05:24.090
deal to everyone. Who's, you
know, if you're following the

90
00:05:24.090 --> 00:05:26.820
daily builds and the commit
messages or the GitHub of

91
00:05:26.820 --> 00:05:30.480
asp.net, this all seems very
bad, but the average Joe

92
00:05:30.480 --> 00:05:32.460
and Jane developer for every
one of us, there's a

93
00:05:32.460 --> 00:05:35.430
thousand of them. They probably
don't really care. Yeah. And

94
00:05:35.490 --> 00:05:37.350
that's a very good point
at the end of the

95
00:05:37.350 --> 00:05:40.500
day. It can, things can
seem, I mean, they can

96
00:05:40.500 --> 00:05:42.560
become an echo chamber too
at a certain point. So

97
00:05:42.570 --> 00:05:44.640
like, it seems very loud
when, cause we're listening to

98
00:05:44.640 --> 00:05:47.010
the people who are engaged,
but as you point out,

99
00:05:47.070 --> 00:05:51.510
I think we won't really
see the true impact of

100
00:05:51.510 --> 00:05:54.120
this name and of this
product for a couple of

101
00:05:54.120 --> 00:05:57.150
years yet. Like, because you
know, there's just an inherent

102
00:05:57.930 --> 00:06:00.530
sort of lead time involved
with any type of product

103
00:06:00.530 --> 00:06:03.800
like this being more widely
adopted across both our existing

104
00:06:03.800 --> 00:06:06.020
customer base and new customers
that we're trying to reach

105
00:06:06.020 --> 00:06:08.230
with some of the things
that we're doing. So, So

106
00:06:08.230 --> 00:06:10.000
I went and I took
some of my slides where

107
00:06:10.000 --> 00:06:14.320
we had asp.net five sitting
on top of.net framework for

108
00:06:14.320 --> 00:06:16.420
six sitting on top of
it and I fixed it

109
00:06:16.420 --> 00:06:19.630
and I updated it to
use the new asp.net core

110
00:06:20.290 --> 00:06:22.630
naming. And it seems very
clear and everyone, you know,

111
00:06:22.630 --> 00:06:24.250
the majority of people are
saying this makes a lot

112
00:06:24.250 --> 00:06:27.940
more sense. What about the
MVC and web API? Cause

113
00:06:27.940 --> 00:06:30.670
for a while, there, there
was like NBC five and

114
00:06:30.670 --> 00:06:33.640
web API 2.1. And what
about all those kinds of

115
00:06:33.640 --> 00:06:36.670
things on top? Yeah. So
those things kind of existed

116
00:06:36.700 --> 00:06:39.910
as separate things before because
of the nature of how

117
00:06:39.910 --> 00:06:42.790
we shipped asp.net. So, you
know, previously AIDS got on,

118
00:06:42.800 --> 00:06:45.280
it was basically a part
of.net. It was part of

119
00:06:45.280 --> 00:06:47.560
the.net framework and to get
ESPN at you and you've

120
00:06:47.560 --> 00:06:51.400
installed windows, right? That's how
you got asp.net covid.net framework

121
00:06:51.400 --> 00:06:53.800
came with windows. And then
when we wanted to do

122
00:06:53.800 --> 00:06:56.740
things that were extra and
like you said, built on

123
00:06:56.740 --> 00:06:59.680
top, we would have to
create separate things. And so

124
00:06:59.680 --> 00:07:01.840
MVC was a separate incident.
First of all, we had

125
00:07:01.840 --> 00:07:04.240
MSA jacks that was the
first sort of Uber as

126
00:07:04.240 --> 00:07:05.980
we call them out of
van product. We did in

127
00:07:05.980 --> 00:07:10.690
2006, I think it was.
And then MSA Jack's eventually

128
00:07:10.690 --> 00:07:13.510
rolled back in, in dotnet
for, and then we had

129
00:07:13.510 --> 00:07:20.170
MVC, which we shipped in
2009, 2010, which was again,

130
00:07:20.170 --> 00:07:22.270
built on top. And then
we had signal on and

131
00:07:22.270 --> 00:07:25.480
we had web API and
these were all additional on

132
00:07:25.480 --> 00:07:28.390
sort of separate on top
products, which, you know, we've

133
00:07:28.390 --> 00:07:30.790
kind of reflected how dotnet
evolved in the last five

134
00:07:30.790 --> 00:07:35.380
years. Like new get didn't
exist until 2011. And so,

135
00:07:35.440 --> 00:07:37.960
you know, before that, the
way you shipped something for.net

136
00:07:37.990 --> 00:07:40.210
was either you were in
the GAC by way of

137
00:07:40.210 --> 00:07:42.730
being in the BCL. That
is you're in dotnet you

138
00:07:42.730 --> 00:07:45.040
right. Global assembly cashed by
way of the base class.

139
00:07:45.460 --> 00:07:48.040
Yeah. All you were in
the gang because people downloaded

140
00:07:48.040 --> 00:07:50.290
an MSI, usually in the
form of something like an

141
00:07:50.290 --> 00:07:54.310
SDK, you install the Fu
SDK for.net, you would run

142
00:07:54.310 --> 00:07:55.780
that and that would put
some other stuff in the

143
00:07:55.780 --> 00:07:57.730
GAC. And then you would
just say, add reference, you

144
00:07:57.730 --> 00:07:59.770
know, the global assembly cache
in visual studio and that's

145
00:07:59.770 --> 00:08:01.870
how you would get a
thing. And then with the

146
00:08:01.870 --> 00:08:03.820
advent of new get that
kind of turned everything on

147
00:08:03.820 --> 00:08:07.270
its head and the concept
of shipping Oop components that

148
00:08:07.990 --> 00:08:11.440
were really quite modular and
went out of this monolith

149
00:08:11.770 --> 00:08:13.960
or even built on top
of that monolith as such

150
00:08:14.500 --> 00:08:17.140
sort of became apparent. And
so I think now with

151
00:08:17.140 --> 00:08:19.990
the sort of new dotnet
core land where we're landing

152
00:08:19.990 --> 00:08:23.530
now, that is, that is
the status quo. Like everything

153
00:08:23.530 --> 00:08:26.260
is modular. And you know,
our, our, our foundation right

154
00:08:26.260 --> 00:08:30.700
now is really just the.net
core CLI, which is the

155
00:08:30.700 --> 00:08:33.340
other new thing we're doing
in our C two. And

156
00:08:33.370 --> 00:08:36.190
we are building on top
of that and a couple

157
00:08:36.190 --> 00:08:38.830
of other new concepts, like
the platform standard and standard

158
00:08:38.830 --> 00:08:42.820
library. And, you know, asp.net
is basically just some API

159
00:08:42.820 --> 00:08:45.880
that you call from your
console app. And some of

160
00:08:45.880 --> 00:08:49.240
that API is an MVC
type of way of organizing

161
00:08:49.240 --> 00:08:51.880
your apps. Some of it
is middleware. Some of it

162
00:08:51.880 --> 00:08:55.350
will be web API type
model view controller things, and

163
00:08:55.350 --> 00:08:57.630
eventually we'll have a signal
or concepts in there as

164
00:08:57.630 --> 00:09:00.990
well. So we'll get hubs
back. And then even eventually

165
00:09:00.990 --> 00:09:03.330
we'll probably look at doing
some type of pages framework

166
00:09:03.810 --> 00:09:05.880
again as well, but I
don't think you'll see us

167
00:09:05.880 --> 00:09:10.110
talk about those as distinct
products as such anymore. They'll

168
00:09:10.110 --> 00:09:12.570
just be other API that
are, that is under the

169
00:09:12.570 --> 00:09:14.760
ACE put on that umbrella
that plugs into that call.

170
00:09:15.380 --> 00:09:18.860
It seems like we're trying
to accomplish two different things

171
00:09:18.860 --> 00:09:23.060
that on first blush might
seem at odds. You know,

172
00:09:23.060 --> 00:09:25.610
we've been talking about one
asp.net and the idea of

173
00:09:25.610 --> 00:09:28.730
a unified asp.net for a
number of years now. And

174
00:09:28.730 --> 00:09:30.680
that's been a kind of
a goal that is a

175
00:09:30.680 --> 00:09:33.620
moving target. And then we're
talking about making Aspen and

176
00:09:33.620 --> 00:09:38.510
that truly modular, if you
did one of those completely,

177
00:09:39.050 --> 00:09:41.210
you know, if you went
all modular, you know, you'd

178
00:09:41.210 --> 00:09:45.410
get into a different versioning.
You know, single signal are,

179
00:09:45.470 --> 00:09:47.510
is a, is a package
and this is a package

180
00:09:47.510 --> 00:09:49.640
and that's a package and
they're all differently version, which

181
00:09:49.640 --> 00:09:53.330
may be the underlying reality,
but it seems that customers

182
00:09:53.330 --> 00:09:54.950
do kind of want to
be able to say, yes,

183
00:09:54.950 --> 00:09:59.120
I'm on asp.net core one
dot three, and that's reliable

184
00:09:59.120 --> 00:10:00.830
and I can count on
it. And they don't want

185
00:10:00.830 --> 00:10:03.770
us to rev web API
at one speed and signal

186
00:10:03.770 --> 00:10:06.710
on another. So can you
accomplish both modularity and a

187
00:10:06.710 --> 00:10:11.570
clean, semantic versioning That's yet
to be seen, frankly, that

188
00:10:11.610 --> 00:10:15.770
that's something that we're still
talking about right now, obviously

189
00:10:15.770 --> 00:10:18.200
we're really focused on getting
out sort of the first

190
00:10:18.200 --> 00:10:21.230
version of this new world.
So obviously for the first

191
00:10:21.230 --> 00:10:24.770
version, everything will be aligned
how that goes beyond that.

192
00:10:25.190 --> 00:10:26.810
I'm really not ready to
say. Yeah. I mean, there

193
00:10:26.810 --> 00:10:30.260
are pros and cons to
both approaches and there are

194
00:10:30.260 --> 00:10:33.260
hybrid approaches that you can
take as well. Whereby you

195
00:10:33.260 --> 00:10:35.690
know, people are always free
to grab the latest and

196
00:10:35.690 --> 00:10:38.660
greatest bits either from new
get, or even earlier from,

197
00:10:38.660 --> 00:10:40.730
you know, nightly builds or
might get bills or directly

198
00:10:40.730 --> 00:10:43.100
from source. And then you
can do a sort of

199
00:10:43.100 --> 00:10:45.890
a sync up cadence based
released where, you know, every

200
00:10:45.890 --> 00:10:48.650
quarter or every six months,
we do a sort of

201
00:10:48.650 --> 00:10:51.590
a sweet release. And you
can just, if you want

202
00:10:51.590 --> 00:10:52.910
to be on that train,
you'll be on that train.

203
00:10:52.910 --> 00:10:55.520
Otherwise you sort of stay
on the super modular path.

204
00:10:56.420 --> 00:10:57.740
I'm not really sure where
we're gonna land date. It

205
00:10:57.740 --> 00:11:00.590
would probably be something along
the lines of the hybrid

206
00:11:00.590 --> 00:11:04.610
model, where we enable individual
bits to sort of innovate

207
00:11:04.610 --> 00:11:07.700
and ship on their, on
somewhat of their own schedule.

208
00:11:07.700 --> 00:11:09.700
But they're expected to sort
of sync up in the

209
00:11:09.700 --> 00:11:13.910
line up with a larger
schedule with more fanfare, you

210
00:11:13.910 --> 00:11:17.300
know, for the marketing team.
I like that solution. I

211
00:11:17.300 --> 00:11:19.310
mean, you had this great
slide that I've been using

212
00:11:19.340 --> 00:11:21.530
all over where you talked
about, how would you like

213
00:11:21.530 --> 00:11:24.560
your steak in the context
of asp.net? You're like rare,

214
00:11:24.560 --> 00:11:27.530
medium rare for things that
are maybe daily builds and

215
00:11:27.530 --> 00:11:29.720
well done where you're much
safer. You're not going to

216
00:11:29.720 --> 00:11:33.470
get salmonella a version of
asp.net if it's one of

217
00:11:33.470 --> 00:11:35.630
those main cadence ones. So
I liked the idea of

218
00:11:35.630 --> 00:11:38.090
saying I can grab a
daily of signal are, but

219
00:11:38.090 --> 00:11:40.850
I also like the idea
of once a year saying,

220
00:11:40.850 --> 00:11:44.000
I want core 1.3 and
just counting on it for

221
00:11:44.270 --> 00:11:47.630
almost like Uber and to
right. Has their long longterm

222
00:11:47.720 --> 00:11:53.200
LTS releases their longterm serviceable
releases. Yeah. Yeah. So it's

223
00:11:53.200 --> 00:11:54.880
a difficult problem. I mean,
I think with things like

224
00:11:54.880 --> 00:11:56.740
a balloon too, it's a
little easier because you tend

225
00:11:56.740 --> 00:11:59.080
to just acquire the one
thing you just like, I

226
00:11:59.080 --> 00:12:01.810
install Ubuntu and I install
LTS, you know, 1404 or

227
00:12:01.810 --> 00:12:04.330
whatever with a spin on
it, because the reality is

228
00:12:04.330 --> 00:12:08.230
now on.net core, you're effectively
downloading 300 packages. I mean,

229
00:12:08.230 --> 00:12:10.810
you may acquire just a
single install them, but you

230
00:12:10.810 --> 00:12:13.720
know, and under the covers,
it's actually delivered in many,

231
00:12:13.720 --> 00:12:17.170
many hundreds of nougat packages,
all of which, you know,

232
00:12:17.180 --> 00:12:19.180
may have issues and we
might want to get out

233
00:12:19.390 --> 00:12:22.660
fixes or do rapid improvements
on various little pieces of

234
00:12:22.660 --> 00:12:25.420
that. It is a, it
is a complicated problem. And

235
00:12:25.420 --> 00:12:28.570
I don't think there is
one solution to solve that

236
00:12:28.570 --> 00:12:30.340
we still need to sort
of revel on that a

237
00:12:30.340 --> 00:12:32.580
bit and figure out what
works best for us. I

238
00:12:32.580 --> 00:12:34.920
do feel like that, like
enterprises are going to want

239
00:12:35.400 --> 00:12:37.290
something that they can put
their thumb on and say,

240
00:12:37.470 --> 00:12:38.940
that's the one we're going
to count on for the

241
00:12:38.940 --> 00:12:41.340
next year or two. Yeah,
absolutely. And I think, I

242
00:12:41.340 --> 00:12:44.790
think, you know, I'll support
policies will reflect that. And

243
00:12:44.790 --> 00:12:47.340
I think, you know, for
a large portion of our

244
00:12:47.340 --> 00:12:50.580
customers, they acquire this stuff
just through visual studio. And

245
00:12:50.580 --> 00:12:52.530
so they install a version
of visual studio and whatever

246
00:12:52.530 --> 00:12:56.970
the template gives them is
what they get. And they

247
00:12:56.970 --> 00:13:00.080
only upgrade when they need
to, like when suddenly they

248
00:13:00.090 --> 00:13:02.310
determined they have to upgrade
and then they would upgrade

249
00:13:02.310 --> 00:13:04.680
a package or upgrade to
a new version of visual

250
00:13:04.680 --> 00:13:07.650
studio. But for others, as
you pointed out that they

251
00:13:07.650 --> 00:13:09.360
want to get their stake
in a different way. Some

252
00:13:09.360 --> 00:13:13.200
people want to help grow
the cow, which is great

253
00:13:13.200 --> 00:13:15.540
in the opensource world. They
come in and actually send

254
00:13:15.540 --> 00:13:20.250
us pull request, which is
good too. In.net. You know,

255
00:13:20.250 --> 00:13:24.330
one, two for the full
framework it's always been installed

256
00:13:24.330 --> 00:13:29.700
in C windows, microsoft.net/framework. It's
a machine level thing. People

257
00:13:29.700 --> 00:13:32.100
are slightly afraid of it
because it involves a reboot

258
00:13:32.130 --> 00:13:35.520
and it changes stuff. And
if you update the full

259
00:13:35.520 --> 00:13:39.450
framework, it makes things on
your computer, you know, possibly

260
00:13:39.450 --> 00:13:43.080
behave differently, right? You go
from 4.5 to 4.6, there's

261
00:13:43.080 --> 00:13:46.350
a non zero percentage that
something will change with this

262
00:13:46.350 --> 00:13:49.230
interstitial place, this meet in
the middle place, this beta

263
00:13:49.230 --> 00:13:51.420
and these alphas and things.
We had this thing called

264
00:13:51.420 --> 00:13:53.760
the DNX to start an
execution environment where it was

265
00:13:53.760 --> 00:13:57.150
in my users folder and
people like that. And then

266
00:13:57.150 --> 00:14:00.180
optionally, you could install it
at the app level. So

267
00:14:00.180 --> 00:14:02.640
there was this kind of
nice, clean, scoping idea of

268
00:14:02.640 --> 00:14:07.590
like machine level, user level,
app level. Now we've unified

269
00:14:07.590 --> 00:14:10.800
with the.net team and the.net
core to the point where

270
00:14:10.800 --> 00:14:13.710
there will be this dotnet
CLI this command line interface.

271
00:14:13.710 --> 00:14:16.110
So it's going to feel
more like go and Python

272
00:14:16.110 --> 00:14:18.960
and things like that. Where
does it live though? Now

273
00:14:19.830 --> 00:14:22.530
It's pretty much the same.
So the, the thing to

274
00:14:22.530 --> 00:14:26.460
remember with the dinette CLI
is it's, in some ways

275
00:14:26.460 --> 00:14:28.350
it's a new thing. And
in other ways, it's, it's

276
00:14:28.350 --> 00:14:31.410
kind of broken things up
even more than what DNX

277
00:14:31.410 --> 00:14:35.490
was. So DNX was in
actuality, somewhat of a monolith.

278
00:14:35.970 --> 00:14:38.250
And so when you installed
the DNX, you got a

279
00:14:38.250 --> 00:14:40.530
set of tools, then you
got DNX to ECC and

280
00:14:40.530 --> 00:14:44.610
DMU. And in the end
you got a runtime. So

281
00:14:44.610 --> 00:14:47.130
you got to call, see
a lab baked away somewhere

282
00:14:47.130 --> 00:14:50.220
in the folder in your
users, a user profile. And

283
00:14:50.220 --> 00:14:52.130
you've got to set up
packages and instead of assemblies,

284
00:14:52.160 --> 00:14:55.370
instead of BCL bits, and
they will all inside the

285
00:14:55.370 --> 00:14:57.680
ID annex folder, which had
a version. And so when

286
00:14:57.680 --> 00:15:00.650
you installed a different DNX,
you got a new version

287
00:15:00.650 --> 00:15:03.950
of all, three of those
things with the dotnet CLI

288
00:15:03.980 --> 00:15:07.280
it's very different. The donut
CLI itself is just a

289
00:15:07.280 --> 00:15:09.890
set of tools. It's nothing
else. So I have a

290
00:15:09.890 --> 00:15:12.590
compiler and a driver and
those types of things and

291
00:15:12.590 --> 00:15:15.290
the tools themselves can be
delivered on new get packages.

292
00:15:15.620 --> 00:15:18.530
And so at its core,
the dotnet CLI is practically

293
00:15:18.530 --> 00:15:24.020
nothing. It's really a very,
very convention driven, thin veneer.

294
00:15:24.130 --> 00:15:26.870
It's a, it's a command
line experience, lots of CLI

295
00:15:27.200 --> 00:15:29.780
that drives a set of
tools, but they are different

296
00:15:30.740 --> 00:15:36.310
to the runtime. So bash
using an Unix analogy, bash

297
00:15:36.340 --> 00:15:40.120
is not, grep is not,
OC is not said those

298
00:15:40.120 --> 00:15:42.250
are that utilities that could
have varying versions, that you

299
00:15:42.250 --> 00:15:44.530
can go get a number
of different ways and bashes

300
00:15:44.530 --> 00:15:48.970
the driver, right? Yep. Absolutely.
So, so.net, the DOD Nat

301
00:15:48.970 --> 00:15:51.970
that you run at the
command line isn't dot net

302
00:15:51.970 --> 00:15:56.350
itself. No, doesn't add is
a punchy layer outside. Well,

303
00:15:56.350 --> 00:15:58.360
yeah. And, and it it's,
it's more, it's, it's kind

304
00:15:58.360 --> 00:16:00.670
of the, it's the developer
experience, right? The DIT and

305
00:16:00.670 --> 00:16:03.700
ETS is the command line
developer experience, very similar to

306
00:16:04.120 --> 00:16:07.090
the Azure command line in
the Azure SDK, there's a

307
00:16:07.090 --> 00:16:09.640
set of libraries and a
set of tools, and this

308
00:16:09.640 --> 00:16:11.920
is the tool spot. And
then there are other parts

309
00:16:11.920 --> 00:16:14.260
to what we're doing, which
represent the libraries, things like

310
00:16:14.260 --> 00:16:17.530
the dotnet standard library, and
then the.net platform standard, which

311
00:16:17.530 --> 00:16:22.810
is an attempt to try
and rationalize and simplify how

312
00:16:22.810 --> 00:16:26.470
we represent.net API. Now that
we're cross platform. And then

313
00:16:26.470 --> 00:16:29.140
we have the actual runtimes
themselves. So we have traditional

314
00:16:29.170 --> 00:16:32.440
on that runtime, then the.net
framework, which the.net core CLI

315
00:16:32.440 --> 00:16:34.990
supports you can build apps
that run on their own,

316
00:16:34.990 --> 00:16:37.870
their framework using a.net core,
which is why ASP net

317
00:16:37.900 --> 00:16:40.810
core will still run on.net
framework. We have the core

318
00:16:40.810 --> 00:16:44.170
CLR, which is a new
runtime, which will version that

319
00:16:44.170 --> 00:16:46.000
its own cadence. You can
build your own versions cause

320
00:16:46.000 --> 00:16:47.590
it's open source. So when
you move, we need to

321
00:16:47.590 --> 00:16:50.590
enable all these new scenarios
that were never really a

322
00:16:50.590 --> 00:16:53.800
problem before, because you know,
you didn't, you, you used

323
00:16:53.800 --> 00:16:55.360
to not be able to
build your own version of

324
00:16:55.360 --> 00:16:57.970
the CLI or the garbage
collector or digital. You can

325
00:16:57.970 --> 00:16:59.650
do that now. And so
we need to have a

326
00:16:59.650 --> 00:17:01.930
command line or a development
experience that can enable those

327
00:17:01.930 --> 00:17:03.880
things. And we need to
think differently about how we

328
00:17:03.880 --> 00:17:07.390
deliver those pieces, such that,
Hey, if I want to

329
00:17:07.390 --> 00:17:09.700
build my own jitter, I
don't have to uninstall.net on

330
00:17:09.700 --> 00:17:14.440
my machine and install a
different one. So when you

331
00:17:14.440 --> 00:17:18.580
are in it today, before
this new dotnet CLI in

332
00:17:18.580 --> 00:17:22.540
this beta place that we're
at, there's this DN vm.net

333
00:17:22.540 --> 00:17:27.610
version manager. And what's nice
about it psychologically is that

334
00:17:28.000 --> 00:17:30.490
you can run DNV VM
list. And it says, Oh,

335
00:17:30.490 --> 00:17:33.220
you've got these five versions
of the.net framework kind of

336
00:17:33.490 --> 00:17:38.080
on your machine somewhere. And
it's, it's, it's kind of

337
00:17:38.080 --> 00:17:41.440
comforting because with dot and
full framework, you can say

338
00:17:41.440 --> 00:17:43.930
like CLR over, that's been
a command line and it

339
00:17:43.930 --> 00:17:46.420
says, Oh, here are the
CLRs available to you. And

340
00:17:46.420 --> 00:17:48.550
DNV M list was another
way of saying here they

341
00:17:48.550 --> 00:17:52.050
are in this new world
where there's the dotnet command

342
00:17:52.050 --> 00:17:55.140
line tools, the STK, is
there an, is there a

343
00:17:55.140 --> 00:17:58.080
way to say, or do
you even want to, what

344
00:17:58.080 --> 00:18:00.680
versions of the CLR do
I have available? Well, so

345
00:18:00.680 --> 00:18:03.590
again, the CLR itself, the
runtime will just mean a

346
00:18:03.590 --> 00:18:06.590
package. And it's just another
package that you referenced from

347
00:18:06.590 --> 00:18:09.350
your new gate graph. And
so to say, it's installed

348
00:18:09.350 --> 00:18:11.600
as a little of a
misnomer because it's really just

349
00:18:11.600 --> 00:18:14.900
another package that you referenced
It's available. Let's say that,

350
00:18:14.900 --> 00:18:17.120
like, for example, it's on
the disc somewhere. Is that

351
00:18:17.120 --> 00:18:18.950
something I'd want to ask
as opposed to, I want

352
00:18:18.950 --> 00:18:20.930
to go up and get
it from the cloud Maybe,

353
00:18:20.930 --> 00:18:22.400
but I mean, that's kind
of like saying, do you

354
00:18:22.400 --> 00:18:24.830
want a command that says
list all the new, get

355
00:18:24.830 --> 00:18:27.980
packages that I happen to
have previously restored anywhere on

356
00:18:27.980 --> 00:18:31.760
this hard drive, you know,
that The CLR special. So

357
00:18:31.760 --> 00:18:36.050
you'd want to say.net list.
So possibly, I mean, those

358
00:18:36.050 --> 00:18:39.200
packages will have a named
like a naming convention. So

359
00:18:39.200 --> 00:18:41.840
it'll be very easy to
identify them. I'm not sure

360
00:18:41.840 --> 00:18:43.730
that there's going to be
a first class command, at

361
00:18:43.730 --> 00:18:46.520
least in the first release
of that on NCLR to

362
00:18:46.520 --> 00:18:48.230
list them. But some of
those things are still being

363
00:18:48.230 --> 00:18:51.320
figured out. I guess it's
more, my question is to

364
00:18:51.320 --> 00:18:53.810
you is more, not, not
will there be that, but

365
00:18:54.080 --> 00:18:56.210
is there value in that?
Am I weird to want

366
00:18:56.210 --> 00:19:00.140
that given that I have
it now? I'm not gonna

367
00:19:00.150 --> 00:19:02.930
say you're weird to want
that I can understand, but

368
00:19:02.930 --> 00:19:05.660
I think, I think some
of the desire with wanting

369
00:19:05.660 --> 00:19:08.540
that is, is, is a
sort of product of how

370
00:19:08.570 --> 00:19:11.240
dotnet has shipped in the
past. I think we need

371
00:19:11.240 --> 00:19:14.480
to sort of reposition how
we think about the applications

372
00:19:14.480 --> 00:19:17.000
that we're building and how
they string together now. And

373
00:19:17.000 --> 00:19:19.790
they're re ask some of
those fundamental questions about whether

374
00:19:19.790 --> 00:19:23.120
it makes sense to think
about the runtime and the

375
00:19:23.120 --> 00:19:25.580
tools and the libraries I'm
using in that same way

376
00:19:25.580 --> 00:19:29.150
as we used to. Well,
I'm wondering, imagining some future,

377
00:19:29.150 --> 00:19:31.550
like a year from now,
right? And I've got lots

378
00:19:31.550 --> 00:19:34.070
of different apps on my
machine, some of which use.net,

379
00:19:34.580 --> 00:19:37.070
a full framework, like maybe
I'm running open live writer,

380
00:19:37.850 --> 00:19:40.550
some of which are done
at core, I might have

381
00:19:40.550 --> 00:19:44.570
three or four locally installed
web apps and then, you

382
00:19:44.570 --> 00:19:48.110
know, command line utilities and
they may all use one

383
00:19:48.110 --> 00:19:50.360
of three or four different
versions of the core CLR,

384
00:19:50.360 --> 00:19:53.930
including like you said, totally.
Yeah. So the CLR. Yep.

385
00:19:54.440 --> 00:19:56.750
Am I going to want
to ask the question, like

386
00:19:56.900 --> 00:19:58.940
which one does this use
so that I can know

387
00:19:58.940 --> 00:20:00.770
the versioning and how do
I, how do I Definitely

388
00:20:00.770 --> 00:20:02.360
how to do that? Right.
I mean, you can always

389
00:20:02.360 --> 00:20:04.820
type like previously we had
your list, which would list

390
00:20:04.820 --> 00:20:07.790
out all the PR packages.
A given project is referencing

391
00:20:08.690 --> 00:20:11.420
and there'll be a, a
new equivalent to that. And

392
00:20:11.420 --> 00:20:14.360
from that, you'll be able
to very easily decipher what

393
00:20:14.360 --> 00:20:16.250
runtime is in my package
graph, which one is going

394
00:20:16.250 --> 00:20:19.460
to get used here because
the, basically the, the, there

395
00:20:19.460 --> 00:20:21.680
will be a set of
rules that the new CLR

396
00:20:21.680 --> 00:20:23.930
host, which is the little
bit of native code that

397
00:20:23.930 --> 00:20:26.150
gets copied along when you
build your application so that

398
00:20:26.150 --> 00:20:28.070
it can boot the CLR.
There'll be a set of

399
00:20:28.070 --> 00:20:30.950
rules of that uses to
determine how to find the

400
00:20:30.950 --> 00:20:33.230
runtime. It's somewhere, it's somewhere
in your package graph. Right?

401
00:20:33.530 --> 00:20:35.450
And so those rules will
be well documented and you'll

402
00:20:35.450 --> 00:20:37.580
be able to use those
rules to determine that somewhat

403
00:20:37.580 --> 00:20:40.850
simply, Okay, that's good to
know. That's comforting because I

404
00:20:40.850 --> 00:20:42.590
think that we've got to
have one foot in the

405
00:20:42.590 --> 00:20:44.150
past and one foot in
the future, you know, there's

406
00:20:44.150 --> 00:20:47.800
a certain amount of comforting
that need to do for

407
00:20:47.860 --> 00:20:50.410
old timers like myself, but
at the same time, like

408
00:20:50.410 --> 00:20:52.720
you're pointing out those implementation
details that new people just

409
00:20:52.720 --> 00:20:54.990
don't need to know about.
Yeah. And I mean, as

410
00:20:54.990 --> 00:20:58.080
I said, some of these
things, this isn't, this isn't

411
00:20:58.080 --> 00:20:59.850
all set in stone, like,
so, so I think we'll,

412
00:20:59.850 --> 00:21:01.860
we'll have a story for
V one and then we

413
00:21:01.860 --> 00:21:05.700
will, things will adjust as
necessary. Like we're still talking

414
00:21:05.700 --> 00:21:09.090
right now about the concept
of shared runtimes and what

415
00:21:09.090 --> 00:21:10.380
does it mean to be
able to set up a

416
00:21:10.380 --> 00:21:14.250
server that has a version
of a runtime installed and

417
00:21:14.250 --> 00:21:17.220
then be able to deploy
applications to that server without

418
00:21:17.220 --> 00:21:21.510
having to push the runtime
with the application and defining

419
00:21:21.510 --> 00:21:23.820
that entire workflow and you
know, how do you differentiate,

420
00:21:23.820 --> 00:21:26.400
how do you differentiate that
workflow from the default, which

421
00:21:26.400 --> 00:21:28.350
is just, everything gets bundled
up with the application and

422
00:21:28.350 --> 00:21:31.260
it's portable every time we
add this flexibility, we add

423
00:21:31.260 --> 00:21:33.540
a little bit of a
complexity as well. And we're

424
00:21:33.540 --> 00:21:35.280
trying to balance those two
things. Yeah. There was an

425
00:21:35.280 --> 00:21:39.990
interesting, fairly negative medium post
recently where an individual was

426
00:21:39.990 --> 00:21:43.170
kind of complaining about node
and how hello world on

427
00:21:43.170 --> 00:21:45.900
the note on node. And
this is in their words,

428
00:21:46.320 --> 00:21:49.800
brought down terabytes of packages.
But at the same time

429
00:21:49.800 --> 00:21:53.760
recently, I noticed that they're
on the free tier of

430
00:21:53.760 --> 00:21:58.230
Azure. It's very difficult and
sometimes impossible to get an

431
00:21:58.230 --> 00:22:01.500
asp.net five app running simply
because there's a lot of

432
00:22:01.500 --> 00:22:03.450
churning. There's a lot of
disc work and a lot

433
00:22:03.450 --> 00:22:06.300
of bringing down of packages.
And I talked to Glen

434
00:22:06.300 --> 00:22:08.640
Condron, who's on our team
and it turned out it

435
00:22:08.640 --> 00:22:10.740
wasn't actually the size of
the packages of the number

436
00:22:10.740 --> 00:22:13.680
of the packages. It was
like the IntelliSense files for

437
00:22:13.680 --> 00:22:17.190
the packages that were XML
files that zip up really

438
00:22:17.190 --> 00:22:18.960
small. So they're very small
on the wire, but they

439
00:22:18.960 --> 00:22:20.910
ended up taking up a
lot of space. And that

440
00:22:20.910 --> 00:22:23.160
brought up another question, which
is like the kinds of

441
00:22:23.160 --> 00:22:25.410
things that developer wants when
they bring a package down

442
00:22:25.410 --> 00:22:27.900
like IntelliSense are different from
the things that you want

443
00:22:27.900 --> 00:22:30.210
when you throw it up
on your hosts. Absolutely. So

444
00:22:30.210 --> 00:22:31.710
there's, there's a, there's sort
of, you know, that's a

445
00:22:31.710 --> 00:22:37.500
classic design time compile time,
runtime separation. And right now

446
00:22:37.500 --> 00:22:39.750
we're just using you to
get packages, to deliver everything.

447
00:22:40.080 --> 00:22:41.640
And when you say, I
want this new get package

448
00:22:41.640 --> 00:22:43.830
that has a number of
different assets in it, which

449
00:22:43.830 --> 00:22:46.230
equate to each of those
three phases. But as you

450
00:22:46.230 --> 00:22:49.260
point out for something like
agile websites where you might

451
00:22:49.260 --> 00:22:52.680
be using the kudu based
deployment, where you do a

452
00:22:52.680 --> 00:22:57.510
source control based deployment, your
runtime environment is also a

453
00:22:57.510 --> 00:23:00.570
design time and compile time
environment because you're doing compilation

454
00:23:00.570 --> 00:23:03.210
on the server. And that
is the deployment model when

455
00:23:03.210 --> 00:23:06.180
you're doing source control based
deployment. And so we have

456
00:23:06.180 --> 00:23:08.340
a, you know, a little
bit, maybe no design time,

457
00:23:08.340 --> 00:23:10.680
what you really need is
compile time and run time.

458
00:23:10.680 --> 00:23:12.690
And so the XML files
are very much in the

459
00:23:12.690 --> 00:23:15.600
camp of, well, that's a
design time feature, but when

460
00:23:15.600 --> 00:23:17.790
we unzip those new get
packages, we end up with

461
00:23:17.820 --> 00:23:20.280
80% of the file size
is actually these XML files.

462
00:23:21.120 --> 00:23:24.510
And so we're making adjustments
so that we can ensure

463
00:23:24.510 --> 00:23:26.820
that we don't do extra
work, that isn't necessary in

464
00:23:26.820 --> 00:23:29.370
certain environments. Right. And like
you said, each time you

465
00:23:29.370 --> 00:23:31.230
add a new thing or
a switch or whatever, it's

466
00:23:31.230 --> 00:23:33.630
a bit of complexity, but
at the same time, we've

467
00:23:33.630 --> 00:23:36.810
got stuff now like environments,
like the concept of dev

468
00:23:36.810 --> 00:23:39.540
test staging or arbitrary number
of environments is built into

469
00:23:39.540 --> 00:23:44.790
asp.net. So maybe we can
key off of those kinds

470
00:23:44.790 --> 00:23:47.210
of, and then the question
is, you know, what's the

471
00:23:47.210 --> 00:23:49.190
default, what are smart defaults?
You know, how do you

472
00:23:49.190 --> 00:23:51.050
just do the right thing
by default without, at the

473
00:23:51.050 --> 00:23:54.520
same time increasing the level
of, of magic. Yeah. And

474
00:23:54.520 --> 00:23:56.920
so again, that's one of
those balances is how much

475
00:23:56.920 --> 00:23:59.140
do you do by convention?
Which some people interpret as

476
00:23:59.140 --> 00:24:01.480
magic because convention is a
great when you understand the

477
00:24:01.480 --> 00:24:03.520
convention, but they can be,
they can be somewhat of

478
00:24:03.520 --> 00:24:07.480
a barrier to learning when
the convention isn't immediately obvious

479
00:24:07.480 --> 00:24:08.890
to everyone who is looking
at the code for the

480
00:24:08.890 --> 00:24:11.890
first time. Right. Whereas if
there's a line of code

481
00:24:11.890 --> 00:24:14.170
that says, you know, go
and find your, you know,

482
00:24:14.260 --> 00:24:16.480
X-Files here, it's like, Oh,
okay, well, that's where the

483
00:24:16.480 --> 00:24:20.170
X-Files go. So yeah. And
then just to comment on

484
00:24:20.170 --> 00:24:22.060
the environment things, one thing
is we also have to

485
00:24:22.060 --> 00:24:25.000
be careful of obviously is
layering the concept of environment

486
00:24:25.010 --> 00:24:27.970
awareness, as you talked about,
it is actually an asp.net

487
00:24:27.970 --> 00:24:31.030
feature purely and has nothing.
You know, there's no concept

488
00:24:31.030 --> 00:24:34.490
of that down to the
dotnet layer. And so we

489
00:24:34.510 --> 00:24:39.490
can't always reutilize those things.
And those environments were more

490
00:24:40.210 --> 00:24:43.330
designed and intended to be
used to determine between different

491
00:24:43.330 --> 00:24:46.000
runtime environments. Like I am
in deployment, I am on

492
00:24:46.000 --> 00:24:49.030
my local development machine or
I am on production. And

493
00:24:49.030 --> 00:24:52.270
so please at runtime, do
these things differently to these

494
00:24:52.270 --> 00:24:54.640
things. Whereas the things we're
talking about are more the

495
00:24:54.640 --> 00:24:58.360
traditional sort of design time,
compile time, one time phases

496
00:24:58.600 --> 00:25:00.640
of an application. So we
may, we may have to

497
00:25:00.640 --> 00:25:02.500
have different switches, but it
doesn't mean that the switch

498
00:25:02.500 --> 00:25:05.470
copy sent multiple ways. So
for example, for the XML

499
00:25:05.950 --> 00:25:08.410
IntelliSense fall example, we may
very well support in an

500
00:25:08.410 --> 00:25:11.710
environment variable, such that if
an environment variables is set

501
00:25:11.710 --> 00:25:14.710
system-wide, so it might be
on your Azure websites machine,

502
00:25:15.040 --> 00:25:18.400
then new get by default
will not extract XML files

503
00:25:18.430 --> 00:25:20.320
because we just, by default,
we think that's never going

504
00:25:20.320 --> 00:25:21.730
to be the right thing
to do on that particular

505
00:25:21.730 --> 00:25:24.220
environment. Right. Right. And that
would be something that kudu

506
00:25:24.220 --> 00:25:26.320
the deployment system would do
for you. And it would

507
00:25:26.320 --> 00:25:28.270
be, that would be the
kind of magic that would

508
00:25:28.270 --> 00:25:31.000
be documented convention that would
make sense to people. Yep,

509
00:25:31.180 --> 00:25:34.270
absolutely. So last thing I
wanted to cover with you

510
00:25:34.270 --> 00:25:37.150
is this idea of the
dotnet standard. And then there

511
00:25:37.150 --> 00:25:40.620
was also this term down
at generations. What is that?

512
00:25:41.140 --> 00:25:45.220
That is a, that is
an attempt on our heart

513
00:25:45.250 --> 00:25:46.930
on our behalf, which I
hope is going to be

514
00:25:46.930 --> 00:25:52.000
successful too, to try and
simplify and put a lot

515
00:25:52.000 --> 00:25:55.960
more structure around the concept
of what.net API is available

516
00:25:55.960 --> 00:25:58.570
to me as a class
library author, or an application

517
00:25:58.570 --> 00:26:02.950
author when my code runs
here or there or anywhere.

518
00:26:03.370 --> 00:26:06.010
So today, when you want
to have the same code

519
00:26:06.010 --> 00:26:10.930
or indeed the same dll.net
DLL run on different versions

520
00:26:10.930 --> 00:26:13.930
of.net or different flavors of.net.
So what we would turn

521
00:26:13.930 --> 00:26:17.380
different platforms. So we have
windows phone, right? supports.net, but

522
00:26:17.380 --> 00:26:20.050
that is a unique and
distinct platform to the windows

523
00:26:20.050 --> 00:26:23.680
store, which is distinct to.net
framework, which is distinct to

524
00:26:23.680 --> 00:26:27.340
mano, et cetera, et cetera,
they're all.net, but they don't

525
00:26:27.340 --> 00:26:29.770
all support the same sort
of semantics, the same level

526
00:26:29.770 --> 00:26:32.890
of API, those types of
things. So today to represent

527
00:26:32.890 --> 00:26:35.500
those in visual studio traditionally,
cause this was all S

528
00:26:35.510 --> 00:26:38.500
based originally you would choose
a different project type. You

529
00:26:38.500 --> 00:26:39.940
would say, I want to
build a windows phone app.

530
00:26:39.940 --> 00:26:42.790
And then when you did
that, the IntelliSense system and

531
00:26:42.790 --> 00:26:44.790
the compile is behind the
scenes would be driven to

532
00:26:44.790 --> 00:26:47.310
give you access to certain
API. If you want it

533
00:26:47.310 --> 00:26:50.700
to share.net code between two
of those platforms, you had

534
00:26:50.700 --> 00:26:52.860
a couple of choices. You
could either just share the

535
00:26:52.860 --> 00:26:56.070
code and compile it more
than once and know, possibly

536
00:26:56.070 --> 00:26:58.440
use Kampala directives, which we,
you know, we, we, we

537
00:26:58.500 --> 00:27:01.200
time as if Def to
say only compile this code

538
00:27:01.200 --> 00:27:03.090
when you're on that platform
and the components guide on

539
00:27:03.090 --> 00:27:06.270
that platform, which is a
little clunky, or th then

540
00:27:06.270 --> 00:27:08.580
we introduced this concept of
a portable class library or

541
00:27:08.580 --> 00:27:12.000
a PCL, which is a
single net DLL that's designed

542
00:27:12.000 --> 00:27:14.520
to work on multiple platforms.
And it does that by

543
00:27:14.520 --> 00:27:18.000
way of sort of giving
you a union of the

544
00:27:18.000 --> 00:27:21.030
API available on those platforms.
So in a new.net platform

545
00:27:21.030 --> 00:27:24.150
comes along, let's say we
invent a.net fridge platform, right?

546
00:27:24.210 --> 00:27:27.600
Internet of things is the
hot thing. Right now, we

547
00:27:27.600 --> 00:27:30.810
would define how much API
of the existing.net based class

548
00:27:30.810 --> 00:27:33.540
libraries available in the fridge.
We would call that.net fridge

549
00:27:33.540 --> 00:27:38.250
1.0, and then any, any
existing library that is.net that

550
00:27:38.250 --> 00:27:40.800
had been compiled would not
work on that platform, right?

551
00:27:40.800 --> 00:27:43.590
Because the platform didn't exist.
We call that a close

552
00:27:43.590 --> 00:27:46.740
ended system that is in
order for your code to

553
00:27:46.740 --> 00:27:48.570
run on that platform. You
must have compiled for that

554
00:27:48.570 --> 00:27:50.040
platform. You have to have
known about it ahead of

555
00:27:50.040 --> 00:27:52.260
time. And every time we
add a platform, we have

556
00:27:52.260 --> 00:27:55.080
to go back and retroactively
refit all the tools to

557
00:27:55.080 --> 00:27:58.410
know about that platform, that
doesn't scale particularly. Well. It

558
00:27:58.410 --> 00:28:01.350
turns out that we tried
to hide a lot of

559
00:28:01.350 --> 00:28:03.630
the mechanics about how that
worked under the covers from

560
00:28:03.630 --> 00:28:07.080
people. And that turns out
there were developers. That's generally

561
00:28:07.080 --> 00:28:09.900
never a good idea because
they very quickly fall off

562
00:28:09.930 --> 00:28:13.200
the beaten path that we've
made for them. And they

563
00:28:13.200 --> 00:28:14.790
hit edge cases and they
have to figure out how

564
00:28:14.790 --> 00:28:16.470
this stuff works. And then
they just learn how it

565
00:28:16.470 --> 00:28:18.570
works anyway. And they go
off and build their own

566
00:28:18.570 --> 00:28:21.120
tools to figure it out.
So in this case, that

567
00:28:21.120 --> 00:28:26.490
was the concept of.net profiles
and you most very serious.net

568
00:28:26.490 --> 00:28:30.300
class library office have to
learn quickly what profiles do

569
00:28:30.300 --> 00:28:32.220
I have to target in
order to get my courage

570
00:28:32.220 --> 00:28:33.990
with one where I want
it to run. So they

571
00:28:34.220 --> 00:28:36.270
very quickly have to stop
thinking about where they actually

572
00:28:36.270 --> 00:28:39.570
want the coach run and
start thinking in arbitrary profile

573
00:28:39.570 --> 00:28:41.850
numbers. And they are literally
arbitrary like this profile two,

574
00:28:41.850 --> 00:28:44.910
four, nine, and then profile
17 and profile. And like,

575
00:28:45.030 --> 00:28:48.690
there's no documentation about what
these numbers represent. There's been

576
00:28:48.690 --> 00:28:51.330
completely reverse engineered by the
community about which ones to

577
00:28:51.330 --> 00:28:54.510
target. So the.net platform standard
is an attempt to fix

578
00:28:54.510 --> 00:28:57.000
that. And the idea is
to say that, wouldn't it

579
00:28:57.000 --> 00:28:58.650
be nice if we had
the concept of a dot

580
00:28:58.860 --> 00:29:02.670
BCL, like a set of
core API standard library of

581
00:29:02.670 --> 00:29:06.930
API that was ever increasing.
So as we versioned it,

582
00:29:06.930 --> 00:29:09.660
as we move through the
future, we added API and

583
00:29:09.660 --> 00:29:12.540
as new platforms came on
board, they could say, Oh

584
00:29:12.570 --> 00:29:18.330
well, dot net, fridge supports.net
platform standard 1.3. So if

585
00:29:18.330 --> 00:29:22.230
your code was compiled against.net
platform standard one point three.net

586
00:29:22.230 --> 00:29:26.240
fridge one, Oh, we'll load
it. So now we have

587
00:29:26.240 --> 00:29:30.290
an open ended standards. So,
you know, any code that's

588
00:29:30.290 --> 00:29:34.490
compiled against.net platform standard, whatever
is possible and can be

589
00:29:34.490 --> 00:29:38.330
loaded on new platforms as
they emerge based on the

590
00:29:38.330 --> 00:29:40.790
version of the standard that
that platform chooses to adhere

591
00:29:40.790 --> 00:29:44.730
to. Okay. And is there
like a table or a,

592
00:29:44.730 --> 00:29:46.480
I mean, when do the,
how do we explain this

593
00:29:46.480 --> 00:29:48.010
in boxes and lines and
where would we go to

594
00:29:48.010 --> 00:29:50.150
learn more about this as
it gets developed? Yeah. There

595
00:29:50.160 --> 00:29:54.960
are documents up on the.net
or repo on github.net. If

596
00:29:54.960 --> 00:29:58.050
you just search for.net platform
standard in your favorite science

597
00:29:58.050 --> 00:30:00.160
engine, it'll, it'll point you
to all, you'll find the

598
00:30:00.180 --> 00:30:02.670
MD file in that repo
that talks about it. It

599
00:30:02.670 --> 00:30:04.650
can be a little heavy
reading. There's a bunch of

600
00:30:04.650 --> 00:30:06.210
stats. There's a bunch of
times in there that it

601
00:30:06.210 --> 00:30:08.370
introduces and defines as a
bunch of history. It goes

602
00:30:08.370 --> 00:30:11.850
over. So it may take
more than one sitting to

603
00:30:11.880 --> 00:30:13.560
sort of read it and
really understand it. And then

604
00:30:13.560 --> 00:30:15.810
the other problem is that
it's mostly just theory right

605
00:30:15.810 --> 00:30:19.170
now. There's no implementation that
you can download a news

606
00:30:19.170 --> 00:30:23.160
that is what's coming in
RC, two of.net core and

607
00:30:23.160 --> 00:30:25.980
ASP net core. And so
as obviously the tooling and

608
00:30:25.980 --> 00:30:28.650
we see more packages that
are built according to the

609
00:30:28.650 --> 00:30:31.170
standard, come on board. It'll
obviously become easier to understand

610
00:30:31.170 --> 00:30:32.910
because you know, it's easy
to, to learn things when

611
00:30:32.910 --> 00:30:37.380
you've got some working examples.
Last question is how panic

612
00:30:37.380 --> 00:30:40.920
worthy is all of this.
Cause people are saying, you

613
00:30:40.920 --> 00:30:43.980
know, this is a complete
reboot and everything that you

614
00:30:43.980 --> 00:30:47.460
knew and everything that you
do is all thrown away.

615
00:30:47.820 --> 00:30:49.200
And other people are saying,
well, no, this is really

616
00:30:49.200 --> 00:30:52.230
more of a refinement. And
we still know 90% of

617
00:30:52.230 --> 00:30:53.910
what we need to know.
Like there were some angry

618
00:30:53.970 --> 00:30:57.180
people on, on Reddit where
like, yeah, Microsoft keeps rewriting.

619
00:30:57.180 --> 00:30:59.610
The API is blah, blah,
blah. Every couple of years,

620
00:31:00.090 --> 00:31:04.380
is this like complete everything
is from scratch, like wind

621
00:31:04.380 --> 00:31:07.380
forms versus WPF, or is
this a, you know, as

622
00:31:07.380 --> 00:31:10.470
asp.net, as we know it
still pretty much concept the

623
00:31:10.470 --> 00:31:12.420
way we thought it was.
And then this is just

624
00:31:12.420 --> 00:31:15.060
the runtime around it. Like
how freaked out. Yeah. I,

625
00:31:15.070 --> 00:31:17.700
that, that really depends on
your perspective. It depends on

626
00:31:17.700 --> 00:31:20.310
how high up the stack
you're observing it from. I

627
00:31:20.310 --> 00:31:22.260
guess it's fair to say
if you're, if you're looking

628
00:31:22.260 --> 00:31:24.810
at the MVC sort of
concepts in API is a

629
00:31:24.810 --> 00:31:27.960
lot of those, obviously the
concepts map, almost one for

630
00:31:27.960 --> 00:31:31.020
one at the MVC layer
and a lot of the

631
00:31:31.020 --> 00:31:33.210
API maps as well. So
like, you know, we have

632
00:31:33.210 --> 00:31:35.460
controllers, we have used, we
have filters, we have action

633
00:31:35.460 --> 00:31:37.860
methods, you know, all those
things still exist. And a

634
00:31:37.860 --> 00:31:40.020
lot of the API is
similar in model blinding, et

635
00:31:40.020 --> 00:31:44.190
cetera, et cetera, validation. As
you move further down the

636
00:31:44.190 --> 00:31:48.000
stack underneath there, then you
will start to see more

637
00:31:48.000 --> 00:31:51.060
and more changes. And so,
and then if you go

638
00:31:51.180 --> 00:31:53.250
all the way down the
stack to the actual thing,

639
00:31:53.250 --> 00:31:56.280
that's booting.net, then obviously that's
completely brand new. Not that

640
00:31:56.280 --> 00:31:58.650
most people have to worry
about that. So I think

641
00:31:58.650 --> 00:32:00.150
that, you know, the higher
up the stack is where

642
00:32:00.150 --> 00:32:03.240
most developers spend the majority
of their time. And I

643
00:32:03.240 --> 00:32:06.150
think if you're running controllers
and, and those types of

644
00:32:06.150 --> 00:32:08.160
things, most of the time,
and working with the app,

645
00:32:08.700 --> 00:32:11.340
most of that stuff is
pretty similar and will look

646
00:32:11.340 --> 00:32:14.190
pretty, obviously it's still C
sharp, right? Yeah. Yeah. I

647
00:32:14.190 --> 00:32:18.360
think that's other thing that
that.net is broadening, you know,

648
00:32:18.360 --> 00:32:20.880
but like what is.net anymore?
Right. Dot net is not

649
00:32:20.880 --> 00:32:23.070
just the full framework, right?
It's a whole bunch of

650
00:32:23.070 --> 00:32:25.950
things, but another way to
look at it is C

651
00:32:25.950 --> 00:32:29.250
sharp or whatever, your language
of choices, you can use

652
00:32:29.250 --> 00:32:32.070
it to write pretty much
anything. So it's not always

653
00:32:32.070 --> 00:32:34.410
the dotnet you remember, but
it is still the C-sharp

654
00:32:34.620 --> 00:32:36.180
or the VB or the
V F sharp that you

655
00:32:36.180 --> 00:32:38.790
remember. Yeah. I think the
biggest concepts in leasing ASP

656
00:32:38.790 --> 00:32:40.370
<inaudible> that are going to
change, I mean, new for

657
00:32:40.370 --> 00:32:44.870
people around application startup and
application hosting. And so the

658
00:32:44.870 --> 00:32:47.240
constant, what is my web
server and who is actually

659
00:32:47.240 --> 00:32:49.340
terminating connections is going to
be different. Now we have

660
00:32:49.340 --> 00:32:51.080
a new web server with
Kestrel and how that works.

661
00:32:51.980 --> 00:32:54.740
And where is the card
that runs, you know, starts

662
00:32:54.740 --> 00:32:57.590
my application and configures it.
That is very new, especially

663
00:32:57.590 --> 00:33:01.010
if you didn't do any
work without previous Katana project,

664
00:33:01.010 --> 00:33:02.750
where a lot of these
concepts came from. So the

665
00:33:02.750 --> 00:33:05.630
concept concept of a startup
CS, the concept that your

666
00:33:05.630 --> 00:33:07.250
ESPN app has really, I
used to be net app

667
00:33:07.250 --> 00:33:08.960
is really just a console
app now. So you'd love

668
00:33:08.960 --> 00:33:12.080
a study void main that
actually calls the asp.net hosting

669
00:33:12.080 --> 00:33:14.210
API. So say, you know,
please create me an net

670
00:33:14.220 --> 00:33:16.100
app and configure it this
way, and then cold run.

671
00:33:17.330 --> 00:33:19.250
The, those are the things
that will be different. And

672
00:33:19.250 --> 00:33:21.980
then obviously the core HTP
pipeline with the concept of

673
00:33:21.980 --> 00:33:24.440
middleware is very different to
what we had before with

674
00:33:24.440 --> 00:33:27.590
modules and handlers. Once you
get over that conceptual hump,

675
00:33:28.670 --> 00:33:31.340
I think it's you really
on a good path into

676
00:33:31.340 --> 00:33:34.250
really understanding the rest of
the state. Very cool. Well,

677
00:33:34.250 --> 00:33:36.680
thanks for chatting with me
today. Not a problem, always

678
00:33:36.680 --> 00:33:39.370
happy to talk to you.
This has been another episode

679
00:33:39.370 --> 00:33:41.740
of Hanselminutes and we'll see
you again next week.

