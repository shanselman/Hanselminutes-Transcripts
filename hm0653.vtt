WEBVTT FILE

1
00:00:00.690 --> 00:00:02.730
A big thank you to
our sponsors because they make

2
00:00:02.730 --> 00:00:05.250
the show possible. And I
hope that you support them

3
00:00:05.280 --> 00:00:08.850
the way they support us
progress. Software is the creator

4
00:00:08.850 --> 00:00:12.000
of the most comprehensive developer
toolkit for building modern apps

5
00:00:12.000 --> 00:00:15.660
on the market. Today Tellerik
dev craft with more than

6
00:00:15.660 --> 00:00:20.220
1100 tellerik.net and Kendo, UI
JavaScript components and controls. You

7
00:00:20.220 --> 00:00:23.760
can easily build modern high-performance
web mobile and desktop apps,

8
00:00:23.820 --> 00:00:27.210
as well as chatbots. The
tool set also includes reporting

9
00:00:27.210 --> 00:00:30.810
solutions, automated testing, and productivity
tools, and come to the

10
00:00:30.810 --> 00:00:34.080
range of support options. New
this year is a free

11
00:00:34.080 --> 00:00:37.950
online training program for all
license holders. With this alongside

12
00:00:37.950 --> 00:00:41.820
thousands of demos and source
code available, comprehensive documentation and

13
00:00:41.820 --> 00:00:44.520
a full assortment of visual
studio templates, you'll be up

14
00:00:44.520 --> 00:00:47.490
and running with the progress
Tellerik and Kendo UI controls

15
00:00:47.490 --> 00:00:51.150
in no time. Download a
free 30 day trial today

16
00:00:51.150 --> 00:01:12.950
at telerik.com/hanselman that's T L
E R I k.com/hanselman <inaudible>.

17
00:01:13.160 --> 00:01:15.350
Hi, this is Scott Hanselman.
This is another episode of

18
00:01:15.350 --> 00:01:17.810
Hansel minutes. And today I'm
talking with Eileen, you should

19
00:01:17.810 --> 00:01:20.540
tell she's a senior systems
engineering pit hub, and a

20
00:01:20.540 --> 00:01:22.880
core member of the rails
team. Hi, how are you?

21
00:01:23.540 --> 00:01:25.910
I'm good. Thank you for
having me. Yeah. Thanks for

22
00:01:25.910 --> 00:01:30.050
talking to me about this.
I kind of heard about

23
00:01:30.050 --> 00:01:31.550
you and the work that
you were doing at get

24
00:01:31.550 --> 00:01:35.180
hub. When I saw this
huge tweet that was sent

25
00:01:35.180 --> 00:01:38.510
out in August, that said
that GitHub had upgraded to

26
00:01:38.900 --> 00:01:42.950
rails 5.2 0.1, which you
know, by itself, isn't an

27
00:01:42.950 --> 00:01:45.410
interesting tweet, but then it
said that it was the

28
00:01:45.410 --> 00:01:48.020
culmination of a year and
a half of hard work.

29
00:01:48.380 --> 00:01:50.930
So it sounds like some
big stuff was happening at

30
00:01:50.930 --> 00:01:52.580
GitHub. And I wanted to
talk to you about it.

31
00:01:53.060 --> 00:01:55.370
Was this a minor upgrade
or what was going on

32
00:01:55.370 --> 00:01:59.660
here? Well, it wasn't a
minor upgrade because we started

33
00:01:59.660 --> 00:02:05.900
on rails three, two, which
is two major versions behind

34
00:02:06.590 --> 00:02:11.450
and probably about six years
behind of where rails five

35
00:02:11.450 --> 00:02:14.840
to one is. Oh, wow.
So that's, that was a

36
00:02:14.840 --> 00:02:19.730
lot of, that was pretty
far behind to be starting

37
00:02:19.730 --> 00:02:24.080
out an upgrade like that.
Is it bad Behind? Like

38
00:02:24.080 --> 00:02:25.400
that is that one of
those things where just like,

39
00:02:25.400 --> 00:02:27.800
Hey, life happened and then
like life happened and get

40
00:02:27.800 --> 00:02:30.530
hub happened, or why do
you, why does one get

41
00:02:30.530 --> 00:02:34.730
so far behind? It's hard
if you don't have someone

42
00:02:34.730 --> 00:02:39.110
dedicated to doing the work
per previously, to me starting

43
00:02:39.170 --> 00:02:42.530
at GitHub, there had someone
had started rails for four

44
00:02:42.530 --> 00:02:46.190
O, but there wasn't a
dedicated team to working on

45
00:02:46.190 --> 00:02:48.830
it, or even one dedicated
person. People would work on

46
00:02:48.830 --> 00:02:50.930
it when they felt like
it, but that's not a

47
00:02:50.930 --> 00:02:53.210
good way to get a
major project done like that.

48
00:02:53.240 --> 00:02:58.040
So when I started, it
actually had stopped booting because

49
00:02:58.130 --> 00:03:00.580
it had, it had the
rails for old build had

50
00:03:00.580 --> 00:03:04.360
regressed. So we had to
almost start over, even though

51
00:03:04.360 --> 00:03:07.870
some work had already been
done. It also features are

52
00:03:07.900 --> 00:03:10.960
sometimes more important. So upgrades
sort of take a back

53
00:03:10.960 --> 00:03:14.500
seat. You don't have a
team dedicated to that. And

54
00:03:14.590 --> 00:03:17.230
it's easy to say, well,
we're so far behind, how

55
00:03:17.230 --> 00:03:20.310
are we ever going to
get up to date? I

56
00:03:20.310 --> 00:03:23.100
work with asp.net and that's
the web framework that I'm

57
00:03:23.100 --> 00:03:25.260
the most familiar with, but
I've also done stuff on

58
00:03:25.290 --> 00:03:28.260
Jenko and a little bit
of rail stuff, probably six

59
00:03:28.260 --> 00:03:31.980
years ago, somewhere around the
three O timeframe. And every

60
00:03:31.980 --> 00:03:35.250
framework feels differently about minor
upgrades and major upgrades in

61
00:03:35.250 --> 00:03:38.550
the rails world is a
major like it's major. It's

62
00:03:38.550 --> 00:03:42.840
like this was a huge
monotonically increasing integer. Therefore we've

63
00:03:42.870 --> 00:03:45.090
broken all kinds of things.
It sounds like major means

64
00:03:45.090 --> 00:03:50.040
major. Yes. Usually we take
it as an opportunity to

65
00:03:50.040 --> 00:03:55.230
change stuff that has plagued
the framework for a long

66
00:03:55.230 --> 00:03:57.720
time or stuff that we
just really want to redo.

67
00:03:58.050 --> 00:04:02.190
For example, rails six is
drastically going to change how

68
00:04:02.190 --> 00:04:05.400
configurations and connection management works.
And we're going to do

69
00:04:05.400 --> 00:04:08.100
our best to make sure
that it's backwards compatible, but

70
00:04:08.460 --> 00:04:11.010
some stuff we just have
to break because there isn't

71
00:04:11.040 --> 00:04:14.160
a easy way or even
a possible way of making

72
00:04:14.160 --> 00:04:16.830
it backwards compatible. But the
future version is going to

73
00:04:16.830 --> 00:04:20.100
be so much better that
in some cases we feel

74
00:04:20.100 --> 00:04:24.840
it's worth breaking to have
the better performance or easier

75
00:04:24.840 --> 00:04:30.810
to use rails. Current connection
management in five too, just

76
00:04:30.810 --> 00:04:33.330
can't support multiple databases. You
have to do a lot

77
00:04:33.330 --> 00:04:35.100
of hacky stuff to do
it. And so for us

78
00:04:35.100 --> 00:04:39.300
to make rails aware of
multiple databases, we have to

79
00:04:39.300 --> 00:04:44.700
break the existing functionality. Hmm.
I see. And this idea

80
00:04:44.700 --> 00:04:47.520
of multiple databases, like not
too, again, I'm coming from

81
00:04:47.520 --> 00:04:50.070
a place of ignorance. It
seems like, are you saying

82
00:04:50.070 --> 00:04:53.880
that one rails app has
one connection string to one

83
00:04:53.880 --> 00:04:57.720
database and that's just kind
of historical. Yeah. So actor

84
00:04:57.720 --> 00:05:00.150
of record base is only
aware of one connection per

85
00:05:00.150 --> 00:05:04.980
environment. So development has one
connection. That's how it connects

86
00:05:05.730 --> 00:05:09.420
and that's it. But in
GitHub we have multiple databases

87
00:05:09.420 --> 00:05:13.230
with each of those databases
having their own replicas. So

88
00:05:13.290 --> 00:05:15.960
we need that to work
and we wrote a bunch

89
00:05:15.960 --> 00:05:18.960
of hacky stuff to make
that work. And so now

90
00:05:18.960 --> 00:05:21.150
we're actually taking some of
that stuff out of GitHub

91
00:05:21.150 --> 00:05:24.330
and putting it into rails
so that we can delete

92
00:05:24.330 --> 00:05:25.830
a bunch of code and
all of that. And that

93
00:05:25.830 --> 00:05:28.530
sort of ties into the
rails upgrade because we couldn't

94
00:05:28.530 --> 00:05:31.170
do that before we were
on five two, you know,

95
00:05:31.170 --> 00:05:32.760
it doesn't make sense to
take code out of a

96
00:05:32.760 --> 00:05:34.350
three, two rails app and
try to put it in

97
00:05:34.350 --> 00:05:38.220
a rail six framework. So
upgrading lets us know where

98
00:05:38.220 --> 00:05:41.520
we are in terms of
the framework and then take

99
00:05:41.520 --> 00:05:43.650
that code that we, that
doesn't belong in our app

100
00:05:44.040 --> 00:05:47.280
out of the app and
put it into rails. That's

101
00:05:47.280 --> 00:05:49.740
a good point. And all
the while get hub has

102
00:05:49.740 --> 00:05:51.840
to stay up 24 hours
a day and move forward

103
00:05:51.840 --> 00:05:56.070
and feature work continues. Yup.
We can't stop feature work

104
00:05:56.370 --> 00:05:58.370
to be able to, to
an upgrade, which is part

105
00:05:58.370 --> 00:06:01.490
of the reason why we
had sort of a small

106
00:06:01.490 --> 00:06:04.550
team working on it. It
made it so that everyone

107
00:06:04.550 --> 00:06:07.220
else could still focus on
features and we could focus

108
00:06:07.220 --> 00:06:11.260
on the upgrade. That seems
pretty intense. You're basically like

109
00:06:11.290 --> 00:06:14.020
changing the tires on a
car that can't stop driving.

110
00:06:14.920 --> 00:06:18.490
Yeah. Actually after I did
the four, two upgrade, somebody

111
00:06:18.490 --> 00:06:20.770
shared it, somebody at get
hub share to give on

112
00:06:20.770 --> 00:06:23.740
Twitter of someone changing the
car as well, tires on

113
00:06:23.740 --> 00:06:25.750
a car while it's moving
and said, that was me.

114
00:06:27.880 --> 00:06:32.110
So that's a good analogy.
Also it seems like, and

115
00:06:32.110 --> 00:06:35.110
again, rails is like time
tested and now like a

116
00:06:35.110 --> 00:06:36.910
very, you know, it's a,
it's a 10 year old

117
00:06:36.910 --> 00:06:39.340
framework. It's very smart. It's,
you know, like we, in

118
00:06:39.340 --> 00:06:42.610
no way mean to disparage
rails, it's, it's powerful, but

119
00:06:42.610 --> 00:06:45.250
is get hub one of
the larger instances of a

120
00:06:45.250 --> 00:06:49.300
thing using rails or is
it medium? I would think

121
00:06:49.300 --> 00:06:53.740
it's one of the larger,
we, according to some website,

122
00:06:54.010 --> 00:06:57.460
we are the 40th, most,
most traffic site in the

123
00:06:57.460 --> 00:07:00.370
U S or maybe that's
the world. I can't remember

124
00:07:00.370 --> 00:07:03.910
which number probably should've looked
that up before, but it's

125
00:07:03.910 --> 00:07:06.370
big. It's big. So, and
I looked at the list

126
00:07:06.370 --> 00:07:08.470
of the ones before those
40 and none of them

127
00:07:08.470 --> 00:07:10.960
are using rails. So maybe
there's ones that I don't

128
00:07:10.960 --> 00:07:12.640
know about. But as far
as I know, we're one

129
00:07:12.640 --> 00:07:17.020
of the largest sites using
rails. Hmm. But of course,

130
00:07:17.020 --> 00:07:20.460
when get up, started in
rails and started using rails,

131
00:07:20.650 --> 00:07:23.320
when it first started out,
I assume that the amount

132
00:07:23.380 --> 00:07:25.330
of like, no one thought
it would get that big.

133
00:07:25.330 --> 00:07:26.890
Right. And like, no one
thought about like, will rail

134
00:07:26.900 --> 00:07:29.680
scale or will this work,
will that work? So does

135
00:07:29.680 --> 00:07:31.720
that mean that there's a
whole bunch of custom stuff

136
00:07:31.720 --> 00:07:35.020
that get hub had to
do because it grew big,

137
00:07:35.320 --> 00:07:38.260
faster than rails group. I
wasn't there. So it's hard

138
00:07:38.260 --> 00:07:41.590
to say I, it may
have be partially, yeah. Rails

139
00:07:41.590 --> 00:07:44.260
didn't grow fast enough, but
also it was open source.

140
00:07:44.530 --> 00:07:46.750
I think it could help
was moving so fast that

141
00:07:47.710 --> 00:07:54.460
they didn't have time or
the ability to change rails

142
00:07:54.460 --> 00:07:57.460
at the same time. Whereas
what I'm hoping for going

143
00:07:57.460 --> 00:08:00.100
forward is that we change
rails. So that rails is

144
00:08:00.100 --> 00:08:02.710
responding to get hub rather
than get hub responding to

145
00:08:02.710 --> 00:08:07.630
rails. Oh, interesting. Would that
be because GitHub is such

146
00:08:07.630 --> 00:08:12.970
a great kind of like
practical battle-tested production example, like

147
00:08:12.970 --> 00:08:15.910
why, why shouldn't get hub
push rails in a certain

148
00:08:15.910 --> 00:08:18.910
direction, because then everyone who
wants to make a giant

149
00:08:18.910 --> 00:08:21.880
application on rails and, and
grow as big as GitHub

150
00:08:21.910 --> 00:08:28.030
would then benefit. Yeah. That,
and really we've scaled rails

151
00:08:28.330 --> 00:08:31.120
in a way that not
many other apps have had

152
00:08:31.120 --> 00:08:33.730
to. And so it makes
sense to me to take

153
00:08:33.730 --> 00:08:36.460
that out of GitHub because
it's not special to GitHub,

154
00:08:36.490 --> 00:08:39.310
it's just special to scaling.
And so then we can

155
00:08:39.310 --> 00:08:42.910
make rail scale the way
we've made rail scale. And

156
00:08:42.910 --> 00:08:46.900
then we have this mid
way more robust framework. Rail

157
00:08:46.910 --> 00:08:49.900
six is going to be
so, so much more supportive

158
00:08:49.900 --> 00:08:54.220
of databases and faster testing
and all of that stuff

159
00:08:54.220 --> 00:08:58.370
that you need to support
a large application. And it

160
00:08:58.370 --> 00:09:01.310
seems like the kind of
the modern dev ops and

161
00:09:01.310 --> 00:09:03.710
the discussion around even that
term dev ops has really

162
00:09:03.710 --> 00:09:07.100
matured in the last 10
years. And the formality behind

163
00:09:07.100 --> 00:09:10.940
it is more mature. It
seems like GitHub grew with

164
00:09:10.940 --> 00:09:12.830
that. And then is now
going to push some of

165
00:09:12.830 --> 00:09:19.430
those, those conventions into rails
as well. Yup, definitely. That's

166
00:09:19.430 --> 00:09:23.090
the goal. I'm looking at
a GitHub pull request where

167
00:09:23.090 --> 00:09:25.850
you're having conversations. Cause you're
on the core team with

168
00:09:26.210 --> 00:09:28.130
all the other folks. And
you're talking about how I'd

169
00:09:28.130 --> 00:09:33.080
get, you have hen plus
primary configurations. You like this

170
00:09:33.080 --> 00:09:36.020
is a big and complicated
thing and you basically lay

171
00:09:36.020 --> 00:09:39.410
out changes that need to
change in rails to support

172
00:09:39.410 --> 00:09:42.680
big stuff like this. Yup.
There's a lot of apps

173
00:09:42.680 --> 00:09:47.720
out there that use multiple
replicas for their one primary

174
00:09:47.720 --> 00:09:50.300
database. One of the things
that we have at get

175
00:09:50.300 --> 00:09:51.860
hub, which I think is
a little bit different is

176
00:09:51.860 --> 00:09:55.070
we actually, we have 10
primaries that each have different

177
00:09:55.070 --> 00:09:58.730
tables in them. We don't
do sharding. So the tables

178
00:09:58.730 --> 00:10:03.560
that exist in the primary
for our first database don't

179
00:10:03.560 --> 00:10:08.180
exist in our collab database
or contributors. David did base

180
00:10:08.630 --> 00:10:11.300
Stand what you're saying. It's
not 10 copies of the

181
00:10:11.300 --> 00:10:14.510
same thing. And you're not
just simply pointing an active

182
00:10:14.510 --> 00:10:17.570
record to another connection string
and saying, keep going, it's

183
00:10:18.320 --> 00:10:22.790
10, totally different. Yeah. They're
total totally different machines and

184
00:10:22.790 --> 00:10:25.190
clusters. And they don't, they
can't talk to each other

185
00:10:25.430 --> 00:10:29.570
because you can't join across
separate machines like that. So,

186
00:10:30.140 --> 00:10:33.470
or, sorry, we can't, we
can't join across completely different

187
00:10:33.470 --> 00:10:37.130
connections. So one of the
things that we had to

188
00:10:37.130 --> 00:10:40.370
do when we split tables
off of our databases is

189
00:10:40.400 --> 00:10:43.640
find all the joints in
the application and break them

190
00:10:43.880 --> 00:10:48.830
into two selects. And then
each of those 10 databases

191
00:10:48.830 --> 00:10:52.910
has a replica configuration. And
then we don't just have

192
00:10:52.910 --> 00:10:56.450
one replica. We use a
GLB proxy layer where to

193
00:10:56.460 --> 00:11:00.710
tell the databases, which replica
to route to, And just

194
00:11:00.710 --> 00:11:03.710
for folks that are listening.
So GLB globally load balanced

195
00:11:04.160 --> 00:11:05.750
and you have a proxy
that sits in front of

196
00:11:05.750 --> 00:11:08.870
your databases and that helps
you make these decisions. Yes.

197
00:11:08.900 --> 00:11:10.880
Which is not something that's
going to end up in

198
00:11:10.880 --> 00:11:13.850
rails because that's a little
bit very specific to how

199
00:11:14.150 --> 00:11:15.980
you might want to set
up your database stuff. But

200
00:11:15.980 --> 00:11:18.470
what we can do in
rails is make it easy

201
00:11:18.470 --> 00:11:21.170
so that you can switch
between the right connections and

202
00:11:21.170 --> 00:11:24.770
the read only connections. When
you say switch between, this

203
00:11:24.770 --> 00:11:28.250
is something that you're expressing
it at runtime at configuration

204
00:11:28.250 --> 00:11:32.030
time, Currently you would have
to do it manually where

205
00:11:32.030 --> 00:11:34.550
you say, when inside a
request, you say, Oh, okay,

206
00:11:34.550 --> 00:11:37.550
well, this dog needs to
be created. So I'm going

207
00:11:37.550 --> 00:11:41.690
to write to the animals
database and then, Oh, well

208
00:11:41.720 --> 00:11:44.090
I have a cat and
I don't need to write,

209
00:11:44.180 --> 00:11:45.740
I just need to read.
So then you route that

210
00:11:45.740 --> 00:11:50.090
traffic to the replica. So
then you're not taking down

211
00:11:50.090 --> 00:11:52.970
your primary database while you're
writing to it. And you

212
00:11:53.140 --> 00:11:55.900
read from the replica, which
helps a lot with performance

213
00:11:56.350 --> 00:11:59.530
for one of the things
we do at GitHub, which

214
00:11:59.560 --> 00:12:01.270
is probably one of the
next things I'm going to

215
00:12:01.270 --> 00:12:04.180
work on upstreaming is we
default to the replicas and

216
00:12:04.180 --> 00:12:06.910
then we switch to the
right databases depending on the,

217
00:12:07.510 --> 00:12:09.730
the request type. So if
it's a post request we

218
00:12:09.730 --> 00:12:11.920
switch to, right. If it's
a get request, we stay

219
00:12:11.920 --> 00:12:16.030
on Reed. What we sort
of started talking about in

220
00:12:16.030 --> 00:12:18.790
the rails core chat, whether
or not we want to

221
00:12:18.790 --> 00:12:21.820
do that based on SQL
statement, we haven't experimented with

222
00:12:21.820 --> 00:12:24.490
that yet. So we don't
know if that's feasible, but

223
00:12:24.490 --> 00:12:26.290
that's one way of doing
it. So we say, Oh,

224
00:12:26.290 --> 00:12:29.290
if this is an insert,
we're gonna default to the

225
00:12:29.290 --> 00:12:33.580
right database. And if it's
a select, we can default

226
00:12:33.580 --> 00:12:35.800
to the replica. And so
that way you don't have

227
00:12:35.800 --> 00:12:37.870
to make any decisions in
your application or else we'll

228
00:12:37.870 --> 00:12:40.680
make them for you. That's
real that right there is

229
00:12:40.680 --> 00:12:43.080
like really interesting and worth
like digging into a little

230
00:12:43.080 --> 00:12:46.650
bit because you know, on
its face, as someone's reading

231
00:12:46.650 --> 00:12:49.470
something, you know, as, as
all engineers do, it's easy

232
00:12:49.590 --> 00:12:52.950
to put the word just
in front of something, especially

233
00:12:52.950 --> 00:12:55.080
when you don't understand it.
So I'm sure that when

234
00:12:55.080 --> 00:12:59.070
these things come out and
someone reads very simplistically into,

235
00:12:59.070 --> 00:13:02.730
they go, Oh, you're just
doing XYZ. You're not just

236
00:13:02.730 --> 00:13:06.090
switching connection strings. You're really
putting in some really interesting

237
00:13:06.090 --> 00:13:08.280
logic, not just to say,
I'm going to connect to

238
00:13:08.280 --> 00:13:10.890
this database or connect to
that database, but you're expressing

239
00:13:11.220 --> 00:13:16.800
your intent. And then optimizing
the, the read for scale

240
00:13:16.800 --> 00:13:20.160
in a very kind of
clever and very, very terse

241
00:13:20.160 --> 00:13:22.740
way. And I mean, terse
in the way that rails

242
00:13:22.740 --> 00:13:25.740
and Ruby are so clean
and the way they express

243
00:13:25.740 --> 00:13:29.580
things, this, this connects to
API that you've made. Yup.

244
00:13:29.640 --> 00:13:32.850
Yeah. So the idea is
to make it easy to

245
00:13:32.850 --> 00:13:36.390
understand for someone setting up
multiple databases is not an

246
00:13:36.390 --> 00:13:39.510
easy task and applications starting
out for the first time

247
00:13:39.510 --> 00:13:42.300
should not be trying to
scale before they're ready to,

248
00:13:42.570 --> 00:13:44.960
but when they are ready,
we want it so that

249
00:13:44.960 --> 00:13:47.550
you don't have to figure
out what, what API you

250
00:13:47.550 --> 00:13:50.850
should write or how you
can muck in the private

251
00:13:50.850 --> 00:13:53.370
API APIs and hack together
something that works. We want

252
00:13:53.370 --> 00:13:55.350
it to be very clear
and easy about how it

253
00:13:55.350 --> 00:13:57.810
works and what we won't
support and what we do

254
00:13:57.810 --> 00:14:03.480
support and all of the,
the tools so that instead

255
00:14:03.480 --> 00:14:05.010
of spending all this time
going well, how do I

256
00:14:05.010 --> 00:14:09.270
set up a database? That
part is easy after that,

257
00:14:09.300 --> 00:14:10.890
then you're just dealing with,
well, where do I put

258
00:14:10.890 --> 00:14:13.230
my data? Why do I
want to put my data

259
00:14:13.230 --> 00:14:15.720
here? And that's decisions you
make about your application because

260
00:14:15.720 --> 00:14:18.060
that's personal to you. We're
not going to make you

261
00:14:18.060 --> 00:14:21.240
can't make decisions about what
tables should go and what

262
00:14:21.240 --> 00:14:24.630
databases, but we can make
decisions about how do you

263
00:14:24.630 --> 00:14:28.410
switch that connection and how
do you even set that

264
00:14:28.410 --> 00:14:29.820
stuff up in the first
place? And if we can

265
00:14:29.820 --> 00:14:31.890
make that easy, then you
don't have to think about

266
00:14:31.890 --> 00:14:34.560
the nitty gritty stuff. Just
like you. When you build

267
00:14:34.560 --> 00:14:36.120
a new rails app, you
don't have to think about

268
00:14:36.120 --> 00:14:39.240
how to create a database
configuration. It just does it

269
00:14:39.240 --> 00:14:42.300
automatically for you. You only
have to think about it

270
00:14:42.300 --> 00:14:44.580
when you decide that you
want to change from SQL

271
00:14:44.580 --> 00:14:48.780
Lite to Postgres. And that's
a personal decision. So you're

272
00:14:48.780 --> 00:14:52.130
trying to give people the
building to build something on

273
00:14:52.130 --> 00:14:55.370
top of rails that are
specific to them. You're being

274
00:14:55.370 --> 00:14:59.300
prescriptive, but you're not being
draconian in your prescription and

275
00:14:59.300 --> 00:15:01.160
how they sh then how
they need to do things.

276
00:15:01.690 --> 00:15:05.200
Right? And so, even though
the connects to API suggests

277
00:15:05.200 --> 00:15:09.040
using writing and reading as
your modes to switch to,

278
00:15:09.040 --> 00:15:12.490
you could actually name those
anything. So for example, in

279
00:15:12.490 --> 00:15:16.450
rails, we get how we
call it default. So when

280
00:15:16.450 --> 00:15:19.360
I port this over to
our app, I probably will

281
00:15:19.360 --> 00:15:22.690
just change the modes to
match what we already have.

282
00:15:22.690 --> 00:15:24.400
So then we have less
code that we have to

283
00:15:24.400 --> 00:15:26.800
change, but because of the
way it's written, it doesn't

284
00:15:26.830 --> 00:15:29.680
matter. It just matters if
you, if you're, if you

285
00:15:29.680 --> 00:15:32.710
tell your app, Which is
interesting, and then some people

286
00:15:32.710 --> 00:15:34.510
will not have a load
balancer in front of their

287
00:15:34.510 --> 00:15:37.600
database and some people will,
and then they can decide

288
00:15:37.600 --> 00:15:39.700
what those modes and what,
you know, how much the

289
00:15:39.700 --> 00:15:43.270
app knows versus versus how
much the physical architecture of

290
00:15:43.270 --> 00:15:47.360
the system takes care of
things for them. Right. And

291
00:15:47.360 --> 00:15:49.840
interesting. And one of the
things that I was, I

292
00:15:49.870 --> 00:15:52.030
noticed that I was kind
of impressed with and I

293
00:15:52.450 --> 00:15:55.630
was the, and I know
I'm just up here on

294
00:15:55.630 --> 00:15:58.390
GitHub, looking at, get hub
slash rails slash rails, and

295
00:15:58.390 --> 00:16:02.650
I'm reading, pull requests, the
specificity and the quality of

296
00:16:02.650 --> 00:16:05.350
the comments. As you all
talk about this, you can

297
00:16:05.350 --> 00:16:09.400
see basically the last several
months and even comments from

298
00:16:09.460 --> 00:16:13.630
a day it's very precise
language. The, the, the community

299
00:16:13.630 --> 00:16:19.360
is not just chatting here.
It's actually quite formal. How

300
00:16:19.360 --> 00:16:23.050
did that culture build up?
Well, so we talk a

301
00:16:23.050 --> 00:16:26.170
lot. The core team talks
a lot in chat. So

302
00:16:26.170 --> 00:16:29.200
once we get to actually
open pull requests, we've sort

303
00:16:29.200 --> 00:16:32.320
of hashed out all of
the, the back and forth

304
00:16:32.440 --> 00:16:34.870
of what's hard. What's not
hard. We want to support,

305
00:16:34.870 --> 00:16:37.090
we don't want to support.
And so at that point,

306
00:16:37.090 --> 00:16:42.070
we're mostly talking about API
and implementation, but not talking

307
00:16:42.070 --> 00:16:46.660
about All of the, We're
not bike shedding at that

308
00:16:46.660 --> 00:16:49.780
point. Yeah. You're not arguing
about why you're arguing about

309
00:16:49.780 --> 00:16:56.860
how. Yeah. So especially with
the, that particular API for

310
00:16:56.860 --> 00:17:00.310
switching connections, David and I
had a conversation separately outside

311
00:17:00.310 --> 00:17:02.050
of a get hub about
what it should look like

312
00:17:02.680 --> 00:17:06.820
because it was in the
first PR that I opened,

313
00:17:06.820 --> 00:17:09.340
it was starting to get
hard for me to follow

314
00:17:09.340 --> 00:17:12.520
the conversation. So in those
cases, sometimes we'll just pop

315
00:17:12.520 --> 00:17:17.140
into a chat and talk
about it. And so originally

316
00:17:17.170 --> 00:17:20.860
it seemed kind of like,
well, this proposal is a

317
00:17:20.860 --> 00:17:23.770
lot of, might be a
lot of extra work for

318
00:17:23.770 --> 00:17:25.840
what I'm trying to accomplish
in this one PR. So

319
00:17:25.840 --> 00:17:29.170
we came to a compromise
of, we're going to just

320
00:17:29.170 --> 00:17:31.450
focus on the connection, switching
to this aid for this

321
00:17:31.450 --> 00:17:33.850
PR. And then the next
PR we can focus on

322
00:17:33.850 --> 00:17:36.310
changing the configuration so that
it's a little bit less,

323
00:17:36.850 --> 00:17:39.850
so they're even more prescriptive
than they are now and

324
00:17:39.850 --> 00:17:41.770
then move on from there.
So I like to work

325
00:17:41.770 --> 00:17:44.320
in a very iterative way
where I don't want to

326
00:17:44.440 --> 00:17:47.500
fix all of connection management
in one poll request, I'd

327
00:17:47.500 --> 00:17:49.920
rather do it in 15
or 20 pull requests. So

328
00:17:49.920 --> 00:17:53.040
then that way each tiny
piece can be made slightly

329
00:17:53.040 --> 00:17:56.580
better. And then we're not
trying to bite off more

330
00:17:56.580 --> 00:17:59.850
than we can chew in
a massive PR for trying

331
00:17:59.850 --> 00:18:02.270
to solve all the problems
at once. I see. So

332
00:18:02.270 --> 00:18:05.060
this is all this particular
PR that, that get kind

333
00:18:05.060 --> 00:18:07.970
of get hub and your
experiences bringing derails. It's not

334
00:18:07.970 --> 00:18:11.120
going to, for example, solve,
you know, fail over where

335
00:18:11.120 --> 00:18:13.220
like a primary fails and
you switched to a backup.

336
00:18:13.250 --> 00:18:15.380
That's something that would be
another pull request as you

337
00:18:15.380 --> 00:18:20.150
iterate towards a more robust
database. Yeah. If we decide

338
00:18:20.150 --> 00:18:23.180
to support something like that,
I'm unsure whether or not

339
00:18:23.180 --> 00:18:25.400
fell over is something that
we'd want to support in

340
00:18:25.400 --> 00:18:29.570
rails because that's, again, something
that's very personal to your

341
00:18:29.570 --> 00:18:33.350
application. We don't necessarily know
if you've also got a

342
00:18:33.350 --> 00:18:35.690
reddest database and another kind
of database and another kind

343
00:18:35.690 --> 00:18:38.270
of database and like where
your code is talking to

344
00:18:38.270 --> 00:18:42.530
that, that primary and whether
or not we want to

345
00:18:42.530 --> 00:18:45.620
support fell over. Now, maybe
we can in a very

346
00:18:45.650 --> 00:18:49.640
simplistic kind of way, but
again, that's something that's way

347
00:18:49.640 --> 00:18:52.670
further down the line. We
have a lot of stuff

348
00:18:52.700 --> 00:18:55.760
to fix before we get
to the point where we

349
00:18:55.760 --> 00:18:58.310
can even consider whether or
not fell overs are something

350
00:18:58.310 --> 00:19:03.980
that we can support. Hey,
folks, today's episode was sponsored

351
00:19:03.980 --> 00:19:08.210
by Datadog. It's a cloud
scale monitoring and analytics platform.

352
00:19:08.750 --> 00:19:12.620
Datadog was built to bring
clarity to complex dynamic applications

353
00:19:12.680 --> 00:19:16.100
in the cloud, on premises,
in containers or wherever they

354
00:19:16.100 --> 00:19:20.780
run with beautiful dashboards, distributed
tracing, and seamless integrations with

355
00:19:20.780 --> 00:19:25.310
more than 200 technologies, including
Azure and Docker and PagerDuty

356
00:19:25.760 --> 00:19:29.030
Datadog provides deep end to
end visibility into the health

357
00:19:29.060 --> 00:19:32.990
and performance of modern apps.
Visualize key metrics, set alerts

358
00:19:32.990 --> 00:19:36.470
to identify anomalies and collaborate
with your team to troubleshoot

359
00:19:36.470 --> 00:19:39.260
and fix issues fast. I'd
like you to try it

360
00:19:39.260 --> 00:19:43.700
yourself by starting a free
14 day trial today, listeners

361
00:19:43.700 --> 00:19:46.940
of this podcast will also
get a free Datadog t-shirt

362
00:19:47.540 --> 00:19:56.750
get started at bitly.com/data dog
shirt. That's bitly.com/datadog shirt. I

363
00:19:56.750 --> 00:19:59.450
want wanna back up just
one second to cause not

364
00:19:59.450 --> 00:20:04.010
everyone who's listening necessarily knows
all the different terms, as

365
00:20:04.010 --> 00:20:06.170
well as people who have
English as a second language,

366
00:20:06.410 --> 00:20:09.080
you said bike shedding. Could
you sell, tell me what

367
00:20:09.080 --> 00:20:12.620
bike shedding is. Sure. So
there's this story about when

368
00:20:12.620 --> 00:20:15.080
there was a nuclear power
plant and they're all talking

369
00:20:15.080 --> 00:20:18.110
about how to build it.
And what would they argue

370
00:20:18.110 --> 00:20:21.290
about is whether or not
what color to paint the

371
00:20:21.290 --> 00:20:25.730
bike shed? So the idea
is that when all of

372
00:20:25.730 --> 00:20:28.640
the bike shedding that we
did talking about the trivial

373
00:20:28.640 --> 00:20:33.620
points about the connection management
sort of stuff, that we

374
00:20:33.620 --> 00:20:36.560
don't necessarily need to be
public, because we don't want

375
00:20:36.560 --> 00:20:42.140
to invite more bike shedding
or, or perhaps it's something

376
00:20:42.560 --> 00:20:46.070
that is more important to
someone else. And so when

377
00:20:46.070 --> 00:20:48.010
you can talk about that
and sort of bike shed

378
00:20:48.010 --> 00:20:52.720
the little details in private,
and then when you're done,

379
00:20:53.590 --> 00:20:56.620
you can then talk about
the big details and everyone's

380
00:20:56.680 --> 00:21:01.570
team it's, it's easier for
people to follow the poll

381
00:21:01.570 --> 00:21:05.260
request. It's easier for them
to follow how stuff sort

382
00:21:05.260 --> 00:21:09.580
of evolved. Whereas if you've
got 55 comments of back

383
00:21:09.580 --> 00:21:12.040
and forth on a pull
request, it's just too hard

384
00:21:12.040 --> 00:21:14.020
to follow in, too hard
to read, and people will

385
00:21:14.020 --> 00:21:16.690
keep asking the same questions
because they're not going to

386
00:21:16.690 --> 00:21:21.520
read it 55 comments. So
cashing that stuff out in

387
00:21:21.730 --> 00:21:27.760
chat privately makes it a
lot easier to display good

388
00:21:27.760 --> 00:21:32.610
content later on when you're
done That, that seems like

389
00:21:32.610 --> 00:21:34.890
it's one of those things
where like, once you've said

390
00:21:34.890 --> 00:21:37.110
that I'm like, wow, that
seems like a good best

391
00:21:37.110 --> 00:21:39.510
practice for open source. What
an obvious thing. But it's

392
00:21:39.510 --> 00:21:42.390
not obvious. We all think
to ourselves, well, it should

393
00:21:42.420 --> 00:21:44.130
be open source. We should
have all of this out

394
00:21:44.130 --> 00:21:45.660
in the open, but I
don't want to see a

395
00:21:45.660 --> 00:21:48.090
bunch of people arguing about
variable names in the open

396
00:21:48.090 --> 00:21:50.040
I'd like them to be
arguing about the big stuff

397
00:21:50.040 --> 00:21:52.380
in the open. So that
seems like a great best

398
00:21:52.380 --> 00:21:54.540
practice that people can take
from the rail rails core

399
00:21:54.540 --> 00:21:57.600
team and then apply to,
to their open source project.

400
00:21:58.500 --> 00:22:00.780
Yeah. I mean, it happened
kind of naturally it wasn't

401
00:22:00.840 --> 00:22:02.970
sore. It's not stuff that
we discussed where we're like,

402
00:22:02.970 --> 00:22:05.430
we're going to talk privately
about these things and publicly

403
00:22:05.430 --> 00:22:08.250
about these things. But when
you're talking about stuff that

404
00:22:08.250 --> 00:22:11.130
may or may not be
trivial or may or may

405
00:22:11.130 --> 00:22:13.110
not be stuff that's interesting
to the rest of the

406
00:22:13.170 --> 00:22:15.630
public, it can be easier
to do it in chat

407
00:22:15.630 --> 00:22:19.620
because it moves faster. Whereas
sometimes in pull requests, you're

408
00:22:19.620 --> 00:22:22.470
waiting for that person to
respond. They're at work. It's

409
00:22:22.470 --> 00:22:24.510
harder to like check your
email and then, Oh, okay.

410
00:22:24.510 --> 00:22:26.760
Now I need to write
up a well thought out

411
00:22:26.760 --> 00:22:29.040
response. Whereas when you're chatting,
you can just sort of

412
00:22:29.040 --> 00:22:32.550
be a little bit more
impersonal. And I think as

413
00:22:32.550 --> 00:22:35.040
far as some other stuff
that I've worked on, this

414
00:22:35.640 --> 00:22:39.420
was not as much bike
shedding as other stuff that

415
00:22:39.420 --> 00:22:42.570
I've worked on. So it
seems a little bit unfair

416
00:22:42.570 --> 00:22:46.650
to call it bike shedding
because it was all important

417
00:22:46.800 --> 00:22:50.790
stuff, but it also did.
It did help to not

418
00:22:51.180 --> 00:22:54.960
debate the little, the little
or things and timing of

419
00:22:55.080 --> 00:22:58.080
other poll requests and stuff
in the poll request itself.

420
00:22:58.110 --> 00:23:03.030
So that stuff is easier
to discuss in chat. So

421
00:23:03.030 --> 00:23:06.930
popping back off the stack
to the app, the upgrading

422
00:23:07.230 --> 00:23:10.590
you're taking things that you
identify that get hub does

423
00:23:10.590 --> 00:23:12.900
as best practices, you're pushing
them into rails so that

424
00:23:12.900 --> 00:23:16.290
the world will then get
those benefits. But you're kind

425
00:23:16.290 --> 00:23:19.830
of slowly but surely upgrading
the site. Are you going

426
00:23:20.220 --> 00:23:23.640
each minor version and then
going live or did you

427
00:23:23.640 --> 00:23:27.510
go literally from three, two
to like five? Or did

428
00:23:27.510 --> 00:23:30.780
you know like how often
did your little team poke

429
00:23:30.780 --> 00:23:32.760
back at production and say,
all right, we're gonna upgrade

430
00:23:32.760 --> 00:23:33.990
to this one and we're
gonna upgrade to that one.

431
00:23:34.020 --> 00:23:36.630
Cause you you're gonna have
to chase their feature requests,

432
00:23:36.660 --> 00:23:40.230
their features that they're, they're
working on while simultaneously upgrading.

433
00:23:41.280 --> 00:23:43.830
Right. So the way that
we did it was we

434
00:23:43.830 --> 00:23:49.610
decided to deploy four, two
and five too. So part

435
00:23:49.610 --> 00:23:52.580
of the reason we couldn't
deploy four Oh or four

436
00:23:52.580 --> 00:23:57.890
one was because those two
versions were vulnerable. They they've

437
00:23:57.890 --> 00:24:00.320
been held for a long
time or they're at their

438
00:24:00.320 --> 00:24:02.930
end of life. So they
don't get security back ports.

439
00:24:05.140 --> 00:24:08.400
Oh, so you went to
the longterm support, right? Yes.

440
00:24:08.650 --> 00:24:13.090
Yeah. So three, two while
also wasn't supported anymore. We

441
00:24:13.090 --> 00:24:16.210
were supporting it, but we
hadn't been supporting for Oh,

442
00:24:16.210 --> 00:24:18.550
and for one, so we
couldn't deploy those because we

443
00:24:18.550 --> 00:24:21.730
didn't know what was in
them. That might be vulnerable.

444
00:24:21.730 --> 00:24:23.200
So we had to go
to four, two and to

445
00:24:23.200 --> 00:24:25.540
deploy that. So the way
we did it was we

446
00:24:25.540 --> 00:24:28.300
did each miner. So we
did three, two to four.

447
00:24:28.360 --> 00:24:31.630
Oh. And then we would
take that and we would

448
00:24:31.780 --> 00:24:35.080
make a build required. So
every single push to get

449
00:24:35.080 --> 00:24:39.940
hub had to pass the
main three to build and

450
00:24:39.940 --> 00:24:42.490
the FORO built. And so
then we weren't meant to

451
00:24:42.490 --> 00:24:44.890
work on four, one, one,
four, one was done. We

452
00:24:44.890 --> 00:24:48.160
replaced the FORO build with
41 and then we made

453
00:24:48.160 --> 00:24:51.730
that required. So every single
poll request that went into

454
00:24:51.730 --> 00:24:55.540
GitHub had to pass those
two versions of rails. And

455
00:24:55.540 --> 00:24:59.380
that's how we prevented regressions.
Yeah. Interesting. So that seems

456
00:24:59.380 --> 00:25:01.450
like a good, best practice
as well. Like you could

457
00:25:01.450 --> 00:25:03.640
rip the bandaid off fast
and just say, come on,

458
00:25:03.640 --> 00:25:06.220
we're all going to five
to woo. But, but by,

459
00:25:06.440 --> 00:25:09.430
by, by doing it in
a stepwise fashion to support

460
00:25:09.430 --> 00:25:12.850
it and kind of LTS
or longterm support versions, you're

461
00:25:12.850 --> 00:25:15.610
kind of avoiding risk and
also learning as you, as

462
00:25:15.610 --> 00:25:20.080
you move forward. Yeah. And
it also helped set everyone

463
00:25:20.080 --> 00:25:22.750
else up so that they
knew what was coming in

464
00:25:22.750 --> 00:25:25.360
the next version. So instead
of going straight to five,

465
00:25:25.360 --> 00:25:27.790
two, and just being like,
well, the way you write

466
00:25:27.970 --> 00:25:31.210
half of your code is
different. It was easier on

467
00:25:31.210 --> 00:25:33.460
the rest of the engineers
in the organization to do

468
00:25:33.460 --> 00:25:35.410
it slowly. So they could
just sort of get used

469
00:25:35.410 --> 00:25:38.980
to things, changing, having to
write stuff to different ways,

470
00:25:39.190 --> 00:25:42.490
understanding how rails upgrades work,
understanding how to condition your

471
00:25:42.490 --> 00:25:45.250
code so that it works
in multiple versions. All of

472
00:25:45.250 --> 00:25:49.480
that stuff is really important.
So that teams don't get

473
00:25:49.480 --> 00:25:51.940
frustrated with an upgrade because
you don't want to lose

474
00:25:51.940 --> 00:25:58.060
momentum because of something, because
you went too fast, going

475
00:25:58.060 --> 00:26:01.360
too fast, can sometimes derail
everyone else. And that's just

476
00:26:01.360 --> 00:26:03.730
not going to help you
get that stuff pushed out

477
00:26:03.730 --> 00:26:08.770
faster. The, the, the, you,
you got a lot of

478
00:26:08.770 --> 00:26:11.050
flack. You all your team
had a lot of flack

479
00:26:11.050 --> 00:26:13.420
on in the comments. And
of course we all know,

480
00:26:13.420 --> 00:26:18.400
never read the comments because
people kept saying, well, why

481
00:26:18.400 --> 00:26:20.770
did it take so long?
It seems like it took

482
00:26:20.770 --> 00:26:23.950
long because there was a
surprisingly large amount of work

483
00:26:23.950 --> 00:26:27.760
going on here. But also
detangling you called it things

484
00:26:27.760 --> 00:26:31.060
that were maybe too clever
that, that get hub had

485
00:26:31.060 --> 00:26:34.060
done to build custom bits.
So you were kind of

486
00:26:34.060 --> 00:26:37.660
refactoring by subtraction, like, Oh,
we did this custom, but

487
00:26:37.660 --> 00:26:40.870
we don't need to cause
rails does it now. Yeah.

488
00:26:40.870 --> 00:26:43.230
So it, so it took
a long time. One, it

489
00:26:43.230 --> 00:26:46.470
started out as a hobby
for other people. So it

490
00:26:46.470 --> 00:26:49.770
didn't really, when I started
there hadn't been enough work

491
00:26:49.770 --> 00:26:52.200
done to say that fora
was even half done. It

492
00:26:52.200 --> 00:26:56.040
was basically not started there
had been work, done. It

493
00:26:56.040 --> 00:26:59.790
just, it still had something
like a thousand failures. So

494
00:26:59.790 --> 00:27:04.890
that's not anywhere near done.
And for the most part

495
00:27:04.890 --> 00:27:07.890
of the first year, I
was the only full time

496
00:27:07.890 --> 00:27:10.770
engineer on it. And even
I didn't work on it

497
00:27:10.770 --> 00:27:13.620
full time because it's too
much. So I took a

498
00:27:13.620 --> 00:27:17.550
lot of breaks and we
had mostly volunteers who'd fix

499
00:27:17.610 --> 00:27:21.990
one or two failures while
I mostly did all the

500
00:27:21.990 --> 00:27:26.160
deploys and made sure that
that code was correct and

501
00:27:26.190 --> 00:27:27.900
figured out what the next
thing that everyone would work

502
00:27:27.900 --> 00:27:30.390
on would be when we
got to fall. When we,

503
00:27:30.390 --> 00:27:35.010
after we deployed for two,
that sort of proved that

504
00:27:35.100 --> 00:27:37.410
we could upgrade. I think
there was a lot of

505
00:27:38.640 --> 00:27:41.190
hesitation about whether or not
it was something that we

506
00:27:41.190 --> 00:27:44.640
could do now, because it
hadn't been done before, because

507
00:27:45.270 --> 00:27:48.300
two, three to three O
was so hard partially because

508
00:27:48.570 --> 00:27:52.590
GitHub had at one point
decided to stay on two,

509
00:27:52.590 --> 00:27:57.510
three on a fork. And
so untangling that and then

510
00:27:57.510 --> 00:28:00.480
untangling, and some of that
stuff was still left. So

511
00:28:00.480 --> 00:28:02.550
we had to not just
upgrade, but we had to

512
00:28:02.550 --> 00:28:06.000
untangle decisions that had been
made. We had to figure

513
00:28:06.000 --> 00:28:09.660
out if every failure you
have to figure out, is

514
00:28:09.660 --> 00:28:11.340
this a bug in rails
or is this a bug

515
00:28:11.340 --> 00:28:14.910
and get home? And you
can't just fix it because

516
00:28:14.910 --> 00:28:17.880
you don't know, especially with
how old rails was at

517
00:28:17.880 --> 00:28:20.370
that point. And so when
you're on that old of

518
00:28:20.370 --> 00:28:24.690
a version, you can request
changes to three, two or

519
00:28:24.690 --> 00:28:27.930
four or four one. You
can't ask for a feature

520
00:28:27.930 --> 00:28:29.700
to be merged into it
so that you can get

521
00:28:29.700 --> 00:28:32.340
a new version. So you
have to have a fork.

522
00:28:32.430 --> 00:28:35.820
And our fork had also
had stuff added on top.

523
00:28:35.820 --> 00:28:37.920
So it was hard to
figure out, is this something

524
00:28:37.920 --> 00:28:41.190
that actually should have been
back ported? Is it not?

525
00:28:41.220 --> 00:28:44.130
And then dealing with all
of that stuff. And a

526
00:28:44.130 --> 00:28:45.870
lot of the people who
had done that work, we're

527
00:28:45.870 --> 00:28:47.910
no longer at get hub.
So it's not like there's

528
00:28:47.910 --> 00:28:50.700
someone you can ask, Hey,
why did you do this

529
00:28:50.700 --> 00:28:54.240
particular thing this way? You
have to figure it out.

530
00:28:54.570 --> 00:28:59.490
And sometimes there aren't answers
in pull requests or in

531
00:28:59.490 --> 00:29:02.630
commit messages. Yeah. Yeah. I
think it's so easy when

532
00:29:02.630 --> 00:29:05.600
someone is an armchair quarterback
or an arm chair rails,

533
00:29:05.600 --> 00:29:08.240
committer, that they can look
at something and say, well,

534
00:29:08.250 --> 00:29:09.710
I don't know why they
didn't just upgrade in a

535
00:29:09.710 --> 00:29:14.270
weekend, you know, to take
the 40th largest, whatever traffic

536
00:29:14.270 --> 00:29:18.410
website that, that running on
rails and, and upgraded. It

537
00:29:18.680 --> 00:29:21.680
is not a simple thing
not to mention. I assume

538
00:29:21.680 --> 00:29:23.660
that there's testing things to
think about as well. Like

539
00:29:24.020 --> 00:29:26.560
the rails and Ruby community
are well known for their,

540
00:29:26.560 --> 00:29:28.850
their love of unit testing.
But I don't know if

541
00:29:28.850 --> 00:29:31.730
he necessarily had full coverage
of all of GitHub, right?

542
00:29:31.790 --> 00:29:33.950
You could break something indirectly
and cause all kinds of

543
00:29:33.950 --> 00:29:38.690
trouble. Yeah. We, I was
surprised at how good our

544
00:29:38.690 --> 00:29:43.840
test tests actually were when
we did do deploys to

545
00:29:43.870 --> 00:29:47.620
production. Well, first to our
staging environment and then to

546
00:29:47.620 --> 00:29:51.490
production in the staging environment,
we found less than 10

547
00:29:51.820 --> 00:29:55.090
new issues. And then going
to production, we also found

548
00:29:55.090 --> 00:29:58.120
less than 10 new issues.
I think total four for

549
00:29:58.120 --> 00:30:02.200
the four to one, we
found 15 on found issues

550
00:30:02.200 --> 00:30:04.180
and then four or five
to, I think we found

551
00:30:04.300 --> 00:30:07.810
six or seven. So it
really wasn't. It was pretty

552
00:30:07.930 --> 00:30:13.630
well tested. We don't have,
we didn't have system tests

553
00:30:13.630 --> 00:30:17.080
or copy bearer tests, whatever
everyone has different names for

554
00:30:17.080 --> 00:30:19.150
them. Where else? Cause insistent
tests. Some people call them

555
00:30:19.150 --> 00:30:21.880
acceptance tests where you boot
a browser and it clicks

556
00:30:21.880 --> 00:30:25.540
around and does stuff. We
don't have those tests. So

557
00:30:26.080 --> 00:30:29.860
we were mostly relying on
our controller and model tests

558
00:30:29.860 --> 00:30:35.770
or unit tests, but those
were pretty decent considering that

559
00:30:35.770 --> 00:30:39.490
we also were using, we're
not using the rails testing

560
00:30:39.490 --> 00:30:42.100
framework. We like kind of
wrote our own on top

561
00:30:42.130 --> 00:30:45.820
of rails, which is mostly
gone. Now, some something else

562
00:30:45.820 --> 00:30:48.040
that by upgrading, we were
able to do that we

563
00:30:48.040 --> 00:30:51.670
couldn't have done before because
that was originally created because

564
00:30:51.670 --> 00:30:54.820
rails didn't have the features
that we needed. And so

565
00:30:54.820 --> 00:30:56.860
then once we upgraded rails
had those features, we could

566
00:30:56.860 --> 00:30:59.920
delete all that code or
the majority of it. And

567
00:30:59.920 --> 00:31:04.810
so that's sort of like
sometimes we were refactoring stuff.

568
00:31:04.990 --> 00:31:07.240
That's why it took long.
Sometimes we were just tired

569
00:31:07.240 --> 00:31:12.160
of working on it. Sometimes
I would do stop working

570
00:31:12.160 --> 00:31:14.590
on that to do something
else. So there was one

571
00:31:14.590 --> 00:31:16.660
piece of code that had
a couple of test failures

572
00:31:17.050 --> 00:31:20.350
in the app. And after
looking at it, I realized

573
00:31:20.350 --> 00:31:22.630
that it was code that
wasn't used. So I took

574
00:31:22.630 --> 00:31:26.230
a month to remove that
code and I'm sure someone's

575
00:31:26.230 --> 00:31:27.280
gonna be like, why did
it take you a month

576
00:31:27.280 --> 00:31:29.590
to do that? Well, it
was literally everywhere in the

577
00:31:29.590 --> 00:31:32.320
code base. So we had
to slow. I had to

578
00:31:32.320 --> 00:31:39.190
slowly back out that code,
basically reverse engineer deleting it.

579
00:31:40.600 --> 00:31:43.870
So then each, so we,
I took seven pull requests

580
00:31:43.870 --> 00:31:48.510
to delete all of that
code safely. So as we

581
00:31:48.510 --> 00:31:52.290
close our interview here, let
me ask you this. How

582
00:31:52.290 --> 00:31:54.420
will you make sure that
this doesn't happen again in

583
00:31:54.420 --> 00:31:57.450
10 years? Are you following
the mainline more closely now?

584
00:31:58.470 --> 00:32:01.530
Yeah. So right now we
have a build that is

585
00:32:01.530 --> 00:32:05.220
hooked up to rails master
and it runs every evening.

586
00:32:05.790 --> 00:32:09.930
We thought about making it
required, but rails is in

587
00:32:09.930 --> 00:32:13.800
such flux right now. I
don't want to derail other

588
00:32:13.800 --> 00:32:16.170
teams from getting progress done.
So we're going to monitor

589
00:32:16.170 --> 00:32:19.170
it for a while and
see, are there bugs in

590
00:32:19.170 --> 00:32:23.400
rails? Are our engineers introducing
more regressions or Israel's introducing

591
00:32:23.400 --> 00:32:25.710
word regressions? And once we
have a little bit of

592
00:32:25.710 --> 00:32:28.950
a idea of how rails
master is behaving, we may

593
00:32:28.950 --> 00:32:31.740
make it required as we
get closer to the beta.

594
00:32:32.490 --> 00:32:35.850
And then that way we
already have upgraded the app,

595
00:32:36.360 --> 00:32:38.460
it pass the test pass
on the day that we

596
00:32:38.460 --> 00:32:41.870
release rail will be, that
will be my definition of

597
00:32:42.110 --> 00:32:45.080
success in this, because then
the day after we released

598
00:32:45.080 --> 00:32:47.620
rail six, we can deploy
to production. Very cool. So

599
00:32:47.620 --> 00:32:49.960
you've, you've basically taken your
last year and a half

600
00:32:49.960 --> 00:32:53.260
and automated it yourself, put
together a process to ensure

601
00:32:53.260 --> 00:32:56.560
that it will allow everyone
to upgrade more cleanly. And

602
00:32:56.600 --> 00:33:00.460
you've got a, a, a
safety net. Yup. Yeah. So

603
00:33:00.460 --> 00:33:05.500
once you're on that new
version testing against masters a

604
00:33:05.500 --> 00:33:07.810
lot easier. I mean, it
also is a lot easier,

605
00:33:07.810 --> 00:33:10.450
especially if you're the person
who's breaking rails, you know

606
00:33:10.450 --> 00:33:13.540
how to fix your application.
But again, like I said,

607
00:33:13.540 --> 00:33:16.300
we're going to try really
hard, not to break applications

608
00:33:16.300 --> 00:33:19.330
too much with rail six.
Fantastic. Well, thanks so much

609
00:33:19.330 --> 00:33:22.090
for chatting with me today.
Yeah. Thanks for having me.

610
00:33:22.090 --> 00:33:25.300
It was great. I've been
talking with Eileen. You should

611
00:33:25.300 --> 00:33:28.570
tell senior assistant engineer get
help and a rails core

612
00:33:28.570 --> 00:33:32.590
team member. This has been
another episode of Hanselminutes and

613
00:33:32.590 --> 00:33:34.060
we'll see you again next
week.

