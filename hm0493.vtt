WEBVTT FILE

1
00:00:00.990 --> 00:00:04.080
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:04.080 --> 00:00:07.410
they make the show possible.
Today's show is sponsored by

3
00:00:07.410 --> 00:00:11.700
Tellerik create compelling app experiences
across any screen with the

4
00:00:11.700 --> 00:00:16.560
Tellerik platform Telerx end to
end platform. Uniquely combines industry

5
00:00:16.560 --> 00:00:20.250
leading UI tools with cloud
services to simplify the entire

6
00:00:20.250 --> 00:00:24.720
app development cycle Tellerik offers
everything.net developers need to build

7
00:00:24.720 --> 00:00:34.140
quality apps faster. Try it
free at tellerik.com/platform that's tellerik.com/platform

8
00:00:47.540 --> 00:00:53.390
From hanselminutes.com. It's Hansel minutes,
our weekly discussion with web

9
00:00:53.390 --> 00:00:58.340
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

10
00:00:58.340 --> 00:01:02.810
number four 93. In this
episode, Scott talks with Jacob

11
00:01:02.840 --> 00:01:06.800
Kroll from fog Creek software
about using the C-sharp Rosalyn

12
00:01:06.810 --> 00:01:10.130
compiler to bring their older
language called wasabi up to

13
00:01:10.130 --> 00:01:16.580
date. Hi, this is Scott
Hanselman. This is another episode

14
00:01:16.580 --> 00:01:19.910
of Hansel minutes today. I'm
talking to Jacob Kroll from

15
00:01:19.910 --> 00:01:22.910
fog Creek software. How are
you doing all right? How

16
00:01:22.910 --> 00:01:26.090
are you, Scott? I am
pretty fabulous. And I like

17
00:01:26.100 --> 00:01:29.450
talking to people who are
solving big technical problems with

18
00:01:29.480 --> 00:01:33.560
open source software. And you
all did something really cool

19
00:01:33.560 --> 00:01:36.260
with Roslyn, but I think
we need to back up

20
00:01:36.290 --> 00:01:40.010
15 years to really understand
the context. Yeah, that's true.

21
00:01:40.010 --> 00:01:41.510
You can't just start right
at the end of the

22
00:01:41.510 --> 00:01:45.770
project, which was killing our
compiler was hobby. You really

23
00:01:45.770 --> 00:01:48.740
have to start back in
about 2003 when salt Creek

24
00:01:48.740 --> 00:01:52.640
software had its first intern
program. We had an intern,

25
00:01:52.940 --> 00:01:55.400
we call him Jimmy, cause
that's really close to his

26
00:01:55.400 --> 00:01:59.660
name. And Jimmy knew Java.
So Jimmy knew Java. I

27
00:01:59.660 --> 00:02:00.890
think that was a book
I read to one of

28
00:02:00.890 --> 00:02:03.560
my children that it was,
yeah, I forget how they

29
00:02:03.560 --> 00:02:07.670
wanted to end stuff, but
we had fog buttocks, which

30
00:02:07.670 --> 00:02:11.390
is a pretty successful in
2003, you were doing great

31
00:02:11.690 --> 00:02:15.200
selling lots of software to
windows customers. It was written

32
00:02:15.200 --> 00:02:18.890
in VB script, which is
the ASP server side language

33
00:02:19.310 --> 00:02:22.700
of the time. It was
advanced for 2000, just wasn't

34
00:02:22.700 --> 00:02:26.750
fun, but just first started.
And we wanted to sell

35
00:02:26.750 --> 00:02:29.690
the customers who for whatever
reason, didn't have windows on

36
00:02:29.690 --> 00:02:36.020
their servers. So we had
Jimmy, right. A sort of

37
00:02:36.260 --> 00:02:39.110
half-baked compiler. It was, it
was a little bit stronger

38
00:02:39.110 --> 00:02:42.080
than just using regular expressions
or something to translate from

39
00:02:43.100 --> 00:02:45.320
Phoebe script to PHP. But
it wasn't like a full

40
00:02:45.320 --> 00:02:48.470
strength, industrial compiler or anything.
Was it a forgive? My,

41
00:02:48.500 --> 00:02:51.800
my knit, but is it
a compiler or a trans

42
00:02:51.800 --> 00:02:54.950
Pilar? Like, is it translating
from one language to another

43
00:02:54.950 --> 00:02:57.800
or is it legitimately compiling?
Well, I think the trans

44
00:02:57.800 --> 00:03:01.450
filer, this is something we
about on hacker news. A

45
00:03:01.450 --> 00:03:05.110
lot of us nerds on
there. Transplanter is actually a

46
00:03:05.500 --> 00:03:09.370
strict subset of compilers. So
all transpilers are compilers, but

47
00:03:09.370 --> 00:03:12.670
not all compilers are transpilers.
I did not know that.

48
00:03:13.000 --> 00:03:16.870
Yeah. The difference between a
trans Pilar and other kinds

49
00:03:16.870 --> 00:03:20.470
of compilers is only in
what kind of generation phase

50
00:03:20.470 --> 00:03:22.390
it has. It still has
a generation phase. It still

51
00:03:22.390 --> 00:03:26.790
qualifies as a compiler, But
are there, there are things,

52
00:03:26.820 --> 00:03:28.140
are there things out there
in the world that people

53
00:03:28.140 --> 00:03:30.690
call compilers and it's just
like, I hacked a bunch

54
00:03:30.690 --> 00:03:35.010
of stuff together. Yeah. I
mean, but this was kind

55
00:03:35.010 --> 00:03:36.660
of that way. Yeah. You
know what I'm saying though?

56
00:03:36.660 --> 00:03:38.490
But this was like, this
wasn't, this was a, it

57
00:03:38.490 --> 00:03:41.280
wasn't just like regular, like
he built an abstract syntax

58
00:03:41.280 --> 00:03:44.130
tree and like, it was
really intending to compile this,

59
00:03:44.730 --> 00:03:47.280
Right? Yeah. That was the
eventual goal for it. But

60
00:03:47.280 --> 00:03:49.800
he had three months and
he knew Java and you

61
00:03:49.800 --> 00:03:53.790
know, it wasn't like a
huge general purpose programming languages.

62
00:03:53.850 --> 00:03:56.190
It had one job. It
was to turn five books

63
00:03:56.190 --> 00:03:59.040
from a VB script app
to AVB script app that

64
00:03:59.040 --> 00:04:02.910
also ran on the PHP
around time. So he didn't

65
00:04:02.910 --> 00:04:05.790
have to do anything with
like the math library or,

66
00:04:06.570 --> 00:04:08.760
you know, all these fancy
things that BB script can

67
00:04:08.760 --> 00:04:11.520
do. He just had to
translate the parts that already

68
00:04:11.520 --> 00:04:15.210
had the same sort of
thing happening PHB. He just

69
00:04:15.210 --> 00:04:18.240
had to figure out which
library function to call instead

70
00:04:18.240 --> 00:04:20.190
of response, not right. And
it would do print or

71
00:04:20.190 --> 00:04:23.910
whatever, and things like that
Job was to make fog

72
00:04:23.940 --> 00:04:28.440
bugs run, not to make
any general purpose applications. Exactly.

73
00:04:28.440 --> 00:04:31.050
Yeah. It had exactly one
program that would ever run

74
00:04:31.050 --> 00:04:32.520
through it. So he could
do all sorts of things,

75
00:04:32.520 --> 00:04:36.180
throw away all sorts of
data that nobody else would

76
00:04:36.930 --> 00:04:39.720
blame us for doing, because
it just wasn't necessary for

77
00:04:39.720 --> 00:04:42.540
the process. It's really nice
because when you do something

78
00:04:42.540 --> 00:04:44.700
that's single task like that,
like it makes your job

79
00:04:44.730 --> 00:04:47.130
a lot easier. It's just
like very, it's very understood

80
00:04:47.130 --> 00:04:49.110
and finite, here's the code
that you have to translate.

81
00:04:49.170 --> 00:04:52.560
That is the sum total
of everything that falls. Yeah.

82
00:04:52.560 --> 00:04:54.330
And that's been one of
my favorite parts about working

83
00:04:54.330 --> 00:04:56.120
on wasabi is that you
can get away with some

84
00:04:56.120 --> 00:05:01.440
stuff like not having really
general purpose features and just

85
00:05:01.440 --> 00:05:04.950
having really, really specific things
to say, well, we know

86
00:05:04.950 --> 00:05:07.230
that fought bugs never has
a piece of code like

87
00:05:07.230 --> 00:05:09.360
this. So I'm just not
going to write, you know,

88
00:05:09.360 --> 00:05:13.260
the code that generates console
applications. It's just not even

89
00:05:13.260 --> 00:05:16.830
in there, you can't have
a main function. It has

90
00:05:16.830 --> 00:05:20.880
to, it has to be
a library basically. So what

91
00:05:20.880 --> 00:05:22.950
happened to Jimmy worked on
this for a while and

92
00:05:22.950 --> 00:05:26.610
then it became something more
The Jimmy leave. Yeah. Jimmy

93
00:05:26.610 --> 00:05:28.590
was an intern for the
summer and then he left

94
00:05:28.590 --> 00:05:34.080
and I think he's working
in some global credit organization

95
00:05:34.080 --> 00:05:36.390
or something like that. Now
I'm making tons of money.

96
00:05:37.230 --> 00:05:41.430
And then all of a
sudden done, we probably would

97
00:05:41.430 --> 00:05:43.860
estimate it at like 20%
of the effort for five

98
00:05:43.860 --> 00:05:46.200
bucks for including all of
the run time work and

99
00:05:46.200 --> 00:05:48.120
all the things, our full
time engineers did to get

100
00:05:48.120 --> 00:05:50.820
it out there and get
an installer and all that

101
00:05:50.820 --> 00:05:53.910
sort of stuff for our
non windows customers. And it

102
00:05:53.910 --> 00:05:56.340
brought in an additional, let's
say about 10% of sales,

103
00:05:57.620 --> 00:05:59.300
just on top of what
we were already making. So,

104
00:05:59.420 --> 00:06:03.190
So then you've, so you've
got a, a compiler it's

105
00:06:03.190 --> 00:06:07.510
written in Java and it
takes VB script that was

106
00:06:07.540 --> 00:06:12.940
even written before 2003, like
in 1995, turns it into,

107
00:06:12.940 --> 00:06:14.560
you know, it's a tokenized
or it's a parser, it's

108
00:06:14.560 --> 00:06:17.170
a finite state machine. It
turns it into PHP. And

109
00:06:17.170 --> 00:06:19.930
now it can run fog
bugs without a rewrite, a

110
00:06:19.930 --> 00:06:23.050
fog bugs runs it on
windows and Unix. And now

111
00:06:23.050 --> 00:06:26.440
there's a nontrivial number of
people running your product on

112
00:06:26.440 --> 00:06:29.650
Unix. And they are, Yeah,
we have 10% growth by

113
00:06:29.920 --> 00:06:33.850
basically just porting within the
little compiler that an intern

114
00:06:33.850 --> 00:06:37.450
wrote in the summer. And
then this goes on for

115
00:06:37.450 --> 00:06:43.240
a while and fog, this
becomes fog basic is the

116
00:06:43.240 --> 00:06:46.600
thing that becomes wasabi at
this point. Is it no

117
00:06:46.600 --> 00:06:50.530
longer VB script? It is
its own thing. You have

118
00:06:50.560 --> 00:06:52.660
basically taken the language and
kind of run off in

119
00:06:52.660 --> 00:06:55.240
another direction with it. Right?
So the tool Jimmy road

120
00:06:55.240 --> 00:06:58.480
was called decile and then
around 2005. So maybe two

121
00:06:58.480 --> 00:07:02.470
and a half years after
that internship, we wanted our

122
00:07:02.470 --> 00:07:07.000
new developer, Stephanie Russo. He wanted
to add automated testing to

123
00:07:07.000 --> 00:07:09.760
fog bugs because you know,
that's something you want when

124
00:07:09.760 --> 00:07:12.040
you're writing software. So it
only took us five years

125
00:07:12.040 --> 00:07:15.370
to get to that point.
And he wanted to know

126
00:07:15.370 --> 00:07:17.440
how much code coverage we
had. And VD script is

127
00:07:17.440 --> 00:07:20.680
not a language that's particularly
good at instrumentation and that

128
00:07:20.680 --> 00:07:24.130
sort of thing. So he
hadn't a new backend to

129
00:07:24.130 --> 00:07:27.310
thistle, which was to generate
VB script from the VB

130
00:07:27.310 --> 00:07:33.580
script. Okay. And one thing
he did in that generation

131
00:07:33.580 --> 00:07:35.650
step was he added to
the instrumentation code he needed.

132
00:07:35.650 --> 00:07:38.560
So every function definition had
a little header at the

133
00:07:38.560 --> 00:07:41.320
top that said, you know,
increment some variable and start

134
00:07:41.320 --> 00:07:42.940
a timer. And then at
the bottom of the function

135
00:07:42.940 --> 00:07:49.180
that would have the end
of that instrumentation, We've got

136
00:07:49.420 --> 00:07:54.250
aspect oriented programming inside of
Yeah. Yeah. You can, you

137
00:07:54.250 --> 00:07:57.490
can, you can do arbitrary
things. We didn't do too

138
00:07:57.490 --> 00:07:59.500
many fancy things at that
point. Basically it was just

139
00:07:59.500 --> 00:08:01.960
to say, how does our
code coverage? Because it's not

140
00:08:01.960 --> 00:08:05.860
like C-sharp or Java where
you can just ask the

141
00:08:05.860 --> 00:08:08.660
run time, was this line
of code call or not

142
00:08:08.660 --> 00:08:12.580
because it doesn't no, it's
not, it's old. So then

143
00:08:12.580 --> 00:08:17.470
at this point you're generating
classic ASP. You're generating PHP.

144
00:08:18.340 --> 00:08:21.040
JavaScript is probably coming along.
Are you starting to generate?

145
00:08:21.130 --> 00:08:23.320
That was as well. That
was kind of the next

146
00:08:23.320 --> 00:08:25.330
step. So the first thing
we did was we added

147
00:08:25.900 --> 00:08:29.770
features. So we were still
writing VB script, but we

148
00:08:29.770 --> 00:08:32.050
were writing VB script where
you didn't have to declare

149
00:08:32.050 --> 00:08:34.510
your variable and give it
its initial assignment on the

150
00:08:34.540 --> 00:08:38.200
different lines. So we added
that feature, you know, pretty

151
00:08:38.200 --> 00:08:40.450
early on. I think I
was an intern in 2006.

152
00:08:40.450 --> 00:08:42.970
I think I was the
one that got really mad

153
00:08:42.970 --> 00:08:44.800
and requested that feature. I
said, why do I have

154
00:08:44.800 --> 00:08:49.570
to say DMX new line
X equals five. We added

155
00:08:50.800 --> 00:08:53.590
do while loops instead of
these really old school, basic

156
00:08:53.590 --> 00:08:56.130
loops and forage and stuff
like, so they're kind of

157
00:08:56.130 --> 00:08:59.310
simple syntactic features that were
just sugar and of language.

158
00:09:00.630 --> 00:09:06.210
Stephan also added Lambdas. So
closure is basically first-class functions

159
00:09:06.600 --> 00:09:09.480
to the language. And at
that point we've got a

160
00:09:09.480 --> 00:09:13.920
new language and we need
to give it a name.

161
00:09:13.950 --> 00:09:19.080
So my intern class had
any naming competition. They were

162
00:09:19.080 --> 00:09:24.150
names like coral and some
other kind of gemstone cause

163
00:09:24.150 --> 00:09:26.430
review was getting really popular,
really wanted to rip off

164
00:09:26.430 --> 00:09:30.330
that name. And then wasabi
was one because we had

165
00:09:30.720 --> 00:09:32.970
sushi for lunch that day
in the office and bone

166
00:09:32.970 --> 00:09:38.550
crusher 3000, which was suggested
by Eric Goldman. Who's now

167
00:09:38.550 --> 00:09:40.860
at, I think he's at
Dropbox, but you went to

168
00:09:40.860 --> 00:09:45.840
Facebook after fog Creek and
bone crusher 3001 because it's

169
00:09:45.840 --> 00:09:52.020
awesome. But the full time
engineer Stephan basically said, we

170
00:09:52.020 --> 00:09:53.640
can't call it that even
though it'd be awesome to

171
00:09:53.640 --> 00:09:58.410
type PCK every time you
compile the second place runner

172
00:09:58.410 --> 00:10:01.170
up actually became the name
of the language, which was

173
00:10:01.170 --> 00:10:05.570
wasabi. Okay. So At any
point here and forgive me,

174
00:10:05.570 --> 00:10:08.270
my job is to ask
ignorant questions, but at any

175
00:10:08.270 --> 00:10:11.090
point, why didn't you just
write the app over again

176
00:10:11.090 --> 00:10:13.700
in PHP or some language
that is cross platform and

177
00:10:13.700 --> 00:10:17.240
just leave it at that
wide, play the compiler, make

178
00:10:17.240 --> 00:10:20.870
your own language game. That's
a good question. I think

179
00:10:21.920 --> 00:10:24.470
at that point it was
still kind of uncertain if

180
00:10:24.470 --> 00:10:28.370
there was a language that
fit that need, because the

181
00:10:28.370 --> 00:10:31.310
thing we liked about shipping
VB script to our customers

182
00:10:31.310 --> 00:10:33.860
is that we would just
ship source code in our

183
00:10:33.860 --> 00:10:36.260
installer and a little script
over and the database. We

184
00:10:36.260 --> 00:10:40.700
didn't have to install some
huge funky runtime that wasn't

185
00:10:40.940 --> 00:10:45.590
part of their base windows
system. Oh, I see. So

186
00:10:45.590 --> 00:10:48.260
windows people are 90% of
your audience. So that bringing

187
00:10:48.260 --> 00:10:51.230
PHP over, bringing Python over
is bringing a big funky

188
00:10:51.230 --> 00:10:53.960
runtime. Yeah. And they're kind
of weird flavored to windows

189
00:10:53.960 --> 00:10:57.590
developers. Like you say, PHP
in 2005 and the windows

190
00:10:57.590 --> 00:11:00.770
people say, I don't know,
I heard bad things about

191
00:11:00.770 --> 00:11:03.530
that. I've heard, you know,
it's got huge security holes

192
00:11:03.530 --> 00:11:05.900
and blah, blah, blah, blah.
Right. It was a different

193
00:11:05.900 --> 00:11:09.320
world. And certainly PHP and,
and even rails. I mean,

194
00:11:09.350 --> 00:11:12.770
they can run fine on
windows today, today. But yeah,

195
00:11:12.770 --> 00:11:14.720
this was 10 years ago.
This was 10 years ago.

196
00:11:14.720 --> 00:11:16.940
And I mean, there's still
things that don't run well

197
00:11:16.940 --> 00:11:19.670
on windows. And that's something
you have to be careful

198
00:11:19.670 --> 00:11:22.490
of if you want Issues.
And I've got a great

199
00:11:22.490 --> 00:11:24.530
PHP app that runs on
windows. But every once in

200
00:11:24.530 --> 00:11:27.590
a while, the guy that
writes it will do something

201
00:11:27.590 --> 00:11:31.460
wrong with like backslash versus
forward slash and something will

202
00:11:31.460 --> 00:11:35.120
break. Cause it it's. I
think Joel Spolsky says it's

203
00:11:35.120 --> 00:11:38.780
like Japan versus United States. We
eat sushi and eat hamburgers.

204
00:11:39.530 --> 00:11:43.010
But your default state is
like Japanese people learn how

205
00:11:43.010 --> 00:11:45.500
to eat with chopsticks and
American people learning how to

206
00:11:45.500 --> 00:11:47.900
eat with a fork and
a knife. And you can,

207
00:11:47.930 --> 00:11:49.550
you can learn the other
kind of as you get

208
00:11:49.550 --> 00:11:52.670
older, but it's still not.
Your native language has kind

209
00:11:52.670 --> 00:11:54.280
of a thing with Linux.
I thought You were going

210
00:11:54.280 --> 00:11:55.960
to say that we just
shove it into our face

211
00:11:55.960 --> 00:11:58.330
with our hands, but I'm
with you at the forklift,

212
00:11:58.380 --> 00:12:03.480
The correct way to eat
sushi and hamburgers. But yeah,

213
00:12:03.900 --> 00:12:06.600
My wife's father eats a
hamburger with a knife and

214
00:12:06.600 --> 00:12:10.290
fork, but that's a whole
other podcast. Yeah. Believe me.

215
00:12:12.450 --> 00:12:16.740
Okay. So you've got wasabi
and it's starting to get,

216
00:12:17.310 --> 00:12:19.440
it's getting so big that
you have to document it

217
00:12:19.440 --> 00:12:23.550
and like write a book
about it, you know, and

218
00:12:24.030 --> 00:12:26.460
this is getting complicated at
the same time though. Dot

219
00:12:26.460 --> 00:12:29.070
net is starting to really
take, take hold and C

220
00:12:29.070 --> 00:12:33.390
sharp 2.0 is coming out.
Yeah. The one thing you

221
00:12:33.400 --> 00:12:35.550
said, you said that you
thought maybe there was a

222
00:12:35.550 --> 00:12:39.720
JavaScript backend. Oh yes. And
that was the time we

223
00:12:39.720 --> 00:12:44.370
almost made no JS. So
we had this idea over

224
00:12:44.370 --> 00:12:46.590
lunch one day that it
was really annoying that you

225
00:12:46.590 --> 00:12:50.730
had to use two different
languages to do web development.

226
00:12:51.030 --> 00:12:55.140
So there's no matter what
you do. There's two different

227
00:12:55.140 --> 00:12:57.570
languages. It's your fault that
at least at the time,

228
00:12:58.260 --> 00:13:00.480
so on the server we
were doing was happy and

229
00:13:00.480 --> 00:13:03.900
we had a compiler and
we thought, Oh, why don't

230
00:13:03.900 --> 00:13:07.470
we just have wasabi compiled
a both. And this let

231
00:13:07.470 --> 00:13:09.960
us do all sorts of
really cool things for 2006,

232
00:13:09.960 --> 00:13:13.410
like have one piece of
code, generate a piece of

233
00:13:13.410 --> 00:13:17.580
UI. And then that same
piece of code could be

234
00:13:17.580 --> 00:13:20.760
called with an Ajax call
and get an update to

235
00:13:20.760 --> 00:13:24.930
that without having your requests
HTML from the server. So

236
00:13:25.290 --> 00:13:26.520
if you just had a
piece of data, it could

237
00:13:26.520 --> 00:13:29.340
rerender itself using the same
code, just generated in a

238
00:13:29.340 --> 00:13:34.380
different way. And everybody was
Looking at that problem from

239
00:13:34.380 --> 00:13:38.880
different directions around, you know,
2005, six, seven, trying to

240
00:13:38.880 --> 00:13:42.450
figure out like there was
script a script sharp and

241
00:13:42.450 --> 00:13:44.640
you know, these different things
where it's like, gosh, I've

242
00:13:44.640 --> 00:13:47.850
got this little runtime on
the client, I've got this

243
00:13:48.000 --> 00:13:50.340
pretty good run time on
the back end. They really

244
00:13:50.340 --> 00:13:53.100
should work together more. And
we should abstract that away.

245
00:13:53.490 --> 00:13:56.300
And we had web forms
and update panels and all

246
00:13:56.320 --> 00:13:59.940
these different attempts to abstract
away things. But it seems

247
00:13:59.940 --> 00:14:03.660
like the impedance mismatch was
so great that, and the

248
00:14:03.780 --> 00:14:08.340
JavaScript of 2006. Wasn't really
awesome. Yeah. That was just

249
00:14:08.340 --> 00:14:11.070
about when JavaScript, the good
parts came out. So before

250
00:14:11.070 --> 00:14:13.830
that we didn't know what
had good parts. We were

251
00:14:13.830 --> 00:14:16.170
just using all of them
kind of equally. Yeah. Like

252
00:14:16.170 --> 00:14:19.020
the only thing that worked
cross blowout browser was apparently

253
00:14:19.050 --> 00:14:23.340
pop unders. Yeah. Cause those
were everywhere. The alert dial

254
00:14:23.610 --> 00:14:25.920
like that was like, I
could make alert work reliably,

255
00:14:26.340 --> 00:14:30.120
but nothing else, you know,
Dom access, no Acceptable. No.

256
00:14:30.150 --> 00:14:33.270
Cause it was, it was
like slightly different on every

257
00:14:33.270 --> 00:14:35.880
browser was the way to
access the inner text of

258
00:14:35.880 --> 00:14:39.210
a note or something was
different in Mozilla versus in

259
00:14:39.210 --> 00:14:44.460
an Explorer. So did you
succeed in making JavaScript? Yeah.

260
00:14:44.490 --> 00:14:50.400
I mean, we were generating
JavaScript reliably. The problem ended

261
00:14:50.400 --> 00:14:53.300
up being that nobody actually
wants to write wasabi code.

262
00:14:53.630 --> 00:14:55.550
Everybody just wants to write
Java script and then do

263
00:14:55.550 --> 00:14:57.020
the same thing on the
server. So that's why I

264
00:14:57.020 --> 00:15:00.800
noticed out there it was
obvious one eighth opensource and

265
00:15:00.830 --> 00:15:03.010
the rest of it is
in the trashcan. So at

266
00:15:03.010 --> 00:15:05.920
some point someone must have
thought that maybe we fog

267
00:15:05.950 --> 00:15:08.200
bugs should stop depending on
with Sabi and want to

268
00:15:08.260 --> 00:15:14.560
remove it. Right. Yeah. That
happens Several times. We had

269
00:15:15.790 --> 00:15:20.620
a try in 2001 called
project soy sauce, I think

270
00:15:20.710 --> 00:15:28.990
2011, 2011. That's correct. Yeah.
Ted Ted was, he's now

271
00:15:29.350 --> 00:15:31.780
one of the ESD teams
and I'm going to insult

272
00:15:31.780 --> 00:15:35.530
him by not remembering which
one. I'm sorry. His idea

273
00:15:35.530 --> 00:15:38.170
was to take the five
books code, compile it with

274
00:15:38.170 --> 00:15:40.690
wasabi, which is now.net at
this point. That's when I

275
00:15:40.690 --> 00:15:43.630
joined the wasabi team was
we rewrote the entire backend.

276
00:15:45.340 --> 00:15:47.830
So instead of generating PHP
V script and Java script,

277
00:15:48.430 --> 00:15:51.350
we generated a.net DLL. And
then just run that on,

278
00:15:53.710 --> 00:15:56.410
Which is still interesting to
me because you are writing

279
00:15:56.410 --> 00:15:59.650
a new compiler to generate
take wasabi, which is the,

280
00:15:59.760 --> 00:16:04.480
the core intellectual property. Wasabi
is the thing that describes

281
00:16:04.480 --> 00:16:07.840
the intent that is fog
bugs. And rather than just

282
00:16:08.200 --> 00:16:11.680
writing it in C sharp
from scratch and like writing

283
00:16:11.680 --> 00:16:14.650
the new app, you wrote
another, you, you picked a

284
00:16:14.650 --> 00:16:17.920
new target and now you're
generating. Yeah. And you know,

285
00:16:17.920 --> 00:16:20.500
every time that happened, it
was the sensible thing to

286
00:16:20.500 --> 00:16:22.660
do at the time because
it was slightly less work,

287
00:16:23.110 --> 00:16:28.480
slightly less risk. And we
have, because He did express

288
00:16:28.480 --> 00:16:30.940
the intent correctly. Yeah, exactly.
And I had all the

289
00:16:30.940 --> 00:16:33.190
comments and it would just
be, you know, the, the

290
00:16:33.190 --> 00:16:36.100
tools of the time, just
weren't quite there to get

291
00:16:36.100 --> 00:16:39.010
us exactly the meaning out
of the code that was

292
00:16:39.010 --> 00:16:42.880
written, instead of it was
like Ted's project, project, soy

293
00:16:42.880 --> 00:16:47.380
sauce, which was to take
the.net assembly, open it in.net

294
00:16:47.380 --> 00:16:51.160
reflector, export that to a
C sharp project apply regular

295
00:16:51.160 --> 00:16:56.530
expressions. I had me right
up until that part, right?

296
00:16:56.830 --> 00:16:58.600
Yeah. Well, they call it
soy sauce, but that was

297
00:16:58.600 --> 00:17:00.850
kind of the magic, you
know, Pearl script. He was

298
00:17:00.850 --> 00:17:04.030
going to use to translate
it from this really janky

299
00:17:04.300 --> 00:17:11.470
C-sharp output into professional looking
idiomatic C-sharp and then the

300
00:17:11.470 --> 00:17:16.900
last bullet pointed list is
drink lemonade. But the, the

301
00:17:16.900 --> 00:17:19.150
idea that you're using regular
expressions to do this and

302
00:17:19.150 --> 00:17:24.220
not like the code dumb.
Yeah. I think he didn't

303
00:17:24.220 --> 00:17:26.140
want to work with fat
because it's just such a,

304
00:17:26.650 --> 00:17:30.640
not easy to use API
were basically, if you wanted

305
00:17:30.640 --> 00:17:33.250
to do anything that was
outside the design of Microsoft

306
00:17:33.250 --> 00:17:37.660
code, you were basically generating
strings with the code that

307
00:17:37.660 --> 00:17:41.680
you meant to generate, then
it just perfect. Well, and

308
00:17:41.680 --> 00:17:48.160
you've got, yeah, I understand.
Okay. So the output of

309
00:17:48.160 --> 00:17:51.720
wasabi was a dotnet Assembly,
then you want to change

310
00:17:51.720 --> 00:17:55.020
it to it. I'll put
proper C-sharp yes. You haven't

311
00:17:55.020 --> 00:17:57.930
quite got Roslyn yet. Roslyn
is the open source and

312
00:17:57.930 --> 00:17:59.820
memory dot and compile that
we'll talk about in a

313
00:17:59.820 --> 00:18:02.220
little bit, but you don't
quite have the tools that

314
00:18:02.220 --> 00:18:04.410
you need. You don't have
compiler as a service. You're

315
00:18:04.410 --> 00:18:08.010
still messing around with strings
at this point. Yeah. So

316
00:18:08.010 --> 00:18:12.270
we were using for our.net
back end, we're using a

317
00:18:12.270 --> 00:18:18.780
technology called Microsoft code, which
is very, it's weird. It's

318
00:18:18.780 --> 00:18:21.750
a very weird concept. So
it was a good idea

319
00:18:21.750 --> 00:18:25.590
at the time. Yeah. I
mean it almost, almost a

320
00:18:25.590 --> 00:18:27.660
good idea at the time.
It was an idea at

321
00:18:27.660 --> 00:18:31.590
the time. It certainly did
things. I'm not sure I'm

322
00:18:31.590 --> 00:18:33.810
convinced it was a good
idea, but it was an

323
00:18:33.810 --> 00:18:37.110
idea and it was done.
It was deserved, but it

324
00:18:37.110 --> 00:18:41.160
was the idea we had.
Yeah. The idea was that

325
00:18:41.160 --> 00:18:44.400
they would have basically an
abstract syntax tree that you

326
00:18:44.400 --> 00:18:48.030
could programmatically generate. And then
it would be able to

327
00:18:48.030 --> 00:18:53.790
compile to either C sharp
or visual basic.net, the same

328
00:18:53.790 --> 00:18:57.420
AST. And what that meant
was there was no way

329
00:18:57.900 --> 00:19:00.930
to do things that were
not possible in one of

330
00:19:00.930 --> 00:19:04.920
those languages. Right. So the
idea of idiomatic stuff then

331
00:19:04.920 --> 00:19:09.450
suddenly becomes a problem. Right?
Yeah. And it was really

332
00:19:09.450 --> 00:19:12.240
focused on generating code that
was not meant to be

333
00:19:12.240 --> 00:19:14.700
read. It was just made
to generate code. That could

334
00:19:14.700 --> 00:19:19.380
be compiled period. So for
example, I never really figured

335
00:19:19.380 --> 00:19:24.300
out how to do the
not operator in code instead

336
00:19:24.300 --> 00:19:25.950
of what you would do
is you would compare your

337
00:19:25.950 --> 00:19:30.330
bully and expression with false.
So instead of saying, not,

338
00:19:30.330 --> 00:19:34.920
Y he would say Y
equals equals false. And that

339
00:19:34.920 --> 00:19:39.390
happens a little bit where
we want to negate values.

340
00:19:39.840 --> 00:19:42.990
Yeah. The same thing with
negative numbers you'd have to

341
00:19:42.990 --> 00:19:48.480
subtract a number from zero.
So instead of negative 30,

342
00:19:48.480 --> 00:19:52.440
it would be zero minus
30 with fantasies around every

343
00:19:52.440 --> 00:19:56.310
single expression and an expression
because it didn't care about

344
00:19:56.700 --> 00:20:00.870
any of that stuff. So
it worked though, and it

345
00:20:00.870 --> 00:20:04.560
got fog close onto these
scraps and off with PHP,

346
00:20:04.560 --> 00:20:07.200
which gave us a huge
performance boost because we were

347
00:20:07.200 --> 00:20:11.490
no longer in these interpreted
languages. Is the source still

348
00:20:11.490 --> 00:20:13.320
at this point, you still
wasabi or did this point,

349
00:20:13.320 --> 00:20:16.650
did you actually check, like
remove all of those Sabi

350
00:20:16.650 --> 00:20:19.290
files and you're only on
C-sharp we were still working

351
00:20:19.290 --> 00:20:22.680
with salvia at that point.
It took until 2015 for

352
00:20:22.680 --> 00:20:25.650
us to remove the wasabi
source. Okay. So you're still

353
00:20:25.650 --> 00:20:27.300
not at this point in
the story, we're still not

354
00:20:27.300 --> 00:20:34.860
there. Yeah. Okay. And Roslyn
internally at Microsoft, there was

355
00:20:34.860 --> 00:20:37.650
a project that was called
the big switch. And the

356
00:20:37.650 --> 00:20:40.560
big switch was when we,
I think it was about

357
00:20:40.710 --> 00:20:42.300
a year and a half
ago, I can look online

358
00:20:42.300 --> 00:20:43.710
and they had, they did
a blog post. It was

359
00:20:43.710 --> 00:20:45.930
the moment when we built,
went from building everything with

360
00:20:45.930 --> 00:20:48.700
the original C-sharp compiler to
building to Roslyn. And there

361
00:20:48.700 --> 00:20:51.310
were all these emails that
happened internally that were like,

362
00:20:51.310 --> 00:20:52.930
okay, get ready. The big
switch is going to be

363
00:20:52.930 --> 00:20:54.820
flipped, you know, within, in
a moment we're going to

364
00:20:55.150 --> 00:20:57.730
flip the big switch. And
it was, you know, it

365
00:20:57.730 --> 00:21:00.160
was a big deal because
you needed nothing to break.

366
00:21:00.160 --> 00:21:04.390
Right. You're, you're doing a
brain transplant while the patient

367
00:21:04.390 --> 00:21:08.010
is walking around and talking
about it. Yes. I have

368
00:21:08.130 --> 00:21:11.160
had a similar situation, very
similar situation. It's a much

369
00:21:11.280 --> 00:21:15.150
smaller and slower patient, I
think. Cause it was just

370
00:21:15.150 --> 00:21:18.270
fog bugs. It wasn't these
huge multibillion-dollar lines of business

371
00:21:18.270 --> 00:21:21.960
like Microsoft has, but it
was still kind of scary.

372
00:21:21.990 --> 00:21:25.470
I mean, we had pretty,
pretty good levels of trust

373
00:21:25.470 --> 00:21:28.980
because I did it in
several phases. So starting in

374
00:21:28.980 --> 00:21:35.250
about February was when I
started re you know, changing

375
00:21:35.250 --> 00:21:37.740
the build process just slightly.
So the first thing we

376
00:21:37.740 --> 00:21:43.080
did was we made ms.
Build generate just C-sharp files

377
00:21:43.650 --> 00:21:45.750
from wasabi, which was always
a capability that had it

378
00:21:45.750 --> 00:21:47.940
just, we never did it
because the alpha was so

379
00:21:47.940 --> 00:21:51.510
unbelievably bad, but that was
the first step was I

380
00:21:51.510 --> 00:21:53.700
just had it generates the
sheriff files and then called

381
00:21:54.330 --> 00:21:56.880
ms. Build to say, Hey,
here are the C sharp

382
00:21:56.880 --> 00:21:58.800
files that make five bucks.
Can you build this please?

383
00:22:00.660 --> 00:22:02.460
And I fixed a bug
where we regenerating a bunch

384
00:22:02.460 --> 00:22:04.170
of money, use labels, just
cause I was in there.

385
00:22:06.000 --> 00:22:09.900
And then I created a
new murkier, mercurial repository and

386
00:22:09.900 --> 00:22:13.740
checked in that output. And
so that was my baseline

387
00:22:13.770 --> 00:22:17.700
of Roslyn output. And then
I copied the, or not

388
00:22:17.700 --> 00:22:21.750
Roslyn, sorry, code downhill. So
I took the code Dom

389
00:22:21.750 --> 00:22:25.680
out and I started writing
a Rosalind generator based on

390
00:22:25.680 --> 00:22:32.700
code. And every time I
made a fix to the

391
00:22:32.700 --> 00:22:35.880
Rosalind generator, I would check
it into that repository and

392
00:22:35.880 --> 00:22:38.190
diff against the first revision
to see how much more

393
00:22:38.190 --> 00:22:40.680
work I had left to
do. So it started at

394
00:22:40.680 --> 00:22:43.620
five bucks is almost a
million lines of code. It

395
00:22:43.620 --> 00:22:48.630
started with about 1.5 million
lines of difference. So three

396
00:22:48.630 --> 00:22:52.620
quarters of the output was
just wrong in some way

397
00:22:52.680 --> 00:22:56.430
or not matching exactly what
code comes it. Well, you

398
00:22:56.430 --> 00:22:59.340
also answer indirectly there that
my kind of, one of

399
00:22:59.340 --> 00:23:02.370
my questions, my kind of
ongoing question, which is why

400
00:23:02.370 --> 00:23:06.270
don't you just write this
whole thing over again? It's

401
00:23:06.270 --> 00:23:09.330
a million lines of code
that is something, this isn't

402
00:23:09.330 --> 00:23:11.970
just some crud application that
just throws some bugs into

403
00:23:11.970 --> 00:23:14.550
a table. It's a big
deal. Yeah. Fuck. Bugs is

404
00:23:14.550 --> 00:23:21.480
a huge application. It has
a email processing portion. It

405
00:23:21.480 --> 00:23:25.530
has a Wiki, it has
evidence-based scheduling, which is very

406
00:23:25.530 --> 00:23:29.340
complicated. It has a plugin
architecture so that you could

407
00:23:29.430 --> 00:23:32.640
build a plugin that does
basically anything. Cause it's, you

408
00:23:32.640 --> 00:23:39.090
know, you're writing programs and
you know, there's just lots

409
00:23:39.090 --> 00:23:41.640
and lots and lots of
code. And some of that

410
00:23:41.640 --> 00:23:43.920
is because wasabi had a
feature that would write code

411
00:23:43.920 --> 00:23:46.970
for you C sharp. We
don't have that. So I

412
00:23:46.970 --> 00:23:51.170
just generated it directly. And
so there's 60,000 lines of

413
00:23:51.170 --> 00:23:53.540
code just right there and
for our database access layer.

414
00:23:54.170 --> 00:24:01.900
Wow. So Roslyn, the big
switch happens internally. Rosin becomes

415
00:24:02.260 --> 00:24:05.560
a thing that can really
be used. You've identified it.

416
00:24:05.560 --> 00:24:07.300
If you've been, were you
on the cutting edge? Were

417
00:24:07.300 --> 00:24:10.240
you using Roslyn when it
wasn't quite baked? Because we

418
00:24:10.240 --> 00:24:13.330
just kind of like quote
unquote released it, you know,

419
00:24:13.330 --> 00:24:16.690
a couple of months ago,
I don't think it was

420
00:24:16.690 --> 00:24:18.730
a full, I don't remember
what version I was using,

421
00:24:18.730 --> 00:24:21.370
but it definitely said something
like NATO or pre-release on

422
00:24:21.370 --> 00:24:24.580
the new get package that
I had installed in wasabi.

423
00:24:25.480 --> 00:24:27.310
And you didn't think anything
of it? No problem. That's

424
00:24:27.310 --> 00:24:29.710
fine. I mean, I was,
I was looking at the

425
00:24:29.710 --> 00:24:31.630
output. We have a lot
of code and if something

426
00:24:31.630 --> 00:24:36.370
doesn't work, I'm going to
notice it pretty quickly. And

427
00:24:37.030 --> 00:24:40.030
we source control because we
are modern developers from the

428
00:24:40.030 --> 00:24:43.090
two thousands. And we understand
that if you make a

429
00:24:43.090 --> 00:24:46.660
mistake, you can always go
back. So that's how we

430
00:24:46.660 --> 00:24:55.750
kind of developed a trust
in the tool was March 4th

431
00:24:55.930 --> 00:24:59.740
was when I finally checked
in the output from Roslyn

432
00:24:59.950 --> 00:25:04.900
and I ran HT diff
and it printed nothing. Did

433
00:25:04.900 --> 00:25:07.030
you believe that it was
possible that you had done

434
00:25:07.030 --> 00:25:08.920
it correctly? Yeah, because I
had done two and a

435
00:25:08.920 --> 00:25:11.560
half weeks of work to
get to that point. No

436
00:25:11.560 --> 00:25:13.450
question. When that happened, it
was more, it wasn't like

437
00:25:13.450 --> 00:25:15.550
a sense of disbelief. It
was a sense of accomplishment.

438
00:25:15.640 --> 00:25:18.190
Yeah, It was, it was
more of a finally I

439
00:25:18.190 --> 00:25:21.910
can't believe that I did
this, but I can believe

440
00:25:21.910 --> 00:25:26.080
that it's done because I
don't want to not believe

441
00:25:26.080 --> 00:25:28.900
that anymore. So what about
your original goal from the

442
00:25:28.900 --> 00:25:31.810
very, very beginning of this
conversation, which is those 10%

443
00:25:31.810 --> 00:25:35.170
of people who want to
run it on Linux, They

444
00:25:35.170 --> 00:25:36.880
can still run it on
Linux. I mean, we write

445
00:25:36.880 --> 00:25:41.080
it in C sharp. We
can pilot to a DLL

446
00:25:41.290 --> 00:25:43.630
and then you run that
deal on mano and it

447
00:25:43.870 --> 00:25:46.960
works as well as mano
does. Cool. So motto works

448
00:25:46.960 --> 00:25:49.210
great for this. And you
found monitor to do its

449
00:25:49.210 --> 00:25:52.300
job fine. Cause some people
have said that maybe motto

450
00:25:52.300 --> 00:25:56.740
isn't good for production. It's
not Environment. We run fog

451
00:25:56.740 --> 00:25:59.710
bugs on. So we don't
get to dog food at

452
00:25:59.710 --> 00:26:04.960
very much. So our in
house fog books instances called

453
00:26:04.960 --> 00:26:08.860
R dot five bucks.com and
that's running on windows. Of

454
00:26:08.860 --> 00:26:16.060
course. So we don't Romano
our business. So we, we

455
00:26:16.210 --> 00:26:17.980
definitely, I don't have as
much trust in that. But

456
00:26:17.980 --> 00:26:20.200
what I'm saying is that
you haven't had any issues.

457
00:26:20.200 --> 00:26:22.390
People haven't been saying, Oh
yeah, this randomly has a

458
00:26:22.390 --> 00:26:25.240
problem. Or you know, the
core down here or there.

459
00:26:26.140 --> 00:26:28.180
I don't know. I have
no experience running a mano

460
00:26:28.180 --> 00:26:30.700
in production. I, I'm not
trying to slander mano in

461
00:26:30.700 --> 00:26:33.130
any way. I think it's
great. I think it's nice

462
00:26:33.130 --> 00:26:36.460
to hear that as Microsoft
goes off and writes a

463
00:26:36.520 --> 00:26:39.910
core CLR, which I assume
that you will target at

464
00:26:39.910 --> 00:26:42.370
some point and then you'll
switch running, fog, bugs over

465
00:26:42.370 --> 00:26:45.390
the course you are, it
could possibly do that model

466
00:26:45.390 --> 00:26:47.130
has been working great for
you for what sounds like

467
00:26:47.130 --> 00:26:49.670
some years. Yeah. Well, we're
not using the tip of

468
00:26:49.670 --> 00:26:52.190
mana that's, that's the kind
of scary thing is that

469
00:26:52.190 --> 00:26:59.750
we have a fork from
basically 2010 and we've been

470
00:26:59.750 --> 00:27:03.140
maintaining that and keeping that
running. And that is a

471
00:27:03.140 --> 00:27:07.730
little concerning just because it
is such a large volume

472
00:27:07.730 --> 00:27:10.130
of work to get it
to the latest version. I

473
00:27:10.130 --> 00:27:14.180
see Switching to whatever mano
is in 2015, from the

474
00:27:14.840 --> 00:27:18.320
personally maintained fork, it would
be non-trivial Yes. That would

475
00:27:18.320 --> 00:27:20.330
actually be more work than
the work I did to

476
00:27:20.330 --> 00:27:24.350
switch from Kodak to rock.
But every day that goes

477
00:27:24.350 --> 00:27:27.590
by puts you farther and
farther away. Yeah. You were

478
00:27:27.590 --> 00:27:31.460
in Lennox customers. Yeah. And
so then does that mean

479
00:27:31.460 --> 00:27:36.260
that the core CLR running
on Linux reliably is your

480
00:27:36.260 --> 00:27:39.560
only out at this point
That would relieve the pressure

481
00:27:39.560 --> 00:27:43.670
of having a support motto.
Yeah. Have you run it

482
00:27:43.670 --> 00:27:45.380
on the course? You are
yet and seeing what works

483
00:27:45.380 --> 00:27:48.320
and what doesn't not yet.
I should try that. That

484
00:27:48.320 --> 00:27:50.480
would be, we'll leave that
as an exercise for the

485
00:27:50.480 --> 00:27:52.880
reader. So that sounds like
something that would be your

486
00:27:52.880 --> 00:27:54.920
next big project, wouldn't it?
Because that would mean you

487
00:27:54.920 --> 00:27:58.280
could refactor via subtraction where
you would simply subtract your

488
00:27:58.280 --> 00:28:00.860
own personal branch of mano
and not have to worry

489
00:28:00.860 --> 00:28:03.710
about it anymore. That's something
personally I'm the best ad

490
00:28:03.710 --> 00:28:05.970
is my most productive days
on the days when I

491
00:28:05.970 --> 00:28:09.590
wanting to lead some huge
component that is now implemented

492
00:28:09.620 --> 00:28:15.620
by two lines of library
code. It's just part of

493
00:28:15.620 --> 00:28:17.420
dotnet now. And I can
say, I don't need this

494
00:28:17.420 --> 00:28:19.730
anymore. We've got Lambdas and
C sharp. Why was that?

495
00:28:20.210 --> 00:28:25.100
You know, why are we
generating these magic Lambda classes?

496
00:28:25.580 --> 00:28:28.880
It was hobby. I can
see here on my calendar,

497
00:28:28.880 --> 00:28:33.470
March 11th, it just says Lambdas.
And I know that that

498
00:28:33.470 --> 00:28:35.540
means that's the day I
turned them into C sharp

499
00:28:35.540 --> 00:28:41.090
Lambdas and it deleted probably
10,000 lines of code to

500
00:28:41.090 --> 00:28:46.040
be able to do that.
Nice. So you also released

501
00:28:46.040 --> 00:28:49.430
wasabi is new code generator
as open source, Which is

502
00:28:49.430 --> 00:28:52.010
cool. Yeah, that sounds good.
Huh? You said that you,

503
00:28:52.010 --> 00:28:53.150
and I don't know if
this is true, but I

504
00:28:53.150 --> 00:28:55.340
think it's true. You said
that this is probably the

505
00:28:55.340 --> 00:28:59.480
first real world trans Pilar,
that targets C-sharp with Roslyn.

506
00:28:59.480 --> 00:29:01.550
That's been open source. I
don't know if that's true

507
00:29:01.550 --> 00:29:04.100
either, but I haven't seen
any counterexamples. Well, this is,

508
00:29:04.140 --> 00:29:05.870
Is the opportunity for people
to come out and call

509
00:29:05.870 --> 00:29:08.420
you out. It seems pretty
cool. Yeah. Yeah. It is

510
00:29:08.420 --> 00:29:11.660
a very significant code generator
that we are using it.

511
00:29:12.620 --> 00:29:16.850
We did use it to
convert fog bugs from a

512
00:29:17.570 --> 00:29:21.410
code dumb lifestyle to just
being a C sharp application

513
00:29:22.850 --> 00:29:24.740
And is a, it's an
NBC app or what is

514
00:29:24.740 --> 00:29:30.410
it? It's just a library.
It's actually a console application

515
00:29:30.410 --> 00:29:32.810
right now, but it generates
a single piece of code

516
00:29:32.810 --> 00:29:35.510
that I think returns zero
from a function called me

517
00:29:36.050 --> 00:29:38.660
That what it is. Okay.
And that, but the code

518
00:29:38.660 --> 00:29:42.190
that it generates though, was
fog bugs itself is An

519
00:29:42.190 --> 00:29:46.030
asp.net app. It is an
asp.net app. Yeah. We don't

520
00:29:46.030 --> 00:29:49.630
use MVC. So it's using
your own flavor of handlers

521
00:29:49.630 --> 00:29:52.300
and modules. Exactly. It is.
It is its own thing.

522
00:29:52.420 --> 00:29:59.830
It is the script for
the 2015 set. That is

523
00:29:59.830 --> 00:30:01.450
you just yet, by the
way, that is now the

524
00:30:01.450 --> 00:30:04.750
title of this show. I've
just decided great script for

525
00:30:04.750 --> 00:30:09.310
2015, I'm stuck forever. Fog
Creek looks to the future

526
00:30:09.790 --> 00:30:13.150
fucking Creek looks to the
decades and the future is

527
00:30:13.150 --> 00:30:16.120
VB script for, so what
do you think that people

528
00:30:16.120 --> 00:30:18.490
will use with this code?
We use this code on

529
00:30:18.670 --> 00:30:22.600
GitHub, is this for education
or for bootstrapping their own

530
00:30:22.930 --> 00:30:25.180
work. Maybe they have similar
problems and they don't even

531
00:30:25.180 --> 00:30:27.570
realize that there's a way
out. Yeah, I think it's,

532
00:30:27.570 --> 00:30:30.070
it's kind of just a
signpost to say, this is

533
00:30:30.280 --> 00:30:34.360
how I did it. And
these are the challenges that

534
00:30:35.050 --> 00:30:39.300
I worked around in this
way. So if they, if

535
00:30:39.310 --> 00:30:40.900
somebody wants to look at
it and say, man, I

536
00:30:40.900 --> 00:30:43.690
just really need to write
a dotnet language right now.

537
00:30:44.680 --> 00:30:46.210
They can look at my
back end and see how

538
00:30:46.210 --> 00:30:49.360
I did it using Rosalyn
instead of hand, rolling their

539
00:30:49.360 --> 00:30:54.460
own with print half you've
got in here and import

540
00:30:54.460 --> 00:30:57.610
or Alexa, parser interpreter type
checker, all of the different

541
00:30:57.610 --> 00:31:01.270
things available. So you could
probably teach a class on

542
00:31:01.270 --> 00:31:03.220
this stuff. If you wanted
to couldn't you, I could

543
00:31:03.220 --> 00:31:05.830
have actually given a 30
minute talk called let's build

544
00:31:05.830 --> 00:31:10.780
a compiler in 30 minutes
in JavaScript. Seriously. Yeah. And

545
00:31:10.780 --> 00:31:12.580
that's on my get hub
is the source code for

546
00:31:12.580 --> 00:31:14.740
that. And it's very, very
simple. It has four loops

547
00:31:14.800 --> 00:31:18.010
and that's it. But we
did it in 30, I

548
00:31:18.010 --> 00:31:20.170
think 32 minutes. Cause we
stopped for a question and

549
00:31:20.170 --> 00:31:24.490
debugging session in the middle,
but it has a Lexar

550
00:31:24.670 --> 00:31:28.390
which takes characters and turns
them into tokens also called

551
00:31:29.630 --> 00:31:31.660
as a parser, which takes
those and builds a syntax

552
00:31:31.660 --> 00:31:34.960
tree as a generator, which
takes that syntax tree and

553
00:31:34.960 --> 00:31:40.450
prints out JavaScript. Very cool.
Well, people, I will take

554
00:31:40.450 --> 00:31:43.330
the link by the way,
to your talk to your

555
00:31:43.330 --> 00:31:45.460
get hub and put it
all in the show notes

556
00:31:45.460 --> 00:31:47.140
so that people can go
and explore this code and

557
00:31:47.140 --> 00:31:49.000
check it out as well
as your two very good

558
00:31:49.900 --> 00:31:52.690
blog posts up on fall
Creek called killing off wasabi

559
00:31:52.900 --> 00:31:54.730
parts one and two. Are
they going to be more

560
00:31:54.730 --> 00:31:56.710
parts? Is this an ongoing
saga that we should follow?

561
00:31:57.100 --> 00:31:59.050
I think it was obvious
pretty well and dead at

562
00:31:59.050 --> 00:32:02.590
this point, at least bugs.
Very cool. Well, thanks for

563
00:32:02.590 --> 00:32:05.710
chatting with me today. Thanks
for having me. This has

564
00:32:05.710 --> 00:32:08.410
been another episode of Hansel
minutes. We'll see you again

565
00:32:08.410 --> 00:32:16.620
next week. <inaudible>.

