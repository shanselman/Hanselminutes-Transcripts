WEBVTT FILE

1
00:00:01.050 --> 00:00:04.200
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:04.200 --> 00:00:07.170
they make the show possible.
Today's show is sponsored by

3
00:00:07.170 --> 00:00:11.340
developer express, become a UI
superhero with dev express controls

4
00:00:11.340 --> 00:00:15.870
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:16.260 --> 00:00:20.340
by leveraging your existing knowledge,
you can build next generation

6
00:00:20.370 --> 00:00:24.450
touch enabled solutions for tomorrow,
you can download your free

7
00:00:24.540 --> 00:00:49.620
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com
from hanselminutes.com. It's Hansel minutes.

8
00:00:50.010 --> 00:00:54.120
Our weekly discussion with web
developer and technologist Scott Hanselman.

9
00:00:54.630 --> 00:00:58.980
This is Lawrence Ryan announcing show
number four 94. In this

10
00:00:58.980 --> 00:01:03.950
episode, Scott talks with Rachel Reese
from jet.com about how jet

11
00:01:03.950 --> 00:01:12.630
uses F sharp Azure and
other technologies to scale. Hi,

12
00:01:12.630 --> 00:01:14.880
this is Scott Hanselman. This
is another episode of Hansel

13
00:01:14.880 --> 00:01:18.090
minutes on today's show. I've
got Rachel Reese who is an

14
00:01:18.090 --> 00:01:22.640
F sharp developer@jet.com. How are
you? I'm doing fabulous. How

15
00:01:22.640 --> 00:01:24.830
are you, Scott? Lovely. I'm
happy to be talking to

16
00:01:24.830 --> 00:01:28.280
you about this because I,
I tweeted an article about

17
00:01:28.280 --> 00:01:32.600
jet using F sharp and
pushing some pretty amazing scale.

18
00:01:32.990 --> 00:01:36.380
And the, the tweets were
like, I got like 150

19
00:01:36.380 --> 00:01:38.930
retweets. Like people are interested
in this topic and what

20
00:01:38.930 --> 00:01:42.470
you all are doing at
jet. We're doing some totally

21
00:01:42.470 --> 00:01:45.320
amazing things. So I am
glad to see that we're

22
00:01:45.320 --> 00:01:47.840
getting some attention. I'm proud.
I appreciate that. What is,

23
00:01:47.850 --> 00:01:50.540
so what, give me the
elevator speech on what, what

24
00:01:50.540 --> 00:01:53.240
is jet and what does
jet do? A jet.com is

25
00:01:53.240 --> 00:01:56.180
going up against Amazon. We're
an eCommerce site. We are

26
00:01:56.180 --> 00:01:59.630
promising prices of 10 to
15, even up to 20%

27
00:01:59.630 --> 00:02:03.650
below Amazon's prices. We're working
on sort of a club

28
00:02:03.680 --> 00:02:05.930
model. You will have to
pay a fee, sort of

29
00:02:05.930 --> 00:02:10.310
like an Amazon prime membership
fee, maybe a Costco subscription

30
00:02:10.310 --> 00:02:13.010
fee, something like that. It'll
be 49 99 a year.

31
00:02:13.400 --> 00:02:17.210
That will give you access
to the site and all

32
00:02:17.210 --> 00:02:21.440
of our amazing cheap prices.
Unlike Costco has one point

33
00:02:21.470 --> 00:02:23.750
you won't have to buy
in bulk. It'll be the

34
00:02:23.750 --> 00:02:25.670
same regular items that you
would be able to get

35
00:02:25.670 --> 00:02:28.130
on Amazon. Oh, okay. So
you all buy in bulk

36
00:02:28.130 --> 00:02:31.670
and we, we benefit. We
don't necessarily buy in bulk.

37
00:02:31.670 --> 00:02:34.520
I mean, we will buy
some things in bulk, but

38
00:02:35.000 --> 00:02:38.480
we are cheap. Somehow we
have magic. We have lots

39
00:02:38.480 --> 00:02:44.630
of magic algorithms, but we're
basically taking every single place

40
00:02:44.630 --> 00:02:47.090
that we can cut costs
and passing those on directly

41
00:02:47.090 --> 00:02:50.720
to the consumer. We're making
zero money on anything except

42
00:02:50.720 --> 00:02:56.540
the actual subscription fee. Oh,
that's good to know. So

43
00:02:56.990 --> 00:03:01.120
any, like, as you check
out, if you are adding

44
00:03:01.120 --> 00:03:03.490
items to your cart that
are from the same retailer,

45
00:03:03.490 --> 00:03:05.500
we can give you a
percentage off because we know

46
00:03:05.500 --> 00:03:08.410
that we can ship those
altogether in a box. They're

47
00:03:08.410 --> 00:03:10.450
coming from the same place.
It'll be easier and faster

48
00:03:10.450 --> 00:03:14.170
to ship. We give you
1.5% off. If you play

49
00:03:14.170 --> 00:03:17.740
with the debit card instead
of a credit card, we'll

50
00:03:17.740 --> 00:03:22.120
give you, you know, up
to a couple dollars off.

51
00:03:22.150 --> 00:03:25.870
If you waive your right
to return something, there's all

52
00:03:25.870 --> 00:03:30.190
sorts of little places where
we're cutting those costs down

53
00:03:30.630 --> 00:03:34.710
Is algorithmic. Like this is
they're not to put too

54
00:03:34.710 --> 00:03:36.210
fine a point on it,
right? But like, you know,

55
00:03:36.210 --> 00:03:38.430
there's only so many ways
cost can be cut, but

56
00:03:38.460 --> 00:03:41.250
this is the magic of
software. You are figuring out

57
00:03:41.550 --> 00:03:44.460
those pennies and half pennies
and all the different potential

58
00:03:44.460 --> 00:03:46.470
ways. Like you just said,
putting things in the same

59
00:03:46.470 --> 00:03:50.640
box, saves money. Why not
pass that directly onto me,

60
00:03:50.640 --> 00:03:53.340
as opposed to you taking
the cut for shipping it

61
00:03:53.340 --> 00:03:56.190
in one box. Exactly. And
there's, you know, a hundred

62
00:03:56.190 --> 00:03:57.960
different places where we can
save you a couple of

63
00:03:57.960 --> 00:04:00.800
pennies, which adds up to
a couple of dollars. Then

64
00:04:00.810 --> 00:04:04.350
you times that times my
weekly groceries and suddenly I'm

65
00:04:04.350 --> 00:04:06.750
saving big money. And I
feel like I paid off

66
00:04:06.750 --> 00:04:11.280
my, my membership fee immediately.
Yeah. And in fact, if

67
00:04:11.280 --> 00:04:14.100
you don't save up to
49 99 a year, we

68
00:04:14.100 --> 00:04:17.430
will refund the difference. Okay.
That's cool. All right. So

69
00:04:17.430 --> 00:04:21.090
that's the, that's the elevator
speech. There's the advertisement for

70
00:04:21.090 --> 00:04:24.120
lack of a better word
for jet, but the, the

71
00:04:24.120 --> 00:04:28.560
dynamic pricing system and the
algorithms and stuff, what powers

72
00:04:28.560 --> 00:04:31.770
jet and the, the systems
like what's your technology stack

73
00:04:31.770 --> 00:04:34.950
look like? Oh, We are,
we're using all sorts of

74
00:04:34.950 --> 00:04:38.520
things. We are using F
sharp. We are using Azure.

75
00:04:38.520 --> 00:04:44.580
We are using microservices. We
are using Reddit and Kafka

76
00:04:44.670 --> 00:04:47.910
and That's a pub sub
system. Right. So Brooke Revis,

77
00:04:47.910 --> 00:04:49.770
I know is an in
memory database. And Kafka is

78
00:04:49.770 --> 00:04:53.370
the distributed log that you
use as a cue. You're

79
00:04:53.370 --> 00:04:56.820
an F sharp expert. Yes.
I don't know about expert,

80
00:04:56.820 --> 00:05:01.620
but sure. But, but you,
I knew you as being

81
00:05:01.620 --> 00:05:04.020
a dotnet person. When did
you jump ship into F

82
00:05:04.020 --> 00:05:08.250
sharp? Oh gosh. I first
heard of F sharp in

83
00:05:08.250 --> 00:05:15.600
2010. I don't remember exactly
where when, but somebody said

84
00:05:15.630 --> 00:05:18.300
you like math, so clearly
you'll like this thing I

85
00:05:18.300 --> 00:05:22.320
saw them. I was like,
yeah. It was like, I

86
00:05:22.320 --> 00:05:23.760
don't really know how to
read that, but sure. I

87
00:05:23.760 --> 00:05:25.920
guess I'll, I'll look at
it. And I, I dawdled

88
00:05:25.920 --> 00:05:30.930
for a couple years and
I started toying with it

89
00:05:30.930 --> 00:05:36.600
a little bit solving the
project, oiler problems. I was

90
00:05:36.600 --> 00:05:39.570
a math major. Yes. I
don't know that that actually

91
00:05:39.570 --> 00:05:41.340
has anything to do with
why I love F sharp,

92
00:05:41.370 --> 00:05:43.320
but Hmm. I think it
does have something to do

93
00:05:43.320 --> 00:05:45.090
with why you do project
or other things in your

94
00:05:45.090 --> 00:05:51.120
spare time. That that would
explain a lot. Yes. But

95
00:05:51.120 --> 00:05:54.210
it's, you know, I started
basically just toying around with

96
00:05:54.210 --> 00:05:56.880
it. You know, I, I
didn't do much beyond that

97
00:05:57.320 --> 00:06:01.280
until I had moved to
Vermont in, I guess, 2012

98
00:06:01.280 --> 00:06:04.760
ish. And I heard about
a conference in New York solely

99
00:06:04.760 --> 00:06:07.250
on F sharp. It was
the skills matter, progressive F

100
00:06:07.250 --> 00:06:09.440
sharp tutorials. It was the
first year that we were

101
00:06:09.440 --> 00:06:11.600
running it. It was the
first all left sharp conference

102
00:06:11.600 --> 00:06:14.030
in the whole U S
and I thought, this sounds

103
00:06:14.030 --> 00:06:16.910
really cool. This is my
chance to really understand this

104
00:06:16.910 --> 00:06:18.590
technology. See if this is
something I really want to

105
00:06:18.590 --> 00:06:21.890
be involved in. And so
I bought a ticket. It

106
00:06:21.890 --> 00:06:23.930
was, I bought a super
early bird ticket. It was

107
00:06:23.930 --> 00:06:27.320
like 50 bucks at the
time and went down for

108
00:06:27.320 --> 00:06:30.740
the weekend and to this
conference. And they had two

109
00:06:30.740 --> 00:06:35.720
tracks, a beginner track of
it was all tutorials. And

110
00:06:35.720 --> 00:06:38.360
there was a beginner track
of, you know, I've never

111
00:06:38.390 --> 00:06:41.000
even looked at the language
and then an advanced track.

112
00:06:41.870 --> 00:06:43.340
And I looked at the
first day of the beginner

113
00:06:43.340 --> 00:06:47.300
track and it was man,
this guy, Chris Merinos had

114
00:06:47.300 --> 00:06:50.060
written a group of F
sharp koans. I know that

115
00:06:50.060 --> 00:06:52.520
Ruby has the same thing.
I don't know if C-sharp

116
00:06:52.520 --> 00:06:55.370
or other languages do, but
it's basically a huge set

117
00:06:55.370 --> 00:06:58.310
of failing tests that to
get you familiar with the

118
00:06:58.310 --> 00:07:00.620
syntax of a language, you
just basically go through and

119
00:07:00.650 --> 00:07:04.120
make work. Right. A Cohen
is like a Zen thing.

120
00:07:04.120 --> 00:07:07.000
It's a, it's a, a
story to go through in

121
00:07:07.000 --> 00:07:10.900
order to learn. Ah, okay.
Thank you. So they usually

122
00:07:10.900 --> 00:07:13.660
cuddle they're usually we think
of Zen koans and there's

123
00:07:13.660 --> 00:07:17.740
like, they're numbered Zen koans
they're parables. Okay. I have,

124
00:07:18.250 --> 00:07:21.250
I've wondered this for ages
and have not gotten around

125
00:07:21.250 --> 00:07:23.830
to actually looking it up.
Well, it's like, it's the

126
00:07:23.830 --> 00:07:25.630
motion that you go through
if you've ever done like

127
00:07:25.630 --> 00:07:28.060
martial arts. Like, if you
do like TaeKwonDo, you have

128
00:07:28.060 --> 00:07:31.330
to learn this form. So
We'll do that same thing

129
00:07:31.390 --> 00:07:34.420
over and over again, to
learn exactly the appropriate form.

130
00:07:34.540 --> 00:07:36.250
Yeah. Yeah. Except you do
it in F sharp or

131
00:07:36.250 --> 00:07:39.280
C-sharp and, and then you
do Ruby, Ruby koans or

132
00:07:39.280 --> 00:07:40.990
of sharp. So there's F
sharp koans and that's how

133
00:07:40.990 --> 00:07:43.630
you learn. And that's. Well,
that was what they were

134
00:07:43.630 --> 00:07:46.270
doing is one of the
things, the first things that

135
00:07:46.270 --> 00:07:48.760
day as the beginner group,
and I thought, well, I've

136
00:07:48.760 --> 00:07:51.010
already done those. So I
don't know that I'm advanced,

137
00:07:51.010 --> 00:07:52.690
but I'm going to go
sit in the advanced group

138
00:07:53.140 --> 00:07:55.690
to figure out, you know,
at least do something different.

139
00:07:56.470 --> 00:07:59.470
And the advanced group happened
to be a man named

140
00:07:59.470 --> 00:08:02.230
Keith Petacci, who was partnering
with Don Syme and they

141
00:08:02.230 --> 00:08:05.920
were talking about type providers.
And it was this totally

142
00:08:05.920 --> 00:08:08.440
brand new thing that year.
I don't think they were

143
00:08:08.440 --> 00:08:11.500
even officially out yet. It
was just these type provider

144
00:08:11.500 --> 00:08:14.410
things are coming. And we're
going to tell you how

145
00:08:14.410 --> 00:08:18.580
amazing they are. And so
what type providers actually are,

146
00:08:18.580 --> 00:08:22.300
are a, you know, a
way to access data of

147
00:08:22.300 --> 00:08:25.780
any sort. I think that
schema out on the internet,

148
00:08:26.680 --> 00:08:30.580
you can access SQL server.
There's one for CSV. There's,

149
00:08:33.010 --> 00:08:36.340
you know, many, many different
ones of these. I have

150
00:08:36.340 --> 00:08:38.500
a slide that shows like
40 different type providers that

151
00:08:38.500 --> 00:08:41.800
are in existence. Right. And
as they talked, I just

152
00:08:41.800 --> 00:08:44.500
thought, this is the coolest
thing I've even never heard

153
00:08:44.500 --> 00:08:48.580
about. I can't believe that
the whole world doesn't know

154
00:08:48.580 --> 00:08:51.970
that type providers exist and
why, you know, I need

155
00:08:51.970 --> 00:08:55.650
to make this happen. And
that was, that was sort

156
00:08:55.650 --> 00:08:58.950
of my defining moment was
listening to these two guys,

157
00:08:58.950 --> 00:09:02.420
talk about type providers Type
providers was like the feature.

158
00:09:02.420 --> 00:09:04.850
Like it was such an
attractive thing. You're like, this

159
00:09:04.850 --> 00:09:06.950
is where I need to
be. You found your tribe.

160
00:09:07.340 --> 00:09:12.020
Exactly. Exactly. Very cool. So
you find your tribe and

161
00:09:12.020 --> 00:09:15.320
then somehow you're, you start
moving into F sharp and

162
00:09:15.320 --> 00:09:16.790
you spend a couple of
years as an F sharp

163
00:09:16.790 --> 00:09:23.420
person, jet comes along, you
move to New Jersey, yada yada

164
00:09:23.420 --> 00:09:30.860
yada realtime pricing. Yes, exactly.
And F sharp. I hear

165
00:09:30.860 --> 00:09:33.260
about F sharp in the
context of finance a lot.

166
00:09:33.290 --> 00:09:38.120
Why is that? I think
if I understand the history

167
00:09:38.120 --> 00:09:43.070
correctly, it was billed as
a, you know, this is

168
00:09:43.070 --> 00:09:45.410
good for math and therefore
this is good for finance

169
00:09:45.410 --> 00:09:50.930
and science at the beginning.
And it does shine for

170
00:09:50.930 --> 00:09:54.500
those things, but it's not
like you can't do anything

171
00:09:54.500 --> 00:09:57.050
else with it. Right, right.
It's just, that's the thing

172
00:09:57.050 --> 00:09:59.300
that it's really, it's really
good at because like what

173
00:09:59.300 --> 00:10:02.240
you're doing with it, with
the dynamic pricing and algorithms,

174
00:10:02.270 --> 00:10:04.820
it's very algorithm focused, right.
And algorithms need to be

175
00:10:04.820 --> 00:10:07.730
provable and they needed to
be well expressed. Is it

176
00:10:07.730 --> 00:10:09.800
just easier to express things
like that and F sharp

177
00:10:09.800 --> 00:10:12.530
than it? Isn't C-sharp I
would say yes. I would

178
00:10:12.530 --> 00:10:15.440
say it's easier to express
many things. And to be

179
00:10:15.440 --> 00:10:18.980
fair, we started with our
pricing engine in C-sharp and

180
00:10:18.980 --> 00:10:22.160
then ended up actually moving
on from there, because it

181
00:10:22.160 --> 00:10:26.360
was so expressive. It, you
know, we had less code,

182
00:10:26.360 --> 00:10:28.580
fewer bugs, all of that
got yada, yada, that you

183
00:10:28.580 --> 00:10:31.250
hear all the time we
really found to be true.

184
00:10:31.550 --> 00:10:34.880
And we ended up moving,
basically everything that we can

185
00:10:34.880 --> 00:10:37.940
do, except for the actual,
you know, our front end,

186
00:10:37.940 --> 00:10:40.430
where we have some JavaScript,
we have some angular, you

187
00:10:40.430 --> 00:10:44.030
can't get away from that,
but literally everywhere else in

188
00:10:44.030 --> 00:10:48.280
our code is F sharp.
Wow. Okay. So the, the,

189
00:10:48.280 --> 00:10:51.710
the homepage, if I hit
jet.com, that's asp.net, or what

190
00:10:51.710 --> 00:10:57.110
is that running? It's not
going to be SP of

191
00:10:57.110 --> 00:11:02.270
that net. I know that
it's, it's using some angular,

192
00:11:02.270 --> 00:11:06.410
it's using some node actually.
Hmm. It seems like more

193
00:11:06.410 --> 00:11:10.100
and more startups are picking
hybrid solutions, like two, four

194
00:11:10.130 --> 00:11:13.100
for a startup to do
something. And just one technology

195
00:11:13.100 --> 00:11:16.580
now in 2015, just isn't
common anymore. Is it? I

196
00:11:16.580 --> 00:11:20.810
would totally agree with that.
We, we are not classified

197
00:11:20.810 --> 00:11:23.230
as either a Microsoft shop
or an opensource shop, and

198
00:11:23.230 --> 00:11:24.950
we like to blend as
much of everything as we

199
00:11:24.950 --> 00:11:26.870
can. Well, maybe not as
much of everything as we

200
00:11:26.870 --> 00:11:29.330
can get in, but, Well,
it sounds a little bit

201
00:11:29.330 --> 00:11:32.030
like stack overflow, like sometimes
people point to stack overflow

202
00:11:32.270 --> 00:11:34.220
as an example of a
good Microsoft startup, but I

203
00:11:34.220 --> 00:11:36.710
don't think that's fair because
they pick the technology that

204
00:11:36.710 --> 00:11:40.190
works and they've got red
heads and they've got a,

205
00:11:40.190 --> 00:11:43.280
you know, engine X around
there. They've got all sorts

206
00:11:43.280 --> 00:11:44.830
of stuff. And I assume
that you all are the

207
00:11:44.830 --> 00:11:48.080
same. So you picked F
sharp for the analytics because

208
00:11:48.080 --> 00:11:52.130
you felt that it was
the right decision. Yes. And

209
00:11:52.670 --> 00:11:54.980
then obviously as we moved
on, we picked it for

210
00:11:54.980 --> 00:11:57.580
our, you know, our microservices
and basically our entire backend.

211
00:11:57.900 --> 00:12:01.110
Okay. So the whole backend
is F sharp. Oh, absolutely.

212
00:12:02.070 --> 00:12:06.090
Everything except, you know, the
actual, you know, the JavaScript

213
00:12:06.090 --> 00:12:08.690
that's on the front end,
literally everything else is at

214
00:12:08.690 --> 00:12:12.510
sharp. So is, was that
a tough thing to sell

215
00:12:12.540 --> 00:12:15.840
because, you know, F sharp,
it doesn't have the, the,

216
00:12:15.940 --> 00:12:18.690
the brand recognition for lack
of a better word that

217
00:12:18.690 --> 00:12:21.090
C sharp is. So was
there some boss at some

218
00:12:21.090 --> 00:12:22.920
point who's like, I don't
know what this thing, what

219
00:12:22.920 --> 00:12:27.000
is, what are they getting
us into? Yes, actually. So

220
00:12:27.240 --> 00:12:30.360
I just recently found out
our, our CTO was at

221
00:12:30.420 --> 00:12:34.530
that same progress, sharp tutorials
in 2012, or whenever that

222
00:12:34.530 --> 00:12:38.790
was, and had, you know,
started hearing about F sharp

223
00:12:38.790 --> 00:12:40.860
at that same time and
thought, this is really cool

224
00:12:40.890 --> 00:12:44.190
and decided at that point
to build the pricing engine

225
00:12:44.260 --> 00:12:46.470
like that, that seems like
a good fit because all

226
00:12:46.470 --> 00:12:48.960
this finance and, and all
the science would be a

227
00:12:48.960 --> 00:12:53.100
perfect thing for, for F
sharp. And he hired a

228
00:12:53.140 --> 00:12:56.160
few devs to start working
on this. And we weren't

229
00:12:56.160 --> 00:12:57.900
sure if we wanted to
build the rest of the

230
00:12:57.900 --> 00:13:00.090
site, everything else in C
sharp or graphs or F

231
00:13:00.090 --> 00:13:04.890
sharp. So we actually had
two solutions to start. We

232
00:13:04.890 --> 00:13:08.790
were building them completely simultaneously
getting as many features in

233
00:13:08.790 --> 00:13:12.030
as we could, the very,
very early days of, of

234
00:13:12.060 --> 00:13:16.260
jet. And as we moved
further along, it, it just

235
00:13:16.260 --> 00:13:19.470
became clear that the F
sharp solution was, was working

236
00:13:19.860 --> 00:13:23.820
a lot better. It, as
new people were hired, it

237
00:13:23.820 --> 00:13:25.920
was easier for them to
step up and join in

238
00:13:25.920 --> 00:13:28.050
and make sense of the
F sharp solution, even as

239
00:13:28.050 --> 00:13:33.060
C sharp developers. Really? Yeah,
because it was, it was

240
00:13:33.060 --> 00:13:35.700
just that much cleaner. It
was. I mean, there was

241
00:13:35.700 --> 00:13:39.240
some syntechs to get over
and some ideas to form,

242
00:13:39.600 --> 00:13:44.760
but there were, there's a
great blog post by a

243
00:13:44.760 --> 00:13:48.060
man named Scott <inaudible>, who
does, and has a website

244
00:13:48.060 --> 00:13:50.430
called F sharp for fun
and profit. He shows a

245
00:13:50.430 --> 00:13:53.460
bunch of dependency, graphs of
different F sharp and C

246
00:13:53.460 --> 00:14:02.280
sharp projects. And he compares
specifically ticks back with, I

247
00:14:02.280 --> 00:14:07.290
don't recall the other one,
but one is the upshot

248
00:14:07.290 --> 00:14:10.740
project and what is a
very close equivalent C-sharp project.

249
00:14:11.520 --> 00:14:14.670
And the F short project
has maybe 30 or 40

250
00:14:14.670 --> 00:14:18.240
dependencies. It's, it's a very
small chart. Whereas the C-sharp

251
00:14:18.240 --> 00:14:22.320
one has about 200, maybe
300, maybe more. You can

252
00:14:22.320 --> 00:14:24.120
actually like, you have to
look really close on the

253
00:14:24.130 --> 00:14:30.330
slide to see all of
the dependencies. And it's, that

254
00:14:30.330 --> 00:14:33.840
was sort of what we
had found when, when we're

255
00:14:33.840 --> 00:14:36.720
looking at the, the F
sharp solution, the code is

256
00:14:36.720 --> 00:14:39.810
that much more powerful that
there's, and there is less

257
00:14:39.810 --> 00:14:41.940
of it that it's easier
to keep all of that

258
00:14:41.940 --> 00:14:44.940
in your brain at once.
Ah, someone was telling me

259
00:14:44.940 --> 00:14:47.940
just a couple of days
ago that it was actually

260
00:14:47.940 --> 00:14:50.130
a reporter who was doing
an article and wanted to

261
00:14:50.130 --> 00:14:54.290
know if it's true, that
programmers who can keep the

262
00:14:54.290 --> 00:14:57.200
whole program in their brain
at once are better than

263
00:14:57.200 --> 00:15:00.290
programmers who can't. And I
thought that was a, I'd

264
00:15:00.290 --> 00:15:02.000
never heard that before. I
thought that was unusual. And

265
00:15:02.000 --> 00:15:04.160
then I started thinking about
it and I thought, well,

266
00:15:04.160 --> 00:15:06.590
this might be why we
like to have our functions,

267
00:15:06.830 --> 00:15:09.860
not scroll, right? Like if
you have to scroll, it's

268
00:15:09.860 --> 00:15:11.180
too much, cause you need
to hold it in your

269
00:15:11.180 --> 00:15:14.180
brain at once. And you're
saying that like, let me

270
00:15:14.180 --> 00:15:15.800
give you this example and
tell me if this works,

271
00:15:16.010 --> 00:15:20.720
we have 140 characters on
Twitter, but the Chinese get

272
00:15:20.720 --> 00:15:23.000
140 glyphs. They get to
say way more. They can

273
00:15:23.000 --> 00:15:26.210
like write a book in
a tweet while we're struggling

274
00:15:26.210 --> 00:15:28.730
to make things fit. Is
F sharp kind of like

275
00:15:28.730 --> 00:15:34.750
that. That's actually not a
bad analogy. It's it is

276
00:15:34.750 --> 00:15:38.080
sort of, you know, where
it's, I guess, because that,

277
00:15:38.230 --> 00:15:41.200
you know, one function can
hold that much more information

278
00:15:41.200 --> 00:15:46.750
in, in a smaller set
and being able to, so

279
00:15:46.750 --> 00:15:51.280
here's another good example of
the code. Just actually being

280
00:15:51.280 --> 00:15:55.960
smaller. If you think about
a very standard object hierarchy,

281
00:15:55.960 --> 00:15:57.970
you might have your base
class and two or three

282
00:15:57.970 --> 00:16:01.660
classes that would inherit from
it. Okay. And maybe some

283
00:16:01.660 --> 00:16:06.210
of them take a few
different pieces of information. The,

284
00:16:06.210 --> 00:16:09.130
the example that I usually
use is a transportation class,

285
00:16:09.340 --> 00:16:11.740
along with like a bicycle
class and a car class

286
00:16:13.480 --> 00:16:18.130
in F sharp, we have
in four different lines of

287
00:16:18.130 --> 00:16:25.570
code. So, you know, heavy
use of that feature cuts

288
00:16:25.570 --> 00:16:28.330
down massively on just sheer
numbers of files. And that

289
00:16:28.330 --> 00:16:30.220
cuts down on being able
to, you know, having to

290
00:16:30.220 --> 00:16:33.490
tab in, you know, look
at 10 different things when

291
00:16:33.490 --> 00:16:38.320
you're trying to figure out
one function. It also visually

292
00:16:38.380 --> 00:16:43.330
looks cleaner, I think because
of the lack of curly

293
00:16:43.330 --> 00:16:46.090
braces and princesses, like if
you just kind of squint

294
00:16:46.090 --> 00:16:48.370
your eyes and look at
it, there's less going on.

295
00:16:49.780 --> 00:16:54.160
Yes. That and F sharp
has very powerful type inference.

296
00:16:54.190 --> 00:16:57.280
So that types aren't all
listed out as well. And

297
00:16:57.280 --> 00:17:00.610
especially some of the more
complicated ones when you're adding

298
00:17:00.670 --> 00:17:03.520
funk types and they have,
you know, three or four

299
00:17:03.520 --> 00:17:06.220
included things in there that
can be almost a whole

300
00:17:06.220 --> 00:17:10.840
line of code just to,
to list the type, Like

301
00:17:10.840 --> 00:17:12.850
the only thing that is
repeated a lot, like it's

302
00:17:12.850 --> 00:17:16.750
an extremely dry language, a
dry means. Don't repeat yourself

303
00:17:16.750 --> 00:17:18.640
for people who may not
know that the only thing

304
00:17:18.640 --> 00:17:22.120
that's repeated always is the
word let like it's everywhere.

305
00:17:22.480 --> 00:17:24.820
Yeah. Like if they could
get rid of that, they

306
00:17:24.830 --> 00:17:31.210
would be really, really terse.
Hey folks, I wanted to

307
00:17:31.210 --> 00:17:34.000
take a moment to tell
you about Reagan and their

308
00:17:34.000 --> 00:17:37.090
new product called pulse. Reagan
is an error and crash

309
00:17:37.090 --> 00:17:41.380
reporting software provider and their
new product pulse to realtime

310
00:17:41.410 --> 00:17:44.710
user monitoring product. It gives
you performance data and user

311
00:17:44.710 --> 00:17:48.880
insights. Lets you understand exactly
what's happening when users interact

312
00:17:48.880 --> 00:17:52.650
with software. So you're never
left guessing. Reagan provides you

313
00:17:52.650 --> 00:17:55.320
with the answers to your
performance questions and they've found

314
00:17:55.320 --> 00:17:59.550
over 10 billion that's billion with
a B bugs and customer

315
00:17:59.550 --> 00:18:02.880
apps with their crash reporting
product. And now Regan will

316
00:18:03.030 --> 00:18:06.240
help you understand application quality.
Like no one else. Over

317
00:18:06.240 --> 00:18:10.020
30,000 developers worldwide, can't be
wrong. I use Reagan and

318
00:18:10.020 --> 00:18:12.210
all the time and I
enjoy it very much. You

319
00:18:12.210 --> 00:18:14.760
can try it out today
with a no risk 30

320
00:18:14.760 --> 00:18:18.930
day free trial start improving
your software quality immediately try

321
00:18:18.930 --> 00:18:28.770
Reagan for free today@reagan.io. Now
what about these? I'm looking

322
00:18:28.770 --> 00:18:31.290
at some F sharp code
right now and I'm seeing

323
00:18:31.290 --> 00:18:34.020
this thing where it's like,
let something equals something and

324
00:18:34.020 --> 00:18:38.960
then there's angle bracket, bang
and angle bracket star it's

325
00:18:38.960 --> 00:18:40.620
it looks like a generic
with a bang in the

326
00:18:40.620 --> 00:18:43.190
middle. Do you see that?
Yeah, I do. I have

327
00:18:43.250 --> 00:18:47.300
literally no idea that might
be a custom operator. Oh,

328
00:18:47.300 --> 00:18:49.520
it would be my first.
This is a really interesting

329
00:18:49.520 --> 00:18:52.230
point. Then you it's almost
like I'm like, you know

330
00:18:52.230 --> 00:18:56.480
how people like to use
Ruby for DSLs or domain

331
00:18:56.480 --> 00:18:59.120
specific languages. Do people do
similar things in F sharp.

332
00:18:59.150 --> 00:19:02.300
They make their own languages
Very much very that that

333
00:19:02.300 --> 00:19:05.540
is a huge use of,
of F sharp. Interesting. So

334
00:19:05.840 --> 00:19:08.390
when I'm reading F sharp,
how is it hard sometimes

335
00:19:08.390 --> 00:19:10.010
like right now I just
showed you some code and

336
00:19:10.010 --> 00:19:12.200
you're like, I don't know
what that is. Someone has

337
00:19:12.200 --> 00:19:18.110
made their own, their own
thing. It can be. I

338
00:19:18.110 --> 00:19:22.010
have definitely seen, seen posts
on, you know, trying not

339
00:19:22.010 --> 00:19:25.460
to overuse custom operators. There
is a very specific time

340
00:19:25.460 --> 00:19:29.690
and place for them. A
lot of the DSLs that

341
00:19:29.690 --> 00:19:33.650
I've seen will not create
are better DSLs that I've

342
00:19:33.650 --> 00:19:36.500
seen will not create their
own actual custom operators, but

343
00:19:36.500 --> 00:19:39.410
use, you know, create a
word that would do the

344
00:19:39.410 --> 00:19:43.340
same thing. Instead, I'm looking
here and it says that

345
00:19:43.340 --> 00:19:48.590
this might be an applicant
funk tour. So there are

346
00:19:48.590 --> 00:19:51.650
corners apparently in F sharp
that are really like powerful,

347
00:19:51.650 --> 00:19:59.120
but also obscure. Yes. And
I, That was the sigh

348
00:19:59.120 --> 00:20:01.250
of a person who has
not explored all corners of

349
00:20:01.250 --> 00:20:02.900
the language. I feel like
that when I get into

350
00:20:02.900 --> 00:20:07.640
Lincoln C-sharp Yeah, that was
that. That was also F

351
00:20:07.640 --> 00:20:13.850
sharp has such a reputation
for being this scary, functional

352
00:20:13.850 --> 00:20:17.090
language that dues complicated. Yeah,
exactly. Let's talk about that.

353
00:20:17.090 --> 00:20:18.830
I mean, I just said
applicative funk tour for the

354
00:20:18.830 --> 00:20:21.200
first time in my life.
And I've been doing this

355
00:20:21.200 --> 00:20:24.560
for 25 years and I
have a degree that's really

356
00:20:24.560 --> 00:20:27.350
challenging. Like, how do you,
is, is this why F

357
00:20:27.350 --> 00:20:31.970
sharp isn't taking off from
a, a populist perspective, like

358
00:20:31.970 --> 00:20:34.700
the regular Joe and Jane
developer out there don't know

359
00:20:34.700 --> 00:20:38.870
what identity composition, a homo
morphism and interchange are. And

360
00:20:38.870 --> 00:20:42.200
that's, that's something that, that
upsets me. Well, it just,

361
00:20:42.620 --> 00:20:45.700
it, this is one of
the things that, yeah, that,

362
00:20:45.700 --> 00:20:49.000
that frustrates me because don't
have to have any concept

363
00:20:49.000 --> 00:20:51.160
of what any of these
things are to actually use

364
00:20:51.160 --> 00:20:53.680
the language. It's like being
able to use the apps

365
00:20:53.680 --> 00:20:55.390
on your phone. You don't
need to know how to

366
00:20:55.390 --> 00:21:01.210
write one to do any
of this. And people will,

367
00:21:01.350 --> 00:21:03.160
will start to learn about
these things, you know, about

368
00:21:03.160 --> 00:21:05.680
monads and about factors. And
think this is really cool

369
00:21:05.680 --> 00:21:08.950
and want to share this,
right? You sometimes end up

370
00:21:08.950 --> 00:21:11.770
getting the impression that if
you don't know this, you

371
00:21:11.800 --> 00:21:17.100
can't continue on and True.
I mean, I'm looking at

372
00:21:17.100 --> 00:21:19.500
the blog post here, right?
And within the first two

373
00:21:19.500 --> 00:21:23.130
sentences, the blog post, it
says readers of this blog

374
00:21:23.160 --> 00:21:25.860
should have at least a
passing familiarity with applicative funk

375
00:21:25.860 --> 00:21:28.320
tours. And then I click
on that. And then I,

376
00:21:28.340 --> 00:21:30.660
this is literally a sentence
here. I have to share

377
00:21:30.660 --> 00:21:34.140
this with you. This module
describes a structure intermediate between

378
00:21:34.140 --> 00:21:37.520
a funk Turner monad, but
technically it's strong lax mono

379
00:21:37.530 --> 00:21:40.650
idle funk tour. Right. At
that point, I'm like, okay,

380
00:21:40.650 --> 00:21:42.480
where's the data grid. I'm
going to start dragging it.

381
00:21:43.170 --> 00:21:48.450
Yeah. And that's, it's absolutely
not necessary. So talk to

382
00:21:48.450 --> 00:21:50.550
me about that. Cause you,
you also train people in

383
00:21:50.550 --> 00:21:54.840
F sharp. Yeah. So, well,
my first, I guess, counterpoint

384
00:21:54.840 --> 00:21:58.590
to that is there's a
member of the F sharp

385
00:21:58.590 --> 00:22:01.470
community, whose name is Sean.
He's a fairly new member

386
00:22:01.470 --> 00:22:03.510
of the F sharp community,
but he gave a lightning

387
00:22:03.510 --> 00:22:05.880
talk it at NDC Oslo
this past year. And I

388
00:22:05.880 --> 00:22:09.090
think he spoke at one
of the DVDs in the

389
00:22:09.090 --> 00:22:13.770
UK. And Sean is sharp.
He is knowledgeable on F

390
00:22:13.770 --> 00:22:17.370
sharp is speaking on like
three D objects and web

391
00:22:17.370 --> 00:22:22.020
GL and F sharp. And
I don't, I have, we'll

392
00:22:22.020 --> 00:22:24.210
be honest. I have not
watched his lightning talk yet,

393
00:22:24.510 --> 00:22:27.270
but I don't even understand
what that means. Like I

394
00:22:27.270 --> 00:22:31.590
know it's about three D
objects, but that is, you

395
00:22:31.590 --> 00:22:33.660
know, this eight year old
has figured out something more

396
00:22:33.660 --> 00:22:38.190
complicated than, Well, I saw
that I, yes, this is

397
00:22:38.190 --> 00:22:41.850
someone's son. I forgot the
gentleman's name. Yes, absolutely. Yeah.

398
00:22:42.420 --> 00:22:44.610
And you know, if an
eight year old can do

399
00:22:44.610 --> 00:22:49.080
this, then there's no reason
that anyone can't jump in

400
00:22:49.080 --> 00:22:52.530
and figure it out, Perhaps
it's because functional languages like

401
00:22:52.530 --> 00:22:56.550
Haskell were, were were, were
for people from a math

402
00:22:56.550 --> 00:22:59.340
environment. And they were taught
in schools that it's done

403
00:22:59.340 --> 00:23:03.450
in such a academic way.
Maybe there's an opportunity for

404
00:23:03.450 --> 00:23:07.140
F sharp to become the
people's language. If it's presented

405
00:23:07.140 --> 00:23:10.500
in a way that's more
accessible, I would love that.

406
00:23:10.680 --> 00:23:14.370
And I think that's a
totally reasonable thing based on

407
00:23:14.370 --> 00:23:18.180
my use. And the times
that I have trained people

408
00:23:18.180 --> 00:23:21.030
in F sharp <inaudible>, I'm
looking let's translate it. Let's

409
00:23:21.030 --> 00:23:27.390
change topics a little bit.
I'm looking@theblogpostthatwasdoneonjet.com called realtime pricing,

410
00:23:27.390 --> 00:23:32.520
real time advertising and in
it, Louie, because who is

411
00:23:32.750 --> 00:23:35.700
another employee at jet said
that it is safe to

412
00:23:35.700 --> 00:23:38.130
say, we are pushing the.net
stack with F sharp to

413
00:23:38.130 --> 00:23:41.700
places it's never been before.
People at Google are telling

414
00:23:41.700 --> 00:23:43.530
us, they've never seen this
kind of volume. What are

415
00:23:43.530 --> 00:23:47.030
you doing that is pushing
amounts of volume and taking.net

416
00:23:47.030 --> 00:23:50.020
in new places? We are.
So we have an event

417
00:23:50.020 --> 00:23:57.820
driven architecture. We are we're
streaming zillions of events constantly

418
00:23:57.820 --> 00:24:04.960
all day long and managing
all of that. And we're

419
00:24:04.960 --> 00:24:07.420
pushing not just Google, but
we're pushing Azure to its

420
00:24:07.420 --> 00:24:10.900
limits as well. We have,
we found several different issues

421
00:24:10.900 --> 00:24:12.880
that we've had had to
have the team come in

422
00:24:12.880 --> 00:24:16.480
and fix it. I would
say that's definitely true for

423
00:24:16.480 --> 00:24:18.070
both things. I know the
event driven is part of

424
00:24:18.070 --> 00:24:24.340
it. There's, I mean, we've
been live a month now

425
00:24:24.640 --> 00:24:29.200
and we have, I would
say more data than most

426
00:24:29.200 --> 00:24:32.020
of the other places certainly
I have ever worked. So

427
00:24:32.020 --> 00:24:34.390
it seems like, well, from
the point of view of

428
00:24:34.390 --> 00:24:37.150
myself and my wife, you're
going to send us, you

429
00:24:37.150 --> 00:24:41.350
know, soaps and things on
the backend. This is a

430
00:24:41.350 --> 00:24:45.100
science company, and you're using
analytics to, to save us

431
00:24:45.100 --> 00:24:48.700
money, Our CTO. And even
our CEO has said that

432
00:24:48.700 --> 00:24:52.780
we are a technology company
at our heart. Hmm. And

433
00:24:52.780 --> 00:24:55.870
this algorithm or these algorithms,
they're all tuned to find

434
00:24:55.870 --> 00:25:00.160
these, these efficiencies and inefficiencies
in the supply chain. And

435
00:25:00.430 --> 00:25:02.560
now if I understand correctly
though, this, this means that

436
00:25:02.560 --> 00:25:05.980
prices of your things change.
And that's the essence of

437
00:25:05.980 --> 00:25:07.660
what all the code is
F sharp is doing is

438
00:25:07.660 --> 00:25:10.780
it's noticing this and changing
prices. And then is it

439
00:25:10.780 --> 00:25:13.990
true that you have to
tell Google that the price

440
00:25:13.990 --> 00:25:20.140
on facial cleanser just changed
at jet? Yes. Yes, it

441
00:25:20.140 --> 00:25:22.840
is true. We need to,
and because these prices are

442
00:25:22.840 --> 00:25:25.360
changing so frequently, we need
to tell Google this a

443
00:25:25.360 --> 00:25:28.960
lot. And I would guess
that their backend is probably

444
00:25:28.960 --> 00:25:30.880
not meant to get that
kind of information from you

445
00:25:30.880 --> 00:25:34.240
as regularly as you would
want to send it, Not

446
00:25:34.240 --> 00:25:36.970
at all. They are. They
were quite surprised at the

447
00:25:36.970 --> 00:25:41.440
volume with which we're pushing
this, this information over. I

448
00:25:41.440 --> 00:25:43.780
would think that you're almost
like DDoSing them with your

449
00:25:43.780 --> 00:25:47.590
price changes. There were some
jokes about that on Twitter

450
00:25:47.590 --> 00:25:51.280
after the, after Louis posted
this, this article. And I

451
00:25:52.420 --> 00:25:58.900
know that's not totally true,
but it's probably compared to

452
00:25:58.900 --> 00:26:02.230
what they're used to. It
seems like in order to

453
00:26:02.230 --> 00:26:04.030
push this kind of traffic,
you're going to need to

454
00:26:04.030 --> 00:26:06.160
not just scale up, but
there's going to be probably

455
00:26:06.160 --> 00:26:09.190
a level of parallelism that
you don't usually see outside

456
00:26:09.190 --> 00:26:12.850
of languages. Like Erlang is
F sharp, particularly well handled

457
00:26:12.850 --> 00:26:16.720
for well and well designed
for parallelism F sharp definitely

458
00:26:16.720 --> 00:26:19.720
is because of the functional
nature of it because of

459
00:26:19.720 --> 00:26:25.210
the immutability first it's, it's
very easy to just, you

460
00:26:25.210 --> 00:26:30.130
know, spontaneously parallelize, a lot
of things, you know, if

461
00:26:30.130 --> 00:26:35.080
you're thinking about a, a
standard functional function, which is,

462
00:26:35.170 --> 00:26:39.490
you know, input in a
transformation input out that there's

463
00:26:39.490 --> 00:26:42.520
no state changes there, there's
nothing, you know, no side

464
00:26:42.520 --> 00:26:47.250
effects. There's an ability to
just paralyze a lot of

465
00:26:47.250 --> 00:26:48.810
this. I was talking to
one of the engineers this

466
00:26:48.810 --> 00:26:54.090
morning about spinning up, you
know, a thousand different machines

467
00:26:54.150 --> 00:26:59.760
to be able to rework
our event store in some

468
00:26:59.760 --> 00:27:02.280
way. He's like, you know,
we can, we can redo

469
00:27:02.280 --> 00:27:05.640
this whole thing in 10
minutes for like 20 bucks

470
00:27:05.640 --> 00:27:09.420
on Azure. If we take
a thousand machines and that's,

471
00:27:10.080 --> 00:27:14.340
that's something that's somewhat easy
for us to do because

472
00:27:14.340 --> 00:27:17.480
of the way we architected
everything You have your own

473
00:27:17.480 --> 00:27:20.270
machines. Is there like a
room somewhere full of real

474
00:27:20.270 --> 00:27:22.040
hardware for you to test
on? Are you, do you

475
00:27:22.040 --> 00:27:26.000
just all spin up Azure
when you need it? There

476
00:27:26.000 --> 00:27:28.280
may be some teams that
have their own actual hardware,

477
00:27:28.490 --> 00:27:30.890
as far as I know
it is all virtual and

478
00:27:30.890 --> 00:27:33.230
it's all on Azure, Because
see, that's really interesting to

479
00:27:33.230 --> 00:27:36.260
me forgetting about whether it's
Azure or Amazon, the idea

480
00:27:36.260 --> 00:27:40.310
that startups can be made
now where the it department

481
00:27:40.370 --> 00:27:43.580
either doesn't exist or manages
dev ops in the cloud.

482
00:27:43.640 --> 00:27:45.800
Like, I'm sure your mail
is not running on a

483
00:27:45.800 --> 00:27:49.250
mail server under someone's desk.
It's running, you know, in

484
00:27:49.430 --> 00:27:52.850
Gmail or office three 65.
Right? So for the most

485
00:27:52.850 --> 00:27:56.120
part, other than the developers'
machines, there's not much else

486
00:27:56.120 --> 00:27:59.180
that you would need from
an infrastructure perspective. And that

487
00:27:59.180 --> 00:28:01.430
allows you to be very
agile and change your entire

488
00:28:01.430 --> 00:28:06.800
architecture whenever you feel Very
much. Yes. So you're a

489
00:28:06.800 --> 00:28:12.830
month in, are you having
major architectural plans already? Yes

490
00:28:12.830 --> 00:28:16.490
and no. We've been so
happy and so feel so

491
00:28:16.490 --> 00:28:20.750
successful with our current architecture.
Like, for example, just on,

492
00:28:20.750 --> 00:28:24.830
on lunch day, we did
a, you know, a 10

493
00:28:24.830 --> 00:28:28.610
times volume load and architecture
didn't even blink. Like we

494
00:28:28.610 --> 00:28:32.840
had no issues, it was
fine. It was, you know,

495
00:28:32.850 --> 00:28:35.060
perhaps maxing out at, at
where we could have been.

496
00:28:35.390 --> 00:28:37.760
But, you know, that was
a 10 X jump over

497
00:28:37.760 --> 00:28:41.390
where we had been the
day before and not an

498
00:28:41.390 --> 00:28:45.290
issue at all. So we
thought that was awesome enough

499
00:28:45.320 --> 00:28:48.170
that, you know, we, we
have some plans for, you

500
00:28:48.170 --> 00:28:50.300
know, we want to rework
these things over here. We

501
00:28:50.300 --> 00:28:54.230
want to change this bit
over here, but the fundamentals

502
00:28:54.230 --> 00:28:57.320
of our architecture, I think
we all think are pretty

503
00:28:57.320 --> 00:29:00.860
awesome. At this point, I
mentioned that you use microservices

504
00:29:00.860 --> 00:29:04.550
and the microservices are written
in F sharp, traditionally 15,

505
00:29:04.550 --> 00:29:07.310
20 years ago, we talk
about like three tier architecture

506
00:29:07.310 --> 00:29:09.560
and you can scale up
in places and scale out

507
00:29:09.560 --> 00:29:12.920
in places. But when you
do microservices, there's probably, I

508
00:29:12.920 --> 00:29:16.100
would say dozens of tiers
or layers that can be

509
00:29:16.100 --> 00:29:21.770
scaled independently. Is that right?
Yes. But sufficiently right. It

510
00:29:21.770 --> 00:29:28.160
makes it more make it
more correctly. Right? So the

511
00:29:28.160 --> 00:29:33.500
way we think about microservices
is literally to stop and

512
00:29:33.500 --> 00:29:37.420
think about a service as
an application of the, the

513
00:29:37.420 --> 00:29:41.770
single responsibility principle. Like there
should be one and only

514
00:29:41.770 --> 00:29:47.560
one function of this microservice.
Maybe not actually one function

515
00:29:47.560 --> 00:29:51.220
in a programming sense, but
one fun one. Yes, exactly.

516
00:29:53.560 --> 00:29:57.460
And you can scale that
individual service out if you

517
00:29:57.460 --> 00:30:02.650
need to, or you know,
or not. And, you know,

518
00:30:02.650 --> 00:30:04.690
you can see, you can
split a service into two

519
00:30:04.730 --> 00:30:07.930
and create more. It ends
up in my mind, it

520
00:30:07.930 --> 00:30:12.160
sort of looks like maybe
an Erling installation where, you

521
00:30:12.160 --> 00:30:14.080
know, messages are just sort
of all over the place

522
00:30:14.470 --> 00:30:18.730
randomly. Like, like you might
look at a phone network,

523
00:30:19.720 --> 00:30:22.750
not the backend network, but
like point to point cell

524
00:30:22.750 --> 00:30:25.750
phone calls are just, you
know, what that might look

525
00:30:25.750 --> 00:30:28.540
like over the course of,
you know, a state or

526
00:30:28.540 --> 00:30:31.420
a County. And I feel
like that's what a good

527
00:30:31.420 --> 00:30:36.070
microservice installation looks like, which
is shitty to me, but

528
00:30:36.670 --> 00:30:38.580
sorry. Oh, that's okay. I'm
trying to get my head

529
00:30:38.580 --> 00:30:41.550
around this too. And this
is really interesting. Do microservices

530
00:30:41.550 --> 00:30:44.670
require a call on the
network? Like, I think people

531
00:30:44.670 --> 00:30:47.910
tease microservices a lot because
they say, you know, my

532
00:30:47.910 --> 00:30:50.910
in-process calls didn't have enough
latency, so I've switched to

533
00:30:50.910 --> 00:30:54.690
a microservices architecture and they
always say, well, like, you

534
00:30:54.690 --> 00:30:56.550
know, you've got all the
benefits of just making a

535
00:30:56.550 --> 00:30:59.280
function call except with all
of the overhead of HTTP.

536
00:31:00.390 --> 00:31:03.360
But do you, do you
call these over HTTP, like

537
00:31:03.360 --> 00:31:06.180
little restful microservices? Or are
they doing over your pubsub

538
00:31:06.210 --> 00:31:09.360
or over your venting Backbone?
Yes. The second one we

539
00:31:09.360 --> 00:31:14.490
are doing, basically almost everything
is event driven. So we

540
00:31:14.490 --> 00:31:17.880
are the microservices less call
each other, then we'll call

541
00:31:17.880 --> 00:31:23.130
into event store or right
to event store. It's like,

542
00:31:23.320 --> 00:31:26.040
are people listening on cues
and listening for events and

543
00:31:26.040 --> 00:31:28.290
then jumping on them as
opposed to being called and

544
00:31:28.290 --> 00:31:33.300
an RPC? Yes, exactly. So
where, you know, microservice will

545
00:31:33.300 --> 00:31:37.500
listen to a queue and
handle the events from that

546
00:31:37.500 --> 00:31:41.910
queue, or, and when it's
finished, maybe pass that on,

547
00:31:42.000 --> 00:31:47.280
pass that information onto another
service, or maybe there's a

548
00:31:47.280 --> 00:31:49.800
side effect and it writes
down to our SQL server,

549
00:31:50.160 --> 00:31:54.120
or, you know, maybe it
will write back directly back

550
00:31:54.120 --> 00:31:56.070
up to events, or maybe
it'll just process something and

551
00:31:56.070 --> 00:31:59.460
write back to event store.
And all of this can

552
00:31:59.460 --> 00:32:02.610
be individually scaled because like
you say, you're listening on

553
00:32:02.610 --> 00:32:05.880
a queue, the queue depth
gets too long, make the

554
00:32:05.880 --> 00:32:13.230
worker Exactly. Yeah. If you're
finding that one is insufficient,

555
00:32:13.230 --> 00:32:16.050
you know, suddenly you can
have 10 for the next

556
00:32:16.050 --> 00:32:18.750
20 minutes, get through everything
and then scale back down.

557
00:32:19.770 --> 00:32:21.060
I feel like I'm going
to need another half an

558
00:32:21.060 --> 00:32:22.500
hour with you to really
get my head around this.

559
00:32:22.500 --> 00:32:24.210
But the last question I
wanted to ask was that

560
00:32:24.210 --> 00:32:28.830
you've got F sharp as
your primary language. You've got

561
00:32:29.010 --> 00:32:31.740
a whole company full of
people doing F sharp. I'm

562
00:32:31.740 --> 00:32:34.350
going to guess in New Jersey,
you're not finding as many

563
00:32:34.350 --> 00:32:36.810
F sharp developers as you
are C sharp developers. So

564
00:32:37.170 --> 00:32:39.050
do you hire C sharp
developers and how do you

565
00:32:39.050 --> 00:32:42.140
get them on board? That
is actually one of the

566
00:32:42.140 --> 00:32:44.810
functions of my job. We
absolutely do hire C sharp

567
00:32:44.810 --> 00:32:49.670
developers, and we are very
much hiring if anyone wants

568
00:32:49.670 --> 00:32:54.170
to send in applications. But
one of the functions of

569
00:32:54.170 --> 00:32:56.660
my job is actually to
provide training as everyone on

570
00:32:56.660 --> 00:33:01.550
boards. So we have a
currently two to three classes.

571
00:33:01.550 --> 00:33:04.040
We have some F sharp
classes I'm working on a

572
00:33:04.040 --> 00:33:07.250
microservice class right now, just
to make sure that everyone

573
00:33:07.250 --> 00:33:10.190
is, is up to speed
with how jet handles these

574
00:33:10.190 --> 00:33:13.000
things. That's cool. And where
would is your a career

575
00:33:13.000 --> 00:33:17.950
site? Where would someone go
to talk to jet@thebottomofjet.com? There

576
00:33:17.950 --> 00:33:20.920
is a, a link to
working with us. These links

577
00:33:20.920 --> 00:33:25.210
are also on the blog,
which is tech group.jet.com. They

578
00:33:25.210 --> 00:33:27.940
should also would also be
welcome to email our recruiter,

579
00:33:27.940 --> 00:33:32.320
who is Aimee a I
M e@jet.com. Very cool. Well,

580
00:33:32.320 --> 00:33:35.140
thanks so much for talking
with me today and for

581
00:33:35.350 --> 00:33:38.200
putting up with my silly
questions, cause I'm still learning

582
00:33:38.200 --> 00:33:40.720
the space myself. Not at
all. This is a ton

583
00:33:40.720 --> 00:33:43.780
of fun. This has been
another episode of Hansel minutes,

584
00:33:43.780 --> 00:33:45.220
and we'll see you again
next week.

