WEBVTT FILE

1
00:00:12.050 --> 00:00:16.880
From Hanselman it's dot com.
It's Hanselman. It's a weekly

2
00:00:16.880 --> 00:00:21.050
discussion with web developer and
technologist Scott Hanselman hosted by

3
00:00:21.050 --> 00:00:25.850
Carl Franklin. And this is Lawrence Ryan
announcing show number one 19

4
00:00:25.910 --> 00:00:31.310
recorded live Wednesday, June 18,
2008. Support for Hanselman it's

5
00:00:31.310 --> 00:00:35.660
as provided by Tellerik already
controls the most comprehensive suite

6
00:00:35.660 --> 00:00:44.240
of components for windows forms
and asp.net web applications online@wwwdottelerik.com

7
00:00:45.560 --> 00:00:48.620
and by the code better
blog network, delivering tried and

8
00:00:48.620 --> 00:00:51.890
true solutions to real world
problems for building better software

9
00:00:52.400 --> 00:00:59.390
online@covid.com. Support is also provided
by.net developers journal. The world's

10
00:00:59.420 --> 00:01:05.360
leading.net developer magazine online at
www dot <inaudible> dot com.

11
00:01:06.500 --> 00:01:09.650
In this episode, Scott talks
with scrum creator and founder

12
00:01:09.650 --> 00:01:15.950
of the agile Alliance, Ken
Schwaber. Hi, this is Scott

13
00:01:15.950 --> 00:01:17.930
Hanselman and, and it's just
another episode of Hansel minutes.

14
00:01:17.930 --> 00:01:20.600
And I'm sitting here in
Oslo, Norway with Ken Schwaber,

15
00:01:20.610 --> 00:01:24.020
the co-inventor of scrub founder
of the agile Alliance and

16
00:01:24.050 --> 00:01:27.620
all around agile advocate. We
were lucky enough to be

17
00:01:27.620 --> 00:01:29.540
on an agile panel this
morning with a number of

18
00:01:29.540 --> 00:01:31.340
agile luminaries, but I'm sitting
down here with Ken and

19
00:01:31.340 --> 00:01:35.390
we're going to talk about
agile agility software process. But

20
00:01:35.690 --> 00:01:37.310
you had said, sir, that
you thought that one of

21
00:01:37.310 --> 00:01:39.140
the things that needed to
be talked about was what

22
00:01:39.140 --> 00:01:41.840
is done. Yes. Which was
surprising to me that that

23
00:01:41.840 --> 00:01:43.490
was what she thought was
the most interesting thing we

24
00:01:43.490 --> 00:01:45.560
should talk about. What is,
what is the definition of

25
00:01:45.560 --> 00:01:49.220
done? Well, Don is, is
a very simple word. And

26
00:01:49.280 --> 00:01:51.770
bill Clinton started this with
simple words. When he talked

27
00:01:51.770 --> 00:01:58.370
about his, during his presidency,
Don is, is something where

28
00:01:58.370 --> 00:02:00.140
if I come into a
company and they say, Oh,

29
00:02:00.140 --> 00:02:04.850
we're using scrum. It's a
smell for me about whether

30
00:02:04.850 --> 00:02:08.030
they're using scrum or not.
So if I turn to

31
00:02:08.030 --> 00:02:12.500
the person, who's a customer
or even the team, and

32
00:02:12.500 --> 00:02:15.830
I say, what is your
definition of done? And they

33
00:02:15.830 --> 00:02:18.890
give me kind of a
blank. Look to me, this

34
00:02:19.150 --> 00:02:21.440
is a smell that they
haven't addressed. One of the

35
00:02:21.440 --> 00:02:25.850
key issues in scrum. And
that is when they select

36
00:02:25.850 --> 00:02:29.780
some items that they are
going to do for a

37
00:02:29.780 --> 00:02:33.800
sprint that is some items,
some requirements and product backlog

38
00:02:33.830 --> 00:02:36.020
items, some stories that they've
said that they will do

39
00:02:36.020 --> 00:02:39.320
for the customer during an
iteration, which we call a

40
00:02:39.320 --> 00:02:44.270
sprint and they don't know
what done or do is

41
00:02:44.300 --> 00:02:47.000
this certainly raises a question
to me about how they

42
00:02:47.000 --> 00:02:50.930
know what they're doing, because
if they don't know what

43
00:02:51.230 --> 00:02:55.220
done is that, is, is
it coded? Is it unit

44
00:02:55.220 --> 00:02:58.850
tested after it's been coded?
Is it is maybe even

45
00:02:59.080 --> 00:03:03.310
refactor. Does it include a
design review, a code review?

46
00:03:03.310 --> 00:03:06.400
Does it include performance testing?
Does it, what does it

47
00:03:06.400 --> 00:03:11.170
include? And if that person
or that team that's working

48
00:03:11.170 --> 00:03:13.690
on things for the customer
doesn't know what done is.

49
00:03:14.200 --> 00:03:16.810
Then you have to ask
a question about how do

50
00:03:16.810 --> 00:03:19.720
they know how many things
they should select during an

51
00:03:19.720 --> 00:03:24.730
iteration. If it's just coded
and maybe unit tested, maybe

52
00:03:24.730 --> 00:03:27.310
they can do 10 or
12 or maybe even 20

53
00:03:27.310 --> 00:03:33.160
items during a whole sprint.
It is so both analyzed,

54
00:03:33.160 --> 00:03:37.540
designed, there's been a unit
test. There's been coding, there's

55
00:03:37.540 --> 00:03:42.130
been testing, there's been refactoring
and the whole set of

56
00:03:42.130 --> 00:03:44.140
things that need or needed
to be done for it

57
00:03:44.140 --> 00:03:48.280
to be potentially shippable. Then
maybe they could only do

58
00:03:48.310 --> 00:03:52.300
one thing. So you have
to wonder how they know

59
00:03:52.300 --> 00:03:54.850
how many things to select
from the product backlog to

60
00:03:54.850 --> 00:03:59.470
do. If they don't know
what done is this also

61
00:03:59.470 --> 00:04:03.700
raises the question of what
sort of expertise or engineering

62
00:04:03.700 --> 00:04:06.010
skills do they have if
they're not sure what they

63
00:04:06.010 --> 00:04:11.230
do when they select something
to be done. And this

64
00:04:11.230 --> 00:04:15.610
of course then raises the
question of undone work when

65
00:04:15.610 --> 00:04:18.670
they get done with a
sprint, and they've done five

66
00:04:18.670 --> 00:04:22.000
things for a product owner,
the product owner, if maybe

67
00:04:22.000 --> 00:04:24.610
the total have done things
that they need are 30,

68
00:04:25.000 --> 00:04:27.700
might believe that they're one,
six of the way complete

69
00:04:27.880 --> 00:04:32.750
and ready for shipment. However,
if the team Stephanie done,

70
00:04:32.750 --> 00:04:36.700
Donnie's only coded and unit
tested, maybe the product owner

71
00:04:36.700 --> 00:04:40.480
is only one 40th of
the way done. And when

72
00:04:40.480 --> 00:04:42.700
the team gets done with
the six sprint and says,

73
00:04:43.000 --> 00:04:45.460
here we are product owner
we're done. And the cut

74
00:04:45.460 --> 00:04:48.970
product owner says, great let's
ship. Then the team has

75
00:04:48.970 --> 00:04:52.000
to look him in the
eye and say, well, that's

76
00:04:52.000 --> 00:04:55.390
not quite the definition of
done. We had, now we've

77
00:04:55.390 --> 00:04:57.490
got to do all the
rest of the testing and

78
00:04:57.490 --> 00:05:00.610
the refactoring and the stabilizing
of the code to make

79
00:05:00.610 --> 00:05:03.640
it. So it's really shippable.
So maybe in about two

80
00:05:03.640 --> 00:05:08.560
or three months. So this
is why done for me

81
00:05:08.590 --> 00:05:11.500
tends to be a pretty
big issue of engineering skills

82
00:05:11.530 --> 00:05:15.490
of, of the relationship between
the product owner and the

83
00:05:15.490 --> 00:05:19.090
customer and engineering competence of
the team that's doing the

84
00:05:19.090 --> 00:05:22.170
work. It sounds like from
the, the way that you're

85
00:05:22.170 --> 00:05:24.870
painting it, that done is
the only, the only point.

86
00:05:25.530 --> 00:05:28.110
I mean, if it also
seems like one could build

87
00:05:28.110 --> 00:05:31.230
up a great deal of
technical debt, even within just

88
00:05:31.230 --> 00:05:34.920
a few short iterations, but
more importantly, that sitting down

89
00:05:34.920 --> 00:05:37.410
and at step zero saying
what has done for us

90
00:05:37.440 --> 00:05:41.040
could expose a number of
technical deficiencies in an organization

91
00:05:41.430 --> 00:05:45.330
you're really kind of, you're
illustrating that there could be

92
00:05:45.330 --> 00:05:47.970
a cancer in the organization.
Like we have virtually no

93
00:05:47.970 --> 00:05:51.540
technical writing, or we have
a, you know, in insufficient

94
00:05:51.540 --> 00:05:53.820
integration testing. So we might
not even be able to

95
00:05:53.820 --> 00:05:58.040
appropriately begin a sprint until
we work these other things

96
00:05:58.040 --> 00:06:00.790
out. Well, if I, if
I listed the number of

97
00:06:00.790 --> 00:06:05.170
things to be done to
a customer requirement before it's

98
00:06:05.170 --> 00:06:09.190
potentially shippable, I've tried that
and the list is about

99
00:06:09.190 --> 00:06:12.430
45 to 50 items, things
that need to be done.

100
00:06:13.480 --> 00:06:16.600
And if a team is
only capable, if you go

101
00:06:16.600 --> 00:06:19.060
through this with its set
of group of engineers, group

102
00:06:19.060 --> 00:06:26.260
of developers, which includes programmers,
analysts, designers, QA people, documentation

103
00:06:26.260 --> 00:06:29.440
people, and say, how much
of this can you do

104
00:06:29.680 --> 00:06:32.770
in a sprint? It's very
often that they can only

105
00:06:32.770 --> 00:06:35.620
do 15 or 20. They're
going to look at a

106
00:06:35.620 --> 00:06:38.230
whole bunch of those, like
the performance testing, the quality

107
00:06:38.230 --> 00:06:40.810
testing, their regression testing. And
they're going to say, well,

108
00:06:40.810 --> 00:06:43.450
we, we, we don't know
how to do that yet

109
00:06:43.450 --> 00:06:47.890
in a sprint. And to
me that remains undone work.

110
00:06:48.910 --> 00:06:52.480
If I do six sprints
at the end of the

111
00:06:52.480 --> 00:06:54.460
first sprint, I have some
undone work at the end

112
00:06:54.460 --> 00:06:56.950
of the second sprint. I
have some undone work and

113
00:06:56.950 --> 00:07:03.400
it keeps accumulating. Unfortunately it
doesn't accumulate linearly as you

114
00:07:03.550 --> 00:07:07.600
don't do work sprint after
sprint it piles on. So

115
00:07:07.600 --> 00:07:10.330
you're not doing some work
that's piling onto what you

116
00:07:10.330 --> 00:07:13.090
didn't do in the first
sprint, third sprint, second sprint.

117
00:07:13.570 --> 00:07:15.700
And so the amount of
work that you're not doing

118
00:07:15.700 --> 00:07:20.140
tends to accumulate in some
sort of logarithmic form pattern.

119
00:07:20.470 --> 00:07:22.420
I'm not sure exactly what
it is, but it's certainly

120
00:07:22.420 --> 00:07:27.880
more than linear. Interesting. It
feels like when I did

121
00:07:27.880 --> 00:07:30.730
my first scrum, when, when
the CTO of the company

122
00:07:30.730 --> 00:07:31.960
that I worked at before
I went to work for

123
00:07:31.960 --> 00:07:35.500
Microsoft, brought in some scrum
training and we had a

124
00:07:35.500 --> 00:07:38.680
number of folks become scrum
masters. We put the entire

125
00:07:39.670 --> 00:07:43.060
division, every developer went through
scrum training and we said,

126
00:07:43.060 --> 00:07:46.270
we are doing scrum as
a company. We, we dedicated

127
00:07:46.270 --> 00:07:48.340
ourselves to it. And we
sat down, we started to

128
00:07:48.340 --> 00:07:51.340
ask ourselves what was, what
was done. I started to

129
00:07:51.340 --> 00:07:54.010
realize how little we had
been doing in the past,

130
00:07:54.460 --> 00:08:00.910
which was interesting, but, but
more interestingly, how much, how

131
00:08:00.910 --> 00:08:04.270
much work needs to be
done made us feel like

132
00:08:04.270 --> 00:08:06.040
we were getting less done.
I guess what I'm trying

133
00:08:06.040 --> 00:08:09.430
to say is that we
were concerned when looking at,

134
00:08:09.510 --> 00:08:13.090
at, at scrum that the,
what we perceived as the

135
00:08:13.090 --> 00:08:17.020
most important piece of work,
the code is getting squeezed.

136
00:08:17.080 --> 00:08:20.020
And we're going to spend
all this time writing documentation

137
00:08:20.020 --> 00:08:22.390
and doing, and doing tests
and things like that. Is

138
00:08:22.390 --> 00:08:25.030
that a common perception that
someone says that, well, gosh,

139
00:08:25.030 --> 00:08:27.190
the speed at which we're
getting things done is less

140
00:08:27.190 --> 00:08:31.150
because look, we're having to
do all this administrivia yes.

141
00:08:31.180 --> 00:08:33.130
Just to suit, you know,
just to make someone feel

142
00:08:33.130 --> 00:08:36.670
like we are done, right.
I believe in every programmer's

143
00:08:36.670 --> 00:08:41.650
had, there's a little person
who has a metronome and

144
00:08:41.650 --> 00:08:44.800
the metronome goes at a
certain pace. And if we

145
00:08:44.800 --> 00:08:49.480
don't go at that pace,
then we're falling behind. I

146
00:08:49.480 --> 00:08:51.700
agree. And so if we
take the time to actually

147
00:08:51.700 --> 00:08:54.430
test our code, and this
is the whole range of

148
00:08:54.430 --> 00:08:57.420
testing it, and perhaps even
document it to make sure

149
00:08:57.420 --> 00:09:01.740
that it works as documented,
then we're not going as

150
00:09:01.740 --> 00:09:05.670
fast as we should. And
at that point we kind

151
00:09:05.670 --> 00:09:07.890
of panic and we throw
all that side, all that

152
00:09:07.890 --> 00:09:10.470
stuff over the board, we'll
say, we'll do that later

153
00:09:10.470 --> 00:09:15.020
because that's not really customer
stuff. That's other stuff, Right?

154
00:09:15.020 --> 00:09:19.370
Administration. It's just administrivia we
call it Right. Well, acceptance

155
00:09:19.370 --> 00:09:22.370
test driven development blows all
of us out of water

156
00:09:22.370 --> 00:09:26.030
because you're defining the acceptance
tests that will prove whether

157
00:09:26.030 --> 00:09:28.460
it works right up the
front. And then you go

158
00:09:28.460 --> 00:09:32.390
off and you document it,
you set up the tests

159
00:09:32.390 --> 00:09:34.730
for it, you set up
the code for it. And

160
00:09:34.730 --> 00:09:37.640
then you try that to
see whether it works as

161
00:09:37.640 --> 00:09:41.420
the test describing our works
as the documentation describes. And

162
00:09:41.420 --> 00:09:44.330
that's a complete piece of
code. If it's not you

163
00:09:44.330 --> 00:09:47.060
circle back and get it
complete. If it is, then

164
00:09:47.060 --> 00:09:49.070
you go back and pick
up another piece of code.

165
00:09:49.790 --> 00:09:54.140
Now that's talking about everything
that's customer facing, being done

166
00:09:54.170 --> 00:10:00.200
within a piece of work
called done. It seems to

167
00:10:00.200 --> 00:10:04.850
me like programmers and engineers
are deeply interested in delivering

168
00:10:04.850 --> 00:10:08.990
code. And if we're not
slapping the keyboard and making

169
00:10:08.990 --> 00:10:12.350
our curly braces or whatever
language we're using, we're not

170
00:10:12.350 --> 00:10:15.740
productive. But we, that means
that we're, we're fundamentally disconnecting

171
00:10:15.740 --> 00:10:18.080
with the whole point, which
is to make a happy

172
00:10:18.080 --> 00:10:22.760
customer. Well, if this, this
goes to the point of

173
00:10:23.600 --> 00:10:26.450
a flaw, almost a genetic
cloth that has occurred in

174
00:10:26.450 --> 00:10:30.380
programmers, that's come out from
waterfall. And this is that

175
00:10:30.800 --> 00:10:35.090
we are willing to cut
quality, to increase velocity or

176
00:10:35.090 --> 00:10:37.360
to increase that drum beat
that the little person he

177
00:10:37.360 --> 00:10:40.190
has in her head. Exactly.
And so I can sit

178
00:10:40.190 --> 00:10:43.370
at a desk and I
can do things the right

179
00:10:43.370 --> 00:10:45.830
way, maybe think about how
something's supposed to be done

180
00:10:45.830 --> 00:10:47.810
and where it'll fit in
the design and what after

181
00:10:47.810 --> 00:10:49.910
we factored to do it.
And then the coding for

182
00:10:50.120 --> 00:10:54.020
the test. And that might
take me an hour. But

183
00:10:54.020 --> 00:10:56.840
if someone tells me that
this is really important, I've

184
00:10:56.840 --> 00:10:59.930
got a deadline to meet
and stop fooling around. This

185
00:10:59.930 --> 00:11:02.120
is really serious. I can
do that same work in

186
00:11:02.120 --> 00:11:04.970
10 minutes by only doing
the coding and slapping it

187
00:11:04.970 --> 00:11:09.080
onto something rather than refactoring
it. So that's where we

188
00:11:09.080 --> 00:11:11.600
come up with the idea
that only the code is

189
00:11:11.600 --> 00:11:15.860
what matters. And unfortunately what
this results in then, because

190
00:11:15.860 --> 00:11:20.060
we've done cut through definition
of done is a done

191
00:11:20.150 --> 00:11:23.930
deficit or an undone, which
is where we strangely enough

192
00:11:23.930 --> 00:11:29.270
get are things like high
maintenance, low sustainability software. No,

193
00:11:29.270 --> 00:11:34.310
it feels like there is
a synergy between the, the

194
00:11:34.310 --> 00:11:37.790
scrum methodology and what has
been happening in productivity with

195
00:11:37.790 --> 00:11:42.170
David. Allen's getting things done
way of thinking. It's kind

196
00:11:42.170 --> 00:11:43.670
of like the new Stephen
Covey. I'm not sure if

197
00:11:43.670 --> 00:11:46.040
you're familiar with David, Allen's
getting things done. It's called

198
00:11:46.040 --> 00:11:50.630
GTD. And it's been the
whole concept of, of, of

199
00:11:50.630 --> 00:11:54.220
his, of his productivity style.
Is it one has a

200
00:11:54.220 --> 00:11:57.220
mental backlog of all the
things that are causing you.

201
00:11:57.220 --> 00:12:01.540
Psychic weight is what he
calls it. And a psychic

202
00:12:01.540 --> 00:12:03.670
weight can be everything in
your life from write some

203
00:12:03.670 --> 00:12:06.790
code to clean out the
garage and you can't release

204
00:12:06.790 --> 00:12:09.100
that psychic weight until you've
actually written it down. And

205
00:12:09.240 --> 00:12:11.950
that's backlog items put every
single thing that needs to

206
00:12:11.950 --> 00:12:13.270
be done. Then you can
release that cause it's an,

207
00:12:13.270 --> 00:12:15.760
a trusted source. And then
the most important thing about

208
00:12:15.760 --> 00:12:18.280
his, his solution, which I
think can be, this can

209
00:12:18.280 --> 00:12:20.890
be applied to something like
scrum is the, what is

210
00:12:20.890 --> 00:12:25.480
the next action required to
move this thing forward? Not,

211
00:12:25.810 --> 00:12:28.420
not at the project level,
but what is the very

212
00:12:28.420 --> 00:12:30.280
next action? For example, if
I'm going to paint my

213
00:12:30.280 --> 00:12:34.150
house, that's my backlog item,
paint my house. What is

214
00:12:34.150 --> 00:12:36.640
the very next action required?
Well, it might be something

215
00:12:36.880 --> 00:12:39.550
very trivial, like get the
phone number of the paint,

216
00:12:40.290 --> 00:12:42.690
But it's what I know
what it has to be

217
00:12:43.020 --> 00:12:45.330
rather than me looking for
any paint that I can

218
00:12:45.330 --> 00:12:49.410
find under the table and
starting to paint. Exactly. But

219
00:12:49.650 --> 00:12:52.290
the programmer's mind wants to
just, let's just start painting.

220
00:12:52.320 --> 00:12:53.910
Let's just do, I've got
some paint. Let's just start

221
00:12:53.910 --> 00:12:57.420
slapping paint on the wall.
It'll work itself out. Well,

222
00:12:57.420 --> 00:13:00.660
the most suspicious thing in
any organization are teams that

223
00:13:00.660 --> 00:13:03.060
have a velocity of 10,
12. That might be the

224
00:13:03.060 --> 00:13:06.390
average within the organization. But
another team is able to

225
00:13:06.390 --> 00:13:10.440
get a philosophy of 20,
25. Amazingly, if you look

226
00:13:10.440 --> 00:13:13.140
at their code and the
tests around it, they have

227
00:13:13.140 --> 00:13:16.500
changed the definition of done
to increase that. So can

228
00:13:16.500 --> 00:13:18.390
you say something about velocity?
Cause I don't think necessarily

229
00:13:18.390 --> 00:13:20.280
all of our listeners are
familiar with the concept and

230
00:13:20.280 --> 00:13:23.220
the numbers associated with the
loss. If we have a

231
00:13:23.220 --> 00:13:25.890
list of things that a
customer wants to have done,

232
00:13:26.340 --> 00:13:29.160
this is how many of
those things we're able to

233
00:13:29.160 --> 00:13:32.280
get done as a team
over a period of time,

234
00:13:32.280 --> 00:13:36.360
which might be like a
monthly iteration. So philosophy might

235
00:13:36.360 --> 00:13:40.620
be 20 pieces of requirements,
our product backlog. This we're

236
00:13:40.620 --> 00:13:44.130
going to get done over
a sprint. Now, if you

237
00:13:44.130 --> 00:13:47.850
are able to change the
definition of done to minimize

238
00:13:48.180 --> 00:13:51.990
testing, to minimize, designed, to
minimize refactoring, you can raise

239
00:13:51.990 --> 00:13:56.700
that incredibly. However, if within
an organization, everyone has the

240
00:13:56.700 --> 00:14:00.360
same definition of done Andy,
it's something that's potentially shippable.

241
00:14:00.660 --> 00:14:04.380
Then I can really compare
one team to another. Interesting.

242
00:14:04.390 --> 00:14:07.560
I think that that, that
idea of having a common

243
00:14:07.560 --> 00:14:12.630
agreement across either groups or
divisions makes the, the statistics

244
00:14:12.630 --> 00:14:17.550
have value. Otherwise they're useless,
They are useless and an

245
00:14:17.550 --> 00:14:20.880
interesting way of making it.
So the statistics are relevant

246
00:14:21.390 --> 00:14:24.210
is all the teams that
are working on a similar

247
00:14:24.210 --> 00:14:26.850
set of software. Let's see
a similar release of software

248
00:14:27.300 --> 00:14:30.570
have to have the same
definition of done otherwise their

249
00:14:30.570 --> 00:14:33.540
code won't integrate during the
sprint and won't be integrated

250
00:14:33.540 --> 00:14:36.600
at the end of the
iteration or sprint. And so

251
00:14:36.600 --> 00:14:41.460
this becomes a, an organization
organization wide definition rather than

252
00:14:41.460 --> 00:14:44.550
just simply for a single
team. Let's just take a

253
00:14:44.550 --> 00:14:46.410
moment right now to thank
our sponsors and we'll come

254
00:14:46.410 --> 00:14:48.900
right back with Ken Schwaber
and we'll talk a little

255
00:14:48.900 --> 00:14:52.700
bit more about what is
done. Do you know how

256
00:14:52.700 --> 00:14:55.820
to make the possible out
of the impossible while the.net

257
00:14:55.820 --> 00:14:58.670
ninjas at Telerik do they
just released a huge pack

258
00:14:58.670 --> 00:15:00.920
of web controls, all built
on top of ASP at

259
00:15:00.920 --> 00:15:05.150
Ajax, that'll help you build
impossibly fast and interactive applications

260
00:15:05.150 --> 00:15:08.510
in no time at all.
They've made the impossible possible

261
00:15:08.510 --> 00:15:11.540
and desktop development. If you
think you can't have a

262
00:15:11.540 --> 00:15:14.900
carousel component and wind forms,
well you can. They're windows

263
00:15:14.900 --> 00:15:17.840
form suite features a super
powerful grid view control and

264
00:15:17.840 --> 00:15:20.900
32 other crazy desktop components.
That'll give you a dazzling

265
00:15:21.320 --> 00:15:25.040
WPF like features, but in
wind farms, they do the

266
00:15:25.040 --> 00:15:27.440
same thing in reporting solutions
with a new design surface,

267
00:15:27.440 --> 00:15:30.140
like nothing else looks just
like graph paper gives you

268
00:15:30.140 --> 00:15:33.830
advanced page layout capabilities makes
it feel more like a

269
00:15:33.830 --> 00:15:36.830
graphic design software than a
reporting solution. Go check them

270
00:15:36.830 --> 00:15:39.260
out at <inaudible> dot com
and be at dotnet Ninja.

271
00:15:39.530 --> 00:15:42.980
And thanks for listening. This
week's Hansel minutes is brought

272
00:15:42.980 --> 00:15:47.690
to you by covid.com the
code better.com blog network it's

273
00:15:47.690 --> 00:15:50.500
made up of over 20
industry leaders and speakers who

274
00:15:50.510 --> 00:15:53.360
are passionate about delivering tried
and true solutions to real

275
00:15:53.360 --> 00:15:56.720
world problems for building better
software. These guys are not

276
00:15:56.720 --> 00:15:58.940
only our sponsor this week,
but they're also my friends.

277
00:15:59.840 --> 00:16:02.450
The COVID better blog network.
It's where industry leaders blog.

278
00:16:02.510 --> 00:16:07.550
You can find them@codebetter.com as
well as devilish dev L

279
00:16:07.550 --> 00:16:12.340
I C I O dot.
Yes. And we're back, we're

280
00:16:12.340 --> 00:16:16.480
talking to catch waiver about
what is done, and you're

281
00:16:16.490 --> 00:16:19.540
going to say something sure
about the relationship that happens

282
00:16:19.540 --> 00:16:21.970
between the customer and the
developer and how, how the

283
00:16:21.970 --> 00:16:25.300
definition of done can affect
that relationship. Yes, we've, we've

284
00:16:25.300 --> 00:16:28.480
talked about how done is
necessary. So a team knows

285
00:16:28.480 --> 00:16:31.180
how many items to select.
And so it knows what

286
00:16:31.420 --> 00:16:34.420
development process it goes through
within a sprint to create

287
00:16:34.420 --> 00:16:38.050
something. And so that there
is no undone work left

288
00:16:38.050 --> 00:16:39.910
at the end of the
project for the team to

289
00:16:39.910 --> 00:16:47.530
stabilize. However, this changes a
longterm and longtime honored relationship

290
00:16:47.530 --> 00:16:51.730
between customers who we now
call product owners and the

291
00:16:51.940 --> 00:16:57.010
developers on the scrum team.
Normally a product owner would

292
00:16:57.010 --> 00:16:59.560
come in if they needed
something more done than they

293
00:16:59.560 --> 00:17:02.350
had anticipated in a project.
And they would tell the

294
00:17:02.350 --> 00:17:04.720
team, Hey, we've got some
more things. We've got some

295
00:17:04.720 --> 00:17:09.070
more stuff for our customers.
We've got some more functionality

296
00:17:09.070 --> 00:17:11.050
that we need to get
into this release. And it's

297
00:17:11.200 --> 00:17:14.680
just critical. And the team
would look up and say,

298
00:17:14.680 --> 00:17:16.660
well, yeah, but we are,
we don't have any more

299
00:17:16.660 --> 00:17:19.540
time to do that. And
the product owner would look

300
00:17:19.540 --> 00:17:21.910
them even more clearly in
the face and say, you

301
00:17:21.910 --> 00:17:26.440
don't understand. This is really,
really important. And team would

302
00:17:26.440 --> 00:17:29.350
say, Oh, now we understand
it's that important that, you

303
00:17:29.350 --> 00:17:31.120
know, if we don't do
it, you're going to go

304
00:17:31.120 --> 00:17:33.400
to our managers, managers, managers.
Now we're all in deep

305
00:17:33.400 --> 00:17:35.770
trouble if we don't do
it. So at this point

306
00:17:35.770 --> 00:17:38.740
in time, the development team
does what would do what

307
00:17:38.740 --> 00:17:41.770
it always has done in
this relationship, which is it

308
00:17:41.770 --> 00:17:45.130
cuts quality. That is, it
reduces the amount of stuff

309
00:17:45.160 --> 00:17:48.430
that is included in. What's
done to simply increase the

310
00:17:48.430 --> 00:17:51.390
amount of stuff can be
claimed as done. And as

311
00:17:51.390 --> 00:17:54.810
I mentioned earlier, they can
vastly increase their velocity by

312
00:17:54.810 --> 00:17:56.610
doing this, they might increase
it by up to four

313
00:17:56.610 --> 00:18:01.200
or five, certainly enough to
accommodate almost any increase in

314
00:18:01.200 --> 00:18:03.360
things that a customer or
product owners are asking for.

315
00:18:05.150 --> 00:18:07.640
I think this has led
to a deep seated belief

316
00:18:07.670 --> 00:18:10.430
by all of our customers
that in general, we sit

317
00:18:10.430 --> 00:18:12.860
around as developers with our
feet up on a desk,

318
00:18:13.640 --> 00:18:16.610
maybe I'm playing with, you
know, are surfing the web

319
00:18:16.640 --> 00:18:19.880
or looking at pornography or,
or doing something. But it's

320
00:18:19.880 --> 00:18:22.550
certainly not doing the work
that they want. And it's

321
00:18:22.550 --> 00:18:24.530
all they have to do
is tell us that it's

322
00:18:24.530 --> 00:18:27.800
really important for us to
do it. And we will

323
00:18:27.800 --> 00:18:29.810
put our feet down and
we'll sit forward and we'll

324
00:18:29.810 --> 00:18:33.410
really crank out the code.
Like we always have. What

325
00:18:33.410 --> 00:18:36.440
they don't know is that
we've cut quality by reducing

326
00:18:36.440 --> 00:18:40.850
the definition of done to
do it. So this changes

327
00:18:40.850 --> 00:18:43.490
the relationship between the product
owner and the team. The

328
00:18:43.490 --> 00:18:47.660
team now has a definition
of done. The definition of

329
00:18:47.660 --> 00:18:51.350
done is something that is
potentially shippable. This is something

330
00:18:51.350 --> 00:18:56.480
which is for quality, it's
maintainable, sustainable enhanceable code. And

331
00:18:56.480 --> 00:19:00.170
yet the product owner doesn't
necessarily know about this. And

332
00:19:00.170 --> 00:19:02.810
so they'll come to the
team and say, guys, you

333
00:19:02.960 --> 00:19:07.280
got to get more done.
And the team can't, the

334
00:19:07.280 --> 00:19:10.910
team is stuck with the
definition of done. And so

335
00:19:10.910 --> 00:19:14.690
their philosophy is fairly static.
You can't change your velocity

336
00:19:15.050 --> 00:19:19.310
by more than five, 10%
within any sprint, by any

337
00:19:19.310 --> 00:19:23.270
technique, other than cutting quality,
adding people, won't do it.

338
00:19:23.300 --> 00:19:27.860
Increasing your engineering tools. Won't
do it. So they have

339
00:19:27.860 --> 00:19:29.780
to really look back at
the product or, and say,

340
00:19:29.780 --> 00:19:34.010
excuse me, but this is
our definition of done. We

341
00:19:34.010 --> 00:19:38.300
can't do any more. So
with the definition of done

342
00:19:38.300 --> 00:19:41.630
being in place, the team
can no longer produce more

343
00:19:41.630 --> 00:19:44.960
by reducing the definition of
done. This leaves the product

344
00:19:44.960 --> 00:19:48.110
owner with the question of
how do they get changes,

345
00:19:48.110 --> 00:19:50.090
taken care of? How do
they get the work that

346
00:19:50.090 --> 00:19:51.830
they're used to asking the
team to do with the

347
00:19:51.830 --> 00:19:57.140
last minute done, scrum kids,
the product owner, the customer,

348
00:19:57.350 --> 00:20:00.140
another variable that they can
work with that they've never

349
00:20:00.140 --> 00:20:06.410
had before this, the ability
to iteratively incrementally build the

350
00:20:06.410 --> 00:20:09.350
product in the past. They've
had to say, this is

351
00:20:09.350 --> 00:20:12.650
everything we want here. It
is, do it. And then

352
00:20:12.650 --> 00:20:14.390
later come in and say,
Oh, by the way, and

353
00:20:14.390 --> 00:20:17.990
do this more now with
the product owner can do

354
00:20:17.990 --> 00:20:19.850
is they can ask for
the product to be built

355
00:20:20.030 --> 00:20:24.170
piece by piece, by piece,
highest value piece, next highest

356
00:20:24.170 --> 00:20:27.650
value piece, next highest value
piece. And when they get

357
00:20:27.680 --> 00:20:32.030
done, when they get done
with all the functionality, they

358
00:20:32.030 --> 00:20:35.900
think is valuable, they can
stop. So this means that

359
00:20:35.900 --> 00:20:39.410
at any point in time,
they can trade off functionality.

360
00:20:39.440 --> 00:20:42.620
That's in the queue to
be built with other functionality.

361
00:20:42.620 --> 00:20:46.490
That's more valuable. This works
extremely well. When you take

362
00:20:46.490 --> 00:20:51.430
two industry statistics into account,
one is 35% of all

363
00:20:51.430 --> 00:20:56.800
functionality changes during a release.
So this is 35% of

364
00:20:56.800 --> 00:20:59.260
the queue of work that
a product owner had wanted

365
00:20:59.260 --> 00:21:02.980
before. That's open for change.
And 50 to 60% of

366
00:21:02.980 --> 00:21:06.250
all functionality in any release
is rarely or never needed.

367
00:21:07.660 --> 00:21:10.420
So what we've given our
product owners is the ability

368
00:21:10.660 --> 00:21:14.380
to piece by piece, manage
what they're getting in the

369
00:21:14.380 --> 00:21:17.470
release. So they can constantly
optimize the value and the

370
00:21:17.470 --> 00:21:21.640
return on investment. They will
never do this as long

371
00:21:21.640 --> 00:21:24.010
as they're used to believing
that all they have to

372
00:21:24.010 --> 00:21:27.310
do is tell the developers
to do more. And the

373
00:21:27.310 --> 00:21:30.340
team will, they'll only do
this when they believe that

374
00:21:30.340 --> 00:21:33.580
that's not an option and
they have to optimize the

375
00:21:33.580 --> 00:21:36.580
value of the release rather
than just trying for more

376
00:21:36.880 --> 00:21:40.570
and more and more. This
is a big change for

377
00:21:40.570 --> 00:21:43.210
our customers. This is a
big change for our developers,

378
00:21:43.720 --> 00:21:48.370
simply by introducing the value
of the word done, we

379
00:21:48.370 --> 00:21:51.850
have changed our relationship and
we've also started to increase

380
00:21:51.850 --> 00:21:58.000
the quality sustainability and making
belty of our products. You,

381
00:21:58.000 --> 00:22:01.740
you, you talked about the
prioritization and the deciding that

382
00:22:01.860 --> 00:22:04.290
what I need to get
done once I've defined what

383
00:22:04.290 --> 00:22:06.120
done is, I can say
I want the most high

384
00:22:06.120 --> 00:22:10.380
value things first. How do
those business needs and ranking

385
00:22:10.380 --> 00:22:12.510
the order in which I
want to finish my backlog

386
00:22:12.540 --> 00:22:19.590
items? How can those constraints
be reconciled with architecturally to

387
00:22:19.590 --> 00:22:23.220
finish this most important business
thing there, we require this,

388
00:22:23.670 --> 00:22:25.830
you know, this, these designs
or this underlayment, or I

389
00:22:25.830 --> 00:22:30.270
simply can't do priority one
thing before priority five, because

390
00:22:30.270 --> 00:22:32.430
of the way that the,
I see the design in

391
00:22:32.430 --> 00:22:35.790
my head, you know, the
natural, the natural value order

392
00:22:35.790 --> 00:22:39.360
of the business need may
not necessarily be a friendly

393
00:22:39.360 --> 00:22:43.470
to the architect, Right? Usually
we're used, we're used to

394
00:22:43.470 --> 00:22:47.940
thinking of architecture is being
done before we start developing

395
00:22:47.940 --> 00:22:50.940
the software. And then we
hang the software from the

396
00:22:50.940 --> 00:22:55.620
architecture and the infrastructure. If
we're listing the work that

397
00:22:55.620 --> 00:22:59.490
the customer wants done, we're
listing the requirements they want.

398
00:22:59.490 --> 00:23:02.880
We're also listening to nonfunctional
requirements that are needed to

399
00:23:02.880 --> 00:23:06.990
support the functional requirements at
the pace at the security,

400
00:23:06.990 --> 00:23:12.000
at the other requirements that
they need. So those are

401
00:23:12.060 --> 00:23:15.210
top priority product backlog items
that need to be done

402
00:23:16.410 --> 00:23:19.020
in scrum, every sprint he
has to have at least

403
00:23:19.020 --> 00:23:23.100
one piece of business functionality.
So in the very first

404
00:23:23.100 --> 00:23:25.680
sprint, we might have one
piece of business functionality and

405
00:23:25.680 --> 00:23:29.850
a lot of architectural infrastructural
items being built. And the

406
00:23:29.850 --> 00:23:32.640
second sprint, we might have
a little more business functionality

407
00:23:33.000 --> 00:23:36.360
and a little less architectural
infrastructure, all of work being

408
00:23:36.360 --> 00:23:40.650
done. This means that in
every sprint, some of the

409
00:23:40.650 --> 00:23:44.250
architecture and infrastructure is going
in, but it emerges. We

410
00:23:44.250 --> 00:23:46.460
don't build it upfront all
at once. We let it

411
00:23:46.520 --> 00:23:50.360
emerge based on the business
requirements. This means at any

412
00:23:50.360 --> 00:23:53.300
point in time, we'll never
have more architecture than the

413
00:23:53.300 --> 00:23:58.310
business functionality that we built
demands. It also though means

414
00:23:58.310 --> 00:24:01.670
that the code that we
write had better be very

415
00:24:01.670 --> 00:24:06.020
clean, very refactored, and very
well documented. Otherwise, when we

416
00:24:06.020 --> 00:24:08.330
get to the second sprinting,
we try laying more code

417
00:24:08.330 --> 00:24:10.970
on top of it. We
will have a bloody mess.

418
00:24:11.530 --> 00:24:15.010
I see. So the more
refined, the more appropriately factored

419
00:24:15.010 --> 00:24:17.020
your code is the more
friendly it is to being

420
00:24:17.560 --> 00:24:20.080
the code itself, being agile
enough to be modified for

421
00:24:20.080 --> 00:24:23.560
future The requirements. Exactly. And
this is where that were

422
00:24:23.560 --> 00:24:25.780
done, really comes into play.
Because if you take a

423
00:24:25.780 --> 00:24:28.750
shortcut with scrum, it's going
to catch up with you

424
00:24:28.750 --> 00:24:31.390
within three or four sprints
now three or four releases.

425
00:24:31.930 --> 00:24:35.230
So what about cross cutting
concerns about things like, you

426
00:24:35.230 --> 00:24:38.560
know, security throughout and logging
throughout and things that don't,

427
00:24:38.890 --> 00:24:41.440
you know, the kinds of
backlog items that one finds

428
00:24:41.650 --> 00:24:45.430
hanging around sprint after sprint,
maybe they're poorly written backlog

429
00:24:45.460 --> 00:24:49.660
items because there's something like
logging. Yeah. So you might

430
00:24:49.660 --> 00:24:53.590
have logging it as a
product backlog item in the

431
00:24:53.590 --> 00:24:57.070
first sprint and it's logging
for this one piece of

432
00:24:57.070 --> 00:25:00.100
functionality. So you're only putting
enough to do that one

433
00:25:00.100 --> 00:25:02.920
piece. Then you in second
sprint, you're doing logging for

434
00:25:02.920 --> 00:25:06.280
another piece, then third piece,
or you might take logging

435
00:25:06.280 --> 00:25:10.510
and break it down into
customer needs, logging, and we

436
00:25:10.510 --> 00:25:13.480
will be logging at this
type of capability. So you

437
00:25:13.480 --> 00:25:16.570
decompose it further and further.
So you're putting in just

438
00:25:16.570 --> 00:25:20.590
enough to support the business
requirement When a, when a

439
00:25:20.590 --> 00:25:23.710
requirement takes a dramatic right
turn in a direction that

440
00:25:23.710 --> 00:25:26.380
you maybe didn't see, someone
builds a logging infrastructure to

441
00:25:26.380 --> 00:25:30.940
log to text files. Suddenly,
you know, the customer changes

442
00:25:30.940 --> 00:25:33.520
the requirement. We need to
log into the cloud and

443
00:25:33.700 --> 00:25:37.990
we're just simply not prepared
for that. We wouldn't have

444
00:25:37.990 --> 00:25:40.120
been prepared if we had
tried things, you have the

445
00:25:40.120 --> 00:25:43.960
architecture upfront. The only difference
is that we won't have

446
00:25:43.990 --> 00:25:45.970
built a lot of things
that we have to tear

447
00:25:45.970 --> 00:25:48.720
apart. Instead, we will be
able to just start from

448
00:25:48.730 --> 00:25:51.310
where I see. So I'm
hearing you say that it's

449
00:25:51.310 --> 00:25:56.110
that accidental, that accidental complexity
that comes from trying to

450
00:25:56.110 --> 00:25:58.480
think too much about the
architecture, what we might need,

451
00:25:59.170 --> 00:26:01.090
as opposed to being driven
by exactly what we were

452
00:26:01.090 --> 00:26:04.780
told we need. If we
look historically, we're driven to

453
00:26:04.780 --> 00:26:07.690
build architecture and infrastructure at
the start of the project,

454
00:26:08.380 --> 00:26:11.320
and if you're using waterfall
that's because if you change

455
00:26:11.380 --> 00:26:15.070
any requirement at the start
of the project, you'd only

456
00:26:15.070 --> 00:26:17.860
cost you a dollar 60%
of the way through the

457
00:26:17.860 --> 00:26:20.350
project. Since we built all
the architecture and infrastructure at

458
00:26:20.350 --> 00:26:22.930
the start, it might cost
us a hundred dollars. So

459
00:26:22.930 --> 00:26:26.830
we try to be perfect
upfront. If we're using the

460
00:26:26.830 --> 00:26:30.820
ideas of refactoring and merchant
architecture, then we don't need

461
00:26:30.820 --> 00:26:33.460
to be perfect. We're constantly
adjusting it to meet the

462
00:26:33.460 --> 00:26:39.100
requirements. However, this does require
tremendously good engineering skills, which

463
00:26:39.100 --> 00:26:43.030
removes your ability to devolve
from the word done into

464
00:26:43.050 --> 00:26:46.290
some crap. And it removes
your ability to fake it.

465
00:26:46.680 --> 00:26:49.940
Yeah. Completely. If you try
faking it with enforced prints,

466
00:26:49.940 --> 00:26:53.090
you'll be caught. Yeah. Interesting.
So suddenly you have a

467
00:26:53.090 --> 00:26:56.130
reason to write really good
software and you always have

468
00:26:56.160 --> 00:26:59.240
a reward for writing really
good software. It's interesting. A

469
00:26:59.240 --> 00:27:01.630
number of people have said
to me that, you know,

470
00:27:01.670 --> 00:27:04.610
I've said this before that
agile is, some people are

471
00:27:04.880 --> 00:27:07.070
using it as an excuse
to be sloppy, but I've

472
00:27:07.070 --> 00:27:09.710
found when I've been working
with really good scrum masters,

473
00:27:10.010 --> 00:27:13.220
it's a much more formal
process than really any process

474
00:27:13.220 --> 00:27:16.850
I've ever worked on. It
has consequences at the end

475
00:27:16.850 --> 00:27:20.330
of every sprint. If everyone's
paying attention, the scrum master

476
00:27:20.330 --> 00:27:24.110
is the one we hold
responsible for the product owner,

477
00:27:24.110 --> 00:27:26.750
knowing what's being seen at
the end of the sprint.

478
00:27:27.320 --> 00:27:29.930
If the definition of done
is that something will be

479
00:27:29.930 --> 00:27:33.110
completely done and tested. The
scrum master is not allowed

480
00:27:33.110 --> 00:27:35.780
to let the product owner
see something that does not

481
00:27:35.780 --> 00:27:39.290
meet that criteria. So they're
like the judge, the referee

482
00:27:39.290 --> 00:27:41.750
in a football game. So
that brings up an interesting

483
00:27:41.750 --> 00:27:45.170
question is what does a
failed sprint look like? And

484
00:27:45.170 --> 00:27:48.230
what do we do about
it? Failed sprint is an

485
00:27:48.260 --> 00:27:53.210
awful phrase. Sprints don't feel
or succeed. They simply think

486
00:27:53.210 --> 00:27:56.630
simply happen within them. Okay.
So if we select some

487
00:27:56.630 --> 00:27:59.600
product backlog items, which have
a lot of architectural work

488
00:27:59.600 --> 00:28:02.480
in it, and we don't
get done with that within

489
00:28:02.480 --> 00:28:04.700
a sprint, because it turns
out bigger than we thought

490
00:28:05.420 --> 00:28:09.050
we will re estimate the
amount of work remaining on

491
00:28:09.050 --> 00:28:11.600
those items and put them
back in the product backlog.

492
00:28:11.960 --> 00:28:14.270
Hopefully the product owner will
re select them for the

493
00:28:14.270 --> 00:28:17.360
next sprint, but they are
not done. They're not demonstrable

494
00:28:17.360 --> 00:28:19.400
simply there are means less
work to be done on

495
00:28:19.400 --> 00:28:21.560
them, But can it be
possible that one would have

496
00:28:21.560 --> 00:28:23.300
a sprint and either because
of the length of the

497
00:28:23.300 --> 00:28:26.240
sprint or the inappropriate size
of the backlog items that

498
00:28:26.240 --> 00:28:27.920
they have, nothing that they
can demonstrate at the end

499
00:28:27.920 --> 00:28:31.730
of the day. Yes, absolutely.
Wonderful. Then we sit down

500
00:28:31.730 --> 00:28:34.280
with them and say, wow,
that was really pretty terrible.

501
00:28:34.610 --> 00:28:37.460
So how can we now
select a more appropriate amount?

502
00:28:38.150 --> 00:28:40.640
Typically teams will, by the
time they get into their

503
00:28:40.640 --> 00:28:43.550
third sprint, know how much
they can select and how

504
00:28:43.550 --> 00:28:45.650
much they can do within
a sprint. It tends to

505
00:28:45.650 --> 00:28:49.190
be a self learning process.
The team has decided to

506
00:28:49.190 --> 00:28:52.340
start using scrum. They don't
have to necessarily take it

507
00:28:52.670 --> 00:28:55.390
all at once, right. They
can just pick something and,

508
00:28:55.390 --> 00:28:59.360
and try to improve that.
Absolutely. And often when they

509
00:28:59.360 --> 00:29:01.640
think they're doing it all
at once and perfectly, they

510
00:29:01.640 --> 00:29:03.530
will discover that they're not,
you know, what they do

511
00:29:03.530 --> 00:29:06.650
have to improve Kind of
preparation should they make for,

512
00:29:06.650 --> 00:29:08.960
for management in the sense
of we're not going to

513
00:29:08.960 --> 00:29:13.100
become immediately and incredibly effective
just because we've moved from

514
00:29:13.100 --> 00:29:15.710
one process to just scrum,
what can they do to

515
00:29:15.710 --> 00:29:18.470
prepare? I mean, how much
overhead is there for the

516
00:29:18.800 --> 00:29:23.450
startup of an agile practice
at a previously not agile?

517
00:29:24.230 --> 00:29:29.000
None. If you prepare, you
will be preparing what you

518
00:29:29.000 --> 00:29:31.070
think is the most important
stuff to grip up here.

519
00:29:31.610 --> 00:29:33.800
And you have no idea
of what the teams are

520
00:29:33.800 --> 00:29:36.710
really going to need so
far better to let a

521
00:29:36.710 --> 00:29:39.830
team start with some product
backlog that they can find

522
00:29:39.830 --> 00:29:42.790
somewhere and do best to
turn it into something that's

523
00:29:42.790 --> 00:29:44.980
done by the end of
a sprint. And in the

524
00:29:44.980 --> 00:29:48.370
process of doing this, you'll
find everything that they don't

525
00:29:48.370 --> 00:29:51.370
know, everything they need to
know. And those then become

526
00:29:51.370 --> 00:29:53.080
the things that you can
put in place to help

527
00:29:53.080 --> 00:29:55.900
them. So it sounds like
the only overhead is just

528
00:29:55.900 --> 00:29:59.170
the act of deciding, deciding,
yup. This is kind of

529
00:29:59.170 --> 00:30:02.110
a Schrodinger's cat view of,
of agile where we, you

530
00:30:02.110 --> 00:30:03.700
know, you're not going to
know until you just open

531
00:30:03.700 --> 00:30:08.170
the box. Absolutely. And this,
I think translates back into

532
00:30:08.170 --> 00:30:10.810
a kind of waterfall approach
of let's plan it and

533
00:30:10.810 --> 00:30:14.290
get it perfect before we
start versus the scrum approach,

534
00:30:14.290 --> 00:30:17.740
which says there's so much
complexity. You can never know

535
00:30:17.740 --> 00:30:20.470
what's needed. So just start
and then you'll know what

536
00:30:20.470 --> 00:30:24.250
you need feels far riskier,
but in scrum, your risk

537
00:30:24.250 --> 00:30:29.410
is never greater than one
sprint. Very cool. Well, that's

538
00:30:29.410 --> 00:30:31.030
all the time we've got,
and I thank you so

539
00:30:31.030 --> 00:30:34.210
much for sitting down with
me today, pinch waiver, and

540
00:30:34.300 --> 00:30:37.390
you'll see you again next
week on Hanselman's. Thank you.

