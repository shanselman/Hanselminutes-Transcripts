WEBVTT FILE

1
00:00:04.890 --> 00:00:16.390
<inaudible> From Hanselman it's dot
com. It's Hansel minutes, a

2
00:00:16.390 --> 00:00:20.720
weekly discussion with web developer
and technologist Scott Hanselman hosted

3
00:00:20.720 --> 00:00:25.670
by Carl Franklin. This is Lawrence Ryan
announcing show number one 11

4
00:00:25.820 --> 00:00:32.030
recorded live Tuesday, April 22nd, 2008. Support
for Hanselman it's as provided

5
00:00:32.030 --> 00:00:36.230
by. Tellerik already controls the
most comprehensive suite of components

6
00:00:36.230 --> 00:00:46.490
for windows forums and asp.net
web applications. online@wwwdottelerik.com. Support is

7
00:00:46.490 --> 00:00:50.450
also provided by.net developers journal.
The world's leading that net

8
00:00:50.450 --> 00:00:56.750
developer magazine online at www
dot <inaudible> dot com. In

9
00:00:56.750 --> 00:01:00.020
this episode, Scott sits down
with Phil hack, drew sellers

10
00:01:00.170 --> 00:01:04.220
and Jeffrey Palermo, and talks
about the asp.net MVC project.

11
00:01:04.490 --> 00:01:11.660
And Microsoft's changing attitudes towards
opening. Hi, this is Scott

12
00:01:11.660 --> 00:01:13.700
Hanselman. This is another episode
of Hansel minutes, and I'm

13
00:01:13.700 --> 00:01:17.660
sitting down here@thealt.net conference, and
I've got Phil hack, the

14
00:01:17.660 --> 00:01:23.030
feature PM for asp.net MVC
got Jeffrey Palermo, the co-creator

15
00:01:23.030 --> 00:01:26.030
of MVC contrib, an opensource
project that he co founded

16
00:01:26.030 --> 00:01:28.550
with Eric Hexter. And I've
got drew seller as a

17
00:01:28.550 --> 00:01:31.220
committer on the castle project.
And one component of the

18
00:01:31.220 --> 00:01:35.000
castle project is monorail, which
is arguably the first NVC

19
00:01:35.390 --> 00:01:38.780
project that gained widespread adoption.
So I think we've got

20
00:01:38.780 --> 00:01:41.030
a really good cross section
of the model view controller

21
00:01:41.030 --> 00:01:43.520
kind of.net ecosystem. And I
wanted to talk a little

22
00:01:43.520 --> 00:01:47.120
bit about the asp.net MVC
project. Some of the things

23
00:01:47.120 --> 00:01:48.830
that the open source community
is doing to make it

24
00:01:48.830 --> 00:01:53.600
better. And then what the
previous MVC project thinks about

25
00:01:53.600 --> 00:01:55.910
that because a lot of
people felt that when asp.net

26
00:01:55.910 --> 00:02:00.200
MVC began to be announced
that the monorail project, the

27
00:02:00.200 --> 00:02:03.110
first widely adopted model view
controller framework would feel like

28
00:02:03.110 --> 00:02:05.450
Microsoft was kind of squashing
you. So, you know, drew,

29
00:02:05.450 --> 00:02:08.300
what do you, what do
you think about that? Well,

30
00:02:09.050 --> 00:02:11.480
being, I guess, a capitalist
at heart, I think that

31
00:02:11.480 --> 00:02:14.930
competition is a really positive
thing. I've already seen features

32
00:02:14.990 --> 00:02:20.000
coming out of the, the
Microsoft NBC framework being poured

33
00:02:20.000 --> 00:02:23.510
it into monorail and some
of the features that are

34
00:02:23.510 --> 00:02:25.160
coming over, ones that I've
been wanting for a long

35
00:02:25.160 --> 00:02:28.550
time, but haven't personally figured
out how to personally figure

36
00:02:28.550 --> 00:02:30.700
out how to implement, but
I've seen them being poured

37
00:02:30.710 --> 00:02:33.680
back over. So, I mean,
at first I was skeptical,

38
00:02:33.680 --> 00:02:37.400
but I've really enjoyed the,
the extra share of knowledge.

39
00:02:37.580 --> 00:02:39.500
So monorail is not going
away. You guys didn't just

40
00:02:39.500 --> 00:02:42.380
say, Oh, we'll shut it
down now. No, it's, it's,

41
00:02:42.470 --> 00:02:44.120
you know, it's still a
bit of a different mindset.

42
00:02:44.120 --> 00:02:45.740
I think. I mean, I
think they're very close. They're

43
00:02:45.740 --> 00:02:48.560
all, they're both espousing separation
concerns, which I think is

44
00:02:48.710 --> 00:02:52.160
just a really important concept,
but the way the workflow

45
00:02:52.160 --> 00:02:55.460
is still a little bit
different, the there are still

46
00:02:55.700 --> 00:03:00.520
some explicit examples. Well, my,
my use of it, I

47
00:03:00.520 --> 00:03:02.530
would say is probably different.
I use, I have it

48
00:03:02.530 --> 00:03:06.370
embedded with castles microkernel Windsor.
And so I use that

49
00:03:06.430 --> 00:03:09.280
quite a bit and I'm
very happy to see that

50
00:03:09.280 --> 00:03:13.090
MBC framework has a nice
plugin for that. But I

51
00:03:13.090 --> 00:03:14.620
mean, and, and this, a
lot of this comes from

52
00:03:14.620 --> 00:03:18.760
my naivete with the, the
Microsoft version NVC framework itself.

53
00:03:18.790 --> 00:03:21.100
But when I was playing
with it, there were, you

54
00:03:21.100 --> 00:03:23.200
know, the, and I apologize,
cause this is, I believe

55
00:03:23.200 --> 00:03:26.560
this is old now, but
the attribute based attributes on

56
00:03:26.560 --> 00:03:30.910
the controller. So originally with
the Microsoft asp.net MVC framework,

57
00:03:31.180 --> 00:03:33.850
if you wanted to expose
a public controller action, you

58
00:03:33.850 --> 00:03:36.730
had to explicitly decorate that
with an attribute, said, this

59
00:03:36.730 --> 00:03:38.620
is an action. And we
had a lot of pushback

60
00:03:38.650 --> 00:03:41.020
from that in the community,
and that was eventually removed.

61
00:03:41.290 --> 00:03:44.730
Yes. And I, and I've
heard that and it's, it's

62
00:03:44.740 --> 00:03:47.200
been very enlightening at the
same time to see Microsoft

63
00:03:47.590 --> 00:03:50.650
taking that feedback and moving
forward at what I consider

64
00:03:50.650 --> 00:03:53.500
to be a fairly rapid
pace. Hmm. So, so what

65
00:03:53.500 --> 00:03:54.880
were some examples of things
that you said that were

66
00:03:54.880 --> 00:03:57.250
being moved over and maybe
an example of the different

67
00:03:57.280 --> 00:04:00.040
mindset that the monorail project
has? And just to be

68
00:04:00.040 --> 00:04:03.430
clear, you had mentioned the
Windsor microkernel, that's one of

69
00:04:03.430 --> 00:04:06.790
the dependency injection containers that
comes with the castle project

70
00:04:06.790 --> 00:04:10.270
it's bundled with castle. So
castle is the overarching name,

71
00:04:10.510 --> 00:04:14.370
correct. And underneath that are
active record your database, your

72
00:04:14.410 --> 00:04:17.470
view on how databases should
be accessed, monorail your view

73
00:04:17.470 --> 00:04:20.020
on how a web application
should be created. And then

74
00:04:20.020 --> 00:04:23.410
the Windsor, microkernel your view
on how dependency injection should

75
00:04:23.410 --> 00:04:26.230
be done? Correct. And I'm
sorry. Now I've asked the

76
00:04:26.230 --> 00:04:29.200
question. The question is what
are some explicit examples of

77
00:04:29.200 --> 00:04:31.780
things that have been brought
over from Microsoft project that

78
00:04:31.780 --> 00:04:35.170
are keeping monorail different and
innovative? Well, the, the big

79
00:04:35.200 --> 00:04:37.540
thing that came over, right?
So this made them closer

80
00:04:37.540 --> 00:04:42.520
together was the concept of
I controller. Okay. I, that

81
00:04:42.520 --> 00:04:44.260
was something that I had
talked about for a while

82
00:04:44.260 --> 00:04:46.750
as wanting in the monorail
framework from just from a

83
00:04:46.750 --> 00:04:49.660
testability perspective, but we had
never gotten to where you

84
00:04:49.660 --> 00:04:51.820
have controllers is you're a
model view controller framework. How

85
00:04:51.820 --> 00:04:54.820
do you implement controllers? No,
we have controllers. So I

86
00:04:54.820 --> 00:04:57.760
control her as in the
interface concept as being the

87
00:04:57.760 --> 00:05:00.730
only thing that you really
needed to have with controller,

88
00:05:00.760 --> 00:05:03.850
it was a fairly heavy
abstract class that you inherited

89
00:05:03.850 --> 00:05:06.550
from the view of a
controller in the monorail world

90
00:05:06.550 --> 00:05:08.650
was a big abstract base
class with a lot of

91
00:05:08.650 --> 00:05:11.920
functionality that you inherit from.
Yes. And so I had

92
00:05:11.920 --> 00:05:15.160
been pushing for a lighter
weight version of that. And

93
00:05:15.160 --> 00:05:17.770
when that came in, there
was a lot of discussion

94
00:05:17.770 --> 00:05:20.590
around how that was really
nice. There was a lot

95
00:05:20.590 --> 00:05:23.110
of positive feedback on that.
And then some of the

96
00:05:23.500 --> 00:05:27.490
committers to the castle project
went through and did an

97
00:05:27.490 --> 00:05:30.160
implementation of that. Very cool.
That's made my life a

98
00:05:30.160 --> 00:05:33.700
lot easier on my apps
where I used castle. And

99
00:05:33.700 --> 00:05:36.430
Phil, do you feel like
you guys are, are kind

100
00:05:36.430 --> 00:05:38.110
of going out there to
crush an open source project?

101
00:05:39.990 --> 00:05:45.810
Absolutely. No, no, of course
not. Yeah. You know, being

102
00:05:45.810 --> 00:05:48.420
from the opensource community myself,
I mean, I I've run

103
00:05:48.420 --> 00:05:51.630
an open source blog engine,
you know, I, I don't

104
00:05:51.630 --> 00:05:55.080
think that's our intention in
any of these things, Presumably

105
00:05:55.080 --> 00:05:56.580
you wouldn't have taken the
job if you thought you

106
00:05:56.580 --> 00:05:58.610
were. If I thought our
only goal Was to crush

107
00:05:58.610 --> 00:06:01.160
open source projects. Yeah. I
wouldn't have taken the job.

108
00:06:01.460 --> 00:06:04.940
I think it, in, in
general, there's sort of this

109
00:06:06.710 --> 00:06:11.210
tension between Microsoft and open
source community about what people

110
00:06:11.210 --> 00:06:14.810
will call the duplication of
efforts. Right. And, and I,

111
00:06:14.810 --> 00:06:18.350
I sort of, you know,
originally kind of like rebelled

112
00:06:18.350 --> 00:06:20.480
against that, but I've come
kind of come around to

113
00:06:20.480 --> 00:06:22.490
a more what I would
like to consider more nuanced

114
00:06:22.520 --> 00:06:26.120
viewpoint on that, which is
that, you know, a, like

115
00:06:26.150 --> 00:06:29.360
most projects are sort of
duplication of ideas of other

116
00:06:29.360 --> 00:06:33.200
projects. Right. You know, just
it copy, but try to

117
00:06:33.200 --> 00:06:35.510
make better. And that's the
hope that we're actually trying

118
00:06:35.510 --> 00:06:38.480
to do something new and
not just rehash restorative been

119
00:06:38.480 --> 00:06:42.290
done, but also that, you
know, in many ways, Microsoft,

120
00:06:42.290 --> 00:06:45.050
for better or for worse,
you know, right or wrong,

121
00:06:45.380 --> 00:06:47.390
this is the situation they're
in, which is that they

122
00:06:47.390 --> 00:06:51.680
do have a market that,
that, you know, can't necessarily

123
00:06:51.710 --> 00:06:55.940
run open source software or,
or a market that won't

124
00:06:55.940 --> 00:06:58.940
try these things. So it,
many times Microsoft still wants

125
00:06:58.940 --> 00:07:02.450
to serve that market right.
Rather than leave them completely

126
00:07:02.450 --> 00:07:05.260
out. I worked in financial
services for seven years and

127
00:07:05.260 --> 00:07:07.180
it was really difficult for
us to get the okay

128
00:07:07.180 --> 00:07:09.460
from legal to bring in
any kind of an open

129
00:07:09.460 --> 00:07:11.380
source frameworks. And it's certainly
not one that we could

130
00:07:11.800 --> 00:07:15.220
lean on, you know, and
build something fundamental on. Now,

131
00:07:15.250 --> 00:07:19.930
Jeffrey, you guys, co-founded the
NBC contribute project, which is

132
00:07:19.960 --> 00:07:22.660
saying that there are things
perhaps that the NBC project

133
00:07:22.660 --> 00:07:24.850
doesn't necessarily provide out of
the box. And you wanted

134
00:07:24.850 --> 00:07:28.030
to add that value right
off the bat. You felt

135
00:07:28.030 --> 00:07:29.590
that, that you found that
this project, as soon as

136
00:07:29.590 --> 00:07:33.610
it was announced, Right. And
Eric Hexter and I were

137
00:07:33.610 --> 00:07:37.750
at the SDR last year,
The software design review for

138
00:07:37.810 --> 00:07:39.490
MVC, when a number of
insiders are brought up to

139
00:07:39.490 --> 00:07:42.610
Microsoft to get a preview
of this, the software and

140
00:07:42.610 --> 00:07:44.710
provide feedback on it. Right.
And we found out that

141
00:07:44.710 --> 00:07:47.260
the first publicly available for
preview is going to be

142
00:07:47.290 --> 00:07:51.460
released in December. So the
day after that was released,

143
00:07:51.700 --> 00:07:54.700
we made that project public.
We'd be, we'd been planning

144
00:07:54.700 --> 00:07:57.730
it for a little while.
And Eric does a lot

145
00:07:57.730 --> 00:08:00.220
of work on the configuration
management and the automatic publishing

146
00:08:00.220 --> 00:08:03.310
and releases and all that
stuff. But essentially we know

147
00:08:03.310 --> 00:08:06.430
that Microsoft's not going to
take a dependency on castle

148
00:08:06.430 --> 00:08:08.620
or in hibernate or structure,
map, or spring, or all

149
00:08:08.620 --> 00:08:11.500
these other third party libraries.
They're not going to take

150
00:08:11.500 --> 00:08:15.580
a dependency on that, but
a DVC contrib can easily

151
00:08:15.580 --> 00:08:18.790
provide the integration points so
that these other libraries and

152
00:08:18.790 --> 00:08:21.550
these other tools can easily
leverage for users of the

153
00:08:21.550 --> 00:08:26.410
Espina MVC framework and provide
extensions on a, what Microsoft

154
00:08:26.440 --> 00:08:29.920
provided. Right? It's a convention
I've seen an opensource to

155
00:08:29.920 --> 00:08:33.160
create a contrib or contributions
project that runs parallel to

156
00:08:33.160 --> 00:08:35.950
that project. I remember the
first time I came upon,

157
00:08:35.950 --> 00:08:38.710
it was when Nancy came
out, Nat, the open source

158
00:08:38.710 --> 00:08:42.970
build server, you know, build
a structure for, for.net and

159
00:08:42.970 --> 00:08:45.070
the net contrib had all
of these other things that

160
00:08:45.070 --> 00:08:48.280
really didn't belong in the
core. So onto that point

161
00:08:48.280 --> 00:08:52.480
about open source and this
particular project, you know, I've

162
00:08:52.480 --> 00:08:55.560
had conversations with various members
of the open source community.

163
00:08:55.920 --> 00:09:00.060
For example, for instance, such
as Hamilton is Hamilton. Hamilton

164
00:09:00.240 --> 00:09:02.760
is the founder of the
castle project. If I remember

165
00:09:02.760 --> 00:09:07.500
correctly. Okay. And just to
get a lot of feedback

166
00:09:07.500 --> 00:09:10.410
from the community, and you'll
notice that the MVC framework

167
00:09:11.190 --> 00:09:14.850
has a lot of extensibility
points in order to make

168
00:09:15.450 --> 00:09:18.870
it easy and possible to
integrate other open source projects.

169
00:09:19.350 --> 00:09:23.580
One point that I'm particularly
happy about is we have

170
00:09:23.580 --> 00:09:26.520
a flavor of the web
application project so that when

171
00:09:26.520 --> 00:09:28.890
you start the project, it
opens up a test wizard

172
00:09:28.890 --> 00:09:32.730
dialogue, and it allows you
to integrate, you know, your

173
00:09:32.730 --> 00:09:35.910
own third party unit test
framework. So whether it's an

174
00:09:35.910 --> 00:09:41.370
unit and the unit or
X unit.net, and, you know,

175
00:09:41.370 --> 00:09:43.680
to, to have that thing
showing up in a visual

176
00:09:43.680 --> 00:09:45.450
studio dialogue, I think that's
new for a lot of

177
00:09:45.450 --> 00:09:48.810
people to, to see that,
you know, this project is

178
00:09:48.810 --> 00:09:53.420
really embracing, you know, integrating
with openings Well, and you're

179
00:09:53.420 --> 00:09:56.180
explicitly enabling Jeffrey and his,
his guys to go and

180
00:09:56.180 --> 00:09:58.380
say, Oh, I can see
where we could give, you

181
00:09:58.380 --> 00:10:01.730
know, breathe new life into
this or that IOC container.

182
00:10:01.730 --> 00:10:04.550
I know that this has
been some recent uptick in

183
00:10:04.550 --> 00:10:08.270
the interest, in a dependency
injection container called Ninjak and

184
00:10:08.270 --> 00:10:11.810
inject, and now has a
contrib project. Does it not?

185
00:10:11.810 --> 00:10:14.390
So I could use that
with can contrib, right? There's

186
00:10:14.390 --> 00:10:18.290
actually six IOC containers that
have integration to the MVC

187
00:10:18.290 --> 00:10:23.330
framework and NBC contrib. There's
the injects spring.net, castle, Windsor

188
00:10:23.390 --> 00:10:27.770
structure, map, unity, unity, and
object builder. So you've got

189
00:10:27.770 --> 00:10:30.650
a lot of choices, right?
So the philosophy is that

190
00:10:31.400 --> 00:10:34.340
choice is good. So whether
it be the MVC framework

191
00:10:34.340 --> 00:10:36.620
or monorail, whether it be
in unit or ms. Test

192
00:10:36.890 --> 00:10:39.260
choice is good, and there's
never going to be one

193
00:10:39.260 --> 00:10:41.900
thing that's going to serve
and satisfy the entire world.

194
00:10:43.010 --> 00:10:46.640
So just like here at
this conference, the one law,

195
00:10:46.670 --> 00:10:51.290
the law of two feet
that applies software to we're

196
00:10:51.290 --> 00:10:52.910
at an open space conference.
And the law of two

197
00:10:52.910 --> 00:10:55.400
feet means that if you
don't like something, you can

198
00:10:55.400 --> 00:10:58.220
walk away. If you're in
a conference session that you're

199
00:10:58.220 --> 00:11:01.550
not appreciating, then you can
just stand up and walk

200
00:11:01.550 --> 00:11:03.560
away. And I've been in
a number of spaces just

201
00:11:03.560 --> 00:11:06.110
now where people have left.
So you can really vote

202
00:11:06.110 --> 00:11:08.870
by using the tool that
makes you the happiest. Oh,

203
00:11:08.870 --> 00:11:12.470
sure. Right. And there's, there's
lots of options. MVC contributes

204
00:11:12.470 --> 00:11:17.000
just a smorgasbord of extra
features that you can use

205
00:11:17.000 --> 00:11:19.490
in conjunction with the MVC
framework. It doesn't take away

206
00:11:19.520 --> 00:11:23.330
anything that Microsoft provides. It
only adds on top of,

207
00:11:23.600 --> 00:11:25.340
are there any places in
MPC country where there's a

208
00:11:25.340 --> 00:11:27.920
statement being made? Like we
think Microsoft did this wrong.

209
00:11:27.920 --> 00:11:30.860
So we providing an alternative,
like a different imagining of

210
00:11:30.860 --> 00:11:33.530
how a controller should work,
or I don't think views

211
00:11:33.530 --> 00:11:35.420
should have been done this
way. Therefore we'll wrap it

212
00:11:35.420 --> 00:11:37.340
and do it in a
different way. Yes. There's a

213
00:11:37.340 --> 00:11:42.490
couple of those one is
the convention controller. And it

214
00:11:42.560 --> 00:11:46.610
has a concept of rescues
where if, if an exception

215
00:11:46.610 --> 00:11:49.370
happens in an action, you
can have it rerouted to

216
00:11:49.370 --> 00:11:51.320
a different action that knows
how to handle errors for

217
00:11:51.320 --> 00:11:55.330
a particular controller. And there's,
there's other Conventions that are

218
00:11:55.330 --> 00:11:57.430
supported in that, in that
controller base class. If you

219
00:11:57.430 --> 00:12:03.340
choose to use it also
view data extensions previously called

220
00:12:03.340 --> 00:12:04.900
smart bag for a little
bit. But if you data

221
00:12:04.900 --> 00:12:10.000
extensions takes the stance, that
strongly type views aren't really

222
00:12:10.030 --> 00:12:14.380
applicable when you have a
application of any complexity and

223
00:12:14.380 --> 00:12:18.700
allows extension methods to strongly
type access, to view data

224
00:12:19.180 --> 00:12:22.600
while while enabling you to
have views without a code

225
00:12:22.600 --> 00:12:25.380
behind file. Interesting. So I
want to take just one

226
00:12:25.380 --> 00:12:27.150
second and thank our sponsors.
And then I want to

227
00:12:27.150 --> 00:12:30.600
ask drew about rescues. Hi,
it's Scott Hanselman here. Hope

228
00:12:30.600 --> 00:12:32.370
you're enjoying the show so
far. I'm coming at you

229
00:12:32.370 --> 00:12:34.860
from another place in time.
Sorry to interrupt the show,

230
00:12:34.860 --> 00:12:36.090
but I want to let
you know that putting together

231
00:12:36.090 --> 00:12:38.760
a podcast like this every
week, isn't free. The folks

232
00:12:38.760 --> 00:12:41.250
that pay the bandwidth bill
is Tellerik they make the

233
00:12:41.250 --> 00:12:43.260
show possible and they also
make some pretty cool products

234
00:12:43.260 --> 00:12:46.590
like teller, excite affinity. It's
a development platform for constructing

235
00:12:46.590 --> 00:12:49.950
websites, community portals, and Internet's
built all on asp.net. Oh,

236
00:12:49.980 --> 00:12:53.250
so you're using the various
well-known goodies like master pages

237
00:12:53.250 --> 00:12:56.220
and membership services, data model
provider, things that you already

238
00:12:56.220 --> 00:12:59.340
know. It's pretty flexible. You've
got a very robust core

239
00:12:59.340 --> 00:13:01.290
that you can customize. You
can plug in anything that

240
00:13:01.290 --> 00:13:04.680
you want from complex applications
for CRM, or just a

241
00:13:04.680 --> 00:13:07.200
little widget that displays the
weather. If you're not big

242
00:13:07.200 --> 00:13:09.630
into the code thing, that's
cool to get a full

243
00:13:09.630 --> 00:13:12.150
set of features out of
the box, like workflow multi-lingual

244
00:13:12.150 --> 00:13:15.060
sites, content, versioning that can
all be added without code.

245
00:13:15.510 --> 00:13:17.940
There's also a whole bunch
of pluggable modules and components

246
00:13:17.940 --> 00:13:21.300
for news blogs, forums, polls
lists. This is all stuff

247
00:13:21.300 --> 00:13:23.460
that you can do without
code. And it's pretty good

248
00:13:23.460 --> 00:13:25.830
looking product as well. You've
got a nice web 2.0

249
00:13:25.830 --> 00:13:28.680
administrative interface that lets you
as well as your boss.

250
00:13:28.680 --> 00:13:30.960
Who's not technical and be
really productive. So check out

251
00:13:31.170 --> 00:13:34.380
site finity.com and we'll get
you right back to the

252
00:13:34.380 --> 00:13:37.860
show. Thanks a lot. So
rescues that Jeffrey mentioned a

253
00:13:37.860 --> 00:13:39.630
moment ago, was this a
way to say that if

254
00:13:40.020 --> 00:13:42.300
something goes wrong within a
controller action, I'm going to

255
00:13:42.300 --> 00:13:45.030
go ahead and redirect to
another one that was borrowed

256
00:13:45.030 --> 00:13:48.180
from monorail. Was it not?
Well, Manuel certainly had it.

257
00:13:49.140 --> 00:13:52.260
Where did that originally come
from? Well, I don't know

258
00:13:52.260 --> 00:13:54.360
where I can't speak to
where it originally came from

259
00:13:54.390 --> 00:13:57.060
because when I got there,
it was already there. The

260
00:13:57.510 --> 00:14:00.840
it's definitely very nice to
have a central spot to

261
00:14:00.840 --> 00:14:04.710
have your exception handling for
website. It's also nice to

262
00:14:04.710 --> 00:14:06.510
be able to do that
by type. And I'm not

263
00:14:06.510 --> 00:14:08.850
sure if the MVC framework
does that by type. Can

264
00:14:08.850 --> 00:14:11.340
you expand on that a
little bit? Yeah. So if

265
00:14:11.340 --> 00:14:14.790
you want a database exception
screen, if you want a

266
00:14:14.790 --> 00:14:18.150
screen for a authentication access,
if you throw, if your

267
00:14:18.240 --> 00:14:21.240
code is throwing an exception,
you do not have access

268
00:14:21.240 --> 00:14:23.940
to do this method. You
can show a screen that

269
00:14:23.940 --> 00:14:26.910
says just that, Oh, it's
a type specific views when

270
00:14:26.910 --> 00:14:28.830
an exception goes wrong. So
you're typing it based on

271
00:14:28.830 --> 00:14:32.580
an exception type. Correct. So
if I throw new Alex,

272
00:14:32.590 --> 00:14:34.560
I'm just trying to think
database exception, or like you

273
00:14:34.560 --> 00:14:37.650
said, a authentication authorization, you
could have separate views for

274
00:14:37.650 --> 00:14:39.690
each of those. Yeah. Yeah.
If you had a framework

275
00:14:39.690 --> 00:14:42.180
exception, you could just show
a generic, Hey, there was

276
00:14:42.180 --> 00:14:46.020
a problem, please retry, if
not contact somebody, if you,

277
00:14:46.230 --> 00:14:48.660
if you caught an application
exception. So one that you've

278
00:14:48.660 --> 00:14:51.410
made that you've thrown such
as a security exception, you

279
00:14:51.410 --> 00:14:54.230
can say, Hey, you're not
authorized to do this. Please

280
00:14:55.040 --> 00:14:57.800
follow these steps and get
permission. Interesting. I can see

281
00:14:57.800 --> 00:14:59.360
where if someone could argue
both that that's a really

282
00:14:59.360 --> 00:15:01.040
good idea, but at the
same time, you're using an

283
00:15:01.040 --> 00:15:04.370
exception and then indirectly causing
an aggregation can see where

284
00:15:04.370 --> 00:15:06.080
someone could argue that you
should catch that and do

285
00:15:06.080 --> 00:15:09.260
the redirect yourself. You certainly
could answer. What do you

286
00:15:09.260 --> 00:15:10.640
think about that, Phil? Is
that something you're going to

287
00:15:10.640 --> 00:15:14.500
put in the NVC? Yeah.
So am I judging by

288
00:15:14.500 --> 00:15:17.400
the name? I'm guessing rescues
came from a rails, which

289
00:15:17.530 --> 00:15:21.370
has the rescue concept. And
so that's definitely something we've

290
00:15:22.360 --> 00:15:24.400
seen. A lot of people
ask us about. So we'll

291
00:15:24.400 --> 00:15:27.280
probably have something like that
at some point. I mean,

292
00:15:27.280 --> 00:15:30.160
right now we have actually
the concept of action filters.

293
00:15:30.160 --> 00:15:32.140
So it's pretty easy to
write one that does that,

294
00:15:32.860 --> 00:15:34.810
but that's something that we're
looking at to have in

295
00:15:34.810 --> 00:15:37.900
the product. And, you know,
I was thinking about the

296
00:15:37.900 --> 00:15:42.820
convention controller, Jeff Jeffrey mentioned,
and the irony there being

297
00:15:42.850 --> 00:15:44.710
in, correct me if I'm
wrong, that I wrote the

298
00:15:44.710 --> 00:15:48.430
first version of that one,
right? The convention control convention

299
00:15:48.910 --> 00:15:51.150
A little bit about this
convention control. Now, certainly if

300
00:15:51.160 --> 00:15:52.870
you've made it this far
into this podcast, and you're

301
00:15:52.870 --> 00:15:54.790
not familiar with MVC, you
might want to back up

302
00:15:54.790 --> 00:15:56.920
or pause and take a
moment to listen to some

303
00:15:56.920 --> 00:16:01.840
of the screencasts or go
up to www.asp.net/nvc. There's a

304
00:16:01.840 --> 00:16:03.670
lot of content that will
get you up to speed

305
00:16:03.670 --> 00:16:06.910
on MVC. So if we're
using terms like action filter

306
00:16:07.240 --> 00:16:09.670
controller, that aren't, you're not
familiar with, you might want

307
00:16:09.670 --> 00:16:11.620
to take a moment to
catch up on that. And

308
00:16:11.620 --> 00:16:15.070
action filters are particularly powerful
aspect of a, of a

309
00:16:15.070 --> 00:16:16.720
machine. I want to come
back to that, but the

310
00:16:16.720 --> 00:16:21.700
notion of an a convention
controller is important because a

311
00:16:21.700 --> 00:16:24.400
fundamental change that controller has
just recently happened with this

312
00:16:24.730 --> 00:16:27.010
latest release. And what is
that and why would someone

313
00:16:27.280 --> 00:16:30.700
dislike it so much that
they would try to recreate

314
00:16:30.700 --> 00:16:33.700
the old style of doing
things? So I'm assuming you're

315
00:16:33.700 --> 00:16:37.000
talking about the, we made,
it made a refactoring where

316
00:16:37.000 --> 00:16:40.900
a controller actions are now
called by another class that

317
00:16:40.900 --> 00:16:43.780
we call the action Invoker
and the controller actions return

318
00:16:43.780 --> 00:16:46.420
a value to them in
the form of an, a

319
00:16:46.430 --> 00:16:49.720
type that derives from action
results. So previously you would

320
00:16:49.720 --> 00:16:53.380
say public void Fu and
then that would be available

321
00:16:53.440 --> 00:16:56.140
to the net just by
virtue of the fact that

322
00:16:56.140 --> 00:16:59.440
it's public. Now, previously, previously,
as we mentioned before, you

323
00:16:59.440 --> 00:17:01.180
used to have to put
an attribute on it and

324
00:17:01.180 --> 00:17:03.880
say, controller action. Then we
just said, if it's public

325
00:17:04.060 --> 00:17:06.820
as part of a controller,
it's available, but it always

326
00:17:06.820 --> 00:17:11.110
had a void return value.
And that made things inconvenient.

327
00:17:12.700 --> 00:17:16.240
Well, that may, what made
things inconvenient was that within

328
00:17:16.240 --> 00:17:19.090
your action method, you had
to call render view. And

329
00:17:19.090 --> 00:17:21.340
what render view would do
was actually try to use

330
00:17:21.340 --> 00:17:24.910
the HP pipeline and spit
out the final view and

331
00:17:24.910 --> 00:17:28.540
use and all of that.
And the problem there that

332
00:17:28.750 --> 00:17:30.340
lied in that is when
you were running a unit

333
00:17:30.340 --> 00:17:32.470
test, you're not running in
the context of a full

334
00:17:32.470 --> 00:17:37.000
request with the whole asp.net
pipeline. And so it became

335
00:17:37.000 --> 00:17:39.940
a big hassle to test
even simple action methods because

336
00:17:39.940 --> 00:17:43.570
you had a mock out
using a fake test doubles

337
00:17:43.840 --> 00:17:47.200
or a mock framework. You
had to basically fake out

338
00:17:47.200 --> 00:17:50.100
the whole pipeline just to
test your action method. So

339
00:17:50.100 --> 00:17:52.140
If I understand what you're
saying, this notion of separation

340
00:17:52.350 --> 00:17:55.050
of concerns is fundamental in
that it, it's not really

341
00:17:55.050 --> 00:18:00.060
the controller's responsibility to go
futsing around inside of HTTP

342
00:18:00.060 --> 00:18:02.580
context or doing things with
a response object to the

343
00:18:02.580 --> 00:18:05.100
request object. Certainly they can
do that, but if you

344
00:18:05.100 --> 00:18:07.710
really want to separate your
concerns, such that things are

345
00:18:07.710 --> 00:18:10.500
very testable, you don't want
to do that. If someone

346
00:18:10.500 --> 00:18:13.860
calls render view, that means
that now we're running around

347
00:18:13.860 --> 00:18:17.580
inside of HTB context in
our stack frame, we're literally

348
00:18:17.580 --> 00:18:20.790
waiting around. So you've changed
it. So you, rather than

349
00:18:20.790 --> 00:18:23.370
having a void return value,
you return an action result.

350
00:18:24.480 --> 00:18:27.300
And then the work of
calling render view happens elsewhere.

351
00:18:27.740 --> 00:18:30.890
That's correct. So the, the
actual work of calling the

352
00:18:30.890 --> 00:18:34.220
interview happens after your action
method has been evoked. The

353
00:18:34.220 --> 00:18:36.890
key point there is that
as much as possible, we

354
00:18:36.890 --> 00:18:40.070
want you to focus on
your business logic and less

355
00:18:40.070 --> 00:18:43.280
on framework writing code for
the framework. The more you're

356
00:18:43.280 --> 00:18:45.800
thinking about the framework and
what you need, how to

357
00:18:45.800 --> 00:18:49.850
manipulate our framework, the less,
you're a less your focus

358
00:18:49.850 --> 00:18:52.370
on what you really need
to get done. And, and

359
00:18:52.490 --> 00:18:55.160
we just want to minimize
that if we minimize that

360
00:18:55.370 --> 00:18:58.190
to a degree where you're
almost never really thinking about

361
00:18:58.190 --> 00:19:00.440
the framework, then we're doing
our job well. Okay. So

362
00:19:00.440 --> 00:19:03.740
now Jeffrey's project added a
convention controller that I think

363
00:19:03.740 --> 00:19:06.080
you had originally written, and
what does convention controller do?

364
00:19:07.830 --> 00:19:11.600
It, it adds some extra
functionality so that you don't

365
00:19:11.600 --> 00:19:16.850
have to, so you don't
have to have as many

366
00:19:16.850 --> 00:19:19.910
lines of code, do the
same thing. For instance, if

367
00:19:19.910 --> 00:19:22.310
you don't want to declare
the name of the view,

368
00:19:22.670 --> 00:19:25.430
then you don't have to,
it'll just add, it'll just

369
00:19:25.430 --> 00:19:27.680
pick the view. That is
the same name as the

370
00:19:27.680 --> 00:19:33.170
action name and the, the
returning the action result. I

371
00:19:33.200 --> 00:19:35.990
actually just this past week
with the new code drop

372
00:19:35.990 --> 00:19:39.470
of the MVC framework, we've
refactored a bit to keep

373
00:19:39.470 --> 00:19:41.660
in line with the new
code for the MVC framework.

374
00:19:41.660 --> 00:19:45.080
So we're kind of following
along, right? And there's not

375
00:19:45.080 --> 00:19:47.510
a whole lot of disagreement
as far as the philosophy

376
00:19:48.200 --> 00:19:51.140
from what Microsoft is, is
coming out with. And with

377
00:19:51.140 --> 00:19:53.870
NBC contrib, there's only a
few points, but for most,

378
00:19:53.900 --> 00:19:56.960
for the most part, you
know, they obviously contrib is

379
00:19:56.990 --> 00:20:00.530
adding on as opposed to
taking the stance that we

380
00:20:00.530 --> 00:20:03.170
think is being done wrong.
So let's provide something different.

381
00:20:03.230 --> 00:20:05.750
Okay. So less of the
functionality that's provided in NBC

382
00:20:05.750 --> 00:20:09.500
contributors focused on disagreement or
some kind of political statement

383
00:20:09.500 --> 00:20:12.440
within code and more about,
we just want to add

384
00:20:12.440 --> 00:20:13.820
this. We want to make
this available. We want to

385
00:20:13.820 --> 00:20:17.360
make this one more choice,
right? And as there's going

386
00:20:17.360 --> 00:20:19.820
to be many, many more
changes, and as the MVC

387
00:20:19.820 --> 00:20:22.850
framework changes, the MVC country
project is going to be

388
00:20:22.850 --> 00:20:26.270
refactored along with that. And
so, you know, we think

389
00:20:26.270 --> 00:20:29.480
Microsoft's doing a pretty good
job and we're providing more

390
00:20:29.480 --> 00:20:34.820
choices. And so there's, there's
a few points where we

391
00:20:34.820 --> 00:20:38.540
provide alternatives, but we don't
try to take anything away.

392
00:20:38.780 --> 00:20:40.610
Do you think that this
has something to do with

393
00:20:40.610 --> 00:20:43.190
the fact that Phil and
the MVC team have tried

394
00:20:43.190 --> 00:20:45.350
to really engage with the
community and not do this

395
00:20:45.350 --> 00:20:48.400
in a vacuum? I would
think that in the past,

396
00:20:48.400 --> 00:20:51.730
If this were done in
an ivory tower somewhere, NBC

397
00:20:51.730 --> 00:20:55.210
contrib might be more of
a statement that your eyes

398
00:20:55.210 --> 00:20:57.400
aren't listening, you're not doing
this right. We're going to,

399
00:20:57.610 --> 00:20:59.050
we're going to make we're
going, gonna do this differently.

400
00:20:59.400 --> 00:21:02.160
Well, that's exactly why, I
mean, this seems, I mean,

401
00:21:02.160 --> 00:21:03.660
you guys are all very
friendly and stuff. Now we

402
00:21:03.660 --> 00:21:06.630
know Phil's a nice guy.
Yes. Right now we're hugging.

403
00:21:06.930 --> 00:21:08.910
But yeah, I'm just saying
that we're, you guys are

404
00:21:08.910 --> 00:21:13.200
saying that they're, they're making
changes that are substantive from

405
00:21:13.200 --> 00:21:15.480
release to release such that
there's less and less, that

406
00:21:15.480 --> 00:21:17.850
you disagree on. Cause it's
more of a community design.

407
00:21:18.240 --> 00:21:20.850
Right. And there's some, there's
some ideas that popped into

408
00:21:21.030 --> 00:21:24.210
NBC contribute early that they
took and, and put in

409
00:21:24.420 --> 00:21:29.130
into the framework directly. So
they've been super transparent, I

410
00:21:29.130 --> 00:21:31.800
think. Cause you just say
super, super transparent. I think

411
00:21:31.800 --> 00:21:34.680
all the different teams at
Microsoft could take a lesson

412
00:21:34.680 --> 00:21:37.950
from the MVC framework team
about how to involve community

413
00:21:37.950 --> 00:21:41.580
input. I mean, code drops
every six weeks. Has that

414
00:21:41.580 --> 00:21:45.390
ever happened? I don't know.
Not in my lifetime. So

415
00:21:45.390 --> 00:21:49.020
I think they're doing a
tremendous job taking input and

416
00:21:49.020 --> 00:21:52.680
providing insight into what they're
doing. And yeah, NBC contrib

417
00:21:52.710 --> 00:21:56.040
is just to provide extra
options. And as the MVC

418
00:21:56.040 --> 00:21:59.490
framework changes, NVC, Trey will
be refactored or along with

419
00:21:59.490 --> 00:22:01.650
it. Yeah. True. Do you
think that there's anything that

420
00:22:01.980 --> 00:22:05.040
is going on in MVC
contrib that can be pulled

421
00:22:05.040 --> 00:22:08.100
into monorail or what aspects
of Manuel and the castle

422
00:22:08.100 --> 00:22:10.500
project have come over to
MVC contrib? One of the

423
00:22:10.500 --> 00:22:12.840
first things that I saw
come over to the MVC

424
00:22:12.840 --> 00:22:16.500
contrib was the discussion of
the container aspect was the

425
00:22:16.500 --> 00:22:19.740
alternate view choices. So if
you don't like the way

426
00:22:20.280 --> 00:22:23.610
the syntax of the asp.net
view engine works, you can

427
00:22:23.610 --> 00:22:26.190
go and you can use
in velocity, which is alternate

428
00:22:26.250 --> 00:22:28.770
templating system. Because by default,
we have a thing called

429
00:22:28.770 --> 00:22:31.080
the web forms view engine
that uses the very familiar

430
00:22:31.080 --> 00:22:34.410
ASP X syntax is doing
things, but in monorail your

431
00:22:34.410 --> 00:22:35.880
view, and you have a
number of your engines, both

432
00:22:35.940 --> 00:22:39.120
rail and, and velocity. So
how is in velocity different

433
00:22:39.120 --> 00:22:41.790
than using the ASP X
pages that we're familiar with?

434
00:22:42.120 --> 00:22:45.270
Well, the key difference for
me is the level of

435
00:22:45.270 --> 00:22:48.420
control that you have over
the HTML generated. I think

436
00:22:48.420 --> 00:22:50.190
you can still do a
lot of this with the,

437
00:22:51.020 --> 00:22:54.360
the, the web forms engine.
But for me it was

438
00:22:54.360 --> 00:22:57.750
conceptually simpler to control. It
was, it was a lighter

439
00:22:57.750 --> 00:23:01.290
weight concept. You had to
know the HTML, but if

440
00:23:01.290 --> 00:23:03.120
you did, and you wanted
that level of power, it

441
00:23:03.120 --> 00:23:06.630
gave it to you. Hi,
this is Scott. And I

442
00:23:06.630 --> 00:23:08.700
want to let you know
that this week's Hansel minutes

443
00:23:08.700 --> 00:23:12.630
is brought to you by
COVID better.com the code better.com

444
00:23:12.780 --> 00:23:15.450
blog network it's made up
of over 20 industry leaders

445
00:23:15.450 --> 00:23:18.420
and speakers who were passionate
about delivering tried and true

446
00:23:18.420 --> 00:23:22.380
solutions to real world problems
for building better software. These

447
00:23:22.380 --> 00:23:24.180
guys are not only our
sponsor this week, but they're

448
00:23:24.180 --> 00:23:27.510
also my friends. The COVID
better blog network. It's where

449
00:23:27.510 --> 00:23:31.500
industry leaders blog. You can
find them@codebetter.com as well as

450
00:23:31.500 --> 00:23:34.680
devilish S T E V
L I C I O

451
00:23:34.710 --> 00:23:38.580
dot U S. So in
web forms, we have some,

452
00:23:38.610 --> 00:23:42.720
some limited control with, with,
with controls, but we have

453
00:23:42.810 --> 00:23:45.170
master pages. We have theming,
we have scanning have a

454
00:23:45.170 --> 00:23:47.960
lot of CSS stuff that
is built into visual studio

455
00:23:47.960 --> 00:23:51.800
with a web forms view
engine with end velocity. Does

456
00:23:51.800 --> 00:23:53.300
it, what does it look
like? Does it look like

457
00:23:53.450 --> 00:23:57.800
classic ASP in velocity looks
much closer to classic ASP

458
00:23:57.800 --> 00:24:01.250
in that it's, it's a
single pass. We have, I

459
00:24:01.250 --> 00:24:04.850
think both frameworks have, you
know, master pages. We don't

460
00:24:04.850 --> 00:24:11.810
have a really killer IDE
experience. It's it is. It's

461
00:24:11.810 --> 00:24:13.970
just much simpler, kind of
more raw just right there

462
00:24:13.970 --> 00:24:15.650
at the, give you a
complete control of your anchor

463
00:24:15.650 --> 00:24:18.260
brackets at a very basic
level. Exactly. It's, it's more

464
00:24:18.260 --> 00:24:21.380
raw. There are some interesting
extension points. As far as

465
00:24:21.800 --> 00:24:27.200
if you use some syntax
options, then you can get

466
00:24:27.230 --> 00:24:32.300
more interesting control. So say
for output default auto HTML

467
00:24:32.300 --> 00:24:36.740
and code default auto HTML
code. Okay. So there's a

468
00:24:36.740 --> 00:24:38.900
number of options. When someone
wants to go and decide

469
00:24:39.020 --> 00:24:41.570
whether they're going to use
a different controller, there's certainly

470
00:24:41.570 --> 00:24:44.180
a million options on the
model side and three, four

471
00:24:44.180 --> 00:24:46.520
different options. On the view
side, I've spoken about an

472
00:24:46.520 --> 00:24:49.100
animal in the past, is
that velocity, the web forms

473
00:24:49.100 --> 00:24:51.830
view engine, and then also
one called called braille. Yeah.

474
00:24:51.830 --> 00:24:56.480
And braille would be the
BU based an alternate.net language

475
00:24:56.930 --> 00:25:02.450
that has some very interesting
type declarations. It's almost pie.

476
00:25:02.450 --> 00:25:05.310
It's very Python like, and
it's syntax it's yes. It's,

477
00:25:05.310 --> 00:25:08.210
it's got a very strong
Python since to it. Now

478
00:25:08.210 --> 00:25:09.860
it kind of in conclusion,
I wanted to ask you

479
00:25:09.860 --> 00:25:12.080
feel, there's been a lot
of talk here@all.net conference about

480
00:25:12.080 --> 00:25:15.560
the DLR and dynamic languages.
You know, how long till

481
00:25:15.560 --> 00:25:18.620
we get Ruby or Python
views or controllers, that sounds

482
00:25:18.620 --> 00:25:20.060
like a pretty exciting thing.
And I've been seeing some

483
00:25:20.060 --> 00:25:22.010
stuff on your blog that
you've been messing around with

484
00:25:22.010 --> 00:25:24.460
Ruby and MVC. Yeah. I'm
a big fan of the

485
00:25:24.460 --> 00:25:29.980
dynamic languages. I've I sort
of wrote on my posts

486
00:25:30.000 --> 00:25:32.110
on my blog that I'm
not quite ready to get

487
00:25:32.110 --> 00:25:36.550
all meta meta, meta programming,
you know, hours at a

488
00:25:36.550 --> 00:25:39.640
time. But I do see
a huge value even now

489
00:25:39.940 --> 00:25:43.090
in using dynamic languages for
configuration type stuff like using

490
00:25:43.090 --> 00:25:46.300
DSLs. So I've written, I'll
be posting to my blog

491
00:25:46.330 --> 00:25:51.040
pretty soon, the ability to
define routes and Ruby for

492
00:25:51.040 --> 00:25:54.040
an MVC project, as well
as an update to my

493
00:25:54.040 --> 00:25:57.760
Ruby view engine where you
it's similar to our HTML

494
00:25:57.760 --> 00:26:02.200
and you can use Ruby
in the view. So Our

495
00:26:02.200 --> 00:26:05.290
HTML being the default Ruby
view that rails uses. Yeah,

496
00:26:05.410 --> 00:26:07.510
Yeah. It's similar to, it's
a similar spirit. I just

497
00:26:07.510 --> 00:26:10.540
called it that because, you
know, to, it was very

498
00:26:10.540 --> 00:26:13.480
similar to that, but I
don't yet support layouts, which

499
00:26:13.480 --> 00:26:16.900
is like the master page
equivalent. But I think we'll

500
00:26:16.900 --> 00:26:20.650
see a lot more, a
lot more integration and hybrid

501
00:26:20.650 --> 00:26:25.000
approaches where people are, are
mixing static languages with dynamic

502
00:26:25.000 --> 00:26:27.250
languages. And I'm hoping that
MVC is also one of

503
00:26:27.250 --> 00:26:29.530
the first projects that showed
it, demonstrates how to do

504
00:26:29.530 --> 00:26:31.330
that. I mean, all of
this DLR work I'm doing

505
00:26:31.330 --> 00:26:33.760
on my own time, it's
just kind of, you know,

506
00:26:34.090 --> 00:26:35.380
It's a feature now, and
this is the kind of

507
00:26:35.380 --> 00:26:36.970
thing that you do at
Microsoft. Figure out if it's

508
00:26:36.970 --> 00:26:39.850
going to be possible and
people want it. Exactly. You

509
00:26:39.850 --> 00:26:41.560
could. Maybe it wouldn't be
unfair to say that we

510
00:26:41.560 --> 00:26:44.520
could envision a future where
I might an in hibernate

511
00:26:44.520 --> 00:26:47.670
model. I might have a
velocity view with a convention

512
00:26:47.670 --> 00:26:49.710
controller, or maybe I might
swap out a couple of

513
00:26:49.830 --> 00:26:54.000
iron, iron, Ruby views, all
working together and happiness, joy

514
00:26:54.570 --> 00:26:57.450
have fun. Very cool. Well,
thank you very much. Phil

515
00:26:57.450 --> 00:27:00.270
hack, Jeffrey Palermo and true
sellers for sitting down and

516
00:27:00.270 --> 00:27:02.370
talking to me today. This
has been another episode of

517
00:27:02.370 --> 00:27:09.980
Hanselminutes and we'll talk to
you again next week. <inaudible>.

