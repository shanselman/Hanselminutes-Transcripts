WEBVTT FILE

1
00:00:00.480 --> 00:00:04.230
Hey folks. Today's episode was
sponsored by Datadog it's. A

2
00:00:04.230 --> 00:00:08.460
cloud scale monitoring and analytics
platform. Datadog was built to

3
00:00:08.460 --> 00:00:12.510
bring clarity to complex dynamic
applications in the cloud, on

4
00:00:12.510 --> 00:00:16.890
premises in containers or wherever
they run with beautiful dashboards,

5
00:00:16.980 --> 00:00:21.360
distributed, tracing, and seamless integrations.
With more than 200 technologies,

6
00:00:21.780 --> 00:00:26.190
including Azure and Docker and
PagerDuty Datadog provides deep end

7
00:00:26.190 --> 00:00:28.860
to end visibility into the
health and performance of modern

8
00:00:28.860 --> 00:00:33.300
apps. Visualize key metrics, set
alerts to identify anomalies and

9
00:00:33.300 --> 00:00:36.570
collaborate with your team to
troubleshoot and fix issues fast.

10
00:00:37.110 --> 00:00:39.330
I'd like you to try
it yourself by starting a

11
00:00:39.330 --> 00:00:43.290
free 14 day trial today,
listeners of this podcast will

12
00:00:43.290 --> 00:00:49.530
also get a free Datadog
t-shirt get started at bitly.com/data

13
00:00:49.530 --> 00:01:08.970
dog shirt. That's bitly.com/datadog shirt.
Hi, this is Scott Hanselman.

14
00:01:08.970 --> 00:01:11.040
This is another episode of
Hansel minutes. And today I'm

15
00:01:11.040 --> 00:01:13.500
talking with Tara rock. She
is a program manager at

16
00:01:13.500 --> 00:01:16.770
Microsoft and she owns the
windows subsystem for Linux. How's

17
00:01:16.770 --> 00:01:19.590
it going? Hey Scott, thanks
for having me. Yeah, thanks

18
00:01:19.590 --> 00:01:21.450
for talking to me about
this. Like I'm a huge

19
00:01:21.480 --> 00:01:24.030
fan of this feature. This
is the feature that I

20
00:01:24.030 --> 00:01:25.590
like to go and think
if I talk to a

21
00:01:25.590 --> 00:01:27.960
group of people and I
say, who here knows you

22
00:01:27.960 --> 00:01:31.080
can run like Linux natively
on windows. And like one

23
00:01:31.080 --> 00:01:33.150
hand goes up, but the
rest of the people are

24
00:01:33.150 --> 00:01:35.880
like, what? And then I
go to the windows store

25
00:01:35.880 --> 00:01:37.950
and search for Linux, and
then it's like, right there.

26
00:01:37.950 --> 00:01:39.840
I'm like, you can download
Linux and the windows store.

27
00:01:40.200 --> 00:01:42.780
And then all of the,
like, what's the, what's it

28
00:01:42.780 --> 00:01:45.990
like the 12 levels of
grief. Like people like denial

29
00:01:45.990 --> 00:01:51.350
and then acceptance. And it's
great to see when people

30
00:01:51.350 --> 00:01:54.470
go through that process right
in front of you. Oh

31
00:01:54.470 --> 00:01:57.290
yeah. And they're like, I
don't want this to be

32
00:01:57.290 --> 00:01:59.690
true, but also I need
it to be true. How

33
00:01:59.690 --> 00:02:01.640
do I feel about this?
What should I do about

34
00:02:01.640 --> 00:02:04.790
this? Yeah, it really is
something else. And that's what

35
00:02:04.790 --> 00:02:09.500
makes working on this product
so much fun. So break

36
00:02:09.500 --> 00:02:11.570
it down. How long has
this been out? I know

37
00:02:11.570 --> 00:02:13.700
that there was, it was
a beta for awhile. I

38
00:02:13.700 --> 00:02:15.890
talked to some people who
say I tried it a

39
00:02:15.890 --> 00:02:17.460
minute ago. I didn't do
what I wanted it to

40
00:02:17.460 --> 00:02:20.600
do. Or I thought it
was a beta like break,

41
00:02:20.690 --> 00:02:22.640
break it down for me.
Where is this feature? And

42
00:02:22.640 --> 00:02:26.690
how do I? Yeah, so
basically this was called in

43
00:02:26.690 --> 00:02:30.410
its first generation bash on
windows. And that was released

44
00:02:30.410 --> 00:02:34.490
in May, 2016 at Microsoft build.
And that's when I was

45
00:02:34.490 --> 00:02:37.910
first announced. And since then,
it's evolved quite a bit.

46
00:02:38.240 --> 00:02:42.620
The beta tag came off
about a year later, and

47
00:02:42.650 --> 00:02:46.430
now this is a fully
supported feature. So you can

48
00:02:46.430 --> 00:02:51.740
actually install a distro from
the windows store. We have

49
00:02:51.740 --> 00:02:54.080
a variety of flavors of
Linux that you can get

50
00:02:54.140 --> 00:03:01.420
ranging from Ubuntu to Debbie
and to Souza. And you

51
00:03:01.420 --> 00:03:06.490
install that from the Microsoft
store and to actually get

52
00:03:06.490 --> 00:03:10.690
the underlying technology that lets
you run these Onex binaries

53
00:03:10.690 --> 00:03:14.620
on windows. You enable an
optional when those feature called

54
00:03:14.620 --> 00:03:18.550
the windows subsystem for Linux.
So once you go, you

55
00:03:18.550 --> 00:03:21.670
enable that you then install
your favorite district from the

56
00:03:21.670 --> 00:03:25.000
store. And then you're good
to go to start using

57
00:03:25.000 --> 00:03:28.650
this command line environment. Do
I need to like turn

58
00:03:28.650 --> 00:03:31.350
on hyper V or do
I need pro like my

59
00:03:31.350 --> 00:03:34.980
wife has windows home. Can
she run this? Yeah, you

60
00:03:34.980 --> 00:03:38.160
can run this on any
windows skew. And as long

61
00:03:38.160 --> 00:03:43.320
as it's the windows 10
anniversary update or later you're

62
00:03:43.320 --> 00:03:45.810
good to go. You don't
need to enable hyper V

63
00:03:45.810 --> 00:03:50.490
or other optional features. Just
that windows subsystem for one

64
00:03:50.490 --> 00:03:53.760
X or as we call
it WSL for short, since

65
00:03:53.760 --> 00:03:57.180
that's a bit of mouthful,
once you enable that, you're

66
00:03:57.180 --> 00:04:01.500
good to go. Okay. So
WSL is anywhere and that

67
00:04:01.500 --> 00:04:04.670
means it's on my, my
wife's surface laptop or any,

68
00:04:04.860 --> 00:04:06.550
it doesn't matter that the
age of the machine it's

69
00:04:06.550 --> 00:04:09.750
shift simply if you have
windows 10 anniversary or up

70
00:04:10.290 --> 00:04:13.260
or later. So basically if
you're running windows update on

71
00:04:13.260 --> 00:04:15.270
the regular or it's getting
run on the regular, you

72
00:04:15.270 --> 00:04:20.640
probably have this already. That's
right. Okay. And you said

73
00:04:20.640 --> 00:04:23.010
that it doesn't need hyper
V. So when it's running,

74
00:04:23.010 --> 00:04:25.920
like if I go run
this, if I type start

75
00:04:25.920 --> 00:04:27.690
menu and I type bash
and I hit enter and

76
00:04:27.690 --> 00:04:30.540
I type like VIM and
I'm now I'm running them.

77
00:04:30.870 --> 00:04:33.870
It's not in a virtual
machine, but it's still Linux

78
00:04:34.530 --> 00:04:37.890
That's right. And that's where
really the magic of WSL

79
00:04:37.890 --> 00:04:41.040
comes in. So this is
a lightweight command line environment

80
00:04:41.310 --> 00:04:45.240
that actually doesn't require the
overhead of a virtual machine.

81
00:04:45.750 --> 00:04:49.200
So really the way to
think about WSL is this

82
00:04:49.320 --> 00:04:53.190
underlying translation layer where we're
taking Linux user mode and

83
00:04:53.250 --> 00:04:56.250
that's the app that you're
getting from the store. And

84
00:04:56.250 --> 00:04:59.010
then we take those Cisco
calls and we translate them

85
00:04:59.040 --> 00:05:04.140
over into basically a way
the windows kernel can understand

86
00:05:04.140 --> 00:05:08.160
it. And that's what WSL
does is it allows for

87
00:05:08.160 --> 00:05:12.150
that translation. Okay. So I'm
trying to like translate this

88
00:05:12.150 --> 00:05:15.300
in my brain and paraphrase
and also like come to

89
00:05:15.300 --> 00:05:16.980
terms. So I'm going to,
you're going to watch me

90
00:05:16.980 --> 00:05:20.880
go through the 12, like
levels of whatever during this

91
00:05:20.880 --> 00:05:24.900
podcast, which is cool. And
I appreciate you guiding me

92
00:05:24.900 --> 00:05:27.780
through that. My, my acceptance
at the, the, ultimately I

93
00:05:27.780 --> 00:05:30.060
will accept WSL as being
a thing that I want.

94
00:05:32.760 --> 00:05:37.290
Okay. So if I write
some code in whatever C-sharp

95
00:05:37.320 --> 00:05:42.090
or Java or C, and
I say file.open, at some

96
00:05:42.090 --> 00:05:45.240
point, someone's got to go
to the actual disc and

97
00:05:45.240 --> 00:05:47.160
look for the file and
open the file, right? So

98
00:05:47.160 --> 00:05:51.000
there's all these layers of
abstraction. And I know windows

99
00:05:51.270 --> 00:05:54.300
32, or what they call
wind 32 development has the

100
00:05:54.570 --> 00:05:57.770
wind 32 and then ultimately
the Colonel underneath. So there

101
00:05:57.770 --> 00:06:00.440
is a file open that
everybody uses to go and

102
00:06:00.440 --> 00:06:03.530
open files. And that's, you
know, that the, what they

103
00:06:03.530 --> 00:06:06.650
call the wind 32 API,
that's a call into the

104
00:06:06.650 --> 00:06:09.860
system. Now you use the
term CIS call sys C

105
00:06:09.860 --> 00:06:12.770
a L. Yup. And that's,
that's a Linux thing, or

106
00:06:12.770 --> 00:06:15.100
that's an operating system thing.
So this is more of

107
00:06:15.100 --> 00:06:19.990
an operating system thing. So
what we're doing is Linux

108
00:06:20.050 --> 00:06:26.380
expects the underlying operating system
architecture to be that of

109
00:06:26.380 --> 00:06:31.630
Lennox. We're putting this translation
layer where when in user

110
00:06:31.630 --> 00:06:36.310
mode, you're trying to call
the Linux operating system. Now

111
00:06:36.310 --> 00:06:40.270
this kernel component will actually
take those SIS calls and

112
00:06:40.270 --> 00:06:44.380
translate them into what the
windows operating system can understand.

113
00:06:44.380 --> 00:06:47.500
So then we can dig
into your file system IO.

114
00:06:47.860 --> 00:06:52.090
And So if I say,
I want to do a

115
00:06:52.090 --> 00:06:55.900
file read SIS call that
is going to ultimately get

116
00:06:55.900 --> 00:06:57.700
called, you know, get the
work is going to get

117
00:06:57.700 --> 00:07:01.360
done by the Colonel. But
in this case, it's all

118
00:07:01.360 --> 00:07:04.870
an X all the way
down, except for the actual

119
00:07:04.870 --> 00:07:08.440
kernel windows. Does the work
That's correct. And so we

120
00:07:08.440 --> 00:07:13.630
actually use a technology that
is called Pico processes. So

121
00:07:13.630 --> 00:07:16.390
we take each of those
SIS calls and we kind

122
00:07:16.390 --> 00:07:18.340
of pack it them up.
And what we call a

123
00:07:18.340 --> 00:07:24.370
Pico process, which then the
WSL layer of the Colonel

124
00:07:24.610 --> 00:07:30.280
can translate into a windows
system call. And it's actually

125
00:07:30.280 --> 00:07:34.450
kind of interesting that this
technology was created by Microsoft

126
00:07:34.450 --> 00:07:39.070
research. And it's a project
called Drawbridge, which essentially bridges

127
00:07:39.070 --> 00:07:43.330
the gap between the Linux
and windows kernels. And it

128
00:07:43.330 --> 00:07:47.200
powers many technologies that we
use here at Microsoft, including

129
00:07:47.350 --> 00:07:51.280
SQL server on Linux. And
so we are also using

130
00:07:51.280 --> 00:07:56.040
this technology to make it
possible, to essentially take one

131
00:07:56.040 --> 00:08:00.820
Linux and run it on
windows. <inaudible> okay. This is

132
00:08:00.820 --> 00:08:02.860
interesting. So like all of
the neurons are starting to

133
00:08:02.860 --> 00:08:06.490
like fire and I'm attaching
different things. Like you're probably

134
00:08:06.490 --> 00:08:11.470
familiar with the very old
wine project where people have

135
00:08:11.800 --> 00:08:14.740
without looking at the windows
source code made it. So

136
00:08:14.740 --> 00:08:19.450
some windows applications can run
on Linux. The, the acronym

137
00:08:19.450 --> 00:08:23.350
wine, w I N E
actually means wine is not

138
00:08:23.350 --> 00:08:27.460
an emulator. And then when
someone calls a wind 32

139
00:08:27.460 --> 00:08:31.480
call wine, we'll translate that
into a positive call or

140
00:08:31.480 --> 00:08:35.380
a, an underlying operating system
call. So when I go

141
00:08:35.380 --> 00:08:39.790
and say open, you know,
like CIS called to SIS,

142
00:08:39.800 --> 00:08:44.020
underscore open, you see it,
you see it going by

143
00:08:44.020 --> 00:08:46.450
and you stop it before
it gets to the windows

144
00:08:46.450 --> 00:08:48.850
kernel. And you just let
the, you stop it before

145
00:08:48.850 --> 00:08:50.500
it gets to the Linux
kernel and windows handles it.

146
00:08:50.500 --> 00:08:52.210
And there's really no Linux
kernel at all. Like you

147
00:08:52.210 --> 00:08:55.000
didn't install the Linux kernel
on the system, did you?

148
00:08:55.500 --> 00:08:58.680
That's right. There is no
Linux kernel on the system

149
00:08:58.800 --> 00:09:01.080
where he just translating those
calls as they come in

150
00:09:01.080 --> 00:09:05.120
right on the fly. Well,
that makes me think then

151
00:09:05.120 --> 00:09:08.030
if I were maybe opening
a file in the Linux

152
00:09:08.030 --> 00:09:10.850
and the WSL world and
opening it in the windows

153
00:09:10.850 --> 00:09:12.500
world at the same time,
like, let's say it was

154
00:09:12.500 --> 00:09:16.550
on my desktop then, because
the Colonel is ultimately the

155
00:09:16.550 --> 00:09:19.250
one that does the file
opening, both Linux and windows

156
00:09:19.250 --> 00:09:21.680
could be told that that
file was already open. Right.

157
00:09:22.040 --> 00:09:25.550
Which seems like a good,
Yeah. And you can communicate

158
00:09:25.550 --> 00:09:29.660
between the Linux world or
the WSL environment that you're

159
00:09:29.660 --> 00:09:32.870
running as well as the
windows world. So let's say

160
00:09:32.870 --> 00:09:36.590
you want to open up
one of the projects that

161
00:09:36.590 --> 00:09:41.690
you're working on. Let's say
a node application in windows,

162
00:09:41.780 --> 00:09:45.500
on your vs code environment
and windows, you say code

163
00:09:45.500 --> 00:09:49.730
dot from WSL in that
area path. And we actually

164
00:09:49.730 --> 00:09:53.690
open up that project for
you in vs. Code on

165
00:09:53.690 --> 00:09:57.710
windows, but it's your Linux
project. Oh, okay. So then

166
00:09:58.010 --> 00:10:01.700
that's interesting. So if I
type code dot, whatever that

167
00:10:01.700 --> 00:10:04.490
means that you in the
Linux world and the WSL

168
00:10:04.490 --> 00:10:07.190
world have kind of added
a, a kind of a

169
00:10:07.190 --> 00:10:12.110
path, you know, and when
you see Linux attempt to,

170
00:10:12.110 --> 00:10:15.320
and presumably fail to run
a windows executable, you just

171
00:10:15.320 --> 00:10:18.920
pass that word off to
windows itself. Yeah. That's, I

172
00:10:18.920 --> 00:10:21.320
mean, that's fundamentally what we're
looking at here, and we

173
00:10:21.320 --> 00:10:23.900
call this interrupt. Like, that's
the term that we've been

174
00:10:23.900 --> 00:10:26.900
using, where you can go
back and forth between your

175
00:10:26.900 --> 00:10:29.960
windows and your Linux environment.
And that's what makes us

176
00:10:31.040 --> 00:10:33.410
a little bit interesting where
we're, when we're talking about

177
00:10:33.410 --> 00:10:37.670
virtualization, we think about virtual
machines and containers. And I

178
00:10:37.670 --> 00:10:40.850
think the way you can
think about WSL is somewhere

179
00:10:40.850 --> 00:10:45.320
in between the two where
you get this environment that

180
00:10:45.350 --> 00:10:47.960
is kind of container like,
but at the same time,

181
00:10:47.960 --> 00:10:51.050
it's not sandbox. You can
go and reach outside of

182
00:10:51.050 --> 00:10:55.880
that container. You can go
and look inside your windows

183
00:10:55.880 --> 00:11:00.560
files or your Lennox files
have executable is going back

184
00:11:00.560 --> 00:11:03.710
and forth. So you can
say from WSL, notepad dot

185
00:11:03.740 --> 00:11:08.210
exe and pull up a
file in notepad, that's actually

186
00:11:08.900 --> 00:11:13.370
a windows version of notepad.
Hmm. This is interesting. And

187
00:11:13.370 --> 00:11:14.840
I think I want to
back up a minute, because

188
00:11:14.900 --> 00:11:17.000
when we talked about like
the files, as an example,

189
00:11:17.000 --> 00:11:19.580
lets let's not think about
opening files as an example,

190
00:11:19.580 --> 00:11:22.460
let's think about opening a
port. If I opened up

191
00:11:22.460 --> 00:11:25.610
something in node, on WSL
on like let's say local

192
00:11:25.610 --> 00:11:29.390
host port 80, 80, and
then I'm go out into

193
00:11:29.390 --> 00:11:31.370
windows and I open up
PowerShell and I try to

194
00:11:31.370 --> 00:11:36.380
open up port 80 80
with like, C-sharp that because

195
00:11:36.380 --> 00:11:38.840
the kernel ultimately is always
the windows kernel. I would

196
00:11:38.840 --> 00:11:43.340
assume that Linux or WSL
rather got there first. Therefore

197
00:11:43.340 --> 00:11:47.900
it's it owns the port.
Yeah, that's correct. So it

198
00:11:47.900 --> 00:11:51.020
owns support at that point.
So really you would only

199
00:11:51.020 --> 00:11:55.780
be able to open up
that first application from WSL,

200
00:11:56.880 --> 00:11:58.890
Which is kind of cool
actually. Like the more that

201
00:11:58.890 --> 00:12:01.080
I realized that this is
exactly what I would want,

202
00:12:01.080 --> 00:12:02.520
I would want to be
able to go and run

203
00:12:02.520 --> 00:12:05.970
my note app in WSL,
open port 80 80, then

204
00:12:06.060 --> 00:12:08.310
in windows, open up my
browser and go to local

205
00:12:08.310 --> 00:12:09.990
host 80, 80. And I
would expect it to just

206
00:12:09.990 --> 00:12:12.540
work because this is a
part where it's kind of

207
00:12:12.540 --> 00:12:17.310
weird local host in that
context is my computer. I

208
00:12:17.310 --> 00:12:19.620
don't think of WSL as
its own computer, even though

209
00:12:19.620 --> 00:12:23.130
it's its own operating system.
Right. And that's why I

210
00:12:23.130 --> 00:12:25.170
was saying it's a little
bit different than a virtual

211
00:12:25.170 --> 00:12:28.230
machine because you're really, you're
sharing your IP address. You're

212
00:12:28.230 --> 00:12:33.000
looking at the same operating
system at its core and

213
00:12:33.030 --> 00:12:37.230
something that's really interesting here
is talking about opening up

214
00:12:37.260 --> 00:12:41.400
a node application in port
80 80. When you do

215
00:12:41.400 --> 00:12:45.270
that, it lets say you're
in vs code on windows.

216
00:12:45.690 --> 00:12:50.910
You're actually targeting a Linux
version of node. So if

217
00:12:50.910 --> 00:12:54.840
you have a production environment
in Azure that runs one

218
00:12:54.840 --> 00:12:59.220
X, you can actually test
your application against that same

219
00:12:59.400 --> 00:13:04.590
Linux environment while still being
on your windows machine. Oh,

220
00:13:04.590 --> 00:13:07.650
interesting. Okay. So then if
I were using node or.net,

221
00:13:07.650 --> 00:13:11.520
in my case, I would
need to maintain my installations

222
00:13:11.520 --> 00:13:14.400
of node and.net and Python,
et cetera, in two places.

223
00:13:14.760 --> 00:13:16.080
And I might want to
make sure that I know

224
00:13:16.080 --> 00:13:17.730
about the versions that are
in two places. I might

225
00:13:17.730 --> 00:13:19.680
have one version of node
and windows and one in

226
00:13:19.680 --> 00:13:22.080
WSL. So I just need
to be conscious of that.

227
00:13:22.560 --> 00:13:25.260
That's right. Yeah. You should
be conscious of not only

228
00:13:25.260 --> 00:13:28.320
the versions, but what you
have installed. So WSL really

229
00:13:28.320 --> 00:13:31.200
is a separate environment. So
it's not like all your

230
00:13:31.200 --> 00:13:34.920
NPM packages are going to
follow, follow you between windows

231
00:13:35.370 --> 00:13:37.860
and WSL. We do have
some tools to help you

232
00:13:37.860 --> 00:13:43.320
with that. We have a
WSL ENV environment variable where

233
00:13:43.320 --> 00:13:46.440
you can create that in
windows so that you can

234
00:13:46.440 --> 00:13:50.460
do some sharing between the
two, but that is defined

235
00:13:50.460 --> 00:13:54.420
by you. Hmm. Yeah. I've
gotten myself into, you know,

236
00:13:54.420 --> 00:13:58.440
lowercase T trouble a couple
of times where, like I

237
00:13:58.440 --> 00:14:02.550
had a version of.net, like
2.1 in the windows world

238
00:14:02.550 --> 00:14:04.950
and I was working on
something on my desktop. And

239
00:14:04.950 --> 00:14:08.550
then I went into WSL
and my desktop or specifically

240
00:14:08.550 --> 00:14:12.810
my C drive is available
at, at slash Mount slash

241
00:14:12.810 --> 00:14:15.150
C. So I was like,
Oh, I'll just keep working

242
00:14:15.150 --> 00:14:17.430
in Linux. And I went
down slash Mount slash C

243
00:14:17.460 --> 00:14:22.080
users got desktop, but I
didn't have Dutton at 2.1

244
00:14:22.800 --> 00:14:24.690
in the, in the WSL
world. And I got all

245
00:14:24.690 --> 00:14:27.060
kinds of weird errors and
it took me, you know,

246
00:14:27.480 --> 00:14:30.330
a minute 45 seconds to
go, Oh yeah, I forgot

247
00:14:30.330 --> 00:14:34.470
to install the packages that
I needed in this universe

248
00:14:34.650 --> 00:14:36.930
or this user land, I
guess would probably be the

249
00:14:36.930 --> 00:14:39.600
best way to put it.
Yeah. And I think that's

250
00:14:39.690 --> 00:14:43.590
great that you bring that
up. So considering let's backtrack

251
00:14:43.590 --> 00:14:46.650
a little bit that you
had to say, Mt. Slash

252
00:14:46.650 --> 00:14:51.920
C I guessing C was
your system drive. WSL really

253
00:14:51.920 --> 00:14:57.800
sees widows as a mounted
drive on top of this

254
00:14:57.800 --> 00:15:00.260
one X user mode. Right.
And so that's why you

255
00:15:00.260 --> 00:15:04.490
have to go and say
slash Mount slash C. And

256
00:15:04.490 --> 00:15:08.240
then in addition to that,
you're going into the windows

257
00:15:08.240 --> 00:15:12.290
file system at that point.
And there is a reason

258
00:15:12.290 --> 00:15:17.000
why we deliberately do this
as well as the way

259
00:15:17.000 --> 00:15:22.160
that the metadata of Linux
files looks like and that

260
00:15:22.160 --> 00:15:25.910
of windows files is rather
different. And so we're kind

261
00:15:25.910 --> 00:15:31.070
of taking out the need
for you to consciously consider

262
00:15:31.190 --> 00:15:36.080
metadata or case sensitivity, for
example, by making it easy

263
00:15:36.080 --> 00:15:39.530
for you to create files
on the windows side of

264
00:15:39.530 --> 00:15:43.910
your file system and access
those from WSL, it's a

265
00:15:43.910 --> 00:15:47.540
little bit more difficult to
go from the windows side

266
00:15:47.780 --> 00:15:51.920
and access your WSL files
because of that metadata difference.

267
00:15:52.160 --> 00:15:55.880
And we want to make
sure that we help customers

268
00:15:55.880 --> 00:16:01.120
and prevent you from corrupting
files, for example. Okay. So

269
00:16:01.120 --> 00:16:04.450
it sounds like you're saying
because I'm on a windows

270
00:16:04.450 --> 00:16:08.380
machine ultimately because it's the
windows kernel that ultimately does

271
00:16:08.380 --> 00:16:11.110
the work I should spend
most of my time from

272
00:16:11.110 --> 00:16:14.650
a file system perspective in
my, my data files, my,

273
00:16:14.700 --> 00:16:19.180
my code, whatever, all on
windows. Like I can do

274
00:16:19.180 --> 00:16:21.310
that. I can put files
and do stuff and put

275
00:16:21.310 --> 00:16:23.620
files over and in the
WSL world. But if I

276
00:16:23.620 --> 00:16:25.870
really want to share them,
they need to stay on

277
00:16:26.260 --> 00:16:30.670
quote unquote C drive and
not inside the, the, the

278
00:16:30.670 --> 00:16:34.300
Linux file system. Yeah. Preferably
on that side of things

279
00:16:34.300 --> 00:16:37.720
and you'll still be able
to do what I mentioned

280
00:16:37.720 --> 00:16:42.400
before, like targeting a Linux
version of node, even if

281
00:16:42.520 --> 00:16:46.420
your project is on the
windows side of things. Okay.

282
00:16:46.420 --> 00:16:48.790
Well that doesn't sound too
complicated. I can just have

283
00:16:48.790 --> 00:16:51.730
as many Mt points as
I want then. Yeah. Yep.

284
00:16:51.760 --> 00:16:54.700
So we have the ability,
if you want to Mount

285
00:16:55.030 --> 00:16:59.200
a USB, for example, you
can do that too. What

286
00:16:59.200 --> 00:17:03.400
about like network drives like
a sandbar SMB? Yeah. So

287
00:17:03.400 --> 00:17:05.890
many of those are possible.
There is a little bit

288
00:17:05.890 --> 00:17:07.900
of a can of worms
that you open when you

289
00:17:07.900 --> 00:17:10.900
try to use something like
Samba, but for the most

290
00:17:10.900 --> 00:17:14.740
part, those are available. Is
it a can of worms

291
00:17:14.740 --> 00:17:16.630
it's worth interesting or like
we should talk about, or

292
00:17:16.630 --> 00:17:18.370
is it like a can
of worms? Like it's complicated

293
00:17:18.370 --> 00:17:21.370
or a can of worms.
Like it doesn't work. It's

294
00:17:22.030 --> 00:17:25.000
a combination of the latter
to where parts of it

295
00:17:25.000 --> 00:17:28.960
don't work. And then it
is also a bit complicated.

296
00:17:29.410 --> 00:17:31.780
Well, that brings up an
interesting topic then. So let's

297
00:17:31.780 --> 00:17:34.630
talk about like what works
and what doesn't. There are

298
00:17:34.690 --> 00:17:37.030
a whole list of Cisco
calls, but I assume that

299
00:17:37.120 --> 00:17:40.960
someone could do some analysis,
like file open is the

300
00:17:40.960 --> 00:17:43.690
one we used an example
or port open, but then

301
00:17:43.690 --> 00:17:47.200
I assume that there's more
obscure SIS calls and where

302
00:17:47.200 --> 00:17:48.940
they're like how many sales
calls are there in Lennox

303
00:17:48.940 --> 00:17:53.270
are talking about hundreds or
thousands. So I'm not entirely

304
00:17:53.270 --> 00:17:56.060
sure how many CIS calls
there are in total, but

305
00:17:56.210 --> 00:18:02.330
from a compatibility perspective, we're
at about 85% coverage with

306
00:18:02.340 --> 00:18:05.510
WSL. And the reason for
that goes back into our

307
00:18:05.510 --> 00:18:10.910
conversation about the translation and
these Pico processes. We've had

308
00:18:10.910 --> 00:18:15.530
to go one by one
and enable various calls, especially

309
00:18:15.530 --> 00:18:20.870
those that are not a
straightforward one-to-one translation. So what

310
00:18:20.870 --> 00:18:24.020
we've done is we take
the user feedback that we

311
00:18:24.020 --> 00:18:28.370
get and we see which
of these asks for Cisco's

312
00:18:28.370 --> 00:18:32.510
comes to the top of
the user voice asks or

313
00:18:32.570 --> 00:18:36.440
our GitHub repo where files
have, or issues have been

314
00:18:36.440 --> 00:18:41.540
filed. And so we go
through those asks and then

315
00:18:41.810 --> 00:18:45.560
based on how many people
are asking for a specific

316
00:18:45.560 --> 00:18:50.090
Siskel, then we go and
implement that. So for example,

317
00:18:50.090 --> 00:18:54.230
one that is a recent
ask that has really gained

318
00:18:54.230 --> 00:18:58.850
a lot of interest is
for MSG get or message

319
00:18:58.880 --> 00:19:01.580
get. And that's a service
call that we don't have

320
00:19:02.150 --> 00:19:05.720
implemented yet, but because we
have so many customers and

321
00:19:05.750 --> 00:19:10.310
there are companies that rely
on that messaging service, Cisco,

322
00:19:10.730 --> 00:19:12.920
we're going to go and
put in the work to

323
00:19:13.550 --> 00:19:18.530
implement that. And it's definitely
not a straightforward implementation. So

324
00:19:18.530 --> 00:19:21.380
that's why we hadn't had
it before. But now that

325
00:19:21.380 --> 00:19:24.770
we have enough asks for
it were sending our developer

326
00:19:24.770 --> 00:19:28.220
team out to go and
help make that happen. I

327
00:19:28.220 --> 00:19:32.450
see. Okay. So when you
say 85%, that doesn't make

328
00:19:32.450 --> 00:19:35.090
me like that number doesn't
seem super high, but at

329
00:19:35.090 --> 00:19:38.510
the same time, everything I've
tried has worked. So that

330
00:19:38.510 --> 00:19:41.330
makes me think that the
85% that you did pick

331
00:19:41.780 --> 00:19:45.340
covers a lot, like it
feels as a user of,

332
00:19:45.340 --> 00:19:49.190
of WSL, you know, 90
plus 95% plus like I

333
00:19:49.190 --> 00:19:51.740
literally I've, I've literally never
tried anything and had it

334
00:19:51.740 --> 00:19:55.940
fail, which means I must
be using the top 85%

335
00:19:55.940 --> 00:19:58.340
of Cisco's not the more
obscure ones. So the last

336
00:19:58.340 --> 00:20:02.690
15% seems like it's long
tail, perhaps more obscure stuff.

337
00:20:03.470 --> 00:20:05.870
Yeah. And based on the
user feedback that we've getting,

338
00:20:05.870 --> 00:20:09.140
I think that's a pretty
accurate perception, but it is

339
00:20:09.140 --> 00:20:12.050
more on the long tail
there. We have a couple

340
00:20:12.050 --> 00:20:14.510
of customers who've asked for
things here and there, but

341
00:20:14.780 --> 00:20:18.350
if we haven't implemented it,
chances are there haven't been

342
00:20:18.860 --> 00:20:21.320
a ton of asks for
it. Okay. Yeah. But I'm

343
00:20:21.320 --> 00:20:28.190
over here at github.com/microsoft/wsl. And
I went, as you were

344
00:20:28.190 --> 00:20:31.460
talking and looked up MSG
get, and I can see

345
00:20:31.460 --> 00:20:34.790
that yeah. Someone raised an
issue there, just a discussion

346
00:20:34.790 --> 00:20:39.260
about it. And this is
interesting. Someone said, reopening this

347
00:20:39.260 --> 00:20:41.750
issue since this, this is
the only piece of the

348
00:20:41.760 --> 00:20:45.440
system, five family of system
calls that is still unimplemented.

349
00:20:45.710 --> 00:20:48.340
So there's a lot of
interesting where they're saying, yeah,

350
00:20:48.370 --> 00:20:50.950
I'm going to use positive
message cues and you know,

351
00:20:50.950 --> 00:20:54.220
there's justifications about it. Someone
rolls in and says, yeah,

352
00:20:54.220 --> 00:20:57.820
we haven't quite done Q
support, but like you're saying,

353
00:20:57.850 --> 00:21:01.150
and here's you just literally
a month ago saying, yep,

354
00:21:01.240 --> 00:21:03.850
we're doing six calls in
a per need basis. And

355
00:21:03.850 --> 00:21:06.130
now we're seeing more and
more people are asking for

356
00:21:06.130 --> 00:21:09.730
this. So how do you
implement these? Is this something

357
00:21:09.730 --> 00:21:13.920
that I get with my
regular windows updates? Yeah. So

358
00:21:13.920 --> 00:21:18.450
basically we have various rings
of updates. The fastest of

359
00:21:18.450 --> 00:21:22.110
which is the insider's fast
ring. So the windows insiders

360
00:21:22.110 --> 00:21:25.650
program allows you to get
updates a little bit quicker

361
00:21:25.740 --> 00:21:30.060
than the regular RTM update.
So we push our changes

362
00:21:30.510 --> 00:21:34.230
to windows, those insiders, we
look for quick customer feedback.

363
00:21:34.230 --> 00:21:36.780
And as you can see
from our GitHub repo, it's

364
00:21:36.780 --> 00:21:39.930
super active. So we have
a ton of customers giving

365
00:21:39.930 --> 00:21:43.140
us feedback. And based on
that feedback, we iterate on

366
00:21:43.140 --> 00:21:46.050
the changes we've made and
then roll it out to

367
00:21:46.110 --> 00:21:51.300
RTM. Okay. So do I
have to update my Linux

368
00:21:51.330 --> 00:21:53.220
to get that upgrade? Or
I just have to just

369
00:21:53.220 --> 00:21:55.950
keep my windows going and
then like some Cisco I

370
00:21:55.950 --> 00:21:58.260
want, it'll just show up
one day and there it

371
00:21:58.260 --> 00:22:02.670
is. Yeah. So you don't
actually need to specifically update

372
00:22:02.760 --> 00:22:06.540
your, let's say distro app,
for example, it comes in

373
00:22:06.540 --> 00:22:09.780
through the windows updates. So
WSL is tied to the

374
00:22:09.780 --> 00:22:14.310
operating system here. So when
windows updates, we update the

375
00:22:14.460 --> 00:22:19.170
WSL layer. Now let's say
canonical has an update for

376
00:22:19.740 --> 00:22:23.010
<inaudible> app in the store.
Then you would need to

377
00:22:23.010 --> 00:22:27.210
go and update your app
separately. So really the store

378
00:22:27.210 --> 00:22:34.290
application or your flavor of
Linux and WSL are two

379
00:22:34.290 --> 00:22:37.860
separate things, just have them
working together, but they have

380
00:22:37.860 --> 00:22:43.230
two different upgrade and update
paths. Okay. So then when

381
00:22:43.230 --> 00:22:47.430
I'm downloading, like when I'm
quote unquote downloading Linux from

382
00:22:47.430 --> 00:22:50.070
the store, I'm just getting
the user land, I'm getting

383
00:22:50.070 --> 00:22:52.250
the zip, a zip file
or a tar file or

384
00:22:52.270 --> 00:22:57.060
Jesus or whatever, an archive
of canonicals of boon two

385
00:22:57.060 --> 00:23:00.510
or whatever Linux I decided
to get. I download it.

386
00:23:00.510 --> 00:23:04.020
It unfolds, you know, into
the file system somewhere, right.

387
00:23:04.560 --> 00:23:08.340
Then WSL the sub system
underneath it handles the things

388
00:23:08.340 --> 00:23:10.770
for me. But if I
go back to the store

389
00:23:10.770 --> 00:23:13.650
later and I see that,
that, that app has updated

390
00:23:13.650 --> 00:23:16.440
that, and I'm putting app
in air quotes, right? The

391
00:23:16.470 --> 00:23:20.310
app I've already got Linux
installed. Like you can't really

392
00:23:20.310 --> 00:23:24.060
touch my Linux from the
store. Can you, what am

393
00:23:24.060 --> 00:23:27.420
I updating? Yeah. So we
don't touch your Linux from

394
00:23:27.420 --> 00:23:31.080
a store. We have you
manually go and upgrade that

395
00:23:31.110 --> 00:23:36.330
because we know that you
have various files and configuration

396
00:23:36.330 --> 00:23:39.690
settings that you want to
keep. So if you do

397
00:23:39.690 --> 00:23:44.910
want to go and update
your application, we have a

398
00:23:44.930 --> 00:23:48.260
way in which you can,
unregister your current version and

399
00:23:48.260 --> 00:23:52.190
then go and install that
version. And this is through

400
00:23:52.430 --> 00:23:57.850
a command line tool we
have called WSL config. Okay.

401
00:23:57.850 --> 00:24:00.670
And I actually, I've got
a machine where I installed

402
00:24:00.700 --> 00:24:02.920
all the Linuxes just to
see, cause I want to

403
00:24:02.920 --> 00:24:04.960
see if it was possible.
It's kind of cool. I've

404
00:24:04.960 --> 00:24:11.740
actually got room two 1604
and 1804 on the same

405
00:24:11.740 --> 00:24:15.010
machine. And then I get
to go and type WSL

406
00:24:15.010 --> 00:24:18.550
config slash list and then
set default. And I set

407
00:24:18.550 --> 00:24:20.980
the fall was really interesting
because did that control what

408
00:24:20.980 --> 00:24:24.610
happens when I type bash?
Yeah, that does. So that

409
00:24:24.610 --> 00:24:27.850
actually controls what you do
when you type bash in

410
00:24:27.850 --> 00:24:31.480
the sense that when you
say bash, let's say CMD,

411
00:24:31.480 --> 00:24:38.410
you say bash a sudo
apt, get CalSAE, that'll actually

412
00:24:38.410 --> 00:24:43.000
install a CalSAE on your
default distro. And that's what

413
00:24:43.000 --> 00:24:47.830
you've set as your default
using that WSL config tool.

414
00:24:48.040 --> 00:24:51.340
And you can change that
default at any time, especially,

415
00:24:51.340 --> 00:24:55.150
let's say you're using <inaudible>
for work, but <inaudible> your

416
00:24:55.150 --> 00:24:59.620
favorite distro for personal projects.
You can easily flip back

417
00:24:59.620 --> 00:25:03.340
and forth between those two
as your default. Oh, okay.

418
00:25:03.340 --> 00:25:05.380
So it's not, it's not
a harmful thing in any

419
00:25:05.380 --> 00:25:08.350
way to, to, to run
WSL config and switch faults.

420
00:25:08.830 --> 00:25:12.850
Nope. It's just a configuration
setting and it doesn't change

421
00:25:13.000 --> 00:25:17.140
either of those systems in
any way. Hey friends, this

422
00:25:17.140 --> 00:25:19.270
is Scott. You know, listening
to podcasts is a great

423
00:25:19.270 --> 00:25:21.520
way to keep up to
date on technology. Since we're

424
00:25:21.520 --> 00:25:24.640
always learning as software people.
And you can also find

425
00:25:24.640 --> 00:25:27.220
a job by listening to
a podcast. If you check

426
00:25:27.220 --> 00:25:30.640
out our new sponsor, hired.com,
that's H I R E

427
00:25:30.640 --> 00:25:36.310
d.com/hansel minutes on hire.com. Software
engineers can get interview requests

428
00:25:36.310 --> 00:25:39.220
from companies that want to
hire you. Each offer will

429
00:25:39.220 --> 00:25:41.830
have the salary and the
equity upfront. You can view

430
00:25:41.830 --> 00:25:45.070
those interview requests and no
accept, reject, change the offer

431
00:25:45.070 --> 00:25:47.170
before even talking to a
company. It's a great way

432
00:25:47.170 --> 00:25:49.210
to find out what's out
there and maybe make a

433
00:25:49.210 --> 00:25:52.750
move they're working with over
6,000 companies from startups to

434
00:25:52.750 --> 00:25:56.650
large companies from 14 major
tech hubs throughout North America

435
00:25:56.650 --> 00:25:59.620
and Europe. What's great about
this is it's totally free

436
00:25:59.620 --> 00:26:02.560
for software engineers. And if
you get a job through

437
00:26:02.560 --> 00:26:06.190
hire.com, that'll ordinarily give you
a $300. Thank you bonus.

438
00:26:06.520 --> 00:26:09.100
But if you use our
special link, they'll double that

439
00:26:09.100 --> 00:26:12.010
bonus. So you will actually
get paid $600 when you

440
00:26:12.010 --> 00:26:14.620
accept that job. Now, if
you're not looking for a

441
00:26:14.620 --> 00:26:16.840
job, but you know, someone
who is refer them to

442
00:26:16.840 --> 00:26:20.530
hire.com/hansel minutes, and they'll give
you a lead bonus, a

443
00:26:20.530 --> 00:26:25.210
$1,337 bonus when they accept
a job. So check them

444
00:26:25.210 --> 00:26:31.150
out at hired.com/hansel minutes. One
of the things that was

445
00:26:31.150 --> 00:26:33.910
interesting when I gave a
presentation recently to a bunch

446
00:26:33.910 --> 00:26:36.730
of, for lack of a
better word, a we'll call

447
00:26:36.730 --> 00:26:41.650
them oldies people near, near,
or beyond retirement age that

448
00:26:41.650 --> 00:26:44.910
are still computer enthusiasts. I
was talking to them about

449
00:26:44.910 --> 00:26:49.560
how windows 10 supported Linux
with WSL. And they were

450
00:26:49.560 --> 00:26:54.150
like, well, I've already used
Cygwin, right? CYG w I

451
00:26:54.150 --> 00:26:56.400
N. And the way I
explained it, maybe you can

452
00:26:56.400 --> 00:26:59.160
tell me if I did
it correctly, was that Cygwin

453
00:26:59.160 --> 00:27:02.250
was a bunch of canoe
utilities that were recompiled for

454
00:27:02.250 --> 00:27:05.580
windows using that, that code.
But they are ultimately on

455
00:27:05.580 --> 00:27:08.670
top of windows. They're not
updated as often. They're not

456
00:27:09.240 --> 00:27:14.820
Unix they're they're utilities that
have been portably compiled. But

457
00:27:14.850 --> 00:27:19.410
with, with, with a WSL,
I can actually like hype

458
00:27:19.410 --> 00:27:24.300
BIR in dos and in
quote, unquote dos and say

459
00:27:24.360 --> 00:27:28.140
pipe, and then say bash
and run it through grep.

460
00:27:28.170 --> 00:27:31.410
Can't I, and I can
pipe to and from Linux.

461
00:27:31.410 --> 00:27:33.120
And that seemed like a
good reason to stop using

462
00:27:33.240 --> 00:27:37.130
Cygwin. Yeah, absolutely. I think
there are two main advantages.

463
00:27:37.160 --> 00:27:39.740
Every signal in here, the
first of which is just

464
00:27:39.860 --> 00:27:44.030
the user experience using WSL
is just so much simpler,

465
00:27:44.210 --> 00:27:47.510
the way that you configure
things. And when you want

466
00:27:47.510 --> 00:27:50.810
to install a package, you
use the native package manager.

467
00:27:50.810 --> 00:27:54.080
So in Ubuntu, you're using
apt. And the other side

468
00:27:54.080 --> 00:27:58.610
of this is what you're
saying, where these different utilities

469
00:27:58.610 --> 00:28:02.390
and tools and applications haven't
been recompiled for windows, and

470
00:28:02.390 --> 00:28:04.490
they haven't been recreated. And
in any way, these are

471
00:28:04.490 --> 00:28:10.970
actual native Linux binaries that
you're running on windows. So

472
00:28:10.970 --> 00:28:13.550
that means like, I don't
want to be really crisp

473
00:28:13.550 --> 00:28:19.270
here. Are you saying that
you didn't change Uber into

474
00:28:19.270 --> 00:28:20.840
when you put it into
the store or did you

475
00:28:20.840 --> 00:28:23.300
even put it in the
store? Because canonical put it

476
00:28:23.300 --> 00:28:25.790
in the store. Canonical puts
it in the store. So

477
00:28:25.790 --> 00:28:29.630
we work directly with them
together there, and it hasn't

478
00:28:29.630 --> 00:28:32.870
been changed at all for
the most part. And we

479
00:28:32.870 --> 00:28:36.920
have a project that's open
source, it's called the WSL

480
00:28:36.920 --> 00:28:40.850
distro launcher. And it's a
template to allow our district

481
00:28:40.850 --> 00:28:47.390
partners to take a Linux
user mode image, essentially, and

482
00:28:47.390 --> 00:28:49.730
package that up as a
tar ball that can then

483
00:28:49.730 --> 00:28:53.720
be distributed through the store.
And let's say there is

484
00:28:54.140 --> 00:28:57.110
a version of Linux, some
sort of distro that you

485
00:28:57.110 --> 00:28:59.720
don't see in the store.
You can actually use that

486
00:28:59.720 --> 00:29:04.010
template and the project to
Slack. Sideload your own custom

487
00:29:04.010 --> 00:29:08.930
distro on your machine. So
if you want Alpine Linux,

488
00:29:08.930 --> 00:29:13.760
for example, you can go
ahead and use that. Alright,

489
00:29:13.760 --> 00:29:16.220
interesting. So I could make
an Alpine WSL and could

490
00:29:16.220 --> 00:29:18.890
I give it to like
people at my job? Yeah,

491
00:29:19.100 --> 00:29:22.730
absolutely. All you need to
do is have developer mode

492
00:29:22.790 --> 00:29:26.060
enabled so that you can
side load applications and you

493
00:29:26.060 --> 00:29:29.750
can distribute that like on
your own, it's not official

494
00:29:29.750 --> 00:29:33.050
through the store, or you
can put that just on

495
00:29:33.050 --> 00:29:36.980
your personal machine for yourself
to use. Huh? All right.

496
00:29:36.980 --> 00:29:38.630
Well, let me ask you
this, then this is a

497
00:29:38.630 --> 00:29:41.350
little bit of a defensive
question then. Well, why wouldn't

498
00:29:41.350 --> 00:29:44.650
I just use Docker and
then bring up my Boone

499
00:29:44.650 --> 00:29:47.770
coups and my all Pines
and my whatevers and a

500
00:29:47.770 --> 00:29:52.300
Docker thing. Like why use,
why use WSL and not,

501
00:29:52.390 --> 00:29:55.620
and not Docker? Yeah, I
think that's a good question.

502
00:29:55.650 --> 00:30:00.000
And the main advantages here
are that you get the

503
00:30:00.060 --> 00:30:05.580
interrupt between your Lennox and
your windows environment, and that's

504
00:30:05.580 --> 00:30:08.880
something that you wouldn't be
able to do with a

505
00:30:08.910 --> 00:30:13.620
Docker image. Yeah. So it's
kind of like when I'm

506
00:30:13.620 --> 00:30:15.420
in a virtual machine, like
I have an open and

507
00:30:15.420 --> 00:30:18.030
to virtual machine that I
fire up with with hyper

508
00:30:18.030 --> 00:30:20.880
V and to be Frank,
I'm forever trying to figure

509
00:30:20.880 --> 00:30:22.350
out how to copy files
in and out of it.

510
00:30:22.350 --> 00:30:24.930
And I end up just,
you know, either FTP or

511
00:30:24.930 --> 00:30:27.990
SFU, FTP things into it,
or there's, you know, there's

512
00:30:27.990 --> 00:30:31.500
different, you know, secure copy
ways, but it isn't a

513
00:30:31.500 --> 00:30:33.930
drag and drop kind of
a situation to get stuff

514
00:30:33.930 --> 00:30:35.970
that you want into the
virtual machine. And you always

515
00:30:35.970 --> 00:30:38.640
have that sense of all
right, what's my IP address.

516
00:30:38.640 --> 00:30:40.920
What's my computer name. What's
my host name here and

517
00:30:40.920 --> 00:30:44.490
inside and outside, once you
start using WSL, it really

518
00:30:44.490 --> 00:30:48.240
is quite seamless. Yeah. It's
super smooth. And it's well

519
00:30:48.240 --> 00:30:52.740
integrated between the two sides
and kind of a context

520
00:30:52.740 --> 00:30:59.430
thing here is that the
actual windows console is the

521
00:30:59.430 --> 00:31:03.720
shell around WSL. So when
you pull up your UConn

522
00:31:03.720 --> 00:31:06.660
to image, it's going to
look a lot like the

523
00:31:06.660 --> 00:31:10.050
command prompt and that's because
the rendering and the actual

524
00:31:10.050 --> 00:31:14.820
shell itself is the windows
console. We're just using all

525
00:31:14.820 --> 00:31:21.000
of the WSL virtualization stack
underneath that. Ah, okay. So

526
00:31:21.000 --> 00:31:23.130
if I go and put
in bash, I put in

527
00:31:23.130 --> 00:31:27.180
PowerShell, I put in CMD
<inaudible>, they are all the

528
00:31:27.180 --> 00:31:29.130
same thing. So when I
click in the corner and

529
00:31:29.130 --> 00:31:32.810
say properties, and I see
that options, font layout, dialogues

530
00:31:32.810 --> 00:31:35.280
that I always see with
colors and stuff, it's the

531
00:31:35.280 --> 00:31:39.210
same across all of those
three command prompts. Yeah, exactly.

532
00:31:39.210 --> 00:31:42.180
And we did that pretty
purposefully as well to make

533
00:31:42.180 --> 00:31:46.290
the user experience between these
pretty seamless something. That's kind

534
00:31:46.290 --> 00:31:48.390
of fun that I like
to show with demos is

535
00:31:48.390 --> 00:31:53.910
that you can go into
CMD and say Ubuntu, and

536
00:31:53.910 --> 00:31:57.420
then you look and see
that, you know, your colors

537
00:31:57.420 --> 00:32:01.230
will change a bit and
you see that you're actually

538
00:32:01.230 --> 00:32:04.590
in WSL, but the shell
itself is the CMD one.

539
00:32:05.190 --> 00:32:09.780
And it says like your
Uber on to username at

540
00:32:10.110 --> 00:32:13.410
home or whatever your setting
is, and you can go

541
00:32:13.410 --> 00:32:18.540
back and forth between CMD
and WSL in the same

542
00:32:18.810 --> 00:32:22.680
console window. Oh, that's cool.
So then there was a

543
00:32:22.680 --> 00:32:27.990
version of, of windows fast.
The insider's fast that I

544
00:32:27.990 --> 00:32:30.750
was using that was, that
had a feature called sets

545
00:32:31.140 --> 00:32:33.210
and I guess sets is
coming sometime in the future,

546
00:32:33.420 --> 00:32:38.340
but basically it made windows
get like tabs. And then

547
00:32:38.340 --> 00:32:41.480
suddenly I do tabs, like
all like Uber and two

548
00:32:41.480 --> 00:32:45.770
and prob PowerShell and dos
all got tabs for free

549
00:32:46.100 --> 00:32:48.740
because it's all the same
Chrome for lack of a

550
00:32:48.740 --> 00:32:52.280
better word. Did the, the
box, the console host is

551
00:32:52.280 --> 00:32:56.380
the same across everything. Yeah,
that's right. And we're working

552
00:32:56.380 --> 00:32:59.920
with the tab sets team
to make sure that this

553
00:32:59.920 --> 00:33:05.290
experience going between the various
consoles is one that's friendly.

554
00:33:07.030 --> 00:33:10.120
Cool. So people can get
this today. It is not

555
00:33:10.120 --> 00:33:13.090
in beta. It is, but
it is in constant development.

556
00:33:13.090 --> 00:33:15.970
You can check it out.
The issues at get hub

557
00:33:15.970 --> 00:33:20.350
slash Microsoft slash WSL, and
folks can find you on,

558
00:33:20.830 --> 00:33:24.790
on Twitter and ask you
WSL questions. Yup. That's correct.

559
00:33:24.790 --> 00:33:28.480
So you can find me
on Twitter at Tara underscore

560
00:33:28.480 --> 00:33:34.810
MSFT and feel free to
tweet any questions, feedback. If

561
00:33:34.810 --> 00:33:38.860
you run into any issues
and you can find installation

562
00:33:38.890 --> 00:33:53.950
instructions@ourdocspageondocsdotmicrosoftdotcomandyoucangettotherebysayingaka.ms. Slash WSL. Fantastic. Well,
thanks so much for chatting

563
00:33:53.950 --> 00:33:57.430
with me today. Thanks for
having me. It was great

564
00:33:57.430 --> 00:34:01.030
to see you go through
the 12 steps and accept

565
00:34:01.060 --> 00:34:04.930
the fact that you can
run Linux tools on windows.

566
00:34:05.440 --> 00:34:07.390
Yup. I'm loving it and
I'm doing it every day.

567
00:34:07.390 --> 00:34:09.790
And I'm telling, I'm talking
to random strangers on the

568
00:34:09.790 --> 00:34:11.710
train and telling them that
they should do it as

569
00:34:11.710 --> 00:34:13.960
well, which is a little
weird, but it's also fun

570
00:34:13.960 --> 00:34:16.260
to watch them go through
the process as well. But

571
00:34:16.260 --> 00:34:19.210
that's great to hear. Thanks
for having me, Scott. This

572
00:34:19.210 --> 00:34:21.970
has been another episode of
Hanselminutes and we'll see you

573
00:34:21.970 --> 00:34:34.570
again next week. <inaudible>.

