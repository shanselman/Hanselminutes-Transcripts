WEBVTT FILE

1
00:00:00.300 --> 00:00:02.430
Hey friends, you know that
the code on the beach

2
00:00:02.460 --> 00:00:05.400
conference is coming up here
in August 8th through the 10th

3
00:00:05.430 --> 00:00:08.580
in sunny, Florida. In fact,
I keynoted last year and

4
00:00:08.580 --> 00:00:10.470
I tell you, this is
a great conference. It's a

5
00:00:10.470 --> 00:00:13.770
nonprofit they're really focused on
the community. It's a, from

6
00:00:13.770 --> 00:00:17.610
a conference perspective, very intense,
targeted towards intermediate and advanced

7
00:00:17.610 --> 00:00:20.580
topics, but it's in a
very family friendly atmosphere. I

8
00:00:20.580 --> 00:00:23.280
took my wife and kids.
I went to the conference,

9
00:00:23.280 --> 00:00:25.680
kids went swimming. Then we
all went to Disney world.

10
00:00:26.250 --> 00:00:28.620
I tell you if you
are interested in expanding your

11
00:00:28.620 --> 00:00:32.220
skills and mobile cloud data
space, I encourage you to

12
00:00:32.250 --> 00:00:39.120
seriously check out code on
theBeach@wwwdotcovidonthebeach.com Hansel minutes. Listeners can

13
00:00:39.120 --> 00:00:43.110
save $50 with the coupon
code Hanselman code on the

14
00:00:43.110 --> 00:01:05.270
beach From Hansel minutes.com. It's
Hanselman. It's all weekly discussion

15
00:01:05.270 --> 00:01:09.500
with web developer and technologist
Scott Hanselman. This is Lawrence Ryan

16
00:01:09.510 --> 00:01:12.980
announcing show number four 30.
In this episode, Scott talks

17
00:01:12.980 --> 00:01:20.390
to me About applied Azure
Scott Hanselman. This is another

18
00:01:20.390 --> 00:01:23.660
episode of Hansel minutes, and
I'm talking with Vishwas, Layla,

19
00:01:23.750 --> 00:01:28.100
who is the author of
a Pluralsight course called applied

20
00:01:28.100 --> 00:01:31.460
Azure. And in my attempts
to continue to learn more

21
00:01:31.460 --> 00:01:33.830
about Azure, I wanted to
bring some experts on to

22
00:01:33.980 --> 00:01:36.350
teach me how this works
and how to build real

23
00:01:36.350 --> 00:01:39.650
systems in Azure. Thanks for
chatting with me today. Thank

24
00:01:39.650 --> 00:01:43.430
you, Scott. So you put
together a course on Pluralsight

25
00:01:43.430 --> 00:01:46.400
and I was excited about
it because it's really practical.

26
00:01:46.400 --> 00:01:50.090
It's applied Azure. It's not
a Sudbury theoretical, is it

27
00:01:51.110 --> 00:01:54.440
Alright, Scott? So that's my,
that was my goal. You

28
00:01:54.440 --> 00:01:57.770
know, we often talk about
the Azure capabilities in terms

29
00:01:57.770 --> 00:02:02.510
of storage and you know,
how the storage is redundant

30
00:02:02.510 --> 00:02:05.600
and even geo-redundant. And we
talk about the service bus,

31
00:02:05.600 --> 00:02:08.600
which are all great capabilities,
of course, but I thought

32
00:02:08.600 --> 00:02:12.230
it would be useful to
take these raw core capabilities

33
00:02:12.230 --> 00:02:17.120
of the platform and translate
them into applied scenario. So

34
00:02:17.120 --> 00:02:20.720
that was the, really the
focus of this course. And

35
00:02:20.720 --> 00:02:24.110
you work on Azure and
you build real world systems

36
00:02:24.110 --> 00:02:27.230
on Azure. This really isn't
theoretical. You're making systems for

37
00:02:27.230 --> 00:02:30.890
clients every day, right? That
is correct Scott. So I've

38
00:02:30.890 --> 00:02:34.400
been working with Azure for
last four or five years,

39
00:02:35.090 --> 00:02:38.450
and we've done a number
of applications and just counting

40
00:02:38.450 --> 00:02:40.700
the applications which are in
production. We've done a number

41
00:02:40.700 --> 00:02:44.090
of these applications. And in
fact, many of the scenarios

42
00:02:44.090 --> 00:02:47.810
that I talk about in
this course have come about

43
00:02:48.590 --> 00:02:52.070
based on a client engagement
customer project. And then I've

44
00:02:52.070 --> 00:02:56.510
tried to genericize those projects,
findings from those projects or

45
00:02:56.510 --> 00:02:59.290
learnings from those project and
try to capture them in

46
00:02:59.350 --> 00:03:02.370
these modules here. As part
of the course, A lot

47
00:03:02.370 --> 00:03:04.410
of times people, when they
start out with Azure, they

48
00:03:04.410 --> 00:03:07.260
have trouble deciding whether they
want to do something in

49
00:03:07.260 --> 00:03:10.890
an Azure virtual machine on
the one side and Azure

50
00:03:10.890 --> 00:03:13.890
website, which is very convenient
on the other side or

51
00:03:13.890 --> 00:03:17.880
somewhere in the middle with
Azure worker rules. How can

52
00:03:17.880 --> 00:03:21.180
someone make the right decision
about what a particular workload

53
00:03:21.180 --> 00:03:25.830
or application needs? That's a
good question, Scott. So in

54
00:03:25.830 --> 00:03:28.830
this course, what I tried
to do was try to

55
00:03:28.830 --> 00:03:31.440
highlight the things that you
can do. And let me

56
00:03:31.440 --> 00:03:34.500
just start with Azure websites
and I have a fancy

57
00:03:34.500 --> 00:03:36.660
name for it, and nobody's
going to use this name

58
00:03:36.660 --> 00:03:40.380
other than me, but I
called them, ready-made execution units.

59
00:03:40.800 --> 00:03:43.620
Now, why do I call
them? Because you really don't

60
00:03:43.620 --> 00:03:46.440
have to worry about, you
know, what hardware does running

61
00:03:46.440 --> 00:03:49.470
on or, you know, what
is the language you're using

62
00:03:49.470 --> 00:03:53.130
or what web server you
basically take your code that

63
00:03:53.340 --> 00:03:57.240
responds to some incoming HTTP
request and you host it

64
00:03:57.840 --> 00:04:02.430
and everything else in terms
of fault tolerance and scalability,

65
00:04:02.850 --> 00:04:05.610
all of that is handled
for you. That's essentially what

66
00:04:05.610 --> 00:04:09.600
Azure websites does. And Scott,
when it first came out,

67
00:04:09.870 --> 00:04:12.570
I used to be writing
all my applications in the

68
00:04:12.570 --> 00:04:15.360
web roles, and then I
should website first came out.

69
00:04:15.360 --> 00:04:18.180
I thought, yeah, it's great,
but maybe I'll host my

70
00:04:18.180 --> 00:04:20.850
blog on it. But for
all the real things, I'll

71
00:04:20.850 --> 00:04:23.430
continue to use the web
role. And then boy, I

72
00:04:23.430 --> 00:04:26.010
was wrong about that because
you know, over the last

73
00:04:26.010 --> 00:04:29.490
18 months or so I've
used websites for all kinds

74
00:04:29.490 --> 00:04:32.370
of things. Like not just
to host websites, but if

75
00:04:32.370 --> 00:04:35.130
I have a VB API
to host out, hosted there,

76
00:04:35.160 --> 00:04:38.580
if I want to write
a SharePoint app and there

77
00:04:38.580 --> 00:04:42.060
are apps now in SharePoint,
you could, Azure websites provides

78
00:04:42.060 --> 00:04:45.420
a convenient way to hosted
there. But back to your

79
00:04:45.420 --> 00:04:49.530
question, I think more and
more of these scenarios where

80
00:04:49.530 --> 00:04:51.510
you're trying to host sort
of application or a web

81
00:04:51.510 --> 00:04:55.050
API are met by websites.
Now you would want to

82
00:04:55.050 --> 00:04:59.670
go to a web role
if you wanted admin access

83
00:04:59.670 --> 00:05:02.700
and you wanted to registry
access, something like that is

84
00:05:02.700 --> 00:05:08.130
not possible in an Azure
website today. Although increasingly if

85
00:05:08.130 --> 00:05:10.320
you asked me this question
about a month back, I

86
00:05:10.320 --> 00:05:12.990
would say, you know, one
other thing that's not possible

87
00:05:12.990 --> 00:05:15.360
is the traffic manager. What
if I wanted to load

88
00:05:15.360 --> 00:05:19.020
balance manager websites across multiple
data centers that was not

89
00:05:19.020 --> 00:05:21.690
possible, but of course the
team has added that they've

90
00:05:21.690 --> 00:05:25.890
added the staging and production
deploy capabilities. So, so I

91
00:05:25.890 --> 00:05:28.530
should have website team certainly
has been adding more capabilities,

92
00:05:28.530 --> 00:05:33.960
but at this point in
time, verbals are good for

93
00:05:34.620 --> 00:05:37.410
if you want, like I
said, the admin access, registry

94
00:05:37.410 --> 00:05:41.310
access and things like that.
And the other important use

95
00:05:41.310 --> 00:05:44.730
case, it still is applicable
for our web roll is

96
00:05:45.090 --> 00:05:47.250
that if you're, let's say
trying to build a HIPAA

97
00:05:47.250 --> 00:05:51.750
compliant application and, or a
fed ramp application, these are

98
00:05:51.750 --> 00:05:56.310
all compliance standards that Microsoft
Azure has achieved in the

99
00:05:56.310 --> 00:05:58.970
last several months. And if
you look at the HIPAA

100
00:05:58.970 --> 00:06:02.240
compliance, Azure websites is not
part of that. So if

101
00:06:02.240 --> 00:06:04.610
you're building such an application,
you would want to use

102
00:06:05.330 --> 00:06:08.470
either of Aperol or you
would want to use a

103
00:06:09.320 --> 00:06:12.410
virtual machine and then host
your code within the IIS

104
00:06:14.800 --> 00:06:17.680
With an Azure virtual machine
or what they call <inaudible>

105
00:06:17.700 --> 00:06:22.150
right. Infrastructure as a service,
you're fully responsible for that

106
00:06:22.150 --> 00:06:24.730
virtual machine. You have to
run windows update, you have

107
00:06:24.730 --> 00:06:27.070
to manage it. It's a,
I like to say it's

108
00:06:27.070 --> 00:06:30.040
like a puppy, it's your
job to keep this thing

109
00:06:30.040 --> 00:06:34.750
alive and maintain it. And
on that Azure website it's

110
00:06:34.750 --> 00:06:37.780
platform as a service, which
means you effectively have nothing

111
00:06:37.780 --> 00:06:40.510
to think about as far
as the underlying system, like

112
00:06:40.750 --> 00:06:44.950
there is a virtual machine,
but you don't care. You

113
00:06:44.950 --> 00:06:47.230
really don't even know what
operating system it's running or

114
00:06:47.230 --> 00:06:49.540
what version of anything it's
running. It just runs your

115
00:06:49.540 --> 00:06:52.630
own. That is correct. And
in fact, that is true

116
00:06:52.630 --> 00:06:56.410
for both a web role
and an Azure website that

117
00:06:56.410 --> 00:07:00.730
you really don't worry about.
The underlying batching or security

118
00:07:00.850 --> 00:07:03.700
fixes and things like that.
You focus on writing your

119
00:07:03.700 --> 00:07:08.650
code and you deploy that
code in the <inaudible> case,

120
00:07:09.100 --> 00:07:12.430
that deployment takes some additional
amount of time because they

121
00:07:12.430 --> 00:07:15.340
are going out and provisioning
a machine based on your

122
00:07:15.340 --> 00:07:19.670
specifications. They're assigning you an
internal IP address. They're, they're

123
00:07:20.110 --> 00:07:22.660
connecting you to load balancer
and things like that. So

124
00:07:22.660 --> 00:07:25.150
it takes about a medium
time, four, five, six minutes

125
00:07:25.150 --> 00:07:28.120
to deploy to web roll.
And in case of Azure

126
00:07:28.120 --> 00:07:32.980
website, that deployment takes seconds
because they have a pre-provision

127
00:07:32.980 --> 00:07:35.740
capacity that is out there
and they simply take your

128
00:07:35.770 --> 00:07:39.430
code and deploy it. Now,
there are some other differences

129
00:07:39.430 --> 00:07:42.520
there though. Even in Nigeria
website, you can start out

130
00:07:42.520 --> 00:07:44.770
in a fleet year where
you are sort of cool

131
00:07:44.770 --> 00:07:47.830
located with others, but you
can scale yourself up and

132
00:07:47.860 --> 00:07:50.470
get yourself an entire virtual
machine if you want it

133
00:07:50.500 --> 00:07:55.450
to. So the lines between
Azure website and liberals have

134
00:07:55.570 --> 00:07:58.900
blurred over the period because
Azure websites have continuously added

135
00:07:58.900 --> 00:08:06.640
capabilities, but if you truly
wanted to control the behavior

136
00:08:06.640 --> 00:08:09.550
of the application, access to
registry, run it in admin

137
00:08:09.550 --> 00:08:12.160
mode, web roll is still
the way to go, but

138
00:08:12.460 --> 00:08:15.610
for everything else, Azure websites
would be my first preference.

139
00:08:15.820 --> 00:08:19.870
Okay. So then a web
role has It is a

140
00:08:19.870 --> 00:08:23.560
managed operating system. It might
reboot at any time, it

141
00:08:23.560 --> 00:08:27.640
might get windows update at
any time, but I can

142
00:08:27.640 --> 00:08:29.320
remote into it. I can
do whatever I want to

143
00:08:29.650 --> 00:08:31.390
That is that is a
true in a web role,

144
00:08:31.390 --> 00:08:34.870
you can remote into it.
And one of the interesting

145
00:08:34.870 --> 00:08:39.610
difference, Scott is that in
order to take advantage of

146
00:08:39.610 --> 00:08:43.150
the SLA, that Microsoft offers,
you have to have two

147
00:08:43.150 --> 00:08:47.170
instances of the role connected
to a load balancer. And

148
00:08:47.530 --> 00:08:50.860
only then can you be
assured of the SLA guarantees?

149
00:08:51.370 --> 00:08:54.580
And that's for a very
simple reason, typically they will

150
00:08:54.580 --> 00:08:58.890
place the instances and two
different fault domains or upgrade

151
00:08:58.890 --> 00:09:01.740
domains. So the idea is
that if they are trying

152
00:09:01.740 --> 00:09:05.670
to patch, not your OSHC,
but the underlying, or they

153
00:09:05.670 --> 00:09:08.670
would bring one machine down,
patch it and then bring

154
00:09:08.670 --> 00:09:12.000
you back up. So your
applications is never down in

155
00:09:12.000 --> 00:09:14.370
case of Azure. Website's very
interesting. You really are not

156
00:09:14.370 --> 00:09:17.490
running two instances. You're only
running one instance and you

157
00:09:17.490 --> 00:09:21.840
still get that SLA guarantee
because you know, more, they

158
00:09:21.840 --> 00:09:24.810
have more control, they can
detect what's happening and they

159
00:09:24.810 --> 00:09:29.280
can move you to another
instance. So there's that subtlety

160
00:09:29.280 --> 00:09:33.210
there. And one of the
interesting differences web role is

161
00:09:34.140 --> 00:09:36.240
if you have two instances
of every role, you are

162
00:09:36.240 --> 00:09:38.850
connected through a load balance,
which is essentially a round

163
00:09:38.850 --> 00:09:43.770
Robin load balance. There is
no state at all, between

164
00:09:43.770 --> 00:09:47.280
the two instances of epidural
in case of Azure websites,

165
00:09:48.240 --> 00:09:53.670
because of the err module
in there, you do get

166
00:09:53.970 --> 00:09:58.440
a stickiness. That's, that's one
other important difference between the

167
00:09:58.440 --> 00:10:04.230
two website, but interestingly Scott,
so we, we have been

168
00:10:04.230 --> 00:10:09.930
talking about how Azure websites
is certainly, you know, by

169
00:10:09.960 --> 00:10:15.990
virtue of adding new capabilities
certainly is, is, is being

170
00:10:16.530 --> 00:10:20.730
sold as a platform for
enterprise applications. So, you know,

171
00:10:20.730 --> 00:10:24.840
you can have large websites
that want to handle large

172
00:10:24.840 --> 00:10:28.230
amounts of traffic. They can
certainly use it. One of

173
00:10:28.230 --> 00:10:30.750
the interesting use case, and
I think Scott, you talked

174
00:10:30.750 --> 00:10:33.330
about it in a blog
post a while back. And

175
00:10:33.330 --> 00:10:35.580
that happened to be one
of the scenarios that I've

176
00:10:35.580 --> 00:10:38.310
worked on. So one of
the startups came to us

177
00:10:38.760 --> 00:10:40.890
and they are in the
business of, you know, if

178
00:10:40.890 --> 00:10:43.110
you're organizing a charity event,
they would set up a

179
00:10:43.110 --> 00:10:47.430
website for you. And they
have arrangements with a number

180
00:10:47.430 --> 00:10:50.610
of different payment gateways. So
you're organizing a charity event,

181
00:10:51.030 --> 00:10:53.400
they will set up a
site for you. They can

182
00:10:53.400 --> 00:10:56.820
collect money on your behalf.
And then, you know, of

183
00:10:56.820 --> 00:10:58.950
course give you the money
when the event is done.

184
00:10:59.340 --> 00:11:02.670
And then these sites are
typically up for a day,

185
00:11:02.670 --> 00:11:05.460
a week or a few
hours even, and they want

186
00:11:05.460 --> 00:11:07.860
this rapid, the ability to
create these sites and then

187
00:11:07.860 --> 00:11:09.990
shut them down. And they
were, what they were doing

188
00:11:09.990 --> 00:11:13.800
today was, you know, going
to, to a holster and

189
00:11:13.800 --> 00:11:16.290
they had written a bunch
of code, which would anybody

190
00:11:16.290 --> 00:11:19.620
presses a new site, they
would come in and then

191
00:11:19.800 --> 00:11:23.460
go and provision a new
IIS, virtual directory, deploy the

192
00:11:23.460 --> 00:11:26.040
code and have it up
and running. And we talked

193
00:11:26.040 --> 00:11:27.450
to them and said, you
know, you can do this

194
00:11:27.930 --> 00:11:30.330
in an Azure website. And
they said, well, this is

195
00:11:30.330 --> 00:11:34.350
going to be expensive. Because
every time they looked at

196
00:11:34.350 --> 00:11:36.780
the Azure pricing numbers and
they said, this is going

197
00:11:36.780 --> 00:11:39.060
to be expensive. You know,
in, in the holsters case,

198
00:11:39.060 --> 00:11:42.570
I just have one machine
or two large machines until

199
00:11:42.570 --> 00:11:45.540
the time then we started
showing them the standard version,

200
00:11:45.870 --> 00:11:48.300
which you talked about Scott,
which is, you know, essentially

201
00:11:48.300 --> 00:11:53.040
go up one website and
then multitenant hundreds of websites

202
00:11:53.050 --> 00:11:55.840
within that. And that proved
to be a cost effective

203
00:11:55.840 --> 00:11:59.830
way for them to run
it. So that's, that was

204
00:11:59.830 --> 00:12:02.830
one point I was trying
to make. But if you

205
00:12:02.830 --> 00:12:05.290
allow me just a quick,
on the other end of

206
00:12:05.290 --> 00:12:08.950
the spectrum, Scott, we have
talked about Azure website and

207
00:12:08.950 --> 00:12:12.100
web roles. And then, you
know, you could say that

208
00:12:12.550 --> 00:12:16.330
infrastructure, so this virtual machine,
well, you have to install

209
00:12:16.330 --> 00:12:19.120
IAS and you have to
do all those things there,

210
00:12:19.810 --> 00:12:23.410
but even the line between
a raw virtual machine and

211
00:12:23.410 --> 00:12:26.800
a web role is also
blurring there. Because if you

212
00:12:26.800 --> 00:12:30.010
see what was announced at
build or what was announced

213
00:12:30.010 --> 00:12:35.380
just last month, that decade
called notion of agent based

214
00:12:35.590 --> 00:12:39.010
deployment. So when you're provisioning
a virtual machine, they will

215
00:12:39.010 --> 00:12:41.800
install an agent. And by
virtue of that agent, you

216
00:12:41.800 --> 00:12:45.160
can add more extensions to
it. So you can say,

217
00:12:45.370 --> 00:12:47.620
Oh, by the vape, do
me a roll virtual machine,

218
00:12:47.980 --> 00:12:51.790
but add an extension that
provides me malware protection. And

219
00:12:51.790 --> 00:12:55.870
now suddenly it's not, you
still have the puppy, but

220
00:12:55.870 --> 00:12:59.140
somebody else is taking care
of one chore to manage

221
00:12:59.140 --> 00:13:02.350
that puppy and think of
more extensions. And now the

222
00:13:02.350 --> 00:13:05.440
lines between even the web
role and the virtual machine

223
00:13:05.440 --> 00:13:09.240
role begin to blur. Yeah.
With my, with my new

224
00:13:09.240 --> 00:13:13.710
little startup application called my
echo, it's a dictation application

225
00:13:13.710 --> 00:13:17.940
for iPhones. I have to
run a backend service to

226
00:13:17.940 --> 00:13:20.370
act as a relay so
that my iPhone application can

227
00:13:20.370 --> 00:13:23.550
talk to my windows application.
And it was the addition

228
00:13:23.550 --> 00:13:27.150
of traffic manager, as well
as the ability to have,

229
00:13:27.480 --> 00:13:30.240
you know, a hundred percent
uptime or at least close

230
00:13:30.240 --> 00:13:32.250
to a hundred percent uptime
without having to break the

231
00:13:32.250 --> 00:13:35.970
bank that caused me to
pick Azure websites. So I

232
00:13:35.970 --> 00:13:41.730
have a three standard instances,
one in South Asia, one

233
00:13:41.730 --> 00:13:44.250
in West Europe and one
in the U S and

234
00:13:44.250 --> 00:13:49.410
it gives me near worldwide
coverage, a very good experience

235
00:13:49.410 --> 00:13:52.380
for everyone all over the
world. I can deploy to

236
00:13:52.380 --> 00:13:55.860
all three of them. I'm
automatically getting performance load balancing.

237
00:13:55.860 --> 00:13:59.310
And the whole thing runs
on websites. Something I would

238
00:13:59.310 --> 00:14:02.580
have picked a web roles
for maybe a year ago,

239
00:14:02.610 --> 00:14:08.190
even That's right. That's absolutely
right. Yep. Hi, this is

240
00:14:08.190 --> 00:14:11.250
Scott. I really appreciate our
sponsors because they make the

241
00:14:11.250 --> 00:14:15.390
show possible. Today's show is
sponsored by developer express, become

242
00:14:15.390 --> 00:14:19.560
a UI superhero with dev
express controls and libraries deliver

243
00:14:19.560 --> 00:14:23.700
elegant.net solutions that address customer
needs today by leveraging your

244
00:14:23.700 --> 00:14:27.990
existing knowledge, you can build
next generation touch enabled solutions

245
00:14:27.990 --> 00:14:35.340
for tomorrow. You can download
your free 30 day trial@dxdothanselminutes.com.

246
00:14:35.790 --> 00:14:43.530
That's dx.hanselminutes.com. Yeah, I think
websites are becoming, they used

247
00:14:43.530 --> 00:14:45.480
to be thought of, I
think perhaps as a toy

248
00:14:46.230 --> 00:14:48.870
people thought, Oh, you just
use websites for a quick

249
00:14:48.870 --> 00:14:52.070
little deployment, but I don't
know if you know this

250
00:14:52.070 --> 00:14:55.550
or not, but did you
know that a web weblogs.asp.net,

251
00:14:56.060 --> 00:14:59.870
as of, I believe today,
is now running entirely on

252
00:14:59.870 --> 00:15:04.850
Azure websites and that is
using orchard, which is, you

253
00:15:04.850 --> 00:15:07.340
know, historically been thought of
as being a non trivially

254
00:15:07.340 --> 00:15:11.570
sized application, but rather a
large application it's been quite

255
00:15:11.600 --> 00:15:16.670
tuned to work on Azure.
So they're actually running 750

256
00:15:16.670 --> 00:15:22.010
blogs in just four Azure
websites, but they're only on

257
00:15:22.010 --> 00:15:26.780
one virtual machine. So this
is for Azure website instances

258
00:15:26.780 --> 00:15:32.470
running on a single standard
large VM. Yep. That I

259
00:15:32.470 --> 00:15:34.690
did not know that, but
I'm not surprised this is,

260
00:15:34.690 --> 00:15:38.530
this is great. And I'm
glad you're not surprised. I'm

261
00:15:38.530 --> 00:15:40.360
not surprised because you know,
I've been a fan of

262
00:15:40.360 --> 00:15:44.230
Azure websites in the number
of scenarios. And I mentioned

263
00:15:44.230 --> 00:15:49.600
the SharePoint app, you know,
if you needed some place

264
00:15:49.600 --> 00:15:52.360
to host this piece of
customization code, that acts as

265
00:15:52.360 --> 00:15:57.430
a glue between your SharePoint
instance and you have this

266
00:15:57.430 --> 00:15:59.800
piece of customization, Azure website
seems to be a great

267
00:15:59.800 --> 00:16:04.120
place to host it. Yeah,
absolutely. And the perf numbers

268
00:16:04.120 --> 00:16:09.100
are pretty ridiculous. They do
17 terabytes span without and

269
00:16:09.130 --> 00:16:13.210
a million and a half
page views. And it's interesting

270
00:16:13.210 --> 00:16:16.660
also because it's using all
of the different aspects of

271
00:16:16.660 --> 00:16:20.410
Azure. It's got the Azure
CDN, it's got the blob

272
00:16:20.410 --> 00:16:24.400
storage, there's queue storage for
synchronization and also Azure cache.

273
00:16:24.820 --> 00:16:28.330
So that kind of brings
us into discussion of loosely

274
00:16:28.330 --> 00:16:31.930
coupled apps. You talk about
this in your, in your

275
00:16:31.930 --> 00:16:36.430
course that, you know, an
application isn't just a website

276
00:16:36.550 --> 00:16:38.950
sitting on a single instance.
They need to use different

277
00:16:38.950 --> 00:16:41.980
services and have loose coupling
between them like you're using

278
00:16:41.980 --> 00:16:45.070
service bus. That's all right.
So that, that was an

279
00:16:45.070 --> 00:16:51.310
interesting project that I worked
on was about the loosely

280
00:16:51.310 --> 00:16:54.610
coupled application. So essentially, you
know, I think we can

281
00:16:54.610 --> 00:16:59.080
all agree that building applications
that are loosely coupled is

282
00:16:59.080 --> 00:17:02.350
a good thing. And in
this scenario, the example that

283
00:17:02.350 --> 00:17:06.370
I talk about in that
particular module, Scott is the

284
00:17:06.370 --> 00:17:10.630
insurance example. So often times
when you buy an insurance

285
00:17:10.630 --> 00:17:14.470
from a company that company's
not themselves underwriting your insurance,

286
00:17:14.590 --> 00:17:17.950
what they need do is
take your coat and send

287
00:17:17.950 --> 00:17:21.010
it out to a bunch
of underwriters. And these underwriters

288
00:17:21.010 --> 00:17:23.110
will then come back with
a quote and then they

289
00:17:23.110 --> 00:17:27.010
let you select which copy
you want. That's very simply

290
00:17:27.010 --> 00:17:29.680
stated problem. So in this
case, what you want to

291
00:17:29.680 --> 00:17:34.300
do is typically want to
add new underwriters to the

292
00:17:34.300 --> 00:17:37.150
mix without sort of causing
a big upheaval in your

293
00:17:37.150 --> 00:17:41.800
system. And, you know, the
tools that I use here,

294
00:17:42.070 --> 00:17:45.790
I'm using service bus topics,
which is a fantastic tools

295
00:17:45.790 --> 00:17:49.590
for me to take this
message and then publish it.

296
00:17:49.950 --> 00:17:52.830
And anybody who's subscribing to
that topic will get that

297
00:17:52.830 --> 00:17:57.210
message. So that allows me
to bring additional underwriters as

298
00:17:57.210 --> 00:18:00.330
I need them. That's one
aspect of it. And then

299
00:18:00.540 --> 00:18:03.960
in the same module, I
talk about how these underwriters

300
00:18:03.960 --> 00:18:07.860
may have a slightly different
way of capturing this information.

301
00:18:08.250 --> 00:18:11.280
So their schema is, may
be different. So I also

302
00:18:11.280 --> 00:18:15.570
combine in that example, the
loose coupling offered by a

303
00:18:15.570 --> 00:18:19.170
service bus topic with something
like a document store. Like

304
00:18:19.170 --> 00:18:21.930
in this case, I use
a Mongo DB store, which

305
00:18:21.930 --> 00:18:26.040
allows me to persist these
messages that are coming back

306
00:18:26.040 --> 00:18:29.010
from underwriters, which may look
slightly different. So I don't

307
00:18:29.010 --> 00:18:33.180
have to necessarily have one
unified data model, like gives

308
00:18:33.180 --> 00:18:36.960
me more flexibility to add
more providers. So that was

309
00:18:36.960 --> 00:18:39.270
the idea. And the interesting
thing about that is, you

310
00:18:39.270 --> 00:18:42.570
know, Azure service bus of
course is available in Azure,

311
00:18:42.930 --> 00:18:45.840
but you have an equal
amount of that on the

312
00:18:45.840 --> 00:18:48.660
windows side, the windows service
bus. And of course, Mongo

313
00:18:48.660 --> 00:18:51.900
DB, you could install in
Azure or you can install

314
00:18:51.900 --> 00:18:56.370
it locally on premises. So
in this course, what I've

315
00:18:56.370 --> 00:18:59.100
tried to do is I've
tried to talk about Azure

316
00:18:59.100 --> 00:19:02.430
concepts, but I've also tried
to leverage the fact that

317
00:19:02.490 --> 00:19:06.930
many of these examples and
concepts, you can, you have

318
00:19:06.930 --> 00:19:10.860
parity between them, between non-premise
has setup and an Azure

319
00:19:10.860 --> 00:19:15.200
setup. I think that when
people move things into the

320
00:19:15.200 --> 00:19:18.290
cloud, it's the realization that
there's a lots of different

321
00:19:18.290 --> 00:19:20.810
kinds of work being done.
You know, it's not just

322
00:19:20.810 --> 00:19:23.750
traditional web apps where we
have one job and that

323
00:19:23.750 --> 00:19:27.320
is to generate and serve
a page. You've got backend

324
00:19:27.320 --> 00:19:31.940
work, administrative work, you've got
workflows, you've got background processes.

325
00:19:31.970 --> 00:19:35.000
And this means that scaling
up a site is more

326
00:19:35.000 --> 00:19:39.440
than just moving a slider
bar from one instance to

327
00:19:39.830 --> 00:19:46.040
multiple instances, you know, That's
great. So you've got different

328
00:19:46.040 --> 00:19:49.550
processes, different administration tools. You've
got the Azure service bus

329
00:19:49.550 --> 00:19:52.610
doing the coordination between them.
You've got Mongo DB, you

330
00:19:52.610 --> 00:19:55.670
might want to scale any
and all of those things

331
00:19:55.670 --> 00:19:59.690
at a different rate. That's,
that's exactly right. So, you

332
00:19:59.690 --> 00:20:03.650
know, once I've sort of
decouple my incoming messages and

333
00:20:03.650 --> 00:20:07.160
I've placed that message on
the topic, I can then

334
00:20:07.160 --> 00:20:09.680
scale that up in that
manner. I can add more

335
00:20:09.830 --> 00:20:12.770
underwriters because I'm getting too
many requests and they're not

336
00:20:12.770 --> 00:20:15.860
able to handle them. And
then it also allows me

337
00:20:15.860 --> 00:20:18.500
that decoupling that, you know,
one of my underwriters has

338
00:20:18.500 --> 00:20:20.690
down, I can leave that
message and they can come

339
00:20:20.690 --> 00:20:22.880
back and leave it at
a later time. So it

340
00:20:22.880 --> 00:20:26.300
offers all of those kinds
of things that make the

341
00:20:26.300 --> 00:20:33.050
applications, you know, more robust
and less brutal. The things

342
00:20:33.050 --> 00:20:35.810
that you're really passionate about
is the ability to have

343
00:20:35.810 --> 00:20:39.180
large amounts of data, get
acted upon a kind of

344
00:20:39.230 --> 00:20:42.050
big compute where, you know,
maybe you've got a website

345
00:20:42.050 --> 00:20:45.860
that's collecting data or underwriters
are doing work, but someone

346
00:20:45.860 --> 00:20:50.200
needs to go and analyze
later with Excel, Azures maybe

347
00:20:50.200 --> 00:20:53.080
doing the chewing of the
data, is that correct? And

348
00:20:53.080 --> 00:20:56.190
then Excel does the analysis
That's right. So, you know,

349
00:20:56.190 --> 00:20:59.940
I have two models, Scott,
one of them, I call

350
00:20:59.950 --> 00:21:05.550
the big compute with HPC
services for Excel. And I've

351
00:21:05.550 --> 00:21:11.490
worked with professional services, scuff
form, multinational professional services firm,

352
00:21:11.790 --> 00:21:15.840
which does a lot of
these actuarial calculations and believe

353
00:21:15.840 --> 00:21:19.110
it or not, they have
these large Excel models. These

354
00:21:19.110 --> 00:21:23.490
are 10, 20 Meg Excel
files, which have lots and

355
00:21:23.490 --> 00:21:26.880
lots of calculations in them.
And these are your four

356
00:21:26.880 --> 00:21:30.030
zero one K or diamond
calculations, if you will. And

357
00:21:30.240 --> 00:21:32.850
imagine having to do these
calculations for large number of

358
00:21:32.850 --> 00:21:38.010
employees that different permutations and
combinations over and over again.

359
00:21:38.700 --> 00:21:41.490
So rather than having that
code be written in C

360
00:21:41.490 --> 00:21:46.140
sharp or vb.net they're analyst,
right? Most of these models

361
00:21:46.140 --> 00:21:49.650
in Excel. Now, if you're
trying to execute so many

362
00:21:49.650 --> 00:21:52.500
instances of Excel, you'll very
quickly run out of capacity

363
00:21:52.920 --> 00:21:57.720
on, on, on your machine
locally or on premises. So

364
00:21:57.720 --> 00:22:01.500
one of the capabilities that
HPC offers is that you

365
00:22:01.500 --> 00:22:06.420
can set up HPC is
high performance computing. And what

366
00:22:06.420 --> 00:22:08.160
you can set up is
you can set up multiple

367
00:22:08.160 --> 00:22:12.780
compute nodes. And what HPC
services for Excel does is

368
00:22:13.290 --> 00:22:15.630
you can have an Excel
instance on each of these

369
00:22:15.630 --> 00:22:19.920
compute nodes, and then you
have a soar style or

370
00:22:19.920 --> 00:22:25.140
service oriented architecture style access
into these compute notes. So

371
00:22:25.260 --> 00:22:27.630
what is happening in this
instance, in this module that

372
00:22:27.630 --> 00:22:32.190
I talked about, Scott is
now once you have populated

373
00:22:32.190 --> 00:22:36.390
these compute nodes with the
right Excel models, you can

374
00:22:36.390 --> 00:22:40.320
come in and make a
call into HPC and HPC

375
00:22:40.320 --> 00:22:42.870
will allow your request to
one of the right compute

376
00:22:42.870 --> 00:22:46.380
nodes. So this way you
can scale up, you can

377
00:22:46.380 --> 00:22:50.280
have any number of these
compute nodes. And then interestingly,

378
00:22:50.280 --> 00:22:53.370
you can also have a
scenario where you could be

379
00:22:53.370 --> 00:22:56.970
running the setup completely on
premises, because you know, your

380
00:22:56.970 --> 00:23:00.810
capacity is enough to meet
your needs for your normal

381
00:23:00.810 --> 00:23:05.220
course of operation, but come
twice a year or twice

382
00:23:05.220 --> 00:23:07.200
a year where you are
trying to do all the

383
00:23:07.200 --> 00:23:10.290
calculations all over again for
all your clients, you can

384
00:23:10.290 --> 00:23:13.080
just burst out to the
cloud for that period of

385
00:23:13.080 --> 00:23:17.580
time. So in fact, that
interaction is very interesting. Your

386
00:23:17.580 --> 00:23:21.630
computer could still be in
on premises environment. You can

387
00:23:21.630 --> 00:23:25.740
just simply burst out to
the cloud, get additional set

388
00:23:25.740 --> 00:23:31.920
of compute notes, do your
calculation, and then complete the

389
00:23:31.920 --> 00:23:35.190
required processing that you need
to get done. So that's,

390
00:23:35.250 --> 00:23:39.630
that's one big compute scenario.
Of course, the, your team

391
00:23:39.630 --> 00:23:42.990
has done a great job
of also giving you a

392
00:23:42.990 --> 00:23:46.010
tool to do data analysis.
So what I about previously

393
00:23:46.010 --> 00:23:49.040
was really, you were doing
a lot of number crunching

394
00:23:49.640 --> 00:23:54.500
and that is accomplished through
HPC services for Excel report

395
00:23:54.500 --> 00:23:57.080
for you're trying to do
a lot of data processing

396
00:23:57.530 --> 00:24:00.500
and the HD insight team
within Azure has given you

397
00:24:01.670 --> 00:24:06.140
an Apache Hadoop version of
that in Azure. So you

398
00:24:06.140 --> 00:24:08.900
can go in and say,
please give me a Hadoop

399
00:24:08.900 --> 00:24:13.010
cluster of 16 nodes, and
you can do the data

400
00:24:13.010 --> 00:24:16.100
processing. And one thing that's
very interesting. And let me

401
00:24:16.100 --> 00:24:19.250
just go back and sort
of explain this in terms

402
00:24:19.250 --> 00:24:22.490
of a proof of concept,
and this is not in

403
00:24:22.490 --> 00:24:25.280
production, Scott, this is a,
this is a proof of

404
00:24:25.280 --> 00:24:29.180
concept that I built for
FBI. I think I'm allowed

405
00:24:29.180 --> 00:24:31.430
to say that because this
is a proof of concept.

406
00:24:31.910 --> 00:24:35.930
They, they have this application
where they wanted to stand

407
00:24:35.930 --> 00:24:38.930
up these sites very quickly
around the country, collect the

408
00:24:38.930 --> 00:24:43.970
data and then process this
data. And Azure websites is

409
00:24:43.970 --> 00:24:46.400
a great way to say,
go ahead and pro you

410
00:24:46.400 --> 00:24:49.970
know, build these applications and
then provision them across various

411
00:24:49.970 --> 00:24:53.480
data centers across the U
S and as this data

412
00:24:53.480 --> 00:24:56.870
is coming in in the
form of either text, audio,

413
00:24:56.870 --> 00:25:00.920
or video clips, this data
directly goes into Azure blob

414
00:25:00.920 --> 00:25:05.420
storage. And one interesting thing
about the HD site implementation

415
00:25:05.420 --> 00:25:08.570
is it is of course
the Hadoop implementation, but rather

416
00:25:08.570 --> 00:25:11.420
than the data that you're
trying to process coming in

417
00:25:11.420 --> 00:25:16.460
from an HDFS system, your
data could be in actually

418
00:25:16.640 --> 00:25:21.410
the Azure blob storage. So
for this example, what we

419
00:25:21.410 --> 00:25:24.740
have done is we have
uploaded the data into the

420
00:25:24.740 --> 00:25:28.610
Azure blob storage and then
provision and HD insight cluster,

421
00:25:29.090 --> 00:25:32.870
and then run some interesting
queries on top of that

422
00:25:32.870 --> 00:25:37.250
data. And then finally, once
you have funds, you have

423
00:25:37.250 --> 00:25:40.880
process this data, you can
go into Excel and then

424
00:25:40.880 --> 00:25:44.360
using something called hive, which
is SQL like language, which

425
00:25:44.360 --> 00:25:48.980
really can work ultimately to
some MapReduce logic. You can

426
00:25:48.980 --> 00:25:53.600
have an ODBC driver, good
old ODBC driver inside Excel

427
00:25:53.960 --> 00:25:57.020
that connects to this HD
insight cluster. And then you

428
00:25:57.020 --> 00:26:00.170
can do for the slicing
and dicing of that information.

429
00:26:00.740 --> 00:26:04.130
So that's, that's a pretty
interesting scenario there as well.

430
00:26:04.900 --> 00:26:07.270
And how transparent is this
to the user? The user

431
00:26:07.270 --> 00:26:10.300
just feels like they have
unlimited computing power, or are

432
00:26:10.300 --> 00:26:12.730
they having to tell Azure
what to do to make

433
00:26:12.730 --> 00:26:18.250
this scale? So to the,
to the user, who's setting

434
00:26:18.250 --> 00:26:21.880
up the cluster, they need
to go in and provision.

435
00:26:22.000 --> 00:26:25.210
The light is the insight
clusters. And then you need

436
00:26:25.270 --> 00:26:28.870
to load the data into
the, into the blob storage,

437
00:26:28.870 --> 00:26:33.640
which is acting as the
HDFS file system. But to

438
00:26:33.640 --> 00:26:37.000
the end user, who's doing
this analytics on the data

439
00:26:37.000 --> 00:26:39.880
that is already there in
the HD insight cluster for

440
00:26:39.880 --> 00:26:42.970
them, it is, could be
as simple as opening up

441
00:26:42.990 --> 00:26:47.160
Excel, opening up an external
data connection to this HD

442
00:26:47.160 --> 00:26:52.020
insight cluster, and then, you
know, fighting off some commands

443
00:26:52.350 --> 00:26:55.170
and getting that data back.
So from an end user

444
00:26:55.170 --> 00:26:58.020
analyst perspective, it is, it
is very approachable. They are

445
00:26:58.020 --> 00:27:00.930
not worried about, you know,
where this data is coming

446
00:27:00.930 --> 00:27:03.870
from, but the person who's
setting it up, they need

447
00:27:03.870 --> 00:27:08.810
to provision these insights clustered
appropriately. And this, this is

448
00:27:08.810 --> 00:27:11.720
kind of funny, forgive my
ignorance, but it almost seems,

449
00:27:12.680 --> 00:27:16.040
I guess I, I think
as I am not an

450
00:27:16.040 --> 00:27:18.830
Excel user on a regular
basis of Excel as being

451
00:27:18.830 --> 00:27:23.330
kind of a, a thing
of the past, it's, you

452
00:27:23.330 --> 00:27:25.790
know, it, it is what
it is, it's basic spreadsheets,

453
00:27:25.790 --> 00:27:29.990
but this really moves Excel
into a totally different way

454
00:27:29.990 --> 00:27:34.500
of thinking. It's almost like
Excel as terminal server. It's,

455
00:27:34.500 --> 00:27:36.530
it's a, it's a view
on top of a much,

456
00:27:36.560 --> 00:27:40.580
much more powerful backend that
is doing a tremendous amount

457
00:27:40.580 --> 00:27:44.510
of work. That is exactly
like Scott. In fact, there's

458
00:27:44.510 --> 00:27:47.570
a, there's an interesting history
behind this that, you know,

459
00:27:47.570 --> 00:27:51.980
Microsoft tried to, you know,
obviously have a significant BI

460
00:27:51.980 --> 00:27:55.610
offering in, in form of
all lab services and all

461
00:27:55.610 --> 00:27:59.450
the offerings that come with
SQL server. And they were

462
00:27:59.450 --> 00:28:02.930
trying to get a desktop
tool, which will allow, which

463
00:28:02.930 --> 00:28:05.690
was really the tool that
allows you to consume that

464
00:28:05.690 --> 00:28:08.930
BI functionality. And there were
a number of acquisitions made

465
00:28:08.930 --> 00:28:11.600
over the last decade or
so, but, you know, the

466
00:28:11.600 --> 00:28:15.080
answer kept coming back as
well. I use Excel for

467
00:28:15.080 --> 00:28:19.370
everything else. Why don't you
add this BI capability directly

468
00:28:19.370 --> 00:28:22.880
into Excel, because that's what
I'm most familiar with. So

469
00:28:23.630 --> 00:28:26.540
even if you're not an
Excel power user, you know,

470
00:28:26.540 --> 00:28:30.020
about pivot tables, because that's
a core capability that existed

471
00:28:30.020 --> 00:28:33.080
for years and years and
years, but now imagine that

472
00:28:33.260 --> 00:28:38.790
pivot being connected to an
external source. So that's, that's

473
00:28:38.840 --> 00:28:42.470
really the beauty it's, it's,
it's transitioned into this, this

474
00:28:42.470 --> 00:28:46.280
modern BI tool that you
use, and whether you are

475
00:28:46.280 --> 00:28:51.620
getting data from in Hadoop
cluster, or you're getting data

476
00:28:51.620 --> 00:28:56.360
from Azure data marketplace, or
you're getting data from some

477
00:28:56.360 --> 00:28:59.930
old data endpoint, you can
match that data up, create

478
00:28:59.930 --> 00:29:02.960
an in memory cube. And,
you know, that's some of

479
00:29:02.960 --> 00:29:07.010
the recent addition squats like
the power query and the

480
00:29:07.010 --> 00:29:09.530
power maps and things like
that. You can clearly build

481
00:29:09.530 --> 00:29:15.320
nice looking, not only charts,
but animations that bring it

482
00:29:15.320 --> 00:29:17.720
all together in terms of
being able to visualize the

483
00:29:17.720 --> 00:29:21.530
state. So if companies already
have Azure and they're already

484
00:29:21.530 --> 00:29:24.740
doing work on Azure and
they've already owned Excel, and

485
00:29:24.740 --> 00:29:26.990
like there's nothing additional to
be purchased. Is there, it's

486
00:29:26.990 --> 00:29:29.570
just a matter of doing
the analysis and deciding what

487
00:29:29.570 --> 00:29:32.630
this should look like for
your company. That is right.

488
00:29:32.630 --> 00:29:36.170
So if, if they have
Azure and they are using

489
00:29:36.920 --> 00:29:39.830
HD insights service in Azure,
so they have this data

490
00:29:39.830 --> 00:29:42.640
they're processing this data and
they can simply, if they

491
00:29:42.640 --> 00:29:46.360
want Excel, they can download
the free HD and sorry,

492
00:29:46.600 --> 00:29:50.530
hive ODBC driver from the
Microsoft site, and then start

493
00:29:51.010 --> 00:29:54.600
slicing and dicing that data.
That's absolutely right. And you

494
00:29:54.600 --> 00:29:57.180
have a whole module on
this within your applied insights

495
00:29:57.180 --> 00:30:01.650
course that anyone with a
Pluralsight subscription can start looking

496
00:30:01.650 --> 00:30:05.160
at right now. That is
correct. So I, I talk

497
00:30:05.160 --> 00:30:07.650
about, there are three modules
in there. One is about

498
00:30:07.710 --> 00:30:10.080
the HD insight, which is
the big data module. And

499
00:30:10.080 --> 00:30:13.950
we already talked about the
big compute Excel module. And

500
00:30:13.950 --> 00:30:16.890
then there is also a
module that I talk about

501
00:30:16.890 --> 00:30:20.070
if you are not trying
to do big data or

502
00:30:20.100 --> 00:30:23.580
big compute kinds of things,
you can also connect up

503
00:30:23.790 --> 00:30:27.630
multiple worker roles and then
offload processing to a worker

504
00:30:27.630 --> 00:30:30.300
role. So you can, you
can certainly do that if

505
00:30:30.300 --> 00:30:33.810
you're trying to do something
which is more custom and

506
00:30:34.560 --> 00:30:38.640
not the scale that you
want to have an HD

507
00:30:38.640 --> 00:30:43.590
insight cluster, you can also
provision a set of worker

508
00:30:43.590 --> 00:30:47.220
roles and connect them using
Azure queues or service bus

509
00:30:47.220 --> 00:30:50.640
queue. And you can, again,
implement if you will, your

510
00:30:50.640 --> 00:30:53.700
own custom MapReduced algorithm, if
you wanted to do that.

511
00:30:54.000 --> 00:30:56.280
So I have three modules
that, that sort of address

512
00:30:56.280 --> 00:30:59.760
the same problem, slightly different
toolset for a slightly different

513
00:30:59.760 --> 00:31:03.450
problem. Very cool. Cool. Well,
thanks so much Vishwas for

514
00:31:03.450 --> 00:31:06.090
chatting with me today about
applied Azure, and we'll make

515
00:31:06.090 --> 00:31:08.730
sure to include a link
to this course in the

516
00:31:08.730 --> 00:31:12.900
show notes and people can
connect with you online. Well,

517
00:31:12.900 --> 00:31:15.480
thank you, Scott. It's been
pleasure talking to you. This

518
00:31:15.480 --> 00:31:18.090
has been another episode of
Hanselminutes and we'll see you

519
00:31:18.090 --> 00:31:18.930
again next week.

