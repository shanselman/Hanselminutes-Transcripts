WEBVTT FILE

1
00:00:00.420 --> 00:00:03.780
Hey folks previously, I mentioned
code on the beach. That

2
00:00:03.780 --> 00:00:06.480
same group is hosting a
conference on a cruise ship

3
00:00:06.750 --> 00:00:09.180
code on the sea. It's
a five day cruise from

4
00:00:09.180 --> 00:00:13.710
Jacksonville, Florida to the Hamas
stopping in Nassau. And half-moon

5
00:00:13.710 --> 00:00:20.220
K from February 28th through March 5th, 2015,
or these sessions are going

6
00:00:20.220 --> 00:00:22.770
to be held on sea
days. So you'll have enough

7
00:00:22.770 --> 00:00:25.380
time with your family, plenty
of time on the ship,

8
00:00:25.410 --> 00:00:29.040
explore The Bahamas through some excursions,
and then you'll get to

9
00:00:29.040 --> 00:00:31.590
soak in that warm weather
and early March. It's sounding

10
00:00:31.590 --> 00:00:33.750
better than spending the week
back home where it's cold

11
00:00:34.230 --> 00:00:38.700
speakers will include Eric Meyer, Michael
feathers, and Greg young. So

12
00:00:38.700 --> 00:00:42.810
check out code on the
c@codeontheseat.com and you can save

13
00:00:42.810 --> 00:00:47.580
$150 with coupon code Hanselman.
Now, again, that website is

14
00:00:47.790 --> 00:01:07.200
code on the c.com. Check
it out from hanselminutes.com. It's

15
00:01:07.200 --> 00:01:11.370
Hansel minutes, a weekly discussion
with web developer and technologist

16
00:01:11.490 --> 00:01:15.900
Scott Hanselman. This is Lawrence Ryan
announcing show number four 33.

17
00:01:16.500 --> 00:01:20.910
In this episode, Scott talks
with Laura Swanson about designing for

18
00:01:20.910 --> 00:01:26.940
performance. Hi, this is Scott
Hanselman. This is another episode

19
00:01:26.940 --> 00:01:29.280
of Hansel minutes, and I'm
talking with Laura Swanson. Who's an

20
00:01:29.280 --> 00:01:32.850
engineering manager performance at Etsy.
Thanks for chatting with me

21
00:01:32.850 --> 00:01:37.350
today. It's my pleasure. You
have got an amazing presentation

22
00:01:37.350 --> 00:01:40.620
on designing for performance and
a really interesting perspective on,

23
00:01:41.130 --> 00:01:45.960
on performance. You seem to
think that design and performance,

24
00:01:45.960 --> 00:01:47.910
which I kind of think
about as being two separate

25
00:01:47.910 --> 00:01:51.060
disciplines really are the same
thing they need to work

26
00:01:51.060 --> 00:01:54.200
together. Yeah, absolutely. It's funny.
I think that we've thrown

27
00:01:54.200 --> 00:01:57.260
performance issues over the wall
towards engineers for a very

28
00:01:57.260 --> 00:02:00.290
long time. When in fact
the decisions that designers are

29
00:02:00.290 --> 00:02:03.320
making heavily influenced the end
Pedro time of any given

30
00:02:03.320 --> 00:02:06.500
site. Hmm. But how is
that? Not just like, Oh,

31
00:02:06.500 --> 00:02:08.870
this designer wants to use
a hero image with a

32
00:02:08.870 --> 00:02:11.900
giant PNG and don't do
that. Totally. Yeah. I mean,

33
00:02:11.900 --> 00:02:14.330
there's certainly guidelines and rules,
but I think that this

34
00:02:14.330 --> 00:02:17.600
is all about striking a
balance between aesthetics and performance,

35
00:02:17.840 --> 00:02:19.070
because at the end of
the day, what you want

36
00:02:19.070 --> 00:02:21.230
is a great user experience
and performance is a part

37
00:02:21.230 --> 00:02:24.140
of it, but so is,
is that X, So you

38
00:02:24.140 --> 00:02:26.270
work at Etsy and Etsy
has got like, what is

39
00:02:26.270 --> 00:02:27.860
it like a billion, a
billion and a half page

40
00:02:27.860 --> 00:02:31.990
views A lot. Yes. Many,
very many. Yeah. Is it

41
00:02:32.000 --> 00:02:34.070
something you have to bake
into your process at Etsy?

42
00:02:34.280 --> 00:02:36.920
Absolutely. And we've got two
different kinds of teams working

43
00:02:36.920 --> 00:02:39.650
on a site. We've got
feature teams who are focused

44
00:02:39.650 --> 00:02:42.500
on the end user experience.
So a team working on

45
00:02:42.830 --> 00:02:45.890
check out or shops or
something like that. And then

46
00:02:45.890 --> 00:02:49.340
we've also got a engineering
infrastructure teams. And these are

47
00:02:49.340 --> 00:02:52.730
the folks that support feature,
those feature teams. Let's say

48
00:02:52.730 --> 00:02:54.590
somebody is working on a
new experiment. We want to

49
00:02:54.590 --> 00:02:56.990
make sure that they're gathering
data correctly, that they've got

50
00:02:57.230 --> 00:02:59.410
development tools that they need,
that they're doing performance and

51
00:02:59.410 --> 00:03:02.890
mobile web appropriately. So between
these two teams, these two

52
00:03:02.890 --> 00:03:05.590
kinds of teams, we have
a, a collaborative effort into

53
00:03:05.590 --> 00:03:09.250
making sure that everything is
as great a possible user

54
00:03:09.250 --> 00:03:12.480
experience as it can be.
Do you think that getting

55
00:03:12.480 --> 00:03:15.720
people to care about performance
as a, as an organization

56
00:03:15.720 --> 00:03:18.780
requires a certain amount of
organizational will? I mean, everyone

57
00:03:18.780 --> 00:03:21.300
has to decide this is
important, but it also kind

58
00:03:21.300 --> 00:03:24.030
of comes from the top
as well. Like, okay, everybody

59
00:03:24.300 --> 00:03:27.750
two seconds matters here at
Etsy. Totally. And it's funny.

60
00:03:28.020 --> 00:03:30.240
I was the engineering manager
for the mobile web team

61
00:03:30.240 --> 00:03:32.520
before I was the engineering
manager for the performance team.

62
00:03:32.820 --> 00:03:35.010
And in both cases, you
really do need someone at

63
00:03:35.010 --> 00:03:38.430
the top supporting you and
empowering everybody within your organization

64
00:03:38.430 --> 00:03:40.860
to care about this stuff.
In our case for performance,

65
00:03:41.580 --> 00:03:44.550
our CEO said, page speed
matters. It's part of the

66
00:03:44.550 --> 00:03:46.950
user experience and the mobile
website. He came out and

67
00:03:46.950 --> 00:03:49.770
said, Etsy as a mobile
first company. And everybody needs

68
00:03:49.770 --> 00:03:52.860
to bake this into whatever
features or experiments or products

69
00:03:52.860 --> 00:03:57.000
they're building Interesting. Now mobile
sets a whole other tone

70
00:03:57.000 --> 00:04:00.000
because you've said in your
presentation that users expect two

71
00:04:00.000 --> 00:04:03.240
seconds and they start dropping
off right after that. You

72
00:04:03.240 --> 00:04:05.490
know, it's crazy. When we
start to think about performance

73
00:04:05.490 --> 00:04:08.910
in terms of mobile, you
start to really realize it's

74
00:04:09.000 --> 00:04:12.120
aggravating all these issues. We
start to talk about latency

75
00:04:12.150 --> 00:04:16.140
and mobile connections being, you
know, less than ideal. And

76
00:04:16.140 --> 00:04:18.660
you've got users globally that
have very different sets of

77
00:04:18.660 --> 00:04:22.290
infrastructure, older devices, et cetera.
So performance really becomes an

78
00:04:22.290 --> 00:04:24.180
issue when we start to
think about the mobile context.

79
00:04:25.560 --> 00:04:27.270
And so what are some
issues that we need to

80
00:04:27.270 --> 00:04:30.150
think about? Cause I mean,
there's the basics like page

81
00:04:30.150 --> 00:04:34.200
weight? Absolutely. So Patriot is
totally one of the, one

82
00:04:34.200 --> 00:04:36.180
of the main things that
we can optimize for, especially

83
00:04:36.180 --> 00:04:39.240
from a designer perspective. I
also like to emphasize that

84
00:04:39.240 --> 00:04:41.370
number of requests is a
good thing to think about.

85
00:04:41.370 --> 00:04:44.220
So how many images are
you including? How many CSS

86
00:04:44.220 --> 00:04:47.220
files are you including? How
can we optimize those? And

87
00:04:47.220 --> 00:04:50.340
then I also like to
emphasize that, can you make

88
00:04:50.340 --> 00:04:52.290
some savings in terms of
what's first loaded on the

89
00:04:52.290 --> 00:04:55.080
page? Can you get your
first paint optimized so that

90
00:04:55.410 --> 00:04:57.840
the page becomes interactive that
there's no scrolling, jank, that

91
00:04:57.840 --> 00:05:00.510
all those things that go
into perceived performance are addressed?

92
00:05:01.320 --> 00:05:04.380
Was that where you just
had scrolling Jake? Sorry. So

93
00:05:04.380 --> 00:05:06.600
jank is the term for,
you know, when you scroll

94
00:05:06.600 --> 00:05:08.820
down a page and it
starts to stutter and it's

95
00:05:08.820 --> 00:05:11.150
kind of janky, it's kind
of janky. Yeah. So if

96
00:05:11.160 --> 00:05:13.710
you go to jank free.org,
you can see a ton

97
00:05:13.710 --> 00:05:16.140
of resources there to teach
you what jank is and

98
00:05:16.140 --> 00:05:19.440
how to fix it. Oh,
wow. Okay. I never heard

99
00:05:19.440 --> 00:05:21.990
that before, but I know
janky, but that is awesome.

100
00:05:21.990 --> 00:05:23.820
I've never heard jank as
it now. And that's all,

101
00:05:23.850 --> 00:05:25.920
I'm not going to use
that every day. You know,

102
00:05:25.950 --> 00:05:29.700
we actually ran an experiment
in which we removed Genke

103
00:05:29.730 --> 00:05:31.710
from one of our pages.
We have an activity feed

104
00:05:31.710 --> 00:05:34.110
where users can go and
see all of the most

105
00:05:34.110 --> 00:05:36.840
recent things that their friends
are favoriting or new new

106
00:05:36.840 --> 00:05:39.450
shops, listing items. And we
had a bunch of scrolling

107
00:05:39.450 --> 00:05:42.320
junk in this and we
removed it and we saw

108
00:05:42.390 --> 00:05:47.100
statistically significantly. People were favoring
more items. And I'm hearing

109
00:05:47.100 --> 00:05:49.380
in everything that you're saying,
there's kind of a background

110
00:05:49.380 --> 00:05:54.240
thread of we're measuring everything.
Yes. At C says, you

111
00:05:54.240 --> 00:05:57.060
know, if, if it moves,
graph it. So for us,

112
00:05:57.080 --> 00:06:00.110
we measure everything possible. We
have hundreds of thousands of

113
00:06:00.110 --> 00:06:02.210
graphs at Etsy that we
look at, whether, you know,

114
00:06:02.210 --> 00:06:04.520
you're deploying something new or
you're just running a new

115
00:06:04.520 --> 00:06:07.900
experiment. We love to focus
on the metrics. So this

116
00:06:07.900 --> 00:06:11.260
is kind of a, a
sidecar discussion, but I was

117
00:06:11.260 --> 00:06:13.930
thinking about all the different
things that one can do

118
00:06:14.320 --> 00:06:17.500
to make performance better. And
my question to you is

119
00:06:18.100 --> 00:06:22.060
how often should people consider
doing totally crazy things that

120
00:06:22.060 --> 00:06:24.790
are effectively not the standard
web? Like you said, well,

121
00:06:24.790 --> 00:06:28.000
what can we do to
streamline that? Maybe we inline

122
00:06:28.000 --> 00:06:31.660
everything based 64, all the
images, Sprite, the entire site.

123
00:06:31.660 --> 00:06:34.330
I mean, those are kind
of anti web in the

124
00:06:34.330 --> 00:06:38.380
sense of it wasn't designed
that way, but would that

125
00:06:38.380 --> 00:06:40.270
make things better? And should
we try crazy stuff like

126
00:06:40.270 --> 00:06:42.520
that? You know, it's amazing
how many crazy things we've

127
00:06:42.520 --> 00:06:45.070
tried that have failed and
crazy things that we've tried

128
00:06:45.070 --> 00:06:47.380
that have one, you know,
again, because we're measuring everything,

129
00:06:47.380 --> 00:06:49.600
we have a sense of
whether or not something is

130
00:06:49.600 --> 00:06:52.030
going to work. We look
at things like conversion rate

131
00:06:52.030 --> 00:06:54.550
and favorite, right? And other,
you know, baseline business metrics.

132
00:06:54.790 --> 00:06:57.520
But maybe for companies who
have other kinds of engagement

133
00:06:57.520 --> 00:07:00.280
metrics to look at bounce
rate, exit rate, return rate.

134
00:07:00.610 --> 00:07:03.340
So for everything we tied,
it's crazy, we always say,

135
00:07:03.460 --> 00:07:06.880
did it work? So one
example at a previous company

136
00:07:06.880 --> 00:07:10.090
I worked at, we saw,
we had a home page

137
00:07:10.090 --> 00:07:13.390
that had 10 spots for
thumbnails. And there were 26

138
00:07:13.390 --> 00:07:16.030
images that rotated in and
out of these thumbnails. And

139
00:07:16.030 --> 00:07:18.010
we said, you know, it'd
be crazy if we just

140
00:07:18.010 --> 00:07:20.710
sprayed it, all of these
images together and added additional

141
00:07:20.710 --> 00:07:22.600
JavaScript and CSS to kind
of make it work. And

142
00:07:22.600 --> 00:07:25.060
the page got heavier. We
said this, I don't know,

143
00:07:25.060 --> 00:07:26.680
is this going to be
a performance win? But it

144
00:07:26.680 --> 00:07:29.740
was, we cut page load
time down by 35% with

145
00:07:29.740 --> 00:07:32.280
this new spreading technique. That
was kind of insane. We

146
00:07:32.310 --> 00:07:35.680
tried infinite scrolling and found
that that actually didn't work

147
00:07:35.680 --> 00:07:37.360
for Etsy. So something we
thought was going to be

148
00:07:37.360 --> 00:07:40.060
at like a, a GoTo,
you know, web standard was

149
00:07:40.060 --> 00:07:42.370
actually didn't actually work for
our users. So for us,

150
00:07:42.370 --> 00:07:44.140
it's all about, you know,
what, go for it, try

151
00:07:44.140 --> 00:07:45.940
it, see if it's gonna
work. And if it does

152
00:07:45.940 --> 00:07:49.660
you'll know, Scrolling is one
of those things where there's

153
00:07:49.660 --> 00:07:51.940
times when I'm scrolling and
I'm like, man, I really

154
00:07:51.940 --> 00:07:55.330
wish this was infinite, but
then I'll scroll halfway down.

155
00:07:55.390 --> 00:07:57.070
And then like, my wife
will want to send a

156
00:07:57.070 --> 00:07:59.920
permalink. And she, you know,
cause she doesn't, my wife

157
00:07:59.920 --> 00:08:01.990
is not technical. She doesn't
note a permanent gaze. So

158
00:08:02.320 --> 00:08:05.560
she's halfway down the page.
She grabs the current URL

159
00:08:05.560 --> 00:08:07.750
and then sends that. And
then everyone loses. It's like

160
00:08:07.750 --> 00:08:11.410
the whole search results problem.
Totally. I find something and

161
00:08:11.410 --> 00:08:12.640
I want to send a
link to it. And then

162
00:08:12.640 --> 00:08:15.850
I end up sending like
a session ID. Yeah. You

163
00:08:15.850 --> 00:08:17.470
know, it's funny, again, this
comes back to the fact

164
00:08:17.470 --> 00:08:19.990
that performance is a big
part, but just a part

165
00:08:20.080 --> 00:08:22.150
of the entire user experience,
you know, you really have

166
00:08:22.150 --> 00:08:24.880
to think about things globally,
which is why it's important

167
00:08:24.880 --> 00:08:28.840
for designers to understand how,
how they impact performance. Yeah.

168
00:08:28.870 --> 00:08:31.030
I think it's interesting also
that I don't think design

169
00:08:31.720 --> 00:08:35.170
some designers and some sites
don't realize that the address

170
00:08:35.170 --> 00:08:39.610
bar is a design element.
Absolutely. Yeah. The URL should

171
00:08:39.610 --> 00:08:43.480
matter. Now you you've talked
about like the number of

172
00:08:43.480 --> 00:08:45.790
seconds and things like that,
but I'm also noticing that

173
00:08:45.790 --> 00:08:48.520
when you talk about performance,
the metrics, the kind of

174
00:08:48.520 --> 00:08:51.910
KPIs, the key performance indicators
that you're using are business

175
00:08:51.910 --> 00:08:55.800
focused. Absolutely. Yeah. It's important
know on a couple of

176
00:08:55.800 --> 00:08:58.410
levels. So on one level
you want to convince the

177
00:08:58.410 --> 00:09:00.930
very important people. The VIP
is at your company, that

178
00:09:00.930 --> 00:09:04.200
performance matters. You also want
to convince everybody around you.

179
00:09:04.200 --> 00:09:06.720
That performance matters. What I
think may be the most

180
00:09:06.750 --> 00:09:09.660
challenging part of our performance
is getting the people around

181
00:09:09.660 --> 00:09:12.390
you to care about it
too. This is culture change

182
00:09:12.390 --> 00:09:13.710
is kind of the hardest
thing to do when it

183
00:09:13.710 --> 00:09:16.410
comes to performance. So what
I've found is helpful is

184
00:09:16.650 --> 00:09:19.740
correlating performance with business metrics,
whatever it is that those

185
00:09:19.740 --> 00:09:21.960
folks care about. And that
way you can help them

186
00:09:21.960 --> 00:09:25.310
champion, you know, performance at
your organization. So if you've

187
00:09:25.310 --> 00:09:28.910
got an organization that's maybe
30% technical, sure. You can

188
00:09:28.910 --> 00:09:31.880
say time to first byte
to those people. But for

189
00:09:31.880 --> 00:09:33.980
the other 70%, you need
to be saying bounce rate

190
00:09:34.310 --> 00:09:38.210
and click through rate. Even
the people who are technical.

191
00:09:38.210 --> 00:09:40.970
Sometimes it's a challenge more
often than not. I see

192
00:09:41.360 --> 00:09:45.080
organizations that have performance cops
or performance janitors. People are,

193
00:09:45.140 --> 00:09:47.480
you know, who are coming
in and playing cleanup for

194
00:09:47.480 --> 00:09:50.780
other people's development cycles. And
that's just not a sustainable

195
00:09:50.780 --> 00:09:54.020
model. So it's really important
to convince everybody, even people

196
00:09:54.020 --> 00:09:56.510
who you would assume would
care about performance. That really,

197
00:09:56.510 --> 00:09:58.820
this is a huge part
of their jobs. Can you

198
00:09:58.820 --> 00:10:00.890
explain to me what some
of these metrics are like,

199
00:10:00.890 --> 00:10:03.920
what does bounce rate mean
and how does my performance

200
00:10:03.920 --> 00:10:07.940
at my page change that?
So as you mentioned earlier,

201
00:10:07.940 --> 00:10:11.090
users generally like to leave
pages that take longer than,

202
00:10:11.090 --> 00:10:13.340
than three seconds to load.
And ideally we're aiming for

203
00:10:13.340 --> 00:10:16.610
two seconds. Google is actually
suggesting that you aim for

204
00:10:16.610 --> 00:10:19.250
first paint in one second,
and that means getting something

205
00:10:19.250 --> 00:10:21.590
on the screen. And under
one second. So when we

206
00:10:21.590 --> 00:10:24.770
talk about things like bounce
rate, we're saying how long

207
00:10:24.770 --> 00:10:26.420
it takes your page to
load or how long it

208
00:10:26.420 --> 00:10:28.580
takes to see something on
the page can cause a

209
00:10:28.580 --> 00:10:31.130
visitor to just leave your
site to exit it completely.

210
00:10:31.250 --> 00:10:33.200
Maybe they just see one
page and leave, or maybe

211
00:10:33.200 --> 00:10:35.210
they hit a slow page
and then they bounce or

212
00:10:35.210 --> 00:10:37.910
then they exit. So in
these cases, we know that

213
00:10:38.120 --> 00:10:41.660
the whole user experience is
affected by how the perceived

214
00:10:41.660 --> 00:10:43.940
performance of your site is.
So it's really important to

215
00:10:43.940 --> 00:10:47.120
be measuring these things In
your presentation. You had one

216
00:10:47.120 --> 00:10:49.760
metric where you said 160
K gets added to a

217
00:10:49.760 --> 00:10:51.440
page, which might be the
size of a couple of

218
00:10:51.440 --> 00:10:56.420
PNGs, 12% increase in bounce
rate on mobile people just

219
00:10:56.420 --> 00:10:59.030
start baling. Yeah. We found
that at Etsy. So we,

220
00:10:59.300 --> 00:11:01.250
you know, we have the
luxury of running these experiments.

221
00:11:01.250 --> 00:11:03.740
And in this case we
slowed down a page by

222
00:11:03.740 --> 00:11:06.770
adding 160 kilobytes of hidden
images, just to see what

223
00:11:06.770 --> 00:11:11.420
would happen. And on mobile
devices, 12% more people left,

224
00:11:11.480 --> 00:11:14.540
they just came, sat at
one page and left. So

225
00:11:14.540 --> 00:11:18.710
we're absolutely able to track
the performance impact on, you

226
00:11:18.710 --> 00:11:22.400
know, basic engagement. Yeah. I
think that my patients sometimes

227
00:11:22.550 --> 00:11:25.280
is limited to I'll wait
a couple of seconds. Maybe

228
00:11:25.280 --> 00:11:27.260
I'll push reload. That's the
other thing I noticed that

229
00:11:27.260 --> 00:11:29.600
there's certain sites where I'll
just hit reload. I don't

230
00:11:29.600 --> 00:11:32.720
know why I do that.
Like hitting reload is just

231
00:11:32.720 --> 00:11:34.880
a feature on this site
because maybe it'll work better.

232
00:11:34.880 --> 00:11:38.060
The second time I'll get
a different web server. You

233
00:11:38.060 --> 00:11:41.300
talk about how removing redirects
can increase, click through rate.

234
00:11:41.330 --> 00:11:42.650
What do you mean by
redirect? Are you talking about

235
00:11:42.650 --> 00:11:45.830
like 300 ones and 300
twos Precisely. So, you know,

236
00:11:45.830 --> 00:11:50.780
you may see somebody who
has like an m.m.xyz.com and

237
00:11:50.780 --> 00:11:54.040
those are often mobile sub
domains. So, you know, you

238
00:11:54.040 --> 00:11:56.080
get a link, it sees
that you're coming from a

239
00:11:56.080 --> 00:11:59.140
mobile device. It'll redirect you
over to a page optimized

240
00:11:59.140 --> 00:12:02.020
for your mobile device. This
is really bad for performance

241
00:12:02.020 --> 00:12:03.850
because of the extra time
it takes to go and

242
00:12:03.850 --> 00:12:07.960
redirect that visitor. So we
recommend generally avoiding redirects for

243
00:12:07.960 --> 00:12:11.410
this performance, reason. And DoubleClick
saw that implementing a redirect

244
00:12:11.560 --> 00:12:14.500
actually was a negative user
experience. And after removing that

245
00:12:14.500 --> 00:12:17.110
redirect, they saw a huge
increase in click throughs on

246
00:12:17.110 --> 00:12:21.240
mobile devices. You know, I,
I recently logged about how

247
00:12:21.240 --> 00:12:23.670
I think that this tiny
URL thing is getting completely

248
00:12:23.670 --> 00:12:26.700
out of control. I was
given a URL. I forgot

249
00:12:26.700 --> 00:12:28.680
what it was for, but
I got it on Twitter

250
00:12:29.220 --> 00:12:32.850
and it felt slow. So
I went in and, you

251
00:12:32.850 --> 00:12:37.260
know, sniffed it. I had
seven redirects from the Twitter

252
00:12:37.260 --> 00:12:42.360
TCO t.co to the end
results site seven. I think

253
00:12:42.360 --> 00:12:45.120
it was, I went through
tribal. I went through DoubleClick.

254
00:12:45.120 --> 00:12:46.710
I went through a Google
shortener and I went through

255
00:12:46.710 --> 00:12:50.190
Twitter. Shortner that's brutal. It
was, I was like, I

256
00:12:50.190 --> 00:12:52.590
really don't want the content
that bad. Nobody's going to

257
00:12:52.590 --> 00:12:56.820
wait that long now questions
that people need to be

258
00:12:56.820 --> 00:12:59.970
asking when they design, which
I think is really important

259
00:12:59.970 --> 00:13:03.720
for designers is like you
say, here, what value does

260
00:13:03.720 --> 00:13:09.030
this giant hero image add?
Well, these three font weights

261
00:13:09.030 --> 00:13:12.090
help drive conversions. What metric
are we hoping will improve

262
00:13:12.090 --> 00:13:14.130
with this carousel? All of
these things are things that

263
00:13:14.130 --> 00:13:17.280
designers need to be asking
themselves as they're making design

264
00:13:17.280 --> 00:13:20.460
decisions. That again, impact on
page, load time. Do you

265
00:13:20.460 --> 00:13:22.680
think designers don't often think
about that? Do you think

266
00:13:22.680 --> 00:13:25.680
that they just go, Oh,
it's prettier. So it's unclear

267
00:13:25.680 --> 00:13:27.960
to me where in the
process, this should start. I

268
00:13:27.960 --> 00:13:30.870
think that designers generally are
thinking about the user experience.

269
00:13:30.870 --> 00:13:34.050
Overall. They're thinking about content
hierarchy and they're thinking about,

270
00:13:34.410 --> 00:13:36.510
you know, again, how pretty
it is because aesthetics, as

271
00:13:36.510 --> 00:13:39.210
we know, contribute to overall
user experience. And I think

272
00:13:39.210 --> 00:13:40.680
that these are, this is
also the time we need

273
00:13:40.680 --> 00:13:43.230
to be asking ourselves these
questions about end page, load

274
00:13:43.230 --> 00:13:45.990
time. You do. It sounds
like you do a lot

275
00:13:45.990 --> 00:13:48.450
of AB testing when, like,
if you look at example

276
00:13:48.450 --> 00:13:52.890
of like a font weights,
you might say, well, adding

277
00:13:52.890 --> 00:13:55.020
this font, weight adds this
many K to the page

278
00:13:55.050 --> 00:13:56.580
because we're going to go
and get download the web

279
00:13:56.580 --> 00:14:00.120
font. But people really like
it because AB testing shows

280
00:14:00.480 --> 00:14:02.910
that people want to buy
more stuff. Is that what

281
00:14:02.910 --> 00:14:05.790
you're trying to measure against?
Absolutely. And it's gone, there

282
00:14:05.790 --> 00:14:07.560
are going to be cases
in which those extra font

283
00:14:07.560 --> 00:14:09.660
weights win, but you want
to have the data. You

284
00:14:09.660 --> 00:14:11.940
can't just assume that the
prettier it gets, the more

285
00:14:11.940 --> 00:14:14.730
people want to buy something
or whatever. I think that

286
00:14:14.730 --> 00:14:17.130
it's really important to run
those AB tests to make

287
00:14:17.130 --> 00:14:20.760
sure yes, indeed those font
weights are driving these engagement

288
00:14:20.760 --> 00:14:25.470
metrics, even at the cost
of, you know, Do you

289
00:14:25.470 --> 00:14:28.200
build in this AB testing
into the app, I mean,

290
00:14:28.200 --> 00:14:30.930
is, is, is your app
as much an app that

291
00:14:30.930 --> 00:14:34.320
shows Etsy products as it
is an app that does

292
00:14:34.320 --> 00:14:36.270
AB testing, or do you
use a third party AB

293
00:14:36.270 --> 00:14:40.230
testing tool, AB testing tool
because it's so central to

294
00:14:40.230 --> 00:14:43.080
our mission, this experiment driven
design that we built it

295
00:14:43.080 --> 00:14:45.900
ourselves. Doesn't that mean from
like a, you know, like

296
00:14:45.930 --> 00:14:48.960
the number of features that
the Etsy web app has

297
00:14:48.960 --> 00:14:53.180
that AB testing is as
big a feature as is

298
00:14:53.480 --> 00:14:57.190
being Etsy Wholeheartedly. You know,
it's funny coming here, it's

299
00:14:57.190 --> 00:14:59.520
a completely different engineering culture
that I'm used to it,

300
00:14:59.520 --> 00:15:02.650
this kind of experiment driven
design, but we really build

301
00:15:02.650 --> 00:15:06.190
into our product cycles. We'll
spend months iterating on small

302
00:15:06.190 --> 00:15:08.620
different pieces of a design.
Say the listing page, for

303
00:15:08.620 --> 00:15:11.020
example, took us eight months
last year to iterate upon.

304
00:15:11.470 --> 00:15:15.070
We're measuring all these different
combinations of changes and design

305
00:15:15.070 --> 00:15:17.620
improvements to see what ends
up working overall for our

306
00:15:17.620 --> 00:15:19.840
users. And again, performance is
a huge part of that.

307
00:15:20.410 --> 00:15:22.180
No one complains about this.
No, one's like, come on,

308
00:15:22.180 --> 00:15:23.950
we got to go faster.
We've got to move quicker.

309
00:15:24.670 --> 00:15:27.670
It's so cultural that, that
no one minds Lately. I

310
00:15:27.670 --> 00:15:29.050
mean, at the end of
the day, it can be

311
00:15:29.050 --> 00:15:31.900
frustrating when your experiments aren't
winning more often than not.

312
00:15:31.900 --> 00:15:34.330
You find that your best
guests didn't win. And I

313
00:15:34.330 --> 00:15:36.460
think that that contributes more
to burn out than anything

314
00:15:36.460 --> 00:15:39.610
else. But no, from a,
from a roadmapping perspective, we

315
00:15:39.610 --> 00:15:43.840
build in the time to
run the experiments. Hi, this

316
00:15:43.840 --> 00:15:46.960
is Scott. I really appreciate
our sponsors because they make

317
00:15:46.960 --> 00:15:51.340
the show possible. Today's show
is sponsored by Tellerik create

318
00:15:51.340 --> 00:15:55.450
compelling app experiences across any
screen with the Tellerik platform.

319
00:15:55.930 --> 00:15:59.560
Telerx end to end platform,
uniquely combines industry leading UI

320
00:15:59.560 --> 00:16:03.310
tools with cloud services to
simplify the entire app development

321
00:16:03.310 --> 00:16:08.020
cycle. Tellerik offers everything.net developers
need to build quality apps

322
00:16:08.140 --> 00:16:19.660
faster, try it free at
tellerik.com/platform. That's tellerik.com/platform. So when

323
00:16:19.660 --> 00:16:22.090
we take our application and
we run it through something

324
00:16:22.090 --> 00:16:25.150
like webpage test, and we
see that big chart and

325
00:16:25.150 --> 00:16:27.100
all the colors in it,
I think everyone's seen this

326
00:16:27.100 --> 00:16:30.160
before, but have we really
looked at it and understood

327
00:16:30.670 --> 00:16:33.040
what is it that we're
seeing and what, what, what

328
00:16:33.070 --> 00:16:36.340
should we do? That's a
great question. Yeah. That waterfall

329
00:16:36.340 --> 00:16:38.980
chart that you're referring to,
it can be really confusing.

330
00:16:38.980 --> 00:16:40.390
Especially the first time you
look at it, there are

331
00:16:40.410 --> 00:16:43.300
so many colors, what they
all mean, why are there

332
00:16:43.300 --> 00:16:46.360
vertical lines and horizontal lines?
So really what it comes

333
00:16:46.360 --> 00:16:48.820
down to when you look
at webpage test is the

334
00:16:48.820 --> 00:16:51.400
number of requests. So that's
the amount of things that

335
00:16:51.400 --> 00:16:54.430
are loaded on the page,
the size of those requests.

336
00:16:54.460 --> 00:16:57.010
And they could be a
few kilobytes, a few megabytes

337
00:16:57.010 --> 00:16:59.770
if you're really unlucky. And
then also you want to

338
00:16:59.770 --> 00:17:01.870
focus on how you, can
you optimize the number of

339
00:17:01.870 --> 00:17:05.890
connections. So let's say what
you mentioned earlier was inlining

340
00:17:05.890 --> 00:17:09.880
CSS. Can we actually move
our CSS onto the page

341
00:17:09.910 --> 00:17:12.220
rather than going and requesting
that CSS from a file

342
00:17:12.340 --> 00:17:13.840
and how is this going
to end up affecting our

343
00:17:13.840 --> 00:17:19.450
overall performance And there's, but
there's, there's size of the

344
00:17:19.450 --> 00:17:23.020
headers. As I've heard people
do micro optimizations and say,

345
00:17:23.020 --> 00:17:25.360
well, you know, the size
of the CSS file is

346
00:17:25.360 --> 00:17:29.080
smaller than the headers. It
costs to go and get

347
00:17:29.080 --> 00:17:32.230
it. There's so many things
to consider as well as

348
00:17:32.500 --> 00:17:35.770
cashing. It's surprising how few
people pay attention to, you

349
00:17:35.770 --> 00:17:38.380
know, if not modified since
and really use HTTP for

350
00:17:38.380 --> 00:17:43.090
themselves. Absolutely. <inaudible>, it's surprising
and actually image compression. I

351
00:17:43.090 --> 00:17:45.550
mean, there's so many little
things that add up to,

352
00:17:46.060 --> 00:17:48.160
I mean, they're low hanging
fruit, just turning on jesus'

353
00:17:48.160 --> 00:17:51.210
thing or automating the way
that you do image compression.

354
00:17:51.210 --> 00:17:53.100
I mean, these are little
wins that have a huge

355
00:17:53.100 --> 00:17:56.090
improvement on the overall profile.
Okay. So then let's, let's,

356
00:17:56.750 --> 00:17:59.240
let's dig into the one
request. Let's say that you're

357
00:17:59.240 --> 00:18:02.210
going to go and call
a at for an image.

358
00:18:03.140 --> 00:18:05.660
Maybe you, when you're very
first starting out, you guys

359
00:18:05.660 --> 00:18:09.080
have built it. You've put
a, a JPEG up on

360
00:18:09.080 --> 00:18:12.890
www.etsy.com, which happens to be
the same place you're serving

361
00:18:12.890 --> 00:18:16.970
your HTML from. Yeah. I'm
an optimization. Might be moving

362
00:18:16.970 --> 00:18:19.730
that to its own sub
domain. Yeah. I mean test

363
00:18:19.730 --> 00:18:22.610
it sometimes that some, but
that's called domain sharding. So

364
00:18:22.610 --> 00:18:25.790
splitting a number of assets
over a number of different

365
00:18:25.790 --> 00:18:28.730
domains. Sometimes that can be
a performance win. Sometimes it

366
00:18:28.730 --> 00:18:31.010
actually takes longer because you
have to do the DNS

367
00:18:31.010 --> 00:18:32.930
look up for all those
additional domains, et cetera, et

368
00:18:32.930 --> 00:18:35.900
cetera. So that's one thing
you could try again, measure

369
00:18:35.900 --> 00:18:38.240
it and see what happens.
Another thing you can try

370
00:18:38.240 --> 00:18:41.090
is choosing a different image
format. So maybe you have

371
00:18:41.090 --> 00:18:43.180
an image with very few
colors in it that might

372
00:18:43.180 --> 00:18:45.800
be better for a PNG
eight than a JPEG. Maybe

373
00:18:45.800 --> 00:18:49.010
you have transparency that you
don't need eliminating that transparency

374
00:18:49.010 --> 00:18:51.560
and changing it to a
JPEG could be great. Maybe

375
00:18:51.560 --> 00:18:54.110
you just haven't run it
that final compression step before

376
00:18:54.110 --> 00:18:57.110
uploading it. Maybe you're serving
it at the wrong size.

377
00:18:57.140 --> 00:18:59.210
You know, you have this
huge image that's scaled down

378
00:18:59.210 --> 00:19:01.490
for a different size. These
are all things that you

379
00:19:01.490 --> 00:19:03.260
can look at when you're,
when you're looking to optimize

380
00:19:03.260 --> 00:19:06.800
just a single image. Okay.
And then maybe putting GS

381
00:19:06.810 --> 00:19:10.060
up on, on your CDN
that handles your JPEGs might

382
00:19:10.070 --> 00:19:12.590
be a good idea because
Jesus doesn't give you anything.

383
00:19:12.590 --> 00:19:15.140
It might just slow things
down. Yeah. Jesus will actually

384
00:19:15.140 --> 00:19:17.090
help you with text assets,
but not so much for

385
00:19:17.090 --> 00:19:19.730
image assets. So Jesus will
help with the HTML and

386
00:19:19.730 --> 00:19:23.540
CSS. If Jesus is so
important of HTTP, compression is

387
00:19:23.540 --> 00:19:27.140
so important and everyone should
have Jesus on why do

388
00:19:27.140 --> 00:19:31.040
we bother minifying CSS? Oh,
so she said, we'll help

389
00:19:31.040 --> 00:19:34.280
you find additional compression methods.
So it looks for patterns

390
00:19:34.280 --> 00:19:37.340
within your CSS. Let's say,
for example, vendor prefixes and

391
00:19:37.340 --> 00:19:40.100
it'll help you shrink and
modify those too. But minifying

392
00:19:40.100 --> 00:19:42.350
is totally a good idea.
Additional staff. Okay. So minifying

393
00:19:42.380 --> 00:19:44.660
is totally important. And just
because you're, Jesus doesn't mean

394
00:19:44.660 --> 00:19:47.450
you get to not do
the other, Right. Yeah, totally.

395
00:19:47.540 --> 00:19:50.450
You should definitely do both.
Do you think that it's

396
00:19:50.450 --> 00:19:54.170
important for an application to,
to kind of build itself?

397
00:19:54.170 --> 00:19:56.030
Like the one that you
run in dev is different

398
00:19:56.030 --> 00:19:57.830
than the one that you
went in production? Or are

399
00:19:57.830 --> 00:20:00.470
you running, how many levels
do you have as far

400
00:20:00.470 --> 00:20:04.580
as dev test staging production
and how squishy, how squished

401
00:20:04.790 --> 00:20:06.860
does it get as it
moves its way towards actually

402
00:20:06.890 --> 00:20:09.890
going live? That's a really
good question. So we have

403
00:20:10.040 --> 00:20:13.040
three different environments. We have
our development environments, we've got,

404
00:20:13.040 --> 00:20:15.380
you know, virtual machines that
we all work on independently.

405
00:20:16.070 --> 00:20:19.310
We've got a staging environment,
which we call princess. So

406
00:20:19.310 --> 00:20:22.940
princess saves us. And then
we've got a live production

407
00:20:22.940 --> 00:20:25.460
environment, which is, you know,
obviously we test everything there,

408
00:20:25.970 --> 00:20:28.430
Princess to talk to me
about princess, princess say she

409
00:20:28.430 --> 00:20:31.490
saves herself or she saves
everyone. She says everybody. So

410
00:20:31.490 --> 00:20:33.950
we run tests on princess
as we're working through and

411
00:20:33.950 --> 00:20:36.020
about to deploy to production.
And so princess saves us

412
00:20:36.350 --> 00:20:38.120
princess day. It helps us
out. And what is, what

413
00:20:38.120 --> 00:20:41.840
is the princess's responsibilities? So
for instance, we, it's basically

414
00:20:41.840 --> 00:20:44.480
our state of environment. We
can see what's as close

415
00:20:44.480 --> 00:20:47.920
as possible to production as
possible. And so we run

416
00:20:47.920 --> 00:20:50.260
all these tasks and we
check things on princess before

417
00:20:50.260 --> 00:20:53.280
we end up going live
to production. It seems like

418
00:20:53.280 --> 00:20:56.850
everyone has really cool about
in, in internal tools. I

419
00:20:56.850 --> 00:21:00.920
know that like Netflix has
got like chaos monkey and

420
00:21:00.930 --> 00:21:02.940
things like that. What other
tools do you have internally

421
00:21:02.940 --> 00:21:06.020
that help you with the
process? My favorite is, is

422
00:21:06.030 --> 00:21:09.630
push bot. So within IRC,
we actually, Oh, I should

423
00:21:09.630 --> 00:21:12.630
back up and say Etsy
practices, continuous deployment. So we're

424
00:21:12.630 --> 00:21:15.540
constantly pushing out, changes to
the web. Every day we

425
00:21:15.540 --> 00:21:18.450
have, I think, upwards of
50 deploys each day and

426
00:21:18.450 --> 00:21:21.300
we have certain, you know,
push Q hours, we can

427
00:21:21.300 --> 00:21:23.340
hop in the push queue.
And this is all happens

428
00:21:23.340 --> 00:21:26.190
in IRC. So push bot
is a bot and this

429
00:21:26.190 --> 00:21:29.010
helps us make sure that
everything is going smoothly for

430
00:21:29.040 --> 00:21:31.440
pushing to production. It will,
you can hop in the

431
00:21:31.440 --> 00:21:33.540
push queue and push spots
like, Hey, I say, you

432
00:21:33.540 --> 00:21:36.060
have done go ahead and
push all your changes to

433
00:21:36.060 --> 00:21:37.890
us. And that says, Hey,
I'm going to run some

434
00:21:37.890 --> 00:21:40.110
tests and I'm going to
push to princess and then

435
00:21:40.110 --> 00:21:42.510
Hey, more tests and then
push their production. So it's

436
00:21:42.510 --> 00:21:44.970
actually one of our, one
of my favorite things is,

437
00:21:45.210 --> 00:21:48.780
is the push button When
you, and forgive my ignorance,

438
00:21:48.780 --> 00:21:51.270
but this, my whole, all
my questions are ignorant. I

439
00:21:51.270 --> 00:21:55.080
feel like sometimes, but if
you're pushing to production 50

440
00:21:55.080 --> 00:21:58.740
times, people say that and
more and more we hear

441
00:21:58.740 --> 00:22:01.440
about this, like WordPress, you
know, we push 120 times,

442
00:22:01.800 --> 00:22:04.980
how am I going to
get performance if like CSS

443
00:22:04.980 --> 00:22:07.290
is changing every time? Or
are you, you know, if

444
00:22:07.290 --> 00:22:11.730
you're pushing everything that's going
to invalidate caching. Yeah. So

445
00:22:11.730 --> 00:22:13.920
that's actually one of the
big challenges of working with

446
00:22:13.950 --> 00:22:16.680
a very large engineering team.
We have, I think at

447
00:22:16.680 --> 00:22:20.700
this point more than 170
engineers. So not only instilling

448
00:22:20.700 --> 00:22:24.000
these values in everybody is
difficult, but also, you know,

449
00:22:24.030 --> 00:22:25.620
the fact that it's changing
all the time, the fact

450
00:22:25.620 --> 00:22:29.010
that we have to have
separate page specific CSS, in

451
00:22:29.010 --> 00:22:32.460
addition to our baseline, CSS
is a performance challenge. That's

452
00:22:32.460 --> 00:22:35.010
going to be two CSS
requests on every page. So

453
00:22:35.010 --> 00:22:37.560
for us, we absolutely have
to weigh all the performance

454
00:22:37.560 --> 00:22:42.270
gains alongside what is realistic
for a continuous deployment environment.

455
00:22:42.990 --> 00:22:45.050
What are some things that
someone needs to consider when

456
00:22:45.090 --> 00:22:48.930
doing continuous deployment of web
things that doesn't just undo

457
00:22:48.930 --> 00:22:52.410
performance? Like if I had
answered tomorrow, maybe there's 80,

458
00:22:52.740 --> 00:22:54.900
80 deployments happened between the
time I looked at it

459
00:22:54.900 --> 00:22:58.350
today and yesterday is some
of the site change, but

460
00:22:59.070 --> 00:23:01.230
other parts are cashed. And
are you keeping track of

461
00:23:01.230 --> 00:23:03.570
that? Definitely. And we do
a lot of watching of

462
00:23:03.570 --> 00:23:06.450
what's being cashed and what's
being invalidated. So whenever you

463
00:23:06.450 --> 00:23:10.530
deploy part of your responsibility
is to check all of

464
00:23:10.530 --> 00:23:12.690
these graphs and, you know,
but we're looking for what

465
00:23:12.690 --> 00:23:14.970
we call three arms sweaters,
which are our four or

466
00:23:14.970 --> 00:23:17.760
four pages and various other
kinds of, you know, client

467
00:23:17.760 --> 00:23:23.040
errors. We're looking for overall
engagement metrics. So did checkouts

468
00:23:23.070 --> 00:23:26.400
dip or spike did number
of pages, dip or spike?

469
00:23:27.030 --> 00:23:29.820
We're also looking for performance
metrics. So we have our

470
00:23:29.820 --> 00:23:32.700
top pages and the dashboard
that we look out for

471
00:23:32.700 --> 00:23:35.790
deploys, and we can see
did any page load times

472
00:23:35.790 --> 00:23:39.630
increase, did any backend load
times increased at any front

473
00:23:39.630 --> 00:23:42.540
end load times increase? And
so we can, we can

474
00:23:42.540 --> 00:23:44.970
actually see in those graphs,
we have vertical lines showing

475
00:23:45.260 --> 00:23:49.370
deployments happened so we can
measure any kinds of major

476
00:23:49.370 --> 00:23:52.600
differences alongside when deployments happened.
And are you, have you

477
00:23:52.600 --> 00:23:54.760
baked in kind of like
a cat where they call

478
00:23:54.760 --> 00:23:57.160
them a cash breakers where
you add in a query

479
00:23:57.160 --> 00:24:00.820
string on your CSS to
say, I really need you

480
00:24:00.820 --> 00:24:02.050
to go and get this
new. And even though it

481
00:24:02.050 --> 00:24:03.730
has the same file name
or how do you manage

482
00:24:03.730 --> 00:24:06.700
that? Yeah, so we do
have a change to the

483
00:24:06.700 --> 00:24:09.010
URL, but it won't be
a query string. Believe it

484
00:24:09.010 --> 00:24:11.020
or not query strings. If
you have any sort of

485
00:24:11.020 --> 00:24:13.810
like question Mark V equals
or, you know, whatever, most

486
00:24:13.810 --> 00:24:15.970
surfers actually don't even cash
those because they know that

487
00:24:15.970 --> 00:24:18.220
they'll change. So I would
have recommended boarding that entirely

488
00:24:18.910 --> 00:24:22.030
hot tip instead of it.
So it's based at zero

489
00:24:22.030 --> 00:24:25.960
zero, zero two dot CSS.
Okay. So it might be

490
00:24:26.140 --> 00:24:28.990
food at CSS in dev,
but by the time it

491
00:24:28.990 --> 00:24:32.320
gets out of production, it's
long number Precisely. And so

492
00:24:32.320 --> 00:24:35.920
when we're compiling that entire
CSS file, we're also concatenating

493
00:24:35.920 --> 00:24:39.610
a number of what was
previously separate CSS files. I

494
00:24:39.610 --> 00:24:41.740
see. But how do you
keep yourself from getting into

495
00:24:41.740 --> 00:24:46.150
these situations where it looks
weird because you know, someone

496
00:24:46.150 --> 00:24:48.160
visited on Tuesday and then
they came back a week

497
00:24:48.160 --> 00:24:50.230
later and they got a
different version. And then your

498
00:24:50.230 --> 00:24:55.090
answer is hit control F
five. It'll probably look better

499
00:24:55.090 --> 00:24:57.670
than do you have those
situations where someone updated a

500
00:24:57.670 --> 00:24:59.650
font in a BCSS and
the whole site looks weird

501
00:24:59.650 --> 00:25:02.290
for a minute. I don't
think that we do. And

502
00:25:02.290 --> 00:25:04.660
mostly because we start to
have what we call dark

503
00:25:04.690 --> 00:25:07.600
changes, where we're slowly pushing
changes to CSS and getting

504
00:25:07.600 --> 00:25:10.180
them cashed and getting them
in people's browsers before we

505
00:25:10.180 --> 00:25:12.580
reflect the change in the
page that people see. So,

506
00:25:12.580 --> 00:25:15.400
because we practice continuous deployment,
we're able to start making

507
00:25:15.400 --> 00:25:19.150
various subtle shifts before actually
making or before actually implementing

508
00:25:19.150 --> 00:25:22.330
the experiment itself. Interesting. So
does that mean that it

509
00:25:22.330 --> 00:25:25.870
might be more like, like
another hot tip don't necessarily

510
00:25:25.870 --> 00:25:29.560
like change a font color
of a known well known

511
00:25:29.560 --> 00:25:33.730
CSS name rather at a
new one and then later

512
00:25:33.730 --> 00:25:36.850
changed the element to point
to that new CSS? Absolutely.

513
00:25:36.850 --> 00:25:38.830
Yeah. Well, okay. Well that's
you, that's going to change

514
00:25:38.860 --> 00:25:42.910
my life right there. That's
interesting. You also point out

515
00:25:42.910 --> 00:25:46.090
that people love gradients and
they like to do gradients

516
00:25:46.090 --> 00:25:49.330
with images and background images
that are tiled, but maybe

517
00:25:49.330 --> 00:25:52.900
people should be doing that
differently. Yeah, to me, CSUs

518
00:25:52.930 --> 00:25:56.590
three, great aunts are incredibly
powerful. I actually, I used

519
00:25:56.590 --> 00:25:58.060
to, it hasn't been updated
in a while. I used

520
00:25:58.060 --> 00:26:01.780
to run a website, a
tumbler called CSS three geometry

521
00:26:01.780 --> 00:26:04.660
daily. And this was fun.
Cause you get to experiment

522
00:26:04.660 --> 00:26:07.210
all with CSS, gradients and
creating different kinds of pictures.

523
00:26:07.240 --> 00:26:09.100
Even if it's not what
you would normally consider as

524
00:26:09.100 --> 00:26:11.710
gradients, you know, one color
to another color, you can

525
00:26:11.710 --> 00:26:15.100
create all sorts of different
shapes and styles and everything

526
00:26:15.100 --> 00:26:18.700
else. So for me, gradients
are extremely powerful. They are

527
00:26:18.850 --> 00:26:21.760
cut tip a contributor to
just to again, jank. So

528
00:26:21.760 --> 00:26:23.440
be careful with how much,
see it's a three you

529
00:26:23.440 --> 00:26:27.400
use, but absolutely they're a
good replacement for images. So

530
00:26:27.460 --> 00:26:29.470
when you talk about images,
what you're doing is you're

531
00:26:29.470 --> 00:26:32.950
going and fetching a request.
And again, fetching a request

532
00:26:32.950 --> 00:26:34.780
takes a while you to
your browser has to go

533
00:26:34.780 --> 00:26:37.210
and ask a server for
the file. The file will

534
00:26:37.210 --> 00:26:39.250
eventually come back. And then
that file be rendered on

535
00:26:39.250 --> 00:26:42.640
the page. So in skipping,
all of that talking and

536
00:26:42.640 --> 00:26:45.930
all that by serving up
either a data URI, which

537
00:26:45.930 --> 00:26:48.300
is like a text version
of an image, or by

538
00:26:48.300 --> 00:26:51.620
serving as a CSS three
great in or something else

539
00:26:51.630 --> 00:26:55.020
is shape, you're able to
eliminate that request. So substituting

540
00:26:55.020 --> 00:26:57.150
images with these kinds of
things, it's really helpful. Oh,

541
00:26:58.760 --> 00:27:02.210
And is it important for
a performance engineer to understand

542
00:27:02.510 --> 00:27:05.300
once these things show up
into the browser, what's going

543
00:27:05.300 --> 00:27:08.060
to be using the GPU
versus the CPU and making

544
00:27:08.060 --> 00:27:11.000
the smart decisions there as
well. That's getting into some

545
00:27:11.000 --> 00:27:12.890
micro optimizations, which I think
is important. That's like a

546
00:27:12.890 --> 00:27:16.070
four Oh one for performance.
When I talk to designers,

547
00:27:16.130 --> 00:27:18.050
I do. And we'll come
back to jank now, actually.

548
00:27:18.050 --> 00:27:20.450
So when we're talking about
all these things, we're really

549
00:27:20.450 --> 00:27:23.390
talking about repaints and the
browser is really trying very

550
00:27:23.390 --> 00:27:25.910
hard to understand what's happening
on the page at any

551
00:27:25.910 --> 00:27:29.540
given time when we start
to change the color or

552
00:27:29.540 --> 00:27:31.700
the shadow or the height
or the width of an

553
00:27:31.700 --> 00:27:34.280
element on the page, the
browser has to repaint at

554
00:27:34.280 --> 00:27:36.320
least that part of the
page. And maybe more than

555
00:27:36.320 --> 00:27:38.570
just that part of the
page. So by using things

556
00:27:38.570 --> 00:27:42.530
like CSS three, we're actually
saying, Hey, let's affect some

557
00:27:42.530 --> 00:27:44.510
part of the page and
change it up, which is

558
00:27:44.510 --> 00:27:49.580
why we, And how do
you keep track or find

559
00:27:49.610 --> 00:27:53.270
how do you discover or
narrow down when I'm scrolling

560
00:27:53.270 --> 00:27:57.080
that this element or that
CSS gradient or this rule

561
00:27:57.080 --> 00:27:59.570
is causing the screen to,
to repaint? Cause I think

562
00:27:59.570 --> 00:28:02.270
we've all had that experience
where we're scrolling down and

563
00:28:02.390 --> 00:28:07.370
something flashed as the entire
page repainted Two ways, both

564
00:28:07.370 --> 00:28:10.520
are within Chrome dev tools.
So for me, it's really

565
00:28:10.520 --> 00:28:12.440
an actually I'm be interested
in hearing what I use

566
00:28:12.440 --> 00:28:14.660
doing as well in this,
in this area. But in

567
00:28:14.660 --> 00:28:17.420
Chrome you can see their
frames per second. It will

568
00:28:17.420 --> 00:28:19.310
actually have like a little
window that hovers for you.

569
00:28:19.640 --> 00:28:22.220
What you're looking for is
to be always above 60

570
00:28:22.220 --> 00:28:24.260
frames per second. It's kind
of as, as much as

571
00:28:24.260 --> 00:28:26.870
the eye can see without
stuttering, if you're scrolling and

572
00:28:26.870 --> 00:28:28.850
you see that dip down,
maybe to 30 frames per

573
00:28:28.850 --> 00:28:30.560
second, you know, you've hit
an area of the page.

574
00:28:30.560 --> 00:28:33.440
That's problematic. You can pop
open Chrome dev tools and

575
00:28:33.440 --> 00:28:35.810
it will show you how
long it's taking things to

576
00:28:35.810 --> 00:28:38.180
be repainted. And it'll actually
also help you show like

577
00:28:38.420 --> 00:28:41.060
per frame what's happening. And
this, we can start to

578
00:28:41.060 --> 00:28:46.790
find which parts of Europe.
Yeah, I E I think

579
00:28:46.820 --> 00:28:51.830
11 added a thing called
UI responsiveness where they show

580
00:28:51.830 --> 00:28:55.700
loading scripting, GC styling, rendering,
and then they actually keep

581
00:28:55.700 --> 00:28:59.510
frames per second, throughout as
a big, long timeline. And

582
00:28:59.510 --> 00:29:01.730
then you can see where
it dropped down. So like

583
00:29:01.730 --> 00:29:03.950
right now I'm doing this
on your website right now.

584
00:29:05.120 --> 00:29:08.720
I just dropped from 60
frames a second to 39.

585
00:29:08.720 --> 00:29:11.540
I can click on that
moment in time. And it

586
00:29:11.540 --> 00:29:13.490
looks like the reason that
it dropped down as it

587
00:29:13.490 --> 00:29:16.670
requested the speaker deck slide
player, that would explain it.

588
00:29:16.670 --> 00:29:18.770
And that was the moment
when that, that frames per

589
00:29:18.770 --> 00:29:21.770
second kind of dropped down
so interesting. Okay. So frames

590
00:29:21.770 --> 00:29:24.020
per second is an, is
an important thing to remember.

591
00:29:24.020 --> 00:29:27.920
And then while I'm scrolling
around watching what's happening on

592
00:29:27.920 --> 00:29:31.520
my timeline, as it relates
to my moment in time

593
00:29:31.520 --> 00:29:34.820
where I'm doing my frame
per second. Yeah. Okay. Very

594
00:29:34.820 --> 00:29:38.240
cool. What would it be?
People need to be thinking

595
00:29:38.240 --> 00:29:40.160
about when it comes to
fonts? Because I know that

596
00:29:40.160 --> 00:29:41.830
I like to just throw
a bunch of fonts in

597
00:29:41.830 --> 00:29:43.540
the head and I forget
about it. I don't really

598
00:29:43.540 --> 00:29:47.010
think about fonts. You know,
it's funny fonts to me

599
00:29:47.010 --> 00:29:50.040
are like the bane of
my existence. I get it.

600
00:29:50.070 --> 00:29:53.010
They're pretty, they really do
add to a site, but

601
00:29:53.040 --> 00:29:56.730
personally I cannot see a
loading more than one font

602
00:29:56.730 --> 00:29:59.340
weight. Again, I'm not a
designer by trade. So this

603
00:29:59.340 --> 00:30:01.650
is probably not my argument
to make, but I firmly

604
00:30:01.650 --> 00:30:04.500
believe that on mobile devices
avoid web fonts as much

605
00:30:04.500 --> 00:30:07.530
as possible. The reason why
this is, is you're again

606
00:30:07.560 --> 00:30:10.650
requesting. So you're requesting these
fonts from the server and

607
00:30:10.650 --> 00:30:11.940
it takes a long time
to get them back and

608
00:30:11.940 --> 00:30:15.210
forth. They can range in
sizes. I can't remember. I

609
00:30:15.210 --> 00:30:18.030
think it's the top one
on Google can be more

610
00:30:18.030 --> 00:30:21.210
than 200 K just based
on which kind of language

611
00:30:21.210 --> 00:30:22.860
support you have for it.
There's a couple of ways

612
00:30:22.860 --> 00:30:25.440
to avoid this. One is
to not use web fonts,

613
00:30:25.440 --> 00:30:27.300
which is my number one
role. But again, not as

614
00:30:27.300 --> 00:30:29.940
designer, Meaning use the ones
that come in box with

615
00:30:29.940 --> 00:30:33.240
the product. Yes, Absolutely. But
again, I understand that that's

616
00:30:33.240 --> 00:30:35.760
not always feasible. So the
second thing you can start

617
00:30:35.760 --> 00:30:39.030
to do is figure out
how to character subset, your

618
00:30:39.030 --> 00:30:41.580
fonts, and this means picking
and choosing which characters you

619
00:30:41.580 --> 00:30:44.730
should be using within a
given font. So let's say

620
00:30:44.970 --> 00:30:48.750
your site only uses Latin
characters, the standard alphabet punctuation,

621
00:30:48.750 --> 00:30:50.880
et cetera, go ahead and
sub set your font just

622
00:30:50.880 --> 00:30:53.460
to make sure that you're
only loading the characters that

623
00:30:53.460 --> 00:30:56.310
you need, or let's say
you're using a font just

624
00:30:56.310 --> 00:30:59.220
to load the title of
your site. So Laura swanson.com

625
00:30:59.220 --> 00:31:02.880
is in a special font.
I can subset a character,

626
00:31:02.940 --> 00:31:05.550
a character base and say
only use L a R

627
00:31:05.610 --> 00:31:08.730
S w et cetera, and
say only include these characters

628
00:31:08.730 --> 00:31:11.850
in my font file. Really?
Yeah. There's a couple different

629
00:31:11.850 --> 00:31:14.550
ways to do this. If
you're using Google fonts there,

630
00:31:14.580 --> 00:31:17.580
they make it super easy.
You can basically follow their

631
00:31:17.580 --> 00:31:19.770
instructions and they'll walk you
through how to load either

632
00:31:19.770 --> 00:31:22.740
a specific subset, like a
language support or a specific

633
00:31:22.740 --> 00:31:25.170
individual characters. But if you
have your own font that

634
00:31:25.170 --> 00:31:27.540
you're loading, go to font,
squirrel.com and they have a

635
00:31:27.540 --> 00:31:29.790
web font generator that will
allow you to just pick

636
00:31:29.790 --> 00:31:33.150
and choose individual characters or
entire subsets. So my first

637
00:31:33.150 --> 00:31:35.970
reaction to that was like,
gosh, there's only 26 characters.

638
00:31:35.970 --> 00:31:38.010
Why do I really need
to think about just these

639
00:31:38.010 --> 00:31:42.390
eight? But with Unicode, there
could be hundreds, thousands of

640
00:31:42.390 --> 00:31:45.840
characters, depending on how broad
that font is intending to

641
00:31:45.840 --> 00:31:48.990
be. Yeah. All the accents.
Absolutely. So while it might

642
00:31:48.990 --> 00:31:51.390
seem like that's a micro
optimization, it really isn't. Especially

643
00:31:51.390 --> 00:31:53.430
if the only thing you
need is to say Etsy.

644
00:31:53.910 --> 00:31:56.550
Yeah, precisely I don't need
this Cyrillic code base, for

645
00:31:56.550 --> 00:31:59.520
example, you know, really think
through how much support you

646
00:31:59.520 --> 00:32:02.280
need for your weapon. Very
cool. Well, so people can

647
00:32:02.280 --> 00:32:07.320
go up to Loris watson.com/design
to see your fantastic presentation

648
00:32:07.320 --> 00:32:10.950
that you've given it fluent
and other, other conferences as

649
00:32:10.950 --> 00:32:13.770
well. And I assume they
can also find videos of

650
00:32:13.770 --> 00:32:15.390
you presenting all over the
place. And you've got a

651
00:32:15.390 --> 00:32:18.630
great series of resources, studies,
tools, and techniques, but most

652
00:32:18.630 --> 00:32:21.990
importantly, you've got a book
now, don't you? I do.

653
00:32:21.990 --> 00:32:24.570
Yeah. So the first three
chapters are available for early

654
00:32:24.570 --> 00:32:27.570
release on a riley.com. The
book title is designing for

655
00:32:27.570 --> 00:32:31.230
performance, and actually this week
they're running a special promotion

656
00:32:31.230 --> 00:32:33.570
on all early release books.
You can find a coupon

657
00:32:33.570 --> 00:32:35.100
code for 50% off if
you go to the Y.

658
00:32:35.640 --> 00:32:37.800
Okay, cool. We'll make sure
to put in a link

659
00:32:37.800 --> 00:32:39.920
to the show notes too,
people can go and take

660
00:32:39.920 --> 00:32:42.680
a look at designing for
performance, get that coupon and

661
00:32:42.680 --> 00:32:44.780
get the early release right
now. Thanks so much for

662
00:32:44.780 --> 00:32:47.540
chatting with me today. Thank
you so much. This has

663
00:32:47.540 --> 00:32:50.120
been another episode of Hanselminutes
and we'll see you again

664
00:32:50.120 --> 00:32:50.570
next week.

