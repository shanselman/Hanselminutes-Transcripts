WEBVTT FILE

1
00:00:00.030 --> 00:00:03.210
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.210 --> 00:00:06.180
they make the show possible.
Today's show is sponsored by

3
00:00:06.180 --> 00:00:10.350
developer express, become a UI
superhero with dev express controls

4
00:00:10.350 --> 00:00:14.880
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.270 --> 00:00:19.350
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.350 --> 00:00:23.460
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.550 --> 00:00:47.240
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
<inaudible> From Hansel minutes.com it's

8
00:00:47.240 --> 00:00:51.440
Hansel minutes, a weekly discussion
with web developer and technologist

9
00:00:51.500 --> 00:00:56.000
Scott Hanselman. This is Lawrence Ryan
announcing show number four 41.

10
00:00:56.780 --> 00:01:00.740
In this episode, Scott talks
with Craig <inaudible> about choosing

11
00:01:00.740 --> 00:01:06.200
a Java JavaScript framework. Hi,
this is Scott Hanselman. This

12
00:01:06.200 --> 00:01:08.300
is another episode of Hansel
minutes, and I'm talking with

13
00:01:08.330 --> 00:01:12.350
Craig McKenzie. How are you,
sir? I'm great. Today. I'm

14
00:01:12.350 --> 00:01:15.650
pretty stoked about this conversation
because you I've written a

15
00:01:15.650 --> 00:01:18.500
book. You've actually self published,
a book called the JavaScript

16
00:01:18.500 --> 00:01:22.040
framework guide that basically breaks
it all down. Like there's

17
00:01:22.040 --> 00:01:24.560
more than just angular, there's
angular and backbone and Ember

18
00:01:24.560 --> 00:01:26.960
and knockout and all these
different things to choose from.

19
00:01:27.560 --> 00:01:29.990
There's lots of information on
how to use angular and

20
00:01:29.990 --> 00:01:32.810
there's lots of information on
why embers the best, but

21
00:01:32.900 --> 00:01:35.270
not a lot of people
telling me how to choose

22
00:01:36.020 --> 00:01:38.990
which one. Yeah. I tried
to have that different insight.

23
00:01:38.990 --> 00:01:40.760
I mean, I wanted to
say to big fan of

24
00:01:40.760 --> 00:01:43.010
the show, so glad to
be on Scott on the

25
00:01:43.010 --> 00:01:46.490
show, but yeah, not a
lot of information on how

26
00:01:46.490 --> 00:01:51.170
to choose. And I think,
I think people still are

27
00:01:51.170 --> 00:01:53.720
a little confused about things
where things start and where

28
00:01:53.720 --> 00:01:55.970
the things pick up. So
there's a lot of choice.

29
00:01:55.970 --> 00:01:59.270
There's more choice, like with
rails, it's like here's rails

30
00:01:59.270 --> 00:02:01.490
and you can pick some
things, but you have to

31
00:02:01.490 --> 00:02:05.750
be pretty sophisticated before you
start really swapping out huge

32
00:02:05.780 --> 00:02:09.770
chunks of rails and with
asp.net MVC, you know, 80,

33
00:02:09.770 --> 00:02:12.440
90% of people use what
it comes with, but on

34
00:02:12.440 --> 00:02:17.180
the JavaScript side, there's a
lot of choice. Yes, yes.

35
00:02:17.180 --> 00:02:19.700
Almost an overwhelming amount of
choice. And I kinda, you

36
00:02:19.700 --> 00:02:22.060
know, I've been a developer
for 15 years and I

37
00:02:22.070 --> 00:02:25.190
saw that, that pain of
just, how do I keep

38
00:02:25.190 --> 00:02:27.050
up with all this stuff
and which of it, you

39
00:02:27.050 --> 00:02:29.630
know, which of this stuff
matters like, and can I

40
00:02:29.630 --> 00:02:32.120
just use some jQuery, like,
like why isn't my old

41
00:02:32.120 --> 00:02:35.810
way of doing applications, you
know? Okay. Somebody explain all

42
00:02:35.810 --> 00:02:38.000
this to me and that's
where the books come from.

43
00:02:38.220 --> 00:02:41.090
And why do I need
model view controller on the

44
00:02:41.090 --> 00:02:44.990
server versus the client or
both? You know what I

45
00:02:44.990 --> 00:02:47.170
mean? Like this, this idea
that I've just, I know,

46
00:02:47.170 --> 00:02:48.830
again, I'm talking kind of
in the mind of the

47
00:02:48.830 --> 00:02:52.940
listener, hopefully I just learned
MVC on the server and

48
00:02:52.940 --> 00:02:55.220
now I have another controller
and another whole series of

49
00:02:55.220 --> 00:02:57.110
views on the client and
I need to have those

50
00:02:57.620 --> 00:03:00.220
working in and people are
like, well, does this kill

51
00:03:00.220 --> 00:03:02.860
MVC on the server? And
then everything moves to the

52
00:03:04.140 --> 00:03:07.260
Right. And I think that's,
that's an important sort of,

53
00:03:07.320 --> 00:03:09.090
you know, I, I think
the best way to explain

54
00:03:09.090 --> 00:03:12.660
it is from an architectural
perspective, like you, you are

55
00:03:12.660 --> 00:03:16.230
probably at this point making
a commitment to, I wouldn't

56
00:03:16.230 --> 00:03:18.480
say killing everything on the
server, but there's, there's a

57
00:03:18.480 --> 00:03:20.880
shift in architecture between what
I would like to call

58
00:03:20.880 --> 00:03:25.410
like a, a classic, you
know, server side MVC framework,

59
00:03:25.440 --> 00:03:30.360
like asp.net MVC, right? And
a client side, MPC framework

60
00:03:30.360 --> 00:03:35.130
like backbone, Ember, or angular.
The easiest way to think

61
00:03:35.130 --> 00:03:39.330
about the difference to me
is, you know, you, where

62
00:03:39.330 --> 00:03:42.960
is the data and the
template or the HTML mixed

63
00:03:42.960 --> 00:03:46.800
together. So in the case
of, you know, asp.net MVC,

64
00:03:47.580 --> 00:03:50.280
you got your razor view,
you got some, you got

65
00:03:50.280 --> 00:03:52.740
a view model or a
model of some sort in

66
00:03:52.740 --> 00:03:56.670
your using the razor, a
template engine to kind of

67
00:03:56.670 --> 00:04:00.540
bring that together on the
server. Whereas with these frameworks,

68
00:04:00.540 --> 00:04:03.600
what you're doing is you're
sending that data down to

69
00:04:03.600 --> 00:04:09.930
the client as Jason and
you're sending static templates that

70
00:04:09.930 --> 00:04:12.120
look a lot like a
razor view. So in other

71
00:04:12.120 --> 00:04:15.870
words, H chunks of HTML
with interspersed dynamic parts to

72
00:04:15.870 --> 00:04:18.240
them, and you're sending those
templates down to the client.

73
00:04:18.420 --> 00:04:21.480
And then in JavaScript on
the client side, they're being

74
00:04:21.600 --> 00:04:26.040
assembled, brought together in the
browser. So the browser is,

75
00:04:26.280 --> 00:04:29.130
is the main meat of
the application of the JavaScript

76
00:04:29.130 --> 00:04:32.580
code running in the browser
is what's bringing that those

77
00:04:32.580 --> 00:04:36.060
templates and that data together
on the client. And so

78
00:04:36.060 --> 00:04:40.950
you really are, you're not
throwing away what you do

79
00:04:40.950 --> 00:04:43.170
on the server because you
still need to serve those

80
00:04:43.170 --> 00:04:47.340
static HTML resources. You still
need to serve JavaScript files.

81
00:04:47.340 --> 00:04:50.130
You still need to do
your CSS and so forth.

82
00:04:50.460 --> 00:04:54.240
You're you still need an
API, like a web API

83
00:04:54.240 --> 00:04:59.250
back there, but, but you
are kind of, you know,

84
00:04:59.250 --> 00:05:02.040
the people get confused are
the people who kind of

85
00:05:02.100 --> 00:05:04.890
see their application stuck in
the middle, where they, they

86
00:05:04.890 --> 00:05:09.750
do a classic asp.net MVC
application. They, they they're close

87
00:05:09.750 --> 00:05:11.910
to the metal. They like
it. They render it, but

88
00:05:11.910 --> 00:05:15.300
then they start doing more
and more, you know, Ajax

89
00:05:15.420 --> 00:05:18.990
and calls and more in
the jQuery code in their

90
00:05:18.990 --> 00:05:20.880
client becomes bigger and bigger
as they try to do

91
00:05:20.880 --> 00:05:24.600
more elaborate things on the
client. And at some point

92
00:05:26.370 --> 00:05:27.930
that gets to be a
little bit of a mess.

93
00:05:27.930 --> 00:05:30.540
I mean, we can talk
about that more, but, but,

94
00:05:30.660 --> 00:05:33.180
but that's sort of the
idea there. So you, like,

95
00:05:33.180 --> 00:05:34.980
if you start, we can,
we're using ads, but enough

96
00:05:34.980 --> 00:05:38.280
as an example, but this
applies to PHP and rails

97
00:05:38.280 --> 00:05:41.520
and kind of any, any,
any situation where, as you

98
00:05:41.520 --> 00:05:44.940
said on the server side,
the HTML meets the data

99
00:05:45.240 --> 00:05:47.400
or the template rather meets
the data. And HTML is

100
00:05:47.400 --> 00:05:50.190
produced in a, in an
MVC or in a classic

101
00:05:50.190 --> 00:05:52.560
kind of style on the
server. And that comes across

102
00:05:52.740 --> 00:05:57.090
when we start adding progressively
enhanced bits of JavaScript, whether

103
00:05:57.170 --> 00:06:00.110
be J query or plain
JavaScript, or as you said,

104
00:06:00.710 --> 00:06:04.820
Ajax type things, you start
blurring the lines about who's

105
00:06:04.820 --> 00:06:08.890
really responsible for what. Right.
Right. And I think, you

106
00:06:08.890 --> 00:06:12.010
know, like I have this
sort of list of telltale

107
00:06:12.010 --> 00:06:13.990
signs. I go over in
the book as to where

108
00:06:13.990 --> 00:06:16.480
the line, when you, like,
what are the signs that

109
00:06:16.480 --> 00:06:18.790
your application is getting to
this point, right? Like your

110
00:06:18.790 --> 00:06:22.150
way where the lines are
getting blurred. And, you know,

111
00:06:22.150 --> 00:06:24.610
one, one I like to
think about is, is the

112
00:06:24.730 --> 00:06:28.460
templates are being duplicated on
the server and the clients.

113
00:06:28.460 --> 00:06:31.600
So if you think about
that, progressive and progressively enhanced

114
00:06:31.600 --> 00:06:34.480
web application, you described that
most people are doing right

115
00:06:34.480 --> 00:06:37.000
now, you've got a razor
view on the server and

116
00:06:37.000 --> 00:06:39.190
you may have the same
copy of that raise review

117
00:06:39.190 --> 00:06:41.530
in handlebars or one of
the template and engines in

118
00:06:41.530 --> 00:06:44.500
JavaScript. And you might have
that same template. And so

119
00:06:44.500 --> 00:06:47.140
that's very and dry, you
know, as we're used to

120
00:06:47.140 --> 00:06:49.750
it, you're really repeating yourself
quite a bit there, same

121
00:06:49.750 --> 00:06:52.990
thing with the models, right?
You've got this view model

122
00:06:52.990 --> 00:06:56.890
or, or domain model on
your server that you're binding

123
00:06:56.890 --> 00:07:00.370
into your view up there.
And, but then you also

124
00:07:00.370 --> 00:07:02.860
have sort of that same
state, you know, in the

125
00:07:02.860 --> 00:07:08.590
client in jQuery. And you
know, the other big sign

126
00:07:08.590 --> 00:07:11.380
you see is like, I
mean, I, I've done this

127
00:07:11.380 --> 00:07:14.080
a million times where you
have like, you're storing database

128
00:07:14.080 --> 00:07:18.040
IDs in Dom elements and
then, you know, going and

129
00:07:18.670 --> 00:07:21.370
calling find, or first on
'em to get the ID

130
00:07:21.370 --> 00:07:24.910
back out. So you can
go re and rehydrate the

131
00:07:24.910 --> 00:07:28.060
state of that object because
you didn't, you know, you

132
00:07:28.060 --> 00:07:30.760
don't have all the state,
you know, you, haven't committed

133
00:07:30.760 --> 00:07:33.460
to having your application and
JavaScript on the client if

134
00:07:33.460 --> 00:07:37.660
you will, But some duplication
is inevitably going to happen.

135
00:07:37.660 --> 00:07:40.030
Right. How do you know
what's a good amount of

136
00:07:40.210 --> 00:07:42.490
duplication? Cause the thing is,
there's a model. And then

137
00:07:42.550 --> 00:07:45.070
there's very likely a model
of some kind of database,

138
00:07:45.100 --> 00:07:46.870
or at least if you're
using an ER type of

139
00:07:46.870 --> 00:07:50.530
a situation, a SQL situation,
then there's the model in

140
00:07:50.530 --> 00:07:53.320
memory, as it moves through
the web server per month,

141
00:07:53.920 --> 00:07:57.160
maybe. And then there's a
model and Java script is,

142
00:07:57.550 --> 00:07:59.890
you know, you're moving data
from one shape to the

143
00:07:59.890 --> 00:08:03.040
other is the goal to
avoid that entirely and just

144
00:08:03.040 --> 00:08:05.920
stay in Jason the entire
time, just take it right

145
00:08:05.920 --> 00:08:09.010
out of adjacent store, send
it right across the wire,

146
00:08:09.010 --> 00:08:11.290
maybe a minor transformation. And
then Jason, all the way

147
00:08:11.290 --> 00:08:13.900
to the end. You know,
I don't know that that's

148
00:08:13.900 --> 00:08:15.970
the necessarily the goal. I
think there will be some

149
00:08:15.970 --> 00:08:18.970
layers in between, especially as
the application becomes more elaborate

150
00:08:19.240 --> 00:08:21.820
as you hit it at,
you know, you need some

151
00:08:21.820 --> 00:08:25.510
layers of abstraction in there.
You're not just gonna expose

152
00:08:25.510 --> 00:08:28.390
your database to the, to
the web via Jason or

153
00:08:28.390 --> 00:08:29.890
whatever. So I think, you
know, you bring up a

154
00:08:29.890 --> 00:08:32.830
good point. I think the
problems come in when you're

155
00:08:32.830 --> 00:08:34.930
sort of half committed on
both sides, you know, you

156
00:08:34.930 --> 00:08:36.970
don't have this clear architecture,
you know, it's okay. If

157
00:08:36.970 --> 00:08:39.010
you put some layers in
knowing that you're going to

158
00:08:39.010 --> 00:08:41.890
need those layers, but if
you're sort of building your

159
00:08:41.890 --> 00:08:45.130
app half on the client
side and JavaScript and half

160
00:08:45.130 --> 00:08:48.940
on the server, that's where,
where, you know, the real

161
00:08:48.940 --> 00:08:50.890
problem comes in and no,
no, it's not a perfect

162
00:08:50.890 --> 00:08:54.640
world. Scott, of course, right?
Like these things w w

163
00:08:54.640 --> 00:08:58.070
we'll definitely duplications some places.
And I think, you know,

164
00:08:58.070 --> 00:09:00.470
the one thing that's always
It's puzzling to me that

165
00:09:00.470 --> 00:09:02.450
I still haven't come to
grips with is, you know,

166
00:09:02.450 --> 00:09:05.240
this idea of is the
model that you bring down

167
00:09:05.240 --> 00:09:08.030
to the client, you know,
via Jason in this, from

168
00:09:08.030 --> 00:09:11.030
this web API, is this
a view model, or is

169
00:09:11.030 --> 00:09:14.810
this a real model model,
you know, domain model. And

170
00:09:14.810 --> 00:09:17.990
so that's, that's something that
I've heard even framework authors

171
00:09:18.020 --> 00:09:20.720
differ on. Can you, well,
why do they differ on

172
00:09:20.720 --> 00:09:23.840
that? Why and why are
there two kinds of models?

173
00:09:23.840 --> 00:09:26.300
Why does the model and
the database so different often

174
00:09:26.300 --> 00:09:29.960
from the model and the
view? I think it's different.

175
00:09:30.050 --> 00:09:32.180
I mean, at least with
me Scott, and I think

176
00:09:32.180 --> 00:09:34.760
a lot of your listeners
will have experienced this when

177
00:09:34.760 --> 00:09:39.350
I was, you know, building
asp.net, MVC applications, adding that

178
00:09:39.350 --> 00:09:43.460
extra layer of a view
model became really useful, particularly

179
00:09:43.460 --> 00:09:46.580
in situations where you're like
validating, let's say you've got

180
00:09:46.580 --> 00:09:48.770
a data input and you
want to input a date

181
00:09:49.070 --> 00:09:52.040
and you might have that
date be knowledgeable because it's

182
00:09:52.280 --> 00:09:55.580
not a required field on
the UI, or you might

183
00:09:55.580 --> 00:09:57.360
even have it be a
required field and have it

184
00:09:57.360 --> 00:09:59.720
available on the, on the
view model. But in your

185
00:09:59.720 --> 00:10:03.260
actual model of your database,
you want it, you want

186
00:10:03.260 --> 00:10:06.050
that field to be required,
you know, to, to not

187
00:10:06.050 --> 00:10:09.560
be knowledgeable. And this leaves
you sort of a layer

188
00:10:09.560 --> 00:10:12.770
to do sort of UI
type validation things and to

189
00:10:12.770 --> 00:10:17.720
shape, Shape the Model based
on the UI. Another common

190
00:10:17.720 --> 00:10:19.730
example of, you know, that
difference of the view model

191
00:10:19.730 --> 00:10:23.570
or presentation model versus the
domain model is the whole,

192
00:10:24.080 --> 00:10:26.120
you know, you need a
count of how many items

193
00:10:26.120 --> 00:10:27.920
are currently shown on the
screen. You know, it's a

194
00:10:27.920 --> 00:10:33.320
very view centric type thing.
So I think I'm not

195
00:10:33.320 --> 00:10:36.590
sure if I answered the
entire question there, but, but

196
00:10:36.590 --> 00:10:38.210
that's how I, that's why
I think, you know, view

197
00:10:38.210 --> 00:10:43.010
models are useful in terms
of, you know, JavaScript and

198
00:10:43.010 --> 00:10:48.680
JavaScript MBC. I see people
differing because sometimes some people

199
00:10:48.680 --> 00:10:51.410
see the value in that
view model. And I think

200
00:10:51.410 --> 00:10:55.550
some have not quite realized,
you know, that it's needed

201
00:10:55.550 --> 00:10:58.010
some of the frameworks, maybe
don't haven't realized, or they're

202
00:10:58.010 --> 00:11:04.610
not the terms get mixed,
right. People reuse terms to

203
00:11:04.610 --> 00:11:07.130
mean different things. I don't
know how to describe that

204
00:11:07.130 --> 00:11:10.790
better, but a good example
is Amber, a lot of

205
00:11:10.790 --> 00:11:15.800
people, if you really study
Ember as a framework, the

206
00:11:15.800 --> 00:11:19.190
ironic thing is the controller.
Although it does control her,

207
00:11:19.190 --> 00:11:21.260
like things, they have a
thing called a route in

208
00:11:21.260 --> 00:11:23.930
there as well. That's not
a router, but, but long

209
00:11:23.930 --> 00:11:29.000
story short, the controller really
Is sort of like a

210
00:11:29.120 --> 00:11:33.350
M View model in some
ways where it has, it's

211
00:11:33.350 --> 00:11:35.540
a very view model. It
has all the view model

212
00:11:35.540 --> 00:11:39.860
properties on it, as well
as some behavior. So it's,

213
00:11:40.460 --> 00:11:43.100
it's not, it's not apples
to apples with your server

214
00:11:43.100 --> 00:11:46.070
side MBC framework, you know,
and it gets confusing where

215
00:11:46.220 --> 00:11:48.680
where's the right place to
put things. It seems like

216
00:11:48.680 --> 00:11:54.910
people take a angular Amber
and then backbone and they

217
00:11:54.910 --> 00:11:57.010
refer them all kind of
at the same time. And

218
00:11:57.010 --> 00:11:59.620
you see lots and lots
of articles where it's this

219
00:11:59.620 --> 00:12:02.950
versus this versus this it's
angular versus backbone versus Ember.

220
00:12:03.430 --> 00:12:05.620
And one of the things
that comes up a lot

221
00:12:05.650 --> 00:12:10.540
is this notion of being
opinionated, some frameworks. I think

222
00:12:10.570 --> 00:12:14.050
Amber is probably a good
example that says we are

223
00:12:14.050 --> 00:12:19.540
unapologetically opinionated, right? Like here's
the way you write applications

224
00:12:20.140 --> 00:12:22.840
and then others. And I
would probably use backbone as

225
00:12:23.010 --> 00:12:25.150
an example of one that's
a little bit like, Hey,

226
00:12:25.150 --> 00:12:29.170
you know, here's some things
enjoy, you know what I

227
00:12:29.170 --> 00:12:32.040
mean? And I think, you
know, to say that there

228
00:12:32.610 --> 00:12:35.160
it's a little bit unopinionated
is an understatement, right? Like

229
00:12:35.160 --> 00:12:38.820
backbone has almost like, it
can be almost frustrating at

230
00:12:38.820 --> 00:12:42.510
times how little opinion it
has, but sometimes people, you

231
00:12:42.510 --> 00:12:46.200
know, I think some developers
just love this, right? The,

232
00:12:46.200 --> 00:12:48.840
the, the guy that likes
to invent things, the developer

233
00:12:48.840 --> 00:12:51.300
that likes to invent things,
this leaves them a lot,

234
00:12:51.300 --> 00:12:54.900
a lot of freedom, you
know? So, so yeah. And

235
00:12:54.930 --> 00:12:58.620
that's definitely true in terms
of opinionated and, and convention

236
00:12:58.620 --> 00:13:03.600
and stuff, embers, the most
convention over configuration opinionated framework,

237
00:13:04.200 --> 00:13:07.470
very much out of the
rails community and so forth.

238
00:13:08.430 --> 00:13:11.220
Do you, That's because of
the people who wrote these

239
00:13:11.220 --> 00:13:14.520
things, like, should I read
into the men and women

240
00:13:14.520 --> 00:13:17.790
who've worked on these projects
and say, Oh, I like

241
00:13:18.000 --> 00:13:21.030
this programmer because they're really
opinionated. Therefore I will like

242
00:13:21.030 --> 00:13:24.360
their framework, you know, should
I, should I be making

243
00:13:24.360 --> 00:13:26.880
my decisions on my framework
based on where I wear

244
00:13:26.880 --> 00:13:29.850
myself? Like how much guidance
I want on my own

245
00:13:29.850 --> 00:13:35.310
personal slider bar from two
super opinionated. Right. I think

246
00:13:35.320 --> 00:13:40.230
that that's, it's Definitely something,
a it's an input in

247
00:13:40.230 --> 00:13:44.370
the formula, right? Like it's,
it's, it's, there's so many

248
00:13:44.370 --> 00:13:47.250
facets to choosing one, but
that is one that I

249
00:13:47.250 --> 00:13:49.470
do bring up, you know,
in the book. It's one

250
00:13:49.470 --> 00:13:51.600
that I've written about online.
And I think a very

251
00:13:51.600 --> 00:13:54.600
valid one, like people should
realize, you know, who wrote

252
00:13:54.600 --> 00:13:57.390
these things? Who are these
people, what background do they

253
00:13:57.390 --> 00:14:00.360
come from? Do they agree
with their opinions? You know,

254
00:14:00.360 --> 00:14:03.090
what were the, what other
frameworks were they inspired by

255
00:14:03.120 --> 00:14:06.750
and so forth? You know,
I, I like to, you

256
00:14:06.750 --> 00:14:08.820
know, one thing I like
to talk about is, you

257
00:14:08.820 --> 00:14:11.370
know, whenever you hear like
a great music musician who

258
00:14:11.370 --> 00:14:13.950
just like, maybe not a
great musician, but a musician

259
00:14:13.950 --> 00:14:16.080
who just, you know, put
out an album or something

260
00:14:16.080 --> 00:14:19.080
like that, they get interviewed
by journalists. And the journalists

261
00:14:19.170 --> 00:14:23.100
often says, you know, who
were your influences when you

262
00:14:23.100 --> 00:14:25.770
were growing up? You know,
that sort of thing. And

263
00:14:26.610 --> 00:14:30.840
I think that there is,
there's a similar thing to

264
00:14:30.840 --> 00:14:36.510
be learned online about JavaScript,
MBC frameworks. So for example,

265
00:14:36.510 --> 00:14:40.530
if you look at angular
JS WPF and silver light

266
00:14:40.620 --> 00:14:45.360
and flex are named as
major influencers of those. So

267
00:14:45.360 --> 00:14:47.850
if you're in that camp
where you're sort of afraid

268
00:14:47.850 --> 00:14:51.740
of the future of some
of those technologies or, or,

269
00:14:51.740 --> 00:14:55.160
you know, you want some
needs more web centric, you

270
00:14:55.160 --> 00:14:58.790
know, technology stack, for whatever
reasons in your, in your

271
00:14:58.790 --> 00:15:02.510
corporation, you can feel pretty
good that, that the very

272
00:15:02.510 --> 00:15:06.530
declarative nature of WPF and
Silverlight type apps is what

273
00:15:06.530 --> 00:15:10.480
you're going to get. If
you choose angular. I really

274
00:15:10.490 --> 00:15:12.490
like Just backing up just
a little bit. I really

275
00:15:12.490 --> 00:15:16.360
liked the idea of looking
at the people's influences. I

276
00:15:16.360 --> 00:15:18.790
like that analogy. I mean,
you, you might listen to

277
00:15:18.790 --> 00:15:20.770
a musician and go, yeah.
You know, I can hear

278
00:15:20.770 --> 00:15:24.640
that Jimmy Hendrix influenced there,
you know, rarely do I

279
00:15:24.640 --> 00:15:27.100
hear that kind of stuff
amongst web developers. I don't

280
00:15:27.100 --> 00:15:28.810
know if it's a lack
of a sense of history.

281
00:15:29.140 --> 00:15:33.520
I think that amongst language
walks amongst F sharp people

282
00:15:33.520 --> 00:15:35.440
who might say, Oh yeah,
well, you can definitely see

283
00:15:35.440 --> 00:15:38.320
the, you know, the Oh,
camel, you know, influence in

284
00:15:38.320 --> 00:15:41.740
that particular language feature. I
maybe I'm not listening to

285
00:15:41.740 --> 00:15:45.580
the right people. I hopefully
I'm not speaking incorrectly here,

286
00:15:45.580 --> 00:15:48.040
but I don't hear that
a lot. And I like

287
00:15:48.050 --> 00:15:51.070
that idea that that is
another input. As you say,

288
00:15:51.070 --> 00:15:53.890
into the formula that like,
you know, what were they

289
00:15:53.890 --> 00:15:56.500
influenced by? What, what kind
of an application were they

290
00:15:56.500 --> 00:16:00.400
building? That's another great question.
When, when so-and-so built Ember,

291
00:16:00.880 --> 00:16:03.250
they built it for a
reason. Like when, when DHH

292
00:16:03.250 --> 00:16:05.980
built rails, he was building
it as a generalized thing,

293
00:16:05.980 --> 00:16:08.650
but he was also building
base camp. Right, right. So

294
00:16:08.650 --> 00:16:12.030
he had a reason to
build this. Yeah. I think

295
00:16:12.040 --> 00:16:14.560
that, I think that's, that's
a good to understand, you

296
00:16:14.560 --> 00:16:18.370
know, where these people are
coming from. I think when

297
00:16:18.370 --> 00:16:23.020
Jeremy Ashkin has built backbone,
you know, he was largely

298
00:16:23.020 --> 00:16:26.710
in a, in a jQuery
or plain old JavaScript world.

299
00:16:26.710 --> 00:16:29.770
And he was just improving
the world he was in,

300
00:16:29.770 --> 00:16:32.650
which was, you know, I've
got jQuery and I'm really

301
00:16:32.650 --> 00:16:34.630
good at JavaScript, but I'm
still writing a lot of

302
00:16:34.630 --> 00:16:37.720
repeated code over and over
again. And I like these,

303
00:16:37.780 --> 00:16:41.170
I'm embracing these micro frameworks.
I like the fact that,

304
00:16:41.590 --> 00:16:43.930
you know, I want a
really light framework and I

305
00:16:43.930 --> 00:16:46.390
want a really unopinionated framework
because I know what I'm

306
00:16:46.390 --> 00:16:48.880
doing here. You know, so
that's another example. And then

307
00:16:49.210 --> 00:16:52.120
the rails one is what
you said with like DHH

308
00:16:52.120 --> 00:16:55.990
and, you know, convention over
configuration, you know, asp.net, MVC

309
00:16:55.990 --> 00:16:58.930
is, you know, based on
these same ideals or whatever.

310
00:16:58.930 --> 00:17:02.110
And I think, you know,
that's what you're going to

311
00:17:02.110 --> 00:17:05.290
get with Amber. I mean,
it looks scarily like, you

312
00:17:05.290 --> 00:17:07.300
know, the rails API APIs,
right. When you look at

313
00:17:07.300 --> 00:17:10.960
it and, and it's so
Yehuda Katz and Tom Dale

314
00:17:10.960 --> 00:17:14.230
are the major, you know,
public figures on the Ember

315
00:17:14.230 --> 00:17:17.710
project. And they came from,
you know, you who to

316
00:17:17.710 --> 00:17:20.470
Katz was, is on the
core team or was on

317
00:17:20.470 --> 00:17:22.210
the core team of rails.
He was also on the

318
00:17:22.210 --> 00:17:27.120
core team of jQuery or
is not sure, but you

319
00:17:27.130 --> 00:17:30.220
can see their influences, you
know, they're so just, just

320
00:17:30.220 --> 00:17:31.930
looking at that and saying,
Hey, which one of these

321
00:17:31.930 --> 00:17:35.500
guys, you know, which these
past technologies do I associate

322
00:17:35.500 --> 00:17:39.130
with not to beat this
to death. But another interesting

323
00:17:39.130 --> 00:17:40.810
thing that a lot of
people don't realize is angular

324
00:17:40.810 --> 00:17:44.920
JS came a large influence
from the Java community in

325
00:17:44.920 --> 00:17:48.370
particular, what people love about
it is its testability and

326
00:17:49.350 --> 00:17:53.460
the dependency injection and all
those IOC containers, like in

327
00:17:53.460 --> 00:17:56.220
particular, they have the authors
will mention juice when they

328
00:17:56.220 --> 00:17:59.370
talk about the inspiration for
angular JS, which is a

329
00:17:59.370 --> 00:18:04.230
popular IOC container used at
Google quite a bit in

330
00:18:04.230 --> 00:18:07.560
Java server side applications. So,
you know, they were saying,

331
00:18:07.560 --> 00:18:10.800
Hey, we, we like to
write our applications, you know,

332
00:18:10.800 --> 00:18:13.020
have them be testable. And
the way we achieve this

333
00:18:13.020 --> 00:18:16.950
is through IOC containers, the
dependency injection. So we're going

334
00:18:16.950 --> 00:18:19.680
to build a framework that
makes that really easy to

335
00:18:19.680 --> 00:18:22.590
fall in the pit of
success with that. And I

336
00:18:22.610 --> 00:18:25.520
think it's important to point
out that we're not talking

337
00:18:25.520 --> 00:18:32.300
about overly focusing on individuals
or individual personalities, but rather

338
00:18:32.300 --> 00:18:37.970
in my opinion, on the
values Or valued at the

339
00:18:37.970 --> 00:18:41.630
time that someone wrote this,
You know, what was the

340
00:18:41.630 --> 00:18:43.970
thing that they valued? We're
not trying, I'm not trying

341
00:18:43.970 --> 00:18:46.670
to make a value judgment
saying that like, Oh, rails

342
00:18:46.670 --> 00:18:49.640
is good or, Oh, rails
is bad. Okay. But if

343
00:18:49.640 --> 00:18:53.810
you like their API, If
you value their design style,

344
00:18:53.810 --> 00:18:58.370
if you find there That
is attractive, then This JavaScript

345
00:18:58.370 --> 00:19:01.820
framework might be more interesting
to you. Right. Like I

346
00:19:01.820 --> 00:19:04.640
use it in the analogy
I've used a lot about,

347
00:19:05.240 --> 00:19:08.300
Hey, you like rails, you
like Ruby, maybe check out

348
00:19:08.300 --> 00:19:11.330
coffee script because it's coffee
script is kind of what,

349
00:19:11.630 --> 00:19:15.380
Hey, Ruby person would like
Scholarship to look like, Hey,

350
00:19:15.380 --> 00:19:18.500
like C-sharp maybe look at
TypeScript because it's kind of

351
00:19:18.500 --> 00:19:22.070
what a C sharp person
wishes JavaScript looks like. So

352
00:19:22.070 --> 00:19:25.250
if you, if you really
are enamored with rails or

353
00:19:25.250 --> 00:19:27.950
if you really are enamored
with a, you know, several

354
00:19:27.950 --> 00:19:30.290
lights, style development, maybe look
at this framework or look

355
00:19:30.290 --> 00:19:33.500
at that framework. So thinking
about the individual is one

356
00:19:33.500 --> 00:19:35.630
way to look at it,
but the other way is

357
00:19:35.930 --> 00:19:38.390
what do you value? And
does it align With what

358
00:19:38.390 --> 00:19:41.660
those other framers value, right.
That's exactly the point. That's

359
00:19:41.660 --> 00:19:43.910
great. That's great. Is that
true? Okay, good. Well, I'm

360
00:19:43.910 --> 00:19:49.000
glad I was just making
that up. Okay. So in,

361
00:19:49.000 --> 00:19:51.860
in, in your guide, do
you, do you have an

362
00:19:51.860 --> 00:19:54.020
opinion, do you let your
opinion leak or do you

363
00:19:54.020 --> 00:19:58.580
try to be agnostic? You
know, I have an opinion.

364
00:20:00.050 --> 00:20:02.480
I try not to let
it leak because, you know,

365
00:20:02.660 --> 00:20:04.520
just to give you a
little background on myself, my

366
00:20:04.910 --> 00:20:06.860
dad ran a, was the
editor at a small town

367
00:20:06.860 --> 00:20:11.270
newspaper, and I was a
journalism minor in college. And

368
00:20:11.390 --> 00:20:13.730
I think, you know, one
of my sort of innate

369
00:20:13.730 --> 00:20:17.780
strengths is being able to
be unbiased about things, but

370
00:20:17.780 --> 00:20:21.170
that doesn't mean not having
an opinion or reporting exactly

371
00:20:21.170 --> 00:20:23.300
what is really going on
with things, but it just

372
00:20:23.300 --> 00:20:27.530
means not being like too
much of a, a blind

373
00:20:27.680 --> 00:20:30.320
fan of a given framework.
So I think, you know,

374
00:20:30.650 --> 00:20:32.450
I'm able to look at
each one and say, you

375
00:20:32.450 --> 00:20:35.930
know, I don't like that
about backbone. That it's unopinionated,

376
00:20:36.110 --> 00:20:39.380
but here's why it would,
you know, here's the kind

377
00:20:39.380 --> 00:20:41.990
of person that would like
it. And instead of just,

378
00:20:42.590 --> 00:20:46.370
you know, you know, talking
poorly about it because, you

379
00:20:46.370 --> 00:20:48.910
know, it's not, I try
to kind of keep it

380
00:20:48.920 --> 00:20:51.310
even keel in like there's
a chapter that's a pro

381
00:20:51.310 --> 00:20:55.060
and cons of the frameworks
and just sort of lists

382
00:20:55.060 --> 00:20:58.570
out pros and cons of
each framework, because it's not,

383
00:20:58.930 --> 00:21:01.600
it's not a simple formula.
Like this one is the

384
00:21:01.600 --> 00:21:04.180
greatest and write off all
the other ones. It's more

385
00:21:04.180 --> 00:21:06.790
of a, you know, what's
right for your project. What's

386
00:21:06.790 --> 00:21:10.030
right. For your resources. What's
right. For aesthetics, you know,

387
00:21:10.240 --> 00:21:12.790
as a developer, all of
these kinds of things really

388
00:21:12.790 --> 00:21:16.180
figure into it, the, the
philosophy thing and the inspiration

389
00:21:16.180 --> 00:21:18.760
thing we talked about before,
stuff like that. So I

390
00:21:18.760 --> 00:21:21.400
talk a lot about that
stuff. So I like to

391
00:21:21.400 --> 00:21:25.990
think, you know, I, I
give a strong opinions in

392
00:21:25.990 --> 00:21:30.370
the book, but I try
to stay unbiased. What about

393
00:21:30.370 --> 00:21:33.010
kind of the elephant in
the room, which is just

394
00:21:33.010 --> 00:21:36.790
JavaScript, just vanilla JS. You
know, why, why do I

395
00:21:36.790 --> 00:21:39.130
need a framework? And I
know that for some people,

396
00:21:39.130 --> 00:21:41.920
they still love jQuery for
others. People are starting to

397
00:21:41.920 --> 00:21:44.320
feel that jQuery is kind
of falling out of favor

398
00:21:44.980 --> 00:21:49.780
for vanilla JS, there's even
joke websites like vanilla-js.com that

399
00:21:49.780 --> 00:21:53.200
I use in my talks
to remind people of, Hey

400
00:21:53.200 --> 00:21:58.030
folks, you don't need so
many abstractions. Yeah. I think

401
00:21:58.090 --> 00:22:02.350
that, you know, there are
frameworks like backbone. If you're

402
00:22:02.350 --> 00:22:07.450
a person who, who leans
that way, you, you need,

403
00:22:07.810 --> 00:22:09.400
let me put it this
way. My opinion is you

404
00:22:09.400 --> 00:22:15.880
need something, right. Why you
wouldn't, you wouldn't, are you

405
00:22:15.880 --> 00:22:21.250
using asp.net MVC and not
using classic ASP or you're

406
00:22:21.250 --> 00:22:25.420
not writing C plus plus
what, what's the old thing?

407
00:22:25.420 --> 00:22:30.520
The old IAS plugins I
sappy was the word I

408
00:22:30.520 --> 00:22:33.370
was looking for. Scott. He
came up with, it takes

409
00:22:33.370 --> 00:22:37.750
me back, but you're not
writing. I sappy plugins anymore.

410
00:22:37.930 --> 00:22:40.510
You know, you need some
level of abstraction. It's just

411
00:22:40.510 --> 00:22:45.430
whatever level are you comfortable
with taking on the responsibility

412
00:22:45.430 --> 00:22:48.280
for it, which, you know,
when you, when you play

413
00:22:48.280 --> 00:22:51.550
with these things and you
use use these applications, which

414
00:22:51.550 --> 00:22:55.810
one does it doesn't make
you feel constrained too much

415
00:22:57.880 --> 00:23:03.010
constrained by their opinions. Right.
Cause you know, these frameworks

416
00:23:03.010 --> 00:23:05.110
could go so far as
to do a lot for

417
00:23:05.110 --> 00:23:08.530
you. Like, you know, I
don't want to get it

418
00:23:08.530 --> 00:23:10.780
to this day, but you
know, like at some point

419
00:23:10.810 --> 00:23:14.230
web forums, you know, became
the villain, you know, in

420
00:23:14.230 --> 00:23:22.120
the world. And again, that's
a different conversation, but I

421
00:23:22.120 --> 00:23:25.570
will say that that web
forums has value. It's just

422
00:23:25.570 --> 00:23:27.160
a different kind of value.
You know what I mean?

423
00:23:27.160 --> 00:23:29.530
Like there are people out
there still making great applications

424
00:23:29.530 --> 00:23:32.860
and VB six, they just
may not necessarily be the,

425
00:23:33.130 --> 00:23:35.050
of trying to get an
old style framework to fit

426
00:23:35.050 --> 00:23:39.100
into a new world is
definitely not reasonable. Right. Right.

427
00:23:39.100 --> 00:23:42.790
And I'm not saying like
the me saying that wasn't

428
00:23:42.790 --> 00:23:45.010
about trying to say, you
know, web forms is bad.

429
00:23:45.020 --> 00:23:48.170
It's more saying it's a
higher level of abstraction than

430
00:23:48.170 --> 00:23:52.250
asp.net MVC. And so, and
I think there are freight,

431
00:23:52.580 --> 00:23:56.060
the frameworks are perfectly valid
for different types of developers

432
00:23:56.270 --> 00:23:58.670
doing different kinds of jobs
and so forth. So it's

433
00:23:58.670 --> 00:24:01.630
the same thing applies to
these framework. Now. That's interesting.

434
00:24:01.630 --> 00:24:05.230
So, so that's good. So
the level of abstraction at

435
00:24:05.320 --> 00:24:09.010
which you choose to work
at kind of dictates what

436
00:24:09.010 --> 00:24:11.110
you're going to be thinking
out, thinking about and the

437
00:24:11.110 --> 00:24:13.240
kinds of problems that you're
going to be solving. So

438
00:24:13.540 --> 00:24:17.500
for example, web forms is
a way of hiding some

439
00:24:17.500 --> 00:24:20.110
of the, the statelessness or
most of the statelessness and

440
00:24:20.110 --> 00:24:25.480
the tediousness of, of, of
HTML and HTTP and how

441
00:24:25.480 --> 00:24:30.970
it works, angular backbone, Amber,
do they hide things from

442
00:24:30.970 --> 00:24:35.440
you and are they hiding
HTTP things or are they

443
00:24:35.440 --> 00:24:41.380
hiding JavaScript, isms like jQuery
hid, you know, a lot

444
00:24:41.380 --> 00:24:46.360
of the complexities between browser
implementations, they hit, they invented

445
00:24:46.360 --> 00:24:52.570
this CSS selector concept, jQuery
made that, you know, kind

446
00:24:52.570 --> 00:24:54.700
of a nonissue for a
while. There was a time

447
00:24:54.700 --> 00:24:57.070
there were just simply getting
a Dom element was a

448
00:24:57.070 --> 00:25:01.450
challenge. Those days are over.
Right. And now we have

449
00:25:01.450 --> 00:25:05.020
different kinds of problems. Yeah.
I think, you know, one

450
00:25:05.020 --> 00:25:07.720
way I like to talk
about JavaScript script, the MVC

451
00:25:07.720 --> 00:25:10.660
frameworks is to talk about
like, what are the features

452
00:25:10.660 --> 00:25:13.300
that are, that are in
this JavaScript framework? Like what

453
00:25:13.300 --> 00:25:15.760
is really the pieces that
make it up that are

454
00:25:15.760 --> 00:25:20.290
value add. Right. So, okay.
A router for example, is

455
00:25:20.290 --> 00:25:22.720
a value add. So let's
just quickly addressing what a

456
00:25:22.720 --> 00:25:25.480
router is and an MVC
framework. Well, it's exactly what

457
00:25:25.750 --> 00:25:28.210
you're used to it being
on the server in rails

458
00:25:28.210 --> 00:25:32.960
or asp.net MVC, or, you
know, not NBC, you know,

459
00:25:33.550 --> 00:25:36.730
web forums now, right? It's,
it's take a, it maps

460
00:25:36.730 --> 00:25:41.260
a URL to a chunk
of code it at the

461
00:25:41.260 --> 00:25:45.490
minimum with these frameworks. So,
but what's happening is instead

462
00:25:45.490 --> 00:25:48.040
of that router running on
the server, it's running on

463
00:25:48.040 --> 00:25:51.580
the client. So you're there
in JavaScript and you click

464
00:25:51.580 --> 00:25:53.980
a link, but instead of
that, making a request to

465
00:25:53.980 --> 00:25:57.310
the server, you know, the
link doesn't actually that gets

466
00:25:57.310 --> 00:26:00.370
hijacked by JavaScript and it
says, Oh, this person wanted

467
00:26:00.370 --> 00:26:03.130
to go here. So what
do I want to do

468
00:26:03.130 --> 00:26:04.810
because of that? What code
do I want to run

469
00:26:04.810 --> 00:26:07.180
because of that. And then
what do I want to

470
00:26:07.180 --> 00:26:10.930
change the URL to, to
reflect that new state that

471
00:26:10.930 --> 00:26:13.600
the person is moving to
in the application or the

472
00:26:13.600 --> 00:26:16.060
new page, you know, sort
of virtual page that they're

473
00:26:16.060 --> 00:26:20.140
moving to in a single
page application. So Didn't you

474
00:26:20.140 --> 00:26:22.480
say that, that one of
the frameworks you use the

475
00:26:22.480 --> 00:26:25.660
word router and it wasn't
really a router. Yeah. So

476
00:26:25.690 --> 00:26:30.790
it's actually Ember uses the,
they have a router and

477
00:26:30.790 --> 00:26:32.920
it is a router, as
you would expect. They also

478
00:26:32.920 --> 00:26:36.670
have these objects called route
objects, which are something that

479
00:26:36.670 --> 00:26:39.730
is not seen in any
of the other framework. And

480
00:26:39.800 --> 00:26:42.790
people often get confused as
to what a route object

481
00:26:42.790 --> 00:26:45.900
is and including myself when
I was first learning and

482
00:26:45.960 --> 00:26:48.390
what you know, that, that
sort of thing, and what

483
00:26:48.450 --> 00:26:53.310
a route is, it's sort
of, this is a bigger

484
00:26:53.310 --> 00:26:55.890
conversation, but in summary, they
use it to sort of

485
00:26:58.140 --> 00:27:03.060
wire up their model before
the controller starts to work

486
00:27:03.060 --> 00:27:05.670
on it basically. So they
use it to go fetch

487
00:27:05.670 --> 00:27:07.800
data and, and do stuff.
There's other stuff that it

488
00:27:07.800 --> 00:27:10.440
does. But in a nutshell,
that's a good way to

489
00:27:10.440 --> 00:27:14.300
describe it an Ember. So
without getting too deep into

490
00:27:14.300 --> 00:27:18.440
that though, but the general
concepts are, are, are the

491
00:27:18.440 --> 00:27:22.310
same though. I mean their
route routes exists. Routes responsibilities

492
00:27:22.310 --> 00:27:26.630
are clear as are controllers
and how those things work.

493
00:27:27.320 --> 00:27:30.200
Right? So just to continue
with what other features are

494
00:27:30.200 --> 00:27:34.850
in, you know, JavaScript, MVC
application, real quickly, data buying

495
00:27:34.860 --> 00:27:38.300
is a big one, right?
So this is not an

496
00:27:38.330 --> 00:27:41.600
unfamiliar concept to those of
us. Who've worked in richer

497
00:27:41.690 --> 00:27:46.880
applications and WPF Silverlight, et
cetera, windows forms. So, but

498
00:27:46.880 --> 00:27:49.430
so you understand what database
by is, but you know,

499
00:27:49.430 --> 00:27:52.610
an interesting point is backbone.
Doesn't actually have data binding

500
00:27:52.610 --> 00:27:54.260
out of the box. You
kind of have to write

501
00:27:54.350 --> 00:27:57.410
a decent amount of code
to get a data binding

502
00:27:57.410 --> 00:28:01.130
working. There's plenty of plugins
that help you with this,

503
00:28:01.130 --> 00:28:03.770
but it's not part of
the framework. So it's very,

504
00:28:03.770 --> 00:28:06.770
you know, bare bones in
that way, but you know,

505
00:28:06.770 --> 00:28:09.560
there's off, but then people
often criticize like, you know,

506
00:28:09.560 --> 00:28:12.680
angular because, you know, it's
awesome when you first do

507
00:28:12.680 --> 00:28:16.490
the first demo and everything,
data binds both ways, but

508
00:28:16.550 --> 00:28:20.180
at some point, you know,
there can be performance concerns

509
00:28:20.180 --> 00:28:22.190
with, with the data binding.
So it's, you know, it's

510
00:28:22.190 --> 00:28:24.290
all trade offs, you know,
you've got that great two-way

511
00:28:24.290 --> 00:28:27.530
data binding that you're used
to on the server. And

512
00:28:27.530 --> 00:28:29.930
an interesting point is I
believe, you know, in the

513
00:28:29.930 --> 00:28:32.360
history of frameworks, like knockout
was the first one to

514
00:28:32.360 --> 00:28:36.260
really come with that data
binding idea. And Steve Sanderson,

515
00:28:36.800 --> 00:28:39.140
you know, the, his framework
to come out with that

516
00:28:39.140 --> 00:28:42.470
idea. And, and you know,
now a lot of people

517
00:28:42.470 --> 00:28:44.990
think of that as an
angular specific thing, especially outside

518
00:28:44.990 --> 00:28:48.950
the.net world where a Steve's
known a little better, but

519
00:28:49.280 --> 00:28:51.560
I think that's an interesting
thing to know, but the

520
00:28:51.770 --> 00:28:56.030
what's what's different about knockout
is at least until recently,

521
00:28:56.030 --> 00:28:58.970
it's been pretty focused on
just at that data binding

522
00:28:58.970 --> 00:29:02.420
feature and sort of, you
know, when you buy, when

523
00:29:02.420 --> 00:29:04.790
you, when you get applications
in a company you might

524
00:29:04.790 --> 00:29:07.640
choose to buy to like
a best of breed approach

525
00:29:07.670 --> 00:29:10.550
and you might buy three
different applications that are the

526
00:29:10.550 --> 00:29:13.640
best of breed in, in
like a CRM and a

527
00:29:13.640 --> 00:29:19.340
marketing application and in a
general ledger system and then

528
00:29:19.550 --> 00:29:23.120
wire them together through integrations,
right. Or you might try

529
00:29:23.210 --> 00:29:25.580
to, you know, choose to
buy a suite where all

530
00:29:25.580 --> 00:29:28.940
these things kind of automatically
work together. So when you

531
00:29:28.940 --> 00:29:31.100
get talk about something like
angular, it's more of a

532
00:29:31.100 --> 00:29:35.120
suite where, you know, all
these framework pieces are in

533
00:29:35.120 --> 00:29:38.930
the box and working together.
Whereas something like backbone takes

534
00:29:39.470 --> 00:29:42.910
our knockout. I'm sorry. It
takes of the opinion. Okay.

535
00:29:42.910 --> 00:29:45.610
There's, there's a lot of
good routing libraries out there

536
00:29:45.700 --> 00:29:49.150
like Sammy JS and history
JS. And so you use

537
00:29:49.150 --> 00:29:52.670
that for that. And then
for the data binding use,

538
00:29:52.670 --> 00:29:55.060
use me over here. And
then, you know, for the,

539
00:29:55.060 --> 00:29:56.710
some of these other features,
we'll talk about, use other

540
00:29:56.710 --> 00:30:00.400
things. So, and I think
that it's, you know, not

541
00:30:00.400 --> 00:30:02.920
as popular as it was
at one point knockout, and

542
00:30:02.920 --> 00:30:05.650
I think they're moving to,
you know, adding some more

543
00:30:05.650 --> 00:30:09.220
of the features that other
frameworks have, you know, to

544
00:30:09.220 --> 00:30:13.890
sort of compete in that
world. One other question I

545
00:30:13.890 --> 00:30:15.330
wanted to ask as we
kind of come to the

546
00:30:15.330 --> 00:30:17.970
closing here is that there's
other things that are kind

547
00:30:17.970 --> 00:30:21.750
of more fundamental, like module
loaders and things like that.

548
00:30:21.780 --> 00:30:24.300
And, you know, they started
with things like require JS

549
00:30:24.330 --> 00:30:27.150
and now the idea of
a module and a module

550
00:30:27.150 --> 00:30:31.170
loader, or being kind of
built into the language. What

551
00:30:31.170 --> 00:30:34.290
do I need to know
about those and loaders as

552
00:30:34.500 --> 00:30:37.110
you know, script loaders, as
I think about selecting a

553
00:30:37.110 --> 00:30:43.500
framework, I think the short
answer is they all work

554
00:30:43.500 --> 00:30:48.930
with most frameworks. So it's,
it's just a, you know,

555
00:30:49.560 --> 00:30:52.770
pick that as a separate
choice or, you know, with

556
00:30:52.770 --> 00:30:57.480
some frameworks they have enough,
or at least they have

557
00:30:57.480 --> 00:31:01.380
a lot in that area,
like take angular or Amber

558
00:31:01.380 --> 00:31:05.490
in particular, they sort of
angle angular has a module

559
00:31:05.490 --> 00:31:08.610
concept, which is, you know,
modules for dinette. People are

560
00:31:08.610 --> 00:31:11.280
namespaces. I mean, it's, you
know, we could come from

561
00:31:11.280 --> 00:31:14.430
the Ruby world, they call
them, you know, module, or

562
00:31:14.430 --> 00:31:16.110
there's more of a, you
know, it's not a one

563
00:31:16.110 --> 00:31:19.170
to one mapping, but it's
essentially a place to organize

564
00:31:19.170 --> 00:31:21.360
your code, you know, so
that it's not just all

565
00:31:21.360 --> 00:31:24.480
floating out there in the
global namespace. And so Agular

566
00:31:24.930 --> 00:31:27.120
can be a little more
confusing when you first looking

567
00:31:27.120 --> 00:31:30.900
at it, but it's very,
it's written so that you

568
00:31:30.900 --> 00:31:35.340
can kind of namespace everything
without really knowing, being that

569
00:31:35.340 --> 00:31:38.790
good of a JavaScript programmer
by default. And you kind

570
00:31:38.790 --> 00:31:40.260
of fall into the pit
of success. And I think

571
00:31:40.260 --> 00:31:43.320
that's another reason people have
liked it. And Amber, Amber

572
00:31:43.320 --> 00:31:46.650
has some of those same
traits along those lines. So

573
00:31:46.770 --> 00:31:49.530
all that to say, you
might not have as much

574
00:31:49.530 --> 00:31:51.780
of a need for a
module loader with some of

575
00:31:51.780 --> 00:31:54.030
those other frameworks. I'm not
going to get, want to

576
00:31:54.030 --> 00:31:55.890
get too much hate mail
because you know, there's people

577
00:31:55.890 --> 00:31:58.410
who, you know, you still
need it. And yes, those

578
00:31:58.410 --> 00:32:01.500
frameworks do a lot more,
you know, a browser FYS

579
00:32:01.560 --> 00:32:03.780
is a very popular one
lately is what I've been

580
00:32:03.780 --> 00:32:06.360
hearing. If you kind of
want the latest, but I

581
00:32:06.360 --> 00:32:10.350
think they're still evolving, right?
Like all those module frameworks,

582
00:32:10.380 --> 00:32:14.160
the standards seem to be
set, but, but they're still

583
00:32:14.160 --> 00:32:18.000
evolving. It was definitely a
challenge to try to figure

584
00:32:18.000 --> 00:32:20.460
out what the right decision
is. And we talked a

585
00:32:20.460 --> 00:32:22.680
little bit at the beginning
about all the different people

586
00:32:22.680 --> 00:32:25.950
and personalities. And as you
start getting deeper and deeper,

587
00:32:25.950 --> 00:32:28.680
you think, Oh, well, I'll
use a AMD. That's, you

588
00:32:28.680 --> 00:32:31.800
know, asynchronous module definition. And
then you poke around and

589
00:32:31.800 --> 00:32:34.350
you find blog posts from
someone like Tom Dale of

590
00:32:34.350 --> 00:32:36.750
Ember. Who's like, AMD is
not the answer. Like, Oh,

591
00:32:36.750 --> 00:32:38.520
well, let's see Like a
good idea at the time,

592
00:32:39.200 --> 00:32:42.830
you know? And Then you
won, you know, I think

593
00:32:43.120 --> 00:32:45.620
what do I know? Right.
I'm just the one who

594
00:32:45.620 --> 00:32:49.430
wants to learn. So it's,
it's difficult, but I appreciate

595
00:32:49.430 --> 00:32:51.050
that. You've, you've put all
of this in a book

596
00:32:51.080 --> 00:32:53.360
and we can go and
explore that. And you actually

597
00:32:53.360 --> 00:32:56.720
made a website for Hansel
minutes. Listeners. You can check

598
00:32:56.720 --> 00:32:59.960
that out. It funny aunt
F U N Y a

599
00:32:59.960 --> 00:33:04.670
N T. Just like, it
sounds funny. aunt.com/hanselman. You got

600
00:33:04.670 --> 00:33:07.880
a discount for listeners. That's
super nice of you. Yeah.

601
00:33:07.970 --> 00:33:10.730
So from a couple of
weeks, at least. So when

602
00:33:10.730 --> 00:33:13.460
you hear this, please try
to go right away. If

603
00:33:13.460 --> 00:33:16.970
you have interest 20% off
for, for a couple of

604
00:33:16.970 --> 00:33:20.540
weeks, because podcasts are a
little vague on timing and

605
00:33:20.540 --> 00:33:23.960
so forth. It's true. Podcasts
do live forever. Right? Right.

606
00:33:24.650 --> 00:33:27.920
If you know, after that,
if, if you miss that

607
00:33:28.010 --> 00:33:33.450
time window, just go to
JavaScript framework, guide.com and you'll

608
00:33:33.600 --> 00:33:38.060
get to the same, same
page. Pretty cool. Well, thanks

609
00:33:38.060 --> 00:33:41.120
so much, Craig Mickey for
chatting with me today, it

610
00:33:41.120 --> 00:33:44.450
was a pleasure. This has
been another episode of Hanselminutes

611
00:33:44.510 --> 00:33:52.630
and we'll see you again
next week. <inaudible>.

