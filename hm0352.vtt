WEBVTT FILE

1
00:00:24.930 --> 00:01:01.310
January 3rd. Hi, this is Scott
Hanselman. This is another episode

2
00:01:01.310 --> 00:01:04.190
of Hansel minutes talking to
my buddy Damien Edwards. How's

3
00:01:04.190 --> 00:01:06.980
it going, sir? I'm very
well. How are you? Very

4
00:01:06.980 --> 00:01:11.900
well. So congratulations on signal,
our being an officially supported

5
00:01:12.680 --> 00:01:17.780
Microsoft thing. You're your guys's
weekend project. You and David Fowler

6
00:01:17.780 --> 00:01:20.240
is now like a real
thing. When you say file

7
00:01:20.240 --> 00:01:25.280
new project in the visual
studio, 22 version of asp.net,

8
00:01:25.280 --> 00:01:38.180
it's a, there's a signal,
our choice. That's right. Does

9
00:01:38.180 --> 00:01:40.850
that seem more like official
than the other stuff that

10
00:01:40.850 --> 00:01:45.110
you have actually shipped? Like
you've shipped web forms and

11
00:01:45.110 --> 00:01:48.410
that's like official and awesome,
but somehow this is your

12
00:01:48.410 --> 00:01:53.600
baby. Yeah. I joined the
team coming up to three

13
00:01:53.600 --> 00:01:58.160
years ago and I actually
joined the team, went out

14
00:01:58.160 --> 00:02:09.500
the door. I was heavily
involved in that release management

15
00:02:09.500 --> 00:02:20.930
side, I guess, official product
roadmap. It was literally a

16
00:02:20.930 --> 00:02:35.930
side project very soon. So
it's been really exciting. How

17
00:02:35.930 --> 00:02:39.440
often does that happen? Where
Microsoft will take something and

18
00:02:39.560 --> 00:02:51.590
that is open source and
ship. It Honestly produced by

19
00:02:51.590 --> 00:02:56.990
Microsoft. It's still a personal
project. Why did you choose

20
00:02:56.990 --> 00:02:58.640
to do this? Then you
could have just left it,

21
00:02:58.640 --> 00:03:01.360
right? We could've, We could've
just said no, we're going

22
00:03:01.360 --> 00:03:03.940
to continue. I mean, so
talk about what sort of,

23
00:03:03.950 --> 00:03:07.690
we talked about this originally
with management and sort of

24
00:03:07.690 --> 00:03:10.720
the understanding at the time
was that you guys continue

25
00:03:10.720 --> 00:03:15.070
this as a moonlighting project.
With the understanding that one,

26
00:03:15.070 --> 00:03:17.680
the roadmap kind of opens
up once.net four or five

27
00:03:17.680 --> 00:03:20.830
has finished. We'd be interested
in looking at making this

28
00:03:21.100 --> 00:03:23.410
part of the product because
we think it's really important,

29
00:03:24.140 --> 00:03:26.170
you know, to the web
development story moving forward. And

30
00:03:26.350 --> 00:03:28.180
we never had any problem
with that. I mean, we've

31
00:03:28.180 --> 00:03:32.140
obviously, <inaudible>, there's a lot
of benefits to being a

32
00:03:32.140 --> 00:03:35.210
project that's produced and supported
by Microsoft. I mean, I'm

33
00:03:35.230 --> 00:03:37.810
sitting in one half of
our team room at the

34
00:03:37.810 --> 00:03:40.030
moment. We're in a fairly
new building right now. We

35
00:03:40.030 --> 00:03:42.370
moved a couple of months
ago previously we had a

36
00:03:42.370 --> 00:03:44.230
team room with all of
the signal, a team in

37
00:03:44.230 --> 00:03:46.840
it together now with split
across toot a room. So

38
00:03:46.870 --> 00:03:48.340
they have a trailer and
I sit in this one

39
00:03:48.340 --> 00:03:51.760
room and directly opposite. The
whole here is a team,

40
00:03:51.790 --> 00:03:53.620
a room with five or
six people in it. And

41
00:03:53.620 --> 00:03:56.560
we're all working on signal
and we even have more

42
00:03:56.560 --> 00:03:58.090
people. We have people on
the perf team and the

43
00:03:58.090 --> 00:04:01.240
stress team working on signaler
basically full time as well.

44
00:04:01.240 --> 00:04:04.420
So we have maybe 10
to 12 people at the

45
00:04:04.420 --> 00:04:08.260
moment working on signaler, which
we couldn't have possibly imagined

46
00:04:08.890 --> 00:04:11.820
if this was just a
moon landing project. Yeah. Interesting.

47
00:04:11.820 --> 00:04:15.030
I mean, to assemble that
many people into it, into

48
00:04:15.030 --> 00:04:16.410
a team and the open
source world and do it

49
00:04:16.410 --> 00:04:18.380
fully, you know, even close
to full time would be

50
00:04:18.400 --> 00:04:21.630
possible. Yeah, that's that's yeah,
exactly. So that's one of

51
00:04:21.630 --> 00:04:23.730
the huge benefits, right? And
then we get other benefits

52
00:04:23.730 --> 00:04:28.290
like localization is now something
you can do. We have

53
00:04:28.290 --> 00:04:31.260
a user experience or user
education team whose job is

54
00:04:31.260 --> 00:04:33.570
to do documentation, which is
always a really big problem

55
00:04:33.570 --> 00:04:35.430
on open source projects. You
know, who's going to write

56
00:04:35.880 --> 00:04:39.630
good quality documentation. So we
get all these resources and

57
00:04:39.690 --> 00:04:42.290
you know, other people and
teams available to us to,

58
00:04:42.290 --> 00:04:44.610
to work on this. Cause
that's now basically just part

59
00:04:44.610 --> 00:04:47.370
of asp.net. Okay. So you've
had a bunch of people

60
00:04:47.370 --> 00:04:50.100
working on it. Now you've
got people from different departments,

61
00:04:50.100 --> 00:04:55.440
you've got QA localization stress,
you've got a user documentation,

62
00:04:56.010 --> 00:04:59.700
but this thing was a
regular old two guys on

63
00:04:59.700 --> 00:05:04.320
get hub project, you know,
some, some months ago. Do,

64
00:05:04.440 --> 00:05:07.350
how do you get all
these Microsoft employees to commit

65
00:05:08.160 --> 00:05:11.460
to that random GitHub repository?
Or did you have to

66
00:05:11.460 --> 00:05:13.380
like sell your soul and
make some change to make

67
00:05:13.380 --> 00:05:17.730
this happen? Good question. So
as part of the process

68
00:05:17.790 --> 00:05:20.460
of sort of changing this
from being a project that

69
00:05:20.460 --> 00:05:22.410
just David and I worked
on to being something that

70
00:05:22.410 --> 00:05:24.300
the Microsoft there has been
on, that team works on.

71
00:05:24.840 --> 00:05:29.580
We actually assigned all the
project, the copyright associated with

72
00:05:29.580 --> 00:05:33.510
the code, et cetera, over
to Microsoft, open tech. So

73
00:05:33.510 --> 00:05:38.040
Microsoft open tech was that
subsidiary wholly owned subsidiary set

74
00:05:38.040 --> 00:05:40.860
up by Microsoft in the
last year or two to

75
00:05:40.860 --> 00:05:45.270
do open source work full
Microsoft, but still have it

76
00:05:45.270 --> 00:05:48.090
be sort of within the
Microsoft realm. Whereas the other

77
00:05:48.090 --> 00:05:51.930
organization people might be familiar
with as outer curve, formerly

78
00:05:51.930 --> 00:05:55.140
the copex foundation, which is
not a company, it's a,

79
00:05:55.140 --> 00:05:57.800
it is an organization as
far as I, and it

80
00:05:57.800 --> 00:06:00.380
is completely separate from Microsoft.
And so things like new

81
00:06:00.380 --> 00:06:04.370
get, which are in Adekov
the code isn't actually owned

82
00:06:04.370 --> 00:06:07.340
by Microsoft. It's owned by
outer curve and Microsoft people

83
00:06:07.340 --> 00:06:10.070
contribute to it, but it's
not owned by Microsoft or

84
00:06:10.070 --> 00:06:13.250
signal is a Microsoft open
tech, which is the same

85
00:06:13.250 --> 00:06:18.470
as asp.net, MVC, web API,
razor entity framework. And so

86
00:06:18.470 --> 00:06:20.240
we sort of fit within
the same sort of model

87
00:06:20.240 --> 00:06:25.600
as them. So there is
the signal, our open source

88
00:06:25.630 --> 00:06:27.910
project that I could commit
to, I can build, I

89
00:06:27.910 --> 00:06:30.520
can fork and I could
do stuff with, and then

90
00:06:30.520 --> 00:06:33.580
there's Microsoft signal R that
I ship with visual studio

91
00:06:34.210 --> 00:06:38.680
and okay. And the signal
are that ships with visual

92
00:06:38.680 --> 00:06:42.100
studio now is supported. I
mean, it's open source, but

93
00:06:42.100 --> 00:06:46.210
it is also licensed as
a Microsoft product. And it

94
00:06:46.210 --> 00:06:50.020
is, we find a big
corporation. Do I have to

95
00:06:50.020 --> 00:06:54.670
go and say, gosh, I
can't ship open source. That's

96
00:06:54.850 --> 00:06:57.900
the question we get quite
a lot actually. And the

97
00:06:57.910 --> 00:07:01.750
truth is because as you
said, we, we basically, the

98
00:07:01.750 --> 00:07:06.820
Microsoft entity takes the open
source code and repackages it

99
00:07:06.880 --> 00:07:09.160
essentially, and ships it as
a Microsoft component. And if

100
00:07:09.160 --> 00:07:12.040
you look at the assemblies
that we ship, they're signed

101
00:07:12.250 --> 00:07:15.070
with the Microsoft code signing
key. So when we ship

102
00:07:15.080 --> 00:07:18.370
them as a Microsoft release,
and that includes our nightly

103
00:07:18.370 --> 00:07:21.610
builds that we push up
via my gate. And so

104
00:07:21.700 --> 00:07:24.010
they are a true Microsoft
release. And so they come

105
00:07:24.010 --> 00:07:26.320
with a ULA when you
get them by new gate,

106
00:07:26.320 --> 00:07:28.300
when you get one of
the official Microsoft releases, there

107
00:07:28.300 --> 00:07:31.180
was a ULA in the
new get package. And that

108
00:07:31.360 --> 00:07:34.750
stipulates the terms that are
usually associated with using something

109
00:07:34.750 --> 00:07:37.930
from Microsoft. And part of
that is a support of

110
00:07:37.930 --> 00:07:40.450
sort of arrangement. And so
product support services or whatever

111
00:07:40.450 --> 00:07:44.440
they're called today, CSS PSS
will provide support for this

112
00:07:44.590 --> 00:07:47.380
product as it's shipped by
a, you know, supported Microsoft

113
00:07:47.380 --> 00:07:49.810
team. And so, no, you
don't have to worry about

114
00:07:49.810 --> 00:07:53.440
shipping open source in terms
of support from Microsoft, as

115
00:07:53.440 --> 00:07:56.590
long as you're using the
thing that we actually shipped.

116
00:07:56.590 --> 00:07:58.810
If you go and get
the source code from GitHub

117
00:07:58.810 --> 00:08:00.730
and build it yourself, you're
on your own, Right? It's

118
00:08:00.730 --> 00:08:04.510
just like, I use the
example of Firefox or Chrome,

119
00:08:04.510 --> 00:08:07.750
which are all both used
in corporate environments. There's like

120
00:08:07.930 --> 00:08:11.260
chromium the open source Chrome
that I could go and

121
00:08:11.260 --> 00:08:13.510
build and run myself. But
I would be on my

122
00:08:13.510 --> 00:08:16.780
own if I did that.
Right. But there's also, I

123
00:08:16.780 --> 00:08:19.930
think more interestingly, there's also
libraries downstream. I mean, the

124
00:08:19.930 --> 00:08:22.570
fact that Chrome is opensource
is one thing. The fact

125
00:08:22.570 --> 00:08:25.030
that Chrome uses and sits
on, I hope pile of

126
00:08:25.030 --> 00:08:27.520
open source is more interesting.
And what I think is

127
00:08:27.520 --> 00:08:29.140
interesting, what I wanted to
talk to you about today

128
00:08:29.140 --> 00:08:34.240
was that signal are, this
is, I don't know, maybe,

129
00:08:34.360 --> 00:08:36.490
hopefully the boss won't listen,
but maybe, maybe he will

130
00:08:36.490 --> 00:08:40.510
screw it. Signal R is
a Microsoft opensource project run

131
00:08:40.510 --> 00:08:43.540
the way two developers would
want to do it without

132
00:08:43.540 --> 00:08:46.750
any bosses. You have your
unit tests, the way you

133
00:08:46.750 --> 00:08:50.230
would do it. You have
your environment set up the

134
00:08:50.230 --> 00:08:52.810
way that you would do
it with no pressure from

135
00:08:52.810 --> 00:08:55.030
Microsoft. You see what I'm
saying? You guys did it

136
00:08:55.200 --> 00:08:58.770
the weekend. So it would
be as if, you know,

137
00:08:58.770 --> 00:09:00.870
a couple of Microsoft guys
want to write a project,

138
00:09:00.900 --> 00:09:03.810
that's going to be JavaScript
and CLR and there's no

139
00:09:03.810 --> 00:09:08.340
bosses. So what I want
to know is what libraries

140
00:09:08.340 --> 00:09:11.670
you use, what environments you
use, what a services build

141
00:09:11.670 --> 00:09:16.920
systems, because there were no
bosses, but now you've snuck

142
00:09:16.920 --> 00:09:21.050
it in. Are you still
using those same libraries? That's

143
00:09:21.050 --> 00:09:25.430
a really good question. So
I think because we, you

144
00:09:25.430 --> 00:09:27.860
know, David and I, you
know, we love open source.

145
00:09:27.870 --> 00:09:29.930
David especially does a lot
of stuff in the opensource

146
00:09:29.930 --> 00:09:33.550
community, helping out with mano,
getting stuff running on, on,

147
00:09:33.550 --> 00:09:35.300
on that sort of platform
and things. Obviously he was

148
00:09:35.300 --> 00:09:38.600
heavily involved in new, get
we one, we started on

149
00:09:38.600 --> 00:09:43.220
GitHub. And so we were
staying on GitHub. We have

150
00:09:43.220 --> 00:09:45.260
a really great following on
GitHub. So that was one

151
00:09:45.260 --> 00:09:47.990
thing that is probably different
to, if we were started

152
00:09:47.990 --> 00:09:51.590
in Microsoft, if we were
to start today, a brand

153
00:09:51.590 --> 00:09:54.140
new.net, open source project, as
part of this team, it

154
00:09:54.140 --> 00:09:56.480
would most likely be in
Plex. And there's nothing wrong

155
00:09:56.480 --> 00:09:58.100
with that, but we started
to get hub. And so

156
00:09:58.100 --> 00:09:59.240
we're going to stay in,
get hub. We have a

157
00:09:59.240 --> 00:10:03.170
community there. Secondly, we, yeah,
we, we used a whole

158
00:10:03.170 --> 00:10:07.970
bunch of other open source
libraries, not actually in our

159
00:10:08.060 --> 00:10:10.850
code per se. Like we
haven't really incorporated stuff into

160
00:10:10.850 --> 00:10:13.700
our code at all, but
we, as part of the

161
00:10:13.700 --> 00:10:16.550
build process and as part
of producing samples and those

162
00:10:16.550 --> 00:10:18.860
types of things, we use
quite a lot of open

163
00:10:18.860 --> 00:10:22.040
source libraries. And there's some,
certainly some interesting developments recently,

164
00:10:22.040 --> 00:10:24.350
which we can talk about,
which I'm quite proud of

165
00:10:24.350 --> 00:10:26.810
that we've actually got up
and running as part of

166
00:10:26.810 --> 00:10:29.030
our build process. But yeah,
so we, so we kind

167
00:10:29.030 --> 00:10:32.090
of brought a lot of
that, I guess, baggage across

168
00:10:32.390 --> 00:10:36.080
when we became an official
ASP net thing. And you

169
00:10:36.080 --> 00:10:40.130
know, of course there is
a process involved internally to,

170
00:10:41.000 --> 00:10:44.180
to get approval for or
to at least notify that

171
00:10:44.180 --> 00:10:47.870
you're using certain types of
open source for specific purposes.

172
00:10:48.440 --> 00:10:51.050
And I will say again,
there is a difference between

173
00:10:51.410 --> 00:10:56.330
us using open source software
to produce the library. That

174
00:10:56.330 --> 00:11:01.280
is what we term internal
use versus redistributing open source

175
00:11:01.520 --> 00:11:03.950
as part of a product.
And I guess the, the

176
00:11:03.950 --> 00:11:09.080
difference is with the ASP
net templates, we actually redistribute

177
00:11:09.080 --> 00:11:13.070
things like jQuery, jQuery, UI,
and knockout. So we're actually

178
00:11:13.070 --> 00:11:16.010
taking those open source libraries
and reshipping them in a

179
00:11:16.010 --> 00:11:19.130
Microsoft product. Whereas in signal,
we don't do that. We

180
00:11:19.130 --> 00:11:22.370
do use a whole bunch
of open source libraries in

181
00:11:22.370 --> 00:11:24.380
our samples, but we don't
ship them. They just live

182
00:11:24.380 --> 00:11:27.320
up in the source code
or we reference them by

183
00:11:27.320 --> 00:11:29.810
a new get. So technically
we're not actually redistributing them.

184
00:11:30.530 --> 00:11:33.290
And then when we actually
produce signal out, we do

185
00:11:33.290 --> 00:11:36.020
a bunch of testing and
we use a lot of,

186
00:11:36.230 --> 00:11:39.380
we've used some really interesting
open source libraries and platforms

187
00:11:39.380 --> 00:11:41.390
for that testing, which is
kind of cool as well.

188
00:11:41.570 --> 00:11:43.670
So there's a process we
have to go through, but

189
00:11:44.180 --> 00:11:46.700
you know, a part of
getting the benefits of Microsoft

190
00:11:46.700 --> 00:11:48.320
is you also have to
adhere some of these things

191
00:11:48.320 --> 00:11:51.320
and it hasn't really been
a problem. Okay. So we're,

192
00:11:51.380 --> 00:11:53.000
we're a couple of minutes
into the podcast here and

193
00:11:53.050 --> 00:11:54.720
realizing that there may be
people that don't know what

194
00:11:54.730 --> 00:11:57.760
signal are, is briefly. It
is a, a real time

195
00:11:58.210 --> 00:12:03.790
communications library. It's an abstraction
over a web sockets and

196
00:12:04.270 --> 00:12:06.580
long polling and forever frames
and all the things that

197
00:12:06.580 --> 00:12:09.790
one uses to do real
time communication. And it's basically

198
00:12:09.790 --> 00:12:13.240
kind of like the realtime
aspects of node except in

199
00:12:13.240 --> 00:12:17.710
asp.net. And it consists of
a DLL on the server

200
00:12:17.710 --> 00:12:20.530
side that has some modules
and some handlers and some

201
00:12:20.530 --> 00:12:24.550
listeners. And on the client
side, it consists of some

202
00:12:24.550 --> 00:12:28.620
JavaScript. Is there anything else
that ships with signaler? So

203
00:12:28.620 --> 00:12:30.810
we, on the client side,
we have a dependency on

204
00:12:30.810 --> 00:12:35.910
jQuery. And so why we
don't actually redistribute J query

205
00:12:36.030 --> 00:12:37.920
with signal. I mean, signaler
is a new get release.

206
00:12:37.920 --> 00:12:40.680
We do have item templates,
which are included in the

207
00:12:40.710 --> 00:12:44.460
ASP net updates that we,
that we also we've also

208
00:12:44.460 --> 00:12:48.180
shipped in, but signal our
itself. Isn't registered building jQuery,

209
00:12:48.180 --> 00:12:51.330
it's being redistributed by that
other package. And so we

210
00:12:51.330 --> 00:12:55.020
depend on jQuery. We also
depend on jason.net on the

211
00:12:55.020 --> 00:12:57.900
service side. So we have,
we have a reference to

212
00:12:57.900 --> 00:12:59.850
that. So your project we'll
have to get that from

213
00:12:59.850 --> 00:13:01.890
new get. And of course
our nougat package has a

214
00:13:01.890 --> 00:13:03.540
dependency on that. So then
you get those that for,

215
00:13:03.720 --> 00:13:07.140
Right, right. But, but now
that asp.net web API, which

216
00:13:07.140 --> 00:13:10.920
is the services stuff, has
jason.net dependencies that's okay. Or

217
00:13:10.920 --> 00:13:14.010
not. Okay. But it's more
common. That is our preferred

218
00:13:14.010 --> 00:13:17.130
Jason serializer now That's right.
Yeah. And so, I mean,

219
00:13:17.520 --> 00:13:19.860
again, most of this stuff
is usually plugable out jQuery

220
00:13:19.860 --> 00:13:23.100
dependency is hard at the
moment in the client because

221
00:13:23.100 --> 00:13:24.510
they give us just a
lot of stuff that we

222
00:13:24.510 --> 00:13:26.460
don't want to have to
rewrite. And then the other

223
00:13:26.460 --> 00:13:28.890
thing we depend on from
a runtime perspective is Owen,

224
00:13:29.370 --> 00:13:31.920
which I think you spoke
about recently in another podcast,

225
00:13:32.220 --> 00:13:34.110
But, but you should, you
should get a little bit

226
00:13:34.110 --> 00:13:36.450
into that because people don't
know what Owen is or

227
00:13:36.450 --> 00:13:39.900
why it's going to become
increasingly important. Yeah. Yeah. We

228
00:13:39.900 --> 00:13:48.750
should probably do a talk
on that@somepointorapodcastonthatactuallytheopenwebinterfacesfor.net and it's basically

229
00:13:48.780 --> 00:13:53.440
a contract between a web
server. So that is the,

230
00:13:53.440 --> 00:13:56.790
the physical bit of software
that deals with taking stuff

231
00:13:57.480 --> 00:14:00.450
bites off the wire and
then formulating them into things

232
00:14:00.450 --> 00:14:03.450
that look like HTTP requests
and then sending data back.

233
00:14:03.660 --> 00:14:05.910
And then the web frameworks
that want to sit on

234
00:14:05.910 --> 00:14:07.770
top of those things. So
this is kind of the

235
00:14:07.770 --> 00:14:10.800
layer that sits in between
a web service or hosts

236
00:14:11.280 --> 00:14:14.790
and then web frameworks upon
which you write your applications

237
00:14:15.570 --> 00:14:18.750
with ASP net. Traditionally, we
think of ASP net being

238
00:14:19.020 --> 00:14:22.590
joined at the hip with
IIS, which is in some

239
00:14:22.590 --> 00:14:26.880
ways true. And so Owen
is an effort to create

240
00:14:26.880 --> 00:14:31.050
web frameworks and a structure
for creating web frameworks that

241
00:14:31.530 --> 00:14:35.040
can sort of coordinate and
sit on common hosts through

242
00:14:35.040 --> 00:14:37.680
a common contract. And so
signal that actually takes a

243
00:14:37.680 --> 00:14:42.270
dependency on Owen. We don't
talk to asp.net or system

244
00:14:42.270 --> 00:14:48.060
web directly. The signal or
core actually is basically hosted

245
00:14:48.450 --> 00:14:51.090
based on this Owen contract.
And then we, that means

246
00:14:51.200 --> 00:14:52.730
can sit on top of
system where we can sit

247
00:14:52.730 --> 00:14:55.370
on top of HTTP listener.
We can sit on top

248
00:14:55.370 --> 00:14:57.770
of custom web servers, as
long as all those things

249
00:14:57.770 --> 00:15:04.120
know how to talk Owen.
Okay. So this is allowing

250
00:15:04.170 --> 00:15:07.060
signal or to communicate with,
with anything you can, can

251
00:15:07.060 --> 00:15:10.390
you self host signaler? You
can, you can I'm at

252
00:15:10.390 --> 00:15:12.880
the moment, the self host
story is a little bit

253
00:15:12.880 --> 00:15:17.770
manual because Owen itself is
sort of developing with signal.

254
00:15:17.770 --> 00:15:19.960
I mean, Owen has been
around for a few years,

255
00:15:20.290 --> 00:15:24.700
but in terms of Owen's
use by Microsoft packages, it's

256
00:15:24.700 --> 00:15:26.530
kind of got to a
tipping point. Now, we, we

257
00:15:26.530 --> 00:15:28.270
said, well, no signal, or
is going to be the

258
00:15:28.270 --> 00:15:32.290
first package. The first library
was ship that actually requires

259
00:15:32.290 --> 00:15:35.860
Owen to run. So we
don't have a native system,

260
00:15:35.860 --> 00:15:38.470
web host per se, which
we used to have. We

261
00:15:38.470 --> 00:15:41.860
now only have an Owen
host. And that means that

262
00:15:41.860 --> 00:15:45.610
you need to also have
the Owen system web adapter

263
00:15:45.670 --> 00:15:48.340
or package in your project
in order for signal or

264
00:15:48.340 --> 00:15:51.130
to run an asp.net. Now,
of course we do some

265
00:15:51.130 --> 00:15:53.200
nice new get tricks to
make sure all that just

266
00:15:53.200 --> 00:15:55.450
sort of happens. It's the
default story, but if you

267
00:15:55.450 --> 00:15:57.880
peel away the layers, yeah.
We just sit on top

268
00:15:57.880 --> 00:15:59.500
of Owen. So you can
sit on top of HTTP

269
00:15:59.500 --> 00:16:03.100
listener. You can sit on
top of kayak or Firefly

270
00:16:03.100 --> 00:16:05.830
or whatever custom web server
you like. And does it

271
00:16:05.830 --> 00:16:07.900
work in model? You'd mentioned
that David has, is a

272
00:16:07.900 --> 00:16:10.480
fan of motto. It does.
Yeah. We even have a

273
00:16:10.480 --> 00:16:16.150
mano CII server set up
on code better. So David

274
00:16:16.840 --> 00:16:20.050
is a big advocate of
trying to support the monitor

275
00:16:20.050 --> 00:16:22.420
community. And so he does
a lot of personal effort

276
00:16:22.450 --> 00:16:26.080
to ensure that the code,
the signal or code base

277
00:16:26.110 --> 00:16:30.160
will compile for use on
mono. So we don't ship

278
00:16:30.220 --> 00:16:33.460
a mano library. We don't
ship a DLL that will

279
00:16:33.460 --> 00:16:35.620
work on mano, but you
can go to the GitHub

280
00:16:35.620 --> 00:16:39.190
repository for signal. And there
is a make file and

281
00:16:39.190 --> 00:16:41.410
there is a mano solution
file. So you can open

282
00:16:41.410 --> 00:16:44.950
it and build it. Now,
there are things in signal

283
00:16:44.950 --> 00:16:48.130
R that that work really,
really well on windows server,

284
00:16:48.130 --> 00:16:51.610
2012, or on windows eight,
like, like web sockets. How

285
00:16:51.610 --> 00:16:55.090
do you like those things
up while still building and

286
00:16:55.090 --> 00:17:01.540
working on mano Abstractions? The
classic sort of suffer engineer's

287
00:17:01.540 --> 00:17:04.630
answer of any problem can
be solved with another layer

288
00:17:04.630 --> 00:17:07.750
of abstraction. So Olin kind
of encapsulates all of that

289
00:17:07.750 --> 00:17:11.500
for us. Essentially, we rely
on the Owen host to

290
00:17:11.500 --> 00:17:15.040
give us everything we need
in order to do, you

291
00:17:15.040 --> 00:17:17.140
know, to get an HTTP
request in order to tell

292
00:17:17.140 --> 00:17:20.020
the server to upgrade that
to web sockets. And if

293
00:17:20.020 --> 00:17:21.700
we're sitting on top of
a host that can't do

294
00:17:21.700 --> 00:17:24.940
that, then the Owen sort
of contract or the almond

295
00:17:24.940 --> 00:17:27.160
host will tell us that
web sockets is not available.

296
00:17:27.400 --> 00:17:30.130
And so we just, we
won't try it. And so

297
00:17:30.130 --> 00:17:32.500
basically, as I said, the
signal or call library has

298
00:17:32.500 --> 00:17:37.270
no concept of asp.net in
terms of asp.net core system

299
00:17:37.270 --> 00:17:40.270
web. It, it just deals
with, Hey, I have an

300
00:17:40.270 --> 00:17:43.450
I request and that I
request was populated by Owen.

301
00:17:43.900 --> 00:17:48.760
And that's all. So you
are actually relying on, on

302
00:17:48.760 --> 00:17:50.820
Owen to do that. And
even though Owen has a

303
00:17:50.820 --> 00:17:54.830
little layer of abstraction, it
doesn't affect your performance. Correct.

304
00:17:54.920 --> 00:17:58.220
So, I mean, obviously one
of our three major tenants

305
00:17:58.220 --> 00:18:00.080
with signal Aras performance, we
have sort of these three

306
00:18:00.080 --> 00:18:03.050
tenants, we try and do
all of our feature development

307
00:18:03.050 --> 00:18:06.590
round, which is simplicity, reach
and performance. And with a

308
00:18:06.590 --> 00:18:09.170
real time library, performance is
critical. And so we've been

309
00:18:09.170 --> 00:18:13.100
very careful to ensure that
anything we do here doesn't

310
00:18:13.100 --> 00:18:16.070
adversely affect performance in a
way that we think, you

311
00:18:16.070 --> 00:18:18.050
know, makes it not worthwhile.
So we get a lot

312
00:18:18.050 --> 00:18:21.410
of benefits by using Owen,
especially for people who are

313
00:18:21.410 --> 00:18:23.210
doing things like self host,
and they want to be

314
00:18:23.210 --> 00:18:26.120
able to run multiple frameworks
side by side. Perhaps they

315
00:18:26.120 --> 00:18:28.880
want to use Nancy signaler
and web API within the

316
00:18:28.880 --> 00:18:32.120
same process. Owen makes that
type of thing really, really

317
00:18:32.120 --> 00:18:35.510
easy. And you can even
share common code that runs

318
00:18:35.510 --> 00:18:38.390
in the Owen pipeline called
Owen middleware so that when

319
00:18:38.390 --> 00:18:40.940
a request comes into your
application, before it hits one

320
00:18:40.940 --> 00:18:43.100
of those three frameworks, you
can have common code that

321
00:18:43.100 --> 00:18:46.040
runs and even code that
runs on the way out

322
00:18:46.040 --> 00:18:48.740
as well, doing that with
asp.net. If for instance, you

323
00:18:48.740 --> 00:18:52.370
have an asp.net application, and
then you have Nancy running

324
00:18:52.370 --> 00:18:55.760
in that asp.net application. That's
a lot harder. So Owen

325
00:18:55.760 --> 00:18:57.950
really makes that type of
thing really simple, but performance

326
00:18:57.950 --> 00:18:59.930
is still very important to
us. And I'm very grateful.

327
00:18:59.930 --> 00:19:01.610
We have a great performance
team to help us with

328
00:19:01.610 --> 00:19:03.860
those tools. How do you,
how do you balance those

329
00:19:03.860 --> 00:19:07.550
things? Because from an open
source projects perspective that was

330
00:19:07.550 --> 00:19:10.340
done, you know, outside of
Microsoft, you could say those

331
00:19:10.340 --> 00:19:13.570
are really great goals. Like
we're going to work in,

332
00:19:13.570 --> 00:19:15.620
in mano, we're going to
support O N which means

333
00:19:15.620 --> 00:19:19.070
people can use web servers
that are not IIS or

334
00:19:19.070 --> 00:19:22.910
hosts, you know, or self
host, but then you move

335
00:19:22.910 --> 00:19:27.290
it into Microsoft wouldn't or
doesn't the evil overlords say,

336
00:19:27.530 --> 00:19:29.660
you know, those were really
lofty goals, but now you

337
00:19:29.660 --> 00:19:33.740
are now you're ours. And
that, that, that question comes

338
00:19:33.740 --> 00:19:36.200
up a bit. Even internally,
we talk about those type

339
00:19:36.200 --> 00:19:38.810
of things. Obviously at the
end of the day, our

340
00:19:38.810 --> 00:19:41.330
team is like a business
unit and we're making decisions

341
00:19:41.330 --> 00:19:44.270
and trade offs based on,
you know, perceived investment in

342
00:19:44.270 --> 00:19:47.240
return, those types of things.
But a lot of these

343
00:19:47.240 --> 00:19:49.100
things are customer driven. I
mean, we have a lot

344
00:19:49.100 --> 00:19:51.980
of asks from, and, you
know, we have internal customers

345
00:19:51.980 --> 00:19:54.560
as well, not just external
customers. We have other groups

346
00:19:54.560 --> 00:19:56.870
at Microsoft who are very
interested in this real time

347
00:19:56.870 --> 00:20:00.170
web aspect who want to
be able to use sort

348
00:20:00.170 --> 00:20:02.540
of the real time web
lobby that Microsoft introduces. And

349
00:20:02.540 --> 00:20:05.570
they have their own requirements
that maybe they don't host

350
00:20:05.570 --> 00:20:08.720
on IAS in their infrastructure
for whatever reason. But we

351
00:20:08.720 --> 00:20:10.940
have a lot of customers,
both internal and external who

352
00:20:10.940 --> 00:20:12.800
want to be able to
do self hosts, whether it's

353
00:20:12.800 --> 00:20:15.590
in a window service or
a console app, they want

354
00:20:15.590 --> 00:20:17.900
to be able to run
web API and signal lot

355
00:20:17.900 --> 00:20:22.040
together in the same process
without sort of traditional asp.net

356
00:20:22.040 --> 00:20:24.620
being involved. And so a
lot of it's driven by

357
00:20:24.620 --> 00:20:27.590
customer demand. This isn't really
just sort of lofty, Oh,

358
00:20:27.590 --> 00:20:30.320
we would like to get
to this eventual position where,

359
00:20:30.530 --> 00:20:33.470
you know, where like Ruby
or node or whatever it

360
00:20:33.470 --> 00:20:37.190
might be. We have real
customers asking real questions about

361
00:20:37.190 --> 00:20:40.400
how they can use our
stuff together. And Owen helps

362
00:20:40.400 --> 00:20:44.930
us solve quite a few
of those problems. Do you

363
00:20:44.930 --> 00:20:48.280
think that some point some
boss will decide that that's

364
00:20:48.280 --> 00:20:52.660
not in our best interests
or does it depend on

365
00:20:52.660 --> 00:20:54.840
the boss? I mean, like
I know Hunter, it was

366
00:20:54.840 --> 00:20:57.070
was are your, your boss
and my boss who we

367
00:20:57.070 --> 00:20:59.830
share, it seems pretty cool.
But if he gets run

368
00:20:59.830 --> 00:21:01.810
by a bus, if he
gets hit by a bus,

369
00:21:01.810 --> 00:21:06.720
somebody could, could change their
mind. Maybe I haven't really

370
00:21:06.720 --> 00:21:09.090
ever thought about that. So
the truth, I mean, Really

371
00:21:09.090 --> 00:21:11.730
I think about this stuff
all the time Seems to

372
00:21:11.730 --> 00:21:17.430
be extremely logical and how
they choose things. And we've

373
00:21:17.430 --> 00:21:18.960
been given. I mean, I
have to say we've been

374
00:21:18.960 --> 00:21:21.690
given quite a lot of
autonomy in the direction we're

375
00:21:21.690 --> 00:21:23.880
taking signaler. I think at
the end of the day,

376
00:21:24.390 --> 00:21:26.850
we all have common goals.
We're just trying to make

377
00:21:26.850 --> 00:21:30.330
our customers happy and we
want to build cool stuff.

378
00:21:30.720 --> 00:21:32.280
Yeah. But we want them
to do it on windows,

379
00:21:32.790 --> 00:21:37.520
right. Or at least at
Azure. Yes, absolutely. I mean,

380
00:21:37.530 --> 00:21:39.630
the end of the day,
we're part of the windows

381
00:21:39.630 --> 00:21:44.970
Azure group. And over time,
you know, we get measured

382
00:21:44.970 --> 00:21:48.360
to a certain extent by
how successful we can make

383
00:21:48.360 --> 00:21:51.720
the windows Azure platform, no
secret there. Right. We're a

384
00:21:51.720 --> 00:21:53.310
business unit. That's how we're
going to make our money.

385
00:21:56.070 --> 00:21:57.660
And so, you know, we,
we still, we have a

386
00:21:57.660 --> 00:22:00.450
lot of features that are,
that are geared around lighting

387
00:22:00.450 --> 00:22:03.780
up and sort of cloud
hosting scenarios, which, you know,

388
00:22:03.780 --> 00:22:05.970
sort of our scale out
features and things like that.

389
00:22:06.660 --> 00:22:10.650
But still, if people, if
customers are asking us saying,

390
00:22:10.650 --> 00:22:12.000
Hey, we want to be
able to be able to

391
00:22:12.000 --> 00:22:14.580
use these things together in
this way. And at the

392
00:22:14.580 --> 00:22:17.610
moment you're making it hard.
Well, we still want those

393
00:22:17.610 --> 00:22:19.770
customers to host in Azure.
You know, that that would

394
00:22:19.770 --> 00:22:23.810
be really good for us.
And so, you know, I

395
00:22:23.820 --> 00:22:25.920
don't see them as conflicting
interests, I guess is the

396
00:22:25.920 --> 00:22:28.080
point. I still, I still
think that anything we can

397
00:22:28.080 --> 00:22:32.520
do to make customers happy
using our libraries will ultimately

398
00:22:32.520 --> 00:22:35.790
India them to using other
parts of our stack. And

399
00:22:35.790 --> 00:22:37.800
if they don't, that doesn't
matter either because, you know,

400
00:22:37.800 --> 00:22:40.320
we still love people using
our libraries and they'll either

401
00:22:40.320 --> 00:22:42.270
be on windows or they'll
be using our tools or

402
00:22:42.270 --> 00:22:45.780
they'll be helping the community.
So there's always some benefit,

403
00:22:45.870 --> 00:22:50.970
even if it's not strictly
tangible. Okay. Well that makes

404
00:22:50.970 --> 00:22:53.970
sense. What kind of open
source things are you using

405
00:22:53.970 --> 00:22:56.340
or what kind of build
systems do you use? Like

406
00:22:56.340 --> 00:22:57.900
do you, do we use
team city or what are

407
00:22:57.900 --> 00:23:01.320
we doing? Yeah, that's a
great question. So we, we

408
00:23:01.320 --> 00:23:02.970
do use team city. We
have a couple of teams,

409
00:23:02.970 --> 00:23:05.400
city service. We have a
public team city server, which

410
00:23:05.400 --> 00:23:09.000
I maintain, which is up
at CEI dot <inaudible> dot

411
00:23:09.000 --> 00:23:10.830
net. And you can just
click on the login as

412
00:23:10.830 --> 00:23:14.070
gift link there, and that
runs out public CII service.

413
00:23:14.070 --> 00:23:17.040
So you can see the
status of the current build.

414
00:23:17.070 --> 00:23:19.080
We build the dev branch,
which is where we do

415
00:23:19.080 --> 00:23:21.900
our active development. And if
there is a release branch

416
00:23:21.960 --> 00:23:24.210
current, because we're actually preparing
for a release, then we'll

417
00:23:24.210 --> 00:23:26.940
be building that as well.
And we have a sort

418
00:23:26.940 --> 00:23:30.390
of a standard CGI build
that builds, you know, unit

419
00:23:30.390 --> 00:23:32.250
tests builds and does unit
tests. And we have a

420
00:23:32.250 --> 00:23:34.590
full bill, but does a
lot more of our test

421
00:23:34.590 --> 00:23:37.380
automation stuff, which is where
a lot more of our

422
00:23:37.380 --> 00:23:39.480
open source use as part
of the build process comes

423
00:23:39.480 --> 00:23:43.500
in. So we recently got
test swarm set up. Have

424
00:23:43.500 --> 00:23:46.010
you heard of this before?
Test swarm? No, it sounds

425
00:23:46.010 --> 00:23:50.830
Good though. All right. So
the test one was built

426
00:23:50.830 --> 00:23:54.820
by the jQuery team and
it's a library to help

427
00:23:54.850 --> 00:23:58.690
with distributed browser testing. So
the idea is if you

428
00:23:58.690 --> 00:24:02.350
have a JavaScript library or
basically anything, a webpage, if

429
00:24:02.350 --> 00:24:04.690
you, if you have a
set of tests that you

430
00:24:04.690 --> 00:24:08.890
can run by hitting a
URL, and you want to

431
00:24:09.490 --> 00:24:13.000
run that across lots of
different browsers, you need some

432
00:24:13.000 --> 00:24:15.880
type of harness to coordinate
that thing, right? You need

433
00:24:16.090 --> 00:24:18.940
something that defines what browser
is to run something that

434
00:24:18.940 --> 00:24:20.800
tracks, if the tests have
run or not, and what

435
00:24:20.800 --> 00:24:23.890
passed and what failed. And
that is test swarm. So

436
00:24:23.890 --> 00:24:27.670
we use test swarm in
conjunction with a browser stack.

437
00:24:27.800 --> 00:24:32.140
The browser stack is a
paid service, which is run@browserstack.com,

438
00:24:32.560 --> 00:24:37.120
which hosts a virtual machines
of browsers cross platforms. So

439
00:24:37.120 --> 00:24:40.540
they have iPad emulators, they
have Android phones. They have

440
00:24:40.540 --> 00:24:44.110
obviously windows, all browsers running
on windows, Linux, and Mac,

441
00:24:44.440 --> 00:24:47.470
and we pay them a
monthly fee. And then when

442
00:24:47.490 --> 00:24:49.690
they have an API, we
can use to sort of

443
00:24:49.930 --> 00:24:54.280
remotely drive these VMs, running
lots of different browsers to

444
00:24:54.280 --> 00:24:59.620
hit a specific deployment of
our tests, which are written

445
00:24:59.620 --> 00:25:02.440
in Q units. And Q
unit is another open source

446
00:25:02.440 --> 00:25:05.560
library from the jQuery team
for doing JavaScript unit testing.

447
00:25:05.830 --> 00:25:07.960
So we have these three
things working together. We have

448
00:25:08.560 --> 00:25:11.800
key unit, which we write
out JavaScript tests in order

449
00:25:11.800 --> 00:25:15.700
to test the signal, a
JavaScript client, we have BrowserStack,

450
00:25:15.700 --> 00:25:18.460
which is a paid service
that lets us have VMs

451
00:25:18.490 --> 00:25:20.680
to run, you know, lots
of different browsers. And then

452
00:25:20.680 --> 00:25:23.320
we have tests warm, which
has condoms, the Honda site

453
00:25:23.320 --> 00:25:25.300
coordinates all these things together.
So if you actually go

454
00:25:25.300 --> 00:25:31.090
up to test swarm.signaler.net, you
can actually see the, the

455
00:25:31.090 --> 00:25:33.970
jobs that are running in
our tests, one cloud, which

456
00:25:33.970 --> 00:25:35.350
is kinda cool. And you'll
see a whole bunch of

457
00:25:35.350 --> 00:25:37.480
browsers say, you can see
how many runs have been

458
00:25:37.480 --> 00:25:39.820
on each browser. And if
you drill into the projects

459
00:25:39.820 --> 00:25:41.410
menu and choose signal, or
you can actually see a

460
00:25:41.410 --> 00:25:43.840
matrix of all the tests
that are currently running and

461
00:25:43.840 --> 00:25:46.090
what their pass rates are.
So we recently got this

462
00:25:46.090 --> 00:25:48.820
set up. It actually requires
Linux. So we're actually running

463
00:25:49.210 --> 00:25:52.390
a, I think it's Python
on Linux with a bit

464
00:25:52.390 --> 00:25:57.820
of node to integrate test
warm Apache and the BrowserStack

465
00:25:57.820 --> 00:25:59.980
API. So we have that
running up in Azure on

466
00:25:59.980 --> 00:26:02.350
a Linux VM, and then
a boom and Ubuntu VM.

467
00:26:02.920 --> 00:26:05.950
And we basically publish jobs
to this test. One server

468
00:26:06.340 --> 00:26:08.980
from our team city build
script. So a lot of

469
00:26:08.980 --> 00:26:12.130
moving parts, but you know,
the outcome is that we

470
00:26:12.130 --> 00:26:16.000
have a really nice distributed
sort of test architecture for

471
00:26:16.000 --> 00:26:19.270
doing browser automation testing. Does
it kind of quote unquote,

472
00:26:19.270 --> 00:26:21.130
just work? I mean, it
sounds complicated. It sounds a

473
00:26:21.130 --> 00:26:24.250
little kind of Rube Goldberg,
but do you have to

474
00:26:24.250 --> 00:26:28.660
sweat it? I had read
about this thing maybe 18

475
00:26:28.660 --> 00:26:30.910
months ago, if you go
to a browser stack, there

476
00:26:30.910 --> 00:26:32.980
is a page there where
they there's actually a published

477
00:26:32.980 --> 00:26:35.110
white paper that someone on
the J crew team wrote

478
00:26:35.110 --> 00:26:38.980
about using the BrowserStack API
with tests, woman Q unit.

479
00:26:39.250 --> 00:26:41.200
And I was like, Oh,
that's amazing. And I always

480
00:26:41.200 --> 00:26:42.700
had that in the back
of my mind that when

481
00:26:42.700 --> 00:26:45.870
I got doing, when the
team needed to do sort

482
00:26:45.870 --> 00:26:48.390
of distributed browser testing, this
is what we do now.

483
00:26:48.390 --> 00:26:50.850
We do have some existing
tools within the asp.net team.

484
00:26:51.240 --> 00:26:53.310
Some of them are open
like the old, the lightweight

485
00:26:53.340 --> 00:26:57.780
test automation framework, but I
felt that this was a,

486
00:26:57.810 --> 00:27:02.040
a more complete and sort
of open testing infrastructure that

487
00:27:02.040 --> 00:27:04.950
I would really like open
source projects, like Sigma, which

488
00:27:04.950 --> 00:27:08.100
have a heavy browser dependency
to use. And so I

489
00:27:08.100 --> 00:27:10.590
kind of, I pushed this
quite hot internally and we've

490
00:27:10.590 --> 00:27:13.560
just recently got this set
up and we were lucky

491
00:27:13.560 --> 00:27:15.180
enough to have someone on
the team that has quite

492
00:27:15.180 --> 00:27:17.130
a bit of Linux experience.
And so he was able

493
00:27:17.130 --> 00:27:18.540
to get this up and
running within a couple of

494
00:27:18.540 --> 00:27:23.040
days using the, the, the
integration libraries that the J

495
00:27:23.040 --> 00:27:25.050
crew team has published and
a bit of the help

496
00:27:25.050 --> 00:27:27.360
that they've published as well.
So I wouldn't say it

497
00:27:27.360 --> 00:27:28.770
was, I mean, if I
had tried to do it

498
00:27:28.770 --> 00:27:32.010
personally, I know basically nothing
about Linux, so it would've

499
00:27:32.010 --> 00:27:33.930
been a little higher. I
would've had to learn, you

500
00:27:33.930 --> 00:27:35.730
know, how to set up
a one, two and how

501
00:27:35.730 --> 00:27:37.470
to remote in and do
all that type of stuff.

502
00:27:37.500 --> 00:27:39.030
But because we had someone
on the team who actually

503
00:27:39.030 --> 00:27:40.530
had a bit of Linux
experience, so it became quite

504
00:27:40.530 --> 00:27:43.580
a lot easier. It's just
an appliance, it just works.

505
00:27:44.060 --> 00:27:47.300
So this is, seems like
a pretty great, yeah. And

506
00:27:47.330 --> 00:27:49.280
when you do stuff like
this, does it infect the

507
00:27:49.280 --> 00:27:51.590
rest of the team? Like
if you have some successful

508
00:27:51.590 --> 00:27:54.200
service, whether it's running a
Boone too or not, it

509
00:27:54.200 --> 00:27:56.210
doesn't matter. It does. It
serves a purpose and it

510
00:27:56.210 --> 00:27:59.390
works great. Do, does do
other parts of the asp.net

511
00:27:59.390 --> 00:28:01.370
team say, Oh, I really
want to use that too.

512
00:28:02.090 --> 00:28:04.310
So that's a good question.
We have a really good

513
00:28:04.310 --> 00:28:07.730
culture of, of knowledge sharing
in the group, which we

514
00:28:07.730 --> 00:28:10.100
use a mechanism called Brown
bags, the Brown bags of

515
00:28:10.100 --> 00:28:13.010
these idea of a lunchtime
meeting, where you bring your

516
00:28:13.010 --> 00:28:15.590
lunch. And then over the
lunch hour, someone will sort

517
00:28:15.590 --> 00:28:18.620
of just do a very
casual demonstration of something they

518
00:28:18.620 --> 00:28:21.140
thought was cool. And so
we certainly plan on doing

519
00:28:21.140 --> 00:28:24.170
a Brown bag internally about
how we set up tests,

520
00:28:24.170 --> 00:28:27.560
warm with TeamCity and Q
unit and browser stack to

521
00:28:27.560 --> 00:28:32.090
get this really nice test
automation set up. So until

522
00:28:32.090 --> 00:28:34.250
that happens, we're probably not
going to see much leakage,

523
00:28:34.250 --> 00:28:36.140
but once that happens, I
wouldn't be surprised if other

524
00:28:36.140 --> 00:28:38.330
teams look at this and
go, Hey, this is something

525
00:28:38.330 --> 00:28:40.510
that we could probably benefit
from as well. Do you,

526
00:28:40.520 --> 00:28:42.620
do you spend a lot
of time talking to lawyers

527
00:28:42.620 --> 00:28:44.990
and convincing them that these
are all good ideas or

528
00:28:44.990 --> 00:28:46.910
do you just do it
and you count on your

529
00:28:46.910 --> 00:28:53.210
Missouri, You have a great
boss. You and I, so,

530
00:28:53.210 --> 00:28:55.190
as I said before, I
mean, there's a process I'm

531
00:28:55.190 --> 00:28:57.680
looking at, there's an internal
website I'm looking at right

532
00:28:57.680 --> 00:29:01.580
now, which sort of lists
all the requests I've made

533
00:29:02.030 --> 00:29:05.480
for use of open source
software for internal use. And

534
00:29:05.480 --> 00:29:07.190
so I can literally sort
of look at this list

535
00:29:07.190 --> 00:29:09.650
and say, Oh, well, I
put in a notification saying

536
00:29:09.650 --> 00:29:13.160
that we're using the Jacory
transform library. We're using jQuery

537
00:29:13.160 --> 00:29:16.130
cookie, we're using Jason two.
We're using test swarm. We're

538
00:29:16.130 --> 00:29:20.360
using the EMIS build community
tasks because the open source

539
00:29:20.360 --> 00:29:23.120
policy of a particular business
unit is that there are

540
00:29:23.120 --> 00:29:27.590
a number of pre-approved open
source licenses. And if you

541
00:29:27.590 --> 00:29:30.800
want to use an open
source library that is under

542
00:29:30.800 --> 00:29:33.470
that license, one of these
licenses, you have to just

543
00:29:33.470 --> 00:29:38.080
notify I'm using this particular
internal tool. And so we,

544
00:29:38.080 --> 00:29:39.950
you know, I was basically
every time we use anything,

545
00:29:39.950 --> 00:29:41.530
that's open source. I have
to go and create an

546
00:29:41.530 --> 00:29:43.900
entry in this list. And
that's essentially the process. I

547
00:29:43.900 --> 00:29:46.630
don't have to worry about
anything else. Some things like

548
00:29:46.780 --> 00:29:49.330
Linux weren't on that list.
And in that case, I

549
00:29:49.330 --> 00:29:51.640
had to go up and
sort of get approval through

550
00:29:51.640 --> 00:29:53.590
my management chain, but that
wasn't much of an issue.

551
00:29:54.210 --> 00:29:57.060
Okay. Well, that's, that's nice.
The idea that, that if

552
00:29:57.060 --> 00:30:00.690
it's under this license, just
FYI makes things a lot

553
00:30:00.690 --> 00:30:04.920
simpler. We need to make
that like throughout Microsoft, there's

554
00:30:04.920 --> 00:30:06.480
so many other teams where
it's like, Oh, I want

555
00:30:06.480 --> 00:30:09.450
to use food dot JS.
And you know, I need

556
00:30:09.450 --> 00:30:11.040
to write a 12 page
paper about it to tell

557
00:30:11.040 --> 00:30:15.330
the lawyers. Yeah, I can't
speak for other teams, obviously.

558
00:30:15.330 --> 00:30:19.440
I mean, every, every business
unit I think has different

559
00:30:20.100 --> 00:30:23.190
guidelines on open source use,
but it seems that the

560
00:30:23.190 --> 00:30:25.860
wheels are turning such that
there's becoming a lot more

561
00:30:26.280 --> 00:30:28.590
common policy. But at the
end of the day, the

562
00:30:28.590 --> 00:30:31.260
advice internally is always, you
know, speak to your LCA

563
00:30:31.260 --> 00:30:36.000
representative. I wonder, do you
think it's Guthrie? Like why

564
00:30:36.000 --> 00:30:40.140
is our org so into
this, like, I just feel

565
00:30:40.140 --> 00:30:42.600
like I'm a very happy
with the way open source

566
00:30:42.600 --> 00:30:45.870
has gone. I mean, since
the last five years, you

567
00:30:45.870 --> 00:30:47.790
know, I would tell people
that I went to Microsoft

568
00:30:47.790 --> 00:30:50.460
to work on open source
and we continue to work

569
00:30:50.460 --> 00:30:53.970
on open source and it's
working very well, but there's

570
00:30:53.970 --> 00:30:59.400
still all these kind of
nightmare discussions about other organizations.

571
00:30:59.400 --> 00:31:02.850
It just doesn't work smoothly.
I mean, executive air cover

572
00:31:02.850 --> 00:31:05.640
is helpful, but I'm trying
to figure out how we

573
00:31:05.640 --> 00:31:09.390
can get other organizations to
get it. I think, I

574
00:31:09.390 --> 00:31:13.500
think thinking back it's like,
why it's the case and

575
00:31:13.500 --> 00:31:19.860
what happened? Because we shipped
open source libraries with our

576
00:31:19.860 --> 00:31:22.260
product. Like when we made
the decision to ship jQuery

577
00:31:22.290 --> 00:31:25.770
with our product, I think
that created a whole bunch

578
00:31:25.770 --> 00:31:29.310
of groundwork that just had
to be completed by Al

579
00:31:29.520 --> 00:31:31.320
sort of legal department in
order to make that a

580
00:31:31.320 --> 00:31:34.560
reality. And every time we
said, okay, well that worked.

581
00:31:34.560 --> 00:31:35.700
I mean, that was a
lot of work. It wasn't

582
00:31:35.700 --> 00:31:37.770
something that we just decided.
And it happened overnight. There

583
00:31:37.770 --> 00:31:39.150
was a lot of legal
work that had to happen.

584
00:31:39.570 --> 00:31:42.030
And then with every new
library that we decided we

585
00:31:42.030 --> 00:31:46.620
wanted to reship without templates,
we had to go through

586
00:31:46.620 --> 00:31:49.500
and, you know, refine that
work, perhaps change the rules

587
00:31:49.500 --> 00:31:51.930
and set up more process.
And because we've been through

588
00:31:51.930 --> 00:31:53.910
that process time and time
again, we had our have

589
00:31:53.910 --> 00:31:56.370
a, you know, a really
good basis and understanding about

590
00:31:56.370 --> 00:31:59.220
the framework through which we
can use open source in

591
00:31:59.220 --> 00:32:03.480
this division. Now, other business
units, perhaps haven't been through

592
00:32:03.480 --> 00:32:06.630
that they haven't redistributed opensource
software before. So maybe that's

593
00:32:06.630 --> 00:32:09.150
one of the reasons we
have a perceived headstart in

594
00:32:09.150 --> 00:32:13.800
this area. I'm not sure.
Yeah. That's a good question.

595
00:32:13.800 --> 00:32:16.380
I don't know, but I
think it also is us

596
00:32:16.380 --> 00:32:19.560
pushing, right? I mean, you
and me and Mads and

597
00:32:19.560 --> 00:32:22.560
Phil hack and all the
different people in the organization

598
00:32:22.560 --> 00:32:25.440
that just dig open source.
For some reason, we got

599
00:32:25.440 --> 00:32:30.210
ourselves into a situation where
we had, you know, majority

600
00:32:30.210 --> 00:32:32.550
of people who thought this
was important. So the bosses

601
00:32:32.550 --> 00:32:38.230
were hearing it at like
every minute, right? The, the,

602
00:32:38.230 --> 00:32:45.470
the constant couldn't have heard.
No, no, well, this is

603
00:32:45.470 --> 00:32:48.050
cool. I'm glad that you're
able to do this. And

604
00:32:48.050 --> 00:32:51.170
that you're able to make
open source happen, both in

605
00:32:51.170 --> 00:32:53.810
the consumption aspects of opensource
and the production aspects of

606
00:32:53.810 --> 00:32:56.590
open source. And now, you
know, like you said, I

607
00:32:56.620 --> 00:33:01.040
know we've shipped NBC and
that a lot of structure

608
00:33:01.040 --> 00:33:02.630
was put in place to
make that happen. And now

609
00:33:02.630 --> 00:33:06.440
we're, we're shipping signal R
and were using things like

610
00:33:06.440 --> 00:33:08.960
knockout. It, that just means
that whatever, the next thing

611
00:33:08.960 --> 00:33:11.030
that we do in open
source, whatever that might be

612
00:33:11.030 --> 00:33:13.100
is just going to be
that much smoother of a

613
00:33:13.100 --> 00:33:18.110
process. Exactly. Cool. Well, thanks
for talking to me today.

614
00:33:18.230 --> 00:33:21.290
This has been another episode
of Hanselminutes and we'll see

615
00:33:21.290 --> 00:33:22.280
you again next week.

