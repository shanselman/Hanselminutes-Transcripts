WEBVTT FILE

1
00:00:12.750 --> 00:00:17.780
From Hansel minutes.com. It's Hanselman.
It's a weekly discussion with

2
00:00:17.780 --> 00:00:23.600
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:23.600 --> 00:00:27.020
is Jeff May seal like filling
in for a Lawrence Ryan announcing

4
00:00:27.020 --> 00:00:33.920
show. Number 23 recorded Wednesday,
July 5th, 2006. Support for Hansel minutes

5
00:00:33.920 --> 00:00:37.160
is provided by code Smith
tools, makers of code Smith,

6
00:00:37.580 --> 00:00:42.530
an extensible template based code
generator for.net. And now Hanselman

7
00:00:42.530 --> 00:00:46.580
its listeners. Get $100 off
COVID Smith professional with coupon

8
00:00:46.580 --> 00:00:52.550
code H M 100 online
F code Smith tools.com. Support

9
00:00:52.550 --> 00:00:56.510
is also provided by Peter
bloom.com. Start with better controls

10
00:00:56.630 --> 00:01:07.760
finish with better sites online@peterblumdotcomandby.net
developers journal the world's leading.net

11
00:01:07.760 --> 00:01:14.600
developer magazine online at www
dot <inaudible> dot com. In

12
00:01:14.600 --> 00:01:17.900
this episode, Scott talks about
the scrum method of project

13
00:01:17.900 --> 00:01:24.770
management. <inaudible> Hi, this is
Carl Franklin, and you're listening to

14
00:01:24.770 --> 00:01:28.400
Hansel minutes. I'm talking with
Scott Hanselman. Of course, as

15
00:01:28.400 --> 00:01:30.110
I always do this week,
Scotty, we're going to be

16
00:01:30.110 --> 00:01:34.880
talking about scrums at, right.
Absolutely. What is scrum sounds

17
00:01:34.880 --> 00:01:39.230
like a dirty word. It's
actually a rugby term. That

18
00:01:39.230 --> 00:01:42.830
is the thing in rugby
that happens just after there's

19
00:01:42.830 --> 00:01:44.900
a penalty, right? It's when
all the guys get together

20
00:01:44.900 --> 00:01:49.460
and huddle, but it's turned
into an agile method for

21
00:01:49.460 --> 00:01:55.160
project management and for, for
developers to manage software. And

22
00:01:55.250 --> 00:01:56.660
it was, it started in
like, I think it was

23
00:01:56.660 --> 00:02:00.380
like 93. There was a,
there was a reason he

24
00:02:00.380 --> 00:02:02.990
mentioned the first time in
86, it was applied and

25
00:02:03.290 --> 00:02:06.920
in 93, 94 by a
couple of smarter guys than

26
00:02:06.920 --> 00:02:11.990
myself, but it's become a
really nice lightweight project management

27
00:02:11.990 --> 00:02:15.770
methodology, what they would call
an agile methodology and just

28
00:02:15.770 --> 00:02:19.280
the last couple of years,
because it, it doesn't get

29
00:02:19.280 --> 00:02:21.620
in the way of what
you're trying to accomplish and

30
00:02:22.610 --> 00:02:24.920
we're using it at Karelian
right now. It's, it's, it's

31
00:02:24.920 --> 00:02:27.200
gone from being a grass
roots thing to being a

32
00:02:27.200 --> 00:02:29.870
proven, you know, it ships
software. And now it's a

33
00:02:29.870 --> 00:02:32.510
mandate. This is scrum is
how we do the work.

34
00:02:32.580 --> 00:02:36.800
So, so is this basically
everybody gets together and decides

35
00:02:36.800 --> 00:02:39.440
how to prioritize bugs and
assign them to people. And

36
00:02:39.930 --> 00:02:42.020
is it, is there a
much more to it than

37
00:02:42.020 --> 00:02:45.170
that? Well, it's, it's a,
it's a little more formalized

38
00:02:45.170 --> 00:02:49.670
than that. So scrum is
intending to assume that software

39
00:02:49.670 --> 00:02:53.210
development itself, as a process
is complicated and unpredictable. And

40
00:02:53.210 --> 00:02:56.210
since requirements aren't really baked
at the beginning of the

41
00:02:56.210 --> 00:03:00.400
process requirements change as the
process continues, the process itself

42
00:03:00.400 --> 00:03:04.780
will be unpredictable with these
different, you know, changing requirements.

43
00:03:04.780 --> 00:03:07.480
And then when you've got
new tools coming in, the,

44
00:03:07.480 --> 00:03:10.480
the sands are shifting underneath
the entire project. So it's

45
00:03:10.480 --> 00:03:14.170
a project management methodology that
understands that since everything is

46
00:03:14.170 --> 00:03:16.600
changing, how do you, how
do you handle it? Okay.

47
00:03:16.620 --> 00:03:18.100
It's almost like one of
those print, how and a

48
00:03:18.100 --> 00:03:20.650
progress bar. You never really
know when the progress bar

49
00:03:20.650 --> 00:03:22.450
is going to hit a
hundred percent, cause you never

50
00:03:22.450 --> 00:03:24.160
really know when you're done,
right? So you end up

51
00:03:24.220 --> 00:03:25.990
with a progress bar that
gets up to 99, pretty

52
00:03:25.990 --> 00:03:28.600
useless and just sits there.
And that's what happens on

53
00:03:28.600 --> 00:03:31.720
a lot of projects. They
basically, everything works nicely until

54
00:03:31.720 --> 00:03:34.690
99%. And then you sit
there at 99% for months

55
00:03:35.440 --> 00:03:39.350
and then you ship late.
So if you have a

56
00:03:39.850 --> 00:03:42.700
flexible deliverables, you have a
small team. How do you,

57
00:03:42.730 --> 00:03:43.930
how do you make this?
How do you make this

58
00:03:43.930 --> 00:03:47.770
happen? So the idea is
that you start with a

59
00:03:47.800 --> 00:03:51.010
backlog, a backlog of items
that, that you need to

60
00:03:51.010 --> 00:03:53.710
get done. This is the,
all of the items. And

61
00:03:53.710 --> 00:03:56.590
then this is a, this
backlog is a living backlog.

62
00:03:57.190 --> 00:04:00.030
This is something that the
product owner handles. So at

63
00:04:00.040 --> 00:04:02.080
Kirlian, for example, we might
have a product guy. He's

64
00:04:02.080 --> 00:04:05.320
not a technical PM, like
in the Microsoft sense, but

65
00:04:05.320 --> 00:04:06.850
he's a person who says,
I need to get this

66
00:04:06.850 --> 00:04:11.230
work done in this release.
So there's the overall product

67
00:04:11.530 --> 00:04:15.910
like, well, what's, what's the
podcasting thing that you work

68
00:04:15.910 --> 00:04:20.170
on. Plop catcher. Okay. So
prob catcher is the product.

69
00:04:20.590 --> 00:04:22.810
And let's say that there
are some number of releases

70
00:04:22.810 --> 00:04:24.880
of pop catcher. You probably
have an idea all the

71
00:04:24.880 --> 00:04:27.730
way up until like version
five, what you want in

72
00:04:27.730 --> 00:04:30.190
pop catcher. You have every
single feature, every idea that

73
00:04:30.190 --> 00:04:33.100
you've ever thought of every
cool thing you could ever

74
00:04:33.100 --> 00:04:36.520
do to pop catcher. Right?
That's the backlog. Yeah. Okay.

75
00:04:37.060 --> 00:04:39.570
So then you take that
living backlog of items, everything

76
00:04:39.590 --> 00:04:41.230
you want to do in
pop culture from now, as

77
00:04:41.230 --> 00:04:43.540
far as you can think
of items, right? Almost like

78
00:04:43.540 --> 00:04:46.060
in a getting things done,
you just drop everything into

79
00:04:46.060 --> 00:04:49.690
a pile. Then you, as
the product owner prioritize it

80
00:04:49.720 --> 00:04:51.190
and you can actually do
this. Even though you're one

81
00:04:51.190 --> 00:04:54.940
person on one project with
a team of one, you

82
00:04:54.940 --> 00:04:56.950
can do scrum. So you
make this living backlog of

83
00:04:56.950 --> 00:05:00.670
items, you prioritize them. And
then you decide that I

84
00:05:00.670 --> 00:05:03.430
want to have these items
in a release. So I

85
00:05:03.430 --> 00:05:05.590
pick, you know, 20 items
or some number of items

86
00:05:05.590 --> 00:05:07.840
of backlog within that release.
And all of these aren't

87
00:05:08.020 --> 00:05:12.790
necessarily bugs. These are features,
right? Future features, a backlog

88
00:05:12.820 --> 00:05:15.370
item could be a feature.
It could be a bug,

89
00:05:16.510 --> 00:05:17.920
but I think a feature
is probably a good way

90
00:05:17.920 --> 00:05:20.470
to put it. Yeah. A
backlog item is something that

91
00:05:20.470 --> 00:05:22.480
is like a molecule that
can be broken up into

92
00:05:22.480 --> 00:05:25.390
smaller atoms. Okay. So you're
going to take a feature

93
00:05:25.390 --> 00:05:28.480
for a, excuse me, a
backlog item for pop catcher

94
00:05:28.480 --> 00:05:33.070
might be support BitTorrent. Right?
Right. It didn't before. And

95
00:05:33.070 --> 00:05:35.620
now it does. So support
BitTorrent would be a backlog

96
00:05:35.620 --> 00:05:40.060
item, a loaded word. Yeah.
But there's a whole series

97
00:05:40.060 --> 00:05:44.050
of tasks under there. Right?
A task might be research,

98
00:05:44.290 --> 00:05:48.850
BitTorrent, libraries, plugin, bit torn
interface, you know, make BitTorrent

99
00:05:48.850 --> 00:05:53.980
configurable. All of these things
are different tasks. A backlog

100
00:05:54.010 --> 00:05:57.740
item is usually expressed in
terms of days. Like it

101
00:05:57.740 --> 00:06:02.420
might take me six days.
Well, a task underneath that

102
00:06:02.420 --> 00:06:04.340
might be in terms of
hours, like it'll take me

103
00:06:04.340 --> 00:06:05.870
four hours to do this
and eight hours to do

104
00:06:05.870 --> 00:06:09.140
that. Okay. And the backlog
items, total effort is the

105
00:06:09.140 --> 00:06:11.390
sum of all of its
sub tasks. Okay. So the

106
00:06:11.390 --> 00:06:13.850
more detailed task you put
in and the more refined

107
00:06:13.850 --> 00:06:16.490
those tasks are down to
about the two to four

108
00:06:16.490 --> 00:06:18.500
hour level, you roll that
up and you can say,

109
00:06:18.500 --> 00:06:21.350
well, this feature is going
to cost me one man

110
00:06:21.350 --> 00:06:24.620
month or two man weeks
or whatever you come up

111
00:06:24.620 --> 00:06:29.030
with. And by, and then
people pull from that list

112
00:06:29.030 --> 00:06:31.610
of tasks. So the feature
owner is just saying, I

113
00:06:31.610 --> 00:06:33.440
want this, I want that.
I want bit torn. I

114
00:06:33.440 --> 00:06:37.040
want configurability. I want a
pretty icon. And the developers

115
00:06:37.040 --> 00:06:40.490
are pulling from this queue
of tasks, much like they

116
00:06:40.490 --> 00:06:42.740
would from a queue full
of bugs. So whether it's

117
00:06:42.740 --> 00:06:44.750
a bug or whether it's
a new task, it's in

118
00:06:44.750 --> 00:06:48.560
this queue of items and
at the morning or afternoon,

119
00:06:48.560 --> 00:06:51.770
scrum at the daily scrums,
the thing that's fundamental to

120
00:06:51.770 --> 00:06:54.770
scrum is this notion of
a daily, the daily scrum,

121
00:06:55.130 --> 00:06:57.710
we all get together at
this scrum, after we've done

122
00:06:57.710 --> 00:07:01.760
all of our release planning.
And we say, what is

123
00:07:01.760 --> 00:07:05.060
it that I've done? What
is it? That is in

124
00:07:05.060 --> 00:07:09.140
my way and what do
I need to do before

125
00:07:09.140 --> 00:07:13.570
the next meeting Sounds just
like a simple triage thing.

126
00:07:13.570 --> 00:07:15.070
I mean, this is the
kind of stuff that I

127
00:07:15.070 --> 00:07:17.110
used to do. You know,
when I was in the,

128
00:07:17.230 --> 00:07:20.770
in the software business long,
long time ago, I mean,

129
00:07:20.770 --> 00:07:22.780
we never called it scrum,
but I mean, you're just,

130
00:07:22.780 --> 00:07:28.150
you're really basically describing simple
triage meetings so far. Yeah.

131
00:07:28.210 --> 00:07:30.100
One of the things, yeah,
absolutely. One of the things

132
00:07:30.100 --> 00:07:33.160
about any methodology is that,
and with object oriented programming

133
00:07:33.160 --> 00:07:36.970
in general, is that labeling
something, allows everyone to agree

134
00:07:36.970 --> 00:07:40.690
on what it is. Yeah.
Formalizes the protocol. Exactly. It

135
00:07:40.690 --> 00:07:44.110
allows people to formalize a
protocol. So when we have

136
00:07:44.110 --> 00:07:47.500
an understanding of our daily
standup or triage or scrum,

137
00:07:47.500 --> 00:07:49.300
whatever you want to call
it, right? These are the

138
00:07:49.300 --> 00:07:52.930
rules. It's less than 15
minutes. We go around the,

139
00:07:52.990 --> 00:07:55.600
around the room. What have
you done? What will you

140
00:07:55.600 --> 00:07:58.090
do? And what's in your
way. Okay. And that's it.

141
00:07:58.810 --> 00:08:02.500
Anything that comes up like
on the fly design meetings

142
00:08:02.500 --> 00:08:05.620
or I'm, you know, having
an HR problem or my

143
00:08:05.620 --> 00:08:08.230
desk is uncomfortable, has nothing
to do with that meeting.

144
00:08:08.260 --> 00:08:12.790
Right? Those are taken offline
because developers don't like meetings.

145
00:08:12.850 --> 00:08:16.270
So strum recognizes developers. Don't
like meetings. And the, the

146
00:08:16.290 --> 00:08:21.310
scrum master, the scrum master
is the person who is

147
00:08:22.480 --> 00:08:26.980
basically keeping track of the
process. The scrum master maintains

148
00:08:26.980 --> 00:08:28.960
the list of what's going
on. What people have been

149
00:08:28.960 --> 00:08:31.570
working on and their job
is to remove all the

150
00:08:31.570 --> 00:08:34.480
impediments. And so an impediment
might mean, I need a

151
00:08:34.480 --> 00:08:37.270
piece of hardware. They're not
necessarily the leader of the

152
00:08:37.270 --> 00:08:39.790
team, but they're that, that
buffer that sits between the

153
00:08:39.790 --> 00:08:44.530
team and anything that's causing
them pain. Right. So our

154
00:08:44.530 --> 00:08:47.620
scrum master has done stuff
like bias soda and our

155
00:08:47.620 --> 00:08:50.590
scrum master has made sure
we have licenses to certain

156
00:08:50.590 --> 00:08:54.070
pieces of software or installed
MSDN on the server. Yeah.

157
00:08:54.070 --> 00:08:58.020
The groundwork. Well, yeah, they
get the impediments out of

158
00:08:58.020 --> 00:09:00.870
the way that we call
them a productivity buffer. Right.

159
00:09:01.080 --> 00:09:04.170
And so let's start, let's
just refresh for a second.

160
00:09:04.170 --> 00:09:08.460
So we've got our backlog
of features. That's broken down

161
00:09:08.460 --> 00:09:11.220
into these tasks. And then
we say, we do this

162
00:09:11.220 --> 00:09:13.020
in terms of sprints. So
we're going to have a

163
00:09:13.020 --> 00:09:16.110
sprint it's usually a month
long. Sometimes it can be

164
00:09:16.110 --> 00:09:18.390
a couple of weeks. We'd
like to do sprints between

165
00:09:18.390 --> 00:09:21.780
three and four weeks long.
So for this release of

166
00:09:21.780 --> 00:09:25.380
crop catcher, we'll say that
we'll have three sprints. So

167
00:09:25.380 --> 00:09:27.660
it's January. We're going to
come out with pop catcher

168
00:09:27.690 --> 00:09:29.880
April 1st. So we're going to
have a three month release

169
00:09:29.880 --> 00:09:34.920
cycle. We'll have three sprints
one month each. And this

170
00:09:34.920 --> 00:09:37.740
is important at the end
of each sprint, we do

171
00:09:37.740 --> 00:09:41.670
a customer demo. So who's
the customer, they're the guy

172
00:09:41.670 --> 00:09:45.270
who owns the backlog items.
And that's where the customer

173
00:09:45.270 --> 00:09:47.400
gets to see this stuff.
See, what's going on. Say,

174
00:09:47.400 --> 00:09:49.500
I like this. I don't
like that. This is typically

175
00:09:49.500 --> 00:09:52.080
where requirements change. And here's
the part that I think

176
00:09:52.080 --> 00:09:54.180
is cool and is a
little more formalized and maybe

177
00:09:54.180 --> 00:09:56.370
just getting together and figuring
out, Hey guys, what are

178
00:09:56.370 --> 00:10:00.510
we going to do? Okay.
It is that there is

179
00:10:00.510 --> 00:10:02.880
only so much time and
it is finite. It is

180
00:10:02.880 --> 00:10:06.480
known. Right. Right. And because
we're not keeping track necessarily

181
00:10:06.480 --> 00:10:09.270
of what people have got
done as we are keeping

182
00:10:09.270 --> 00:10:12.090
track of how much they
have left to do. Yeah.

183
00:10:12.990 --> 00:10:14.580
So I get into more,
like, let's say it's Monday

184
00:10:14.580 --> 00:10:16.320
morning, I have eight hours
of work to do on

185
00:10:16.320 --> 00:10:19.620
the pop catcher BitTorrent stuff.
Now it's Tuesday morning. I

186
00:10:19.620 --> 00:10:22.380
have six hours. It's obvious
I can do the math.

187
00:10:22.380 --> 00:10:24.270
It took, I got two
hours of work done. Other

188
00:10:24.270 --> 00:10:26.910
things may have taken up
my time, whether or not

189
00:10:26.910 --> 00:10:28.650
I got two hours of
work done. Doesn't change the

190
00:10:28.650 --> 00:10:32.160
fact that I've got six
hours left. So as we

191
00:10:32.160 --> 00:10:33.810
get towards the end of
the sprint, this is the

192
00:10:33.810 --> 00:10:36.060
opportunity for the product owner
to say, wow, I'm going

193
00:10:36.060 --> 00:10:39.570
to have to drop another
feature lower in the priority.

194
00:10:39.600 --> 00:10:41.100
If I'm going to get
this thing done that I

195
00:10:41.100 --> 00:10:43.730
need to get done. So
it isn't just a agile.

196
00:10:43.760 --> 00:10:45.920
Yeah. I guess that's a
little bit different from what

197
00:10:45.920 --> 00:10:47.840
we used to do. We
just used to go through

198
00:10:47.840 --> 00:10:51.590
a list of bugs and
features and, you know, figure

199
00:10:51.590 --> 00:10:55.220
out how long it's going
to take and who gets

200
00:10:55.220 --> 00:10:57.500
it. And it just goes
into a bin and there

201
00:10:57.500 --> 00:10:59.780
isn't really any, I mean,
we have a PR we

202
00:10:59.780 --> 00:11:02.150
had a priority level, but
it just goes into an

203
00:11:02.150 --> 00:11:05.390
inbox basically. And then you
just plow through those things

204
00:11:06.050 --> 00:11:09.650
within the release Inbox, in
this instance would be assigned

205
00:11:09.680 --> 00:11:12.680
a task that the developers
assigned to himself. Yeah. So

206
00:11:12.770 --> 00:11:15.440
typically before each sprint, we
do a splint, a sprint

207
00:11:15.470 --> 00:11:17.690
planning session. We go and
we say, all right, here's

208
00:11:17.690 --> 00:11:19.100
what we're gonna try to
get done in the sprint.

209
00:11:19.340 --> 00:11:22.190
And we never assign more
tasks than there are hours

210
00:11:22.190 --> 00:11:25.550
and people, right? So maximally
here's how much stuff we

211
00:11:25.550 --> 00:11:27.770
would get done. We have
to go and develop the

212
00:11:27.770 --> 00:11:29.780
sprint, decide what we're going
to do. And then people

213
00:11:29.780 --> 00:11:37.100
start assigning task estimates based
on themselves. Right? So this

214
00:11:37.100 --> 00:11:39.020
is where Travis elegant. I
used to get in these

215
00:11:39.020 --> 00:11:40.820
jokes about Hansel minutes. I
used to say, Oh, that'll

216
00:11:40.820 --> 00:11:42.800
take 20 minutes. And he'll
say, no, that's BS. It'll

217
00:11:42.800 --> 00:11:46.640
take 20 Hanselman. You'll have
it in three hours. Right?

218
00:11:47.360 --> 00:11:50.420
So everyone's going to estimate
something different. So in the

219
00:11:50.420 --> 00:11:52.580
sprint planning, we kind of
work out together. Well, this

220
00:11:52.580 --> 00:11:54.970
guy's really optimized to do
that, but this other guy

221
00:11:54.970 --> 00:11:57.610
wants to learn on that.
Well, and she wants to

222
00:11:57.610 --> 00:11:59.440
play with this. So this
is how we're going to

223
00:12:00.040 --> 00:12:03.580
break the workup. This portion
of Hanselman. This is brought

224
00:12:03.580 --> 00:12:06.820
to you by COVID Smith
tools, the most powerful cogeneration

225
00:12:06.820 --> 00:12:09.910
tool on the market with
features such as a template

226
00:12:09.910 --> 00:12:15.220
based cogeneration, a rich integrated
template development environment, including statement

227
00:12:15.220 --> 00:12:20.110
completion and a highly extensible
metadata system. That includes database,

228
00:12:20.110 --> 00:12:23.880
schema, XML, and many other
sources. And now handsome. And

229
00:12:23.880 --> 00:12:26.020
its listeners can get a
hundred dollars off code Smith

230
00:12:26.020 --> 00:12:30.160
professional with coupon code H
M 100 and just go

231
00:12:30.160 --> 00:12:35.800
online to www.covidsmithtools.com. And now
let's get back to Hanselman.

232
00:12:45.630 --> 00:12:48.060
So when, when a, when
a team gets together and

233
00:12:48.060 --> 00:12:51.490
starts assigning these different items,
they don't, they don't bite

234
00:12:51.510 --> 00:12:53.880
off more than they can
chew. Right? We recognize that

235
00:12:54.030 --> 00:12:56.250
in a 40 hour work
week, about 32 hours of

236
00:12:56.250 --> 00:12:59.700
that is going to be
actual development. Time meetings happen

237
00:12:59.700 --> 00:13:03.690
life's happen. Bathroom breaks, life
is life. So there isn't

238
00:13:03.690 --> 00:13:05.490
an unreasonable sense that we're
going to get this done.

239
00:13:06.450 --> 00:13:10.140
And if the, if the
customer, the customer was in

240
00:13:10.140 --> 00:13:12.870
charge of the backlog items,
who's watching the sprint happen,

241
00:13:13.320 --> 00:13:16.440
has an understanding of how
much work can get done.

242
00:13:16.440 --> 00:13:18.720
You have a much more
realistic expectation on the part

243
00:13:18.720 --> 00:13:21.420
of the customer as to
how much is really going

244
00:13:21.420 --> 00:13:24.480
to accomplish. And you can
get some really great charting

245
00:13:24.980 --> 00:13:27.990
of what's going to happen
in the future with what's

246
00:13:27.990 --> 00:13:30.510
called a burn down chart.
You can see an example

247
00:13:30.510 --> 00:13:33.150
of a burn down chart
at shrink stir slash G

248
00:13:33.150 --> 00:13:37.650
F five, and a burn
down chart shows you how

249
00:13:37.650 --> 00:13:41.010
much work you have accomplished.
And it gives you a

250
00:13:41.010 --> 00:13:44.170
sense of velocity. And this
is really interesting after your

251
00:13:44.190 --> 00:13:46.530
couple of weeks into it,
you can see, well, you

252
00:13:46.530 --> 00:13:49.140
know, we're really getting 35
hours a week work done,

253
00:13:49.200 --> 00:13:52.590
or wow, we're consistently getting
20 hours a week. Why

254
00:13:52.590 --> 00:13:54.510
is that? But what's cool
is if you take that

255
00:13:54.510 --> 00:13:58.080
sense of velocity and you
draw a line, a trajectory

256
00:13:58.380 --> 00:14:00.630
with the amount of work
left, as you always know,

257
00:14:00.630 --> 00:14:02.220
right. We set up at
the beginning of the sprint,

258
00:14:02.220 --> 00:14:05.700
there's this much work and
darn it. If they don't

259
00:14:05.700 --> 00:14:07.620
draw a line and give
you the day you'll be

260
00:14:07.620 --> 00:14:10.830
done. Wow. And that's like
that, it's actually a progress

261
00:14:10.830 --> 00:14:13.860
bar. That's telling you at
this rate, we'll be done

262
00:14:14.010 --> 00:14:17.070
here. Yeah. That's great. And
that adjust as you get,

263
00:14:17.490 --> 00:14:19.740
as you get it. And
then what happens is you

264
00:14:19.740 --> 00:14:23.910
can adjust the trajectory of
that line by removing features.

265
00:14:24.000 --> 00:14:26.130
If there's less work to
do, I can pull the

266
00:14:26.130 --> 00:14:28.710
data in. And I imagine
the more that you use

267
00:14:28.710 --> 00:14:32.790
this methodology, the more in
tune you become with the,

268
00:14:32.820 --> 00:14:35.310
you know, the slop factors
and stuff like that. So

269
00:14:35.310 --> 00:14:37.830
you can, and teams start
to understand each other and

270
00:14:37.830 --> 00:14:39.620
they start to realize, Oh,
if you want UI done,

271
00:14:39.630 --> 00:14:41.550
give it to Fred because
he'll, he'll, he'll make that

272
00:14:41.550 --> 00:14:46.740
happen. And also the, the
formalization of a task also

273
00:14:46.740 --> 00:14:50.010
allows you to, while you're
doing that formalized documentation and

274
00:14:50.010 --> 00:14:53.300
testing. So we have this
methodology that we have added

275
00:14:53.300 --> 00:14:56.870
called, done is done. The
guy at our company called

276
00:14:56.870 --> 00:14:59.840
Brian, named Brian. When time
has said, something is done,

277
00:14:59.870 --> 00:15:04.520
when it has a test,
has documentation. Compiles is running

278
00:15:04.520 --> 00:15:07.640
on the build server. Otherwise
it's not done because there's

279
00:15:07.640 --> 00:15:10.340
a certain sense of completion
once you finish the feature.

280
00:15:10.730 --> 00:15:13.640
But until you've documented, it
checked it in run tests,

281
00:15:13.670 --> 00:15:16.640
have full test coverage. And
the other thing is, and

282
00:15:16.640 --> 00:15:18.410
this is separate from scrum
and a little bit more

283
00:15:18.410 --> 00:15:20.840
of a, of a, of
a Kirlian thing. But, but

284
00:15:20.840 --> 00:15:23.120
Brian and teams like his
at our company have said

285
00:15:23.120 --> 00:15:26.390
that if something, what did
he, what did he say?

286
00:15:26.390 --> 00:15:29.990
He used the term. I
want the number of non-software

287
00:15:29.990 --> 00:15:34.820
artifacts to approach zero. So,
so it tells you understand

288
00:15:34.820 --> 00:15:37.010
what your tests are, right?
A word document. Doesn't do

289
00:15:37.010 --> 00:15:40.760
anyone any good? If there
isn't a test to back

290
00:15:40.760 --> 00:15:43.610
it up. So a backlog
item that's really good would

291
00:15:43.610 --> 00:15:48.230
say a pop catcher should
support BitTorrent. There should then

292
00:15:48.230 --> 00:15:50.810
be an end unit test
or series of tests or

293
00:15:50.810 --> 00:15:55.250
entire test suite that answers
the question is that backlog

294
00:15:55.280 --> 00:15:58.250
item done? What does it
mean to support bit torn?

295
00:15:58.250 --> 00:16:01.310
Does that mean download only
or upload and down? When

296
00:16:01.310 --> 00:16:03.740
is it, when is it
done? So if the requirement

297
00:16:03.860 --> 00:16:05.960
has an understanding of when
it's done, there should be

298
00:16:05.960 --> 00:16:08.780
a test that says it's
done. So then the product

299
00:16:08.780 --> 00:16:11.360
owner will be able to
say, Hey, is BitTorrent support

300
00:16:11.360 --> 00:16:14.840
done? Yes. And we have
42 tests. Yeah. So for

301
00:16:14.840 --> 00:16:16.820
any feature at all, you
can, you can back that

302
00:16:16.820 --> 00:16:20.300
up. So you've got your
living backlog of items to

303
00:16:20.300 --> 00:16:22.910
be done. You've got this
fixed set of items and

304
00:16:22.910 --> 00:16:26.210
a series of sprints or
iterations. You've got that brief

305
00:16:26.240 --> 00:16:28.490
daily meeting that scrum, where
we all get around and

306
00:16:28.490 --> 00:16:31.220
say, what have we done?
What's our progress. What's our

307
00:16:31.220 --> 00:16:33.620
work that's coming. And then
what are some impediments? What

308
00:16:33.620 --> 00:16:35.510
are things that are way
that someone can get out

309
00:16:35.510 --> 00:16:38.960
of our way for us?
And then there's planning sessions

310
00:16:38.960 --> 00:16:40.820
where we describe what we're
going to do this sprint.

311
00:16:41.240 --> 00:16:43.760
And then another important part
is the post-mortem it's that

312
00:16:43.820 --> 00:16:48.230
it's that retrospective. And at
the last scrum, a sprint

313
00:16:48.230 --> 00:16:52.430
that I just finished, Brian
hook, he's running our scrums

314
00:16:52.430 --> 00:16:54.680
right now. We went up
onto a big whiteboard and

315
00:16:54.680 --> 00:16:57.230
he said, all right, in
the last month, what do

316
00:16:57.230 --> 00:16:59.240
we want more of? What
do we want the same

317
00:16:59.240 --> 00:17:02.030
amount of, and what do
we want less of? So

318
00:17:02.030 --> 00:17:03.820
then he goes around the
room and we say, Oh,

319
00:17:03.840 --> 00:17:06.770
you know, we want more
tracking. We weren't tracking our

320
00:17:06.770 --> 00:17:09.470
stuff enough in our, our
scrum tool. And we want

321
00:17:09.470 --> 00:17:11.780
more demos. We want less
meetings, you know, and we

322
00:17:11.780 --> 00:17:14.510
basically say, okay, now we're
going to tune the next,

323
00:17:14.750 --> 00:17:18.320
the next sprint. It really
has worked out nice. Then

324
00:17:18.320 --> 00:17:20.660
we happen to be using
a tool called version one

325
00:17:21.140 --> 00:17:25.340
it's version one.com version one,
and this just a web

326
00:17:25.340 --> 00:17:28.310
based tool to manage a
scrum. But some people can

327
00:17:28.310 --> 00:17:32.120
manage their scrums with posted
notes on a whiteboard in

328
00:17:32.120 --> 00:17:35.510
Excel. There's lots of different
tools. The version one tool

329
00:17:35.510 --> 00:17:38.030
is nice for managing dozens
and dozens of projects like

330
00:17:38.030 --> 00:17:41.390
we've got at Kirlian, but
we used to run our

331
00:17:41.390 --> 00:17:44.030
scrums in SharePoint. You know,
you know, you can make

332
00:17:44.030 --> 00:17:48.380
custom lists and SharePoint worked
just great. And then the

333
00:17:48.380 --> 00:17:50.430
number one thing me that's
really important is that the

334
00:17:50.430 --> 00:17:54.210
notion of you have to
deliver that demo, that, that

335
00:17:54.210 --> 00:17:58.970
sprint demo, you never show
something that's not done. And

336
00:17:59.010 --> 00:18:01.470
what does done mean, right?
So there's the stuff on

337
00:18:01.470 --> 00:18:04.860
Wikipedia. There's the scrum management
stuff. So scrum for managers

338
00:18:05.430 --> 00:18:14.510
that is@ashrinkstir.com slash GF to
Wikipedia Holding up in terms

339
00:18:14.510 --> 00:18:17.030
of accuracy for you in
terms of these things. It's

340
00:18:17.030 --> 00:18:18.920
not on these two, on
these two topics, it's not

341
00:18:18.920 --> 00:18:21.230
too bad. It's a little
more historical data that there's

342
00:18:21.230 --> 00:18:23.510
a scrum management link, this
a scrum dev stuff at

343
00:18:23.510 --> 00:18:27.320
shrinks or slash <inaudible>, but
there's a website called control

344
00:18:27.320 --> 00:18:31.190
chaos at shrink stir GF
for that I think is

345
00:18:31.190 --> 00:18:35.900
a really good resource for
understanding scrum cool, but the

346
00:18:35.900 --> 00:18:38.420
best way to learn scrum
in my opinion is to

347
00:18:38.420 --> 00:18:41.240
start with a book. There's
actually a pretty good book,

348
00:18:41.240 --> 00:18:45.650
which is interestingly enough, from
a, from Microsoft press, which

349
00:18:45.650 --> 00:18:48.080
isn't somewhere that you'd think
would, would be into scrum.

350
00:18:48.110 --> 00:18:51.410
But they've got a book
called agile project management with

351
00:18:51.410 --> 00:18:54.650
scrum at shrink stir slash
GF six. And there's an

352
00:18:54.650 --> 00:18:58.520
interesting article at E week
on Microsoft using scrum internally,

353
00:18:58.520 --> 00:19:01.880
it's shrink, stir slash GF
nine. But the interesting thing

354
00:19:01.880 --> 00:19:04.970
is that you can become
a certified scrum master. I've

355
00:19:04.970 --> 00:19:08.180
actually gone through this test
and been certified. So yeah,

356
00:19:08.180 --> 00:19:11.420
I'm the man now, master,
there are a number of

357
00:19:11.420 --> 00:19:15.230
places that can give these
scrum master certifications. And if

358
00:19:15.230 --> 00:19:20.180
you go up to shrinks
your.com/gf seven, they'll tell you

359
00:19:20.180 --> 00:19:23.330
the different kinds of certifications
that you can get. And

360
00:19:23.330 --> 00:19:25.940
the different locations that you
can go to. This is

361
00:19:25.940 --> 00:19:28.970
really useful. We useful training.
I've gone through this training

362
00:19:28.970 --> 00:19:30.500
before. And one of the
things that's nice about it

363
00:19:30.500 --> 00:19:33.440
is that you run through
simulated projects. Like in the

364
00:19:33.440 --> 00:19:36.020
course of a day, you'll
do like five little mini

365
00:19:36.020 --> 00:19:38.120
sprints. I'll show you what
it's like to do. The

366
00:19:38.120 --> 00:19:41.840
management. It can be a
little confusing, but just the

367
00:19:42.000 --> 00:19:46.130
formalization of the naming of
things is enough to tighten

368
00:19:46.130 --> 00:19:49.100
things up. And it actually
works the way developers like

369
00:19:49.100 --> 00:19:52.430
to work with developers, like
to pull tasks that they're

370
00:19:52.430 --> 00:19:55.700
interested in pulling tasks, that
they estimated tasks that they

371
00:19:55.700 --> 00:20:00.350
broke down. So the developers
own the tasks. There's the

372
00:20:00.360 --> 00:20:04.250
sense of, of collective code
ownership and collective task ownership

373
00:20:04.670 --> 00:20:09.860
and the, the backlog person,
the, the customer who owns

374
00:20:09.860 --> 00:20:12.590
the features gets to worry
about the stuff that they

375
00:20:12.590 --> 00:20:14.810
want to worry about. The
backlog items. I just get

376
00:20:14.990 --> 00:20:16.910
you get that torrent working.
I don't care how you

377
00:20:16.910 --> 00:20:19.670
get it working. Right? So
that, that separation is very

378
00:20:19.670 --> 00:20:24.650
clean. And frankly it energizes
the workplace. You know, there's

379
00:20:24.650 --> 00:20:26.630
this sense of we're making
progress, man, did you see

380
00:20:26.630 --> 00:20:28.670
the demo that we did
last month? And you know,

381
00:20:28.670 --> 00:20:31.430
we're getting ready for the
next demo. The agile process

382
00:20:31.430 --> 00:20:34.880
is also to break down
big tasks into little tasks.

383
00:20:34.880 --> 00:20:37.760
So into tasks that can
be completed in a day.

384
00:20:37.790 --> 00:20:40.670
Isn't that right? Yeah, totally.
I like my task to

385
00:20:40.670 --> 00:20:42.860
be less than four hours.
You're right. So then at

386
00:20:42.860 --> 00:20:45.200
the end of the day,
everybody feels like they've accomplished

387
00:20:45.200 --> 00:20:47.440
something and there's an, a
big wait, Oh God. I'm

388
00:20:47.440 --> 00:20:50.200
in the middle of some
great big process. Yeah. And,

389
00:20:50.200 --> 00:20:52.650
and having the, having the,
the sense of a development

390
00:20:52.650 --> 00:20:56.910
concierge is kind of empowering.
I mean, I'd rather not

391
00:20:56.910 --> 00:20:58.470
be the guy I need
to get some development done.

392
00:20:58.470 --> 00:21:00.300
I don't want to mess
with a virtual machine or

393
00:21:00.300 --> 00:21:03.660
install some, you know, so
having this kind of concierge

394
00:21:03.660 --> 00:21:06.270
to handle things that scrum
master to, to manage the

395
00:21:06.270 --> 00:21:10.080
process, isn't necessarily leading the
team, but is your concierge.

396
00:21:10.110 --> 00:21:11.850
I think that's a good
term. Yeah. That's a good

397
00:21:11.850 --> 00:21:14.330
term. It gives a bit
of class to the, to

398
00:21:14.330 --> 00:21:19.110
the title was the scrum
master, right? Yeah, yeah. Yeah.

399
00:21:20.340 --> 00:21:22.650
I think that it's, it's
definitely worth trying, even if

400
00:21:22.650 --> 00:21:25.920
you're a team of one,
though, the formalization of this

401
00:21:25.920 --> 00:21:29.550
stuff Is, is useful. Yeah.
The backlog item. Yeah. And

402
00:21:29.550 --> 00:21:31.470
then, then the, on the
demo getting information, you know,

403
00:21:31.470 --> 00:21:33.390
it's one of the things
that's fundamental about agile is

404
00:21:33.510 --> 00:21:38.940
continuous integration and having a
working system early on. Right.

405
00:21:39.360 --> 00:21:41.070
And you have to have
a working system early on

406
00:21:41.070 --> 00:21:43.320
if you're going to be
doing yeah. Early on. Yeah.

407
00:21:43.440 --> 00:21:46.410
Especially with the setup and
deployment and all that stuff

408
00:21:46.410 --> 00:21:50.340
that the continuous integration gives
you. Totally. It's very good.

409
00:21:51.630 --> 00:21:53.130
Should I give a link
to the book? The book

410
00:21:53.130 --> 00:21:58.250
was at Amazon at Shaw
shrinker slash GF six. It

411
00:21:58.250 --> 00:22:01.150
is a Microsoft press book,
but it really is a

412
00:22:01.170 --> 00:22:04.860
good one Book. Excellent. Is
how long has this process

413
00:22:04.860 --> 00:22:08.280
been baked? You said it
started in the nineties. There's

414
00:22:08.280 --> 00:22:11.430
a certain 86 officially. It
really started going in, in

415
00:22:11.430 --> 00:22:14.130
the, in the early nineties,
but it feels to me

416
00:22:14.130 --> 00:22:16.530
like it's really hit that
tipping point in the last

417
00:22:16.530 --> 00:22:19.890
three or four years. And
you'll hear about it at,

418
00:22:20.280 --> 00:22:22.980
at all the agile conferences.
And I think that it's,

419
00:22:23.670 --> 00:22:26.190
it's almost like a way
to take the scary stuff

420
00:22:26.190 --> 00:22:30.030
about extreme programming and wrap
it in something that, that

421
00:22:30.450 --> 00:22:34.440
mere mortals and humans can
understand. Yeah. I think that

422
00:22:35.580 --> 00:22:38.820
XP was oversimplified and people
just said, Oh, it's pure

423
00:22:38.820 --> 00:22:43.170
programming. Lots of, lots of
tiny meetings. Scrum is, is

424
00:22:43.200 --> 00:22:47.580
nice, simple, lightweight, formal. And
really doesn't say anything about

425
00:22:47.580 --> 00:22:50.370
how you choose to do
these things. So we still

426
00:22:50.370 --> 00:22:53.520
do peer programming. I've done
a lot of remote peer

427
00:22:53.520 --> 00:22:56.640
programming with folks in other
offices using like remote desktop

428
00:22:56.670 --> 00:22:58.890
and things like that. As
long as the task gets

429
00:22:58.890 --> 00:23:01.800
done and the trajectory, the
velocity looks good and the

430
00:23:01.800 --> 00:23:05.490
burndown looks good. No one
really cares how you get

431
00:23:05.490 --> 00:23:09.870
your work. Yeah. Yeah. Well,
good. Is that a show

432
00:23:09.870 --> 00:23:13.170
Scott? Yeah, I think it
is. Oh, and actually a

433
00:23:13.170 --> 00:23:15.180
follow up from the show
from last week, I did

434
00:23:15.180 --> 00:23:18.900
end up buying the Garmin
NUVI GPS. I got the

435
00:23:18.900 --> 00:23:21.630
new V3 50, the three
60 is the one with

436
00:23:21.630 --> 00:23:23.970
the Bluetooth, but I didn't
want to spend a couple

437
00:23:23.970 --> 00:23:26.520
hundred bucks more for it.
But the real tricky thing

438
00:23:26.520 --> 00:23:29.700
with the new V3 50
that I got to work

439
00:23:29.700 --> 00:23:33.960
through is that it's an
$800 GPS, a hundred us,

440
00:23:34.200 --> 00:23:36.540
which is way more than
I wanted to spend, but

441
00:23:37.170 --> 00:23:39.690
I found a local place
called Carters that would do

442
00:23:39.690 --> 00:23:43.290
it for 700 best buy
does price matching. So best

443
00:23:43.290 --> 00:23:46.280
buy matched car toys priced
at hundred, but I also

444
00:23:46.280 --> 00:23:50.300
had 12% off any single
item at best buy. So

445
00:23:50.300 --> 00:23:52.790
I ended up getting the
thing for 615. So I

446
00:23:52.790 --> 00:23:56.150
got it for 25% off
that must've hurt them. So

447
00:23:56.270 --> 00:24:00.080
606 15, but it's possible
to make that happen. Also

448
00:24:00.080 --> 00:24:03.710
frugal.google.com helped me understand what
were the prices that I

449
00:24:03.710 --> 00:24:06.230
could get this for and
what a great GPS I'm

450
00:24:06.230 --> 00:24:08.600
thrilled with it. You're going
to have to blog about

451
00:24:08.600 --> 00:24:11.030
that. Have you blogged about
it yet? No, it's on

452
00:24:11.030 --> 00:24:13.190
my list. My buddy Patrick
caller was going to show

453
00:24:13.190 --> 00:24:14.660
me how to do weigh
points and some of the

454
00:24:14.660 --> 00:24:18.470
geocashing stuff. Cause he's big
into geocashing. So we'll, we'll,

455
00:24:18.470 --> 00:24:20.600
we'll have a geocashing show
again in the future. Alright,

456
00:24:20.600 --> 00:24:23.930
great. Until then we'll speak
to you later and we'll

457
00:24:23.930 --> 00:24:25.760
talk to you next week.

