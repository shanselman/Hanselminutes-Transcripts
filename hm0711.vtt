WEBVTT FILE

1
00:00:00.300 --> 00:00:03.030
Hey friends. I want to
thank our sponsor. Reagan, are

2
00:00:03.030 --> 00:00:05.700
you struggling to replicate the
bugs and performance issues that

3
00:00:05.700 --> 00:00:08.940
your customers are reporting? Plug
Reagan into your web and

4
00:00:08.940 --> 00:00:12.570
mobile applications right now, and
diagnose problems in minutes rather

5
00:00:12.570 --> 00:00:15.930
than hours. Kiss goodbye. Having
to dig through log files

6
00:00:15.930 --> 00:00:19.560
and relying on frustrated users
to report issues, make your

7
00:00:19.560 --> 00:00:23.220
software development life so much
easier. Using Reagan's error, crash,

8
00:00:23.220 --> 00:00:27.330
and performance monitoring tools. Every
software team can create flawless

9
00:00:27.330 --> 00:00:30.750
software experiences for their customers
with Reagan cry it free

10
00:00:30.750 --> 00:00:49.350
today@raygun.com. That's our a Y
G U n.com. Hi, this

11
00:00:49.350 --> 00:00:52.080
is Scott Hanselman. This is
another episode of Hanselminutes today.

12
00:00:52.080 --> 00:00:55.350
I'm talking to Ayesha Muslimdar.
She is a senior UX

13
00:00:55.350 --> 00:00:59.030
engineer at optimizing. How are
you? I'm good. Thanks for

14
00:00:59.030 --> 00:01:01.580
having me, Scott. Yeah, this
is cool. I'm excited to

15
00:01:01.580 --> 00:01:04.460
talk to you. So, you
know, I I've talked about

16
00:01:04.670 --> 00:01:07.790
accessibility on the show before,
right? And the whole idea

17
00:01:08.090 --> 00:01:11.720
when you're building a culture
of inclusion is to avoid

18
00:01:11.810 --> 00:01:14.720
excluding anybody. Right. And I
think that we indirectly do

19
00:01:14.720 --> 00:01:19.220
that all the time when
we make non-inclusive or non-accessible

20
00:01:19.610 --> 00:01:26.600
websites. Yeah, absolutely. Lots of
websites aren't accessible. Oh, definitely.

21
00:01:27.680 --> 00:01:30.440
It's definitely, it's a moving
target, you know, there's never,

22
00:01:30.530 --> 00:01:32.270
you can never have a
website and say this is

23
00:01:32.270 --> 00:01:35.450
a hundred percent accessible, but
I think if you took

24
00:01:35.450 --> 00:01:37.850
an average of every site
out there, we'd probably be

25
00:01:37.850 --> 00:01:42.530
in the like 20%, maybe
that might even be generous.

26
00:01:43.760 --> 00:01:45.500
So what does that mean
accessible though? I mean, like

27
00:01:45.500 --> 00:01:48.740
from a simplistic perspective, as
an able bodied person, like

28
00:01:48.980 --> 00:01:51.290
I guess when I think
accessibility, I think all tags

29
00:01:51.290 --> 00:01:54.740
on images and I know
that's awful of me. That's

30
00:01:54.740 --> 00:01:57.200
one part of it. It's
a very, very tiny bite

31
00:01:57.200 --> 00:02:00.380
of it. The way I
like to describe accessibility is

32
00:02:00.380 --> 00:02:04.610
essentially ensuring that everyone no
matter their level of ability

33
00:02:04.970 --> 00:02:10.730
can interact with ad to
contribute to, and basically utilize

34
00:02:10.820 --> 00:02:14.510
every website the same way
as everyone else. Right. It

35
00:02:14.510 --> 00:02:16.820
should make no difference what
you are able to do

36
00:02:16.820 --> 00:02:20.030
with any type of technology,
no matter what the ability

37
00:02:20.030 --> 00:02:24.650
of your body is. Hmm.
Okay. So simplistically as I

38
00:02:24.650 --> 00:02:27.320
put it, I was thinking
all text, which is the

39
00:02:27.320 --> 00:02:30.320
obvious stuff. Like I can't
see that image. So I'll

40
00:02:30.320 --> 00:02:32.810
describe it to you. But
if I was going to

41
00:02:32.810 --> 00:02:35.150
put a control on my
page, like a date picker,

42
00:02:35.180 --> 00:02:37.370
I mean, how is that
not accessible? Why can't everyone

43
00:02:37.370 --> 00:02:40.640
just pick a date? Oh,
you picked the one component.

44
00:02:40.640 --> 00:02:45.830
That's my nightmare take pickers
are challenging. They involve a

45
00:02:45.830 --> 00:02:48.110
lot of keyboard interaction, right?
If you want to make

46
00:02:48.110 --> 00:02:50.630
a date picker accessible and
you're not able to use

47
00:02:50.630 --> 00:02:53.270
a mouse, you want to
be able to perform all

48
00:02:53.270 --> 00:02:57.050
the exact same functionality with
a keyboard. And that means

49
00:02:57.170 --> 00:03:00.580
tabbing to the inputs, maybe
using your arrow keys to

50
00:03:00.580 --> 00:03:03.910
cycle through the different days,
having a way to select

51
00:03:03.910 --> 00:03:08.200
the day. All of that
is a very complicated interaction,

52
00:03:08.200 --> 00:03:10.000
but it's something that you
want to make sure everyone

53
00:03:10.000 --> 00:03:12.760
can use. And that's, that's
the level that goes beyond

54
00:03:12.760 --> 00:03:17.850
just adding alt text to
images. Interesting. But then in

55
00:03:17.850 --> 00:03:21.630
a world of like pretty
react components and like super

56
00:03:21.630 --> 00:03:25.800
cool JavaScript popped down date,
calendar looking deals. Why don't

57
00:03:25.800 --> 00:03:28.140
we just go back to
drop down lists? I mean,

58
00:03:28.200 --> 00:03:30.840
when the web started, you
had a month, a day

59
00:03:30.840 --> 00:03:33.570
in a year, there were
dropdown lists and I could

60
00:03:33.570 --> 00:03:36.000
use up, up and down
and a tab and I

61
00:03:36.000 --> 00:03:40.170
was ready to go. Yeah,
I think nowadays we want

62
00:03:40.170 --> 00:03:42.870
customization, right? We want to
be able to make things

63
00:03:42.870 --> 00:03:47.520
look gorgeous and fancy. And
we want our date picker

64
00:03:47.520 --> 00:03:51.330
to look different from everyone
else's date picker. But the

65
00:03:51.330 --> 00:03:53.610
risk in that is like
you said, we are not

66
00:03:53.610 --> 00:03:56.880
using the standard out of
the box components anymore that

67
00:03:56.880 --> 00:04:00.540
were accessible by default. And
instead we're rolling our own

68
00:04:00.540 --> 00:04:04.470
versions. And by doing that,
we risk creating, you know,

69
00:04:04.560 --> 00:04:09.030
20,000 different day pickers, all
of which are inaccessible. I

70
00:04:09.030 --> 00:04:12.270
see. So in our quest
for a, you know, UX

71
00:04:12.270 --> 00:04:16.470
consistency and really being attractive
and innovative, we, we, we

72
00:04:16.470 --> 00:04:19.560
can easily make something that
looks pretty and as clickable

73
00:04:19.560 --> 00:04:22.170
with a mouse, but falls
apart pretty quickly when you

74
00:04:22.170 --> 00:04:25.050
start tabbing around and using
arrow keys. Absolutely. If you're

75
00:04:25.050 --> 00:04:28.290
not thinking about it very
actively, as you're developing that

76
00:04:28.290 --> 00:04:31.500
component, it can be very
easy to create a completely

77
00:04:31.500 --> 00:04:35.520
inaccessible date picker or whatever
it might be dropped down

78
00:04:35.520 --> 00:04:39.240
menu, et cetera. It does
make me wonder though why

79
00:04:39.240 --> 00:04:42.930
companies that aren't in the
business of making UI controls

80
00:04:43.410 --> 00:04:47.010
insist on making UI controls
from scratch. Like we're an

81
00:04:47.010 --> 00:04:49.290
insurance company. And when we,
before we make insurance, let's

82
00:04:49.290 --> 00:04:51.180
make a new date control
that no one's ever seen

83
00:04:51.180 --> 00:04:54.180
before. I would say a
lot of it just comes

84
00:04:54.180 --> 00:04:58.980
from maybe a little bit
of a misconception that that's

85
00:04:58.980 --> 00:05:02.460
expected of you, you know,
that when you were building

86
00:05:02.460 --> 00:05:04.830
out a company or like
you said, you're, maybe you're

87
00:05:04.830 --> 00:05:08.670
an insurance company. That's not
necessarily too concerned about the

88
00:05:08.670 --> 00:05:12.270
looks. I think there's still
a misconception that, you know,

89
00:05:12.270 --> 00:05:14.850
as a design organization, maybe
we need to be the

90
00:05:14.850 --> 00:05:18.120
ones to create this brand
new version of this component

91
00:05:18.150 --> 00:05:22.950
that has existed elsewhere. But
by making our own, maybe

92
00:05:22.950 --> 00:05:26.730
we get a chance to
showcase our branding or put

93
00:05:26.730 --> 00:05:30.090
our individual flair on it,
which sadly a lot of

94
00:05:30.090 --> 00:05:34.170
times comes at the cost
of usability. Okay. So in

95
00:05:34.170 --> 00:05:38.520
a world though, of, of
componentization, I mean the web

96
00:05:38.520 --> 00:05:40.650
is starting to allow us
to make our own tags,

97
00:05:40.920 --> 00:05:44.010
our own components where the
behavior of the component is,

98
00:05:44.460 --> 00:05:47.610
is self-contained I guess that's,
is that a good definition

99
00:05:47.610 --> 00:05:50.520
of what a component is?
It's something self-contained Yeah. You

100
00:05:50.520 --> 00:05:54.390
can think of it as
being encapsulated. You know, everything

101
00:05:54.420 --> 00:05:58.910
that the component is concerned
about is within that component.

102
00:05:58.910 --> 00:06:02.690
So out-state stuff can't get
in the inside stuff can't

103
00:06:02.690 --> 00:06:04.610
bleed out. That's a good
way of thinking about it.

104
00:06:04.630 --> 00:06:07.540
Okay. So if I make
a component that represents a

105
00:06:07.540 --> 00:06:09.280
date control, I should be
able to do that in

106
00:06:09.280 --> 00:06:12.100
such a way where I
get, I get the accessibility.

107
00:06:12.130 --> 00:06:16.780
Correct. And then it works.
It just works everywhere. Yeah.

108
00:06:16.780 --> 00:06:19.600
That's definitely one thing that
I've been trying to accomplish

109
00:06:19.600 --> 00:06:22.090
with our component library, which
happens to be built in

110
00:06:22.090 --> 00:06:25.780
react is that ideally I
would love for all of

111
00:06:25.780 --> 00:06:28.810
our developers to be able
to pull out this state

112
00:06:28.810 --> 00:06:31.870
picker into their UI and
not have to worry a

113
00:06:31.870 --> 00:06:35.260
single bit about whether or
not it's accessible. I would

114
00:06:35.260 --> 00:06:37.210
love to get to the
point where every component in

115
00:06:37.210 --> 00:06:41.440
our library is accessible by
default and includes the keyboard

116
00:06:41.440 --> 00:06:45.040
interaction needed in order to
make sure that one, you

117
00:06:45.040 --> 00:06:47.890
know, one of our developers
on a feature team pulls

118
00:06:47.890 --> 00:06:51.640
it in. They don't have
to put their time or

119
00:06:51.640 --> 00:06:55.300
effort into thinking about, is
this date picker, keyboard accessible?

120
00:06:55.330 --> 00:06:57.850
Does it work with a
screen reader? They know that

121
00:06:57.850 --> 00:06:59.890
because of where it came
from, it's going to be

122
00:06:59.890 --> 00:07:04.690
accessible already. Okay. So your
components are in react, but

123
00:07:04.720 --> 00:07:08.350
you know, whoever's listening might
have components in whatever world

124
00:07:08.350 --> 00:07:10.780
or language that they want
to have. I understand that

125
00:07:10.780 --> 00:07:15.130
the W3C CS web accessibility
initiative has this thing called

126
00:07:15.190 --> 00:07:19.960
Aria a R I a
accessible rich internet applications. Does

127
00:07:19.960 --> 00:07:22.690
that work with not just
react works with anything, any

128
00:07:22.690 --> 00:07:26.290
Javascripty widget? Yeah. You can.
It's actually more on the

129
00:07:26.290 --> 00:07:30.160
market level. So no matter
what JavaScript framework you're using,

130
00:07:30.460 --> 00:07:33.460
you can add those Aria
tags to your markup, the

131
00:07:33.460 --> 00:07:37.330
underlying markup that's powering the
component. And that can definitely

132
00:07:37.330 --> 00:07:42.790
add more accessibility. The trick
though, I think a lot

133
00:07:42.790 --> 00:07:44.830
of the community has said
that the best amount of

134
00:07:44.830 --> 00:07:49.420
Aria is very little to
no Aria because you can,

135
00:07:49.480 --> 00:07:52.630
you can actually go very
far the wrong way when

136
00:07:52.630 --> 00:07:57.010
you're overusing Aria, for example,
there's a, there's a tag

137
00:07:57.010 --> 00:08:00.610
called a role. You can
set the role using Aria

138
00:08:00.640 --> 00:08:05.230
attributes, right. But if you
are taking a div and

139
00:08:05.230 --> 00:08:09.160
you're adding role equals button,
the question should really be,

140
00:08:09.400 --> 00:08:12.820
why am I not just
using the button tag? Right.

141
00:08:13.420 --> 00:08:16.690
There are so many out
of the box elements that

142
00:08:16.690 --> 00:08:19.300
do exist in HTML. And
those are the ones we

143
00:08:19.300 --> 00:08:22.240
want to be using. We
should very rarely want to

144
00:08:22.240 --> 00:08:25.390
make use of stuff like
roll equals to kind of

145
00:08:25.420 --> 00:08:28.840
override the functionality of something
that you know is already

146
00:08:28.840 --> 00:08:31.720
out there. And it's already
accessible by default. That brings

147
00:08:31.720 --> 00:08:34.150
up an interesting question in
my mind then that there

148
00:08:34.150 --> 00:08:37.090
was a time a few
years ago where people were

149
00:08:37.090 --> 00:08:41.200
making, you know, custom componentry
and they would basically paint

150
00:08:41.200 --> 00:08:43.240
stuff on a div and
they would take a div

151
00:08:43.240 --> 00:08:45.880
or a span. And they
would just, you know, I

152
00:08:45.880 --> 00:08:50.170
don't know, like interactive eyes,
the thing I'm hearing you

153
00:08:50.170 --> 00:08:51.700
say that we shouldn't go
into, that we should think

154
00:08:51.700 --> 00:08:55.380
about starting from a button
or list or a unordered

155
00:08:55.380 --> 00:08:59.040
list or some thing that
is, that is at its

156
00:08:59.130 --> 00:09:03.710
essence, a core HTML element.
Yes, definitely. I had a

157
00:09:03.740 --> 00:09:07.730
college professor who called it,
divided us this kind of

158
00:09:07.730 --> 00:09:11.330
mentality of making everything a
Dave, right. Because it's what

159
00:09:11.330 --> 00:09:14.270
people are very familiar with.
It generally works out of

160
00:09:14.270 --> 00:09:17.480
the box in a sense
that it will display what

161
00:09:17.480 --> 00:09:20.540
you want it to display.
But one thing that I'm

162
00:09:20.540 --> 00:09:23.030
really trying to get all
of our developer teams to

163
00:09:23.030 --> 00:09:27.110
realize is that your first
question should always be, is

164
00:09:27.110 --> 00:09:30.980
there something that already exists
that does this right? Is

165
00:09:30.980 --> 00:09:34.130
there a button tag and
anchor tag, like you said,

166
00:09:34.160 --> 00:09:38.390
on ordered lists list items,
should we be utilizing those

167
00:09:38.420 --> 00:09:42.050
instead of going into this
device world where everything is

168
00:09:42.050 --> 00:09:45.170
a diverse span and we
lose a lot of the

169
00:09:45.650 --> 00:09:49.820
out of the box, automatic
semantics that HTML brings us.

170
00:09:50.120 --> 00:09:54.560
That'd make me wonder if
there's, if I should have

171
00:09:54.590 --> 00:09:58.520
the core control, be hidden
underneath it. Like, I, I've

172
00:09:58.550 --> 00:10:02.060
also seen people do a
thing where there's the JavaScript

173
00:10:02.300 --> 00:10:04.880
widget, there's the, you know,
the they're really cool, funky

174
00:10:04.880 --> 00:10:09.110
looking widget. And then there's
the underlying three text boxes

175
00:10:09.110 --> 00:10:12.320
or the underlying hidden three
list boxes. So you're trying

176
00:10:12.320 --> 00:10:14.150
to like have the best
of both worlds, but you

177
00:10:14.150 --> 00:10:18.290
end up creating parallel a
parallel Dom almost like one

178
00:10:18.290 --> 00:10:21.890
for the pretty stuff. And
one for the, the person

179
00:10:21.890 --> 00:10:23.540
who is looking at it
with a, with a reader.

180
00:10:24.350 --> 00:10:26.720
Yeah. You see this a
lot. I think most commonly

181
00:10:26.720 --> 00:10:31.070
in like checkbox toggles or
even check boxes, some of

182
00:10:31.070 --> 00:10:34.370
those, you know, out of
the box elements don't look

183
00:10:34.370 --> 00:10:37.820
the greatest if you just
use them by themselves. And

184
00:10:37.820 --> 00:10:39.410
so I have seen that
a lot where people will

185
00:10:39.410 --> 00:10:42.260
kind of create, like you
said, a parallel Dom that

186
00:10:42.260 --> 00:10:46.880
you can style, but the
underlying element is the original

187
00:10:46.880 --> 00:10:50.540
native element. And I think
that's fine. As long as

188
00:10:50.540 --> 00:10:54.020
you put in the effort
to test it right. Manually

189
00:10:54.020 --> 00:10:57.680
test it with your keyboard
with your screen reader, does

190
00:10:57.680 --> 00:11:02.420
the functionality still work? Are
you overriding the default functionality

191
00:11:02.420 --> 00:11:05.630
or completely missing it just
by creating this parallel Dom?

192
00:11:05.930 --> 00:11:09.140
Or are you still taking
advantage of the underlying checkbox?

193
00:11:09.380 --> 00:11:12.410
You're just using this extra
layer to style it, you

194
00:11:12.410 --> 00:11:15.320
know, according to your design
system or your brand guidelines,

195
00:11:15.950 --> 00:11:18.440
You know, and that actually
brings me to kind of

196
00:11:18.440 --> 00:11:20.360
my core question and what
I think would be a

197
00:11:20.360 --> 00:11:25.370
good title for this show,
which is building out an

198
00:11:25.370 --> 00:11:29.930
accessibility culture from zero, because
what you're describing, isn't technical

199
00:11:29.930 --> 00:11:34.580
problems, it's organizational willpower, where
someone needs to decide that

200
00:11:34.580 --> 00:11:37.610
testing that is important and
specking it out is important.

201
00:11:38.600 --> 00:11:42.560
Yeah, exactly. A huge Pyre
from what I've experienced of

202
00:11:42.560 --> 00:11:46.820
building accessibility culture is getting
people into the mindset that,

203
00:11:47.450 --> 00:11:50.000
you know, writing a few
JavaScript tests and making sure

204
00:11:50.000 --> 00:11:53.140
you can click around is
not enough, not if you

205
00:11:53.140 --> 00:11:55.810
want to ensure that what
you're producing is accessible for

206
00:11:55.810 --> 00:11:59.980
everyone to use that has,
you know, screen reader testing.

207
00:11:59.980 --> 00:12:02.770
You need to make sure
it's keyboard navigable. Can you

208
00:12:02.770 --> 00:12:05.590
tell where your focus is
at all times? And I

209
00:12:05.590 --> 00:12:09.370
completely understand that people don't
know this is something they

210
00:12:09.370 --> 00:12:11.590
should be doing. I mean,
I went through four years

211
00:12:11.590 --> 00:12:14.530
of a computer science degree
and never heard the word

212
00:12:14.530 --> 00:12:18.310
accessibility used in all four
years. Yeah. It wasn't until

213
00:12:18.310 --> 00:12:22.240
I started my first job
at Salesforce where I was

214
00:12:22.240 --> 00:12:24.910
building out a prototype and
someone asked me if I

215
00:12:24.910 --> 00:12:27.610
had checked with the accessibility
team about whether something I

216
00:12:27.610 --> 00:12:30.220
had built would be accessible.
And I kind of gave

217
00:12:30.220 --> 00:12:34.660
them this really blank, stare
like a what's an accessibility

218
00:12:34.660 --> 00:12:37.720
team. I was so embarrassed
that I had never even

219
00:12:37.720 --> 00:12:40.330
heard this word before and
much less like knew what

220
00:12:40.330 --> 00:12:42.780
to do about it. That
actually kind of brings up

221
00:12:42.780 --> 00:12:45.870
the larger problem about accessibility
culture. If, if, if one

222
00:12:45.870 --> 00:12:47.430
can make it all the
way through school and never

223
00:12:47.430 --> 00:12:49.740
hear about that, what else
are they not teaching us?

224
00:12:50.190 --> 00:12:53.640
Yeah, exactly. It's kind of
scary to think about. I

225
00:12:53.640 --> 00:12:58.050
mean, I'm sure none of
my professors were aiming to

226
00:12:58.050 --> 00:13:02.280
exclude this huge group of
people, right? They didn't want

227
00:13:02.280 --> 00:13:05.550
us to build, you know,
whatever fake app we made

228
00:13:06.300 --> 00:13:09.900
and have it be inaccessible.
I just don't know that

229
00:13:10.890 --> 00:13:12.750
at the time that I
was in school, at least

230
00:13:12.750 --> 00:13:17.430
that it was a valued
lesson, you know, or even

231
00:13:17.430 --> 00:13:19.590
if they knew how important
it would be to those

232
00:13:19.590 --> 00:13:22.470
people graduating. And once they
actually got into a company

233
00:13:22.920 --> 00:13:25.200
that they would be asked
about this, I don't know

234
00:13:25.200 --> 00:13:28.950
if maybe there's a disconnect
between what the professor are

235
00:13:28.970 --> 00:13:33.960
teaching and what front end,
especially developers front end developers

236
00:13:34.020 --> 00:13:37.320
are expected of once they
joined the company. I wonder

237
00:13:37.320 --> 00:13:39.450
also when we're trying to
pick that culture into a

238
00:13:39.450 --> 00:13:44.790
company, if you know, going
with the able bodied argument

239
00:13:44.880 --> 00:13:48.840
or not is isn't necessarily
the best way because keyboard

240
00:13:48.840 --> 00:13:52.560
navigation is helpful for everyone.
Like your first time you

241
00:13:52.560 --> 00:13:54.900
visit a site, you might,
or an app, you might

242
00:13:54.900 --> 00:13:56.850
end up using a mouse,
but after a while, I'm

243
00:13:56.850 --> 00:13:59.670
going to start learning hotkeys.
And if I have good

244
00:13:59.670 --> 00:14:02.610
keyboard navigation, and then I
extend that keyboard navigation up

245
00:14:02.610 --> 00:14:06.330
into hotcakes and shortcuts, and
you know, I really love

246
00:14:06.330 --> 00:14:07.680
it. If, you know, when
you go to a website

247
00:14:07.680 --> 00:14:09.570
and you hit the question
Mark, and it pops up

248
00:14:09.570 --> 00:14:11.400
like a, here are the
hot keys on this, on

249
00:14:11.400 --> 00:14:13.860
this website. Like people don't
even know that exists on

250
00:14:13.860 --> 00:14:17.010
GitHub. There's like a whole
rich hot thing. It's amazing.

251
00:14:17.010 --> 00:14:20.430
Like what, you know, Gmail
outlook, all have these really

252
00:14:20.430 --> 00:14:24.480
cool things. Maybe one could
sell it to the organization

253
00:14:24.480 --> 00:14:27.720
saying, look, how much more
productive our users of all

254
00:14:27.720 --> 00:14:32.640
flavors are because of our,
our keyboard navigation. Yeah, exactly.

255
00:14:32.640 --> 00:14:36.390
I think that's also a
huge misconception that assistive technology

256
00:14:36.390 --> 00:14:40.200
is only benefiting a small
portion of the population, right?

257
00:14:40.200 --> 00:14:43.080
It's absolutely not true. It
benefits every one of us.

258
00:14:43.080 --> 00:14:46.410
We have all used some
kind of assistive technology, whether

259
00:14:46.410 --> 00:14:48.930
that's in the physical world
and it's using a ramp

260
00:14:48.960 --> 00:14:52.280
when you have suitcases, I
mean, everyone's done that, right.

261
00:14:52.910 --> 00:14:55.280
Or if it's in the
digital world, like you said,

262
00:14:55.280 --> 00:14:59.330
using keyboard shortcuts, or even
just tabbing through a form,

263
00:14:59.720 --> 00:15:02.420
right. That's using keyboard navigation.
I do that all the

264
00:15:02.420 --> 00:15:05.390
time and I find it
really frustrating when it doesn't

265
00:15:05.390 --> 00:15:07.640
work and that's for me.
Right. I can't imagine how

266
00:15:07.640 --> 00:15:10.370
that feels for someone who
absolutely needs to use the

267
00:15:10.370 --> 00:15:14.000
keyboard. And so I definitely
think there's a huge amount

268
00:15:14.000 --> 00:15:18.050
of education that needs to
happen around, you know, this

269
00:15:18.050 --> 00:15:23.110
is for everyone assistive technology
benefits. Absolutely. Everyone, Indeed the

270
00:15:23.110 --> 00:15:26.470
tabbing tabbing and having the
tab jump off somewhere and

271
00:15:26.470 --> 00:15:29.560
realize that no one ever
looked at tab stops is

272
00:15:29.650 --> 00:15:32.410
a speed is a mental
speed bump for everyone. Oh

273
00:15:32.410 --> 00:15:35.530
yeah, exactly. Or the opposite
that I've seen a lot,

274
00:15:35.560 --> 00:15:38.230
not the opposite, but a
similar thing I've seen a

275
00:15:38.230 --> 00:15:42.970
lot is focus. Right? A
lot of people have this,

276
00:15:43.150 --> 00:15:46.000
that, you know, that like
automatic blue outline that shows

277
00:15:46.000 --> 00:15:49.960
from browsers, whenever you focus
on something, the most common

278
00:15:49.960 --> 00:15:53.260
thing I see is resetting
that, right? So people will

279
00:15:53.260 --> 00:15:57.190
say, you know, button outline
none, which is fine. I

280
00:15:57.190 --> 00:16:00.070
get that the blue, you
know, border is not the

281
00:16:00.070 --> 00:16:03.100
prettiest, but you can't just
take it off without adding

282
00:16:03.100 --> 00:16:06.820
something back in place of
it. So I find that

283
00:16:06.820 --> 00:16:09.670
all the time people have
taken off the automatic focus

284
00:16:09.670 --> 00:16:12.730
ring, which again comes out
of the box with browsers,

285
00:16:12.760 --> 00:16:16.870
right? It requires zero work.
It took more effort to

286
00:16:16.870 --> 00:16:19.750
take it off, but then
you need to add on

287
00:16:19.750 --> 00:16:21.670
a little bit more effort
to put it back on

288
00:16:21.670 --> 00:16:23.920
in a way that you
like, you know, whether that's

289
00:16:24.100 --> 00:16:28.270
underlines or a different color
of highlighters, something it needs

290
00:16:28.270 --> 00:16:32.620
to be there. Does your
dashboard design engage users and

291
00:16:32.620 --> 00:16:36.010
set your product apart. According
to the analyst from Gartner,

292
00:16:36.010 --> 00:16:38.560
the look and feel of
embedded analytics as a direct

293
00:16:38.560 --> 00:16:42.610
impact on how end users
perceive your application. Fortunately, you

294
00:16:42.610 --> 00:16:45.130
don't need to be a
professional designer to turn flat

295
00:16:45.130 --> 00:16:50.830
information into rich visualizations. Logi
analytics has compiled 17 design

296
00:16:50.830 --> 00:16:54.280
tips that will transform your
dashboards. Logi analytics is the

297
00:16:54.280 --> 00:16:58.360
leading development platform for embedded
dashboards and reports. And unlike

298
00:16:58.360 --> 00:17:02.230
other solutions, logic gives you
complete control to create your

299
00:17:02.230 --> 00:17:06.750
own unique analytics experience. Visit
lodgey analytics. That's L O

300
00:17:06.750 --> 00:17:12.670
OGI analytics.com/hansel minutes to access
17 easy changes that will

301
00:17:12.670 --> 00:17:19.990
transform your dashboards. That's L
O G I analytics.com/hansel minutes.

302
00:17:21.130 --> 00:17:23.950
That actually from a cult
from, again, talking about this

303
00:17:23.950 --> 00:17:26.860
from the goal of baking
it into the culture, rather

304
00:17:26.860 --> 00:17:30.910
than doing things like turning
off, those focus rings as

305
00:17:30.910 --> 00:17:33.490
an example, baking it into
the culture is such that

306
00:17:33.670 --> 00:17:36.550
you say, okay, this is
a thing called focus rings

307
00:17:36.550 --> 00:17:39.130
exist. How can we make
it fit with our aesthetic

308
00:17:39.310 --> 00:17:42.250
without removing it like an
acknowledgement that this is a

309
00:17:42.490 --> 00:17:46.180
required element? You know, links
are underlined here. We don't

310
00:17:46.180 --> 00:17:49.380
change them all to be
not underlined and not blue

311
00:17:49.380 --> 00:17:52.820
and purple. We need to
work within these constraints. Yeah,

312
00:17:52.820 --> 00:17:55.100
I think that's where design
systems come in handy. A

313
00:17:55.100 --> 00:17:57.860
lot of times is that
you can set that at

314
00:17:57.860 --> 00:18:01.490
an organizational level, right? You
can say, okay, here at

315
00:18:01.490 --> 00:18:05.030
Optimizely, all of our underlines
are, all of our links

316
00:18:05.030 --> 00:18:07.250
are going to have underlines
and are going to be

317
00:18:07.250 --> 00:18:11.060
a certain color and on
hover and unfocused, they're going

318
00:18:11.060 --> 00:18:13.700
to change this way to
show that they are hovered

319
00:18:13.700 --> 00:18:17.210
or focused. Right. I think
that's a huge benefit of

320
00:18:17.210 --> 00:18:20.720
design systems because that's also
part of the culture of

321
00:18:20.720 --> 00:18:23.240
the company that you can
look at a company's design

322
00:18:23.240 --> 00:18:26.000
system, something I love doing.
You can look at any

323
00:18:26.000 --> 00:18:28.190
company's design system and get
a sense of what they

324
00:18:28.190 --> 00:18:31.280
value, right? You can look
at their components and see

325
00:18:31.850 --> 00:18:34.940
are they paying attention to
accessibility? Are they calling out

326
00:18:34.940 --> 00:18:39.080
the keyboard interaction needed? Have
they set a standard for

327
00:18:39.080 --> 00:18:42.020
all of their links, all
of their buttons, have they

328
00:18:42.020 --> 00:18:44.420
also set a standard for
the different States, how they

329
00:18:44.420 --> 00:18:48.110
look and know focus versus
hover versus disabled, et cetera.

330
00:18:48.830 --> 00:18:51.800
I think that's, that's part
of my goal here, Optimizely.

331
00:18:51.800 --> 00:18:54.200
And I think, I hope
it's part of everyone's goal.

332
00:18:54.200 --> 00:18:57.680
Whenever they're building out component
libraries and design systems that

333
00:18:58.610 --> 00:19:01.520
by doing so you're baking
into the culture of the

334
00:19:01.520 --> 00:19:07.220
company and active, conscious commitment
to accessibility. Can you talk

335
00:19:07.220 --> 00:19:11.660
about the relationship or the
difference between design systems and

336
00:19:11.660 --> 00:19:16.220
component libraries? Yeah. So design
systems are kind of the

337
00:19:16.220 --> 00:19:18.830
broader aspect. I guess, if
you want to say that

338
00:19:19.220 --> 00:19:23.180
and component libraries are one
piece of that. So oftentimes

339
00:19:23.180 --> 00:19:27.770
the design system can involve,
you know, usage guidelines. It

340
00:19:27.770 --> 00:19:31.880
can involve color guidelines. One
piece of it might be

341
00:19:31.880 --> 00:19:36.050
the component library. There's usually
plenty of documentation around how

342
00:19:36.050 --> 00:19:39.560
to use the actual components
and a huge part that

343
00:19:39.560 --> 00:19:43.910
I always look for is
that accessibility guidelines section, right?

344
00:19:43.940 --> 00:19:47.930
How, how are they ensuring
that people who consume either

345
00:19:47.930 --> 00:19:53.330
the component library or, you
know, maybe it's the content

346
00:19:53.330 --> 00:19:56.930
of your site, right? Not
everything from an accessibility standpoint

347
00:19:57.290 --> 00:20:01.400
is actually technical. Sometimes it's,
you know, how, why do

348
00:20:01.400 --> 00:20:04.040
you make your content? It's
a lot easier for people

349
00:20:04.040 --> 00:20:06.950
to read in a narrow
column than it is to

350
00:20:06.950 --> 00:20:10.850
read across an entire laptop
screen, especially if they have

351
00:20:11.480 --> 00:20:15.710
no, maybe mental or cognitive
disability that prevents it from

352
00:20:15.710 --> 00:20:18.860
being very easy to read
long paragraphs of texts, that

353
00:20:18.860 --> 00:20:23.210
span wide areas. And so
I think that design system

354
00:20:23.360 --> 00:20:27.110
can include the component library,
but also lots of documentation

355
00:20:27.110 --> 00:20:29.780
around how do we make
this usable and not just

356
00:20:29.780 --> 00:20:33.080
accessible? One of the things
that you talk about in

357
00:20:33.080 --> 00:20:37.730
your presentation scaling accessibility is
one of the great things

358
00:20:37.730 --> 00:20:39.800
about component libraries is that
when you make a change,

359
00:20:39.800 --> 00:20:43.010
the whole ecosystem, you know,
gets it all the consumers

360
00:20:43.010 --> 00:20:45.410
get the benefit, but then
you also pointed out that

361
00:20:45.410 --> 00:20:49.570
that's exactly what's wrong with
component. Yeah, exactly. It's a

362
00:20:49.570 --> 00:20:53.500
double edged sword. It's very,
it can be very lucrative

363
00:20:53.500 --> 00:20:58.330
and it can be very
efficient in scaling accessibility fixes,

364
00:20:58.330 --> 00:21:02.140
right? Like recently I can
fix the focus state of

365
00:21:02.140 --> 00:21:05.380
our inputs. And now in
our application, every single input

366
00:21:05.380 --> 00:21:08.170
has a much better focus
state. We've brought back a

367
00:21:08.170 --> 00:21:13.660
better blue focus ring, but
same way, right? Some developer

368
00:21:13.660 --> 00:21:18.130
or someone else contributing tomorrow
could accidentally remove that focus

369
00:21:18.130 --> 00:21:21.790
state. And suddenly every input
in our application won't have

370
00:21:21.790 --> 00:21:25.540
a focus state anymore. And
so it's definitely a very

371
00:21:26.650 --> 00:21:32.260
careful balance between who has
the ability to make changes.

372
00:21:32.530 --> 00:21:35.560
How are you testing visually,
especially to make sure that

373
00:21:35.560 --> 00:21:40.600
you're not degrading the experience,
but I still absolutely think

374
00:21:40.600 --> 00:21:45.820
component libraries are insanely helpful
to any organization because you

375
00:21:45.820 --> 00:21:50.470
do get the ability to
scale these changes and make

376
00:21:50.470 --> 00:21:53.290
one fix in one place
and see it propagate throughout

377
00:21:53.290 --> 00:21:58.020
the entire application. So you
break it down with, with

378
00:21:58.020 --> 00:22:01.410
the, the, the eye towards
an accessibility win into kind

379
00:22:01.410 --> 00:22:06.360
of three main categories, visuals,
screen readers and keyboard navigation.

380
00:22:06.720 --> 00:22:09.900
The obvious thing that I
think that component libraries offer

381
00:22:09.900 --> 00:22:13.170
quickly and easily is, is
visuals and consistency. Right? So

382
00:22:13.170 --> 00:22:15.480
then there's some problem areas
that happen in the visual

383
00:22:15.480 --> 00:22:20.730
space. Yeah, definitely. I think
it's very easy to come

384
00:22:20.730 --> 00:22:25.230
across contrast issues without even
thinking about it. Right. A

385
00:22:25.230 --> 00:22:28.800
lot of the components that
you might build will have

386
00:22:28.800 --> 00:22:32.400
an option to specify the
color or, you know, change

387
00:22:32.400 --> 00:22:35.670
something about what style text
is being used. Is it

388
00:22:35.670 --> 00:22:38.790
gray text or black text?
And I think that can

389
00:22:38.790 --> 00:22:42.600
definitely introduce a lot of
issues around contrast. And so

390
00:22:43.230 --> 00:22:44.880
one of the things I
talk about in that talk

391
00:22:44.880 --> 00:22:47.970
is, you know, taking advantage
of something like react prop

392
00:22:47.970 --> 00:22:51.570
types to limit what the
user can actually supply as

393
00:22:51.570 --> 00:22:54.480
a color to that component.
And that's, again, it's the

394
00:22:54.480 --> 00:22:58.500
beauty of component libraries. It's
your chance to give just

395
00:22:58.500 --> 00:23:02.340
enough control to developers, to
be able to use that

396
00:23:02.340 --> 00:23:06.150
component in multiple spaces, but
you can also limit it

397
00:23:06.240 --> 00:23:09.450
the random amount to prevent
any accidents, right? We don't

398
00:23:09.450 --> 00:23:14.190
want people to unknowingly create
accessibility issues. And if you

399
00:23:14.190 --> 00:23:16.560
go and solve these problems
for everyone in one place,

400
00:23:16.560 --> 00:23:19.170
you solve them for everyone.
You know, if your buttons

401
00:23:19.200 --> 00:23:21.930
in your component library, get
their focus and hover States,

402
00:23:21.930 --> 00:23:24.960
right. Then that can flow
through and almost cascade into

403
00:23:24.960 --> 00:23:30.660
other other components. Yeah, exactly.
That's why I definitely recommend

404
00:23:30.660 --> 00:23:33.840
focusing when you are, you
know, in this process of

405
00:23:33.840 --> 00:23:36.900
building out an accessibility culture
and you're looking at your

406
00:23:36.900 --> 00:23:39.810
component library. I think it's
very daunting. I mean, when

407
00:23:39.810 --> 00:23:43.260
I came into Optimizely, we
had, I want to say

408
00:23:43.260 --> 00:23:47.750
it's at least 75 80
and looking at that whole

409
00:23:47.750 --> 00:23:49.880
list and trying to think,
okay, where do I start?

410
00:23:50.030 --> 00:23:52.880
Right out of all of
these components? What do I

411
00:23:52.880 --> 00:23:56.000
make accessible first? And I
think I've mentioned this in

412
00:23:56.000 --> 00:23:58.730
my talk as well. I
took a look and saw,

413
00:23:59.690 --> 00:24:02.360
you know, which components are
used the most often and

414
00:24:02.360 --> 00:24:07.430
which are the kind of
base underlying components that propel

415
00:24:07.430 --> 00:24:12.470
a lot of other components
forward. So buttons, inputs, links.

416
00:24:12.530 --> 00:24:16.280
A lot of that stuff
is a used all over

417
00:24:16.280 --> 00:24:19.790
the place in our application.
And B powers, a lot

418
00:24:19.790 --> 00:24:24.380
of other larger components that
are grouped together of these

419
00:24:24.380 --> 00:24:26.630
buttons and inputs like a
date picker date picker is

420
00:24:26.630 --> 00:24:29.510
a perfect example. And so
by making sure that the

421
00:24:29.510 --> 00:24:31.790
inputs and the buttons are
accessible, I can at least

422
00:24:31.790 --> 00:24:35.260
get a little bit further
on the date picker. Another

423
00:24:35.260 --> 00:24:37.330
example I thought was good
in your presentation was the

424
00:24:37.330 --> 00:24:39.850
discussion of drop-downs. I see
a lot of people custom

425
00:24:39.850 --> 00:24:44.020
creating drop-downs where there's like
the, the text box looking

426
00:24:44.020 --> 00:24:46.000
thing with the Chevron that
points down and then you

427
00:24:46.000 --> 00:24:48.550
click it and then the
menu pops open and maybe

428
00:24:48.550 --> 00:24:51.010
they, they paint the whole
thing from scratch. Now you

429
00:24:51.010 --> 00:24:54.220
had said at the beginning
that the best Aria stuff

430
00:24:54.220 --> 00:24:57.040
is minimal Aria, but Aria
has these concepts of like

431
00:24:57.220 --> 00:24:59.800
expanded, is this menu open
or not? Is that a

432
00:24:59.800 --> 00:25:02.800
pop up or not? When
you set those, what does

433
00:25:02.800 --> 00:25:04.960
that really mean? Is that
helping a screen reader? Does

434
00:25:04.960 --> 00:25:08.410
that automatically set up keyboard
findings? What do I get

435
00:25:08.410 --> 00:25:12.640
when I go and fill
out those Aria properties? Yeah.

436
00:25:12.640 --> 00:25:16.990
So there's probably a misconception
that will that setting those

437
00:25:16.990 --> 00:25:20.860
REO properties automatically gives you
keyboard interaction, just not the

438
00:25:20.860 --> 00:25:24.880
case. It is mainly helping
screen readers. So for something

439
00:25:24.880 --> 00:25:28.420
like a dropdown, when you
say Aria expanded or you're

440
00:25:28.420 --> 00:25:33.400
telling the dropdown, what is
the current active descendant? Like,

441
00:25:33.400 --> 00:25:38.740
what is my fake focus
on? And that's all information

442
00:25:38.740 --> 00:25:41.860
to the screen reader to
let it know what's happening

443
00:25:41.950 --> 00:25:47.050
right behind the scenes, which
item is getting the focus,

444
00:25:48.160 --> 00:25:52.720
is your menu open or
not. Right? And so the,

445
00:25:53.110 --> 00:25:55.480
yeah, sadly it's not, it's
not a magical out of

446
00:25:55.480 --> 00:25:59.140
the box. Answer that adding
Arya properties will make it

447
00:25:59.140 --> 00:26:02.770
completely keyboard accessible. That's a
whole nother level of work

448
00:26:02.800 --> 00:26:05.350
that does need to be
done. Right? You have to

449
00:26:05.350 --> 00:26:07.390
tell it, you know, you
have to tell the component

450
00:26:07.390 --> 00:26:10.330
to listen for the up
and down arrow keys and

451
00:26:10.330 --> 00:26:13.960
ensure that you are setting
that fo focus, the active

452
00:26:13.960 --> 00:26:17.560
descendant properly, depending on if
people are going up or

453
00:26:17.560 --> 00:26:20.710
down with the arrow keys,
Is there a guidance on

454
00:26:20.710 --> 00:26:24.430
how these interactions should be?
Because just as we, as,

455
00:26:24.850 --> 00:26:27.400
as sighted people go and
see a calendar and we

456
00:26:27.400 --> 00:26:29.590
figure out what to click
on. Cause it, it, you

457
00:26:29.590 --> 00:26:32.890
know, it generally looks like
a calendar. I wonder if

458
00:26:32.890 --> 00:26:36.730
there is an agreement amongst
date pickers or list pickers

459
00:26:36.730 --> 00:26:40.840
that like pushing down should
pop the dropdown open, or

460
00:26:40.840 --> 00:26:44.310
maybe you push Alton down
or does it, or does

461
00:26:44.310 --> 00:26:46.410
someone have to learn that
with every single site that

462
00:26:46.410 --> 00:26:51.470
they go to? Well, from
the developer side, if you

463
00:26:51.470 --> 00:26:54.860
are developing these components from
scratch, you'll probably need to

464
00:26:54.860 --> 00:26:58.010
do the work to learn
what the expected interaction is,

465
00:26:58.340 --> 00:27:04.160
but that expected interaction is
pretty standardized. Okay. WCG mentions

466
00:27:04.160 --> 00:27:06.050
it. There are plenty of
other sites that will kind

467
00:27:06.050 --> 00:27:09.590
of give you these really
nice guides to, you know,

468
00:27:09.590 --> 00:27:12.110
how to interact with a
drop down, how to interact

469
00:27:12.110 --> 00:27:18.140
with a date picker. So
it's authorizing practices. Yeah, exactly.

470
00:27:18.140 --> 00:27:20.540
Exactly. So you, as a
developer will need to figure

471
00:27:20.540 --> 00:27:24.230
out like you shouldn't be
reinventing the wheel or inventing

472
00:27:24.230 --> 00:27:26.930
a square when it should
be a wheel, right. You

473
00:27:26.930 --> 00:27:29.120
want to make sure you
are keeping with the consistent

474
00:27:29.120 --> 00:27:33.860
pattern because people who are
using keyboards to interact with

475
00:27:33.860 --> 00:27:37.010
a site or using the
screen reader are going to

476
00:27:37.010 --> 00:27:40.370
have a mentality of how
it should be behaving. Right.

477
00:27:40.370 --> 00:27:43.070
And you don't want to
break that pattern. It's kind

478
00:27:43.070 --> 00:27:45.500
of going along this line
to have, you know, just

479
00:27:45.500 --> 00:27:49.430
because it's accessible doesn't mean
it's usable and vice versa,

480
00:27:49.460 --> 00:27:52.340
right? So you definitely want
to make sure you cover

481
00:27:52.340 --> 00:27:54.710
both sides of that. Can
I use it with the

482
00:27:54.710 --> 00:27:58.280
keyboard? Is it accessible that
way, but am I also

483
00:27:58.280 --> 00:28:02.630
matching, you know, screen reader,
users expectations so that it's

484
00:28:02.630 --> 00:28:06.260
still usable And is it
real, is it usable via

485
00:28:06.260 --> 00:28:09.230
touch? So often I find
people focus so much on

486
00:28:09.230 --> 00:28:11.990
keyboard and mouse, and then
they find that an item

487
00:28:11.990 --> 00:28:16.370
isn't even touchable. Yeah. Tap
targets are a huge issue,

488
00:28:16.370 --> 00:28:20.180
right? We use button icons
all the time everywhere, and

489
00:28:20.180 --> 00:28:22.520
then I've had it happen
to me multiple times. I'm

490
00:28:22.520 --> 00:28:24.590
sure it's happened to you
as well, where you pull

491
00:28:24.590 --> 00:28:27.230
up a site on your
phone and you can't ever

492
00:28:27.230 --> 00:28:29.480
actually click on the thing
you want to click on.

493
00:28:29.480 --> 00:28:32.960
It keeps clicking on something
else, right? That's a huge

494
00:28:32.960 --> 00:28:35.660
issue. And it's a, it's
a usability issue and it's

495
00:28:35.660 --> 00:28:40.130
an accessibility issue. How do
I talk my bosses down

496
00:28:40.130 --> 00:28:43.100
from them? Thinking that by
bringing up these issues of

497
00:28:43.100 --> 00:28:46.790
accessibility, of keyboards, of, you
know, even the small things

498
00:28:46.790 --> 00:28:51.650
around accessibility, keyboard, accessibility, it's
going to then increase the,

499
00:28:52.190 --> 00:28:54.050
the budget. And it's going
to double the amount of

500
00:28:54.050 --> 00:28:56.030
time that we're going to
spend on this thing. How

501
00:28:56.030 --> 00:28:59.030
do I keep them from
just saying no? Yeah. That's

502
00:28:59.030 --> 00:29:05.300
the magic question. Right? My
experience so far has been

503
00:29:05.480 --> 00:29:09.710
reminding people what the negative
effects are if we don't

504
00:29:09.710 --> 00:29:14.090
invest in this. So I
recently gave a presentation to

505
00:29:14.150 --> 00:29:17.540
our entire company and, you
know, tried to point out

506
00:29:17.540 --> 00:29:21.530
that if our tool isn't
accessible, first off, we are

507
00:29:21.530 --> 00:29:24.980
limiting who can work at
Optimizely, right? If it would

508
00:29:24.980 --> 00:29:27.230
be very hard to work
here as a developer, if

509
00:29:27.620 --> 00:29:30.380
the product itself were not
accessible and you weren't able

510
00:29:30.380 --> 00:29:34.340
to develop our product. The
other side of that though,

511
00:29:34.340 --> 00:29:37.490
is I think this is
where a lot of B2B

512
00:29:37.490 --> 00:29:40.070
companies kind of lose sight.
You know, if you're a

513
00:29:40.070 --> 00:29:43.240
B to C company, it's
a lot easier to say,

514
00:29:43.240 --> 00:29:47.680
okay, if you know, Gmail
is not accessible, millions and

515
00:29:47.680 --> 00:29:50.290
billions of people are not
able to use it. Right.

516
00:29:51.040 --> 00:29:55.780
But from an optimization standpoint,
we were kind of separated

517
00:29:55.780 --> 00:29:58.300
from the end user. So
there's this middleman, which is

518
00:29:58.300 --> 00:30:02.020
our, you know, our customers
and they are the ones

519
00:30:02.020 --> 00:30:05.860
who have people using the
tool. So if our tool

520
00:30:05.860 --> 00:30:09.100
is not accessible, we actually
have a ripple effect, right?

521
00:30:09.130 --> 00:30:12.130
We are limiting who can
work at our customer's companies

522
00:30:12.700 --> 00:30:15.910
and who can be successful
there. And I think that

523
00:30:15.910 --> 00:30:18.610
was kind of a key
aha moment for a lot

524
00:30:18.610 --> 00:30:21.370
of people where they realized,
you know, it doesn't just

525
00:30:21.370 --> 00:30:25.450
affect us. We have to
be selfless and not worry

526
00:30:25.450 --> 00:30:28.930
about, Oh, it only matters
who we can hire. We

527
00:30:28.930 --> 00:30:31.960
are also affecting who our
customers can hire and who

528
00:30:31.960 --> 00:30:35.350
can be successful at those
jobs. I think it's a

529
00:30:35.350 --> 00:30:38.410
common reminder. People need a
reminder that this is bigger

530
00:30:38.410 --> 00:30:41.800
than themselves and effects a
lot more than just a

531
00:30:41.920 --> 00:30:44.910
small percentage of the population.
Yeah. I feel like the

532
00:30:44.910 --> 00:30:47.700
ripple effect is the, is
that that's the strategy, right?

533
00:30:47.730 --> 00:30:50.280
That, that do it wrong
here. I do it wrong

534
00:30:50.280 --> 00:30:52.530
as a component library, do
it wrong as a platform

535
00:30:52.920 --> 00:30:55.410
company that sells your platform
to other companies and the

536
00:30:55.410 --> 00:30:58.500
ripple effect is going to
be not just exclusionary, but

537
00:30:58.500 --> 00:31:00.750
it's going to just simply
prevent people from being successful

538
00:31:00.750 --> 00:31:03.170
on your platform. So it's
got to be a, a

539
00:31:03.230 --> 00:31:05.970
user story. It's gotta be
a, a line item. It's

540
00:31:05.970 --> 00:31:09.450
gotta be fundamental. Yes, absolutely.
I would love to get

541
00:31:09.450 --> 00:31:13.020
to the point where it's
treated like testing, right? No

542
00:31:13.020 --> 00:31:15.840
developer ever feels like they
could check in code without

543
00:31:15.840 --> 00:31:18.300
reading tests. I would love
to get to the point

544
00:31:18.300 --> 00:31:22.020
where developers never feel like
they could check something in

545
00:31:22.020 --> 00:31:25.860
without it being accessible to
that takes time. Obviously it

546
00:31:25.860 --> 00:31:28.590
has to be integrated into
the culture, integrated into the

547
00:31:28.590 --> 00:31:31.860
workflow. You know, we need
our QA team to be

548
00:31:31.860 --> 00:31:35.220
testing for accessibility as well.
But I have a lot

549
00:31:35.220 --> 00:31:38.160
of faith that it will
happen. I appreciate that. I

550
00:31:38.160 --> 00:31:41.850
feel like there's an organizational
maturity model though. Like when

551
00:31:41.850 --> 00:31:43.680
you said, well, yeah, it
should just be like checking

552
00:31:43.680 --> 00:31:46.600
in tests. I'm sure someone
listening to the show, Winston

553
00:31:46.640 --> 00:31:48.360
was like, Oh, we haven't
gotten there yet. We're not

554
00:31:48.360 --> 00:31:51.780
checking in test yet or
whatever. I absolutely appreciate that.

555
00:31:51.780 --> 00:31:54.960
At certain times, you're not
able to dedicate the energy

556
00:31:54.960 --> 00:31:58.200
to this. Right. There's a
lot of stuff that you

557
00:31:58.200 --> 00:32:00.810
need to get going first
before you can even think

558
00:32:00.810 --> 00:32:04.050
about, maybe even think about
tests, much less accessibility desk,

559
00:32:04.620 --> 00:32:08.700
but from what I've experienced,
it is so much harder

560
00:32:08.850 --> 00:32:12.510
to put it in after
the fact, right. One of

561
00:32:12.510 --> 00:32:17.610
my old coworkers who's does
amazing talks with the community

562
00:32:17.640 --> 00:32:24.390
around accessibility, Cordelia. She always,
she has this analogy where

563
00:32:24.390 --> 00:32:27.450
it's putting accessibility in after
it's like trying to put

564
00:32:27.450 --> 00:32:30.270
the blueberries in a blueberry
muffin after you've baked it,

565
00:32:31.170 --> 00:32:33.870
right. It's like virtually impossible.
You're going to squish the

566
00:32:33.870 --> 00:32:36.240
blueberries. They're not going to
be throughout the whole muffin.

567
00:32:36.270 --> 00:32:39.650
It's not going to end
well. And so that's always

568
00:32:39.650 --> 00:32:43.250
my kind of warning to
people who are in that

569
00:32:43.280 --> 00:32:47.720
early stage, where they're making
the conscious effort not to

570
00:32:47.720 --> 00:32:50.540
introduce accessibility then because they
have other things to worry

571
00:32:50.540 --> 00:32:54.410
about. And I think as
much as possible, even if

572
00:32:54.410 --> 00:32:57.320
it's a little things, right,
like thinking about the focus

573
00:32:57.320 --> 00:32:59.840
state of your buttons and
your links and your inputs,

574
00:32:59.840 --> 00:33:02.840
which are like 90% of
applications, most of the time,

575
00:33:03.350 --> 00:33:05.510
at least think about that.
Because if you have to

576
00:33:05.510 --> 00:33:07.760
go back after the fact
and try to bake the

577
00:33:07.760 --> 00:33:10.760
accessibility and after it's just
not going to end well,

578
00:33:11.830 --> 00:33:14.020
Well, I going to make
sure that we put links

579
00:33:14.020 --> 00:33:17.110
in the show notes to
your talk at react, Boston

580
00:33:17.110 --> 00:33:22.180
on scaling accessibility, and folks
can communicate with you on

581
00:33:22.210 --> 00:33:27.190
Twitter and they can check
out your products@optimizely.com. Thank you

582
00:33:27.190 --> 00:33:30.430
so much for chatting with
me today. Thank you so

583
00:33:30.430 --> 00:33:33.610
much, Scott. This has been
another episode of Hanselminutes and

584
00:33:33.610 --> 00:33:46.780
we'll see you again next
week. <inaudible>.

