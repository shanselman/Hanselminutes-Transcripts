WEBVTT FILE

1
00:00:00.180 --> 00:00:03.360
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.360 --> 00:00:06.300
they make the show possible.
Today's show is sponsored by

3
00:00:06.300 --> 00:00:10.500
developer express, become a UI
superhero with dev express controls

4
00:00:10.500 --> 00:00:15.030
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.420 --> 00:00:19.500
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.500 --> 00:00:23.610
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.700 --> 00:00:45.170
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
<inaudible>. Hi, this is Scott

8
00:00:45.170 --> 00:00:47.630
Hanselman. This is another episode
of Hansel minutes. And today

9
00:00:47.630 --> 00:00:51.080
I'm talking with Jafar Soltani
he's a lead software engineer

10
00:00:51.080 --> 00:00:54.590
at rare out of the
UK. How are you? I'm

11
00:00:54.590 --> 00:00:58.130
very well, thank you. How
are you doing lovely. So

12
00:00:58.130 --> 00:01:00.650
you've been at rare for,
for a while now. 10

13
00:01:00.650 --> 00:01:03.770
years, it looks like, yeah,
I joined re January because

14
00:01:03.890 --> 00:01:06.530
as an, an eight, which
is almost 10 years now,

15
00:01:06.890 --> 00:01:08.990
how many games have you
worked on in 10 years

16
00:01:09.650 --> 00:01:17.030
of probably five or six
games. Wow. Games take years.

17
00:01:17.030 --> 00:01:20.210
Don't they? Yeah, absolutely. I
mean, I'm not like by

18
00:01:20.270 --> 00:01:22.490
no means I'm the, one
of the oldest people here.

19
00:01:22.490 --> 00:01:24.770
Like we have people who've
been here since the beginning,

20
00:01:24.770 --> 00:01:27.830
like 25 or even longer
than that 25 years or

21
00:01:27.830 --> 00:01:31.040
more. Oh, wow. So yeah,
they they've seen everything they've

22
00:01:31.040 --> 00:01:35.840
seen like from the old
times into now, what is

23
00:01:35.840 --> 00:01:39.050
a triple a game? I
hear that term all the

24
00:01:39.050 --> 00:01:42.710
time when I read, you
know, game journalism. And so

25
00:01:42.770 --> 00:01:47.570
AAA games are the games
that you usually make for,

26
00:01:47.580 --> 00:01:50.630
for consoles. You, you can
always make them for PC

27
00:01:50.630 --> 00:01:54.950
as well. And they are
the ones that really push

28
00:01:54.980 --> 00:01:59.450
the limit in terms of
technology. Graphics is there is

29
00:01:59.450 --> 00:02:03.440
a main one. So it's
very important. The performance of

30
00:02:03.440 --> 00:02:06.290
the game is very important.
So there's a lot of

31
00:02:06.290 --> 00:02:11.150
optimization going on and people
try to basically make the

32
00:02:11.150 --> 00:02:14.570
best thing possible. It's kind
of turns into an art

33
00:02:14.660 --> 00:02:17.930
as opposed to like just
a, a product that you

34
00:02:18.170 --> 00:02:21.170
release. Cause people are proud
of it when they, when

35
00:02:21.170 --> 00:02:23.060
they release it and they
want to show to the

36
00:02:23.060 --> 00:02:26.810
players the best vision possible.
How many people will work

37
00:02:26.810 --> 00:02:28.550
on a game like that?
Like you're what are you

38
00:02:28.550 --> 00:02:31.480
working on right now? So
we are working on CFA

39
00:02:31.480 --> 00:02:38.510
thieves for Xbox one X,
one X and PC. But

40
00:02:39.260 --> 00:02:41.450
over the years, a number
of people working on these

41
00:02:41.450 --> 00:02:44.990
games have increased massively right
now. I think for us,

42
00:02:44.990 --> 00:02:48.970
we have about 150 people
working on this. Oh my,

43
00:02:49.220 --> 00:02:50.450
how are you working on
this for the past three

44
00:02:50.450 --> 00:02:54.410
years? Seriously? Yeah. It's been
a, it's been a long

45
00:02:54.410 --> 00:02:56.990
journey. That must be hard
because I know that they

46
00:02:56.990 --> 00:03:00.610
announced the sea of thieves
with like a big, Big

47
00:03:00.610 --> 00:03:04.330
announcement and big videos and
everything. And for, for basically

48
00:03:04.330 --> 00:03:06.970
two years and six months
before that you're working on

49
00:03:06.970 --> 00:03:11.280
it quietly without telling anyone.
Yeah. Yeah, exactly. That's and

50
00:03:11.280 --> 00:03:13.550
that's like, that's one of,
some of, sometimes it's a,

51
00:03:13.550 --> 00:03:15.780
it's a joy, but it's
also very hard because you

52
00:03:15.780 --> 00:03:18.330
can't really tell other people
and your friends might be

53
00:03:18.330 --> 00:03:21.390
asking you. It's very hard
not to tell them very

54
00:03:21.390 --> 00:03:24.780
much about the game, but
with this game, the difference

55
00:03:24.780 --> 00:03:29.790
is that we are, we
are, we are as opposed

56
00:03:29.790 --> 00:03:31.650
to doing a one big
release at the end, which

57
00:03:31.650 --> 00:03:35.640
is the main characteristic of
these AAA games. We have

58
00:03:35.640 --> 00:03:40.920
been releasing it to, to,
we call it retail environment.

59
00:03:40.950 --> 00:03:44.760
It's equivalent of production environment
for over two years. But

60
00:03:44.760 --> 00:03:47.340
at the beginning it was
just people at Greer who

61
00:03:47.340 --> 00:03:51.840
were playing the games at
home. Ah, okay. So rather

62
00:03:51.840 --> 00:03:55.320
than kind of a traditional
waterfall where like you say,

63
00:03:55.320 --> 00:03:57.630
there's a big, there's a
big release and then maybe

64
00:03:57.630 --> 00:04:02.130
some patches afterwards you're using
continuous delivery on a AAA

65
00:04:02.130 --> 00:04:04.740
video game. That's what we
are trying to do. Yes.

66
00:04:04.740 --> 00:04:08.250
And it is very hard
and it takes time. Interesting.

67
00:04:08.520 --> 00:04:10.440
Well, let me back up
to some of the basics.

68
00:04:10.440 --> 00:04:12.870
You have 150, 150 people
working in this. You have

69
00:04:12.870 --> 00:04:16.050
artists and musicians and you
have build engineers and you

70
00:04:16.050 --> 00:04:20.160
have core engine engineer, all
different flavors of engineers. Do

71
00:04:20.160 --> 00:04:23.100
they open up visual studio
and build the thing and

72
00:04:23.100 --> 00:04:25.590
it's like one giant project
or is it a hundred

73
00:04:25.590 --> 00:04:27.600
different projects? How does it
get built? And can I

74
00:04:27.600 --> 00:04:31.530
build it on my lap?
So yeah, this is a

75
00:04:31.530 --> 00:04:34.860
very good question. Yes. They
all have to build the

76
00:04:34.860 --> 00:04:38.070
game is generally because it's
written in C plus plus

77
00:04:39.450 --> 00:04:42.090
as opposed to like Java
or C sharp or other

78
00:04:42.090 --> 00:04:46.020
higher level languages. It is
reasonably C plus plus as

79
00:04:46.020 --> 00:04:50.520
one big project. So it,
and it takes a long

80
00:04:50.520 --> 00:04:53.910
time to compile. So you
need to have a powerful

81
00:04:54.630 --> 00:04:59.270
PCs to, to build the
game. And it only takes

82
00:04:59.300 --> 00:05:02.400
a while. And these are
part of the challenges because

83
00:05:02.520 --> 00:05:05.310
at the same time, people
want to get fast feedback

84
00:05:05.790 --> 00:05:08.250
about making the change, but
to say it only takes

85
00:05:08.250 --> 00:05:11.760
a long time to compile
it for instance. So there

86
00:05:11.760 --> 00:05:14.490
are a lot of challenges
in developing games that you

87
00:05:14.490 --> 00:05:18.000
rarely see when you're developing,
let's say web applications or

88
00:05:18.000 --> 00:05:21.480
other types of applications that
are a lot smaller Is

89
00:05:21.480 --> 00:05:25.140
the primary challenge that it
is so big or is

90
00:05:25.140 --> 00:05:27.180
the primary challenge that it's
in C plus plus. And

91
00:05:27.180 --> 00:05:29.700
you have to think about
memory leaks or is that

92
00:05:29.820 --> 00:05:32.990
a thing of the past?
No, no, definitely. Like you

93
00:05:33.000 --> 00:05:34.080
have to think of what
all of them, there are,

94
00:05:34.110 --> 00:05:36.930
there are many challenges and
we can go through them.

95
00:05:36.930 --> 00:05:40.110
But just to give you
some examples, like compiling, the

96
00:05:40.110 --> 00:05:44.010
C plus plus is, is
obviously reducing the time is

97
00:05:44.100 --> 00:05:46.860
one of the biggest challenges.
Also the games are quite

98
00:05:46.860 --> 00:05:52.500
big, like Monte gigabytes, like
there are games that are

99
00:05:52.500 --> 00:05:54.300
out now for instance, Onyx
box one, that there are

100
00:05:54.300 --> 00:05:58.640
about a hundred gigabyte Homer.
So imagine that you want

101
00:05:58.640 --> 00:06:02.450
to build this and just,
just transfer this around that

102
00:06:02.510 --> 00:06:05.360
we have, we have a
build farm that tries to

103
00:06:05.420 --> 00:06:08.570
make the package, build the
game, making the package, run

104
00:06:08.570 --> 00:06:11.330
some tests on it. And
we can't just have one

105
00:06:11.330 --> 00:06:13.820
machine doing all of it.
So we try to parallelize

106
00:06:13.880 --> 00:06:15.710
some of these work, but
obviously this means that we

107
00:06:15.710 --> 00:06:19.280
have to transfer these packages
across. And sometimes it's even

108
00:06:19.280 --> 00:06:21.530
faster to do the work
on one machine as opposed

109
00:06:21.530 --> 00:06:23.780
to paralyzing it. So these
are all the challenges there.

110
00:06:24.490 --> 00:06:26.710
Okay. Well, when you say
build though, I think it's

111
00:06:26.710 --> 00:06:29.260
different with a game because
the idea that like, there's

112
00:06:29.260 --> 00:06:32.860
the C plus plus code,
you're not compiling 100 gigabytes

113
00:06:32.890 --> 00:06:37.210
of code. You've got cutscenes,
you've got renders, you've got

114
00:06:37.600 --> 00:06:41.860
multiple textures, like building is,
is more than just code

115
00:06:41.860 --> 00:06:45.160
isn't it? That's absolutely right.
Yes. Sorry. And like, if

116
00:06:45.160 --> 00:06:46.930
you want to kind of
think about it and maybe

117
00:06:47.290 --> 00:06:51.070
the executable that is basically
the code is about maybe

118
00:06:51.070 --> 00:06:55.300
a hundred, 150 megabyte, which
is about basically less than

119
00:06:55.300 --> 00:06:58.570
1% of the total size
the rest are. Or do

120
00:06:58.570 --> 00:07:03.310
you find the sound, the
music, the, the effect, the,

121
00:07:03.310 --> 00:07:06.340
the videos, as you said,
and just general art, art

122
00:07:06.370 --> 00:07:10.180
assets, like the textures and
all of the animation, all

123
00:07:10.180 --> 00:07:12.880
of this other stuff, those
are the ones that take

124
00:07:12.880 --> 00:07:16.660
the biggest amount of space.
And we need to convert

125
00:07:16.660 --> 00:07:20.290
them from, like, let's say
they are being developed or

126
00:07:20.290 --> 00:07:23.590
authored in. Let's say, I
don't know, three D studio

127
00:07:23.590 --> 00:07:26.650
max or Maya or other.
These are some of tools,

128
00:07:27.400 --> 00:07:30.440
but we can't just run,
run them without format on

129
00:07:30.440 --> 00:07:33.280
the, on the console. So
we need to convert them

130
00:07:33.280 --> 00:07:36.970
to format that can be
played and displayed on a

131
00:07:36.970 --> 00:07:39.490
console. So there's a lot
of work there as well.

132
00:07:39.970 --> 00:07:45.040
Okay. And that takes longer
than compiling. Ah, okay. Can

133
00:07:45.040 --> 00:07:48.430
you optimize that so that
the person locally is only

134
00:07:48.430 --> 00:07:51.460
just doing the Delta? Like
if I change one line

135
00:07:51.460 --> 00:07:53.710
of code, do I hit
control shift B and then

136
00:07:53.710 --> 00:07:59.140
come back tomorrow? No, definitely.
These are the things that

137
00:07:59.140 --> 00:08:00.940
we try to try to
optimize. Cause if you think

138
00:08:00.940 --> 00:08:04.090
about it, like when the
game reaches that escape, what

139
00:08:04.090 --> 00:08:06.640
you're working on is, is
probably one person or even

140
00:08:06.640 --> 00:08:08.320
less than that. So it
doesn't make sense for you

141
00:08:08.320 --> 00:08:10.480
to have to generate the
whole a hundred percent if

142
00:08:10.480 --> 00:08:13.530
you're just making 1% change
to that thing. So there's,

143
00:08:13.530 --> 00:08:16.510
there's a plenty of opportunity
to try to optimize for

144
00:08:16.720 --> 00:08:20.560
different things Is the best
way. When you have something

145
00:08:20.560 --> 00:08:23.590
that big, where you're trying
to create a game package

146
00:08:23.590 --> 00:08:26.920
that represents this monolithic application
and the game package, I

147
00:08:26.920 --> 00:08:29.890
assume consists of the C
plus plus code the art,

148
00:08:29.920 --> 00:08:34.330
the audio and video content
to have to decide that

149
00:08:34.330 --> 00:08:36.400
no one will build it
locally, that you should use

150
00:08:36.400 --> 00:08:38.830
the build farm only. Or
do you think there's the

151
00:08:38.830 --> 00:08:40.990
concept of a local build
go away when you're making

152
00:08:40.990 --> 00:08:47.470
something this big, We, people
still have to build local,

153
00:08:47.470 --> 00:08:51.920
especially programmers cause they they're
making changes to the, to

154
00:08:51.920 --> 00:08:54.040
the game. So they need
to compile it again. Let's

155
00:08:54.040 --> 00:08:56.070
say they're making changes to
how render the game. So

156
00:08:56.070 --> 00:09:01.320
they need to compile it
again. Whereas for, for artists,

157
00:09:02.290 --> 00:09:06.480
they, they can use the,
like the latest version that

158
00:09:06.480 --> 00:09:09.540
were built by our bill
form, let's say, and they

159
00:09:09.540 --> 00:09:14.880
can just use that. So
for them it's less of

160
00:09:14.880 --> 00:09:18.510
an issue. They hopefully most
of the times they would

161
00:09:18.510 --> 00:09:21.000
use the output that are
generated from the build farm.

162
00:09:21.360 --> 00:09:25.380
But sometimes like when you're
making changes to assets, you

163
00:09:25.380 --> 00:09:29.010
need some code that goes
along with that because that's

164
00:09:29.010 --> 00:09:32.820
a, you change the format
for some certain assets. So

165
00:09:32.820 --> 00:09:35.010
you need the code, you
can use an older version

166
00:09:35.010 --> 00:09:37.670
of the code, otherwise doesn't
understand the formula. How did

167
00:09:37.670 --> 00:09:41.000
people do this before you
start doing continuous delivery before

168
00:09:41.000 --> 00:09:43.190
you build a build farm?
I know that they were

169
00:09:43.190 --> 00:09:45.260
a render farms and things
to handle the huge amount

170
00:09:45.260 --> 00:09:48.830
of assets. But when, when
someone built the gold master

171
00:09:48.830 --> 00:09:52.730
version, was it just built
on like Anna's laptop? And

172
00:09:52.730 --> 00:09:54.620
then that's where we burn
the CD off of her

173
00:09:54.620 --> 00:09:59.180
laptop. And that's the official
game. Yes. That's a very

174
00:09:59.180 --> 00:10:00.770
veteran. That's how it used
to be. And when I

175
00:10:01.040 --> 00:10:03.470
started working here, that was
exactly that like we had,

176
00:10:03.860 --> 00:10:08.150
our build phone was one
or maybe two PCs and

177
00:10:08.210 --> 00:10:10.100
it was taking in of
like people were not even

178
00:10:10.100 --> 00:10:12.170
bothered making multiple builds a
day. They were just making

179
00:10:12.170 --> 00:10:14.330
a build. Like there was
a concept of nightly built

180
00:10:14.930 --> 00:10:17.780
that basically you accumulate all
the changes throughout the day

181
00:10:17.810 --> 00:10:20.840
and then you build it
overnight. And by following day,

182
00:10:20.840 --> 00:10:22.820
you'd see maybe didn't work
and you have to go

183
00:10:22.820 --> 00:10:24.770
back and try to fix
them. And in the meantime

184
00:10:24.770 --> 00:10:27.230
you accumulated a lot of
changes at the same time.

185
00:10:28.730 --> 00:10:31.820
So, but now to compare
that to now, we have

186
00:10:32.240 --> 00:10:36.110
our build farm is about
a hundred PCs and they

187
00:10:36.110 --> 00:10:40.160
all are like physical disease.
And the other issue like

188
00:10:40.160 --> 00:10:44.120
with 40 cores and SST.
So it is like, I'm

189
00:10:44.120 --> 00:10:47.000
sorry, did you say 40
cores? 40 cores? Yes. Two

190
00:10:47.000 --> 00:10:50.630
CPS 40 cores. Yeah. I
mean the 64 gigabyte of

191
00:10:50.630 --> 00:10:54.470
memory and maybe with one
terabyte of SSD and Vme

192
00:10:54.470 --> 00:10:58.220
drive. So they are quite
beefy. Oh wow. That's a

193
00:10:58.220 --> 00:11:01.040
joke. Yeah. And we are
still struggling. Like we are,

194
00:11:01.520 --> 00:11:04.470
we are like, because basically
the problem is that people

195
00:11:04.470 --> 00:11:06.560
will want to be. What
we promoted for people to

196
00:11:06.560 --> 00:11:09.470
do is to work with
small batches. And by that,

197
00:11:09.470 --> 00:11:12.530
I mean like small, what
can small increments so they

198
00:11:12.540 --> 00:11:16.040
can make a few tweaks,
submit that, get fast feedback

199
00:11:16.040 --> 00:11:19.160
on that and make another
change. So the faster you

200
00:11:19.160 --> 00:11:22.100
can process these changes, the
more changes they're going to

201
00:11:22.100 --> 00:11:26.630
throw at you. So it's
basically a constant battle. Now

202
00:11:26.840 --> 00:11:30.140
you're going to fill in
the hundreds, like a hundred

203
00:11:30.230 --> 00:11:32.150
is fine for a while.
And then people change their

204
00:11:32.150 --> 00:11:34.220
approach. They throw more changes
at it and then a

205
00:11:34.220 --> 00:11:35.930
hundred is not enough anymore.
You have to increase that.

206
00:11:36.920 --> 00:11:39.650
Well, the goal with continuous
delivery, as I understand it

207
00:11:39.650 --> 00:11:43.160
is that the thing you
are continuously delivering needs to

208
00:11:43.160 --> 00:11:46.670
always be shippable. It just
needs to be some level

209
00:11:46.670 --> 00:11:50.510
of quality. So right now
it's a random Tuesday that

210
00:11:50.510 --> 00:11:52.610
we're talking, you should be
able to ship it right

211
00:11:52.610 --> 00:11:55.000
now. Right. It would have,
it would not be user

212
00:11:55.000 --> 00:11:58.140
1.0, but you could ship
it today, right? Yeah. Yes.

213
00:11:58.290 --> 00:12:00.780
And that's, that's definitely our
plan. And that's what we

214
00:12:00.780 --> 00:12:03.510
have been trying to do
is every day we would

215
00:12:03.510 --> 00:12:06.870
have a release candidate. And
at the moment what we

216
00:12:06.870 --> 00:12:10.020
do is we release weekly.
So when we get to

217
00:12:10.020 --> 00:12:12.930
release, we should have in
theory, five candidates that we

218
00:12:12.930 --> 00:12:14.760
choose from, we say, which
one do we do? We

219
00:12:14.760 --> 00:12:18.330
want to ship. But I
mean, in practice sometimes like

220
00:12:19.350 --> 00:12:23.370
incident happens. For instance, people
might make mistakes or due

221
00:12:23.370 --> 00:12:25.830
to some other problems. You
may not get a candidate.

222
00:12:25.830 --> 00:12:29.340
And in those situation we
call these incidents and we,

223
00:12:30.000 --> 00:12:32.190
we don't let any other
changes to go in when

224
00:12:32.220 --> 00:12:35.610
something like this happens. So
we basically lock our Depot.

225
00:12:36.150 --> 00:12:39.960
We prevent anybody making further
changes because potentially they can

226
00:12:39.960 --> 00:12:43.110
make the situation worse by
adding more on top of

227
00:12:43.110 --> 00:12:46.920
that, introducing new failures. So
we basically block everybody from

228
00:12:46.980 --> 00:12:50.040
committing back until we resolve
that issue. We make sure

229
00:12:50.040 --> 00:12:52.710
that we can, we are
shippable again. And when, once

230
00:12:52.710 --> 00:12:54.390
we are, we have a
candidate, then we let other

231
00:12:54.390 --> 00:12:57.540
people to carry on working.
When you said that you

232
00:12:57.540 --> 00:13:00.870
have five candidates, is it
the last five good builds?

233
00:13:00.870 --> 00:13:03.540
And then you just pick
one That's right. So every

234
00:13:03.540 --> 00:13:06.990
day have one candidate. And
like, because we releasing weekly.

235
00:13:07.650 --> 00:13:10.230
So we get five candidates
within that period that the

236
00:13:10.230 --> 00:13:15.210
best case scenario, I think
people who are listening might,

237
00:13:15.600 --> 00:13:19.710
it might have developed with
continuous delivery and continuous integration,

238
00:13:19.740 --> 00:13:20.820
you know, and they may
have done that in the

239
00:13:20.820 --> 00:13:24.060
last three, four or five
years. Some people may have

240
00:13:24.060 --> 00:13:25.890
been doing it as long
as 10 or 15 years

241
00:13:25.890 --> 00:13:29.220
ago. When I was in
banking, we had introduced continuous

242
00:13:29.220 --> 00:13:34.620
delivery around 12, 12 to
15 years ago. Why aren't

243
00:13:34.620 --> 00:13:37.740
games doing this today? Why
is it, why is this

244
00:13:37.740 --> 00:13:43.200
a new thing for, for
AAA video games? That's a

245
00:13:43.200 --> 00:13:47.760
good question. Culture and our
different reasons. I think that's

246
00:13:47.760 --> 00:13:50.430
probably one of them as
well, generally. I mean, one

247
00:13:50.430 --> 00:13:52.440
of the, one of the
problems that like, people are

248
00:13:52.440 --> 00:13:56.880
not feeling comfortable releasing a
game that is incomplete because

249
00:13:56.880 --> 00:14:01.290
it's like it's working progress.
So even for us like

250
00:14:01.530 --> 00:14:04.770
changing, like here, our mindset
to say, is this like

251
00:14:04.770 --> 00:14:08.850
a good, like arguing over
what's the acceptable quality. Cause

252
00:14:08.850 --> 00:14:12.360
if you want to Polish
everything from day one, you

253
00:14:12.360 --> 00:14:15.510
will not have many features
in the game because he

254
00:14:15.510 --> 00:14:17.010
spent a lot of time
polishing a lot of stuff.

255
00:14:17.040 --> 00:14:20.730
So understanding what's an accepted
level of quality is very

256
00:14:20.730 --> 00:14:23.370
hard, especially when there aren't
many features in the game

257
00:14:23.370 --> 00:14:26.310
already as a, as a
way to comparing it against.

258
00:14:27.390 --> 00:14:29.700
So that's one of the
reasons that people tend to

259
00:14:29.700 --> 00:14:33.240
not show their progress until
until the end, when they're

260
00:14:33.300 --> 00:14:36.810
like super proud of it.
So that's, that's one reason.

261
00:14:36.810 --> 00:14:39.990
And also the change we
are making here is because

262
00:14:40.020 --> 00:14:42.510
this is the game. See
your theme supposed to be

263
00:14:43.080 --> 00:14:45.630
a game as a service,
which means like, as opposed

264
00:14:45.630 --> 00:14:47.940
to doing one big release
and maybe few patches, the

265
00:14:47.940 --> 00:14:51.230
idea is that this would
run for many years and

266
00:14:51.260 --> 00:14:54.410
you, you get feedback from
players and you iterate over

267
00:14:54.410 --> 00:14:58.100
them. So if sometimes if
you don't really, I'm not

268
00:14:58.100 --> 00:15:00.350
saying that you don't care
about the feedback, but if

269
00:15:00.380 --> 00:15:02.990
like that's not the model
you want to work with,

270
00:15:03.350 --> 00:15:06.860
then there are less reasons
for you to try to

271
00:15:07.130 --> 00:15:09.980
adopt considerably. Although I would
disagree with that because like,

272
00:15:09.980 --> 00:15:13.100
there are other benefits such
as you don't necessarily crunch.

273
00:15:13.130 --> 00:15:17.300
That's one of the biggest
problems with video games. Usually

274
00:15:17.300 --> 00:15:20.120
towards the end, the last
three months, three, four months

275
00:15:20.180 --> 00:15:24.290
to shipping the game. Like
people work crazy hours. There

276
00:15:24.290 --> 00:15:25.850
are a lot of like
all the time. There are

277
00:15:25.850 --> 00:15:27.710
a lot of crunches and
people at work over the

278
00:15:27.710 --> 00:15:30.890
weekend and people get stressed
a lot and people burn

279
00:15:30.890 --> 00:15:33.650
out. I mean, this has
been mentioned a lot in

280
00:15:34.400 --> 00:15:36.830
the past, so, and that
was just one of the

281
00:15:36.830 --> 00:15:38.750
other reasons that we didn't
want this to be the

282
00:15:38.750 --> 00:15:42.230
case, because we know that
there's like, if you want

283
00:15:42.230 --> 00:15:45.830
to have happier developers, we
can't keep like crunching. Especially

284
00:15:45.830 --> 00:15:47.630
you mentioned, if you want
to release regularly and for

285
00:15:47.630 --> 00:15:50.420
each one you want to
crunch, that's not very sustainable.

286
00:15:51.310 --> 00:15:54.430
So that, that term crunch
that we've all had. I

287
00:15:54.430 --> 00:15:57.130
mean, I've, I've had, we
call them like death marches

288
00:15:57.550 --> 00:16:01.360
or, you know, heroic efforts
and things like that. Why

289
00:16:01.360 --> 00:16:06.010
did, why has crunched become
a part of gaming development

290
00:16:06.010 --> 00:16:09.760
culture? And is this a
direct response to trying to

291
00:16:09.880 --> 00:16:12.130
stop that because you've been
doing this 10 years and

292
00:16:12.160 --> 00:16:14.860
you, you seem like you're
not burned out. So I'm

293
00:16:14.860 --> 00:16:18.850
hoping that I think it's
working out, not, not crunching

294
00:16:18.870 --> 00:16:21.040
seems like a good thing
for everybody, right? Work life

295
00:16:21.040 --> 00:16:25.510
balance matters. Yeah, definitely. Definitely.
I mean, I have, I

296
00:16:25.510 --> 00:16:30.000
have crunched a lot on
the previous project, but not,

297
00:16:30.070 --> 00:16:32.980
not, not on the, on
this one, luckily over the

298
00:16:32.980 --> 00:16:35.890
last three years and not
many people really have a

299
00:16:35.890 --> 00:16:38.180
crunch on this project, which
is a really good thing.

300
00:16:38.320 --> 00:16:41.140
We're really proud of that.
But I think the reason

301
00:16:41.140 --> 00:16:43.720
is, cause a lot of
times you, I mean, you

302
00:16:43.720 --> 00:16:48.320
hire maybe graduates or people
who are fairly junior and

303
00:16:48.450 --> 00:16:51.130
they are really passionate. So
they want to spend all

304
00:16:51.130 --> 00:16:54.070
their time trying to produce
the best possible outcome they

305
00:16:54.070 --> 00:16:56.980
can. And this it's a
more, a matter of pride.

306
00:16:57.010 --> 00:17:00.460
And also sometimes like there
are some hard deadlines that

307
00:17:00.610 --> 00:17:03.790
you have to meet, unfortunately
like the game needs to

308
00:17:03.790 --> 00:17:06.850
be out that say by,
by this time in a

309
00:17:06.860 --> 00:17:09.460
year, like in November, let's
say so it's very hard

310
00:17:09.460 --> 00:17:12.130
to miss that deadline. So
that's why if you don't

311
00:17:12.130 --> 00:17:15.370
plan quite well, then you
have a lot of work

312
00:17:15.400 --> 00:17:18.400
left to do so that's
why people stay late and

313
00:17:18.670 --> 00:17:22.780
do extra work. Okay. And
now that you've been on

314
00:17:22.780 --> 00:17:25.900
this for three years, was
it continuous delivery the whole

315
00:17:25.900 --> 00:17:28.090
time or did you, did
you, did you all start

316
00:17:28.090 --> 00:17:30.370
with this saying like, all
right, someone's going to say

317
00:17:30.370 --> 00:17:33.340
file new project and Jafar
is going to work with

318
00:17:33.340 --> 00:17:35.530
his team and make sure
that that builds and we're

319
00:17:35.530 --> 00:17:38.860
going to deliver it all
the time or wasn't there

320
00:17:38.860 --> 00:17:41.560
an initial, I don't know,
was there an initial crunch

321
00:17:41.560 --> 00:17:43.660
to get it to a
buildable state before you got

322
00:17:43.660 --> 00:17:47.650
into the groove of continuous
delivery? That's a good question.

323
00:17:48.490 --> 00:17:53.070
So when we, I mean,
we actually tried to start

324
00:17:53.070 --> 00:17:57.750
practicing continuous delivery on the
previous project, but we didn't

325
00:17:57.750 --> 00:18:02.460
obviously manage to do that.
There are certain aspects that

326
00:18:02.460 --> 00:18:05.220
we definitely tried on the
previous project. For instance, we

327
00:18:05.220 --> 00:18:08.460
work on a it's called
trunk based development, or basically

328
00:18:08.460 --> 00:18:12.210
everybody work in one single
branch. So we then branch

329
00:18:12.210 --> 00:18:15.120
off for release or people
don't work the different features

330
00:18:15.120 --> 00:18:16.980
on different branches. We just
work on one branch. So

331
00:18:17.310 --> 00:18:19.380
we were practicing that on
the previous projects that we,

332
00:18:19.500 --> 00:18:22.620
we are using a lot
of foundations. We built over

333
00:18:22.620 --> 00:18:27.270
time, but on this project
from day one, we started

334
00:18:27.270 --> 00:18:32.640
with continuous delivery mind. And
what we, what, what really

335
00:18:32.640 --> 00:18:35.490
helped us with cause one,
one pressure you get with

336
00:18:35.490 --> 00:18:39.870
games is you need to
still show progress. And with

337
00:18:39.870 --> 00:18:42.240
continuity, you need to build
a lot of foundations in

338
00:18:42.240 --> 00:18:44.340
place. Like for instance, we
were writing our testing framework

339
00:18:44.340 --> 00:18:48.250
to begin with or setting
up our deployment pipeline to

340
00:18:48.250 --> 00:18:51.450
the, with as opposed to
developing new features and or

341
00:18:51.450 --> 00:18:54.480
figuring how to write test
the code that can be

342
00:18:54.480 --> 00:18:58.590
tested well. But so it
was very hard to try

343
00:18:58.590 --> 00:19:00.480
to show progress. What's your
billing of all of these

344
00:19:00.480 --> 00:19:03.540
foundations? So what we did
was we used the completely

345
00:19:03.720 --> 00:19:07.590
different engine to write our
prototype that then we can

346
00:19:07.590 --> 00:19:10.560
then demo that to other
people. And that was, that

347
00:19:10.560 --> 00:19:13.350
was almost like a throwaway
code. We were not trying

348
00:19:13.350 --> 00:19:15.780
to make like develop that
we continuously remind to that

349
00:19:15.780 --> 00:19:20.070
at all. So that lift,
lift a lot of pressure

350
00:19:20.070 --> 00:19:22.830
off the development team so
they can build all these

351
00:19:22.830 --> 00:19:27.630
foundations and pipeline wise. The,
like we were trying to

352
00:19:27.630 --> 00:19:30.570
answer a lot of questions
from the design perspective, especially

353
00:19:30.570 --> 00:19:33.450
with the prototype. Cause it's
very hard to do both

354
00:19:33.450 --> 00:19:37.280
at the same time. That's
what we found. So Let

355
00:19:37.280 --> 00:19:39.800
me get into some of
the nitty gritty because I

356
00:19:39.800 --> 00:19:42.950
understand the, the code bits
of this. I less understand

357
00:19:42.950 --> 00:19:46.640
the asset management aspect are
you using get or where

358
00:19:46.640 --> 00:19:49.670
are you putting your code?
So we are using pear

359
00:19:49.670 --> 00:19:54.800
force per force. Okay. Yeah.
So we can't use gait,

360
00:19:54.800 --> 00:19:59.150
unfortunately. And we, when we,
when we were evaluating different

361
00:19:59.150 --> 00:20:01.160
source control systems, the main
problem we had with it

362
00:20:01.160 --> 00:20:03.890
at that point was that
it wasn't very good with

363
00:20:04.280 --> 00:20:09.360
large binary fines. And also
the other problem is like

364
00:20:09.640 --> 00:20:12.980
with binary files, which are
art assets, mainly you can't

365
00:20:12.980 --> 00:20:15.770
really marriage them. It's not
like code that. I change

366
00:20:16.220 --> 00:20:18.500
one function, you change another
function. We just merge these

367
00:20:18.500 --> 00:20:21.740
two together with, but with
binary files, you basically override

368
00:20:21.740 --> 00:20:23.630
the other person. So you
need to usually lock these

369
00:20:23.630 --> 00:20:26.000
phones to make sure nobody
else is touching this file

370
00:20:26.180 --> 00:20:30.200
as you're editing it. That's
why that doesn't work well

371
00:20:30.200 --> 00:20:34.310
with the kit and distributed
model. So, and we found

372
00:20:34.310 --> 00:20:37.010
that generally Perforce force was,
was a better option and

373
00:20:37.010 --> 00:20:41.540
a lot of AAA games
are using Perforce or other

374
00:20:41.540 --> 00:20:46.760
centralized source contract systems. Okay.
And all the assets and

375
00:20:46.760 --> 00:20:48.910
code all are in the
single branch, as I mentioned.

376
00:20:48.910 --> 00:20:51.700
So because look in the
past, we use different models

377
00:20:51.700 --> 00:20:54.370
where you have a separate
branch for, for, for instance,

378
00:20:54.370 --> 00:20:58.420
for assets, a different branch
for code, but it's a

379
00:20:58.420 --> 00:21:01.210
lot simpler if you are
working in a single branch.

380
00:21:02.200 --> 00:21:06.930
Okay. So the, There are
solutions and get to allow

381
00:21:06.930 --> 00:21:09.120
you to have like pointers
to large files and different

382
00:21:09.120 --> 00:21:11.580
things like that. Like the,
the being able to lock

383
00:21:11.610 --> 00:21:14.970
things down has been, is
an important feature. Yes, that's

384
00:21:14.970 --> 00:21:17.850
right. Yeah. And maybe, I
mean, I haven't looked at

385
00:21:17.850 --> 00:21:20.790
Gates for the last couple
of years. Maybe, maybe I'm

386
00:21:20.790 --> 00:21:24.990
wrong now. Like it has
been improved a lot, but

387
00:21:24.990 --> 00:21:28.620
what, what I would say
is probably in, in six

388
00:21:28.620 --> 00:21:30.870
to nine months from now,
we would evaluate again and

389
00:21:30.870 --> 00:21:34.050
see how it is. But
they obviously would be difficult

390
00:21:34.050 --> 00:21:37.500
challenge to move a project
already for years and change

391
00:21:37.510 --> 00:21:39.210
the source going to assistance
for that. So Well, yeah.

392
00:21:39.210 --> 00:21:41.640
And you're making a decision.
This is about a decision

393
00:21:41.640 --> 00:21:43.410
you made three or four
years ago when you start

394
00:21:43.410 --> 00:21:47.790
off you don't exactly. Switch
systems halfway. Yeah. That's right.

395
00:21:47.840 --> 00:21:50.640
Yeah. What is the build
server like? Is that a

396
00:21:50.640 --> 00:21:53.160
build server of your own
making or is it something

397
00:21:53.160 --> 00:21:56.550
like TeamCity or VSTS? Yeah,
so we are actually using

398
00:21:56.550 --> 00:22:00.390
team city. We have, we
use team city on the

399
00:22:00.390 --> 00:22:04.770
previous project as well. And,
but prior to that, we

400
00:22:04.770 --> 00:22:07.920
had our own system. We
developed it when we, when

401
00:22:07.920 --> 00:22:10.470
you, we used to have
one or two build agents,

402
00:22:10.500 --> 00:22:13.770
we had our own system,
but when we started the

403
00:22:13.770 --> 00:22:17.370
previous project, we decided to
not use that system and

404
00:22:17.370 --> 00:22:20.940
just go with team city.
Did you have to make

405
00:22:20.940 --> 00:22:23.640
custom in this team city
smart about games or is

406
00:22:23.640 --> 00:22:27.210
just, this is just going
out to command line applications

407
00:22:27.210 --> 00:22:30.120
that go and do the
rendering or the squishing of

408
00:22:30.120 --> 00:22:33.210
images or the compression or
whatever, you know, asset specific

409
00:22:33.210 --> 00:22:34.800
things you have to do.
Is it dealing with that

410
00:22:34.800 --> 00:22:39.510
or is it only concerning
concerning itself Plus plus, yeah,

411
00:22:39.540 --> 00:22:43.230
so teams doesn't provide much
support for games. So we

412
00:22:43.230 --> 00:22:45.270
have to do a lot
of the work ourselves. And

413
00:22:45.660 --> 00:22:47.670
for instance, you have, as
you said, you to run

414
00:22:47.670 --> 00:22:49.950
a process and that will
either return an exit code

415
00:22:49.950 --> 00:22:52.620
zero or one. If it's,
let's say, if, if everything's

416
00:22:52.620 --> 00:22:55.470
good, the returns it's called
zero, which TeamCity knows, that

417
00:22:55.470 --> 00:22:59.340
means everything's good, that passed,
but he doesn't know the

418
00:22:59.340 --> 00:23:01.620
detail about that. So you
have to provide a lot

419
00:23:01.620 --> 00:23:05.130
of information back to team
city. And again, with games,

420
00:23:05.130 --> 00:23:08.220
like what we find is
like, we hit some limits

421
00:23:08.250 --> 00:23:11.430
that even like with team
cities is hard and sometimes

422
00:23:11.430 --> 00:23:14.010
you have to work around
some limitations with TeamCity as

423
00:23:14.010 --> 00:23:18.450
well, to give you some
examples. For, for instance, we

424
00:23:18.450 --> 00:23:21.890
generate about between eight to
10 terabyte of just, just

425
00:23:21.900 --> 00:23:28.140
build artifacts per day and
just having that storage and

426
00:23:28.170 --> 00:23:31.500
clean up that storage. Cause
we basically do otherwise we're

427
00:23:31.500 --> 00:23:32.850
going to burn through a
lot of stories. So we

428
00:23:32.850 --> 00:23:36.780
have to clean them up
quite regularly. And just as

429
00:23:36.780 --> 00:23:40.500
a simple case, for instance,
there isn't really a very

430
00:23:41.100 --> 00:23:44.340
complicated cleanup that would serve
our needs in teams. It

431
00:23:44.340 --> 00:23:46.610
is, or we have to
come up with some solutions

432
00:23:46.610 --> 00:23:49.300
of our own. Okay. And
those are in the, in

433
00:23:49.300 --> 00:23:53.710
the form of plugins or
extensions to TeamCity that play,

434
00:23:53.740 --> 00:23:56.470
play with TeamCity but do
specific things that you need

435
00:23:56.470 --> 00:23:59.920
them to do. Yes, that's
right. Yeah. Okay. That's great.

436
00:24:00.820 --> 00:24:03.490
And you said that now
you've got this tuned to

437
00:24:03.490 --> 00:24:06.430
the point where you're releasing
every day and really good

438
00:24:06.430 --> 00:24:09.610
candidates every week. Sorry. No,
no, no. So we have

439
00:24:09.760 --> 00:24:12.550
good candidates every day and
we released Every day. Okay.

440
00:24:12.550 --> 00:24:14.710
So you release every week,
but you could potentially release

441
00:24:14.720 --> 00:24:19.370
at any moment. That's right.
That everyday. And the, the,

442
00:24:19.370 --> 00:24:23.470
the important thing is that
what we, what we do

443
00:24:23.470 --> 00:24:26.590
here is like making sure
that like, cause one of

444
00:24:26.590 --> 00:24:30.700
the challenges with like releasing
regularly is obviously like players

445
00:24:30.940 --> 00:24:33.880
would have to keep downloading
any styling is, is, it's

446
00:24:33.880 --> 00:24:37.090
not like seamless, such as
a website, updating a website

447
00:24:37.090 --> 00:24:39.760
behind the scene. Like every
time you release a new

448
00:24:39.760 --> 00:24:43.330
version, especially on a console,
like players have to update,

449
00:24:43.330 --> 00:24:47.140
otherwise they can't play the
game. So you can't really

450
00:24:47.170 --> 00:24:48.580
like, you don't want it
to be the case when

451
00:24:48.580 --> 00:24:50.830
like every time somebody tries
to play your game, they

452
00:24:50.830 --> 00:24:55.810
have to spend time downloading
gigabytes of data. Well, how

453
00:24:55.810 --> 00:24:58.000
do you solve that? I
mean, I'm not familiar with,

454
00:24:58.030 --> 00:24:59.710
I mean, I have an
Xbox and of course it

455
00:24:59.710 --> 00:25:02.260
updates all the time. Is
it updating deltas? Are we

456
00:25:02.260 --> 00:25:05.260
just sending diffs down or
do you have a technique

457
00:25:05.260 --> 00:25:08.890
where you can go around
the existing system and update

458
00:25:08.890 --> 00:25:13.210
within the game itself? So
no, no, definitely. We are

459
00:25:13.210 --> 00:25:16.180
using, we are building on
the platform and the delivery

460
00:25:16.180 --> 00:25:18.850
mechanism that is defining what
you have with what is

461
00:25:18.850 --> 00:25:22.450
available. So let's say if
you, if you don't turn

462
00:25:22.450 --> 00:25:24.550
on your Xbox and your,
an update for like, let's

463
00:25:24.550 --> 00:25:26.890
say month, you're only going
to get the Delta between

464
00:25:26.890 --> 00:25:29.140
what you have. And what's
out there as opposed to

465
00:25:29.140 --> 00:25:32.170
getting each of the releases
that we have done over

466
00:25:32.170 --> 00:25:36.610
that period of time. But
one thing we, we do,

467
00:25:36.610 --> 00:25:39.040
we have, we are working
on right now as well

468
00:25:39.070 --> 00:25:43.030
is to make sure that
you only get what has

469
00:25:43.030 --> 00:25:47.980
been changed, which means that
like, if, if the assets

470
00:25:47.980 --> 00:25:50.500
let's say they haven't changed,
which you shouldn't really have

471
00:25:50.500 --> 00:25:53.530
to download that again, otherwise
you will lose all your

472
00:25:53.530 --> 00:25:57.880
bandwidth because some people have
limits on how much they

473
00:25:57.880 --> 00:26:00.550
can download for instance in
a month. And we can

474
00:26:00.550 --> 00:26:03.490
easily consume all of that.
If you're not careful. I

475
00:26:03.490 --> 00:26:05.950
mean, I have to say
though, with our game, when

476
00:26:06.580 --> 00:26:11.680
we are still not at
the hundred gigabyte stage, yet

477
00:26:11.680 --> 00:26:14.290
we are about 15 to
20 gigabyte right now, but

478
00:26:14.290 --> 00:26:16.450
that's where we expect to
be. And the a hundred

479
00:26:16.450 --> 00:26:19.240
gigabytes figure is from like
the AAA titles, which is

480
00:26:19.240 --> 00:26:23.260
for sure. Sure. Well, certainly
when 4k starts happening, your,

481
00:26:23.260 --> 00:26:25.540
your code might not necessarily
get bigger, but your assets

482
00:26:25.540 --> 00:26:28.810
are going to be huge.
Yeah, absolutely. Yeah. That's nuts.

483
00:26:29.440 --> 00:26:32.980
And when you release, are
you doing the DIFs? Like,

484
00:26:32.980 --> 00:26:36.130
let's say that there's versions
0.1 and 0.2 and all

485
00:26:36.130 --> 00:26:39.490
the way up through 1.0,
does the platform take care

486
00:26:39.490 --> 00:26:41.380
of the diffs or do
you have to build the

487
00:26:41.380 --> 00:26:45.750
TIFs and then ship each
individual TIFF to go from

488
00:26:45.780 --> 00:26:49.680
0.1 to 1.0 and 0.3
to one point? No, no.

489
00:26:49.760 --> 00:26:52.420
Luckily the platform take cares
of that. Okay, sure. You

490
00:26:52.430 --> 00:26:55.940
ship the final 20 gigs
or the 15 gigs that's

491
00:26:55.940 --> 00:26:58.820
right. And they figure out
all the tips. Yeah, exactly.

492
00:26:58.820 --> 00:27:00.560
Which is, which is great.
Cause we don't have to

493
00:27:00.560 --> 00:27:05.060
worry about that. Does that
mean that a store based

494
00:27:05.090 --> 00:27:07.850
system, like, you know, an
app store or a game

495
00:27:07.850 --> 00:27:10.820
store, like the platform provides
you on Xbox or the

496
00:27:10.820 --> 00:27:15.590
app store on iPhone really
lends itself to, to continuous

497
00:27:15.590 --> 00:27:18.200
delivery. I mean, if you
can take updates every week

498
00:27:18.470 --> 00:27:20.450
as a, as a user
and the app store will

499
00:27:20.450 --> 00:27:23.330
handle the diffs and the
store will worry about getting

500
00:27:23.330 --> 00:27:26.750
everyone up to date, that's
a nice benefit that fits

501
00:27:26.750 --> 00:27:29.750
very well with your goal,
which is a quality game

502
00:27:29.750 --> 00:27:34.160
all the time. That is
constant. Yeah. Yeah, absolutely. That's

503
00:27:34.160 --> 00:27:36.170
a really good point. Yes
it is. Although I have

504
00:27:36.170 --> 00:27:40.340
to say with these kinds
of platforms that you have

505
00:27:40.340 --> 00:27:44.000
to release through them, they
have a certification process normally

506
00:27:45.410 --> 00:27:48.110
and which they cause obviously
they want to protect their,

507
00:27:48.110 --> 00:27:50.540
their platform. They want to
make sure the games let's

508
00:27:50.540 --> 00:27:55.050
say that are released on
Xbox, have certain quality to

509
00:27:55.180 --> 00:27:59.750
maintain the reputation of that
platform. So that's, that's, that

510
00:27:59.750 --> 00:28:02.150
could be a bottleneck here.
Cause if you imagine like,

511
00:28:02.840 --> 00:28:07.460
cause traditionally for games, dance
up to two weeks because

512
00:28:07.460 --> 00:28:09.230
they want to test everything
in the game, they want

513
00:28:09.230 --> 00:28:11.300
to make sure that the
game doesn't crash for instance,

514
00:28:11.390 --> 00:28:13.100
and they have some metrics
like how long it takes

515
00:28:13.100 --> 00:28:16.940
between crashes, that kind of
stuff. Oh wow. Given we

516
00:28:16.940 --> 00:28:19.910
are a part of Microsoft
and we have been doing

517
00:28:19.910 --> 00:28:21.680
this for, for two years.
We have a really good

518
00:28:21.680 --> 00:28:25.390
relationship with the certification team
within Microsoft. And our surgery

519
00:28:25.390 --> 00:28:28.850
is nowhere near two weeks
is a lot less. Okay.

520
00:28:29.180 --> 00:28:31.970
But we can release weekly.
You see? So you work

521
00:28:31.970 --> 00:28:34.370
out a relationship with the
owners of whatever app store

522
00:28:34.370 --> 00:28:36.590
you're sending to and they
start to realize, Oh, this

523
00:28:36.590 --> 00:28:39.170
is a good quality. They'll
test it differently. But it

524
00:28:39.170 --> 00:28:41.780
sounds like it's another whole
build system that you don't

525
00:28:41.780 --> 00:28:45.320
have visibility into. And they're
doing a kind of testing

526
00:28:45.380 --> 00:28:48.950
The results. Yes. To some
extent, but over the, over

527
00:28:48.950 --> 00:28:51.200
the last year or so
they have, they've evolved their

528
00:28:51.200 --> 00:28:53.570
approach, which is really good.
So as opposed to trying

529
00:28:53.570 --> 00:28:56.120
to prevent a lot of
problems, they kind of, when

530
00:28:56.120 --> 00:28:58.400
they, when they trust like
a, like a company or

531
00:28:58.400 --> 00:29:01.100
like a game or the
title of developers, what they

532
00:29:01.100 --> 00:29:04.610
do is they, they, they,
they are less restrictive, but

533
00:29:04.610 --> 00:29:06.530
they have a lot of
metrics that they look at.

534
00:29:06.530 --> 00:29:09.200
So they can see for
instance, how they game behaves.

535
00:29:09.590 --> 00:29:11.720
Like if it's crashing your
lot, that kind of stuff.

536
00:29:11.750 --> 00:29:14.270
And if it turns out
that these developers are not

537
00:29:14.270 --> 00:29:18.020
careful anymore, they would put
more pressure, more checks to

538
00:29:18.020 --> 00:29:22.190
make sure they maintain the
quality. Okay. Interesting. But you

539
00:29:22.190 --> 00:29:25.130
haven't found that releasing to
the store has been a

540
00:29:25.130 --> 00:29:28.160
big issue. No, that'd be
being quite lucky that they've

541
00:29:28.160 --> 00:29:30.770
been working well with us
in that sense and the,

542
00:29:30.780 --> 00:29:35.750
the evolve, their, their process
to support this. And do

543
00:29:35.750 --> 00:29:37.820
you said that you, at
the beginning, you're releasing this

544
00:29:37.880 --> 00:29:42.340
on Xbox one X, which
is, you know, it's A

545
00:29:42.550 --> 00:29:46.150
construct it's like micro-generation or
a minor generation and you

546
00:29:46.150 --> 00:29:48.730
know, it's a big deal.
Cause it's got 4k mine,

547
00:29:48.940 --> 00:29:51.670
mine shows up in the
mail today. Oh, that's great.

548
00:29:51.850 --> 00:29:53.740
Yeah. Thanks. So, I mean,
I don't know if we

549
00:29:53.740 --> 00:29:57.940
can call it another, is
it another build target, nor

550
00:29:57.940 --> 00:29:59.890
is it the same binary?
Like, is this actually, that's

551
00:29:59.890 --> 00:30:02.080
a good question. You also
released a windows. Do you

552
00:30:02.080 --> 00:30:05.320
release one thing or do
you release three things? So

553
00:30:05.560 --> 00:30:08.680
that's a good question. No,
actually we compiled. So Xbox

554
00:30:08.680 --> 00:30:10.720
one and Xbox one X
that we use the same

555
00:30:10.720 --> 00:30:14.230
compiler for both of them.
So the output from the

556
00:30:14.230 --> 00:30:16.600
court isn't really different. The
main difference is the acid.

557
00:30:16.600 --> 00:30:18.310
Then as you say, the
forecast is that you want

558
00:30:18.310 --> 00:30:21.970
to deliver two X plus
one X audience, but with

559
00:30:21.980 --> 00:30:25.300
the PC, we have to
combine the PC separately. So

560
00:30:25.540 --> 00:30:28.720
we basically have to combine
for two platforms and this

561
00:30:28.750 --> 00:30:35.130
scenario, okay, so you are
releasing two separate things, but

562
00:30:35.310 --> 00:30:38.530
code the underlying code, like
you said, is it's a

563
00:30:38.530 --> 00:30:41.470
universal platform. So it's not
a, is it a big

564
00:30:41.500 --> 00:30:45.280
deal or is it just
about what the user sees

565
00:30:45.280 --> 00:30:47.140
or what, how, what's the
difference between an Xbox version

566
00:30:47.140 --> 00:30:51.340
and a, so it's the,
at the court, there isn't

567
00:30:51.340 --> 00:30:55.840
much of a difference, but
for instance, networking layer is

568
00:30:55.840 --> 00:31:01.870
different as an example. And
graphics again is, is different.

569
00:31:01.870 --> 00:31:03.670
Cause like for, for PC,
you're going to have different

570
00:31:03.670 --> 00:31:07.900
graphics cards and different drivers,
so, right, right, right. The,

571
00:31:07.900 --> 00:31:11.520
the parts of the game
that touches the hardware are,

572
00:31:11.520 --> 00:31:14.350
are different. Whereas the core,
there's a logic of the

573
00:31:14.350 --> 00:31:16.660
game, that kind of stuff.
They're, they're identical. It doesn't

574
00:31:16.660 --> 00:31:21.160
really matter. All right. When
is this coming out? You're

575
00:31:21.220 --> 00:31:23.530
shipping every week, but when
do I get it every

576
00:31:23.530 --> 00:31:28.990
week? So we have a
technical alpha program that people

577
00:31:28.990 --> 00:31:32.910
can, can come and play.
We have a good, a

578
00:31:32.920 --> 00:31:35.830
really good community. I think,
I don't know exact numbers,

579
00:31:35.830 --> 00:31:38.530
but I think over a
hundred thousand people signed up

580
00:31:38.530 --> 00:31:41.590
to that program and they,
they can play the game

581
00:31:41.590 --> 00:31:45.880
regularly like that. We had
one session over the weekend,

582
00:31:47.440 --> 00:31:50.530
but they are, they are
under NDA. So they can't

583
00:31:50.530 --> 00:31:54.970
really talk much about the
game, but we are hoping

584
00:31:55.050 --> 00:32:00.430
to reduce that restriction fairly
soon. And it would be

585
00:32:00.520 --> 00:32:03.280
as, as you mentioned, it
would be in 2018 when

586
00:32:03.280 --> 00:32:06.880
the game would be out
for four public. So hopefully

587
00:32:06.880 --> 00:32:08.530
more people will be able
to play. But what I

588
00:32:08.530 --> 00:32:10.510
would say is if anybody's
interested, they can sign up

589
00:32:10.510 --> 00:32:13.030
to the technical alpha program
that we have for sea

590
00:32:13.030 --> 00:32:15.790
of thieves and hopefully get
a chance to play the

591
00:32:15.790 --> 00:32:18.340
game. Very cool. Well, thank
you so much for letting

592
00:32:18.340 --> 00:32:20.980
us see behind the curtain
and how you're going to

593
00:32:20.980 --> 00:32:23.770
be building that game. No
worries at all. Thank you

594
00:32:23.770 --> 00:32:26.110
very much for having me.
It's been a great fun,

595
00:32:26.560 --> 00:32:30.730
absolute pleasure. This has been
another episode of Hansel minutes

596
00:32:30.850 --> 00:32:40.020
and we'll see you again.
Next time. <inaudible>.

