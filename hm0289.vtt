WEBVTT FILE

1
00:00:04.920 --> 00:00:17.100
<inaudible> from hanselminutes.com. It's Hansel
minutes. Oh, weekly discussion with

2
00:00:17.100 --> 00:00:21.930
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:21.930 --> 00:00:28.050
show number two 89. Recorded
live Thursday, October 13th, 2011. Support for

4
00:00:28.050 --> 00:00:32.340
Hanselman is provided by Telerik
rad controls, the most comprehensive

5
00:00:32.340 --> 00:00:36.180
suite of components for windows
forms and asp.net web applications.

6
00:00:36.450 --> 00:00:44.580
online@wwwdottelerik.com. In this episode, Scott
talks with Phil price from

7
00:00:44.580 --> 00:00:51.480
the visual studio team about
performance and perf Watson. Hi,

8
00:00:51.480 --> 00:00:53.280
this is Scott Hanselman, and
this is another episode of

9
00:00:53.280 --> 00:00:56.910
Hanselminutes today. We're going to
talk about performance, specifically the

10
00:00:56.910 --> 00:01:00.000
performance of visual studio. We've
got Phil price, senior software

11
00:01:00.000 --> 00:01:03.510
development engineer, and test it
Microsoft. How's it going, Phil?

12
00:01:04.140 --> 00:01:06.870
I'm pretty good. How are
you? Not too bad. So

13
00:01:06.930 --> 00:01:10.890
I wanted to talk to
you because I got in

14
00:01:10.890 --> 00:01:13.590
an argument recently with a
guy who was telling me

15
00:01:14.010 --> 00:01:16.890
that his copy of visual
studio, and this is his

16
00:01:16.890 --> 00:01:21.780
words goes to Cleveland on
a regular basis. And what

17
00:01:21.990 --> 00:01:24.390
he says when he says,
goes to Cleveland, is it

18
00:01:24.390 --> 00:01:27.510
kind of goes gray. You
get that kind of curtain

19
00:01:27.510 --> 00:01:32.070
of patients that that happens
as smoky look. And, and

20
00:01:32.070 --> 00:01:34.080
the argument that we had
was that I'm just not

21
00:01:34.080 --> 00:01:37.110
seeing that. And then I
said, well, you should be

22
00:01:37.110 --> 00:01:40.410
running this thing called perf
Watson. So talk to me

23
00:01:40.410 --> 00:01:43.590
what perf Watson is and
why his machine goes to

24
00:01:43.590 --> 00:01:47.420
Cleveland. And mine does not.
Okay. So puff Watson is

25
00:01:47.420 --> 00:01:51.230
a telemetry system. We built,
which detects when visual shooter

26
00:01:51.260 --> 00:01:55.490
goes to Cleveland, as it
were and sends us reports

27
00:01:55.520 --> 00:01:58.130
on, you know, what's happening
at that point in time.

28
00:01:58.130 --> 00:02:00.440
And cyber is a studio
that, you know, it became

29
00:02:00.470 --> 00:02:04.640
unresponsive. So as low extension
and the onsite video studio

30
00:02:04.640 --> 00:02:07.370
and we're does it monitors
the, a main message loop

31
00:02:07.430 --> 00:02:10.820
of the UI thread. And
if it doesn't respond for

32
00:02:10.820 --> 00:02:13.190
more than two seconds, it
then goes and captures a

33
00:02:13.240 --> 00:02:18.080
state and sends it up
to us. And, you know,

34
00:02:18.080 --> 00:02:20.240
and then those reports come
via the internet. And then

35
00:02:20.240 --> 00:02:22.040
we aggregate all the data
on the backend and we

36
00:02:22.040 --> 00:02:25.730
look at why people are
slow now, why he was

37
00:02:25.730 --> 00:02:29.380
slow. It can be any
number of things, but the

38
00:02:29.390 --> 00:02:31.160
report, you know, we say,
Hey, it goes to Cleveland,

39
00:02:31.160 --> 00:02:34.310
Hey, it's become unresponsive. We
definitely know that the UI

40
00:02:34.310 --> 00:02:38.420
threat is busy. So often
rashly constrained on things like

41
00:02:38.420 --> 00:02:42.650
file IO. You know, we're
doing large operations on the

42
00:02:42.650 --> 00:02:45.320
UIs red, maybe we're reading
through a bunch of files

43
00:02:45.320 --> 00:02:49.190
or doing some kind of
scan of assemblies and that,

44
00:02:49.220 --> 00:02:50.960
you know, we're not necessarily
doing that in the right

45
00:02:50.960 --> 00:02:53.060
place we're doing now in
the same place by your

46
00:02:53.060 --> 00:02:57.290
rendering. So unfortunately there's a
shooter hangs. Okay. So for,

47
00:02:57.350 --> 00:03:00.730
for context, from, for some
of the engineers that maybe

48
00:03:00.730 --> 00:03:03.340
haven't done UI work in
a while, maybe talk about

49
00:03:03.460 --> 00:03:05.890
the UI thread as it
relates to the background thread,

50
00:03:05.890 --> 00:03:09.310
and why, why would something
like visuals do to ever

51
00:03:09.310 --> 00:03:10.960
be doing anything on the
UI for a threat? I

52
00:03:10.960 --> 00:03:13.990
thought everything was recommended to
be decoupled from the UI

53
00:03:13.990 --> 00:03:17.200
and the background thread. Right,
right, right. So, well, this

54
00:03:17.220 --> 00:03:21.120
judo is, you know, uses
column, right? So main column,

55
00:03:21.120 --> 00:03:24.180
the two modes says sta
and MTA, a multithreaded apartment

56
00:03:24.180 --> 00:03:28.200
and single-threaded apartment. Now this,
she is a single threaded

57
00:03:28.200 --> 00:03:32.010
apartment, which w what that
means is any comm services

58
00:03:32.010 --> 00:03:36.150
created, you know, by default
visits, you do, as you

59
00:03:36.150 --> 00:03:39.480
initialize, unfortunately, are owned by
the UI thread and any

60
00:03:39.480 --> 00:03:41.310
call to them. Regardless if
you call them from a

61
00:03:41.310 --> 00:03:45.180
background thread, actually get martialed
directly to the UI thread.

62
00:03:45.660 --> 00:03:47.910
So, you know, a little
message goes in the, in

63
00:03:47.910 --> 00:03:49.980
the message queue that says,
Hey, if you're running from

64
00:03:49.980 --> 00:03:51.420
about, you know, if you're
saying, Hey, cool, this from

65
00:03:51.420 --> 00:03:53.730
a background thread, it goes
into message two and then

66
00:03:53.730 --> 00:03:55.950
says, okay, I want you
to run this piece of

67
00:03:55.950 --> 00:03:58.590
code and it's going to
happen synchronously. And it goes

68
00:03:58.590 --> 00:04:00.930
through the message, security UIs,
red cools, the concerts and

69
00:04:00.930 --> 00:04:04.350
bubbles back. So, unfortunately it's
not as easy as moving

70
00:04:04.350 --> 00:04:06.150
to a background thread, but
now why business, you guys

71
00:04:06.150 --> 00:04:08.460
doing that? You know, it's
an old application and really

72
00:04:08.760 --> 00:04:11.970
it's about, you know, scale
when we're using the same

73
00:04:11.970 --> 00:04:15.660
Shalon technologies as we have
been for probably since, you

74
00:04:15.660 --> 00:04:17.910
know, the first integrated version
of his shoes are like,

75
00:04:18.060 --> 00:04:22.920
I don't know, 2003 concrete,
remember, and the co you

76
00:04:22.920 --> 00:04:26.490
know, rewriting these services, that'd
be a free threaded, or,

77
00:04:26.490 --> 00:04:31.890
you know, you know, you
know, MTA has a not

78
00:04:32.040 --> 00:04:34.140
fortunately been on our priority
list, and we've kind of

79
00:04:34.170 --> 00:04:38.160
got away with that for
a number of years, but

80
00:04:38.160 --> 00:04:39.840
then as, as she has
grown and got more and

81
00:04:39.840 --> 00:04:43.920
more and more stuff inside
it, people were following the

82
00:04:43.920 --> 00:04:45.870
same patterns as they always
have done. And the, you

83
00:04:45.870 --> 00:04:48.210
know, it's kind of like,
you know, we have this,

84
00:04:48.450 --> 00:04:51.510
this bouts of the UIs
registry and, you know, we,

85
00:04:51.510 --> 00:04:53.490
you know, we're kind of
putting on more and more

86
00:04:53.490 --> 00:04:55.530
weight on this bow is
constraining us. And I was

87
00:04:55.530 --> 00:04:58.080
starting to like strain the
belt and we're not quite

88
00:04:58.080 --> 00:05:03.000
fitting in. So are you
saying that is, is it

89
00:05:03.000 --> 00:05:06.330
that visual studio was written
wrong before? And you said

90
00:05:06.330 --> 00:05:08.070
we got away with it,
or is it more that

91
00:05:08.070 --> 00:05:11.490
the techniques that we learned
about calm and threading didn't

92
00:05:11.490 --> 00:05:15.030
exist, you know, 10 years
ago, trying to understand how

93
00:05:15.030 --> 00:05:17.010
much we got away with
versus how much is just

94
00:05:17.010 --> 00:05:22.080
the newer techniques have come
up? Yeah. I would say

95
00:05:22.080 --> 00:05:24.300
that, you know, I think
that threads, it existed as

96
00:05:24.300 --> 00:05:29.830
long as, you know, windows
has existed probably. And it

97
00:05:29.880 --> 00:05:32.340
was just really a case
case, a case of getting

98
00:05:32.340 --> 00:05:35.460
away with it. We didn't
really need to. Right. You

99
00:05:35.460 --> 00:05:37.710
know, if you look back
to say the early versions

100
00:05:37.710 --> 00:05:40.050
of industry day, we weren't
doing quite so much, but

101
00:05:40.050 --> 00:05:42.330
you know, features come in
that say, you know, one

102
00:05:42.330 --> 00:05:44.160
that Springs to mind is,
Hey, I've got a bunch

103
00:05:44.160 --> 00:05:47.040
of unit tests and I
want them to automatically update

104
00:05:47.040 --> 00:05:50.610
as they add a new
unit test, right. That work

105
00:05:50.610 --> 00:05:54.780
needs to happen somewhere. And
that's happening on the UI

106
00:05:54.780 --> 00:05:57.830
thread. I see. And is
it also a matter of,

107
00:05:57.850 --> 00:06:01.070
of scale? Cause even though
computers have gotten faster, some

108
00:06:01.070 --> 00:06:03.590
people have said, well, parts
of visual studio have gotten

109
00:06:03.590 --> 00:06:07.040
slower. Is that because, you
know, someone might have 50

110
00:06:07.040 --> 00:06:11.500
solutions when five years ago
they had 10, Right? Yes,

111
00:06:11.500 --> 00:06:15.910
definitely. I think, you know,
applications again are getting bigger

112
00:06:16.390 --> 00:06:24.730
and also, yeah, I lost
my train of thought. That's

113
00:06:24.730 --> 00:06:27.970
okay. I realized that these
are kind of challenging questions

114
00:06:27.970 --> 00:06:30.340
because I know I appreciated
that you were going to

115
00:06:30.340 --> 00:06:33.730
come out and talk about
this, that when someone comes

116
00:06:33.730 --> 00:06:37.000
up with a tool like
perf Watson you're, you're acknowledging

117
00:06:37.000 --> 00:06:40.240
that there are parts of
the application that have issues

118
00:06:40.240 --> 00:06:44.170
with performance, and you don't
want to say something sucks

119
00:06:44.620 --> 00:06:46.420
just because you fixed it.
This is actually a funny

120
00:06:46.420 --> 00:06:49.060
thing we were talking about
on Twitter a while back

121
00:06:49.750 --> 00:06:54.040
that I think Microsoft sometimes
can learn from Apple. Apple

122
00:06:54.310 --> 00:06:57.070
often comes out and says
things, yeah, this is 500%

123
00:06:57.430 --> 00:07:00.370
faster, but they say it
in such a way that

124
00:07:00.640 --> 00:07:02.500
doesn't make you feel like,
wait a second. Was it

125
00:07:02.500 --> 00:07:06.660
500% slower a minute ago?
You know? So w with,

126
00:07:06.660 --> 00:07:10.030
with visual studio, you know,
you want to accentuate the

127
00:07:10.030 --> 00:07:13.930
positive and, and realize that
we're putting the effort in

128
00:07:13.930 --> 00:07:15.580
to figure out how these
things can be made faster.

129
00:07:16.120 --> 00:07:20.200
So perf Watson, how do
you, you're running inside visual

130
00:07:20.200 --> 00:07:22.360
studio, but official studio is
not responding. How do you

131
00:07:22.360 --> 00:07:25.450
know, how do you know
you're not responding? Right, right.

132
00:07:25.450 --> 00:07:28.930
Because we are off the
UI thread. So you're running

133
00:07:28.930 --> 00:07:34.390
in process to dev and
dot ESE. Correct. Okay. And

134
00:07:34.450 --> 00:07:37.510
you can't be the bottleneck
you're, you're, you're well-written I

135
00:07:37.510 --> 00:07:42.480
guess perf Watson is not
something that could be, You

136
00:07:42.490 --> 00:07:45.010
know, there is a certain
cost to capturing the information

137
00:07:45.010 --> 00:07:47.500
as to why you were
slow. I'm not going to

138
00:07:47.500 --> 00:07:51.580
deny that, you know, we,
we need to write what

139
00:07:51.580 --> 00:07:53.530
we actually do is we,
we capture it, dump out

140
00:07:53.530 --> 00:07:55.840
the point behind, right. But
we've, we've already delayed for

141
00:07:55.840 --> 00:07:59.800
two seconds. So we do
increase the length of that

142
00:07:59.800 --> 00:08:02.410
delay ever. So slightly only
if you're running per Watson.

143
00:08:02.770 --> 00:08:05.620
So, you know, there is
an overhead to that, but

144
00:08:05.620 --> 00:08:08.770
the actual part that monitors
in process is extremely light

145
00:08:08.800 --> 00:08:12.520
weight. It uses detours on,
you know, the operating system

146
00:08:12.520 --> 00:08:15.640
calls that, do the, the
message loop. And then it's

147
00:08:15.640 --> 00:08:19.810
basically a tiny little Canary
threat, right? So we, we

148
00:08:19.810 --> 00:08:21.880
say, Hey, we know we've
processed the message. And we'll,

149
00:08:21.880 --> 00:08:24.520
we'll, we know we've entered
the processing, we're gonna process

150
00:08:24.520 --> 00:08:27.520
some input or an RPC
call. And then we just

151
00:08:27.520 --> 00:08:30.880
sit down on the background
thread, you know, with what's

152
00:08:30.880 --> 00:08:34.420
it called an event handle.
And we're just saying, when

153
00:08:34.420 --> 00:08:36.720
you're done processing, you just
set the event handle. And

154
00:08:36.720 --> 00:08:38.920
we're like, okay, we're good.
We were under two seconds.

155
00:08:39.370 --> 00:08:41.920
Then if it goes above
that range and we call

156
00:08:41.920 --> 00:08:44.890
actually to an out of
process component, which is, I'm

157
00:08:44.890 --> 00:08:47.530
a little puff Watson service
to ECC, and we use

158
00:08:47.530 --> 00:08:49.540
a name pipe, and we
say to that, Hey, you

159
00:08:49.540 --> 00:08:51.360
need to go and capture
a cool facts, visual shoe,

160
00:08:51.360 --> 00:08:55.920
Joe right now. Oh, I
see. I see. So one

161
00:08:55.920 --> 00:08:57.450
of the terms that you
used in there, we want

162
00:08:57.450 --> 00:08:59.730
to make sure to explain
those to the listener. It

163
00:08:59.730 --> 00:09:04.080
sounded like you said Canary
thread. Yes. And is that

164
00:09:04.080 --> 00:09:06.330
a reference to a Canary
in a coal mine? If

165
00:09:06.330 --> 00:09:08.060
that is a reference there
Canary in a coal mine.

166
00:09:08.060 --> 00:09:11.840
Yes. And the people who
may not be familiar with

167
00:09:11.840 --> 00:09:15.320
that, a bit of English,
English, colloquialism, the idea is

168
00:09:15.320 --> 00:09:17.660
that people would carry canaries
into the coal mine, and

169
00:09:17.660 --> 00:09:20.420
they would have these birds
in cages. And if the

170
00:09:20.420 --> 00:09:22.880
bird died, that meant that
there were gases in the

171
00:09:22.880 --> 00:09:25.760
air and that we should
run. And the Canary is

172
00:09:25.790 --> 00:09:29.690
kind of a university recognized.
Now, as something that's telling

173
00:09:29.690 --> 00:09:32.180
you that something's bad, something
bad is going to happen.

174
00:09:32.180 --> 00:09:34.640
So you were saying that
you have a little thread

175
00:09:34.670 --> 00:09:38.900
that's running and watching for
that little bit of gas,

176
00:09:38.900 --> 00:09:41.360
that's means we're all going
to die. And then you

177
00:09:41.390 --> 00:09:44.000
capture that information. But it
sounds like what you're doing

178
00:09:44.000 --> 00:09:46.790
inside of visual studio is
extremely small. And anything that

179
00:09:46.790 --> 00:09:49.040
would be large, like you
said, is out of process.

180
00:09:49.820 --> 00:09:51.980
Yes. Yes. But you've got,
you do have to remember

181
00:09:51.980 --> 00:09:54.440
that when perf walked from
service XC, the outer process

182
00:09:54.440 --> 00:09:58.820
component does capture the dump
file. It's a mini dump.

183
00:10:00.770 --> 00:10:02.780
It does have to pause
all the threads and then,

184
00:10:02.840 --> 00:10:05.120
you know, pull all the
information out memory to represent

185
00:10:05.120 --> 00:10:07.460
the cool sacks on all
of those threads. So there

186
00:10:07.460 --> 00:10:09.770
is a cost to that,
But of course, I'm already

187
00:10:09.770 --> 00:10:13.130
hung at this point. So
it doesn't really matter. Exactly.

188
00:10:13.130 --> 00:10:15.890
It doesn't really matter. I
see. Now, how did the

189
00:10:15.890 --> 00:10:18.500
number two seconds get picked?
Like if it's not responsive

190
00:10:18.500 --> 00:10:22.130
for two seconds, we jump
in. It was, it was

191
00:10:22.130 --> 00:10:26.780
what we considered to be
egregious, right? So the general

192
00:10:26.780 --> 00:10:28.730
guidance actually for response, responsiveness,
this things like input, it

193
00:10:28.730 --> 00:10:31.220
should be under a hundred
milliseconds, right. We, we want

194
00:10:31.220 --> 00:10:33.680
to shoot the stuff like
50 millisecond response time. So

195
00:10:33.950 --> 00:10:37.010
things like input. And then,
you know, the guidance kind

196
00:10:37.010 --> 00:10:39.530
of gets, you know, there's
certain stages, like a busy

197
00:10:39.530 --> 00:10:43.310
cursor can be for say,
you know, one to two

198
00:10:43.310 --> 00:10:45.200
seconds. And then if your
spot, if you thought over

199
00:10:45.200 --> 00:10:47.780
two seconds, people are starting
to get really annoyed and

200
00:10:47.780 --> 00:10:50.000
you should really be putting
up some kind of UI

201
00:10:50.000 --> 00:10:52.070
saying, Hey, I'm doing a
bunch of tasks. Like I

202
00:10:52.080 --> 00:10:54.080
kind of progress by saying
I'm doing a, B and

203
00:10:54.080 --> 00:10:56.420
C. So we try to
line it on two seconds

204
00:10:56.420 --> 00:10:58.490
that, because we're a while
away, we weren't putting up

205
00:10:58.700 --> 00:11:01.310
responsive UI. And this is
the point we filed. The

206
00:11:01.310 --> 00:11:03.800
folks would get really annoyed.
It's definitely on the high

207
00:11:03.800 --> 00:11:05.630
end. We definitely want to
shoot for better than that.

208
00:11:05.930 --> 00:11:07.760
But we said, let's just
go and get all the

209
00:11:07.760 --> 00:11:11.840
egregious cases and start that
then moving forward. We'll probably

210
00:11:12.470 --> 00:11:15.800
move that limit down to
maybe one second then maybe

211
00:11:15.800 --> 00:11:19.160
even in future, down to
like half a second. Wow.

212
00:11:19.220 --> 00:11:22.970
Okay. And does that value
matter based on how fast

213
00:11:22.970 --> 00:11:26.060
their machine is? Like, I
know that they want visual

214
00:11:26.060 --> 00:11:29.150
studio to run decently well
on like Adam processors and

215
00:11:29.150 --> 00:11:32.810
small net books, but two
seconds it's two seconds, no

216
00:11:32.810 --> 00:11:36.650
matter how many processes you've
got, Correct. Yes. You know,

217
00:11:36.650 --> 00:11:38.780
we can say that anything
above two seconds that high

218
00:11:38.780 --> 00:11:40.280
in the UI is red
egregious and we want to

219
00:11:40.280 --> 00:11:42.980
fix it. No, ma'am no.
I mean, what's your low

220
00:11:42.980 --> 00:11:45.500
end computer. Like, what's a
reasonable computer. I get that

221
00:11:45.500 --> 00:11:48.980
question a lot. Someone's got
like a dual core Adam

222
00:11:48.980 --> 00:11:50.660
and maybe a gig of
Ram or two gigs of

223
00:11:50.660 --> 00:11:53.860
Ram. What's a reasonable netbook
to run visual studio. You

224
00:11:53.860 --> 00:11:56.140
know, That actually sounds about
right. About two gigs of

225
00:11:56.140 --> 00:11:59.260
Ram Juco should be reasonable.
Should we should have a

226
00:11:59.260 --> 00:12:01.270
reason to experience that. I'm
not sure what the exact

227
00:12:01.270 --> 00:12:04.990
min specs are, but to
me, that sounds about right.

228
00:12:05.500 --> 00:12:09.090
Okay. Okay. So then do
I have, does everyone have

229
00:12:09.090 --> 00:12:11.940
perf Watson already do all
visual studio, 2010 people have

230
00:12:11.940 --> 00:12:13.290
that? Or do I have
to go and install it

231
00:12:13.290 --> 00:12:16.050
first? Oh, you have to
go install it. It's available

232
00:12:16.050 --> 00:12:18.660
on the business sheet gallery.
So inside there's a sheet.

233
00:12:18.660 --> 00:12:21.360
If you got a tool's
extension manager and you can

234
00:12:21.360 --> 00:12:23.880
search a Perth Watson on
the online portion of that,

235
00:12:24.180 --> 00:12:26.460
and there's a little extension
there, you can hit install

236
00:12:26.460 --> 00:12:28.920
and it goes and installs
it onto your machine. And

237
00:12:28.980 --> 00:12:33.210
now for the developer preview
release that we released a

238
00:12:33.210 --> 00:12:38.340
build fool installs had it
on by default. So build,

239
00:12:38.920 --> 00:12:40.890
Do you think there'll be
in the box? Like at

240
00:12:40.890 --> 00:12:42.180
the end it seems like
the kind of thing I

241
00:12:42.180 --> 00:12:46.050
would want in the box.
I don't think we'd have

242
00:12:46.050 --> 00:12:47.910
it at the end, because
as I talked about, there

243
00:12:47.910 --> 00:12:50.340
is a certain cost to
capturing that information in the

244
00:12:50.340 --> 00:12:55.620
answer process part, I think,
you know, for developer preview

245
00:12:55.680 --> 00:12:57.720
or maybe a beta that's.
Okay. Cause we want to

246
00:12:57.720 --> 00:13:00.090
get that information, but for
a, for a full release,

247
00:13:00.420 --> 00:13:02.660
we don't want to induce
that cost on to everybody

248
00:13:02.670 --> 00:13:05.220
then if they don't want
to pay it, No, I,

249
00:13:05.220 --> 00:13:07.500
we want everyone to install
perf Watson, but like you

250
00:13:07.500 --> 00:13:09.390
just said, there's a cost
without freaking people out. Are

251
00:13:09.390 --> 00:13:12.780
we looking at like small
single digit percentages? I mean,

252
00:13:13.650 --> 00:13:15.900
can you guarantee that in
the course of events, just

253
00:13:15.900 --> 00:13:18.210
like regularly doing my job,
it's not going to slow

254
00:13:18.210 --> 00:13:20.040
me down. And it's really
only when the, when the

255
00:13:20.040 --> 00:13:24.690
dump happens, It's definitely 100%.
It's only when, when, when,

256
00:13:24.690 --> 00:13:26.820
when you're hung them, we'll
go and capture that information.

257
00:13:26.820 --> 00:13:30.000
That's that's, that's how it
works. The cost of collecting

258
00:13:30.000 --> 00:13:33.510
that compile is, you know,
any web between, I would

259
00:13:33.510 --> 00:13:36.540
say, you know, best case
250 milliseconds. So it's a

260
00:13:36.540 --> 00:13:38.320
very small percent, you know,
it's not a large percentage

261
00:13:38.320 --> 00:13:40.560
of two seconds, but it
can, you know, if it's,

262
00:13:40.770 --> 00:13:42.420
if there's a lot going
on in the process, it

263
00:13:42.420 --> 00:13:45.030
can, it can go up
into like the one, 1.5

264
00:13:45.030 --> 00:13:48.420
second range. Okay. So we
definitely don't think that it's

265
00:13:48.420 --> 00:13:50.670
a problem to install this
on your regular machine and

266
00:13:50.700 --> 00:13:52.080
you can keep it running
and forget about it. I

267
00:13:52.080 --> 00:13:53.610
know that I installed it
a while back and I

268
00:13:53.700 --> 00:13:55.920
honestly haven't thought about it
since I assume it's doing

269
00:13:55.920 --> 00:13:59.070
its job. Yes, yes. And
I do have to say,

270
00:13:59.160 --> 00:14:01.500
or internal builds is we're
developing video studio, how to

271
00:14:01.500 --> 00:14:05.850
own by default as well.
We've been running that for

272
00:14:05.850 --> 00:14:10.130
like a year plus. And
you know, at first we

273
00:14:10.140 --> 00:14:11.910
will be, we got a
little, little bit of noise

274
00:14:11.910 --> 00:14:15.090
because we used to show
a toast. The said, Oh,

275
00:14:15.120 --> 00:14:18.480
there's she is coming on
responsive. We're collecting information. And

276
00:14:18.780 --> 00:14:21.540
people were blaming the delay,
the actual whole delay, the

277
00:14:21.540 --> 00:14:23.370
two second part, which we
weren't part of on the

278
00:14:23.370 --> 00:14:25.380
toast. They're kind of like,
it's kind of like, you

279
00:14:25.380 --> 00:14:30.180
know, you ask the child,
why do, well, you know,

280
00:14:30.840 --> 00:14:33.930
why, what, what makes wins,
you know, say, Hey, it's

281
00:14:33.930 --> 00:14:36.150
really windy. And people are,
Oh, the kids were like,

282
00:14:36.180 --> 00:14:37.860
Oh, it's cause the trees
are moving. They make the

283
00:14:37.860 --> 00:14:41.580
wind. There's kind of that
effect. Right. But it's not

284
00:14:41.580 --> 00:14:43.620
actually, we were just showing
a real quick toast out

285
00:14:43.620 --> 00:14:46.140
processing. We're collecting this information.
So as soon as we

286
00:14:46.140 --> 00:14:48.300
took away that toast and
people didn't associate the toast

287
00:14:48.300 --> 00:14:53.210
with the delay, you know,
haven't received any. Okay. That's

288
00:14:53.210 --> 00:14:57.260
cool. So I've got this
installed. You said all internal

289
00:14:57.260 --> 00:14:59.120
builds. There's a whole lot
of these out in the

290
00:14:59.120 --> 00:15:00.740
world. Now, I guess we
can go up and look

291
00:15:00.740 --> 00:15:03.380
at the downloads on, on
gallery to get an idea

292
00:15:03.380 --> 00:15:06.290
of how many of these
are, they're all talking back

293
00:15:06.470 --> 00:15:09.650
to you. I assume if
this happens on an airplane,

294
00:15:09.680 --> 00:15:11.450
you'll queue it up and
send it to me later

295
00:15:11.900 --> 00:15:14.680
or send it to yourself
later. Yes. With the external

296
00:15:14.680 --> 00:15:16.600
version, what we do is
we queue them all up

297
00:15:16.600 --> 00:15:18.910
from a particular session. Then
the next time you start,

298
00:15:18.910 --> 00:15:20.830
there's a sheet of, we're
going to show a prompt

299
00:15:20.830 --> 00:15:22.270
saying, Hey, do you want
to go and upload this

300
00:15:22.270 --> 00:15:25.000
information? Okay. Is it, is
this a lot of data?

301
00:15:27.070 --> 00:15:29.050
It depends on the length
of your session. Right? So

302
00:15:29.620 --> 00:15:34.180
each dump file usually weighs
in between, I'd say 500

303
00:15:34.180 --> 00:15:37.420
K to two mega depends.
You know, how many treads

304
00:15:37.420 --> 00:15:41.200
running and what they're doing
and you know, a course

305
00:15:41.200 --> 00:15:43.390
of a session. I probably
think about it. You get

306
00:15:43.660 --> 00:15:48.610
20, 10 to 20 delays.
And then so, you know,

307
00:15:48.760 --> 00:15:54.130
quick math that probably, you
know, 10 megabytes of data

308
00:15:54.490 --> 00:15:55.900
and then you hit, okay,
then we'll just go and

309
00:15:55.900 --> 00:15:58.390
upload that on the background.
I think we use any

310
00:15:58.390 --> 00:16:01.570
windows error reporting, which uses
like background transfer, like bits

311
00:16:01.570 --> 00:16:04.270
and stuff. So you know,
the bit service. So it

312
00:16:04.270 --> 00:16:06.400
doesn't interfere with your regular
browsing. So it kind of

313
00:16:06.400 --> 00:16:11.950
uploads on a very low
priority in the background. This

314
00:16:11.950 --> 00:16:14.440
episode of Hansel minutes is
brought to you by careers.

315
00:16:14.470 --> 00:16:18.190
2.0 careers, 2.0 is a
new service by our friends

316
00:16:18.190 --> 00:16:21.730
at stack overflow. You're probably
all familiar with stack overflow,

317
00:16:21.730 --> 00:16:26.440
the online, a resource dedicated
specifically to programmers and programming

318
00:16:26.440 --> 00:16:30.550
related topics. Well, the team
at stack overflow created careers

319
00:16:30.550 --> 00:16:33.850
2.0 to provide you with
access to great jobs and

320
00:16:33.850 --> 00:16:35.560
introduce you to a bunch
of great companies that you

321
00:16:35.560 --> 00:16:38.410
might consider working for, even
if you're not currently looking

322
00:16:38.410 --> 00:16:41.650
for a job, think of
careers. 2.0 is a programmer

323
00:16:41.650 --> 00:16:45.040
profile gives you a platform
to show that you're awesome

324
00:16:45.550 --> 00:16:49.960
by featuring your proudest contributions
to stack overflow, GitHub SourceForge

325
00:16:49.990 --> 00:16:53.530
Bitbucket, anything programming related, you
can even add your favorite

326
00:16:53.530 --> 00:16:58.150
programming books from amazon.com profiles
on careers. 2.0 are free.

327
00:16:58.330 --> 00:17:01.360
They're easy to get started,
especially by importing your LinkedIn

328
00:17:01.360 --> 00:17:06.670
profile. However, there's one catch
profiles and career 2.0 or

329
00:17:06.730 --> 00:17:10.030
invite only they did this
to keep out the spam

330
00:17:10.030 --> 00:17:14.080
and have a high quality
environment. Fortunately, for you as

331
00:17:14.080 --> 00:17:17.230
a Hansel minutes listener, I've
got your back head on

332
00:17:17.230 --> 00:17:22.930
over to careers dot stack
overflow.com/h M to accept your

333
00:17:22.930 --> 00:17:29.800
invitation today, once again, that's
careers dot stack, overflow.com/hm. I

334
00:17:29.800 --> 00:17:33.040
hope you like it. So
definitely if you're, you know,

335
00:17:33.040 --> 00:17:35.980
if you're in Uganda and
on a three G modem

336
00:17:36.040 --> 00:17:38.650
be aware that perf Watson
might not be for you,

337
00:17:38.650 --> 00:17:41.290
or you might want to
turn it off, but you

338
00:17:41.290 --> 00:17:43.810
know, 10 megabytes here and
there. If you have the

339
00:17:43.810 --> 00:17:47.770
bandwidth, it sounds like it's
valuable. Yeah. Sometimes, sometimes people,

340
00:17:48.080 --> 00:17:49.950
you know, when you install
a Microsoft, they pop up

341
00:17:49.950 --> 00:17:52.290
a dialog box that says,
do you want to participate

342
00:17:52.290 --> 00:17:55.380
in, you know, sending us
all this information? Do you

343
00:17:55.380 --> 00:17:57.810
want to be a member
of our, you know, advisory

344
00:17:57.810 --> 00:18:00.050
council or whatever crazy language
they put in there to

345
00:18:00.090 --> 00:18:03.990
say, I want to send
info. And we always wonder

346
00:18:04.380 --> 00:18:06.690
like, where is this going?
And what are you doing

347
00:18:06.690 --> 00:18:08.670
with that? And why do
I want to help you?

348
00:18:08.670 --> 00:18:11.350
Because you're the one that's
making me slow. So I've

349
00:18:11.430 --> 00:18:14.130
seen people say no, just
to be, just to be

350
00:18:14.130 --> 00:18:18.180
vindictive. And we, we just,
I think we just assume

351
00:18:18.180 --> 00:18:20.940
that the data just goes
nowhere and it's just sitting

352
00:18:20.940 --> 00:18:23.490
in a giant database somewhere.
What does it look like?

353
00:18:23.490 --> 00:18:25.410
Is there a big, is
this an Azure or is

354
00:18:25.410 --> 00:18:27.420
this a giant farm somewhere?
And what are you doing

355
00:18:27.420 --> 00:18:29.990
with all this? Right. So
in the case of perf

356
00:18:29.990 --> 00:18:34.340
Watson, we have this big
old SQL server, you know,

357
00:18:34.340 --> 00:18:38.270
it's 64 cause 128 gig
of Ram kind of crazy

358
00:18:38.270 --> 00:18:40.760
machine. And what we do
with those, some files, we

359
00:18:40.760 --> 00:18:43.820
can relocate the UI thread
within the dump file. Then

360
00:18:43.820 --> 00:18:46.160
we resolve the symbols, which
allow us to get, you

361
00:18:46.160 --> 00:18:49.970
know, the full method, name,
and module. And maybe even

362
00:18:49.970 --> 00:18:52.400
the line numbers has been
cold. So we extract all

363
00:18:52.400 --> 00:18:55.520
that information out like 24,
seven. It's just any dumb

364
00:18:55.520 --> 00:18:57.530
file that comes in. We
extract it out. And then

365
00:18:57.530 --> 00:18:59.780
we go and take, take
that cool stack and insert

366
00:18:59.780 --> 00:19:02.630
it into a, into a,
into a database. So we've

367
00:19:02.630 --> 00:19:04.820
got tons and tons of
calls, facts, all in this

368
00:19:05.090 --> 00:19:08.060
big database, we do some
smart things like we hash

369
00:19:08.060 --> 00:19:11.150
call stacks. So we don't
insert duplets and associate a

370
00:19:11.150 --> 00:19:13.700
certain hit. We call it
a hit is our internal

371
00:19:14.840 --> 00:19:17.630
nomenclature for it. So it
is associated with a cool

372
00:19:17.630 --> 00:19:21.050
stack. And then once we
have this big database of

373
00:19:21.050 --> 00:19:25.190
hits and calls backs, we
then we do aggregations and

374
00:19:25.190 --> 00:19:27.890
we create cool, a cool
tree of all cool stacks,

375
00:19:27.890 --> 00:19:30.710
maybe within an all data,
all within a particular build.

376
00:19:30.710 --> 00:19:34.070
So in the case of
the developer preview release, we're

377
00:19:34.070 --> 00:19:36.560
looking at that right now.
And what we'll do is

378
00:19:36.560 --> 00:19:38.480
we'll say, take all this
data and put it into

379
00:19:38.480 --> 00:19:41.390
a call tree. So how
that works is each call

380
00:19:41.390 --> 00:19:43.550
stack is slightly different, but
a lot of them are

381
00:19:43.550 --> 00:19:46.250
the same. Imagine at the
beginning you get like thread

382
00:19:46.250 --> 00:19:49.130
start and then vs main
and then are all I'm

383
00:19:49.130 --> 00:19:50.870
in the message loop. And
then it goes off and

384
00:19:50.870 --> 00:19:54.950
does different things. So this
kind of aggregation or call

385
00:19:54.950 --> 00:19:57.350
tree, or we also call
it a roll up, basically

386
00:19:57.350 --> 00:20:00.710
shows you the, the, the
splits in execution and how

387
00:20:00.710 --> 00:20:05.030
many people experiences lay down
that certain path. So we

388
00:20:05.320 --> 00:20:08.360
get this overall big feeling
about, Oh, here, here's the

389
00:20:08.360 --> 00:20:12.020
heavy path. You know, we
saw 2000 people how they'd

390
00:20:12.020 --> 00:20:14.300
lay down this path, then
what we can do on,

391
00:20:14.330 --> 00:20:16.640
we have this website we
use internally, which is a

392
00:20:16.640 --> 00:20:18.890
silver light web app and
allows you to query into

393
00:20:18.890 --> 00:20:21.410
this data. So imagine you've
got this roll up and

394
00:20:21.410 --> 00:20:23.390
you're like, Oh, I see
an interesting frame. Maybe it's

395
00:20:23.390 --> 00:20:26.150
something like solution open. You
can say, show me just

396
00:20:26.150 --> 00:20:29.960
the data where people are,
you know, all the quarterbacks

397
00:20:30.260 --> 00:20:32.630
that have solution open in
them. And then we'll get

398
00:20:32.690 --> 00:20:35.510
a roll up of, you
know, just that portion. But

399
00:20:35.720 --> 00:20:37.610
why we do that is
because if we can get

400
00:20:38.390 --> 00:20:41.870
more depth because we cut
off, I think it's not

401
00:20:41.870 --> 00:20:45.320
point not 5% inclusive. So
which is basically life and

402
00:20:45.320 --> 00:20:48.130
less than not, nor 5%
of users as late. We

403
00:20:48.130 --> 00:20:51.000
don't show it in the
tree. So not point not

404
00:20:51.000 --> 00:20:56.970
five is 0.05%. Is that
correct? That's right. Okay. So

405
00:20:57.000 --> 00:21:01.680
you're saying a very, very
small amount. Yes. Well, it

406
00:21:01.680 --> 00:21:03.240
depends on the size of
the data set as well.

407
00:21:03.240 --> 00:21:09.240
Right? It's kind of, it
doesn't mean that they're not

408
00:21:09.240 --> 00:21:10.980
going to be ignored. It
just means that, Hey, we've

409
00:21:10.980 --> 00:21:12.480
got so much data. We
really just don't want to

410
00:21:12.480 --> 00:21:14.820
pay the cost of canceling
that entire tree and storing

411
00:21:14.820 --> 00:21:18.810
it. So you, you split
it off safest solution open.

412
00:21:18.810 --> 00:21:20.520
And then what you do
is you go through that

413
00:21:20.520 --> 00:21:22.260
and we have like a
hot path feature, which shows

414
00:21:22.260 --> 00:21:24.510
you where the majority of
the cost is. And then

415
00:21:24.510 --> 00:21:26.370
you may go and associate
that with a bug in

416
00:21:26.370 --> 00:21:29.160
our bug tracking system. And
then we track that delay

417
00:21:29.160 --> 00:21:30.870
to that bug, and then
we push that to be

418
00:21:30.870 --> 00:21:34.140
fixed. Interesting. Okay. So this
is, this is this isn't

419
00:21:34.260 --> 00:21:38.700
complicated. It seems like, it
seems like Microsoft has moved

420
00:21:38.730 --> 00:21:42.300
towards this, this telemetry thing.
And you know, maybe it's

421
00:21:42.300 --> 00:21:44.700
always been a Microsoft thing.
Or maybe to me, it

422
00:21:44.700 --> 00:21:49.530
feels like somewhere around windows
seven, this culture of intense

423
00:21:49.530 --> 00:21:51.630
analysis. Like if you look
at the building windows eight

424
00:21:51.630 --> 00:21:54.330
blog, you know, they'll, they'll
throw these numbers out very

425
00:21:54.330 --> 00:21:57.270
casually and they'll, they'll say
something like, and I'm making

426
00:21:57.270 --> 00:22:00.030
this up, they'll say like,
you know, only 13% of

427
00:22:00.030 --> 00:22:02.460
people click on the start
menu on a Tuesday. And

428
00:22:02.460 --> 00:22:05.280
that made us design the
system in this way, that

429
00:22:05.280 --> 00:22:08.340
the da, and I'm thinking
to myself, you know, wow,

430
00:22:08.340 --> 00:22:10.050
is that all the data
that, that's what the got

431
00:22:10.050 --> 00:22:13.500
from my anonymous data. And
now you've got this giant

432
00:22:13.500 --> 00:22:16.590
SQL server that's showing like
how I'm moving around in

433
00:22:16.710 --> 00:22:20.540
visual studio and telling me
stuff like, you know, I

434
00:22:20.550 --> 00:22:23.790
assume that you also know
whether I use a hot

435
00:22:23.790 --> 00:22:25.470
key or not, and maybe
the hot key, it was

436
00:22:25.470 --> 00:22:29.640
the slow path versus using
the UI, right. Click menus

437
00:22:29.640 --> 00:22:33.000
and stuff like that. Yes.
Is it, is this just

438
00:22:33.000 --> 00:22:35.880
something you wander around in,
or is there an automated,

439
00:22:35.880 --> 00:22:39.090
like email that goes out
that says, here's the 10

440
00:22:39.090 --> 00:22:41.940
hot things that happened this
week? You know, 5,000 people

441
00:22:41.940 --> 00:22:47.580
hit this this week. It's
not fully automated. We definitely

442
00:22:47.580 --> 00:22:49.890
like to get there, but
I'm personally a big believer

443
00:22:49.890 --> 00:22:52.770
in like human analysis. You
know, we had a choice

444
00:22:52.770 --> 00:22:55.470
when we were developing this,
like, could we go and

445
00:22:55.470 --> 00:22:58.170
make something that's fully automated?
They're gonna tell us automatically

446
00:22:58.170 --> 00:22:59.970
what's wrong. But it turns
out it was pretty hard

447
00:22:59.970 --> 00:23:02.370
to do. And a human
could usually do it in

448
00:23:02.400 --> 00:23:05.730
the space of an hour.
So once we split off

449
00:23:05.730 --> 00:23:08.010
the issues into the, we
call them queries within our

450
00:23:08.010 --> 00:23:10.770
system. So when I talked
about splitting solution, open that

451
00:23:10.770 --> 00:23:13.170
kind of thing, when, when
we split these off into

452
00:23:13.170 --> 00:23:16.440
separate queries, then at that
point we've associated bug with

453
00:23:16.440 --> 00:23:19.170
them, then we track them.
So we can say, we

454
00:23:19.170 --> 00:23:21.720
started off with, you know,
a thousand people hitting this.

455
00:23:21.720 --> 00:23:23.790
And now we can see
that this is growing over

456
00:23:23.790 --> 00:23:27.360
time, or this is a
persistent issue and things like

457
00:23:27.360 --> 00:23:31.860
that, but we, it's definitely
not automated. We do have

458
00:23:31.860 --> 00:23:33.810
reporting that goes out that
says, Hey, these are the

459
00:23:33.810 --> 00:23:38.400
top 20 issues in, in
a release. But you know,

460
00:23:38.400 --> 00:23:41.820
that starts with human analysis
at the beginning. And, and

461
00:23:41.820 --> 00:23:46.340
do those, those top issues.
Like they get like visibility,

462
00:23:46.340 --> 00:23:48.350
like bosses are like looking
at that and they're like,

463
00:23:48.380 --> 00:23:49.940
Oh, I'm on fail. What
the hell is going on

464
00:23:49.940 --> 00:23:53.350
with? Yup, definitely. I definitely
loved the most. And what's

465
00:23:53.350 --> 00:23:55.330
going on with this happened.
There's not a bug associated

466
00:23:55.330 --> 00:23:58.330
with this new trends and
things like that. Yeah. It

467
00:23:58.330 --> 00:24:02.200
goes out. We have in
certainly up performance champs, alias,

468
00:24:02.200 --> 00:24:04.780
which is, you know, top
people working on performance for

469
00:24:04.930 --> 00:24:07.420
each of the teams within
visual studio and the report

470
00:24:07.420 --> 00:24:09.670
goes to there. And then,
you know, it also goes

471
00:24:09.670 --> 00:24:12.670
up to leadership as well.
So it does definitely has

472
00:24:12.670 --> 00:24:17.410
great, great visibility. So I
don't know if it's cool

473
00:24:17.410 --> 00:24:19.130
that you, that you've snuck
on my show and I,

474
00:24:19.270 --> 00:24:21.070
I appreciate that. I'm being
able to ask you all

475
00:24:21.070 --> 00:24:25.350
sorts of questions. I think
it's cool that the teams

476
00:24:25.350 --> 00:24:26.890
that I like, I know
that my team is cool

477
00:24:26.890 --> 00:24:30.340
with telling stuff out, you
know, very transparently. And I

478
00:24:30.340 --> 00:24:31.840
think it's really cool that
you were doing that as

479
00:24:31.840 --> 00:24:35.440
well. So let me push
your good nature a little

480
00:24:35.440 --> 00:24:38.080
farther and say, tell me
some really good bug, give

481
00:24:38.080 --> 00:24:40.690
me an example where you
put perf Watts and on,

482
00:24:40.690 --> 00:24:43.270
and within the first couple
of months you discovered something

483
00:24:43.270 --> 00:24:44.800
and no one thought it
would have been slow. And

484
00:24:44.800 --> 00:24:47.710
it turns out that, you
know, everyone was catching this

485
00:24:47.710 --> 00:24:50.320
issue and it was sending
us to Cleveland. Oh yeah,

486
00:24:50.350 --> 00:24:53.200
no problem. This is actually
a very strange one. It

487
00:24:53.200 --> 00:24:56.110
turned out to be something
from windows. So when we

488
00:24:56.110 --> 00:24:59.710
process messages, when there's no
messages to be processed there,

489
00:24:59.710 --> 00:25:02.200
input, we enter a thing
called idle, which is basically,

490
00:25:02.230 --> 00:25:04.420
do you, I tried this
doing nothing and you can

491
00:25:04.420 --> 00:25:06.940
schedule work here, right? So
you can say, when you

492
00:25:06.940 --> 00:25:08.590
reach idle, this is kind
of like if you're using

493
00:25:08.590 --> 00:25:12.400
dove DPF and you say
a dispatcher begin invoke, and

494
00:25:12.400 --> 00:25:15.010
you say, you know, privacy
application idol, that means, Hey,

495
00:25:15.010 --> 00:25:16.600
there's no input. Go and
do something on the UI

496
00:25:16.600 --> 00:25:19.530
thread. You know, we go
off and do idle task.

497
00:25:19.530 --> 00:25:22.510
And one of these was
a really innocuous, super innocuous

498
00:25:23.380 --> 00:25:26.290
sleep, sleepy X call to
the offering system with a

499
00:25:26.290 --> 00:25:29.640
time of zero. And you'd
be like, why, why, why

500
00:25:29.650 --> 00:25:31.960
would we do that? What
does that mean? Slow, slow

501
00:25:31.960 --> 00:25:33.610
down a little bit. And
give me a little more

502
00:25:33.610 --> 00:25:37.660
detail. So the system is
no one's doing anything. I

503
00:25:37.660 --> 00:25:40.540
haven't moved my mouse in
a while. And this is

504
00:25:40.540 --> 00:25:42.770
a good time for visual
studio to catch up on

505
00:25:42.960 --> 00:25:46.330
little things that needs to
be doing. Yes, yes, exactly.

506
00:25:46.330 --> 00:25:48.430
And one of those little
things was sleep with zero

507
00:25:48.430 --> 00:25:50.950
time timeout, which I knew
like, well, why would you

508
00:25:50.950 --> 00:25:53.540
want to sleep with a
Xero timeout? Well, this is

509
00:25:53.560 --> 00:25:57.820
a processing APC messages, which
are like another kind of

510
00:25:57.820 --> 00:26:01.840
RPC and other kinds of
scheduled message. And more often

511
00:26:01.840 --> 00:26:04.840
than not actually we, there
only one feature using this

512
00:26:04.840 --> 00:26:07.270
and we took it out,
but we still see delays

513
00:26:07.600 --> 00:26:10.450
in the sleep call. And
we're like, like, well, it's

514
00:26:10.450 --> 00:26:12.880
sleeping for zero. Why on
earth? We drank for two

515
00:26:12.880 --> 00:26:18.160
seconds here. And it turned
out the, the windows, the

516
00:26:18.160 --> 00:26:21.250
windows window manager can actually
take a global lock on,

517
00:26:22.390 --> 00:26:26.340
on, on sleep timers. And
you know, it may be,

518
00:26:26.500 --> 00:26:28.690
Hey, when is going off
and doing something and our

519
00:26:28.690 --> 00:26:31.120
application would hang because of
that. And it was totally

520
00:26:31.120 --> 00:26:36.850
safe to remove the code.
Totally, totally innocuous, you know,

521
00:26:36.850 --> 00:26:39.910
totally Anita code was causing
us to delay on a,

522
00:26:40.030 --> 00:26:42.040
quite a regular cadence. So
let me see if I

523
00:26:42.040 --> 00:26:46.380
understand this because paraphrasing helps
me learn. There was a

524
00:26:46.380 --> 00:26:49.230
way that, that, that a
component in visual studio was

525
00:26:49.230 --> 00:26:52.560
using to communicate with parts
of visual studio. And that

526
00:26:52.560 --> 00:26:56.100
component had been long removed,
but the, but the part

527
00:26:56.100 --> 00:26:58.560
in the, in the message
loop that said check to

528
00:26:58.560 --> 00:27:01.170
see if that component has
anything to say was still

529
00:27:01.170 --> 00:27:04.590
there. And it happened to
use a communication technique that

530
00:27:04.680 --> 00:27:09.870
windows itself used some historical
wind 32 thing. So, you

531
00:27:09.870 --> 00:27:12.990
know, you might have some
bizarre side effect like windows

532
00:27:12.990 --> 00:27:16.470
is looking at your, at
your, your SD card for

533
00:27:16.500 --> 00:27:20.820
pictures and using this communication
technique and visual studio is

534
00:27:20.820 --> 00:27:23.070
in the middle of an
idol loop. So, you know,

535
00:27:23.160 --> 00:27:25.560
a bird flaps, its wings
in Brazil and a hurricane

536
00:27:25.560 --> 00:27:30.350
happens in new Orleans. Exactly,
exactly. I think it was,

537
00:27:30.350 --> 00:27:32.900
you know, we'd never expect
that another one, which was,

538
00:27:33.320 --> 00:27:35.120
you know, when we have
the white cursor that comes

539
00:27:35.120 --> 00:27:37.850
up and says should be
obviously right on the way

540
00:27:39.280 --> 00:27:44.420
we, we never actually say
stop and cursor. What we

541
00:27:44.420 --> 00:27:47.330
do is we say stop
Casa. And the next time

542
00:27:47.330 --> 00:27:51.050
we we've processed all the
input that we automatically reset.

543
00:27:51.050 --> 00:27:54.710
It we'd use a timer
for that. Now it turns

544
00:27:54.710 --> 00:27:57.250
out that another, another thing
which we never saw with

545
00:27:57.260 --> 00:27:59.510
Thomas is that for much,
the same reason as the

546
00:27:59.510 --> 00:28:02.990
sleep example would be killing
that timer. Even if that

547
00:28:02.990 --> 00:28:05.270
timer doesn't exist, which is
totally valid, according to the

548
00:28:05.270 --> 00:28:08.480
documentation where it could also
cause a hang and we

549
00:28:08.480 --> 00:28:10.490
are doing this again in
the idle loop and visual

550
00:28:10.490 --> 00:28:14.180
studio. Oh, so that's actually
a matter of the instructor

551
00:28:14.210 --> 00:28:17.030
there. The documentation indicates the
API would behave this way,

552
00:28:17.030 --> 00:28:21.500
but reality indicates it does
not. Yeah. Yeah. Sometimes it

553
00:28:21.500 --> 00:28:23.810
may, you know, and when
we talked to Ashley, Raymond

554
00:28:23.810 --> 00:28:25.760
chat, and then we're like,
Hey, what's what's going on

555
00:28:25.760 --> 00:28:28.280
with this. She's like, wow.
Looking at the code, that

556
00:28:28.280 --> 00:28:30.140
is a possibility that someone
may have a lock on

557
00:28:30.140 --> 00:28:32.900
one of these things. So
you shouldn't kit. So, you

558
00:28:32.900 --> 00:28:35.660
know, the thing was if
the time is no, don't

559
00:28:35.720 --> 00:28:37.910
try and kill it just
don't do it. And that,

560
00:28:37.910 --> 00:28:41.840
that fixed the issue. So
these issues are things inside

561
00:28:41.840 --> 00:28:44.090
the, the idle loop. How
often does it come up

562
00:28:44.090 --> 00:28:48.170
where, you know, some component
or some, I wouldn't say

563
00:28:48.170 --> 00:28:51.410
third party, but internal third-party
component and visual studio has

564
00:28:51.410 --> 00:28:53.270
a problem. Like I had
a, so a couple of

565
00:28:53.270 --> 00:28:56.240
conversations and well, this guy
I was talking about who

566
00:28:56.240 --> 00:28:58.790
came up with the term,
going to Cleveland and I

567
00:28:58.790 --> 00:29:01.460
was saying, well, my machine's
just not just not locking.

568
00:29:01.460 --> 00:29:03.620
I don't see these these
delays. And he says, well,

569
00:29:03.620 --> 00:29:06.980
I'm doing XAML work. And
I'm using the XAML editor.

570
00:29:07.610 --> 00:29:11.270
And I realized that that
designer, that visual designer isn't

571
00:29:11.270 --> 00:29:13.760
loaded on my machine until
I actually open a file

572
00:29:13.760 --> 00:29:16.100
like that. And that's a
very common thing in visual

573
00:29:16.100 --> 00:29:20.090
studio that DLLs and componentry
won't be opened until I

574
00:29:20.090 --> 00:29:22.640
decide to do that. Like
the solution Explorer or the

575
00:29:22.640 --> 00:29:26.510
data that the data connections
area or the XAML Explorer.

576
00:29:27.110 --> 00:29:29.000
How do you find those?
And then do you have

577
00:29:29.000 --> 00:29:31.610
to call that group and
say, Hey, you know other

578
00:29:31.610 --> 00:29:33.680
guy at Microsoft, you don't
know me, I'm Phil. And

579
00:29:33.680 --> 00:29:37.610
I'm, it turns out you're
really slow. Yes, no, I

580
00:29:37.620 --> 00:29:39.440
do that all the time.
You know, we do have

581
00:29:39.440 --> 00:29:41.410
a template for our bugs
that has guidance and stuff

582
00:29:41.410 --> 00:29:45.040
like that. But yes, we,
yeah, definitely. We can see

583
00:29:45.040 --> 00:29:48.070
stuff like, Hey, you press
the key. And then it

584
00:29:48.070 --> 00:29:49.990
went through into the editor
and we can see what

585
00:29:49.990 --> 00:29:52.570
kind of edits or design
surface that was. And then

586
00:29:52.570 --> 00:29:55.300
that design step is may
go off and, you know,

587
00:29:55.300 --> 00:29:58.060
do some expensive operation. And
one that I can talk

588
00:29:58.060 --> 00:30:04.060
to him maybe is loading,
you know, the parameter and,

589
00:30:04.240 --> 00:30:05.830
and the dot comments for
like quick info when you

590
00:30:05.830 --> 00:30:08.460
hover over something. Okay. So
when you're, when you're, when

591
00:30:08.460 --> 00:30:10.750
you move your mouse over
a, a method and then

592
00:30:10.750 --> 00:30:13.980
the little tool tip pops
up. Exactly. And that comes

593
00:30:13.980 --> 00:30:18.330
from XML documentation. So if
that wasn't ready quite yet,

594
00:30:18.330 --> 00:30:21.810
it's like, well, I better
finish reading this file. And

595
00:30:22.050 --> 00:30:24.750
we would just wait on
file IO. And a lot

596
00:30:24.750 --> 00:30:28.380
of the delays in visual
studio that we've seen in,

597
00:30:28.560 --> 00:30:33.210
I'd say a good 50,
60% and not necessarily poorly

598
00:30:33.210 --> 00:30:35.730
written code. Like, Hey, I'm
doing a four, a four

599
00:30:35.730 --> 00:30:38.980
loop phages. It's, it's blocked
on file IO. And we,

600
00:30:38.980 --> 00:30:40.710
we do a lot of
file IO on the youth

601
00:30:40.800 --> 00:30:43.530
UI thread. A lot of
the fixes for that making

602
00:30:43.530 --> 00:30:45.960
that file out. I lazy
doing on a background thread

603
00:30:45.960 --> 00:30:48.480
and then letting the UI
thread know when it's ready.

604
00:30:49.770 --> 00:30:51.600
So it sounds like a
lot of this is really

605
00:30:51.600 --> 00:30:54.120
being like this. This has
support, like this is being

606
00:30:54.120 --> 00:30:56.130
driven into the product because
a number of people have

607
00:30:56.130 --> 00:30:59.400
said that the developer preview
of visual studio is a

608
00:30:59.400 --> 00:31:02.970
lot faster. Are you going
through, and you're fixing all

609
00:31:02.970 --> 00:31:08.460
these, like the chart of
obvious performance mistakes. I assume

610
00:31:08.460 --> 00:31:12.270
that it's the bar chart
it's going lower, right? Yes,

611
00:31:12.660 --> 00:31:16.080
yes. Now some of them
are easy fixes, easiest fixes.

612
00:31:16.080 --> 00:31:18.840
Don't do it. Right. Don't
do just, do you even

613
00:31:18.840 --> 00:31:21.720
need to do that? There
was one case I can

614
00:31:21.720 --> 00:31:24.570
speak to you with that.
We have disaster recovery management,

615
00:31:24.570 --> 00:31:27.030
like auto recovers name of
the feature, and every five

616
00:31:27.030 --> 00:31:28.140
minutes, it's going to go
in and save off all

617
00:31:28.140 --> 00:31:31.530
your documents so we can
have a backup in case

618
00:31:31.530 --> 00:31:35.820
we crash. Now, that's all
goodness. But in video studio,

619
00:31:35.850 --> 00:31:39.180
2010 basis, we had, you
know, some stability problems. Since

620
00:31:39.180 --> 00:31:42.750
we also put a thing
in there for saving the

621
00:31:43.200 --> 00:31:45.750
saving, saving the active window
pro profile in case you

622
00:31:45.750 --> 00:31:48.060
crash. And that's like where
the positions of your tool

623
00:31:48.060 --> 00:31:51.180
windows are and stuff. And
so every five minutes you'd

624
00:31:51.180 --> 00:31:55.830
be saving the window profile
and, you know, the, the

625
00:31:55.830 --> 00:31:57.330
fix that was just don't
do it. We don't need

626
00:31:57.330 --> 00:31:59.550
to be, we fixed the
stability problems with the window

627
00:31:59.550 --> 00:32:03.290
manager and the shell. And
we saved when we switched

628
00:32:03.300 --> 00:32:06.990
them design to debug. Anyway.
So, you know, that's the

629
00:32:06.990 --> 00:32:08.940
case where we identified that
and push that down. And

630
00:32:08.940 --> 00:32:12.150
yeah, we definitely do have
support now that was an

631
00:32:12.150 --> 00:32:14.520
easy fix, but there are
some fixes that do require

632
00:32:14.590 --> 00:32:18.210
we architecture, especially with some
of these sta threaded things.

633
00:32:18.210 --> 00:32:21.240
But I talk about these
services eight years old plus,

634
00:32:21.510 --> 00:32:24.300
and they're all set up
to, you know, have not

635
00:32:24.300 --> 00:32:26.560
really any concept of locking
cause that sta call is

636
00:32:26.560 --> 00:32:29.460
essentially a big global lock
and that will take probably

637
00:32:29.460 --> 00:32:31.740
investment over multiple releases to
get it to where it

638
00:32:31.740 --> 00:32:34.080
needs to be. We kind
of pick off the, we,

639
00:32:34.080 --> 00:32:36.000
we, we pick the top
ones and go after them

640
00:32:36.000 --> 00:32:37.890
and see what to see
what we can do. But

641
00:32:38.310 --> 00:32:41.630
we've also got to that.
This responsiveness is kind of

642
00:32:41.630 --> 00:32:43.640
like a desk desk from
a thousand paper cuts. There's

643
00:32:43.640 --> 00:32:45.530
lots of little ones, which
are lots of little easy

644
00:32:45.530 --> 00:32:48.320
fixes and it may not
be a huge way on

645
00:32:48.320 --> 00:32:50.780
the graph, but all of
them in combination would be

646
00:32:50.840 --> 00:32:53.500
a good win for us.
That's a really good point.

647
00:32:53.500 --> 00:32:55.410
That's a really good point.
Do you have like a

648
00:32:55.450 --> 00:32:58.450
final story of like the,
like the worst one that

649
00:32:58.450 --> 00:33:02.050
you've found that required a
rearchitecture and like made people

650
00:33:02.050 --> 00:33:04.210
really make a hard decision
and go, Oh man, that's

651
00:33:04.210 --> 00:33:06.610
going to suck, but if
we do it, you know,

652
00:33:06.640 --> 00:33:09.610
lots and lots of people
are gonna notice that. Yup.

653
00:33:09.820 --> 00:33:11.650
Yeah, no, definitely. There's one
in the developer for you

654
00:33:11.650 --> 00:33:16.000
actually is we moved a
C C-sharp build out a

655
00:33:16.000 --> 00:33:18.370
process. So you could think,
Hey see shots throughout our

656
00:33:18.370 --> 00:33:22.180
process, right? Invokes the C
sharp compiler, but that's all

657
00:33:22.210 --> 00:33:26.980
orchestrated via ms. Build and
Emma's build itself is the

658
00:33:26.980 --> 00:33:30.010
backing store to your project
system. And we were actually

659
00:33:30.010 --> 00:33:32.470
evaluating that in process. So
we had to spin off

660
00:33:32.470 --> 00:33:37.120
a team of about six
people for probably about two

661
00:33:37.120 --> 00:33:39.490
months to go off and
do this work and move

662
00:33:39.490 --> 00:33:44.080
this out of process and
use, use, you know, dot

663
00:33:44.080 --> 00:33:46.570
net remoting to kind of
core to the ask process,

664
00:33:46.570 --> 00:33:48.250
component part, and get all
the bits of information we

665
00:33:48.250 --> 00:33:52.210
need back in process and
looked through any performance issues

666
00:33:52.240 --> 00:33:54.730
that made itself, because we
think, Hey, we move our

667
00:33:54.730 --> 00:33:57.910
processes. It's going to be
better. Right. But we have

668
00:33:57.910 --> 00:34:00.310
to verify that we have
to run it through regression

669
00:34:00.310 --> 00:34:02.320
systems and make sure it's
where it needs to be.

670
00:34:02.650 --> 00:34:04.360
And so we here, we
have to spin off spit

671
00:34:04.360 --> 00:34:06.940
off this team and changed
the way that that was

672
00:34:06.940 --> 00:34:09.520
working, but it's worth it
in the end, because now

673
00:34:09.550 --> 00:34:11.350
when you are building previously,
if you're doing a big

674
00:34:11.380 --> 00:34:14.170
bill, you try and maybe
click around the IDE and

675
00:34:14.170 --> 00:34:16.570
it would just kind of
half respond to you. Cause

676
00:34:16.570 --> 00:34:20.470
we are faking responsiveness kind
of like you can VB

677
00:34:20.470 --> 00:34:22.600
you do like do events.
And we kind of like,

678
00:34:22.600 --> 00:34:24.760
just push the message from
a little bit further forward,

679
00:34:24.760 --> 00:34:27.580
but kind of just doing
random points during the build.

680
00:34:28.240 --> 00:34:29.710
We just moved it from
the, our process. And it

681
00:34:29.710 --> 00:34:32.200
was a big investment, but
it pays off because now

682
00:34:32.200 --> 00:34:34.570
when it's building, you can
click on open menus and

683
00:34:34.840 --> 00:34:36.880
use the object browser. You
can even add a code

684
00:34:36.880 --> 00:34:39.490
if you want it to.
Wow. Okay. So that, Oh

685
00:34:39.520 --> 00:34:41.920
really? I can edit kind
of amazing. I can edit

686
00:34:41.920 --> 00:34:45.010
code now when I'm building
and I been with, You

687
00:34:45.010 --> 00:34:46.570
may get a warning. If
it's already built, then you're

688
00:34:46.570 --> 00:34:48.790
good. It's not going to
give you a warning. Now

689
00:34:48.790 --> 00:34:51.970
in VB BD build works
a little bit differently. We

690
00:34:51.970 --> 00:34:53.770
moved that onto a background
thread and you can't edit

691
00:34:53.770 --> 00:34:56.230
code for VB cause the
way the VB build web,

692
00:34:56.260 --> 00:34:59.230
cause it's actually building all
the time as you're typing

693
00:34:59.680 --> 00:35:03.340
and then the bill process,
essentially a serialization of that

694
00:35:03.490 --> 00:35:06.610
prebuilt stuff in memory to
desk. Right. Right. And that's

695
00:35:06.610 --> 00:35:11.020
something that BP is known
for. Yeah. So this, this,

696
00:35:11.020 --> 00:35:12.580
this means that on a
machine with a lot of

697
00:35:12.580 --> 00:35:14.830
processors, like, like my own
personal machine, I've got one

698
00:35:14.830 --> 00:35:17.590
of the hexachord machines, moving
things out of process. Like

699
00:35:17.590 --> 00:35:19.810
that just makes everything more
efficient. I've got the extra

700
00:35:19.810 --> 00:35:22.690
processes to do that work.
Yep. So this is, this

701
00:35:22.690 --> 00:35:24.370
is a big win. Not
just because it made it

702
00:35:24.370 --> 00:35:27.250
more responsive, but it's also
kind of more future-proofed it

703
00:35:27.250 --> 00:35:31.510
makes visual studio less, a
big monolithic exe with a

704
00:35:31.510 --> 00:35:34.330
bunch of in process stuff
and more, a number of

705
00:35:34.330 --> 00:35:38.900
smaller EFCs that all work
together. Yes. Yes. And I

706
00:35:38.910 --> 00:35:40.830
think that will be a
trend for visual studio moving

707
00:35:40.830 --> 00:35:44.450
forward, or at least I
would hope so. Right. The,

708
00:35:44.450 --> 00:35:47.610
the, the XAML designer in
developed review at least also

709
00:35:47.610 --> 00:35:50.010
runs out process as well.
Cause that needs to load

710
00:35:50.010 --> 00:35:53.820
a bunch of a bunch
of assemblies to do essentially

711
00:35:54.000 --> 00:35:55.800
figure out, you know, reflection
and figure out what kind

712
00:35:55.800 --> 00:35:58.770
of user controls and things
like that. You've got to

713
00:35:58.890 --> 00:36:01.050
give you the Intel sets
of the pole. And so

714
00:36:01.050 --> 00:36:03.180
those are certainly needs to
be loaded and reflected over.

715
00:36:03.270 --> 00:36:06.570
And we were doing previously
doing that in visual. She

716
00:36:06.570 --> 00:36:10.080
does process, we are doing
it in a separate abdomen,

717
00:36:10.080 --> 00:36:11.940
but it was still the
same process. It was still

718
00:36:12.090 --> 00:36:15.330
the same memory. So moving
these, our process also has

719
00:36:15.330 --> 00:36:17.880
a great memory benefit. And
we've seen that with moving

720
00:36:18.210 --> 00:36:21.980
those animals designer. I had
a process. Very cool. Well,

721
00:36:22.070 --> 00:36:23.990
thanks a lot, Phil. I
really appreciate you coming on.

722
00:36:23.990 --> 00:36:26.150
And then give me the
straight story about what's going

723
00:36:26.150 --> 00:36:29.380
on in, in the next
version of his studio. It's

724
00:36:29.390 --> 00:36:31.910
cool. Because sometimes you don't
see all these changes. Well,

725
00:36:31.910 --> 00:36:33.770
actually you never see them.
All right. Unless you're poking

726
00:36:33.770 --> 00:36:35.960
around in process Explorer. No,
one's gonna know a lot

727
00:36:35.960 --> 00:36:38.360
of this stuff is happening,
but that makes me want

728
00:36:38.360 --> 00:36:40.820
to spend a little bit
more time with the developer

729
00:36:40.820 --> 00:36:44.360
preview. I don't know, really
test them side by side

730
00:36:44.360 --> 00:36:46.070
and see if I'm going
to see these performance improvements

731
00:36:46.070 --> 00:36:48.650
as well. And of course
everyone should install perf Watson.

732
00:36:49.580 --> 00:36:53.510
Everyone should definitely Because Phil
is going to be looking

733
00:36:53.510 --> 00:36:56.390
at that data for us.
Yeah. Yes, yes. I have

734
00:36:56.390 --> 00:36:57.710
a little team of people
and we, we look at

735
00:36:57.710 --> 00:37:00.320
that data all the time.
Awesome. Well, thanks so much.

736
00:37:00.770 --> 00:37:04.310
Okay. No problem. This has
been another episode of Hanselminutes

737
00:37:04.580 --> 00:37:05.930
and we'll see you again
next week.

