WEBVTT FILE

1
00:00:00.060 --> 00:00:03.480
We really appreciate our sponsorship
from Tellerik. You can create

2
00:00:03.480 --> 00:00:07.710
compelling app experiences across any
screen with Tellerik platform. They're

3
00:00:07.710 --> 00:00:10.830
end to end platform, uniquely
combines industry leading UI tools

4
00:00:10.830 --> 00:00:14.580
with their cloud services totally
simplifies the entire app development

5
00:00:14.580 --> 00:00:18.630
life cycle. As you know,
Tellerik offers everything that.net developers

6
00:00:18.630 --> 00:00:21.300
need to build quality apps
faster. You can try it

7
00:00:21.300 --> 00:00:26.820
free at www dot <inaudible>
dot com slash platform. We

8
00:00:26.820 --> 00:00:42.480
here at Hanselman it's really
appreciate their support. <inaudible> from

9
00:00:42.480 --> 00:00:47.550
hanselminutes.com. It's Hansel minutes. Oh,
weekly discussion with web developer

10
00:00:47.550 --> 00:00:52.080
and technologist Scott Hanselman. This
is Lawrence Ryan announcing show number

11
00:00:52.080 --> 00:00:56.790
four 21. In this episode,
Scott talks with John Daniel Trask

12
00:00:57.210 --> 00:01:05.040
about managing errors across platforms
with reagan.io. Hi, this is

13
00:01:05.040 --> 00:01:07.110
Scott Hanselman. This is another
episode of Hansel minutes. I'm

14
00:01:07.110 --> 00:01:10.650
down here in Auckland, New Zealand,
just spending a day here

15
00:01:10.650 --> 00:01:13.950
for code mania. Really cool
conference. What's going on? And

16
00:01:13.950 --> 00:01:18.850
I'm talking with John Daniel Trask,
who is with mindscape and

17
00:01:18.930 --> 00:01:21.240
you guys have a new
company within mindscape. It's like

18
00:01:21.340 --> 00:01:25.050
a spinoff or a product,
not just a product of

19
00:01:25.050 --> 00:01:27.660
mindscape, but it's under its
own sort of branding quite

20
00:01:27.660 --> 00:01:31.950
strongly as it's its own
website. So rather than being

21
00:01:31.950 --> 00:01:36.630
something underneath the mindscape hq.com
address. Okay. Ray gun, R

22
00:01:36.630 --> 00:01:39.810
a Y G U n.io.
And if you think that

23
00:01:39.810 --> 00:01:42.600
that name mindscape seems familiar
it's because back on show

24
00:01:42.600 --> 00:01:47.820
277, we talked with Ivan
from mindscape about polyglot programming

25
00:01:47.820 --> 00:01:50.700
at the time Ivan and
the folks at mindscape we're

26
00:01:50.700 --> 00:01:54.570
exploring solving problems with just
more than one language. I

27
00:01:54.570 --> 00:01:56.730
tend to be a C
sharp focused person. I want

28
00:01:56.730 --> 00:01:59.070
to do everything I can
and C sharp. I haven't

29
00:01:59.100 --> 00:02:00.930
picked the right language for
the job. And you guys

30
00:02:00.930 --> 00:02:03.840
made some pretty cool less
sash, coffee script things you

31
00:02:03.840 --> 00:02:06.630
gave out to the community.
That's right. Yeah. And, and

32
00:02:06.630 --> 00:02:10.290
we've continued to be a
fairly polyglot sort of focused

33
00:02:10.290 --> 00:02:13.500
company ever since then as
well. Yeah, well, and that's

34
00:02:13.500 --> 00:02:16.140
the thing that I thought
was amazing about Reagan and

35
00:02:16.200 --> 00:02:20.100
true story. What happened was
I and my buddy Greg

36
00:02:20.130 --> 00:02:23.970
are doing this startup on
the side and we're doing

37
00:02:23.970 --> 00:02:29.010
this iPhone app plus service
plus website. So I'm doing

38
00:02:29.400 --> 00:02:32.640
asp.net and Xamarin on an
iPhone. Plus I've got this

39
00:02:32.640 --> 00:02:36.150
Azure thing and I wanted
an error handling site where

40
00:02:36.150 --> 00:02:39.090
I could throw my exceptions,
but it was really important

41
00:02:39.120 --> 00:02:42.450
that it supported all these
different platforms. And I wasn't

42
00:02:42.450 --> 00:02:44.220
sure if I was going
to be doing Xamarin or

43
00:02:44.220 --> 00:02:48.630
native polyglot programming kind of
came up in the sense

44
00:02:48.630 --> 00:02:53.520
of, I have one product
across many platforms. Absolutely. And

45
00:02:53.520 --> 00:02:55.680
I mean, that was one
of the core sort of

46
00:02:55.680 --> 00:02:58.680
focuses when we set out
to build the services. There

47
00:02:58.680 --> 00:03:01.720
are other services out there,
But they usually focus on

48
00:03:01.720 --> 00:03:04.690
one platform like say iOS
or just Ruby on rails.

49
00:03:04.960 --> 00:03:07.000
But if you look at
the way that modern software

50
00:03:07.000 --> 00:03:10.270
development sort of occurs, like
even take your at your

51
00:03:10.270 --> 00:03:13.600
startup here, you know, any
sufficiently advanced application tends to

52
00:03:13.600 --> 00:03:17.200
talk to a back in
service written another platform, you

53
00:03:17.200 --> 00:03:20.020
know, people are using more
and more languages and platforms

54
00:03:20.020 --> 00:03:24.630
to deliver software. It's becoming
quite commonplace. Yeah. Yeah. We

55
00:03:24.630 --> 00:03:27.630
looked at a Crashlytics, which
I think got bought by

56
00:03:27.630 --> 00:03:31.380
Twitter and it's really iOS
focused, like it's really backend

57
00:03:31.380 --> 00:03:35.010
air handling for iOS. Yeah.
So that, that was iOS.

58
00:03:35.010 --> 00:03:36.780
And I think they also
do a little bit with

59
00:03:36.780 --> 00:03:39.570
Android, but iOS is there
this sort of key focus

60
00:03:39.570 --> 00:03:41.550
and there's other players out
there that sort of more

61
00:03:41.550 --> 00:03:45.000
focused on Android with a
little bit for iOS and

62
00:03:45.180 --> 00:03:48.780
there's other players like Airbrake,
for example, they, they had

63
00:03:48.780 --> 00:03:51.870
a few different platforms, but
by and large, we've worked

64
00:03:51.870 --> 00:03:54.450
really hard to be the
only one that sort of

65
00:03:54.450 --> 00:03:57.630
has first-class formal support for
so many platforms. A lot

66
00:03:57.630 --> 00:03:59.280
of them will say, Hey,
we have an API end

67
00:03:59.280 --> 00:04:02.190
point and the community has
written things for this. But

68
00:04:02.190 --> 00:04:05.490
then when it comes to
the intelligence on the backend

69
00:04:05.490 --> 00:04:08.610
for us intelligently grouping the
eras together and things like

70
00:04:08.610 --> 00:04:10.950
that, you actually have to
put some work in based

71
00:04:10.950 --> 00:04:13.890
on what language was throwing
the era. For example, you

72
00:04:13.890 --> 00:04:16.110
don't often get a stack
trace, say from a JavaScript

73
00:04:16.110 --> 00:04:18.780
exception or you, but you'll
get a great one out

74
00:04:18.780 --> 00:04:23.910
of.net or you need decent
vilification processing for iOS Sarah's

75
00:04:23.910 --> 00:04:26.970
to even make them human
readable. All of these things

76
00:04:27.630 --> 00:04:30.240
are platform specific. So you
can't really get away with

77
00:04:30.240 --> 00:04:33.450
doing a one, one language
and then saying, Hey, but

78
00:04:33.450 --> 00:04:36.090
it's an open API go
F go for gold, Right?

79
00:04:36.090 --> 00:04:38.370
Yeah, I've got, I went
and signed up, I think

80
00:04:38.370 --> 00:04:42.060
about four or five different
error handling sites. And the

81
00:04:42.060 --> 00:04:45.330
majority of them of course
had native iOS support for

82
00:04:45.390 --> 00:04:47.280
objective C. But when I
said I was doing this

83
00:04:47.280 --> 00:04:49.770
in C-sharp on a jammer,
and then that was an

84
00:04:49.770 --> 00:04:52.050
issue, or they would say,
Oh, well, one of our

85
00:04:52.050 --> 00:04:55.920
fans made a get hub
project that hasn't been touched

86
00:04:55.920 --> 00:04:58.620
in two years. And then,
and that that's, it's not

87
00:04:58.620 --> 00:05:01.050
that it's bad. I think
that's fine. But it's concerning

88
00:05:01.050 --> 00:05:04.500
because when I think about
software as a service, where

89
00:05:04.680 --> 00:05:07.890
in this case error handling
management and grouping in the

90
00:05:07.890 --> 00:05:10.140
cloud and analysis and all
the things that we're talking

91
00:05:10.140 --> 00:05:13.410
about, I need to pay
you my 50 bucks a

92
00:05:13.410 --> 00:05:15.690
month or whatever it is,
and have it just work.

93
00:05:16.170 --> 00:05:17.970
It's more than software as
a service where it runs

94
00:05:17.970 --> 00:05:20.670
in the cloud, on the
device. I can't have it

95
00:05:20.670 --> 00:05:24.790
block the device, use up
too much memory. We had

96
00:05:24.790 --> 00:05:27.120
a lot of things to
consider when it comes to

97
00:05:27.120 --> 00:05:29.910
a service like, like Reagan
for reporting errors. And you

98
00:05:29.910 --> 00:05:33.270
hit on a great point
there about not blocking or,

99
00:05:33.300 --> 00:05:36.870
you know, another challenge these
days is occasionally connected devices.

100
00:05:37.140 --> 00:05:39.270
So if you've got a
mobile device that crashes, but

101
00:05:39.270 --> 00:05:41.190
you happen to be in
a tunnel or on an

102
00:05:41.190 --> 00:05:45.090
airplane or, or whatever, you
as the software developers still

103
00:05:45.090 --> 00:05:47.040
actually want to get that
crash report. And so we,

104
00:05:47.310 --> 00:05:50.100
you know, make sure that
certain platforms we will serialize

105
00:05:50.100 --> 00:05:53.880
the exception data onto the
device. And then when there's

106
00:05:53.880 --> 00:05:56.660
a connection available again, try
and rescind it later. So

107
00:05:57.380 --> 00:05:59.690
yeah, it does that automatically
for a, I think we've

108
00:05:59.690 --> 00:06:01.970
got that in the iOS,
the Android stuff and the

109
00:06:01.970 --> 00:06:06.830
winter T slash windows phone
support. And I think it

110
00:06:06.830 --> 00:06:09.080
might've been yesterday. I think
we actually deployed the support

111
00:06:09.080 --> 00:06:12.050
for JavaScript to do it
to local storage. If there's

112
00:06:12.050 --> 00:06:15.380
no connection since that's becoming
a common scenario as well.

113
00:06:16.240 --> 00:06:18.640
My little startup also has
a WPF application using the

114
00:06:18.640 --> 00:06:21.910
desktop CLR. Do you do
that too? Absolutely. I mean,

115
00:06:21.970 --> 00:06:25.270
effectively mindscape is obviously a
dotnet company through and through.

116
00:06:26.170 --> 00:06:30.130
And so.net was our first
sort of platform to support,

117
00:06:30.520 --> 00:06:33.970
but we also brought people
into the company and also

118
00:06:34.000 --> 00:06:36.070
reached outside the company to
bring new people in, to

119
00:06:36.070 --> 00:06:39.370
focus as specialists on the
new platforms that we didn't

120
00:06:39.370 --> 00:06:41.770
have so much experience. And
for example, like Ruby on

121
00:06:41.770 --> 00:06:45.490
rails, we engaged an external
person to help us build

122
00:06:45.490 --> 00:06:47.860
that. So that was actually
one of my questions is

123
00:06:47.860 --> 00:06:51.010
that when I met with
one of your former employees,

124
00:06:51.010 --> 00:06:53.620
Ivan, he was such a
talented Polylite programmer. It made

125
00:06:53.620 --> 00:06:56.410
me feel like maybe I
could be a polyglot, but

126
00:06:56.410 --> 00:06:59.290
I don't think I would
be awesome on every platform.

127
00:06:59.530 --> 00:07:01.480
And I'm looking here at
your list, you've got cold

128
00:07:01.480 --> 00:07:04.390
fusion and Python. And like,
how do you know that

129
00:07:04.390 --> 00:07:07.870
you're doing those in the,
in the idiomatic way appropriate

130
00:07:07.870 --> 00:07:11.500
to that platform? So we,
we definitely, we have a

131
00:07:11.500 --> 00:07:13.860
bunch of them as skills
inside the company where we

132
00:07:13.900 --> 00:07:18.760
maintain them ourselves. But I
smile, obviously your listeners can't

133
00:07:18.760 --> 00:07:21.130
see me smiling, the cold
fusion. One's an interesting one

134
00:07:21.130 --> 00:07:24.880
because that was where a
friend of mine in Wellington,

135
00:07:24.940 --> 00:07:29.140
New Zealand, he, he is actually
an international trainer on cold

136
00:07:29.140 --> 00:07:30.880
fusion and he saw we
were building this and he

137
00:07:30.880 --> 00:07:33.430
really, really wanted to get
involved. And so we basically

138
00:07:33.430 --> 00:07:35.950
came to an agreement where
he runs a consultancy and

139
00:07:35.950 --> 00:07:39.670
we said, Hey, you know,
you write this and maintain

140
00:07:39.670 --> 00:07:41.710
it. You can, you know,
use Reagan. And so he's

141
00:07:41.710 --> 00:07:44.590
actually the person that is
effectively running point on the

142
00:07:44.590 --> 00:07:48.700
cold fusion stuff with us.
And so we don't try

143
00:07:48.700 --> 00:07:50.710
to claim that we're an
expert in cold fusion. We

144
00:07:50.710 --> 00:07:55.000
are experts quite comfortably in
ASP net, Java script. I

145
00:07:55.000 --> 00:07:56.530
don't like to admit it,
but we have a little

146
00:07:56.530 --> 00:07:59.590
bit of the PHP skills
in the house. No JS,

147
00:07:59.620 --> 00:08:02.110
you know, we run, we
run a lot of these

148
00:08:02.110 --> 00:08:04.690
languages as well for parts
of Reagan itself. So we've

149
00:08:04.690 --> 00:08:09.100
got node.net, mano, we're building
a Xamarin app in the

150
00:08:09.100 --> 00:08:12.250
mix. Juxtaposing that to what
I was complaining about before,

151
00:08:12.250 --> 00:08:15.640
where someone who's like a
fan makes a, a library

152
00:08:15.940 --> 00:08:19.090
with this cold fusion one
he's, he's a consultant. Yeah,

153
00:08:19.090 --> 00:08:21.700
well, no, but he works
with us though on it.

154
00:08:21.700 --> 00:08:23.530
So it's not just that
he's a random fan that

155
00:08:23.530 --> 00:08:25.330
happens to hack on it
when he, when he wants

156
00:08:25.330 --> 00:08:29.980
to use it. That's an
actual professional engagement between yeah,

157
00:08:29.980 --> 00:08:34.420
absolutely. Absolutely. And we also
have the ability to tweak

158
00:08:34.420 --> 00:08:37.640
it if we needed to,
it is owned by, by

159
00:08:37.660 --> 00:08:40.800
us. Yup. This, this idea
of, or you call it

160
00:08:40.870 --> 00:08:44.500
symbol suffocation, I assume that
means you are getting stuff

161
00:08:44.530 --> 00:08:47.440
from Android and iOS that
are crashed, dumped that don't

162
00:08:47.440 --> 00:08:49.150
give you that nice stack
trace that I'm used to

163
00:08:49.150 --> 00:08:51.640
getting. You have to detangle
that almost like a source

164
00:08:51.640 --> 00:08:55.770
map. Yeah, Yeah. Effectively, it's
really only iOS and Android

165
00:08:55.920 --> 00:08:58.710
sort of Java predominantly you
can, you can use C

166
00:08:58.800 --> 00:09:02.190
plus plus on, on Android,
but most people don't, but

167
00:09:02.190 --> 00:09:05.520
on iOS where it's all
an unmanaged type of language,

168
00:09:05.520 --> 00:09:08.310
you get a stack trace,
which has really Hicks, addresses,

169
00:09:08.310 --> 00:09:11.520
and memory. And so when
you do a build and

170
00:09:11.520 --> 00:09:15.420
say X code, and it
will generate a decent file.

171
00:09:15.840 --> 00:09:18.210
And so you provide the
decent file, which is basically

172
00:09:18.210 --> 00:09:21.300
like a PDP file in
the.net world. You provide that

173
00:09:21.300 --> 00:09:23.340
up to us and we
have a service that's running

174
00:09:23.340 --> 00:09:27.180
on one of our servers
that effectively takes your crash

175
00:09:27.180 --> 00:09:29.850
dump and then can unstitch
it against the decent file

176
00:09:30.570 --> 00:09:33.420
and turns, all of those
Hicks addresses into a function

177
00:09:33.420 --> 00:09:37.050
names, method, function, names, file
names, line numbers, and the

178
00:09:37.050 --> 00:09:39.870
such. So it makes it
so you can actually action

179
00:09:39.870 --> 00:09:42.930
the crash report. And that
makes it really useful for

180
00:09:42.930 --> 00:09:48.630
developers. And we're just beta
testing. Now, an automatic uploader

181
00:09:48.630 --> 00:09:51.420
for the decent files that
automatically detects when you do

182
00:09:51.420 --> 00:09:54.000
an archive operation with an
X code and says, Hey,

183
00:09:54.420 --> 00:09:56.340
you've just done a new
build. You know, do you

184
00:09:56.340 --> 00:09:58.530
want me to automatically send
this up to Reagan so

185
00:09:58.530 --> 00:10:00.960
that we don't ever miss
a decent file for people?

186
00:10:01.220 --> 00:10:04.040
I see. So does that
mean every time I do

187
00:10:04.040 --> 00:10:05.600
a build or every time
I do an important bill,

188
00:10:06.050 --> 00:10:08.480
It's effectively an important built.
So an X code, when

189
00:10:08.480 --> 00:10:11.410
you perform an archive, that's
really preparing you for, to

190
00:10:11.450 --> 00:10:15.110
do a deployment to the
store, as opposed to every

191
00:10:15.110 --> 00:10:17.570
build you could, of course,
send us the DSM file

192
00:10:17.570 --> 00:10:20.690
on every build, if you
are running a private tests

193
00:10:20.690 --> 00:10:25.100
or anything like that, but
it's not required. So I'm

194
00:10:25.130 --> 00:10:28.040
going to log in here
and we've got a number

195
00:10:28.040 --> 00:10:30.710
of applications. I've got the,
both the windows version of

196
00:10:30.710 --> 00:10:33.260
my startup, and I'm actually
using, we're using this right

197
00:10:33.260 --> 00:10:36.950
now. You can have, there's
a, there's a trial mode.

198
00:10:36.950 --> 00:10:39.980
So we're using trial and
it's got active errors and

199
00:10:39.980 --> 00:10:43.040
resolved errors. So this was
interesting to me because it's

200
00:10:43.040 --> 00:10:47.030
not just like Elma, you
know, error, logging, mal modules

201
00:10:47.030 --> 00:10:48.680
and handlers, which is what
I'm used to using for

202
00:10:48.680 --> 00:10:51.710
the last 10 years with
web applications. But it's also

203
00:10:51.710 --> 00:10:54.290
has a bit of a
workflow and have an ALM

204
00:10:54.860 --> 00:10:57.920
life cycle management process there
too. Yeah. So when we

205
00:10:57.920 --> 00:11:00.500
build up these groups, so
let's say you send us

206
00:11:00.590 --> 00:11:04.670
a thousand errors and you
know, 999 of them are

207
00:11:04.670 --> 00:11:07.700
actually the same era. We
grouped them together. And so

208
00:11:07.700 --> 00:11:11.930
when you're sort of looking
at fixing that error, you

209
00:11:11.930 --> 00:11:13.220
want to Mark it as
resolved. Do you want to

210
00:11:13.220 --> 00:11:14.810
take it off your list?
That sort of thing. So

211
00:11:14.810 --> 00:11:17.990
that's where you can say
within Reagan, this is now

212
00:11:17.990 --> 00:11:21.710
resolved that way. If it
reoccurs, we make sure we

213
00:11:21.710 --> 00:11:23.900
send you an email, you
know, all arms waving saying,

214
00:11:24.000 --> 00:11:26.180
Hey, Hey, you thought this
was resolved in it's it's

215
00:11:26.180 --> 00:11:31.040
happened again. You can also
temporarily ignore things or a

216
00:11:31.040 --> 00:11:34.220
big selling feature that we
didn't really, we didn't really

217
00:11:34.220 --> 00:11:35.960
build it thinking it would
be a key selling feature,

218
00:11:35.960 --> 00:11:39.110
but permanently ignored has been
a real hit for us.

219
00:11:40.490 --> 00:11:42.680
Like, it seems like a
pragmatic idea, but also a

220
00:11:42.680 --> 00:11:45.080
bad idea. Like you're basically
saying there's a whole lot

221
00:11:45.080 --> 00:11:47.270
of areas that, Oh, there's
that no reference exception. We

222
00:11:47.270 --> 00:11:50.330
don't worry. Yeah. I mean,
it could be used in

223
00:11:50.330 --> 00:11:55.240
an inferior way, but the
usual case though is spam

224
00:11:55.240 --> 00:12:00.490
bots hitting sites. So if
I hit hanselman.com/wp, hyphen admin,

225
00:12:00.490 --> 00:12:03.460
the standard WordPress admin page,
and it throws an error,

226
00:12:04.150 --> 00:12:06.550
you're unlikely to want to
spend your weekend trying to

227
00:12:06.580 --> 00:12:09.610
fix that because it's not
a real era. You just

228
00:12:09.610 --> 00:12:12.040
don't want to be told
about it anymore. And it's

229
00:12:12.040 --> 00:12:14.740
great for web applications for
being able to filter out

230
00:12:14.770 --> 00:12:17.530
stuff. And also for people
who are dodgy that want

231
00:12:17.530 --> 00:12:19.890
to yeah, But that is
a valid point because I

232
00:12:19.890 --> 00:12:23.580
do get, you know, weird,
weird errors where someone's basically

233
00:12:23.580 --> 00:12:27.570
fuzz testing, right. Fuzz testing
means that they're sending just

234
00:12:27.840 --> 00:12:29.400
all sorts of random data
to see if they can

235
00:12:29.400 --> 00:12:31.620
break something. And all my
system's going to do is

236
00:12:31.800 --> 00:12:34.500
either routed or failed around
it. But because I haven't

237
00:12:34.500 --> 00:12:37.080
built it into the system
to capture that error and

238
00:12:37.080 --> 00:12:39.300
put up a, a four
Oh four, which I should,

239
00:12:39.810 --> 00:12:41.430
they're probably going to get
some error, an error of

240
00:12:41.430 --> 00:12:44.100
500. Yeah. But you got
better things to do with

241
00:12:44.100 --> 00:12:46.740
your time then, you know,
try and try and build

242
00:12:46.740 --> 00:12:50.300
support for people trying to
attack your site. Well, so

243
00:12:50.310 --> 00:12:52.650
I'm, I'm looking here at
a, an error that I

244
00:12:52.650 --> 00:12:56.220
caused on purpose because I
wanted to, one of our

245
00:12:56.220 --> 00:12:58.380
application uses signal R and
I wanted to push it

246
00:12:58.950 --> 00:13:02.760
with a concurrency issue and
I caused a connection error

247
00:13:02.760 --> 00:13:04.560
here. So I come down
to the bottom and I

248
00:13:04.560 --> 00:13:06.690
noticed that you actually even,
you know, the name of

249
00:13:06.690 --> 00:13:09.180
the machine that I'm on,
you gave me the version

250
00:13:09.180 --> 00:13:11.940
number of the app, and
then I can click on

251
00:13:11.940 --> 00:13:14.190
an environment. And you're actually
telling me, telling me how

252
00:13:14.190 --> 00:13:16.200
much memory the device had
at the time As well.

253
00:13:16.380 --> 00:13:19.260
Yeah. So, and in certain
environments, that's really important in

254
00:13:19.260 --> 00:13:23.370
particular for the mobile apps,
because quite often the problem

255
00:13:23.370 --> 00:13:26.040
is that they're quite memory
constrained. It's less of an

256
00:13:26.040 --> 00:13:28.530
issue probably if you're running
it on a fairly decent

257
00:13:28.530 --> 00:13:30.810
web server, but it can
be useful to spot that

258
00:13:30.810 --> 00:13:33.390
sort of thing. So we
try and pull as much

259
00:13:33.390 --> 00:13:36.300
information as we can. And
there's also extra information that

260
00:13:36.300 --> 00:13:40.260
you can provide to our
API. If you, you know,

261
00:13:40.290 --> 00:13:42.630
basically have opted people and,
or let them opt in

262
00:13:42.810 --> 00:13:45.630
to provide more information. So
we have a real user

263
00:13:45.630 --> 00:13:48.240
tracking. So for example, if
you had an application where

264
00:13:48.240 --> 00:13:54.090
people log in, you might
tag the Reagan client with

265
00:13:54.090 --> 00:13:57.030
their email address. And then
that way, when errors occur,

266
00:13:57.060 --> 00:14:00.180
you actually get their Gravatar
will come up and you

267
00:14:00.180 --> 00:14:02.370
can then get in touch
with them and say, Hey,

268
00:14:02.370 --> 00:14:05.400
you know, I got here,
I fixed the Sierra. Sorry

269
00:14:05.400 --> 00:14:07.050
about that trouble. Here's a
credit. How do I do

270
00:14:07.050 --> 00:14:08.880
that? Oh, that sounds like
a good idea. Cause I,

271
00:14:08.910 --> 00:14:10.950
right now I have a
windows app that's in the

272
00:14:10.950 --> 00:14:13.770
windows phone app, it's in
the store and I hooked

273
00:14:13.770 --> 00:14:17.280
up a thing called little
Watson, which is a great

274
00:14:17.340 --> 00:14:20.760
community contributed thing that basically
serializes the air and then

275
00:14:20.790 --> 00:14:23.820
emails you. Yep. So I
send apologies a few dozen

276
00:14:23.820 --> 00:14:27.510
times a week to people.
And then, but with little

277
00:14:27.510 --> 00:14:30.060
Watson, they know that they're
sending their private information out

278
00:14:30.060 --> 00:14:33.570
because they had to initiate
the email client. Yeah. Right.

279
00:14:33.600 --> 00:14:35.580
Yep. So this is one
of these things where again,

280
00:14:35.580 --> 00:14:38.070
we sort of push people
to say, you should probably

281
00:14:38.070 --> 00:14:41.130
put something in your privacy
or terms and conditions of

282
00:14:41.130 --> 00:14:43.590
your site. If you're actually
going to be reaching back

283
00:14:43.590 --> 00:14:44.970
out to them, cause you
don't want it to be

284
00:14:44.970 --> 00:14:47.310
spammy at all. And you
need to make them aware

285
00:14:47.310 --> 00:14:49.350
that you're doing it, but
effectively it's just one of

286
00:14:49.350 --> 00:14:52.640
the overload on the Reagan
client is that you can

287
00:14:52.640 --> 00:14:55.040
set the, an identity for
the user. It doesn't have

288
00:14:55.040 --> 00:14:56.840
to be an email address,
but if we detect it's

289
00:14:56.850 --> 00:14:59.090
an email address, we'll try
and pull up a Gravatar

290
00:14:59.090 --> 00:15:02.540
from them, for them as
well. Because we sort of

291
00:15:02.540 --> 00:15:06.830
started building this product initially
because I feel like, you

292
00:15:06.830 --> 00:15:09.530
know, software quality is still
a big problem. You know,

293
00:15:09.630 --> 00:15:12.560
it costs the world a
lot of money and there's

294
00:15:12.560 --> 00:15:13.910
a lot of things that
can be improved there. But

295
00:15:13.910 --> 00:15:15.920
at the end of the
day, we are engineers and

296
00:15:15.920 --> 00:15:17.510
we look at it from
a technical point of view,

297
00:15:18.560 --> 00:15:20.960
but the success of software
is all about how the

298
00:15:20.960 --> 00:15:24.200
user finds it, you know?
And so there's a lot

299
00:15:24.200 --> 00:15:25.970
of these other tools. They
focus a lot on what

300
00:15:25.970 --> 00:15:28.640
the engineer is thinking and
not enough about how many

301
00:15:28.640 --> 00:15:31.190
users are affected. You know,
if I have a thousand

302
00:15:31.190 --> 00:15:33.440
errors and it affected a
thousand people, or I had

303
00:15:33.440 --> 00:15:36.230
a thousand errors, but it
only affected one person who

304
00:15:36.230 --> 00:15:39.800
just got stuck in a
loop, you know, understanding impact

305
00:15:39.800 --> 00:15:42.220
is important. Yeah. I think
I'm going to do that.

306
00:15:42.220 --> 00:15:43.510
I'm going to put in,
I like the idea of,

307
00:15:43.510 --> 00:15:47.440
of having their email address,
definitely something that's personal information.

308
00:15:47.440 --> 00:15:49.870
I'll put that in the
settings. And then I suppose

309
00:15:49.870 --> 00:15:52.780
I could tell Reagan, this
user has opted in for

310
00:15:52.780 --> 00:15:55.450
anonymous and this user has
not opted in for non

311
00:15:55.450 --> 00:15:59.170
anonymous checking. Well, you can
also, we have the ability

312
00:15:59.170 --> 00:16:01.450
to attach any custom data
and that's not just a

313
00:16:01.450 --> 00:16:05.440
key value pair. That's actually
a rich object structure because

314
00:16:05.440 --> 00:16:08.050
it serializes down to Jason.
And so you can send

315
00:16:08.050 --> 00:16:10.450
whatever you want. So if
you wanted to also for

316
00:16:10.450 --> 00:16:13.210
example, record or they're paying
customer, or they're doing all

317
00:16:13.210 --> 00:16:16.350
these sorts of things, you
can send them through attached

318
00:16:16.350 --> 00:16:21.310
to the Euro information. There's
also on the providers that

319
00:16:21.310 --> 00:16:24.820
you integrate. We recommend that
people sort of do explore

320
00:16:24.820 --> 00:16:26.860
the API because you might
want to filter sit and

321
00:16:26.860 --> 00:16:30.160
field. So for example, we
run an eCommerce store for

322
00:16:30.160 --> 00:16:33.700
mindscape and if an error
occurs on the credit card

323
00:16:33.700 --> 00:16:35.800
page, we don't want to
be sending the credit card

324
00:16:35.800 --> 00:16:38.380
number through as part of
the form variables. So you

325
00:16:38.380 --> 00:16:40.480
can set up common things
that you don't want send

326
00:16:40.480 --> 00:16:42.250
to them, or just filter
those out so that we

327
00:16:42.250 --> 00:16:44.860
never received them. So we
have customers that are quite

328
00:16:44.860 --> 00:16:49.150
comfortably running, using Reagan, even
from PCI compliant environments, where

329
00:16:49.150 --> 00:16:50.980
they can filter out all
of the things that they

330
00:16:50.980 --> 00:16:52.960
need. When you say filter
out, you're not even, it's

331
00:16:52.960 --> 00:16:55.150
never even going across the
wire. Nope. Neva comes to

332
00:16:55.150 --> 00:16:57.850
us. Nice. You catch it
in the client. Is the

333
00:16:57.850 --> 00:17:01.120
application a, an asp.net app
that runs in. Yeah. So,

334
00:17:01.120 --> 00:17:06.190
so the main application is
as a standard MVC application

335
00:17:06.190 --> 00:17:10.080
running on a windows box,
the front end public site

336
00:17:10.090 --> 00:17:13.060
is also an ASP net
app using the into CMS.

337
00:17:13.060 --> 00:17:15.760
That's an open source CMS
that we use that for

338
00:17:15.760 --> 00:17:18.310
the mindscape side as well.
It's quite a cool, lightweight

339
00:17:18.310 --> 00:17:21.070
CMS, but yeah, all of
the stuff that people are

340
00:17:21.100 --> 00:17:24.340
generally working with in here
is a sort of stock

341
00:17:24.340 --> 00:17:31.210
standard.net. The, these D simplification
process that we run is

342
00:17:31.210 --> 00:17:34.210
written in go cool. So
You had the, a go

343
00:17:34.210 --> 00:17:37.090
engineer on the show last
week. Cool. Yeah, I mean,

344
00:17:37.090 --> 00:17:39.280
I cried. I quite like
that seems like kind of

345
00:17:39.280 --> 00:17:43.000
nice language and we use
a node dot JS for

346
00:17:43.000 --> 00:17:46.390
the front end in points
for the API at the

347
00:17:46.390 --> 00:17:48.850
moment. Yeah. And we've done
a bunch of stuff with

348
00:17:49.300 --> 00:17:52.560
mano as well. And like
I say, we do actually

349
00:17:52.560 --> 00:17:55.470
use a bunch of the
languages that we're supporting almost

350
00:17:55.470 --> 00:17:59.660
every day at mindscape. So
Yeah, the it's it's I

351
00:17:59.660 --> 00:18:01.940
like this idea of pulling
up programming, but also the

352
00:18:01.940 --> 00:18:06.140
recognition that different platforms exist.
You've extended that though with

353
00:18:06.170 --> 00:18:09.020
this idea of a plugin
model that says you don't

354
00:18:09.020 --> 00:18:12.500
have to just use the
ALM, the applicant application, life

355
00:18:12.500 --> 00:18:14.600
cycle management apps that we
use, you can pick your

356
00:18:14.600 --> 00:18:18.320
own. Like I use Trello
and get hub Trillo is

357
00:18:18.320 --> 00:18:22.610
the Kanban board. Someone else
might use JIRA and campfire,

358
00:18:23.180 --> 00:18:27.170
but you support all of
those as, as plugins to

359
00:18:27.170 --> 00:18:31.460
kind of fit your app
into my existing structure. Yeah.

360
00:18:31.460 --> 00:18:35.240
So there's two things here.
One is that I fundamentally

361
00:18:35.240 --> 00:18:37.280
think that if you want
a product to be successful

362
00:18:37.280 --> 00:18:40.010
with, with developers and teams
that needs to integrate them

363
00:18:40.010 --> 00:18:42.110
with their other tools, it
needs to become part of

364
00:18:42.110 --> 00:18:44.570
a workflow. And so we
wanted to make sure that

365
00:18:44.570 --> 00:18:49.760
Reagan just snapped in and
then secondly, it's, it's useful.

366
00:18:49.850 --> 00:18:52.730
And then thirdly, it's that
we get a lot of

367
00:18:52.730 --> 00:18:55.550
feature requests. So for example,
at the moment we've been

368
00:18:55.820 --> 00:18:57.410
fending off people saying, I
want to be able to

369
00:18:57.410 --> 00:18:59.990
assign a bug and then
I want to hit more

370
00:18:59.990 --> 00:19:02.060
statuses that I can configure
it. And then I want

371
00:19:02.060 --> 00:19:03.770
to add some fields. And
before, you know, it we've

372
00:19:03.770 --> 00:19:06.590
built JIRA and we don't
really want to build JIRA.

373
00:19:06.590 --> 00:19:09.800
We want to build Reagan.
And so that's where we

374
00:19:10.040 --> 00:19:11.870
sort of see it as
going, Hey, the more we

375
00:19:11.870 --> 00:19:15.800
can integrate the less we
necessarily need to do to

376
00:19:15.800 --> 00:19:18.770
the app. Cause there's always
that you'll understand this a

377
00:19:18.770 --> 00:19:21.560
lot being kind of like
a product guy, Scott, is

378
00:19:21.560 --> 00:19:24.590
that there's that balance between
trying to do too much

379
00:19:24.620 --> 00:19:27.380
and keeping it simple for
new users and, you know,

380
00:19:27.440 --> 00:19:30.770
handholding people through the experience
to become power users without

381
00:19:30.770 --> 00:19:32.780
putting them off at the
very start. There's all of

382
00:19:32.780 --> 00:19:36.050
those sorts of challenges that
we have with Reagan that

383
00:19:36.050 --> 00:19:38.300
we, we see some of
those plugins sort of helping

384
00:19:38.300 --> 00:19:41.570
us. Yeah. The, the, the
UX when you started. Like,

385
00:19:41.600 --> 00:19:43.910
I really didn't, to be
honest with you when I

386
00:19:43.910 --> 00:19:45.440
started, when I signed up,
I really didn't think I

387
00:19:45.440 --> 00:19:48.260
needed any of that stuff.
I signed up for trial.

388
00:19:49.400 --> 00:19:51.560
I saw that it supported
my platforms. It gave me

389
00:19:51.650 --> 00:19:54.260
an API key and it
said, here's three lines of

390
00:19:54.260 --> 00:19:56.960
code. Cause I was doing
the WPF side. I made

391
00:19:56.960 --> 00:19:59.420
a new client, gave it
my API key. I hooked

392
00:19:59.420 --> 00:20:01.490
up the air handler. And
then I said, here's the

393
00:20:01.490 --> 00:20:03.950
exception for the air handler.
And I never, I haven't

394
00:20:03.950 --> 00:20:07.610
thought about it since. Yep.
And that's fairly consistent feedback.

395
00:20:07.610 --> 00:20:10.370
And one of the challenges
we almost have on marketing

396
00:20:10.390 --> 00:20:12.920
is that people usually can't
believe how quick it was

397
00:20:12.920 --> 00:20:15.350
to put in Because I'm
always afraid that the error

398
00:20:15.350 --> 00:20:18.320
handler thing will cause more
errors. You know what I

399
00:20:18.320 --> 00:20:20.750
mean? And not doing async
and await and all sorts

400
00:20:20.750 --> 00:20:22.700
of crazy threading in my
app. And I'm just like,

401
00:20:22.700 --> 00:20:25.730
I mean, to be honest
with you, you messed me

402
00:20:25.730 --> 00:20:27.350
up once and I'm going
to pull you out. Yeah,

403
00:20:27.730 --> 00:20:31.820
Yeah, absolutely. Yeah. So then
I start getting my errors

404
00:20:31.820 --> 00:20:34.160
and I'm looking here, I'm
showing you my, my dashboard.

405
00:20:34.550 --> 00:20:37.400
And then I noticed as
I'm poking around, it says,

406
00:20:37.430 --> 00:20:41.900
Oh look, here's plugins. And
of course everyone's very icon

407
00:20:41.900 --> 00:20:43.700
focused right now. And you
guys do a great job

408
00:20:43.700 --> 00:20:45.650
of showing icons. And then
I see the Trello icon,

409
00:20:45.650 --> 00:20:48.550
which is a very distinct
icon and it happens to

410
00:20:48.550 --> 00:20:50.830
be pinned to my task
bar. And I go, wait

411
00:20:50.830 --> 00:20:53.020
a second. I got, I
have Trello. Yep. And then

412
00:20:53.020 --> 00:20:54.700
I say, Oh, I have
get hub. Oh, I use

413
00:20:54.700 --> 00:20:56.980
fog bugs. And then I
start linking things up. And

414
00:20:56.980 --> 00:21:00.430
then I realized that I
can assign, like, I know

415
00:21:00.430 --> 00:21:02.530
that I have a bug
that I've had for a

416
00:21:02.530 --> 00:21:04.870
while. I've been trying to
track it down. It exists

417
00:21:04.870 --> 00:21:07.990
as a card in my
Trello Kanban board. When I

418
00:21:07.990 --> 00:21:10.030
see that an instance of
that bug come in, now

419
00:21:10.030 --> 00:21:12.780
I can link. Yeah. You
can either link it to

420
00:21:12.780 --> 00:21:16.230
an existing item or you
can create a new item

421
00:21:16.230 --> 00:21:19.770
from directly from within Reagan.
And I mean, across all

422
00:21:19.770 --> 00:21:21.930
of the plugins, we get
a lot of feedback. Either

423
00:21:21.930 --> 00:21:24.450
people wanting additional systems to
be supported. So I know

424
00:21:24.450 --> 00:21:27.150
we're working at the moment
on Slack, which seems to

425
00:21:27.510 --> 00:21:30.600
take in the world by
storm recently, but also just

426
00:21:30.600 --> 00:21:34.950
more options to pump data
into those, those plugin providers.

427
00:21:34.950 --> 00:21:37.050
So for example, if you
wanted to create a GitHub

428
00:21:37.050 --> 00:21:40.320
issue, you know, whether we
attach the stack trace or

429
00:21:40.320 --> 00:21:43.020
other information to that issue
to help you out when

430
00:21:43.020 --> 00:21:44.610
you're on there, you know,
there's a lot we can,

431
00:21:44.970 --> 00:21:47.970
we can do there. And
we also have the generic

432
00:21:47.970 --> 00:21:51.270
web hooks is not, you
know, we shouldn't overlook that,

433
00:21:51.270 --> 00:21:52.920
which allows you to sort
of say, Hey, I just

434
00:21:52.920 --> 00:21:54.900
want to be notified about
these errors occurring and I

435
00:21:54.900 --> 00:21:57.720
can then pump it into
other systems. So we've got

436
00:21:57.870 --> 00:22:01.530
CPR integration, for example, using
the web hooks. So if

437
00:22:01.530 --> 00:22:03.330
you wanted to then hook
it up to almost any

438
00:22:03.330 --> 00:22:06.120
other service, you can take
the data that's coming out

439
00:22:06.120 --> 00:22:10.110
of, of Reagan. Yeah. Yep.
See, look at that. That's

440
00:22:10.110 --> 00:22:12.360
amazing. And then boom, then
it's in there. So let

441
00:22:12.360 --> 00:22:13.920
me ask you this, but
when you're running this as

442
00:22:13.920 --> 00:22:16.500
a, as a service, you're
going to become more popular.

443
00:22:16.500 --> 00:22:19.170
I assume it's all running
in the cloud somewhere. Yup.

444
00:22:19.200 --> 00:22:21.360
It's all running in the
cloud. Now we moved it

445
00:22:21.360 --> 00:22:23.850
out of my desk a
few weeks, but now we,

446
00:22:24.120 --> 00:22:26.610
we, it's all hosted in
the cloud at the moment.

447
00:22:26.970 --> 00:22:30.720
It's an, a mixture of
different providers at the moment.

448
00:22:30.870 --> 00:22:36.270
It is predominantly with Amazon.
We do have some, some

449
00:22:36.270 --> 00:22:38.970
parts with other other providers.
Like we used a digital

450
00:22:38.970 --> 00:22:40.950
ocean for a little bit
of stuff for a while,

451
00:22:40.980 --> 00:22:44.880
but yeah, it's, it's growing.
It's, it's pretty, we've been

452
00:22:44.880 --> 00:22:47.790
continuing to battle hardened the
whole service. How do you

453
00:22:47.790 --> 00:22:50.820
make battle heart? I like
that battle hardened. How do

454
00:22:50.820 --> 00:22:53.010
you make sure you're not
going to lose any of

455
00:22:53.010 --> 00:22:57.420
my exceptions though? Yep. So
we have several sort of

456
00:22:57.420 --> 00:22:59.700
layers of protection for that.
So when we received the

457
00:22:59.700 --> 00:23:03.030
data, the first thing we
actually do is persist it

458
00:23:03.030 --> 00:23:06.270
to private is three buckets
fee for you that we

459
00:23:06.270 --> 00:23:09.300
have. That's almost part of
our life longer term. If

460
00:23:09.300 --> 00:23:12.330
we have to replay messages
to restore data, we can

461
00:23:12.330 --> 00:23:15.810
do that. But we also
use it for say load

462
00:23:15.810 --> 00:23:18.000
testing. We can, we can
pull that off there and

463
00:23:18.000 --> 00:23:20.910
throw it back at the
service and our staging environment,

464
00:23:20.910 --> 00:23:23.880
just to simulate it with
real world data. We also

465
00:23:23.880 --> 00:23:26.970
write all of the data
into an elastic search cluster

466
00:23:27.420 --> 00:23:30.420
and our elastic search cluster
is getting Epic, really backed

467
00:23:30.420 --> 00:23:32.490
up. I think it's a
couple of times a day,

468
00:23:32.490 --> 00:23:36.210
it gets snapshotted. So for
example, we can either restore

469
00:23:36.220 --> 00:23:39.420
elastic search and then replay
a little bit off the

470
00:23:39.420 --> 00:23:42.680
S3 raw data. There's a
couple of other data stores

471
00:23:42.690 --> 00:23:45.530
in the mix. Like we
use Amazon to RDS and

472
00:23:45.530 --> 00:23:49.910
that's got daily snapshotting as
well. And of course, all

473
00:23:49.910 --> 00:23:52.700
of those things, let's say,
for example, elastic search. Well,

474
00:23:52.850 --> 00:23:55.910
the default set up for
a reasonable elastic search cluster

475
00:23:55.910 --> 00:23:59.450
is three nodes, and that's
already got sharding built in

476
00:23:59.450 --> 00:24:01.430
to ensure that you can
lose one of those nodes

477
00:24:01.430 --> 00:24:04.040
and still have full access
to data. And so we've

478
00:24:04.040 --> 00:24:07.460
kind of got multiple layers
there of redundancy and the

479
00:24:07.460 --> 00:24:10.210
ability to replay the data
if we wish. So even

480
00:24:10.210 --> 00:24:12.250
if there were an S
three outage, you're still putting

481
00:24:12.250 --> 00:24:14.380
it in the last section.
Yeah. And the, and the

482
00:24:14.380 --> 00:24:18.010
elastic search clusters running on
a whole different hosting company.

483
00:24:18.010 --> 00:24:20.560
And then on top of
that, they could lose some

484
00:24:20.560 --> 00:24:23.320
of their servers. And, you
know, I, I feel like

485
00:24:23.320 --> 00:24:25.810
I have to be, you
know, knocking wood here when

486
00:24:25.810 --> 00:24:28.780
you ask me these questions,
but yeah, Yeah. Right. Because

487
00:24:29.260 --> 00:24:30.400
like I said, I don't
want to ever have to

488
00:24:30.400 --> 00:24:33.610
think about it. Yeah, no,
absolutely. And, and so we've,

489
00:24:33.610 --> 00:24:35.380
we've put a fair bit
of work into trying to

490
00:24:35.380 --> 00:24:39.490
make sure that it's a
very resilient service. Yeah. Because

491
00:24:39.520 --> 00:24:42.700
we think it's actually a
really valuable service and, you

492
00:24:42.700 --> 00:24:46.210
know, people do build things
for according areas for themselves

493
00:24:46.300 --> 00:24:48.460
and that's cool, but I
think you can sort of

494
00:24:48.460 --> 00:24:50.830
do it at a really
professional level, which is what

495
00:24:50.830 --> 00:24:54.070
we're trying to do. And
that means taking away concerns

496
00:24:54.070 --> 00:24:57.430
about, you know, losing data
or app outages and all

497
00:24:57.430 --> 00:25:00.190
of that. Have you found
that it's been difficult to

498
00:25:00.220 --> 00:25:03.460
keep your error handling things
and the work you have

499
00:25:03.460 --> 00:25:06.010
to do, which is to
post, you know, to collect

500
00:25:06.040 --> 00:25:09.100
debug data and post it
out from causing a problem

501
00:25:09.100 --> 00:25:12.580
with an application itself from
preventing it, from getting any

502
00:25:12.580 --> 00:25:16.030
worse? I mean, a crash
is bad. Yeah. But you

503
00:25:16.030 --> 00:25:17.770
also need to make sure
that when you come back

504
00:25:17.770 --> 00:25:20.050
and deserialize your data and
then send it off that

505
00:25:20.050 --> 00:25:21.910
you're not going to put
the app in a state

506
00:25:21.910 --> 00:25:23.740
where it's no longer able
to even start or something

507
00:25:23.740 --> 00:25:26.920
like that. Yeah. So, I
mean, we've, we've generally tried

508
00:25:26.920 --> 00:25:30.460
to build all of the
providers to be super defensive

509
00:25:30.460 --> 00:25:35.320
around that. I mean, we've
had, you know, all of

510
00:25:35.320 --> 00:25:37.180
the providers are open source
as well, so you can

511
00:25:37.180 --> 00:25:38.950
jump on, get hub and
actually look at them all

512
00:25:38.950 --> 00:25:40.690
and kind of go, Oh,
I can see what they're

513
00:25:40.690 --> 00:25:43.030
doing here. And if you
saw anything that was Dodge,

514
00:25:43.030 --> 00:25:45.310
we we'd hope you'd speak
up. Well, that's interesting that

515
00:25:45.310 --> 00:25:47.260
you would do that. That
basically changed in my mind

516
00:25:47.260 --> 00:25:50.680
that kind of changes the
whole conversation because there's implicit

517
00:25:50.680 --> 00:25:53.350
trust. Yeah. Where it's just
like, okay, well they seem

518
00:25:53.350 --> 00:25:55.120
like a good company and
they just seem to know

519
00:25:55.120 --> 00:25:56.740
what they're, you know, and
it hasn't crashed anything yet.

520
00:25:56.770 --> 00:25:59.500
Yeah. And then I just
asked my obvious question just

521
00:25:59.500 --> 00:26:02.410
now. Yup. Which w you
know, a naive question, but

522
00:26:02.410 --> 00:26:05.110
I'm meant it because I
honestly didn't know. Yep. And

523
00:26:05.110 --> 00:26:07.090
then you're saying, well, Oh,
well, those are open source.

524
00:26:07.090 --> 00:26:08.890
So go look at them
and you can see exactly

525
00:26:08.890 --> 00:26:11.500
how we are being defensive.
Yeah. And, and to be,

526
00:26:11.740 --> 00:26:14.380
to be honest, there has
been work that we've had

527
00:26:14.380 --> 00:26:16.240
to do to try and
make sure that that's how

528
00:26:16.240 --> 00:26:20.680
it works. I mean, for
example, we've instrumented Lightspeed and

529
00:26:20.710 --> 00:26:24.010
the workbench product inside visual
studio in that, you know,

530
00:26:24.190 --> 00:26:26.320
we found a whole bunch
of other challenges of actually

531
00:26:26.320 --> 00:26:29.890
being inside visual studio in
an error occurs, which tries

532
00:26:29.890 --> 00:26:32.800
to keep on soldiering on
like a trooper. But now

533
00:26:33.000 --> 00:26:34.870
there's times when they, where
it doesn't work so well.

534
00:26:34.870 --> 00:26:37.810
So we've had to make
updates to the elite speed.

535
00:26:38.320 --> 00:26:41.590
Yeah. Lightspeed to our object,
relational mapper that, Oh, I

536
00:26:41.590 --> 00:26:44.130
see. So when that lives
inside visual studio, it has

537
00:26:44.130 --> 00:26:47.010
A design surface and a
migrations framework and all of

538
00:26:47.010 --> 00:26:51.060
that similar to get multiple
products. That's right. Mindscape sells

539
00:26:51.060 --> 00:26:54.420
a suite of products to.net
developers. And Reagan's our first

540
00:26:54.420 --> 00:26:57.690
product that targets almost all
developers being that it's any

541
00:26:57.690 --> 00:26:59.990
language. Yeah. But this is
interesting because then you're now

542
00:26:59.990 --> 00:27:02.990
using your own stuff, right?
Yeah. Yeah. We would dog

543
00:27:03.020 --> 00:27:08.090
food in this since what
was it? 2012, late 2012.

544
00:27:08.090 --> 00:27:11.000
So literally one of the
highest value things was that

545
00:27:11.960 --> 00:27:15.110
being the sort of, you
know, cavalier guy that I

546
00:27:15.110 --> 00:27:17.840
can be at times I
updated our online store just

547
00:27:17.840 --> 00:27:20.750
before going away for Christmas,
2012. And I, I went

548
00:27:20.750 --> 00:27:23.000
back to, to my house
and I was packing my

549
00:27:23.000 --> 00:27:25.820
bag and I got my
Reagan notification that alerted me

550
00:27:25.820 --> 00:27:28.820
that I'd actually made it
so people couldn't buy anything

551
00:27:28.820 --> 00:27:31.310
from mindscape. And I was
about to go away for

552
00:27:31.340 --> 00:27:34.040
two weeks holiday. And I
was like, Oh, okay. Well,

553
00:27:34.040 --> 00:27:36.500
I probably wouldn't have noticed
that because while I did

554
00:27:36.500 --> 00:27:40.340
get email eras sent to
myself, I'd sort of stopped

555
00:27:40.340 --> 00:27:42.560
paying any attention to them
because most of the time

556
00:27:42.560 --> 00:27:45.650
they were junk from spam
bots and things like that.

557
00:27:46.670 --> 00:27:48.890
And now that we had
a system where I sort

558
00:27:48.890 --> 00:27:51.530
of trained it, you know,
permanently ignore the spam bots,

559
00:27:51.530 --> 00:27:53.030
when this came through, it
was kind of like a,

560
00:27:53.030 --> 00:27:56.840
Hey, this is, this is
quite broken. And so it

561
00:27:56.840 --> 00:27:58.730
was a moment like that
where it's like, yeah, I'm

562
00:27:58.730 --> 00:28:00.410
really glad we've built this
and we can use it

563
00:28:00.410 --> 00:28:02.450
ourselves and we're seeing value
from it. And that was

564
00:28:02.450 --> 00:28:04.940
sort of the first inkling
that yeah, we were probably

565
00:28:04.940 --> 00:28:08.240
on something quite Good here.
Yeah, definitely. That's pretty cool.

566
00:28:08.570 --> 00:28:11.480
Yeah. I'm excited to be
using it. There's a lot

567
00:28:11.510 --> 00:28:13.610
that's going to happen with
when I launched my little

568
00:28:13.610 --> 00:28:16.280
startup with Greg and in
a month or two, and

569
00:28:16.310 --> 00:28:19.280
because there's so many moving
parts, and like you said,

570
00:28:19.280 --> 00:28:24.230
any nontrivial application requires a
backend. I've got signal our

571
00:28:24.230 --> 00:28:26.150
hub and I've got windows
apps and I've got a

572
00:28:26.150 --> 00:28:28.850
web app iOS app. There's
so many things that can

573
00:28:28.850 --> 00:28:31.160
go wrong. And I'm really
concerned that I'm not going

574
00:28:31.160 --> 00:28:34.040
to have any insight into
what's going on in that.

575
00:28:35.360 --> 00:28:36.710
Am I going to be
able to plug this into

576
00:28:36.710 --> 00:28:38.930
other kinds of insightful things?
Like if I want to

577
00:28:38.930 --> 00:28:41.510
use new Relic, I could
still capture, I could use

578
00:28:41.510 --> 00:28:43.640
new Relic to do profiling
and things like that. And

579
00:28:43.640 --> 00:28:46.280
they still capture exceptions with
you. Yeah. So a bunch

580
00:28:46.280 --> 00:28:49.070
of, I would probably say
about 30 to 40% of

581
00:28:49.070 --> 00:28:51.350
our customers use new Relic
with us. And it's a

582
00:28:51.350 --> 00:28:53.540
common question is to say,
why do I need both?

583
00:28:53.990 --> 00:28:57.020
When new Relic is obviously
feeling focused on the performance

584
00:28:57.020 --> 00:28:59.960
side of things, they capture
errors as well, but it's

585
00:28:59.960 --> 00:29:02.270
not their focus. It's not,
not that awesome. I think

586
00:29:02.270 --> 00:29:04.970
of them as a production
profile. Yeah, absolutely. And they

587
00:29:04.970 --> 00:29:07.640
do a great job at
that. And that's why people

588
00:29:07.640 --> 00:29:09.680
end up, you know, they
typically say what's the difference.

589
00:29:09.680 --> 00:29:11.210
And then they just end
up using both of them,

590
00:29:11.210 --> 00:29:14.000
but you can certainly work
with other tools. We try

591
00:29:14.000 --> 00:29:16.760
to make sure we play
nice with everybody else on

592
00:29:16.760 --> 00:29:19.190
there at the moment. I'm
not aware of anything that

593
00:29:19.190 --> 00:29:22.910
we actually conflict with. So
that, that should be fine.

594
00:29:23.150 --> 00:29:26.210
That's very cool. Now I
think I saw something on

595
00:29:26.210 --> 00:29:30.770
Twitter today about Xamarin. Yeah.
So we've got fantastic support

596
00:29:30.770 --> 00:29:35.090
for Xamarin Frank, you know,
their mobile solutions as well

597
00:29:35.090 --> 00:29:37.310
as if you're just using
straight up art. Mano works

598
00:29:37.310 --> 00:29:40.760
with that. And we've been
working reasonably closely with them

599
00:29:40.760 --> 00:29:45.790
for the last six to
nine months. And yeah, we've,

600
00:29:45.790 --> 00:29:48.100
we've been finding that they've
been promoting it through Xamarin

601
00:29:48.100 --> 00:29:50.890
university, which is really cool.
And we're in the Xamarin

602
00:29:50.890 --> 00:29:54.100
component store and people seem
to be really liking it.

603
00:29:54.160 --> 00:29:55.960
It was one of those
things that, again, coming a

604
00:29:55.960 --> 00:29:58.480
little bit from our dotnet
background, we were acutely aware

605
00:29:58.480 --> 00:30:00.460
of who who's, Amarin where,
and we have a huge

606
00:30:00.460 --> 00:30:03.520
respect for them and their
company. And so it made

607
00:30:03.520 --> 00:30:05.620
sense for us to sort
of evolve it onto that

608
00:30:05.620 --> 00:30:08.830
for the mobile stuff. We're
also looking at releasing, you

609
00:30:08.830 --> 00:30:12.790
know, the Reagan app ourselves
for iOS. And so we've

610
00:30:12.790 --> 00:30:16.930
been riding that and using
Xamarin tools would that mean

611
00:30:16.930 --> 00:30:19.300
I would be able to
get my notifications and my

612
00:30:19.300 --> 00:30:21.190
errors and digging and stuff
while on the go. Yeah,

613
00:30:21.190 --> 00:30:23.560
that's right. Yep. Okay. That's
cool. Cause right now I've

614
00:30:23.560 --> 00:30:26.110
got it set to do
a digest. Yeah. So we

615
00:30:26.110 --> 00:30:28.600
have the, obviously the real
time notifications and you get

616
00:30:28.600 --> 00:30:31.600
a daily, daily digest. And
so we'd like to have

617
00:30:31.600 --> 00:30:34.330
it so that you have
a mobile version of the,

618
00:30:34.540 --> 00:30:38.050
of the app. That's actually
an application itself rather than

619
00:30:38.050 --> 00:30:40.270
just a responsibly designed. One
of the things that I'm

620
00:30:40.270 --> 00:30:42.280
just gone off on a
tangent here for a moment,

621
00:30:42.280 --> 00:30:44.350
but it's been one of
the things that I've found

622
00:30:44.350 --> 00:30:47.830
a little frustrating, I guess,
has been that we we've

623
00:30:48.010 --> 00:30:51.400
we've made the app, so
it's responsive. And that doesn't

624
00:30:51.400 --> 00:30:54.070
seem like a, like, it
seems like a lot of

625
00:30:54.070 --> 00:30:56.230
work. So you're talking about
the web apps, I'm taking

626
00:30:56.230 --> 00:30:57.820
the app now and I've
gone and made it very

627
00:30:57.820 --> 00:31:00.520
small. Yeah. And the menu
went away, see how, like

628
00:31:00.520 --> 00:31:03.880
the text has got a
little logo overlap, but on

629
00:31:03.880 --> 00:31:05.890
the whole you can kind
of still use it. And

630
00:31:05.890 --> 00:31:08.710
the thing that's been interesting
about that is, yeah, it

631
00:31:08.710 --> 00:31:11.710
works, but I don't think
it's a particularly awesome experience

632
00:31:11.710 --> 00:31:14.980
if you're on a phone,
you know? And so that's

633
00:31:14.980 --> 00:31:16.360
where we want to kind
of make it. So we

634
00:31:16.360 --> 00:31:19.810
do promote using an app,
an actual app because rather

635
00:31:19.810 --> 00:31:22.120
than trying to fudge the
UI to make it work

636
00:31:22.120 --> 00:31:24.400
when it's small or big,
you kind of just make

637
00:31:24.400 --> 00:31:26.530
it. So you focus on
a computer screen for the,

638
00:31:26.560 --> 00:31:29.920
for the web app or
a, or a phone screen

639
00:31:30.040 --> 00:31:32.170
for it, for the actual
app. So I definitely agree

640
00:31:32.170 --> 00:31:35.620
that when an app gets
complicated, enough, responsive design tends

641
00:31:35.620 --> 00:31:37.510
to fall down. I've seen
that with like, even like

642
00:31:37.510 --> 00:31:39.880
with Gmail, right? Yeah. Why
do they need an app?

643
00:31:39.970 --> 00:31:42.280
Well, at some point you
want to take advantage of

644
00:31:42.280 --> 00:31:44.950
the hardware. You want to
have real time notifications. You

645
00:31:44.950 --> 00:31:47.320
want to have local storage.
Yep. You're going to push

646
00:31:47.350 --> 00:31:49.180
HTML maybe a little farther
than it's used to going.

647
00:31:49.720 --> 00:31:51.430
Well, I mean, even if
you look at the exception

648
00:31:51.430 --> 00:31:53.440
details there, I mean, a
stack trace is probably a

649
00:31:53.440 --> 00:31:56.680
prime example of something that's
difficult to shrink down and

650
00:31:56.680 --> 00:31:59.860
do nicely. And it's hard
enough to do it in

651
00:31:59.890 --> 00:32:02.470
HTML, but you know, if
we can at least do

652
00:32:02.470 --> 00:32:04.960
it inside net, we get
a lot more control. Well,

653
00:32:05.000 --> 00:32:07.660
even if you look at,
get hubs, recent responsive design,

654
00:32:07.810 --> 00:32:10.390
a lot is lost. Yeah.
Yeah. You know, you're not

655
00:32:10.390 --> 00:32:14.440
going in and doing a
diffs and approving pull requests

656
00:32:14.470 --> 00:32:16.780
very much from the mobile
version of the ghetto. Yup.

657
00:32:16.940 --> 00:32:19.750
Yeah, absolutely. Well, very cool.
Thank you so much, John Daniel

658
00:32:19.750 --> 00:32:21.820
for chatting with me today.
Oh, well, thank you. Thank

659
00:32:21.820 --> 00:32:25.270
you for your time. You
can go up to reagan.io,

660
00:32:25.270 --> 00:32:27.340
R a Y G U
n.io. And check that out,

661
00:32:27.340 --> 00:32:29.590
sign up for a trial
and check out the cool

662
00:32:29.590 --> 00:32:32.350
stuff that mindscape is doing.
I really appreciate it. This

663
00:32:32.350 --> 00:32:35.050
has been another episode of
Hanselminutes and we'll see you

664
00:32:35.050 --> 00:32:35.890
again next week.

