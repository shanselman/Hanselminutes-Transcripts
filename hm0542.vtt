WEBVTT FILE

1
00:00:12.570 --> 00:00:18.090
From Hansel minutes.com it's Hansel
minutes, a weekly discussion with

2
00:00:18.090 --> 00:00:23.340
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:23.340 --> 00:00:28.320
show number 542. In this
episode, Scott talks with dr.

4
00:00:28.320 --> 00:00:33.390
<inaudible> about exploring code smells
in code written by children.

5
00:00:37.410 --> 00:00:39.540
Hi, this is Scott Hanselman.
This is another episode of

6
00:00:39.540 --> 00:00:43.170
Hansel minutes today. I'm talking
with Filene Filene has a

7
00:00:43.620 --> 00:00:46.440
PhD and as an assistant
professor at Delft university of

8
00:00:46.440 --> 00:00:50.580
technology, and she researches the
application of software engineering methods

9
00:00:50.850 --> 00:00:53.220
on a number of different
things. What are you working

10
00:00:53.220 --> 00:00:56.270
on right now? So my
most recent paper that we're

11
00:00:56.270 --> 00:00:59.180
going to present in September
is about, so for engineering

12
00:00:59.180 --> 00:01:04.520
methods for young kids, how
young, well, any age, what

13
00:01:04.520 --> 00:01:07.160
we did is we looked
at the programming language scratch.

14
00:01:07.190 --> 00:01:11.780
Do you know, scratch Absolutely
scratches like the canonical example

15
00:01:11.780 --> 00:01:14.780
for, for you? Yeah, it's
a visual programming language is

16
00:01:14.790 --> 00:01:17.480
made by MIT and it's
a standalone app, but it's

17
00:01:17.480 --> 00:01:19.640
also in the browser. So
it's very easy for kids

18
00:01:19.640 --> 00:01:22.670
to play with. And they
have a public proposal story

19
00:01:22.670 --> 00:01:26.780
of 14 million programs. And like,
don't get up. Kids can

20
00:01:26.780 --> 00:01:29.720
take each other's programs and
remix them, which is like

21
00:01:29.750 --> 00:01:34.820
forking. So that also means
that quality is important because

22
00:01:34.820 --> 00:01:37.730
if kids go online, look
at programs, games have other

23
00:01:37.730 --> 00:01:40.460
kids. They like, they can
look at the internals at

24
00:01:40.460 --> 00:01:43.190
the source code and make
changes and make their own

25
00:01:43.220 --> 00:01:46.580
version of programs. So you
can imagine that if it's

26
00:01:46.580 --> 00:01:50.240
full of code smells, then
that's not so easy for

27
00:01:50.240 --> 00:01:53.900
kids to work with. But
if you've got like, when

28
00:01:53.900 --> 00:01:57.680
you said 14 million, I kind
of was surprised. I thought

29
00:01:57.680 --> 00:02:02.420
you might say 14,000 or
140,000. I didn't expect 14 million.

30
00:02:02.660 --> 00:02:05.120
So then my first impression
would be that wouldn't that

31
00:02:05.120 --> 00:02:08.090
make the long tail really
long. Wouldn't the vast majority

32
00:02:08.090 --> 00:02:11.510
of them just be garbage.
Hello worlds. Yeah, that's true.

33
00:02:11.510 --> 00:02:14.960
So we didn't inspect all
14 million of them. We do

34
00:02:14.960 --> 00:02:18.740
the sample of 250,000 programs.
Put your rights. For example,

35
00:02:18.740 --> 00:02:22.970
about half of the programs
doesn't even have programming logic.

36
00:02:23.060 --> 00:02:26.030
So it's just pictures and
images or sounds that kids

37
00:02:26.030 --> 00:02:29.690
like to play with because
apart from being programming platforms,

38
00:02:29.900 --> 00:02:33.890
scratch, it's also very creative.
It's like crayons or pencils,

39
00:02:33.920 --> 00:02:36.410
but on a computer. So
it gets just use it

40
00:02:37.010 --> 00:02:40.340
to make pictures or drawings,
but then the other half,

41
00:02:40.370 --> 00:02:43.370
which is it's not even
really a long tail, that's

42
00:02:43.700 --> 00:02:46.760
a substantial portion of the
programs. He is serious and

43
00:02:46.760 --> 00:02:51.110
use a serious programming concepts.
Okay. So do you do

44
00:02:51.110 --> 00:02:54.410
some kind of cyclometic complexity
analysis and figure out that

45
00:02:54.470 --> 00:02:57.830
this is sophisticated and this
is not, and then, you

46
00:02:57.830 --> 00:03:01.320
know, throw out the, the
junky ones. Yeah, Exactly. We,

47
00:03:01.440 --> 00:03:07.350
we, in fact did measure
cyclometic complexity for programs. And

48
00:03:07.350 --> 00:03:09.420
for example, we found that
out of the tune of

49
00:03:09.420 --> 00:03:15.480
50,000 programs, 20,000 programs use
procedures. So they create methods

50
00:03:15.720 --> 00:03:18.930
within their scratch program and
all of the programs with

51
00:03:18.930 --> 00:03:24.240
methods over half of them,
56% of the procedures has

52
00:03:24.240 --> 00:03:28.950
a psychometric complexity bigger than
two. So they have at

53
00:03:28.950 --> 00:03:33.690
least one Cision point. Oh,
wow. Okay. So these are

54
00:03:33.810 --> 00:03:36.600
kids that are like 10
or 11, or how old

55
00:03:36.600 --> 00:03:40.170
are we talking? Yeah, sadly
enough. We don't know the

56
00:03:40.170 --> 00:03:44.280
ages of the kids that
made the program. So some

57
00:03:44.280 --> 00:03:47.850
of them may be, you
may be created by teachers

58
00:03:47.850 --> 00:03:51.300
or parents that are energetic
to help their kids program,

59
00:03:51.390 --> 00:03:54.180
or maybe they just liked
scratch themselves because I must

60
00:03:54.180 --> 00:03:57.660
admit, I have made some
scratch programs that weren't necessarily

61
00:03:57.660 --> 00:04:00.090
related to my research. I
will admit that I have

62
00:04:00.090 --> 00:04:02.250
created a fluffy bird club
and just for my own

63
00:04:02.250 --> 00:04:06.240
enjoyment. So we though for
this specific study, we don't

64
00:04:06.240 --> 00:04:08.820
have the agents, but because
we have so many of

65
00:04:08.820 --> 00:04:11.400
those programs, it's very likely
that lots of them are

66
00:04:11.400 --> 00:04:15.120
made by kids. Okay. So
you wouldn't know if some

67
00:04:15.120 --> 00:04:18.570
50 year old scratch expert
snuck in, but presumably they

68
00:04:18.570 --> 00:04:22.920
would be a little bit
rare. Yeah. So in a

69
00:04:22.920 --> 00:04:26.040
full up study that we're
running now we did an

70
00:04:26.070 --> 00:04:29.370
online, we created an online
scratch course. So if you

71
00:04:29.370 --> 00:04:32.220
videos and lessons for kids
to learn, scratch with, and

72
00:04:32.220 --> 00:04:35.360
we made them available on
the edX platform. So it

73
00:04:35.370 --> 00:04:38.850
is a platform for them
online learning. And for those

74
00:04:38.850 --> 00:04:42.090
kids, we, we did ask
them specifically what their age

75
00:04:42.090 --> 00:04:44.730
is, what they think of
programming, where do they like

76
00:04:44.730 --> 00:04:47.520
it on? And for their
programs, it won't be as

77
00:04:47.520 --> 00:04:49.800
many, but then we will
have in our next study

78
00:04:49.800 --> 00:04:52.440
a little bit more information
about what their background is

79
00:04:52.440 --> 00:04:54.990
for our generation. And for
example, also what are their

80
00:04:54.990 --> 00:04:57.240
siblings are programming? What are
they are doing it under

81
00:04:57.240 --> 00:05:00.780
supervision of parents or by
themselves. So stay tuned for

82
00:05:00.780 --> 00:05:03.180
my next study. Okay. So
let me see if I

83
00:05:03.180 --> 00:05:05.790
understand this and kind of
paraphrase it back to you.

84
00:05:06.120 --> 00:05:10.560
You've got this Corpus of
anonymous scratch programs. You don't

85
00:05:10.560 --> 00:05:14.160
know anything about the authors
you're, you're, you're effectively Google

86
00:05:14.370 --> 00:05:16.950
in that you're a spider
sucking in all of these

87
00:05:16.950 --> 00:05:20.550
programs and you have no
additional metadata about the programs,

88
00:05:20.640 --> 00:05:24.540
gender, age, anything, and you
can make judgments only on

89
00:05:24.540 --> 00:05:27.720
the code based on looking
at them. But then you

90
00:05:27.720 --> 00:05:32.610
have your secondary, you know,
coming soon Corpus where you'll

91
00:05:32.610 --> 00:05:35.490
have an, like a survey
alongside it and you'll have

92
00:05:35.490 --> 00:05:37.710
all sorts of information, would
you then be able to

93
00:05:37.710 --> 00:05:40.440
correlate the two? Yeah. That's
so that's her plan. We

94
00:05:40.440 --> 00:05:45.330
were interested in seeing how
much alike our kids in

95
00:05:45.330 --> 00:05:48.000
our online program are to
the general public that we

96
00:05:48.000 --> 00:05:51.090
find in scratch. And this
is specifically interesting because in

97
00:05:51.090 --> 00:05:54.660
the study that we're doing
in the online course, we

98
00:05:54.660 --> 00:05:59.450
are specifically teaching kids about
code smells and duplication. So

99
00:05:59.450 --> 00:06:02.630
we're explaining them from the
beginning of the course, this

100
00:06:02.630 --> 00:06:05.090
is an if statement, and
this is a loop. And

101
00:06:05.150 --> 00:06:09.470
also don't combine all your
blocks together in very long

102
00:06:09.470 --> 00:06:13.580
groups, because that will be
harder to reach in another

103
00:06:13.580 --> 00:06:15.530
study. We did. So that's
not the study where we

104
00:06:15.530 --> 00:06:18.470
scratched, where we scraped the
scratch programs, but this is

105
00:06:18.470 --> 00:06:20.720
a study. We performed at
a high school in the

106
00:06:20.720 --> 00:06:25.850
Netherlands. We did a controlled
experiments. We had four high

107
00:06:25.850 --> 00:06:29.780
school classes and we randomly
gave them either a smelly

108
00:06:29.780 --> 00:06:33.200
version of a scratch program
or a perfect version. And

109
00:06:33.200 --> 00:06:37.280
we measured how they perform
differently if we gave them

110
00:06:37.340 --> 00:06:39.920
a smelly version. And then
we had long methods smell

111
00:06:40.070 --> 00:06:42.950
and also duplication smells so
versions with lots of code

112
00:06:42.950 --> 00:06:47.150
clones. And we were able
to measure that indeed gets

113
00:06:47.150 --> 00:06:50.840
performed way worse on programs
with long method smell it's

114
00:06:50.840 --> 00:06:53.150
way harder for them to
read. So this was of

115
00:06:53.150 --> 00:06:56.090
course what we would have
expected because these results have

116
00:06:56.090 --> 00:07:00.230
been found in the context
of professional developers as well.

117
00:07:00.230 --> 00:07:02.750
So we know for a
fact that combining all your

118
00:07:02.750 --> 00:07:05.660
scratch blocks is bad because
it will be harder for

119
00:07:05.660 --> 00:07:08.120
other kids to read. So
from the start in our

120
00:07:08.120 --> 00:07:12.500
online material, we educate kids
about good silver engineering methods.

121
00:07:12.500 --> 00:07:15.800
And then our hope is
that they will produce less

122
00:07:15.800 --> 00:07:21.160
smelly programs than the general
sample. Interesting. Let's just take

123
00:07:21.160 --> 00:07:25.570
one quick, second and redefine
or define a more clearly

124
00:07:25.600 --> 00:07:28.600
code smell because first I
think there are a lot

125
00:07:28.600 --> 00:07:30.520
of people who use, use
this term all the time,

126
00:07:30.730 --> 00:07:33.280
but there may be people
who maybe don't have English

127
00:07:33.280 --> 00:07:35.320
as their first language who
have not heard that term

128
00:07:35.320 --> 00:07:38.680
code smell too much. It's
almost like a sixth sense,

129
00:07:38.680 --> 00:07:40.930
isn't it? That you have
to develop? Yeah. Yeah. It's

130
00:07:40.930 --> 00:07:44.170
often a term that leads
to giggles among people that

131
00:07:44.170 --> 00:07:48.250
aren't used to the term.
So a goat's smell is

132
00:07:48.250 --> 00:07:50.980
a part of a program.
It doesn't necessarily have to

133
00:07:50.980 --> 00:07:55.540
be an error. It can
function totally correct. However, it's

134
00:07:55.540 --> 00:08:00.070
not structured optimal for, let's
say human consumption. It's not

135
00:08:00.190 --> 00:08:04.720
as easy to read or
to maintain to change as

136
00:08:04.780 --> 00:08:08.410
could be possible. And sort
of the canonical example is

137
00:08:08.410 --> 00:08:11.680
a very long method. We've
all seen a hundred or

138
00:08:11.680 --> 00:08:15.700
200 or thousands line methods,
and maybe it has a

139
00:08:15.700 --> 00:08:20.140
very generic name, like set
up or execute or run.

140
00:08:20.650 --> 00:08:25.570
So it there's nothing really
there to help you understand

141
00:08:25.570 --> 00:08:28.810
it. There isn't an abstraction
because it's a method, but

142
00:08:28.810 --> 00:08:31.660
it's so big that it
sort of loses its value.

143
00:08:32.650 --> 00:08:37.540
These eight goats smell and
another famous example is called

144
00:08:37.570 --> 00:08:41.110
Cote clones or sometimes called
duplication. If you're doing the

145
00:08:41.110 --> 00:08:44.560
same or something very similar
in many different places of

146
00:08:44.560 --> 00:08:47.410
the program, then suppose you
have to change it in

147
00:08:47.410 --> 00:08:50.500
one place. You shouldn't forget
to also change it somewhere

148
00:08:50.500 --> 00:08:54.100
else. So that's not so
much an understandability issue or

149
00:08:54.220 --> 00:08:58.050
a readability, but that's really
a main maintenance issue because

150
00:08:58.590 --> 00:09:00.630
if you are going to
change it, you will likely

151
00:09:00.630 --> 00:09:03.300
forget some of the versions
of the clones and then

152
00:09:03.540 --> 00:09:08.060
you have half working program.
Okay. So there's, there are,

153
00:09:08.420 --> 00:09:10.820
you know, patterns in software
engineering that we want to

154
00:09:10.820 --> 00:09:13.940
use there they're like ideal
patterns. And then there's kind

155
00:09:13.940 --> 00:09:17.960
of anti-patterns I guess, code
smells or kind of anti-patterns.

156
00:09:18.710 --> 00:09:22.940
Yeah, definitely. Usually anti-patterns is
used patterns in general, I

157
00:09:22.940 --> 00:09:24.710
think is used on a,
on a bit more higher

158
00:09:24.710 --> 00:09:29.630
level is more when we're
talking about architecture, but yeah,

159
00:09:29.660 --> 00:09:31.400
in general, they're the same
thing. There are things we

160
00:09:31.400 --> 00:09:34.700
like, which are patterns, design
patterns, and they're things we

161
00:09:34.700 --> 00:09:38.870
are that are collations of
a design pattern and you

162
00:09:38.870 --> 00:09:44.330
can call them at anti-pattern
for smells. And Martin Fowler

163
00:09:44.360 --> 00:09:47.690
says that the, the, the
term was coined by Kent

164
00:09:47.750 --> 00:09:51.560
Beck when they were working
on the book called refactoring.

165
00:09:51.890 --> 00:09:53.840
And the thing that he
says, I think is really

166
00:09:53.840 --> 00:09:56.690
interesting is that it's quick
to spot, like the definition

167
00:09:56.690 --> 00:09:59.240
of a smell is it's
not something that you hunt

168
00:09:59.240 --> 00:10:02.660
for. You develop a sense
don't you, that something is

169
00:10:02.660 --> 00:10:06.230
wrong. Are you hoping that
the kids will have an

170
00:10:06.320 --> 00:10:11.480
inherent code census smelly smelling
sense? Yeah, definitely. That would

171
00:10:11.480 --> 00:10:14.240
be so nice because one
of my secrets shake your

172
00:10:14.240 --> 00:10:16.880
motivations for this project. And
it's not all that secret

173
00:10:16.880 --> 00:10:19.940
because I'm telling you over
the internet now is those

174
00:10:19.940 --> 00:10:23.060
kids that are playing with
scratch. Now in 10 years,

175
00:10:23.060 --> 00:10:25.430
they will be in my
classroom. They will be 18

176
00:10:25.430 --> 00:10:29.540
year olds see as undergrads.
And they ha some of

177
00:10:29.540 --> 00:10:33.890
our CS freshmen have an
experience of 10 to 15

178
00:10:33.890 --> 00:10:38.720
years programming behind them nowadays.
So then I tell them,

179
00:10:38.720 --> 00:10:41.150
and one of the first
lessons, Hey, hello, you should

180
00:10:41.150 --> 00:10:44.420
test your code and her
like, test why I've never

181
00:10:44.420 --> 00:10:48.710
tested code. You shouldn't call
all your variables VAR one,

182
00:10:48.710 --> 00:10:51.080
two, three, and you shouldn't
call your puppets in your

183
00:10:51.080 --> 00:10:53.870
game. Sprite one, two, three,
but this is what they're

184
00:10:53.870 --> 00:10:57.380
used to because lots of
programming education in that kids

185
00:10:57.380 --> 00:11:02.240
nowadays is very much that
it's programming education, but so

186
00:11:02.240 --> 00:11:05.270
far engineering, we know that
it's not just you making

187
00:11:05.270 --> 00:11:07.700
a game, you see with
scratch with the fact that

188
00:11:07.700 --> 00:11:11.120
kids can remix their programs.
It's very much a social

189
00:11:11.120 --> 00:11:13.640
and never, and maybe they
won't want to come back

190
00:11:13.640 --> 00:11:16.280
to their scratch program in
three years, or maybe someone

191
00:11:16.280 --> 00:11:19.370
else wants to reuse it
tomorrow. So if we don't

192
00:11:19.430 --> 00:11:25.760
teach them about TDD and
refactoring from the start, we

193
00:11:25.760 --> 00:11:28.610
will be too late. If
they've already been exposed to

194
00:11:28.610 --> 00:11:32.930
so many programming environments and
ideas, but more to the

195
00:11:32.930 --> 00:11:38.840
underlying, or let's say, and
compassing. So for engineering methods

196
00:11:38.840 --> 00:11:43.250
that are also part of
creating great software, I think

197
00:11:43.250 --> 00:11:45.830
that the part that stood
out though, that you just

198
00:11:45.830 --> 00:11:48.110
said there was that they
might come back in three

199
00:11:48.110 --> 00:11:50.960
years and I thought to
myself, well, that's an eternity

200
00:11:51.350 --> 00:11:54.370
when you're 12. Yeah, exactly.
Yeah. So we were Thinking

201
00:11:54.370 --> 00:11:56.680
about lots of exercises that
we can do. So, so

202
00:11:56.680 --> 00:11:59.530
our online course was, was
quite successful. So we're definitely

203
00:11:59.530 --> 00:12:01.900
going to do a rerun
in the next academic year.

204
00:12:02.140 --> 00:12:04.300
So we're thinking of exercises
where we're just going to

205
00:12:04.300 --> 00:12:07.510
have kids swap source codes,
for example. So here's a

206
00:12:07.510 --> 00:12:09.970
project you get from someone
else in this course, and

207
00:12:09.970 --> 00:12:12.880
they've done maybe the same
exercise or maybe a slightly

208
00:12:12.880 --> 00:12:15.670
different exercise and are you
change it? Or you read

209
00:12:15.670 --> 00:12:18.580
it, you document it. And
we hope that if we

210
00:12:18.580 --> 00:12:22.600
put them in the shoes
of maintainers, rather than just

211
00:12:22.600 --> 00:12:25.060
in the shoes of a
single program or making stuff

212
00:12:25.060 --> 00:12:29.890
for themselves, that they will
also experience how to do,

213
00:12:29.980 --> 00:12:33.240
how to make a project
that's easy to maintain. Right?

214
00:12:33.270 --> 00:12:35.640
And I think another way
to phrase it is that

215
00:12:35.640 --> 00:12:37.710
you're teaching them a kind
of empathy. When you say

216
00:12:37.710 --> 00:12:40.500
put them in the shoes
of, you're saying, be empathetic

217
00:12:40.500 --> 00:12:43.560
to future you and to
your other people who might

218
00:12:43.560 --> 00:12:46.560
come upon your, your program
and want to remix it.

219
00:12:47.430 --> 00:12:50.820
And lots of programming, lots
of introductory programming material is

220
00:12:50.820 --> 00:12:53.190
very goal driven. And of
course that's cool. I mean,

221
00:12:53.370 --> 00:12:56.020
it's cool. You have a
puzzle and you found, you

222
00:12:56.020 --> 00:12:58.680
know, you found the shortest
path through to mace. You're

223
00:12:58.680 --> 00:13:01.380
done, you get a point
or a coin and you

224
00:13:01.380 --> 00:13:04.590
move on to the next
exercise. It's very encouraging and

225
00:13:04.590 --> 00:13:09.240
engaging to get stuff done.
But often they're the angle

226
00:13:09.240 --> 00:13:13.350
of looking back at your
code. Then this is what

227
00:13:13.650 --> 00:13:17.220
Martin foller describes in his
refactoring book as well. Everything

228
00:13:17.220 --> 00:13:19.770
is done. But now you're
going to look at your

229
00:13:19.770 --> 00:13:22.410
source code and other time
and see what is better.

230
00:13:22.410 --> 00:13:26.280
That's like the test refactoring
cycle and that they talk

231
00:13:26.280 --> 00:13:28.500
about the test pass and
you go back to your

232
00:13:28.830 --> 00:13:32.160
code. How can we make
this more pretty? And in

233
00:13:32.160 --> 00:13:36.210
my experience, we've sampled lots
and lots of programming education

234
00:13:36.210 --> 00:13:41.850
material that refactoring had. That's
not something that we teach

235
00:13:41.880 --> 00:13:45.690
kids. And that is definitely,
I think we all agree

236
00:13:45.900 --> 00:13:48.360
that that is a skill.
We want professional programmers who

237
00:13:48.360 --> 00:13:51.120
have, and we spend a
little time in university, but

238
00:13:51.120 --> 00:13:54.450
also outside in companies, coding
dojo is and stuff like

239
00:13:54.450 --> 00:13:58.740
that, trying to teach that
empathy to developers. But, and

240
00:13:58.790 --> 00:14:02.010
earlier we get to them
the better, the more that

241
00:14:02.010 --> 00:14:04.230
they understand, that's a part
of programming to the better

242
00:14:04.230 --> 00:14:08.100
they can decide, whether that's
a career for them. That's

243
00:14:08.100 --> 00:14:12.450
so difficult though, because you're
also describing the larger human

244
00:14:12.450 --> 00:14:16.410
characteristic of, of, you know,
delayed gratification, you know, do

245
00:14:16.410 --> 00:14:19.500
this thing. And it will
be better at some unknown

246
00:14:19.500 --> 00:14:22.350
point in the future. And,
you know, we can't do

247
00:14:22.350 --> 00:14:24.570
that when we need to
eat good food and then,

248
00:14:25.050 --> 00:14:28.050
you know, not die 30
years later to tell that

249
00:14:28.050 --> 00:14:30.390
to a kid is difficult.
I think your point about,

250
00:14:30.990 --> 00:14:33.600
well, I solve the problem,
right? It's almost like I

251
00:14:33.600 --> 00:14:36.450
was doing, doing some long
division with my eight year

252
00:14:36.450 --> 00:14:38.970
old yesterday. And he looked
at a problem and he

253
00:14:38.970 --> 00:14:41.520
knew the answer. And my
wife said, well, show your

254
00:14:41.520 --> 00:14:43.650
work. And he said, well,
I don't want to show

255
00:14:43.650 --> 00:14:46.980
my work. I got the
right answer. It's done. And

256
00:14:46.980 --> 00:14:50.010
that's basically all it compiled
and it ran, why are

257
00:14:50.010 --> 00:14:54.770
we still talking about this?
Yeah. I mean, getting people

258
00:14:54.770 --> 00:14:58.250
and including kids, which are
also people to have good

259
00:14:58.250 --> 00:15:02.390
habits and to naturally want
to make things pretty, even

260
00:15:02.390 --> 00:15:06.380
though there's more rewards immediately,
that that's difficult, but we

261
00:15:06.380 --> 00:15:10.220
do think that tool support
could help there because the

262
00:15:10.310 --> 00:15:13.310
RDE let's say to scratch
our ye it's not really

263
00:15:13.310 --> 00:15:16.730
an IDE because it has
features that are mainly aimed

264
00:15:16.730 --> 00:15:19.790
at writing codes, the way
it has scratches made it

265
00:15:19.790 --> 00:15:22.700
doesn't have smell detection. It
doesn't have a refactoring angle.

266
00:15:22.970 --> 00:15:26.240
And if you see my
papers, the research I've done

267
00:15:26.240 --> 00:15:29.060
over the past year, and
if you're also familiar with

268
00:15:29.060 --> 00:15:32.990
my work on Excel, it's
kind of clear where I'm

269
00:15:32.990 --> 00:15:36.470
going, because an obvious next
step is to make an

270
00:15:36.470 --> 00:15:41.560
IDE smell detection, angle engine
for scratch. So we've used

271
00:15:41.560 --> 00:15:44.810
that in analyzing our two
50,000 programs, but we want

272
00:15:44.810 --> 00:15:49.910
to make that user-facing. So
imagine an alternative scratch environment

273
00:15:49.940 --> 00:15:52.490
where there would be a
counter for your code smells.

274
00:15:52.850 --> 00:15:55.700
And that's the thing that
will give you points. If

275
00:15:55.700 --> 00:15:58.250
you lower the code smells,
then you can make it

276
00:15:58.250 --> 00:16:00.770
more visible to kids, whether
they're on the right track

277
00:16:00.770 --> 00:16:04.810
or not. So if you
built in the detection of

278
00:16:04.810 --> 00:16:07.420
this into a tool, like,
you know, things like ReSharper

279
00:16:07.420 --> 00:16:11.260
and visual studio do with,
with, with C sharp and

280
00:16:11.260 --> 00:16:14.770
F sharp, where they put
a little, a little light

281
00:16:14.770 --> 00:16:16.750
bulb over code that they
think is weird. Or if

282
00:16:16.750 --> 00:16:19.540
you think about word and
Excel, where they, you know,

283
00:16:19.540 --> 00:16:22.810
word will put us red
squiggly for spelling errors and

284
00:16:22.810 --> 00:16:25.840
a green squiggly for grammatical
errors, you could do that

285
00:16:25.840 --> 00:16:29.050
for scratch, but doesn't, that
then become a crutch. I

286
00:16:29.050 --> 00:16:31.300
mean, there are people who
say that, you know, you

287
00:16:31.300 --> 00:16:34.450
shouldn't be using spell checkers
and in word, when you're

288
00:16:34.450 --> 00:16:36.940
starting to write, because it
is a crutch and it

289
00:16:37.150 --> 00:16:40.270
allows you to not learn
how to spell. Yeah, absolutely.

290
00:16:40.270 --> 00:16:42.340
So, so in beginning of
the podcast, we talked a

291
00:16:42.340 --> 00:16:45.280
little about a bit about
having that sense, that, that

292
00:16:45.280 --> 00:16:49.000
spider sense that tells you
immediately, this is too long,

293
00:16:49.180 --> 00:16:52.030
but that that's not something
professional developers were born with

294
00:16:52.060 --> 00:16:55.120
either. That's something you get
by training. And after a

295
00:16:55.120 --> 00:16:58.240
while, you don't need the
IDM at any more, maybe

296
00:16:58.240 --> 00:16:59.980
to tell you that that
men have is too long,

297
00:17:00.010 --> 00:17:04.150
you know it, but how
do you develop that sense?

298
00:17:04.150 --> 00:17:07.330
So we definitely think that
tool support could help their

299
00:17:07.660 --> 00:17:10.390
teach kids about, Oh, maybe
this is a little bit

300
00:17:10.390 --> 00:17:13.720
too long, but also do
it in a challenging way.

301
00:17:13.990 --> 00:17:17.200
You don't want to say
something that that's bad. Maybe

302
00:17:17.200 --> 00:17:20.680
you want to just, it
could made a program. And

303
00:17:20.800 --> 00:17:23.770
they're at that point where
they're maybe thinking about what's

304
00:17:23.770 --> 00:17:26.020
my next move. And of
course you could set the

305
00:17:26.020 --> 00:17:29.500
text that by looking at
mouse and keyboard movements, then

306
00:17:29.500 --> 00:17:32.980
you could maybe show a
popup or an extra challenge.

307
00:17:32.980 --> 00:17:36.400
Here's a quiz we've observed
by doing some small code

308
00:17:36.400 --> 00:17:39.640
analysis that you could also
split this group of blocks

309
00:17:39.640 --> 00:17:42.850
into. Do you see how
to do it? So then,

310
00:17:42.850 --> 00:17:44.800
you know, it's not annoying.
It's a curse. It's more

311
00:17:44.800 --> 00:17:48.280
an encouragement to think about
it. So we're definitely don't

312
00:17:48.280 --> 00:17:51.540
think that every scratch game
you make, you want to

313
00:17:51.540 --> 00:17:54.690
have no zero code smells
and everything should be perfect,

314
00:17:54.690 --> 00:17:58.290
but we do think we
can encourage that reflection on

315
00:17:58.290 --> 00:18:03.410
source code quality a little
bit more. There are something

316
00:18:03.410 --> 00:18:06.530
like 80 or 89 different
code smells that have been

317
00:18:06.890 --> 00:18:10.490
identified, but again, long tail
is long. What are the

318
00:18:10.490 --> 00:18:13.910
code smells that you watched
for specifically, like, what are

319
00:18:13.910 --> 00:18:17.550
the top two or three
code smells that, that, that

320
00:18:17.690 --> 00:18:20.540
show up? Yeah. So there
are a few interesting code

321
00:18:20.540 --> 00:18:23.930
smells that are scratched specific
that we looked at. So

322
00:18:23.930 --> 00:18:27.500
scratch is an events driven
language where you can have

323
00:18:27.500 --> 00:18:29.780
the environments where he acts
on events and an event

324
00:18:29.780 --> 00:18:32.120
can be a mouse click,
for example, or key press,

325
00:18:32.480 --> 00:18:35.570
but users can also generate
their own events. For example,

326
00:18:35.570 --> 00:18:38.000
if I'm the main character
in my game and I

327
00:18:38.210 --> 00:18:42.290
bumped a wall, I can
broadcast a signal I'm bumping

328
00:18:42.290 --> 00:18:45.500
against this wall. And other
sprites can react to that

329
00:18:45.530 --> 00:18:49.100
by for example, adopting a
point or playing sounds. So

330
00:18:49.100 --> 00:18:52.520
a scratch specific smell is
where you create an event,

331
00:18:52.730 --> 00:18:56.720
but there's no events handler.
No one is consuming that

332
00:18:56.720 --> 00:19:00.530
signal. So we, we looked
at those sort of specific

333
00:19:00.530 --> 00:19:04.310
scratch code smells. And other
than that, we sort of

334
00:19:04.310 --> 00:19:08.360
tried to limit ourselves to
works existing, simple code smells

335
00:19:08.600 --> 00:19:12.410
so long Mehta clone detection,
and a little bit of

336
00:19:12.410 --> 00:19:17.450
naming it naming as well.
Because of course there are

337
00:19:17.450 --> 00:19:20.810
some tradeoffs in code smells
because if you chop a

338
00:19:20.810 --> 00:19:23.750
method up into lots of
different pieces, then they will

339
00:19:23.750 --> 00:19:27.560
have to communicate with each
other and then increasing the

340
00:19:27.560 --> 00:19:30.860
one smell is decreasing the
other smell. So for that

341
00:19:30.860 --> 00:19:32.600
reason, we thought we were
just going to look at

342
00:19:32.600 --> 00:19:36.650
some simple code smells, where
we can have actionable advice

343
00:19:36.890 --> 00:19:41.090
to provide to kids because
something like feature envy where

344
00:19:41.090 --> 00:19:44.570
one method is connected to
fuel for different class. Those

345
00:19:44.570 --> 00:19:48.260
things are way too complex
to reason about, and not

346
00:19:48.350 --> 00:19:50.690
just for us, because we
could do it as programmers,

347
00:19:50.690 --> 00:19:53.750
but to communicate to a
kid what is happening and

348
00:19:53.750 --> 00:19:56.180
why, and what is a
solution, isn't all that obvious.

349
00:19:56.840 --> 00:20:00.380
Do you, are you going
to apply these learnings to

350
00:20:00.380 --> 00:20:03.350
other languages? Is there something
about scratch that makes it

351
00:20:03.350 --> 00:20:06.140
like the perfect programming language
as an example? Is it

352
00:20:06.140 --> 00:20:09.050
the, is it the Corpus
of information that you're pulling

353
00:20:09.050 --> 00:20:12.230
from other no other languages
that you could, you know,

354
00:20:12.230 --> 00:20:15.980
spider? Yeah. So the reason
that's that when you look

355
00:20:15.980 --> 00:20:18.920
at scratch is indeed because
it has a used public

356
00:20:18.920 --> 00:20:23.630
repository. And also because it's
overtly made by researchers that

357
00:20:23.630 --> 00:20:26.330
have thought about that because
they have a clear license

358
00:20:26.330 --> 00:20:30.530
agreements that allows people to
inspect the programs if they're

359
00:20:30.530 --> 00:20:32.540
shared. So if you're a
kid and you share your

360
00:20:32.540 --> 00:20:35.630
program, you agree with the
whole world being able to

361
00:20:35.630 --> 00:20:39.320
see and analyze and process
your program. So they've really

362
00:20:39.320 --> 00:20:42.110
thought that through. And that's
also what enables us to

363
00:20:42.110 --> 00:20:45.380
do this research. We couldn't
have done that on another

364
00:20:45.380 --> 00:20:48.880
language because they don't have
the data. So for example,

365
00:20:48.880 --> 00:20:52.510
a language like Blockly, that's
the language behind code.org, which

366
00:20:52.510 --> 00:20:56.740
also very nice, very similar
also block-based language. It's very

367
00:20:56.740 --> 00:21:01.330
similar to scratch. They have
not allowed with an API

368
00:21:01.330 --> 00:21:05.770
or something, researchers to crawl
all that program. So it's,

369
00:21:06.200 --> 00:21:09.070
it's the popular, the most
popular language, as far as

370
00:21:09.070 --> 00:21:11.770
we know, that makes it
easy enough for us to

371
00:21:11.770 --> 00:21:14.260
process, but there's no thing
there would be nothing against

372
00:21:14.260 --> 00:21:17.080
doing something else. Suppose that
would be a website that's

373
00:21:17.080 --> 00:21:21.520
collected by some programs written
by kids and also listed

374
00:21:21.520 --> 00:21:25.300
kids' age and gender and
socioeconomic background of their parents.

375
00:21:25.300 --> 00:21:27.550
And I would be very
interested in analyzing that too.

376
00:21:28.790 --> 00:21:33.810
Interesting. Yeah. If you could
call covid.org and people like

377
00:21:33.810 --> 00:21:36.480
that, and you could, like
you said, you could search

378
00:21:36.480 --> 00:21:39.330
for it, but even more,
if they could take the

379
00:21:39.330 --> 00:21:41.760
sum total of all of
their information and make it

380
00:21:41.760 --> 00:21:45.210
available as a dataset or
dump of some kind. Yeah.

381
00:21:45.210 --> 00:21:46.710
That would be, that would
be really, we would be

382
00:21:46.710 --> 00:21:49.230
very happy if they would
do that because for scratch,

383
00:21:49.260 --> 00:21:51.420
we am, I'm sure you
can provide some links with

384
00:21:51.450 --> 00:21:55.080
both guests. So our scraping
program, and that includes a

385
00:21:55.110 --> 00:21:58.860
parsing of the Jason format
of scratch. We've put that

386
00:21:58.860 --> 00:22:01.500
online on Kitsap. So if
other people want to scratch

387
00:22:01.740 --> 00:22:04.260
a scrape, the scratch ripple
story as well, and process

388
00:22:04.260 --> 00:22:07.890
them for whatever other smells,
they, once we've made that

389
00:22:07.890 --> 00:22:10.440
available for other people to
use. So that's why we

390
00:22:10.440 --> 00:22:13.350
really want to encourage this
type of research. Because again,

391
00:22:13.740 --> 00:22:17.400
you didn't expect 14 million programs
and I didn't know how

392
00:22:17.400 --> 00:22:21.180
many are written every day,
but the thousands and thousands

393
00:22:21.180 --> 00:22:25.260
of scratch programs are still
contributing every day. So is

394
00:22:25.260 --> 00:22:29.460
there so much to learn
from about how kids program

395
00:22:29.490 --> 00:22:32.790
and you can also of
course track these programs and

396
00:22:32.820 --> 00:22:34.650
we don't have agents, but
we do have to use

397
00:22:34.650 --> 00:22:37.110
your name of the program.
So you could even zoom

398
00:22:37.110 --> 00:22:41.700
in on one user and
see how their programs evolve.

399
00:22:41.730 --> 00:22:45.180
And you can also investigate
what in scratch. It's called

400
00:22:45.180 --> 00:22:49.410
the remix tree. How the,
yeah, like the forking history

401
00:22:49.650 --> 00:22:51.750
of a project, how people
are changing it, what they're

402
00:22:51.750 --> 00:22:55.470
changing, what they're adding, what
you're removing. So a potential

403
00:22:56.160 --> 00:22:58.500
angle we haven't followed yet,
but we could follow is

404
00:22:58.740 --> 00:23:02.130
to see what kind of
refactoring gets applied themselves. So

405
00:23:02.130 --> 00:23:04.260
you take snapshots of the
program and you see what

406
00:23:04.260 --> 00:23:07.470
changes they make. Maybe there
are already improvements that they

407
00:23:07.470 --> 00:23:11.610
are making for reasons we
don't know, maybe they are

408
00:23:11.640 --> 00:23:14.910
renaming their scripts from Sprite.
One to flip it number

409
00:23:14.910 --> 00:23:19.020
five, or gets the green
cats with red hat or

410
00:23:19.020 --> 00:23:22.140
something like that. So that
could have an additional source

411
00:23:22.140 --> 00:23:25.620
of refactoring because you can
only learn so much by

412
00:23:25.620 --> 00:23:30.090
applying grownups or for engineering
to scratch. There might be

413
00:23:30.090 --> 00:23:34.020
code smells or refactoring veterans
that are unique to kids

414
00:23:34.020 --> 00:23:37.530
or unique to scratch that
we cannot invent by looking

415
00:23:37.530 --> 00:23:41.880
at what responsible adult professional
developers do, because they're in

416
00:23:41.880 --> 00:23:46.220
a totally different context. Yeah.
That seems like adding the,

417
00:23:46.250 --> 00:23:50.690
The additional dimension of time
and, and then thinking about

418
00:23:50.930 --> 00:23:54.890
scratch and how it moves
around their site as if

419
00:23:54.920 --> 00:23:56.540
you think about it in
terms of get and get

420
00:23:56.540 --> 00:23:59.570
hub and forking and cloning
would definitely be at a

421
00:23:59.570 --> 00:24:02.630
whole new way of looking
at this. You know, you've

422
00:24:02.630 --> 00:24:05.870
seen those, those D three
JS kind of graph, you

423
00:24:05.870 --> 00:24:09.650
know, con kinetic crafts, where
someone points a system at

424
00:24:09.650 --> 00:24:12.440
get hub and you get
this kind of family tree

425
00:24:12.440 --> 00:24:16.490
over time to see an
application grow and change. You

426
00:24:16.490 --> 00:24:21.100
could see how the child's
understanding of code. Yeah, exactly.

427
00:24:21.100 --> 00:24:23.170
And see what blocks they
use. So we were in

428
00:24:23.170 --> 00:24:25.360
our paper, we have an
analysis of all the blocks

429
00:24:25.360 --> 00:24:28.360
that are used because the
blocks are divided in 10

430
00:24:28.360 --> 00:24:31.300
different categories for sound and
movement and things like that.

431
00:24:32.050 --> 00:24:35.170
So you could also see
how the toolbox of a

432
00:24:35.170 --> 00:24:38.980
kid is maybe growing, but
maybe also shrinking. Maybe they

433
00:24:38.980 --> 00:24:42.490
develop their own favorite habits
and don't use a certain

434
00:24:42.490 --> 00:24:46.810
category or type anymore. After
a while. That's all stuff

435
00:24:46.810 --> 00:24:49.480
we haven't explored yet, because
this was the first, the

436
00:24:49.480 --> 00:24:51.040
first study of this guy.
And we just want it

437
00:24:51.040 --> 00:24:53.830
to have a big overview
of the whole dataset, but

438
00:24:53.830 --> 00:24:57.280
that's, those are things he's
human too for us, but

439
00:24:57.460 --> 00:25:02.050
maybe also for other people.
So w what can we,

440
00:25:02.050 --> 00:25:05.710
as professional engineers who are
listening, you know, learn from

441
00:25:05.710 --> 00:25:08.470
this, as far as it
relates to our daily work.

442
00:25:08.740 --> 00:25:11.290
And I wonder how often
we see people who have

443
00:25:11.290 --> 00:25:14.830
been coding, as long as
these kids have been alive.

444
00:25:15.460 --> 00:25:19.120
And have we forgotten our
sense of smell? Do we

445
00:25:19.120 --> 00:25:22.060
just give up and write
smelly code and move on?

446
00:25:22.060 --> 00:25:25.960
Because it's just so tiring.
Yeah. That's a very interesting

447
00:25:25.960 --> 00:25:31.660
question. What can professional developers
learn? So I think one

448
00:25:31.660 --> 00:25:35.050
of the things is project
abandonment is way greater in

449
00:25:35.050 --> 00:25:37.270
the scratch program. So if
kids are done with a

450
00:25:37.270 --> 00:25:41.110
game, they just drop it
and rebuild something else. They're

451
00:25:41.110 --> 00:25:45.190
an old going to mess
with something clearly bad or

452
00:25:45.190 --> 00:25:51.370
broken or super smelly. Whereas
in a professional context, of

453
00:25:51.370 --> 00:25:54.100
course you have to, you
cannot just say, I don't

454
00:25:54.100 --> 00:25:57.190
like this code base anymore.
I'm, I'm starting a new

455
00:25:57.190 --> 00:26:00.610
with something else. So not
all the lessons I think

456
00:26:00.610 --> 00:26:06.970
are, are translatable to a
professional contacts. I've found a

457
00:26:06.970 --> 00:26:09.520
little bit, I found it
a little bit frustrating working

458
00:26:09.520 --> 00:26:14.260
with professional engineers when you
start applying static analysis algorithms

459
00:26:14.260 --> 00:26:18.160
to their code, because I've
always felt like the professional

460
00:26:18.160 --> 00:26:22.540
engineer could just say, well,
it says you, you know,

461
00:26:22.540 --> 00:26:25.840
like as a retort. So
I might say, well, you

462
00:26:25.840 --> 00:26:28.000
know, I've taken a static
analysis and this code is

463
00:26:28.000 --> 00:26:30.550
kind of smelly and here
are the smells, and it

464
00:26:30.550 --> 00:26:35.200
has a cyclometic complexity of
X and that's bad. And

465
00:26:35.200 --> 00:26:37.990
they can just say, well,
it says, you, you know,

466
00:26:38.410 --> 00:26:40.930
I don't want your feedback.
I don't want your feedback.

467
00:26:41.320 --> 00:26:44.910
Do, do the kids take
this feedback? And they change

468
00:26:44.920 --> 00:26:46.680
the way that they think
about code right away, or

469
00:26:46.680 --> 00:26:49.890
do they say, well, it
works. So it doesn't matter

470
00:26:49.890 --> 00:26:51.680
if it's smelling. Yes. So
we don't know yet. That's

471
00:26:51.680 --> 00:26:53.360
one of the things we
want to figure out in

472
00:26:53.360 --> 00:26:57.620
that followup study, where we
educate kids about smells from

473
00:26:57.680 --> 00:27:00.620
the start from lesson one,
we talk about code quality.

474
00:27:00.620 --> 00:27:04.730
So we hope we hope
that will help. And also

475
00:27:04.730 --> 00:27:07.610
what helps, I think, bode
in professional context, but also

476
00:27:07.610 --> 00:27:11.300
with kids is to make
it very tangible and concrete.

477
00:27:11.930 --> 00:27:14.720
So if you have results,
not the static analysis tool

478
00:27:14.720 --> 00:27:19.040
says that, but Hey, if
you call your variable cat's

479
00:27:19.040 --> 00:27:22.610
instead of Sprite, one, it
will take another kid 10

480
00:27:22.610 --> 00:27:25.190
minutes less to read your
code or something like that.

481
00:27:25.580 --> 00:27:28.760
So there are studies and
more and more studies like

482
00:27:28.760 --> 00:27:32.420
that in software engineering are
being done studies with human

483
00:27:32.840 --> 00:27:35.780
subjects where we really want
to measure, what is the

484
00:27:35.780 --> 00:27:38.330
impact of a code smell?
How bad is it really?

485
00:27:38.330 --> 00:27:41.810
Because we also have these
smells. Yeah. You can spend

486
00:27:41.810 --> 00:27:44.240
the whole afternoon getting rid
of all your smells, but

487
00:27:44.240 --> 00:27:47.270
what if you want for
you, for your customer, for

488
00:27:47.480 --> 00:27:49.970
your developers team, the people
that also have to work

489
00:27:49.970 --> 00:27:52.310
on the source code. So
I think making it very

490
00:27:52.310 --> 00:27:57.800
quantifiable is a way to
make it easier for people

491
00:27:57.800 --> 00:28:00.710
to understand why they need
to do the investment. Both

492
00:28:00.710 --> 00:28:08.600
kids and professional developers Do,
do kids write smelly code

493
00:28:08.600 --> 00:28:12.980
by default, like, like unchecked,
do they do just long

494
00:28:12.980 --> 00:28:16.850
methods or two kids discover
functions on the, Yeah. So

495
00:28:16.850 --> 00:28:19.100
for this data set, we
don't know what they found

496
00:28:19.100 --> 00:28:22.490
on their own. The interface
of scratch of course, is

497
00:28:22.490 --> 00:28:26.000
very encouraging to just try
stuff. And this is contrary

498
00:28:26.000 --> 00:28:30.020
to code ORC with locally
that because that's not a

499
00:28:30.020 --> 00:28:32.960
free playing environment, you get
four blocks and then you

500
00:28:33.050 --> 00:28:35.930
make you do a puzzle.
And if you perform the

501
00:28:35.930 --> 00:28:39.530
puzzle correctly, then you get
another, another block is unlocked.

502
00:28:39.650 --> 00:28:43.040
So there are really, the
features are presented to kids

503
00:28:43.040 --> 00:28:47.420
step by step. Whereas in
scratch, you can just in

504
00:28:47.430 --> 00:28:49.730
school and make a new
block or something like that.

505
00:28:49.730 --> 00:28:51.980
I didn't know any English
because my scratch usually in

506
00:28:51.980 --> 00:28:54.500
Dutch nowadays, but it's some
way to create your own

507
00:28:54.500 --> 00:28:56.210
blocks. You can click it
and you can see what

508
00:28:56.210 --> 00:28:58.790
happens and, Oh, did this,
no, I'm not. I'm guessing

509
00:28:58.790 --> 00:29:01.100
my own block that I
can use. So I don't

510
00:29:01.100 --> 00:29:05.360
know if much of it
is self explored or from

511
00:29:05.360 --> 00:29:08.480
a book or from a
parent or a teacher. That's

512
00:29:08.930 --> 00:29:11.150
yeah. That's hard to measure
by just looking at the

513
00:29:11.150 --> 00:29:14.780
program. That would be really
interesting to understand, but I'm

514
00:29:14.780 --> 00:29:17.450
definitely looking forward to your
follow up, because I think

515
00:29:17.450 --> 00:29:19.940
that, that, that a lot
of us who are, who

516
00:29:19.940 --> 00:29:23.270
are listening to the show
have thought about, you know,

517
00:29:23.300 --> 00:29:25.760
doing volunteer work or teaching
kids, whether it be our

518
00:29:25.760 --> 00:29:27.950
own kids or the kids
that are in our lives

519
00:29:28.580 --> 00:29:32.660
code in various ways, sometimes
scratch sometimes more advanced languages

520
00:29:32.660 --> 00:29:35.000
like Java and C sharp.
But I know that I

521
00:29:35.000 --> 00:29:38.900
haven't thought about including the
concept of smell right off

522
00:29:38.900 --> 00:29:41.830
the bat. Yeah. And so
I said, well, we looked

523
00:29:41.830 --> 00:29:44.980
at lots of programming, material,
grade books that are really

524
00:29:45.040 --> 00:29:49.540
good and explaining programming essentially
do not talk about that.

525
00:29:49.540 --> 00:29:52.960
So for engineering angle. So,
so don't beat yourself up

526
00:29:52.960 --> 00:29:57.310
about not thinking about that
because apparently yeah, teaching programming,

527
00:29:57.490 --> 00:30:00.280
maybe, maybe software engineering has
done a bad job of

528
00:30:00.280 --> 00:30:03.580
marketing itself in a sense,
because apparently there's still a

529
00:30:03.580 --> 00:30:08.050
very clear distinction between learning
to program and learning to

530
00:30:08.050 --> 00:30:10.780
be a software engineer. Right.
I, but yeah, I am

531
00:30:10.780 --> 00:30:14.290
a software engineering researcher, so
I may be slightly biased,

532
00:30:14.290 --> 00:30:19.090
but I would say it's
a difference. Programming includes thinking

533
00:30:19.090 --> 00:30:22.480
about the quality of your
programming testing is programming. It's

534
00:30:22.480 --> 00:30:26.170
not testing and programming. It's
the same thing. But somehow

535
00:30:26.170 --> 00:30:30.280
when we think about teaching
people programming, we're really focused

536
00:30:30.280 --> 00:30:35.530
on making them able to
get stuff done and also

537
00:30:36.040 --> 00:30:40.050
teaching them to reflect on
quality. Hmm. I really liked

538
00:30:40.050 --> 00:30:43.460
that. That was like the
quote of the, of the

539
00:30:43.470 --> 00:30:47.220
show, like, you know, testing
is engineering is part of

540
00:30:47.220 --> 00:30:49.770
software. It shouldn't be treated
as a separate thing. Yeah,

541
00:30:50.730 --> 00:30:55.290
it's true. So the earlier
we start the better. Mm

542
00:30:56.100 --> 00:31:02.850
absolutely. So people can find
you@filene.com, F E L I

543
00:31:02.880 --> 00:31:05.640
E N N E. And
I'll include links to your

544
00:31:05.640 --> 00:31:09.240
blogs, your publications. And they
can all find that, including

545
00:31:09.300 --> 00:31:11.400
public speaking, where you've spoken
and where you're going to

546
00:31:11.400 --> 00:31:13.890
be speaking all on top
of your play, your blog

547
00:31:13.920 --> 00:31:17.010
goes back with public speaking,
going back many, many years.

548
00:31:17.010 --> 00:31:19.290
You're on, you're out there
in the world talking about

549
00:31:19.290 --> 00:31:21.330
this stuff all the time.
Yeah. Yeah. So I spent

550
00:31:21.330 --> 00:31:24.390
most of our research career
doing the same thing, the

551
00:31:24.390 --> 00:31:28.350
same advocating work for Xcel
that I'm doing for scratch.

552
00:31:28.380 --> 00:31:30.690
Now, Excel is a programming
language and we should think

553
00:31:30.690 --> 00:31:34.770
about quality in spreadsheets. And
I'm pivoting a little bit

554
00:31:34.770 --> 00:31:37.350
now towards programming education, but
the core of my work.

555
00:31:37.350 --> 00:31:40.050
So friends new for the
masses, it goes back to

556
00:31:40.050 --> 00:31:44.790
when I started my PhD
degree in 2008. That's fantastic.

557
00:31:45.270 --> 00:31:47.640
Thanks so much for sharing
with me today. Thanks. It

558
00:31:47.640 --> 00:31:49.470
was nice to be on
the show. This has been

559
00:31:49.470 --> 00:31:52.470
another episode of Hanselminutes and
we'll see you again next

560
00:31:52.470 --> 00:31:52.770
week.

