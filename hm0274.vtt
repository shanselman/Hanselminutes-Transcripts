WEBVTT FILE

1
00:00:04.380 --> 00:00:17.490
<inaudible> from hanselminutes.com. It's Hansel
minutes, a weekly discussion with

2
00:00:17.490 --> 00:00:22.470
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:22.470 --> 00:00:28.530
show number two 74. Recorded
live Thursday, July 7th, 2011. Support for

4
00:00:28.530 --> 00:00:31.920
Hansel minutes is provided by
Telerik rad controls, the most

5
00:00:31.920 --> 00:00:35.640
comprehensive suite of components for
windows forms and asp.net web

6
00:00:35.640 --> 00:00:45.120
applications online@wwwdottelerik.com. In this episode,
Scott talks with Eric Meyer about

7
00:00:45.120 --> 00:00:47.820
the notion of JavaScript being
assembly language for the web.

8
00:00:51.240 --> 00:00:53.460
Hi, this is Scott Hanselman.
This is another episode of

9
00:00:53.460 --> 00:00:56.070
Hansel minutes. And today we're
talking to Eric Meyer. He's a

10
00:00:56.070 --> 00:00:59.580
partner architect on the cloud
programmability team. And I was

11
00:00:59.580 --> 00:01:03.060
talking with Eric on email
a couple of days ago,

12
00:01:03.210 --> 00:01:07.410
and he made a very
wise comment. He said, JavaScript

13
00:01:07.620 --> 00:01:10.530
is an assembly language. What
do you mean by that,

14
00:01:10.530 --> 00:01:15.770
Eric? Well, what I mean
by that is that when

15
00:01:15.770 --> 00:01:20.330
you ride, well, let, let,
let me kind of roll

16
00:01:20.330 --> 00:01:23.000
back a little bit. So
if you look at things

17
00:01:23.030 --> 00:01:27.680
like, you know, dope net
or the JVM, or even

18
00:01:27.680 --> 00:01:31.940
x86 you program in a
high level language that gets

19
00:01:31.940 --> 00:01:39.530
compiled into JVM bite goats
or CLR assemblies or x86

20
00:01:40.100 --> 00:01:44.450
binarys, and you run that.
Now, if you look at

21
00:01:44.570 --> 00:01:48.350
JavaScript, it is in some
sense, this same thing, the

22
00:01:49.040 --> 00:01:52.370
people get confused when they,
she, you know, curly braces

23
00:01:52.400 --> 00:01:56.930
and something that looks like
a high level language, but

24
00:01:56.930 --> 00:02:02.360
really in my view, JavaScript
is that shame as a

25
00:02:02.360 --> 00:02:07.100
JVM bite coats or CLR
assemblies. So you take a

26
00:02:07.100 --> 00:02:09.950
high level language and you
map it down to Java

27
00:02:09.950 --> 00:02:15.800
script, and every browser has
a JavaScript VM. So really

28
00:02:15.800 --> 00:02:19.670
Java script, in some sense,
fulfills the promise of ride

29
00:02:19.700 --> 00:02:24.320
once, run everywhere. But it's
just that, like, if you,

30
00:02:24.440 --> 00:02:30.560
if you disassemble a CLR
assembly or a JVM gloss

31
00:02:30.560 --> 00:02:34.220
file, you get something that
looks like assembler language. And

32
00:02:34.220 --> 00:02:37.820
when you look at JavaScript,
you know, people often see

33
00:02:37.820 --> 00:02:41.090
something that looks like a
high level language, and then

34
00:02:41.090 --> 00:02:43.490
they get confused. But really
they're kind of the same

35
00:02:43.490 --> 00:02:49.630
thing. The, the, the postulate
that I've kind of proposed

36
00:02:49.630 --> 00:02:51.920
in my, in my, in
my blog post on this

37
00:02:51.920 --> 00:02:56.990
topic was that we should
not be looking at the,

38
00:02:57.020 --> 00:03:00.370
what comes down to the
browser for, for reference at

39
00:03:00.370 --> 00:03:04.060
all. Basically it's simply a,
it could be a mess.

40
00:03:04.090 --> 00:03:05.680
It could be a mess
of JavaScript. It could be

41
00:03:05.680 --> 00:03:09.700
a mess of markup. It
really just doesn't matter. And

42
00:03:09.730 --> 00:03:13.000
when I, when I threw
that out there, some people

43
00:03:13.000 --> 00:03:16.660
immediately understood what I meant.
The idea that the development

44
00:03:17.170 --> 00:03:20.350
language, the development environment could
be in any number of,

45
00:03:20.650 --> 00:03:24.970
of, of, of languages, of
development styles, but other people

46
00:03:25.000 --> 00:03:28.000
kind of, I feel confused
the idea of minification and

47
00:03:28.000 --> 00:03:33.220
compression, and I'm not quite
sure how to get people

48
00:03:33.220 --> 00:03:36.040
straight on this. I kind
of felt like the transport

49
00:03:36.040 --> 00:03:38.530
mechanism and the, and the,
and the minimum minification and

50
00:03:38.530 --> 00:03:42.040
the compression is one thing
like HTML is all being

51
00:03:42.070 --> 00:03:44.770
zipped up. And no one,
no one sees that because

52
00:03:44.770 --> 00:03:48.610
when you say view source,
it's being unzipped, but, you

53
00:03:48.610 --> 00:03:52.080
know, help me understand this
idea that, I mean, I'm

54
00:03:52.090 --> 00:03:54.850
talking about more than just
minification and compression. I'm talking

55
00:03:54.850 --> 00:03:59.350
about the, the environment that
you write it in might

56
00:03:59.350 --> 00:04:03.450
not even be HTML and
CSS. That is correct. So

57
00:04:03.690 --> 00:04:07.800
let, let, let's start like
really simple, right? If you

58
00:04:07.800 --> 00:04:12.030
look at Java script and,
you know, you look at

59
00:04:12.030 --> 00:04:15.720
say, you know, popular Brook
JavaScript, the good parts, what

60
00:04:15.720 --> 00:04:18.150
you will see there is
that in order to ride

61
00:04:18.150 --> 00:04:22.320
JavaScript, if you go beyond
simple, you know, both in

62
00:04:22.320 --> 00:04:26.190
click handler or, you know,
simple things like that, you

63
00:04:26.190 --> 00:04:28.650
have to do, do a
lot of boilerplate code. So

64
00:04:28.740 --> 00:04:32.910
in order to simulate namespaces
in order to simulate classes,

65
00:04:32.910 --> 00:04:36.810
in order to do private
fields, there's a lot of

66
00:04:36.840 --> 00:04:41.100
boilerplate code, which is very
similar to assembly code. So

67
00:04:41.100 --> 00:04:45.420
JavaScript has very few primitives.
It has very powerful primitives,

68
00:04:45.450 --> 00:04:49.770
but you have to kind
of build everything from scratch.

69
00:04:50.340 --> 00:04:53.490
And so that's why people
have like a lot of

70
00:04:53.490 --> 00:04:57.300
conventions to ride JavaScript. But
now you can say, well,

71
00:04:57.300 --> 00:04:59.790
why do you ride these
things by hand? Why don't

72
00:04:59.790 --> 00:05:04.170
you have some higher level
language that, that generates those

73
00:05:04.170 --> 00:05:08.220
things? And, and so that's
that this kind of bootstrap

74
00:05:08.220 --> 00:05:12.210
that you get, which is
different than many fication, because

75
00:05:12.210 --> 00:05:15.570
now you're kind of using
a compiler to generate the

76
00:05:15.570 --> 00:05:21.150
boilerplate for you. Now, even
if you look at the

77
00:05:21.150 --> 00:05:26.460
magnification, you can also view
debt as some kind of

78
00:05:27.240 --> 00:05:31.140
compilation where the source language
and the target language are

79
00:05:31.140 --> 00:05:35.820
the same. For example, a
Google has dual gold closure,

80
00:05:35.880 --> 00:05:41.520
which is a JavaScript mini
fire and optimizer, which takes

81
00:05:41.520 --> 00:05:44.880
your JavaScript and, you know,
munches it and kind of,

82
00:05:44.910 --> 00:05:47.310
you know, does all kinds
of things to it just

83
00:05:47.760 --> 00:05:50.400
in very much the same
way as a compiler does.

84
00:05:50.400 --> 00:05:52.260
And the fact that, you
know, the short language and

85
00:05:52.260 --> 00:05:57.090
the target language are the
same. There's not really mattered.

86
00:05:57.110 --> 00:06:01.040
In fact, there's many languages,
for example, hashcode, where the

87
00:06:01.040 --> 00:06:04.280
compiler works exactly like that.
You start out with the

88
00:06:04.280 --> 00:06:09.770
hashcode program and then the
compiler in multiple fascist Sterns,

89
00:06:09.800 --> 00:06:14.090
that's programmed into smaller and
smaller ship sets, or more

90
00:06:14.090 --> 00:06:17.120
efficient a version of your
program. And then in the

91
00:06:17.120 --> 00:06:20.660
end you still have a
valid actual program, but it's

92
00:06:20.660 --> 00:06:22.910
in a, you know, it's
more efficient and in a

93
00:06:22.910 --> 00:06:28.190
smaller subset. And so it's
going to be, you know,

94
00:06:28.220 --> 00:06:31.460
further compiled or is easier
to run or, you know,

95
00:06:32.060 --> 00:06:36.020
whatever. So, so I think
the magnification, if you just

96
00:06:36.020 --> 00:06:39.530
do pure minification and obfuscation,
that's gonna, you know, the

97
00:06:39.530 --> 00:06:44.060
most trivial way of doing
compilation. But I do think

98
00:06:44.060 --> 00:06:49.970
that that's also shows the
fact that people really, you

99
00:06:49.970 --> 00:06:53.450
know, if you, if you
do view shores, the JavaScript

100
00:06:53.450 --> 00:06:56.630
that you see is not
meant for, for human consumption,

101
00:06:56.630 --> 00:06:59.480
it's really meant for the
VM that runs in a

102
00:06:59.480 --> 00:07:05.830
browser to run it. But
don't, don't you think that

103
00:07:05.860 --> 00:07:08.530
the, one of the reasons
that JavaScript was so successful

104
00:07:08.530 --> 00:07:11.530
and why JavaScript took off
was the, the very idea

105
00:07:11.530 --> 00:07:15.340
of used source. I mean,
people have said that, well,

106
00:07:15.370 --> 00:07:19.420
yes, everything should be minified
because it detours D compilation,

107
00:07:19.720 --> 00:07:22.900
but it's really only a
deterrent. It's not a complete

108
00:07:22.900 --> 00:07:26.230
obfuscation solution. It's not like
one would really put their

109
00:07:26.230 --> 00:07:30.190
intellectual property in JavaScript, minify
it. And then think that

110
00:07:30.190 --> 00:07:34.180
it was, they were protected
and all at the same

111
00:07:34.180 --> 00:07:37.330
time, someone said, well, I
could say 50 gigabytes a

112
00:07:37.330 --> 00:07:40.120
month, but if you do
the math, that's like 60 cents

113
00:07:40.120 --> 00:07:43.360
on Amazon. So the, the
bandwidth argument falls down as

114
00:07:43.360 --> 00:07:46.420
well. That seems to be
no good reason other than

115
00:07:47.800 --> 00:07:50.590
maybe perception of speed on
the client to go on

116
00:07:50.590 --> 00:07:55.090
minify JavaScript. And when doing
that, you lose any benefit

117
00:07:55.090 --> 00:08:01.030
of, of teaching the audience.
Yeah. Well, so I think

118
00:08:01.540 --> 00:08:06.550
doing few shores might not
be the best way to

119
00:08:07.480 --> 00:08:13.050
teach people about your program.
So I think that this,

120
00:08:13.080 --> 00:08:16.540
the same, what you see
a lot of people with

121
00:08:16.840 --> 00:08:20.080
Dalton assemblies, for example, or
they kind of use some

122
00:08:20.080 --> 00:08:25.600
tools from decompensation tool. ReSharper,
you know, don't not reflect,

123
00:08:25.640 --> 00:08:29.950
or now ReSharper has a
tool like that to, in

124
00:08:29.950 --> 00:08:35.530
order to understand, you know,
the coat what's going on.

125
00:08:37.600 --> 00:08:40.240
So I think the, the
source code and the code

126
00:08:40.270 --> 00:08:43.990
that you transport to the
machine are two Def different

127
00:08:43.990 --> 00:08:46.150
things. So I think, you
know, if you want people

128
00:08:46.150 --> 00:08:51.490
to, you know, learn from
your coach, why have a

129
00:08:51.490 --> 00:08:53.530
few shorts, why don't you
kind of, you know, have

130
00:08:53.560 --> 00:08:57.210
that go somewhere up with,
you know, Coleman or, you

131
00:08:57.210 --> 00:09:02.040
know, in some GitHub repository
where people can actually download

132
00:09:02.040 --> 00:09:04.980
it and play with it
and there's test case essential.

133
00:09:04.980 --> 00:09:09.660
And I think, you know,
doing view shores is more

134
00:09:09.660 --> 00:09:13.440
an accident of, I don't
know if that was something

135
00:09:13.440 --> 00:09:17.520
that the browsers hats, but,
and then people may use

136
00:09:17.520 --> 00:09:21.450
it to learn about stuff,
but in some sense, that's

137
00:09:21.450 --> 00:09:26.220
the same as, you know,
looking, you know, looking at

138
00:09:26.440 --> 00:09:29.490
as a DLL or something
like that. So I think

139
00:09:29.760 --> 00:09:34.740
you should separate those things
out and the browser, you

140
00:09:34.740 --> 00:09:39.780
know, it loads it's really
think of the browser as

141
00:09:39.810 --> 00:09:43.830
a, it's a regular VM
that loads normally, you know,

142
00:09:43.830 --> 00:09:49.950
things come packages in, in,
in <inaudible> or in collage

143
00:09:49.950 --> 00:09:54.990
files, the allows. And now
it's gone, you know, as,

144
00:09:55.150 --> 00:09:59.460
as a string, that's got
loaded and executed, but that

145
00:09:59.460 --> 00:10:03.720
string that gets loaded is
not the fact that the

146
00:10:03.720 --> 00:10:06.630
human can look at that
or view shores. I think

147
00:10:06.630 --> 00:10:09.960
that's just an accident. That's
not the purpose of that.

148
00:10:10.940 --> 00:10:13.750
Hmm. That's that's a very
interesting statement that views view

149
00:10:13.760 --> 00:10:18.650
source is an accident. So
there's the issue of combining

150
00:10:18.650 --> 00:10:22.880
and minification and basically post
build steps. Of course, that

151
00:10:22.880 --> 00:10:26.750
prepare stuff for transport. Certainly
we could, you know, zip

152
00:10:26.750 --> 00:10:31.190
up the entire website and
give it a new extension

153
00:10:31.190 --> 00:10:33.890
and, you know, call it.app
or something. And it would

154
00:10:33.890 --> 00:10:37.190
be interesting. And, and it
would run within a little

155
00:10:37.190 --> 00:10:40.760
virtual machine, but taking the
conversation in a slightly different

156
00:10:40.760 --> 00:10:44.960
way. Some, some people in
the, in the comments on

157
00:10:44.960 --> 00:10:47.570
the blog post that I
put up about this, someone

158
00:10:47.570 --> 00:10:50.240
actually about halfway through said,
this is the return of

159
00:10:50.240 --> 00:10:54.110
project Volta. And that's that,
that's something that you were

160
00:10:54.110 --> 00:10:56.690
in involved in. Can you
tell me what that is

161
00:10:56.690 --> 00:11:00.140
and why that person would
bring up project Volta? All

162
00:11:00.140 --> 00:11:03.500
right. Yes. I can definitely
talk about that. So the

163
00:11:03.560 --> 00:11:09.830
idea of Volta was exactly
what I just described. You

164
00:11:09.830 --> 00:11:14.450
look at the Java script
and you say, Oh, well,

165
00:11:14.450 --> 00:11:20.240
that's just one place where
I can execute coats. Just

166
00:11:20.240 --> 00:11:23.900
like x86 is a place
where I can execute goats

167
00:11:24.050 --> 00:11:27.830
or Silverlight, there's a place
where I can execute code

168
00:11:27.950 --> 00:11:34.370
or, you know, they, whatever
targets you have. So what

169
00:11:34.370 --> 00:11:39.790
we did this week to
don't net assemblies and wrote

170
00:11:39.800 --> 00:11:42.140
a jets, just knock your
ride at jet that goes

171
00:11:42.140 --> 00:11:45.650
through x86 or arm. And
we wrote a jitter that

172
00:11:45.650 --> 00:11:52.670
would take that's ill and
Git that into JavaScript. And

173
00:11:54.250 --> 00:11:58.000
so really that literally took
the idea of JavaScript is

174
00:11:58.000 --> 00:12:03.730
in assembly language, through to
its logical conclusion. And there's

175
00:12:03.730 --> 00:12:06.970
really no difference between, you
know, rising a jet that

176
00:12:06.970 --> 00:12:10.930
they ex ill and compiles
it to arm or rising

177
00:12:10.930 --> 00:12:14.260
a Git that takes IOL
and combining it to JavaScript.

178
00:12:14.950 --> 00:12:19.990
And I would even argue
that JavaScript as an assembly

179
00:12:19.990 --> 00:12:26.140
language has a lot of
advantages for the compiler riser,

180
00:12:26.140 --> 00:12:30.670
because it has, it's very,
it's a, like a very

181
00:12:30.670 --> 00:12:34.600
high level assembly language. It
has closures, it has exception

182
00:12:34.600 --> 00:12:39.250
handling. So even though you
have to go out, for

183
00:12:39.250 --> 00:12:44.680
example, the semantics of dotnet
stipes and, you know, construct

184
00:12:44.680 --> 00:12:48.190
our calls and interfaces and
costs and so on. There's

185
00:12:48.190 --> 00:12:51.490
many, many things where you
don't have to go them

186
00:12:51.520 --> 00:12:56.980
in a low level. Let's
take, for example, if you

187
00:12:56.980 --> 00:13:01.570
want to do exceptions, if
you, if you're, if you're

188
00:13:01.570 --> 00:13:05.320
targeting x86, it has no
notion of exceptions. So you

189
00:13:05.320 --> 00:13:08.740
have to go to everything
yourself at the very low

190
00:13:08.740 --> 00:13:13.990
level. When you target JavaScript,
you can, if you're lucky

191
00:13:14.020 --> 00:13:17.020
you can target JavaScript exceptions.
And now you can kind

192
00:13:17.020 --> 00:13:22.090
of layer your acception mechanism
as defined by the aisle

193
00:13:22.540 --> 00:13:28.900
or the match specification and
map that into JavaScript. A

194
00:13:28.900 --> 00:13:33.130
seminar project is, and you
were playing with that too,

195
00:13:33.700 --> 00:13:38.530
as you said, it's, it's
Google GWT where they take

196
00:13:40.150 --> 00:13:44.920
Java and they compile that
to JavaScript and trying to

197
00:13:44.920 --> 00:13:51.400
maintain the semantics of that.
So this, this idea is

198
00:13:51.790 --> 00:13:55.450
why it's a widespread and
other great example. It's a

199
00:13:55.450 --> 00:14:02.200
script sharp. This is a
project that Nickeel, that's here

200
00:14:02.200 --> 00:14:08.530
at Microsoft. It's slightly different
than GWT and Volta. Where

201
00:14:09.100 --> 00:14:13.060
there you take and script
sharp. There's a language as

202
00:14:13.060 --> 00:14:16.420
Syntex that looks like C
sharp, but that's compiled to

203
00:14:16.420 --> 00:14:19.810
JavaScript. So it's, it's like
a new programming language. And

204
00:14:19.810 --> 00:14:24.370
th there's a whole slew
of examples, like that's coffee

205
00:14:24.370 --> 00:14:28.900
script. I think it's at
this point, a very popular

206
00:14:29.800 --> 00:14:32.860
example of that, where you
have like a Python like

207
00:14:32.890 --> 00:14:38.560
syntax and you compile that
into, into JavaScript. And then

208
00:14:38.560 --> 00:14:43.000
there's objective J and you
know, there's, there's many, many,

209
00:14:43.000 --> 00:14:44.950
I think this is the,
the whole thing at the

210
00:14:44.950 --> 00:14:49.810
moment where people are taking
either existing languages and trying

211
00:14:49.810 --> 00:14:53.870
to maintain the semantics of
those languages, mapping them to

212
00:14:53.870 --> 00:14:58.340
JavaScript as an assembly language,
or have a slightly higher,

213
00:15:00.470 --> 00:15:04.850
a slightly higher level language
that maintains much of the

214
00:15:04.850 --> 00:15:11.030
JavaScript, you know, styles, genetics.
Let me give you an

215
00:15:11.030 --> 00:15:15.290
example of where things get
difficult with the ill, or

216
00:15:16.040 --> 00:15:22.610
when you're doing Java, Java
script array are not really

217
00:15:22.610 --> 00:15:27.590
like regular dotnet to race.
You can, you know, put

218
00:15:27.590 --> 00:15:31.100
in a value note at
a numeric index. There's no,

219
00:15:31.430 --> 00:15:34.850
you know, array, bounce jacking.
You can, you know, put

220
00:15:34.850 --> 00:15:39.140
something, you know, you can
access out of bounds elements

221
00:15:39.140 --> 00:15:42.470
and so on. So if
you're trying to maintain the

222
00:15:42.470 --> 00:15:46.100
dotnet as semantics of arrays,
you have to do a

223
00:15:46.100 --> 00:15:49.760
lot of work. And just
like when you're targeting regular

224
00:15:49.760 --> 00:15:52.520
assembler language, you have to
do a lot of work

225
00:15:52.520 --> 00:15:56.960
to, to map the high
level concepts onto the lower

226
00:15:56.960 --> 00:15:59.510
level things. So what people
do is they say, well,

227
00:15:59.510 --> 00:16:02.780
let's try to maintain a
lot of the JavaScript semantics,

228
00:16:02.780 --> 00:16:06.080
but, but put some more
sugar on top. So those

229
00:16:06.080 --> 00:16:09.230
are kind of, I think,
two different approaches where, you

230
00:16:09.230 --> 00:16:12.230
know, either you have an
existing language with its semantics

231
00:16:12.230 --> 00:16:15.230
that you met on through
JavaScript or where you're saying,

232
00:16:15.230 --> 00:16:22.340
well, let's maintain some of
the JavaScript flavor. And, but,

233
00:16:22.390 --> 00:16:27.700
but built a higher level
language on top. This episode

234
00:16:27.700 --> 00:16:30.550
of Hansel minutes is brought
to you by careers. 2.0

235
00:16:31.330 --> 00:16:33.550
careers, 2.0 is a new
service by our friends at

236
00:16:33.550 --> 00:16:37.120
stack overflow. You're probably all
familiar with stack overflow. The

237
00:16:37.120 --> 00:16:42.010
online QA resource dedicated specifically
to programmers and programming related

238
00:16:42.010 --> 00:16:46.420
topics. Well, the team at
stack overflow created careers 2.0

239
00:16:46.450 --> 00:16:49.480
to provide you with access
to great jobs and introduce

240
00:16:49.480 --> 00:16:51.040
you to a bunch of
great companies that you might

241
00:16:51.040 --> 00:16:53.830
consider working for, even if
you're not currently looking for

242
00:16:53.830 --> 00:16:57.580
a job, think of careers.
2.0 is a programmer profile,

243
00:16:58.330 --> 00:17:01.000
gives you a platform to
show that you're awesome by

244
00:17:01.000 --> 00:17:05.710
featuring your proudest contributions to
stack overflow, GitHub SourceForge Bitbucket,

245
00:17:05.710 --> 00:17:09.250
anything programming related, you can
even add your favorite programming

246
00:17:09.250 --> 00:17:13.750
books from amazon.com profiles on
careers. 2.0 are free. They're

247
00:17:13.750 --> 00:17:17.140
easy to get started, especially
by importing your LinkedIn profile.

248
00:17:18.160 --> 00:17:23.170
However, there's one catch profiles
on career 2.0 invite only.

249
00:17:24.010 --> 00:17:25.870
They did this to keep
out the spam and have

250
00:17:25.870 --> 00:17:29.800
a high quality environment. Fortunately,
for you as a Hansel

251
00:17:29.800 --> 00:17:32.800
minutes listener, I've got your
back head on over to

252
00:17:32.800 --> 00:17:38.950
careers dot stack overflow.com/h M
to accept your invitation today,

253
00:17:38.950 --> 00:17:45.220
once again, that's careers dot
stack, overflow.com/h M. I hope

254
00:17:45.220 --> 00:17:50.820
you like it. Why, why
does given how quirky JavaScript

255
00:17:50.820 --> 00:17:52.980
is given how unusual it
is? I mean, people have

256
00:17:52.980 --> 00:17:56.310
said that, that JavaScript just
wasn't designed to kind of

257
00:17:56.310 --> 00:18:00.210
organically grew given that the
JavaScript that I kind of

258
00:18:00.210 --> 00:18:03.390
hated in, in the early
two thousands in the late

259
00:18:03.390 --> 00:18:07.110
nineties is so much different
than the JavaScript today. Some

260
00:18:07.110 --> 00:18:12.180
people feel that JavaScript in
its kind of organic, strange

261
00:18:12.210 --> 00:18:14.580
state is a beautiful thing.
And other people say, well,

262
00:18:14.580 --> 00:18:17.100
this is just offensive. I
have to remember 20 different

263
00:18:17.280 --> 00:18:20.940
hacks in order to use
it. Why not use a

264
00:18:20.940 --> 00:18:25.860
language that was properly designed?
Why not forget about JavaScript?

265
00:18:25.860 --> 00:18:29.130
Why didn't Volta and script
sharp take off. I mean,

266
00:18:29.130 --> 00:18:31.260
they have their fans. I
know that script sharp is

267
00:18:31.260 --> 00:18:33.660
still actively developed. And I
know that there are a

268
00:18:33.660 --> 00:18:36.390
number of projects that have
been written entirely in script

269
00:18:36.390 --> 00:18:38.820
sharp, but I would have
to say that it hasn't

270
00:18:38.820 --> 00:18:45.560
really caught fire. Why not?
Yes. So there, that's a

271
00:18:45.560 --> 00:18:48.800
very good question. I think
there's, there's various answers to

272
00:18:48.800 --> 00:18:54.140
that. I think if you
look at GWT, I think

273
00:18:54.140 --> 00:18:59.210
debts that's, that's very successful.
That's used quite a lot.

274
00:19:00.200 --> 00:19:02.960
And if you look at,
but again, if you, if

275
00:19:02.960 --> 00:19:04.850
you, if you look at
this thing as a, as

276
00:19:04.850 --> 00:19:09.170
a compiler or jet, you
know, Google has like a

277
00:19:09.560 --> 00:19:11.510
large team working on that.
I think, you know, if

278
00:19:11.510 --> 00:19:13.910
you go to the size,
I think there's like about

279
00:19:13.970 --> 00:19:18.050
30 submits or student project.
So you have to do,

280
00:19:18.200 --> 00:19:21.020
do you think of that
in the shame of vein,

281
00:19:21.050 --> 00:19:25.280
as you know, the CLR
team over here at Microsoft,

282
00:19:25.280 --> 00:19:29.360
or maybe the JVM team
over at sonar Oracle now

283
00:19:29.660 --> 00:19:31.910
it's really, you know, you're
right. Or, or the C

284
00:19:31.910 --> 00:19:36.110
sharp team you're really rising
a compiler or jet, which

285
00:19:36.110 --> 00:19:39.680
is not, you know, a
simple thing because you're, it

286
00:19:39.710 --> 00:19:42.740
there's, as I said, there's
no real difference between targeting

287
00:19:42.770 --> 00:19:47.270
arm or x86 or JavaScript.
So it's the amount of

288
00:19:47.270 --> 00:19:53.720
work in order to do
that is pretty significant. Now

289
00:19:53.720 --> 00:19:59.750
what happened, for example, with,
if you look at volt

290
00:19:59.750 --> 00:20:03.110
on, for example, one of
the reactions that people have

291
00:20:03.710 --> 00:20:06.860
is they are looking at
to generate the JavaScript and

292
00:20:06.860 --> 00:20:11.990
they say, Oh my goodness,
that JavaScript Luke's really complex

293
00:20:12.020 --> 00:20:16.310
and complicated. And, you know,
they're then afraid that you're

294
00:20:16.310 --> 00:20:19.850
losing performance and so on.
But what you have to

295
00:20:19.850 --> 00:20:24.020
keep in mind is that
that's complexity is there because

296
00:20:24.020 --> 00:20:28.310
you want to maintain the
semantics of the, of the

297
00:20:28.310 --> 00:20:33.290
CLR. So all that code
that you generate is there

298
00:20:33.290 --> 00:20:36.170
for a reason, it would
be the Shea image. If

299
00:20:36.170 --> 00:20:39.410
you would look at the
output of the CLR jets,

300
00:20:39.530 --> 00:20:42.680
you know, the x86 machine
code and say, wow, that

301
00:20:42.680 --> 00:20:45.800
is complicated machine codes. If
I would write machine code

302
00:20:45.800 --> 00:20:49.480
by hand directly, I do
it much shorter, of course,

303
00:20:49.510 --> 00:20:55.030
but you're not getting the
same, you know, the same

304
00:20:55.060 --> 00:21:00.100
value out of that. So
it's a trade off now

305
00:21:00.130 --> 00:21:04.510
as script sharp Duke and,
and coffee script. And those

306
00:21:04.510 --> 00:21:08.890
things take a more pragmatic
approach where they say, we're

307
00:21:08.890 --> 00:21:15.100
not trying to maintain the
semantics off an existing language,

308
00:21:15.400 --> 00:21:18.580
but we're, we're defining a
new language such that, you

309
00:21:18.580 --> 00:21:22.270
know, the JavaScript that you
generate is not that far

310
00:21:22.270 --> 00:21:26.920
removed from the shortcodes. And
so the kind of the

311
00:21:26.920 --> 00:21:32.490
difference is, is less. So
you're saying, you're saying that

312
00:21:32.490 --> 00:21:35.670
the, the distance that the,
the, the intellectual leap that

313
00:21:35.670 --> 00:21:37.680
has to be made from
what I'm writing to, what

314
00:21:37.680 --> 00:21:39.300
is output it is, is
less, there's more of a,

315
00:21:39.300 --> 00:21:42.780
one to one mapping. It's,
it's not so much the

316
00:21:42.780 --> 00:21:45.930
one to one mapping, but
it's, it's not that you're

317
00:21:48.090 --> 00:21:51.000
let, let, let me say,
let me give you a

318
00:21:51.000 --> 00:21:55.200
concrete example. So in the
CLR, you have abstract based

319
00:21:55.200 --> 00:22:02.310
dives interfaces, inheritance. There's a
certain semantics of how construct

320
00:22:02.310 --> 00:22:05.430
or calls are made. And
in order to maintain that

321
00:22:05.430 --> 00:22:08.970
semantics, you have to, and
JavaScript has approached a dog

322
00:22:08.970 --> 00:22:13.590
based inheritance. So now in
order to, to guarantee the

323
00:22:13.590 --> 00:22:16.290
same semantics as when you're,
you know, when you run

324
00:22:16.290 --> 00:22:20.100
your C sharp program football
through JavaScript or compile to

325
00:22:20.100 --> 00:22:24.180
x86, you have to generate
some fairly or think of

326
00:22:24.240 --> 00:22:28.410
generics. For example, JavaScript doesn't
have generics, so you have

327
00:22:28.410 --> 00:22:34.710
to generate some fairly hairy
JavaScript. And so if you

328
00:22:34.710 --> 00:22:38.550
look at what other J
and if so, so the

329
00:22:38.550 --> 00:22:43.200
more, you know, you're trying
to maintain an existing language,

330
00:22:43.230 --> 00:22:45.660
the, the bigger, the distances.
It's not that it's one

331
00:22:45.660 --> 00:22:49.110
to one, but it's, it's
like, you know, JavaScript has

332
00:22:49.110 --> 00:22:54.450
certain assumptions about while it's
based type system is. And

333
00:22:54.450 --> 00:22:57.570
so if you're, if your
layer language on top of

334
00:22:57.570 --> 00:23:00.660
that, that's kind of maintains
that same flavor. So it's

335
00:23:00.660 --> 00:23:04.830
like, you know, it's a,
it's an prototype based inheritance

336
00:23:05.400 --> 00:23:14.040
then that that's that installation,
this is less convoluted. It's

337
00:23:14.040 --> 00:23:18.420
less, it's less dramatic. Why
do you think that GWT

338
00:23:18.420 --> 00:23:22.650
has become successful? At least
within, with certainly within Google,

339
00:23:22.650 --> 00:23:25.230
many of their applications are
written in GWT. Also many

340
00:23:25.230 --> 00:23:30.780
are written enclosure while people
on the Microsoft side look

341
00:23:30.780 --> 00:23:34.080
at layers of abstraction like
web forms and, and lament

342
00:23:34.080 --> 00:23:36.990
it. I, I drew a
comparison in my, in my

343
00:23:36.990 --> 00:23:40.410
blog posts that resonated with
some people, but other people

344
00:23:40.410 --> 00:23:43.530
thought I was being intellectually
dishonest. When I said that

345
00:23:44.340 --> 00:23:46.820
this is similar to view
state. And in that, you

346
00:23:46.820 --> 00:23:50.330
know, some large blob comes
down that provides value, but

347
00:23:50.330 --> 00:23:55.280
that value is unclear. I
either accept that this is

348
00:23:55.280 --> 00:23:57.620
there for a reason, or
I lament the fact that

349
00:23:57.620 --> 00:24:00.470
it's there. And I think
that when I see a

350
00:24:00.470 --> 00:24:04.730
giant blob of, of state
management JavaScript code, I am

351
00:24:04.730 --> 00:24:08.480
reminded of view state. And
I feel like certainly not

352
00:24:08.480 --> 00:24:11.300
as a few state apologist,
but someone who says that

353
00:24:11.360 --> 00:24:14.330
someone realizes that view state
provided a purpose and a

354
00:24:14.330 --> 00:24:19.490
value. It seems like web
forms could be expressed in

355
00:24:19.490 --> 00:24:22.480
the same way that, that
GWT and these other service

356
00:24:23.150 --> 00:24:25.940
things are, maybe it was
before its time, or maybe

357
00:24:25.940 --> 00:24:28.910
if it was, maybe it
was, I'm not complete enough

358
00:24:28.910 --> 00:24:32.110
to solve the problem. Yeah.
So I think you w

359
00:24:32.140 --> 00:24:35.590
you're touching up on some
kind of a very interesting

360
00:24:36.220 --> 00:24:40.240
dilemma, really. So the thing
is like when you're abstracting

361
00:24:40.240 --> 00:24:43.720
from the underlying, so when
you're assuming JavaScript is in

362
00:24:43.720 --> 00:24:47.520
assembly language, you're making certain
assumptions that, you know, you're

363
00:24:47.530 --> 00:24:53.230
trusting the compiler to do
work for you. And it's

364
00:24:53.230 --> 00:24:56.430
the same mission. Like when
you're using managed codes, you're,

365
00:24:56.430 --> 00:24:59.800
you're saying, okay, I'm trusting
the system to do garbage

366
00:24:59.800 --> 00:25:03.160
collection for me and jetting
for me. So you're really

367
00:25:03.160 --> 00:25:06.760
kind of, you know, giving
thrust into the, the compiler

368
00:25:06.760 --> 00:25:10.750
and the runtime and, and
it takes care of details

369
00:25:10.780 --> 00:25:15.280
that you don't want to
think about. Now, you can

370
00:25:15.280 --> 00:25:18.370
take the shame analogy in,
in the managed worlds where

371
00:25:18.370 --> 00:25:20.980
people are saying, Oh, but,
you know, I want to

372
00:25:20.980 --> 00:25:23.050
use C or C plus
plus because I want to

373
00:25:23.050 --> 00:25:26.890
have full control over my
memory allocation. I don't want

374
00:25:26.890 --> 00:25:30.670
to rely on a garbage
collector. I, I want to

375
00:25:30.670 --> 00:25:33.520
kind of ride glows through
the metal. And I think

376
00:25:33.520 --> 00:25:37.630
you see the shame thing
here, but JavaScript it's like,

377
00:25:37.690 --> 00:25:40.840
you know, if you're using
something like GWT, you're really

378
00:25:40.840 --> 00:25:46.360
giving away control of a
lot of these aspects to

379
00:25:46.360 --> 00:25:50.890
the compiler where some people
won't have more full control,

380
00:25:50.890 --> 00:25:53.020
they want to be closer
to the metal. So I

381
00:25:53.020 --> 00:25:57.700
think you will have always
have two camps where, you

382
00:25:57.700 --> 00:26:02.710
know, certain people for, you
know, won't, or, you know,

383
00:26:02.740 --> 00:26:06.280
needs to have full control
and, and, and need to

384
00:26:06.280 --> 00:26:09.440
be close to the metal,
whereas others, you know, they,

385
00:26:09.440 --> 00:26:13.570
they, they can work in
a high level language. Now,

386
00:26:13.600 --> 00:26:16.720
I personally believe that if
you look at something like

387
00:26:16.990 --> 00:26:21.430
GWT or what we tried
with Volta, or with script

388
00:26:21.430 --> 00:26:24.250
sharp, is that when you
have a good compiler, just

389
00:26:24.250 --> 00:26:28.060
like with, with C there's
very few people that can

390
00:26:28.060 --> 00:26:30.910
ride at assembly language that
kind of can compete with,

391
00:26:31.150 --> 00:26:34.780
with a good compiler. And
especially, you know, you cannot

392
00:26:34.780 --> 00:26:38.440
beat the, the productivity aspect.
I mean, you, you can

393
00:26:38.440 --> 00:26:41.560
ride out, you can write
more lines of code and

394
00:26:41.560 --> 00:26:44.850
you can be more productive
in a higher level language.

395
00:26:46.350 --> 00:26:49.170
And so it's, it's that
trade off. So sometimes, you

396
00:26:49.170 --> 00:26:52.440
know, and, and just like,
you know, sometimes maybe even

397
00:26:52.440 --> 00:26:54.420
if you're using C sharp,
you might want to write

398
00:26:54.420 --> 00:26:57.540
some, some things in native
code and interrupt with that.

399
00:26:58.020 --> 00:26:59.970
I think, you know, you
will see the same thing

400
00:27:00.030 --> 00:27:03.630
in, in when you're using
JavaScript that you might want

401
00:27:03.630 --> 00:27:08.340
to, you know, dropped down
into Java script to do

402
00:27:08.340 --> 00:27:12.390
something that's going to perform
as critical and, and do

403
00:27:12.390 --> 00:27:15.630
to kind of more higher
level programming in a higher

404
00:27:15.630 --> 00:27:20.230
level language. So do you,
do you think that that,

405
00:27:20.250 --> 00:27:24.830
that the development world online
is, is splitting between those

406
00:27:24.830 --> 00:27:27.830
that wish to write assembler
or in this case, JavaScript

407
00:27:27.830 --> 00:27:31.130
and jQuery, and those who
want a higher level language,

408
00:27:31.490 --> 00:27:34.070
or do you think it's
split more in terms of

409
00:27:34.160 --> 00:27:37.730
there are applications and there
are websites and people will

410
00:27:37.730 --> 00:27:40.400
write their websites and HTML
and JavaScript, and people will

411
00:27:40.400 --> 00:27:45.980
write their applications in something
else. That's another great question.

412
00:27:47.780 --> 00:27:50.660
I think so, as I
said, I think there's there.

413
00:27:50.690 --> 00:27:55.760
This just like a very
multifaceted question, because if you

414
00:27:55.760 --> 00:28:02.120
look at JavaScript, people look
at JavaScript and they, it

415
00:28:02.120 --> 00:28:04.730
looks like a very high
level language. They see curly

416
00:28:04.730 --> 00:28:09.140
braces, these they see functions
and so on. So when,

417
00:28:09.590 --> 00:28:11.960
when we did Volta and
I'm pretty sure that the

418
00:28:11.960 --> 00:28:16.490
GWT people and, and, and
the script chart, people get

419
00:28:16.490 --> 00:28:19.100
the same remarks, do they
say, this is, this is

420
00:28:19.100 --> 00:28:23.000
wrong. You're taking, you know,
ill, which is a low

421
00:28:23.000 --> 00:28:26.090
level language, and you're translating
it into a high level

422
00:28:26.090 --> 00:28:31.040
language, but, you know, Luke's
are deceptive because even if

423
00:28:31.040 --> 00:28:34.640
you look at Microsoft and
Microsoft at the ILD adult

424
00:28:34.640 --> 00:28:39.530
nets, ill or Java class
files, that Luke's like a

425
00:28:39.530 --> 00:28:44.060
low level language, but really,
you know, the fact that

426
00:28:44.060 --> 00:28:48.320
we have things like net
to reflect, or really the

427
00:28:48.320 --> 00:28:50.840
aisle, it looks like a
sham blur, but it's just

428
00:28:51.580 --> 00:28:55.520
a different representation of a
C-sharp or official basic program,

429
00:28:55.850 --> 00:28:59.540
because you can decompile it
very easily. It's just, it's

430
00:28:59.540 --> 00:29:03.170
a different view of, of
the same high level code.

431
00:29:03.170 --> 00:29:07.040
So I would argue that
Java class files or assemblies

432
00:29:07.370 --> 00:29:12.620
are higher level than JavaScript,
but people don't perceive it

433
00:29:12.620 --> 00:29:15.620
like that because JavaScript Luke's
so much like a high

434
00:29:15.620 --> 00:29:19.820
level language. So that there's,
that's one aspect. Then the

435
00:29:19.820 --> 00:29:21.950
other thing that you bring
up is a very good

436
00:29:21.950 --> 00:29:27.140
point is, is the difference
between applications and websites. And

437
00:29:27.140 --> 00:29:31.010
there you get into the
whole business of, you know,

438
00:29:31.010 --> 00:29:34.310
search engine optimization. And so
on this act, when you're

439
00:29:34.370 --> 00:29:39.710
using a search engine, how
do you find your website

440
00:29:39.710 --> 00:29:46.000
or your application? And really,
I think, you know, most,

441
00:29:46.240 --> 00:29:49.990
most websites are, you know,
if your website is not

442
00:29:50.000 --> 00:29:53.110
really static, it's really an
application. If it's doing, you

443
00:29:53.110 --> 00:30:01.030
know, interesting computations. And I
think things will move more

444
00:30:01.030 --> 00:30:08.170
and more to an application,
like experience where, like, if

445
00:30:08.170 --> 00:30:10.390
you, if you look on,
on, on a lot of

446
00:30:10.390 --> 00:30:15.550
phones and you're using like
high level libraries, you don't

447
00:30:15.550 --> 00:30:18.310
really see that this thing
was written in HTML and

448
00:30:18.310 --> 00:30:21.340
JavaScript. It's not a website
anymore. It's not the document.

449
00:30:23.200 --> 00:30:26.020
And, and so I, yeah,
it, this is an interesting

450
00:30:26.020 --> 00:30:30.250
thing. I don't know how
it will play out, but

451
00:30:30.520 --> 00:30:33.640
I think people will want
to have a way where,

452
00:30:33.640 --> 00:30:38.560
you know, the search engine
can find they're there, whether

453
00:30:38.560 --> 00:30:42.160
you call it an application
or, or websites, that is

454
00:30:42.160 --> 00:30:46.270
the way that people find
things besides the app store.

455
00:30:46.330 --> 00:30:50.080
And maybe the app store
is for applications, app stores

456
00:30:50.110 --> 00:30:55.540
are replacing, you know, search
engines because now there's metadata,

457
00:30:55.540 --> 00:30:57.970
that's in the app store,
you search on these things

458
00:30:57.970 --> 00:31:02.550
in a different way. Yeah.
I definitely, I kind of,

459
00:31:02.580 --> 00:31:05.280
I can hear a struggle
in your voice because we

460
00:31:05.280 --> 00:31:08.550
haven't arrived yet. You know,
we're, we're, we're literally at

461
00:31:08.550 --> 00:31:10.920
the inflection point and I
think that's why there's so

462
00:31:10.920 --> 00:31:15.420
much kind of concern and
paranoia and kind of tumbled

463
00:31:15.450 --> 00:31:18.390
happening in the community because,
you know, you're describing that,

464
00:31:18.450 --> 00:31:21.540
you know, soon we'll package
up HTML and JavaScript and

465
00:31:21.540 --> 00:31:23.520
we'll look at it more
as an application. And that

466
00:31:23.520 --> 00:31:28.140
sounds like flash or Silverlight.
I mean, Silverlight is as

467
00:31:28.140 --> 00:31:33.270
a runtime within, within the
browser that is, takes a

468
00:31:33.270 --> 00:31:36.000
manifest of resources and code
and zips it up and

469
00:31:36.000 --> 00:31:40.100
sends it down. The only
difference is that it's, it's,

470
00:31:40.100 --> 00:31:43.800
it's Microsoft's product and not,
not a standard, but at

471
00:31:43.800 --> 00:31:47.160
the same time, people who
are really good at Silverlight

472
00:31:47.190 --> 00:31:51.270
have said that as I,
as I lament issues in

473
00:31:51.270 --> 00:31:54.600
HTML and JavaScript, the several
I, people are like, we

474
00:31:54.600 --> 00:31:56.850
don't have this problem. This
is a solve issue. And

475
00:31:56.850 --> 00:32:00.120
I think that's what happens
when something is designed like

476
00:32:00.120 --> 00:32:04.500
silver light versus something grows
organically over many, many, many

477
00:32:04.500 --> 00:32:08.160
years as HTML and JavaScript
has been. It's going to

478
00:32:08.160 --> 00:32:12.240
be an interesting, interesting ride,
and it'll be even more

479
00:32:12.240 --> 00:32:14.790
interesting to see, are we
going to be able to

480
00:32:14.880 --> 00:32:18.720
declare victory at some point,
or will we, will we

481
00:32:18.720 --> 00:32:24.090
always have this? I'm not
quite finished feeling that, that

482
00:32:24.120 --> 00:32:27.780
the web has. Yeah. That,
that is a good point.

483
00:32:28.640 --> 00:32:31.530
You know, when you, you,
you mentioned silver lights, for

484
00:32:31.530 --> 00:32:35.010
example, and silver lights, you
know, there's no way you

485
00:32:35.010 --> 00:32:37.320
can do view shores, right.
You're right. Click, and then

486
00:32:37.320 --> 00:32:41.000
you get a little pop
up that says silver lights

487
00:32:41.000 --> 00:32:45.980
usually, and there's no view
shores. And so, and again,

488
00:32:45.980 --> 00:32:49.250
yes, there, that's taking this
idea of, you know, it's,

489
00:32:49.270 --> 00:32:54.110
it's really an application that
runs inside the browser. And

490
00:32:54.950 --> 00:33:01.730
that is the, the thing
that I really I'm really

491
00:33:01.730 --> 00:33:04.700
struggling here, because there are
certain things that are where

492
00:33:04.700 --> 00:33:07.340
you kind of browse the
web. It's really like documents

493
00:33:07.340 --> 00:33:11.240
with hyperlinks that you click
on and it's more like

494
00:33:11.240 --> 00:33:17.600
a book or something. Whereas
in other cases, the it's,

495
00:33:17.620 --> 00:33:19.700
it's a mixture. You know,
you have a page that

496
00:33:19.700 --> 00:33:25.790
has, you know, maybe a
map on that or interactive

497
00:33:27.080 --> 00:33:32.360
graphs and visualizations, or you
have things where that's just

498
00:33:32.450 --> 00:33:35.690
purely an obligation. Like, you
know, when you have a

499
00:33:35.690 --> 00:33:40.370
male client LIDAR online outlook,
web access, or Gmail or

500
00:33:40.370 --> 00:33:44.210
Hotmail, that is, you know,
the fact that that runs

501
00:33:44.210 --> 00:33:47.180
in a browser, it's, it
has nothing to do really

502
00:33:47.180 --> 00:33:51.590
with, with a document or
HTML. Right. You're really using

503
00:33:51.590 --> 00:33:55.880
that as, as an application.
I mean, I don't know

504
00:33:55.880 --> 00:33:59.600
whether people will kind of
right. Click on, on PFOA

505
00:34:00.170 --> 00:34:03.020
and hope to learn something
about the coach or even,

506
00:34:03.110 --> 00:34:05.780
you know, viewed that thing
to Seamus as going to

507
00:34:05.780 --> 00:34:09.040
a website. Well, yeah, I
mean, some people split the

508
00:34:09.040 --> 00:34:12.790
web up in terms of
applications and documents. Others might

509
00:34:12.790 --> 00:34:15.040
say, well, there are things
I can do a view

510
00:34:15.040 --> 00:34:16.960
source on and learn something.
And there are things that

511
00:34:16.960 --> 00:34:20.380
I can't, but it's, it's
going to be interesting. Many,

512
00:34:20.380 --> 00:34:22.870
many people believe that the
web was successful because you

513
00:34:22.870 --> 00:34:27.490
source allowed a new person
to learn about how it

514
00:34:27.490 --> 00:34:32.230
worked. And if the entire
web turns into zipped up

515
00:34:32.260 --> 00:34:36.340
obfuscated bundles of something, it's
going to be a little

516
00:34:36.340 --> 00:34:38.620
bit more of a barrier
to entry for the average

517
00:34:38.650 --> 00:34:41.950
person to start to start
playing around. But thank you

518
00:34:41.980 --> 00:34:44.380
so much, Eric, for taking
the time to chat with

519
00:34:44.380 --> 00:34:46.360
me about this, this issue.
I think we don't have

520
00:34:46.360 --> 00:34:49.330
any conclusions, but we've definitely
introduced a lot of new

521
00:34:49.330 --> 00:34:56.650
questions, Which keeps life interesting.
All the questions were answered,

522
00:34:56.680 --> 00:35:00.340
then, you know, what was
there left for us to

523
00:35:00.340 --> 00:35:05.620
do? So I think it's
that every question generates Denmore

524
00:35:05.620 --> 00:35:10.780
questions that keeps life interesting.
It does. It does. Thank

525
00:35:10.780 --> 00:35:13.060
you so much. Eric Meyer for
chatting with me today, and

526
00:35:13.060 --> 00:35:16.120
this has been another episode
of Hansel minutes. We'll see

527
00:35:16.120 --> 00:35:17.230
you again next week.

