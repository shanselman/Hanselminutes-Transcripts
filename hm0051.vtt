WEBVTT FILE

1
00:00:04.920 --> 00:00:17.510
<inaudible> From Hansel minutes.com. It's
Hansel minutes, a weekly discussion

2
00:00:17.510 --> 00:00:21.860
with web developer and technologists.
Scott Hanselman hosted by Carl Franklin.

3
00:00:22.700 --> 00:00:27.140
This is Lawrence Ryan announcing show
number 51 recorded Tuesday, February

4
00:00:27.140 --> 00:00:32.570
13, 2007. Support for Hanselman
it's as provided by Tellerik

5
00:00:32.570 --> 00:00:36.710
rad controls, the most comprehensive
suite of components for windows

6
00:00:36.710 --> 00:00:47.090
forms and asp.net web applications
online@wwwdottlerik.com. Support is also provided

7
00:00:47.090 --> 00:00:52.550
by.net developers journal. The world's
leading.net developer magazine online at

8
00:00:52.700 --> 00:00:57.740
www dot <inaudible> dot com.
In this episode, Scott and

9
00:00:57.740 --> 00:01:00.890
Carl discussed code metrics and
the benefits of static analysis

10
00:01:00.890 --> 00:01:07.910
tool. This is Carl Franklin. You're
listening to Hansel minutes from

11
00:01:07.910 --> 00:01:11.480
Hanselman it's dot com. Of
course, this is all about

12
00:01:11.480 --> 00:01:13.850
Scott and what he's thinking
about lately. So, Scott, what

13
00:01:13.850 --> 00:01:16.580
are you thinking about lately?
Right now? I am deep

14
00:01:16.610 --> 00:01:20.480
into Stanek analysis. You know,
we, we always like to

15
00:01:20.480 --> 00:01:23.750
take things like a continuous
integration to the next, the

16
00:01:23.750 --> 00:01:27.800
next level. And I'm writing
up some, some code guidelines,

17
00:01:27.800 --> 00:01:29.750
some software guidelines at the
company that I work at

18
00:01:29.750 --> 00:01:34.520
here at Kirlian, trying to
basically define, you know, minimal,

19
00:01:34.700 --> 00:01:38.870
continuous integration, average and maximum,
like, you know, minimal integration

20
00:01:38.870 --> 00:01:42.140
would be napped and unit
and you know, the bill

21
00:01:42.150 --> 00:01:45.320
runs automatically. It can a
more optimal you'd run things

22
00:01:45.320 --> 00:01:49.130
like FX cop and things
like that. And then maximally,

23
00:01:49.130 --> 00:01:51.050
I want to, I want
to get as much static

24
00:01:51.050 --> 00:01:53.780
analysis of the code as
possible in a, in an

25
00:01:53.780 --> 00:01:56.870
automated fashion, but then I'm
also as a, as, as

26
00:01:56.870 --> 00:01:59.840
chief architect, I get overwhelmed.
Sometimes I feel like it's

27
00:01:59.840 --> 00:02:02.270
my job to read all
of the code and the

28
00:02:02.270 --> 00:02:06.860
entire company. Really? Yeah. I
just, I'm starting to realize

29
00:02:07.130 --> 00:02:12.170
that that doesn't scale, right.
Scott doesn't scale seems obvious,

30
00:02:12.200 --> 00:02:15.860
but Scott clone. Yeah, exactly.
I need a deep copy.

31
00:02:16.110 --> 00:02:18.620
It doesn't, it doesn't work
though. So, I mean, we're

32
00:02:18.620 --> 00:02:21.380
a big company with lots
of products. And I think

33
00:02:21.380 --> 00:02:22.940
that a lot of people
who are maybe in my

34
00:02:22.940 --> 00:02:26.030
position have a lead engineer
type position, they want to

35
00:02:26.030 --> 00:02:29.060
read everything and read everything,
everyone commits, but that kind

36
00:02:29.060 --> 00:02:33.440
of lead programmer model doesn't
always work. And also just

37
00:02:33.440 --> 00:02:35.690
reading the code may give
me a familiarity with what's

38
00:02:35.690 --> 00:02:37.700
going on, but it doesn't
really give me big picture

39
00:02:37.700 --> 00:02:42.050
understanding of that. You know,
how the suite fits together.

40
00:02:42.380 --> 00:02:46.220
When you say static analysis,
what kind of analysis? Well,

41
00:02:46.310 --> 00:02:48.410
I want to take it
beyond the kind of analysis

42
00:02:48.410 --> 00:02:50.930
you get out of the
box with say a reflector.

43
00:02:51.680 --> 00:02:55.100
I want to look at,
at the, at the code

44
00:02:55.100 --> 00:02:57.140
without looking at the lines
of code. I want to

45
00:02:57.140 --> 00:03:00.870
know about, you know, you
know, we've talked A little

46
00:03:00.870 --> 00:03:04.860
bit about psychosomatic, conceptual amount
of complexity, right? Exactly. But

47
00:03:04.860 --> 00:03:07.200
I also want to talk
about kind of coupling, you

48
00:03:07.200 --> 00:03:10.710
know, our, our is a
class, you know, too fine

49
00:03:10.710 --> 00:03:14.970
grained is it got too
much going on. Let me

50
00:03:14.970 --> 00:03:17.790
put it this way. Namespaces
are a very logical organizational

51
00:03:17.790 --> 00:03:22.740
unit, right? While assemblies are
a physical unit. And there's

52
00:03:22.740 --> 00:03:26.130
a lot of confusion where
sometimes you'll get into situations

53
00:03:26.130 --> 00:03:30.150
where someone will have one
assembly equals one namespace, they'll

54
00:03:30.150 --> 00:03:34.170
forget that they can spread
namespaces across multiple assemblies and

55
00:03:34.170 --> 00:03:38.370
that they can have multiple
assemblies have multiple namespaces. So

56
00:03:38.370 --> 00:03:40.980
are you saying you found
some tools that actually look

57
00:03:40.980 --> 00:03:43.320
at your code a little
more than FX cop does

58
00:03:43.320 --> 00:03:47.190
and, and will actually tell
you, Hey, you didn't write

59
00:03:47.190 --> 00:03:49.890
this correctly. Yeah. In, in
a, to an extent they

60
00:03:49.890 --> 00:03:51.600
won't come out and say,
Hey, this code sucks and

61
00:03:51.600 --> 00:03:54.330
tell you the line. But
you know, you brought up

62
00:03:54.360 --> 00:03:58.050
FX cop FX cop is
this great kind of wizard

63
00:03:58.050 --> 00:04:01.500
with a bunch of pre-configured
rules that it runs via

64
00:04:01.500 --> 00:04:04.860
reflection on your code. And
it says things like, you

65
00:04:04.860 --> 00:04:09.150
know, don't misspell this and
make sure you've got, make

66
00:04:09.150 --> 00:04:11.250
sure that you're calm, compliant
if you're doing calm, stuff

67
00:04:11.250 --> 00:04:13.350
like that. But this tool
that I've been playing with

68
00:04:13.350 --> 00:04:15.150
lately, and I would say
more than just playing with

69
00:04:15.150 --> 00:04:18.060
it and getting pretty deep
into it is called N

70
00:04:18.060 --> 00:04:21.090
depend. It's like, I think
of it as like the

71
00:04:21.090 --> 00:04:24.660
end class of tools and
unit and cover and depend

72
00:04:24.930 --> 00:04:30.600
and in know full disclosure
and depend is not a

73
00:04:30.600 --> 00:04:33.240
sponsor of the show. You
know, I've never met the

74
00:04:33.240 --> 00:04:37.230
guy You're just temporarily obsessed
with this tool obsessed. So

75
00:04:37.410 --> 00:04:40.080
no one has asked me
to talk obsessive about this.

76
00:04:40.080 --> 00:04:41.370
This is something I'm doing
on my own. So I

77
00:04:41.370 --> 00:04:43.650
just want to make sure
people know that while, you

78
00:04:43.650 --> 00:04:45.720
know, just like code rush,
right. COVID has never paid

79
00:04:45.720 --> 00:04:48.390
me a dollar, but I
still spread the word about

80
00:04:48.390 --> 00:04:51.720
code Cobra, rush obsessively. Right?
There's like homeless people on

81
00:04:51.720 --> 00:04:53.970
the bus who knows Code
rush. Can I trust you,

82
00:04:53.970 --> 00:04:58.710
Scott? Okay. So independ, it
was out for a while

83
00:04:58.710 --> 00:05:02.310
kind of as a free
tool awhile back. And what

84
00:05:02.310 --> 00:05:04.410
I think went wrong with
it was, it was just

85
00:05:04.860 --> 00:05:08.730
too intense for the average,
Joe, it's nothing wrong with

86
00:05:08.730 --> 00:05:10.260
being the average Joe, but
the average Joe is just

87
00:05:10.260 --> 00:05:13.290
trying to ship their product.
But as I go from

88
00:05:13.290 --> 00:05:18.210
shipping a product to shipping
products, plural, I realized that

89
00:05:18.210 --> 00:05:21.690
I needed a visualization tool.
So, so end depend is

90
00:05:21.690 --> 00:05:24.270
one of these tools. It
basically has, it has three

91
00:05:24.300 --> 00:05:28.230
components. It's got a, a
console application that you run

92
00:05:28.230 --> 00:05:32.970
against a project file and
it generates this massive XML

93
00:05:32.970 --> 00:05:36.570
file that represents everything. It
knows about your system. It

94
00:05:36.570 --> 00:05:39.090
basically chews up this stuff.
So you've got the console

95
00:05:39.090 --> 00:05:41.760
app that chews up these
project files. You've got a

96
00:05:41.760 --> 00:05:45.060
WinForms app that you basically
point at your solution and

97
00:05:45.060 --> 00:05:47.640
it generates the super XML
file. Okay. And then you've

98
00:05:47.640 --> 00:05:50.610
got a browser, which is
like a visual, It's all

99
00:05:50.610 --> 00:05:54.420
very integrated. So literally I
opened it up. I pointed

100
00:05:54.420 --> 00:05:59.120
at my solution file and
I say, generate the Product

101
00:05:59.210 --> 00:06:02.650
file. The product generator basically
looks at my application and

102
00:06:02.650 --> 00:06:07.390
says, these are framework components.
It came with the.net framework.

103
00:06:07.690 --> 00:06:11.170
And these are components that
are in your application and

104
00:06:11.170 --> 00:06:13.780
you can Mark a assemblies
as being part of the

105
00:06:13.780 --> 00:06:16.000
framework or not. So if
you're using some third party

106
00:06:16.000 --> 00:06:18.910
control and you want it
to be considered a framework

107
00:06:18.910 --> 00:06:21.160
component, you can do that.
So it really knows the

108
00:06:21.160 --> 00:06:24.640
difference between your app and
the other stuff underneath sometimes

109
00:06:24.640 --> 00:06:26.860
apps. Aren't very smart about
that. Yeah. And then you

110
00:06:26.860 --> 00:06:29.650
say run it shells out
to its console app and

111
00:06:29.650 --> 00:06:32.290
does some voodoo that I
don't understand and then gives

112
00:06:32.290 --> 00:06:35.110
you this XML file and
then launches this amazing browser.

113
00:06:35.170 --> 00:06:36.820
And it's, it's ironic that
we're doing this via a

114
00:06:36.830 --> 00:06:39.760
podcast because you really have
to see it. Sure. They've

115
00:06:39.760 --> 00:06:43.060
got a lot of great
screencasts that'll show you kind

116
00:06:43.060 --> 00:06:48.430
of live how this works.
You can take a look@shrinkstir.com

117
00:06:48.430 --> 00:06:53.890
slash M one zero. And
that's a whole series of

118
00:06:53.890 --> 00:06:56.170
screencast tutorials. I got to
give the guy credit for

119
00:06:56.200 --> 00:06:59.710
making a crap load of
those. Basically it's got a

120
00:06:59.710 --> 00:07:02.110
couple of different views that
are worth, that are worth

121
00:07:02.110 --> 00:07:06.670
noting. So there's a, well,
gosh, there's so much to,

122
00:07:06.670 --> 00:07:08.530
I'm trying to think where
to start. There's so much,

123
00:07:08.560 --> 00:07:11.680
there's so much to talk
about. This is one of

124
00:07:11.680 --> 00:07:13.390
the problems. I think that
the gentleman's going to have

125
00:07:13.390 --> 00:07:16.780
marketing. This is that it's
so intense that you could

126
00:07:16.780 --> 00:07:19.780
go, ah, screw it. Sorry.
Are you saying that there's

127
00:07:19.780 --> 00:07:22.450
a newer version that is
less intense or is it

128
00:07:22.450 --> 00:07:27.400
still very intense? I'm saying
that that programming is hard

129
00:07:27.970 --> 00:07:32.650
and really visualizing effectively and
digging into the analysis of

130
00:07:32.650 --> 00:07:37.360
your code involves some pretty
scary looking charts and graphs.

131
00:07:37.630 --> 00:07:39.250
So have to know what
to do with that data.

132
00:07:39.250 --> 00:07:40.840
Right. I mean, Exactly. And
that's kind of what we

133
00:07:40.840 --> 00:07:44.770
want to talk about today,
so, okay. So independence allows

134
00:07:44.770 --> 00:07:48.010
you to see the code
structure and it presents this

135
00:07:48.010 --> 00:07:53.260
information as a, a software
dependency diagram. And these diagrams

136
00:07:53.290 --> 00:07:58.330
look like, like maybe you've
played battleship, right? Sure. You've

137
00:07:58.330 --> 00:08:01.300
got along one access, you
know, a bunch of numbers.

138
00:08:01.300 --> 00:08:03.820
And along the other access,
a bunch of letters with

139
00:08:03.820 --> 00:08:06.670
this, you've got all your
assemblies down, one access and

140
00:08:06.670 --> 00:08:11.500
then those exact same assemblies
along the other axis. And

141
00:08:11.500 --> 00:08:13.570
then there's a diagonal line
running through it. So then

142
00:08:13.570 --> 00:08:15.700
you can point at any
dot on the grid. So

143
00:08:15.700 --> 00:08:18.010
right now I'm going to
actually, And it shows dependencies

144
00:08:18.010 --> 00:08:21.880
between them. Exactly, exactly right.
And depend. So right now

145
00:08:21.910 --> 00:08:25.420
I am, I'm clicking on
one of those on my

146
00:08:25.420 --> 00:08:29.170
application. I've taken my Karelian
platform. And I see here,

147
00:08:29.290 --> 00:08:31.750
I click on that and
it has a number three

148
00:08:31.750 --> 00:08:34.600
and it says in English,
it actually writes, generates an

149
00:08:34.600 --> 00:08:39.910
English sentence. Three members of
the assembly execution services are

150
00:08:39.910 --> 00:08:44.050
used by two methods of
the assembly pipeline. So now

151
00:08:44.050 --> 00:08:48.820
I know my pipeline assembly
is two of the methods

152
00:08:48.820 --> 00:08:51.040
of that assembly are using
three members from this other

153
00:08:51.040 --> 00:08:53.470
one. So I get a
sense of the coupling and

154
00:08:53.500 --> 00:08:56.520
I can flip to the
other and basically see the

155
00:08:56.520 --> 00:08:59.970
inverse of that sentence, where
two methods of pipeline are

156
00:08:59.970 --> 00:09:03.180
using three members of engine.
Then I can click on

157
00:09:03.180 --> 00:09:05.910
that. And there are the
tools that'll do this. Like

158
00:09:05.910 --> 00:09:08.220
there's a tool called latics
L a T T I

159
00:09:08.220 --> 00:09:10.830
X it's a Java tool.
That's been poured over to.net,

160
00:09:10.830 --> 00:09:13.440
but I'll talk about why
some of the visualization stuff

161
00:09:13.440 --> 00:09:16.170
that independence doing is so
much more amazing. And this

162
00:09:16.170 --> 00:09:18.840
was actually going to generate
a PNG file, a graphics

163
00:09:18.840 --> 00:09:23.970
file with a, a, basically
like a UML type diagram

164
00:09:23.970 --> 00:09:28.290
describing with arrows, which functions
are using which function. So

165
00:09:28.290 --> 00:09:32.930
I can see dependencies between
these different assemblies. Got it.

166
00:09:33.860 --> 00:09:36.500
This all sounds very cool
and makes nice charts and

167
00:09:36.500 --> 00:09:40.010
stuff. But what do I,
I'm Joe I'm Joe developer.

168
00:09:40.010 --> 00:09:41.540
Why do I mean, what
do I care? So there

169
00:09:41.540 --> 00:09:44.570
are dependencies. What is, is
it bad to have dependencies?

170
00:09:44.570 --> 00:09:48.440
Is it good? Is there
like a golden number that

171
00:09:48.440 --> 00:09:52.640
I should achieve four chairs?
So one of the problems

172
00:09:52.640 --> 00:09:55.910
I think happens with this
kind of a discussion with

173
00:09:55.910 --> 00:09:59.090
these dependency major CS is
that they're not intuitive unless

174
00:09:59.090 --> 00:10:00.830
you sit down and spend
five minutes, it's a lot

175
00:10:00.830 --> 00:10:05.870
like PowerShell. That first five
minutes is just agonizing. And

176
00:10:05.870 --> 00:10:08.150
then they start using math.
And whenever you see a,

177
00:10:08.580 --> 00:10:11.120
a presentation or a PowerPoint
on this kind of stuff,

178
00:10:11.180 --> 00:10:14.060
there's usually some, some kind
of equation, the right. And

179
00:10:14.060 --> 00:10:17.810
unless you're a hardcore computer
science type, usually sample standard

180
00:10:17.810 --> 00:10:20.540
deviation, screw it. I don't
want to be involved. It

181
00:10:20.540 --> 00:10:25.190
brings back horrible flashbacks. Exactly.
Now for me, the problem

182
00:10:25.190 --> 00:10:29.150
I was having was they
kept using terms like afferent,

183
00:10:29.180 --> 00:10:32.390
coupling and efferent coupling. You
know, that's just about as

184
00:10:32.390 --> 00:10:34.940
interesting as the difference between
the, the word effect and

185
00:10:34.940 --> 00:10:37.040
effect, you know, it's like,
does it really do you

186
00:10:37.040 --> 00:10:39.860
really care? And then I
realized I figured it out.

187
00:10:39.860 --> 00:10:44.300
Okay. So to answer your
question, dependency management and really

188
00:10:44.300 --> 00:10:46.610
understanding this stuff depends on
a couple of things. First,

189
00:10:46.610 --> 00:10:50.300
there's the public face of
your application, right? What, what

190
00:10:50.300 --> 00:10:53.390
methods, what types are being
exposed to the outside world?

191
00:10:53.540 --> 00:10:57.620
That's one interesting thing, but
more interesting is who's using

192
00:10:57.620 --> 00:11:01.040
them who cares. So there's
this notion of a stable

193
00:11:01.040 --> 00:11:04.520
package or a stable, a
stable, and a package in

194
00:11:04.520 --> 00:11:06.890
this case would be like
an assembly or an in

195
00:11:06.890 --> 00:11:09.890
stable one. And that doesn't
necessarily not unstable, but it's

196
00:11:09.890 --> 00:11:14.420
actually called in stable. This
doesn't mean that like, it's

197
00:11:14.420 --> 00:11:16.190
good to be stable or
it's bad. These are just

198
00:11:16.190 --> 00:11:19.430
descriptions of, of what it
means to be stable or

199
00:11:19.430 --> 00:11:24.500
unstable. So a stable package
actually means that lots of

200
00:11:24.500 --> 00:11:27.170
people depend on it. So
it's got a lot of

201
00:11:27.170 --> 00:11:30.230
good reasons it shouldn't change.
So if I've got some

202
00:11:30.230 --> 00:11:34.280
package that three people are
using three different assemblies are

203
00:11:34.280 --> 00:11:37.550
dependent on mind assembly. That
means that it's got a

204
00:11:37.550 --> 00:11:39.260
pretty good reason not to
change because I know I'm

205
00:11:39.260 --> 00:11:43.550
going to break stuff, right.
And afferent AFF E R

206
00:11:43.550 --> 00:11:47.000
E N T afferent coupling.
This is the number of

207
00:11:47.000 --> 00:11:52.010
classes outside me that depend
on classes inside me. Okay.

208
00:11:52.490 --> 00:11:55.690
While an efferent with an
E, this is the number

209
00:11:55.690 --> 00:12:00.220
of classes inside me that
depend outside me. Sure. And

210
00:12:00.250 --> 00:12:03.010
there's a really great PDF
that describes this with some

211
00:12:03.010 --> 00:12:09.400
diagrams. And you can see
that@ashrinkstir.com slash M 12. And

212
00:12:09.460 --> 00:12:12.580
this explains a very simple
kind of equation that comes

213
00:12:12.580 --> 00:12:16.750
up with a number between
zero and one about how

214
00:12:16.750 --> 00:12:20.200
stable or not a particular
thing is. So for example,

215
00:12:20.470 --> 00:12:24.760
a very stable assembly. And
that means that it needs

216
00:12:24.760 --> 00:12:28.450
to be stable, would have
a number of zero, a

217
00:12:28.460 --> 00:12:32.230
stability metric of zero. That
means that lots of people

218
00:12:32.320 --> 00:12:35.440
are using it, and it
really needs to not change.

219
00:12:36.460 --> 00:12:39.280
Now, if you have a
lot of in stable things,

220
00:12:39.310 --> 00:12:42.100
these are the, these would
be like leaf nodes, assemblies,

221
00:12:42.190 --> 00:12:44.920
assemblies that you could change
them all day. Nobody cares

222
00:12:44.920 --> 00:12:48.130
web pages, stuff like that.
Web pages that no one

223
00:12:48.130 --> 00:12:52.480
refers to this tool can
look at these both direct

224
00:12:52.900 --> 00:12:56.290
dependencies where this guy depends
on that guy. But also

225
00:12:56.290 --> 00:12:59.710
the really interesting stuff is
the indirect dependencies where a

226
00:12:59.740 --> 00:13:02.800
depends on B and B
depends on C. And if

227
00:13:02.800 --> 00:13:08.500
you have a stable, if
you have a stable assembly,

228
00:13:08.800 --> 00:13:11.530
one that really needs to
not be changing. And it's

229
00:13:11.530 --> 00:13:14.320
got in stable ones on
both sides of it, you

230
00:13:14.320 --> 00:13:16.510
can get into trouble. Basically.
You can get into dependency

231
00:13:16.510 --> 00:13:20.290
chains where you change something
that seems harmless and then

232
00:13:20.290 --> 00:13:24.520
realize that you've broken a
lot of your public users.

233
00:13:24.520 --> 00:13:26.020
A lot of the developers
that are using you up

234
00:13:26.020 --> 00:13:28.830
and downstream, Right? So it's
nice to have this thing

235
00:13:28.890 --> 00:13:31.260
right there handy while you're
writing your code so that

236
00:13:31.260 --> 00:13:33.720
you can see, you know,
how expensive is this going

237
00:13:33.720 --> 00:13:35.460
to be? Unless you keep
it all in your head,

238
00:13:35.460 --> 00:13:38.940
like you said, but you
don't scale. Exactly. You just,

239
00:13:38.970 --> 00:13:42.090
you actually just, you just
nailed it. How expensive is

240
00:13:42.090 --> 00:13:44.850
this going to be? Yeah.
So if you've got some

241
00:13:44.850 --> 00:13:48.820
package, that's very kind of
volatile. That's difficult to that.

242
00:13:48.820 --> 00:13:51.450
That that's difficult to change.
Then you're going to be

243
00:13:51.450 --> 00:13:54.660
in, what's called the zone
of pain. This is, I

244
00:13:54.660 --> 00:13:56.940
thought I was like, wow,
this sounds like a Hansel

245
00:13:56.940 --> 00:13:59.700
ism. Doesn't it? It sounds
like Pat Hines, labyrinth of

246
00:13:59.700 --> 00:14:02.910
pain, which is a thing
he just coined up one

247
00:14:02.910 --> 00:14:06.720
day. This is actually a
real, a real thing. This

248
00:14:06.720 --> 00:14:09.930
is not just me being,
being silly. I'm gonna just

249
00:14:09.940 --> 00:14:13.020
bring up an independent report.
This is a report. And

250
00:14:13.230 --> 00:14:16.680
this talks about the, this
is a graph that has

251
00:14:16.680 --> 00:14:21.660
abstractness versus instability. So this
is a chart you've got

252
00:14:21.660 --> 00:14:24.240
abstractness on the Y axis
going up and down. So

253
00:14:24.420 --> 00:14:28.320
really abstract stuff, like things
that are very flexible. You

254
00:14:28.320 --> 00:14:31.860
can derive from them. They're
not very concrete, right? They're

255
00:14:31.860 --> 00:14:36.060
not marked sealed. Those have
have an axis. And on

256
00:14:36.060 --> 00:14:39.300
the X axis are things
that are stable or unstable.

257
00:14:39.300 --> 00:14:43.470
Like we've just talked about.
So there's this zone kind

258
00:14:43.470 --> 00:14:45.510
of right down from the
upper left to the lower,

259
00:14:45.510 --> 00:14:47.820
right? This nice green area.
And you want most of

260
00:14:47.820 --> 00:14:51.030
your assemblies to fall in
that area. The zone of

261
00:14:51.980 --> 00:14:56.750
would mean very stable assemblies.
That means assemblies. You don't

262
00:14:56.750 --> 00:15:01.520
want to change that are
not very abstract. So this

263
00:15:01.520 --> 00:15:04.280
means what about them? That
means that they're, they're rigid.

264
00:15:04.310 --> 00:15:07.430
You can't change them, but
you also can extend them.

265
00:15:07.640 --> 00:15:10.820
Yeah. Now the other side
of the zone of pain,

266
00:15:10.820 --> 00:15:14.780
the opposite access is the
zone of uselessness. The zone

267
00:15:14.780 --> 00:15:18.380
of uselessness are things that
are really abstract, but no

268
00:15:18.380 --> 00:15:20.390
one's using them and have
no dependents. So they're really

269
00:15:20.420 --> 00:15:24.590
useless. So I threw in
our application. Yeah, this is

270
00:15:24.590 --> 00:15:27.140
deep stuff and I love
it, but you gotta, you

271
00:15:27.140 --> 00:15:28.880
gotta take that five, 10
minutes and then you go,

272
00:15:28.910 --> 00:15:32.780
Oh crap. So I dropped
my application in here and

273
00:15:32.810 --> 00:15:36.080
I see my, my scatterplot.
And I can see now

274
00:15:36.080 --> 00:15:38.810
that 90% of my stuff
is in this nice green

275
00:15:38.810 --> 00:15:42.890
area, right there, the feed
zone, but sitting smack dab

276
00:15:42.890 --> 00:15:45.050
in the zone of pain
as a, as a, an

277
00:15:45.050 --> 00:15:50.000
assembly we have called wait
for it. Common, ah, ah,

278
00:15:50.030 --> 00:15:53.600
we all have that common.
Yes, it's called system or

279
00:15:53.600 --> 00:15:56.960
master or whatever. And this
is the dumping ground. So

280
00:15:56.990 --> 00:15:59.540
this has actually identified something
I knew in my heart

281
00:15:59.540 --> 00:16:02.030
of hearts was a problem
right now. I've actually got

282
00:16:02.030 --> 00:16:05.200
hard metrics to describe why
it's a Hang and take

283
00:16:05.200 --> 00:16:07.990
that to a meeting and
say, Hmm, something gotta be

284
00:16:07.990 --> 00:16:11.050
done about this. Okay. So
it turns out that we

285
00:16:11.050 --> 00:16:14.470
had been putting a number
of things in there, but

286
00:16:14.470 --> 00:16:17.620
they're not extensible and a
lots and lots of people

287
00:16:18.370 --> 00:16:20.350
rely on them. So now
I can go back over

288
00:16:20.350 --> 00:16:24.340
to my, my, my matrix.
I can actually click on

289
00:16:24.340 --> 00:16:26.290
that specific assembly. I'm going
to just click on it

290
00:16:26.290 --> 00:16:28.870
right now. And then I
can choose to zoom in.

291
00:16:28.870 --> 00:16:32.110
I can actually right click.
I'm going to say open

292
00:16:32.110 --> 00:16:34.630
this dependency. It's going to
zoom in. And now I

293
00:16:34.630 --> 00:16:37.330
can actually open the assembly
and look at each method.

294
00:16:37.930 --> 00:16:39.970
So I just took one
number right now. The number

295
00:16:39.970 --> 00:16:46.540
says, duh, 26, here we
go. 26 members are being

296
00:16:46.540 --> 00:16:50.260
used by 15 other assemblies.
Okay. Can I zoom in

297
00:16:50.260 --> 00:16:51.850
on that? And now I
can actually go and see

298
00:16:52.060 --> 00:16:56.500
exactly which functions are being
used. And it'll Mark in

299
00:16:56.500 --> 00:16:59.560
black, the parts that are
really sad and you know,

300
00:16:59.560 --> 00:17:01.510
you're in trouble with, and
it turns out there was

301
00:17:01.540 --> 00:17:05.680
one kind of structure that
was being used by the

302
00:17:05.680 --> 00:17:09.940
entire planet, but that structure
really didn't have anything to

303
00:17:09.940 --> 00:17:13.540
do with the rest of
that particular common assembly. So

304
00:17:13.540 --> 00:17:16.660
that might mean an a
refactoring opportunity, Right? You take

305
00:17:16.660 --> 00:17:19.540
that structure and put it
in its own assembly. Exactly.

306
00:17:19.540 --> 00:17:22.450
Right. Scott, before we get
any further, is there any

307
00:17:22.450 --> 00:17:25.480
way to look at multiple
projects at the same time,

308
00:17:25.480 --> 00:17:28.780
because you might have dependencies
within one project or one

309
00:17:28.780 --> 00:17:33.400
solution, but you could have
multiple solutions around a company

310
00:17:33.400 --> 00:17:38.650
that, that use shared assemblies.
Absolutely. So it prefers to

311
00:17:38.650 --> 00:17:41.260
have this particular application really
likes to have apps where

312
00:17:41.260 --> 00:17:43.540
you have the source available,
because then you can actually

313
00:17:43.540 --> 00:17:45.970
double click and it integrates
with visual studio such that

314
00:17:45.970 --> 00:17:48.880
you can go into the
line of code that's that

315
00:17:48.880 --> 00:17:51.480
they is, is causing problems,
but this will work on

316
00:17:51.480 --> 00:17:54.810
projects or solutions as big
as you want. So I

317
00:17:54.810 --> 00:17:58.470
just dumped our entire product
suite into it, and then

318
00:17:58.470 --> 00:18:02.390
I can exclude or include
assemblies as I like. So

319
00:18:02.390 --> 00:18:05.870
if you wanted to, you
could make one big solution

320
00:18:05.870 --> 00:18:08.630
that doesn't exist for any
other purpose, except to contain

321
00:18:08.630 --> 00:18:11.450
all the different projects that
you have at your company.

322
00:18:11.660 --> 00:18:16.280
Exactly. So there's, there's a
tree map. It also has.

323
00:18:16.280 --> 00:18:17.690
There was a note I
was saying before, when I

324
00:18:17.690 --> 00:18:20.510
was kind of having trouble
expressing how much is going

325
00:18:20.510 --> 00:18:23.540
on here and why it's
so scary. There's the matrix.

326
00:18:23.570 --> 00:18:26.000
There's that software dependency matrix
that we've been talking about.

327
00:18:26.330 --> 00:18:30.500
There's the, the zone of
pain zone of uselessness kind

328
00:18:30.500 --> 00:18:34.310
of diagram. And then there
is a tree map. A

329
00:18:34.310 --> 00:18:36.980
tree map is kind of
a tricky thing to, to

330
00:18:37.010 --> 00:18:41.510
visualize. This is you may
have seen us in applications

331
00:18:41.510 --> 00:18:43.400
that let you look at
your hard drive and see

332
00:18:43.400 --> 00:18:47.270
how much space you're using
up like Sequoia view, where

333
00:18:47.570 --> 00:18:51.350
the bigger file has a
bigger square, right? And you

334
00:18:51.350 --> 00:18:54.770
basically get this giant diagram
filled with squares and you

335
00:18:54.770 --> 00:18:56.870
have to, it takes a
second to go, wait a

336
00:18:56.870 --> 00:18:59.480
second. What exactly do these
mean? Right. They've got a

337
00:18:59.480 --> 00:19:04.280
very tricky tree map that
lets you see a square

338
00:19:04.280 --> 00:19:08.300
is indicating methods. And you
could say, show me a

339
00:19:08.310 --> 00:19:10.820
methods with lots of lines
of code and then the

340
00:19:10.820 --> 00:19:14.210
bigger, the square, the bigger
the line of code. So

341
00:19:14.210 --> 00:19:16.310
then you can hover over
them, just like you can.

342
00:19:16.310 --> 00:19:18.380
When you're looking at these
applications that let you figure

343
00:19:18.380 --> 00:19:20.090
out how much hard drive
you're taking up and you

344
00:19:20.090 --> 00:19:24.110
can say, show me the
big fat functions, but there's

345
00:19:24.110 --> 00:19:26.240
like 60 different metrics. You
can say, show me the

346
00:19:26.240 --> 00:19:29.690
really complicated ones. Show me
the ones with a lot

347
00:19:29.690 --> 00:19:32.390
of parameters. I was digging
around in this suite. I

348
00:19:32.390 --> 00:19:36.770
found one function we had
that had 12 parameters, string

349
00:19:36.770 --> 00:19:39.650
chemistry, and chemistry and chemistry
and chemistry and chemistry. This

350
00:19:39.650 --> 00:19:43.250
can find that kind of
stuff. Now just like FX

351
00:19:43.250 --> 00:19:46.010
cop. You have these rules
you can apply, but ethics,

352
00:19:46.010 --> 00:19:49.670
copywriting rules and custom plugins
is a little trickier. The

353
00:19:49.670 --> 00:19:52.340
number of people you'll find
using ethics cop is going

354
00:19:52.340 --> 00:19:54.440
to be much higher than
the number of people who've

355
00:19:54.440 --> 00:19:59.570
written custom FX cop plugins.
Sure. So this is the

356
00:19:59.570 --> 00:20:01.460
part where I think this
guy is ready to blow

357
00:20:01.460 --> 00:20:03.770
up this particular individual. And
I blow up for those

358
00:20:03.770 --> 00:20:05.840
of you who aren't native
English speakers is a good

359
00:20:05.840 --> 00:20:10.430
thing. This is a, I'm
saying that this scene explode

360
00:20:10.430 --> 00:20:12.190
in the scene. Thank you.
This is a, a, a

361
00:20:12.270 --> 00:20:14.840
secret product as far as
I'm concerned because people aren't

362
00:20:14.840 --> 00:20:20.540
really exploiting it. So he's
actually written a spec for

363
00:20:20.540 --> 00:20:23.750
something he calls CQL code
query language, and that's at

364
00:20:23.750 --> 00:20:27.290
shrink stir slash M 11.
And you, you would love

365
00:20:27.290 --> 00:20:29.990
this cause I know you're
a database guy. This is

366
00:20:30.590 --> 00:20:36.920
sequel for assemblies. Hmm. Okay.
So he's got IntelliSense, which

367
00:20:36.920 --> 00:20:38.480
is more than SQL server
had for a number of

368
00:20:38.480 --> 00:20:41.360
years and you can go
and write. And this is,

369
00:20:41.360 --> 00:20:46.100
I'm just reading a CQL
statement warn if count greater

370
00:20:46.100 --> 00:20:50.980
than zero in select top
10 methods where psychosomatically complexity

371
00:20:50.980 --> 00:20:57.010
is greater than 20. Wow.
Seriously. Wow. So you can

372
00:20:57.010 --> 00:21:01.420
write this. Oh my God,
dude. I'm telling you check

373
00:21:01.420 --> 00:21:04.780
this out, right? Count in
select top 10 methods where

374
00:21:04.790 --> 00:21:09.640
number of lines of code
greater than whatever. Oh, here's

375
00:21:09.640 --> 00:21:13.510
the part that's cool. As
you're typing this, he runs

376
00:21:13.510 --> 00:21:17.020
the query in real time
and this is the best

377
00:21:17.020 --> 00:21:20.620
part. The tree view. He
actually updates with hotspots like

378
00:21:20.620 --> 00:21:24.070
a heat map, lighting up
those parts of the treatment

379
00:21:24.070 --> 00:21:26.500
that are having the problem.
So I'm just running this

380
00:21:26.500 --> 00:21:28.390
on my actual stuff here,
check this as this is

381
00:21:28.390 --> 00:21:32.140
awesome. Look at this Warren,
if percentage greater than five

382
00:21:32.140 --> 00:21:35.980
in methods where we're using
boxing. So then he actually

383
00:21:35.980 --> 00:21:38.980
goes and says, you know,
here's a problem using boxing.

384
00:21:39.130 --> 00:21:41.680
So here I go. And
I find a, an array

385
00:21:41.680 --> 00:21:45.760
manipulation application where we're using
boxing 15 times in a

386
00:21:45.760 --> 00:21:49.690
loop. Wow. I had no
idea. Wow, he's got design

387
00:21:49.690 --> 00:21:52.210
constraints, naming constraints. And the
fun part is with the

388
00:21:52.210 --> 00:21:54.610
professional version of this tool.
And I think it's about

389
00:21:54.750 --> 00:21:57.010
he charges Euro, but I
think it's like 400 bucks,

390
00:21:57.430 --> 00:22:00.310
but you'd really only need
one copy or a couple

391
00:22:00.310 --> 00:22:02.950
maybe for the, for the
architect or the lead. You

392
00:22:02.950 --> 00:22:05.200
wouldn't necessarily want to get
this for the entire company.

393
00:22:05.230 --> 00:22:07.900
Sure. You can save these
queries and run them as

394
00:22:07.900 --> 00:22:11.920
part of your build. Okay.
So you've got, I've got,

395
00:22:12.070 --> 00:22:13.300
let me see this. Some
other one of these here.

396
00:22:13.650 --> 00:22:16.470
We should have them as
an advertiser. I actually call

397
00:22:16.510 --> 00:22:18.870
the guy. I should call
the guy he lives in

398
00:22:18.870 --> 00:22:23.790
France, somewhere. A cyclometic here's
one. This was an actually

399
00:22:23.790 --> 00:22:27.360
a composite one top 10
methods where percentages of comments

400
00:22:27.360 --> 00:22:31.530
is less than 20 lines
of code greater than 10.

401
00:22:31.650 --> 00:22:34.200
Wow. So then he'll go.
Here we go. And I

402
00:22:34.200 --> 00:22:37.890
just found a function called
find item that has 16

403
00:22:37.890 --> 00:22:40.920
lines of code and no
comments. And then here's the

404
00:22:40.920 --> 00:22:43.320
part that's cool. It lights
it up in red on

405
00:22:43.320 --> 00:22:45.690
the tree map. I'm going
to double click on that.

406
00:22:45.720 --> 00:22:47.490
So I just double click
and now it's launched the

407
00:22:47.490 --> 00:22:51.720
source code into visual studio
suite. You can integrate this.

408
00:22:51.720 --> 00:22:53.790
Here's the part that is
going to blow you away.

409
00:22:54.330 --> 00:22:58.230
He's he's he includes with
the product cruise control and

410
00:22:58.230 --> 00:23:02.490
ms. Build tasks. So he'll
generate this report and just

411
00:23:02.580 --> 00:23:04.380
tack it on the end
of your continuous integration, but

412
00:23:04.440 --> 00:23:07.650
No kidding. So when you
check in code, it'll automatically

413
00:23:07.650 --> 00:23:10.590
analyze it and spit you
back. Some report Got your

414
00:23:10.590 --> 00:23:13.050
back and stuff. So this
is FX cop plus plus

415
00:23:13.050 --> 00:23:15.930
plus, Oh my God. I
think it's a complimentary thing

416
00:23:15.930 --> 00:23:18.450
to FX cup. Okay. And
here's the best thing Is

417
00:23:18.450 --> 00:23:22.860
just basic detail. Yeah. Here's
the best fundamental stuff. So

418
00:23:22.980 --> 00:23:24.930
this is the cool part.
He has an open source

419
00:23:24.930 --> 00:23:29.700
version that's free. Hmm. The
difference between the professional edition

420
00:23:29.700 --> 00:23:32.760
and the open source one
is that with the professional

421
00:23:32.760 --> 00:23:35.760
one, these queries that you
can write these CQ ELLs,

422
00:23:36.700 --> 00:23:39.180
you can save them, you
can make documents, you can

423
00:23:39.180 --> 00:23:42.330
do constraint violations and all
that kind of stuff. You

424
00:23:42.330 --> 00:23:47.600
can also do indirect dependencies.
Well, the trial one doesn't

425
00:23:47.600 --> 00:23:50.330
have that feature, but the
trial version, you know, the

426
00:23:50.480 --> 00:23:55.310
open source version includes all
the reporting. It includes creating

427
00:23:55.310 --> 00:23:57.860
the projects with the, the,
the, the, that tool. It

428
00:23:57.860 --> 00:24:00.920
includes some, you know, snapshot,
pictures of metrics and dependencies.

429
00:24:01.070 --> 00:24:05.300
Hmm. So he really is
giving away a lot. He

430
00:24:05.300 --> 00:24:07.940
probably should give away less
because he's doing so much,

431
00:24:07.940 --> 00:24:10.640
but I I'm definitely personally
going to, I think I'm

432
00:24:10.640 --> 00:24:12.260
gonna pick up a copy
of this. Maybe two for

433
00:24:12.260 --> 00:24:14.690
a couple of my architects.
Here's the thing though. And

434
00:24:14.690 --> 00:24:17.330
this is why I'm so
frustrated is that I try

435
00:24:17.340 --> 00:24:19.460
to show it to some
guys here at work. And

436
00:24:19.460 --> 00:24:22.400
it took about 10 minutes.
Now, once they got it,

437
00:24:23.030 --> 00:24:25.180
they were like, Oh, we
have to have this. Well,

438
00:24:25.180 --> 00:24:27.910
it took about 15 minutes
of you explaining what it

439
00:24:27.910 --> 00:24:31.480
was all about before the
light clicked for me. But

440
00:24:31.480 --> 00:24:33.400
then once you get it,
then you're like, wow, I

441
00:24:33.400 --> 00:24:35.770
guess you could write these
queries on whatever kind of

442
00:24:35.770 --> 00:24:37.810
code you are into writing.
Would it be data, you

443
00:24:37.810 --> 00:24:41.530
know, database? It doesn't matter.
Whatever. So code that you've

444
00:24:41.530 --> 00:24:43.840
generated that you want to
make sure is up to

445
00:24:43.840 --> 00:24:47.530
a certain level of quality.
This is allowing me to

446
00:24:47.530 --> 00:24:50.740
see at a larger view
what's going on in my

447
00:24:50.740 --> 00:24:54.760
company, as far as, you
know, coupling this notion of

448
00:24:54.760 --> 00:24:58.060
coupling has really been powerful
because just in the time

449
00:24:58.060 --> 00:25:00.520
I've spent with this, I've
discovered two assemblies that I

450
00:25:00.520 --> 00:25:04.960
am concerned are becoming too
too important. And I also

451
00:25:04.960 --> 00:25:08.590
found some, some dependencies where
this is an interesting thing.

452
00:25:08.950 --> 00:25:12.070
He can even analyze classes
within a single assembly. And

453
00:25:12.070 --> 00:25:15.130
then look to see if
there's a dependency cycle. I

454
00:25:15.130 --> 00:25:18.460
found two classes that are
basically dependent on each other,

455
00:25:18.520 --> 00:25:22.060
right? Circular dependencies, not with,
not with, not without, I

456
00:25:22.060 --> 00:25:24.490
was gonna say without not
outside the assembly, but just

457
00:25:24.490 --> 00:25:27.460
inside. That tells me that
a, my design is probably

458
00:25:27.460 --> 00:25:29.620
a little iffy. Yeah. That's
weird. Maybe these need to

459
00:25:29.620 --> 00:25:34.570
be the same namespace. What
I think is tool lacks

460
00:25:34.840 --> 00:25:38.410
is the kind of handholding,
you know, I would like

461
00:25:38.680 --> 00:25:41.380
plain English and you should
do this. Well, he does

462
00:25:41.380 --> 00:25:44.080
have the videos though, right?
The videos are really good.

463
00:25:44.080 --> 00:25:47.440
These are the screencasts that
describe what's going on. He's

464
00:25:47.440 --> 00:25:50.140
got at least a dozen
of them. I've only made

465
00:25:50.140 --> 00:25:53.230
it through six or seven
myself. Cause there's a lot

466
00:25:53.230 --> 00:25:56.170
of stuff up there. The,
the query language is pretty

467
00:25:56.170 --> 00:25:58.450
intense, but again, you have
to know what you're going

468
00:25:58.450 --> 00:26:02.380
to query for. He includes
60 different code metrics. So

469
00:26:02.380 --> 00:26:04.960
you've got, you know, your
standard ones, lines of comments,

470
00:26:04.960 --> 00:26:09.850
lines of code this afferent
and efferent coupling. Once I

471
00:26:09.850 --> 00:26:13.300
figured out what that meant,
that was very useful. He's

472
00:26:13.300 --> 00:26:15.760
got a bunch of comp
size stuff that I still

473
00:26:15.760 --> 00:26:19.300
don't quite understand. Like here's
an example, lack of cohesion

474
00:26:19.300 --> 00:26:23.500
of methods, Henderson, seller style
don't know what that means,

475
00:26:23.890 --> 00:26:26.140
but all of these are
comp side things. So for

476
00:26:26.140 --> 00:26:29.190
an academic person, this could
be really, really powerful right

477
00:26:29.200 --> 00:26:32.320
now. The ones I'm focusing
on are things like variables,

478
00:26:32.410 --> 00:26:36.970
fields, complexity, coupling at the
method level, stuff like that.

479
00:26:37.480 --> 00:26:40.900
Wow. He's also got stuff
that's specific to fields versus

480
00:26:40.900 --> 00:26:43.080
properties. So I found a
couple of places where we

481
00:26:43.080 --> 00:26:46.500
were accessing something directly as
a field when we should

482
00:26:46.500 --> 00:26:49.290
have had a property, stuff
like that. I have a

483
00:26:49.290 --> 00:26:52.860
feeling that the bigger our
code gets, the, the better

484
00:26:52.860 --> 00:26:55.350
this tool is going to
perform for us is right

485
00:26:55.350 --> 00:27:03.030
now, I've got a five
15, 20, 25 Karelian specific

486
00:27:03.720 --> 00:27:07.500
DLLs for the project that
I'm looking at 10 Kirlian

487
00:27:07.500 --> 00:27:10.920
framework DLLs. I'm also using
the I'm using this tool

488
00:27:10.920 --> 00:27:14.730
on the Microsoft best practices
library. Cause I use the

489
00:27:14.730 --> 00:27:18.030
enterprise library for the best
practices. And then I've also

490
00:27:18.030 --> 00:27:21.480
included all of the.net framework
underneath it. And this really

491
00:27:21.480 --> 00:27:23.460
gives you an idea of
what you're leaning on. Like

492
00:27:23.460 --> 00:27:25.290
I'm just by looking at
this, I can see that

493
00:27:25.560 --> 00:27:29.760
we're using system dot XML,
58 different members within our,

494
00:27:29.760 --> 00:27:31.800
one of our applications. I
can see how heavily am

495
00:27:32.790 --> 00:27:34.980
actually. One thing that's helped
me with yesterday was figuring

496
00:27:34.980 --> 00:27:39.540
out if I were to
remove a component and put

497
00:27:39.540 --> 00:27:42.450
in a third party component,
how much trouble is it

498
00:27:42.450 --> 00:27:44.370
going to be? Yeah. What
would the impact be? Cause

499
00:27:44.370 --> 00:27:46.800
see, this is the thing
you've got lots of refactoring

500
00:27:46.800 --> 00:27:50.190
tools out there. That'll tell
you, I can fix this

501
00:27:50.190 --> 00:27:53.490
problem, but you got to
know the problem. This tool

502
00:27:53.490 --> 00:27:55.260
will tell you all the
problems, but of course it

503
00:27:55.260 --> 00:27:57.540
won't fix them. So somebody
needs to get this guy

504
00:27:57.540 --> 00:28:00.750
together with Mark Miller, right. To
make a tool that actually

505
00:28:00.750 --> 00:28:03.000
not only tells you what's
wrong, but how to fix

506
00:28:03.000 --> 00:28:07.200
it. Wow. Amazing Scott. Yeah.
I really think that in

507
00:28:07.200 --> 00:28:09.240
Microsoft's doing this kind of
stuff internally, you know, they've

508
00:28:09.240 --> 00:28:12.600
got so many people talking
about static analysis, they talked

509
00:28:12.600 --> 00:28:16.590
about it at PDC in
tech ed last year. There's

510
00:28:16.590 --> 00:28:19.590
so much that can be
done. We're just touching, just

511
00:28:19.590 --> 00:28:22.350
touching the surface. Other tools
that are like this of

512
00:28:22.350 --> 00:28:26.010
course are latics L a
T T I X originally

513
00:28:26.010 --> 00:28:28.950
a Java tool. There's a.net
version as well. And they

514
00:28:28.950 --> 00:28:32.370
might be considered a competitor
to this guy, but I'm

515
00:28:32.370 --> 00:28:34.860
just enamored with this particular
one because I guess it's

516
00:28:34.860 --> 00:28:37.890
one French guy, his name
and what is his name?

517
00:28:37.890 --> 00:28:44.370
Patrick <inaudible>. He wrote a
book on dotnet to his,

518
00:28:44.460 --> 00:28:47.130
his pricing is pretty reasonable.
It looks like he says

519
00:28:47.130 --> 00:28:50.100
zero to 99. So I
guess that's $400 for an

520
00:28:50.100 --> 00:28:53.070
arrest. But if you buy
like four licenses, it goes

521
00:28:53.070 --> 00:28:55.410
down to 300 bucks and
what's the shrinks or to

522
00:28:55.410 --> 00:28:59.400
his website again. So his
website is at <inaudible> dot

523
00:28:59.400 --> 00:29:02.520
com slash Moz, but it's
easier to get to it

524
00:29:02.520 --> 00:29:07.530
just at <inaudible> dot com.
Oh, okay. Very easy. Alright,

525
00:29:07.560 --> 00:29:10.590
great. Yeah, Scott, that's awesome.
Maybe we should do a

526
00:29:10.590 --> 00:29:13.020
DNR TV on it. So
that's a really great idea

527
00:29:13.380 --> 00:29:15.600
because the more I learn
about how this works, even

528
00:29:15.600 --> 00:29:17.880
though he's got a lot
of scraped screencast, maybe I

529
00:29:17.880 --> 00:29:19.530
can do one where I
can maybe look at DAS

530
00:29:19.530 --> 00:29:22.920
blog and actually fix the
problem. That'd be great while

531
00:29:22.920 --> 00:29:25.320
we do it. How cool
would that be? Alright, thanks

532
00:29:25.320 --> 00:29:28.080
Scott. And we'll see you
next week on handsome man.

533
00:29:28.190 --> 00:29:35.240
<inaudible>.

