WEBVTT FILE

1
00:00:12.060 --> 00:00:17.310
From hanselminutes.com. It's Hansel minutes.
Oh, weekly discussion with web

2
00:00:17.310 --> 00:00:21.900
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:21.900 --> 00:00:28.680
number 400 recorded live Thursday,
November 28th, 2013. This episode of Hansel

4
00:00:28.680 --> 00:00:31.470
minutes is brought to you
by Telleria offering the best

5
00:00:31.470 --> 00:00:40.260
in developer tools and support
online@telerikdotcomandbyfranklins.net makers of gesture pack

6
00:00:40.500 --> 00:00:44.220
a powerful gesture, recording and
recognition system for Microsoft connect

7
00:00:44.250 --> 00:00:51.090
for windows developers details@gesturepak.com. In
this episode, Scott talks with

8
00:00:51.090 --> 00:00:54.930
Microsoft developer, Dino Vila about
the new open source, no

9
00:00:54.950 --> 00:00:59.900
JS tools for visual studio.
Hi, this is Scott Hanselman.

10
00:00:59.900 --> 00:01:01.490
This is another episode of
Hansel minutes. I'm up here

11
00:01:01.490 --> 00:01:04.030
in Redmond on the Microsoft
campus. And I happened to

12
00:01:04.030 --> 00:01:06.650
be talking to Dino villain.
How's it going? Great. Thanks

13
00:01:06.650 --> 00:01:09.170
for having me back. Yeah,
dude, you, you came on

14
00:01:09.170 --> 00:01:12.950
and talked about Python tools
for vs, which freaked people

15
00:01:12.950 --> 00:01:15.530
out. Lots of positivity. There
were actually folks on hacker

16
00:01:15.530 --> 00:01:18.830
news that were like, I
can't believe it. Yeah. It's

17
00:01:18.980 --> 00:01:21.530
people are constantly shocked that
we have one of the

18
00:01:21.860 --> 00:01:24.590
best Python IDs that are
out there Are. And I

19
00:01:24.590 --> 00:01:26.000
said this a little bit
before, but I want to

20
00:01:26.090 --> 00:01:28.610
dig in like, are you
guys sneaking under the, like,

21
00:01:28.640 --> 00:01:30.350
has somebody, has no one
noticed you yet? Like you

22
00:01:30.350 --> 00:01:34.400
under the radar? No, they
noticed us and they continued

23
00:01:34.430 --> 00:01:37.850
to fund us for some
reason. It's, you know, we

24
00:01:38.210 --> 00:01:41.480
are making Can people happy
with our tools and making

25
00:01:41.480 --> 00:01:43.520
it a little bit easier
to work in the Microsoft

26
00:01:43.520 --> 00:01:46.640
ecosystem. How many people are
you guys? So we have

27
00:01:46.640 --> 00:01:50.870
a team of four developers,
two testers and one. Okay.

28
00:01:50.870 --> 00:01:52.550
And are you the dev
or one of the PM's

29
00:01:52.550 --> 00:01:54.620
or one of the deaths?
One of the deaths. Okay,

30
00:01:54.620 --> 00:01:59.300
cool. So you guys just
came out with no tools

31
00:01:59.720 --> 00:02:03.440
for visual studio. Yup. They
said it would never happen.

32
00:02:04.550 --> 00:02:08.930
Yeah. You know, it was
a great fit for our

33
00:02:08.930 --> 00:02:13.340
team to go off and
conquer. You know, obviously we've

34
00:02:13.340 --> 00:02:16.340
done a lot of work
across the company with node

35
00:02:16.340 --> 00:02:20.780
for windows Azure. We've had
the windows Azure PowerShell SDK

36
00:02:20.810 --> 00:02:23.960
for deploying to it, but
we've been missing a big

37
00:02:23.990 --> 00:02:26.750
piece of having a good
tooling story for it. And

38
00:02:26.750 --> 00:02:29.360
so my team has been
there going off and creating

39
00:02:29.420 --> 00:02:33.290
a tooling for visual studio
for dynamic languages for some

40
00:02:33.290 --> 00:02:35.330
time now. And so it
was something that we could

41
00:02:35.330 --> 00:02:39.260
come in and quickly get
ramped up on and create

42
00:02:39.320 --> 00:02:45.320
a new ID for doing
no development With the Python

43
00:02:45.320 --> 00:02:48.680
stuff. There's this idea of
environments and there's lots of

44
00:02:48.680 --> 00:02:51.620
different choices, different iron Python
or fi Python at this

45
00:02:51.800 --> 00:02:55.850
thing is set up different
run times with node. It's

46
00:02:55.880 --> 00:02:59.860
a little bit more straightforward.
So obviously there are versions

47
00:02:59.860 --> 00:03:03.220
of node, but right now
we're not doing anything with

48
00:03:03.220 --> 00:03:06.160
that. We've just gone a
nice, simple path of just

49
00:03:06.160 --> 00:03:09.070
kind of assuming that you're
on the latest node or

50
00:03:09.070 --> 00:03:12.640
the latest node that we
targeted when we released. And

51
00:03:12.670 --> 00:03:16.390
we just assume one node,
if you had multiple nodes

52
00:03:16.390 --> 00:03:19.390
installed, you could go in
and configure a project so

53
00:03:19.390 --> 00:03:21.460
that it points at a
different node dot ECC and

54
00:03:21.460 --> 00:03:25.180
you run against a different
node. But for things like

55
00:03:25.180 --> 00:03:28.570
IntelliSense against the built in
modules, we just assume right

56
00:03:28.570 --> 00:03:31.120
now, I think it's 10
dot two. One is what

57
00:03:31.120 --> 00:03:34.270
our intelligence is based off
of. So it's not nearly

58
00:03:34.270 --> 00:03:37.800
as flexible, but it doesn't
really need to be. And

59
00:03:37.890 --> 00:03:40.650
the experience generally is freaking
me out because I can

60
00:03:40.650 --> 00:03:43.410
now go file new project
in visual studio, on a

61
00:03:43.410 --> 00:03:46.440
machine I built two weeks
ago and I see iOS

62
00:03:46.440 --> 00:03:49.470
and Android. Cause I put
Xamarin tools on right. I've

63
00:03:49.470 --> 00:03:52.830
got windows door and windows
phone. I've got node and

64
00:03:52.830 --> 00:03:56.730
Python all instead of vs.
Yep. It's just, you can

65
00:03:56.730 --> 00:03:58.770
target anything a year ago.
I couldn't do that. It's

66
00:03:58.770 --> 00:04:01.560
just making me just a
little uncomfortable because I know

67
00:04:01.560 --> 00:04:04.620
that somehow, somehow Microsoft's going
to screw me over in

68
00:04:04.620 --> 00:04:06.900
this, right? Yeah, No. So
I mean, one of the

69
00:04:06.900 --> 00:04:09.030
great things about, you know,
a lot of what you

70
00:04:09.030 --> 00:04:12.690
just mentioned is it's all
open source, right? So the

71
00:04:12.690 --> 00:04:15.630
Python tools are all open
source. The node tools are

72
00:04:15.630 --> 00:04:19.530
all open source. I don't
know about Xamarin vs tooling,

73
00:04:19.530 --> 00:04:22.440
but obviously huge portions of
what they do are actually

74
00:04:22.440 --> 00:04:26.190
all open source. So, you
know, even if we try

75
00:04:26.200 --> 00:04:28.950
to take it away from
you, you could always bring

76
00:04:28.950 --> 00:04:31.890
it back. You could go
and fork our repo and

77
00:04:32.730 --> 00:04:35.550
start adding features that you
want or changing it to

78
00:04:35.550 --> 00:04:38.100
be however you want. And
it's, it's not going away.

79
00:04:38.370 --> 00:04:40.650
So sometimes we'll see runtimes
that are open source, but

80
00:04:40.650 --> 00:04:43.290
not tooling. Yeah. Everything you're
doing is open source. Is

81
00:04:43.290 --> 00:04:46.530
that correct? Yep. Okay. So
I can go file new

82
00:04:46.530 --> 00:04:49.000
project. I go to Java
script. I went, I went,

83
00:04:49.090 --> 00:04:51.060
I ran, it actually ran
around looking for a node

84
00:04:51.060 --> 00:04:55.560
node. Yeah. So it's, you
know, VAs is very language

85
00:04:55.560 --> 00:04:59.880
centric and obviously all of
our JavaScript, you know, all

86
00:04:59.880 --> 00:05:03.120
of our node files and
in dot JS. And so

87
00:05:03.480 --> 00:05:06.990
it's JavaScript, we will probably
make it a little bit

88
00:05:06.990 --> 00:05:10.980
more obvious by putting a
tab under JavaScript that says

89
00:05:10.980 --> 00:05:15.060
node dot JS. So that
it's a little more noticeable,

90
00:05:15.360 --> 00:05:18.300
but I think it'll probably
stay under JavaScript. Yeah. It

91
00:05:18.300 --> 00:05:21.260
just took me a second.
Yeah. And I looked around,

92
00:05:21.270 --> 00:05:23.910
it was all the windows
store, JavaScript stuff. And then

93
00:05:23.910 --> 00:05:27.000
right there, kind of just
chilling, just hanging out this

94
00:05:27.010 --> 00:05:29.280
note. And it was interesting
cause you've got a couple

95
00:05:29.280 --> 00:05:31.470
of things and this was
very intuitive. Once my brain

96
00:05:31.470 --> 00:05:35.340
shifted into the right mode,
it said, Oh new project

97
00:05:35.370 --> 00:05:38.280
from existing node files. It
took me a second, but

98
00:05:38.280 --> 00:05:40.230
now I totally get it
because there isn't a project

99
00:05:40.230 --> 00:05:45.030
file there's no, no. Yup.
And so people, this was

100
00:05:45.030 --> 00:05:48.030
actually something that we kind
of struggled with with early

101
00:05:48.030 --> 00:05:51.450
adopters was how do they
get started? And initially we

102
00:05:51.450 --> 00:05:53.250
just told them, you know,
take your files and drag

103
00:05:53.250 --> 00:05:55.860
them from windows Explorer into
vs. You know, create a

104
00:05:55.860 --> 00:05:59.480
project somewhere. And people are
running into problems with that.

105
00:05:59.690 --> 00:06:01.790
At one point in time,
we were overriding their server

106
00:06:01.790 --> 00:06:04.160
dot JS. And so we
knew we had to make

107
00:06:04.160 --> 00:06:07.220
it really simple to get
going. And so now you

108
00:06:07.220 --> 00:06:10.010
can just go through this
wizard and it will collect

109
00:06:10.010 --> 00:06:12.920
all the files that are
in your project by default,

110
00:06:12.950 --> 00:06:15.860
it'll exclude your node modules
folder because you probably don't

111
00:06:15.860 --> 00:06:19.310
want that in your projects.
And you're constantly struggling with

112
00:06:19.310 --> 00:06:22.580
upgrades and reacting things and
removing things whenever you do

113
00:06:22.580 --> 00:06:26.750
an NPM install. So it's
just right there, it'll suck

114
00:06:26.750 --> 00:06:29.470
everything in and you can
get going. Hmm. And I,

115
00:06:29.530 --> 00:06:32.050
I went and downloaded ghost,
which is kind of the

116
00:06:32.050 --> 00:06:35.020
exciting thing. Does your it's
the project and know that

117
00:06:35.020 --> 00:06:37.690
everyone's jazzed about today, it's
kind of WordPress blogging type

118
00:06:37.690 --> 00:06:39.940
thing except it's written in
node. So I went to

119
00:06:39.940 --> 00:06:42.190
the try ghost or whatever
the ghost website was. I

120
00:06:42.190 --> 00:06:44.470
said, download it, put it
in a folder. I sat

121
00:06:44.470 --> 00:06:45.880
there and I stared at
it for awhile trying to

122
00:06:45.880 --> 00:06:48.490
figure out what to do
next when new node project

123
00:06:48.700 --> 00:06:50.740
pointed at it. And then
it said, well, which of

124
00:06:50.740 --> 00:06:53.500
these files do you want
to be your startup? Yup.

125
00:06:53.590 --> 00:06:55.630
Which is really cool because
ghost doesn't have a server

126
00:06:55.630 --> 00:06:58.720
JS or an app JS
they do is index dot

127
00:06:58.720 --> 00:07:01.570
JS. Cause they want to
be a module potentially. And

128
00:07:01.570 --> 00:07:03.230
I hit index and that
said, would you want to

129
00:07:03.230 --> 00:07:05.950
exclude your node modules? It
seemed like a reasonable idea

130
00:07:06.310 --> 00:07:08.950
hit, okay, hit control five.
And it ran and it

131
00:07:08.950 --> 00:07:13.030
just worked it shelled out
to no DXC, which is

132
00:07:13.030 --> 00:07:15.550
kind of what I would
expect. Could you talk to

133
00:07:15.550 --> 00:07:19.000
me about the components that
would be required for one,

134
00:07:19.000 --> 00:07:21.640
to have language support there's
like debugger and there's the

135
00:07:21.640 --> 00:07:24.880
coloring in the syntax highlighting?
What are all the recipe

136
00:07:25.630 --> 00:07:29.560
for integrating with visual studio?
There's so many different pieces

137
00:07:29.560 --> 00:07:31.960
that you could potentially plug
in. Right? You mentioned kind

138
00:07:31.960 --> 00:07:34.540
of a lot of the
basics that people think of.

139
00:07:35.080 --> 00:07:37.960
There's also things like object
browser, which we don't support

140
00:07:38.000 --> 00:07:40.870
node right now, which can,
you know, you can see

141
00:07:40.870 --> 00:07:44.050
your functions and in class
based languages, you can see

142
00:07:44.050 --> 00:07:47.770
your classes. And potentially we
could map that for JavaScript.

143
00:07:47.770 --> 00:07:51.370
If we see certain patterns,
What's a basic, like when

144
00:07:51.370 --> 00:07:54.130
you think about, I want
node and for the 90%

145
00:07:54.130 --> 00:07:56.710
solution, what did you need
to plug in? I mean,

146
00:07:56.740 --> 00:08:00.070
the basics I think of
are syntax color highlighting, which

147
00:08:00.070 --> 00:08:02.230
we actually get for free
from visual studio because it

148
00:08:02.230 --> 00:08:09.520
already has JavaScript support, IntelliSense
and debugging. I mean, those

149
00:08:09.520 --> 00:08:12.700
are kind of the top
three that are really important.

150
00:08:12.700 --> 00:08:14.290
I mean, those are the
things that I use every

151
00:08:14.290 --> 00:08:17.170
single day when I'm developing.
And if I didn't have

152
00:08:17.170 --> 00:08:19.510
those, I wouldn't really feel
like I, as an ID

153
00:08:20.230 --> 00:08:23.440
to a lesser extent, there's
things like profiling. There's obviously

154
00:08:23.440 --> 00:08:26.350
the project system, which is
pretty big, although, you know,

155
00:08:26.770 --> 00:08:29.800
potentially a little controversial in
some ways, cause some people

156
00:08:29.800 --> 00:08:32.590
like project systems, some people
just like having all of

157
00:08:32.590 --> 00:08:36.340
their files on disc. We
went in the project system

158
00:08:36.340 --> 00:08:39.640
route. Obviously there's a bunch
of benefits of plugging into

159
00:08:39.640 --> 00:08:42.760
other things that are out
there like deployment to windows

160
00:08:42.760 --> 00:08:48.190
Azure. And so those with
dynamic languages and another big

161
00:08:48.190 --> 00:08:51.940
one is the rebel window
where you can do interactive

162
00:08:51.940 --> 00:08:55.110
development very quickly and experiment
and try things out. And

163
00:08:55.110 --> 00:08:57.830
a ripple is like an
immediate Window. It's like an

164
00:08:57.830 --> 00:09:02.180
immediate window on steroids. So
rebel stands for redeveloped print

165
00:09:02.180 --> 00:09:04.790
loop. And if you were
to just fire up, no

166
00:09:04.790 --> 00:09:07.880
dot exi from the command
line, it's the experience that

167
00:09:07.880 --> 00:09:09.710
you get there, where you
can do console dot log

168
00:09:09.710 --> 00:09:12.380
high and you can start
to find functions and whatever.

169
00:09:12.650 --> 00:09:14.960
How do I get into
that in, you know, I'm

170
00:09:14.960 --> 00:09:17.420
not looking for that. Couldn't
find it View other windows

171
00:09:17.420 --> 00:09:22.520
note inter interactive window. No
JS Deba windows. Yes. So

172
00:09:22.520 --> 00:09:25.190
in Python we have a
debug interactive window. We don't

173
00:09:25.190 --> 00:09:27.680
have that yet for note.
Okay. So it's under view

174
00:09:27.680 --> 00:09:31.010
other windows. Yep. Okay. And
is that just a view

175
00:09:31.010 --> 00:09:33.980
on running node by itself?
Yeah. Just starts up a

176
00:09:33.980 --> 00:09:37.160
new note ECC and you
can just go ahead and

177
00:09:37.370 --> 00:09:39.350
plug away and write whatever
code you want. Just remember

178
00:09:39.600 --> 00:09:43.820
It into a window inside
of yes. Oh, node script.

179
00:09:43.820 --> 00:09:47.060
That's running. We have a,
a node, like a JavaScript

180
00:09:47.060 --> 00:09:49.880
file itself, which is communicating
over a socket to the

181
00:09:49.880 --> 00:09:52.760
visual studio process. And so
as you type stuff in,

182
00:09:52.760 --> 00:09:55.490
it sends it to the
node process, it evaluates it

183
00:09:55.550 --> 00:09:58.880
and then it sends it
back. I see. Okay. So

184
00:09:58.880 --> 00:10:02.480
when I hit control F
five and node launches in

185
00:10:02.480 --> 00:10:07.670
the browser launches. Yup. You're
orchestrating that. Yes. Okay. And

186
00:10:07.790 --> 00:10:11.720
does, do I have the
support where I can like

187
00:10:11.750 --> 00:10:15.230
pick different browsers, like asp.net
gives you this kind of

188
00:10:15.230 --> 00:10:20.750
like dropdown for like pick
Chrome Firefox. So For control

189
00:10:20.750 --> 00:10:23.870
F five, I actually think
the answer to that might

190
00:10:23.990 --> 00:10:27.200
be no, but I'm, I'm
not entirely certain off the

191
00:10:27.200 --> 00:10:31.310
top of my head for
<inaudible> the answer I believe

192
00:10:31.310 --> 00:10:35.840
is actually yes. I think
we got this. All right.

193
00:10:36.410 --> 00:10:39.920
So you brought up asp.net.
And one of the interesting

194
00:10:39.920 --> 00:10:43.880
things about our node projects
is that they're actually asp.net

195
00:10:43.880 --> 00:10:50.300
projects. So yes. So for
people who don't know, visual

196
00:10:50.300 --> 00:10:54.230
studio supports flavored projects where
you have a base project

197
00:10:54.230 --> 00:10:57.620
type like C-sharp or VB
or, or Java script or

198
00:10:57.650 --> 00:11:00.470
no JS, and then you
can have flavors on top

199
00:11:00.470 --> 00:11:04.010
of that. And so the
asp.net project system is implemented

200
00:11:04.010 --> 00:11:06.620
as a flavor. And so
it flavors VB or C

201
00:11:06.620 --> 00:11:10.910
sharp usually. And then we
actually add yet another flavor

202
00:11:10.910 --> 00:11:13.760
on top of that so
that we can sand which

203
00:11:13.760 --> 00:11:17.660
the asp.net project system and
remove everything about it that

204
00:11:17.660 --> 00:11:20.240
we don't like. So it'll
inject all of these random

205
00:11:20.240 --> 00:11:22.820
folders into your project system
and we don't want those

206
00:11:22.820 --> 00:11:25.100
to be there and it'll
change colors, a special folder.

207
00:11:25.400 --> 00:11:27.440
Did you just deny those
things? No, we don't want

208
00:11:27.440 --> 00:11:29.630
that. What is it that
you did want, why make

209
00:11:29.870 --> 00:11:32.120
the notes? That's a web
project flavors. Cause it doesn't

210
00:11:32.120 --> 00:11:35.570
sound like it's really an
asp.net project Project. Yes. Yes.

211
00:11:35.570 --> 00:11:38.480
And that's, there's all sorts
of tools which plug in

212
00:11:38.480 --> 00:11:42.440
and recognize web projects. And
so those are the deployment

213
00:11:42.440 --> 00:11:46.040
to windows Azure for cloud
service, for publishing to windows,

214
00:11:46.040 --> 00:11:49.520
Azure websites. Those are the
main things that we really

215
00:11:49.520 --> 00:11:52.430
wanted to get, but it
does bring along that debugging

216
00:11:52.430 --> 00:11:55.480
aspect. You, when you're in
the tools, you'll see the

217
00:11:55.480 --> 00:11:58.510
dropdown, you can select your
web browser and choose it

218
00:11:58.510 --> 00:12:01.270
and launch it either into
Chrome or Firefox or I

219
00:12:01.270 --> 00:12:05.160
E or visual studio built
in patients. And of course,

220
00:12:05.190 --> 00:12:09.240
since we added in an
asp.net, the more emulators choice

221
00:12:09.240 --> 00:12:11.400
you can go and get
like the electric plum emulator

222
00:12:11.400 --> 00:12:15.630
for iPhone, a note as
well, that should work just

223
00:12:15.690 --> 00:12:18.510
cause it's just another, Yes.
I don't quite know how

224
00:12:18.510 --> 00:12:21.270
that is, how that all
comes together. You know, there

225
00:12:21.270 --> 00:12:23.670
could be some work there
where we need something else

226
00:12:23.670 --> 00:12:25.290
to light up to make
it all work, but I

227
00:12:25.290 --> 00:12:27.870
will call you if it
doesn't work. Awesome. That's very

228
00:12:27.870 --> 00:12:31.860
clever though. Now the debugging
part seems kind of impossible

229
00:12:32.160 --> 00:12:36.330
because I get how it
works in.net because I've understood

230
00:12:36.330 --> 00:12:39.570
it all the while. Yup.
Does visual studio really have

231
00:12:39.570 --> 00:12:42.690
deep integration and.net or is
it really that there's a

232
00:12:42.690 --> 00:12:45.570
bright line that says we
support any debugger at all?

233
00:12:45.780 --> 00:12:50.370
So both of those statements
are kind of true. So

234
00:12:50.370 --> 00:12:53.280
visual studio supports any debugger
at all. It has has

235
00:12:53.280 --> 00:12:56.850
a set of interfaces that
you have to implement. And

236
00:12:56.850 --> 00:12:59.670
ultimately you're providing a comm
object, which is your debug

237
00:12:59.670 --> 00:13:02.970
engine and visual studio will
instantiate that and your debug

238
00:13:02.970 --> 00:13:06.810
engine could do whatever it
wants, basically. Okay. The visual

239
00:13:06.810 --> 00:13:09.570
studio ships with a number
of built in debug engines,

240
00:13:09.570 --> 00:13:13.500
obviously it has its native
debug engine. It has its.net

241
00:13:13.530 --> 00:13:18.090
debug engine. And so that
is the builtin support for

242
00:13:18.090 --> 00:13:20.670
those already Built in though
there, but they are still

243
00:13:20.670 --> 00:13:25.950
someone's instance of those things
that they came with it.

244
00:13:25.980 --> 00:13:28.920
Yep. Yep. So there's still
instances of, is that right?

245
00:13:29.130 --> 00:13:33.660
Yes. Yes. So they implement
the same interfaces. Okay. And

246
00:13:33.690 --> 00:13:37.260
visual studio instantiates them in
the same way. And you

247
00:13:37.260 --> 00:13:39.510
know, they go off and
talk to the process and

248
00:13:39.510 --> 00:13:43.350
make all of the debugging
magic happen. So for, for

249
00:13:43.380 --> 00:13:45.360
doing no debugging, we just
had to go off and

250
00:13:45.360 --> 00:13:49.350
implement that again. And we've
done that once with Python

251
00:13:50.670 --> 00:13:55.380
and the, the way we
implement the two experiences is

252
00:13:55.380 --> 00:13:59.640
actually pretty similar. Ultimately for
both of the debuggers, we

253
00:13:59.640 --> 00:14:02.520
were just talking to a
remote process over a socket

254
00:14:03.420 --> 00:14:05.190
in the case of Python,
we had to go and

255
00:14:05.220 --> 00:14:07.560
write the server side of
that, where we're in the

256
00:14:07.560 --> 00:14:11.460
Python process for node, that's
actually all done for us,

257
00:14:11.460 --> 00:14:15.330
which was kind of great
in that it's all in

258
00:14:15.330 --> 00:14:18.390
VA and VA, it exposes
this API, which is very,

259
00:14:18.900 --> 00:14:21.540
The eight is the JavaScript
engine. Right. And not, we're

260
00:14:21.540 --> 00:14:25.230
not using the windows JavaScript,
Right? This is Google's JavaScript

261
00:14:25.230 --> 00:14:28.980
engine, which has been used
inside of node. And it's

262
00:14:29.280 --> 00:14:32.760
the JavaScript engine that joint
ships with every copy of

263
00:14:32.760 --> 00:14:34.740
it. Yeah. This is a
really important thing to remind

264
00:14:34.740 --> 00:14:38.730
people of is this, you're
not doing a node flavor

265
00:14:38.730 --> 00:14:40.890
or a style of, no,
this is no, DXE the

266
00:14:40.890 --> 00:14:43.170
one that you install when
you download node. Yeah. So

267
00:14:43.170 --> 00:14:45.840
if your node works today
on windows, you know, we're

268
00:14:45.840 --> 00:14:48.510
not going and giving you
a different node, everything's just

269
00:14:48.510 --> 00:14:52.160
going to continue to work.
So you're doing the debugging,

270
00:14:52.160 --> 00:14:54.980
You're getting like F nine
for break points and step

271
00:14:54.980 --> 00:14:57.500
over and hover and all
that stuff. Yep. You're going

272
00:14:57.500 --> 00:15:00.740
back over into node and
VA and interrogating it and

273
00:15:00.740 --> 00:15:04.090
asking questions. So It sends
us events based upon things

274
00:15:04.090 --> 00:15:07.090
that happen and we send
it a notifications of what

275
00:15:07.090 --> 00:15:10.510
we want to happen. So
when you hit F nine,

276
00:15:10.510 --> 00:15:12.550
we will go ahead and
send you a set, a

277
00:15:12.550 --> 00:15:15.580
break point here, when you
hit a five, we'll go

278
00:15:15.580 --> 00:15:18.910
ahead and launch node and
connect to its socket. And

279
00:15:18.910 --> 00:15:21.100
then we will send over
all of the break points

280
00:15:21.100 --> 00:15:24.970
that you have set already.
And it will start sending

281
00:15:24.970 --> 00:15:27.850
us events like, you know,
this script has loaded and

282
00:15:27.850 --> 00:15:29.650
then we have to do
a little dance to bind

283
00:15:29.650 --> 00:15:33.490
break points at that point,
binding and rebinding break has

284
00:15:33.490 --> 00:15:36.850
been rather problematic, but because
of us or because of

285
00:15:36.850 --> 00:15:39.700
them, because of them because
of like, so they will

286
00:15:39.700 --> 00:15:44.500
recompile things and they will
bind break points when their

287
00:15:44.500 --> 00:15:47.200
script gets loaded. They'll tell
us, so break point has

288
00:15:47.200 --> 00:15:49.300
been bound and it will
kind of jump around and

289
00:15:49.300 --> 00:15:51.820
we have to jump through
some hoops to fix things

290
00:15:51.820 --> 00:15:55.120
up and keep things looking
normal to you from the

291
00:15:55.120 --> 00:15:57.250
vs side of the world.
So it should feel though,

292
00:15:57.250 --> 00:16:01.000
like anything, yes. Source code
and hit, hit. Yup. Set

293
00:16:01.000 --> 00:16:04.300
your break points. Step in,
step out, step over. We

294
00:16:04.300 --> 00:16:09.490
support conditional breakpoints, kind of
all of the basic things

295
00:16:09.490 --> 00:16:12.430
that you'd expect to be
there When, if I understand

296
00:16:12.430 --> 00:16:15.400
correctly and forgive my ignorance
when I'm opening a JS

297
00:16:15.400 --> 00:16:17.830
file and I get the
coloring, that's a language service.

298
00:16:17.830 --> 00:16:19.660
It gives me that coloring.
And then when I do

299
00:16:19.660 --> 00:16:22.540
kind of IntelliSense and most
of the things, some of

300
00:16:22.540 --> 00:16:25.050
the magic that we do
in the JavaScript engine is,

301
00:16:25.050 --> 00:16:28.840
is chakra. Yup. So how
do you balance that? So

302
00:16:28.840 --> 00:16:32.980
our IntelliSense is actually all
built around chakra, so it,

303
00:16:33.520 --> 00:16:36.490
the way visual studios and
Telus and chakra being the

304
00:16:36.490 --> 00:16:41.470
<inaudible>. Yes, yes. Yeah. And,
and the IntelliSense in visual

305
00:16:41.470 --> 00:16:46.240
studio is built around chakra
to a pretty extreme extent.

306
00:16:46.990 --> 00:16:51.550
It's actually, when you press
dot your code basically runs

307
00:16:51.550 --> 00:16:53.980
in chakra up to the
point where you press dot

308
00:16:54.490 --> 00:16:58.000
and, and then it sees
what expression you're at. And

309
00:16:58.000 --> 00:17:01.210
it knows what that object
is. So your code is

310
00:17:01.210 --> 00:17:04.210
executing. Now there's no side
effects from your code. Cause

311
00:17:04.210 --> 00:17:06.760
it's running on kind of
a modified version of shocker,

312
00:17:06.760 --> 00:17:10.150
actually that doesn't actually do
anything, but if you're doing

313
00:17:10.150 --> 00:17:14.470
comparisons or loops or Evalyn
code, all of that code

314
00:17:14.470 --> 00:17:17.740
will just execute and IntelliSense.
So you can actually get

315
00:17:17.740 --> 00:17:22.150
a pretty amazing IntelliSense experience
because it can understand these

316
00:17:22.150 --> 00:17:26.140
constructs that it couldn't understand
through static analysis. Okay. Now

317
00:17:26.170 --> 00:17:28.690
the flip side to that
is you may potentially have

318
00:17:28.690 --> 00:17:30.160
to run a lot of
code to get up to

319
00:17:30.160 --> 00:17:33.130
that dot. And so if
you're working in a website,

320
00:17:33.190 --> 00:17:35.230
you know, you're probably not
having a huge amount of

321
00:17:35.230 --> 00:17:38.680
JavaScript code. That's running up
to a point with node.

322
00:17:38.680 --> 00:17:40.900
We're starting to see that
we're starting to hit the

323
00:17:40.900 --> 00:17:45.370
limits of where that works.
So as we evolve the

324
00:17:45.370 --> 00:17:47.950
product, we're going to kind
of investigate other ways to

325
00:17:47.950 --> 00:17:49.830
do IntelliSense. And that's kind
of one of the major

326
00:17:49.830 --> 00:17:52.670
things that we have to
figure out post alpha. So

327
00:17:52.670 --> 00:17:55.730
does that mean that the,
the original design of that

328
00:17:55.730 --> 00:17:58.580
was just not right? Or
was it just focused on

329
00:17:58.580 --> 00:18:03.710
client and not on server,
More focused on the client?

330
00:18:03.710 --> 00:18:05.900
I think. And it works
great when it's worked, when

331
00:18:05.900 --> 00:18:10.340
it's just about the client.
It, it is really pretty

332
00:18:10.340 --> 00:18:15.140
amazing in the ways that
it can succeed where other

333
00:18:15.440 --> 00:18:19.910
strategies don't work. So there's
trade offs When it gives

334
00:18:19.910 --> 00:18:21.950
up, though, it says everything
turns yellow. And it just

335
00:18:21.950 --> 00:18:24.530
says that. Yeah. And it'll
just give you the list

336
00:18:24.530 --> 00:18:26.390
of all of the identifiers
that are in the file,

337
00:18:26.420 --> 00:18:28.970
which it can get still
give you a reasonable completion

338
00:18:28.970 --> 00:18:33.350
experience. Right. And that's an
experience that you see in

339
00:18:34.340 --> 00:18:38.090
kind of lesser IDs, right.
Where they don't have, they

340
00:18:38.090 --> 00:18:40.490
don't understand the full language,
but they can still offer

341
00:18:40.490 --> 00:18:43.850
you completions on.by just looking
at what identifiers you've already

342
00:18:43.850 --> 00:18:46.730
used. Why do you think
that we should continue to

343
00:18:46.730 --> 00:18:50.690
push so hard for IntelliSense?
Like IntelliSense is not autotype

344
00:18:50.690 --> 00:18:54.320
ahead or auto-complete, I wouldn't
one solution be to like

345
00:18:54.320 --> 00:18:57.980
just pumped and just give
out. I think IntelliSense is

346
00:18:57.980 --> 00:19:00.830
so great and such a
useful feature that yeah. You're

347
00:19:00.830 --> 00:19:03.800
going to keep fighting for
IntelliSense. Yes, absolutely. I love

348
00:19:03.800 --> 00:19:07.190
IntelliSense. I mean, it, it
makes me so much more

349
00:19:07.190 --> 00:19:09.650
productive, even if I know
just about what I'm going

350
00:19:09.650 --> 00:19:12.140
to type, you know, just,
I can type a little

351
00:19:12.140 --> 00:19:15.110
bit of it and you
know, it's accurate and precise

352
00:19:15.230 --> 00:19:18.230
and time. I bet autocomplete,
unless you've typed it before,

353
00:19:18.500 --> 00:19:20.900
you're probably not going to
get that. Yeah. Yeah. And

354
00:19:20.930 --> 00:19:23.330
I, you know, I just,
I also like it for

355
00:19:23.330 --> 00:19:26.150
just exploring API APIs, right?
Like you want to know

356
00:19:26.150 --> 00:19:29.090
what's there and you haven't
used this object model before

357
00:19:29.090 --> 00:19:31.100
and it's so useful. And
you know, you can see

358
00:19:31.100 --> 00:19:33.920
the functions, you can kind
of move around and the

359
00:19:33.920 --> 00:19:38.480
completion box and see documentation
for things it's, you know,

360
00:19:38.510 --> 00:19:40.880
not just good for coding,
but good for exploring too.

361
00:19:41.840 --> 00:19:44.180
I was pretty impressed with
the, the NPM, the node

362
00:19:44.180 --> 00:19:47.570
package manager experience. I kinda
thought it would look like,

363
00:19:47.600 --> 00:19:50.360
like new get, but it
doesn't, it has kind of

364
00:19:50.360 --> 00:19:53.510
an interesting dialogue box, which
made me start digging into

365
00:19:53.510 --> 00:19:55.670
the story behind this. Cause
it doesn't look like code

366
00:19:55.670 --> 00:19:59.390
that we did. Yeah. So
NPM was contributed to us

367
00:19:59.390 --> 00:20:03.740
through red gate. So interestingly,
there has been a lot

368
00:20:03.740 --> 00:20:07.490
of interest in node tools
for visual studio in general.

369
00:20:07.820 --> 00:20:12.680
And there've been a couple
of other projects that have

370
00:20:13.370 --> 00:20:16.130
been out there a little
bit. So there's actually someone

371
00:20:16.130 --> 00:20:19.580
released something actually called no
JS tools for visual studio

372
00:20:19.850 --> 00:20:24.920
up onto the visual studio
gallery. I believe that person

373
00:20:24.920 --> 00:20:29.030
has now contributed. It's a
guy named Dimitri and I

374
00:20:29.030 --> 00:20:33.200
forget his last name, sorry,
Dimitri, I'll put, I will

375
00:20:33.200 --> 00:20:35.090
hunt down him Demetrius and
give him the respect that

376
00:20:35.090 --> 00:20:39.290
he deserves. And so he's
contributed some bug fixes for

377
00:20:39.290 --> 00:20:42.470
the debugger and other things.
And red gate was also

378
00:20:42.470 --> 00:20:47.200
working on a tool which
is built around. I actually

379
00:20:47.200 --> 00:20:52.060
think it was built off
of PTVs. And so PTVs

380
00:20:52.090 --> 00:20:56.470
the Python tools. Yes. Visual
studio. And so we, you

381
00:20:56.470 --> 00:20:59.230
know, we knew we were
working on these tools and

382
00:20:59.230 --> 00:21:01.420
we saw these popping up.
And so we reached out

383
00:21:01.420 --> 00:21:04.690
to everyone. We saw doing
this and we said, you

384
00:21:04.690 --> 00:21:06.430
know, look, we're working on
it. Would you like to

385
00:21:06.670 --> 00:21:09.460
collaborate with us? And one
of the things that red

386
00:21:09.460 --> 00:21:11.950
gate had already done some
work on was the node

387
00:21:11.950 --> 00:21:17.740
package manager. So we worked
with them and they contributed

388
00:21:17.770 --> 00:21:22.390
the entire feature. Bart Reed
has actually been here this

389
00:21:22.390 --> 00:21:28.930
week, preparing for launch and
fixing bugs and doing bug

390
00:21:28.960 --> 00:21:32.890
bashes with us to try
to find bugs. And so

391
00:21:32.890 --> 00:21:37.240
we just got MPM in
and it's kind of this

392
00:21:37.240 --> 00:21:40.980
cute, awesome contribution. Yeah. I
just, as a disclosure point

393
00:21:40.980 --> 00:21:43.320
for folks that may have
been paying attention, red gate

394
00:21:43.320 --> 00:21:46.980
has, and occasionally sponsors my
blog. I did not know

395
00:21:46.980 --> 00:21:50.250
that. I didn't know that
they were involved in this.

396
00:21:50.970 --> 00:21:52.680
So I thought that was
kind of cool. I discovered

397
00:21:52.680 --> 00:21:55.170
about an hour ago. Wow.
Cause I had called you

398
00:21:55.170 --> 00:21:56.880
like last week, like, Hey,
can you come and do

399
00:21:56.880 --> 00:21:59.220
the podcast? And then I
discovered red gate, but I

400
00:21:59.220 --> 00:22:00.900
don't want anyone to think
that I'm doing anything weird

401
00:22:01.620 --> 00:22:05.070
to do that. I also
thought that the, the ref

402
00:22:05.100 --> 00:22:07.530
the way that you handle
references is really cool because

403
00:22:07.530 --> 00:22:11.040
the node modules note under
scrum modules, folder appears it's

404
00:22:11.040 --> 00:22:12.600
kind of in a ghosty
kind of way. Cause it's

405
00:22:12.600 --> 00:22:14.910
not part of the process.
Yep. So I see it,

406
00:22:15.000 --> 00:22:17.610
it has a little, it
has the same icon as

407
00:22:17.610 --> 00:22:20.610
references does in visual studio.
Yeah. There's a bug in

408
00:22:20.620 --> 00:22:22.920
alpha where it turns into
an open folder when it's

409
00:22:22.920 --> 00:22:26.100
expanded. But It's cool though,
because I feel, I mean,

410
00:22:26.100 --> 00:22:28.140
I'm just giving you like
feedback, cause I've only, I've

411
00:22:28.140 --> 00:22:29.970
been running this thing for
a couple of hours now

412
00:22:30.450 --> 00:22:32.940
because you guys gave me
a build like before we

413
00:22:32.940 --> 00:22:35.700
did the video of the
video, rather than the podcast

414
00:22:35.700 --> 00:22:38.250
that we're doing right now.
And I feel like there's

415
00:22:38.250 --> 00:22:41.760
like the physical representation of
the modules and then there's

416
00:22:41.760 --> 00:22:44.790
the logical tree. And I
really liked that. Like I

417
00:22:44.790 --> 00:22:46.830
want to show the new
game guys that, and they

418
00:22:46.830 --> 00:22:49.170
should do something similar. You
can drill down, you know,

419
00:22:49.170 --> 00:22:52.140
you have your module right
there and then you expand

420
00:22:52.140 --> 00:22:54.120
it and you see all
of its dependencies and you

421
00:22:54.120 --> 00:22:58.110
can keep ongoing. And it's,
it's a nice, condensed view

422
00:22:58.110 --> 00:23:03.030
of everything versus expanding node
modules itself. Right. Where there's

423
00:23:03.030 --> 00:23:05.550
all of these extra folders,
all of these extra files

424
00:23:05.550 --> 00:23:08.670
and it's, it was their
versions too. Yes. I think

425
00:23:08.670 --> 00:23:11.010
that's really cool. So then
it's not, even if you

426
00:23:11.010 --> 00:23:14.340
had some weird versioning where
you had, I'm not weird

427
00:23:14.580 --> 00:23:17.910
if you had, you know,
package a or module a

428
00:23:17.910 --> 00:23:20.340
rather that refers to C
and module B that refers

429
00:23:20.340 --> 00:23:22.200
to, so you'll just see,
see twice And that's fine.

430
00:23:22.350 --> 00:23:25.080
Yeah. And it will even
do things. So it's getting

431
00:23:25.080 --> 00:23:27.900
that information from package dot
Jason, right. It's not just

432
00:23:27.900 --> 00:23:31.440
the files that are on
desk. So if you have

433
00:23:31.500 --> 00:23:33.660
a dependency, but you don't
actually have it on your

434
00:23:33.660 --> 00:23:37.200
computer, it'll show that it's
missing. I noticed that. Yeah.

435
00:23:37.290 --> 00:23:38.790
So it was that, and
I didn't know how to

436
00:23:38.790 --> 00:23:42.180
fix it. Yeah. It, But,
but no, this is a

437
00:23:42.180 --> 00:23:45.530
compliment. I opened up my
command line and I type

438
00:23:45.540 --> 00:23:49.460
node install. And as it
was coming in, somehow you

439
00:23:49.460 --> 00:23:51.910
guys were noticing it. Yeah.
Yup. We are tracking the

440
00:23:51.910 --> 00:23:56.380
changes. And so it, yeah.
Solution Explorer, just updates go

441
00:23:56.380 --> 00:24:00.640
over now Fresh. It was
kind of like rippling through

442
00:24:01.150 --> 00:24:03.670
and even up to today.
Got you. So not only

443
00:24:03.670 --> 00:24:07.180
does the MPM status update
like that in real time.

444
00:24:07.780 --> 00:24:11.410
So does the actual files
on disk? So if you

445
00:24:11.410 --> 00:24:15.580
do an NPM install, whatever,
and it starts creating node

446
00:24:15.580 --> 00:24:19.570
modules, solution Explorer will actually
update in real time as

447
00:24:19.570 --> 00:24:23.170
the files are getting updated,
whereas in a C-sharp or

448
00:24:23.170 --> 00:24:25.330
VB project, you actually do
have to go over there

449
00:24:25.330 --> 00:24:27.460
and press refresh. If you
want to see files that

450
00:24:27.460 --> 00:24:29.230
are on disc, but non
year projects, you guys are

451
00:24:29.230 --> 00:24:31.660
doing a lot of file
watcher. Yes. I thought that

452
00:24:31.660 --> 00:24:33.970
was really cool though. I
just feel very comfortable. Yeah.

453
00:24:34.660 --> 00:24:36.310
I actually eat, to be
honest with you, I hit

454
00:24:36.310 --> 00:24:38.140
a bunch of toolbars and
stuff cause I really just

455
00:24:38.140 --> 00:24:40.330
wanted it to look kind
of, I went into black

456
00:24:40.870 --> 00:24:44.170
mode, like my black theme.
Cause I'm thinking about like,

457
00:24:44.260 --> 00:24:47.800
I wanted it to look
like sublime. Yeah. But more.

458
00:24:48.130 --> 00:24:50.590
Yeah. I feel like you've
succeeded in that. So I've

459
00:24:50.590 --> 00:24:52.900
got debugging and I've got
watches and I've got, you

460
00:24:52.900 --> 00:24:56.380
know yeah. That's another cool
idea. I think about the

461
00:24:56.830 --> 00:25:00.970
NPM thing is a visual
studio solution explores this feature

462
00:25:01.630 --> 00:25:05.410
to open new solution Explorer
windows, actually. And so you

463
00:25:05.410 --> 00:25:08.740
could just go and click
on the MPM window and

464
00:25:08.740 --> 00:25:11.170
you can open a new
solution Explorer window. That's just

465
00:25:11.170 --> 00:25:14.230
scoped to MPN. So you
can kind of have your

466
00:25:14.230 --> 00:25:16.780
solution Explorer with all of
your files over on the

467
00:25:16.780 --> 00:25:19.390
right hand side. And you
could have an MPM window

468
00:25:19.390 --> 00:25:22.030
over on the left hand
side. So you can kind

469
00:25:22.030 --> 00:25:25.690
of have this separate MPM
window where you're managing and

470
00:25:25.690 --> 00:25:29.410
just paying attention to your
packages in one spot. And

471
00:25:29.410 --> 00:25:31.660
it just kind of falls
out of the features of

472
00:25:31.660 --> 00:25:34.630
visual studio. And there are
some things that you don't

473
00:25:34.630 --> 00:25:37.750
have done yet. Like I
opened the Jade views and

474
00:25:37.750 --> 00:25:40.870
they're just kind of chilling.
Yep. Do you think that

475
00:25:40.870 --> 00:25:42.610
you'll get to the point
where people will spend most

476
00:25:42.610 --> 00:25:45.610
of their time in, in,
and using and getting Jade

477
00:25:45.610 --> 00:25:48.310
coloring and like also dot
Jason files in the alpha?

478
00:25:48.850 --> 00:25:51.040
We're not quite there. We're
going to have to go

479
00:25:51.040 --> 00:25:56.500
through and add more classifiers
and things like that. Visual

480
00:25:56.500 --> 00:26:00.190
studio has actually been pretty
good about at getting these

481
00:26:01.510 --> 00:26:06.820
lesser used formats added. They
added less in some update,

482
00:26:07.020 --> 00:26:11.140
like maybe vs update Two.
That was Mads that we

483
00:26:11.140 --> 00:26:14.110
actually that web essentials and
then graduated. It, Was it

484
00:26:14.110 --> 00:26:17.860
web Central's or matrix what
happened? It was web essentials.

485
00:26:17.980 --> 00:26:20.350
Did it as a, we
have this thing called web

486
00:26:20.350 --> 00:26:21.820
centrals that we do it
as we call it like

487
00:26:21.820 --> 00:26:24.550
asp.net labs. Okay. And then
if it's a cool feature

488
00:26:24.550 --> 00:26:26.260
and everyone like RA, they're
like, Hey, you should do

489
00:26:26.260 --> 00:26:28.570
that. You'll graduate the feature.
And then we'll remove it

490
00:26:28.570 --> 00:26:31.600
from Weber central. And then
we put it into VAs

491
00:26:31.600 --> 00:26:34.510
proper. So we're doing crazy
stuff. We have like markdown

492
00:26:34.510 --> 00:26:37.930
right now as a split
screen, then we'll remove it.

493
00:26:38.140 --> 00:26:40.630
Nice. So one of the
things I want to make

494
00:26:40.630 --> 00:26:42.460
sure you guys do, and
we're just now talking about

495
00:26:42.460 --> 00:26:44.040
this for the first time
and it happened to be

496
00:26:44.040 --> 00:26:48.360
recording it, talk to us
because we're actually maybe going

497
00:26:48.360 --> 00:26:50.910
to add the dot Jason
stuff. Okay, great. It might

498
00:26:50.910 --> 00:26:53.570
break you guys. So my
opinion is They can only

499
00:26:53.570 --> 00:26:57.410
have one owner of the
extension. So Mads and friends,

500
00:26:57.530 --> 00:26:58.910
because I think they're going
to do that and they

501
00:26:58.910 --> 00:27:01.340
may beat you to it.
Okay. It would be really

502
00:27:01.340 --> 00:27:05.090
cool to make web essentials
compliment you guys. Cause you've

503
00:27:05.090 --> 00:27:08.060
got that.style thing as well.
It looks kind of like

504
00:27:08.060 --> 00:27:12.260
less, I think web essentials
plus node would be really

505
00:27:12.260 --> 00:27:14.180
complimentary and we should make
sure we don't step on

506
00:27:14.180 --> 00:27:16.700
each other because it will
break. Yeah. So let's, let's

507
00:27:16.700 --> 00:27:20.330
have that conversation because I
think that with the hovering

508
00:27:20.330 --> 00:27:24.860
over CSS and the JavaScript
debugger and the node project

509
00:27:24.860 --> 00:27:28.910
system, Weber sensors could really
be complimentary. And then you've

510
00:27:29.510 --> 00:27:31.700
forgetting about, and I would
hate to say this, but

511
00:27:31.700 --> 00:27:35.420
I just started the sentence
forgetting about asp.net and thinking

512
00:27:35.420 --> 00:27:39.230
about visual studio as a,
kind of a, just a

513
00:27:39.230 --> 00:27:42.740
web ID that handles any
kind of thing you want

514
00:27:42.740 --> 00:27:45.620
to do. Yep. And we
have a, we have the

515
00:27:45.620 --> 00:27:50.630
web express skew. Right. And
one of the, one of

516
00:27:50.630 --> 00:27:52.910
the things that we have
been talking about is how

517
00:27:52.910 --> 00:27:55.250
do we get a free
version of this out there?

518
00:27:55.910 --> 00:27:59.240
So with PTVs we plug
into the integrated shell and

519
00:27:59.240 --> 00:28:03.530
it just works, but the
immigrated shell doesn't have the

520
00:28:03.530 --> 00:28:07.040
JavaScript language service and things
like that. And so we

521
00:28:07.040 --> 00:28:10.310
might at some point try
to get into the web

522
00:28:10.310 --> 00:28:14.540
express skew or try to
start some other skew that's

523
00:28:14.540 --> 00:28:18.320
web centric. But Yeah, you
should not start another skew.

524
00:28:18.770 --> 00:28:21.140
You should talk to my
boss and get into what

525
00:28:21.140 --> 00:28:24.050
we call VWD. Yeah. Yeah.
That sounds like the right

526
00:28:24.050 --> 00:28:27.020
way to go. Because then
ultimately what this is becoming

527
00:28:27.020 --> 00:28:30.470
then is a web powerhouse
for Azure. Yeah. Right. Yep.

528
00:28:30.740 --> 00:28:33.320
And that is a huge
part of our focus. Right.

529
00:28:33.830 --> 00:28:37.130
I mean, we have all
sorts of Azure deployment and

530
00:28:37.130 --> 00:28:39.680
you can, you know, of
course you can use get

531
00:28:39.680 --> 00:28:42.410
to deploy to anything. Yeah.
We just want people to

532
00:28:42.410 --> 00:28:45.380
be happy. I've said this
before I made a joke

533
00:28:45.410 --> 00:28:46.670
earlier, you know, it was
like, we're going to get

534
00:28:46.670 --> 00:28:49.790
paid regardless, you know, until
we get fired for doing

535
00:28:49.790 --> 00:28:53.240
something. So let's just do
awesome stuff until we either

536
00:28:53.240 --> 00:28:55.400
make people successful and happy
and our bosses are happy

537
00:28:55.670 --> 00:28:58.820
or we get canned. Are
aren't you pretty happy? Your

538
00:28:58.820 --> 00:29:03.260
badge still works. Yeah. It's
pretty awesome actually. So what

539
00:29:03.260 --> 00:29:05.250
is, where is the site
they go to COVID plugs.

540
00:29:05.250 --> 00:29:08.000
They go on the website,
Coat flux. It is no

541
00:29:08.000 --> 00:29:13.760
JS tools.co.com, No JS tools.covid.com.
Cool. And by the time

542
00:29:13.760 --> 00:29:16.010
I put this podcast up,
I should have had written

543
00:29:16.010 --> 00:29:19.940
up a blog post about
this. And some people hopefully

544
00:29:19.940 --> 00:29:22.160
will have discovered it and
started playing with it. Yeah.

545
00:29:22.220 --> 00:29:25.790
How often are you going
to update? So we are

546
00:29:25.820 --> 00:29:29.630
probably going to do so
it's going to be a

547
00:29:29.840 --> 00:29:32.450
few months before we get
to beta, most likely, but

548
00:29:32.450 --> 00:29:35.420
we actually have the ability
to put out releases pretty

549
00:29:35.420 --> 00:29:38.870
quickly now, you know, obviously
we're Microsoft and there's some

550
00:29:38.870 --> 00:29:42.670
process involved, but we have
been working on cutting that

551
00:29:42.670 --> 00:29:45.490
process down. And so we
will probably be planning out

552
00:29:45.490 --> 00:29:49.180
builds every couple of weeks.
They won't be as well

553
00:29:49.180 --> 00:29:52.150
tested as kind of our
big, you know, our alpha,

554
00:29:52.150 --> 00:29:54.130
we spend a bunch of
time making sure everything was

555
00:29:54.490 --> 00:29:58.210
working in beta. We'll do
that same thing. But if

556
00:29:58.210 --> 00:30:01.270
you run into an issue
and open a bug, we

557
00:30:01.270 --> 00:30:03.430
will probably fix that bug
pretty quickly. And it will

558
00:30:03.430 --> 00:30:05.350
be out in a developer
release and you can check

559
00:30:05.350 --> 00:30:07.090
it out if you want
to live on the bleeding

560
00:30:07.090 --> 00:30:10.920
edge. And do you think
that there was, well, I

561
00:30:10.920 --> 00:30:13.350
gotta say it, there was
the whole kind of iron

562
00:30:13.350 --> 00:30:16.170
Python iron Ruby thing, and
there was never really a

563
00:30:16.170 --> 00:30:18.660
sense of it was, was
it loved? Was it supported?

564
00:30:18.660 --> 00:30:21.420
Was it cared about those
projects have gone off and

565
00:30:21.420 --> 00:30:25.650
some have succeeded and some
have not. Are these peers

566
00:30:25.650 --> 00:30:28.740
is iron, is his Python
for visual studio tools and

567
00:30:28.890 --> 00:30:32.010
no tools for visual studio
peer projects? Or is this

568
00:30:32.010 --> 00:30:35.040
an experiment here? You know
what I mean? Like, are

569
00:30:35.040 --> 00:30:37.020
they brothers, are they, are
they brothers? Is this just

570
00:30:37.020 --> 00:30:39.300
a younger brother? And they're,
but they're still loved by

571
00:30:39.300 --> 00:30:43.440
the parents. The same Tools
in Python tools are peers

572
00:30:43.440 --> 00:30:45.450
of each other. They share
a bunch of common code

573
00:30:45.450 --> 00:30:48.150
between them. If you went
off to the source code

574
00:30:48.150 --> 00:30:51.420
tab on both of them
and overlayed, the two source

575
00:30:51.420 --> 00:30:53.520
drops on top of each
other, you have a bunch

576
00:30:53.520 --> 00:30:55.440
of files that you would
override, Right? So you needed

577
00:30:55.890 --> 00:30:58.560
Python tools to succeed and
be well and be stable.

578
00:30:58.860 --> 00:31:01.850
And that enabled the note
tools. Yes, Yes. Yes. And

579
00:31:01.850 --> 00:31:04.680
like our project system is
shared and of course our

580
00:31:04.680 --> 00:31:08.130
project system came from something
called MPF proj long ago,

581
00:31:08.910 --> 00:31:14.250
but it has advanced significantly.
So they are two peas

582
00:31:14.250 --> 00:31:17.400
in a pod effectively. Okay.
Younger brother, older brother. Right.

583
00:31:17.820 --> 00:31:25.980
Parents love them the same
<inaudible> I don't have kids.

584
00:31:25.980 --> 00:31:28.530
So I'm thinking about it.
I'm saying that like, you're

585
00:31:28.530 --> 00:31:31.350
not going to like kill
one kid. You're not gonna

586
00:31:31.350 --> 00:31:32.820
get rid of one kid.
You know what I'm saying?

587
00:31:32.910 --> 00:31:36.090
I don't think we'll get
rid of one kid. I'm

588
00:31:36.090 --> 00:31:37.650
just trying to see if
it's an experiment or if

589
00:31:37.650 --> 00:31:39.540
it's a thing just like
Python, where it's like, yeah,

590
00:31:39.540 --> 00:31:42.510
we're really in this to
make it awesome. It's so,

591
00:31:43.020 --> 00:31:44.910
You know, our team is
really into this to make

592
00:31:44.910 --> 00:31:47.580
it awesome. Is also a
bit of an experiment though.

593
00:31:47.580 --> 00:31:51.390
Right. It, you know, we
want to see where it

594
00:31:51.390 --> 00:31:53.880
will go. We want to
see how people react to

595
00:31:53.880 --> 00:31:57.720
it. And if it succeeds
wildly, then you know, I

596
00:31:57.720 --> 00:32:00.000
think, you know, it's not
going to get killed obviously,

597
00:32:00.870 --> 00:32:03.510
but it's like, well, if
people download the thing, then

598
00:32:03.510 --> 00:32:05.340
it's probably not going to.
Yeah. I mean, you know,

599
00:32:05.400 --> 00:32:08.580
if no one cares, then
I can't see us keep

600
00:32:08.580 --> 00:32:10.500
building it. But I think
people are going to care.

601
00:32:10.530 --> 00:32:12.210
That's a good answer. Sure.
And that's not like a

602
00:32:12.210 --> 00:32:15.570
marketing answer because you're a
dev. So if people use

603
00:32:15.570 --> 00:32:17.670
it and love it, and
I assume you guys are

604
00:32:17.670 --> 00:32:21.300
gonna measure that based on
downloads and excitement and issues

605
00:32:21.300 --> 00:32:27.780
and, and, and uptick. Like
people swim. Yeah. Meaning The

606
00:32:27.780 --> 00:32:30.900
visual studio improvement program. Is
that what it's called? Aren't

607
00:32:30.900 --> 00:32:34.830
people clicking the, the software
quality metrics, buttons, letting us

608
00:32:34.830 --> 00:32:36.870
see that they are in
fact use it. Yep. Like

609
00:32:36.870 --> 00:32:40.340
it might get great press,
but the might say six

610
00:32:40.340 --> 00:32:42.320
people use it. Yeah. Yeah.
Cause this is one of

611
00:32:42.320 --> 00:32:45.140
those things installed it and
they never used it. Yeah.

612
00:32:45.620 --> 00:32:47.780
You do see that people
love the Python one. Is

613
00:32:47.780 --> 00:32:49.910
that correct? Yep. So that's
six. That, would it be

614
00:32:49.910 --> 00:32:51.980
fair to say that's a
success? Yes, I think so.

615
00:32:52.130 --> 00:32:55.340
Okay. Cool. So people have
said we would love a

616
00:32:55.340 --> 00:32:58.880
node ID, but your money
put your money where your

617
00:32:58.880 --> 00:33:00.830
mouth is in the sense
of art. All of these

618
00:33:00.830 --> 00:33:05.300
visual studio, people are going
to ask you in that

619
00:33:05.780 --> 00:33:09.530
$0 million, take your $0 million and
your copy of visual studio

620
00:33:09.530 --> 00:33:13.040
that you've got somehow and
make it happen. Yep. Cool.

621
00:33:13.040 --> 00:33:15.650
That's really exciting. Yeah. Well,
thanks so much for chatting

622
00:33:15.650 --> 00:33:18.050
with me today. Thank you,
Scott. This has been another

623
00:33:18.050 --> 00:33:20.420
episode of Hansel minutes and
we'll see you again next

624
00:33:20.420 --> 00:33:20.600
week.

