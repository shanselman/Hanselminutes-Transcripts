WEBVTT FILE

1
00:00:12.060 --> 00:00:17.430
Fromm Hansel minutes.com. It's Hanselman.
It's a weekly discussion with

2
00:00:17.430 --> 00:00:22.350
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:22.350 --> 00:00:26.190
is Lawrence Ryan here to announce
show number 52 recorded Wednesday,

4
00:00:26.190 --> 00:00:32.700
February 20th, 2007. Support for Hanselman is
provided by slash fan software

5
00:00:32.700 --> 00:00:36.960
red carpet subscriptions. The most
comprehensive solution for adding connectivity

6
00:00:36.960 --> 00:00:41.700
to your.net and asp.net applications
with components for every major

7
00:00:41.700 --> 00:00:50.280
internet protocol online@wwwdotnsoftware.com. Support is
also provided by.net developers journal

8
00:00:50.760 --> 00:00:56.700
the world's leading.net developer magazine
online at www dot <inaudible>

9
00:00:56.940 --> 00:01:00.570
dot com. In this episode,
Scott and Carl, talk about

10
00:01:00.600 --> 00:01:06.480
the end to end tracing
format. Hi, this is Carl Franklin

11
00:01:06.480 --> 00:01:09.720
and you're listening to Hansel
minutes from Hansel minutes.com. I'm

12
00:01:09.720 --> 00:01:12.090
here with Scott Hanselman. How
are you, sir? I'm pretty

13
00:01:12.090 --> 00:01:14.640
good. How's it going? Excellent.
Alright, that's down to business.

14
00:01:14.640 --> 00:01:17.730
Hey, quick one. Cool. I
wanna talk about end to

15
00:01:17.730 --> 00:01:22.170
end tracing. You've probably done
tracing like system dot diagnostics

16
00:01:22.170 --> 00:01:25.140
dot trays and stuff like
that. Sure. But I'm more

17
00:01:25.140 --> 00:01:28.110
and more at my company.
We're having to do tracing

18
00:01:28.110 --> 00:01:31.590
amongst multiple machines, multiple services.
We really want to be

19
00:01:31.590 --> 00:01:35.760
able to trace a particular
user like one guy amongst

20
00:01:35.820 --> 00:01:39.090
thousands and thousands of guys
that are online or a

21
00:01:39.090 --> 00:01:43.320
one particular transaction through the
entire system from web server

22
00:01:43.350 --> 00:01:47.370
to web service from web
service to business object, to

23
00:01:47.370 --> 00:01:50.250
maybe another machine or many
machines all the way back

24
00:01:50.250 --> 00:01:52.230
to what we call a
host, but what you would

25
00:01:52.230 --> 00:01:56.160
probably call a database and
a and then back. So

26
00:01:56.430 --> 00:01:59.010
I've been looking into this
kind of stuff. And well,

27
00:01:59.010 --> 00:02:02.280
we use WCF. We use
Indigo in a number of

28
00:02:02.280 --> 00:02:05.730
places and Indigo uses this
thing called end end tracing.

29
00:02:06.360 --> 00:02:08.490
We want to be able
to use end to end

30
00:02:08.490 --> 00:02:13.410
tracing in places that aren't
necessarily Indigo, Indigo related or

31
00:02:13.470 --> 00:02:16.950
WCF related. So it turns
out that, you know, there's

32
00:02:16.950 --> 00:02:19.770
a lot of tracing stuff
that's built into the.net framework

33
00:02:19.800 --> 00:02:26.010
to, Oh, particularly this really
interesting XML format. That's the

34
00:02:26.010 --> 00:02:29.430
end to end tracing format.
It's a, it's an XML

35
00:02:29.430 --> 00:02:32.310
format, but it's not really
XML. It's kind of an

36
00:02:32.310 --> 00:02:36.270
interesting thing. This is part
of the XML writer, trace

37
00:02:36.270 --> 00:02:38.730
listener. It's a, it's a
listener that you add to

38
00:02:38.730 --> 00:02:41.070
your config files, you know,
so you'd go in and

39
00:02:41.070 --> 00:02:43.710
you'd say the listener that
I'm going to be using

40
00:02:43.710 --> 00:02:47.970
for tracing is the system
dot diagnostics dot XML writer

41
00:02:48.000 --> 00:02:53.610
trace listener. And it writes
out XML except the XML

42
00:02:53.610 --> 00:02:58.590
has no root node, right?
It's just the data portion,

43
00:02:58.960 --> 00:03:02.140
right? It's just a fragment.
So it says E trace

44
00:03:02.140 --> 00:03:04.930
event. And then it has
things like the log level

45
00:03:04.930 --> 00:03:07.510
and the source and things
like that. And then a

46
00:03:07.570 --> 00:03:10.540
configurable amount of application data
that you can add into

47
00:03:10.540 --> 00:03:13.120
the trace record. You can
go and say, well, I

48
00:03:13.120 --> 00:03:16.090
just want to see the,
the message headers, the soap

49
00:03:16.090 --> 00:03:18.190
headers, or I want to
see the entire message depending

50
00:03:18.190 --> 00:03:21.640
on the level of logging.
So what's interesting about end-to-end

51
00:03:21.640 --> 00:03:24.520
tracing is that I might
have a well let's use

52
00:03:24.520 --> 00:03:27.610
like an pretend. amazon.com is
kind of a situation. I've

53
00:03:27.610 --> 00:03:30.670
got an asp.net website and
it's going to be doing

54
00:03:30.670 --> 00:03:33.280
some tracing. And I want
to go and say, save

55
00:03:33.280 --> 00:03:36.460
book, that's going to be
an activity that's going to

56
00:03:36.460 --> 00:03:39.850
occur on the web server.
Then we maybe will call

57
00:03:39.850 --> 00:03:42.580
out to another machine that
is running a web service.

58
00:03:43.210 --> 00:03:46.870
We've left that process. We've
left the machine. Maybe within

59
00:03:46.870 --> 00:03:49.840
that machine will call into
a couple of in-process business

60
00:03:49.840 --> 00:03:53.710
objects in the process of
saving our book. And then

61
00:03:54.070 --> 00:03:56.800
maybe I'm going to call
out again to either another

62
00:03:56.800 --> 00:04:00.610
component or I'll call out
into a database, a component

63
00:04:00.610 --> 00:04:04.450
or a data access layer.
This, all of this tracing

64
00:04:04.450 --> 00:04:08.440
activity that could potentially occur
typically goes into a text

65
00:04:08.440 --> 00:04:11.290
file. You've probably done tracing
before, and it's kind of

66
00:04:11.290 --> 00:04:14.830
a hassle to correlate all
that information. This end to

67
00:04:14.830 --> 00:04:18.100
end tracing format. This the
one I'm talking about is

68
00:04:18.100 --> 00:04:20.530
a Microsoft specific one, but
if you Google around for

69
00:04:20.530 --> 00:04:22.870
end to end tracing, you'll
see that more and more

70
00:04:22.870 --> 00:04:26.980
people are interested in this
Oracle and IBM everyone's everyone's

71
00:04:26.980 --> 00:04:29.470
into NDN tracing in this
instance where it is talking

72
00:04:29.470 --> 00:04:33.670
about this Microsoft XML format,
you can write out to

73
00:04:33.670 --> 00:04:39.070
tracing from all of these
different systems. Then open up

74
00:04:39.130 --> 00:04:42.430
a, a tool that actually
comes with the, the windows

75
00:04:42.430 --> 00:04:46.360
SDK it's called the service
trace viewer. It's at shrink

76
00:04:46.360 --> 00:04:50.860
stir slash M M as
in mom, M 45. And

77
00:04:50.860 --> 00:04:52.690
this is a, the service
trace viewer is something that

78
00:04:52.690 --> 00:04:57.910
actually comes with the, the
platform SDK, but it's primarily

79
00:04:57.910 --> 00:05:01.780
used around a WCF services.
But one of the points

80
00:05:01.780 --> 00:05:03.070
that we're going to want
to get across in this

81
00:05:03.070 --> 00:05:06.400
particular podcast is that you
don't need to necessarily use

82
00:05:06.400 --> 00:05:10.420
WCF to get good tracing.
Okay, so you open this

83
00:05:10.420 --> 00:05:12.220
guy up and I've got
them open right now. And

84
00:05:12.220 --> 00:05:14.470
I'm going to go and
say file open. And then

85
00:05:14.470 --> 00:05:17.590
I can just pick a
log file and go and

86
00:05:17.590 --> 00:05:20.380
say file, add file, add,
file, add, and open many

87
00:05:20.380 --> 00:05:22.990
of them. And they'll all
correlate to each other. So

88
00:05:22.990 --> 00:05:24.940
I might have one text
file that came off of

89
00:05:24.940 --> 00:05:27.850
the web server. Another text
file that I got off

90
00:05:27.850 --> 00:05:32.410
of the off of the
database box or off of

91
00:05:32.410 --> 00:05:34.870
the business services box or
off the web services box,

92
00:05:35.350 --> 00:05:38.110
add them all together. And
the trick is this notion

93
00:05:38.110 --> 00:05:42.250
of the correlation manager. There's
this correlation ID, basically, it's

94
00:05:42.250 --> 00:05:45.640
just a goo that lives
a as like a conversation

95
00:05:45.640 --> 00:05:51.100
ID lives in the header
of this particular trace event.

96
00:05:51.580 --> 00:05:54.250
So you need to keep
this goo at the same

97
00:05:54.250 --> 00:05:58.040
as you move from activity
to activity and any activity

98
00:05:58.040 --> 00:06:00.200
that you want to be
correlated, you have the same

99
00:06:00.200 --> 00:06:04.520
good. That's pretty amazing. I'm
looking at the screenshots they

100
00:06:04.520 --> 00:06:06.890
have here on the screenshots
are high. Okay, good. So

101
00:06:06.890 --> 00:06:13.970
the screenshots that you're looking@areupatprobablyashrinkstir.com
slash M 47 and a

102
00:06:14.000 --> 00:06:16.370
notice in the screenshot that
there's a chart. There's like

103
00:06:16.370 --> 00:06:20.300
a graph moving from left
to right where you've got

104
00:06:20.930 --> 00:06:25.610
one activity goes down kind
of the, the Y axis

105
00:06:25.610 --> 00:06:29.120
there. And you've got like
client and that's one process,

106
00:06:29.180 --> 00:06:33.260
multiple activities within that process.
The trick there is using

107
00:06:33.260 --> 00:06:40.640
this correlation manager along with
multiple activity IDs. So basically

108
00:06:40.640 --> 00:06:44.210
you have to transfer control
from one activity to the

109
00:06:44.210 --> 00:06:46.670
next, and this is up
to you to do that.

110
00:06:46.670 --> 00:06:48.170
And this, you have to
do that in your code,

111
00:06:48.620 --> 00:06:52.280
right? You basically have this
correlation ID. When you know

112
00:06:52.280 --> 00:06:54.620
that you're about to jump
out to somewhere else. You

113
00:06:54.620 --> 00:06:57.590
can go and make a
new activity ID, set it,

114
00:06:57.920 --> 00:07:01.160
and then do a trace
dot transfer. So one of

115
00:07:01.160 --> 00:07:03.320
the important aspects of end
to end tracing is the

116
00:07:03.320 --> 00:07:07.880
notion of transferring between an
activity. You know, I might

117
00:07:07.880 --> 00:07:12.590
want to say complete, complete
purchase. That might be the

118
00:07:12.590 --> 00:07:15.320
business level activity, the guy
on the web server, but

119
00:07:15.320 --> 00:07:19.130
the website rather click the
button complete purchase. But within

120
00:07:19.130 --> 00:07:23.960
that might be smaller activities
like verify credit card and,

121
00:07:23.960 --> 00:07:25.550
you know, take money out
of his account and things

122
00:07:25.550 --> 00:07:29.630
like that. So you want
me to transfer between activities,

123
00:07:29.630 --> 00:07:33.470
representing those relationships between the
different events. So you'll start

124
00:07:33.470 --> 00:07:35.390
a new activity and then
you might have a, you

125
00:07:35.390 --> 00:07:37.850
know, a good associated with
that. And you'll create, what's

126
00:07:37.850 --> 00:07:40.460
called a trace source and
you'll, you'll give it some

127
00:07:40.460 --> 00:07:44.900
name. And then you'll stored
in like thread local storage

128
00:07:44.930 --> 00:07:48.170
is this activity ID. And
this is actually sitting right

129
00:07:48.170 --> 00:07:51.050
on the trace object. You've
used system dot diagnostics dot

130
00:07:51.080 --> 00:07:55.640
trace. So in Donna two,
Oh, there's a new static

131
00:07:55.640 --> 00:07:59.030
that's sitting right on trace
called the correlation manager. And

132
00:07:59.030 --> 00:08:01.250
then you can go and
grab the activity ID off

133
00:08:01.250 --> 00:08:03.890
of that. So you say
trace that correlation manager activity

134
00:08:03.890 --> 00:08:05.900
ID, and that's a good
then if you're going to

135
00:08:05.900 --> 00:08:08.720
be doing a new activity,
you know that you're about

136
00:08:08.720 --> 00:08:12.080
to call out somewhere. You
can go and say a

137
00:08:12.620 --> 00:08:16.340
trace transfer. I'm going to
be transferring to another activity

138
00:08:16.730 --> 00:08:19.430
and we'll pass in a
new good. And we'll say

139
00:08:19.430 --> 00:08:21.260
that our activity is going
to stop. And this new

140
00:08:21.260 --> 00:08:24.020
one's going to start up.
So just before you call

141
00:08:24.020 --> 00:08:26.180
out, you do that. And
then getting back to what

142
00:08:26.180 --> 00:08:28.400
you were talking about with
these screenshots, for that to

143
00:08:28.400 --> 00:08:31.340
show up in the trace
viewer as a different activity,

144
00:08:31.340 --> 00:08:35.000
that's what needs to happen.
That transfer of control. Now,

145
00:08:35.060 --> 00:08:38.150
your activity, what you were
doing can continue to work.

146
00:08:38.870 --> 00:08:41.930
Maybe it's doing work, you
know, asynchronously, or you're about

147
00:08:41.930 --> 00:08:45.500
to call out to something
asynchronously the trick. Is that

148
00:08:45.920 --> 00:08:48.200
any activity that you want
to show up in the

149
00:08:48.200 --> 00:08:51.530
viewer as being discreet, it
has to have that particular

150
00:08:51.620 --> 00:08:54.860
new goo. It makes sense.
Yeah. So if you look

151
00:08:54.860 --> 00:08:57.030
at screenshot, you can see
that there are places where

152
00:08:57.030 --> 00:09:00.810
it transferred control off to
another activity, but continue to

153
00:09:00.810 --> 00:09:03.380
work on its own. So,
Scott, let me just interrupt

154
00:09:03.380 --> 00:09:06.530
you real quick here. Applications
for this. I mean the

155
00:09:06.530 --> 00:09:10.310
obvious conspiracy theorist in me
says big brother is watching,

156
00:09:10.310 --> 00:09:14.630
but you know, that's, that's
mundane. The real issue here

157
00:09:14.630 --> 00:09:17.330
is tracing when you have
problems. But exactly when you

158
00:09:17.330 --> 00:09:20.240
get to that point where
you have your website, you

159
00:09:20.240 --> 00:09:23.720
know, the phone starts ringing
off the hook because people

160
00:09:23.720 --> 00:09:26.150
are, it's blowing up in
the shopping cart or something

161
00:09:26.150 --> 00:09:28.310
like that. Do you really
have time to go and

162
00:09:28.310 --> 00:09:31.550
implement a tracing tool? And
if you implement it beforehand,

163
00:09:32.000 --> 00:09:35.630
is there any performance hit
if you're not using it?

164
00:09:35.770 --> 00:09:37.760
Yeah. So you're bringing up
a number of really good

165
00:09:37.760 --> 00:09:39.920
issues now. So before people
blow off your big brother

166
00:09:39.920 --> 00:09:42.140
thing, that's a very valid
point. You always, when you're

167
00:09:42.140 --> 00:09:44.060
dealing with stuff, have to
make sure that you don't

168
00:09:44.060 --> 00:09:48.020
trace important or, or sensitive
data. You know, that's something

169
00:09:48.020 --> 00:09:51.290
that Kirlian is really specializes
in is not doing that.

170
00:09:51.290 --> 00:09:55.040
We've got filters and things
to prevent passwords and credit

171
00:09:55.040 --> 00:09:57.080
cards and things like that
from ever being a, you

172
00:09:57.080 --> 00:10:00.770
know, touching desk. That's very
important aspect of things. Okay?

173
00:10:00.770 --> 00:10:03.110
So you've got a couple
of different questions or different

174
00:10:03.110 --> 00:10:06.650
systems can be named with
these trace sources. So some

175
00:10:06.650 --> 00:10:09.350
thought has to go into
this upfront, but the tray

176
00:10:09.370 --> 00:10:11.660
source will allow you to
go and say, I want

177
00:10:11.660 --> 00:10:15.350
to have different log levels
for different systems. So one

178
00:10:15.350 --> 00:10:17.810
trade source might be the
website. Another might be the

179
00:10:17.810 --> 00:10:22.220
business logic. Another might be
the credit card validation control.

180
00:10:22.670 --> 00:10:25.790
If you're having trouble with
a particular aspect of the

181
00:10:25.790 --> 00:10:28.550
system, you can turn up
logging just for that one

182
00:10:28.550 --> 00:10:30.740
bit, turn it up to
debug or turn it to

183
00:10:30.740 --> 00:10:34.100
warn to let you know
what's, what's going wrong. It's

184
00:10:34.100 --> 00:10:37.460
definitely difficult to go into
a system that already exists,

185
00:10:37.610 --> 00:10:40.460
that hasn't had the thought
put into it and instrument

186
00:10:40.460 --> 00:10:43.580
it for tracing. So this
is definitely something that you

187
00:10:43.580 --> 00:10:48.560
want to think about upfront,
and it might, some people

188
00:10:48.560 --> 00:10:53.000
might disagree with my perspective,
but targeting the trace viewer

189
00:10:53.000 --> 00:10:55.760
is a good way to
get an understanding about what

190
00:10:55.760 --> 00:11:00.020
are you really thinking activity
is it's an easy thing

191
00:11:00.020 --> 00:11:02.000
to go and say, well,
you know, each thread is

192
00:11:02.000 --> 00:11:04.340
an activity, but you have
to ask yourself, do you

193
00:11:04.340 --> 00:11:06.500
want an activity to be
a logical thing or a

194
00:11:06.500 --> 00:11:09.890
physical thing? So actually watching
the trace happen in your

195
00:11:09.890 --> 00:11:12.650
code, even if you're not
looking for a bug can

196
00:11:12.650 --> 00:11:15.680
help you solidify the process.
Yeah, Yeah, absolutely. One of

197
00:11:15.680 --> 00:11:17.360
the things that we're currently
working on and we've had

198
00:11:17.360 --> 00:11:21.020
a little trouble with is
doing tracing within a workflow.

199
00:11:21.380 --> 00:11:24.620
We've found that because the
workflow control uses a thread

200
00:11:24.620 --> 00:11:27.860
dynamic, right? Yeah. It's very
dynamic. We're seeing some of

201
00:11:27.860 --> 00:11:33.470
our activities showing up on
different threads, basically reality. The

202
00:11:33.470 --> 00:11:36.410
logical reality of our business
isn't being reflected very well

203
00:11:36.410 --> 00:11:39.890
in the, in the trace
viewer because threads are being

204
00:11:39.890 --> 00:11:44.540
reused and the activity ID
is staying around. So what

205
00:11:44.540 --> 00:11:47.060
we're having to do is
make sure that our, our

206
00:11:47.120 --> 00:11:50.090
particular messages that we pass
through the system includes this

207
00:11:50.090 --> 00:11:53.620
activity ID. And then when,
when the workflow control the

208
00:11:53.620 --> 00:11:57.550
workflow engine rather wakes up,
we stick our activity ID

209
00:11:57.550 --> 00:11:59.980
back in there to make
sure things line up. So

210
00:11:59.980 --> 00:12:03.190
it's it had us thinking,
well, gosh, even though the

211
00:12:03.190 --> 00:12:06.070
physical reality is that the
workflow control does this. We

212
00:12:06.070 --> 00:12:09.610
really want our logical, you
know, transactions to flow through

213
00:12:09.610 --> 00:12:13.180
this system and look this
way. So some thought about

214
00:12:13.210 --> 00:12:16.780
what exactly is the source
here? Do we even want

215
00:12:16.780 --> 00:12:19.330
to expose the fact that
the workflow is involved or

216
00:12:19.330 --> 00:12:21.820
is it really more about
the activities and controls that

217
00:12:21.820 --> 00:12:24.190
the workflow is doing? So
it has to get you,

218
00:12:24.190 --> 00:12:26.140
you have to think about
what is your root activity

219
00:12:26.470 --> 00:12:29.350
in this case, maybe save
book and then your nested

220
00:12:29.350 --> 00:12:33.280
activities. And do you want
your tray sources to look

221
00:12:33.280 --> 00:12:36.310
at things in the, in
the process level or at

222
00:12:36.310 --> 00:12:41.980
the component level, you can
create also a logical active,

223
00:12:42.010 --> 00:12:46.450
you know, logical operations hanging
off of the, the correlation

224
00:12:46.450 --> 00:12:50.410
manager is this logical operations
stack, the correlation managers, just

225
00:12:50.450 --> 00:12:53.360
the base class of all
of this stuff. Right, right.

226
00:12:53.380 --> 00:12:54.850
It's kind of, it's kind
of the thing that just

227
00:12:54.850 --> 00:12:57.280
makes, makes it easy for
you. It's the, it manages

228
00:12:57.280 --> 00:13:01.780
the, the activity ID. It
manages the storage on, on,

229
00:13:01.780 --> 00:13:05.080
on the call context. And
it includes this logical operation

230
00:13:05.080 --> 00:13:07.990
stack. That basically you just
say I'm about, I'm about

231
00:13:07.990 --> 00:13:11.920
to start a logical operation.
So you call start operation.

232
00:13:11.920 --> 00:13:13.570
It pushes something on the
stack and then you hit

233
00:13:13.720 --> 00:13:17.050
stop operation. Now, this is
a tough topic to talk

234
00:13:17.050 --> 00:13:20.380
about for a, a podcast
or a podcast. No question.

235
00:13:20.590 --> 00:13:23.650
So take a look at
the trace viewer. All the

236
00:13:23.650 --> 00:13:26.500
links are on the site,
shrink stir slash em, 45

237
00:13:26.830 --> 00:13:29.710
46, 47, 48 and 49.
So these are shrink stir

238
00:13:29.770 --> 00:13:35.950
URLs, www dot shrink, stir.com/m
as in mom, M 45

239
00:13:35.950 --> 00:13:41.340
through him 49. These are
different pointers within MSDN to,

240
00:13:41.340 --> 00:13:44.650
to give you information about
tracing and why tracing is

241
00:13:44.650 --> 00:13:47.230
important. You really have to
see this trace viewer to

242
00:13:47.230 --> 00:13:51.340
understand why this, this can
be really powerful. But even

243
00:13:51.340 --> 00:13:54.790
though WCF is kind of
the, the best, greatest example

244
00:13:54.790 --> 00:13:59.440
of tracing in our system,
we don't always have WCF

245
00:13:59.440 --> 00:14:02.110
services talking to each other.
So we've had to go

246
00:14:02.110 --> 00:14:06.430
into our other services that
aren't Indigo services and just

247
00:14:06.460 --> 00:14:11.290
use that particular trace, trace
writer, the XML trace writer,

248
00:14:12.190 --> 00:14:15.160
but the viewer doesn't really
care. It's okay that we're

249
00:14:15.160 --> 00:14:18.430
not using WCF. We can
still use the WCF trace

250
00:14:18.460 --> 00:14:21.130
viewer to do that work.
And that's been really nice.

251
00:14:21.250 --> 00:14:25.030
What's the live service trace
viewer. So, so one of

252
00:14:25.030 --> 00:14:27.160
the things that is kind
of being worked on, and

253
00:14:27.160 --> 00:14:29.860
I'm not really clear if
this is something that is,

254
00:14:31.630 --> 00:14:35.320
is still actively being, being
worked on the, the, the

255
00:14:35.320 --> 00:14:38.290
site is pretty old. But
if you go up to,

256
00:14:38.450 --> 00:14:42.160
I think it's shrink stir
M for B, this is

257
00:14:42.160 --> 00:14:45.820
a trace viewer by two
kind of technology evangelists that

258
00:14:46.000 --> 00:14:48.520
lets you look at the
system live while it's happening.

259
00:14:49.090 --> 00:14:52.540
So you can actually see
the activities as they are,

260
00:14:52.570 --> 00:14:56.660
are going down. And it's
based on a WPF as

261
00:14:56.660 --> 00:15:00.710
well. So they're using WCF
underneath, but WPF. So it's

262
00:15:00.950 --> 00:15:03.830
the painting, the, the model,
the, the, the UI of

263
00:15:03.830 --> 00:15:06.110
this is all Avalon, and
this is done by a

264
00:15:06.110 --> 00:15:08.630
guy named Craig McMurtry, and
then a guy that I've

265
00:15:08.630 --> 00:15:10.670
actually met a couple of
times, he's come to some

266
00:15:10.670 --> 00:15:17.030
Kirlian user's conferences named Victoria,
but touchy. Now the site

267
00:15:17.030 --> 00:15:21.560
is from gosh, 2006, and
it's a beta, I don't

268
00:15:21.560 --> 00:15:23.270
know. Maybe they'll listen to
this and they'll let us

269
00:15:23.270 --> 00:15:26.060
know that it's happening, but
there's actually a channel nine

270
00:15:26.060 --> 00:15:30.020
interview up there on this.
We've got this, this working

271
00:15:30.350 --> 00:15:33.290
internally with our, our stuff.
I don't know if we'll

272
00:15:33.290 --> 00:15:36.140
end up using it. One
of the things that we've

273
00:15:36.140 --> 00:15:38.840
been thinking about, and we're
just brainstorming here is that

274
00:15:39.080 --> 00:15:42.380
of course sticking all of
this XML and text files

275
00:15:42.380 --> 00:15:45.440
may not be ideal, but
because this is all built

276
00:15:45.440 --> 00:15:50.270
into the fundamental dotnet to
O tracing infrastructure, certainly this

277
00:15:50.450 --> 00:15:54.710
XML format could be thrown
into SQL 2005. Sure. And

278
00:15:54.710 --> 00:15:57.740
the, the schema could be
associated with it. This is

279
00:15:57.740 --> 00:16:00.860
something that Patrick Caldwell has been
thinking about. And then you

280
00:16:00.860 --> 00:16:04.850
could do some pretty interesting
querying on SQL server, if

281
00:16:04.850 --> 00:16:07.550
you wanted to do forensics,
like after the fact not

282
00:16:07.550 --> 00:16:10.310
necessarily live, but a couple
of days later, and then

283
00:16:10.460 --> 00:16:13.970
doing some queries, strip out,
maybe all of the activities

284
00:16:13.970 --> 00:16:16.940
that our user did. So
Carl could call in later

285
00:16:16.940 --> 00:16:19.040
and say, Hey, you know,
I transferred some money yesterday.

286
00:16:19.040 --> 00:16:21.440
Can you take a look
at that? We have a

287
00:16:21.440 --> 00:16:24.770
formal auditing process and an
audit log already for things

288
00:16:24.770 --> 00:16:26.930
like financial services. So I
want to make sure you

289
00:16:26.930 --> 00:16:32.000
understand that tracing, that kind
of logging and maybe auditing

290
00:16:32.570 --> 00:16:35.660
for the purposes of making
sure the money got work,

291
00:16:35.690 --> 00:16:37.820
you know, where it needed
to go are really different

292
00:16:37.820 --> 00:16:41.030
things. But if you said,
I saw something weird happen

293
00:16:41.270 --> 00:16:44.810
during my session yesterday, and
we had the log levels

294
00:16:44.810 --> 00:16:48.050
turned on, I could query
the database and then pull

295
00:16:48.050 --> 00:16:52.280
the logs back out as
XML after the fact. Right.

296
00:16:52.820 --> 00:16:56.360
And then do my tracing
and my forensic work afterwards.

297
00:16:56.890 --> 00:16:59.230
That's great. Hey, you know,
just as an aside, I

298
00:16:59.230 --> 00:17:01.990
saw this, the software that
I've installed and it's kind

299
00:17:01.990 --> 00:17:04.240
of intriguing, although I'm not
sure how useful it is.

300
00:17:04.660 --> 00:17:09.220
It's, who's on.com and it's
called who's on you install

301
00:17:09.220 --> 00:17:14.050
it. It's a.net app. It
installs on NIS and it's

302
00:17:14.050 --> 00:17:18.400
sort of like a live
log communication thing. So you

303
00:17:18.400 --> 00:17:20.560
run a class. Yeah. Who's
on your site right now,

304
00:17:21.130 --> 00:17:23.590
A client, and you can
see IP address. You can

305
00:17:23.590 --> 00:17:26.530
hook it up to geographic
information and you can sort

306
00:17:26.530 --> 00:17:30.310
of watch them go through
your website. Some issues with

307
00:17:30.310 --> 00:17:35.080
it I have is that
it scrolls it doesn't when

308
00:17:35.080 --> 00:17:38.080
it scrolls it doesn't like
automatically bring you to the

309
00:17:38.080 --> 00:17:41.320
last item in the list.
Like it scrolls and continuously

310
00:17:41.320 --> 00:17:43.240
leaves the most oldest one
at the top of the

311
00:17:43.240 --> 00:17:45.040
list. Sure. It doesn't seem
to be any way to

312
00:17:45.040 --> 00:17:48.270
sort it or anything. It's
kind of annoying, but a

313
00:17:48.280 --> 00:17:51.660
idea though, the idea is,
is It city of live,

314
00:17:51.690 --> 00:17:54.870
live instrumentation? So, I mean,
and Dan tracing, and what

315
00:17:54.870 --> 00:17:56.970
we're trying to talk about
is, is really the notion

316
00:17:56.970 --> 00:18:00.150
of fully instrumenting your application
so that, you know, what's

317
00:18:00.150 --> 00:18:02.700
going on without having to
get in and make a

318
00:18:02.700 --> 00:18:05.430
live debugging session. And the
tools that you're talking about

319
00:18:05.610 --> 00:18:07.890
end to end, or sort
of like, you know, for

320
00:18:08.160 --> 00:18:10.710
bits and bytes and developer
kind of what's going on

321
00:18:10.710 --> 00:18:13.560
in the code. And I
would say who's on, is

322
00:18:13.560 --> 00:18:16.530
more for like, you know,
ROI business professionals to see

323
00:18:16.530 --> 00:18:18.660
what their, see, how their
websites are being used or

324
00:18:18.690 --> 00:18:21.180
utilized and things like that.
And this brings them, you're

325
00:18:21.180 --> 00:18:24.960
bringing up a good point
because when you instrument your

326
00:18:24.960 --> 00:18:28.830
application, who is your, who
is your, your audience? You

327
00:18:28.830 --> 00:18:30.390
know, you want to instrument
it for the purposes of

328
00:18:30.390 --> 00:18:32.370
the business person who wants
to know, like you say,

329
00:18:32.460 --> 00:18:35.610
who's on the site. We
instead, we like to instrument

330
00:18:35.610 --> 00:18:39.270
things for forensic analysis to
come back later and say,

331
00:18:40.290 --> 00:18:43.770
what exactly happened? How did
that go down? Something weird

332
00:18:43.770 --> 00:18:46.260
happened in the site. And
I want to know exactly

333
00:18:46.260 --> 00:18:49.410
at what point it fell
apart. We can also use

334
00:18:49.410 --> 00:18:52.350
this at some level for,
you know, for some performance

335
00:18:52.350 --> 00:18:55.170
to get a general idea
of, of when something moves

336
00:18:55.170 --> 00:18:58.980
through the site. And I'm
not doing formal performance testing,

337
00:18:59.250 --> 00:19:01.230
but I want to see,
gosh, I spent a long

338
00:19:01.230 --> 00:19:03.570
time on that one in
that one place on that

339
00:19:03.570 --> 00:19:07.950
one service, certainly all of
this stuff is easy to

340
00:19:07.950 --> 00:19:11.700
do a few using WCF.
You just, I'm putting these

341
00:19:11.700 --> 00:19:15.420
sources in your system dot
diagnostic section of your applications,

342
00:19:15.420 --> 00:19:18.000
config, and you just let
it know that you want

343
00:19:18.000 --> 00:19:21.330
activity tracing turned on. And
there's lots of information on

344
00:19:21.540 --> 00:19:24.780
MSD on about how to
do that. Setting up your

345
00:19:24.780 --> 00:19:27.030
trace source allows you to
do things with different log

346
00:19:27.030 --> 00:19:33.090
levels. And then certainly your
existing applications can do this.

347
00:19:33.630 --> 00:19:38.490
Using this XML writer, trace
listener, you can have existing

348
00:19:39.390 --> 00:19:44.040
enterprise services, existing websites that
maybe are going to become

349
00:19:44.820 --> 00:19:48.480
consumers of WCF, or maybe
you have an existing web

350
00:19:48.480 --> 00:19:53.400
service. So if you start
introducing complexity at this level,

351
00:19:53.410 --> 00:19:57.270
like large systems that involve
multiple hops, even if it's

352
00:19:57.270 --> 00:20:01.050
not WCF, you can start
doing end to end tracing.

353
00:20:01.290 --> 00:20:03.570
And even if you not
going to do tracing on

354
00:20:03.570 --> 00:20:06.210
more than one system, even
if end to end to

355
00:20:06.210 --> 00:20:09.210
you is all within one
asp.net application. You know, it'd

356
00:20:09.210 --> 00:20:12.060
be interesting to take some
of the administration tools that

357
00:20:12.060 --> 00:20:15.870
we have that run Hansel
minutes.com plugins some end to

358
00:20:15.870 --> 00:20:18.990
end tracing and get an
idea of how these transactions

359
00:20:19.170 --> 00:20:23.340
flow through the system. Very
good, Scott, thanks a lot.

360
00:20:23.520 --> 00:20:25.470
It's been great shows always.
And we'll see you again

361
00:20:25.470 --> 00:20:27.150
next week on Hansel minutes.

