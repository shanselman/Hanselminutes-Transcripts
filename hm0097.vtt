WEBVTT FILE

1
00:00:12.000 --> 00:00:16.770
From Hanselman, it started calm
it's Hansel minutes, a weekly

2
00:00:16.770 --> 00:00:21.000
discussion with web developer and
technologists. Scott Hanselman hosted by

3
00:00:21.000 --> 00:00:26.910
Carl Franklin. This is Lawrence Ryan announcing
show number 97. Recorded live

4
00:00:27.150 --> 00:00:33.630
Monday, January 14th, 2008. Support for Hansel
minutes is provided by Telerik

5
00:00:33.870 --> 00:00:37.710
rad controls, the most comprehensive
suite of components for windows

6
00:00:37.710 --> 00:00:47.910
forums and asp.net web applications.
online@wwwdottelerik.com. In this episode, Scott

7
00:00:47.940 --> 00:00:53.040
talks with Sean Wildermuth about
ato.net services, AKA project. The

8
00:00:53.040 --> 00:00:59.240
story. Hi, this is Scott
Hanselman and this is another

9
00:00:59.240 --> 00:01:01.430
episode of Hansel minutes. And
this week we'll be talking

10
00:01:01.430 --> 00:01:07.010
about ado.net data services, formerly
project code named Estoria. And

11
00:01:07.010 --> 00:01:09.800
we're talking today with community
member, ado, guy and all

12
00:01:09.800 --> 00:01:14.180
around database brilliance, Sean Wildermuth.
How are you, sir? I'm

13
00:01:14.180 --> 00:01:16.760
good. How are you? I'm
pretty good. It's fine. It's

14
00:01:16.760 --> 00:01:17.990
good to finally get you
on the show. You've been

15
00:01:17.990 --> 00:01:20.600
on DNR a couple of
times and we always hang

16
00:01:20.600 --> 00:01:23.210
out at the conferences, but
haven't had you on the

17
00:01:23.210 --> 00:01:26.840
show. This is a show
97. Now that's amazing. 97

18
00:01:26.840 --> 00:01:29.300
shows. Really. You're helping us
here on the March to

19
00:01:29.300 --> 00:01:31.190
show 100. And what do
you have planned for show

20
00:01:31.190 --> 00:01:34.490
100? I don't know. That's
a good question. Probably a,

21
00:01:34.500 --> 00:01:39.800
a, an introspective retrospective with
a lot of sappy music

22
00:01:39.800 --> 00:01:42.600
and maybe some, maybe a
bloopers show. I don't, I

23
00:01:42.600 --> 00:01:45.500
thought it was a good
question. So you and I

24
00:01:45.500 --> 00:01:48.050
have been talking on, on
the email recently about a

25
00:01:48.050 --> 00:01:52.070
story on project Historia, which
was released with the, the

26
00:01:52.070 --> 00:01:56.390
asp.net three, five extensions, but
isn't explicitly an asp.net three

27
00:01:56.390 --> 00:01:59.750
five thing. And before it
was kind of a, it

28
00:01:59.750 --> 00:02:03.800
was an internal research project,
wasn't it? Well, I don't

29
00:02:03.800 --> 00:02:07.490
know about internal before. It
was a released as ado.net

30
00:02:07.550 --> 00:02:10.280
data services. It was kind
of released to the community

31
00:02:10.280 --> 00:02:12.770
is, Hey, look at this,
tell us if it's interesting

32
00:02:12.770 --> 00:02:17.000
or not. There were some
regional demonstrations of it and

33
00:02:17.330 --> 00:02:19.730
you can kind of play
with the bits to see

34
00:02:19.730 --> 00:02:21.920
what the data team was
up to and kind of

35
00:02:21.920 --> 00:02:26.060
this rest space. Okay. So
let's, let's back up for

36
00:02:26.060 --> 00:02:28.250
a second. Cause not every,
not every listener will know

37
00:02:28.250 --> 00:02:30.950
what rest means, although they
probably have heard the term

38
00:02:30.950 --> 00:02:32.750
rest. I know what it
means. Tell, tell me what

39
00:02:32.750 --> 00:02:35.630
is rest well, rest is
really just a, it stands

40
00:02:35.630 --> 00:02:40.730
for representation, representational, state transfer
of the idea of, or

41
00:02:40.730 --> 00:02:43.430
an Earl based API instead
of a soap based API

42
00:02:43.430 --> 00:02:46.800
for things like web services,
where I can execute a,

43
00:02:47.780 --> 00:02:53.030
a request over HTTP, usually
in a single Earl, that

44
00:02:53.030 --> 00:02:55.130
includes all the information about
the data I want to

45
00:02:55.130 --> 00:02:57.650
come back in a lot
of ways. It's a more

46
00:02:57.650 --> 00:03:03.010
simple representation then soap. It
doesn't have, you know, semantics

47
00:03:03.010 --> 00:03:08.530
for doing some really, for
doing deep levels of security

48
00:03:08.530 --> 00:03:10.780
or, you know, for, I
would like to go to

49
00:03:10.780 --> 00:03:13.690
this place and get this
information or post this information

50
00:03:13.690 --> 00:03:17.080
or whatever the case may
be. The early on in

51
00:03:17.080 --> 00:03:20.500
the, in the soap discussion
in web services, there were

52
00:03:20.590 --> 00:03:23.170
kind of two camps. The
rest camp that thought soap

53
00:03:23.170 --> 00:03:25.480
was too complicated. And so
camp that thought that rest

54
00:03:25.480 --> 00:03:28.690
wasn't mature enough. And I
don't know if that ever

55
00:03:28.690 --> 00:03:33.870
got resolved. Now, rest was
originally a guy's PhD thesis,

56
00:03:33.960 --> 00:03:35.880
and there are a lot
of people who are feel

57
00:03:35.880 --> 00:03:39.000
very strongly about rest as
a, from a purity perspective.

58
00:03:39.510 --> 00:03:41.670
I think Don box calls
them rest of our ans

59
00:03:42.750 --> 00:03:46.140
that, that if it's something
that is POCs P O

60
00:03:46.140 --> 00:03:50.070
X or plain old XML,
where I visit a URL

61
00:03:50.100 --> 00:03:53.730
and some XML comes back,
or I post something to

62
00:03:53.730 --> 00:03:56.730
a URL and something happens
that that's not necessarily a

63
00:03:56.730 --> 00:04:01.620
representation of rest, no pun
intended. Sure. I think it

64
00:04:01.620 --> 00:04:04.410
isn't, isn't it important that
rest lean on some of

65
00:04:04.410 --> 00:04:08.280
the existing HTTP verbs because
there's get and there's posts,

66
00:04:08.700 --> 00:04:10.950
but there's also a whole
series of other verbs that

67
00:04:11.020 --> 00:04:14.700
are not often used and
people who feel very strongly

68
00:04:14.700 --> 00:04:17.610
about rest, usually want those
verbs to have meaning, Is

69
00:04:17.610 --> 00:04:21.000
that correct? To the best
of my knowledge, I'm certainly

70
00:04:21.000 --> 00:04:22.860
not arrest of firing. And
I haven't been in that

71
00:04:22.860 --> 00:04:28.560
camp much. What I do
see is that using all,

72
00:04:28.680 --> 00:04:30.810
all the verbs and really
the four verbs that most

73
00:04:30.810 --> 00:04:34.170
people seem to be most
passionate about are actually obviously

74
00:04:35.580 --> 00:04:40.020
post and get, but also
put and delete which interest

75
00:04:40.110 --> 00:04:43.590
interestingly map very well to
the four verbs and crud

76
00:04:44.340 --> 00:04:50.430
for data access create update
incidentally, Right? Create, read, update,

77
00:04:50.430 --> 00:04:54.990
delete. Yeah, read. I was
missing one of them. There's

78
00:04:54.990 --> 00:04:57.180
this, there's this discussion about
rest, but let's move more

79
00:04:57.180 --> 00:05:00.540
to the pragmatic. If I
understand correctly here that people

80
00:05:00.540 --> 00:05:04.380
who, who initially are exposed
to ado.net data services, they

81
00:05:04.380 --> 00:05:06.660
think that they check a
box and then your database

82
00:05:06.660 --> 00:05:09.780
is available via web services.
I'm sure that's an oversimplification.

83
00:05:10.530 --> 00:05:13.830
Is that what we're talking
about? Inaccurate to say that

84
00:05:14.160 --> 00:05:17.610
because really what, what a
story it does is allows

85
00:05:17.610 --> 00:05:20.700
you to take some data
model, whether that is entity

86
00:05:20.700 --> 00:05:24.360
framework based or in the
bits that should be coming

87
00:05:24.360 --> 00:05:28.110
soon, they've promised to give
us a link for SQL

88
00:05:28.110 --> 00:05:33.660
based data models and then
expose them over rest or

89
00:05:33.660 --> 00:05:37.200
over, over the web. So
it's not about taking the

90
00:05:37.260 --> 00:05:39.660
objects that are in your
database, but the objects that

91
00:05:39.660 --> 00:05:43.260
you use normally in.net code
and then exposing them via,

92
00:05:44.430 --> 00:05:48.720
via a web interface. Okay.
So a lot of people

93
00:05:48.960 --> 00:05:52.170
think about the coopertition that
happens at Microsoft. The idea

94
00:05:52.170 --> 00:05:54.870
that this team is cooperating,
but also competing with this

95
00:05:54.870 --> 00:05:59.360
other team. And they wonder
sometimes there a master plan.

96
00:05:59.690 --> 00:06:01.280
And sometimes I think that
there's a master plan and

97
00:06:01.280 --> 00:06:03.230
otherwise, other times I think
that people are just doing

98
00:06:03.230 --> 00:06:04.940
the best they can to
come up with cool stuff.

99
00:06:05.480 --> 00:06:07.850
And I was initially kind
of suspicious about this project.

100
00:06:07.850 --> 00:06:10.220
And I was thinking, how
is this good idea? You

101
00:06:10.220 --> 00:06:12.650
know, is this going to
compete with LinkedIn SQL or

102
00:06:12.650 --> 00:06:15.650
compete with entity framework? And
sometimes people think that link

103
00:06:15.650 --> 00:06:18.050
to SQL and entity framework
are competing with each other,

104
00:06:18.470 --> 00:06:21.680
but you brought up a
really interesting point that while

105
00:06:21.680 --> 00:06:24.230
linked to SQL might allow
you to see more of

106
00:06:24.230 --> 00:06:26.000
the physical aspects of your
database. If you have a

107
00:06:26.000 --> 00:06:29.270
product table, you might end
up with products, objects, the

108
00:06:29.270 --> 00:06:32.090
entity framework provides you with
a layer of abstraction, right?

109
00:06:32.090 --> 00:06:34.640
That gives you a, a
logical data model that it

110
00:06:34.640 --> 00:06:36.320
may very well be different
from what's going on in

111
00:06:36.320 --> 00:06:40.720
the database. Correct. And, and
also provide a abstraction between

112
00:06:40.720 --> 00:06:43.780
changes of the database and
what memory objects you're using

113
00:06:43.780 --> 00:06:48.850
in the in.net code traditionally.
So then the ado.net data

114
00:06:48.850 --> 00:06:52.300
services or project extort can
sit on currently on the

115
00:06:52.300 --> 00:06:54.610
entity framework, but in the
future, on the near future

116
00:06:54.610 --> 00:06:56.560
on top of linked to
SQL as well, it's a

117
00:06:56.560 --> 00:06:59.350
layer on top of both
of those, Correct. In fact,

118
00:06:59.350 --> 00:07:02.110
the, what they have publicly
said is that it should

119
00:07:02.110 --> 00:07:04.930
be able to be, to
sit on top of any

120
00:07:05.090 --> 00:07:09.910
queryable data source. So you
can imagine any link for

121
00:07:09.910 --> 00:07:14.500
SQL enabled, I'm sorry, any
linkable objects, so that if

122
00:07:14.500 --> 00:07:17.020
you took a M L
V gen pro, if you

123
00:07:17.020 --> 00:07:20.170
took the link for Amazon
stuff, you could throw a

124
00:07:20.170 --> 00:07:23.320
story on top of all
of that. Hmm, interesting. So

125
00:07:23.320 --> 00:07:26.860
even though it's called ado.net
data services, it's not tied

126
00:07:26.860 --> 00:07:29.620
to ado. You could use
any data source, whether it

127
00:07:29.620 --> 00:07:31.990
be a file or a
web service or something that

128
00:07:32.170 --> 00:07:34.450
can be used to be
a link. You use the

129
00:07:34.450 --> 00:07:37.330
term, I queriable being an
interface that you have to

130
00:07:37.330 --> 00:07:41.350
implement in order to be
involved in a link query.

131
00:07:41.350 --> 00:07:43.450
So then anything that I
have that can be involved

132
00:07:43.450 --> 00:07:45.970
in a link query could
then be exploited with the

133
00:07:45.970 --> 00:07:49.840
ado.net data services. That's on
their roadmap. That isn't the

134
00:07:49.840 --> 00:07:52.600
way it quite works today.
But my understanding is that's

135
00:07:52.600 --> 00:07:56.080
the way it will work
by release. Okay. So then

136
00:07:56.080 --> 00:07:58.000
you think about what are
some of the other things

137
00:07:58.000 --> 00:07:59.770
I could serialize this, that
I might not want to

138
00:07:59.770 --> 00:08:02.770
necessarily serialize it as XML,
I might want to serialize

139
00:08:02.770 --> 00:08:06.460
it as, as Jason, as
JavaScript object notation. Can I,

140
00:08:06.460 --> 00:08:08.710
can I do that as
well? You can. And in

141
00:08:08.710 --> 00:08:11.680
fact, they've taken kind of
an interesting approach there. The

142
00:08:11.680 --> 00:08:14.110
current bits that are out
there today actually see realizing

143
00:08:14.350 --> 00:08:19.090
only two formats, Jason, and
I'm an XML representation that

144
00:08:19.090 --> 00:08:25.360
is actually based on Adam.
It's not an old actually,

145
00:08:25.360 --> 00:08:27.610
I don't know what that
stands for. It's a syndication

146
00:08:27.610 --> 00:08:30.730
format similar to RSS, Right?
I don't think Adam actually

147
00:08:30.730 --> 00:08:34.000
stands for anything. I think
that's Sam, those guys just

148
00:08:34.000 --> 00:08:35.890
made the name and it
fits, it's not RSS. It's

149
00:08:35.890 --> 00:08:38.890
an, it's a syndication format.
It is a syndication format.

150
00:08:39.670 --> 00:08:43.960
And again, on the roadmap
is they're looking at whether

151
00:08:43.960 --> 00:08:46.330
to support plain old XML,
as well as this early

152
00:08:46.480 --> 00:08:49.630
serialization format. So you can
think about with kind of

153
00:08:49.630 --> 00:08:52.630
the Ajax ossification of the
web in the last few

154
00:08:52.630 --> 00:08:56.250
years and how hot that
was. If had data sitting

155
00:08:56.400 --> 00:09:00.270
somewhere in your backend, some
of your services that you

156
00:09:00.270 --> 00:09:03.000
wanted to be able to
get at from the client,

157
00:09:03.000 --> 00:09:06.990
from whether it's an Ajax,
whether it's a rich client

158
00:09:07.980 --> 00:09:13.230
like us, silver light, or
even, even flash or flex.

159
00:09:14.010 --> 00:09:16.680
The idea here is that
you can make simple web

160
00:09:16.710 --> 00:09:19.590
requests up and get data
back. Now, the important part

161
00:09:19.620 --> 00:09:22.870
about the way a story
is different than this is,

162
00:09:22.870 --> 00:09:26.250
it's really talking about exposing
end endpoints. So let's say

163
00:09:26.250 --> 00:09:29.190
if I had a product
end point, instead of saying,

164
00:09:29.370 --> 00:09:32.250
I'm going to expose a
web service method that says,

165
00:09:32.280 --> 00:09:36.870
get products by date or
get products for this customer,

166
00:09:36.870 --> 00:09:40.110
or get products from this
supplier. And what's happened in

167
00:09:40.110 --> 00:09:43.440
the web service space is
people often have had to

168
00:09:43.440 --> 00:09:47.070
create and pollute their API
layer with lots of different

169
00:09:47.070 --> 00:09:50.910
calls, for very specific reasons.
The story, it takes a

170
00:09:50.910 --> 00:09:57.480
different approach, whereas the Earl
or the URI syntax allows

171
00:09:57.480 --> 00:10:00.150
you to specify how you
want to get the data.

172
00:10:00.150 --> 00:10:01.950
So we have this product's
end point. And I may

173
00:10:01.950 --> 00:10:08.970
say in my actual Earl
call, I want the products.

174
00:10:09.060 --> 00:10:12.390
And I want the products
who has a stock less

175
00:10:12.390 --> 00:10:16.050
than five, whose price is
greater than this, order it

176
00:10:16.050 --> 00:10:19.410
by this et cetera, and
even shape the result sets

177
00:10:19.410 --> 00:10:23.520
by asking for, to get,
you know, nested objects as

178
00:10:23.520 --> 00:10:28.260
well. Right? So instead of
you know, this idea of

179
00:10:28.260 --> 00:10:32.220
exposing specific calls or specific
queries out, it's really about

180
00:10:32.220 --> 00:10:36.570
exposing part of your model
out, so that developers using

181
00:10:36.570 --> 00:10:40.770
this from the client can
really get at the kind

182
00:10:40.770 --> 00:10:44.270
of data they need. Okay.
So my initial, as you

183
00:10:44.270 --> 00:10:46.340
were saying, this, my initial
fear was like, okay, now

184
00:10:46.340 --> 00:10:48.470
we're allowing ad hoc sequel.
And when they can just

185
00:10:48.470 --> 00:10:51.290
type it in directly to
your URL, into the address

186
00:10:51.290 --> 00:10:55.820
bar, which I suppose could
be a scenario, but I'm

187
00:10:55.820 --> 00:10:58.100
hearing that there are a
whole series of access management

188
00:10:58.580 --> 00:11:01.310
techniques that would allow you
to expose some of the

189
00:11:01.310 --> 00:11:05.660
options for parameters within a
query, but not ad hoc

190
00:11:05.690 --> 00:11:07.910
queries. I mean, I might
be able to say, give

191
00:11:07.910 --> 00:11:11.180
me order IDs where the
order is this ID or

192
00:11:11.180 --> 00:11:13.580
that ID. But that doesn't
mean just because I can

193
00:11:13.580 --> 00:11:15.620
go and query for any
order ID that I could

194
00:11:15.950 --> 00:11:19.130
potentially start querying for customers
or quoting for products. I

195
00:11:19.130 --> 00:11:22.700
have control over what's going
on By default. It doesn't

196
00:11:22.700 --> 00:11:25.850
expose anything from your model.
And as you design your

197
00:11:25.850 --> 00:11:30.060
story of service or you're
a data services layer, it's,

198
00:11:30.060 --> 00:11:32.780
it's a fairly simple thing
to allow or disallow, both

199
00:11:33.050 --> 00:11:36.500
verbs and nouns. So I
want to expose the products

200
00:11:36.500 --> 00:11:39.200
from my model, but not
the customers. I want to

201
00:11:39.200 --> 00:11:44.960
expose reading, but not writing.
I want to expose updating,

202
00:11:44.960 --> 00:11:48.620
but not inserting things like
that. Now, is this something

203
00:11:48.620 --> 00:11:50.270
that I will be running
on my web server? I

204
00:11:50.270 --> 00:11:53.260
mean, I think that this,
okay, so this is not

205
00:11:53.260 --> 00:11:56.490
something running on SQL server.
No it's running on the

206
00:11:56.490 --> 00:11:59.850
web server because you're occurring
against the model, not against

207
00:11:59.850 --> 00:12:03.300
the database. The fact that
that model becomes a database

208
00:12:03.300 --> 00:12:06.180
call is a side effect,
but it's not, you know,

209
00:12:06.420 --> 00:12:09.420
if you can imagine a
story over link for Amazon,

210
00:12:09.570 --> 00:12:11.400
what's really going to happen
in the background is it's

211
00:12:11.400 --> 00:12:13.710
going to generate a call
to Amazon, not at some

212
00:12:13.710 --> 00:12:17.880
database query. So you're not
putting in, you know, I'm

213
00:12:17.970 --> 00:12:21.150
at hoc sequel, you're putting
in a, this query language

214
00:12:21.420 --> 00:12:23.370
that a story has come
up with to allow you

215
00:12:23.370 --> 00:12:26.940
to look at these items.
It's not generate, it's not

216
00:12:26.940 --> 00:12:28.770
allowing you to put, you
know, straight SQL and, and

217
00:12:28.770 --> 00:12:30.030
putting it in. So you
don't have any of the

218
00:12:30.030 --> 00:12:33.390
problems of, you know, SQL
injection attacks and that sort

219
00:12:33.390 --> 00:12:36.030
of thing. That makes sense.
So definitely it was a

220
00:12:36.030 --> 00:12:38.220
lot of kind of fun,
a lot of fear, uncertainty

221
00:12:38.220 --> 00:12:40.380
and doubt around those words.
It was like, well, you

222
00:12:40.380 --> 00:12:42.480
turn on, you install this
on your SQL server. This

223
00:12:42.480 --> 00:12:44.520
is all not true. Install
this on your SQL server,

224
00:12:44.520 --> 00:12:46.410
push a button and then
everything's available and you can

225
00:12:46.410 --> 00:12:49.230
query it with the browser.
Yeah, We had that. It

226
00:12:49.230 --> 00:12:51.480
was called SQL XML. And
was it a horribly bad

227
00:12:51.480 --> 00:12:57.150
idea that Exactly. So we
install this on our web

228
00:12:57.150 --> 00:13:00.840
server and we, everything is
turned off by default. So

229
00:13:00.840 --> 00:13:03.210
all access to the data
store is turned off. We

230
00:13:03.210 --> 00:13:07.920
can go and initialize our
service and decide what resources

231
00:13:07.920 --> 00:13:10.710
and what access rules we
want. I understand that there's

232
00:13:10.720 --> 00:13:13.830
the notion of containers. So
you can partition your logical

233
00:13:13.830 --> 00:13:16.290
data model and decide what,
what people have access to

234
00:13:17.340 --> 00:13:21.390
and decide which entry point
into the system that you

235
00:13:21.390 --> 00:13:24.840
want to grant access to.
Correct. And then if I

236
00:13:24.840 --> 00:13:27.390
was going to write an
application like a console application,

237
00:13:27.390 --> 00:13:29.700
that would start talking to
it, just like I make

238
00:13:29.700 --> 00:13:33.510
in link to a SQL,
like maybe a North wind

239
00:13:33.540 --> 00:13:36.360
data context, I guess, in,
in a story, I make

240
00:13:36.360 --> 00:13:38.640
a web data context and
then just start talking to

241
00:13:38.640 --> 00:13:42.420
it, like, like any linkable
thing. Well, there's two approaches

242
00:13:42.420 --> 00:13:46.020
here. There is a client
side library and there's one

243
00:13:46.020 --> 00:13:51.660
for, you know, rich clients
that full.net applications. There's also

244
00:13:51.660 --> 00:13:55.170
one for Silverlight that was
just released. That is still

245
00:13:55.170 --> 00:13:57.990
a bit influx where you
have that notion of context.

246
00:13:58.980 --> 00:14:01.710
You know, the other thing
you also have is it's

247
00:14:01.710 --> 00:14:05.580
just a web call, right?
And so if you ended

248
00:14:05.580 --> 00:14:08.010
up wanting to manage it
yourself, you're just getting data

249
00:14:08.100 --> 00:14:10.320
and you just wanted to
work with, from Java script,

250
00:14:10.350 --> 00:14:14.250
you can just execute web
requests. It's, it's not limited

251
00:14:14.250 --> 00:14:17.670
to simply using their library.
Their library certainly makes it

252
00:14:17.670 --> 00:14:22.270
easier, but when it gets
closer to the metal, it

253
00:14:22.290 --> 00:14:25.020
is just a web request
that returns Jason or XML.

254
00:14:27.210 --> 00:14:29.490
So as someone who thinks
about things, kind of in

255
00:14:29.490 --> 00:14:33.900
a larger architectural context myself,
I always wonder, well, is

256
00:14:33.900 --> 00:14:36.330
this the data access layer?
I mean, ordinarily, I would

257
00:14:36.330 --> 00:14:38.880
write that, that layer, and
then we'd have this translation

258
00:14:38.880 --> 00:14:41.400
between what's coming out of
the database. And what I

259
00:14:41.400 --> 00:14:44.730
would think of as a
business object, right? More and

260
00:14:44.730 --> 00:14:48.180
more people are using DTS
data transfer objects, which don't

261
00:14:48.180 --> 00:14:51.680
have any, any smarts. They're
not some of the smart

262
00:14:51.800 --> 00:14:55.130
business objects of the, of
the nineties, right? I'm wondering

263
00:14:55.140 --> 00:14:57.470
these entities that are being
moved around as they, as

264
00:14:57.470 --> 00:14:59.390
a, you know, who is
calling this is it, my

265
00:14:59.750 --> 00:15:02.930
business logic is calling my
yesterday a rest service. Is

266
00:15:02.930 --> 00:15:05.570
it my data? Is this
replacing my data access layer?

267
00:15:06.310 --> 00:15:09.310
I don't think so, because
I think, I think the

268
00:15:09.340 --> 00:15:12.460
fact that there's a library
for smart clients is more

269
00:15:12.460 --> 00:15:15.190
for the remote smart client
story. It's not for the

270
00:15:15.430 --> 00:15:19.810
traditional enterprise development. You would
still use your, the business

271
00:15:19.810 --> 00:15:22.420
objects you've always used, and
whether they were generated with

272
00:15:22.420 --> 00:15:28.120
something like LinkedIn SQL the
entity framework, indoc, or LGB

273
00:15:28.900 --> 00:15:31.540
LLB, gen pro, or whatever
the tool was you're using.

274
00:15:31.960 --> 00:15:33.640
Those are still going to
be your business objects in

275
00:15:33.640 --> 00:15:37.630
memory. This is allowing you
to be able to have

276
00:15:37.870 --> 00:15:41.380
access to the same set
of business objects across the

277
00:15:41.380 --> 00:15:44.890
internet. And that's the important
thing. Okay. So this is

278
00:15:44.890 --> 00:15:48.390
about providing access over the
net in the, in the

279
00:15:48.430 --> 00:15:51.550
format that people are now
comfortable with, you know, rest

280
00:15:51.550 --> 00:15:55.150
and Jason and angle brackets.
But this is not necessarily

281
00:15:55.150 --> 00:15:58.750
turning my database access layer
on its ear. If I've

282
00:15:58.750 --> 00:16:01.510
already got a good layer,
this would allow me to

283
00:16:01.510 --> 00:16:04.630
explore that a little more,
but I don't need to,

284
00:16:04.760 --> 00:16:06.700
it's not implying that there's
a new way to do

285
00:16:06.700 --> 00:16:08.740
things entirely on the data
access layer that I should

286
00:16:08.770 --> 00:16:12.730
throw away. Let me put
it this way. That's the

287
00:16:12.730 --> 00:16:15.670
way, that's what I believe
now, as we hear, see

288
00:16:15.670 --> 00:16:18.490
Microsoft guys out of the
data team demo, this, you

289
00:16:18.490 --> 00:16:20.770
may hear a different story,
but I really think the

290
00:16:20.770 --> 00:16:23.740
way they've architected, this is
really about, I've already got

291
00:16:23.740 --> 00:16:25.750
my data. I've got my
data objects that I'm using

292
00:16:25.750 --> 00:16:29.770
in my traditional dotnet development,
my traditional enterprise development, where

293
00:16:29.890 --> 00:16:32.230
we're all in the same
domain, we're all in the

294
00:16:32.230 --> 00:16:35.770
same building sometimes, or maybe
in the same VPN, but

295
00:16:35.770 --> 00:16:37.360
I'd like to be able
to expose some of that

296
00:16:37.360 --> 00:16:41.140
data out to partner sites
or out to customer sites.

297
00:16:41.590 --> 00:16:44.770
And typically I've written a
couple of web pages to

298
00:16:44.770 --> 00:16:46.870
do that. And I'd like
to take my existing data

299
00:16:47.170 --> 00:16:49.240
and then have a way
to transport it across the

300
00:16:49.240 --> 00:16:53.500
internet across 80 or, or
a four 43 and just

301
00:16:53.500 --> 00:16:58.870
make it work. Okay. So
now people may be wondering,

302
00:16:58.870 --> 00:17:02.230
how does this relate to
WCF and to what was

303
00:17:02.230 --> 00:17:06.760
formerly called Indigo? And is
this, is this competing with,

304
00:17:06.790 --> 00:17:10.060
with WCF? It's actually not,
it's actually built on top

305
00:17:10.090 --> 00:17:15.940
of the WCF 3.5 rest
stack. So the reading their

306
00:17:15.940 --> 00:17:18.460
own dog food, this isn't
a whole new invention. They're

307
00:17:18.460 --> 00:17:21.730
using that stuff to actually
build this Well, that's refreshing.

308
00:17:22.090 --> 00:17:26.830
Yeah, it is actually, I
mean, I guess I'm not

309
00:17:26.830 --> 00:17:28.600
supposed to say that as
an employee of the company,

310
00:17:28.600 --> 00:17:31.570
but it's like, Oh, that's
nice. Yeah. It's actually built

311
00:17:31.570 --> 00:17:34.390
on something that we'd already
done W which is, which

312
00:17:34.390 --> 00:17:37.750
is good because a lot
of the same semantics, they're

313
00:17:37.750 --> 00:17:39.820
very comfortable when you look
at, you know, you're looking

314
00:17:39.820 --> 00:17:43.840
at SVC and points, you
can configure them with traditional

315
00:17:43.840 --> 00:17:46.720
WCF, but if you're using
this story of stuff, it

316
00:17:46.720 --> 00:17:50.790
is kind of drop go.
You end up developing a

317
00:17:50.790 --> 00:17:52.890
single class where you write
a little bit of code

318
00:17:52.890 --> 00:17:55.020
that says, I have this
model. These are the parts

319
00:17:55.020 --> 00:17:56.670
of the model I want
to expose. These are the

320
00:17:56.670 --> 00:17:59.520
verbs for the model I
want to expose and you're

321
00:17:59.520 --> 00:18:03.620
done. Okay. So this is
plugging into that WCF rest

322
00:18:03.620 --> 00:18:07.250
stuff. Then it's just using
web service host. And then

323
00:18:07.250 --> 00:18:10.400
it would probably make the
contract that you'd have that

324
00:18:10.490 --> 00:18:15.350
rest endpoint, just a URI
template star. And then a

325
00:18:15.350 --> 00:18:19.340
story. The ado.net data services
would then be allowed to

326
00:18:19.340 --> 00:18:22.010
decide what to do about
that URI. So it looks

327
00:18:22.010 --> 00:18:25.310
like they've generated their own,
not generated. They've designed their

328
00:18:25.310 --> 00:18:29.570
own kind of URI to,
to match what makes them

329
00:18:29.570 --> 00:18:34.310
comfortable. That's my understanding. And
that has over the original

330
00:18:34.310 --> 00:18:37.430
CTP and through the, this
latest version that has morphed

331
00:18:37.430 --> 00:18:39.890
a little as they found
out that it works better

332
00:18:39.890 --> 00:18:42.830
or worse with Firefox or
with IIE or with some

333
00:18:42.830 --> 00:18:45.530
of the other browsers. So
the syntax has been changing

334
00:18:45.530 --> 00:18:48.080
a little over the CTPs
to try to get it

335
00:18:48.080 --> 00:18:52.640
right. There's also some discussion
about, you know, under Firefox

336
00:18:53.630 --> 00:18:57.510
delete and put aren't treated
as first class citizens like

337
00:18:57.530 --> 00:19:00.890
postings are and how to
get around those facts. But

338
00:19:01.130 --> 00:19:03.290
the story is really trying
to handle that underneath the

339
00:19:03.290 --> 00:19:06.710
covers for you. Yeah. I
understand that. Getting those kinds

340
00:19:06.710 --> 00:19:08.900
of things through firewalls, getting
anything other than get her

341
00:19:08.900 --> 00:19:11.120
posts through a firewall also
can be a real challenge.

342
00:19:11.630 --> 00:19:14.360
Yeah. Yeah. And I'm not,
I'm not sure what, where

343
00:19:14.360 --> 00:19:17.390
that will actually get to
or where they'll actually handle

344
00:19:17.390 --> 00:19:19.730
that. Whether everything will be
a post with, you know,

345
00:19:19.740 --> 00:19:23.270
special monikers or what I
think that's something they're still

346
00:19:23.270 --> 00:19:25.220
delving into to try to
determine the best way to

347
00:19:25.220 --> 00:19:30.260
do it. I got most
interested in this because it

348
00:19:30.260 --> 00:19:34.790
seemed like the natural place
to get data for silver

349
00:19:34.790 --> 00:19:38.060
light, because I'm more interested
in the line of business

350
00:19:38.060 --> 00:19:40.340
app story of silver light
than I am the video

351
00:19:40.340 --> 00:19:43.910
player. And being able to
get data from my, from

352
00:19:43.940 --> 00:19:50.300
my servers. You know, when
I'm doing traditional asp.net, I

353
00:19:50.300 --> 00:19:54.050
can, you know, create markup
with HTML and then ship

354
00:19:54.050 --> 00:19:55.760
it out to the server
because I have access to

355
00:19:55.760 --> 00:19:59.900
that from the client because
silver lights written really in

356
00:19:59.900 --> 00:20:03.590
the client space, in the
browser, it's been a challenge,

357
00:20:03.590 --> 00:20:05.300
you know, do you write
a web service for each

358
00:20:05.300 --> 00:20:07.760
and every call? Do you
want to do? It's been

359
00:20:07.760 --> 00:20:10.040
a real compliment to that
as far as I'm concerned.

360
00:20:10.460 --> 00:20:12.080
So this is very good.
This is helping me get,

361
00:20:12.080 --> 00:20:14.120
put this into context because
I was like, what is

362
00:20:14.120 --> 00:20:16.550
this for? What is this
competing with? How has this

363
00:20:16.550 --> 00:20:19.070
complimentary? But it seems if
you're, if you're going to

364
00:20:19.070 --> 00:20:21.830
be doing a lot of
Ajax applications and which means

365
00:20:21.830 --> 00:20:23.810
that you are going to
be exposing a lot of

366
00:20:23.810 --> 00:20:26.780
data on the web, anyway,
this is a really good

367
00:20:26.780 --> 00:20:29.990
choice for getting that data
out. Especially if you have

368
00:20:29.990 --> 00:20:34.250
existing models. Yes. Right. If
you're gonna be using the

369
00:20:34.250 --> 00:20:37.730
same models, I mean, certainly
we have, and one could

370
00:20:37.730 --> 00:20:40.370
be using this, doing this
manually. You can make an

371
00:20:40.370 --> 00:20:42.650
ASM X web service, and
you could expose that as

372
00:20:42.650 --> 00:20:44.840
a, as Jason, you could
do all of this manually

373
00:20:44.840 --> 00:20:48.280
with HTP handlers. But if
you have a good understanding

374
00:20:48.280 --> 00:20:50.770
of what your model looks
like, and you feel comfortable

375
00:20:51.040 --> 00:20:56.110
exposing that, kind of, that,
that mindset, you know, your,

376
00:20:56.320 --> 00:20:58.420
the way you've modeled your
data out to your, to

377
00:20:58.420 --> 00:21:02.260
the web, then this is
a very minimal, minimally difficult

378
00:21:02.260 --> 00:21:04.480
way to do this. I
mean, you install some bits

379
00:21:04.480 --> 00:21:08.680
on your web server, you
pointed at your database, and

380
00:21:08.680 --> 00:21:11.470
then there's a client library
either for.net clients or for

381
00:21:11.470 --> 00:21:16.480
Silverlight that hide the fact
that you're using HTTP. And

382
00:21:16.480 --> 00:21:20.250
then you start querying it.
One of the, one of

383
00:21:20.250 --> 00:21:22.920
the more difficult one I've
talked about this in front

384
00:21:22.920 --> 00:21:25.710
of groups at MSDN events
and such one of the

385
00:21:25.710 --> 00:21:29.460
big questions is, well, how
secure is it? Well, you

386
00:21:29.460 --> 00:21:32.130
know, the reality is you're
bringing data into the client,

387
00:21:32.700 --> 00:21:35.610
which means it's not secure
regardless of the transport mechanism.

388
00:21:35.910 --> 00:21:39.030
If you're bringing in social
security numbers from your employees

389
00:21:39.030 --> 00:21:41.640
and putting them in the
browser, I can look with

390
00:21:41.640 --> 00:21:43.590
a memory profile in three
minutes and see what date

391
00:21:43.590 --> 00:21:46.440
is there a I can't
hack up the JavaScript, whatever

392
00:21:46.440 --> 00:21:49.080
it is. So you still
need to be careful about

393
00:21:49.080 --> 00:21:51.930
what data you're going to
expose via story, because you're

394
00:21:51.930 --> 00:21:55.530
still talking about code that's
running in the client's machine.

395
00:21:55.530 --> 00:21:57.720
And if you don't want
people to look at that

396
00:21:57.720 --> 00:22:01.020
data, you should still be
using the server. You know,

397
00:22:01.110 --> 00:22:04.110
let's say you wanted to
find out the total sales

398
00:22:04.110 --> 00:22:06.450
for our sales department. You're
not going to drop down

399
00:22:06.450 --> 00:22:09.570
all the sales people's information
into the browser, and then

400
00:22:09.570 --> 00:22:12.240
do all the calculations to
show some graph. You're going

401
00:22:12.240 --> 00:22:15.360
to present summary data down
to the browser for a

402
00:22:15.360 --> 00:22:18.060
number of reasons, right? Cause
you're not, I mean, like

403
00:22:18.090 --> 00:22:21.570
you're not exposing you don't
you have control over what

404
00:22:21.630 --> 00:22:23.970
gets exposed. I mean, you're
not like face people don't

405
00:22:23.970 --> 00:22:27.420
freak out because Facebook has
an arrest API. I mean,

406
00:22:27.420 --> 00:22:30.270
you can call Facebook's API
yourself and you can fool

407
00:22:30.270 --> 00:22:33.360
around with the URI and
you can start pulling data

408
00:22:33.360 --> 00:22:35.700
back out of Facebook, but
they're not concerned that you're

409
00:22:35.700 --> 00:22:38.040
going to bring the system
down by doing ad hoc

410
00:22:38.070 --> 00:22:41.190
queries, because, because you can't
do ad hoc queries, correct.

411
00:22:41.190 --> 00:22:42.960
You can get to what
they've chosen to let you

412
00:22:42.960 --> 00:22:46.940
get to via the URI
and nothing else. And this

413
00:22:46.940 --> 00:22:52.470
story is the same with
the story. Yeah. Okay. So

414
00:22:52.470 --> 00:22:58.620
we've got linked to rest
now Sort of, sort of

415
00:22:59.580 --> 00:23:02.910
the it's kind of link
on both ends, which is

416
00:23:02.940 --> 00:23:04.470
kind of the weird part,
because if you wanted to

417
00:23:04.470 --> 00:23:08.100
expose your own sorts of
even verbs, let's say you

418
00:23:08.100 --> 00:23:12.780
wanted to actually implement something
like, you know, get data

419
00:23:14.070 --> 00:23:17.310
that retrieved some very specific,
you know, generated code. You

420
00:23:17.310 --> 00:23:19.320
would still, as far as
the story is concerned, you

421
00:23:19.320 --> 00:23:22.020
would still expose that as
a linkable or an I

422
00:23:22.020 --> 00:23:26.010
query of all interface at
the end so that the

423
00:23:26.010 --> 00:23:27.720
client library is going to
let you do link over

424
00:23:27.720 --> 00:23:29.760
the results. But at the
other end of the wire,

425
00:23:29.760 --> 00:23:33.780
a story is having you
do linked to return, you

426
00:23:33.780 --> 00:23:36.780
know, really a query across
the wire. I see, I

427
00:23:36.780 --> 00:23:39.090
see the serialization format is
what it is, but we've,

428
00:23:39.450 --> 00:23:42.360
we'll be doing link to
the local data on the

429
00:23:42.360 --> 00:23:43.980
client side. And then we
may or may not be

430
00:23:43.980 --> 00:23:47.300
using link on the, on
the end. Actually the reverse

431
00:23:47.600 --> 00:23:49.640
you will be using link
on the backend. You may

432
00:23:49.640 --> 00:23:51.770
or may not be using
it on the cloud. Yeah,

433
00:23:51.830 --> 00:23:56.180
actually, right. Forgive me. You're
absolutely right. Obviously link for

434
00:23:56.180 --> 00:24:00.470
JavaScript is a couple of
weeks away, so, Oh really?

435
00:24:01.160 --> 00:24:03.920
No, I'm kidding. I don't
know when link will work

436
00:24:03.920 --> 00:24:07.580
in Java script. Well, you
know, it's amazing what you

437
00:24:07.580 --> 00:24:09.410
can get down in JavaScript.
It's pretty much blown my

438
00:24:09.410 --> 00:24:11.420
mind. I mean, just when
I just, when I thought

439
00:24:11.420 --> 00:24:13.880
you couldn't do XYZ, someone
writes a complete version of

440
00:24:13.880 --> 00:24:17.330
solitaire entirely and JavaScript. Sure.
So yeah, if it can

441
00:24:17.330 --> 00:24:19.130
be done in JavaScript, I'm
sure that somebody will do

442
00:24:19.130 --> 00:24:23.390
it. Yeah. That, you know,
that could start a whole

443
00:24:23.390 --> 00:24:26.450
different discussion. We could have
on a whole nother experimental

444
00:24:26.450 --> 00:24:29.450
project, but I'll leave that
to another talk. Oh, okay.

445
00:24:29.480 --> 00:24:32.030
Well the little teaser there.
Well, I really appreciate you

446
00:24:32.030 --> 00:24:33.320
taking the time out of
your day to come and

447
00:24:33.320 --> 00:24:35.660
talk to us and I'll
put links to your blog

448
00:24:35.660 --> 00:24:38.060
and up to Mike Glasgow's
blog and the different folks

449
00:24:38.060 --> 00:24:40.850
over on Estoria. And if
you've got any samples or

450
00:24:40.850 --> 00:24:42.470
anything cool that you want
people to see if you

451
00:24:42.470 --> 00:24:44.030
put a post up in
your blog for me, Sean,

452
00:24:44.030 --> 00:24:47.060
and I will link to
it. Sure. I'd also suggest

453
00:24:47.390 --> 00:24:52.340
people link to or visit
Silverlight data.com, which is a

454
00:24:52.340 --> 00:24:55.880
little experimental site. I have
it's silver light using a

455
00:24:55.880 --> 00:24:59.480
story to show database data,
and you can link to

456
00:24:59.480 --> 00:25:04.220
the in download the complete
example. I like examples. Source

457
00:25:04.220 --> 00:25:06.740
code is good. Yep. Well,
thanks for having me. Cool.

458
00:25:06.800 --> 00:25:09.320
Well, thanks so much for
taking the time. And this

459
00:25:09.320 --> 00:25:11.390
has been another episode of
Hansel minutes. We'll see you

460
00:25:11.390 --> 00:25:12.020
again next week.

