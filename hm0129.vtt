WEBVTT FILE

1
00:00:12.050 --> 00:00:18.050
From Hansel minutes.com it's Hansel
minutes, a weekly discussion with

2
00:00:18.050 --> 00:00:23.840
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:23.840 --> 00:00:28.250
is Lawrence Ryan announcing show number
one 29. Recorded live Thursday,

4
00:00:28.250 --> 00:00:33.530
September 11, 2008. Support for
Hanselman it's just provided by.

5
00:00:33.560 --> 00:00:37.850
Tellerik already controls the most
comprehensive suite of components for

6
00:00:37.850 --> 00:00:47.090
windows forms and asp.net web
application. online@wwwdottlerik.com. Support is also

7
00:00:47.090 --> 00:00:52.370
provided by.net developers journal the
world's leading.net developer magazine online

8
00:00:52.370 --> 00:00:58.130
at www dot <inaudible> dot
com. In this episode, Scott

9
00:00:58.130 --> 00:01:01.730
talks with Microsoft MSA Jack's
program manager, or try and

10
00:01:01.730 --> 00:01:06.050
move on. Hi, this is
Scott Hanselman. This is another

11
00:01:06.050 --> 00:01:08.480
episode of Hansel minutes, and
we're sitting down today with

12
00:01:08.510 --> 00:01:11.990
<inaudible> vertran Leroy. As I
like to call him. He's

13
00:01:11.990 --> 00:01:14.960
a program manager with Microsoft
and all around JavaScript expert,

14
00:01:15.680 --> 00:01:17.330
and we're going to be
chatting a little bit about

15
00:01:17.330 --> 00:01:19.820
some more advanced JavaScript topics,
but you know, I'm not

16
00:01:19.820 --> 00:01:22.580
a JavaScript expert. And I
would like to understand a

17
00:01:22.580 --> 00:01:25.940
little bit more about how
I should think about JavaScript.

18
00:01:26.810 --> 00:01:30.260
Last week, we had Scott
Caden talking about object oriented

19
00:01:30.560 --> 00:01:32.300
Java script. We had a
lot of good feedback from

20
00:01:32.300 --> 00:01:36.440
that discussion. Some people who
were JavaScript kind of hardcore

21
00:01:36.470 --> 00:01:39.410
people felt that some of
the things that Scott had

22
00:01:39.410 --> 00:01:41.360
shared were not really the
way they like to think

23
00:01:41.360 --> 00:01:44.330
about it. And maybe that
his understanding of the prototype

24
00:01:44.330 --> 00:01:46.760
model was a little bit
confused. So I went and

25
00:01:46.760 --> 00:01:48.380
did a bunch of research
on this and I looked

26
00:01:48.380 --> 00:01:51.560
at people's websites like Douglas
Crockford, and I found that

27
00:01:51.560 --> 00:01:53.480
JavaScript is a lot more
complicated than I think I

28
00:01:53.480 --> 00:01:56.630
thought it was portraying. I
think I'm, I think I'm

29
00:01:56.630 --> 00:01:59.600
writing pretty procedural JavaScript and
it turns out it's a

30
00:01:59.660 --> 00:02:02.060
lot more object oriented than
I given it credit for.

31
00:02:02.690 --> 00:02:05.120
Yeah. Well you can do
stuff in a number of

32
00:02:05.120 --> 00:02:08.810
ways. And what's interesting about
JavaScript is that the concept

33
00:02:08.810 --> 00:02:13.190
count is really low, but
there are really lots of

34
00:02:13.190 --> 00:02:16.760
things you can do with
those concepts. And that gave

35
00:02:16.760 --> 00:02:20.090
rise to a number of
styles of coding in JavaScript.

36
00:02:20.690 --> 00:02:23.990
And so some people like
to stay very close to

37
00:02:23.990 --> 00:02:28.520
the prototype oriented nature of
JavaScript, and some people like

38
00:02:28.520 --> 00:02:32.210
to abstract things where, and
where are we? Things like

39
00:02:32.210 --> 00:02:37.430
that that looks like regular
<inaudible> classes. And you really

40
00:02:37.430 --> 00:02:41.510
see lots of both styles.
You know, the, there are

41
00:02:41.510 --> 00:02:43.850
some people that feel very
strongly, that one approach is

42
00:02:43.850 --> 00:02:47.810
the one true way. And
so it's quite interesting to

43
00:02:47.810 --> 00:02:52.070
look at Well, how important
is it for, for me

44
00:02:52.070 --> 00:02:55.460
to understand this concept of,
of prototyping, the people that

45
00:02:55.460 --> 00:02:57.620
I've spoken to. And some
of the interesting discussions have

46
00:02:57.620 --> 00:03:01.900
happened on Twitter. I that
this is fundamentally JavaScript's power.

47
00:03:01.900 --> 00:03:04.630
And, but if you come
into it, looking at things

48
00:03:04.630 --> 00:03:08.470
from a class oriented perspective
and expecting to declare classes

49
00:03:08.470 --> 00:03:11.230
and then use them that
you will, you know, ultimately

50
00:03:11.230 --> 00:03:13.840
get confused. Other people say
that everything is a method.

51
00:03:13.840 --> 00:03:15.420
Everything is a hash table.
Not, I should look at

52
00:03:15.610 --> 00:03:18.100
it that way. You know,
what's the right way to

53
00:03:18.100 --> 00:03:23.580
think about JavaScript. I think
no matter what you should

54
00:03:23.580 --> 00:03:26.340
know at least about prototypes
and you should know about

55
00:03:26.340 --> 00:03:32.760
closure and there is this
number of concept that you

56
00:03:32.760 --> 00:03:36.030
will need to know about
anywhere, even if you're using

57
00:03:36.030 --> 00:03:40.290
some kind of abstraction that
gives you classes, actual tests,

58
00:03:40.430 --> 00:03:44.220
any Tarrytown, some stuff like
that. I think it's still

59
00:03:44.220 --> 00:03:47.310
important to know what's going
on. You know, it's always

60
00:03:47.340 --> 00:03:51.450
the, the, the, the program
of so called leaky abstractions,

61
00:03:53.580 --> 00:03:56.940
my personal reposition being that
there is no such thing

62
00:03:56.940 --> 00:04:00.570
as a non leaky abstraction.
You you're going to be

63
00:04:00.570 --> 00:04:04.560
confronted with the, the, the
real nature of JavaScript and

64
00:04:04.560 --> 00:04:08.130
the real nature of JavaScript,
these prototypes and closure of

65
00:04:08.130 --> 00:04:11.160
and all that stuff. So,
yeah, I think it, it

66
00:04:11.190 --> 00:04:13.590
eats this minimum number of
concepts that you need to

67
00:04:13.590 --> 00:04:18.420
learn anyway. So how do
you explain prototypes to people

68
00:04:18.420 --> 00:04:20.460
who are getting started? How
do you explain that concept

69
00:04:22.380 --> 00:04:25.020
In class based languages? There
is a notion of access,

70
00:04:25.020 --> 00:04:28.050
and there is a notion
of a constructor in JavaScript.

71
00:04:28.200 --> 00:04:30.450
What cities are consuming is
that the class and the

72
00:04:30.450 --> 00:04:34.290
constructor are actually the same
entity. So when you do

73
00:04:34.320 --> 00:04:38.190
new food, for example, food
is supposed to class. And

74
00:04:38.190 --> 00:04:41.040
the construct on what happens
is that the full function

75
00:04:41.040 --> 00:04:44.400
gets executed and an object
gets free transform that. And

76
00:04:44.400 --> 00:04:48.810
that's your instance, but she
in JavaScript, the prototype underclass,

77
00:04:48.870 --> 00:04:52.050
actually the same thing. And
here I'm using the term

78
00:04:52.050 --> 00:04:56.100
class, which may be irritating
for some sort school choice.

79
00:04:56.130 --> 00:05:00.240
But anyway, and when you
do, when you knew up

80
00:05:00.480 --> 00:05:03.590
an instance of a class,
or when you have a

81
00:05:03.600 --> 00:05:10.380
construct that the original thing
object will have a prototype,

82
00:05:10.440 --> 00:05:14.310
and that prototype is what's
common to all the instances

83
00:05:14.340 --> 00:05:18.060
of the subject. And so
one way to look at

84
00:05:18.060 --> 00:05:21.600
it is that when you,
when you use a member

85
00:05:21.660 --> 00:05:25.140
of an object, what JavaScript
is going to do is

86
00:05:25.170 --> 00:05:28.530
it's going to look at
this member and it's going

87
00:05:28.530 --> 00:05:30.930
to look in a number
of pages. It's going to

88
00:05:30.930 --> 00:05:35.880
look first at the object
itself for expanders in a

89
00:05:35.880 --> 00:05:38.610
way that had been set
on the subject. And if

90
00:05:38.610 --> 00:05:40.770
it doesn't find it there,
it will go up for

91
00:05:40.770 --> 00:05:44.160
hockey. And the prototype is
part of that hockey. And

92
00:05:44.160 --> 00:05:47.730
you can have a whole
hierarchy of prototypes. And that

93
00:05:47.730 --> 00:05:52.050
looks a little bit like
based classes, but it's a

94
00:05:52.060 --> 00:05:55.980
slightly different concept. And this
is why there are so

95
00:05:55.980 --> 00:06:01.940
many libraries that introduce actual
classes and inheritance using underlying

96
00:06:01.940 --> 00:06:05.630
prototype, like, like we do
actually, but it's really all

97
00:06:05.630 --> 00:06:09.370
about looking at member and
going up the hierarchy of

98
00:06:09.830 --> 00:06:14.960
a prototype inheritance and stuff
like that. I hope I'm

99
00:06:14.960 --> 00:06:17.140
being clear. No, that makes
something a lot of sense.

100
00:06:17.140 --> 00:06:19.760
So that brings up another
questions though. So, you know,

101
00:06:19.760 --> 00:06:21.550
you said that really any
library that you put on

102
00:06:21.550 --> 00:06:23.440
top of this is ultimately
going to be a leaky

103
00:06:23.440 --> 00:06:28.240
abstraction, I assume, including, you
know, MSA jacks, which a

104
00:06:28.240 --> 00:06:32.230
lot of people feel is
a library that makes Java

105
00:06:32.230 --> 00:06:35.860
script, you know, look and
smell more like C-sharp, you

106
00:06:35.860 --> 00:06:38.320
know, with interfaces and I
disposable and inventing and things

107
00:06:38.320 --> 00:06:41.860
like that. But ultimately it's
going to leak as well.

108
00:06:41.860 --> 00:06:43.690
At some point, you're going
to want to understand that

109
00:06:44.290 --> 00:06:47.800
that's a construct of the
library and not really a

110
00:06:47.800 --> 00:06:51.850
construct of, of JavaScript. Yes.
Okay. So it sounds like

111
00:06:51.970 --> 00:06:56.350
it's important to know about
that Success in, in NSA

112
00:06:56.350 --> 00:07:01.930
drugs makes the prototype very
obvious. Actually, you, you first

113
00:07:01.930 --> 00:07:06.010
define your constructor and then
you define the prototype and

114
00:07:06.010 --> 00:07:08.810
you really write prototype. It's
not like you've got some

115
00:07:08.810 --> 00:07:13.630
older libraries. I think movie's
doing that where, or even

116
00:07:13.630 --> 00:07:17.680
prototype where you have a
classmate out somewhere and you

117
00:07:17.680 --> 00:07:21.430
give it a, an object
that describes your class, but

118
00:07:21.520 --> 00:07:24.350
the prototype is actually not
apparent at all in that

119
00:07:25.780 --> 00:07:29.350
central it's still very apparent.
Okay. So, so yeah, so

120
00:07:29.350 --> 00:07:33.640
you're saying MSA Jack's is
not as doesn't try as

121
00:07:33.640 --> 00:07:36.160
hard when it comes to
hiding as other libraries do.

122
00:07:36.910 --> 00:07:40.150
No. I think we try
to give it a.net here

123
00:07:40.450 --> 00:07:43.570
because our user base is
used to those nets. So

124
00:07:43.780 --> 00:07:45.760
we want, we want you
to make the transition as

125
00:07:45.760 --> 00:07:51.970
easy as possible, but we,
we really didn't want to,

126
00:07:54.940 --> 00:07:57.070
to make that night on
top of shadow script that

127
00:07:57.070 --> 00:08:00.400
was on the ADA. We
really wanted to use Java

128
00:08:00.400 --> 00:08:02.950
script for, for its trends.
I don't know if we

129
00:08:02.950 --> 00:08:06.610
succeeded at that, but that's
what we tried to. Hmm.

130
00:08:07.300 --> 00:08:10.300
Now as a Microsoft employee
and one that's focused on,

131
00:08:10.300 --> 00:08:13.510
on Ajax, of course, the
Ajax world is, is very,

132
00:08:13.510 --> 00:08:15.580
very wide. And a lot
of it is open source.

133
00:08:15.880 --> 00:08:18.970
How much do you work
with other libraries and see

134
00:08:18.970 --> 00:08:22.990
how Microsoft stuff works along
with, with jQuery, it works

135
00:08:22.990 --> 00:08:26.440
along with ext JS or
mochi kit or whatever. I

136
00:08:26.440 --> 00:08:28.420
mean, there's a pile out
there and you know, certainly

137
00:08:28.420 --> 00:08:30.430
the long tail happens pretty
quickly, but there's four or

138
00:08:30.430 --> 00:08:34.120
five libraries that are really,
really popular. How much, how

139
00:08:34.120 --> 00:08:37.060
much do you spend looking
at those things? Yeah. Well,

140
00:08:37.120 --> 00:08:43.210
that's a really interesting question.
All of those rivalries focus

141
00:08:43.210 --> 00:08:46.380
mainly on the client side,
right? So they're, they're, they're

142
00:08:46.390 --> 00:08:50.320
really JavaScript libraries and they,
most of them don't really

143
00:08:50.320 --> 00:08:57.210
have a, a silver counterpart,
which makes Microsoft Ajax a

144
00:08:57.660 --> 00:08:59.970
particula. In the sense there
are, there are of course

145
00:09:00.010 --> 00:09:02.940
other libraries that do into
the server side part, but

146
00:09:03.300 --> 00:09:05.970
you should look at the
major ones like Jake, where

147
00:09:05.970 --> 00:09:10.350
you prototype, move, it sits
around there. We all about

148
00:09:10.350 --> 00:09:15.510
the, the, the, the client
side. And the thing is

149
00:09:16.120 --> 00:09:19.770
what we care about at
Microsoft here in terms of,

150
00:09:19.800 --> 00:09:24.000
you know, what our bottom
line is, what we want

151
00:09:24.000 --> 00:09:28.620
is HP doesn't adoption. That's
what we're really after. Right?

152
00:09:30.270 --> 00:09:34.200
So for us, we don't
see all these other libraries

153
00:09:34.260 --> 00:09:39.750
as it's not, it's not
competition. It's the same sense

154
00:09:40.290 --> 00:09:46.770
that Java server pages are
our competition for asp.net, because

155
00:09:46.800 --> 00:09:50.670
you can still use those
libraries with hp.net and as

156
00:09:50.670 --> 00:09:54.990
a developer, you prefer jQuery.
We're absolutely fine with that.

157
00:09:57.150 --> 00:10:01.440
And actually jQuery is an
interesting example because it's very,

158
00:10:03.510 --> 00:10:06.480
it's a good compliment where
actually MSA jacks, because it's

159
00:10:06.480 --> 00:10:10.200
doing stuff that we are
not doing currently, and it's

160
00:10:10.200 --> 00:10:13.800
doing it really well. That's
an example of a library

161
00:10:13.800 --> 00:10:17.070
that's really focuses on one
problem, solves it really well.

162
00:10:17.800 --> 00:10:21.330
And that's something that, that,
that personally, I appreciate a

163
00:10:21.330 --> 00:10:25.320
lot. And I've been using
jQuery in personal projects as

164
00:10:25.320 --> 00:10:28.320
a compliment to MSA jacks
to do CSS direct off

165
00:10:28.320 --> 00:10:31.790
and stuff. So, yeah. How
reasonable do you think it

166
00:10:31.790 --> 00:10:34.520
is for people to use,
you know, MSA jacks as

167
00:10:34.520 --> 00:10:38.180
a, as a standalone library,
without any Microsoft server on

168
00:10:38.180 --> 00:10:40.460
the backend? Like, I mean,
I went and, you know,

169
00:10:40.490 --> 00:10:43.190
you and I moved a
MSA jacks into Aptana so

170
00:10:43.190 --> 00:10:45.350
that people who use Aptana,
which is an open source,

171
00:10:45.350 --> 00:10:49.490
eclipse based IDE, they want
to use MSH ex client

172
00:10:49.490 --> 00:10:51.560
library, which is, you know,
it's just JavaScript. They can

173
00:10:51.560 --> 00:10:54.830
totally do that. Is it
just the, the string builder

174
00:10:54.830 --> 00:10:56.690
that they would want? Or
are there other things that

175
00:10:56.690 --> 00:10:59.210
someone would want to use
in MSA jacks that aren't

176
00:10:59.810 --> 00:11:05.420
compliments to asp.net? Yeah. So
I think there is a

177
00:11:05.420 --> 00:11:10.670
number of strong points about,
about our Irene and one

178
00:11:10.670 --> 00:11:17.150
of them is globalization. For
example, I think asphalt for

179
00:11:18.020 --> 00:11:22.370
globalization, string formatting, date formatting,
all that stuff is really

180
00:11:22.370 --> 00:11:26.540
outstanding and doesn't have a
lot of equipment out there.

181
00:11:28.760 --> 00:11:30.830
So there is a number
of things like that, that

182
00:11:31.010 --> 00:11:34.130
<inaudible>, for example, you're, you're
taking for granted, but that

183
00:11:34.550 --> 00:11:37.700
really in JavaScript, not trivial
at all. I mean, for

184
00:11:37.700 --> 00:11:42.020
example, if she wants to
format a Canada in a

185
00:11:42.020 --> 00:11:47.660
Japanese culture, for example, or
any culture, or for that

186
00:11:47.660 --> 00:11:51.680
matter, that's not something that
that's really treasured in JavaScript,

187
00:11:51.710 --> 00:11:54.280
and that's something we're providing
of the box, the library.

188
00:11:54.640 --> 00:11:57.010
So, you know, it's a
lot of those little services

189
00:11:57.010 --> 00:11:59.890
that you take for granted
in managed code, but that,

190
00:11:59.930 --> 00:12:04.270
that is not trivial in
JavaScript, but you should look

191
00:12:04.270 --> 00:12:08.770
at the main library. There
are no conforms in there,

192
00:12:08.770 --> 00:12:15.070
for example. So it's really
a, a base layer for,

193
00:12:15.100 --> 00:12:19.000
for constructing higher level constructs,
like components and controls and

194
00:12:19.000 --> 00:12:22.330
behaviors. So if you are
looking for more higher level

195
00:12:22.330 --> 00:12:27.870
components, you should look at
the <inaudible> library. Yeah. Now,

196
00:12:27.900 --> 00:12:31.290
when it comes to also
Microsoft specific stuff, like, for

197
00:12:31.290 --> 00:12:34.500
example, I've seen a number
of people online doing performance

198
00:12:34.500 --> 00:12:38.310
testing with like something as
basic as extreme builders, whether

199
00:12:38.310 --> 00:12:40.800
it be the MSA Jack
string builder, or like the

200
00:12:40.800 --> 00:12:44.100
dojo string builder. And they'll
go and say, well, I

201
00:12:44.100 --> 00:12:46.080
think one article I saw
that Scott Coon sent me

202
00:12:46.080 --> 00:12:48.690
was a performance in internet
Explorer. So the guy went

203
00:12:48.690 --> 00:12:51.450
and looked at <inaudible>, he
looked at <inaudible> and he

204
00:12:51.450 --> 00:12:53.580
wanted to see if, you
know, figure out is, you

205
00:12:53.580 --> 00:12:55.260
know, is a re dot,
joined the best way to

206
00:12:55.410 --> 00:12:58.530
bring strings together. And things
like that when now I

207
00:12:58.530 --> 00:13:00.810
ate is out and I
haven't done any of the

208
00:13:01.470 --> 00:13:04.410
performance tests and things like
that, but how much attention

209
00:13:04.410 --> 00:13:06.510
do you have to spend
in the MSH X client

210
00:13:06.510 --> 00:13:10.260
library to browsers that are
either getting faster or changing

211
00:13:10.260 --> 00:13:12.930
the way that they do
garbage collection or things like

212
00:13:12.930 --> 00:13:15.360
that, to make sure that
the string builder still works

213
00:13:15.360 --> 00:13:20.160
well. So it's, it's funny
that you're taking the string

214
00:13:20.160 --> 00:13:24.750
builder example because that's, that's
really, that's a class that

215
00:13:24.810 --> 00:13:28.820
personally, I, I, if you
had only depended on the,

216
00:13:28.830 --> 00:13:32.430
I may not have included
that class because yeah, as

217
00:13:32.430 --> 00:13:37.170
you mentioned, our joining is,
is the most efficient way

218
00:13:37.170 --> 00:13:40.530
to, to do that currently.
Well, actually this is evolving

219
00:13:40.800 --> 00:13:46.320
and string concatenation becomes pretty
fast too. So string builder

220
00:13:46.330 --> 00:13:51.390
actually tends to be somewhat
slower than, than those native

221
00:13:51.660 --> 00:13:56.700
ways of, of concatenating and
conflicting strings. So string builder

222
00:13:56.770 --> 00:13:59.250
doesn't have the same use
formats as it has in

223
00:13:59.250 --> 00:14:03.840
the managed world in ESCO.
Basically, if you're going to

224
00:14:04.380 --> 00:14:10.530
concatenate, not predefine number of
strings, you should use a

225
00:14:10.530 --> 00:14:12.840
string builder because this is,
this is what's going to

226
00:14:12.840 --> 00:14:17.850
be the fastest most of
the time, right in JavaScript,

227
00:14:18.120 --> 00:14:21.780
that's actually not true. The
string builder will usually not

228
00:14:21.810 --> 00:14:24.870
give you a performance advantage
where it will give you

229
00:14:24.870 --> 00:14:30.030
is some convenience API that,
that made the building the

230
00:14:30.040 --> 00:14:34.010
string easier. Like for example,
if you do an, a

231
00:14:34.230 --> 00:14:36.960
drawing and in your eye,
you have undefined on the

232
00:14:36.960 --> 00:14:42.240
elements, you get undefined string
in your, in your outputs,

233
00:14:42.270 --> 00:14:44.730
which is not decided what
you wanted, what you wanted

234
00:14:44.730 --> 00:14:47.610
was an empty string. For
example, the string builder is

235
00:14:47.610 --> 00:14:49.500
going to do that kind
of stuff for you. So

236
00:14:49.920 --> 00:14:54.220
the user a little different,
It helps with your expectations.

237
00:14:54.250 --> 00:14:56.410
It may not necessarily be
about performance, but more about

238
00:14:56.680 --> 00:14:58.930
giving you back results that
you expect that may not

239
00:14:58.930 --> 00:15:01.120
be obvious. So if you
were doing, Yeah, and, and

240
00:15:01.600 --> 00:15:05.980
that's also one interesting point
that that is something that's

241
00:15:05.980 --> 00:15:09.310
specific to Mexico state, which
is that when we have

242
00:15:09.310 --> 00:15:12.280
an equivalent on the net
API, we've tried to achieve

243
00:15:12.280 --> 00:15:15.670
consistency with the botnet behavioral
as much as possible. And

244
00:15:15.670 --> 00:15:18.190
that's something you see on
string formatting, adding, for example,

245
00:15:18.220 --> 00:15:21.850
if you have the format
string dot format in.net, and

246
00:15:21.850 --> 00:15:25.030
you do the same in
JavaScript, you, you you'd get

247
00:15:25.030 --> 00:15:30.010
the same results. So there
is his goal for consistency.

248
00:15:30.220 --> 00:15:33.550
I think I completely lost
track of short, original questions

249
00:15:33.550 --> 00:15:37.960
here. Well, I mean, ultimately
my question was how much

250
00:15:38.020 --> 00:15:41.590
attention do you have to
pay to things that you've

251
00:15:41.590 --> 00:15:43.870
done in the past when
new browsers come out and

252
00:15:43.870 --> 00:15:45.550
change things? You know, the
garbage collectors are a lot

253
00:15:45.550 --> 00:15:48.610
different. Yeah. So, yeah, so
the, the, the, the stream

254
00:15:48.610 --> 00:15:52.480
builder example is interesting because
now string concatenation tends to

255
00:15:52.480 --> 00:15:58.780
be somewhat faster than our
join, which interesting to see,

256
00:15:58.930 --> 00:16:03.160
but there are other areas
like the manipulation, for example,

257
00:16:03.160 --> 00:16:06.400
that, that getting a lot
of attention from browser vendor,

258
00:16:07.660 --> 00:16:10.780
which means that today in
one of our new features,

259
00:16:10.780 --> 00:16:16.060
for example, like Tom page
rendering on the clients, when

260
00:16:16.060 --> 00:16:19.590
you do templates, rendering many
concrete engines out there are

261
00:16:19.590 --> 00:16:25.150
actually doing string concatenation because
that's, that's used to be

262
00:16:25.150 --> 00:16:28.450
the fastest way of doing
that. But there are a

263
00:16:28.450 --> 00:16:32.920
number of disadvantages in doing
strength, intonations like that. Like,

264
00:16:32.920 --> 00:16:37.600
for example, you have to
encode some strings for the

265
00:16:37.600 --> 00:16:43.210
same reasons that when you
see qual a sequence of

266
00:16:43.420 --> 00:16:47.890
instructions using string combination, you
will have to encode everything

267
00:16:47.890 --> 00:16:51.160
you're injecting into the SQL
code, or otherwise you will

268
00:16:51.160 --> 00:16:54.910
get injection attacks. Right? So
what people are doing today

269
00:16:54.910 --> 00:16:59.100
is that they are using
constructing. They are, they are

270
00:16:59.770 --> 00:17:05.200
SQL using parameter. Right, right.
But today, when you do

271
00:17:05.500 --> 00:17:08.230
some plating on the client,
most engineers actually do string

272
00:17:08.230 --> 00:17:11.740
cultivation, which is something that
you wouldn't do with SQL.

273
00:17:12.880 --> 00:17:19.420
So what I'm getting at
is that here that that's

274
00:17:19.420 --> 00:17:21.940
a, that's a point where
browser vendors are making the

275
00:17:21.940 --> 00:17:27.580
manipulation much faster, and now
it becomes almost as fast

276
00:17:28.360 --> 00:17:34.180
to construct your template, a
rendering by actually calling them

277
00:17:34.420 --> 00:17:39.490
ATI than it is by
doing, you know, HTML like

278
00:17:39.520 --> 00:17:42.910
those engines are doing. So
that's something we've looked at

279
00:17:43.270 --> 00:17:46.060
when we constructed that, that
feature. We had a number

280
00:17:46.060 --> 00:17:51.690
of design goals that we
had, and one of them

281
00:17:51.690 --> 00:17:55.830
was performance. And when we
looked at, should we do

282
00:17:55.830 --> 00:18:00.300
strength concatenations or should we,
should we do dull manipulation

283
00:18:00.300 --> 00:18:03.270
using the GRC, the domain
API. We found out that

284
00:18:03.270 --> 00:18:06.300
the gap between the two
was actually reducing as the

285
00:18:06.300 --> 00:18:09.660
browser evolve. So we decided
to take the bet and

286
00:18:09.660 --> 00:18:14.070
to domain integration, which is
a much richer way of

287
00:18:14.070 --> 00:18:17.130
doing things that, that gives
us a lot of additional

288
00:18:17.130 --> 00:18:20.610
features that we would never
have, or we wouldn't have

289
00:18:20.610 --> 00:18:24.930
as easily with a string
concatenation. So that that's one

290
00:18:24.930 --> 00:18:28.890
case where the browser evolution
is really helping us building

291
00:18:28.890 --> 00:18:33.440
better features. Yeah. That's actually
the law, the whole domino

292
00:18:33.440 --> 00:18:35.750
simulation in live binding and
live templating thing. We should,

293
00:18:36.050 --> 00:18:37.700
we should come back to
in a little more detail,

294
00:18:37.700 --> 00:18:39.890
but I want to just
veer off for one second,

295
00:18:39.890 --> 00:18:42.240
because you brought up an
interesting point that we've got,

296
00:18:42.460 --> 00:18:44.660
we've got Chrome and we've
got, you know, VA and

297
00:18:44.810 --> 00:18:47.270
trace monkey, and there's all
these things happening on in,

298
00:18:47.450 --> 00:18:52.400
in JavaScript. Jitting nano jetting,
making it faster. And it's,

299
00:18:52.400 --> 00:18:55.010
it's, it's interesting to me
that they're talking about getting

300
00:18:55.010 --> 00:18:57.650
JavaScript up to, you know,
almost the speed of C,

301
00:18:58.100 --> 00:19:03.080
but we're seeing micro performance
numbers, and they're showing things

302
00:19:03.080 --> 00:19:05.750
like, you know, here's JavaScript,
that's a thousand times faster.

303
00:19:06.170 --> 00:19:09.080
If it's, you know, recursing,
she was like, there's a

304
00:19:09.110 --> 00:19:11.390
big argument right now going
on between VA and tres

305
00:19:11.390 --> 00:19:15.260
monkey about, you know, this
is the fastest benchmark, but

306
00:19:15.260 --> 00:19:17.210
it's only a very obscure
education it has to do

307
00:19:17.210 --> 00:19:20.960
with, you know, tail recursion.
I'm wondering it doesn't mean

308
00:19:20.960 --> 00:19:24.650
real work and JavaScript doesn't
real work. And JavaScript happens

309
00:19:24.650 --> 00:19:26.900
when you manipulate the Dom.
I would think more than

310
00:19:26.900 --> 00:19:29.810
it. It's, you know, deep,
computational, we're not doing protein

311
00:19:29.810 --> 00:19:34.100
folding work in JavaScript. Doesn't
the browser's implementation of the

312
00:19:34.100 --> 00:19:37.560
Dom effect speed. So yeah,
that, that's an excellent point

313
00:19:37.560 --> 00:19:41.750
in time. And when I
saw the benchmarks that were

314
00:19:41.750 --> 00:19:45.500
first published about Chrome, I
said, what, what are they

315
00:19:45.500 --> 00:19:49.070
thinking? I mean, who is
going to do a well

316
00:19:49.180 --> 00:19:52.700
needs to do a rate
tracing in JavaScript? I mean,

317
00:19:54.080 --> 00:19:58.400
that doesn't make any sense
today. And maybe the Google

318
00:19:58.400 --> 00:20:02.090
people are actually looking farther
away than, than I am.

319
00:20:02.090 --> 00:20:06.350
But currently the bottleneck for
me is the money creation.

320
00:20:06.470 --> 00:20:10.430
That is the number one
bottleneck, and I'm guessing it's

321
00:20:10.430 --> 00:20:15.710
the same for, or application
developers. So that's what we

322
00:20:15.710 --> 00:20:18.370
need to get really fast.
And the good news is

323
00:20:18.370 --> 00:20:20.540
that Chrome is doing a
good job at that too.

324
00:20:20.900 --> 00:20:25.960
And, you know, we are,
we are not internet Explorer

325
00:20:26.000 --> 00:20:29.480
cheerleaders in this team. We
are in genetics for our

326
00:20:29.480 --> 00:20:33.980
users. So we may have
a closer connection with the

327
00:20:33.990 --> 00:20:38.630
internet Explorer team, but we
are very happy to see

328
00:20:38.930 --> 00:20:43.580
drivers getting faster on, on
other browsers, because we know

329
00:20:43.580 --> 00:20:46.850
that this is going to
lead the, the 18 to

330
00:20:47.290 --> 00:20:51.850
actually follow up with action
and get their own JavaScript

331
00:20:51.850 --> 00:20:54.820
engine faster. So we think
this is really going in

332
00:20:54.820 --> 00:20:58.900
the, in the good direction.
And Ajax has been a

333
00:20:58.960 --> 00:21:05.070
fantastic catalyst in that evolution.
Yeah. I mean, ultimately I

334
00:21:05.070 --> 00:21:08.910
was actually recently misquoted in
a, in a panel we

335
00:21:08.910 --> 00:21:11.640
talked about when I said
that, you know, it's good

336
00:21:11.640 --> 00:21:13.650
that all of this is
happening. And I said in

337
00:21:13.650 --> 00:21:16.740
the quote that that JavaScript
getting faster is going to

338
00:21:16.740 --> 00:21:18.120
kind of kick us all
in the butt and move

339
00:21:18.120 --> 00:21:20.850
forward in the, in the,
in the article that was

340
00:21:20.850 --> 00:21:23.820
written, they thought I was
talking about kicking Microsoft in

341
00:21:23.820 --> 00:21:27.060
the butt, but really just
JavaScript, getting faster is a

342
00:21:27.060 --> 00:21:30.210
good thing for everyone. Every
browser should have fast JavaScript.

343
00:21:30.210 --> 00:21:32.400
Every developer should not have
to worry so much about,

344
00:21:33.030 --> 00:21:36.480
about JavaScript, slowing their system
down, you know, which makes

345
00:21:36.480 --> 00:21:38.670
me wonder, like how much,
how, how soon until we

346
00:21:38.670 --> 00:21:43.350
get really truly multithreaded JavaScript
where we're not, we can't

347
00:21:43.350 --> 00:21:46.680
bring a browser down from,
you know, locking entire page

348
00:21:46.680 --> 00:21:53.000
up from, from badly written
JavaScript. There's been some, some

349
00:21:53.010 --> 00:21:56.130
interesting tests that have been
done where people can do

350
00:21:56.130 --> 00:21:59.820
something like, you know, while
true, and then doing a

351
00:21:59.820 --> 00:22:03.120
string, a string append and
block up and in lockup,

352
00:22:03.120 --> 00:22:06.420
I E completely because of
a poorly written JavaScript. I

353
00:22:06.420 --> 00:22:09.060
mean, we've all seen times
when we'd hit a browser

354
00:22:09.300 --> 00:22:12.110
page and we say a
script on this page is

355
00:22:12.210 --> 00:22:17.160
running slowly. So yeah. So,
so what Chrome and <inaudible>

356
00:22:17.190 --> 00:22:21.510
are doing in terms of
isolation is interesting, but ultimately

357
00:22:21.510 --> 00:22:24.630
you wouldn't even the page
to crash, even if it

358
00:22:24.630 --> 00:22:28.080
has bad scripts like that.
And actually there is some

359
00:22:28.080 --> 00:22:32.310
interesting research going on at
Java that Microsoft about that,

360
00:22:32.340 --> 00:22:39.120
and that should be made
public in the next few

361
00:22:39.120 --> 00:22:43.050
months. And that's a fascinating
subject and there is a

362
00:22:43.050 --> 00:22:46.440
lot to be done there.
And I think what what's

363
00:22:46.440 --> 00:22:48.660
going to happen is that
people are going to find

364
00:22:48.660 --> 00:22:54.450
solutions for these that don't
necessarily imply co-work in the

365
00:22:54.450 --> 00:22:57.870
browser, but they are going
to proof of concept, but

366
00:22:58.230 --> 00:23:01.710
we also have those programs
and eventually those will be

367
00:23:01.800 --> 00:23:05.340
integrated into the browser. And
that's exactly what happened with

368
00:23:05.340 --> 00:23:08.910
Ajax. And this trend is
continuing and it's great to

369
00:23:08.910 --> 00:23:12.210
see because the whole community
is really evolving the web.

370
00:23:12.210 --> 00:23:15.270
That's why I'm saying that.
That's great. Do you know

371
00:23:15.270 --> 00:23:18.030
how to make the possible
out of the impossible? Well,

372
00:23:18.030 --> 00:23:20.700
the dotnet ninjas at Telerik
do they just released a

373
00:23:20.700 --> 00:23:23.030
huge pack of web controls,
all built on top of

374
00:23:23.040 --> 00:23:26.820
ESPN at Ajax, that'll help
you build impossibly fast and

375
00:23:26.820 --> 00:23:29.940
interactive applications in no time
at all. They've made the

376
00:23:29.940 --> 00:23:34.020
impossible possible in desktop development.
If you think you can't

377
00:23:34.020 --> 00:23:36.660
have a carousel component and
wind forms, well, you can,

378
00:23:36.990 --> 00:23:39.960
they're windows forms, suite features
of super powerful grid view

379
00:23:39.960 --> 00:23:42.720
control on 32 other crazy
desktop components that will give

380
00:23:42.720 --> 00:23:47.510
you a dazzling WPF, like,
but in wind farms, they

381
00:23:47.510 --> 00:23:49.340
do the same thing in
reporting solutions with a new

382
00:23:49.340 --> 00:23:52.130
design surface, like nothing else
looks just like graph paper,

383
00:23:52.490 --> 00:23:56.240
cause you advanced page layout
capabilities makes it feel more

384
00:23:56.240 --> 00:23:59.180
like a graphic design software
than a reporting solution. Go

385
00:23:59.180 --> 00:24:05.720
check them out@telerikdotcomandbea.net Ninja. Thanks
for listening. Well, where do

386
00:24:05.720 --> 00:24:08.540
you think JavaScript's going to
go? You know what, what's

387
00:24:08.540 --> 00:24:10.460
next? What are some things
that you'd like to see

388
00:24:10.460 --> 00:24:13.940
implemented to make Ajax easier,
you know, in JavaScript, you

389
00:24:13.940 --> 00:24:16.400
know, what is it 1.6
plus plus, what do you,

390
00:24:16.820 --> 00:24:18.830
what do you want to
implement it to, to better

391
00:24:18.830 --> 00:24:23.320
enable Ajax scenarios? You know,
shop town, I'm pretty happy

392
00:24:23.320 --> 00:24:27.160
with how things are going.
I mean, having Jace native,

393
00:24:27.160 --> 00:24:31.750
Jason <inaudible> initialization, that's great.
That's something that's really gonna

394
00:24:31.750 --> 00:24:35.210
help with the performance of
Ajax applications. And also just

395
00:24:35.380 --> 00:24:42.460
the security. We also have
some needs cross domain, cross

396
00:24:42.460 --> 00:24:44.620
I'm in communication is also
something that we are getting

397
00:24:44.620 --> 00:24:49.150
with the new browsers and
the HTML five specifications, actually,

398
00:24:50.470 --> 00:24:53.230
those a number of things
that are interesting for Ajax.

399
00:24:53.230 --> 00:24:55.900
And that what's interesting here
is that if you look

400
00:24:55.910 --> 00:25:01.180
at the ECMAScript substations, there
is actually very little about

401
00:25:01.690 --> 00:25:07.270
dumb interaction, that kind of
stuff. And this is something

402
00:25:07.270 --> 00:25:11.770
that's been taken over by
the what world group, when

403
00:25:11.770 --> 00:25:16.570
they did. <inaudible> one thing
I'd like from the ECMAScript

404
00:25:16.570 --> 00:25:22.510
community would be to have
more, more explicit work, being

405
00:25:22.510 --> 00:25:27.700
done with Dom interaction in,
from reading the script state,

406
00:25:27.760 --> 00:25:32.170
because let's face it JavaScript
easily is becoming a very,

407
00:25:32.170 --> 00:25:38.470
very important language, but it's
still mainly use when interacting

408
00:25:38.470 --> 00:25:42.250
with the document object model.
So these should be baked

409
00:25:42.250 --> 00:25:45.760
into the specification in my
opinion, but that would clear

410
00:25:45.760 --> 00:25:49.780
a number of ambiguity that
can be programmed today. So

411
00:25:51.970 --> 00:25:55.030
longer term. I mean, I'm,
I'm, I'm really interested in

412
00:25:55.030 --> 00:25:59.620
seeing how things evolve in
the ECMAScript communities. The, the

413
00:25:59.620 --> 00:26:04.840
recent harmony SI has been
very interesting to do that

414
00:26:04.900 --> 00:26:10.810
because finally things are going
to move. So that's kind

415
00:26:10.810 --> 00:26:13.090
of cool. It's interesting how
quickly it's happened. We're in

416
00:26:13.090 --> 00:26:15.310
a new browser war suddenly
and it's all JavaScript based.

417
00:26:15.940 --> 00:26:21.490
Yeah, yeah, yeah. Seeing the
general education coming back from

418
00:26:21.490 --> 00:26:28.060
these huge wild, strange, long
ways that was the proposed

419
00:26:28.060 --> 00:26:30.970
ECMAScript fall back to something
you need a more pragmatic.

420
00:26:31.450 --> 00:26:34.290
And I think pragmatic is
the key word here that

421
00:26:34.300 --> 00:26:38.740
that was good to see.
And what's also good to

422
00:26:38.740 --> 00:26:41.950
see that this is not
going to be a flipping

423
00:26:41.950 --> 00:26:46.580
innovation in the language. So
Yeah, I've been using JavaScript.

424
00:26:46.610 --> 00:26:48.320
I mean, I used it
when it was live script,

425
00:26:48.350 --> 00:26:51.840
you know, back back in
the day. And I, and

426
00:26:51.840 --> 00:26:53.900
I was doing this actually
while working at Nike and

427
00:26:53.900 --> 00:26:58.490
working on, on the Java
Java applet actually. And now

428
00:26:58.490 --> 00:27:01.880
it seems like Java script
has got the power of,

429
00:27:02.130 --> 00:27:04.490
of Java. You know, it's
kind of come full circle

430
00:27:04.490 --> 00:27:08.240
and now they're gonna start
nano budgeting things and getting,

431
00:27:08.240 --> 00:27:11.890
you know, we've got the
DLR running J script in

432
00:27:11.930 --> 00:27:15.710
the CLR and the DLR
is this going to kill?

433
00:27:16.220 --> 00:27:18.650
Is this going to kill
Java and, and flash and

434
00:27:18.650 --> 00:27:25.210
Silverlight, Well, I'm not a
big believer in something <inaudible>

435
00:27:25.370 --> 00:27:29.380
I put Kira Killer after
anything. Let me, let me

436
00:27:29.390 --> 00:27:31.610
rephrase it. Do you think
that JavaScript, can it get

437
00:27:31.610 --> 00:27:35.360
so sophisticated that it could
become powerful enough to really

438
00:27:35.360 --> 00:27:38.870
use to use for those,
those really complicated interactions that

439
00:27:38.870 --> 00:27:43.460
the people use Silverlight for
now? Well, actually I would,

440
00:27:43.550 --> 00:27:46.790
I would love that. Well,
you're the JavaScript PM. So

441
00:27:46.790 --> 00:27:51.430
you'd be really excited about
that Personally. I would, I

442
00:27:51.530 --> 00:27:56.930
would love it, but somehow
it's taking kind of that

443
00:27:56.930 --> 00:28:00.080
direction. I mean, the, the,
the, all the Victaulic graphics

444
00:28:00.650 --> 00:28:03.370
in the browser is getting,
it's getting there. I mean,

445
00:28:03.370 --> 00:28:07.400
it's still trying to explore,
but Well, you know, whenever,

446
00:28:07.400 --> 00:28:10.430
but whenever I do a
site that has, you know,

447
00:28:10.430 --> 00:28:13.430
even something as basic as
like a little flash podcast

448
00:28:13.430 --> 00:28:17.510
player, or like we're doing
baby smash in J and

449
00:28:17.510 --> 00:28:20.660
M and Silverlight right now,
there's always an interaction with

450
00:28:20.660 --> 00:28:23.360
JavaScript. I mean, it seems
like JavaScript is the glue

451
00:28:23.360 --> 00:28:27.770
that fits everything together. I
just couldn't see writing, you

452
00:28:27.770 --> 00:28:29.450
know, sometimes you'll see people
go and write something in

453
00:28:29.450 --> 00:28:31.130
JavaScript and it'll make you
go, wow, that guy just

454
00:28:31.130 --> 00:28:35.630
wrote solitaire entirely in JavaScript.
Or he wrote someone wrote

455
00:28:35.660 --> 00:28:39.470
lemmings the video game, lemmings
and JavaScript. Yeah. There is

456
00:28:39.470 --> 00:28:43.850
also an audio instrumentation. It's
impossible. It's impossible to read

457
00:28:43.850 --> 00:28:47.750
and maintain. Yeah, I dunno.
I, I personally, I don't

458
00:28:47.750 --> 00:28:50.540
see it. I don't see
any killing going on, frankly,

459
00:28:51.500 --> 00:28:53.690
but, but I think JavaScript
getting faster is better for

460
00:28:53.690 --> 00:28:59.060
everyone. So I think there
is room for more than

461
00:28:59.060 --> 00:29:03.560
one tool that that's why
I don't like the kidding.

462
00:29:03.590 --> 00:29:07.340
I think really there are
different cultures and different ways

463
00:29:07.340 --> 00:29:11.090
of looking at things. And
every time I see someone

464
00:29:11.090 --> 00:29:14.000
claiming that something is the
one true way of doing

465
00:29:14.360 --> 00:29:18.230
something, I, I really don't
like to share that kind

466
00:29:18.230 --> 00:29:20.690
of stuff. I mean, that
doesn't make any sense to

467
00:29:20.690 --> 00:29:24.560
me. There will always be
people who prefer to develop

468
00:29:24.560 --> 00:29:27.230
in manage code that we
always need people who prefer

469
00:29:27.230 --> 00:29:31.790
to develop in a dynamic
language or study Congo or

470
00:29:31.820 --> 00:29:37.340
you name it. What's interesting
is that it's, it's, it's

471
00:29:37.340 --> 00:29:41.440
when the technology becomes mature
enough that you can do

472
00:29:41.440 --> 00:29:43.360
pretty much what you want
with it. And when I

473
00:29:43.360 --> 00:29:45.580
say that, I would love
to see, DRSP get to

474
00:29:45.580 --> 00:29:48.190
the point where I can
do everything that Sasha is

475
00:29:48.190 --> 00:29:51.820
doing. That. That's what I
mean by that. I mean,

476
00:29:51.820 --> 00:29:55.990
if you, if JavaScript is
your tool of choice, and

477
00:29:56.980 --> 00:29:59.710
then you should able to
do whatever you want, and

478
00:29:59.710 --> 00:30:02.170
if civil rights is you
also have choice, you should

479
00:30:02.170 --> 00:30:05.430
be able to do whatever
you like. Right. Exactly. So

480
00:30:05.430 --> 00:30:07.530
the water level is raised
such that kind of all

481
00:30:07.530 --> 00:30:11.550
boats float. Yeah. That's my
ideal world. You choose the

482
00:30:11.550 --> 00:30:15.870
tool that you prefer. Yeah.
I, I wouldn't like, well,

483
00:30:15.870 --> 00:30:17.910
I wouldn't, like on the
other hand would be for

484
00:30:17.910 --> 00:30:20.760
JavaScript to be a cheetah
or for all those products

485
00:30:20.760 --> 00:30:23.970
and become the one true
way of doing things. Right.

486
00:30:23.970 --> 00:30:26.040
Right. Cause then at some
point they'd become a, there'd

487
00:30:26.040 --> 00:30:27.810
be no way to do
something in JavaScript. You wouldn't

488
00:30:27.810 --> 00:30:29.760
be able to maybe talk
to the webcam or we'd

489
00:30:29.760 --> 00:30:32.610
have to wait for the
HTML version seven that comes

490
00:30:32.610 --> 00:30:35.040
out with the webcam tag.
People are saying that the

491
00:30:35.040 --> 00:30:37.770
video tag is somehow going
to change, you know, flash.

492
00:30:37.770 --> 00:30:39.900
And then YouTube is going
to start switching over to

493
00:30:39.900 --> 00:30:42.810
the video tag and things
like that. Like, like a

494
00:30:42.810 --> 00:30:44.700
new HTML tag is going
to be the solution to

495
00:30:44.700 --> 00:30:48.570
all of our problems on
the web. You know, all

496
00:30:48.570 --> 00:30:52.950
that. There is no end
to innovation, right? So it's

497
00:30:52.950 --> 00:30:57.390
just raising the bar and
people will find something else

498
00:30:58.020 --> 00:31:01.530
beyond video that that is
the new chiller app. And

499
00:31:01.980 --> 00:31:04.620
it goes on like this
and that's, that's how the

500
00:31:04.620 --> 00:31:09.660
industry evolved. And that that's
great. Well, speaking, yeah. Speaking

501
00:31:09.660 --> 00:31:12.270
of innovation, let's talk about
the templating engine that people

502
00:31:12.270 --> 00:31:16.230
can go look at a
code, flex.com/asp net. This is

503
00:31:16.230 --> 00:31:18.510
the, what are you calling
this now? What's the kind

504
00:31:18.510 --> 00:31:20.520
of the code name is
live templating or what, what

505
00:31:20.520 --> 00:31:22.140
did we need, what are
we calling the client templates?

506
00:31:23.490 --> 00:31:24.930
I'm not sure we have
a good name for it.

507
00:31:26.280 --> 00:31:28.170
Well, what is it that,
that it is here? And

508
00:31:28.170 --> 00:31:30.150
then if I will point
people towards your blog and

509
00:31:30.150 --> 00:31:34.140
up and towards a Plex,
what is this accomplished? Cause

510
00:31:34.140 --> 00:31:39.750
it's JavaScript. What's your download
from Kotex is ac.net Ajax

511
00:31:40.350 --> 00:31:43.410
for O preview. So it's
a preview of the next

512
00:31:43.410 --> 00:31:48.660
version of HT. Doesn't have
the drive. And this includes

513
00:31:49.050 --> 00:31:55.440
several things, several key components.
I'm hoping that these key

514
00:31:55.440 --> 00:32:04.980
components are very much painting
a complete picture of the

515
00:32:04.980 --> 00:32:09.630
scenario that he's developing your
client's site data. We want

516
00:32:09.630 --> 00:32:16.170
application. So today she wants
to develop the data driven

517
00:32:16.170 --> 00:32:19.020
application. You can do it
on the server. You can

518
00:32:19.020 --> 00:32:22.740
do it with a date
panels or you can do

519
00:32:22.830 --> 00:32:25.920
it purely on the client.
And so there is this

520
00:32:25.920 --> 00:32:28.410
kind of evolution from everything
on the server we been

521
00:32:28.410 --> 00:32:33.000
seeing on the client and
the scenario we are addressing

522
00:32:33.000 --> 00:32:36.750
here, info is everything on
the clients. So what we

523
00:32:36.750 --> 00:32:39.410
are giving you is a
way a new year, way

524
00:32:39.410 --> 00:32:44.450
to query, for example, adl.net
data services, which are services

525
00:32:45.710 --> 00:32:49.250
under that. So you, you
get that data to the

526
00:32:49.250 --> 00:32:52.010
client. And then from that
data, you form a teaching

527
00:32:52.010 --> 00:32:55.940
to HTML. You have some
interaction going on in the

528
00:32:55.940 --> 00:32:58.040
client, and then you get
that data back to the

529
00:32:58.040 --> 00:33:02.600
server. So that's the end
to end scenario. And some

530
00:33:02.600 --> 00:33:05.150
plating is a key part
of these because that's the

531
00:33:05.150 --> 00:33:09.140
part that takes your data
and the OBS from interactive

532
00:33:09.140 --> 00:33:12.910
UI from it. Okay, exactly.
I was at tech ed

533
00:33:12.910 --> 00:33:16.840
Australia and New Zealand just last
week. And I used some

534
00:33:16.840 --> 00:33:21.670
JavaScript and the Historia now
ado.net data services, JavaScript API

535
00:33:21.700 --> 00:33:25.990
to pull information over and
put it into an owner

536
00:33:25.990 --> 00:33:30.250
list. But I ended up
just using string concatenation. So

537
00:33:30.250 --> 00:33:31.750
I should have used, I
would, would've been able to

538
00:33:31.750 --> 00:33:33.130
use this and would have
been a simpler way to

539
00:33:33.130 --> 00:33:36.880
do it. So there are
actually two main ways you

540
00:33:36.880 --> 00:33:41.680
can construct UI from, from
data on the client. You

541
00:33:41.680 --> 00:33:44.980
can do string concatenation like
she did, but these has

542
00:33:44.980 --> 00:33:48.940
an invoice issues. I was
saying earlier, like, like preventing.

543
00:33:51.280 --> 00:33:56.920
Yeah, exactly. But, but this
is usually fairly fast. I

544
00:33:56.920 --> 00:34:02.080
mean, even the fastest apportion
that you can use or

545
00:34:02.080 --> 00:34:04.030
you can use the dome
API. And if you use

546
00:34:04.030 --> 00:34:07.450
the domain API, it's another
kind of nightmare because your

547
00:34:07.450 --> 00:34:13.460
code becomes very unreadable and
very unmaintainable and this is

548
00:34:13.460 --> 00:34:17.980
issues on use an abstraction
layer and you have the

549
00:34:18.070 --> 00:34:22.000
right abstraction here is to
use a template. So it's

550
00:34:22.000 --> 00:34:26.440
on page. It's just, I
mean, this has been, this

551
00:34:26.440 --> 00:34:29.710
has been a shift for
over, I mean, we've been

552
00:34:29.710 --> 00:34:32.830
using templating engines for, for
forever, but on the client

553
00:34:32.830 --> 00:34:39.970
there <inaudible>. And so some
case engine is doing is

554
00:34:40.390 --> 00:34:46.660
it's hiding the way it's
actually constructing the HTML and

555
00:34:46.660 --> 00:34:50.440
what it's presenting you as
the abstraction is HTML. We

556
00:34:50.440 --> 00:34:54.180
place holder where the data
is going to go. Like

557
00:34:54.180 --> 00:34:59.560
it goes, that's the medium
way of describing it. Okay.

558
00:34:59.560 --> 00:35:01.480
So in this case, I
would have made my, my

559
00:35:01.530 --> 00:35:04.480
list in my honor list.
And I would say UL

560
00:35:04.480 --> 00:35:06.670
and LLI, and then I
would put a class like

561
00:35:06.670 --> 00:35:10.180
a CSS class on that,
on that element. And that

562
00:35:10.180 --> 00:35:13.300
would make it, make it
available to you to pull

563
00:35:13.300 --> 00:35:16.750
data into No, what you,
what you do is that

564
00:35:16.750 --> 00:35:19.900
you insert some kind of,
some kinds of special syntax

565
00:35:19.900 --> 00:35:24.670
plate holders. So we use
a double Charlie abrasive and

566
00:35:24.670 --> 00:35:28.390
what's inside of the double
curly braces will be evaluated.

567
00:35:29.500 --> 00:35:31.660
So let's say for example,
that you want an improve

568
00:35:32.350 --> 00:35:36.310
that has the value that
comes from the first name

569
00:35:36.310 --> 00:35:40.260
field in your data. What
you would do is input

570
00:35:40.410 --> 00:35:46.530
type equals text value equals
<inaudible> race, first name, and

571
00:35:46.530 --> 00:35:51.590
you close your Cardi Bryce
tardigrades Okay. And that, and

572
00:35:51.590 --> 00:35:54.590
that is shipped to the,
to the client. There's no

573
00:35:54.590 --> 00:35:57.560
server side work happening here
that, that, that magic curly

574
00:35:57.560 --> 00:35:59.720
brace curly brace value is
shipped all the way to

575
00:35:59.720 --> 00:36:01.400
the client and lives in
the browser for a moment

576
00:36:01.400 --> 00:36:05.300
before it gets bound. Yes.
So here, everything happens on

577
00:36:05.300 --> 00:36:07.970
the client. And actually when
I do the demo for

578
00:36:07.970 --> 00:36:11.390
the feature, I like to
use a plain HTML page,

579
00:36:11.750 --> 00:36:14.720
not an HBX page because
it's sweet. It's really shows

580
00:36:14.720 --> 00:36:17.240
that there is no service
site magic going on here,

581
00:36:17.510 --> 00:36:22.250
and everything is happening under
science. So they received the

582
00:36:22.250 --> 00:36:28.070
template with the DoubleClick braces.
So how do you Mark

583
00:36:28.160 --> 00:36:31.310
the, you know, the, the
parent element as that, this,

584
00:36:31.310 --> 00:36:35.990
this is the beginning of
a template. So there is

585
00:36:36.000 --> 00:36:39.050
a class that you can
use, but it is mainly

586
00:36:39.050 --> 00:36:42.230
used to hide the market
from the insurance going up

587
00:36:42.230 --> 00:36:45.080
the page. Because when you,
when the page comes to

588
00:36:45.080 --> 00:36:47.390
the client, you don't want
to dump it with the

589
00:36:47.420 --> 00:36:51.290
curly brace placeholder. You don't
want that displayed, right? So

590
00:36:51.290 --> 00:36:55.370
you use a CSS class
just to hide that from

591
00:36:55.370 --> 00:37:00.680
the, from the, but you,
you can, you can only

592
00:37:00.690 --> 00:37:05.240
the CSS class and the
rendering wheel will still work.

593
00:37:06.140 --> 00:37:09.290
Okay. So I would Mark
the CSS class, not to

594
00:37:09.290 --> 00:37:11.210
let you know about it,
but rather to hide that

595
00:37:11.420 --> 00:37:14.990
while it's a, you know,
before it's, it's rendered now,

596
00:37:15.000 --> 00:37:18.260
how do I, where's the
where's the implied looping happen?

597
00:37:19.340 --> 00:37:23.930
So before I, before I
answer that, let me mentioned

598
00:37:23.930 --> 00:37:29.150
how other complete engines are
doing things, because that's kind

599
00:37:29.150 --> 00:37:33.920
of an important distinction here.
What, what most of the

600
00:37:33.920 --> 00:37:36.050
other guys are doing is
that they're actually putting the

601
00:37:36.050 --> 00:37:40.190
templates in a script tag
or in the text area

602
00:37:40.220 --> 00:37:43.040
that's hidden to, or there
are a number of different

603
00:37:43.130 --> 00:37:51.080
approaches. And we are actually
not hiding the template code

604
00:37:51.650 --> 00:37:55.700
inside of the text area
like that, or, or strings

605
00:37:56.000 --> 00:38:01.250
or script tags, because what
they are doing is that

606
00:38:01.280 --> 00:38:03.680
actually, when they get the
code, they get hit as

607
00:38:03.680 --> 00:38:08.000
a string. We get it
directly as a dumb, as

608
00:38:08.000 --> 00:38:16.310
a structured. So we are
using the browser HTML, passer

609
00:38:16.880 --> 00:38:22.370
to our benefit here. Okay.
Okay. So you have in

610
00:38:22.370 --> 00:38:25.730
your piggy backing your semantics
on what it would already

611
00:38:25.730 --> 00:38:29.390
is coming down. Yeah. So
one of the things we've

612
00:38:29.390 --> 00:38:31.970
done is make sure that
the syntax that we come

613
00:38:31.970 --> 00:38:35.890
up with printed is compatible
with XHTML for example, because

614
00:38:35.940 --> 00:38:40.060
the code for the take
itself is, can be exit

615
00:38:40.060 --> 00:38:44.850
Shema compliance. If I was
going to use the templating

616
00:38:44.850 --> 00:38:47.850
in the middle of an
already XHTML compliance site, I

617
00:38:47.860 --> 00:38:50.940
would be very frustrated if
the templating engine, we know

618
00:38:50.940 --> 00:38:54.450
it didn't create very readable
code. You know, if I

619
00:38:54.450 --> 00:38:56.850
couldn't visualize what the template
is going to go into

620
00:38:56.850 --> 00:38:59.340
generate. And certainly I'd be
very frustrated if it didn't

621
00:38:59.340 --> 00:39:04.230
validate anymore. Yeah. So there
is a number of advantages

622
00:39:04.260 --> 00:39:06.780
to that. The first is
that we get the dump,

623
00:39:06.810 --> 00:39:09.990
the instrument passing for free
from the browser. The second

624
00:39:10.020 --> 00:39:13.730
is that it validates. And
the third one is it's

625
00:39:14.610 --> 00:39:18.180
easier to design. You can
actually open that page in

626
00:39:18.180 --> 00:39:20.940
an HTML design. And I
like doing, we were obviously

627
00:39:20.940 --> 00:39:25.470
a studio and your designer
is going to give all

628
00:39:25.490 --> 00:39:29.640
to edit that code. Like
he did eating regular HTML.

629
00:39:30.900 --> 00:39:35.220
Ah, okay. So it's not
just a stream. That's stuck

630
00:39:35.230 --> 00:39:37.860
somewhere into the, into the
page, which is a lot

631
00:39:37.860 --> 00:39:44.130
more, a lot more difficult
to handle and manage. So

632
00:39:44.130 --> 00:39:49.410
now that I've explained that
we can, we can, maybe

633
00:39:49.410 --> 00:39:53.850
I can answer your actual
question. Well, I'm trying to

634
00:39:53.850 --> 00:39:57.390
understand how this gets bound,
how this gets bound up.

635
00:39:57.390 --> 00:40:02.130
So I, I go and
get a parent element presumably

636
00:40:02.130 --> 00:40:06.330
by ID, right? And then
I need to set the

637
00:40:06.330 --> 00:40:09.000
data to go and looking
at, how do you traverse

638
00:40:09.000 --> 00:40:12.930
the Dom looking for you,
these special curly brace, curly

639
00:40:12.930 --> 00:40:15.870
brace values. And am I
able to go and grab

640
00:40:15.930 --> 00:40:19.830
any parent element and say,
this is a, a client

641
00:40:19.830 --> 00:40:24.360
side template. Yeah, we do.
So that, that, that's, that's

642
00:40:24.360 --> 00:40:29.760
actually quite interesting to chat.
So when you, when you

643
00:40:29.760 --> 00:40:32.560
create, when you use that
someplace, no matter where you

644
00:40:32.560 --> 00:40:35.670
use it, we are shipping
a control. That's called data

645
00:40:35.670 --> 00:40:38.850
view that that is going
to instantiate it on paper

646
00:40:38.870 --> 00:40:42.060
for you. But other controls
could take advantage of this

647
00:40:42.420 --> 00:40:45.390
same system. So what happens
is that when we pass

648
00:40:45.390 --> 00:40:50.370
the template, we are actually
compiling it. If you want

649
00:40:50.610 --> 00:40:58.440
into a JavaScript function and
that's something that's quite powerful.

650
00:40:59.310 --> 00:41:02.610
So what happens is that
Twitch Canada have this template.

651
00:41:02.640 --> 00:41:05.610
And we do this only
once when, when you pass

652
00:41:05.610 --> 00:41:09.750
it on fate, the first
time, and we generate JavaScript

653
00:41:09.780 --> 00:41:15.030
code that would create the
equivalent. And that JavaScript code

654
00:41:15.030 --> 00:41:21.120
is using the Euro and
the Optum API, and where

655
00:41:21.120 --> 00:41:25.890
this becomes really powerful is
that if you have a

656
00:41:25.900 --> 00:41:31.260
double curly Brady's expression, this
expression is JavaScript. We didn't

657
00:41:31.260 --> 00:41:37.790
introduce a new expression language.
Like actually some other template

658
00:41:37.820 --> 00:41:41.810
engines are doing, we are
actually using JavaScript because we

659
00:41:41.810 --> 00:41:46.580
already had it. Why, why
not use it? And if

660
00:41:46.580 --> 00:41:48.530
we go back to the
way we pass the template

661
00:41:48.530 --> 00:41:52.670
and we generate them instructions
from that, this really fits

662
00:41:52.670 --> 00:41:57.380
very well because setting the
attributes of a tag with

663
00:41:57.800 --> 00:42:04.340
an expression, we are just
doing set attributes and we

664
00:42:04.340 --> 00:42:08.890
are just injecting that expression
directly into the code. So

665
00:42:08.890 --> 00:42:11.590
could I put a conditional
inside of a curly brace,

666
00:42:11.590 --> 00:42:15.010
credit brace? You can put
any JavaScript expression you want

667
00:42:16.060 --> 00:42:20.470
Even another, even a call
to jQuery. Yeah, sure. Why

668
00:42:20.470 --> 00:42:24.640
not? Huh. Okay. That's pretty
powerful. Now, how do you

669
00:42:24.640 --> 00:42:27.310
handle, if I was going
to do string concatenation inside,

670
00:42:27.310 --> 00:42:28.870
if I was going to
take first name and last

671
00:42:28.870 --> 00:42:31.870
name and concatenate them, could
I get into trouble? And

672
00:42:31.870 --> 00:42:34.560
that concatenation issue that we
talked about before I, or

673
00:42:34.560 --> 00:42:38.620
are you handling, you know,
in coding these things appropriately

674
00:42:38.620 --> 00:42:42.580
for us? Yeah. So that's
another benefit that we get

675
00:42:42.580 --> 00:42:45.280
for free. When you do
set up with youth, when

676
00:42:45.280 --> 00:42:48.450
you use the dome API,
you know, the world, the,

677
00:42:48.450 --> 00:42:50.650
the browser is going to
do the encoding for you.

678
00:42:51.070 --> 00:42:53.080
When you said the value
of an input tag, for

679
00:42:53.080 --> 00:42:56.710
example, you don't have to
worry about including your, you

680
00:42:56.710 --> 00:43:00.100
don't have to worry about
an unclosed quote in there

681
00:43:00.550 --> 00:43:02.920
because the quote is just
part of the string that

682
00:43:02.920 --> 00:43:08.160
you said, this is exactly
equivalent to using a parameter.

683
00:43:08.260 --> 00:43:11.020
When you build SQL, this
is exactly the same thing.

684
00:43:11.500 --> 00:43:14.380
It's safe by design. Oh,
okay. So this isn't this.

685
00:43:14.380 --> 00:43:18.550
So all this templating is
a clean, HTML focused abstraction

686
00:43:18.550 --> 00:43:20.950
on top of the Dom
API that does the right

687
00:43:20.950 --> 00:43:23.860
thing already. So there is
a lot we get for

688
00:43:23.860 --> 00:43:28.000
free when doing that. And
that's one of the deciding

689
00:43:28.000 --> 00:43:33.790
factors that came into play
when we consider different designs

690
00:43:33.790 --> 00:43:36.610
for, for the some page
feature. And we did consider

691
00:43:36.610 --> 00:43:38.620
quite a lot of them.
Now, how, how would I

692
00:43:38.620 --> 00:43:42.010
do conditionals to show an,
a tag or not show

693
00:43:42.010 --> 00:43:44.320
a tag? If I wanted
to, to look at information

694
00:43:44.320 --> 00:43:46.780
in the data and then
alternatively show something or not

695
00:43:46.780 --> 00:43:50.920
show something? Yeah. So the
way we do it is

696
00:43:50.920 --> 00:43:53.920
that you, you, you, in
addition to the double carry

697
00:43:53.920 --> 00:43:58.120
braces, which are expressions that
get evaluated and injected into

698
00:43:58.120 --> 00:44:05.080
someplace, you can also have
code blocks. And this is

699
00:44:05.380 --> 00:44:10.030
absolutely arbitrary JavaScript. And she
it's just like in a

700
00:44:10.090 --> 00:44:14.800
classy KST or PHP, you
can have a nice instruction

701
00:44:14.860 --> 00:44:20.200
surrounding markets, or you can
have a four loop around

702
00:44:20.200 --> 00:44:23.740
market, which means that if
she wants to do a

703
00:44:23.740 --> 00:44:28.990
conditional rendering, you can put
a nice instruction around the

704
00:44:28.990 --> 00:44:31.180
market that you want to
condition the show or hide.

705
00:44:31.830 --> 00:44:34.820
And that's how you do
it. And that's that that's,

706
00:44:34.850 --> 00:44:36.860
that's just done as a
script block, or how is

707
00:44:36.860 --> 00:44:42.630
that? That if statement tunneled.
So the, the, the script

708
00:44:42.650 --> 00:44:45.080
clerk, when we pass the
template, we just take that

709
00:44:45.080 --> 00:44:47.600
square block and we inject
the code directly into the

710
00:44:47.600 --> 00:44:52.340
function that we're generating. Again,
we are getting the benefit

711
00:44:52.340 --> 00:44:56.180
of JavaScript for free here,
But that script block is

712
00:44:56.180 --> 00:45:00.320
inside of a comment. Oh,
okay. So the actual, the

713
00:45:00.320 --> 00:45:06.200
actual syntax here for those
code blocks is inside special

714
00:45:06.200 --> 00:45:11.750
comments. So it's a, you
know, inferior bang dash dash,

715
00:45:11.870 --> 00:45:14.780
and then we're using a
start to this thing where

716
00:45:14.780 --> 00:45:16.940
you start from where you
doll that she made comments.

717
00:45:17.600 --> 00:45:20.440
So this was, this was
something that we heavily discussed.

718
00:45:20.700 --> 00:45:23.180
We tried to find many
of our, we try to

719
00:45:23.180 --> 00:45:30.290
find even one alternate way
of doing that. And unfortunately,

720
00:45:30.350 --> 00:45:35.000
comments were the, the, the
most viable options options here.

721
00:45:36.710 --> 00:45:40.820
So it's kind of a
problem because comments are supposed

722
00:45:40.820 --> 00:45:43.490
to be optional and you
should be able to remove

723
00:45:43.490 --> 00:45:45.710
comments and get the same
behavior. Yeah. And someone might

724
00:45:45.710 --> 00:45:47.300
strip them out. I mean,
they may have, they may

725
00:45:47.300 --> 00:45:51.170
have a mini fire that
strips them out. Yep. And

726
00:45:51.200 --> 00:45:55.160
that's, that's a, that's one
of the programs that we

727
00:45:55.160 --> 00:46:02.840
decided to just leave with
because all the other company

728
00:46:02.840 --> 00:46:06.710
dates for that just had
their own issues that were

729
00:46:07.070 --> 00:46:09.980
more important than, than this
issue. So share where we

730
00:46:09.980 --> 00:46:12.950
already hitting a supplemental program,
which is that we are

731
00:46:12.950 --> 00:46:17.090
trying to introduce new semantics
into an already existing language,

732
00:46:17.120 --> 00:46:20.060
which is at CML. Well,
I suppose they could certainly

733
00:46:20.060 --> 00:46:23.170
do that kind of logic
in post-processing if they didn't,

734
00:46:23.170 --> 00:46:26.210
if they found that comment,
block distasteful, they could simply

735
00:46:26.210 --> 00:46:29.900
do the work later. That,
that that's an excellent point

736
00:46:29.930 --> 00:46:35.090
and something that we should
quite some detail actually, which

737
00:46:35.090 --> 00:46:38.840
is that all that you
can do here can also

738
00:46:38.840 --> 00:46:44.810
be done. Imperatively so every
time you, every time the

739
00:46:44.810 --> 00:46:48.500
Thumbtack gets intense instantiated in
data view, for example, there

740
00:46:48.500 --> 00:46:51.350
is an event that's called
on item created that you

741
00:46:51.350 --> 00:46:54.170
can handle. And from these
events, you get access to

742
00:46:54.170 --> 00:46:56.660
all the dumb that you
have just created from the

743
00:46:56.660 --> 00:46:59.510
template. And you can modify
this on the fly. So

744
00:46:59.510 --> 00:47:03.110
this is the clean way
of doing things. If you

745
00:47:03.110 --> 00:47:06.770
don't like the inline code
ducks. Very cool. Very cool.

746
00:47:06.770 --> 00:47:08.150
Well, we're almost out of
time here. So I have

747
00:47:08.150 --> 00:47:10.820
one last question. You know,
if someone's using the, you

748
00:47:10.820 --> 00:47:12.950
know, the big three dot
X library, the three dot

749
00:47:12.950 --> 00:47:15.140
X, Microsoft Ajax library, and
they're going to be moving

750
00:47:15.140 --> 00:47:17.840
to four. Oh, is this
going to be separate files

751
00:47:17.840 --> 00:47:19.940
that they can use a
can, can someone, you know,

752
00:47:20.000 --> 00:47:22.160
if someone wants the FORO
feature set, but they don't

753
00:47:22.160 --> 00:47:25.070
want a lot of the
stuff that's inside of, you

754
00:47:25.070 --> 00:47:27.300
know, three dot X what's
that transition? Like, is it

755
00:47:27.320 --> 00:47:29.830
a, is it a cafeteria
plan? I can pick some

756
00:47:29.830 --> 00:47:31.660
features and not others, or
does a, is it a

757
00:47:31.660 --> 00:47:33.550
whole, you take the entire
JavaScript that you're going to

758
00:47:33.550 --> 00:47:38.370
need. Yeah. So that's, that's
a good question because we

759
00:47:38.370 --> 00:47:43.320
are actually looking for giving
you more choice into what

760
00:47:43.320 --> 00:47:45.690
you, what you include on
what you don't think to

761
00:47:45.960 --> 00:47:49.470
today. Microsoft Ajax is it's
not that big. It's something

762
00:47:49.470 --> 00:47:56.910
like 22 or 24 K
DC. So it's not that

763
00:47:56.910 --> 00:48:00.210
big, but chances are, there
is some stuff in there

764
00:48:00.210 --> 00:48:02.880
that you're not going to
use in your application. So

765
00:48:02.880 --> 00:48:05.700
we want to supply things
into smaller beads so that

766
00:48:05.700 --> 00:48:08.460
you can pick and choose.
And this also applies of

767
00:48:08.460 --> 00:48:10.980
course, with the, the new
stuff we are doing. So

768
00:48:10.980 --> 00:48:15.460
currently, if you include the
new stuff, you include Microsoft

769
00:48:15.590 --> 00:48:19.440
Jack's template, and this contains
the template engine. It contains

770
00:48:19.440 --> 00:48:27.090
the bindings contains the marker
expressions, but all these feeds

771
00:48:27.090 --> 00:48:32.370
together, right? W actually we
haven't talked about the bindings

772
00:48:32.400 --> 00:48:35.370
that this is, this is
a system that enables you

773
00:48:35.370 --> 00:48:41.520
to have bindings, which go
beyond the time that the

774
00:48:41.520 --> 00:48:45.030
complaint it gets into functionality.
So, Well, it sounds like

775
00:48:45.030 --> 00:48:46.620
we go into a lot
more detail if we had

776
00:48:46.620 --> 00:48:48.570
the time, but I'm going
to, we'll send people up

777
00:48:48.570 --> 00:48:51.960
to your, your blog up
at, at asp.net tales from

778
00:48:51.960 --> 00:48:54.670
the evil empire. And we'll
also point people to code

779
00:48:54.670 --> 00:48:58.050
plex.com/asp net. And I'll be
sure to put in all

780
00:48:58.050 --> 00:48:59.700
the links in the show
notes, and then any links

781
00:48:59.700 --> 00:49:03.030
that you give me to,
to get people information about

782
00:49:03.030 --> 00:49:05.520
how they can do this
kind of work themselves. Pretrial.

783
00:49:05.550 --> 00:49:07.140
Thank you so much for
taking the time to chat

784
00:49:07.140 --> 00:49:11.220
with me today. I really
appreciate it. This has been

785
00:49:11.220 --> 00:49:13.980
another episode of Hanselminutes and
we'll see you again next

786
00:49:13.980 --> 00:49:14.220
week.

