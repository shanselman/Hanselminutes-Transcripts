WEBVTT FILE

1
00:00:12.090 --> 00:00:17.400
From hanselminutes.com. It's Hanselman. It's
a weekly discussion with web

2
00:00:17.400 --> 00:00:22.110
developer and technologists and Scott
Hanselman. Mrs. Lawrence Ryan announcing show

3
00:00:22.110 --> 00:00:28.530
number two 83. Recorded live
Monday, September 5th, 2011. Support for Hanselman

4
00:00:28.680 --> 00:00:32.610
is provided by Tellerik rad
controls, the most comprehensive suite

5
00:00:32.610 --> 00:00:41.670
of components for windows forms
and asp.net web applications. online@wwwdottelerik.com.

6
00:00:42.270 --> 00:00:45.840
In this episode, Scott talks
with Paul's Novell about launching

7
00:00:45.840 --> 00:00:51.440
his own ISV. Hi, this
is Scott Hanselman. This is

8
00:00:51.440 --> 00:00:54.110
another episode of Hansel minutes.
I thought of it last

9
00:00:54.110 --> 00:00:56.540
week. We did it last
week. Startup series. This is

10
00:00:56.900 --> 00:00:59.840
startup series. Number two, when
I'm talking with Paul's devel

11
00:00:59.840 --> 00:01:02.360
recently moved from Australia to
London. How are you, sir?

12
00:01:02.750 --> 00:01:04.640
I'm good. Thanks Scott. Thanks
for having me. You did

13
00:01:04.640 --> 00:01:10.100
it. You started your own
company. That's technically I've started

14
00:01:10.100 --> 00:01:12.380
a company. We're not really
a trading at the moment,

15
00:01:12.440 --> 00:01:14.750
but there's a product and
hopefully it'll, it'll go on

16
00:01:14.750 --> 00:01:17.630
salivary sane. So is it
a big deal to start

17
00:01:17.630 --> 00:01:19.190
a company anymore? I mean,
I know I did a

18
00:01:19.190 --> 00:01:22.850
show with a shaker cake
awhile back on a micro

19
00:01:22.850 --> 00:01:25.220
ISV. It seems like that's
the hip new thing to

20
00:01:25.220 --> 00:01:27.350
do. You start a tiny,
tiny company and you have

21
00:01:27.350 --> 00:01:31.460
no support department. It's just
all in the cloud. That's

22
00:01:31.460 --> 00:01:34.820
right. Yeah. It's, it's, it's
been surprisingly easy so far.

23
00:01:34.820 --> 00:01:37.790
I guess I'm, I'm probably
ignorance of how complicated it

24
00:01:37.790 --> 00:01:40.100
actually is. And so I'm
just kind of doing one

25
00:01:40.100 --> 00:01:42.320
step at a time. And
so far it's actually been

26
00:01:42.320 --> 00:01:44.900
quite easy. A lot of
the things in Australia, at

27
00:01:44.900 --> 00:01:47.810
least you can, you can
register online to get set

28
00:01:47.810 --> 00:01:50.690
up and, and very similar
in the UK where I

29
00:01:50.690 --> 00:01:54.050
am now. So you're, you're
an Australian citizen, but you're

30
00:01:54.050 --> 00:01:58.010
in London working. Did you
give any thought to that

31
00:01:58.010 --> 00:01:59.330
or are you just doing
all of this as an

32
00:01:59.330 --> 00:02:03.620
Australian? So actually I'm contracting
here in the UK for

33
00:02:03.620 --> 00:02:07.640
an investment bank and using
that same business to develop

34
00:02:07.640 --> 00:02:10.760
a product. So it's, it's
a, it's a UK based

35
00:02:10.760 --> 00:02:13.880
company. Okay. So you, how
do you start this? You

36
00:02:13.880 --> 00:02:15.170
mean you come up with
a name for your company

37
00:02:15.170 --> 00:02:17.750
and then what what's involved.
I guess you come up

38
00:02:17.750 --> 00:02:20.540
with the name, you, you
check that it's available in

39
00:02:20.540 --> 00:02:22.040
this case. It's based on
my last name. So it

40
00:02:22.040 --> 00:02:25.400
wasn't too hard to find
something and then you register

41
00:02:25.400 --> 00:02:27.650
it online and there's a
lot of service providers. That'll,

42
00:02:27.740 --> 00:02:30.470
that'll do that at that
point. You've got a company

43
00:02:30.890 --> 00:02:33.110
for contracting. There are a
few extra things to do,

44
00:02:33.110 --> 00:02:36.350
like around the insurance, et
cetera. But generally I think

45
00:02:36.350 --> 00:02:37.910
it took maybe a couple
of days to get the

46
00:02:37.910 --> 00:02:42.440
whole thing, legally set up
as an entity. Some things

47
00:02:42.440 --> 00:02:45.230
like setting up bank accounts.
So in the UK, at

48
00:02:45.230 --> 00:02:48.260
least a lot more difficult,
but yeah, that's, that's really

49
00:02:48.260 --> 00:02:50.360
all there is to it.
So definitely something that you

50
00:02:50.360 --> 00:02:52.550
should do as an entity,
you should make this like

51
00:02:52.550 --> 00:02:54.890
an LLC or a corporation.
And it doesn't sound like

52
00:02:54.890 --> 00:02:56.480
the kind of thing you'd
want to attach your name

53
00:02:56.480 --> 00:02:58.180
to and just say, Hey,
I've got a PayPal starts

54
00:02:58.180 --> 00:03:01.900
sending me cash. Yeah. Bob
Walsh has a good book,

55
00:03:02.440 --> 00:03:05.380
micro ISV from vision to
reality. And he kind of

56
00:03:05.380 --> 00:03:08.560
talks about the different company
structures that are about a

57
00:03:08.560 --> 00:03:11.350
company sole trader, that kind
of thing. But it seems

58
00:03:11.350 --> 00:03:14.080
to be a lot of
tax advantages to doing it

59
00:03:14.080 --> 00:03:16.720
through a company. And I
guess I needed a company

60
00:03:16.720 --> 00:03:19.300
to contract through. So it
kind of kills two birds

61
00:03:19.300 --> 00:03:22.890
with one stone. So what
is, what was your checklist

62
00:03:22.890 --> 00:03:24.750
of things you needed to
do once you got your

63
00:03:24.750 --> 00:03:27.990
paperwork and your checks and
you made your name? There's

64
00:03:27.990 --> 00:03:30.690
the usual stuff that I
think folks who are listening

65
00:03:30.690 --> 00:03:32.640
to the show, obviously know
how to do registered domain

66
00:03:32.700 --> 00:03:34.950
set up things, but there's
a lot of stuff like

67
00:03:34.950 --> 00:03:38.250
discussion boards and hosting and,
and who does your email

68
00:03:38.250 --> 00:03:40.920
and where your source code
and your tracking and continuous

69
00:03:40.920 --> 00:03:43.290
integration, all these things. How
do you make those decisions

70
00:03:43.290 --> 00:03:45.840
and what did you end
up going with? Yeah, I'd

71
00:03:45.840 --> 00:03:47.940
like to say it was
a long and, and well

72
00:03:47.940 --> 00:03:50.070
thought out process. It's, it's
kind of just been making

73
00:03:50.070 --> 00:03:52.560
it up as I go
along. I started with, you

74
00:03:52.560 --> 00:03:57.450
did an interview with Leon
Bambrick from Australia. Yeah, that's

75
00:03:57.450 --> 00:03:59.970
right about his micro eyes
for you. And he had

76
00:03:59.970 --> 00:04:03.120
a list of about 25
things. So I kind of

77
00:04:03.120 --> 00:04:05.670
started from there. So you're
getting domains, there's some of

78
00:04:05.670 --> 00:04:09.960
the obvious things, my email
is hosted through Google apps,

79
00:04:11.790 --> 00:04:14.520
discussion boards are through tender.
And a lot of this

80
00:04:14.520 --> 00:04:17.430
is actually just looking at
products that I admire, like

81
00:04:17.670 --> 00:04:20.520
agile as in and at
Harbor and seeing, I guess

82
00:04:20.520 --> 00:04:22.410
how they're doing things and
the way they interact with

83
00:04:22.410 --> 00:04:26.550
their customers. And it turns
out those are quite good

84
00:04:26.550 --> 00:04:29.640
services. So is that the
way you thought of it?

85
00:04:29.640 --> 00:04:31.800
You said, let me look
at some of the smaller

86
00:04:31.800 --> 00:04:34.590
companies that I respect and
see what they're using for

87
00:04:34.590 --> 00:04:36.780
their discussion boards or what
they're using for their hosting.

88
00:04:37.170 --> 00:04:39.840
Yeah, That's right. I figure
if I liked the company

89
00:04:40.410 --> 00:04:43.290
and other people do, then
they must be doing something

90
00:04:43.290 --> 00:04:47.130
right. And I guess at
this stage, it's, you kind

91
00:04:47.130 --> 00:04:48.930
of want to just focus
on building a product. So

92
00:04:48.930 --> 00:04:51.630
if you can offload a
lot of the things like

93
00:04:52.050 --> 00:04:54.720
running discussion boards and email
hosting and all of those

94
00:04:54.720 --> 00:04:56.730
things, then, you know, that's,
that's a really good thing

95
00:04:56.730 --> 00:04:59.850
to do. So email hosting
and stuff like that is

96
00:04:59.850 --> 00:05:02.550
obvious. It's either Google apps
or office three 65, it's

97
00:05:02.550 --> 00:05:04.890
all on the cloud. There's
no person to manage the

98
00:05:04.890 --> 00:05:08.280
exchange server. It's just, it's,
it's Google apps and it's

99
00:05:08.280 --> 00:05:10.530
out there and it's handled
that's, that's a no brainer,

100
00:05:10.830 --> 00:05:13.080
but things like source code
hosting, you could have done

101
00:05:13.080 --> 00:05:15.180
many different things. You could
have done, you know, private

102
00:05:15.180 --> 00:05:18.180
Bitbucket repository, but you went
with one called killed. I

103
00:05:18.180 --> 00:05:21.720
think that's Joel Spolsky's company.
Yeah, That's right. I initially

104
00:05:21.720 --> 00:05:25.890
started with Bitbucket, but with,
with Bitbucket because of the

105
00:05:25.890 --> 00:05:29.040
focus on social coding, which
is really nice, you tend

106
00:05:29.040 --> 00:05:32.370
to have, you know, it's,
it's Paul Stovall slash a

107
00:05:32.370 --> 00:05:35.340
project. And I guess for
something that I'm hoping is

108
00:05:35.340 --> 00:05:37.140
going to be a longterm
business, I want it to

109
00:05:37.140 --> 00:05:39.570
be more about, I guess,
the company or the product

110
00:05:39.570 --> 00:05:43.230
first. So using kiln I
guess, was a nicer for

111
00:05:43.230 --> 00:05:47.040
that. And it's free, I
believe for, for one user.

112
00:05:47.040 --> 00:05:49.950
So that works perfect for
me. And is there any

113
00:05:49.950 --> 00:05:52.890
integration with issue tracking or
bugs and count? Cause I

114
00:05:52.890 --> 00:05:56.220
know that if it's, if
it's Joel Spolsky, then it's

115
00:05:56.220 --> 00:05:58.250
probably got something with bugs
or one of his bug

116
00:05:58.280 --> 00:06:00.570
tracking softwares. Yeah. When you,
when you get a kill

117
00:06:00.580 --> 00:06:02.440
in the County, you also
get a fog bugs account.

118
00:06:02.920 --> 00:06:05.980
I don't actually use it.
I'm using agiles in from

119
00:06:06.490 --> 00:06:10.810
Nitin, Nikki Cari, I guess
for me, I have a

120
00:06:10.810 --> 00:06:14.140
very short list of features
I'd like to add and

121
00:06:14.140 --> 00:06:15.820
I don't need a whole
lot of detail about them.

122
00:06:16.150 --> 00:06:18.940
And I use the discussion
boards for, I guess, any

123
00:06:18.940 --> 00:06:22.000
kind of bug reports. So
agile is ends, I guess,

124
00:06:22.060 --> 00:06:24.340
a bit simpler and I
don't really miss having any

125
00:06:24.400 --> 00:06:27.730
integration. I think it's sometimes
a bit overrated. So when

126
00:06:27.730 --> 00:06:30.130
you get these different tools
working together, I mean, task

127
00:06:30.130 --> 00:06:33.670
tracking is agile Zen source
code with <inaudible> I assume

128
00:06:33.670 --> 00:06:38.080
you have continuous integration. Yes.
So I guess in the

129
00:06:38.080 --> 00:06:41.710
days of the cloud, I'm,
I'm perhaps going a bit

130
00:06:41.710 --> 00:06:44.590
backwards. So I ended up
just paying to put a

131
00:06:44.590 --> 00:06:47.710
dedicated server in a data
center and I'm running my

132
00:06:47.710 --> 00:06:51.400
own virtual cloud, I guess,
on top of that. And

133
00:06:51.430 --> 00:06:53.140
so part of that is
a, is a CIA server

134
00:06:53.140 --> 00:06:55.690
using team city. Hmm. And
why did you choose to

135
00:06:55.690 --> 00:06:58.240
do that when there's so
many hosted choices? I mean,

136
00:06:58.270 --> 00:07:00.850
is there something that we
should know as, as listeners

137
00:07:00.850 --> 00:07:02.380
who are trying to learn
from you or is this

138
00:07:02.380 --> 00:07:05.650
just a, you're not bought
into the cloud yet? I

139
00:07:05.650 --> 00:07:08.800
guess the two main advantages
of, of cloud that you

140
00:07:08.800 --> 00:07:12.580
see discussed a lot, the
first is this kind of

141
00:07:12.580 --> 00:07:15.340
commoditization of hardware. So there's
supposed to be a lot

142
00:07:15.340 --> 00:07:17.740
of cost savings. And the
other part is just the

143
00:07:18.310 --> 00:07:20.920
on demand scale out. It's
a lot easier to, to

144
00:07:20.920 --> 00:07:24.490
add lots of servers, being
able to add a lot

145
00:07:24.490 --> 00:07:27.010
of servers for me for
kind of private infrastructure stuff,

146
00:07:27.010 --> 00:07:29.980
I guess isn't that important,
but costs are at this

147
00:07:29.980 --> 00:07:32.980
point. So when you sit
down and do the math

148
00:07:33.010 --> 00:07:36.520
to get, for example, on,
on a zoo to, to

149
00:07:36.910 --> 00:07:40.030
get three machines that you
can remote desktop intimate and

150
00:07:40.030 --> 00:07:43.990
do stuff with, you're probably
looking at about an Australian

151
00:07:43.990 --> 00:07:48.610
dollars, it's about say $90
per machine, maybe about 50,

152
00:07:48.640 --> 00:07:52.780
50 British pounds, whereas to
get a dedicated server with

153
00:07:52.780 --> 00:07:55.570
say 32 gigs of Ram,
at least here in Europe

154
00:07:55.570 --> 00:07:58.300
is quite cheap. And so
for me, it worked out

155
00:07:58.300 --> 00:08:01.030
easy just to, to rent
a server and then put

156
00:08:01.030 --> 00:08:04.600
my own virtual hosting on
top of that. Interesting. So

157
00:08:04.600 --> 00:08:07.750
are you running like hyper
V on that, and then

158
00:08:07.750 --> 00:08:09.430
you have virtual servers because
one of the things that

159
00:08:09.430 --> 00:08:11.290
I think could I would
do if I were going

160
00:08:11.290 --> 00:08:12.640
to start my own company
is I would make sure

161
00:08:12.640 --> 00:08:14.890
that I had snapshots and
the ability to undo things

162
00:08:14.890 --> 00:08:17.800
and using either hyper V
or some kind of virtualization

163
00:08:17.830 --> 00:08:20.110
service would be, but I
would want to do. Yeah,

164
00:08:20.140 --> 00:08:23.560
absolutely. So I'm using VMware
ESX, Y which is just

165
00:08:23.620 --> 00:08:26.110
a bare metal hypervisor. And
then on top of that,

166
00:08:26.110 --> 00:08:29.140
there are about eight different
virtual machines And you can

167
00:08:29.140 --> 00:08:31.810
remote into the hypervisor part
of things and tell it

168
00:08:31.810 --> 00:08:34.750
what to do. Yeah. There's
kind of a remote administration

169
00:08:34.750 --> 00:08:37.360
console that you use to
set up virtual machines, take

170
00:08:37.360 --> 00:08:40.870
snapshots, all of those things.
And then I can remote

171
00:08:40.870 --> 00:08:44.260
desktop into all the machines
on top of that. Interesting.

172
00:08:44.260 --> 00:08:46.930
Interesting. Do you, had you
looked at any of the

173
00:08:46.930 --> 00:08:50.440
virtualization as a service type
services? Like I know that

174
00:08:50.440 --> 00:08:53.290
there's vast net V a
S N E T, which

175
00:08:53.290 --> 00:08:55.890
is literally all they do
is virtualization as a service.

176
00:08:55.890 --> 00:08:58.020
And then you just rent
by the hour of virtual

177
00:08:58.020 --> 00:09:01.040
machine. Interesting. No, I hadn't
looked at that. I guess

178
00:09:01.040 --> 00:09:04.940
the main providers I looked
at were Amazon <inaudible> Azure

179
00:09:05.000 --> 00:09:08.390
and in Australia, there's a
company called nine-fold who are

180
00:09:08.450 --> 00:09:11.930
also a cloud provider, but
just doing the math for

181
00:09:11.930 --> 00:09:13.820
the costs of some of
those, it just turned out

182
00:09:13.820 --> 00:09:16.250
a bit cheaper to get
a server. So this is

183
00:09:16.250 --> 00:09:19.910
interesting though, you, you, you
admit to happily doing the

184
00:09:19.910 --> 00:09:22.100
math, you actually did this
cause I'm not very good

185
00:09:22.100 --> 00:09:24.020
at that myself. And I
tend to just go with

186
00:09:24.020 --> 00:09:25.670
my gut, but it sounds
like you actually did some

187
00:09:25.670 --> 00:09:27.770
analysis here and thought about
what the bottom line was

188
00:09:27.770 --> 00:09:30.250
going to be. Yeah. If
you look at, say the,

189
00:09:30.250 --> 00:09:34.640
the Amazon easy to pricing
pages to get a virtual

190
00:09:34.640 --> 00:09:37.400
machine with, I'm not sure
if it's five, 12 or

191
00:09:37.460 --> 00:09:43.160
712 Meg, and they'll kind
of give you hourly pricing,

192
00:09:43.160 --> 00:09:45.140
but when you imagine that
there's about if you want

193
00:09:45.140 --> 00:09:48.020
your servers running all the
time, there's about 720 hours

194
00:09:48.020 --> 00:09:51.890
in a month. It pretty
quickly adds up. Yeah. Interesting.

195
00:09:51.890 --> 00:09:55.100
Yeah, I guess you're right.
The idea with like with

196
00:09:55.100 --> 00:09:56.750
Azure or one of these
kinds of things that's in

197
00:09:56.750 --> 00:09:58.400
the cloud. If they're going
to start charging you a

198
00:09:58.400 --> 00:10:00.080
hundred bucks a month, it
doesn't take more than a

199
00:10:00.080 --> 00:10:03.110
year before you buy a
machine with the money that

200
00:10:03.110 --> 00:10:06.500
you'd be spending in the
cloud. Yeah, Exactly. The benefit

201
00:10:06.500 --> 00:10:08.510
of it of course, is
that if you did need

202
00:10:08.510 --> 00:10:11.110
to suddenly add five extra
services to cope with, with

203
00:10:11.120 --> 00:10:14.030
demand to do that with
a dedicated server, I'd probably

204
00:10:14.030 --> 00:10:16.070
be looking at, you know,
a couple of weeks to

205
00:10:16.070 --> 00:10:18.860
provision that. So I, I
do see using the cloud

206
00:10:18.860 --> 00:10:20.990
as a way to, if
I need to kind of

207
00:10:20.990 --> 00:10:24.080
rapidly scale something up and
that'd be a nice problem

208
00:10:24.080 --> 00:10:27.050
to have, then I would
look at the cloud, but

209
00:10:27.800 --> 00:10:29.300
I guess for the long
term, it just seems a

210
00:10:29.300 --> 00:10:32.150
bit cheaper this way. Okay.
So talk to me about

211
00:10:32.240 --> 00:10:34.820
the business and what you're
selling and we'll, and then

212
00:10:34.820 --> 00:10:36.440
we'll get back to the
cloud because I think that

213
00:10:36.440 --> 00:10:38.750
the cloud has a place
to play within, within your

214
00:10:38.750 --> 00:10:41.990
business. So what, what's your
product? So the product is

215
00:10:41.990 --> 00:10:46.400
octopus and it's an automated
deployment solution for corporate environments.

216
00:10:46.610 --> 00:10:48.230
So I think of it
as a bit like a

217
00:10:48.560 --> 00:10:52.460
team city meets at parlor
meets new get, but within

218
00:10:52.460 --> 00:10:56.150
your enterprise. Okay. So it's,
it's a deployment system, so

219
00:10:56.150 --> 00:10:58.970
that I have my source
code already. I assume that

220
00:10:58.970 --> 00:11:01.280
I'm using something, whether it
be TFS or HD or

221
00:11:01.280 --> 00:11:05.120
subversion, I'm a company. And
let's say that I've got

222
00:11:05.390 --> 00:11:08.030
I'm agile and I've got
Kanban boards. And I think

223
00:11:08.030 --> 00:11:12.290
I'm really awesome. Except once
a week, some guy opens

224
00:11:12.290 --> 00:11:15.560
up two windows and explore
and then drags a folder

225
00:11:15.560 --> 00:11:18.240
from one machine to another.
And that's our deployment. Yep.

226
00:11:18.470 --> 00:11:20.810
Right. That's where I had
Fred is our deployment system.

227
00:11:21.770 --> 00:11:25.580
That's right. Is that where
you come in? Yeah. So,

228
00:11:25.590 --> 00:11:28.610
so octopus, I guess, takes
over Fred's job or makes

229
00:11:28.610 --> 00:11:32.480
Fred's job a bit easier.
So No, because he was

230
00:11:32.480 --> 00:11:36.410
opening to explore windows That's
right. So, so you would

231
00:11:36.620 --> 00:11:39.590
check code into your source
control system, have your build

232
00:11:39.590 --> 00:11:42.980
service, say team build or
team city, take that code

233
00:11:43.040 --> 00:11:46.550
and package it up into
a new get file. And

234
00:11:46.550 --> 00:11:48.500
then the job of octopus
is to take that, that

235
00:11:48.500 --> 00:11:51.560
new get package and figure
out how to get it

236
00:11:51.560 --> 00:11:53.650
onto all of the machines
you plan to deploy to.

237
00:11:54.040 --> 00:11:58.120
And octopus has this very
strong understanding of test environments,

238
00:11:58.120 --> 00:12:02.250
staging environments, and production environments.
Interesting. So there's two interesting

239
00:12:02.250 --> 00:12:06.090
things there that I just
caught first, the build server

240
00:12:06.090 --> 00:12:08.790
makes a new get file.
So you're using a new

241
00:12:08.790 --> 00:12:11.160
get file, which is just
a zip file with a

242
00:12:11.160 --> 00:12:15.510
manifest you're using new get
as the, the, the, the,

243
00:12:15.510 --> 00:12:18.720
the unit, the package that
is the build artifacts. That's

244
00:12:18.720 --> 00:12:22.470
right. Yeah. So if you,
if you think about automated

245
00:12:22.470 --> 00:12:25.110
deployment, there's, there's kind of
four parts to it. So

246
00:12:25.110 --> 00:12:27.750
there's, what do you want
to deploy? So that's the

247
00:12:27.750 --> 00:12:31.020
package or the artifact. There's
how you get it to

248
00:12:31.020 --> 00:12:33.060
that machine that you actually
want to put it on.

249
00:12:34.020 --> 00:12:37.320
There's the configuration of it.
And then it's the installation.

250
00:12:37.440 --> 00:12:40.560
And, you know, back when,
when Linux took over the

251
00:12:40.560 --> 00:12:43.110
world and we used to,
you know, you'd run one

252
00:12:43.110 --> 00:12:45.630
command to download a package,
the next one to unzip

253
00:12:45.630 --> 00:12:47.370
it, the next one to
make it the next one

254
00:12:47.370 --> 00:12:50.400
to install it. It's, it's
really those same four things

255
00:12:50.400 --> 00:12:54.000
in any automated deployment solution.
So new get works really

256
00:12:54.000 --> 00:12:58.050
well as a packaging format
for doing that. Well, Y

257
00:12:58.080 --> 00:12:59.910
you know, I know that
new gets, you know, the

258
00:12:59.910 --> 00:13:02.280
hot thing that people are
talking about. And I, I'm

259
00:13:02.280 --> 00:13:04.230
certainly trying my best to
make people talk about it,

260
00:13:04.230 --> 00:13:08.730
but ultimately though it is
just a zip file with

261
00:13:08.730 --> 00:13:12.510
some additional metadata. Why new
get, are you trying to

262
00:13:12.510 --> 00:13:15.510
shove in, you know, context
and meta information into a

263
00:13:15.510 --> 00:13:19.780
format that doesn't necessarily wasn't
designed for that? Yeah. So

264
00:13:19.950 --> 00:13:22.590
there's two reasons for using
new gear. One is a

265
00:13:22.590 --> 00:13:25.710
technical reason, really. I guess
if we think about what

266
00:13:25.890 --> 00:13:28.290
some of the alternatives would
be, you've got things like

267
00:13:28.290 --> 00:13:32.790
MSIs Emma's deploy packages, or
just creating your own zip

268
00:13:32.790 --> 00:13:37.650
files. The benefit of new
get is that manifest has

269
00:13:37.650 --> 00:13:41.370
a lot of really rich
information about versioning, because when

270
00:13:41.370 --> 00:13:44.310
you're, when you're deploying, especially
if you look back over

271
00:13:44.310 --> 00:13:46.560
the history of what you've
deployed, it's really important to

272
00:13:46.560 --> 00:13:50.220
know exactly what version of
your software was deployed at

273
00:13:50.220 --> 00:13:52.530
what point in time. And
that's something you definitely don't

274
00:13:52.530 --> 00:13:57.000
get when Fred has his
two Explorer windows open. Exactly.

275
00:13:57.490 --> 00:14:00.360
So, so that manifest information
is, is really rich. The

276
00:14:00.360 --> 00:14:03.540
other part, the technical part
of, of new get is

277
00:14:03.540 --> 00:14:06.930
the data feeds. So it
makes it very easy for

278
00:14:06.930 --> 00:14:10.680
something like octopus to query
and find out what versions

279
00:14:10.680 --> 00:14:13.890
of your software are available.
And then to deploy those,

280
00:14:14.430 --> 00:14:18.060
which if you're just using
site MSIs or web deploy

281
00:14:18.090 --> 00:14:20.430
packages, you'd have to have
some way of kind of

282
00:14:20.850 --> 00:14:26.880
queering them and gathering them
together. Hi, this is Scott

283
00:14:26.910 --> 00:14:29.280
coming to you from another
place in time. Are you

284
00:14:29.280 --> 00:14:32.670
using agile practices to manage
your software development? There's lots

285
00:14:32.670 --> 00:14:34.530
of tools in the market
that manage the steps of

286
00:14:34.530 --> 00:14:37.050
a project, but most of
them focus on individual roles,

287
00:14:37.890 --> 00:14:39.960
get ready for a solution
that caters for the success

288
00:14:39.960 --> 00:14:42.990
of the whole team. Guys
at Tellerik introduced team pulse.

289
00:14:43.590 --> 00:14:46.290
It's an agile project management
tool. That'll help you gather

290
00:14:46.290 --> 00:14:51.060
ideas, estimate plan, track progress
in a common workspace. Finally,

291
00:14:51.110 --> 00:14:53.360
companies, regardless of their size
can use a lightweight and

292
00:14:53.360 --> 00:14:55.460
convenient tool that makes all
the stakeholders work as a

293
00:14:55.460 --> 00:14:59.840
United team. Even if they're
in different countries by combining

294
00:14:59.840 --> 00:15:02.780
intuitive user interface and the
power server light team poles

295
00:15:02.780 --> 00:15:05.690
removes the roadblocks that you
typically face and applying agile

296
00:15:05.690 --> 00:15:08.720
in an effective manner, no
more lost data, no disparate

297
00:15:08.720 --> 00:15:12.610
systems, no lack of critical
analytics regarding the health and

298
00:15:12.610 --> 00:15:16.190
philosophy project. See if yourself
get a free copy for

299
00:15:16.190 --> 00:15:22.340
five users in one project
at tellerik.com/team pulse. And please

300
00:15:22.610 --> 00:15:25.550
do thank Tellerik for supporting
Hanselman it's on their Facebook

301
00:15:25.550 --> 00:15:32.090
fan page, facebook.com/t L E
R I K Tellerik. We

302
00:15:32.090 --> 00:15:33.980
do appreciate it. There wouldn't
be a Hansel minutes. If

303
00:15:33.980 --> 00:15:37.940
there wasn't, Tellerik helping us.
I have experienced in doing

304
00:15:38.090 --> 00:15:42.410
automated distributed deployments. I used
to work at a bank

305
00:15:42.920 --> 00:15:46.880
and we developed a system
that used PowerShell, and this

306
00:15:46.880 --> 00:15:48.980
was kind of before I
must deploy, it was really

307
00:15:48.980 --> 00:15:52.640
like a mature enough to
use, and it was not

308
00:15:52.640 --> 00:15:56.150
really well understood. And we
basically, what we did is

309
00:15:56.150 --> 00:15:58.730
we had the build artifact
pop out of the build

310
00:15:58.730 --> 00:16:03.650
server. We then checked the
build artifact into another subversion.

311
00:16:03.650 --> 00:16:08.880
We had a subversion source
control system that represented what,

312
00:16:08.880 --> 00:16:11.140
what an idealized system would
look like. We checked it

313
00:16:11.140 --> 00:16:13.250
in and we, we labeled
it. So that was our

314
00:16:13.250 --> 00:16:15.950
versioning metadata. We would label
it. Then we would send

315
00:16:15.950 --> 00:16:18.470
information to a service that
was running on when a

316
00:16:18.500 --> 00:16:21.380
one of many, many boxes.
There might be 20 boxes

317
00:16:21.380 --> 00:16:23.570
and they all had this
service and that service would

318
00:16:23.570 --> 00:16:26.540
then go and do a
get from subversion at that

319
00:16:26.540 --> 00:16:28.520
label and then bring the
stuff down. So we would,

320
00:16:28.520 --> 00:16:30.350
it would kind of fan
out and then everyone would

321
00:16:30.350 --> 00:16:33.110
do a big get. And
they would basically check out

322
00:16:33.560 --> 00:16:36.470
from source control this folder,
but then the issue of

323
00:16:36.470 --> 00:16:39.650
like comm objects and registration
and permissions and ankles and

324
00:16:39.650 --> 00:16:43.850
all that kind of stuff
came along. How does your

325
00:16:43.850 --> 00:16:47.120
solution solve those kinds of
Harrier problems? I mean, getting

326
00:16:47.120 --> 00:16:50.180
the files from point a
to point B is only

327
00:16:50.180 --> 00:16:55.300
step zero. Yeah. So I
guess octopus works in fairly

328
00:16:55.300 --> 00:16:58.030
similar way. So the, the
metadata in the version in

329
00:16:58.030 --> 00:17:01.060
comes just from having the
new, you get packages, octopus

330
00:17:01.120 --> 00:17:04.060
picks those up and pushes
it out to agents that

331
00:17:04.060 --> 00:17:06.010
run on all of the
machines that you're planning to

332
00:17:06.010 --> 00:17:09.700
deploy to. It's more of
a push base deployment model,

333
00:17:10.060 --> 00:17:13.060
because one of the scenarios
I wanted to enable with

334
00:17:13.060 --> 00:17:16.330
octopus was not just deploying
two machines that are on

335
00:17:16.330 --> 00:17:19.870
your corporate active directory domain.
But if you have say

336
00:17:19.870 --> 00:17:23.680
a data center in another
part of the city at

337
00:17:23.680 --> 00:17:26.260
the moment, we often do
that just using FTP or

338
00:17:26.530 --> 00:17:28.570
finding some other way of
getting the files onto there.

339
00:17:28.930 --> 00:17:30.610
So we want to be
able to kind of extend

340
00:17:30.610 --> 00:17:34.150
it, perhaps even out onto
the cloud. So that's the

341
00:17:34.150 --> 00:17:39.130
kind of getting files they're
dealing with. Things like ICLs

342
00:17:39.640 --> 00:17:42.490
component registrations. A lot of
that is still done using

343
00:17:42.490 --> 00:17:46.000
PowerShell. The thing that octopus
saves you from is figuring

344
00:17:46.000 --> 00:17:49.990
out how to run the
PowerShell scripts remotely. So you

345
00:17:50.010 --> 00:17:55.050
probably configured a PowerShell remoting
through when RM it's may.

346
00:17:55.050 --> 00:17:56.760
I'm just not smart enough,
but I found it very,

347
00:17:56.760 --> 00:17:59.240
very difficult. Yeah. It's known
to be a little bit

348
00:18:00.200 --> 00:18:03.200
Baroque in, in my case,
we had to do this

349
00:18:03.200 --> 00:18:06.620
before PowerShell remoting existed. So
I ended up making a

350
00:18:06.620 --> 00:18:09.920
PowerShell remoting service of my
own hosting, the PowerShell run

351
00:18:09.920 --> 00:18:12.950
space, and then doing that
work this, you know, that

352
00:18:12.950 --> 00:18:16.100
way, or are you sending
the new, get files over

353
00:18:16.100 --> 00:18:19.330
to the deployment, tentacles, the
nodes at the end of

354
00:18:19.330 --> 00:18:21.500
the other side, and then
having the PowerShell run there?

355
00:18:22.130 --> 00:18:25.580
Yes. And the agents are
called tentacles and that's, that's

356
00:18:25.580 --> 00:18:27.620
kind of where the octopus
comes in. The octopus controls,

357
00:18:27.620 --> 00:18:30.860
the tentacles octopus will go
to new, get and get

358
00:18:30.860 --> 00:18:33.890
the package. And then it
will work out which tentacles

359
00:18:33.890 --> 00:18:36.290
need that package. And it
will push them out through

360
00:18:36.290 --> 00:18:39.860
a WCF call. And that
call is secured through a

361
00:18:39.860 --> 00:18:43.900
couple of X 509 certificates.
So there's kind of a

362
00:18:43.940 --> 00:18:47.390
pretty strong security aspect of
this. So that package gets

363
00:18:47.390 --> 00:18:49.640
uploaded to the 10th school.
And then the 10th school

364
00:18:49.640 --> 00:18:52.970
runs the installation all locally.
So it will unzip the

365
00:18:52.970 --> 00:18:56.240
package, it'll replace web config
values. There's a whole bunch

366
00:18:56.240 --> 00:19:01.160
of conventions that get run
calling PowerShell scripts, configuring IIS

367
00:19:01.160 --> 00:19:04.910
websites, and that's kind of
the deployment done. So it's

368
00:19:04.910 --> 00:19:07.880
pretty much the same service.
Yeah. Interesting. Now of course,

369
00:19:07.880 --> 00:19:10.250
I'm comparing this with the
one thing I know, which

370
00:19:10.250 --> 00:19:11.900
is the system that I
built a long time ago,

371
00:19:11.900 --> 00:19:13.760
but I'm not in any
way trying to imply that

372
00:19:13.760 --> 00:19:16.160
my seven year old or
eight year old, you know,

373
00:19:16.160 --> 00:19:21.050
system of a MacGyver rubber
bands and paper clips is

374
00:19:21.080 --> 00:19:22.940
comparable to an actual product,
but I'm just going to

375
00:19:22.940 --> 00:19:25.790
use it as an example,
because we were using source

376
00:19:25.790 --> 00:19:28.760
control. We could tell if
someone had modified something on

377
00:19:28.760 --> 00:19:31.310
a machine, we had a
number of situations in large

378
00:19:31.310 --> 00:19:34.520
banks where, you know, machine
number 17 of 20 is

379
00:19:34.520 --> 00:19:37.550
acting weird. And we could
actually go into explore on

380
00:19:37.550 --> 00:19:39.680
that machine and look and
see, Oh, well that's changed

381
00:19:39.710 --> 00:19:42.710
because someone's modified this. I
can compare it to the

382
00:19:42.710 --> 00:19:46.580
source up in the sky.
Does that the responsibility you

383
00:19:46.580 --> 00:19:49.790
think of a deployment system
to, to know that one

384
00:19:49.790 --> 00:19:51.740
of the machines is no
longer in line and then

385
00:19:51.740 --> 00:19:53.510
get them back into line.
And can you do that?

386
00:19:54.230 --> 00:19:57.020
Yeah. I mean, it is
kind of a social problem

387
00:19:57.320 --> 00:19:59.600
in the sense that you
kind of hope that your

388
00:19:59.660 --> 00:20:02.630
obvious people won't do that.
But realistically, I don't think

389
00:20:02.630 --> 00:20:04.790
there's a large company in
the world that doesn't have

390
00:20:04.790 --> 00:20:10.340
a copy of copy of
web dot config somewhere. But

391
00:20:10.940 --> 00:20:13.820
so there is one aspect
of that when the package

392
00:20:13.820 --> 00:20:17.330
is uploaded, because new get
packages, they have like a,

393
00:20:17.330 --> 00:20:19.550
a signature. So we can
tell that it hasn't been

394
00:20:19.550 --> 00:20:23.830
modified before it got installed,
but after it's installed, it

395
00:20:23.870 --> 00:20:25.580
would be a really nice
feature in octopus to be

396
00:20:25.580 --> 00:20:28.610
able to say, well, you
know, when we installed everything,

397
00:20:28.640 --> 00:20:30.740
here's the files that were
there and what they have

398
00:20:30.750 --> 00:20:34.310
to and have they changed.
And that's hopefully something that'll,

399
00:20:34.370 --> 00:20:37.340
that'll come in version two.
Okay. So you you're doing

400
00:20:37.340 --> 00:20:39.350
just like nougat does when
you're dealing with this at

401
00:20:39.350 --> 00:20:42.110
a project level, you're keeping
that new, get zip file

402
00:20:42.110 --> 00:20:44.500
around so that you have
a comparison. You have an

403
00:20:44.600 --> 00:20:46.910
internal version control. You can
tell that the one I

404
00:20:47.380 --> 00:20:49.830
is the one that's still
on disk That's right. Yeah.

405
00:20:49.890 --> 00:20:53.250
Yeah. That's clever. That's clever.
Do you think this is

406
00:20:53.250 --> 00:20:55.140
going to confuse people because
I've spent a lot of

407
00:20:55.140 --> 00:20:57.870
time trying to explain that
new get's not for installing

408
00:20:57.900 --> 00:21:00.840
installing software, but it sounds
like the people have spoken

409
00:21:00.840 --> 00:21:02.520
and they are going to
be installing software with new

410
00:21:02.520 --> 00:21:05.940
games. Yeah, I guess so
the other reason for choosing

411
00:21:05.940 --> 00:21:08.220
new get is that it's
a format that's familiar to

412
00:21:08.220 --> 00:21:11.610
developers. So if you compare
it to MSIs, for example,

413
00:21:11.610 --> 00:21:13.770
I know a lot of
people that use Wix, I've

414
00:21:13.770 --> 00:21:17.670
never met anyone that enjoys
using weeks and for creating

415
00:21:17.670 --> 00:21:20.040
MSIs. And that's not really
a reflection of weeks. I

416
00:21:20.040 --> 00:21:22.280
think weeks does the best
job it can, but MSI

417
00:21:22.290 --> 00:21:26.400
is just very complicated. Whereas
new get packages, developers are

418
00:21:26.400 --> 00:21:28.800
becoming intimately familiar with them.
You know, every time we,

419
00:21:29.160 --> 00:21:31.770
I love it, actually, when
I create a new project,

420
00:21:31.830 --> 00:21:34.410
you know, I do file
new project. I right. Click

421
00:21:34.410 --> 00:21:37.140
and I say, add library,
package reference. And then I

422
00:21:37.140 --> 00:21:38.940
kind of go into the
shopping spree of, you know,

423
00:21:38.940 --> 00:21:41.010
what packages are available that
I could use that would

424
00:21:41.010 --> 00:21:43.980
be, you know, fun and
interesting. So developers, I think

425
00:21:44.910 --> 00:21:46.590
they're really liking new gear
and it is a very

426
00:21:46.590 --> 00:21:49.710
simple file format. It's very
convention based. And I think

427
00:21:49.710 --> 00:21:52.770
that works very well for
deployments as well. So let's

428
00:21:52.830 --> 00:21:54.540
why don't you walk me
through how that would work?

429
00:21:54.570 --> 00:21:56.530
Let's say that I like,
for example, we just updated

430
00:21:56.920 --> 00:22:01.140
nerd dinner to version three,
we put in razor and

431
00:22:01.140 --> 00:22:03.750
all this kind of fancy
stuff, and I've got a

432
00:22:03.780 --> 00:22:07.170
VM that's up in the
cloud somewhere right now. I

433
00:22:07.170 --> 00:22:09.780
right. Click and I say
publish, but I do it

434
00:22:09.780 --> 00:22:13.290
from visual studio. I could
probably type EMIS deploy from

435
00:22:13.290 --> 00:22:16.680
the command line. We have
continuous integration at team city.

436
00:22:17.700 --> 00:22:20.850
We have a cloud based
continuous integration server. That team

437
00:22:20.860 --> 00:22:22.560
city's been kind enough to
let us use it code

438
00:22:22.560 --> 00:22:26.580
better. How would I change
my deployment? And what would

439
00:22:26.580 --> 00:22:30.960
something like octopus add to
that experience? So you would,

440
00:22:30.990 --> 00:22:33.030
you would check in the
changes that you've made TeamCity

441
00:22:33.030 --> 00:22:36.210
would build that source code,
run the tests, those things

442
00:22:37.050 --> 00:22:39.000
out of that, you would
get a new get package

443
00:22:39.030 --> 00:22:43.560
that says this is version
one dot five of Nerdina.

444
00:22:43.980 --> 00:22:45.690
Okay. But I don't do
that now. I don't make

445
00:22:45.990 --> 00:22:48.000
a new get package as
a build artifact right now.

446
00:22:48.000 --> 00:22:51.840
I just have a bin
folder. Yeah. So you would

447
00:22:51.840 --> 00:22:54.360
need to create the new
get package. That's actually fairly

448
00:22:54.360 --> 00:22:56.790
easy because if you have
the negate command line, you

449
00:22:56.790 --> 00:22:58.920
get dot DXC. It's fairly
easy just to take a

450
00:22:58.920 --> 00:23:01.860
folder and turn that into
a package. One of the

451
00:23:01.860 --> 00:23:03.360
things I'd like to be
able to do is just

452
00:23:03.390 --> 00:23:06.090
because TeamCity does provide sort
of RSS feeds about the

453
00:23:06.090 --> 00:23:08.490
artifacts that it has to
be able to kind of

454
00:23:08.520 --> 00:23:11.280
implicitly create an, you get
packaged for you straight out

455
00:23:11.280 --> 00:23:14.190
of team city. They didn't
the announced, I mean, I've

456
00:23:14.190 --> 00:23:16.170
been working with them about
new gets support, and I

457
00:23:16.170 --> 00:23:18.690
know that they support pulling
new, get packages in. Do

458
00:23:18.690 --> 00:23:22.410
they support making them know
and their new version? Not

459
00:23:22.410 --> 00:23:24.920
that I've seen, although I
know you did a, a

460
00:23:24.930 --> 00:23:28.470
blog post about this a
little while ago for, I

461
00:23:28.470 --> 00:23:30.360
wasn't sure if it was
for publishing you get packages

462
00:23:30.360 --> 00:23:33.960
or, Well, they'll, they'll, they'll
bring nugget packages down. They'll

463
00:23:33.960 --> 00:23:36.780
restore them from a packages
dot config. If you don't

464
00:23:36.780 --> 00:23:39.810
already have them there, we'll
have to check. I'm sure

465
00:23:39.810 --> 00:23:42.240
that we'll find out is
a second that this is

466
00:23:42.240 --> 00:23:44.430
a, this podcast is over
that they either do, or

467
00:23:44.430 --> 00:23:46.700
they don't, but it like
they're, they're bought in on

468
00:23:46.700 --> 00:23:48.740
new get team city is
bought in on new gets.

469
00:23:48.740 --> 00:23:51.290
So it sounds like having
a build artifact where I

470
00:23:51.290 --> 00:23:53.060
could just flip a switch
and say, Oh, by the

471
00:23:53.060 --> 00:23:54.790
way, after this is built,
make me a new get

472
00:23:55.010 --> 00:23:56.450
package out of it would
be easy, but it sounds

473
00:23:56.450 --> 00:24:00.310
like it's just a batch
file. New get pack food,

474
00:24:00.510 --> 00:24:03.400
CS, project, nerd, dinner dot
CS project. Yeah, that's right.

475
00:24:03.400 --> 00:24:06.430
So you're, you're in my
case, my team city configuration,

476
00:24:07.330 --> 00:24:09.160
it runs an EMIS build
file. And the last line

477
00:24:09.160 --> 00:24:11.050
of that is just a
call to execute and you

478
00:24:11.050 --> 00:24:14.260
get DXE, here's the folder,
here's the manifest and output

479
00:24:14.380 --> 00:24:18.010
Package. Okay. So the package
pops out, but let's say

480
00:24:18.430 --> 00:24:22.390
for my nerd dinner application,
I need right. Access to

481
00:24:22.390 --> 00:24:25.060
the logs folder. So it's
not just a straight website.

482
00:24:25.060 --> 00:24:27.760
I need a special right.
Access for my, whatever my

483
00:24:27.760 --> 00:24:30.100
user that I'm running is.
And that's a curve ball

484
00:24:30.100 --> 00:24:31.560
that I'm throwing at you.
What do I do then?

485
00:24:32.110 --> 00:24:34.870
Yeah. So in that case,
if you imagine building a

486
00:24:34.870 --> 00:24:38.170
new get package for, let's
say a third party component

487
00:24:38.170 --> 00:24:40.870
that you were producing, that
you wanted to use for

488
00:24:40.870 --> 00:24:43.660
me within visual studio, the
way you would do those

489
00:24:43.660 --> 00:24:46.060
kind of custom, one off
things in naked is you

490
00:24:46.060 --> 00:24:50.050
would create a, an installed
at PS one file. So

491
00:24:50.530 --> 00:24:53.170
in octopus, it works in
a very similar convention. So

492
00:24:53.680 --> 00:24:56.500
the script that, that grants,
those permissions, you would create

493
00:24:56.500 --> 00:24:59.290
a PowerShell script. You would
call that deployed up PS

494
00:24:59.300 --> 00:25:01.750
one. And you would just
put that somewhere inside your

495
00:25:01.750 --> 00:25:04.750
new gear package. And when
octopus unzips, it it'll inspect

496
00:25:04.750 --> 00:25:07.540
the package. And if it
finds that that file, it'll

497
00:25:07.540 --> 00:25:11.170
run it as the local
system. Okay. So with new

498
00:25:11.170 --> 00:25:15.160
get today, we have <inaudible>
installed and uninstalled at PS

499
00:25:15.160 --> 00:25:17.830
one. And these are conventions
that are specific to when

500
00:25:17.830 --> 00:25:20.800
a library is used in
a project. So you're inventing

501
00:25:20.800 --> 00:25:24.400
your own convention. So deploy.ps.
One is what would happen

502
00:25:24.400 --> 00:25:26.680
when the deployment occurs. And
at that point I could

503
00:25:26.680 --> 00:25:29.470
call cackles from the command
line and set the echo,

504
00:25:29.710 --> 00:25:33.490
however, Absolutely. Yep. And the
thing that it saves you

505
00:25:33.490 --> 00:25:35.530
from doing is figuring out
how to run that script

506
00:25:35.530 --> 00:25:38.320
remotely because it's being run
on the local machine. Okay.

507
00:25:38.830 --> 00:25:41.890
What about IIS things, making
sites and the kind of

508
00:25:41.890 --> 00:25:44.230
usual IIS stuff that I
wanted that I want to

509
00:25:44.230 --> 00:25:45.370
do. A lot of that
can be in the web

510
00:25:45.370 --> 00:25:48.520
dot config now in the
system dot web server area,

511
00:25:48.550 --> 00:25:50.440
but still I might want
to do something to IIS

512
00:25:50.440 --> 00:25:54.760
or register a comm object.
Yeah. I'd really love some

513
00:25:54.760 --> 00:25:58.510
way of, because I, as
configuration is very complicated and

514
00:25:58.510 --> 00:26:01.180
I would love some way
of by convention, figuring out

515
00:26:01.180 --> 00:26:04.030
that, you know, that's a
dinette for project and you

516
00:26:04.030 --> 00:26:07.180
want to, in this virtual
directory, all of those kind

517
00:26:07.180 --> 00:26:09.820
of strange things at the
moment, the way it works

518
00:26:09.820 --> 00:26:12.640
is you would, when you
first set up that server,

519
00:26:12.700 --> 00:26:15.310
you would remote desktop in,
as you do to set

520
00:26:15.310 --> 00:26:17.710
up all the other things,
you would install iOS and

521
00:26:17.710 --> 00:26:20.530
you would create a website
with a name that matches

522
00:26:20.530 --> 00:26:23.020
the name of your package.
So you might have an

523
00:26:23.020 --> 00:26:26.320
IRS website called Nerdina or
no dinner dot web, right?

524
00:26:26.860 --> 00:26:31.810
When octopus unpacks your package,
it'll find a web dot

525
00:26:31.810 --> 00:26:34.900
conflict file. And it'll make
this assumption that well, because

526
00:26:34.900 --> 00:26:37.690
that's a web config, this
must be a website. So

527
00:26:37.690 --> 00:26:40.690
can I find a website
in IAS that has the

528
00:26:40.690 --> 00:26:43.440
same name? And if I
can update the home directory

529
00:26:43.440 --> 00:26:47.220
to point to where I
just unzipped this package. So

530
00:26:47.220 --> 00:26:49.320
you kind of do the
one off fires configuration at

531
00:26:49.320 --> 00:26:52.590
the start, but octopus will,
I guess, continue to update

532
00:26:52.590 --> 00:26:55.130
that configuration as you deploy
new versions. I see. So

533
00:26:55.130 --> 00:26:57.860
this is kind of a
convention over configuration that we're

534
00:26:57.860 --> 00:27:00.500
seeing so much of lately.
We heard about it first

535
00:27:00.500 --> 00:27:02.180
in Ruby, on rails a
number of years ago. And

536
00:27:02.180 --> 00:27:04.850
now the idea of letting
the software do the right

537
00:27:04.850 --> 00:27:08.390
thing based on convention is
we're seeing it everywhere now.

538
00:27:09.050 --> 00:27:12.920
Yeah, that's right. I think
my past experiences with automated

539
00:27:12.920 --> 00:27:15.170
deployment is they, there tends
to be a lot of

540
00:27:15.170 --> 00:27:20.180
scripting involved and they, they
tend to be very, very

541
00:27:20.180 --> 00:27:23.270
ad hoc and every project
is different. So I might

542
00:27:23.270 --> 00:27:26.480
have two different teams in
my company, both working on

543
00:27:26.480 --> 00:27:29.720
SPI net solutions. They're both
using Jacory. They're both using

544
00:27:29.720 --> 00:27:32.330
razor. There's a lot of
those things that they would

545
00:27:32.330 --> 00:27:35.000
just do because it's the
easy way to go. You

546
00:27:35.000 --> 00:27:37.550
know, that whole pit of
success thing. But when it

547
00:27:37.550 --> 00:27:41.830
comes to deployment automation, there's
no kind of obvious solutions.

548
00:27:41.830 --> 00:27:44.780
So one of them might
involve a, a document that

549
00:27:44.780 --> 00:27:47.210
someone has to read to
manually deploy. The other might

550
00:27:47.210 --> 00:27:51.650
have a whole set of
scripts, but using these conventions,

551
00:27:51.740 --> 00:27:53.960
it kind of just saves
you from having to reinvent

552
00:27:53.960 --> 00:27:56.780
that wheel all the time.
If so, another convention in

553
00:27:56.780 --> 00:28:00.110
octopus for example, is a,
and this is inspired from

554
00:28:00.110 --> 00:28:04.130
our Harbor. Imagine that you
are deploying to some codes

555
00:28:04.130 --> 00:28:06.830
to your test environment and
then to a production environment.

556
00:28:07.430 --> 00:28:09.530
So the website that you're
deploying probably has a SQL

557
00:28:09.530 --> 00:28:12.680
server database behind it. And
so in your conflict file,

558
00:28:12.680 --> 00:28:16.670
you would have the connection
string setting pointing to the

559
00:28:16.670 --> 00:28:20.690
database that you want. So
with octopus through the, because

560
00:28:20.690 --> 00:28:25.190
octopus comes with this, a
web console for setting up

561
00:28:25.190 --> 00:28:28.190
your deployments, you can define
a variable and say, well,

562
00:28:28.640 --> 00:28:32.150
the connection string for staging
is this Valley. And the

563
00:28:32.150 --> 00:28:35.840
connection string for production is
this value and octopus. When

564
00:28:35.840 --> 00:28:38.060
it unzips your package, it'll
look at your web config.

565
00:28:38.450 --> 00:28:40.910
And if it finds a
connection string that matches a

566
00:28:40.910 --> 00:28:43.550
variable that you've defined, it'll
just replace the value for

567
00:28:43.550 --> 00:28:44.870
you. So you don't have
to write all those X

568
00:28:44.870 --> 00:28:50.630
path replacement expressions. I see.
So you're, you're, you're making

569
00:28:50.630 --> 00:28:53.780
the deployment environment aware. We,
I had had this conversation

570
00:28:53.780 --> 00:28:56.900
with a guy internally at
Microsoft recently, you know, about

571
00:28:56.900 --> 00:29:01.460
web config transforms like there's
web dot, web dot, debug

572
00:29:01.460 --> 00:29:03.620
dot config, and web dot
release dot config. And those

573
00:29:03.620 --> 00:29:06.950
things run at publish time,
but they're, those are build

574
00:29:06.950 --> 00:29:10.400
variables, like build and release,
debug and release rather that

575
00:29:10.400 --> 00:29:12.980
are, that are showing up
in the names rather than

576
00:29:13.730 --> 00:29:17.000
things like dev staging and
test. Yep. So you're kind

577
00:29:17.000 --> 00:29:20.930
of making environment a first
class citizen. Absolutely. So octopus

578
00:29:20.930 --> 00:29:24.320
also does web conflict transforms
if there's a web, if

579
00:29:24.320 --> 00:29:27.250
there's a conflict transformed called
web dot release or, or

580
00:29:27.290 --> 00:29:29.690
app dot release. So this
will work with windows services

581
00:29:29.690 --> 00:29:33.050
as well. It will, it
will run that. It'll also

582
00:29:33.050 --> 00:29:36.560
run. If you have, if
your environment is called staging

583
00:29:36.560 --> 00:29:39.530
and production, if it finds
a web dot staging dot

584
00:29:39.530 --> 00:29:42.490
config, and it happens to
deploying into staging, it'll run

585
00:29:42.490 --> 00:29:46.390
that file as well. But
generally you'd run the web

586
00:29:46.390 --> 00:29:49.240
contract transforms as part of
building the package. And you'd

587
00:29:49.240 --> 00:29:52.300
just be replacing some configuration
values as part of your

588
00:29:52.300 --> 00:29:56.830
deployment. But octopus definitely has
this understanding of environments and

589
00:29:56.830 --> 00:29:59.020
machines. So a lot of
deployments was kind of focused

590
00:29:59.020 --> 00:30:01.420
on how do I deploy
one package to one machine,

591
00:30:01.690 --> 00:30:05.350
right? Octopus is all about
how do I deploy potentially

592
00:30:05.350 --> 00:30:08.500
multiple packages in a certain
order to a lot of

593
00:30:08.500 --> 00:30:12.330
different machines. The underlying question
underneath my question was that

594
00:30:12.360 --> 00:30:15.060
I've already got an investment
in a web dot, you

595
00:30:15.060 --> 00:30:18.090
know, the debug dot config.
I've done my work in

596
00:30:18.090 --> 00:30:22.380
the XML deployment transformation language,
the kind of metadata language

597
00:30:22.380 --> 00:30:23.730
that I've, you know, I
don't want to go and

598
00:30:23.730 --> 00:30:25.470
write XSLT, or I don't
want to go and use

599
00:30:25.470 --> 00:30:30.000
your, you know, the octopus
token replacement system. It sounds

600
00:30:30.000 --> 00:30:32.130
like you're, you're not going
to necessarily take away the

601
00:30:32.130 --> 00:30:34.830
things that I like about
something like Emma's deploy and

602
00:30:34.830 --> 00:30:36.480
force me to use your
thing I can pick and

603
00:30:36.480 --> 00:30:39.330
choose That's. Right. Yeah. I
actually would really like to

604
00:30:39.330 --> 00:30:42.990
embrace a lot of the
defaults. So if I'm working

605
00:30:42.990 --> 00:30:45.930
on a project and I
inherit and I spit on

606
00:30:45.930 --> 00:30:48.570
it solution, I would expect
that any settings are going

607
00:30:48.570 --> 00:30:50.340
to be in the app
setting section. And I would

608
00:30:50.340 --> 00:30:53.910
expect the connection strings are
in connection strings. And so

609
00:30:53.910 --> 00:30:58.110
octopus has no client libraries.
There's no special things that

610
00:30:58.110 --> 00:31:00.120
you have to do to
make octopus happy. Hopefully it's

611
00:31:00.120 --> 00:31:05.790
just following the default conventions
that work with.net When I'm

612
00:31:05.790 --> 00:31:08.820
just curious of a couple
of things. And I'm just

613
00:31:08.820 --> 00:31:11.280
asking, cause I have intimate
knowledge of these other, other

614
00:31:11.460 --> 00:31:13.950
products. Not because I necessarily
have an opinion one way

615
00:31:13.950 --> 00:31:16.170
or the other. I'm still
thinking about it. But you

616
00:31:16.170 --> 00:31:18.750
know, there are things that
you can already do today

617
00:31:18.750 --> 00:31:21.240
and have been able to
do an IAS, like create

618
00:31:21.240 --> 00:31:25.200
a package, a web platform,
installer uses this. I can

619
00:31:25.200 --> 00:31:28.500
set up something in, in
IAS. I can set up

620
00:31:28.500 --> 00:31:30.330
a website. I can right
click on it. I can

621
00:31:30.330 --> 00:31:33.690
say export as application and
I'll get a zip file

622
00:31:34.110 --> 00:31:36.630
that has a manifest. And
it has parameters dot XML

623
00:31:36.630 --> 00:31:39.960
that already exists. And it's
a very, very rich, albeit

624
00:31:39.960 --> 00:31:42.300
slightly complicated way to do
things. And then I can

625
00:31:42.300 --> 00:31:44.640
go and import that package
or deploy it with EMIS

626
00:31:44.640 --> 00:31:50.820
deploy. Why not embrace that
IIS specific, very rich metadata

627
00:31:50.850 --> 00:31:54.390
then invent a new thing
in, in new get. So

628
00:31:55.020 --> 00:31:58.260
I do actually have plans,
hopefully just after version one

629
00:31:58.260 --> 00:32:01.050
of octopus comes out to
also be able to work

630
00:32:01.050 --> 00:32:05.220
with those packages. So you
would produce using the, the

631
00:32:05.220 --> 00:32:09.660
public option in visual studio
or through calling Emma's deployed

632
00:32:09.660 --> 00:32:11.700
as part of your build.
You might produce an EMIS

633
00:32:11.700 --> 00:32:14.010
deploy package and then just
quickly wrap it up in

634
00:32:14.010 --> 00:32:16.170
a new get package to
get all that rich versioning

635
00:32:16.170 --> 00:32:20.340
metadata, and then octopus. Because
if you have a, you

636
00:32:20.340 --> 00:32:22.290
know, when you're trying to
invoke that Emma's deploy c'mon

637
00:32:22.290 --> 00:32:24.570
line to pass in the
parameters, it's a little bit,

638
00:32:24.990 --> 00:32:26.130
you got to spend a
bit of time kind of

639
00:32:26.130 --> 00:32:28.320
reading the documentation to get
that right. I think you're

640
00:32:28.320 --> 00:32:31.200
being extra nice. It's a
crazy command line. It's one

641
00:32:31.200 --> 00:32:33.150
of those command lines. It's
like writing a regular expression,

642
00:32:33.150 --> 00:32:35.280
but once you get it
to work, just don't move.

643
00:32:35.280 --> 00:32:39.030
Cause it works. Exactly. Exactly.
So octopus will hopefully at

644
00:32:39.230 --> 00:32:43.550
take care of invoking ms.
Deploy over your deployment package.

645
00:32:43.550 --> 00:32:45.620
So if you do need
to do some really crazy

646
00:32:45.620 --> 00:32:48.290
things with ISA that's, that's
one option. The other option

647
00:32:48.290 --> 00:32:52.280
is just using PowerShell. You
can use the Microsoft web

648
00:32:52.760 --> 00:32:56.270
automation, API APIs, and you
can just kind of pull

649
00:32:56.270 --> 00:32:58.970
those into PowerShell and then,
you know, make changes to

650
00:32:58.970 --> 00:33:02.380
websites, set up app domains,
that kind of stuff. So

651
00:33:02.380 --> 00:33:05.320
things like the web farm
framework. I mean, I mean,

652
00:33:05.320 --> 00:33:06.670
I know I might be,
so I might sound like

653
00:33:06.670 --> 00:33:09.220
a Microsoft shill in the
sense of I'm, I'm kind

654
00:33:09.220 --> 00:33:11.710
of pimping our other other
features, but this is all

655
00:33:11.710 --> 00:33:14.020
free stuff that already exists.
I'm not trying to like

656
00:33:14.380 --> 00:33:16.420
push people towards it as
I am trying to let

657
00:33:16.420 --> 00:33:19.480
people know that the things
already exist, I think IIS

658
00:33:19.480 --> 00:33:21.640
and the IIS modules and
the things around IAS are,

659
00:33:21.670 --> 00:33:25.000
I've said this before publicly
are ridiculously powerful and just

660
00:33:25.030 --> 00:33:28.030
poorly documented, you know? And
I hope the future versions

661
00:33:28.030 --> 00:33:32.860
aren't, but the AIS tools
by far are some of

662
00:33:32.860 --> 00:33:35.290
the most powerful tools in
the entire web stack. And

663
00:33:35.290 --> 00:33:37.480
there are some of the
least, well-documented like the web

664
00:33:37.480 --> 00:33:39.910
form framework and they must
deploy itself. I mean, it's

665
00:33:39.910 --> 00:33:42.100
crazy if you get it
working, but if you can't

666
00:33:42.100 --> 00:33:44.590
get it working, you just
give up. Yeah. That's that's

667
00:33:44.590 --> 00:33:46.330
right. I guess the other
area where that lets you

668
00:33:46.330 --> 00:33:49.750
down is it's not all
often when you're building a

669
00:33:49.750 --> 00:33:52.720
website, you're not just building
a website, there's also perhaps

670
00:33:52.730 --> 00:33:54.370
set of windows services that
you need to be able

671
00:33:54.370 --> 00:33:57.160
to run in the background.
There's changes to a database

672
00:33:57.160 --> 00:33:59.410
that you need to make
all of those things. So

673
00:33:59.620 --> 00:34:03.490
using a very simple packaging
format, like new get, I

674
00:34:03.490 --> 00:34:05.140
think it kind of, it
makes it a little bit

675
00:34:05.140 --> 00:34:07.660
more consistent because the way
you're deploying a windows services,

676
00:34:07.690 --> 00:34:10.480
the same way that you're
deploying a website, if you

677
00:34:10.480 --> 00:34:14.200
can kind of follow some
of these conventions. Okay, cool.

678
00:34:14.200 --> 00:34:16.150
And then just kind of
in closing, how do you

679
00:34:16.150 --> 00:34:20.620
plan on selling this? So
I guess my, my goal

680
00:34:20.620 --> 00:34:23.920
is to be able to
walk into less businesses that

681
00:34:23.920 --> 00:34:26.890
have copy of copy of
web config. So I'd really

682
00:34:26.890 --> 00:34:29.290
like to just see people
doing more automated deployment. And

683
00:34:29.290 --> 00:34:33.220
so octopus is free for
the first project. So you

684
00:34:33.220 --> 00:34:34.990
can deploy to as many
machines as you like as

685
00:34:34.990 --> 00:34:37.990
many environments as you like
for one project, which might

686
00:34:37.990 --> 00:34:42.820
be a website, a website
services, database, all those things.

687
00:34:43.840 --> 00:34:46.180
Hopefully by the time you're
around to doing a second

688
00:34:46.180 --> 00:34:48.340
project, you'll be willing to
pay for it. At that

689
00:34:48.340 --> 00:34:52.120
point, it'll be around about
700 pounds, which may seem

690
00:34:52.120 --> 00:34:53.530
like a lot. But when
you think about how much

691
00:34:53.560 --> 00:34:56.410
time you actually spent just
writing PowerShell scripts and configuring

692
00:34:57.130 --> 00:34:59.830
when RM it's, it's probably
a few days worth of

693
00:34:59.830 --> 00:35:01.900
work. So hopefully the time
savings will make up for

694
00:35:01.900 --> 00:35:03.820
it. Well, like I said,
if it's free for one

695
00:35:03.820 --> 00:35:05.830
project, so I could download
this now and try to

696
00:35:05.830 --> 00:35:08.440
get this working with no
dinner, no problem. Yeah, absolutely.

697
00:35:08.470 --> 00:35:11.530
Absolutely. Very cool. And this
is an octopus deploy.com and

698
00:35:11.530 --> 00:35:14.230
I guess, well, it's in
beta, it'll be free. That's

699
00:35:14.230 --> 00:35:16.720
right. Yep. Yep. So free
freight unlimited projects while it's

700
00:35:16.720 --> 00:35:20.740
in beta. Hopefully I'll be
putting in the payment system

701
00:35:20.740 --> 00:35:23.500
soon and I'll try and
offer some kind of discount

702
00:35:23.500 --> 00:35:26.920
for if you purchase it
during the beta period. And

703
00:35:26.920 --> 00:35:28.540
then it will still continue
to be free for one

704
00:35:28.540 --> 00:35:30.790
project after that. Very cool.
And I, and I, one

705
00:35:30.790 --> 00:35:32.560
thing I would also say
is I, I I've always

706
00:35:32.560 --> 00:35:34.600
enjoyed your blog and the
knowledge that you have. I

707
00:35:34.600 --> 00:35:37.770
hope that you blog more,
I think good blogs come

708
00:35:37.770 --> 00:35:40.020
out of creating good software
and it'd be nice to

709
00:35:40.020 --> 00:35:43.290
see some of the lessons
learned as you're, as you're,

710
00:35:43.410 --> 00:35:46.530
you know, solving problems and
coming up with things, you

711
00:35:46.530 --> 00:35:48.480
know, even if you are
doing this as a commercial

712
00:35:48.480 --> 00:35:50.430
venture and not open sourcing
things of it, you can

713
00:35:50.430 --> 00:35:52.860
still, you know, really pass
the knowledge along about some

714
00:35:52.860 --> 00:35:54.660
of the stuff that you're
doing. It'll be really interesting

715
00:35:54.660 --> 00:35:57.510
to see kind of the,
the diary of building octopus

716
00:35:57.510 --> 00:36:00.800
deploy. Yeah. Yeah. It's, it's
something I'd love to do.

717
00:36:00.860 --> 00:36:03.050
I guess it's always that
trade off between, do you

718
00:36:03.050 --> 00:36:05.240
spend the night writing a
blog post because I still,

719
00:36:05.390 --> 00:36:07.370
it takes me a while
to write a post or

720
00:36:07.370 --> 00:36:08.960
do you spend the night
just kind of building the

721
00:36:08.960 --> 00:36:10.780
features and kind of put
it off and I guess

722
00:36:11.390 --> 00:36:12.770
trying to find a bit
of balance, there is a

723
00:36:12.770 --> 00:36:15.260
bit difficult. I think get
the work done first, but

724
00:36:15.640 --> 00:36:18.560
we'll all look forward to
hearing about how it happened.

725
00:36:19.070 --> 00:36:21.740
Good. Great, cool. Well, thanks
so much for chatting with

726
00:36:21.740 --> 00:36:24.560
me today. Paul's development. Appreciate
it. Thanks for having me.

727
00:36:24.590 --> 00:36:27.230
I hear the fade out
music. Is it music starting?

728
00:36:27.830 --> 00:36:30.950
This has been another episode
of Hansel minutes and we'll

729
00:36:30.950 --> 00:36:31.850
see you again next week.

