WEBVTT FILE

1
00:00:12.120 --> 00:00:17.550
From Hansel minutes.com. It's Hanselman.
It's a weekly discussion with

2
00:00:17.550 --> 00:00:22.740
web developer and technologist Scott
Hanselman hosted by Carl Franklin. This

3
00:00:22.740 --> 00:00:26.760
is Lawrence Ryan announcing show number
one 52 recorded live Thursday,

4
00:00:26.760 --> 00:00:31.740
February 26, 2009. Support for
Hanselman. This is provided by

5
00:00:31.770 --> 00:00:35.520
tolerant Reb controls, the most
comprehensive suite of components for

6
00:00:35.520 --> 00:00:45.870
windows forms and asp.net web
applications. online@wwwdotterikdotcomandby.net developers journal the

7
00:00:45.870 --> 00:00:51.930
world's leading.net developer magazine online
at www dot <inaudible> dot

8
00:00:51.930 --> 00:00:56.730
com. In this episode, Scott
dog's cogeneration with Kathleen dollar.

9
00:00:59.430 --> 00:01:01.440
Hi, this is Scott Hanselman,
and this is another episode

10
00:01:01.440 --> 00:01:04.080
of Hansel minutes. I'm sitting
here at the Rocky mountain

11
00:01:04.080 --> 00:01:06.510
trifecta. What I like to
call the Denver code camp

12
00:01:06.510 --> 00:01:09.450
in Denver, Colorado. I'm sitting
down with Kathleen dollar chief

13
00:01:09.450 --> 00:01:12.360
technologist at app venture. Thanks
for sitting down with me.

14
00:01:12.530 --> 00:01:16.880
Well, thanks for inviting me
Back in the day. Many,

15
00:01:16.880 --> 00:01:20.690
many years ago, 50, 60
years ago, in 2003, you

16
00:01:20.690 --> 00:01:24.650
wrote the book on cogeneration
and.net. I did. There were

17
00:01:24.650 --> 00:01:27.020
not a lot of dotnet
people doing cogeneration, although it's

18
00:01:27.020 --> 00:01:30.080
an old concept. It is,
it's a very old concept

19
00:01:30.080 --> 00:01:31.700
and I've looked at it
for a long time before

20
00:01:31.700 --> 00:01:33.470
then, but in.net, we had
the right tools to get

21
00:01:33.470 --> 00:01:36.260
started with it and do
it in a much more

22
00:01:36.290 --> 00:01:38.960
profound way than we could
with previous tools that I

23
00:01:38.960 --> 00:01:41.420
had been involved in. And
so I got involved with

24
00:01:41.420 --> 00:01:43.610
it. I was writing my
own harnesses, my own tools,

25
00:01:43.970 --> 00:01:46.100
and I wound up writing
a book to come out

26
00:01:46.100 --> 00:01:47.850
of that. And it was
a long time ago and

27
00:01:48.200 --> 00:01:51.380
it feels like a long
time ago, 2003 in the.net

28
00:01:51.380 --> 00:01:54.020
space is kind of a
long time ago. Yeah. And

29
00:01:54.020 --> 00:01:55.430
that's when I released it.
So it was actually, it

30
00:01:55.430 --> 00:01:57.530
was most of 2002 was
that, that was what I

31
00:01:57.530 --> 00:02:00.250
did. Yeah. So we, as
a community that don't know

32
00:02:00.270 --> 00:02:02.870
community is not, is not
mature in a number of

33
00:02:02.870 --> 00:02:05.990
ways, but we are, I
feel like 2009 may be

34
00:02:05.990 --> 00:02:08.210
the year that we kind
of reached some level of

35
00:02:08.210 --> 00:02:10.190
maturity in a number of
different aspects of software. And

36
00:02:10.490 --> 00:02:13.100
hopefully cogeneration will be one
of them, but how are

37
00:02:13.100 --> 00:02:17.360
you doing Cogan back in
the day and.net, The couple

38
00:02:17.360 --> 00:02:19.550
of kind of standard problems
that we have to solve

39
00:02:19.550 --> 00:02:22.880
when we're doing cogeneration. And
they actually hit a couple

40
00:02:22.880 --> 00:02:25.910
of different areas of development.
And I just want to,

41
00:02:25.940 --> 00:02:27.230
there's one thing I kind
like to say as a

42
00:02:27.230 --> 00:02:28.790
starting point is that what
we're trying to do is

43
00:02:28.790 --> 00:02:32.030
make the coding better, the
coding process better. And I

44
00:02:32.030 --> 00:02:34.610
want to use the word
better instead of faster, it

45
00:02:34.610 --> 00:02:36.740
will be faster. That's a
good thing. The quality will

46
00:02:36.740 --> 00:02:38.960
be better. That's a good
thing. Programmers will be happy.

47
00:02:38.960 --> 00:02:40.640
That's a good thing. All
of that, a good thing.

48
00:02:40.880 --> 00:02:42.590
But sometimes you also have
to sit back and say,

49
00:02:42.770 --> 00:02:44.630
it doesn't mean my project
is going to go X

50
00:02:44.630 --> 00:02:47.540
percent faster because it doesn't,
it doesn't save you time

51
00:02:47.810 --> 00:02:49.730
in requirements. It doesn't save
you time. And a lot

52
00:02:49.730 --> 00:02:52.460
of other features that are,
that are actually a big

53
00:02:52.490 --> 00:02:54.740
part of your job, they're
getting lost. Cause as you

54
00:02:54.740 --> 00:02:56.720
shrink the coding down, all
of a sudden those become

55
00:02:57.170 --> 00:03:01.420
bigger. They're more evident you
once that gets pulled down,

56
00:03:01.840 --> 00:03:03.280
but we can talk about
some of those areas, but

57
00:03:03.280 --> 00:03:06.600
I know you've got experience
in cogeneration as well. Yeah.

58
00:03:06.600 --> 00:03:08.640
I worked for a number
of years as a chief

59
00:03:08.640 --> 00:03:11.460
architect of a company called
Kirlian now called CheckFree. And

60
00:03:11.460 --> 00:03:14.580
we did online banking and
along with some of my

61
00:03:14.850 --> 00:03:17.880
compadres and partners in crime,
like Patrick Caldwell and a number

62
00:03:17.880 --> 00:03:22.920
of other guys, we did
some Cogan, 2003, 2004. We

63
00:03:22.920 --> 00:03:25.740
were using COVID Smith at
the time and we generated

64
00:03:25.740 --> 00:03:28.710
maybe 30, 40% of our
application, but it was largely

65
00:03:28.920 --> 00:03:32.400
domain objects. We had a
very domain driven design. So

66
00:03:32.400 --> 00:03:36.570
we weren't making, we weren't
using co-generation from a rules

67
00:03:36.570 --> 00:03:40.350
generation perspective. We were making
purely data transfer objects, but

68
00:03:40.530 --> 00:03:43.110
lots of them. And that's
the kind of code when

69
00:03:43.110 --> 00:03:45.300
I said your coders will
be happier. That's the kind

70
00:03:45.300 --> 00:03:47.880
of coder that that's a
kind of code that makes

71
00:03:47.880 --> 00:03:51.330
coders crazy to write. And
so it's, it's really important

72
00:03:51.330 --> 00:03:54.030
to recognize that we're, we're
trying to get coders focused

73
00:03:54.030 --> 00:03:56.640
on where coders need to
be focused. We're not trying

74
00:03:56.640 --> 00:03:59.820
to, to, to make code
and go away. It's just

75
00:03:59.820 --> 00:04:02.130
that we're spending time on
stupidity. What we want to

76
00:04:02.130 --> 00:04:06.930
do is spend time on
really good domain issues. We

77
00:04:06.930 --> 00:04:09.150
will solve more problems. We
will be able to write

78
00:04:09.180 --> 00:04:11.310
applications. We can't get to
you right now cause we're

79
00:04:11.310 --> 00:04:14.760
still rewriting the mission critical
applications. We started writing back

80
00:04:14.760 --> 00:04:17.400
in the fifties. Exactly the
kind of code that we

81
00:04:17.400 --> 00:04:20.220
were generating was, was monkey
code. It was just a

82
00:04:20.220 --> 00:04:22.170
bunch of monkeys. And this
is not to say that

83
00:04:22.170 --> 00:04:25.050
my compadres were monkeys, but
it was a monkey slapping

84
00:04:25.050 --> 00:04:27.840
on a keyboard, could write
this stuff. It was properties

85
00:04:27.840 --> 00:04:30.360
and validation and getters and
setters. But the thing that

86
00:04:30.360 --> 00:04:33.840
was interesting was that requirements
would change subtly. And then

87
00:04:33.840 --> 00:04:35.340
you go and say, Oh,
I got to change these

88
00:04:35.340 --> 00:04:38.340
400 domain objects so that
they all have this behavior.

89
00:04:38.640 --> 00:04:40.680
Some of those behaviors can
be expressed in an object

90
00:04:40.680 --> 00:04:44.550
hierarchy, but other ones couldn't.
Then we turned to cogeneration

91
00:04:44.550 --> 00:04:47.700
because it was so repetitive.
That's actually, you've touched on

92
00:04:47.700 --> 00:04:50.310
something that's really important there.
And that's the fact that

93
00:04:50.310 --> 00:04:54.690
the longterm ability to evolve
and flex a cogeneration application

94
00:04:54.960 --> 00:04:57.240
is really one of the
fundamental benefits. If we were

95
00:04:57.240 --> 00:04:59.040
to say, you know, we're
gonna make a bullet list

96
00:04:59.040 --> 00:05:01.590
of the really big ones.
That's really it. Because either

97
00:05:01.590 --> 00:05:03.930
on an architectural level, somebody
new comes in and says,

98
00:05:04.170 --> 00:05:05.930
this was stupid. Why did
somebody do that? Well, you

99
00:05:05.930 --> 00:05:07.410
have to yank that out
of there and you have

100
00:05:07.620 --> 00:05:12.000
200, 300, 400 classes that
are involved or something changes

101
00:05:12.000 --> 00:05:14.520
in the domain. A business
change happens. And remember, these

102
00:05:14.520 --> 00:05:17.790
are an entirely separate timelines.
So it could be that

103
00:05:17.790 --> 00:05:20.070
one is happening faster or
slower. We just don't know

104
00:05:20.070 --> 00:05:22.380
what's going to change. So
on the business timeline, we

105
00:05:22.380 --> 00:05:24.030
need a new field. We
need a new table. We

106
00:05:24.030 --> 00:05:26.640
need some new change there
and we can quickly roll

107
00:05:26.640 --> 00:05:28.860
that out and quickly roll
it into the application. So

108
00:05:28.860 --> 00:05:32.790
the ability to manage change
and evolve through time is

109
00:05:32.790 --> 00:05:35.400
really one of the huge
benefits of generate applications. My

110
00:05:35.400 --> 00:05:37.380
goal is nothing less than
applications that lasts for 20

111
00:05:37.380 --> 00:05:40.050
years. We're not even close
to that right now, but

112
00:05:40.050 --> 00:05:42.000
I do believe that that
is the, that is the,

113
00:05:42.000 --> 00:05:44.790
the, the, the brass ring
where we should be reaching

114
00:05:44.790 --> 00:05:49.860
for is being able to
establish metadata, metadata driven applications,

115
00:05:49.860 --> 00:05:52.890
as much as possible limiting
the actual code that humans

116
00:05:52.890 --> 00:05:56.010
have to write to something
we can find, and then

117
00:05:56.010 --> 00:05:58.700
we can rewrite it. It's
okay. Technology changes and then

118
00:05:58.700 --> 00:06:02.420
allowing technology to change through
our generator architectures. That's the

119
00:06:02.420 --> 00:06:05.200
dream. Now your book is
probably a little dated now,

120
00:06:05.230 --> 00:06:07.540
but because we were using
XSLT for a lot of

121
00:06:07.540 --> 00:06:10.090
your cogeneration, but there were
some principles. And since we've

122
00:06:10.090 --> 00:06:12.340
had uncle Bob on talking
about principles, they were five

123
00:06:12.340 --> 00:06:14.590
principles of cogeneration that you
talked about that might not

124
00:06:14.590 --> 00:06:17.410
be dated. There were, there
were five. And actually when

125
00:06:17.410 --> 00:06:18.640
I first put them out,
I was a little bit

126
00:06:18.640 --> 00:06:21.790
nervous because the Java community
in 2003 had a lot

127
00:06:21.790 --> 00:06:24.160
more experienced than we did.
So put it out in

128
00:06:24.160 --> 00:06:27.250
a cogeneration.net and as the
job that people, what they

129
00:06:27.250 --> 00:06:28.930
thought, and they agreed with
me, which made me very

130
00:06:28.930 --> 00:06:31.540
happy because the book was
already impressed. It would have

131
00:06:31.540 --> 00:06:34.450
been a bit rough if
I had had totally like

132
00:06:34.450 --> 00:06:37.600
that went up, but they
are, they're still valid. And

133
00:06:37.600 --> 00:06:40.120
so we can go through
those. So the first one

134
00:06:40.120 --> 00:06:42.490
is cogeneration has to be
under your control, your control,

135
00:06:42.490 --> 00:06:45.760
being the organization, or the
individual. All of these, I

136
00:06:45.760 --> 00:06:47.980
think have more nuances now
than I put on in

137
00:06:47.980 --> 00:06:50.920
2003. And one of the
nuances on that is actually

138
00:06:50.920 --> 00:06:54.310
organizations need to have kind
of a hierarchy in some

139
00:06:54.310 --> 00:06:56.440
cases of how generation is
done, but that's sort of

140
00:06:56.440 --> 00:06:58.590
a separate, you can't go
out and buy this. You,

141
00:06:58.590 --> 00:07:01.000
you have to be involved
in the architecture yourself. And

142
00:07:01.000 --> 00:07:02.620
the reason is that when
there's a problem, somebody's going

143
00:07:02.620 --> 00:07:04.870
to come to you. So
that's the first one. The

144
00:07:04.870 --> 00:07:07.780
second one is that metadata
is discreet and more verbal.

145
00:07:07.960 --> 00:07:10.570
And actually metadata is a
sub genre all on its

146
00:07:10.570 --> 00:07:12.640
own. So I could talk
for a very long time

147
00:07:12.640 --> 00:07:15.310
about it, but it's ultimately
the model it's ultimately how

148
00:07:15.310 --> 00:07:17.500
you describe what you're going
to build. We think of

149
00:07:17.500 --> 00:07:20.650
models in terms of only
our business object models, so

150
00:07:20.660 --> 00:07:24.520
that, that domain model, and
that's very important, but actually

151
00:07:24.520 --> 00:07:26.710
the layout of our UI
is also a model or

152
00:07:26.710 --> 00:07:29.170
rules, engines for validation. These
are also models. These are

153
00:07:29.170 --> 00:07:31.990
all ways that we describe
at a higher level of

154
00:07:31.990 --> 00:07:35.050
abstraction. What we actually want
to build. We have to

155
00:07:35.050 --> 00:07:36.940
be able to get at
that work with it. It

156
00:07:36.940 --> 00:07:39.340
can't be buried away. It
has to be more verbal

157
00:07:39.340 --> 00:07:42.940
and changeable from one technology
to another, from one source,

158
00:07:42.940 --> 00:07:45.190
like a database. So it
needs to be agnostic to

159
00:07:45.190 --> 00:07:47.890
the, to the end, right
Agnostic. We have a long

160
00:07:47.890 --> 00:07:50.440
way to go on metadata.
It's probably the richest area

161
00:07:50.440 --> 00:07:53.200
for growth that we've got.
The third one is it

162
00:07:53.200 --> 00:07:55.240
has to be an easy
process. I used to say

163
00:07:55.240 --> 00:07:57.640
it has to be click.
Let's see one click click.

164
00:07:57.640 --> 00:08:00.370
Once Mike, I was like
the reverse of Microsoft. Now

165
00:08:00.370 --> 00:08:01.750
I said, pretty much has
to be no click. It

166
00:08:01.750 --> 00:08:04.360
should be part of the
normal continuous integration build process.

167
00:08:04.390 --> 00:08:06.620
It's an evolution of the
same concept We had had.

168
00:08:07.060 --> 00:08:09.400
We were doing continuous integration
back in the day. And

169
00:08:09.400 --> 00:08:15.670
we always said, build dot
test dot bat, right@thebeginningofbuildupthatwehadtokindofgenerate.bet. And

170
00:08:15.670 --> 00:08:18.670
we had not made it
one click, but to your

171
00:08:18.670 --> 00:08:21.430
point, getting it into the
continuous integration, it is as

172
00:08:21.430 --> 00:08:25.150
fundamental as doing the bill.
Absolutely, absolutely. The reason is

173
00:08:25.150 --> 00:08:26.950
you want to find your
problems very quickly. It's the

174
00:08:26.950 --> 00:08:29.770
same reason you do continuous
integration on any other part

175
00:08:29.770 --> 00:08:32.710
of your application. So that's
the third one. The fourth

176
00:08:32.710 --> 00:08:35.740
one is that handcrafted code
is sacred and protected. And

177
00:08:35.740 --> 00:08:37.570
I use a very strong
word for a good reason

178
00:08:37.570 --> 00:08:40.210
and that's that whether it
was done by a mistake,

179
00:08:40.210 --> 00:08:42.640
and I really want to
underline that it doesn't matter

180
00:08:42.850 --> 00:08:46.150
if somebody blew it and
made a mistake, something done

181
00:08:46.150 --> 00:08:48.730
by human beings should be
protected. Human beings are created

182
00:08:48.730 --> 00:08:51.250
by nature. Creativity means if
you come back after lunch,

183
00:08:51.250 --> 00:08:52.480
you may not be able
to do it the same

184
00:08:52.480 --> 00:08:54.910
way you have to protect
it. There are very good

185
00:08:55.170 --> 00:08:57.300
to protect it. That's an
area that we have the

186
00:08:57.300 --> 00:08:59.880
technology everybody's just been ignoring
it for the last six

187
00:08:59.880 --> 00:09:03.060
years. So basically the one,
one way to address that,

188
00:09:03.060 --> 00:09:05.220
that's a very simple and
can be done in code

189
00:09:05.220 --> 00:09:06.660
Smith. It can be done
in T4. It can be

190
00:09:06.660 --> 00:09:09.120
done in any generation language
that I know of. It

191
00:09:09.120 --> 00:09:12.510
just takes effort is to
include in the file, a

192
00:09:12.510 --> 00:09:14.880
check, some of the file.
And so you can simply,

193
00:09:14.880 --> 00:09:17.670
you will, you can know
absolutely that that file was

194
00:09:17.670 --> 00:09:20.870
unchanged later. And I've been
doing that since 2000. That's

195
00:09:20.870 --> 00:09:23.450
really interesting. We had a
big problem early on because

196
00:09:23.480 --> 00:09:25.610
early on and again, I
feel silly to think that

197
00:09:25.610 --> 00:09:28.250
five years ago was a
long time, but people would

198
00:09:28.310 --> 00:09:31.910
open up, you know, food
dot CSS and they'd start

199
00:09:31.910 --> 00:09:34.490
editing it. And then they'd
be upset when the continuous

200
00:09:34.490 --> 00:09:36.740
integration server blew it away
or generate up at, blew

201
00:09:36.740 --> 00:09:38.780
it away. So then we
started calling them, you know,

202
00:09:38.780 --> 00:09:41.930
food dot G dot CS
or food generated dot CS.

203
00:09:41.930 --> 00:09:45.710
And we put giant warning
messages in, in comments at

204
00:09:45.710 --> 00:09:49.370
the top, which they would
then promptly erase and then

205
00:09:49.370 --> 00:09:52.190
start writing code Visual studio
begs you to make that

206
00:09:52.190 --> 00:09:54.710
mistake. If you believe that
making comments will help you

207
00:09:54.710 --> 00:09:58.130
not generate overwrite generate code.
I really encourage you to

208
00:09:58.130 --> 00:10:01.370
ensure that that comment is
every 20 lines of code,

209
00:10:01.610 --> 00:10:03.710
because we do not open
files at the top and

210
00:10:03.710 --> 00:10:05.600
start reading them at the
top. We get around. Yeah.

211
00:10:05.630 --> 00:10:08.210
And there's nothing wrong with
generating comments every 20 lines

212
00:10:08.210 --> 00:10:10.940
or so You really believe
that just what we need

213
00:10:10.940 --> 00:10:14.090
is visual studio to recognize
them. They will not do

214
00:10:14.090 --> 00:10:17.480
it as generated. I'm building
the checksum, but the editor

215
00:10:17.480 --> 00:10:19.400
into 2010 should make it
easier for us to do

216
00:10:19.400 --> 00:10:22.240
it. So you're saying, and
I don't know if this

217
00:10:22.250 --> 00:10:24.650
is controversial or not, but
you're saying that if somebody

218
00:10:24.650 --> 00:10:27.860
breaks the rules, bus opens
some generated code, you'd rather

219
00:10:27.860 --> 00:10:29.840
have a warning or break
the bill or something then

220
00:10:29.840 --> 00:10:32.510
to lose, have them lose
their little bit of human

221
00:10:32.510 --> 00:10:35.360
generated bits. Absolutely. That's a
bill break. You break your

222
00:10:35.360 --> 00:10:37.970
build and you're actually could
break it. And it kind

223
00:10:37.970 --> 00:10:39.950
of a warning level perhaps,
cause you don't really know

224
00:10:39.950 --> 00:10:42.560
how deep that went into
the system, but your process

225
00:10:42.560 --> 00:10:44.900
is broken just like it
would be if anything else

226
00:10:44.900 --> 00:10:47.030
went wrong. So you absolutely
should break the build at

227
00:10:47.030 --> 00:10:50.540
that point. How many? Four.
Okay. And so number five

228
00:10:50.750 --> 00:10:53.150
is kind of self evident,
but it is that generated

229
00:10:53.150 --> 00:10:55.700
code should be an equal
or better quality than non

230
00:10:55.700 --> 00:10:58.280
generated code. And it's really,
we have opportunities and we

231
00:10:58.280 --> 00:11:01.400
should take advantage of them
once we go to generate

232
00:11:01.400 --> 00:11:04.160
a code. So there was
two small caveats that also

233
00:11:04.160 --> 00:11:06.350
got added. One of which
I totally blew in my

234
00:11:06.350 --> 00:11:09.170
work. I'm trying to make
amends, which is, it should

235
00:11:09.170 --> 00:11:11.300
be simple. People that have
ever looked at my work

236
00:11:11.300 --> 00:11:14.030
would laugh right now. And
the other one is that

237
00:11:14.030 --> 00:11:16.070
it should pay back on
the first project. And so

238
00:11:16.070 --> 00:11:18.260
those are kind of just
asides that, that have kind

239
00:11:18.260 --> 00:11:20.780
of gotten added into the
picture, the, the payback on

240
00:11:20.780 --> 00:11:22.520
the first project, we go
so fast now, I don't

241
00:11:22.520 --> 00:11:25.400
think anyone would seriously consider
making an investment that took

242
00:11:25.400 --> 00:11:27.710
them three projects to make
it back that you, but

243
00:11:27.710 --> 00:11:30.440
that's real. We have to
be agile in cogeneration. It's

244
00:11:30.440 --> 00:11:32.060
my belief that they make
a good fit. You know,

245
00:11:32.060 --> 00:11:33.770
and it's interesting. This is
a little bit of a,

246
00:11:34.070 --> 00:11:37.160
of a side, a side
trip, but a lot of

247
00:11:37.160 --> 00:11:40.400
the people in the, not
just the.net community, but in

248
00:11:40.400 --> 00:11:44.120
the, in the overall software
community tend to be consultants.

249
00:11:44.420 --> 00:11:47.870
The loudest ones are consultants.
So this means the blog

250
00:11:47.870 --> 00:11:51.560
that you read is not
always a guy who, a

251
00:11:51.560 --> 00:11:53.680
guy or gal who's suffering
for 10 years on an

252
00:11:53.680 --> 00:11:56.800
it system. I always talk
about this canonical character. I

253
00:11:56.800 --> 00:11:59.470
call him the chief architect
and the Nebraska department of

254
00:11:59.470 --> 00:12:03.340
forestry. Okay. He's usually not
blogging. He's trying to do

255
00:12:03.340 --> 00:12:06.310
actual work, right? That the
people that we, that you,

256
00:12:06.310 --> 00:12:10.210
the listener listened to may
be doing short term consulting

257
00:12:10.210 --> 00:12:13.780
projects. They may be coming
in. It's a little off

258
00:12:13.780 --> 00:12:16.000
color, but I usually call
it sex without the commitment.

259
00:12:16.360 --> 00:12:20.560
It's the one night stand
of software. They leave, who's

260
00:12:20.560 --> 00:12:22.630
going to raise this baby.
Who's going to put this

261
00:12:22.630 --> 00:12:25.870
child through college. I did
this for for six years.

262
00:12:25.900 --> 00:12:28.720
I would fly in. I
would whiteboard for money. I

263
00:12:28.720 --> 00:12:31.990
would, you know, a great
white hope, hello, and I

264
00:12:31.990 --> 00:12:34.900
would leave. But a lot
of those early, early systems

265
00:12:34.900 --> 00:12:36.550
in the, in the mid
nineties that I was working

266
00:12:36.550 --> 00:12:41.200
on weren't as flexible and,
and long, long Lee hadn't

267
00:12:41.200 --> 00:12:43.150
that didn't have longevity that
they should have had. And

268
00:12:43.150 --> 00:12:45.880
I think that we need
to remember that when we're

269
00:12:45.880 --> 00:12:50.470
listening to loud bloggers, consultants,
speakers, whoever. And I think

270
00:12:50.470 --> 00:12:52.600
that absolutely, you know, I
mean, when was the last

271
00:12:52.600 --> 00:12:54.480
time you were on a
five year long project? I

272
00:12:54.480 --> 00:12:56.880
actually do maintain long commitments
with some of my clients.

273
00:12:57.930 --> 00:12:59.790
I do have with some
of my clients, not all

274
00:12:59.790 --> 00:13:02.460
of my clients, because I
do training in cogeneration. And

275
00:13:02.460 --> 00:13:04.650
when I do that, it
often is a good luck.

276
00:13:04.740 --> 00:13:06.750
Call me if you need
me. And sometimes I don't

277
00:13:06.750 --> 00:13:09.930
maintain those relationships, but it
is important that all of

278
00:13:09.930 --> 00:13:13.020
us maintain that vision. And
it's not just cogeneration. Cogeneration

279
00:13:13.020 --> 00:13:16.380
is one piece of the
puzzle. We it's a matter

280
00:13:16.380 --> 00:13:18.990
of writing code that is
going to evolve. We are

281
00:13:18.990 --> 00:13:21.540
taking it as a matter.
We are accepting it as

282
00:13:21.540 --> 00:13:23.670
a matter of course, that
technology would change so much

283
00:13:23.850 --> 00:13:25.110
that we're just going to
have to rewrite in five

284
00:13:25.110 --> 00:13:27.210
years anyway. So why worry
about the five year timeframe?

285
00:13:27.600 --> 00:13:30.960
And that is just, it's,
it's an unacceptable longterm strategy.

286
00:13:30.960 --> 00:13:33.180
It is, it is true
in the short term, but

287
00:13:33.180 --> 00:13:36.660
it's unacceptable. And I think
that cogeneration is, is an

288
00:13:36.660 --> 00:13:39.990
opportunity, but it's not an
opportunity to be sloppy. No.

289
00:13:40.300 --> 00:13:41.910
And some people use it
as, Oh, it's Hey, it's

290
00:13:41.910 --> 00:13:44.310
generated code. Doesn't have to
be pretty. Yeah. I've said

291
00:13:44.310 --> 00:13:46.920
that I've seen, I've definitely
seen systems like that. And,

292
00:13:47.250 --> 00:13:50.790
and it's, there's some areas
you can actually be sloppy

293
00:13:50.790 --> 00:13:54.120
in, for example, if you're
wasting your time adjusting white

294
00:13:54.120 --> 00:13:56.130
space, I think you're absolutely
just doing that with time,

295
00:13:56.580 --> 00:13:58.560
but because you can, because
you can pretty print it

296
00:13:58.560 --> 00:14:01.290
later, but in terms of
actually writing true good quality

297
00:14:01.290 --> 00:14:03.630
code is very important. Now
there's a number of ways

298
00:14:03.840 --> 00:14:07.440
these days in.net and visual
studio to generate code, there's

299
00:14:07.440 --> 00:14:10.140
lots of products to use.
But one of the things

300
00:14:10.140 --> 00:14:11.910
that's been getting a lot
of press lately is, is

301
00:14:11.910 --> 00:14:16.680
T4. This new newly found
newly discovered, but it's been

302
00:14:16.680 --> 00:14:18.240
a while and been around
for a long time, three,

303
00:14:18.240 --> 00:14:21.510
four years, things hidden in
visual studio. That's right. It

304
00:14:21.510 --> 00:14:23.760
used to be called T3.
I don't know which T

305
00:14:23.760 --> 00:14:25.770
is new, but I, I,
this is like a test.

306
00:14:25.770 --> 00:14:30.840
It's a text templating transformation.
Took it toolkit. Yes. Yeah.

307
00:14:31.080 --> 00:14:33.180
And so they added another
T and it is an

308
00:14:33.180 --> 00:14:35.580
acronym, but it's an acronym
when they go to the

309
00:14:35.580 --> 00:14:37.500
next version, I'm kind of
hoping they don't find another

310
00:14:37.500 --> 00:14:39.510
tea and make it to
five, but who knows what

311
00:14:39.510 --> 00:14:42.300
they'll do? Yes. It's on,
it's on your listeners machines.

312
00:14:42.330 --> 00:14:45.060
If they're running 2008 and
most people have no idea

313
00:14:45.060 --> 00:14:48.120
that they have a cogeneration
language on their machine right

314
00:14:48.120 --> 00:14:50.850
here. Right now, This is
not something that they had

315
00:14:50.850 --> 00:14:53.690
to when they install visual
studio. If you're listening and

316
00:14:53.690 --> 00:14:56.000
you're on 2008, you have
this right now, right? You

317
00:14:56.000 --> 00:14:59.440
do. Except I said, Except
there's a couple of big

318
00:14:59.440 --> 00:15:02.770
accepts on this. It's it's
not altogether clear to me

319
00:15:02.770 --> 00:15:05.320
what the strategy within Microsoft
that they got it into

320
00:15:05.320 --> 00:15:09.460
visual studio is, but they
gave it to you without

321
00:15:09.550 --> 00:15:12.160
a, a little icon. You
can't go in and just

322
00:15:12.160 --> 00:15:15.700
say, create a new item,
T4 template. Okay. You can't

323
00:15:15.700 --> 00:15:18.700
do that. So that's missing
an editor is missing. There's

324
00:15:18.700 --> 00:15:23.200
no editing capabilities within.net, then
visual studio itself. And they

325
00:15:23.200 --> 00:15:24.610
didn't give you a harness.
And we can kind of

326
00:15:24.610 --> 00:15:27.250
come back and talk about
harnesses because the other two

327
00:15:27.250 --> 00:15:30.100
are pretty self evident. The
first one is easy. You

328
00:15:30.100 --> 00:15:33.490
create a text file. It
changed the extension. If you

329
00:15:33.490 --> 00:15:36.670
want to see up, put
within visual studio. So if

330
00:15:36.670 --> 00:15:39.910
you want visual studio to
turn around and display, when

331
00:15:39.910 --> 00:15:42.550
you, when you say view
this, you're going to actually

332
00:15:42.550 --> 00:15:44.950
be able to see output.
And the way it actually

333
00:15:44.950 --> 00:15:48.490
appears is it's a sub
item. The way that Like

334
00:15:48.490 --> 00:15:50.500
designers, you have like the
whatever. And then you have

335
00:15:50.500 --> 00:15:52.630
the dot designer. Don't say
it. If you give it

336
00:15:52.660 --> 00:15:55.870
the extension dot T T
then visual studio where create

337
00:15:55.870 --> 00:16:00.190
a sub, a sub file
is a dot CSR dot

338
00:16:00.190 --> 00:16:04.120
VB file, which contains the
output. It has some limitations,

339
00:16:04.120 --> 00:16:07.870
primarily the way data parameters
are passed in. So that

340
00:16:07.870 --> 00:16:09.970
can be somewhat, it may
or may not be useful.

341
00:16:09.970 --> 00:16:12.520
It's very useful to learn
T for you can also

342
00:16:12.520 --> 00:16:15.010
give it another extension that
you simply know later we

343
00:16:15.010 --> 00:16:17.710
use T4. And that's, that's
just an extension. I don't

344
00:16:17.710 --> 00:16:19.840
want visual studio to do
that because it's only going

345
00:16:19.840 --> 00:16:22.960
to get confused when that
template starts trying to evaluate

346
00:16:22.960 --> 00:16:24.850
parameters, which I can tell
you about some of the

347
00:16:24.850 --> 00:16:27.520
problems about that related to
the harness. So you can

348
00:16:27.520 --> 00:16:30.490
solve that problem. You can
make visual studio do generation

349
00:16:30.490 --> 00:16:33.550
for you today. Right now
you'll be doing it. And

350
00:16:33.560 --> 00:16:36.010
editor that looks like notepad.
If you just use visual

351
00:16:36.010 --> 00:16:40.360
studio and hopefully within the,
we have an answer now,

352
00:16:40.360 --> 00:16:42.880
and hopefully we'll have another
one in the 2010 timeframe.

353
00:16:44.620 --> 00:16:46.810
Hi, this is Scott coming
at you from another place

354
00:16:46.810 --> 00:16:49.540
in time. Are you looking
for an object, relational mapping

355
00:16:49.540 --> 00:16:53.200
tool for mission critical projects
using lincoln.net. I wanted to

356
00:16:53.200 --> 00:16:56.620
share with you genome. So
specifically designed for developing dot

357
00:16:56.620 --> 00:17:00.430
and enterprise applications. Genome is
a mature link, integrated ORM

358
00:17:00.430 --> 00:17:03.370
tool. It's been employed in
numerous large scale projects. Over

359
00:17:03.370 --> 00:17:06.820
the last six years, genome
was created for the.net platform

360
00:17:06.820 --> 00:17:09.580
as opposed to being a
port from Java. And it's

361
00:17:09.580 --> 00:17:14.800
thrived on platform innovation since.net.
1.0 genome has supported links

362
00:17:14.800 --> 00:17:18.280
since its CTP release. In
may of 2006. It offers

363
00:17:18.280 --> 00:17:21.190
several unique features, such as
encapsulation and reuse of linked

364
00:17:21.190 --> 00:17:24.580
queries and expressions. You can
really fully harness the power

365
00:17:24.580 --> 00:17:27.340
of link while benefiting from
your database platforms. Unique features,

366
00:17:27.970 --> 00:17:31.030
compose complex link queries, decompose
the query logic and your

367
00:17:31.030 --> 00:17:34.570
domain model link supports all
the major database platforms you

368
00:17:34.570 --> 00:17:38.140
find in enterprise environments like
SQL server, but also Oracle

369
00:17:38.140 --> 00:17:41.410
and IBM DB too. And
find out more about how

370
00:17:41.440 --> 00:17:44.860
genome integrates tightly with visual
studio and what tools do

371
00:17:44.860 --> 00:17:50.370
you know offers to reduce
development time@tinyurl.com slash try genome

372
00:17:50.460 --> 00:17:53.970
G N O M E,
where you can also download

373
00:17:53.970 --> 00:17:56.490
a free and fully functional
trial version. I hope you

374
00:17:56.490 --> 00:18:00.990
enjoy it. So now in
2008, I say file new

375
00:18:00.990 --> 00:18:04.770
text file. I call it
food.tt. I had a couple

376
00:18:04.770 --> 00:18:06.870
of lines and people can
search the web and find,

377
00:18:06.870 --> 00:18:08.760
teach for tutorials. It'll tell
you the directive that you

378
00:18:08.760 --> 00:18:10.980
need to put up the
name of the output file

379
00:18:11.370 --> 00:18:13.950
and they can start writing
what looks like ASP code.

380
00:18:14.490 --> 00:18:17.720
Okay. Well, yes and no.
What they write as just

381
00:18:17.720 --> 00:18:20.180
raw raw text is going
to is just going to

382
00:18:20.210 --> 00:18:22.670
be printed out as it
is. There's different types of

383
00:18:24.230 --> 00:18:26.720
directives, different types of, of
elements you can put in

384
00:18:26.720 --> 00:18:31.040
there. Many of which drop
you into getting expressions. One

385
00:18:31.040 --> 00:18:33.020
of which direction to getting
expression, one of which drops

386
00:18:33.020 --> 00:18:35.420
you into the code that
you want the language written

387
00:18:35.420 --> 00:18:37.910
in, which can be either
VB or C-sharp could probably

388
00:18:37.910 --> 00:18:40.970
be other stuff, But it's
text. You could generate CSV

389
00:18:40.970 --> 00:18:43.640
files or XML or whatever
makes you happy. Absolutely. So

390
00:18:43.640 --> 00:18:45.590
we have a language within
the template. It's one of

391
00:18:45.590 --> 00:18:47.450
the things that takes a
minute to get used to

392
00:18:47.690 --> 00:18:50.150
there's a language within the
template that runs the template.

393
00:18:50.330 --> 00:18:52.730
For example, you want to
do something for every property

394
00:18:52.730 --> 00:18:54.890
in your business object, you
have a loop and that

395
00:18:54.890 --> 00:18:57.770
loop is logic and code
within the template that runs

396
00:18:57.770 --> 00:19:00.350
the template. Then the template
is going to output something

397
00:19:00.560 --> 00:19:02.930
that could be VB or
C-sharp code. It could be

398
00:19:02.930 --> 00:19:05.510
a configuration file. It could
be XAML. It could be

399
00:19:05.540 --> 00:19:08.540
any thing that is a
text file that you want

400
00:19:08.660 --> 00:19:11.030
to get put out onto
your office. And they hit

401
00:19:11.750 --> 00:19:15.530
control shift B, and it
happens. That thing gets generated.

402
00:19:15.590 --> 00:19:18.290
Now that happens in visual
studio. I understand that it

403
00:19:18.290 --> 00:19:20.660
doesn't happen at ms. Build
level. There's some EMIS build

404
00:19:20.690 --> 00:19:22.280
tasks you need to build
in to make sure that

405
00:19:22.280 --> 00:19:24.800
happens at the command line.
Yeah. And I'm afraid I'm

406
00:19:24.800 --> 00:19:27.800
not that familiar with the
EMIS build stuff on, on

407
00:19:27.800 --> 00:19:30.380
that, because T4 is sort
of a, it's all just

408
00:19:30.380 --> 00:19:32.510
coming together for us right
now. I actually use an

409
00:19:32.510 --> 00:19:35.480
external harness myself. And that's
something I want to talk

410
00:19:35.480 --> 00:19:37.460
a little bit about, but
before we go there, we

411
00:19:37.460 --> 00:19:40.040
mentioned editor and we did
mention the solution for people.

412
00:19:41.000 --> 00:19:45.410
There's a company called Claris
and you'll have the, the

413
00:19:45.410 --> 00:19:50.300
URL on the, the notes
for the, And Clarius is

414
00:19:50.300 --> 00:19:52.910
CLA R I U S.
And one of the, one

415
00:19:52.910 --> 00:19:54.350
of the primaries over there
is a buddy of mine

416
00:19:54.350 --> 00:19:58.370
named Daniel <inaudible>. Everyone calls
him kazoo, KZ you. So

417
00:19:58.370 --> 00:20:00.650
if you search for KZ,
U and T for, or

418
00:20:00.660 --> 00:20:02.540
search around for T for
you, we'll inevitably bump into

419
00:20:02.540 --> 00:20:05.000
these guys. They're all over.
Yes. T for editor, I

420
00:20:05.060 --> 00:20:07.880
believe Google searching for T
for editor will get you

421
00:20:07.880 --> 00:20:11.240
right there. And they have
a community edition. I'd really

422
00:20:11.240 --> 00:20:13.100
like to thank the folks
for Claris for doing that

423
00:20:13.100 --> 00:20:15.170
for you, because I'd hate
for everybody to have to

424
00:20:15.170 --> 00:20:17.240
invest a hundred dollars, but
you know what, if you're

425
00:20:17.240 --> 00:20:19.130
doing this all the time,
I think you should seriously

426
00:20:19.130 --> 00:20:21.890
consider going ahead and getting
the full copy. But in

427
00:20:21.890 --> 00:20:23.570
terms of just getting started,
now, you don't need that

428
00:20:23.570 --> 00:20:25.790
there is a community group.
So this gives you what

429
00:20:25.790 --> 00:20:28.220
IntelliSense and syntax highlighting and
all this stuff that you

430
00:20:28.220 --> 00:20:31.280
don't get in visual studio.
Right? And there's more in

431
00:20:31.730 --> 00:20:34.250
there. There's more of that
in the version. That's a

432
00:20:34.260 --> 00:20:37.610
hundred dollars, which is a
very reasonable price. Sure. But

433
00:20:37.610 --> 00:20:40.910
in the, in the coloring
is tremendously important because as

434
00:20:40.910 --> 00:20:42.950
I said, you have two
languages going on at once.

435
00:20:42.950 --> 00:20:44.660
The one that you're outputting,
the one you're writing your

436
00:20:44.660 --> 00:20:48.490
template, and if they're the
same color. Good. Yeah. I,

437
00:20:48.580 --> 00:20:50.620
we did that in notepad
back in the day. And

438
00:20:50.620 --> 00:20:52.660
it was always challenging because
just as when you were

439
00:20:52.660 --> 00:20:55.900
making webpages, you're thinking about
the HTML you're producing. And

440
00:20:55.900 --> 00:20:58.540
then you're thinking about the
inline script. If the inline

441
00:20:58.540 --> 00:21:01.090
script happens to be the
same language as what you're

442
00:21:01.090 --> 00:21:03.880
generating, if you're using VB
to generate VB or vice

443
00:21:03.880 --> 00:21:07.510
versa, it can be very,
very eye blurring as to

444
00:21:07.510 --> 00:21:10.470
what's happening. Coloration is tremendously
important in that coloration pretty

445
00:21:10.470 --> 00:21:13.200
much solves that problem. So
you said a harness, why

446
00:21:13.200 --> 00:21:15.120
do I need a harness?
Okay. So a hardest is

447
00:21:15.120 --> 00:21:18.750
basically something that's going to
run the template and T4,

448
00:21:19.170 --> 00:21:21.690
as it stands right now,
it doesn't take parameters. It's,

449
00:21:21.690 --> 00:21:25.080
it's rather, it's rather primitive
in its relationship with the

450
00:21:25.080 --> 00:21:27.960
rest of the world. And
that's because there's a model

451
00:21:27.960 --> 00:21:30.750
within DSL, which is where
T4 came out of D

452
00:21:30.780 --> 00:21:33.180
T Microsoft. Didn't sit back
and say, we want to

453
00:21:33.180 --> 00:21:36.690
build a, a templating engine.
What they sat back and

454
00:21:36.690 --> 00:21:39.030
said is we want to
build DSL and you cannot

455
00:21:39.030 --> 00:21:42.420
do this. Yes, thank you.
D domain specific languages. And

456
00:21:42.420 --> 00:21:45.990
to support that we must
do generation. So within the

457
00:21:46.320 --> 00:21:50.160
domain specific language world, there
are space for interacting with

458
00:21:50.250 --> 00:21:53.180
the T for templates. And
so, because of that, it's

459
00:21:53.220 --> 00:21:57.030
a little bit awkward. One
of the, the harnesses that

460
00:21:57.030 --> 00:22:00.090
is the first prototype is
available right now, but I'll

461
00:22:00.090 --> 00:22:02.100
be putting up in the
next week a much more

462
00:22:02.100 --> 00:22:06.450
sophisticated version at the, at,
at venture.com. We have a

463
00:22:06.450 --> 00:22:08.490
community edition, which is free.
We're putting it up there

464
00:22:08.490 --> 00:22:11.910
so people can get used
to <inaudible>. And what that's

465
00:22:11.910 --> 00:22:14.250
going to let you do
is actually manage properties, being

466
00:22:14.250 --> 00:22:17.970
handed into your T four
template. You create a dictionary.

467
00:22:18.150 --> 00:22:20.640
The dictionary gets handed off
to this engine. The engine

468
00:22:20.640 --> 00:22:22.770
does the work to get
that data into the template.

469
00:22:22.950 --> 00:22:24.960
So getting properties passed is
one of the things you

470
00:22:24.960 --> 00:22:27.330
need a harness to do.
You need harnesses to manage

471
00:22:27.360 --> 00:22:30.930
errors. You need harnesses to
manage crossing some sort of

472
00:22:30.930 --> 00:22:34.860
an innumerable. So there's other
ways to solve this problem.

473
00:22:34.860 --> 00:22:37.770
It's been documented how to
go within T four and

474
00:22:37.770 --> 00:22:40.890
have a T for file,
create many, many different files

475
00:22:40.890 --> 00:22:42.990
from itself. But I find
that to be sort of

476
00:22:42.990 --> 00:22:46.170
confusing and the wrong tool
to do the job. So

477
00:22:46.170 --> 00:22:48.750
what, what the hardest is
I've been working with for

478
00:22:48.750 --> 00:22:51.030
years, I've been writing harnesses
for, for many years, I've

479
00:22:51.030 --> 00:22:53.070
written a couple of them,
and this is the best

480
00:22:53.070 --> 00:22:55.620
one by far. I'm really
happy with it. But what

481
00:22:55.620 --> 00:22:57.750
this one will let you
do is it will loop

482
00:22:57.750 --> 00:23:01.380
across a collection. So for
example, if you're describing your

483
00:23:01.380 --> 00:23:05.250
business model is going to
loop across your objects so

484
00:23:05.250 --> 00:23:07.050
that you're going to be
able to do something and

485
00:23:07.050 --> 00:23:09.690
create a new file across
each object. These are the

486
00:23:09.690 --> 00:23:13.020
kinds of problems that harness
is required. So to put

487
00:23:13.020 --> 00:23:14.820
that into a more concrete,
if I could, if I

488
00:23:14.820 --> 00:23:17.460
could pause for a second
that you, if you have

489
00:23:17.460 --> 00:23:20.280
a co-generation template, perhaps you're
going to loop over some

490
00:23:20.280 --> 00:23:23.250
database tables or a custom
domain specific language that you

491
00:23:23.250 --> 00:23:27.390
have created doing, doing some
domain driven design, maybe a

492
00:23:27.390 --> 00:23:30.090
text file, or a custom
DSL that you've written, you're

493
00:23:30.090 --> 00:23:32.940
going to want to spin
through those and then spit

494
00:23:32.940 --> 00:23:36.660
out actual concrete classes. Like
for example, in linked to

495
00:23:36.660 --> 00:23:40.680
SQL, there's a designer, a
visual designer that the DME

496
00:23:40.720 --> 00:23:43.680
DBML file. And you say,
you say build, and then

497
00:23:43.680 --> 00:23:47.930
a giant epically sized dot
designer file pops out, right.

498
00:23:47.930 --> 00:23:50.830
You know, megabyte plus if
dot CS code And your

499
00:23:50.830 --> 00:23:52.720
readers can't see the face
I just made because I

500
00:23:52.720 --> 00:23:55.900
hate that one file per
problem approach. I really want

501
00:23:55.900 --> 00:23:58.930
a one file per entity
approach because that's or whatever

502
00:23:58.930 --> 00:24:01.480
it is, you're creating an
entity in the formal sense

503
00:24:01.480 --> 00:24:03.910
there, but that's the way
we write code and we're

504
00:24:03.910 --> 00:24:06.100
possible generated code should look
like Exactly. And this all

505
00:24:06.100 --> 00:24:08.770
depends on how you decide
to structure your T4 templates.

506
00:24:08.770 --> 00:24:11.170
But what you were saying
earlier was that by default

507
00:24:11.170 --> 00:24:14.920
he floor Defour kind of
has a one template, one

508
00:24:15.490 --> 00:24:19.330
fi one resulting file, one
generated file technique. And there

509
00:24:19.330 --> 00:24:22.840
are ways to, to expand
that. For example, Damien garde

510
00:24:23.350 --> 00:24:26.770
has released a T for
open source template. That is

511
00:24:26.800 --> 00:24:29.860
basically a wholesale replacement for
the link to SQL generation

512
00:24:29.860 --> 00:24:35.710
stuff. He generates a one
entity profile, but he does

513
00:24:35.710 --> 00:24:38.170
it with <inaudible> and some
tricks he's got to basically

514
00:24:38.170 --> 00:24:40.180
allow T four to fan
out. And you're saying that

515
00:24:40.180 --> 00:24:42.520
you're not a huge fan
of that because it speaks

516
00:24:42.520 --> 00:24:45.400
to how the template itself
is structured. It, it does,

517
00:24:45.400 --> 00:24:48.400
it's really gets back to
the single responsibility principle. So

518
00:24:48.400 --> 00:24:50.560
what we're doing right there
in what Damien's doing, and

519
00:24:50.560 --> 00:24:52.720
I take my hat off
to Damien, and I'm really

520
00:24:52.720 --> 00:24:54.790
happy that those techniques are
out there. We love Damien

521
00:24:54.910 --> 00:24:59.980
big switches to Damien, but,
but, but I don't want

522
00:24:59.980 --> 00:25:02.950
a template whose job it
is to produce code, to

523
00:25:02.950 --> 00:25:06.550
also be managing files. Yes.
That doesn't work for me.

524
00:25:06.580 --> 00:25:08.890
And that's why the harness
that I've written steps back

525
00:25:08.890 --> 00:25:11.530
from that it has an
output service and the output

526
00:25:11.530 --> 00:25:13.570
service manages, how are we
going to get it? It's

527
00:25:13.570 --> 00:25:16.420
got file naming services and
asset services. So all that

528
00:25:16.420 --> 00:25:19.060
stuff is pluggable. And for
me, we have to step

529
00:25:19.060 --> 00:25:21.550
back into.net to make those
things happen. We're not gonna

530
00:25:21.550 --> 00:25:23.350
do it today. So putting
words in your mouth, are

531
00:25:23.350 --> 00:25:25.270
you saying that your harness
is acting as like a

532
00:25:25.270 --> 00:25:28.480
T four cogeneration pipeline? It's
rather than just a simple

533
00:25:28.480 --> 00:25:32.110
transformation from a bunch of
inputs, some output, and this

534
00:25:32.140 --> 00:25:35.470
magic super controller template does
all the work you've made

535
00:25:35.470 --> 00:25:39.430
a, a pipeline with pluggable
units at every point. That's

536
00:25:39.490 --> 00:25:42.640
absolutely true. It's absolutely true.
Every, every point I, I,

537
00:25:42.930 --> 00:25:45.070
I could think of it.
I, I put that in

538
00:25:45.670 --> 00:25:47.560
and it will be an
open source thing. So I'm

539
00:25:47.560 --> 00:25:51.070
hoping we're going to get
more suggestions for other ways

540
00:25:51.070 --> 00:25:53.170
to make it pluggable. The
key things that after eight

541
00:25:53.170 --> 00:25:55.240
years in this, I know
we need plugable are going

542
00:25:55.240 --> 00:25:57.310
to be naming services because
people are all over the

543
00:25:57.310 --> 00:25:59.170
map and what they need
in that file out put

544
00:25:59.170 --> 00:26:02.050
services, because there's many techniques,
there's ways to protect code.

545
00:26:02.050 --> 00:26:04.180
There's other things to check
some that I mentioned earlier,

546
00:26:04.480 --> 00:26:06.970
and then the templates themselves,
I don't know what templates

547
00:26:06.970 --> 00:26:08.950
somebody else is going to
want to write, and they're

548
00:26:08.950 --> 00:26:10.810
going to need to interact
with metadata. So they're going

549
00:26:10.810 --> 00:26:12.610
to need to interact with
some sort of a model.

550
00:26:12.820 --> 00:26:14.380
I don't know what that
model is going to look

551
00:26:14.380 --> 00:26:17.560
like. And for me to
prescribe any interface for any

552
00:26:17.560 --> 00:26:20.260
piece, anywhere in that system
is not the right way

553
00:26:20.260 --> 00:26:22.210
to manage the problem. So
what I've done instead is

554
00:26:22.210 --> 00:26:24.730
you've met no, no. You've
had Glenn block on to

555
00:26:24.730 --> 00:26:27.700
talk about I'm a meth
user. He's my meth dealer.

556
00:26:27.700 --> 00:26:29.470
You know, you know, all
that kind of dealers, my

557
00:26:29.470 --> 00:26:34.900
meth dealer. So it's a
really good example of, of

558
00:26:34.900 --> 00:26:39.100
where math can really shine
because it allows everybody to

559
00:26:39.100 --> 00:26:43.120
be a consumer or provider.
And so the whole relationship

560
00:26:43.200 --> 00:26:47.910
among templates and metadata and
services that they require, all

561
00:26:47.910 --> 00:26:51.510
I'm doing is hooking that
up and showing people enough

562
00:26:51.660 --> 00:26:54.990
that they get the idea.
But then they, my hope

563
00:26:54.990 --> 00:26:56.760
is people would just go
to town on it. And

564
00:26:56.760 --> 00:26:59.970
that's why, you know, this
is a appropriate community release

565
00:26:59.970 --> 00:27:02.910
for us because it's a,
it's a tool for people

566
00:27:02.910 --> 00:27:05.700
to take and go forward
with. You know, obviously we

567
00:27:05.700 --> 00:27:08.340
love what we're doing internally,
but that's really separate from

568
00:27:08.340 --> 00:27:09.840
us wanting to see the
world doing a lot more

569
00:27:09.840 --> 00:27:13.550
cogeneration. Now, one of the
things that, that I, as

570
00:27:13.550 --> 00:27:16.010
someone who did cogeneration for
years would say, they're kind

571
00:27:16.010 --> 00:27:18.980
of the two biggest problems
are on the right side

572
00:27:18.980 --> 00:27:22.700
of the problem, deciding what
I'm going to generate. And

573
00:27:22.700 --> 00:27:24.920
then on the left side
of the problem, deciding from

574
00:27:24.920 --> 00:27:27.860
what I am going to
generate it from, and is

575
00:27:27.860 --> 00:27:30.500
the thing on the left
side that, that, that metadata

576
00:27:30.680 --> 00:27:33.650
simpler to write than the
thing that I just want

577
00:27:33.650 --> 00:27:37.250
to get. You just did
a beautiful job of explaining

578
00:27:37.250 --> 00:27:40.580
why this is hard. People
want cogeneration to be easy.

579
00:27:40.760 --> 00:27:42.440
What they want to do
is they want to say,

580
00:27:42.440 --> 00:27:44.030
give me the tool. I'll
pay money for it. Do

581
00:27:44.030 --> 00:27:46.790
whatever. Give me the tool
that just makes my application

582
00:27:46.790 --> 00:27:50.960
happen. And the problem is
architecture is still hard. Metadata

583
00:27:50.960 --> 00:27:53.150
is still hard. These problems
are still hard. They will

584
00:27:53.150 --> 00:27:55.430
be for awhile. And you've
got to be involved with

585
00:27:55.430 --> 00:27:57.710
that, or you're selling your
soul to whoever's giving you

586
00:27:57.710 --> 00:28:00.020
your architect. Well, that's why
tools that look at the

587
00:28:00.020 --> 00:28:03.440
database and just generate everything
from the database are so

588
00:28:03.440 --> 00:28:06.710
popular. That's right. And, and
we go both directions on

589
00:28:06.710 --> 00:28:09.680
that. We also have tools
that are domain and create

590
00:28:09.680 --> 00:28:11.720
the middle and go left
and right, exactly. But, but

591
00:28:11.720 --> 00:28:13.730
the part in the middle
of the mapping, I do

592
00:28:13.730 --> 00:28:16.180
it and it, I would
now call it a D

593
00:28:16.280 --> 00:28:19.190
DSL, except it's all XML.
I've been doing that for

594
00:28:19.190 --> 00:28:21.290
eight years. It's in my
book. How to, how to

595
00:28:21.290 --> 00:28:23.600
do that mapping. It's been
there for a very long

596
00:28:23.600 --> 00:28:26.300
time. We now don't like
doing an X amount. Now

597
00:28:26.300 --> 00:28:28.400
we do it in DSL,
but it's the same problem

598
00:28:28.640 --> 00:28:31.880
of how do we say
this business object represents these

599
00:28:31.880 --> 00:28:35.060
columns from these joint objects
sitting out in that database

600
00:28:35.060 --> 00:28:37.460
over there and how do
we make that definition? So

601
00:28:37.460 --> 00:28:40.490
those are all problems that
are, are really core. The

602
00:28:40.490 --> 00:28:42.170
motivated problem. I think we'll
solve in the next three

603
00:28:42.170 --> 00:28:45.320
or four years. I'm really
optimistic the architecture problem. I'm

604
00:28:45.320 --> 00:28:47.780
not an architect. I mean,
I do architecture. I copy

605
00:28:47.780 --> 00:28:50.300
other people's architectures, but I'm
not one who has enough

606
00:28:50.300 --> 00:28:52.820
experience to say, yes, there
is that perfect architecture. We

607
00:28:52.820 --> 00:28:54.440
will all be able to
use. Now this might come

608
00:28:54.440 --> 00:28:56.450
out of left field, but
while here, while we're here

609
00:28:56.450 --> 00:28:58.490
talking about things that I
find very, you know, fairly

610
00:28:58.490 --> 00:29:02.540
concrete and fairly, at least
within the realm of understanding

611
00:29:02.540 --> 00:29:07.670
for me, there's this thing
looming. There's this Oslo that's

612
00:29:07.670 --> 00:29:09.800
out there that a lot
of people are still trying

613
00:29:09.800 --> 00:29:13.520
to get their heads around.
And I'm seeing, it's almost

614
00:29:13.520 --> 00:29:16.760
like blind men trying to
tuck describe an elephant, you

615
00:29:16.760 --> 00:29:18.470
know, and you feel, Oh,
this feels like a snake.

616
00:29:18.470 --> 00:29:20.990
And that feels like a
tree, but we're feeling different

617
00:29:20.990 --> 00:29:22.490
parts of the elephant. And
no, one's really seeing the

618
00:29:22.490 --> 00:29:26.360
big picture. At least not
people, unless they've dived, dove

619
00:29:26.660 --> 00:29:30.410
full, full on into Oslo.
You're describing these DSLs, are

620
00:29:30.410 --> 00:29:32.510
they solving this problem as
well? And how's T4 going

621
00:29:32.510 --> 00:29:35.090
to fit into that. I
don't exactly how everything is

622
00:29:35.090 --> 00:29:36.350
going to fit together at
the end of the day.

623
00:29:36.350 --> 00:29:38.390
I think that I still
have a lot to learn

624
00:29:38.390 --> 00:29:40.220
on that. I'm very excited
about all this load because

625
00:29:40.220 --> 00:29:42.520
to me, what all is
low is a wonderful, big,

626
00:29:42.550 --> 00:29:46.450
beautiful repository for metadata gives
us some opportunities for consistency

627
00:29:46.450 --> 00:29:49.240
across metadata. It gives us
some opportunities for rules gives

628
00:29:49.240 --> 00:29:52.420
us some options, some really
exciting opportunities there, from my

629
00:29:52.420 --> 00:29:54.910
perspective, it's enough because I
can do the rest. It's

630
00:29:54.910 --> 00:29:57.700
easy. Once we do that,
architecture is still hard, but

631
00:29:57.700 --> 00:30:00.370
the actual physical act of
generation, we've known how to

632
00:30:00.370 --> 00:30:02.560
do for awhile. So if
they do it right, and

633
00:30:02.560 --> 00:30:05.350
I'm happy with it, that's
even better. But if they

634
00:30:05.350 --> 00:30:09.040
just give me the tools
to create really good metadata,

635
00:30:09.400 --> 00:30:11.980
then that is, is tremendously
powerful. And one of the

636
00:30:11.980 --> 00:30:15.100
nice things, at least in
some spaces they're accepting and

637
00:30:15.100 --> 00:30:17.800
workflows one that they're doing
this the need for both

638
00:30:18.250 --> 00:30:22.030
textual and visual representations. And
hopefully that's going to, you

639
00:30:22.030 --> 00:30:25.710
know, be really pervasive throughout
Oslo. Now, if people are

640
00:30:25.710 --> 00:30:28.260
going to sit down right
now and, and, and learn

641
00:30:28.260 --> 00:30:32.850
about a cogeneration, where do
they start? I mean, there's

642
00:30:32.850 --> 00:30:35.340
the tools, there's the act
of turning the crank and

643
00:30:35.340 --> 00:30:39.480
doing that. But there's, there's
the concepts. There's the architecture.

644
00:30:39.480 --> 00:30:42.990
There's the big stuff. Are,
are there other tools that

645
00:30:42.990 --> 00:30:45.230
are lying out there that
I should be using? Is,

646
00:30:45.230 --> 00:30:47.640
is there only T4? I
know that there's, there's COVID

647
00:30:47.650 --> 00:30:50.190
Smith, but what else can
I use to generate code?

648
00:30:50.190 --> 00:30:52.770
And where do I start?
There's a couple, there's a

649
00:30:52.770 --> 00:30:54.360
couple out there and there's
a couple of third party

650
00:30:54.360 --> 00:30:56.250
tools, which I'll just skip
over only cause the third

651
00:30:56.250 --> 00:30:58.200
party right now. And, and
I don't wanna say anything

652
00:30:58.200 --> 00:31:00.460
bad or good about them.
They're there. You can go,

653
00:31:01.020 --> 00:31:03.030
you can go search for
them and, and find them.

654
00:31:03.570 --> 00:31:05.670
Microsoft has another one though,
that nobody knows about. Or

655
00:31:05.670 --> 00:31:07.890
very few people know Microsoft
shill, aren't you, you don't

656
00:31:07.890 --> 00:31:10.890
even work for them. Okay.
Well, you know, it's just,

657
00:31:11.880 --> 00:31:14.370
There's lots of tools out
there. There's LLB L Jen,

658
00:31:14.640 --> 00:31:19.530
there's a gosh, what are
those? <inaudible> yeah. Miguel Castro's

659
00:31:19.530 --> 00:31:21.090
pre-code breeze. Yeah. There's a
ton of them out there,

660
00:31:21.090 --> 00:31:22.620
which is why I hesitate
to say any. Cause I

661
00:31:22.620 --> 00:31:24.210
know I just left out
three. I know I looked

662
00:31:24.210 --> 00:31:26.340
at my generation. I know
I'll sit here and just

663
00:31:26.640 --> 00:31:29.490
thinking of the ones I
left off. And so everybody,

664
00:31:29.490 --> 00:31:34.200
I forgot. I'm really sorry.
Microsoft's other one is actually

665
00:31:34.200 --> 00:31:37.260
in VB NAI. And there,
this has been written about,

666
00:31:38.010 --> 00:31:40.590
I actually did not. I
wish I'd discovered this on

667
00:31:40.590 --> 00:31:42.420
my own. Cause it made
me feel very smart. I

668
00:31:42.420 --> 00:31:44.190
first saw this from Beth
who heard it from somebody

669
00:31:44.190 --> 00:31:49.260
else that messy. So this
has been out there and

670
00:31:49.260 --> 00:31:51.390
I've actually done quite a
bit of work on this

671
00:31:51.390 --> 00:31:53.850
because from this, I was
actually able to create templates

672
00:31:54.090 --> 00:31:56.280
that were a single template
that could generate either C

673
00:31:56.280 --> 00:31:58.560
sharp or VB code without
the code dump. Now I'm

674
00:31:58.560 --> 00:32:00.630
not sure that that work
is actually has a future,

675
00:32:00.630 --> 00:32:03.020
but that's work. I did
about a year ago, Stop

676
00:32:03.020 --> 00:32:04.770
because you're talking really fast
and you're using a lot

677
00:32:04.770 --> 00:32:06.750
of terms that not everyone
will understand. One of the

678
00:32:06.750 --> 00:32:08.760
things that we used to
do when we were generating

679
00:32:08.760 --> 00:32:10.590
code was you would create
a thing called a code

680
00:32:10.590 --> 00:32:13.500
Dom and a code. Don
was a language agnostic way

681
00:32:13.740 --> 00:32:17.190
to express instructions. It was
almost like building an XML

682
00:32:17.190 --> 00:32:20.610
document using only Dom instructions.
It was just as up

683
00:32:20.610 --> 00:32:24.210
to except we were building
method calls and property getter

684
00:32:24.210 --> 00:32:28.530
centers and descriptions of classes
using a bunch of Lego

685
00:32:28.530 --> 00:32:32.430
pieces that were object. The
best thing to say about

686
00:32:32.430 --> 00:32:34.200
the code Dom is to
stay as far away from

687
00:32:34.200 --> 00:32:37.500
it. It was to yeah.
To call it Baroque would

688
00:32:37.500 --> 00:32:40.550
be an understatement. Yes, but
it did allow you to

689
00:32:40.550 --> 00:32:42.560
do it in a language
agnostic way and spit out

690
00:32:42.620 --> 00:32:46.250
either C-sharp or VB T4
is text to text. So

691
00:32:46.250 --> 00:32:48.140
you have to make a
declaration to yourself about what

692
00:32:48.140 --> 00:32:50.890
you're going to generate. Coloration
that you make, you make

693
00:32:50.890 --> 00:32:52.930
tea, you can make two
declarations in T for about

694
00:32:52.930 --> 00:32:55.660
the prefix. You put on
the output file and on

695
00:32:55.660 --> 00:32:58.330
the language of the template
itself. But by nature of

696
00:32:58.330 --> 00:33:01.060
writing the code, you are
saying whether it's VB or

697
00:33:01.060 --> 00:33:03.400
C-sharp you're putting in imports
are using and all the

698
00:33:03.400 --> 00:33:06.370
other. So back to what
you were saying, the scandalous

699
00:33:06.370 --> 00:33:07.840
bit of information that you're
telling me that there's a

700
00:33:07.840 --> 00:33:11.530
co-generation tool inside of visual
basic nine. Okay. So as

701
00:33:11.530 --> 00:33:14.440
a reformed VB or C
I'm cause nothing, nothing worse

702
00:33:14.440 --> 00:33:18.970
than a reformed. I, cause
I was VB. That was

703
00:33:18.970 --> 00:33:20.800
where I started out. I
did my C in high

704
00:33:20.800 --> 00:33:24.220
school and high school and
college <inaudible> then I became

705
00:33:24.220 --> 00:33:27.640
a semi-colon person. And now
I get hassled by the

706
00:33:27.640 --> 00:33:31.300
community when I don't give
their props, I cross code

707
00:33:31.300 --> 00:33:33.760
in both languages. So I'm
actually giving talks right now

708
00:33:33.760 --> 00:33:36.610
and cross coding. So yes.
Cool. But back to VB

709
00:33:36.610 --> 00:33:39.610
nine in this, what we've
got is XML literals. And

710
00:33:39.610 --> 00:33:42.310
if you code in any
language and do not understand

711
00:33:42.310 --> 00:33:44.620
XML, literals and VB nine,
you are selling yourself short,

712
00:33:44.870 --> 00:33:47.500
they'll learn about it. So
there's a very powerful language

713
00:33:47.530 --> 00:33:52.840
for creating something. It's generally
XML, it's generally XML. And

714
00:33:52.840 --> 00:33:56.380
in fact, you are initially
creating XML, but there is

715
00:33:56.380 --> 00:34:00.730
a very important property called
dot value. What dot value

716
00:34:00.730 --> 00:34:03.580
does is take all of
the inner XML and concatenates

717
00:34:03.580 --> 00:34:06.730
it into a string you
have just created source code

718
00:34:06.730 --> 00:34:09.640
or anything else Create what's
the XML around it for

719
00:34:09.670 --> 00:34:12.400
just Because you have to
have it to make X

720
00:34:12.400 --> 00:34:14.650
amount of sure. It's like
a co-generation hack. Like you're

721
00:34:14.650 --> 00:34:18.840
declaring it. Is there a
sample I can go see,

722
00:34:19.270 --> 00:34:21.730
I've got some stuff on
my blog. Beth Massey has

723
00:34:21.730 --> 00:34:23.980
had stuff a while ago
on her blog. There's a

724
00:34:23.980 --> 00:34:26.230
number of VB people that
are using this still price

725
00:34:26.500 --> 00:34:29.440
has been working on an
article. And I really hope

726
00:34:29.440 --> 00:34:31.450
that article is going to
be coming up in visual

727
00:34:31.450 --> 00:34:34.660
studio magazine very soon. I'm
hoping that that I'm hoping

728
00:34:34.660 --> 00:34:37.210
I'm not speaking out of
school to say that Billy

729
00:34:37.210 --> 00:34:39.400
Hollis's has spoken about this.
A number of people have

730
00:34:39.400 --> 00:34:41.680
been speaking about it. I
love Billy Hall's. Yeah, I

731
00:34:41.680 --> 00:34:44.770
do it. I do it
more complicated than some other

732
00:34:44.770 --> 00:34:47.560
folks do, but it's a
really powerful mechanism because you're

733
00:34:47.560 --> 00:34:50.260
sitting in the heart of.net,
right? You have got every,

734
00:34:50.440 --> 00:34:54.190
every possible tool. You can
make the deepest hierarchies. You

735
00:34:54.190 --> 00:34:56.590
can use as much complexity
as you need. You can

736
00:34:56.590 --> 00:35:00.190
call into subroutines, it's all
in all the intelligence, all

737
00:35:00.190 --> 00:35:04.660
the, your you're in, in.net.
It's difficult to describe these

738
00:35:04.660 --> 00:35:07.720
kinds of things. When you're
on a podcast, I've blogged

739
00:35:07.720 --> 00:35:09.220
about this as well. You
can go to my blog

740
00:35:09.220 --> 00:35:12.520
and click on the VB
category and I've shown about

741
00:35:12.760 --> 00:35:14.740
if ever there were a
reason for a C sharp

742
00:35:14.740 --> 00:35:17.950
person to get back involved
in VB or to even

743
00:35:17.950 --> 00:35:22.360
do mixed language assemblies. It
is XML literals. It's the

744
00:35:22.360 --> 00:35:24.850
kind of thing where the
purist might say, Oh my

745
00:35:24.850 --> 00:35:27.340
God, what have we done?
We've built in one language

746
00:35:27.340 --> 00:35:30.370
support, deep into another language.
But you know, once you

747
00:35:30.370 --> 00:35:33.310
accept the existence of link,
a language within a language

748
00:35:33.700 --> 00:35:38.760
or a at least a
query within a language, having

749
00:35:38.760 --> 00:35:40.590
XML embedded in the language
seems to be, it's pretty

750
00:35:40.590 --> 00:35:43.620
amazing. And I've, I've written
applications where I would have

751
00:35:43.620 --> 00:35:47.250
a VB DLL just for
the, the generation of, of

752
00:35:47.250 --> 00:35:51.270
XML. There's just really no
easier way in.net to generate

753
00:35:51.270 --> 00:35:53.630
XML. And, you know, I,
I think it's kind of

754
00:35:53.630 --> 00:35:56.060
cool. We talk about mixed
language DLLs, but I actually

755
00:35:56.060 --> 00:35:57.830
like the current scenario. And
I like it because if

756
00:35:57.830 --> 00:36:00.590
you're touching, if you're touching
XML, then you're touching a

757
00:36:00.590 --> 00:36:02.390
schema. And if you're touching
a scheme of the ischemic

758
00:36:02.390 --> 00:36:04.490
and change, put in a
different deal. So I think

759
00:36:04.490 --> 00:36:07.280
there's a very good reason
for that boundary change and

760
00:36:07.280 --> 00:36:10.070
the amount of actual VB
code that a C-sharp coder

761
00:36:10.070 --> 00:36:12.440
has to write is pretty
small. The rest of it

762
00:36:12.440 --> 00:36:14.600
is Really look like you're
right. It doesn't really look

763
00:36:14.600 --> 00:36:18.470
like VP because you're really
focused on generating you're generating,

764
00:36:18.530 --> 00:36:21.170
generating your XML. Or as
a lot of examples we've

765
00:36:21.170 --> 00:36:24.740
been seeing lately with asp.net
MVC, there's been some examples

766
00:36:24.740 --> 00:36:29.570
where we've had XML literals
generating XHTML. So VB XML,

767
00:36:29.570 --> 00:36:32.990
literals as view engine, right,
as a, as a, as

768
00:36:32.990 --> 00:36:37.730
a strongly typed way to
generate an entire webpage or

769
00:36:37.730 --> 00:36:39.860
RSS feed or whatever makes
you happy. Right? But if

770
00:36:39.860 --> 00:36:44.180
you just imagine putting inside
of those XML elements, putting

771
00:36:44.180 --> 00:36:46.490
some inner texts, that was
what you wanted to appear

772
00:36:47.360 --> 00:36:49.700
eventually. And it can be
nested in whatever pattern you

773
00:36:49.700 --> 00:36:52.850
want, because it's simply concatenated
on a top to bottom

774
00:36:52.850 --> 00:36:55.580
basis within the XML file.
Then you are able to

775
00:36:55.580 --> 00:36:58.010
create any kind of output
that you want, whether it

776
00:36:58.010 --> 00:37:00.740
was XML or not just
by putting that value at

777
00:37:00.740 --> 00:37:02.210
the end. Right. Well, I
want to see this to

778
00:37:02.210 --> 00:37:03.890
believe it. I want to
see if it's performing and

779
00:37:03.890 --> 00:37:06.080
if it's something I'm going
to play with. So hopefully

780
00:37:06.080 --> 00:37:08.300
we'll put it in the
show notes, a link to

781
00:37:08.630 --> 00:37:10.880
some examples on your blog.
And some of the other

782
00:37:10.880 --> 00:37:13.400
examples that we've talked about
today sounds good. Cool. Well,

783
00:37:13.400 --> 00:37:15.680
thanks so much, Kathleen dollar
for sitting down and talking

784
00:37:15.680 --> 00:37:18.650
with me today. This has
been another episode of Hansel

785
00:37:18.650 --> 00:37:20.330
minutes. See you again next
week.

