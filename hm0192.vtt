WEBVTT FILE

1
00:00:12.060 --> 00:00:17.670
From Hansel minutes.com there's Hansel
minutes, a weekly discussion with

2
00:00:17.670 --> 00:00:22.170
web developer and technologist is
Scott Hanselman. This is Lawrence Ryan

3
00:00:22.230 --> 00:00:28.740
announcing show number one 92.
Recorded live Thursday, December 10th, 2009. Support

4
00:00:28.740 --> 00:00:32.310
for Hanselman it's just provided
by Tellerik rad controls, the

5
00:00:32.310 --> 00:00:35.880
most comprehensive suite of components
for windows forms and asp.net

6
00:00:35.880 --> 00:00:45.660
web applications online@wwwdottelrik.com. In this
episode, Scott talks with asp.net

7
00:00:45.660 --> 00:00:50.790
team member Lewis to Jarden.
Hi, this is Scott Hanselman,

8
00:00:50.790 --> 00:00:53.160
and this is another episode
of Hansel minutes and I'm

9
00:00:53.160 --> 00:00:57.060
here today on magical video
call with Lou to Jarden,

10
00:00:57.570 --> 00:00:59.280
or as I like to
think about him in my

11
00:00:59.280 --> 00:01:02.160
head, Louis Sharp, but I understand
that's not how your name

12
00:01:02.160 --> 00:01:06.270
is pronouncer and you're working
for the Microsoft now, but

13
00:01:06.720 --> 00:01:08.490
your claim to fame, at
least the claim to fame

14
00:01:08.490 --> 00:01:11.340
that I like to think
about you is the spark

15
00:01:11.460 --> 00:01:14.250
view engine. Can you tell
me a little about spark

16
00:01:14.250 --> 00:01:16.290
for the listeners who may
not be familiar with it?

17
00:01:17.660 --> 00:01:22.670
Sure. It's it's a view
engine was originally created as

18
00:01:22.850 --> 00:01:27.050
one of the high view
engine implementations for NBC when

19
00:01:27.050 --> 00:01:28.880
preview three, when it came
out is when it first

20
00:01:29.360 --> 00:01:34.580
was added and it's been
ported to monorail, and there's

21
00:01:34.580 --> 00:01:36.980
also a core DLL that
can be used kind of

22
00:01:36.980 --> 00:01:40.370
anywhere. It's just a templating
engine. Really. So it's a

23
00:01:40.370 --> 00:01:43.670
template again, it sounds like
you kind of kind of

24
00:01:43.700 --> 00:01:45.410
blow it off like, Oh,
it's just a templating engine,

25
00:01:45.410 --> 00:01:46.880
but it's just kind of
a big deal. I mean,

26
00:01:46.880 --> 00:01:50.000
you've when you write a
view engine or a templating

27
00:01:50.000 --> 00:01:53.420
engine, you're making kind of
a, a statement cause for

28
00:01:53.420 --> 00:01:56.260
the listeners who are not
familiar with asp.net, MVC of

29
00:01:56.260 --> 00:02:01.610
view engine really replaces the
angle bracket generator within asp.net

30
00:02:01.610 --> 00:02:06.110
itself and makes a declaration
that here's a better way

31
00:02:06.110 --> 00:02:09.410
to make HTML. Here's an,
a better DSL right now.

32
00:02:09.470 --> 00:02:14.600
It's a domain specific language
for generating a HTML. Is

33
00:02:14.600 --> 00:02:19.010
it not? Yeah, well HTML
is kind of a DSL

34
00:02:19.010 --> 00:02:22.040
itself and it's always kind
of a mess when you

35
00:02:22.040 --> 00:02:24.620
have two languages put together.
At least that's been my

36
00:02:24.620 --> 00:02:28.730
experience. And so we were
using N velocity for awhile

37
00:02:28.730 --> 00:02:32.570
and monorail on one project
and we noticed that the

38
00:02:32.570 --> 00:02:35.930
code didn't fight with HTML
as much, and the views

39
00:02:36.590 --> 00:02:40.580
ended up looking cleaner and
the, the HTML specialist, the

40
00:02:40.580 --> 00:02:43.520
designers really liked those effects
because it felt natural to

41
00:02:43.520 --> 00:02:46.520
them when they opened the
files. So in, in, you

42
00:02:46.520 --> 00:02:48.920
know, starting spark that a
lot of that experience carried

43
00:02:48.920 --> 00:02:51.560
into it to try to
make it look like HTML,

44
00:02:51.590 --> 00:02:54.970
even the things that were
code, You know, in, in

45
00:02:54.980 --> 00:02:58.400
NBC, by default, we get
the web forms view engine,

46
00:02:58.610 --> 00:03:00.730
which is there kind of
for a couple reasons, one

47
00:03:00.730 --> 00:03:06.010
it's it's default web forms
is what asp.net originally used.

48
00:03:06.010 --> 00:03:10.030
So your ASP X pages
are there because they're familiar.

49
00:03:10.810 --> 00:03:13.870
And then there are other
view engines that people swap

50
00:03:13.870 --> 00:03:17.110
in and out of MVC.
There's one called an AML,

51
00:03:17.800 --> 00:03:19.750
which is based on a,
on a Ruby view engine.

52
00:03:20.110 --> 00:03:23.290
Did you invent spark from
scratch? You just kind of

53
00:03:23.290 --> 00:03:25.240
sat down and said, I
wish that there was something

54
00:03:25.240 --> 00:03:28.540
that, that looked like this,
or was there an inspiration

55
00:03:28.540 --> 00:03:32.370
from some other view engine?
Actually, that was kind of

56
00:03:32.460 --> 00:03:35.490
the, the, the root of
it came from one of

57
00:03:35.490 --> 00:03:37.920
Phil hacks blog posts, and
there's a link to it

58
00:03:37.950 --> 00:03:42.060
on the spark engine.com site.
The origin of spark was

59
00:03:42.150 --> 00:03:45.120
a conversation threads that kind
of wound around how you

60
00:03:45.120 --> 00:03:48.470
would do a repeater in
different view engines. And it

61
00:03:48.480 --> 00:03:52.110
kind of turned into a
aesthetic discussion and somebody sort

62
00:03:52.110 --> 00:03:53.790
of had like a leading
question was if you were

63
00:03:53.790 --> 00:03:57.150
gonna just from scratch, don't
worry about like what HBX

64
00:03:57.150 --> 00:04:00.270
looks like or what, what
and philosophy looks like, what

65
00:04:00.270 --> 00:04:01.650
would you look like? You
know, what would you want

66
00:04:01.650 --> 00:04:04.020
it to look like? And
some, my reply was you

67
00:04:04.020 --> 00:04:06.480
want, I want a four
element within each attribute, you

68
00:04:06.480 --> 00:04:09.450
know, cause then, you know,
it'll lay out an XML

69
00:04:09.450 --> 00:04:11.940
and there'll be all those
kinds of things. So from

70
00:04:11.940 --> 00:04:13.650
that sense, it was, it
was, you know, it's all

71
00:04:13.650 --> 00:04:17.610
from scratch, but it borrows
from concepts from her mother,

72
00:04:18.690 --> 00:04:22.320
you engines. And that's really
the fundamental premise is it

73
00:04:22.320 --> 00:04:26.670
should all look like one
language, one DSL. And one

74
00:04:26.670 --> 00:04:29.310
of the things about the
web forums view engine, of

75
00:04:29.310 --> 00:04:32.790
course, since it's, it's using
the web forms processor, even

76
00:04:32.790 --> 00:04:36.360
though there's no post-bac model
in web forms, you've got

77
00:04:37.290 --> 00:04:40.230
the notion of a code
block. So you're constantly switching

78
00:04:40.260 --> 00:04:43.560
contexts, you're in a code
block with an angle bracket

79
00:04:43.560 --> 00:04:46.200
percent, and then you're in
doing some HTML and you

80
00:04:46.200 --> 00:04:50.460
kind of hop back and
forth spark is, I don't

81
00:04:50.460 --> 00:04:54.180
know, I wouldn't say confusing
initially, but it's definitely dramatic

82
00:04:54.450 --> 00:04:56.700
in that. Like for example,
if you were going to

83
00:04:56.700 --> 00:05:00.720
do a, a list of,
of allies, right. Of list

84
00:05:00.720 --> 00:05:04.050
items, you'd say open bracket
L I, and then there's

85
00:05:04.050 --> 00:05:08.940
actually an each attribute on
the, on that element. So

86
00:05:08.940 --> 00:05:11.910
you'd say L I space
each equals and then you'd

87
00:05:11.910 --> 00:05:16.170
have some code, but there
isn't really that obvious context

88
00:05:16.170 --> 00:05:20.520
switching is. So help me
understand this, that there isn't

89
00:05:20.520 --> 00:05:24.420
really an each attribute on
a list item in HTML.

90
00:05:25.500 --> 00:05:29.040
Am I writing HTML or
am I writing spark? Well,

91
00:05:29.340 --> 00:05:34.050
the, each attribute is an
example of like a successive

92
00:05:34.050 --> 00:05:37.590
or iterative reduction in the
amount of things that you

93
00:05:37.590 --> 00:05:40.320
have to type spark does
allow you to escape code

94
00:05:40.380 --> 00:05:43.740
just like you can in
a SPX. It does understand

95
00:05:43.740 --> 00:05:47.250
the less than percent index
as well. So you can

96
00:05:47.250 --> 00:05:49.920
do C sharp, you know,
for each are X and

97
00:05:49.920 --> 00:05:55.170
Y you know, open curly
brace. The four element within

98
00:05:55.170 --> 00:05:58.610
each attribute is, is going
to generate that same line.

99
00:05:59.870 --> 00:06:02.900
And you can wrap it
around a HTML so that

100
00:06:02.900 --> 00:06:07.310
it looks like it's well
formed. And using that the,

101
00:06:07.310 --> 00:06:10.130
the, the idea of just
taking the, each attribute and

102
00:06:10.130 --> 00:06:13.760
putting it on the, the
element inside of there was

103
00:06:13.760 --> 00:06:17.240
just something that kind of
seemed intuitive after writing a

104
00:06:17.240 --> 00:06:19.640
couple of these for each
things, even though even four

105
00:06:19.640 --> 00:06:23.690
elements seem to kind of
redundant because, you know, 70%

106
00:06:23.690 --> 00:06:26.480
of the time you were
repeating a particular tag and

107
00:06:26.510 --> 00:06:29.210
the tag had to close.
And so when you put

108
00:06:29.210 --> 00:06:32.660
the, each attribute on there
really it's, it's, it's adding

109
00:06:32.660 --> 00:06:36.680
the silent four in the
background, in the compiler that

110
00:06:36.680 --> 00:06:40.430
just takes these special attributes
and creates the invisible for

111
00:06:40.430 --> 00:06:44.170
'em around it. But you
can put a four, there

112
00:06:44.170 --> 00:06:46.600
is a four attribute though,
right? If one wanted one,

113
00:06:47.620 --> 00:06:50.410
Oh yeah, there's a four
there's four elements within each

114
00:06:50.410 --> 00:06:53.980
attribute. And you can put
the, each attribute on any

115
00:06:54.550 --> 00:06:57.340
element really. And it'll sort
of be taken off of

116
00:06:57.340 --> 00:07:00.850
that element. And to four
will be put around the,

117
00:07:01.120 --> 00:07:03.730
the, the element that the
each was on. So there's

118
00:07:03.730 --> 00:07:07.060
a couple of, so there's
is within the templating. There's

119
00:07:07.060 --> 00:07:09.220
only a couple of things
that are really, you know,

120
00:07:09.280 --> 00:07:11.650
a flow control for the
views. There's like a, if

121
00:07:12.040 --> 00:07:17.380
in each there's also a
once, which, which is something

122
00:07:17.380 --> 00:07:21.580
you can add in order
to say, do you duplicate

123
00:07:21.970 --> 00:07:24.160
script source? If you're, if
you're building up a header

124
00:07:24.160 --> 00:07:28.210
area, you can say once
jQuery and jQuery is kind

125
00:07:28.210 --> 00:07:30.130
of like a symbol, so
that if that appears several

126
00:07:30.130 --> 00:07:34.000
times over the place, only
the first time that element

127
00:07:34.000 --> 00:07:36.040
will be used the rest
of the time, they'll just

128
00:07:36.040 --> 00:07:42.610
be skipped. Interesting. Now spark
was created when the, the

129
00:07:42.610 --> 00:07:45.970
idioms, the kind of common
idioms for HTML already existed.

130
00:07:45.970 --> 00:07:50.140
So things like doing an
alternating row, like, you know,

131
00:07:50.180 --> 00:07:53.230
you're going to be switching
back and forth between two

132
00:07:53.230 --> 00:07:56.590
list items, having like, even
an odd CSS classes or

133
00:07:56.590 --> 00:08:00.700
having a grid of information,
those things, those kinds of

134
00:08:00.700 --> 00:08:02.620
things that we saw when
we look at a user

135
00:08:02.620 --> 00:08:06.100
interface didn't really exist when
I, that originally started, are

136
00:08:06.100 --> 00:08:10.000
there things within spark that
are set up, like, you

137
00:08:10.000 --> 00:08:12.460
know, idioms language, idioms that
are set up to make

138
00:08:12.460 --> 00:08:16.780
it output these common kinds
of HTML easier than, than

139
00:08:16.780 --> 00:08:20.440
other view engines, Right? Yeah.
And that's probably one of

140
00:08:20.440 --> 00:08:23.200
the things that kind of
drive spark design more than

141
00:08:23.200 --> 00:08:27.790
anything is in the context
of, you know, creating, you

142
00:08:27.790 --> 00:08:31.570
know, website with hundreds of,
of views. You see those

143
00:08:31.570 --> 00:08:33.760
kinds of things that you
do over and over and,

144
00:08:34.210 --> 00:08:38.410
and require too much code.
So you, that's kind of

145
00:08:38.410 --> 00:08:40.900
what drives the features in,
in the, in the looping

146
00:08:40.900 --> 00:08:44.050
example when there is a
loop. So you're like for

147
00:08:44.710 --> 00:08:49.830
who in, if you want
to take advantage of some,

148
00:08:49.840 --> 00:08:53.260
the automatic variables that are
generated, you can refer to

149
00:08:53.260 --> 00:08:58.140
fool index with the I,
or full count who is

150
00:08:58.140 --> 00:09:02.040
first, who is last, those
types of things. And if

151
00:09:02.040 --> 00:09:06.210
you refer to those who
generate the kind of boiler

152
00:09:06.210 --> 00:09:10.980
plate, you know, bullions and
integers within the four loop,

153
00:09:11.430 --> 00:09:14.700
you know, as Chrome around
that, around that iteration. So

154
00:09:14.700 --> 00:09:18.180
that it's just D removing
some of the code that

155
00:09:18.810 --> 00:09:21.330
you would have had to
type in context every time

156
00:09:21.330 --> 00:09:25.470
you wanted to get an
account or his first or

157
00:09:25.470 --> 00:09:28.320
his last. So you can,
you can do an alternating

158
00:09:28.320 --> 00:09:33.120
role by putting, you know,
just your class equals and

159
00:09:33.120 --> 00:09:36.330
then quote, and then all
or whatever your class name

160
00:09:36.330 --> 00:09:39.570
is. And then, and then
make that condition a lot

161
00:09:40.710 --> 00:09:46.080
who index mod to yeah.
And another optimization beyond that

162
00:09:46.080 --> 00:09:50.820
is like, who is even
food is odd as additional

163
00:09:51.120 --> 00:09:53.970
auto variables, but it's been
requested if it hasn't been

164
00:09:53.970 --> 00:09:57.560
added yet. Now sometimes when
I, when I, when I

165
00:09:57.560 --> 00:09:59.510
see, I don't know, we're
talking about code on a,

166
00:09:59.510 --> 00:10:01.910
on an audio podcast, which
is always funny. We'll have

167
00:10:01.910 --> 00:10:03.890
to have you maybe on
dotnet rocks, TV, or something

168
00:10:03.890 --> 00:10:06.140
to show us how to,
how to do this. I'm

169
00:10:06.140 --> 00:10:09.170
kind of more interested in
the language design, because it

170
00:10:09.200 --> 00:10:11.690
was this, I mean, if
you designed a language before,

171
00:10:11.690 --> 00:10:13.880
I mean, it's kind of
an amazing story that you

172
00:10:13.880 --> 00:10:16.400
were on Phil's blog and
you guys were kicking stuff

173
00:10:16.430 --> 00:10:18.680
around, and then you said,
gosh, you know, what would

174
00:10:18.680 --> 00:10:20.570
it be like if such
and such a thing existed?

175
00:10:21.320 --> 00:10:22.820
And then you actually went
off and did it, I

176
00:10:22.820 --> 00:10:25.040
mean, there's so many things
in open source where someone's

177
00:10:25.460 --> 00:10:27.920
talks about doing something, but
to actually go and do

178
00:10:27.920 --> 00:10:32.720
it. It's just kind of,
it's, it's nice. It's refreshing

179
00:10:32.720 --> 00:10:35.750
when someone actually, you know,
talk is cheap, show me

180
00:10:35.750 --> 00:10:39.740
the code. Did you sit
down and design the language?

181
00:10:39.740 --> 00:10:43.910
Had you designed parsers and
lectures and stuff before? Oh,

182
00:10:44.750 --> 00:10:47.210
well, and the thing is,
is to just go from

183
00:10:47.210 --> 00:10:49.430
a blog post and sit
down and think to yourself,

184
00:10:49.430 --> 00:10:52.680
I'm going to create a
production ready view engine that

185
00:10:52.860 --> 00:10:56.660
anybody can use is insane.
You, you know, you'd never

186
00:10:56.660 --> 00:10:58.220
get to the end of
it. You'd never get to

187
00:10:58.220 --> 00:11:01.650
beyond the design phase. So
it really started as like,

188
00:11:03.530 --> 00:11:06.710
and the blog post, I,
I was just putting together

189
00:11:06.710 --> 00:11:11.150
a small, you know, you
engine sample as, as kind

190
00:11:11.150 --> 00:11:13.880
of a, you know, a
code form of what I

191
00:11:13.880 --> 00:11:18.050
was saying is an illustration.
Like, here's how that would

192
00:11:18.050 --> 00:11:22.310
really work and just like
totally language. And it's kind

193
00:11:22.310 --> 00:11:24.800
of, you know, just one
feature at a time release,

194
00:11:24.800 --> 00:11:26.810
like, Oh, and then, you
know, you can declare a

195
00:11:26.810 --> 00:11:28.940
view data in a strongly
type fashion if you just

196
00:11:28.940 --> 00:11:31.520
did this and Oh yeah,
this is, this would be

197
00:11:31.520 --> 00:11:35.150
nice, but it loops also.
So it kind of turned

198
00:11:35.150 --> 00:11:38.090
into a real view engine,
you know, incrementally a little

199
00:11:38.090 --> 00:11:41.030
bit by bit, but yeah,
I've been, I've been working

200
00:11:41.030 --> 00:11:45.380
on code for like, I
don't know, like raping, when

201
00:11:45.380 --> 00:11:47.690
you think more than a
decade, 15 years, something like

202
00:11:47.690 --> 00:11:50.750
that, you're bumping into these
kinds of problems all the

203
00:11:50.750 --> 00:11:55.720
time, you know, just different,
different little parsing. There was,

204
00:11:55.720 --> 00:11:57.430
there was a, there was,
there was one time there

205
00:11:57.430 --> 00:12:01.950
was user interface that was
created as contracting job, which,

206
00:12:01.950 --> 00:12:04.930
which involves, you know, a
company's own ESL. They had

207
00:12:04.930 --> 00:12:08.920
a batch processing software. So
yeah, there's, you know, there's,

208
00:12:08.920 --> 00:12:10.870
there's little bits and pieces
of experience you have in

209
00:12:10.870 --> 00:12:14.890
the past from creating parsers
and, and, you know, breaking

210
00:12:14.890 --> 00:12:18.420
down language. Now, all of
this is open source. So

211
00:12:18.420 --> 00:12:20.790
people can go and look
at how you structured this.

212
00:12:21.240 --> 00:12:23.190
But I think that some
of the, and correct me

213
00:12:23.190 --> 00:12:24.360
if I'm wrong, but I
think some of the really

214
00:12:24.360 --> 00:12:28.440
interesting design things that, that
may not be immediately obvious

215
00:12:28.440 --> 00:12:31.830
to the average user of
MVC is that this is

216
00:12:31.830 --> 00:12:37.110
a complete engine in itself.
You're not using asp.net web

217
00:12:37.110 --> 00:12:39.810
forms or any of the
asp.net things that we know

218
00:12:39.810 --> 00:12:41.430
of to do the parsing.
I mean, you have your

219
00:12:41.430 --> 00:12:44.280
own parsing. And the, one
of the things I think

220
00:12:44.280 --> 00:12:47.940
is significant is that in
web forms, proper and actual

221
00:12:47.940 --> 00:12:50.820
web forms, of course, we've
got the post-bac model and

222
00:12:50.820 --> 00:12:53.070
we've got view state and
all these kinds of things,

223
00:12:53.550 --> 00:12:56.820
but in the web forms
view engine and NVC, there

224
00:12:56.820 --> 00:12:59.820
is still the parsing and
creation of a control tree.

225
00:13:00.420 --> 00:13:04.260
And then the rendering of
that control tree. And that

226
00:13:04.260 --> 00:13:08.370
still happens in MVC, but
in spark, that doesn't, is

227
00:13:08.370 --> 00:13:13.710
that correct? Right. Right. Art
parsing, actually the parsing isn't

228
00:13:13.710 --> 00:13:16.890
deep in using an XML
Dom, it's just using the

229
00:13:16.890 --> 00:13:20.880
XML grammar who recognize parts,
but that grammar is implemented

230
00:13:20.880 --> 00:13:24.240
in its own set of
own set of, you know,

231
00:13:24.240 --> 00:13:29.130
grammar statements. The code that's
generated is a single class,

232
00:13:30.090 --> 00:13:34.380
and it's kind of, it's
very minimalistic, very, it's very,

233
00:13:34.470 --> 00:13:38.340
you know, deconstructs. The whole
problem down to a view

234
00:13:38.400 --> 00:13:42.270
turned into a class that
has an output property as

235
00:13:42.270 --> 00:13:47.610
a text writer. And all
of this stuff gets perished,

236
00:13:47.820 --> 00:13:51.990
transformed, mutilated a little bit
and just generates write statements.

237
00:13:52.860 --> 00:13:54.870
So it's all a bunch
of output rights statements. And,

238
00:13:56.070 --> 00:13:57.630
you know, and then the
code of the four loops

239
00:13:57.630 --> 00:14:01.740
and the little evils are
mixed in there too. So

240
00:14:01.740 --> 00:14:05.520
it turns into a single
class that's instantiated and kind

241
00:14:05.520 --> 00:14:08.490
of a single method that
has all of the output

242
00:14:08.490 --> 00:14:13.020
statements and, you know, flow
control sort of went into

243
00:14:13.020 --> 00:14:16.800
it. Hey everybody, this is
Scott coming at you from

244
00:14:16.800 --> 00:14:19.470
another place in time. No
doubt. You probably bumped into

245
00:14:19.470 --> 00:14:22.410
testing tasks now, and then,
and your work and, you

246
00:14:22.410 --> 00:14:24.900
know, writing functional tests is
probably not your favorite thing.

247
00:14:24.900 --> 00:14:26.970
It's kind of difficult. It
takes time and the results

248
00:14:26.970 --> 00:14:29.910
can be dubious. Well, get
ready to start liking tests.

249
00:14:30.120 --> 00:14:33.870
Thanks to Tellerik with the,
the new webinar testing framework.

250
00:14:34.020 --> 00:14:37.200
Building web automation test is
a breeze. You've got code

251
00:14:37.200 --> 00:14:40.530
automation with advanced asp.net Ajax
and server light applications. You

252
00:14:40.530 --> 00:14:43.560
can write a single test,
have it executed against multiple

253
00:14:43.560 --> 00:14:46.710
browsers at once. You'd benefit
from a rich API there's

254
00:14:46.710 --> 00:14:50.250
link support integration with visual
studio unit testing, also end

255
00:14:50.250 --> 00:14:53.810
unit X and MB unit,
not to mention the free

256
00:14:53.810 --> 00:14:56.810
rappers for Telerik rad controls
for ESPN, that Ajax and

257
00:14:56.810 --> 00:15:00.890
several light, all shipping with
Telerik's new testing tool. One

258
00:15:00.890 --> 00:15:03.710
of the best features, the
webinar testing framework, which is

259
00:15:03.710 --> 00:15:07.520
developed by art of test
is it's absolutely free. You've

260
00:15:07.520 --> 00:15:10.220
already got hooked on web
by testing framework, start using

261
00:15:10.220 --> 00:15:13.760
it right away, go to
tellerik.com for more info. Thanks

262
00:15:13.760 --> 00:15:16.670
a lot. Okay. So let
me see if I understand

263
00:15:16.670 --> 00:15:20.150
this. So you, you do
custom parsing. I, I assume

264
00:15:20.150 --> 00:15:23.510
there's a regular expression in
there somewhere, right? You're you're

265
00:15:23.510 --> 00:15:27.830
parsing the text internally. Do
you create an, an abstract

266
00:15:27.830 --> 00:15:29.780
syntax tree of some kind,
or is this a straight

267
00:15:29.780 --> 00:15:35.180
transformation to, from your kind
of quasi HTML syntax into

268
00:15:35.180 --> 00:15:39.230
a bunch of calls to
text writer and right line?

269
00:15:40.450 --> 00:15:44.380
Yeah, it goes through two
stages. It goes through the

270
00:15:44.380 --> 00:15:46.900
grammar that breaks it into
things that are a sort

271
00:15:46.900 --> 00:15:50.980
of a node representation. So
in that sense it's classes

272
00:15:51.010 --> 00:15:54.520
that are, that are, you
know, start and end tags

273
00:15:55.150 --> 00:15:58.210
attributes, those kinds of things.
So it's very node like,

274
00:15:58.360 --> 00:16:01.000
and then there's some processing
that goes on with, you

275
00:16:01.000 --> 00:16:04.420
know, a visitor pattern where
that's the stage where like

276
00:16:04.420 --> 00:16:09.010
the, each attributes kind of
are pulled out and become,

277
00:16:10.180 --> 00:16:13.840
you know, sort of implied
for node around there. So

278
00:16:13.840 --> 00:16:17.080
there's some manipulation that occurs
at that level. Those nodes

279
00:16:17.080 --> 00:16:20.200
are then turned into trunks.
So the last stage of

280
00:16:20.200 --> 00:16:24.250
node processing builds arrays of
chunks, and those are more

281
00:16:24.250 --> 00:16:28.210
code like, so those would
be where there's a, a

282
00:16:28.300 --> 00:16:33.040
loop chunk or an output
writing trunk or a literal,

283
00:16:33.160 --> 00:16:38.080
you know, HTML text that
passed through writing trunk. So

284
00:16:38.140 --> 00:16:40.870
that's more code like representation.
There's a little bit of

285
00:16:40.870 --> 00:16:43.390
processing that occurs there, but
not much. And then it

286
00:16:43.390 --> 00:16:45.910
basically goes through each of
those trunks and, and another

287
00:16:45.910 --> 00:16:49.240
visitor kind of turns into
Dakota. It turns them into

288
00:16:49.240 --> 00:16:52.600
a node representation. They're mutilated
a little bit, change them

289
00:16:52.600 --> 00:16:55.750
into a chunk representation a
little bit in one last

290
00:16:55.750 --> 00:16:58.030
chance to make any changes.
And then they go right

291
00:16:58.030 --> 00:17:00.610
out to a, a language
and the, the chunks can

292
00:17:00.610 --> 00:17:03.520
actually go out to a
couple of different languages. That's

293
00:17:03.850 --> 00:17:06.400
the somebody requested once, if
there was any client side

294
00:17:06.400 --> 00:17:09.070
rendering of spark, and it
was pretty easy to do

295
00:17:09.070 --> 00:17:13.210
just by making a different
chunk visitor that would write

296
00:17:13.210 --> 00:17:16.090
out Java script instead of
C sharp. So, so I'm

297
00:17:16.090 --> 00:17:18.070
not sure I don't quite
understand. What do you mean

298
00:17:19.510 --> 00:17:22.210
a client side representation? You're
saying that you can write

299
00:17:22.210 --> 00:17:27.340
spark and have spark generate
JavaScript. Yes. Yeah. Just like

300
00:17:27.350 --> 00:17:29.440
you can create a C
sharp and compile it and

301
00:17:29.920 --> 00:17:32.860
initiate it for server side
execution. You can go to

302
00:17:32.860 --> 00:17:35.380
a smart template and say,
turn this into Java script

303
00:17:35.380 --> 00:17:40.600
and it'll parse and transform
and generate JavaScript, which is,

304
00:17:40.630 --> 00:17:42.130
you know, a bunch of
the same things, you know,

305
00:17:42.130 --> 00:17:45.580
rights and groups and stuff
like that. So you can

306
00:17:45.580 --> 00:17:48.730
get that Java script to
the client as a script

307
00:17:48.730 --> 00:17:51.510
source. And it essentially is
a function that you can

308
00:17:51.510 --> 00:17:54.810
call and pass it a
Jason object or a DataBank

309
00:17:54.810 --> 00:17:59.040
contract. And it a return,
a string of that view.

310
00:17:59.760 --> 00:18:03.860
Having turned that object into
HTML Now is that, is

311
00:18:03.860 --> 00:18:05.540
that an a, maybe I'm
getting off in the weeds

312
00:18:05.540 --> 00:18:07.430
a little bit here, but
is that an obscure and

313
00:18:07.430 --> 00:18:09.260
interesting thing you did for
one guy, or is that

314
00:18:09.260 --> 00:18:13.730
something that everyone would care
about? Well, that was something

315
00:18:13.960 --> 00:18:16.340
that somebody asked about and,
and, and, and it seemed

316
00:18:16.340 --> 00:18:19.010
interesting. And then, you know,
thinking about it, I thought

317
00:18:19.460 --> 00:18:24.380
it seemed doable. And then,
you know, so it, it

318
00:18:24.380 --> 00:18:27.350
only took like a day
on the weekend. So it's

319
00:18:27.350 --> 00:18:29.360
really, it was just going
through the chunks and saying,

320
00:18:29.360 --> 00:18:32.090
okay, this chunk writes out
literal, Oh, I know how

321
00:18:32.090 --> 00:18:34.640
to do that in JavaScript.
This is a loop that's

322
00:18:34.640 --> 00:18:36.320
doable. And so, you know,
just bit by bit, you

323
00:18:36.320 --> 00:18:40.040
know, when you implementing 12
different types of chunks, and

324
00:18:40.040 --> 00:18:46.930
then you've got a JavaScript
version of a Now when,

325
00:18:46.930 --> 00:18:49.670
when I sit down and
look at some, some, some

326
00:18:49.670 --> 00:18:52.550
open source thing, if I
decide to visit spark view

327
00:18:52.550 --> 00:18:56.690
engine.com and I say, Oh,
well, this is interesting, but

328
00:18:56.690 --> 00:18:59.390
it's such a fundamental thing.
It's such a personal thing.

329
00:18:59.420 --> 00:19:02.810
The choice of one's one's
view engine, especially when, when

330
00:19:02.810 --> 00:19:06.830
you've used web forms for
so very long, I would

331
00:19:06.830 --> 00:19:08.510
look at this and I'd
say, wow, this looks nice.

332
00:19:08.510 --> 00:19:12.680
It's a Polish site. Wow.
That's an interesting, that's an

333
00:19:12.680 --> 00:19:15.050
interesting syntax, but then I'd
say, you know, but I

334
00:19:15.050 --> 00:19:19.700
bet that if, if there's
like one misplaced space or,

335
00:19:19.760 --> 00:19:21.740
you know, I don't close
a tag, this thing is

336
00:19:21.740 --> 00:19:25.340
going to be impossible to
debug. And I don't know

337
00:19:25.340 --> 00:19:27.410
why I have that sense.
Maybe I've gotten burned by

338
00:19:27.410 --> 00:19:29.810
other open source applications where
someone tries to create their

339
00:19:29.810 --> 00:19:31.940
own language, but they don't
go kind of all the

340
00:19:31.940 --> 00:19:35.450
way, what kind of help
do I get? What kind

341
00:19:35.450 --> 00:19:37.820
of debugging do I get,
especially with cogeneration, you know,

342
00:19:37.820 --> 00:19:41.090
if there's a, if there's
a misplaced curly brace, what

343
00:19:41.090 --> 00:19:46.370
kind of chaos happens? Yeah.
Well, as, you know, as

344
00:19:46.430 --> 00:19:52.160
with all things, the visual
studio integration is, is not,

345
00:19:52.160 --> 00:19:55.640
and probably never will be
as refined as, as the,

346
00:19:56.300 --> 00:20:01.070
as you know, the default
views, but in order for

347
00:20:01.070 --> 00:20:03.830
it to be as convenient
as possible. And again, it's

348
00:20:03.830 --> 00:20:05.270
not a, you know, it's
not a, it's not a

349
00:20:05.270 --> 00:20:09.410
theoretical view engine it's, it's
created in the, you know,

350
00:20:09.410 --> 00:20:12.650
the crucible of creating an
application with lots of people

351
00:20:12.650 --> 00:20:14.840
at the same time. So
those kinds of pains would

352
00:20:14.840 --> 00:20:19.010
be felt immediately by everybody.
So one of the things

353
00:20:19.010 --> 00:20:21.170
it does is when there's
an exception or a problem

354
00:20:21.170 --> 00:20:26.180
from compiling, it throws the
entire, you know, generated code

355
00:20:26.180 --> 00:20:30.050
back I do is the
exception message. Get your yellow

356
00:20:30.050 --> 00:20:33.620
screen of death is huge,
but it pretty much says,

357
00:20:33.890 --> 00:20:35.900
okay, here in the view
is something I didn't understand.

358
00:20:35.900 --> 00:20:38.540
Or I got a compiler
error on, you know, line

359
00:20:38.630 --> 00:20:41.990
85 and line 32, you
know, not in that order,

360
00:20:42.320 --> 00:20:44.930
but then, you know, scroll
down through the yellow screen

361
00:20:44.930 --> 00:20:49.870
for lying 85. And it's
like, Oh yeah. So you

362
00:20:49.870 --> 00:20:52.600
don't even try to hide
the, the, the underlying generated

363
00:20:52.600 --> 00:20:54.610
code and tell them something
friendly and then map it

364
00:20:54.610 --> 00:20:57.130
back to the line of
spark. You just say, well,

365
00:20:57.190 --> 00:21:00.360
here's what happened. Well, there's,
there's something kind of frenzy

366
00:21:00.360 --> 00:21:03.270
at the top because it's,
that type of era happens

367
00:21:03.270 --> 00:21:05.220
when, you know, the code
is generated and it's thrown

368
00:21:05.220 --> 00:21:08.160
to the C sharp code
down to compile, it'll come

369
00:21:08.160 --> 00:21:10.110
back with an array of
errors, the same that, you

370
00:21:10.110 --> 00:21:13.860
know, your buildup. So you'll
have those errors at the

371
00:21:13.860 --> 00:21:17.520
top. And then pretty much
the source that was generated

372
00:21:17.520 --> 00:21:21.800
is shown to you just
so that, you know, there's

373
00:21:21.810 --> 00:21:24.240
no other way to get
somebody so that they can

374
00:21:24.240 --> 00:21:27.420
see, you know, the context
of what really happened when,

375
00:21:28.080 --> 00:21:34.500
you know, the compiler failed
beyond that. There's what else

376
00:21:34.500 --> 00:21:38.340
is there? Oh, the C-sharp
has a couple of pragmatists

377
00:21:38.340 --> 00:21:42.150
where you can say the
source line number and file

378
00:21:42.150 --> 00:21:48.780
path from code. So spark
does include those also in

379
00:21:48.780 --> 00:21:52.350
the generated code. When you
say line numbers, you mean

380
00:21:52.350 --> 00:21:54.390
line numbers of the source.
So I might be online

381
00:21:54.390 --> 00:21:57.360
100 of the generated stuff,
and then you would have

382
00:21:57.360 --> 00:22:00.600
a pound Pragma that says
I'm a really online 50,

383
00:22:01.500 --> 00:22:03.930
Right, right. Right. So in,
in the, in the generated

384
00:22:03.930 --> 00:22:06.420
file is very large, but
there'll be a fragment that

385
00:22:06.420 --> 00:22:10.650
says, this is on, you
know, C colon projects slash

386
00:22:10.770 --> 00:22:16.320
something, lash something that's merch
line. So the line of

387
00:22:16.320 --> 00:22:21.890
code that's generated refers to
the original view. And, and

388
00:22:22.500 --> 00:22:24.150
it's, you know, it's one
of those things it's kind

389
00:22:24.150 --> 00:22:27.090
of amazing to see work.
Cause it wasn't that much

390
00:22:27.090 --> 00:22:30.600
work to put those lines
in. But what happens is

391
00:22:31.050 --> 00:22:34.130
a spark view is compiled
into an assembly that has

392
00:22:34.140 --> 00:22:38.220
debug symbols pointing to the
original view. So when an

393
00:22:38.220 --> 00:22:42.080
exception fires at runtime, it'll,
it'll bring up as far

394
00:22:42.080 --> 00:22:45.000
as you file. And, and
it'll highlight that line as

395
00:22:45.000 --> 00:22:48.000
if that's where the code
came from. And you can

396
00:22:48.000 --> 00:22:51.300
even single step and look
at the local variables because

397
00:22:51.980 --> 00:22:57.570
the debugger thinks you're debugging.
That generated file. So it

398
00:22:57.570 --> 00:23:00.000
knows all the local variables
in that function and your

399
00:23:00.000 --> 00:23:05.910
context, but the file you're
looking at, it's showing you

400
00:23:05.910 --> 00:23:09.270
essentially a different file because
ebook symbols lied and said,

401
00:23:09.300 --> 00:23:12.330
okay, well, I'm at this
symbolic break point when I'm

402
00:23:12.330 --> 00:23:15.270
at this break point, show
this file at this spot.

403
00:23:16.290 --> 00:23:19.680
It's, it's, it's kinda weird,
but yeah, you can set

404
00:23:19.680 --> 00:23:21.150
break points and you can
step through code and you

405
00:23:21.150 --> 00:23:24.030
can look at variables when
you're in a dot spark

406
00:23:24.030 --> 00:23:26.610
file And you didn't have
to do a lot of

407
00:23:26.610 --> 00:23:28.890
work for that at all.
It's just basically visual studio

408
00:23:28.890 --> 00:23:30.720
expects that people will want
to do this at some

409
00:23:30.720 --> 00:23:35.010
point. So, Oh yeah, yeah.
Yeah. The way that visual

410
00:23:35.010 --> 00:23:38.880
studio is set up with
X files is that they

411
00:23:38.880 --> 00:23:41.280
already have the idea of
C sharp as a contained

412
00:23:41.280 --> 00:23:44.640
language, that type of thing.
So there was a lot

413
00:23:44.640 --> 00:23:48.650
of stuff done in visual
studio to make debugging when

414
00:23:48.650 --> 00:23:52.250
forms work and spark is
just kind of taking advantage

415
00:23:52.250 --> 00:23:55.570
of that work when web
form is generated files later,

416
00:23:55.590 --> 00:23:57.560
the same thing they put
that sort of like, well

417
00:23:57.560 --> 00:24:01.340
here's code, but this line
is really that one in

418
00:24:01.340 --> 00:24:03.920
that other file. So when,
when you're single stepping show

419
00:24:03.920 --> 00:24:05.930
that one, so you can
step through an ASP X

420
00:24:05.930 --> 00:24:09.020
patient spark cause you're taking
advantage of that mechanism in

421
00:24:09.020 --> 00:24:11.830
the same way. That's interesting.
Cause I was trying to

422
00:24:11.830 --> 00:24:15.460
get my head around whether
spark was truly trying to

423
00:24:15.460 --> 00:24:19.300
be a law was truly
a language. And you, you

424
00:24:19.300 --> 00:24:22.360
did kind of, you know,
Lex and yak type stuff

425
00:24:22.360 --> 00:24:24.310
like we did in college
to create its own language.

426
00:24:24.310 --> 00:24:27.160
Or this is really a
transformation. It seems like it's

427
00:24:27.160 --> 00:24:30.490
more of a DSL in
the, in the, the transforms

428
00:24:30.490 --> 00:24:32.530
into something else. And then
you get to take advantage

429
00:24:32.530 --> 00:24:36.970
of a lot of the
language capabilities that are available

430
00:24:36.970 --> 00:24:40.930
to you kind of from
the, from the ambient asp.net

431
00:24:40.930 --> 00:24:45.160
engine, you don't even have
to really look at at

432
00:24:45.160 --> 00:24:50.530
your code blocks. Do you
No. Look at your code

433
00:24:50.530 --> 00:24:53.800
blocks. Like, like for example,
if I say something like

434
00:24:54.730 --> 00:25:00.160
in spark, like, you know,
VAR classes equals new array,

435
00:25:00.160 --> 00:25:02.440
something, something, something, are you
parsing that whole thing out

436
00:25:02.440 --> 00:25:07.150
or do you just see
the VAR classes element and

437
00:25:07.150 --> 00:25:10.590
attribute and then just transform
it into some C-sharp if

438
00:25:10.590 --> 00:25:13.870
I understand how much do
you actually actually think about

439
00:25:13.900 --> 00:25:19.150
the contents, the code itself
versus just pass it along

440
00:25:19.150 --> 00:25:24.610
and transform it into C
sharp It's 99% just passing

441
00:25:24.610 --> 00:25:27.340
it along. I'm not, I'm
not trying to minimize your

442
00:25:27.340 --> 00:25:30.520
work or something. Actually. I'm
just thinking about how much

443
00:25:30.520 --> 00:25:32.770
was given to us. So
if someone were to try

444
00:25:32.770 --> 00:25:36.430
to do something like this
themselves, how scary is this?

445
00:25:37.390 --> 00:25:39.310
Oh yeah, no, no, I'll
be the first one to

446
00:25:39.310 --> 00:25:41.080
minimize it. Really, it is
a partial and a code

447
00:25:41.080 --> 00:25:45.160
generator. It's not a compiler
it's using the code down

448
00:25:45.160 --> 00:25:50.590
from C-sharp and it is
not a execution engine or

449
00:25:50.590 --> 00:25:53.500
a, or an evaluation engine
or, or an interpreter or

450
00:25:53.500 --> 00:25:58.420
anything like that. It's that,
that entire problem domain passes

451
00:25:58.420 --> 00:26:00.040
right through spark in his
hand it over to the

452
00:26:00.040 --> 00:26:02.410
C sharp language, which is,
which is one of the

453
00:26:02.410 --> 00:26:05.140
things that, you know, from
the end last city monorail

454
00:26:05.140 --> 00:26:09.670
background, they had an interpreter
and, and a little language

455
00:26:09.670 --> 00:26:12.790
for, you know, variable outputs
and, and evaluation. That was

456
00:26:12.790 --> 00:26:15.460
reflection based. And it was
a lot like C-sharp, but

457
00:26:15.460 --> 00:26:20.170
not exactly. So, so like
gray access, for example, you

458
00:26:20.170 --> 00:26:22.840
couldn't use the square brace
and there were little things

459
00:26:22.840 --> 00:26:25.780
like that, that every, so
often you had a model

460
00:26:25.780 --> 00:26:27.340
that you were trying to
show a property or something

461
00:26:27.340 --> 00:26:30.700
on that you couldn't quite
do it just, just with

462
00:26:30.700 --> 00:26:33.190
something that looks like C
sharp. So that was one

463
00:26:33.190 --> 00:26:36.490
of the reasons to kind
of try to just let

464
00:26:36.490 --> 00:26:38.620
that whole problem domain fly
right through and not worry

465
00:26:38.620 --> 00:26:42.090
about it because then you
get 100% C-sharp, you know,

466
00:26:42.090 --> 00:26:47.190
like every feature C even
the link statements on enumerators,

467
00:26:47.190 --> 00:26:50.460
you can do those in
a, for each extension methods.

468
00:26:51.270 --> 00:26:54.390
Every, everything is just kind
of delegated to that, to

469
00:26:54.390 --> 00:26:57.830
that existing system. Well, that's
actually kind of funny because

470
00:26:57.830 --> 00:27:01.280
it lets you take a
credit for the language of

471
00:27:01.280 --> 00:27:04.250
neat that makes spark look
great. Right? Because these little

472
00:27:04.250 --> 00:27:07.670
snippets get passed on to
a T to C sharp,

473
00:27:07.670 --> 00:27:09.530
but it makes spark look
that much more full featured.

474
00:27:09.530 --> 00:27:12.500
So you're standing on the
shoulders of giants. Oh yeah,

475
00:27:12.560 --> 00:27:20.540
yeah, exactly. Yeah. Just writes
code. Now, one of the

476
00:27:20.540 --> 00:27:22.490
things I wanted to add
a backup and then fork

477
00:27:22.490 --> 00:27:26.240
off of was the idea
that because you're not making

478
00:27:26.240 --> 00:27:32.840
an intermediate step of, of,
of control tree, we'll call

479
00:27:32.840 --> 00:27:37.130
it the, the classic asp.net
web forms way. I'm just

480
00:27:37.130 --> 00:27:38.930
going out on a limb
here and taking it, taking

481
00:27:38.930 --> 00:27:41.180
a chance. It, would it
be fair to say that

482
00:27:41.180 --> 00:27:45.110
spark either is or could
be faster just in the

483
00:27:45.110 --> 00:27:49.970
parsing and spitting out angle
brackets kind of things then

484
00:27:49.970 --> 00:27:57.820
the asp.net web forms engine
itself? Well, yes. And, and

485
00:27:57.830 --> 00:27:59.120
I think that the way
that you could look at

486
00:27:59.120 --> 00:28:03.350
that is that it's not
because scorecard is a class

487
00:28:03.530 --> 00:28:06.080
that's created and executed and
it's a single pass through

488
00:28:06.120 --> 00:28:10.880
a function. It's not necessarily
that it's faster that went

489
00:28:10.880 --> 00:28:13.970
forms is inefficient. It's just,
that is doing so little.

490
00:28:14.510 --> 00:28:19.010
It does almost nothing. That
is it's well, you know,

491
00:28:20.150 --> 00:28:22.250
it's not really possible for
it to be, you know,

492
00:28:22.250 --> 00:28:25.160
slower than anything other than,
you know, C plus plus

493
00:28:25.610 --> 00:28:27.860
code or something like that.
And even that might be,

494
00:28:27.860 --> 00:28:30.230
you know, kind of a
dead heat in some cases,

495
00:28:30.860 --> 00:28:33.470
but it's, it's really just,
you know, single functional. So,

496
00:28:33.840 --> 00:28:38.280
so in that sense, it's,
it's minimalistic the thing is,

497
00:28:38.280 --> 00:28:40.070
is that, you know, what
foreigns engines does is a

498
00:28:40.070 --> 00:28:44.630
lot more spark is very
specific to a particular problem

499
00:28:44.630 --> 00:28:48.950
of being a view in
an MVC structure. So the

500
00:28:48.950 --> 00:28:51.710
dealer's responsible for not very
much because of the separation

501
00:28:51.710 --> 00:28:55.430
of concerns that all you
really need is, you know,

502
00:28:55.430 --> 00:28:58.850
a single passenger function you
don't need to. Oh, well,

503
00:28:58.940 --> 00:29:00.410
No you're saying, you're saying,
I just want to back

504
00:29:00.410 --> 00:29:02.690
up to make sure that
the listeners understand you're saying

505
00:29:02.690 --> 00:29:06.530
single pass through function, as
opposed to you're saying that

506
00:29:06.530 --> 00:29:08.630
sparked us so little because
it's just, it's just dumping

507
00:29:08.630 --> 00:29:10.370
out a big function that
you call and it's calling

508
00:29:10.370 --> 00:29:14.210
text writer, right. Versus versus
web forms view engine that

509
00:29:14.210 --> 00:29:17.840
does what Well, you know,
spark, for example, doesn't have

510
00:29:17.840 --> 00:29:20.500
other cycle of the, of
the components that maintains it.

511
00:29:20.500 --> 00:29:23.990
It doesn't, it doesn't create
several different objects for separate

512
00:29:23.990 --> 00:29:28.070
different times, at least, and,
and walks them through the

513
00:29:28.070 --> 00:29:32.120
process of restoring their state
and, you know, rendering and

514
00:29:33.650 --> 00:29:36.530
recapturing and serializing space. All
of those types of things

515
00:29:36.770 --> 00:29:42.790
are outside of the problem
domain of, of MTC, as

516
00:29:42.790 --> 00:29:46.060
far as doesn't support server
controls. Basically it's got no

517
00:29:46.060 --> 00:29:49.660
ability to do that whatsoever,
but if you're okay with

518
00:29:49.660 --> 00:29:51.640
that and you're willing to,
you know, give up server

519
00:29:51.640 --> 00:29:56.770
controls, you can, you know,
make many, many, many assumptions

520
00:29:56.830 --> 00:29:59.710
that just reduce the amount
of work that the you

521
00:29:59.720 --> 00:30:03.810
is doing. Yeah. Server controls
was my next question. So,

522
00:30:03.810 --> 00:30:06.360
but you still support partial
views though. And the kinds

523
00:30:06.360 --> 00:30:08.580
of things that were the
kinds of conveniences that were,

524
00:30:08.610 --> 00:30:12.540
that were used to an
NVC. Oh, absolutely. The, the

525
00:30:12.540 --> 00:30:15.270
HTML and all of those
other helpers are present to

526
00:30:15.270 --> 00:30:19.680
the base class. So partial
view editor for template for

527
00:30:20.160 --> 00:30:22.410
all of those helpers can
be used and they operate

528
00:30:22.470 --> 00:30:25.680
exactly the same way. Ah,
good. So I can use

529
00:30:25.680 --> 00:30:29.670
the HTML helpers that I've
already written and I can

530
00:30:29.670 --> 00:30:31.440
use, you just brought up
editor four and display four.

531
00:30:31.440 --> 00:30:36.180
These are MVC two helpers,
those work too. Yep. And

532
00:30:36.310 --> 00:30:39.060
the way that NBC is
written, you can, I don't

533
00:30:39.060 --> 00:30:41.940
kind of interrupt between languages.
So you can have a

534
00:30:41.940 --> 00:30:46.200
web forms view showing the
spark partial file or vice

535
00:30:46.200 --> 00:30:51.750
versa. So, so you're not,
when you, when you say,

536
00:30:51.750 --> 00:30:55.080
you know, editor for, or,
or partial view, you can

537
00:30:55.080 --> 00:30:59.160
jump languages at the same
time. Ah, that's cool. So

538
00:30:59.160 --> 00:31:00.630
I don't have to, if
I was going to introduce

539
00:31:00.630 --> 00:31:03.540
spark to my company, it's
not like I have to

540
00:31:03.540 --> 00:31:05.370
go and give a Brown
bag and get all the

541
00:31:05.370 --> 00:31:07.470
developers in and say, all
right, we're going to move

542
00:31:07.470 --> 00:31:09.870
everything over to spark. We
can just try a couple

543
00:31:09.870 --> 00:31:16.200
of views. Yep. Yeah. You
can register the spark engine

544
00:31:16.380 --> 00:31:18.570
and, you know, just like
all a few engines, it's

545
00:31:18.570 --> 00:31:21.900
kind of based on the
extension. So you can change

546
00:31:21.900 --> 00:31:26.940
some existing ASC X to
adopt spark or, you know,

547
00:31:28.380 --> 00:31:32.160
and they can be side
by side. So it, there's

548
00:31:32.160 --> 00:31:34.860
two things that make migration
a little bit easier. One

549
00:31:34.860 --> 00:31:36.630
is that you can run
side by side for a

550
00:31:36.630 --> 00:31:41.010
long time. And the other
is that spark recognizes the,

551
00:31:41.940 --> 00:31:45.600
the angle bracket percent syntax
for code snippets and for

552
00:31:45.600 --> 00:31:50.460
output expressions. So you, you
don't even need to rewrite

553
00:31:50.460 --> 00:31:52.900
the view a hundred percent
in order to be sparked

554
00:31:52.900 --> 00:31:55.560
you, you just have to
change the thing. Whoa, that's

555
00:31:55.590 --> 00:31:58.980
that's cool. So the, the
spark syntax that I'm used

556
00:31:58.980 --> 00:32:03.000
to for code blocks is,
is the dollar sign curly

557
00:32:03.000 --> 00:32:05.730
brace. And you're saying I
can even mix and match

558
00:32:05.730 --> 00:32:09.120
and use the old angle
bracket percent style. Oh yeah.

559
00:32:09.490 --> 00:32:12.870
The purchaser treats them as
an alias. They're recognized as

560
00:32:12.870 --> 00:32:16.800
the same thing when they're
turned into a node. So

561
00:32:17.580 --> 00:32:21.120
the second is turned from
text into nodes. They're the

562
00:32:21.120 --> 00:32:25.140
same assets. Well, that'll make
porting my existing views over

563
00:32:25.770 --> 00:32:30.330
nicely. Yeah. Streamlined it a
lot. And you know, the

564
00:32:30.330 --> 00:32:34.440
html.in code inside of those
works the same one way

565
00:32:34.440 --> 00:32:37.530
or the other spark has
H function, which is a

566
00:32:37.530 --> 00:32:46.820
shorter version of HTML and
code equal HTML dot Incode.

567
00:32:51.380 --> 00:33:08.840
That's very cool. That's about
six months ago working at

568
00:33:08.840 --> 00:33:21.620
Microsoft. Now the amount of
time has mysteriously has cut

569
00:33:21.620 --> 00:33:35.060
back a little bit integration,
which has compiled against MPC

570
00:33:35.060 --> 00:33:41.090
too. So the next thing
would be just to make

571
00:33:41.090 --> 00:33:51.620
that completely switched over to
MVC to one of the

572
00:33:51.620 --> 00:33:54.620
things that I really want
to do is widen out

573
00:33:54.770 --> 00:34:00.360
the ownership of it by
yourself. Or do you have

574
00:34:00.450 --> 00:34:10.520
a team of ninjas contributors,
very streamlined process? You know,

575
00:34:11.260 --> 00:34:26.600
you pull the main spark
that repository. I'm the only

576
00:34:26.600 --> 00:34:29.330
one that has commit rights
to it right now. I

577
00:34:29.330 --> 00:34:38.960
think that's something many, many
contributors, kind of a single

578
00:34:40.070 --> 00:34:47.540
repository. That's something I think
that needs to change pretty

579
00:34:47.540 --> 00:34:56.390
quickly. I appreciate you sitting
down and get me up

580
00:34:56.390 --> 00:35:02.150
to speed on what's going
on with spark. That'd be

581
00:35:02.150 --> 00:35:28.460
cool. Doing all sorts of
crazy stuff. All right. Well,

582
00:35:28.470 --> 00:35:29.630
thanks so much for taking
the time.

