WEBVTT FILE

1
00:00:04.380 --> 00:00:17.120
<inaudible> From Hanselman it's dotcom
it's Hansel minutes, a weekly

2
00:00:17.120 --> 00:00:21.410
discussion with web developer and
technologists. Scott Hanselman hosted by

3
00:00:21.410 --> 00:00:27.170
Carl Franklin. This is Lawrence Ryan announcing
show number 75. Recorded live

4
00:00:27.230 --> 00:00:34.130
Tuesday, July 24th, 2007. Support for Hanselman
it's just provided by Tellerik

5
00:00:34.250 --> 00:00:38.000
RIT controls. The most comprehensive
suite of components for windows

6
00:00:38.000 --> 00:00:50.090
forums and asp.net web applications.
online@wwwdottelerikdotcomandby.net developers journal the world's

7
00:00:50.120 --> 00:00:56.750
leading.net developer magazine online at
www dot <inaudible> dot com.

8
00:00:57.530 --> 00:01:00.890
In this episode, Scott talks
with John Lamb at the OSCON

9
00:01:00.890 --> 00:01:09.380
conference about the iron Ruby.
Pre-alpha one release. Hi, this

10
00:01:09.380 --> 00:01:11.450
is Scott Hanselman, and this
is another episode of Hansel

11
00:01:11.450 --> 00:01:15.560
minutes. I'm here at the
O'Reilly opensource conference, Oz con

12
00:01:15.560 --> 00:01:19.730
with John Lamb. And did you
announce today that you're doing

13
00:01:19.760 --> 00:01:22.220
today is Monday by the
way? Yeah, I announced it

14
00:01:22.310 --> 00:01:26.210
2:00 AM today on Monday. What
did you announce? So we,

15
00:01:26.360 --> 00:01:29.270
we shipped our first source
distribution of the iron Ruby

16
00:01:30.500 --> 00:01:33.650
implementation from Microsoft. So you
shipped your shipped iron Ruby.

17
00:01:33.650 --> 00:01:36.080
This means you shipped your
first drop and I saw

18
00:01:36.080 --> 00:01:39.920
that it was labeled pre-alpha
one. Yeah. And I downloaded

19
00:01:39.920 --> 00:01:43.400
it off of your website,
but what's the plan for

20
00:01:43.400 --> 00:01:45.680
where that's going to be
hosted. So down the road,

21
00:01:45.680 --> 00:01:47.960
right. What we want to
do is we want this

22
00:01:47.960 --> 00:01:50.090
thing to be hosted up
on Ruby for right. Which

23
00:01:50.090 --> 00:01:55.130
is the community site for
Ruby software development. And right

24
00:01:55.130 --> 00:01:56.660
now we had to just
ship it out as a

25
00:01:56.660 --> 00:01:58.610
zip file on my blog,
simply because it was a

26
00:01:58.610 --> 00:02:00.500
quick, as easy, as low
as friction way to get

27
00:02:00.830 --> 00:02:03.080
the code out there to
people. And the plan is

28
00:02:03.080 --> 00:02:04.640
to get it up on
Ruby forage. And I understand

29
00:02:04.640 --> 00:02:06.890
that you're going to be
taking contributions. Yep, absolutely. So

30
00:02:06.890 --> 00:02:09.980
that's probably the biggest announcement
there is, you know, not

31
00:02:09.980 --> 00:02:11.480
only are we going to
be up on Ruby forest

32
00:02:11.480 --> 00:02:13.400
by the end of August,
but we are going to

33
00:02:13.400 --> 00:02:19.090
be accepting community contributions back
into a subset of the,

34
00:02:19.100 --> 00:02:22.670
the iron Ruby language project.
Right? So specifically that subset

35
00:02:22.670 --> 00:02:25.970
is in the libraries. What
we're doing initially is we're

36
00:02:25.970 --> 00:02:29.750
going to reserve the compiler
pieces, right? So we're going

37
00:02:29.750 --> 00:02:31.730
to keep that we're not
going to accept contributions back

38
00:02:31.790 --> 00:02:35.000
into the compiler pieces for
a very, very good reason.

39
00:02:35.000 --> 00:02:39.230
And that reason is today.
Our Ruby is built on

40
00:02:39.230 --> 00:02:41.840
top of another piece of
software that my team creates,

41
00:02:41.840 --> 00:02:44.630
which is called the dynamic
language runtime. And so the

42
00:02:44.630 --> 00:02:47.990
DLR is not in Microsoft
in terms of fully baked,

43
00:02:48.380 --> 00:02:50.630
right? So in essence, we,
we don't have public interfaces

44
00:02:50.630 --> 00:02:53.330
for this thing yet. And
code is still kind of

45
00:02:53.330 --> 00:02:56.750
migrating back and forth between
what is in the DLR

46
00:02:56.810 --> 00:03:00.430
and what is in the
compilers. So until we confirm

47
00:03:00.430 --> 00:03:03.880
up those interfaces, right, and
until we can get to

48
00:03:03.910 --> 00:03:08.110
essentially a 1.0 quality release
with publicly defined API APIs

49
00:03:08.650 --> 00:03:11.980
for the DLR, we can't
accept contributions back because potentially

50
00:03:12.550 --> 00:03:16.840
external code could wind up.
And in Microsoft terms, tainting,

51
00:03:17.770 --> 00:03:19.900
the deal are which we'll
ship with a CLR and

52
00:03:19.930 --> 00:03:21.340
all that kind of stuff.
So we simply can't have

53
00:03:21.340 --> 00:03:25.780
that happen. But once we
get these public interfaces inside

54
00:03:25.780 --> 00:03:29.560
of the DLR itself, then
we will fully open up

55
00:03:29.560 --> 00:03:32.490
the arm, Ruby compiler, to
all community contribution. Now I

56
00:03:32.490 --> 00:03:36.120
spent the better part of
today. This is Monday, and

57
00:03:36.120 --> 00:03:38.310
I think this podcast is
being listened to on Friday

58
00:03:39.210 --> 00:03:41.190
with my intern, with my
own high school entrance. And

59
00:03:41.190 --> 00:03:45.180
we took the iron Ruby
stuff and we built up

60
00:03:45.270 --> 00:03:50.160
using Scott Guthrie's a hello
world example, a WPF example

61
00:03:50.520 --> 00:03:54.660
that we wrote it in
notepad. And it calls a

62
00:03:54.660 --> 00:03:59.250
C-sharp client that is a,
a rest front end, pulls

63
00:03:59.250 --> 00:04:02.460
out some C-sharp type, like
an array of accounts. And

64
00:04:02.460 --> 00:04:04.260
we go and pull some
information down from a financial

65
00:04:04.260 --> 00:04:08.310
services website. And we put
that account balances information into

66
00:04:08.330 --> 00:04:12.210
a WPF app. So we
had C-sharp in there from

67
00:04:12.210 --> 00:04:14.400
a library that we wrote.
We had some WPF and

68
00:04:14.400 --> 00:04:17.610
Dutton at three O all
talking together. And, and as

69
00:04:17.610 --> 00:04:19.800
I said on my blog
post, that it was very,

70
00:04:19.800 --> 00:04:22.140
very, you know, pre-alpha and
I was accepting that, but

71
00:04:22.470 --> 00:04:24.780
what I thought was really
interesting was the kinds of

72
00:04:24.780 --> 00:04:27.540
stuff that we bumped into
stuff that, you know, just

73
00:04:27.540 --> 00:04:30.090
wasn't done yet, gave me
a lot of insight into

74
00:04:30.090 --> 00:04:32.280
the kind of work that
you would you guys need

75
00:04:32.280 --> 00:04:35.610
to do. For example, I
got back on a Ray

76
00:04:35.610 --> 00:04:38.430
of accounts, I put it
in a variable called a

77
00:04:38.490 --> 00:04:41.460
and then I said a
square bracket, zero to pull

78
00:04:41.460 --> 00:04:45.600
an account out. And I
got, You probably got nothing.

79
00:04:45.600 --> 00:04:48.180
You've probably got a missing
method, exception, right? Missing method,

80
00:04:48.180 --> 00:04:51.810
exception, square back at square
bar. Yep. So the, the

81
00:04:51.810 --> 00:04:54.030
important thing, and actually what's
interesting is, you know, now

82
00:04:54.030 --> 00:04:57.090
that I think about what
happened to you there, you

83
00:04:57.090 --> 00:05:02.280
probably could have walked up
to that class, right. That

84
00:05:02.280 --> 00:05:07.050
represented the.net type and added
the square bracket method yourself.

85
00:05:07.440 --> 00:05:09.660
And that's interesting. I had
that thought myself, cause I

86
00:05:09.660 --> 00:05:12.270
ended up just calling get
value because get value was

87
00:05:12.270 --> 00:05:14.970
on system, not array. And
I said, well, I wonder

88
00:05:14.970 --> 00:05:17.520
if I could use the
method missing features to go

89
00:05:17.520 --> 00:05:19.590
in and build this thing
up and make it look

90
00:05:19.590 --> 00:05:21.900
the way I want it.
Yeah. We, we, we fully

91
00:05:21.900 --> 00:05:24.870
support method missing in, in
the, in the, the, the

92
00:05:24.870 --> 00:05:27.810
set of bits that we
shipped today in the future,

93
00:05:27.810 --> 00:05:29.250
we're going to do a
bunch of auto magic stuff.

94
00:05:29.280 --> 00:05:31.290
Right? So a lot of
these things I've already done

95
00:05:31.350 --> 00:05:33.690
in a former life when
I built Ruby CLR. So

96
00:05:33.690 --> 00:05:36.630
in Ruby CLR, when I
detect that you're marshaling a

97
00:05:36.660 --> 00:05:39.660
type from the CLR that
implements the numerable interface, I

98
00:05:39.660 --> 00:05:41.940
do all the right things.
I provide an each implementation

99
00:05:41.940 --> 00:05:45.570
for UI. I auto mix
in the innumerable module as

100
00:05:45.570 --> 00:05:48.720
well, or the numerable sense.
And so then you can

101
00:05:48.720 --> 00:05:51.210
use all the standard Ruby
idioms for iterating over, you

102
00:05:51.210 --> 00:05:53.220
know, some collection. That was
the thing I thought was

103
00:05:53.220 --> 00:05:55.830
really interesting was that it
didn't feel very Rubiez because

104
00:05:55.830 --> 00:05:58.910
each time I wanted to
use a Ruby, it wasn't,

105
00:05:58.910 --> 00:06:00.620
it wasn't there yet. And
I could, and I started

106
00:06:00.620 --> 00:06:02.660
looking at the source and
that was what was so

107
00:06:02.660 --> 00:06:04.610
much fun. It was to
figure out, Oh, I see

108
00:06:04.610 --> 00:06:06.770
where John and team are
going to have to get

109
00:06:06.770 --> 00:06:09.740
in there and hook this
up. Yep. We were doing,

110
00:06:09.830 --> 00:06:12.050
I, I brought in a
single a system, not single.

111
00:06:12.410 --> 00:06:14.700
I typed it as a
float, came in as assistant,

112
00:06:14.700 --> 00:06:16.910
not single. I wanted to
do a two string. It

113
00:06:16.910 --> 00:06:19.490
looks like it wasn't there.
So then I ended up

114
00:06:19.490 --> 00:06:21.290
switching it to a double
and two string was there.

115
00:06:21.320 --> 00:06:23.480
Yep. And then I went
and looked at some of

116
00:06:23.480 --> 00:06:25.430
the built-ins that you had
in the Ruby stuff. You've

117
00:06:25.430 --> 00:06:27.800
got like fixed numb. Can
you talk about that? I

118
00:06:27.800 --> 00:06:30.230
thought that fixed them was
an extension of an integer.

119
00:06:30.240 --> 00:06:32.530
Is that a derivation? So
no, it's not an extension,

120
00:06:32.530 --> 00:06:36.070
right? It is a type
substitution. So in essence, what

121
00:06:36.070 --> 00:06:38.770
we're doing is we're saying
that, okay, anytime where you

122
00:06:38.770 --> 00:06:42.490
see an end, right. Instead,
please treat this as the

123
00:06:42.490 --> 00:06:45.610
Ruby type, fixing them. Right.
So, you know, all of

124
00:06:45.610 --> 00:06:48.130
our method, dispatch code, essentially,
where you can essentially dispatch

125
00:06:48.130 --> 00:06:50.260
against an editor and it
goes, Oh, okay. I know

126
00:06:50.260 --> 00:06:51.910
exactly where we need to
route this method as to

127
00:06:51.910 --> 00:06:54.130
the fixed one type. So
what, you'll see if you'll

128
00:06:54.130 --> 00:06:56.920
look in the implementation, there's
like a, there's a file

129
00:06:56.920 --> 00:06:59.740
called initializer dot generated dot
CS, which is a giant,

130
00:06:59.740 --> 00:07:02.380
like hundred K file right
now on the sources. If

131
00:07:02.380 --> 00:07:05.770
you look inside there, that's
essentially the file where we,

132
00:07:06.250 --> 00:07:12.550
we Mark these methods, which
are effectively extension methods, especially

133
00:07:12.550 --> 00:07:14.380
using attributes. When you're looking
through the source code, I'm

134
00:07:14.380 --> 00:07:15.970
sure you saw lots and
lots of attributes sitting on

135
00:07:15.970 --> 00:07:18.460
top of methods. So what
we do is we, we've

136
00:07:18.460 --> 00:07:20.710
got a little tool that
will go through the methods,

137
00:07:20.740 --> 00:07:26.410
read the, the metadata, right?
The, the attributes. And then

138
00:07:26.410 --> 00:07:29.770
we will cogent out a
bunch of goop, right. To

139
00:07:29.770 --> 00:07:31.840
essentially say, okay, well, you
know, this is the name

140
00:07:31.840 --> 00:07:34.180
of the class. It has
this set of methods on

141
00:07:34.180 --> 00:07:36.460
it. Right. And it really
represents this dot that type

142
00:07:36.460 --> 00:07:39.430
in that case. So You're
my ignorance if I use

143
00:07:39.440 --> 00:07:42.490
the wrong words, but is,
is, is type substitution, the

144
00:07:42.490 --> 00:07:44.350
equivalent of what I would
have thought of as marshaling.

145
00:07:44.680 --> 00:07:47.920
Are we moving from one
word? Nope. Well, no, because

146
00:07:47.920 --> 00:07:50.860
an integer is an integer.
Right. So, so essentially what

147
00:07:50.860 --> 00:07:53.050
we're saying is that any
time that Ruby implementation, cause

148
00:07:53.050 --> 00:07:55.390
remember the river implementation runs
on top of the CLR.

149
00:07:55.390 --> 00:07:58.450
So it is using things
like, and Moving in and

150
00:07:58.450 --> 00:08:01.290
out of universities like we
did with comments. No, no.

151
00:08:01.300 --> 00:08:04.900
And quite unlike, you know,
a Ruby CLR where yeah.

152
00:08:04.900 --> 00:08:07.120
I had a Marshall types
across the boundary, right. Because

153
00:08:07.120 --> 00:08:09.940
across, you know, there were
two completely different worlds, right.

154
00:08:09.940 --> 00:08:11.800
One is a sea based
interpreter. And the other thing

155
00:08:11.800 --> 00:08:14.140
is, is the CLR, right?
So everything is just in

156
00:08:14.140 --> 00:08:16.900
the CLR. We're essentially giving
you a different view over

157
00:08:16.900 --> 00:08:19.330
the types that you currently
have today in the CLR.

158
00:08:19.660 --> 00:08:22.840
If I, if I knew
up a string in the,

159
00:08:22.840 --> 00:08:26.320
in the ruby.net, when the
iron Ruby world. Right. Okay.

160
00:08:26.740 --> 00:08:30.520
And I passed that string
into my C sharp library.

161
00:08:31.480 --> 00:08:33.550
What, what happened there? I
mean, the string is still

162
00:08:33.550 --> 00:08:36.820
sitting somewhere On the heat.
So one thing to really

163
00:08:36.820 --> 00:08:40.180
remember is, is that what's
different between Ruby and most

164
00:08:40.180 --> 00:08:44.500
other implementations is that the
Ruby strings are mutable strings,

165
00:08:44.560 --> 00:08:48.460
right? CLR strings are immutable
strings. So we have to

166
00:08:48.460 --> 00:08:51.520
convert when we cross the
quote unquote boundary, right. So

167
00:08:51.640 --> 00:08:53.980
the way strings work. Exactly.
And if you take a

168
00:08:53.980 --> 00:08:58.590
closer look at the way
implemented the extension methods and

169
00:08:58.590 --> 00:09:02.190
the various types in our
libraries, what I generally do

170
00:09:02.190 --> 00:09:05.700
is I, we, we, we
wind up having an overload

171
00:09:05.700 --> 00:09:07.640
of the method, takes a
regular CLR string. And then

172
00:09:07.650 --> 00:09:10.290
also another overload that takes
a mutable string. So the

173
00:09:10.290 --> 00:09:13.410
design of the library is
such that we want to

174
00:09:13.470 --> 00:09:19.560
stay as strongly typed as
possible wherever we can. And

175
00:09:19.560 --> 00:09:22.230
in cases where, you know,
the typing or the parameter

176
00:09:22.230 --> 00:09:24.660
typing past it. And while
we can't determine that, right,

177
00:09:24.660 --> 00:09:26.790
then we'll accept objects and
we'll do conversions and stuff.

178
00:09:26.790 --> 00:09:28.470
Right. So there's all sorts
of patterns in the Ruby

179
00:09:28.470 --> 00:09:31.620
library, for example, where you
can pass them random objects.

180
00:09:32.100 --> 00:09:34.980
Right. And what the library
will do is attempt to

181
00:09:34.980 --> 00:09:37.110
call to ENT or actually
attempt to see whether or

182
00:09:37.110 --> 00:09:40.260
not there's a two inch
method implemented on that object.

183
00:09:40.500 --> 00:09:43.260
If it finds that, then
it does a different thing

184
00:09:43.260 --> 00:09:45.800
with it. Right. Essentially treats
it as an integer. Yeah.

185
00:09:45.920 --> 00:09:47.660
So for the purpose of
some of the, some of

186
00:09:47.660 --> 00:09:49.700
the viewers may not necessarily
know the difference or remember

187
00:09:49.700 --> 00:09:52.190
the difference between a mutable
string and an immutable string.

188
00:09:52.190 --> 00:09:54.560
So if you could just
speak on that for just

189
00:09:54.560 --> 00:09:57.390
a moment as a reminder.
So when you create a

190
00:09:57.410 --> 00:10:00.380
CLR string, right, once it's
being created, you cannot change

191
00:10:00.380 --> 00:10:03.950
the contents of the string,
every single API that you

192
00:10:03.950 --> 00:10:07.250
would call on a string
that you would imagine is

193
00:10:07.460 --> 00:10:09.560
changing the string. It doesn't
actually change the string. It

194
00:10:09.590 --> 00:10:12.620
actually creates a new string
with the modification inside of

195
00:10:12.620 --> 00:10:15.890
that string. So your implementation
of immutable string of, I

196
00:10:15.890 --> 00:10:18.890
remember correctly from looking at
the source code, it had

197
00:10:18.890 --> 00:10:21.860
a string. Yep, exactly. So
today and that that's an

198
00:10:21.860 --> 00:10:25.280
implementation detail, right. So today,
so you'll also notice that

199
00:10:25.400 --> 00:10:27.740
unlike trying to do that
type substitution thing that I

200
00:10:27.740 --> 00:10:33.020
did with, with fixed Naaman
integer, instead we wrapped a

201
00:10:33.020 --> 00:10:35.150
string builder and immutable string.
The reason why is that

202
00:10:35.510 --> 00:10:37.190
eventually string builder is going
to go away in our

203
00:10:37.190 --> 00:10:39.890
implementation. I see the reason
why is that Ruby itself

204
00:10:39.920 --> 00:10:42.800
treat strings is biter res
not char res, right? So

205
00:10:43.210 --> 00:10:45.680
effectively a string builder is
a, is a dynamic char

206
00:10:45.680 --> 00:10:49.940
array. And so for that
reason, and for compatibility with

207
00:10:49.940 --> 00:10:51.650
Ruby, you know, somewhere down
the road, we're going to

208
00:10:51.660 --> 00:10:54.020
swap out the implementation was
strangled her and swap in,

209
00:10:54.890 --> 00:10:57.110
you know, a mutable binder.
Right. And as, as, as

210
00:10:57.110 --> 00:10:59.480
you said, that certainly an
implementation detail, I just found

211
00:10:59.480 --> 00:11:01.940
it to be a project
particularly interesting one. So in

212
00:11:01.940 --> 00:11:04.970
that case, strings are really
the special case, as it

213
00:11:04.970 --> 00:11:07.550
seems with almost all languages,
right? We, we keep saying

214
00:11:07.550 --> 00:11:10.520
stranger strings, but ultimately every
language has its different perspective

215
00:11:10.520 --> 00:11:13.940
on how a string should
operate. Now. I noticed that

216
00:11:14.420 --> 00:11:17.660
a number of times I
had to call two string

217
00:11:17.690 --> 00:11:19.880
200 score string, and 200
score asks, are those things

218
00:11:20.210 --> 00:11:23.180
200? No, no two under
STR and two under us.

219
00:11:23.180 --> 00:11:25.580
Right. Okay. For the two
different methods. So what two

220
00:11:25.580 --> 00:11:28.670
Hunter STR is it's another
one of these Ruby signal

221
00:11:28.670 --> 00:11:32.030
methods effectively. So, so what
Ruby does or whether it

222
00:11:32.030 --> 00:11:34.430
be libraries do, is they
walk up to that object

223
00:11:34.790 --> 00:11:37.970
and invokes a respond to
write on that system respond

224
00:11:37.970 --> 00:11:41.060
to, to serve yes or
no. And if so, it

225
00:11:41.060 --> 00:11:43.610
treats that thing as a
string and invokes other meds.

226
00:11:43.610 --> 00:11:47.660
So effectively treats as a
duct type string, Hey, say

227
00:11:47.660 --> 00:11:50.780
something about duck typing for
while. Sure. So duct typing,

228
00:11:50.780 --> 00:11:52.670
you know, so it's, there's
that old saying, if it

229
00:11:52.670 --> 00:11:54.820
walks like a duck and
quacks like a duck, then

230
00:11:54.820 --> 00:11:56.680
a probably is a duck.
So you're essentially saying woven

231
00:11:56.690 --> 00:12:00.010
object responds to the methods
that I would expect a

232
00:12:00.010 --> 00:12:03.070
string to respond to, then
it must be a string.

233
00:12:03.670 --> 00:12:06.460
Right. So is it supposed
as simple as that? So

234
00:12:06.460 --> 00:12:09.640
the, so back to the
idea about using to under

235
00:12:09.640 --> 00:12:12.760
stir, it's one of these
marker things, right? 200 inches,

236
00:12:12.760 --> 00:12:15.190
another one of these marker
things inside of the Ruby

237
00:12:15.190 --> 00:12:17.770
libraries. So we just simply
go off and check to

238
00:12:17.770 --> 00:12:19.150
see if it's a string.
And if so, then we

239
00:12:19.720 --> 00:12:21.900
retreated as a string. From
that point onwards In his

240
00:12:21.900 --> 00:12:24.000
process, there are a number
of times where I passed

241
00:12:24.380 --> 00:12:26.970
an object in and then
had to call to, you

242
00:12:26.970 --> 00:12:29.300
know, to string on the
object. But then once I

243
00:12:29.310 --> 00:12:31.200
actually ended up having to
call you, and you had

244
00:12:31.200 --> 00:12:35.040
me call a secret method
called two CLR string. Right.

245
00:12:35.220 --> 00:12:36.540
And is that something that
I'm not going to have

246
00:12:36.540 --> 00:12:39.630
to think about in the
future? Oh, well, right now

247
00:12:39.630 --> 00:12:42.420
that was just the most
obvious way for us to

248
00:12:42.420 --> 00:12:46.500
deal with what happens when
we need to convert immutable

249
00:12:46.500 --> 00:12:49.530
string into a CLR string
is essentially force you to

250
00:12:49.530 --> 00:12:51.870
explicitly do it down the
road. We will, you know,

251
00:12:51.880 --> 00:12:53.460
do some magic to take
care of that for you.

252
00:12:53.700 --> 00:12:56.790
Sure. And even though there
were a couple of things

253
00:12:56.790 --> 00:12:58.950
like that, that I, that
I bumped into, it was

254
00:12:58.950 --> 00:13:00.960
funny. We were looking at,
at the code and it

255
00:13:00.960 --> 00:13:03.960
was a mess of comments
and whatnot. We ended up

256
00:13:03.960 --> 00:13:06.090
stripping all the comments out
and it was, it was

257
00:13:06.090 --> 00:13:08.370
pretty simple. I mean, really
the, there was nothing to

258
00:13:08.370 --> 00:13:10.980
it. We spent more time
a print together what the

259
00:13:10.980 --> 00:13:13.890
WPF XAML was going to
look like doing it by

260
00:13:13.890 --> 00:13:17.490
code building the object model
ourselves. Yep. Now, how do

261
00:13:17.490 --> 00:13:20.040
you anticipate this is going
to be used? I assume

262
00:13:20.070 --> 00:13:22.740
it will be a first
among equals kind of a

263
00:13:22.740 --> 00:13:24.750
situation where I can do
anything. If I feel like

264
00:13:24.750 --> 00:13:28.320
doing WPF and Ruby or
ASP, You shouldn't have any

265
00:13:28.320 --> 00:13:31.440
inherent limitations in terms of
the kinds of libraries that

266
00:13:31.440 --> 00:13:34.410
you should be able to
consume from this from, from

267
00:13:34.410 --> 00:13:36.900
our implementation. You know, I
think there's a number of

268
00:13:36.900 --> 00:13:39.750
really interesting scenarios that you
can look at. You know,

269
00:13:39.750 --> 00:13:42.420
the Silverlight one being one
of the obvious ones, because,

270
00:13:42.420 --> 00:13:44.760
you know, right now today,
nobody else really has the

271
00:13:44.760 --> 00:13:48.900
ability to run Ruby in
the browser potentially across an

272
00:13:48.900 --> 00:13:52.950
extremely large deployed base of,
you know, browser supports Silverlight.

273
00:13:53.370 --> 00:13:55.530
So, you know, and also
cross platform between Mac and

274
00:13:55.530 --> 00:13:58.050
windows. So, you know, that
that's a really interesting rich

275
00:13:58.050 --> 00:14:03.150
opportunity for us and, and
WPF style programming. Right. I'm

276
00:14:03.150 --> 00:14:04.920
not sure what the actual
name of it internally we

277
00:14:04.920 --> 00:14:06.630
call it SPF, but I'm
sure there's some other kind

278
00:14:06.630 --> 00:14:09.780
of name for, for what,
so it was SPF Silverlight

279
00:14:09.780 --> 00:14:14.130
presentation foundation. I think so.
Right. But I think it's

280
00:14:14.130 --> 00:14:15.990
acronym status has been revoked,
so I don't think it

281
00:14:16.210 --> 00:14:19.290
needs anything. Yeah. So I
still call those guys the

282
00:14:19.290 --> 00:14:24.000
SPF guys. And so that
programming model is, you know,

283
00:14:24.000 --> 00:14:29.010
I think in need of
having some additional support, right.

284
00:14:29.010 --> 00:14:31.080
For billing applications, if you
look up the Silverlight stuff,

285
00:14:31.080 --> 00:14:35.670
it's a very, you know,
low-level API essentially for doing

286
00:14:35.670 --> 00:14:40.890
drawing and presentation. So, so
given that what we would

287
00:14:40.890 --> 00:14:42.030
really like to be able
to do is go off

288
00:14:42.030 --> 00:14:43.380
and build a library and
makes so much easier, much

289
00:14:43.380 --> 00:14:45.270
more approachable, right. For people
to go off and do

290
00:14:45.270 --> 00:14:46.800
that stuff. And I think
that Ruby would just be

291
00:14:46.800 --> 00:14:50.970
a wonderful language for using
to experiment with building out

292
00:14:51.170 --> 00:14:53.980
such a framework. Yeah. So
of course I don't work

293
00:14:53.980 --> 00:14:56.020
for Microsoft yet. All right.
I'm going to go to

294
00:14:56.020 --> 00:15:00.520
work for Microsoft September. Congratulations,
possession September 3rd. So until then,

295
00:15:00.520 --> 00:15:01.810
I'm sure I can get
myself into a lot more

296
00:15:01.810 --> 00:15:03.970
trouble. Although I plan on
getting into plenty of trouble

297
00:15:03.970 --> 00:15:05.860
once I get there, I
always thought it would be

298
00:15:05.860 --> 00:15:08.590
a really interesting scenario to
have the rails programmers build

299
00:15:08.590 --> 00:15:12.100
some kind of a Silverlight
support gem, such that the

300
00:15:12.100 --> 00:15:15.070
relationship between Ruby on the
server side and Ruby on

301
00:15:15.070 --> 00:15:18.310
the client side would become
something maybe unique to that,

302
00:15:19.000 --> 00:15:21.280
to that environment, that somehow
they would come up with

303
00:15:21.280 --> 00:15:24.970
ways to serialize objects in
and out, perhaps via Jason,

304
00:15:25.360 --> 00:15:27.250
such that it would invent
a new kind, a new

305
00:15:27.250 --> 00:15:30.040
kind of a deployment, a
new kind of programming, such

306
00:15:30.040 --> 00:15:34.300
that the browser and the
big fat Pentium, four core

307
00:15:34.300 --> 00:15:36.520
two, that's not doing any
work today would actually start

308
00:15:36.520 --> 00:15:38.920
doing some really serious, heavy
lifting. And it would almost

309
00:15:38.920 --> 00:15:42.430
add like a new tier
two classic three tier. Yeah.

310
00:15:42.460 --> 00:15:44.410
And I think that would
be a really interesting thing

311
00:15:44.440 --> 00:15:46.450
place for people to explore
with some of the options,

312
00:15:46.450 --> 00:15:49.240
right? Cause certainly, you know,
the, you know, instead of

313
00:15:49.240 --> 00:15:51.370
using RGS to go off
and generate JavaScript, it goes

314
00:15:51.370 --> 00:15:52.600
off and runs on the
client. Right. You can just

315
00:15:52.600 --> 00:15:54.220
emit some Ruby code and
I can go off and

316
00:15:54.220 --> 00:15:56.200
run on the client as
well. And I think that

317
00:15:56.200 --> 00:15:58.600
having a language that makes
it easier for you to

318
00:15:58.600 --> 00:16:03.610
build modular software like Ruby
I'm on the client, it's

319
00:16:03.610 --> 00:16:07.190
going to really do a
lot. And you know, in

320
00:16:07.200 --> 00:16:09.200
spur a lot of innovation,
I think in, in, in

321
00:16:09.300 --> 00:16:12.700
the browser Now iron Ruby
is adding to the dynamic

322
00:16:12.700 --> 00:16:14.740
language, you know, the list
of dynamic languages that are

323
00:16:14.740 --> 00:16:17.350
supported. We had Python, we're
going to have JavaScript. We've

324
00:16:17.350 --> 00:16:22.000
also gonna have VB VBX,
dynamic, visual. Yep. Some tubing

325
00:16:22.000 --> 00:16:24.700
named product that is the
visual basics, At least for

326
00:16:24.700 --> 00:16:26.920
dynamic languages. I know that
you guys had a language

327
00:16:26.950 --> 00:16:29.230
lab and they had the
guys that do languages like

328
00:16:29.230 --> 00:16:32.260
boo. And I think someone
was talking about doing a

329
00:16:32.260 --> 00:16:36.220
squeak implementation. So there was
BU there was there, there

330
00:16:36.240 --> 00:16:40.660
was some guys that do
cold fusion there, there there's

331
00:16:40.660 --> 00:16:42.580
of course a Peter Fisk
who on the outside is

332
00:16:42.580 --> 00:16:45.130
building the smalltalk implementation as
well that runs inside the

333
00:16:45.130 --> 00:16:51.130
browser Vista smalltalk and, and
other people. Right. So it's,

334
00:16:51.160 --> 00:16:52.960
I think that there's going
to be a lot of

335
00:16:52.960 --> 00:16:56.410
opportunities again, for people to,
to, especially once there's more

336
00:16:56.410 --> 00:17:00.040
code cause DLR still isn't
fully baked. And so once

337
00:17:00.040 --> 00:17:02.530
we have some more code,
more examples, more programming languages

338
00:17:02.590 --> 00:17:04.660
and some documentation and that
kind of stuff. Right. I

339
00:17:04.660 --> 00:17:06.250
think it's going to make
it a lot easier for

340
00:17:06.250 --> 00:17:09.040
people to make some progress.
Although Peter Fisk, you know,

341
00:17:09.040 --> 00:17:10.960
was the current state of
this stuff, we just dropped

342
00:17:10.960 --> 00:17:12.430
a pile of source code
on him and he's been

343
00:17:12.430 --> 00:17:15.160
making fantastic progress. So do
you anticipate, it will be

344
00:17:15.160 --> 00:17:17.530
people like that who will
push the new, you know,

345
00:17:17.530 --> 00:17:19.960
the new updates and who
are going to contribute the

346
00:17:19.960 --> 00:17:23.410
most source code is going
to be language. Yeah. Yeah.

347
00:17:23.410 --> 00:17:25.660
I think that, well, there's
several places, right. You know,

348
00:17:25.660 --> 00:17:28.090
it's, it's the classic, you
got a scratch and itch

349
00:17:28.120 --> 00:17:29.800
kind of thing right. In
open source. So if there's

350
00:17:29.800 --> 00:17:35.020
something that's bothering you right
now, I think that, you

351
00:17:35.020 --> 00:17:38.440
know, filling that gap by
building some libraries or contributing

352
00:17:38.440 --> 00:17:40.630
to libraries and stuff, right?
Like you don't need to

353
00:17:40.630 --> 00:17:42.880
be a compiler geek in
order to go off and

354
00:17:42.880 --> 00:17:45.400
build some libraries. Right. And
to port some existing libraries

355
00:17:45.400 --> 00:17:46.960
over it. So those are
the kinds of things that

356
00:17:46.960 --> 00:17:49.350
I think are going to
be opportunities for all sorts

357
00:17:49.350 --> 00:17:52.050
of people to contribute Notches,
compiler geeks. Well, I really

358
00:17:52.050 --> 00:17:53.700
appreciate you taking the time
to come and talk to

359
00:17:53.700 --> 00:17:55.590
me today. I know that
you're in between sessions right

360
00:17:55.590 --> 00:17:57.780
now and we're sitting in
the hallway here. Sure. And

361
00:17:57.900 --> 00:18:00.210
thanks a lot. And I
encourage the listeners to go

362
00:18:00.210 --> 00:18:02.400
and check this out, start
poking around. It is a

363
00:18:02.670 --> 00:18:05.070
it's early, but it's a
lot of fun to see

364
00:18:05.070 --> 00:18:08.340
this kind of development going
on, particularly around dynamic languages.

365
00:18:08.340 --> 00:18:10.290
In my last show, the
interns were talking about how

366
00:18:10.290 --> 00:18:13.530
they said dynamic languages are
just easier. It's just, it's

367
00:18:13.530 --> 00:18:17.250
just more pleasant to program
in. Sure. It's very fun

368
00:18:17.250 --> 00:18:20.760
to see the, almost the
arm wrestling that's going on

369
00:18:20.770 --> 00:18:26.370
as C-sharp continues to evolve
into a more dynamic language

370
00:18:26.370 --> 00:18:29.610
as VB kind of reinvents
itself, or we asserts itself

371
00:18:29.610 --> 00:18:32.310
as a dynamic language to
see these other languages come

372
00:18:32.310 --> 00:18:35.190
in. Yeah. It's almost like
the promise of.net when it

373
00:18:35.190 --> 00:18:40.080
first came out was going
to be, <inaudible> now 2007,

374
00:18:40.080 --> 00:18:42.930
that's actually happening. Yeah. And
I think that's a really

375
00:18:42.930 --> 00:18:45.900
exciting time to be working
for our team right now.

376
00:18:46.560 --> 00:18:48.180
Thanks a lot. And this
has been another episode of

377
00:18:48.180 --> 00:18:57.290
Hansel minutes. We'll see you
next week. <inaudible>.

