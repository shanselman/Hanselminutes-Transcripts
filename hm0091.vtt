WEBVTT FILE

1
00:00:12.020 --> 00:00:17.570
From Hansel minutes.com it's Hansel
minutes or weekly discussion with

2
00:00:17.570 --> 00:00:22.430
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:22.430 --> 00:00:28.430
is Lawrence Ryan announcing show number
91 recorded live Monday, December 3rd, 2007.

4
00:00:29.420 --> 00:00:33.500
Support for Hanselman it's just
provided by Tellerik rad controls.

5
00:00:33.830 --> 00:00:36.920
The most comprehensive suite of
components for windows forms and

6
00:00:36.920 --> 00:00:47.210
asp.net web applications. online@wwwdottelbrik.com. Support
is also provided by.net developers

7
00:00:47.210 --> 00:00:53.510
journal the world's leading.net developer
magazine online at www dot

8
00:00:53.510 --> 00:00:58.880
<inaudible> dot com. In this
episode, Scott discusses, he clips

9
00:00:58.910 --> 00:01:05.600
with Bjorn Freeman Benson. Hi,
this is Scott Hanselman and

10
00:01:05.600 --> 00:01:07.460
this is another episode of
Hansel minutes, and I am

11
00:01:07.460 --> 00:01:09.890
privileged to be sitting down
here with Bjorn Freeman Benson,

12
00:01:09.890 --> 00:01:14.150
the director of committer community
at the eclipse foundation. Thank

13
00:01:14.150 --> 00:01:15.470
you, sir, for taking the
time out of your busy

14
00:01:15.470 --> 00:01:18.800
schedule. Yeah, no problem. So
most people who listen to

15
00:01:18.800 --> 00:01:22.070
this podcast are Microsoft developers.
Although audience is starting to

16
00:01:22.070 --> 00:01:25.190
expand a little bit and
they know that eclipse is

17
00:01:25.190 --> 00:01:27.170
a thing that's out there,
but for the most part,

18
00:01:27.470 --> 00:01:29.420
they may not have necessarily
experienced it in their everyday

19
00:01:29.420 --> 00:01:32.510
life. But eclipse is a
huge part of, of a

20
00:01:32.510 --> 00:01:35.360
great deal of developers' lives
from, from day to day.

21
00:01:36.440 --> 00:01:41.300
What should a Microsoft developer
know about eclipse? Well, yeah,

22
00:01:41.370 --> 00:01:44.810
sort of a large question.
Big question. Eclipse is probably

23
00:01:44.810 --> 00:01:48.200
the most popular. I think
we actually have stats somewhere

24
00:01:48.200 --> 00:01:51.350
that demonstrate that it is
the most popular Java IDE.

25
00:01:52.130 --> 00:01:54.470
Now eclipse has expanded to
be more than just a

26
00:01:54.470 --> 00:01:56.570
job ID, but it's best
known for being a job

27
00:01:56.600 --> 00:02:00.860
ID. So since a lot
of Microsoft developers work in

28
00:02:00.860 --> 00:02:02.780
C sharp and that sort
of thing, they don't work

29
00:02:02.780 --> 00:02:05.510
in Java. The, you know,
they don't have that familiarity

30
00:02:05.510 --> 00:02:09.620
with eclipse, whereas people who,
who build Java applications, web

31
00:02:09.620 --> 00:02:13.340
servers, clients, rich clients, and
so on all know about

32
00:02:13.340 --> 00:02:15.170
eclipse, even if they don't
use it, if even if

33
00:02:15.170 --> 00:02:18.560
they use one of the
other tools out there as

34
00:02:18.560 --> 00:02:21.980
a developer, you might consider
eclipse to be sort of

35
00:02:21.980 --> 00:02:25.940
the Java version of visual
studio. Visual studio is the

36
00:02:25.940 --> 00:02:29.270
800 pound gorilla. It's the,
the main development environment that

37
00:02:29.270 --> 00:02:31.460
you use. If you're a
windows programmer, even if you

38
00:02:31.460 --> 00:02:33.650
happen to use one of
the other tools that are

39
00:02:33.650 --> 00:02:36.260
out there, there's a wide
variety of them. Everybody knows

40
00:02:36.260 --> 00:02:39.230
about visual studio, same thing
applies in the Java world.

41
00:02:39.230 --> 00:02:41.360
If you're even if you
use one of the other

42
00:02:41.360 --> 00:02:44.630
Java tools, you know, about
eclipse, as you know, it's

43
00:02:44.630 --> 00:02:47.870
the main programming environment and
where did it come from

44
00:02:47.870 --> 00:02:50.690
originally? Is there, is there
a Linus for eclipse? Who's

45
00:02:50.690 --> 00:02:52.160
like the guy who made
it and then it became

46
00:02:52.160 --> 00:02:55.790
a foundation or how did
it, so there, the history

47
00:02:55.790 --> 00:02:59.240
of eclipse started as at
this little company, object technology

48
00:03:00.130 --> 00:03:04.300
are known as OTI in
Ottawa, and I worked for

49
00:03:04.300 --> 00:03:06.850
them for a while and
we made small talk programming

50
00:03:06.850 --> 00:03:10.540
environments basically. And we made
a deal with IBM, even

51
00:03:10.540 --> 00:03:12.580
when we were an independent
company and they sold it

52
00:03:12.910 --> 00:03:15.220
as IBM small talk, which
was known as visual age,

53
00:03:15.230 --> 00:03:18.580
small talk at the time.
And that same group after

54
00:03:18.580 --> 00:03:22.060
being bought by IBM, went
on to produce the first

55
00:03:22.060 --> 00:03:25.240
IBM Java programming environment, which
was called digital age for

56
00:03:25.240 --> 00:03:29.560
Java, which was innovative, but
fairly weak in its execution

57
00:03:29.560 --> 00:03:31.630
and had a number of
flaws. And then they went

58
00:03:31.630 --> 00:03:33.760
on to make a new
version of that, which became

59
00:03:33.760 --> 00:03:38.380
eclipse. Then IBM decided to
take that proprietary code that

60
00:03:38.380 --> 00:03:40.540
they had in that. And
they were actually selling that

61
00:03:40.540 --> 00:03:43.060
for family, couple thousands of
dollars and so on and

62
00:03:43.060 --> 00:03:46.210
open source that for a
number of reasons, but that

63
00:03:46.210 --> 00:03:50.140
became the open source eclipse
product that's out there. And

64
00:03:50.140 --> 00:03:52.900
then after a few years
of that being just opened

65
00:03:52.900 --> 00:03:55.810
under IBM's label, they decided
to spin it out to

66
00:03:55.810 --> 00:03:59.380
a separate foundation, which is
where I work today, which

67
00:03:59.380 --> 00:04:02.230
is a non IBM thing.
It's funded by the member

68
00:04:02.230 --> 00:04:04.630
companies of the eclipse foundation
of which there are currently

69
00:04:04.630 --> 00:04:08.380
120 member companies or maybe
130. I'm never quite sure

70
00:04:08.380 --> 00:04:11.680
exactly what the number is.
And they all put in

71
00:04:12.070 --> 00:04:14.800
varying amounts of money to
help run the foundation, maintain

72
00:04:14.800 --> 00:04:17.920
the servers, provide the bandwidth,
you know, pay the salary

73
00:04:17.920 --> 00:04:19.900
of myself and the few
other employees that are of

74
00:04:19.900 --> 00:04:22.890
the foundation, et cetera. So
a foundation like this, an

75
00:04:22.890 --> 00:04:26.100
open source foundation, isn't a,
isn't a behemoth. It's not

76
00:04:26.100 --> 00:04:28.080
a huge thing. I mean,
I'm sitting here in your

77
00:04:28.110 --> 00:04:30.780
offices, in downtown Portland, Oregon,
and, you know, with all

78
00:04:30.780 --> 00:04:33.510
due respect, I was surprised
that it was so small.

79
00:04:33.660 --> 00:04:35.700
Somehow I assumed it would
be mahogany walls and big

80
00:04:35.700 --> 00:04:37.920
desks. And it's just you
and another gentlemen right now.

81
00:04:38.340 --> 00:04:40.470
Yeah, there are actually four
of us here in Portland

82
00:04:41.250 --> 00:04:44.940
and then there's another, I
think eight or nine in

83
00:04:44.940 --> 00:04:49.200
Ottawa. We, we live in
the locations we live in

84
00:04:49.200 --> 00:04:52.260
because we like living there.
I, I lived in Ottawa

85
00:04:52.260 --> 00:04:54.030
for a while and decided
it was a bit cold.

86
00:04:54.390 --> 00:04:57.870
So I prefer Portland. There
are people who, who like

87
00:04:57.870 --> 00:05:01.560
living there for family reasons
or whatever, but the foundation

88
00:05:01.560 --> 00:05:05.310
itself doesn't do the work.
It's not like Microsoft building

89
00:05:05.310 --> 00:05:08.610
visual studio where Microsoft builds
all of the code in

90
00:05:08.620 --> 00:05:11.010
there. Gosh, I don't even
know how many people there

91
00:05:11.010 --> 00:05:13.230
are working on the visual
studio product, but I'm sure

92
00:05:13.230 --> 00:05:15.570
it's in at least the
hundreds, if not a thousand,

93
00:05:15.870 --> 00:05:19.560
right? The work of writing
the code for eclipse is

94
00:05:19.560 --> 00:05:23.550
done by people out there
who typically work for our

95
00:05:23.550 --> 00:05:27.330
member companies. And there are
800 to 900 of those

96
00:05:27.330 --> 00:05:31.020
committers out there who work
on eclipse either part time

97
00:05:31.020 --> 00:05:34.080
or full time. Wow. And
so those are the people

98
00:05:34.080 --> 00:05:35.610
who are the committers on
the project. We have the

99
00:05:35.610 --> 00:05:37.950
right access. There are more
people than that who contribute

100
00:05:37.950 --> 00:05:40.050
patches and code and so
on, but I don't have

101
00:05:40.050 --> 00:05:43.230
account for those. So the,
you know, the 12 or

102
00:05:43.230 --> 00:05:47.190
so employees, the foundation do
things like system administration, keeping

103
00:05:47.190 --> 00:05:52.290
the servers up, making sure
that elections are run fairly

104
00:05:52.290 --> 00:05:55.110
and things like that. Carl
who's sitting over there to

105
00:05:55.110 --> 00:05:58.010
my right is one of
our assistant and is busy

106
00:05:58.010 --> 00:06:00.230
fixing a problem with, I
think the website at this

107
00:06:00.230 --> 00:06:03.800
very moment. Wow. But he,
and I don't actually write

108
00:06:03.800 --> 00:06:05.840
the code. Those are done
by the eight or 900

109
00:06:06.110 --> 00:06:08.980
developers are out there. And
is there other internet, a

110
00:06:08.980 --> 00:06:10.810
hundred? Is there other leads?
I mean, how is that

111
00:06:10.810 --> 00:06:13.510
structured? Is there a hierarchy?
There is a hierarchy, but

112
00:06:13.510 --> 00:06:17.740
it's a, it's a meritocratic
hierarchy. So we've currently divided

113
00:06:17.740 --> 00:06:22.270
up into, I think, 80
different sub projects around the

114
00:06:22.270 --> 00:06:24.670
entire eclipse philosophy. I could
go over to the web

115
00:06:24.670 --> 00:06:26.290
browser and look it up.
We have a page that

116
00:06:26.290 --> 00:06:29.170
lists them all. But for
instance, there's a sub project

117
00:06:29.170 --> 00:06:31.270
that deals with Java tooling
and there's a sub project

118
00:06:31.270 --> 00:06:33.970
that deals with sea tooling.
So project that deals with

119
00:06:33.970 --> 00:06:36.760
UML diagramming and so on.
And each one of those

120
00:06:36.760 --> 00:06:40.570
is run by between two
and 20 people. And those

121
00:06:40.570 --> 00:06:44.590
two and 20 people self
select a leader among them

122
00:06:44.680 --> 00:06:47.050
that they are, they want
to follow. So each one

123
00:06:47.050 --> 00:06:50.530
of those projects has a
project lead or sometimes co-leads

124
00:06:50.530 --> 00:06:52.240
who sort of define where
the project is going to

125
00:06:52.240 --> 00:06:53.950
go and what things are
going to be worked on

126
00:06:54.250 --> 00:06:56.410
how to triage the bugs
and that sort of thing.

127
00:06:56.740 --> 00:06:58.690
But it's all done by,
you know, if you and

128
00:06:58.690 --> 00:07:01.210
I are sitting together working
on some project and we

129
00:07:01.210 --> 00:07:04.480
decide that you're better to
lead the project, we go,

130
00:07:04.480 --> 00:07:06.340
okay, okay. Now you're the
leader. And off you go,

131
00:07:06.340 --> 00:07:08.380
and then, you know, maybe
later you get tired of

132
00:07:08.380 --> 00:07:10.030
doing that and this has
happened to eclipse. You know,

133
00:07:10.030 --> 00:07:12.430
you've got other things to
do in your life. And

134
00:07:12.430 --> 00:07:14.410
so then I become the
leader for a while because

135
00:07:14.410 --> 00:07:16.720
everybody says, well, you know,
you're the guy who knows

136
00:07:16.720 --> 00:07:19.060
the architecture, you go off
and do it. And for

137
00:07:19.060 --> 00:07:20.890
the most part, these are
people who are using eclipse

138
00:07:20.980 --> 00:07:22.990
and they're fixing eclipse. I
mean, they're using it in

139
00:07:22.990 --> 00:07:25.210
their everyday life. Their job
may not necessarily be full

140
00:07:25.210 --> 00:07:28.390
time to be a committer
on eclipse or Yeah. Everybody

141
00:07:28.780 --> 00:07:31.870
who's using the, or who's
working on the eclipse environment

142
00:07:31.870 --> 00:07:34.480
is also using the eclipse
environment. I think it would

143
00:07:34.480 --> 00:07:36.850
be really hard to be
a developer on eclipse if

144
00:07:36.850 --> 00:07:39.250
you weren't using it in
everyday life, I suppose it's

145
00:07:39.250 --> 00:07:42.700
possible, but Full time. I
mean these member companies. So

146
00:07:42.700 --> 00:07:45.940
I mean, I'm a, I
assume a member company becomes

147
00:07:45.940 --> 00:07:48.220
a member company cause they
have some deep investment in

148
00:07:48.220 --> 00:07:50.620
eclipse they're using it or
they feel they're not just

149
00:07:50.620 --> 00:07:54.400
doing it out of to
be philanthropic. Well, it could

150
00:07:54.400 --> 00:07:56.920
be, I haven't actually spoken
with them and asked each

151
00:07:56.920 --> 00:07:59.500
one of them, why are
you doing this? Although I

152
00:07:59.500 --> 00:08:01.270
have to believe that most
of them are doing it

153
00:08:01.270 --> 00:08:06.040
because they have some corporate
market-based reason for doing that.

154
00:08:06.590 --> 00:08:08.530
It would, it wouldn't make
a lot of sense for

155
00:08:08.740 --> 00:08:11.860
that many companies to just
go out and donate time

156
00:08:12.430 --> 00:08:15.850
for no particular reason. So
I'm positive, you know, my

157
00:08:15.850 --> 00:08:18.910
belief without having done any
interviews that they're all doing

158
00:08:18.910 --> 00:08:22.180
that for some corporate reason
that trying to make money.

159
00:08:22.630 --> 00:08:24.970
One of the interesting things
about eclipse as an open

160
00:08:24.970 --> 00:08:28.630
source foundation versus other open
source foundations is that we're

161
00:08:28.930 --> 00:08:33.310
an explicitly commercial opensource group.
Our goal is for all

162
00:08:33.310 --> 00:08:35.260
of our member companies to
be able to make money

163
00:08:35.260 --> 00:08:38.560
with the open source that's
out there. Our goal isn't

164
00:08:38.560 --> 00:08:41.320
necessarily to give away free
software. Although there are sort

165
00:08:41.320 --> 00:08:43.570
of a, I was going
to say a vicious cycle,

166
00:08:43.570 --> 00:08:46.660
but it's not really vicious
a, a reinforcing cycle of,

167
00:08:46.840 --> 00:08:48.670
you know, if we have
enough users who are using

168
00:08:48.670 --> 00:08:51.340
the free stuff that provides
a market, which enables the

169
00:08:51.340 --> 00:08:53.890
companies to sell additional products
on top of that market

170
00:08:53.890 --> 00:08:58.230
or services or something. But
we're definitely aiming at our

171
00:08:58.230 --> 00:09:00.480
goal is for companies to
make money on top of

172
00:09:00.480 --> 00:09:03.020
the things that are out
there. So let's say that

173
00:09:03.020 --> 00:09:05.270
I, and forgive me my
ignorance here, because I'm trying

174
00:09:05.270 --> 00:09:06.710
to get my head around
this. Let's say that I

175
00:09:06.710 --> 00:09:11.180
want to start a company
around this new LOL code

176
00:09:11.390 --> 00:09:13.610
that I just, that had
been released. This is the

177
00:09:13.930 --> 00:09:16.130
funny cats that speak funny
languages, and I've developed this

178
00:09:16.130 --> 00:09:18.770
new language and we have
no idea though. All the

179
00:09:18.770 --> 00:09:21.650
LOL code is being written
in notepad. I could take

180
00:09:21.860 --> 00:09:26.750
a eclipse and extend it,
add plugins, add understanding of

181
00:09:26.750 --> 00:09:29.690
this environment, Right? So you
would want to add the,

182
00:09:29.930 --> 00:09:31.850
you would want to add
the plugins that would make

183
00:09:31.850 --> 00:09:35.510
an IDE for LOL code.
And in fact, we have

184
00:09:35.510 --> 00:09:37.730
a new project at eclipse
that helps you do that.

185
00:09:38.030 --> 00:09:40.820
You basically define the syntax
and the semantics of language,

186
00:09:40.820 --> 00:09:44.390
and it generates an IDE
for you around whatever language

187
00:09:44.390 --> 00:09:47.210
you've typed in. Wow. Now,
you know, obviously the IDs

188
00:09:47.210 --> 00:09:49.100
is not as polished as
say, you might find in

189
00:09:49.100 --> 00:09:51.500
visual studio where you've had
hundreds of people working on

190
00:09:51.740 --> 00:09:54.110
all the little details, but
it whips out the basic

191
00:09:54.110 --> 00:09:56.810
structure for you in, in
fairly quick order. So then

192
00:09:56.810 --> 00:09:59.360
you can make your LOL
code IDE on top of

193
00:09:59.360 --> 00:10:01.340
the clip. And does it
say eclipse, or does it

194
00:10:01.340 --> 00:10:03.950
say Scott seller L code
ID? I mean, how much

195
00:10:04.010 --> 00:10:05.900
I can brand this really?
I mean, then I can

196
00:10:05.900 --> 00:10:07.610
go and sell it. You
can brand it as much

197
00:10:07.610 --> 00:10:11.560
as you want. And some
people do there are we,

198
00:10:11.560 --> 00:10:15.110
we found that generally in
the embedded space companies tend

199
00:10:15.110 --> 00:10:18.650
to build a branded IDE
on top of eclipse that

200
00:10:18.650 --> 00:10:20.630
you know, is eclipse. If
you're good at it, cause

201
00:10:20.630 --> 00:10:21.680
you sort of look at
you go, Oh, that looks

202
00:10:21.680 --> 00:10:24.800
like eclipse windows, but it
doesn't say eclipse anywhere. And

203
00:10:24.800 --> 00:10:28.100
that in the server side
space, 10 people tend to

204
00:10:28.100 --> 00:10:30.740
build on top of eclipse
and then add extensions to

205
00:10:30.740 --> 00:10:33.620
that. So it says eclipse,
but then with their extensions

206
00:10:33.620 --> 00:10:35.690
on top of it, Probably
because I think in the

207
00:10:35.690 --> 00:10:38.600
server space, the name eclipse
holds some, some weight in

208
00:10:38.600 --> 00:10:41.360
some sense of quality and
we're, we're, we're getting something

209
00:10:41.360 --> 00:10:43.640
that we can count on.
So they, they will, they

210
00:10:43.640 --> 00:10:47.060
feel the developer who's consuming
that end product feels comfort

211
00:10:47.060 --> 00:10:49.400
and that this is built
on eclipse. Yeah, that could

212
00:10:49.400 --> 00:10:52.580
be. The other thing we
found is that companies, when

213
00:10:52.580 --> 00:10:55.250
they first moved to using
eclipse as an open source

214
00:10:55.370 --> 00:10:58.580
platform, feel that they need
to put a brand around

215
00:10:58.580 --> 00:11:00.590
the whole thing. So they
worked very hard to make

216
00:11:00.590 --> 00:11:02.510
it, their own thing just
happens to be built on

217
00:11:02.510 --> 00:11:06.830
top of eclipse and then
relatively quickly their customers say,

218
00:11:07.040 --> 00:11:08.870
Oh, I see it's built
on top of eclipse. I'd

219
00:11:08.870 --> 00:11:11.060
like to use this other
tool, which has also built

220
00:11:11.060 --> 00:11:14.420
on top of eclipse in
combination with your tool. And

221
00:11:14.540 --> 00:11:17.060
the first company goes, well,
we didn't anticipate that. So

222
00:11:17.060 --> 00:11:18.800
there's not really a way
to do that. And then

223
00:11:18.800 --> 00:11:22.010
their customers drive them into
being more open and allowing

224
00:11:22.130 --> 00:11:25.400
the customers to combine different
tools from different vendors. And

225
00:11:25.400 --> 00:11:27.440
that turns out to be
a great attraction for the

226
00:11:27.440 --> 00:11:30.350
customers. And then they try
and buy more tools that

227
00:11:30.350 --> 00:11:32.570
are based on eclipse because
they have this ability to

228
00:11:32.570 --> 00:11:35.450
combine them. So there is
there a distinct difference between

229
00:11:35.450 --> 00:11:38.930
the autogeneration of the branded
IDE on the one side

230
00:11:38.930 --> 00:11:42.530
and the extending eclipse proper
through extensions? Well, what it

231
00:11:42.530 --> 00:11:45.710
ends up being is do
you have an installer and

232
00:11:45.710 --> 00:11:48.200
that creates an exe that
you double click to start

233
00:11:48.200 --> 00:11:50.690
it up, or do you
take an existing eclipse image

234
00:11:50.690 --> 00:11:53.650
and install plugins into that?
That's sort of the, I

235
00:11:53.650 --> 00:11:57.190
see, I see. And what
are the licensing requirements? If

236
00:11:57.190 --> 00:11:59.170
I was going to go
make my LOL code eclipse

237
00:11:59.170 --> 00:12:01.270
ID, do I have to
pay you two? Who do

238
00:12:01.270 --> 00:12:04.410
I pay? All of the
eclipse code is licensed. All

239
00:12:04.410 --> 00:12:07.020
of the eclipse open source
code is licensed under the

240
00:12:07.020 --> 00:12:10.980
eclipse public license, which is
one of these licenses, which

241
00:12:10.980 --> 00:12:13.590
requires that if you modify
the code, you distribute the

242
00:12:13.590 --> 00:12:17.100
modifica modified code, but it's
not viral in the GPL

243
00:12:17.100 --> 00:12:19.050
sense where it doesn't attach
itself to all the rest

244
00:12:19.050 --> 00:12:22.410
of your code. So this
means that you can write

245
00:12:23.040 --> 00:12:28.050
commercially licensed plugins and ship
them with eclipse and that

246
00:12:28.110 --> 00:12:32.430
your commercially licensed plugins don't
become polluted by the EPL.

247
00:12:33.060 --> 00:12:34.800
But if I had to
modify eclipse to do it

248
00:12:35.400 --> 00:12:38.370
Right, if you modify the
basic lips code, the EPL

249
00:12:38.370 --> 00:12:40.680
says that you then have
to release that basic clips

250
00:12:40.740 --> 00:12:43.260
modifications out to the world
to help the rest of

251
00:12:43.260 --> 00:12:45.330
the world. Hmm. And that
I wouldn't have to do

252
00:12:45.330 --> 00:12:49.230
the, I wouldn't have to
ship the source code to

253
00:12:49.230 --> 00:12:52.230
my extension. Absolutely not. So
one of the things that

254
00:12:52.230 --> 00:12:53.580
I thought would be of
interest to some of the

255
00:12:53.580 --> 00:12:56.520
Microsoft developers that are listening,
is this really amazing ID

256
00:12:56.820 --> 00:13:01.050
based on eclipse called Aptana.
That is a JavaScript ID.

257
00:13:01.050 --> 00:13:04.050
And I didn't know it
was eclipse until I noticed

258
00:13:04.050 --> 00:13:05.670
some of the windows and
the buttons. And I said,

259
00:13:05.670 --> 00:13:07.680
wow, that really looks like
a clips went into the

260
00:13:07.680 --> 00:13:10.080
preferences and noticed that it
was built as an add

261
00:13:10.080 --> 00:13:13.320
on. Now they've built both
a community edition and a

262
00:13:13.320 --> 00:13:16.260
pro edition. Is that a
real common way for a

263
00:13:16.260 --> 00:13:18.600
commercial company to still have
a foot and open source

264
00:13:18.600 --> 00:13:21.510
by open, by offering a
free version and then by

265
00:13:21.510 --> 00:13:25.110
offering a commercially licensed version
all based on eclipse? Well,

266
00:13:25.110 --> 00:13:26.970
I think it is. And
I actually think that when

267
00:13:26.970 --> 00:13:30.240
you go that route, it's
you, you go back to

268
00:13:30.450 --> 00:13:34.590
when we were building tools,
you know, 10, 15 years

269
00:13:34.590 --> 00:13:38.700
ago, even visual studio had
a personal edition, a professional

270
00:13:38.700 --> 00:13:41.280
edition in a enterprise edition.
I think where they were

271
00:13:41.280 --> 00:13:44.040
called and the personal one
was low cost and the

272
00:13:44.040 --> 00:13:46.410
professional one was more cost
and so on. And now

273
00:13:46.410 --> 00:13:48.720
with this open source model
that Aptana is using and

274
00:13:48.720 --> 00:13:51.300
various other people are using
the, the personal edition has

275
00:13:51.300 --> 00:13:55.290
become free, right? And then
you have these more expensive

276
00:13:55.290 --> 00:13:58.710
additions. I mean, IBM still
sells a version of eclipse

277
00:13:58.710 --> 00:14:02.160
called rational application developer. You
know, it's eclipse with a

278
00:14:02.160 --> 00:14:05.070
whole bunch more tools built
on top of it, which

279
00:14:05.070 --> 00:14:09.090
so you can get eclipse,
which IBM is distributed now

280
00:14:09.090 --> 00:14:11.790
through the foundation, it's no
longer an IBM thing. Or

281
00:14:11.790 --> 00:14:14.490
you can buy rational application
developer, which is this full

282
00:14:14.490 --> 00:14:18.600
featured, you know, suite of
tools for doing enterprise size

283
00:14:18.610 --> 00:14:21.300
development. Hmm. And all these
are written in Java, all

284
00:14:21.300 --> 00:14:24.240
these plugins that's the primary
plugin architecture for eclipse is

285
00:14:24.240 --> 00:14:28.140
to write jar files and
write Java extensions. Yes. Currently

286
00:14:28.140 --> 00:14:31.230
you have to write all
your extensions in Java. I,

287
00:14:31.590 --> 00:14:33.120
you know, I, I wish
it were different. I wish

288
00:14:33.120 --> 00:14:36.000
you could write your extensions
in any programming language, but

289
00:14:36.030 --> 00:14:39.060
we have yet to actually
see that technology takeover. And

290
00:14:39.060 --> 00:14:42.390
there are certain, there are
certain technical reasons why that

291
00:14:42.390 --> 00:14:44.340
turns out to be difficult,
which if you have plenty

292
00:14:44.340 --> 00:14:46.230
of time in your podcast,
we can go into, or

293
00:14:46.230 --> 00:14:49.050
if you have another podcast
we could go into, but

294
00:14:49.050 --> 00:14:51.260
I think it would be
great. For instance, if I

295
00:14:51.260 --> 00:14:54.110
could be able to write
extensions in say JavaScript or

296
00:14:54.140 --> 00:14:56.270
PHP, which I happen to
be doing a lot of.

297
00:14:56.360 --> 00:14:58.520
Yeah. Or if I'm a
C sharp programmer, if I

298
00:14:58.520 --> 00:15:00.680
were to write my extensions
in C sharp and have

299
00:15:00.680 --> 00:15:02.810
them work on eclipse, right.
Because there are people out

300
00:15:02.810 --> 00:15:06.290
there who want to use
eclipse, who don't have necessarily

301
00:15:06.290 --> 00:15:09.710
a lot of Java experience.
The Aptana example is great.

302
00:15:09.710 --> 00:15:11.810
Those people are really sharp
people. They have a great

303
00:15:11.810 --> 00:15:14.360
community built around that product,
but a lot of those

304
00:15:14.360 --> 00:15:17.510
people are either Ruby programmers,
cause Aptamil also does Ruby

305
00:15:17.870 --> 00:15:21.470
or JavaScript programmers, neither of
which translates directly to being

306
00:15:21.470 --> 00:15:23.810
a Java programmer. So it'd
be great if those people

307
00:15:23.810 --> 00:15:27.860
could write extensions to eclipse
in their own language, but

308
00:15:27.860 --> 00:15:30.220
we don't have that technology
yet. Yeah. It seems like

309
00:15:30.220 --> 00:15:31.750
it would be good if
there was some kind of

310
00:15:31.750 --> 00:15:33.730
a, a, and I'm thinking
of the Firefox kind of

311
00:15:33.760 --> 00:15:39.070
Zul XUL method of extension
where there's a, a manifest

312
00:15:39.070 --> 00:15:41.920
of some kind, an XML
manifest that then in the

313
00:15:41.920 --> 00:15:44.770
system will handle the instantiation
of whatever those objects and

314
00:15:44.770 --> 00:15:47.650
the bridging such that one
could build an abstraction layer

315
00:15:47.650 --> 00:15:50.260
that was generic across all
IDs. So that one could

316
00:15:50.260 --> 00:15:52.510
build a plugin that would
work in both official studio

317
00:15:52.510 --> 00:15:55.630
and in eclipse and in
whatever. But perhaps that's the

318
00:15:56.020 --> 00:15:58.540
view of a utopian future.
That'll never, Well, I have

319
00:15:58.540 --> 00:16:00.730
that same utopian view. So
I'm glad to hear you

320
00:16:00.730 --> 00:16:02.890
express that. I, cause I
think there's a lot of

321
00:16:02.890 --> 00:16:05.260
things that IDs do that
are common across all the

322
00:16:05.260 --> 00:16:08.230
IVs, that it would be
handy if we didn't have

323
00:16:08.230 --> 00:16:10.690
to reinvent them over and
over again. And one of

324
00:16:10.690 --> 00:16:13.330
the reason that Z eclipse
exists in the first place

325
00:16:13.330 --> 00:16:15.940
is because a lot of
the vendors in the Java

326
00:16:15.940 --> 00:16:19.060
IDE space looked around and
said, Hey, we're building the

327
00:16:19.060 --> 00:16:22.780
same tools for connecting to
say CVS. And you're building

328
00:16:22.780 --> 00:16:24.820
the same tools and this
other guy's building the same

329
00:16:24.820 --> 00:16:26.710
tools. Why don't we get
together and just build them

330
00:16:26.710 --> 00:16:29.230
once. And then we can
spend our energies building the

331
00:16:29.590 --> 00:16:31.840
quality product quality things on
top of it, rather than

332
00:16:31.840 --> 00:16:35.170
reinventing the same base stuff
over and over again. And

333
00:16:35.170 --> 00:16:38.020
I think that as IDs
get more sophisticated and visual

334
00:16:38.020 --> 00:16:41.530
studio gets more sophisticated and
eclipse tries to keep up

335
00:16:41.560 --> 00:16:44.560
or wherever you want to
make that, that dividing line,

336
00:16:45.250 --> 00:16:47.950
there are a larger and
larger base of those things

337
00:16:47.950 --> 00:16:50.680
that we could do in
common between not just visual

338
00:16:50.680 --> 00:16:53.770
studio, eclipse, but eclipse and,
and some of the other,

339
00:16:53.770 --> 00:16:56.800
you know, there's intelligi, which
is another popular Java environment,

340
00:16:56.800 --> 00:16:58.420
which has a lot of
great stuff in it, but

341
00:16:58.420 --> 00:17:00.370
they must also do a
lot of the same basic

342
00:17:00.400 --> 00:17:03.190
things and have plugins. Right.
It's really interesting to watch

343
00:17:03.190 --> 00:17:06.250
the community kind of self-correct
because I feel like on

344
00:17:06.250 --> 00:17:09.190
one really far side of
the extreme view of the

345
00:17:09.190 --> 00:17:11.470
people who believe that everything
should be open sourced and

346
00:17:11.500 --> 00:17:14.350
that, you know, free software
completely. And then of course

347
00:17:14.380 --> 00:17:16.090
the other side is that
everything should be commercial, but

348
00:17:16.090 --> 00:17:18.910
somewhere in the middle of
the community decides where the

349
00:17:18.940 --> 00:17:22.090
current water level is and
where things below that water

350
00:17:22.090 --> 00:17:24.970
level should be free. And
there's just kind of an

351
00:17:24.970 --> 00:17:27.910
expectation of free that is
kind of in the, in

352
00:17:27.910 --> 00:17:29.470
the ether. You can't quite
get your finger on it,

353
00:17:29.470 --> 00:17:32.260
but the community ultimately decides
that, you know, I think

354
00:17:32.560 --> 00:17:35.650
syntax highlighting IntelliSense editors. I
think we can all agree

355
00:17:35.650 --> 00:17:37.900
are something that we shouldn't
have to pay for much

356
00:17:37.900 --> 00:17:40.630
for, and there should be
value added on top of

357
00:17:40.630 --> 00:17:43.810
that before I will pay
my a hundred bucks. Right.

358
00:17:44.290 --> 00:17:46.510
And then when you bring
up the concept of free,

359
00:17:46.510 --> 00:17:50.070
there's free as in, it's
no cost to me because

360
00:17:50.310 --> 00:17:54.000
it's such a common idea
that, that everybody has implemented

361
00:17:54.000 --> 00:17:56.880
it now. And you know,
when I went to university

362
00:17:57.480 --> 00:17:59.760
syntax highlighting was a big
deal. It was the sort

363
00:17:59.760 --> 00:18:02.610
of thing we studied and
now, you know, syntax highlighting

364
00:18:02.640 --> 00:18:06.510
twelve-year-olds do that, you know,
on their, in their spare

365
00:18:06.510 --> 00:18:10.230
time. Right? And so then
there's also the concept of

366
00:18:10.230 --> 00:18:12.840
free as in free choice.
And one of the things

367
00:18:12.840 --> 00:18:15.750
that eclipse does, which I
think is really remarkable is

368
00:18:15.750 --> 00:18:19.500
it allows you to choose
whether you want to pay

369
00:18:19.500 --> 00:18:22.170
for something or not pay
for something. So let me

370
00:18:22.170 --> 00:18:24.630
give you an example of
support. There are companies in

371
00:18:24.630 --> 00:18:28.110
the eclipse ecosystem that will,
you can pay them to

372
00:18:28.110 --> 00:18:31.530
support eclipse for you, or
if you choose not to

373
00:18:31.530 --> 00:18:34.260
buy support, you could fix
the bugs yourself because all

374
00:18:34.260 --> 00:18:36.780
of the source code is
available. Or if you choose

375
00:18:36.780 --> 00:18:39.300
not to do that, you
could submit bugs through bug

376
00:18:39.300 --> 00:18:41.940
Zilla, to eclipse and hope
that people in the projects

377
00:18:41.940 --> 00:18:44.880
fix them. So you can
choose time waiting for people

378
00:18:44.880 --> 00:18:47.100
to fix them. You can
choose doing it yourself, or

379
00:18:47.100 --> 00:18:49.560
you can choose money where
you pay someone to do

380
00:18:49.560 --> 00:18:52.110
it right. And so you
have the opportunity to choose

381
00:18:52.110 --> 00:18:54.360
which way that's going to
be. And I think that's

382
00:18:54.360 --> 00:18:56.340
one of the real powers
of open source is that

383
00:18:56.340 --> 00:18:59.250
it gives you that choice
to how to spend your

384
00:18:59.250 --> 00:19:02.370
time and money. It doesn't
force you into a particular

385
00:19:02.370 --> 00:19:05.340
vendor's model of, well, you
have to pay for support,

386
00:19:05.700 --> 00:19:07.920
or you have to wait
two years for the next

387
00:19:07.920 --> 00:19:10.520
version or whatever it is.
I think that that's about

388
00:19:10.520 --> 00:19:13.730
the best definition of the
essence of open opensource means

389
00:19:14.180 --> 00:19:15.740
that I've heard in a
long time. I mean, that

390
00:19:15.740 --> 00:19:18.740
really resonates to me. I
think that the perspective that

391
00:19:18.740 --> 00:19:21.140
it should be free and
that the committers should jump

392
00:19:21.140 --> 00:19:23.990
on every support thing while
they're working on the next

393
00:19:23.990 --> 00:19:27.860
version is an unreasonable expectation
that it appears that some

394
00:19:28.070 --> 00:19:29.960
proponents of open sourcing to
have that kind of an

395
00:19:29.960 --> 00:19:33.830
opinion, Right? And, and we
at eclipse definitely don't. We

396
00:19:33.830 --> 00:19:37.580
acknowledge that each one of
our member companies supplies people

397
00:19:37.580 --> 00:19:41.180
to work on the various
projects. And typically those, those

398
00:19:41.180 --> 00:19:43.640
people who work on the
projects have a belief in

399
00:19:43.640 --> 00:19:45.620
open source. So they wouldn't
be working on it. But

400
00:19:45.620 --> 00:19:48.260
at the same time, they
work for some corporation that

401
00:19:48.260 --> 00:19:52.010
has particular goals in mind
about where the next generation

402
00:19:52.010 --> 00:19:55.760
of modeling tools should go
for instance. And so if

403
00:19:55.760 --> 00:19:59.750
you are, if your needs
correspond to their needs and

404
00:19:59.750 --> 00:20:01.760
their belief in the system,
then you're in great shape.

405
00:20:02.030 --> 00:20:04.190
And if they don't, you
have the opportunity to choose

406
00:20:04.190 --> 00:20:08.570
some other path well, staying
with the eclipse foundation, you

407
00:20:08.570 --> 00:20:10.370
can either make a new
plugin. You can modify the

408
00:20:10.370 --> 00:20:13.700
plugin, you could join the
project yourself and help guide

409
00:20:13.700 --> 00:20:16.580
it. You could, As a
person who's worked for Microsoft

410
00:20:16.580 --> 00:20:18.380
for just about two months
now, it's interesting to watch

411
00:20:18.380 --> 00:20:21.290
some of the discussions internally
because some of the, the,

412
00:20:21.290 --> 00:20:24.140
the younger people and youngers
and kind of air quotes,

413
00:20:24.770 --> 00:20:27.140
people who haven't been at
Microsoft for 15, 20 years

414
00:20:27.950 --> 00:20:31.520
in different meetings at every
opportunity, someone says, well, how

415
00:20:31.520 --> 00:20:35.120
can we get that source
out? Which is really unexpected.

416
00:20:35.120 --> 00:20:36.740
I did not expect to
be in these meetings where

417
00:20:36.740 --> 00:20:39.650
someone would say, we're going
to write XYZ. And we

418
00:20:39.660 --> 00:20:41.150
got to figure out some
way to get source out.

419
00:20:41.150 --> 00:20:42.680
And it turns out that
the things that are preventing

420
00:20:42.680 --> 00:20:45.500
us from doing that are
all of the infrastructure and

421
00:20:45.500 --> 00:20:47.710
the legal and this and
that. And the years of,

422
00:20:48.410 --> 00:20:51.670
of Microsoft newness working against
it. You know, they just

423
00:20:51.670 --> 00:20:54.780
released the.net framework as a
reference license. And apparently it

424
00:20:54.790 --> 00:20:57.670
took like two years of
legal wrangling to get to,

425
00:20:57.670 --> 00:21:00.820
okay, that, and I wanted
to get just a little

426
00:21:00.820 --> 00:21:03.250
widget. It's just a little
scroll bar benefit, little add

427
00:21:03.250 --> 00:21:06.370
in that a guy at
Microsoft is working on released,

428
00:21:06.760 --> 00:21:08.710
and I've been there on
and off working on this

429
00:21:08.710 --> 00:21:11.440
for two months to get
this silly little DLL with

430
00:21:11.440 --> 00:21:14.470
a silly little feature out.
And it's been released meetings

431
00:21:14.470 --> 00:21:18.730
and legal review and writing
ULAs and back and forth.

432
00:21:19.330 --> 00:21:22.000
But the fact that people
at Microsoft are willing to,

433
00:21:22.060 --> 00:21:26.020
to work for them. I
think we'll move Microsoft, hopefully

434
00:21:26.020 --> 00:21:28.840
more towards a company that
looks like some of these

435
00:21:28.840 --> 00:21:32.190
member companies that, that you're
describing. Yeah. And I think

436
00:21:32.190 --> 00:21:36.210
a key thing there that
I think that developers who

437
00:21:36.210 --> 00:21:39.510
just walk into this without
thinking about the deeper issues

438
00:21:39.510 --> 00:21:43.230
don't realize is that we
still all need to, we

439
00:21:43.230 --> 00:21:46.230
need to make money. And
somehow in the end, you

440
00:21:46.230 --> 00:21:49.140
need to be paid. I
need to be paid. The

441
00:21:49.140 --> 00:21:50.670
price of gas is going
up. I need to be

442
00:21:50.670 --> 00:21:55.260
paid more. So there needs
to be some model where

443
00:21:55.620 --> 00:21:58.230
even if we're making something
open, there's still a way

444
00:21:58.230 --> 00:22:00.900
for revenue to flow in
one way or another. And

445
00:22:00.900 --> 00:22:04.200
different companies have chosen different
models around that, around open

446
00:22:04.200 --> 00:22:09.180
source, but just giving everything
away for no cost is

447
00:22:09.180 --> 00:22:12.150
not gonna work. Right. And
there are many good reasons

448
00:22:12.150 --> 00:22:15.990
to make your, your software
open source. And obviously since

449
00:22:15.990 --> 00:22:18.180
I work for an opensource
foundation, I, I believe in

450
00:22:18.180 --> 00:22:21.210
them, but I don't believe
in giving everything away. And

451
00:22:21.210 --> 00:22:23.640
I was just giving a
talk last week to another

452
00:22:23.640 --> 00:22:25.140
company. And I was saying,
well, one thing you don't

453
00:22:25.140 --> 00:22:28.620
want to give away is
your core competency. You know,

454
00:22:28.620 --> 00:22:31.650
the thing that, that that's
the driving factor that makes

455
00:22:31.650 --> 00:22:32.970
all the money for your
company. You don't want to

456
00:22:32.970 --> 00:22:35.760
give that away. I worked
for a company for a

457
00:22:35.760 --> 00:22:40.590
while that contracted with a
large shipping container affirm and

458
00:22:40.590 --> 00:22:45.660
their core competency is scheduling
shipping containers to minimize inventory

459
00:22:45.660 --> 00:22:49.260
and warehouses. It's a really
interesting problem, but basically the,

460
00:22:49.330 --> 00:22:52.800
the inventory of, of their
customers floats around the ocean

461
00:22:52.800 --> 00:22:55.530
and these shipping containers and
can arrive at destinations at

462
00:22:55.530 --> 00:22:58.620
the right time. That algorithm
is where they make all

463
00:22:58.620 --> 00:23:01.770
their money. The rest of
it is not actually interesting,

464
00:23:02.220 --> 00:23:04.770
but there's no way that
they would ship that algorithm

465
00:23:04.770 --> 00:23:07.500
out as open source because
then their competitors could all

466
00:23:07.500 --> 00:23:10.950
have that exact same algorithm.
Exactly, exactly. That's the algorithm

467
00:23:10.950 --> 00:23:13.500
that the, the chief architect
has an, a plaque with

468
00:23:13.500 --> 00:23:17.130
a patent underneath it, hanging
above his desk, right. Handcuffed

469
00:23:17.130 --> 00:23:19.710
to it, but maybe 25
years from now, when 12

470
00:23:19.710 --> 00:23:22.170
year old start scheduling shipping
containers, then there's a new

471
00:23:22.170 --> 00:23:23.850
problem that we want to
crack. And that does get

472
00:23:23.850 --> 00:23:26.940
open-sourced. Exactly. Yeah. I want
to take a little bit

473
00:23:26.940 --> 00:23:30.270
of a, of a, of
a 90 degree left turn,

474
00:23:30.450 --> 00:23:32.430
because whenever I get the
opportunity to talk to someone

475
00:23:32.430 --> 00:23:38.010
who's been in the industry
for decades, plural like yourself,

476
00:23:38.040 --> 00:23:41.580
who has not only a
lot of experience, but also

477
00:23:41.580 --> 00:23:43.830
an advanced degree in these
kinds of things, I'm interested

478
00:23:43.830 --> 00:23:46.370
in your perspective on where
you think language is going.

479
00:23:46.370 --> 00:23:49.850
Because as a person who
has a computer science background,

480
00:23:49.850 --> 00:23:55.250
but not an advanced degree,
I'm always interested in some

481
00:23:55.250 --> 00:23:57.920
of the, the, the language
innovations like around, you know,

482
00:23:57.920 --> 00:24:02.750
C-sharp adding link and visual
basic adding XML, some of

483
00:24:02.750 --> 00:24:05.180
the arguments that are happening
between the Java purists and

484
00:24:05.180 --> 00:24:09.320
the Java pragmatists as, as
languages that are being developed.

485
00:24:09.320 --> 00:24:13.610
And you've gone to <inaudible>
many times. Do you think

486
00:24:13.610 --> 00:24:17.060
that we're breaking some, some
rules, are there absolute rules,

487
00:24:17.060 --> 00:24:19.340
like the, kind of the
Bucci and rules that shouldn't

488
00:24:19.340 --> 00:24:22.580
be shouldn't be touched? Or
is it okay that we're

489
00:24:22.580 --> 00:24:26.120
changing these languages in ways
that aren't, you know, pure

490
00:24:26.150 --> 00:24:27.920
and the kind of eighties
old kind of sense of

491
00:24:27.920 --> 00:24:30.700
the word? The interesting thing
is I am both a

492
00:24:30.700 --> 00:24:35.560
pragmatist and a purist in
this, in an interesting combination.

493
00:24:35.980 --> 00:24:38.830
I think that languages should
provide us with the pragmatic

494
00:24:38.830 --> 00:24:42.220
bits to allow us to
express our algorithms as quickly

495
00:24:42.220 --> 00:24:45.940
and as succinctly as possible.
I program in Java a

496
00:24:45.940 --> 00:24:48.280
lot, because eclipse is written
in Java, and I find

497
00:24:48.280 --> 00:24:50.740
it at times frustrating and
how verbose I have to

498
00:24:50.740 --> 00:24:53.560
be to do what appear
to be simple things. The

499
00:24:53.560 --> 00:24:55.690
language shouldn't be doing that
to me, it should make

500
00:24:55.690 --> 00:24:57.940
it as easy as possible
to do things. I think

501
00:24:57.940 --> 00:25:00.370
link is great because it
makes it so that I

502
00:25:00.370 --> 00:25:03.550
don't have to write a
lot of verbosity to get

503
00:25:03.880 --> 00:25:06.880
the simple concepts that I
want in terms of database

504
00:25:06.880 --> 00:25:10.420
queries. I link the visual
basic XML syntax also. I

505
00:25:10.420 --> 00:25:12.760
mean, if you've ever tried
to do XML processing in

506
00:25:13.000 --> 00:25:15.730
Java, it's just a nightmare,
right? I do a lot

507
00:25:15.730 --> 00:25:18.430
of XML processing and PHP
these days because there's simple

508
00:25:18.430 --> 00:25:20.560
XML and you just use
it as a data structure.

509
00:25:20.830 --> 00:25:23.290
Exactly what I want to
do. Right. At the same

510
00:25:23.290 --> 00:25:25.540
time, I find that a
lot of the new language

511
00:25:25.540 --> 00:25:28.750
designs are not paying attention
to some of the really

512
00:25:28.750 --> 00:25:31.870
great work that was done
even before I was around

513
00:25:31.960 --> 00:25:35.770
in university, having to do
with closures and full objects

514
00:25:35.770 --> 00:25:40.030
that way. And so they're
reinventing things in, in sort

515
00:25:40.030 --> 00:25:44.170
of badly. And that bothers
me because I think, you

516
00:25:44.170 --> 00:25:47.440
know, some of those concepts
like languages without closures in,

517
00:25:47.440 --> 00:25:49.870
in, in the two thousands
is just a mistake. I

518
00:25:49.870 --> 00:25:52.960
mean, why would you invent
a new language that didn't

519
00:25:52.960 --> 00:25:55.320
have closures today? Everybody knows
how to implement them, but

520
00:25:55.350 --> 00:25:59.650
knows how useful they are.
And that just boggles my

521
00:25:59.650 --> 00:26:02.470
mind. I'm sort of speechless.
Listen, let's, let's not assume

522
00:26:02.470 --> 00:26:04.210
that every day, every listener
knows what a closure is.

523
00:26:04.210 --> 00:26:07.540
Maybe you could just very
briefly, Right? So what's the

524
00:26:07.540 --> 00:26:10.210
quick definition of a closure.
A closure is a function

525
00:26:10.210 --> 00:26:12.250
without a name that I
can pass around as a

526
00:26:12.250 --> 00:26:14.920
first class object, so I
can make a function and

527
00:26:14.920 --> 00:26:16.270
I can pass it to
you, and then you can

528
00:26:16.270 --> 00:26:22.300
call that function. Right? Right.
So I think that, you

529
00:26:22.300 --> 00:26:24.730
know, the modern languages that
are doing things like adding

530
00:26:24.730 --> 00:26:28.210
link, adding face SQL and
XML and making it easier

531
00:26:28.210 --> 00:26:30.610
and easier for us to
write. I was looking at

532
00:26:30.610 --> 00:26:35.140
a demonstration of the Adobe
flex stuff last spring, and

533
00:26:35.290 --> 00:26:37.390
they've done some amazing things
with how to do, how

534
00:26:37.390 --> 00:26:39.310
to call web APIs without
having to do a lot

535
00:26:39.310 --> 00:26:41.860
of mechanism around it. It's
just built into the language

536
00:26:41.860 --> 00:26:44.130
is how you do that.
That's great. We should have

537
00:26:44.130 --> 00:26:46.320
more of that. But while
we do that, we should

538
00:26:46.320 --> 00:26:49.530
also use some of these
fundamental concepts that were invented

539
00:26:49.530 --> 00:26:52.500
back before they were really
able to be implemented well.

540
00:26:52.830 --> 00:26:56.100
Right. And then I think
that language design typically says,

541
00:26:56.100 --> 00:26:57.960
well, I have this existing
language and then I'm going

542
00:26:57.960 --> 00:27:00.660
to incrementally make it better.
And I, and the people

543
00:27:00.660 --> 00:27:02.970
who do that don't then
don't go back and go,

544
00:27:03.270 --> 00:27:05.070
well, I'm going to make
it better, but I want

545
00:27:05.070 --> 00:27:07.530
to use all the power
I've got. Now, if we

546
00:27:07.530 --> 00:27:11.790
look at computers today, disk
space is free. I mean,

547
00:27:11.790 --> 00:27:14.900
we're recording this podcast onto
a disc, I assume, or

548
00:27:14.910 --> 00:27:16.860
maybe even in a memory
because memory is free, right.

549
00:27:17.120 --> 00:27:22.070
It's actually a two gig
flashcard cost $13. Right. You

550
00:27:22.070 --> 00:27:25.190
know, when, when I first
started writing programs, memory was

551
00:27:25.310 --> 00:27:27.770
fabulously expensive. And so you
had to be very careful

552
00:27:27.770 --> 00:27:31.010
how you wrote your algorithms.
And so things like closures

553
00:27:31.010 --> 00:27:32.900
and languages didn't make a
lot of sense because we

554
00:27:32.900 --> 00:27:36.590
didn't have the raw CPU,
horsepower, the memory to spend

555
00:27:36.590 --> 00:27:39.020
on those data structures. And
we have that now. So

556
00:27:39.020 --> 00:27:42.560
rather than having you or
I do, essentially in our

557
00:27:42.560 --> 00:27:44.750
heads, what the computer could
do, we should have the

558
00:27:44.750 --> 00:27:47.210
computer be doing that work
for us and allow us

559
00:27:47.210 --> 00:27:51.050
to write the simplest clearest
statement of our algorithms that

560
00:27:51.050 --> 00:27:53.720
we're looking for. I've had
some really interesting discussions with

561
00:27:53.720 --> 00:27:56.210
some people internally at Microsoft.
And we did a podcast

562
00:27:56.210 --> 00:27:59.240
on this concept of parallel
link, which is going to

563
00:27:59.240 --> 00:28:02.930
be basically link with an
extra keyword that will recognize

564
00:28:02.930 --> 00:28:05.690
how many cores you have
on your machine and then

565
00:28:05.840 --> 00:28:07.700
scale appropriately. So if you
had a four loop, you

566
00:28:07.700 --> 00:28:09.200
know, you know, for your,
for an a, for each

567
00:28:09.200 --> 00:28:11.990
over a million things, and
you have four cores, it'll

568
00:28:11.990 --> 00:28:16.070
automatically handle all the threading,
the X parallel execution, and

569
00:28:16.070 --> 00:28:18.860
the coming back together, all
that kind of stuff. It

570
00:28:18.860 --> 00:28:21.500
seems like all of us,
Microsoft included kind of the

571
00:28:21.500 --> 00:28:23.360
languages are playing catch up
a little bit, cause no

572
00:28:23.360 --> 00:28:25.850
one ever expected. I mean,
three years ago, I would

573
00:28:25.850 --> 00:28:27.350
never have said that I
would be running a quad

574
00:28:27.350 --> 00:28:30.890
core machine. And now they're
saying 16 core within a

575
00:28:30.890 --> 00:28:33.020
year. Right. And you know,
it used to be, you

576
00:28:33.050 --> 00:28:34.700
you'd have to write four
Tran and then you'd have

577
00:28:34.700 --> 00:28:37.340
to manually unroll all the
loops based on the number

578
00:28:37.340 --> 00:28:39.830
of levels of, of parallels
in your head. So for

579
00:28:39.830 --> 00:28:42.620
instance, if you were programming
a Cray, you, you unrolled

580
00:28:42.620 --> 00:28:44.330
the loop in one way.
And if you were programming

581
00:28:44.330 --> 00:28:46.130
on a, you know, in
a different version of a,

582
00:28:46.130 --> 00:28:48.230
of a, Crane's an XMP
instead of a Y MP,

583
00:28:48.230 --> 00:28:50.780
you'd enroll it a different
way. And now we can

584
00:28:50.960 --> 00:28:53.510
basically almost do that in
hardware. Now you're talking about

585
00:28:53.510 --> 00:28:55.640
doing that in the, in
the interpreter or the compiler,

586
00:28:55.640 --> 00:28:58.430
but you know, some of
these modern Pentium chips almost

587
00:28:58.430 --> 00:29:01.520
do that on rolling in
the hardware itself. Right. And

588
00:29:01.520 --> 00:29:04.670
so that's great. Cause it
removes that level of thinking

589
00:29:04.670 --> 00:29:06.560
that I have to do
as a programmer. Now I

590
00:29:06.560 --> 00:29:08.690
still have to, as a
programmer, write my foreloops in

591
00:29:08.690 --> 00:29:12.920
a way that doesn't re
doesn't create cross iteration dependencies.

592
00:29:12.950 --> 00:29:15.890
Right. Cause otherwise it won't
enroll properly. Right. Right. And

593
00:29:15.890 --> 00:29:17.930
the same thing, you know,
when I'm writing a, a

594
00:29:17.930 --> 00:29:20.480
really high performance piece of
code, I need to think

595
00:29:20.480 --> 00:29:23.900
about how the cache lines
in the processor work. Because

596
00:29:24.110 --> 00:29:26.750
if I access my array
in the wrong order, I

597
00:29:26.750 --> 00:29:28.790
can actually cause it to
do a cash miss on

598
00:29:28.790 --> 00:29:31.940
every access. Whereas if I
rewrite it slightly differently, I

599
00:29:31.940 --> 00:29:33.440
can cause it to do
a cash hit on every

600
00:29:33.440 --> 00:29:36.560
access. Right. And that can
affect the speed of my

601
00:29:36.560 --> 00:29:39.590
program dramatically. But that's, that's
exactly the stuff we shouldn't

602
00:29:39.590 --> 00:29:42.280
have to think about. It
seems like the should, I

603
00:29:42.280 --> 00:29:44.860
should be able to express
my intent in a non

604
00:29:44.860 --> 00:29:47.770
ripping, a dry and in
a way that it's not

605
00:29:47.770 --> 00:29:50.500
a constant myself to repeat
myself, like I just did.

606
00:29:51.250 --> 00:29:54.100
And, and in a, a
simple mechanism that will be

607
00:29:54.100 --> 00:29:56.380
optimized for whatever environment I've
got. If I've had a

608
00:29:56.380 --> 00:29:58.720
low memory environment, it should
be optimized to me, it

609
00:29:58.720 --> 00:30:01.240
should automatically optimize. I feel
like just the fact that

610
00:30:01.900 --> 00:30:04.060
someone could be writing in
a, in a language and

611
00:30:04.060 --> 00:30:06.370
then think about what's going
on in the processor cache,

612
00:30:06.400 --> 00:30:08.920
it's just kind of an
uncomfortable, you shouldn't have a

613
00:30:08.920 --> 00:30:11.490
foot in each world. I
can imagine that, you know,

614
00:30:11.490 --> 00:30:14.610
that's our goal to eventually
have that work. That way.

615
00:30:15.870 --> 00:30:18.540
It's been my experience over
a couple of decades of

616
00:30:18.540 --> 00:30:21.660
doing this, that while we
continue to get better abstractions

617
00:30:21.660 --> 00:30:25.560
and we can require less
thinking of those details in

618
00:30:25.560 --> 00:30:28.380
the end to get the
maximum efficiency, you always have

619
00:30:28.380 --> 00:30:32.640
to think about those details,
the exact details that we

620
00:30:32.640 --> 00:30:36.270
have to think about change.
But you know, even, even

621
00:30:36.270 --> 00:30:40.410
today, when we're thinking about
having say wide area storage

622
00:30:40.410 --> 00:30:44.790
networks where, you know, I'm
using Google or Amazon S

623
00:30:44.790 --> 00:30:48.630
three for my storage instead
of my local disc. Yeah.

624
00:30:48.630 --> 00:30:51.510
That's great. Because it removes
a certain level of needing

625
00:30:51.510 --> 00:30:54.660
to do backups. For instance,
Amazon, some guy runs all

626
00:30:54.660 --> 00:30:57.240
the backups for me, I
guess. Yeah. And they were

627
00:30:57.240 --> 00:30:59.400
up in the clouds And
they're up in the cloud.

628
00:30:59.670 --> 00:31:01.980
But on the other hand,
it takes more time to

629
00:31:01.980 --> 00:31:04.590
get to that for every
access than it does to

630
00:31:04.590 --> 00:31:06.840
get to my local disc
for every access. If it

631
00:31:06.840 --> 00:31:10.140
didn't, you'd use it as
primary storage Uses primary storage,

632
00:31:10.410 --> 00:31:14.070
plus the sheer, the sheer
speed of electrons is going

633
00:31:14.070 --> 00:31:17.400
to prevent me from having,
you know, on your laptop

634
00:31:17.400 --> 00:31:19.890
here, the distance between the
memory and the CPU is

635
00:31:19.890 --> 00:31:22.950
only a couple inches difference
between even if there was

636
00:31:22.950 --> 00:31:26.430
a direct wire between here
in Seattle, the electrons aren't

637
00:31:26.430 --> 00:31:28.600
going to travel that fast.
Right. I mean there's after,

638
00:31:28.620 --> 00:31:32.070
while you approach physical limits.
So I'm just saying that,

639
00:31:32.580 --> 00:31:34.620
I think you're always going
to have to consider some

640
00:31:34.620 --> 00:31:37.170
constraint when you're writing code.
It's just, we'd like to

641
00:31:37.920 --> 00:31:40.080
think of fewer and fewer
of them. Although I didn't

642
00:31:40.080 --> 00:31:42.690
expect myself to be writing
C sharp and thinking about

643
00:31:42.990 --> 00:31:45.780
darn that speed of light
limitation, you know, if we

644
00:31:45.780 --> 00:31:47.370
can just get around, if
we just get around and

645
00:31:47.370 --> 00:31:50.010
see, then maybe I could
get some work done. Yeah.

646
00:31:50.040 --> 00:31:52.890
Although I think that for
majority of your programs, you

647
00:31:52.890 --> 00:31:54.870
don't have to think about
that, right? I mean, we're

648
00:31:54.870 --> 00:31:58.650
talking about, you know, the,
the smallest, lowest power things

649
00:31:58.650 --> 00:32:00.990
you can work on. I
worked for a while for

650
00:32:00.990 --> 00:32:04.170
a chip startup company that
was building chips for cell

651
00:32:04.170 --> 00:32:07.800
phones. And there, it was
really important to optimize the

652
00:32:07.800 --> 00:32:10.860
programs, to use the lowest
possible power because the battery

653
00:32:10.860 --> 00:32:14.820
only has 800 milli amp
hours in it. Right. And

654
00:32:14.820 --> 00:32:17.580
so it wasn't so much
speed as we were programmed

655
00:32:17.580 --> 00:32:20.430
for it, it was reduced
power consumption. And so we

656
00:32:20.430 --> 00:32:23.370
would know how much power
every instruction would take. And

657
00:32:23.370 --> 00:32:26.220
our compiler would tell us
every function, how, how much

658
00:32:26.250 --> 00:32:29.490
power that function would take.
And, you know, because that's,

659
00:32:29.490 --> 00:32:31.980
that was the constraint. When
running inside a cell phone,

660
00:32:32.280 --> 00:32:35.310
I heard that The Linux
guys right now are deeply

661
00:32:35.310 --> 00:32:40.400
involved in a kind of
a system wide power, kind

662
00:32:40.400 --> 00:32:42.620
of an audit. And they're
look they're, they have an

663
00:32:42.620 --> 00:32:45.530
application now that will basically
look at a program and

664
00:32:45.560 --> 00:32:48.440
give you an idea of
how friendly that program is.

665
00:32:48.440 --> 00:32:51.050
For example, I guess they
discovered that the volume slider

666
00:32:51.350 --> 00:32:54.830
was polling in like a
really, really tight loop. So

667
00:32:54.830 --> 00:32:57.620
when you were changing the
volume, your power consumption went

668
00:32:57.620 --> 00:32:59.840
way, way up. So they're
doing some kind of a

669
00:32:59.840 --> 00:33:02.120
system wide thing to look
at all the different applications

670
00:33:02.480 --> 00:33:06.020
so that an application could
be labeled green or not

671
00:33:06.020 --> 00:33:10.610
green. And one could say
that when doing a, a

672
00:33:10.610 --> 00:33:13.610
system wide audit that we've
raised the power lower, the

673
00:33:13.610 --> 00:33:17.030
power consumption by 20% through
good programming practices. So then

674
00:33:17.030 --> 00:33:20.450
power has become yet another
thing to optimize for. That's

675
00:33:20.450 --> 00:33:22.730
really interesting. Yeah. I find
it to be pretty crazy.

676
00:33:23.510 --> 00:33:26.330
My last question for you
back on eclipse before, before

677
00:33:26.330 --> 00:33:28.970
we go, is that, have
you, have you heard any

678
00:33:28.970 --> 00:33:32.090
demand for.net on eclipse or
C sharp on eclipse? Are

679
00:33:32.090 --> 00:33:34.550
there any projects that are
involved? Are there any member

680
00:33:34.550 --> 00:33:37.730
companies that are interested in
providing a.net environment such that

681
00:33:37.730 --> 00:33:40.870
I could use using eclipse
for my.network? So, so far

682
00:33:40.870 --> 00:33:43.330
there's no member company I
know of that's providing a

683
00:33:43.480 --> 00:33:47.110
C sharp environment, but the
people who work on the

684
00:33:47.110 --> 00:33:51.100
C C plus plus tooling
have made a prototype of

685
00:33:51.100 --> 00:33:53.560
a C-sharp tooling and they
actually have it and it's

686
00:33:53.560 --> 00:33:56.200
working and they've actually written
some programs on top of

687
00:33:56.200 --> 00:33:59.200
it so far. There's not
a lot of demand for

688
00:33:59.200 --> 00:34:02.170
C-sharp on eclipse because there's
great C-sharp tools out of

689
00:34:02.170 --> 00:34:05.950
the Microsoft environment, right. But
it's definitely been proven to

690
00:34:05.950 --> 00:34:08.620
work and you can, you
know, write your programs and

691
00:34:08.620 --> 00:34:10.510
run them and debug them.
And you know, the whole

692
00:34:10.510 --> 00:34:13.480
thing Definitely you found the
Aptana application to be a

693
00:34:13.480 --> 00:34:16.480
good compliment to visual studio,
even though the new version

694
00:34:16.480 --> 00:34:18.970
of his studio has JavaScript
debugging. One of the things

695
00:34:18.970 --> 00:34:21.850
I thought was amazing about
Aptana is that they'll be

696
00:34:21.850 --> 00:34:25.630
able to tell you in
JavaScript, HTML or CSS, which

697
00:34:25.630 --> 00:34:29.020
browsers will be supported on
for that particular thing. So

698
00:34:29.020 --> 00:34:32.230
if you're using some feature,
it'll, it has a beautiful

699
00:34:33.130 --> 00:34:36.730
IntelliSense that has a column
with a great out or

700
00:34:36.730 --> 00:34:40.570
not great out icon of
the browser that you're about

701
00:34:40.570 --> 00:34:41.920
to use. And you say,
well, look at this, I

702
00:34:41.930 --> 00:34:43.510
want this won't work in
opera, but it will work

703
00:34:43.510 --> 00:34:45.160
in this. And it will
work in that. It's a

704
00:34:45.160 --> 00:34:48.880
gorgeous idea. The Optima guys
are really sharp. And I

705
00:34:48.880 --> 00:34:51.940
think that's an example of
where they've chosen to make

706
00:34:51.940 --> 00:34:55.000
the right level of abstraction
to solve your problems so

707
00:34:55.000 --> 00:34:56.860
that you don't have to
think about them. You know,

708
00:34:56.860 --> 00:34:59.410
if you look at a
more traditional JavaScript editor just

709
00:34:59.410 --> 00:35:01.720
at it's JavaScript, and maybe
it does syntax highlighting and

710
00:35:01.720 --> 00:35:04.270
IntelliSense and so on, but
it's just sort of a

711
00:35:04.270 --> 00:35:08.170
pure JavaScript editor. It doesn't
go further and say, well,

712
00:35:08.890 --> 00:35:10.960
you know, if you're editing
Java script that uses the

713
00:35:10.960 --> 00:35:13.900
dojo framework, what else do
you want to know? Right.

714
00:35:13.900 --> 00:35:16.300
What are the little idioms
that you would use when

715
00:35:16.300 --> 00:35:18.010
doing that? And the attendant
guys have gone a little

716
00:35:18.010 --> 00:35:21.100
bit farther and done that
bit of it. Right? Well,

717
00:35:21.100 --> 00:35:22.990
that's, I think that's a
really great example of what

718
00:35:22.990 --> 00:35:25.210
can be done on eclipse.
And I really appreciate your

719
00:35:25.210 --> 00:35:27.490
taking the time to talk
to me today. This has

720
00:35:27.490 --> 00:35:29.470
been another episode of Hansel
minutes, and we will see

721
00:35:29.470 --> 00:35:39.430
you again next week. <inaudible>.

