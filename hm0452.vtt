WEBVTT FILE

1
00:00:00.180 --> 00:00:03.360
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.360 --> 00:00:06.300
they make the show possible.
Today's show is sponsored by

3
00:00:06.300 --> 00:00:10.500
developer express, become a UI
superhero with dev express controls

4
00:00:10.500 --> 00:00:15.030
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.420 --> 00:00:19.500
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.500 --> 00:00:23.610
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.700 --> 00:00:48.900
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com
from hanselminutes.com. It's Hansel minutes,

8
00:00:49.290 --> 00:00:53.280
a weekly discussion with web
developer and technologist Scott Hanselman.

9
00:00:53.730 --> 00:00:57.870
This is Lawrence Ryan announcing show
number four 52. In this

10
00:00:57.870 --> 00:01:02.340
episode, Scott talks with freelance
programmer game designer and creator

11
00:01:02.340 --> 00:01:10.110
of the JSI L project
Caitlin GAF. Hi, this is

12
00:01:10.110 --> 00:01:13.320
Scott Hanselman. This is another
episode of Hansel minutes today.

13
00:01:13.320 --> 00:01:15.780
I'm talking with Caitlin GAD,
who is the creator of

14
00:01:15.780 --> 00:01:20.580
JS I L it's a
compiler that transforms.net applications from

15
00:01:20.580 --> 00:01:24.510
their native format into actual
JavaScript. It's absolutely amazing. Thanks

16
00:01:24.510 --> 00:01:27.240
for talking to me today.
Hi. Yeah, it's great to

17
00:01:27.240 --> 00:01:30.630
talk with you. So I
have to admit, even before

18
00:01:30.630 --> 00:01:32.880
I put two and two
together and figured out that

19
00:01:32.880 --> 00:01:36.360
you were JSI L I
was already a fan because

20
00:01:36.360 --> 00:01:41.310
I have one of your
games, a scapegoat pinned in

21
00:01:41.310 --> 00:01:44.700
my browser toolbar. This is
like the true story. Nice,

22
00:01:44.790 --> 00:01:47.760
nice. I'm glad people enjoyed
that. The response was kind

23
00:01:47.760 --> 00:01:49.740
of difficult to gauge at
times, but when I looked

24
00:01:49.740 --> 00:01:51.780
at the actual bandwidth stats,
it was obvious a lot

25
00:01:51.780 --> 00:01:54.090
of people had been playing
it and it was cool

26
00:01:54.090 --> 00:01:57.450
to see like feedback and
bug reports from people on

27
00:01:57.450 --> 00:01:59.100
Linux and Mac who hadn't
been able to play the

28
00:01:59.100 --> 00:02:03.210
game before. Yeah, it was,
you know, honestly, when I,

29
00:02:03.270 --> 00:02:05.330
when I kind of stumbled
upon it, you know, the,

30
00:02:05.330 --> 00:02:08.160
the play on words got
me there, you know, it's

31
00:02:08.160 --> 00:02:10.920
a great name, then I'm
like, Oh, well this is

32
00:02:10.920 --> 00:02:14.790
a cute technology demo. And
then again, forgive me for

33
00:02:14.790 --> 00:02:17.550
being dismissive. Cause I'm dismissive
based on the name. And

34
00:02:17.550 --> 00:02:19.800
then, and then the techno,
and then I'm like, Oh

35
00:02:19.800 --> 00:02:22.530
my goodness, this is like,
it's like Prince of Persia

36
00:02:22.530 --> 00:02:25.170
with a goat and there's
all this stuff. And it's

37
00:02:25.170 --> 00:02:27.180
thick. It's pretty deep game.
There's a lot going on.

38
00:02:27.870 --> 00:02:31.410
Yeah. The creator of the
actual core game, Ian stocker

39
00:02:31.410 --> 00:02:34.620
is a really talented game
designer and he's also self-taught

40
00:02:34.620 --> 00:02:37.080
programmer. It's been a pleasure
working with him on both

41
00:02:37.080 --> 00:02:39.540
of those games. So it
was kind of great to

42
00:02:39.540 --> 00:02:41.970
have the opportunity to port
that. And one of his

43
00:02:41.970 --> 00:02:44.760
other games actually to the
browser, cause having a real

44
00:02:44.760 --> 00:02:48.210
world test cases for a
technology like this is incredibly

45
00:02:48.210 --> 00:02:51.420
valuable. It kind of keeps
you grounded in solving real

46
00:02:51.420 --> 00:02:53.850
problems for real people. Yeah,
totally. And you said both

47
00:02:53.850 --> 00:02:56.160
of these games referring now
that you have a scapegoat

48
00:02:56.190 --> 00:03:00.430
to, so yes, I did
a lot on his Scapegoat

49
00:03:00.430 --> 00:03:02.650
too. I was on there
for, from the beginning, but

50
00:03:02.800 --> 00:03:05.740
I also ported one of
his previous games before a

51
00:03:05.740 --> 00:03:09.040
scapegoat called soul caster. And
we put that up on

52
00:03:09.040 --> 00:03:10.930
new grounds and it had
a really good response. We

53
00:03:10.930 --> 00:03:14.340
were one of their first
HTML five games. Yeah. So

54
00:03:14.550 --> 00:03:18.780
people can see these@jsi.org and
you can play a scapegoat

55
00:03:18.780 --> 00:03:21.120
and soul Castro and some
other kind of cool platform

56
00:03:21.120 --> 00:03:24.630
or samples that are all
up there. Yep. Okay. So,

57
00:03:24.630 --> 00:03:28.950
so JSI L literally takes
you start at the I

58
00:03:28.950 --> 00:03:32.100
L level. You read that
out and you emit a

59
00:03:32.100 --> 00:03:35.970
similar kind of an IUL.
You're not emitting idiomatic, JavaScript.

60
00:03:35.970 --> 00:03:41.460
I assume Kind of an
interesting topic, essentially. I take

61
00:03:41.460 --> 00:03:44.070
the output of your build
process. So some of it's

62
00:03:44.070 --> 00:03:47.000
I L but I also
read any images that XMA

63
00:03:47.000 --> 00:03:49.620
might've produced, the read your
audio files. If you have

64
00:03:49.620 --> 00:03:51.750
resource files, I read those
ends. So you can have

65
00:03:51.750 --> 00:03:57.390
localized resources working. And it
actually originally did attempt to

66
00:03:57.390 --> 00:04:00.600
generate idiomatic JavaScript, but over
time it becomes kind of

67
00:04:00.600 --> 00:04:02.670
obvious that if you want
to support everything, you can't

68
00:04:02.670 --> 00:04:05.460
do that. It's sort of
the same dilemma that inscription

69
00:04:05.460 --> 00:04:09.540
has when it's translating native
code to Java scripts. And

70
00:04:09.540 --> 00:04:12.840
scripting is essentially a native
code compiler for JavaScript that's

71
00:04:12.840 --> 00:04:16.980
used for things like unity
and unreal engine. Eventually you

72
00:04:16.980 --> 00:04:19.590
kind of just have to
go. JavaScript is just my

73
00:04:19.590 --> 00:04:21.930
way of talking to the
processor. I'm going to do

74
00:04:21.930 --> 00:04:24.990
what I have to. So
at this point, JSI all

75
00:04:25.000 --> 00:04:27.930
kind of produces a halfway
point. The variables I'll have

76
00:04:27.930 --> 00:04:31.530
appropriate names. Methods I'll have
appropriate names is a very

77
00:04:31.530 --> 00:04:34.770
clear, concise representation of all
of your types and methods,

78
00:04:34.770 --> 00:04:37.380
signatures, but it also contains
a lot of sort of

79
00:04:37.860 --> 00:04:41.700
special magic to encode things
that the JavaScript runtime needs

80
00:04:41.700 --> 00:04:46.410
to know or information support
things like reflection. Yeah. So

81
00:04:46.410 --> 00:04:48.360
this isn't something that you're
going to want to edit

82
00:04:48.360 --> 00:04:49.950
after the fact, you're not
going to want to massage

83
00:04:49.950 --> 00:04:53.040
this code on the afterwards.
Certainly do it if you

84
00:04:53.040 --> 00:04:55.560
want to, but I highly
don't recommend it. It's sort

85
00:04:55.560 --> 00:04:58.560
of an option for debugging
and for kind of last

86
00:04:58.560 --> 00:05:00.450
resort things where you just
can't get the compiler to

87
00:05:00.450 --> 00:05:03.420
do what you want. I
prefer actually to just have

88
00:05:03.420 --> 00:05:05.390
you put the JavaScript you
want in there, and there

89
00:05:05.400 --> 00:05:08.010
are very simple backdoors. We'll
let you go. I just

90
00:05:08.010 --> 00:05:09.510
want you to run the
Chava script. And I want

91
00:05:09.510 --> 00:05:11.550
to be very specific about
what I want you to

92
00:05:11.550 --> 00:05:15.990
do. And these are ignorant
questions. So forgive me. But

93
00:05:16.290 --> 00:05:18.600
when we, when people who
are thinking about something like

94
00:05:18.600 --> 00:05:20.730
this in, then they're trying
to fit it into their

95
00:05:20.730 --> 00:05:24.750
larger worldview of JavaScript. There
are kind of these, these

96
00:05:24.750 --> 00:05:29.220
transforming languages, these like coffee
script and type script that

97
00:05:29.220 --> 00:05:34.560
kind of go laterally from
some language to mostly idiomatic

98
00:05:34.560 --> 00:05:37.710
JavaScript. And then there are
this other class of kind

99
00:05:37.710 --> 00:05:41.220
of like, would you say
it's a true compiler that

100
00:05:41.220 --> 00:05:45.240
it's, It certainly started out
as something much simpler. It

101
00:05:45.240 --> 00:05:47.550
was literally a fork of
just a decompiler where I

102
00:05:47.550 --> 00:05:50.010
said, I'm going to take
C-sharp and just kind of

103
00:05:50.010 --> 00:05:52.410
pull the types out and
it'll be JavaScript. That was

104
00:05:52.410 --> 00:05:56.070
the prototype. At this point,
it is a true compiler

105
00:05:56.070 --> 00:05:58.400
in the same sense that
I would call in scripting

106
00:05:58.460 --> 00:06:01.040
a true compiler. It's actually
very difficult to figure out

107
00:06:01.040 --> 00:06:04.640
how to categorize these projects
because they fit into a

108
00:06:04.640 --> 00:06:07.790
very weird spot. At this
point in scripting, for example,

109
00:06:07.790 --> 00:06:10.760
is literally just the backend
for claying another old VM

110
00:06:10.760 --> 00:06:15.020
compilers. It just ceased being
its own application. And GASL

111
00:06:15.020 --> 00:06:17.870
sort of occupies a similar
niche. Like at some point

112
00:06:17.870 --> 00:06:20.570
it will probably have visual
studio integration. And at that

113
00:06:20.570 --> 00:06:25.560
point, the actual executable kind
of disappears. It's interesting to

114
00:06:25.830 --> 00:06:28.400
view it as it's a
compiler, but the code that

115
00:06:28.400 --> 00:06:32.660
goes into it is more
of a sort of computer

116
00:06:32.660 --> 00:06:36.290
massage representation of what you
actually wrote as if you

117
00:06:36.290 --> 00:06:40.640
were taking like the output
of a painting program or

118
00:06:40.640 --> 00:06:42.530
a screenshot of a three
D model instead of the

119
00:06:42.530 --> 00:06:45.020
actual model and feeding that
through some sort of tool.

120
00:06:46.930 --> 00:06:49.030
I think people are kind
of like, as you said,

121
00:06:49.030 --> 00:06:51.820
they're trying to find a
way to refer to this

122
00:06:51.820 --> 00:06:54.640
thing. It's not a cross
compiler, it's a source to

123
00:06:54.640 --> 00:06:58.810
source compiler. It's a, it's
a transplanter Cross compiler and

124
00:06:58.810 --> 00:07:02.140
trends. Pilar, I think are
both pretty accurate source to

125
00:07:02.140 --> 00:07:04.330
source is a little fuzzy
since I'm not actually reading

126
00:07:04.330 --> 00:07:07.180
your source, that allows me
to support F sharp or

127
00:07:07.180 --> 00:07:10.540
vb.net and things like that.
But if you view IRL

128
00:07:10.540 --> 00:07:14.020
as the source, which you
can, there's a decompiler and

129
00:07:14.020 --> 00:07:16.450
recompile where that comes in
the SDK, it's a perfectly

130
00:07:16.450 --> 00:07:19.810
reasonable textual language, but it's
kind of a fuzzy distinction.

131
00:07:20.410 --> 00:07:24.100
It is, isn't it? Because,
you know, even C-sharp itself,

132
00:07:24.160 --> 00:07:27.750
doesn't go into native code,
you know, mostly it's, it's

133
00:07:27.760 --> 00:07:32.290
kinda, it's almost like abstract
syntax tree to source compiler.

134
00:07:33.460 --> 00:07:37.390
Yeah, absolutely. And eventually these
compilers start to very strongly

135
00:07:37.390 --> 00:07:41.530
resemble what you get in.net
or in the JVM where

136
00:07:42.010 --> 00:07:44.830
in both cases you essentially
have this sort of massage,

137
00:07:45.280 --> 00:07:49.120
semi optimized, semi compiled input,
and then the runtime kind

138
00:07:49.120 --> 00:07:50.860
of figures out what to
do with the rest of

139
00:07:50.860 --> 00:07:53.170
it. And just in this
case, the runtime happens to

140
00:07:53.170 --> 00:07:56.260
be JavaScript code that runs
in your browser instead of

141
00:07:56.260 --> 00:07:58.780
being a native runtime with
its own jet and everything.

142
00:07:59.800 --> 00:08:03.610
Now with M scripting, they
go, if I understand correctly

143
00:08:03.610 --> 00:08:07.690
from C or C plus
plus to this, LLVM, you

144
00:08:07.690 --> 00:08:12.400
know, lightweight low-level virtual machine
rather. And then from there

145
00:08:12.400 --> 00:08:15.820
to JavaScript, do you have
an intermediary format as well?

146
00:08:16.780 --> 00:08:19.150
I sort of do I
have an abstract syntax tree

147
00:08:19.150 --> 00:08:22.270
that's rather sophisticated. And at
some point I will probably

148
00:08:22.270 --> 00:08:26.170
move to an intermediate format
model. Like LLVM just because

149
00:08:26.170 --> 00:08:28.270
it simplifies a lot of
things. It's one of those

150
00:08:28.960 --> 00:08:31.540
lessons that you would learning
in school if you started

151
00:08:31.540 --> 00:08:33.640
computer science. But since I
didn't, I've kind of had

152
00:08:33.640 --> 00:08:38.200
to learn compiler theory ad
hoc really well. So that's,

153
00:08:38.380 --> 00:08:41.290
That's another interesting question because
there are, this seems like

154
00:08:41.290 --> 00:08:43.900
a very computer sciencey thing.
This seems like a project

155
00:08:43.900 --> 00:08:46.180
that like maybe someone would
do as their PhD thesis.

156
00:08:46.180 --> 00:08:47.710
And you don't, you're saying
you don't have a formal

157
00:08:47.710 --> 00:08:50.860
background in computer science. No,
no, no. It was purely

158
00:08:50.860 --> 00:08:53.530
something where I've been immersed
in the X and a

159
00:08:53.770 --> 00:08:56.670
development community for a long
and the ND scene before

160
00:08:56.670 --> 00:08:59.190
that. And I just watched
a lot of people building

161
00:08:59.190 --> 00:09:01.960
games with X and a,
and got frustrated seeing that

162
00:09:01.980 --> 00:09:04.530
their like freedom was being
constrained. They were losing control

163
00:09:04.530 --> 00:09:07.770
over their destiny. And for
over a year, I was

164
00:09:07.770 --> 00:09:09.690
just kind of thinking there
really should be a way

165
00:09:09.690 --> 00:09:11.400
to do something about this.
Like I wonder if there's

166
00:09:11.400 --> 00:09:14.460
something I can use. So
the impetus to do this

167
00:09:14.460 --> 00:09:17.580
was just seeing that decompiler
and going, I bet I

168
00:09:17.580 --> 00:09:19.470
could use this to solve
that problem. I should do

169
00:09:19.470 --> 00:09:23.100
it. It was just really
motivated by solving a problem.

170
00:09:23.130 --> 00:09:26.640
And I just kind of
focused on test cases and

171
00:09:26.640 --> 00:09:29.310
fixing test cases and incrementally
learned most of what I

172
00:09:29.310 --> 00:09:33.030
needed to while I went
along. One of the dirty

173
00:09:33.030 --> 00:09:35.970
secrets of compiler offering, I
would say is that you

174
00:09:35.970 --> 00:09:38.340
can actually just get pretty
far by cheating. You don't

175
00:09:38.340 --> 00:09:40.680
actually have to know how
everything works. You pay for

176
00:09:40.680 --> 00:09:44.270
it eventually, but It does
sound like even some of

177
00:09:44.270 --> 00:09:46.970
the world's great compilers, you
know, have some thing in

178
00:09:46.970 --> 00:09:49.190
the source where it's like,
I'm sorry that you had

179
00:09:49.190 --> 00:09:53.270
to see this. Yeah, yeah.
I feel like that's pretty

180
00:09:53.270 --> 00:09:55.400
common. And eventually you get
rid of that stuff, but

181
00:09:56.180 --> 00:09:58.400
your customers don't necessarily care.
As long as the app

182
00:09:58.400 --> 00:10:01.160
works. Just the first thing
that you got, like, what

183
00:10:01.160 --> 00:10:03.470
was the moment where you
got it to the point

184
00:10:03.470 --> 00:10:05.600
where like, I don't know
what you, maybe you drew

185
00:10:05.600 --> 00:10:08.180
a circle or something, or
you got an, a resource

186
00:10:08.180 --> 00:10:10.070
and you just like, raise
your hands in the air.

187
00:10:10.070 --> 00:10:13.460
And you're like, yes, what
was that moment? It was

188
00:10:13.460 --> 00:10:16.100
probably one or two things.
One of my first real

189
00:10:16.100 --> 00:10:18.740
world test cases was a
little Ray tracer sample. That's

190
00:10:18.740 --> 00:10:20.480
floating around on the internet.
That was sort of like,

191
00:10:20.780 --> 00:10:22.580
here's how you build a
Ray tracer in C sharp.

192
00:10:22.640 --> 00:10:24.320
And it used a windows
forums and a bunch of

193
00:10:24.320 --> 00:10:27.110
gross stuff. But when I
had that working and it

194
00:10:27.110 --> 00:10:30.620
was producing the correct results
and it ran reasonably fast,

195
00:10:30.620 --> 00:10:32.960
that was sort of like,
okay, like I did this,

196
00:10:32.960 --> 00:10:35.030
I didn't have to modify
the code of this example

197
00:10:35.030 --> 00:10:37.640
at all. It just worked
that kind of, at least

198
00:10:37.640 --> 00:10:39.590
proved to me like a
good portion of this as

199
00:10:39.590 --> 00:10:41.960
possible. I feel confident that
if I keep working on

200
00:10:41.960 --> 00:10:46.040
it, I'll know eventually where
the end lies. And then

201
00:10:46.040 --> 00:10:48.920
from that, the second milestone
was probably, I took one

202
00:10:48.920 --> 00:10:51.650
of the X and a
samples didn't make any changes

203
00:10:51.710 --> 00:10:53.990
and eventually had that, just
working out of the box.

204
00:10:53.990 --> 00:10:55.940
And at that point I
was like, okay, this is

205
00:10:55.940 --> 00:10:58.340
possible. I can probably solve
everything. If I have enough

206
00:10:58.340 --> 00:11:02.240
time, I don't have to
compromise. Or more importantly, I

207
00:11:02.240 --> 00:11:04.970
don't have to tell people,
you need to rewrite everything

208
00:11:04.970 --> 00:11:07.280
from scratch, where you have
to build for this, like

209
00:11:07.430 --> 00:11:09.560
in the first place. Like
you can take what you've

210
00:11:09.560 --> 00:11:12.890
built and do something with
it. And that was actually

211
00:11:12.890 --> 00:11:15.050
the most compelling part of
it. It's just going, not

212
00:11:15.050 --> 00:11:18.170
only does this work, but
it's empowering to people inside

213
00:11:18.170 --> 00:11:20.060
of me, like forcing them
to decide to do it

214
00:11:20.210 --> 00:11:23.750
upfront. So I went up
to your demos and went

215
00:11:23.840 --> 00:11:27.110
kind of laterally within the
carousel here and see a

216
00:11:27.110 --> 00:11:29.900
Ray tracer. And when I
look at the source, C-sharp

217
00:11:30.230 --> 00:11:32.510
for this kind of like
the hello world, Ray tracer,

218
00:11:32.840 --> 00:11:35.600
it's about 400 lines, you
know, maybe a little less

219
00:11:35.600 --> 00:11:38.570
minus comments. It has a
using statement and it says,

220
00:11:38.600 --> 00:11:42.050
JSI L dot Metta. What's
what is that in there

221
00:11:42.050 --> 00:11:43.790
for? And why does my
C-sharp need to know about

222
00:11:43.790 --> 00:11:46.970
JSI L T to get
involved? So that's actually a

223
00:11:46.970 --> 00:11:49.700
wholly op optional, and that's
basically there because it's from

224
00:11:49.700 --> 00:11:54.340
an earlier stage of the
project, essentially JSI has this

225
00:11:54.340 --> 00:11:56.740
layer of information you can
provide to the compiler that

226
00:11:56.740 --> 00:11:59.500
tells it what to do
with your code when converting

227
00:11:59.500 --> 00:12:03.130
it to Java script. So
the original application is unaffected

228
00:12:03.130 --> 00:12:05.380
by it, but it allows
you to say, okay, I

229
00:12:05.380 --> 00:12:07.360
want you to just replace
this function with some Java

230
00:12:07.360 --> 00:12:10.030
script I've written. I want
you to not translate this

231
00:12:10.030 --> 00:12:13.210
function. I want you to
do some special performance optimizations

232
00:12:13.210 --> 00:12:16.330
on it, that sort of
thing. So in this case,

233
00:12:16.360 --> 00:12:18.520
that's inline directly in the
code. You can see the

234
00:12:18.520 --> 00:12:22.600
attributes in one or two
places in practice from your

235
00:12:22.600 --> 00:12:24.780
applications. You don't have to
touch the code. There. There's

236
00:12:24.780 --> 00:12:28.770
a way to create A
new assembly, a new project

237
00:12:28.770 --> 00:12:32.250
that contains all the compiler
information. And then the compiler

238
00:12:32.250 --> 00:12:34.380
pulls that in with your
application and layers it over.

239
00:12:34.740 --> 00:12:37.710
So you can essentially have
a third party developer who

240
00:12:37.710 --> 00:12:39.750
doesn't even necessarily have the
source code to your app,

241
00:12:40.200 --> 00:12:44.370
just maintaining the compiler configuration
and the browser specific code

242
00:12:44.730 --> 00:12:47.640
and combine them together to
actually get you out. That's

243
00:12:47.640 --> 00:12:50.280
really interesting. Now we're on
a podcast, so people can't

244
00:12:50.280 --> 00:12:52.140
see this, but I would
encourage folks to try to

245
00:12:52.140 --> 00:12:55.290
follow along. I thought that
this was particularly clever because

246
00:12:55.290 --> 00:12:58.020
if you think about there's
the, you know, the truly

247
00:12:58.020 --> 00:13:01.530
abstract, not painting to the
screen aspects of a game,

248
00:13:02.220 --> 00:13:04.470
but then there's also things
like, you know, debug out.

249
00:13:04.710 --> 00:13:07.200
And in this little example,
you have some debug out

250
00:13:07.200 --> 00:13:09.960
where, you know, on a.net
person would just say, debug

251
00:13:09.960 --> 00:13:13.500
dot Rightline or trace dot
right line with the, the

252
00:13:13.500 --> 00:13:17.460
attribute technique. You were able
to say JS replacement. And

253
00:13:17.460 --> 00:13:20.460
I want to put not
the debug out here, cause

254
00:13:20.460 --> 00:13:21.990
there is no debug out.
I want to put it

255
00:13:21.990 --> 00:13:25.290
into this Dom element, but
then you're saying now that

256
00:13:25.290 --> 00:13:27.150
could be even done as
a separate plugin, almost an

257
00:13:27.150 --> 00:13:30.960
aspect oriented, you know, kind
of an aisle weaving. Yes.

258
00:13:30.960 --> 00:13:34.200
That's exactly what happens. And
in practice, I think almost

259
00:13:34.200 --> 00:13:36.900
all of this scaffolding here
could go away. I just

260
00:13:36.900 --> 00:13:39.570
haven't updated the example. Sure.
But it's very easy to

261
00:13:39.570 --> 00:13:43.530
incrementally go through and make
these adjustments where you can

262
00:13:43.530 --> 00:13:46.080
get an application up and
running at a basic level

263
00:13:46.080 --> 00:13:48.360
and then kind of incrementally
go in and figure out

264
00:13:48.810 --> 00:13:50.820
how do I want to
adjust this? Do I want

265
00:13:50.820 --> 00:13:54.360
to pull this logic JavaScript?
Do I want to Architect

266
00:13:54.360 --> 00:13:57.420
my applications? So it will
behave better. Like in a

267
00:13:57.420 --> 00:13:59.880
couple of cases you go,
this works out of the

268
00:13:59.880 --> 00:14:01.770
box, but I do actually
want to go in and

269
00:14:01.770 --> 00:14:04.110
refactor it a bit so
that the browser is able

270
00:14:04.110 --> 00:14:07.080
to handle it better. Like
the main execution change I

271
00:14:07.080 --> 00:14:10.440
made to this retrace, for
example, is it had a

272
00:14:10.440 --> 00:14:13.680
main loop that was synchronous.
I changed it to instead

273
00:14:14.040 --> 00:14:16.050
just gives you a call
back for a scan line

274
00:14:16.050 --> 00:14:18.240
and you see it's set
timeout function in there. That

275
00:14:18.240 --> 00:14:20.010
was the one change I
made because it made it

276
00:14:20.010 --> 00:14:22.410
much easier to go, okay,
now I'm not going to

277
00:14:22.410 --> 00:14:24.150
hang the browser. I'm going
to be a good browser

278
00:14:24.150 --> 00:14:27.120
citizen. I can make it
render slowly. If I want

279
00:14:27.120 --> 00:14:29.610
to kind of show the
progress that sort of, And

280
00:14:29.610 --> 00:14:33.090
the resulting in this, even
in this very early example

281
00:14:33.090 --> 00:14:35.670
here, the resulting is I
would say it's probably 70,

282
00:14:35.670 --> 00:14:38.730
80% very readable. There's some
spots where you're, you know,

283
00:14:38.730 --> 00:14:40.830
you're setting up your functions
and you're kind of building

284
00:14:40.830 --> 00:14:45.180
your, your, your, your, your
fields. But it's not the,

285
00:14:46.260 --> 00:14:47.700
it's not the mess. I
thought it would be. You

286
00:14:47.700 --> 00:14:50.040
know what I mean? It's
actually fairly readable. It's really

287
00:14:50.040 --> 00:14:53.570
neat. Yeah. And the Vast
majority of the noise in

288
00:14:53.570 --> 00:14:56.150
these code files can actually
be turned off. It's mostly

289
00:14:56.150 --> 00:14:59.600
from optimizations. So it's quite
possible that in the future,

290
00:14:59.600 --> 00:15:01.670
there will essentially be a
debug mode for if you

291
00:15:01.670 --> 00:15:05.150
just want some really nice
idiomatic JavaScript. It's the sort

292
00:15:05.150 --> 00:15:07.610
of thing that gets difficult
to maintain as a balance

293
00:15:07.610 --> 00:15:10.100
as a project like this
goes on, but it's definitely

294
00:15:10.100 --> 00:15:13.130
possible for a compiler like
this to produce really high

295
00:15:13.130 --> 00:15:15.440
quality code, because dotnet gives
you so much of the

296
00:15:15.440 --> 00:15:20.080
information you need. Well, it
seems like either really competing

297
00:15:20.140 --> 00:15:23.440
ends here, like you, you
just said a moment ago

298
00:15:23.440 --> 00:15:25.210
that, well, you know, I
could update the sample to

299
00:15:25.210 --> 00:15:27.790
use the new stuff, but
my initial reaction was like,

300
00:15:27.790 --> 00:15:31.150
no, don't, that's a great
learning experience. I could teach

301
00:15:31.150 --> 00:15:33.070
this to someone in a
game development class or a

302
00:15:33.070 --> 00:15:36.310
JavaScript class or a C
sharp class, three different kinds

303
00:15:36.310 --> 00:15:37.930
of classes. I would want
to show that kind of

304
00:15:37.930 --> 00:15:41.770
stuff. That's a different competing
end too. I want my

305
00:15:41.770 --> 00:15:44.140
app to run as fast
as possible in modern browsers.

306
00:15:45.760 --> 00:15:48.070
Yeah. And at this point
I kind of had gotten

307
00:15:48.070 --> 00:15:51.010
to the point where it
was producing functional idiomatic code

308
00:15:51.010 --> 00:15:53.800
with the exception of kind
of always finding corner cases,

309
00:15:53.800 --> 00:15:56.860
the compiler doesn't support. And
then the priority sort of

310
00:15:56.860 --> 00:15:59.620
became, okay, if this is
going to work for real

311
00:15:59.620 --> 00:16:02.500
world games and applications, it
has to be fast enough.

312
00:16:02.890 --> 00:16:04.570
Like it's never going to
be as fast as C

313
00:16:04.570 --> 00:16:09.280
code compiled to native or
compelled to unscripted. But my

314
00:16:09.280 --> 00:16:14.440
goal was to kind of@leastapproachsortoftheperformanceprofileof.net.
Like you don't want to

315
00:16:14.440 --> 00:16:17.440
have weird landmines. You hit
where you go, Oh, now

316
00:16:17.450 --> 00:16:19.630
I've got to rewrite my
whole whole application. So a

317
00:16:19.630 --> 00:16:22.240
lot of this work has
been that making it consistent,

318
00:16:22.240 --> 00:16:25.480
making it work well across
all the browsers. And thankfully

319
00:16:25.480 --> 00:16:27.760
that's all kind of done
incrementally. I can layer that

320
00:16:27.760 --> 00:16:30.610
all on top. So it's
still possible to turn it

321
00:16:30.610 --> 00:16:32.560
off or remove some of
it or adjust how those

322
00:16:32.560 --> 00:16:35.860
things work. And, and another
kind of, it looks like

323
00:16:35.860 --> 00:16:39.550
an early example, JSI L
version 0.79, what version is

324
00:16:39.550 --> 00:16:43.090
it on now? That's basically
the current version number, to

325
00:16:43.090 --> 00:16:45.550
be honest, there's not a
very aggressive versioning scheme here.

326
00:16:45.550 --> 00:16:48.820
I just have the number
occasionally. That's cool. You know,

327
00:16:48.820 --> 00:16:51.220
there's Semper. And then there's
like, eh, you know, it

328
00:16:51.220 --> 00:16:54.940
felt like a good thing.
Yeah. Looking at the web

329
00:16:54.940 --> 00:16:58.090
GL example, this one's a
lot more intense in the

330
00:16:58.090 --> 00:16:59.740
sense of, I've just gone
from kind of a static

331
00:16:59.740 --> 00:17:03.690
rate tracer to now I'm
really doing 3d. This I

332
00:17:03.730 --> 00:17:06.340
felt was when it really
started getting interesting, because then

333
00:17:06.340 --> 00:17:11.350
the question is how are
you translating between she sharp

334
00:17:11.410 --> 00:17:13.930
types that we, we use
an exit and that we

335
00:17:13.930 --> 00:17:16.750
know about and canvases and
things, and how do you,

336
00:17:16.750 --> 00:17:20.140
and how are you translating
when, when something exists in

337
00:17:20.140 --> 00:17:22.900
a one-to-one or near one-to-one
relationship in JavaScript. And then

338
00:17:22.900 --> 00:17:25.810
other times when that type
doesn't exist, we're going to

339
00:17:25.810 --> 00:17:29.830
have to make that, Yeah,
it's a difficult balance. And

340
00:17:30.460 --> 00:17:32.530
every compiler that does this
actually kind of takes a

341
00:17:32.530 --> 00:17:36.610
different approach. The approach here,
like the web GL example

342
00:17:36.610 --> 00:17:40.240
is actually a port of
a JavaScript tutorial for learning

343
00:17:40.240 --> 00:17:43.180
web GL. My attempt was
just to go, I'm going

344
00:17:43.180 --> 00:17:45.280
to show how you can
express these same patterns in

345
00:17:45.280 --> 00:17:49.000
C-sharp using the same lessons,
not having to adopt a

346
00:17:49.200 --> 00:17:51.750
of new stuff or a
special set of libraries. So

347
00:17:51.750 --> 00:17:55.980
the approach here was essentially
write C-sharp that is obvious

348
00:17:56.150 --> 00:17:59.670
idiomatic as possible, even though
web Joe code is obviously

349
00:17:59.670 --> 00:18:02.880
not going to run outside
of the browser. And then

350
00:18:03.180 --> 00:18:05.910
essentially just sort of write
the most obvious thing that

351
00:18:05.910 --> 00:18:07.920
seemed like it should work
and then make the compounder

352
00:18:07.920 --> 00:18:10.800
able to support it. So
in this case to interact

353
00:18:10.800 --> 00:18:12.780
with the web GL API
in the browser, it just

354
00:18:12.780 --> 00:18:16.170
uses dynamic. Dynamic is a
great springboard for expressing all

355
00:18:16.170 --> 00:18:20.820
of this. So things like
the web geo object and

356
00:18:20.820 --> 00:18:23.040
your textures and all of
that are just dynamic objects.

357
00:18:23.160 --> 00:18:25.560
You call the appropriate methods
you to type casts are

358
00:18:25.560 --> 00:18:28.230
good. And then things like
your Vertex buffers, or just

359
00:18:28.230 --> 00:18:30.150
the res you just make
sure that there are formats

360
00:18:30.150 --> 00:18:33.150
that if you were using
desktop open GL or direct

361
00:18:33.150 --> 00:18:34.860
3d, you make sure you
could pass them to the

362
00:18:34.860 --> 00:18:37.920
video driver and the compiler
and the libraries are able

363
00:18:37.920 --> 00:18:40.260
to do the rest. And
that approach works out. In

364
00:18:40.260 --> 00:18:42.810
most cases, you occasionally run
into kind of corners where

365
00:18:42.810 --> 00:18:44.790
you just have to go.
Now I've got to do

366
00:18:44.790 --> 00:18:47.430
something special, but for the
most part, that approach just

367
00:18:47.430 --> 00:18:50.930
works great. So these are,
these are Samples, but I'm

368
00:18:50.930 --> 00:18:54.170
assuming that a scapegoat as
kind of like the canonical

369
00:18:54.170 --> 00:18:56.510
example is quite a bit
larger. How much code are

370
00:18:56.510 --> 00:19:00.050
we talking about? I don't
know roughly how many lines

371
00:19:00.050 --> 00:19:02.960
of code escape code itself
is. I can get you

372
00:19:02.960 --> 00:19:05.240
a quick number on how
big the compiled site is.

373
00:19:06.470 --> 00:19:10.040
I'm assuming that we're looking
at thousands, not hundreds. I

374
00:19:10.040 --> 00:19:11.810
think it might be close
to. It's probably in the

375
00:19:11.810 --> 00:19:15.020
10 thousands, if not hundreds
of thousands range, the compile

376
00:19:15.030 --> 00:19:19.730
JavaScript for it is about
40 megabytes. When it hasn't

377
00:19:19.730 --> 00:19:23.450
been compressed, that's including a
lot of the type information

378
00:19:23.450 --> 00:19:26.720
that compiler spits out because
one of the important things,

379
00:19:26.720 --> 00:19:29.540
actually, a lot of real
applications use it is reflection.

380
00:19:29.570 --> 00:19:32.150
So I produce all the
information you need to reflect

381
00:19:32.570 --> 00:19:36.020
on the standard library and
your code. So that actually

382
00:19:36.020 --> 00:19:38.930
adds a lot of weight
to your executable. But beyond

383
00:19:38.930 --> 00:19:40.610
that, just like there's also
a lot of code in

384
00:19:40.610 --> 00:19:42.680
that game. It's a very
old code base with a

385
00:19:42.680 --> 00:19:45.440
lot of subsystems. Like it
has a full level editor

386
00:19:46.280 --> 00:19:49.550
has a physics simulator and
all that. So that's interesting.

387
00:19:49.550 --> 00:19:52.820
So you're saying that if
I, for whatever reason wanted

388
00:19:52.820 --> 00:19:56.270
to be in my C-sharp
code, reflecting on, I don't

389
00:19:56.270 --> 00:19:59.750
know, something in system dot
text, you're saying that that

390
00:19:59.750 --> 00:20:02.480
can come all the way
over. Yeah. The compiler pulls

391
00:20:02.480 --> 00:20:05.000
over all of the type
information for everything you use.

392
00:20:05.060 --> 00:20:09.530
So you have it. And
there's a third party contribution

393
00:20:09.530 --> 00:20:12.830
from some open source developers
that does that code elimination

394
00:20:12.890 --> 00:20:15.650
and other sorts of optimizations
on that. But the default

395
00:20:15.650 --> 00:20:18.620
cases, all of that's there
it'll just work for the

396
00:20:18.620 --> 00:20:21.860
vast majority of cases. So
you can create delegates, you

397
00:20:21.860 --> 00:20:24.860
can construct objects based on
a type at runtime. You

398
00:20:24.860 --> 00:20:27.950
can do all of that.
And so there is, there

399
00:20:27.950 --> 00:20:30.410
is a weight to that,
like of that 40 megs,

400
00:20:30.860 --> 00:20:34.280
some percentage that's that's measurable
is maybe stuff we don't

401
00:20:34.280 --> 00:20:35.990
need. And then, like you
said, you might strip that

402
00:20:35.990 --> 00:20:39.620
out later. Yeah. The vast
majority is actually, Oh, so

403
00:20:39.620 --> 00:20:42.470
you're arguably kind of bringing
down a JavaScript representation of

404
00:20:42.470 --> 00:20:46.010
the base class libraries of
BCL, just in case someone

405
00:20:46.010 --> 00:20:49.000
might use it without inspecting
that they are using it.

406
00:20:49.510 --> 00:20:52.930
Yes. Which is an interesting
other question, thinking about resources

407
00:20:52.930 --> 00:20:55.510
because you're bringing the PNGs
and the audio over, you

408
00:20:55.510 --> 00:20:59.260
said as well, if the,
if the person who was

409
00:20:59.260 --> 00:21:02.620
writing the C-sharp was maybe
loading those resources in an

410
00:21:02.620 --> 00:21:05.950
inappropriate way, doing it, not
embedding it in the, in

411
00:21:05.950 --> 00:21:09.820
the, in the project, but
rather loading it dynamically, they

412
00:21:09.820 --> 00:21:11.710
would probably, you wouldn't see
that. And then you might

413
00:21:11.710 --> 00:21:15.360
miss that resource. Yeah, that's
correct. If you're just using

414
00:21:15.360 --> 00:21:17.400
the file system directly, you
have to give the compiler

415
00:21:17.400 --> 00:21:21.330
a little help, but it
emulates the dotnet file system

416
00:21:21.330 --> 00:21:24.120
at a reasonable level. So
that if you give it

417
00:21:24.120 --> 00:21:26.400
a little help in terms
of configuration and providing the

418
00:21:26.400 --> 00:21:30.420
appropriate files next to the
generated JavaScript, it'll still work.

419
00:21:30.690 --> 00:21:33.210
So a scapegoat, for example,
didn't use resources for its

420
00:21:33.210 --> 00:21:35.280
level data. I just put
those in the game folder

421
00:21:35.680 --> 00:21:37.620
and that came over just
fine. I just had to

422
00:21:37.620 --> 00:21:40.200
kind of feed in a
little configuration to tell the

423
00:21:40.200 --> 00:21:43.140
browser here's where the level
files are. Here's what the

424
00:21:43.140 --> 00:21:45.330
file layout needs to look
like. So that saves will

425
00:21:45.330 --> 00:21:47.850
go into the right place.
And so, Which brings me

426
00:21:48.180 --> 00:21:50.520
to my next question, how
much was it a push

427
00:21:50.520 --> 00:21:53.850
a button and a full
game happened? And I assume

428
00:21:53.850 --> 00:21:57.810
that's the intent and how
much massaging hinting configuration did

429
00:21:57.810 --> 00:22:00.750
you need to make a
scapegoat? So for most of

430
00:22:00.750 --> 00:22:03.450
the smaller projects, it is
pretty close to just automatic

431
00:22:03.870 --> 00:22:06.420
for a scapegoat. And for
sole caster. In both cases,

432
00:22:06.420 --> 00:22:08.820
I found a good number
of compiler bugs during the

433
00:22:08.820 --> 00:22:12.120
process of getting it all
the way. But the games

434
00:22:12.120 --> 00:22:13.890
in both cases were up
and running to the title

435
00:22:13.890 --> 00:22:18.600
screen in about an hour.
And the final game browser

436
00:22:18.600 --> 00:22:21.900
version of escape scapegoat has
maybe 3000 lines of total

437
00:22:21.900 --> 00:22:23.850
changes to the game code.
And almost all of those

438
00:22:23.850 --> 00:22:26.910
were browser integration. I made
optimizations in a couple of

439
00:22:26.910 --> 00:22:29.280
places so that it would
be faster on both platforms

440
00:22:29.490 --> 00:22:31.920
and be playable on the
browser. But other than that,

441
00:22:31.920 --> 00:22:35.100
I didn't have to make
any code changes. Where do

442
00:22:35.100 --> 00:22:38.460
you see other jobs? I
have a script to, you

443
00:22:38.460 --> 00:22:41.850
know, I L JavaScript bridges,
like people always talk about

444
00:22:41.850 --> 00:22:44.670
script sharp, which was written
by a Microsoft employee and

445
00:22:44.670 --> 00:22:47.070
then a sharp kit to
a lesser extent. Where do

446
00:22:47.070 --> 00:22:50.130
you see those fitting into
a world? I feel like

447
00:22:50.130 --> 00:22:53.250
those definitely occupy an interesting
space. It's sort of sits

448
00:22:53.250 --> 00:22:57.270
alongside coffee script, where people
want to leverage a lot

449
00:22:57.270 --> 00:23:02.220
of their existing knowledge and
tool set to build browser

450
00:23:02.220 --> 00:23:04.650
specific applications from scratch. And
that allows them to do

451
00:23:04.650 --> 00:23:08.220
some really interesting things that
you couldn't necessarily do if

452
00:23:08.220 --> 00:23:11.360
you're just taking an existing
application and recording it. And

453
00:23:11.360 --> 00:23:14.790
I think that provides a
nice sort of counterpart to

454
00:23:14.790 --> 00:23:16.800
the approach that I use
in that in script and

455
00:23:16.800 --> 00:23:19.860
uses where it's about taking
an application you've already built.

456
00:23:20.610 --> 00:23:23.190
They cut it compliment each
other really well. For example,

457
00:23:24.030 --> 00:23:26.220
if you're using web GL
and you're probably using something

458
00:23:26.220 --> 00:23:29.520
like three dot JS and
nice convenience library that wraps

459
00:23:29.520 --> 00:23:32.730
everything, you wouldn't write something
like that. And in scripting

460
00:23:32.760 --> 00:23:35.730
or in JSBL, you'd probably
write it from scratch in

461
00:23:35.730 --> 00:23:38.730
a language that is designed
specifically for the web, whether

462
00:23:38.730 --> 00:23:41.310
it's type script or coffee
script or shift or script

463
00:23:41.310 --> 00:23:43.200
sharp. So it's nice to
have kind of both of

464
00:23:43.200 --> 00:23:47.960
those spaces occupied. It seems
like if I'm a game

465
00:23:47.960 --> 00:23:51.230
developer, I should spend time
looking at JSI L to

466
00:23:51.230 --> 00:23:53.720
get more my games in
more locations. And if maybe

467
00:23:53.720 --> 00:23:55.790
I were doing like an
NBC project, I might look

468
00:23:55.790 --> 00:23:58.540
at script sharp. That would
be my Advice. I think

469
00:23:58.540 --> 00:24:01.960
it's important to understand what
the trade offs are and

470
00:24:01.960 --> 00:24:05.350
whether you want to invest
the energy in having that

471
00:24:05.350 --> 00:24:07.420
sort of portability or whether
you just want to pick

472
00:24:07.420 --> 00:24:10.390
a set of tools and
two and everything for that.

473
00:24:10.390 --> 00:24:12.070
And just be okay with
the limitations that come with

474
00:24:12.070 --> 00:24:19.300
it. The, the getting started
instructions are pretty fantastic. You

475
00:24:19.300 --> 00:24:20.950
basically, you know, you build
it and you bring it

476
00:24:20.950 --> 00:24:23.770
down and then you run
JSI L C the compiler

477
00:24:23.770 --> 00:24:26.800
on your app. And then
the best part is Marvel

478
00:24:26.800 --> 00:24:29.530
at the convoluted error messages
is, is that pretty much

479
00:24:29.530 --> 00:24:31.090
it, you run it and
you see if it works

480
00:24:31.090 --> 00:24:33.100
and then you massage it
and you'd run it again.

481
00:24:33.670 --> 00:24:37.120
Yeah, Pretty much that getting
started guide is also sort

482
00:24:37.120 --> 00:24:39.040
of a wink and a
nod that this is very

483
00:24:39.430 --> 00:24:42.280
strongly a developer tool for
developers. At some point it

484
00:24:42.280 --> 00:24:44.740
will be sort of a
retail ready, packaged product with

485
00:24:45.400 --> 00:24:48.940
visual studio integration and such
things, but it's always been

486
00:24:48.940 --> 00:24:51.550
such a difficult thing to
get, right. That I want

487
00:24:51.550 --> 00:24:54.670
to make it clear and
upfront that this is something

488
00:24:54.670 --> 00:24:58.240
that requires you to understand
your application and the browser.

489
00:24:58.600 --> 00:25:00.310
And then I will do
everything in my power to

490
00:25:00.310 --> 00:25:02.500
make it easy for you
from there, but kind of

491
00:25:03.190 --> 00:25:05.950
here be dragons. Eventually that
message will probably get replaced

492
00:25:05.950 --> 00:25:08.530
with that. Nothing less scary.
I got ya. So if,

493
00:25:08.530 --> 00:25:11.110
if someone is coming in
here and, you know, they,

494
00:25:11.290 --> 00:25:14.080
they have their full game
and they're like, it didn't

495
00:25:14.080 --> 00:25:16.540
work. That's probably not who
we want as a customer

496
00:25:16.540 --> 00:25:18.700
right now. This is a
development tool, but it seems

497
00:25:18.700 --> 00:25:21.250
like There's great customer, as
long as they're okay with

498
00:25:21.280 --> 00:25:25.810
filing bug reports and either
being willing to do investigation

499
00:25:25.810 --> 00:25:27.880
and get things working, or
just accept that, like it's

500
00:25:27.880 --> 00:25:30.190
not working out on them.
So it's a great community

501
00:25:30.190 --> 00:25:33.130
to join, but it's not
a product yet. That's what

502
00:25:33.130 --> 00:25:35.590
I would say. Yes. Yeah.
But it sounds like the,

503
00:25:35.590 --> 00:25:39.190
the, you know, your plans
for the future really one's

504
00:25:39.190 --> 00:25:41.470
mind boggles, you know, with
the way visual studio is

505
00:25:41.470 --> 00:25:44.560
opening up, they've got node
and visual studio and Python

506
00:25:44.560 --> 00:25:48.040
and all these other languages.
One could see JavaScript as

507
00:25:48.040 --> 00:25:51.730
a target integrated within an
X and a application that

508
00:25:51.730 --> 00:25:54.220
you're running, that you're running
and developing and you hit

509
00:25:54.220 --> 00:25:57.670
build and you dynamically generate
both of them and have

510
00:25:57.670 --> 00:26:00.970
your automated tests run on
both targets, the JavaScript and

511
00:26:00.970 --> 00:26:05.410
the, the native. Yeah. That
reality is actually kind of

512
00:26:05.410 --> 00:26:08.020
already there. He just requires
a lot of manual setup.

513
00:26:08.560 --> 00:26:11.080
One of the examples, judge
just build the JavaScript out

514
00:26:11.080 --> 00:26:14.080
of visual studio when you
hit build, and then you

515
00:26:14.080 --> 00:26:15.970
just have to open it
in the browser. And there

516
00:26:15.970 --> 00:26:18.520
is a third party group
of open source developers out

517
00:26:18.520 --> 00:26:23.050
there who are building a
full WPF implementation for the

518
00:26:23.050 --> 00:26:25.780
browser on top of this
stack. And they have visual

519
00:26:25.780 --> 00:26:28.330
studio integration. They're working on
that as far as I

520
00:26:28.330 --> 00:26:30.130
know, provides a lot of
that outside of the box.

521
00:26:30.220 --> 00:26:33.160
So there's a lot of
pieces out there that prove

522
00:26:33.160 --> 00:26:35.020
that you could build that
whole experience. It's just a

523
00:26:35.020 --> 00:26:36.880
matter of getting there and
having it done. I think

524
00:26:37.960 --> 00:26:42.220
Sometimes I think people who
are maybe more maybe say

525
00:26:42.220 --> 00:26:44.790
kind of more straight narrow
corporate developers might look at

526
00:26:44.790 --> 00:26:47.440
a project like this and
maybe be afraid to, to

527
00:26:47.510 --> 00:26:49.890
share this with their boss
because they say, well, that

528
00:26:49.890 --> 00:26:52.590
doesn't really come from Microsoft,
or that's just true. It's

529
00:26:52.590 --> 00:26:55.020
too impossible to exist. You
know, how is this a

530
00:26:55.020 --> 00:26:58.530
thing like you're describing, you
know, a possible WPF implementation

531
00:26:58.530 --> 00:27:01.530
in a browser that's, that's
mind blowing, but I'm seeing

532
00:27:01.530 --> 00:27:05.100
more and more amazing stuff
being done where I was

533
00:27:05.100 --> 00:27:07.590
talking about Lego pieces. Like,
you know, you saw like

534
00:27:07.980 --> 00:27:10.890
this Lego piece, it would
probably snap into that Lego

535
00:27:10.890 --> 00:27:13.200
piece. If I just pushed
hard enough and wrote a

536
00:27:13.200 --> 00:27:15.900
little massaging code in the
middle, what do you say

537
00:27:15.900 --> 00:27:17.610
to the, to the straight
and narrow people who are

538
00:27:17.610 --> 00:27:19.440
like, I don't want to
touch this because it's too

539
00:27:19.440 --> 00:27:23.690
much, It's important. I think
as a developer, especially when

540
00:27:23.690 --> 00:27:27.170
you're maturing and growing and
you're educating your teammates, you

541
00:27:27.170 --> 00:27:30.410
want to destroy fear every
time you have the opportunity.

542
00:27:30.830 --> 00:27:33.650
Fear is this really natural
response. You have to, everything

543
00:27:33.650 --> 00:27:37.610
difficult in software engineering. And
as you get more experienced,

544
00:27:37.640 --> 00:27:39.560
it becomes possible to get
rid of it and know,

545
00:27:39.860 --> 00:27:41.780
okay, out of all this
stuff, all of it is

546
00:27:41.780 --> 00:27:43.850
possible. It's just the question
of how hard is it?

547
00:27:44.150 --> 00:27:47.090
How much am I going
to regret it? So with

548
00:27:47.090 --> 00:27:49.550
this sort of thing, really,
if you're an enterprise developer,

549
00:27:49.550 --> 00:27:51.650
your right to be afraid
of the risk that comes

550
00:27:51.650 --> 00:27:53.840
with it, you just need
to be willing to go,

551
00:27:53.840 --> 00:27:56.510
okay. Now I need to
understand how much of this

552
00:27:56.510 --> 00:28:00.080
sphere as well founded out
of these consequences, which ones

553
00:28:00.080 --> 00:28:02.780
am I willing to tolerate?
Is this sort of a

554
00:28:02.780 --> 00:28:04.850
trade off that I'm willing
to make for my project.

555
00:28:04.910 --> 00:28:06.710
And I think for many
projects, it's not the right

556
00:28:06.710 --> 00:28:09.650
trade off. You want something
that's more stable and has

557
00:28:09.650 --> 00:28:12.350
a rigid release schedule and
paid support. And for other

558
00:28:12.350 --> 00:28:15.620
projects, you're quite happy to
just adopt third party libraries,

559
00:28:15.980 --> 00:28:18.650
contribute fixes to upstream and
build on it. Sort of

560
00:28:18.650 --> 00:28:24.740
like the distinction between using
the Microsoft asp.net stack or

561
00:28:24.740 --> 00:28:27.710
using something like mottos stack.
We're using node dot JS.

562
00:28:27.740 --> 00:28:30.890
They're kind of different spheres,
but enterprises can use both.

563
00:28:31.220 --> 00:28:32.810
It's just a matter of
whether it's the right fit

564
00:28:32.810 --> 00:28:35.210
for you and your team.
I think that's really, really

565
00:28:35.210 --> 00:28:37.820
well said. What do you
think about the future now

566
00:28:37.820 --> 00:28:40.640
that last week they opened
sourced and they're starting to

567
00:28:40.640 --> 00:28:43.370
open source all this stuff
and Roslyn's open source. Does

568
00:28:43.370 --> 00:28:45.350
that make your life easier?
Does that make you plug

569
00:28:45.350 --> 00:28:49.490
in even better At present?
It doesn't really affect anything,

570
00:28:49.490 --> 00:28:52.250
but it certainly, I think
number one, it just kind

571
00:28:52.250 --> 00:28:55.820
of cements.net status as sort
of the future of this

572
00:28:55.880 --> 00:28:59.690
particular type of technology. It's
never going to replace LLVM.

573
00:29:00.110 --> 00:29:02.780
But at this point it
does everything that the JVM

574
00:29:02.780 --> 00:29:05.570
was promised to do while
offering languages and tools that

575
00:29:05.570 --> 00:29:08.390
people like a lot better.
And it is now firmly

576
00:29:08.690 --> 00:29:11.030
under the control of the
community and not just Microsoft.

577
00:29:11.030 --> 00:29:12.740
So you have a lot
more confidence than it's not

578
00:29:12.740 --> 00:29:16.790
gonna vanish without notice. And
the open source certainly makes

579
00:29:16.790 --> 00:29:20.270
it easier to support everything
from the side of a

580
00:29:20.270 --> 00:29:23.300
compiler. Like it means that
in the near future, I

581
00:29:23.300 --> 00:29:25.310
will not have to write
my own runtime library. I

582
00:29:25.310 --> 00:29:27.740
can just compile theirs. That
will be a huge boon.

583
00:29:28.310 --> 00:29:31.580
So it definitely means good
things for the future of

584
00:29:31.910 --> 00:29:34.550
J and I think also
competitors like script sharp, we'll

585
00:29:34.550 --> 00:29:36.920
be able to adopt more
of that Official library. Yeah,

586
00:29:36.920 --> 00:29:39.230
it does. It does bring
a question of how many

587
00:29:39.230 --> 00:29:43.270
different things where you could
refactor your code by subtracting,

588
00:29:43.270 --> 00:29:45.310
because if you got the
code for the base class

589
00:29:45.310 --> 00:29:47.320
library for the core run
time, then what could you

590
00:29:47.320 --> 00:29:51.010
just, you know, right now
you're pulling the ILO out

591
00:29:51.010 --> 00:29:53.320
and looking at the AST,
maybe you just compile straight

592
00:29:53.320 --> 00:29:58.330
across or whatever, something like
that is always possible. It

593
00:29:58.510 --> 00:30:00.730
is a scapegoat, the biggest
game that has been done,

594
00:30:00.730 --> 00:30:02.080
or are there any other
games out there that you

595
00:30:02.080 --> 00:30:05.020
can mention that are using
this or are they secret?

596
00:30:05.800 --> 00:30:07.990
I think there are some
private projects that are bigger.

597
00:30:08.290 --> 00:30:12.280
There's one customer who has
a rather large enterprise WPF

598
00:30:12.280 --> 00:30:16.180
application that they have working
in the browser actually using

599
00:30:16.180 --> 00:30:19.330
them on a runtime library.
But that's not at a

600
00:30:19.330 --> 00:30:21.040
state where it's actually kind
of ready to play out

601
00:30:21.040 --> 00:30:22.840
in public. And likewise, there
are a couple of games

602
00:30:22.840 --> 00:30:25.060
that are a bit larger
escape code is a really

603
00:30:25.060 --> 00:30:28.510
good representative example though. And
last question I had is

604
00:30:28.840 --> 00:30:32.950
around performance. You, you, you're
very creative online. When you

605
00:30:32.950 --> 00:30:35.770
talk about the, you know,
it's just a labyrinth of

606
00:30:35.800 --> 00:30:38.260
landmines, you know, you think
you nailed it and then

607
00:30:38.260 --> 00:30:40.330
some weird performance thing comes
up. What kind of things

608
00:30:40.330 --> 00:30:42.340
do people see? Is it,
is it pixels on the

609
00:30:42.340 --> 00:30:45.430
screen pushing pixels problems or
is it memory management problems?

610
00:30:46.540 --> 00:30:50.080
Memory management is probably the
worst one just because I

611
00:30:50.080 --> 00:30:53.470
would say JavaScript does not
have value types. There's is

612
00:30:53.470 --> 00:30:56.110
the one thing that kneecap
shoe in the same way

613
00:30:56.110 --> 00:30:59.620
today, it's actually a real
performance obstacle for Java having

614
00:30:59.620 --> 00:31:02.110
value types, instructs that live
on the stack was a

615
00:31:02.110 --> 00:31:05.410
huge win in terms of
the design of.net. And it's

616
00:31:05.410 --> 00:31:07.720
not possible to express that
in the browser right now.

617
00:31:08.140 --> 00:31:10.360
So Jason does a lot
to kind of mitigate the

618
00:31:10.360 --> 00:31:14.590
costs there and in the
future, JavaScript will probably adopt

619
00:31:14.590 --> 00:31:16.900
some improvements to fix that,
but that is the one

620
00:31:16.900 --> 00:31:19.600
thing that causes the most
performance issues, especially for X

621
00:31:19.600 --> 00:31:22.600
and a games, since they're
tossing vectors and matrices around

622
00:31:22.600 --> 00:31:25.780
all the place. Very cool.
This is a really exciting

623
00:31:25.780 --> 00:31:28.450
project and I hope that
more people learn about it.

624
00:31:29.320 --> 00:31:31.030
Well, thank you very much
for talking about it with

625
00:31:31.030 --> 00:31:34.270
me. It was my pleasure.
Caitlin GaN is a freelance

626
00:31:34.270 --> 00:31:36.850
programmer and game designer, and
you can follow her on

627
00:31:36.850 --> 00:31:39.610
Twitter, check out her website
and check out Jay S

628
00:31:39.610 --> 00:31:43.300
I L dot O R
G. This has been another

629
00:31:43.300 --> 00:31:45.520
episode of Hansel minutes and
we'll see you again next

630
00:31:45.520 --> 00:31:51.360
week. <inaudible>.

