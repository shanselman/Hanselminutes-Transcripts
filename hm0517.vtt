WEBVTT FILE

1
00:00:00.390 --> 00:00:03.510
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.510 --> 00:00:06.840
they make the show possible.
Today's show is sponsored by

3
00:00:06.840 --> 00:00:11.130
Tellerik create compelling app experiences
across any screen with the

4
00:00:11.130 --> 00:00:15.990
Tellerik platform Telerx end to
end platform. Uniquely combines industry

5
00:00:15.990 --> 00:00:19.680
leading UI tools with cloud
services to simplify the entire

6
00:00:19.680 --> 00:00:24.150
app development cycle Tellerik offers
everything.net developers need to build

7
00:00:24.150 --> 00:00:33.570
quality apps faster. Try it
free at telerik.com/platform that's tellerik.com/platform

8
00:00:46.700 --> 00:00:52.460
From hanselminutes.com. It's Hansel minutes,
a weekly discussion with web

9
00:00:52.460 --> 00:00:57.740
developer and technologist Scott Hansen. This
is Lawrence Ryan announcing show number

10
00:00:57.740 --> 00:01:03.200
521. In this episode, Scott
talks with Liza gardener, CTO

11
00:01:03.200 --> 00:01:07.610
of cloud four, about her
recent explorations into hardware using

12
00:01:07.610 --> 00:01:15.080
the Johnny five framework. Hi,
this is Scott Hanselman. This

13
00:01:15.080 --> 00:01:17.600
is another episode of Hansel
minutes today. I'm talking with

14
00:01:17.600 --> 00:01:20.600
Eliza Gardner she's the CTO
of cloud four, and I

15
00:01:20.600 --> 00:01:23.360
recently attended a class that
she gave at a meetup

16
00:01:23.720 --> 00:01:25.490
with my eight year old.
And we learned how to

17
00:01:25.550 --> 00:01:29.600
talk to hardware with a
Johnny five, a JavaScript framework.

18
00:01:29.630 --> 00:01:31.850
Thanks for chatting with me
today. Thanks for having me.

19
00:01:32.630 --> 00:01:35.090
Yeah. So I just went
to this, this meetup and

20
00:01:35.090 --> 00:01:38.360
that you, you were speaking
at and I took my

21
00:01:38.360 --> 00:01:40.940
eight year old. We had
a blast. He is super

22
00:01:40.940 --> 00:01:44.600
excited about doing JavaScript now
more than before, because I

23
00:01:44.600 --> 00:01:47.570
think it, it entered the
physical world. Now it's not

24
00:01:47.570 --> 00:01:50.690
just drawing circles on Khan
Academy anymore. Right. You can

25
00:01:50.960 --> 00:01:53.930
actually have impact on things
that exist in physical space.

26
00:01:54.560 --> 00:01:57.140
Yeah, that, that, I mean,
I've, I've walked him through

27
00:01:57.140 --> 00:02:00.950
the Khan Academy basics of
JavaScript. He's drawn a snowman

28
00:02:00.950 --> 00:02:03.620
and things like that. But,
you know, I think that

29
00:02:03.620 --> 00:02:07.100
for teaching kids, the, the
physicality of it is more

30
00:02:07.100 --> 00:02:12.140
compelling than the abstract, you
know, circles. Phil's sure. Yeah.

31
00:02:12.800 --> 00:02:15.020
Did you know you've been
even a web person for

32
00:02:15.020 --> 00:02:16.910
a long time? I think
we came up at the

33
00:02:16.910 --> 00:02:21.260
same time. Yeah. About 20
years, very early web. And

34
00:02:21.260 --> 00:02:24.740
I'm, I'm absolutely a software
person in background. So this

35
00:02:24.740 --> 00:02:29.590
hardware tangent has been an
exciting change. Did you, did

36
00:02:29.630 --> 00:02:31.670
it take JavaScript to get
you into it? Cause I

37
00:02:31.670 --> 00:02:34.220
know I tried with C
a couple of times, but

38
00:02:34.250 --> 00:02:36.860
never really jumped became a
hardware person. Well, there were

39
00:02:36.860 --> 00:02:38.840
two things that got me
into it. The first thing

40
00:02:38.840 --> 00:02:43.100
was completely by chance. I
was speaking at a conference

41
00:02:43.100 --> 00:02:46.400
in England called over the
air, a great little grassroots

42
00:02:46.430 --> 00:02:49.430
mobile conference that happens once
a year. And after I

43
00:02:49.430 --> 00:02:52.130
was done speaking, I decided
to enter the hacking contest

44
00:02:52.160 --> 00:02:56.660
that they had. The national
museum of computing in England

45
00:02:56.660 --> 00:02:59.560
is located at Bletchley park,
which is where this was.

46
00:02:59.560 --> 00:03:03.880
And they had a need
for some timeline management interface

47
00:03:03.880 --> 00:03:06.760
software. So I whipped together
a prototype and I ended

48
00:03:06.760 --> 00:03:09.520
up winning the hacking contest,
which was a great surprise

49
00:03:09.520 --> 00:03:12.070
and a great honor and
the gift or the award

50
00:03:12.070 --> 00:03:16.240
for doing that was a
complete Arduino starter set. And

51
00:03:17.020 --> 00:03:19.390
I was traveling. So I
had a little bit of

52
00:03:19.390 --> 00:03:21.340
time to just sit down
and look at it and

53
00:03:21.340 --> 00:03:23.200
play with it. And I
worked through all of the

54
00:03:23.200 --> 00:03:27.370
examples and this was using
the Arduino IDE and writing

55
00:03:27.370 --> 00:03:31.360
in the Arduino programming language,
which is C like, and

56
00:03:31.360 --> 00:03:35.650
getting through all of those
examples. But the second piece

57
00:03:35.650 --> 00:03:39.430
was indeed the JavaScript piece.
So I went back to

58
00:03:39.430 --> 00:03:43.030
my Arduino a few months
later and wanted to expand

59
00:03:43.030 --> 00:03:46.540
what I understood about hardware
and circuitry and hacking in

60
00:03:46.540 --> 00:03:49.270
the physical space. And I
was Googling one night and

61
00:03:49.270 --> 00:03:51.670
it was during the holiday
season a few years ago.

62
00:03:51.940 --> 00:03:54.430
And I happened upon Johnny
five. And one of the

63
00:03:54.430 --> 00:03:57.790
first things I did was
put together a new example

64
00:03:57.790 --> 00:04:00.490
for one of the classes
that they had something to

65
00:04:00.490 --> 00:04:04.510
do with blinking multiple LEDs
or fading out between LEDs.

66
00:04:05.050 --> 00:04:08.680
And I went ahead and
contributed that example, which was

67
00:04:08.680 --> 00:04:11.830
rewarding and got me connected
to the Johnny five developer

68
00:04:11.830 --> 00:04:13.930
community. And then I was
hooked from there on out.

69
00:04:14.290 --> 00:04:19.030
I think that the JavaScript
metaphors in Johnny five helped

70
00:04:19.030 --> 00:04:22.090
me connect my software background
and more intuitively to the

71
00:04:22.090 --> 00:04:25.180
hardware stuff I was doing.
It allowed me to understand

72
00:04:25.180 --> 00:04:28.270
things on a higher level
as well. They, the Johnny

73
00:04:28.270 --> 00:04:32.530
five library wraps a lot
of components like LEDs and

74
00:04:32.530 --> 00:04:35.140
different kinds of sensors and
higher level classes that I

75
00:04:35.140 --> 00:04:37.660
can work with. So I
don't always have to be

76
00:04:37.660 --> 00:04:40.690
in the weeds of configuring
pins or doing things with

77
00:04:40.720 --> 00:04:44.500
voltages. So the combination of
the two is really powerful

78
00:04:44.500 --> 00:04:48.180
for me for understanding it.
So I'm looking at the

79
00:04:48.180 --> 00:04:51.780
Johnny five website. You go
Johnny hyphen five.io. And a

80
00:04:51.780 --> 00:04:55.080
couple of years ago, I
had Raquel Velez. Talk to

81
00:04:55.080 --> 00:04:57.300
me about this. And Johnny
five came out in 2000

82
00:04:57.300 --> 00:05:01.140
and in 2012, but here
we are now four years

83
00:05:01.140 --> 00:05:04.890
later and it's really very
mature. It has quite an

84
00:05:04.890 --> 00:05:08.250
ecosystem built around it. I
definitely would say it is,

85
00:05:08.310 --> 00:05:10.860
it is quite mature. And
for that reason, I tend

86
00:05:10.860 --> 00:05:14.220
to recommend it to people
beginning with JavaScript and hardware,

87
00:05:14.220 --> 00:05:17.850
because it does have a
fairly sizable community constantly banging

88
00:05:17.850 --> 00:05:20.340
on it and poking at
it. And I also think

89
00:05:20.340 --> 00:05:24.630
that it represents a pent
up pressure and interest in

90
00:05:24.630 --> 00:05:27.630
the software and web development
community for being able to

91
00:05:27.630 --> 00:05:30.300
do this and being able
to use this, this kind

92
00:05:30.300 --> 00:05:33.300
of tool is a gateway
to understanding how to work

93
00:05:33.300 --> 00:05:36.300
with hardware. And I think
that's really exciting. So you

94
00:05:36.300 --> 00:05:38.940
talk about pins and worrying
about the little details of

95
00:05:38.940 --> 00:05:41.040
voltage and things like that.
This seems like it's the

96
00:05:41.040 --> 00:05:45.000
constant tension and getting involved
with, with hardware. Like I,

97
00:05:45.020 --> 00:05:47.910
I go to some frameworks
and some boards, and I

98
00:05:47.910 --> 00:05:51.270
feel like if I don't
have a, you know, an

99
00:05:51.270 --> 00:05:54.270
oscilloscope in my garage that
maybe this isn't for me,

100
00:05:54.900 --> 00:05:57.650
I do think that there's
a very fine and hard

101
00:05:57.650 --> 00:06:02.810
to chase down line between
the hardware concepts, the core

102
00:06:02.810 --> 00:06:07.640
fundamentals you do need to
know to be proficient versus

103
00:06:07.880 --> 00:06:12.620
being in the weeds, whether
that's hardware addressing or voltages,

104
00:06:12.620 --> 00:06:15.140
or like you say, feeling
like you need an oscilloscope.

105
00:06:15.710 --> 00:06:18.710
And I think finding that
line is very key. And

106
00:06:18.710 --> 00:06:20.570
it's one of the things
that I'm spending a lot

107
00:06:20.570 --> 00:06:23.750
of time thinking about and
wanting to help educate about

108
00:06:24.350 --> 00:06:27.950
corralling the true circuitry basics.
I do think you need

109
00:06:27.950 --> 00:06:31.850
to know the relationships in
ohms law and some things

110
00:06:31.850 --> 00:06:37.220
about basic circuitry and the
components involved, but what abstraction

111
00:06:37.220 --> 00:06:40.280
libraries like Johnny five allows
you to do is put

112
00:06:40.280 --> 00:06:43.310
a little bit of that
aside or put the non

113
00:06:43.310 --> 00:06:46.820
essential stuff aside. So you
can prototype quickly gets out

114
00:06:46.820 --> 00:06:49.040
of your way. Now what
you do lose when you

115
00:06:49.040 --> 00:06:52.070
have high level obstructions, of
course, is that lower level

116
00:06:52.070 --> 00:06:54.890
control. So there's always a
trade off, but this is

117
00:06:54.890 --> 00:06:57.350
how it is, of course,
in computer science it's you

118
00:06:57.350 --> 00:06:59.870
can use this analogy and
almost any kind of software

119
00:06:59.870 --> 00:07:03.250
development, right? Yeah. I always
use that. I've said it

120
00:07:03.250 --> 00:07:04.630
a million times in the
show, but I'll say it

121
00:07:04.630 --> 00:07:07.690
again that, you know, each
additional layer of abstraction is

122
00:07:07.690 --> 00:07:11.590
indistinguishable from magic, right. You
know, when you showed us

123
00:07:13.090 --> 00:07:16.060
the Johnny five code, we
said, you know, board dot

124
00:07:16.060 --> 00:07:19.420
on ready, you actually grabbed
the ready event. So like

125
00:07:19.420 --> 00:07:23.350
right there, we're thinking about
inventing, which is just completely

126
00:07:23.530 --> 00:07:27.100
foreign. And then you said,
led dot blink. And I'm

127
00:07:27.100 --> 00:07:30.460
like, what, you know, I,
it wasn't voltage on or

128
00:07:30.460 --> 00:07:31.930
this pin. It was, you
know, it was a very

129
00:07:31.930 --> 00:07:34.690
nice high level layer of
abstraction. And that I think

130
00:07:35.170 --> 00:07:38.560
really resonated with my, with
my son because I've been

131
00:07:38.560 --> 00:07:40.810
trying to get him into
multimedias and stuff. And it's

132
00:07:40.810 --> 00:07:43.750
just not miss exciting is
as diving right in and

133
00:07:43.750 --> 00:07:48.790
doing something Right. It connects
language and metaphors that we're

134
00:07:48.790 --> 00:07:51.730
more familiar with in our
web programming, in our Java

135
00:07:51.730 --> 00:07:56.740
script programming arsenal. And it
does help make us understand.

136
00:07:56.740 --> 00:07:59.110
I mean, when you see
that there's a Johnny five

137
00:07:59.110 --> 00:08:03.040
class like led and that
led class has a bunch

138
00:08:03.040 --> 00:08:05.050
of methods on it, they're
what you would kind of

139
00:08:05.380 --> 00:08:08.500
expect intuitively if you conceive
of what an led is,

140
00:08:08.500 --> 00:08:10.480
you know, you want to
turn it off, you want

141
00:08:10.480 --> 00:08:12.220
to turn it on. You
want to make it blink.

142
00:08:12.550 --> 00:08:14.650
You want to make it
fade in or fade out,

143
00:08:14.650 --> 00:08:16.210
or maybe you want to
set it to a different

144
00:08:16.210 --> 00:08:21.010
brightness. And even further than
that, there's an, an RGB

145
00:08:21.010 --> 00:08:23.410
variant of the led class
that lets you set the

146
00:08:23.410 --> 00:08:27.280
color on a, on an
RGB led. And you can

147
00:08:27.280 --> 00:08:29.560
use that. You can set
that color using, for example,

148
00:08:29.560 --> 00:08:32.890
a hex color, which is
very natural way of thinking

149
00:08:32.890 --> 00:08:36.850
about colors for web developers.
Right. Totally, totally good example.

150
00:08:37.340 --> 00:08:40.300
The question I would have
then as someone who like,

151
00:08:40.300 --> 00:08:43.360
I want to be productive
and I want to learn,

152
00:08:43.420 --> 00:08:46.390
like you said, the basics,
but like let's talk about

153
00:08:46.390 --> 00:08:50.500
fading for example. Sure. Do
I, do I dig into

154
00:08:50.530 --> 00:08:53.290
pulse with modulation and then
learn all about it and

155
00:08:53.290 --> 00:08:55.680
make it so I could
write my own fade and

156
00:08:55.680 --> 00:08:58.440
then except that there's a
fade and then, you know,

157
00:08:58.800 --> 00:09:00.600
from that point I'll live
at the high level of

158
00:09:00.600 --> 00:09:03.480
abstraction or do I just
simply, you know, read a

159
00:09:03.480 --> 00:09:05.580
paragraph or two, get a
general sense of what pulse

160
00:09:05.590 --> 00:09:07.710
was modulation is, which is
where I'm at right now.

161
00:09:08.340 --> 00:09:13.490
I, that the latter is
probably Probably find so the,

162
00:09:13.670 --> 00:09:16.640
if you have a general
understanding of how pulse width

163
00:09:16.640 --> 00:09:19.880
modulation works and they under,
and an understanding of duty

164
00:09:19.880 --> 00:09:23.960
cycles, I think that that
is probably plenty. Do you

165
00:09:23.960 --> 00:09:28.010
need to go write an
algorithm for pulse, with modulation

166
00:09:28.010 --> 00:09:29.600
to be able to say
that you understand it? I

167
00:09:29.600 --> 00:09:32.540
don't think that that's necessarily
the case. So I think

168
00:09:32.540 --> 00:09:35.450
there are some shortcuts you
can take that are not

169
00:09:35.990 --> 00:09:40.640
detrimental to your understanding of
hardware. Okay. So that's actually,

170
00:09:41.120 --> 00:09:43.460
PWM is actually a really
interesting thing we should talk

171
00:09:43.460 --> 00:09:45.320
about for a second. So
you go from led dot

172
00:09:45.320 --> 00:09:49.340
blink, and then you talk
about fading. There's different kinds

173
00:09:49.340 --> 00:09:52.040
of pins. I understand a
different pen support, different things

174
00:09:52.040 --> 00:09:55.460
on an Arduino. Yeah. So
we're specifically speaking about an

175
00:09:55.460 --> 00:09:59.000
Arduino UNO, which is the
most popular Arduino development board,

176
00:09:59.450 --> 00:10:02.840
but pretty much any Arduino
development board you'll get has

177
00:10:02.840 --> 00:10:05.900
some pins that are capable
of digital input and output.

178
00:10:06.260 --> 00:10:08.510
And some of those digital
pins will be able to

179
00:10:08.510 --> 00:10:13.130
support PWM, not usually all
of them and what a

180
00:10:13.130 --> 00:10:16.850
normal digital pin that does
not support PWM is either

181
00:10:16.850 --> 00:10:19.940
on or it's off or
more specifically it's high or

182
00:10:19.940 --> 00:10:24.320
it's low. What PWM gives
you is the ability to

183
00:10:24.350 --> 00:10:27.650
alternate between the high and
low values on that pin.

184
00:10:28.460 --> 00:10:32.360
Very, very fast. And it
very specific ratios. So you

185
00:10:32.360 --> 00:10:37.790
might have something that's 50%
on or off using PWM,

186
00:10:38.100 --> 00:10:40.580
using what they call a
duty cycle, which is as

187
00:10:40.580 --> 00:10:43.370
you look across a period,
what's the average amount of

188
00:10:43.370 --> 00:10:46.370
time that that signal is
high versus the amount of

189
00:10:46.370 --> 00:10:49.430
time it's low. And that
way you can sort of

190
00:10:49.430 --> 00:10:54.440
approximate what feels kind of
like an analog output, because

191
00:10:54.560 --> 00:10:57.820
you have something that's on
50% of the time, it

192
00:10:58.190 --> 00:11:01.700
over time, the average effect
is that that is half

193
00:11:01.700 --> 00:11:04.250
voltage or that's how it
looks to us in the

194
00:11:04.250 --> 00:11:06.380
real world. Cause we can't
see things at that frequency

195
00:11:06.380 --> 00:11:10.460
of course. So when it
comes to LEDs specifically, a

196
00:11:10.460 --> 00:11:15.530
PWM enabled pin will let
you set an led so

197
00:11:15.530 --> 00:11:19.100
that it looks like it's
50% bright. You can't do

198
00:11:19.100 --> 00:11:22.400
that with a regular digital
pen because it's either on

199
00:11:22.400 --> 00:11:25.370
or it's off. So anytime
you want to fade or

200
00:11:25.370 --> 00:11:29.420
do different colors with a,
an RGB led, you'll need

201
00:11:29.420 --> 00:11:33.860
to use one of those
pins. Interesting. Okay. So forgive

202
00:11:33.860 --> 00:11:36.800
my ignorance, but is it
kind of like you're strobing

203
00:11:36.800 --> 00:11:39.110
it like a strobe light
and the average, it is

204
00:11:39.110 --> 00:11:41.630
average 50% on 50% off
over this period of time.

205
00:11:41.660 --> 00:11:44.000
Right. So if you look
at it, if you were

206
00:11:44.000 --> 00:11:46.910
to look at sort of
an oscilloscope sort of output

207
00:11:46.910 --> 00:11:49.940
of that, what you would
see is up, down, up,

208
00:11:49.940 --> 00:11:53.380
down, up, down with, it
would stay up a given

209
00:11:53.380 --> 00:11:55.180
amount of time and then
come down and stay down.

210
00:11:55.360 --> 00:11:57.490
So it would look kind
of like teeth, I guess.

211
00:11:57.990 --> 00:11:59.970
Yeah. Yeah. Is that what
they say? Like a saw

212
00:12:00.000 --> 00:12:02.940
tooth pattern, except it doesn't
have a point at the

213
00:12:02.940 --> 00:12:06.450
top. It is flat Flat
teeth or like crenelated like

214
00:12:06.450 --> 00:12:10.440
a castle. Oh, good use
of crenelated you're welcome. Nicely

215
00:12:10.440 --> 00:12:15.520
done. Yeah. You've cut the
vocab. That intimidating vocab. No,

216
00:12:15.550 --> 00:12:17.280
no. I mean, in the
best way, I was actually

217
00:12:17.280 --> 00:12:19.800
talking to my eight year
old about that because I

218
00:12:19.800 --> 00:12:23.100
hear I am not eight
and every, every three or

219
00:12:23.100 --> 00:12:24.930
four days, there's a word
that I'll hear that it's

220
00:12:24.930 --> 00:12:27.720
like tickles the nerves, the
neurons in the back of

221
00:12:27.720 --> 00:12:29.940
my brain where it's like,
Oh, I haven't heard that

222
00:12:29.940 --> 00:12:32.310
word in 15 years. And
I don't really know exactly

223
00:12:32.310 --> 00:12:34.140
what it means. So I
put it on my list

224
00:12:34.140 --> 00:12:36.450
of words to look up
and he thinks it's so

225
00:12:36.450 --> 00:12:38.850
funny. Cause he just assumed
that adults know all words

226
00:12:39.480 --> 00:12:42.090
and have them available at
all times. So the goal

227
00:12:42.090 --> 00:12:44.310
of course is to have
the correct word for the

228
00:12:44.310 --> 00:12:47.250
correct thing available when you
need it in your, you

229
00:12:47.250 --> 00:12:49.980
know, in your bat belt.
Right. And there's a difference

230
00:12:49.980 --> 00:12:53.940
between passive vocabulary and active
vocabulary. Like we understand a

231
00:12:53.940 --> 00:12:56.610
lot more words than we
have immediately available for us

232
00:12:56.610 --> 00:13:01.470
to use in sentences. Yeah.
I'm working on getting my,

233
00:13:01.950 --> 00:13:07.410
my vocabulary more better, More
better. Your vocabulary is so

234
00:13:07.410 --> 00:13:11.310
bad. It's like a whatever.
Yeah. That's exactly what it's

235
00:13:11.310 --> 00:13:19.080
like. It's so descriptive. Yeah.
Anyway, so there's microcomputers microcontrollers

236
00:13:19.080 --> 00:13:22.200
and then I've also heard
this term SOC or system.

237
00:13:22.860 --> 00:13:24.630
Oh goodness. Let me see
if I can do this

238
00:13:24.630 --> 00:13:28.200
without confusing the matter, even
further because the lines are

239
00:13:28.230 --> 00:13:33.090
quite blurry. So the definition
of what makes a microcontroller

240
00:13:33.390 --> 00:13:36.630
is that it is a
single package that contains a

241
00:13:36.630 --> 00:13:42.690
processor, some memory and some
ability to handle IO input

242
00:13:42.690 --> 00:13:45.150
and output. And that should
all be in one package.

243
00:13:45.630 --> 00:13:51.630
Okay. So in that definition,
most microcontrollers, I believe can

244
00:13:51.630 --> 00:13:55.050
also be called systems on
a chip because a system

245
00:13:55.050 --> 00:13:58.020
on a chip is multiple
functionality wrapped in a single

246
00:13:58.020 --> 00:14:01.530
package. Right? So there's a
lot of crossover there. The

247
00:14:01.530 --> 00:14:06.120
other thing that's confusing is
that a micro controller meets

248
00:14:06.150 --> 00:14:10.320
the criteria of being a
microcomputer because a microcomputer needs

249
00:14:10.320 --> 00:14:14.790
a processor like a system
bus and memory, I think.

250
00:14:15.270 --> 00:14:16.890
Right. And I might be
having, I might have these

251
00:14:16.890 --> 00:14:21.210
slightly off. So, so every
micro controller is in effect

252
00:14:21.210 --> 00:14:25.740
a tiny computer as well.
And then a microprocessor on

253
00:14:25.740 --> 00:14:30.600
its own is, is just
the processor without the IO

254
00:14:30.600 --> 00:14:33.330
and the memory. Right. But
I don't even know if

255
00:14:33.330 --> 00:14:36.840
that's strictly correct in terms
of how these microprocessors ended

256
00:14:36.840 --> 00:14:40.800
up getting packaged. So it
becomes very difficult to draw

257
00:14:40.830 --> 00:14:44.460
a clean line between what
we intuitively kind of feel

258
00:14:44.460 --> 00:14:47.400
about a development boards like
our do winos with their

259
00:14:47.400 --> 00:14:51.740
microcontrollers as being low power
hardware. That's fairly basic. For

260
00:14:51.740 --> 00:14:56.180
example, the Arduino UNOS at
mega micro controller is an

261
00:14:56.210 --> 00:15:00.500
eight bit micro controller. The
processor on it, processes messages

262
00:15:00.500 --> 00:15:04.520
and eight bits. And we
just intuitively know that that's

263
00:15:05.090 --> 00:15:08.780
a separate class of computing
as it were than what

264
00:15:08.780 --> 00:15:11.330
is going on with the
raspberry PI on, on what

265
00:15:11.330 --> 00:15:15.650
is sometimes termed a single
board computer. And those are

266
00:15:15.950 --> 00:15:18.620
really like shot down motherboards
when you get down to

267
00:15:18.620 --> 00:15:21.200
it, it has everything on
it. You would expect from

268
00:15:21.200 --> 00:15:26.090
a multipurpose computer. So also
the ability to process input

269
00:15:26.390 --> 00:15:32.090
and output with peripherals, perhaps
more removable storage and more

270
00:15:32.090 --> 00:15:36.680
networking. And, and so the
differences are subtle, but we

271
00:15:36.680 --> 00:15:41.930
kind of Intuit them almost
more than academically. They are

272
00:15:42.050 --> 00:15:47.120
subdivided. So you've got your,
your microcontroller based boards, 10

273
00:15:47.480 --> 00:15:51.830
to perform single purpose tasks.
That's what they're made for.

274
00:15:51.830 --> 00:15:54.680
They're very robust for that.
Whereas with the single board

275
00:15:54.680 --> 00:15:58.880
computers, because they're, they can
run <inaudible>, they can do

276
00:15:58.970 --> 00:16:01.880
many tasks at once. So
they're, they're more multipurpose like

277
00:16:01.880 --> 00:16:05.440
what we think of as
a computer. Yeah. I appreciate

278
00:16:05.440 --> 00:16:08.350
that you point out that
there is the, like the

279
00:16:08.350 --> 00:16:11.380
actual definition and then there's
what we Intuit or what

280
00:16:11.380 --> 00:16:14.470
feels natural. Right. Because I
feel if it has an

281
00:16:14.470 --> 00:16:16.570
O S and I can
move my mouse around and

282
00:16:16.570 --> 00:16:18.820
I could open up something
that looks like file management,

283
00:16:19.150 --> 00:16:23.020
that's probably a computer. And
if it's on tiny computer,

284
00:16:23.440 --> 00:16:25.990
then maybe I'll call it
a microcomputer. That's certainly not.

285
00:16:26.350 --> 00:16:29.110
Technically what's both, it's both
technically correct, but it's an

286
00:16:29.110 --> 00:16:33.280
overload, Right? Our terminology actually
trips us up because there's

287
00:16:33.520 --> 00:16:40.210
simultaneously lay people for lack
of better word, quote, unquote,

288
00:16:40.240 --> 00:16:44.650
incorrectly using terminology. But then
again, the actual accurate terminology

289
00:16:45.370 --> 00:16:49.210
is fraught with difficulty to
and over precise. And also

290
00:16:49.660 --> 00:16:52.840
in many cases was invented
a few decades ago when

291
00:16:52.840 --> 00:16:56.710
the entire competing landscape was
just completely different. Right. You

292
00:16:56.710 --> 00:16:58.150
know, one of the things
that I think is so

293
00:16:58.180 --> 00:17:00.940
interesting is that what we
now think of in call

294
00:17:00.940 --> 00:17:06.640
them a microcontroller, like an
ATmega is effectively what I

295
00:17:06.640 --> 00:17:09.850
had 25 years ago as
my first computer, you know,

296
00:17:09.850 --> 00:17:14.710
like here we have like
16 megahertz frequency CPU, you

297
00:17:14.710 --> 00:17:18.970
know, with 128 K of,
of, of memory 32 K

298
00:17:18.970 --> 00:17:23.380
on the Arduinos microcontroller. Yeah.
And this is what like

299
00:17:23.410 --> 00:17:27.260
$8 There. Well, I think
you can get an ATmega

300
00:17:27.280 --> 00:17:30.100
three 28 P which is
the microcontroller on an UNO

301
00:17:30.100 --> 00:17:33.730
for three or four bucks
actually. Well, if you're at

302
00:17:33.730 --> 00:17:37.240
scale, it's considerably cheaper than
that. I recently built my

303
00:17:37.240 --> 00:17:41.560
own UNO compatible board on
a, on a bread board.

304
00:17:42.100 --> 00:17:45.130
So I just bought the
microcontroller and the timing chip

305
00:17:45.700 --> 00:17:48.010
and a few other bits
and bots separately and built

306
00:17:48.010 --> 00:17:51.630
it myself and the actual
components. And these are bought

307
00:17:51.630 --> 00:17:55.020
individually. So there's no economy
of scale. I think we're

308
00:17:55.230 --> 00:17:58.530
probably seven or eight bucks
that the expensive piece was

309
00:17:58.530 --> 00:18:02.100
actually, I had to get
an what's called an FTI

310
00:18:02.130 --> 00:18:05.240
programmer to be because I
didn't have all of the

311
00:18:05.250 --> 00:18:07.500
hardware that you get on
an Arduino board to make

312
00:18:07.500 --> 00:18:10.680
it so you can just
plug USB into it. So

313
00:18:10.680 --> 00:18:12.750
I had to get one
specialty piece of hardware to

314
00:18:12.750 --> 00:18:15.600
be able to program it,
but that's reusable on any

315
00:18:15.600 --> 00:18:18.300
board that I would have,
but that did cost $15.

316
00:18:18.300 --> 00:18:22.230
So my first board costs
me probably 20, $25 to

317
00:18:22.230 --> 00:18:24.060
make. But if I made
another one, it would be

318
00:18:24.210 --> 00:18:27.740
five to $8. I actually
had to take out a

319
00:18:27.740 --> 00:18:32.090
loan in like 1989 and
buy a computer that was

320
00:18:32.090 --> 00:18:35.750
similarly powered. And it was
a couple thousand dollars. I

321
00:18:35.750 --> 00:18:37.550
have a great memory actually
at about that. I think

322
00:18:37.550 --> 00:18:42.290
in 1989, my mom invested
a bunch in buying components

323
00:18:42.290 --> 00:18:44.630
from the JDR micro devices
catalog. I don't know if

324
00:18:44.630 --> 00:18:47.630
you remember that. So, and
there was an article in

325
00:18:47.630 --> 00:18:50.090
PC magazine. I can, I
can find you a copy

326
00:18:50.090 --> 00:18:53.840
about me building that at
age 10 or 11. Yeah.

327
00:18:53.840 --> 00:18:55.880
And it was such a
great, and it is such

328
00:18:55.880 --> 00:18:58.550
a great experience. It was
the Intel 80, 88 processor

329
00:18:58.550 --> 00:19:00.740
at that time. Okay. Well,
we have to find that

330
00:19:00.740 --> 00:19:02.570
and put that in the
show notes. I do have

331
00:19:02.570 --> 00:19:04.790
a copy of it. It
has to be like, t-shirts

332
00:19:04.790 --> 00:19:08.330
need to be made. So
you made an Arduino on

333
00:19:08.330 --> 00:19:11.930
a breadboard. So that sounds
like a fun and intimidating

334
00:19:12.500 --> 00:19:15.290
thing to do. Is that
something that's hard? No, not

335
00:19:15.290 --> 00:19:19.310
at all. So there's, there's
some good tutorials on the

336
00:19:19.310 --> 00:19:22.910
internet blogposts style things. It
took me maybe an hour,

337
00:19:22.910 --> 00:19:25.190
hour and a half. And
that was completely just like

338
00:19:25.370 --> 00:19:27.890
really, Oh, it was completely
just the finicky bits of

339
00:19:27.890 --> 00:19:29.840
like cutting the wires to
the right lengths and stuff.

340
00:19:30.320 --> 00:19:33.200
I mean, it was actually
made it look nice. I

341
00:19:33.200 --> 00:19:35.270
wouldn't go so far as
to say nice, but just

342
00:19:35.270 --> 00:19:38.330
so there weren't loops of
jumper cables everywhere, jumper, wires,

343
00:19:38.330 --> 00:19:41.420
everywhere. So I think the
number of components you actually

344
00:19:41.420 --> 00:19:43.520
need is 10 or a
dozen, maybe. I mean, there's

345
00:19:43.520 --> 00:19:46.070
a couple LEDs you plug
in for to see status

346
00:19:46.070 --> 00:19:49.760
and, and then you need
to have connections to a

347
00:19:49.760 --> 00:19:53.630
few things, but the, the
bits are really the microcontroller,

348
00:19:53.690 --> 00:19:58.850
the timing chip, and then
just some status lights and

349
00:19:58.850 --> 00:20:00.950
making sure that you can
give it power. That's at

350
00:20:00.950 --> 00:20:05.420
an appropriate voltage. It's, it's
astonishingly simple because really what

351
00:20:05.420 --> 00:20:07.850
you get when you get
an Arduino UNO board, what

352
00:20:07.850 --> 00:20:11.570
that gives you is actually
the ergonomic factor that the

353
00:20:11.570 --> 00:20:14.180
form factor is actually a
large part of it. It's

354
00:20:14.180 --> 00:20:17.570
breaking out. It's providing those
pins that you can plug

355
00:20:17.570 --> 00:20:21.740
into with, with wires that
wire directly to those corresponding

356
00:20:21.740 --> 00:20:25.610
pins on the microcontroller, but
it's not actually adding a

357
00:20:25.610 --> 00:20:28.370
whole lot of extra functionality.
And then it gives you

358
00:20:28.370 --> 00:20:31.010
that USB connection, which is,
which is handy and an

359
00:20:31.010 --> 00:20:33.800
onboard reset button. I did
put a reset button also

360
00:20:33.800 --> 00:20:37.790
on my breadboard version, but
there's really the advantage of

361
00:20:37.790 --> 00:20:41.090
having the developer board and
having an Arduino compatible board

362
00:20:41.090 --> 00:20:44.630
is that they are of
a fixed in specific size

363
00:20:44.630 --> 00:20:46.760
and shape. And that way
you can extend them with

364
00:20:47.380 --> 00:20:50.460
and other things that are
built at those same dimensions.

365
00:20:50.460 --> 00:20:53.550
So that's a large part
of what the boards, Right.

366
00:20:53.970 --> 00:20:55.650
And it looks like I'm
looking at the list here,

367
00:20:55.680 --> 00:20:58.470
like the magic or like
the hardest part of this,

368
00:20:58.470 --> 00:21:01.440
or the most advanced part
is that USB to serial

369
00:21:02.070 --> 00:21:04.620
breakout board that does the
work that, that does work

370
00:21:04.620 --> 00:21:07.190
for you, that would be
tedious otherwise. Yes. So I

371
00:21:07.200 --> 00:21:10.440
use an FTI one, which
I think does plug into

372
00:21:10.440 --> 00:21:14.250
my USB port on my
computer. And then that just

373
00:21:14.250 --> 00:21:17.220
works. I can program it
through the Arduino ID. I

374
00:21:17.220 --> 00:21:21.720
haven't actually tried to run
Johnny five code on that.

375
00:21:21.720 --> 00:21:23.550
I haven't flashed it with
fermata. That is, and we

376
00:21:23.550 --> 00:21:26.430
can talk about fermata and
a bit to try that,

377
00:21:26.430 --> 00:21:28.140
but I don't see any
reason it wouldn't work just

378
00:21:28.140 --> 00:21:30.240
like my other. No, since
it does, when I use

379
00:21:30.240 --> 00:21:32.850
it with the Arduino ID,
That's a, that's a great,

380
00:21:33.410 --> 00:21:35.940
a great segue. So after
you've built this, whether you

381
00:21:35.940 --> 00:21:37.890
buy a Nuno or you
have like, I've got about

382
00:21:38.040 --> 00:21:40.920
six different Arduinos and they're
all different flavors, they're wonderful.

383
00:21:40.920 --> 00:21:44.070
They are literally like candy
bars and there's fun size

384
00:21:44.070 --> 00:21:46.860
and there's jumbo size. I've
got little ones that are

385
00:21:46.860 --> 00:21:48.480
the size of my thumb
and I've got big ones

386
00:21:48.480 --> 00:21:51.990
that are size of a
deck of cards. Right. You

387
00:21:51.990 --> 00:21:55.620
have to, they come with
like the default just works.

388
00:21:55.620 --> 00:21:58.920
They're boot loaded with appropriate
thing. The one that you

389
00:21:58.920 --> 00:22:00.630
built on a breadboard, you
would need to kind of

390
00:22:00.840 --> 00:22:04.740
kickstart. Right. I actually bought
the microcontroller that I bought,

391
00:22:04.950 --> 00:22:07.500
came with the bootloader already
on it. So that was

392
00:22:07.500 --> 00:22:11.370
very helpful. Cool. Okay. Let's
save you time. Now this

393
00:22:11.370 --> 00:22:16.860
speaks, like you said, a,
a C like language. So

394
00:22:16.860 --> 00:22:20.430
yes, typically at the Arduino
workflow is that you use

395
00:22:20.430 --> 00:22:24.720
the Arduino IDE software, which
does work across platforms, windows,

396
00:22:24.720 --> 00:22:29.070
Mac, Linux, it's free. You
download it, you write code

397
00:22:29.070 --> 00:22:32.040
in it. And the Arduino
programming language does look and

398
00:22:32.040 --> 00:22:34.560
feel like C or C
plus plus minus a few

399
00:22:34.560 --> 00:22:37.260
types. And also with the
addition of a number of

400
00:22:37.260 --> 00:22:40.230
built in functions that are
specific to working with the

401
00:22:40.230 --> 00:22:44.700
hardware setting pins high or
low or configuring pins in

402
00:22:44.700 --> 00:22:47.310
certain ways. So you write
that what they call a

403
00:22:47.310 --> 00:22:51.090
sketch in the Arduino IDE,
and then you compile and

404
00:22:51.120 --> 00:22:54.360
upload that to the microcontroller
on the board. You plug

405
00:22:54.360 --> 00:22:57.450
your board into USB and
it does compile it. So

406
00:22:57.450 --> 00:23:00.510
there's a step between it,
it compiles it into machine

407
00:23:00.510 --> 00:23:04.500
code that is understandable by
the ATmega controllers, which are

408
00:23:04.590 --> 00:23:08.700
an AVR architecture. So it
makes it, it compiles it

409
00:23:08.700 --> 00:23:10.980
and then sticks it on
the device. And then once

410
00:23:10.980 --> 00:23:13.980
it's on the microcontroller and
on the board, it is

411
00:23:13.980 --> 00:23:17.040
the firmware of the board,
which means that it is

412
00:23:17.100 --> 00:23:21.210
stored in non-volatile program memory
rom as it were. So

413
00:23:21.210 --> 00:23:24.000
when the board loses power,
that for more stays there,

414
00:23:24.600 --> 00:23:26.460
it doesn't go away as
it would if it were

415
00:23:26.460 --> 00:23:29.880
in volatile memory like Ram.
So there's flash flash memory

416
00:23:29.880 --> 00:23:33.000
on the, on those microcontrollers
that these programs sit in.

417
00:23:33.540 --> 00:23:36.600
And once they're in firmware,
that board is then independent.

418
00:23:36.600 --> 00:23:39.510
So you could go plug
it in or give it

419
00:23:39.510 --> 00:23:42.300
battery power somewhere else. And
it would still still do

420
00:23:42.300 --> 00:23:46.430
its bidding that you uploaded
from the Ardwino ID. Now,

421
00:23:46.790 --> 00:23:49.580
if you do want to
use something like Johnny five

422
00:23:49.580 --> 00:23:52.760
and use no to control,
what's going on on the

423
00:23:52.760 --> 00:23:56.360
board, it's a different, it's
a different configuration, a different

424
00:23:56.360 --> 00:24:00.080
relationship. So what you end
up doing is preparing the

425
00:24:00.080 --> 00:24:03.320
board so that it can
speak in a common API,

426
00:24:03.350 --> 00:24:06.530
that you can then write
code on your computer to

427
00:24:06.530 --> 00:24:09.170
speak to it as well.
So there's this API that

428
00:24:09.170 --> 00:24:14.090
sits between the microcontroller and
your JavaScript as it, as

429
00:24:14.090 --> 00:24:16.640
it ends up being logic.
So what you first need

430
00:24:16.640 --> 00:24:19.370
to do is prepare the
board to be what's called

431
00:24:19.370 --> 00:24:22.820
a client in this host
client configuration, the board will

432
00:24:22.880 --> 00:24:27.140
become a client and we'll
listen and take instructions. So

433
00:24:27.740 --> 00:24:30.320
the way that you get
that to work is that

434
00:24:30.320 --> 00:24:33.380
instead of uploading a sketch
from the Arduino IDE, that

435
00:24:33.470 --> 00:24:36.350
does a specific thing, like
make an led blink, or

436
00:24:36.350 --> 00:24:43.160
make some noise. You upload
a sketch that represents something

437
00:24:43.160 --> 00:24:46.550
called fermata, which is a
protocol that can serve as

438
00:24:46.550 --> 00:24:49.910
this common API it's based
on MITIE. And so you,

439
00:24:49.940 --> 00:24:52.790
you, you open that sketch
in the Arduino IDE, and

440
00:24:52.790 --> 00:24:55.070
you upload it to the
board. That sounds a little

441
00:24:55.070 --> 00:24:58.220
bit complicated, but fortunately, this
is common enough that they

442
00:24:58.220 --> 00:25:01.760
are doing an IDE comes
with the fermata sketches that

443
00:25:01.760 --> 00:25:04.370
you need. So you can
just open it within the

444
00:25:04.370 --> 00:25:07.820
Arduino IDE standard for Mazda
is where I usually start.

445
00:25:08.270 --> 00:25:11.060
And you can then upload
that to the board, just

446
00:25:11.060 --> 00:25:15.380
like any sketch once that's
there. The fermata protocol is

447
00:25:15.380 --> 00:25:18.620
now in the firmware. All
right. So that's step one.

448
00:25:18.680 --> 00:25:21.590
You've now made the board,
the client now to program

449
00:25:21.590 --> 00:25:24.980
it, to do something, you
can install the Johnny five

450
00:25:24.980 --> 00:25:27.950
note framework, and then you
can start writing code in

451
00:25:27.950 --> 00:25:31.390
JavaScript for that. No backup.
So you install the Johnny

452
00:25:31.390 --> 00:25:34.900
five node framework on your
main laptop on top, not

453
00:25:34.900 --> 00:25:36.910
on the device. So once
you put from auto on

454
00:25:36.910 --> 00:25:42.100
the Arduino, it's now the,
the submissive and this relationship

455
00:25:42.100 --> 00:25:43.840
and its job is to
just do what it's told

456
00:25:43.840 --> 00:25:46.750
over the, does it, does
it think anymore? I mean,

457
00:25:46.750 --> 00:25:49.300
does it, It thinks in
the sense that it's processing

458
00:25:49.300 --> 00:25:51.820
input and output from its
pins, right? So it's, it's

459
00:25:51.820 --> 00:25:54.790
taking that. And with the
firmware that it has on

460
00:25:54.790 --> 00:25:58.000
board, it's translating those messages
into that, into that common

461
00:25:58.000 --> 00:26:02.210
protocol, but it's not doing
anything on it. It, it

462
00:26:02.440 --> 00:26:06.250
doesn't have any, it has
no purpose on its own.

463
00:26:06.250 --> 00:26:09.100
It's, it's, it's sitting there
waiting to execute what it's

464
00:26:09.100 --> 00:26:11.710
told to do at this
point. So it's purpose is

465
00:26:11.710 --> 00:26:15.100
to pick up the inputs
and the outputs and express

466
00:26:15.100 --> 00:26:19.690
them back up the chain
in this fermata protocol. And

467
00:26:19.690 --> 00:26:22.930
then the, the brain, the
thinking happens elsewhere Primarily. Yes.

468
00:26:22.930 --> 00:26:27.250
So once you have the
fermata sketch, uploaded to the,

469
00:26:27.730 --> 00:26:29.740
the board, you can, you
don't, you don't work out

470
00:26:29.740 --> 00:26:31.810
of the Arduino IDE anymore,
so you could have quit

471
00:26:31.810 --> 00:26:33.400
out of that. And then
you move into your text

472
00:26:33.400 --> 00:26:37.000
editor and you start writing
Java script code using the

473
00:26:37.000 --> 00:26:40.540
Johnny five framework and it's
classes and objects. So you

474
00:26:40.540 --> 00:26:43.650
use whatever editor makes you
happy node. Can I use

475
00:26:43.650 --> 00:26:46.250
any node library at that
point? You would use Johnny.

476
00:26:46.460 --> 00:26:48.650
So you would, you would
install the Johnny Johnny five

477
00:26:48.650 --> 00:26:50.900
note packet, Right. But if
I wanted to bring in

478
00:26:50.900 --> 00:26:53.900
other help, You sure could.
So that's what we'd come

479
00:26:53.900 --> 00:26:55.250
back to that. But that's
one of the things that's

480
00:26:55.250 --> 00:26:59.750
powerful about this approach. So
you write your JavaScript and

481
00:26:59.750 --> 00:27:03.230
then you execute it using
node with your board plugged

482
00:27:03.230 --> 00:27:06.080
in over USB. It's pretty
well obstructed. So you don't

483
00:27:06.080 --> 00:27:08.780
have to do like configuration
or anything. It generally defines

484
00:27:08.780 --> 00:27:13.160
your board. And then the,
the instructions are executed on

485
00:27:13.160 --> 00:27:17.540
your host, computer, your laptop,
or whatever. And that's communicated

486
00:27:17.600 --> 00:27:21.080
constantly to the board back
and forth. And then, so

487
00:27:21.080 --> 00:27:23.810
the board can then do
your bidding. Now, the difference

488
00:27:23.810 --> 00:27:27.260
between that and the, the
traditional as it were, are

489
00:27:27.260 --> 00:27:30.650
doing a workflow, is that
because the client is now

490
00:27:30.680 --> 00:27:32.960
dependent on the host to
tell it what to do.

491
00:27:33.350 --> 00:27:36.410
If you were to unplug
the board, it would not

492
00:27:36.410 --> 00:27:39.080
be, it would not be
independent that that code would

493
00:27:39.200 --> 00:27:41.570
sort of go away. So
once you plug it back

494
00:27:41.570 --> 00:27:44.780
in, it wouldn't start executing
that code again, because the

495
00:27:44.780 --> 00:27:48.350
code actually exists on the
host. So for this co

496
00:27:48.440 --> 00:27:52.580
host client configuration to work
for things to be functioning,

497
00:27:52.670 --> 00:27:55.520
the host has to be
con continually executing the code

498
00:27:55.520 --> 00:27:58.910
and communicating that The client
does it. If you pulled

499
00:27:58.910 --> 00:28:01.010
the cable out, does it
keep doing what you told

500
00:28:01.010 --> 00:28:02.720
it or does it simply
stop? It will freeze and

501
00:28:02.720 --> 00:28:06.110
exactly where the last instruction
it receives. So say you

502
00:28:06.110 --> 00:28:10.340
had a Johnny five script
that was toggling a bunch

503
00:28:10.340 --> 00:28:12.830
of LEDs and turning a
red one on and turning

504
00:28:12.830 --> 00:28:15.500
a green one on, and
you unplugged it. It, it

505
00:28:15.500 --> 00:28:17.150
might be in a state
where the green ones on

506
00:28:17.150 --> 00:28:18.440
it might be in a
state where the red ones

507
00:28:18.440 --> 00:28:21.380
on. It just depends on
when you unplugged it. So

508
00:28:21.380 --> 00:28:23.720
you might end up with
just a permanently on green

509
00:28:23.720 --> 00:28:28.040
led until the board loses
power. If the board loses

510
00:28:28.040 --> 00:28:30.650
power, it'll stop doing anything.
And when you plug it

511
00:28:30.650 --> 00:28:33.800
back in, it will do
nothing. Okay. So if I'm

512
00:28:33.800 --> 00:28:35.480
going to build something like
this, I'm always going to

513
00:28:35.480 --> 00:28:38.030
need this. Who is that
a host client, or what

514
00:28:38.030 --> 00:28:41.390
is the server client? I
call it host client, but

515
00:28:41.390 --> 00:28:45.020
it's sort of a loose
terminology. If I were to

516
00:28:45.020 --> 00:28:46.910
make a robot, I would
need, I would have, I'm

517
00:28:46.910 --> 00:28:49.850
really using the Arduino, not
as the brain anymore, but

518
00:28:49.850 --> 00:28:52.160
as one of my arms,
Right, it's sort of receiving

519
00:28:52.160 --> 00:28:55.220
instructions and doing what it's
told and it doesn't have

520
00:28:55.220 --> 00:28:59.060
to be over USB, like
physically connected. There are ways

521
00:28:59.060 --> 00:29:02.240
to, there are different Arduino
compatible boards and other boards

522
00:29:02.270 --> 00:29:06.440
that have wifi or Bluetooth
capability. So these instructions can

523
00:29:06.440 --> 00:29:10.260
be transmitted in different ways,
but they do have, the

524
00:29:10.280 --> 00:29:12.740
client does need to be
consistently told what to do.

525
00:29:13.310 --> 00:29:15.950
The other combination you can
use with this setup is

526
00:29:15.950 --> 00:29:18.680
say, you have a raspberry
PI or another single board

527
00:29:18.680 --> 00:29:22.460
computer that's robust enough to
run an OSTP and, and,

528
00:29:22.670 --> 00:29:26.750
and run node. Also, you
can run Johnny five on

529
00:29:26.750 --> 00:29:29.330
that single board computer and
use it to control either

530
00:29:29.330 --> 00:29:33.950
its own IO pins or
the, or another connected development

531
00:29:33.950 --> 00:29:36.530
board like in Arduino. And
so that can feel like

532
00:29:36.530 --> 00:29:40.460
a more independent setup. Interesting.
So that, let's just talk

533
00:29:40.460 --> 00:29:42.490
about that for just second,
because you said that you

534
00:29:42.490 --> 00:29:45.640
can have Johnny five and
node running on the raspberry

535
00:29:45.640 --> 00:29:49.840
PI and it could control
its own GPIO ports, maybe

536
00:29:49.840 --> 00:29:52.420
a little bit less stuff
going on than an Arduino,

537
00:29:52.900 --> 00:29:54.700
or it could control an
Arduino itself. And that would

538
00:29:54.700 --> 00:29:56.720
be a totally okay thing
to do. It's a, it's

539
00:29:56.740 --> 00:29:59.080
reasonable to have a raspberry
PI talking to an Arduino,

540
00:29:59.080 --> 00:30:02.530
right. That, that opens things
up a lot, because then

541
00:30:02.530 --> 00:30:04.960
at that point you can
run the whole thing off

542
00:30:04.960 --> 00:30:07.180
a cell phone battery, or
any kind of portable, like

543
00:30:07.660 --> 00:30:09.580
a, I've got a battery
that I use to, you

544
00:30:09.580 --> 00:30:11.770
know, a backup battery for
my cell phone that puts

545
00:30:11.770 --> 00:30:15.370
out micro USB five volts.
That could be a reasonable

546
00:30:15.650 --> 00:30:19.530
couple hours power. Yeah. The,
the highest power requirement on

547
00:30:19.530 --> 00:30:21.660
any of the pie models
is four Watts or something.

548
00:30:21.660 --> 00:30:25.860
So I think, yeah, Interesting.
So if someone were going

549
00:30:25.860 --> 00:30:29.100
to get started, they go
to Johnny hyphen five.io in,

550
00:30:29.160 --> 00:30:31.290
do you think that the
Ardwino UNO is just like

551
00:30:31.290 --> 00:30:34.140
the default, that's the best
way to get started? One

552
00:30:34.140 --> 00:30:36.360
of the easiest ways to
do it, it's just so

553
00:30:36.390 --> 00:30:40.110
ubiquitous and so well supported.
And so widely used that.

554
00:30:40.110 --> 00:30:42.390
I think it's a great
beginner's device because it doesn't

555
00:30:42.390 --> 00:30:44.520
tend to pull any surprises
on you. And it's quite

556
00:30:44.520 --> 00:30:48.660
compatible with things. What is
the spark fund red board?

557
00:30:48.660 --> 00:30:50.280
I've seen that a lot.
They're really nice. They have

558
00:30:50.280 --> 00:30:52.980
red boards instead of green,
and there's a lot of

559
00:30:52.980 --> 00:30:55.890
great stuff at spark fund.
Is that a different device?

560
00:30:56.520 --> 00:30:58.650
Gosh, so I know that
they have a red board

561
00:30:58.650 --> 00:31:02.010
that is a clone of
a proton. I think they

562
00:31:02.010 --> 00:31:05.250
also, I can't recall offhand
if spark fund has their

563
00:31:05.250 --> 00:31:10.620
own Arduino clones. That brings
up an interesting question though.

564
00:31:10.620 --> 00:31:13.320
Isn't there. Do I have
to pick a certain Arduino

565
00:31:13.320 --> 00:31:15.300
to make sure that I'm
supporting open source or is

566
00:31:15.300 --> 00:31:18.000
there some kind of a
thing going on there? All

567
00:31:18.000 --> 00:31:20.700
our do we knows should,
should be open source, open

568
00:31:20.700 --> 00:31:24.030
hardware, as well as open
software. There has been a

569
00:31:24.030 --> 00:31:26.910
problem in the past with
counterfeit Arduino, which is kind

570
00:31:26.910 --> 00:31:28.650
of confusing when you think
about it. Cause like how

571
00:31:28.650 --> 00:31:32.160
can you counterfeit something that's
opensource? But it comes down

572
00:31:32.160 --> 00:31:34.860
to a trademarking thing I
think with Arduino is a

573
00:31:34.860 --> 00:31:39.090
trademark. So the actual boards
that say Arduino on them

574
00:31:39.240 --> 00:31:41.670
and have the little Arduino
logo and stuff. Those are

575
00:31:41.670 --> 00:31:44.940
actually made by Arduino in
Italy, except for the counterfeit

576
00:31:44.940 --> 00:31:47.640
ones, which aren't, and that's
where that comes up. But

577
00:31:48.390 --> 00:31:52.050
there are other companies that
do produce our Duino compatible

578
00:31:52.410 --> 00:31:57.000
boards. They just can't market
them as Arduino specifically. So

579
00:31:57.000 --> 00:32:01.350
there's, there's a few other
names for Arduino boards that

580
00:32:01.350 --> 00:32:05.060
aren't exactly Arduinos, but they're
not infringing on anything. And

581
00:32:05.060 --> 00:32:07.980
they just can't use the
Arduino dirt. But if I

582
00:32:08.010 --> 00:32:10.710
picked boards that I find
as I'm exploring the Chinese

583
00:32:10.800 --> 00:32:13.320
Johnny five website, I'll probably
be saying, yes, Yes, the

584
00:32:13.320 --> 00:32:16.140
Johnny fine website has a
whole section on which boards

585
00:32:16.140 --> 00:32:20.850
are supported. And of those
boards that are supported, what

586
00:32:20.850 --> 00:32:24.930
you can do, which features
are supported and certain ones

587
00:32:25.320 --> 00:32:28.350
can't do like certain kinds
of serial communication or something.

588
00:32:28.350 --> 00:32:31.170
So they have these nice
tables that show you exactly

589
00:32:31.170 --> 00:32:34.170
which words support, what, which
is handy. Yeah, it is

590
00:32:34.170 --> 00:32:36.630
pretty fantastic. It is one
of the nicest open source

591
00:32:36.630 --> 00:32:39.470
websites I've ever seen. And
not only does it, we've

592
00:32:39.470 --> 00:32:43.640
talked about Arduino specifically, but
there's particles and light boop

593
00:32:43.670 --> 00:32:46.070
blight, blue bean is a
cool one. The particle photon,

594
00:32:47.380 --> 00:32:52.270
Bluetooth board rape. Yeah. So
there's lots of stuff. So

595
00:32:52.270 --> 00:32:53.650
if you're a maker, you
might have one of these

596
00:32:53.650 --> 00:32:55.540
lying around. You may not
have to buy anything to

597
00:32:55.540 --> 00:33:01.300
start using Johnny, Correct? Yes.
It were something. So we

598
00:33:01.300 --> 00:33:04.030
can get the code from
the presentation that you gave

599
00:33:04.480 --> 00:33:09.460
up@yourgithubatgithub.com slash Eliza danger. And
you've got a Johnny five

600
00:33:09.460 --> 00:33:12.850
hardware hacking a section with
the samples and would it

601
00:33:12.850 --> 00:33:14.290
be okay if I use
that? If I gave a

602
00:33:14.290 --> 00:33:17.710
talk somewhere It's I think
I threw an MIT license

603
00:33:17.710 --> 00:33:20.410
in there. So you should
be fine. Yep. With attribution

604
00:33:20.410 --> 00:33:23.080
always. Yeah. Well, thanks so
much for chatting with me

605
00:33:23.080 --> 00:33:26.440
today. I've had a great
time. This has been another

606
00:33:26.440 --> 00:33:29.020
episode of Hanselminutes and we'll
see you again next week.

607
00:33:29.440 --> 00:33:36.430
<inaudible>.

