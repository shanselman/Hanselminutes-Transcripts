WEBVTT FILE

1
00:00:12.030 --> 00:00:17.790
From Hansel minutes.com it's Hansel
minutes or weekly discussion with

2
00:00:17.790 --> 00:00:22.950
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:22.960 --> 00:00:29.430
show number one 97. Recorded
live Wednesday, January 27th, 2010. Support for

4
00:00:29.430 --> 00:00:33.060
Hansel minutes is provided by
Tellerik rad controls, the most

5
00:00:33.060 --> 00:00:36.720
comprehensive suite of components for
windows forms and asp.net web

6
00:00:36.720 --> 00:00:46.110
applications online@wwwdottelrik.com. In this episode,
Scott talks about the DLR

7
00:00:46.410 --> 00:00:52.580
with iron Ruby program manager,
Jimmy Shameni. Hi, So Scott

8
00:00:52.580 --> 00:00:54.800
Hanselman, and this is another
episode of Hansel minutes, and

9
00:00:54.800 --> 00:00:57.080
this week I'm up on
campus at Microsoft and I'm

10
00:00:57.080 --> 00:00:59.510
sitting here in building 41
with the one and only

11
00:00:59.810 --> 00:01:02.360
Jimmy <inaudible>. How are you,
sir? Pretty good, Scott, how

12
00:01:02.360 --> 00:01:05.990
are you? I'm well, good
user are the PM program

13
00:01:05.990 --> 00:01:09.290
manager for iron Ruby, and
also iron Python right now.

14
00:01:09.770 --> 00:01:12.260
That's me. So I am
here in your office, a

15
00:01:12.260 --> 00:01:14.990
lovely office. You have here
a small windowless office in

16
00:01:14.990 --> 00:01:18.590
the, in the middle of
the bowels of the beast.

17
00:01:18.650 --> 00:01:21.650
My cave that is building
41. And I want to

18
00:01:21.650 --> 00:01:24.950
know what's what's the status
of the DLR, the dynamic

19
00:01:24.950 --> 00:01:29.420
language runtime what's up. So
the dynamic language run time

20
00:01:29.420 --> 00:01:33.830
was announced three years ago,
or whatnot as a, as

21
00:01:33.830 --> 00:01:38.420
a runtime for dynamic languages
on the CLR. What it's

22
00:01:38.420 --> 00:01:42.320
turned into is a platform
that actually a C sharp

23
00:01:42.320 --> 00:01:45.770
and VB have built upon.
So to either remind or

24
00:01:45.770 --> 00:01:52.070
cue and listeners, the dynamic
language, runtime language specific pieces

25
00:01:52.070 --> 00:01:56.870
have shipped in or shipping
in visual studio, 2000 ten.net

26
00:01:56.870 --> 00:02:00.560
for Oh, okay. So you're
saying that.net for O is

27
00:02:00.650 --> 00:02:03.140
a dealer, the dealer one
shipped in that, or I

28
00:02:03.140 --> 00:02:05.540
guess, dealer for what you
guys call it. What do

29
00:02:05.540 --> 00:02:09.290
you call it? Well, it's
system core really? It's inside

30
00:02:09.290 --> 00:02:12.020
there. Yeah. So system core
has been updated with all

31
00:02:12.020 --> 00:02:15.320
the dynamic language, runtime expression
trees and all the things

32
00:02:15.320 --> 00:02:18.950
that dynamic language implementers we
need to depend on when

33
00:02:18.950 --> 00:02:23.270
making their, their language. Okay.
There's another set of APIs,

34
00:02:23.270 --> 00:02:26.300
the hosting API APIs, which
users would consume. So if

35
00:02:26.300 --> 00:02:29.360
you're you want to host
one of these languages, those

36
00:02:29.360 --> 00:02:32.570
are not in, in the,
in the framework. So that's

37
00:02:32.570 --> 00:02:34.370
the piece of the deal
are we left outside because

38
00:02:34.370 --> 00:02:35.750
we weren't done with it.
So let me see what

39
00:02:35.750 --> 00:02:38.930
I understand this then. So
I want to make scott.net.

40
00:02:40.100 --> 00:02:42.560
I can do that on
dotnet for, without adding any

41
00:02:42.560 --> 00:02:45.980
references to any strange DLLs.
If once I've got system

42
00:02:45.980 --> 00:02:48.980
and system dot Corp, I'm
doing my thing. Yep. Then

43
00:02:49.130 --> 00:02:51.950
Jimmy wants to write an
application that happens to host

44
00:02:52.010 --> 00:02:55.790
the scott.net scripting language. You
then bring in system dot

45
00:02:55.790 --> 00:02:59.470
what you bring in Microsoft
that scripting Microsoft scripting. Okay.

46
00:02:59.470 --> 00:03:02.110
So Microsoft Does scripting is
the out of band hosting.

47
00:03:02.370 --> 00:03:05.190
Yup. And we've actually frozen
that API. So we, we

48
00:03:05.340 --> 00:03:07.230
we've done all the due
diligence to ship it in

49
00:03:07.230 --> 00:03:11.310
the framework. We just weren't
satisfied with the quality at

50
00:03:11.310 --> 00:03:13.380
the time, but now we
are okay. So where do

51
00:03:13.380 --> 00:03:16.110
I, where do I get
that? So that's available both.

52
00:03:16.350 --> 00:03:21.390
So main place is dlr.covid.com.
Okay. It is also part

53
00:03:21.390 --> 00:03:23.880
of Ruby and Python's, you
know, iron, Ruby and iron

54
00:03:23.880 --> 00:03:28.230
Python's distributions, but the latest
ones on DLR dot code

55
00:03:28.230 --> 00:03:31.170
Plex. Okay. Now, if I'm
using Dutton at three, five,

56
00:03:31.560 --> 00:03:34.290
what are my DLR options?
There's also a build for

57
00:03:34.290 --> 00:03:38.700
three, five on dlr.covid.com, which
gives you Microsoft scripting dot

58
00:03:38.700 --> 00:03:41.960
DLL as well as Microsoft
scripting dot Corp. Oh, okay.

59
00:03:41.970 --> 00:03:44.760
DLL, which is exactly the
same source code that we

60
00:03:44.760 --> 00:03:48.600
moved into system core. In
fact, it's system core, just

61
00:03:48.600 --> 00:03:51.870
renamed, basically everything that is
in system core is now

62
00:03:51.870 --> 00:03:55.650
in that, in that assembly,
I can understand that system

63
00:03:55.680 --> 00:03:58.440
core is supported because it's
going to ship with FORO.

64
00:03:58.440 --> 00:04:00.150
So that means that if
I'm a company that wants

65
00:04:00.150 --> 00:04:03.380
to use dynamic languages, it's
totally a supported thing. It's

66
00:04:03.500 --> 00:04:05.630
yeah. You've got your 10
year support contract. It's in

67
00:04:05.630 --> 00:04:08.280
the framework. I want to
use it on three, five.

68
00:04:08.370 --> 00:04:09.870
I'm going to go to
COVID Plex and get this

69
00:04:09.870 --> 00:04:13.050
what's the relationship there. That's
just an open source, a

70
00:04:13.110 --> 00:04:16.560
open source project and you
know, MSPL licensed. But So

71
00:04:16.560 --> 00:04:18.510
even though it's identical, when
I'm running under three, five,

72
00:04:18.510 --> 00:04:22.980
it's, it's a, it's effectively
yet another open source library

73
00:04:22.980 --> 00:04:24.930
that I would use. And
I have all the guarantees

74
00:04:24.930 --> 00:04:29.460
that opensource provides. Yes, exactly.
Which is exactly what have

75
00:04:29.460 --> 00:04:31.920
all the benefits that, Right.
Are you going to keep

76
00:04:31.920 --> 00:04:33.330
those in sync or is
that the end of that?

77
00:04:33.360 --> 00:04:35.400
Yeah. So those are going
to be insane. Now I

78
00:04:35.400 --> 00:04:40.560
don't foresee a lot of
changes to the core soon.

79
00:04:40.590 --> 00:04:42.300
I think we're going to
be doing more innovation in

80
00:04:42.300 --> 00:04:47.670
the, in the hosting API
APIs. Now that while they're

81
00:04:47.880 --> 00:04:50.760
the, the hosting API APIs
that a user consumes are

82
00:04:50.820 --> 00:04:52.350
hardened, we said we did.
I said, we did the

83
00:04:52.350 --> 00:04:54.750
due diligence to get those
in the framework. What we

84
00:04:54.750 --> 00:04:57.600
didn't do is the due
diligence on the, what a

85
00:04:57.600 --> 00:04:59.820
language implementer would have to
do to interface with the

86
00:04:59.820 --> 00:05:03.090
hosting API. So we're still
working out those kinks and

87
00:05:03.090 --> 00:05:05.460
that's, that's main the main
reason why we didn't put

88
00:05:05.460 --> 00:05:07.590
it in the framework, but
that's a, that's where most

89
00:05:07.590 --> 00:05:09.390
of the work will be
done in the future. But

90
00:05:09.630 --> 00:05:12.270
any changes that'll happen on
the code Plex side will

91
00:05:12.270 --> 00:05:14.670
be moved in the framework
what's in the framework has

92
00:05:14.670 --> 00:05:16.800
moved in the code blocks,
vice versa. Okay. How does

93
00:05:16.800 --> 00:05:20.100
that affect the development of
scott.net as a, as a

94
00:05:20.100 --> 00:05:22.440
language developer? If I go
and invent this new language,

95
00:05:22.830 --> 00:05:24.780
the fact that some of
the things aren't baked on

96
00:05:24.780 --> 00:05:27.510
the hosting side, does that
change my life at all?

97
00:05:28.470 --> 00:05:32.430
It shouldn't. So, so very
rarely do we actually make

98
00:05:32.430 --> 00:05:36.600
breaking changes. It's just more
about making it easier, right?

99
00:05:36.600 --> 00:05:39.270
So, you know, if, if
you want to take, you

100
00:05:39.270 --> 00:05:41.880
know, new dependencies on, on
whatever the new things we'll

101
00:05:41.880 --> 00:05:46.200
be doing, and that's great,
but as far as breaking

102
00:05:46.200 --> 00:05:49.140
changes, we try not to
make those a lot, but

103
00:05:49.140 --> 00:05:51.060
in the hosting API, as
far as what your users

104
00:05:51.060 --> 00:05:53.400
would consume, that won't break.
So you can at least,

105
00:05:53.400 --> 00:05:55.500
you know, if you, as
a language implementer have to

106
00:05:55.500 --> 00:05:57.470
take some pain, you know,
you users won't have to

107
00:05:57.770 --> 00:06:01.300
even rebuild. Yeah. What are
some languages that are dynamic

108
00:06:01.300 --> 00:06:04.090
languages, there's Ruby and Python,
but what other ones are

109
00:06:04.090 --> 00:06:08.800
people really actively working on?
So PHP is considered a

110
00:06:08.800 --> 00:06:13.180
dynamic language also like Dottin
and implementation implementation. I want

111
00:06:13.180 --> 00:06:16.210
to understand what's sitting on
the deal. So, so there's,

112
00:06:16.210 --> 00:06:20.800
there's a bunch of random,
random things. There's a scheme

113
00:06:20.800 --> 00:06:26.470
implementation ironed scheme. I don't,
I don't really know how,

114
00:06:27.280 --> 00:06:30.700
how well of a scheme
implementation it's it is, it's

115
00:06:30.730 --> 00:06:32.650
almost a one over lease,
but I, I'm not sure

116
00:06:32.650 --> 00:06:35.020
what that means. And I'm
not a list per scheme

117
00:06:35.020 --> 00:06:39.280
person. I'd have to ask
bill Childs about that. Speaking

118
00:06:39.280 --> 00:06:42.130
of which bill actually wrote
a sample language for the

119
00:06:42.130 --> 00:06:46.420
deal are called simple, which
is like a weird scheme

120
00:06:46.600 --> 00:06:50.920
Python mixture or, Oh, so
a complete sample that shows

121
00:06:50.920 --> 00:06:53.380
how to make Complete sample
of how to make a

122
00:06:53.440 --> 00:06:58.000
language called simple. It's like
I said, it's a, it's

123
00:06:58.000 --> 00:07:01.690
a list and Python, mashup,
basically language. So it's, it's,

124
00:07:02.380 --> 00:07:07.300
you know, that's, that's cool.
There's also just, just recently,

125
00:07:07.960 --> 00:07:12.850
at least announced was iron
JS. So iron J so

126
00:07:12.850 --> 00:07:17.860
an iron JavaScript, JavaScript invitation
of DLR many, many, many

127
00:07:17.860 --> 00:07:21.160
years ago. Yeah. So, so
the, when DLR was announced,

128
00:07:21.160 --> 00:07:24.900
this was like mix six.
Yeah. Or something like that,

129
00:07:24.900 --> 00:07:28.720
like that. Yeah, it was
six or seven. I don't

130
00:07:28.720 --> 00:07:31.210
remember which one. It was
mix of six. Okay. So

131
00:07:32.260 --> 00:07:35.950
when that was announced, there
were four languages that were

132
00:07:36.040 --> 00:07:39.130
said that we were working
on. One was Ruby. One

133
00:07:39.130 --> 00:07:41.260
was Python. Ruby was the
new one. And then we

134
00:07:41.260 --> 00:07:43.180
also said there would be
JavaScript and there would be

135
00:07:43.180 --> 00:07:48.220
VB JavaScript. And VB turned
out to be languages that

136
00:07:48.220 --> 00:07:52.240
we were just using as
vetting of the design. And

137
00:07:52.390 --> 00:07:54.670
what ended up happening was
they were different teams that

138
00:07:54.670 --> 00:07:57.090
were maintaining them. So the
VB team had a couple

139
00:07:57.110 --> 00:07:59.920
people who were working with
us and the JavaScript team

140
00:07:59.920 --> 00:08:01.900
at Microsoft had a couple
people who were working with

141
00:08:01.900 --> 00:08:04.480
us and we've added the
design with them. It was

142
00:08:04.480 --> 00:08:07.150
great. And, you know, JavaScript
had other priorities like, you

143
00:08:07.150 --> 00:08:10.330
know, with IAE and VB
with, you know, dev 10.

144
00:08:10.340 --> 00:08:13.780
So we just, our schedules
didn't align. Okay. So we

145
00:08:13.780 --> 00:08:16.780
use those languages as tests
basically to verify that the

146
00:08:16.780 --> 00:08:19.630
DLR was a good, they're
gone to build upon there.

147
00:08:19.660 --> 00:08:24.010
They still well, so the
code in our, in our

148
00:08:24.010 --> 00:08:27.670
internal repository is, is, has
gone as in broken, beyond

149
00:08:27.910 --> 00:08:32.020
repair, right. We atrophied, you
know, for the past four

150
00:08:32.020 --> 00:08:33.880
years, we tried to keep
them working. But I think

151
00:08:33.880 --> 00:08:36.400
last year we decided to
pull the plug on JS

152
00:08:36.400 --> 00:08:39.610
and VB was, we pulled
the plug long, long before,

153
00:08:39.640 --> 00:08:41.620
just because it was too
much for us Just to

154
00:08:41.620 --> 00:08:44.380
make sure that teachers are
listening, understand this was a

155
00:08:44.560 --> 00:08:48.040
sample implementation of VB VB
script. Probably it was called

156
00:08:48.040 --> 00:08:50.320
the VB script. Right. And
this, this has nothing to

157
00:08:50.320 --> 00:08:52.900
do and no relationship at
all with visual basic and

158
00:08:52.900 --> 00:08:55.680
visual basic 10, the chips
had done it. Absolutely. Just

159
00:08:55.680 --> 00:08:57.930
to make sure that folks,
okay, so then those are

160
00:08:57.930 --> 00:08:59.730
dead, but those are kind
of off the fish digital.

161
00:08:59.970 --> 00:09:02.640
Yep. Talk to me about
iron Ruby and iron Python

162
00:09:02.820 --> 00:09:05.340
where, whereas where's their status.
I mean, are they still

163
00:09:05.340 --> 00:09:07.650
toys or is it time
to start doing some work?

164
00:09:07.940 --> 00:09:10.850
So iron pythons, hasn't been
a toy for a very

165
00:09:10.850 --> 00:09:13.730
long time. And I are,
Ruby is definitely graduating out

166
00:09:13.730 --> 00:09:17.300
of, out of toy phase,
even, even, you know, for

167
00:09:17.300 --> 00:09:20.480
months it's not been a
toy, I would say. So.

168
00:09:20.930 --> 00:09:25.160
So iron pythons, current releases
to dot six, two dot

169
00:09:25.160 --> 00:09:29.420
six was released at the
end of December. And basically

170
00:09:29.420 --> 00:09:32.810
it's compatible with Python two
six. So the current version

171
00:09:32.810 --> 00:09:36.090
of Python and R and
Python are fully right. It's

172
00:09:36.110 --> 00:09:38.600
a real thing. It's a
complete Python. Yeah, just, yeah.

173
00:09:38.780 --> 00:09:41.450
Now the, now the places
where it's not compatible are

174
00:09:41.450 --> 00:09:47.540
where, where a third party
extensions to Python had been

175
00:09:47.540 --> 00:09:51.320
built that are written in
C those like num PI

176
00:09:51.320 --> 00:09:55.210
for instance, that doesn't run
directly on iron Python though.

177
00:09:55.210 --> 00:09:59.570
There's what is this? <inaudible>
yeah. A new numerical computing.

178
00:09:59.840 --> 00:10:02.630
Oh, and this is a
library that's just windows specific

179
00:10:02.630 --> 00:10:07.520
or iron Python Specific pregnancy.
It does work on windows.

180
00:10:07.520 --> 00:10:12.470
It does work on, on
Unix, but we don't support

181
00:10:12.500 --> 00:10:15.950
the C API that Python
exposes. Okay. So if I

182
00:10:15.950 --> 00:10:18.410
understand, because iron Python sits
in the DLR, which is

183
00:10:18.410 --> 00:10:20.270
in the CLR, that means
that iron Python is completely

184
00:10:20.270 --> 00:10:22.430
managed. Yep. This is the
kind of the P of

185
00:10:22.430 --> 00:10:26.270
Oak P invoke equivalent. You've
got a no totally native.

186
00:10:27.050 --> 00:10:29.840
Yes, exactly. And, and while,
you know, we don't even

187
00:10:29.840 --> 00:10:33.320
suggest bridging that gap because
of the P invoke a

188
00:10:33.350 --> 00:10:40.670
boundary would be, would be
very costly. So, so what

189
00:10:40.670 --> 00:10:43.580
we suggest for people writing
iron Python extensions, you just

190
00:10:43.580 --> 00:10:45.230
write them in C sharp
and we can consume them.

191
00:10:45.410 --> 00:10:47.900
But there is a project
called ironclad, which is a,

192
00:10:48.590 --> 00:10:52.550
an implementation of the Python
C API on the CLR.

193
00:10:52.820 --> 00:10:55.400
So you can, you can
use this library to bridge

194
00:10:55.400 --> 00:10:57.410
the gap, but we don't
support that. But that's the

195
00:10:57.410 --> 00:11:01.100
only place where iron Python
falls over to everywhere else,

196
00:11:01.100 --> 00:11:04.580
as far as accountability in
the language. And, and, and

197
00:11:04.580 --> 00:11:08.180
then integration with the.net framework
is there on iron Ruby

198
00:11:08.180 --> 00:11:11.240
side, iron Ruby's approaching a
one over release. We've been

199
00:11:11.240 --> 00:11:13.100
saying this for a while,
but this time actually mean

200
00:11:13.100 --> 00:11:15.230
it. And so you haven't
seen this for a while.

201
00:11:15.260 --> 00:11:21.290
So, so we released one
ORC. Oh, yes. At Ruby

202
00:11:21.290 --> 00:11:24.230
conf, which was in the
middle of November. So we

203
00:11:24.230 --> 00:11:27.140
released the first release candidate
candidate. We're planning another one

204
00:11:28.400 --> 00:11:31.430
in the beginning of next
month. That'd be February, 2010. For

205
00:11:31.430 --> 00:11:32.960
those of us who may
be time travelers are listening

206
00:11:32.960 --> 00:11:37.070
to this interview. Yes, exactly.
So, and then, and then

207
00:11:37.070 --> 00:11:41.420
we're going to hopefully not
have another RC after that,

208
00:11:41.690 --> 00:11:44.480
depending on. So what, what's
the feedback? What's the vibe.

209
00:11:44.720 --> 00:11:49.610
So it's, It's a, it's
a lot faster than it

210
00:11:49.610 --> 00:11:52.010
used to be like a
lot faster and we're still

211
00:11:52.010 --> 00:11:55.180
doing performance improvement. So the
nice thing about an open

212
00:11:55.180 --> 00:11:59.230
source project and something where
we can kind of run

213
00:11:59.230 --> 00:12:01.360
our test suite in, within
the course of a couple

214
00:12:01.360 --> 00:12:03.760
of days to see if
we broke anything, is we

215
00:12:03.760 --> 00:12:06.430
can make a pretty significant
changes even this late in

216
00:12:06.430 --> 00:12:09.160
the game. So though it's
an RC we've heard, you

217
00:12:09.160 --> 00:12:12.100
know, from the, the, Oh
dot nine releases when we

218
00:12:12.100 --> 00:12:14.170
were coming up to the
one ORC that, you know,

219
00:12:14.170 --> 00:12:16.990
performance needs to be better,
especially startups. So we've been

220
00:12:16.990 --> 00:12:21.580
working on startup decreased startup
time by half in the

221
00:12:21.580 --> 00:12:25.230
last, in the last, just
less release I could read,

222
00:12:25.290 --> 00:12:27.030
I could read the code,
but seriously for a second,

223
00:12:27.350 --> 00:12:29.970
let's pause geek out for
a second. Sure. How do

224
00:12:29.970 --> 00:12:32.040
you, how did you decrease
the startup time? Why was

225
00:12:32.040 --> 00:12:34.470
it slow and how did
you decrease it? So A

226
00:12:34.470 --> 00:12:37.830
little trick, both in Ruby
and in Python. So it

227
00:12:37.830 --> 00:12:44.550
was slow because we were,
we were jitting call sites,

228
00:12:44.550 --> 00:12:47.880
which in the DLR is
basically a signature of a

229
00:12:47.880 --> 00:12:49.860
method. Right. But we were,
we were getting those for

230
00:12:49.860 --> 00:12:54.180
every generic type that we
used when starting up. And

231
00:12:54.180 --> 00:12:58.080
that turns out to be
really, really, really slow. So

232
00:12:58.320 --> 00:13:01.830
we just delayed that jet
compiling until you're actually running

233
00:13:01.830 --> 00:13:04.200
the code rather than doing
it at startup. So we

234
00:13:04.200 --> 00:13:06.300
would, we would pre compile
these things, thinking we re

235
00:13:06.330 --> 00:13:10.860
we're smart and we worked
so, so, and it just

236
00:13:10.860 --> 00:13:15.780
shows how hard language implementations
are. Hey everybody, this is

237
00:13:15.780 --> 00:13:18.450
Scott coming at you from
another place in time. No

238
00:13:18.450 --> 00:13:20.970
doubt. You probably bumped into
testing tasks now, and then,

239
00:13:20.970 --> 00:13:23.730
and your work and, you
know, writing functional tests is

240
00:13:23.730 --> 00:13:25.680
probably not your favorite thing.
It's kind of difficult. It

241
00:13:25.680 --> 00:13:28.410
takes time and the results
can be dubious. Well, I'll

242
00:13:28.410 --> 00:13:31.200
get ready to start liking
tests. Thanks to Tellerik with

243
00:13:31.200 --> 00:13:35.280
the, the new whereby testing
framework. Building web automation test

244
00:13:35.280 --> 00:13:38.760
is a breeze. You've got
code automation with advanced asp.net,

245
00:13:38.790 --> 00:13:41.100
Ajax and server wide applications.
You can write a single

246
00:13:41.100 --> 00:13:45.060
test, have it executed against
multiple browsers at once. You'd

247
00:13:45.060 --> 00:13:48.150
benefit from a rich API
there's link support integration with

248
00:13:48.180 --> 00:13:51.510
visual studio, unit testing, also
end unit X unit and

249
00:13:51.510 --> 00:13:54.810
NBA unit, not to mention
the free rappers for Telerik

250
00:13:54.810 --> 00:13:57.960
rad controls for ESPN and
Ajax, and several light, all

251
00:13:57.960 --> 00:14:01.260
shipping with Telerik's new testing
tool. One of the best

252
00:14:01.260 --> 00:14:04.350
features, the webinar testing framework,
which is developed by art

253
00:14:04.350 --> 00:14:08.550
of test is it's absolutely
free. Freddie got hooked on

254
00:14:08.550 --> 00:14:11.340
web testing framework, start using
it right away, go to

255
00:14:11.340 --> 00:14:15.630
tellerik.com for more info. Thanks
a lot. Would you say

256
00:14:15.630 --> 00:14:17.850
that you did, you did
a micro optimization, or you

257
00:14:17.850 --> 00:14:19.560
just took a bet that
you were doing something to

258
00:14:19.560 --> 00:14:22.410
be faster and you just
got wrong. We knew, well,

259
00:14:22.620 --> 00:14:25.260
I don't know. Cause I
didn't write, I didn't write

260
00:14:25.260 --> 00:14:27.750
that initial code. I'm not
sure why it was, it

261
00:14:27.750 --> 00:14:30.600
was like that, but how
we found it was just

262
00:14:30.600 --> 00:14:33.330
from running Ruby applications and
we're looking at their startup

263
00:14:33.600 --> 00:14:36.380
and then, you know, running
the CLR profiler on our,

264
00:14:36.380 --> 00:14:38.190
on our code and seeing
where we were sitting. And

265
00:14:38.190 --> 00:14:40.650
we, you know, just doing
this unnecessary work in the

266
00:14:40.650 --> 00:14:42.930
jet for very long time.
So it just, you know,

267
00:14:42.940 --> 00:14:45.450
matter of kind of looking
at it and saying, Oh

268
00:14:45.450 --> 00:14:48.120
yeah, we can remove this.
So What kind of Ruby

269
00:14:48.120 --> 00:14:51.560
apps are you running? So
that, that Ruby app a

270
00:14:51.560 --> 00:14:55.130
was interactive Ruby. It's the
Ruby command line program IRB,

271
00:14:55.850 --> 00:14:59.090
but we also do startup
and throughput perf analysis on

272
00:14:59.090 --> 00:15:03.940
rails on other web frameworks
like cinnamon. So rails runs

273
00:15:03.940 --> 00:15:06.280
fine on end. Yeah. So
rails runs fine. We actually

274
00:15:06.280 --> 00:15:07.720
have done a lot of
work. We did a lot

275
00:15:07.720 --> 00:15:11.620
of work about six months.
Yeah. Six months ago for

276
00:15:11.620 --> 00:15:16.270
a rails comp to, to
show real, real apps running

277
00:15:16.270 --> 00:15:19.270
on, on iron Ruby. So
the year before that we

278
00:15:19.270 --> 00:15:22.270
showed the simplest whole world
thing working right. Which was

279
00:15:22.270 --> 00:15:24.370
like, Oh my God, I
don't believe we actually got

280
00:15:24.370 --> 00:15:27.370
this working because it wasn't
stable, but we showed it.

281
00:15:27.370 --> 00:15:30.490
And it was great. And
year later we're running a

282
00:15:30.520 --> 00:15:33.370
relapse in kind of, you
know, almost, almost, But do

283
00:15:33.370 --> 00:15:36.460
they have to be changed
to add inside Microsoft? No.

284
00:15:36.460 --> 00:15:41.230
So the, the interesting thing
is they ran unchanged because

285
00:15:41.230 --> 00:15:46.000
rails is database. So, so
I should pop up for

286
00:15:46.000 --> 00:15:49.960
a second. We did have
the, not add things to

287
00:15:49.960 --> 00:15:54.190
rails, but, but add, add
certain support to things like

288
00:15:54.190 --> 00:15:57.490
the database, adapters and rails,
for instance, rails has a

289
00:15:57.490 --> 00:16:01.540
SQL server adapter, right? That
talks through ODBC, Oh, you

290
00:16:01.540 --> 00:16:04.990
want it to talk to
ado.net? Right? So, so we

291
00:16:04.990 --> 00:16:08.740
had to build a it's
actually a Ruby has a

292
00:16:08.740 --> 00:16:15.310
DBI database interface API, which
we then added a ado.net

293
00:16:15.820 --> 00:16:19.270
implementation to. And then the
SQL server adapter for active

294
00:16:19.270 --> 00:16:24.310
record, which is part of
rails that talks to SQL

295
00:16:24.310 --> 00:16:27.520
server now just supports if
it uses that version of

296
00:16:27.520 --> 00:16:29.380
DBI, it just, it just
worked. So we had to

297
00:16:29.380 --> 00:16:31.990
do those types of changes,
but the apps don't have

298
00:16:31.990 --> 00:16:35.740
to change because rails itself
is database agnostic where you

299
00:16:35.740 --> 00:16:38.410
want to build the database.
It just, you, you use

300
00:16:38.410 --> 00:16:40.360
Ruby code to do it
and then same thing with

301
00:16:40.360 --> 00:16:42.730
the web servers. So, so
help me out. What does

302
00:16:42.730 --> 00:16:44.140
this look like? Cause I
think a lot of the

303
00:16:44.140 --> 00:16:47.830
people who are listening have,
have heard about iron Ruby,

304
00:16:47.830 --> 00:16:50.740
they've read the blogs, but
I doubt that the majority

305
00:16:50.740 --> 00:16:53.350
of people have downloaded this
and set this up. So

306
00:16:53.350 --> 00:16:56.530
on windows, I go get
iron Ruby from the DLR

307
00:16:56.530 --> 00:16:58.740
side at code Plex. And
then what happens? Do you

308
00:16:58.740 --> 00:17:01.630
ever own a own code
black site for iron Ruby

309
00:17:01.630 --> 00:17:06.070
dot code, flux.com? You just
click the download button, the

310
00:17:06.070 --> 00:17:09.220
default downloads a zip file.
And basically you just had

311
00:17:09.220 --> 00:17:11.380
an MSI. So, so there
is an MSI in there

312
00:17:11.380 --> 00:17:15.760
too, but the default is
zip. Okay. And you, and

313
00:17:15.760 --> 00:17:17.950
you just unzip it to,
to your C drive. And

314
00:17:17.980 --> 00:17:21.160
I Ruby sitting in there,
the bin directory is, is,

315
00:17:21.160 --> 00:17:24.130
has all the armory, binaries,
and you just double click

316
00:17:24.160 --> 00:17:27.520
<inaudible>. It would give you
a command prompt. Okay. Which

317
00:17:27.520 --> 00:17:29.980
is the same as IRB,
which is exactly the same

318
00:17:29.980 --> 00:17:31.750
as that. Okay. And then
I can write, I can

319
00:17:31.750 --> 00:17:33.460
do interactive Ruby. I can
teach my kid Ruby. I

320
00:17:33.460 --> 00:17:35.260
can do all that kind
of try Ruby stuff. Okay.

321
00:17:35.260 --> 00:17:36.970
So now I want to
make a hello world rails

322
00:17:36.970 --> 00:17:40.000
application, then what do I
do? So then you'd because

323
00:17:40.000 --> 00:17:43.420
Ruby, so iron Ruby is
a Ruby implementation. So we

324
00:17:43.420 --> 00:17:45.910
shipped with all the things
that Ruby would usually ship

325
00:17:45.910 --> 00:17:49.060
with. And one of them
is a package management program

326
00:17:49.470 --> 00:17:53.910
gems. Wow. And so you
do, because you have the

327
00:17:53.910 --> 00:17:57.840
Ruby installed there, you do
gem install, rails and iron

328
00:17:57.840 --> 00:18:00.540
Ruby. We then go to
the Ruby gems repository on

329
00:18:00.540 --> 00:18:04.110
the internet, download rails, install
the necessary programs for it.

330
00:18:04.160 --> 00:18:05.900
Okay. So just want to
make sure I understand. So

331
00:18:05.900 --> 00:18:10.640
Jim does ECC that you
ship is a.net application? Nope.

332
00:18:11.870 --> 00:18:16.070
What is it? Jim dot
RV. It's it's well, there's

333
00:18:16.070 --> 00:18:18.770
gem dot bat and then
Jim just gem, but it's

334
00:18:18.770 --> 00:18:22.650
a Ruby program. Okay. So
Jim dot Pat calls, calls

335
00:18:23.270 --> 00:18:26.230
Z with the program, Jammin
sends the arguments along. Yeah,

336
00:18:26.270 --> 00:18:28.940
yeah. Maybe obvious to you,
but not necessarily. Sure. So

337
00:18:28.940 --> 00:18:30.740
then you bring, and when
you start bringing down rails

338
00:18:30.740 --> 00:18:33.080
and you're bringing it down,
Ruby code Straight Ruby. Yup.

339
00:18:33.410 --> 00:18:35.000
Yup. And you're running Ruby
code at that time. And

340
00:18:35.000 --> 00:18:36.740
then what's the name of
the web server that Ruby

341
00:18:36.740 --> 00:18:38.630
uses. It's been a wild
screen. So rails rather than

342
00:18:38.630 --> 00:18:45.290
So the, so web brick
is the default web server.

343
00:18:45.350 --> 00:18:49.910
There's a bunch of other
web servers like mongrel and

344
00:18:50.270 --> 00:18:54.710
thin, et cetera. You can
actually use Cassini though on

345
00:18:54.710 --> 00:18:57.470
windows. Cassini is the code
name internally. Microsoft are the

346
00:18:57.470 --> 00:18:59.930
old name for the visual
studio web server. You can

347
00:18:59.930 --> 00:19:02.810
still find the Cassini sample.
That is true. Right. That

348
00:19:02.810 --> 00:19:04.820
is true. As soon as
a beautiful thing. But let's

349
00:19:04.820 --> 00:19:07.520
say that I wanted to
run this on <inaudible> yes.

350
00:19:07.550 --> 00:19:11.780
Then what do I do?
There's a, another binary you

351
00:19:11.780 --> 00:19:14.840
download, we, we should package
it up as a gem

352
00:19:14.840 --> 00:19:17.840
one of these days, but
there's something called iron Ruby

353
00:19:17.840 --> 00:19:23.090
dot rack. And rack is
a Ruby framework for abstracting

354
00:19:23.090 --> 00:19:26.570
away the web server from
the web framework. So rails,

355
00:19:27.050 --> 00:19:32.240
Sinatra, camping, you name it,
whatever fun name. Yeah. I

356
00:19:32.240 --> 00:19:34.040
know. You're just like, as
far as I'm concerned, you're

357
00:19:34.040 --> 00:19:37.310
just like making, make random
names. They've got like, they've

358
00:19:37.310 --> 00:19:42.050
got like, you know, Chandler
bang and, and Serpico and

359
00:19:42.430 --> 00:19:43.970
you know, you just make
a names up as for,

360
00:19:43.980 --> 00:19:45.980
I have no idea if
these are real things afterwards,

361
00:19:45.980 --> 00:19:48.200
I'm going to go and,
and Oh fact, check me.

362
00:19:48.650 --> 00:19:55.310
So, so the random web
frameworks that Ruby supports all

363
00:19:55.310 --> 00:20:00.710
support, this shared rack framework,
which is basically abstracting the

364
00:20:00.710 --> 00:20:05.480
request and response right away.
So we have a version

365
00:20:05.480 --> 00:20:09.740
of that for iOS and
that's how you deploy any

366
00:20:09.740 --> 00:20:14.090
Ruby rack based web application
on iOS. So we had

367
00:20:14.090 --> 00:20:16.910
to Make a better SQL
server driver that goes to

368
00:20:16.910 --> 00:20:20.330
ado rather than ODPC yep.
And the interface to talk

369
00:20:20.330 --> 00:20:24.440
to <inaudible>. Yes. And it
was that, that interface, is

370
00:20:24.440 --> 00:20:26.660
that using like I sappy
or is it using like

371
00:20:26.660 --> 00:20:31.490
fast CGI? It's actually a,
an asp.net handler protocol. Yeah.

372
00:20:31.700 --> 00:20:37.610
So why is it not
fascinating? Yeah. So, because I

373
00:20:37.610 --> 00:20:41.540
didn't want it to be
so fast. So fast. CGI

374
00:20:41.540 --> 00:20:47.590
is great when you have
two completely disconnected processes, right?

375
00:20:47.590 --> 00:20:49.510
So you have your web
server and you have your

376
00:20:49.750 --> 00:20:52.540
application server and you need
to bind them together. Right.

377
00:20:52.540 --> 00:20:55.240
This is what we use
for PHP. Exactly. So fast

378
00:20:55.240 --> 00:20:58.600
CGI talks across the process,
right. To, to communicate between

379
00:20:58.600 --> 00:21:00.790
the web server and it,
well, we have IRB it's

380
00:21:00.790 --> 00:21:04.480
dot net and I S
has, has the ysp.net pipeline

381
00:21:04.480 --> 00:21:06.820
built right in, so we
plugged directly into that. Oh

382
00:21:06.820 --> 00:21:10.510
you're yes. So your Ruby
code is actually running in

383
00:21:10.540 --> 00:21:12.760
the same process that is
running the ASP and on

384
00:21:12.760 --> 00:21:16.720
that app. That's cool. Does
that make things faster? It

385
00:21:16.720 --> 00:21:19.960
does because we can, we
can utilize all of the

386
00:21:20.140 --> 00:21:25.330
optimizations that have been done
for asp.net, at least for

387
00:21:25.330 --> 00:21:28.960
the request processing. Right. We
haven't done anything crazy, like,

388
00:21:29.200 --> 00:21:33.730
like rewrite rails is routing
to use asp.net routing or

389
00:21:33.730 --> 00:21:36.430
anything crazy like that. I
suppose you could though, you

390
00:21:36.430 --> 00:21:39.340
could, if you want wanted,
but so that, that was

391
00:21:39.340 --> 00:21:42.190
just the, the kind of
design decisions as far as

392
00:21:42.190 --> 00:21:45.910
doing that. So, so the
nice thing about deploying then

393
00:21:45.940 --> 00:21:49.270
is it's nothing different. It's
no different than an asp.net

394
00:21:49.270 --> 00:21:52.100
app. Right? Your, your rails
app has a web Configuring

395
00:21:52.110 --> 00:21:54.420
it. Yeah. Right. Which would
chop it over, make an

396
00:21:54.540 --> 00:21:58.440
app application pool. And if
you Exactly. So that's all

397
00:21:58.440 --> 00:22:01.080
you have to do to
deploy it. Wow. So do

398
00:22:01.080 --> 00:22:04.110
you know of any app
live applications that are running

399
00:22:04.110 --> 00:22:05.970
iron Ruby on rails that
are out there? We can

400
00:22:05.970 --> 00:22:10.170
visit This? No, because maybe
they're not telling you well,

401
00:22:10.170 --> 00:22:12.060
so people are trying, let's
put it that way. So

402
00:22:12.060 --> 00:22:15.210
this rail support that's really
good with this new adapter

403
00:22:15.880 --> 00:22:19.530
and running on IIS is,
is only been stable for

404
00:22:19.530 --> 00:22:21.750
the past couple months. So
now people are starting to

405
00:22:21.750 --> 00:22:23.790
use it and starting to
try to run their apps

406
00:22:23.790 --> 00:22:27.030
on it and reporting bugs.
But we've had a lot

407
00:22:27.030 --> 00:22:29.160
of chatter on the mailing
list about people trying and,

408
00:22:29.430 --> 00:22:32.670
and, and asking questions and,
and whatnot. So, you know,

409
00:22:32.670 --> 00:22:37.230
hopefully they'll, there'll be deployments
in the near future. So

410
00:22:37.440 --> 00:22:39.300
What are the speed? What's
the speed like, like I'm

411
00:22:39.300 --> 00:22:42.480
just imagining, let's say that
you've got a.a.net shop. That's

412
00:22:42.480 --> 00:22:44.670
got <inaudible>, but they've got
one Ruby app that they

413
00:22:44.670 --> 00:22:47.040
need to run. Why would
they want to bring it

414
00:22:47.040 --> 00:22:49.950
over? And I S and
iron Ruby, I guess probably

415
00:22:49.950 --> 00:22:52.970
because they have dotnet expertise
in that space. So, so

416
00:22:52.980 --> 00:22:56.370
definitely done expertise, you know,
teaching not having to relearn

417
00:22:56.370 --> 00:22:59.070
how to deploy an app
is, is a crucial, right?

418
00:22:59.280 --> 00:23:02.060
Sure. Maintaining it, managing it,
plugging it and all that.

419
00:23:03.630 --> 00:23:09.090
Yeah. So all the same,
the deploying a Ruby app

420
00:23:09.120 --> 00:23:14.490
on windows is very painful
today using standard Ruby, you,

421
00:23:14.510 --> 00:23:16.650
you have to depend on
fast CGI, which you know

422
00:23:16.650 --> 00:23:21.180
is okay, but it's not
as easy as, as doing

423
00:23:21.180 --> 00:23:25.740
it on Linux. So for
instance, Apache has something called

424
00:23:25.740 --> 00:23:30.540
mod rails, which is essentially
a native hook into Ruby

425
00:23:30.660 --> 00:23:33.870
to run Ruby inside of
Apache. So it's the equivalent

426
00:23:33.870 --> 00:23:36.840
of your it's the it's
the equivalent. And what's nice

427
00:23:36.840 --> 00:23:40.440
is, you know, this doesn't
exist for windows, this, this,

428
00:23:40.500 --> 00:23:44.100
this Apache handler actually isn't
supported on windows at all.

429
00:23:44.460 --> 00:23:47.840
So, so we have an
interesting opportunity to say, you

430
00:23:47.840 --> 00:23:49.850
know, if you really want
to run a Ruby on

431
00:23:49.850 --> 00:23:52.370
rails applications, well, on windows,
iron Ruby is the way

432
00:23:52.370 --> 00:23:55.790
to do it. So that,
that would be why, you

433
00:23:55.790 --> 00:23:57.370
know, why someone would want
to do it. You think

434
00:23:57.370 --> 00:23:59.590
it's a really active community,
because I think that for

435
00:23:59.590 --> 00:24:02.950
the average VB and C-sharp
developer, you know, we know

436
00:24:02.950 --> 00:24:04.810
that Diane Ruby and I,
and Python are out there.

437
00:24:04.810 --> 00:24:10.030
We know iron Python is
more mature. Is there, I

438
00:24:10.030 --> 00:24:12.580
mean, it's not like, it's
not like you hear this

439
00:24:12.580 --> 00:24:14.800
promoted a lot. I mean,
I think it's a pretty

440
00:24:14.800 --> 00:24:17.500
neat thing. I mean, that
people should know about, but

441
00:24:18.400 --> 00:24:20.200
are you guys under the
radar is there's just like

442
00:24:20.200 --> 00:24:21.550
four or five of you
guys. You're just like Pat

443
00:24:21.550 --> 00:24:23.500
on this out and hoping
no one notices that you're

444
00:24:23.860 --> 00:24:26.920
here. You know, some days
I feel like that, but

445
00:24:27.910 --> 00:24:29.080
I think, you know, when
you know what I'm going,

446
00:24:30.010 --> 00:24:31.600
I know you're not like
a VP that can talk

447
00:24:31.600 --> 00:24:34.450
about strategy of whatever. Definitely.
So, you know what I'm

448
00:24:34.450 --> 00:24:41.260
trying to say, Dynamic languages
are actually pretty important to

449
00:24:41.410 --> 00:24:43.990
the team that is also
the C sharp and VB

450
00:24:43.990 --> 00:24:46.780
team. Okay. So C sharp,
VB iron Ruby, iron Python,

451
00:24:46.780 --> 00:24:48.490
F sharp, we're all part
of the same team. We're

452
00:24:48.500 --> 00:24:53.950
under the same management and
because of iron Python's, you

453
00:24:53.950 --> 00:24:59.650
know, kind of been here
first status, right. We're definitely

454
00:24:59.650 --> 00:25:02.440
focusing on making iron Python,
you know, a first class

455
00:25:02.440 --> 00:25:06.100
language on, on.net, as far
as first class dynamic language,

456
00:25:06.520 --> 00:25:09.220
extremely mature is what you're
saying. Yes. And, and really

457
00:25:09.220 --> 00:25:12.580
the only thing lacking right
now with iron Python is

458
00:25:12.580 --> 00:25:18.340
tooling. There's no visual studio
integration and that as much

459
00:25:18.340 --> 00:25:21.910
as it pains my heart,
most.net developers won't even look

460
00:25:21.910 --> 00:25:24.130
at it if they can't
do file newborns. I think

461
00:25:24.150 --> 00:25:28.450
that the speaking is putting
myself in the role of

462
00:25:28.450 --> 00:25:31.120
the public from the point
of view of the public

463
00:25:31.540 --> 00:25:35.140
F sharp came out of
nowhere and jumped in to

464
00:25:35.140 --> 00:25:39.100
the new project dialogue. And,
you know, iron Python is

465
00:25:39.100 --> 00:25:41.470
kind of like Rick Maraniss
and Ghostbusters where it's like,

466
00:25:41.500 --> 00:25:46.750
Hey, how's it gone? Remember
me? You know, why, why,

467
00:25:46.780 --> 00:25:51.470
what happened? Why are we
Rick Maraniss and Ghostbusters? I,

468
00:25:52.720 --> 00:25:57.820
I don't know. I, I
would say first off that

469
00:25:58.570 --> 00:26:03.640
F sharp has a specific
customer scientists who were going

470
00:26:03.640 --> 00:26:07.990
to pay money with coats.
Yes. Have really nice white

471
00:26:08.710 --> 00:26:13.360
money and money. And money's
important not to say we

472
00:26:13.360 --> 00:26:17.650
couldn't sell, you know, Sharp
is a, is a science

473
00:26:17.650 --> 00:26:22.090
and math language. Definitely Python
is too, which is interesting.

474
00:26:23.170 --> 00:26:26.440
So, you know, it was
just the decision to go

475
00:26:26.440 --> 00:26:30.010
with F sharp F sharp
had actually existed for a

476
00:26:30.010 --> 00:26:33.670
while. Also previous to it
becoming part of O Cause

477
00:26:33.670 --> 00:26:34.930
it didn't seem like it
came out of nowhere, but

478
00:26:34.930 --> 00:26:36.730
it really was running under
the, So it came out

479
00:26:36.730 --> 00:26:40.750
of Don Syme Don Symes
lab. And I think he's

480
00:26:40.750 --> 00:26:44.670
in Cambridge, but yeah, in
Microsoft, in Cambridge. Right. And

481
00:26:44.670 --> 00:26:46.200
he'd been working on it
for a very long time

482
00:26:46.230 --> 00:26:48.450
and it had existed for
a long time. And it

483
00:26:48.450 --> 00:26:51.360
was only when people started
hearing about it was when

484
00:26:51.360 --> 00:26:53.580
it was being productized was
the word that people were

485
00:26:53.580 --> 00:26:56.780
throwing around here. The long
haul too. It's like, you

486
00:26:56.780 --> 00:26:59.990
know, overnight fame really involves
10 years of standup. Cause,

487
00:27:00.050 --> 00:27:02.300
cause you know, we, we
actually had a lot of

488
00:27:02.300 --> 00:27:06.560
overnight fame with Python and
Ruby. That was almost unjustified.

489
00:27:06.740 --> 00:27:09.290
Right. It was like, it
was almost vaporware. Ruby, Ruby

490
00:27:09.290 --> 00:27:11.630
was vaporware when we announced
it essentially. Right. We showed

491
00:27:11.630 --> 00:27:15.560
some, some little demo with
no code. Right. And, or

492
00:27:15.560 --> 00:27:18.140
at least no release code,
I should say. And, and

493
00:27:18.140 --> 00:27:19.700
you know, people were going
crazy about it. And then

494
00:27:19.820 --> 00:27:22.160
three years later, we're finally
getting to it. There's something

495
00:27:22.160 --> 00:27:24.290
to be said for not
telling anyone that you're working

496
00:27:24.290 --> 00:27:28.010
with. Yes. So, so, you
know, the, the whole way

497
00:27:28.010 --> 00:27:31.220
Microsoft releases software, as far
as, you know, doing it

498
00:27:31.220 --> 00:27:33.470
almost in a silo, right.
We're, we're definitely different than

499
00:27:33.470 --> 00:27:38.450
that. And, and we're seeing
the, I guess the community

500
00:27:38.450 --> 00:27:41.570
react differently to that. Some
people love it. And some

501
00:27:41.570 --> 00:27:43.160
people are like, well, just
when it's in V S

502
00:27:43.160 --> 00:27:48.920
tell me so, but I
w we're investing in Ruby

503
00:27:48.920 --> 00:27:51.230
and Python, you know, this
is the we're, we're doing

504
00:27:51.230 --> 00:27:54.110
the kind of next round
of planning for the next

505
00:27:54.110 --> 00:27:56.510
version of visual studio, which
is kind of when everyone

506
00:27:56.510 --> 00:27:59.640
gets money around here and,
you know, we're definitely involved

507
00:27:59.640 --> 00:28:02.300
in going anywhere. No, no.
We're definitely involved in that,

508
00:28:02.360 --> 00:28:07.070
in that, in those talks
I and Ruby is also,

509
00:28:07.370 --> 00:28:10.700
you know, plan to come
along. Right. We're we're not

510
00:28:10.700 --> 00:28:14.690
going to stop investing in
Ruby either. One of the

511
00:28:14.690 --> 00:28:16.580
nice things about Ruby and
Python is they share so

512
00:28:16.580 --> 00:28:21.170
much infrastructure. We're a team
of seven people, both Ruby

513
00:28:21.170 --> 00:28:25.430
and Python, total, and yeah.
And, and we, we so

514
00:28:25.430 --> 00:28:27.860
it's, but it's, it's split
down the middle. So we

515
00:28:27.860 --> 00:28:30.260
have three people working on
Ruby, three people working on

516
00:28:30.260 --> 00:28:34.370
Python, and then one, one
person shifting Community. Are you

517
00:28:34.370 --> 00:28:37.100
taking patches? Are you tasting?
So not to Python, but

518
00:28:37.100 --> 00:28:39.680
yes, to Ruby and Ruby,
It's an open source project

519
00:28:39.680 --> 00:28:43.760
at Microsoft that takes code
from the community. Yes. You

520
00:28:43.760 --> 00:28:48.410
heard that people. Yes. And
an iron Python has been

521
00:28:48.410 --> 00:28:51.740
forked more than once in
the past, though, those forks

522
00:28:51.740 --> 00:28:56.330
are, are, are no longer
maintained, but people had forked

523
00:28:56.390 --> 00:29:00.560
iron Python calling it fi
PI, F E PI, you

524
00:29:00.560 --> 00:29:08.090
know, whatever, as the mano
compatible version of, of iron

525
00:29:08.090 --> 00:29:10.670
Python. But now we, we
actually Ruby and Python both

526
00:29:10.670 --> 00:29:13.220
run fine right out of
the box on mano. So,

527
00:29:13.400 --> 00:29:17.090
so those, those projects aren't
needed anymore. Actually one of

528
00:29:17.090 --> 00:29:19.010
our release criteria is for,
and Ruby is, you know,

529
00:29:19.010 --> 00:29:21.320
doing some testing on Moto
and making sure, you know,

530
00:29:21.320 --> 00:29:23.690
we tell mano about the
books. Not, not that we,

531
00:29:23.930 --> 00:29:26.240
you know, we, we won't
work around them if we

532
00:29:26.240 --> 00:29:28.970
think there are there actually
bugs and motto, but they

533
00:29:28.970 --> 00:29:33.470
fix their bugs so fast.
It's unbelievable. Like days, days,

534
00:29:34.100 --> 00:29:36.620
it's, it's crazy. What are
the sites that people can

535
00:29:36.620 --> 00:29:39.110
go to, to learn about
the DLR in general and

536
00:29:39.110 --> 00:29:41.260
you know, the DLR and
Dutton at four and where

537
00:29:41.260 --> 00:29:42.910
can they go to get
iron Python, Ruby, give me

538
00:29:42.910 --> 00:29:47.200
those. So deal ARDEC code,
flex.com has everything about the

539
00:29:47.200 --> 00:29:50.020
DLR. It has a bunch
of documentation about if you

540
00:29:50.020 --> 00:29:52.870
were a someone wanting to
use it, how would you

541
00:29:52.870 --> 00:29:55.390
use it? If you're a
language implementer, if you're a

542
00:29:55.390 --> 00:29:59.650
library designer and you want
to use the DLR support

543
00:29:59.650 --> 00:30:03.100
to expose a more dynamic
API, right. Using the dynamic

544
00:30:03.100 --> 00:30:07.030
keyword and C-sharp and whatnot.
So, so that all that

545
00:30:07.030 --> 00:30:13.450
stuff is on dlr.covid.com, including
links to more MSDN documentation

546
00:30:13.930 --> 00:30:17.500
and the documentation that is
on MSDN, hence MSDN like

547
00:30:17.500 --> 00:30:24.340
exactly Ruby and Python, iron
ruby.covid.com and iron Python dot

548
00:30:24.340 --> 00:30:28.120
code plugs.com both have the,
the latest releases for both

549
00:30:28.120 --> 00:30:31.480
those languages also links to
documentation and whatnot. So that's

550
00:30:31.480 --> 00:30:33.470
where you go for all
these things. And then, and

551
00:30:33.480 --> 00:30:36.730
when Dutton had four ships
in April, there'll be compatible

552
00:30:36.730 --> 00:30:41.830
releases for those. Yes. So,
so we are definitely committed

553
00:30:41.830 --> 00:30:46.180
for iron Python to have
a fully supported, fully supported

554
00:30:46.180 --> 00:30:48.310
as in one of our
major versions. You know, as

555
00:30:48.310 --> 00:30:53.680
much as iron Python has
supported version of.net for, for

556
00:30:53.770 --> 00:30:58.690
iron Ruby, we're also aiming
for that. We might have,

557
00:30:59.070 --> 00:31:01.420
it might be a CTP
again, until we, you know,

558
00:31:01.430 --> 00:31:03.550
can test things out. Cause
we're trying to ship the

559
00:31:03.550 --> 00:31:05.530
first version possible. There's a
chance that it might happen,

560
00:31:05.890 --> 00:31:08.290
but we're trying to ship
one out right now and,

561
00:31:08.290 --> 00:31:12.460
and adding dotnet FORO to
our test matrix is ridiculous.

562
00:31:13.690 --> 00:31:16.090
I am. Ruby is primarily
three, five right now. It's

563
00:31:16.120 --> 00:31:20.830
actually, so they all run
on to OSP one. We

564
00:31:20.830 --> 00:31:23.890
don't, we don't have any
specific code for three, five.

565
00:31:23.920 --> 00:31:26.560
Yeah. Oh, that's cool. Yeah.
So, so when you run

566
00:31:26.560 --> 00:31:28.810
under three, five, even report
the version numbers to have

567
00:31:28.810 --> 00:31:32.320
it to OSP, because that's
what we're, we're linking against.

568
00:31:33.370 --> 00:31:35.530
And, but, but Don at
four O version will be

569
00:31:35.540 --> 00:31:38.710
a, you have to use
domino, right? They would take

570
00:31:38.710 --> 00:31:40.870
them to would be a
big deal. Thanks a lot

571
00:31:40.870 --> 00:31:42.220
for talking to me today.
I really appreciate it, man.

572
00:31:42.220 --> 00:31:45.580
No problem. This has been
another episode of Hansel minutes

573
00:31:45.640 --> 00:31:47.110
and I'll see you again
next week.

