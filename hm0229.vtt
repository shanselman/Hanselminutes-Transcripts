WEBVTT FILE

1
00:00:04.890 --> 00:00:17.190
<inaudible> from Hansel minutes.com. It's
Hansel minutes, a weekly discussion

2
00:00:17.190 --> 00:00:21.300
with web developer and technologists.
Scott Hanselman. This is Lawrence Ryan

3
00:00:21.300 --> 00:00:27.630
announcing show number two 29.
Recorded live Thursday, August 19th, 2007. Support

4
00:00:27.630 --> 00:00:30.720
for Hansel minutes is provided
by Telerik rad controls, the

5
00:00:30.720 --> 00:00:34.410
most comprehensive suite of components
for windows forms and asp.net

6
00:00:34.410 --> 00:00:43.080
web applications. online@wwwdottelerik.com. In this
episode, Scott talks with Andrew

7
00:00:43.080 --> 00:00:49.050
Arnott about open ID and
open off. Hi, this is

8
00:00:49.050 --> 00:00:52.470
Scott Hanselman. This is another
episode of Hansel minutes this

9
00:00:52.470 --> 00:00:55.590
week on Hanselman it's I'm
sporting a summer cold. It

10
00:00:55.590 --> 00:00:59.580
is 96 degrees outside, and
I am sick as a

11
00:00:59.580 --> 00:01:03.330
dog, but fortunately my guest
Andrew are not, is not

12
00:01:03.330 --> 00:01:08.370
sick. Are you? Well, sir,
I am fantastic. That makes

13
00:01:08.370 --> 00:01:10.140
at least one of us.
Cause I am dying over

14
00:01:10.140 --> 00:01:13.440
here. It's absolutely ridiculous. I
feel like it's a Christmas

15
00:01:13.440 --> 00:01:15.890
cold and it's in the
heat of the summer. I

16
00:01:16.040 --> 00:01:18.800
just got over a cold
myself. All right. Yeah. Everyone

17
00:01:18.800 --> 00:01:22.550
is sick right now. So
you are the, the lead

18
00:01:22.610 --> 00:01:28.310
on the.net open auth project.
That's right. Can you explain

19
00:01:28.310 --> 00:01:29.720
to me this used to
be called Don an open

20
00:01:29.720 --> 00:01:34.430
ID and there's always openness
and open that. And I

21
00:01:34.430 --> 00:01:37.100
think that most people who
are listening know of open

22
00:01:37.100 --> 00:01:41.000
off, because they know that
sometimes an application will ask

23
00:01:41.360 --> 00:01:46.010
Twitter for permission to do
something and that's their exposure

24
00:01:46.010 --> 00:01:47.990
to open off. But can
you kind of back up

25
00:01:47.990 --> 00:01:51.590
a little bit and explain
what open ideas, why your

26
00:01:51.590 --> 00:01:54.290
project changed from open ID
to open off and kind

27
00:01:54.290 --> 00:01:57.110
of explain this, this open
ecosystem out there for me?

28
00:01:58.160 --> 00:02:04.370
Sure. So open ID is
an open protocol for authentication

29
00:02:04.490 --> 00:02:08.150
and dotnet open ID was
one of the first.net libraries

30
00:02:08.150 --> 00:02:12.800
to implement open ID. It
would just authenticate users. It

31
00:02:12.800 --> 00:02:15.980
wouldn't give them the sites
that they're logging into permission

32
00:02:15.980 --> 00:02:19.490
to access their information on
some other website though, for

33
00:02:19.490 --> 00:02:22.850
example, Twitter, you've probably seen
the sign in with Twitter

34
00:02:22.850 --> 00:02:25.910
buttons, Right? Right. So you
can sign up to a

35
00:02:25.910 --> 00:02:28.700
site you're not signing into
Twitter, you're shutting into a

36
00:02:28.700 --> 00:02:33.800
particular site using your Twitter
ID. Exactly, exactly. That's that's

37
00:02:33.800 --> 00:02:36.440
typically, you know, the, the
scenario that open ID covers

38
00:02:37.490 --> 00:02:40.580
Twitter. However, because people who
sign in with Twitter typically

39
00:02:40.580 --> 00:02:43.910
want to be able to
socialize and say, Hey, I'm

40
00:02:43.910 --> 00:02:46.160
doing such and such on
this particular website and maybe

41
00:02:46.160 --> 00:02:50.330
I'm listening to an MP3
while they're on a, some

42
00:02:50.330 --> 00:02:53.300
music playing website and they
want to be able to

43
00:02:53.330 --> 00:02:56.060
have that website automatically tell
their Twitter friends what they're

44
00:02:56.060 --> 00:02:59.380
listening to. So Twitter has
chosen instead of using open

45
00:02:59.380 --> 00:03:02.410
ID too, they were one
of the first adopters of

46
00:03:02.470 --> 00:03:09.040
ooff, which they they've co-opted
to also be authentication, but

47
00:03:09.040 --> 00:03:13.090
they're using it for its
authorization aspect as well. So

48
00:03:13.090 --> 00:03:16.300
that as you're logging in
using Twitter, you're also granting

49
00:03:16.300 --> 00:03:19.330
the site you're logging into
permission to post to your

50
00:03:19.330 --> 00:03:24.010
Twitter feed. so.net opened Heidi
because OAuth was becoming more

51
00:03:24.010 --> 00:03:27.940
and more popular, added off
support. And at that point,

52
00:03:28.300 --> 00:03:30.940
calling the library open ID,
when it, that was only

53
00:03:30.940 --> 00:03:34.120
half of the story did
not make as much sense.

54
00:03:34.540 --> 00:03:37.210
In fact, it also did
info card, which was another

55
00:03:37.870 --> 00:03:42.370
open protocol that Microsoft started
it. So renamed it to.net

56
00:03:42.370 --> 00:03:45.820
open off, and it did
open ID off and info

57
00:03:45.820 --> 00:03:48.160
card. And tried to wrap
that together. That's kind of

58
00:03:48.160 --> 00:03:52.560
the history, But open ID
and open auth don't relate

59
00:03:52.560 --> 00:03:57.960
to each other in any
way. That's mostly accurate. They

60
00:03:57.990 --> 00:04:00.870
they're orthogonal in that you
can use one or the

61
00:04:00.870 --> 00:04:02.820
other, or you can use
them together and yet they

62
00:04:02.820 --> 00:04:06.210
don't interact at all. However,
the, if you're going to

63
00:04:06.210 --> 00:04:09.000
use them both, if you
want to say, log in

64
00:04:09.000 --> 00:04:14.100
with your Google account and
access that person's maybe Gmail

65
00:04:14.100 --> 00:04:19.680
contact list or something Using
them independent, Gently, but together

66
00:04:19.980 --> 00:04:21.990
means that you have to
go see the Google website

67
00:04:21.990 --> 00:04:25.680
twice. So they have actually
invented a hybrid protocol that

68
00:04:25.680 --> 00:04:27.780
does both at the same
time. So at that point

69
00:04:27.780 --> 00:04:30.270
they do have something to
do together, but they're still

70
00:04:30.330 --> 00:04:36.630
mostly independent protocols. Okay. So
looking at open ID itself,

71
00:04:36.720 --> 00:04:40.320
I implemented this in, in
dos blog a while back,

72
00:04:41.220 --> 00:04:44.610
quite a while back actually.
And it was, you know,

73
00:04:44.610 --> 00:04:46.980
I did it back, I
think before either before you

74
00:04:46.980 --> 00:04:49.590
existed or right. When you
started doing the open ID,

75
00:04:49.590 --> 00:04:51.150
I can't just.in it. Do
you remember if Josh blog

76
00:04:51.150 --> 00:04:53.970
used to start that open
ID? I remember back when

77
00:04:53.970 --> 00:04:55.950
you did it. Yeah. I
think that open ID or

78
00:04:55.980 --> 00:04:58.590
back when we call it
January and open ID. Right.

79
00:04:58.590 --> 00:05:00.480
And it was a very
early, early thing and it

80
00:05:00.480 --> 00:05:03.420
was quite innovative at the
time. And you can see

81
00:05:03.420 --> 00:05:05.460
this on my blog at
the bottom, it says open

82
00:05:05.460 --> 00:05:08.400
ID and I have a
little ID selector. And then

83
00:05:08.910 --> 00:05:11.760
on that ID selector, there's
a LinkedIn says get an

84
00:05:11.760 --> 00:05:13.890
open ID and it sends
you off to a third

85
00:05:13.890 --> 00:05:18.300
party called my open id.com.
But I don't need to

86
00:05:18.300 --> 00:05:20.700
necessarily go and get an
open ID. Right. I may

87
00:05:20.700 --> 00:05:24.510
already have one. Yeah. Almost
everybody on the internet has

88
00:05:24.510 --> 00:05:28.680
one just because Google Yahoo
and several other very popular

89
00:05:28.680 --> 00:05:33.330
email providers are also open
ID providers. So there's, I

90
00:05:33.330 --> 00:05:36.510
think somebody has to be
either 20 million or 40 million or

91
00:05:36.510 --> 00:05:39.510
something open ID is out
there already. Most of the

92
00:05:39.510 --> 00:05:42.330
people don't realize they have
one. Okay. So, so I

93
00:05:42.330 --> 00:05:44.610
know that like flicker as
an open ID, Google is

94
00:05:44.610 --> 00:05:47.280
an open ID. These are
all places where if you

95
00:05:47.280 --> 00:05:49.170
have a login, for example,
on my blog, if you

96
00:05:49.170 --> 00:05:52.170
have a login flicker, you
can just click flick or

97
00:05:52.170 --> 00:05:54.870
you put in flicker and
hit login and it'll prompt

98
00:05:54.870 --> 00:05:58.310
you for your flicker password.
You're giving your flicker password

99
00:05:58.610 --> 00:06:02.780
to flicker, right. Not to
my blog. Right. And what

100
00:06:02.780 --> 00:06:04.640
does that interaction there? Cause
I know there's, or there's

101
00:06:04.640 --> 00:06:06.470
a redirect, you go to
flicker, you sign in, you

102
00:06:06.470 --> 00:06:10.190
come back and then suddenly
I have your name. I

103
00:06:10.190 --> 00:06:13.010
have, I have information about
you. How has that pant

104
00:06:13.010 --> 00:06:16.350
had handoff handled? Oh, there's
a couple of ways. The

105
00:06:16.360 --> 00:06:19.000
basic flow is just, like
I said, it's a redirect

106
00:06:19.000 --> 00:06:22.990
where your blog disappears momentarily.
And I see flicker, which

107
00:06:22.990 --> 00:06:26.440
is, which is, has the
advantage of your hanselman.com URL

108
00:06:26.440 --> 00:06:29.350
changes to flicker.com. And I
feel confident that I'm not

109
00:06:29.350 --> 00:06:32.170
giving my password to a
site that I otherwise might

110
00:06:32.170 --> 00:06:36.520
not trust. And then it
liquor authenticates me and redirects

111
00:06:36.520 --> 00:06:41.050
with a special authentication token
that hanselman.com can process and

112
00:06:41.050 --> 00:06:44.440
verify that it's real. And
yet, without ever seeing my

113
00:06:44.440 --> 00:06:48.430
password, your site knows that
I am some flicker user

114
00:06:48.430 --> 00:06:51.220
and whatever information you asked
flicker to provide with my

115
00:06:51.220 --> 00:06:55.000
authentication. If I, while logging
in said that was okay,

116
00:06:55.450 --> 00:06:58.090
you may already have my
email address, my name. Well,

117
00:06:58.090 --> 00:07:00.370
you know, whatever it is
so that my locking into

118
00:07:00.370 --> 00:07:04.570
your blog is that much
more convenient. The enhancement to

119
00:07:04.570 --> 00:07:07.510
that flow is using a
popup window, which is becoming

120
00:07:07.510 --> 00:07:11.110
more and more popular, where
instead of actually leaving your

121
00:07:11.110 --> 00:07:14.650
site, it's just a small
area of your page that

122
00:07:14.650 --> 00:07:16.960
is now occupied by flicker.
And I can log in

123
00:07:16.960 --> 00:07:20.290
that way. There's a bit
more JavaScript intensity in that.

124
00:07:20.380 --> 00:07:23.050
And you still have to
have a browser. It's a

125
00:07:23.050 --> 00:07:25.780
full blown browser window. It's
not just an Ajax dialogue

126
00:07:26.230 --> 00:07:28.600
again, just so the URL
can show up. So users

127
00:07:28.600 --> 00:07:30.610
know that they're not giving
their password to the wrong

128
00:07:30.610 --> 00:07:34.630
site. Okay. So if I,
from, from, from the point

129
00:07:34.630 --> 00:07:36.190
of view of the user,
let's say from the point

130
00:07:36.190 --> 00:07:38.500
of view of the browser,
because most of us who

131
00:07:38.500 --> 00:07:41.260
are listening are web developers.
In some way, I type

132
00:07:41.260 --> 00:07:45.090
in flicker.com. I hit save
comment in the, in the

133
00:07:45.090 --> 00:07:46.690
instance that I'm trying to
save a comment at my

134
00:07:46.690 --> 00:07:50.020
blog. I'm redirected to flicker.
I sign in to flicker,

135
00:07:50.380 --> 00:07:54.040
flicker receives the post for
my password, decides whether or

136
00:07:54.040 --> 00:07:58.330
not it's really me then
redirects back over and they

137
00:07:58.330 --> 00:08:03.700
put something in the URL,
right? What is happening in

138
00:08:03.700 --> 00:08:06.760
the back? Cause I don't
understand how, how someone couldn't

139
00:08:06.760 --> 00:08:09.850
just steal or lie. How
do I know that the

140
00:08:09.850 --> 00:08:12.640
secret that is redirected back?
So I'm going to give

141
00:08:12.640 --> 00:08:16.660
you hanselman.com, yada yada yada
secret open ID thing. How

142
00:08:16.660 --> 00:08:18.520
do I know that's not
a lie? Is there some

143
00:08:18.730 --> 00:08:24.400
server side handshake that's occurring
with that client side redirection?

144
00:08:26.530 --> 00:08:28.990
When you, when the user
types in that they are

145
00:08:28.990 --> 00:08:32.560
a flicker user or Google
user, whatever identifier they type

146
00:08:32.560 --> 00:08:34.390
in or in your blogs
case, they just click on

147
00:08:34.390 --> 00:08:37.960
flicker and that all happens
automatically. But what your blog

148
00:08:37.990 --> 00:08:41.050
does before it redirects to
flicker is it has a

149
00:08:41.050 --> 00:08:45.100
handshake with flicker in which
your site and flicker establish

150
00:08:45.100 --> 00:08:47.850
a shared secret, which is
then used for an H

151
00:08:47.850 --> 00:08:54.370
HVAC signature with that secret.
What is that? An H

152
00:08:54.460 --> 00:08:59.040
H max it's, It's a
hash of, so in the

153
00:08:59.040 --> 00:09:01.740
authentication token that liquor will
send it back to your

154
00:09:01.740 --> 00:09:04.890
blog, which otherwise anybody could
forge, right? They just change.

155
00:09:04.920 --> 00:09:07.530
Oh, you know, I signed
in as Andrew in it,

156
00:09:07.530 --> 00:09:09.600
but I'm going to go
change it in the URL

157
00:09:09.600 --> 00:09:11.640
to say Scott Hanselman. And
then they'll think that Scott

158
00:09:11.640 --> 00:09:14.880
is logging. Instead of me,
the reason that can't be

159
00:09:14.880 --> 00:09:18.060
done is because with all
that information about the person

160
00:09:18.060 --> 00:09:20.280
and who it is and
what their real identifier is,

161
00:09:20.710 --> 00:09:24.420
they hash it. But at
the end of the data

162
00:09:24.420 --> 00:09:27.510
that they're hashing, they can
catenate that shared secret, which

163
00:09:27.510 --> 00:09:31.470
makes the hash not reproducible
after somebody has changed the

164
00:09:31.470 --> 00:09:33.630
data because they don't have
the shared secret to tack

165
00:09:33.630 --> 00:09:35.900
onto the end of it.
I see. So that makes

166
00:09:35.900 --> 00:09:41.120
it cryptographically significant. Yeah. Yeah.
It makes it extremely difficult

167
00:09:41.720 --> 00:09:43.910
depending on the length of
the hash. And the open

168
00:09:43.910 --> 00:09:46.130
ID has a couple of
different hash links that it

169
00:09:46.130 --> 00:09:52.340
can use it's practically and
feasible. And you're saying H

170
00:09:52.370 --> 00:09:57.680
Mex Mex Mac, H M
a C H M a

171
00:09:57.680 --> 00:10:01.880
C I C. Okay. So
then I signed it a

172
00:10:01.880 --> 00:10:07.550
flicker. There's a discussion back
and forth between the client

173
00:10:07.550 --> 00:10:09.290
and the server, as well
as the server and the

174
00:10:09.290 --> 00:10:14.420
server to make sure that
who hanselman.com thinks you're talking

175
00:10:14.420 --> 00:10:16.580
to is also who in
fact your browser is talking

176
00:10:16.580 --> 00:10:18.890
to. So something bad happened.
And I had like an

177
00:10:18.890 --> 00:10:22.850
evil toolbar and I wasn't
really talking to flicker. I

178
00:10:22.850 --> 00:10:26.000
could be assured though, that
the hanselman.com server was in

179
00:10:26.000 --> 00:10:29.630
fact talking to hanselman.com and
then the shared secrets would

180
00:10:29.630 --> 00:10:34.640
not match True. Although if
you've got an evil toolbar,

181
00:10:35.030 --> 00:10:37.880
they can't, and you're not
really talking to flicker.com. Well,

182
00:10:37.880 --> 00:10:40.820
you've just given your password
away to the evil website.

183
00:10:41.420 --> 00:10:42.980
They can do whatever they
want now, anyway, they don't

184
00:10:42.980 --> 00:10:45.890
want your identity. So it's
important to trust the toolbars.

185
00:10:47.540 --> 00:10:50.840
And then the, the, the
shared secret is a hash

186
00:10:50.840 --> 00:10:56.000
based message, authentication code, Mac
message, authentication code, hence, and

187
00:10:56.000 --> 00:10:58.250
H Mack. And that's a
well known thing. That's not

188
00:10:58.250 --> 00:11:00.350
a, an open ID thing.
It's the same kind of

189
00:11:00.350 --> 00:11:03.260
thing you use in, you
know, an IP sec and

190
00:11:03.290 --> 00:11:10.340
TLS and things like that.
Okay. Oh, one other one

191
00:11:10.340 --> 00:11:13.220
other attacks, since you mentioned
the whole substituting flicker for

192
00:11:13.220 --> 00:11:16.220
enable site, the way open
ID has a couple of

193
00:11:16.220 --> 00:11:18.650
different ways of exchanging that
shared secret, one of them

194
00:11:18.650 --> 00:11:21.020
is really secure, and that
is if flicker is using

195
00:11:21.020 --> 00:11:25.940
HTTPS, then you get the
whole public key infrastructure assurance

196
00:11:25.940 --> 00:11:27.770
that they are really talking
to flicker. But in the

197
00:11:27.770 --> 00:11:31.940
case, if, if you're just
doing standard HTTP then, and,

198
00:11:32.120 --> 00:11:35.510
and if there's a DNS
poisoning attack occurring at your

199
00:11:35.510 --> 00:11:40.130
blog or whatever, what's called
the relying party, then open

200
00:11:40.130 --> 00:11:43.010
ID resorts to the Diffie
Hellman algorithm for exchanging the

201
00:11:43.010 --> 00:11:45.560
secret, in which case there's
no identity assurance. And so

202
00:11:45.950 --> 00:11:50.330
it's the open ID without
HDPS is vulnerable to DNS

203
00:11:50.330 --> 00:11:54.010
poisoning attacks. So it's important
to always use an open

204
00:11:54.010 --> 00:11:56.610
ID. That sounded really, really
interesting, but I'm gonna tease

205
00:11:56.610 --> 00:11:59.060
you a little bit because
I heard blah, blah, blah,

206
00:11:59.110 --> 00:12:02.340
DNS poisoning, blah, blah, blah,
Diffie Hellman, blah, blah, blah,

207
00:12:02.370 --> 00:12:06.270
bad. So break that down
for me. That sounds really

208
00:12:06.270 --> 00:12:09.270
interesting. What, what bad thing
can happen that will hurt

209
00:12:09.270 --> 00:12:14.160
me and kill my family.
If, if somebody can get

210
00:12:14.160 --> 00:12:19.320
a server, both between your
computer and flicker and between

211
00:12:19.470 --> 00:12:22.800
the site you're trying to
log into and flicker. So

212
00:12:22.800 --> 00:12:26.370
if they can intercept network
requests, and if they can

213
00:12:26.610 --> 00:12:31.350
pull off DNS poisoning attack,
which is actually fairly difficult,

214
00:12:31.350 --> 00:12:36.240
but it's possible, What does
that mean? It means if

215
00:12:36.270 --> 00:12:39.120
nobody, how you'd pull it
off as if nobody has

216
00:12:39.120 --> 00:12:42.390
logged in using flicker to
your blog recently, so that

217
00:12:42.630 --> 00:12:44.970
the server that your blog
is running on doesn't know

218
00:12:44.970 --> 00:12:51.900
where flicker.com is. Then an
attacker could get your server,

219
00:12:51.930 --> 00:12:54.840
you know, start the login
process using flicker so that

220
00:12:54.840 --> 00:12:57.840
your server has to look
up basically the white pages

221
00:12:57.840 --> 00:13:01.170
for the internet, where flicker.com
is. And it knows that

222
00:13:01.170 --> 00:13:03.120
your server's going to ask
the white pages out on

223
00:13:03.120 --> 00:13:06.540
the internet, where is flicker
dot Tom. And it won't

224
00:13:06.540 --> 00:13:08.940
see that request, but it
can pretend to be the

225
00:13:08.940 --> 00:13:13.290
response to that by letting
your DNS server with responses

226
00:13:13.290 --> 00:13:15.960
of here's flicker dot Congress,
flicker.com, except that it's giving

227
00:13:15.960 --> 00:13:18.600
it the wrong address so
that your site will blindly

228
00:13:18.600 --> 00:13:22.110
trusted, send out a request
to establish a shared secret

229
00:13:22.320 --> 00:13:29.640
with a spoofed copy of
flicker.com. So that that fake

230
00:13:29.640 --> 00:13:34.590
server can now send that
forged authentication token. If it

231
00:13:34.590 --> 00:13:37.290
can accomplish that, then somebody
can log in as anybody

232
00:13:37.290 --> 00:13:41.910
essentially from flicker to your
blog. So again, that's why

233
00:13:41.940 --> 00:13:45.420
H HTTPS is really important.
If you're logging into a

234
00:13:45.420 --> 00:13:48.270
website using open ID, make
sure you're using an HTTPS

235
00:13:48.270 --> 00:13:52.770
identifier so that somebody else
can't spoof your identity later

236
00:13:52.770 --> 00:13:56.310
in the case of a
DNS poisoning attack. Okay. So

237
00:13:56.310 --> 00:13:59.640
this was, this is actually
cause as a developer, this

238
00:13:59.640 --> 00:14:01.860
is interesting, but what I
really want to know is

239
00:14:02.100 --> 00:14:06.950
how is this going to
make me do one thing

240
00:14:06.960 --> 00:14:09.870
or the other, make a
decision to develop my application?

241
00:14:09.870 --> 00:14:11.760
And I'm hearing you say,
if I'm going to use

242
00:14:11.760 --> 00:14:15.600
open ID, I really need
to use SSL. And should

243
00:14:15.600 --> 00:14:18.450
I be doing additional verification
on the certificates as well?

244
00:14:19.380 --> 00:14:23.220
You should enable as a
developer of the site, you

245
00:14:23.220 --> 00:14:30.090
should enable certificate revocation list
checks, which is typically off

246
00:14:30.090 --> 00:14:34.560
by default because it comes
with a small perfect. And

247
00:14:34.650 --> 00:14:39.510
yes, you can consider just
turning, setting, open ID on

248
00:14:39.510 --> 00:14:44.790
your site to only accept
SSL protected identifiers. For example,

249
00:14:45.150 --> 00:14:49.770
for blogs, that's probably overkill,
but if you were going

250
00:14:49.770 --> 00:14:53.600
to log into a site
that was carrying highly confidential

251
00:14:53.600 --> 00:14:57.790
information, you definitely want this
protection in there. Yeah. How

252
00:14:57.790 --> 00:14:59.440
much of that is going
to be done automatically by

253
00:14:59.440 --> 00:15:04.660
your library versus what kind
of manual verification should I

254
00:15:04.660 --> 00:15:09.050
be doing? It's a, dotnet
open off defaults to it.

255
00:15:09.050 --> 00:15:12.730
It does have some protections
that supersede the standard open

256
00:15:12.730 --> 00:15:15.220
ID spec in place that
are on by default when

257
00:15:15.220 --> 00:15:21.280
they don't compromise interoperability, except
in obviously, and secure like

258
00:15:21.850 --> 00:15:27.280
exploited cases. But there are
just a couple of settings

259
00:15:27.280 --> 00:15:28.810
that you could easily just
change the true in your

260
00:15:28.810 --> 00:15:31.090
web config file. For example,
to say, Hey, I want

261
00:15:31.090 --> 00:15:35.080
to require SSL. And then
throughout the whole pipeline, both

262
00:15:35.080 --> 00:15:37.480
at the browser and with,
you know, from server to

263
00:15:37.480 --> 00:15:40.090
server communication and make sure
that SSL is always used,

264
00:15:40.630 --> 00:15:43.660
there's even higher levels of
assurance that the us government

265
00:15:43.660 --> 00:15:47.680
has come up with, that
they call it the open

266
00:15:47.680 --> 00:15:50.680
ID profile that requires us
to sell and requires a

267
00:15:50.680 --> 00:15:54.040
whole bunch of other restrictions
that make open ID even

268
00:15:54.040 --> 00:15:56.740
more secure. And that, that
also is just a flip

269
00:15:56.740 --> 00:15:58.780
of a switch and it
open off to turn that

270
00:15:58.780 --> 00:16:03.130
all on. Hi, this is
Scott. I just want to

271
00:16:03.130 --> 00:16:06.730
remind you guys that there's
no show without a sponsor,

272
00:16:07.210 --> 00:16:09.760
someone who's going to pay
for all this bandwidth and

273
00:16:09.760 --> 00:16:11.920
the more popular the show
becomes. The more important it

274
00:16:11.920 --> 00:16:16.570
is that we thank our
sponsors folks like Tellerik I

275
00:16:16.570 --> 00:16:18.580
wanna let you guys know
that Tellerik has got a

276
00:16:18.610 --> 00:16:25.990
pretty cool deal going between
June 1st, 2010 and August 31st, 2010. Any interested

277
00:16:25.990 --> 00:16:34.870
listener, just send an email
to podcast@telleriktlerik.com mentioned Hansel minutes

278
00:16:35.290 --> 00:16:37.300
and they will reply and
they'll give you a special

279
00:16:37.300 --> 00:16:42.580
$50 off coupon code. So
just remember podcast at <inaudible>

280
00:16:42.580 --> 00:16:47.080
dot com mentioned Hansel minutes,
$50 off. This goes until

281
00:16:47.080 --> 00:16:52.360
August 31st, 2010, and big thanks again
for the folks at Telerx

282
00:16:52.390 --> 00:16:54.970
for believing in our show
and for continuing to help

283
00:16:55.840 --> 00:16:59.620
pay for our expenses. I
use open ID for comments,

284
00:16:59.890 --> 00:17:03.580
but I suppose it wouldn't
really matter if I didn't

285
00:17:03.640 --> 00:17:05.770
make it really secure, but
I suppose if I was

286
00:17:05.770 --> 00:17:08.050
doing online banking, I would
want to turn all those

287
00:17:08.050 --> 00:17:12.790
things on and insist on
security. Absolutely. Although I don't

288
00:17:12.790 --> 00:17:14.860
know any banks that actually
let you log into open

289
00:17:14.860 --> 00:17:17.620
ID. There are some banks
or bank like websites that

290
00:17:17.620 --> 00:17:21.760
are open ID providers. They
just haven't seen the, the

291
00:17:21.760 --> 00:17:25.960
business risk as you know,
palatable to become relying parties.

292
00:17:27.600 --> 00:17:29.290
And that is the really
interesting thing that term that

293
00:17:29.290 --> 00:17:32.140
you just use, the Oop
or the RP, the originating

294
00:17:32.140 --> 00:17:35.140
party, or the relying party,
the idea that it's a

295
00:17:35.140 --> 00:17:38.410
chain of trust. So if
I'm a bank, do I

296
00:17:38.410 --> 00:17:41.800
want to put, do I
want to trust flicker and

297
00:17:41.800 --> 00:17:44.380
15 other sites, or do
I want to be a

298
00:17:44.380 --> 00:17:47.800
trusted party? So you're saying
that it's more likely for

299
00:17:47.800 --> 00:17:52.680
a bank as a big
trusted institution to become the

300
00:17:52.680 --> 00:17:56.280
one that is trusted as
opposed to the one who

301
00:17:56.280 --> 00:17:59.600
has to trust everyone. Right?
Because the bank doesn't know

302
00:17:59.600 --> 00:18:03.680
it flickers authentication and security
rules are One of the

303
00:18:03.680 --> 00:18:05.210
things that I've noticed on
my blog. And I don't

304
00:18:05.210 --> 00:18:07.400
know if it's my implementation
or if it's an old

305
00:18:07.400 --> 00:18:09.590
thing, but I know that
the number one complaint on

306
00:18:09.590 --> 00:18:13.790
my blog is when people
log in with Google as

307
00:18:13.790 --> 00:18:16.520
their open ID, which when
they click the little open

308
00:18:16.520 --> 00:18:19.310
ID thing, Google shows up
and it's, you know, it

309
00:18:19.310 --> 00:18:21.120
seems to be the most
popular one. I'm looking at

310
00:18:21.120 --> 00:18:24.500
it. My most recent post
I've got six open ID

311
00:18:24.500 --> 00:18:27.650
comments. So open ID is
very popular on my blog.

312
00:18:28.040 --> 00:18:33.170
Three of them have this
crazy Google URL, Google slash

313
00:18:33.170 --> 00:18:36.350
accounts slash ID, blah, blah,
blah, blah, blah. And they

314
00:18:36.350 --> 00:18:40.760
all have the same identical.
Well, the other ones of

315
00:18:40.760 --> 00:18:43.940
people who have open IDs
that are custom, you know,

316
00:18:43.940 --> 00:18:46.940
it makes more sense. It
looks like the picture of

317
00:18:46.940 --> 00:18:49.730
them. It uses their name.
What is the deal? Do

318
00:18:49.730 --> 00:18:51.710
I have something wrong with
my implementation? Or is it

319
00:18:51.710 --> 00:18:58.850
known that Google sucks in
this way? Google has pioneered

320
00:18:59.750 --> 00:19:03.470
the actual use of something
called directed identity, which open

321
00:19:03.470 --> 00:19:08.900
ID 2.0 made possible, which
gives users who log in

322
00:19:08.900 --> 00:19:14.720
with their Google open ID
accounts, extra identity protection. The

323
00:19:14.720 --> 00:19:18.200
result of that is a
very ugly open ID identifier,

324
00:19:18.230 --> 00:19:20.150
which is what you're referring
to here at the UC

325
00:19:20.150 --> 00:19:23.720
on your blog. It's not
something that anybody could understand,

326
00:19:23.720 --> 00:19:27.110
and that was deliberate on
Google's part, but it doesn't

327
00:19:27.200 --> 00:19:30.890
make for very good blog
comments. What people who accept

328
00:19:30.890 --> 00:19:35.510
open these from Google seem
to be doing lately is

329
00:19:36.290 --> 00:19:39.110
they do consume that URL.
That's awful to look at

330
00:19:39.260 --> 00:19:42.800
internally, but what th but
while they're authenticating the user

331
00:19:42.800 --> 00:19:45.830
with Google, they're also asking
for the user's full name

332
00:19:45.950 --> 00:19:48.980
and or email address so
that they can display that

333
00:19:48.980 --> 00:19:52.550
instead. Okay. That's a Google
thing you're saying I need

334
00:19:52.550 --> 00:19:59.990
to treat Google differently. Yeah.
Google, well, Google has had,

335
00:19:59.990 --> 00:20:03.860
has, has had some very
odd behaviors from other open

336
00:20:03.860 --> 00:20:08.510
ID providers. They've actually changed
that to agree with the

337
00:20:08.570 --> 00:20:11.360
behavior of a lot of
others, Google and Yahoo, both

338
00:20:11.930 --> 00:20:14.180
can do this. Although Yahoo
is willing to give a

339
00:20:14.180 --> 00:20:18.800
nicer looking one. So in
general, though, you can, you

340
00:20:18.800 --> 00:20:20.930
can special case Google, if
you want to, or you

341
00:20:20.930 --> 00:20:23.900
can just ask for the
email address and name. In

342
00:20:23.900 --> 00:20:26.090
fact, you probably, I don't
know if you do or

343
00:20:26.090 --> 00:20:28.640
not, but one of the
advantages of open ID, right,

344
00:20:28.640 --> 00:20:32.090
is when that authentication token
comes back, you can get

345
00:20:32.120 --> 00:20:34.370
the name and email address
of the person who's logging

346
00:20:34.370 --> 00:20:37.550
in. So if you're, if
you're not requesting that yet,

347
00:20:37.550 --> 00:20:40.340
you can do so when
you're going through Google and

348
00:20:40.340 --> 00:20:44.930
then just display that instead
of the identifier and Google

349
00:20:44.930 --> 00:20:48.820
will look nicer and possibly
so will everybody else's. Ah,

350
00:20:48.850 --> 00:20:50.320
okay, well then I need
to talk to you about

351
00:20:50.410 --> 00:20:53.110
fixing that because that is
a huge complaint and it

352
00:20:53.110 --> 00:20:57.700
just, every open ID provider
out there works just fine,

353
00:20:58.480 --> 00:21:00.730
but Google simply won't give
me their name and email

354
00:21:00.730 --> 00:21:03.090
address. Ah, so I can
help you with that. They

355
00:21:03.150 --> 00:21:06.930
Google and Yahoo both have
some special requirements before they'll

356
00:21:06.930 --> 00:21:09.060
actually give a name, an
email address. And Google has

357
00:21:09.660 --> 00:21:12.600
a unique one. Yeah. Is
that something that I can

358
00:21:12.600 --> 00:21:14.340
do by, do you have
to change code to do

359
00:21:14.340 --> 00:21:17.490
that? Cause I haven't rebuilt.
My version of Josh blog

360
00:21:17.850 --> 00:21:21.180
has been extremely stable works
very, very nicely. It's been

361
00:21:21.180 --> 00:21:25.170
wonderful for a couple of
years now, is this, is

362
00:21:25.170 --> 00:21:27.270
this a matter of me
just changing some markups so

363
00:21:27.270 --> 00:21:29.040
that Google talks to me
and says, Oh, that looks

364
00:21:29.040 --> 00:21:31.590
nice. Or am I going
to go in and change

365
00:21:31.620 --> 00:21:35.940
my handshake? It may. It
depends on how closely you

366
00:21:36.180 --> 00:21:41.370
comply with Google's security requirements,
a an open ID site.

367
00:21:41.370 --> 00:21:42.930
And I think, I think
we worked on this on

368
00:21:42.930 --> 00:21:45.870
your blog already. So assuming
it, we had it working,

369
00:21:45.870 --> 00:21:48.300
I don't recall whether we
finished it or not. Your

370
00:21:48.300 --> 00:21:51.660
site does have to have
a special RP discovery feature

371
00:21:51.660 --> 00:21:54.750
implemented so that Google can
see that indeed the authentication

372
00:21:54.750 --> 00:21:58.440
requested come from your site.
And then when you make

373
00:21:58.440 --> 00:22:01.200
the request to Google, you
need to ask for the

374
00:22:01.200 --> 00:22:05.190
name and email address and
Mark them as required. When

375
00:22:05.190 --> 00:22:08.610
you send, when a website
sends to Google and open

376
00:22:08.610 --> 00:22:10.980
ID request, you can say,
these are the attributes about

377
00:22:10.980 --> 00:22:13.650
the person that I want.
And I consider each one

378
00:22:13.680 --> 00:22:17.550
either optional or required, Google
chooses to ignore all optional

379
00:22:17.550 --> 00:22:20.040
requests. So you never get
the email address. If you

380
00:22:20.040 --> 00:22:21.720
only say, Hey, I'd like
it. If I can get

381
00:22:21.720 --> 00:22:24.020
it, but I'll take it
without it. We'll send it

382
00:22:24.060 --> 00:22:27.330
without it. That's the trick.
That's the interesting thing. Even

383
00:22:27.450 --> 00:22:30.990
if you Mark, I would
like the user's email address.

384
00:22:31.320 --> 00:22:35.010
And then you say optional,
all of the other relying

385
00:22:35.010 --> 00:22:37.620
parties will say, sure, here
you go, Google will not

386
00:22:37.620 --> 00:22:39.990
give you anything unless you
say I need it. Otherwise

387
00:22:39.990 --> 00:22:42.810
we're not talking at all.
Right. And the unfortunate thing

388
00:22:42.810 --> 00:22:45.780
about that is if you
are willing to accept without

389
00:22:45.780 --> 00:22:50.100
an email address, really, but
Mark, by upgrading a tree

390
00:22:50.100 --> 00:22:54.330
required. Now Google users cannot
post to your blog using

391
00:22:54.330 --> 00:22:56.700
their open ID, unless they're
willing to give up the

392
00:22:56.700 --> 00:22:59.610
email address. Cause Google does
honor that part of the

393
00:22:59.610 --> 00:23:01.470
open. I do spec where
if you Mark it required

394
00:23:01.770 --> 00:23:04.470
authentication cannot continue unless they're
willing to do it. Whereas

395
00:23:04.470 --> 00:23:06.570
with optional, it's supposed to
be as a check box,

396
00:23:07.260 --> 00:23:09.720
right? The difficult thing is
that I'm not using their

397
00:23:09.720 --> 00:23:11.460
email address. I'm not going
to email them. I'm not

398
00:23:11.460 --> 00:23:13.710
going to bother them. I
just want to show a

399
00:23:13.710 --> 00:23:17.010
little icon. I want to
show a Gravatar of what

400
00:23:17.010 --> 00:23:20.640
this person looks like. And
what happens is since I

401
00:23:20.640 --> 00:23:23.430
don't have an email address,
all I can use is

402
00:23:23.430 --> 00:23:27.600
the Google account ID that
they gave me and put

403
00:23:27.600 --> 00:23:30.720
up a generic icon, which
is very sad. That's right,

404
00:23:30.720 --> 00:23:33.780
because you'll never get, Google
will never give you a

405
00:23:34.110 --> 00:23:37.020
well known host name or
something that somebody could associated

406
00:23:37.020 --> 00:23:40.110
Gravatar with because every, even
if somebody took that really

407
00:23:40.110 --> 00:23:44.160
awful URL and associated a
Gravatar with it somewhere, they

408
00:23:44.160 --> 00:23:47.120
would log into another using
the same Google account. And

409
00:23:47.120 --> 00:23:49.370
that URL would be different,
which is what the directed

410
00:23:49.370 --> 00:23:51.740
identity feature is all about.
So the Gravatar would once

411
00:23:51.740 --> 00:23:53.960
again, be the default one,
which would be very frustrating

412
00:23:53.960 --> 00:23:56.390
for users. However, there is
a new button that you

413
00:23:56.390 --> 00:23:57.800
could add to your open
ID that would solve this

414
00:23:57.800 --> 00:24:00.890
problem. That is in addition
to the Google open at

415
00:24:00.890 --> 00:24:05.000
eight provider that you're using
now there's Google profiles is

416
00:24:05.000 --> 00:24:08.270
now an open ID provider
as well, but it behaves

417
00:24:08.270 --> 00:24:10.460
much more like the rest
of the open ID providers

418
00:24:10.460 --> 00:24:13.160
and that you actually get
a reasonable URL that people

419
00:24:13.160 --> 00:24:15.380
can recognize it has your
name in it. And it's

420
00:24:15.380 --> 00:24:17.930
persistent across all the websites
you log into. So the

421
00:24:17.930 --> 00:24:21.700
Gravatar thing works. Does everyone
have a Google profile already?

422
00:24:22.750 --> 00:24:25.780
No, you have to actually
have visited Google profiles and

423
00:24:25.780 --> 00:24:29.470
turned it on, but that's
a simple procedure and it

424
00:24:29.470 --> 00:24:32.470
would, so it would be
is another next to the

425
00:24:32.470 --> 00:24:35.110
Google button on your little
selector. You'd probably have to

426
00:24:35.110 --> 00:24:37.930
Google profiles button or you
could, I don't know if

427
00:24:37.930 --> 00:24:40.690
this would work. I haven't
tried it myself. Maybe replace

428
00:24:40.690 --> 00:24:43.120
the Google button with the
Google profiles button and maybe

429
00:24:43.120 --> 00:24:46.420
anybody who hasn't been to
Google profiles before will automatically

430
00:24:46.420 --> 00:24:47.770
gets set up as part
of the log. And I

431
00:24:47.770 --> 00:24:50.260
don't know. Well, you know,
the thing is that you

432
00:24:50.260 --> 00:24:52.060
gotta to go where the
users are, right? And I'm

433
00:24:52.060 --> 00:24:55.390
looking at such a typical
blog post here. I've got

434
00:24:55.390 --> 00:25:01.330
six comments, three are Google
users and three aren't and

435
00:25:01.330 --> 00:25:03.730
that's just so classic. So
I think I'm going to

436
00:25:03.730 --> 00:25:06.460
make my application smarter. It
needs to, it needs to

437
00:25:06.460 --> 00:25:09.340
work with Google, even though
Google is not a hundred

438
00:25:09.340 --> 00:25:13.780
percent playing by the, the
open ID rules. Cool. So

439
00:25:13.840 --> 00:25:15.340
one of the other things
that you and I worked

440
00:25:15.340 --> 00:25:20.290
on was on nerd dinner,
nerd, dinner.com for mics this

441
00:25:20.290 --> 00:25:23.800
year, we updated the site
that you can RSVP via

442
00:25:23.800 --> 00:25:26.530
Twitter. So this is a
good opportunity to talk about

443
00:25:26.680 --> 00:25:30.970
open, open auth. If you
go to nerdina.com and you

444
00:25:30.970 --> 00:25:34.540
pick a dinner, you can
say RSP VP for the

445
00:25:34.540 --> 00:25:38.050
event and this isn't, this
is an em VC site.

446
00:25:38.050 --> 00:25:40.300
So this is not a
web form site like toss

447
00:25:40.300 --> 00:25:44.740
blog is, but there's still
some URL stuff going on

448
00:25:44.740 --> 00:25:49.090
here. We say, RSVP, Twitter
begin. We click on that.

449
00:25:50.110 --> 00:25:52.150
It says, waiting for nerd
dinner. And then now I'm

450
00:25:52.150 --> 00:25:57.670
over at twitter.com/oauth. And then
there's a token that's appeared.

451
00:25:58.480 --> 00:26:01.060
And I'm just going to
put in my name and

452
00:26:01.060 --> 00:26:05.830
password here. I hit sign
in. It says the application

453
00:26:05.830 --> 00:26:08.800
nerd dinner by Scott Hanselman
would like you to sign

454
00:26:08.800 --> 00:26:11.770
in using your Twitter account.
How did Twitter know that

455
00:26:11.770 --> 00:26:16.630
Nerdina was asking for this?
That's a token that you

456
00:26:16.630 --> 00:26:20.260
noticed in the URL a
moment ago, that token was

457
00:26:20.290 --> 00:26:24.310
established between nerd dinner and
Twitter just before sending you

458
00:26:24.310 --> 00:26:26.550
over there, which said not
only that it was nerd

459
00:26:26.550 --> 00:26:30.430
dinner asking, but it associated
it with this particular user

460
00:26:31.090 --> 00:26:33.160
so that when it comes
back to her dinner, dinner

461
00:26:33.160 --> 00:26:37.060
knows where you left off.
So nerd dinner, the server

462
00:26:37.240 --> 00:26:39.940
talked to Twitter a moment
ago and agreed on this

463
00:26:39.940 --> 00:26:43.090
token and then sent it
over on the browser. Yep.

464
00:26:44.040 --> 00:26:47.600
So that's interesting. So Would
open ID in the sense

465
00:26:47.600 --> 00:26:50.090
that there's that server to
server interaction before the redirect,

466
00:26:50.090 --> 00:26:53.420
except that with open ID,
that server to server interaction,

467
00:26:53.470 --> 00:26:56.270
doesn't it doesn't always happen.
In fact, it usually doesn't

468
00:26:56.270 --> 00:26:59.690
because the shared secret works
multiple times. Whereas with Oahu,

469
00:27:00.290 --> 00:27:03.980
there is a unique token
for every single user login.

470
00:27:04.760 --> 00:27:08.540
And that sounds better. It's
different. In fact, with OAuth

471
00:27:08.560 --> 00:27:11.300
2.0, they're eliminating that step
entirely. So it's just a

472
00:27:11.300 --> 00:27:15.740
different way to fulfill a
different scenario. If I go

473
00:27:15.740 --> 00:27:19.670
to twitter.com and this became
a, this was a problem

474
00:27:19.670 --> 00:27:22.430
last week, I'm going to
go to twitter.com and I'm

475
00:27:22.430 --> 00:27:25.880
gonna click on settings at
the top here. And then

476
00:27:25.880 --> 00:27:28.430
I'm going to go from
settings. I'm going to go

477
00:27:28.430 --> 00:27:30.800
to connections, which is a
choice of this is a

478
00:27:30.800 --> 00:27:35.360
Twitter thing. And in connections
is a huge list of

479
00:27:35.360 --> 00:27:38.900
applications, way larger than I
would have expected. And these

480
00:27:38.900 --> 00:27:42.380
are all it says, you
have allowed the following applications

481
00:27:42.380 --> 00:27:45.500
to access your account. I'm
like, Oh, I remember that.

482
00:27:45.500 --> 00:27:48.170
And I remember that. And
what is, what are all

483
00:27:48.170 --> 00:27:51.830
these applications here? They typically
are the apps that you

484
00:27:51.830 --> 00:27:56.060
have actually clicked sign in
with Twitter at, and many

485
00:27:56.060 --> 00:27:58.370
of these apps, even though
they only claim to be

486
00:27:58.370 --> 00:28:01.670
using your Twitter account to
let you log in and

487
00:28:01.670 --> 00:28:04.370
that they won't actually post,
they don't bother limiting their

488
00:28:04.370 --> 00:28:06.920
own access. And so if
you're reviewing these apps, you

489
00:28:06.920 --> 00:28:09.800
can see this person has
read-write access to your flaw,

490
00:28:10.070 --> 00:28:12.140
to your feed. And you
know, many of those you'll

491
00:28:12.140 --> 00:28:14.330
think, Whoa, I didn't realize
I was granting permission. And

492
00:28:14.330 --> 00:28:18.020
I thought I was just
logging in, which is one

493
00:28:18.020 --> 00:28:19.700
of the advantages of, like
I said, going to this

494
00:28:19.700 --> 00:28:21.830
page and reviewing so you
can revoke permission. So he

495
00:28:21.830 --> 00:28:25.490
didn't mean to grant, Right?
I've actually written two applications

496
00:28:25.490 --> 00:28:30.080
using open auth. I'm seeing
here nerd dinner.com by Scott

497
00:28:30.080 --> 00:28:35.570
Hanselman approved on March 12th, read
and write access. And then

498
00:28:35.570 --> 00:28:37.760
I go down a little
bit farther. Then I have

499
00:28:37.970 --> 00:28:42.920
tweets sandwich, tweet sandwiches, my
program that lets a Quiznos

500
00:28:43.070 --> 00:28:46.940
take orders over Twitter. And
it says, read only access.

501
00:28:47.630 --> 00:28:52.220
So tweet sandwich can, can
use, it's shared secret. It's

502
00:28:52.220 --> 00:28:57.110
holding a NH Mac, isn't
it. And it's in its

503
00:28:57.110 --> 00:29:00.290
local database. And it can
use that kind of secret

504
00:29:00.290 --> 00:29:03.710
personal onetime password for as
long as it wants to,

505
00:29:04.190 --> 00:29:07.100
until I say, no, you
can't use it anymore. Yeah.

506
00:29:07.490 --> 00:29:10.670
Some of these tokens can,
can have expiration dates in

507
00:29:10.670 --> 00:29:13.580
them. Twitter doesn't build in
support for any of those

508
00:29:13.580 --> 00:29:16.940
expiration dates. So you're right
until you cancel this or

509
00:29:16.940 --> 00:29:20.060
until a tweet sandwich has
fallen out of favor with

510
00:29:20.120 --> 00:29:24.320
Twitter so they could cancel
them all at once. Yeah.

511
00:29:24.320 --> 00:29:27.410
They, they can read, read
your, your feed. And one

512
00:29:27.410 --> 00:29:30.200
interesting thing is your, your
feet is public, right? Why

513
00:29:30.200 --> 00:29:32.570
do you need read access
to read my feet? That

514
00:29:32.570 --> 00:29:36.350
doesn't make any sense, except
you can actually send private

515
00:29:36.350 --> 00:29:42.010
items or feed status updates
that are marked secret. So

516
00:29:42.010 --> 00:29:44.650
that only people who are
following you can read them.

517
00:29:45.130 --> 00:29:48.220
If you have read access
that is actually giving you

518
00:29:48.220 --> 00:29:52.300
the permission to read those
private notices. So that is

519
00:29:52.300 --> 00:29:57.150
more than public access. Oh,
interesting. I'm surprised that it's

520
00:29:57.150 --> 00:30:00.870
a, I approve, I wrote
tweet sandwich. It says September, 2009.

521
00:30:00.870 --> 00:30:04.230
We're almost a year later
and it can still talk

522
00:30:05.850 --> 00:30:09.870
to Twitter And it's resilient
against changing passwords. And that's

523
00:30:09.870 --> 00:30:11.370
something to keep in mind
as well. I mean, that's,

524
00:30:11.640 --> 00:30:14.580
that's a selling point of
OAuth is since you never

525
00:30:14.580 --> 00:30:17.040
gave away your password, you
can change your password without

526
00:30:17.040 --> 00:30:19.950
disrupting all the apps that
you've authorized. But it also

527
00:30:19.950 --> 00:30:22.410
means that if you suspect
that your account has been

528
00:30:22.410 --> 00:30:25.710
compromised, typically the response to
that is I'll change my

529
00:30:25.710 --> 00:30:29.160
password, but that doesn't disrupt
these connections. And so if

530
00:30:29.160 --> 00:30:30.990
you think that it's one
of your apps, these apps

531
00:30:30.990 --> 00:30:33.390
that you've authorized, that are
spamming your account or something

532
00:30:33.390 --> 00:30:35.940
you need to go through
and change changing your password

533
00:30:35.940 --> 00:30:38.640
is usually a good idea
anyway, but you need to

534
00:30:38.640 --> 00:30:41.490
revoke access to the app.
That's doing the spamming specifically.

535
00:30:42.540 --> 00:30:44.910
And what happened? Did you
notice what happened on Twitter?

536
00:30:44.970 --> 00:30:48.000
Just a couple of days
ago around kind of open

537
00:30:48.000 --> 00:30:52.830
auth applications, running wild and
spamming people. Yeah. I'd heard

538
00:30:52.830 --> 00:30:57.840
about that. That's another one
of those unfortunate misconceptions about

539
00:30:57.840 --> 00:31:01.140
OAuth is it, it provides
some security for the user

540
00:31:01.650 --> 00:31:03.120
and that they don't have
to give their password to

541
00:31:03.120 --> 00:31:05.910
some unknown party. But for
some reason, users don't think

542
00:31:05.910 --> 00:31:08.130
anything about, well, I'm not
giving my password away. So

543
00:31:08.130 --> 00:31:09.660
I'll just go ahead and
authorize this app because I'm

544
00:31:09.660 --> 00:31:12.780
totally safe. Well, no, you
are authorizing the app to

545
00:31:12.780 --> 00:31:16.980
spam your account. So you
should trust the app. Anyway.

546
00:31:16.980 --> 00:31:18.450
It's just a benefit that
you don't have to give

547
00:31:18.450 --> 00:31:23.790
away your password. So yeah,
about what apps you trust,

548
00:31:24.210 --> 00:31:27.510
What happened was a guy,
a 17 year old boy,

549
00:31:27.570 --> 00:31:31.860
actually not a guy wrote
an application called to efficiency

550
00:31:32.100 --> 00:31:34.860
because apparently putting TW in
front of any word makes

551
00:31:34.860 --> 00:31:38.160
it more awesome. Should change
it to 12 and off

552
00:31:38.460 --> 00:31:41.670
or something like that. He
wrote a little application just

553
00:31:41.670 --> 00:31:44.550
so he could learn open
off. And it would basically

554
00:31:44.550 --> 00:31:48.990
log you in, look at
your tweets, apply some, you

555
00:31:48.990 --> 00:31:52.350
know, magic dust to it,
come up with a number.

556
00:31:52.650 --> 00:31:56.490
And then tweet, I just
checked my Twitter efficiency. It

557
00:31:56.490 --> 00:32:00.120
was 8%. And then everyone
ever of course Twitter is

558
00:32:00.510 --> 00:32:05.730
run almost entirely by, by
ego and, and hubris. So

559
00:32:05.730 --> 00:32:08.220
everyone's like, Oh, what's my
true efficiency. So we all

560
00:32:08.220 --> 00:32:13.530
run off. And because it's
a thing that tweets your

561
00:32:13.530 --> 00:32:16.770
two efficiency, then it would
cause more people to want

562
00:32:16.770 --> 00:32:18.570
to go and see it.
But the issue was that

563
00:32:18.570 --> 00:32:21.960
it was tweeting, meaning it
was writing to your account

564
00:32:22.320 --> 00:32:26.490
without asking, right. That's not
something that really has anything

565
00:32:26.490 --> 00:32:28.080
to do with open auth.
That's more of an etiquette

566
00:32:28.080 --> 00:32:31.200
thing. Wouldn't you say? Yeah.
A loss can't can't solve

567
00:32:31.200 --> 00:32:34.890
that problem. It's it. If
you're logging in or giving

568
00:32:34.890 --> 00:32:37.590
that app from the 17
year old permission to write

569
00:32:37.590 --> 00:32:40.310
to your, to your feed,
then OWAS at that point,

570
00:32:40.310 --> 00:32:42.290
get comes out of the
picture. It was there to

571
00:32:42.290 --> 00:32:45.440
establish the authorization. And after
that, the app can do

572
00:32:45.440 --> 00:32:49.630
whatever it wants. Exactly. Exactly.
It's funny how that, how

573
00:32:49.630 --> 00:32:52.150
that works. I I'm glad
that people realized it was

574
00:32:52.150 --> 00:32:58.360
an etiquette issue and not
a protocol issue. What do

575
00:32:58.360 --> 00:32:59.950
I need to do to
get started? If I want

576
00:32:59.950 --> 00:33:02.440
to go right now and
add open ID or open

577
00:33:02.440 --> 00:33:07.330
off to my application, If
it's a.net application, you can

578
00:33:07.540 --> 00:33:11.260
go download.net open off and
look at the samples and

579
00:33:11.260 --> 00:33:15.610
get started. We've got authorization
server, which is our service

580
00:33:15.610 --> 00:33:20.110
provider in auth 1.0 terms
and consumer samples, as well

581
00:33:20.110 --> 00:33:22.990
as helping ID relying party
and open ID provider samples.

582
00:33:23.080 --> 00:33:27.280
So everything that you could
date is there, Oh, off

583
00:33:27.290 --> 00:33:31.150
by the way, worked for
desktop and web applications. Whereas

584
00:33:31.150 --> 00:33:33.970
open ID is strictly just
web applications. So dot little

585
00:33:33.970 --> 00:33:36.250
pop has some samples for
all of those things. If

586
00:33:36.250 --> 00:33:39.190
you aren't using dotnet, if
you're using PHP or one

587
00:33:39.190 --> 00:33:41.830
of the many others, you
can go to either open

588
00:33:41.830 --> 00:33:45.910
id.net or <inaudible> dot net,
those sites themselves and click

589
00:33:45.910 --> 00:33:50.080
on libraries and there's dozens
of libraries available for the

590
00:33:50.080 --> 00:33:54.550
many other web platforms out
there. Very cool. And this

591
00:33:54.550 --> 00:33:59.260
is just www.net <inaudible> dot
net. That's right. Very cool.

592
00:33:59.260 --> 00:34:02.290
Thanks Andrew, for educating me
about this, I really appreciate

593
00:34:02.290 --> 00:34:04.420
it. I think that lots
of people out there are

594
00:34:04.420 --> 00:34:07.420
writing their own membership systems
and really we should stop

595
00:34:07.420 --> 00:34:10.990
storing names and passwords and
password hashes and our own

596
00:34:10.990 --> 00:34:13.720
databases. If somebody is already
got a login, we should

597
00:34:13.720 --> 00:34:17.080
use it. That's right. And
it's really important. As you're

598
00:34:17.080 --> 00:34:20.020
writing these apps use a
library. A lot of people

599
00:34:20.170 --> 00:34:22.570
think, Oh, these libraries are
big. It's an extra dependency.

600
00:34:22.570 --> 00:34:25.000
I'll just write, I'll just
implement open ID or off

601
00:34:25.000 --> 00:34:27.910
myself to every time somebody
thinks that they write a

602
00:34:27.910 --> 00:34:32.110
very buggy implementation that is
worse than just taking, using

603
00:34:32.110 --> 00:34:34.270
the password from the user.
So it's really important to

604
00:34:34.270 --> 00:34:38.290
use a well established, trusted
library. Don't try to write

605
00:34:38.290 --> 00:34:41.380
a security library yourself. It's
just too hazardous. Well, I

606
00:34:41.380 --> 00:34:44.590
can definitely attest to that.
I remember when I started

607
00:34:44.590 --> 00:34:46.690
with DAS blog and you'll
probably remember as well. I

608
00:34:46.690 --> 00:34:49.270
figured, Oh, I'll just, just
do a little ICP post

609
00:34:49.270 --> 00:34:52.300
over here and it'll be
no problem. It was so

610
00:34:52.300 --> 00:34:54.010
much easier. And I remember
when we did the nerd

611
00:34:54.010 --> 00:34:57.280
dinner sample, we were able
to get that working a

612
00:34:57.280 --> 00:34:59.860
couple of hours. So it
was really trivial. It's not

613
00:35:00.250 --> 00:35:02.290
once you understand the flow,
it's not difficult at all.

614
00:35:02.650 --> 00:35:05.560
Yeah. Awesome. Well, this has
been another episode of Hansel

615
00:35:05.560 --> 00:35:07.330
minutes. We'll see you again
next week.

