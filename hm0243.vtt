WEBVTT FILE

1
00:00:12.060 --> 00:00:17.700
From hanselminutes.com. It's Hansel minutes.
Oh, weekly discussion with web

2
00:00:17.700 --> 00:00:22.490
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.490 --> 00:00:28.640
number two 43. Recorded live
Tuesday, November 30th, 2010. Support for Hansel

4
00:00:28.640 --> 00:00:31.250
minutes is provided by Tellerik
R a D control. It

5
00:00:31.250 --> 00:00:34.400
was the most comprehensive suite
of components For windows forms

6
00:00:34.400 --> 00:00:39.020
and asp.net web applications online
at www dot T E

7
00:00:39.020 --> 00:00:43.700
L <inaudible> dot com. In
this episode, Scott talks with

8
00:00:43.790 --> 00:00:51.440
Steve Sanderson about his MVVM
JavaScript library. Knock out. Hi,

9
00:00:51.440 --> 00:00:53.420
this is Scott Hanselman and
this is another episode of

10
00:00:53.420 --> 00:00:56.360
Hansel minutes. And today I'm
on campus at the Microsoft

11
00:00:57.200 --> 00:01:01.190
Redmond and I'm here today
with Steven Sanderson, new Microsoft

12
00:01:01.190 --> 00:01:03.440
employee. That's. All right. Hello,
Scott, how are you? How

13
00:01:03.440 --> 00:01:05.420
are you doing, sir? I
am doing fine. Thank you.

14
00:01:05.690 --> 00:01:08.270
Brilliant. So you've gone from
being a consultant to working

15
00:01:08.270 --> 00:01:11.000
for the man, Sorry. Yep.
I just started at the

16
00:01:11.000 --> 00:01:13.250
beginning of last week and
I am still trying to

17
00:01:13.250 --> 00:01:15.710
figure out what's going on.
Yeah. Why I'm here pretty

18
00:01:15.710 --> 00:01:18.770
dramatic. You got off the
plane yesterday? Yes, that's right.

19
00:01:19.610 --> 00:01:20.870
Well, one of the things
that I wanted to talk

20
00:01:20.870 --> 00:01:23.630
to you today, just kind
of coincidentally, since we're both

21
00:01:23.630 --> 00:01:26.780
on the, on the left
side of the pond is

22
00:01:27.080 --> 00:01:29.420
I think that there's this
great open source project that

23
00:01:29.660 --> 00:01:33.770
more people should know about.
It's called knockout JS and

24
00:01:33.800 --> 00:01:38.180
you can see it@knockoutjs.com. Talk
to me about what is,

25
00:01:38.300 --> 00:01:41.690
what is knockout? Okay. Well,
yeah, great. So this is

26
00:01:41.690 --> 00:01:44.540
a project that I started
about, I don't know, six

27
00:01:44.540 --> 00:01:47.270
months ago or something like
that. It came out of

28
00:01:47.510 --> 00:01:50.240
some experiences that I've had
over the last few years,

29
00:01:50.240 --> 00:01:55.220
trying to build dynamic JavaScript
applications and trying to find

30
00:01:55.220 --> 00:01:58.160
ways of simplifying that and
organizing the code so that

31
00:01:58.790 --> 00:02:02.270
it's not just a big,
massive bundle of mess. I've

32
00:02:02.270 --> 00:02:05.630
probably done about three different
versions of my, my own

33
00:02:05.630 --> 00:02:08.620
brand of JavaScript client side
library over the years. And

34
00:02:08.780 --> 00:02:10.820
this has kind of the
latest incarnation of all that.

35
00:02:12.350 --> 00:02:15.830
So the idea is that
we are increasing to building

36
00:02:15.830 --> 00:02:20.480
very rich web pages with
lots of JavaScript time. That's

37
00:02:20.600 --> 00:02:23.690
very much accepted as the
way web development should be

38
00:02:23.720 --> 00:02:26.480
these days. And in terms
of creating enrich clients, ad

39
00:02:26.480 --> 00:02:31.640
experiences, it's all about JavaScript.
So we're not really doing

40
00:02:31.640 --> 00:02:33.860
too much in terms of
browser plugins. If you want

41
00:02:33.860 --> 00:02:37.130
to make your application run
on iOS and on Android

42
00:02:37.130 --> 00:02:39.680
tablets and on windows, PCs
on everything, then, you know,

43
00:02:39.680 --> 00:02:42.890
it's gotta be JavaScript obviously,
but that's still a big

44
00:02:42.920 --> 00:02:47.270
challenge. So what I've done
with knockout is try to

45
00:02:47.300 --> 00:02:51.020
create a system of following
the model view, view model

46
00:02:51.020 --> 00:02:54.440
pattern to enable you to
create your application and quite

47
00:02:54.440 --> 00:02:57.800
a maintainable and simple way.
So this is really interesting

48
00:02:57.800 --> 00:03:02.320
because we had Lauren <inaudible>,
who was a Silverlight developer

49
00:03:02.320 --> 00:03:05.290
on last week or the
week before last talking about

50
00:03:05.290 --> 00:03:08.350
MVVM okay. And here we
are talking to you. Now

51
00:03:08.890 --> 00:03:11.200
I'm a web developer, you're
a web developer. We are

52
00:03:11.200 --> 00:03:15.760
now peers on the Microsoft
web platform team. You have

53
00:03:15.760 --> 00:03:20.920
written a book on asp.net,
MVC as headlines. So why

54
00:03:20.920 --> 00:03:26.050
are two MVC developers talking
about MVVM, which is something

55
00:03:26.050 --> 00:03:30.000
that we talked about with
the Silverlight guy, It's a

56
00:03:30.000 --> 00:03:32.640
diff MVVM differs from MVC,
and that it's trying to

57
00:03:32.640 --> 00:03:36.900
solve a slightly different problem.
MVVM is really good for

58
00:03:37.590 --> 00:03:41.070
interactive user interfaces where there's
some kind of state inherent

59
00:03:41.070 --> 00:03:44.940
in the system. Whereas model
view controller, I'm not talking

60
00:03:44.940 --> 00:03:47.040
about the original definition model
view controller. That's kind of

61
00:03:47.100 --> 00:03:49.230
very similar to what we
mean when we say MVVM

62
00:03:49.230 --> 00:03:53.460
today, but forget about that.
W if we understand MVC

63
00:03:53.460 --> 00:03:56.910
to mean the thing that
Aspina MVC does and Ruby

64
00:03:56.910 --> 00:03:59.490
on rails does, and things
like that do that's really

65
00:03:59.490 --> 00:04:03.120
all optimized around requests and
responses and statelessness and such

66
00:04:03.120 --> 00:04:08.970
like, whereas the MVVM pattern,
which was originally talked about

67
00:04:09.310 --> 00:04:13.050
Microsoft when they were Durbin
gum Silverlight or WPF, or

68
00:04:13.050 --> 00:04:19.860
some technology prior to that
is about formalizing a abstract

69
00:04:19.860 --> 00:04:23.400
definition of a, of a
model of what's happening in

70
00:04:23.400 --> 00:04:25.560
a user interface. So if
you've got a list and

71
00:04:25.560 --> 00:04:28.410
some buttons and some dropdown
menus, then you might have

72
00:04:28.410 --> 00:04:32.190
a class that represents the
state of each of those

73
00:04:32.190 --> 00:04:35.130
things, but they're not controls,
it's just an abstract class.

74
00:04:35.490 --> 00:04:39.090
And then that gives you
a very clean abstract way

75
00:04:39.090 --> 00:04:41.730
of manipulating the state of
your user interface without being

76
00:04:41.730 --> 00:04:45.150
tied to a certain UI
technology, and then letting the

77
00:04:45.150 --> 00:04:48.390
technology do the hard work
of actually finding that up

78
00:04:48.390 --> 00:04:50.760
with some stuff that happens
on screen and the developer

79
00:04:50.760 --> 00:04:52.950
doesn't have to worry too
much about that. Okay. So

80
00:04:52.950 --> 00:04:55.500
let me see if I
can, can put this into

81
00:04:55.530 --> 00:04:57.600
a terms that I understand,
and you tell me if

82
00:04:57.600 --> 00:04:59.760
I'm paraphrasing correctly back to
you, you will use an

83
00:04:59.760 --> 00:05:04.170
example on the homepage here
of knockout js.com. If I've

84
00:05:04.170 --> 00:05:07.740
got a, a ticketing system.
Yep. Certainly I have a

85
00:05:07.740 --> 00:05:10.440
ticket's a database or Lord
knows what's going on in

86
00:05:10.440 --> 00:05:13.320
the database. What we traditionally
think of as the entity

87
00:05:13.680 --> 00:05:18.180
relationship diagram, I may have
a model that sits on

88
00:05:18.180 --> 00:05:20.700
top of that database. That
may be a little bit

89
00:05:20.790 --> 00:05:24.450
less normalized and a little
more businessy tickets. And this

90
00:05:24.450 --> 00:05:27.450
is on your server, usually
on my server. And then

91
00:05:27.450 --> 00:05:28.980
at some point we come
all the way out to

92
00:05:28.980 --> 00:05:32.310
the raising model view controller,
and we have a controller

93
00:05:32.310 --> 00:05:34.080
that talks to the model
and it generates a view.

94
00:05:34.080 --> 00:05:37.530
And now we're over on
the client side on the

95
00:05:37.530 --> 00:05:41.250
client. I may have a
JavaScript model, but in this

96
00:05:41.250 --> 00:05:43.620
case, I'm in the view.
So that's really a view

97
00:05:43.620 --> 00:05:46.290
model. It's a model of
what's being expressed. It may

98
00:05:46.290 --> 00:05:49.530
also be called tickets, but
it may have things like

99
00:05:49.530 --> 00:05:50.970
the name of the ticket,
the price of the ticket,

100
00:05:50.970 --> 00:05:53.160
maybe also things like is
the ticket valid or the

101
00:05:53.160 --> 00:05:55.740
ticket number or the state
of the ticket. Yeah. And

102
00:05:55.740 --> 00:05:57.950
it's likely to be very
denormalized. It might have things

103
00:05:57.950 --> 00:06:01.340
like the price, if it's
discounted for a gold member

104
00:06:01.340 --> 00:06:03.410
and the price of it's
discounted for silver member and

105
00:06:03.410 --> 00:06:05.450
so on, you wouldn't store
all these things separately on

106
00:06:05.450 --> 00:06:08.030
database, that would be mad.
But in terms of the

107
00:06:08.030 --> 00:06:11.390
way that your view works,
there might be all treated

108
00:06:11.390 --> 00:06:13.790
as if they were separate
pieces of information, even though

109
00:06:13.790 --> 00:06:16.580
behind the scenes, they're all
computed from some underlying thing,

110
00:06:16.720 --> 00:06:19.930
Right? So stated differently work
may have occurred on the

111
00:06:19.930 --> 00:06:22.120
server side to tell me
the price of a ticket

112
00:06:22.120 --> 00:06:24.910
for a first class person
or an economy person. But

113
00:06:24.910 --> 00:06:27.880
by the time I got
out to the model, as

114
00:06:27.880 --> 00:06:31.210
it is expressed within the
view, sir, literally the Jason

115
00:06:31.210 --> 00:06:33.760
that is admitted, that work
has been done. Yeah, that's

116
00:06:33.760 --> 00:06:35.260
right. And you don't want
to repeat that logic on

117
00:06:35.260 --> 00:06:37.240
the client. So you're just
going to treat it in

118
00:06:37.240 --> 00:06:39.520
some really simple way. This
is just a bunch of

119
00:06:39.520 --> 00:06:42.280
properties and we want to
get that on screen somehow.

120
00:06:42.610 --> 00:06:45.130
And so the view model
is just a representation of

121
00:06:45.400 --> 00:06:47.260
the data that is there
to be put on screen

122
00:06:47.260 --> 00:06:50.800
and edited by the user.
And this idea of the

123
00:06:51.010 --> 00:06:53.290
I've been saying this for
almost 15 years, when we

124
00:06:53.290 --> 00:06:55.690
were doing big systems and
classic ASP, we always used

125
00:06:55.690 --> 00:06:58.390
to talk about the closer
you get to the user,

126
00:06:59.020 --> 00:07:02.080
the less normalized your data
should look. And the more

127
00:07:02.080 --> 00:07:04.120
it should look like the
way the user thinks about

128
00:07:04.120 --> 00:07:07.510
it. Yeah. So the Jason
that you have here, which

129
00:07:07.510 --> 00:07:10.840
is in Jason, we're talking
about JavaScript, object notation, J

130
00:07:10.840 --> 00:07:16.060
S O N pronounced chasing
looks like, Oh, you a

131
00:07:16.060 --> 00:07:19.270
little UI. It's very well
organized. It's a nice tabular

132
00:07:19.270 --> 00:07:22.480
expression of a list it's
as close you close, as

133
00:07:22.480 --> 00:07:25.120
you could get, you could
almost kind of squint and

134
00:07:25.120 --> 00:07:29.230
imagine that it's a table.
Yeah. That's extremely UI focused,

135
00:07:30.190 --> 00:07:32.200
a ticket on the UI
is not a ticket in

136
00:07:32.200 --> 00:07:33.760
the model in the middle.
And it is not a

137
00:07:33.760 --> 00:07:36.130
ticket in the database. No,
that's right. It's just a

138
00:07:36.130 --> 00:07:39.940
representation of something that the
user can see. So you're

139
00:07:39.940 --> 00:07:45.250
saying that instead of outputting
my UI, that contains its

140
00:07:45.250 --> 00:07:49.240
data. What do I do?
I output my data, my

141
00:07:49.240 --> 00:07:51.820
view data, my representation of
tickets. And then how do

142
00:07:51.820 --> 00:07:53.920
I turn that into HTML?
And How does that work?

143
00:07:53.950 --> 00:07:56.530
Yeah. All right. So that's
the thing that knockout does

144
00:07:56.530 --> 00:07:58.750
so that all we talked
about so far with the

145
00:07:58.750 --> 00:08:02.080
model Mavi view model pattern,
and view models, that soul,

146
00:08:02.080 --> 00:08:06.430
just like a, almost a
philosophical thing about the pattern

147
00:08:06.970 --> 00:08:09.880
now, knockout comes in and
says, assuming that you've got

148
00:08:10.150 --> 00:08:12.640
some concept of what your
view model should be, we

149
00:08:12.640 --> 00:08:14.560
want to get that onscreen
and give the user a

150
00:08:14.560 --> 00:08:17.260
way of seeing and interacting
with that. And the approach

151
00:08:17.260 --> 00:08:20.140
that knockout takes with that
is that it has a

152
00:08:20.140 --> 00:08:23.980
declarative binding syntax. So it
uses the new HTML five

153
00:08:24.010 --> 00:08:27.160
data attributes. And you can
just put one of those

154
00:08:27.190 --> 00:08:32.500
on any HTML element and
reference it and follow a

155
00:08:32.500 --> 00:08:37.540
particular simple declarative syntax and
referenced some product properties on

156
00:08:37.540 --> 00:08:39.880
your view model, which is
a JavaScript object. And then

157
00:08:39.880 --> 00:08:42.130
knockout deals with linking the
two things together. So if

158
00:08:42.130 --> 00:08:44.470
you say bind to the
text of this element, to

159
00:08:44.470 --> 00:08:47.380
this property, then whatever value
is in that property will

160
00:08:47.380 --> 00:08:49.810
be the text of the
element. And when the property

161
00:08:49.810 --> 00:08:52.990
value changes in our model,
the text on the HTML

162
00:08:52.990 --> 00:08:55.980
element changes. And if it's
an editable, let's say it's

163
00:08:55.980 --> 00:08:58.140
a drop down list or
a check box. Then when

164
00:08:58.140 --> 00:09:00.780
the user interacts with that,
they're actually going to be

165
00:09:00.840 --> 00:09:03.690
modifying the state on the
view model. So you've linked

166
00:09:03.690 --> 00:09:05.790
these two things together. So
that's just one of the

167
00:09:06.150 --> 00:09:08.310
things that knock out does
it's link and give you

168
00:09:08.310 --> 00:09:11.990
a model with your HTML
Dom. So if I understand,

169
00:09:11.990 --> 00:09:16.100
then I bring some Jason
out that represents tickets. Yep.

170
00:09:17.450 --> 00:09:20.900
Then a bunch of work
is done in HTML that

171
00:09:20.900 --> 00:09:24.230
I don't really have to
think about. Then that same

172
00:09:24.230 --> 00:09:29.540
exact array of tickets gets
updated. It's being updated on

173
00:09:29.540 --> 00:09:31.400
the client. Yes. We're not
talking to the server or

174
00:09:31.430 --> 00:09:33.320
knocking it out as a
purely clients. So we're talking

175
00:09:33.320 --> 00:09:35.810
about a relationship that's happening,
a little sort of circle

176
00:09:35.870 --> 00:09:38.750
of interaction between the browser
and the JavaScript in the

177
00:09:38.750 --> 00:09:41.030
browser and the user. But
the point is that I

178
00:09:41.030 --> 00:09:44.750
outputted some Jason, the user
did some stuff and it's

179
00:09:44.750 --> 00:09:48.020
not that. And then the
user pushed a button and

180
00:09:48.020 --> 00:09:51.200
the da the data got
updated. The data was always

181
00:09:51.200 --> 00:09:52.850
updated. It is, it is,
it was not even a

182
00:09:52.850 --> 00:09:55.130
sync. It's a live sync
it's happening as it is.

183
00:09:55.670 --> 00:09:57.830
Yeah, that's right. Yeah. A
modification to one is, is

184
00:09:57.830 --> 00:09:59.900
a modification to the other.
And then I can take

185
00:09:59.900 --> 00:10:03.350
that Jason, and send it
right back to the, Yeah.

186
00:10:03.380 --> 00:10:05.450
So one way of thinking
about what knockout is, is

187
00:10:05.450 --> 00:10:09.710
that it's a very rich
and simultaneously simple way of

188
00:10:09.710 --> 00:10:12.980
making editors for Jason data.
You can, if you can

189
00:10:12.980 --> 00:10:16.280
get some data Jason from
your server, then we can

190
00:10:16.280 --> 00:10:18.320
make an HTML editor for
it and with a very

191
00:10:18.560 --> 00:10:21.470
straightforward syntax. And then you
can send that Jess, on

192
00:10:21.470 --> 00:10:23.870
back to your server. That's
interesting because one of the

193
00:10:23.870 --> 00:10:26.420
things that I have always
found the most tedious about

194
00:10:26.540 --> 00:10:31.040
HTML and JavaScript is what
we call text boxes over

195
00:10:31.040 --> 00:10:35.570
data, right. Is that just
tedious terminal type application? I

196
00:10:35.570 --> 00:10:38.630
mean, getting, you know, that's
just why you always see

197
00:10:38.630 --> 00:10:41.990
interesting examples when you know,
your Microsoft, your local Microsoft

198
00:10:41.990 --> 00:10:44.270
guy goes up and does
a demo. They always output

199
00:10:44.270 --> 00:10:47.030
a table of data. It's
always more impressive when they

200
00:10:47.030 --> 00:10:51.770
edit that data. Cause that's
where things get tricky because

201
00:10:51.770 --> 00:10:54.680
of synchronization of state and
moving things around. So you're

202
00:10:54.680 --> 00:10:57.890
saying that the MVVM is
happening entirely on the client

203
00:10:57.890 --> 00:11:01.700
side. Yes, that's right. Yeah.
Entirely in the browser. So

204
00:11:01.700 --> 00:11:06.350
MVC as a larger architectural
pattern showing the relationship between

205
00:11:06.350 --> 00:11:08.780
the client and the server
and what's going on on

206
00:11:08.780 --> 00:11:13.040
the server side and then
MVVM inside my browser itself.

207
00:11:13.190 --> 00:11:15.920
Yeah. MVC is really good
for requests and responses and

208
00:11:15.920 --> 00:11:18.590
that fits perfectly with HTTP
and the whole server side

209
00:11:18.920 --> 00:11:21.500
web architecture. And MVVM is
more of a kind of

210
00:11:21.500 --> 00:11:24.650
live ongoing stateful thing. And
that works great for some

211
00:11:24.650 --> 00:11:27.800
JavaScript that's running in your
browser. Well, let's do this.

212
00:11:27.800 --> 00:11:31.070
Let's take a very brief
kind of side conversation because

213
00:11:31.070 --> 00:11:34.340
in the middle there, you
said HTML five data attributes.

214
00:11:34.420 --> 00:11:38.420
I think that's something interesting
there, because one, I think

215
00:11:38.420 --> 00:11:41.510
that HTML five is just
becoming like, it's like the

216
00:11:41.510 --> 00:11:43.880
new name, like web 2.0
right in the old days,

217
00:11:43.880 --> 00:11:46.400
you'd sit when the old
days, two years ago, you'd

218
00:11:46.400 --> 00:11:49.850
say web 2.0 Shiny. Yeah.
That it was a Jack,

219
00:11:49.850 --> 00:11:52.580
so, And your startup and
give you money. Yeah. Now

220
00:11:52.610 --> 00:11:55.510
HTML is like the word
that everyone uses to mean

221
00:11:55.510 --> 00:11:58.840
all things. And it's amazing
while there is a, you

222
00:11:58.840 --> 00:12:01.030
know, a formal standard that
is slowly making its way

223
00:12:01.030 --> 00:12:04.690
through the process, these data
attributes that you're describing, I

224
00:12:04.690 --> 00:12:07.920
can pretty much slap those
on existing page. Yeah. And

225
00:12:07.920 --> 00:12:12.120
knockout works back to a
sex, which obviously does not

226
00:12:12.120 --> 00:12:15.630
have any concept of HTML
five of its own. But

227
00:12:15.630 --> 00:12:17.520
yeah. As long as you
are willing to accept the

228
00:12:17.520 --> 00:12:22.590
fact that data attributes are
not strictly valid under an

229
00:12:22.590 --> 00:12:25.890
HTML four validator, then it's
just going to work fine

230
00:12:25.890 --> 00:12:28.320
when you pragmatically, it works.
Now whether you have a

231
00:12:28.320 --> 00:12:31.410
philosophical problem with doing something
that works, but it doesn't

232
00:12:31.530 --> 00:12:35.040
satisfy the W3C validator is
a different question. And if

233
00:12:35.040 --> 00:12:38.130
you absolutely can't accept that,
then you know, you can't

234
00:12:38.130 --> 00:12:39.900
use knockout or you wouldn't
use it in the way

235
00:12:39.900 --> 00:12:43.590
it's intended to be used.
But honestly, in all the

236
00:12:43.740 --> 00:12:46.050
different projects I've ever worked
on as a professional developer,

237
00:12:46.380 --> 00:12:50.790
I've never had a boss
or client yet who was

238
00:12:51.090 --> 00:12:56.790
actually so committed to W3C
validators, that they would actually

239
00:12:57.120 --> 00:13:02.400
accept a significant increase in
development costs. And if knockout

240
00:13:02.400 --> 00:13:05.130
does reduce your development costs
significantly for rich client side

241
00:13:05.190 --> 00:13:08.580
stuff, then I think that
pragmatically that's a good choice.

242
00:13:08.790 --> 00:13:11.130
But of course, every person
listening to this needs to

243
00:13:11.130 --> 00:13:15.000
make their own decision about
that. So these data attributes

244
00:13:15.030 --> 00:13:18.030
that are always referred to
as HTML five data attributes,

245
00:13:18.040 --> 00:13:21.090
this is really, I mean,
HDL, HTML five, be damned.

246
00:13:21.570 --> 00:13:26.880
I could just go and
say angle bracket, input, foo

247
00:13:26.880 --> 00:13:30.810
equals bar. Yeah. You can.
And no one can, Ninth

248
00:13:30.810 --> 00:13:32.730
of browse is absolutely fine
with that. There's a formal

249
00:13:32.730 --> 00:13:37.620
mechanism that I use as
for registering custom attributes and

250
00:13:37.620 --> 00:13:39.570
other browsers are just not
bothered. They'll just let you

251
00:13:39.570 --> 00:13:41.700
do it. And while I
will just let you do

252
00:13:41.700 --> 00:13:43.950
it as well, but you
know, there's, there is some

253
00:13:43.950 --> 00:13:46.260
system I'm not sure even
what the point of following

254
00:13:46.260 --> 00:13:50.610
get's system, as for talking
about custom attributes, But these

255
00:13:50.610 --> 00:13:53.760
data attributes that it's more
convention than anything. I mean,

256
00:13:53.820 --> 00:13:57.660
someone somewhere just decided one
day, if you put the

257
00:13:57.660 --> 00:14:01.440
word data and a hyphen
yeah. That's an official thing.

258
00:14:01.650 --> 00:14:05.280
And that became an official
thing. Yeah, exactly. Because what

259
00:14:05.280 --> 00:14:07.800
web developers have realized over
the years and what every

260
00:14:07.890 --> 00:14:10.800
web developer has done at
different times is just start

261
00:14:10.800 --> 00:14:13.110
putting data into the dump
because you really need to,

262
00:14:13.110 --> 00:14:16.170
because you want to store
a URL that you're going

263
00:14:16.170 --> 00:14:18.660
to use for something associated
with that element. Or you

264
00:14:18.660 --> 00:14:21.480
want to associate it with
an idea of an entity,

265
00:14:21.480 --> 00:14:23.430
but you don't want to
actually munch that into the

266
00:14:23.430 --> 00:14:25.860
element ID for some reason,
or one reason or another,

267
00:14:25.860 --> 00:14:28.110
you want to get some
data associated with your Dom.

268
00:14:28.410 --> 00:14:29.970
So you just stick it
in an attribute and it's

269
00:14:30.360 --> 00:14:32.970
going to work fine. And
the HTML five spec is

270
00:14:32.970 --> 00:14:36.180
just formalizing that and saying,
yes, we officially agree that

271
00:14:36.180 --> 00:14:40.080
that's legitimate. Whereas previously the
strict validator would not have

272
00:14:40.080 --> 00:14:43.770
said it was legitimate. So
you add data hyphen bind.

273
00:14:43.890 --> 00:14:46.200
Yep. Is that the only
one that you add? Yeah.

274
00:14:47.280 --> 00:14:49.710
Did you have to ask
permission or register that somewhere

275
00:14:49.710 --> 00:14:51.770
like a domain or you
just decided squat on it

276
00:14:52.640 --> 00:14:56.270
Well know that there is
no formal system or namespace

277
00:14:56.270 --> 00:14:59.480
single versioning or anything about
these attributes. That's kind of

278
00:14:59.480 --> 00:15:01.820
the point of it all.
It's just, you know, we're

279
00:15:01.820 --> 00:15:04.670
going to just be pragmatic
and do what, what works.

280
00:15:04.910 --> 00:15:06.440
Now, if some of the
framework comes along and wants

281
00:15:06.440 --> 00:15:09.140
to use data binders it's
convention, then that's going to

282
00:15:09.140 --> 00:15:11.870
be an unfortunate clash and
it would be very easy

283
00:15:11.870 --> 00:15:13.970
to extend knockout so that
you could use some other

284
00:15:13.970 --> 00:15:16.730
custom attribute name if you
wanted, but I'm not aware

285
00:15:16.730 --> 00:15:19.910
of any reason to do
that right now. So no,

286
00:15:19.910 --> 00:15:22.730
there's, there's no system for
agreeing who uses what attribute

287
00:15:22.730 --> 00:15:26.500
names There. Isn't just the
term data binding itself, got

288
00:15:26.500 --> 00:15:29.350
such a bad name from
years past that that, that

289
00:15:29.350 --> 00:15:31.930
may be enough to scare
people away. I don't know.

290
00:15:31.930 --> 00:15:35.710
Really. I think that certainly
there are some technologies that

291
00:15:35.710 --> 00:15:39.580
are oriented around data binding
that, you know, maybe not

292
00:15:39.580 --> 00:15:43.600
very popular with the sort
of alpha developers, but really

293
00:15:44.320 --> 00:15:46.960
finding your data to the
user interface is a, is

294
00:15:46.960 --> 00:15:49.180
a really natural concept. And
developers always want to do

295
00:15:49.180 --> 00:15:51.580
it whether or not they
use that particular term for

296
00:15:51.580 --> 00:15:53.980
it. And, you know, people
will be searching the web.

297
00:15:53.980 --> 00:15:56.290
How do I bind this
to that? And it's just

298
00:15:56.290 --> 00:15:58.210
a normal kind of thing
that we have to do,

299
00:15:58.720 --> 00:16:01.730
Perhaps it was the idea
that maybe it was that

300
00:16:01.730 --> 00:16:04.420
the MVVM wasn't quite baked
as a concept in the,

301
00:16:04.420 --> 00:16:06.790
in the VB six days.
And that people were literally

302
00:16:06.790 --> 00:16:09.820
trying to bind data objects
from Drayton directly from tables

303
00:16:09.820 --> 00:16:11.800
directly to the U S
Right. Yeah. If you don't

304
00:16:11.800 --> 00:16:14.200
have a, a nice system
of formalizing what you're doing

305
00:16:14.500 --> 00:16:16.570
on a, not following any
kind of established pattern, then

306
00:16:16.840 --> 00:16:18.580
yeah. I'm sure you can
get into a mess. Okay.

307
00:16:18.580 --> 00:16:20.230
So walk me through what
I would need to do

308
00:16:20.230 --> 00:16:22.230
in, in knock out if
I'm bringing back, you know,

309
00:16:22.230 --> 00:16:24.070
you know, we'll use tickets
because this has been a

310
00:16:24.070 --> 00:16:26.440
good example that people can
actually see live. So if

311
00:16:26.440 --> 00:16:28.660
you're listening to this in
front of a computer, you

312
00:16:28.660 --> 00:16:31.150
can go to knockout js.com
and check it out. These

313
00:16:31.150 --> 00:16:34.960
tickets come back, presumably from,
from adjacent call or an

314
00:16:34.960 --> 00:16:38.740
Ajax call. And I've got
this, this Jason array. Yeah.

315
00:16:38.800 --> 00:16:40.390
And you want to make
an editor for that in

316
00:16:40.390 --> 00:16:43.150
some way. So you might,
maybe you want to let

317
00:16:43.150 --> 00:16:45.250
the user choose it from
a ticket and then show

318
00:16:45.250 --> 00:16:48.060
more information about the ticket
that they've chosen, or even

319
00:16:48.070 --> 00:16:51.340
as a system for administrators
to find tickets and edit

320
00:16:51.340 --> 00:16:54.220
their details. And, you know,
the system is going to

321
00:16:54.520 --> 00:16:57.040
maybe compute discounts that apply
in those test kits or

322
00:16:57.040 --> 00:16:59.590
something like that. But very
briefly, maybe for people who

323
00:16:59.590 --> 00:17:01.930
may not necessarily be familiar
with Jason as a concept.

324
00:17:01.960 --> 00:17:05.710
Okay. Adjacent is some texts
that comes back that is

325
00:17:05.710 --> 00:17:08.080
in itself. Java. Yeah. That's
all right. It's just a

326
00:17:08.080 --> 00:17:15.490
very simple and succinct kind
of encoding mechanism for data.

327
00:17:15.790 --> 00:17:19.420
So yeah, you could use
XML, but Jason is just

328
00:17:19.600 --> 00:17:22.690
a smaller over the wire
because it doesn't have, you

329
00:17:22.690 --> 00:17:26.590
know, big closing angle bracket
names and things like that.

330
00:17:27.040 --> 00:17:29.560
And, and because it's actually
JavaScript code, as you mentioned

331
00:17:29.560 --> 00:17:32.350
than it works really great
with JavaScript because the browsers

332
00:17:32.650 --> 00:17:36.400
net of JavaScript processor can
handle that really quickly. So

333
00:17:36.400 --> 00:17:39.040
it's kind of like a,
a dynamically created bunch of

334
00:17:39.040 --> 00:17:41.710
anonymous objects that just hang
off each other. So it's

335
00:17:41.770 --> 00:17:44.980
almost like with XML, you
bring over these angle brackets,

336
00:17:44.980 --> 00:17:48.070
you parse it into a
Dom while Jason is itself,

337
00:17:48.130 --> 00:17:50.520
as it runs, it is
own Dom its own document,

338
00:17:50.520 --> 00:17:53.600
right? Yeah. It is a
JavaScript object. It's just the

339
00:17:53.630 --> 00:17:57.110
serialized text representation of a
JavaScript object. And it can

340
00:17:57.110 --> 00:18:00.860
represent any data that you
want with the exception that

341
00:18:01.100 --> 00:18:04.700
like XML it's inherently a
hierarchical structure. So it can't

342
00:18:04.730 --> 00:18:08.960
easily represent cyclical references, or
you'd have to have your

343
00:18:08.960 --> 00:18:11.840
own convention for IDs or
something if you wanted to

344
00:18:11.840 --> 00:18:14.510
represent that. But in most
cases, a hierarchy of data

345
00:18:14.510 --> 00:18:18.470
is completely sufficient for what
most people are doing. Hi,

346
00:18:18.470 --> 00:18:20.600
this is Scott coming to
you from another place in

347
00:18:20.600 --> 00:18:23.990
time. Are you using agile
practices to manage your software

348
00:18:23.990 --> 00:18:26.270
development? There's lots of tools
in the market that manage

349
00:18:26.280 --> 00:18:28.190
the steps of a project,
but most of them focus

350
00:18:28.200 --> 00:18:31.520
on individual roles, get ready
for a solution that caters

351
00:18:31.520 --> 00:18:34.070
for the success of the
whole team. Guys at Tellerik

352
00:18:34.100 --> 00:18:37.880
introduced team pulse. It's an
agile project management tool. That'll

353
00:18:37.880 --> 00:18:41.090
help you gather ideas, estimate
plan, track progress in a

354
00:18:41.090 --> 00:18:45.050
common workspace. Finally, companies, regardless
of their size can use

355
00:18:45.050 --> 00:18:47.390
a lightweight and convenient tool.
It makes all the stakeholders

356
00:18:47.390 --> 00:18:50.390
work as a United team,
even if they're in different

357
00:18:50.390 --> 00:18:54.020
countries by combining intuitive user
interface and the power server

358
00:18:54.020 --> 00:18:56.960
light team poles removes the
roadblocks that you typically face

359
00:18:56.960 --> 00:18:59.990
and applying agile in an
effective manner, no more lost

360
00:18:59.990 --> 00:19:04.340
data, no disparate systems, no
lack of critical analytics regarding

361
00:19:04.340 --> 00:19:07.730
the health philosophy project. See
if yourself get a free

362
00:19:07.730 --> 00:19:13.190
copy for five users in
one project at tellerik.com/team pulse.

363
00:19:13.940 --> 00:19:17.330
And please do thank Tellerik
for supporting Hansel minutes on

364
00:19:17.330 --> 00:19:22.400
their Facebook fan page, facebook.com/t
L E R I K

365
00:19:22.880 --> 00:19:25.850
Tellerik. We do appreciate it.
They wouldn't be a Hansel

366
00:19:25.850 --> 00:19:28.670
minutes if there wasn't, Tellerik
helping us. So at its

367
00:19:28.670 --> 00:19:31.100
simplest, I could have a
little web service and I'm

368
00:19:31.100 --> 00:19:33.890
using web services in the
most generic lowercase sense of

369
00:19:33.890 --> 00:19:36.860
the word that returns a,
you know, curly brace name,

370
00:19:36.860 --> 00:19:39.860
Colin Scott, curly brace. And
I've got some Jason. Yep,

371
00:19:40.040 --> 00:19:42.350
exactly. And then there's a
format for encoding a raise

372
00:19:42.350 --> 00:19:44.090
or in the example, here,
we have an array of

373
00:19:44.810 --> 00:19:48.470
airplane ticket. Yeah. It's come
back from some database somewhere.

374
00:19:48.650 --> 00:19:52.100
Yeah, that's right. Almost every
modern web development system on

375
00:19:52.100 --> 00:19:54.050
the server is going to
be able to emit Jason

376
00:19:54.620 --> 00:19:58.340
in Espina MVC. You can
just say return Jason in

377
00:19:58.340 --> 00:20:01.850
rails, you can respond to
a request of type Jason

378
00:20:02.360 --> 00:20:05.090
and well, I'm not really
an expert in many others,

379
00:20:05.120 --> 00:20:06.950
but they're all gonna have
one way or another of

380
00:20:07.280 --> 00:20:10.370
emit. And Jason and I
should expect that most of

381
00:20:10.370 --> 00:20:14.240
them are able to consume
incoming Jason as well. That's

382
00:20:14.330 --> 00:20:16.850
a native feature in ASP,
net MVC three. It isn't

383
00:20:16.850 --> 00:20:18.590
native in the early ones,
but you can do it

384
00:20:18.830 --> 00:20:21.680
in just a few lines
of code. And I, I

385
00:20:21.680 --> 00:20:24.830
was doing some knockout stuff
in Ruby on rails a

386
00:20:24.830 --> 00:20:27.320
few weeks ago, and that's
really easy to receive incoming

387
00:20:27.330 --> 00:20:30.470
Jason, because that's all just
completely native. Okay. So once

388
00:20:30.470 --> 00:20:33.170
this, Jason is now in
memory in my browser, like

389
00:20:33.170 --> 00:20:36.410
you said, as far back
as Isaacs, that's all still

390
00:20:36.410 --> 00:20:40.420
just JavaScript and jQuery, right?
There's no jQuery in this

391
00:20:40.520 --> 00:20:43.160
at all. No, it's just
JavaScript. Yep. So now I

392
00:20:43.160 --> 00:20:45.650
have this, I have this
JavaScript object that's chasing notation

393
00:20:45.650 --> 00:20:48.520
that represents a ticket. Yep.
How does knock out get

394
00:20:48.520 --> 00:20:50.470
in? Does it, does it
add something to that or

395
00:20:50.560 --> 00:20:52.980
extended in some way? Well,
it's, it's up to you

396
00:20:52.980 --> 00:20:57.000
to add that as a
property of some JavaScript object.

397
00:20:57.000 --> 00:20:59.340
So you're going to write
some JavaScript code that is

398
00:20:59.340 --> 00:21:01.800
your client side view model.
So you'll say VAR view

399
00:21:01.800 --> 00:21:04.410
model equals, and then you'll
do curly brace and you'll

400
00:21:04.410 --> 00:21:07.020
start typing out some properties
that you want on your

401
00:21:07.020 --> 00:21:10.380
view model. So you might
have an array of, of

402
00:21:10.380 --> 00:21:12.480
tickets called available tickets. And
that might be the thing

403
00:21:12.480 --> 00:21:14.760
that just came from your
server. You might have another

404
00:21:14.760 --> 00:21:18.390
property called selected ticket or
something. And that represents what

405
00:21:18.390 --> 00:21:20.880
the user's got selected. You
might have another property, which

406
00:21:20.880 --> 00:21:24.150
is sort of final value,
including discount or something. And

407
00:21:24.150 --> 00:21:27.240
that's going to be computed
from some other properties, but

408
00:21:27.450 --> 00:21:30.030
yeah, you're going to construct
some JavaScript that represents that

409
00:21:30.030 --> 00:21:33.210
view model. And then you
can write whatever behaviors you

410
00:21:33.210 --> 00:21:36.960
want enter into that, to
control what selections are legitimate,

411
00:21:37.530 --> 00:21:40.650
what kind of data entry
is valid and how different

412
00:21:40.650 --> 00:21:43.650
properties are computed from each
other, just implant, JavaScript code.

413
00:21:44.130 --> 00:21:47.850
And that's, that's the essence
of why the pattern is

414
00:21:47.850 --> 00:21:52.830
clean because all your, your
behavioral logic there is just

415
00:21:52.830 --> 00:21:54.750
in terms of an abstract
model and it isn't touching

416
00:21:54.750 --> 00:21:58.440
any HTML, Dom elements. It's
not doing jQuery selectors or

417
00:21:58.440 --> 00:22:02.850
anything that sort of mixes
different technologies, just JavaScript. Now

418
00:22:02.850 --> 00:22:06.060
I'm seeing this K O
dot observable function in your

419
00:22:06.060 --> 00:22:09.240
example. And that appears appears
just by looking at this

420
00:22:09.600 --> 00:22:11.400
to be the only function
that is used in your

421
00:22:11.400 --> 00:22:14.740
example, on your homepage here
and apply bindings. I guess

422
00:22:14.740 --> 00:22:17.200
there's one other NACADA does
a few different things. If

423
00:22:17.200 --> 00:22:19.410
I list the kind of
major headline features and knockout,

424
00:22:19.410 --> 00:22:22.410
then I can explain how
Kara observable fits into that.

425
00:22:22.410 --> 00:22:25.890
And what the point of
that is. So, as I've

426
00:22:26.460 --> 00:22:30.060
talked about at length already,
it's following the MVVM pattern

427
00:22:31.320 --> 00:22:33.480
in order to give you
a sort of nice structure

428
00:22:33.480 --> 00:22:36.540
for all your client's side
behavior. And as I mentioned,

429
00:22:36.540 --> 00:22:40.140
it's, it's got a system
of declarative bindings that happened

430
00:22:40.140 --> 00:22:42.450
to be the HTML five
data by an attribute. But

431
00:22:42.660 --> 00:22:44.580
if you're not working in
Actimel five, you just think

432
00:22:44.580 --> 00:22:48.450
of it as another attribute.
It doesn't really matter. And

433
00:22:49.650 --> 00:22:51.300
another one of the key
things that it deals with

434
00:22:51.300 --> 00:22:54.720
is dependency tracking. So as
you're defining a view model,

435
00:22:54.930 --> 00:22:58.350
you can have properties on
that view model that whose

436
00:22:58.350 --> 00:23:01.310
values are computed in terms
of the other properties and

437
00:23:01.310 --> 00:23:05.310
knock out notices when you're
doing that and automatically wires

438
00:23:05.310 --> 00:23:08.760
up internally, all the subscriptions
between those things. So you,

439
00:23:08.760 --> 00:23:11.730
as a developer, don't have
to ever declare that such

440
00:23:11.730 --> 00:23:14.100
and such a thing depends
on something else just by

441
00:23:14.100 --> 00:23:18.810
simply referencing one property from
inside another property, the dependency

442
00:23:18.810 --> 00:23:22.650
is set up implicitly for
you. So you can have

443
00:23:22.650 --> 00:23:25.320
like a total price on
your view model. That's computed

444
00:23:25.320 --> 00:23:27.690
in terms of a quantity
and a discount level and

445
00:23:27.690 --> 00:23:30.330
so on and knock out
deals with tracking the dependencies

446
00:23:30.330 --> 00:23:32.760
so that as each property
updates any of the property,

447
00:23:32.760 --> 00:23:36.990
that depends on that gets
updated. And as a very

448
00:23:37.020 --> 00:23:41.370
satisfying, special case of this
dependency tracking the UI is

449
00:23:41.370 --> 00:23:45.380
just one more dependency. So
as you modify properties on

450
00:23:45.380 --> 00:23:49.820
your view model, because your
UI, your HTML Dom happens

451
00:23:49.820 --> 00:23:52.700
to be just one more
of these dependencies, knockout will

452
00:23:52.700 --> 00:23:57.290
implicitly update that Dom. So
if you've got a binding

453
00:23:57.290 --> 00:24:01.580
that says the text of
this span is the total

454
00:24:01.580 --> 00:24:05.570
price then because you, somebody
edits a quantity that will

455
00:24:05.570 --> 00:24:08.480
cause the total price to
be updated because that's a

456
00:24:08.480 --> 00:24:12.050
dependency of quantity and then
knock out. We'll also notice

457
00:24:12.050 --> 00:24:15.440
that that span element is
a dependency on total price.

458
00:24:15.470 --> 00:24:17.960
So the span element will
be updated. So by updating

459
00:24:17.960 --> 00:24:21.050
quantity and the view model,
the total price span gets

460
00:24:21.050 --> 00:24:25.270
updated automatically. Now that kind
of interaction is traditionally what

461
00:24:25.270 --> 00:24:27.400
gets people in trouble because
they end up building themselves

462
00:24:27.400 --> 00:24:30.730
a little state machine and
they have to declare where

463
00:24:30.730 --> 00:24:34.270
the authoritative source of the
data is. Well, okay. So

464
00:24:34.270 --> 00:24:36.400
this is what the counter
observable thing is all about.

465
00:24:37.090 --> 00:24:40.990
The idea is that you
can express your view model

466
00:24:40.990 --> 00:24:45.250
in terms of a certain
number of independent underlying properties

467
00:24:45.610 --> 00:24:50.320
that are the sort of
raw underlying data. So if

468
00:24:50.440 --> 00:24:52.870
we continue with this whole
thing about quantities and total

469
00:24:52.870 --> 00:24:55.720
prices, and so on total
price was not an underlying

470
00:24:55.720 --> 00:24:58.720
piece of data. So whereas
quantity is that can update

471
00:24:58.720 --> 00:25:01.960
independently of anything else. And
so anything that's an independent

472
00:25:02.200 --> 00:25:05.320
piece of data is observable.
And other things can be

473
00:25:05.320 --> 00:25:08.410
declared as a dependent observable,
which are computed in terms

474
00:25:08.410 --> 00:25:10.600
of those. And you can
have a whole chains of

475
00:25:10.600 --> 00:25:13.330
dependencies, but at the root
of it, all, some things

476
00:25:13.330 --> 00:25:16.960
are the independent authority of
pieces of information. And they're

477
00:25:16.960 --> 00:25:19.600
the only ones that you
can directly modify. Everything else

478
00:25:19.600 --> 00:25:24.160
is computed from those. So
I can hook up input,

479
00:25:24.160 --> 00:25:27.700
text boxes. I can hook
up, you know, selects like

480
00:25:27.700 --> 00:25:31.570
combo boxes. What about funky
custom controls, like calendar controls

481
00:25:31.570 --> 00:25:33.730
and things that are weird.
Yeah. All right. So the,

482
00:25:33.910 --> 00:25:35.770
the model for dealing with
something like that is that

483
00:25:35.770 --> 00:25:38.380
you can create custom bindings.
So knock out has a

484
00:25:38.380 --> 00:25:41.140
load of builtin bindings. I'm,
I'm using the word binding.

485
00:25:41.530 --> 00:25:43.690
Not sure that's a great
choice cause it's very a

486
00:25:43.750 --> 00:25:47.080
well overloaded term that every
framework uses that word to

487
00:25:47.080 --> 00:25:50.260
mean a different thing. But
in knockout, the bindings refers

488
00:25:50.260 --> 00:25:53.680
to the things, the bits
of tax that you can

489
00:25:53.680 --> 00:25:56.290
put declaratively on a Dom
element in order to link

490
00:25:56.290 --> 00:26:00.130
it with your view model.
So you could say data

491
00:26:00.130 --> 00:26:03.160
bind text to this property
data, bind, collect to some

492
00:26:03.160 --> 00:26:06.610
handler that occurs when you
click data bind visible to

493
00:26:06.610 --> 00:26:08.920
some other property. And that
controls whether the elements visible

494
00:26:08.920 --> 00:26:10.840
or not, according to whether
a property is true or

495
00:26:10.840 --> 00:26:14.770
false, so that in these
cases, click and visible and

496
00:26:14.770 --> 00:26:16.540
so on. They're the bindings.
You can create a custom

497
00:26:16.540 --> 00:26:19.660
binding. And so with the
calendar example, and just a

498
00:26:19.660 --> 00:26:21.490
few lines of code, assuming
that your calendar is a

499
00:26:21.490 --> 00:26:24.580
nice API, you could create
a custom binding cold come

500
00:26:24.580 --> 00:26:27.550
the date for let's say,
and then on your Dom

501
00:26:27.550 --> 00:26:30.280
element, you can say candidates,
colon give the name of

502
00:26:30.280 --> 00:26:33.130
some property, which is a
date. And then whenever your

503
00:26:33.130 --> 00:26:36.190
property value changes, it will
call your custom binding, which

504
00:26:36.190 --> 00:26:40.030
can in turn, call the
API on your calendar element

505
00:26:40.270 --> 00:26:44.310
to set the new value
on your calendar. You can

506
00:26:44.310 --> 00:26:47.720
do. So it's just a
little adapter that says, Hey,

507
00:26:47.720 --> 00:26:49.640
knock out something. He's not
going to telling me something's

508
00:26:49.640 --> 00:26:51.950
changed. And I know where
to put it because I

509
00:26:51.950 --> 00:26:54.050
know how to call this
such and such a Yeah,

510
00:26:54.050 --> 00:26:56.240
I'm the investor as well.
So when your calendar raises

511
00:26:56.240 --> 00:26:59.330
an event, so the user
just changed the day. Then

512
00:26:59.570 --> 00:27:01.820
again, that's going to call
your binding and your binding.

513
00:27:01.820 --> 00:27:04.400
We'll do the reverse of
pushing the new data into

514
00:27:04.400 --> 00:27:06.200
the view model. So it's
two way. And once I've

515
00:27:06.200 --> 00:27:08.270
done that, I never think
about it again. Yeah, that's

516
00:27:08.270 --> 00:27:10.190
right. And it's all done
in a declarative way. Yeah,

517
00:27:10.250 --> 00:27:13.520
exactly. Okay. So I can
bring Jason back from the

518
00:27:13.520 --> 00:27:17.090
server. I can Mark up
with these data elements, my

519
00:27:17.120 --> 00:27:20.030
HTML input things as well
as my custom controls. Yep.

520
00:27:20.690 --> 00:27:22.790
But if I bring back
a big list of stuff,

521
00:27:23.540 --> 00:27:26.300
the list of tickets, yep.
How do I get that

522
00:27:26.300 --> 00:27:29.570
out onto the screen? How
do I make angle brackets

523
00:27:29.780 --> 00:27:32.750
HTML out of that? So
that's good that you mentioned

524
00:27:32.750 --> 00:27:34.880
that cause that's the sort
of fourth major feature of

525
00:27:34.910 --> 00:27:39.350
knockout, which is dealing with
templates. When you want to

526
00:27:39.440 --> 00:27:42.410
display stuff on screen, you
can just directly use a

527
00:27:42.410 --> 00:27:44.840
binding on an element to
say, make the text of

528
00:27:44.840 --> 00:27:48.740
this element equal this property.
And that's, that's really convenient

529
00:27:48.740 --> 00:27:50.990
in some cases, but in
other cases you want to

530
00:27:50.990 --> 00:27:54.290
emit loads of HTML, not
just, you know, a single

531
00:27:54.290 --> 00:27:56.720
property on a certain single
element. And in that case,

532
00:27:56.720 --> 00:28:00.980
you can use templates. And
for example, you can just

533
00:28:00.980 --> 00:28:04.190
start typing out some HTML.
That's just normal HTML. You

534
00:28:04.190 --> 00:28:06.710
put that inside a script
block block with an, an

535
00:28:06.710 --> 00:28:09.560
ID, which is the name
of the template that you

536
00:28:09.560 --> 00:28:12.320
want to use. And then
somewhere else, you link a,

537
00:28:12.410 --> 00:28:14.900
an element to that template
by using the binding called

538
00:28:14.900 --> 00:28:17.480
template. So you create a
dev, let's say, and you

539
00:28:17.480 --> 00:28:20.420
say template and give the
name of the template. And

540
00:28:20.420 --> 00:28:24.020
so knockout will then invoke
your template, get the HTML

541
00:28:24.020 --> 00:28:25.820
that comes out of that
and stuff. Enter the dev

542
00:28:25.850 --> 00:28:28.730
that you've just found it
too. And in the case

543
00:28:28.790 --> 00:28:32.300
of a list you can,
while you could, for one

544
00:28:32.300 --> 00:28:35.600
thing in your template, you
could have a, for each

545
00:28:35.600 --> 00:28:39.380
loop. So you could generate
a lot of you could

546
00:28:39.530 --> 00:28:42.410
generate repeating blocks of HTML
from inside your template. If

547
00:28:42.410 --> 00:28:46.190
you wanted to knockout supports
what it has a pluggable

548
00:28:46.190 --> 00:28:49.490
system for template engines in
theory, but in practice, the

549
00:28:49.490 --> 00:28:52.070
only one that people are
really using is the jQuery

550
00:28:52.070 --> 00:28:56.780
template engine. And that allows
you to do simple control

551
00:28:56.780 --> 00:29:01.700
flow statements like if else,
and for followups. So you

552
00:29:01.700 --> 00:29:03.830
can generate repeating blocks of
extra mile that way, if

553
00:29:03.830 --> 00:29:06.740
you want to. And that's
quite nice. And then whenever

554
00:29:06.830 --> 00:29:09.500
something in your model changes,
the template would be rear-ended

555
00:29:09.830 --> 00:29:12.680
and the whole thing would
be updated. And then there's

556
00:29:12.680 --> 00:29:15.020
a second option. You can
use that there's a special

557
00:29:15.020 --> 00:29:19.880
binding called foreach and that
renders your template multiple times

558
00:29:19.880 --> 00:29:22.430
once for each item in
an array. And so you

559
00:29:22.430 --> 00:29:24.050
might think that's just equivalent
to put an a for

560
00:29:24.050 --> 00:29:26.240
each loop inside the template.
And it kind of is,

561
00:29:26.240 --> 00:29:29.210
but it's got a performance
benefit, which is that when

562
00:29:29.210 --> 00:29:32.540
one of the things inside
your array changes, knockout is

563
00:29:32.540 --> 00:29:36.020
smart enough to just update
that just to the template

564
00:29:36.020 --> 00:29:38.150
for that one thing and
insert it at the right

565
00:29:38.150 --> 00:29:41.290
point in your Dom. It
doesn't have to run the

566
00:29:41.440 --> 00:29:44.160
template again for every single
thing in the array. So

567
00:29:44.160 --> 00:29:46.770
I'm looking through your documentation
and I see this simple

568
00:29:46.770 --> 00:29:50.370
grid. Yeah. That's an extended
example of that. Yep. A

569
00:29:50.430 --> 00:29:52.740
simple grid on, I don't
know if that one particularly

570
00:29:52.740 --> 00:29:55.920
works that way. It probably
does, But I mean, it's

571
00:29:55.920 --> 00:29:57.600
like, I want a table
of stuff and I want

572
00:29:57.600 --> 00:30:00.210
it to be as easy
as possible. Yeah. I could

573
00:30:00.210 --> 00:30:01.890
go and do all the
tables and the tr and

574
00:30:01.890 --> 00:30:03.960
the TD and all that
kind of stuff. But in

575
00:30:03.960 --> 00:30:05.730
this case, you're going to
do it for me. Yeah.

576
00:30:05.730 --> 00:30:07.890
So this, the simple grid
is an example of how

577
00:30:07.890 --> 00:30:10.800
you could create a plugin
on top of knockout. And

578
00:30:10.800 --> 00:30:13.890
so in this case, I've
created a great plugin that

579
00:30:13.890 --> 00:30:16.590
allows you to just take
a, an array and say,

580
00:30:16.590 --> 00:30:20.010
render this array of JavaScript
data into a grid like

581
00:30:20.370 --> 00:30:23.400
structure. And you say the
names of the columns and

582
00:30:23.460 --> 00:30:25.110
it, and the number of
items you want on each

583
00:30:25.110 --> 00:30:27.300
page. And it will just
give you a grid and

584
00:30:27.300 --> 00:30:30.330
it's quite simple, but you
could use that as a

585
00:30:30.330 --> 00:30:33.630
starting point to extend and
customize the templates for each

586
00:30:33.630 --> 00:30:36.120
row, if you wanted, or,
you know, give it all

587
00:30:36.120 --> 00:30:38.400
kinds of fancy features like
salting and such. Like, So

588
00:30:38.400 --> 00:30:40.260
in that example, in the
simple grid example, it's a

589
00:30:40.260 --> 00:30:43.170
plugin that's really very encapsulated
and I don't see much

590
00:30:43.170 --> 00:30:45.930
markup. And then the templating
example, like you gave where

591
00:30:45.930 --> 00:30:48.600
you could put like a,
for each or each tag

592
00:30:48.600 --> 00:30:51.870
around it using a templating
language, I have a lot

593
00:30:51.870 --> 00:30:54.690
more control, but it's a
little less reusable. Yeah, exactly.

594
00:30:54.840 --> 00:30:58.260
Yeah. Okay. Interesting. And one
of the things that I

595
00:30:58.260 --> 00:31:01.050
noticed when I was looking
at this there's this little

596
00:31:01.050 --> 00:31:03.210
example where you've got a
first name and a textbox

597
00:31:03.210 --> 00:31:05.130
and the last name and
a text box, and as

598
00:31:05.130 --> 00:31:09.520
you start typing and you
tab away, you then update

599
00:31:09.600 --> 00:31:13.110
a, a span where you
say, you know, hello world,

600
00:31:13.110 --> 00:31:15.660
you know, like first name
Scott, last name, Hanselman. Hello,

601
00:31:15.660 --> 00:31:18.570
Scott Hanselman. Yeah. What if
I'm putting evil things in

602
00:31:18.570 --> 00:31:20.850
there and script and Jason,
and I'm a bad person?

603
00:31:21.960 --> 00:31:24.690
Well, that's not a problem
for, for two reasons. One

604
00:31:24.690 --> 00:31:29.100
is that when, if you
assign the text of some

605
00:31:29.100 --> 00:31:32.340
element using the text bonding,
then it will use the

606
00:31:32.400 --> 00:31:36.570
correct HTML, Dom API for
assigning the text on the

607
00:31:36.570 --> 00:31:40.830
element, not the HTML content.
So it doesn't matter if

608
00:31:40.830 --> 00:31:42.600
there's ankle brackets in there.
They're just going to come

609
00:31:42.600 --> 00:31:44.880
out as literal and go
backwards. The second reason why

610
00:31:44.880 --> 00:31:49.170
that's not problem is that
if you want to type

611
00:31:49.170 --> 00:31:51.000
in malicious script on your
own page, that's only going

612
00:31:51.000 --> 00:31:54.780
to affect you. Cross site
scripting only becomes a problem.

613
00:31:54.960 --> 00:31:56.550
If you can make the
script to run on someone

614
00:31:56.550 --> 00:32:00.600
else's computer, not your own
and knock out is not

615
00:32:00.600 --> 00:32:04.110
making it any easier for
that to happen. So XSS

616
00:32:04.110 --> 00:32:07.860
is really a service side
issue that the server is

617
00:32:08.130 --> 00:32:11.490
emitting some markup to someone
who, and it's bad markup.

618
00:32:11.490 --> 00:32:15.240
And that person doesn't want
that bad markup. Sometimes when

619
00:32:15.240 --> 00:32:18.030
you, when, when one plays
with the samples and applications

620
00:32:18.030 --> 00:32:20.220
like this, and they start
poking around, they see the

621
00:32:20.220 --> 00:32:23.490
easy examples. Yeah. Like hello
world and stuff. And then

622
00:32:23.490 --> 00:32:26.400
you start getting into detailed
examples. You wonder if that

623
00:32:26.580 --> 00:32:29.400
open source project is going
to fall down as, cause

624
00:32:29.400 --> 00:32:35.400
everyone always feels like their
project, their business rule, their

625
00:32:35.400 --> 00:32:38.100
thing is special, you know,
but no, no, no. But

626
00:32:38.100 --> 00:32:42.980
at my company, right, everyone
has 12 phone numbers. Yeah.

627
00:32:43.610 --> 00:32:45.890
When you, and there's a
number of things that I

628
00:32:45.890 --> 00:32:48.320
think that people who are
just now getting into JavaScript

629
00:32:48.320 --> 00:32:52.610
and Ajax look at as
being virtually impossible, like you've

630
00:32:52.610 --> 00:32:54.950
got this really great example
here of a context editor

631
00:32:55.520 --> 00:32:58.310
where a contact can have
any number of phone numbers

632
00:32:58.700 --> 00:33:00.410
when things are kind of
one to many and very

633
00:33:00.410 --> 00:33:04.910
open-ended. Yep. How does knockout
handle things like that? And

634
00:33:04.910 --> 00:33:07.070
then when I'm done, how
do I get that data

635
00:33:07.100 --> 00:33:11.290
back to the server side?
Okay. Yeah. Well, I don't

636
00:33:11.530 --> 00:33:13.360
worry too much that people
are going to come up

637
00:33:13.360 --> 00:33:15.790
with use cases that are
too difficult for knockout because

638
00:33:16.030 --> 00:33:20.380
NACA is really just yet
another implementation of the MVVM

639
00:33:20.380 --> 00:33:23.050
pattern, which is quite well
established. And I didn't invent

640
00:33:23.050 --> 00:33:25.630
that I'm, you know, I'm
confident that that's used in,

641
00:33:26.230 --> 00:33:31.790
you know, very demanding situations.
So you're, you're basically saying

642
00:33:31.790 --> 00:33:34.030
that that it's so extensible
and so basic, and that

643
00:33:34.030 --> 00:33:36.010
the Pat it is the
pattern itself that would break

644
00:33:36.010 --> 00:33:39.820
down, not the library implementation
of it. I don't think

645
00:33:39.820 --> 00:33:42.280
there's a problem with the
partners. It's a very straightforward

646
00:33:42.280 --> 00:33:45.370
kind of concept. And I've,
I've not been able to

647
00:33:45.370 --> 00:33:48.130
think of a situation in
which it didn't apply. Having

648
00:33:48.130 --> 00:33:50.380
said that I do get
a lot of support questions

649
00:33:50.380 --> 00:33:52.660
from people saying, I'm trying
to do this kind of

650
00:33:52.660 --> 00:33:54.820
thing, and I'm basing it
on this example of yours

651
00:33:54.820 --> 00:33:57.640
and I've got this extra
requirement and I can't figure

652
00:33:57.640 --> 00:34:00.340
out how to do it.
And whenever that happens, my

653
00:34:00.340 --> 00:34:03.640
response is always well, let's
think about how you model

654
00:34:03.640 --> 00:34:07.180
that in your view model.
And the person is often

655
00:34:07.180 --> 00:34:09.760
thinking something like, Oh, I'm
not thinking about a view

656
00:34:09.760 --> 00:34:13.060
model. I'm thinking about running
some jQuery events on that

657
00:34:13.090 --> 00:34:17.680
element and then directly manipulating
the Dom. And I'm getting

658
00:34:17.680 --> 00:34:20.080
confused. And I always have
to say that you're going

659
00:34:20.080 --> 00:34:22.780
to have to stop thinking
about directly manipulating the dominant

660
00:34:22.780 --> 00:34:25.450
art hoc kind of uncontrolled
fashion. Because if you do

661
00:34:25.450 --> 00:34:27.730
that, it's not in sync
with your view model anymore.

662
00:34:28.030 --> 00:34:30.010
And then you don't really
have any clear idea of

663
00:34:30.010 --> 00:34:32.260
what your data is a
way of behavior behaviors. And

664
00:34:32.260 --> 00:34:35.500
so the more people get
into thinking in MVVM way,

665
00:34:35.500 --> 00:34:37.690
the simpler it becomes for
them, but it is quite

666
00:34:37.690 --> 00:34:40.390
a leap. If you are
used to a more sort

667
00:34:40.390 --> 00:34:42.850
of ad hoc way of
building a UI. I see.

668
00:34:43.120 --> 00:34:45.670
So what I'm hearing you
say, calling back to the

669
00:34:45.700 --> 00:34:48.220
discussion we had earlier about
making your own state system

670
00:34:48.220 --> 00:34:51.040
is that if you're used
to maintaining state and messing

671
00:34:51.040 --> 00:34:53.650
around and trying to keep
everything in sync, you're going

672
00:34:53.650 --> 00:34:56.560
to be going against a
system whose very existence is

673
00:34:56.560 --> 00:35:00.010
to make sure that everything's
in sync. Exactly. Yes. And

674
00:35:00.010 --> 00:35:03.250
if you start duplicating what
it does, then, you know,

675
00:35:03.280 --> 00:35:04.990
you've kind of lost the
benefit of it because the

676
00:35:04.990 --> 00:35:07.550
whole point is that it
does that for you And

677
00:35:07.550 --> 00:35:10.510
why I'm noticing also just
occasionally as I moved my

678
00:35:10.510 --> 00:35:14.110
way through your examples that
there are a little utilities

679
00:35:14.110 --> 00:35:17.740
and things I'm not necessarily
familiar with value has mutated

680
00:35:18.610 --> 00:35:21.880
remove a array, remove item.
Are there some, yeah. Some

681
00:35:21.880 --> 00:35:24.430
things that you've put in
there, some syntactic sugar that

682
00:35:24.430 --> 00:35:26.320
makes it a little easier
to do these kinds. Yeah.

683
00:35:26.320 --> 00:35:29.530
There's a bunch of utility
methods in there that simplify

684
00:35:29.530 --> 00:35:32.620
working with a raise. So
they, for example, in Java

685
00:35:32.620 --> 00:35:36.820
script, there's no straightforward way
of removing a particular object

686
00:35:36.820 --> 00:35:40.230
from array. You have to
somehow find the index of

687
00:35:40.230 --> 00:35:42.300
that object and then run
a splice on it. And

688
00:35:42.300 --> 00:35:44.880
it's quite difficult to remember
how to do that because,

689
00:35:45.090 --> 00:35:47.910
you know, <inaudible>, before it
doesn't even have an index

690
00:35:47.910 --> 00:35:50.460
of method and then the
syntax for splice is really

691
00:35:50.460 --> 00:35:53.040
hard to remember. So for
example, I've just created a,

692
00:35:53.080 --> 00:35:56.460
a remove method that will
just literally find and remove

693
00:35:56.460 --> 00:35:57.990
an object. And that's really
useful in a lot of

694
00:35:57.990 --> 00:36:00.960
cases. So there's a whole
bunch of things like that,

695
00:36:01.230 --> 00:36:03.870
but that's not really the
point of knockout that's that

696
00:36:03.870 --> 00:36:07.380
was mainly to make my
implementation of it simpler. And

697
00:36:07.380 --> 00:36:10.050
it just so happens that
those same methods happen to

698
00:36:10.050 --> 00:36:12.330
be useful when you're writing
your own code as well.

699
00:36:12.660 --> 00:36:17.250
But it's not primarily about
a system for processing grays

700
00:36:17.250 --> 00:36:19.530
and day structures. There are
other libraries that are better

701
00:36:19.530 --> 00:36:22.920
for that, like underscore JS
or prototype JS. That's what

702
00:36:22.920 --> 00:36:25.050
they specialize in. And so
if you're going to be

703
00:36:25.050 --> 00:36:29.220
doing a lot of low
level array, manipulation and object

704
00:36:29.220 --> 00:36:31.830
graph manipulation, you might want
to combine it with one

705
00:36:31.830 --> 00:36:34.220
of those. Do you know
of any other, I mean,

706
00:36:34.220 --> 00:36:38.270
what's, who's knockouts competition. Are
there any other MVVM patterns

707
00:36:38.270 --> 00:36:39.860
like this out there? I
mean, I know that there

708
00:36:39.860 --> 00:36:43.790
is some discussion of different
live data, things that Microsoft

709
00:36:43.790 --> 00:36:46.520
had put some implementation of
some kind of live data

710
00:36:46.520 --> 00:36:51.260
sinking out there. Yeah. This
there's two other libraries that

711
00:36:51.260 --> 00:36:55.820
I think overlap somewhat. One
of them is from Microsoft.

712
00:36:55.820 --> 00:37:00.050
There's the J query data
linking proposal, which I think

713
00:37:00.050 --> 00:37:02.270
has gone beyond being a
proposal. Now it's kind of

714
00:37:02.270 --> 00:37:07.370
a, a real jQuery plugin.
And that does a part

715
00:37:07.370 --> 00:37:10.340
of what narco knockout does.
It gives you a way

716
00:37:10.400 --> 00:37:15.590
of doing a live link
between some JavaScript model data

717
00:37:16.400 --> 00:37:21.410
and, and some parts of
your HTML. So that's a,

718
00:37:21.410 --> 00:37:23.300
that's covering a part of
it, but it doesn't deal

719
00:37:23.300 --> 00:37:26.270
with things like dependency tracking.
So if you've got a

720
00:37:26.270 --> 00:37:29.750
sophisticated model where property eight
depends on B, which depends

721
00:37:29.750 --> 00:37:32.810
on see, and this, and
this is more common than

722
00:37:32.810 --> 00:37:34.430
it sounds, you might think.
I, I don't have to

723
00:37:34.430 --> 00:37:36.680
compute lots of stuff, but
if you just think, Oh,

724
00:37:36.680 --> 00:37:39.800
even you've just got a
selection index. And then from

725
00:37:39.800 --> 00:37:43.040
that, you want to compute
which item is selected. And

726
00:37:43.040 --> 00:37:44.930
then somewhere else you want
to display a property of

727
00:37:44.930 --> 00:37:47.990
the selected item. This is
all dependencies of the index

728
00:37:47.990 --> 00:37:50.750
or the thing that's selected.
And so knock out handles

729
00:37:50.750 --> 00:37:53.900
that in a really straightforward
way. I'm not sure exactly

730
00:37:53.900 --> 00:37:55.970
what the best way to
do that with the Microsoft

731
00:37:55.970 --> 00:37:59.000
data, linking plugin, as it
might have a good way

732
00:37:59.000 --> 00:38:01.640
of dealing with that. But,
you know, I'm not sure.

733
00:38:01.880 --> 00:38:03.670
Do you think that you
would integrate, like if just

734
00:38:03.670 --> 00:38:05.780
this becomes a jQuery official
thing, do you bring that

735
00:38:05.780 --> 00:38:07.460
in? I mean, when you're,
when you're a person out

736
00:38:07.460 --> 00:38:10.130
there who is making a
library where, like you said,

737
00:38:10.160 --> 00:38:14.090
you know, there's some intersections,
there's not a clear knockout

738
00:38:14.090 --> 00:38:18.800
JS does this and this,
you know, Fu JavaScript does

739
00:38:18.800 --> 00:38:20.470
the exact same thing. And
you guys are like the

740
00:38:20.470 --> 00:38:23.960
VHS and beta. No, no,
it's not at all. I

741
00:38:23.960 --> 00:38:26.210
don't want to reproduce what
someone else is doing. If,

742
00:38:26.330 --> 00:38:28.070
if, if there are two
lipids that do the same

743
00:38:28.070 --> 00:38:30.890
thing, I'd prefer the bat.
I want to win. And

744
00:38:30.890 --> 00:38:33.770
the other one to go
away and I have no

745
00:38:33.980 --> 00:38:36.670
personal interest in maintaining just
for the sake of it.

746
00:38:37.390 --> 00:38:41.680
But knock out is, is
a particular way of following

747
00:38:41.680 --> 00:38:45.580
the MVVM pattern and doing
the whole automatic declarative bindings

748
00:38:45.580 --> 00:38:50.020
with dependency tracking very much
so of, if you fit

749
00:38:50.020 --> 00:38:52.480
into the system, it's going
to work really nicely for

750
00:38:52.480 --> 00:38:55.240
you. If you don't fit
into the system, if you,

751
00:38:55.240 --> 00:38:57.790
if you're not willing to
do MVVM, then it's not

752
00:38:57.790 --> 00:38:59.890
going to work so nicely
for you. So I've got

753
00:38:59.890 --> 00:39:03.670
very opinionated framework here that
is going to work great

754
00:39:04.240 --> 00:39:07.660
if you follow it. Whereas
the, the jQuery data linking

755
00:39:08.380 --> 00:39:10.690
tool is, is a more
of a low level thing.

756
00:39:11.050 --> 00:39:14.410
And I don't think that
specifically guide you to structure

757
00:39:14.410 --> 00:39:17.470
your client side code in
one particular way, rather than

758
00:39:17.470 --> 00:39:19.600
other, I don't know. I've
not seen any guidance about

759
00:39:19.600 --> 00:39:21.990
that. Cool. Well, I like
opinionated. I think we can

760
00:39:21.990 --> 00:39:24.510
all agree that jQuery is
added a lot of opinionated

761
00:39:25.650 --> 00:39:30.210
thinking around Jason and certainly
another opinionated JavaScript library as

762
00:39:30.210 --> 00:39:32.430
a welcome, a welcome thing.
Yeah. And I should also

763
00:39:32.430 --> 00:39:33.780
just mention at this point,
the other one of the

764
00:39:33.780 --> 00:39:36.870
two libraries that's quite similar
is a backbone JS you

765
00:39:36.870 --> 00:39:40.500
might want to check out.
And that is by the

766
00:39:40.890 --> 00:39:43.470
guy who created coffee script.
I can't remember his name

767
00:39:43.470 --> 00:39:46.380
right now, unfortunately, but it's
a very smart guy. And

768
00:39:46.800 --> 00:39:52.350
he's created this, a JavaScript
library that also links the

769
00:39:52.350 --> 00:39:56.370
HTML Dom with every model.
So it's quite similar, but

770
00:39:56.370 --> 00:39:59.310
the, one of the key
differences there is that backbone

771
00:39:59.310 --> 00:40:03.840
JS has a very rich
kind of model systems. So

772
00:40:04.050 --> 00:40:07.200
you're expected direct to derive
your classes from a particular

773
00:40:07.440 --> 00:40:10.980
base class inside a backbone
JS, and then follow very

774
00:40:10.980 --> 00:40:13.770
specific conventions about how you
load and save that data

775
00:40:13.800 --> 00:40:16.200
with your server. So it's
kind of all about the

776
00:40:16.200 --> 00:40:19.770
model there, and it's got
very sort of basic support

777
00:40:19.770 --> 00:40:23.340
for then binding that onto
your HTML. Not as much

778
00:40:23.340 --> 00:40:27.540
as whereas knockout is dealing
with very, very rich UI

779
00:40:27.540 --> 00:40:31.080
bindings, very declarative template oriented
and so on, but knock

780
00:40:31.080 --> 00:40:33.600
out doesn't really have very
much opinion about how you're

781
00:40:33.600 --> 00:40:35.910
going to load and save
data from the server. That's

782
00:40:35.910 --> 00:40:39.030
kind of up to you
depending on what service. All

783
00:40:39.030 --> 00:40:41.430
right. Fantastic. Well, thank you,
Steve so much for chatting

784
00:40:41.430 --> 00:40:47.190
with us today. Folks can
see all of this@knockoutjs.com and

785
00:40:47.400 --> 00:40:50.940
you're now Steve essay at
Microsoft. Thank you very much.

786
00:40:51.300 --> 00:40:54.240
This has been another episode
of Hansel minutes. We'll see

787
00:40:54.240 --> 00:40:55.080
you again Next week.

