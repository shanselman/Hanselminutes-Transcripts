WEBVTT FILE

1
00:00:00.720 --> 00:00:03.870
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.870 --> 00:00:06.840
they make the show possible.
Today's show is sponsored by

3
00:00:06.840 --> 00:00:11.040
developer express, become a UI
superhero with dev express controls

4
00:00:11.040 --> 00:00:15.540
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.930 --> 00:00:20.010
by leveraging your existing knowledge,
you can build next generation

6
00:00:20.040 --> 00:00:24.120
touch enabled solutions for tomorrow,
you can download your free

7
00:00:24.240 --> 00:00:50.030
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
It's Hansel minutes, A weekly

8
00:00:50.030 --> 00:00:54.500
discussion with web developer and
technologist Scott Hanselman. This is

9
00:00:54.500 --> 00:00:59.720
Lawrence Ryan announcing show number 516.
In this episode, Scott talks

10
00:00:59.720 --> 00:01:03.920
with Lauren tan, a senior
developer at dockyard about the

11
00:01:03.920 --> 00:01:11.690
Ember framework. Hi, this is
Scott Hanselman. This is another

12
00:01:11.690 --> 00:01:15.620
episode of Hanselminutes today. I'm
talking with Lauren tan. She's

13
00:01:15.620 --> 00:01:18.770
a senior developer at dockyard
and an edit. I'm an

14
00:01:18.770 --> 00:01:21.920
expert on Ember. How are
you? I'm very good. Thank

15
00:01:21.920 --> 00:01:26.060
you. You did a great
talk at Amber cough about

16
00:01:26.150 --> 00:01:30.170
ambitious UX for ambitious apps.
I really liked that word

17
00:01:30.170 --> 00:01:34.070
ambitious. Like what, what made
you pick that word? So

18
00:01:34.070 --> 00:01:37.790
I've been working with Amber
as a technology for almost

19
00:01:37.790 --> 00:01:41.270
two years now. And what
really drew me to the

20
00:01:41.270 --> 00:01:46.280
framework from the beginning was
it's a philosophy of convention

21
00:01:46.280 --> 00:01:50.360
over configurations and it's really,
really strong community. So the

22
00:01:50.360 --> 00:01:53.750
benefits of using a framework
like Amber mean that you

23
00:01:53.750 --> 00:01:58.760
no longer need to work
with a regular web development,

24
00:01:58.760 --> 00:02:02.780
like in a very imperative
fashion, because in the past,

25
00:02:02.780 --> 00:02:07.460
you know, with web development,
it was very much where

26
00:02:07.460 --> 00:02:10.910
you were playing around with
elements and the Dom. You

27
00:02:10.910 --> 00:02:13.640
had to think about event
listeners and stuff like that.

28
00:02:13.640 --> 00:02:16.370
And it was very imperative
and not at all a

29
00:02:16.370 --> 00:02:21.920
very enjoyable or economic developer
ergonomics. Hmm. Ergonomics is another

30
00:02:21.920 --> 00:02:24.050
interesting word. You know, I
think about ergonomics in the

31
00:02:24.380 --> 00:02:27.620
context of like being friendly
to my wrist or to

32
00:02:27.620 --> 00:02:29.390
my, to my back. But
what do we mean when

33
00:02:29.390 --> 00:02:31.310
we think about ergonomics in
the context of how it

34
00:02:31.310 --> 00:02:34.790
feels to use a development
platform? So with Ember, it'd

35
00:02:34.790 --> 00:02:36.650
be pretty much takes away
a lot of the overhead

36
00:02:36.650 --> 00:02:40.070
and the, the not, I
would say the nitty gritty

37
00:02:40.130 --> 00:02:42.890
positions that don't really add
any value to the product

38
00:02:42.890 --> 00:02:48.340
you're building. And back to
your first question, this, this,

39
00:02:48.470 --> 00:02:51.320
this, or economics, and the
fact that the community is

40
00:02:51.320 --> 00:02:53.390
so strong and the tooling
is so strong. And Amber

41
00:02:53.780 --> 00:02:56.900
that really allows you to
focus on building ambitious user

42
00:02:56.900 --> 00:02:59.800
experiences. That aren't just about,
you know, like displaying a

43
00:02:59.800 --> 00:03:05.050
form, reacting to stuff like
that. It's very much about,

44
00:03:05.410 --> 00:03:08.890
you know, bringing the user
experience to a level that

45
00:03:09.430 --> 00:03:13.560
typically is seen in a
desktop application. I think that

46
00:03:13.620 --> 00:03:16.800
like, even, even in desktop
apps, I think we find

47
00:03:16.800 --> 00:03:20.100
ourselves so often, like you
said, you said the word

48
00:03:20.100 --> 00:03:23.040
imperative, you know, you click
a drop down and you

49
00:03:23.040 --> 00:03:26.010
set some bullying somewhere, some
flag that you have to

50
00:03:26.010 --> 00:03:28.290
then maintain the state of,
and then your app gets

51
00:03:28.290 --> 00:03:30.600
bigger and bigger and bigger
and dependent on all these

52
00:03:30.600 --> 00:03:33.330
flags. And you're spending a
lot of time juggling state

53
00:03:33.900 --> 00:03:35.970
and not thinking about whether
the experience is a good

54
00:03:35.970 --> 00:03:39.810
one. Correct. So Amber basically
tries to get as much

55
00:03:40.110 --> 00:03:42.660
out of the way as
possible so that, you know,

56
00:03:42.660 --> 00:03:46.200
you can focus on not
trying to manipulate that you

57
00:03:46.200 --> 00:03:50.160
mentioned like worrying about internal
state, but instead Amber has

58
00:03:50.160 --> 00:03:54.930
a very strong philosophy on
data flow that lets you

59
00:03:54.930 --> 00:03:58.350
build a very reactive user
interfaces that you won't normally

60
00:03:58.350 --> 00:04:03.660
get with a vanilla JavaScript
or jQuery application. And in

61
00:04:03.660 --> 00:04:08.670
my talk, I described a
reactive user interfaces as things

62
00:04:08.670 --> 00:04:11.130
that are, I guess, the
best analogy for that would

63
00:04:11.130 --> 00:04:14.550
be something like an Excel
spreadsheet, where you have two

64
00:04:14.550 --> 00:04:18.570
cells, one cell, the third
cell being a function that,

65
00:04:19.350 --> 00:04:21.270
you know, adds the value
of the first cell with

66
00:04:21.270 --> 00:04:24.150
the second cell. Now it's
reactive in the sense that

67
00:04:24.150 --> 00:04:26.430
if you update the value
in the first input, you

68
00:04:26.430 --> 00:04:29.340
know, it updates the function
as well. If it does

69
00:04:29.340 --> 00:04:32.190
some of those two selves,
you don't have to, you

70
00:04:32.190 --> 00:04:34.200
don't have to think about
all right, now that this

71
00:04:34.440 --> 00:04:37.860
thing has changed on this
one Dom element. I need

72
00:04:37.860 --> 00:04:41.490
to go update the next
thing. And then that, which

73
00:04:41.490 --> 00:04:44.520
is, it's just a much
more imperative approach with Amber,

74
00:04:44.520 --> 00:04:48.090
with data binding with data,
for one way, data flow,

75
00:04:48.150 --> 00:04:53.310
you can extract these costs
away. And basically building reactive

76
00:04:53.310 --> 00:04:56.940
UI becomes, I wouldn't say
trivial, but it becomes a

77
00:04:56.940 --> 00:05:00.420
lot easier. And it's something
that's, if it's good for

78
00:05:00.420 --> 00:05:02.820
the developer, you know, if
you're more likely to enjoy

79
00:05:02.820 --> 00:05:04.920
working on the application and
build these features that your

80
00:05:04.920 --> 00:05:08.400
users want. Yeah. It not
only makes it possible, but

81
00:05:08.520 --> 00:05:10.560
like, like it makes it
possible. Like, I wonder how

82
00:05:10.560 --> 00:05:12.540
you would write something like
that without some of the

83
00:05:12.540 --> 00:05:15.000
concepts behind reactive programming, I
think it would become quite

84
00:05:15.000 --> 00:05:17.070
a tangled mess to do
it, you know, the old

85
00:05:17.070 --> 00:05:21.900
fashioned way. Yeah, exactly. Definitely
agreed with that. So this

86
00:05:21.900 --> 00:05:25.770
idea of, of reactive programming,
isn't particularly a new one,

87
00:05:25.770 --> 00:05:28.830
but is the way that
Amber thinks about it, a

88
00:05:29.010 --> 00:05:35.280
new, No, I wouldn't say
embers philosophy on reactive user-friendly

89
00:05:35.490 --> 00:05:39.720
interfaces is new. In fact,
Amber, one of the core

90
00:05:39.720 --> 00:05:41.550
strengths of Ember is that
it draws a lot of

91
00:05:41.550 --> 00:05:45.330
inspiration from a lot of
the other popular frameworks. For

92
00:05:45.330 --> 00:05:50.160
example, react when it first
was launched, everyone was very

93
00:05:50.160 --> 00:05:54.000
excited about it's virtual Dom,
the think strategy, which essentially

94
00:05:54.000 --> 00:05:58.760
means a new compact react
builds up a virtual representation

95
00:05:58.790 --> 00:06:01.940
of the Dom, all the
elements on the screen. And

96
00:06:01.940 --> 00:06:04.310
then it compares that with
the actual Dom and only

97
00:06:04.310 --> 00:06:08.360
makes the changes that are
necessary. So this, this gives

98
00:06:08.360 --> 00:06:12.410
you a lot of performance
and speed, and it's also

99
00:06:12.410 --> 00:06:16.910
quite a nice experience writing
code like that. And one

100
00:06:16.910 --> 00:06:19.070
of the core strengths of
Ember is that because the

101
00:06:19.070 --> 00:06:22.430
tooling is so strong and
there's this whole concept of

102
00:06:22.430 --> 00:06:27.320
consent convention of a configuration
in, in every one point

103
00:06:27.380 --> 00:06:31.160
once at one point 13,
we actually changed the rendering

104
00:06:31.160 --> 00:06:35.510
engine from the old school
string based templating engine into

105
00:06:35.750 --> 00:06:37.850
something very similar to react.
And this was all done

106
00:06:38.600 --> 00:06:43.280
with complete 100% backwards compatibility.
No other framework can actually

107
00:06:44.090 --> 00:06:47.120
claim, make such a claim
where it, you know, all

108
00:06:47.120 --> 00:06:49.820
the releases are a hundred
percent backwards compatible. There is

109
00:06:49.820 --> 00:06:53.420
a very clear commitment to
semantic versioning in a very

110
00:06:53.420 --> 00:06:56.920
clear path for upgrading. Wow.
So they like these swapped

111
00:06:56.920 --> 00:07:00.710
out of fundamental, you know,
organ or body part and

112
00:07:01.060 --> 00:07:03.580
put it back in and
while the patient was still

113
00:07:03.580 --> 00:07:07.240
alive and it still works
and nobody noticed, Yeah. So

114
00:07:07.240 --> 00:07:08.680
a lot of it, like
one of the complaints I

115
00:07:08.680 --> 00:07:10.870
hear a lot with Ember
is that it's such a

116
00:07:10.870 --> 00:07:13.750
monolithic framework, you know, like,
Oh, it's so big, but

117
00:07:13.760 --> 00:07:17.680
the truth is Amber is
big because it has already

118
00:07:17.680 --> 00:07:20.320
made a lot of the
important decisions for you. If

119
00:07:20.320 --> 00:07:22.540
you were to build your
own ad hoc framework, which

120
00:07:22.570 --> 00:07:27.130
is something I probably wouldn't
advise you would have to

121
00:07:27.130 --> 00:07:29.590
spend before, you could even
write a line of code,

122
00:07:29.950 --> 00:07:32.860
you have to spend like
weeks thinking about, Oh, what

123
00:07:32.860 --> 00:07:35.260
kind of build pipeline should
I use? Should I use

124
00:07:35.260 --> 00:07:38.110
promises? Should I use this
library? Should I use that

125
00:07:38.110 --> 00:07:40.660
library? And you end up,
you end up spending so

126
00:07:40.660 --> 00:07:43.720
much time writing glue code
for your free application. And

127
00:07:43.720 --> 00:07:47.080
then now you have to
maintain your own framework instead

128
00:07:47.080 --> 00:07:50.860
of having a tool like
Ember, which lets you basically

129
00:07:50.860 --> 00:07:54.100
outsource those decisions to the
community. And you can always

130
00:07:54.100 --> 00:07:57.190
be sure that those decisions
are not taken lightly. They're

131
00:07:57.190 --> 00:08:01.060
all good positions and group
components to the framework. So

132
00:08:01.060 --> 00:08:02.830
it sounds like you're a
fan of what we would

133
00:08:02.830 --> 00:08:05.580
call an opinionated framework. Like
you want an, a, a

134
00:08:05.590 --> 00:08:07.930
framework to, you know, kind
of slam its fist on

135
00:08:07.930 --> 00:08:09.940
the ground and say, I
think this is important. We're

136
00:08:09.940 --> 00:08:12.880
doing it like this. As
opposed to frameworks that are

137
00:08:12.910 --> 00:08:14.980
really just collections of functions
that you can use any

138
00:08:14.980 --> 00:08:17.320
way that makes you happy.
Like there's value in opinion,

139
00:08:18.010 --> 00:08:20.810
There's only value in opinion.
But I would also say

140
00:08:20.810 --> 00:08:23.020
like, you know, it's important
to choose the right tool

141
00:08:23.020 --> 00:08:26.020
for the job. And Bruce
is really great for building

142
00:08:26.050 --> 00:08:30.370
like in my talk ambitious
applications where con like common

143
00:08:30.370 --> 00:08:34.270
use cases are dashboards or,
you know, really big applications

144
00:08:34.270 --> 00:08:38.920
that aren't just marketing websites.
Those sorts of use cases

145
00:08:38.920 --> 00:08:43.780
are really great for Amber.
So do you think that

146
00:08:43.810 --> 00:08:47.500
I heard someone say once
that, that, you know, in

147
00:08:47.500 --> 00:08:49.660
this kind of like this
Epic battle between Ember and

148
00:08:49.660 --> 00:08:51.640
angular, you know, there's always
this perception that like there

149
00:08:51.640 --> 00:08:53.650
can be only one when
there really can be actually

150
00:08:53.650 --> 00:08:58.170
many that, that Ember is
finding a lot of people

151
00:08:58.170 --> 00:09:00.390
excited about it inside of
enterprises. And like you said,

152
00:09:00.390 --> 00:09:03.660
dashboards and things like that.
So it may be bigger

153
00:09:03.660 --> 00:09:06.000
than we think it is.
It's just not that large,

154
00:09:06.000 --> 00:09:08.430
large public websites are using
it as much as, or

155
00:09:08.430 --> 00:09:10.620
maybe it's not as loud
as some of the other

156
00:09:10.620 --> 00:09:14.000
frameworks. Do you find that
to be the case? I

157
00:09:14.000 --> 00:09:17.330
would actually disagree with that.
So unknown to a lot

158
00:09:17.330 --> 00:09:21.260
of people actually Ember works
on a huge amount of

159
00:09:21.260 --> 00:09:24.050
web public facing websites. I
mean, I could just list

160
00:09:24.050 --> 00:09:27.200
a few. Some of the
biggest ones are Twitch Twitch,

161
00:09:27.530 --> 00:09:29.900
which is like a streaming
site for video games that

162
00:09:29.990 --> 00:09:34.370
runs on a Ember application
at which phases users, vine,

163
00:09:34.640 --> 00:09:37.880
which is an application. Yeah.
Find the web app for

164
00:09:37.880 --> 00:09:42.020
vine is also built on
Ember. Yahoo uses Amber internally

165
00:09:42.050 --> 00:09:47.480
Heroku, which is the platform
as a service company. They

166
00:09:47.480 --> 00:09:50.870
also use Amber for their
dashboards. And there's so many

167
00:09:50.870 --> 00:09:57.920
more Apple, Apple music is
actually an umber, Travis bustle

168
00:09:58.040 --> 00:10:01.730
ghost that flicks. Wow. I
could name a whole list

169
00:10:01.730 --> 00:10:05.240
of big, big companies that
use Denver. So why do

170
00:10:05.240 --> 00:10:07.880
you think that there's that
perception that, that embers like,

171
00:10:07.910 --> 00:10:11.090
you know, second or, or
not first, you know, in

172
00:10:11.090 --> 00:10:12.770
the, in the, in the
contest here or is there

173
00:10:12.770 --> 00:10:14.270
really a contest? Is it,
is it good to, we

174
00:10:14.270 --> 00:10:16.280
should have five or six
really good frameworks and we

175
00:10:16.280 --> 00:10:20.240
just pick the ones. I
definitely agree. I mean, react

176
00:10:20.240 --> 00:10:25.490
alone has given inverse so
much opportunity for across idea.

177
00:10:25.490 --> 00:10:29.390
Pollination angler has, you know,
like all the frameworks basically

178
00:10:29.390 --> 00:10:32.780
apart from each other. And
this has only meant competition

179
00:10:32.780 --> 00:10:36.290
is good with, with the
frameworks. Some people are a

180
00:10:36.290 --> 00:10:38.900
bit turned off by all
these frameworks coming up and

181
00:10:39.080 --> 00:10:42.200
every day you'll see someone
write another JavaScript, hype fatigue,

182
00:10:42.230 --> 00:10:44.840
post like, Oh, there's so
many friends, so much stuff

183
00:10:44.870 --> 00:10:47.060
to do with JavaScript. I'm
overwhelmed. I don't know what

184
00:10:47.060 --> 00:10:49.730
to do. But the reality
is Ember is so popular

185
00:10:49.730 --> 00:10:53.120
because it takes the best
practices from all these different

186
00:10:53.120 --> 00:10:56.150
approaches and, and integrates them
in such a way that

187
00:10:56.180 --> 00:10:59.210
you can use them without
having to, you know, cobble

188
00:10:59.210 --> 00:11:03.020
together your own ad hoc
framework. So I would say

189
00:11:03.020 --> 00:11:05.960
that Amber is a, it's
just a really great tool

190
00:11:05.990 --> 00:11:11.220
for building ambitious applications. Once
again, You know, I, I

191
00:11:11.240 --> 00:11:13.670
have a talk I do
on JavaScript. And I talk

192
00:11:13.670 --> 00:11:15.620
about how funny, I think
it is that when someone

193
00:11:15.620 --> 00:11:17.690
does a startup, that the
first thing they're going to

194
00:11:17.690 --> 00:11:19.460
do is say, all right,
we're gonna, we're going to

195
00:11:19.460 --> 00:11:22.070
make an Uber compete, but
first we need to write

196
00:11:22.070 --> 00:11:26.390
our own JavaScript framework from
scratch. Why do people feel

197
00:11:26.390 --> 00:11:29.180
the need to do that?
I think, I think it's

198
00:11:29.180 --> 00:11:33.260
fundamentally quite an exciting thing
to build your own framework.

199
00:11:33.680 --> 00:11:36.200
It's it's, it feels a
lot, it feels very exciting

200
00:11:36.200 --> 00:11:37.640
as a developer. It's like,
Oh, you know, I'm going

201
00:11:37.640 --> 00:11:40.730
to build this awesome thing
that I will maintain and

202
00:11:40.730 --> 00:11:42.290
it's going to be perfect
because it's going to be

203
00:11:42.290 --> 00:11:45.860
made up of micro libraries.
I mean, there there's definitely

204
00:11:45.860 --> 00:11:48.470
benefits to that, but at
the same time, it also

205
00:11:48.470 --> 00:11:52.130
means that, you know, now
you're the sole source of

206
00:11:52.160 --> 00:11:55.060
maintaining that ad framework. And
I think a lot of

207
00:11:55.060 --> 00:11:58.150
people get too excited with
the thoughts of, Oh, which

208
00:11:58.180 --> 00:12:00.790
parts of which micro libraries
should I use? Should I

209
00:12:00.790 --> 00:12:04.270
use this routing framework? Should
I use a promises diary?

210
00:12:04.270 --> 00:12:07.330
Which library should I use?
You, you get so caught

211
00:12:07.330 --> 00:12:11.170
up in all the hype
with new technologies, like react

212
00:12:11.170 --> 00:12:14.410
and Redux and flux, and
like a million other new

213
00:12:14.410 --> 00:12:17.470
things, all the shiny things
that you kind of lose

214
00:12:17.470 --> 00:12:20.290
track. And you get too
caught up with just trying

215
00:12:20.290 --> 00:12:24.520
to make a really cool
framework. But then that comes

216
00:12:24.520 --> 00:12:27.340
at a cost of ignoring
that your actual application, you

217
00:12:27.340 --> 00:12:30.730
know, you spend weeks deciding
on a bill to, without

218
00:12:30.730 --> 00:12:32.980
actually writing a line of
business code, which you should

219
00:12:32.980 --> 00:12:35.620
be focusing as a startup,
right? That's the core thing

220
00:12:35.620 --> 00:12:38.710
you want to prove, not
really about this framework. You

221
00:12:38.710 --> 00:12:42.570
can cobble together. Do you,
so you, you mentioned fatigue.

222
00:12:42.930 --> 00:12:45.900
I've also had people talk
about like library fatigue, like

223
00:12:45.900 --> 00:12:48.120
in order to get, you
know, before I can get

224
00:12:48.120 --> 00:12:51.330
my text boxes up on
the screen, I brought in,

225
00:12:51.690 --> 00:12:55.050
you know, 50 libraries or
150 libraries from, from NPM,

226
00:12:55.410 --> 00:12:57.750
you know, does, does an
Ember app, does it have

227
00:12:57.750 --> 00:13:00.990
to be a huge pile
of libraries or can you

228
00:13:00.990 --> 00:13:03.870
get a lot done with,
with minimal, you know, third

229
00:13:03.870 --> 00:13:08.730
party stuff? So Amaris I
mentioned earlier that Ember has

230
00:13:08.730 --> 00:13:11.400
a really strong committee in
tooling. One of these tools

231
00:13:11.400 --> 00:13:14.670
is called Ember CLI, which
is the Ember command line

232
00:13:14.970 --> 00:13:18.840
interface tool. That's a really
great tool because it, it

233
00:13:18.870 --> 00:13:23.580
also the CLI also adheres
to this convention of a

234
00:13:23.580 --> 00:13:27.720
configuration philosophy, just like the
framework, which means that as

235
00:13:27.720 --> 00:13:31.560
a result, we actually have
ad-ons, that can be very

236
00:13:31.560 --> 00:13:34.860
easily installed into an application.
So no longer do you

237
00:13:34.860 --> 00:13:37.410
have to like, look for
J Cray plugin and then

238
00:13:37.580 --> 00:13:40.260
figure out how to integrate
it into your application with

239
00:13:40.320 --> 00:13:44.220
Ember CLI. And it's huge
if I'm not wrong, this

240
00:13:44.250 --> 00:13:47.550
almost 2000 of these add
ons currently, right. Outright. Now

241
00:13:47.880 --> 00:13:50.220
I've written a few of
them as well. The benefit

242
00:13:50.220 --> 00:13:52.350
of that is, you know,
you can share code so,

243
00:13:52.410 --> 00:13:57.750
so much quicker and you
can basically rely on the

244
00:13:57.750 --> 00:14:00.750
community for certain solutions. I
mean, you don't, you don't

245
00:14:00.750 --> 00:14:02.910
always want to write the
same thing over and over

246
00:14:02.910 --> 00:14:07.830
again, sometimes it's better to,
let's say outsource that kind

247
00:14:07.830 --> 00:14:12.150
of decision making to a
trusted libraries that have established

248
00:14:12.150 --> 00:14:15.330
like really good practices for
doing certain things. For example,

249
00:14:15.330 --> 00:14:19.470
file uploads or authentication. These
are things Amber is really,

250
00:14:19.470 --> 00:14:22.830
really strong at. Hmm. So
you talk about being, you

251
00:14:22.830 --> 00:14:25.080
know, being trusted and being
reliable and kind of like

252
00:14:25.530 --> 00:14:28.650
letting the systems do their
job, but at the same

253
00:14:28.650 --> 00:14:32.490
time, it seems like everything
everything's in beta, it seems

254
00:14:32.490 --> 00:14:34.470
like, I don't know, I'm
not saying specifically about Amber,

255
00:14:34.470 --> 00:14:37.380
but it just feels like
on the internet today, everything's

256
00:14:37.980 --> 00:14:41.070
0.9, you know, even nodes
spend a lot of time,

257
00:14:41.070 --> 00:14:44.670
not all kind of 1.0,
like Ember CLI uses a

258
00:14:44.670 --> 00:14:49.140
thing called broccoli for the
asset pipeline, but broccoli hasn't

259
00:14:49.140 --> 00:14:51.530
that been beta forever. And
aren't they very to say,

260
00:14:51.530 --> 00:14:54.290
well, you know, it's not
quite zero point X at

261
00:14:54.290 --> 00:14:57.530
this point, you know, is
that I'm not interested necessarily

262
00:14:57.530 --> 00:14:59.930
in broccoli as I am
just in the idea of

263
00:14:59.930 --> 00:15:04.070
building our systems on untrusted
or beta software, or do

264
00:15:04.070 --> 00:15:05.570
you think beta is just
a name? I'm curious what

265
00:15:05.570 --> 00:15:09.550
you think? I think the,
I mean, specifically broccoli, one

266
00:15:09.550 --> 00:15:12.610
of the reasons it's still
in beta is because broccoli

267
00:15:12.610 --> 00:15:18.010
actually evolved mainly as a
support tool for Amber. So

268
00:15:18.010 --> 00:15:20.890
Amber, a lot of the
core team contributed that to

269
00:15:20.890 --> 00:15:23.320
broccoli. So in that sense,
I think it's very safe

270
00:15:23.350 --> 00:15:26.050
choice, but at the same
time, you know, because Ember

271
00:15:26.050 --> 00:15:29.980
CLI is built on the
idea that you can swap

272
00:15:29.980 --> 00:15:33.310
parts in and out, you
can very easily. It's like,

273
00:15:33.310 --> 00:15:35.620
you know, I actually don't
want to use broccoli. I

274
00:15:35.620 --> 00:15:38.530
mean, just not recommended, it
might take a bit of

275
00:15:38.830 --> 00:15:42.640
glue, but you can definitely
make it work with some

276
00:15:42.640 --> 00:15:45.610
other built too. But I
mean, that's, that's, that's embers

277
00:15:45.610 --> 00:15:49.180
philosophy to begin with something.
A lot of people don't

278
00:15:49.180 --> 00:15:52.330
realize is Amber and the
CLI and all the other

279
00:15:52.330 --> 00:15:57.910
tools are also built on
librarians that have been extracted

280
00:15:57.910 --> 00:16:02.020
into my libraries. For example,
Ember has one of the,

281
00:16:02.020 --> 00:16:04.930
probably the best hands down
the best from a client

282
00:16:04.930 --> 00:16:09.220
side routing component that's been
extracted and react to those

283
00:16:09.220 --> 00:16:12.070
that router. Now, I think
angler also used at router

284
00:16:12.490 --> 00:16:15.910
and mercy ally itself has
been extracted and angular two

285
00:16:15.910 --> 00:16:19.180
is now going to use
ship with it. There's just

286
00:16:19.180 --> 00:16:22.060
so much more of this.
The Amber promise library, which

287
00:16:22.060 --> 00:16:25.510
is a, a plus compliant
promise library. That's also been

288
00:16:25.510 --> 00:16:29.800
extracted back-burner. I could go
on there's a lot of

289
00:16:29.800 --> 00:16:33.670
these very well-tested tools that
have been extracted and they're

290
00:16:33.670 --> 00:16:36.070
available for people to poke
around or using their own

291
00:16:36.070 --> 00:16:39.340
projects as a stand alone
library. So that's really interesting.

292
00:16:39.370 --> 00:16:43.390
Let me, let me put
this into a, a bit

293
00:16:43.390 --> 00:16:47.650
of an analogy. Now I
started in the.net world. So

294
00:16:47.650 --> 00:16:49.960
it's, it's a little bit
of a different, but when.net

295
00:16:49.960 --> 00:16:51.820
came out, we had this
thing called the BCL it's

296
00:16:51.820 --> 00:16:55.850
the base class library. And
it was this giant for,

297
00:16:55.850 --> 00:16:59.020
for the most part monolithic
thing that included everything you

298
00:16:59.020 --> 00:17:02.260
ever wanted. You know, you
want regular expressions. We got

299
00:17:02.260 --> 00:17:04.480
that. You want HTTP calls.
We got that, you know,

300
00:17:04.480 --> 00:17:08.500
it's this big base of
the pyramid and this was

301
00:17:08.500 --> 00:17:10.360
how it was done for
a very, very long time.

302
00:17:10.600 --> 00:17:14.410
And then more recently a.net
has switched to breaking things

303
00:17:14.410 --> 00:17:17.050
up into these micro libraries,
very much the way that

304
00:17:17.060 --> 00:17:22.120
you're describing. So everything is,
is swappable. And it almost

305
00:17:22.120 --> 00:17:25.870
seems like, you know, the
internet right now is working

306
00:17:25.870 --> 00:17:29.470
as a collective ever so
slowly to create this, this

307
00:17:29.470 --> 00:17:33.010
BCL, this base class library
for the internet itself. Like

308
00:17:33.310 --> 00:17:36.190
it's all these little tiny
micro libraries kind of having

309
00:17:36.190 --> 00:17:38.860
little fights and fighting it
out until we agree that,

310
00:17:38.980 --> 00:17:40.870
all right, this is the
routing library that we're all

311
00:17:40.870 --> 00:17:43.660
gonna use for the, for
the time being and file

312
00:17:43.660 --> 00:17:47.620
upload. That's a solved problem.
Right? Does it seem like

313
00:17:48.340 --> 00:17:52.350
there's, there's all these little
libraries are going to eventually

314
00:17:52.380 --> 00:17:57.000
kind of coalesce into these
are the expected libraries. Cause

315
00:17:57.000 --> 00:17:59.010
right now I'm having trouble
keeping track of all the

316
00:17:59.760 --> 00:18:02.290
noun dot JS. You know,
I don't know what I

317
00:18:02.290 --> 00:18:04.380
would be. I would be
sad if I picked the

318
00:18:04.380 --> 00:18:07.790
wrong routing library. Yeah. I
definitely hear you on that

319
00:18:07.790 --> 00:18:11.000
point. I think that is
something that is on a

320
00:18:11.000 --> 00:18:14.930
state of flux. You know,
there is always, it's similar

321
00:18:14.930 --> 00:18:17.750
to Jake, right? Like Jay
Cray, wasn't the first library

322
00:18:17.750 --> 00:18:19.700
to do what it did.
You know, there are a

323
00:18:19.700 --> 00:18:23.570
bunch of other libraries that
also have similar functionality, but

324
00:18:24.620 --> 00:18:28.190
essentially I think you're right.
I think at some point

325
00:18:28.190 --> 00:18:31.760
libraries will converge whether or
not it's X library or

326
00:18:31.760 --> 00:18:34.610
Y library is. I mean,
it doesn't really matter, but

327
00:18:35.030 --> 00:18:38.570
the point is I think
the web is still, I

328
00:18:38.570 --> 00:18:40.790
mean, as old as it
is, the web developer web

329
00:18:40.790 --> 00:18:44.120
development is actually still kind
of young compared to a

330
00:18:44.120 --> 00:18:47.090
lot of other programming industries.
So there's a lot of

331
00:18:47.090 --> 00:18:50.570
room for a competitor or
some sort of new way

332
00:18:50.570 --> 00:18:53.270
of doing things, some new
library to come in. But

333
00:18:53.270 --> 00:18:55.430
I think at the end
of the day, the libraries,

334
00:18:55.430 --> 00:19:00.800
which focus on doing one
thing and doing it well

335
00:19:01.590 --> 00:19:04.250
and then having a great
community around it and having

336
00:19:04.250 --> 00:19:07.460
an open source is the
key, for example, low dash

337
00:19:07.520 --> 00:19:10.010
is it's probably, I think
it's, if I'm not wrong

338
00:19:10.010 --> 00:19:13.790
on sort of the most
downloaded diaries on NPM, but

339
00:19:13.790 --> 00:19:15.710
it didn't always used to
be that way. You know,

340
00:19:15.890 --> 00:19:18.590
underscore used to be the
King and now load ashes,

341
00:19:18.590 --> 00:19:20.750
and there's even talks of
a merger between the two.

342
00:19:21.170 --> 00:19:23.360
I think that's a really
prime example of that kind

343
00:19:23.360 --> 00:19:27.290
of convergence where the best
ideas get shared among all

344
00:19:27.290 --> 00:19:30.860
the different libraries, similar to
Ember angular react. And eventually,

345
00:19:31.100 --> 00:19:32.960
I mean, I wouldn't be
surprised in five years, we'll

346
00:19:32.960 --> 00:19:35.600
see just one really good
framework that takes the ideas

347
00:19:35.600 --> 00:19:39.350
from all the current frameworks
we have. Right. Or even

348
00:19:39.350 --> 00:19:42.020
if it wasn't one, some
kind of a food court

349
00:19:42.350 --> 00:19:44.810
or, you know, cafeteria that
I could go in. And

350
00:19:44.810 --> 00:19:47.120
at least I know that
everything here is reliable and

351
00:19:47.120 --> 00:19:50.150
I can count on it,
you know? Cause we always

352
00:19:50.150 --> 00:19:53.450
joke about now dot JS.
It's like picking out like

353
00:19:53.450 --> 00:19:56.300
lawn chair. Like that's a
thing, There is a JavaScript

354
00:19:56.300 --> 00:19:59.540
library for pretty much everything
you can think of. We're

355
00:19:59.540 --> 00:20:01.580
running out of, like you
said, backburner. And I'm like,

356
00:20:01.610 --> 00:20:02.960
wow, that's a cool name.
Like I want to go

357
00:20:02.960 --> 00:20:04.940
check that out, you know,
but I don't know if

358
00:20:04.940 --> 00:20:07.850
that's the right thing for
me and you really never

359
00:20:07.850 --> 00:20:10.400
know until you dig into
it. So then who has

360
00:20:10.400 --> 00:20:12.470
all the time who has
the time to dig through

361
00:20:12.890 --> 00:20:17.120
every, every micro library and
decide, so then it becomes

362
00:20:17.120 --> 00:20:19.940
like you said, a community
issue, doesn't it correct. Definitely.

363
00:20:20.270 --> 00:20:23.330
And that's, that's why Ember
strongly believes that it's community,

364
00:20:23.330 --> 00:20:25.940
because a lot of the
best decisions we've made have

365
00:20:25.940 --> 00:20:29.030
been as a result of
community collaboration. You know, Amber

366
00:20:29.030 --> 00:20:31.250
is not a framework which
is driven by a singular

367
00:20:31.400 --> 00:20:34.340
entity. Like, you know, like
one of the big, I'm

368
00:20:34.340 --> 00:20:37.040
probably not going to name
the companies, but it's not

369
00:20:37.040 --> 00:20:40.310
driven by any one large
company. And Bruce core team

370
00:20:40.310 --> 00:20:43.850
is made up of contributors
from a wide variety of,

371
00:20:43.910 --> 00:20:46.340
of companies and they all
have interest in keeping this

372
00:20:46.340 --> 00:20:49.570
framework scene. And it's not
just driven by a single

373
00:20:50.170 --> 00:20:55.170
individual organization. You brought up
community a lot. And what

374
00:20:55.170 --> 00:20:56.460
does that, what does that
mean to you? Is it

375
00:20:56.460 --> 00:20:58.860
a, is it welcoming? Is
it the ability to Google

376
00:20:58.860 --> 00:21:01.200
something and find it quickly
on stack overflow? I mean,

377
00:21:01.650 --> 00:21:03.330
what does it mean to
have a welcoming community for

378
00:21:03.330 --> 00:21:08.610
your life, A welcoming committee?
So Amber is community has

379
00:21:08.610 --> 00:21:11.220
been really, I would say
there are two main reasons

380
00:21:11.220 --> 00:21:14.490
why embers community is so
strong. First of all, the

381
00:21:14.490 --> 00:21:18.330
core team is committed to,
you know, a wide variety

382
00:21:18.330 --> 00:21:23.070
of applications. So again, it's
not just about one organizations

383
00:21:23.130 --> 00:21:28.560
wins and that dictate the
direction of the framework. Amber

384
00:21:28.560 --> 00:21:31.110
has a, I think it's
a very unique RFC process,

385
00:21:31.140 --> 00:21:36.090
which is I believe influenced
by the rust RSE process.

386
00:21:36.500 --> 00:21:39.810
So before any new features,
land and Ember, there is

387
00:21:39.810 --> 00:21:42.660
an RFC that will go
out, that's publicly accessible by

388
00:21:42.660 --> 00:21:45.900
anyone. It's also very similar
to what <inaudible> is doing

389
00:21:45.900 --> 00:21:49.830
with Java script proposals, where
they make these open source

390
00:21:49.830 --> 00:21:53.880
for, you know, like the
new versions of JavaScript. So

391
00:21:53.880 --> 00:21:57.310
this RFC process basically lets
anyone have a, have a

392
00:21:57.350 --> 00:22:01.260
say in some framework, for
example, there was a very

393
00:22:01.260 --> 00:22:04.230
long discussion on whether or
not inverse Ember 2.0 should

394
00:22:04.230 --> 00:22:08.190
support <inaudible>. That was a
very long discussion. I mean,

395
00:22:08.490 --> 00:22:11.310
if it, if it were
driven by some other company

396
00:22:11.310 --> 00:22:15.030
that might have been dropped
very quickly. And then the

397
00:22:15.030 --> 00:22:18.180
second thing is embers community
has just been focused on,

398
00:22:18.430 --> 00:22:21.150
it's just a really friendly
community. Even the faculty you

399
00:22:21.150 --> 00:22:24.780
can see from embers logo,
it's a happy logo. Maybe

400
00:22:24.780 --> 00:22:26.880
that's one of the reasons
why people don't take it

401
00:22:26.910 --> 00:22:29.750
as seriously as the others.
But it also means that,

402
00:22:29.760 --> 00:22:32.940
you know, the people who
end up working Ember, the

403
00:22:33.150 --> 00:22:36.870
theory friendly, very accommodating. And
if you join this Slack

404
00:22:36.870 --> 00:22:40.680
channel, for example, there's like
a lot of people who

405
00:22:40.770 --> 00:22:42.900
constantly are there. I don't
know. I don't know if

406
00:22:43.060 --> 00:22:46.440
there are real people, but
because sometimes they answer questions

407
00:22:46.470 --> 00:22:49.830
like 24 seven and these
people are so dedicated and

408
00:22:50.070 --> 00:22:54.150
they will help Borden rapidly
answer your question. And it's

409
00:22:54.150 --> 00:22:57.150
not just them because there's
this strong focus on convention

410
00:22:57.150 --> 00:22:59.940
and reconfiguring that there's usually
one right way of doing

411
00:22:59.940 --> 00:23:02.730
things. So it's not just
one person who knows the

412
00:23:02.730 --> 00:23:04.710
answer to your question. It's
a lot of people, it's

413
00:23:04.710 --> 00:23:07.740
the community problem. That's cool.
And hopefully there are no

414
00:23:07.740 --> 00:23:12.750
dumb questions. No, there's definitely
no dumb question. Very cool.

415
00:23:13.290 --> 00:23:14.550
One of the things I
wanted to dig a little

416
00:23:14.550 --> 00:23:16.920
bit more into is this
idea of data flow, because

417
00:23:16.920 --> 00:23:18.750
you said that that's so
important is the flow of

418
00:23:18.750 --> 00:23:23.160
data and then maintaining those
relationships between that data. Does

419
00:23:23.160 --> 00:23:24.900
this mean that I can't
just sit down and start

420
00:23:24.900 --> 00:23:26.550
writing an Ember app? Do
I need to like map

421
00:23:26.550 --> 00:23:28.140
this out and really have
a sense of what I'm

422
00:23:28.140 --> 00:23:30.720
writing first? Like is design
upfront more important with an

423
00:23:30.720 --> 00:23:34.860
Ember app? I would, yeah.
So the thing about Ember

424
00:23:35.220 --> 00:23:38.880
as a framework is that
because it's such an opinionated

425
00:23:38.880 --> 00:23:41.970
framework, there are certain, there
are certain recommended ways of

426
00:23:41.970 --> 00:23:45.030
doing things and there is
definitely a lot of value

427
00:23:45.320 --> 00:23:47.990
sitting down and thinking, having
a think about how you

428
00:23:47.990 --> 00:23:51.050
want to model your application
before you actually start building

429
00:23:51.050 --> 00:23:53.960
it, because memberships of all
these things like Ember data,

430
00:23:53.960 --> 00:23:56.750
which is a data persistence
library that helps you map

431
00:23:58.100 --> 00:24:03.230
almost like an orange into
Ajax calls. There are things

432
00:24:03.230 --> 00:24:07.100
like that where you sometimes
I would say 80% of

433
00:24:07.100 --> 00:24:10.130
the difficulty in an application
is just thinking about how

434
00:24:10.160 --> 00:24:13.310
data is structured and how
it flows. And Amber is

435
00:24:13.320 --> 00:24:16.850
actually designed really well to
help you do that. So

436
00:24:17.270 --> 00:24:21.260
I would say, yeah, data
is becoming a more important

437
00:24:21.260 --> 00:24:25.010
issue with Amber and a
lot of the new features

438
00:24:25.040 --> 00:24:29.600
and philosophies that have come
about are related to data

439
00:24:29.600 --> 00:24:33.650
flow. And actually this year
in March, the end of

440
00:24:33.650 --> 00:24:36.470
March, I'll be giving another
talk at Amber comp 2016

441
00:24:36.470 --> 00:24:41.010
about that topic. Oh, is
it about bad data flows

442
00:24:41.010 --> 00:24:43.630
specifically? Well, my, my talk
is going to be about

443
00:24:43.930 --> 00:24:48.760
idiomatic Amber and basically the
philosophy behind it, about data

444
00:24:48.760 --> 00:24:55.090
flow, about how idiomatic inversion
look like. You know, that's

445
00:24:55.090 --> 00:24:57.430
a really interesting, I love
that word idiomatic because it

446
00:24:57.430 --> 00:25:01.600
really gives you a sense
of how that you've reached

447
00:25:01.600 --> 00:25:03.880
a certain level, right? Like
when you, you learn a

448
00:25:03.880 --> 00:25:07.270
language, right? Like I, I
speak some Spanish, but it's

449
00:25:07.270 --> 00:25:10.630
not very good. It's certainly
not idiomatic, you know, Spanish,

450
00:25:10.660 --> 00:25:14.170
but I can be understood,
but it, you wouldn't look

451
00:25:14.170 --> 00:25:15.820
at it and say, well,
that is some lovely poetry

452
00:25:15.820 --> 00:25:20.320
right there. You know, that's
partly level Spanish. I suspect

453
00:25:20.320 --> 00:25:22.060
I'm probably the same way
in Ember. Like I can

454
00:25:22.060 --> 00:25:24.760
get it done, but I
don't know if it's idiomatic.

455
00:25:24.760 --> 00:25:26.500
I don't know if it's,
if it's, if it's a

456
00:25:26.560 --> 00:25:30.100
correct inappropriate and, and elegant,
Correct. Yeah. I mean, in

457
00:25:30.100 --> 00:25:32.350
fact that's been one of
the major issues with Emirates

458
00:25:32.350 --> 00:25:35.920
that a lot of people
believe that there is a

459
00:25:35.920 --> 00:25:39.100
very steep learning curve, which
I wouldn't say is incorrect.

460
00:25:39.100 --> 00:25:42.760
I mean, Amber is not
something you can just, you

461
00:25:42.760 --> 00:25:45.160
know, sit there and understand
in two minutes, it's something

462
00:25:45.160 --> 00:25:48.610
that takes a bit of
thought, but this means that,

463
00:25:48.860 --> 00:25:51.190
you know, you do the
thinking upfront. Once you learn

464
00:25:51.190 --> 00:25:54.520
the conventions, you know, you're
super productive. And when you

465
00:25:54.520 --> 00:25:58.210
stop finding, learning to fight
the framework and to work

466
00:25:58.210 --> 00:26:01.000
with it, you are so
much more productive and your

467
00:26:01.000 --> 00:26:06.130
team as a whole benefits
from that, I've heard a

468
00:26:06.130 --> 00:26:09.670
lot of people say that
there's, I'm concerned that we're

469
00:26:09.670 --> 00:26:12.850
forgetting about JavaScript and we're
focusing on the frameworks. Like

470
00:26:12.850 --> 00:26:15.250
we, there's a, there's a
saying that no one writes

471
00:26:15.520 --> 00:26:18.610
Java script anymore. They write
jQuery. How important is a

472
00:26:18.610 --> 00:26:22.090
real deep understanding of JavaScript
when you're learning Ember Very

473
00:26:22.090 --> 00:26:26.440
important. I mean, basically Amber
has a, has a bunch

474
00:26:26.440 --> 00:26:31.810
of conventions and different concepts.
Like round-table components, a component

475
00:26:31.810 --> 00:26:36.910
around data, Ember data as
models, but underneath that are,

476
00:26:36.910 --> 00:26:39.520
you know, you still need
to write JavaScript to get

477
00:26:39.520 --> 00:26:44.010
all these things working. And
because Amber's the emperor tooling

478
00:26:44.010 --> 00:26:47.580
is so strong, Ember CLI
already ships with the babble

479
00:26:47.610 --> 00:26:50.280
trans filer, which for those
not familiar with let's you

480
00:26:50.280 --> 00:26:55.440
write the modern ECMAScript syntax
in your, in your application,

481
00:26:56.370 --> 00:26:58.800
even though they might not
necessarily be supported by the

482
00:26:58.800 --> 00:27:04.130
browser yet. So Babel the
JavaScript compiler babble, that's the

483
00:27:04.130 --> 00:27:08.570
one that takes, you know,
ECMAScript 2015 modules syntax and

484
00:27:08.570 --> 00:27:13.340
then turns it into required
JS style AMD modules. Yeah,

485
00:27:13.370 --> 00:27:16.970
exactly. So I mean that
ships by default. So every

486
00:27:16.970 --> 00:27:19.250
Ember app today, if you,
if you go use the

487
00:27:19.250 --> 00:27:21.590
embassy lot, you type in
renew, you're going to get

488
00:27:21.650 --> 00:27:25.040
a, an application that's already
bootstrapped to work with all

489
00:27:25.040 --> 00:27:29.870
the best technologies, you know,
like the latest ECMAScript you

490
00:27:29.870 --> 00:27:36.020
work with whatever other tech
library that it ships. But

491
00:27:36.080 --> 00:27:40.400
yeah, Amber is really very
much about choosing the right

492
00:27:40.400 --> 00:27:45.080
tools and focusing on making
those tools really good. What

493
00:27:45.080 --> 00:27:47.120
do you think about, I'm
curious your opinion on TypeScript

494
00:27:47.120 --> 00:27:49.660
as anyone in the Ember
community thought about TypeScript and

495
00:27:49.730 --> 00:27:51.830
being able to plug that
kind of stuff in. So

496
00:27:51.830 --> 00:27:55.970
I haven't had too much
experience with TypeScript, but that

497
00:27:55.970 --> 00:28:00.260
said glimmer, which is embers
rendering engine, which is the

498
00:28:00.290 --> 00:28:04.400
one I described earlier about
being similar to react. The

499
00:28:04.400 --> 00:28:07.100
second version of that is
actually being written in TypeScript.

500
00:28:07.130 --> 00:28:10.490
And I believe there are
certain other components, internal components

501
00:28:10.490 --> 00:28:13.400
to Amber that are going
to be rewritten in TypeScript

502
00:28:14.030 --> 00:28:17.690
because when I had to
talk with some of the,

503
00:28:18.670 --> 00:28:23.240
the framework authors and basically
the reason they went with

504
00:28:23.240 --> 00:28:26.030
TypeScript is that it gives
us, there's a lot of

505
00:28:26.030 --> 00:28:28.730
benefits to writing a framework
we've typed script, maybe for

506
00:28:28.730 --> 00:28:31.700
an applicant, an ordinary application,
it might be overkill. You

507
00:28:31.700 --> 00:28:35.600
don't really need all those
type safety in whatever that

508
00:28:35.960 --> 00:28:40.220
type of group brings. But
for framework authors is actually

509
00:28:40.220 --> 00:28:43.610
really good and there might
even be a potential for

510
00:28:43.920 --> 00:28:46.010
an add on and add
on that will let you

511
00:28:46.010 --> 00:28:48.190
write type script in your
app and your application and

512
00:28:48.210 --> 00:28:52.880
have to transpile down to
regular channels. Hmm. There was

513
00:28:52.880 --> 00:28:55.850
an interesting blog post. I
think it was last year

514
00:28:56.210 --> 00:28:58.790
by a fellow named Paul
Yoder who was talking about

515
00:28:58.790 --> 00:29:01.700
how he was switching from
angular to Amber. And one

516
00:29:01.700 --> 00:29:04.280
of the things that he
called out specifically was that

517
00:29:04.280 --> 00:29:07.790
he was reading some, some
source code. I think he

518
00:29:07.790 --> 00:29:11.030
was looking at discourse, the
discourse forum software, which is

519
00:29:11.030 --> 00:29:15.170
another big Amber application and
he was reading it and

520
00:29:15.170 --> 00:29:19.460
he said something didn't feel
right. And the thing that

521
00:29:19.460 --> 00:29:21.470
didn't feel right was that
he was actually able to

522
00:29:21.470 --> 00:29:24.560
understand the code base for
a project that he'd never

523
00:29:24.560 --> 00:29:27.020
looked at before. And that
was a weird feeling. And

524
00:29:27.020 --> 00:29:29.420
I thought that was such
a funny thing to call

525
00:29:29.420 --> 00:29:31.580
out from his, from his
blog posts. Is there, you

526
00:29:31.580 --> 00:29:34.460
know, there's something about Ember
that makes it eminently readable.

527
00:29:35.570 --> 00:29:37.700
So I mean, it all
boils down back to this,

528
00:29:37.700 --> 00:29:40.340
to what I, I feel
like I've been repeating myself

529
00:29:40.820 --> 00:29:43.420
was good. That's good because
it's, It's the consistency of

530
00:29:43.570 --> 00:29:47.250
the message. It's, it's, it's
basically embraced focus to convention

531
00:29:47.250 --> 00:29:52.860
and reconfiguration. So Amber has
very strong concepts and you

532
00:29:52.860 --> 00:29:56.220
know, I mean, my talk
about idiomatic. Amber will describe

533
00:29:57.210 --> 00:29:59.940
how you have, there is
like a recommended way for

534
00:29:59.940 --> 00:30:02.460
writing an application. And what
that means is that a

535
00:30:02.460 --> 00:30:05.310
new developer that you onboard
your team can very rapidly

536
00:30:05.340 --> 00:30:08.940
get started with an application,
you know, at Docker, which

537
00:30:08.940 --> 00:30:11.310
is we are a software
consultant, a very small software

538
00:30:11.310 --> 00:30:15.810
consultancy in Boston. We work
on a lot of applications

539
00:30:15.840 --> 00:30:18.510
and you know, at times
I have to jump between

540
00:30:18.510 --> 00:30:21.930
projects, but because we Ember
shared such a strong philosophy

541
00:30:21.930 --> 00:30:24.870
of sharing, you know, I
can jump into a project

542
00:30:24.870 --> 00:30:27.600
and be confident that the
code I'm going to look

543
00:30:27.600 --> 00:30:30.150
at it. It's not something
I've never seen before. There

544
00:30:30.150 --> 00:30:31.770
are conventions. I know where
to look for all the

545
00:30:31.770 --> 00:30:33.960
models. I know where to
look for the controllers, all

546
00:30:33.960 --> 00:30:38.070
the components, and I can
very rapidly get started. I

547
00:30:38.070 --> 00:30:39.810
don't have to think about,
you know, Oh, how do

548
00:30:39.810 --> 00:30:42.720
I, how do I make
this build? How do I

549
00:30:43.350 --> 00:30:47.040
do X? Because every basically
takes on all those unexciting

550
00:30:47.040 --> 00:30:51.030
decisions for you. I like
that unexciting decisions, right? That's,

551
00:30:51.030 --> 00:30:53.400
that's not what we want
to be doing. Basically make

552
00:30:53.400 --> 00:30:55.860
no value to what bill
to at the end of

553
00:30:55.860 --> 00:30:57.990
the day, the bill two
is just supposed to build

554
00:30:57.990 --> 00:31:00.090
something for you. You know
how it does, it may

555
00:31:00.090 --> 00:31:03.270
not necessarily be the most
important decision that you make

556
00:31:03.270 --> 00:31:07.920
as a developer. Interesting. Have
you at, dockyard found that

557
00:31:07.920 --> 00:31:11.220
your writing library shared libraries
on top of Ember, cause

558
00:31:11.220 --> 00:31:14.010
sometimes people will pick a
framework and then they'll write

559
00:31:14.010 --> 00:31:16.050
another framework on top of
that framework and then share

560
00:31:16.050 --> 00:31:18.270
it within their consultancy. Or
do you really write pure

561
00:31:18.270 --> 00:31:20.670
Ember most of the time?
So a lot of the

562
00:31:20.670 --> 00:31:23.190
things we use a lot
very frequently at Docker, we

563
00:31:23.190 --> 00:31:27.030
have extracted into add ons.
So these add ons have

564
00:31:27.030 --> 00:31:30.480
been for useful because once
we open source, then we've

565
00:31:30.480 --> 00:31:33.900
actually gotten really good feedback
from a lot of people.

566
00:31:34.260 --> 00:31:37.650
And some of our clients,
some of the projects we

567
00:31:37.650 --> 00:31:40.440
build for our clients also
use these add on. So,

568
00:31:40.740 --> 00:31:42.600
you know, we have a
motivation to keep these up

569
00:31:42.600 --> 00:31:45.840
to date and working all
the time. And it's not

570
00:31:45.840 --> 00:31:48.210
just our add ons that
we use. We also use

571
00:31:48.210 --> 00:31:50.490
a variety of add ons
that the community has built

572
00:31:51.090 --> 00:31:54.150
and we also find ourselves
contributing back to them. So

573
00:31:54.150 --> 00:31:57.540
it's this whole community, which
is really open. And the

574
00:31:57.540 --> 00:32:00.210
fact that, you know, I
mean, which other JavaScript framework

575
00:32:00.210 --> 00:32:02.760
can say that they have
an add on framework in

576
00:32:02.760 --> 00:32:05.070
hand that you can, you
can install an add on

577
00:32:05.070 --> 00:32:07.620
as easily as typing one
line into your command line.

578
00:32:07.950 --> 00:32:10.440
I don't think any other
framework today can, can make

579
00:32:10.440 --> 00:32:14.850
that claim and ever just,
yeah, I mean ever just

580
00:32:14.850 --> 00:32:19.410
makes that super simple. Very
cool. Well, I appreciate your

581
00:32:19.410 --> 00:32:21.720
time today. Yeah. Thank you
so much for having me.

582
00:32:22.380 --> 00:32:24.720
So folks can check you
out on Twitter. It's sugar

583
00:32:24.720 --> 00:32:28.920
pirate, underscore and sugar pirate.com
is your website. And from

584
00:32:28.920 --> 00:32:31.470
there you can go and
check out your talk at

585
00:32:31.500 --> 00:32:34.470
a Amber Bearcomm 2015 as
well as your, your excellent

586
00:32:34.620 --> 00:32:38.670
slides over at a speaker
deck doc. Yes. Thank you

587
00:32:38.670 --> 00:32:42.320
very, and hopefully I'll see
some of you at the

588
00:32:42.380 --> 00:32:46.630
2016 number, confident Portland, Oregon,
this March. I see I'm

589
00:32:46.630 --> 00:32:48.310
in Portland, Oregon. I need
to figure out how to

590
00:32:48.310 --> 00:32:50.500
get a ticket for that.
That's fantastic. Thanks so much.

591
00:32:50.530 --> 00:32:53.080
Thank you very much for
having me. This has been

592
00:32:53.080 --> 00:32:55.450
another episode of Hansel minutes
and we'll see you again

593
00:32:55.450 --> 00:32:56.080
next week.

