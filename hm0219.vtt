WEBVTT FILE

1
00:00:12.030 --> 00:00:17.190
From Hanselman it's dot com.
It's Hanselman. It's a weekly

2
00:00:17.190 --> 00:00:21.360
discussion with web developer and
technologists. Scott Hanselman. This is

3
00:00:21.360 --> 00:00:27.480
Lawrence Ryan announcing show number two
19 recorded live Thursday, June 24th, 2010.

4
00:00:28.110 --> 00:00:31.140
Support for Hanselman it's just
provided by teller at rad

5
00:00:31.140 --> 00:00:34.770
controls. The most comprehensive suite
of components for windows forms

6
00:00:34.770 --> 00:00:44.700
and asp.net web applications online@wwwdottelerik.com.
In this episode, Scott demystifies

7
00:00:44.730 --> 00:00:51.480
Microsoft's application server app fabric
with Karen D Anon. Hi,

8
00:00:51.480 --> 00:00:53.430
this is Scott Hanselman and
this is another episode of

9
00:00:53.430 --> 00:00:55.800
Hansel minutes and I'm on
the phone today with Karen

10
00:00:55.800 --> 00:00:59.490
deep Anon. Who's a principal
of GPM at Microsoft corporation,

11
00:00:59.850 --> 00:01:02.160
and he's going to talk
to me about the app

12
00:01:02.190 --> 00:01:04.680
fabric today. Thank you, sir,
for taking time to chat

13
00:01:04.680 --> 00:01:08.390
with me. Thank you for
having these classes. All right.

14
00:01:08.390 --> 00:01:10.760
So I'm up on the
Microsoft website and I typed

15
00:01:10.760 --> 00:01:15.950
in msdn.com/app fabric. And I
see that there, there appear

16
00:01:15.950 --> 00:01:19.070
to be two different things
that are called app fabric.

17
00:01:19.070 --> 00:01:22.190
I see a windows server
app fabric and a windows

18
00:01:22.190 --> 00:01:25.250
as your app fabric. I
know what server is, and

19
00:01:25.250 --> 00:01:27.350
I know what Azure is,
but why, what are the

20
00:01:27.350 --> 00:01:29.450
two products called app fabric?
And are they the same

21
00:01:29.450 --> 00:01:34.520
thing or different Today? We
have two offerings for fabric

22
00:01:34.670 --> 00:01:37.610
brand. First is of course
the windows seven and fabric.

23
00:01:37.670 --> 00:01:41.480
I just mentioned, we also
have the windows as your

24
00:01:41.660 --> 00:01:47.330
fabric and the intent of
the two technologies is similar,

25
00:01:47.330 --> 00:01:50.900
which is we give you
a bunch of application server

26
00:01:50.900 --> 00:01:54.440
building blocks for you to
easily build applications. However, today

27
00:01:54.440 --> 00:01:59.900
the do offerings have different
capabilities. So the windows not

28
00:01:59.900 --> 00:02:04.940
fabric is about helping you
build applications, leveraging the card

29
00:02:04.940 --> 00:02:08.960
infrastructure and using connectivity or
access control. So the two

30
00:02:08.960 --> 00:02:13.460
big offerings within the asset
of fabric and you under

31
00:02:13.460 --> 00:02:15.740
serve and our fabric on
the other hand is today

32
00:02:15.740 --> 00:02:21.020
focused on providing containers for
writing your own code or

33
00:02:21.200 --> 00:02:24.680
cash in technologies, which is
the board names with OSTI.

34
00:02:25.280 --> 00:02:29.060
And today these are two
different offerings and capabilities, but

35
00:02:29.120 --> 00:02:32.360
our intent is for these
to converge over time. And

36
00:02:32.360 --> 00:02:38.540
then at fabric eventually becoming
the application server technologies from

37
00:02:38.540 --> 00:02:42.350
Microsoft, both in the several
framework, as well as in

38
00:02:42.350 --> 00:02:46.130
the cloud. I see that
I've heard a lot of

39
00:02:46.130 --> 00:02:49.790
questions where people kind of
get, get confused myself, included

40
00:02:49.790 --> 00:02:52.730
where they think that these
are currently the same thing,

41
00:02:53.210 --> 00:02:55.160
and they want to know
why they're named the same

42
00:02:55.160 --> 00:02:57.590
thing. So I'm hearing you
say that they are named

43
00:02:57.590 --> 00:02:59.800
the same thing because it
is the intent they'll share

44
00:02:59.800 --> 00:03:03.400
a componentry. There will be
a, there'll be feature parody

45
00:03:03.520 --> 00:03:05.530
for lack of a better
word between these two things.

46
00:03:05.530 --> 00:03:08.310
At some point in the
future, The intent is to

47
00:03:08.310 --> 00:03:11.490
get to convergence of the
same technology stack, both on

48
00:03:11.490 --> 00:03:15.030
premises and on the cloud.
Okay. Okay. So then that,

49
00:03:15.060 --> 00:03:18.060
that, that tells me something
then just as a person

50
00:03:18.060 --> 00:03:21.570
looking in that app fabric,
that word, that, that kind

51
00:03:21.570 --> 00:03:26.070
of brand, that must be
our application server because I

52
00:03:26.070 --> 00:03:29.670
used to work in finance
for many, many years. And

53
00:03:29.670 --> 00:03:32.520
my conversation as I would
go and talk to vice

54
00:03:32.520 --> 00:03:37.020
presidents of banks would usually
start with, hi, we use

55
00:03:37.020 --> 00:03:40.590
windows and windows doesn't have
a component container or any

56
00:03:40.590 --> 00:03:43.950
kind of application server. So
we wrote our own and

57
00:03:43.950 --> 00:03:46.170
I worked for a company
that wrote a big, big

58
00:03:46.170 --> 00:03:49.230
application server, and we would
go and compete against J

59
00:03:49.230 --> 00:03:54.030
boss and WebSphere is app
fabric, our app server. Now

60
00:03:55.230 --> 00:03:57.900
In a short answer, I
would say, yes, I fabric

61
00:03:57.930 --> 00:04:02.400
is the app server from
Microsoft. And historically, just to

62
00:04:02.400 --> 00:04:05.190
add more context to it,
as we've always had a

63
00:04:05.190 --> 00:04:09.480
great set of technologies for
the application service space frameworks

64
00:04:10.110 --> 00:04:12.840
named it, the doctrine framework
is, is way ahead of

65
00:04:12.840 --> 00:04:16.620
its competition and what we
have to offer to developers.

66
00:04:17.310 --> 00:04:21.780
And historically we've had windows
server as the application server.

67
00:04:21.870 --> 00:04:25.080
And on top of that
S are being a web

68
00:04:25.080 --> 00:04:29.700
server, also doubled as an
app server for middleware, but

69
00:04:29.700 --> 00:04:33.990
without fabric, what we've done
is we've taken the ISS

70
00:04:34.020 --> 00:04:36.780
and the vendor server as
the base platform and enhanced

71
00:04:36.780 --> 00:04:41.070
it even further to actually
give a full application server

72
00:04:41.100 --> 00:04:46.800
as industry understands it today
with J boss or you

73
00:04:46.800 --> 00:04:49.410
name it, I mean the
same, same concept, but yes,

74
00:04:49.410 --> 00:04:54.030
it's the first incarnation of
a full blown application service

75
00:04:54.030 --> 00:04:59.700
pack from Microsoft. What are
some of the, the services

76
00:04:59.700 --> 00:05:02.250
or the features that someone
looks at when they want

77
00:05:02.520 --> 00:05:07.200
a, an application server? I
believe at the highest level,

78
00:05:07.230 --> 00:05:10.170
the two ways think about
it. One is as a

79
00:05:10.170 --> 00:05:14.790
developer, I get a whole
bunch of tools and I

80
00:05:14.790 --> 00:05:18.690
get a bunch of programming
languages and frameworks. That's traditionally

81
00:05:18.690 --> 00:05:22.530
been our strongest point with
a studio and with document

82
00:05:22.530 --> 00:05:27.900
framework and dominant framework, being
our windows. Now in 2008,

83
00:05:27.900 --> 00:05:31.680
our two gifts laces gives
a pretty strong foundation of

84
00:05:31.680 --> 00:05:37.500
where we are with the
base frameworks. What fabric adds

85
00:05:37.500 --> 00:05:40.350
on top of that is
a set of technologies or

86
00:05:40.350 --> 00:05:44.100
building blocks so that developers
can focus on writing business

87
00:05:44.100 --> 00:05:47.340
logic and application logic, as
opposed to having to worry

88
00:05:47.340 --> 00:05:51.620
about how my app server,
the lifetime, the components, wardrobe,

89
00:05:51.620 --> 00:05:55.320
these run and scale, that
is where app fabric has

90
00:05:55.320 --> 00:05:58.430
an app set for that.
It gives you two key

91
00:05:58.430 --> 00:06:04.010
sets of technologies. First one
is hosting and management off

92
00:06:04.010 --> 00:06:08.510
your services. And in particular,
the spring, any documented net

93
00:06:08.510 --> 00:06:12.680
photo and above written technology
stack in DAP and workflows,

94
00:06:13.400 --> 00:06:16.340
and the second set of
technologies, which are in some

95
00:06:16.340 --> 00:06:20.450
sense, likely different than hosting
code and writing code is

96
00:06:20.450 --> 00:06:23.510
a big building block that
we see most applications requiring.

97
00:06:24.050 --> 00:06:29.090
It's a set of caching
technologies, formerly codenamed velocity to

98
00:06:29.090 --> 00:06:34.970
enable the writing scalable and
very fast access applications specifically

99
00:06:35.030 --> 00:06:40.810
specifically before your web based
apps like asp.net. So in

100
00:06:40.850 --> 00:06:44.120
short, there are two big
technologies for that topic. One

101
00:06:44.120 --> 00:06:49.130
is a hosting and management
of services. And second is

102
00:06:49.130 --> 00:06:56.080
caching off data for writing
scalable web applications. Okay. A

103
00:06:56.080 --> 00:06:57.790
lot of people will just
run their ad. They just

104
00:06:57.790 --> 00:06:59.560
have a simple app or
even a, not a simple

105
00:06:59.560 --> 00:07:02.080
app. They just run their
app on iOS seven. How

106
00:07:02.080 --> 00:07:06.100
do I know when I'm
outgrowing my application and I'm

107
00:07:06.100 --> 00:07:08.950
going to need to start
thinking about introducing a more

108
00:07:08.950 --> 00:07:12.880
formalized app fabric of application
server. That's a good one.

109
00:07:13.420 --> 00:07:15.580
And that's typically a, you
being very nice to a

110
00:07:15.590 --> 00:07:17.680
Scott. You know, typical question
is why do we really

111
00:07:17.680 --> 00:07:24.220
need half fabric? I get
that all the time. I

112
00:07:24.220 --> 00:07:26.500
mean, if you look at
it, it started right. You

113
00:07:26.500 --> 00:07:30.310
would start with, I have
a bunch of code and

114
00:07:30.460 --> 00:07:32.980
I've written my business logic.
Now I just need a

115
00:07:32.980 --> 00:07:35.980
way to host it. Sure.
A lot of people would

116
00:07:35.980 --> 00:07:39.040
go write a simple anti
service. Most students come and

117
00:07:39.040 --> 00:07:41.380
say I'm to write it.
And as soon as the

118
00:07:42.220 --> 00:07:47.260
application accord becomes anything meaty
or meaningful, you start writing

119
00:07:47.260 --> 00:07:50.290
a lot of logic and
code to maintain that NT

120
00:07:50.290 --> 00:07:53.740
service and say, I'm going
to worry about restartability. I'm

121
00:07:53.740 --> 00:07:57.970
gonna worry about how it's
taught automatically on the machine

122
00:07:57.970 --> 00:08:01.420
boot. How does it fail
over? How does it persist

123
00:08:01.420 --> 00:08:04.210
state? And if you look
at the investments at this

124
00:08:04.210 --> 00:08:07.450
point, the developer is making
his face a little to

125
00:08:07.450 --> 00:08:10.090
do with the business logic
itself. You're already spending a

126
00:08:10.090 --> 00:08:12.340
lot of time in writing
a basic framework of how

127
00:08:12.340 --> 00:08:16.990
to run services the long
game I S and whether

128
00:08:16.990 --> 00:08:19.780
it's simple to wise activation,
it added a lot of

129
00:08:19.840 --> 00:08:22.330
took away a lot of
the complex D from developers

130
00:08:22.330 --> 00:08:26.500
to write basic life cycle
management, of course, is designed

131
00:08:26.500 --> 00:08:30.700
for writing great web applications.
If you're running longer running

132
00:08:31.150 --> 00:08:35.830
services, you need additional help
to manage long running processes.

133
00:08:35.860 --> 00:08:39.970
You use automated state of
those processes. That's what our

134
00:08:39.970 --> 00:08:43.330
fabric comes in and does
what I as did for

135
00:08:43.330 --> 00:08:47.470
basic lifecycle management of your
component to take it further

136
00:08:47.470 --> 00:08:50.050
and say, if you are
daily, have applications running. And

137
00:08:50.050 --> 00:08:54.400
I, as a, as longevity,
you need state maintenance. You

138
00:08:54.400 --> 00:08:57.900
need persistence, you need better
monitoring or those that's what

139
00:08:57.900 --> 00:09:03.000
our fabric does. And our
intent is that if we

140
00:09:03.270 --> 00:09:05.910
give you these building blocks,
you don't really need to

141
00:09:06.000 --> 00:09:10.480
worry about writing the basics
and the plumping off of

142
00:09:10.650 --> 00:09:12.600
how to run an app.
Or do you need to

143
00:09:12.600 --> 00:09:15.330
focus on as a developer
is really how to get

144
00:09:15.330 --> 00:09:19.290
my business logic in my
application, logic focused on what

145
00:09:19.290 --> 00:09:23.900
my customers need more than
what my infrastructure needs. Yeah.

146
00:09:23.900 --> 00:09:26.510
When I was working in,
in banking, one of the

147
00:09:26.510 --> 00:09:29.660
things that we would bump
into is the people we

148
00:09:29.660 --> 00:09:32.540
were trying to sell to
would say something like, well,

149
00:09:32.540 --> 00:09:34.700
this is all great, but
aren't you in the business

150
00:09:34.700 --> 00:09:40.250
of banking? Why are you
bothering with component lifetime management

151
00:09:40.250 --> 00:09:45.170
and state management and configuration
settings for services? This was

152
00:09:45.170 --> 00:09:49.190
all stuff that we had
to build. When we were

153
00:09:49.190 --> 00:09:52.250
just trying to write a
banking application. It had nothing

154
00:09:52.250 --> 00:09:54.020
to do with banking. I
mean, it was a completely

155
00:09:54.020 --> 00:09:59.750
generic application server that honestly
was taking time away from

156
00:09:59.840 --> 00:10:03.050
the time we should have
been spending writing banking applications.

157
00:10:03.860 --> 00:10:06.470
And we always used to
joke that we wanted to

158
00:10:06.470 --> 00:10:11.240
do refactoring via subtraction, meaning
that whenever Microsoft would come

159
00:10:11.240 --> 00:10:13.160
out with something that would
do what we needed it

160
00:10:13.160 --> 00:10:16.310
to do already, then we
could just throw away something

161
00:10:16.310 --> 00:10:19.700
that we wrote and start
worrying about the business problem.

162
00:10:20.840 --> 00:10:23.930
And that's true. And first,
any professional developer to actually

163
00:10:24.590 --> 00:10:27.350
go, right? A lot of
that logic every time it

164
00:10:27.350 --> 00:10:30.440
is time consuming and takes
away a big chunk of

165
00:10:30.440 --> 00:10:36.380
your productivity too, is these
basic reputative tasks. Interesting add

166
00:10:36.380 --> 00:10:39.140
on to that is it's
not just at the development

167
00:10:39.140 --> 00:10:42.110
time that you're paying this
huge cost. You, what you're

168
00:10:42.110 --> 00:10:46.010
also doing is once you
have successful applications running, then

169
00:10:46.010 --> 00:10:48.770
you need to go help
your operations or your monitoring

170
00:10:48.770 --> 00:10:52.550
teams, or whoever is really
managing this app to start

171
00:10:52.550 --> 00:10:55.550
building a lot of instrumentation,
a lot of code to

172
00:10:56.270 --> 00:11:01.520
set out, spit out, debugging
information, tracing information, logging stuff.

173
00:11:02.360 --> 00:11:04.100
And every time you build
an app, you have to

174
00:11:04.100 --> 00:11:07.360
do that yourself because there
is no consistent framework or

175
00:11:07.360 --> 00:11:10.520
an automated thing to give,
give basic monitoring and trouble

176
00:11:10.520 --> 00:11:13.850
shooting information out to your
ops team. And that's one

177
00:11:13.850 --> 00:11:16.310
of the other things that
we've done really well with

178
00:11:16.310 --> 00:11:19.640
document photo and what I've
fabric enables on top of

179
00:11:19.640 --> 00:11:23.960
that is once you have
an app running, we automatically

180
00:11:24.320 --> 00:11:26.900
are able to dial up
and dial down the troubleshooting

181
00:11:26.900 --> 00:11:30.560
levels. So you can get
basic health information, edit information,

182
00:11:30.860 --> 00:11:33.650
and all the way up
till for the trouble shooting

183
00:11:33.660 --> 00:11:38.330
logs, just by droning on
a few knobs. So not

184
00:11:38.330 --> 00:11:40.640
only did you save a
lot of time during development

185
00:11:41.360 --> 00:11:45.830
to not write basic life
cycle management, you don't have

186
00:11:45.830 --> 00:11:48.710
to invest as much in
writing the basic monitoring and

187
00:11:48.710 --> 00:11:52.340
troubleshooting lumping into your code
anymore, because the way dr

188
00:11:52.340 --> 00:11:55.210
and photo is and water
fabric and enabled on top

189
00:11:55.210 --> 00:11:58.660
of it can help you
spread out and reduce your

190
00:11:58.660 --> 00:12:02.950
overhead of writing and monitoring
and troubleshooting code as well.

191
00:12:04.350 --> 00:12:06.570
So that actually brings up
two interesting points. I think

192
00:12:06.930 --> 00:12:11.190
first is I always used
to find myself writing, logging

193
00:12:11.190 --> 00:12:13.800
and instrumentation code, but I
ended up putting in a

194
00:12:13.800 --> 00:12:16.740
database or putting it in
a, in a log file.

195
00:12:16.740 --> 00:12:19.740
And even now years later,
after I've left this banking

196
00:12:19.740 --> 00:12:24.750
company, you'll find ops guys,
operations guys poking around inside

197
00:12:24.750 --> 00:12:26.820
of a half dozen log
files, trying to figure out

198
00:12:26.820 --> 00:12:30.360
what went wrong when they
really wish that they could

199
00:12:30.360 --> 00:12:34.980
be inside of IIS manager
or inside of some MMC

200
00:12:35.010 --> 00:12:38.010
snap in which brings me
to my second point, which

201
00:12:38.010 --> 00:12:41.430
is that I pretty much
just assumed that app fabric

202
00:12:41.430 --> 00:12:44.430
was just the name, the
new name for velocity, the

203
00:12:44.430 --> 00:12:47.730
new name for our caching.
But as you listed out,

204
00:12:47.730 --> 00:12:49.440
there's a bunch of different
things. So we should go

205
00:12:49.440 --> 00:12:52.890
through that. So you talked
about monitoring, there's like a

206
00:12:52.890 --> 00:12:55.470
dashboard isn't there like an
app fabric dashboard that the

207
00:12:55.470 --> 00:12:58.770
operations guys can look at
and see all sorts of

208
00:12:58.770 --> 00:13:04.500
information about my services. Actually,
our fabric is philosophy, which

209
00:13:04.500 --> 00:13:07.290
is caching, and then a
big set of investments on

210
00:13:07.290 --> 00:13:11.760
top of IIS, which is
the fabric dashboard and fabric

211
00:13:11.760 --> 00:13:14.910
plumping that helps you do
both hosting of custom code,

212
00:13:15.570 --> 00:13:18.930
as well as hosting and
management of the same application

213
00:13:19.350 --> 00:13:22.310
while a very, very familiar
UI, which is your IIS

214
00:13:22.320 --> 00:13:27.330
on ad manager itself. So
the second element that we

215
00:13:27.330 --> 00:13:32.850
were talking about the fabric
dashboard, this is simpler to

216
00:13:32.850 --> 00:13:36.180
use out of the box,
configure a dashboard, which helps

217
00:13:36.180 --> 00:13:39.720
you look at the existing
services. You have deployed docs

218
00:13:39.720 --> 00:13:43.260
to a single centralized database,
pulls out all the information

219
00:13:43.290 --> 00:13:48.210
at logs, inventing information and
monitoring information, and can give

220
00:13:48.210 --> 00:13:50.910
you simple credits out of
the box or help you

221
00:13:50.910 --> 00:13:53.490
auto advance credit use that
your ops team can go

222
00:13:53.490 --> 00:13:58.530
look and be bogged information
using. So this is through

223
00:13:58.530 --> 00:14:01.260
the life cycle of an
application. It's a great set

224
00:14:01.260 --> 00:14:04.470
of technologies for your developers
to use who had their

225
00:14:04.470 --> 00:14:07.710
basic hosting cord and basic
debugging information that even developers

226
00:14:07.710 --> 00:14:11.940
can use. Then it's a
great UI dueling, as well

227
00:14:11.940 --> 00:14:16.980
as a great single centralized
database based location for storing

228
00:14:16.980 --> 00:14:21.270
all the AR monitoring and
debugging and trouble shooting information

229
00:14:21.900 --> 00:14:24.840
into a single location with
a UI, which has the

230
00:14:24.840 --> 00:14:28.050
dashboard Google credit and manage
it in the day to

231
00:14:28.050 --> 00:14:34.110
day operations, life cycle aspect
of your application. And the

232
00:14:34.110 --> 00:14:36.720
same information can then go
get fed back into the

233
00:14:36.720 --> 00:14:39.450
development life cycle so that
you know, what way to

234
00:14:39.450 --> 00:14:43.500
applications typically fault or way
of performance is bad, or

235
00:14:43.630 --> 00:14:46.050
the typical defense. If you
see, so that you can

236
00:14:46.050 --> 00:14:49.500
actually close that loop and
improve your application in the

237
00:14:49.500 --> 00:14:53.450
next round, based on the
information you've been collecting and

238
00:14:53.450 --> 00:14:57.880
storing using our fabric. Hi,
this is Scott. I just

239
00:14:57.880 --> 00:15:00.850
want to remind you guys
that there is no show

240
00:15:00.850 --> 00:15:03.070
without a sponsor. Somebody has
got to pay for all

241
00:15:03.070 --> 00:15:06.070
this bandwidth and the more
popular the show becomes. The

242
00:15:06.070 --> 00:15:09.190
more important it is that
we thank our sponsors folks

243
00:15:09.190 --> 00:15:12.850
like Tellerik, I wanna let
you guys know that Tellerik

244
00:15:12.850 --> 00:15:17.440
has got a pretty cool
deal going between June 1st, 2010 and

245
00:15:17.440 --> 00:15:28.060
August 31st, 2010. Any interested listener, just
send an email to podcast@telleriktlerik.com

246
00:15:28.690 --> 00:15:31.540
mentioned Hansel minutes, and they
will reply and they'll give

247
00:15:31.540 --> 00:15:35.710
you a special $50 off
coupon code. So just remember

248
00:15:36.160 --> 00:15:40.840
podcast at <inaudible> dot com
mentioned Hansel minutes, $50 off.

249
00:15:41.320 --> 00:15:46.540
This goes until August 31st, 2010, and
big thanks again for the

250
00:15:46.540 --> 00:15:49.000
folks at Tellerik for believing
in our show and for

251
00:15:49.000 --> 00:15:54.250
continuing to help pay for
our expenses. So does this,

252
00:15:54.760 --> 00:15:57.400
what is this change? Is
this a library or is

253
00:15:57.400 --> 00:16:01.840
this a new service to
get these features? What is

254
00:16:01.840 --> 00:16:05.440
it? Am I hosting my
services in a different, different

255
00:16:05.440 --> 00:16:07.960
place? What are the, what
are the hosting services that

256
00:16:07.960 --> 00:16:11.320
make this possible? Actually, yeah,
I should have probably started

257
00:16:11.320 --> 00:16:14.590
with that to get windows
seven fabric. It's a windows

258
00:16:14.590 --> 00:16:20.200
component and you need to
download from xr.com/hot fabric website,

259
00:16:20.740 --> 00:16:24.880
the package, which installed at
fabric on it, or when

260
00:16:24.880 --> 00:16:31.540
the server. So there's no
extra licensing or extra, you

261
00:16:31.540 --> 00:16:34.090
know, things need to go
by, you just go download

262
00:16:34.420 --> 00:16:38.380
this package on a fabric,
so a package and just

263
00:16:38.380 --> 00:16:40.780
installed it on any window.
So it box what it

264
00:16:40.780 --> 00:16:44.770
actually does is it goes
and sits on top of

265
00:16:44.770 --> 00:16:49.420
IAS. So it goes enabled
IIS. It asks you to

266
00:16:49.450 --> 00:16:53.050
provision or winder to a
secret database that we can

267
00:16:53.050 --> 00:16:55.870
use. If you already have
a SQL server, you can

268
00:16:55.870 --> 00:16:59.710
point when DeSoto fabrics installed
that service. So we can

269
00:16:59.710 --> 00:17:03.670
go create a monitoring and
a persistence database for you

270
00:17:03.670 --> 00:17:10.180
for automatically. Once the configuration
is done, then you continue

271
00:17:10.180 --> 00:17:15.280
using the same ways of
developing an application as you're

272
00:17:15.280 --> 00:17:18.820
dead on. I S and
holstered in, I S the

273
00:17:18.820 --> 00:17:22.960
only differences with the fabric
dashboard, you now have a

274
00:17:22.960 --> 00:17:28.000
UI for configuration management, as
well as for monitoring those

275
00:17:28.000 --> 00:17:35.290
applications. So, in addition to
just the iOS enhancements and

276
00:17:35.740 --> 00:17:38.260
a bunch of you, actually,
a couple of interesting knobs

277
00:17:38.260 --> 00:17:42.730
there to go improve the
management of your application by

278
00:17:42.730 --> 00:17:45.670
turning on things like auto
start auto start is a

279
00:17:45.670 --> 00:17:50.550
simple one where every time
your machine needs to, again,

280
00:17:51.090 --> 00:17:53.760
what alphabet does is it
gives an a timer. It,

281
00:17:53.760 --> 00:17:57.780
it stops those services automatically
for you. So that your

282
00:17:57.780 --> 00:18:01.890
first time experience of using
a service is pretty quick.

283
00:18:01.920 --> 00:18:03.780
You're not waiting for the
whole machine and the state

284
00:18:03.780 --> 00:18:06.750
to get initialized. Our fabrics
already done that for you.

285
00:18:07.140 --> 00:18:11.460
So things like those enhancements
on top of the code,

286
00:18:11.490 --> 00:18:15.570
I asked hosting infrastructure itself
to make managing of the

287
00:18:15.570 --> 00:18:19.170
services a lot more easier.
So it's not a different

288
00:18:19.170 --> 00:18:22.440
deal out. It's not a
different goal. It's not a

289
00:18:22.440 --> 00:18:26.700
different way of thinking watered.
It's the same, same way

290
00:18:26.730 --> 00:18:30.600
of how you develop or
adopt CF or application using

291
00:18:30.600 --> 00:18:34.770
darknet photo, using your favorite
tools, posting it on IIS,

292
00:18:35.010 --> 00:18:36.960
and you just get a
whole bunch of this plumbing

293
00:18:36.960 --> 00:18:41.120
for free. I see. I
see. So then just as

294
00:18:41.120 --> 00:18:44.510
like J boss extends Apache,
and if I'm using Apache

295
00:18:44.510 --> 00:18:46.220
and I love Apache and
I switch it and I

296
00:18:46.220 --> 00:18:48.080
start using J boss, it's
not that I have to

297
00:18:48.440 --> 00:18:52.490
completely learn something new. So
if I like <inaudible> and

298
00:18:52.490 --> 00:18:55.610
I'm start doing things on
app fabric, it's going to

299
00:18:55.610 --> 00:18:58.880
feel like it's an extension
of iOS seven. It's not

300
00:18:58.880 --> 00:19:02.060
going to feel like a
whole new universe. Exactly. We

301
00:19:02.060 --> 00:19:04.790
don't want people to go
learn yet another battle or

302
00:19:05.120 --> 00:19:07.010
figured out yet another way
of building an application. We

303
00:19:07.010 --> 00:19:10.310
just extend the way they
build services today, but just

304
00:19:10.310 --> 00:19:14.060
give them a whole bunch
of frameworks and tools to

305
00:19:14.060 --> 00:19:17.900
just make them a lot
more productive. Okay. Okay. So

306
00:19:17.910 --> 00:19:21.020
there's, so there's health monitoring
and the monitoring dash board,

307
00:19:21.410 --> 00:19:24.140
and that lets you see,
you know, logs and health

308
00:19:24.140 --> 00:19:28.100
issues and anything that a
WCF, a windows communication foundation

309
00:19:28.130 --> 00:19:32.570
or a WF, or what
Microsoft people called dev workflow

310
00:19:32.570 --> 00:19:35.900
service. That's all automatic. So
if I have a WCF

311
00:19:35.900 --> 00:19:39.620
service now, or I have
a workflow service, now, all

312
00:19:39.620 --> 00:19:41.870
that health data is generated
automatically. It's just going to

313
00:19:41.870 --> 00:19:43.850
work and I don't have
to do anything. So I

314
00:19:43.850 --> 00:19:49.970
get monitoring of services effectively
for free. Exactly. And I'm

315
00:19:49.970 --> 00:19:52.850
glad you asked about that,
Beth, as we like to

316
00:19:52.850 --> 00:19:55.220
call it or workflow. The
couple of other things that

317
00:19:55.220 --> 00:19:58.400
we do for workflow in
particular is if, you know,

318
00:19:58.400 --> 00:20:00.860
if you're familiar with how
you write simple workflows or,

319
00:20:00.980 --> 00:20:04.460
you know, fairly complex state
for the workflows, you would

320
00:20:04.880 --> 00:20:07.610
need to persist the state
of your workflow at every

321
00:20:07.610 --> 00:20:13.820
checkpoint or an activity. And
typically configuring a persistence database,

322
00:20:14.780 --> 00:20:17.510
putting checkpoints, making sure that
your state of your workflow

323
00:20:18.050 --> 00:20:21.110
is maintained and you can
restart from that point onwards.

324
00:20:21.620 --> 00:20:24.650
It's fairly a complex task
with the announcements and document

325
00:20:24.650 --> 00:20:29.390
photo and all the work
around persistence there, coupled with

326
00:20:29.390 --> 00:20:33.260
the fact that a fabric
configures a persistence database for

327
00:20:33.260 --> 00:20:37.040
you, but on by default
and multiple workflow instances can

328
00:20:37.040 --> 00:20:40.880
use the same database. You
get a lot of tools

329
00:20:42.310 --> 00:20:45.260
to use, to manage workflows
a lot better and not

330
00:20:45.290 --> 00:20:48.820
easier as well, just because
you've used doctor and photo.

331
00:20:49.720 --> 00:20:53.050
You get all the other
persistence capabilities, you know, the

332
00:20:53.050 --> 00:20:55.480
ability to go start a
Loxo instance, top a looks

333
00:20:55.480 --> 00:20:59.530
for instance, look at a
suspended. Well, for instances all

334
00:20:59.530 --> 00:21:01.600
out of the box, just
because you're using app fabric,

335
00:21:02.820 --> 00:21:05.940
Right, right in business, a
lot of services are, are

336
00:21:05.940 --> 00:21:09.480
long running. We had this
in banking when we were

337
00:21:09.480 --> 00:21:13.950
doing bill payments and funding.
Not everything can be done

338
00:21:13.950 --> 00:21:16.560
in a second. So when
you have a long running

339
00:21:16.650 --> 00:21:20.070
workflow, you need to basically
hydrate it and dehydrate it

340
00:21:20.130 --> 00:21:23.070
and you know, effectively suspend
and resume and manage the

341
00:21:23.070 --> 00:21:27.000
lifetime of that workflow. And
you really quickly get into

342
00:21:27.000 --> 00:21:29.730
things that don't have anything
to do with your business,

343
00:21:30.780 --> 00:21:33.660
but have a lot to
do with administration. I call

344
00:21:33.660 --> 00:21:38.100
it administrivia of these, these
things. And I thought we

345
00:21:38.100 --> 00:21:40.830
just makes it a lot
easier building on top of

346
00:21:40.830 --> 00:21:44.250
the investments that the frameworks
team has made in document

347
00:21:44.250 --> 00:21:47.400
photos based workflows. So we
just give you a lot

348
00:21:47.400 --> 00:21:50.550
of tools out of the
box, easy for administrators to

349
00:21:50.550 --> 00:21:54.990
actually use and learn to
monitor the workflows, start, stop

350
00:21:54.990 --> 00:21:58.830
them and troubleshoot them as
well. Okay. So I've got

351
00:21:58.830 --> 00:22:02.070
my application that has its
own database for doing whatever

352
00:22:02.070 --> 00:22:06.330
my application does. I get
a persistent storage for managing

353
00:22:06.330 --> 00:22:10.980
the instance lifetime. We've got
health monitoring services and things

354
00:22:10.980 --> 00:22:14.760
like that. What about configuring?
What about sharing settings between

355
00:22:14.760 --> 00:22:19.560
w a F services and
WCF services? Actually, that's usually

356
00:22:19.560 --> 00:22:24.210
the biggest pain that we've
seen with most applications, which

357
00:22:24.630 --> 00:22:28.650
need to host on an
infrastructure line I S or

358
00:22:28.650 --> 00:22:32.610
anywhere staff for that matter.
We do have very heavily

359
00:22:33.660 --> 00:22:37.440
fall back and depend on
the ISP configuration itself, because

360
00:22:37.710 --> 00:22:40.920
I think the IST team
is find the need on

361
00:22:40.920 --> 00:22:43.200
how to manage configuration, not
the machine level. So you

362
00:22:43.200 --> 00:22:46.470
have policy at the machine
level that you can enforce,

363
00:22:46.980 --> 00:22:50.040
and then you have a
clear concept of application fools,

364
00:22:50.580 --> 00:22:54.150
and you can have configurations
and talking in Cortez and

365
00:22:54.150 --> 00:22:58.890
that level, and then your
applications configuration itself is just

366
00:22:58.890 --> 00:23:02.820
a simple convict file where
you can author that outside

367
00:23:02.970 --> 00:23:05.670
and maintain it outside of
your application code itself and

368
00:23:05.670 --> 00:23:09.480
use it. And what our
fabric does is it helps

369
00:23:09.480 --> 00:23:13.710
you with that configuration using
the same ISPN configuration concept

370
00:23:13.920 --> 00:23:17.910
and underlying tech stack, which
is you have machine config

371
00:23:18.060 --> 00:23:21.360
and you have a dark
config do manage the configuration

372
00:23:21.360 --> 00:23:26.040
of your, into an application.
So you get basic configuration

373
00:23:26.040 --> 00:23:30.660
support of ability. Why do
you have fabric dashboard? Oh,

374
00:23:30.660 --> 00:23:33.000
so it's all inside the
dashboard. So managing a service

375
00:23:33.000 --> 00:23:34.980
and the dashboard looks the
same as managing a site.

376
00:23:36.810 --> 00:23:38.760
All right, cool. That's a
simple way to put it.

377
00:23:38.850 --> 00:23:42.540
So what we did for
services, what I assessed for

378
00:23:42.540 --> 00:23:45.680
ASI. Oh, that's cool. That's
a good way to put

379
00:23:45.680 --> 00:23:48.380
it. Okay. I'm trying to,
I'm actually, I'm I'm in

380
00:23:48.380 --> 00:23:50.480
my mind, I'm listing out
kind of all the things

381
00:23:50.480 --> 00:23:52.700
that I had to do
at my last job and

382
00:23:52.700 --> 00:23:54.650
seeing if I can get
rid of as much of

383
00:23:54.650 --> 00:23:57.500
these as possible. The other
thing that I had to

384
00:23:57.500 --> 00:23:59.810
do was I had to
write a bunch of PowerShell

385
00:23:59.810 --> 00:24:04.520
tasks to manage our services.
This is right when PowerShell

386
00:24:04.520 --> 00:24:06.380
came out. So it was
a little controversial and a

387
00:24:06.380 --> 00:24:09.380
lot of people didn't know
about PowerShell, but I basically

388
00:24:09.380 --> 00:24:14.600
automated a bunch of stuff,
managing, managing health, data, monitoring

389
00:24:14.600 --> 00:24:18.320
data, starting and stopping services.
What kind of PowerShell love

390
00:24:18.320 --> 00:24:20.950
can you give me here?
Huge, huge fan of power

391
00:24:20.950 --> 00:24:23.950
cells. Let me, let me
put my bias out there

392
00:24:23.950 --> 00:24:27.610
before I answer that question.
So in general, what we

393
00:24:27.610 --> 00:24:30.850
are seeing across Microsoft, the
principle we are following is

394
00:24:30.850 --> 00:24:33.340
that if you can do
it through UI, you should

395
00:24:33.340 --> 00:24:35.650
be able to do it
through a power show. And

396
00:24:35.680 --> 00:24:38.590
I'm not that the theme
as they follow the principles

397
00:24:39.010 --> 00:24:41.680
for fabric all up. And
in fact, the more things

398
00:24:41.680 --> 00:24:45.370
you can do probably through
PowerShell, then what you can

399
00:24:45.370 --> 00:24:49.420
do from even dashboard. And
we've made sure that everything

400
00:24:49.420 --> 00:24:53.740
you can do through the
dashboard, which is setting up

401
00:24:53.740 --> 00:24:57.460
the services, monitoring the services,
being able to spit out

402
00:24:57.460 --> 00:25:00.430
the status of any other
workflow instances, look at troubleshooting

403
00:25:00.430 --> 00:25:04.330
logs, all that can actually
be done through PowerShell so

404
00:25:04.330 --> 00:25:08.230
that if you want to
build your own custom dashboards,

405
00:25:08.260 --> 00:25:12.100
or if you want to
integrate with our operations stools,

406
00:25:12.340 --> 00:25:14.590
or if you want to
be able to build a

407
00:25:14.590 --> 00:25:19.720
larger portal for your application
as the banking industry that

408
00:25:19.720 --> 00:25:22.060
you've talked about, I'm pretty
sure they have a lot

409
00:25:22.060 --> 00:25:25.750
of different frameworks and tools
already in place for them

410
00:25:25.750 --> 00:25:29.500
to really go fight a
bias. Every time they need

411
00:25:29.500 --> 00:25:32.410
to go look at something
might not be acceptable things.

412
00:25:32.440 --> 00:25:36.010
So what we did with
all the cool stuff that

413
00:25:36.010 --> 00:25:38.200
we build in the dashboard,
we enabled it through our

414
00:25:38.200 --> 00:25:41.260
shelf completely so that you
can put it your own

415
00:25:42.250 --> 00:25:47.320
company, specific something you loved
and professed dashboard tooling and

416
00:25:47.320 --> 00:25:51.820
integrate our fabric capabilities into
that using PowerShell. Okay. So

417
00:25:51.820 --> 00:25:54.160
I could write my own
UI, my own GUI even,

418
00:25:54.610 --> 00:25:57.550
and then call the PowerShell
stuff by hosting PowerShell command.

419
00:25:57.550 --> 00:26:02.950
Let's within my, my management
application. Exactly. And we've gone

420
00:26:02.950 --> 00:26:05.260
through the pain of making
sure that pretty much everything

421
00:26:05.260 --> 00:26:08.560
we get through UI, we
get through PowerShell. So you

422
00:26:08.560 --> 00:26:12.400
won't be charged, charged that.
That's cool. That's cool. All

423
00:26:12.400 --> 00:26:13.810
right. And then the thing
that we've actually haven't really

424
00:26:13.810 --> 00:26:17.050
talked too much about was
formerly code named velocity, which

425
00:26:17.050 --> 00:26:20.950
is our distributed caching. And
that's baked into app fabric

426
00:26:20.950 --> 00:26:26.260
as well. Yes, actually, these
were earlier two different technologies

427
00:26:26.530 --> 00:26:29.440
that people just wanted to
sign as coordinating Dublin, which

428
00:26:29.440 --> 00:26:31.750
was all the technologies we
just talked about on our

429
00:26:32.290 --> 00:26:38.620
hosting management and troubleshooting and
config, and then velocity that

430
00:26:38.620 --> 00:26:42.880
was so we have to
coordinate Dublin and velocity and

431
00:26:43.620 --> 00:26:47.430
finally got them together. Cause
he figured that our web

432
00:26:47.430 --> 00:26:50.100
developers and app developers can
actually use both of them

433
00:26:50.100 --> 00:26:54.120
together and call them out
fabric as the signaling, the

434
00:26:54.120 --> 00:26:59.120
first application server from Microsoft.
Okay. And this works in

435
00:27:00.260 --> 00:27:04.370
client windows seven and Vista
for developers. But this runs

436
00:27:04.370 --> 00:27:08.900
on windows server 2008, both
service pack two and windows

437
00:27:08.900 --> 00:27:13.190
server 2008 or two. Is
that correct? Is disconnect. Yes.

438
00:27:13.670 --> 00:27:18.020
So the app fabric itself
is an extension or an

439
00:27:18.020 --> 00:27:21.080
add on, or actually technically
it's an offline component on

440
00:27:21.080 --> 00:27:23.240
top of windows server itself.
So if you have in

441
00:27:23.240 --> 00:27:26.720
December, 2008, SP two, and if,
or if you're in the

442
00:27:26.720 --> 00:27:31.550
<inaudible>, you already are entitled
or already have a license

443
00:27:31.550 --> 00:27:34.940
for our fabric. So these
are the two platforms that

444
00:27:34.940 --> 00:27:37.340
can run on. You don't
need to do anything special

445
00:27:37.340 --> 00:27:39.830
to go buy it on
license. There don't figure out

446
00:27:39.830 --> 00:27:41.960
how to get it. You
just get through this download

447
00:27:41.960 --> 00:27:45.470
package, which we released about
two weeks ago at tech

448
00:27:45.470 --> 00:27:48.980
ed. So it's available publicly.
Now people can go download,

449
00:27:48.980 --> 00:27:51.230
install, and play with it.
Ah, here we go. So

450
00:27:51.230 --> 00:27:52.850
now I get to nail
you down. So this is,

451
00:27:53.180 --> 00:27:55.460
this is released. This is
not like, cause it kind

452
00:27:55.460 --> 00:27:57.440
of felt like it was
in a permanent beta, but

453
00:27:57.440 --> 00:28:03.170
this is done. This is
done in its first version.

454
00:28:03.170 --> 00:28:06.680
Yeah. Excuse me. I see.
So version one is done

455
00:28:06.980 --> 00:28:09.200
and this is a part
of windows. So it's, it's,

456
00:28:09.230 --> 00:28:12.920
it's supported if I call
and I say I'm running

457
00:28:12.920 --> 00:28:15.980
windows server 2008 or two,
I'm using app fabric. They're

458
00:28:15.980 --> 00:28:18.770
going to know what I
mean. And I'm going to

459
00:28:18.770 --> 00:28:22.940
be as supported as anything
else on windows. Exactly. This

460
00:28:22.940 --> 00:28:26.090
is no longer a download
you play where it's no

461
00:28:26.090 --> 00:28:29.540
longer a quarterback's tools thing.
You just can get an

462
00:28:29.930 --> 00:28:33.230
experiment where this is actually
a full windows server component

463
00:28:33.680 --> 00:28:35.660
and you get the full
windows server support. You can

464
00:28:35.660 --> 00:28:40.160
call it BSS. And Okay.
Now for people who are

465
00:28:40.160 --> 00:28:43.520
using 2003, this, this is
not something that runs on

466
00:28:43.520 --> 00:28:47.210
windows server 2003. But I,
I did notice that if

467
00:28:47.210 --> 00:28:50.720
you are a client of
the distributed cash. So if

468
00:28:50.720 --> 00:28:55.100
you have some existing services
in 2008, 2003 servers that

469
00:28:55.100 --> 00:28:58.580
you have already can talk
to that distributed cash with

470
00:28:58.580 --> 00:29:03.170
the, with a downloadable little
piece that lets 2003 servers

471
00:29:03.170 --> 00:29:07.730
talk to velocity. Interesting, Scott,
you, you know, all little

472
00:29:07.730 --> 00:29:12.140
secrets. So yes, we made
a separate Han load weldable

473
00:29:12.740 --> 00:29:17.390
specifically for, you know, customers
who lost still in the

474
00:29:17.420 --> 00:29:20.540
migration phase of moving from
windows 2003 based web service

475
00:29:21.530 --> 00:29:24.530
thousand eight. What we did
was give them an easier

476
00:29:24.590 --> 00:29:26.870
path of migrating and thing
and telling them, you know,

477
00:29:26.870 --> 00:29:30.350
what is available with windows
2008 when they upgrade completely.

478
00:29:30.830 --> 00:29:33.560
So when you download the
windows seven, our fabric package,

479
00:29:33.590 --> 00:29:35.840
you don't get that line,
but there is a separate

480
00:29:35.840 --> 00:29:39.890
download available for that class
for customers to just help

481
00:29:39.890 --> 00:29:46.600
them ease the migration process
and to use distributed cash

482
00:29:47.200 --> 00:29:50.650
from the industry thousand three
based web service. So it's

483
00:29:50.650 --> 00:29:52.990
an interim thing that we
hope people can use for

484
00:29:52.990 --> 00:29:58.620
short term and help them
migrate to understood eventually. Yeah,

485
00:29:58.620 --> 00:30:01.470
I mean, for me as
a developer, the reason to

486
00:30:01.470 --> 00:30:04.470
go to 2008 or go
to windows seven is <inaudible>.

487
00:30:04.590 --> 00:30:07.710
I mean, just <inaudible> and
I'm saying this as a

488
00:30:07.710 --> 00:30:11.370
developer, more than I am
a paid Microsoft shill, but

489
00:30:12.000 --> 00:30:14.550
I seven is so much
better than I as six.

490
00:30:14.550 --> 00:30:17.040
So you definitely want to
get on iOS seven if

491
00:30:17.040 --> 00:30:19.950
you can. But if you
have an existing application that

492
00:30:19.950 --> 00:30:22.800
you just, for whatever reason,
the boss insists that it

493
00:30:22.800 --> 00:30:25.980
runs on server 2003, it's
nice to know that you

494
00:30:25.980 --> 00:30:30.300
could take advantage of that
distributed caching on your 2008

495
00:30:30.300 --> 00:30:33.990
machines kind of remotely from
your 2003 machine that you're

496
00:30:33.990 --> 00:30:36.930
maybe in the process of,
of doing a migration on.

497
00:30:37.710 --> 00:30:39.870
I just thought that was
a nice nod to the

498
00:30:39.870 --> 00:30:41.310
people who are doing that
because, you know, we, we

499
00:30:41.310 --> 00:30:44.580
tend to come out with
stuff very quickly. And it's

500
00:30:44.580 --> 00:30:47.250
cool that even though windows
server 2003 is seven years

501
00:30:47.250 --> 00:30:52.770
old that this, that this
interim thing exists. Yes. And

502
00:30:52.890 --> 00:30:56.370
in the sport life cycle
of this is support lifecycle

503
00:30:56.370 --> 00:30:59.160
of windows 2003. So I
think we still have a

504
00:30:59.160 --> 00:31:01.530
few more months. I'm not,
I'm don't remember the data

505
00:31:01.530 --> 00:31:04.200
anymore, but often it's through
the elementary support. So I'm

506
00:31:04.200 --> 00:31:07.070
hoping that people who can
use it till then and

507
00:31:07.080 --> 00:31:10.500
use this component and quickly
migrate for reasons you just

508
00:31:10.500 --> 00:31:15.780
described to <inaudible>. So let
me think of it. Let

509
00:31:15.780 --> 00:31:18.000
me think here, if there's
anything I've forgotten. So there's

510
00:31:18.000 --> 00:31:21.030
a management pack. If you're
using operations manager that you

511
00:31:21.030 --> 00:31:23.850
can actually manage app fabric
within that as well. Right?

512
00:31:24.210 --> 00:31:28.110
Correct. So if you have
investments in operations management system

513
00:31:28.110 --> 00:31:31.350
center, you can actually use
the management bank. And what

514
00:31:31.350 --> 00:31:35.250
that does is it gives
you the fabric dashboard, like

515
00:31:35.250 --> 00:31:40.500
capabilities of doing monitoring. Why,
why are your system centers,

516
00:31:40.500 --> 00:31:42.840
operation manager, you, why? So
you get a lot of

517
00:31:42.840 --> 00:31:46.620
fat. And in addition to
that, because the management pack

518
00:31:46.800 --> 00:31:51.030
is sitting outside the box
itself, it can also do

519
00:31:51.330 --> 00:31:55.140
health wandering off the server
itself and the database as

520
00:31:55.140 --> 00:31:57.660
well. So management back the
way to think about it

521
00:31:57.660 --> 00:32:03.030
is what the fabric dashboard
provides you for monitoring last

522
00:32:03.030 --> 00:32:06.780
plus, because it can also
do machine or civil management

523
00:32:06.810 --> 00:32:12.240
also monitoring for the fabric
over as well. So folks

524
00:32:12.240 --> 00:32:18.550
can go to msdn.com/app fabric
too, to get this, but

525
00:32:18.550 --> 00:32:20.520
I it's, is it true?
They can also get it

526
00:32:20.520 --> 00:32:24.420
inside of the, the web
platform installer. That is. So

527
00:32:24.450 --> 00:32:29.250
in fact, I personally always
use the web dot from

528
00:32:29.250 --> 00:32:32.970
installer on my development machine
just to get started. And

529
00:32:32.970 --> 00:32:36.990
when I Matthew deploying applications,
then I actually go use

530
00:32:36.990 --> 00:32:39.860
the full setup and then
on our package, but YPI

531
00:32:39.860 --> 00:32:43.910
is so cool. It just
automates the whole process for

532
00:32:43.910 --> 00:32:48.110
me that I can pick,
start installed SQL express installs.

533
00:32:48.470 --> 00:32:52.010
Yeah. Fabric weights, configures. I
am ready to go with

534
00:32:52.010 --> 00:32:54.970
it once. I'm back with
my coffee. Yeah. During some

535
00:32:54.970 --> 00:32:58.180
of the betas and CTPs
I found velocity and app

536
00:32:58.180 --> 00:33:02.500
fabric difficult to install, but
the, the, the final releases

537
00:33:02.500 --> 00:33:04.420
is actually not difficult at
all. I was able to

538
00:33:04.420 --> 00:33:07.690
put it together in about
10 minutes and it's even

539
00:33:07.690 --> 00:33:09.850
faster being able to just
go into the web platform

540
00:33:09.850 --> 00:33:13.240
installer and add it from
there. So yeah, if you

541
00:33:13.240 --> 00:33:15.130
can, if you can use
the web platform installer, it's

542
00:33:15.130 --> 00:33:19.930
definitely considerably easier. And while
we didn't get a lot

543
00:33:19.930 --> 00:33:23.680
of time to talk about
the distributed cash today, but

544
00:33:23.680 --> 00:33:26.860
I believe Scott you've already
had a nice long conversation

545
00:33:26.860 --> 00:33:30.100
with Anil on this in
the past, but I would

546
00:33:30.460 --> 00:33:33.670
strongly recommend looking at the
caching. And I think that's

547
00:33:34.600 --> 00:33:37.060
probably the coolest thing you
would have seen on, on

548
00:33:37.060 --> 00:33:41.620
mixer platform, which signals our
intent for our future roadmap

549
00:33:41.620 --> 00:33:44.620
as well. And taking a
few minutes just to quickly

550
00:33:44.620 --> 00:33:50.140
describe what is so special
about distributed cash. It actually

551
00:33:50.290 --> 00:33:54.360
builds on an architecture. What
I personally like to call

552
00:33:54.380 --> 00:33:57.610
is the cloud architecture and
whether it was on premises,

553
00:33:57.640 --> 00:34:02.590
which is instead of setting
up clustering or other ways

554
00:34:02.590 --> 00:34:07.900
of achieving high availability, which
are great for the workloads

555
00:34:07.900 --> 00:34:11.410
that work on today. But
things like caching, which are

556
00:34:11.700 --> 00:34:14.050
stateful things, you have data.
If you're just starting in

557
00:34:14.050 --> 00:34:16.450
cash at the same time,
you need a little bit

558
00:34:16.450 --> 00:34:21.190
of D very quickly and
cheaply. So instead of relying

559
00:34:21.190 --> 00:34:26.830
on other old ways of
different ways of achieving that

560
00:34:26.830 --> 00:34:30.910
high availability, what we've done
is we've used a lot

561
00:34:30.910 --> 00:34:34.750
of the same concept set
Bible, or C-Class your infrastructure

562
00:34:36.220 --> 00:34:39.520
in velocity, which is just
a good cash and made

563
00:34:39.580 --> 00:34:42.910
a highly available and a
distributed cash, whether it was

564
00:34:42.910 --> 00:34:48.010
on premises. So setting up
a five North cash or

565
00:34:48.010 --> 00:34:51.100
10 or cash and setting
up in a high availability

566
00:34:51.100 --> 00:34:54.670
configuration, it's all a matter
of just adding more nodes.

567
00:34:55.420 --> 00:34:57.820
You don't have to worry
about how to manage a

568
00:34:57.830 --> 00:35:01.510
cash cost, how to configure
it, how to manage the

569
00:35:01.510 --> 00:35:06.370
uptime and availability. A lot
of those problems having obstructed

570
00:35:06.370 --> 00:35:10.330
and moving away from the
administration experience down to the

571
00:35:10.330 --> 00:35:15.670
platform itself. So what cash
builds on today, I'm hoping

572
00:35:15.670 --> 00:35:18.670
will be the substrate photo,
blurting out all our future

573
00:35:18.670 --> 00:35:22.120
technologies, which need to scale
up and still provide the

574
00:35:22.120 --> 00:35:26.710
Ohio availability needs. So from
that perspective, just wanting to

575
00:35:26.770 --> 00:35:29.560
put that small plugins thing,
if you're interested in knowing

576
00:35:29.560 --> 00:35:34.000
what's coming in future from
our fabric lossy or the

577
00:35:34.000 --> 00:35:38.880
distributed cash is a great
architecture and signaling our intent

578
00:35:38.880 --> 00:35:44.340
for building lot scale, highly
available, very elastic and redundant

579
00:35:44.820 --> 00:35:49.080
capabilities of compute onto the
rest of our stacks of

580
00:35:49.620 --> 00:35:53.390
fabric and app server technologies.
And, and I, like you

581
00:35:53.390 --> 00:35:55.400
said earlier, the best part
of it all is that

582
00:35:55.940 --> 00:35:57.680
you don't have to buy
anything in the sense that

583
00:35:57.680 --> 00:35:59.930
if you have a licensing
server, you already have this.

584
00:36:00.500 --> 00:36:03.680
So yeah, if you need
a memory server, especially one

585
00:36:03.680 --> 00:36:06.110
that has high availability, which
is a feature that isn't

586
00:36:06.110 --> 00:36:10.970
available in some other memory
server products, then definitely check

587
00:36:10.970 --> 00:36:13.520
out velocity inside of that
factor. Okay. And you'll be

588
00:36:13.520 --> 00:36:15.680
amazed at how easy this
use. Cause when I bought

589
00:36:15.680 --> 00:36:19.070
the first complication was doing
a simple asp.net talking to

590
00:36:19.070 --> 00:36:23.990
a secret database, using SQL
for both my session state,

591
00:36:23.990 --> 00:36:27.860
as well as for actual
data switching to velocity, I

592
00:36:27.860 --> 00:36:30.080
thought I'd be spending a
lot more time on actually

593
00:36:30.650 --> 00:36:33.860
setting up and configuring lossy
as opposed to writing application

594
00:36:33.860 --> 00:36:38.930
logic and the switch to
setting up a simple cluster

595
00:36:39.710 --> 00:36:43.220
and getting to use the
cash. It was so easy.

596
00:36:43.370 --> 00:36:46.850
And with the out-of-box ASP
document session state provider that

597
00:36:46.850 --> 00:36:51.080
we ship switching from using,
you know, CQL or something

598
00:36:51.080 --> 00:36:54.440
else you might be using
today, we're using velocity as

599
00:36:54.440 --> 00:36:58.670
CRSP documentation. Data provider was
simple and very quick. So

600
00:36:58.670 --> 00:37:01.580
we have that available out
of the box for people

601
00:37:01.580 --> 00:37:04.640
to make that switch today.
In addition, you can use

602
00:37:05.300 --> 00:37:08.900
the distributed cache for storing
any other data that you

603
00:37:08.900 --> 00:37:13.490
might want to make available
next to your rep or

604
00:37:13.490 --> 00:37:18.860
your application deal and still
access that while accessing the

605
00:37:18.860 --> 00:37:23.240
database in Barlow or reducing
the need to access database

606
00:37:23.240 --> 00:37:27.560
on frequently. Very cool. Well,
I'll add links to everything,

607
00:37:27.560 --> 00:37:30.140
including white papers and where
people can download stuff in

608
00:37:30.140 --> 00:37:32.960
the show notes. And thank
you so much. Karen de

609
00:37:32.960 --> 00:37:38.750
Pinon from the distributed application
server group for taking time

610
00:37:38.750 --> 00:37:40.910
to chat with me today.
Thanks for having me, Scott.

611
00:37:42.470 --> 00:37:45.410
This has been another episode
of Hansel minutes and I'll

612
00:37:45.410 --> 00:37:46.580
see you again next week.

