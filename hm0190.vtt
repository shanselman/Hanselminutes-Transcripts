WEBVTT FILE

1
00:00:04.920 --> 00:00:17.150
<inaudible> From Hansel minutes.com. It's
Hansel minutes, a weekly discussion

2
00:00:17.150 --> 00:00:21.890
with web developer and technologist
Scott Hanselman. This is Lawrence Ryan

3
00:00:21.950 --> 00:00:27.920
announcing show number one 93.
Recorded live Thursday, December 3rd, 2009. Support

4
00:00:27.920 --> 00:00:31.040
for Hansel minutes is provided
by Tellerik rad controls, the

5
00:00:31.040 --> 00:00:34.670
most comprehensive suite of components
for windows forums and asp.net

6
00:00:34.670 --> 00:00:43.610
web applications online@wwwdotelerik.com. In this
episode, Scott talks with developers,

7
00:00:43.760 --> 00:00:48.350
Lee Holmes and Jason shirk.
Hi, this is Scott Hanselman

8
00:00:48.350 --> 00:00:49.940
and this is another episode
of Hansel minutes and I'm

9
00:00:49.940 --> 00:00:53.180
here on campus at Microsoft
in beautiful Redmond, Washington, and

10
00:00:53.180 --> 00:00:54.590
it's actually a pleasant day
to day. And we're in

11
00:00:54.590 --> 00:00:56.720
the commons, which is kind
of the central area of

12
00:00:56.720 --> 00:00:59.150
the Microsoft campus. And I'm
sitting down with Lee Holmes

13
00:00:59.180 --> 00:01:02.600
and Jason shirk. How's it
going, guys? How you doing?

14
00:01:03.080 --> 00:01:05.180
Hey, how's it going? And
you guys work on the

15
00:01:05.180 --> 00:01:07.850
power shell team. Lee, what
do you work on specifically?

16
00:01:08.540 --> 00:01:12.410
I'm a developer on the
PowerShell team and I in

17
00:01:12.410 --> 00:01:16.520
version two, I worked on
eventing and the transactions and

18
00:01:16.580 --> 00:01:19.580
all of the provider infrastructure,
the file system and the

19
00:01:19.580 --> 00:01:23.060
registry. And Jason, what do
you do? I work on

20
00:01:23.060 --> 00:01:27.980
the language, the parser and
the interpreter, and did some

21
00:01:27.980 --> 00:01:31.400
other things like the comment
based help. Now I was,

22
00:01:31.400 --> 00:01:33.680
I was hardcore into PowerShell.
I just thought PowerShell was

23
00:01:33.680 --> 00:01:35.810
the greatest thing. And then
I just, I needed it

24
00:01:35.810 --> 00:01:38.480
less. I use it probably
three or four times a

25
00:01:38.480 --> 00:01:40.580
week, but I wouldn't say
I'm living in it like

26
00:01:40.580 --> 00:01:42.950
I used to. So I
have to admit some ignorance

27
00:01:42.950 --> 00:01:46.520
around PowerShell too. I know
I've got windows seven, so

28
00:01:46.520 --> 00:01:49.070
I have PowerShell automatically, right?
Two O ships with a

29
00:01:49.070 --> 00:01:51.410
seven. Is that right? Yes,
it does. Definitely. And is

30
00:01:51.410 --> 00:01:53.990
this a secret different version
of like two Oh dot

31
00:01:54.110 --> 00:01:56.540
magical something? Something or is
this two Oh two? Oh,

32
00:01:56.540 --> 00:01:59.210
for everybody two. Oh, is
two over everybody. It's the

33
00:01:59.210 --> 00:02:01.850
same on a windows seven
and all the dumb down

34
00:02:01.850 --> 00:02:04.640
level platforms. Okay. So existing
folks that have got it.

35
00:02:04.640 --> 00:02:07.610
Listeners who maybe haven't upgraded
yet. They've got Vista. They

36
00:02:07.610 --> 00:02:10.430
just removed PowerShell and put
it back on or does

37
00:02:10.430 --> 00:02:13.540
it upgrade? They, yeah, they
uninstalled it and then they

38
00:02:13.580 --> 00:02:17.030
download the management windows management
pack. Oh, that's what it's

39
00:02:17.030 --> 00:02:20.120
called. And will their scripts
work with it is the

40
00:02:20.120 --> 00:02:24.050
language is compatible. Yes, it
is backwards compatible. There's a

41
00:02:24.330 --> 00:02:27.830
upfront design criteria to make
sure that all scripts run

42
00:02:28.100 --> 00:02:32.480
in V one and V
two. Okay. So it's everything

43
00:02:32.500 --> 00:02:34.640
still works. Should I should
be able to upgrade without

44
00:02:34.640 --> 00:02:37.130
fear? I think it's the
point. Exactly. Now what about

45
00:02:37.130 --> 00:02:41.300
my applications? I make.net applications
that may be hosted PowerShell

46
00:02:41.300 --> 00:02:44.000
or talk to the, those
actual assemblies and reference them.

47
00:02:44.030 --> 00:02:45.800
Are they going to break?
Yeah, we didn't, we didn't

48
00:02:45.800 --> 00:02:48.410
change the APIs. We added
a whole bunch of new

49
00:02:48.410 --> 00:02:52.490
APIs to make some things
easier, but the, the API

50
00:02:52.490 --> 00:02:54.140
is, and if you want
are still there. Okay, cool.

51
00:02:54.140 --> 00:02:56.960
So PowerShell too. Don't be
afraid. That's what I'm hearing

52
00:02:56.960 --> 00:02:58.970
you say. Exactly. All right.
That's cool. So what kind

53
00:02:58.970 --> 00:03:01.090
of did you add In
the language? Because to be

54
00:03:01.090 --> 00:03:04.150
honest, I and installed every
installed on my Vista machine

55
00:03:04.150 --> 00:03:06.010
and I got it on
my windows seven machine. It's

56
00:03:06.010 --> 00:03:08.590
still a blue background. It's
still a white text. It's

57
00:03:08.590 --> 00:03:13.360
a shell. It doesn't exactly
advertise. It's V Tunis. Exactly.

58
00:03:13.360 --> 00:03:16.590
What's new. So one of
the biggest language features that

59
00:03:16.590 --> 00:03:20.760
we added was the ability
to write something that looks

60
00:03:20.760 --> 00:03:23.520
and behaves like a commandlet,
but to write it in

61
00:03:23.580 --> 00:03:28.470
PowerShell script. So getting all
the power of, of being

62
00:03:28.470 --> 00:03:32.460
able to, you know, operate
on objects that are passed

63
00:03:32.460 --> 00:03:35.490
through the pipe, Like a
command that is like verb,

64
00:03:35.640 --> 00:03:39.480
hyphen noun, like get hyphen
cheese, right. And you would

65
00:03:39.480 --> 00:03:42.210
write a command lit with
a C sharp or VB,

66
00:03:42.210 --> 00:03:44.490
and you'd make it a,
an assembly and you load

67
00:03:44.490 --> 00:03:46.710
it into PowerShell and it
would become part of the

68
00:03:46.710 --> 00:03:48.480
system. And it would be
just the same as the

69
00:03:48.480 --> 00:03:51.240
existing commandlets right. It would
be a peer yes. Of

70
00:03:51.240 --> 00:03:54.570
get process and this and
that. And, and, and you

71
00:03:54.570 --> 00:03:56.940
had to be a C
sharp. And in order to

72
00:03:56.940 --> 00:04:00.840
write a commandlet, now you
can be a scripter and

73
00:04:00.900 --> 00:04:03.990
get the same power and
flexibility that, that commandlet authors

74
00:04:03.990 --> 00:04:05.670
had. And do you one,
you can get that in

75
00:04:05.670 --> 00:04:08.160
vitro, Right? Cause in PowerShell
originally, when I wrote a

76
00:04:08.160 --> 00:04:11.250
script, it felt like a
batch file in the sense

77
00:04:11.250 --> 00:04:14.550
that I would, I would
write a food <inaudible> and

78
00:04:14.550 --> 00:04:17.670
the way I ran it
would be dot slash <inaudible>.

79
00:04:17.970 --> 00:04:20.130
But when I wanted to
chain things together, and that

80
00:04:20.130 --> 00:04:22.260
was the magic of PowerShell,
right. Being able to change

81
00:04:22.290 --> 00:04:24.510
things in a pipeline, I
could do it, but it

82
00:04:24.510 --> 00:04:29.370
was highly nontrivial, Still not
trivial. You know, the, the

83
00:04:29.370 --> 00:04:31.890
syntax is a little bit
cumbersome, but there's a lot

84
00:04:31.890 --> 00:04:34.260
of power, a lot more
power in V2. Okay. And

85
00:04:34.260 --> 00:04:36.060
I can do this in
notepad. I can just write

86
00:04:36.060 --> 00:04:38.790
this thing in. Okay. Absolutely.
I wouldn't recommend notepad. A

87
00:04:38.790 --> 00:04:40.680
lot of people do use
notepad and in V2, we

88
00:04:40.680 --> 00:04:43.590
added a new feature of
the, the ISE, the integrated

89
00:04:43.590 --> 00:04:47.820
scripting environment. So PowerShell under
bar ISC is a full

90
00:04:47.820 --> 00:04:51.540
featured editor for PowerShell. And
it's designed to make it

91
00:04:51.540 --> 00:04:56.340
easy to develop. And this
includes debugging and watches Debugger

92
00:04:56.340 --> 00:04:59.430
in there. Definitely. So you
can just set break points,

93
00:04:59.430 --> 00:05:01.980
hit, go, and then it'll
stop on your break points.

94
00:05:03.180 --> 00:05:07.110
You have a syntax coloring
the editor, you have a

95
00:05:07.140 --> 00:05:09.810
output pain, so you can
see the results of running

96
00:05:09.810 --> 00:05:12.540
your script. I can run.
Now when I write these,

97
00:05:12.570 --> 00:05:14.820
these command let's because this
new feature, the ability to

98
00:05:14.820 --> 00:05:17.130
write commands with script is
interesting to me, how do

99
00:05:17.130 --> 00:05:19.590
I let PowerShell know about
it? Cause that was one

100
00:05:19.590 --> 00:05:22.440
of the things that was
confusing about commandlets before was

101
00:05:22.440 --> 00:05:24.810
the, there are all of
the ones that PowerShell comes

102
00:05:24.810 --> 00:05:27.180
with out of the box.
And then there are the

103
00:05:27.180 --> 00:05:30.000
five or six or 12
I want to add. Oh

104
00:05:30.000 --> 00:05:31.590
yeah. And if you won,
you had a snap in,

105
00:05:31.590 --> 00:05:33.280
and then there was a
little bit of work to,

106
00:05:33.280 --> 00:05:38.580
to install that and then,
and load it and comparing

107
00:05:38.580 --> 00:05:40.650
that to like having a
script, you have a path

108
00:05:40.680 --> 00:05:42.330
and you just run your
script. That's in the path.

109
00:05:42.600 --> 00:05:46.800
Well, these, the, the V2
script commandlets are just ordinary

110
00:05:46.800 --> 00:05:49.140
scripts. So if you have
a function in your profile

111
00:05:49.140 --> 00:05:52.410
or you dot source of
a script file, and so

112
00:05:52.410 --> 00:05:55.050
you, it adds a function
to your, your environment, then

113
00:05:55.050 --> 00:05:57.230
you just run it like
any other script or other

114
00:05:57.230 --> 00:05:59.660
function. Now you just said,
dot source. Can you explain

115
00:05:59.660 --> 00:06:01.310
to our listeners who may
not be familiar with PowerShell?

116
00:06:01.310 --> 00:06:03.770
What that means? So dot
sourcing is just a way

117
00:06:03.770 --> 00:06:07.400
of, if you run a
script and there's a function

118
00:06:07.400 --> 00:06:09.260
in the script, when the
script exits that function has

119
00:06:09.260 --> 00:06:11.960
gone, if you dot source
the script, then that function

120
00:06:11.960 --> 00:06:14.180
will, will live on after
the script is exited and

121
00:06:14.180 --> 00:06:16.280
you can run the function
later. And what I just

122
00:06:16.280 --> 00:06:19.550
say, dot space.space, and then
the name of the script

123
00:06:19.610 --> 00:06:23.420
and it shows up. Yep.
So I dot source a

124
00:06:23.540 --> 00:06:26.870
commandlet and it becomes available.
Yep. And then I can

125
00:06:26.870 --> 00:06:28.820
say one way to do
it another way, another way

126
00:06:28.820 --> 00:06:29.990
to do it. It's just,
if it's in a script

127
00:06:29.990 --> 00:06:33.620
file, <inaudible> file. So you
could have get dash my

128
00:06:33.620 --> 00:06:35.480
thing, not P S one.
And if that's in your

129
00:06:35.480 --> 00:06:39.260
path, then it's just automatically,
and I don't have to

130
00:06:39.260 --> 00:06:41.510
refer to the.ps one to
do it. Well, that was

131
00:06:41.510 --> 00:06:44.210
pretty cool. All right. And,
and where's the primary place

132
00:06:44.210 --> 00:06:46.790
people go for this kind
of stuff to go for

133
00:06:46.820 --> 00:06:48.230
or to learn about this?
I go to the PowerShell

134
00:06:48.230 --> 00:06:52.330
blog or they go to
msdn.com/scripting. Yeah. Tech center, tech,

135
00:06:52.380 --> 00:06:56.180
tech, tech, tech, tech techniques,
and MSDN, or to Goodwill

136
00:06:56.210 --> 00:06:57.770
and I, and the PowerShell
blog. Of course there are

137
00:06:57.770 --> 00:07:02.300
a lot of good community
logs. MVPs have a lot

138
00:07:02.300 --> 00:07:04.640
of interesting blogs too. And
what were some of the

139
00:07:04.640 --> 00:07:08.360
other language features that were
added in V2? So, yeah,

140
00:07:08.360 --> 00:07:11.120
script commands was the big
one. We added a try

141
00:07:11.120 --> 00:07:14.660
catch finally. Okay. So for
C sharp developers, that's a,

142
00:07:14.660 --> 00:07:20.180
a little more natural than
the trap from V1. Does

143
00:07:20.180 --> 00:07:22.580
it underlying, does it look
like, does it ultimately kind

144
00:07:22.580 --> 00:07:26.380
of map to a trap?
Not exactly. They're there, they're

145
00:07:26.420 --> 00:07:28.730
fairly close though. Okay. But
the syntax is what I'm

146
00:07:28.730 --> 00:07:30.800
familiar with. The syntax. It's
more, like I said, it's

147
00:07:30.800 --> 00:07:34.040
more familiar trap is you
could put a trap anywhere

148
00:07:34.040 --> 00:07:37.430
in your script and you
know, before or after, and

149
00:07:37.430 --> 00:07:39.620
if there's an error, then
it'll jump to the trap.

150
00:07:39.650 --> 00:07:41.870
It's a little bit more
like a visual basic on

151
00:07:41.870 --> 00:07:47.000
error, sort of a statement,
the try catches scopes. So

152
00:07:47.000 --> 00:07:49.520
the errors have to be
within the tribe block and

153
00:07:49.520 --> 00:07:52.640
then, you know, it'll catch,
okay. Now I can pick

154
00:07:52.640 --> 00:07:55.550
both on air resume, next
style scripting, which you might

155
00:07:55.550 --> 00:07:58.340
be hoping for, for a
scripter and try to catch

156
00:07:58.340 --> 00:08:01.400
with might be more palatable
for a C sharp or

157
00:08:01.400 --> 00:08:04.700
a vb.net developer. Exactly. All
right, cool. Now what kind

158
00:08:04.700 --> 00:08:07.690
of stuff did you work
on Lee? One of the

159
00:08:08.830 --> 00:08:11.140
big improvements I want it
to add on to what

160
00:08:11.140 --> 00:08:15.370
Jason has said is that
PowerShell in, in version two

161
00:08:15.430 --> 00:08:18.550
is we'd like to think
about it as PowerShell version

162
00:08:18.550 --> 00:08:20.590
one that we really wish
we could have finished as

163
00:08:20.590 --> 00:08:23.500
well. So everybody talks about,
Hey, you develop this brand

164
00:08:23.500 --> 00:08:24.850
new shell. I love it.
You came out and said

165
00:08:25.600 --> 00:08:28.450
PowerShell, V1 this time. We
mean it. Yeah. Well, you

166
00:08:28.450 --> 00:08:31.720
know, we, you know, ultimately
you come against scheduling constraints,

167
00:08:31.720 --> 00:08:33.850
you want to get stuff
out there and version one

168
00:08:33.850 --> 00:08:36.250
was an awesome, awesome product.
Well, and you want it

169
00:08:36.250 --> 00:08:40.480
to ship with visual, with
a, wasn't a windows 2003.

170
00:08:40.480 --> 00:08:41.980
When did you, what was
your shift vehicle for V

171
00:08:41.980 --> 00:08:45.400
one? Our initial, our ship
vehicle for version one was

172
00:08:45.400 --> 00:08:48.070
all by itself, But it
shipped in 2008 server though,

173
00:08:48.070 --> 00:08:52.420
right? Yes. Okay. That, wasn't
what drove our ship dates,

174
00:08:52.440 --> 00:08:55.980
but we really wanted to
make sure we had early,

175
00:08:55.980 --> 00:08:58.200
we had a monad and
we had a bunch of

176
00:08:58.200 --> 00:09:00.920
people really excited about it.
And Of course, for the

177
00:09:00.920 --> 00:09:02.270
listeners who may not be
familiar with some of the

178
00:09:02.270 --> 00:09:04.190
buzz words, of course it
was the, the, the term

179
00:09:04.190 --> 00:09:07.040
that we referred to PowerShell
as, before the name power

180
00:09:07.040 --> 00:09:09.440
cell and the icon were
kind of reviewing. Right. Exactly.

181
00:09:09.440 --> 00:09:11.780
That was the codename, right.
This was when they had

182
00:09:11.780 --> 00:09:14.060
dot MSH or dot mush
files, which I thought was

183
00:09:14.060 --> 00:09:17.510
pretty funny. Right. Right. And
then as we got that,

184
00:09:17.510 --> 00:09:19.520
you know, people started using
it. We really wanted to

185
00:09:19.520 --> 00:09:24.870
be able to support remoting
as well. And remoting in

186
00:09:25.010 --> 00:09:27.320
windows has always been kind
of lacking. There's been Telnet

187
00:09:27.320 --> 00:09:31.160
and it kind of added
security upgrades, but nothing really

188
00:09:31.160 --> 00:09:34.610
like the implicit SSH kind
of experience that people just

189
00:09:34.970 --> 00:09:39.350
get to experience ubiquitous remoting.
And one of the huge,

190
00:09:39.350 --> 00:09:42.470
huge things we did right.
In PowerShell version two, was

191
00:09:42.470 --> 00:09:46.850
integrate remoting and in the
unique PowerShell style. And this

192
00:09:46.850 --> 00:09:49.820
is what I want to
understand because I hear people

193
00:09:49.820 --> 00:09:51.770
who aren't PowerShell people talk
about it and they go,

194
00:09:52.310 --> 00:09:54.170
Oh, well, you know, I
already have that. I can

195
00:09:54.170 --> 00:09:57.770
just shush into my machine.
And that's just a remote

196
00:09:57.770 --> 00:10:00.590
secure terminal. Yep. Yep. Can
I do that in power

197
00:10:00.590 --> 00:10:02.150
show? I can just say,
I want to talk to

198
00:10:02.150 --> 00:10:03.950
that machine, but I want
the dos prompt and the

199
00:10:03.950 --> 00:10:05.840
task prompts. So look at
me the PowerShell prompt to

200
00:10:05.850 --> 00:10:09.020
be here. Yeah, no, absolutely.
You can do interactive remoting,

201
00:10:09.080 --> 00:10:12.920
interactive remoting. Okay. And that's,
we'd be ridiculous as a

202
00:10:12.920 --> 00:10:15.410
shell, if we didn't support
that, just like in version

203
00:10:15.410 --> 00:10:19.730
one of PowerShell, we supported
text manipulation, right? That's a

204
00:10:19.730 --> 00:10:21.530
shell. You need to be
able to launch programs and

205
00:10:21.530 --> 00:10:24.080
manipulate it. Is it like
a secure sockets kind of

206
00:10:24.080 --> 00:10:26.030
a thing with search? I
mean, like what's the transport

207
00:10:26.030 --> 00:10:27.740
there? I mean, am I
am really pushing into the

208
00:10:27.740 --> 00:10:32.480
PowerShell or is it something
else PowerShell, remoting builds upon

209
00:10:32.480 --> 00:10:35.870
Ws management. So Ws man
remoting, and that can be

210
00:10:35.870 --> 00:10:39.320
secured, you know, by default
it's going to be windows

211
00:10:39.320 --> 00:10:42.680
authentication inside of your domain.
And so that's encrypted by

212
00:10:42.680 --> 00:10:46.670
a Kerberos, but then you
can also do over SSL

213
00:10:47.030 --> 00:10:49.520
on the internet, tons and
tons of options. And they're

214
00:10:49.520 --> 00:10:51.860
all secure. Now you said
Ws management, that sounds like

215
00:10:51.860 --> 00:10:53.750
Ws start out star and
all the kind of web

216
00:10:53.750 --> 00:10:55.700
services standards. So is that
a standard or is that

217
00:10:55.700 --> 00:10:57.890
a Microsoft thing? Yep. There'll
be less management as a

218
00:10:57.890 --> 00:11:01.250
standard. Okay. And our version,
which is a windows remote

219
00:11:01.370 --> 00:11:04.850
management when around is an
implementation of that standard. Okay.

220
00:11:05.030 --> 00:11:06.530
Okay. So it's something that
sits on top of that.

221
00:11:06.920 --> 00:11:08.810
Yup. Does this mean that
PowerShell can talk to non

222
00:11:08.810 --> 00:11:13.670
windows machines? We go over
this Ws management thing. No.

223
00:11:13.670 --> 00:11:19.640
In addition to the straight
Ws management protocol, there's a

224
00:11:20.000 --> 00:11:21.920
requires that there's an end
point that can speak it

225
00:11:21.920 --> 00:11:24.680
as well. So you have
a, you're connecting to a

226
00:11:24.680 --> 00:11:28.520
PowerShell host on a remote
system and that participates in

227
00:11:28.520 --> 00:11:32.540
the remoting session as well.
So the traditional things supported

228
00:11:32.540 --> 00:11:36.110
in Ws management. Those are
administrative actions, so I can

229
00:11:36.110 --> 00:11:40.580
enumerate things and I can
invoke actions. So on top

230
00:11:40.580 --> 00:11:43.490
of that, we've built the
PowerShell remoting that says, Hey,

231
00:11:43.940 --> 00:11:46.550
create an object and start
streaming things back to me

232
00:11:46.910 --> 00:11:49.580
and create a run space.
And some of the things

233
00:11:49.580 --> 00:11:53.500
that are required in a,
in a full fledged PowerShell

234
00:11:53.500 --> 00:11:55.570
remoting session. Okay. So that
means I'm not doing an

235
00:11:55.570 --> 00:11:58.300
interactive shell, I'm on my
machine with a shell, but

236
00:11:58.300 --> 00:12:00.580
I'm saying I want to
get, have some objects from

237
00:12:00.580 --> 00:12:03.010
that machine and that machine
and that machine all come

238
00:12:03.010 --> 00:12:04.990
over to me and participate
in some kind of a

239
00:12:04.990 --> 00:12:09.540
larger pipeline. It's still interactive,
just like a regular PowerShell.

240
00:12:10.170 --> 00:12:11.670
I'm just saying it's not
interactive in the sense that

241
00:12:11.670 --> 00:12:14.400
the, the C colon backslash
that I'm looking at on

242
00:12:14.400 --> 00:12:17.160
the screen, isn't over there.
It's over here where I'm

243
00:12:17.160 --> 00:12:20.430
at. I guess it's the
same with any protocol is

244
00:12:20.430 --> 00:12:23.190
that your, your server is
going to say, Hey, here's

245
00:12:23.190 --> 00:12:26.880
my prompt. And then the
server implementation is going to

246
00:12:26.880 --> 00:12:29.040
send it on to your,
the person listening for it.

247
00:12:29.170 --> 00:12:30.510
Right. I guess what I'm
trying to understand is that

248
00:12:30.690 --> 00:12:32.640
let's say I've got a
machine, a and machine B

249
00:12:33.090 --> 00:12:35.700
sitting on machine a and
machine B's headless, and that's

250
00:12:35.700 --> 00:12:38.550
got no monitor. I want
to do one of two

251
00:12:38.550 --> 00:12:40.500
things. Let's say the first
example. I want to go

252
00:12:40.500 --> 00:12:43.200
and walk around his file
system. And I want to,

253
00:12:43.200 --> 00:12:45.570
I want to, basically, I
want to shush into that

254
00:12:45.570 --> 00:12:48.000
machine. I want to tell
them Right. That's absolutely what

255
00:12:48.000 --> 00:12:51.030
PowerShell remoting supports. Okay. So
you go into that machine,

256
00:12:51.030 --> 00:12:53.700
you run get processed and
you're getting the processes that

257
00:12:53.700 --> 00:12:56.100
are on that machine right
there. You're getting those files.

258
00:12:56.190 --> 00:12:58.260
Okay. And I've seen them
on machine a yep. And

259
00:12:58.260 --> 00:13:01.410
then scenario a B is
that, let's say, I want

260
00:13:01.410 --> 00:13:04.920
it to go in enumerate
the, I don't know the

261
00:13:05.520 --> 00:13:08.460
hardware's of the certificates on
that machine. Right. It's something

262
00:13:08.460 --> 00:13:10.470
that's very intimate to that
machine. I want it, I

263
00:13:10.470 --> 00:13:13.380
want to see the certificate
store poke around the registry,

264
00:13:14.220 --> 00:13:16.170
but I want to do
it from here so that

265
00:13:16.170 --> 00:13:18.030
I can also poke around
on the registry on my

266
00:13:18.030 --> 00:13:20.400
machine a and maybe do
a diff or do some

267
00:13:20.400 --> 00:13:22.350
comparisons. How would I do
something like that? And is

268
00:13:22.350 --> 00:13:25.170
that the same thing? That's
kind of like the second

269
00:13:25.170 --> 00:13:29.340
way that PowerShell remoting supports.
So you've got your interactive

270
00:13:29.340 --> 00:13:33.090
version, but then there's also
a version that's just mass

271
00:13:33.090 --> 00:13:38.100
automation and we have an
invoke command command. And you

272
00:13:38.100 --> 00:13:41.220
can say, I wanna invoke
this command on a remote

273
00:13:41.220 --> 00:13:44.730
machine. Ah, and then you
can assign the results of

274
00:13:44.730 --> 00:13:47.070
that action and you can
store it in a variable.

275
00:13:47.580 --> 00:13:50.820
That's cool. Hey everybody, this
is Scott coming at you

276
00:13:50.820 --> 00:13:53.430
from another place in time.
No doubt. You probably bump

277
00:13:53.440 --> 00:13:56.430
into testing tasks now, and
then, and your work and,

278
00:13:56.430 --> 00:13:58.740
you know, writing functional tests
is probably not your favorite

279
00:13:58.740 --> 00:14:00.720
thing. It's kind of difficult.
It takes time and the

280
00:14:00.720 --> 00:14:03.570
results can be dubious. Well,
get ready to start liking

281
00:14:03.570 --> 00:14:07.500
tests. Thanks to Tellerik with
the, the new whereby testing

282
00:14:07.500 --> 00:14:10.920
framework. Building web automation test
is a breeze. You've got

283
00:14:10.920 --> 00:14:14.550
code automation with advanced asp.net
Ajax and several light applications.

284
00:14:14.580 --> 00:14:17.190
You can write a single
test, have it executed against

285
00:14:17.190 --> 00:14:20.640
multiple browsers at once. You'd
benefit from a rich API

286
00:14:20.640 --> 00:14:24.180
there's link support integration with
visual studio unit testing, also

287
00:14:24.180 --> 00:14:27.540
in unit X unit and
MB unit, not to mention

288
00:14:27.540 --> 00:14:30.390
the free rappers for Telerik
rad controls for ESPN and

289
00:14:30.390 --> 00:14:33.930
Ajax, and several light, all
shipping with Telerik's new testing

290
00:14:33.930 --> 00:14:37.380
tool. One of the best
features, the webinar testing framework,

291
00:14:37.590 --> 00:14:39.990
which is developed by art
of test. Is it that

292
00:14:39.990 --> 00:14:43.890
politely free Freddie got hooked
on web by testing framework,

293
00:14:43.890 --> 00:14:46.980
start using it right away,
go to tellerik.com for more

294
00:14:46.980 --> 00:14:52.430
info. Thanks a lot. This
is why I like version

295
00:14:52.730 --> 00:14:56.270
version twos of products where
I can code by subtraction,

296
00:14:56.660 --> 00:14:58.700
because with version one, at
my last job, we did

297
00:14:58.700 --> 00:15:02.630
a bunch of big management
of a large number of

298
00:15:02.630 --> 00:15:05.030
systems. You might have 20,
30, 50 machines, and we

299
00:15:05.030 --> 00:15:07.220
have to go talk to
all these machines, but this

300
00:15:07.220 --> 00:15:09.620
wasn't a PowerShell V one
timeframe. So I actually went

301
00:15:09.620 --> 00:15:11.990
and wrote a windows service
that would host an instance

302
00:15:11.990 --> 00:15:14.840
of a PowerShell run space.
And I wrote a poor

303
00:15:14.840 --> 00:15:17.540
man's remoting. And what I
ended up using was your

304
00:15:17.540 --> 00:15:22.520
export CLI XML to export
to a local, you know,

305
00:15:22.520 --> 00:15:24.350
I'm on the remote machine.
I would basically take an

306
00:15:24.350 --> 00:15:26.870
object that I would, and
then serialize it, shuttle it

307
00:15:26.870 --> 00:15:30.500
across and then rehydrate it.
And it was, it was

308
00:15:30.500 --> 00:15:33.140
cheesy to say the least.
And I'm hearing you say

309
00:15:33.140 --> 00:15:36.110
that I can throw all
of that away. Yeah. You

310
00:15:36.110 --> 00:15:40.300
know, PowerShell remoting still builds
on that really core concept

311
00:15:40.330 --> 00:15:44.530
of objects that come back
from a remote machine, aren't

312
00:15:44.530 --> 00:15:48.160
live objects anymore. They're, they're
really rich state bags. And

313
00:15:48.160 --> 00:15:49.630
we do a lot of
work to let you still

314
00:15:49.630 --> 00:15:52.630
use the PowerShell primitive. So
one of the things that

315
00:15:52.630 --> 00:15:56.950
makes PowerShell so great is
that you can do a,

316
00:15:56.980 --> 00:16:00.130
for example, call the get
process command. And that's going

317
00:16:00.130 --> 00:16:02.980
to return a list of
the processes running on your

318
00:16:02.980 --> 00:16:05.950
machine. Now in the plain
text world, you might be

319
00:16:06.400 --> 00:16:08.890
dumping that through arc and
said, and all these things

320
00:16:08.890 --> 00:16:11.320
to get out, how much
memory is this using, right?

321
00:16:11.650 --> 00:16:15.070
But in PowerShell, those are
straight properties on the output.

322
00:16:15.280 --> 00:16:17.320
So then I can do
a filter on, you know,

323
00:16:17.320 --> 00:16:22.210
get process where the processes
handles are more than, you

324
00:16:22.210 --> 00:16:25.900
know, filtering on handle, count
or process IDs. Now our

325
00:16:25.900 --> 00:16:30.310
PowerShell remoting keeps that data
integrity. You run that on

326
00:16:30.310 --> 00:16:32.770
your remote machine and you're
still going to get that

327
00:16:32.770 --> 00:16:36.300
same power in that same
flexibility on every client that

328
00:16:36.400 --> 00:16:38.470
connects to it. And you
can easily fan this stuff

329
00:16:38.500 --> 00:16:41.290
out to thousands of servers.
One of the things that

330
00:16:41.740 --> 00:16:44.470
really drove our design of
remoting in PowerShell V two

331
00:16:44.470 --> 00:16:50.080
was just the fact of
network throttling, where people were

332
00:16:50.080 --> 00:16:53.620
trying to run these huge
WMI operations against their domain,

333
00:16:54.070 --> 00:16:55.960
and that they would time
out. And it would take

334
00:16:55.970 --> 00:16:58.800
so much time because you've
just got this one machinist

335
00:16:58.800 --> 00:17:02.410
becoming the bottleneck, right? And
so in PowerShell remoting, we

336
00:17:02.620 --> 00:17:05.530
implemented throttling limits and stuff.
So you can create this

337
00:17:05.530 --> 00:17:07.630
huge script, say, I want
to run this against a

338
00:17:07.630 --> 00:17:10.840
thousand machines. And then you
can say, well, I want

339
00:17:10.840 --> 00:17:12.250
to be nice. And I
want to do this to

340
00:17:12.460 --> 00:17:14.740
10 machines in a batch.
So we'll go out. And

341
00:17:14.740 --> 00:17:16.920
as soon as we're done
processing one machine, we'll put

342
00:17:16.940 --> 00:17:19.330
in another once you're throttling
basically a limit of 10

343
00:17:19.330 --> 00:17:21.970
machines. Now is that part
of this job management thing

344
00:17:21.970 --> 00:17:24.310
that's added? Is that a
new thing in PowerShell start

345
00:17:24.310 --> 00:17:29.650
job? Yep. Jobs are another
great example of that. And

346
00:17:29.650 --> 00:17:32.950
the remoting kind of builds
on this idea of a

347
00:17:32.950 --> 00:17:36.160
universal code execution model. Okay.
So I have a script

348
00:17:36.160 --> 00:17:38.640
block, you know, a little
chunk of PowerShell command And

349
00:17:38.660 --> 00:17:40.960
a script block is anything
in curly braces that, Yep.

350
00:17:41.290 --> 00:17:43.900
And so I can run
that in my local PowerShell

351
00:17:43.900 --> 00:17:46.660
session, or I can run
that on a remote machine

352
00:17:46.720 --> 00:17:49.200
or I can run that
in a local job. And

353
00:17:49.200 --> 00:17:51.660
they all go through the
same infrastructure. You can wait

354
00:17:51.660 --> 00:17:53.520
on the results of one
of these things you can

355
00:17:53.520 --> 00:17:57.270
read from them. You can
wait for one to complete.

356
00:17:57.930 --> 00:17:59.850
So all those, the same
idea. And then you just

357
00:17:59.850 --> 00:18:01.950
get this, I run this
code and I'm going to

358
00:18:01.950 --> 00:18:04.250
run it wherever I want.
And it's all consistent. And

359
00:18:04.250 --> 00:18:06.620
a script block is a,
is a thing. I mean,

360
00:18:06.620 --> 00:18:08.750
there's like a object called
script block, right. That holds

361
00:18:08.750 --> 00:18:11.510
this stuff. So from a
language perspective, that that script

362
00:18:11.510 --> 00:18:13.940
block is like a molecule
filled with Adams, which is

363
00:18:13.940 --> 00:18:17.210
the abstract syntax tree that
expresses the what's going on.

364
00:18:17.660 --> 00:18:21.080
Yep, exactly. It's so nice
when you interview somebody and

365
00:18:21.080 --> 00:18:22.820
you like, kind of put
something really deep and then

366
00:18:22.820 --> 00:18:26.570
the language designer like, Oh
yeah, that's exactly right. Silence

367
00:18:27.080 --> 00:18:28.280
was that, is that, is
that, I mean, I'm just,

368
00:18:28.280 --> 00:18:32.090
I'm guessing here. That's how
I would do it in

369
00:18:32.090 --> 00:18:34.880
a script block is really
just the script and everything

370
00:18:35.180 --> 00:18:37.820
and everything between the curlies
is just code. But you

371
00:18:37.820 --> 00:18:40.340
part, you, you, you, you
have a parser and then

372
00:18:40.340 --> 00:18:42.800
that sits as an abstract
syntax tree. Right. And then

373
00:18:42.800 --> 00:18:45.500
you go and execute that.
So PowerShell is an interpreted

374
00:18:45.860 --> 00:18:48.470
language, is that partial is
interpreted. Exactly. So what does

375
00:18:48.470 --> 00:18:51.320
this mean in the larger
context of, of dynamic languages

376
00:18:51.320 --> 00:18:54.560
at Microsoft? Because there's all
this interest in the DLR

377
00:18:54.920 --> 00:18:57.290
there's iron Ruby, the giant
Python. There's a lot of

378
00:18:57.290 --> 00:19:00.200
interest in that, but it
doesn't appear that that's something

379
00:19:00.200 --> 00:19:03.650
that's a, like, I don't
know. We, we don't run

380
00:19:03.650 --> 00:19:06.500
around singing to the Hills
about how amazing the DLR

381
00:19:06.500 --> 00:19:08.330
is that dynamic language runtime
that sits on top of

382
00:19:08.330 --> 00:19:12.770
the CLR and in that
PowerShell was, was happening at

383
00:19:12.770 --> 00:19:15.380
the same time as the
DLR was emerging. What does

384
00:19:15.380 --> 00:19:17.990
it mean for PowerShell in
a world where the DLR

385
00:19:17.990 --> 00:19:20.930
may in fact be the
choice? Yeah. The DLR is

386
00:19:20.930 --> 00:19:23.690
very interesting for, for PowerShell.
They, they implement a lot

387
00:19:23.690 --> 00:19:29.110
of co-generation aspects of dynamic
languages, obviously that that PowerShell

388
00:19:29.110 --> 00:19:33.530
can take advantage of. And
it's, it's something that we've

389
00:19:33.530 --> 00:19:38.750
been looking at for prototyping
purposes, just to see what,

390
00:19:38.750 --> 00:19:42.560
what we can do with
it and, and whatnot in

391
00:19:42.560 --> 00:19:45.590
terms of schedules, you know,
it's part of, you know,

392
00:19:45.600 --> 00:19:48.590
different product and, you know,
it's not part of windows.

393
00:19:48.590 --> 00:19:50.780
And so we haven't been
able to take advantage of

394
00:19:50.780 --> 00:19:54.410
it from that perspective. That's
been the biggest factor so

395
00:19:54.410 --> 00:19:58.460
far in talking with the
DLR team. And in the

396
00:19:58.460 --> 00:20:01.130
past, they've been saying, you
know, we'd love you guys

397
00:20:01.130 --> 00:20:04.280
to be using us, but
don't, don't start using us

398
00:20:04.280 --> 00:20:06.980
just yet because we're making
changes and you know, that

399
00:20:06.980 --> 00:20:09.920
sort of stuff. Yeah. So
it sounds like, and correct

400
00:20:09.920 --> 00:20:13.370
me if I'm wrong, that
well, you bringing the DLR

401
00:20:13.370 --> 00:20:17.480
into the world of PowerShell
might be architecturally, tidy, and

402
00:20:17.480 --> 00:20:20.150
might be aesthetically pleasing. It's
not going to do anything

403
00:20:20.150 --> 00:20:22.370
for you other than allow
you to, as I said

404
00:20:22.370 --> 00:20:24.620
before, code by subtraction, you'd
be able to say, Oh,

405
00:20:24.620 --> 00:20:26.930
look, we don't need to
use our AST. We'll use

406
00:20:26.930 --> 00:20:31.940
theirs now. Yeah. That's, that's
one definite benefit. There. There's

407
00:20:31.940 --> 00:20:34.940
some other benefits of, you
know, maybe inter-op with, you

408
00:20:34.940 --> 00:20:38.720
know, C-sharp, since C-sharp will
be using DLR as well,

409
00:20:39.190 --> 00:20:42.510
and that might make some
C-sharp developers lives easier that

410
00:20:42.820 --> 00:20:45.500
they're writing tools for PowerShell,
right? And when you are

411
00:20:45.620 --> 00:20:49.720
in PowerShell, also, you can
call, you can call calm

412
00:20:49.720 --> 00:20:52.570
objects, but you have your
own implementation of doing that

413
00:20:52.570 --> 00:20:54.910
well in the DLR, they
have the notion of this.

414
00:20:55.720 --> 00:20:57.670
What do they call it
in, in the DLR, you

415
00:20:57.670 --> 00:21:00.250
can call Ruby, you can
call calm, you can call

416
00:21:00.280 --> 00:21:02.680
several lights. I forget the
word. I'm going to remember

417
00:21:02.680 --> 00:21:05.970
it. But they also have
call site The generic sense

418
00:21:05.970 --> 00:21:07.650
of call site caching as
well. So then if you

419
00:21:07.650 --> 00:21:10.110
did something inefficient in a
loop, at least they're going

420
00:21:10.110 --> 00:21:12.360
to catch the call site.
This parish will have its

421
00:21:12.360 --> 00:21:15.360
own implementation of things like
that. Those, those optimizations I

422
00:21:15.360 --> 00:21:17.320
call psychiatric. We do a
little bit of that. Not,

423
00:21:17.320 --> 00:21:19.500
not binder. That was the
word, the binding and the

424
00:21:19.500 --> 00:21:21.980
call site caching are two
different things. So yeah, in

425
00:21:22.020 --> 00:21:25.560
the DLR, the binder is
a, a language specific notion

426
00:21:25.560 --> 00:21:28.320
of like, how do you
decide what you're actually going

427
00:21:28.320 --> 00:21:31.770
to call? Right? And then
the caching is the optimization

428
00:21:31.770 --> 00:21:34.140
aspect of that. So that
you don't go in and

429
00:21:34.140 --> 00:21:36.450
rebind, every time you make
that call, you look at

430
00:21:36.450 --> 00:21:39.120
the types of the arguments
and say, Oh, I'm coming

431
00:21:39.120 --> 00:21:40.890
in with the exact same
arguments. I don't need to

432
00:21:40.890 --> 00:21:42.780
go figure out if I'm
calling this again or not.

433
00:21:43.560 --> 00:21:46.440
I know exactly where to
go from from here. And

434
00:21:46.440 --> 00:21:49.500
so partial does a little
bit of the call site

435
00:21:49.500 --> 00:21:51.870
caching. It doesn't do it
in the same way that

436
00:21:51.870 --> 00:21:55.170
it's done in the DLR,
but it does do that

437
00:21:55.170 --> 00:21:57.300
in some places. Yeah. So
it sounds like the dealer

438
00:21:57.300 --> 00:21:58.770
would be a nice to
have, but I mean, should

439
00:21:58.770 --> 00:22:00.480
people, I guess what I'm
trying to understand is that

440
00:22:00.780 --> 00:22:03.240
people who are listening may
be thinking, you know, should

441
00:22:03.240 --> 00:22:05.700
I, should I wait, should
I worry? Should I not

442
00:22:05.700 --> 00:22:09.750
think about a PowerShell yet
until they get their kind

443
00:22:09.750 --> 00:22:12.330
of their, their, their, their
dynamic language story together, or

444
00:22:12.330 --> 00:22:15.150
is PowerShell really more focused
on being a great scripting

445
00:22:15.150 --> 00:22:18.120
automation system and not on
being itself, a full fledged.net

446
00:22:18.120 --> 00:22:23.520
dynamic language, exactly the partials
it was designed for admins

447
00:22:23.760 --> 00:22:26.430
and the fact that it's
a really great scripting language

448
00:22:26.430 --> 00:22:28.710
on top of being able
to do everything for admins

449
00:22:28.710 --> 00:22:31.830
is, you know, in my
mind, just a great bonus.

450
00:22:31.830 --> 00:22:34.710
It does, you know, he
does so much more than

451
00:22:34.710 --> 00:22:38.370
what you'd expect out of,
you know, a shell language.

452
00:22:40.050 --> 00:22:42.390
So in terms of, you
know, waiting or, you know,

453
00:22:42.840 --> 00:22:46.290
anything like that, no, I
mean, it's, it's usable the

454
00:22:46.290 --> 00:22:47.850
way it is. You don't
need to it's baked, right.

455
00:22:47.850 --> 00:22:49.890
I mean, it ships in
what it ships in 2008,

456
00:22:49.920 --> 00:22:53.850
2008, our two chips in
windows seven. Exactly. Exactly. Okay.

457
00:22:53.940 --> 00:22:57.780
Yeah, no, it's a robust
language used by millions of

458
00:22:57.780 --> 00:23:01.050
people. Billions and billions. So
Lee, what are some of

459
00:23:01.050 --> 00:23:04.410
the cools ecosystem type things
you've seen people riding on

460
00:23:04.410 --> 00:23:06.390
top of, like, I remember
the first thing that really

461
00:23:06.390 --> 00:23:09.630
blew my mind in PowerShell.
One was when a guy,

462
00:23:09.630 --> 00:23:13.590
I think we call him
Mo wrote a, What I

463
00:23:13.590 --> 00:23:17.310
can only describe as like
an ANSI art style IntelliSense

464
00:23:17.310 --> 00:23:21.300
in the dos prompt by
basically reflecting over the run

465
00:23:21.300 --> 00:23:23.820
space, looking at all the
objects and then doing some,

466
00:23:23.820 --> 00:23:27.390
a really amazing drawing just
right on the console. But

467
00:23:27.390 --> 00:23:29.010
that was early, early, early
on. I know a couple

468
00:23:29.010 --> 00:23:30.840
of years into it. Now
there must be some crazy

469
00:23:30.840 --> 00:23:33.390
ecosystem stuff built on top
of some PowerShell. Yeah. You

470
00:23:33.390 --> 00:23:37.860
know, I, I think the
ingenuity has been amazing and

471
00:23:37.890 --> 00:23:43.710
absolutely when it comes to
thinking about PowerShell and the

472
00:23:43.710 --> 00:23:47.900
main focus of trying to
make people's lives easier when

473
00:23:47.900 --> 00:23:51.140
you sit and think back
about all of the support

474
00:23:51.470 --> 00:23:55.490
of just managing windows, you
know, that has always been

475
00:23:55.490 --> 00:23:58.880
these cryptic command line tools.
If you were lucky and

476
00:23:58.880 --> 00:24:03.770
people realizing that PowerShell is,
is here to stay, it's

477
00:24:03.770 --> 00:24:06.470
doing great job is making
people's lives better every day.

478
00:24:07.550 --> 00:24:11.090
Now everyone sort of inside
of Microsoft is noticing outside

479
00:24:11.090 --> 00:24:15.440
of Microsoft is noticing there's
tons and tons of features

480
00:24:15.440 --> 00:24:19.490
within Microsoft and companies outside
of Microsoft. They're building PowerShell

481
00:24:19.490 --> 00:24:23.360
commands as their main way
of interacting with our system.

482
00:24:23.810 --> 00:24:30.200
And we've seen entire products
being architected on top of

483
00:24:30.200 --> 00:24:37.730
PowerShell, really, really driving the
gooey separation to the absolutely

484
00:24:37.730 --> 00:24:39.550
next level. One of the
ones that blows me away

485
00:24:39.550 --> 00:24:42.130
is was power gadgets. Is
that what it is? Howard

486
00:24:42.130 --> 00:24:43.780
gadgets? I think that's the
name of the company. Basically,

487
00:24:43.780 --> 00:24:46.490
it's a, I have a
bunch of data, like, like

488
00:24:46.510 --> 00:24:49.180
a bunch of processes get
processes, the perfect example, right.

489
00:24:49.180 --> 00:24:51.130
That you used before you.
So when you go, you

490
00:24:51.130 --> 00:24:54.130
go and say something like,
let's say, get processed pipe,

491
00:24:54.370 --> 00:24:58.360
short VM descending. So I
want all the processes select

492
00:24:58.360 --> 00:25:01.420
first five. So the top
five fat processes in my

493
00:25:01.420 --> 00:25:03.640
system and then power gadgets
is a third party. I

494
00:25:03.640 --> 00:25:05.110
think I'm, I think that's
what it's called. I'm not

495
00:25:05.470 --> 00:25:07.780
affiliated with them in any
way. And you basically say

496
00:25:07.900 --> 00:25:12.130
that script block make me
a gauge that I'll put

497
00:25:12.130 --> 00:25:14.350
in my windows seven sidebar,
my Vista sidebar, and then

498
00:25:14.350 --> 00:25:16.480
just keep updating it All
the time. Yeah. It's amazing.

499
00:25:16.480 --> 00:25:20.650
Just these little one-liner to
command things that take people

500
00:25:21.250 --> 00:25:24.700
at least hours to write
in the regular gadgets framework.

501
00:25:25.390 --> 00:25:29.080
And so that kind of
interaction has been amazing. And

502
00:25:30.340 --> 00:25:32.620
in addition to that sort
of, one of the things

503
00:25:32.620 --> 00:25:35.770
I was saying before is
like entire products where people

504
00:25:35.770 --> 00:25:38.050
talk about, Hey, I have
my business layer and I

505
00:25:38.050 --> 00:25:42.910
have my UI layer. And
so exchange really turned the

506
00:25:42.910 --> 00:25:47.170
world on its head with
their whole new product design

507
00:25:47.170 --> 00:25:50.380
decisions, which is everything is
supported in the command line.

508
00:25:51.370 --> 00:25:53.440
And the richness of PowerShell
lets them actually do that.

509
00:25:53.440 --> 00:25:56.410
If you imagine having an
API that was straight text-based,

510
00:25:56.410 --> 00:25:59.530
it'd be ridiculous. Right. I
want to get the list

511
00:25:59.530 --> 00:26:02.890
of mailboxes and you'd get
back a text file. Right.

512
00:26:03.100 --> 00:26:06.100
And so by supporting, they
wrote all the PowerShell command

513
00:26:06.100 --> 00:26:09.010
list to do that. And
then on top of that,

514
00:26:09.010 --> 00:26:11.950
they wrote their user interface.
It's still a rich, beautiful

515
00:26:11.950 --> 00:26:16.420
user interface, but yet anything
that you can do, you

516
00:26:16.420 --> 00:26:20.470
can also automate and that's
just saved just hundreds and

517
00:26:20.470 --> 00:26:24.100
hundreds of trillions of dollars,
right? So this is exchange

518
00:26:24.100 --> 00:26:26.410
2007 and up is what
happened. And you know, they've

519
00:26:26.410 --> 00:26:30.850
continued to build on that.
Now they're working on a

520
00:26:30.850 --> 00:26:35.530
live version of outlook and
kind of just pushing that

521
00:26:35.530 --> 00:26:40.210
further and further. And yeah,
and that's the kind of

522
00:26:40.210 --> 00:26:43.030
thing. And also there was
this one guy he wrote

523
00:26:43.200 --> 00:26:46.620
robot that was controlled by,
by PowerShell. You could like

524
00:26:46.620 --> 00:26:49.220
tell it to go forward
and rotate. Right. And I

525
00:26:49.220 --> 00:26:50.750
mean, you can, I mean,
as a, as a scripting

526
00:26:50.750 --> 00:26:55.010
language, you could drop PowerShell
into an existing application and

527
00:26:55.010 --> 00:26:58.400
just make it the core
of your scripting. It was

528
00:26:58.400 --> 00:27:02.120
almost like visual basic for
applications. You basically just feed

529
00:27:02.120 --> 00:27:05.870
the sharp or.net objects into
your PowerShell run space and

530
00:27:05.870 --> 00:27:08.030
say, I want PowerShell to
have access to the right.

531
00:27:08.060 --> 00:27:09.680
Although I worry about that
kind of stuff. Isn't that

532
00:27:09.680 --> 00:27:13.910
mean that someone could, could
script format C colon, like

533
00:27:13.910 --> 00:27:15.980
right there? Can I set
up a blacklist if I

534
00:27:15.980 --> 00:27:17.510
don't? I mean, how do
I keep someone from using

535
00:27:17.510 --> 00:27:19.880
my little application? Like, let's
say I write a calculator

536
00:27:19.880 --> 00:27:21.530
and I make it scriptable
and then the guy says,

537
00:27:21.530 --> 00:27:26.900
all right, script, this format
Z colon That comes down

538
00:27:26.930 --> 00:27:29.240
really down to the individual
application. Right. So if you're

539
00:27:29.240 --> 00:27:32.240
writing an application that supports
user generated content and this,

540
00:27:32.420 --> 00:27:35.090
you know, you're going to
have malicious maliciously written on

541
00:27:35.090 --> 00:27:37.190
anything. Right. So you never
know, I've gotta be careful

542
00:27:37.190 --> 00:27:41.450
though. Right? Right. No. And
that's absolutely we support restricted

543
00:27:41.450 --> 00:27:45.200
run spaces, which is a
new feature in version two.

544
00:27:45.500 --> 00:27:47.810
And the idea there is
you can only do as

545
00:27:47.810 --> 00:27:51.830
much in this run space
as you let the person

546
00:27:51.830 --> 00:27:54.920
do. So you're going to,
for sure say in this

547
00:27:54.920 --> 00:27:57.440
restricted version and the really
great way to think about

548
00:27:57.440 --> 00:28:00.230
this is sometimes you want
to let somebody connect to

549
00:28:00.230 --> 00:28:02.390
your machine, but you don't
want to let them run

550
00:28:02.390 --> 00:28:04.160
everything you want to say,
I'm going to give you

551
00:28:04.160 --> 00:28:06.950
four or five commands. I'm
going to let you see

552
00:28:06.950 --> 00:28:09.770
what processes are in my
system, run a couple of

553
00:28:09.770 --> 00:28:14.210
specific WMI queries, but not
kill processes. Right. And so

554
00:28:14.210 --> 00:28:17.270
we've really done a lot
of work in our dev

555
00:28:17.270 --> 00:28:20.270
side of things in version
two, to make those easy

556
00:28:20.270 --> 00:28:22.310
to do so you restrict
down the language so that

557
00:28:22.310 --> 00:28:25.100
nobody's scripting against your system.
You give them a couple

558
00:28:25.100 --> 00:28:26.990
of commands that they can
run, and then you can

559
00:28:26.990 --> 00:28:29.570
be certain that that's all
they're running in your system.

560
00:28:29.900 --> 00:28:31.760
That's cool. You know, one
of the other things that

561
00:28:31.760 --> 00:28:34.370
I really liked early on
about PowerShell and, and I

562
00:28:34.370 --> 00:28:36.920
just actually played with it
a few minutes ago before

563
00:28:36.920 --> 00:28:38.570
you guys got here was
the notion of being able

564
00:28:38.570 --> 00:28:41.750
to say like a right
host or right. Progress bar

565
00:28:41.750 --> 00:28:44.660
where you're basically saying like
in the instance of right

566
00:28:44.660 --> 00:28:47.060
progress bar, is that the
name of the command right.

567
00:28:47.060 --> 00:28:49.790
Progress, right. Progress was to
say that I'm in the

568
00:28:49.790 --> 00:28:51.260
middle of doing something and
I'm going to go and

569
00:28:51.290 --> 00:28:54.770
update it to, you know,
30% or 40%. And then

570
00:28:54.770 --> 00:28:57.350
without thinking, I was switched
back over into the, the

571
00:28:57.350 --> 00:29:00.740
IOC that you'd mentioned before,
adjacently the integrated scripting environment.

572
00:29:01.160 --> 00:29:04.070
And when I hit <inaudible>
five, I see it coming,

573
00:29:04.070 --> 00:29:06.890
a dialogue box popped up.
That was a graphical dialogue

574
00:29:06.920 --> 00:29:10.280
box that looked like a
nice, shiny kind of cool

575
00:29:10.280 --> 00:29:14.210
looking progress bar. And then
I realized like, Oh, it's

576
00:29:14.210 --> 00:29:16.100
in a different host and
it's going to do what's

577
00:29:16.100 --> 00:29:17.720
appropriate for that host. And
I thought that was It's

578
00:29:17.720 --> 00:29:19.520
really cool. And that's one
of the things we've always

579
00:29:19.850 --> 00:29:22.910
tried throughout all of PowerShell
is that for example, you're

580
00:29:22.910 --> 00:29:25.640
right. One of the commandlets
that Jason was talking about

581
00:29:25.640 --> 00:29:29.030
before, or you write a
command, let in a PowerShell

582
00:29:29.030 --> 00:29:33.110
script, right. And we keep
on adding things to the

583
00:29:33.110 --> 00:29:36.260
PowerShell environment in the PowerShell
engine all the time. And

584
00:29:36.260 --> 00:29:38.450
you just keep on getting
new stuff for free. You

585
00:29:38.450 --> 00:29:41.110
know, we, we add a
new feature that says, Hey,

586
00:29:41.110 --> 00:29:43.630
anytime this command that generates
a warning, I want to

587
00:29:43.630 --> 00:29:46.990
take a specific action. When
that happens. Now that didn't

588
00:29:46.990 --> 00:29:49.300
exist in version one, this
is the inventing stuff, right?

589
00:29:50.590 --> 00:29:53.470
No, not really. What is
this then? Because you mentioned

590
00:29:53.470 --> 00:29:55.630
that inventing is new too,
right? Yeah. So that's the

591
00:29:55.630 --> 00:29:56.890
one that you just mentioned
about, I want to, if

592
00:29:56.890 --> 00:29:59.260
something generates a warning, I
want to know we added

593
00:29:59.260 --> 00:30:01.900
a new parameter, for example,
to all command lists in

594
00:30:01.900 --> 00:30:05.530
powerful version two. Oh. And
that's the one I was

595
00:30:05.530 --> 00:30:07.510
talking about was this warning
action where you can take

596
00:30:07.510 --> 00:30:09.820
an action on a warning,
but that's just an example

597
00:30:09.820 --> 00:30:13.240
of any time the engine
gets better than every command

598
00:30:13.240 --> 00:30:15.280
that gets better because these
are what they call ubiquitous

599
00:30:15.280 --> 00:30:17.710
parameters. Is that right? Yep.
And just the whole concept

600
00:30:17.710 --> 00:30:20.800
of just like progress bars
you use, right. Progress in

601
00:30:20.800 --> 00:30:23.260
your command lit, or you
use the script or you

602
00:30:23.260 --> 00:30:26.740
use the, the command that
to call it, then you

603
00:30:26.740 --> 00:30:29.260
get rich output on any
host that supports it. So

604
00:30:29.260 --> 00:30:32.470
really just taking the core
problem of all I want

605
00:30:32.470 --> 00:30:35.050
to do is implement my
command and you deal with

606
00:30:35.050 --> 00:30:38.650
all the user interface and
the parameters and the shortening

607
00:30:38.650 --> 00:30:42.010
and globbing, and aliasing, we
just do an enormous amount

608
00:30:42.010 --> 00:30:44.650
of work on your behalf.
So if I wanted to

609
00:30:44.980 --> 00:30:47.440
write an application and host
PowerShell, I could go and

610
00:30:47.440 --> 00:30:49.480
handle these progress bars for
me. Right? Like if I

611
00:30:49.480 --> 00:30:51.700
wanted it to the progress
bar to appear in the

612
00:30:51.700 --> 00:30:54.490
status bar, I could write
a host, wouldn't be too

613
00:30:54.490 --> 00:30:56.740
hard. There are third party
hosts. There's several of them

614
00:30:56.740 --> 00:31:01.510
that are quite popular power
GUI and PowerShell. Plus both

615
00:31:01.510 --> 00:31:05.410
of those may do things
differently than the console or

616
00:31:05.410 --> 00:31:08.650
the partial ISE. Definitely. Very
cool. Well, I really appreciate

617
00:31:08.650 --> 00:31:10.450
you guys sitting down and
taking the time we're here

618
00:31:10.450 --> 00:31:11.770
in a kind of a
busy area of the common

619
00:31:11.770 --> 00:31:14.020
show. Have you heard people
walking by that's because we're

620
00:31:14.020 --> 00:31:16.720
kind of in a cafe
area here. Thanks so much.

621
00:31:16.750 --> 00:31:18.640
Jason and Lee, for, for
chatting with me today about

622
00:31:18.640 --> 00:31:21.010
PowerShell, you can visit the
PowerShell blog. I think it's

623
00:31:21.130 --> 00:31:25.570
blogs that understand.com/powershell. Also the
scripting center of a technique.

624
00:31:26.050 --> 00:31:28.120
And I'll put a series
of show links with some

625
00:31:28.120 --> 00:31:30.430
of the products that we've
talked about and other resources

626
00:31:30.430 --> 00:31:32.770
for people to look at
again. Thanks gentlemen, for your

627
00:31:32.770 --> 00:31:35.680
time. Thanks for having us.
This has been another episode

628
00:31:35.680 --> 00:31:37.990
of Hanselminutes and we'll see
you again next week.

