WEBVTT FILE

1
00:00:12.030 --> 00:00:16.680
From Hanselman it's dot com
is Hanselman. It's a weekly

2
00:00:16.680 --> 00:00:20.910
discussion with web developer and
technologists. Scott Hanselman hosted by

3
00:00:20.910 --> 00:00:25.260
Carl Franklin. This is Lawrence Ryan announcing
show number one Oh five

4
00:00:25.770 --> 00:00:31.380
recorded live Wednesday, March 19,
2008. Support for Hansel minutes

5
00:00:31.380 --> 00:00:36.030
is provided by Tellerik rad
controls, the most comprehensive suite

6
00:00:36.030 --> 00:00:45.180
of components for windows forms
and asp.net web applications. online@wwwdotptelerik.com.

7
00:00:46.260 --> 00:00:50.610
Support is also provided by.net
developers journal the world's leading.net

8
00:00:50.610 --> 00:00:56.850
developer magazine online at www
dot <inaudible> dot com. In

9
00:00:56.850 --> 00:01:00.150
this episode, Scott talks with
developer Rocky, lot gap about

10
00:01:00.150 --> 00:01:02.790
the myriad of choices available
for accessing data in your

11
00:01:02.790 --> 00:01:08.720
application. 10 business objects. Hi,
this is Scott Hanselman and

12
00:01:08.720 --> 00:01:15.080
this is another episode of
Hanselminutes and I'm sitting here@mixoheightwithrockylacaauthorofcsla.net

13
00:01:15.140 --> 00:01:19.640
and object luminary. I just
made that up. Well, thank

14
00:01:19.640 --> 00:01:21.860
you. It's nice. But thanks
for hanging out with me

15
00:01:21.860 --> 00:01:25.310
here today. We were talking
earlier about this kind of

16
00:01:25.340 --> 00:01:29.330
cacophony, this large amount of
talk going around about how

17
00:01:29.330 --> 00:01:32.990
to get information out of
databases. It's it's Dow it's

18
00:01:32.990 --> 00:01:35.280
data access layer mania. Right
now we've got linked to

19
00:01:35.280 --> 00:01:39.230
SQL LinkedIn entities. We've got
ORM mappers, like the Wilson

20
00:01:39.230 --> 00:01:43.250
mapper, and we've got in
hibernate and we've got csla.net.

21
00:01:44.150 --> 00:01:46.130
Is that really are there
really this many ways to

22
00:01:46.130 --> 00:01:48.380
get information out of a
database and into an object?

23
00:01:49.070 --> 00:01:54.530
Apparently two, I need that
many ways. I can't believe

24
00:01:54.530 --> 00:01:57.440
that anybody could need this
many ways. Now. I think

25
00:01:57.440 --> 00:02:04.100
that we settled on a
pattern in the late nineties

26
00:02:04.100 --> 00:02:07.670
with ado, right? Where were
you said, well, there's connections,

27
00:02:07.670 --> 00:02:12.920
commands, parameters and ado.net. We
really carried that forward. Totally.

28
00:02:13.040 --> 00:02:17.720
And you know that at
that level, nobody seems to

29
00:02:17.720 --> 00:02:20.000
be arguing anymore, right? Everything.
Yeah. I mean, it's pretty

30
00:02:20.000 --> 00:02:22.580
straight forward. Most people will
do a code generator like

31
00:02:22.580 --> 00:02:25.670
code Smith, pointed a database.
They'll use SQL data reader

32
00:02:25.940 --> 00:02:28.040
and you'll see a lot
of code that's like, I

33
00:02:28.040 --> 00:02:30.470
call it left hand, right
hand, you know, objects on

34
00:02:30.470 --> 00:02:32.570
the left database, on the
right or database in the

35
00:02:32.570 --> 00:02:34.550
right objects in the left.
Yep. And they'll basically go

36
00:02:34.550 --> 00:02:38.000
and say, first name is
data reader at zero. They'll

37
00:02:38.000 --> 00:02:41.630
just do that. It's very
rote boring code. Yeah. There

38
00:02:41.630 --> 00:02:43.830
is not a whole lot
of fun to it. And

39
00:02:43.850 --> 00:02:48.080
yet if you're using the
direct connection command data reader.

40
00:02:48.500 --> 00:02:50.630
Oh, that's fast. Oh yeah.
Right. Cause I mean, you're

41
00:02:50.630 --> 00:02:52.850
as close to the bottom
as you can get in.net

42
00:02:53.330 --> 00:02:56.960
and that's very, very fast.
And if you, even, if

43
00:02:56.960 --> 00:02:58.610
you have to write the
code, it's not hard, it's

44
00:02:58.610 --> 00:03:01.540
just boring. Right. And if
you COVID Janet, you know,

45
00:03:01.640 --> 00:03:04.120
and so I don't think
there's anything wrong with that,

46
00:03:05.830 --> 00:03:09.240
but then there's the dataset.
Right. Which then brought this

47
00:03:09.240 --> 00:03:12.990
kind of, not quite a
database into memory and let

48
00:03:12.990 --> 00:03:16.140
us query it. Okay. And
that's not bad. I mean,

49
00:03:16.140 --> 00:03:18.360
it was like the record
set result, set, whatever from

50
00:03:18.360 --> 00:03:21.570
the nineties only kind of
on steroids really. I mean

51
00:03:21.570 --> 00:03:26.490
a really nice, complete implant.
Right. We used to call

52
00:03:26.530 --> 00:03:29.100
it, we had ATO disconnected
records that's before that. Yeah.

53
00:03:29.190 --> 00:03:32.040
<inaudible> and so this was,
yeah. You know, basically that

54
00:03:32.040 --> 00:03:37.410
same thing on the better,
you know, more powerful. And

55
00:03:38.160 --> 00:03:40.260
yet at the same time,
it turns out that the

56
00:03:40.260 --> 00:03:43.470
data sets are, are kind
of heavy, especially in an

57
00:03:43.470 --> 00:03:51.920
end tier setting and they
aren't super flexible. So, and

58
00:03:51.920 --> 00:03:55.440
don't offer, and then of
course, people like me are

59
00:03:55.440 --> 00:03:57.600
running around telling everybody, well,
you should really be using

60
00:03:57.600 --> 00:04:02.760
objects. Right. And so then
there's this conflict with objects

61
00:04:02.760 --> 00:04:04.920
and data sets. And do
I get a data set

62
00:04:04.920 --> 00:04:06.510
and then put the data
in an object? Or do

63
00:04:06.510 --> 00:04:09.720
I have my objects hold
datasets? Or, but I think

64
00:04:09.720 --> 00:04:14.100
we're kind of collectively arriving
at the point now where

65
00:04:14.100 --> 00:04:17.160
we're saying, well, we don't
really necessarily need the data

66
00:04:17.160 --> 00:04:20.490
set, especially with link. Although
we do have things like

67
00:04:20.490 --> 00:04:23.010
LinkedIn data set, I mean
there's ways to go. That's

68
00:04:23.010 --> 00:04:25.770
true. But I mean, you
can't just ignore the past

69
00:04:25.800 --> 00:04:28.560
either. Yeah. Right. I mean,
you can't just wake up

70
00:04:28.560 --> 00:04:30.540
one day and go, Oh
yeah. All that code you've

71
00:04:30.540 --> 00:04:32.940
been writing for the past
seven years or five for

72
00:04:32.940 --> 00:04:35.820
what, you know, it's, you
know, throw it away. You

73
00:04:35.820 --> 00:04:38.370
know, you can't do that,
especially if you're Microsoft. Right.

74
00:04:38.370 --> 00:04:42.300
Exactly. And so you have
to have that to bridge,

75
00:04:42.540 --> 00:04:44.550
but the reality is that
that link and I don't

76
00:04:44.550 --> 00:04:47.030
mean link to SQL, I
mean, link to objects, basically

77
00:04:47.550 --> 00:04:51.150
Link as a structured non
tunneled way to query objects.

78
00:04:51.150 --> 00:04:52.890
Right. I mean, not a
tunnel in the sense that

79
00:04:53.340 --> 00:04:56.760
the syntax doesn't live in
a string. Yup. Yup, exactly.

80
00:04:57.210 --> 00:05:01.530
And so at that level
link, it gives you everything

81
00:05:01.530 --> 00:05:05.430
that you wanted out of
a dataset starting filtering, but

82
00:05:05.430 --> 00:05:07.950
it does it in a
much bigger, better, more flexible

83
00:05:08.010 --> 00:05:12.510
manner. Right. And lets you
join across multiple data sources

84
00:05:12.510 --> 00:05:14.760
and all sorts of other
cool stuff. Right. And so

85
00:05:14.760 --> 00:05:18.750
all of a sudden the
data sets not so even

86
00:05:18.750 --> 00:05:22.260
attractive anymore because it doesn't
offer any value that you

87
00:05:22.260 --> 00:05:25.530
couldn't have gotten better through
link. Right. Right. And so

88
00:05:25.530 --> 00:05:29.310
now I think you start
to say, well, all these

89
00:05:29.310 --> 00:05:31.950
people that have been running
around for a long time

90
00:05:31.950 --> 00:05:37.530
now building all object, relational
mapping or tools like Paul Wilson

91
00:05:37.530 --> 00:05:41.160
or you know, a lot
of these things that take

92
00:05:41.190 --> 00:05:42.930
data out of the database
and give it to you

93
00:05:42.930 --> 00:05:47.070
in an object form, start
to look even more attractive.

94
00:05:47.220 --> 00:05:50.190
Right. Because before you would
get these objects, like I

95
00:05:50.190 --> 00:05:52.020
built, I mean at my
last company we built a

96
00:05:52.020 --> 00:05:54.600
code generator, me, we were
actually pulling it out of

97
00:05:54.600 --> 00:05:57.710
a database, into a system.
It lived as brackets for

98
00:05:57.710 --> 00:06:00.170
a moment and then into
objects. And we found that

99
00:06:00.170 --> 00:06:02.840
once we got those objects,
we were always trying to

100
00:06:03.170 --> 00:06:05.750
query them because the data
didn't come back exactly the

101
00:06:05.750 --> 00:06:08.270
way we wanted it. Yup.
Right. And of course link

102
00:06:08.280 --> 00:06:10.670
solves that problem. So anything
that brings something back, cause

103
00:06:10.670 --> 00:06:13.760
it's an object is suddenly
not only attractive, but very

104
00:06:13.760 --> 00:06:19.270
viable. Yep. And so then,
then I think, you know,

105
00:06:19.270 --> 00:06:22.300
you start looking at all
these different third party or

106
00:06:22.300 --> 00:06:24.880
M is open source or
not some of which have

107
00:06:24.880 --> 00:06:29.080
been around for a while.
Yeah. And you know, Microsoft

108
00:06:29.830 --> 00:06:32.320
certainly link in the entity
framework are not their first

109
00:06:32.320 --> 00:06:35.140
run at this, but it's
the first run that's actually

110
00:06:35.140 --> 00:06:39.850
made it out. Right. Link.
Yeah. Entity framework isn't technically

111
00:06:39.850 --> 00:06:42.910
out yet. So you know,
any minute now, arguably it

112
00:06:42.910 --> 00:06:49.120
could go away, but Tricia
let's hope not. But, but

113
00:06:49.120 --> 00:06:52.000
I think there's a commonality
across all of these tools

114
00:06:52.270 --> 00:06:56.050
that know how to put
this. So if you step

115
00:06:56.050 --> 00:06:59.260
back and look at the
object oriented design thing in

116
00:06:59.260 --> 00:07:04.060
a, in a bigger picture,
right? The object relational mapping

117
00:07:04.060 --> 00:07:09.010
problem is really big and,
and very, very complicated because

118
00:07:09.160 --> 00:07:12.820
ideally when you're creating your
objects, you're doing it. Of

119
00:07:12.820 --> 00:07:15.430
course, this is my view.
You're going to design your

120
00:07:15.430 --> 00:07:19.840
objects. I'm using responsibility driven
design where the objects are

121
00:07:19.840 --> 00:07:23.110
defined by behaviors within a
use case, not by the

122
00:07:23.110 --> 00:07:26.410
database. Right. And this is
the issue about the physical

123
00:07:26.410 --> 00:07:30.130
layout of a relational database
and those things like, you

124
00:07:30.130 --> 00:07:32.110
know, how cardinality works and
those things that are very

125
00:07:32.110 --> 00:07:35.530
much database focused things and
how entities relate to each

126
00:07:35.530 --> 00:07:39.280
other are, is very different
from how an object graph

127
00:07:39.400 --> 00:07:42.640
works. And very often, if
you are an object person,

128
00:07:43.120 --> 00:07:46.240
you think about modeling your
system in terms of objects,

129
00:07:46.320 --> 00:07:49.630
you want those objects to
reflect a logical reality. Yes,

130
00:07:49.660 --> 00:07:52.150
that's right. Not the physical
reality of the database. Yup.

131
00:07:52.740 --> 00:07:55.900
And, and so you end
up in all sorts of

132
00:07:55.900 --> 00:08:00.250
weird, almost cognitive dissonance type
things, especially if you're The

133
00:08:00.250 --> 00:08:04.420
other person impedance mismatch there.
Yeah. Well, and that's a,

134
00:08:04.430 --> 00:08:07.830
that's a David Taylor, I think
coined that term. Yeah. Not

135
00:08:07.840 --> 00:08:10.060
really. It's it's it seems
like it's in the, it's

136
00:08:10.060 --> 00:08:11.950
in the ether. It's one
of those things that's just

137
00:08:11.950 --> 00:08:15.610
out there. Yeah. He's his
very nice thin book called

138
00:08:15.790 --> 00:08:20.200
object oriented technology, a manager's
guide and wrote it. I

139
00:08:20.200 --> 00:08:22.900
don't even know early nineties.
I think really it's a

140
00:08:22.900 --> 00:08:24.940
great read. Even if you're
a developer, even though it

141
00:08:24.940 --> 00:08:26.830
says it's a manager's book,
it's a good book to

142
00:08:26.830 --> 00:08:29.560
read. Cause it's got a
lot of great concept stuff.

143
00:08:29.620 --> 00:08:33.340
Yeah. But, and then he
talks about this, what we're

144
00:08:33.340 --> 00:08:38.410
talking about here. Right. And
so the, the, the limitation

145
00:08:38.410 --> 00:08:41.740
with all of these ORM
tools is that they create

146
00:08:41.890 --> 00:08:46.180
objects that look like data
structures. Right. And that's not

147
00:08:46.180 --> 00:08:48.820
bad. Right. Cause it's, it's
a whole lot easier to

148
00:08:48.820 --> 00:08:53.050
deal with data looking objects
than data sets or whatever.

149
00:08:53.080 --> 00:08:55.740
Right. Right. That's a huge
step forward, but it still

150
00:08:55.740 --> 00:08:58.620
doesn't really get you where
you want to be, which

151
00:08:58.620 --> 00:09:02.760
is just directly mapping data
from a database into logical

152
00:09:02.760 --> 00:09:09.240
objects that reflect your use
cases. Right. And which, which,

153
00:09:09.560 --> 00:09:13.470
and so like CSLA for
instance, sits at that top

154
00:09:13.470 --> 00:09:16.680
level. My whole goal was
CSLA is to enable you

155
00:09:16.680 --> 00:09:20.570
to build object models that
reflect your use cases. So

156
00:09:20.570 --> 00:09:24.020
you explicitly kind of issue
the idea that this is

157
00:09:24.020 --> 00:09:26.000
a direct mapping from the
database and you really want

158
00:09:26.000 --> 00:09:29.090
it to look more like,
I mean, it's not, it's

159
00:09:29.090 --> 00:09:31.130
not bottom up. It's not
from the database up. It's

160
00:09:31.130 --> 00:09:34.160
from, you know, the business
problem. That would be the

161
00:09:34.160 --> 00:09:38.750
ideal. Okay. And a lot
of people use CSLA to

162
00:09:38.750 --> 00:09:42.800
create effectively entity objects. Okay.
It works for that, but

163
00:09:42.800 --> 00:09:45.560
that's not why I'm creating
it. It's not what I

164
00:09:45.560 --> 00:09:47.210
think people should, I assume
you made it because you

165
00:09:47.210 --> 00:09:50.180
needed to use it for
work. Well, that's true. Right.

166
00:09:50.450 --> 00:09:55.100
And, but I also have
kind of a purist and

167
00:09:55.160 --> 00:09:57.590
you know, I try not,
I have heard that you're

168
00:09:57.590 --> 00:10:03.230
a bit of a purist,
So, you know, so I

169
00:10:03.230 --> 00:10:05.570
look at this and I
say, well, all of the,

170
00:10:05.570 --> 00:10:08.090
you know, N hibernate entity
framework linked to sequel, all

171
00:10:08.090 --> 00:10:13.160
these things are beautiful replacements
for ado.net sitting behind the

172
00:10:13.160 --> 00:10:16.580
CSLA or the, you know,
in my world. Yeah, sure.

173
00:10:16.580 --> 00:10:19.070
In a world where everyone
uses your tool. Sure. That's

174
00:10:19.070 --> 00:10:23.840
how it works. Yeah. But
honestly, if you're creating services,

175
00:10:24.470 --> 00:10:27.350
so you're the author of
services. You maybe don't need

176
00:10:27.350 --> 00:10:31.670
a lot of rich business
object, domain object type stuff

177
00:10:31.670 --> 00:10:34.700
like CSLA gives you. And
so you might just directly

178
00:10:34.700 --> 00:10:37.850
build your service on top
of a set of, you

179
00:10:37.850 --> 00:10:39.920
know, linked to SQL or
entity or, you know, whatever.

180
00:10:40.220 --> 00:10:41.750
Well, this is a good
point though. Let's let's let's

181
00:10:41.780 --> 00:10:42.800
let me back up for
a second. Let me put

182
00:10:42.800 --> 00:10:45.920
this in concrete terms. So
we don't lose people with,

183
00:10:45.940 --> 00:10:48.500
with LinkedIn equal. I sit
in visual studio, go file

184
00:10:48.500 --> 00:10:51.710
new application. I see my
database in the server Explorer

185
00:10:51.710 --> 00:10:54.860
and I drag a few
tables over and then magically,

186
00:10:54.860 --> 00:10:57.050
I get a product object
and a category object. And

187
00:10:57.050 --> 00:11:00.380
it looks a lot like
the database. Yes that's, that's

188
00:11:00.380 --> 00:11:02.720
happens in a visual designer
in this cogeneration that happens

189
00:11:02.720 --> 00:11:05.150
in the background. They give
me crud, they give me

190
00:11:05.150 --> 00:11:09.170
create, read, update, and delete,
and a philosophy that very,

191
00:11:09.170 --> 00:11:13.430
very much reflects the physicality
of the database linked to

192
00:11:13.430 --> 00:11:16.100
entities. And the entity framework
gives you a slightly different

193
00:11:16.100 --> 00:11:18.860
design service that allows you
to have an additional layer

194
00:11:18.860 --> 00:11:21.380
of abstraction, as well as
a, a little bit deeper

195
00:11:21.380 --> 00:11:24.860
stack. And I could have,
for example, a product object

196
00:11:25.250 --> 00:11:27.620
that went to three or
four tables in the database

197
00:11:27.620 --> 00:11:30.350
rather than one. So then
those are, and then linked

198
00:11:30.350 --> 00:11:33.620
to those objects. So I
get these objects. I can

199
00:11:33.830 --> 00:11:36.980
run LINQ queries on them.
After the fact with linked

200
00:11:36.980 --> 00:11:38.810
to SQL, I can run
LINQ queries in SQL is

201
00:11:38.810 --> 00:11:42.560
generated. I get it. I
get a free Dow, a

202
00:11:42.560 --> 00:11:46.190
free database access layer. That's
the perception, right? But then

203
00:11:46.190 --> 00:11:49.880
we start thinking about layers
versus tiers. And I usually

204
00:11:49.880 --> 00:11:51.860
use the term that a
layer is a logical thing

205
00:11:52.340 --> 00:11:55.270
and a tear as a
physical thing, meaning that this

206
00:11:55.270 --> 00:11:58.270
object exists on that machine
over there. And now we're

207
00:11:58.270 --> 00:12:03.900
talking about services. Hi, this
is Carl Franklin, the producer of

208
00:12:03.900 --> 00:12:07.140
Hansel minutes with a message
from Tellerik. Do you know

209
00:12:07.140 --> 00:12:11.700
how to build web 2.0
Ajax applications with web 1.0

210
00:12:11.700 --> 00:12:16.290
components, right? You just can't
in order to have next

211
00:12:16.290 --> 00:12:20.100
generation web apps, you need
next generation components. And that's

212
00:12:20.100 --> 00:12:22.740
exactly what our friends at
Tellerik have for you. Their

213
00:12:22.740 --> 00:12:27.210
upcoming product code name, rad
controls Prometheus's is a huge

214
00:12:27.240 --> 00:12:30.390
pack of web controls built
on top of Microsoft ASP,

215
00:12:30.390 --> 00:12:35.310
net Ajax, which will add
previously impossible performance in interactivity

216
00:12:35.700 --> 00:12:38.070
to your next project. Just
listen to this. The new

217
00:12:38.070 --> 00:12:42.180
controls mirror, the ASP net
Ajax API. So development is

218
00:12:42.180 --> 00:12:46.500
straight forward. Client scripts are
shared. So loading time is

219
00:12:46.500 --> 00:12:49.140
pretty much instant. And if
you just set a couple

220
00:12:49.140 --> 00:12:51.690
of properties, you'll be able
to automatically bind to web

221
00:12:51.690 --> 00:12:55.590
services for even more efficient
operation. After all the facts

222
00:12:55.590 --> 00:12:58.530
speak for themselves, the new
rad editor for ASP net

223
00:12:58.530 --> 00:13:02.730
Ajax loads up to four
times faster than before. Similarly,

224
00:13:02.730 --> 00:13:06.840
rad grid handles thousands of
records in mere milliseconds. But

225
00:13:06.840 --> 00:13:11.430
again, it's best to try
for yourself visit telerik.com/asp, net

226
00:13:11.460 --> 00:13:15.210
Ajax, and download a trial.
And don't forget to thank

227
00:13:15.210 --> 00:13:19.410
them for supporting Hansel minutes.
So linked to SQL doesn't

228
00:13:19.410 --> 00:13:24.330
initially lend itself to being
in an alternative tier by

229
00:13:24.330 --> 00:13:26.760
itself. You can't just push
a button and say, now

230
00:13:26.760 --> 00:13:29.310
you can be in the
business tier of a whole

231
00:13:29.310 --> 00:13:32.280
series of other machines. No,
that's right. Then you start

232
00:13:32.280 --> 00:13:34.950
thinking about things like what
was code named as Storia

233
00:13:35.490 --> 00:13:39.780
having data services that live
in alternative tier? Yes. That

234
00:13:39.780 --> 00:13:42.420
was the, now the ado.net
data services was, I suppose

235
00:13:42.420 --> 00:13:44.670
we'll have to do a
whole other show. Yup. But

236
00:13:44.670 --> 00:13:49.320
that's cool stuff. That stuff
I understand. So with CSLA

237
00:13:49.440 --> 00:13:54.510
what do I do? Well,
the CSLA worldview, the, the,

238
00:13:54.870 --> 00:13:56.290
When I sit down and
go file new and I

239
00:13:56.290 --> 00:13:58.200
have a database, what happens
or do I don't have

240
00:13:58.200 --> 00:14:02.250
it yet? What I've been
doing lately is I create

241
00:14:02.250 --> 00:14:07.170
my CSLA objects, my business
objects using again, responsibility use

242
00:14:07.170 --> 00:14:10.050
case design, you know, And
there's tooling for this, I

243
00:14:10.050 --> 00:14:12.600
assume. Well, not so much.
Oh really? Okay. So how

244
00:14:12.600 --> 00:14:15.420
am I making these objects?
Visual studio is your friend.

245
00:14:15.730 --> 00:14:19.360
Okay. So I write the
code myself, right? Yeah. You

246
00:14:19.400 --> 00:14:22.530
got to like writing code
now to be fair though,

247
00:14:22.530 --> 00:14:26.280
there are quite a set
of code generators for CSLA

248
00:14:27.060 --> 00:14:30.360
code Smith has got some
templates, my generation, there's a

249
00:14:30.360 --> 00:14:33.690
couple of commercial offerings, you
know, so you can go

250
00:14:33.690 --> 00:14:36.990
open source our commercial to
buy generators that will create

251
00:14:36.990 --> 00:14:38.850
a lot of the code
for you for, for these

252
00:14:38.850 --> 00:14:41.760
business objects. Okay. And what
the, what about the wa

253
00:14:41.790 --> 00:14:44.370
I know what linked to
SQL logics look like. What

254
00:14:44.460 --> 00:14:47.400
about them makes them special?
They inter implement an interface.

255
00:14:47.400 --> 00:14:49.890
They have attributes. They do
ride from certain base classes.

256
00:14:50.580 --> 00:14:54.110
Well, there's really two things
That CSLA does at a,

257
00:14:54.110 --> 00:14:57.200
at a high level. One
is that it supports the

258
00:14:57.200 --> 00:15:01.630
creation of a rich user
interface through the support for

259
00:15:01.640 --> 00:15:06.290
data binding, integrated support for
validation, a business rule engine

260
00:15:07.130 --> 00:15:10.910
and an authorization engine. And
so all of these things,

261
00:15:10.910 --> 00:15:15.470
when you build a business
object using CSLA, the object

262
00:15:15.470 --> 00:15:18.920
ends up in capsulated, not
only data, but more importantly

263
00:15:18.920 --> 00:15:24.920
behaviors, including things like validation,
rules, calculations, authorization, even down

264
00:15:24.920 --> 00:15:29.120
to the property level. And
then when you buying these

265
00:15:29.120 --> 00:15:33.500
objects, especially to windows forms
where the data binding is

266
00:15:33.910 --> 00:15:38.270
really robust, right? Then you
get automatically get all of

267
00:15:38.270 --> 00:15:41.630
this data binding support so
that as the user tabs

268
00:15:41.630 --> 00:15:45.590
off each field, that field
values validated the, if it's

269
00:15:45.590 --> 00:15:48.800
incorrect, you get the error
provider icon. If they're not

270
00:15:48.800 --> 00:15:50.990
authorized to see it, they
won't see it. If they're

271
00:15:50.990 --> 00:15:53.690
not authorized to change it,
they'll see it, but they

272
00:15:53.690 --> 00:15:57.410
can't edit it. And this
is just all essentially automatic.

273
00:15:57.410 --> 00:16:00.410
There's very little code in
the UI to do that.

274
00:16:00.980 --> 00:16:04.670
And they also support web
forms, data binding, which isn't

275
00:16:04.790 --> 00:16:07.630
quite as robust, you know,
it was windows, but with

276
00:16:07.630 --> 00:16:10.820
the same object can be
used behind windows. Our web,

277
00:16:11.390 --> 00:16:13.240
There could be some really
cool stuff with ASP, net

278
00:16:13.240 --> 00:16:17.650
MVC, and CSLA working together.
So this is interesting. So

279
00:16:17.680 --> 00:16:20.020
the fact that you're bringing
up all of these very,

280
00:16:20.560 --> 00:16:24.700
very user-focused and very user
interface, focused things makes me

281
00:16:25.210 --> 00:16:28.690
really understand the separation between
CSLA. It's not a dowel.

282
00:16:28.690 --> 00:16:32.050
They really are business objects
and they touch as well.

283
00:16:32.070 --> 00:16:34.000
As I like to say,
they touch the glass of

284
00:16:34.000 --> 00:16:37.450
the user's experience. They're literally
touching the monitor because these

285
00:16:37.450 --> 00:16:40.270
objects are talking to the
fields that they interact with

286
00:16:40.300 --> 00:16:43.540
directly. I wouldn't do data
binding any data binding. I

287
00:16:43.540 --> 00:16:45.460
mean, if you going back
to what you were saying

288
00:16:45.460 --> 00:16:50.050
about layering know, there's a
presentation layer that could be

289
00:16:50.050 --> 00:16:53.950
web windows WPF working on
a CSLA for silver light.

290
00:16:54.040 --> 00:16:56.410
So, you know, in the
relatively near future, it could

291
00:16:56.410 --> 00:17:01.060
be silver light. Cool. And
you know, and so if

292
00:17:01.060 --> 00:17:03.460
you look at it from
a model view controller perspective,

293
00:17:03.670 --> 00:17:07.000
the CSLA objects, the business
objects are the model, But

294
00:17:07.000 --> 00:17:11.320
they're the model. Are they,
they view data. Well, cause

295
00:17:11.320 --> 00:17:13.840
there's a, there's a lot
of stuff. Well, it's somewhat

296
00:17:13.840 --> 00:17:18.910
challenging, honestly, because the <inaudible>
has an, I think an

297
00:17:18.910 --> 00:17:22.180
odd way of separating things
out. In some sense, you've

298
00:17:22.180 --> 00:17:24.880
got some sort of a
view that the user has.

299
00:17:24.910 --> 00:17:28.480
Right, right. And that's a
web form or a windows

300
00:17:28.480 --> 00:17:30.940
form or whatever. Right. Right.
And then you've got a

301
00:17:30.940 --> 00:17:34.420
controller that establishes the relationship
or the presenter or whatever

302
00:17:34.420 --> 00:17:38.980
that establishes the relationship between
that view and your underlying,

303
00:17:39.400 --> 00:17:41.500
you know, model Underlying model.
But then the big question

304
00:17:41.500 --> 00:17:43.870
is whether or not you
decide to pass the objects

305
00:17:43.870 --> 00:17:46.960
from your model, through the
controller and into the view,

306
00:17:46.990 --> 00:17:49.680
or whether you choose to
transform them, that's the trick.

307
00:17:49.680 --> 00:17:54.450
Right? And so if you
like data binding or more,

308
00:17:54.450 --> 00:17:56.220
let's flip it around. If
you, if you want to

309
00:17:56.220 --> 00:17:58.080
minimize the amount of code
that you have to write

310
00:17:58.740 --> 00:18:01.230
data binding does that for
you. Right. Cause it does

311
00:18:01.230 --> 00:18:04.530
all of this hookup stuff,
especially in windows, but WPF

312
00:18:04.530 --> 00:18:08.640
is getting there pretty rapidly
with support, for error, validation,

313
00:18:08.640 --> 00:18:14.250
and so forth. And so
if your objects let's, let's,

314
00:18:14.250 --> 00:18:16.440
I look at them as
being the model. If your

315
00:18:16.440 --> 00:18:19.560
objects are really rich and,
and encapsulate all of this

316
00:18:19.560 --> 00:18:25.050
stuff by themselves, then ideally
your controller is pretty thin

317
00:18:25.050 --> 00:18:28.260
and just does sets up
the data binding relationship coordinator.

318
00:18:28.890 --> 00:18:33.270
Right? Exactly. Yes. I realize
people philosophically sometimes go, Oh,

319
00:18:33.270 --> 00:18:36.090
we don't want to do
that well, okay. But that

320
00:18:36.120 --> 00:18:38.100
just means you're writing a
lot of code that Microsoft

321
00:18:38.100 --> 00:18:40.050
already wrote for you in
the form of data binding.

322
00:18:40.130 --> 00:18:42.230
But there's also a lot
of philosophical questions that brings

323
00:18:42.230 --> 00:18:44.120
up because a lot of
people are moving towards this

324
00:18:44.120 --> 00:18:47.600
notion of services that are
smart, that represent the verbs

325
00:18:47.600 --> 00:18:50.990
in the actions. Well, objects
are really becoming in their,

326
00:18:51.050 --> 00:18:54.440
in their perception stupider. Yes,
that's right. The more classic

327
00:18:54.440 --> 00:18:55.790
old people. And I would
think of you as being

328
00:18:55.790 --> 00:18:58.590
more of a, an old
practitioner would really prefer the

329
00:18:58.640 --> 00:19:02.360
objects to be very intelligent.
Well, the controller would be

330
00:19:02.360 --> 00:19:04.430
more of a Coordinator. The
thing is early in my

331
00:19:04.430 --> 00:19:09.110
career, I did Fortran. And
whether you call them services

332
00:19:09.110 --> 00:19:12.800
or procedures, it's the same
thing. And been there done

333
00:19:12.800 --> 00:19:15.050
that. I don't really feel
the need to go back

334
00:19:15.050 --> 00:19:18.620
to passing a bunch of
dumb parameter data into a

335
00:19:18.620 --> 00:19:21.020
procedure that we now call
a service. So it sounds

336
00:19:21.020 --> 00:19:24.890
froofy, you know, and not
that that's a bad model.

337
00:19:24.890 --> 00:19:27.860
I mean, I I'm being
dismissive. Certainly the thing is

338
00:19:27.890 --> 00:19:31.220
pick a religion and be
excited about it and respect

339
00:19:31.220 --> 00:19:33.170
it. And I think that
people should pick this. What

340
00:19:33.170 --> 00:19:35.210
makes them happy? The, I
don't even know if I

341
00:19:35.210 --> 00:19:39.290
agree with that because at
an architectural level, there are

342
00:19:39.290 --> 00:19:41.870
really good reasons why you
might use the kinds of

343
00:19:41.870 --> 00:19:45.350
objects that CSLA enables. That's
pretty, that's a very dogmatic

344
00:19:45.380 --> 00:19:48.140
view though. Right? Well, it
is, but it's true. And

345
00:19:48.140 --> 00:19:50.060
then there are also really
good reasons why you would

346
00:19:50.060 --> 00:19:54.230
go down a service approach
or right. They are. And

347
00:19:54.830 --> 00:19:58.280
in any mid to large
sized system, odds are, you're

348
00:19:58.280 --> 00:20:00.530
going to need some of
each. Yeah. And then, so

349
00:20:00.530 --> 00:20:02.360
it's kind of naive to
think that you're going to

350
00:20:02.390 --> 00:20:05.270
Ooh, be all, I'm all,
I'm only object That's right.

351
00:20:05.300 --> 00:20:06.920
That's a very valid point.
It really is about picking

352
00:20:06.920 --> 00:20:08.810
the right tool for the
solution. I mean, I tend

353
00:20:08.810 --> 00:20:11.300
to lean more towards the
service side, but then I

354
00:20:11.390 --> 00:20:14.840
tend to work on large
systems. So, you know, if

355
00:20:14.840 --> 00:20:17.270
I were to go and
write some tray icon that,

356
00:20:17.360 --> 00:20:20.090
that did something in wind
forms, if I try to

357
00:20:20.090 --> 00:20:22.430
design it like a large
surface oriented system, I probably

358
00:20:22.430 --> 00:20:25.730
would not succeed Well. And
I think even if you're

359
00:20:25.730 --> 00:20:29.180
creating a true service oriented,
you know, message based asynchronous

360
00:20:29.180 --> 00:20:32.450
system at the edge, you
still have to give the

361
00:20:32.450 --> 00:20:36.530
user a good experience. And
that means that at the

362
00:20:36.530 --> 00:20:38.600
edge of that, you have
to have some level of

363
00:20:38.600 --> 00:20:41.780
business logic running as close
to the user as you

364
00:20:41.780 --> 00:20:46.730
possibly can, because your only
alternative otherwise is that the

365
00:20:46.730 --> 00:20:48.460
user going to enter the
data and then you have

366
00:20:48.460 --> 00:20:51.760
to route it through is
probably some relatively expensive services

367
00:20:51.760 --> 00:20:53.500
to find out if the
data was any good or

368
00:20:53.620 --> 00:20:57.790
that's bad. Yeah. And so
even if you become totally

369
00:20:57.790 --> 00:21:02.380
SOA, something like CSLA with
its rich objects that do

370
00:21:02.380 --> 00:21:05.320
all the validation and all
this other cool stuff almost

371
00:21:05.320 --> 00:21:08.350
for free at the UI
level are really good to

372
00:21:08.350 --> 00:21:11.260
create the applications that are
at the edge. And then

373
00:21:11.260 --> 00:21:13.420
instead of talking to a
database, they just talked to

374
00:21:13.420 --> 00:21:16.630
a bunch of services. Right.
So it's kind of, I

375
00:21:16.630 --> 00:21:19.400
still see that as a
very natural fit. Okay. So

376
00:21:19.440 --> 00:21:22.650
trying to bring it full
circle, where does CSLA fit

377
00:21:22.650 --> 00:21:25.170
in a world where I
have linked to sequel? Is

378
00:21:25.170 --> 00:21:27.810
it it's downstream and linked
to SQL is the dowel

379
00:21:27.810 --> 00:21:32.670
that feeds the CSLA objects.
Yeah. Although I would actually

380
00:21:32.670 --> 00:21:35.520
flip it around cause I
always see the objects as

381
00:21:35.520 --> 00:21:39.690
the center of the universe.
So you build your object,

382
00:21:40.200 --> 00:21:42.180
your, your domain object, the
way you want it to

383
00:21:42.180 --> 00:21:46.200
look you based on your
use cases and yep, exactly.

384
00:21:46.950 --> 00:21:52.410
And those objects then support
any, ideally any of your

385
00:21:52.410 --> 00:21:59.100
UI options, windows, web, WPF
Silverlight, and then they consume

386
00:21:59.100 --> 00:22:03.030
their data. Right. They do
their crud operations, basically using

387
00:22:03.030 --> 00:22:06.870
some sort of data access
layer and linked to sequel

388
00:22:07.740 --> 00:22:10.290
is in my view, a
really great way to build

389
00:22:10.290 --> 00:22:12.930
that data access layer. That's
what I've been doing lately.

390
00:22:13.290 --> 00:22:17.040
And it's, I mean, it's
got that beautiful designer, it's

391
00:22:17.040 --> 00:22:19.830
got started procedure support. And
so you've got this really

392
00:22:19.830 --> 00:22:23.700
nice, easy way of sitting
down and creating a, a

393
00:22:23.700 --> 00:22:26.160
dowel with very little effort.
Do you have some example

394
00:22:26.160 --> 00:22:28.350
apps? Have you done the
canonical app, the Northwind app,

395
00:22:28.380 --> 00:22:32.280
the adventure works app. I've
got a reference app for

396
00:22:32.280 --> 00:22:36.900
CSLA called project tracker that
uses that the current version

397
00:22:36.900 --> 00:22:40.350
of it, because I'm just
about to release CSLA version

398
00:22:40.350 --> 00:22:44.130
3.5 within the next say
month or so. Cool. And

399
00:22:44.130 --> 00:22:47.820
so the project tracker reference
app actually does all the

400
00:22:47.820 --> 00:22:50.310
things that I'm talking about
here and does in fact

401
00:22:50.310 --> 00:22:55.680
use linked to SQL for
it's Dell. Very cool. Okay.

402
00:22:55.770 --> 00:22:59.220
But doesn't this feel like?
I mean, I know that

403
00:22:59.220 --> 00:23:00.930
these are complex systems and
there's a lot of work

404
00:23:00.930 --> 00:23:02.820
to be done, but I
think I would spend a

405
00:23:02.820 --> 00:23:05.040
lot of time writing left
hand, right hand code as

406
00:23:05.040 --> 00:23:07.470
I take object B and
put bits in the object

407
00:23:07.470 --> 00:23:09.780
day. It seems a little
tedious as I'm shuffling stuff

408
00:23:10.410 --> 00:23:11.910
back and forth. I mean,
I see that I get

409
00:23:11.910 --> 00:23:13.500
a lot of benefits once
I get these into a

410
00:23:13.500 --> 00:23:19.110
CLOC object CSLA object routers.
Right. I see that. I

411
00:23:19.110 --> 00:23:20.490
get a lot of benefits
when I put these into

412
00:23:20.490 --> 00:23:23.610
a CSLA object, but I
still have these other objects

413
00:23:23.610 --> 00:23:25.770
sitting around and it just
doesn't feel very tidy to

414
00:23:25.770 --> 00:23:27.480
me. Is that just something
I need to get over?

415
00:23:29.160 --> 00:23:32.610
Well, I think so, honestly,
I don't even think of

416
00:23:32.610 --> 00:23:35.580
the, the link to sequel
objects as being objects because

417
00:23:35.580 --> 00:23:38.070
I didn't write them. They
don't, even to me, they

418
00:23:38.070 --> 00:23:40.530
don't look like objects, they're
entities that are in memory

419
00:23:41.340 --> 00:23:43.740
or in fact, they're there.
I do these really cool

420
00:23:43.740 --> 00:23:48.290
link, select statements. Right. I
get back stuff and it

421
00:23:48.290 --> 00:23:50.390
is true that you've got
a copy of those values

422
00:23:50.390 --> 00:23:54.080
then, you know, but that's
the, we're back to something

423
00:23:54.080 --> 00:23:56.710
that can be code generated.
Right. You're right. So you're

424
00:23:56.710 --> 00:23:59.260
basically saying don't fool yourself,
even though they look like

425
00:23:59.260 --> 00:24:02.920
objects that they, these are
not your business objects. Right.

426
00:24:02.980 --> 00:24:04.690
Well, I think this is
the thing that if you

427
00:24:04.690 --> 00:24:08.590
really buy into responsibility driven
design, then every object has

428
00:24:08.590 --> 00:24:13.360
exactly one responsibility. And those
objects that link to sequel

429
00:24:13.660 --> 00:24:17.470
is creating for you. They
have a responsibility to which

430
00:24:17.470 --> 00:24:20.530
is to be shaped containers
for data, which is a

431
00:24:20.530 --> 00:24:23.830
great responsibility. I love it,
but it's not the same

432
00:24:23.830 --> 00:24:29.170
as a responsibility such as,
you know, representing a customer

433
00:24:29.500 --> 00:24:33.160
and all of the associated
validation rules, right. Or representing

434
00:24:33.160 --> 00:24:36.370
a sales order with all
of its line items and

435
00:24:36.370 --> 00:24:39.790
pricing. And you're, you know,
that's a whole different thing

436
00:24:40.420 --> 00:24:45.340
than just representing something that
contains data. Is there anything

437
00:24:45.340 --> 00:24:47.350
that you've done to CSLA
to make the objects that

438
00:24:47.350 --> 00:24:49.780
they, that you produce more
friendly to link or are

439
00:24:49.780 --> 00:24:52.960
they linked, enabled by default?
Well, one of the big

440
00:24:52.990 --> 00:24:56.920
things with CSLA 3.5 is
adding some support for link

441
00:24:57.430 --> 00:25:02.050
and it's kind of a,
we're talking linked to objects

442
00:25:02.050 --> 00:25:03.580
at this time. And I'm
wondering if then that blurs

443
00:25:03.580 --> 00:25:08.470
the line and makes it
more difficult to well, So

444
00:25:08.950 --> 00:25:13.750
it's an interesting thing because
CSLA includes a pretty rich

445
00:25:15.190 --> 00:25:19.270
collection type. So not only
to support data binding and

446
00:25:19.270 --> 00:25:21.220
in place editing and grids
and all that sort of

447
00:25:21.220 --> 00:25:26.260
thing, but it understands and
interacts with its child objects.

448
00:25:27.430 --> 00:25:30.520
And so an object that
belongs to a collection, you

449
00:25:30.520 --> 00:25:34.600
know, there's, there's a relationship
there. And so when you

450
00:25:34.930 --> 00:25:37.450
just pop along with link
and do a select statement

451
00:25:37.480 --> 00:25:41.680
against one of these collections,
you get back always two

452
00:25:41.680 --> 00:25:45.220
ways, right? Projection or non
projection. Maybe you can explain

453
00:25:45.220 --> 00:25:48.370
that to them. And so
a projection query is where

454
00:25:48.370 --> 00:25:50.410
you might do a select
and then you're only pulling

455
00:25:50.410 --> 00:25:54.040
out two or three properties,
not the whole thing. Right.

456
00:25:54.170 --> 00:25:57.310
And making an anonymous object,
The case. Yeah. They create

457
00:25:57.310 --> 00:25:59.800
for you an anonymous object
in a new list and

458
00:25:59.800 --> 00:26:02.020
that's all cool. Right. But
that's really Slack. And that

459
00:26:02.020 --> 00:26:04.120
would lend itself to them
being bound to something within

460
00:26:04.120 --> 00:26:06.640
a week. It does. Although
the data mining, the only

461
00:26:06.640 --> 00:26:08.590
one way the data mining
that you get is not

462
00:26:08.590 --> 00:26:12.850
as rich. Yeah. But where
it gets tricky is if

463
00:26:12.850 --> 00:26:15.820
you do a non projection
query. So, so when you

464
00:26:15.820 --> 00:26:18.040
do your, your select, you're
maybe doing a filter or

465
00:26:18.040 --> 00:26:22.060
something, but you select the
whole object, the child object

466
00:26:22.060 --> 00:26:24.760
out of the collection. Right.
Well, that child object, what

467
00:26:24.760 --> 00:26:28.450
you get back from link
then is an innumerable of

468
00:26:28.450 --> 00:26:31.600
that type CSLA type, which
is enabled for all future

469
00:26:31.630 --> 00:26:36.250
Wild objects, which have a
relationship with their parent container,

470
00:26:36.250 --> 00:26:40.390
the original list, and obviously
have no relationship to a

471
00:26:40.390 --> 00:26:44.040
raw IEnumerable of T. And
so then you get into

472
00:26:44.040 --> 00:26:46.080
these weird things like, so
then what do you do?

473
00:26:46.080 --> 00:26:48.870
You take that IEnumerable of
tea and maybe you bind

474
00:26:48.870 --> 00:26:51.540
it to a grid. And
the user starts entering new

475
00:26:51.540 --> 00:26:55.380
rows in the grid. Right.
And they get added to

476
00:26:55.380 --> 00:26:58.080
the IEnumerable, but they don't
get added to the real

477
00:26:58.080 --> 00:27:01.800
list. And then when you
go to save your original

478
00:27:01.800 --> 00:27:04.950
list, these, this data didn't
save and you're sitting here

479
00:27:04.950 --> 00:27:07.290
going, Whoa, the user added
them. Why didn't they get

480
00:27:07.680 --> 00:27:09.150
it out of work? How
are you going, enable a

481
00:27:09.150 --> 00:27:14.790
scenario like that? Well, so
the, basically a CSLA and

482
00:27:14.790 --> 00:27:18.990
now when you do a
non projection query against a

483
00:27:18.990 --> 00:27:22.170
CSLA list, what you get
back is a, a rich

484
00:27:22.200 --> 00:27:27.270
IEnumerable of T that understands
the CSLA relationships. And so

485
00:27:27.270 --> 00:27:31.170
it's actually a live view
of the original list that's

486
00:27:31.170 --> 00:27:34.770
sorted filtered or whatever, based
on your query. And so

487
00:27:34.770 --> 00:27:37.320
now when you, when the
user, for instance, adds or

488
00:27:37.320 --> 00:27:41.190
removes rows in this list,
it adds it to the

489
00:27:41.190 --> 00:27:43.920
view, but it also adds
it to the original list.

490
00:27:44.370 --> 00:27:46.410
And so you get this
kind of transparent flow through,

491
00:27:47.340 --> 00:27:49.110
and I'm not the only
one working on this sort

492
00:27:49.110 --> 00:27:52.500
of thing. And in fact,
much of what I'm describing

493
00:27:52.500 --> 00:27:55.680
was written by a colleague
of mine, Aaron Erickson, who also

494
00:27:55.680 --> 00:28:01.110
works for Magenic and Aaron
wrote a thing, an index

495
00:28:01.110 --> 00:28:07.530
link service. So he it's
an open source project on

496
00:28:07.530 --> 00:28:11.400
code Plex, or it just
adds indexing to link queries

497
00:28:11.400 --> 00:28:14.700
against objects. But there's a
couple other people that are

498
00:28:14.700 --> 00:28:21.930
doing synchronized LINQ query, similar
to sync link, like sync

499
00:28:21.930 --> 00:28:26.070
link. And there's a concurrent
or continuous link. Maybe it's

500
00:28:26.070 --> 00:28:28.320
continuous link is the other
one. It was a couple

501
00:28:28.320 --> 00:28:32.250
of projects along this line.
They're doing much more than

502
00:28:32.250 --> 00:28:35.400
I'm doing okay. Or they're
being much more aggressive. All

503
00:28:35.400 --> 00:28:38.820
I wanted to do was
solve this one problem. So

504
00:28:38.820 --> 00:28:40.470
I'll put all that information
in the show notes. So

505
00:28:40.480 --> 00:28:46.020
where do people go and
find more about CSLA www.latika.net?

506
00:28:46.380 --> 00:28:49.740
Will you spell that? It's
a L H O T

507
00:28:49.920 --> 00:28:52.980
K a.net. Cool. I'll put
all that up in the

508
00:28:52.980 --> 00:28:54.780
show notes. I really appreciate
you taking the time to

509
00:28:54.780 --> 00:28:58.800
sit down with me here
at mix Rocky luck of

510
00:28:58.800 --> 00:29:00.360
Hansel minutes. I'll see you
again next week.

