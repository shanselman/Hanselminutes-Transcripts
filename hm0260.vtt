WEBVTT FILE

1
00:00:12.230 --> 00:00:17.840
From Hansel minutes.com it's Hansel
minutes, a weekly discussion with

2
00:00:17.840 --> 00:00:22.970
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:22.970 --> 00:00:29.090
show number two 60 recorded
live Thursday, March 31st, 2011. Support for

4
00:00:29.090 --> 00:00:32.060
Hanselman. This is provided by
a teller at rad controls.

5
00:00:32.060 --> 00:00:35.060
The most comprehensive suite of
components for windows forums and

6
00:00:35.060 --> 00:00:43.970
asp.net web applications. Online app
www.telerik.com. In this episode, Scott

7
00:00:43.970 --> 00:00:50.720
talks with Jonathan Carter about optimizing
API APIs. Hi, this is

8
00:00:50.720 --> 00:00:53.870
Scott Hanselman. This is another
episode of Hanselminutes today. I'm

9
00:00:53.870 --> 00:00:57.980
talking to Jonathan Carter. How's it
going? JC. It's going great,

10
00:00:57.980 --> 00:01:01.160
Scott. Thanks for having me.
My pleasure. It's always always

11
00:01:01.160 --> 00:01:03.110
fun to hang out with
you. Jonathan has worked with

12
00:01:03.110 --> 00:01:06.830
me on a whole pile
of presentations. We've presented together

13
00:01:06.830 --> 00:01:09.200
all over the place, all
over the world and we've

14
00:01:09.350 --> 00:01:13.760
put demos together and we've
panicked about presentations going well.

15
00:01:13.760 --> 00:01:20.480
We've had lots of fun.
Yeah, Yeah. Panicking is what

16
00:01:20.480 --> 00:01:26.000
I do best. Yeah. And
we've been working on some

17
00:01:26.000 --> 00:01:29.300
stuff for the, for the
keynote at mix. And when

18
00:01:29.300 --> 00:01:35.480
we, when we're building keynote
demos, there is inevitably additional

19
00:01:35.480 --> 00:01:38.630
supporting stuff. That's not the
point of the keynote. It's

20
00:01:38.630 --> 00:01:41.600
just kind of like supporting
code or, you know, help

21
00:01:41.600 --> 00:01:43.850
her functions that will make
the presentation go a little

22
00:01:43.850 --> 00:01:47.570
bit better. And one of
the things that that Jonathan

23
00:01:47.570 --> 00:01:51.320
was working on was a
kind of a clean, lightweight

24
00:01:51.320 --> 00:01:56.240
way to make an RSS
feed. And he's kind of,

25
00:01:56.270 --> 00:01:59.810
you know, kind of exploring
this, this space. There's lots

26
00:01:59.810 --> 00:02:02.420
of different ways to do
an RSS feed for an

27
00:02:02.420 --> 00:02:04.640
application for whether it be
for a demo or for

28
00:02:04.640 --> 00:02:09.740
real life. You could potentially
just make an, a view

29
00:02:09.740 --> 00:02:12.110
in your MVC page or
maybe your raise your page

30
00:02:12.110 --> 00:02:14.480
that looks like RSS and
put a four loop in

31
00:02:14.480 --> 00:02:17.180
there. And then you just
have to decide what fields

32
00:02:17.180 --> 00:02:20.570
you want to output. But
that typically breaks down when

33
00:02:20.600 --> 00:02:24.020
you start getting into more
complicated feeds things like, like

34
00:02:24.050 --> 00:02:29.120
media data and iTunes extensions
to RSS, and then Adam,

35
00:02:30.200 --> 00:02:32.810
another way to do it
would be to do things

36
00:02:32.810 --> 00:02:35.330
in the code behind and
use all of the syndication

37
00:02:35.330 --> 00:02:38.630
feed stuff that's built into
the diamond framework. There's actually

38
00:02:38.630 --> 00:02:40.280
a whole series of classes
that are built into the

39
00:02:40.280 --> 00:02:44.420
diamond framework. But Jonathan, for
this little bit of supporting

40
00:02:44.420 --> 00:02:47.180
code to make an RSS
feed, you did something kind

41
00:02:47.180 --> 00:02:50.510
of different than I, I
didn't expect explain what you

42
00:02:50.510 --> 00:02:58.430
did and why it's a
little different. I've spent a

43
00:02:58.430 --> 00:03:01.300
lot in the year of
my life Working kind of

44
00:03:01.300 --> 00:03:05.410
in the web API and
web services space. So typically

45
00:03:05.410 --> 00:03:08.290
when I think of functionality
or behavior, I like to

46
00:03:08.290 --> 00:03:11.260
think of it as this
service that your application can

47
00:03:11.440 --> 00:03:14.830
just take advantage of instead
of having to, you know,

48
00:03:14.840 --> 00:03:18.370
have too much code spit
or, or assets within your

49
00:03:18.370 --> 00:03:22.770
application that you have to
manage yourself. And so as,

50
00:03:22.770 --> 00:03:24.850
as you mentioned, when we
started thinking about like, Hey,

51
00:03:24.850 --> 00:03:27.820
how could you have a
cool new good package for

52
00:03:27.850 --> 00:03:31.660
getting RSS and Adam into
your application on top of

53
00:03:31.660 --> 00:03:35.260
some arbitrary data? You know,
I started trying to think

54
00:03:35.260 --> 00:03:40.390
about how to leverage new
features within asp.net, as well

55
00:03:40.390 --> 00:03:43.660
as language features within the
C-sharp that I could take

56
00:03:43.660 --> 00:03:47.920
advantage of to make that
kind of an intuitive hopefully,

57
00:03:47.980 --> 00:03:50.950
and then expressive. And so
one of the great things

58
00:03:50.950 --> 00:03:54.700
is because of the fact
that asp.net routing is very

59
00:03:55.030 --> 00:03:57.880
easy to use and very
pluggable, you know, I started

60
00:03:57.880 --> 00:04:00.790
thinking to myself, okay, well
really, you know, if you

61
00:04:00.790 --> 00:04:03.190
want an RSS feed and
Adam feed, instead of having

62
00:04:04.090 --> 00:04:08.160
just static files in your
page, that include the, the

63
00:04:08.170 --> 00:04:11.440
markup for, for doing those
syndication feeds. Why not just

64
00:04:11.440 --> 00:04:16.960
have routes that can be,
that can respond to users,

65
00:04:16.960 --> 00:04:20.650
requests for the data. And
then, and then you don't

66
00:04:20.650 --> 00:04:23.440
have to have that code
in your actual app, but

67
00:04:23.440 --> 00:04:25.210
then the problem is, is,
well, how do you configure

68
00:04:25.210 --> 00:04:28.570
that? How does the routes
know what data's actually serve

69
00:04:28.570 --> 00:04:31.810
and so forth and so
on? So I started taking

70
00:04:31.810 --> 00:04:33.820
a look at, and I've
been really inspired by some

71
00:04:33.820 --> 00:04:36.220
of the web helpers that
the asp.net team has been

72
00:04:36.220 --> 00:04:40.480
doing, like web grid and
web security and so forth,

73
00:04:40.480 --> 00:04:44.290
where they kind of favor
this model of doing a

74
00:04:44.290 --> 00:04:49.060
bit of light initialization, maybe
on pre-AP start and then

75
00:04:49.060 --> 00:04:53.770
having, you know, methods that
favor long kind of parameter

76
00:04:53.800 --> 00:04:57.250
signatures with a lot of
optionals. And, and, but you

77
00:04:57.250 --> 00:05:00.160
can be very expressive and
very flexible as much as

78
00:05:00.160 --> 00:05:02.680
you want. And so I
thought, wouldn't it be great

79
00:05:02.720 --> 00:05:06.280
if you could, within an
application, pull down a new,

80
00:05:06.280 --> 00:05:10.810
get package and have one
line of code that specifies

81
00:05:10.810 --> 00:05:14.530
your title, your description of
your feed, and then a

82
00:05:14.530 --> 00:05:17.920
Lambda to specify where your
data comes from and then

83
00:05:17.920 --> 00:05:21.580
a Lambda to map your
data, whatever the type is

84
00:05:21.610 --> 00:05:25.510
to a model that is
used to express how a

85
00:05:25.510 --> 00:05:28.960
feed looks in a, an
NRSS or Adam syndication seed

86
00:05:29.980 --> 00:05:34.060
that way it's pretty lightweight,
but also pretty flexible if

87
00:05:34.060 --> 00:05:36.760
you really need it to
be. And, and it's worked

88
00:05:36.760 --> 00:05:40.950
out so far and hopefully
people like it. Yeah. It's,

89
00:05:40.950 --> 00:05:43.680
it's, it's really interesting. It
sounds, of course, it's always

90
00:05:43.680 --> 00:05:47.220
funny to talk about code
on a podcast, but it's

91
00:05:47.220 --> 00:05:49.860
interesting to look at this
particular chunk of code and

92
00:05:49.860 --> 00:05:51.930
we'll, we'll certainly we'll put
this up, you're going to

93
00:05:51.930 --> 00:05:53.820
release it on new get,
and you'll blog about it

94
00:05:53.820 --> 00:05:57.260
as well. Listeners will go
check it out. But I

95
00:05:57.260 --> 00:05:59.390
think what's interesting is that
if you think about the

96
00:06:01.220 --> 00:06:05.870
what's involved in making an
RSS feed, it's deceptively simple,

97
00:06:06.620 --> 00:06:10.220
but it gets really complex,
really fast. And you've got

98
00:06:10.380 --> 00:06:12.830
the, like you said, the
hooking up of the routes,

99
00:06:12.890 --> 00:06:16.400
where is the URL going
to be? Where's the data

100
00:06:16.400 --> 00:06:18.980
going to come from? How
is the data going to

101
00:06:18.980 --> 00:06:22.520
change? Because there's a transformation.
Typically what you've got in

102
00:06:22.520 --> 00:06:25.400
your database or your database
context is not going to

103
00:06:25.400 --> 00:06:27.770
look anything like RSS. So
you want to be able

104
00:06:27.770 --> 00:06:29.990
to pick and choose from
fields. You want to say,

105
00:06:29.990 --> 00:06:31.940
I want this field, I
want that field, et cetera,

106
00:06:32.810 --> 00:06:35.360
and possibly do a small
transformation while you're doing it,

107
00:06:35.390 --> 00:06:38.600
maybe to uppercase or lowercase
or snipping something off or

108
00:06:39.110 --> 00:06:42.140
something. So there's, there's the,
where's it coming from? There's

109
00:06:42.140 --> 00:06:46.910
the transformation. And then new
get brings in the, the

110
00:06:46.910 --> 00:06:51.350
drop inability. It's not quite
a component story, but the

111
00:06:51.350 --> 00:06:54.800
idea that the user has
re has gotten your code

112
00:06:54.800 --> 00:06:58.730
very quickly, but they want
to get results very quickly

113
00:06:58.730 --> 00:07:02.120
too. So you're almost kind
of designing your API for

114
00:07:02.120 --> 00:07:04.130
the assumption that this has
been dropped in, and they're

115
00:07:04.130 --> 00:07:05.690
going to look at it.
They want to change a

116
00:07:05.690 --> 00:07:10.420
few things and then run.
Totally it's it's funny. Cause

117
00:07:10.420 --> 00:07:12.820
I was just having a
conversation with a colleague the

118
00:07:12.820 --> 00:07:16.630
other day and, you know,
in the handful of libraries

119
00:07:16.630 --> 00:07:20.320
that I'm working on right
now, the, the syndication feed

120
00:07:20.320 --> 00:07:24.100
being one of them, I'm
definitely very explicit about new

121
00:07:24.100 --> 00:07:29.440
get being that distribution model,
which does modify kind of

122
00:07:29.680 --> 00:07:33.190
the way you think about
designing the API and giving

123
00:07:33.190 --> 00:07:35.860
you additional tools kind of,
so to speak, to think

124
00:07:35.860 --> 00:07:38.920
about how to, you know,
get that extra line of

125
00:07:38.920 --> 00:07:41.530
code out of there or
make it that much more

126
00:07:41.530 --> 00:07:45.460
simpler for the consumer is
pretty nice, you know, because

127
00:07:45.460 --> 00:07:48.250
certainly I'm a freak when
it comes to simplicity when

128
00:07:48.250 --> 00:07:51.610
designing API APIs. And you're
always trying to achieve that

129
00:07:51.820 --> 00:07:56.050
Holy grail of one line
of code, but, but yeah,

130
00:07:56.080 --> 00:07:58.390
definitely a new get really
does help a lot to

131
00:07:58.390 --> 00:08:01.430
make it simpler for folks.
Some of these new API

132
00:08:01.430 --> 00:08:04.030
APIs though, that have come
out in the, in the

133
00:08:04.030 --> 00:08:09.310
C-sharp and VP space lately
looks so foreign. I've heard

134
00:08:09.310 --> 00:08:12.370
a lot of people feel
that they, they there's a,

135
00:08:12.370 --> 00:08:15.460
there's a saying that someone
moved my cheese, you know,

136
00:08:15.460 --> 00:08:17.020
you look at it, you
look at an API like

137
00:08:17.020 --> 00:08:21.370
the web grid that you
use in razor and you

138
00:08:21.370 --> 00:08:23.830
say, wow, that just doesn't
look like anything I've ever

139
00:08:23.830 --> 00:08:26.770
seen. And what's ironic is
that people are saying that

140
00:08:26.770 --> 00:08:28.780
it doesn't look like what
they're used to, but what

141
00:08:28.780 --> 00:08:32.530
they're used to is a
constructor that takes like seven

142
00:08:32.530 --> 00:08:36.100
strings. So they'll, you know,
they'll say my new something,

143
00:08:36.580 --> 00:08:38.760
string chemistry and chemistry and
come up and come straight

144
00:08:38.770 --> 00:08:42.010
and come and strength, you
know, and then a new

145
00:08:42.010 --> 00:08:44.980
style of, of, of a
development. And I don't know

146
00:08:44.980 --> 00:08:46.480
if this is a style
yet. I think that's what

147
00:08:46.480 --> 00:08:49.390
we're exploring with something like
web grid you're using named

148
00:08:49.390 --> 00:08:52.690
parameters. So you might have
a dozen or more parameters,

149
00:08:53.560 --> 00:08:57.540
but many of them have
appropriate. So with web grid,

150
00:08:57.570 --> 00:09:01.260
you might say something like
VAR grid equals new web

151
00:09:01.260 --> 00:09:05.040
grid, and then your parameters
would have things like can

152
00:09:05.050 --> 00:09:10.620
short colon, false comma rows
per page, colon 10. And

153
00:09:11.910 --> 00:09:15.150
that, that makes for a
very interesting looking, looking API

154
00:09:15.150 --> 00:09:18.480
when you're using name parameters,
but then things get crazy

155
00:09:18.480 --> 00:09:21.540
when you start chaining kind
of jQuery style and you

156
00:09:21.540 --> 00:09:24.870
say dot bind. So you've
really got two lines of

157
00:09:24.870 --> 00:09:28.980
codes, suddenly all on one
line. And then inevitably people

158
00:09:29.130 --> 00:09:31.200
break that up on multiple
lines. So you could end

159
00:09:31.200 --> 00:09:34.470
up with a lot of
code and a lot of

160
00:09:34.620 --> 00:09:40.410
moving parts in effectively, one
line of code, where is

161
00:09:40.410 --> 00:09:42.450
that coming from? Why are
we changing things? Is it

162
00:09:42.450 --> 00:09:44.700
jQuery that's causing us to
change things together? Or is

163
00:09:44.700 --> 00:09:49.110
it the introduction of Lambdas
and, and in C sharp,

164
00:09:50.750 --> 00:09:53.390
You know, it's interesting that
you say that because I

165
00:09:53.390 --> 00:09:57.260
mean, I obviously can't speak
on any authority, but I

166
00:09:57.260 --> 00:10:00.020
think that J crew might
be very responsible for that.

167
00:10:00.020 --> 00:10:03.350
Cause you know, method chaining
as a pattern has been

168
00:10:03.350 --> 00:10:06.620
around for a long time,
but yeah, it never really

169
00:10:06.620 --> 00:10:11.420
became commonplace that I know
certainly in API is until

170
00:10:11.420 --> 00:10:15.680
jQuery really embraced that idea
of, you know, let's get

171
00:10:15.680 --> 00:10:19.550
as much functionality on quote
unquote, one line of code

172
00:10:19.550 --> 00:10:23.690
as possible, which I think
is awesome. And personally isn't

173
00:10:23.930 --> 00:10:27.350
an intuitive style for myself,
but yeah, you do struggle

174
00:10:27.950 --> 00:10:31.520
certainly when you're designing your
own API to, to kind

175
00:10:31.520 --> 00:10:36.740
of assume or hope that
folks consuming your, your library

176
00:10:37.490 --> 00:10:40.970
find the same kind of
style to be intuitive, which

177
00:10:40.970 --> 00:10:42.980
is where things get a
bit problematic. Cause yeah, you

178
00:10:42.980 --> 00:10:44.840
do have to choose between,
do you want to be

179
00:10:44.840 --> 00:10:49.400
opinionated or do you want
to be very flexible? But

180
00:10:49.400 --> 00:10:52.220
I definitely do think as
I mentioned, because of the

181
00:10:52.220 --> 00:10:56.780
fact that, you know, jQuery
is extremely popular and taken

182
00:10:56.780 --> 00:11:01.460
off, I have to believe
that people are getting adapted

183
00:11:01.460 --> 00:11:06.390
to that message chaining kind
of a flowing of, of,

184
00:11:06.750 --> 00:11:11.240
of a method calls style.
They're getting pretty familiar with

185
00:11:11.240 --> 00:11:14.750
this too, where API designers
can start taking advantage of

186
00:11:14.750 --> 00:11:18.020
it and feeling confident that
they're not gonna add an

187
00:11:18.020 --> 00:11:21.200
additional concept count to their
users that that causes it

188
00:11:21.200 --> 00:11:25.820
to be unwieldy to you.
Isn't there a barrier kind

189
00:11:25.820 --> 00:11:28.250
of a barrier to entry
healing as the more fluent

190
00:11:28.250 --> 00:11:31.100
and the more chain your
make your API, aren't you

191
00:11:31.790 --> 00:11:34.520
cutting down the number of
people that are either going

192
00:11:34.520 --> 00:11:38.000
to be able to understand
it or be willing to,

193
00:11:38.630 --> 00:11:40.820
to understand it. I mean,
I've seen some pretty crazy

194
00:11:40.820 --> 00:11:44.420
fluent API APIs that say
things like, you know, my

195
00:11:44.420 --> 00:11:50.330
object.is.something.you know, it's like, well
really are we, are we

196
00:11:50.330 --> 00:11:52.700
seriously going in that direction?
We're going to build sentences

197
00:11:52.760 --> 00:11:55.630
and that okay, because no
one will decide, no one

198
00:11:55.630 --> 00:11:59.260
can decide like what is
the, his object? Maybe this

199
00:11:59.260 --> 00:12:02.170
is just me being old
and an old crusty guy

200
00:12:02.170 --> 00:12:05.380
with a beard. But how,
you know, how far do

201
00:12:05.380 --> 00:12:08.280
you take something like this?
Yeah, no, I definitely agree.

202
00:12:08.280 --> 00:12:10.260
And I think a lot
of folks that have strong

203
00:12:10.260 --> 00:12:14.340
opinions around fluent interfaces agree
that you don't want to

204
00:12:14.340 --> 00:12:17.550
try to be creating an
English language. If you do

205
00:12:17.550 --> 00:12:21.210
that kind of API, you
know, there's definitely a nice

206
00:12:21.210 --> 00:12:24.420
flow that you can create
in the chain of methods.

207
00:12:24.420 --> 00:12:26.340
But yeah, when you get
to the point where you're

208
00:12:26.340 --> 00:12:31.140
doing methods called is, or
do you know, you're, you're

209
00:12:31.140 --> 00:12:33.270
almost getting a little bit,
way too far on the

210
00:12:33.270 --> 00:12:38.430
deep end. And I personally
don't like that style. Another

211
00:12:38.430 --> 00:12:40.620
thing that I, that I've
always been kind of been

212
00:12:40.620 --> 00:12:43.770
a fan of is, you
know, the notion of a

213
00:12:43.770 --> 00:12:46.500
fluent interface, really being kind
of like a UI on

214
00:12:46.500 --> 00:12:50.490
top of an API. And
so, you know, a lot

215
00:12:50.490 --> 00:12:53.250
of, a lot of times
I've seen where, you know,

216
00:12:53.250 --> 00:12:57.900
folks optimize for the fluent
interface and that is really

217
00:12:57.900 --> 00:13:00.870
the only kind of way
to interact with, with a

218
00:13:00.870 --> 00:13:05.040
library. And that's great if
you happen to subscribe to

219
00:13:05.040 --> 00:13:08.790
the same style or thinking
that that inner, that fluid

220
00:13:08.790 --> 00:13:12.420
interface was designed in, but
if you don't, then you're

221
00:13:12.420 --> 00:13:15.930
kind of, you know, a
little bit out of luck

222
00:13:16.110 --> 00:13:17.700
and that there is no
way to fall back to

223
00:13:17.700 --> 00:13:21.930
a more general purpose kind
of simpler way to interface

224
00:13:21.930 --> 00:13:25.950
with the library. Whereas a
lot of folks and kind

225
00:13:25.950 --> 00:13:27.690
of a pattern that I
personally like is where you

226
00:13:27.690 --> 00:13:32.970
have an underlying kind of
quote unquote canonical interface that

227
00:13:33.360 --> 00:13:38.010
is uses kind of traditional
familiar patterns, you know, tries

228
00:13:38.010 --> 00:13:42.630
to use as little generics
as possible. Doesn't go Lambda

229
00:13:42.630 --> 00:13:46.890
crazy, doesn't require message chaining
and very cryptic, you know,

230
00:13:47.700 --> 00:13:50.700
patterns that they're getting more
and more common. And then

231
00:13:50.700 --> 00:13:53.070
on top of that, you
layer, you know, you're more

232
00:13:53.070 --> 00:13:56.310
kind of ambitious or, or
radical things like you just

233
00:13:56.790 --> 00:14:00.060
have Lambdas everywhere and generics
out the wazoo. Maybe you're

234
00:14:00.060 --> 00:14:04.140
using Jeanette some dynamics stuff.
And to me that feels

235
00:14:04.140 --> 00:14:07.920
really good. And once again,
going back to the web

236
00:14:07.950 --> 00:14:11.160
API metaphor, you know, I
almost kind of look at

237
00:14:11.160 --> 00:14:16.560
your library, the core library
as an API, and then

238
00:14:16.710 --> 00:14:19.230
in the same way that,
you know, different users of

239
00:14:19.230 --> 00:14:23.580
Twitter, like different experiences on
top of that service, a

240
00:14:23.580 --> 00:14:26.850
fluent interface is really just
another way to create a

241
00:14:26.850 --> 00:14:31.290
different experience of that underlying
library. Some people are gonna

242
00:14:31.300 --> 00:14:34.140
like it, some people aren't.
And so that's why I,

243
00:14:34.710 --> 00:14:36.660
you know, I, I like
to say that you should

244
00:14:36.660 --> 00:14:40.180
be as ambitious as you
want because yeah, that, that,

245
00:14:40.470 --> 00:14:44.040
that interface or that programming
model that allows me to

246
00:14:44.040 --> 00:14:48.000
be very expressive with my
Lambdas and, and do all

247
00:14:48.000 --> 00:14:50.670
kinds of stuff like name
parameters, and give me tons

248
00:14:50.670 --> 00:14:53.930
of, and let me do
chaining. And for me, that's

249
00:14:53.930 --> 00:14:56.420
great, but for someone else
that's not going to be.

250
00:14:57.260 --> 00:15:00.020
And so kind of having
that flexibility and giving people

251
00:15:00.020 --> 00:15:02.840
options, I think is definitely
a pretty nice pattern to

252
00:15:02.840 --> 00:15:07.150
go with. Hi, this is
Scott coming to you from

253
00:15:07.150 --> 00:15:10.360
another place in time. Are
you using agile practices to

254
00:15:10.360 --> 00:15:12.580
manage your software development? There's
lots of tools in the

255
00:15:12.580 --> 00:15:14.890
market that manage the steps
of a project, but most

256
00:15:14.890 --> 00:15:17.800
of them focus on individual
roles, get ready for a

257
00:15:17.800 --> 00:15:20.200
solution that caters for the
success of the whole team

258
00:15:20.350 --> 00:15:24.070
guys at Tellerik introduced team
pulse. It's an agile project

259
00:15:24.070 --> 00:15:27.640
management tool. That'll help you
gather ideas, estimate plan, track

260
00:15:27.640 --> 00:15:31.540
progress in a common workspace.
Finally companies, regardless of their

261
00:15:31.540 --> 00:15:33.700
size can use a lightweight
and convenient tool. It makes

262
00:15:33.700 --> 00:15:37.150
all the stakeholders work as
a United team, even if

263
00:15:37.150 --> 00:15:40.540
they're in different countries by
combining intuitive user interface and

264
00:15:40.540 --> 00:15:43.330
the power server light team
poles removes the roadblocks that

265
00:15:43.330 --> 00:15:45.970
you typically face and applying
agile in an effective manner,

266
00:15:46.600 --> 00:15:49.780
no more lost data, no
disparate systems, no lack of

267
00:15:49.780 --> 00:15:53.650
critical analytics regarding the health
and philosophy project. See if

268
00:15:53.650 --> 00:15:56.470
yourself, you get a free
copy for five users in

269
00:15:56.470 --> 00:16:03.250
one project at tellerik.com/team pulse.
And please do thank Tellerik

270
00:16:03.250 --> 00:16:07.810
for supporting Hansel minutes on
their Facebook fan page, facebook.com/t

271
00:16:07.810 --> 00:16:12.160
L E R I K
Keller. We do appreciate it.

272
00:16:12.190 --> 00:16:14.140
There wouldn't be a Hansel
minutes if there wasn't, Tellerik

273
00:16:14.140 --> 00:16:16.990
helping us. I like that.
I think that that really

274
00:16:16.990 --> 00:16:18.890
resonated with me that you
said that it was a

275
00:16:18.910 --> 00:16:21.820
kind of a UI. I
mean, it's, it's like, it's

276
00:16:21.820 --> 00:16:24.400
like the API might be
the command line and the

277
00:16:24.400 --> 00:16:27.580
fluent API might be the
gooey. And you want to

278
00:16:27.580 --> 00:16:30.160
give the person the flexibility
to do both, and you

279
00:16:30.160 --> 00:16:33.250
may not have complete fidelity
in the UI. There may

280
00:16:33.250 --> 00:16:35.920
be stuff you need to
drop down to, but like,

281
00:16:36.070 --> 00:16:38.890
for example, I'm looking at
some code right now that

282
00:16:38.890 --> 00:16:41.260
we'll pull, we'll include a
link on the show notes

283
00:16:41.770 --> 00:16:44.980
where we register a data
feed. And we basically say

284
00:16:46.450 --> 00:16:49.210
all of my, all of
my data is here and

285
00:16:49.210 --> 00:16:51.520
here's how it maps. And
here's some additional fields and

286
00:16:51.520 --> 00:16:56.260
it's like 23 lines of
code 24 lines of code.

287
00:16:57.130 --> 00:17:02.050
It's actually one line it's
like data feeds dot register.

288
00:17:02.290 --> 00:17:05.410
And then there's 24 lines
of very nice, nicely cleanly

289
00:17:05.410 --> 00:17:09.040
indented code. And then this,
and I could this as

290
00:17:09.040 --> 00:17:11.890
it is be done, not
in one line. Could I,

291
00:17:12.230 --> 00:17:14.380
I mean, have you designed
this that same way where

292
00:17:14.380 --> 00:17:16.330
there's the flow API and
then there's the underlying stuff?

293
00:17:17.680 --> 00:17:19.930
Yeah, so, I mean, it
could definitely probably be much

294
00:17:19.960 --> 00:17:23.800
better, but there is an
overload of the function that

295
00:17:24.310 --> 00:17:29.650
it doesn't use generics. And
also doesn't enforce Lambdas within

296
00:17:29.650 --> 00:17:32.230
the kind of the same
context as the method call.

297
00:17:32.240 --> 00:17:35.940
So you can pass the
kind of all encompassing feeds

298
00:17:35.940 --> 00:17:39.820
settings or aggregate object that
contains all of your settings.

299
00:17:39.820 --> 00:17:41.950
And, you know, that allows
people that if they want

300
00:17:41.950 --> 00:17:44.260
to feel like they're being
a little bit more imperative

301
00:17:44.980 --> 00:17:49.440
or pulling values from some
external data source and they

302
00:17:49.440 --> 00:17:53.750
want to do it that
way, they can, Some of

303
00:17:53.750 --> 00:17:56.450
the things that the people
who are listening may or

304
00:17:56.450 --> 00:17:59.000
may not be familiar with.
Cause you know, everyone has

305
00:17:59.000 --> 00:18:02.600
a different level of, of,
of code and ability and

306
00:18:02.600 --> 00:18:05.990
a familiarity with the system
that, that varies. But you've

307
00:18:05.990 --> 00:18:09.650
got some, some IEnumerable of
T right, which means that

308
00:18:09.650 --> 00:18:11.960
you're going to spin over
something or spin through some

309
00:18:11.960 --> 00:18:17.930
data, but then you've got
some funk F U N

310
00:18:17.930 --> 00:18:21.230
C. So for example, one
of the, one of the

311
00:18:21.230 --> 00:18:24.530
parameters that you take in,
you've got a funk, that's

312
00:18:24.530 --> 00:18:30.710
a generic of context and
I innumerable of some entity.

313
00:18:31.400 --> 00:18:36.170
So at some point there
are programmers that will struggle

314
00:18:36.170 --> 00:18:40.220
with that level of, of
genericness or indirection. Can you

315
00:18:40.220 --> 00:18:43.280
talk about what a funk
is and how and why

316
00:18:43.280 --> 00:18:46.010
you would need a funk
of T context of IEnumerable

317
00:18:46.010 --> 00:18:48.530
of TNT and why that's
so powerful and why it's

318
00:18:48.530 --> 00:18:54.200
something that folks should learn?
Yeah, yeah. So long time

319
00:18:54.200 --> 00:19:00.260
ago, back in the.net, one,
one, one days, and two

320
00:19:00.260 --> 00:19:02.960
days, I forget exactly the
version of the.net framework that

321
00:19:02.960 --> 00:19:07.430
funk and action were introduced
in, but no people at

322
00:19:07.430 --> 00:19:10.910
some point would want to
introduce, like you said, indirection

323
00:19:11.000 --> 00:19:14.870
such that a function would
take a delegate and the

324
00:19:14.870 --> 00:19:18.440
delegate just being either a
point or two, another method,

325
00:19:18.440 --> 00:19:22.850
or kind of a, an
aggregation of code that you

326
00:19:22.850 --> 00:19:27.030
can pass to another function
to execute such that it

327
00:19:27.110 --> 00:19:29.570
can allow itself to be
kind of a bit dynamic

328
00:19:29.570 --> 00:19:32.480
of what it does. And,
and the problem was is

329
00:19:33.050 --> 00:19:36.680
delegates. People were creating one
for everything. So he would

330
00:19:36.680 --> 00:19:40.160
say, okay, I need a,
a message signature that takes

331
00:19:40.160 --> 00:19:44.210
an integer and returns a
bullion, or takes two bullions

332
00:19:44.210 --> 00:19:46.850
and returns a string. And
so you ended up having

333
00:19:46.850 --> 00:19:51.920
this explosion of delegates that
people were creating. And so

334
00:19:52.040 --> 00:19:56.780
one, one funk and also
action were introduced. It was

335
00:19:56.780 --> 00:20:00.620
effectively saying, Hey, we realize
that people are using this

336
00:20:00.620 --> 00:20:03.530
pattern a lot where they
need to delegate that either

337
00:20:03.950 --> 00:20:08.180
just takes a series of
parameters and returns, nothing, which

338
00:20:08.180 --> 00:20:11.090
is where action is used
and action assist to delegate

339
00:20:11.240 --> 00:20:14.780
that that allows you to
specify different what types of

340
00:20:14.780 --> 00:20:17.870
parameters the function will take
and that it doesn't return

341
00:20:17.870 --> 00:20:22.070
anything. And then funk is,
is a delegate that is

342
00:20:22.100 --> 00:20:26.510
generic and allows you to
specify, I take these number

343
00:20:26.510 --> 00:20:29.450
of parameters of this type,
and then I return this

344
00:20:29.450 --> 00:20:32.840
type of parameter. And so
in the case of the,

345
00:20:32.880 --> 00:20:37.190
the kind of syndication feed
registration method, you just mentioned

346
00:20:37.580 --> 00:20:41.660
where you have a parameter
that's of type funk context,

347
00:20:41.690 --> 00:20:46.250
comma. IEnumerable what that saying
is, is that that represents

348
00:20:46.280 --> 00:20:50.200
a method or a block
of executable code such as

349
00:20:50.200 --> 00:20:55.360
Atlanta, that will take a
context, parameter, whatever that might

350
00:20:55.360 --> 00:20:58.810
be. And that's a generic
type that we were talking

351
00:20:58.810 --> 00:21:00.610
about, and then it will
return an I a new

352
00:21:00.610 --> 00:21:03.430
rule. So this, this block
of code, or this method

353
00:21:03.430 --> 00:21:08.320
is responsible for responding with
a list of data that

354
00:21:08.320 --> 00:21:13.240
it can optionally retrieve from
this context type that is

355
00:21:13.240 --> 00:21:16.870
being given. And it definitely
is a little bit hard

356
00:21:16.870 --> 00:21:19.840
to get to know. I
know a lot of times,

357
00:21:20.410 --> 00:21:24.280
you know, when I, for
the last few years, really

358
00:21:24.760 --> 00:21:27.820
certainly at Microsoft, whenever we
would, you know, try to

359
00:21:28.180 --> 00:21:31.270
produce simple API APIs or,
or guidance for folks, we

360
00:21:31.270 --> 00:21:36.460
were always very weary of
using generics. Not because we

361
00:21:36.460 --> 00:21:39.250
didn't think people could understand
it, but just you wanted

362
00:21:39.250 --> 00:21:43.060
things to be as simple
as possible. And, and generics

363
00:21:43.060 --> 00:21:45.420
is of course, another concept
thing that you need to

364
00:21:45.490 --> 00:21:48.790
grasp and understand. And so
when you kind of add

365
00:21:48.790 --> 00:21:54.880
on top of that generic
delegates and then Lambda expressions,

366
00:21:55.630 --> 00:21:59.710
yeah. Things can get a
little bit hairy quickly, but

367
00:21:59.980 --> 00:22:02.110
you know, I'm hoping to
take the stance of being

368
00:22:02.110 --> 00:22:06.070
a bit opinionated and, you
know, thinking that people will

369
00:22:06.070 --> 00:22:10.990
like the expression expressiveness that
you can have with those

370
00:22:11.020 --> 00:22:15.190
type of concepts and then
language features and will hopefully

371
00:22:15.190 --> 00:22:18.430
embrace them. But if they
don't then, you know, make

372
00:22:18.430 --> 00:22:20.500
sure to provide them with
a more simpler version of

373
00:22:20.500 --> 00:22:24.840
the API as well. Yeah.
There's, there's definitely a, a

374
00:22:24.840 --> 00:22:27.690
level that one could take
it and designing an API

375
00:22:27.690 --> 00:22:31.470
like this. That would be
almost too much. It would

376
00:22:31.470 --> 00:22:34.830
just, it would be kind
of, if one could call

377
00:22:34.830 --> 00:22:41.010
an API obnoxious one could
go too far. <inaudible>, it's

378
00:22:41.010 --> 00:22:44.430
just like really come on.
But at the same time

379
00:22:44.820 --> 00:22:48.660
with, with something like this,
where you're basically, you, you

380
00:22:48.660 --> 00:22:52.620
need to pass a chunk
of functionality, you know, into

381
00:22:52.620 --> 00:22:58.140
your, into your API and
kind of in the old

382
00:22:58.140 --> 00:23:01.790
days you would say, well,
I'll take something of a

383
00:23:01.860 --> 00:23:05.880
certain interface. So you, you
might have said, I'm going

384
00:23:05.880 --> 00:23:08.490
to register and Hey, you
know, that thing that's going

385
00:23:08.490 --> 00:23:12.300
to provide me and my
feeds, all my data. We'll

386
00:23:12.300 --> 00:23:16.320
have an I feed provider
thingy and then you'll go

387
00:23:16.320 --> 00:23:18.840
and you'd make some interface.
And then the idea would

388
00:23:18.840 --> 00:23:21.630
be that the user would
implement that interface. They'd have

389
00:23:21.630 --> 00:23:23.340
to go and make a
custom class, and then they'd

390
00:23:23.340 --> 00:23:26.880
have an eye feed provider,
mapper, object thingy, and then

391
00:23:26.880 --> 00:23:30.570
they'd pass that in. But
the funk, it's like a

392
00:23:30.570 --> 00:23:33.600
generic way of saying, you
give me one of these

393
00:23:33.600 --> 00:23:37.080
and I'll give you one
of those. And then the

394
00:23:37.110 --> 00:23:41.220
provider can, can literally just
be a Lambda. And like

395
00:23:41.220 --> 00:23:43.530
you said, a Lambda is
like a little script block

396
00:23:43.560 --> 00:23:47.180
almost. It's like a C
sharp or Phoebe script block.

397
00:23:47.900 --> 00:23:50.720
It says, here's the little
bit of mapping or here's

398
00:23:50.720 --> 00:23:52.340
a little bit of work
I want you to do.

399
00:23:53.060 --> 00:23:55.540
And, and it, it, I
think, and I I've had

400
00:23:55.580 --> 00:23:59.330
this conversation with prob Connery.
I think it makes dotnet

401
00:23:59.330 --> 00:24:02.450
more fun and feel more,
feel more dynamic. I think

402
00:24:02.450 --> 00:24:05.570
it's funny that, that a
Ruby guys and, you know,

403
00:24:05.580 --> 00:24:07.680
they take all this stuff
for granted. Cause they're, they're

404
00:24:07.700 --> 00:24:11.180
throwing these kinds of constructs
around all the time. I

405
00:24:11.180 --> 00:24:14.870
think that a.net programmers, we,
we kind of need to

406
00:24:14.870 --> 00:24:17.450
raise our game. Don't you
think we need to start

407
00:24:17.450 --> 00:24:21.970
familiarizing our stuff with this?
Yeah, it's funny because like,

408
00:24:21.970 --> 00:24:25.150
I, you know, obviously I'm,
as people are starting to

409
00:24:25.150 --> 00:24:29.050
notice, JavaScript is just exploding
and you know, now with

410
00:24:29.050 --> 00:24:32.200
no JS and it's, you
know, people are wanting to

411
00:24:32.200 --> 00:24:35.140
use it on the server
and the client, but, and

412
00:24:35.140 --> 00:24:37.150
I love JavaScript as much
as everyone else. Cause it's

413
00:24:37.150 --> 00:24:40.240
a very expressive language, but,
but yeah, in many cases,

414
00:24:40.240 --> 00:24:44.410
C sharp Lambdas can actually
be much more expressive and,

415
00:24:45.350 --> 00:24:49.660
and compact than what you
could even do with anonymous

416
00:24:49.660 --> 00:24:53.410
functions in JavaScript. So yeah,
like you say, when I,

417
00:24:53.530 --> 00:24:56.320
when I write or use
an API, that's kind of

418
00:24:56.470 --> 00:24:59.830
Lambda, I don't want to
say Lambda to heavy and

419
00:24:59.830 --> 00:25:03.070
that it's just completely over
the top and unnecessary, but

420
00:25:03.070 --> 00:25:06.730
it makes use of Lambdas
where applicable it does feel

421
00:25:06.730 --> 00:25:10.570
very fun. Cause it's kinda
like scripting or man, you're

422
00:25:10.570 --> 00:25:13.750
just, it feels like it's
fluid as you're writing the

423
00:25:13.750 --> 00:25:16.660
code. You're kind of from
one parameter to the next.

424
00:25:16.660 --> 00:25:19.570
Certainly if you have, you
know, a method call or

425
00:25:19.570 --> 00:25:23.350
an object where Lambdas can
interact with each other, which

426
00:25:23.350 --> 00:25:27.220
can get a bit weird,
but once you grasp that

427
00:25:27.220 --> 00:25:31.810
concept, it does start to
feel very dynamic and very

428
00:25:31.810 --> 00:25:36.460
fluid and it can make
it more joyous. You know,

429
00:25:36.460 --> 00:25:39.760
if that, even it doesn't
sound ridiculous to use the

430
00:25:39.760 --> 00:25:42.610
API or even to write
it. No, it doesn't. It's

431
00:25:42.610 --> 00:25:44.680
funny that you say that,
you know, Rob and I

432
00:25:44.680 --> 00:25:46.750
have been talking about this
and I've been, this has

433
00:25:46.750 --> 00:25:49.330
kind of been a little
mini crusade of mine internally

434
00:25:49.330 --> 00:25:52.810
about if we, we always,
we at Microsoft are always

435
00:25:52.810 --> 00:25:57.220
focused on product program or
productivity. And if we would

436
00:25:57.220 --> 00:26:02.200
spend more time focusing on
program or joy program or

437
00:26:02.200 --> 00:26:05.830
productivity would fall out of
that. I mean, we, me

438
00:26:05.830 --> 00:26:08.200
and Rob, I keep bringing
up Rob, because I think

439
00:26:08.200 --> 00:26:10.360
of Rob Connery as being
someone who is very joy,

440
00:26:10.420 --> 00:26:13.480
joy focused, right? Here's a
guy who lives in, in

441
00:26:13.480 --> 00:26:17.230
Hawaii here. He could live
anywhere. He lives in Hawaii

442
00:26:17.230 --> 00:26:22.450
because he is optimizing for
surfing. And he, he and

443
00:26:22.450 --> 00:26:24.880
I did a show a
couple of months, a month

444
00:26:24.880 --> 00:26:27.790
or two ago on, on
web matrix. And we kind

445
00:26:27.790 --> 00:26:32.170
of proposed the idea that
web matrix wasn't necessarily for

446
00:26:32.770 --> 00:26:35.320
who the marketing people said
it was for, right. The

447
00:26:35.320 --> 00:26:38.230
marketing people say that it's
for like these, these, these,

448
00:26:38.230 --> 00:26:40.450
they call them the breadth
developer, right? It's the, it's

449
00:26:40.450 --> 00:26:44.970
the young kids in the
hobbyists. And we, we proposed

450
00:26:45.000 --> 00:26:49.740
that. It's probably also for
the crusty old programmer who

451
00:26:49.740 --> 00:26:52.860
wants to optimize for fun.
And we went and we

452
00:26:52.860 --> 00:26:57.240
wrote the, this developer's life
website in, in razor and

453
00:26:57.240 --> 00:27:03.030
in web matrix. Cause it
was more fun. And I,

454
00:27:03.090 --> 00:27:06.090
when I started using your,
your data feeds API and

455
00:27:06.090 --> 00:27:09.840
exploring that, I just said,
well, this is fun. It

456
00:27:09.840 --> 00:27:12.480
gets out of the way.
It's a difficult thing to,

457
00:27:13.110 --> 00:27:18.000
to describe why one API
would have joy and another

458
00:27:18.000 --> 00:27:21.180
one would not, but I
don't know, it's a break

459
00:27:21.180 --> 00:27:23.580
from the TDM to get
so much done. And so

460
00:27:23.580 --> 00:27:27.540
few lines of code. And
I think that the dotnet

461
00:27:27.540 --> 00:27:31.650
community, the open source community
and Microsoft themselves really need

462
00:27:31.650 --> 00:27:34.860
to take a cue from
the Ruby folks and from

463
00:27:34.860 --> 00:27:37.770
the Python folks and from
some of the academics that

464
00:27:37.770 --> 00:27:41.220
are really looking for expressiveness
in their, in their language

465
00:27:41.220 --> 00:27:46.710
design. And again, productivity almost
doesn't need to be optimized

466
00:27:46.710 --> 00:27:50.870
for as much anymore. Yeah.
Yeah. I definitely agree on

467
00:27:50.870 --> 00:27:53.930
the productivity point. I remember,
you know, one of the

468
00:27:54.580 --> 00:27:57.470
things that really was a
stark reality to me was

469
00:27:58.850 --> 00:28:03.530
seeing how successful iPhone development
and Facebook development was one

470
00:28:03.530 --> 00:28:07.460
for the longest time the
Facebook platform was the documentation

471
00:28:07.460 --> 00:28:11.780
was horrible and it was
a very crusty API and

472
00:28:11.870 --> 00:28:15.350
very much the same way
with iPhone development. But the

473
00:28:15.500 --> 00:28:18.680
thing was is that those
two platforms had a great

474
00:28:18.680 --> 00:28:22.730
ecosystem that was very fun
to develop and very satisfying.

475
00:28:23.570 --> 00:28:26.990
And so, yeah, I, I
kind of realized that productivity

476
00:28:27.020 --> 00:28:30.680
should not be the first
kind of the highest order

477
00:28:30.680 --> 00:28:33.740
bit in that, that kind
of scenario. You definitely want

478
00:28:33.740 --> 00:28:36.980
to, if you can do
it great. But it's funny

479
00:28:36.980 --> 00:28:38.900
that you mentioned the thing
about web matrix. Cause I

480
00:28:38.900 --> 00:28:43.610
actually, I've been working on
another project that's called mercury

481
00:28:43.850 --> 00:28:46.940
and when I first started
it, it was going to

482
00:28:46.940 --> 00:28:49.970
have some web components to
it. And I originally was

483
00:28:49.970 --> 00:28:51.770
going to use MVC just
cause that's what I've been

484
00:28:51.770 --> 00:28:54.800
using for years. But I,
I kinda decided that I

485
00:28:54.800 --> 00:28:59.300
wanted to give asp.net web
pages a try and, you

486
00:28:59.300 --> 00:29:02.060
know, I liked razor in
the context of NBC, but

487
00:29:02.060 --> 00:29:05.360
I also, you know, used
to work in a PHP

488
00:29:05.360 --> 00:29:08.900
shop before kind of embracing
the.net world. And I wanted

489
00:29:08.900 --> 00:29:11.420
to see what it felt
like to get back to

490
00:29:11.450 --> 00:29:14.800
inline pages and, you know,
keeping things very simple and

491
00:29:14.810 --> 00:29:18.380
not feeling like I have
to architect an entire pipeline

492
00:29:18.380 --> 00:29:22.580
for every form and I've
actually been loving it. And

493
00:29:22.580 --> 00:29:26.000
so I totally agree that
it's interesting that web matrix

494
00:29:26.360 --> 00:29:30.080
and ASP on a webpage,
this has been targeted towards

495
00:29:30.080 --> 00:29:35.300
kind of the breads hobbyist
when I'm using visual studio

496
00:29:35.300 --> 00:29:40.280
2010 ultimate and doing quote
unquote pro development. And I

497
00:29:40.280 --> 00:29:43.780
find it to be a
great experience and, and there's

498
00:29:43.780 --> 00:29:48.120
so much in the webpages
runtime, even that is, that

499
00:29:48.120 --> 00:29:52.440
is really awesome. So like
being able to use what

500
00:29:52.440 --> 00:29:56.010
they call application parts and,
and being able to extend

501
00:29:56.010 --> 00:30:00.030
the administrative portal, you know,
which opens up a whole

502
00:30:00.030 --> 00:30:05.490
new option of scenarios for
developers, where if you want

503
00:30:05.490 --> 00:30:08.310
your new package to have
a visual aspect to it

504
00:30:08.310 --> 00:30:13.110
or configuration, you know, why
not extend the webpages admin

505
00:30:13.110 --> 00:30:18.380
portal and bootstrap that in
your application and just all

506
00:30:18.400 --> 00:30:20.850
these new and interesting ways
to think about as well

507
00:30:21.450 --> 00:30:24.360
as a library or API
designer. Yeah. How can you

508
00:30:24.360 --> 00:30:28.230
take advantage of the most
simplest and the quote unquote

509
00:30:28.500 --> 00:30:35.780
funnest environment and options for
your and users and it's,

510
00:30:35.880 --> 00:30:38.100
you know, always a challenge
and a constant struggle to

511
00:30:38.100 --> 00:30:41.970
find that, but, but there
is definitely some aesthetic. It's

512
00:30:41.970 --> 00:30:44.880
almost like, you know, all
these designers and with mics

513
00:30:44.880 --> 00:30:48.180
coming up, you know, people
that spend hours and hours

514
00:30:48.180 --> 00:30:51.690
and hours thinking about the
psychology of color and button

515
00:30:51.690 --> 00:30:56.880
placement to create the most
possible and best user experience,

516
00:30:58.380 --> 00:31:02.250
you know, it's almost like
as designers, creators and open

517
00:31:02.250 --> 00:31:06.660
source developers and so forth,
we should be doing UX

518
00:31:06.720 --> 00:31:10.410
for our client base as
well. But instead of being

519
00:31:10.410 --> 00:31:14.040
end-users it's other developers, you
know, cause how do you,

520
00:31:14.370 --> 00:31:19.890
how do you admit that
psychological factor that people use

521
00:31:19.920 --> 00:31:22.830
your product and just like,
I love it. You know,

522
00:31:22.830 --> 00:31:27.630
how do you determine the
aesthetics of what good is

523
00:31:28.740 --> 00:31:33.060
fun is in the context
of code. And it's really

524
00:31:33.060 --> 00:31:36.270
hard to do other than
observing people and giving things

525
00:31:36.270 --> 00:31:40.230
a try, you know, we're
but not being too radical,

526
00:31:40.620 --> 00:31:45.240
you know, you don't want
to start making API APIs.

527
00:31:45.240 --> 00:31:47.550
We're only like two people
in the world could ever

528
00:31:47.550 --> 00:31:50.850
consume it and they think
it's fun purely because they're

529
00:31:50.850 --> 00:31:54.270
megalomaniacs, you know, you want
it to be fun for

530
00:31:54.300 --> 00:31:57.690
forever or at least for,
for most people. So, so

531
00:31:57.690 --> 00:32:04.140
yeah, API design, definitely an
amazing, an interesting space, both

532
00:32:04.140 --> 00:32:08.040
from the kind of web
API at the internet web

533
00:32:08.040 --> 00:32:13.800
scale. And then also within
libraries too, just cause trying

534
00:32:13.800 --> 00:32:18.960
to make assumptions about how
people work that you can

535
00:32:18.960 --> 00:32:23.700
only assume is how they
work. And so it's kind

536
00:32:23.700 --> 00:32:28.440
of satisfying as an API
designer to be proven that

537
00:32:28.710 --> 00:32:31.740
it's right. You know, I
was watching this Ted session

538
00:32:32.550 --> 00:32:34.830
and this is a total
tangent, but I love Ted

539
00:32:34.830 --> 00:32:37.950
sessions and I'm sure you
do too Scott, but, but

540
00:32:37.950 --> 00:32:41.870
there was a woman was
talking about spoken poetry and

541
00:32:41.870 --> 00:32:45.890
how, you know, it's scary
to get into, but when

542
00:32:45.890 --> 00:32:49.850
you get out on stage
and you speak the truth

543
00:32:49.910 --> 00:32:54.020
and you speak yourself and
somebody in the audience clicks

544
00:32:54.020 --> 00:32:56.810
with you because they feel
exactly the same way, it

545
00:32:56.810 --> 00:32:59.810
makes it so worth it.
And it doesn't make it

546
00:32:59.810 --> 00:33:04.310
scary anymore. And it's kind
of a weird analogy, but

547
00:33:04.310 --> 00:33:07.550
I totally feel like, you
know, putting yourself out there

548
00:33:07.730 --> 00:33:10.790
and creating an open source
project is very much the

549
00:33:10.790 --> 00:33:13.610
same way where it can
be very scary. And you're,

550
00:33:13.820 --> 00:33:16.280
you're not sure if the
decisions you're making as far

551
00:33:16.280 --> 00:33:19.730
as the API design is,
is the best one possible,

552
00:33:20.480 --> 00:33:23.510
but you take a chance
and there's gonna be people

553
00:33:23.510 --> 00:33:27.200
that click with that. And
that's a pretty cool, pretty

554
00:33:27.200 --> 00:33:29.390
cool experience to see somebody
come back and be like,

555
00:33:29.420 --> 00:33:32.330
Oh man, this works so
great. I spun up something

556
00:33:32.330 --> 00:33:35.390
within two hours and went
home, feeling like a hero,

557
00:33:36.410 --> 00:33:41.390
you know, versus, you know,
creating software that is only

558
00:33:41.390 --> 00:33:45.740
meant for the largest enterprise
and takes seven Oracle engineers

559
00:33:45.740 --> 00:33:48.920
and nine months to get
working, you know? Sure. That

560
00:33:48.920 --> 00:33:51.860
could be successful, but nobody,
nobody wants to do that.

561
00:33:52.970 --> 00:33:56.360
So, so yeah, it's interesting.
And you know, for any

562
00:33:56.360 --> 00:34:00.650
folks that are hesitant or,
you know, not, not kind

563
00:34:00.650 --> 00:34:03.710
of getting on board with
trying to put themselves out

564
00:34:03.710 --> 00:34:07.280
there and do open source
software and share their ideas,

565
00:34:07.670 --> 00:34:09.500
you know, I would always
encourage people to do it

566
00:34:09.530 --> 00:34:12.440
just because it is, it
gives you a level of

567
00:34:12.440 --> 00:34:18.460
satisfaction that you can't otherwise
get. Yeah, definitely. Definitely. I

568
00:34:18.460 --> 00:34:21.940
like the idea that we
spent so much time having,

569
00:34:23.310 --> 00:34:25.960
you know, design committee meetings
and bringing people in and

570
00:34:25.960 --> 00:34:28.090
asking them how this color
makes them feel or that

571
00:34:28.090 --> 00:34:31.780
pixel makes them feel it's
okay to have the same

572
00:34:31.780 --> 00:34:35.710
kind of an experience with
an API. And, and, and

573
00:34:35.710 --> 00:34:39.190
to say, you know, I
don't know why this feels

574
00:34:39.190 --> 00:34:41.080
better. I don't know why
this is a better API,

575
00:34:41.080 --> 00:34:43.810
but I know it when
I see it. And this

576
00:34:43.810 --> 00:34:46.510
API makes me happier over
that API and I will

577
00:34:46.510 --> 00:34:48.610
have more fun writing my
code this way, then that

578
00:34:48.610 --> 00:34:52.510
code. So I really like
the idea of having not

579
00:34:52.510 --> 00:34:56.470
just design reviews for frameworks
and saying, does this, is

580
00:34:56.470 --> 00:34:59.320
this correct? Or does this
follow our rules, but will

581
00:34:59.320 --> 00:35:03.070
people have more fun doing
it? I definitely appreciate that.

582
00:35:03.370 --> 00:35:06.040
Thanks for chatting with me
today, Jonathan. I appreciate it.

583
00:35:06.730 --> 00:35:10.300
Yeah, they blocked up, this
has been another episode of

584
00:35:10.300 --> 00:35:13.000
Hansel minutes and I'll give
you links to Jonathan's blog

585
00:35:13.000 --> 00:35:15.550
and you can follow him
at last in tangent on

586
00:35:15.880 --> 00:35:17.800
Twitter. See you next week.

