WEBVTT FILE

1
00:00:00.270 --> 00:00:07.980
Successful software starts@reagan.com. Raygun APM
provides.net application performance monitoring. Unlike

2
00:00:08.010 --> 00:00:11.520
anything you've experienced before, offering
greater clarity around how your

3
00:00:11.520 --> 00:00:14.040
software is performing for your
customers more than any other

4
00:00:14.040 --> 00:00:18.780
APM provider, easily detect and
diagnose issues impacting end users

5
00:00:19.050 --> 00:00:21.870
and monitor every part of
your stack. In one powerful

6
00:00:21.870 --> 00:00:25.980
solution, you can monitor unlimited
hosts, enjoy Richard trace data

7
00:00:25.980 --> 00:00:29.040
and call stack information and
unblock those hard to solve

8
00:00:29.040 --> 00:00:32.580
performance bottlenecks that affect your
web and mobile apps. It's

9
00:00:32.580 --> 00:00:34.950
time to get back to
building great software instead of

10
00:00:34.950 --> 00:00:38.100
fighting it. Start your journey
to better software quality and

11
00:00:38.100 --> 00:00:43.620
try Reagan free@raygun.com. That's our
a Y G U n.com

12
00:00:43.680 --> 00:00:59.960
today. <inaudible> This is Scott
Hanselman. This is another episode

13
00:00:59.960 --> 00:01:02.870
of Hansel minutes. Today. I'm
talking with Jeremy Coon. He

14
00:01:02.870 --> 00:01:06.230
has written a programmer's introduction
to mathematics, which is all

15
00:01:06.230 --> 00:01:09.230
over my timeline on Twitter.
He currently works at Google

16
00:01:09.230 --> 00:01:11.780
and he's a PhD in
mathematics. How are you doctor?

17
00:01:12.170 --> 00:01:15.320
Hi Scott. I'm doing good.
That's pretty exciting. You know,

18
00:01:15.320 --> 00:01:17.180
it's the holiday season right
now that we're, we're, we're

19
00:01:17.180 --> 00:01:19.310
recording this and I'm just
wondering if you're a PhD

20
00:01:19.310 --> 00:01:22.040
in mathematics. What's that like
when you go to like

21
00:01:22.340 --> 00:01:24.560
Christmas, is that just awkward?
Are you in a room

22
00:01:24.560 --> 00:01:27.980
full of other PhDs in
mathematics? Well, my wife and

23
00:01:27.980 --> 00:01:30.710
I actually met in math
class, so we sort of

24
00:01:30.710 --> 00:01:33.260
keep it in the family
and her parents are both

25
00:01:33.320 --> 00:01:37.190
math and science teachers, so
we get some discussion, but

26
00:01:37.190 --> 00:01:39.200
I think they also kind
of get sick and tired

27
00:01:39.200 --> 00:01:41.510
of math. And so during
the holidays we do like

28
00:01:41.540 --> 00:01:44.210
woodworking and dig holes in
the yard and plant trees

29
00:01:44.210 --> 00:01:47.060
and stuff. Very cool. It's
important to have balance. That's

30
00:01:47.060 --> 00:01:49.770
great. Well, everyone is talking
about this book because it

31
00:01:49.770 --> 00:01:52.820
has a very clear audience.
You're basically saying that, you

32
00:01:52.820 --> 00:01:55.160
know, for the last, almost
half decade, you've been working

33
00:01:55.160 --> 00:01:58.250
on a book for programmers
who may have found math

34
00:01:58.250 --> 00:02:00.440
to be a barrier. So
like, that's your audience, people

35
00:02:00.440 --> 00:02:04.880
who are listening to this
show. Yeah. So four years

36
00:02:04.880 --> 00:02:09.800
though, like four years. Yeah.
Well, so it was kind

37
00:02:09.800 --> 00:02:12.770
of interesting because I, I
started the book as a

38
00:02:12.770 --> 00:02:16.460
graduate student kind of just
thinking like, Oh, I've been

39
00:02:16.460 --> 00:02:18.380
writing this blog and people
are reading it. Maybe you

40
00:02:18.380 --> 00:02:21.260
could start a book. And
I had some ideas for

41
00:02:21.260 --> 00:02:23.630
sort of the beginning of
the book and the beginning

42
00:02:23.660 --> 00:02:25.850
came very easy and I
wrote it in a couple

43
00:02:25.850 --> 00:02:29.240
of months, maybe the first
hundred days, 150 pages. And

44
00:02:29.240 --> 00:02:32.000
then I, you know, had
to finish a thesis. I

45
00:02:32.030 --> 00:02:35.570
moved across the country. I
changed jobs. I got married

46
00:02:35.570 --> 00:02:38.450
and all these things sort
of happened, right. When I

47
00:02:38.450 --> 00:02:40.160
was getting to sort of
the more difficult parts of

48
00:02:40.160 --> 00:02:42.800
the book when, when I
had to sort of like

49
00:02:43.010 --> 00:02:45.740
edit myself more. So, so
that was part of why

50
00:02:45.740 --> 00:02:48.200
it took so long. How
do you scope something like

51
00:02:48.200 --> 00:02:49.910
that? I'm looking at your
me have a great medium

52
00:02:49.910 --> 00:02:51.620
post and I'm going to
include links to all the

53
00:02:51.620 --> 00:02:54.230
show notes and everything that
we mentioned. So there's a

54
00:02:54.230 --> 00:02:56.150
great medium post on what
it's like to publish this

55
00:02:56.210 --> 00:02:58.940
book, self publishing, a great
book. You pretty much said

56
00:02:58.940 --> 00:03:00.790
that the first a hundred
pages kind of just fell

57
00:03:00.790 --> 00:03:03.550
out of you, but then
you're not trying to write

58
00:03:03.580 --> 00:03:06.460
the grand book of all
things math. Right. This could

59
00:03:06.460 --> 00:03:08.700
be a thousand page book,
Right? Yeah. And it was,

60
00:03:08.700 --> 00:03:11.280
it was getting pretty long
even at the beginning. I

61
00:03:11.280 --> 00:03:17.100
think so some topics I
think are sort of in

62
00:03:17.100 --> 00:03:19.650
the book, I wanted to
focus on the topics that

63
00:03:20.430 --> 00:03:23.610
if you sort of internalize
those and get to a

64
00:03:23.610 --> 00:03:27.030
sort of higher meta level
of understanding for that topic,

65
00:03:27.300 --> 00:03:32.130
then learning the adjacent topics
becomes much easier. One example

66
00:03:32.130 --> 00:03:37.290
is probability theory. So probability
theory and statistics are sort

67
00:03:37.290 --> 00:03:40.770
of couched in all of
this interesting language, but if

68
00:03:40.770 --> 00:03:44.370
you have a strong understanding
of sets and arguments about

69
00:03:44.370 --> 00:03:48.060
counting and sort of the
basis that I laid out

70
00:03:48.060 --> 00:03:50.430
in the chapter on sets,
I think it becomes suddenly

71
00:03:50.430 --> 00:03:54.750
much easier to learn probability
theory. Yeah. You've mentioned in

72
00:03:54.750 --> 00:03:57.360
your medium post that you,
you want the reader to

73
00:03:57.360 --> 00:04:00.570
internalize certain things and bring
that you really make them

74
00:04:00.570 --> 00:04:02.250
a fundamental part of who
they are so that they

75
00:04:02.250 --> 00:04:05.310
might find it easier later
on to, to understand the

76
00:04:05.310 --> 00:04:08.160
concept. Right. And, and I
think that the, sort of

77
00:04:08.160 --> 00:04:10.650
the, the, most of the
things that people learn in

78
00:04:10.650 --> 00:04:15.000
school are oriented around computation.
So when you learn calculus,

79
00:04:15.000 --> 00:04:18.900
you compute derivatives of various
things and you compute confusing

80
00:04:18.930 --> 00:04:22.320
integrals, but you don't necessarily
spend a lot of time

81
00:04:22.320 --> 00:04:25.830
on the foundation understanding, first
of all, why are we

82
00:04:25.860 --> 00:04:29.880
following these rules to compute
this thing? And what can

83
00:04:29.880 --> 00:04:33.870
we do when we compute
these things necessarily somehow you

84
00:04:33.960 --> 00:04:36.600
graduate with a computer science
degree and, you know, calculus,

85
00:04:36.600 --> 00:04:38.100
but then you don't know
what you can use it

86
00:04:38.100 --> 00:04:40.140
for. And you don't exactly
know why it made sense

87
00:04:40.140 --> 00:04:42.000
in the first place. So
part of the goal of

88
00:04:42.000 --> 00:04:44.370
this book, at least for
the topics that covers is

89
00:04:44.370 --> 00:04:47.520
to give you maybe a
one or two sentence understanding

90
00:04:47.520 --> 00:04:50.460
of like, okay, here is
exactly what the derivative is

91
00:04:50.460 --> 00:04:53.730
for why it's useful. And,
and I can fit that

92
00:04:53.730 --> 00:04:56.190
all in one little nugget
in my head. And then

93
00:04:56.190 --> 00:04:59.370
there's the part where you
say, we're going to translate

94
00:04:59.370 --> 00:05:04.140
that conceptual understanding into a
representation that is useful and

95
00:05:04.500 --> 00:05:08.550
accessible for computers. And so,
so we sort of had

96
00:05:08.550 --> 00:05:12.120
the representation that's accessible for
computers, but not necessarily the

97
00:05:12.120 --> 00:05:15.900
high level understanding and not
necessarily the conversion from the

98
00:05:15.900 --> 00:05:19.860
high level, understanding to the
computational representation and back again.

99
00:05:20.880 --> 00:05:22.860
And that's what shows up
everywhere in math. So, so

100
00:05:22.860 --> 00:05:25.560
that shows up with linear
algebra that shows up with

101
00:05:25.680 --> 00:05:29.490
calculus that shows up with
statistics. And so I'm sort

102
00:05:29.490 --> 00:05:32.850
of doing a deep dive
on some specific topics to

103
00:05:32.850 --> 00:05:35.220
show this pattern. And then
when you go out and

104
00:05:35.220 --> 00:05:37.890
you read some other thing
about probability or statistics, then

105
00:05:37.890 --> 00:05:40.920
you'll be able to see
that pattern happening and help.

106
00:05:40.950 --> 00:05:43.770
It will help you guide
your understanding. Okay. How has

107
00:05:43.770 --> 00:05:46.140
it, how much do you
assume that the programmer is

108
00:05:46.140 --> 00:05:48.060
a programmer? Is this, you
know, it is called a

109
00:05:48.060 --> 00:05:51.720
programmer's introduction to mathematics, not
an introduction to mathematics. This

110
00:05:51.720 --> 00:05:54.990
is not math one Oh
one it's through the lens

111
00:05:55.470 --> 00:05:58.040
of, I am a programmer.
Is this that, you know,

112
00:05:58.040 --> 00:05:59.720
a code newbie or someone
who's only a couple of

113
00:05:59.720 --> 00:06:02.060
years into their career can
do? Or how, how senior

114
00:06:02.060 --> 00:06:05.710
must I be? I use
a lot of analogies in

115
00:06:05.710 --> 00:06:08.860
the book. And so like,
if you have no idea

116
00:06:08.860 --> 00:06:11.560
how a compiler works, the
analogies that I make about

117
00:06:11.560 --> 00:06:15.610
compilers might fall flat, but
I don't think aside from

118
00:06:15.610 --> 00:06:18.910
being able to read the
programs that are the sort

119
00:06:18.910 --> 00:06:21.550
of driving applications at the
end of each chapter, aside

120
00:06:21.550 --> 00:06:23.830
from being able to read
and use those to help

121
00:06:23.830 --> 00:06:26.590
you understand the math, you
don't necessarily need to be

122
00:06:26.590 --> 00:06:29.800
some senior developer at some
company that, you know, some

123
00:06:29.800 --> 00:06:32.920
big company to be able
to, to learn the math.

124
00:06:33.520 --> 00:06:36.010
That's great. I, one of
the analogies that really worked

125
00:06:36.010 --> 00:06:39.370
for me, I was thinking
in chapter two, where you

126
00:06:39.370 --> 00:06:42.340
start talking about polynomials and
you know, you go into

127
00:06:42.340 --> 00:06:44.530
polynomials and you, and I,
I'm thinking you're going to

128
00:06:44.530 --> 00:06:46.870
start using all kinds of
Greek lettering and things I

129
00:06:46.870 --> 00:06:50.140
don't understand. And then suddenly
public static void main shows

130
00:06:50.140 --> 00:06:53.260
up and I'm like, ah,
I know that. And look,

131
00:06:53.260 --> 00:06:56.260
any syntax highlighted it, it's
all attractive and wonderful. And

132
00:06:56.260 --> 00:06:59.620
you make a really great
point where how many months

133
00:06:59.740 --> 00:07:03.040
did we as junior and
beginner programmers type public static,

134
00:07:03.070 --> 00:07:06.070
void main without really understanding
what each of those individual

135
00:07:06.070 --> 00:07:09.580
things means. And as I
teach my 13 year old

136
00:07:09.880 --> 00:07:14.290
polynomials, I'm realizing I'm taking
a lot for granted as

137
00:07:14.290 --> 00:07:17.830
well. Yeah, I think, I
think there's a, actually, when

138
00:07:17.830 --> 00:07:20.650
I first wrote that chapter,
I, I didn't have that

139
00:07:20.650 --> 00:07:24.370
in it. And I had
the definition of the polynomial

140
00:07:24.370 --> 00:07:26.230
where it has the formula
with the symbols in it.

141
00:07:26.560 --> 00:07:28.990
And I showed it to
someone who didn't really know

142
00:07:28.990 --> 00:07:31.480
any math at all. And
they looked at that one

143
00:07:31.480 --> 00:07:33.070
page and then they just
closed the book. I said,

144
00:07:33.070 --> 00:07:35.800
no, I, I, I can't
read this. And so I,

145
00:07:36.690 --> 00:07:39.460
I had to put some
work into that into cause

146
00:07:39.460 --> 00:07:41.770
you know, people will look
at a math formula on

147
00:07:41.770 --> 00:07:43.660
a piece of paper and
their eyes will just glaze

148
00:07:43.660 --> 00:07:46.510
over. And that happens to
me too, even as sort

149
00:07:46.510 --> 00:07:49.450
of an advanced user of
mathematics, I'll look at something

150
00:07:49.450 --> 00:07:51.880
I'm not familiar with. And,
and it will take me

151
00:07:51.880 --> 00:07:53.920
a few seconds of going
back over it to really

152
00:07:53.920 --> 00:07:56.770
understand and penetrate the different
pieces and say, okay, what's

153
00:07:56.770 --> 00:07:59.170
this piece doing? What's this
piece doing? And I think

154
00:07:59.170 --> 00:08:02.830
programmers had that experience when
they're learning their first programming

155
00:08:02.830 --> 00:08:06.100
language. And maybe once you've
been working in the industry

156
00:08:06.100 --> 00:08:08.770
for a few years, you
sort of forget those struggles

157
00:08:08.770 --> 00:08:12.880
you went through and, and
at least recalling those struggles

158
00:08:12.880 --> 00:08:17.170
might make you a more
sensitive or more, more amenable

159
00:08:17.170 --> 00:08:19.840
to the same struggles that
you have when you're learning

160
00:08:19.840 --> 00:08:22.870
math. Cause it can be
frustrating. Yeah. And, and I,

161
00:08:22.870 --> 00:08:25.300
and I, you, you call
it the very, very beginning.

162
00:08:25.300 --> 00:08:27.940
The whole, the whole intro
to the book is you

163
00:08:28.090 --> 00:08:32.650
remind us that that mathematics
has a culture. And just

164
00:08:32.650 --> 00:08:35.020
as we enter the programming
culture and you find yourself

165
00:08:35.020 --> 00:08:36.790
in a room that you're
not really comfortable and you're

166
00:08:36.790 --> 00:08:38.590
like, this is awkward. These
people are using words. I

167
00:08:38.590 --> 00:08:41.590
don't understand the same as
to be expected when starting

168
00:08:41.590 --> 00:08:47.200
or restarting one's intro into
mathematics. Yeah. And, and even

169
00:08:47.200 --> 00:08:49.390
beyond just the words that
are being used, there's a

170
00:08:49.390 --> 00:08:52.720
lot of unwritten expectations when
you're reading a math book,

171
00:08:52.900 --> 00:08:54.880
it's, it's even more difficult
when you're reading a math

172
00:08:54.880 --> 00:08:57.090
book. It's like reading someone's
source code when you don't

173
00:08:57.090 --> 00:08:59.880
have any of their design
notes or any forum to

174
00:08:59.880 --> 00:09:02.190
talk about. You just see
the code when you're reading

175
00:09:02.190 --> 00:09:05.100
a math book, there's sort
of some expectations when someone

176
00:09:05.100 --> 00:09:08.580
writes down a definition, for
example, you're supposed to come

177
00:09:08.580 --> 00:09:11.580
up with a specific example,
like a unit test that

178
00:09:11.580 --> 00:09:14.070
you are going to use
to guide the rest of

179
00:09:14.070 --> 00:09:16.560
your understanding as you read.
So when I'm reading a

180
00:09:16.560 --> 00:09:19.290
math book, I'll see some
definition, my eyes will glaze

181
00:09:19.290 --> 00:09:21.810
over. Okay, I'll get over
that. And then I'll write

182
00:09:21.810 --> 00:09:25.170
down some simple, like very
like literally like unit testing,

183
00:09:25.170 --> 00:09:27.330
write down the most simple
example you can think of

184
00:09:27.600 --> 00:09:30.510
and then write down slightly
more complicated examples until you

185
00:09:30.510 --> 00:09:34.980
understand what the heart of
this definition is. And then

186
00:09:34.980 --> 00:09:38.520
later when you're reading some
fact that they're proving about

187
00:09:38.700 --> 00:09:42.450
this definition, you can then
use those examples as test

188
00:09:42.450 --> 00:09:46.530
cases against the arguments that
are on the paper. And

189
00:09:46.530 --> 00:09:48.210
this is something that I
don't think I've ever seen

190
00:09:48.210 --> 00:09:50.070
this explained in a math
book that this is how

191
00:09:50.070 --> 00:09:53.220
you're supposed to read math,
but, but that's just what

192
00:09:53.220 --> 00:09:55.650
everyone does. And if you
aren't, if you don't have

193
00:09:55.650 --> 00:09:58.320
like a teacher, that's telling
you, this is how you're

194
00:09:58.320 --> 00:10:00.660
supposed to do it, then
you're just not gonna know.

195
00:10:00.660 --> 00:10:04.640
And you're going to be
confused. Does, do you really,

196
00:10:05.100 --> 00:10:07.760
you said your eyes glaze
over, but again, there's also

197
00:10:07.760 --> 00:10:11.300
the, the intimidation factor of
like, I've got a PhD

198
00:10:11.300 --> 00:10:14.300
in mathematics and I, you
know, barely got a C

199
00:10:14.300 --> 00:10:16.730
in calculus. I'm looking at
it, one of the formulas

200
00:10:16.730 --> 00:10:19.830
somewhere, I don't know, 30,
40 pages in what you

201
00:10:19.830 --> 00:10:22.730
start introducing some and product.
And we start getting into

202
00:10:22.730 --> 00:10:26.200
like symbols and Sigma and
PI and you know, the,

203
00:10:26.200 --> 00:10:30.620
the, the density and the
intensity of a math of

204
00:10:30.620 --> 00:10:32.720
a math formula. Does your
eyes really glaze over? Do

205
00:10:32.720 --> 00:10:34.370
you have to parse it
and disassemble it? Or do

206
00:10:34.370 --> 00:10:37.190
you read that with fluency?
Like you read it Well,

207
00:10:37.190 --> 00:10:39.410
it's for the products and
sums. I think I read

208
00:10:39.410 --> 00:10:43.040
that pretty fluently, but they're,
you know, the, the higher

209
00:10:43.040 --> 00:10:47.060
up in math you get,
the more abstraction layers are,

210
00:10:47.060 --> 00:10:49.940
are sort of painted on
top of this. So for

211
00:10:49.940 --> 00:10:53.570
example, sums and products are
sort of, you can understand

212
00:10:53.570 --> 00:10:56.600
those in terms of arithmetic.
And then in sort of

213
00:10:56.630 --> 00:11:00.290
later stages of math, probably
beyond what most programmers would

214
00:11:00.290 --> 00:11:04.130
have a need to learn
about. You see that product

215
00:11:04.130 --> 00:11:07.250
starts to mean something different.
And so then when you

216
00:11:07.250 --> 00:11:09.140
see the product symbol, you
have to sort of remember,

217
00:11:09.140 --> 00:11:12.860
okay, what context is this
product happening in? Is it

218
00:11:12.860 --> 00:11:15.920
happening in this context or
this other context? And then

219
00:11:15.920 --> 00:11:18.440
they will start to do
like, okay, there's one. I

220
00:11:18.440 --> 00:11:20.210
don't know if you know,
the product symbol looks like

221
00:11:20.210 --> 00:11:23.390
a big, like a big
gate, like a pie symbol,

222
00:11:23.720 --> 00:11:26.900
accountable pie. There's a different
symbol called the co-product, where

223
00:11:26.900 --> 00:11:31.370
they turn that symbol upside
down. And so like, they

224
00:11:31.370 --> 00:11:35.180
just keep having new ideas
and, and they keep adding

225
00:11:35.180 --> 00:11:38.120
new words to explain these
new ideas, because there just

226
00:11:38.510 --> 00:11:40.970
aren't any words that exist
to explain them. And so

227
00:11:41.300 --> 00:11:44.360
you can keep getting more
and more complicated stuff. And

228
00:11:44.390 --> 00:11:47.780
for me, it's like, it's
like, I never stopped learning

229
00:11:47.780 --> 00:11:50.870
math, right? Like if I'm
learning polynomials for the first

230
00:11:50.870 --> 00:11:53.170
time, my eyes are glazing
over the same way. As

231
00:11:53.170 --> 00:11:56.440
if I'm reading some paper
about category theory, where they're

232
00:11:56.440 --> 00:11:58.740
introducing some new idea for
the first time. That's a

233
00:11:58.740 --> 00:12:00.630
great point. That's a great
point. I've been a, I've

234
00:12:00.660 --> 00:12:03.720
programmed in Java program in
Pascal programming in C sharp,

235
00:12:03.960 --> 00:12:05.910
but I'm trying to read
Swift and I'm trying to

236
00:12:05.910 --> 00:12:08.970
read a objective C and
I'm looking at these symbols

237
00:12:08.970 --> 00:12:12.180
and I'm like, what does
that do? Is that, are

238
00:12:12.180 --> 00:12:15.180
we redefining this thing? And
even worse when you reuse

239
00:12:15.180 --> 00:12:17.520
keywords? That mean one thing
in one language and not

240
00:12:17.520 --> 00:12:20.640
in another. Yeah. And then
like languages like Pearl, where

241
00:12:20.640 --> 00:12:23.580
the operators are sometimes implicit,
this is a lot like

242
00:12:23.580 --> 00:12:26.250
math, or there are things
happening behind the scenes that

243
00:12:26.250 --> 00:12:29.340
are contextual. And once you
become super comfortable with the

244
00:12:29.340 --> 00:12:32.490
context, then it really makes
sense why they explain the

245
00:12:32.490 --> 00:12:34.410
math that way. It, you
know, it's much quicker to

246
00:12:34.410 --> 00:12:36.900
write down. It's quicker to
understand it's quicker to get

247
00:12:36.900 --> 00:12:38.760
to the heart of the
thing that you want to

248
00:12:38.760 --> 00:12:41.610
analyze, but then if you're
coming at it from a

249
00:12:41.610 --> 00:12:43.950
new perspective and you don't
have any of that context,

250
00:12:44.130 --> 00:12:47.580
you're just kind of hopelessly
lost. Yeah. One of the

251
00:12:47.580 --> 00:12:49.440
things that made me realize
that this was definitely a

252
00:12:49.440 --> 00:12:51.630
book that I was going
to enjoy was somewhere around

253
00:12:51.630 --> 00:12:54.840
2030 pages. In the first
time you went side by

254
00:12:54.840 --> 00:12:56.910
side, you kind of split
screen and you said, all

255
00:12:56.910 --> 00:13:00.810
right, here's the, here's the
math, here's the, here's the

256
00:13:01.000 --> 00:13:04.680
equivalent program. And I just,
I bet I think I

257
00:13:04.680 --> 00:13:07.410
stared at that probably for
30 minutes, just making absolutely

258
00:13:07.410 --> 00:13:10.410
sure that I understand. And
it also showcases, like I

259
00:13:10.410 --> 00:13:13.830
mentioned before, the density of
math and perhaps some of

260
00:13:13.830 --> 00:13:17.610
the, the verbosity of, of,
of, of programs that are

261
00:13:17.610 --> 00:13:21.600
at least, you know, programs
that aren't functional program. Yeah.

262
00:13:21.600 --> 00:13:25.890
It's actually, it's interesting because
when I was an undergraduate

263
00:13:26.220 --> 00:13:28.290
before I had ever discovered
math, by the way, I

264
00:13:28.290 --> 00:13:31.020
didn't, I didn't discover math
as a passion until I

265
00:13:31.020 --> 00:13:33.330
was halfway through my undergraduate.
And I had already been

266
00:13:33.330 --> 00:13:36.120
doing a bunch of computer
science, but I was in

267
00:13:36.120 --> 00:13:37.860
a course and I was
sort of talking with the

268
00:13:37.860 --> 00:13:39.960
professor and I had this
idea in my head that

269
00:13:39.960 --> 00:13:44.790
math was like the most,
most rigorous possible way to

270
00:13:44.790 --> 00:13:48.210
express logic ever, right? Like
it's math and it's theorems.

271
00:13:48.210 --> 00:13:51.210
And that's it. And my
professor who kind of knew

272
00:13:51.210 --> 00:13:53.670
better than me, he said,
are you kidding? Programming is

273
00:13:53.670 --> 00:13:57.030
way more precise than way
more logical than math. Math

274
00:13:57.030 --> 00:14:00.030
is sloppy. And I was
like taken aback by that.

275
00:14:00.030 --> 00:14:02.280
And it wasn't until years
later when I'd been studying

276
00:14:02.280 --> 00:14:04.140
math for a long time
and could compare the two

277
00:14:04.140 --> 00:14:05.940
that I was like, yeah,
he's right. Math is more

278
00:14:05.940 --> 00:14:10.380
like an English language. I
mean, it's closer to English

279
00:14:10.380 --> 00:14:13.800
language than programming is to
English language because you can

280
00:14:13.800 --> 00:14:15.360
just be a lot more
flexible with the way you

281
00:14:15.360 --> 00:14:17.850
express ideas and math. And
that's a double edged sword.

282
00:14:18.440 --> 00:14:23.040
Interesting. Interesting. I'm curious. Would
you consciously not pick a

283
00:14:23.040 --> 00:14:25.920
functional language? You did this
in Java, not in Scala,

284
00:14:25.920 --> 00:14:28.230
for example, because it would
look too much like math,

285
00:14:28.650 --> 00:14:30.450
Sorry. The, the book, most
of the code in the

286
00:14:30.450 --> 00:14:33.300
book is in Python. Pardon
me? Just because I think

287
00:14:33.300 --> 00:14:36.840
that it's easiest to read
that pseudo code, even if

288
00:14:36.840 --> 00:14:38.460
you don't, even if you
don't write Python, I think

289
00:14:38.460 --> 00:14:40.920
it's easier. Yeah. I'm looking
at code, that's got curly

290
00:14:40.920 --> 00:14:43.020
braces. I didn't get into
the depths of the thing.

291
00:14:43.920 --> 00:14:46.590
Yeah. The, I, from time
to time, I'll slip in

292
00:14:46.590 --> 00:14:50.100
an example from like Java
or C or Haskell, just

293
00:14:50.100 --> 00:14:52.940
to make an analogy. But
all of the actual code

294
00:14:52.940 --> 00:14:55.610
is written in Python. There's
one demo that I wrote

295
00:14:55.610 --> 00:14:59.270
in Java script, but just
cause it needed <inaudible> okay.

296
00:14:59.540 --> 00:15:02.240
So I'm curious though, why
you pick, you know, like

297
00:15:02.240 --> 00:15:07.010
an imperative programming as opposed
to a functional, I think

298
00:15:07.010 --> 00:15:09.590
just because of the audience,
I think more people are

299
00:15:09.590 --> 00:15:12.890
familiar with Python than they
are with Haskell or racket

300
00:15:12.920 --> 00:15:16.010
or scheme. Personally, I spend
a lot more time writing

301
00:15:16.010 --> 00:15:17.810
in Python, so that was
easier for me as well.

302
00:15:18.380 --> 00:15:20.240
Okay. So it was more
about the language choice and

303
00:15:20.240 --> 00:15:23.780
not about like the fan,
the language family, right? Exactly.

304
00:15:24.160 --> 00:15:29.110
Okay. Hey folks, you're a
very good developer, probably regardless.

305
00:15:29.110 --> 00:15:32.050
You do write bugs. That's
unavoidable. What is affordable is

306
00:15:32.050 --> 00:15:34.600
wasting time trying to track
down the cause of those

307
00:15:34.600 --> 00:15:39.070
bugs century.io provides full stack
error tracking that lets you

308
00:15:39.070 --> 00:15:42.160
monitor and fix problems. In
real time, you can see

309
00:15:42.160 --> 00:15:44.950
the severity and the scope
of the error get immediate

310
00:15:44.950 --> 00:15:47.710
access to the stack, trace,
connect the problem to the

311
00:15:47.710 --> 00:15:51.190
commit that caused it and
fix it without delay century.

312
00:15:51.520 --> 00:15:53.410
It's a name so common
that they have to include

313
00:15:53.410 --> 00:15:55.480
the top level domain in
their advertising to make sure

314
00:15:55.480 --> 00:16:01.030
you remember it. century.io, that
century dot I O open

315
00:16:01.030 --> 00:16:05.200
source, full stack web apps,
native apps, mobile games, smart

316
00:16:05.230 --> 00:16:07.690
oven mitts. If you can
program it, they can make

317
00:16:07.690 --> 00:16:10.540
it far easier to fix
any errors you encounter with

318
00:16:10.540 --> 00:16:13.660
it. Your code may be
broken, let's fix it together,

319
00:16:13.690 --> 00:16:19.270
visit century.io. So what is
it That you think is

320
00:16:19.270 --> 00:16:22.000
fundamentally causing mass to be
hard? Is it that we

321
00:16:22.000 --> 00:16:25.420
bought we all as a
collective community bump up against

322
00:16:25.750 --> 00:16:27.730
calculus? Is that the hump
that we all need to

323
00:16:27.730 --> 00:16:29.380
get over and then math
will be not so hard?

324
00:16:30.340 --> 00:16:33.670
I definitely don't think so.
I think I didn't really

325
00:16:33.670 --> 00:16:36.460
get calculus the first time
around either, even though I

326
00:16:36.490 --> 00:16:39.790
pass my classes. I think
part of it, there's a

327
00:16:39.790 --> 00:16:43.150
lot of sort of intermingling
causes. I think part of

328
00:16:43.150 --> 00:16:47.110
it is expectations. We spent,
even if you've been programming

329
00:16:47.110 --> 00:16:50.470
for five years in industry,
you've spent as much of

330
00:16:50.470 --> 00:16:54.250
your life doing math in
school as you have doing

331
00:16:54.250 --> 00:16:58.030
software. And so it seems
kind of unfair that you

332
00:16:58.030 --> 00:17:01.630
shouldn't have an easier time
understanding math considering how much

333
00:17:01.630 --> 00:17:05.050
time you devoted to it,
that as you do for

334
00:17:05.050 --> 00:17:08.890
software. So there's, there's sort
of that weird skew. And

335
00:17:08.890 --> 00:17:12.040
then another, another thing is
that the most of the

336
00:17:12.070 --> 00:17:16.930
interesting math for programming is
written by mathematicians for other

337
00:17:16.930 --> 00:17:21.130
mathematicians. And so the there's
a lot of, like I

338
00:17:21.130 --> 00:17:24.640
said, there's a lot of
that missing context and, and

339
00:17:24.670 --> 00:17:27.400
there's all the formulas. And,
and I think because they're

340
00:17:27.400 --> 00:17:31.390
writing from a mathematician to
another mathematician, their ex, they

341
00:17:31.390 --> 00:17:35.320
have a different expectation of
what's interesting and what needs

342
00:17:35.320 --> 00:17:38.920
to be conveyed. So for
example, this is one of

343
00:17:38.920 --> 00:17:43.000
the biggest differences between math
and programming, even though they,

344
00:17:43.030 --> 00:17:45.850
I think they share a
lot of similarities. Programming is

345
00:17:45.850 --> 00:17:48.910
primarily about what you can
do, right? You want to

346
00:17:49.110 --> 00:17:52.680
programs that automate some tasks
or achieve some goal or

347
00:17:52.680 --> 00:17:57.120
analyze some data math and,
and kind of the math

348
00:17:57.150 --> 00:18:01.830
that is not necessarily directly
about applications is more about

349
00:18:02.310 --> 00:18:05.820
why something is true. It's
more about gaining a huge,

350
00:18:05.850 --> 00:18:10.200
a better human understanding of
a mathematical topic, which is,

351
00:18:10.650 --> 00:18:12.150
I don't know, does that
need a little bit of

352
00:18:12.870 --> 00:18:15.960
breaking down what that means?
I think it would be

353
00:18:15.960 --> 00:18:19.470
helpful. So, so the, the
difference is sort of in,

354
00:18:19.500 --> 00:18:24.930
in how a human understands
what the intrinsic characteristics of

355
00:18:24.930 --> 00:18:28.530
a thing are. So for
example, okay. I don't know.

356
00:18:28.560 --> 00:18:30.240
This might be a little
bit too high level, but

357
00:18:30.240 --> 00:18:32.700
there is this thing in
calculus called the Taylor series

358
00:18:33.750 --> 00:18:36.930
and the Taylor series are
incredibly useful tool for mathematicians.

359
00:18:37.350 --> 00:18:39.600
But if you take a
calculus class, you sort of

360
00:18:39.660 --> 00:18:42.540
see it once and you're
tested on it and then

361
00:18:42.540 --> 00:18:44.520
you never really use it
again. Or maybe you might

362
00:18:44.550 --> 00:18:49.260
use it once in some
engineering class or something, but

363
00:18:49.260 --> 00:18:51.210
it turns out that I
think the Taylor series is

364
00:18:51.210 --> 00:18:56.520
one of the more applicable
parts of calculus to programming

365
00:18:56.520 --> 00:19:00.540
and algorithm design, because the,
the sort of internal nugget

366
00:19:00.570 --> 00:19:04.080
of what makes Taylor series
useful is that it provides

367
00:19:04.110 --> 00:19:09.480
the most accurate approximation of
some function by a line

368
00:19:10.630 --> 00:19:14.810
or by a polynomial of
increasingly large degree. So, So

369
00:19:15.110 --> 00:19:17.840
if I, if I may,
is this the mathematical equivalent

370
00:19:17.840 --> 00:19:22.340
of a fairly accurate guesstimate?
Yeah, exactly. And, and the

371
00:19:22.340 --> 00:19:25.490
point is that you can
make your estimate or your

372
00:19:25.490 --> 00:19:29.480
guesstimate more accurate by increasing
more terms of the Taylor

373
00:19:29.480 --> 00:19:32.660
polynomial. And so if you
were say, you know, I

374
00:19:32.660 --> 00:19:34.610
want to make some trade
off in my web app

375
00:19:34.640 --> 00:19:37.520
where I have some amount
of time that's being spent

376
00:19:37.520 --> 00:19:40.190
on computation and I can
get some estimate of how

377
00:19:40.190 --> 00:19:43.490
much benefit I will get
from spending more computation time.

378
00:19:43.790 --> 00:19:48.200
It might be really hard
to compute what that curve

379
00:19:48.290 --> 00:19:50.990
of trade off looks like,
but you might be able

380
00:19:50.990 --> 00:19:54.500
to approximate it quite easily
with a Taylor polynomial or

381
00:19:54.500 --> 00:19:56.660
the Taylor series. And so
then you can say, all

382
00:19:56.660 --> 00:19:58.970
right, I'm going to figure
out, I mean, use this

383
00:19:58.970 --> 00:20:01.940
as my approximation. And that
will be, I can use

384
00:20:01.940 --> 00:20:04.730
that to determine what I
should do, you know, how

385
00:20:04.730 --> 00:20:08.390
much time I should spend
computing this thing. Interesting. Okay.

386
00:20:08.540 --> 00:20:11.180
So that makes me feel
a little bit like I'm

387
00:20:11.180 --> 00:20:13.570
speaking for the non math
programmers are the people who

388
00:20:13.590 --> 00:20:15.980
made it this far without
using a lot of math.

389
00:20:16.190 --> 00:20:19.370
I think that a lot
of us may be making

390
00:20:19.370 --> 00:20:22.760
decisions based on intuition or
based on experience when there

391
00:20:22.760 --> 00:20:25.820
is good and good and
hard and useful math behind

392
00:20:25.820 --> 00:20:27.890
it. And if we knew
more about that, we'd be

393
00:20:27.890 --> 00:20:31.340
able to back up our
guesses and our, our assumptions

394
00:20:31.340 --> 00:20:33.730
with real math, as opposed
to just saying, well, it's

395
00:20:33.730 --> 00:20:36.830
just, this feels right. Yeah.
I think that's definitely true.

396
00:20:37.520 --> 00:20:43.610
I think, I think it,
yeah, that's definitely, I'm not

397
00:20:43.610 --> 00:20:45.290
trying to put people down,
but I think that people

398
00:20:45.290 --> 00:20:47.740
who are listening will have
always had that time where

399
00:20:48.280 --> 00:20:51.610
someone on the team understands,
understands math better than they

400
00:20:51.610 --> 00:20:55.150
do. And we'll start having
conversations about, you know, big

401
00:20:55.180 --> 00:20:57.550
O notation or whatnot, and
they'll apply real math to

402
00:20:57.550 --> 00:20:59.530
a problem and then we'll
go, wow, you're right. We,

403
00:20:59.770 --> 00:21:01.990
if I had known more
maths, I would have been

404
00:21:01.990 --> 00:21:04.920
able to, to apply that
as well. Yeah. And I

405
00:21:04.920 --> 00:21:07.830
think, I think that's a
good point. I think another

406
00:21:07.830 --> 00:21:10.710
thing that I want to
sort of instill in the

407
00:21:10.710 --> 00:21:14.130
book is that not only
does it let you sort

408
00:21:14.130 --> 00:21:16.920
of justify a piece of
intuition, but I think it

409
00:21:16.920 --> 00:21:22.020
also opens an sort of
a class of algorithms or

410
00:21:22.140 --> 00:21:27.270
solutions to problems that just
were inconceivable without math. So

411
00:21:27.270 --> 00:21:32.640
I dunno if that sounds
enticing. I did that. So,

412
00:21:32.640 --> 00:21:36.480
so one example, there's this
famous algorithm that has to

413
00:21:36.480 --> 00:21:38.730
do with secret sharing. I
don't know if you have

414
00:21:38.730 --> 00:21:41.550
heard of secret sharing before
I have, right. This is

415
00:21:41.550 --> 00:21:44.130
a, this is part of
the RSA, beginning of RSA,

416
00:21:44.130 --> 00:21:46.440
like in like 30, 40
years ago. Right? So the

417
00:21:46.440 --> 00:21:49.920
idea is that you have
some sensitive piece of information

418
00:21:50.370 --> 00:21:53.850
and you would like to
sort of distribute the information

419
00:21:54.510 --> 00:21:59.100
among some people so that
some group of them can

420
00:21:59.100 --> 00:22:01.500
come back together and reconstruct
the secret. So I liked

421
00:22:01.500 --> 00:22:06.090
the example of people fighting
over like rich person's will

422
00:22:06.090 --> 00:22:08.070
like, it's like, they're all
of their children that are

423
00:22:08.070 --> 00:22:11.310
fighting over the inheritance. And
so the person wants to

424
00:22:11.310 --> 00:22:15.540
make sure that they children
are cooperate. So they'll take

425
00:22:15.540 --> 00:22:18.420
their will the text of
their will. And then we'll

426
00:22:18.420 --> 00:22:21.390
use this secret sharing protocol
so that each of the

427
00:22:21.390 --> 00:22:25.470
children get a piece of
the secret. But unless say,

428
00:22:25.500 --> 00:22:29.160
say that there's like 10
children and at least eight

429
00:22:29.160 --> 00:22:31.770
of them have to work
together in order to even

430
00:22:31.770 --> 00:22:34.050
read the will. And they
have to come together and

431
00:22:34.050 --> 00:22:36.060
get in the room and
share their piece of the

432
00:22:36.060 --> 00:22:38.010
secret in order to read
the will. And if any

433
00:22:38.010 --> 00:22:41.100
fewer of them, you know,
seven or fewer come together,

434
00:22:41.250 --> 00:22:43.260
then they can't get any
information about what's in the

435
00:22:43.260 --> 00:22:46.890
will at all. And so
the secret sharing scheme will

436
00:22:46.890 --> 00:22:49.050
work no matter how many
children there are. And no

437
00:22:49.050 --> 00:22:51.660
matter how, no matter what
size of group you want

438
00:22:51.660 --> 00:22:54.660
to be able to reconstruct
the secret. And this seems

439
00:22:54.660 --> 00:22:58.170
kind of amazing, right? Hmm.
This is like the fundamental

440
00:22:58.170 --> 00:23:01.290
basis of whether or not
we can trust anyone. Right?

441
00:23:01.290 --> 00:23:03.780
It's, it's a, it's a,
and it's useful for a

442
00:23:03.780 --> 00:23:06.990
lot of applications. For example,
if you have a secret

443
00:23:06.990 --> 00:23:09.060
key and you would like
to store that secret key

444
00:23:09.060 --> 00:23:12.810
on a server somewhere, that's
pretty dangerous because someone might

445
00:23:12.810 --> 00:23:14.940
break into the server or
the server, you know, the

446
00:23:14.940 --> 00:23:17.400
disc might fail. And so
then you won't be able

447
00:23:17.400 --> 00:23:20.310
to get the secret. And
so you might replicate that

448
00:23:20.310 --> 00:23:23.160
secret across 10 servers, but
then any one of those

449
00:23:23.160 --> 00:23:26.580
servers is a single point
of failure for an intrusion.

450
00:23:26.850 --> 00:23:28.980
So how are you going
to replicate it in a

451
00:23:28.980 --> 00:23:33.750
way that is both resilient
to server failures and resilient

452
00:23:33.750 --> 00:23:37.320
to intrusions. And one possibility
is to use one of

453
00:23:37.320 --> 00:23:41.400
these secret sharing schemes. So
you say each, each server

454
00:23:41.400 --> 00:23:44.640
gets one share of the
secret and you can tune

455
00:23:44.640 --> 00:23:47.540
your resilience. So if half
of the servers fail, then

456
00:23:47.540 --> 00:23:49.730
you can use the other
half to reconstruct the secret.

457
00:23:49.940 --> 00:23:52.700
But if a attacker breaks
into any one server, they

458
00:23:52.970 --> 00:23:55.010
can't get any information about
what the secret key is

459
00:23:55.070 --> 00:23:57.720
because they only see one
of those little pieces. And

460
00:23:57.720 --> 00:24:01.270
this might be just a
small bit of a, a

461
00:24:01.290 --> 00:24:07.030
detour, but why has the
rise of computational power taken?

462
00:24:07.030 --> 00:24:09.790
What are things that we
would have said are mathematically

463
00:24:09.790 --> 00:24:14.530
solid, secret sharing schemes, and
then broken them route, forcing

464
00:24:14.530 --> 00:24:16.510
our way through math is
faster than we ever thought

465
00:24:16.510 --> 00:24:19.960
we could. Like you're specifically
talking about like encryption and

466
00:24:21.640 --> 00:24:24.010
All these things where like,
you know, 20, 30 years

467
00:24:24.010 --> 00:24:26.370
ago I would learn how
something worked and how, how,

468
00:24:26.470 --> 00:24:28.570
you know, the basis is
of our, of RSA. And

469
00:24:28.570 --> 00:24:31.120
then we find that we've,
we've, we've broken into this

470
00:24:31.120 --> 00:24:33.280
or broken into that because
we just were able to

471
00:24:33.610 --> 00:24:37.990
calculate primes or calculate whatever
faster than can. Right? Yeah.

472
00:24:37.990 --> 00:24:40.420
So, so part of, well,
one of the nice things

473
00:24:40.420 --> 00:24:43.390
about sort of approaching this
from a math perspective is

474
00:24:43.390 --> 00:24:46.540
that all of the cryptographic
schemes that people come up

475
00:24:46.540 --> 00:24:50.230
with have a parameter that
lets you tune the security.

476
00:24:50.560 --> 00:24:53.560
So RSA, for example, you
get to choose how many

477
00:24:53.560 --> 00:24:56.740
bits are in the primes
that you're using for your

478
00:24:56.740 --> 00:25:00.910
private key. And we sort
of, you said that people

479
00:25:00.910 --> 00:25:03.820
are getting better and better
at, at factoring numbers into

480
00:25:03.820 --> 00:25:08.170
primes. And so that will
break some RSA protocols, but

481
00:25:08.170 --> 00:25:11.620
if you just increase the
security of the protocol use,

482
00:25:11.620 --> 00:25:13.900
like by tuning that parameter,
you can make it so

483
00:25:13.900 --> 00:25:18.040
that the factoring techniques won't
work at all. So, so

484
00:25:18.040 --> 00:25:20.500
I think to some extent,
you're right where there's the

485
00:25:20.500 --> 00:25:23.830
side of solving these math
problems faster and faster, that

486
00:25:23.830 --> 00:25:28.630
makes lower levels of security
kind of useless. And then,

487
00:25:28.630 --> 00:25:31.360
and then the higher levels
of security sort of, you

488
00:25:31.360 --> 00:25:34.450
have to do efficiency, trade
offs. So RSA with sort

489
00:25:34.450 --> 00:25:37.930
of a 4,000 bit key
is kind of too inefficient

490
00:25:37.930 --> 00:25:40.420
to use for real time
encryption if you're having like

491
00:25:40.420 --> 00:25:44.170
a encrypted video stream or
something. And so that's why

492
00:25:44.170 --> 00:25:45.910
they have to sort of
come up with these other

493
00:25:45.910 --> 00:25:48.820
techniques based on elliptic curves
and all that stuff. But

494
00:25:48.820 --> 00:25:52.150
I don't, I don't actually
necessarily agree that it's brute

495
00:25:52.150 --> 00:25:54.820
force, that's breaking all of
these. To me, it seems

496
00:25:54.820 --> 00:25:59.560
like it's that they've sort
of realized that brute force

497
00:25:59.560 --> 00:26:01.390
isn't going to help so
much. And so they need

498
00:26:01.390 --> 00:26:04.180
the kind of social engineering
that gets them a bank

499
00:26:04.180 --> 00:26:07.570
of people's insecure passwords and,
you know, can do SIM

500
00:26:07.570 --> 00:26:10.150
swapping or they can call
someone on the phone and

501
00:26:10.150 --> 00:26:12.340
pretend to be a mother
with a crying child and

502
00:26:12.340 --> 00:26:14.890
get the sympathy of the
person to reset their account

503
00:26:14.890 --> 00:26:17.440
or something. Like, it seems
like social engineering is really

504
00:26:17.440 --> 00:26:22.240
the, the, the, the, the
winner in this security battle

505
00:26:23.110 --> 00:26:25.570
and, and that's sort of
a Testament to math succeeding.

506
00:26:25.620 --> 00:26:29.050
It's it's job. That's a
great point. Well, what I

507
00:26:29.050 --> 00:26:30.790
like about the way you're
describing this and what I've

508
00:26:30.790 --> 00:26:32.530
enjoyed in the chapters of
the books that I've read

509
00:26:32.830 --> 00:26:35.530
is that you're kind of
encouraging the reader from a

510
00:26:35.530 --> 00:26:38.620
programmer's perspective to start kind
of engaging with mass that

511
00:26:38.620 --> 00:26:41.710
they bump into in the
world more, more deeply, like,

512
00:26:41.770 --> 00:26:44.880
like I'm just trying to
explore, understand as I moved

513
00:26:44.880 --> 00:26:47.870
through the world of security.
Yeah. And I think that

514
00:26:47.870 --> 00:26:50.960
there's actually a lot of
really interesting applications. I think

515
00:26:50.960 --> 00:26:53.990
security is a very common
one and because it, you

516
00:26:53.990 --> 00:26:56.570
know, it's all over the
internet, all the different break-ins

517
00:26:56.570 --> 00:27:01.100
and stuff and all the
postmortems. And I think another

518
00:27:01.100 --> 00:27:04.160
one, like you mentioned earlier,
functional programming is, is very

519
00:27:04.160 --> 00:27:06.320
common on the internet. So
programmers, like to sort of

520
00:27:06.320 --> 00:27:08.420
read about that, but I
think there's a lot of

521
00:27:08.540 --> 00:27:11.540
really interesting stuff out there
that goes beyond that into

522
00:27:11.570 --> 00:27:14.270
other domains. So one example
I use in the book

523
00:27:14.300 --> 00:27:18.890
is this is, is from
economics. So there was this

524
00:27:19.160 --> 00:27:22.700
very famous and very successful
algorithm that won a Nobel

525
00:27:22.700 --> 00:27:25.220
prize a couple of years
ago in economics. So I

526
00:27:25.220 --> 00:27:28.010
don't know if you've heard
of the national residency or

527
00:27:28.010 --> 00:27:32.000
hospital residency matching program. No.
So this is the thing

528
00:27:32.000 --> 00:27:36.080
that happens basically when medical
students graduate from their med

529
00:27:36.080 --> 00:27:38.450
school, they have to do
a residency in the hospital.

530
00:27:38.870 --> 00:27:40.760
And so there's so many
hospitals and there's so many

531
00:27:40.760 --> 00:27:42.890
students and they have to
figure out a way to

532
00:27:42.890 --> 00:27:47.030
decide which student will go
to which hospital, but you

533
00:27:47.030 --> 00:27:50.360
don't really want to, you
know, leave that to its

534
00:27:50.360 --> 00:27:53.330
own devices because you'll get
all of the richest students,

535
00:27:54.050 --> 00:27:57.080
you know, bribing the best
hospitals to take them. And,

536
00:27:57.080 --> 00:27:59.420
you know, it will be
sort of bad as a

537
00:27:59.420 --> 00:28:02.750
society for the whole, because
the, the poor areas won't

538
00:28:02.750 --> 00:28:05.630
get as good students to,
to, you know, serve their

539
00:28:05.630 --> 00:28:09.080
patients. So what the sort
of the U S government

540
00:28:09.080 --> 00:28:13.220
decided to pay these researchers,
the, the guy was Alvin

541
00:28:13.220 --> 00:28:16.340
Roth, who, and Lloyd Shapley,
who won the Nobel prize.

542
00:28:17.090 --> 00:28:19.430
And they basically paid them
to figure out, can we

543
00:28:19.430 --> 00:28:24.230
design a market that does
not involve money that can

544
00:28:24.410 --> 00:28:28.310
basically figure out how to
assign hospitals to students in

545
00:28:28.310 --> 00:28:30.680
such a way that nobody's
going to cheat. Nobody is

546
00:28:30.680 --> 00:28:34.040
going to have a incentive
to go outside of the

547
00:28:34.070 --> 00:28:37.250
bounds of the system and
make a side deal. And

548
00:28:37.250 --> 00:28:39.620
so they came up with
this algorithm, it's called the

549
00:28:39.620 --> 00:28:44.240
stable marriage algorithm. And it's
actually so simple enough that

550
00:28:44.240 --> 00:28:46.610
I think it's at the
very, it's very close to

551
00:28:46.610 --> 00:28:47.930
the beginning of the book.
And I don't think you

552
00:28:47.930 --> 00:28:51.170
need a lot of math
to understand it, but it's

553
00:28:51.170 --> 00:28:54.560
super interesting. I don't want
to give away the punchline,

554
00:28:54.560 --> 00:28:57.260
so you should go read
the book, but it's, it's

555
00:28:57.260 --> 00:28:59.600
sort of an example. One
of my go to examples

556
00:28:59.660 --> 00:29:04.010
of, of math that gets
applied in super interesting scenarios,

557
00:29:04.010 --> 00:29:06.980
that's outside of the things
that programmers would typically see.

558
00:29:07.250 --> 00:29:09.470
And I think it's kind
of useful because programmers are

559
00:29:09.470 --> 00:29:15.320
designing these online marketplaces and
these online communities in which

560
00:29:15.350 --> 00:29:18.740
they literally get to hard
code how the market works.

561
00:29:19.310 --> 00:29:21.860
And I think it's kind
of useful to study markets.

562
00:29:21.860 --> 00:29:25.730
And if you're studying markets
and the, the different mechanisms

563
00:29:25.730 --> 00:29:29.600
for like coming up with
fairness and markets, then there's

564
00:29:29.600 --> 00:29:32.450
a lot of math that's
accessible and interesting for that.

565
00:29:33.170 --> 00:29:35.540
Yeah. This is really, this
is really fascinating. People can

566
00:29:35.600 --> 00:29:42.010
check this out@pimpimbook.org. This is
a programmer's introduction to mathematics.

567
00:29:42.010 --> 00:29:44.410
That's what the PIM is
for. And you've already put

568
00:29:44.410 --> 00:29:46.600
up like the first page
is you can read like

569
00:29:46.600 --> 00:29:50.410
45 pages for free and
you have self-published this, so

570
00:29:50.410 --> 00:29:52.930
you can purchase it through
Gumroad. You can purchase it

571
00:29:52.930 --> 00:29:56.110
through Amazon. And you're building
a whole community around this.

572
00:29:56.110 --> 00:29:58.540
You've already started to make
a GitHub repository where you're

573
00:29:58.540 --> 00:30:01.000
going to start putting code
in there and beginning to

574
00:30:01.000 --> 00:30:03.640
build interactive demos as well,
which are pretty slick. I'm

575
00:30:03.640 --> 00:30:08.650
already looking at this. I
can vector one here on

576
00:30:08.650 --> 00:30:10.960
waves and a beaded string.
So I like the idea

577
00:30:10.960 --> 00:30:12.850
that soon or in the
future, I'll be able to

578
00:30:12.850 --> 00:30:14.350
read the book and then
go and see some of

579
00:30:14.350 --> 00:30:18.070
these things live in my
browser. Yeah. There's also a

580
00:30:18.070 --> 00:30:21.760
get hub account for people
discussing the different exercises in

581
00:30:21.760 --> 00:30:24.790
the book. So look out
for that. And that's a

582
00:30:24.790 --> 00:30:29.110
github.com/pim hyphen book. I'm going
to put links to all

583
00:30:29.110 --> 00:30:32.440
of this stuff in the
show notes from penbrook.org, the

584
00:30:32.440 --> 00:30:35.170
get hub, the experiments, and
on and on and on.

585
00:30:35.860 --> 00:30:37.690
It's got to feel really
great to be, to be

586
00:30:37.690 --> 00:30:40.510
finished. I've written a couple
of books, certainly not as

587
00:30:40.510 --> 00:30:42.850
awesome as this one. Do
you think you're going to

588
00:30:42.850 --> 00:30:45.700
just be forever updating the
book and make version two

589
00:30:45.700 --> 00:30:47.740
version three, or you're going
to take a break. I'll

590
00:30:47.740 --> 00:30:50.740
definitely people have already started
to find mistakes in the

591
00:30:50.740 --> 00:30:55.030
book. Small ones, nothing, nothing
major, all the programs still

592
00:30:55.030 --> 00:30:57.700
do what I promise they
do. So that's what matters,

593
00:30:58.450 --> 00:31:01.360
but actually my sort of
next project I've been thinking

594
00:31:01.360 --> 00:31:03.610
about ever since I tell
people I've been making this

595
00:31:03.610 --> 00:31:07.240
book a program introduction to
mathematics. All of my mathematician

596
00:31:07.240 --> 00:31:10.300
friends have been desperately asking
me for the converse book,

597
00:31:10.420 --> 00:31:13.570
mathematicians, introduction to programming. So
I might have to do

598
00:31:13.570 --> 00:31:16.180
that next. Oh my goodness.
Well, certainly if you do

599
00:31:16.180 --> 00:31:18.220
do that, you've got to
do the exact same cover

600
00:31:18.220 --> 00:31:22.480
except just flip it upside
down. No product. Fantastic. Well,

601
00:31:22.480 --> 00:31:24.670
thank you so much, dr.
Jeremy Coon for chatting with

602
00:31:24.670 --> 00:31:27.700
me today. Thanks for having
me. This has been another

603
00:31:27.700 --> 00:31:30.870
episode of Hansel minutes. We'll
see him again next week.

604
00:31:30.990 --> 00:31:50.610
<inaudible>.

