WEBVTT FILE

1
00:00:12.140 --> 00:00:17.300
From hanselminutes.com. It's Hanselman it's
Oh, weekly discussion with web

2
00:00:17.300 --> 00:00:21.950
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:21.950 --> 00:00:28.490
number three 90 recorded live
Thursday, September 12th, 2013. This episode of

4
00:00:28.490 --> 00:00:31.310
Hansel minutes is brought to
you by Tellerik offering the

5
00:00:31.310 --> 00:00:40.010
best in developer tools and
support online@tlerikdotcomandbyfranklin.net to makers of

6
00:00:40.010 --> 00:00:43.520
gesture, pack a powerful gesture,
recording and recognition system for

7
00:00:43.520 --> 00:00:51.170
Microsoft connect for windows developers
details@gesturepak.com. In this episode, Scott

8
00:00:51.170 --> 00:00:54.770
talks with Franz Bauma about
the state of object relational

9
00:00:54.770 --> 00:01:00.440
mappers in.net. Hi, this is
Scott Hanselman. This is another

10
00:01:00.440 --> 00:01:03.350
episode of Hansel minutes, and
I'm talking to France, Bauma,

11
00:01:03.410 --> 00:01:06.710
author of LLB, L Jen,
and a expert on data

12
00:01:06.710 --> 00:01:10.010
access. How are you? Hey
man. Thank you. Thanks for

13
00:01:10.010 --> 00:01:12.320
having me. No, this is
great. It's always good to

14
00:01:12.320 --> 00:01:14.690
talk to experts and I
I'm happy to talk to

15
00:01:14.690 --> 00:01:16.490
you. I haven't seen you
in person in a long

16
00:01:16.490 --> 00:01:18.650
time, but we're, we're joined
on Skype here. So this

17
00:01:18.650 --> 00:01:22.490
is great. I wanted to
talk to you because you

18
00:01:22.490 --> 00:01:24.980
have a, you're a consultant
with a product of your

19
00:01:24.980 --> 00:01:27.140
own, right? It's just it's
you. It's one guy. It's

20
00:01:27.140 --> 00:01:29.210
not a team of 50
people who work on this

21
00:01:29.210 --> 00:01:31.970
product. Is it always with
me developing the product and

22
00:01:31.970 --> 00:01:34.430
to support guys who are
doing this sport for me?

23
00:01:35.250 --> 00:01:37.550
And it's very, it's very
mature. This has been around

24
00:01:37.550 --> 00:01:39.350
for years. You've been doing
this for how long now

25
00:01:40.670 --> 00:01:44.390
I started developing it in
late 2002 and released the

26
00:01:44.390 --> 00:01:49.100
first version in September, 2003. So
it's about 10 years now.

27
00:01:49.310 --> 00:01:53.570
Wow. It's on the market.
So it's, it's interesting because

28
00:01:53.840 --> 00:01:56.870
while people have been talking
in.net about what the right

29
00:01:56.870 --> 00:02:00.410
way to access relational data
is, there's been this kind

30
00:02:00.410 --> 00:02:03.860
of ongoing argument about what
do I use linked to

31
00:02:03.860 --> 00:02:06.590
SQL? Oh no, you can't
that's dead. Or do I

32
00:02:06.590 --> 00:02:09.500
use N hibernate? That's the,
that's the all.net thing to

33
00:02:09.500 --> 00:02:11.600
do? Or do I use
entity framework? That's the official

34
00:02:11.600 --> 00:02:15.140
Microsoft way to do you
actually have chosen to float

35
00:02:15.170 --> 00:02:18.830
above that kind of a
as, as an, as an

36
00:02:18.830 --> 00:02:22.220
abstract mapping layer and you
support all of those and

37
00:02:22.220 --> 00:02:25.640
your own framework? Yes. Well,
first I supported my own

38
00:02:25.640 --> 00:02:31.220
framework, but as we are
in commercial product and as

39
00:02:31.220 --> 00:02:35.300
the framework, and then hibernate
are free as well as

40
00:02:35.300 --> 00:02:38.690
linked to sequel, we have
to compete against the free

41
00:02:38.690 --> 00:02:45.920
product, which is very hard.
So additionally to that, lots

42
00:02:45.920 --> 00:02:49.790
of people wanted Boko classes
to be resistant to the

43
00:02:49.790 --> 00:02:54.800
database. And we don't support
Bobo, glosses, poco, meaning plain

44
00:02:54.800 --> 00:02:58.850
old CLR objects for people
that don't know. So to

45
00:02:59.380 --> 00:03:04.420
them with An alternative, but
still enable them to do

46
00:03:04.450 --> 00:03:09.610
the best data access in
that project. I thought, well,

47
00:03:09.820 --> 00:03:14.290
what if I support the
other main or mappers in

48
00:03:14.290 --> 00:03:21.640
my designer and also do
model first? And so I

49
00:03:22.030 --> 00:03:25.180
chose these three links, sequel
and hibernate, and an entity

50
00:03:25.180 --> 00:03:29.170
framework to support them as
a, as well. The system

51
00:03:29.170 --> 00:03:33.160
is flexible so I can
decide to support another one

52
00:03:33.160 --> 00:03:37.320
tomorrow. I, if I answered
And you know how entity

53
00:03:37.320 --> 00:03:40.320
framework though says, you can
do things code first or

54
00:03:40.320 --> 00:03:45.690
design first or model first,
have you picked one? I

55
00:03:45.690 --> 00:03:49.410
mean, by, by having people
start with a designer as

56
00:03:49.410 --> 00:03:51.750
a that's how you do
it, you don't have code

57
00:03:51.750 --> 00:03:57.180
first, right? I don't have
COVID first. No. I started

58
00:03:57.180 --> 00:04:00.150
with database first, so pointed
to a database. It will

59
00:04:01.230 --> 00:04:04.290
read all the table definitions,
few definitions and so forth

60
00:04:04.830 --> 00:04:08.520
and reverse engineer and abstract
entity model from that at

61
00:04:08.700 --> 00:04:16.980
the level of Niamh, ORM
object, rolling and generate code

62
00:04:16.980 --> 00:04:21.330
from the, from that abstract
model and the mappings. So,

63
00:04:22.410 --> 00:04:24.450
but a lot of people
said, well, I want to

64
00:04:24.450 --> 00:04:27.570
start with a clean slate.
I want, I don't have

65
00:04:27.570 --> 00:04:30.150
a database and I want
to define a model and

66
00:04:30.150 --> 00:04:34.350
generate code from it and
the database or additionally, I

67
00:04:34.350 --> 00:04:36.930
have a database, but I
want to make changes on

68
00:04:36.930 --> 00:04:40.440
that database, but not in
a way that they used

69
00:04:40.440 --> 00:04:44.130
to be, to do like
change the table here, change

70
00:04:44.130 --> 00:04:47.460
a fuel back, but in
a more structured manner, like

71
00:04:48.420 --> 00:04:50.460
I want to change. It's
in a real model, that's

72
00:04:50.460 --> 00:04:56.340
behind everything. So that's the
reason I added model first

73
00:04:57.120 --> 00:05:02.400
to the kind of designer.
So people have a choice

74
00:05:02.400 --> 00:05:08.220
between starting from scratch or
maintain the model in a

75
00:05:08.220 --> 00:05:12.630
model first fashion, or simply
pointed to the database, pull

76
00:05:12.690 --> 00:05:16.500
the relational model data, and
then go from there. Do

77
00:05:16.500 --> 00:05:20.490
you think the developers, perhaps,
maybe developers that are just

78
00:05:20.490 --> 00:05:23.940
getting started, get confused about
what exactly it is that

79
00:05:23.940 --> 00:05:26.910
they're persisting. Like do you
think that they think that

80
00:05:26.970 --> 00:05:32.340
their databases store objects? I
think they do a lot

81
00:05:32.340 --> 00:05:37.260
of developers and what they
see everyday is their code

82
00:05:37.260 --> 00:05:42.300
and then objects like a
user object or customer object

83
00:05:42.300 --> 00:05:46.620
in their own application. And
it has to be persistent

84
00:05:46.620 --> 00:05:51.660
somewhere. So what they want
is, okay, I tell some,

85
00:05:51.740 --> 00:05:56.310
some other object to persist
this customer or these orders.

86
00:05:56.730 --> 00:05:59.630
And so I can get
them back later and the

87
00:05:59.630 --> 00:06:05.900
less friction they can get
with that action, the better.

88
00:06:07.250 --> 00:06:10.550
And there's something to say
for that. The only thing

89
00:06:10.550 --> 00:06:17.360
is they are not storing
objects, they're storing data. And

90
00:06:20.690 --> 00:06:23.320
today that can be stored
in a different format in

91
00:06:23.330 --> 00:06:27.920
a database because other applications
have to consume the data

92
00:06:27.920 --> 00:06:31.910
again in another forum, like
for example, a report server

93
00:06:31.910 --> 00:06:35.930
or old website, a website
has to display the information

94
00:06:35.930 --> 00:06:40.970
in a different form, but
that's totally abstract away from

95
00:06:40.970 --> 00:06:44.300
the developer if they simply
see the objects in their

96
00:06:44.300 --> 00:06:46.930
application. So how important do
you think it is that

97
00:06:46.930 --> 00:06:49.600
when someone is, is working
with an Orr mapper, that

98
00:06:49.600 --> 00:06:51.400
they need to really know
what's going on? Because I

99
00:06:51.400 --> 00:06:53.800
feel like a lot of
work has been put into

100
00:06:54.130 --> 00:06:57.400
trying to hide the fact
that we're putting objects in

101
00:06:57.400 --> 00:07:01.210
databases and then other other
products feel really strongly about

102
00:07:01.210 --> 00:07:03.280
making it clear that these
are just projections that we're,

103
00:07:03.340 --> 00:07:10.240
that we're working with. Well,
I don't have raw numbers,

104
00:07:10.240 --> 00:07:15.370
but the, what I've read
in most research is that

105
00:07:16.750 --> 00:07:19.690
a lot of time is
spent in the database like

106
00:07:19.690 --> 00:07:25.180
40% or some in most
applications. So if you just

107
00:07:25.180 --> 00:07:29.710
do as if the database
isn't there, it's just one

108
00:07:29.710 --> 00:07:36.730
method call. And then you
realize how important, how big

109
00:07:36.730 --> 00:07:40.630
the impact will be when
you just save like 10,000

110
00:07:40.870 --> 00:07:46.270
objects into the database. For
example, Because it's just being

111
00:07:46.270 --> 00:07:48.730
hidden. Like, they'll just say
here's a list of objects

112
00:07:48.730 --> 00:07:53.050
and they don't realize what
that turns into. Yes. Like

113
00:07:53.080 --> 00:07:58.480
for example, when you see
people query tens of thousands

114
00:07:58.480 --> 00:08:01.990
of objects to find one,
for example, to update and

115
00:08:01.990 --> 00:08:06.370
then send the whole set
back to the database because

116
00:08:06.370 --> 00:08:10.030
they don't realize how big
the work will be on

117
00:08:10.030 --> 00:08:14.350
the other side. And how
does, how does this start?

118
00:08:14.380 --> 00:08:16.840
What is it that made
people forget that these things

119
00:08:16.840 --> 00:08:18.580
happen? I mean, back in
the day when I was

120
00:08:18.580 --> 00:08:22.270
going and writing SQL and,
and frankly, when I was

121
00:08:22.630 --> 00:08:27.040
a string concatenating SQL together,
I may have been breaking

122
00:08:27.040 --> 00:08:29.590
rules by string concatenate SQL,
but I sure knew when

123
00:08:29.590 --> 00:08:34.600
it was an object and
when it wasn't, Well, I

124
00:08:34.600 --> 00:08:37.570
think it started when, when
people realized that you can

125
00:08:37.570 --> 00:08:39.070
do a lot of work
in a couple of lines

126
00:08:39.070 --> 00:08:45.520
of code. So that makes
people think, Hey, I can

127
00:08:45.520 --> 00:08:48.460
do a lot of things
together and I can create

128
00:08:48.460 --> 00:08:51.340
this. I can create this.
And I get a couple

129
00:08:51.340 --> 00:08:53.500
of objects back and I
looked through them and I

130
00:08:53.500 --> 00:08:56.460
see changed some property, a
save it back, Hey man,

131
00:08:56.880 --> 00:08:58.800
work done. Let's move on
to the next work item.

132
00:09:01.320 --> 00:09:03.720
As soon as you see
that, that, that you can

133
00:09:03.720 --> 00:09:06.180
do a lot of work
with a couple of lines,

134
00:09:06.210 --> 00:09:11.070
you don't realize anymore what's
beneath the surface. I think

135
00:09:11.070 --> 00:09:13.620
it's the same thing with,
for example, when you write

136
00:09:13.620 --> 00:09:19.020
your first webpage and asp.net,
you don't realize how much

137
00:09:19.050 --> 00:09:23.820
code is generated behind that
page to actually render the

138
00:09:23.820 --> 00:09:27.630
page. You're, you've written in
a couple of lines. So

139
00:09:29.730 --> 00:09:33.120
unless you realize how much
work is actually going on

140
00:09:33.120 --> 00:09:36.840
at one time, you will
sooner or later make the

141
00:09:36.840 --> 00:09:40.920
mistake that you think your
code is fast. But it

142
00:09:40.920 --> 00:09:44.450
isn't. I feel like we,
as an industry are kind

143
00:09:44.450 --> 00:09:47.480
of oscillating back and forth
between hide lots of things

144
00:09:47.480 --> 00:09:50.290
and be, be powerful and
be productive. And then we,

145
00:09:50.290 --> 00:09:52.190
we get panicky after a
little while, and then we

146
00:09:52.190 --> 00:09:54.890
switched back, like we were
doing web forms, and now

147
00:09:54.890 --> 00:09:57.860
we're talking about Nancy and
web API. We were doing

148
00:09:58.100 --> 00:10:00.470
a linked to sequel. And
now we're talking about things

149
00:10:00.470 --> 00:10:03.380
like dapper and massive where
people say, Oh, just learn

150
00:10:03.380 --> 00:10:05.750
SQL. That's the right way
to do things. How do

151
00:10:05.750 --> 00:10:08.240
you as a product that's
been around for 10, 11

152
00:10:08.240 --> 00:10:13.070
years deal with those oscillations
because peop some people are

153
00:10:13.070 --> 00:10:16.100
moving us towards these micro
frameworks where they say less,

154
00:10:17.600 --> 00:10:20.810
Yeah. In one way you
have to make a choice.

155
00:10:22.610 --> 00:10:28.940
Like, will I support a
different set of features like

156
00:10:29.390 --> 00:10:32.330
Debra, like features, for example,
where you can just write

157
00:10:33.230 --> 00:10:36.980
a sample query that's very
fast, but obviously has less

158
00:10:36.980 --> 00:10:41.750
features around it or do
I say, well, if you

159
00:10:41.750 --> 00:10:45.140
want to use or use
dapper and I'm stick with

160
00:10:45.140 --> 00:10:49.400
the feature set and the
road I I've chosen, and

161
00:10:49.400 --> 00:10:53.750
this is always easy to,
to, to make these changes,

162
00:10:53.960 --> 00:11:00.740
these choices. What I'm seeing
now for example, is that

163
00:11:00.740 --> 00:11:05.750
the, a lot of people
will use read only databases,

164
00:11:05.750 --> 00:11:10.520
for example, like a no
SQL database de-normalized schema, as

165
00:11:10.520 --> 00:11:17.270
for read only parts of
their application. And I'm thinking

166
00:11:17.270 --> 00:11:22.130
about adding functionality that you
can create sub models from

167
00:11:22.130 --> 00:11:28.010
your real model to create
these pre only projections. So

168
00:11:28.010 --> 00:11:30.010
you can, for example, say
I have a customer order,

169
00:11:30.010 --> 00:11:35.390
order details, product kind of
relationship abstract model, right? And

170
00:11:35.390 --> 00:11:39.710
I create a projection from
net like a customer and

171
00:11:39.710 --> 00:11:43.400
order in one set. And
I define that on the

172
00:11:43.400 --> 00:11:47.570
model. So my designer can
generate code for you to

173
00:11:47.570 --> 00:11:50.930
keep that in sync. So
you just have a protection

174
00:11:50.930 --> 00:11:56.380
system on your customer and
order, and the system I

175
00:11:56.380 --> 00:12:01.300
generate for you will keep
automatically your read only sets

176
00:12:01.360 --> 00:12:04.200
in sync with that. Would,
would it be fair to

177
00:12:04.200 --> 00:12:06.300
call that read only set
of you model? Are you

178
00:12:06.300 --> 00:12:09.030
getting, are you basically putting
in view model support? Yeah,

179
00:12:09.060 --> 00:12:16.320
for example. Okay. So the
advantage obviously is that when

180
00:12:16.320 --> 00:12:20.370
your review model changes, your
read only mode changes with

181
00:12:20.370 --> 00:12:23.490
it. So you don't have
to go back and forth.

182
00:12:23.520 --> 00:12:26.100
Hey, I changed something in
here. Oh, I have to

183
00:12:26.100 --> 00:12:28.650
change the, also in the
read only model, because if,

184
00:12:28.650 --> 00:12:31.650
depending on the automobile, Interesting
that that's kind of like

185
00:12:31.680 --> 00:12:34.830
a, a, a non database
specific view. Like I might

186
00:12:34.830 --> 00:12:38.430
have customer orders and customer
details. And then in SQL

187
00:12:38.430 --> 00:12:40.800
server, I might, in the
old, in the old times

188
00:12:41.070 --> 00:12:44.730
made a customer order detail
view that I would then

189
00:12:44.850 --> 00:12:47.610
use and then apply to
a view. And then, yes.

190
00:12:48.150 --> 00:12:50.160
Okay. So then you're talking
about putting that in the,

191
00:12:50.160 --> 00:12:52.650
in the model itself and
then generating that. So then

192
00:12:52.650 --> 00:12:56.040
someone could choose to consume
that model or that view

193
00:12:56.040 --> 00:12:58.940
model. Now that read only
model rather than consuming the

194
00:12:58.980 --> 00:13:02.580
more direct data access model.
Yes. And you can also

195
00:13:02.580 --> 00:13:05.940
have been think about a,
shall I store it in

196
00:13:05.940 --> 00:13:08.340
a no SQL database for
you automatically and keep the

197
00:13:08.340 --> 00:13:11.910
things in sync by generate
some help account for you

198
00:13:13.680 --> 00:13:17.940
or additionally, add some service
code for you so you

199
00:13:17.940 --> 00:13:24.540
can enable it via API.
For example, I've worked on

200
00:13:24.540 --> 00:13:27.570
a large, a lot of
large enterprise applications and sometimes,

201
00:13:27.570 --> 00:13:31.170
and this is, this is
a little bit jaded. Sometimes

202
00:13:31.170 --> 00:13:35.250
I feel like the app
spends most of its time,

203
00:13:35.250 --> 00:13:38.040
just moving data from one
format to another kind of,

204
00:13:38.820 --> 00:13:41.250
and not just once or
twice, but like three or

205
00:13:41.250 --> 00:13:43.350
four times as it makes
its way through the system.

206
00:13:43.350 --> 00:13:45.900
And then you ask yourself,
what exactly does this application

207
00:13:45.900 --> 00:13:49.830
do? So my question is
how, how, how important is

208
00:13:49.830 --> 00:13:52.200
it to have a data
access layer and a business

209
00:13:52.200 --> 00:13:54.690
objects layer and all these
different layers of layers of

210
00:13:54.690 --> 00:13:57.600
layers from repository to data,
access to data data, as

211
00:13:57.600 --> 00:14:00.210
it moves its way when
you're just doing text boxes

212
00:14:00.420 --> 00:14:08.340
over data in a web
application. Well, if it clutters

213
00:14:08.370 --> 00:14:11.400
your view on what you're
really doing, and I think,

214
00:14:11.400 --> 00:14:15.480
well, it's it, it's not
really helping, but if you

215
00:14:15.480 --> 00:14:21.780
can abstract away functionality that
that's all otherwise complex to,

216
00:14:21.810 --> 00:14:27.660
to comprehend, then I think
adding another layer is good

217
00:14:27.690 --> 00:14:31.920
because you can focus on,
on that layer only to

218
00:14:32.340 --> 00:14:37.170
solve the problem at hand.
I'm not always a fan

219
00:14:37.200 --> 00:14:40.680
of what's common these days
that you have, for example,

220
00:14:40.680 --> 00:14:44.010
a data access model in
code, and you'll have a

221
00:14:44.010 --> 00:14:48.600
few, a few model somewhere
else, yet another model in

222
00:14:48.600 --> 00:14:54.560
your JVs, Yama, the code
on the client is always

223
00:14:54.830 --> 00:14:58.010
model for data in model,
in model, in model. And

224
00:14:58.010 --> 00:15:01.940
you all, you have to
keep everything up to date

225
00:15:01.940 --> 00:15:07.070
when you change one, for
example, the source model. So

226
00:15:10.280 --> 00:15:15.860
I think when you were
doing three or four models

227
00:15:16.220 --> 00:15:19.700
in a chain for getting
data from one place to

228
00:15:19.760 --> 00:15:25.670
another, I think it's a
bit overly complex, but I

229
00:15:25.670 --> 00:15:29.090
also think it's, it depends
on the application at hand

230
00:15:30.530 --> 00:15:34.550
and of course development teams.
I mean, you can have

231
00:15:34.550 --> 00:15:40.370
split development teams per layer.
So one, one team works

232
00:15:40.370 --> 00:15:42.260
with one model and the
other team works with another

233
00:15:42.260 --> 00:15:45.310
model, which is maybe a
subset. If you have an

234
00:15:45.310 --> 00:15:49.750
abstract, you know, entity model
like you've got, and whether

235
00:15:49.750 --> 00:15:51.760
it be in your product
or whether someone has gone

236
00:15:51.760 --> 00:15:53.500
and created an abstract in
any model, I used to

237
00:15:53.500 --> 00:15:55.660
make them an XML and
do a lot of cogeneration

238
00:15:55.660 --> 00:15:57.970
and roll your own kind
of an example. You can

239
00:15:57.970 --> 00:16:01.120
generate a data access later,
you can generate business objects,

240
00:16:01.120 --> 00:16:04.240
you can generate SQL, you
can generate stored procs how

241
00:16:04.240 --> 00:16:07.150
much generation should you, should
you go with, could you

242
00:16:07.150 --> 00:16:11.860
potentially start generating angular and
client side JavaScript models? Now

243
00:16:11.860 --> 00:16:14.800
that I have this abstract
stuff? Yeah. It's no problem

244
00:16:15.310 --> 00:16:18.280
with fellow nation and all
on the pro on the

245
00:16:18.280 --> 00:16:24.700
properties embedded just one click
away. And you do that

246
00:16:24.700 --> 00:16:28.000
now. No, but I can
add it in a request

247
00:16:28.000 --> 00:16:33.400
though, just a template. It's
just the template. Okay. So

248
00:16:33.400 --> 00:16:35.080
this is a really, this
is a really useful point.

249
00:16:35.080 --> 00:16:38.600
So I'm trying to understand
your philosophy. I mean, in

250
00:16:38.650 --> 00:16:40.720
the process, we'll, I'll understand
the product, but I'm more

251
00:16:40.720 --> 00:16:43.900
interested in the philosophy because
you've got that kind of

252
00:16:44.350 --> 00:16:49.300
authoritative abstract data model. And
when I said something that

253
00:16:49.300 --> 00:16:52.540
I thought was an impressive
and revolutionary idea, like couldn't

254
00:16:52.540 --> 00:16:54.370
you generate and you're like,
of course it's just a

255
00:16:54.370 --> 00:16:58.930
template. So ultimately you, you,
everything comes from this core,

256
00:16:58.930 --> 00:17:02.710
abstract authoritative source, and you
can generate whatever you want

257
00:17:02.710 --> 00:17:06.250
to generate. Yeah, because the,
what you generated are just

258
00:17:06.250 --> 00:17:09.730
projections from the model in
a, to a different form.

259
00:17:10.330 --> 00:17:13.150
And the model is not
something that comes falling out

260
00:17:13.150 --> 00:17:17.440
of the sky. It's really
the modeling of NC definitions.

261
00:17:17.440 --> 00:17:20.800
You see in the domain,
for example, if you have

262
00:17:20.800 --> 00:17:25.990
to write a software product
for a shoe factory, they

263
00:17:25.990 --> 00:17:29.200
have customers, they have materials
and they have designs for

264
00:17:29.200 --> 00:17:33.070
shoes. All those kinds of
things are really abstract entity

265
00:17:33.070 --> 00:17:35.620
definitions. And you can create
a model from that or

266
00:17:35.860 --> 00:17:40.540
multiple models. And they form
relationships with each other and

267
00:17:40.540 --> 00:17:44.830
inheritance, and they have properties
like which are called attributes.

268
00:17:47.350 --> 00:17:50.640
And that mobile alone, you
can project to different forums.

269
00:17:50.640 --> 00:17:53.670
Like I can project it
to code and I can

270
00:17:53.670 --> 00:17:56.520
protect it through relational database
models, but it can also

271
00:17:57.000 --> 00:18:00.300
projected through a no SQL
database or to a service.

272
00:18:01.320 --> 00:18:06.540
It's just a projection I
can define on that abstract

273
00:18:06.600 --> 00:18:11.010
model. And as soon as
I defined a projection, I

274
00:18:11.010 --> 00:18:14.090
can generate go to with
it. Doesn't that put a

275
00:18:14.090 --> 00:18:18.530
lot of responsibility though, on
your abstract model? I mean,

276
00:18:18.530 --> 00:18:21.830
it certainly has a lot
of responsibilities. It knows a

277
00:18:21.830 --> 00:18:23.720
lot about the database. It
knows a lot about data

278
00:18:23.720 --> 00:18:27.800
types. It knows a lot
about lengths and constraints, and

279
00:18:27.800 --> 00:18:30.530
now it starts knowing about
business objects. And it knows

280
00:18:30.530 --> 00:18:34.430
about a database. For example,
a database string length might

281
00:18:34.430 --> 00:18:37.520
be different from a client
side string length. I mean,

282
00:18:37.940 --> 00:18:42.710
ideally it wouldn't, but you
know, things are different that

283
00:18:42.710 --> 00:18:46.580
puts a lot of pressure
on this abstract model. Yes,

284
00:18:46.580 --> 00:18:52.310
that's true. And then it's,
it's hard not to fall

285
00:18:52.310 --> 00:18:56.390
into the pitfall where you
have just one source for

286
00:18:56.390 --> 00:19:03.080
information, for everything, and even
application like the various tools

287
00:19:03.080 --> 00:19:05.450
on the market, where you
can just define a data

288
00:19:05.450 --> 00:19:07.610
model and you can generate
from the database through the

289
00:19:07.610 --> 00:19:15.920
UI from it. So what
I have currently is the

290
00:19:15.920 --> 00:19:21.230
abstract model with the mapping
definitions and in relation to

291
00:19:21.230 --> 00:19:25.130
model data and the cogeneration.
But on top of that

292
00:19:25.130 --> 00:19:28.700
obstruction model, I can AppSec
mobile. I can define different

293
00:19:28.700 --> 00:19:32.660
models, which are projections from
the AppSec model, but again

294
00:19:32.720 --> 00:19:37.160
are just the model. And
for example, I can define

295
00:19:37.160 --> 00:19:40.340
a model for the client
side, which has, for example,

296
00:19:40.710 --> 00:19:47.240
different string lengths. Art doesn't
have string because it, the

297
00:19:47.420 --> 00:19:54.380
target for that model is
not something.net and a projection

298
00:19:54.380 --> 00:19:58.460
from one model to the
other is what my tool

299
00:19:58.490 --> 00:20:03.860
should do for you. So
the new model that's defined

300
00:20:03.860 --> 00:20:06.440
on the abstract model then
can be used as a

301
00:20:06.440 --> 00:20:10.430
source for generation, for client
side, JavaScript, for example, I

302
00:20:10.430 --> 00:20:13.580
see. So if I'm understanding
correctly, there is an abstract

303
00:20:13.610 --> 00:20:17.000
model, but then there can
also be models of models.

304
00:20:17.030 --> 00:20:19.850
I mean, you can chop
off a piece of this

305
00:20:19.850 --> 00:20:22.310
and then create another view
on top of that. That

306
00:20:22.310 --> 00:20:25.820
is a different model. And
then from that generate. Yeah,

307
00:20:26.330 --> 00:20:29.090
I see. So then perhaps
that secondary model could have

308
00:20:29.360 --> 00:20:33.260
more, more context, more information,
more attributes that are specific

309
00:20:33.260 --> 00:20:35.390
to the problem. So the
closer it gets to the

310
00:20:35.390 --> 00:20:38.270
user, the more it looks
like, what the user expects,

311
00:20:38.300 --> 00:20:43.060
the user being the client
of the Yes, and that

312
00:20:43.190 --> 00:20:47.560
Pacific bark models of models
is what I'm researching right

313
00:20:47.560 --> 00:20:52.960
now for the future versions
of LVL 10, because you

314
00:20:52.960 --> 00:20:56.530
have at, at one moment,
you realize you have built

315
00:20:56.530 --> 00:21:05.170
everything except the email. So
yeah, that's left for our

316
00:21:05.170 --> 00:21:08.020
mapping is yeah. Yeah. You
have entities, you have classes,

317
00:21:08.020 --> 00:21:11.980
you have tables and the
mappings between them and everything

318
00:21:11.980 --> 00:21:15.310
works and what's left well,
there's a lot left, but

319
00:21:15.790 --> 00:21:23.020
it's all built on top
of that basis. So that's

320
00:21:23.020 --> 00:21:30.790
what I'm researching right now.
That models, project, which are

321
00:21:30.790 --> 00:21:34.690
projected from the abstract model
is, is one route into

322
00:21:34.690 --> 00:21:39.120
the future for, for my
work. Do you think though,

323
00:21:39.120 --> 00:21:42.330
that the, that the kind
of the rise of document

324
00:21:42.330 --> 00:21:45.150
databases where someone can just
pay, take some Jason and

325
00:21:45.150 --> 00:21:50.100
throw it into a, a
database will eventually kill the

326
00:21:50.100 --> 00:21:52.230
relational database? Or do you
think the relational database is

327
00:21:52.230 --> 00:21:55.800
just so much more optimized
because of things like strong

328
00:21:55.800 --> 00:22:00.090
typing and transactions that, that
the document databases and no

329
00:22:00.090 --> 00:22:03.750
SQL databases and things like
that will never, Well, I

330
00:22:03.750 --> 00:22:07.920
think each database forum has
a strong points and weak

331
00:22:07.980 --> 00:22:13.620
points. And I mean, you
use just one database database

332
00:22:13.620 --> 00:22:18.990
form for everything in your
application, you will run into

333
00:22:18.990 --> 00:22:22.500
the negative side of the
database forum. You've chosen one

334
00:22:22.500 --> 00:22:25.740
way or the other. When
you choose the document database,

335
00:22:25.770 --> 00:22:28.950
you will sooner or later
run into the aspect that

336
00:22:29.130 --> 00:22:32.790
eventually consistency is something you
have to solve in your

337
00:22:32.790 --> 00:22:35.250
application code. It's not something
that will be solved by

338
00:22:35.250 --> 00:22:42.030
the database you've chosen. So
when you choose a relational

339
00:22:42.030 --> 00:22:45.510
database and you scale out
to a lot of servers,

340
00:22:45.540 --> 00:22:49.140
you suddenly run into the
situation that you cannot do

341
00:22:49.860 --> 00:22:53.970
very efficient transactions across those
servers without a lot of

342
00:22:53.970 --> 00:23:03.060
costs. So how to solve
that? I think it's, especially

343
00:23:03.060 --> 00:23:06.900
the coming years, four years,
four or five years, I

344
00:23:06.900 --> 00:23:11.820
think it's that developers more
and more will choose different

345
00:23:11.820 --> 00:23:16.560
forms of databases for different
parts of their application. So

346
00:23:17.850 --> 00:23:24.420
the line of business, transactional
ordering systems will likely be

347
00:23:24.420 --> 00:23:28.140
still on relational databases, but
other parts of the application,

348
00:23:28.140 --> 00:23:33.150
which can use more Ritani
database, more read only data

349
00:23:33.150 --> 00:23:37.740
will, for example, move to
a no SQL database. But

350
00:23:37.740 --> 00:23:42.630
you see also now more
and more research in the

351
00:23:42.630 --> 00:23:47.810
no SQL corner where you
have a no SQL databases

352
00:23:47.810 --> 00:23:56.120
with, for asset compliance, like
hyperdecks are full DB. Those

353
00:23:56.120 --> 00:24:02.870
are databases with no sequel
aspects. Good. They, you can

354
00:24:02.870 --> 00:24:08.000
fully use them in an
asset style, like a relational

355
00:24:08.000 --> 00:24:14.300
database. So I don't know
they will be useful in

356
00:24:14.300 --> 00:24:21.080
every application, but there are
still, there are more and

357
00:24:21.080 --> 00:24:23.480
more choices on the market,
but I still think that

358
00:24:23.480 --> 00:24:28.640
relational database will, will keep
their, their part of their

359
00:24:28.640 --> 00:24:35.030
share of the market. It
will just be a little

360
00:24:35.030 --> 00:24:38.180
less than they have now,
because most developers will simply

361
00:24:38.300 --> 00:24:41.630
choose, well, we use a
relational database because of DBA

362
00:24:41.630 --> 00:24:46.760
CESO, or I know that
it will work and that's

363
00:24:46.760 --> 00:24:51.260
all, maybe that group will
go have approval of a

364
00:24:51.260 --> 00:24:55.910
string, but I don't think
the no sequel databases will

365
00:24:55.910 --> 00:25:00.530
kill them. I mean, in
89 I started university at

366
00:25:00.530 --> 00:25:08.360
89 and my roommate was
graduating on object databases that's

367
00:25:09.110 --> 00:25:14.060
so many years ago. And
they still aren't the choice

368
00:25:14.480 --> 00:25:17.740
in foremost for most, No,
I was going to say

369
00:25:17.740 --> 00:25:20.080
it seems to me like
one of the funny things

370
00:25:20.080 --> 00:25:22.540
that people forget about around
relational databases is how it

371
00:25:22.540 --> 00:25:27.220
has kept organizations apart. Like
I recently, I recently spoke

372
00:25:27.640 --> 00:25:30.940
at a kind of quote,
unquote, large enterprise and like

373
00:25:30.940 --> 00:25:33.190
literally the database people sat
on one side of the

374
00:25:33.190 --> 00:25:37.030
room and they, they, they
clearly don't hang out together.

375
00:25:38.080 --> 00:25:41.920
They don't, they don't have
a, they don't have a

376
00:25:41.920 --> 00:25:45.550
relationship, whether it be cordial,
like let's have lunch, or,

377
00:25:45.630 --> 00:25:48.940
I mean, literally if you
want a stored proc filled,

378
00:25:48.940 --> 00:25:50.380
you know, create a, you
fill out some kind of

379
00:25:50.380 --> 00:25:52.060
a form and you ask
for it and then you

380
00:25:52.060 --> 00:25:55.390
wait. And I think that
those things have made people

381
00:25:55.390 --> 00:25:59.890
hate relational databases, those organizational
issues, more than the technical

382
00:25:59.890 --> 00:26:06.700
issues. Oh, absolutely. I don't
know if you remember using

383
00:26:06.700 --> 00:26:12.190
it, the newsgroups, there were
a lot of database oriented

384
00:26:12.190 --> 00:26:14.380
news groups, for example. And
if you ask the question

385
00:26:14.380 --> 00:26:17.620
where, Oh, I, I generate
some dynamics equal and I,

386
00:26:18.640 --> 00:26:21.340
and I have a problem
with that query and you

387
00:26:21.340 --> 00:26:25.660
were totally killed there by
all kinds of store procedure

388
00:26:25.660 --> 00:26:31.330
warriors, which said, one thing
only keep everything inside the

389
00:26:31.330 --> 00:26:35.320
database, business, logic, data, Xs
logic, no matter what everything

390
00:26:35.320 --> 00:26:43.680
should be in the database.
And I think that with

391
00:26:44.250 --> 00:26:48.540
that strong opinion about databases,
which are mostly DBA, is

392
00:26:48.540 --> 00:26:54.840
because it's their territory and
they have responsibility about the

393
00:26:54.840 --> 00:27:00.510
server from developer ruins, everything
it's their fault. So they

394
00:27:00.510 --> 00:27:05.430
are protecting their kingdom with,
with if is a lot

395
00:27:05.430 --> 00:27:12.420
of nit. And I think
that will, will stay on

396
00:27:13.470 --> 00:27:17.190
until someone says inside that
organization, well, we work for

397
00:27:17.190 --> 00:27:20.250
the same team and you
have to help each other,

398
00:27:21.210 --> 00:27:24.150
but until then it will
be water and fire, I

399
00:27:24.150 --> 00:27:27.860
think yet. Yeah. Or, or
oil and water. It's definitely

400
00:27:27.860 --> 00:27:30.980
a problem. And hopefully, you
know, tools, better tools, better

401
00:27:30.980 --> 00:27:35.900
understanding and more, hopefully more
authoritative models will cause those

402
00:27:35.900 --> 00:27:38.960
barriers to break down because
there's no reason that, that

403
00:27:38.960 --> 00:27:42.350
our relational database can't be
as agile as throwing a

404
00:27:42.350 --> 00:27:47.360
document into a blob. No,
no, of course not. It's

405
00:27:47.360 --> 00:27:50.120
just that. Well, but a
lot of developers forget is

406
00:27:50.120 --> 00:27:53.420
that starting a project is
easy when you have an

407
00:27:53.420 --> 00:27:56.090
empty database and you, Jane's
a couple of fields in

408
00:27:56.090 --> 00:27:59.240
a database of an entity
and say, Hey man, I

409
00:27:59.240 --> 00:28:03.680
have to have three new
fields in that table. The

410
00:28:03.680 --> 00:28:06.020
ones that's in production. And
there's a lot of data

411
00:28:06.020 --> 00:28:10.910
in, in a database changing
something like splitting a table

412
00:28:11.150 --> 00:28:15.470
isn't trivial. So the guy
who has to do that

413
00:28:15.540 --> 00:28:20.660
has to write scripts and
tests and maybe pull an

414
00:28:20.660 --> 00:28:23.990
all nighter to get it
working. And the developer who

415
00:28:23.990 --> 00:28:29.900
is requesting it has to
make a strong point to

416
00:28:30.530 --> 00:28:35.300
get that change through. And
I think that that's reasonable

417
00:28:35.300 --> 00:28:38.330
because the, the, the work
to make a change is

418
00:28:38.330 --> 00:28:43.610
so many more, so much
bigger than when you are

419
00:28:43.640 --> 00:28:49.400
developing with empty database before
release for your application. So

420
00:28:50.420 --> 00:28:55.640
I think a lot of
developers forget how much changes,

421
00:28:56.690 --> 00:28:58.850
how much work a single
change can be in a

422
00:28:58.850 --> 00:29:03.800
production database, for example. And
on the other hand, the

423
00:29:03.800 --> 00:29:09.230
DBA forgets how much trouble
it will be if he

424
00:29:09.230 --> 00:29:13.550
or she doesn't make a
change to a data base

425
00:29:14.480 --> 00:29:18.620
quickly. So the development team
has to wait for, for

426
00:29:18.950 --> 00:29:21.800
a change on a table
or change on a relationship.

427
00:29:23.390 --> 00:29:25.850
Yeah. Ultimately I think that
agility is the thing that's

428
00:29:25.850 --> 00:29:28.760
going to define the technologies
of the future. I talk

429
00:29:28.760 --> 00:29:30.530
to people about the cloud
and I say, you know,

430
00:29:30.530 --> 00:29:32.750
you don't need to fax
your it department to get

431
00:29:32.750 --> 00:29:37.040
a virtual machine. Like, that's,
that's just criminal you, if

432
00:29:37.040 --> 00:29:40.160
you need to get your
job done, the other team

433
00:29:40.160 --> 00:29:44.560
that's standing in your way
is, is on the same

434
00:29:44.560 --> 00:29:46.810
team. Right. Your job is
to get the business done.

435
00:29:46.810 --> 00:29:49.150
So work with that team.
And it's just as criminal

436
00:29:49.150 --> 00:29:52.060
to make someone wait a
week for a stored procedure

437
00:29:52.060 --> 00:29:57.010
or a view. Yeah, absolutely.
That that's that that's ridiculous.

438
00:29:57.280 --> 00:29:59.590
Yeah. Well, thanks so much
for chatting with me today,

439
00:29:59.590 --> 00:30:04.330
France. Okay. We'll put links
to Francis blog, his Twitter

440
00:30:04.360 --> 00:30:07.270
and his product, LLP L
gen pop on the show

441
00:30:07.270 --> 00:30:10.480
notes. This has been another
episode of Hansel minutes and

442
00:30:10.510 --> 00:30:11.680
see you again next week.

