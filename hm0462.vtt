WEBVTT FILE

1
00:00:00.810 --> 00:00:03.960
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.960 --> 00:00:06.930
they make the show possible.
Today's show is sponsored by

3
00:00:06.930 --> 00:00:11.100
developer express, become a UI
superhero with dev express controls

4
00:00:11.100 --> 00:00:15.630
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:16.020 --> 00:00:20.100
by leveraging your existing knowledge,
you can build next generation

6
00:00:20.100 --> 00:00:24.210
touch enabled solutions for tomorrow,
you can download your free

7
00:00:24.300 --> 00:00:49.110
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com
from hanselminutes.com. It's Hansel minutes,

8
00:00:49.290 --> 00:00:53.400
a weekly discussion with web
developer and technologist Scott Hanselman.

9
00:00:53.790 --> 00:00:57.780
This is Lawrence Ryan announcing show
number four 62. In this

10
00:00:57.780 --> 00:01:01.830
episode, Scott talks with Paul
bets, formerly of ghetto about

11
00:01:01.830 --> 00:01:08.550
building cross platform, desktop apps
with Adam shell. Hi, this

12
00:01:08.550 --> 00:01:10.860
is Scott Hanselman. This is
another episode of Hansel minutes,

13
00:01:10.890 --> 00:01:14.070
and I am talking with
Paul bets formerly of GitHub.

14
00:01:14.100 --> 00:01:16.620
Now, currently working at Slack.
How are you sir? Doing

15
00:01:16.620 --> 00:01:20.250
great. Doing great Slack is
like the product that won't

16
00:01:20.250 --> 00:01:23.360
quit. It is really hot
right now. Yeah, We're really

17
00:01:23.360 --> 00:01:26.210
excited. That's going. Everything's going
really well. So What does

18
00:01:26.210 --> 00:01:29.720
Slack do for the one
person that doesn't know? So

19
00:01:29.720 --> 00:01:35.600
Slack is communications tool for,
for your business. It's for

20
00:01:35.840 --> 00:01:39.620
small offices, large offices, and
you can kind of think

21
00:01:39.620 --> 00:01:42.800
of it as kind of
a modern version of IRC.

22
00:01:43.640 --> 00:01:46.790
So it's, you have rooms
that are exist for a

23
00:01:46.790 --> 00:01:49.640
long time. There it's not
like a Skype where you

24
00:01:49.640 --> 00:01:51.620
kinda pull a bunch of
people in and then, you

25
00:01:51.620 --> 00:01:55.910
know, you delete that chat
and it's gone forever and

26
00:01:56.360 --> 00:02:00.290
yeah, so we bring together
your documents. We bring together

27
00:02:00.290 --> 00:02:02.960
people talking about stuff. We
have really great search, so

28
00:02:02.960 --> 00:02:05.510
you can find things that
people talked about in the

29
00:02:05.510 --> 00:02:09.200
past and we bring together
all your other services too.

30
00:02:09.200 --> 00:02:11.420
So you integrate, like if
you're in a software project,

31
00:02:11.420 --> 00:02:14.210
you integrate your GitHub and
maybe CCI build and they

32
00:02:14.210 --> 00:02:16.730
show up and chat too.
And so it's a great

33
00:02:16.730 --> 00:02:20.060
way to work together and
see what's going on. So,

34
00:02:20.150 --> 00:02:23.210
yeah. Cool. So the thing
about Slack is that it

35
00:02:23.210 --> 00:02:25.670
integrates itself into your life
so much that you have

36
00:02:25.670 --> 00:02:28.160
to have it everywhere and
you know, I've got it

37
00:02:28.160 --> 00:02:32.000
on my iPhone and my
iPad, but on the, on

38
00:02:32.000 --> 00:02:36.680
windows, I ended up using
a, a browser basically, and

39
00:02:36.710 --> 00:02:39.290
people have been asking, I've
been hearing myself a lot

40
00:02:39.290 --> 00:02:41.960
that people want a windows
application. So you guys are

41
00:02:41.960 --> 00:02:45.050
writing a windows app for
Slack now. Right? So right

42
00:02:45.050 --> 00:02:48.200
now we have a, a
Mac app and a iOS

43
00:02:48.200 --> 00:02:51.530
and Android. And right now
we're working on both a

44
00:02:51.740 --> 00:02:57.980
windows, desktop app and a
windows phone, 8.1 F. Okay.

45
00:02:58.670 --> 00:03:02.670
And as a windows phone,
8.1 And windows. Yeah. So

46
00:03:02.670 --> 00:03:06.900
there's two separate applications. And
what technology are you using

47
00:03:06.930 --> 00:03:10.440
for to write those applications?
So the windows phone application

48
00:03:10.440 --> 00:03:15.840
is pretty standard caliber and
micro application, you know, uses

49
00:03:16.520 --> 00:03:20.040
it's a universal application, but
for initial release, it will

50
00:03:20.040 --> 00:03:23.310
be phone only. But the
desktop application that I work

51
00:03:23.310 --> 00:03:26.880
on it is built using
Adam shell, which, which is

52
00:03:26.880 --> 00:03:31.410
this technology that is the
host of the text editor

53
00:03:31.410 --> 00:03:36.600
Adam from GitHub, Adam shell.
So Adam is like the,

54
00:03:36.600 --> 00:03:39.030
it looks like sublime, text
editor, like you said, it's

55
00:03:39.030 --> 00:03:41.400
the, it's the editor from
get hub and it's all

56
00:03:41.400 --> 00:03:46.680
open source. And inside that
it's, is it just a

57
00:03:46.680 --> 00:03:49.890
window frame and a browser,
or is that oversimplifying things?

58
00:03:50.520 --> 00:03:54.510
So Adam shell is basically,
they took Chrome, the browser

59
00:03:55.500 --> 00:03:59.130
specifically this module, that's fairly
new to Chrome called the

60
00:03:59.130 --> 00:04:02.970
chromium chromium content module. And
so they split, they split

61
00:04:02.970 --> 00:04:06.090
kind of like the contents
of every tab is split

62
00:04:06.090 --> 00:04:10.170
into its own library that
you can interact with. You

63
00:04:10.170 --> 00:04:12.030
can do all kinds of
stuff. So they took that

64
00:04:12.210 --> 00:04:16.440
and took the VA run
loop, like, you know, JavaScripts

65
00:04:16.470 --> 00:04:19.560
the VA, the JavaScript engine
from Chrome and integrated it

66
00:04:19.560 --> 00:04:22.860
with no JS. And so
the effect of that is

67
00:04:23.250 --> 00:04:27.630
that you can open the
dev tools in Adam or

68
00:04:27.630 --> 00:04:30.780
any Adam shell app and
type like require Fs. Like,

69
00:04:30.780 --> 00:04:33.930
and now you can do
file system operations or anything

70
00:04:33.930 --> 00:04:35.520
that you can do in
no JS you can do

71
00:04:36.090 --> 00:04:40.380
in a Chrome now in
an Adam shell. So let

72
00:04:40.380 --> 00:04:42.150
me think, let me see
how I can understand this.

73
00:04:42.150 --> 00:04:44.940
So I know that I
can write note applications at

74
00:04:44.940 --> 00:04:47.700
the command line. I know
that like the app, for

75
00:04:47.700 --> 00:04:51.450
example, the Azure cross-platform STK
when I type no dot

76
00:04:51.450 --> 00:04:55.920
exe, that is a note
app and I can use

77
00:04:55.920 --> 00:04:59.850
required JS against the file
system there. Right? So this

78
00:04:59.850 --> 00:05:03.540
is bringing that into the,
into the gooey world. Yup,

79
00:05:03.630 --> 00:05:06.090
exactly. So you get, you
get, not only do you

80
00:05:06.090 --> 00:05:08.910
get no JS, you have
the Dom and you have

81
00:05:08.910 --> 00:05:11.850
CSS and you have HTML
and you can do whatever

82
00:05:11.850 --> 00:05:14.130
you want that. So basically
how it works is that

83
00:05:14.160 --> 00:05:17.010
when you start an Adam
shell app, you're effectively in

84
00:05:17.010 --> 00:05:19.740
a no JS run loop,
there's no windows, there's no

85
00:05:19.740 --> 00:05:21.660
anything. And one of the
things you can do is

86
00:05:21.660 --> 00:05:25.230
create a new browser window
class. And so that opens

87
00:05:25.230 --> 00:05:27.990
the Dom, it opens the
HTML and CSS and give

88
00:05:27.990 --> 00:05:32.160
it an initial page to
load. And then you can,

89
00:05:32.160 --> 00:05:33.510
and you can create as
many windows as you want

90
00:05:33.510 --> 00:05:36.480
to court. And then you're
in, you're in a browser

91
00:05:36.480 --> 00:05:39.060
and you can, you you're
in a browser that can

92
00:05:39.060 --> 00:05:41.790
do special things that can
do things that a desktop

93
00:05:41.790 --> 00:05:45.780
app could, Are you bringing
a full version of Chrome

94
00:05:45.960 --> 00:05:48.120
or a mostly full version
of Chrome down and making

95
00:05:48.120 --> 00:05:51.030
it private to me? So
I, you know, making the

96
00:05:51.030 --> 00:05:54.060
Scott Adams shell application, I now
have to be responsible for

97
00:05:54.060 --> 00:05:58.280
updating this Chrome browser, if
there's a security problem. Well,

98
00:05:58.280 --> 00:06:01.130
so ideally that the content
that you're running in this

99
00:06:01.130 --> 00:06:04.580
Adam app, Adam shell app,
is content that you control

100
00:06:04.580 --> 00:06:08.270
and usually is local. So
a lot of the security

101
00:06:08.270 --> 00:06:11.420
issues around that you'd be
worried about. Normally you're not

102
00:06:11.420 --> 00:06:14.120
so worried about it because
you're only loading content that

103
00:06:14.120 --> 00:06:17.300
you wrote yourself. You're not
loading content over the web

104
00:06:17.780 --> 00:06:20.690
in a, in a very
general way. Adam shell provides

105
00:06:20.690 --> 00:06:24.800
a way to put a
sandbox around web content. So

106
00:06:24.800 --> 00:06:27.170
you can load arbitrary content,
like, you know, like third

107
00:06:27.170 --> 00:06:30.740
party embeds and stuff like
that. That's safe. So you

108
00:06:30.740 --> 00:06:32.270
don't have to worry about
people breaking out of it.

109
00:06:32.330 --> 00:06:35.720
But yeah, so you're maintaining
a version of Chrome that

110
00:06:35.720 --> 00:06:38.030
you can update on and
whenever you want, so if

111
00:06:38.030 --> 00:06:40.220
you find security updates, you
should probably send them down

112
00:06:40.220 --> 00:06:43.390
to your customers if you
like them. So, And like

113
00:06:43.390 --> 00:06:45.880
you said, though, it's not
really chrom it's, it's chromium

114
00:06:45.880 --> 00:06:49.690
the open source project, not
Chrome, the Google browser. Exactly.

115
00:06:49.870 --> 00:06:53.320
So the difference is that
Google Chrome has a bunch

116
00:06:53.320 --> 00:06:55.450
of Google services built in.
So like when you use

117
00:06:55.450 --> 00:06:58.240
the, like the voice dictation,
it sends it to Google

118
00:06:58.240 --> 00:07:02.290
servers. So chromium doesn't have
that because they're not your,

119
00:07:02.290 --> 00:07:05.740
you don't have a token
for Google service. And how

120
00:07:05.740 --> 00:07:11.050
is this different from node
WebKit, They're really similar. The

121
00:07:11.050 --> 00:07:14.500
biggest difference is that node
WebKit, it's more of an

122
00:07:14.500 --> 00:07:18.430
approach and implementation than anything
node WebKit directly hacks on

123
00:07:18.430 --> 00:07:21.910
Chrome. Like they, they, they
have cloned chromium and they're

124
00:07:21.910 --> 00:07:25.000
changing a whole bunch of
stuff in the browser, in

125
00:07:25.000 --> 00:07:28.270
the actual code of chromium,
which means that they can,

126
00:07:28.300 --> 00:07:32.590
it's easier for them to
implement certain features, but also

127
00:07:32.590 --> 00:07:34.600
means that it's very hard
for them to keep up

128
00:07:34.600 --> 00:07:38.410
with Chrome. So they used
to be like, like six

129
00:07:38.410 --> 00:07:42.790
versions behind on chromium. And
they've, they've recently upgraded. Adam

130
00:07:42.790 --> 00:07:50.260
does it in a it's
approaches more, this less hands

131
00:07:50.260 --> 00:07:54.160
off is more hands off
to, to chromium itself. So

132
00:07:54.160 --> 00:07:56.980
they don't have to patch
Chrome that much. And that

133
00:07:56.980 --> 00:08:00.220
has advantages of density. Now
in own webcast, I guess,

134
00:08:00.230 --> 00:08:02.650
was renamed to end WJS.
And this comes out of

135
00:08:02.650 --> 00:08:06.940
Intel and they're following Chrome
and chromium. And I think

136
00:08:06.940 --> 00:08:09.850
they're on chromium 38 or
something. Now, how, how would

137
00:08:09.850 --> 00:08:13.220
someone who's listening make a
decision between Adam shell and,

138
00:08:13.220 --> 00:08:16.420
and something like NW JS?
I think they're both good

139
00:08:16.420 --> 00:08:20.680
choices. I think you can
think about like, both of

140
00:08:20.680 --> 00:08:24.220
them are, are fairly well
documented and have, they both

141
00:08:24.220 --> 00:08:27.250
have lists of like the
features they support and they

142
00:08:27.250 --> 00:08:29.260
mostly intersect, but not completely.
So you can kind of

143
00:08:29.260 --> 00:08:32.350
look and research, which one,
which one you want to

144
00:08:32.350 --> 00:08:35.650
use. I personally think that
Adam shell is a great

145
00:08:35.650 --> 00:08:40.090
choice, But are you biased?
I'm very biased, but I

146
00:08:40.090 --> 00:08:42.160
think they're both good then.
Like you're, you're not making

147
00:08:42.160 --> 00:08:45.370
a mistake by choosing the
wrong one. Isn't this kind

148
00:08:45.370 --> 00:08:49.490
of weird though, that, that
we're bringing the web for

149
00:08:49.510 --> 00:08:52.960
UI perspective into the desktop
and like, what's the point

150
00:08:52.960 --> 00:08:55.000
of an operating system at
all, right? Isn't it, isn't

151
00:08:55.440 --> 00:08:58.170
Adam shell kind of justifying
the whole concept of the

152
00:08:58.170 --> 00:09:01.500
Chromebook, like desktop iOS has
go away now. And it's

153
00:09:01.500 --> 00:09:05.270
all just, you know, a
browser frame A little bit,

154
00:09:05.270 --> 00:09:09.170
but you like, so my
path has always been native

155
00:09:09.170 --> 00:09:12.350
desktop applications, like never been
web anything. But the thing

156
00:09:12.350 --> 00:09:15.440
you have to realize is
that the web is the

157
00:09:15.440 --> 00:09:19.310
most advanced rendering and layout
engine in the world. And

158
00:09:19.310 --> 00:09:21.260
all the, all the people
who are doing, you know,

159
00:09:21.560 --> 00:09:25.670
the most interesting or, or
advanced work in building a

160
00:09:25.670 --> 00:09:31.820
really fast, really capable hardware,
accelerated like UI layout tool

161
00:09:31.820 --> 00:09:34.760
is all in HTML and
CSS. Like, you know, it's

162
00:09:34.760 --> 00:09:37.400
crazy how easy you can
do these Harbour accelerated beautiful

163
00:09:37.400 --> 00:09:42.650
animations in CSS. And compared
to like, you know, if

164
00:09:42.650 --> 00:09:44.300
I were to try to
implement that in native code,

165
00:09:44.300 --> 00:09:46.250
it'd be, you know, days
and days and days and

166
00:09:46.250 --> 00:09:48.140
days. And I can do
it in CSS in five

167
00:09:48.140 --> 00:09:52.100
minutes. That's really interesting because
things like, you know, WPF

168
00:09:52.100 --> 00:09:54.710
has a very sophisticated compositing
engine and they do a

169
00:09:54.710 --> 00:09:59.960
lot of cool graphic stuff.
OSX is always including new,

170
00:10:00.440 --> 00:10:03.290
you know, Coco this and,
and, you know, core that

171
00:10:03.330 --> 00:10:08.120
metal this to make 3d
effects and transparencies and things

172
00:10:08.120 --> 00:10:12.890
possible. So there's still work
happening in native code or

173
00:10:12.890 --> 00:10:15.380
in, in, in native or
managed code. That's not on

174
00:10:15.380 --> 00:10:17.750
the web. Like I don't
think the web has completely

175
00:10:17.750 --> 00:10:21.500
taken over the rendering engine
market, but you're, you're arguing

176
00:10:21.500 --> 00:10:24.950
that it largely has. I
wouldn't say that they're completely

177
00:10:24.950 --> 00:10:27.110
taken over, but I think
that it's way easier. Like

178
00:10:27.110 --> 00:10:31.610
the amount of like results
to effort you get from

179
00:10:31.610 --> 00:10:36.020
the web is, is, is
way more, you get more

180
00:10:36.020 --> 00:10:40.730
for the work you put
in, basically. And when I

181
00:10:41.000 --> 00:10:44.060
have this application, now I've
got a, what kind of

182
00:10:44.060 --> 00:10:46.970
base footprint. I mean, I
was just 20 or 30

183
00:10:46.970 --> 00:10:49.550
megs for hello world because
it includes a lot of,

184
00:10:50.360 --> 00:10:55.460
you know, includes, it includes
chromium includes the chromium files.

185
00:10:55.520 --> 00:10:57.980
What's what's my size on
today. Yeah. So that's one

186
00:10:57.980 --> 00:11:00.830
of the disadvantages is you
get a pretty big app

187
00:11:02.000 --> 00:11:05.390
now. So we use in,
in the Slack desktop application,

188
00:11:05.390 --> 00:11:08.930
we use squirrel for windows,
which is an install technology

189
00:11:08.930 --> 00:11:10.220
that I wrote. And one
of the features of it

190
00:11:10.220 --> 00:11:13.580
is Delta updates. So once
people get on the box,

191
00:11:13.880 --> 00:11:18.050
updates are often really small,
like around 500 K. So

192
00:11:18.050 --> 00:11:19.970
instead of, they don't have
to download this 60 MB

193
00:11:19.970 --> 00:11:22.940
update every single time you
send it down. So the

194
00:11:22.940 --> 00:11:27.650
auto updater that's, this that's
squirrel and that's yours. Yep.

195
00:11:27.860 --> 00:11:30.500
Yeah. And is that like,
kind of like click once

196
00:11:30.860 --> 00:11:32.660
it's a better click once.
So then it's also cross

197
00:11:32.660 --> 00:11:35.390
platform. It's a better click
once it's a click. Once

198
00:11:35.390 --> 00:11:38.390
it's more controllable, you can,
it's just a library. You

199
00:11:38.390 --> 00:11:40.520
can do whatever you want
with it. You can do

200
00:11:40.520 --> 00:11:44.600
things like I want to
test updates. So I'll point

201
00:11:44.630 --> 00:11:46.940
my update server to just
a folder on my computer,

202
00:11:46.940 --> 00:11:48.350
and then I can run
the updates and see what

203
00:11:48.350 --> 00:11:54.340
happens. So it's, it's way
more flexible than click. So

204
00:11:54.340 --> 00:11:57.460
in the auto updater is
something, is that implemented for

205
00:11:57.460 --> 00:12:00.810
windows too? Yeah. Yeah. So
the auto updater is, is

206
00:12:00.930 --> 00:12:03.900
a C sharp, actually a
bunch of C sharp code,

207
00:12:03.900 --> 00:12:08.640
basically. Huh? Okay. So when
you went to Slack, you

208
00:12:08.640 --> 00:12:10.830
guys had to, to make
a decision, like, are, what

209
00:12:10.830 --> 00:12:13.050
are we gonna do? We're
gonna, we're gonna make this

210
00:12:13.050 --> 00:12:15.720
windows application we wanted to
have the best experience ever.

211
00:12:15.990 --> 00:12:18.930
Was there something about the
Slack application or the Slack

212
00:12:18.930 --> 00:12:22.440
way of thinking that said
it's obvious to do this

213
00:12:22.440 --> 00:12:26.250
with web technology? Yeah. So
I think that the Mac

214
00:12:26.250 --> 00:12:30.600
app that previously, already existed
already had used this approach.

215
00:12:30.630 --> 00:12:32.040
And so we kind of
wanted to go to something

216
00:12:32.040 --> 00:12:36.120
similar. And so we had
a few other options on

217
00:12:36.120 --> 00:12:38.130
how to do that. We
could build our own kind

218
00:12:38.130 --> 00:12:41.160
of like web frame and
write the code in C

219
00:12:41.160 --> 00:12:43.080
plus plus the hosting code
and C plus plus we

220
00:12:43.080 --> 00:12:45.660
could write it, you know,
in C sharp with WPF

221
00:12:45.660 --> 00:12:50.580
using something like Steph sharp,
which is a C-sharp component

222
00:12:50.580 --> 00:12:55.950
to embed chromium into a
WPF window. But this one

223
00:12:55.950 --> 00:12:58.800
ended up being like the
easiest one and it's worked

224
00:12:58.800 --> 00:13:01.230
out pretty well. So Do
you think that if a,

225
00:13:01.230 --> 00:13:04.620
if a company has a
whole lot of web technology

226
00:13:04.620 --> 00:13:07.680
already, if they're already deep
into node that just makes

227
00:13:07.680 --> 00:13:10.860
Adam shell even more of
a slam dunk? Yeah, I

228
00:13:10.860 --> 00:13:14.460
think it's, it makes it
really easy, especially because it's

229
00:13:14.460 --> 00:13:17.460
great to share with, with
other people on your team

230
00:13:17.460 --> 00:13:19.680
who are more used to
web technology, because they can

231
00:13:19.680 --> 00:13:22.620
just open up dev tools
and hack around. It's very

232
00:13:22.620 --> 00:13:25.260
familiar. They don't have to
learn anything, this completely new

233
00:13:25.260 --> 00:13:28.410
stack, this new technology, this
new, you know, thing I

234
00:13:28.410 --> 00:13:31.110
can send, I can send
the Slack up to designers

235
00:13:31.110 --> 00:13:32.580
on my team and they
just open it up and

236
00:13:32.580 --> 00:13:36.420
start messing with CSS. And,
and that's cool. So what's

237
00:13:36.420 --> 00:13:38.370
that like? So you said
dev tools, I assume that

238
00:13:38.370 --> 00:13:41.760
means Chrome dev tools have
12 tools. Yep. You use

239
00:13:41.760 --> 00:13:43.380
zip this up and you
send it to me. I'm

240
00:13:43.380 --> 00:13:46.590
a designer. I just open
up that folder and supply

241
00:13:46.590 --> 00:13:49.410
him or my text editor
of choice. And do I

242
00:13:49.410 --> 00:13:54.120
just somehow hit refresh on
the actual native windows app

243
00:13:54.690 --> 00:13:58.170
and it reloads what I'm
doing. We've got a one

244
00:13:58.170 --> 00:14:00.420
even better actually. So we
have this in our, in

245
00:14:00.420 --> 00:14:03.210
our dev mode, we have
a tool that will actually,

246
00:14:04.170 --> 00:14:06.390
it's a script you want
run called script slash run.

247
00:14:06.900 --> 00:14:09.530
And what it does is
that it enables a live

248
00:14:09.540 --> 00:14:12.450
reload in our desktop app.
So they'll be editing the

249
00:14:12.450 --> 00:14:17.190
hit, save the app automatically
knows restarts it. And so

250
00:14:17.190 --> 00:14:20.610
your, your iteration loop for
doing work on Adam shell

251
00:14:20.610 --> 00:14:23.850
ops is really, really short,
which is really great. Wow.

252
00:14:24.120 --> 00:14:27.690
Okay. So to make, to
put this in the context

253
00:14:27.690 --> 00:14:29.790
though, cause I know I
keep pushing on the it's

254
00:14:29.790 --> 00:14:33.240
Chrome and a shell though.
It's it's the full, your

255
00:14:33.240 --> 00:14:35.820
full support on the native
platform you're on. So if

256
00:14:35.820 --> 00:14:37.920
I want to do windows
specific stuff, I can still

257
00:14:37.920 --> 00:14:40.560
do that. Right? Yeah. So
one of the cool things

258
00:14:40.560 --> 00:14:44.130
about using Adam shell is
that you can pull in

259
00:14:44.160 --> 00:14:48.720
no JS modules like any
NPM module, including ones that

260
00:14:48.720 --> 00:14:52.520
have native code. So NPM
are usually written in Java

261
00:14:52.520 --> 00:14:55.760
script. Sometimes it can be
written in C plus plus,

262
00:14:56.600 --> 00:14:59.330
and that C plus plus
code can do whatever any

263
00:14:59.330 --> 00:15:02.000
other C plus plus code
could do. And so including

264
00:15:02.000 --> 00:15:05.090
those modules are, and there's
a bunch of useful modules

265
00:15:05.570 --> 00:15:08.030
that have already been built
for Adam show. So you

266
00:15:08.030 --> 00:15:11.330
can like, for example, we
use one that pulls in

267
00:15:11.360 --> 00:15:14.270
the native spellchecker in the
U S so like you

268
00:15:14.270 --> 00:15:17.810
can, you can integrate that
module and it's for your,

269
00:15:17.870 --> 00:15:21.110
from your perspective, it's just
JavaScript, but it's written in

270
00:15:21.110 --> 00:15:22.670
C plus plus, and they've
done a bunch of stuff

271
00:15:22.670 --> 00:15:26.120
too, to bind native code.
And so connecting your own

272
00:15:26.120 --> 00:15:29.810
native code is a little
bit of work, but can

273
00:15:29.810 --> 00:15:34.180
be definitely done. And it's
not too hard. Hey, this

274
00:15:34.180 --> 00:15:36.550
is Scott. You know, I
like a good community edition.

275
00:15:36.910 --> 00:15:39.190
The best things in life
are free. And the community

276
00:15:39.190 --> 00:15:42.940
license from our sponsors sync
fusion will give individual and

277
00:15:42.940 --> 00:15:47.140
small business developers access to
more than 650 components across

278
00:15:47.140 --> 00:15:51.280
12 platforms. And that includes
WPF and windows forms, JavaScript,

279
00:15:51.280 --> 00:15:54.340
Xamarin, Lightswitch, you can check
it all out. It's sync,

280
00:15:54.370 --> 00:16:02.410
fusion.com/hanselman to claim your free
license. No, that's really interesting

281
00:16:02.410 --> 00:16:06.280
because I could see the
doing this the wrong way

282
00:16:06.730 --> 00:16:09.700
would be, you know, when
I right click, I get

283
00:16:09.700 --> 00:16:13.270
a menu that doesn't quite
look native. And as a

284
00:16:13.270 --> 00:16:16.840
reimplementation of a spellchecker, when
I've got a perfectly good

285
00:16:16.840 --> 00:16:20.140
one sitting right here already,
it's kind of what we

286
00:16:20.140 --> 00:16:22.720
did in, in Java. We
spent, I spent a lot

287
00:16:22.720 --> 00:16:25.210
of time working in Java
in the mid nineties, late

288
00:16:25.210 --> 00:16:29.260
nineties. And we were constantly
trying to make it look

289
00:16:29.260 --> 00:16:31.840
native because it was simply
not possible to make it

290
00:16:31.840 --> 00:16:34.420
look native. You know, it
was like that, that right

291
00:16:34.420 --> 00:16:36.880
click menu doesn't look right.
Well it's cause it's a

292
00:16:36.880 --> 00:16:41.020
fake right click menu. We,
we drew that. That's a

293
00:16:41.020 --> 00:16:45.280
lie. You're basically saying use
web stuff or what the

294
00:16:45.280 --> 00:16:47.530
web stuff is good at
and then use native stuff

295
00:16:47.530 --> 00:16:50.770
with native stuff. Yeah, exactly.
Or being able to pull

296
00:16:50.770 --> 00:16:54.730
in like kind of platform
APIs as well, like kind

297
00:16:54.730 --> 00:16:56.350
of back end things that
you'd want to do on

298
00:16:56.350 --> 00:17:00.460
desktop applications. Like put things,
putting elements in the notification

299
00:17:00.460 --> 00:17:03.640
tray. Like you can put
things in there and that's

300
00:17:03.640 --> 00:17:06.790
using C plus plus code
stuff like that. And believe

301
00:17:06.790 --> 00:17:11.080
it, Balloon toast notifications on
windows, but grunt on, On

302
00:17:11.080 --> 00:17:14.350
Mac. Exactly. Yeah. Is it,
is that what the notification

303
00:17:14.350 --> 00:17:17.200
systems call? I think it
was called growl growl. Pardon

304
00:17:17.200 --> 00:17:20.950
me? See grant go. Gulp
gal. Nobody can keep track.

305
00:17:21.090 --> 00:17:24.880
I can't, who knows? One
thing though, that I noticed

306
00:17:24.880 --> 00:17:28.960
though, is that native node
modules are supported, but why

307
00:17:28.960 --> 00:17:31.600
is Adam shell using a
different version of VA, the

308
00:17:31.600 --> 00:17:36.340
JavaScript engine than official note?
So Adam shall always uses

309
00:17:36.340 --> 00:17:40.270
the VA that is bundled
with Chrome, which means that

310
00:17:40.270 --> 00:17:43.000
the, the version of node
you run in in Adam

311
00:17:43.000 --> 00:17:45.610
shell is a little bit
weird. It's patched a little

312
00:17:45.610 --> 00:17:49.320
bit to make it compatible
with the version of VA.

313
00:17:49.920 --> 00:17:53.370
The version of V8 that
node JS proper uses is

314
00:17:53.370 --> 00:17:56.880
pretty out of date actually.
And so basically the fork

315
00:17:56.880 --> 00:17:59.880
of the fork of no
JS IO dot JS is

316
00:17:59.880 --> 00:18:02.010
trying to fix that and
come up to the latest

317
00:18:02.040 --> 00:18:05.520
official versions of VA. Is
that why that happened? Yep.

318
00:18:05.610 --> 00:18:09.330
Well, one of the reasons
it's, it's, it's complicated PM.

319
00:18:10.010 --> 00:18:12.560
It is complicated, but that's
interesting though. So you're saying

320
00:18:12.560 --> 00:18:15.980
that the relationship, not the,
not the interpersonal relationship, but

321
00:18:15.980 --> 00:18:21.350
the technical relationship between Chrome,
the browser and V8, the

322
00:18:21.350 --> 00:18:25.730
JavaScript virtual machine is architected
in such a way that

323
00:18:25.790 --> 00:18:28.910
it's not optimal. And some
people feel strongly about that,

324
00:18:29.330 --> 00:18:33.380
that, that way. Yeah. Yeah.
And I mean, for the

325
00:18:33.380 --> 00:18:37.640
applications that node node uses,
it's not super important to

326
00:18:37.640 --> 00:18:40.310
keep it, you know, the
very, very latest version. Sure.

327
00:18:40.880 --> 00:18:44.210
In future versions of Adam
shell is actually switching to

328
00:18:44.210 --> 00:18:47.510
IO JS, which means that
they'll both track. Both of

329
00:18:47.510 --> 00:18:52.100
these projects will track the
latest VA public VA version.

330
00:18:52.640 --> 00:18:54.650
That's a whole, we should
probably have a whole other

331
00:18:54.650 --> 00:18:57.890
podcast on that because that's
very interesting by making that

332
00:18:57.890 --> 00:19:02.990
decision. It, it cements IO
dot, JS as a thing

333
00:19:02.990 --> 00:19:05.360
that will be around for
awhile, but it also makes

334
00:19:05.360 --> 00:19:07.910
a very strong technical declaration
of we think it should

335
00:19:07.910 --> 00:19:10.760
be done this way. Yeah,
I think so. I think

336
00:19:10.760 --> 00:19:12.110
it's, I think it's a
little bit more just to

337
00:19:12.110 --> 00:19:16.400
keep up with the latest,
latest stuff. Well, you would

338
00:19:16.400 --> 00:19:18.650
want the latest stuff. If
you have an auto updating

339
00:19:19.070 --> 00:19:21.890
high-tech, you know, windows, desktop
app, you want it to

340
00:19:21.890 --> 00:19:25.130
be using whatever the best
thing that's available is. Yeah,

341
00:19:25.190 --> 00:19:27.560
exactly. So the reason that
I brought that up though,

342
00:19:27.560 --> 00:19:29.870
is that that Adam shell
uses a different VA version

343
00:19:29.870 --> 00:19:33.410
is that there's a thing
called APM rather than NPM.

344
00:19:33.440 --> 00:19:37.190
Can you explain that? Sure.
So, so APM is for

345
00:19:37.190 --> 00:19:44.270
Adam, the Adam, the, the
text editor and APM is

346
00:19:44.270 --> 00:19:50.990
a way to install your,
your text editor plugins. That's

347
00:19:50.990 --> 00:19:52.970
a little bit different from
NPM because they, they use

348
00:19:52.970 --> 00:19:55.130
a different registry. Cause it
wouldn't, wouldn't make sense to

349
00:19:55.130 --> 00:19:59.030
put like a, my cool
Adam UI theme in the

350
00:19:59.030 --> 00:20:02.420
NPM registry. You know, that
makes sense. And it also

351
00:20:02.420 --> 00:20:05.360
does something that is a
little bit like obscure, but

352
00:20:05.750 --> 00:20:09.230
so when you build NPM
modules, it's built against your,

353
00:20:09.500 --> 00:20:12.920
against your system, no JS,
and we need to rebuild

354
00:20:12.920 --> 00:20:17.720
it against Adam shells, no
JS and APM handles that.

355
00:20:17.720 --> 00:20:21.680
But actually in, in newer
versions of Adam's show, we

356
00:20:21.680 --> 00:20:24.500
want to get away from
APM. You having to use

357
00:20:24.500 --> 00:20:27.950
APM for anything. APM should
just be for Adam the

358
00:20:27.950 --> 00:20:30.020
text editor. Yeah. When I
saw that, it was like,

359
00:20:30.020 --> 00:20:32.690
gosh, I felt like I
was being taken farther and

360
00:20:32.690 --> 00:20:37.520
farther away from the ecosystem
that has the most support,

361
00:20:38.360 --> 00:20:41.900
you know, like when there's
a parallel package manager and

362
00:20:41.900 --> 00:20:44.090
a parallel version of VA
and a parallel, this, it

363
00:20:44.090 --> 00:20:46.160
makes me wonder like, gosh,
if I'm going to bet

364
00:20:46.160 --> 00:20:48.850
my company on like Adam
shell or at least bet

365
00:20:48.850 --> 00:20:52.960
my app on it, all
of these different interdependent pieces

366
00:20:52.960 --> 00:20:55.330
and another package manager are
those things that I want

367
00:20:55.330 --> 00:20:56.740
to have to worry about.
Cause they could go away

368
00:20:56.740 --> 00:21:01.890
someday. Yeah. Yeah. So, so
Adam shell, the desktop technology

369
00:21:01.890 --> 00:21:05.160
doesn't use a PMs package
or industry at all. It

370
00:21:05.160 --> 00:21:07.830
uses NPM just like everyone
else in no JS world.

371
00:21:10.260 --> 00:21:14.550
The only thing it uses
one command to rebuild it

372
00:21:14.550 --> 00:21:19.320
used to now it doesn't.
Okay. So Adam shell doesn't

373
00:21:19.350 --> 00:21:23.760
use APM for native node
modules. Yeah. It now will

374
00:21:23.760 --> 00:21:27.390
use its own its own
build process. And in fact,

375
00:21:28.200 --> 00:21:30.190
one of the projects that
I work on that I

376
00:21:30.250 --> 00:21:33.900
kind of, when I, when
I started this Adam shell

377
00:21:33.900 --> 00:21:36.870
wasn't particularly suited for building
things that weren't Adam, the

378
00:21:36.870 --> 00:21:41.220
text editor. And so I
took, I took the Adam

379
00:21:41.230 --> 00:21:44.670
source code and forked it
and, and retooled it a

380
00:21:44.670 --> 00:21:46.830
little bit so that it
makes it way easier to

381
00:21:47.160 --> 00:21:50.550
start your own projects that
are kind of production quality

382
00:21:50.550 --> 00:21:52.080
in the sense that like
it does all the build

383
00:21:52.080 --> 00:21:54.180
stuff for you. It like
we'll set a nice icon.

384
00:21:54.180 --> 00:21:56.550
It'll set the like, you
know, on an executable, you

385
00:21:56.550 --> 00:21:58.470
gotta set the, you know,
file version info and stuff

386
00:21:58.470 --> 00:22:02.010
like that. And I call
this project it's Adam slash

387
00:22:02.130 --> 00:22:06.060
Adam shell starter. So it's
like a starting project to

388
00:22:06.060 --> 00:22:10.140
get people going really quickly
with Adam shell. But is

389
00:22:10.140 --> 00:22:13.230
that something, is that a
Paul bets production or is

390
00:22:13.230 --> 00:22:15.900
that an Adam production? That's
on the Adam repo. I'm

391
00:22:15.900 --> 00:22:17.820
the one who did it.
We have a bunch of

392
00:22:17.820 --> 00:22:21.210
contributors. The Adam, the Adam
team is really excited to

393
00:22:21.330 --> 00:22:24.510
see that be successful. So
they've been sending PRS to

394
00:22:24.510 --> 00:22:28.440
it as well. And, but
the reason I brought it

395
00:22:28.440 --> 00:22:31.380
up going back is that
it handles all this rebuilding

396
00:22:31.980 --> 00:22:34.050
native module stuff for you.
Like you don't have to

397
00:22:34.050 --> 00:22:36.960
think about it. Like it
just, it just, it just

398
00:22:36.960 --> 00:22:39.480
does it. So you just,
you just say NPM install

399
00:22:39.720 --> 00:22:43.590
Michael module and you run
the build and then it

400
00:22:43.740 --> 00:22:46.350
everything's done for you. Okay,
good. Now you said that

401
00:22:46.350 --> 00:22:51.060
it is, it is a
fee. It's a, it's a,

402
00:22:51.090 --> 00:22:53.700
it's a, I took all
the build stuff from Adam,

403
00:22:53.700 --> 00:22:55.800
the text editor and kind
of like cleaned it up.

404
00:22:56.190 --> 00:22:58.590
Oh, I see. So you
kind of combined two things.

405
00:22:58.890 --> 00:23:01.260
Yeah. So you don't have
to, you don't have to,

406
00:23:02.490 --> 00:23:05.280
you can rename the app
and set, you know, your

407
00:23:05.280 --> 00:23:08.190
own names and stuff like
that. And it doesn't, hard-code

408
00:23:08.190 --> 00:23:11.760
the word Adam everywhere basically.
So Adam shells starter is

409
00:23:11.790 --> 00:23:14.160
the file new project. It's
the place to start from

410
00:23:14.460 --> 00:23:17.700
basically. Yeah. And really people
absolutely should start from here.

411
00:23:17.730 --> 00:23:20.910
Would you say there's no
reason not to, And especially

412
00:23:20.910 --> 00:23:23.910
because it has that script
run, that makes it really

413
00:23:23.910 --> 00:23:27.720
easy to like, like run
the app iterate and make

414
00:23:27.720 --> 00:23:31.680
a change, run the app,
make a change. Now when

415
00:23:31.680 --> 00:23:34.980
I'm on a, on a
windows application, I think about

416
00:23:34.980 --> 00:23:37.830
the background threads and the
threads that don't have a

417
00:23:37.830 --> 00:23:40.680
UI relationship. And then I
think about the threads that

418
00:23:40.680 --> 00:23:42.240
are in the UI. And
I always have to think

419
00:23:42.240 --> 00:23:45.860
about jumping between those contexts.
Does Adam have a similar

420
00:23:45.860 --> 00:23:50.080
concept? Yeah. So every window
has its own just like

421
00:23:50.080 --> 00:23:55.810
Adam or Chrome rather has
multiple processes. Adam shell has

422
00:23:55.810 --> 00:23:58.450
multiple processes. So your app
will start off with the

423
00:23:58.450 --> 00:24:01.270
browser process with CA it's.
They have very confusing names.

424
00:24:01.300 --> 00:24:03.430
So they, the initial, no
JS will run loop that

425
00:24:03.430 --> 00:24:06.940
you start off with is
called the browser process. So

426
00:24:06.940 --> 00:24:08.620
the thing that is not
a browser is the browser

427
00:24:08.620 --> 00:24:10.630
context. Exactly. The thing that
doesn't have a Dom is

428
00:24:10.630 --> 00:24:15.640
called the browser process. It
makes total sense. And so

429
00:24:15.790 --> 00:24:18.970
every window that you create
will have its own process

430
00:24:18.970 --> 00:24:21.970
and that's called a render
process. And so the browser

431
00:24:21.970 --> 00:24:23.560
process is something you want
to do as little as

432
00:24:23.560 --> 00:24:26.830
possible. And basically like you
just want to immediately open

433
00:24:26.830 --> 00:24:28.720
a window cause you don't,
you don't have Chrome dev

434
00:24:28.720 --> 00:24:30.790
tools in the browser process.
You just have a no

435
00:24:30.790 --> 00:24:33.520
JS run loop that has
very, it's very, it's much

436
00:24:33.520 --> 00:24:36.310
more tricky to bug. So
you don't want to do

437
00:24:36.310 --> 00:24:38.170
much there. You basically just
want to open a browser

438
00:24:38.170 --> 00:24:40.990
window immediately where you can
actually do stuff and see

439
00:24:41.380 --> 00:24:44.800
the render process, which is
your, your, your Chrome. You've

440
00:24:44.800 --> 00:24:46.870
got the Dom you got,
you've got dev tools. You've

441
00:24:46.870 --> 00:24:49.930
got all this stuff. Okay.
So then that means that

442
00:24:49.930 --> 00:24:52.780
your code should probably be
in the rendering context, what

443
00:24:52.780 --> 00:24:55.660
I would think of as
the browser. Yeah, exactly. And

444
00:24:55.660 --> 00:24:57.430
so there are tools, there
are a bunch of APIs

445
00:24:57.430 --> 00:25:00.790
to talk between them. So
certain API APIs are only

446
00:25:00.790 --> 00:25:05.290
available in the browser browser
process. What's an example. Why

447
00:25:05.290 --> 00:25:06.430
would I ever want to
be there? It sounds like

448
00:25:06.430 --> 00:25:09.940
you're saying I should never
go there. So an example

449
00:25:09.940 --> 00:25:14.440
is, Let me think about
that. Like, what's something that

450
00:25:14.440 --> 00:25:17.080
I would just, I can't,
you know, like Creating other

451
00:25:17.080 --> 00:25:19.450
windows is, is in the
browser process. Okay. So it's

452
00:25:19.450 --> 00:25:23.360
almost like your, your main,
like yeah. I mean, it's

453
00:25:23.410 --> 00:25:25.300
the place you used to
just jump off. You're not

454
00:25:25.300 --> 00:25:28.030
gonna spend a lot of
time there. Yeah, exactly, exactly.

455
00:25:28.330 --> 00:25:31.000
Okay. What are some great
applications that have been written

456
00:25:31.000 --> 00:25:37.420
in Adam shell? There is
a group of, what's it

457
00:25:37.420 --> 00:25:41.170
called? Mapbox. Mapbox is writing
their, their main desktop application

458
00:25:41.260 --> 00:25:45.910
in Adam shell. They're a,
they're a startup around creating

459
00:25:45.910 --> 00:25:51.250
maps. Yeah. They're open source
design and data Mapbox JS.

460
00:25:51.250 --> 00:25:56.080
Yeah. Yeah. Who else? We're
writing our, I think slacks

461
00:25:56.080 --> 00:25:58.330
when Slack releases their windows
application, we will be the

462
00:25:58.330 --> 00:26:03.910
biggest Adam shell application, even
bigger than Adam. So Really,

463
00:26:03.910 --> 00:26:07.270
so this is really kind
of a burgeoning thing. This

464
00:26:07.270 --> 00:26:09.520
isn't something for people who
are listening, this isn't something

465
00:26:09.520 --> 00:26:12.490
that necessarily snuck up on
them and they've never heard

466
00:26:12.490 --> 00:26:14.530
of it and it's taken
over the world, but this

467
00:26:14.530 --> 00:26:16.540
is the beginning of something
that could potentially be very

468
00:26:16.540 --> 00:26:19.930
bad. Yeah. It's a, it's
has a lot of potential.

469
00:26:19.930 --> 00:26:22.930
I'm really excited about it.
Is there a Slack Mac

470
00:26:22.990 --> 00:26:25.540
app and Linux app, or
are you making all three,

471
00:26:26.320 --> 00:26:30.520
The Mac app? We already
have a Mac app that

472
00:26:30.520 --> 00:26:35.680
was previously written using different
technology. We have, we actually

473
00:26:35.680 --> 00:26:40.300
build the Slack windows app
on all three platforms just

474
00:26:40.300 --> 00:26:44.070
in case it, well, you
know, like in contact when

475
00:26:44.070 --> 00:26:46.140
they have the second time
machine, just in case, you

476
00:26:46.140 --> 00:26:47.730
know, they find it in
Japan. It's kind of the

477
00:26:47.730 --> 00:26:51.380
same thing. Very nice reference
there. For those of you

478
00:26:51.380 --> 00:26:54.130
who did not see the
movie contact. Well, you know,

479
00:26:54.220 --> 00:26:56.570
it's a big sprinkler Alert
here now. 10 years later.

480
00:26:56.630 --> 00:26:58.430
Yeah. So those of you
who were not around in

481
00:26:58.430 --> 00:27:01.340
the early two thousands, watching
that Jodi foster movie, there's

482
00:27:01.340 --> 00:27:06.530
a second time machine, so
Yep. Yeah. Spoiler alert. We,

483
00:27:06.530 --> 00:27:10.310
yeah, because the Mac app
for us is because we

484
00:27:10.310 --> 00:27:12.320
have to do one show,
other Mac stuff in the

485
00:27:12.320 --> 00:27:15.260
company. We it's way easier
to develop on, on Mac

486
00:27:15.260 --> 00:27:16.730
for us just because we
don't have to boot new

487
00:27:16.730 --> 00:27:20.300
VM and stuff. So we
develop our windows app on

488
00:27:20.300 --> 00:27:22.820
Mac and we also have
the windows after it runs

489
00:27:22.820 --> 00:27:26.510
on Mac. And it also
runs on Linux too, But

490
00:27:26.510 --> 00:27:28.370
you must have some native
module stuff. So is there

491
00:27:28.370 --> 00:27:31.550
something that you're doing that
works only on windows because

492
00:27:31.880 --> 00:27:35.900
that's your target? We have
a few, a very few

493
00:27:35.900 --> 00:27:39.110
if deaths like around the
notification tray, like we just

494
00:27:39.110 --> 00:27:42.860
don't show it. If it's
on non windows or, or

495
00:27:42.860 --> 00:27:46.070
updating framework is different on
different platforms on Mac, on

496
00:27:46.070 --> 00:27:49.910
Mac, we'll use the builtin
auto updater and on windows,

497
00:27:49.910 --> 00:27:53.270
we'll use squirrel for windows.
So we have to do

498
00:27:53.270 --> 00:27:56.270
a few if desperate, very
few, actually like, like a

499
00:27:56.270 --> 00:27:58.040
lot of things are handled
for us, which is really

500
00:27:58.040 --> 00:28:01.220
nice. When I do testing
of web apps, I've always

501
00:28:01.220 --> 00:28:05.390
been a fan of selenium
and using WebDriver. Can I

502
00:28:05.390 --> 00:28:08.600
use something like selenium to
test an Adam shell app?

503
00:28:09.560 --> 00:28:12.830
Yeah, definitely. So we have,
we have unit tests that

504
00:28:12.860 --> 00:28:17.780
we use Jasmine and a
script that we'll just launch

505
00:28:17.780 --> 00:28:20.990
the app in a special
mode. So it'll just know

506
00:28:20.990 --> 00:28:23.180
that it's in test mode
and it'll launch a, you

507
00:28:23.180 --> 00:28:25.490
know, a window with and
run, run all the specs

508
00:28:25.490 --> 00:28:28.340
and then immediately quit. And
since you have control of,

509
00:28:28.430 --> 00:28:31.760
of the browser itself and
like the entire app, you

510
00:28:31.760 --> 00:28:33.350
can just make it say
like, Oh, I have test

511
00:28:33.350 --> 00:28:34.940
mode. And like I'll just
launch the app and run

512
00:28:34.940 --> 00:28:36.860
all the tests and stuff
like that next time. So

513
00:28:36.860 --> 00:28:40.010
you can use all kinds
of web testing technologies. We

514
00:28:40.010 --> 00:28:42.440
picked Jasmine because it was
kind of Adam, the text

515
00:28:42.440 --> 00:28:44.960
editor picked Jasmine and works
really well for us. So

516
00:28:46.040 --> 00:28:48.170
What does the app do
if there's, if I'm in

517
00:28:48.170 --> 00:28:50.420
airplane mode, if I'm on
an airplane, cause you know,

518
00:28:50.420 --> 00:28:53.090
Slack is a service in
the cloud, but at the

519
00:28:53.090 --> 00:28:55.070
same time it's an offline
app. It should do something

520
00:28:55.070 --> 00:29:00.020
offline Right now. It does.
It just tells you you're

521
00:29:00.020 --> 00:29:02.930
offline, which is unfortunate. What
do you think it should

522
00:29:02.930 --> 00:29:05.900
do? And what would an
Adam shell app do if

523
00:29:05.900 --> 00:29:07.850
it's offline? I mean, Adam,
the editor works fine offline.

524
00:29:08.360 --> 00:29:12.140
Yeah. So most, most Adam
shell apps are not going

525
00:29:12.140 --> 00:29:15.680
to be a frame for
web content. So we're, we're

526
00:29:15.680 --> 00:29:19.730
kind of a, a unique
Adam shell app. Your Adam

527
00:29:19.730 --> 00:29:21.590
shell up that you would
write would definitely work offline

528
00:29:21.590 --> 00:29:24.110
and would just do all
the same things that Adam,

529
00:29:24.110 --> 00:29:26.000
the texted her were like
in, in terms of like

530
00:29:26.000 --> 00:29:29.000
offline support and stuff. So
to make sure I put

531
00:29:29.000 --> 00:29:32.150
something in the context, let's,
let's say that I have,

532
00:29:32.180 --> 00:29:34.820
I want to write an
application. That's I'm gonna work

533
00:29:34.820 --> 00:29:37.490
offline. It'll be written in
Adam shell and it's going

534
00:29:37.490 --> 00:29:40.460
to be like a, I'm
a poll taker, right. I'm

535
00:29:40.460 --> 00:29:42.550
sitting there with tablet and
I'm going to have a

536
00:29:42.550 --> 00:29:45.220
form and I'm going to
hit submit when I hit

537
00:29:45.220 --> 00:29:49.030
submit in this and this
web applique, this web Adam

538
00:29:49.030 --> 00:29:52.300
shell application, I'm not on
the internet. Where would the

539
00:29:52.300 --> 00:29:55.030
data go? Does it get
posted back to a little

540
00:29:55.030 --> 00:29:57.670
listener or am I catching
it in the client side

541
00:29:57.670 --> 00:29:59.380
and putting in a database?
How does that work? Is

542
00:29:59.380 --> 00:30:02.700
this an entirely client side
world? It's an entire client

543
00:30:02.700 --> 00:30:05.880
side world. So you could,
you could handle that air

544
00:30:05.970 --> 00:30:08.310
and stuff into local storage.
So you get all the,

545
00:30:08.310 --> 00:30:12.690
all the web local storage
technologies. Adam shell actually removes

546
00:30:12.690 --> 00:30:14.790
all the limits on them.
So you can, you're not

547
00:30:14.790 --> 00:30:16.920
limited to like five MB
of data on local storage.

548
00:30:16.920 --> 00:30:21.630
Like you normally are, or
you can do things what's

549
00:30:21.630 --> 00:30:25.200
really exciting is in Chrome
40, which is the one

550
00:30:25.200 --> 00:30:27.960
that just got released last
night, actually in Adam shell,

551
00:30:29.490 --> 00:30:32.190
you have service workers. And
so service workers are this

552
00:30:32.190 --> 00:30:35.940
really interesting technology that's coming
up in Chrome that basically

553
00:30:35.940 --> 00:30:41.580
allows you to override how
the browser handles network requests.

554
00:30:42.240 --> 00:30:44.040
And so you can say
like, Oh, if this failed,

555
00:30:44.070 --> 00:30:46.530
like this network request failed,
then please give it this

556
00:30:46.530 --> 00:30:48.780
other content instead, like, forget
about it and give me

557
00:30:48.780 --> 00:30:51.330
this other thing. Or you
can say like, Oh, I

558
00:30:51.330 --> 00:30:53.850
would like, I would like
to, I for this request,

559
00:30:53.850 --> 00:30:56.220
I want to do the
caching and have custom behavior.

560
00:30:58.080 --> 00:31:01.170
Oh, okay. So I can
go and say, you know,

561
00:31:01.200 --> 00:31:03.900
grab this if you can,
but if not, I'll be

562
00:31:03.900 --> 00:31:07.650
handling it this way. Exactly.
This is the fetch API.

563
00:31:08.340 --> 00:31:13.020
Yeah, exactly. It's the fetch
API. Hmm. Interesting. Okay. And

564
00:31:13.050 --> 00:31:15.810
theoretically, this could add a
whole level of sophistication to

565
00:31:15.810 --> 00:31:18.000
web applications that want to
take advantage of it and

566
00:31:18.000 --> 00:31:21.360
also the, the cache API,
because it puts you in

567
00:31:21.360 --> 00:31:26.160
programmatic control of exactly. What's
getting, getting shoved into the,

568
00:31:26.550 --> 00:31:30.180
into the Dom eventually. Exactly.
And Adam shell, it's especially

569
00:31:30.180 --> 00:31:34.500
interesting because in, in normal
Chrome, that cash and fetch

570
00:31:34.920 --> 00:31:37.710
context is, is pretty limited.
You can, you can access,

571
00:31:37.890 --> 00:31:40.080
you know, a bunch of
stuff, but an Adam shell

572
00:31:40.080 --> 00:31:41.660
and you can access anything
you want here right here.

573
00:31:41.760 --> 00:31:44.280
A desktop app And service
workers is pretty new. This

574
00:31:44.280 --> 00:31:47.190
is November of last year
that the W3C did a

575
00:31:47.190 --> 00:31:50.040
working draft on that. So
it is a standard though.

576
00:31:50.040 --> 00:31:54.060
So it should happen everywhere
eventually. Yup. Yup. Very cool.

577
00:31:54.090 --> 00:31:56.010
Well, thanks so much folks.
And check this out at

578
00:31:56.040 --> 00:32:02.010
github.com/adam/adam-shell, right? Yep. Adam shell
is the, is the, is

579
00:32:02.010 --> 00:32:04.380
the project for the source
code and Adam dash shell

580
00:32:04.410 --> 00:32:06.810
dash starter is the, is
the kind of starting project

581
00:32:06.810 --> 00:32:09.360
that I wrote. And then
what's the other project that

582
00:32:09.360 --> 00:32:11.340
you're known for that we
had you on the show

583
00:32:11.340 --> 00:32:14.910
a number of years for,
Yeah. So I've written a

584
00:32:14.910 --> 00:32:18.900
lot of projects, C sharp
projects. My biggest one is

585
00:32:18.900 --> 00:32:22.470
this project called reactive UI.
And so that is a

586
00:32:22.500 --> 00:32:28.410
MVVM framework that integrates the
reactive extensions for.net. Yup. And

587
00:32:28.410 --> 00:32:31.980
you can check that out@reactiveui.net.
You've got a shiny new

588
00:32:32.010 --> 00:32:34.500
website for that. Yeah, yeah.
That was contributed by a,

589
00:32:34.530 --> 00:32:37.050
by an external contributor. You
did. Okay. It's a really

590
00:32:37.050 --> 00:32:39.200
lovely thing. And you continue
to do great things for

591
00:32:39.200 --> 00:32:42.740
the community, Paul and we
Appreciate you. Yeah. Thanks. This

592
00:32:42.740 --> 00:32:45.440
has been another episode of
Hanselminutes and we'll see you

593
00:32:45.440 --> 00:32:46.280
again next week.

