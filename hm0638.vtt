WEBVTT FILE

1
00:00:00.660 --> 00:00:02.520
Hey friends, we have a
new sponsor today, and I

2
00:00:02.520 --> 00:00:04.680
want to make sure that
you support them because they

3
00:00:04.680 --> 00:00:09.600
make Hansel minutes possible. Raven
DB, it's a document database

4
00:00:09.600 --> 00:00:14.130
that's non-relational and fully transactional.
It's available for windows and

5
00:00:14.130 --> 00:00:18.930
Linux with official client API
APIs for.net. The JVM go

6
00:00:18.930 --> 00:00:22.770
Ruby, no JS and Python.
Raven DB is designed for

7
00:00:22.770 --> 00:00:26.370
high performance handling tens of
thousands of requests. Even on

8
00:00:26.370 --> 00:00:29.730
a single node. Raven DB
is capable of on the

9
00:00:29.730 --> 00:00:34.230
fly optimization, dynamic indexes, and
much more. It has a

10
00:00:34.230 --> 00:00:37.080
fully loaded gooey, which means
it's simpler to operate and

11
00:00:37.080 --> 00:00:39.990
you don't need, you know,
arcane incantations on the command

12
00:00:39.990 --> 00:00:43.320
line. It just works. It's
fast and it's right. Download

13
00:00:43.320 --> 00:00:49.050
your free community edition@ravendb.net. That's
R a V E N

14
00:00:49.380 --> 00:01:06.350
db.net. I hope you check
it out. <inaudible> Hi, this

15
00:01:06.350 --> 00:01:08.690
is Scott Hanselman. This is
another episode of Hansel minutes.

16
00:01:08.690 --> 00:01:11.810
And today I'm talking with
Patricia OSS. She's a C

17
00:01:11.810 --> 00:01:14.540
plus plus programmer, and she's
working at Vivaldi on the

18
00:01:14.540 --> 00:01:17.720
Vivaldi browser. How are you?
I'm good now. I'm good.

19
00:01:17.750 --> 00:01:20.540
Thank you. How are you?
I'm feeling pretty good. I

20
00:01:20.540 --> 00:01:23.060
appreciate you. You're up early
and I'm up late. Cause

21
00:01:23.060 --> 00:01:25.700
we're making our time zones
work and thanks for doing

22
00:01:25.700 --> 00:01:28.130
that. Yeah, you too. This
is really late for you.

23
00:01:28.940 --> 00:01:30.830
It is a little late,
but it's all good because

24
00:01:30.830 --> 00:01:35.270
we're talking about technology and
I'm actually running the Vivaldi

25
00:01:35.270 --> 00:01:38.570
browser. I discovered this a
couple of weeks ago and

26
00:01:38.570 --> 00:01:40.700
it's kind of like making
the rounds. People are talking

27
00:01:40.700 --> 00:01:42.860
about it because it kind
of feels like we're in

28
00:01:42.860 --> 00:01:47.660
a browser monoculture right now.
Doesn't it? Yeah. Yeah. I

29
00:01:47.660 --> 00:01:51.170
think, I think we, like,
I used to work in

30
00:01:51.200 --> 00:01:57.350
opera in around 2005, 2009.
And, and back then you

31
00:01:57.350 --> 00:02:01.190
had more, the browsers would
more different. Like they were

32
00:02:01.220 --> 00:02:05.270
more distinct from each other,
but as we, like, as

33
00:02:05.270 --> 00:02:07.160
we progress that they have
become more and more the

34
00:02:07.160 --> 00:02:11.180
same. So it's often very
difficult to notice which browser

35
00:02:11.180 --> 00:02:15.200
you running because they're practically
identical. Yeah. It's funny that

36
00:02:15.200 --> 00:02:17.780
you mentioned that like, even
though like the tabs are

37
00:02:17.780 --> 00:02:21.230
different shape or whatever, you'll
find yourself in, in, you

38
00:02:21.230 --> 00:02:24.230
know, edge or Chrome and
I'll completely forget, like as

39
00:02:24.230 --> 00:02:26.960
long as the website works,
I forget what browser I'm

40
00:02:26.960 --> 00:02:28.850
in, but then as soon
as something weird happens, then

41
00:02:28.850 --> 00:02:33.740
I blame the browser for
whatever. Well, it becomes like

42
00:02:33.740 --> 00:02:35.780
you have to actually look
for the icon to remember

43
00:02:35.780 --> 00:02:37.850
where you are. It's like,
Oh, Oh, okay. Yeah, I'm

44
00:02:37.850 --> 00:02:42.800
a Firefox now. Well, Vivaldi,
is it, is it spiritually

45
00:02:42.830 --> 00:02:45.470
opera? But it's using chromium
as its rendering engine. Cause

46
00:02:45.470 --> 00:02:49.040
it feels opera. It's very
kind of juicy. And like

47
00:02:49.040 --> 00:02:51.920
it moves with the cool
animations and the it's got

48
00:02:51.920 --> 00:02:56.030
bars on all four sides.
It's really neat. It's eh,

49
00:02:56.090 --> 00:03:01.570
it's like, okay. The upper
Basser the, the one before

50
00:03:01.570 --> 00:03:04.150
the chromium based upper Bowzer,
which was the one that

51
00:03:04.150 --> 00:03:08.710
I worked on. And this
is more in that spirit

52
00:03:08.830 --> 00:03:13.210
of, of browser where you
will have lots of built

53
00:03:13.210 --> 00:03:17.950
in features that won't require
you to install extensions for

54
00:03:17.950 --> 00:03:22.510
them. And lots of keyboard
shortcuts, very like, so you

55
00:03:22.510 --> 00:03:25.210
can cuss very customizable so
you can make it so

56
00:03:25.300 --> 00:03:29.650
the way you like it.
So our new slogan is

57
00:03:29.650 --> 00:03:33.420
if you browse more than
you sleep. So basically it's

58
00:03:33.490 --> 00:03:35.320
for people who spend a
lot of time in their

59
00:03:35.320 --> 00:03:37.960
browsers and need to customize
it to their work process,

60
00:03:39.280 --> 00:03:43.270
but for anyone really. But
it's, it's, it's a different

61
00:03:43.300 --> 00:03:46.510
kind of thing than something
that you just casually pop

62
00:03:46.510 --> 00:03:49.660
up and surf with. It's
more something that you want

63
00:03:49.660 --> 00:03:54.810
to control your session's human
too. Yeah, It feels to

64
00:03:54.810 --> 00:03:57.000
me, like I was explaining
this to a friend recently

65
00:03:57.030 --> 00:03:58.950
and they want to know
like, why should I use

66
00:03:58.950 --> 00:04:01.170
it? And I said, well,
it's kind of a prosumer,

67
00:04:01.170 --> 00:04:03.570
like a, not a consumer,
but like a professional consumer.

68
00:04:03.870 --> 00:04:05.670
Cause I found out that
you can hit control P

69
00:04:05.670 --> 00:04:07.350
and there's like a whole
panel that reminds me of

70
00:04:07.350 --> 00:04:10.300
Quicksilver on a Mac. It's
like, all the hotkeys are

71
00:04:10.300 --> 00:04:12.540
buying a bubble and it's
like, you can type what

72
00:04:12.540 --> 00:04:15.450
you want. Instead of if
I don't know the name,

73
00:04:15.520 --> 00:04:17.280
I don't know the hockey,
I can just type like

74
00:04:17.280 --> 00:04:20.100
extensions and it'll show me
extensions and the hockey and

75
00:04:20.110 --> 00:04:21.750
I can hit enter. So
I can like just like

76
00:04:21.750 --> 00:04:23.880
visual studio code, I hit
control P and type and

77
00:04:23.880 --> 00:04:26.100
hit, enter and move really
fast. It's very keyboard friendly.

78
00:04:26.400 --> 00:04:28.980
Yeah. And that, and that
is a lot of people.

79
00:04:29.010 --> 00:04:33.000
Like we used to call
people are power users and

80
00:04:33.000 --> 00:04:35.130
things like that. But I
think what I realized when

81
00:04:35.130 --> 00:04:39.300
I was at opera was
when we, we were very

82
00:04:39.300 --> 00:04:44.430
focused on making the browser
accessible in opera in the

83
00:04:44.430 --> 00:04:47.610
early days. And, and what
we saw was that a

84
00:04:47.610 --> 00:04:50.730
lot of the features that
we added for accessibility were

85
00:04:50.730 --> 00:04:53.460
features that ended up being
used by, by power users

86
00:04:53.460 --> 00:04:55.590
as well, because they are
generally things that made it

87
00:04:55.590 --> 00:04:58.530
easier to do things. You
could do things with a

88
00:04:58.530 --> 00:05:01.260
single key Reiki, do things
just with the keyboards. You

89
00:05:01.260 --> 00:05:04.890
didn't need a mouse. A
lot of those features that

90
00:05:04.920 --> 00:05:07.590
you could think of as
power user features often end

91
00:05:07.590 --> 00:05:10.200
up also being accessibility features
and the other way around.

92
00:05:10.260 --> 00:05:14.730
It's, it's a very, a
very interesting balance. Well, now

93
00:05:14.730 --> 00:05:16.770
that, that, that blink and
the, you know, the, the

94
00:05:16.770 --> 00:05:21.420
kind of the chromium renderer
thing has become a piece

95
00:05:21.420 --> 00:05:23.580
of the web that is
now being reused and then

96
00:05:23.580 --> 00:05:26.850
browsers like Vivaldi and other
browsers can, can bring that

97
00:05:26.850 --> 00:05:31.410
renderer in. I've noticed that
techies online have become very

98
00:05:31.410 --> 00:05:37.620
dismissive. Like, they'll go, Oh,
that's just, you know, skinned

99
00:05:37.650 --> 00:05:42.390
Chrome. And I'm pretty sure
it's not, but people seem

100
00:05:42.390 --> 00:05:46.410
to like to say the
word just, Well, it's funny

101
00:05:46.410 --> 00:05:50.790
because this is a little
bit of browser history, but

102
00:05:50.880 --> 00:05:54.210
we don't have any new
browser engines. There hasn't been

103
00:05:54.210 --> 00:05:57.950
a new browser engine written
since the nineties. And so

104
00:05:57.950 --> 00:06:04.310
Chrome Chrome took the Chrome
blink fork was from the

105
00:06:04.310 --> 00:06:09.620
Safari WebKit fork, which was
from Concord browser, which goes

106
00:06:09.620 --> 00:06:12.560
all the way back to
the nineties. So, so it's

107
00:06:12.620 --> 00:06:15.830
there. So if you want
to say that somebody skinned

108
00:06:15.830 --> 00:06:19.610
something, then somebody skimmed a,
a browser that the KT

109
00:06:19.610 --> 00:06:25.670
project made. So this is,
this is, this is how

110
00:06:25.670 --> 00:06:29.630
it works. A browser engine
is a very big thing.

111
00:06:30.140 --> 00:06:34.820
And unfortunately we only had
four browser families. We had

112
00:06:34.850 --> 00:06:40.040
the Microsoft browser family. And
then you had this, this

113
00:06:40.040 --> 00:06:44.240
one, which was the Concord
kitty family, which is now

114
00:06:44.510 --> 00:06:48.710
called chromium. And then you
had opera which had the

115
00:06:48.770 --> 00:06:53.600
Presto, and then you had
Mozilla with the Firefox gecko

116
00:06:53.630 --> 00:06:59.030
kind of family. And unfortunately
opera decided to discontinue Presto.

117
00:06:59.120 --> 00:07:02.180
It's still, it's still in
use actually, but it's no

118
00:07:02.180 --> 00:07:07.250
longer maintained. And so we
ended up only having three

119
00:07:07.250 --> 00:07:11.120
browser families in the world.
So it's not like, so

120
00:07:11.120 --> 00:07:13.490
all of the browsers are
based on one of those

121
00:07:13.940 --> 00:07:20.060
and you will have further
development. You will have forks,

122
00:07:20.060 --> 00:07:22.760
you will have things like
that, but it's basically, there's,

123
00:07:22.780 --> 00:07:25.220
there's nothing new under the
sun when it comes to

124
00:07:25.220 --> 00:07:28.330
browsers. Well, it's so much
heavier than it used to

125
00:07:28.330 --> 00:07:32.500
be like, I'm on the
same <inaudible> that I've always

126
00:07:32.500 --> 00:07:35.320
had. It's a super powerful
machine. It can run 90,

127
00:07:35.680 --> 00:07:38.470
90 frames per second VR,
but I'm still kind of

128
00:07:38.470 --> 00:07:40.810
waiting for stuff to render
and waiting for JavaScript to

129
00:07:40.810 --> 00:07:43.270
do its thing. And I'm
wondering whose fault it is.

130
00:07:43.270 --> 00:07:45.340
And it seems just like
the internet itself has become

131
00:07:45.340 --> 00:07:48.130
heavy. You know, one of
the things that I liked

132
00:07:48.130 --> 00:07:50.080
about Vivaldi is if I
go to, like right now,

133
00:07:50.080 --> 00:07:52.330
I'm just going to go
and type control T and

134
00:07:52.330 --> 00:07:54.720
I'll type the verge. And
it's actually showing me the

135
00:07:54.760 --> 00:07:58.600
weight of the page in
the title bar, as I'm

136
00:07:58.630 --> 00:08:00.550
like in the, in the
address bar, as I loaded.

137
00:08:01.630 --> 00:08:03.400
And it's like, you know,
a Meg and a half,

138
00:08:03.400 --> 00:08:07.450
two bags of crap loading,
loading, loading, loading, loading, I'm

139
00:08:07.660 --> 00:08:10.240
it's, it makes you very
conscious of how big things

140
00:08:10.240 --> 00:08:12.190
are when you start showing
up on a page. And

141
00:08:12.190 --> 00:08:15.070
then you see right there
as it loads this heaviness.

142
00:08:15.700 --> 00:08:20.410
I think, I think it's
a combination of things like,

143
00:08:21.010 --> 00:08:23.950
like when I like one
thing that opera, the old

144
00:08:23.950 --> 00:08:27.280
opera pesto was, it was
made for, for low end

145
00:08:27.280 --> 00:08:31.270
devices. Cause we, it was
sold to many embedded type

146
00:08:31.270 --> 00:08:34.570
devices. So we used to,
we used to joke it

147
00:08:34.570 --> 00:08:37.600
could run on a toaster
and it's true. It was

148
00:08:37.600 --> 00:08:41.890
the most lightweight browser ever,
ever, and it was great,

149
00:08:42.400 --> 00:08:45.520
but it was also a
big thing to maintain and,

150
00:08:45.520 --> 00:08:50.200
and opera decided not to,
but chromium on the other

151
00:08:50.200 --> 00:08:55.120
hand, it's, it's, it is
a made for, for desktop

152
00:08:55.140 --> 00:09:00.270
browsers or desktop machines. And
it's quite memory heavy. It's

153
00:09:00.270 --> 00:09:04.470
quite CPU heavy, no offense
to anyone. But I think

154
00:09:04.470 --> 00:09:09.570
most people have realized that,
and it's, it's a different

155
00:09:09.570 --> 00:09:15.450
kind of philosophy. And, and
I think hopefully that, that

156
00:09:15.450 --> 00:09:18.010
we are seeing that this
is not something that scales.

157
00:09:18.010 --> 00:09:20.130
So you can't make a
browser that only works on

158
00:09:20.130 --> 00:09:22.560
development machines. You have to
make a browser that works

159
00:09:22.560 --> 00:09:25.290
for low end machines. And
I hope that we will

160
00:09:25.290 --> 00:09:28.530
see more of that. I
hope that we'll see a

161
00:09:28.530 --> 00:09:32.550
conscious effort to, to, to
make the footprint less. But

162
00:09:32.550 --> 00:09:34.230
at the same time, like
you said, the web has

163
00:09:34.230 --> 00:09:39.630
also grown, right? We are
using MPM packages. We are

164
00:09:39.630 --> 00:09:42.120
pulling down all sorts of
things we might not even

165
00:09:42.120 --> 00:09:45.360
need. And that's fine. If
you, if you have a

166
00:09:45.360 --> 00:09:49.110
fixed price internet, then you
can, you, you don't really

167
00:09:49.110 --> 00:09:52.320
care about all of the
megabytes or gigabytes you're downloading.

168
00:09:52.440 --> 00:09:56.610
But if you are like,
you're paying for per megabyte

169
00:09:56.640 --> 00:10:02.370
and you're downloading over a
bad network somewhere in the

170
00:10:02.370 --> 00:10:05.790
middle of nowhere. And then
this becomes a big issue.

171
00:10:06.420 --> 00:10:09.180
And I'm hoping that that
will improve, that people have

172
00:10:09.180 --> 00:10:12.630
been starting to talk about
how they could only load

173
00:10:12.630 --> 00:10:15.270
what they need when they
need it, instead of just

174
00:10:15.270 --> 00:10:19.700
basically downloading everything. Hmm. Now
you've been doing C plus

175
00:10:19.730 --> 00:10:24.230
plus for, for a nontrivial
amount of time. I won't

176
00:10:24.230 --> 00:10:26.120
give a number, but a
long time, right. You've been

177
00:10:26.120 --> 00:10:27.650
a C plus plus person.
That's kind of like the

178
00:10:27.650 --> 00:10:29.900
language of your soul. That's
the one you keep coming

179
00:10:29.900 --> 00:10:33.350
back to. Yeah, I was,
I, when I, when I

180
00:10:33.350 --> 00:10:36.470
was at university, I was
actually, my main programming language

181
00:10:36.470 --> 00:10:39.560
was Java. I also did
a bunch of other programming

182
00:10:39.560 --> 00:10:43.010
languages. My first programming language
was lisp or a scheme,

183
00:10:43.010 --> 00:10:46.970
which is a dialect of
lists. But so, but I

184
00:10:46.970 --> 00:10:51.320
did many different, different languages,
but when I was finished

185
00:10:51.320 --> 00:10:53.690
at university, I wanted to,
I wanted to work on

186
00:10:53.690 --> 00:10:56.870
my browser, which was opera.
So I applied for opera

187
00:10:56.870 --> 00:11:00.110
and, and that's the, when
I started programming C plus

188
00:11:00.110 --> 00:11:05.750
plus. So that was in
2005. So it's, it's almost

189
00:11:05.750 --> 00:11:10.490
13 years now. Hmm. Well,
there's all this talk like

190
00:11:10.490 --> 00:11:14.150
on the, on the social
web about C-sharp and go

191
00:11:14.150 --> 00:11:16.820
and Java and all of
these kind of like high,

192
00:11:16.870 --> 00:11:19.520
you know, quote unquote higher
level languages with garbage collectors

193
00:11:19.520 --> 00:11:22.040
and stuff. And a lot
of us like learn to

194
00:11:22.040 --> 00:11:26.270
C plus plus in school
and then moved on and

195
00:11:26.270 --> 00:11:28.160
they w you know, there's
a group of us. I

196
00:11:28.160 --> 00:11:30.200
hope I'm not like, I'm
not trying to be mean

197
00:11:30.200 --> 00:11:32.180
to your language, but, you
know, kind of think of

198
00:11:32.180 --> 00:11:34.610
C plus plus as low
level, is that a fair

199
00:11:34.610 --> 00:11:37.310
statement to say C plus
is a low level. Th

200
00:11:37.390 --> 00:11:42.500
th the thing is for
me personally, I can program

201
00:11:42.500 --> 00:11:46.100
in many languages. I've worked
professionally for two years as

202
00:11:46.100 --> 00:11:50.810
a Java programmer. I've also
programmed in other languages while

203
00:11:50.810 --> 00:11:54.580
being a C plus plus
developer, mainly things JavaScript, Python

204
00:11:55.060 --> 00:11:59.080
and Java as well. I've
never, I've never programmed in

205
00:11:59.080 --> 00:12:04.450
C-sharp, but I, I'm very
interested in learning new languages

206
00:12:04.450 --> 00:12:08.080
reasonably. I try to look
at rest and go, and

207
00:12:08.650 --> 00:12:12.250
I'm of the opinion that
most languages have their use

208
00:12:12.250 --> 00:12:16.630
case, their niche, the thing
that they're good at. So

209
00:12:16.630 --> 00:12:23.680
what C plus plus is
good at is for cross

210
00:12:23.680 --> 00:12:30.430
platform work, where you need
platform integration, and also anything

211
00:12:30.430 --> 00:12:36.760
that it has high performance
requirements, especially around memory access,

212
00:12:36.760 --> 00:12:39.370
where, where that is something
that you can control really

213
00:12:39.370 --> 00:12:44.320
well in C plus plus.
But I do also feel

214
00:12:44.320 --> 00:12:46.360
that a lot of people
who knew sip that's supposed

215
00:12:46.360 --> 00:12:48.970
to be for, could really
benefit from looking at the

216
00:12:48.970 --> 00:12:51.970
language again, because the type
of C plus plus that

217
00:12:51.970 --> 00:12:54.160
we right now is very
different from the type of

218
00:12:54.160 --> 00:12:57.760
C plus plus we wrote
20 years ago, and it

219
00:12:57.760 --> 00:13:01.020
is much more similar to
other types of languages. You're

220
00:13:01.020 --> 00:13:03.220
like, you could look at
C plus plus written in

221
00:13:03.220 --> 00:13:05.620
like what we call modern
C plus plus, or something.

222
00:13:06.040 --> 00:13:11.920
People are talking about postmodern
souffles, but, but if you

223
00:13:11.920 --> 00:13:14.500
look at it, it will
look more like other types

224
00:13:14.500 --> 00:13:19.960
of, of functional type languages
where like middle way languages

225
00:13:19.960 --> 00:13:23.710
like Python or JavaScript, or
where you will have more

226
00:13:23.710 --> 00:13:27.820
functional type syntax. I mean,
we have auto, we have

227
00:13:27.820 --> 00:13:31.780
Lambdas, we have all sorts
of things that, that make

228
00:13:31.780 --> 00:13:33.940
it so that you can
write things in a different

229
00:13:33.940 --> 00:13:38.050
way than, than in the
C type way that people

230
00:13:38.050 --> 00:13:42.000
wrote C plus plus before.
Hmm. Well, cause like originally,

231
00:13:42.000 --> 00:13:45.000
if I understand correctly, one
of the original requirements for

232
00:13:45.000 --> 00:13:47.610
C plus plus was backward
compatibility with C right. It

233
00:13:47.610 --> 00:13:51.030
was C plus plus, and
you were supposed to make

234
00:13:51.060 --> 00:13:54.690
all the C programmers comfortable.
Yeah. And, and, and still

235
00:13:54.690 --> 00:13:59.370
it's a, it's not a
perfect containment. We, there are

236
00:13:59.370 --> 00:14:04.710
differences between the C subsection
of C plus plus and

237
00:14:04.770 --> 00:14:09.240
C today. Yeah. That is
mostly true, but we don't

238
00:14:09.270 --> 00:14:12.540
really recommend like professional C
plus plus programmers today. Don't

239
00:14:12.540 --> 00:14:17.190
recommend writing C in C
plus, plus we recommend using

240
00:14:17.190 --> 00:14:21.540
C plus plus constructs, especially
for a memory safety reasons.

241
00:14:21.660 --> 00:14:24.480
So if you look at
modern C plus, plus it

242
00:14:24.480 --> 00:14:26.850
doesn't look like C at
all, and it actually makes

243
00:14:26.850 --> 00:14:31.230
it really like, I am
not a very good C

244
00:14:31.230 --> 00:14:36.060
programmer. I'm, I'm kind of
a bad C programmer because

245
00:14:36.060 --> 00:14:38.910
the thing is, I'm used
to programming with the C

246
00:14:38.910 --> 00:14:41.190
plus plus constructs. And the
moment I ended up in

247
00:14:41.190 --> 00:14:44.340
C I'm like, but how
do I do these things

248
00:14:44.340 --> 00:14:47.610
then I am used to
doing in this way? So

249
00:14:47.610 --> 00:14:50.220
what we are, I think
we're ending up in the

250
00:14:50.930 --> 00:14:53.120
situation where we're thinking that
if you want to learn

251
00:14:53.120 --> 00:14:57.110
C plus plus today, I
would recommend you not knowing

252
00:14:57.110 --> 00:15:01.040
C I would recommend it.
I think it'd be probably

253
00:15:01.040 --> 00:15:05.030
better off coming from, from
something like a managed language

254
00:15:05.060 --> 00:15:09.380
like Python or, or, or,
or maybe C-sharp or Java,

255
00:15:09.860 --> 00:15:12.920
and then having a C
plus plus program. I teach

256
00:15:12.920 --> 00:15:16.280
you how to do similar
things, because if you're coming

257
00:15:16.280 --> 00:15:19.910
from C or are, are
used to allocating memory in

258
00:15:19.910 --> 00:15:22.220
the C Lakeway, and that
is not something that we

259
00:15:22.220 --> 00:15:25.580
recommend, and that becomes sort
of like a hurdle, you

260
00:15:25.580 --> 00:15:28.310
kind of have to get
over to program like a

261
00:15:28.310 --> 00:15:31.700
C plus plus developer. Yeah.
So that means that, that

262
00:15:31.750 --> 00:15:36.790
my, you know, 25 years
ago learning C and allocating

263
00:15:36.790 --> 00:15:39.400
money deleting my own memory
is going to be a

264
00:15:39.400 --> 00:15:42.070
problem. And it's going to
creep into my modern C

265
00:15:42.070 --> 00:15:43.870
plus plus code. And I'm
going to forget it. It's

266
00:15:43.870 --> 00:15:47.380
almost like speaking old English
instead of proper English. Yeah.

267
00:15:48.280 --> 00:15:52.330
I have, I have a
talk which is on YouTube.

268
00:15:52.520 --> 00:15:55.810
It's, it's called a C
plus plus for Java developers.

269
00:15:56.290 --> 00:15:58.870
And it, I think it's,
it's an interesting talk for

270
00:15:58.870 --> 00:16:01.110
anyone who's coming from a
different kind of language and

271
00:16:01.130 --> 00:16:05.440
has like a vague understanding
of Java. But one of

272
00:16:05.440 --> 00:16:07.690
the slides that, and I
say, it's the most important

273
00:16:07.690 --> 00:16:11.680
slide is, is I have
this black background. And it

274
00:16:11.680 --> 00:16:14.680
says in green text, don't
do this. And w what

275
00:16:14.680 --> 00:16:19.210
it says is, is it
allocates with new? And I

276
00:16:19.210 --> 00:16:22.390
was like, don't allocate with
new try, never to allocate

277
00:16:22.390 --> 00:16:24.610
with new, and which, which
also means of course never

278
00:16:24.610 --> 00:16:27.730
allocate with my luck. And
then suddenly I say, if

279
00:16:27.730 --> 00:16:30.070
you do that, if you,
you go in and you

280
00:16:30.070 --> 00:16:33.130
consciously say, I'm not going
to allocate anything with new,

281
00:16:33.910 --> 00:16:36.400
then you are in a
much better place to actually

282
00:16:36.400 --> 00:16:38.830
try to figure out how
modern C plus plus works,

283
00:16:38.860 --> 00:16:46.120
because we hardly ever use
new. I go for delete

284
00:16:46.120 --> 00:16:49.330
as well. Yeah. We don't
do delete either. Who does

285
00:16:49.330 --> 00:16:52.360
the delete LA we use
the stack to manage memory

286
00:16:52.360 --> 00:16:57.430
lifetimes. So you either have
some kind of what we

287
00:16:57.430 --> 00:17:03.010
call right. Type construct, which
is called resource allocation is

288
00:17:03.070 --> 00:17:06.910
initialization, but it's basically like
a smart point a thing

289
00:17:07.420 --> 00:17:10.570
where you, which will hold
the object. And when it

290
00:17:10.570 --> 00:17:14.320
goes out of scope, it
will delete it automatically. And

291
00:17:14.320 --> 00:17:16.630
so you will either allocate
on the stack, or you

292
00:17:16.630 --> 00:17:18.700
will have a smart pointer
on the stack, or you

293
00:17:18.700 --> 00:17:23.230
will transitively hold something from
the stack to whatever you

294
00:17:23.230 --> 00:17:25.330
have on the heap. So
that whenever what you have

295
00:17:25.330 --> 00:17:27.310
in the stack goes out
of scope. Everything will be

296
00:17:27.310 --> 00:17:31.510
automatically deleted. So we don't
write, delete Mo like the

297
00:17:31.510 --> 00:17:33.490
only times you write new
and delete is if you

298
00:17:33.490 --> 00:17:39.280
make some kind of special
new container thing, but generally

299
00:17:39.280 --> 00:17:42.310
you don't need to do
that. So we use things

300
00:17:42.310 --> 00:17:45.580
like unique pointer or things
that come in the standard

301
00:17:45.580 --> 00:17:47.710
library to do that. So
you generally don't have to

302
00:17:47.710 --> 00:17:50.940
do a, I don't remember
last time I wrote new

303
00:17:51.990 --> 00:17:56.840
actually, Hey folks, Intel is
a sponsor this week, and

304
00:17:56.840 --> 00:18:00.410
I welcome them because they're
bringing some high performance developer

305
00:18:00.410 --> 00:18:04.310
tools for all of us
check out Intel's parallel studio

306
00:18:04.400 --> 00:18:07.730
X, E I've talked about
parallelism before on the show

307
00:18:07.730 --> 00:18:11.360
and the importance of using
the complete instruction set, unlocking

308
00:18:11.360 --> 00:18:13.220
the power of the process
or that your code is

309
00:18:13.220 --> 00:18:16.070
running on. Now, you all
might be writing C or

310
00:18:16.070 --> 00:18:19.250
C plus plus Python, or
even Fortran, but as your

311
00:18:19.250 --> 00:18:21.650
code building in such a
way and written in such

312
00:18:21.650 --> 00:18:25.520
a way that it uses
the latest techniques for vectorization

313
00:18:25.820 --> 00:18:32.060
multithreading multi-node parallelization or memory
optimization, Intel parallel studio ECC

314
00:18:32.070 --> 00:18:34.520
as a lot of new
stuff for 2018 across all

315
00:18:34.520 --> 00:18:38.540
these languages, get a free
download at <inaudible> dot com

316
00:18:38.570 --> 00:18:42.980
slash parallel studio Z, or
certainly go and Google or

317
00:18:42.980 --> 00:18:46.580
Google with being for Intel
parallel studio XC and get

318
00:18:46.580 --> 00:18:50.540
started boosting your apps performance
with smart parallel code with

319
00:18:50.540 --> 00:18:56.600
a lot less effort, check
them out bitly.com/parallel studio X

320
00:18:56.630 --> 00:19:00.900
E. Well, okay. So if
you've, if everything is, if

321
00:19:00.910 --> 00:19:04.490
it's stack and scope based
and the language is deleting

322
00:19:04.490 --> 00:19:07.010
for you, when things go
out of stacks, you know,

323
00:19:07.010 --> 00:19:10.070
going out of scope, how
do you keep, you know,

324
00:19:10.070 --> 00:19:12.380
are you passing stuff around
like a functional language, or

325
00:19:12.380 --> 00:19:14.600
is there a global, you
know, global heap? How do

326
00:19:14.600 --> 00:19:17.270
you have objects that have
a scope that's bigger than,

327
00:19:17.270 --> 00:19:21.770
you know, singletons or scope
it's program level? You can

328
00:19:21.770 --> 00:19:26.510
have things that are global,
but mostly we have ended

329
00:19:26.510 --> 00:19:30.170
up in that, that this
is like the discussion we

330
00:19:30.170 --> 00:19:33.350
have in all the languages
right now, I guess, that

331
00:19:33.350 --> 00:19:36.920
we've been having for a
while, since, since we decided

332
00:19:36.920 --> 00:19:40.100
that the whole Singleton concept
was problematic because of a

333
00:19:40.100 --> 00:19:45.860
unit testing. So, and that's,
that's also a discussion that,

334
00:19:45.950 --> 00:19:47.870
that has been in C
plus plus for the same

335
00:19:47.870 --> 00:19:50.240
reason. Like how do you
mock things out if you

336
00:19:50.240 --> 00:19:52.940
have globals that can be
accessed from everywhere. And I

337
00:19:52.940 --> 00:19:56.390
guess to that end, most
people have ended up with

338
00:19:56.420 --> 00:20:01.850
not having like globals in
that way anymore, but you

339
00:20:01.850 --> 00:20:07.100
might have long living objects.
So she will have maybe

340
00:20:07.100 --> 00:20:09.800
objects that live from the
beginning of the program til

341
00:20:09.800 --> 00:20:14.330
the end, but they are
maybe allocated very early in

342
00:20:14.330 --> 00:20:18.590
the process. So basically very
far down the stack and

343
00:20:18.590 --> 00:20:22.370
will only go out of
scope when the proper program

344
00:20:22.370 --> 00:20:26.000
exits, and then you will
pass it around if you

345
00:20:26.000 --> 00:20:29.750
need it. But generally we,
like, I think in all

346
00:20:29.750 --> 00:20:32.990
languages, we're kind of moving
away from, from having these

347
00:20:33.470 --> 00:20:40.280
big global Singleton things. So
it's all stack or it's

348
00:20:40.280 --> 00:20:43.610
mostly stack based scope. And
unless you'd go and do,

349
00:20:43.970 --> 00:20:47.530
you know, a smart pointers
make shared and shared pointer

350
00:20:47.590 --> 00:20:51.520
and things like that, but
is why do we on

351
00:20:51.520 --> 00:20:54.250
the, in the C sharp
and the Java world love

352
00:20:54.250 --> 00:20:57.310
our garbage collectors so much.
If this is a problem

353
00:20:57.310 --> 00:20:59.710
that's kind of been solved
and C plus plus embraces

354
00:21:00.070 --> 00:21:02.230
their own kind of way
of doing object lifetime and

355
00:21:02.230 --> 00:21:07.260
resource management. Well, I don't
know if you do well.

356
00:21:07.260 --> 00:21:09.660
I was a Java some
last year. It's a big

357
00:21:09.690 --> 00:21:12.150
Java conference here in Oslo,
and I've been there many

358
00:21:12.150 --> 00:21:14.370
times because like I said,
I used to program in

359
00:21:14.370 --> 00:21:18.150
Java and it was funny.
I was during the, like

360
00:21:18.300 --> 00:21:21.390
the two days or whatever
the conference was. I, I,

361
00:21:21.840 --> 00:21:24.690
I think I was at
like five different talks that

362
00:21:24.690 --> 00:21:32.190
were about memory problems, because,
and, and, and th the

363
00:21:32.190 --> 00:21:36.420
reason why you're seeing this
is something that we've seen

364
00:21:36.420 --> 00:21:41.190
across the industry. It is
the relative cost of memory

365
00:21:41.190 --> 00:21:47.290
access is becoming a problem
in all programming languages. The,

366
00:21:47.290 --> 00:21:50.640
the cost of accessing something
that is in a registered

367
00:21:51.030 --> 00:21:54.000
as something that is in
the L one cash L

368
00:21:54.000 --> 00:21:56.190
to cash, and then going
all the way, all the

369
00:21:56.190 --> 00:22:00.300
way out to memory, it
can be extremely expensive. And,

370
00:22:00.380 --> 00:22:04.470
and the way that Java
has traditionally allocated memory means

371
00:22:04.470 --> 00:22:07.570
that you will have a
lot of cash misses and,

372
00:22:07.570 --> 00:22:12.540
and memory accesses can be
really expensive, but Java is

373
00:22:12.540 --> 00:22:15.270
also working on that. They're
also working on things on,

374
00:22:15.300 --> 00:22:18.900
on, on how to do
stack based allocations, how to

375
00:22:18.900 --> 00:22:24.360
do more co-located and memory
allocations. And I'm sure, although,

376
00:22:24.360 --> 00:22:27.270
I don't know C C
sharp. I'm sure that Microsoft

377
00:22:27.270 --> 00:22:31.050
is probably doing some new
things, because it is a

378
00:22:31.050 --> 00:22:35.070
problem that if you are,
if you're doing a lot

379
00:22:35.070 --> 00:22:38.430
of memory accesses that they
are not co located, then

380
00:22:38.430 --> 00:22:40.920
you, you get cash misses
all the time. You don't

381
00:22:40.920 --> 00:22:44.070
get any help from your
ELA, one Noel, two caches,

382
00:22:44.100 --> 00:22:46.890
and that can make, that
can make or break your

383
00:22:46.890 --> 00:22:54.000
application. Like that's, that's a
10 times hundred times difference

384
00:22:54.000 --> 00:22:58.710
in, in performance for, for
some application. Yeah, just, just

385
00:22:58.710 --> 00:23:01.920
recently in the last six
months, I would say maybe

386
00:23:01.920 --> 00:23:05.730
a year C-sharp has started
doing this thing called span

387
00:23:06.090 --> 00:23:10.200
span of QI as a
generic. It's basically let you

388
00:23:10.200 --> 00:23:14.520
represent contiguous region of arbitrary
memory, but it still looks

389
00:23:14.520 --> 00:23:17.280
safe, but it acts like
a straight array with a

390
00:23:17.280 --> 00:23:21.420
pointer to like real memory.
And all these allocations disappear.

391
00:23:21.420 --> 00:23:23.970
Like all this stuff, we
were copying things around, just

392
00:23:23.970 --> 00:23:26.370
disappear. And you just like,
you know, for parsing H

393
00:23:26.490 --> 00:23:31.230
HTTP, rather than chopping things
up, we just pointing to

394
00:23:31.710 --> 00:23:35.010
a memory and it never
moves. No. See, so yeah,

395
00:23:35.040 --> 00:23:38.700
everyone is having to deal
with this problem because the,

396
00:23:38.700 --> 00:23:43.590
the difference has become very
large and it's really hitting

397
00:23:43.590 --> 00:23:49.460
applications. And especially for things
that are, that are memory

398
00:23:50.240 --> 00:23:54.620
bound, that is, that is
when the problem is. So

399
00:23:54.620 --> 00:23:59.450
it's funny. They generally, when
you see these benchmarks between

400
00:23:59.450 --> 00:24:03.830
programming languages, they are often
very difficult to measure things.

401
00:24:03.830 --> 00:24:06.110
Because if you know, if
you are a CPU bound,

402
00:24:06.350 --> 00:24:10.640
then memory accesses won't hurt
you. But if you have

403
00:24:10.640 --> 00:24:13.430
memory accesses, then suddenly how
you access memory as a

404
00:24:13.430 --> 00:24:17.960
huge deal. But I think
most languages are dealing with

405
00:24:17.960 --> 00:24:22.180
this in different kinds of
ways. Now I'm reading on

406
00:24:22.180 --> 00:24:25.480
the web that C plus
plus is getting a Renaissance

407
00:24:25.870 --> 00:24:30.160
because, you know, power is,
is King and well C

408
00:24:30.160 --> 00:24:33.760
plus plus, and Java have
like productivity benefits. You know,

409
00:24:33.760 --> 00:24:36.160
you just, you can't beat
C plus plus when it

410
00:24:36.160 --> 00:24:38.770
comes down to high efficiency
on like devices with limited

411
00:24:38.770 --> 00:24:43.090
hardware. So like, does that
mean that like games and,

412
00:24:43.120 --> 00:24:46.420
you know, really high perf
stuff and things on small

413
00:24:46.420 --> 00:24:52.000
devices, it's all ultimately C
plus plus I think, I

414
00:24:52.000 --> 00:24:57.580
think to a certain degree
it's become that. And I

415
00:24:57.580 --> 00:24:59.980
think that the whole, like,
okay, I, I don't like

416
00:24:59.980 --> 00:25:03.550
the term internet of things,
but basically the embedded with

417
00:25:03.550 --> 00:25:09.700
wifi. I don't think anyone
likes that, but the concept

418
00:25:09.700 --> 00:25:11.860
of running on low end
devices, I think we're getting,

419
00:25:12.970 --> 00:25:16.960
we're getting more and more
little chips that are able

420
00:25:16.960 --> 00:25:20.200
to run software. And, and
what is interesting also is

421
00:25:20.200 --> 00:25:23.140
that what we used to
have is like, you had

422
00:25:23.140 --> 00:25:25.960
like a jump from really
low end devices to a

423
00:25:25.960 --> 00:25:29.200
high end devices. There wasn't
a lot in between, but

424
00:25:29.200 --> 00:25:31.240
what you're seeing is that
you're getting more of a

425
00:25:31.240 --> 00:25:34.390
scale where, where there is
an actual, like sliding scale

426
00:25:34.390 --> 00:25:36.550
from really low end devices,
all the way to high

427
00:25:36.550 --> 00:25:42.370
end devices and for the
really low end devices than,

428
00:25:42.400 --> 00:25:44.710
than C and C plus
plus is basically all they

429
00:25:44.710 --> 00:25:48.610
can run. And then, but
then you're moving up a

430
00:25:48.610 --> 00:25:50.740
little bit and then suddenly,
you know, you can have

431
00:25:50.770 --> 00:25:58.330
Python and you can have
other things. And so I'm

432
00:25:58.330 --> 00:26:03.070
not sure, I, I think
for high performance applications that,

433
00:26:03.160 --> 00:26:06.280
where that is a big
deal, and you don't have

434
00:26:06.280 --> 00:26:10.480
the hardware to do anything
more expensive than you're going

435
00:26:10.480 --> 00:26:13.550
to see a lot of
CNC plus plus, and, and,

436
00:26:13.550 --> 00:26:17.710
and GPO programming as well,
because people are, people are

437
00:26:17.710 --> 00:26:21.580
really learning how to, to
push stuff out of their

438
00:26:21.580 --> 00:26:25.240
GPU. Yeah. Yeah. I have
you, do you know, have

439
00:26:25.240 --> 00:26:28.210
you heard, seen what Stephanie
ho Hurlbert and her company

440
00:26:28.210 --> 00:26:31.540
is doing with their, their
GPU image compressor? Yeah, I,

441
00:26:31.550 --> 00:26:34.570
well, I only what she
has been writing on Twitter

442
00:26:34.570 --> 00:26:36.010
and just a little bit
here and there, but it

443
00:26:36.010 --> 00:26:40.640
looks really interesting. I think
that also with regards to,

444
00:26:40.640 --> 00:26:46.800
to memory bandwidth and to
performance, that's very interesting. I

445
00:26:46.800 --> 00:26:50.640
think you could see being
able to do much more

446
00:26:52.260 --> 00:26:56.850
vibrant games on our lower
end devices with, with that

447
00:26:56.850 --> 00:27:00.320
kind of technology. So it's
very interesting. Well, speaking of

448
00:27:00.320 --> 00:27:03.920
perf let's pick on a
competitive browser here. I am

449
00:27:03.920 --> 00:27:08.120
talking to you using a
podcasting application called Zencaster and

450
00:27:08.120 --> 00:27:11.960
I am inside of Google
Chrome. I'm sorry. And it

451
00:27:11.960 --> 00:27:21.260
has 61 processes running totaling
2.3 gigabytes. And one of

452
00:27:21.260 --> 00:27:24.410
them is called GPU. Now,
if I open up Vivaldi,

453
00:27:24.410 --> 00:27:26.330
just in one or two
pages, I'll have, you know,

454
00:27:26.330 --> 00:27:32.330
nine to 10. Why, why
do these browsers, yours included

455
00:27:32.570 --> 00:27:37.610
have dozens of, of processes
that make up some parent

456
00:27:37.610 --> 00:27:41.360
process as opposed to one
super everything in process for

457
00:27:41.360 --> 00:27:48.200
speed. Okay. This is browser
history time again. Okay. So,

458
00:27:48.200 --> 00:27:53.090
so let's, let's turn back
the clock to, to 2005,

459
00:27:53.090 --> 00:28:02.300
2006, 2007 opera was by
and large one browser. Most

460
00:28:02.300 --> 00:28:07.850
browsers were one, one process.
Most browsers were one process

461
00:28:07.910 --> 00:28:13.310
opera on Lennox had had
a separate plugin process where

462
00:28:13.310 --> 00:28:17.780
we were running plugins in
a separate process, but we

463
00:28:17.780 --> 00:28:20.480
were running them in process
in, on, on Mac and

464
00:28:20.480 --> 00:28:23.300
windows and all, and all
other routers were doing the

465
00:28:23.300 --> 00:28:31.100
same. And then Google decided
to make a browser, a

466
00:28:31.100 --> 00:28:33.860
new browser. It was called
Chrome, which was funny because

467
00:28:33.860 --> 00:28:36.740
it didn't have any Chrome.
That was like a thing,

468
00:28:38.690 --> 00:28:40.820
because that was the thing.
When Google came out, it

469
00:28:40.820 --> 00:28:43.460
didn't have any window Chrome,
but they called the Chrome

470
00:28:46.880 --> 00:28:50.300
anyway, but it was a,
it was a very, very

471
00:28:50.660 --> 00:28:57.410
simple UI, very, very clean,
very interesting, but what they

472
00:28:57.650 --> 00:29:04.670
needed was an engine for
this. And before Apple had

473
00:29:05.120 --> 00:29:11.030
forked the Katie Concord type
project and created this thing

474
00:29:11.030 --> 00:29:13.820
called web kit, which they
use to make the Safari

475
00:29:13.820 --> 00:29:19.310
browser and Google looked around
and decided that this was

476
00:29:19.310 --> 00:29:21.860
probably the best thing to
use WebKit as their engine

477
00:29:21.860 --> 00:29:27.500
for their new browser. But
this was basically an in

478
00:29:27.500 --> 00:29:33.290
house project in, in Apple,
but they were doing source

479
00:29:33.290 --> 00:29:36.740
code dumps every night. Now
this is how I remember

480
00:29:36.740 --> 00:29:39.110
it. So if somebody remembers
it differently, please tell me

481
00:29:39.110 --> 00:29:41.440
because this is how I
remember it from the, at

482
00:29:41.440 --> 00:29:45.040
the time. And so, so
Apple was doing source code

483
00:29:45.040 --> 00:29:47.950
dumps every night, and Google
had to pick it up

484
00:29:47.980 --> 00:29:52.900
and there was no revision
history, and this was kind

485
00:29:52.900 --> 00:29:56.170
of problematic because WebKit was
unstable. And there was very,

486
00:29:56.410 --> 00:30:03.100
it was very difficult for
Google to control quality. So

487
00:30:03.160 --> 00:30:07.030
they made a framework around
WebKit where they put WebKit

488
00:30:07.030 --> 00:30:11.170
in his own process. And
they made a separate browser

489
00:30:11.380 --> 00:30:16.120
process to manage all of
these WebKit processes. And they

490
00:30:16.120 --> 00:30:19.240
call these WebKit processes for
renders. So the end, and

491
00:30:19.240 --> 00:30:23.740
then they had one per
tab, and then they've pitched

492
00:30:23.740 --> 00:30:27.520
us as a feature for
Chrome that, you know, a

493
00:30:27.520 --> 00:30:31.510
tab can crash, but it
won't crash the browser. But

494
00:30:31.510 --> 00:30:34.990
basically it was because they
were, they were incorporating an

495
00:30:34.990 --> 00:30:37.800
engine that was very unstable.
And Yeah, I was going

496
00:30:37.800 --> 00:30:39.620
to say like, Hey, look,
a tab can crash. And

497
00:30:39.620 --> 00:30:42.360
the whole world doesn't crash.
Like why are tabs crashing?

498
00:30:43.020 --> 00:30:45.900
So it was a, it
was it an architectural solution

499
00:30:45.900 --> 00:30:48.370
to a, to a real
world problem. And, and, and

500
00:30:48.370 --> 00:30:50.730
it was, it was quite
a kind of an interesting

501
00:30:50.730 --> 00:30:53.910
solution as well, because suddenly
now you have, you have

502
00:30:53.910 --> 00:30:58.230
all of these separate processes
that are rendering things, and

503
00:30:58.230 --> 00:31:01.980
then you have the browser
process. That is the one

504
00:31:01.980 --> 00:31:05.390
that is responsible for the
global kind of state. And,

505
00:31:05.390 --> 00:31:08.160
and then you still have
to compose all of these

506
00:31:09.090 --> 00:31:11.940
images together into one thing
and put it on the

507
00:31:11.940 --> 00:31:15.060
screen. And so in the
beginning, if I remember correctly,

508
00:31:15.060 --> 00:31:17.700
everything was software rendered, so
everything was done in the

509
00:31:17.700 --> 00:31:21.360
browser process. And so basically
they would just send pics,

510
00:31:21.360 --> 00:31:24.000
maps all to the browser
and Nebraska would compose it

511
00:31:24.000 --> 00:31:26.910
all to one big window.
And, and that's what you

512
00:31:26.910 --> 00:31:29.490
saw on the screen, but
after a while, you want

513
00:31:29.490 --> 00:31:33.090
to do this with the
GPU and, and what they

514
00:31:33.090 --> 00:31:35.970
got as a side effect
of this architecture of course,

515
00:31:35.970 --> 00:31:39.540
is that they could use
platform primitives to set up

516
00:31:39.570 --> 00:31:44.340
individual sandboxing environments for each
type of process. And they

517
00:31:44.340 --> 00:31:47.370
did that. And so, so
you have a very strict

518
00:31:47.370 --> 00:31:51.720
sandbox for the vendor process.
So for example, on Linux,

519
00:31:52.260 --> 00:31:57.510
it cannot access network. It
cannot access the platform file

520
00:31:57.510 --> 00:32:01.320
system at all. It's basically
living in a world where

521
00:32:01.320 --> 00:32:05.430
it can only see itself
as a process. It's using

522
00:32:05.430 --> 00:32:09.840
a lot of Linux APIs
to basically isolate the vendor

523
00:32:09.870 --> 00:32:12.930
a lot. And then this
is a good thing because

524
00:32:13.050 --> 00:32:16.920
we, you know, JavaScript is
a, is executing a new

525
00:32:16.930 --> 00:32:21.300
machine. I make a joke.
Sometimes that remote code execution

526
00:32:21.300 --> 00:32:26.370
is our business model. That's
what we do Pretty much.

527
00:32:26.890 --> 00:32:29.790
That is the definition of
a problem. Yeah. We download

528
00:32:29.790 --> 00:32:32.340
random code from the internet
and execute it on your

529
00:32:32.340 --> 00:32:36.990
machine. And so, and so
as a, having that in

530
00:32:36.990 --> 00:32:39.980
some kind of sandbox environment
is in a very good

531
00:32:39.980 --> 00:32:44.510
idea. So, so, but, but
so they did that. So

532
00:32:44.510 --> 00:32:47.240
they, they ended up having
very different kinds of sandboxing

533
00:32:47.930 --> 00:32:51.920
for the different kinds of
processes. And then if you're

534
00:32:51.920 --> 00:32:55.640
going to pull in a
GPU driver and no, and,

535
00:32:55.640 --> 00:32:59.930
and, and, and, and a
graphics framework, then this is

536
00:32:59.930 --> 00:33:05.240
going to require gaping hole
in your sandbox. So basically

537
00:33:05.240 --> 00:33:09.440
then you put it in
a separate process where it

538
00:33:09.440 --> 00:33:12.260
has a more permissive sandbox
than new renters, and then

539
00:33:12.260 --> 00:33:14.210
you try to figure out
how that's going to work.

540
00:33:14.390 --> 00:33:17.630
And that's like, that's a
whole other architecture they made

541
00:33:17.630 --> 00:33:20.690
on top of it again,
which is very interesting, which

542
00:33:20.690 --> 00:33:25.180
I made another talk about.
So this is great. So

543
00:33:25.180 --> 00:33:26.710
this you're going to give
me a whole bunch of

544
00:33:26.710 --> 00:33:28.900
great links that I'm going
to point everyone through, because

545
00:33:29.290 --> 00:33:32.200
I think that we could
probably go on for, for

546
00:33:32.200 --> 00:33:37.120
an hour, but we're, we're,
we're out of time. Where

547
00:33:37.120 --> 00:33:39.820
can people look at these?
I went and Googled for

548
00:33:39.820 --> 00:33:42.280
your name and found a
ton of great talks you've

549
00:33:42.280 --> 00:33:45.760
given on GPU on security
and C plus plus on

550
00:33:45.760 --> 00:33:49.600
modern C plus, plus these
are all available on video.

551
00:33:49.600 --> 00:33:51.460
And have you spoken at
a ton of conferences? Like

552
00:33:51.460 --> 00:33:55.870
NDC? Yeah. Yeah. I, a
bunch that are on YouTube,

553
00:33:55.870 --> 00:34:00.520
some that are on Vimeo
and yeah. So you Google

554
00:34:00.520 --> 00:34:04.210
my name. You can generally
find videos And do you're

555
00:34:04.210 --> 00:34:07.540
working on Vivaldi now for
the company full time. You're

556
00:34:07.570 --> 00:34:10.690
a startup, would we call
it? Yeah, I guess you

557
00:34:10.690 --> 00:34:13.660
can call it a startup.
It's it's a privately owned.

558
00:34:13.900 --> 00:34:16.030
So it's owned by you.
And one of the founders

559
00:34:16.030 --> 00:34:19.960
of opera, he, he, he
owns Vivaldi and he is

560
00:34:19.960 --> 00:34:24.670
funding it. So it's from
his, his, his pocket, his

561
00:34:24.670 --> 00:34:28.720
pocket. Yeah. Great. Well, people
should check it out. It's

562
00:34:28.750 --> 00:34:33.820
Viv a L D I
vivaldi.com it super fast on

563
00:34:33.820 --> 00:34:37.000
windows. And it's really like
attractive. It's a very attractive

564
00:34:37.000 --> 00:34:41.200
browser. The, the history page
is almost worthwhile using that

565
00:34:41.200 --> 00:34:44.200
like history on Chrome. It's
just a list, but history

566
00:34:44.200 --> 00:34:47.020
and <inaudible> has statistics and
browsing activity. And what kind

567
00:34:47.020 --> 00:34:48.820
of links you click on
and a calendar view and

568
00:34:48.820 --> 00:34:53.560
a month view. It's really,
really interesting. And it's disturbingly

569
00:34:53.560 --> 00:34:56.410
customizable. There's 50 11 ways
to do stuff and I

570
00:34:56.680 --> 00:34:58.420
can move the taps to
the top, bottom, the left,

571
00:34:58.420 --> 00:35:00.010
the right, you know, any
way you want it to

572
00:35:00.010 --> 00:35:02.770
look, it can be skinned,
lots of different ways. And

573
00:35:02.770 --> 00:35:05.470
then also tab tiling and
stacking, which is something you

574
00:35:05.470 --> 00:35:09.100
don't see anymore as well.
It's, it's not crumb at

575
00:35:09.100 --> 00:35:12.490
all, but it's, it's pretty
cool. I'm glad you like

576
00:35:12.490 --> 00:35:14.920
it. Yeah. I'm having a
lot of fun with it.

577
00:35:14.920 --> 00:35:17.530
I think it's great that
there's, you know, sure. There's

578
00:35:17.530 --> 00:35:19.540
edge, there's Firefox and there's
Chrome. And I think they're

579
00:35:19.540 --> 00:35:22.180
all browsers worth checking out,
but there's also brave and

580
00:35:22.180 --> 00:35:24.850
there's Vivaldi and, you know,
suddenly we've got a five

581
00:35:24.850 --> 00:35:26.740
to six browser race here,
and it's a lot of

582
00:35:26.740 --> 00:35:29.710
fun to try these new
browsers. And, and if it,

583
00:35:29.730 --> 00:35:32.080
if you find one that
feels good, that has the,

584
00:35:32.420 --> 00:35:34.450
the features that you want.
We, you should talk to

585
00:35:34.450 --> 00:35:36.520
people about it. And I
appreciate you talking to me.

586
00:35:37.020 --> 00:35:40.560
Thank you. This has been
another episode of Hanselminutes and

587
00:35:40.560 --> 00:35:54.060
we'll see you again next
week. <inaudible>.

