WEBVTT FILE

1
00:00:12.060 --> 00:00:16.650
From Hanselman it's dot com.
It's Hansel minutes, a weekly

2
00:00:16.650 --> 00:00:20.850
discussion with web developer and
technologists. Scott Hanselman hosted by

3
00:00:20.850 --> 00:00:25.800
Carl Franklin. This is Lawrence Ryan announcing
show number one 70 recorded

4
00:00:25.800 --> 00:00:31.410
live Thursday, July 2nd, 2009. Support for
Hanselman it's just provided by

5
00:00:31.410 --> 00:00:35.160
teller at Reb controls. The
most comprehensive suite of components

6
00:00:35.160 --> 00:00:45.780
for windows forms and asp.net
web applications. online@wwwdottelerikdotcomandby.net developers journal

7
00:00:45.810 --> 00:00:51.600
the world's leading.net developer magazine
online at www dot <inaudible>

8
00:00:51.690 --> 00:00:57.900
dot com. You miss episodes,
God talks with <inaudible>. Hi,

9
00:00:57.900 --> 00:00:59.960
this is Scott Hanselman, and
this is another episode of

10
00:00:59.960 --> 00:01:02.780
Hansel minutes. And today I'm
sitting down with Nate cohorting,

11
00:01:03.500 --> 00:01:07.460
who is starting up a
company called <inaudible> limited and

12
00:01:07.490 --> 00:01:12.320
around an agile project. That's
a Kanban system, Nate. Thanks

13
00:01:12.320 --> 00:01:16.340
a lot for chatting with
me today. Thanks. So I

14
00:01:16.340 --> 00:01:18.800
keep hearing people who are
smarter than I saying Kanban

15
00:01:18.800 --> 00:01:21.170
systems. And it's such a,
such a, kind of a

16
00:01:21.170 --> 00:01:23.060
funny sounding word from a
point of view of an

17
00:01:23.060 --> 00:01:27.980
English speaker. It's a, it's
a new way about thinking

18
00:01:27.980 --> 00:01:32.940
around agile, but more towards
lean manufacturing principles. We had

19
00:01:33.500 --> 00:01:36.200
Mary poppin deck on a
couple of months ago. Talk

20
00:01:36.200 --> 00:01:40.670
a little bit about applying
lean to software systems, and

21
00:01:40.940 --> 00:01:43.790
I've been talking very, very
briefly on Twitter with Kenji

22
00:01:43.790 --> 00:01:46.730
here and Abby, who is
a person who works with

23
00:01:46.730 --> 00:01:50.090
Canavan systems in the agile
space. And you are so

24
00:01:50.090 --> 00:01:51.770
into this that you are
going so far as to

25
00:01:51.770 --> 00:01:55.940
actually launch a product around
Kanban systems. So why don't

26
00:01:55.940 --> 00:01:59.300
you explain to folks what
Kanban K a N B

27
00:01:59.300 --> 00:02:01.820
a N systems are and
what they had to do

28
00:02:01.820 --> 00:02:11.110
with software? Sure. Really combine
originally comes from convenance. I'm

29
00:02:11.110 --> 00:02:13.610
pretty sure that's how you
pronounce it as Kanban, but

30
00:02:14.150 --> 00:02:16.760
you know, not being Japanese
myself, I'm not really sure.

31
00:02:17.120 --> 00:02:24.200
I apologize to all Japanese
people. All right. But it

32
00:02:24.230 --> 00:02:27.350
originally comes from the Toyota
production system and really what

33
00:02:27.350 --> 00:02:30.140
Kanban means is just visual
card. So it's just a

34
00:02:30.140 --> 00:02:34.610
way to create visibility for,
you know, a flow and

35
00:02:34.610 --> 00:02:38.240
a process. So when you
applied the software, typically what

36
00:02:38.240 --> 00:02:39.860
you get is a board.
You know, that looks a

37
00:02:39.860 --> 00:02:43.280
lot like an agile storyboard
that has cards on it

38
00:02:43.400 --> 00:02:47.600
that represent work items. And
so, you know, as the

39
00:02:47.630 --> 00:02:50.960
work is completed or goes
through phases, you've moved the

40
00:02:50.960 --> 00:02:55.430
card slowly across the board
and, you know, indicating process

41
00:02:58.130 --> 00:03:00.610
the disclaimer too, not a
lean expert, I'm not a

42
00:03:00.610 --> 00:03:04.990
combine expert for me. It's
just like a tool that's,

43
00:03:05.020 --> 00:03:08.440
that's useful for, for our
product, the goal with our

44
00:03:08.440 --> 00:03:10.810
products, not necessarily to create
a combine system for the

45
00:03:10.810 --> 00:03:16.300
web, although it works that
way originally, I was just

46
00:03:16.300 --> 00:03:20.500
frustrated with the complexity of,
and costs two of the

47
00:03:20.500 --> 00:03:24.850
existing solutions that were on
the market. And so, you

48
00:03:24.850 --> 00:03:28.840
know, something for small teams,
something that, you know, particularly

49
00:03:28.840 --> 00:03:33.700
for startups, maybe just for
hobbyists too, but can also

50
00:03:33.700 --> 00:03:36.490
scale up to, you know,
medium or larger size team.

51
00:03:37.690 --> 00:03:40.270
I kind of felt was,
was really lacking a lot

52
00:03:40.270 --> 00:03:44.500
of user experience of, of
the, you know, existing products,

53
00:03:44.530 --> 00:03:49.000
which is not really, they're
very difficult to use. And

54
00:03:49.000 --> 00:03:51.760
again, it kind of forced
you down a certain road,

55
00:03:52.450 --> 00:03:55.630
you know, more of the,
the agile methodology, which requires

56
00:03:55.630 --> 00:04:01.720
iterations and things like that.
So for us, you know,

57
00:04:01.720 --> 00:04:06.640
Kanban is just a way
of managing a product or

58
00:04:06.640 --> 00:04:08.620
a project I should say,
and in a very simple

59
00:04:08.620 --> 00:04:13.660
fashion. So what Zen lets
you do is it actually

60
00:04:13.660 --> 00:04:16.810
creates, you know, this, this
Kanban board on the web

61
00:04:17.170 --> 00:04:20.290
and, you know, you can
drag and drop your cards

62
00:04:20.290 --> 00:04:23.830
and move them through, you
know, a phased process. So

63
00:04:24.790 --> 00:04:28.000
I give you an example,
pretty common development process would

64
00:04:28.000 --> 00:04:32.590
be, you know, maybe design
develop, deploy. Okay. So particularly

65
00:04:32.590 --> 00:04:34.030
on the web, if you're
working with, you know, a

66
00:04:34.030 --> 00:04:36.670
creative team, you've got graphic
designers or something like that.

67
00:04:37.180 --> 00:04:39.670
So let's say you have
some sort of feature that

68
00:04:39.670 --> 00:04:43.690
you want to implement you
drag that you'd essentially create

69
00:04:43.690 --> 00:04:49.420
a story card that represents
that work item, like CRC

70
00:04:49.420 --> 00:04:52.930
cards that were familiar with
in the past, right? Yeah.

71
00:04:52.990 --> 00:04:56.350
It's very similar to the
story card and, and in

72
00:04:56.350 --> 00:04:58.930
Kanban, the depends on the
team. I mean, it doesn't

73
00:04:58.930 --> 00:05:01.030
necessarily have to be a
user story itself. I mean,

74
00:05:01.030 --> 00:05:03.040
you don't have to spell
it out as, you know,

75
00:05:03.460 --> 00:05:05.650
as a user or I
should be able to do

76
00:05:05.710 --> 00:05:11.500
X, Y, Z. So I
can, you know, ABC, we

77
00:05:11.500 --> 00:05:14.140
just call them story cards
again for, you know, familiarity

78
00:05:14.140 --> 00:05:16.090
purposes. And you know, of
course you can use them

79
00:05:16.090 --> 00:05:19.630
that way if you'd like,
but so everything is based

80
00:05:19.630 --> 00:05:21.760
around, you know, this concept
of work item or story

81
00:05:21.760 --> 00:05:25.780
card. So if my, if
my process is, you know,

82
00:05:26.710 --> 00:05:30.760
design develop, deploy, I can
create, you know, a backlog

83
00:05:30.760 --> 00:05:33.010
of items, just like, you
know, you're used to with

84
00:05:33.010 --> 00:05:36.310
the typical agile process. And
then when I'm, when I'm

85
00:05:36.310 --> 00:05:39.010
ready and Sam, the program
manager, project manager, I want

86
00:05:39.010 --> 00:05:43.840
to drag that story card
into design, which tells my

87
00:05:43.870 --> 00:05:47.140
design team to go and
work on it. Okay. When

88
00:05:47.140 --> 00:05:49.720
that's finished, they can Mark
it as ready. And so

89
00:05:49.750 --> 00:05:53.440
let's see I'm a developer
now, and I'm looking for

90
00:05:53.440 --> 00:05:58.160
something to work on. I
would then move something that's

91
00:05:58.160 --> 00:06:01.550
ready into the development phase
and start working on it.

92
00:06:01.550 --> 00:06:04.370
So essentially you create this
poll system, which is another

93
00:06:04.970 --> 00:06:10.340
important part of, you know,
lean processes rather than pushing

94
00:06:11.150 --> 00:06:16.520
work, you know, through the
process. So as a designer,

95
00:06:16.520 --> 00:06:18.740
I'm not going to tell
a developer what to work

96
00:06:18.740 --> 00:06:21.320
on it. Developer is going
to pull something from the

97
00:06:21.320 --> 00:06:26.390
available work, right? So the
concept of Kanban is to

98
00:06:26.420 --> 00:06:29.660
create, again, visibility on what
is ready and what is

99
00:06:29.660 --> 00:06:34.160
not, and who is working,
who is not that sort

100
00:06:34.160 --> 00:06:36.190
of thing. So this is
a lot like scrum and

101
00:06:36.190 --> 00:06:39.550
the concept of it. There's
a backlog Q a of,

102
00:06:39.630 --> 00:06:43.150
of a unit of work,
except a scrum is very

103
00:06:43.150 --> 00:06:47.710
much a time box iteration
style system. Well combine is,

104
00:06:48.220 --> 00:06:50.260
is more of a, of
a flowing system that has

105
00:06:50.260 --> 00:06:53.830
no formal time boxing where
a unit of work is,

106
00:06:54.250 --> 00:06:59.080
is the most important. Exactly.
Right? The closest thing I

107
00:06:59.080 --> 00:07:02.480
would say, as to any
sort of time box, it

108
00:07:02.480 --> 00:07:05.890
would be what's called a
minimally marketable feature or MMF.

109
00:07:05.950 --> 00:07:07.540
And really, it's not, I
wouldn't say it's a time

110
00:07:07.540 --> 00:07:12.190
box at all, but it's
a concept that it's, it's

111
00:07:12.190 --> 00:07:15.070
really more like an Epic,
I guess, in scrum, where

112
00:07:15.070 --> 00:07:18.280
you have a collection of
stories that represents something that

113
00:07:18.280 --> 00:07:20.860
will be part of the
product, a feature. And so

114
00:07:20.860 --> 00:07:23.620
the whole goal of Kanban
it's to try to focus

115
00:07:23.620 --> 00:07:27.070
on mentally marketable features and
reduce your stories to be

116
00:07:27.070 --> 00:07:30.520
the same size. And then
you really find that you

117
00:07:30.520 --> 00:07:33.310
don't need iterations anymore. You
don't need to create these

118
00:07:33.310 --> 00:07:38.410
synthetic time boxes. Cause I
mean, you know, if you're

119
00:07:38.410 --> 00:07:40.750
been involved in a scrum
process, it always seems like,

120
00:07:42.340 --> 00:07:44.710
you know, you, you try
to estimate everything. Everything's still

121
00:07:44.710 --> 00:07:46.600
based on estimates. Cause you
have to come up with,

122
00:07:46.630 --> 00:07:49.510
you know, the, the bag
of items that you have

123
00:07:49.510 --> 00:07:53.830
to work on. You know,
this time box and estimation

124
00:07:53.830 --> 00:07:58.060
is inherently flawed and software
it's extremely difficult. I mean,

125
00:07:58.060 --> 00:08:01.270
there's, you know, been huge
books written about it. And

126
00:08:01.330 --> 00:08:05.890
actually the McConnell book software
estimation is basically just a

127
00:08:05.890 --> 00:08:08.530
big collection of things that
you can try, you know,

128
00:08:08.530 --> 00:08:11.230
to try to estimate things.
And the end of the

129
00:08:11.230 --> 00:08:13.210
book is basically like, we
don't really know what works,

130
00:08:13.720 --> 00:08:16.720
just try different things until
you find something. Okay. So

131
00:08:16.720 --> 00:08:19.090
let's, let's, let's reset for
a second and just make

132
00:08:19.090 --> 00:08:21.640
sure that folks are following.
So w with a Kanban

133
00:08:21.640 --> 00:08:25.360
system, your backlog queue is
filled with these, these MMFs

134
00:08:25.360 --> 00:08:29.650
these minimum marketable features that
are, you know, your, the

135
00:08:29.650 --> 00:08:31.690
items, the things that you
need to be working on,

136
00:08:31.690 --> 00:08:35.050
and they sit in your
backlog, then developers pull them

137
00:08:35.770 --> 00:08:39.100
through a process of whether
they're ready, working or complete.

138
00:08:39.130 --> 00:08:42.160
They can Mark them whether
or not they're blocked or

139
00:08:42.160 --> 00:08:45.100
they need assistance. All of
which sounds a lot like

140
00:08:45.100 --> 00:08:50.260
scrum, except it's not, timeboxed,
it's continuous flow of work.

141
00:08:50.260 --> 00:08:52.600
And the, the, the stuff
is pulled through the system.

142
00:08:53.110 --> 00:08:55.860
Now, when I had done
scrum, I'd a tool called

143
00:08:55.860 --> 00:08:59.190
version one, and we had
a pretty large backlog. It

144
00:08:59.190 --> 00:09:01.920
seemed like the system was
designed for me to have

145
00:09:02.340 --> 00:09:04.410
a very large backlog to
have as many things as

146
00:09:04.410 --> 00:09:07.590
we could describe. Almost like,
like the getting things done

147
00:09:07.590 --> 00:09:11.340
style of to do list
management, where you have all

148
00:09:11.340 --> 00:09:13.230
the things you could ever
want and you put them

149
00:09:13.230 --> 00:09:16.110
in the backlog. But when
I read about Kanban on

150
00:09:16.110 --> 00:09:19.650
the web, it says to
have a minimum amount of

151
00:09:20.700 --> 00:09:24.990
marketable features, they really want
the queue. Not very large.

152
00:09:25.450 --> 00:09:29.540
Do you subscribe to that?
Yes, definitely. The fewer, the

153
00:09:29.540 --> 00:09:33.110
better cause really the everything
in lean is all geared

154
00:09:33.110 --> 00:09:37.130
around reducing waste. So, and
there's, there's actually, I th

155
00:09:37.150 --> 00:09:40.430
I believe it's seven different
wastes that they prescribed as

156
00:09:40.430 --> 00:09:47.480
being, you know, counterproductive. And
if you have a lot

157
00:09:47.480 --> 00:09:49.250
of stuff in your backlog,
or if you queue at

158
00:09:49.250 --> 00:09:51.470
all, I'm sure when you,
when you spoke with Mary

159
00:09:51.470 --> 00:09:54.650
Poppendieck, she, she talked about
this also no more queuing

160
00:09:54.650 --> 00:09:57.980
you do, and the longer
things remaining in the queue,

161
00:09:58.040 --> 00:10:01.370
the more waste you're actually
developing, because let's say you

162
00:10:01.370 --> 00:10:07.160
define a user story, you
know, in July. And it

163
00:10:07.160 --> 00:10:10.310
doesn't actually get worked on
until say September. Well, in

164
00:10:10.310 --> 00:10:12.980
the meantime, you know, a
lot of things have changed,

165
00:10:12.980 --> 00:10:17.060
you know, software's changed, you
know, maybe the businesses altered,

166
00:10:17.120 --> 00:10:19.760
you know, focus and shifted,
you know, the goals and

167
00:10:19.760 --> 00:10:22.580
that sort of thing. And
so all of that work

168
00:10:22.580 --> 00:10:25.670
that you spent originally to
define that story is not

169
00:10:25.670 --> 00:10:28.220
wasted. And so you find
that you have to redefine

170
00:10:28.220 --> 00:10:31.550
it. So by keeping your
backlog as small as possible,

171
00:10:32.240 --> 00:10:35.030
you can avoid that kind
of waste. Where is that

172
00:10:35.030 --> 00:10:39.170
information stored about the w
what you ultimately want? I

173
00:10:39.170 --> 00:10:41.810
mean, if you have a
vision for your application, where

174
00:10:41.810 --> 00:10:47.090
do you put those, if
not in the backlog? Well,

175
00:10:47.480 --> 00:10:52.310
actually, it's, it's kinda funny
because one thing that they,

176
00:10:52.340 --> 00:10:56.600
that they being, you know,
kind of lean practitioners prescribe

177
00:10:56.630 --> 00:10:59.690
is that if something is
important, it will continue to

178
00:10:59.690 --> 00:11:04.790
become, you know, present. You
don't keep coming back up.

179
00:11:05.270 --> 00:11:07.640
So rather than creating a
catalog of all the things

180
00:11:07.640 --> 00:11:10.550
that you ever want to
do, you know, with your

181
00:11:10.550 --> 00:11:13.940
product, you'll find that the
important features, the things that

182
00:11:13.940 --> 00:11:17.990
your customers, your clients want
most will continue to reappear.

183
00:11:18.200 --> 00:11:21.660
So these, these MMS that,
you know, again, represent the,

184
00:11:21.660 --> 00:11:24.440
the real features are your
product will continue to, you

185
00:11:24.440 --> 00:11:27.140
know, come back. Okay. The
other thing that, that helps

186
00:11:27.140 --> 00:11:31.580
you avoid is creating unnecessary
work. So rather than adding

187
00:11:31.580 --> 00:11:33.860
features that no one really
is going to use, or

188
00:11:33.860 --> 00:11:37.730
no one really cares about
it helps you focus on

189
00:11:37.730 --> 00:11:39.890
the things that people really
care about, you know, rather

190
00:11:39.890 --> 00:11:42.350
than focusing on the 20%
less, you focus on the

191
00:11:42.350 --> 00:11:47.300
80, and that's another large
waste in, you know, again

192
00:11:47.300 --> 00:11:53.410
in lean ideas, you know,
unnecessary features is the other

193
00:11:53.410 --> 00:11:56.830
thing in lean Because this,
this kind of style of

194
00:11:56.860 --> 00:12:01.630
this Kanban style came from
manufacturing in, at Toyota. Is

195
00:12:01.630 --> 00:12:04.870
it that, that the, the,
the most efficient number of

196
00:12:04.870 --> 00:12:07.600
threads in any system is
one and that they were

197
00:12:07.600 --> 00:12:10.780
trying to avoid people multitasking.
I mean, I believe that

198
00:12:10.780 --> 00:12:13.150
the understanding is that the
team works on as few

199
00:12:13.150 --> 00:12:16.870
of these features as possible.
So as to maximize throughput

200
00:12:16.900 --> 00:12:21.540
and accomplish what they call
one piece flow. Right. Exactly.

201
00:12:21.840 --> 00:12:24.450
Yeah. That's definitely true. And
you can avoid, I mean,

202
00:12:24.450 --> 00:12:26.880
if you, you know, limit
the amount of things that

203
00:12:26.880 --> 00:12:28.890
you're working on at a
time, you can avoid feeling

204
00:12:28.890 --> 00:12:33.420
overwhelmed, or you can avoid
thrashing between tasks, because there's,

205
00:12:33.420 --> 00:12:37.230
you know, just like with
a, with a computer, you

206
00:12:37.230 --> 00:12:39.840
know, your brain has to
swap out information in order

207
00:12:39.840 --> 00:12:41.880
to, you know, keep things
straight. So if you're working

208
00:12:41.880 --> 00:12:44.370
on multiple tasks at the
same time, you lose a

209
00:12:44.370 --> 00:12:48.480
lot of your potential because
you have to context switch.

210
00:12:48.900 --> 00:12:51.210
So if you can focus
and just work on one

211
00:12:51.210 --> 00:12:55.520
thing at a time, you
know, you're, you don't, you

212
00:12:55.530 --> 00:12:58.860
can avoid those context switches,
and we actually would combat.

213
00:12:58.860 --> 00:13:01.320
And lets you do is
again, let's, let's say you

214
00:13:01.320 --> 00:13:05.280
have those same phases, design
develop, deploy. You can actually

215
00:13:05.280 --> 00:13:09.150
set limits on the phases
that, that you have on

216
00:13:09.150 --> 00:13:12.750
your board. So you can
restrict the amount of work

217
00:13:12.750 --> 00:13:14.610
that can be in that
phase at any one point

218
00:13:14.610 --> 00:13:18.210
in time. So let's say
you have two developers, you

219
00:13:18.210 --> 00:13:21.780
might set a limit of
two on your development phase,

220
00:13:21.960 --> 00:13:24.300
it's it forces developers to
only work on one thing

221
00:13:24.300 --> 00:13:29.400
at a time. That's again,
a way to avoid, you

222
00:13:29.400 --> 00:13:32.520
know, creating these, these large
queues of work that has

223
00:13:32.520 --> 00:13:34.740
to be done because again,
talking about scrum again and

224
00:13:34.740 --> 00:13:36.810
not the berate rate scrum
or anything like that, cause

225
00:13:36.810 --> 00:13:40.890
it's very useful. But at
the beginning of the iteration,

226
00:13:40.890 --> 00:13:43.500
I might get, say 10
user stories to work on

227
00:13:43.500 --> 00:13:45.480
or five user stories to
work on, depending on how

228
00:13:45.480 --> 00:13:48.210
large they are. Right. And
so I have to then

229
00:13:48.210 --> 00:13:50.370
figure out what order I
want to work on those

230
00:13:50.400 --> 00:13:53.190
in, you know, and I'm
much more likely to thrash

231
00:13:53.220 --> 00:13:56.580
between them. And so with
Kanban rather than, you know,

232
00:13:56.580 --> 00:14:00.870
focusing on stacking up work
and then burning it down,

233
00:14:00.900 --> 00:14:03.330
which is really what scrum
is all about. Again, like

234
00:14:03.330 --> 00:14:05.640
you said, it's just a
continuous sort of flow through

235
00:14:05.640 --> 00:14:10.050
the pipeline. And then of
course the other thing along

236
00:14:10.050 --> 00:14:12.660
with that is a stop
the line sort of culture,

237
00:14:12.690 --> 00:14:17.030
which is, you know, if,
if something goes wrong with

238
00:14:17.040 --> 00:14:19.590
a task, particularly if you
have limits on your faces,

239
00:14:19.650 --> 00:14:24.090
if something blocks that, that
task you actually, then everyone

240
00:14:24.090 --> 00:14:27.030
should focus on fixing that,
you know, and if there's

241
00:14:27.300 --> 00:14:29.880
additional labor that has to
be applied to it, you

242
00:14:29.880 --> 00:14:33.000
know, you need help from
other sources. Everybody should focus

243
00:14:33.000 --> 00:14:38.130
on fixing that task. So
then you can actually, you

244
00:14:38.130 --> 00:14:41.670
know, Mark each individual story
card as ready and blocked.

245
00:14:41.670 --> 00:14:44.460
And you can give a
reason why not only that,

246
00:14:44.460 --> 00:14:47.550
but we have a messaging
system too, that fires out

247
00:14:47.730 --> 00:14:51.560
emails and IMS and, you
know, keeps people of what's

248
00:14:51.560 --> 00:14:53.750
going on with the stories.
So if you see that,

249
00:14:53.960 --> 00:14:56.900
you know, something's gone wrong,
you can proactively, you know,

250
00:14:57.080 --> 00:14:59.740
respond to it. Do you
know how to make the

251
00:14:59.740 --> 00:15:02.920
possible out of the impossible
while the dotnet ninjas at

252
00:15:02.920 --> 00:15:05.590
Telerik? Do they just released
a huge pack of web

253
00:15:05.590 --> 00:15:08.860
controls, all built on top
of aspirin at Ajax, that'll

254
00:15:08.860 --> 00:15:12.010
help you build impossibly fast
and interactive applications in no

255
00:15:12.010 --> 00:15:15.700
time at all. They've made
the impossible possible in desktop

256
00:15:15.700 --> 00:15:19.210
development. If you think you
can have a carousel component

257
00:15:19.210 --> 00:15:22.390
and wind forms, well you
can. They're windows forms, suite

258
00:15:22.450 --> 00:15:25.120
features a super powerful grid
view control on 32 other

259
00:15:25.120 --> 00:15:29.140
crazy desktop components. That'll give
you a dazzling WPF like

260
00:15:29.140 --> 00:15:32.080
features, but in wind farms,
they do the same thing

261
00:15:32.080 --> 00:15:34.540
in reporting solutions with a
new design surface, like nothing

262
00:15:34.540 --> 00:15:37.990
else looks just like graph
paper gives you advanced page

263
00:15:38.020 --> 00:15:41.170
layout capabilities makes it feel
more like a graphic design

264
00:15:41.170 --> 00:15:44.920
software than a reporting solution.
Go check them out@telerik.com and

265
00:15:44.920 --> 00:15:49.270
be at net Ninja. Thanks
for listening now with scrum

266
00:15:49.270 --> 00:15:51.790
tools. And I use version
one only as an example,

267
00:15:51.790 --> 00:15:53.590
not to pick on them,
but because that's the application

268
00:15:53.590 --> 00:15:58.390
that I used for a
very long time, they have

269
00:15:58.390 --> 00:16:00.790
a lot of additional metadata
that can be attached to

270
00:16:00.790 --> 00:16:03.760
a task so that you
can see your, your velocity.

271
00:16:04.730 --> 00:16:07.330
You can see burn down
charts that show, you know,

272
00:16:07.330 --> 00:16:10.990
the average speed for a
backlog item. There's a lot

273
00:16:11.020 --> 00:16:13.480
of well on its face.
It is a pretty simple

274
00:16:13.480 --> 00:16:16.720
application version. One has a
lot of depth and richness

275
00:16:16.720 --> 00:16:18.310
to it in the sense
that it's got so many

276
00:16:18.310 --> 00:16:20.800
bits of metadata that you
can apply. I've been playing

277
00:16:20.800 --> 00:16:24.970
around with your product called
Zen. And I must say,

278
00:16:24.970 --> 00:16:27.280
it's ballsy to call your
product Zen. I wonder how

279
00:16:27.280 --> 00:16:30.760
you're going to be able
to Google for it. How

280
00:16:30.760 --> 00:16:35.110
are you? It's it's such
a simple, you know, frankly

281
00:16:35.110 --> 00:16:39.160
zen-like interface, but you still
have charts and graphs for

282
00:16:39.160 --> 00:16:42.670
performance. How do you keep
track of things like lead

283
00:16:42.670 --> 00:16:45.910
time and cycle time when
the board is really just

284
00:16:46.240 --> 00:16:50.980
little cards with little bits
of text on it, Right.

285
00:16:51.370 --> 00:16:54.760
Well, you know, as a,
we keep track of, of

286
00:16:54.760 --> 00:16:58.210
the timestamp, you know, whenever
anything happens to a story.

287
00:16:58.930 --> 00:17:01.480
So, you know, when it's
created, when it's moved onto

288
00:17:01.480 --> 00:17:03.730
the board, when it's moved
off to the board. And

289
00:17:03.730 --> 00:17:06.760
so, you know, it's pretty
easy to track things like

290
00:17:06.760 --> 00:17:09.910
lead time, cycle time and
work time, which is what

291
00:17:09.910 --> 00:17:13.090
we call. So, so I
guess for people listening, if

292
00:17:13.090 --> 00:17:15.820
they're not familiar with, with
the different metrics and lead

293
00:17:17.320 --> 00:17:19.600
lead time is the amount
of time between when you

294
00:17:19.600 --> 00:17:22.330
create a work item or
a story and when you

295
00:17:22.330 --> 00:17:24.610
start working on it. So
that's the amount of time

296
00:17:24.610 --> 00:17:27.220
that the business knows that
it's going to take, you

297
00:17:27.220 --> 00:17:30.670
know, the engineering team to
start working on it. Then

298
00:17:30.670 --> 00:17:33.160
cycle time is the amount
of time between when it's

299
00:17:33.160 --> 00:17:36.250
created and when it's completed.
So that would be, you

300
00:17:36.250 --> 00:17:39.430
know, the amount of lead
time then plus how long

301
00:17:39.430 --> 00:17:42.670
it actually takes to work
on. And then we call

302
00:17:42.880 --> 00:17:45.220
work time is the amount
of time that the story

303
00:17:45.220 --> 00:17:49.830
is actually in process. So
on your board. And again,

304
00:17:49.830 --> 00:17:53.070
we just track timestamps between
those. We actually have another

305
00:17:53.070 --> 00:17:56.460
thing called wait time, which
is the amount of time

306
00:17:56.460 --> 00:17:59.130
that you spend during handoffs.
So again, one of the

307
00:17:59.130 --> 00:18:02.430
things that you want to
limit, one of the wastes

308
00:18:02.460 --> 00:18:05.610
is handoffs. So the amount
of time that it takes,

309
00:18:05.610 --> 00:18:08.460
so let's say a designer
marks, something is ready. How

310
00:18:08.460 --> 00:18:11.310
long did it take before
a developer claims it and

311
00:18:11.310 --> 00:18:14.190
pulls it into the development
phase? You know, again, the

312
00:18:14.190 --> 00:18:19.380
faster, the better. So that
the sum total of that

313
00:18:19.380 --> 00:18:21.990
represents your wait time, the
amount of, you know, essentially

314
00:18:21.990 --> 00:18:25.200
wasted time that that story
spent idle on your board.

315
00:18:26.940 --> 00:18:29.490
And then we have a
final metric called efficiency, which

316
00:18:29.490 --> 00:18:32.130
is just a calculation that
uses the other metrics and

317
00:18:32.130 --> 00:18:34.740
gives you just a basic
percentage. And the idea is

318
00:18:34.740 --> 00:18:37.710
to try to optimize that
efficiency as much as possible.

319
00:18:38.640 --> 00:18:41.220
But I mean, we really
just focus on the very

320
00:18:41.220 --> 00:18:43.800
core metrics that you need,
that you need in order

321
00:18:43.800 --> 00:18:49.050
to understand what's going on
with your system. And if,

322
00:18:49.110 --> 00:18:51.240
if people are used to,
you know, more scrum sort

323
00:18:51.240 --> 00:18:54.570
of agile process, things like
velocity is very similar to

324
00:18:54.570 --> 00:18:58.590
your cycle time. You know,
again, without the stack up

325
00:18:58.600 --> 00:19:01.020
and burned down kind of
effect it, it's calculated in

326
00:19:01.020 --> 00:19:02.610
a little bit different way,
but you can treat it

327
00:19:02.610 --> 00:19:05.670
the same way. And of
course the whole goal of

328
00:19:06.240 --> 00:19:09.030
a lean process is to
get your cycle time. Again,

329
00:19:09.030 --> 00:19:11.190
of course it's smallest as
short as possible, I should

330
00:19:11.190 --> 00:19:15.960
say, but also consistent. So
the business can rely on

331
00:19:15.960 --> 00:19:19.860
it then as a, you
know, they know when they

332
00:19:19.860 --> 00:19:23.370
have a request, it will
take about this long to

333
00:19:23.370 --> 00:19:26.670
complete. So if your cycle
time is seven working days,

334
00:19:26.820 --> 00:19:31.320
you know, the businesses to
understand, you know, that when

335
00:19:31.320 --> 00:19:33.090
they come and ask someone
to do it, it's going

336
00:19:33.090 --> 00:19:36.390
to take about seven days.
And that's how you can

337
00:19:36.390 --> 00:19:39.630
avoid the iteration. See, because
you still have that sort

338
00:19:39.630 --> 00:19:43.770
of service level agreement with
your, with your business. You

339
00:19:43.770 --> 00:19:46.230
know, that if they ask
you for something, you know,

340
00:19:46.260 --> 00:19:48.440
they'll get it in a
certain amount of time. It

341
00:19:48.440 --> 00:19:51.860
does require some discipline though.
And the nice thing about

342
00:19:51.860 --> 00:19:54.950
scrum from, from a, for
someone who's new to agile

343
00:19:54.950 --> 00:19:57.770
is that because it's time
boxed when you're done, you

344
00:19:57.770 --> 00:20:00.770
have to, you have to
stop. I mean, there's scrum

345
00:20:00.770 --> 00:20:03.770
masters who are good, tend
to be fairly draconian about

346
00:20:03.770 --> 00:20:05.540
the fact that we're needed.
We need to finish. Now,

347
00:20:05.590 --> 00:20:07.880
the end of the end
of the iteration is now

348
00:20:08.810 --> 00:20:13.910
well with something that's more
feature driven that, that, that,

349
00:20:13.910 --> 00:20:16.580
that sense of closure I
think would be harder to

350
00:20:16.580 --> 00:20:21.320
get. That's probably true. And
I guess the key there

351
00:20:21.320 --> 00:20:26.420
is the MMF, the minimum
marketable feature that really represents,

352
00:20:26.420 --> 00:20:28.280
you know, a batch of
work that you can kind

353
00:20:28.280 --> 00:20:33.770
of celebrate that you've completed.
There's also, there's a concept

354
00:20:33.770 --> 00:20:36.890
called scrum bond, which is,
you know, kind of a

355
00:20:36.890 --> 00:20:39.890
hybrid approach, which a lot
of teams will use. You

356
00:20:39.890 --> 00:20:42.050
know, particularly if they've already
used scrum and they want

357
00:20:42.050 --> 00:20:44.570
to move towards a more
lean process. They'll, they'll use

358
00:20:44.570 --> 00:20:48.250
something like scrum bond, which
keeps things like and estimates,

359
00:20:48.250 --> 00:20:52.540
but also applies, you know,
the concept of the Kanban

360
00:20:52.540 --> 00:20:55.120
board and a pull approach,
which is really the whole

361
00:20:55.120 --> 00:20:57.130
key to lean is, is
the poll it's not so

362
00:20:57.130 --> 00:20:59.760
much, I don't know about
that. I think that, I

363
00:20:59.760 --> 00:21:02.550
think it was Brad Wilson.
I think he was the

364
00:21:02.550 --> 00:21:07.080
guy that said Scrummerfall when
you think you're doing scrum,

365
00:21:07.080 --> 00:21:09.660
but you're really just doing
waterfall. It seems like scrum

366
00:21:09.660 --> 00:21:11.790
bond sounds like an excuse
to be lazy, but you

367
00:21:11.790 --> 00:21:15.030
get to have a cool
board. Yeah, it can be.

368
00:21:15.450 --> 00:21:17.970
I would, yeah. I imagine
that a lot of teams

369
00:21:17.970 --> 00:21:21.810
will go through that, but
you know, it, it realistically,

370
00:21:21.810 --> 00:21:23.310
you know, there has to
be a way that you

371
00:21:23.310 --> 00:21:26.580
can get buy in from
people I think, and, you

372
00:21:26.580 --> 00:21:29.310
know, scrum bond gives you
all of those nice, familiar

373
00:21:29.310 --> 00:21:31.950
elements from, you know, your
scrum process, if you've been

374
00:21:31.950 --> 00:21:34.500
successful with that, but allows
you to focus on, you

375
00:21:34.500 --> 00:21:38.220
know, reduction of waste and,
and, you know, things like

376
00:21:38.220 --> 00:21:41.940
that that are important in
lean In your application. One,

377
00:21:43.260 --> 00:21:46.320
one, one item, one little
card on the board. Is

378
00:21:46.320 --> 00:21:49.500
that one story or one
minimally marketable feature, or is

379
00:21:49.500 --> 00:21:53.820
that the same thing? That's
for our, for our application

380
00:21:53.820 --> 00:21:57.750
at story. So again, we
call it story just for

381
00:21:58.050 --> 00:22:01.050
familiarity sake. Like I was
saying that it really is

382
00:22:01.050 --> 00:22:04.530
just a work item and
it can be anything that,

383
00:22:04.970 --> 00:22:08.070
that the project owner wants.
So if, you know, you

384
00:22:08.070 --> 00:22:10.440
want to implement that as
a task, then that's fine.

385
00:22:10.440 --> 00:22:12.390
If you want to implement
it as a user story,

386
00:22:12.750 --> 00:22:15.210
that then has a collection
of tasks, then that's also

387
00:22:15.210 --> 00:22:18.210
okay. But the unit of
work that moves across the

388
00:22:18.210 --> 00:22:23.610
board, you know, is again
constant in that project. So

389
00:22:23.610 --> 00:22:25.800
typically, I mean, we use
it, of course, for the

390
00:22:25.800 --> 00:22:28.410
development of Zen, we, you
know, dog food did it.

391
00:22:29.070 --> 00:22:34.230
And usually it comes more
towards a story rather than

392
00:22:34.980 --> 00:22:39.030
an MMF forecast, you know?
So, and then there's a

393
00:22:39.240 --> 00:22:46.560
grouping of stories would represent
an MMF, Zen supports, tagging

394
00:22:46.770 --> 00:22:51.300
to and coloring for the
different cards. So an easy

395
00:22:51.300 --> 00:22:53.670
way to define an MNF
is to create, you know,

396
00:22:53.670 --> 00:22:57.690
colors or add a tag
that describes the NMS and

397
00:22:57.690 --> 00:23:01.980
then group your, your short
cards that way, keep them

398
00:23:01.980 --> 00:23:05.370
organized Effectively kind of drawing
a dotted line around them.

399
00:23:05.370 --> 00:23:07.980
And they're, they're associated by
their tag or associated by

400
00:23:07.980 --> 00:23:12.240
their color. Right. Exactly. Yeah.
And I guess the goal

401
00:23:13.050 --> 00:23:16.980
with Zen is again, to
create something that's, that's really

402
00:23:16.980 --> 00:23:20.070
simple and really flexible and
doesn't force you down any

403
00:23:20.070 --> 00:23:22.710
specific path. And so you'll
see a lot of features

404
00:23:22.710 --> 00:23:27.720
like that are left open-ended
without maybe prescribing some guidance,

405
00:23:27.720 --> 00:23:30.870
but not necessarily restricting and
forcing you to do any

406
00:23:30.870 --> 00:23:35.340
certain thing. For example, estimates,
there's a concept called size

407
00:23:35.400 --> 00:23:39.630
in Zen for story cards,
but it's freeform. If you

408
00:23:39.630 --> 00:23:42.720
want to call it small,
medium, large do t-shirt sizing.

409
00:23:42.720 --> 00:23:44.730
That's great. If you want
to do story points, that's

410
00:23:44.730 --> 00:23:47.540
great hours. That's fine too.
If you want to leave

411
00:23:47.540 --> 00:23:49.850
it out completely because you
don't estimate then that's okay.

412
00:23:49.850 --> 00:23:54.560
Also. So one of the
things that I've found when

413
00:23:54.560 --> 00:23:56.810
I was trying to use
some of the older or

414
00:23:56.810 --> 00:24:01.130
existing, you know, products, is
that they all kind of

415
00:24:01.130 --> 00:24:05.480
force the so-called best practices
of agile, you know, on

416
00:24:05.480 --> 00:24:08.450
you. But if you're just
a small team, you might

417
00:24:08.450 --> 00:24:10.670
not want to adopt all
of those different, you know,

418
00:24:10.700 --> 00:24:13.130
agile processes all at once,
or you might want to

419
00:24:13.130 --> 00:24:16.520
do it slowly, or you
might find that, that you

420
00:24:16.520 --> 00:24:19.700
find different ways to work.
Cause again, the whole concept

421
00:24:19.700 --> 00:24:24.860
of lean is, is Kaizen
continuous improvement, which of course

422
00:24:24.860 --> 00:24:29.780
is where the name Zen
comes from. But so that's

423
00:24:29.780 --> 00:24:32.090
one of the reasons why
I felt that something like

424
00:24:32.120 --> 00:24:36.050
Zen was really lacking, you
know, in the marketplace. I

425
00:24:36.050 --> 00:24:39.260
mean, if there's a need
for it, because, you know,

426
00:24:39.260 --> 00:24:41.870
as a small team, you
want to be able to

427
00:24:42.500 --> 00:24:44.990
bring those things in as
you need them and get

428
00:24:44.990 --> 00:24:47.180
rid of them as you
need them. And it needs

429
00:24:47.180 --> 00:24:49.550
to be more adaptable. And
I just really didn't feel

430
00:24:49.550 --> 00:24:52.490
like a lot of the
existing tools were set up

431
00:24:52.490 --> 00:24:54.610
to allow you to do
that. I've created a little

432
00:24:54.610 --> 00:24:57.520
project and I'm kind of
poking around in your application.

433
00:24:57.520 --> 00:25:01.630
And I'm wondering how, you
know, with, with, with things

434
00:25:01.650 --> 00:25:04.180
that the demo will, and
I don't just mean your,

435
00:25:04.900 --> 00:25:08.530
the Zen product, but Kanban
in a system where things

436
00:25:08.530 --> 00:25:13.090
were dependent on each other,
like in manufacturing, you could

437
00:25:13.090 --> 00:25:15.010
say, well, you know, putting
the engine together is not

438
00:25:15.010 --> 00:25:17.560
the same as putting the
dashboard together and they, those

439
00:25:17.560 --> 00:25:21.430
two things can happen independently.
But so often this can't

440
00:25:21.430 --> 00:25:24.220
happen until that happens. And
there's these kind of intricate

441
00:25:24.580 --> 00:25:28.030
interdependencies between features, how do
you deal with that in

442
00:25:28.090 --> 00:25:32.740
a Kanban system? Typically it's
just handled in terms of

443
00:25:32.740 --> 00:25:36.850
priority. And, and I mean,
dependencies are going to happen.

444
00:25:37.150 --> 00:25:38.830
You know, it's, it's something
that you should try to

445
00:25:38.830 --> 00:25:44.710
minimize in general. So I
would say, you know, the

446
00:25:44.710 --> 00:25:46.660
way I've always done it
at least is to just

447
00:25:46.660 --> 00:25:49.690
prioritize the features that had
to be completed first, or

448
00:25:49.690 --> 00:25:51.430
I should say, you know,
stories or tasks that had

449
00:25:51.430 --> 00:25:54.520
to be completed first over
the ones that weren't. So

450
00:25:54.520 --> 00:25:57.520
it's not any kind of
situation at least today where

451
00:25:57.520 --> 00:26:04.870
Zen can track, you know,
hierarchy or, or dependencies. It's

452
00:26:04.870 --> 00:26:08.350
really, again, a lot of
this stuff is left as

453
00:26:08.350 --> 00:26:11.890
an exercise to the user
and it's done purposefully. So

454
00:26:11.890 --> 00:26:14.740
you can, you know, manipulate
it in the way that

455
00:26:14.740 --> 00:26:19.630
you feel most comfortable with
working with it. So for

456
00:26:19.630 --> 00:26:24.370
example, Zen allows you to
move cards up and down,

457
00:26:24.400 --> 00:26:26.770
you know, in the phases
and also in your backlog.

458
00:26:26.800 --> 00:26:29.230
So one of the possible
things that you can do

459
00:26:29.230 --> 00:26:31.930
with that is to prioritize
that's, that's the way we've

460
00:26:31.930 --> 00:26:35.650
used it, at least during
development is, you know, again,

461
00:26:35.680 --> 00:26:38.650
higher priority cards will move
to the top. So then

462
00:26:38.650 --> 00:26:41.980
you find that you are
continually reorganizing the cards, you

463
00:26:41.980 --> 00:26:46.710
know, to, you know, prepare
for the next story that

464
00:26:46.710 --> 00:26:48.420
you have to work on.
And then it's easy. It's

465
00:26:48.420 --> 00:26:51.320
just pulling something off the
top of the backlog. Hmm.

466
00:26:51.980 --> 00:26:54.230
So, so this is, that
is a very Zen kind

467
00:26:54.230 --> 00:26:56.480
of thing. I mean, it
might seem cheesy to deliciousness,

468
00:26:56.480 --> 00:26:59.870
but I'm thinking about all
the different systems I've made

469
00:26:59.870 --> 00:27:02.570
in the past and, and,
and, you know, one might

470
00:27:02.570 --> 00:27:04.490
just want to right. Click
and hit properties and put

471
00:27:04.490 --> 00:27:07.040
in priority. But, but there's,
there's so many things that

472
00:27:07.040 --> 00:27:09.740
are positional or implicit. You're
just saying that if you

473
00:27:09.740 --> 00:27:12.110
want things on the top
to be most important, then

474
00:27:12.140 --> 00:27:15.260
good for you, use it,
how it makes you happy

475
00:27:16.190 --> 00:27:18.680
is what I'm hearing you
say. And is that representative

476
00:27:18.710 --> 00:27:22.880
of your product or of
the Kanban philosophy or a

477
00:27:22.880 --> 00:27:27.890
little of both? I would
probably say Both. I think

478
00:27:27.890 --> 00:27:32.000
that there's a lot of,
anytime you try to boil

479
00:27:32.000 --> 00:27:35.060
a philosophy or a methodology
down into a tool, you

480
00:27:35.060 --> 00:27:38.270
always end up trying to
create all of the different

481
00:27:38.270 --> 00:27:42.020
possibilities. And I've actually spoken
with a couple of, you

482
00:27:42.020 --> 00:27:45.050
know, Kanban experts that actually
go and coach, you know,

483
00:27:45.050 --> 00:27:48.910
to try to get teams
to adopt the Kanban. And

484
00:27:49.310 --> 00:27:53.450
typically they want features like
a hierarchy and columns and,

485
00:27:53.480 --> 00:27:57.350
you know, things like that
and things that are very

486
00:27:57.350 --> 00:28:02.390
complex. And probably if you
have a very mature, combined

487
00:28:02.390 --> 00:28:04.880
process, you would want to
use some of those things.

488
00:28:06.110 --> 00:28:09.110
But I don't see those
as being necessary for Zen,

489
00:28:09.110 --> 00:28:11.390
because again, with the whole
concept of Zen is to

490
00:28:11.390 --> 00:28:13.430
be as simple as possible.
So you can just sit

491
00:28:13.430 --> 00:28:18.080
down and use the tool
without any real manual, without

492
00:28:18.080 --> 00:28:21.620
any training or anything like
that. At least in terms

493
00:28:21.620 --> 00:28:23.930
of using the software, the
training that we want to

494
00:28:23.930 --> 00:28:28.940
try to help people with
is trying to get organizational

495
00:28:28.940 --> 00:28:34.070
change and get lean ideas
into their team. So I'd

496
00:28:34.070 --> 00:28:35.960
say to answer your question.
Yeah, it's a little bit

497
00:28:35.960 --> 00:28:38.000
of both, but you know,
it's something that, that was

498
00:28:38.000 --> 00:28:40.070
very important to me when
I was working on Zen

499
00:28:40.070 --> 00:28:42.980
is to make it again,
as flexible as possible and

500
00:28:42.980 --> 00:28:45.470
not make people work the
way I think they should

501
00:28:45.470 --> 00:28:51.230
work. Have you had any,
any practitioners that are like

502
00:28:51.800 --> 00:28:53.990
these we'll look at your
product and kind of review

503
00:28:53.990 --> 00:28:59.540
it for its convenance? Yeah.
I actually have a couple

504
00:28:59.540 --> 00:29:02.480
of people that, like I
said, that are, you know,

505
00:29:02.480 --> 00:29:07.310
more Kanban coach sort of
people using it and giving

506
00:29:07.310 --> 00:29:09.980
us feedback and that sort
of thing. But again, you

507
00:29:09.980 --> 00:29:11.390
know, I don't, I don't
want to put too much

508
00:29:11.390 --> 00:29:15.980
focus honestly, on Kanban because
for us, Kanban is just

509
00:29:15.980 --> 00:29:18.530
a way to create that
simple tool. You know, it's

510
00:29:18.530 --> 00:29:21.530
not, it's really not the
end all be all, but

511
00:29:21.680 --> 00:29:25.310
that, I think some other
people might, you know, profess

512
00:29:25.310 --> 00:29:27.800
that it is it's, it's
something that can be a

513
00:29:27.800 --> 00:29:31.400
useful tool for, you know,
against small teams, particularly, you

514
00:29:31.400 --> 00:29:36.830
know, but if, if something
is not exactly Konbini, you

515
00:29:36.830 --> 00:29:40.310
know, in Zen, that's not
really, you know, for me,

516
00:29:40.310 --> 00:29:42.340
I don't, I don't care
to be honest with you,

517
00:29:43.440 --> 00:29:46.890
Which isn't, which is in
itself a very Zen attitude.

518
00:29:48.060 --> 00:29:52.980
Right? Exactly. The words then
actually comes from Kaizen, you

519
00:29:52.980 --> 00:29:58.470
know, the continuous improvement concept
and lean and agile zen.com

520
00:29:58.470 --> 00:30:02.880
is the site. So I'm
sure I'll get some people

521
00:30:02.880 --> 00:30:06.450
complaining because agile is not
few and so forth. Folks

522
00:30:06.450 --> 00:30:08.580
will be able to see
that the product had agile,

523
00:30:08.600 --> 00:30:12.840
zen.com. It'll be launching on
the seventh. Yup. That's right.

524
00:30:13.860 --> 00:30:16.830
And if they hit the
site in advance, we've got

525
00:30:16.830 --> 00:30:18.810
a mailing list that they
can sign up for them.

526
00:30:18.870 --> 00:30:21.510
We're of course gonna send
out little coupon codes and

527
00:30:21.510 --> 00:30:26.760
other, you know, sort of
little secrets on the, the

528
00:30:26.760 --> 00:30:28.350
mailing list. So if they
want to sign up for

529
00:30:28.350 --> 00:30:31.560
that for updates. All right.
Fantastic. Well, my guest has

530
00:30:31.560 --> 00:30:35.190
been Neko Hari and the
product is agile Zen. And

531
00:30:35.190 --> 00:30:36.360
then for those of you
who want to learn more

532
00:30:36.360 --> 00:30:39.450
about Kanban use your favorite
search engine or a w

533
00:30:39.480 --> 00:30:41.720
actually the article that I
found the most useful was

534
00:30:42.390 --> 00:30:46.320
my friend James shore, James
shore.com has got an interesting

535
00:30:46.320 --> 00:30:50.400
blog about Kanban systems. And
then within that, he links

536
00:30:50.400 --> 00:30:52.590
off to the pop and
Dick's work our local Belushi,

537
00:30:52.590 --> 00:30:55.920
and also Kenji here and
NABI. Thanks a lot, Nate.

538
00:30:55.920 --> 00:30:58.110
I really appreciate you. I
want to chat. Sure. I

539
00:30:58.110 --> 00:31:00.990
appreciate you having me. This
has been another episode of

540
00:31:00.990 --> 00:31:03.240
Hansel minutes and I'll see
you again next week.

