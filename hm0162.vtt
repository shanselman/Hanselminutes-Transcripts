WEBVTT FILE

1
00:00:04.380 --> 00:00:17.750
<inaudible> Hansel minutes.com Hansel minutes,
a weekly discussion with web

2
00:00:17.750 --> 00:00:22.880
developer and technologists. Scott Hanselman
hosted by Carl Franklin. This is

3
00:00:22.880 --> 00:00:28.460
Lawrence Ryan announcing show number one
62. Recorded live Wednesday, May 14th, 2009.

4
00:00:29.900 --> 00:00:33.500
Support for Hanselman it's just
provided by Tellerik rad controls.

5
00:00:33.770 --> 00:00:36.680
The most comprehensive suite of
components for windows forms. An

6
00:00:36.680 --> 00:00:48.320
asp.net web applications online@wwwdottlerikdotcomandby.net developers
journal the world's leading.net developer

7
00:00:48.320 --> 00:00:54.500
magazine online at www dot
<inaudible> dot com. In this

8
00:00:54.500 --> 00:00:58.340
episode, Scott talks with developers,
how Rotenberg and Kurt Monroe.

9
00:01:01.160 --> 00:01:03.020
Hi, this is Scott Hanselman
and this is another episode

10
00:01:03.020 --> 00:01:05.060
of Hansel minutes and I'm
here in Los Angeles at

11
00:01:05.060 --> 00:01:08.780
tech ed North America, 2009,
sitting down with Howe Rodenburg

12
00:01:08.810 --> 00:01:12.680
from PowerShell community.org, and also
now of home Depot. I

13
00:01:12.680 --> 00:01:16.580
Scott, and with Kirk Munroe
from quest software and makers

14
00:01:16.580 --> 00:01:20.180
of power gooey. Hey Scott.
Hey guys. So a PowerShell.

15
00:01:20.180 --> 00:01:21.770
I haven't got a show
on PowerShell in a while.

16
00:01:21.770 --> 00:01:24.950
I used to be big
time hardcore PowerShell because I

17
00:01:24.950 --> 00:01:27.170
was working in, in banking
and we had to manage

18
00:01:27.170 --> 00:01:29.990
a lot of machines, right?
We wanted to do something

19
00:01:30.530 --> 00:01:33.380
end times and at the
time PowerShell was a thing.

20
00:01:33.590 --> 00:01:36.740
This was PowerShell one L
so a was about two,

21
00:01:36.740 --> 00:01:39.200
three years ago, probably three
years ago, even. And I

22
00:01:39.200 --> 00:01:42.170
had to, I had to
write a remoting feature and

23
00:01:42.170 --> 00:01:44.780
makes a, make a service.
So my PowerShell applets could

24
00:01:44.780 --> 00:01:48.020
talk to each other. You
know, PowerShell was really powerful,

25
00:01:48.020 --> 00:01:50.300
but I still needed to
do a lot of stuff

26
00:01:50.930 --> 00:01:53.150
and I've dropped out, right.
I've come to work for

27
00:01:53.150 --> 00:01:56.540
the big blue monster. And
I, I don't have the

28
00:01:56.540 --> 00:01:58.370
need to manage more than
four or five machines at

29
00:01:58.370 --> 00:02:01.700
a time. What have I
missed in PowerShell? What's happened

30
00:02:01.700 --> 00:02:04.370
in last three years in
PowerShell? Well, you probably got

31
00:02:04.370 --> 00:02:07.370
in before one dot O
had even released at that

32
00:02:07.370 --> 00:02:10.170
0.3 years ago, then a
couple of betas. Yeah. So

33
00:02:10.890 --> 00:02:13.310
released a w two, two
and a half years ago.

34
00:02:13.730 --> 00:02:16.550
And, but now we've, we're
coming up on a windows

35
00:02:16.550 --> 00:02:20.330
seven, of course. And in
2008, our two and Microsoft

36
00:02:20.330 --> 00:02:23.000
is going to be releasing
PowerShell version to ship with

37
00:02:23.000 --> 00:02:24.950
both of those operating systems.
Okay. So that means that

38
00:02:24.950 --> 00:02:28.160
windows seven, I'm looking at
my, did my Dell mini

39
00:02:28.160 --> 00:02:30.770
nine. I've got PowerShell on
here already. Let me just

40
00:02:30.770 --> 00:02:33.380
hit this power. And I
got, okay, so I've got

41
00:02:33.380 --> 00:02:35.150
PowerShell and it looks like
I've got some kind of

42
00:02:35.150 --> 00:02:37.670
a, a, a PowerShell I
S E on my that's

43
00:02:37.670 --> 00:02:39.650
version two right there. And
this is just the regular

44
00:02:39.650 --> 00:02:42.230
version of windows seven. This
isn't the fancy enterprise version

45
00:02:42.230 --> 00:02:44.370
that I've got. This is
client it's shipping with, with

46
00:02:44.420 --> 00:02:47.300
all versions of windows, starting
with seven. Okay. Rock on.

47
00:02:47.360 --> 00:02:49.550
So that means that, like
you said, the 2008 are

48
00:02:49.550 --> 00:02:52.160
two, it'll just be there
and which is great because

49
00:02:52.160 --> 00:02:55.250
now it's a requirement you
don't have to satisfy. You

50
00:02:55.250 --> 00:02:57.860
don't have to think about
installing it on your servers,

51
00:02:57.890 --> 00:03:00.220
installing it on your, all
your PCs. Okay. So, so

52
00:03:00.220 --> 00:03:02.020
what did I miss a
as far as what additions

53
00:03:02.110 --> 00:03:04.510
new commandlets well, yeah, of
course are going to be

54
00:03:04.510 --> 00:03:09.340
new commandlets especially now that
a lot of between version

55
00:03:09.340 --> 00:03:11.500
one and version two, a
lot of the product groups

56
00:03:11.500 --> 00:03:14.230
at Microsoft have really kind
of gotten it now. And

57
00:03:14.230 --> 00:03:18.040
they're on the train version
one. I don't remember how

58
00:03:18.040 --> 00:03:19.900
many commandments that came with,
probably in the order of

59
00:03:19.900 --> 00:03:23.080
two 50, a version two
has over 500. Commandlets shipping

60
00:03:23.080 --> 00:03:25.480
with it when you've, when
you include things like on

61
00:03:25.480 --> 00:03:30.070
the, on the server skews
bits, and some other server

62
00:03:30.070 --> 00:03:32.800
related functions. So, you know,
there's a lot of stuff

63
00:03:32.800 --> 00:03:35.590
to go through. Whereas you're
using is commandlet, which is

64
00:03:35.590 --> 00:03:39.250
actually spelled CMD, L E
T S it kind of

65
00:03:39.250 --> 00:03:42.040
hearkens back to command dot
ECC, but it's a command

66
00:03:42.190 --> 00:03:46.300
is just a bite sized
task oriented. You know, this,

67
00:03:46.300 --> 00:03:48.970
this is, this is what
does, and it only does

68
00:03:48.970 --> 00:03:51.630
this. You have it's, it's
a verb noun, syntax. A

69
00:03:51.630 --> 00:03:54.640
lot of your listeners are
probably familiar with some of

70
00:03:54.640 --> 00:03:58.890
the concepts of PowerShell, but
it's instead of external executable,

71
00:03:58.930 --> 00:04:01.000
you have command words. Right.
Well, and we shouldn't assume

72
00:04:01.000 --> 00:04:03.580
that they're there, they're too
familiar with it because, you

73
00:04:03.580 --> 00:04:05.530
know, just when I think
that everybody knows PowerShell, I

74
00:04:05.530 --> 00:04:07.300
realized that there's people who
kind of know that it

75
00:04:07.300 --> 00:04:10.540
exists, where they should really
take the time to invest

76
00:04:10.540 --> 00:04:12.340
time and learn it. Yeah.
Well, that's why we're talking

77
00:04:12.340 --> 00:04:15.220
again, because I use PowerShell
today, just today in a

78
00:04:15.220 --> 00:04:17.800
talk that I did on
velocity, which is a data

79
00:04:17.800 --> 00:04:21.130
caching system and their administration
tool that should they ship

80
00:04:21.130 --> 00:04:24.070
rather than shipping some kind
of sad WinForms application, they

81
00:04:24.070 --> 00:04:27.340
shipped a PowerShell command list.
So they shipped, I think,

82
00:04:27.340 --> 00:04:30.790
like 20 cash related things
to start and stop the

83
00:04:30.790 --> 00:04:33.280
cash cluster. Definitely. And when
you, when you said about

84
00:04:33.280 --> 00:04:36.730
the verbs being a verb
noun verb, now that this

85
00:04:36.730 --> 00:04:38.380
is a standardized thing, if
you want to ship a

86
00:04:38.380 --> 00:04:41.080
commandlet, there's a limited number
of verbs and you have

87
00:04:41.080 --> 00:04:43.210
to, it's not like one
guy calls it get, and

88
00:04:43.210 --> 00:04:45.640
the other guy calls it
fetch, and someone else says

89
00:04:45.640 --> 00:04:48.400
retrieve, they have actually up,
there's a command, the name

90
00:04:49.180 --> 00:04:53.290
conventionalized. And you guys have
established that with the common

91
00:04:53.290 --> 00:04:56.770
engineering criteria list. I wanna
say the 2009 version was

92
00:04:56.770 --> 00:05:00.790
when they first made it
mandatory for the server skew

93
00:05:01.180 --> 00:05:03.760
type products to ship with
PowerShell support of some kind.

94
00:05:03.760 --> 00:05:06.570
Okay. And that's gotten even
more formal, you know, in

95
00:05:06.610 --> 00:05:09.940
the subsequent versions. So, you
know, if, if you're, if

96
00:05:09.940 --> 00:05:12.070
you work with windows, PowerShell
is going to be a

97
00:05:12.070 --> 00:05:14.020
part of your life, whether
you like it or not,

98
00:05:14.080 --> 00:05:15.880
you know, so it's time
to get used to it

99
00:05:15.880 --> 00:05:17.680
and, and really kind of
take advantage of what's there

100
00:05:18.480 --> 00:05:20.910
Personally coming from a, I
come from a development background,

101
00:05:20.910 --> 00:05:22.530
which is probably like a
lot, This is a good

102
00:05:22.530 --> 00:05:24.900
balance here because Kirk, you're
coming from a dev, a

103
00:05:24.900 --> 00:05:26.550
point of view of a
developer and how you're coming

104
00:05:26.550 --> 00:05:27.870
from the point of view
of more of a, of

105
00:05:27.870 --> 00:05:32.470
a large enterprise. It management's
perspective. Right? So, so I

106
00:05:32.490 --> 00:05:35.010
kind of bridged the bolt's
roles today, but still mostly

107
00:05:35.010 --> 00:05:37.140
development. I still that's my
full time job. That's what

108
00:05:37.140 --> 00:05:40.770
I do every day. And
this consistency that you guys

109
00:05:40.770 --> 00:05:42.510
are talking about, which is
just so key for me,

110
00:05:42.510 --> 00:05:45.380
because it allows me for
the first time with, with

111
00:05:45.390 --> 00:05:48.510
any languages I've experienced, be
able to make intelligent guesses

112
00:05:48.510 --> 00:05:50.550
and be right, like the
vast majority of the time,

113
00:05:51.090 --> 00:05:53.880
you don't find, you don't
find that there is one

114
00:05:53.880 --> 00:05:56.310
command left that has dash
ID as the parameter. And

115
00:05:56.310 --> 00:05:59.000
another one that has dash
like the consistency extends even

116
00:05:59.000 --> 00:06:01.400
inside the command, that model
so that you can make

117
00:06:01.400 --> 00:06:04.330
intelligent guesses and get your
work done more quickly. And

118
00:06:04.330 --> 00:06:06.250
it would seem, you would
think initially as maybe if

119
00:06:06.250 --> 00:06:08.680
you're hearing this, this would
be constraining. It's almost like

120
00:06:08.680 --> 00:06:11.320
saying, well, you know, here's
C sharp, here's the formalized

121
00:06:11.350 --> 00:06:13.150
grammar of the language and
a bowl, by the way,

122
00:06:13.330 --> 00:06:16.680
you can only name your
functions like this, you go,

123
00:06:16.690 --> 00:06:18.610
Oh, wow. Don't hold me
back. Don't hold me down.

124
00:06:18.910 --> 00:06:21.220
But when you're talking about
500 commandlets, and then you

125
00:06:21.220 --> 00:06:24.640
add in things like exchange
or velocity, in my example,

126
00:06:24.970 --> 00:06:27.520
you're going to have a
vocabulary of thousands and thousands

127
00:06:27.520 --> 00:06:29.890
of things that you could
potentially want to call you

128
00:06:29.890 --> 00:06:33.400
want to, you want that,
that constraint. Exactly. So you

129
00:06:33.400 --> 00:06:35.500
can just step in, I
could probably step into exchange,

130
00:06:35.530 --> 00:06:38.740
which I know uses a
PowerShell now for it's stuff.

131
00:06:38.950 --> 00:06:41.440
I assume they have to
get mailbox, get user I'm

132
00:06:41.440 --> 00:06:44.080
just guessing. Yes, absolutely. They
do. And so you can

133
00:06:44.080 --> 00:06:45.490
go in there and apply
the same knowledge set that

134
00:06:45.490 --> 00:06:47.380
you get and basic PowerShell
inside of all these various

135
00:06:47.380 --> 00:06:50.410
platforms. Yeah. So the, the
investment of time that you've

136
00:06:50.410 --> 00:06:53.950
made learning the basic PowerShell
commandlets, you can take the

137
00:06:53.950 --> 00:06:55.720
set of verbs. You already
know the verse, you know,

138
00:06:55.720 --> 00:06:59.560
what get does get, gets
an object, you know, send

139
00:06:59.680 --> 00:07:01.750
takes in a resource you
have, and, you know, send

140
00:07:01.750 --> 00:07:04.330
it somewhere else. And there's
definitions for these. You can

141
00:07:04.330 --> 00:07:07.750
find on Microsoft site. And
then the, the set of

142
00:07:07.810 --> 00:07:11.200
nouns is related to the
domain, which you probably already

143
00:07:11.200 --> 00:07:16.180
from. Exactly. And the thing
that's most important though, is

144
00:07:16.180 --> 00:07:18.700
the stringing together of these
things. And the example that

145
00:07:18.700 --> 00:07:22.030
I always give is about
getting a process, right? So

146
00:07:22.210 --> 00:07:25.540
you're on a, you're on
a Unix or star nix,

147
00:07:25.600 --> 00:07:28.540
right. You know, starting a,
and you say PS, and

148
00:07:28.540 --> 00:07:30.340
you get your Pulitzer processes.
And then let's say that

149
00:07:30.340 --> 00:07:32.020
I asked you as a
task, as an it guy

150
00:07:32.380 --> 00:07:34.750
take the list of processes,
find me the top five

151
00:07:34.780 --> 00:07:37.150
memory hogs. Are you going
to make me use, set

152
00:07:37.150 --> 00:07:40.300
an oxide? Exactly. Right. So
what happens? You say PS,

153
00:07:40.300 --> 00:07:41.740
and then you pipe it
through set and you pipe

154
00:07:41.740 --> 00:07:44.500
with you walk and then
there's regular. Cause you're, you're,

155
00:07:44.500 --> 00:07:47.920
you're messing with format attacks.
Right? Right. So in PowerShell,

156
00:07:47.920 --> 00:07:51.400
everything's an object. You know,
developers have been familiar with

157
00:07:51.700 --> 00:07:56.440
object oriented concepts for a
long time. Administrators have not

158
00:07:56.440 --> 00:07:58.960
been used to that. That's
something new, but it's something

159
00:07:58.960 --> 00:08:01.240
that, that it's easy to
take advantage of. Once you

160
00:08:01.240 --> 00:08:03.580
get the concept down that
you don't have to do

161
00:08:03.580 --> 00:08:06.100
the text parsing, you don't
have to think of, okay.

162
00:08:06.100 --> 00:08:08.470
Was, you know, do I
look at column nine or

163
00:08:08.470 --> 00:08:12.160
10 in this particular output?
So I can always look

164
00:08:12.160 --> 00:08:14.710
at, well, I can take,
for example, get dash process

165
00:08:14.980 --> 00:08:17.140
run that, you know, give
the, give the name of

166
00:08:17.140 --> 00:08:19.210
a process that I want
to work with, pipe it

167
00:08:19.210 --> 00:08:22.690
to stop process. I don't
have to, to think about

168
00:08:22.690 --> 00:08:25.360
how the, you know, point
a gets to point B

169
00:08:25.420 --> 00:08:29.050
that's that object that I'm
passing on. Also with respect

170
00:08:29.050 --> 00:08:31.900
to everything, being an object
as a developer, a lot

171
00:08:31.900 --> 00:08:34.000
of people are probably familiar
with using reflection when they

172
00:08:34.000 --> 00:08:35.800
want to go in and
get, you know, get the

173
00:08:35.800 --> 00:08:40.180
details that aren't necessarily readily
available. But PowerShell allows you

174
00:08:40.180 --> 00:08:42.910
to go and just ask
the objects, what you can

175
00:08:42.910 --> 00:08:45.190
do in terms of pipelining.
You can take any object

176
00:08:45.190 --> 00:08:47.020
and pipe it to get
member, and it'll spit out

177
00:08:47.020 --> 00:08:48.670
a list of all the
properties and all the methods

178
00:08:48.670 --> 00:08:50.440
that are there for you.
And so you can very

179
00:08:50.440 --> 00:08:53.230
easily see the syntax. And
so where you can't guess

180
00:08:53.410 --> 00:08:55.120
you can ask and you
don't have to go and

181
00:08:55.350 --> 00:08:57.810
to documentation, you can just
learn it directly using PowerShell

182
00:08:57.810 --> 00:08:59.630
itself. So both of you
has said this, pipe it

183
00:08:59.630 --> 00:09:00.950
to when you do this
and you just pipe it

184
00:09:00.950 --> 00:09:03.030
to pipe it to that
pipe, to this, the, the

185
00:09:03.030 --> 00:09:07.910
example of get process, say,
get process Explorer, exe pipe,

186
00:09:08.150 --> 00:09:13.340
stop process. The output of
get processed Explorer is actually

187
00:09:13.340 --> 00:09:16.370
a process. It's not a,
it's a CLR type. It's

188
00:09:16.370 --> 00:09:18.710
the process object that we're
used to using. So you

189
00:09:18.710 --> 00:09:20.990
as a C sharp developer
would be familiar with, I

190
00:09:20.990 --> 00:09:23.930
think his maybe was it
system dot diagnostics, some diagnostics

191
00:09:24.300 --> 00:09:26.450
that's a class you would
write in C sharp, and

192
00:09:26.450 --> 00:09:28.490
then you use the same
class. So you're speaking the

193
00:09:28.490 --> 00:09:30.140
same language in the sense
that if I go and

194
00:09:30.140 --> 00:09:34.490
say, let's say DIR, which
is actually an alias for

195
00:09:34.490 --> 00:09:37.730
get child item. Yes. That's
going to return a file

196
00:09:37.730 --> 00:09:39.920
info. The same one that
you're used to using as

197
00:09:39.920 --> 00:09:42.590
a C sharp developer. Yeah.
And because it's based on

198
00:09:42.590 --> 00:09:44.300
this whole model, and because
it's based on sitting on

199
00:09:44.300 --> 00:09:47.300
top of.net, you can, you
can just go and use.net

200
00:09:47.300 --> 00:09:49.850
directly inside of it. It
supports that. So where the

201
00:09:49.850 --> 00:09:52.790
commandlets aren't available, you can
just, if you're a developer,

202
00:09:52.820 --> 00:09:55.100
you can just write functions
or just do ad hoc

203
00:09:55.100 --> 00:09:57.800
scripting and invoke.net directly. You
don't have to worry about

204
00:09:57.800 --> 00:10:00.290
going in and building your
own custom command, like compiling

205
00:10:00.290 --> 00:10:02.120
the code and importing it
in. You just do it

206
00:10:02.120 --> 00:10:04.850
right in power. Yeah. So
then they get processed example.

207
00:10:04.850 --> 00:10:06.920
When I pipe it to
stop process, I don't actually

208
00:10:06.920 --> 00:10:10.910
even give any input or
command line things to stop

209
00:10:10.910 --> 00:10:14.030
process that's right. It takes
the process as input naturally.

210
00:10:14.030 --> 00:10:16.520
It knows that that's the
thing it acts upon, right?

211
00:10:16.550 --> 00:10:18.440
Yes, absolutely. And one of
the things I thought it

212
00:10:18.440 --> 00:10:20.600
was really amazing as you
call get processed or something

213
00:10:20.600 --> 00:10:22.400
like that, you pipe it
to stop processing the part

214
00:10:22.400 --> 00:10:25.040
that always freaks people out
as you go dash. What

215
00:10:25.040 --> 00:10:27.350
if, What if it's great.
And then what if it's

216
00:10:27.350 --> 00:10:29.720
like kind of standard across
the board for all PowerShell

217
00:10:29.720 --> 00:10:32.330
commandlets and it allows you
to basically say, what if

218
00:10:32.330 --> 00:10:33.860
I was going to do
this? What would it do?

219
00:10:34.040 --> 00:10:36.200
And it'll spit back to
you, some texts, output saying,

220
00:10:36.800 --> 00:10:39.230
it's going to stop the
process on certain system, whatever

221
00:10:39.230 --> 00:10:43.340
name you specify. Hmm. And
when you're doing big operations,

222
00:10:43.470 --> 00:10:45.980
you can, most everything supports.
What if doesn't, I can

223
00:10:45.980 --> 00:10:47.570
say like, what if I
deleted this? And what if

224
00:10:47.570 --> 00:10:50.150
I stopped that process? Yeah.
And there's a set of

225
00:10:50.150 --> 00:10:53.330
several of these common parameters.
What F is one of

226
00:10:53.330 --> 00:10:57.530
them you also have confirm
as another one now called

227
00:10:57.530 --> 00:11:00.020
the ubiquitous parameters. Yeah. Right.
They're kind of like required

228
00:11:00.020 --> 00:11:02.540
four or five. Right? Right.
So there's a, you know,

229
00:11:02.550 --> 00:11:04.910
a flag you set when
you're creating a commandlet and

230
00:11:04.910 --> 00:11:08.060
you just automatically get all
of those. Now the idea

231
00:11:08.060 --> 00:11:10.490
that I'm going to pass
something in, and it just

232
00:11:10.490 --> 00:11:12.560
it's understood that this is
the default kind of thing

233
00:11:12.560 --> 00:11:15.020
that I would act upon,
like stop the process. Excellent

234
00:11:15.020 --> 00:11:19.160
pawn processes is, is pretty
powerful. But the, the automatic

235
00:11:19.190 --> 00:11:22.130
binding of parameters I think
is really interesting because there's

236
00:11:22.130 --> 00:11:25.070
a thing called import CSV,
right. That I find myself

237
00:11:25.070 --> 00:11:28.250
using all the time. Do
you use that CSV? It's

238
00:11:28.250 --> 00:11:30.350
it is pretty neat that
you can take, you know,

239
00:11:30.350 --> 00:11:34.490
what this flat file, you
know, comma separated obviously, and

240
00:11:34.520 --> 00:11:37.220
you don't have to think
about Parson. Have you ever,

241
00:11:37.910 --> 00:11:41.690
you're a developer in VB
script working with, with text

242
00:11:41.690 --> 00:11:44.390
files and especially commerce separated
values. It was common to

243
00:11:44.390 --> 00:11:46.970
do so, but you had
to insert all these CHR

244
00:11:46.970 --> 00:11:49.550
34 strengths and so forth.
And because it wasn't a

245
00:11:49.550 --> 00:11:52.220
kind of a native thing,
a good example would be

246
00:11:52.230 --> 00:11:54.400
just make a, like I
did, I did a thing

247
00:11:54.400 --> 00:11:57.610
with virtual machines once I
had it CSV file. And

248
00:11:57.610 --> 00:12:00.790
I said, name comma. I
was like machine name, right?

249
00:12:00.820 --> 00:12:03.550
Comma. What was it like,
I don't know you, you

250
00:12:03.550 --> 00:12:05.290
know, username or whatever. So
I was like name, comma

251
00:12:05.290 --> 00:12:09.280
ID, comma, something. And then
I said, import CSV. And

252
00:12:09.280 --> 00:12:11.770
then this turns automatically into
kind of a structured table

253
00:12:11.770 --> 00:12:14.560
of values. And then PowerShell
immediately knows that there's a

254
00:12:14.560 --> 00:12:17.110
name column and a computer
name column and whatever column.

255
00:12:17.310 --> 00:12:19.830
Yes. And, and you can
see that used when you're

256
00:12:19.830 --> 00:12:22.410
pipelining. So, I mean, I've
seen examples where you have

257
00:12:22.410 --> 00:12:25.140
an HR department that gives
somebody a text file. Here's

258
00:12:25.140 --> 00:12:27.600
some new users coming into
the company and it's CSV

259
00:12:27.600 --> 00:12:29.550
and they have to go
make those new users. So

260
00:12:29.550 --> 00:12:31.050
you don't have to use
any UI for it. You

261
00:12:31.050 --> 00:12:34.110
can just import the CSV
file and pipe it to

262
00:12:34.140 --> 00:12:37.230
a command like a new
QAD user. And go ahead

263
00:12:37.230 --> 00:12:39.090
and just create your users
because you already have all

264
00:12:39.090 --> 00:12:41.100
the fields set, whichever ones
are important to you. Right.

265
00:12:41.340 --> 00:12:43.460
And the, the thing, the
thing that's interesting that that's,

266
00:12:43.500 --> 00:12:45.690
Oh, that's almost magic is
that if you have an

267
00:12:45.690 --> 00:12:48.080
ID column and like, for
example, let's say I had

268
00:12:48.090 --> 00:12:51.030
a list of processes and
process ID was one of

269
00:12:51.030 --> 00:12:54.780
the column names and the
command that you're piping into

270
00:12:54.810 --> 00:12:58.680
expects a parameter called process
ID. It'll just assume I'll

271
00:12:58.710 --> 00:13:02.700
you didn't give me anything.
These lineup that must be,

272
00:13:02.790 --> 00:13:05.970
how does those little bind
is binary? Yeah. They're buying

273
00:13:05.970 --> 00:13:10.410
double properties Property. Yes. Yeah.
That's magic. Absolutely automatic. It

274
00:13:10.410 --> 00:13:12.600
seems like most magic. The
things that are so I'm

275
00:13:12.600 --> 00:13:16.200
so easily impressed with are
effectively four loops. Right? The

276
00:13:16.200 --> 00:13:18.510
idea that, Hey, I've got
a virtual machine. I can

277
00:13:18.510 --> 00:13:20.670
start and stop it with
a PowerShell commandlet Oh, let's

278
00:13:20.670 --> 00:13:22.410
do 100 of those. Well,
let's do a million of

279
00:13:22.410 --> 00:13:24.630
those. Yeah. And I think
that's, that was one of

280
00:13:24.630 --> 00:13:27.090
the first things that I
saw in PowerShell that just

281
00:13:27.090 --> 00:13:29.790
complete me away with how,
how easy it is to

282
00:13:29.790 --> 00:13:33.540
work with in anything. I
was so impressed by N

283
00:13:33.540 --> 00:13:35.340
plus one. I don't know
why. I don't know why,

284
00:13:35.550 --> 00:13:39.390
but it's D well working
with, you know, batch files,

285
00:13:39.390 --> 00:13:42.900
for example, you had your
four slash F you know,

286
00:13:42.960 --> 00:13:45.450
Oh, gosh, I challenge you.
I challenge anyone in my

287
00:13:45.450 --> 00:13:47.130
listeners to do a four
loop in a batch file

288
00:13:47.310 --> 00:13:49.980
without Googling for it first.
Oh yeah. It's, it's, it's

289
00:13:49.980 --> 00:13:53.160
impossible and crazy. And the
syntax, you just messed up

290
00:13:53.160 --> 00:13:56.180
for something with a lot
of percentages in yeah, yeah,

291
00:13:56.440 --> 00:13:59.250
yeah. Doing, doing the same
kind of thing with PowerShell,

292
00:13:59.280 --> 00:14:02.220
whether it's, you know, reading
through lines in a text

293
00:14:02.220 --> 00:14:04.950
file or are starting virtual
machines. So you're talking about

294
00:14:04.950 --> 00:14:09.810
it's, it's just so simple.
Virtual machines kind of brings

295
00:14:09.810 --> 00:14:13.740
up something a, of a
soft spot in my heart.

296
00:14:14.070 --> 00:14:16.190
Cause you wrote a book
on managing virtual machines from

297
00:14:16.190 --> 00:14:20.790
PowerShell, right. It's managing a
VMware infrastructure with PowerShell TFM.

298
00:14:21.210 --> 00:14:23.490
I say, be impressed. That's
a book I just finished

299
00:14:23.490 --> 00:14:26.310
up recently just started shipping
the other day, in fact.

300
00:14:26.760 --> 00:14:30.360
And so the, where they
were one of the earlier

301
00:14:30.360 --> 00:14:34.140
companies to a third party,
you know, to ship commandments

302
00:14:34.140 --> 00:14:36.770
for PowerShell, there were, there
were a couple that were

303
00:14:36.770 --> 00:14:40.170
afford them, but there were
one of the early ones

304
00:14:40.170 --> 00:14:42.870
to jump on the bandwagon.
Right. And I hadn't gotten

305
00:14:42.870 --> 00:14:45.270
involved with them and just
had the opportunity to write

306
00:14:45.270 --> 00:14:48.060
a book about it. It
was pretty a neat experience,

307
00:14:48.090 --> 00:14:52.450
but they have over 120
commandlets they shipped. So how

308
00:14:52.460 --> 00:14:54.440
do, why do I need,
I mean, virtual machines start

309
00:14:54.440 --> 00:14:57.350
machine stop machine hibernate. Why
do I, there's three. I'm

310
00:14:57.350 --> 00:15:00.730
done. What do I need?
Another a hundred commands. Yeah.

311
00:15:00.730 --> 00:15:03.250
You've got start and stop
and remove and add a

312
00:15:03.250 --> 00:15:06.460
new and set. But think
about all the different nouns

313
00:15:06.460 --> 00:15:09.040
that we've got to work
with. Specific. Some of these

314
00:15:09.040 --> 00:15:12.430
are specific to VMware products,
but, but a lot of

315
00:15:12.430 --> 00:15:15.430
them map directly to hyper
V or any other virtualization

316
00:15:15.430 --> 00:15:18.190
type product you've got virtual
machines are gonna work with,

317
00:15:18.460 --> 00:15:22.660
you've got the hosts, the
host servers, various structures when

318
00:15:22.660 --> 00:15:27.310
you're managing like folders and
data centers. And then don't

319
00:15:27.310 --> 00:15:30.610
forget the virtual networking you've
got switched. We actually kind

320
00:15:30.610 --> 00:15:33.130
of create these configure these
completely from scratch. Totally a

321
00:15:33.130 --> 00:15:35.570
what they would say headless.
Yeah. You never actually touched

322
00:15:35.570 --> 00:15:37.540
the machine or see the
machine it's just out there.

323
00:15:37.720 --> 00:15:39.970
Yeah. It was a name
and a trivial to create

324
00:15:39.970 --> 00:15:42.430
a script that would, you
know, go from zero to

325
00:15:42.430 --> 00:15:46.990
creating, you know, a hundred
virtual machines, various different based

326
00:15:46.990 --> 00:15:50.350
on templates that you'd created
beforehand. You know, maybe you

327
00:15:50.350 --> 00:15:53.400
had a, you know, serve
application, a database application and

328
00:15:53.490 --> 00:15:56.950
you know, client PCs and
just arrange it just so,

329
00:15:56.980 --> 00:15:59.380
and you just hit go
and it goes off. And

330
00:15:59.380 --> 00:16:01.930
does it, Do you know
how to make the possible

331
00:16:02.050 --> 00:16:04.870
out of the impossible? Well,
the dotnet ninjas at Telerik

332
00:16:04.870 --> 00:16:07.630
do they just released a
huge pack of web controls,

333
00:16:07.630 --> 00:16:10.660
all built on top of
ASB at Ajax, that'll help

334
00:16:10.660 --> 00:16:13.780
you build impossibly fast and
interactive applications in no time

335
00:16:13.780 --> 00:16:17.770
at all. They've made the
impossible possible in desktop development.

336
00:16:18.700 --> 00:16:20.890
If you think you can't
have a carousel component and

337
00:16:20.890 --> 00:16:24.400
wind forms, well you can.
They're windows form suite features

338
00:16:24.400 --> 00:16:27.100
a super powerful grid view
control, and 32 other crazy

339
00:16:27.100 --> 00:16:31.240
desktop components. That'll give you
a dazzling WPF like features,

340
00:16:31.450 --> 00:16:33.760
but in wind farms, they
do the same thing in

341
00:16:33.760 --> 00:16:36.370
reporting solutions with a new
design surface, like nothing else

342
00:16:36.370 --> 00:16:39.880
looks just like graph paper,
cause you advanced page layout

343
00:16:39.880 --> 00:16:43.150
capabilities makes it feel more
like a graphic design software

344
00:16:43.150 --> 00:16:48.070
than a reporting solution. Go
check them out@telerikdotcomandbeat.net Ninja. Thanks

345
00:16:48.070 --> 00:16:52.210
for listening. Now, back in
the day, a team that

346
00:16:52.210 --> 00:16:54.490
I was working with at,
at Karelian, which was the

347
00:16:54.490 --> 00:16:56.590
company that I worked at
before Microsoft now, now called

348
00:16:56.590 --> 00:17:01.510
CheckFree was, was using PowerShell
to automate this, the system

349
00:17:01.510 --> 00:17:05.170
such that after ms. Build
in our continuous integration server

350
00:17:05.170 --> 00:17:07.810
would finish the build. We
wouldn't just kind of drop

351
00:17:07.810 --> 00:17:09.640
a bunch of binaries in
a folder and say, Hey,

352
00:17:09.640 --> 00:17:12.580
that's the build we would
actually create and fire up

353
00:17:12.580 --> 00:17:16.180
a virtual machine, using a
PowerShell, install the bits into

354
00:17:16.180 --> 00:17:17.830
that. And then basically got
to the point where we

355
00:17:17.830 --> 00:17:19.870
could automate the creation and
the testing of this bill.

356
00:17:20.110 --> 00:17:23.860
So that a virtual machine
was the artifact of the

357
00:17:23.860 --> 00:17:26.350
build. We thought we were
pretty awesome when we did

358
00:17:26.350 --> 00:17:28.540
that. I think you're pretty
often, but it was three

359
00:17:28.540 --> 00:17:30.040
years ago and I had
to write a bunch of

360
00:17:30.040 --> 00:17:33.280
stuff in order to remote
into that virtual machine to

361
00:17:33.280 --> 00:17:35.590
poke stuff into it. And
that was a real hassle.

362
00:17:35.710 --> 00:17:38.170
Yeah. What PowerShell to going
to fix that? Can I

363
00:17:38.170 --> 00:17:40.900
remote into it? Yeah. PowerShell
to remoting is one of

364
00:17:40.900 --> 00:17:42.820
the very big features that's
coming out with version two

365
00:17:43.390 --> 00:17:46.510
it's based on Ws management,
which is a, you know,

366
00:17:46.510 --> 00:17:51.030
an XML based protocol and
based On standards that have

367
00:17:51.030 --> 00:17:54.750
been well-defined. In fact, it's
not a Microsoft standards on

368
00:17:54.750 --> 00:17:56.640
a Microsoft thing, right. It's
not a Microsoft thing. She

369
00:17:56.640 --> 00:17:59.130
used to work for. IBM.
I did. So that's so

370
00:17:59.130 --> 00:18:01.200
you like this? Oh, I
like this a lot. Oh,

371
00:18:01.200 --> 00:18:03.300
that's good. So it can
be friends then. Yeah. Awesome.

372
00:18:03.330 --> 00:18:08.070
Okay, good. So the PowerShell
version two remoting, what you

373
00:18:08.070 --> 00:18:11.310
can do with it is
it's as simple as running

374
00:18:11.310 --> 00:18:13.740
a background job on your
own PC, like you might

375
00:18:13.740 --> 00:18:15.840
do with an ampersand on
a Linux box. Let me

376
00:18:15.840 --> 00:18:20.640
guess new hyphen job. I
don't remember. It would have

377
00:18:20.640 --> 00:18:22.680
to, it wouldn't it? Cause
it's a con cause it's

378
00:18:22.680 --> 00:18:26.520
a convention and a, well,
there's also a common parameter

379
00:18:26.520 --> 00:18:29.490
called as job, which you
see on some commands. Oh

380
00:18:29.490 --> 00:18:32.070
really? Okay. So this is
a new parameter. So like

381
00:18:32.070 --> 00:18:33.840
what if was everywhere? So
some commands let's I can

382
00:18:33.840 --> 00:18:36.600
just run it as a
job. Yes. Okay. So that's

383
00:18:36.600 --> 00:18:39.660
one aspect of it. And
then you also have the

384
00:18:39.660 --> 00:18:43.380
remoting feature where you could,
for example, have opened up

385
00:18:43.410 --> 00:18:47.040
a shell to a remote
system, take advantage of commandments

386
00:18:47.040 --> 00:18:49.140
that it has on its
system and, and you know,

387
00:18:49.650 --> 00:18:52.620
whatever resources are on that
remote system. And then you

388
00:18:52.620 --> 00:18:56.100
can invoke scripts either, you
know, against one system, Oregon's

389
00:18:56.130 --> 00:18:59.360
a hundred systems, Something else
that's kind of cool about

390
00:18:59.360 --> 00:19:02.390
the whole remoting feature with
it being based on Ws,

391
00:19:02.390 --> 00:19:05.240
man, that puts Ws man
support directly in the PowerShell.

392
00:19:05.510 --> 00:19:09.140
So when you have have
large hardware vendors like Intel

393
00:19:09.140 --> 00:19:12.590
and HP providing Ws man
interfaces directly into their hardware,

394
00:19:12.590 --> 00:19:15.590
so you can even power
on and power off machines

395
00:19:15.950 --> 00:19:19.190
using Ws, man, really in
new tech, new technologies that

396
00:19:19.190 --> 00:19:20.840
you can and tell how
the V pro I forget

397
00:19:20.840 --> 00:19:22.730
what HP has, but most
of the new, most of

398
00:19:22.730 --> 00:19:25.370
the hardware vendors have this
solution. And they've even showed

399
00:19:25.370 --> 00:19:27.410
a demo here at tech
ed showing how you can

400
00:19:27.410 --> 00:19:30.080
remote use power shell with
Ws man power on your

401
00:19:30.080 --> 00:19:33.560
machine powered off while it's
off, look at the events

402
00:19:33.560 --> 00:19:37.610
on the machine While it's
off. Yes. There is a

403
00:19:37.610 --> 00:19:40.430
chip inside that is still
responding to Ws man requests

404
00:19:40.850 --> 00:19:42.860
and allowing you to check
out machine accounts and everything.

405
00:19:42.860 --> 00:19:45.680
So for your scenario, you
were talking about at Kirlian

406
00:19:45.680 --> 00:19:48.230
was that, yeah, this is
even great because you can,

407
00:19:48.380 --> 00:19:50.900
you can have your machines
totally offline and automate the

408
00:19:50.900 --> 00:19:53.090
turning on doing the work
and shutting them down when

409
00:19:53.090 --> 00:19:55.970
you're done. Wow. That's pretty
slick now. So some people

410
00:19:55.970 --> 00:19:58.490
might say, Oh, they added
remoting to PowerShell. Right. Welcome

411
00:19:58.490 --> 00:20:02.500
to 1975. We've just created
secure sockets. This is not

412
00:20:02.510 --> 00:20:05.180
just that. It's not just
like Telnet and I get

413
00:20:05.180 --> 00:20:08.000
a command prompt and a
remote machine, right? No, it's

414
00:20:08.000 --> 00:20:11.030
not just like Telnet now
to be fair, a company

415
00:20:11.030 --> 00:20:14.210
and software, they had actually
worked on an SS H

416
00:20:14.210 --> 00:20:17.120
based remoting solution for power
shell, which was kind of

417
00:20:17.120 --> 00:20:18.860
novel. And there's some neat
stuff you can do with

418
00:20:18.860 --> 00:20:22.400
that. But no, these guys
said Jefferson over and the

419
00:20:22.400 --> 00:20:24.890
team have thought long and
hard about this. And there's

420
00:20:24.890 --> 00:20:26.900
a lot of cool things
that they've enabled that go

421
00:20:26.900 --> 00:20:30.410
along with the remoting, such
as restricted run spaces. So

422
00:20:30.440 --> 00:20:32.450
right. We should talk about
what a run spaces. Cause

423
00:20:32.450 --> 00:20:34.910
I think that that's, that's
interesting cause within the context

424
00:20:34.910 --> 00:20:37.730
of hosting stuff within my
application, like for example, I

425
00:20:37.730 --> 00:20:40.730
just recently did a demo
where I hosted iron Python,

426
00:20:41.090 --> 00:20:43.460
basically Python was a scripting
language and I did some

427
00:20:43.460 --> 00:20:45.470
work with it and I
can understand, I can host

428
00:20:45.470 --> 00:20:48.580
run spaces and run PowerShell
commands within C sharp applications.

429
00:20:48.660 --> 00:20:50.730
Yes. And so you can
create as many run spaces

430
00:20:50.730 --> 00:20:53.490
as you need to each
one being their own encapsulated

431
00:20:53.490 --> 00:20:56.340
environment, working with PowerShell. So
a run spaces is almost

432
00:20:56.340 --> 00:20:58.860
like it's a PowerShell session.
You can, we can open

433
00:20:58.860 --> 00:21:00.930
up a new run space
and work with environment, work

434
00:21:00.930 --> 00:21:03.840
with variables and commands inside
that environment without polluting other

435
00:21:03.840 --> 00:21:06.930
run spaces. Okay. I remember
that I did something with

436
00:21:06.930 --> 00:21:08.760
run spaces a couple of
years ago. I wrote like,

437
00:21:09.330 --> 00:21:11.340
what's it called? It was
logo. Remember the little turtle

438
00:21:11.340 --> 00:21:15.600
game. Yes. I wrote a
logo application where I had

439
00:21:15.600 --> 00:21:19.190
a robot that it would
control. Very cool. And I

440
00:21:19.230 --> 00:21:21.480
was thinking about some of
the security ramifications for that

441
00:21:21.480 --> 00:21:24.870
because I basically put it,
there was PowerShell could have

442
00:21:24.870 --> 00:21:26.910
done anything I could have
typed in format C colon

443
00:21:26.910 --> 00:21:29.430
and it would've, it would
have gone off and done

444
00:21:29.430 --> 00:21:32.220
that. I mean, is this,
is this secure by default?

445
00:21:32.220 --> 00:21:34.200
I mean, could I hurt
myself by hosting run space?

446
00:21:34.380 --> 00:21:36.510
You could hurt yourself, but
as an it admin, you

447
00:21:36.510 --> 00:21:39.900
can configure in spaces so
that they're restricted. You can

448
00:21:39.960 --> 00:21:42.120
assign what command let's can
actually run inside of a

449
00:21:42.120 --> 00:21:48.180
run space and define pretty
granular, granular. Absolutely. Okay, cool.

450
00:21:48.660 --> 00:21:50.520
Now you're working at home
Depot. Are you going to

451
00:21:50.520 --> 00:21:52.260
do anything with this on
a large scale? Are you

452
00:21:52.260 --> 00:21:53.850
going to put this on?
I don't know how many

453
00:21:54.330 --> 00:21:58.230
thousands of machines, well, they
have 2300 stores and believe

454
00:21:58.230 --> 00:22:00.000
it or not, they have
an average of 30 PCs

455
00:22:00.000 --> 00:22:03.420
in every store, 30 PCs
at home Depot, 30 PCs.

456
00:22:03.840 --> 00:22:05.970
That includes a point of
sale system. That's a lot

457
00:22:05.970 --> 00:22:07.560
of machines though, but yeah,
there's a lot of machines.

458
00:22:07.680 --> 00:22:10.470
Okay. So one of my
responsibilities is going to be

459
00:22:10.470 --> 00:22:12.810
to work on the monitoring
team, going to be pulling

460
00:22:12.810 --> 00:22:16.410
out, you know, instrumentation data
off of these PCs that

461
00:22:16.410 --> 00:22:19.590
are currently not monitored using
PowerShell. So when you're putting

462
00:22:19.590 --> 00:22:21.840
a PowerShell on, you know,
a hundred thousand plus nodes,

463
00:22:22.170 --> 00:22:23.970
okay, so you're gonna put
power on a hundred thousand

464
00:22:23.970 --> 00:22:26.880
machines. They're all running windows,
something else, right? Most of

465
00:22:26.880 --> 00:22:29.490
them are XB presently. Okay.
So you'll put PowerShell on

466
00:22:29.490 --> 00:22:33.360
XP PowerShell to probably one,
depending on the timeframe of

467
00:22:33.360 --> 00:22:35.550
this project. But you know,
two is definitely in scope

468
00:22:36.360 --> 00:22:38.850
once they're, once that's on
there and you've got admin,

469
00:22:38.850 --> 00:22:43.140
cause your powerful it guy,
you can ask these machines

470
00:22:43.140 --> 00:22:45.150
anything because then you've got
WMI, right? And there's a

471
00:22:45.150 --> 00:22:48.570
lot of AWI support built
in and WWI for a

472
00:22:48.570 --> 00:22:51.210
long time. To me felt
like this kind of weird

473
00:22:51.210 --> 00:22:56.370
foreign it's funny, <inaudible> kind
of come around. It used

474
00:22:56.370 --> 00:22:58.920
to be something that, that
used to always interest me,

475
00:22:59.190 --> 00:23:01.920
but it was hard to
work with the language and

476
00:23:01.920 --> 00:23:05.190
other universe, parallel universe and
windows. Especially we look at

477
00:23:05.760 --> 00:23:09.570
mic, which is a command
line executable use to enumerate

478
00:23:09.570 --> 00:23:12.390
and work with WMI. The
syntax of it is just

479
00:23:12.390 --> 00:23:15.450
awful and it's just crazy
to work with. But, and,

480
00:23:15.450 --> 00:23:18.240
and doing, working with WMI
and VB script was, was

481
00:23:18.240 --> 00:23:21.390
pretty, pretty bad. There was
a, it's like 15 lines

482
00:23:21.390 --> 00:23:23.850
to really get into the
actual class that has the

483
00:23:23.850 --> 00:23:27.150
data you need PowerShell. It's
one command line, get dash

484
00:23:27.150 --> 00:23:29.850
w my object. And you,
you know, you give the

485
00:23:29.850 --> 00:23:32.850
name of, you know, when
30 to underscore a baseboard

486
00:23:32.850 --> 00:23:35.610
or whatever. So there's a
note entry you're wandering around.

487
00:23:36.530 --> 00:23:41.490
You've got classes of objects
and there's various and inheritances,

488
00:23:41.490 --> 00:23:43.050
and there's a lot of
built in ones and they're,

489
00:23:43.080 --> 00:23:46.130
they're common to all PCs.
Okay. So this is important.

490
00:23:46.130 --> 00:23:49.040
So I can ask with
WMI using this common format,

491
00:23:49.040 --> 00:23:51.440
I can say, how many
processors does it have? If

492
00:23:51.440 --> 00:23:53.720
I remember correctly, I could
go down in some instances

493
00:23:53.720 --> 00:23:55.430
and see if it has
fans, what I can do

494
00:23:55.430 --> 00:23:57.210
with it. That's exactly the
type of thing that I'm

495
00:23:57.220 --> 00:24:00.370
gonna be looking at fans
to, you know, case temperature,

496
00:24:00.400 --> 00:24:02.700
that sort of thing you
can tell temperature. Yeah. If,

497
00:24:02.700 --> 00:24:06.070
if the manufacturer has written
a diary, my provider, huh?

498
00:24:06.160 --> 00:24:08.410
Definitely because I know that
I've got the temperature thing.

499
00:24:08.410 --> 00:24:09.700
Cause I can see it
in my bios. And I

500
00:24:09.700 --> 00:24:12.130
know I have the fans
and sometimes I can see

501
00:24:12.130 --> 00:24:15.370
different applications that will let
me, I can install fan

502
00:24:15.370 --> 00:24:17.290
control and different stuff like
this. But you know, it

503
00:24:17.290 --> 00:24:19.810
all really depends on whether
or not that motherboard provider

504
00:24:19.810 --> 00:24:23.080
has some provider that PR
that kind of bridges the

505
00:24:23.080 --> 00:24:26.140
gap between however, their motherboards
speaks. Exactly. And in my

506
00:24:26.140 --> 00:24:29.050
case, I'm working with them,
Hewlett Packard, computers that have

507
00:24:29.050 --> 00:24:32.470
what they call client management
interface, I think is what

508
00:24:32.470 --> 00:24:35.560
they call their set of
providers made to bridge that

509
00:24:35.560 --> 00:24:40.420
gap that you're talking. Okay.
W might also bring some

510
00:24:40.420 --> 00:24:43.300
additional functionality to the table,
not just for managing general

511
00:24:43.300 --> 00:24:45.640
computer use. But if you
look at systems like hyper

512
00:24:45.640 --> 00:24:47.470
V right now, if you're
going to use hyper V

513
00:24:47.470 --> 00:24:49.420
today and you want to
do it right. Maybe being

514
00:24:49.420 --> 00:24:54.370
Microsoft's virtualization. Yes. Yes. And
then they don't provide commandlets

515
00:24:54.370 --> 00:24:57.130
out of the box. You
can use system center, VM

516
00:24:57.700 --> 00:25:01.000
system center, virtual machine manager,
2008, which has commandlets that

517
00:25:01.000 --> 00:25:03.040
work against hyper V. Or
if you don't have that

518
00:25:03.040 --> 00:25:05.800
solution, then you can use
WMI. So with power for

519
00:25:05.800 --> 00:25:08.380
PowerShell users, you're not stuck
wondering why, when are they

520
00:25:08.380 --> 00:25:09.850
going to have command let's
because you can just use

521
00:25:09.850 --> 00:25:13.120
the WMI Three years ago,
we were using, what was

522
00:25:13.120 --> 00:25:16.150
it? Virtual server, 2005. I
was using the calm interface

523
00:25:16.150 --> 00:25:19.450
to that start and stop
my VMs. And it was

524
00:25:19.540 --> 00:25:22.450
working quite nicely. Yeah. And,
and that's a cool thing

525
00:25:22.450 --> 00:25:25.270
about PowerShell. Is it, it
didn't throw anything away. So

526
00:25:25.270 --> 00:25:27.550
you, you still have access
to these thousands of comm

527
00:25:27.550 --> 00:25:29.860
objects that have been on
your system since windows 95.

528
00:25:30.550 --> 00:25:33.720
You know, you, you also
have ADSI, which is a

529
00:25:33.730 --> 00:25:37.090
interface that administrators have been
familiar with working in VB

530
00:25:37.090 --> 00:25:40.930
script. It's still there. It's
still accessible. Now the, the

531
00:25:40.930 --> 00:25:43.630
format for w for, for
PowerShell, it's, it's a little

532
00:25:43.630 --> 00:25:46.390
obtuse. And once you get
really you can multiple lines

533
00:25:46.390 --> 00:25:49.900
stringing commands. And then for
each object and curly prays,

534
00:25:49.900 --> 00:25:52.000
it's a little Baroque. Once
you get to four or

535
00:25:52.000 --> 00:25:55.900
five lines long, what do
you guys use to, rather

536
00:25:55.900 --> 00:25:57.620
than just writing all this,
the command line. I mean,

537
00:25:57.650 --> 00:25:59.260
you can't really go in
visual studio and write these

538
00:25:59.260 --> 00:26:02.260
scripts. You know, that, that
is a, an often asked

539
00:26:02.260 --> 00:26:04.480
question why you can't do
it in visual studio, but

540
00:26:05.260 --> 00:26:07.120
you know, they don't have
color coding for right now,

541
00:26:07.150 --> 00:26:10.960
for example. But you know,
there, there's definitely, there's several

542
00:26:10.960 --> 00:26:14.470
third party applications that, that
you can use to help

543
00:26:14.470 --> 00:26:17.690
enhance. Now, Microsoft kind of
started trend calling the, the

544
00:26:17.740 --> 00:26:20.890
integrated scripting environment. That's what
the ISE thing. So I

545
00:26:20.890 --> 00:26:22.390
said that when I looked
at my Dell here, I've

546
00:26:22.390 --> 00:26:26.230
got PowerShell, ISE. It looks
like a little query analyzer.

547
00:26:26.410 --> 00:26:29.350
Yeah. For power show. So
there's A few in this

548
00:26:29.350 --> 00:26:36.820
class, you've got ideas, PowerShell
plus, and that has IntelliSense,

549
00:26:37.180 --> 00:26:39.490
you know, syntax highlighting, and
you've got a shell and

550
00:26:39.490 --> 00:26:41.830
you've got an editor and
you also have of course

551
00:26:41.830 --> 00:26:44.700
power going. So power GUI,
this is your Company's product

552
00:26:44.700 --> 00:26:47.030
or one of your company's
products. Powerful. Yeah. At quest,

553
00:26:47.030 --> 00:26:48.770
we do a lot of
different solutions, but power gooey

554
00:26:48.770 --> 00:26:51.110
is the product I specifically
work on day in and

555
00:26:51.110 --> 00:26:54.350
day out. And so that's
what I that's personal bias.

556
00:26:54.770 --> 00:26:56.750
Right. But you're a host.
So you're hosting the run

557
00:26:56.750 --> 00:26:59.000
space. Right. So you've written
an application in some language,

558
00:26:59.030 --> 00:27:02.510
maybe C-sharp yes. And you're
hosting PowerShell inside of that.

559
00:27:02.570 --> 00:27:04.880
Yes, absolutely. Okay. And it
runs exactly as it would

560
00:27:04.880 --> 00:27:07.640
run if I ran it
somewhere else. Yes. Okay. So

561
00:27:07.640 --> 00:27:08.840
you do all of your
edits and you're living in

562
00:27:08.840 --> 00:27:11.020
your own application all day
long writing parts. Yes. It

563
00:27:11.030 --> 00:27:12.920
gives me my syntax highlighting
and TeleSign so as a

564
00:27:12.920 --> 00:27:14.930
developer, you know, the key
things I look for, I

565
00:27:14.930 --> 00:27:16.670
have that in power in
Paraguay, he gives those to

566
00:27:16.670 --> 00:27:19.610
me today. And w can
I make, when I make

567
00:27:19.610 --> 00:27:21.020
a command that I write
the command that in C

568
00:27:21.020 --> 00:27:23.720
sharp, or maybe in VP,
in a dotnet language, what's

569
00:27:23.720 --> 00:27:25.160
the difference by finding why?
When would I write a

570
00:27:25.160 --> 00:27:26.630
script? And when would I
run a command line? Cause

571
00:27:26.630 --> 00:27:28.640
we struggled with this years
ago, we, we never knew

572
00:27:28.640 --> 00:27:30.470
really where you get scripts.
And the next thing you

573
00:27:30.470 --> 00:27:32.000
know, you've written a thousand
lines of script and you

574
00:27:32.000 --> 00:27:34.040
go, wow, that really should've
been a commandlet. Yeah, it's

575
00:27:34.040 --> 00:27:36.680
a fine line. I mean,
you, in V one you

576
00:27:36.680 --> 00:27:38.600
have functions available to you
or you can go ahead

577
00:27:38.600 --> 00:27:41.180
and write the command lit
functions is great because you

578
00:27:41.180 --> 00:27:42.850
can prototype it and do
it as quickly inside of

579
00:27:42.860 --> 00:27:45.110
PowerShell, but you're not necessarily
going to get the same

580
00:27:45.110 --> 00:27:47.750
performance you can out of
a compiled module. So depending

581
00:27:47.750 --> 00:27:48.890
on your needs, you may
want to go there to

582
00:27:48.890 --> 00:27:51.500
the command lit in V2,
you can actually do, what's

583
00:27:51.500 --> 00:27:55.280
called an advanced function, which
it brings functions and let's

584
00:27:55.280 --> 00:27:57.770
even closer together and allows
you to specify the perimeter

585
00:27:57.770 --> 00:28:00.560
bindings and things you couldn't
previously do in functions in

586
00:28:00.560 --> 00:28:02.990
version one. So this is
a script that looks like

587
00:28:02.990 --> 00:28:05.690
a commandlet. Yes. And it's
all written entirely in PowerShell.

588
00:28:05.900 --> 00:28:07.700
Okay. So I don't have
to go and say, get

589
00:28:07.730 --> 00:28:10.970
hyphen Hanselman dot P S
one or whatever the extension

590
00:28:10.970 --> 00:28:13.580
is. It looks and behaves
like a, like it's really

591
00:28:13.580 --> 00:28:15.980
there and built into the
system. Yes. Even even includes

592
00:28:15.980 --> 00:28:18.200
help even at a, get
help support for functions so

593
00:28:18.200 --> 00:28:20.000
you can get the rich
help. So that means that

594
00:28:20.000 --> 00:28:21.620
there's more of a pathway
than if I get caught

595
00:28:21.620 --> 00:28:22.790
up in a script and
I say, wow, this should

596
00:28:22.790 --> 00:28:24.440
have been a chameleon. I
remember when I was talking

597
00:28:24.440 --> 00:28:26.930
with Jeffrey, it really requires
a lot of thought, Jeffrey,

598
00:28:26.930 --> 00:28:31.070
snow, the architect of PowerShell.
And it was Bruce, Bruce

599
00:28:31.070 --> 00:28:34.460
Payette, the designer of the
language that if you want

600
00:28:34.460 --> 00:28:36.680
to make a really good
system, that handles command let's

601
00:28:36.680 --> 00:28:39.740
you have to think about
the domain. It really needs

602
00:28:39.740 --> 00:28:41.600
to be a domain driven
design. You know, what is

603
00:28:41.600 --> 00:28:43.670
it we're trying to accomplish?
What are the objects that

604
00:28:43.670 --> 00:28:46.250
are going to pass over
are our pipes and how

605
00:28:46.250 --> 00:28:48.140
they're going to interact. And
I don't think that I,

606
00:28:48.230 --> 00:28:49.910
I know I didn't do
that on the version. One

607
00:28:49.910 --> 00:28:54.560
of my, my PowerShell based
system, PowerShell a consumer now

608
00:28:54.560 --> 00:28:56.360
for two years, that's generally
how I find I write

609
00:28:56.360 --> 00:28:58.700
my functions today is I
will try to package them

610
00:28:58.700 --> 00:29:00.800
up like a, almost like
it would be a snap

611
00:29:00.800 --> 00:29:02.540
in that you would import,
but it just Functional library.

612
00:29:02.790 --> 00:29:05.450
So snap. So with all
the buzz words, Kirk, what's

613
00:29:05.450 --> 00:29:07.730
wrong. So snapping for our,
for our listeners who may

614
00:29:07.730 --> 00:29:10.460
not know what a snap
in is. Yeah. Snap-in is

615
00:29:10.490 --> 00:29:13.120
a compiled module that you
can import into PowerShell version

616
00:29:13.140 --> 00:29:16.760
one. And that's how you
add commandlets for, for VMware

617
00:29:16.760 --> 00:29:21.020
or exchange 2007, right. In
version two, that changes slightly.

618
00:29:21.020 --> 00:29:23.300
So they have the new
concept of modules, which is

619
00:29:23.300 --> 00:29:26.180
basically a big brother to
snap bins. So you can

620
00:29:26.180 --> 00:29:29.690
now import type libraries directly
from DLLs and you don't

621
00:29:29.690 --> 00:29:32.990
have to do just adding
a snapping that is contains

622
00:29:32.990 --> 00:29:35.240
nothing, but, Okay. So then
just like the snap ins

623
00:29:35.240 --> 00:29:37.070
that were used to an
MMC, I can go file,

624
00:29:37.070 --> 00:29:39.920
add snap and I can
and have management ability. And

625
00:29:39.920 --> 00:29:41.560
it appears in a note
and tree, I can do

626
00:29:41.560 --> 00:29:43.620
the same thing in PowerShell.
Yes. You can do add

627
00:29:43.620 --> 00:29:45.930
that. Add dash P S
napping in version one, or

628
00:29:45.930 --> 00:29:48.150
in version two, you can
do import dash module. And

629
00:29:48.150 --> 00:29:49.710
then, and then your product
power GUI is kind of

630
00:29:49.710 --> 00:29:51.990
a mix of the two
it's kind of MMC and

631
00:29:52.050 --> 00:29:55.140
PowerShell where I can import
snap ins and modules and

632
00:29:55.140 --> 00:29:57.060
going to get a similar
experience. The best of both

633
00:29:57.060 --> 00:29:59.610
worlds, both MMC and PowerShell.
Yeah. Cause we have a

634
00:29:59.610 --> 00:30:01.740
second part. That's the FMC
side of the fence, which

635
00:30:01.740 --> 00:30:06.120
has an MMC like UI
that's powered by PowerShell scripts

636
00:30:06.120 --> 00:30:08.220
behind the scenes. And that's
what I that's my primary

637
00:30:08.220 --> 00:30:10.560
task at work is fleshing
out these, these power packs.

638
00:30:10.560 --> 00:30:12.390
That's basically our name for
a collection of these scripts.

639
00:30:12.630 --> 00:30:15.630
So, so for the, for
the developers and I'm suspecting,

640
00:30:15.660 --> 00:30:18.570
I I'm suspecting that my
audience is 80% developers, more

641
00:30:18.570 --> 00:30:22.890
developers than, than not. When,
when should they look for

642
00:30:22.890 --> 00:30:25.230
opportunities to use, to use
PowerShell? And I don't mean

643
00:30:25.230 --> 00:30:28.020
they should just make up
an opportunity, but a PowerShell

644
00:30:28.020 --> 00:30:30.330
is definitely a solution. What
are the kinds of problems

645
00:30:30.330 --> 00:30:31.860
that they're going to want
to solve? And it's funny

646
00:30:31.860 --> 00:30:34.110
that I took the mic,
you know, at the administrator

647
00:30:34.110 --> 00:30:36.960
answering this question, I want
to say to the developers

648
00:30:36.960 --> 00:30:41.030
that whenever you want your,
your application, okay, you, you

649
00:30:41.040 --> 00:30:43.110
make plans. You have a
way that you design your

650
00:30:43.110 --> 00:30:45.180
program and you, you think
that, you know how it

651
00:30:45.180 --> 00:30:47.760
ought to be used, but
you're wrong. You don't know

652
00:30:47.760 --> 00:30:50.190
how it's going to be
used. Okay. So you're going

653
00:30:50.190 --> 00:30:51.690
to, you're going to be
right. Most of the time,

654
00:30:51.690 --> 00:30:55.380
hopefully. Sure. But when it
lands in the pits and

655
00:30:55.380 --> 00:30:57.240
when people were sitting down
and using it in the

656
00:30:57.240 --> 00:30:59.970
real world, they're going to
need to extend it. They're

657
00:30:59.970 --> 00:31:02.400
going to need to tie
it to other things. And

658
00:31:02.400 --> 00:31:05.970
if you, whether you're hosting
a PowerShell instance in your

659
00:31:05.970 --> 00:31:09.540
application, whether you are, you
know, shipping a set of

660
00:31:09.540 --> 00:31:13.860
commandments by integrating PowerShell in
with your product, you are

661
00:31:13.860 --> 00:31:17.310
giving the users the glue
that they need, but you're

662
00:31:17.310 --> 00:31:19.290
allowing them to script it.
You're learning them to compose,

663
00:31:19.350 --> 00:31:23.190
compose it with other things.
Right? Right. There's a couple

664
00:31:23.190 --> 00:31:26.370
of other key scenarios that,
that PowerShell brings to the

665
00:31:26.370 --> 00:31:28.890
developers that I used when
I was just starting using

666
00:31:28.890 --> 00:31:31.950
PowerShell. If you're doing support
for a customer and you're

667
00:31:31.950 --> 00:31:34.500
trying to figure out what's
going wrong and they're already

668
00:31:34.500 --> 00:31:38.100
using a.net based application, well,
you can use.net directly in

669
00:31:38.100 --> 00:31:41.040
PowerShell. And you don't have
to think about, am I

670
00:31:41.040 --> 00:31:43.560
installing visual studio on this
person's system to debug it?

671
00:31:43.740 --> 00:31:45.710
You don't need to, you
can just go and throw

672
00:31:45.720 --> 00:31:47.550
in one of these fancy
editors that allows you to

673
00:31:47.550 --> 00:31:49.650
step through the code and
just do this directly in

674
00:31:49.650 --> 00:31:53.160
PowerShell. So that's a great
support opportunity for developers. That's

675
00:31:53.160 --> 00:31:56.640
interesting. My mom is running
the windows seven RC now,

676
00:31:56.640 --> 00:31:58.200
and I never, once in
a while, I'll use remote

677
00:31:58.200 --> 00:32:00.870
desktop to run into her
machine. And now you got

678
00:32:00.870 --> 00:32:02.550
me thinking that I might
go and write some PowerShell

679
00:32:02.550 --> 00:32:05.490
scripts to, to help her
debug some of the problems

680
00:32:05.490 --> 00:32:07.560
that she has day by
day. Aren't the, the new

681
00:32:07.560 --> 00:32:10.230
troubleshooter packs that are built
into windows seven. You guys

682
00:32:10.230 --> 00:32:13.110
know about these. If you
have problem with something in

683
00:32:13.110 --> 00:32:15.390
windows seven, like for example,
yesterday, I couldn't figure out

684
00:32:15.390 --> 00:32:18.960
why transparency wouldn't turn on.
So I typed in fix

685
00:32:19.890 --> 00:32:23.100
typing in transparency and then
it says, find and fix

686
00:32:23.100 --> 00:32:26.160
problems with transparency and I
hit enter and this nice

687
00:32:26.160 --> 00:32:28.740
dialog box comes up. And
I said to myself, Oh

688
00:32:28.740 --> 00:32:30.390
wow, that's cool. And then
I started doing a little

689
00:32:30.390 --> 00:32:33.420
bit of searching around. This
is PowerShell. Isn't it? That's

690
00:32:33.420 --> 00:32:35.700
doing this work. I believe
so. Yes. Behind the scenes,

691
00:32:35.700 --> 00:32:38.730
they have some troubleshooting modules
for, for PowerShell and we

692
00:32:38.730 --> 00:32:42.200
can write ourselves. Absolutely. And
that's pretty cool. I noticed

693
00:32:42.200 --> 00:32:44.630
that because I, I I'm
using a tool to, to

694
00:32:44.630 --> 00:32:48.170
Raz in, to, to work.
And when I installed that

695
00:32:48.170 --> 00:32:50.390
tool on my machine, so
I could VPN into work,

696
00:32:50.570 --> 00:32:54.440
they installed a troubled troubleshooter,
which gets me thinking about

697
00:32:54.440 --> 00:32:57.920
what a person who has
a product could do to

698
00:32:57.920 --> 00:33:02.240
install troubleshooting packs, to find
and fix simple problems and

699
00:33:02.240 --> 00:33:04.940
using PowerShell. And of course,
in this example, as the

700
00:33:04.940 --> 00:33:07.220
user, I would never know
that this was using harsher.

701
00:33:07.340 --> 00:33:09.710
For sure. And even when
you're talking about troubleshooting and

702
00:33:09.710 --> 00:33:12.290
fixing users' problems, I mean,
as a developer, you're dealing

703
00:33:12.290 --> 00:33:15.140
with customers who have, you
know, a certain version of

704
00:33:15.140 --> 00:33:17.750
your application and they may
want some new features. Those

705
00:33:17.750 --> 00:33:20.870
new features may end up
closing a sales deal if

706
00:33:20.870 --> 00:33:22.370
they have those features and
you might not have them

707
00:33:22.370 --> 00:33:25.310
baked in. So I mean,
alternatives are that you scramble

708
00:33:25.310 --> 00:33:27.500
and try to put those
into a compiled module, or

709
00:33:27.500 --> 00:33:29.180
maybe you use something like
PowerShell to come in and

710
00:33:29.180 --> 00:33:31.460
fill in the blank as
a stop gap measure until

711
00:33:31.460 --> 00:33:33.230
you can actually go and
put those features into your

712
00:33:33.230 --> 00:33:35.600
product. And that's something else
I've done in the past

713
00:33:35.600 --> 00:33:37.490
that I found very handy.
Well, I'm looking forward to

714
00:33:37.490 --> 00:33:40.100
the ubiquity of PowerShell. The
idea that when everyone gets

715
00:33:40.100 --> 00:33:42.740
up on these is newer
operating systems, it'll just be

716
00:33:42.740 --> 00:33:44.360
there now, but I won't
be able to just send

717
00:33:44.360 --> 00:33:46.580
it to someone. I can't
just email you how a

718
00:33:46.590 --> 00:33:48.530
dot P S file on
DoubleClick and then take over

719
00:33:48.530 --> 00:33:51.200
your computer, right? No, you
can't. And of course, Microsoft

720
00:33:51.200 --> 00:33:53.420
learned some lessons from a
VB script and you know,

721
00:33:53.420 --> 00:33:55.490
the, I love you virus
and Melissa and all that

722
00:33:56.390 --> 00:33:59.510
by default you're, you're only
going to be able to

723
00:34:00.590 --> 00:34:03.530
execute scripts that have been
signed on your local PC.

724
00:34:03.950 --> 00:34:06.020
Okay. So you're basically not
able to run scripts at

725
00:34:06.030 --> 00:34:07.970
all. Right? Because I don't
have any science scripts. That's

726
00:34:07.970 --> 00:34:09.740
exactly right. There's several levels
that you can set it

727
00:34:09.740 --> 00:34:12.740
to. For example, you can
say remote sign. So any

728
00:34:12.770 --> 00:34:15.200
script that you create on
your, on your PC will

729
00:34:15.200 --> 00:34:17.710
run without having to sign
it. But anything of downloaded

730
00:34:17.750 --> 00:34:21.470
from the internet will be
tagged and you can't run

731
00:34:21.470 --> 00:34:23.600
it unless it's signed. And
then you can, you could

732
00:34:23.600 --> 00:34:25.010
set it all the way
down to unrestricted if you

733
00:34:25.010 --> 00:34:28.010
like. Okay. Well, very cool.
Well, thanks so much you

734
00:34:28.010 --> 00:34:30.590
guys, for talking to me
today, we've got a Kirk.

735
00:34:30.590 --> 00:34:32.960
They can check out your
stuff at power gooey. Yes.

736
00:34:32.960 --> 00:34:36.770
At power gui.org, <inaudible> dot
org, and then how a

737
00:34:36.770 --> 00:34:39.470
PowerShell community.org. That's right. And
you guys can, we have

738
00:34:39.470 --> 00:34:42.310
forums and we have forums.
And we, you know, tried

739
00:34:42.310 --> 00:34:45.150
to raise the bar of
PowerShell awareness in general and

740
00:34:45.260 --> 00:34:48.800
give resources to people. And
we'd like to support local

741
00:34:48.800 --> 00:34:51.470
user groups as well. Alright.
And then if the listeners

742
00:34:51.470 --> 00:34:54.380
want to see me suffering
with PowerShell 1.03 years ago,

743
00:34:54.380 --> 00:34:57.540
I've got a PowerShell category
on my blog. And I'm,

744
00:34:57.730 --> 00:34:59.690
I think I might go
and write myself a troubleshooter

745
00:34:59.690 --> 00:35:03.200
in, in PowerShell and installing
in the windows seven. Cool.

746
00:35:03.200 --> 00:35:04.760
Well, thanks so much guys,
for talking to me today.

747
00:35:04.760 --> 00:35:07.490
This has been another episode
of Hanselminutes and we'll see

748
00:35:07.490 --> 00:35:08.450
you again next week.

