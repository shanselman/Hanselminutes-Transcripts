WEBVTT FILE

1
00:00:00.300 --> 00:00:03.450
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.450 --> 00:00:06.420
they make the show possible.
Today's show is sponsored by

3
00:00:06.420 --> 00:00:10.590
developer express, become a UI
superhero with dev express controls

4
00:00:10.590 --> 00:00:15.120
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.510 --> 00:00:19.620
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.620 --> 00:00:23.700
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.820 --> 00:00:49.320
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com
from hanselminutes.com. It's Hansel minutes,

8
00:00:49.590 --> 00:00:53.820
a weekly discussion with web
developer and technologist Scott Hanselman.

9
00:00:54.180 --> 00:00:59.280
This is Lawrence Ryan announcing show
number 508. In this episode,

10
00:00:59.280 --> 00:01:03.720
Scott talks with Stacy Kirk
CEO of quality works. I

11
00:01:03.720 --> 00:01:12.360
know JS focused quality assurance
company. Hi, this is Scott

12
00:01:12.360 --> 00:01:14.790
Hanselman. This is another episode
of Hansel minutes today. We're

13
00:01:14.790 --> 00:01:17.490
talking with Stacy Kirk. She's
the CEO of quality works

14
00:01:17.490 --> 00:01:19.890
consulting group. Thanks for chatting
with me today. Thank you,

15
00:01:19.890 --> 00:01:23.270
Scott. Good to be here.
So you're you're in, into,

16
00:01:23.270 --> 00:01:25.830
into node. We're here to
node conference. I've actually met

17
00:01:25.830 --> 00:01:27.030
you at a node conference
and you have got a

18
00:01:27.030 --> 00:01:32.640
website node, qa.io. You're focusing
on QA, right? You're not

19
00:01:32.640 --> 00:01:34.950
a general purpose consulting group.
That's going to do like

20
00:01:34.980 --> 00:01:40.010
full service. Your priority is
testing and quality assurance. Yes,

21
00:01:40.760 --> 00:01:44.180
we focus on all areas
of quality service, quality assurance.

22
00:01:44.180 --> 00:01:49.580
So full testing from unit
integration end to end functional.

23
00:01:50.060 --> 00:01:54.530
And we focus specifically on
quality assurance and not software

24
00:01:54.530 --> 00:01:58.070
development. And there is some
overlap in dev ops and

25
00:01:58.390 --> 00:02:04.310
also in process around agile
coaching, but everything has a

26
00:02:04.310 --> 00:02:07.370
focus on software quality. So
when you're thinking about software

27
00:02:07.370 --> 00:02:10.790
quality at that, at that
level of focus, or are

28
00:02:10.790 --> 00:02:13.430
you brought into an organization
and you're, you're looking at

29
00:02:13.430 --> 00:02:15.560
their shipping process and you're
saying there's a gap there,

30
00:02:15.560 --> 00:02:18.620
and this is a quality
gap. You need staff augmentation

31
00:02:18.620 --> 00:02:21.140
and maybe you need a
better CII server and you

32
00:02:21.140 --> 00:02:24.020
need a better deployment strategy
and things like that. Well,

33
00:02:24.500 --> 00:02:27.440
we keep it pretty informal.
We have a lot of

34
00:02:27.440 --> 00:02:33.020
conversations. Most tech firms know
where their deficit is, what

35
00:02:33.020 --> 00:02:36.170
they don't know is how
do they solve it. So

36
00:02:36.830 --> 00:02:39.680
they know that there's quality
issues. They know that things

37
00:02:39.680 --> 00:02:42.650
are taking a long time
to get out. And so

38
00:02:42.740 --> 00:02:45.290
I talk with developers, I
talk with product owners, I

39
00:02:45.290 --> 00:02:49.220
look at their specs, I
look at their code and

40
00:02:49.250 --> 00:02:52.430
I give advice on what
it is I think can,

41
00:02:52.460 --> 00:02:55.760
can help with that solution.
Many times, it's just understanding

42
00:02:55.760 --> 00:02:58.430
QA at a level that
a lot of people don't

43
00:02:58.610 --> 00:03:02.590
really, And you've been doing
software for almost 20 years

44
00:03:02.590 --> 00:03:04.840
now, right? You came out
of Stanford and how did

45
00:03:04.840 --> 00:03:09.840
you get started? So I
actually started QA while I

46
00:03:09.840 --> 00:03:13.620
was at Stanford. It was
my first internship. I was

47
00:03:13.770 --> 00:03:17.430
very excited to get into
QA because, or not into

48
00:03:17.430 --> 00:03:19.950
QA, but just to have
a job where I didn't

49
00:03:19.950 --> 00:03:24.750
have to sell burgers or
do something in the hot

50
00:03:24.750 --> 00:03:29.280
sun. So I started with
a company called remedy corporation.

51
00:03:29.310 --> 00:03:31.170
They were at the time
one of the leading help

52
00:03:31.170 --> 00:03:35.940
desk software. And I had
absolutely no idea what QA

53
00:03:35.940 --> 00:03:38.130
was. I just knew that
it was a technical job

54
00:03:38.160 --> 00:03:39.720
and they were going to
pay me more money than

55
00:03:39.720 --> 00:03:44.970
I could've ever imagined $15
an hour. And once I,

56
00:03:45.210 --> 00:03:49.770
once I started, I realized
that there was a big

57
00:03:49.770 --> 00:03:52.290
difference between QA and development.
At least at the time

58
00:03:53.160 --> 00:03:56.310
the QA department and dev
department rarely spoke to each

59
00:03:56.310 --> 00:04:01.260
other. There were two types
of QA. There were mostly

60
00:04:01.260 --> 00:04:04.920
QA analysts that wrote a
lot of test cases. Weren't

61
00:04:04.950 --> 00:04:08.250
particularly very technical. Didn't really
know how to do any

62
00:04:08.250 --> 00:04:13.800
programming. And then there was
one person that was the

63
00:04:13.800 --> 00:04:18.000
automation QA guy that also
worked in a silo and

64
00:04:18.030 --> 00:04:21.630
created automated tests. So that
was my introduction, but I

65
00:04:21.630 --> 00:04:25.800
did love quality. I loved
finding issues and finding ways

66
00:04:25.800 --> 00:04:28.410
to do things better. So
I've made a career of

67
00:04:28.410 --> 00:04:32.310
it. No, I've worked in
big organizations and found that

68
00:04:32.310 --> 00:04:34.260
there's definitely kind of a,
for lack of a better

69
00:04:34.260 --> 00:04:37.740
word, a respect gap between
the software folks and the

70
00:04:37.830 --> 00:04:41.550
QA folks. And that can
build, I think, resentment between

71
00:04:41.550 --> 00:04:45.120
organizations and, you know, like
the spark of resentment turns

72
00:04:45.120 --> 00:04:47.370
into the fires of rebellion.
Have you found similar kind

73
00:04:47.370 --> 00:04:51.600
of things? Oh yes. Luckily
I feed on feed on

74
00:04:51.600 --> 00:04:55.980
that. So that's the only
reason I've I've survived every

75
00:04:55.980 --> 00:05:00.000
year. I get asked this
question from a developer. They

76
00:05:00.000 --> 00:05:03.000
go Stacy, wow, you're really
good. You should become a

77
00:05:03.000 --> 00:05:07.170
developer. And I go, thank
you. That's why I'm not

78
00:05:07.170 --> 00:05:09.240
going to be a developer,
but thank you very much.

79
00:05:10.050 --> 00:05:13.320
And I had a boss
once that told this joke

80
00:05:13.320 --> 00:05:15.060
and didn't even realize that
it could have been a

81
00:05:15.060 --> 00:05:17.310
little offensive. And he goes,
do you know what happens

82
00:05:17.310 --> 00:05:20.100
to software developers? When they
do a bad job when

83
00:05:20.100 --> 00:05:26.700
they die, they are reincarnated
as QA people. So it's,

84
00:05:27.060 --> 00:05:30.030
it has been difficult for
most QA people. I've done

85
00:05:30.030 --> 00:05:32.670
this for 20 years. And
so I've worked with hundreds

86
00:05:32.700 --> 00:05:37.050
of QA individuals and it's
very difficult to make a

87
00:05:37.050 --> 00:05:41.700
career in QA. If you're
really talented, you will get

88
00:05:41.700 --> 00:05:47.310
pulled away and you have
to have a certain attitude.

89
00:05:47.340 --> 00:05:50.760
You personally have to be
able to find gratitude in

90
00:05:50.760 --> 00:05:54.330
what you do, because very
rarely do people come by

91
00:05:54.330 --> 00:05:57.860
your desk and go, Oh,
you found that really? Fuck.

92
00:05:58.040 --> 00:06:01.670
Thank you. Thank you. I'm
so happy about it. So

93
00:06:01.730 --> 00:06:07.250
I'm usually whatever issues are
found by QA, it's kind

94
00:06:07.250 --> 00:06:11.750
of bad news, but the
people that I've worked for

95
00:06:11.750 --> 00:06:15.290
worked with that are really
some of the most talented

96
00:06:15.290 --> 00:06:19.160
QA people. I think in
the industry, they, they really

97
00:06:19.160 --> 00:06:23.450
do have a passion for
quality and a passion for

98
00:06:23.480 --> 00:06:26.630
not just finding bugs, but
having a product that goes

99
00:06:26.630 --> 00:06:30.190
out the door that everyone
can be proud of. I,

100
00:06:30.430 --> 00:06:33.730
I came up in the
kind of late nineties timeframe

101
00:06:33.760 --> 00:06:36.610
and somewhere around 99, 2000,
we started talking about unit

102
00:06:36.610 --> 00:06:40.300
testing and I'm, I'm not
trying to read into it

103
00:06:40.300 --> 00:06:43.330
too much, but I'm starting
to wonder if unit testing

104
00:06:43.330 --> 00:06:45.910
as a concept was a
thing that developers came up

105
00:06:45.910 --> 00:06:48.130
with in order to like
take testing away from the

106
00:06:48.130 --> 00:06:51.400
testers, but then also teach
testers that didn't know how

107
00:06:51.400 --> 00:06:53.290
to code, how to code
and then bring them over

108
00:06:53.290 --> 00:06:56.800
to our side. But it's
unit testing lives in such

109
00:06:56.800 --> 00:06:59.530
a weird space. You know,
don't you think between regular,

110
00:06:59.530 --> 00:07:03.760
you know, between QA button
clickers and doves? Well, unit

111
00:07:03.760 --> 00:07:08.350
testing is, is something that
should be done by the

112
00:07:08.350 --> 00:07:15.490
developer. So around early two
thousands, the, the test driven

113
00:07:15.490 --> 00:07:19.090
development and movement began to
start. And I think unit

114
00:07:19.090 --> 00:07:23.650
testing in itself is very
valuable. It allows developers to

115
00:07:23.650 --> 00:07:27.610
begin to think outside of
just creating and think of

116
00:07:27.610 --> 00:07:32.080
what could happen. So it's,
it's a great way for

117
00:07:32.080 --> 00:07:37.750
them to see the bigger
picture, the challenges that especially

118
00:07:37.750 --> 00:07:40.450
now that we're in node
in theirs. And it's great

119
00:07:40.450 --> 00:07:44.110
because the node community has
spent a lot more time

120
00:07:44.110 --> 00:07:47.730
around testing. There is a
folder with that says tests.

121
00:07:47.730 --> 00:07:50.260
So for people like me
that are really geeky about

122
00:07:50.260 --> 00:07:53.890
software quality, I'm just happy
and pleased that in the

123
00:07:53.890 --> 00:07:57.580
no community, there are, there
is a location. There is

124
00:07:57.580 --> 00:08:03.010
a space for testing. The
challenge is right now, development

125
00:08:03.910 --> 00:08:06.160
thinks if I can get
to a hundred percent code

126
00:08:06.160 --> 00:08:09.670
coverage, we don't have any
bugs. And that's still not

127
00:08:09.670 --> 00:08:13.390
the case because, and this
is one of the things

128
00:08:13.390 --> 00:08:19.470
that has been very valuable
in terms of the, the

129
00:08:19.550 --> 00:08:22.030
issues that I've found over
the years is most of

130
00:08:22.030 --> 00:08:28.180
the severe, severe bugs are
not code bugs, they're misunderstandings.

131
00:08:28.540 --> 00:08:32.410
And so you can't really
test for that in terms

132
00:08:32.410 --> 00:08:35.860
of what you write in
your unit tests. And so

133
00:08:36.160 --> 00:08:40.300
what our company does is
really educate our developers on,

134
00:08:40.300 --> 00:08:42.850
okay, great. You've gotten to
the place where you can

135
00:08:42.850 --> 00:08:45.820
write good unit tests and
you can use tools like

136
00:08:45.820 --> 00:08:50.470
Istanbul to evaluate the, your
code coverage, but what's next?

137
00:08:50.470 --> 00:08:52.660
How do, why is it
that you still have bugs?

138
00:08:53.020 --> 00:08:55.830
And we try to educate
them on what testing that

139
00:08:55.830 --> 00:08:57.960
they can do. And, and
that's, that's the reason that

140
00:08:57.960 --> 00:09:02.970
we created note qa.io, so
that there's a place where

141
00:09:02.970 --> 00:09:05.820
people can go, well, I
just know unit testing. I

142
00:09:05.820 --> 00:09:07.500
don't know what else I
need to do. I don't

143
00:09:07.500 --> 00:09:09.480
know what other things I
need to do so that

144
00:09:10.160 --> 00:09:13.050
as soon as I finished
my test, finish, finish my

145
00:09:13.050 --> 00:09:16.680
software code. I know that
the tests are gonna run

146
00:09:16.680 --> 00:09:19.200
and we'll have a good
sense of the quality of

147
00:09:19.200 --> 00:09:22.100
the product. There's a, there's
a lot there. I want

148
00:09:22.100 --> 00:09:23.480
to take apart some of
what you said, cause this

149
00:09:23.480 --> 00:09:26.780
is a lot of really
good information. So first the

150
00:09:26.780 --> 00:09:31.070
idea of code coverage as
particular number, being a goal

151
00:09:31.550 --> 00:09:33.440
like a hundred percent or
a hundred percent of a

152
00:09:33.440 --> 00:09:37.130
particular module, it gets me
thinking about the, kind of

153
00:09:37.130 --> 00:09:39.560
the, the Cartesian product of
all the different things that

154
00:09:39.560 --> 00:09:41.810
can go through. Like you
need to hit every single

155
00:09:41.810 --> 00:09:43.670
line of code, but really
what you need to do

156
00:09:43.670 --> 00:09:45.320
is hit every single line
of the code that has

157
00:09:45.320 --> 00:09:47.090
hit the most. Don't you,
you have to hit the

158
00:09:47.090 --> 00:09:50.600
hot, the hot path, as
they say, like, if you

159
00:09:50.600 --> 00:09:53.570
do a hundred percent code
coverage, you might be trying

160
00:09:53.570 --> 00:09:55.340
to get code coverage on
sections of the code that

161
00:09:55.340 --> 00:09:58.640
are rarely if ever run,
but not really what the,

162
00:09:59.480 --> 00:10:01.520
what is needed by the
business. Like you need to

163
00:10:01.520 --> 00:10:04.850
have multiple layers of code
coverage and multiple kinds of,

164
00:10:05.420 --> 00:10:09.230
of tests around the hot
path. Don't you think? So,

165
00:10:09.230 --> 00:10:15.320
so here's the extra layer
of complexity right now. The

166
00:10:15.350 --> 00:10:19.040
calculation of code coverage is
done at the unit test

167
00:10:19.040 --> 00:10:24.980
level, which means that it
is, it is generic across

168
00:10:24.980 --> 00:10:29.000
all functions that are being
tested. It doesn't, there is

169
00:10:29.000 --> 00:10:34.070
no way to say these
are the areas where our

170
00:10:34.070 --> 00:10:37.190
users are going to use
the product the most. And

171
00:10:37.460 --> 00:10:40.550
in that area, we've got
a hundred percent coverage. And

172
00:10:40.550 --> 00:10:44.630
so that's the challenge that
we plan our company plans

173
00:10:44.630 --> 00:10:47.750
to address is okay, we
can have a hundred percent

174
00:10:47.750 --> 00:10:50.930
code coverage of our unit
tests of our methods and

175
00:10:50.930 --> 00:10:54.680
functionality, but how do we
really know if we have

176
00:10:54.680 --> 00:10:58.370
a high quality product and,
and quality as we calculate

177
00:10:58.370 --> 00:11:02.870
it in, in our tools
that we've created is not

178
00:11:02.870 --> 00:11:06.080
only the code and the
features, but also the priority

179
00:11:06.080 --> 00:11:09.020
of those and priorities based
on the usage of the

180
00:11:09.020 --> 00:11:13.130
user and the business. So
that gets me thinking you

181
00:11:13.130 --> 00:11:15.710
are also a scrum master,
right? And you're an agile

182
00:11:15.740 --> 00:11:19.010
coach, and there's a lot
of time spent when doing

183
00:11:19.010 --> 00:11:21.620
agile coaching and we're doing
estimation to play things like,

184
00:11:21.770 --> 00:11:24.890
was it called estimation poker,
planning, poker? When you take,

185
00:11:25.430 --> 00:11:29.360
you take a user stories
and you weight them, that

186
00:11:29.360 --> 00:11:31.910
weight is valuable, it's important
because you use it to

187
00:11:31.910 --> 00:11:35.450
schedule, but then that weight
is basically thrown away. And

188
00:11:35.450 --> 00:11:37.820
why not take that forward
into your unit test as

189
00:11:37.820 --> 00:11:40.190
a piece of metadata that
then could be applied to

190
00:11:40.370 --> 00:11:42.530
your code coverage and then
tell you if the important

191
00:11:42.530 --> 00:11:49.070
stuff got done. Yes, they,
the, the estimations are usually

192
00:11:49.070 --> 00:11:54.790
based on complexity. So complexity
and from business are a

193
00:11:54.790 --> 00:11:59.860
little bit different. So the
great thing about agile and

194
00:11:59.860 --> 00:12:02.830
scrum, and I'm a big
champion of, for, for those

195
00:12:02.830 --> 00:12:07.090
as well, is that in
those planning meetings, product owners

196
00:12:07.870 --> 00:12:11.440
share with the development team
and the QA team, exactly,

197
00:12:11.650 --> 00:12:14.650
what's a priority to them.
Those are the acceptance criteria.

198
00:12:15.070 --> 00:12:19.870
And so the acceptance criteria
could be five checks of

199
00:12:19.960 --> 00:12:23.020
five items, five features that
they want to make sure

200
00:12:23.020 --> 00:12:26.500
are there, but when development
codes they could have a

201
00:12:26.500 --> 00:12:30.250
hundred methods or a hundred
hundred functions that they create.

202
00:12:30.610 --> 00:12:36.310
So the value with having
user stories is that you

203
00:12:36.310 --> 00:12:38.650
get an opportunity to see
what is the most important

204
00:12:38.650 --> 00:12:41.890
thing to the product and
that's the acceptance criteria. And

205
00:12:41.890 --> 00:12:46.000
so as the QA function,
which could be done by

206
00:12:46.000 --> 00:12:50.320
development or QA, really utilize
that acceptance criteria as the

207
00:12:50.320 --> 00:12:53.700
priority for their end to
end tests, That makes a

208
00:12:53.700 --> 00:12:55.650
lot more sense than what
I was saying. I appreciate

209
00:12:55.650 --> 00:12:58.500
that. No, that's a good
correction because there's the complexity

210
00:12:58.500 --> 00:13:00.540
of the story. There's the
importance of the story as

211
00:13:00.540 --> 00:13:04.020
the, at the business level,
which is also a realization

212
00:13:04.020 --> 00:13:07.200
of a reminder rather than
why is it we're writing

213
00:13:07.200 --> 00:13:09.840
software, right? We are writing
this to support a business,

214
00:13:09.900 --> 00:13:12.540
to support a particular user
story that is crucial to

215
00:13:12.540 --> 00:13:15.120
the business. And I think,
like you said, when you

216
00:13:15.120 --> 00:13:17.580
break up a user story
into 50 functions or some

217
00:13:17.580 --> 00:13:20.880
number of functions, a lot
of that business prioritization is

218
00:13:20.880 --> 00:13:24.600
lost. There's an opportunity for
QA though, to resurface that

219
00:13:24.720 --> 00:13:28.560
to the developer. Yeah. I'm
going back to my example

220
00:13:28.560 --> 00:13:33.210
of how QA was when
I first started 20 years

221
00:13:33.210 --> 00:13:38.430
ago, there was no visibility
for quality assurance into what

222
00:13:38.430 --> 00:13:42.450
was a priority business created
requirements. You got a requirements

223
00:13:42.450 --> 00:13:45.630
doc. And at that company,
in that product size, the

224
00:13:45.630 --> 00:13:49.710
requirements doc was a hundreds
of pages and development went

225
00:13:49.710 --> 00:13:53.070
off and they wrote their
code. QA went off and

226
00:13:53.070 --> 00:13:55.980
wrote thousands of test cases.
And each test case was

227
00:13:55.980 --> 00:13:58.830
one page each, it was
literally larger than a Bible.

228
00:13:59.310 --> 00:14:04.470
And there was no clear
idea of what, what is

229
00:14:04.470 --> 00:14:06.900
a quality product. And in
order to understand that you

230
00:14:06.900 --> 00:14:11.910
have to have those conversations.
And so being, you know,

231
00:14:12.090 --> 00:14:14.550
I love agile QA. That's,
that's kind of like my,

232
00:14:14.610 --> 00:14:17.730
my, my total handle because
I love agile QA because

233
00:14:17.730 --> 00:14:22.380
it gives the QA function,
QA person resource, or even

234
00:14:22.390 --> 00:14:26.520
a developer, a better understanding
of what the business is

235
00:14:26.520 --> 00:14:30.960
looking for and what they
consider quality. Or at the

236
00:14:30.960 --> 00:14:34.050
very beginning, when I talked
about unit testing, you said

237
00:14:34.050 --> 00:14:35.910
that you felt that the
unit tests writing the unit

238
00:14:35.910 --> 00:14:38.490
test was a developer function.
Do you think QA resources

239
00:14:38.490 --> 00:14:41.190
should be writing unit tests
as well? Because I think

240
00:14:41.190 --> 00:14:44.220
it's Brian Lyles, who always
says, always be testing like

241
00:14:44.250 --> 00:14:46.730
you should have double the
code and your unit test

242
00:14:46.730 --> 00:14:49.560
than you should in your,
in your actual app. And

243
00:14:49.560 --> 00:14:52.190
that would imply that the
more people unit tests the

244
00:14:52.190 --> 00:14:55.630
better, Well, there's so many
different types of tests that

245
00:14:55.630 --> 00:14:58.990
need to be written. The
great thing about having, for

246
00:14:58.990 --> 00:15:02.410
example, the scrum team is
there are people that are

247
00:15:02.410 --> 00:15:04.870
strong at being a software
developer. There's people that are

248
00:15:04.870 --> 00:15:07.840
strong at being a QA
there's people that are strong

249
00:15:07.840 --> 00:15:11.320
in UX and traditionally they
would be a part of

250
00:15:12.280 --> 00:15:14.620
that would be their title.
And that's exactly what they

251
00:15:14.620 --> 00:15:18.460
do. But if we get
to the core of, of

252
00:15:18.940 --> 00:15:22.570
high quality, high functioning, scrum
team, people can wear multiple

253
00:15:22.570 --> 00:15:26.770
hats. And so even though
a QA person, I don't

254
00:15:26.770 --> 00:15:29.830
believe would be necessarily the
best person to write unit

255
00:15:29.830 --> 00:15:34.150
tests. The goal is getting
quality product out. So whoever

256
00:15:34.180 --> 00:15:37.270
has that experience, whoever has
that skill can come in

257
00:15:37.600 --> 00:15:42.130
and, and deliver those type
of tests. But we've got

258
00:15:42.130 --> 00:15:43.960
to go beyond unit testing.
And that's one of the

259
00:15:43.960 --> 00:15:47.980
things that we promote is
once we have our unit

260
00:15:47.980 --> 00:15:51.400
tests, nothing, it's almost like
it's in a silo, you're

261
00:15:51.400 --> 00:15:54.940
testing very specific pieces of
code and pieces of functionality,

262
00:15:55.330 --> 00:15:58.900
but we all know that
code works within these larger

263
00:15:58.900 --> 00:16:03.250
systems and there's integration level
testing that needs to be

264
00:16:03.250 --> 00:16:08.380
done. Most code works with
databases. So there's database testing

265
00:16:08.380 --> 00:16:10.540
that needs to be done.
And of course there's the

266
00:16:10.540 --> 00:16:15.970
front end. And so there's
various areas where a QA

267
00:16:15.970 --> 00:16:18.610
person, and this is some
of the areas that my,

268
00:16:18.620 --> 00:16:22.090
my company handles in terms
of services. There's a lot

269
00:16:22.090 --> 00:16:24.700
of areas of testing that
we don't think about. Unit

270
00:16:24.700 --> 00:16:27.520
testing is kind of the
bottom of the pyramid. There's

271
00:16:27.520 --> 00:16:31.360
a testing pyramid. And at
the bottom, ideally you have

272
00:16:31.360 --> 00:16:33.790
your unit tests and that's
the majority of the testing

273
00:16:34.060 --> 00:16:37.750
that should be done. But
after that, you have integration

274
00:16:37.750 --> 00:16:42.340
tests, UI tests, and exploratory
tests. And so those are

275
00:16:42.340 --> 00:16:47.380
the ones that development doesn't
have as much experience with

276
00:16:47.410 --> 00:16:51.220
generally, but needs to be
done and actually finds a

277
00:16:51.220 --> 00:16:55.000
lot of the bugs that
have to do with integration

278
00:16:55.060 --> 00:17:01.660
of environments integration with different
devices, different third party, third

279
00:17:01.660 --> 00:17:05.110
parties. And we give that
advice on how we can

280
00:17:05.110 --> 00:17:07.690
do it in an automated
way. How can we integrate

281
00:17:07.690 --> 00:17:11.080
that into CAI systems so
that when a developer checks

282
00:17:11.080 --> 00:17:15.430
in his code, we can
have results in minutes as

283
00:17:15.430 --> 00:17:19.300
opposed to how it was
remedied so many years ago,

284
00:17:19.300 --> 00:17:22.330
which would be days, possibly
weeks to get those results.

285
00:17:22.870 --> 00:17:25.780
I love this, this QA
pyramid let's, let's do that.

286
00:17:25.780 --> 00:17:28.510
Let's walk our way up
the pyramid. So we've talked

287
00:17:28.510 --> 00:17:30.910
a little bit about unit
testing and the importance of

288
00:17:30.910 --> 00:17:32.590
it, but I liked that
it is the base of

289
00:17:32.590 --> 00:17:35.470
the pyramid does support everything.
You can't build everything else

290
00:17:35.470 --> 00:17:38.230
without a strong base. When
you start moving from integration,

291
00:17:38.230 --> 00:17:42.430
testing up into UI testing,
do you think that node

292
00:17:42.430 --> 00:17:44.380
is kind of uniquely placed
in the sense that it's

293
00:17:44.380 --> 00:17:47.500
all JavaScript? All your app
is JavaScript. All your unit

294
00:17:47.500 --> 00:17:49.120
tests are JavaScript, and now
you can go and write,

295
00:17:49.170 --> 00:17:52.290
you know, selenium tests or
UI automation tests and JavaScript

296
00:17:52.290 --> 00:17:55.320
as well, which inevitably tests,
Java script that you wrote

297
00:17:55.320 --> 00:18:00.350
on the client side. Yes,
no, it is awesome in

298
00:18:00.350 --> 00:18:05.780
terms of being able to
really find efficiencies and innovation

299
00:18:05.780 --> 00:18:10.040
and QA. I, I love
node because it does have

300
00:18:10.040 --> 00:18:12.590
modules that allow you to
do testing at every level.

301
00:18:12.830 --> 00:18:16.820
So there's a lot of
information out there about integration,

302
00:18:16.820 --> 00:18:21.140
contract, testing, service services, testing,
all of that is part

303
00:18:21.140 --> 00:18:25.730
of that integration layer. And
then there's a lot of,

304
00:18:25.960 --> 00:18:28.580
of, of players. Nightwatch is
one of, one of our

305
00:18:28.580 --> 00:18:32.390
favorites and the MOCA test
framework. There's a lot of

306
00:18:32.600 --> 00:18:36.950
amazing modules that are out
there for testing and itself.

307
00:18:37.400 --> 00:18:42.590
And we're able to utilize
those in a great way

308
00:18:42.590 --> 00:18:45.920
now to, to speed up
the way that we do

309
00:18:45.920 --> 00:18:50.750
testing and at, at the
core of why I joined

310
00:18:50.750 --> 00:18:53.210
QA and I've stayed in
QA for so many years

311
00:18:53.210 --> 00:18:58.070
is because I've been a
developer. And I felt that

312
00:18:58.070 --> 00:19:00.410
there needed to be more
efficiencies in the way we

313
00:19:00.410 --> 00:19:03.140
do quality assurance. I love
quality, and I'd love to

314
00:19:03.140 --> 00:19:07.340
see quality done faster, integrated,
quicker, and faster into the

315
00:19:07.340 --> 00:19:11.780
system. And node is incredible
because the community is so

316
00:19:11.780 --> 00:19:15.110
strong and is continuing to
grow at such such a

317
00:19:15.110 --> 00:19:18.260
pace that we have an
opportunity where we can have

318
00:19:18.680 --> 00:19:23.840
a full integrated system of
tests throughout that pyramid. Is

319
00:19:23.840 --> 00:19:27.200
there a, is there a
specific selection or a prescription

320
00:19:27.200 --> 00:19:29.300
that you give when you're
saying, like, when you come

321
00:19:29.300 --> 00:19:31.250
into a company like you've
worked at all sorts of,

322
00:19:31.280 --> 00:19:35.120
you know, big companies, you
know, from, from Symantec to

323
00:19:35.120 --> 00:19:37.970
FedEx and you know, big
companies and they say, you

324
00:19:37.970 --> 00:19:40.280
know, Hey Stacy, we were
using node, but we just

325
00:19:40.280 --> 00:19:43.550
don't have an expertise. We
need to know which UI

326
00:19:43.550 --> 00:19:46.310
integration library to use, which
testing frameworks do you say

327
00:19:46.430 --> 00:19:48.470
here's the integrated suite. And
these are the open source

328
00:19:48.470 --> 00:19:51.230
projects that we feel work
the best together, or is

329
00:19:51.230 --> 00:19:53.570
it more of a collaboration?
Well, it definitely has to

330
00:19:53.570 --> 00:19:57.140
be a collaboration. One of
the things that, that I

331
00:19:57.140 --> 00:20:01.530
do that you, you rarely
hear about is I, I,

332
00:20:01.630 --> 00:20:04.250
I analyze the people that
are part of the project.

333
00:20:04.640 --> 00:20:07.400
You can have a group
or a team, a scrum

334
00:20:07.400 --> 00:20:11.150
team, for example, at a
large company, that's very new

335
00:20:11.150 --> 00:20:17.150
to agile and they're, they're
resistant to change. They're resistant

336
00:20:17.150 --> 00:20:21.320
to new technologies. And so
if that's the case, we

337
00:20:21.320 --> 00:20:24.320
still want that team to
be successful, but they may

338
00:20:24.320 --> 00:20:28.550
not be ready for cutting
edge technology. And so, and

339
00:20:28.550 --> 00:20:31.820
also we have QA teams
where they don't have the

340
00:20:31.820 --> 00:20:35.780
technical expertise. They, they would
like to learn it, but

341
00:20:35.840 --> 00:20:40.250
they need the time to
ramp up. And so we

342
00:20:40.250 --> 00:20:44.240
definitely customize for the environment
that we're in. We have,

343
00:20:44.270 --> 00:20:48.400
if we do go to
a company where the there's

344
00:20:48.400 --> 00:20:51.880
QA people that have years
of JavaScript experience that are

345
00:20:51.880 --> 00:20:57.250
very interested and very excited
about new technologies, we give

346
00:20:57.250 --> 00:21:00.430
them a list of modules,
a list of frameworks that

347
00:21:00.430 --> 00:21:03.670
we think would really allow
them to get from zero

348
00:21:03.670 --> 00:21:08.770
to a hundred very quickly
in terms of getting continuous

349
00:21:08.770 --> 00:21:12.070
integration and maybe even a
continuous delivery system together. So

350
00:21:12.310 --> 00:21:15.520
it has to be customized.
And I think you have

351
00:21:15.520 --> 00:21:17.020
to look at the people
that are a part of

352
00:21:17.020 --> 00:21:19.120
the team and where they
are and meet them, where

353
00:21:19.120 --> 00:21:22.050
they are in terms of
the technologies we propose. So

354
00:21:22.050 --> 00:21:23.400
you, you want to get
them from zero to a

355
00:21:23.400 --> 00:21:25.200
hundred, but one of the
things that I've struggled with

356
00:21:25.200 --> 00:21:27.420
in the past when I
started introducing, you know, a

357
00:21:27.420 --> 00:21:30.840
more formalized testing environment, into
big companies, particularly big companies,

358
00:21:31.230 --> 00:21:32.750
and the best word I
have for it is, is

359
00:21:33.000 --> 00:21:36.300
lack of organizational maturity, right?
I mean, you could show

360
00:21:36.300 --> 00:21:38.820
up and you could say,
we're here, it's 2015, we've

361
00:21:38.820 --> 00:21:42.570
reached the promised land. Let's
talk about continuous deployment. And

362
00:21:42.570 --> 00:21:45.240
they're going to like unit
tests, wait, slow down. You

363
00:21:45.240 --> 00:21:47.970
know, you, you have to
kind of carry them for

364
00:21:47.970 --> 00:21:51.720
some of the bigger companies,
don't you think? Yes. There's

365
00:21:51.780 --> 00:21:57.030
there has to be a
champion there, there there's, I've

366
00:21:57.030 --> 00:21:58.770
been in a few just
to give you a few

367
00:21:58.770 --> 00:22:04.110
examples from my past I've
I've remember my first day

368
00:22:04.110 --> 00:22:07.110
at one of the companies
that I worked at and

369
00:22:07.110 --> 00:22:10.260
I was so excited to
be there. And I went

370
00:22:10.260 --> 00:22:12.720
to the head of development
and I said, I'm very

371
00:22:12.720 --> 00:22:16.110
excited. Show me where your
code is. Show me where

372
00:22:16.110 --> 00:22:18.210
the, where I can find
the database scheme as I

373
00:22:18.210 --> 00:22:20.550
want to learn as much
as I can. And I

374
00:22:20.550 --> 00:22:22.650
remember him looking at me
and going, I will never

375
00:22:22.650 --> 00:22:27.000
let you look at our
code. I don't understand why

376
00:22:27.000 --> 00:22:30.570
you need that. And I
remember going to another organization

377
00:22:30.570 --> 00:22:33.510
where I said, I'd like
to understand the logic, your

378
00:22:33.510 --> 00:22:36.420
design, your, of how you
decided to do, build this

379
00:22:36.420 --> 00:22:40.530
code. And they go your
QA. You don't need to

380
00:22:40.530 --> 00:22:44.580
understand that if you're a
good QA person, you'll figure

381
00:22:44.580 --> 00:22:48.990
it out. Just like the
user would. So I remember

382
00:22:48.990 --> 00:22:52.860
thinking, I think I just
went back in time. So

383
00:22:53.100 --> 00:22:59.730
there's definitely different experiences in
terms of how we, how

384
00:22:59.730 --> 00:23:03.210
much information people want to
share and where they, where

385
00:23:03.210 --> 00:23:09.240
they want to go. But
I don't know. Maybe let

386
00:23:09.240 --> 00:23:11.340
me make sure I answered
your question. Well, I, I

387
00:23:11.340 --> 00:23:12.840
like where you went at
the beginning where you're talking

388
00:23:12.840 --> 00:23:14.580
about there needs to be
a champion, because when you

389
00:23:14.580 --> 00:23:17.970
said that in my mind,
I put in, in parenthesis

390
00:23:18.000 --> 00:23:21.510
an internal champion, right? Because
you're the consultant who's being

391
00:23:21.630 --> 00:23:25.230
brought in. You're not the
champion, are you? Yes. Without

392
00:23:25.230 --> 00:23:30.000
a champion will fail as
a consultant agency. And I've

393
00:23:30.000 --> 00:23:33.210
gone into companies where there
wasn't a champion and it

394
00:23:33.210 --> 00:23:36.570
doesn't matter how great the
technologies and solutions that we

395
00:23:36.570 --> 00:23:41.790
provide. We're not going to
be successful. And the person

396
00:23:41.790 --> 00:23:43.950
that is a champion has
to have a voice in

397
00:23:43.950 --> 00:23:48.860
the, in, in the, in
that organization. Sometimes they'll pick

398
00:23:48.860 --> 00:23:50.990
like, you know, Hey, this
one developer will work with

399
00:23:50.990 --> 00:23:55.190
you. But if that developer
does not have impact, we'll

400
00:23:55.190 --> 00:23:59.090
fail. Quality definitely has to
have a champion internal that

401
00:23:59.090 --> 00:24:02.000
is will that'll say, cause
it gets tough. Sometimes it's

402
00:24:02.000 --> 00:24:04.700
QA. It gets tough. Hey,
you've got to get to

403
00:24:04.700 --> 00:24:08.020
a hundred percent code coverage.
90% code covers it's sometimes

404
00:24:08.040 --> 00:24:10.070
can be very tedious. And
if there's no one there,

405
00:24:10.070 --> 00:24:13.250
that's going to champion for
the why and how this

406
00:24:13.250 --> 00:24:16.760
is going to make their
end product better. It will

407
00:24:16.760 --> 00:24:20.210
fail. I always say that
even though I'm the QA

408
00:24:20.210 --> 00:24:23.510
person on this project, QA
is all of our responsibility.

409
00:24:23.900 --> 00:24:27.830
And if you're not bought
in, it doesn't matter. It's

410
00:24:28.100 --> 00:24:31.430
it doesn't matter how many
tests that I, I execute

411
00:24:31.640 --> 00:24:34.820
how great my plan and
my strategy is if the

412
00:24:34.820 --> 00:24:37.820
development team is not bought
into quality as well, we

413
00:24:37.820 --> 00:24:41.830
all gonna fail. I feel
like a quality in software

414
00:24:41.830 --> 00:24:44.890
is kind of like eating,
right? And I say this

415
00:24:44.890 --> 00:24:47.230
as a, as a diabetic,
I was explaining my diabetes

416
00:24:47.230 --> 00:24:50.200
to someone at lunch today.
And they wanted to know

417
00:24:50.260 --> 00:24:53.260
how I was doing. And
I said, well, I'll let

418
00:24:53.260 --> 00:24:55.930
you know in 20 years.
Right. Whether or not I

419
00:24:55.930 --> 00:24:58.990
die. And then that sounds
a little bit more of

420
00:24:58.990 --> 00:25:00.460
it, but think about it
for a second. Right? How's

421
00:25:00.460 --> 00:25:02.710
your blood sugar. I'll let
you know, in 20 years,

422
00:25:02.710 --> 00:25:04.390
it's the same thing with
Q and a, right? How

423
00:25:04.390 --> 00:25:06.250
do you feel about the
tests? Right. Well, we have

424
00:25:06.250 --> 00:25:08.170
some metrics. We have some
code quality. We have some

425
00:25:08.170 --> 00:25:11.650
coverage numbers, but ultimately we're
going to ship it and

426
00:25:11.650 --> 00:25:14.050
it's going to either do
well or not. And that

427
00:25:14.080 --> 00:25:17.710
is one of the challenges
about being a human is,

428
00:25:18.010 --> 00:25:21.070
Hey, eat. Right. And you'll
live a long life. And

429
00:25:21.070 --> 00:25:22.870
you know, if you ask
us now, are you eating

430
00:25:22.870 --> 00:25:24.970
well? And like, I don't
know. I think I am,

431
00:25:24.970 --> 00:25:27.130
I'll let you know what,
I'm 70 and I'll let

432
00:25:27.130 --> 00:25:31.750
you know how it went.
That deferred gratification is I

433
00:25:31.750 --> 00:25:34.180
think one of the reasons
why QA doesn't get the

434
00:25:34.180 --> 00:25:36.760
respect that it deserves because
you don't necessarily get that

435
00:25:36.790 --> 00:25:40.570
immediate, like quality is improved,
you know, metric, is there

436
00:25:40.570 --> 00:25:42.790
a way to get those
metrics in front of me

437
00:25:42.970 --> 00:25:49.360
sooner than in the future?
When I ship Well there's,

438
00:25:49.960 --> 00:25:53.270
there are ways to, to
have good metrics. And we,

439
00:25:53.270 --> 00:25:57.040
we make sure that all
of our projects have ongoing

440
00:25:57.040 --> 00:26:02.200
metrics of quality so that
our, our clients, our executives,

441
00:26:02.230 --> 00:26:04.480
the team can get an
idea and get a good

442
00:26:04.480 --> 00:26:07.660
pulse on where the product
is. But it, you bring

443
00:26:07.660 --> 00:26:10.720
up a point another project
that I was working on,

444
00:26:11.200 --> 00:26:15.520
they, the, the CEO of
the company said, I want

445
00:26:15.520 --> 00:26:21.100
to release in September. And
the development team knew everyone

446
00:26:21.100 --> 00:26:23.920
knew that was not possible.
It was probably going to

447
00:26:23.920 --> 00:26:28.060
be more like January of
the next year. But the,

448
00:26:28.810 --> 00:26:31.990
the CEO said, if you
don't hit September, you, you

449
00:26:32.110 --> 00:26:38.860
everyone's gone. And so what
happened is that development development

450
00:26:40.210 --> 00:26:44.490
coded the biggest hack of
their life. And it didn't

451
00:26:44.490 --> 00:26:48.000
matter that it passed. I,
and I told the CEO,

452
00:26:48.000 --> 00:26:52.830
listen, when you put people
in this situation where they

453
00:26:52.830 --> 00:26:55.950
have to code without giving
them an opportunity to build

454
00:26:55.950 --> 00:26:58.080
in that quality, it's very
similar to what you're saying

455
00:26:58.080 --> 00:27:01.200
about your health, the health
of the product. You can

456
00:27:01.200 --> 00:27:05.460
always cover up a lot
of things, but if you

457
00:27:05.460 --> 00:27:07.950
don't take the time and
that's, what's so great about

458
00:27:07.950 --> 00:27:11.640
some of the agile best
practices about, you know, not

459
00:27:12.030 --> 00:27:18.120
overworking people and having realistic
times and, and, and for,

460
00:27:18.150 --> 00:27:21.690
for people to work and,
and, and what, and let

461
00:27:21.690 --> 00:27:23.610
them choose the work that
they're going to do and

462
00:27:23.610 --> 00:27:27.330
commit to for every sprint
is that there is no

463
00:27:27.330 --> 00:27:31.680
metric to say how poorly
a product was hacked together

464
00:27:31.680 --> 00:27:34.140
to get to a release.
But, you know, and as

465
00:27:34.140 --> 00:27:37.620
I told, I told them,
I said, you know, our

466
00:27:37.620 --> 00:27:42.780
quality metric on this is
90%. 90% means that one

467
00:27:42.780 --> 00:27:45.990
out of 10 times that
a user experiences this product,

468
00:27:46.590 --> 00:27:50.790
they're going to find a
bug. And they go, that

469
00:27:50.790 --> 00:27:55.620
sounds good enough until it,
until it release. And they

470
00:27:55.620 --> 00:27:59.040
realize that one out of
10 features, one out of

471
00:27:59.040 --> 00:28:04.640
10 actions done in this
system are, are failing. It's

472
00:28:05.130 --> 00:28:09.420
not good enough. And it,
and, and months after that

473
00:28:09.420 --> 00:28:13.260
was released, they were doing
more and more hotfixes until

474
00:28:13.260 --> 00:28:16.830
January. So they ended up
going maybe actually to March

475
00:28:17.010 --> 00:28:22.710
by that time, because there
there is, I believe developers,

476
00:28:22.710 --> 00:28:25.050
when they tell me, listen,
this is going to take

477
00:28:25.080 --> 00:28:27.810
two months. If they say
I can't do it quicker,

478
00:28:27.840 --> 00:28:32.460
I tell executives, please trust
them. They know, and please

479
00:28:32.460 --> 00:28:34.080
give them a little bit
more time, just so that

480
00:28:34.080 --> 00:28:36.990
they have the opportunity to
write their unit tests and

481
00:28:36.990 --> 00:28:40.130
to really test their code
properly. That is really powerful.

482
00:28:40.130 --> 00:28:44.540
The idea that someone could
say 90% quality, and they're

483
00:28:44.540 --> 00:28:46.880
going to immediately think about
all the other things in

484
00:28:46.880 --> 00:28:49.820
life where 90% is an
acceptable number, like, Oh, 90%.

485
00:28:49.820 --> 00:28:53.210
That's an a excellent, but
if I told you your

486
00:28:53.210 --> 00:28:55.970
website would be up 90%
of the time, you would

487
00:28:55.970 --> 00:28:59.390
be, I'd have to completely
unacceptable. You know, maybe we

488
00:28:59.390 --> 00:29:01.550
need new metrics to express
to someone like this is

489
00:29:01.910 --> 00:29:04.970
the 90% in this case
is a D it sounds

490
00:29:04.970 --> 00:29:08.560
like in that, in that
scenario. Yeah, absolutely. When we're

491
00:29:08.570 --> 00:29:12.830
talking about quality and usage
and functionality, it's just like

492
00:29:12.860 --> 00:29:17.570
uptown uptime of a site.
You want 99.9%. Like, especially

493
00:29:17.570 --> 00:29:20.750
if you're dealing with something
in the healthcare or financial

494
00:29:20.750 --> 00:29:24.170
industry, you don't want to
have any more than a

495
00:29:24.170 --> 00:29:28.790
1% gap in terms of
where your quality is, but

496
00:29:28.850 --> 00:29:31.730
when people are pushed in,
and this is why, even

497
00:29:31.730 --> 00:29:34.910
though my company provides metrics
that share, and they've been

498
00:29:34.910 --> 00:29:38.150
very accurate once they go
to production, if you're at

499
00:29:38.150 --> 00:29:44.470
90%, it does appear that
you're getting percent. When some

500
00:29:44.470 --> 00:29:46.810
products are pushed, people go,
you know what? We're just

501
00:29:46.810 --> 00:29:50.110
going to go with it
and see, see what happens.

502
00:29:51.030 --> 00:29:53.460
Yeah. I worked in, in
online banking for a number

503
00:29:53.460 --> 00:29:56.370
of years. And one time
we had deployed something that

504
00:29:56.370 --> 00:29:58.530
had to do with checks
and check imaging. And then

505
00:29:58.530 --> 00:30:00.150
the first of the month
came in and then the

506
00:30:00.150 --> 00:30:02.220
world showed up to see
their checks and look at

507
00:30:02.220 --> 00:30:05.730
their, you know, their positive
checks. And someone wanted to

508
00:30:05.730 --> 00:30:09.930
know how many transactions were
failing every second. And it

509
00:30:09.930 --> 00:30:12.690
was 1% and we all
thought that was great. And

510
00:30:12.690 --> 00:30:13.860
then I said, well, how
many people are on the

511
00:30:13.860 --> 00:30:16.020
site right now? And it
was some number of hundreds

512
00:30:16.020 --> 00:30:19.560
of thousands, which means that
like 7,000 people, a second

513
00:30:19.560 --> 00:30:23.310
are having crappy experiences. You
know, like 1% failure at

514
00:30:23.310 --> 00:30:26.550
Facebook scale or at Twitter
failure is pretty, pretty, pretty

515
00:30:26.550 --> 00:30:31.950
horrible. So your website is
node qa.io, and you're building

516
00:30:31.950 --> 00:30:34.770
up a resource or QA
and a community for people

517
00:30:34.770 --> 00:30:38.760
in the node space to,
to explore. When folks check

518
00:30:38.760 --> 00:30:40.950
that out, what are they
gonna expect to see? Well,

519
00:30:40.950 --> 00:30:44.310
they're going to find information
about different areas of testing

520
00:30:44.310 --> 00:30:49.890
from unit testing, to code
coverage, how to utilize mock

521
00:30:50.190 --> 00:30:59.100
mock modules, to simulate traffic,
to simulate database interactions, how

522
00:30:59.100 --> 00:31:01.650
to do test reporting. We
have a product that we

523
00:31:01.650 --> 00:31:05.940
plan to beta next quarter
that takes all of the

524
00:31:05.940 --> 00:31:10.860
tests from every different level
and merges them up into

525
00:31:10.860 --> 00:31:13.530
one comprehensive test report that
can be viewed by the

526
00:31:13.530 --> 00:31:20.790
team. And there's information about
comparing those modules, which I've

527
00:31:20.790 --> 00:31:23.070
always found to be very
valuable. There's a lot of

528
00:31:23.070 --> 00:31:24.990
sites that say, Oh, this
is a great tool. This

529
00:31:24.990 --> 00:31:27.420
is a great tool. This
is a great tool. We

530
00:31:27.420 --> 00:31:29.970
try to make it easy
because we know everyone's busy

531
00:31:30.270 --> 00:31:32.610
and we create these comparison
charts where you can just

532
00:31:32.610 --> 00:31:35.070
see, yes, it has this
feature. No, it doesn't have

533
00:31:35.070 --> 00:31:37.140
that. And you can make
your decision on what you

534
00:31:37.140 --> 00:31:40.650
think is the best. And
we also give our suggestions

535
00:31:40.650 --> 00:31:42.390
of what we think are
some of the leaders right

536
00:31:42.390 --> 00:31:45.690
now in that space. Very
cool. Thank you so much.

537
00:31:45.690 --> 00:31:49.320
Stacy Kirk CEO of quality
works consulting group. People can

538
00:31:49.320 --> 00:31:53.430
check her out@nodeqa.io. I really
appreciate you coming on the

539
00:31:53.430 --> 00:31:56.790
show today. Thank you. Thanks
for having me. This has

540
00:31:56.790 --> 00:31:59.340
been another episode of Hanselminutes
and we'll see you again

541
00:31:59.340 --> 00:31:59.970
next week.

