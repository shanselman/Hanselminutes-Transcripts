WEBVTT FILE

1
00:00:12.150 --> 00:00:17.460
From Hansel minutes.com. It's Hansel
minutes. Oh, weekly discussion with

2
00:00:17.460 --> 00:00:21.990
web developer and technologist and
Scott Hanselman. This is Lawrence Ryan

3
00:00:21.990 --> 00:00:28.260
announcing show number one 88.
Recorded live Thursday, November 12th, 2009. Support

4
00:00:28.260 --> 00:00:31.560
for Hanselman it's just provided
by Tellerik Rab controls, the

5
00:00:31.560 --> 00:00:35.040
most comprehensive suite of components
for windows forms and asp.net

6
00:00:35.040 --> 00:00:43.710
web applications online@wwwdottelerik.com. In this
episode, Scott talks with Phil

7
00:00:43.710 --> 00:00:48.210
hat. Hi, this is Scott
Hanselman, and this is another

8
00:00:48.210 --> 00:00:51.300
episode of Hansel minutes. And
you'll have to forgive us

9
00:00:51.300 --> 00:00:53.460
on this episode because a
there's a house going up

10
00:00:53.460 --> 00:00:55.320
next to my house. So
if you're hammering in the

11
00:00:55.320 --> 00:00:58.860
background, that's because there's hammering
in the background and it

12
00:00:58.860 --> 00:01:01.020
turns out that's not something
you can easily remove from

13
00:01:01.020 --> 00:01:04.500
an audio tape. I'm sitting
down today with Phil hack.

14
00:01:04.530 --> 00:01:10.020
How's it going, Phil? So
something announced at PDC this

15
00:01:10.020 --> 00:01:13.430
morning. What's a, what's the
big announcement That we had

16
00:01:13.430 --> 00:01:18.410
the release of asp.net, NBC
version two beta available for

17
00:01:18.410 --> 00:01:21.950
download. Very cool. So this
is, this is beta. And

18
00:01:21.950 --> 00:01:24.740
will there be another beta
or many, many betas or

19
00:01:24.800 --> 00:01:27.080
TTPs and things like that
before release, or is this

20
00:01:27.080 --> 00:01:30.320
a pretty significant release from
NBC too? This is a

21
00:01:30.320 --> 00:01:34.850
pretty significant release in that
this is mostly feature complete.

22
00:01:34.850 --> 00:01:38.570
As far as large feature
areas. We have some bug

23
00:01:38.580 --> 00:01:44.000
fixes we plan to do
and maybe minor DTRS or

24
00:01:44.000 --> 00:01:47.150
design change requests, like minor
changes, design, you know, really

25
00:01:47.150 --> 00:01:49.880
tiny features, but for the
most part, the big features

26
00:01:49.880 --> 00:01:53.300
we want to do completely
done, and we're not taking

27
00:01:53.300 --> 00:01:56.690
on any new, big features
and the next release after

28
00:01:56.690 --> 00:01:58.730
this is going to be
a release candidate. And then

29
00:01:58.730 --> 00:02:01.310
after that is our TM.
Okay, well, so you're pretty

30
00:02:01.310 --> 00:02:03.320
close then at this point,
it's just one more release

31
00:02:03.320 --> 00:02:05.600
and then, and then it's
done. Yeah. Part of the

32
00:02:05.600 --> 00:02:08.720
reason for that is that
we are shipping co shipping

33
00:02:08.720 --> 00:02:13.070
within visual studio 2010. So
we have this, this is

34
00:02:13.070 --> 00:02:17.720
a very hard deadline, so
there's no, if, if we

35
00:02:17.720 --> 00:02:20.520
flip, we're not in the
product. Oh, wow. So, so

36
00:02:20.540 --> 00:02:23.990
visual studio, 2010 is coming
out where they say March 22nd.

37
00:02:26.330 --> 00:02:29.030
I believe so. Yeah, it's
on the interwebs. Okay. So

38
00:02:29.030 --> 00:02:31.820
yeah, that's will be in
there. Okay. Okay. So sometime

39
00:02:31.820 --> 00:02:35.150
between today and March 22nd, there'll
be a release candidate and

40
00:02:35.150 --> 00:02:38.180
then you're, you're shipping that
day then. Very cool. Yep.

41
00:02:38.780 --> 00:02:41.990
Yeah. Obviously we, since we
have to meet whatever quality

42
00:02:41.990 --> 00:02:45.350
Gates and all this, you
know, process to get into

43
00:02:45.350 --> 00:02:50.150
the product, so we'll actually
be done much before March 22nd.

44
00:02:51.770 --> 00:02:56.780
So what's the focus of
version two. So version two,

45
00:02:57.020 --> 00:03:01.570
the primary focus is on
looking at the enterprise and

46
00:03:01.720 --> 00:03:05.380
productivity scenarios. So version two
has a lot of cool

47
00:03:05.380 --> 00:03:10.060
stuff. Like a template is
helpers. This is a feature

48
00:03:10.060 --> 00:03:14.680
where you can pass a
model into a, a display

49
00:03:14.680 --> 00:03:19.150
method or an editor method,
and we'll find the appropriate

50
00:03:19.150 --> 00:03:22.420
template to render that model
object. And w you know,

51
00:03:22.420 --> 00:03:24.880
we'll render either an editor
for it, like a bunch

52
00:03:24.880 --> 00:03:28.660
of inputs, or we'll render
a nice display for it

53
00:03:29.140 --> 00:03:32.170
for you. And it's very
reminiscent of field templates and

54
00:03:32.170 --> 00:03:35.760
dynamic data. Well, that's, that's
interesting because I was talking

55
00:03:35.760 --> 00:03:39.540
to Scott Hunter on an episode
of channel nine, and he

56
00:03:39.540 --> 00:03:42.360
was kind of commenting that
initially there was this kind

57
00:03:42.360 --> 00:03:44.760
of big pillars of asp.net
thing. And there was like

58
00:03:44.760 --> 00:03:47.010
web forums as a pillar
and MVC, and then dynamic

59
00:03:47.010 --> 00:03:49.860
data was its own thing.
When in fact it's more

60
00:03:49.860 --> 00:03:52.890
of kind of a foundational
it's kinda more turned off,

61
00:03:52.920 --> 00:03:55.230
turned on its side. So
rather than being a, you

62
00:03:55.230 --> 00:03:58.500
know, dynamic data as, as
vertical pillar, it's more dynamic

63
00:03:58.500 --> 00:04:02.580
data as, as foundational element.
That's something that's baked into

64
00:04:02.580 --> 00:04:05.310
web forums and MVC is
that, does that sound right

65
00:04:05.310 --> 00:04:09.660
to you? Yeah. Yeah. So
it's more that we're taking

66
00:04:09.660 --> 00:04:13.350
ideas and principles from dynamic
data and not taking dynamic

67
00:04:13.350 --> 00:04:15.990
data itself per se, but
we're taking a lot of

68
00:04:15.990 --> 00:04:19.380
those ideas and putting them
into NVC. For example, one

69
00:04:19.380 --> 00:04:21.630
of the things that we're
doing for client validation, that's

70
00:04:21.630 --> 00:04:24.420
different from dynamic data is
that dynamic data will just

71
00:04:24.420 --> 00:04:29.010
simply add a web form
validator controls. What we're doing

72
00:04:29.010 --> 00:04:32.880
is we're floating up Jason
metadata based on your data

73
00:04:32.880 --> 00:04:37.350
annotations. And then you can
attach a client validation library

74
00:04:37.350 --> 00:04:39.990
to that, and you can,
you know, write your own

75
00:04:39.990 --> 00:04:42.690
or use the one we
supply. And then that will

76
00:04:42.690 --> 00:04:46.860
hook up client validation to
your form based on the

77
00:04:46.860 --> 00:04:49.500
metadata that's on your OB,
your model, your view model

78
00:04:49.500 --> 00:04:53.610
objects. And so this, this
is a, an approach that

79
00:04:53.610 --> 00:04:56.610
was inspired by a framework
developed by someone out there

80
00:04:56.610 --> 00:05:00.240
in the community, Steve Sanderson,
who built the XL framework.

81
00:05:00.300 --> 00:05:03.270
And so we saw that
and we thought, Oh, that's

82
00:05:03.270 --> 00:05:05.970
a really cool idea. You
know, maybe we can bake

83
00:05:05.970 --> 00:05:09.720
that more deeply in, into
the framework based on some

84
00:05:09.720 --> 00:05:12.090
of those principles and make,
but able to make the

85
00:05:12.090 --> 00:05:16.200
framework more amenable to that
change than he could do

86
00:05:16.200 --> 00:05:19.740
outside of the framework, if
that makes sense. So let's,

87
00:05:19.800 --> 00:05:21.520
let's get into a little
detail on this and you

88
00:05:21.520 --> 00:05:24.180
just, you made the comment
of a view model. You

89
00:05:24.180 --> 00:05:26.220
put, you put this metadata
on the view model. I've

90
00:05:26.220 --> 00:05:29.610
noticed that sometimes you'll see
samples, you know, the nerd

91
00:05:29.610 --> 00:05:33.540
dinner sample as kind of
a good slash bad example

92
00:05:33.780 --> 00:05:36.810
where the model and the
view model kind of either

93
00:05:36.840 --> 00:05:39.120
are interchangeable or they mix,
or there just isn't a

94
00:05:39.120 --> 00:05:43.320
view model at all. Is
this, this new technique? How,

95
00:05:43.320 --> 00:05:45.510
how important is the view
model? How important is the

96
00:05:45.510 --> 00:05:49.200
separation of the two? So,
yeah, so I'm pretty guilty

97
00:05:49.200 --> 00:05:52.230
of often in demos, just
taking a model from the

98
00:05:52.680 --> 00:05:55.290
database and then passing it
to the view and saying,

99
00:05:55.320 --> 00:05:57.890
Hey, this is how you
do it. It turns out,

100
00:05:57.890 --> 00:06:00.800
I think, as you start
to build real applications and

101
00:06:00.800 --> 00:06:03.170
larger applications, you realize that
you really need a model

102
00:06:03.170 --> 00:06:06.380
that's specific to the view.
For example, if you have

103
00:06:06.380 --> 00:06:09.680
a product and you're put
sending it to some details

104
00:06:09.680 --> 00:06:13.430
page, there may be other
things on that view that

105
00:06:13.430 --> 00:06:15.290
you need to turn on
and off. So you might

106
00:06:15.290 --> 00:06:18.230
have X, you might want
extra Boolean properties on your

107
00:06:18.230 --> 00:06:21.890
model to say, show this
don't show that so that

108
00:06:21.890 --> 00:06:25.550
your view is fairly dumb
and just does what the

109
00:06:25.550 --> 00:06:28.850
model tells, just, you know,
kind of prints out properties

110
00:06:28.850 --> 00:06:31.190
of the view model. So
there's a term that a

111
00:06:31.190 --> 00:06:33.680
lot of people use view
model or view specific models.

112
00:06:33.680 --> 00:06:36.530
What I often call it
is that rather than sending

113
00:06:36.530 --> 00:06:41.390
the actual product, you know,
send, you know, basically create

114
00:06:41.390 --> 00:06:43.790
an, a view model object
that has all the, you

115
00:06:43.790 --> 00:06:46.310
know, maybe the properties that
you want specifically for this

116
00:06:46.340 --> 00:06:49.880
view and send that to
the view sometimes for very,

117
00:06:49.880 --> 00:06:52.700
very simple demos, I'll still
just send the actual model

118
00:06:52.700 --> 00:06:56.180
and then throw some properties
in view data. And I

119
00:06:56.180 --> 00:06:59.840
think, you know, like I'm
still not completely opposed to

120
00:06:59.840 --> 00:07:02.660
that technique. I, I think
it works in like, you

121
00:07:02.660 --> 00:07:05.930
know, simple scenarios, but I
think, you know, as your,

122
00:07:06.230 --> 00:07:08.570
as you run into problems
with that, as you start

123
00:07:08.570 --> 00:07:11.000
to scale up, you know,
you should switch to, you

124
00:07:11.000 --> 00:07:16.210
know, a more, I think,
a more maintainable model. How

125
00:07:16.210 --> 00:07:20.320
important do you think it
is? So I, you know,

126
00:07:20.320 --> 00:07:22.690
unfortunately I don't get to
build really, really large apps,

127
00:07:22.690 --> 00:07:24.910
but of all the people
I've talked to who are

128
00:07:24.910 --> 00:07:28.390
building larger apps, they all
use this technique and, and

129
00:07:28.410 --> 00:07:32.680
they find it very important
to, you know, especially as

130
00:07:32.680 --> 00:07:35.620
strong typing is in the
views and important to you

131
00:07:36.220 --> 00:07:38.830
now, you know, I I'm,
I'm particularly a fan of

132
00:07:38.830 --> 00:07:42.370
dynamic languages. So for me,
I don't always see strong

133
00:07:42.370 --> 00:07:46.420
typing as being absolutely necessary.
I sometimes see that, you

134
00:07:46.420 --> 00:07:48.970
know, some mixture of the
two, you know, kind of

135
00:07:48.970 --> 00:07:52.230
hits the sweet spot, but
more and more, I, I

136
00:07:52.240 --> 00:07:55.270
like the approach because as
you're thinking, building the view

137
00:07:55.270 --> 00:07:57.370
model, it does help you
think about, well, what are

138
00:07:57.370 --> 00:07:59.650
the decisions that need to
be made on the view?

139
00:07:59.650 --> 00:08:02.620
What are the pieces of
information that need to be

140
00:08:03.160 --> 00:08:05.290
put on the view? And
then you have this one

141
00:08:05.290 --> 00:08:09.460
class that encapsulates, you know,
what that is the way

142
00:08:09.460 --> 00:08:11.350
I like to think about
it. A lot of times

143
00:08:11.350 --> 00:08:13.540
is that a view is
kinda like one of those

144
00:08:14.590 --> 00:08:16.930
throw cloth or something that
you stretch over the frame

145
00:08:16.930 --> 00:08:19.600
of a chair to make
a chair. So, you know,

146
00:08:20.150 --> 00:08:22.210
the frame being your view
model, and the view is

147
00:08:22.210 --> 00:08:26.500
just something you stretch over
And the dynamic that the

148
00:08:26.530 --> 00:08:29.710
metadata, and then the metadata,
this a, this isn't system

149
00:08:29.710 --> 00:08:32.620
dot component model, though, right?
This, this info, this metadata,

150
00:08:32.620 --> 00:08:36.130
I want to put on
my view model and this,

151
00:08:36.130 --> 00:08:37.660
this can be put on
the model or on the

152
00:08:37.660 --> 00:08:39.760
view model. It doesn't really
matter. All you want is

153
00:08:39.760 --> 00:08:42.700
annotations on objects and you'll
handle the rest. Is that

154
00:08:42.700 --> 00:08:47.110
correct? Correct. How much do
you think asp.net MVC kind

155
00:08:47.110 --> 00:08:51.340
of requires or needs additional
help from the outside? Like

156
00:08:51.340 --> 00:08:54.070
if, if one were going
to really get religious with

157
00:08:54.070 --> 00:08:57.000
the view model versus model
stuff, wouldn't we require something

158
00:08:57.000 --> 00:09:00.210
like auto mapper to make
life easier, auto mapper being

159
00:09:00.210 --> 00:09:03.150
an open source app that
maps genome one object to

160
00:09:03.150 --> 00:09:07.910
another object, or is that
overstating it, Yeah. You know,

161
00:09:07.910 --> 00:09:10.280
it's funny, I was just
talking with a coworker about

162
00:09:10.280 --> 00:09:12.530
this and that's one of
the things we're starting to

163
00:09:12.560 --> 00:09:15.620
look at is what are
the pain points with doing

164
00:09:15.620 --> 00:09:20.840
this approach versus other approaches?
And, you know, I think

165
00:09:21.080 --> 00:09:23.480
the thing is like, you
know, as we see something

166
00:09:24.020 --> 00:09:26.300
where we really feel it
belongs in the core framework,

167
00:09:26.300 --> 00:09:29.000
you know, we'll probably pull
it in something like auto

168
00:09:29.000 --> 00:09:31.190
mapper, you know, we haven't
yet looked at, but I

169
00:09:31.190 --> 00:09:33.260
think, you know, as I'm
starting to think about ahead

170
00:09:33.260 --> 00:09:35.360
of what we're going to
do for the, you know,

171
00:09:35.360 --> 00:09:37.880
version three, that's the kind
of thing I want to

172
00:09:37.880 --> 00:09:39.980
look at is, you know,
that seems to make things

173
00:09:39.980 --> 00:09:44.180
a lot easier. So like,
should we have some way

174
00:09:44.180 --> 00:09:46.670
of doing that? Should we
simply tell people to use

175
00:09:46.670 --> 00:09:49.280
this? Should we include it?
And so those are some

176
00:09:49.280 --> 00:09:51.200
of the questions, you know,
I'll be looking at in

177
00:09:51.200 --> 00:09:53.780
the next version. I think
AutoMap is a great approach

178
00:09:53.780 --> 00:09:57.890
to that, you know, for,
you know, the case where

179
00:09:57.890 --> 00:10:01.100
a lot of times your
view models simply have our

180
00:10:01.100 --> 00:10:03.350
super set of your model
in terms of what properties

181
00:10:03.350 --> 00:10:05.360
are on there. And it
kinda sucks to have to

182
00:10:05.360 --> 00:10:07.910
copy them all. So it's
nice to have some programmatic

183
00:10:07.910 --> 00:10:10.520
way to do that, you
know, to populate your view

184
00:10:10.520 --> 00:10:12.500
model. So an auto mapper
is a great way to

185
00:10:12.500 --> 00:10:16.010
do that. Yeah. Yeah. The
auto mapper lets you get

186
00:10:16.010 --> 00:10:18.260
rid of a lot of
the, what I call monkey

187
00:10:18.260 --> 00:10:23.150
code. Yeah. Just sitting there
slapping the keyboard, you know,

188
00:10:23.150 --> 00:10:25.340
and it just is no
fun left hand, right hand,

189
00:10:25.400 --> 00:10:28.850
that kind of stuff. It's
a, and more and more,

190
00:10:28.850 --> 00:10:32.720
I'm looking for ways in
my asp.net MVC projects to

191
00:10:32.840 --> 00:10:37.160
avoid repeating myself. And that
seems that the view model

192
00:10:37.160 --> 00:10:39.020
model thing just seems to
be one of those places

193
00:10:39.020 --> 00:10:42.440
where I'm always repeating myself.
Yeah. So that's definitely a

194
00:10:42.440 --> 00:10:45.710
case where we need to
get dryer as in a

195
00:10:45.710 --> 00:10:48.710
dry as, and don't repeat
yourself, Not the tragedy about

196
00:10:48.710 --> 00:10:50.720
the whole dry concept is
that every time you say

197
00:10:50.720 --> 00:10:52.850
it on a podcast, you
have to repeat yourself and

198
00:10:52.850 --> 00:10:57.590
then explain what drawing means.
The irony is not lost

199
00:10:57.590 --> 00:11:00.110
on me. Challenge with dry
sometimes is that, you know,

200
00:11:00.110 --> 00:11:02.300
you could just send the
model over there and not

201
00:11:02.300 --> 00:11:05.960
repeat yourself, but then there's,
you know, slight, there's more

202
00:11:05.960 --> 00:11:09.050
coupling of your view to
your actual domain objects that

203
00:11:09.320 --> 00:11:12.410
rather than your view model.
So, you know, there's a

204
00:11:12.410 --> 00:11:15.470
small amount of repetition there
in that you're repeating these

205
00:11:15.470 --> 00:11:18.380
properties, but it's not always
the case that your domain

206
00:11:18.380 --> 00:11:22.730
objects map exactly. To your
view. A lot of times,

207
00:11:23.150 --> 00:11:26.270
you know, a classic example
of why we need view

208
00:11:26.270 --> 00:11:29.120
models is the confirm password
screen, right? If I have

209
00:11:29.120 --> 00:11:31.670
a person object and he
has a username and a

210
00:11:31.670 --> 00:11:35.270
password, he probably doesn't have
a confirm password property on

211
00:11:35.480 --> 00:11:37.850
that. Right. So there's a
classic case where you really

212
00:11:37.850 --> 00:11:41.630
need a view model. You
need something that isn't one

213
00:11:41.630 --> 00:11:45.290
of your domain objects in
order to fulfill this user

214
00:11:45.300 --> 00:11:48.890
interface. Yeah. One of the
things I got nailed with,

215
00:11:49.490 --> 00:11:51.380
and while I was actually,
I was in Sweden speaking

216
00:11:51.380 --> 00:11:54.340
recently, I gave a talk
on NBC, one of your

217
00:11:54.430 --> 00:11:58.780
lead devs there, Levi was
there, Levi Broderick. And he

218
00:11:58.780 --> 00:12:01.300
noticed that I was using
a view model on the

219
00:12:01.300 --> 00:12:05.770
way out, meaning I was
taking, getting some stuff back

220
00:12:05.770 --> 00:12:08.790
from the model, passing it
into a view and displaying

221
00:12:08.800 --> 00:12:11.320
a view model. But I
was taking a model on

222
00:12:11.320 --> 00:12:15.740
the way in. And that,
that, that mismatch is, is,

223
00:12:15.740 --> 00:12:17.800
is kind of a common
thing. He wanted me to

224
00:12:17.800 --> 00:12:20.650
take the same object in
and out. And that got

225
00:12:20.650 --> 00:12:22.930
me thinking too about the
kinds of trouble that you

226
00:12:22.930 --> 00:12:27.420
can, you can get into.
Yeah. Yeah. That's a, that's

227
00:12:27.420 --> 00:12:32.850
another area where if you're
using a expression based helpers.

228
00:12:32.940 --> 00:12:34.800
So for example, one of
the things we're adding in

229
00:12:34.800 --> 00:12:38.790
beta are a strongly typed
UI helpers. And so these

230
00:12:38.790 --> 00:12:41.790
differ from template to helpers
where template is helpers are

231
00:12:41.790 --> 00:12:44.610
basically, Hey, here's the, here's
the some object I want

232
00:12:44.610 --> 00:12:47.550
you to render UI for
that where strongly type helpers

233
00:12:47.550 --> 00:12:51.510
are more, here's the text
box, here's a text area

234
00:12:51.510 --> 00:12:53.670
here, you know, I'm, I'm
gonna tell you what UI

235
00:12:53.670 --> 00:12:55.650
elements to do, but I'm
going to give you an

236
00:12:55.650 --> 00:12:59.460
expression against the model, right?
So I might say text

237
00:12:59.460 --> 00:13:03.390
box for M such that
end dot first name. And

238
00:13:03.390 --> 00:13:05.610
so it's gonna look at
the model and the metadata

239
00:13:05.610 --> 00:13:07.440
and it's going to render
a text box and it's

240
00:13:07.440 --> 00:13:09.810
going to render the right
fields for that, the field

241
00:13:09.810 --> 00:13:11.730
name for that text box,
like, you know, first name

242
00:13:12.090 --> 00:13:14.640
or, or a person offers
name or whatever it is,

243
00:13:15.090 --> 00:13:17.700
right. When you submit that
back to your action method,

244
00:13:18.060 --> 00:13:19.890
that needs to match up
with the thing that your

245
00:13:19.890 --> 00:13:23.730
action method is receiving. Right?
Right. You built that expression

246
00:13:23.730 --> 00:13:27.030
against an object. Most likely
that should be the same

247
00:13:27.030 --> 00:13:29.910
object that you're receiving in,
right. Because if you're using

248
00:13:29.910 --> 00:13:33.510
display four or, or more
interestingly, of course, editor for,

249
00:13:33.780 --> 00:13:35.790
and you're saying, give me
an editor for a dinner.

250
00:13:35.880 --> 00:13:38.760
It's one could argue that
that's a serialization format. It's

251
00:13:38.760 --> 00:13:43.440
going to serialize that object
as an HTML form. And

252
00:13:43.440 --> 00:13:45.180
it's going to expect to
get that same thing back,

253
00:13:45.630 --> 00:13:47.640
You know, but there's the
other side of the question

254
00:13:47.640 --> 00:13:49.710
where like your view model
is sort of the model

255
00:13:49.710 --> 00:13:54.090
for the view. Isn't the
stuff that's incoming, really like

256
00:13:54.090 --> 00:13:58.290
a forum post model or,
or, or, you know, action

257
00:13:58.290 --> 00:14:02.070
argument model. Like isn't it
kind of a DTO object.

258
00:14:02.400 --> 00:14:06.240
Yeah. That'd be a data
transfer object. And, and you

259
00:14:06.240 --> 00:14:08.340
know, you could take that
approach and be strict about

260
00:14:08.340 --> 00:14:10.890
that, but then you start
to really feel the effects

261
00:14:10.890 --> 00:14:14.610
of repeating yourself a lot.
And one of the things

262
00:14:14.610 --> 00:14:17.820
as well, maybe this where
if you're using a strongly

263
00:14:17.820 --> 00:14:22.800
type language, maybe that's where
cogeneration comes in handy, right?

264
00:14:22.800 --> 00:14:25.500
You just, you take a
model and then you generate

265
00:14:25.500 --> 00:14:28.440
your incoming and outgoing or
something like that. The other

266
00:14:28.440 --> 00:14:31.170
approach you could say is,
you know, like I have

267
00:14:31.170 --> 00:14:33.480
a bunch of unit tests
and I'm okay with using

268
00:14:33.480 --> 00:14:36.330
dynamic languages or something. So
I'm going to think about

269
00:14:36.330 --> 00:14:38.850
what a dynamic language would
do. And you start doing

270
00:14:38.880 --> 00:14:42.960
view page dynamic and you
create in your action method,

271
00:14:42.960 --> 00:14:45.030
you new up and expand
to object. You set some

272
00:14:45.030 --> 00:14:46.710
properties on that and then
you just send it to

273
00:14:46.710 --> 00:14:49.440
the V page and on
the incoming. And I haven't

274
00:14:49.440 --> 00:14:52.640
yet tried this, but I
haven't yet tried the case

275
00:14:52.640 --> 00:14:55.400
where what happens if you
try to model bind to

276
00:14:55.400 --> 00:14:58.880
a dynamic object going in,
I'm guessing it won't work,

277
00:14:58.910 --> 00:15:01.190
but you know, maybe that's
something we look at for

278
00:15:01.190 --> 00:15:03.500
the feature is making that
work. Right. So that you

279
00:15:03.500 --> 00:15:09.620
could have a public action
results edit a dynamic of,

280
00:15:09.710 --> 00:15:12.290
Oh, and then you in
your action method, you just

281
00:15:12.290 --> 00:15:15.970
don't. Oh, dot first name
dot last name. Hey everybody.

282
00:15:15.970 --> 00:15:17.860
This is Scott coming at
you from another place in

283
00:15:17.860 --> 00:15:21.100
time. No doubt. You'll probably
bump into testing tasks now,

284
00:15:21.100 --> 00:15:23.770
and then, and your work
and, you know, writing functional

285
00:15:23.770 --> 00:15:25.690
tests is probably not your
favorite thing. It's kind of

286
00:15:25.690 --> 00:15:28.060
difficult. It takes time and
the results can be dubious.

287
00:15:28.690 --> 00:15:30.880
Well, I'll get ready to
start liking tests. Thanks to

288
00:15:30.880 --> 00:15:34.960
Tellerik with the, the new
web testing framework. Building web

289
00:15:34.960 --> 00:15:38.230
automation test is a breeze.
You've got code automation with

290
00:15:38.230 --> 00:15:41.230
advanced asp.net Ajax and several
light applications. You can write

291
00:15:41.230 --> 00:15:44.500
a single test, have it
executed against multiple browsers at

292
00:15:44.500 --> 00:15:47.920
once. You'd benefit from a
rich API there's link support

293
00:15:47.950 --> 00:15:51.430
integration with visual studio unit
testing, also in unit X

294
00:15:51.430 --> 00:15:54.700
unit and MBE unit, not
to mention the free rappers

295
00:15:54.700 --> 00:15:57.490
for Telerik rad controls for
ESPN and Ajax and several

296
00:15:57.490 --> 00:16:01.360
lines, all shipping with Telerik's
new testing tool. One of

297
00:16:01.360 --> 00:16:04.510
the best features, the webinar
testing framework, which is developed

298
00:16:04.510 --> 00:16:08.440
by art of test is
it's absolutely free. Freddie got

299
00:16:08.470 --> 00:16:10.930
hooked on web by testing
framework, start using it right

300
00:16:10.930 --> 00:16:14.410
away, go to tellerik.com for
more info. Thanks a lot.

301
00:16:15.910 --> 00:16:18.430
How do other frameworks do
it? I mean, I, you

302
00:16:18.430 --> 00:16:21.730
know, some places like in
Nerdina we'll do a regular

303
00:16:21.940 --> 00:16:24.250
model bind and a dinner
gets passed in and other

304
00:16:24.250 --> 00:16:27.760
places we'll use a forum
collection. And the form collection

305
00:16:27.760 --> 00:16:30.070
is kind of our, our
punting where it's like, you

306
00:16:30.070 --> 00:16:32.200
know, I don't, it's not
really a model and I

307
00:16:32.200 --> 00:16:34.270
don't really feel like making
a view model. So I'll

308
00:16:34.270 --> 00:16:38.920
just do a form collection.
None of it really feels

309
00:16:39.370 --> 00:16:41.980
awesome though. You know, it's,
it's just, it's never quite

310
00:16:41.980 --> 00:16:45.160
as clean on the way
in, I personally like taking

311
00:16:45.160 --> 00:16:50.020
these objects in via the
action method parameter, because I

312
00:16:50.020 --> 00:16:53.110
find that it kind of
maps the way I think

313
00:16:53.110 --> 00:16:55.420
about it. And it also
is a lot easier to

314
00:16:55.420 --> 00:16:57.610
write unit tests for, you
know, I didn't know it,

315
00:16:57.610 --> 00:16:59.920
but product passes my action
method and say, do the

316
00:16:59.920 --> 00:17:05.590
right thing. But the, the
form collection approach, a lot

317
00:17:05.590 --> 00:17:07.480
of times you do that
because it sort of almost

318
00:17:07.550 --> 00:17:10.210
depending on what, what type
of data access are you

319
00:17:10.210 --> 00:17:13.810
using? Some data access layers
require you to new up

320
00:17:13.810 --> 00:17:17.260
the object and then make
the changes and then attach

321
00:17:17.260 --> 00:17:20.530
them to the whatever context.
Whereas others can take an

322
00:17:20.530 --> 00:17:25.060
existing populated object and attach
to the context as, as

323
00:17:25.060 --> 00:17:28.180
a changed object. So like,
if you're thinking about the

324
00:17:28.210 --> 00:17:30.310
update scenario, you kind of
need to know what the

325
00:17:30.310 --> 00:17:32.980
old values are and the
new values are. And so

326
00:17:32.980 --> 00:17:35.650
that's why there's sort of
that distinction for like a

327
00:17:35.650 --> 00:17:38.290
create method. It's very easy
to just take in the

328
00:17:38.290 --> 00:17:41.200
object as the action method
parameter, before an update method,

329
00:17:41.200 --> 00:17:43.450
you might just take in
the form collection. Right. And

330
00:17:43.450 --> 00:17:46.360
that's exactly the problem. I
caught myself, No other way,

331
00:17:46.390 --> 00:17:49.640
the way that like other
frameworks do it, for example,

332
00:17:49.650 --> 00:17:52.710
in rails, I believe you
would you get, you grab

333
00:17:52.710 --> 00:17:56.250
everything from a prams collection.
So you have like prams,

334
00:17:56.250 --> 00:18:00.120
you know, bracket, quote, first
name printed with bracket co

335
00:18:00.150 --> 00:18:03.870
last name. But there's, I
believe there, you can just,

336
00:18:04.650 --> 00:18:08.820
you know, create a dynamic
object from the prams collection

337
00:18:08.820 --> 00:18:12.930
that maps to what you're
trying to create. So because

338
00:18:12.930 --> 00:18:18.320
of, you know, the ability
to deduct type, Right. So

339
00:18:18.410 --> 00:18:20.210
I haven't used it in
a long time, so I'm

340
00:18:20.210 --> 00:18:22.460
not quite familiar. So it's
a very different world in

341
00:18:22.580 --> 00:18:26.420
dynamic languages than it is
in like, Well, no, that

342
00:18:26.420 --> 00:18:31.220
doesn't that mean that asp.net
MVC two or two plus

343
00:18:31.220 --> 00:18:34.520
one could be something very
different if you insisted that

344
00:18:34.520 --> 00:18:39.430
you'll only run on a
dotnet for, Yeah. So kid

345
00:18:39.430 --> 00:18:41.900
on that too is going,
gonna run on three, five

346
00:18:41.900 --> 00:18:44.990
and four eighth grade on
the NBC three is going

347
00:18:44.990 --> 00:18:48.170
to take a Ford dependency.
You said asp.net too. So

348
00:18:48.170 --> 00:18:55.250
asp.net, MVC Danette 3.5 SP
one in asp.net for asp.net

349
00:18:55.250 --> 00:18:59.600
MVC, two, three is going
to take a seat on

350
00:18:59.600 --> 00:19:03.920
it for dependency, which means
that for NBC three, we

351
00:19:03.920 --> 00:19:07.160
can take advantage of everything
that doesn't, it four has

352
00:19:07.160 --> 00:19:08.990
to offer. All right. All
right. That's what I wanted

353
00:19:08.990 --> 00:19:10.880
to know. So let me
see if I understand this.

354
00:19:10.880 --> 00:19:13.670
I want to kind of
paraphrase back as the, on

355
00:19:13.670 --> 00:19:17.390
the user. So I've got
an asp.net one project now,

356
00:19:18.140 --> 00:19:20.690
and I'm running it on
visual studio 2008, which has

357
00:19:20.690 --> 00:19:23.270
done a three, five, I'm
going to want to upgrade

358
00:19:23.270 --> 00:19:25.580
to MVC two, and I
will be able to do

359
00:19:25.580 --> 00:19:28.250
that. And I'll continue to
use three, five if I

360
00:19:28.250 --> 00:19:32.240
want to. I could also
move over to dotnet four

361
00:19:32.420 --> 00:19:39.020
and 2010, but come the
NVC three timeframe. That's going

362
00:19:39.020 --> 00:19:43.520
to be a dotnet four
O only thing. Yes. Okay.

363
00:19:43.700 --> 00:19:46.310
Okay. So that means that
you're going to ship in

364
00:19:46.310 --> 00:19:49.580
the box with visual studio
2010, or I can go

365
00:19:49.580 --> 00:19:52.370
and download it and add
it to a visual studio

366
00:19:52.370 --> 00:19:56.420
2008. Yes, yes. Good point.
Okay. But this is limited

367
00:19:56.420 --> 00:20:00.290
you to the kind of
like crazy out there, dynamic

368
00:20:00.290 --> 00:20:02.390
language stuff that you might've
been able to do because

369
00:20:02.390 --> 00:20:05.840
you want to support both
platforms To some degree. Yes.

370
00:20:05.840 --> 00:20:09.620
To some degree. No. Right.
So, you know, Scott Guthrie has

371
00:20:09.620 --> 00:20:12.140
been doing some experimentations and
he's shown that, you know,

372
00:20:12.140 --> 00:20:14.600
you can use view page,
the dynamic. If you're running

373
00:20:14.600 --> 00:20:18.560
on asp.net for now the
framework itself, obviously it doesn't

374
00:20:18.560 --> 00:20:23.030
do anything special to maybe
support more exotic scenarios like

375
00:20:23.030 --> 00:20:25.490
that. But if you just
wrote a view page of

376
00:20:25.490 --> 00:20:30.350
dynamic and you pass the
unexpanded object in your, as

377
00:20:30.350 --> 00:20:33.020
your model, you'll be able
to access those within the

378
00:20:33.020 --> 00:20:36.080
view, using the dot syntax,
you know, like food dot

379
00:20:36.200 --> 00:20:39.530
model dot foods. Can you
explain that term expando object

380
00:20:39.530 --> 00:20:41.150
to the listeners that may
not know what that means?

381
00:20:41.750 --> 00:20:45.080
Oh, great. Yeah, sure. So
it's done that for introduces

382
00:20:45.080 --> 00:20:49.180
this new object called expando
object. And if it's a

383
00:20:49.240 --> 00:20:52.270
object that is a dynamic
object. So if I go

384
00:20:52.270 --> 00:20:57.400
dynamic, you know, food equals
new expanded object, I can

385
00:20:57.400 --> 00:21:00.250
start setting properties on it.
I can say food dot

386
00:21:00.340 --> 00:21:04.210
the, you know, first name
equals fill food dot last

387
00:21:04.210 --> 00:21:07.750
name equals hack. And then
I can return in an

388
00:21:07.750 --> 00:21:11.950
NBC action. I could go
return view of food with

389
00:21:11.950 --> 00:21:15.010
Fu as the argument that
the model argument. Now, in

390
00:21:15.010 --> 00:21:16.570
my view page, if I
had a view page of

391
00:21:16.570 --> 00:21:20.020
dynamic, and by that, I
mean the type argument of

392
00:21:20.500 --> 00:21:24.190
the generic type argument of
the pages dynamic, then within

393
00:21:24.190 --> 00:21:27.070
the view, I could go
model that first name or

394
00:21:27.130 --> 00:21:29.980
less than percent equals model.
That first name, model, that

395
00:21:29.980 --> 00:21:32.920
last name I won't get
IntelliSense because it's a dynamic,

396
00:21:33.160 --> 00:21:37.030
it's a dynamic late bound
access to that object, but

397
00:21:37.030 --> 00:21:39.670
I get the nicer, cleaner
syntax as if I was

398
00:21:40.180 --> 00:21:44.320
the referencing properties. I don't
have to, it's nicer than

399
00:21:44.320 --> 00:21:49.000
doing like view data, dictionary
of bracket, quote, first name

400
00:21:49.780 --> 00:21:54.580
and, and what's happening is
that it's just accessing those

401
00:21:54.580 --> 00:21:57.580
properties on the expando object
in a late bound fashion.

402
00:21:58.290 --> 00:22:01.950
Okay. And this expando object,
that's living in system dot

403
00:22:02.010 --> 00:22:04.950
dynamic, and that's part of
the DLR. So you literally

404
00:22:04.950 --> 00:22:11.430
are saying dynamic Fu equals
new expando object. Yes. And

405
00:22:11.430 --> 00:22:14.640
then I can just go
and say food dot this

406
00:22:14.640 --> 00:22:17.220
and food out fat, and
it's going to automatically get

407
00:22:17.220 --> 00:22:23.100
whatever properties I want. Yep.
So you're you're yeah. Under

408
00:22:23.100 --> 00:22:24.630
the hood. I don't know
what exactly what is doing.

409
00:22:24.630 --> 00:22:26.940
I'm guessing it's just adding
these things to some dictionary.

410
00:22:26.940 --> 00:22:29.700
And then later when you
try to retrieve them, you

411
00:22:29.700 --> 00:22:32.940
just say food dot title
and it will do a

412
00:22:32.940 --> 00:22:37.440
look dynamic lookup and you
know, for, for what's the

413
00:22:37.440 --> 00:22:39.720
value of title and it
will return that to you.

414
00:22:41.670 --> 00:22:44.610
Well, yeah. I mean, they're
going to, they're adding it

415
00:22:44.730 --> 00:22:46.650
know, like, this is the
thing about the dynamic keyword,

416
00:22:46.650 --> 00:22:49.770
right? It's we joked about
this before. It's statically typed

417
00:22:49.860 --> 00:22:55.590
as dynamic. They're dynamically adding
these members at, at runtime

418
00:22:56.810 --> 00:22:58.860
and you can go deep
too. So you could say

419
00:22:59.220 --> 00:23:02.700
something dot address dot state,
and it's going to, you

420
00:23:02.700 --> 00:23:05.310
know, that address could be
an ex expando object. So

421
00:23:05.310 --> 00:23:08.370
you can have expandos within
expandos, it's kinda like a

422
00:23:08.370 --> 00:23:11.220
hash table, but, but it
feels like a dynamically generated

423
00:23:11.220 --> 00:23:13.800
object. Cause it, cause it
is, If you, you can

424
00:23:13.800 --> 00:23:15.810
do that to retrieve it,
but if you're creating it,

425
00:23:15.810 --> 00:23:19.470
you'd have to go. You'd
have to use the, let's

426
00:23:19.470 --> 00:23:23.160
say a dynamic. Oh, equals
new D expando Oh, dot

427
00:23:23.670 --> 00:23:28.080
address equals new expando ODA
address, state equals anything. Right.

428
00:23:28.080 --> 00:23:29.880
You have to, you have
to set that one level

429
00:23:29.880 --> 00:23:32.070
deep first point and keep
going. Yeah. But then when

430
00:23:32.070 --> 00:23:33.870
you get it on the
other side, you just say,

431
00:23:33.870 --> 00:23:36.900
yeah. Oh dot state dot
Tai address or whatever it

432
00:23:36.900 --> 00:23:41.460
is. Right. Right. Or address
stuff. We're not saying expando

433
00:23:41.460 --> 00:23:46.010
object Fu equals new expando
object. Right. We're saying Fu

434
00:23:46.840 --> 00:23:52.480
Right. Yeah. That's weird. Yeah.
It's, it's, it's a strange

435
00:23:52.480 --> 00:23:55.720
hybrid of dynamic and static
in, in a single language.

436
00:23:56.380 --> 00:23:58.900
Yeah. Well, it's probably not
weird to some people, I

437
00:23:58.900 --> 00:24:01.870
mean, you know, there are
things like groovy that has

438
00:24:01.870 --> 00:24:06.370
this stuff already groovy in
Java has had expando type

439
00:24:06.370 --> 00:24:10.750
support for, for awhile and
No JavaScript, if you've done

440
00:24:10.750 --> 00:24:13.320
any kind of JavaScript you're
used to expand those. Yeah.

441
00:24:13.320 --> 00:24:15.160
Yeah. It's just such a,
it's just such a funny

442
00:24:15.160 --> 00:24:16.510
name. I think that that's
something that a lot of

443
00:24:16.510 --> 00:24:20.320
dotnet programmers are not really.
Yeah. It sounds like a

444
00:24:20.320 --> 00:24:27.910
Marvel comics, a villain Expand.
Oh man. So you've added

445
00:24:28.690 --> 00:24:33.730
the dynamic templating stuff to
ESPN NBC to what else

446
00:24:33.730 --> 00:24:35.920
is new in NVC too,
that we should be watching

447
00:24:35.920 --> 00:24:39.370
for? So one thing that's
going to be new in

448
00:24:39.370 --> 00:24:42.610
a Bay in our beta
is render action. So this

449
00:24:42.610 --> 00:24:45.730
is something that's been available
in our features library, our

450
00:24:45.730 --> 00:24:49.330
sort of prototype library, but
now we're cleaning it up,

451
00:24:49.900 --> 00:24:52.600
giving it a bath and
adding it as a core

452
00:24:52.600 --> 00:24:55.960
feature of the framework. So
what that does is that

453
00:24:55.960 --> 00:24:58.450
allows you from within the
view to point it at

454
00:24:58.900 --> 00:25:03.850
some action method and, and
call that method and get

455
00:25:03.850 --> 00:25:05.560
the result and put it
in the view at that

456
00:25:05.560 --> 00:25:12.400
location. It's really for enabling
a component compositional UI, where

457
00:25:12.850 --> 00:25:16.360
a classic case cases, I
have a menu. And since

458
00:25:16.660 --> 00:25:18.880
each of my views doesn't
want to each of my

459
00:25:18.880 --> 00:25:21.070
action method, doesn't want to
also set up the data

460
00:25:21.070 --> 00:25:23.920
for the menu and easy
way to get the menu

461
00:25:23.920 --> 00:25:26.620
in the view is simply
from the site dot master.

462
00:25:26.620 --> 00:25:30.580
I'll just call render action
menu. There are other approaches

463
00:25:30.580 --> 00:25:32.500
where you can set up
the data first, maybe through

464
00:25:32.500 --> 00:25:35.920
action filters, but you know,
for a quick and dirty

465
00:25:35.920 --> 00:25:38.410
way of, of, of getting
that there, you might call

466
00:25:38.410 --> 00:25:42.490
render action. Other things we're
doing is I mentioned the

467
00:25:42.490 --> 00:25:49.180
strongly touch, UI helpers, client
validation, and improvements. We've one

468
00:25:49.180 --> 00:25:50.620
thing that a lot of
people will be happy about,

469
00:25:50.620 --> 00:25:52.330
which is a very small
thing is that we're adding

470
00:25:52.330 --> 00:25:56.290
a blank project template. So
right now with NBC eight

471
00:25:56.290 --> 00:25:59.470
feet on NBC, if you
go file new AC ABC

472
00:25:59.920 --> 00:26:03.340
project, you get a lot
of stuff in there. And

473
00:26:03.470 --> 00:26:05.440
when you hit at five,
you get a full functional

474
00:26:05.440 --> 00:26:08.770
site with membership and the
ability to register users. And

475
00:26:08.770 --> 00:26:10.390
that's great for a lot
of people who just really

476
00:26:10.390 --> 00:26:12.190
want to play around with
it and figure out how

477
00:26:12.190 --> 00:26:15.520
it works and how you
can. Hey Scott. Hey Phil.

478
00:26:15.640 --> 00:26:19.990
Hang on a second. Yep.
Yes, sir. Hey, I'm doing

479
00:26:19.990 --> 00:26:27.040
a podcast right now with
Phil hack. Phil Scott Guthrie says

480
00:26:27.040 --> 00:26:31.240
you're a, nobody. I know
you can hear him. We're

481
00:26:31.240 --> 00:26:33.400
actually recording right now. Do
you need something, sir? Can

482
00:26:33.400 --> 00:26:39.940
I call you back? Yeah,
that's fine. Whatever you need

483
00:26:39.940 --> 00:26:48.800
me to do. Yeah, that
sounds great. I'll I'll call

484
00:26:48.800 --> 00:26:52.520
you back in a few
minutes. Alright, bye. Yeah. Sorry.

485
00:26:52.520 --> 00:26:55.040
I didn't mean to, to
like kick you to the

486
00:26:55.040 --> 00:26:57.280
curb there, but I've got
a special ring. When, when

487
00:26:57.290 --> 00:27:00.230
Scott calls, you know, what's
the joke I serve at

488
00:27:00.230 --> 00:27:04.760
the pleasure of the goo
Stop everything. Yeah. Yeah, exactly.

489
00:27:04.790 --> 00:27:12.770
Sorry. So you were saying
Phil. Yeah. What was I

490
00:27:12.770 --> 00:27:16.030
talking about? But one thing
I wanted to ask though,

491
00:27:16.070 --> 00:27:19.190
backing up a little bit
that the render action thing,

492
00:27:19.220 --> 00:27:21.200
don't you think that, that
there'll be some purists? That'll

493
00:27:21.200 --> 00:27:24.740
say that that's not a
good idea. Oh, definitely. In

494
00:27:24.740 --> 00:27:27.320
fact, the team itself, you
know, there's half of us

495
00:27:27.320 --> 00:27:31.250
who were kind of cringing
at it and there's half

496
00:27:31.250 --> 00:27:34.700
of us who are saying,
you know, this, this is

497
00:27:34.700 --> 00:27:40.220
one of the largest demanded
features and not everyone needs

498
00:27:40.220 --> 00:27:42.440
to be pure a hundred
percent all the time, right?

499
00:27:42.440 --> 00:27:44.300
Like sometimes you just need
a ma you know, you

500
00:27:44.300 --> 00:27:46.430
just need to throw this
component on, on a master

501
00:27:46.430 --> 00:27:50.030
page. And it's very hard
to do these composition in

502
00:27:50.030 --> 00:27:52.550
another way, and it's still
possible to do it and

503
00:27:52.550 --> 00:27:56.870
have a mostly clean design.
There's some drawbacks to it

504
00:27:56.870 --> 00:28:00.650
though. For example, if you
are using our new, another

505
00:28:00.650 --> 00:28:02.690
new feature of beta that
we're adding in beta is

506
00:28:02.690 --> 00:28:06.260
the async controller. And so
the async controller allows you

507
00:28:06.620 --> 00:28:09.500
within your action method, to
what they called an external

508
00:28:09.500 --> 00:28:13.370
web service or other services,
and then return the thread

509
00:28:13.370 --> 00:28:16.670
to the ThreadPool while, while
that weight's on, you know,

510
00:28:16.670 --> 00:28:20.660
whatever I completion ports and
then, and not block the

511
00:28:20.660 --> 00:28:24.140
thread. And then when the
lift service results come back,

512
00:28:24.140 --> 00:28:27.440
you finish executing the action
method. So this is a

513
00:28:27.440 --> 00:28:30.530
great, this is thing that
some of our bigger enterprise

514
00:28:30.530 --> 00:28:33.980
customers are really keen on
because they're calling all kinds

515
00:28:33.980 --> 00:28:36.140
of services and such, and
they don't want to be

516
00:28:36.140 --> 00:28:39.830
blocking these threats. They really
need the throughput. The problem

517
00:28:39.830 --> 00:28:44.900
there is that it, you
know, with render action, the

518
00:28:44.900 --> 00:28:46.910
render action is not going
to take part in that

519
00:28:46.910 --> 00:28:50.630
asynchronicity right. So once you
call your action method, you

520
00:28:50.630 --> 00:28:53.330
returned the view. We're going
to make yet another action

521
00:28:53.330 --> 00:28:55.400
call. If you call render
action in your view, and

522
00:28:55.400 --> 00:28:57.560
that call is going to
be synchronous. Even if your

523
00:28:57.560 --> 00:29:01.580
action method that you're calling
it asynchronous, I don't think

524
00:29:01.580 --> 00:29:03.890
we put any blocks there.
So we'll actually allow you

525
00:29:03.890 --> 00:29:06.910
to call render action on
an asynchronous action method. We'll

526
00:29:06.920 --> 00:29:11.840
just call it synchronously. Yeah.
I mean, myself, I'm pretty

527
00:29:11.840 --> 00:29:15.400
divided on this feature and
the way I rationalize it

528
00:29:15.400 --> 00:29:20.990
is that if I'm doing
something about this, What I'm

529
00:29:20.990 --> 00:29:22.670
saying, what I'm thinking though,
is that when we do

530
00:29:22.670 --> 00:29:24.740
stuff like that, are people
going to think that we're

531
00:29:26.180 --> 00:29:28.250
are the, either for lack
of a better word or

532
00:29:28.250 --> 00:29:30.500
the digerati, you're going to
think that we're dumbing down

533
00:29:30.500 --> 00:29:32.810
in VC by adding a
feature that smells like web

534
00:29:32.810 --> 00:29:38.150
forms, I'd argue that it
doesn't smell, smell much like

535
00:29:38.150 --> 00:29:40.910
web forms. It's just a
it's to me, it's the

536
00:29:41.170 --> 00:29:46.420
way you can really easily
do component UI, not component

537
00:29:46.420 --> 00:29:50.170
compositional UI. So this is
not a control, right? This

538
00:29:50.170 --> 00:29:53.680
is not a post-bac model.
This is simply a way

539
00:29:53.680 --> 00:29:56.020
of saying, you know, I
want this, the results of

540
00:29:56.020 --> 00:29:58.900
this action method over here
to show up over there

541
00:29:58.900 --> 00:30:01.290
in my view. Right? But
isn't the concern that it

542
00:30:01.290 --> 00:30:05.400
gives the view, who is
asking for that action, knowledge

543
00:30:05.400 --> 00:30:08.940
about things that really ought
not know about. So on

544
00:30:08.940 --> 00:30:11.700
that point, I'd argue, well,
you're already giving that knowledge.

545
00:30:11.730 --> 00:30:14.640
If you call action link
within your view, right? Because

546
00:30:14.640 --> 00:30:16.710
you have to specify the
name of the action and

547
00:30:16.710 --> 00:30:18.810
maybe the name of a
controller, if you're linking to

548
00:30:18.810 --> 00:30:23.340
another action. And, and the
point I made, someone asked

549
00:30:23.340 --> 00:30:25.170
me about this recently, and
the point I made to

550
00:30:25.170 --> 00:30:28.980
them was so yes, we
are tying, we are giving

551
00:30:28.980 --> 00:30:33.030
the view a bit of
knowledge about the controller and

552
00:30:33.030 --> 00:30:38.760
action. However, we also have
enough layers of indirection so

553
00:30:38.760 --> 00:30:41.730
that what you have in
your view is a string,

554
00:30:41.730 --> 00:30:44.100
right? Well, in general, if
you call action link, you

555
00:30:44.100 --> 00:30:46.080
have a string, that's a
controller name in a, in

556
00:30:46.080 --> 00:30:47.790
a view name. Or if
you call render action, you

557
00:30:47.790 --> 00:30:51.540
have the string, that's the
action name and through routing.

558
00:30:51.540 --> 00:30:54.420
And through other means, you
could say, Oh, you know,

559
00:30:54.420 --> 00:30:56.820
I want that to actually
point to some, either method.

560
00:30:57.420 --> 00:30:59.850
You always have that ability.
It, we don't build it

561
00:30:59.850 --> 00:31:02.460
in necessarily, but you always
have that ability to say,

562
00:31:03.600 --> 00:31:06.960
to provide that level of
indirection. If the coupling of

563
00:31:06.960 --> 00:31:11.520
that render action to the
controller action becomes a problem.

564
00:31:12.210 --> 00:31:14.610
Now, I, you know, a
lot of people are using

565
00:31:14.610 --> 00:31:17.550
render action already. I've had
people who I consider, you

566
00:31:17.550 --> 00:31:22.950
know, very well, very knowledgeable
about NBC calling for it.

567
00:31:22.950 --> 00:31:25.110
Like these Sanderson, you know,
told me he's happy that

568
00:31:25.110 --> 00:31:28.410
we're adding that in. So
I think, I think overall,

569
00:31:28.410 --> 00:31:30.210
it will be a good
thing. I think it like

570
00:31:30.210 --> 00:31:32.820
any features, there'll be the,
there will be those who

571
00:31:32.820 --> 00:31:35.820
will abuse it. And, but
then there will be those

572
00:31:35.820 --> 00:31:38.910
who are glad that it's
there because they are responsible

573
00:31:38.910 --> 00:31:41.250
about it. And they're glad
that we gave them the

574
00:31:41.250 --> 00:31:45.240
choice to be responsible. Yeah.
Well, can you solve that?

575
00:31:45.270 --> 00:31:48.060
I mean, if it solves
a specific scenario, then it

576
00:31:48.060 --> 00:31:51.480
seems okay. If we started
leaning on it ourselves and

577
00:31:51.480 --> 00:31:53.910
using it all the time,
then you know. Yeah, yeah.

578
00:31:53.940 --> 00:31:56.010
I I'm sure I'll get
some hate mail for it

579
00:31:56.040 --> 00:31:58.560
and I'll get some love
mail for it. So Yeah,

580
00:31:58.560 --> 00:32:01.710
exactly. Yeah. All that talk
of separation of concerns then

581
00:32:01.710 --> 00:32:06.510
kind of goes out the
window. I don't know about

582
00:32:06.510 --> 00:32:11.040
that necessarily. Like I said,
the so separation of concerns

583
00:32:11.040 --> 00:32:14.370
to me and, you know,
maybe people disagree. It doesn't

584
00:32:14.520 --> 00:32:16.950
sort of have to do
with when code gets executed.

585
00:32:16.950 --> 00:32:19.740
It has to do with
what knowledge code has of

586
00:32:19.740 --> 00:32:22.740
each other. So in a
way we've already violated some

587
00:32:22.740 --> 00:32:25.890
of that separation's concerned with
actually, right. The fact that

588
00:32:25.990 --> 00:32:31.530
a view knows what action
and controllers are in order

589
00:32:31.530 --> 00:32:34.980
to generate a link to
those things. Now, some frameworks,

590
00:32:35.010 --> 00:32:37.770
you know, take it a
step further and they abstract

591
00:32:37.770 --> 00:32:41.300
that away. I stress works
this way, where instead of

592
00:32:41.300 --> 00:32:43.670
action links, you would actually
put like link and then

593
00:32:43.670 --> 00:32:46.400
you'd put some string token
in there. And then you

594
00:32:46.400 --> 00:32:49.730
have some XML config file
that says, Oh, this, you

595
00:32:49.730 --> 00:32:52.010
know, where you hook up
a workflow, Oh, this token

596
00:32:52.010 --> 00:32:54.560
links to this action, this
token links to that action,

597
00:32:54.590 --> 00:32:57.290
this token links to that
action. You're free to do

598
00:32:57.290 --> 00:32:59.840
that approach in the AC
on NBC. We haven't built

599
00:32:59.840 --> 00:33:02.600
it in, but you're free
to do that approach. But

600
00:33:02.600 --> 00:33:04.940
I think for the most
part that's, I think that's

601
00:33:04.940 --> 00:33:08.360
one of the appeals of
like rails was that, you

602
00:33:08.360 --> 00:33:11.030
know, we sort of streamlined
these things and said, we'll

603
00:33:11.060 --> 00:33:14.270
sacrifice a tiny bit of
architectural priority in order to

604
00:33:14.690 --> 00:33:18.340
enable people to get their
job done. Yeah. And that's

605
00:33:18.340 --> 00:33:20.470
always the challenge. I mean,
with all things, I mean,

606
00:33:20.470 --> 00:33:22.630
that's kind of a good
place to kind of wrap

607
00:33:22.630 --> 00:33:25.270
it up, but you know,
there's a constant tension between

608
00:33:25.270 --> 00:33:28.570
pragmatism and purity and there
are those purists that we'll

609
00:33:28.570 --> 00:33:31.870
believe that we'll say that
you can get things done

610
00:33:31.870 --> 00:33:35.140
and keep things pure. And
then there are those pragmatists,

611
00:33:35.170 --> 00:33:37.960
that'll just say, you know,
get her done. That looks

612
00:33:37.960 --> 00:33:41.860
pretty pure. Yeah. I will.
I will say I have

613
00:33:41.860 --> 00:33:46.300
spent more time with, with
MVC staring at code and

614
00:33:46.300 --> 00:33:49.300
saying, I'm so close to
keeping it, to making this

615
00:33:49.300 --> 00:33:53.110
pretty, I've spent more time
thinking about my code's aesthetic

616
00:33:53.110 --> 00:33:55.270
than I ever did with,
with web forms, which I

617
00:33:55.270 --> 00:33:59.110
think is a Testament to
MVC just in the sense

618
00:33:59.110 --> 00:34:01.870
that it gets me that
close. Yeah. Yeah. You know,

619
00:34:01.900 --> 00:34:05.650
regarding the Pearson pragmatist argument,
right? Like sometimes I take

620
00:34:05.650 --> 00:34:08.920
issue with the, the, get
her done philosophy sometimes because

621
00:34:09.400 --> 00:34:12.400
often what happens there is
you, you won't even try

622
00:34:12.400 --> 00:34:16.990
to approach or evaluate what
the, you know, being a

623
00:34:16.990 --> 00:34:18.970
little more, if you want
to use the word pure

624
00:34:19.060 --> 00:34:23.050
or, or thinking about maintenance
concerns and stuff, we'll get

625
00:34:23.050 --> 00:34:26.260
you. Right. And whereas on
the flip side, if you're

626
00:34:26.260 --> 00:34:30.010
on, on the strict parody
argument, sometimes you forget that

627
00:34:30.040 --> 00:34:32.500
engineering is a series of
tradeoffs. And sometimes you do

628
00:34:32.500 --> 00:34:37.450
need to make small targeted,
you know, compromises in order

629
00:34:37.450 --> 00:34:40.840
to get things done quicker.
I used to take this

630
00:34:40.840 --> 00:34:44.710
approach with database designs where
I always strove for a

631
00:34:44.740 --> 00:34:49.000
full normalization first. And then
I would work back as

632
00:34:49.000 --> 00:34:51.580
I ran into problems like
with perf and stuff and

633
00:34:51.580 --> 00:34:55.480
did some targeted. Normalizations where,
you know, I would denormalize

634
00:34:55.480 --> 00:34:58.570
from the normal life database.
So, you know, maybe that

635
00:34:58.570 --> 00:35:01.060
would make sense to some
people who worked with SQL

636
00:35:01.060 --> 00:35:03.460
or not. But I find
that a push to work

637
00:35:03.460 --> 00:35:06.250
with pure, pure parody, right,
is that I try to

638
00:35:06.250 --> 00:35:10.150
do the peer design first
when I'm writing an application.

639
00:35:10.720 --> 00:35:14.020
And then I might work
my way back a little

640
00:35:14.020 --> 00:35:16.780
bit to say, well, for
performance reasons, or to make

641
00:35:16.780 --> 00:35:20.860
this work reasons I'm gonna
make these small compromises. And

642
00:35:20.860 --> 00:35:23.500
so I feel like that's
the approach that, you know,

643
00:35:23.560 --> 00:35:26.320
we're kind of taking here
sometimes is that we could

644
00:35:26.320 --> 00:35:28.590
have done a a hundred.
We looked at the a

645
00:35:28.590 --> 00:35:30.910
hundred percent pure thing. And
that's what, you know, we

646
00:35:30.910 --> 00:35:33.520
didn't have render action in
version one, but now we're

647
00:35:33.520 --> 00:35:36.010
seeing these pain points with
that. And we're saying, well,

648
00:35:36.490 --> 00:35:38.340
maybe we need move back
a little bit and say,

649
00:35:38.370 --> 00:35:41.670
okay, some people have expressed,
or many, many of our

650
00:35:41.670 --> 00:35:44.940
customers have expressed a real
need for render action. We've

651
00:35:44.940 --> 00:35:48.630
told them, you know, all
the concerns about the purity,

652
00:35:48.630 --> 00:35:50.460
but they wanted anyways and
they promised they'll use it

653
00:35:50.460 --> 00:35:55.190
responsibility responsibly. Right. So it's
like, well, okay, No, that's

654
00:35:55.190 --> 00:35:58.250
cool. Well, it sounds like
NBC is getting ready for

655
00:35:58.250 --> 00:36:00.290
a, for the enterprise push.
You want this to be

656
00:36:00.290 --> 00:36:04.010
used, you know, everywhere now.
I mean, it's, it's ready

657
00:36:04.010 --> 00:36:06.080
to go, right? I mean,
there's no reason anyone shouldn't

658
00:36:06.080 --> 00:36:08.840
move to, to NBC to
right now, Not that I

659
00:36:08.840 --> 00:36:10.640
can think of. So the
beta is going to have

660
00:36:10.640 --> 00:36:13.850
a go live clause so
you can deploy it live,

661
00:36:14.690 --> 00:36:18.650
you know, declare pre-vis to
had the absence of any

662
00:36:18.710 --> 00:36:21.560
closet relating to go live
or don't ask don't tell

663
00:36:21.560 --> 00:36:24.680
clause. Exactly. It was more
of a, well, we didn't

664
00:36:24.680 --> 00:36:27.650
say you could, but we
didn't say you couldn't, but

665
00:36:27.650 --> 00:36:29.180
a beta is going to
have is going to have

666
00:36:29.180 --> 00:36:32.930
an explicit, you know, there's
no support in place yet,

667
00:36:32.960 --> 00:36:35.240
but if you want to
go live, we feel that

668
00:36:36.800 --> 00:36:39.410
we're comfortable with that was
funny that read the clause

669
00:36:39.740 --> 00:36:42.410
today. And there is a
slight restriction on the go

670
00:36:42.410 --> 00:36:47.360
live, not to be used
for mission critical systems at

671
00:36:47.360 --> 00:36:53.210
nuclear plants or life, life
support systems or the type

672
00:36:53.210 --> 00:36:54.620
of things that I don't
think you run with a

673
00:36:54.620 --> 00:36:56.600
web app anyways. But I
thought that was kind of

674
00:36:56.600 --> 00:37:00.530
amusing. It actually says nuclear
plant. It does. That is

675
00:37:00.530 --> 00:37:02.450
awesome, dude, by the way,
don't take my word for

676
00:37:02.450 --> 00:37:04.850
it. You know, consult a
lawyer, blah, blah, blah. But

677
00:37:05.150 --> 00:37:08.900
yeah, reading yourself, but it
mentioned nuclear plants, life support

678
00:37:08.900 --> 00:37:11.540
systems and some of the,
Does it say anything about

679
00:37:11.540 --> 00:37:16.750
nerd dinners? No, luckily you're
okay. Alright cool. And I'm

680
00:37:16.760 --> 00:37:19.640
gonna, I'm gonna, I'm going
to get that updated then,

681
00:37:19.640 --> 00:37:21.770
actually now that I'm a
manager, I'll get John Galloway to

682
00:37:21.770 --> 00:37:25.820
update nerdina.com and move it
over to NBC too. Awesome.

683
00:37:26.510 --> 00:37:28.430
Very cool. Well, thanks a
lot, Phil. I really appreciate

684
00:37:28.430 --> 00:37:31.700
your time today. Thank you.
Well, this has been another

685
00:37:31.700 --> 00:37:34.490
episode of Hansel minutes and
I'll see you again next

686
00:37:34.490 --> 00:37:34.730
week.

