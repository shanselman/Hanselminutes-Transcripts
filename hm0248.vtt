WEBVTT FILE

1
00:00:12.210 --> 00:00:17.870
From hanselminutes.com. It's Hansel minutes,
a weekly discussion with web

2
00:00:17.870 --> 00:00:22.790
developer and technologists. Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.790 --> 00:00:29.420
number two 48. Recorded live
Thursday, January 6th, 2011. Support for Hansel

4
00:00:29.420 --> 00:00:33.320
minutes is provided by Tellerik
rad controls, the most comprehensive

5
00:00:33.320 --> 00:00:37.160
suite of components for windows
forms and asp.net web applications

6
00:00:37.490 --> 00:00:46.430
online@wwwdottelerik.com. In this episode, Scott
talks about executable specifications with

7
00:00:46.430 --> 00:00:52.340
Geico ASIC, Jonas Bondi, and
as like, hello. Hi, this

8
00:00:52.340 --> 00:00:54.680
is Scott Hanselman, and this
is another episode of Hansel

9
00:00:54.680 --> 00:00:57.290
minutes. We've got an international
show today with a lot

10
00:00:57.290 --> 00:00:59.300
of people and a cast
of thousands. I'm very excited

11
00:00:59.300 --> 00:01:02.150
about this show. We're going
to be talking about executable

12
00:01:02.150 --> 00:01:06.170
specifications and specification by example,
we've got a group from

13
00:01:06.170 --> 00:01:09.260
all over the place we've
got as luck. Hell Sawyer,

14
00:01:09.350 --> 00:01:12.650
who comes from London, but
I guess you're in Chicago

15
00:01:12.650 --> 00:01:16.010
right now. Is that correct?
That's correct. Then I'm originally

16
00:01:16.400 --> 00:01:19.760
born in Norway, so all
over the place. Fantastic. And

17
00:01:19.760 --> 00:01:22.940
then you work on cucumber,
but you are, you consider

18
00:01:22.940 --> 00:01:24.470
yourself, which is a Ruby
tool, but you are a

19
00:01:24.470 --> 00:01:29.210
language agnostic, software developer. Yeah,
I've done mostly Ruby and

20
00:01:29.210 --> 00:01:31.580
Java and I lately quite
a lot of Java script,

21
00:01:32.390 --> 00:01:35.420
some dotnet and some, you
know, I try to, I

22
00:01:35.420 --> 00:01:37.520
try to stay a language
agnostic. I think that's the

23
00:01:37.520 --> 00:01:41.060
best way to be a
developer. So a Norwegian army

24
00:01:41.060 --> 00:01:45.470
knife as it were. Okay.
And then we're going to

25
00:01:45.470 --> 00:01:48.290
learn about what cucumber is.
It seems like all these

26
00:01:48.290 --> 00:01:51.170
new exciting tools have new
and exciting names. So I

27
00:01:51.170 --> 00:01:53.120
was like, who's going to
share with us what cucumber

28
00:01:53.510 --> 00:01:57.110
and we've got Geico Isaac
from the UK right now.

29
00:01:57.110 --> 00:01:58.880
Is that right? You're in
London somewhere or where, where

30
00:01:58.880 --> 00:02:01.640
are you located? Yes. Yes.
At the moment I'm in

31
00:02:01.640 --> 00:02:05.780
London. I'm originally from Serbia.
So you have quite an

32
00:02:05.780 --> 00:02:08.330
international show today, but I'm
in London at the moment.

33
00:02:08.840 --> 00:02:11.750
Okay. And then you work
on fitness, but you also

34
00:02:11.750 --> 00:02:16.560
are a kind of tool
and software agnostic. Yeah. I've

35
00:02:16.610 --> 00:02:19.910
contributed bits to fitness and
then bit started tools. But

36
00:02:19.910 --> 00:02:22.670
I tried to be tool
and language. I tried to

37
00:02:22.670 --> 00:02:25.550
learn as many tools and
languages that I can. And

38
00:02:25.550 --> 00:02:28.280
you also are, have you
finished your book specification by

39
00:02:28.280 --> 00:02:34.400
example? That's actually been finished
since August or September, but

40
00:02:34.490 --> 00:02:36.710
it's not coming out to
me. Don't ask me why.

41
00:02:38.420 --> 00:02:40.010
Okay. But we're going to
all look forward to that

42
00:02:40.010 --> 00:02:46.130
book specification by example, and
then Jonas Bondi from Switzerland.

43
00:02:46.130 --> 00:02:48.830
Is that where you're located
right now? Yes, I am

44
00:02:48.830 --> 00:02:52.880
from Bern, Switzerland. And then
John has works on spec

45
00:02:52.880 --> 00:02:55.430
flow, which is, I think
is on version 1.5 right

46
00:02:55.430 --> 00:03:01.150
now. Yes. That's the latest
version. So as Luck, Geico

47
00:03:01.180 --> 00:03:05.950
and Jonas, I want to
understand what this movement is

48
00:03:05.950 --> 00:03:11.200
towards a specification, what they
call executable specifications. I'm used

49
00:03:11.230 --> 00:03:16.120
to writing specifications in Microsoft
word. And I've always said

50
00:03:16.420 --> 00:03:19.540
when I was an architect
at a large enterprise, that

51
00:03:20.290 --> 00:03:24.460
writing specifications is in word
is unfortunate because a word

52
00:03:24.460 --> 00:03:28.120
document can't break the build.
I've said before that a

53
00:03:28.120 --> 00:03:31.690
word document has no teeth.
And I've always wondered how

54
00:03:31.690 --> 00:03:34.960
I could somehow compile my
word document because it usually

55
00:03:34.960 --> 00:03:38.980
just ends up being something
that's not read who can

56
00:03:38.980 --> 00:03:42.640
give me a kind of
a starting statement about why

57
00:03:42.940 --> 00:03:45.040
that's a bad thing and,
and what we're going to

58
00:03:45.040 --> 00:03:47.590
do about it. Perhaps Geico
could give us a sense

59
00:03:47.590 --> 00:03:50.670
of, Yeah, yeah. I'll probably
start with that one. So

60
00:03:51.570 --> 00:03:53.700
as you said, you know,
a word document doesn't have

61
00:03:53.700 --> 00:04:01.050
any teeth and generally the
traditional models of specifications and

62
00:04:01.080 --> 00:04:05.640
tests in software processes are
completely disconnected from the implementation

63
00:04:05.760 --> 00:04:09.630
and what this, I wouldn't
call it a movement. It's

64
00:04:09.660 --> 00:04:11.340
more sort of a set
of ideas that has been

65
00:04:11.340 --> 00:04:14.760
implemented by lots of people
in different contexts is to

66
00:04:14.760 --> 00:04:23.520
actually make things really precise,
using examples so that anything

67
00:04:23.520 --> 00:04:25.920
that needs to blow up
blows up sooner. So as

68
00:04:25.920 --> 00:04:28.650
we don't get into functional
gaps and inconsistencies, once we

69
00:04:28.650 --> 00:04:31.830
start implementing software, what we
get that a bit sooner

70
00:04:32.580 --> 00:04:37.200
and we get to that
collaboratively with our domain experts,

71
00:04:37.230 --> 00:04:42.210
business analysts, testers, developers, everybody
sort of discusses these examples.

72
00:04:42.240 --> 00:04:44.220
Once something needs to be
implemented and we try and

73
00:04:44.220 --> 00:04:47.250
make it precise. You like
that. And then once we

74
00:04:47.250 --> 00:04:49.980
have these examples, what's sort
of interesting is that the

75
00:04:49.980 --> 00:04:55.410
examples are perfectly precise and
testimonials. So we can take

76
00:04:55.410 --> 00:04:59.460
these examples. We've used to
illustrate our specifications or requirements

77
00:04:59.760 --> 00:05:02.160
and to make them more
precise and automate them as

78
00:05:02.160 --> 00:05:05.880
tests and sort of call
ups the whole gap between

79
00:05:05.880 --> 00:05:11.070
the specifications and tests and
development in the middle. And

80
00:05:11.070 --> 00:05:14.010
that's how we can give
these specifications some teeth, because

81
00:05:14.580 --> 00:05:18.000
if we have enough of
these examples and the university

82
00:05:18.000 --> 00:05:21.210
understood and discussed, everybody knows
what they need to do.

83
00:05:21.210 --> 00:05:24.570
So we build up a
shared understanding, but also we

84
00:05:24.570 --> 00:05:31.590
get to set up these
automated examples, automated specifications and

85
00:05:31.590 --> 00:05:36.210
executable specifications as, as sort
of you've called them. And

86
00:05:36.210 --> 00:05:39.960
then basically you can eliminate
the problem of people not

87
00:05:39.960 --> 00:05:43.950
reading specifications, because if somebody
hasn't implemented something it's going

88
00:05:43.950 --> 00:05:47.250
to break the build, you
can eliminate the problem of

89
00:05:47.550 --> 00:05:51.300
functional regression because if somebody
messed up something that was

90
00:05:51.300 --> 00:05:54.210
working before, you'll break the
build and so on. And

91
00:05:54.210 --> 00:05:56.610
then when you have that
and when the system is

92
00:05:56.610 --> 00:06:02.000
continuously validated against A set
of requirements, using examples, you

93
00:06:02.000 --> 00:06:05.360
get also something very interesting.
You get to live in

94
00:06:05.360 --> 00:06:09.830
documentation system for your software.
That basically is as reliable

95
00:06:09.830 --> 00:06:13.220
as the code, but it's
much more, much easier to

96
00:06:13.220 --> 00:06:16.220
read if done properly and
business users can access that.

97
00:06:16.880 --> 00:06:19.250
So you get a proper
way to build up your

98
00:06:19.250 --> 00:06:22.160
business process documentation, as well
as your building software, which

99
00:06:22.160 --> 00:06:27.570
is something that Luxe quite
often. And if you have

100
00:06:28.070 --> 00:06:31.600
things that have, that have
found that you can prove

101
00:06:31.690 --> 00:06:36.230
their effectiveness, there's so many
ways that it's absolutely a

102
00:06:36.440 --> 00:06:40.340
must have if you want
to release frequently every week

103
00:06:40.340 --> 00:06:44.060
or every day, and keep
doing that in the next

104
00:06:44.060 --> 00:06:49.100
couple of years. So ask
like, what do you think

105
00:06:49.100 --> 00:06:52.520
about that? Is that a
good description? I think that's,

106
00:06:52.700 --> 00:06:55.130
I think that's a great
description. There's one thing that

107
00:06:55.130 --> 00:06:57.620
I would like to add,
and this is a problem

108
00:06:57.620 --> 00:07:00.170
that I've homo with all
of them throughout my entire

109
00:07:00.170 --> 00:07:04.670
career. And that's the problem
that you get with text,

110
00:07:04.730 --> 00:07:08.300
you know, word documents, you
know, any other kind of

111
00:07:09.050 --> 00:07:12.470
document that is just read
by humans. The problem is

112
00:07:12.470 --> 00:07:16.460
very often that they leave
a lot of room for

113
00:07:16.460 --> 00:07:20.990
interpretation. And then the result
of that is misunderstanding. So

114
00:07:20.990 --> 00:07:26.240
the person writing the requirements
is thinking about one thing

115
00:07:26.240 --> 00:07:32.090
and the person reading them
is, is not doesn't necessarily

116
00:07:32.360 --> 00:07:35.060
interpret them in the same
way that the writer intended.

117
00:07:35.750 --> 00:07:40.280
And that's how you get
a lot of or missing

118
00:07:40.880 --> 00:07:47.030
missing requirements. Things like that,
mismatch a disconnect where we

119
00:07:47.030 --> 00:07:49.670
all thought we were on
the same page we went

120
00:07:49.670 --> 00:07:54.590
and we wrote, I said,
how could you not understand?

121
00:07:56.870 --> 00:08:02.030
So by making it executable,
you, you eliminate the, you

122
00:08:02.030 --> 00:08:04.490
know, the risk of misunderstanding
because you actually have a

123
00:08:04.820 --> 00:08:07.160
computer program telling you whether
it's working the way it's

124
00:08:07.160 --> 00:08:12.140
written or not going to
write themselves. I mean, do

125
00:08:12.140 --> 00:08:14.030
you see them opening up
one of these tools and

126
00:08:14.030 --> 00:08:22.750
writing this? I think it
depends in the beginning. That's

127
00:08:22.750 --> 00:08:26.170
at least my experience, the
business user is not able

128
00:08:26.170 --> 00:08:28.870
to write it and doesn't
want to write it. But

129
00:08:28.870 --> 00:08:33.490
once he does see that
this executable specification really is

130
00:08:33.490 --> 00:08:36.640
bound to the implementation and
really has an effect of

131
00:08:36.820 --> 00:08:39.500
it on the system, then
I think a lot of

132
00:08:40.210 --> 00:08:43.390
business users or business analysts
can see the value of

133
00:08:43.390 --> 00:08:46.570
the whole specification by example,
and they can even start

134
00:08:46.600 --> 00:08:51.850
writing the specifications by themselves.
Can I jump in again?

135
00:08:54.010 --> 00:08:56.700
So the, the question you
asked Is a very valid

136
00:08:56.700 --> 00:08:59.250
question and I, I completely
agree with Jonas in terms

137
00:08:59.250 --> 00:09:02.610
of the business summary can
actually do that to themselves.

138
00:09:03.120 --> 00:09:05.880
I have a strong argument
why they shouldn't. And I

139
00:09:05.880 --> 00:09:11.220
think, you know, the most
teams that failed with specification

140
00:09:11.220 --> 00:09:15.180
by example, or behavior driven
development or agile acceptance testing

141
00:09:15.180 --> 00:09:16.920
or whatever, sort of the
name we put on this

142
00:09:17.370 --> 00:09:21.330
fail because they complained that,
you know, their business users

143
00:09:21.690 --> 00:09:24.210
don't want to use a
particular tool and write the

144
00:09:24.220 --> 00:09:28.110
specifications. I think this is
completely sort of a misunderstanding

145
00:09:28.110 --> 00:09:31.200
of the process. And I
think Affleck made a very

146
00:09:31.200 --> 00:09:34.140
strong point on creating a
shared understanding, but the shared

147
00:09:34.140 --> 00:09:37.920
understanding comes from conversation. Doesn't
come from somebody sitting down

148
00:09:37.920 --> 00:09:40.950
and writing stuff. So if
a business suddenly sits down

149
00:09:40.950 --> 00:09:44.460
and writes things in examples,
it's a bit better than

150
00:09:44.670 --> 00:09:46.590
if they write it down
as a word document, but

151
00:09:46.590 --> 00:09:49.740
it still doesn't guarantee that
all the testers have contributed

152
00:09:49.740 --> 00:09:52.200
what they want to contribute.
And the toll the developers

153
00:09:52.200 --> 00:09:54.780
have contributed what they want
to contribute to the specifications,

154
00:09:55.950 --> 00:09:58.950
where the way I see
this process really working well

155
00:09:58.950 --> 00:10:03.600
is actually having this conversation
about examples on the whiteboard.

156
00:10:04.140 --> 00:10:07.800
And then after we have
these examples into the discussion,

157
00:10:07.830 --> 00:10:12.060
whoever the question of who
then takes the results of

158
00:10:12.060 --> 00:10:14.730
the white board and puts
it in a tool is

159
00:10:14.730 --> 00:10:19.290
largely irrelevant. I think actually
at this point it would

160
00:10:19.290 --> 00:10:21.600
be maybe useful to give
an example of what we

161
00:10:21.600 --> 00:10:25.190
mean by example. Yeah. I
would like to understand these

162
00:10:25.190 --> 00:10:28.580
different terms because for someone
who may be listening, who

163
00:10:28.580 --> 00:10:31.910
may not again speak English
as their, their native language,

164
00:10:32.270 --> 00:10:37.160
they started hearing words like
feature scenario, example, and these

165
00:10:37.160 --> 00:10:40.190
could all be thought of
as the same word. And

166
00:10:40.190 --> 00:10:43.100
I think that precision in
software is very important and

167
00:10:43.100 --> 00:10:47.030
certainly with a code, if
it compiles, then, you know,

168
00:10:47.030 --> 00:10:49.910
you have some syntax, correct,
at least. But when you're

169
00:10:49.910 --> 00:10:53.300
writing pros in the form
of English and a certain

170
00:10:53.300 --> 00:10:56.000
syntax, it can be very
confusing. So can you guys,

171
00:10:56.130 --> 00:10:59.570
someone explained to me feature
scenario example, and we'll start

172
00:10:59.570 --> 00:11:03.380
moving a little bit into
implementation because the clarity, I

173
00:11:03.380 --> 00:11:05.300
think is what we're trying
to get a shared understanding

174
00:11:05.300 --> 00:11:08.870
through clear use of language.
Okay. I'll give it a

175
00:11:08.870 --> 00:11:12.650
T a compiler will tell
you whether the comply, you

176
00:11:12.650 --> 00:11:15.260
know, the code compiles correctly.
Now it doesn't tell you

177
00:11:15.260 --> 00:11:19.730
whether it's behaving correctly, right?
And I'm the only person

178
00:11:19.730 --> 00:11:21.470
that can really tell it,
tell you why, whether it's

179
00:11:21.470 --> 00:11:24.110
behaving correctly is the, you
know, the people who asked

180
00:11:24.110 --> 00:11:29.240
for that particular functionality, we
call functionality, we will often

181
00:11:29.240 --> 00:11:34.940
call it feature. So what
people who practice ATDD or

182
00:11:34.940 --> 00:11:39.200
BDD or specification by example
of do is like Loco

183
00:11:39.200 --> 00:11:42.980
said that they're having a
conversation. And the way it

184
00:11:42.980 --> 00:11:46.640
is often happens is let's
take an example. Let's say,

185
00:11:47.660 --> 00:11:52.910
I don't know, sign up,
sign up for, I don't

186
00:11:52.910 --> 00:11:55.960
know. They always use banking
as the example, whenever I

187
00:11:55.960 --> 00:12:02.170
see specifications that start using
BDD or business behavior driven

188
00:12:02.170 --> 00:12:03.850
development, they use banking. So
if someone's trying to sign

189
00:12:03.850 --> 00:12:06.260
up for an account at
a bank, Right, exactly. So

190
00:12:06.280 --> 00:12:08.340
somebody is trying to sign
up for an account in

191
00:12:08.340 --> 00:12:11.070
a bank and various things
can happen when they try

192
00:12:11.070 --> 00:12:15.240
to sign up. So the
developers, then they will go

193
00:12:15.240 --> 00:12:18.420
to the stakeholders or the
people who traditionally write the

194
00:12:18.420 --> 00:12:21.090
requirements. And they say, well,
give me an example of

195
00:12:21.090 --> 00:12:24.090
what would happen when somebody
finds up. Right. And then

196
00:12:24.120 --> 00:12:27.930
maybe the other person would
say, well, they enter their

197
00:12:28.440 --> 00:12:36.780
social security number and address,
and then they hit save,

198
00:12:38.640 --> 00:12:40.890
that's it. And then, but
then the developer or the

199
00:12:40.890 --> 00:12:42.510
test will go well. Yeah.
But then what, what do

200
00:12:42.510 --> 00:12:49.110
you expect to happen? Oh,
well that depends. Okay. Well

201
00:12:49.110 --> 00:12:51.330
what does it depend on?
Well, it can depend, for

202
00:12:51.330 --> 00:12:53.970
example, on their credit history.
If they have a really

203
00:12:53.970 --> 00:12:56.490
bad credit history, we don't
want them to be able

204
00:12:56.490 --> 00:13:00.170
to open an account. So
that's gonna add, so that

205
00:13:00.180 --> 00:13:01.980
we're going to go and
refine the example say, well,

206
00:13:02.250 --> 00:13:06.050
we can, we can say
given that we have a

207
00:13:06.060 --> 00:13:10.830
person with a great credit
history and he fills in

208
00:13:10.920 --> 00:13:15.000
a social security number, we
five, six, eight, seven, three,

209
00:13:15.720 --> 00:13:20.490
then press save. Then he
should be greeted with a

210
00:13:20.490 --> 00:13:23.220
message, you know, welcome to
the bank. Then we can

211
00:13:23.220 --> 00:13:27.560
have another example where we
say the same, except instead

212
00:13:27.580 --> 00:13:32.070
we say a person with
a horrible credit history should

213
00:13:32.070 --> 00:13:34.170
be greeted with a, I'm
sorry, we can't serve you

214
00:13:34.170 --> 00:13:36.150
at this time. Okay. So
let me see if I

215
00:13:36.150 --> 00:13:39.240
understand this. So the feature
is the ability to sign

216
00:13:39.240 --> 00:13:43.410
up for a new account,
and there are different scenarios

217
00:13:43.620 --> 00:13:45.330
for a person who wants
to sign up for an

218
00:13:45.330 --> 00:13:48.030
account. One scenario would be
a good credit history. Another

219
00:13:48.030 --> 00:13:50.730
scenario would be a bad
one. So scenarios branch off

220
00:13:50.730 --> 00:13:55.020
of are all potential things
for a feature owner to

221
00:13:55.020 --> 00:13:59.130
think about. Yes, there, the
different ways that that particular

222
00:13:59.160 --> 00:14:03.210
feature could behave depending on
circumstances. Okay. Is a feature

223
00:14:03.220 --> 00:14:08.580
different from an example, It's
an example is essentially the

224
00:14:08.580 --> 00:14:14.010
same as a scenario. People
use those terms, they exchange

225
00:14:14.010 --> 00:14:15.600
those terms. They mean more
or less the same thing.

226
00:14:16.320 --> 00:14:22.350
Okay. I noticed that there's
a lot of different systems

227
00:14:22.680 --> 00:14:26.100
for one to write the
specifications in, but, and forgive

228
00:14:26.100 --> 00:14:28.290
me if I, if I
misuse the terms, but it

229
00:14:28.290 --> 00:14:32.910
seems that there is this
underlying syntax, is it correct?

230
00:14:32.910 --> 00:14:36.510
That the syntax is called
is called Gherkin. And there

231
00:14:36.510 --> 00:14:39.300
are different implementations of that
where spec flow is one

232
00:14:39.300 --> 00:14:42.960
for the.net folks. And cucumber
is one for the Ruby

233
00:14:42.960 --> 00:14:45.960
folks, but that this the
syntax, where did that syntax

234
00:14:45.960 --> 00:14:54.200
come from? That same syntax
is an evolution of The

235
00:14:54.200 --> 00:14:57.410
way you write tests in
fitness. But it's also an

236
00:14:57.410 --> 00:15:00.410
evolution of the way, a
lot of people in the

237
00:15:00.410 --> 00:15:05.270
agile community, but writing user
stories on just paper index

238
00:15:05.270 --> 00:15:09.170
cards. So it's taking ideas
from both, you know, taking

239
00:15:09.200 --> 00:15:11.480
ideas from both of these
one, two by one, one

240
00:15:11.480 --> 00:15:14.660
tool, and one way that
people just express themselves and

241
00:15:15.260 --> 00:15:20.450
putting it into a grammar
and, and a tool language,

242
00:15:20.450 --> 00:15:25.370
which is called Gherkin thrift
thing that you know, is

243
00:15:25.640 --> 00:15:28.790
probably one of the most
popular ways of specifying these

244
00:15:28.790 --> 00:15:31.970
things. But it's not necessarily
the only way. And in

245
00:15:31.970 --> 00:15:36.050
terms of other ways to
specify that, for example, there's

246
00:15:36.050 --> 00:15:40.220
a tool called <inaudible>, which
allows you to use specifications,

247
00:15:40.220 --> 00:15:44.930
for example, on freeform HTML.
So you Mark up what

248
00:15:44.930 --> 00:15:48.230
our expected inputs and what
our inputs and expected outputs

249
00:15:48.230 --> 00:15:52.100
in, in free form HTML.
And you don't have to

250
00:15:52.100 --> 00:15:57.200
use any particular syntax. So
language for that, and are

251
00:15:57.230 --> 00:16:02.150
other tools, for example, fitness
that are more table oriented

252
00:16:02.720 --> 00:16:07.250
and what Cunningham even had
an example of a tool

253
00:16:07.250 --> 00:16:11.810
that's based on visual swim
lanes for eclipse, that's also

254
00:16:11.810 --> 00:16:19.460
specifying approval workflows for the
eclipse tool, feature process approval

255
00:16:19.460 --> 00:16:24.590
process, something like that using
visual swim lanes. So it's

256
00:16:24.590 --> 00:16:29.870
not the language itself is,
is quite important, I think,

257
00:16:29.870 --> 00:16:32.090
but it's more important to
fit it to a particular

258
00:16:32.090 --> 00:16:36.370
project. Hi, this is Scott
coming to you from another

259
00:16:36.370 --> 00:16:39.670
place in time. Are you
using agile practices to manage

260
00:16:39.670 --> 00:16:41.920
your software development? There's lots
of tools in the market

261
00:16:41.920 --> 00:16:43.930
that manage the steps of
a project, but most of

262
00:16:43.930 --> 00:16:47.170
them focus on individual roles,
get ready for a solution

263
00:16:47.170 --> 00:16:49.630
that caters for the success
of the whole team. Guys

264
00:16:49.630 --> 00:16:53.470
at Tellerik introduced team pulse.
It's an agile project management

265
00:16:53.470 --> 00:16:57.100
tool. That'll help you gather
ideas, estimate plan, track progress

266
00:16:57.100 --> 00:17:00.880
in a common workspace. Finally,
companies, regardless of their size

267
00:17:00.880 --> 00:17:02.860
can use a lightweight and
convenient tool that makes all

268
00:17:02.860 --> 00:17:06.220
the stakeholders work as a
United team. Even if they're

269
00:17:06.220 --> 00:17:09.580
in different countries by combining
intuitive user interface and the

270
00:17:09.580 --> 00:17:12.370
power server light team poles
removes the roadblocks that you

271
00:17:12.370 --> 00:17:15.700
typically face and applying agile
in an effective manner, no

272
00:17:15.700 --> 00:17:19.120
more lost data, no disparate
systems, no lack of critical

273
00:17:19.120 --> 00:17:23.170
analytics regarding the health and
philosophy project. See if yourself

274
00:17:23.450 --> 00:17:26.110
get a free copy for
five users in one project

275
00:17:26.110 --> 00:17:32.770
at tellerik.com/team pulse. And please
do thank Tellerik for supporting

276
00:17:32.770 --> 00:17:37.540
Hanselman it's on their Facebook
fan page, facebook.com/t L E

277
00:17:37.540 --> 00:17:41.530
R I K Keller. We
do appreciate it. There wouldn't

278
00:17:41.530 --> 00:17:43.540
be a Hansel minutes if
there wasn't, Tellerik helping us.

279
00:17:44.740 --> 00:17:47.680
So as I understand it,
a number a number of

280
00:17:47.680 --> 00:17:51.510
years ago, when, when fit
and fitness started to think

281
00:17:51.510 --> 00:17:54.330
about executing something that was
a little different from code,

282
00:17:54.990 --> 00:17:58.350
the idea of executing user
stories kind of came up,

283
00:17:58.380 --> 00:18:00.030
is that correct? And then
there was a thing called

284
00:18:00.540 --> 00:18:03.840
our SPECT and a story
runner. People wanted to run

285
00:18:03.840 --> 00:18:08.460
stories. So then Dan North
did some work on that

286
00:18:08.490 --> 00:18:11.490
and a lot of different
people were involved. If you

287
00:18:11.490 --> 00:18:13.680
can look up at the
QTC stud info website, and

288
00:18:13.680 --> 00:18:15.660
there's a whole list of
people who kind of had

289
00:18:15.660 --> 00:18:19.560
a number of conversations about
this, this language, this metal

290
00:18:19.560 --> 00:18:24.440
language that started to kind
of happen. And both the

291
00:18:24.600 --> 00:18:30.450
SpecFlow website and the QCs
website have really interesting homepages

292
00:18:30.540 --> 00:18:33.090
and right there on the
homepage. You've got some examples.

293
00:18:33.720 --> 00:18:35.700
So I wanted to talk
a little bit about, about

294
00:18:35.700 --> 00:18:38.850
that because the language is
precise, but at the same

295
00:18:38.850 --> 00:18:42.000
time, it's very flexible. I
see here, just looking at

296
00:18:42.000 --> 00:18:44.970
the very first example in
the cucumber website that says,

297
00:18:44.970 --> 00:18:48.900
describe behavior in plain text,
which is a little bit

298
00:18:48.900 --> 00:18:50.970
of a, of a fib
because you do have a

299
00:18:50.970 --> 00:18:53.700
structure, but then you do
have free form. You can

300
00:18:53.700 --> 00:18:57.480
say, here's a scenario and
you could say, then anything

301
00:18:57.480 --> 00:18:59.160
you want, you'd have the
word scenario. And then you

302
00:18:59.160 --> 00:19:01.140
write whatever you want. Can
you even write it in

303
00:19:01.140 --> 00:19:02.970
any language? Does it have
to be in English after

304
00:19:02.970 --> 00:19:07.130
you say scenario, You can
read it in Chinese or

305
00:19:07.130 --> 00:19:11.570
in Hebrew or in Arabic
Norwegian full to different languages.

306
00:19:11.570 --> 00:19:14.180
You can write it in
40 different languages. So the

307
00:19:14.180 --> 00:19:16.970
general structure is like, I
don't know, I'm putting this

308
00:19:16.970 --> 00:19:18.530
in the context of what
I know. Cause I think

309
00:19:18.530 --> 00:19:21.950
people who are listening are
probably familiar with test driven

310
00:19:21.950 --> 00:19:24.410
development, at least more than
behavior driven. And they think

311
00:19:24.410 --> 00:19:28.700
about things in terms of
a range act assert when

312
00:19:28.700 --> 00:19:32.180
they, when they structure their
unit tests. And when you

313
00:19:32.180 --> 00:19:37.760
are doing your executable specs,
you say given possibly. And,

314
00:19:37.970 --> 00:19:40.910
but it's usually given when
then seems to be the

315
00:19:41.070 --> 00:19:44.780
general structure and those are
the keywords. And then anything

316
00:19:44.780 --> 00:19:48.080
after that is, is prose.
Like, as you said, in

317
00:19:48.080 --> 00:19:51.980
any one of 40 languages.
Yeah, that's right. So the

318
00:19:52.010 --> 00:19:56.360
Gherkin language, it comes in
40 different flavors, you know,

319
00:19:56.360 --> 00:20:01.550
it's translated to 40 natural
languages, English, obviously being the

320
00:20:01.550 --> 00:20:05.660
most common one. So you
have there's, I don't know.

321
00:20:05.690 --> 00:20:07.850
I don't remember how many
key words, but there's essentially

322
00:20:07.850 --> 00:20:14.840
five key words and some
synonyms that's feature scenario. And

323
00:20:14.840 --> 00:20:19.250
then given when then, so
each scenario you can have

324
00:20:19.250 --> 00:20:22.160
as many scenarios as you
want in a feature and

325
00:20:22.190 --> 00:20:26.210
each scenario you can have
as many lines starting with

326
00:20:26.210 --> 00:20:32.510
given when, and then, so
that's the constraints, the language

327
00:20:33.290 --> 00:20:35.990
you have to start align
with one of those five

328
00:20:35.990 --> 00:20:39.440
key words, but then you
can say whatever you want

329
00:20:39.470 --> 00:20:45.020
after that. So you can
say scenario, colon, bad credit

330
00:20:45.020 --> 00:20:49.060
history, and then you can,
the next line you can

331
00:20:49.060 --> 00:20:53.020
say, given I have a
person with bad credit history

332
00:20:53.410 --> 00:20:59.250
when he signs up, then
he's not served. And how

333
00:20:59.250 --> 00:21:01.860
important is that text? Does
that, can that be a,

334
00:21:02.040 --> 00:21:05.250
I mean, I understand that
in my experience, working with

335
00:21:05.250 --> 00:21:07.980
folks in this space, they're
very picky about what, how

336
00:21:07.980 --> 00:21:10.470
the, how that's structured. So
even though it's free form,

337
00:21:11.310 --> 00:21:14.250
the people that I've worked
with have been extremely kind

338
00:21:14.250 --> 00:21:17.520
of uptight, let's say about
that. How important is it?

339
00:21:18.990 --> 00:21:22.410
Well, I mean, so remember
that Gherkin serves two purposes.

340
00:21:22.590 --> 00:21:24.510
One is that it should
be readable by people that

341
00:21:24.510 --> 00:21:27.090
don't know how to program,
but at the same time,

342
00:21:27.090 --> 00:21:30.240
it needs to be executable
by an interpreter, which is

343
00:21:31.020 --> 00:21:34.440
spec flow. If you're using.net
or cucumber, you're using a

344
00:21:34.450 --> 00:21:38.940
Ruby or Java. So there
needs to be some structure

345
00:21:38.940 --> 00:21:40.560
in there, but we try
to make it as little

346
00:21:40.560 --> 00:21:44.430
as possible so that I
wouldn't alienate people who we

347
00:21:44.430 --> 00:21:46.620
don't want people to think
about it as a programming

348
00:21:46.620 --> 00:21:52.820
language. Although technically it is,
but it's like camouflage as

349
00:21:52.830 --> 00:21:56.460
prose. So one of the
things is that now you've

350
00:21:56.460 --> 00:22:00.540
written this, like for example,
I'm given they have $10

351
00:22:00.540 --> 00:22:04.320
in their account. Really what's
important out of that, that

352
00:22:04.320 --> 00:22:07.260
sentence is the $10 because
that's potentially something you could

353
00:22:07.260 --> 00:22:09.720
put into the test. And
so then you're going to

354
00:22:09.720 --> 00:22:13.800
want to extract things out
of that. So perhaps Jonas

355
00:22:13.800 --> 00:22:16.560
can say something about that.
Once you've described that behavior

356
00:22:16.560 --> 00:22:19.920
in the plain text, you
need a bridge between your

357
00:22:19.920 --> 00:22:22.230
tests to, to actually pull
that out. How do you

358
00:22:22.230 --> 00:22:26.250
get that information that, that
might be buried inside of

359
00:22:26.250 --> 00:22:28.890
that sentence, in that prose
and get that into your,

360
00:22:29.880 --> 00:22:31.920
into code. So you can
start moving, moving around with

361
00:22:31.920 --> 00:22:37.050
it. Yes, there has to
be another step that is

362
00:22:37.050 --> 00:22:41.640
usually done by, by the
developer. He binds the executable

363
00:22:41.640 --> 00:22:45.870
specification to the implementation of
the system and these are

364
00:22:45.870 --> 00:22:51.390
called step implementations or bindings.
And in this findings, he

365
00:22:51.390 --> 00:22:56.760
can access the plain text
of the executable specification and

366
00:22:56.760 --> 00:23:01.620
extract the values he needs
basically done with the X.

367
00:23:02.850 --> 00:23:04.980
Yeah. And this is the
part where things fall down,

368
00:23:05.070 --> 00:23:09.870
because I think that the
idea of deriving development with

369
00:23:09.900 --> 00:23:13.990
the business behavior seems really,
really positive. And it's a,

370
00:23:13.990 --> 00:23:15.780
it's a beautiful system. And
a lot of people have

371
00:23:15.780 --> 00:23:18.120
said that they feel very
confident in their systems when

372
00:23:18.120 --> 00:23:21.360
they have a large number
of executable specifications. But then

373
00:23:21.360 --> 00:23:23.370
when I hear that there's
a regular expression involved, it's

374
00:23:23.370 --> 00:23:26.700
just kind of a in,
in, on the internet, we

375
00:23:26.700 --> 00:23:29.220
would say a bit of
a sad trombone, you know,

376
00:23:30.450 --> 00:23:32.340
kind of that that comes
up. Is there any way

377
00:23:32.340 --> 00:23:37.350
to get around that, that
little bit of implementation detail?

378
00:23:38.130 --> 00:23:42.210
Why do we think that's
a trombone Because regular expressions

379
00:23:42.210 --> 00:23:47.510
feel very fragile. Yeah. Well,
So regular expressions, you know,

380
00:23:47.780 --> 00:23:49.880
it's, it's the language of
its own and they, and

381
00:23:49.880 --> 00:23:53.620
they can be used for
many different things. And you,

382
00:23:53.620 --> 00:23:55.910
you know, if you look
at some Perl code or

383
00:23:56.210 --> 00:23:58.820
maybe some Ruby or Python
code very often you'll see

384
00:23:59.150 --> 00:24:07.850
complex regular expressions in there
because, you know, but that

385
00:24:07.850 --> 00:24:10.640
doesn't mean that every regular
expression has to be illegible.

386
00:24:11.000 --> 00:24:16.460
So, you know, not readable.
So in, let's say you're

387
00:24:16.460 --> 00:24:19.940
using a spec flow, you
will have for each step,

388
00:24:21.170 --> 00:24:24.260
you will have just a
C shop method and you

389
00:24:24.260 --> 00:24:28.760
will use an attribute with
a regular expression attached to

390
00:24:28.760 --> 00:24:31.730
it. But that regular expression
is going to look pretty

391
00:24:31.730 --> 00:24:35.720
much exactly the same as
a, as a line in

392
00:24:35.720 --> 00:24:42.800
your executable vacation, just with,
it's actually only if you

393
00:24:42.800 --> 00:24:45.260
want to extract special values
that you have to use

394
00:24:45.260 --> 00:24:50.060
stuff like backslash D to
extract an int or star

395
00:24:50.060 --> 00:24:57.170
to extract a string parameter,
you'll have the same sentence,

396
00:24:59.480 --> 00:25:04.880
sentence. So even somebody, even
somebody who isn't familiar with

397
00:25:04.880 --> 00:25:09.090
regular expressions will pick it
up really real quickly. And

398
00:25:09.090 --> 00:25:14.420
then another nice thing is
that both, both cucumber and

399
00:25:14.420 --> 00:25:17.570
SpecFlow, they will actually create
little snippets for you that

400
00:25:17.720 --> 00:25:21.350
will get you started with
a correct regular expression that

401
00:25:21.350 --> 00:25:23.390
you can later tweak if
you need to, but you

402
00:25:23.390 --> 00:25:25.880
get a lot of help
on the way I'm a

403
00:25:26.540 --> 00:25:29.960
writer. Spectral does create those
snippets as well, right? Yes,

404
00:25:29.990 --> 00:25:33.340
that's true. Yeah. So again,
you know, as I said,

405
00:25:34.090 --> 00:25:37.960
lots of people in particular
developers and I I'm as

406
00:25:37.960 --> 00:25:40.720
guilty of this as anybody
else, because I messed up

407
00:25:40.750 --> 00:25:42.910
massively on my sister projects.
When I tried to do

408
00:25:42.910 --> 00:25:47.080
this focus on a tool,
focus on the fact that

409
00:25:47.080 --> 00:25:49.870
something has reg X, so
something has tables or something

410
00:25:49.870 --> 00:25:53.710
has something else where that's
not where the big value

411
00:25:53.710 --> 00:25:57.330
is. The tool is there
very important lead to, to

412
00:25:57.340 --> 00:26:03.010
automate this, you know, lots
of developers just focused on

413
00:26:03.010 --> 00:26:05.830
a tool and they start
implementing a tool. That's what

414
00:26:05.830 --> 00:26:07.630
they want to do because
that's what people are used

415
00:26:07.630 --> 00:26:09.580
to doing. You know, you
have a problem, you find

416
00:26:09.580 --> 00:26:11.680
a tool to solve it.
You implement the tool and

417
00:26:11.680 --> 00:26:14.550
Hey Presto, where this thing
really doesn't work like that.

418
00:26:14.560 --> 00:26:19.410
And, and the book, you
mentioned, it sort of easily

419
00:26:19.410 --> 00:26:23.980
written, but it's not coming
out yet. Is my research

420
00:26:23.980 --> 00:26:28.360
on, I've interviewed about 50
teams that have got some

421
00:26:28.360 --> 00:26:32.290
really big payoffs from VDD
and acceptance testing and things

422
00:26:32.290 --> 00:26:34.990
like that. And all of
them, most of them said

423
00:26:34.990 --> 00:26:37.240
that in the beginning, they
start implementing a tool and

424
00:26:37.240 --> 00:26:39.400
then they understood that this
is a completely wrong way

425
00:26:39.400 --> 00:26:41.830
to go. And that you
have to go and look

426
00:26:41.830 --> 00:26:44.730
at the communication into team,
look at the dynamics of

427
00:26:44.730 --> 00:26:47.670
the team, look at the
process as a whole, and

428
00:26:47.670 --> 00:26:51.030
then once you've improved it,
then the tool fits in.

429
00:26:51.510 --> 00:26:54.660
So, you know, people who
complain about take X and

430
00:26:54.660 --> 00:27:00.030
people who complain about unreal,
the step definition systems and

431
00:27:00.030 --> 00:27:03.120
things like that, toughen, misuse,
these tools to do technical

432
00:27:03.120 --> 00:27:08.730
testing, unit testing and cucumber
unit testing and fitness, because

433
00:27:08.730 --> 00:27:11.010
that's what developers are used
to do without communicating to

434
00:27:11.010 --> 00:27:17.610
anybody else where if you
do this properly, then through

435
00:27:17.610 --> 00:27:20.670
collaboration, you get to examples
and then automating that shouldn't

436
00:27:20.670 --> 00:27:23.970
be a problem. As I
said, you know, these things

437
00:27:23.970 --> 00:27:28.770
are automatically generated quite often.
And the, the, the at

438
00:27:28.800 --> 00:27:31.830
the entry point to the
glucose can be automatically generated.

439
00:27:32.370 --> 00:27:36.330
And from my experience, none
of the teams that have

440
00:27:36.330 --> 00:27:39.840
actually implemented any of the
tools have problems with Xs.

441
00:27:40.650 --> 00:27:43.230
That's just an issue. That's
a complaint from somebody that

442
00:27:44.130 --> 00:27:47.040
doesn't implement the process properly,
and they're getting problems because

443
00:27:47.040 --> 00:27:50.990
of that. Not because of
exists. I think that's a

444
00:27:50.990 --> 00:27:55.940
great point, GOCO, you know,
like you said, it's, it's

445
00:27:55.940 --> 00:27:59.270
very important to, it's a
good, very good point that

446
00:27:59.830 --> 00:28:02.960
it doesn't, it is the
whole process of writing an

447
00:28:02.960 --> 00:28:06.890
executable specifications. Isn't really about
the tool. You know, some,

448
00:28:06.920 --> 00:28:09.170
some tools happened to be
more popular than others, but

449
00:28:09.170 --> 00:28:11.030
I know a lot of
teams who have just made

450
00:28:11.030 --> 00:28:14.780
their own little tool fits
their purpose perfectly. You know,

451
00:28:14.780 --> 00:28:17.600
some people can use Excel.
It really depends on what

452
00:28:17.600 --> 00:28:20.780
kind of domain you're working
in. And I think where

453
00:28:20.780 --> 00:28:23.090
you, where people who haven't
done this, I'm keen to

454
00:28:23.090 --> 00:28:26.300
try it out. I think
they should actually start by

455
00:28:26.300 --> 00:28:32.060
walking over, you know, creating,
starting the conversation between a

456
00:28:32.060 --> 00:28:36.560
domain expert, a tester and
a developer, and just use

457
00:28:36.560 --> 00:28:39.350
a whiteboard and figure out
how can we, how could

458
00:28:39.350 --> 00:28:44.240
we write down examples for,
for this new feature that

459
00:28:44.240 --> 00:28:47.240
we're about to develop and
do it on the whiteboard.

460
00:28:47.240 --> 00:28:50.390
And then you'll figure out
that in some domains you

461
00:28:50.390 --> 00:28:54.140
will do this with like,
with a couple of tables

462
00:28:54.140 --> 00:28:56.060
in other domains, you will,
maybe you will use the

463
00:28:56.060 --> 00:28:58.820
given when then form, well,
maybe you come up with

464
00:28:58.820 --> 00:29:01.130
your own way of doing
it. And once you figure

465
00:29:01.130 --> 00:29:06.170
out a good way to
describe a scenario or an

466
00:29:06.170 --> 00:29:10.280
example in a concise, non
ambiguous way, then you can

467
00:29:10.280 --> 00:29:15.590
pick a tool. I think
that this was an extremely

468
00:29:15.590 --> 00:29:19.730
good examples. I think that
remembering that it's often programmers

469
00:29:19.730 --> 00:29:22.430
who pick these tools, they,
they, they think that a

470
00:29:22.430 --> 00:29:25.130
tool is going to solve
some problems. So they, they,

471
00:29:25.200 --> 00:29:27.290
they, they, they Google for
the tool. They find the

472
00:29:27.290 --> 00:29:29.030
tool, they download the tool
and then they try to

473
00:29:29.030 --> 00:29:32.240
implement the tool as opposed
to implementing the system and

474
00:29:32.240 --> 00:29:35.840
thinking about why is it
that I am doing this?

475
00:29:35.900 --> 00:29:38.990
And you can get so
focused on the tool that

476
00:29:38.990 --> 00:29:41.710
you even forget why you
tried to implement it in

477
00:29:41.710 --> 00:29:45.160
the first time, the first
place. I think that taking

478
00:29:45.160 --> 00:29:47.470
a tool like cucumber or
SpecFlow or any of the

479
00:29:47.470 --> 00:29:50.980
other tools and trying to
use it to test unit

480
00:29:50.980 --> 00:29:55.390
testing, to test units of,
of, of work would probably

481
00:29:55.390 --> 00:29:58.210
be a really great way
to get extremely frustrated with

482
00:29:58.210 --> 00:30:00.910
the system and just give
up and then declare this

483
00:30:00.910 --> 00:30:03.880
is useless. And then they
would start making declarative statements

484
00:30:03.880 --> 00:30:06.370
like BDD is useless because
I tried, I couldn't do

485
00:30:06.370 --> 00:30:26.470
unit testing and cucumber unit
testing tool testing tool as

486
00:30:26.470 --> 00:30:34.330
a black box. Technically you
can test, just don't do

487
00:30:34.330 --> 00:30:38.860
that testing at 10,000 feet,
John, as if you were

488
00:30:38.860 --> 00:30:42.310
going to have a, a,
a rich system with lots

489
00:30:42.310 --> 00:30:45.040
of, lots of let's say,
you know, end unit tests,

490
00:30:45.430 --> 00:30:48.190
let's say you have several
thousand and unit tests in

491
00:30:48.200 --> 00:30:50.110
a very large system. And
then you're going to introduce

492
00:30:50.110 --> 00:30:53.500
something like this into an
existing system, keeping in mind

493
00:30:53.500 --> 00:30:56.410
that at this point, tests
have driven your development, not

494
00:30:56.410 --> 00:30:59.620
behavior driven development, you know,
is there going to be

495
00:30:59.620 --> 00:31:02.260
like a ratio that you
would have? Is there some

496
00:31:02.260 --> 00:31:06.190
number of unit tests to,
I don't know if you'd

497
00:31:06.190 --> 00:31:12.210
call this integration test or
behave or specifications acceptances, We

498
00:31:12.210 --> 00:31:14.490
would call it the acceptance
test. That's the best term.

499
00:31:14.910 --> 00:31:16.920
Okay. Is there like a,
is there a rule of

500
00:31:16.920 --> 00:31:21.390
thumb that forever? I don't
have any rules of in

501
00:31:21.390 --> 00:31:24.540
terms of numbers. I just,
maybe I wanted to highlight

502
00:31:24.600 --> 00:31:28.140
the kind of workflow that
is used. I think also

503
00:31:28.140 --> 00:31:32.100
with cucumber a lot, that's
this outside in development approach.

504
00:31:32.940 --> 00:31:36.510
If the test you're trying
to take to test driven

505
00:31:36.510 --> 00:31:39.720
to a higher level of
obstruction with acceptance test three

506
00:31:39.720 --> 00:31:43.080
minutes, as you start in
test two, even with the

507
00:31:43.080 --> 00:31:46.080
test and then write the
code onto you, write the

508
00:31:46.080 --> 00:31:48.330
test that is failing, and
then write the code until

509
00:31:48.330 --> 00:31:50.940
the test is screen. You
take that to the next

510
00:31:50.940 --> 00:31:53.520
extraction level, and you start
with an end to end

511
00:31:53.550 --> 00:31:56.760
test with an acceptance test.
And then you go, you

512
00:31:56.760 --> 00:32:00.870
dive into the inner circle
and there you start the

513
00:32:00.870 --> 00:32:04.740
unit tests and unit test
drive, writing your code and

514
00:32:04.740 --> 00:32:08.590
your classes. And some, at
some point, your answer to

515
00:32:08.590 --> 00:32:11.190
answer test is getting green.
And at this point you

516
00:32:11.190 --> 00:32:14.130
have cold enough and you
can start with the new

517
00:32:14.130 --> 00:32:17.340
end to end test. And
that's this outside in approach

518
00:32:17.340 --> 00:32:22.440
that I think is propagated
with, with cucumber and also

519
00:32:22.440 --> 00:32:44.780
with spiteful, It really depends
20, 2080. You know, I'm

520
00:32:44.780 --> 00:32:48.310
going to quote you on
that. I think it could

521
00:32:48.310 --> 00:32:51.040
even be, it could even
be sensible to have a

522
00:32:51.040 --> 00:32:53.740
system that only have acceptance
test. If you are not

523
00:32:53.740 --> 00:32:56.410
going to be test driven.
I mean, that's maybe a

524
00:32:56.410 --> 00:32:59.950
bit erratic, but I also
think it's important to see

525
00:32:59.950 --> 00:33:03.790
that there are the acceptance
tests are mainly concerned with

526
00:33:03.790 --> 00:33:06.430
the external quality of the
system that the system really

527
00:33:06.430 --> 00:33:09.820
does, what it should do.
And tests unit tests at

528
00:33:09.820 --> 00:33:14.710
the, at the really fine
granularity are mainly concerned with

529
00:33:14.920 --> 00:33:17.770
internal quality of the system
that the code has some

530
00:33:17.800 --> 00:33:21.220
good qualities. And you, you,
you, you can assure that

531
00:33:21.220 --> 00:33:25.480
with your unit tests, but
these are more or less

532
00:33:25.480 --> 00:33:28.390
orthogonals who you can, you
can have your own mixture

533
00:33:28.390 --> 00:33:30.820
and you have to define
it for your project, how

534
00:33:30.820 --> 00:33:34.450
it is working on. So
I don't know who exactly

535
00:33:34.450 --> 00:33:36.760
said this. It's not me
because of course it is

536
00:33:36.760 --> 00:33:40.840
in my previous book, but
I, that, there's a very

537
00:33:40.840 --> 00:33:44.770
good quote that says that
unit tests tell you that

538
00:33:45.160 --> 00:33:48.100
you've built the system, right?
And acceptance tests tell you

539
00:33:48.100 --> 00:33:51.490
that you build the right
system. So as, as Donna

540
00:33:51.490 --> 00:33:53.380
said, you know, these two
or these two things are

541
00:33:54.190 --> 00:33:56.800
sort of octagonal and you,
you do need both because

542
00:33:57.190 --> 00:34:02.290
we've all unit tests. You
don't know whether you've, you

543
00:34:02.290 --> 00:34:05.680
know, you've done what your
customers want you to do.

544
00:34:06.160 --> 00:34:09.820
And we, the only acceptance
tests, you know, that you've

545
00:34:09.820 --> 00:34:12.190
done something wrong, but it's
harder to find the problems

546
00:34:12.190 --> 00:34:14.860
because you unit tests, a
finer grain, the unit tests

547
00:34:14.890 --> 00:34:19.510
show you how to pinpoint
technical problems, much easier. So

548
00:34:19.510 --> 00:34:22.630
I think in practice, most
teams that I've interviewed actually

549
00:34:22.630 --> 00:34:26.440
use both and quite a
few teams actually sort of

550
00:34:26.440 --> 00:34:29.860
had to implement TDD on
a unit level to go

551
00:34:29.860 --> 00:34:35.020
one level above and expanded
to a business functionality. So

552
00:34:35.020 --> 00:34:40.300
that's a very common path
to BDD or, or accepted

553
00:34:40.330 --> 00:34:44.410
testing specification. By example, I've
interviewed a couple of teams

554
00:34:44.410 --> 00:34:49.360
that have actually implemented this
song, say legacy systems, where

555
00:34:50.470 --> 00:34:53.410
there were no unit tests
below, but they've started to

556
00:34:53.410 --> 00:35:00.820
implement specification workshops and then
try to implement some automated

557
00:35:00.820 --> 00:35:03.490
tests around that. And they
have no unit tests at

558
00:35:03.490 --> 00:35:07.760
all. They only have acceptance
tests at this point. And

559
00:35:08.080 --> 00:35:11.440
the, the, that, that kind
of thing does work, but

560
00:35:11.440 --> 00:35:15.610
it's harder to pinpoint problems
technically than it is. If

561
00:35:15.610 --> 00:35:18.970
you have unit tests as
well. I have also seen

562
00:35:18.970 --> 00:35:23.530
that last example several times
in my experience, and that

563
00:35:23.530 --> 00:35:27.520
you have legacy systems and
it's not my whole, the

564
00:35:27.520 --> 00:35:33.610
whole development wants to get
to a more automated way

565
00:35:33.610 --> 00:35:37.500
of living. And they start
with, with these acceptance tests,

566
00:35:37.530 --> 00:35:40.890
because There is no way
to, to have unit tests

567
00:35:40.920 --> 00:35:43.590
on, on all the legacy
copays. And then they started

568
00:35:43.590 --> 00:35:47.430
with this outside in approach
with new features they implemented.

569
00:35:47.940 --> 00:35:50.220
Yeah. And I think that's
often a, I think that's

570
00:35:50.220 --> 00:35:55.050
often a lot easier to
set up as well, because

571
00:35:55.110 --> 00:35:57.450
if you, it's easier to,
let's say you have an

572
00:35:57.450 --> 00:36:01.290
old legacy system with a
very, very tightly coupled code,

573
00:36:01.290 --> 00:36:04.380
which is often the case.
It's going to be very

574
00:36:04.380 --> 00:36:07.230
hard to just inject the
unit test in there because

575
00:36:07.320 --> 00:36:10.140
very often you have to
instantiate 50 classes just to

576
00:36:10.140 --> 00:36:14.190
run one test. Whereas I'm
poking the system from the

577
00:36:14.220 --> 00:36:19.320
outside with an acceptance test
is, or often a lot

578
00:36:19.320 --> 00:36:22.980
easier, especially if you're writing
test after the fact. Now,

579
00:36:23.040 --> 00:36:26.670
I think, I think a
good rule of thumb if

580
00:36:26.670 --> 00:36:28.470
you started from scratch and
trying to do things the

581
00:36:28.470 --> 00:36:31.710
right way, the more complex
the business rules are of

582
00:36:31.710 --> 00:36:34.740
your system. The more you
need unit tests, if you

583
00:36:34.740 --> 00:36:38.040
have a very simple application,
let's say like a web

584
00:36:38.040 --> 00:36:42.960
app, maybe, maybe all you
need is a high level

585
00:36:42.960 --> 00:36:46.140
acceptance, you know, to take,
to take it to the

586
00:36:46.140 --> 00:36:50.340
other extreme. If you don't
have all of these educations,

587
00:36:50.340 --> 00:36:52.620
you need to test for
at least not as many

588
00:36:52.620 --> 00:36:56.040
as you would with something
really complex. Does that make

589
00:36:56.040 --> 00:36:58.880
sense? Yeah, I think I
th I think that that's

590
00:36:58.880 --> 00:37:00.500
a very, that's a very
good point. I think that

591
00:37:00.500 --> 00:37:03.980
we're getting, as we're circling
the drain a little bit,

592
00:37:03.980 --> 00:37:07.640
as they say that w
what's what's the term that

593
00:37:07.640 --> 00:37:11.180
they talk about when, when
Michael Angelo is trying to

594
00:37:11.180 --> 00:37:13.880
create something that, that he's
got this rock, and he

595
00:37:13.880 --> 00:37:16.910
knows that the, he knows
that the sculpture is in

596
00:37:16.910 --> 00:37:20.720
there. So he just needs
to remove rock. It feels

597
00:37:20.720 --> 00:37:23.180
the same way with these
kinds of things. Like I

598
00:37:23.180 --> 00:37:26.600
could people continue to, to
search for the answer. But

599
00:37:26.600 --> 00:37:29.030
in fact, the answer is
in, is a negative space.

600
00:37:29.750 --> 00:37:32.030
You know, people can tell
you what something is not

601
00:37:32.090 --> 00:37:33.800
more than they can tell
you what it is, but

602
00:37:33.800 --> 00:37:37.010
ultimately you need to keep,
keep in mind. Why are

603
00:37:37.010 --> 00:37:39.770
we doing this? We are
doing this to solve a

604
00:37:39.770 --> 00:37:43.460
business problem. We're trying to
make an, a good experience

605
00:37:43.460 --> 00:37:51.410
for, for users. And the
tool is secondary. And that,

606
00:37:51.410 --> 00:37:54.350
that sounds like that focus
even for professionals, needs to

607
00:37:55.160 --> 00:37:57.800
a reminder, needs to happen
for, for even professionals. I

608
00:37:57.800 --> 00:38:00.740
suppose that you guys as
pros find yourselves in large

609
00:38:00.740 --> 00:38:02.780
system, just reminding yourselves with
a little bit of a,

610
00:38:02.970 --> 00:38:05.390
of a reset communication reset,
saying, all right, why are

611
00:38:05.390 --> 00:38:08.300
we doing this again? I
think we're misusing our, I

612
00:38:08.300 --> 00:38:11.090
think we're misusing our tests.
Well, we're running out of

613
00:38:11.090 --> 00:38:12.740
time, but I want to
thank everyone. I want to

614
00:38:12.740 --> 00:38:17.930
thank <inaudible> who has joined
us from Chicago, Geico, ASIC,

615
00:38:18.380 --> 00:38:20.660
and also Jonas Bondi. And
we'll go and put up

616
00:38:20.660 --> 00:38:24.620
links to cucumber links, to
gold coast book and links

617
00:38:24.620 --> 00:38:27.410
to spec flow all up
on the site. And then

618
00:38:28.070 --> 00:38:32.510
please join the conversation and
Hansel minutes.com. This has been

619
00:38:32.510 --> 00:38:35.710
another episode of Hanselminutes and
we'll see you next week.

620
00:38:35.740 --> 00:38:39.790
<inaudible>.

