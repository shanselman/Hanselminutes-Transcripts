WEBVTT FILE

1
00:00:09.800 --> 00:00:14.810
From Hanselman it's dot com.
It's Hansel minutes, weekly discussion

2
00:00:14.810 --> 00:00:18.590
with web developer and technologist
Scott Hanselman and hosted by

3
00:00:18.590 --> 00:00:23.570
Carl Franklin. This is Lawrence Ryan announcing
show number four recorded Monday,

4
00:00:23.810 --> 00:00:29.840
January 30th, 2006. Support for Hansel minutes
is provided by automated QA

5
00:00:30.380 --> 00:00:35.330
makers of tests. Complete providing
automated testing of windows.net framework,

6
00:00:35.360 --> 00:00:44.840
Java and web applications online@wwwdotautomatedqa.com.
And by Peter bloom.com start

7
00:00:44.840 --> 00:00:49.610
with better controls finish with
better sites online at www

8
00:00:49.730 --> 00:00:52.400
dot P E T E
R B L U M.

9
00:00:52.670 --> 00:00:57.260
Dot com. Support is also
provided by.net developers journal the

10
00:00:57.260 --> 00:01:03.560
world's leading.net developer magazine online
at www dot <inaudible> dot

11
00:01:03.560 --> 00:01:09.680
com. In this episode, Scott
focuses on continuous integration, highlighting

12
00:01:09.680 --> 00:01:12.470
nearly 20 tools that you
can use today to help

13
00:01:12.500 --> 00:01:20.720
automate the test and build
process. <inaudible>. Hey, this is

14
00:01:20.720 --> 00:01:23.330
Carl Franklin. Hope you're having a
good Wednesday. It's his Hanselman

15
00:01:23.330 --> 00:01:25.940
it's show number four and
I'm here with Scott Hanselman

16
00:01:25.940 --> 00:01:29.810
again. Hi Scott. Hey Carl,
how's it going? Well, I'm

17
00:01:29.810 --> 00:01:32.660
doing okay. How are you
this week? Oh, you know,

18
00:01:32.870 --> 00:01:34.910
I am just get the
grind. It's the daily grind

19
00:01:34.910 --> 00:01:37.910
here at Kerlin corporation. So
I'm sitting here up in

20
00:01:37.910 --> 00:01:40.890
the executive row and everyone's
gone home at Carilion and

21
00:01:41.720 --> 00:01:43.550
just listening to the hum
the hum of the build

22
00:01:43.550 --> 00:01:45.680
servers. So we're doing And
something a little different this

23
00:01:45.680 --> 00:01:48.470
week, right? We're not focusing
on so many different things.

24
00:01:48.700 --> 00:01:50.480
You're going to get in
a little bit in depth

25
00:01:50.570 --> 00:01:54.590
in one particular Technology. Yeah,
there's a something called continuous

26
00:01:54.590 --> 00:01:56.750
integration that we practice here
at Corona and that I'm

27
00:01:56.750 --> 00:01:58.880
a big fan of and
a number of people have

28
00:01:59.240 --> 00:02:01.190
emailed me saying that they
thought it'd be cool if

29
00:02:01.190 --> 00:02:04.460
we did a continuous integration
specific show. And since everyone

30
00:02:04.460 --> 00:02:07.520
knows that I'm tools focused
and I wanted to find

31
00:02:07.520 --> 00:02:09.650
a balance that was somewhere
between rattling off a bunch

32
00:02:09.650 --> 00:02:12.230
of different tools and really
putting it into a, a

33
00:02:12.230 --> 00:02:14.720
larger story arc and continuous
integration is one of those

34
00:02:14.720 --> 00:02:17.600
things that you put a
bunch of tools together to

35
00:02:17.630 --> 00:02:21.500
make something really amazing happen
within your organization. Okay. Before

36
00:02:21.500 --> 00:02:23.060
we do that though, we
have some other things you

37
00:02:23.060 --> 00:02:27.170
want to talk about in
starting with reveal. Yeah. So

38
00:02:27.330 --> 00:02:29.540
yeah, before we do continuous
integration, a couple of fun

39
00:02:29.540 --> 00:02:32.480
things reveal being the first,
this is just a really

40
00:02:32.960 --> 00:02:36.290
bizarre, but cool piece of
eye candy for Firefox. This

41
00:02:36.290 --> 00:02:39.530
is a basically like expos
a if you're familiar with

42
00:02:39.530 --> 00:02:43.580
expos, when you push F
nine on a Macintosh, the

43
00:02:43.580 --> 00:02:47.000
windows all shrink down to
tiny little thumbnails, this was

44
00:02:47.000 --> 00:02:51.170
a tiny little thumbnail expos,
a clone for Firefox. So,

45
00:02:51.470 --> 00:02:54.470
you know, Firefox is known
for its tabbed browsing. And

46
00:02:54.470 --> 00:02:58.190
this makes little thumbnails of
all of the different sites

47
00:02:58.190 --> 00:03:01.270
that you're currently and all
of your different tabs float

48
00:03:01.270 --> 00:03:03.640
over the top of your
current site. So, you know,

49
00:03:03.670 --> 00:03:09.340
personally, like right now I've
got 14 tabs and Firefox

50
00:03:09.760 --> 00:03:11.650
and I can kind of
figure out which one is

51
00:03:11.650 --> 00:03:14.890
which, but with reveal I
can hit <inaudible> and it'll

52
00:03:14.890 --> 00:03:19.300
bring up a whole screen
full of thumbnails of the

53
00:03:19.300 --> 00:03:21.490
actual pages of that I'm
actually looking at. So then

54
00:03:21.490 --> 00:03:23.320
I can click on them
and go there. It's kind

55
00:03:23.320 --> 00:03:26.740
of cool. It's a shrink
stir.com/b M C. I, I

56
00:03:26.740 --> 00:03:29.220
know That it requires the
latest version of Firefox it

57
00:03:29.280 --> 00:03:31.440
isn't going to install in
mine. I just tried it.

58
00:03:32.130 --> 00:03:34.410
Yeah. Firefox one five is
pretty much the one that

59
00:03:34.410 --> 00:03:36.630
folks are moving towards right
now. This was done as

60
00:03:36.630 --> 00:03:39.900
a piece of eye candy
for a contest for making

61
00:03:39.900 --> 00:03:44.460
extensions in Firefox one five.
Great. Yeah. The other thing

62
00:03:44.460 --> 00:03:48.990
is that the inimitable Clemens
Vassar's who has recently, of

63
00:03:48.990 --> 00:03:51.930
course, everyone knows, moved to
Redmond and is going to

64
00:03:51.930 --> 00:03:55.800
work for Microsoft is doing
some pretty crazy stuff. You

65
00:03:55.800 --> 00:03:58.680
know, he always is trying
to make Indigo dance and

66
00:03:59.100 --> 00:04:01.560
he's concerned he's not going
to be able to watch

67
00:04:01.620 --> 00:04:05.070
German television when he's in
Redmond. So he has figured

68
00:04:05.070 --> 00:04:09.120
out a way to basically
take a machine running beyond

69
00:04:09.120 --> 00:04:12.870
TV, beyond TV, as an
inexpensive media center replacement. If

70
00:04:12.870 --> 00:04:16.410
you've got an old hodgepodge
card or any kind of

71
00:04:16.410 --> 00:04:19.440
a PCI TV card, you
can slap this into a

72
00:04:19.440 --> 00:04:22.770
machine, spend 50 bucks and
get beyond TV from SnapStream

73
00:04:23.340 --> 00:04:25.200
running on your system and
you can watch TV. He's

74
00:04:25.200 --> 00:04:26.310
going to take a machine.
He's going to put it

75
00:04:26.310 --> 00:04:29.760
in his dad's closet. And
he's going to run the

76
00:04:29.760 --> 00:04:34.980
Indigo server stuff on that
machine. And basically remote using

77
00:04:34.980 --> 00:04:41.190
windows, media player, and entire
windows media like Ajax experience

78
00:04:41.250 --> 00:04:44.640
all the way to his
house in Seattle. So he'll

79
00:04:44.640 --> 00:04:47.250
be sitting there watching, you
know, 35 channels of German

80
00:04:47.250 --> 00:04:49.440
TV doing his own thing,
and he's gonna release the

81
00:04:49.440 --> 00:04:52.530
code to that to the
world. Now this is a

82
00:04:53.010 --> 00:04:55.650
very much a demo and
it was written for Clemens

83
00:04:55.650 --> 00:04:58.320
by Clemens. So the audience
is the set of all

84
00:04:58.320 --> 00:05:02.250
people who are Clemens, but
reading Clemens code as someone

85
00:05:02.250 --> 00:05:04.560
who's reading, working on DAS
blog, which is a inherited

86
00:05:04.560 --> 00:05:08.490
from Clemens is always a
treat. He's. You always learn

87
00:05:08.490 --> 00:05:10.380
something when you read his
code and you can check

88
00:05:10.380 --> 00:05:14.310
that stuff out at shrinks.com/b
M for Now, the streaming

89
00:05:14.310 --> 00:05:17.100
stuff is just all in
media player and all that.

90
00:05:17.100 --> 00:05:19.380
But what he's done is
added to the control layer

91
00:05:19.440 --> 00:05:22.680
is that what basically this
is On TV has a

92
00:05:22.680 --> 00:05:25.710
server component written in asp.net
and a series of comm

93
00:05:25.710 --> 00:05:28.710
components that you can use
to make the instance of

94
00:05:28.710 --> 00:05:31.680
beyond TV kind of dance.
And what he's done is

95
00:05:32.040 --> 00:05:35.670
he has re remotely controlling
the instance of beyond TV.

96
00:05:35.670 --> 00:05:38.430
So it's basically using their
abstraction layer on the hardware.

97
00:05:39.030 --> 00:05:42.600
Yeah. And then basically creating
Indigo end points to make

98
00:05:42.600 --> 00:05:45.930
that whole interface appear within
media player. Very nice. The

99
00:05:45.930 --> 00:05:47.790
thing that's most significant about
that is that you don't

100
00:05:47.790 --> 00:05:51.330
need client software to make
this work. This is all

101
00:05:51.330 --> 00:05:55.320
done through media player. So
there's no zero install. Nice.

102
00:05:55.710 --> 00:05:57.740
Yeah. It's pretty amazing stuff.
All right. So let's get

103
00:05:57.740 --> 00:06:01.370
into A continuous integration. Once
you start by telling us

104
00:06:01.370 --> 00:06:06.160
what this is. So continuous
integration is a concept that

105
00:06:06.160 --> 00:06:09.310
was came from a paper
that Martin Fowler wrote along

106
00:06:09.310 --> 00:06:12.430
with a guy named Matthew
Famo from ThoughtWorks Martin Fowler

107
00:06:12.430 --> 00:06:17.260
is the chief scientist at
ThoughtWorks and Martin Fowler uses

108
00:06:17.260 --> 00:06:22.000
the term continuous integration within
the larger extreme programming or

109
00:06:22.000 --> 00:06:27.970
XP series of practices. And
continuous integration is something that's

110
00:06:27.970 --> 00:06:30.130
been around for a long
time, but people really never

111
00:06:30.400 --> 00:06:34.780
put a name on it.
It is the automation of

112
00:06:34.780 --> 00:06:39.160
a daily build, the formalization
of that process, keeping a

113
00:06:39.160 --> 00:06:42.100
single place where all source
code lives so that everyone

114
00:06:42.100 --> 00:06:44.140
can always go to the
exact same place to get

115
00:06:44.140 --> 00:06:47.200
the current source for the
current and any previous version,

116
00:06:47.590 --> 00:06:50.920
it's automating the build, but
it's also automating the testing

117
00:06:51.250 --> 00:06:52.990
so that you can run
the tests on the entire

118
00:06:52.990 --> 00:06:56.410
suite at any time. Wow.
And then an executable would

119
00:06:56.410 --> 00:06:58.840
pop out at the end.
So the ideal continuous integration

120
00:06:58.840 --> 00:07:01.360
environment, in my opinion, and
in many people's opinion would

121
00:07:01.360 --> 00:07:05.290
be a developer say at
Kirlian, for example, sits down.

122
00:07:05.800 --> 00:07:08.170
He checks out his code
from incu or in our

123
00:07:08.170 --> 00:07:09.910
case, we use CVS, but
this could be done at

124
00:07:09.910 --> 00:07:12.760
any source code system checks
out as code. It goes

125
00:07:12.760 --> 00:07:15.700
out to the command line
and he types build. And

126
00:07:15.700 --> 00:07:18.610
he gets a complete bill
that is totally tested on

127
00:07:18.610 --> 00:07:21.220
the spot. And if he
says something like build space,

128
00:07:21.220 --> 00:07:24.190
install, it'll actually pop out
an MSI installer and he's

129
00:07:24.190 --> 00:07:27.040
completely set up. I can
do this in a repeatable

130
00:07:27.040 --> 00:07:30.550
fashion on any machine. He
can make changes to the

131
00:07:30.550 --> 00:07:34.210
code, check it in. And
they build server dedicated to

132
00:07:34.210 --> 00:07:38.560
this task would automatically run
the build upon his check-in.

133
00:07:38.980 --> 00:07:41.110
Now there's some, there's some
arguments that you do these

134
00:07:41.110 --> 00:07:44.020
things on a schedule, or
you do it on a

135
00:07:44.020 --> 00:07:46.180
checkin for us at Kirlian.
We kind of do a

136
00:07:46.600 --> 00:07:51.880
combination every single time someone
checks in a server on

137
00:07:51.880 --> 00:07:54.460
the other end, starts watching
and says, all right, I'm

138
00:07:54.460 --> 00:07:56.890
going to kick off a,
build someone, just check something.

139
00:07:56.890 --> 00:07:58.270
I'm going to kick off
a bill, but I'll wait

140
00:07:58.270 --> 00:08:01.690
10 minutes just in case
there's other things coming. Cause

141
00:08:01.690 --> 00:08:03.130
you know, when you do
a check in, you might

142
00:08:03.130 --> 00:08:04.690
have a couple of things
batched up. You do a

143
00:08:04.690 --> 00:08:06.550
little check in, right? So
it's not going to kick

144
00:08:06.550 --> 00:08:09.940
off a build every single
check-in. But once a batch

145
00:08:09.940 --> 00:08:12.550
of things has been checked
in and nothing's happened for

146
00:08:12.550 --> 00:08:15.670
say 10 minutes, it says,
all right, something dramatic has

147
00:08:15.670 --> 00:08:17.800
happened. I'm going to run
a build. I want to

148
00:08:17.800 --> 00:08:20.440
test the build. I'll build
an install and I'll send

149
00:08:20.440 --> 00:08:23.080
a report to the entire
team. How long typically does

150
00:08:23.080 --> 00:08:25.960
that process take for you
guys For us using a

151
00:08:25.960 --> 00:08:28.210
big project? We've got one
that takes as much as

152
00:08:28.210 --> 00:08:30.820
an hour, but for a
smaller project, it can take

153
00:08:30.820 --> 00:08:33.280
between 10 and 20 minutes.
And is it easy to

154
00:08:33.280 --> 00:08:36.520
interrupt? Like let's say you
actually did want to add

155
00:08:36.520 --> 00:08:38.140
something else and you knew
that it was going to

156
00:08:38.140 --> 00:08:40.750
break. So if you, yeah,
that's a good point. So

157
00:08:40.750 --> 00:08:42.790
if you check something in
and you knew that it

158
00:08:42.790 --> 00:08:45.130
would break the build, if
you didn't check it in

159
00:08:45.130 --> 00:08:47.860
within that first 10 minute
window, you're you're, you're out

160
00:08:47.860 --> 00:08:50.470
of luck, you'll get a
broken build, but the build

161
00:08:50.470 --> 00:08:53.080
would be fixed upon your
immediate next check-in. So we

162
00:08:53.080 --> 00:08:56.850
have literally dozens of ch
of builds a interesting, so

163
00:08:56.880 --> 00:08:59.370
there's a number of tools
that you can get the

164
00:08:59.370 --> 00:09:03.210
most well known is one
called cruise control. It's cruise

165
00:09:03.210 --> 00:09:09.630
control.sourceforge.net. There's also some comp
competitors, a Draco Draco net,

166
00:09:09.630 --> 00:09:14.520
dr. ACO, net.sourceforge.net and hippo,
which is another old one

167
00:09:14.520 --> 00:09:18.420
that hasn't changed very recently,
hippo net.sourceforge.net. But cruise control

168
00:09:18.420 --> 00:09:21.270
is largely thought of as
being the one that is

169
00:09:21.360 --> 00:09:24.180
the most mature. It's the
one that is managed by

170
00:09:24.180 --> 00:09:28.080
the ThoughtWorks guys. And this
is an automated build solution

171
00:09:28.440 --> 00:09:32.430
and a server for.net written
and.net. And the final 1.0

172
00:09:32.430 --> 00:09:35.430
release came out last November,
although we'd been using it

173
00:09:35.430 --> 00:09:38.640
since version 0.7, very cool
cruise control runs as a

174
00:09:38.640 --> 00:09:41.310
windows service. You can also
run it from the command

175
00:09:41.310 --> 00:09:45.270
line and it will watch
your source control. It'll watch

176
00:09:45.270 --> 00:09:48.030
your source control and check
to see if anything's updated.

177
00:09:48.030 --> 00:09:50.860
And it works with virtually
any source control, CVS source,

178
00:09:50.870 --> 00:09:54.780
safe per forest source gear,
PVCs star team, any source

179
00:09:54.780 --> 00:09:57.300
control that's out there that's
worth its salt will, will

180
00:09:57.300 --> 00:10:00.030
work just great. It will
watch that. And when it

181
00:10:00.030 --> 00:10:03.930
detects that a change has
occurred, then it will kick

182
00:10:03.930 --> 00:10:07.530
off the build. Typically these
builds are kicked off using

183
00:10:07.590 --> 00:10:11.730
something like Nat. If you've
heard, you've heard of net.net

184
00:10:11.730 --> 00:10:14.940
part of ad. Exactly Nat
is the port of ant,

185
00:10:14.940 --> 00:10:19.080
which is basically make files
with angle brackets. It's basically

186
00:10:19.080 --> 00:10:24.720
all is you can get
that@nantdotsourceforge.net, and Nant is a

187
00:10:24.720 --> 00:10:27.000
similar to ms build. And
there are already already people

188
00:10:27.000 --> 00:10:28.650
on the net who are
using cruise control with ms.

189
00:10:28.650 --> 00:10:31.590
Build. So, you know, at
its simplest, you could certainly

190
00:10:31.620 --> 00:10:34.560
kick off a batch file,
but for the most part,

191
00:10:35.010 --> 00:10:39.330
cruise control and Nat go
hand in hand, the, the

192
00:10:39.390 --> 00:10:41.820
idea is that you should
be able to always check

193
00:10:41.820 --> 00:10:44.790
your source out, go out
to the command line and

194
00:10:44.790 --> 00:10:48.270
type build, or go or
whatever, and get a built.

195
00:10:48.420 --> 00:10:51.270
It needs to be that
simple. So when you are

196
00:10:51.270 --> 00:10:54.210
doing, when you're building these
net files, you typically build

197
00:10:54.210 --> 00:10:58.050
targets within them. So you'll
say build all build test,

198
00:10:58.200 --> 00:11:02.430
build install so that people
can hit these different targets,

199
00:11:02.430 --> 00:11:05.280
build debug bill release. These
are all targets within the

200
00:11:05.280 --> 00:11:09.210
Nant file. This, this, this
XML based file. And these,

201
00:11:09.390 --> 00:11:13.500
these tasks within the net
file can be written by

202
00:11:13.500 --> 00:11:15.840
you or picked up from
other places. So there's a

203
00:11:15.840 --> 00:11:19.530
task for getting sourced from
source control. There might be

204
00:11:19.530 --> 00:11:22.020
a task for calling a
web service or looking in

205
00:11:22.020 --> 00:11:24.870
the registry. Each of these
tasks is associated with a

206
00:11:24.870 --> 00:11:28.560
specific XML element within that
net file. Wow, that's great.

207
00:11:29.010 --> 00:11:30.840
How long have you guys
been using this? We've been

208
00:11:30.840 --> 00:11:32.790
doing this for probably three
and a half, four years.

209
00:11:33.120 --> 00:11:34.980
This was one of the
first things that I wanted

210
00:11:34.980 --> 00:11:37.620
to make happen when I
got here to Karelian we've

211
00:11:37.620 --> 00:11:41.040
also got a number of
XP pundits. Like we had

212
00:11:41.250 --> 00:11:45.150
Wayne Allen, who's an ex an
extreme programming expert. We had

213
00:11:45.150 --> 00:11:48.120
a guy named Jim little
now Jim shore, who worked

214
00:11:48.120 --> 00:11:51.300
here at Kirlian, who now
works elsewhere, focusing entirely on

215
00:11:51.300 --> 00:11:54.700
extreme programming. So we really
had a confluence where all

216
00:11:54.700 --> 00:11:58.360
these people who were into
this style of development came

217
00:11:58.360 --> 00:12:02.320
together really quickly. And then
Patrick Caldwell bought a thing called

218
00:12:02.320 --> 00:12:05.110
an ambient orb. This is
like a, basically a big

219
00:12:05.140 --> 00:12:09.760
crystal ball that would glow
green or red, depending on

220
00:12:09.760 --> 00:12:12.430
the bill, the health of
the bill, God other people

221
00:12:12.430 --> 00:12:16.600
online have put together, you
know, Budweiser, neon signs that

222
00:12:16.600 --> 00:12:19.000
flash, if the build is
broken, the idea of being

223
00:12:19.000 --> 00:12:23.800
that collective code ownership happens
when you have an automated

224
00:12:23.800 --> 00:12:26.260
build, if you schedule a
build, you don't know how

225
00:12:26.260 --> 00:12:28.120
things are doing. You don't
know if, if you're, if

226
00:12:28.120 --> 00:12:30.520
you're healthy, but if you
can look up and see

227
00:12:30.520 --> 00:12:34.150
a stop light that says
red, green, yellow, you know,

228
00:12:34.240 --> 00:12:37.060
that things are good. That's
very cool. I sounded like

229
00:12:37.060 --> 00:12:40.240
Christopher walk in there for
a second. You'll know that

230
00:12:40.270 --> 00:12:43.270
the build is healthy. So
where does FX cop fit

231
00:12:43.270 --> 00:12:45.460
into the puzzle? So this
is the thing that's so

232
00:12:45.460 --> 00:12:48.130
amazing about continuous integration and
its simplest. It is simply

233
00:12:48.370 --> 00:12:50.860
using net and then unit
to build and test your

234
00:12:50.860 --> 00:12:53.380
stuff. But what are other
things you could do to

235
00:12:53.380 --> 00:12:56.560
really improve the quality of
your software? Yeah. FX cop

236
00:12:56.590 --> 00:12:58.450
is a rules engine that
you can get it shrinks

237
00:12:58.450 --> 00:13:02.500
to.com/b M B. This is
a tool that Microsoft released

238
00:13:02.500 --> 00:13:07.630
that has rules like properties
should have camel casing or

239
00:13:07.970 --> 00:13:10.840
make sure that public interfaces
have words that are spelled

240
00:13:10.840 --> 00:13:13.090
correctly. I mean, all the
kinds of things that use

241
00:13:13.360 --> 00:13:15.460
that are really go on
said that you say should

242
00:13:15.460 --> 00:13:18.190
happen. You know, don't put
misspelled words in public properties

243
00:13:18.370 --> 00:13:21.550
or anything for that matter,
or make sure that when

244
00:13:21.550 --> 00:13:24.910
you're doing a calm integration,
you have calm, visible equals

245
00:13:24.910 --> 00:13:26.740
true or false. I mean,
all of these litany of

246
00:13:26.740 --> 00:13:30.070
rules that the guys that
made the Microsoft base class

247
00:13:30.100 --> 00:13:34.750
library, the.net base class library
followed, you get these rules

248
00:13:34.750 --> 00:13:36.970
as well, and then you
can write them yourself. So

249
00:13:37.060 --> 00:13:40.510
after you build, after you
test ethics, cop can be

250
00:13:40.510 --> 00:13:42.700
run at the command line
and generate a report that

251
00:13:42.700 --> 00:13:46.590
tells you about all these
different things about your, your

252
00:13:46.600 --> 00:13:48.910
source code and with FX
cop, it's all done via

253
00:13:48.910 --> 00:13:52.540
reflection and we've added rules.
Plugable DLLs. You can write

254
00:13:52.540 --> 00:13:56.290
yourself to check for specific
things that you want to

255
00:13:56.290 --> 00:14:00.550
cover within your particular project
rules about how property should

256
00:14:00.550 --> 00:14:02.980
be named, how fields should
be done, how inheritance should

257
00:14:02.980 --> 00:14:06.220
work. It's totally up to
you. What's great about this

258
00:14:06.220 --> 00:14:10.000
is that the XML that
comes out the XML report

259
00:14:10.000 --> 00:14:11.980
that comes out of Nat,
the XML report that comes

260
00:14:11.980 --> 00:14:13.720
out of an unit in
the XML report that comes

261
00:14:13.720 --> 00:14:17.740
out of ethics cop are
all brought together automatically by

262
00:14:17.740 --> 00:14:21.760
the VCC net, the cruise
control net it's colloquially called

263
00:14:21.760 --> 00:14:25.330
CC net as a what's
called a publisher. So you

264
00:14:25.330 --> 00:14:27.550
go into a file called
CC net config, and you

265
00:14:27.550 --> 00:14:29.560
can set up multiple publishers
saying, well, I've got some

266
00:14:29.560 --> 00:14:31.870
XML coming from here and
some XML coming from here

267
00:14:32.260 --> 00:14:34.990
and I want to use
these style sheets, these XSL

268
00:14:34.990 --> 00:14:37.900
style sheets, a lot of
which come with cruise control

269
00:14:38.530 --> 00:14:41.560
to build up at giant
report at the end. So

270
00:14:41.560 --> 00:14:43.300
I'm going to take that
XML that comes out of

271
00:14:43.300 --> 00:14:46.090
each of these different tools
and turn it into a

272
00:14:46.090 --> 00:14:49.000
really rich dynamic report that
gets sent out to the

273
00:14:49.000 --> 00:14:51.200
entire team. And they get
told how things are doing,

274
00:14:51.590 --> 00:14:52.820
and that's what you need
at the end of the

275
00:14:52.820 --> 00:14:56.840
day. Have you seen a
Adam Cogans code auditor? Yeah.

276
00:14:56.930 --> 00:14:59.660
That we talked about on
dotnet rocks last week. Absolutely.

277
00:14:59.660 --> 00:15:02.840
There's lots of great tools
like Adam's auditor, FX cops.

278
00:15:02.840 --> 00:15:06.230
Similar Adams works on code
ethics, cop works on reflection.

279
00:15:06.590 --> 00:15:08.420
These are the kinds of
things that you might want

280
00:15:08.420 --> 00:15:09.830
to build in. I mean,
it would be a really

281
00:15:09.830 --> 00:15:13.250
great thing if Adam created
XML as an output of

282
00:15:13.250 --> 00:15:15.620
his code editor, I don't
know if he does that

283
00:15:15.620 --> 00:15:17.900
could then be read in
and included into a report

284
00:15:17.900 --> 00:15:20.510
and CC net would automatically
be able to handle that.

285
00:15:20.900 --> 00:15:22.460
And by the way, code
auditor is a shrink to

286
00:15:22.470 --> 00:15:26.180
that com slash BMD. Cool.
So if I can add

287
00:15:26.180 --> 00:15:30.110
end unit doing automated testing
of course system, and I

288
00:15:30.110 --> 00:15:33.020
can do FX cop, what
are some other things that

289
00:15:33.020 --> 00:15:35.150
I can do? Well, and
unit of course is a

290
00:15:35.160 --> 00:15:38.360
testing framework and there's also
things like M B unit.

291
00:15:38.570 --> 00:15:43.130
And what's the tool from
Sean McCormack. Now the automated

292
00:15:43.130 --> 00:15:46.700
builds aren't gonna test automatically
unless you have test cases

293
00:15:46.700 --> 00:15:48.140
in that, right. So you
have to use some sort

294
00:15:48.140 --> 00:15:50.750
of test. Yeah. Of course.
Generation tool to begin with.

295
00:15:50.840 --> 00:15:53.300
Well, not necessarily a test
generation tool, but yeah. So

296
00:15:53.300 --> 00:15:55.880
some kind of testing methodology,
it would be silly to

297
00:15:55.880 --> 00:15:58.400
have things build and not
know if they're healthy. Sure.

298
00:15:58.520 --> 00:15:59.960
So one of the things
that happens is when you're

299
00:15:59.960 --> 00:16:02.420
having a build happening dozen
times a day, you get

300
00:16:02.420 --> 00:16:05.060
this feedback of whether someone
broke the build, you start

301
00:16:05.060 --> 00:16:08.780
to crave this feedback of
is this a healthy product

302
00:16:08.780 --> 00:16:10.520
that we've made? We know
it keeps building. We can

303
00:16:10.520 --> 00:16:13.790
look and see I'll look
for example, the Voyager SDK,

304
00:16:13.790 --> 00:16:16.850
a project that I work
on has a 75% success

305
00:16:16.850 --> 00:16:20.540
rating on builds. That means
it builds successfully, right? Three

306
00:16:20.540 --> 00:16:23.750
out of four times, except
if a test fails, let's

307
00:16:23.750 --> 00:16:26.840
say it compiles, but the
test fails. We count that

308
00:16:26.840 --> 00:16:29.420
as a failed build, that's
an fundamental part of continuous

309
00:16:29.420 --> 00:16:34.010
integration because buildings easy building
a testable integrated application and

310
00:16:34.010 --> 00:16:37.070
popping an install installer out
the end is, is more

311
00:16:37.070 --> 00:16:40.310
difficult, right? We can also
set up where F certain

312
00:16:40.310 --> 00:16:43.370
ethics cop rules that we
feel strongly about. We'll break

313
00:16:43.370 --> 00:16:57.920
the build. Hey, this is
Carl Franklin checkout test complete from

314
00:16:57.920 --> 00:17:04.310
automated qa.com. Test complete does
automated testing of windows.net framework,

315
00:17:04.310 --> 00:17:09.500
Java and web applications. It's
one jolt awards, two years

316
00:17:09.500 --> 00:17:13.340
in a row from software
development magazine, even though it's

317
00:17:13.340 --> 00:17:17.450
been voted best testing tool
test complete is really affordable.

318
00:17:18.020 --> 00:17:20.000
It costs just a fraction
of what you'd have to

319
00:17:20.000 --> 00:17:24.020
pay for its nearest big
name. Competitor test complete is

320
00:17:24.020 --> 00:17:29.960
standards based and extensible with
a well-documented plugin API, and

321
00:17:29.960 --> 00:17:34.760
the test scripts use familiar
languages, VB script, JavaScript C

322
00:17:34.760 --> 00:17:38.600
sharp script C plus plus
script, and even Delphi scripts.

323
00:17:39.440 --> 00:17:41.900
You choose the language that
works best for your team.

324
00:17:42.950 --> 00:17:45.380
You don't have to buy
a dozen different modules to

325
00:17:45.380 --> 00:17:49.860
test all your applications. Test
complete is a full development

326
00:17:49.860 --> 00:17:54.150
environment. It has features like
an easy to use windows

327
00:17:54.150 --> 00:17:58.110
test recorder that auto creates
test scripts and an advanced

328
00:17:58.110 --> 00:18:02.970
script editor with features like
syntax highlighting code completion, and

329
00:18:02.970 --> 00:18:08.940
context sensitive help. It has
test execute a lightweight utility

330
00:18:08.940 --> 00:18:13.410
for running distributed tests and
test recorder, a library for

331
00:18:13.410 --> 00:18:17.070
building tests into your application.
And if you plan on

332
00:18:17.070 --> 00:18:22.380
using visual studio, 2005 team
system complete integrates nicely with

333
00:18:22.380 --> 00:18:26.430
it and adds a new
test, complete test type. So

334
00:18:26.760 --> 00:18:30.420
do yourself a favor in
download a free evaluation copy

335
00:18:30.780 --> 00:18:44.450
of test complete@automatedqa.com. How often
Scott has it, has the

336
00:18:44.480 --> 00:18:48.920
process turned out a quote
unquote, okay. Build. And then

337
00:18:48.920 --> 00:18:52.520
it turns out you find
bugs anyway, You know, probably

338
00:18:52.670 --> 00:18:55.190
probably half the time. I
mean, you still need good

339
00:18:55.190 --> 00:18:57.650
QA people, right? You got
some great ones here that

340
00:18:57.650 --> 00:18:59.450
will. And I wanted to
make is that, you know,

341
00:18:59.450 --> 00:19:01.700
all this testing framework and
stuff, doesn't take the place

342
00:19:01.700 --> 00:19:05.330
of somebody actually sitting down
and going to test, you

343
00:19:05.330 --> 00:19:08.330
know, test it manually. Exactly.
And that QA person more

344
00:19:08.330 --> 00:19:11.990
and more it Karelian is
pushing that test data back

345
00:19:11.990 --> 00:19:16.070
into the product. Cool. Ideally,
we would actually build the

346
00:19:16.070 --> 00:19:18.680
entire thing, do an end
unit test, which is kind

347
00:19:18.680 --> 00:19:21.290
of a functional test. Then
we'd actually do a silent

348
00:19:21.290 --> 00:19:25.070
install of the product as
part of the build, and

349
00:19:25.070 --> 00:19:27.020
then do an integration test,
do an end to end

350
00:19:27.020 --> 00:19:29.810
integration test and more and
more we're doing that. And

351
00:19:30.020 --> 00:19:32.660
well end unit does easy
functional testing. There were tools

352
00:19:32.660 --> 00:19:36.410
like end unit ASP and
end unit forms. You can

353
00:19:36.410 --> 00:19:39.740
get those at end unit
forms, dot sourceforge.net and unit

354
00:19:39.770 --> 00:19:43.880
asp.sourceforge.net. These are extensions to
any unit that let you

355
00:19:44.270 --> 00:19:47.160
test when forms actually like
push buttons and poke around

356
00:19:47.190 --> 00:19:51.530
on a wind farm or
test asp.net forms at Carilion.

357
00:19:51.530 --> 00:19:54.530
We've been using a tool
called water w a T

358
00:19:54.530 --> 00:19:58.940
I R web application testing
in Ruby. And I've got

359
00:19:58.940 --> 00:20:03.590
a little article up on
my blog@shrinks.com slash <inaudible>. And

360
00:20:03.830 --> 00:20:05.390
if you go up on
my blog and search for

361
00:20:05.390 --> 00:20:08.780
water, w a T I
R you'll find not only

362
00:20:08.780 --> 00:20:11.390
stuff that I've done with
water, but stuff that one

363
00:20:11.390 --> 00:20:14.090
of our guys at Kirlian
named Travis Illig has done

364
00:20:14.090 --> 00:20:17.150
to extend water. We've got
another guy named Dustin Woodhouse,

365
00:20:17.150 --> 00:20:21.380
there's extending water and, and
unit such that this Ruby

366
00:20:21.380 --> 00:20:25.530
based scripting language will actually
create end unit tests and

367
00:20:25.530 --> 00:20:27.980
end unit results. Now, a
lot of people might not

368
00:20:27.980 --> 00:20:32.330
know what Ruby is. So
Ruby is a scripting language

369
00:20:33.200 --> 00:20:36.380
that a lot of people
find very beautiful in its

370
00:20:36.380 --> 00:20:39.710
style feels kind of like
Python. It feels kinda like

371
00:20:39.740 --> 00:20:42.710
scheme. It feels kind of
like C plus plus it's

372
00:20:42.710 --> 00:20:45.140
just one of those languages
that feels nice in your

373
00:20:45.140 --> 00:20:47.830
mouth and feels nice. There's
actually fellow who did a,

374
00:20:48.270 --> 00:20:51.400
a presentation where he had
no bullet points in his

375
00:20:51.400 --> 00:20:54.250
presentation. He had only Ruby
code because he felt that

376
00:20:54.250 --> 00:20:58.240
the beauty of the code
itself spoke enough to, you

377
00:20:58.240 --> 00:21:00.640
know, it's that, it's that
kind of code a gentleman

378
00:21:00.640 --> 00:21:05.680
named johnLamb@unknown.com believes very strongly
in the beauty of Ruby.

379
00:21:05.680 --> 00:21:07.480
And every once in a
while, he'll have an epiphany

380
00:21:07.480 --> 00:21:09.960
while he's writing Ruby and
then he'll post Up on

381
00:21:09.960 --> 00:21:12.420
his blog. Oh, I took
these six lines Codes and

382
00:21:12.540 --> 00:21:14.520
turn it into that two
lines of code and Ruby.

383
00:21:14.520 --> 00:21:18.000
And I'm just an hammered
with Ruby today. It's, it's

384
00:21:18.000 --> 00:21:20.430
that kind of a feeling.
And then water is an

385
00:21:20.790 --> 00:21:24.630
I E and internet Explorer
wrapper for Ruby, such that

386
00:21:24.630 --> 00:21:27.060
you can write these kinds
of tests. And then I

387
00:21:27.060 --> 00:21:30.690
wrote a little index, little
cheapy application called water maker

388
00:21:30.930 --> 00:21:34.590
that would basically record your
experience while you're inside of

389
00:21:35.100 --> 00:21:37.920
a IIE. And it would
basically write out the beginnings

390
00:21:37.920 --> 00:21:40.470
of a, of a water
test and people are looking

391
00:21:40.470 --> 00:21:43.980
to extend that. That's very
cool. So you mentioned building

392
00:21:43.980 --> 00:21:47.040
installers as part of this
process. What are some tools

393
00:21:47.040 --> 00:21:49.980
to automate that process At
the simplest level? Of course,

394
00:21:49.980 --> 00:21:54.510
visual studio supports building installers
from the dev and development

395
00:21:54.510 --> 00:21:57.180
environment itself. For a lot
of our stuff, we just

396
00:21:57.180 --> 00:22:01.660
actually shell out and call
development environment dot exe, launching

397
00:22:01.660 --> 00:22:05.760
DVD proj from the command
line, the deployment project that

398
00:22:05.760 --> 00:22:08.790
comes with a visual studio.
But for, for the times

399
00:22:08.790 --> 00:22:10.470
that that doesn't work, you
can use a number of

400
00:22:10.470 --> 00:22:12.750
different tool sets. You can
use command line versions of

401
00:22:12.750 --> 00:22:16.380
install shield, but since the
continuous integration world and the

402
00:22:16.440 --> 00:22:18.870
cruise control world is so
focused on getting a lot

403
00:22:18.870 --> 00:22:22.140
of great work done with
open source tools, tools you'll

404
00:22:22.140 --> 00:22:26.220
often find are things like
windows, installer, XML, or Wix

405
00:22:26.250 --> 00:22:32.730
does it sourceforge.net/projects last week,
Or Wix wix.sf.net. Yeah. We're

406
00:22:32.730 --> 00:22:36.810
excited as if.net or the
Knoll soft scriptable install system

407
00:22:36.940 --> 00:22:39.840
NSIs used to be called
the pimp. This is the

408
00:22:39.840 --> 00:22:42.180
tool that the guys that
made when amp used to

409
00:22:42.180 --> 00:22:48.780
install when amp, it's a
very elegant installing system@nsisdotsourceforge.net. These

410
00:22:48.780 --> 00:22:51.900
are all things that can
be called from your net

411
00:22:52.050 --> 00:22:55.350
build script and or an
ant, depending on, you know,

412
00:22:55.350 --> 00:22:57.900
some people say Jif, some
people say GIF, some people

413
00:22:57.900 --> 00:23:00.120
say Nance and people say,
Annette, I don't know if

414
00:23:00.120 --> 00:23:02.940
you say Jif, you're, you've
got problems. It's a peanut

415
00:23:02.940 --> 00:23:07.380
butter. We've been over this.
Yeah, totally. You can call

416
00:23:07.380 --> 00:23:10.610
these different installer makers at
the end of your, at

417
00:23:10.650 --> 00:23:11.910
end of your transcript. And
if you wanted to take

418
00:23:11.910 --> 00:23:13.560
it to the next level,
then you would then do

419
00:23:13.560 --> 00:23:16.470
a remote deploy or a
remote install of your application,

420
00:23:16.470 --> 00:23:19.440
and then start doing integration,
testing some of the other

421
00:23:19.440 --> 00:23:20.910
things that you can stick
at the end of your

422
00:23:20.910 --> 00:23:23.040
build. Once you have the
ability to do all these

423
00:23:23.040 --> 00:23:25.530
things, you know, that that
framework are doing things like

424
00:23:25.740 --> 00:23:30.870
development metrics like what's called
psychosomatic complexity. A second medical

425
00:23:30.870 --> 00:23:34.770
complexity is, is how many
different paths through a particular

426
00:23:34.770 --> 00:23:37.200
function are there? Let's say
that there's a function called

427
00:23:37.200 --> 00:23:40.680
Fu right. It takes a
Boolean. So it has one

428
00:23:40.680 --> 00:23:44.070
input and it can be
false or true. So there

429
00:23:44.070 --> 00:23:46.760
are two ways through that
particular method so that its

430
00:23:46.760 --> 00:23:50.420
complexity might be considered too.
There's some papers that are

431
00:23:50.420 --> 00:23:53.750
written about cyclometic complexity and
there's great tools like dev

432
00:23:53.750 --> 00:23:58.910
metrics from a company called
anticipating minds@shrinks.com slash <inaudible>. They

433
00:23:58.910 --> 00:24:02.420
have a command line tool
that will go through your

434
00:24:02.420 --> 00:24:06.830
entire source code base and
tell you the complexity of

435
00:24:06.830 --> 00:24:10.940
your particular project project at
a method by method basis.

436
00:24:11.240 --> 00:24:13.220
And then you can flag
things in the build and

437
00:24:13.220 --> 00:24:16.640
say, wow, anything that has
a complexity of 10, indicating

438
00:24:16.640 --> 00:24:18.890
that there are 10 or
more ways through this method,

439
00:24:19.340 --> 00:24:21.740
which is arguably a number
that is greater than the

440
00:24:21.920 --> 00:24:24.350
amount of paths that a
human could comfortably store in

441
00:24:24.350 --> 00:24:26.840
their head. Right? I can
barely hold my phone number

442
00:24:26.840 --> 00:24:29.420
and my wife's phone number.
I can't hold 10 different

443
00:24:29.420 --> 00:24:32.480
paths through some code that
would be a time to

444
00:24:32.480 --> 00:24:34.970
then kick out. We need
to have a code review.

445
00:24:35.540 --> 00:24:37.310
Now whether you choose to
break the build or not

446
00:24:37.310 --> 00:24:40.040
is really up to you,
but this is some kinds

447
00:24:40.040 --> 00:24:43.490
of feedback you can get
that you couldn't before. Another

448
00:24:43.490 --> 00:24:46.460
one is a tool called
Simeon, which is a similarity

449
00:24:46.460 --> 00:24:49.580
based tool. It looks for,
it looks, this is actually

450
00:24:49.580 --> 00:24:52.250
kind of funny. It looks
for copy pasting within your

451
00:24:52.250 --> 00:24:57.200
source code base. It's a
shrink stir.com/bma. Simeon's actually written

452
00:24:57.200 --> 00:25:00.950
in Java, but it'll work
on.net code. And it will

453
00:25:00.950 --> 00:25:03.290
find places where say you
and I are working on

454
00:25:03.290 --> 00:25:05.480
the same project. And I
found a four loop that

455
00:25:05.480 --> 00:25:08.210
I really liked copy pasted
it, but added a little

456
00:25:08.210 --> 00:25:10.400
bit. And it will go
and say, you know, this

457
00:25:10.400 --> 00:25:13.580
is suspiciously similar. I think
this is a candidate for

458
00:25:13.580 --> 00:25:17.270
refactoring. Yeah, we did this
on a DAS blog. And

459
00:25:17.270 --> 00:25:19.370
I think we found something
like 14 or 15% of

460
00:25:19.370 --> 00:25:22.300
it was just complete duplication.
Mark Miller told me once that

461
00:25:22.300 --> 00:25:26.110
developer expresses refactor looks at
psychosomatic complexity. And that's one

462
00:25:26.110 --> 00:25:28.810
of the main characteristics that
it use to determine whether

463
00:25:29.110 --> 00:25:33.490
refactoring is necessary. Mark Miller, being
an expert on ref refactoring,

464
00:25:33.520 --> 00:25:36.370
generally with all the factors
that he put into refactor

465
00:25:36.370 --> 00:25:39.610
and in code rush, having
the, the nice chart and

466
00:25:39.610 --> 00:25:42.340
graph that you get as
a toolbox within the code

467
00:25:42.340 --> 00:25:44.680
rush product is pretty, it's
pretty powerful stuff. That's a

468
00:25:44.680 --> 00:25:47.410
very visceral way of finding
out which function in your

469
00:25:47.410 --> 00:25:50.770
application kind of sucks the
most. Yep. These are all

470
00:25:50.770 --> 00:25:53.620
things that you can add
into your net build all

471
00:25:53.620 --> 00:25:55.660
of which provide feedback, any
one of which you can

472
00:25:55.660 --> 00:25:58.720
choose to fail. The build
on this is too complicated.

473
00:25:59.050 --> 00:26:02.380
These numbers are wrong. There's
too much similarity here. Whatever

474
00:26:02.980 --> 00:26:05.350
none of this is meant
to do anything other than

475
00:26:05.800 --> 00:26:08.560
promote collective ownership. So this
is one of those things

476
00:26:08.560 --> 00:26:10.540
where the Eagle is programmer
really kind, kinda needs to

477
00:26:10.540 --> 00:26:14.020
come into play. If it's
five o'clock and it's five

478
00:26:14.020 --> 00:26:16.510
o'clock on a Friday night,
somebody checked some code in

479
00:26:16.510 --> 00:26:19.150
and they don't wait for
the bill to run and

480
00:26:19.150 --> 00:26:22.900
they just go and the
build breaks that person has

481
00:26:22.900 --> 00:26:24.640
to take responsibility for that.
And they need to come

482
00:26:24.640 --> 00:26:26.380
back in because you don't
know who's coming in on

483
00:26:26.380 --> 00:26:28.750
the weekend to work on
that code. Yep. That's been

484
00:26:28.750 --> 00:26:31.710
a big part of a
collective code ownership here at,

485
00:26:32.080 --> 00:26:34.240
at Kirlian. One of the
other great things about cruise

486
00:26:34.240 --> 00:26:36.820
control. Now that we've extended
it from not just one

487
00:26:36.820 --> 00:26:40.600
project, but literally dozens within
our, our company is they've

488
00:26:40.600 --> 00:26:44.310
got a web based dashboard
that the types can look

489
00:26:44.310 --> 00:26:47.580
at and see all of
the health, basically of all

490
00:26:47.580 --> 00:26:50.970
the builds within the building.
And then we just added

491
00:26:50.970 --> 00:26:54.960
that as an HTML web
part to, to a SharePoint.

492
00:26:55.860 --> 00:26:57.420
So now a manager type
can go up to his

493
00:26:57.420 --> 00:27:00.300
SharePoint dashboard and see a
green green, green, Oh, it

494
00:27:00.300 --> 00:27:02.970
looks like Fred's bank. Hasn't
built correctly in the last

495
00:27:02.970 --> 00:27:05.340
three days, I'm going to
talk to their managers, see

496
00:27:05.340 --> 00:27:07.200
if they're having some trouble.
We can't get that fixed.

497
00:27:07.380 --> 00:27:09.870
Where does visual studio team
system fit into all of

498
00:27:09.870 --> 00:27:13.260
this team system is the
first attempt at kind of

499
00:27:13.260 --> 00:27:18.120
formalizing a number of practices
around development. Before I think

500
00:27:18.120 --> 00:27:23.550
that visual studio.net was a,
a single user tool. It,

501
00:27:24.210 --> 00:27:26.880
they understood that there were
more than one person working

502
00:27:26.880 --> 00:27:30.540
on a particular project, but
the, the, the sense of

503
00:27:30.750 --> 00:27:34.710
collective tasks of code coverage
of testing, wasn't baked in

504
00:27:35.010 --> 00:27:40.050
things like Jamie Cannes, Dales
T test driven.net. That's been

505
00:27:40.050 --> 00:27:44.550
integrated into a visual studio,
filled a gap that the

506
00:27:44.550 --> 00:27:48.270
2002 in 2003 versions of
the visual studio product didn't

507
00:27:48.270 --> 00:27:51.660
fail team system attempts to
formalize. We understand that there's

508
00:27:51.660 --> 00:27:53.730
a team. We understand that
there are some best practices.

509
00:27:53.730 --> 00:27:56.400
And, and this is how
we think that team-based software

510
00:27:56.400 --> 00:27:59.180
development should work. And all
of these tools that you

511
00:27:59.180 --> 00:28:02.930
mentioned will integrate nicely with
team system. Yeah, Everyone who

512
00:28:02.930 --> 00:28:05.390
is making these tools and
working on these tools is

513
00:28:05.390 --> 00:28:06.980
trying to do it in
such a way that they

514
00:28:06.980 --> 00:28:08.990
don't break anything that comes
with team system. And I

515
00:28:08.990 --> 00:28:13.880
think that looking at Jamie
Cannes Dale's stuff@ashrinker.com slash BM

516
00:28:13.880 --> 00:28:17.210
five, this is something that
was released today and has

517
00:28:17.210 --> 00:28:20.720
something very significant that we
should talk about. But to

518
00:28:20.720 --> 00:28:23.270
start with Jamie has created
a thing called test-driven dot

519
00:28:23.270 --> 00:28:26.090
net. You can go to
www dot test-driven dot net.

520
00:28:27.080 --> 00:28:30.080
And this is an add
in that you can install

521
00:28:30.080 --> 00:28:32.990
in visual studio, any version.
This is significant. So, I

522
00:28:32.990 --> 00:28:34.550
mean, if there was a
way to underline and bold

523
00:28:34.550 --> 00:28:38.120
face this, or have people
pull over their cars, you

524
00:28:38.120 --> 00:28:41.180
can integrate this with any
version of visual studio, including

525
00:28:41.180 --> 00:28:45.440
the express skews, wow express,
or the free tools that

526
00:28:45.440 --> 00:28:48.680
you can use to have
visual studio, VB C sharp

527
00:28:48.920 --> 00:28:54.050
asp.net development. The express line
of skews are free versions

528
00:28:54.050 --> 00:28:57.650
of visual studio. They're they're
dumbed down slightly, but they're

529
00:28:57.650 --> 00:29:00.950
for the hobbyist. They're for
the, for the fellow who

530
00:29:00.950 --> 00:29:04.340
just really didn't need a,
an MSDN license and great

531
00:29:04.340 --> 00:29:07.580
for learning. Fantastic for learning
all of our coding for

532
00:29:07.580 --> 00:29:11.210
fun stuff up at msdn.com/coding
for fun has done entirely

533
00:29:11.210 --> 00:29:14.960
with the express skews. They're
small downloads. They won't hurt

534
00:29:14.960 --> 00:29:18.020
your machine. They don't have
the full MSDN help. They

535
00:29:18.020 --> 00:29:23.030
use the online version instead,
and doing, doing testing, doing

536
00:29:23.030 --> 00:29:26.510
test driven development typically has
meant using the end unit

537
00:29:26.540 --> 00:29:30.290
gooey or any unit console
tools as a separate thing

538
00:29:30.290 --> 00:29:35.060
that you would shell out
to Jamie's stuff@shrinks.com slash <inaudible>.

539
00:29:35.330 --> 00:29:39.620
Now released today will integrate
with the express tools. You

540
00:29:39.620 --> 00:29:43.390
can right click within function
and say, run tests on

541
00:29:43.390 --> 00:29:45.660
that function. This is test
driven, not net. We're still

542
00:29:45.660 --> 00:29:48.210
talking about yeah. Test driven.net.
And I just, I just

543
00:29:48.210 --> 00:29:52.020
truly cannot say enough, nice
things about test driven.net. But

544
00:29:52.020 --> 00:29:53.880
the thing that's the most
powerful is the thing that

545
00:29:53.880 --> 00:29:56.910
we haven't mentioned yet too
much is this concept of

546
00:29:56.940 --> 00:29:59.220
code coverage. We touched a
little bit on it when

547
00:29:59.220 --> 00:30:02.670
we were talking about cyclometric
complexity, let's say that there's

548
00:30:03.000 --> 00:30:05.610
two ways through a particular
function. Then arguably there needs

549
00:30:05.610 --> 00:30:07.830
to be two different test
cases to test both of

550
00:30:07.830 --> 00:30:10.770
those. If we were to
have 100% coverage. Yeah. There's

551
00:30:10.770 --> 00:30:14.850
a tool called N cover
and cover.org and C O

552
00:30:14.850 --> 00:30:19.410
V E r.org and N
cover runs and instruments your

553
00:30:19.410 --> 00:30:22.020
code while your tests are
going on to find out

554
00:30:22.020 --> 00:30:25.800
what chunks of your code
never got executed. Wow, cool.

555
00:30:26.040 --> 00:30:28.890
That produces an XML file
that can then be styled

556
00:30:28.890 --> 00:30:33.180
by cruise control. But what's
exciting about what Jamie has

557
00:30:33.180 --> 00:30:37.290
released is that he, along
with grant Drake have released

558
00:30:37.350 --> 00:30:40.530
an end cover Explorer. This
is a file that reads

559
00:30:40.530 --> 00:30:44.550
the XML files created by
the coverage tool, giving non

560
00:30:44.550 --> 00:30:48.690
visual studio 2005 users full
code coverage with squiggly is

561
00:30:48.690 --> 00:30:51.390
like, like a misspelling underneath
the lines of code that

562
00:30:51.690 --> 00:30:54.420
did not get run. So
now you can actually right

563
00:30:54.420 --> 00:30:56.970
click on a method on
a project, on a code

564
00:30:56.970 --> 00:31:01.710
file and say, right, click
test with coverage. He will

565
00:31:01.710 --> 00:31:05.130
run your tests automatically within
visual studio, and then immediately

566
00:31:05.130 --> 00:31:08.910
pop up the end, cover
Explorer telling you instantly what

567
00:31:08.910 --> 00:31:11.790
parts of your code were
not exercised. It wasn't their

568
00:31:11.790 --> 00:31:15.870
code coverage reporting built individual
studio team system. So there

569
00:31:15.870 --> 00:31:19.880
is code coverage built into
versions of the 2005 teams,

570
00:31:19.880 --> 00:31:24.690
suite developer, and tester. What
there isn't is support for

571
00:31:24.750 --> 00:31:29.580
any other visual studio, right
skew. Now what Jamie and

572
00:31:29.580 --> 00:31:32.580
the test driven.net guys and
grant Drake have done is

573
00:31:32.880 --> 00:31:37.740
come up with code coverage,
integrated into every single visual

574
00:31:37.740 --> 00:31:41.610
studio SKU. How hard are
all these tools to set

575
00:31:41.610 --> 00:31:43.170
up and get going with
it? I mean, you, you

576
00:31:43.170 --> 00:31:46.050
rattled off just like a
big list of tools here

577
00:31:46.050 --> 00:31:48.480
is this, is this stuff
that you can put together

578
00:31:48.480 --> 00:31:50.730
in an afternoon, or, you
know, is this going to

579
00:31:50.730 --> 00:31:54.720
take some serious time? I
think, yes, both what you

580
00:31:54.720 --> 00:31:57.180
said is true. It is
something you can get running

581
00:31:57.180 --> 00:31:59.460
in an afternoon in the
sense of you can install

582
00:31:59.460 --> 00:32:03.420
cruise control. It's easy. You
can make a simple Nat

583
00:32:03.420 --> 00:32:07.050
file that would just call
visual studio, but there are

584
00:32:07.050 --> 00:32:10.710
some tools within Nat, like
the solution, a task that

585
00:32:10.710 --> 00:32:15.720
will actually read in your
CS proj and run using

586
00:32:15.720 --> 00:32:19.050
your CS project source run
a build. I do a

587
00:32:19.050 --> 00:32:21.090
lot of builds of DAS
blog that way on my

588
00:32:21.090 --> 00:32:22.980
own machine. And I'll be
including that in our build.

589
00:32:22.980 --> 00:32:25.830
Soon, we're hoping to set
up a continuous integration server

590
00:32:25.830 --> 00:32:31.170
for, for DAS blog. So
just getting napped, cruise control,

591
00:32:31.200 --> 00:32:33.450
and then having it send
out email of the reports

592
00:32:33.540 --> 00:32:38.160
is a start getting into
doing end unit takes a

593
00:32:38.160 --> 00:32:41.960
commitment. It takes a realization
that testing is important. So

594
00:32:41.960 --> 00:32:44.900
at the very minimum, you'd
want to have cruise control

595
00:32:45.020 --> 00:32:47.540
Nant and end unit. What's
great about this is it's

596
00:32:47.540 --> 00:32:49.610
all modular. When you want
to bring in FX cop,

597
00:32:49.610 --> 00:32:52.790
as the organization can, can
handle it, start introducing things

598
00:32:52.790 --> 00:32:56.510
like water or dev metrics.
This took us really three

599
00:32:56.510 --> 00:32:59.990
years to sell to everyone
where now it's just understood.

600
00:32:59.990 --> 00:33:01.550
Everyone loves it, and everyone
wants to do it this

601
00:33:01.550 --> 00:33:03.470
way, but it was a
hard sell to start with.

602
00:33:03.470 --> 00:33:06.650
So start with Nanton and
unit start with tools like

603
00:33:06.650 --> 00:33:09.620
test driven.net that are just
so easy, right? That it's

604
00:33:09.620 --> 00:33:11.870
ridiculous. Even if you don't
do any of the continuous

605
00:33:11.870 --> 00:33:14.390
integration stuff, start looking at
how much easy it is

606
00:33:14.390 --> 00:33:16.580
to right click within there's
studio and say, run tests.

607
00:33:16.580 --> 00:33:19.610
Now folks will say, Oh,
well, I can go into

608
00:33:19.610 --> 00:33:22.880
visual studio and the project
properties. And instead of launching

609
00:33:22.880 --> 00:33:26.000
my executable or my DLL,
I can just say launch

610
00:33:26.030 --> 00:33:30.440
and unit gooey as the
target executable. Sure, absolutely. You

611
00:33:30.440 --> 00:33:33.080
can do that. You hit
that five and you'll automatically

612
00:33:33.080 --> 00:33:35.330
run a unit QE, but
this is a kind of

613
00:33:35.330 --> 00:33:38.030
integration that is kind of
more fundamental. It makes it

614
00:33:38.030 --> 00:33:39.530
feel like it was part
of the product the whole

615
00:33:39.530 --> 00:33:42.140
time. When you say right
click and say, run tests

616
00:33:42.590 --> 00:33:44.270
down at the bottom when
it pops up and it

617
00:33:44.270 --> 00:33:45.920
says build, and you see
all the build stuff go

618
00:33:45.920 --> 00:33:49.430
by. After that combo box
in the toolbox at the

619
00:33:49.430 --> 00:33:51.890
bottom of visual studio says,
bill, that immediately switches over

620
00:33:51.890 --> 00:33:53.720
to test and the results
of the test come out.

621
00:33:54.050 --> 00:33:56.000
We're not talking about shelling
out into dos to do

622
00:33:56.000 --> 00:34:00.530
funky stuff, right? They've got
a formal integration technique with

623
00:34:00.560 --> 00:34:04.210
visual studio. That's really something
to be seen. Excellent. Well,

624
00:34:04.220 --> 00:34:06.650
Scott, any last minute words
before we go for this

625
00:34:06.650 --> 00:34:09.650
week? You know, I probably
miss something. There's probably another

626
00:34:09.650 --> 00:34:11.960
tool or an add on
to cruise control. I know

627
00:34:11.960 --> 00:34:13.070
that a lot of people
have been trying to get

628
00:34:13.130 --> 00:34:16.100
ms. Build the 2005 ms.
Build stuff, working with cruise

629
00:34:16.100 --> 00:34:18.320
control. If you Google for
those things, you'll find it.

630
00:34:19.210 --> 00:34:22.160
I'm sure that I missed
someone's favorite tool, but do

631
00:34:22.160 --> 00:34:25.610
try to learn about continuous
integration. There's a thriving community

632
00:34:25.610 --> 00:34:27.200
out there that are working
on this kind of stuff.

633
00:34:27.440 --> 00:34:30.200
Once you've instituted this in
your company, no matter how

634
00:34:30.200 --> 00:34:32.870
small your team is, it'll
be really difficult to go

635
00:34:32.870 --> 00:34:36.950
back to anything. Anything else?
Indeed. Thank you, Scott. And

636
00:34:37.220 --> 00:34:50.750
we'll talk to you the
listener next week on <inaudible>.

