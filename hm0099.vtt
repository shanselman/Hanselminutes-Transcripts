WEBVTT FILE

1
00:00:04.380 --> 00:00:16.280
<inaudible> From Hanselman it's dot
com. It's Hansel minutes, our

2
00:00:16.280 --> 00:00:20.660
weekly discussion with web developer
and technologist Scott Hanselman hosted

3
00:00:20.660 --> 00:00:26.240
by Carl Franklin. This is Lawrence Ryan
announcing show number 99. Recorded

4
00:00:26.240 --> 00:00:32.360
live Wednesday, February 6th, 2008. Support for
Hansel minutes is provided by

5
00:00:32.450 --> 00:00:36.680
Tellerik already controls the most
comprehensive suite of components for

6
00:00:36.680 --> 00:00:47.090
windows forms and asp.net web
applications online@wwwdottelerik.com. In this episode,

7
00:00:47.090 --> 00:00:54.260
Scott talks with Mac developer,
Steven Frank. Hi, this is Scott

8
00:00:54.260 --> 00:00:56.300
Hanselman. This is another episode
of Hansel minutes, and I'm

9
00:00:56.300 --> 00:01:01.670
sitting here with Steven Frank from
panic. Panic makes macsoftware Steven

10
00:01:01.670 --> 00:01:04.100
and I went to college
together, actually sat next to

11
00:01:04.100 --> 00:01:07.820
each other in college and
bought our Newtons on opening

12
00:01:07.820 --> 00:01:10.430
day. I remember we rushed
down to, he was an

13
00:01:10.430 --> 00:01:12.980
incredible universe that they called
it. That's very incredible universe.

14
00:01:13.220 --> 00:01:15.110
We spent a ridiculous amount
of money. I think it

15
00:01:15.110 --> 00:01:19.070
was about the equivalent of
a term's worth of we're

16
00:01:19.080 --> 00:01:21.740
early adopters. And we actually
convinced ourselves that we were

17
00:01:21.740 --> 00:01:24.290
going to take notes in
class. I remember we tried

18
00:01:24.290 --> 00:01:27.410
to like put together a
C code on the, in

19
00:01:27.410 --> 00:01:29.750
the notepad and the Newton.
I really tried. I honestly

20
00:01:29.750 --> 00:01:33.470
did. But do you still
have that Newton? I still

21
00:01:33.470 --> 00:01:35.630
have a, not that one,
but I have kind of

22
00:01:35.630 --> 00:01:38.450
a small collection of them
really like got nostalgic and

23
00:01:38.450 --> 00:01:41.060
I bought one off eBay
and just like, remember the

24
00:01:41.060 --> 00:01:42.890
good old times. And then
somehow that turned into like

25
00:01:42.890 --> 00:01:44.720
four of them. Cause then
I had to have like

26
00:01:44.720 --> 00:01:47.690
one of each model and
I don't know how it

27
00:01:49.430 --> 00:01:51.370
is still to this day.
It's so fantastic that I've

28
00:01:51.380 --> 00:01:53.630
got my Newton sinking with
outlook on my system. That's

29
00:01:53.630 --> 00:01:57.080
great. Now we were in
a number of classes together

30
00:01:57.110 --> 00:01:59.690
and if I remember correctly,
we were in windows, gooey

31
00:02:00.230 --> 00:02:04.190
class. I think so. Yeah.
Now I work for Microsoft

32
00:02:04.400 --> 00:02:09.800
and you co-founded a award-winning
Macintosh software company. Yes. Different

33
00:02:09.800 --> 00:02:14.340
paths. Was that class a
part of it did, did

34
00:02:14.360 --> 00:02:16.670
learning how to do hello
world in 93 short lines

35
00:02:16.670 --> 00:02:20.150
of code and 16 windows
drive you away from the

36
00:02:20.150 --> 00:02:23.180
mothership. Not really. I mean,
you got to understand that.

37
00:02:23.180 --> 00:02:25.820
I was always like a
little bit alternative. Like, I

38
00:02:25.820 --> 00:02:27.170
don't know if you know
this, but I was going

39
00:02:27.170 --> 00:02:30.760
home and doing my homework
on my Amiga. I checked

40
00:02:30.760 --> 00:02:33.560
didn't know that I had
suppressed that memory, but yes,

41
00:02:33.650 --> 00:02:36.020
that's true. That was the
height of the Amiga. Yeah,

42
00:02:36.500 --> 00:02:38.540
I mean, my, my first
real computer was an Apple

43
00:02:38.540 --> 00:02:42.470
two and my dad got
like two 86 or three

44
00:02:42.470 --> 00:02:46.190
86 at some point. And
I got an amigo was

45
00:02:46.190 --> 00:02:50.690
like some money from my
first job and I was

46
00:02:50.690 --> 00:02:53.180
really into that for awhile
and it kind of was

47
00:02:53.180 --> 00:02:54.860
hoping like maybe it would
catch on and be a

48
00:02:54.860 --> 00:02:58.160
big thing, but then it's
pretty much disappeared. It seems

49
00:02:58.160 --> 00:03:01.540
like the Amiga was beta
max of, Of systems. I

50
00:03:01.540 --> 00:03:04.720
mean, it was clearly superior
did amazing things with music

51
00:03:04.720 --> 00:03:07.860
and graphics. Yeah. But it
didn't catch on Just didn't

52
00:03:07.860 --> 00:03:09.750
catch on. I guess it
was from what I've heard.

53
00:03:09.750 --> 00:03:11.310
It was kind of, you
know, the company was poorly

54
00:03:11.310 --> 00:03:14.520
managed Commodore at the time
was like a lot of

55
00:03:14.520 --> 00:03:17.220
executives taking a whole lot
of money and not putting

56
00:03:17.220 --> 00:03:19.320
a lot of money in
what were was actually needed.

57
00:03:20.040 --> 00:03:22.530
But yeah, it was kind
of very ahead of its

58
00:03:22.530 --> 00:03:24.510
time. And certainly when it
came out and not a

59
00:03:24.510 --> 00:03:26.400
lot of computers could do
the sorts of things it

60
00:03:26.400 --> 00:03:29.460
could do. Now We were
in C class together and

61
00:03:29.460 --> 00:03:31.230
you were at home coding
on your Amiga. So I

62
00:03:31.230 --> 00:03:35.100
assume you started coding for
the Amica directly. That's right.

63
00:03:35.130 --> 00:03:37.350
Well, I mean, everything for
class was, you know, pretty

64
00:03:37.350 --> 00:03:41.040
generic kind of standard IO
kind of stuff. But I

65
00:03:41.040 --> 00:03:43.260
did some gooey programming for
the Amiga. One of my

66
00:03:43.650 --> 00:03:47.550
earliest jobs was very actually
a Portland based company that

67
00:03:47.550 --> 00:03:50.040
was very small Amiga shopper
and then like two or

68
00:03:50.040 --> 00:03:54.090
three people. And I wrote
a terminal emulator, you know,

69
00:03:54.090 --> 00:03:56.970
basically for calling you're calling
up your BBSs Oh yeah.

70
00:03:57.630 --> 00:03:59.550
For the Amiga. So that
was kind of my first

71
00:03:59.550 --> 00:04:05.340
ever commercial software product. And
I guess when the Amiga

72
00:04:05.340 --> 00:04:07.980
sort of disappeared, the Mac
was the next sort of

73
00:04:07.980 --> 00:04:11.670
natural step for me because
I'd always kind of wanted

74
00:04:11.670 --> 00:04:14.760
one. And when I got
together with cable, he actually

75
00:04:14.760 --> 00:04:16.800
had an old one that
he let me use for

76
00:04:16.800 --> 00:04:19.200
a while, while we were
getting rolling. And Is the

77
00:04:19.630 --> 00:04:21.950
co other, the other co
founder of panic. That's right.

78
00:04:21.960 --> 00:04:24.090
Gail Sasser. Okay. And you
guys have a number of

79
00:04:24.090 --> 00:04:27.660
products and I really started
noticing you again, when you

80
00:04:27.660 --> 00:04:29.850
started winning more and more
awards, you get these little

81
00:04:29.850 --> 00:04:33.990
cubes from Steve jobs There,
I suppose that's one way

82
00:04:33.990 --> 00:04:36.960
of looking at it. It's
called the Apple design award

83
00:04:36.990 --> 00:04:40.440
and it's held at the
yearly worldwide developers conference that

84
00:04:40.470 --> 00:04:42.960
Apple holds in San Francisco
now used to be San

85
00:04:42.960 --> 00:04:48.240
Jose and there's multiple categories.
Things like best Machlis 10

86
00:04:48.240 --> 00:04:52.800
user experience, best adoption of
technologies and the latest version

87
00:04:52.800 --> 00:04:56.630
of Mecca 10 and you
know, things of that nature,

88
00:04:56.640 --> 00:04:59.610
best student project, things like
that. Then you get the,

89
00:04:59.610 --> 00:05:02.880
you get the cool little
cube award and you also

90
00:05:02.880 --> 00:05:05.090
get some hardware usually with
that, like you get a

91
00:05:05.100 --> 00:05:07.110
couple of Macs or a
couple of laptops or something

92
00:05:07.110 --> 00:05:10.500
like that, which is great.
Cause you know, hardware's like

93
00:05:10.500 --> 00:05:13.680
our number one expense here.
So How many of those

94
00:05:13.680 --> 00:05:17.310
awards do you have? We
have, let's see, I think

95
00:05:17.310 --> 00:05:20.490
we have five total. A
couple of them are our

96
00:05:20.490 --> 00:05:25.770
runners up. Most recently we
got one for Coda at

97
00:05:26.400 --> 00:05:29.600
last year's WWDC, which was,
I think for best macros

98
00:05:29.600 --> 00:05:35.940
10 user experience. Okay. Coda
being our website IDE. Okay.

99
00:05:35.940 --> 00:05:39.390
So let's talk about Coda.
So my listeners are mostly

100
00:05:39.420 --> 00:05:42.240
windows people, although everyone is
a closet Mac head in

101
00:05:42.240 --> 00:05:43.770
the sense that they've got
a Mac mini or they've

102
00:05:43.770 --> 00:05:45.540
got a macular in the
house, I've got two Macs

103
00:05:45.540 --> 00:05:48.570
at home and you know,
I'm actually doing some beta

104
00:05:48.570 --> 00:05:52.920
testing of office 2008, which
is released now. I think

105
00:05:52.920 --> 00:05:55.080
it just came out. Yeah.
And it's such a different

106
00:05:55.080 --> 00:05:58.640
user experience, but I'm always
interested a developer's perspective about

107
00:05:58.640 --> 00:06:00.800
understanding other ways to do
things. You know, I explore

108
00:06:00.810 --> 00:06:04.790
Ruby and I look at
Python and I just, I

109
00:06:04.790 --> 00:06:07.940
don't understand how you guys
are writing this stuff. So

110
00:06:08.210 --> 00:06:11.210
Coda is a big full
fledged IDE, but you also

111
00:06:11.210 --> 00:06:16.130
use componentry from other companies
that's right. CSS edit, and

112
00:06:16.130 --> 00:06:19.520
then you pull in different
things. So I helped me

113
00:06:19.520 --> 00:06:23.870
out, helped me understand Mac
development from like DNA up

114
00:06:23.870 --> 00:06:26.480
til this afternoon because you
have a component model. How

115
00:06:26.480 --> 00:06:28.490
do you have interprocess communication?
Is this all just in

116
00:06:28.490 --> 00:06:32.980
see it's magic as far
as Well, most of the,

117
00:06:33.010 --> 00:06:37.180
you mentioned the, the licensing
of code, there was a,

118
00:06:37.180 --> 00:06:41.860
an, a text editor product
called Sabetha edit, which came

119
00:06:41.860 --> 00:06:44.230
out years ago now on
the Mac. And it was

120
00:06:44.230 --> 00:06:47.710
a collaborative text editing environment.
So you had multiple people

121
00:06:47.920 --> 00:06:50.200
on the local network, all
editing the same document at

122
00:06:50.200 --> 00:06:53.200
once. And it would update
on real time on everyone's

123
00:06:53.230 --> 00:06:55.930
system. And that was, that
was a really interesting idea.

124
00:06:57.100 --> 00:07:00.700
We talked to those guys
about licensing their engine because

125
00:07:00.700 --> 00:07:04.000
it already did that collaboration
functionality, which we thought would

126
00:07:04.000 --> 00:07:06.220
be really useful in an
IDE. And so we just

127
00:07:06.220 --> 00:07:08.440
worked out sort of the
private deal with them to

128
00:07:09.430 --> 00:07:13.030
share their source code with
us. And so it's, it's

129
00:07:13.030 --> 00:07:15.460
not quite as componentized as
I would, like, we basically

130
00:07:15.460 --> 00:07:19.480
have the source to their
application. And then we compile

131
00:07:19.540 --> 00:07:22.870
into our project and bits
that we need. It's not

132
00:07:22.870 --> 00:07:24.490
quite as glamorous as I
thought. I mean, if they,

133
00:07:24.910 --> 00:07:26.920
they update their source where
that was, I'm sure that

134
00:07:26.920 --> 00:07:28.330
they do, you're going to
have to do source level

135
00:07:28.330 --> 00:07:30.220
DIFs. Yeah. We do a
lot of, of that type

136
00:07:30.220 --> 00:07:32.470
of merging. And What kind
of, how do you share

137
00:07:32.470 --> 00:07:34.390
stuff? I mean, if I
was going to write a

138
00:07:34.390 --> 00:07:38.920
spellchecker or a, an, an
IntelliSense tool, that's going to

139
00:07:38.920 --> 00:07:41.530
allow you to plug in
a new language in what

140
00:07:41.530 --> 00:07:44.980
format does that look? What
does it look like? Well,

141
00:07:44.980 --> 00:07:49.450
for, for collaboration and stuff,
we use subversion all of

142
00:07:49.450 --> 00:07:53.050
their, almost all of our
code, like 98% of it

143
00:07:53.050 --> 00:07:56.080
is an objective C. Okay.
But what I'm asking is

144
00:07:56.080 --> 00:07:58.240
the, if I'm going to
make you a component, I

145
00:07:58.240 --> 00:08:00.250
want to give you the
binary. Okay. So let's say

146
00:08:00.250 --> 00:08:01.780
you could, in this version,
it's in, you know, you've

147
00:08:01.780 --> 00:08:04.840
got your slash source, which
you've got slash live. I

148
00:08:04.840 --> 00:08:07.480
give you a what, it's
not a DLL it's Live

149
00:08:07.480 --> 00:08:09.760
or just, well, there, there
exists a thing called a

150
00:08:09.760 --> 00:08:14.650
framework, which is either statically
or dynamically loadable, which would

151
00:08:14.890 --> 00:08:18.670
be considered similar to a
DLL. You could do it

152
00:08:18.670 --> 00:08:21.640
that way. We tend to
build our apps sort of

153
00:08:21.640 --> 00:08:27.130
monolithically. So that everything's compiled
in except where we can't

154
00:08:27.130 --> 00:08:30.760
do it for things like
the LGPL, where we're required

155
00:08:30.760 --> 00:08:33.760
to dynamically load. Oh, okay.
So give me an example

156
00:08:33.760 --> 00:08:36.160
of an LGPL thing that
would stay out of your

157
00:08:36.160 --> 00:08:37.990
application and sit next to
it rather than inside it

158
00:08:38.500 --> 00:08:41.230
What's in there. I think
a neon for example, is

159
00:08:41.230 --> 00:08:44.680
in there, we do, neon
is in an LGPL library

160
00:08:44.680 --> 00:08:47.440
for doing web dev connections,
which we use in both

161
00:08:47.470 --> 00:08:50.890
Coda and transmit, transmit to
your FTP client. That's right.

162
00:08:51.520 --> 00:08:53.410
And so one of the
terms of the LGPL is

163
00:08:53.410 --> 00:08:55.620
that you have to be
able to provide the source

164
00:08:55.620 --> 00:08:59.280
to any modifications That you
make to it. And you

165
00:08:59.280 --> 00:09:02.520
can, by not statically linking
it with your application, you

166
00:09:02.520 --> 00:09:05.550
can provide just the modifications
to the library itself and

167
00:09:05.550 --> 00:09:08.010
not the whole, your whole
application. You don't have to

168
00:09:08.010 --> 00:09:12.090
give out the source for.
So that's, that's one thing

169
00:09:12.090 --> 00:09:15.780
that we compile into a
dynamically loaded bundle or framework

170
00:09:15.780 --> 00:09:18.260
as it's called. Okay. When
you use those from code,

171
00:09:18.710 --> 00:09:20.570
once they're loaded, they don't
look any different. I mean,

172
00:09:20.570 --> 00:09:22.190
you can, you don't have
to go hunting for PreK.

173
00:09:22.190 --> 00:09:23.720
I remember when we were
doing this things, we would

174
00:09:23.720 --> 00:09:26.780
load librarian, get proc address,
you'd find entry points and

175
00:09:27.050 --> 00:09:29.840
you have basically dot H
files describing what's in that

176
00:09:29.840 --> 00:09:32.630
thing over there. Right. Do
you have that experience too?

177
00:09:33.230 --> 00:09:36.020
Not really. Once, once the,
once the bundles loaded into

178
00:09:36.020 --> 00:09:39.620
the main application it's available
and you can just call

179
00:09:39.620 --> 00:09:41.360
into it, like you had
any other classes. Okay. So

180
00:09:41.360 --> 00:09:43.820
this is a real common
thing. So bundles are a

181
00:09:43.820 --> 00:09:46.160
very common way for people
to have a component model

182
00:09:46.160 --> 00:09:48.950
from, from place to place.
Now, are those typically loaded

183
00:09:48.950 --> 00:09:51.050
out of the same folder
as the application? Or is

184
00:09:51.050 --> 00:09:53.270
there a central store for
those things? Well, there's two

185
00:09:53.270 --> 00:09:56.980
ways you can do it.
The there's sort of a

186
00:09:57.020 --> 00:10:03.230
global library folder, which contains
things like the WebKit framework,

187
00:10:03.230 --> 00:10:06.860
for example, which is safaris,
this fiery web browsers rendering

188
00:10:06.860 --> 00:10:09.650
engine, The rendering engine kind
of comes with the iOS

189
00:10:09.950 --> 00:10:11.390
that's right. So it's kind
of like the way that

190
00:10:11.570 --> 00:10:14.240
internet Explorer there was that
whole lawsuit. And they said,

191
00:10:14.270 --> 00:10:16.400
Oh, internet Explorer. It comes
with the iOS, but for

192
00:10:16.400 --> 00:10:18.770
us, it's a thing called
shell Schaldach view. And it's

193
00:10:18.770 --> 00:10:22.040
like the thing that renders
HD, Right. It's over there.

194
00:10:22.100 --> 00:10:25.480
And it was associated with
the entire system. That's right.

195
00:10:25.530 --> 00:10:27.980
Yeah. It's installed in the,
in the system library. Okay.

196
00:10:28.670 --> 00:10:30.290
So I can use that
in my application. I don't

197
00:10:30.290 --> 00:10:32.450
have to worry that it's
not there Always be there.

198
00:10:32.510 --> 00:10:35.750
Right. You don't know necessarily
what version will be there.

199
00:10:35.780 --> 00:10:37.940
You know, you usually look
at, you can look at

200
00:10:37.940 --> 00:10:39.830
things like the top level
iOS version, you know, who's

201
00:10:39.830 --> 00:10:44.270
at 10.4 10.5, but there
can also be interim updates

202
00:10:44.270 --> 00:10:46.430
to Safari in that time
that will update the web

203
00:10:46.610 --> 00:10:49.850
framework. Okay. So there's, there's
those libraries that are shared.

204
00:10:50.720 --> 00:10:53.300
And then there's a user
level library folder where you

205
00:10:53.300 --> 00:10:57.800
can install things like that
into, but it's not a

206
00:10:57.800 --> 00:11:00.680
great idea to do so,
because then you, you end

207
00:11:00.680 --> 00:11:03.740
up with, you know, dependency
problems and things like that.

208
00:11:03.740 --> 00:11:06.950
And it's just generally something
Mac users don't want to

209
00:11:07.010 --> 00:11:09.860
worry or care to think
about. And so the other

210
00:11:09.860 --> 00:11:12.770
option is you can embed
the framework into the application

211
00:11:12.770 --> 00:11:15.680
directly. And this is kind
of the interesting thing about

212
00:11:15.680 --> 00:11:19.370
the application framework on Mac
iOS 10 is the it's

213
00:11:19.430 --> 00:11:24.440
at its root. It's just
a folder structure. So you

214
00:11:24.440 --> 00:11:26.900
have, like, in our case,
our application Coda has a

215
00:11:26.900 --> 00:11:30.290
root folder called coda.app, which
is displayed to the user

216
00:11:30.290 --> 00:11:33.740
as a single icon. The
little leaf says code underneath.

217
00:11:34.130 --> 00:11:36.320
So this thing about directories
is really interesting to me

218
00:11:36.320 --> 00:11:38.750
because when I go into
the finder, which is like

219
00:11:38.750 --> 00:11:41.000
the windows Explorer, and I
see an icon that says

220
00:11:41.000 --> 00:11:45.110
Coda, it's a leaf, I
guess, right? That's a lie.

221
00:11:47.030 --> 00:11:50.300
It's really a folder called
coda.app. Well, I wouldn't say

222
00:11:50.300 --> 00:11:51.980
it. I'll say it's a
lie. It's a bad thing

223
00:11:51.980 --> 00:11:54.550
because we do the same
thing in, in the windows

224
00:11:54.550 --> 00:11:57.790
world. There's a thing called
an explore, a namespace extension

225
00:11:57.790 --> 00:12:00.640
where you're going around folder,
folder, folder, and then you

226
00:12:00.640 --> 00:12:02.320
see a folder that's a
special kind of folder and

227
00:12:02.320 --> 00:12:04.750
you go in it and
you basically get a pair

228
00:12:04.750 --> 00:12:09.010
of Rose colored glasses over
reality because reality is just

229
00:12:09.130 --> 00:12:13.530
not relevant. Well, it's only
a life you consider each

230
00:12:14.490 --> 00:12:18.630
icon representing a single thing.
Do you know what I

231
00:12:18.630 --> 00:12:22.380
mean? Like, there's still, it's
one icon representing this, this

232
00:12:22.380 --> 00:12:25.170
concept of an entire application.
So double clicking on it

233
00:12:25.170 --> 00:12:27.510
runs it, it doesn't go
in there. That's right. Okay.

234
00:12:28.140 --> 00:12:32.220
And I'm trying to figure
out how I remember, Or

235
00:12:32.220 --> 00:12:33.900
maybe lie is not the
right way to put. What

236
00:12:33.900 --> 00:12:37.260
I'm saying is that it's,
if you put.app on the

237
00:12:37.260 --> 00:12:40.350
end of something, does it
automatically get turned into an

238
00:12:40.350 --> 00:12:44.430
icon? Sort of, it'll probably
get very confused if it's

239
00:12:44.430 --> 00:12:46.410
not, not actually in this,
There's some kind of action.

240
00:12:46.410 --> 00:12:49.390
There's a manifest of some
kind and there's it's let

241
00:12:49.390 --> 00:12:51.510
me say this rather than
a lie. It's a convention.

242
00:12:51.690 --> 00:12:54.540
Yeah. But it's a time
trusted convention. When did it

243
00:12:54.540 --> 00:12:56.940
begin with OSTP 10? Yes.
Yeah. I believe it, it

244
00:12:56.940 --> 00:13:01.140
comes from the next step
origins of him. Yeah. I

245
00:13:01.140 --> 00:13:04.680
remember playing with next steps
in high school, but I

246
00:13:04.680 --> 00:13:07.380
don't remember ever getting into
that detail about how it

247
00:13:07.380 --> 00:13:10.620
actually worked. Yeah. Okay. So
when you drag, when, when

248
00:13:10.620 --> 00:13:13.800
I get a, when I
download something from a Mac

249
00:13:13.800 --> 00:13:16.620
shower site, I get a
DMG file. A disc image,

250
00:13:16.650 --> 00:13:19.110
like an ISO, right? Usually,
yeah. I open it up.

251
00:13:19.350 --> 00:13:23.010
I see an icon. I
drag the icon into the

252
00:13:23.010 --> 00:13:26.370
applications folder. Was it, was
it really an icon or

253
00:13:26.370 --> 00:13:28.860
was it just moving one
folder to another folder? Yeah.

254
00:13:28.890 --> 00:13:31.830
That was literally a directory
copy from the, from the

255
00:13:31.830 --> 00:13:35.510
read only disc image into
your applications folder. So on,

256
00:13:35.510 --> 00:13:39.450
on windows, we're always running
installed installers. Yes. And we're

257
00:13:39.810 --> 00:13:42.120
putting, you know, we're changing
the registry, which is a

258
00:13:42.120 --> 00:13:45.450
central storage location and we're
laying files down, but we're

259
00:13:45.450 --> 00:13:48.330
also checking to make sure
shared libraries are available. How

260
00:13:48.330 --> 00:13:52.020
would an application in the
Mac world do those things

261
00:13:53.550 --> 00:13:56.490
As, as a general rule,
we're very anti installer. I,

262
00:13:56.850 --> 00:13:59.580
for one, it annoys me
greatly. If an app requires

263
00:13:59.580 --> 00:14:03.000
an installer and it doesn't
actually need one, like some

264
00:14:03.000 --> 00:14:05.070
companies will, who kind of
don't know what they're doing

265
00:14:05.070 --> 00:14:07.440
with Mac development will they'll
build their app and then

266
00:14:07.440 --> 00:14:09.720
they'll put it in an
installer and it doesn't need

267
00:14:09.720 --> 00:14:11.820
one. You just copy it
off the, you just drag

268
00:14:11.820 --> 00:14:13.950
it off into the applications
folder, and that's all you

269
00:14:13.950 --> 00:14:16.830
need to do. But there
are exceptions to that thing

270
00:14:16.830 --> 00:14:20.640
with like drivers specifically would
have to be copied. They're

271
00:14:20.640 --> 00:14:23.310
usually in the form of
kernel extensions, and those have

272
00:14:23.310 --> 00:14:25.530
to be copied to a
specific folder to make them

273
00:14:25.530 --> 00:14:30.960
work. What's a kernel extension
in this context eats, You

274
00:14:30.960 --> 00:14:32.490
know, it would be something
like a driver for a

275
00:14:32.490 --> 00:14:36.000
Wacom tablet or Kernel extension
in the context of Linux

276
00:14:36.000 --> 00:14:38.580
and Mac iOS is something
that runs a wink at

277
00:14:38.580 --> 00:14:42.390
ring zero, Basically. Yeah. Okay.
It's literally loading into the

278
00:14:42.390 --> 00:14:45.630
kernel and providing some extra
support for hardware or whatever.

279
00:14:45.690 --> 00:14:47.640
And are those the kinds
of things that can crash

280
00:14:47.670 --> 00:14:51.860
Mack? Yeah. Those will get
you into like kernel and

281
00:14:52.340 --> 00:14:54.940
the only real hard kinds
of crap. I can tell

282
00:14:54.950 --> 00:14:58.300
Colonel panic. That's like our
blue screen Basically. Yeah. You

283
00:14:58.300 --> 00:14:59.590
see it? I don't know
if you've ever seen one

284
00:14:59.590 --> 00:15:01.390
on your, on your mini,
but I got a sad

285
00:15:01.390 --> 00:15:06.490
Mac once. Oh really? Oh,
that's kernel. Panic is like

286
00:15:06.490 --> 00:15:09.370
the whole screen darkens and
you see a message in

287
00:15:09.370 --> 00:15:12.910
every language that is supported
by Mexico. Yeah. Yeah. I

288
00:15:12.910 --> 00:15:15.610
did get that Japanese and
Chinese and the whole thing.

289
00:15:15.940 --> 00:15:18.820
Oh, okay. That's okay. Yeah.
That means something really bad

290
00:15:18.820 --> 00:15:23.920
happened. I must have plugged
something in. Okay. So anyway.

291
00:15:23.920 --> 00:15:25.960
Yeah. And in terms of
checking for dependencies and things

292
00:15:25.960 --> 00:15:29.950
like that, usually if there's
something really special, you need,

293
00:15:29.950 --> 00:15:32.710
you just, you would either
bundle it into your application.

294
00:15:34.060 --> 00:15:35.740
Well, let me ask you
this. Go back to WebKit.

295
00:15:35.740 --> 00:15:38.020
So you were saying that
you might want to use

296
00:15:38.020 --> 00:15:41.080
that library make that, that
service, that system level service

297
00:15:41.080 --> 00:15:43.360
was to be available, but
maybe you really want a

298
00:15:43.360 --> 00:15:45.100
certain version of that and
you don't have it again.

299
00:15:46.030 --> 00:15:49.420
What do you do? Well,
what I'd probably do is

300
00:15:49.420 --> 00:15:53.080
check for it at runtime.
Okay. And then that gives

301
00:15:53.080 --> 00:15:55.110
you the opportunity to pop
up a, you know, a

302
00:15:55.120 --> 00:15:58.090
nice explanatory, like I need
this version of Safari to

303
00:15:58.090 --> 00:16:01.420
be installed or I can't
run, and then you send

304
00:16:01.420 --> 00:16:04.450
them off to go get
it. Right. But that rarely

305
00:16:04.450 --> 00:16:09.220
happens Because it seems like
Mac applications say we work

306
00:16:09.220 --> 00:16:13.510
on this dot release MOS
10. Yeah. Full-stop yeah. And

307
00:16:13.510 --> 00:16:16.030
like on the windows world
and I'm juxtaposing, not in

308
00:16:16.030 --> 00:16:19.090
a, I'm not intending for,
to talk windows up or

309
00:16:19.090 --> 00:16:22.740
talk back down, we're just
juxtaposing the windows world. There,

310
00:16:22.740 --> 00:16:24.760
there are times when we'll
say this app only supports

311
00:16:24.760 --> 00:16:27.430
Vista and there are very
rare, but a few apps

312
00:16:27.430 --> 00:16:29.380
where they only support like
this to service pack one,

313
00:16:31.030 --> 00:16:33.820
I think it's 5.2 or
something like that. Vista has

314
00:16:34.050 --> 00:16:38.770
a number underneath it. That's
the real number two, but

315
00:16:38.770 --> 00:16:42.910
most often windows users really
want compatibility. Cause you've got

316
00:16:42.910 --> 00:16:45.310
like windows 95 people out
there. Right. So in my

317
00:16:45.310 --> 00:16:47.500
world, we're always talking about
how can I get this

318
00:16:47.500 --> 00:16:52.660
application to run in the
month 95, 98,000 Mac users.

319
00:16:52.660 --> 00:16:56.050
It seems like you guys
are more relaxed about that.

320
00:16:56.110 --> 00:16:59.050
And if it doesn't run
on <inaudible> well, I'll just

321
00:16:59.050 --> 00:17:02.740
upgrade it to ten five. Why
is that? Is it Some

322
00:17:02.740 --> 00:17:07.000
reason Mac uses are very,
I won't say early adopters,

323
00:17:07.000 --> 00:17:10.720
but they are, there don't
seem to be very afraid

324
00:17:10.720 --> 00:17:13.360
of upgrading to the latest
version of it. Haven't been

325
00:17:13.390 --> 00:17:16.540
burned by the upgrades. No,
not really mostly work. Right?

326
00:17:16.660 --> 00:17:19.720
Yeah. I mean, I upgraded
to leopard, right. That's 10

327
00:17:19.720 --> 00:17:24.520
point 0.5 and you know,
everything pretty much worked. I

328
00:17:24.520 --> 00:17:27.730
lost classic mode, so I
can't run my old applications

329
00:17:27.730 --> 00:17:30.760
anymore. Right. A kid picks
was a canvas, the casualty

330
00:17:30.760 --> 00:17:34.480
of that. Oh really quite
a bummer. But I did,

331
00:17:34.490 --> 00:17:35.860
I looked around the net
and it wasn't like a

332
00:17:35.860 --> 00:17:37.510
lot of people were up
in arms about the loss

333
00:17:37.510 --> 00:17:41.500
of kid picks is Right.
Most people by now I

334
00:17:41.500 --> 00:17:44.020
think have gotten replacements for
all of their, their classic

335
00:17:44.020 --> 00:17:46.960
apps. And they're pretty much
done with it. Okay. Very

336
00:17:46.960 --> 00:17:49.950
progressive bunch. Except for, of
course, Newton users who are

337
00:17:49.950 --> 00:17:53.720
still Desperately trying to use
the connection utilities. That's true.

338
00:17:54.110 --> 00:17:56.630
Okay. So, so back to
the structure. So there's Coda

339
00:17:56.630 --> 00:17:58.970
has coded.app and there's a
directory. And then there is

340
00:17:58.970 --> 00:18:00.650
that as far as the
convention goes, or is there

341
00:18:00.650 --> 00:18:03.590
a convention for things living
inside that directory? No, there's

342
00:18:03.590 --> 00:18:06.650
a there's convention for basically
the whole structure of that

343
00:18:06.650 --> 00:18:11.000
folder. So within that you
have, there's usually a folder

344
00:18:11.000 --> 00:18:13.790
called contents, which I think
is sort of vestigial. Cause

345
00:18:13.790 --> 00:18:16.370
it's usually like the first
and only thing in the

346
00:18:16.370 --> 00:18:21.200
top level. And then within
that contents folder, you'll have

347
00:18:21.200 --> 00:18:26.000
the actual binary for the
application. You'll have a thing

348
00:18:26.000 --> 00:18:29.960
called the info dot P
list, which is a property

349
00:18:29.960 --> 00:18:34.070
list file, which is basically
XML or like a binary.

350
00:18:34.220 --> 00:18:38.000
So this is a formalized
metadata kind of a sidecar

351
00:18:38.800 --> 00:18:41.600
along for the ride. Yeah.
It says sort of, here's

352
00:18:41.600 --> 00:18:44.480
the name of the app?
Here's the, the copyright information,

353
00:18:45.620 --> 00:18:48.500
you know, here's the path
to the execute. It didn't

354
00:18:48.500 --> 00:18:50.840
these used to be in
what they called the resource

355
00:18:50.840 --> 00:18:54.470
stream. Maybe I'm using my
Mac terms wrong, but I

356
00:18:54.470 --> 00:18:57.530
seem to remember that the
files had multiple streams within

357
00:18:57.530 --> 00:19:00.740
one place file forks forks.
There you go. That resource

358
00:19:00.740 --> 00:19:04.550
fork. Thank you. <inaudible> Separate
files. It's kind of an

359
00:19:04.550 --> 00:19:07.920
obsolete now, but that was
the MapQuest file system, which

360
00:19:07.940 --> 00:19:12.350
called the HFS supported this
notion of forked files. So

361
00:19:12.350 --> 00:19:15.650
you have a single file,
again, a single icon that

362
00:19:15.650 --> 00:19:19.010
has multiple forks on disc.
So you would, it would

363
00:19:19.010 --> 00:19:21.260
typically be yes to the
data fork and the resource

364
00:19:21.260 --> 00:19:27.320
fork. And in the very,
very early days, like, you

365
00:19:27.320 --> 00:19:30.170
know, original black and white
Mac, pretty much everything would

366
00:19:30.170 --> 00:19:33.170
be resource based like your,
your compiled binary code would

367
00:19:33.170 --> 00:19:36.590
be in a code resource,
your menu layouts and your

368
00:19:36.590 --> 00:19:39.020
UI layouts would be in
other different types of resources.

369
00:19:39.020 --> 00:19:43.490
Your fonts would be in
there, but it kind of

370
00:19:43.490 --> 00:19:45.980
created a world of pain
when, when dealing with other

371
00:19:46.040 --> 00:19:48.590
OSS, cause you would have
to find a way to

372
00:19:49.130 --> 00:19:53.030
collapse these two different sections.
I was always running Mac

373
00:19:53.030 --> 00:19:55.850
opener and I find what
I thought was one file

374
00:19:55.850 --> 00:19:59.560
was two or three. Yeah.
And that's kind of a

375
00:19:59.570 --> 00:20:02.810
bit of legacy Mac voodoo.
That's not real common anymore.

376
00:20:03.680 --> 00:20:08.270
You still occasionally see things
with a resource for ironically,

377
00:20:08.270 --> 00:20:12.980
usually the, the bigger development
houses, Microsoft and Adobe you'll

378
00:20:12.980 --> 00:20:15.350
you'll sometimes see them sort
of cause they have so

379
00:20:15.350 --> 00:20:19.040
much code to, to migrate
to the, towards what, the

380
00:20:19.040 --> 00:20:20.930
way things are working now
that it, it takes them

381
00:20:20.930 --> 00:20:23.990
a while to get there.
But it's, I think most

382
00:20:23.990 --> 00:20:26.930
everyone is, is moved away
from that now, which is

383
00:20:27.050 --> 00:20:29.420
I think a good thing.
So is the result of

384
00:20:29.420 --> 00:20:31.700
your build? I mean guys,
do you have daily builds

385
00:20:31.730 --> 00:20:34.370
and is the result of
your build this directory structure?

386
00:20:35.600 --> 00:20:38.630
For some of our, our
applications, we do have a,

387
00:20:38.960 --> 00:20:41.780
like a Cron process that
runs nightly and spits out

388
00:20:41.780 --> 00:20:44.120
a new build. And yeah,
the output is, is, is

389
00:20:44.120 --> 00:20:46.460
the.app. And how do you
look in there? I mean,

390
00:20:46.520 --> 00:20:48.190
you have to get the
development STK to say, I

391
00:20:48.190 --> 00:20:49.840
don't want you to look
like an icon right now.

392
00:20:49.840 --> 00:20:51.370
I need to be poking
around in here for debugging

393
00:20:51.370 --> 00:20:53.700
purposes. You can actually do
it with the regular finder.

394
00:20:53.700 --> 00:20:56.010
If you a control, click
on an icon and say,

395
00:20:56.010 --> 00:21:00.060
show package contents. So control,
click show, package contents. And

396
00:21:00.060 --> 00:21:02.010
that takes the glasses off
and I'll see reality to

397
00:21:02.020 --> 00:21:04.050
open it. Like it's a
regular phone or do that

398
00:21:04.050 --> 00:21:08.250
immediately. Okay. Poker, but that's,
and that's also where inside

399
00:21:08.250 --> 00:21:12.660
that, inside that directory bundle,
you also have things like

400
00:21:14.400 --> 00:21:16.530
loadable frameworks and things like
that. So if you have

401
00:21:16.530 --> 00:21:18.990
like something equivalent to a
DLL and you want to

402
00:21:18.990 --> 00:21:22.350
package it in with your
application so that when the

403
00:21:22.350 --> 00:21:24.960
user drags that icon into
the application, solar comes along

404
00:21:24.960 --> 00:21:27.810
for the ride. So it
just, it's sort of a,

405
00:21:28.410 --> 00:21:31.290
a standardized way of just
packaging, an executable and all

406
00:21:31.290 --> 00:21:36.660
of its dependent resources. And
two really interesting transitions have

407
00:21:36.660 --> 00:21:38.940
happened in the last couple
of years in Mac. The

408
00:21:38.940 --> 00:21:42.330
first was the introduction of
Intel, which seemed to go

409
00:21:42.330 --> 00:21:45.120
very smoothly. And then there
was the introduction of 64

410
00:21:45.120 --> 00:21:48.060
bit. And in both of
these instances, it doesn't seem

411
00:21:48.060 --> 00:21:50.970
like, you know, my mom
and those kinds of users

412
00:21:50.970 --> 00:21:54.090
has really sweated it. What
are the kinds of things

413
00:21:54.090 --> 00:21:56.700
that, that made that possible?
And what are the things

414
00:21:56.700 --> 00:21:58.560
that didn't work that were
actually very painful from a

415
00:21:58.560 --> 00:22:02.070
developer's perspective? Because there was
this power PC to Intel,

416
00:22:02.460 --> 00:22:04.470
which I assume it was
new compilers and new libraries

417
00:22:04.470 --> 00:22:06.150
and new everything. And some
things worked and some things

418
00:22:06.150 --> 00:22:09.120
didn't. And then now I
understand that 10.5 and 64

419
00:22:09.120 --> 00:22:12.030
bit, there must be a
third two-bit thunking layer and

420
00:22:12.030 --> 00:22:15.330
there must be some 32
bit processes that are running

421
00:22:16.170 --> 00:22:18.450
Well to, to get back
to the CPU for a

422
00:22:18.450 --> 00:22:22.140
second. The it's interesting. This
is actually the second. If

423
00:22:22.140 --> 00:22:24.360
you think about it, CPU
architecture change that the Mac

424
00:22:24.360 --> 00:22:28.200
has had being the first
being 68,000 series to power

425
00:22:28.210 --> 00:22:31.500
PC. So kind of been
around that block once already.

426
00:22:32.040 --> 00:22:35.280
And they came up with
some, you know, creative stuff

427
00:22:35.310 --> 00:22:38.760
there. And the in, even
before that, if you go

428
00:22:38.760 --> 00:22:41.520
way back, there was a
switch to, from 24 bit

429
00:22:41.520 --> 00:22:44.400
to 32 bit addressing, which
broke all the apps that

430
00:22:44.400 --> 00:22:46.350
were like, Hey, we could,
you know, store extra stuff

431
00:22:46.350 --> 00:22:49.050
in this, in this bite.
So yeah, the thing about

432
00:22:49.050 --> 00:22:52.140
the CPU architecture changes that
we've, we've actually done this

433
00:22:52.140 --> 00:22:57.270
once before with the 68,000
to the power PC. And

434
00:22:57.270 --> 00:22:59.280
so we kind of been
around this block a little

435
00:22:59.280 --> 00:23:01.410
bit and they came up
with lots of, of creative

436
00:23:01.440 --> 00:23:03.360
tricks, you know, to, to
get us up and running

437
00:23:03.360 --> 00:23:07.020
on power PC and broke
everyone who was, you know,

438
00:23:07.030 --> 00:23:09.180
trying to store data in
the extra bite of their

439
00:23:09.180 --> 00:23:12.210
24 bit addresses. And Was
that a painful time? I

440
00:23:12.210 --> 00:23:13.860
mean, from the user's point
of view, did I assume

441
00:23:13.860 --> 00:23:16.410
things got, worked out, but
as a developer, just things

442
00:23:16.410 --> 00:23:19.860
fell apart. Everything had mostly
gone to power PC by

443
00:23:19.860 --> 00:23:24.510
the time I came along.
So I didn't catch too

444
00:23:24.510 --> 00:23:27.080
much of that, but there
was still a lot of

445
00:23:27.720 --> 00:23:30.120
transition. Even at that time,
they were getting rid of

446
00:23:30.120 --> 00:23:35.190
the, the traditional Mac TCP
stack and moving to something

447
00:23:35.190 --> 00:23:38.940
called open transport that was
all stream based. And so

448
00:23:38.940 --> 00:23:41.760
a lot of people were
having to bridge their network

449
00:23:41.760 --> 00:23:44.100
code depending on whether you
had MC TCP or open

450
00:23:44.100 --> 00:23:47.270
transport loaded, Oh God, this
is, this is also long

451
00:23:47.270 --> 00:23:50.770
ago, pain, so pain. But
then recently your company had

452
00:23:50.770 --> 00:23:53.020
to deal with the transition
from power PC to Intel

453
00:23:53.020 --> 00:23:55.330
though. Yeah. So as the,
as the owner of a

454
00:23:55.330 --> 00:23:58.510
company, when that happens, it's
like, okay, here's how it's

455
00:23:58.810 --> 00:24:01.540
here's what's coming down. Everyone
was, was pretty nervous when

456
00:24:01.540 --> 00:24:03.640
it was announced, because I
was like, wow, that sounds

457
00:24:03.640 --> 00:24:07.960
like a big change and
know and all that. And

458
00:24:09.880 --> 00:24:12.190
what they did was they
started out by shipping everyone

459
00:24:12.190 --> 00:24:15.430
sort of a, what they
call the transition developer kit,

460
00:24:15.940 --> 00:24:22.870
which was very early, like
Cro-Magnon until Mac that would,

461
00:24:22.960 --> 00:24:26.200
was running a Mac iOS
10 built on Intel. And

462
00:24:26.230 --> 00:24:28.690
what, the first thing that
was immediately noticeable was that

463
00:24:28.690 --> 00:24:31.630
it all just worked like
it, wasn't doing weird crashy

464
00:24:31.630 --> 00:24:34.270
things. And it was just
MapQuest 10 with a different

465
00:24:35.050 --> 00:24:37.960
CP, Which is kind of
indifferent Indianness, which, I mean,

466
00:24:37.960 --> 00:24:41.320
people can't overestimate and DNS
will bite you. Oh yeah.

467
00:24:42.130 --> 00:24:45.730
Depending on how you start
it. Yeah. And so that

468
00:24:45.730 --> 00:24:48.880
was the most impressive thing
was it just ran like

469
00:24:48.880 --> 00:24:51.160
it did on PRPC in
terms of the OSTP and

470
00:24:51.160 --> 00:24:54.330
there wasn't really any, you
know, if you had sat

471
00:24:54.340 --> 00:24:55.960
the Mac user down in
front of it, they wouldn't

472
00:24:55.960 --> 00:24:58.360
have known anything was, was
different really, other than it

473
00:24:58.360 --> 00:25:00.760
was a bit faster. That's
the magic of Crohn's compilation.

474
00:25:00.760 --> 00:25:02.650
I mean, C is a
portable language. And as long

475
00:25:02.650 --> 00:25:05.320
as you think about, I
mean, I've done, I've done

476
00:25:05.320 --> 00:25:08.050
C programming on the Palm
pilot, which I think was

477
00:25:08.050 --> 00:25:10.780
a 68,000 at the time,
probably I ran into Indian

478
00:25:10.780 --> 00:25:13.900
this when I was doing
my shareware license keys. Right.

479
00:25:13.960 --> 00:25:17.110
I generated them on my
PC, had to confirm them

480
00:25:17.290 --> 00:25:20.170
on my, on my Palm
pilot and it didn't work.

481
00:25:20.200 --> 00:25:22.030
Yup. And it was all
written in C on both

482
00:25:22.030 --> 00:25:25.330
sides. Then I said, Oh,
you know, if big Indian

483
00:25:25.420 --> 00:25:27.520
yep. Do this exactly a
little if deaf and you

484
00:25:27.520 --> 00:25:29.890
were cool. Was that what
it was new compilers? And

485
00:25:29.890 --> 00:25:33.130
some if deaths That was
kind of, it, it was

486
00:25:33.130 --> 00:25:36.550
surprisingly painless. Like there were
a few Indian things and

487
00:25:36.550 --> 00:25:38.320
I think they were serial
numbers for us as well.

488
00:25:38.410 --> 00:25:40.150
Really. Yeah. I mean, how
many times do you have

489
00:25:40.150 --> 00:25:43.240
to think about things in
terms of, and Never really,

490
00:25:43.270 --> 00:25:45.040
I mean, you know, we
deal with a lot of

491
00:25:45.070 --> 00:25:47.350
network code and there's, there's
such thing as network abide

492
00:25:47.350 --> 00:25:49.870
order, which is, you know,
things are done a certain

493
00:25:49.870 --> 00:25:51.430
way there. And so we
didn't have to worry about

494
00:25:51.430 --> 00:25:54.940
that. Our stuff's not real
CPU intensive for the most

495
00:25:54.940 --> 00:25:58.090
part. So there wasn't a
lot of mathematical algorithms that

496
00:25:58.090 --> 00:26:00.820
we had to that were
hand optimized assembler or anything

497
00:26:00.820 --> 00:26:03.250
like that. It was, we
mostly just called into the,

498
00:26:03.250 --> 00:26:05.110
into the API is, and
I think if you did

499
00:26:05.110 --> 00:26:09.580
that, everything mostly went. Yeah.
And the same thing happened

500
00:26:09.580 --> 00:26:12.010
on the poem. The poem
changed from one CPU to

501
00:26:12.010 --> 00:26:15.280
another. I think they went
from a six to 8,000

502
00:26:15.280 --> 00:26:20.140
to a small arm processor
and, and I wasn't playing

503
00:26:20.710 --> 00:26:23.200
well, I was writing directly
to video memory and I

504
00:26:23.350 --> 00:26:26.080
paid the price. Well, all
my friends in the poem

505
00:26:26.140 --> 00:26:29.020
community were writing to the
API APIs. And that's really

506
00:26:29.020 --> 00:26:30.640
it. I mean, when you're
doing your writing, any kind

507
00:26:30.640 --> 00:26:33.670
of a kid support those
public API APIs and things

508
00:26:33.670 --> 00:26:35.650
will usually work out. Yeah.
They always tell you, you

509
00:26:35.650 --> 00:26:37.480
know, use the API is
don't touch the hardware and

510
00:26:37.480 --> 00:26:39.250
you're like, yeah, I go,
whatever, I'll touch the hardware.

511
00:26:39.250 --> 00:26:41.920
And then there's something like
this eventually comes along. So

512
00:26:41.920 --> 00:26:46.880
what about the 32 to
four bit transition? I'm not,

513
00:26:46.880 --> 00:26:48.620
I'm not probably the best
person in the world to

514
00:26:48.620 --> 00:26:50.990
talk about it since my
64 bit experience is kind

515
00:26:50.990 --> 00:26:54.620
of limited. Oh, you're running
tight. You're running leopard. Yep.

516
00:26:54.800 --> 00:26:56.630
And you're running it on
a core two duo. Yep.

517
00:26:57.050 --> 00:27:00.440
And did this, does the
OSTP support letting you know

518
00:27:00.440 --> 00:27:02.660
whether or not a process
is running 64 bit or

519
00:27:02.660 --> 00:27:06.830
not? I believe the way
it's managed is the same

520
00:27:06.830 --> 00:27:09.890
way that you can ship
an app that runs on

521
00:27:09.890 --> 00:27:12.770
both power PC and Intel,
and that's done through what

522
00:27:12.770 --> 00:27:15.530
they called the fat binary.
Ah, this is this universal

523
00:27:15.530 --> 00:27:18.050
binary that everyone was shipping.
Right. Exactly. And they were

524
00:27:18.050 --> 00:27:21.440
complaining that Adobe wasn't stepping
up and shipping universal binary

525
00:27:21.440 --> 00:27:25.580
versions of stuff. Right. It
was not until CS three

526
00:27:25.610 --> 00:27:29.120
came out that Adobe was
shipping. An Intel native version

527
00:27:29.140 --> 00:27:33.290
of Was he as three,
his creative suite, Creative suite

528
00:27:33.290 --> 00:27:37.100
three, which is Photoshop and
illustrator. So a universal binary

529
00:27:37.100 --> 00:27:40.460
is just more of the
same, this.app thing where you

530
00:27:40.460 --> 00:27:42.560
have a hidden folder. And
then they just had two

531
00:27:42.560 --> 00:27:44.840
versions, one for power PC,
and one for Intel. It

532
00:27:44.840 --> 00:27:49.220
basically compiles twice. It compiles
once targeting power, PC compiles,

533
00:27:49.220 --> 00:27:52.610
once targeting Intel. And then
at the end it runs

534
00:27:52.610 --> 00:27:56.900
a program that basically just
kind of glued them together

535
00:27:56.900 --> 00:28:00.650
into one binary. And then
the loader, when you launch

536
00:28:00.650 --> 00:28:03.320
your app will knows what
architecture is running on, obviously,

537
00:28:03.350 --> 00:28:06.320
and loads the correct binary.
That's interesting that they have

538
00:28:06.320 --> 00:28:11.030
the convention for having this,
this folders and the.app thing.

539
00:28:11.630 --> 00:28:14.900
But rather than having side-by-side
binaries, they actually melted them

540
00:28:14.900 --> 00:28:17.570
together into one. Yeah. That
is kind of interesting. Cause

541
00:28:17.570 --> 00:28:19.910
it seems like there's, there's
an allowance in the, in

542
00:28:19.910 --> 00:28:24.170
the folder structure to have
multiple wineries. And like there

543
00:28:24.170 --> 00:28:26.870
is actually like a macro
S folder within that, that

544
00:28:26.870 --> 00:28:29.390
seems like, Oh, you could
have sub folders and they

545
00:28:29.390 --> 00:28:31.100
didn't, I'm not sure why
they didn't go that route.

546
00:28:31.100 --> 00:28:33.980
I'm sure there's probably maybe
a performance reason, but, And

547
00:28:34.320 --> 00:28:36.620
it has had there been
problems where you've debugged the

548
00:28:36.620 --> 00:28:41.750
system only on the power
PC version. Well, they, I

549
00:28:41.750 --> 00:28:44.510
mean, during the transition, it
was hard to cause you

550
00:28:44.510 --> 00:28:46.700
would kind of also have
to do testing on both

551
00:28:47.270 --> 00:28:49.490
platforms. And so it was
kind of a chore and

552
00:28:50.060 --> 00:28:53.210
every once in a while
we'd miss something. But, but

553
00:28:53.210 --> 00:28:55.580
yeah, they're, there are separate
and distinct binaries that have

554
00:28:55.940 --> 00:28:58.910
been compiled, you know, differently.
So for the most part,

555
00:28:58.910 --> 00:29:02.030
those things just work. Yeah.
And I think 64 bit

556
00:29:02.030 --> 00:29:04.850
is works more or less
the same way. So there's,

557
00:29:05.000 --> 00:29:07.310
there's a 32 bit and
64 bit version of the

558
00:29:07.310 --> 00:29:11.690
system frameworks, the system API
APIs. And then it dynamically

559
00:29:11.690 --> 00:29:14.360
loads, your, your 64 bit
version, if you have one

560
00:29:14.420 --> 00:29:17.570
and dynamically links it to
the 64 bit version of

561
00:29:17.570 --> 00:29:19.730
the API. And is that
something that like Coda and

562
00:29:19.730 --> 00:29:21.350
your different applications have done
yet? Or are you still

563
00:29:21.350 --> 00:29:24.240
32? I think as far
as I know we were,

564
00:29:24.280 --> 00:29:27.080
we're still 32 bit on
our apps cause they're not

565
00:29:27.080 --> 00:29:29.840
very compute. So unless you
need piles of memory and

566
00:29:30.020 --> 00:29:32.390
people don't really care right
now on the, on the

567
00:29:32.390 --> 00:29:36.620
PC side, you know, the.net
programmers do everything, talking to

568
00:29:36.620 --> 00:29:39.710
an intermediate format, like, like
a byte code, like a

569
00:29:39.710 --> 00:29:43.390
Java byte code it's called
<inaudible> intermediate language. So we

570
00:29:43.390 --> 00:29:47.410
write C-sharp or VB or
whatever iron Python and it

571
00:29:47.410 --> 00:29:52.270
compiles to this IRL, which
is then jetted by either

572
00:29:52.270 --> 00:29:55.750
a 64 bit or 32
bit jitter. So we don't

573
00:29:55.750 --> 00:29:57.940
think about it either, but
we only ship the one

574
00:29:57.940 --> 00:30:01.540
thing, but we have a
flag that you can Mark.

575
00:30:01.540 --> 00:30:04.300
And you can say this
executable is just 32 bits

576
00:30:04.870 --> 00:30:08.380
or this one's just 64
or this one's any CPU.

577
00:30:08.410 --> 00:30:10.600
And the CPU flag is
that kind of magic bit.

578
00:30:10.650 --> 00:30:13.000
You do that. I see
you ship your XC and

579
00:30:13.000 --> 00:30:14.830
it gets jetted just in
time. And then lined up

580
00:30:14.830 --> 00:30:16.800
with two different versions. Like
you said, Versions of the

581
00:30:16.800 --> 00:30:19.800
framework. So that's like your
universal binary. Yeah, exactly. So

582
00:30:19.920 --> 00:30:23.370
the, the fact that it's
not really machine code is

583
00:30:23.430 --> 00:30:25.230
the compilation. Let me put
it this way. The compilation

584
00:30:25.230 --> 00:30:26.940
step that you speak of
where you have to compile

585
00:30:27.330 --> 00:30:30.750
two versions that is left
to the user's computer to

586
00:30:30.750 --> 00:30:34.590
do that at the load
time. And then it spins

587
00:30:34.590 --> 00:30:38.430
off. But we get nailed
when, for example, a 64

588
00:30:38.430 --> 00:30:43.710
bit process might accidentally called
down into them some 32

589
00:30:43.710 --> 00:30:46.260
bit Fang. And I see
it's good. It's called P

590
00:30:46.260 --> 00:30:49.800
invoking. We're basically we're, we're
living in this a higher

591
00:30:49.800 --> 00:30:51.600
level of abstraction. And as
soon as we decided to

592
00:30:51.600 --> 00:30:54.660
break, the fourth wall started
poking around. Then you get,

593
00:30:54.900 --> 00:30:57.360
then you get hurt. Now,
if you, if you, if

594
00:30:57.360 --> 00:30:59.040
you guys were in the
business of doing drivers, I

595
00:30:59.040 --> 00:31:00.930
assume you'd have to be
thoughtful about what was going

596
00:31:00.930 --> 00:31:04.110
on in the kernel. And
there'll be 64 bit drivers

597
00:31:04.110 --> 00:31:06.960
in three days With drivers.
Yeah, I imagine so we've

598
00:31:06.960 --> 00:31:09.210
never, never gone down that
road, but For the app

599
00:31:09.210 --> 00:31:12.210
developer you're just using, is
it X code and objective

600
00:31:12.210 --> 00:31:14.730
C that's your primary developer
Environment. That's right. Yeah. X

601
00:31:14.730 --> 00:31:19.620
code is an IDE that
Apple provides that does basically

602
00:31:19.620 --> 00:31:22.170
everything. So it's like visual
studio it's at the Apple

603
00:31:22.170 --> 00:31:24.090
visual studio. Yeah. In a
way. Yeah. And so then

604
00:31:24.090 --> 00:31:26.400
people that are writing desktop
Mac applications, they use X

605
00:31:26.400 --> 00:31:28.020
code. Do they use anything
else or is it almost

606
00:31:28.020 --> 00:31:31.830
always It's pretty much always
excode there, there aren't any

607
00:31:31.830 --> 00:31:35.550
real alternatives to it yet,
which is kind of odd.

608
00:31:35.580 --> 00:31:37.440
I guess the, the market
is so small that no,

609
00:31:37.440 --> 00:31:40.950
one's really seen a, you
know, a financial opportunity there.

610
00:31:41.430 --> 00:31:43.230
I mean, you could also
go sort of a classic

611
00:31:43.230 --> 00:31:45.780
Unix route and have something
with a make file and

612
00:31:46.350 --> 00:31:48.930
you know, and do your
editing in a whatever editor

613
00:31:48.930 --> 00:31:51.300
you want. But yeah. But
most people don't use code

614
00:31:51.300 --> 00:31:53.580
just cause it's all nice
one place. Yeah. So it's

615
00:31:53.580 --> 00:31:55.710
got the momentum, it sounds
like visual studio in that

616
00:31:55.710 --> 00:31:59.250
context. I mean, they're all
alternatives, but yeah, The big

617
00:31:59.250 --> 00:32:03.570
compiler, it used to be
code warrior and then Mac

618
00:32:03.570 --> 00:32:06.300
was 10 came along and
it kind of sort of

619
00:32:06.300 --> 00:32:09.120
killed code warrior because they
just weren't ready for it.

620
00:32:09.120 --> 00:32:11.040
And yeah. Yeah. Metro works
code where I did all

621
00:32:11.040 --> 00:32:14.370
my Palm work. Really. Yeah.
I love that. Yeah. That

622
00:32:14.370 --> 00:32:16.200
was a good idea. Yeah.
It was fine. I don't

623
00:32:16.200 --> 00:32:17.670
know if they still exist
for a while. They switched

624
00:32:17.670 --> 00:32:20.360
to just doing like embedded
stuff only like Polman and

625
00:32:20.370 --> 00:32:21.900
things like that. Yeah. I
mean they were, they really

626
00:32:21.900 --> 00:32:25.590
were targeting the processor at
that point. Yeah. So yeah,

627
00:32:25.590 --> 00:32:27.900
when the processor market changed
from Mac, they went away.

628
00:32:28.530 --> 00:32:31.380
So when I hear objective
C I think low level

629
00:32:31.380 --> 00:32:33.270
and I think I'll get
it. See, and what, you

630
00:32:33.270 --> 00:32:35.610
know, what kind of point
D referencing must even have

631
00:32:35.610 --> 00:32:38.520
to deal with every day?
Is this, this ignorance on

632
00:32:38.520 --> 00:32:42.170
my part? I'm sure. Objective
C is real interesting. Cause

633
00:32:42.170 --> 00:32:44.270
your first reaction is to
look at it and sort

634
00:32:44.270 --> 00:32:47.120
of run screaming because there's
like these brackets everywhere. And

635
00:32:47.690 --> 00:32:51.380
I know that was my
reaction and, but I've over

636
00:32:51.380 --> 00:32:53.690
time, like really come to
enjoy it. And it's, it's

637
00:32:53.690 --> 00:32:57.320
like one of my favorite
languages now. And all it

638
00:32:57.320 --> 00:33:00.050
is, is straight C with
a little bit of an

639
00:33:00.050 --> 00:33:05.900
extra syntax layer. So it
gives you an object model

640
00:33:05.930 --> 00:33:09.320
and it gives you things
like, you know, all the

641
00:33:09.320 --> 00:33:11.180
things that you would expect
from an object oriented language.

642
00:33:12.650 --> 00:33:18.980
And interestingly enough, leopard introduces
objective C two, which is

643
00:33:19.550 --> 00:33:23.500
so I should back up
objective C has it's it's

644
00:33:23.500 --> 00:33:26.540
it's the language, but there's
also the runtime, which is

645
00:33:26.540 --> 00:33:28.930
a crucial component. Cause it's
a very dynamic, There's the

646
00:33:28.930 --> 00:33:32.380
B to C and the
C runtime that you always

647
00:33:32.380 --> 00:33:34.330
have a C run time
on whatever platform you're targeting.

648
00:33:34.540 --> 00:33:36.580
Right. So you have the
objective C one time, which

649
00:33:36.580 --> 00:33:39.340
is I'm sure all of
that plan. Right. And that's

650
00:33:39.340 --> 00:33:41.500
what handles like, you know,
here's these classes that are

651
00:33:41.500 --> 00:33:44.320
available. And when you, when
you send a message to

652
00:33:44.320 --> 00:33:47.740
a class and like figuring
out what the actual, you

653
00:33:47.740 --> 00:33:49.360
know, who it gets sent
to and all that good

654
00:33:49.360 --> 00:33:52.690
stuff. So that's the objective
see around time and in

655
00:33:52.690 --> 00:33:56.200
leopard that was revved to
support things like garbage collection

656
00:33:56.680 --> 00:34:00.970
and some other kind of
nice additional things. You can

657
00:34:01.120 --> 00:34:04.810
make a string and don't
worry about D referencing it

658
00:34:04.810 --> 00:34:07.600
later. You don't have to
go Malak running free. Right.

659
00:34:07.660 --> 00:34:12.490
Right. Generally the, the, the,
historically the method has been

660
00:34:12.490 --> 00:34:16.000
that you, you, you, you
would have like an object

661
00:34:16.000 --> 00:34:19.480
called my object and you
would say my object, alloc

662
00:34:19.660 --> 00:34:24.790
knit. And so alloc does
the, essentially the Malak and

663
00:34:24.790 --> 00:34:27.670
then a knit sets it
up with its initializes, the

664
00:34:27.670 --> 00:34:30.370
variables, and Right. So then
C plus plus, you know,

665
00:34:30.670 --> 00:34:32.410
you make your class, your
new class and then the

666
00:34:32.410 --> 00:34:35.800
constructor happens. It's implied. Exactly.
Is this objective C or

667
00:34:35.800 --> 00:34:40.150
is this objective C plus
plus There's both. I don't

668
00:34:40.150 --> 00:34:42.520
know anyone who uses objective
C plus plus, but I

669
00:34:42.520 --> 00:34:45.370
think it's mainly if you
have existing C plus plus

670
00:34:45.370 --> 00:34:49.030
code that you want to
make, run in an objective

671
00:34:49.030 --> 00:34:52.450
SeaWorld Using structure classes. I
mean, can you, can structures

672
00:34:52.450 --> 00:34:56.080
have behavior, No strikes or
just regular C strikes you

673
00:34:56.320 --> 00:35:00.430
objective C has its own
class concepts that it uses.

674
00:35:03.040 --> 00:35:05.530
And it's all very dynamic.
So you can do like

675
00:35:05.560 --> 00:35:08.050
goofy things like swapping out
one class for another, at

676
00:35:08.050 --> 00:35:12.190
runtime and having one class
poses, another class and various

677
00:35:12.190 --> 00:35:14.050
tricks like that, depending on
how deep of a hole

678
00:35:14.050 --> 00:35:16.330
you want to dig your
studio, Two interfaces. Do you

679
00:35:16.330 --> 00:35:18.520
like to find an interface
and say that any one

680
00:35:18.520 --> 00:35:20.710
of these three guys will
implement that interface? So any

681
00:35:20.710 --> 00:35:24.100
of them are suitable for
plugable componentry like a sub

682
00:35:24.130 --> 00:35:27.130
sub classical type of not
subclass in the, in the

683
00:35:27.130 --> 00:35:28.690
abstract base class. Since like,
I mean, you could go

684
00:35:28.690 --> 00:35:32.230
and say public class person
and then derive tall guy,

685
00:35:32.230 --> 00:35:36.550
short guy, or I'm thinking
more public interface. I person

686
00:35:36.550 --> 00:35:39.480
where I accept anyone who
has this message signature, this

687
00:35:39.480 --> 00:35:42.600
method signature. If you, if
you're an object and you

688
00:35:42.600 --> 00:35:44.280
have first name and last
name, as far as I'm

689
00:35:44.280 --> 00:35:46.970
concerned, you're a person. And
that's cool. Yeah. You could

690
00:35:46.970 --> 00:35:50.460
do something like that. In
fact, if you want you,

691
00:35:50.460 --> 00:35:51.890
if you want, you can
even go a little lower

692
00:35:51.890 --> 00:35:54.920
than that. You can say,
does this object respond to

693
00:35:54.920 --> 00:35:59.060
this message? And if so,
I want to send it

694
00:35:59.060 --> 00:36:03.440
this message. It's actually distantly
derivative from smalltalk, which is,

695
00:36:04.820 --> 00:36:08.360
and kind of related languages
along the way, like self

696
00:36:08.390 --> 00:36:13.580
and this concept of objects
and sending messages to objects,

697
00:36:14.120 --> 00:36:17.300
but in a very dynamic
way. So things are not

698
00:36:17.300 --> 00:36:19.460
very, Yeah, that sounds very
kind of Ruby ass, because

699
00:36:19.460 --> 00:36:21.890
then you can go and
say, you know, method missing

700
00:36:21.890 --> 00:36:24.680
where you'll say, I'm the
handler for any objects that

701
00:36:24.680 --> 00:36:26.660
this object does, any messages,
this object doesn't know how

702
00:36:26.660 --> 00:36:29.240
to understand. Yeah. You could
do something like that. Or

703
00:36:31.580 --> 00:36:35.300
a lot of times there's
a concept of a delicate

704
00:36:35.300 --> 00:36:40.120
object, especially in the, in
the user interface. Like the,

705
00:36:40.120 --> 00:36:43.910
the, the embeddable web view
is an, is a traditional

706
00:36:43.910 --> 00:36:46.220
example of that. You'd say
you stick this, okay. This

707
00:36:46.220 --> 00:36:48.350
is the view class. So
it's going to be view

708
00:36:48.350 --> 00:36:52.550
things, only, not model things.
And then you say, okay,

709
00:36:52.550 --> 00:36:56.570
but this view has delegates.
And like, it might have,

710
00:36:56.570 --> 00:36:59.660
for example, a policy delicate,
which is when someone clicks

711
00:36:59.660 --> 00:37:02.150
on a link that opens
in a new window, what

712
00:37:02.150 --> 00:37:05.660
should I do? You know?
And then that's sort of

713
00:37:05.720 --> 00:37:08.890
a callback in a sense,
Okay, let's just go let's.

714
00:37:08.890 --> 00:37:10.700
So let's bring this full
circle. Cause we were talking

715
00:37:10.700 --> 00:37:14.600
about the WebKit, which is
the Apple, you know, HTML

716
00:37:14.600 --> 00:37:17.060
renderer. So I'm going to
write an application and I

717
00:37:17.060 --> 00:37:19.040
go into X code and
go file new project, and

718
00:37:19.040 --> 00:37:21.620
I'm gonna make a new
Apple application. And I want

719
00:37:21.620 --> 00:37:23.930
to use the web kit.
And I bring this, I

720
00:37:23.930 --> 00:37:25.790
get this on, on the,
on the form, somewhere in

721
00:37:25.790 --> 00:37:30.320
the dialogue, my resources, The,
the perms interface builder, which

722
00:37:30.320 --> 00:37:33.230
is the, the UI. So
you have, you have a

723
00:37:33.230 --> 00:37:36.450
separate kind of resource fork.
That's not, that's not the

724
00:37:36.450 --> 00:37:39.350
right word, but dialogues are
described in a declarative way.

725
00:37:40.190 --> 00:37:42.260
Right. And you know, there's
a visual editor called interface

726
00:37:42.260 --> 00:37:45.800
builder that generates what's it
called nib files. I think

727
00:37:45.830 --> 00:37:49.010
it comes from next interface,
stability. I've landed on Mars,

728
00:37:50.300 --> 00:37:52.640
nib files. And it's just,
it's a toy. It's so

729
00:37:52.640 --> 00:37:57.230
interesting to learn about other
cultures. And so I want

730
00:37:57.230 --> 00:37:59.690
to basically make a web
browser. So I put a

731
00:37:59.690 --> 00:38:02.270
couple of buttons on there.
They're my buttons, not, not

732
00:38:02.270 --> 00:38:06.890
WebKit buttons, but the WebKit
white area that says HTML,

733
00:38:06.890 --> 00:38:10.430
we'll go here, put in
a text box. Do I

734
00:38:10.430 --> 00:38:12.200
wire up events? And I
say, you know, when I

735
00:38:12.200 --> 00:38:14.660
hit go grab the Earl
out of that text box

736
00:38:14.660 --> 00:38:16.460
and tell WebKit to go
get it. Yeah, Yeah. You

737
00:38:16.460 --> 00:38:20.870
can do the codeless, a
web browser by essentially connecting

738
00:38:20.870 --> 00:38:23.510
the, the textbox to the
web view and saying when

739
00:38:23.510 --> 00:38:25.850
this text is entered, use
it as the rule And

740
00:38:25.850 --> 00:38:29.900
I'm sending messages at this
point. Yeah. It will. The,

741
00:38:31.310 --> 00:38:32.990
when you update the text
field, it will send a

742
00:38:32.990 --> 00:38:35.260
message to the, to the
web view to really, I

743
00:38:35.270 --> 00:38:37.930
get a codeless Like you
did. COVID okay. So the

744
00:38:37.930 --> 00:38:41.050
interface builder knows enough about
the messages that these various

745
00:38:41.050 --> 00:38:44.650
components provide. That's right. And
they're properties that I can

746
00:38:44.680 --> 00:38:48.390
line them up for anything.
Yep. And it's certainly when

747
00:38:48.390 --> 00:38:50.040
you need to get fancier
that you start to add,

748
00:38:50.070 --> 00:38:52.470
you know, code in there
for you. So you're grinning

749
00:38:52.470 --> 00:38:55.350
with means that codeless just
like with Microsoft, it's a

750
00:38:55.350 --> 00:38:58.050
fun demo, but it really
quickly doesn't work and you

751
00:38:58.050 --> 00:39:00.990
gotta get into the real
work It's for a surprising

752
00:39:01.140 --> 00:39:04.440
number of things. But yeah.
To get into any real

753
00:39:04.440 --> 00:39:06.510
nitty gritty, you're gonna have
to add some goat at

754
00:39:06.510 --> 00:39:11.580
some point. There's a real
interesting new concept that actually

755
00:39:11.580 --> 00:39:15.360
started one version prior to
leopard on tiger, which is

756
00:39:15.360 --> 00:39:18.510
called bindings, which was the
sense that, okay, we have

757
00:39:18.540 --> 00:39:22.140
all of these model objects
that are kind of standardized

758
00:39:22.170 --> 00:39:25.740
system level things. Right. And
we have these views, which

759
00:39:25.740 --> 00:39:27.690
are system standard, but we
don't have any sort of

760
00:39:27.690 --> 00:39:31.560
standard controller layer. And so
the notion of bindings was

761
00:39:31.560 --> 00:39:35.520
to say, it's a, it's
a notification system. So a

762
00:39:35.520 --> 00:39:38.670
model can say I changed
my value. And then all

763
00:39:38.670 --> 00:39:42.450
the views that are listening
to that model automatically hear

764
00:39:42.450 --> 00:39:46.050
that and update themselves and
go the other way. If

765
00:39:46.050 --> 00:39:49.830
someone changes the view, it
sentence propagates, all that information

766
00:39:49.830 --> 00:39:53.160
back to the model. I'm
trying to, I'm trying to

767
00:39:53.160 --> 00:39:55.890
find parallels because we've got
things there's so many different

768
00:39:55.890 --> 00:39:57.900
ways to pass messages. I
mean, with all OSS, there's

769
00:39:57.900 --> 00:40:01.050
like a half dozen different
ways with mail slots or

770
00:40:01.110 --> 00:40:03.660
pipes or whatever, you know,
God knows what's going on,

771
00:40:04.920 --> 00:40:08.520
which gets me thinking about
backward compatibility because one of

772
00:40:08.520 --> 00:40:11.160
the things, and don't take
this the wrong way. I

773
00:40:11.160 --> 00:40:12.690
mean, I've known you long
enough that you won't be

774
00:40:12.690 --> 00:40:16.950
offended, but it just seems
like, and I thought this

775
00:40:16.950 --> 00:40:18.660
before I worked for Microsoft
and now I think it

776
00:40:18.660 --> 00:40:21.180
even more that it really
bugs me when people get

777
00:40:21.180 --> 00:40:23.670
mad, when we're going to
yank support for windows 95

778
00:40:23.670 --> 00:40:25.960
or windows 2000, because those
things, what does it mean

779
00:40:25.960 --> 00:40:29.220
five is 13 years old.
And I feel that we

780
00:40:29.220 --> 00:40:30.630
should be able to yang,
you know, and I'm sure

781
00:40:30.630 --> 00:40:32.280
we've yet. I don't know
what the support life cycle

782
00:40:32.280 --> 00:40:33.720
is. And should we be
getting support for that? But

783
00:40:34.500 --> 00:40:36.360
Mac users don't seem to
get too mad when you

784
00:40:36.360 --> 00:40:38.820
yank something out from under
them. That's only a couple

785
00:40:38.820 --> 00:40:42.440
of years old. It is
interesting. You do. I mean,

786
00:40:42.480 --> 00:40:44.340
as a Mac person who
really could care less about

787
00:40:44.340 --> 00:40:46.860
windows, you do see the
hypocrisy in that. I do.

788
00:40:46.860 --> 00:40:51.540
Yeah. And it's not just
software. Like when the IMF

789
00:40:51.570 --> 00:40:54.090
came out, it had no
floppy drive. Oh my God.

790
00:40:54.420 --> 00:40:56.580
Yeah. It has no floppy
drive. What are we going

791
00:40:56.580 --> 00:40:59.670
to do? Like everyone freaked
out about the iMac, having

792
00:40:59.670 --> 00:41:02.400
no floppy drive. It has
made absolutely no difference. Well,

793
00:41:02.400 --> 00:41:05.040
another freaking out because the
MacBook air has no optical.

794
00:41:05.370 --> 00:41:11.700
Right. And no ethernet general.
Well, that's definitely. Yeah. And

795
00:41:11.700 --> 00:41:13.320
it's one of those things
that there's a level of

796
00:41:13.320 --> 00:41:14.970
like, Oh my God, what
are we going to do?

797
00:41:14.970 --> 00:41:17.490
And then I think over
time, people find out that

798
00:41:17.490 --> 00:41:22.920
it's really not that necessary.
And, but, you know, to

799
00:41:22.920 --> 00:41:24.810
get back to more the
software side of things. Yeah.

800
00:41:24.820 --> 00:41:29.430
They have been very aggressive
about dropping backwards compatibility. I

801
00:41:29.430 --> 00:41:32.220
mean, we went from the
classic versions of Mac iOS

802
00:41:32.230 --> 00:41:34.580
went up to eight and
the nine, and then there

803
00:41:34.580 --> 00:41:38.180
was this, well, there was
a transition to power PC

804
00:41:38.180 --> 00:41:41.690
there, which for the most
part worked, your applications would

805
00:41:41.690 --> 00:41:44.000
just work. And then this
massive switch to Mac was

806
00:41:44.000 --> 00:41:48.040
10 and completely different universe.
You know, What were you

807
00:41:48.040 --> 00:41:50.200
running in 2000? What was
the Mac world running in

808
00:41:50.200 --> 00:41:53.530
the, in the year, 2000,
2000. That was like right

809
00:41:53.530 --> 00:41:56.920
in the middle of that.
Okay. So if I'm running

810
00:41:56.920 --> 00:42:00.700
Mac iOS 10, Oh yeah.
Right now, which would be

811
00:42:00.700 --> 00:42:02.980
like windows 2000. Do I
get any love in the

812
00:42:02.980 --> 00:42:04.780
Mac community or do I
have no, there's no sympathy

813
00:42:04.780 --> 00:42:08.650
for me. No. Basically nothing
will, will run on here

814
00:42:08.670 --> 00:42:12.670
except probably what came with
dos. But I, I mean,

815
00:42:12.670 --> 00:42:15.040
we, we survey our users
from time to time. We

816
00:42:15.040 --> 00:42:16.750
have like a, you know,
an optin we'll send, you

817
00:42:16.750 --> 00:42:20.380
know, collect stats or whatever,
and there's zero people running

818
00:42:20.620 --> 00:42:24.580
that costs us 10.0. It's
the current version. And one

819
00:42:24.580 --> 00:42:28.990
version back accounts for probably
about 95%. Right. And this

820
00:42:28.990 --> 00:42:31.420
reminder version. So there's two
there's 10, five and 10,

821
00:42:31.780 --> 00:42:35.380
four, 10, four windows saying
it will only work on

822
00:42:35.380 --> 00:42:38.890
Vista service pack one and
Vista and everyone else is

823
00:42:38.890 --> 00:42:44.770
screwed. Kind of people have
petitions like save XP. I

824
00:42:44.770 --> 00:42:47.260
just, I think, I guess
it's because they're so big.

825
00:42:47.320 --> 00:42:51.880
I mean, there's businesses. Like
I always use this canonical

826
00:42:51.880 --> 00:42:54.010
example, which is the, I
don't know if this guy

827
00:42:54.010 --> 00:42:56.420
really exists. Cause I've been
talking about this theoretical, the

828
00:42:56.740 --> 00:42:59.950
chief architect of the Nebraska
department of forestry. This is

829
00:42:59.950 --> 00:43:03.550
my, my prototype guy. And
he's the guy who's got

830
00:43:03.550 --> 00:43:06.310
like, you know, windows 98
machines running access that have

831
00:43:06.310 --> 00:43:10.150
important data that it's fundamental
to his business. And I

832
00:43:10.150 --> 00:43:12.400
always wonder he doesn't want
to upgrade cause he doesn't

833
00:43:12.400 --> 00:43:14.110
want to mess anything up.
I always wonder if there's

834
00:43:14.620 --> 00:43:17.890
the same Mac guy out
there. I'm the system, seven

835
00:43:17.890 --> 00:43:20.770
guy who's running Phi units
running like a HyperCard and

836
00:43:20.770 --> 00:43:22.600
all his data is there.
And if he upgrades, it'll

837
00:43:22.600 --> 00:43:25.180
be over, We hear from
them from time to time.

838
00:43:25.180 --> 00:43:28.240
But they percentage wise as
far as we can tell

839
00:43:28.240 --> 00:43:30.970
there, they're very small minority.
Yeah. Well, now that you

840
00:43:30.970 --> 00:43:33.730
guys, let me say, you
guys and Mac folks have

841
00:43:33.730 --> 00:43:35.650
gone from like 3% to
like, what is it? 12

842
00:43:35.650 --> 00:43:38.980
or 13%, At least 10.
I think now I don't.

843
00:43:39.130 --> 00:43:40.510
And do you think this
is going to bite Steve

844
00:43:40.510 --> 00:43:43.420
in the butt when there
are many millions of people

845
00:43:43.420 --> 00:43:45.280
who are not really interested
in? Well, this is the

846
00:43:45.280 --> 00:43:47.950
thing I was thinking about
windows over lunch today is

847
00:43:47.950 --> 00:43:50.440
that they, you know, you've,
you've still got, I think

848
00:43:50.440 --> 00:43:52.750
in the, in the properties,
dialogue, you know, options for

849
00:43:52.990 --> 00:43:55.390
dusk compatibility mode and all
this stuff. Cause he knows

850
00:43:55.390 --> 00:43:57.790
somebody is like, horrible. Well
even on Vista you can

851
00:43:57.790 --> 00:44:02.290
run VisiCalc. Yeah. Like someone's
terrible point of sale. DOS-based,

852
00:44:02.290 --> 00:44:03.970
you know, thing is going
to break if they get

853
00:44:03.970 --> 00:44:05.200
rid of that. And I
don't know what you do

854
00:44:05.200 --> 00:44:08.080
about that. If you're Microsoft,
we suffered here, you're stuck.

855
00:44:08.080 --> 00:44:11.980
I mean, totally sucks. Which
is interesting. And I guess

856
00:44:11.980 --> 00:44:13.510
that is, you know, to
a point a function of

857
00:44:13.510 --> 00:44:16.570
market share. And I, I
just, I'm glad I don't

858
00:44:16.570 --> 00:44:18.160
have to be the one
who has to decide the

859
00:44:18.160 --> 00:44:20.590
path forward. Not yet. I
mean, I just think that

860
00:44:20.830 --> 00:44:24.670
at some point people won't,
won't take it anymore. Yeah.

861
00:44:25.060 --> 00:44:27.100
At some point Mac will
get big enough or open

862
00:44:27.100 --> 00:44:29.500
to or whatever. And it's
just, someone's going to get

863
00:44:29.500 --> 00:44:32.400
mad and they're going to
say, no, we want support.

864
00:44:32.550 --> 00:44:35.550
I mean, if you think
about it, it's people want

865
00:44:35.550 --> 00:44:37.350
it both ways. They want
to be able to run

866
00:44:37.350 --> 00:44:40.560
every program they've ever written.
That's ever been written all

867
00:44:40.570 --> 00:44:43.290
the time, but they also
don't want to crash. Yeah.

868
00:44:43.650 --> 00:44:45.690
Everything has to just work
out of the box. All

869
00:44:45.690 --> 00:44:48.600
drivers should magically just work.
Yeah. You can't win. Like

870
00:44:48.600 --> 00:44:49.740
there's this game right now.
I don't know if you

871
00:44:49.740 --> 00:44:52.320
guys have this on the
Mac it's called crisis. So

872
00:44:52.320 --> 00:44:54.150
I don't think so. The
guys that made far cry

873
00:44:54.230 --> 00:44:56.700
very, very high end game.
So this is not just

874
00:44:56.700 --> 00:44:59.010
a high end game. This
is a game that was

875
00:44:59.190 --> 00:45:02.730
sent back by Sarah Connor
for the future. You know,

876
00:45:02.760 --> 00:45:06.600
it's like some theory. It
literally runs on theoretical hardware.

877
00:45:06.960 --> 00:45:09.780
Nice, nice. I mean, I
have a quad proc. Wow.

878
00:45:09.900 --> 00:45:12.600
I have a quad proc
machine, you know, God's own

879
00:45:12.600 --> 00:45:14.970
video card and I've got
like a little cart, a

880
00:45:14.970 --> 00:45:17.700
little SLI thing going between
the two video cards. So

881
00:45:17.700 --> 00:45:21.000
they can work together as
a team. And I still

882
00:45:21.000 --> 00:45:24.150
drop frames on this game.
Wow. And people are complaining.

883
00:45:24.270 --> 00:45:27.960
Wow. You know, and of
course time will pass. It'll

884
00:45:27.960 --> 00:45:30.360
get, the hardware will happen.
And then we'll go, how

885
00:45:30.360 --> 00:45:34.410
did we ever live without
this kind of hardware? My

886
00:45:34.410 --> 00:45:36.570
dad's got a quad proc
machine. He can't get anything

887
00:45:36.570 --> 00:45:40.320
done. Yep, exactly. But gosh,
yeah, we should talk again

888
00:45:40.320 --> 00:45:43.710
sometime about things like, like
multi-core and what that means

889
00:45:43.710 --> 00:45:45.330
and how objective C's and
deal with that. Because we're

890
00:45:45.330 --> 00:45:48.540
doing some really interesting things
where you could take like

891
00:45:48.540 --> 00:45:51.870
a four loop and add
a parallel keyword and then

892
00:45:51.870 --> 00:45:54.630
it'll just magically work across
multiple. Oh, that's cool. You

893
00:45:54.630 --> 00:45:57.090
know, approx, I'm going to
be interested to see like,

894
00:45:57.390 --> 00:45:59.100
I'm sure you would have,
you have multiple threads and

895
00:45:59.100 --> 00:46:00.570
you have to deal with
multithreading and stuff like that.

896
00:46:00.570 --> 00:46:04.110
But yeah. Threads usually automatically
branch off into their own

897
00:46:04.110 --> 00:46:06.120
CPS, but I've not seen
anything. That's like the four

898
00:46:06.120 --> 00:46:09.330
loop level. That's pretty cool.
Well, thanks for, for letting

899
00:46:09.330 --> 00:46:11.820
me come down to visit
panic headquarters, Steven Franklin. No problem.

900
00:46:12.180 --> 00:46:14.310
And this has been another
episode of Hanselminutes and we'll

901
00:46:14.310 --> 00:46:15.540
see you again next week.

