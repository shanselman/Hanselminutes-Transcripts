WEBVTT FILE

1
00:00:12.120 --> 00:00:17.760
From hanselminutes.com. It's Hansel minutes,
a weekly discussion with web

2
00:00:17.790 --> 00:00:22.500
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.500 --> 00:00:29.010
number two 17 recorded live
Thursday, June 10th, 2010. Support for Hanselman.

4
00:00:29.010 --> 00:00:32.640
This is provided by Tellerik
rad controls, the most comprehensive

5
00:00:32.640 --> 00:00:36.270
suite of components for windows
forms and asp.net web applications

6
00:00:36.500 --> 00:00:44.880
online@wwwdottelerik.com. In this episode, Scott
talks with Javier Lozano about

7
00:00:44.880 --> 00:00:51.020
NBC turbine and IOC. Hi,
This is Scott Hanselman and

8
00:00:51.020 --> 00:00:53.510
this is another episode of
Hansel minutes. And today I'm

9
00:00:53.510 --> 00:00:57.290
sitting down with Javier Lozano,
the author of MVC turbine.

10
00:00:57.320 --> 00:00:59.930
How's it going, sir? Great
Scott, thanks for having us

11
00:01:00.000 --> 00:01:02.900
on board. No worries. So
talk to me about NBC

12
00:01:02.900 --> 00:01:06.620
turbine because I am an
NBC person. I like asp.net

13
00:01:06.740 --> 00:01:09.950
MVC, but when I put
out samples and when I

14
00:01:09.950 --> 00:01:13.280
start new applications, people are
always saying that I should

15
00:01:13.280 --> 00:01:16.790
use inversion of control and
auto wire up my controllers.

16
00:01:16.790 --> 00:01:19.850
And it always seems like
a huge hassle. And is

17
00:01:19.850 --> 00:01:22.880
NBC turbine something that, that
bridges that the gap between

18
00:01:22.880 --> 00:01:25.160
it's a hassle and what
comes out of the box?

19
00:01:25.730 --> 00:01:28.190
Yeah, it does. One of
the things that NBC turbine

20
00:01:28.190 --> 00:01:34.130
provides to the developer is
composition through use of IOC.

21
00:01:34.640 --> 00:01:38.540
So for example, you mentioned
about proclaiming your IOC container

22
00:01:38.540 --> 00:01:40.610
to get control their title
of it or view and

23
00:01:40.610 --> 00:01:44.150
just, and so forth. Well
manually, you have to, for,

24
00:01:44.180 --> 00:01:46.370
to get that working on
a spin on NBC, you

25
00:01:46.370 --> 00:01:49.550
have to actually plug into
the runtime and you have

26
00:01:49.550 --> 00:01:52.400
to, first of all, know
the runtime and know specifically

27
00:01:52.400 --> 00:01:55.160
where to plug it in
turbine, kind of removes that

28
00:01:55.160 --> 00:02:01.400
headache by plugging itself into
the runtime and eagerly fetching

29
00:02:02.270 --> 00:02:05.000
types that it cares about
such as few engines and

30
00:02:05.000 --> 00:02:07.910
controllers and so forth. So
it kinda takes you a

31
00:02:07.910 --> 00:02:11.690
step ahead from what you
will have to do manually,

32
00:02:12.170 --> 00:02:13.880
which is not hard, but
it's just, you know, extra

33
00:02:13.880 --> 00:02:17.990
work. So give me a
sense though, of what, what

34
00:02:18.560 --> 00:02:21.320
I would need to do
manually and why I would

35
00:02:21.320 --> 00:02:22.670
want to do it. I
mean, let's say I sit

36
00:02:22.670 --> 00:02:24.740
down, I go file new
project. I've got myself a

37
00:02:24.740 --> 00:02:28.520
nice asp.net MVC project. If
I type in the URL

38
00:02:28.760 --> 00:02:32.540
slash home slash about it's
automatically, you're going to use

39
00:02:32.540 --> 00:02:35.210
the default controller factory and
it's going to go off

40
00:02:35.270 --> 00:02:40.220
and find the home controller
and it'll do a little,

41
00:02:40.310 --> 00:02:42.170
I mean, I mean, I
didn't knew up the controller,

42
00:02:42.260 --> 00:02:45.230
right? So someone's doing that
work for me. Why would

43
00:02:45.230 --> 00:02:48.110
I need to get in
some IOC at that point,

44
00:02:48.410 --> 00:02:50.480
you bring up a very
good point there. The thing

45
00:02:50.480 --> 00:02:53.870
that it does. So is
that in most cases, depending

46
00:02:53.870 --> 00:02:55.400
on what you're doing for,
like, for example, on your,

47
00:02:55.400 --> 00:02:59.390
at home about, you're not
really doing anything that require

48
00:02:59.590 --> 00:03:02.320
any extra information, but say,
for example, in the home

49
00:03:02.320 --> 00:03:04.690
about, you may want to
fish and data out of

50
00:03:04.690 --> 00:03:09.970
the, out of a database
or some other resource. And

51
00:03:09.970 --> 00:03:11.560
that point you're, you're going
to have to connect to

52
00:03:11.560 --> 00:03:15.100
that resource. So by one
way of doing it is

53
00:03:15.100 --> 00:03:18.550
by injecting that, that piece,
you know, let's call it

54
00:03:18.550 --> 00:03:21.880
a repository right into, into
the controller and be able

55
00:03:21.880 --> 00:03:24.160
to get that so we
can test it and manage

56
00:03:24.160 --> 00:03:27.070
it differently. Well, for you
to do that out of

57
00:03:27.070 --> 00:03:31.990
the box, the default controlling
refractory breaks, because it, it

58
00:03:31.990 --> 00:03:36.220
uses activate or that created
instance behind the scenes. So

59
00:03:37.450 --> 00:03:41.830
for you to actually, you
know, get into the specifics

60
00:03:41.830 --> 00:03:44.800
of that, either a, you're
going to have to create

61
00:03:44.830 --> 00:03:48.100
a, sorry, a class that
inherits from the fall controller

62
00:03:48.100 --> 00:03:50.320
factory and kind of override
some of the methods and,

63
00:03:50.620 --> 00:03:52.840
and check if it's the
right controller and otherwise, you

64
00:03:52.840 --> 00:03:56.680
know, build up the, the
controller manually, or you can

65
00:03:56.860 --> 00:04:00.850
just use a controller factory
that's automatically wired up with

66
00:04:00.850 --> 00:04:03.910
an IOC and, and have
it give you those specifics.

67
00:04:04.180 --> 00:04:07.300
Okay. And it either way,
and, and, and if say,

68
00:04:07.300 --> 00:04:11.470
if your controller doesn't have,
doesn't have it dependencies, the,

69
00:04:11.730 --> 00:04:13.840
the IOC container is smart
enough to say, Oh, well,

70
00:04:13.870 --> 00:04:16.210
I'm going to create a
controller with, you know, with

71
00:04:16.210 --> 00:04:18.910
no dependencies because it just
has a plain old default

72
00:04:18.910 --> 00:04:21.690
constructor. Okay. So that, you're
saying a couple of things

73
00:04:21.690 --> 00:04:26.100
here then first that the
default controller factor that comes

74
00:04:26.100 --> 00:04:30.120
with ESPN and NBC is
fairly simplistic. I was going

75
00:04:30.120 --> 00:04:33.450
to say stupid, but I'll
say simplistic and is a

76
00:04:33.450 --> 00:04:39.630
basic convention, a convention based
factory, but it uses activator

77
00:04:39.640 --> 00:04:43.140
dot create instance underneath it,
which makes it very, very,

78
00:04:43.240 --> 00:04:46.830
basically a hard coded convention
style factory. And if I

79
00:04:46.830 --> 00:04:49.350
want to do anything at
all, that's, that's different, anything

80
00:04:49.350 --> 00:04:52.350
tricky injecting independencies at all.
I'm going to replace that

81
00:04:52.350 --> 00:04:56.160
factory anyway. Exactly. Yep. Okay.
So then why let's, let's

82
00:04:56.160 --> 00:04:59.040
say I pick a, an
IOC container. Let's say that

83
00:04:59.040 --> 00:05:02.460
I decide that I want
to use unity, which is

84
00:05:02.780 --> 00:05:06.300
an open source thing from
Microsoft. Why don't I just

85
00:05:06.450 --> 00:05:08.910
hook up unity in my
application? Where, why do I

86
00:05:08.910 --> 00:05:11.430
need NBC turbine? What is
it, what does MPC turbine

87
00:05:11.430 --> 00:05:15.090
by me? Yeah. I mean,
if, if you just one

88
00:05:15.120 --> 00:05:18.870
IOC for your controllers, and
like you said, you can

89
00:05:18.870 --> 00:05:22.560
use unity as does as
a controller factor enabled work.

90
00:05:22.560 --> 00:05:25.950
Just fine that the, I
will say the added value

91
00:05:25.950 --> 00:05:30.300
that turbine gives you is
that it provides the application.

92
00:05:30.300 --> 00:05:35.400
That's running it a piece
of composition outside of a

93
00:05:35.430 --> 00:05:39.330
just controller or, or any
other item within the asp.net

94
00:05:39.330 --> 00:05:42.750
framework. And what I mean
by composition. I mean, one

95
00:05:42.750 --> 00:05:45.360
of the concepts that turbine
has taught up to play

96
00:05:45.360 --> 00:05:48.480
on the whole theme of,
of the name is something

97
00:05:48.480 --> 00:05:52.860
called a blade, which what
I use it for and

98
00:05:52.860 --> 00:05:55.500
what turbine uses is for
is for a cross cutting

99
00:05:55.500 --> 00:06:01.520
concern injection into your, okay.
So for example, logging, right,

100
00:06:01.820 --> 00:06:04.190
we all do. We all
do logging in one way,

101
00:06:04.190 --> 00:06:06.620
shape or form, whether it's
console that right line or,

102
00:06:06.920 --> 00:06:09.410
or if we're using something
as robust as Locke Fernet,

103
00:06:10.520 --> 00:06:14.030
well, other way right now
for you to, to configure

104
00:06:14.030 --> 00:06:16.730
them to application and within
the app star, you're going

105
00:06:16.730 --> 00:06:18.620
to have to configure lock
for now. You have to

106
00:06:19.010 --> 00:06:22.010
put all this code, all
the ceremony around it for

107
00:06:22.010 --> 00:06:25.430
it to work well with
a blade, I can be

108
00:06:25.430 --> 00:06:28.700
very specific and say, all
right, all this code that

109
00:06:28.700 --> 00:06:33.710
is required to initiate log
for net, or my logging

110
00:06:33.710 --> 00:06:38.210
of choice will go inside
this blade. So at the

111
00:06:38.210 --> 00:06:42.050
runtime, when your NBC turbine
application starts, it says, Oh,

112
00:06:42.080 --> 00:06:44.810
give me all the blades
that I found in and

113
00:06:44.810 --> 00:06:48.350
the bend directory. And it
will gather them all up,

114
00:06:48.650 --> 00:06:51.950
spin them up and say,
okay, Blake, you do your

115
00:06:51.950 --> 00:06:55.310
thing, you do your thing,
you do your thing. And

116
00:06:56.120 --> 00:06:57.830
out of the box, you
don't have to worry about

117
00:06:57.830 --> 00:07:00.500
having that functionality. So now
once you run it, once

118
00:07:00.710 --> 00:07:04.670
you can literally use that
blade across any application, that's

119
00:07:04.670 --> 00:07:08.800
using ABC turbine. Okay. And
this implements an interface of

120
00:07:08.800 --> 00:07:14.530
yours. Yeah. This implements a,
a basic interface called blade.

121
00:07:14.530 --> 00:07:17.830
And actually there's an abstract
class called the blade that

122
00:07:17.830 --> 00:07:22.690
provides some basic getters and
setters implementations. So the MBC

123
00:07:22.690 --> 00:07:25.630
turned by it. Runtime is
smart enough to go say,

124
00:07:25.840 --> 00:07:28.780
Oh, I need to scan
all these blades, you know,

125
00:07:28.790 --> 00:07:33.640
and hydrate them out of
actually the IOC container and

126
00:07:33.640 --> 00:07:37.390
then iterates through them and
calls them individually and process

127
00:07:37.390 --> 00:07:40.540
them. Okay, you have to
talk to me like, I'm

128
00:07:40.540 --> 00:07:43.450
a, like, I've never done
this before. Cause I definitely

129
00:07:43.450 --> 00:07:46.690
want to understand the, what
the listener is going to

130
00:07:46.690 --> 00:07:50.740
do with this because maybe
the listener uses IOC today.

131
00:07:50.950 --> 00:07:52.840
You figure that we've probably
got it split down the

132
00:07:52.840 --> 00:07:54.640
middle. We've got people out
there that have got their

133
00:07:54.640 --> 00:07:59.440
favorite IOC, their favorite and
version of control stuff that

134
00:07:59.440 --> 00:08:01.810
they use. Now, they have
their existing techniques that they

135
00:08:01.810 --> 00:08:05.080
like to use around dependency
injection. And then you've got

136
00:08:05.410 --> 00:08:08.680
the folks that have been
listening to everyone, talking about

137
00:08:08.680 --> 00:08:12.490
inversion version of control and
dependency injection for years, but

138
00:08:12.490 --> 00:08:16.390
have never gotten around to
it. So to the person

139
00:08:16.390 --> 00:08:19.930
who's listening, who has never
decided to take that leap

140
00:08:20.320 --> 00:08:25.590
is MPC turbine going to
make it less scary. It

141
00:08:25.600 --> 00:08:28.600
can. And the reason why
I say can is because

142
00:08:29.140 --> 00:08:33.460
out of the box, it,
it does things for you.

143
00:08:33.790 --> 00:08:38.530
So it, another piece of
turbine that allows you to

144
00:08:38.530 --> 00:08:41.770
do is you can do
have what I call a

145
00:08:42.800 --> 00:08:47.410
poor man's or, or really
lay man's registration for types.

146
00:08:47.440 --> 00:08:51.160
So say for example, you
need a, I, I, food

147
00:08:51.160 --> 00:08:54.310
service that will re you
know, return a list of

148
00:08:54.310 --> 00:08:58.860
foods for you turbine will
have, has an API for

149
00:08:58.860 --> 00:09:01.860
you to do very simple
registration to that example. So

150
00:09:01.860 --> 00:09:05.160
it's sort of a, it's
a small steps towards that

151
00:09:06.420 --> 00:09:10.650
understanding of what IOC provides
and, and how you can

152
00:09:10.650 --> 00:09:15.060
get best leverage us and
so forth. Now, it's it

153
00:09:15.060 --> 00:09:17.640
doesn't provide all the features
such as a community of

154
00:09:17.640 --> 00:09:19.680
structure map, or an inject.
It does out of the

155
00:09:19.680 --> 00:09:22.920
box. Again, it's very, very
simple. It's mostly used by

156
00:09:22.920 --> 00:09:28.170
turbine, not by the user,
however, as this developer, who's,

157
00:09:28.170 --> 00:09:30.210
you know, slowly getting into
it and saying, Oh, wow,

158
00:09:30.210 --> 00:09:32.130
this, you know, this thing
is just working. I can

159
00:09:32.130 --> 00:09:34.230
just tell it that I
need, and I, food service,

160
00:09:34.230 --> 00:09:38.130
given the implementation and so
forth, all that's magically working.

161
00:09:38.160 --> 00:09:40.110
And at the same time
say they, they want to

162
00:09:40.110 --> 00:09:43.170
learn about unity. They can
start learning more about unity

163
00:09:43.530 --> 00:09:46.710
and literally taking some of
those pieces and saying, okay,

164
00:09:46.710 --> 00:09:49.350
I don't want turbine to
register these pieces. I want

165
00:09:49.380 --> 00:09:53.640
unity to do it. And
they can actually spin up

166
00:09:53.640 --> 00:09:57.450
the code, know whatever in
their app to say, Oh,

167
00:09:57.510 --> 00:10:01.140
here's my registrations. And here's
the unity container. You know,

168
00:10:01.320 --> 00:10:03.870
they can manually create, do
a unity container and then

169
00:10:03.870 --> 00:10:07.410
pass that container into turbine.
So you kind of get

170
00:10:07.410 --> 00:10:09.750
the best of both worlds.
So if you don't really

171
00:10:09.750 --> 00:10:12.720
care about it, let turbine
handle it and they will

172
00:10:12.720 --> 00:10:14.910
do it to the best
of its abilities. But if

173
00:10:14.910 --> 00:10:18.750
you really do care about
how the registration stand and

174
00:10:18.750 --> 00:10:21.510
how it should be implemented,
you can do that within

175
00:10:21.510 --> 00:10:23.520
your own container and then
give it a turbine to

176
00:10:23.520 --> 00:10:26.430
kind of handle the, the,
the, the other pieces of

177
00:10:26.430 --> 00:10:29.360
the framework. Okay. So let
me, let me try to

178
00:10:29.360 --> 00:10:32.330
paraphrase some things, cause that
that'll mean that I'll either

179
00:10:32.630 --> 00:10:34.520
understand it or I won't
understand it. So let me

180
00:10:34.520 --> 00:10:37.070
see if I can paraphrase
what's going on here. So

181
00:10:37.070 --> 00:10:40.550
with a plain NVC application,
you say file new and

182
00:10:40.550 --> 00:10:45.110
you get asp.net MVC, but
there's no built in, in

183
00:10:45.110 --> 00:10:49.550
version control, no dependency injection.
If your home controller needs

184
00:10:49.550 --> 00:10:52.130
to have an eye lager
or an eye database or

185
00:10:52.130 --> 00:10:55.520
whatever, you're going to have
to give it to it

186
00:10:55.520 --> 00:10:58.040
somehow. And this, this is
where we start talking about

187
00:10:58.040 --> 00:11:03.350
the dependency chain. How, how
does that, I Fu I,

188
00:11:03.380 --> 00:11:07.220
whatever, get into my, my
home controller. Is it the

189
00:11:07.220 --> 00:11:10.610
home controller's responsibility to go
off and make an IFU?

190
00:11:10.610 --> 00:11:13.580
Or is it someone else's
responsibility if you invert the

191
00:11:13.580 --> 00:11:19.580
control and you then the
home controller simply receives one

192
00:11:19.580 --> 00:11:22.130
of these eye foods. One
of them appears out of

193
00:11:22.130 --> 00:11:24.950
the, out of the ether
and that's handled by an

194
00:11:24.950 --> 00:11:29.710
inversion of control framework. And
if it has some dependencies

195
00:11:29.720 --> 00:11:31.460
at once and I flew
and I flew once a

196
00:11:31.460 --> 00:11:34.190
night bar and et cetera,
et cetera, you're letting an

197
00:11:34.190 --> 00:11:37.350
external system you're inverting control
and letting it in an

198
00:11:37.350 --> 00:11:43.220
external system decide who decide
to make those for you

199
00:11:43.220 --> 00:11:46.850
so that you'll never actually
go and say, VAR foo

200
00:11:46.850 --> 00:11:50.960
equals new food service inside
of your controllers. That's what

201
00:11:50.960 --> 00:11:54.850
the, the whole thing behind
a dependency injection and version

202
00:11:54.850 --> 00:11:58.240
control is then there's lots
and lots of different frameworks

203
00:11:58.240 --> 00:12:00.760
out there. There's unity in
their structure map, and there's

204
00:12:00.760 --> 00:12:03.220
Windsor and on and on
and on. And they all

205
00:12:03.220 --> 00:12:05.440
do things slightly differently, but
they all do effectively the

206
00:12:05.440 --> 00:12:08.920
same thing. It's just that
people like them for various

207
00:12:08.920 --> 00:12:11.490
reasons. Am I, am I
right so far? Oh yeah.

208
00:12:11.560 --> 00:12:13.950
You're, you're dead on it.
It's at the end of

209
00:12:13.950 --> 00:12:15.690
the, at the end of
the day, it's about developer

210
00:12:15.690 --> 00:12:19.140
preference. Okay. And then the
controller factory inside of asp.net

211
00:12:19.140 --> 00:12:23.430
MVC is the factory that
makes controllers. So when you

212
00:12:23.430 --> 00:12:27.570
say slash home slash out,
it's the thing that looks

213
00:12:27.570 --> 00:12:29.370
at that route map and
says, gosh, I need to

214
00:12:29.370 --> 00:12:31.620
go and get a controller
instance. And then it decides

215
00:12:31.860 --> 00:12:36.930
how to make that. Except
if my controller needs something,

216
00:12:37.320 --> 00:12:39.570
it needs an IFU, it
needs a database connection. Now

217
00:12:39.570 --> 00:12:42.990
I dunno. And then I'm
off writing my own controller

218
00:12:42.990 --> 00:12:46.290
factoring. So then if I
want to use something like

219
00:12:46.710 --> 00:12:50.190
a control container, I have
to hook it up to

220
00:12:50.190 --> 00:12:54.390
MVC. I have to tell
Windsor how to make controllers.

221
00:12:54.390 --> 00:12:57.300
And I have to tell,
you know, I basically plug

222
00:12:57.330 --> 00:13:04.020
Aspen an MVC controller factory
mechanism into my container framework

223
00:13:04.020 --> 00:13:08.730
of choice my there so
far. Ah, yes. Okay. Yep.

224
00:13:08.760 --> 00:13:10.860
Yep. That's correct. And then
this is where, this is

225
00:13:10.860 --> 00:13:12.420
where I think I understand
what you just said is

226
00:13:12.420 --> 00:13:16.350
that this is where MVC
MVC turbine comes in. Correct.

227
00:13:16.770 --> 00:13:21.720
Okay. And then you provide
all sorts of well helper

228
00:13:21.720 --> 00:13:26.670
functions and layers and framework
and conventions. Like it's almost

229
00:13:26.670 --> 00:13:32.460
like you're a, an IOC
container aggregator that knows about

230
00:13:32.460 --> 00:13:36.600
asp.net MVC. Actually that is
a, it's a really great

231
00:13:36.600 --> 00:13:40.380
way of putting it is
that, that the fact that

232
00:13:40.380 --> 00:13:44.160
turbine knows, knows about IOC
and L is about NBC

233
00:13:44.160 --> 00:13:48.330
and kind of bridges that,
you know, it translates between

234
00:13:48.330 --> 00:13:51.690
the two. Okay. So you're
saying that I could go

235
00:13:51.690 --> 00:13:56.640
off right now and write
the Scott IOC container and

236
00:13:56.640 --> 00:14:01.080
build a whole dependency injection
framework called you know, scott.net.

237
00:14:01.860 --> 00:14:06.120
And I wouldn't have to
teach it about NBC, correct.

238
00:14:06.420 --> 00:14:09.450
Okay. It would just be
a standard, generic, non asp.net

239
00:14:09.450 --> 00:14:12.390
specific thing. And then what
would I have to do

240
00:14:12.600 --> 00:14:15.540
to make it really, really
easy for people to use

241
00:14:15.540 --> 00:14:18.870
it? And how would MPC
turbine helped me? The, the

242
00:14:19.320 --> 00:14:22.830
easiest way to do that
is say we take scott.net

243
00:14:23.550 --> 00:14:26.760
and, and take it add
at face value at what

244
00:14:26.760 --> 00:14:30.900
it does. And we bridge
it. We actually plug it

245
00:14:30.900 --> 00:14:36.870
into asp.net by actually implementing
an eye service locator interface,

246
00:14:36.870 --> 00:14:39.870
which is a contract that
turbine provides. And actually this

247
00:14:39.870 --> 00:14:43.860
is very similar to the
common service locator project that's

248
00:14:43.860 --> 00:14:46.470
out there and code black.
And what does a service

249
00:14:46.470 --> 00:14:50.100
locator in the generic sense
though? A service locator is

250
00:14:50.960 --> 00:14:52.910
I would pull it. I
would call it as a,

251
00:14:53.750 --> 00:14:57.110
as an aggregate or nowhere
of types. Number of types.

252
00:14:57.500 --> 00:15:01.520
Yes. As in census, you
query it and saying, Hey,

253
00:15:01.520 --> 00:15:04.490
locator, I need you to
locate me of, of something

254
00:15:04.490 --> 00:15:07.730
of this type of, of,
of IFU or I bar.

255
00:15:08.450 --> 00:15:11.090
And you don't know how
it does it. You just

256
00:15:11.090 --> 00:15:15.640
know that it provides that
for you. Hey, it's alternate

257
00:15:15.640 --> 00:15:19.120
universe, Scott Hanselman, going to
thank our sponsors for making

258
00:15:19.120 --> 00:15:21.190
this free show possible. We've
been doing Hansel minutes for

259
00:15:21.190 --> 00:15:23.140
almost four years now, and
we really couldn't do it

260
00:15:23.140 --> 00:15:24.970
without tolerance. So I want
to tell you about some

261
00:15:24.970 --> 00:15:27.130
of the stuff they're working
on. If you've already started

262
00:15:27.130 --> 00:15:30.520
developing with Silverlight, then you'll
probably need a solid testing

263
00:15:30.520 --> 00:15:33.160
tool to do your Silverlight
UI UIs. Unfortunately, though, a

264
00:15:33.160 --> 00:15:35.230
lot of the tools available
today only help you with

265
00:15:35.250 --> 00:15:37.780
unit testing. There's not really
a good way to simulate

266
00:15:37.780 --> 00:15:40.450
the actual behavior of those
end users, unless you spend

267
00:15:40.450 --> 00:15:42.940
days and weeks doing a
lot of manual testing, but

268
00:15:42.940 --> 00:15:44.700
the guys at Tellerik, you've
got a new point and

269
00:15:44.710 --> 00:15:47.890
click UI testing tool for
server line called web UI

270
00:15:47.890 --> 00:15:50.980
test studio. The beauty is
that you can quickly record

271
00:15:50.980 --> 00:15:54.550
your tests with a cross-browser
recorder. You can enrich them

272
00:15:54.550 --> 00:15:57.370
with code if you've got
really complex scenarios. And on

273
00:15:57.370 --> 00:15:59.500
top of that, it supports
all the standard controls, as

274
00:15:59.500 --> 00:16:02.740
well as the Tellerik enhanced
controls. You can verify not

275
00:16:02.740 --> 00:16:06.430
only several lines, but even
complex Ajax applications, best part

276
00:16:06.790 --> 00:16:09.430
web UI test studio lives
in visual studio. So you

277
00:16:09.430 --> 00:16:12.610
don't have to leave your
favorite development environment. You check

278
00:16:12.610 --> 00:16:17.440
it out at telerik.com/web hyphen
testing, hyphen tools, and be

279
00:16:17.440 --> 00:16:19.450
sure to thank Tellerik for
supporting the show on their

280
00:16:19.450 --> 00:16:24.340
Facebook fan page at facebook.com/tellerik.
Okay, this is all about

281
00:16:24.340 --> 00:16:27.430
separation of concerns. We hear
this all the time. This

282
00:16:27.430 --> 00:16:29.800
is a, this is a
locator. It's like, it's a

283
00:16:29.830 --> 00:16:32.980
contact lookup. It's like, I
really need an IFU. Do

284
00:16:32.980 --> 00:16:35.290
you know where you could
find me one? And he's

285
00:16:35.290 --> 00:16:39.220
like, I know Handle it.
Exactly. Yep. And if, and

286
00:16:39.220 --> 00:16:42.100
if that I Fu has
any dependencies able to manage

287
00:16:42.160 --> 00:16:44.230
all that for you, right.
You don't have to worry

288
00:16:44.230 --> 00:16:46.840
about, So then I would
implement an eye service locator

289
00:16:47.110 --> 00:16:53.740
for the scott.net framework. Correct.
Okay. And, and that, that

290
00:16:53.740 --> 00:16:58.870
actually will then plugged into
the MBC turbine runtime and

291
00:16:58.870 --> 00:17:02.680
saying, Hey, here's the I
servers locator implementation that I

292
00:17:02.920 --> 00:17:07.540
want you to use. And
it goes, all right, turbine

293
00:17:07.540 --> 00:17:11.080
doesn't know anything about unity,
doesn't know anything about a

294
00:17:11.620 --> 00:17:14.080
structure map or any of
those IOC containers. It knows

295
00:17:14.080 --> 00:17:17.920
about that. I service locator
interface that, you know, that

296
00:17:17.920 --> 00:17:22.720
contract that it uses, which
allows it to easily switch

297
00:17:22.720 --> 00:17:25.780
from unity to winter to
structure, map, and so forth,

298
00:17:26.770 --> 00:17:30.790
or to scott.net. Oh, okay.
Okay. So if I go

299
00:17:30.790 --> 00:17:33.730
off and I want to
write nerd dinner, which is

300
00:17:33.730 --> 00:17:38.350
all about nerd dinners, not
about IOC, and I want

301
00:17:38.350 --> 00:17:41.830
to go off and use
a structure map or unity

302
00:17:41.830 --> 00:17:43.450
or any number of different,
or maybe I want to

303
00:17:43.450 --> 00:17:47.170
try a couple of different
containers somewhere in there. I'm

304
00:17:47.170 --> 00:17:49.770
going to be writing a
bunch of code to teach

305
00:17:49.800 --> 00:17:55.050
nerd dinner about dependency injection
and or teach my dependency

306
00:17:55.050 --> 00:17:59.310
injection framework about how I
want it to behave. None

307
00:17:59.310 --> 00:18:02.880
of this moves my business
of making, having nerds have

308
00:18:02.880 --> 00:18:07.380
dinner forward. So this is
where turbine simplifies all of

309
00:18:07.380 --> 00:18:10.020
that. It's a, it's a,
it's almost implied. It's an

310
00:18:10.020 --> 00:18:15.420
imposing a convention on how
MVC should interact with any

311
00:18:15.930 --> 00:18:20.300
Dai framework. Yeah, actually I
would say that because I'm

312
00:18:20.480 --> 00:18:23.630
a perfect example of that
is if you, if you

313
00:18:23.630 --> 00:18:28.220
search for a structure map
or an inject samples, one

314
00:18:28.220 --> 00:18:31.580
of the things on thanks
they do is they explicitly

315
00:18:31.580 --> 00:18:34.530
say, I'm going to register,
you know, I'm going to

316
00:18:34.530 --> 00:18:38.690
register controllers this way, and
there's plenty of code templates

317
00:18:38.990 --> 00:18:41.780
out there show you that
with turbine. You don't have

318
00:18:41.780 --> 00:18:44.360
to tell it that turbine
knows that, Hey, I am

319
00:18:44.360 --> 00:18:46.850
an MVC. I need to
register a controller. So it

320
00:18:46.850 --> 00:18:49.250
does that for you. And
you know, it doesn't ask

321
00:18:49.250 --> 00:18:51.230
permission. It doesn't ask you
how you should do it.

322
00:18:51.230 --> 00:18:54.530
It's just says, if it's
an eye controller and I

323
00:18:54.530 --> 00:18:56.240
have to go down to,
I controller not to just

324
00:18:56.240 --> 00:19:00.590
controller itself, because that is
the least common denominator. And

325
00:19:00.620 --> 00:19:02.930
it's, I'm going to take
that, you know, that type.

326
00:19:02.930 --> 00:19:05.510
And I'm going to register
that with the container, you

327
00:19:05.510 --> 00:19:09.230
know? End of story. Don't,
you know, just because you

328
00:19:09.230 --> 00:19:14.630
want that. Okay. So there's
a custom controller factory that

329
00:19:14.630 --> 00:19:17.090
comes with it. So when
I get, when I download

330
00:19:17.090 --> 00:19:20.480
MPC turbine, I get this
new controller factory, and this

331
00:19:20.510 --> 00:19:26.600
now replaces the defaults and
resolves where controllers should be

332
00:19:26.600 --> 00:19:30.860
found through the service locator.
And then subsequently through whatever

333
00:19:30.860 --> 00:19:35.150
framework I've chosen, my URLs
will still work the same.

334
00:19:35.150 --> 00:19:37.820
I say, slash home, I
get the home controller. That's

335
00:19:37.820 --> 00:19:40.640
not going to change routing
or anything like that, but

336
00:19:40.670 --> 00:19:44.990
my it'll then allow my
controllers to have dependencies. And

337
00:19:44.990 --> 00:19:49.100
those dependencies will be satisfied
using my framework of choice.

338
00:19:50.030 --> 00:19:52.190
Yep. That is correct. Okay.
So that's the custom controller

339
00:19:52.190 --> 00:19:56.330
factory then what about other
components that I might want

340
00:19:56.330 --> 00:19:59.210
to do a dependency injection
on? I might want to

341
00:19:59.390 --> 00:20:02.750
separate out like routes or
modules or other, other things

342
00:20:02.750 --> 00:20:07.340
that aren't necessarily controllers. Yeah.
The, the one that I

343
00:20:07.730 --> 00:20:13.100
like to show is view
engines right now, typically you

344
00:20:13.100 --> 00:20:16.370
don't want to do an
IOC on a view engine.

345
00:20:17.510 --> 00:20:20.270
You might, in case you
want to do something interesting

346
00:20:20.270 --> 00:20:26.120
or something clever for a
tag building, for example, spark

347
00:20:26.300 --> 00:20:28.880
the spark view engine does
some allows you to plug

348
00:20:28.880 --> 00:20:32.630
in an AOC to resolve
some, the specific types, but

349
00:20:32.630 --> 00:20:37.220
in particular, with view engines,
the way you want to

350
00:20:37.220 --> 00:20:40.520
do to use them within
your MVC application, you might,

351
00:20:40.550 --> 00:20:43.520
you may want to switch
from one to another because

352
00:20:43.580 --> 00:20:46.160
you really, you know, you
can, that the framework allows

353
00:20:46.160 --> 00:20:48.400
you to, and since there
are enough separation of those

354
00:20:48.400 --> 00:20:53.020
concerns, it is very easily
for your controller to talk

355
00:20:53.020 --> 00:20:56.200
to, you know, spark UN
general weapon fuel engine. So

356
00:20:56.500 --> 00:20:59.500
turbine again, eagerly, you know,
by that convention that we

357
00:20:59.860 --> 00:21:02.740
talked about earlier, goes out
and finds all those Vue

358
00:21:02.740 --> 00:21:07.210
engines and registered them with
ESPN and NBC. So in

359
00:21:07.210 --> 00:21:10.000
case you do want to
add that piece to your

360
00:21:10.000 --> 00:21:12.820
view or to your view
engine, it's automatically added there

361
00:21:12.820 --> 00:21:19.480
out of the box. Okay.
Another, another instances model binders,

362
00:21:19.630 --> 00:21:24.250
right? So a model binder
is the I'll call it

363
00:21:24.660 --> 00:21:27.610
the, the little known secret
of, of the spit on

364
00:21:27.690 --> 00:21:31.570
NBC world that allows you
to take any data from

365
00:21:31.840 --> 00:21:36.340
your, from your route, from
your request for more or

366
00:21:36.340 --> 00:21:40.660
whichever pieces and allows you
to build up that model,

367
00:21:41.020 --> 00:21:43.740
that piece that gets passed
as a controller action, Right?

368
00:21:43.740 --> 00:21:48.900
It takes, it takes the
HTTP, the entire context, usually

369
00:21:48.900 --> 00:21:52.110
in the form of an
HTTP post and effectively de

370
00:21:52.110 --> 00:21:57.420
serializes your object out of
that HTTP information. So if

371
00:21:57.420 --> 00:22:01.230
you've got a bunch of
form fields, first name and

372
00:22:01.230 --> 00:22:03.360
last name, and you have
a person object, the model

373
00:22:03.360 --> 00:22:05.670
binder is the thing that
figures that out. And it

374
00:22:05.670 --> 00:22:08.220
sounds great. And it's a
fun demo, except when you

375
00:22:08.220 --> 00:22:10.380
have really complicated objects and
you need to write a

376
00:22:10.380 --> 00:22:13.560
custom model binder and teach
it about your objects. Yup.

377
00:22:13.590 --> 00:22:15.780
That is correct. So one
of the things that, you

378
00:22:15.780 --> 00:22:20.040
know, I, I, I personally
do a lot of custom

379
00:22:20.040 --> 00:22:23.760
model binders just because I
deal with complex examples. I

380
00:22:23.760 --> 00:22:25.770
know in your blog, in
the past, you've had how

381
00:22:25.770 --> 00:22:30.000
to get a date time
out of it. Well, one

382
00:22:30.000 --> 00:22:34.320
of the things that turbine
does it, I'd actually auto

383
00:22:34.320 --> 00:22:38.640
wires model binders for you.
So it knows which specific

384
00:22:38.640 --> 00:22:42.270
type to use. So say
for example, let's go with

385
00:22:42.870 --> 00:22:45.150
Fu again, since that seems
to be the type of

386
00:22:45.150 --> 00:22:49.830
choice, if I can have
a food model binder that

387
00:22:50.160 --> 00:22:53.310
will need some complex logics,
am I even need to

388
00:22:53.510 --> 00:22:56.100
have a, an idea base
or an eye repository or,

389
00:22:56.130 --> 00:23:00.180
or I, whatever dependency piece
on it. So that model

390
00:23:00.180 --> 00:23:06.420
binder can then be injected
to your runtime through turbine,

391
00:23:06.450 --> 00:23:09.600
just because it is an
IMO. Cause it's cause it's

392
00:23:09.600 --> 00:23:12.390
an iron model binder out
of the box. So again,

393
00:23:12.630 --> 00:23:16.110
turbine eagerly eagerly by convention
says, Oh, I need to,

394
00:23:16.410 --> 00:23:18.480
I need to take this,
put it into the runtime

395
00:23:18.480 --> 00:23:21.630
and plop it into the
system. So that way it

396
00:23:21.630 --> 00:23:25.680
knows how to interact with
that specific type. So if

397
00:23:25.680 --> 00:23:27.730
that food model binder needs
to call the database or

398
00:23:27.760 --> 00:23:31.290
needs to interact with another
type, it does it, it

399
00:23:31.290 --> 00:23:33.420
does it without, you know,
without any, any headaches or

400
00:23:33.420 --> 00:23:37.290
issues. Okay. Now, how is
that different from how I

401
00:23:37.290 --> 00:23:39.720
would wire up a model
binder or anything else in

402
00:23:39.720 --> 00:23:43.410
MVC? Now, usually at NBC,
I will put that into

403
00:23:43.410 --> 00:23:46.340
my global ASX and I'll
just have a one line

404
00:23:46.340 --> 00:23:49.880
that says, you know, register
model binder, blah, blah, blah.

405
00:23:50.210 --> 00:23:53.540
When you need a date
time, use the Scott daytime

406
00:23:53.540 --> 00:23:56.570
model binder. It's one line
it's no problem. Well, how

407
00:23:56.570 --> 00:24:01.420
is that? Not, you know,
IOC and dependency injection. It's

408
00:24:01.420 --> 00:24:04.690
not because if you actually
look at the registration of

409
00:24:04.690 --> 00:24:07.990
model binders, when you actually
tell it, you know, uses

410
00:24:07.990 --> 00:24:12.820
to daytime model binders, it
requires an instance of that

411
00:24:12.820 --> 00:24:17.530
model binder. So, so you
have to add at the

412
00:24:17.530 --> 00:24:20.170
moment, you're going to say,
Hey, for this food type

413
00:24:20.170 --> 00:24:24.250
or for this specific type
use this model binder, that

414
00:24:24.250 --> 00:24:26.980
model binder is an actual
instance. So if you have,

415
00:24:27.460 --> 00:24:30.610
if this model binder has
two dependencies and those dependencies

416
00:24:30.610 --> 00:24:34.390
is three dependencies and so
on, so on that all

417
00:24:34.390 --> 00:24:36.340
of those will have to
be resolved by the moment

418
00:24:36.340 --> 00:24:41.140
you say, I'm going to
associate these two. Okay. So,

419
00:24:41.140 --> 00:24:43.330
so at that point, that's
where the problem gets a

420
00:24:43.330 --> 00:24:49.090
little bit more complex. So
from the turbine perspective, turbine

421
00:24:49.360 --> 00:24:54.940
will automatically say, here's the
turbine model binder, which is

422
00:24:55.180 --> 00:24:57.970
static. You know, it's got
a, has one dependency that

423
00:24:57.970 --> 00:25:01.420
service locator we talked about
earlier, which gets passed in

424
00:25:02.380 --> 00:25:06.190
and then within it, within
that implementation is serves more

425
00:25:06.190 --> 00:25:10.240
of a facade. Then it
can then where then that

426
00:25:10.240 --> 00:25:13.390
facade, Aquarius, all the other
model binders and says, Oh

427
00:25:13.390 --> 00:25:15.910
yeah, you, you know, you
need X, you know, here's

428
00:25:15.910 --> 00:25:19.060
a model. Can do you
match it? Yes. All right,

429
00:25:19.270 --> 00:25:22.540
well, spin it out of
the container. And at that

430
00:25:22.540 --> 00:25:25.900
point, any dependencies that dead
model binder may have are

431
00:25:25.900 --> 00:25:29.470
automatically gonna be solved from
the container. Okay. So from

432
00:25:29.470 --> 00:25:31.990
a developer standpoint, you develop
it the exact same way

433
00:25:31.990 --> 00:25:34.840
you would evaluate your controllers
or any other pieces. It's

434
00:25:34.840 --> 00:25:37.390
just, you get that added
benefit. I see. So it

435
00:25:37.390 --> 00:25:40.900
sounds like in every opera,
every opportunity that MPC turbine

436
00:25:41.260 --> 00:25:45.430
has a can, any opportunity
that it sees, it will

437
00:25:46.120 --> 00:25:48.940
take a way that things
used to work in ESPN

438
00:25:49.010 --> 00:25:53.830
MPC and make it an
opportunity for the dependency injection

439
00:25:53.830 --> 00:25:55.840
framework to get involved. And
then you get all of

440
00:25:55.840 --> 00:25:58.360
the benefits, the benefits of
dependency injection as a concept.

441
00:25:59.200 --> 00:26:01.210
Yep. That is correct. One
of the ways I like

442
00:26:01.210 --> 00:26:05.110
to phrase it is that
NBC turbine will always yield

443
00:26:05.110 --> 00:26:09.130
to the container first. So
it always asks the container.

444
00:26:09.430 --> 00:26:14.170
Can you provide this? And
if, and if the answer

445
00:26:14.170 --> 00:26:17.080
is, yes, it, you know,
we'll resolve that and pass

446
00:26:17.080 --> 00:26:20.410
it on advancers no. Then
turbine will then provide it's

447
00:26:20.890 --> 00:26:23.920
its implementation to sort of,
to make it, make it

448
00:26:23.920 --> 00:26:26.770
feel like good old MPC
again. And is there some

449
00:26:26.770 --> 00:26:29.230
performance? I mean, this, I
mean, I could hear someone

450
00:26:29.260 --> 00:26:31.720
listening and thinking, well, this
is going to make everything

451
00:26:31.720 --> 00:26:37.150
slow. There is one performance
issue that we have actually

452
00:26:38.500 --> 00:26:42.250
encountered, and that has to
deal with controller risk solutions

453
00:26:42.280 --> 00:26:45.780
and with, but that's actually
being addressed right now for

454
00:26:45.780 --> 00:26:50.130
the next release of turbine.
But since everything happens at,

455
00:26:50.600 --> 00:26:53.700
at startup, all the registration
and all these different things

456
00:26:53.700 --> 00:26:56.910
happen in app startup, there's
really not much any difference

457
00:26:56.910 --> 00:27:00.600
from us using a structure
map unity or any other

458
00:27:00.830 --> 00:27:04.290
IOC, because it happens at
startup. And at the end

459
00:27:04.290 --> 00:27:06.510
of the day, it's just,
it's the same way as

460
00:27:06.510 --> 00:27:10.050
calling that IOC, that IOC
container, the only difference is

461
00:27:10.080 --> 00:27:13.320
just, there's an extra layer
of vendor action, which has

462
00:27:13.320 --> 00:27:19.760
minimal. Okay. So this means
that there are you saying

463
00:27:19.760 --> 00:27:25.010
that there's, there's no discernible
or worth measuring performance hit?

464
00:27:25.010 --> 00:27:27.380
Like if I have a
perfectly good application that works

465
00:27:27.380 --> 00:27:30.380
already and I'm interested in
making the code kind of

466
00:27:31.010 --> 00:27:34.460
smell better, but I'm afraid
of performance. You're saying just

467
00:27:34.520 --> 00:27:38.390
don't worry about it. It's
marginal amounts of Yep. That

468
00:27:38.390 --> 00:27:41.870
is correct. Yep. Okay. Well,
that's cool. Yeah. And I,

469
00:27:41.870 --> 00:27:44.510
and again, just because I'm
at a turbine is not

470
00:27:44.510 --> 00:27:48.260
doing any of the heavy
lifting the IOC. Yes. Ah,

471
00:27:48.270 --> 00:27:50.810
I see. So because turbine
is a, is a thin

472
00:27:50.810 --> 00:27:53.480
layer on top of whatever
the IOC that's underlying it,

473
00:27:53.870 --> 00:27:58.070
any performance issues that you
might potentially introduce would ultimately

474
00:27:58.070 --> 00:28:00.920
be in the underlying container
that you've chosen to use.

475
00:28:00.980 --> 00:28:03.950
Exactly. Correct. So what containers
do you support out of

476
00:28:03.950 --> 00:28:06.440
the box and is this
a thing where, you know,

477
00:28:06.440 --> 00:28:07.880
when you have an app,
when you have an app,

478
00:28:07.940 --> 00:28:11.150
an application or a framework
that is a collection of

479
00:28:11.150 --> 00:28:15.740
adapters, which is effectively what
you are, there's always that

480
00:28:15.740 --> 00:28:18.650
question of, are you maintaining
all the adapters or does

481
00:28:18.650 --> 00:28:21.200
everyone go and write their
own turbine implementations? I mean,

482
00:28:21.200 --> 00:28:25.440
where's the central repository of
all things, you know, like

483
00:28:25.880 --> 00:28:30.320
if I made scott.net a
dependency injection framework, do I

484
00:28:30.320 --> 00:28:35.000
then supply that to you?
That is a good question.

485
00:28:35.000 --> 00:28:37.400
So it kind of do
to put it all together

486
00:28:37.400 --> 00:28:42.560
is out of the box.
I'm supporting unity, castle, Windsor

487
00:28:43.070 --> 00:28:47.660
structure, map, and inject. And
those implementations to the, of

488
00:28:47.660 --> 00:28:51.590
those layers are actually being
supported by me or by

489
00:28:51.590 --> 00:28:57.290
other members of the NBC
turbine core team. And that's

490
00:28:57.290 --> 00:29:00.230
just because someone, you know,
I use castle Windsor for

491
00:29:00.230 --> 00:29:02.420
most. So I'm the one
who's out there changing it.

492
00:29:02.420 --> 00:29:06.310
If, if it ever needs
changes, I've had people review

493
00:29:06.330 --> 00:29:08.450
the structure map and give
me feedback on it. I'm

494
00:29:08.450 --> 00:29:11.870
the same thing with an
in check. But someone, someone

495
00:29:11.870 --> 00:29:14.180
at any given point can
take that up or you

496
00:29:14.180 --> 00:29:16.550
can take the source coding
and, and create mine. Inject

497
00:29:16.550 --> 00:29:20.150
service locator has the same
thing for like Scott, that

498
00:29:20.150 --> 00:29:23.270
net, you could be the
owner of that and saying,

499
00:29:23.270 --> 00:29:25.790
here's, you know, since I
know Scott dinette, the best

500
00:29:25.970 --> 00:29:30.890
I will provide this segmentation
at whatever fine tuning that

501
00:29:30.890 --> 00:29:34.670
it needs. And you, you
download this from me, you

502
00:29:34.670 --> 00:29:39.260
don't download it from the
MBC turbine repository. Okay. And

503
00:29:39.260 --> 00:29:42.910
I would just have to
implement I service or my

504
00:29:43.180 --> 00:29:47.680
Scott service.net thing. And then
what, what assembly, what I

505
00:29:47.680 --> 00:29:52.890
have to reference, You will
have to reference it, NVC

506
00:29:52.890 --> 00:29:56.430
turbine, that DLL assembly. And
that's it. And that's it.

507
00:29:56.910 --> 00:30:00.270
Okay. And what about file
new project? You know, a

508
00:30:00.270 --> 00:30:02.730
lot of times I, I
feel like this is all

509
00:30:02.730 --> 00:30:04.710
great and everyone talks about
this, but I'm just so

510
00:30:04.710 --> 00:30:08.880
lazy because most programmers are
really, really lazy people that

511
00:30:08.910 --> 00:30:10.410
if it doesn't come out
of the box with file

512
00:30:10.410 --> 00:30:13.590
new project, I'm not going
to really bother. Sure. So

513
00:30:13.590 --> 00:30:16.800
what I've done is to
kinda apiece that crowd. Cause

514
00:30:16.890 --> 00:30:19.500
I'm the same way at
times, depending on, depending on

515
00:30:19.500 --> 00:30:23.880
my profoundly lazy, exactly. One
of the things that I've

516
00:30:23.880 --> 00:30:27.780
done is I've created several
templates. So you could go

517
00:30:27.780 --> 00:30:35.400
file new, then check application,
file, new structure, map, and

518
00:30:35.400 --> 00:30:39.780
so forth. So again, those
templates are specific to the,

519
00:30:40.140 --> 00:30:45.480
to the, to the IOC
containers that, that I, and

520
00:30:45.480 --> 00:30:48.930
the other members of the
team pro support. Right. If

521
00:30:48.990 --> 00:30:52.410
obviously, if you want one
for Scott, that net, we

522
00:30:52.410 --> 00:30:54.240
could do that for you.
But at that point we

523
00:30:54.240 --> 00:30:55.980
don't, you know, we don't
know what, what you would

524
00:30:55.980 --> 00:30:57.900
want. There could be dozens
of people out there who

525
00:30:57.900 --> 00:31:01.350
want that kind of thing.
Yep. Actually at one things

526
00:31:01.350 --> 00:31:03.630
we're talking about, not for
this release for the, for

527
00:31:03.630 --> 00:31:06.240
the next release is trying
to use an Autofac that's

528
00:31:06.240 --> 00:31:08.850
another one we're going to
support or Lynn Fu yes.

529
00:31:08.880 --> 00:31:12.810
These are all very popular.
You know, they they're basically

530
00:31:12.810 --> 00:31:16.500
like, what would you say,
niche or niche, depending on

531
00:31:16.560 --> 00:31:20.730
how you pronounce that everyone's
got their favorite flavor, ice

532
00:31:20.730 --> 00:31:23.180
cream, you know what I
mean? I mean, every, I

533
00:31:23.250 --> 00:31:25.860
probably have six different emails
in my inbox from the

534
00:31:25.860 --> 00:31:29.790
last month saying I've written
an IOC container. Can you

535
00:31:29.790 --> 00:31:32.430
check it out? Is it
seems to be like the

536
00:31:32.430 --> 00:31:34.050
thing that, it's the thing
that people want to write,

537
00:31:34.200 --> 00:31:35.490
they want to make their
own and they want to

538
00:31:35.490 --> 00:31:39.150
do it their way. Exactly.
It's like a designer bags.

539
00:31:39.150 --> 00:31:42.690
Right? So IOC containers or
designer bags, All bags though,

540
00:31:42.780 --> 00:31:44.400
right? No, one's doing anything
really in the middle of

541
00:31:44.400 --> 00:31:48.450
them have solar panels or
anything, but yeah. Yeah. And

542
00:31:48.450 --> 00:31:50.340
that's the reason why I
ended up supporting all these

543
00:31:50.340 --> 00:31:52.920
ones in each of them
are finicky within themselves. You

544
00:31:52.920 --> 00:31:57.180
know, you, I've learned so
much about each individual IOC

545
00:31:57.180 --> 00:32:01.080
container by providing this shim
that, Oh my gosh. I

546
00:32:01.080 --> 00:32:03.240
was like, wow. You know,
some features I like about

547
00:32:03.240 --> 00:32:06.470
X, some features or like
about Y and, and that

548
00:32:06.470 --> 00:32:08.550
that's, I think that's the
best way to do, to

549
00:32:08.640 --> 00:32:10.920
take it, take that knowledge
of IOC to the next

550
00:32:10.920 --> 00:32:14.370
level is how each individual
takes it. So, And now

551
00:32:14.370 --> 00:32:16.080
that you've spent so much
time looking at all these

552
00:32:16.080 --> 00:32:19.320
different bags, I mean, do
you have a favorite? Do

553
00:32:19.320 --> 00:32:22.170
I have a favorite? I
will have to say it's

554
00:32:22.170 --> 00:32:25.230
my old bag, which is
castle winter. Really? Just, just,

555
00:32:25.230 --> 00:32:29.340
yeah, just cause I know
it's so well. And, and

556
00:32:29.340 --> 00:32:32.040
some of the features that
it provides, like the facility

557
00:32:32.040 --> 00:32:37.500
pieces is it's phenomenal. Really
the original is still the

558
00:32:37.500 --> 00:32:41.390
best you say exactly. Again,
this is just my style.

559
00:32:41.990 --> 00:32:44.390
This is, this is my
opinion only and so forth.

560
00:32:44.810 --> 00:32:47.570
I'm the one that comes
in close second is Autofac

561
00:32:48.260 --> 00:32:52.190
just because of, because of
the explicitness that it enforces.

562
00:32:52.370 --> 00:32:54.740
Well, this will start a
very exciting fight in the

563
00:32:54.740 --> 00:32:58.250
comments of the show. I
hope as people espouse their,

564
00:32:58.640 --> 00:33:01.460
their favorite, I don't see
containers. I wouldn't doubt it.

565
00:33:01.700 --> 00:33:04.190
Fantastic. Well, thank you so
much of your lasagna for

566
00:33:04.250 --> 00:33:07.880
talking about NBC through wine.
People can see this where

567
00:33:07.880 --> 00:33:11.150
on the web, if you
go to MVC turbine that

568
00:33:11.150 --> 00:33:15.050
code plex.com, that's the main
download site for that. Fantastic.

569
00:33:15.050 --> 00:33:17.300
And how VR is on
the web of his own

570
00:33:17.300 --> 00:33:19.430
blog. And he's also on
Twitter and we'll have those

571
00:33:19.430 --> 00:33:21.830
links in the show notes.
Thank you so much for

572
00:33:21.830 --> 00:33:24.950
chatting with me today. Thank
you, Scott. This has been

573
00:33:24.950 --> 00:33:27.950
another episode of Hansel minutes
and we'll see you again

574
00:33:27.950 --> 00:33:28.400
next week.

