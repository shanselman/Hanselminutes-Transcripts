WEBVTT FILE

1
00:00:12.150 --> 00:00:18.240
From hanselminutes.com. It's Hanselminutes a
weekly discussion with web developer

2
00:00:18.270 --> 00:00:22.710
and technologist Scott Hanselman. This
is Lawrence Ryan announcing show number

3
00:00:22.710 --> 00:00:28.890
two 33 recorded live Thursday,
September 16th, 2010. Support for Hanselman it's

4
00:00:28.890 --> 00:00:32.790
is provided by Tellerik rad
controls, the most comprehensive suite

5
00:00:32.790 --> 00:00:41.280
of components for windows forms
and asp.net web applications. online@wwwdottelerik.com.

6
00:00:42.360 --> 00:00:45.930
In this episode, Scott talks
with Richard Pawson about naked

7
00:00:45.960 --> 00:00:50.700
objects. Hi, this is Scott
Hanselman, and this is another

8
00:00:50.700 --> 00:00:54.150
episode of Hansel minutes today.
We're chatting with Richard Pawson

9
00:00:54.180 --> 00:00:59.000
about naked objects. How are
you, sir? I'm good. Thanks

10
00:00:59.000 --> 00:01:01.370
for having me on the
show, Scott. Yeah, thank you.

11
00:01:01.370 --> 00:01:03.380
I appreciate the time zone
and all the trouble as

12
00:01:03.380 --> 00:01:06.080
you are on the other
side of the pond. So

13
00:01:06.080 --> 00:01:09.640
naked objects, this is a
very provocative name. What, what

14
00:01:09.650 --> 00:01:14.570
is that? And should I
be worried? Well, occasionally it

15
00:01:14.570 --> 00:01:17.450
does cause some problems with
emails and filters and the

16
00:01:17.450 --> 00:01:20.990
like, but no, it's a,
it's a sound idea. The

17
00:01:20.990 --> 00:01:24.200
underlying philosophy is really just
that when you develop an

18
00:01:24.200 --> 00:01:27.440
application, the only thing you
should have to develop our

19
00:01:27.440 --> 00:01:30.680
domain objects, the naked domain
objects, and you should get

20
00:01:30.680 --> 00:01:34.490
everything else for free. The,
the persistence layer should be

21
00:01:34.490 --> 00:01:37.190
for free. The user interface
should be for free or

22
00:01:37.190 --> 00:01:40.880
at least the default user
interface. That's the philosophy That

23
00:01:40.880 --> 00:01:44.450
in itself is rather provocative.
The, the idea that the

24
00:01:44.450 --> 00:01:47.900
domain object is so, is
so important or so rich,

25
00:01:47.930 --> 00:01:50.510
that it would have enough
information to generate a user

26
00:01:50.510 --> 00:01:52.730
interface is surprising to me.
Does this work for any

27
00:01:52.730 --> 00:01:55.070
kind of user interface or
only the most basic user

28
00:01:55.070 --> 00:01:59.720
interface? Well, yes. I mean
it, to contrast this with

29
00:01:59.720 --> 00:02:02.180
say, you know, there are
loads of frameworks out there

30
00:02:02.180 --> 00:02:05.920
that will take domain objects
and represent them as in

31
00:02:05.930 --> 00:02:09.620
a simple data interface with
crud methods, for updating them

32
00:02:09.620 --> 00:02:12.470
and creating and so forth.
But what we do is

33
00:02:12.770 --> 00:02:15.980
reflect all of the behavior
of a domain object. All

34
00:02:15.980 --> 00:02:19.520
of its public methods become
actions that the user can

35
00:02:19.520 --> 00:02:22.190
perform, or by default, they
become actions. The user can

36
00:02:22.190 --> 00:02:27.440
perform on the user interface
unusually in the software industry.

37
00:02:27.440 --> 00:02:29.720
I don't believe that this
is the solution to all

38
00:02:29.720 --> 00:02:33.260
known problems, but it is
very, very good for a

39
00:02:33.260 --> 00:02:38.360
whole class of applications that
have quite complex domain models.

40
00:02:38.630 --> 00:02:43.370
What you might traditionally call
data intensive applications. It's not

41
00:02:43.370 --> 00:02:51.350
suitable for extremely rich multimedia
Steinem applications. It's for, you

42
00:02:51.350 --> 00:02:53.990
know, structured data style of
applications. But it's good for

43
00:02:53.990 --> 00:02:57.920
that. All right, well let's
so let's do this. Let's

44
00:02:57.920 --> 00:03:01.090
back up and start the
beginning. How did you develop

45
00:03:01.090 --> 00:03:05.400
this? Well, naked objects is
an idea goes back more

46
00:03:05.400 --> 00:03:09.090
than 10 years. It was
actually my, my PhD thesis

47
00:03:10.410 --> 00:03:15.990
and its origin was trying
to understand why the power

48
00:03:15.990 --> 00:03:18.660
of object orientation, which I
was introduced to in the,

49
00:03:18.660 --> 00:03:24.060
in the late eighties, didn't
really take off in mainstream

50
00:03:24.060 --> 00:03:28.380
commercial systems development. And one
of my conclusions was that

51
00:03:28.380 --> 00:03:31.860
it was by the time
you developed all the layers

52
00:03:31.860 --> 00:03:36.090
above and below your domain
objects, you lost all the

53
00:03:36.090 --> 00:03:39.630
advantages of doing a good
job of domain modeling in

54
00:03:39.630 --> 00:03:42.630
the middle. And there was
a lot of work going

55
00:03:42.630 --> 00:03:45.750
on even then on how
to create a persistence layer

56
00:03:45.750 --> 00:03:50.160
automatically from a domain model.
And that's now modern ORMs

57
00:03:50.160 --> 00:03:53.550
and entity framework in the,
in the.net world. But there

58
00:03:53.550 --> 00:03:55.890
wasn't much going on on
what you could do above

59
00:03:55.890 --> 00:03:59.550
the domain model. And I
had this just idea really

60
00:03:59.550 --> 00:04:02.130
that, that if you did
your domain model properly, if

61
00:04:02.130 --> 00:04:04.980
you made your objects rich
enough, it ought to be

62
00:04:04.980 --> 00:04:09.150
possible to create an object
oriented user interface from that

63
00:04:09.150 --> 00:04:13.530
automatically. Now the first ones
we did were very much

64
00:04:13.530 --> 00:04:18.990
a rich style of client
server user interface, and it

65
00:04:18.990 --> 00:04:21.870
worked very well, but you
couldn't, you couldn't modify the

66
00:04:21.870 --> 00:04:24.330
user interface. You had to
stick with the generic one

67
00:04:24.330 --> 00:04:28.140
that that naked objects gave
you much more recently. In

68
00:04:28.140 --> 00:04:31.170
fact, very recently, we've, we've
now created a new version

69
00:04:31.170 --> 00:04:35.220
of naked objects called naked
objects, MVC that works with

70
00:04:35.280 --> 00:04:41.070
asp.net MVC. And that gives
you a complete MVC application

71
00:04:41.070 --> 00:04:45.000
for free having written your
domain objects. And you can

72
00:04:45.000 --> 00:04:48.240
then go on and customize
the UI to your heart's

73
00:04:48.240 --> 00:04:53.130
content much as you could
for any asp.net MVC application.

74
00:04:53.670 --> 00:04:57.570
Although the more you customize
it, the more you'll lose

75
00:04:57.570 --> 00:05:02.010
the advantages of it being
naked objects. So the concept

76
00:05:02.010 --> 00:05:04.910
isn't specific to MVC, I
could do this particularly, I

77
00:05:04.910 --> 00:05:07.500
mean really in any, in
any world, right? I can

78
00:05:07.500 --> 00:05:11.550
do this in WinForms or
Absolutely. In fact, the biggest

79
00:05:11.550 --> 00:05:15.540
systems we've built have been
with WPF user interface that

80
00:05:15.540 --> 00:05:18.870
was non customizable. It was,
it was just a direct

81
00:05:18.870 --> 00:05:21.420
reflection of the domain model.
And I should say that

82
00:05:21.420 --> 00:05:24.840
naked objects is actually a
pattern. It's an architectural pattern.

83
00:05:25.860 --> 00:05:28.860
And the framework that my
company develops is only one

84
00:05:28.860 --> 00:05:32.950
of several frameworks that do
implement this pattern now. So

85
00:05:32.950 --> 00:05:35.460
I'm using the word naked
objects in two senses there.

86
00:05:36.840 --> 00:05:38.760
Did you do his naked
objects and a name that

87
00:05:38.760 --> 00:05:40.140
you came up with because
you said that there were

88
00:05:40.140 --> 00:05:42.900
other companies, was your, is
your thesis and a company

89
00:05:42.900 --> 00:05:45.150
that you run and then
others have taken that, that

90
00:05:45.150 --> 00:05:49.770
thesis like rest. Yes, absolutely
naked Altrix is the name

91
00:05:49.770 --> 00:05:51.840
I came up with. It
was the name of my

92
00:05:51.840 --> 00:05:56.730
thesis, surprisingly enough, in an
academic environment. And people often

93
00:05:56.730 --> 00:06:00.140
ask me where, where the
idea came from, and there's

94
00:06:00.140 --> 00:06:03.230
an official story and a
true story. The official story

95
00:06:03.230 --> 00:06:06.230
is that it comes from
that wonderful quote from Anton

96
00:06:06.230 --> 00:06:09.200
to sad. Exupery where he
said the design is completed.

97
00:06:09.440 --> 00:06:11.780
Not when there is anything
more to add, but when

98
00:06:11.780 --> 00:06:15.410
there is nothing more to
take away, the true story

99
00:06:15.410 --> 00:06:17.810
is that there's a, there's
a TV chef in the

100
00:06:17.810 --> 00:06:19.940
UK. I think he's known
in the U S Jamie

101
00:06:19.940 --> 00:06:23.570
Oliver, who's called the naked
chef. And I was watching

102
00:06:23.570 --> 00:06:26.540
his program one night, about
10 years ago. And he

103
00:06:26.540 --> 00:06:28.760
was talking about, you know,
the essence of good cooking

104
00:06:28.760 --> 00:06:32.570
is just having good ingredients
and those ingredients should show

105
00:06:32.570 --> 00:06:36.020
through in the end dish.
And I thought, well, that's

106
00:06:36.020 --> 00:06:38.420
what I'm talking about. You
know, the essence of good

107
00:06:38.420 --> 00:06:41.630
systems development is just having
a good domain model and

108
00:06:41.630 --> 00:06:44.000
that domain model should show
right through and be the

109
00:06:44.000 --> 00:06:50.170
user experience as well. That's
quite a contrast between the,

110
00:06:50.500 --> 00:06:55.300
the, the apocryphal story and
the actual story. Well, that's

111
00:06:55.300 --> 00:07:00.190
often the way isn't it.
Okay. So the advantage of

112
00:07:00.190 --> 00:07:02.560
this is that you, you
can get a lot of,

113
00:07:02.830 --> 00:07:04.900
a lot of code quickly.
You can get a lot

114
00:07:04.900 --> 00:07:09.550
of you can rapidly prototype
presumably Yes, there there's some

115
00:07:09.550 --> 00:07:11.710
videos on our website and
you can, you can see

116
00:07:11.710 --> 00:07:15.640
me do a, a complete
system very, very quickly. And

117
00:07:15.760 --> 00:07:18.280
it's very tempting to focus
on that the, the rapid

118
00:07:18.280 --> 00:07:22.670
application development aspect, but I
think that's actually secondary. I

119
00:07:22.670 --> 00:07:25.210
think it's a kind of
byproduct, almost the fact that

120
00:07:25.210 --> 00:07:28.960
you can do extraordinarily quick
prototyping that wasn't our real

121
00:07:28.960 --> 00:07:32.320
focus. The real focus was
that if, if you do

122
00:07:32.320 --> 00:07:34.690
it this way, what you
end up with is a

123
00:07:34.690 --> 00:07:39.430
much cleaner, more agile, more
maintainable system, partly because you've

124
00:07:39.430 --> 00:07:44.290
got much less code, but
also because it forces you

125
00:07:44.290 --> 00:07:47.080
to do a good job
of the, the object model

126
00:07:47.080 --> 00:07:50.170
itself. I like to say
that naked objects make some

127
00:07:50.170 --> 00:07:54.730
good modeling, easier and bad
modeling, obvious, because if you're

128
00:07:54.730 --> 00:07:58.090
exposing your object model to
the users, you've got to

129
00:07:58.090 --> 00:08:03.940
get it right. Okay. When
applied to asp.net MVC, though,

130
00:08:04.300 --> 00:08:07.570
you don't necessarily have to
write any views or controllers

131
00:08:07.690 --> 00:08:11.290
because there's enough richness in
your, in your naked naked

132
00:08:11.290 --> 00:08:13.960
object model, that, that you
have a controller of your

133
00:08:13.960 --> 00:08:18.010
own. That's actually doing the
underlying work, right? That's absolutely

134
00:08:18.010 --> 00:08:20.650
correct. You don't need to
write a single view or

135
00:08:20.650 --> 00:08:23.170
controller. You just write the
domain objects and run it

136
00:08:23.170 --> 00:08:26.410
with our generic controller as
it's called and about half

137
00:08:26.410 --> 00:08:29.350
a dozen generic views that
we have. And I should

138
00:08:29.350 --> 00:08:33.850
stress this isn't cogeneration. We're
not generating scaffolding pages for

139
00:08:33.850 --> 00:08:38.050
the domain model. It's all
done using reflection. And at

140
00:08:38.050 --> 00:08:41.710
run time, the framework is
reflecting on the properties and

141
00:08:41.710 --> 00:08:45.580
methods of a domain object,
and then rendering that through

142
00:08:45.580 --> 00:08:50.470
this generic controller and, and
views to give you a

143
00:08:50.470 --> 00:08:53.830
basic user interface. And actually
that user interface is perfectly

144
00:08:53.830 --> 00:08:58.650
good enough for a lot
internal use applications. It's, it's

145
00:08:58.650 --> 00:09:01.830
not at all suitable for
a public facing application where

146
00:09:01.830 --> 00:09:04.350
you do need a much
higher degree of design and,

147
00:09:04.890 --> 00:09:09.770
and a more scripted style
of interaction. So thinking about

148
00:09:09.770 --> 00:09:12.320
this in the context of
the, of the listener, who

149
00:09:12.320 --> 00:09:16.400
is probably familiar with asp.net
dynamic data, and has probably

150
00:09:16.400 --> 00:09:19.640
seen demos where someone would
make a product model and

151
00:09:19.640 --> 00:09:22.520
a categories model, and then
a UI pops out the

152
00:09:22.520 --> 00:09:24.830
other side, and then they
are told that it's not

153
00:09:24.860 --> 00:09:29.210
cogeneration. Then I would immediately
in trying to apply this

154
00:09:29.210 --> 00:09:30.950
to what I already know.
I would say this sounds

155
00:09:30.950 --> 00:09:37.190
like asp.net dynamic data. Yeah.
So there are two quite

156
00:09:37.190 --> 00:09:40.160
distinct differences. I mean, certainly
superficially in the first five

157
00:09:40.160 --> 00:09:42.950
minutes of the demo, you'd
think yes, there was, it

158
00:09:42.950 --> 00:09:46.130
was a similarity. I think
the big differences is we

159
00:09:46.130 --> 00:09:50.750
don't end up with scaffold
pages, but the bigger one

160
00:09:50.750 --> 00:09:56.360
is that whereas dynamic data
is about exposing crowd methods,

161
00:09:57.530 --> 00:10:01.430
create, read, update, and delete.
I don't think there's any

162
00:10:01.430 --> 00:10:04.730
other framework that takes the
view of exposing the behavior

163
00:10:04.730 --> 00:10:09.290
of the objects, the, the
public methods as actions. And

164
00:10:09.290 --> 00:10:12.500
I think the whole idea
of naked objects, there were

165
00:10:12.500 --> 00:10:15.410
two kinds of our hearts
in it. The first was

166
00:10:15.980 --> 00:10:19.040
why don't we expose the
behavior as well. And the

167
00:10:19.040 --> 00:10:23.960
second almost biggest surprise was
that if you did that,

168
00:10:23.960 --> 00:10:27.920
there was no need to
have any kind of master

169
00:10:27.920 --> 00:10:33.050
script on top that actually
you just expose the objects

170
00:10:33.050 --> 00:10:37.940
and services to the user.
And that would be enough.

171
00:10:39.290 --> 00:10:42.800
Okay. So these models, what
do these look like? Are

172
00:10:42.800 --> 00:10:47.570
they simply, they're simply more
intelligent or are they, are

173
00:10:47.570 --> 00:10:50.900
they annotated, you know, they
filled with, with, with attic,

174
00:10:50.900 --> 00:10:54.230
with dotnet attributes and metadata,
that gives you extra information

175
00:10:54.230 --> 00:10:57.560
about them. Yes. There, there,
there are two things that

176
00:10:57.560 --> 00:10:59.300
you do there. First of
all, let's be clear. They

177
00:10:59.300 --> 00:11:04.670
are pocos that you're not
to inherit any class in

178
00:11:04.670 --> 00:11:08.360
our framework or implement any
interface. There are two things

179
00:11:08.360 --> 00:11:10.460
that you do do one,
as you said, is you

180
00:11:10.460 --> 00:11:13.670
add attributes. And when we
started this a few years

181
00:11:13.670 --> 00:11:16.070
ago, that was not a
very popular idea. And we

182
00:11:16.070 --> 00:11:19.580
had to define lots of
our own attributes gradually as

183
00:11:19.580 --> 00:11:22.340
Microsoft has kind of got
this way of thinking and

184
00:11:22.340 --> 00:11:25.400
using it quite a lot
as the, the attributes have

185
00:11:25.400 --> 00:11:29.120
appeared in what is it,
system dot component, model.data annotations,

186
00:11:29.540 --> 00:11:33.890
we've obsoleted hours in favor
of the standard system ones.

187
00:11:34.430 --> 00:11:37.520
So, and, and that applies
both to specifying things like

188
00:11:37.520 --> 00:11:42.440
string lengths and whether a
property is mandatory or not.

189
00:11:42.830 --> 00:11:45.020
And, and if you want
to rename it, if you

190
00:11:45.020 --> 00:11:47.630
don't want to use the
default, you can use display

191
00:11:47.630 --> 00:11:50.630
name and so forth. And
then the second thing we

192
00:11:50.630 --> 00:11:54.580
have, which is more unusual
is, is programming by. So

193
00:11:54.580 --> 00:11:59.170
if you have, if you
have an action, let's say,

194
00:11:59.170 --> 00:12:03.190
you know, create new order.
You can write a bunch

195
00:12:03.190 --> 00:12:07.120
of methods called for example,
validate, create new order or

196
00:12:07.120 --> 00:12:11.230
hide, create new order or
disable create new order. And

197
00:12:11.230 --> 00:12:15.040
those are recognized by convention
and picked up at runtime

198
00:12:15.340 --> 00:12:18.880
and use to control your
access to that method. So

199
00:12:18.880 --> 00:12:22.810
validate will validate the parameters
on the action and disable

200
00:12:22.810 --> 00:12:26.020
will make it unavailable based
on the state of the

201
00:12:26.020 --> 00:12:28.120
object, for example. So those
are the two things you're

202
00:12:28.120 --> 00:12:33.030
doing, adding attributes and using
conventions Simply by their existence,

203
00:12:33.660 --> 00:12:36.030
Simply by their existence. You
don't need to hook them

204
00:12:36.030 --> 00:12:39.240
up in any way. There's
no, there's no configuration involved.

205
00:12:40.630 --> 00:12:44.490
Interesting. So it's all convention
based on naming Very much

206
00:12:44.490 --> 00:12:47.310
so. And, and this is
why it's a very, very

207
00:12:47.310 --> 00:12:51.660
nice match. It's almost the
flip side of entity framework

208
00:12:51.660 --> 00:12:54.330
code first, which I'm a
big fan of. And I

209
00:12:54.330 --> 00:12:58.020
know you did a show
about that recently. So, you

210
00:12:58.020 --> 00:13:00.570
know, I like to say
that that entity framework code

211
00:13:00.570 --> 00:13:04.110
first, and it's in its
most recent incarnation, the whole

212
00:13:04.140 --> 00:13:08.400
ethos there is you should
write pocos and you should

213
00:13:08.400 --> 00:13:12.210
get the persistence layer for
free without having to think

214
00:13:12.210 --> 00:13:18.120
about it. And, and that,
that follows conventions first attributes,

215
00:13:18.120 --> 00:13:22.380
second configuration third. And that's
the same philosophy that we

216
00:13:22.380 --> 00:13:27.480
have using the same. Pocos
creating the user interface, following

217
00:13:27.480 --> 00:13:30.870
conventions attributes, and only as
a last resort, any kind

218
00:13:30.870 --> 00:13:35.250
of configuration. This is the
part of the show where

219
00:13:35.250 --> 00:13:40.080
I mock you while actually
Tellerik mock says your applications

220
00:13:40.080 --> 00:13:42.990
that you're testing dependent on
external systems over which you

221
00:13:42.990 --> 00:13:45.690
have no control. Maybe you're
being slowed down by those

222
00:13:45.690 --> 00:13:48.750
systems, that lack of availability,
responsiveness, do you want to

223
00:13:48.750 --> 00:13:52.200
do TDD, right? Our friends
at Tellerik help you solve

224
00:13:52.200 --> 00:13:55.050
some of those problems with
their newest mocking tool, just

225
00:13:55.050 --> 00:13:58.710
mock it'll let you do
fast, simple controlled unit tests,

226
00:13:58.740 --> 00:14:03.510
independent of external resources like
databases, web services, proprietary code,

227
00:14:04.350 --> 00:14:07.800
unlike some mocking tools, just
mock works with non-virtual methods,

228
00:14:08.040 --> 00:14:11.730
seal classes, static methods, giving
you a complete control of

229
00:14:11.730 --> 00:14:14.760
your code. You can get
more details. You can download

230
00:14:14.790 --> 00:14:19.650
just mock at telerik.com/just Mark.
And don't forget to thank

231
00:14:19.650 --> 00:14:22.410
Tellerik for supporting Hanselman it's
on their Facebook fan page,

232
00:14:23.010 --> 00:14:29.640
facebook.com/tellerik. Thanks a lot. We're
kind of going back in

233
00:14:29.640 --> 00:14:33.690
my own personal software development
timeline. This seems more like

234
00:14:33.690 --> 00:14:36.540
the rich C plus plus
objects that I wrote 20

235
00:14:36.540 --> 00:14:40.320
years ago. It seems like
lately the quote unquote objects

236
00:14:40.320 --> 00:14:43.200
that I've been writing have
been basically just strucks. I

237
00:14:43.200 --> 00:14:46.710
mean, I say public class
foo, but ultimately it's a

238
00:14:46.710 --> 00:14:50.910
pretty stupid object. I've been
passing around effectively data transfer

239
00:14:50.930 --> 00:14:53.840
objects. And you're basically saying
that we should have a

240
00:14:53.840 --> 00:14:57.350
lot richer functionality in our,
in our objects, certainly more

241
00:14:57.350 --> 00:15:01.200
than the average dotnet programmers
use to, to having. Yeah,

242
00:15:01.200 --> 00:15:03.850
that's absolutely right. And it's
interesting that you, you made

243
00:15:03.850 --> 00:15:07.270
the comment there that like
you used to write a

244
00:15:07.270 --> 00:15:10.260
lot of people who, when
they encounter naked objects, I,

245
00:15:10.260 --> 00:15:12.250
I get emails like this
all the time where people

246
00:15:12.250 --> 00:15:14.830
say, you know, it's not
so much that this is

247
00:15:14.830 --> 00:15:18.480
new. It's just that this
feels like what I, what

248
00:15:18.480 --> 00:15:21.340
was in my head 20
years ago when I first

249
00:15:21.340 --> 00:15:25.180
learned small talk, a very
common statement, I get it

250
00:15:25.180 --> 00:15:28.240
is going back to that
idea, the origins of object

251
00:15:28.240 --> 00:15:31.540
orientation that say that an
object isn't just a collection

252
00:15:31.960 --> 00:15:35.830
of properties and associations. It
is a behavior and the

253
00:15:35.830 --> 00:15:39.580
rich model of a real
world thing. And as you

254
00:15:39.580 --> 00:15:42.220
say, a lot of people
sort of lost that in

255
00:15:42.220 --> 00:15:44.320
the mid nineties and went
back to go to doing

256
00:15:44.320 --> 00:15:49.060
dumb objects. And I think
that has quite profound consequences.

257
00:15:49.060 --> 00:15:53.590
I mean, MVC, asp.net MVC,
the official line, as I

258
00:15:53.590 --> 00:15:57.280
understand it is that the
model is where you put

259
00:15:57.280 --> 00:15:59.650
the behavior. And yet, I
mean, I was talking with

260
00:15:59.650 --> 00:16:04.570
Phil hack and Dave ever
about this recently in Redmond.

261
00:16:05.170 --> 00:16:10.120
The fact is if you
look@manyasp.net MVC implementations, most of

262
00:16:10.120 --> 00:16:14.690
the business logic has, is
in the controllers. And, and

263
00:16:14.710 --> 00:16:18.070
a quite surprising amount is
leeched up into the views

264
00:16:18.070 --> 00:16:23.200
themselves. And the problem with
that is cause it works,

265
00:16:23.200 --> 00:16:28.540
but it becomes less maintainable
once you get some complexity

266
00:16:28.540 --> 00:16:30.490
in the model. I think
one of the, one of

267
00:16:30.490 --> 00:16:32.800
the frustrations we have is
that if I do a

268
00:16:32.800 --> 00:16:36.430
little demo and I knock
up, you know, three, three

269
00:16:36.430 --> 00:16:39.760
classes and so on and
so forth, I can make

270
00:16:39.760 --> 00:16:41.680
it work and make it
work very quickly. But people

271
00:16:41.680 --> 00:16:44.980
say, well, I don't see
the advantage, but where you

272
00:16:44.980 --> 00:16:47.920
would really see the advantage
is if you are developing,

273
00:16:47.980 --> 00:16:53.710
you know, 300, 500 classes
in your application, when the

274
00:16:53.950 --> 00:16:57.130
that's, when you lose the
agility, when, when, if the

275
00:16:57.220 --> 00:17:01.210
business logic starts leaching out
into other layers. So these,

276
00:17:01.210 --> 00:17:03.670
these objects, there are, there
are pocos, they don't have

277
00:17:03.670 --> 00:17:08.440
any dependencies on interfaces or
base classes of yours, Correct?

278
00:17:08.470 --> 00:17:12.820
<inaudible>. So with the exception
of following a few conventions

279
00:17:12.820 --> 00:17:17.560
for those additional methods, the
complimentary methods we call, call

280
00:17:17.560 --> 00:17:21.880
them, there's nothing that ties
your, your domain model to

281
00:17:21.880 --> 00:17:25.100
naked objects, which is quite
fortunate. I mean, when, when

282
00:17:25.110 --> 00:17:26.860
we were trying to get
this idea off the ground

283
00:17:26.860 --> 00:17:30.580
several years ago, obviously people
were very, very reluctant to

284
00:17:30.580 --> 00:17:32.830
try something that new and
that radical, but the one

285
00:17:32.830 --> 00:17:35.770
saving grace we could say
was, well, look, if you

286
00:17:35.770 --> 00:17:39.550
develop your domain model using
naked objects, even if you

287
00:17:39.550 --> 00:17:42.790
decide down the line that
you just can't cope with,

288
00:17:43.570 --> 00:17:46.390
you know, the style of
user interface or, or, you

289
00:17:46.390 --> 00:17:50.670
know, some other problem, you
could still take the domain

290
00:17:50.670 --> 00:17:54.720
model and write a conventional
application, whether it was in

291
00:17:54.720 --> 00:17:58.350
MVC or in, in WinForms
on top of it, you

292
00:17:58.350 --> 00:18:02.610
wouldn't have done anything unusual
to the domain objects to

293
00:18:02.610 --> 00:18:10.790
get there. Huh. Now what
about persistence? How do, what

294
00:18:10.790 --> 00:18:13.010
is, what is naked object
say about getting these things

295
00:18:13.010 --> 00:18:16.790
into, from an object model
into a relational database, We

296
00:18:16.790 --> 00:18:21.260
rely a hundred percent on
entity framework. We, we did

297
00:18:21.260 --> 00:18:25.360
some early experiments with hibernate
or other N hibernate. It

298
00:18:25.400 --> 00:18:27.140
was at the time that
we were trying, and it

299
00:18:27.140 --> 00:18:30.230
wasn't really rich enough. And
I think it's obviously moved

300
00:18:30.230 --> 00:18:32.480
on a long way now
and naked objects could be

301
00:18:32.480 --> 00:18:35.840
made to work with that.
But we decided to kind

302
00:18:35.840 --> 00:18:38.840
of go with the, the
Microsoft flow and go with

303
00:18:38.840 --> 00:18:43.220
entity framework. We were obviously
extremely disappointed when entity framework

304
00:18:43.220 --> 00:18:45.800
one came out as a
lot of people were, but

305
00:18:45.800 --> 00:18:49.610
entity framework four works really
well for us. And you

306
00:18:49.610 --> 00:18:54.620
can use that model first
or database first or increasingly

307
00:18:54.620 --> 00:18:57.710
code first. I mean, code
first is not officially released.

308
00:18:57.710 --> 00:19:00.260
It's still experimental, but it
does work very, very well

309
00:19:00.260 --> 00:19:03.200
with naked objects. It was
really interesting. So then what

310
00:19:03.200 --> 00:19:05.810
are some of the objections?
I mean, I could see

311
00:19:05.810 --> 00:19:09.290
someone saying that that we're,
we're going against separation of

312
00:19:09.290 --> 00:19:14.090
concerns because so much emphasis
is being put on having

313
00:19:14.090 --> 00:19:19.940
really smart models. Yes. I
hear that one quite often.

314
00:19:20.300 --> 00:19:24.050
It's a little frustrating because
I think that naked objects

315
00:19:24.050 --> 00:19:27.470
separates the concerns better than
anything else does. I mean,

316
00:19:27.830 --> 00:19:32.750
there is no user interface
logic in the model and,

317
00:19:32.780 --> 00:19:36.560
you know, whereas, whereas in,
in most other approaches, you

318
00:19:36.560 --> 00:19:40.280
end up with business logic
leeching out into the other

319
00:19:40.280 --> 00:19:43.820
layers. Whereas we say, actually
the you've got to keep

320
00:19:43.820 --> 00:19:47.720
them separate because the, the
generic user interface doesn't know

321
00:19:47.720 --> 00:19:51.470
anything about the model or
vice versa. So I don't

322
00:19:51.470 --> 00:19:54.560
think that's really a valid
objection. Although people do seem

323
00:19:54.560 --> 00:19:58.100
to imagine that what we're
doing is putting user interface

324
00:19:58.100 --> 00:20:01.190
logic into the end of
the model. You know, the

325
00:20:01.190 --> 00:20:04.760
most we're doing is adding
attributes and they're increasingly standard

326
00:20:05.300 --> 00:20:11.600
system attributes. Anyway, the a
lot of people say, well,

327
00:20:11.600 --> 00:20:14.300
I can see this would
work on the small scale,

328
00:20:14.330 --> 00:20:16.760
you know, for a simple
demo, but I can't see

329
00:20:16.760 --> 00:20:18.650
it working on it on
a large scale. And that

330
00:20:18.650 --> 00:20:22.190
also is frustrating because really
the opposite is true. I

331
00:20:22.190 --> 00:20:25.430
mean, we we've built systems
that involve hundreds of domain

332
00:20:25.460 --> 00:20:31.310
classes and, and hundreds of
users. And actually the benefits

333
00:20:31.310 --> 00:20:34.700
are much, much clearer on
a large and complex model

334
00:20:34.990 --> 00:20:36.860
than they are on a
simple demo, which you could

335
00:20:36.860 --> 00:20:40.790
have knocked up in Microsoft
access or what's it lightship

336
00:20:40.790 --> 00:20:45.620
or, or one of those
technologies light switch, light switch.

337
00:20:45.620 --> 00:20:49.150
Sorry. I think lightship is
actually a funnier, Funnier name.

338
00:20:49.260 --> 00:20:51.130
We should change that. We
should start calling it visual

339
00:20:51.130 --> 00:20:57.220
studio. Lightship Well, you haven't
got your unicorn edition of

340
00:20:57.570 --> 00:21:01.380
code first Kind of the
framework magic unicorn edition. Well,

341
00:21:01.380 --> 00:21:05.310
that's not any more controversial
than naked objects, frankly. Although

342
00:21:05.310 --> 00:21:07.440
I have a theory about
why you called it unicorn

343
00:21:07.440 --> 00:21:09.680
and the magic unicorn edition,
which is, I don't know

344
00:21:09.680 --> 00:21:12.480
if you are a fan
of blade runner, but in

345
00:21:12.480 --> 00:21:15.270
the, in the director's cut
of blade runner Ridley, Scott

346
00:21:15.270 --> 00:21:19.230
supposedly got decades to dream
about a unicorn. And that

347
00:21:19.230 --> 00:21:20.550
was meant to be a
hint that he was in

348
00:21:20.550 --> 00:21:25.650
fact a replicant. Good, suspicious
about that one. Very, very,

349
00:21:25.770 --> 00:21:29.640
very astute of you. Okay.
So we've got no cogeneration

350
00:21:30.240 --> 00:21:33.750
and you can do more
than just crud. You've got

351
00:21:34.290 --> 00:21:37.860
convention over configuration when it
comes to your unit, there's

352
00:21:37.860 --> 00:21:42.300
conventionally named methods and properties.
There's attributes. What if I

353
00:21:42.300 --> 00:21:44.670
want a UI? That's extremely
custom though. What if I

354
00:21:44.670 --> 00:21:47.460
don't want a basic looking
application? I want something very

355
00:21:47.460 --> 00:21:53.190
fancy. Well, there's nothing to
stop. You writing a completely

356
00:21:53.190 --> 00:21:57.420
custom MVC application. You can
write as many custom views

357
00:21:57.420 --> 00:22:01.240
and custom controllers as you
want. On top of the,

358
00:22:01.250 --> 00:22:07.080
the domain objects in, in
using standard standard MVC patterns.

359
00:22:07.080 --> 00:22:10.200
I mean, we provide a
whole lot of HTML helper

360
00:22:10.200 --> 00:22:13.920
methods that help you make
the calls into the naked

361
00:22:13.920 --> 00:22:17.460
objects model. But, but you
can do that. Obviously you're

362
00:22:17.460 --> 00:22:21.720
going to lose the advantage,
but I mean, all applications

363
00:22:21.720 --> 00:22:24.750
are going to involve some
amount of that. In fact,

364
00:22:24.780 --> 00:22:27.480
I'd like to draw a
distinction that I think isn't

365
00:22:27.810 --> 00:22:31.590
drawn nearly enough in, in
the software development world. You

366
00:22:31.590 --> 00:22:34.590
know, the, the, the user
interface guru Allen Cooper, who

367
00:22:34.590 --> 00:22:38.790
wrote the inmates are running
the asylum. He drew the

368
00:22:38.790 --> 00:22:44.130
distinction between sovereign applications and
transient applications where sovereign applications

369
00:22:44.130 --> 00:22:47.850
were, were largely internal applications
that users use all day,

370
00:22:47.850 --> 00:22:52.740
every day and transient applications
are for example, public facing

371
00:22:53.100 --> 00:22:56.880
applications. Now it seems to
me that most of the

372
00:22:56.880 --> 00:22:59.820
focus in software development in
the last few years has

373
00:22:59.820 --> 00:23:04.320
been on transient applications on
very high touch, very high

374
00:23:04.320 --> 00:23:08.850
design, you know, designed to
be used by people. Who've

375
00:23:08.850 --> 00:23:11.760
never seen it before, and
maybe never going to see

376
00:23:11.760 --> 00:23:13.880
it again, all that kind
of stuff you see at

377
00:23:13.890 --> 00:23:18.570
mix, for example, and it's
all great stuff. And, and

378
00:23:18.570 --> 00:23:21.210
that is a requirement for
those sort of applications, but

379
00:23:21.210 --> 00:23:25.110
that's not the way to
design sovereign applications. Not only

380
00:23:25.110 --> 00:23:28.350
is it too expensive to
design sovereign applications that way,

381
00:23:28.350 --> 00:23:32.790
but actually in a sovereign
application, you're necessarily got a

382
00:23:32.790 --> 00:23:36.210
lot more complexity and you
want to be able to

383
00:23:36.210 --> 00:23:39.000
give the user who, who
who's been through a learning

384
00:23:39.000 --> 00:23:42.120
curve. They are an employee
of the company. Typically you

385
00:23:42.120 --> 00:23:46.310
want to give them much
more control, you know, the

386
00:23:46.310 --> 00:23:48.890
ability to do things in
an order that suits them,

387
00:23:48.890 --> 00:23:52.370
not just to follow a
small set of scripts and,

388
00:23:52.380 --> 00:23:55.730
and not much attention has
been paid to that and,

389
00:23:55.730 --> 00:23:58.310
and naked objects. Although you
can use naked objects to

390
00:23:58.310 --> 00:24:02.150
build public facing transit applications,
the benefits is less clear

391
00:24:02.150 --> 00:24:06.470
there where it's really good
is in these internal data

392
00:24:06.470 --> 00:24:12.580
intensive complex model type applications.
Have you found anything that

393
00:24:12.790 --> 00:24:16.480
doesn't work that have you
found situations or models or

394
00:24:16.480 --> 00:24:23.740
domains in which naked objects
falls down? It, it, as

395
00:24:23.740 --> 00:24:26.530
I say, it's not so
good for a, a highly

396
00:24:26.530 --> 00:24:31.810
scripted high touch multimedia style,
you know, silver light style,

397
00:24:33.220 --> 00:24:40.690
public application it beyond that,
I would say, and it's

398
00:24:40.690 --> 00:24:43.720
not good for, for unstructured
data. I mean, it is,

399
00:24:43.750 --> 00:24:46.750
it is a relational database
kind of world that we

400
00:24:46.750 --> 00:24:52.240
operate in that that's his
strong point. Hm. Why do

401
00:24:52.240 --> 00:24:54.520
you think this is, might
be a difficult question, but

402
00:24:54.520 --> 00:24:59.350
why do you think this
isn't more popular? Well, I

403
00:24:59.350 --> 00:25:01.150
don't think it's the name.
I think the name or

404
00:25:01.160 --> 00:25:04.930
to add to its popularity.
I, I think it's, it's

405
00:25:04.930 --> 00:25:08.860
quite challenging. And you, you
alluded yourself earlier to the

406
00:25:08.860 --> 00:25:12.250
fact that, you know, a
lot of people have either

407
00:25:12.250 --> 00:25:17.350
ceased to put behavior on
objects or, or even consciously

408
00:25:17.350 --> 00:25:20.320
believe that's, that's not a
good, good idea. I'm not

409
00:25:20.320 --> 00:25:23.440
sure why. I think we
didn't help ourselves to some

410
00:25:23.440 --> 00:25:26.740
extent with the earlier versions
of naked objects where the,

411
00:25:26.780 --> 00:25:30.340
the resulting user interface was
not customizable now, as it

412
00:25:30.340 --> 00:25:33.430
happens, our biggest customer, which
is the Irish government, that's

413
00:25:33.430 --> 00:25:36.460
the version of naked objects
that they use. And they

414
00:25:36.460 --> 00:25:39.250
don't, they they've said to
us that they don't want

415
00:25:39.250 --> 00:25:43.300
to go into customizing the
UI. They've gained such huge

416
00:25:43.330 --> 00:25:46.960
benefit. Ironically, from being able
to say to the users,

417
00:25:47.320 --> 00:25:50.650
no, you can't customize the
UI. Now focus on what

418
00:25:50.650 --> 00:25:53.110
it is that you want
focus on the domain model.

419
00:25:53.530 --> 00:25:55.600
And what's interesting there is
that if you go and

420
00:25:55.600 --> 00:25:58.990
talk to the users and
these are government clerical offices,

421
00:25:59.320 --> 00:26:03.040
they all talk the same
language. The, the, you know,

422
00:26:03.040 --> 00:26:06.730
Eric Evans in, in domain driven
design talked about the ubiquitous

423
00:26:06.730 --> 00:26:10.450
language that you, you, you
needed a model that represented

424
00:26:10.450 --> 00:26:13.450
the ubiquitous language of the
business. Well, that's what they've

425
00:26:13.450 --> 00:26:16.810
got there. And the developers,
when the developers talk in

426
00:26:16.810 --> 00:26:20.560
that particular case, in terms
of customer and payment and

427
00:26:20.560 --> 00:26:26.950
scheme and case, and, and
officer that's what the user

428
00:26:26.950 --> 00:26:29.710
sees on the screen, the
user talks about customers and

429
00:26:29.710 --> 00:26:33.640
cases and, and schemes and
payments and offices. And so

430
00:26:33.640 --> 00:26:37.750
the user can translate their
requirements very, very easily. The

431
00:26:37.750 --> 00:26:41.140
user will say, look, I
want another action on the

432
00:26:41.140 --> 00:26:44.700
customer object. So I can
say, show me the most

433
00:26:44.700 --> 00:26:48.390
recent payments made to that
customer. And you now don't

434
00:26:48.390 --> 00:26:51.480
have all this translation process
of what that means for

435
00:26:51.480 --> 00:26:54.660
the developers. The developers understand
immediately. That means a new

436
00:26:54.660 --> 00:26:57.000
action on that object, a
new method on that object.

437
00:26:58.820 --> 00:27:01.010
So I asked a couple
of questions on Twitter about

438
00:27:01.010 --> 00:27:04.430
this in preparation for the
interview. I can only assume

439
00:27:04.430 --> 00:27:06.230
that you have Twitter searches
as well. So you may

440
00:27:06.230 --> 00:27:08.510
have followed some of the
discussions that there was a

441
00:27:08.510 --> 00:27:11.690
couple of interesting questions and
comments. And one of them

442
00:27:11.690 --> 00:27:15.980
I thought was interesting from
Scott bellwether, who basically said

443
00:27:15.980 --> 00:27:19.430
that exposing raw domain objects
out to kind of any,

444
00:27:20.000 --> 00:27:23.240
any expert he said to
any external user agent is

445
00:27:23.630 --> 00:27:29.720
kind of getting away with
something, your, your filling it

446
00:27:29.720 --> 00:27:32.000
with abstractions that are giving
it hints on how to

447
00:27:32.000 --> 00:27:36.200
use the, how to make
the UI. Is it really

448
00:27:36.200 --> 00:27:39.890
a domain object or is
it a, is it really

449
00:27:39.890 --> 00:27:42.380
some custom thing? I mean,
we realize that it's poco,

450
00:27:42.380 --> 00:27:46.430
it's technically poco, but how
Well, you know, that that's

451
00:27:46.430 --> 00:27:49.820
a valid question. I mentioned
the Irish government earlier, and

452
00:27:49.820 --> 00:27:52.940
I can pick an example
there. The, the first big

453
00:27:52.940 --> 00:27:56.810
application that we did for
them, there was something like

454
00:27:56.840 --> 00:28:01.760
300 domain classes, 300, 300
naked object classes. If you

455
00:28:01.760 --> 00:28:07.100
like in the model now
of those, I think the

456
00:28:07.100 --> 00:28:09.800
business would immediately, if you
looked at the code, if

457
00:28:09.800 --> 00:28:12.830
you actually went in and
looked@the.net classes, they actually wrote

458
00:28:12.830 --> 00:28:15.200
it in phoebe.net, but it
could equally have been in

459
00:28:15.200 --> 00:28:18.260
C sharp. If you look
to the dotnet classes and

460
00:28:18.260 --> 00:28:21.020
you showed them to a
business user, the business user

461
00:28:21.020 --> 00:28:26.390
would recognize more than 90%
of those. There are very

462
00:28:26.390 --> 00:28:28.730
few objects that would do
it, that that are doing

463
00:28:28.730 --> 00:28:33.200
something that the user doesn't
recognize. And secondly, more than

464
00:28:33.200 --> 00:28:39.230
90% of those correspond directly
to persist it entities. So

465
00:28:39.230 --> 00:28:41.330
there, I think there are,
there are a very small

466
00:28:41.330 --> 00:28:45.260
number in the first system.
There were about three, three

467
00:28:45.980 --> 00:28:50.780
domain objects that you might
call today, view models, meaning

468
00:28:50.780 --> 00:28:56.390
they were constructions purely to
facilitate something on the user

469
00:28:56.390 --> 00:28:59.930
interface. They weren't persisted, but
that's three out of 300

470
00:28:59.930 --> 00:29:03.200
in that particular case. Okay.
So, so then from your

471
00:29:03.200 --> 00:29:06.950
perspective, it is really about
modeling the business domain and

472
00:29:06.950 --> 00:29:08.630
make an, and I think
that, that, that was a

473
00:29:08.630 --> 00:29:11.210
very interesting, you said that
a huge number of those

474
00:29:11.210 --> 00:29:15.500
objects were quickly recognizable, like
the language that they were

475
00:29:15.500 --> 00:29:19.580
speaking wasn't MVC or.net. It
was the language of the

476
00:29:19.580 --> 00:29:24.050
business. Absolutely. And, and, you
know, I'm a great believer

477
00:29:24.050 --> 00:29:27.470
in, in domain driven design.
And, and, and when we

478
00:29:27.470 --> 00:29:30.950
conduct the analysis sessions, and
obviously we, we, we prototype

479
00:29:30.950 --> 00:29:33.650
rapidly and we show them
feedback, but you're all the

480
00:29:33.650 --> 00:29:37.430
time you're listening out when
the users are talking, you're

481
00:29:37.430 --> 00:29:40.430
listening for nouns that they're
using that aren't in the

482
00:29:40.430 --> 00:29:44.590
model. So a good example
is in this Irish government

483
00:29:44.590 --> 00:29:49.450
application, they, they pay pensions
in Ireland. A lot of

484
00:29:49.450 --> 00:29:52.240
people are pick up their
pension at the local post

485
00:29:52.240 --> 00:29:55.900
office through a payment book.
That's now gone electronic, but

486
00:29:55.900 --> 00:29:58.930
it wasn't a payment book.
So obviously we had payment

487
00:29:58.930 --> 00:30:03.430
book as an object and
that contained payments, but I,

488
00:30:03.460 --> 00:30:05.680
when we were talking to
them, I heard them refer

489
00:30:05.680 --> 00:30:09.040
a number of times to
the book renewal cycle, meaning

490
00:30:09.130 --> 00:30:12.640
once a year, duller prints
all these books. And, and

491
00:30:12.640 --> 00:30:15.310
we started asking the question,
well, they're using this noun

492
00:30:15.310 --> 00:30:18.640
book, renewal cycle. Why isn't
that in there in the

493
00:30:18.640 --> 00:30:21.310
object model? And as we
probed on that, we decided

494
00:30:21.310 --> 00:30:23.950
it should be that there
is now a persisted object.

495
00:30:24.430 --> 00:30:27.910
Each, each payment book is
associated with its book renewal

496
00:30:27.910 --> 00:30:31.290
cycle. Who was your external
reviewer on your PhD thesis?

497
00:30:33.090 --> 00:30:36.750
Well, it was actually the
Norwegian professor trig V cranes

498
00:30:36.750 --> 00:30:42.420
calc, and he is not
terribly widely known except that

499
00:30:42.420 --> 00:30:46.320
he was the inventor of
the MVC pattern back in

500
00:30:46.320 --> 00:30:50.790
1978. And it wasn't my
decision that, you know, it's

501
00:30:50.790 --> 00:30:55.170
never your decision who your
external examiner is. And when

502
00:30:55.800 --> 00:30:57.460
it became known to me
that that's what was going

503
00:30:57.460 --> 00:30:59.340
to be, I was a
little nervous because a lot

504
00:30:59.340 --> 00:31:03.600
of people were saying, well,
this naked objects, pattern flies

505
00:31:03.600 --> 00:31:07.500
in the face of, or
contradicts the MVC pattern, because

506
00:31:07.500 --> 00:31:10.080
where are your views and
controllers? Now? I didn't feel

507
00:31:10.080 --> 00:31:13.440
that was true. Our view
is that, I mean, naked

508
00:31:13.440 --> 00:31:17.160
objects is MVC. It's just
that to begin with your

509
00:31:17.160 --> 00:31:20.940
views and controllers are completely
generic. You're writing the models.

510
00:31:21.510 --> 00:31:25.380
And I walked into my
Viber as they call it

511
00:31:25.380 --> 00:31:27.710
here or defense as it
would be called in, in

512
00:31:27.720 --> 00:31:31.500
the States when I finished
my thesis and there, he

513
00:31:31.500 --> 00:31:34.140
was sitting there with the
other examiners and he said,

514
00:31:34.140 --> 00:31:36.000
well, I'd like to put
you at ease, Richard, we're

515
00:31:36.000 --> 00:31:40.560
awarding your you're a PhD
straight off without any further

516
00:31:40.890 --> 00:31:43.700
questions, except for our own
interests. And what he, you

517
00:31:43.710 --> 00:31:45.630
then went on to say
that it was really interesting.

518
00:31:45.630 --> 00:31:49.800
He said, when I read
this, I realized that this

519
00:31:49.800 --> 00:31:53.280
was our intent back in
the late seventies, when we

520
00:31:53.280 --> 00:31:56.730
were working on MVC. The
intent was that when you

521
00:31:56.730 --> 00:31:59.970
had a model, you ought
to get a generic view

522
00:31:59.970 --> 00:32:02.880
and controller for free so
that you didn't have to

523
00:32:02.880 --> 00:32:05.280
write anything. And you should
only then write views and

524
00:32:05.280 --> 00:32:09.930
controllers as you need to
deviate from that generic presentation.

525
00:32:10.050 --> 00:32:11.910
But he said, we never
did it. It was never

526
00:32:11.910 --> 00:32:15.480
done back then. And so,
you know, here I was,

527
00:32:15.480 --> 00:32:21.870
whatever that is 25 years
later actually doing it. Well,

528
00:32:21.870 --> 00:32:23.820
I really appreciate you taking
the time to sit down

529
00:32:23.820 --> 00:32:27.150
and explain this to us
and where can I must

530
00:32:27.150 --> 00:32:29.580
be, want people going around
and Googling with being for

531
00:32:29.580 --> 00:32:32.490
naked and objects. Where's the
best place for people to

532
00:32:32.490 --> 00:32:34.620
learn about this pattern and
to start playing with it

533
00:32:34.620 --> 00:32:38.460
themselves. Incidentally, if you do
Google or being for, for

534
00:32:38.460 --> 00:32:42.350
naked, you'll be surprised that
the first 500 hits are

535
00:32:42.350 --> 00:32:45.260
to do with us the
next 5 million and what you

536
00:32:45.260 --> 00:32:53.240
might expect, but no, it
go to www.nakedobjects.net. And that's

537
00:32:53.240 --> 00:32:56.990
where we describe it. Or
anyone can download the free

538
00:32:56.990 --> 00:33:02.660
evaluation version of naked objects
MVC. Right now it's the

539
00:33:02.660 --> 00:33:05.210
evaluation version is the whole
thing. You can develop a

540
00:33:05.210 --> 00:33:08.960
complete application as an example
application with it. You just

541
00:33:08.960 --> 00:33:11.720
can only run it locally.
If you want to deploy

542
00:33:11.720 --> 00:33:14.210
it, you need a license
version, but there's also a

543
00:33:14.210 --> 00:33:17.510
bunch of videos on that
site, like an object stop.

544
00:33:17.900 --> 00:33:21.700
And that'll give you the
idea as well. Well, brilliant.

545
00:33:21.700 --> 00:33:23.230
Well, thanks a lot. And
you've given us a lot

546
00:33:23.230 --> 00:33:25.660
to think about, and we'll
all, we'll all go off

547
00:33:25.660 --> 00:33:28.660
and do the reading and
decide for ourselves. Thank you,

548
00:33:28.660 --> 00:33:31.690
Scott. Thank you, Richard Paulson.
And this has been another

549
00:33:31.690 --> 00:33:34.690
episode of Hansel minutes, and
I'll see you again next

550
00:33:34.690 --> 00:33:34.930
week.

