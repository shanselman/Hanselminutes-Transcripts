WEBVTT FILE

1
00:00:04.380 --> 00:00:18.020
<inaudible> From Hansel minutes.com. It's
Hansel minutes, a weekly discussion

2
00:00:18.020 --> 00:00:22.640
with web developer and technologists.
Scott Hanselman hosted by Carl Franklin.

3
00:00:23.660 --> 00:00:28.400
This is Lawrence Ryan announcing show
number 83. Recorded live Tuesday,

4
00:00:28.400 --> 00:00:35.750
September 25th, 2007. Support for Hanselman is
provided by Tellerik rad controls.

5
00:00:36.380 --> 00:00:39.560
The most comprehensive suite of
components for windows forms and

6
00:00:39.560 --> 00:00:53.450
tsp.net web applications. online@wwwdottelerikdotcomandby.net developers
journal the world's leading.net developer

7
00:00:53.450 --> 00:01:00.230
magazine online at www dot
<inaudible> dot com. In this

8
00:01:00.230 --> 00:01:05.120
episode, Sean Burke from Microsoft makes
an announcement that will change

9
00:01:05.120 --> 00:01:13.760
the way you write and
debug.net code. Hi, this is

10
00:01:13.760 --> 00:01:16.460
Carl Franklin. You're listening to Hansel
minutes from handsome and it's

11
00:01:16.460 --> 00:01:18.740
dot com. I'm here with
Scott and his special guest.

12
00:01:18.740 --> 00:01:23.600
Sean Burke. Hi guys. Hi Carl.
Carl. We've got a surprise

13
00:01:23.600 --> 00:01:28.160
for you, even though we're
recording this on Tuesday. This

14
00:01:28.160 --> 00:01:31.250
is Friday probably or Thursday
afternoon when the show's going

15
00:01:31.250 --> 00:01:32.900
live and Sean's got a
little something he wants to

16
00:01:32.900 --> 00:01:35.810
share with the, with the
group here. Okay. This is

17
00:01:35.810 --> 00:01:38.720
a scoop, then this is
a, this is a scoop.

18
00:01:38.750 --> 00:01:42.140
This is our internal Microsoft
scoop. We've got awesome. Let's

19
00:01:42.140 --> 00:01:46.640
hear it. Alright guys, pretty
excited about this. Something I've

20
00:01:46.640 --> 00:01:48.380
been working on for a
couple of years, we are

21
00:01:48.380 --> 00:01:50.960
going to be rolling out
a program that allows developers

22
00:01:50.960 --> 00:01:56.750
to have access to.net framework
source code. Wow. Now this

23
00:01:56.750 --> 00:02:00.380
is, I mean, we have
reflector. This is the source

24
00:02:00.380 --> 00:02:03.860
code, this and this isn't
a, what is it, mano

25
00:02:03.860 --> 00:02:08.420
or the other one? The
other project. This is the

26
00:02:08.420 --> 00:02:11.510
actual source code for the,
the dotnet frameworks. It's not,

27
00:02:11.750 --> 00:02:14.690
not reflect, or this allows
you to actually in visual

28
00:02:14.690 --> 00:02:17.960
studio, step into dotnet framework
calls, walk through the dot

29
00:02:18.080 --> 00:02:23.510
framework code and then build
a better app. Wow. They're

30
00:02:23.510 --> 00:02:25.550
going to be able to
F 11 into the code

31
00:02:25.550 --> 00:02:29.360
is what you're saying step
into. Absolutely. It's not just

32
00:02:29.360 --> 00:02:32.600
the symbols. Well, it's the
symbols and the code. So

33
00:02:32.600 --> 00:02:35.940
you get a full, what
we call full retail symbols.

34
00:02:36.000 --> 00:02:39.050
Those symbols are not stripped
of member variable names and

35
00:02:39.050 --> 00:02:42.200
stuff like that. And then
we're going to be shipping

36
00:02:42.740 --> 00:02:44.930
or shipping, but have a
server that has the code

37
00:02:44.930 --> 00:02:47.600
on it. So what happens
is visual studio to do

38
00:02:47.600 --> 00:02:50.300
a couple of quick configuration
steps with your visual studio

39
00:02:50.300 --> 00:02:54.080
2008, and then once that's
set up, you'll kind of

40
00:02:54.590 --> 00:02:56.720
magically start to get sourced
and symbols for the code

41
00:02:56.720 --> 00:03:00.700
that you're debugging against. That's
incredible. So W can I

42
00:03:00.700 --> 00:03:04.270
ask you why? Like what,
what prompted this and was

43
00:03:04.270 --> 00:03:07.650
there a big demand for
it? There's been a demand

44
00:03:07.650 --> 00:03:09.690
for it? There's actually a
long story with this. I've

45
00:03:09.690 --> 00:03:12.420
been working on, this is
kind of a side project.

46
00:03:12.420 --> 00:03:16.290
Now for several years, several
years ago, I did a

47
00:03:16.290 --> 00:03:20.460
blog posting about kind of
ruminating how we could deliver

48
00:03:21.210 --> 00:03:23.250
source code for windows forms,
which is the project that

49
00:03:23.250 --> 00:03:25.710
I was part of at
that point in time. And

50
00:03:25.710 --> 00:03:28.260
it generated a lot of
excitement and we had a

51
00:03:28.260 --> 00:03:31.800
fair amount of support for
it internally. And it just

52
00:03:31.980 --> 00:03:34.350
turns out releasing source for
us has got a lot

53
00:03:34.350 --> 00:03:37.920
of moving parts associated with
it. And it's just taken

54
00:03:37.920 --> 00:03:40.050
some time to kind of
figure out the right story

55
00:03:40.740 --> 00:03:42.690
as far as how we
can deliver it to developers

56
00:03:42.690 --> 00:03:44.460
in a way that's really
easy for them to manage.

57
00:03:45.180 --> 00:03:47.730
There's a bunch of issues
around like, Hey, what happens

58
00:03:47.730 --> 00:03:50.370
when we released QFS or
SPS? And the source goes

59
00:03:50.370 --> 00:03:51.720
out of date and stuff
like that. And so we

60
00:03:51.720 --> 00:03:53.550
didn't really have a really
tight story and we wanted

61
00:03:53.550 --> 00:03:54.990
to make sure that we
had a good story around

62
00:03:54.990 --> 00:03:57.480
this before we released it.
And with the, you know,

63
00:03:57.480 --> 00:03:59.820
new version of visual studio
orcas, we were able to

64
00:03:59.820 --> 00:04:02.670
add some features on the,
on the client side, the

65
00:04:02.910 --> 00:04:06.060
visual studio side, and then
come up with this story

66
00:04:06.060 --> 00:04:08.130
for the backend server side,
that it gives a really

67
00:04:08.130 --> 00:04:10.380
nice seamless story. So developers
can just do a quick

68
00:04:10.380 --> 00:04:14.340
configuration step. They're not installing
zip files and setting symbol

69
00:04:14.340 --> 00:04:16.710
paths and doing a bunch
of stuff like that for

70
00:04:16.710 --> 00:04:18.840
different products. It's one setup.
And then you get the

71
00:04:18.840 --> 00:04:21.240
source for everything that we
have available, And it just

72
00:04:21.240 --> 00:04:23.640
trickles down, right? It just
trickles down. Exactly. And this

73
00:04:23.640 --> 00:04:26.160
is for all versions of
the framework, including three five

74
00:04:27.030 --> 00:04:29.370
While we're doing it. So
what we're doing is we're

75
00:04:29.370 --> 00:04:32.490
going to really be releasing
source for kind of the

76
00:04:32.490 --> 00:04:34.980
core framework immediately. And we're
looking at a bunch of

77
00:04:34.980 --> 00:04:37.080
other stuff and trying to
decide exactly which pieces we're

78
00:04:37.080 --> 00:04:39.840
going to release above and
beyond that over time, but

79
00:04:39.840 --> 00:04:41.310
the setup in a way
that we can kind of

80
00:04:41.310 --> 00:04:43.500
make those decisions and we
don't have to make them

81
00:04:43.500 --> 00:04:45.690
all right. Now, developers can
continue to get code over

82
00:04:45.690 --> 00:04:48.810
time so we can kind
of trickle these out. We're

83
00:04:48.810 --> 00:04:51.750
building essentially a platform for
this, that teams, groups across

84
00:04:51.750 --> 00:04:53.850
Microsoft. Now how the option,
if it makes sense for

85
00:04:53.850 --> 00:04:56.760
their business to go ahead
and release source in a

86
00:04:56.760 --> 00:05:02.310
reference model for developers. Yeah.
I'm looking up here@seanburke.com. S

87
00:05:02.310 --> 00:05:05.430
H a S H a
w N B U R

88
00:05:05.430 --> 00:05:09.420
K E. This was in
February of 2005. Yeah, that's

89
00:05:09.420 --> 00:05:12.090
kind of when it all
started. Wow. It just says

90
00:05:12.090 --> 00:05:14.610
right there. I want to
deliver windows form source code

91
00:05:14.610 --> 00:05:15.930
to you. I want to
do it for years and

92
00:05:15.930 --> 00:05:18.180
I'm putting together a plan
to make it happen. What

93
00:05:18.180 --> 00:05:21.630
does it feel like to
have a well, I actually,

94
00:05:21.630 --> 00:05:24.630
I, as someone who's worked
at Microsoft now for a

95
00:05:24.630 --> 00:05:29.340
massive two weeks, I have
extensive experience navigating over the

96
00:05:29.340 --> 00:05:31.410
last 14 days. And I
can say that things do

97
00:05:31.410 --> 00:05:34.680
move a little slower than
I was expecting. This is

98
00:05:34.680 --> 00:05:36.120
one that I, I mean,
I haven't been working on

99
00:05:36.120 --> 00:05:39.240
it steady for that long.
It's a, this is something

100
00:05:39.240 --> 00:05:41.220
that I've been working on
in spurts and finally got

101
00:05:41.220 --> 00:05:43.230
really good traction on and
got a good plan pulled

102
00:05:43.230 --> 00:05:47.130
together six or eight months
ago, maybe. And then it's

103
00:05:47.130 --> 00:05:49.980
been pretty good progress since
then. What kind of things

104
00:05:49.980 --> 00:05:51.990
do you do you bump
into? I know that during

105
00:05:51.990 --> 00:05:55.350
new employee orientation they had,
they brought in LCA, they

106
00:05:55.350 --> 00:05:58.010
put in legal and corporate
affairs and they kind of

107
00:05:58.010 --> 00:05:59.810
put the fear into us
and told us all sorts

108
00:05:59.810 --> 00:06:03.110
of legal things and about
protecting the company. And basically

109
00:06:03.110 --> 00:06:05.060
if you want to do
anything, you talked to LCA

110
00:06:05.120 --> 00:06:07.820
talk to leave and corporate
affairs, is this primarily a

111
00:06:07.820 --> 00:06:11.980
legal issue? Certainly it's not
a technical one, right. Actually,

112
00:06:11.980 --> 00:06:13.810
you know, like I mentioned,
the, the issue about how

113
00:06:13.810 --> 00:06:17.440
you deal with updates and
multiple versions and stuff like

114
00:06:17.440 --> 00:06:19.090
that is a technical issue.
So there actually is a

115
00:06:19.090 --> 00:06:23.170
fair amount of technical stuff
involved. You know, I'm fortunate

116
00:06:23.170 --> 00:06:25.860
that I've had a great
relationship. The other project that

117
00:06:25.860 --> 00:06:29.050
I run, which is the
Ajax control toolkit is another

118
00:06:29.050 --> 00:06:31.690
issue that we're kind of
shipping source written by Microsoft

119
00:06:31.690 --> 00:06:34.660
developers. So I'm fortunate to
have a great relationship with

120
00:06:34.660 --> 00:06:38.080
RLC folks and they're, they're
really smart and understand the

121
00:06:38.080 --> 00:06:40.540
technical issues. And I was
able to sit down with

122
00:06:40.540 --> 00:06:42.310
them and kind of hash
this out and understand what

123
00:06:42.310 --> 00:06:45.910
the risks were and took
it up through, you know,

124
00:06:45.910 --> 00:06:48.700
my management chain and, and
had some really good open

125
00:06:48.700 --> 00:06:51.700
conversations with them about the
benefits and the costs and

126
00:06:51.700 --> 00:06:53.680
the risks. And, you know,
we felt like it's, it's

127
00:06:53.680 --> 00:06:55.390
kind of a, it's the
right thing. And it's going

128
00:06:55.390 --> 00:06:58.270
to help our developers be
successful on the platform. And

129
00:06:58.270 --> 00:06:59.800
like I said, we have
a story that makes sense

130
00:06:59.800 --> 00:07:02.620
for delivery and update and
the pieces just kind of

131
00:07:02.620 --> 00:07:05.650
all came together. I'm still
kind of curious as to,

132
00:07:05.680 --> 00:07:08.500
you know, what kind of
requests you had in, in,

133
00:07:08.510 --> 00:07:11.080
in problems that people were
having that only having the

134
00:07:11.080 --> 00:07:16.450
source was the, the only
answer to actually, I can,

135
00:07:16.450 --> 00:07:19.840
I can speak to that,
Carl. Yeah, sure. So I

136
00:07:19.840 --> 00:07:22.600
worked at Kirlian, right? We
did online finance and banking.

137
00:07:23.080 --> 00:07:26.590
And one time I had
to call up PSS and

138
00:07:26.620 --> 00:07:29.080
get a hot fix for
something and asp.net. And I

139
00:07:29.080 --> 00:07:32.560
had to get it escalated
and escalated. And I was

140
00:07:32.560 --> 00:07:35.560
spending time going back and
forth with the, with the

141
00:07:35.560 --> 00:07:38.500
hot fix engineer, trying to
explain to him exactly what

142
00:07:38.500 --> 00:07:40.660
was going on. It was
a little unusual, but I

143
00:07:40.660 --> 00:07:44.440
was actually able to tell
him with reflector kind of

144
00:07:44.440 --> 00:07:47.590
where I was in the
source, but I didn't know

145
00:07:47.590 --> 00:07:49.780
what files, I didn't know
what lines I was basically

146
00:07:49.780 --> 00:07:52.750
saying, I'm in this function
in this class, all the

147
00:07:52.750 --> 00:07:56.230
member variables are wrong. The
reflector of course, is not

148
00:07:56.230 --> 00:07:59.350
showing you the source reflectors
showing you kind of the

149
00:07:59.350 --> 00:08:03.580
programmers intent gleaned from the
intermediate language. So it's not

150
00:08:03.760 --> 00:08:07.420
reality, but for the purposes
of my debugging session, it

151
00:08:07.420 --> 00:08:09.970
was my reality. So I
was kind of having to

152
00:08:10.180 --> 00:08:12.430
mentally sync back and forth
with a guy who was

153
00:08:12.430 --> 00:08:15.310
actually sitting there looking at
the source and telling him

154
00:08:15.400 --> 00:08:17.770
here is the line. Of
course it wasn't the line.

155
00:08:17.770 --> 00:08:19.990
Cause you know, one line
and reflect are my two

156
00:08:19.990 --> 00:08:22.960
lines in the source. Sure.
And we eventually sinked up

157
00:08:22.960 --> 00:08:25.300
and the hot fix came
out and it's been pushed

158
00:08:25.300 --> 00:08:28.720
into all the versions of
the framework. But that whole

159
00:08:28.750 --> 00:08:31.780
multi-hour, you know, six to
eight hour experience of going

160
00:08:31.780 --> 00:08:33.520
back and forth with this
guy could have been made

161
00:08:33.520 --> 00:08:36.040
much easier. If I had
simply said, look, I've actually

162
00:08:36.040 --> 00:08:37.990
found something. This is how
it works. And this is

163
00:08:37.990 --> 00:08:40.540
how it ought to work.
I think that's what it

164
00:08:40.540 --> 00:08:42.760
tells me. Well, that's someone.
Yeah. It's actually even the

165
00:08:42.760 --> 00:08:46.060
more advanced scenario. The simplest
scenario is this is that,

166
00:08:46.060 --> 00:08:48.190
especially when you're new to
something or using a future,

167
00:08:48.190 --> 00:08:50.050
you haven't used before and
you're getting this acception from

168
00:08:50.050 --> 00:08:51.790
deep in the bowels of
it. You can't figure out

169
00:08:52.090 --> 00:08:54.730
the docs. Don't tell you
what the successions doing. You

170
00:08:54.730 --> 00:08:57.360
know, why you're this exception,
the newsgroups aren't telling you

171
00:08:57.360 --> 00:08:59.640
why you're getting this exception.
And the reason nobody's doing

172
00:08:59.640 --> 00:09:01.800
that is because you're doing
something just totally wacky, right?

173
00:09:01.800 --> 00:09:04.170
You just did something along
the way. That's completely backwards.

174
00:09:04.200 --> 00:09:06.210
You are your hardware one
or the other. You are

175
00:09:06.220 --> 00:09:09.060
your hardware. Exactly. So, you
know, when you have the

176
00:09:09.060 --> 00:09:12.240
source, usually that's trivial to
figure out, you can go

177
00:09:12.240 --> 00:09:14.490
to visual studio and say,
break on exceptions and make

178
00:09:14.490 --> 00:09:16.680
it happen and go, Oh,
it's because I didn't set

179
00:09:16.710 --> 00:09:20.370
the, you know, the Lambda
variable, the 12 or whatever

180
00:09:20.370 --> 00:09:22.560
like that. And it ends
up being very simple to

181
00:09:22.560 --> 00:09:25.050
track on those sorts of
issues. If you can walk

182
00:09:25.050 --> 00:09:27.510
through the code, if you
can't, they end up being,

183
00:09:27.510 --> 00:09:30.390
you kind of have to
triangulate and you know, do

184
00:09:31.380 --> 00:09:33.210
a lot of kind of
backflips to figure it out.

185
00:09:33.210 --> 00:09:35.760
So there's a lot of
simple scenarios where having the

186
00:09:35.760 --> 00:09:38.250
source allows developers to be
much more effective in how

187
00:09:38.250 --> 00:09:40.550
they're using. I see. So
even if you could look

188
00:09:40.550 --> 00:09:43.580
at the code that through
the exception and walk into

189
00:09:43.580 --> 00:09:47.150
it and see when it
says, you know, no reference

190
00:09:47.150 --> 00:09:49.100
exception, it's because I didn't
pass it and blah, blah,

191
00:09:49.100 --> 00:09:51.500
blah. Yeah. That makes a
lot of sense. I can

192
00:09:51.500 --> 00:09:54.860
understand that, but I thought
that's, you know, Scott and

193
00:09:54.860 --> 00:09:57.110
I had been talking about
using the symbol servers and

194
00:09:57.110 --> 00:09:59.510
things like that. And I
thought with the symbols, that

195
00:09:59.510 --> 00:10:03.500
would be enough for you
to look at a representation

196
00:10:03.500 --> 00:10:06.650
of the source code as
well. The symbols don't help

197
00:10:06.650 --> 00:10:10.760
you too much with managed
code. Really. So if you

198
00:10:10.760 --> 00:10:13.070
think about native code for
a second, if you don't

199
00:10:13.070 --> 00:10:15.440
have symbols for native code,
what you get in your

200
00:10:15.440 --> 00:10:18.650
call frame is, you know,
user 30, two dot ACCE

201
00:10:18.980 --> 00:10:22.970
bang, some hex number and
another hex numbers. That's totally

202
00:10:22.970 --> 00:10:26.090
useless with the symbols with
native code, with, with stripped

203
00:10:26.090 --> 00:10:30.920
retail, single symbols, which is
what you'll often get. You'll

204
00:10:30.920 --> 00:10:33.740
get a function name at
least and an offset. And

205
00:10:33.740 --> 00:10:36.050
based on that, the engineer
can go back and on

206
00:10:36.050 --> 00:10:37.580
our side can go back
and figure out what line

207
00:10:37.580 --> 00:10:39.260
of code is based on
the offset. So you're kind

208
00:10:39.260 --> 00:10:41.450
of forward a little bit
there with the retail stuff,

209
00:10:42.200 --> 00:10:45.590
with managed code, you always
get the call stack, even

210
00:10:45.590 --> 00:10:49.100
without symbols. You always get
the function names, right? So

211
00:10:49.100 --> 00:10:51.230
that's, you're kind of already
there to begin with. When

212
00:10:51.230 --> 00:10:54.740
you add in symbols, like
strip symbols for managed code,

213
00:10:55.100 --> 00:10:58.340
then you might get some
variable names in the, you

214
00:10:58.340 --> 00:11:02.510
know, locals window, Sean, what's
a strip symbol, Strip symbols,

215
00:11:02.540 --> 00:11:05.330
essentially. There's there's full retail
symbols, which are essentially, so

216
00:11:05.330 --> 00:11:07.130
if you go to your
machine right now and you

217
00:11:07.130 --> 00:11:09.860
create a project and you
flip the configuration to retail

218
00:11:10.100 --> 00:11:12.140
and you build it, those
are like full retail symbols.

219
00:11:12.140 --> 00:11:14.420
They just have all the,
this have all the M

220
00:11:14.630 --> 00:11:17.360
line numbers in them. They
have all the source file

221
00:11:17.360 --> 00:11:19.340
names and then they have
all the member variable names

222
00:11:19.340 --> 00:11:22.280
in them and everything strip
symbols are kind of symbols

223
00:11:22.280 --> 00:11:24.620
that don't have that stuff.
So I'm pretty sure the

224
00:11:24.620 --> 00:11:26.600
symbols that you get like
off of the old windows

225
00:11:26.600 --> 00:11:28.340
and T disks, or I'm
not sure what's up on

226
00:11:28.340 --> 00:11:30.740
symbol server, but those I
assume are strip that they

227
00:11:30.740 --> 00:11:34.010
don't have file line numbers
in them. They just have

228
00:11:34.010 --> 00:11:37.700
like variable, I mean, a
function names and variable names

229
00:11:37.700 --> 00:11:40.220
and stuff like that. Okay.
Right. Primarily function named and

230
00:11:40.220 --> 00:11:42.260
variable names. It's the, it's
the, it's the name of

231
00:11:42.260 --> 00:11:45.620
the source code file that
would then cause visual studio

232
00:11:45.620 --> 00:11:49.070
to say, Oh, you know,
using this offset, I found

233
00:11:49.400 --> 00:11:51.260
this function. I now want
to go looking for this

234
00:11:51.260 --> 00:11:53.290
file. If you've ever, if
you've ever had visual studio

235
00:11:53.290 --> 00:11:56.020
prompt you to open a
file, you didn't have. Yep.

236
00:11:56.320 --> 00:11:58.480
That's exactly. Now you'll have
that file. So at that

237
00:11:58.480 --> 00:12:00.940
point, I'm guessing here, right?
Shawn, at that point where

238
00:12:00.940 --> 00:12:03.700
visual studio would ordinarily go
looking for the file and

239
00:12:03.700 --> 00:12:05.530
a few places look in
the path, look in the

240
00:12:05.530 --> 00:12:09.130
current folder before it pops
open that dialogue. Now it

241
00:12:09.130 --> 00:12:11.320
has another step it's going
to go off somewhere on

242
00:12:11.320 --> 00:12:14.220
the internet. Yep. Well what
actually, it, it's actually really

243
00:12:14.220 --> 00:12:16.920
seamless. All you need to
do in visual studio is

244
00:12:16.920 --> 00:12:18.330
you just need to tell
it where to go out

245
00:12:18.330 --> 00:12:20.970
on the, out on the
internet to get the symbols.

246
00:12:21.540 --> 00:12:23.490
So it'll do its regular
symbol search. And then it'll

247
00:12:23.490 --> 00:12:25.350
go ahead. And if it
finds a symbols out on

248
00:12:25.370 --> 00:12:27.390
the symbol server that we're
putting together for the reference

249
00:12:27.390 --> 00:12:30.450
stuff and it finds that
guy it'll download that set,

250
00:12:30.660 --> 00:12:34.410
that symbol file that PDB.
And then in that PDB

251
00:12:34.710 --> 00:12:38.100
is all the URLs to
the source files. So it's

252
00:12:38.100 --> 00:12:40.200
actually kind of a nice
cascading story. You get the

253
00:12:40.200 --> 00:12:42.900
PDB and you're done, Oh,
you have to, all you

254
00:12:42.900 --> 00:12:44.880
have to do is attach
to the, you know, putting

255
00:12:44.880 --> 00:12:47.730
the URL dissemble server and
the source code will trickle

256
00:12:47.730 --> 00:12:51.300
down. Yeah. That's exactly right.
Sweets. Yeah. It's really slick.

257
00:12:51.360 --> 00:12:52.830
And then what happens is
that when you get a

258
00:12:52.830 --> 00:12:55.200
new version, you know, when
we add, you know, either

259
00:12:55.200 --> 00:12:58.440
when we add more source
up there, next time you

260
00:12:58.440 --> 00:13:00.240
debug it just to do
a go, Oh, well now

261
00:13:00.240 --> 00:13:02.010
I can find a symbol
for this other DLL that

262
00:13:02.010 --> 00:13:04.500
I couldn't find last time
and boom, you get more.

263
00:13:04.500 --> 00:13:06.810
And then if versions change,
you update, you get a

264
00:13:06.810 --> 00:13:09.180
Q a, we haven't really
decided what re you know,

265
00:13:09.180 --> 00:13:10.560
how often we're going to
push these up, but say

266
00:13:10.560 --> 00:13:13.260
SP for sure. And you
get an SP boom. You

267
00:13:13.260 --> 00:13:15.300
know, we push up the
new USP symbols and just

268
00:13:15.300 --> 00:13:18.150
magically you get the new
PDB, it understands the versions,

269
00:13:18.330 --> 00:13:20.340
you get the new source.
And if you, if you

270
00:13:20.340 --> 00:13:24.000
happen to be debugging and
you hit some code that

271
00:13:24.000 --> 00:13:26.820
doesn't have source available, what
do you think? Yeah. You

272
00:13:26.820 --> 00:13:29.400
get the, you get the
existing experience, which is you

273
00:13:29.400 --> 00:13:33.000
either get, if there's no
PDB available, you'll get assembly

274
00:13:33.000 --> 00:13:37.470
language, you know, no source
available for this location. I

275
00:13:37.470 --> 00:13:39.120
think maybe the scenario you're
asking for is what if

276
00:13:39.120 --> 00:13:40.830
the PDB points at a
file that isn't on the

277
00:13:40.830 --> 00:13:46.200
server? Yeah. Well that too.
Yeah. Okay. Sean just said

278
00:13:46.200 --> 00:13:47.940
something that was very interesting.
There was kind of a

279
00:13:47.940 --> 00:13:49.740
throwaway statement, but it was
interesting to me where he

280
00:13:49.740 --> 00:13:51.540
said that and the versions
are all taken care of

281
00:13:51.540 --> 00:13:54.300
for you. So there's a
hash somewhere that's being with

282
00:13:54.300 --> 00:13:58.170
keeping track because nothing's built,
you know, these PDBs, like

283
00:13:58.170 --> 00:14:01.410
it created ne everything needs
to line up. If I

284
00:14:01.410 --> 00:14:03.540
remember correctly, when you set
up a symbol server or

285
00:14:03.540 --> 00:14:04.980
a source server, and you
can actually go up on

286
00:14:04.980 --> 00:14:07.830
MSDN and, and read up
on how to make your

287
00:14:07.830 --> 00:14:10.440
own internal source server. So
your own company could have

288
00:14:10.440 --> 00:14:13.650
a source server and it's
really primarily a way to

289
00:14:13.650 --> 00:14:16.710
lay out a directory structure.
Isn't it? Exactly. And so

290
00:14:16.710 --> 00:14:18.600
I worked pretty closely with
the guy that invented that

291
00:14:18.600 --> 00:14:21.810
technology. We've been using that
technology here internally at Microsoft

292
00:14:21.810 --> 00:14:25.050
for years, essentially, what you
can pretty much run any

293
00:14:25.050 --> 00:14:28.380
debug product here at Microsoft
and automatically get source and

294
00:14:28.380 --> 00:14:31.320
symbol through this exact same
technology. We have a centralized

295
00:14:31.320 --> 00:14:35.670
source and symbol server. So
it can handle like essentially

296
00:14:35.670 --> 00:14:38.340
infinite numbers of versions side
by side. It's just an

297
00:14:38.340 --> 00:14:40.050
X copy. It can lay
down right next to each

298
00:14:40.050 --> 00:14:42.540
other because of the way
the file structure, Sean, when

299
00:14:42.540 --> 00:14:45.420
does this happen? And where
can we get the URL

300
00:14:45.420 --> 00:14:48.360
and the instructions for, for
plugging it in? So this

301
00:14:48.360 --> 00:14:50.400
is going to be available
about the time we release

302
00:14:50.420 --> 00:14:53.840
orcas. So the servers aren't
online yet. So we don't

303
00:14:53.840 --> 00:14:55.700
have a final URL. We're
kind of working out those

304
00:14:55.700 --> 00:14:58.580
level of details, working with
teams right now to figure

305
00:14:58.580 --> 00:15:00.140
out exactly what's going to
be in our kind of,

306
00:15:00.620 --> 00:15:03.350
you know, launch line up
is stars stuff that's available.

307
00:15:04.430 --> 00:15:06.620
And then like, even after
that, what's nice because this

308
00:15:06.620 --> 00:15:08.390
is a server side stories
that we can continue to

309
00:15:08.390 --> 00:15:13.370
roll out additional offerings as
time goes on, disconnected from

310
00:15:13.400 --> 00:15:16.600
kind of, We've been, we've
been promoting symbol servers, Carl

311
00:15:16.610 --> 00:15:19.450
and I just, because I
think they're cool by setting

312
00:15:19.450 --> 00:15:22.720
up in different machines with
the environment variables, showing them

313
00:15:22.720 --> 00:15:25.600
how symbol servers are not
just used by a visual

314
00:15:25.600 --> 00:15:28.540
studio, but also by process
Explorer. Yep. Yep. If we've

315
00:15:28.540 --> 00:15:31.990
already set ourselves up for,
I think it's msdl.microsoft.com or

316
00:15:31.990 --> 00:15:33.970
whatever the assemble servers is
this going to be a

317
00:15:33.970 --> 00:15:37.300
different server, different DNS name,
it'll be a different one.

318
00:15:38.080 --> 00:15:40.330
So you'll have a choice
between just symbols or symbols

319
00:15:40.330 --> 00:15:43.840
and source. Yeah. Very cool.
Can you point to More

320
00:15:43.840 --> 00:15:46.870
than one symbol server? Yeah.
You will be able to,

321
00:15:47.020 --> 00:15:49.150
you guys brought up an
interesting point, which is what

322
00:15:49.150 --> 00:15:51.610
happens if, is if, what
happens if you have a

323
00:15:51.610 --> 00:15:54.490
source file in both places?
Yeah. I assume it will

324
00:15:54.490 --> 00:15:57.160
find the first, the way
that the symbols resolution works

325
00:15:57.160 --> 00:15:58.750
is it goes in order.
So I think what you,

326
00:15:59.080 --> 00:16:01.180
as long as you configure
the symbols and source one

327
00:16:01.180 --> 00:16:04.420
above that, just the symbols
one, you'll get that PDB

328
00:16:04.420 --> 00:16:05.590
and then you'll be in
good shape. So I think

329
00:16:05.590 --> 00:16:07.690
it's just an ordering issue
because if you go to

330
00:16:07.690 --> 00:16:10.840
the dialogue and visual studio
does have ordering, I'm sure

331
00:16:10.840 --> 00:16:11.980
that one of the things
that you've had to think

332
00:16:11.980 --> 00:16:15.040
about is, is the sizing
of this. I've always thought

333
00:16:15.040 --> 00:16:17.230
it was interesting when I,
when I hit a website

334
00:16:17.230 --> 00:16:20.440
with <inaudible> or with Firefox,
they go off and they

335
00:16:20.440 --> 00:16:22.630
look at a fishing server.
And so I always think

336
00:16:22.630 --> 00:16:24.640
to myself, well, if every
single person in the entire

337
00:16:24.640 --> 00:16:27.910
planet were using this product,
there'd be this central point

338
00:16:27.910 --> 00:16:30.730
of failure. How do you
to decide to size that?

339
00:16:30.730 --> 00:16:32.080
I mean, you don't have
it, you have a sense

340
00:16:32.080 --> 00:16:33.880
of how many visual studios
are out there, but you

341
00:16:33.880 --> 00:16:36.070
don't really know how many
people are gonna hook this

342
00:16:36.070 --> 00:16:39.160
up. Yeah. So you're just
talking about how much, what

343
00:16:39.160 --> 00:16:42.700
our, what our capacity is.
Yeah. I'm working with the

344
00:16:42.700 --> 00:16:45.040
folks over, I'm an MSDN
that I'm pending the server

345
00:16:45.040 --> 00:16:47.380
side to put together some
numbers for that. And we're

346
00:16:47.380 --> 00:16:50.890
basically the really nice thing
about this technology. Scott is

347
00:16:50.890 --> 00:16:56.430
that the server side is
a static file server. Nice,

348
00:16:56.470 --> 00:16:59.290
nice. Right. So you're not
dealing with like something that's

349
00:16:59.290 --> 00:17:02.680
doing a bunch of backflips
and server code and, you

350
00:17:02.680 --> 00:17:04.960
know, we all know that
that file servers are pretty

351
00:17:04.960 --> 00:17:07.450
darn good or, you know,
I ask pretty darn good

352
00:17:07.450 --> 00:17:12.700
at throwing out static files.
No, that's wonderful. Right. So

353
00:17:12.700 --> 00:17:14.650
then stealing, this will be
just scanning. This will be

354
00:17:14.650 --> 00:17:16.870
easy. As long as it's
behind the DNS name, then

355
00:17:16.870 --> 00:17:20.260
everything else is easy. Right.
So we, well, what it

356
00:17:20.260 --> 00:17:21.730
means is that from our
point of view, it's pretty

357
00:17:21.730 --> 00:17:23.440
easy for us to do
the math about exactly what

358
00:17:23.440 --> 00:17:26.290
a server can handle and
be pretty confident in that.

359
00:17:26.290 --> 00:17:28.600
So that's, that's the upside
we're, we're working a bunch

360
00:17:28.600 --> 00:17:30.400
of numbers to figure out
exactly what kind of capacity

361
00:17:30.400 --> 00:17:33.490
we need, the real issue.
Isn't so much the sources.

362
00:17:33.490 --> 00:17:36.550
It is the, the symbol
files. Cause similar files are

363
00:17:36.610 --> 00:17:39.310
a lot bigger. Right, right.
So it's more about the

364
00:17:39.310 --> 00:17:41.620
size of the space, because
if you start thinking about

365
00:17:41.950 --> 00:17:43.570
all of the shores and
all the symbols, and then

366
00:17:43.570 --> 00:17:46.630
you think about like, can
you talk about red bits

367
00:17:46.630 --> 00:17:48.280
versus green bits and how
those things can be a

368
00:17:48.280 --> 00:17:50.580
little confusing? We all think
we have the dotted framework

369
00:17:50.610 --> 00:17:53.340
too on our system, but
we might have a hot

370
00:17:53.340 --> 00:17:56.520
fix or patch. And that
counts as different PDBs, different

371
00:17:56.520 --> 00:17:59.240
source. Well, that's separate from
red bits, green bits. So

372
00:17:59.240 --> 00:18:01.580
what you're talking about is
just that every time, you

373
00:18:01.580 --> 00:18:05.030
know, every time we roll
out either a QFP, if

374
00:18:05.030 --> 00:18:07.190
you call up, I think
he just downloaded now. But

375
00:18:07.190 --> 00:18:09.890
if you call up PSS
and get a QFP or

376
00:18:09.890 --> 00:18:11.990
you get a GDR that
comes down through windows update,

377
00:18:11.990 --> 00:18:14.510
or you define some of
those acronyms, I know, sorry.

378
00:18:15.740 --> 00:18:20.510
So gosh, a QFP it's
called quick fix engineering. QFC

379
00:18:20.510 --> 00:18:22.700
is when you it's a
hot fix, we call them

380
00:18:22.700 --> 00:18:25.820
QFS. Okay. So that's a,
that's usually one or two

381
00:18:25.820 --> 00:18:30.530
assemblies that fixes a specific
issue with your, with your

382
00:18:30.530 --> 00:18:33.830
bits. The thing about the
QFS is that they tend

383
00:18:33.830 --> 00:18:37.460
to they're cumulative over time.
So, you know, as we

384
00:18:37.460 --> 00:18:39.920
build QFS, there's no way
for us to manage building

385
00:18:39.920 --> 00:18:42.470
them all independently off of
the original source trunk. Right?

386
00:18:42.680 --> 00:18:45.320
So they are cumulative over
time. So that means as

387
00:18:45.320 --> 00:18:47.750
time goes on, if you
get a little later QFP,

388
00:18:47.750 --> 00:18:50.060
you're likely to get kind
of more updated assemblies in

389
00:18:50.060 --> 00:18:52.970
a lot of cases, which
is going to make it

390
00:18:52.970 --> 00:18:54.560
more likely that some of
this stuff is going to

391
00:18:54.560 --> 00:18:56.720
be out of date. So
what happens is that what,

392
00:18:57.180 --> 00:18:59.720
what service packs are for
us primarily are rolled up

393
00:18:59.720 --> 00:19:02.930
QFS with a higher level
of testing. So we get

394
00:19:02.930 --> 00:19:04.790
to a point and it's
kind of all the chemo

395
00:19:04.790 --> 00:19:06.680
to QFC is between the
last service pack or the

396
00:19:06.680 --> 00:19:10.100
release and that service pack,
plus a bunch of additional

397
00:19:10.100 --> 00:19:11.900
testing to kind of make
sure that they all fit

398
00:19:11.900 --> 00:19:18.680
together. GDR is a general
development release. GTRs are like

399
00:19:18.710 --> 00:19:22.730
kind of urgent. QFS not
as big as, it's not

400
00:19:22.730 --> 00:19:25.010
as big as a service
pack, but a GDR is

401
00:19:25.010 --> 00:19:27.710
for like something really bad.
So you were saying, you

402
00:19:27.710 --> 00:19:29.780
were saying before, when I
interrupted you about the acronym,

403
00:19:29.780 --> 00:19:31.940
thank you for doing that
by the way. Okay. No

404
00:19:31.940 --> 00:19:35.690
problem. Go ahead. No, you
were saying before something, when

405
00:19:35.690 --> 00:19:37.790
I interrupted you about the
right. So he was talking

406
00:19:37.790 --> 00:19:40.190
about the issue of pushing
the data around isn't as

407
00:19:40.190 --> 00:19:43.490
complicated as getting the structure
of the file system set

408
00:19:43.490 --> 00:19:45.770
up because you've got kind
of a Cartesian product diversions

409
00:19:45.770 --> 00:19:48.260
and coffees and different versions
of the framework. So major,

410
00:19:48.260 --> 00:19:50.510
minor build revision, it could
be quite a lot of

411
00:19:50.510 --> 00:19:53.180
data. Well, the data, you
know, hard drives are cheap.

412
00:19:53.180 --> 00:19:55.010
So the data isn't as
big of a deal as

413
00:19:55.010 --> 00:19:57.890
it is that just on
your given machine, you know,

414
00:19:57.890 --> 00:19:59.990
what's the likelihood that one
or more of the things

415
00:19:59.990 --> 00:20:01.280
that you're trying to bug
are going to be out

416
00:20:01.280 --> 00:20:03.020
of date and that we
won't have symbols and source

417
00:20:03.020 --> 00:20:05.930
available for them. So this
is something that I I'm

418
00:20:05.940 --> 00:20:07.490
just, I think that we're
just going to have to

419
00:20:07.490 --> 00:20:09.110
do some learning. It's really
hard for us to know

420
00:20:09.110 --> 00:20:11.240
what exactly the right cadence
is. As far as pushing

421
00:20:11.240 --> 00:20:13.730
updates out there. I think
we're just going to take

422
00:20:13.730 --> 00:20:16.160
feedback and th the system
is set up. It's very,

423
00:20:16.460 --> 00:20:18.680
very easy for us to
push new updates out there.

424
00:20:18.680 --> 00:20:19.970
We don't know if it
makes sense for us to

425
00:20:19.970 --> 00:20:22.640
push every QFT out there
or not. So is this

426
00:20:22.640 --> 00:20:24.680
an Orca specific thing or
does it go back to

427
00:20:24.680 --> 00:20:27.740
express and does it go
back to 2005? Knock it

428
00:20:27.740 --> 00:20:30.770
back in 2005, there was
actually functionality in vs 2008

429
00:20:30.800 --> 00:20:34.070
orcas that supports this. Okay.
Now, when you say this,

430
00:20:34.170 --> 00:20:37.370
You're talking about the source
code, The ability to kind

431
00:20:37.370 --> 00:20:39.860
of actually go do an
HTTP request for a source

432
00:20:39.860 --> 00:20:41.630
file is kind of the
core piece. I see. Yeah.

433
00:20:41.930 --> 00:20:44.660
Okay. Well, listen, we're just
about out of time, but

434
00:20:45.410 --> 00:20:49.210
what a scoop. Yeah, that's
incredible. I think it's pretty

435
00:20:49.210 --> 00:20:51.640
fantastic. I'm stoked. So we're
looking at the, this will

436
00:20:51.640 --> 00:20:54.130
be out when, when orcas
is released when visual studio

437
00:20:54.130 --> 00:20:59.650
2008 is released. Yeah. Awesome.
Awesome, Sean. Thank you, Scott.

438
00:20:59.650 --> 00:21:03.820
Thank you, man. Awesome. No,
that's pretty cool. All right,

439
00:21:03.820 --> 00:21:05.500
we'll see you next time
on Hansel minutes.

