WEBVTT FILE

1
00:00:12.020 --> 00:00:17.480
From Hansel minutes.com. It's Hanselman.
It's a weekly discussion with

2
00:00:17.480 --> 00:00:22.460
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:22.460 --> 00:00:28.190
is Lawrence Ryan and announcing show
number 49. Recorded Tuesday, January 30th, 2007.

4
00:00:29.060 --> 00:00:32.570
Support for Hanselman it's just
provided by slash N software

5
00:00:32.570 --> 00:00:36.950
red carpet subscriptions. The most
comprehensive solution for adding connectivity

6
00:00:36.950 --> 00:00:41.690
to your.net and asp.net applications
with components for every major

7
00:00:41.690 --> 00:00:49.940
internet protocol online@wwwdotnsoftware.com. Support is
also provided by.net developers journal

8
00:00:49.940 --> 00:00:55.970
the world's leading.net developer magazine
online at www dot <inaudible>

9
00:00:56.060 --> 00:01:00.170
dot com. In this episode,
Scott talks with PowerShell developer,

10
00:01:00.200 --> 00:01:07.250
Bruce Payette. Welcome to Hansel
minutes. Here's another episode. I'm

11
00:01:07.250 --> 00:01:10.130
Scott Hanselman. Carl's taken a
break on this show and

12
00:01:10.130 --> 00:01:13.700
I am sitting down with
Bruce Payette of Microsoft and

13
00:01:13.700 --> 00:01:17.210
PowerShell fame. I've done a
couple of talks on PowerShell

14
00:01:17.210 --> 00:01:19.880
before, and you know that
I'm a PowerShell fan boy

15
00:01:20.360 --> 00:01:23.510
and a big fan of
Jeffrey snuffers Jefferson over one

16
00:01:23.510 --> 00:01:27.020
of the architects of PowerShell
and Jeffrey. When I was

17
00:01:27.020 --> 00:01:31.790
interviewing him for channel nine
was very quick to throw

18
00:01:31.790 --> 00:01:34.670
the credit Bruce's way. When
it comes to the designing

19
00:01:34.670 --> 00:01:38.210
of the language, he called
you a, a language encyclopedia,

20
00:01:38.840 --> 00:01:42.380
Bruce, it's a hobby. So
I guess that's kind of

21
00:01:42.380 --> 00:01:45.860
true. And how much history
do you have as far

22
00:01:45.860 --> 00:01:48.560
as programming language? How many,
how many different languages do

23
00:01:48.560 --> 00:01:52.940
you know to say how
many, you know, it's, it's

24
00:01:52.940 --> 00:01:56.090
a question of what do
you use currently? And so

25
00:01:56.090 --> 00:01:59.240
I've played with probably hundreds
of different languages at different

26
00:01:59.240 --> 00:02:02.060
times, but what am I
fluent with at any given

27
00:02:02.060 --> 00:02:06.260
time? These days it's powers,
PowerShell and C sharp more

28
00:02:06.260 --> 00:02:10.370
than anything else, but I
was a big fan of

29
00:02:10.370 --> 00:02:13.610
tickle. I spent a lot
of time doing Unix style,

30
00:02:13.610 --> 00:02:18.260
scripting languages, working at MKS,
who did the mortars mortars,

31
00:02:18.260 --> 00:02:22.730
current tools, a toolkit, which
was unique tools on dos.

32
00:02:23.780 --> 00:02:26.990
We did a lot of
stuff with Posics and standardizing

33
00:02:26.990 --> 00:02:30.830
the unit scripting languages. How
many, I think you probably

34
00:02:30.890 --> 00:02:33.590
have an opinion about the
quote unquote, the young kids

35
00:02:33.590 --> 00:02:38.330
these days, probably myself included
folks. If you've had hundreds

36
00:02:38.330 --> 00:02:41.000
of languages that you've been
exposed to. I think my

37
00:02:41.000 --> 00:02:43.280
first language was C I'm
about near my I'm in

38
00:02:43.280 --> 00:02:45.410
my mid thirties. My first
language was, see I've done

39
00:02:45.770 --> 00:02:50.660
Phoebe little Haskell, some tickle,
but probably not more than

40
00:02:50.660 --> 00:02:53.630
a dozen languages. How important
is it for someone in

41
00:02:53.630 --> 00:02:57.890
2007 as a programmer to
have that historical context around

42
00:02:57.890 --> 00:03:01.400
all the different languages out?
I don't know that it's

43
00:03:01.860 --> 00:03:04.650
necessarily all that important. It's
good to have an understanding

44
00:03:04.650 --> 00:03:06.870
of, of sort of the
range and capabilities of a

45
00:03:06.870 --> 00:03:12.270
language, but actually under his
Helzberg, who is the architect

46
00:03:12.270 --> 00:03:15.030
of C sharp makes a
really good point that the

47
00:03:15.030 --> 00:03:18.060
languages themselves are becoming less
interesting. And it's really the

48
00:03:18.060 --> 00:03:22.290
libraries that matter and the
same points being brought up

49
00:03:22.290 --> 00:03:25.200
for Pearl, but a Pearl
as a language is not

50
00:03:25.200 --> 00:03:28.290
that interesting. It's C pan
it's all the libraries. CPN

51
00:03:28.290 --> 00:03:30.660
is the language of the
internet and pearls just syntaxes.

52
00:03:30.660 --> 00:03:35.010
I think the quote, but
understanding, having, having a good

53
00:03:35.010 --> 00:03:38.970
understanding of especially languages like
Haskell, just to get a

54
00:03:38.970 --> 00:03:41.640
sense of the range. I
know most introductory computer science

55
00:03:43.200 --> 00:03:46.590
courses start teaching that easily
teach a fairly conventional language

56
00:03:46.890 --> 00:03:51.570
like Java and then something,
a little stranger. It used

57
00:03:51.570 --> 00:03:54.660
to be prologue. It's probably
Haskell this week, but it

58
00:03:54.660 --> 00:03:56.970
gives people a sense of
the, the range of expression.

59
00:03:56.970 --> 00:04:01.320
I mean, after all languages
are designed for people, not

60
00:04:01.320 --> 00:04:04.350
for computers, computers just care
about bits and bytes. If

61
00:04:04.350 --> 00:04:06.150
you can't express your ideas
in a language and it's

62
00:04:06.150 --> 00:04:08.880
not much good. Yeah, exactly.
It's all about expressing your

63
00:04:08.880 --> 00:04:12.000
intent as clearly as possible.
When I use the term

64
00:04:12.000 --> 00:04:17.220
conventional language, I assume that
Java C-sharp VB are all

65
00:04:17.220 --> 00:04:21.960
kind of conventional languages with
fairly straightforward procedural constructs, right?

66
00:04:22.630 --> 00:04:26.010
Pretty much, yes. Why is
it that quote, unquote unconventional

67
00:04:26.010 --> 00:04:30.930
languages aren't mainstream. They haven't
been for a long time

68
00:04:30.930 --> 00:04:36.120
for a variety of reasons.
Implementations not good implementations was

69
00:04:36.450 --> 00:04:40.320
part of it. They required
certain early versions of small

70
00:04:40.320 --> 00:04:43.920
talk, for example, required very,
very powerful hardware. And not

71
00:04:43.920 --> 00:04:47.100
everybody could afford that. Now
we have machines with very

72
00:04:47.100 --> 00:04:50.400
powerful, powerful hardware. That's not
an issue anymore. And we're

73
00:04:50.400 --> 00:04:53.100
starting to see some of
the features of some of

74
00:04:53.100 --> 00:04:56.940
the more advanced languages coming
into the mainstream. And probably

75
00:04:56.940 --> 00:04:59.910
the best example of this
is the link stuff that's

76
00:04:59.910 --> 00:05:04.110
coming with. <inaudible> did you
look at it and you

77
00:05:04.110 --> 00:05:07.800
think, Oh, that's not really
all that radical, but Eric Meyer

78
00:05:07.800 --> 00:05:09.870
has this wonderful talk that
I'd love to track down

79
00:05:09.870 --> 00:05:13.020
somewhere where he talks about
how they basically took a

80
00:05:13.020 --> 00:05:17.130
lot of the functional programming
elements of Haskell and made

81
00:05:17.130 --> 00:05:20.970
them mainstream. And I think
that's really interesting. Finally, some

82
00:05:20.970 --> 00:05:24.720
of the really interesting ideas
in programming language research are

83
00:05:24.720 --> 00:05:28.290
starting to get into the
mainstream. So talk for our,

84
00:05:28.290 --> 00:05:30.390
for our listeners who may
not necessarily be familiar with

85
00:05:30.660 --> 00:05:32.550
some of the things that
are coming with C-sharp three.

86
00:05:32.550 --> 00:05:34.380
Oh, and I want to
tie that back into PowerShell.

87
00:05:34.740 --> 00:05:36.810
How, explain to me what
a Lambda is and why

88
00:05:36.810 --> 00:05:40.950
that keeps coming up. So
a Lambda is also, we

89
00:05:40.950 --> 00:05:43.770
call them script blocks and
PowerShell. It's an anonymous function.

90
00:05:44.100 --> 00:05:47.100
So it's a, the function
body exists without any particular

91
00:05:47.100 --> 00:05:49.920
name. And you can pass
them around as first class

92
00:05:49.920 --> 00:05:55.230
objects they've actually been in
C-sharp since two Oh in

93
00:05:55.230 --> 00:05:59.720
the form of anonymous delegates.
And Java has well, Devin

94
00:05:59.720 --> 00:06:04.100
doesn't have Lambdas really as
such where they have anonymous

95
00:06:04.100 --> 00:06:07.970
inter classes. So you still
have this idea of, of

96
00:06:07.970 --> 00:06:11.480
an anonymous chunk of code
drifting around, and that gives

97
00:06:11.480 --> 00:06:17.470
you some very powerful programming
capabilities. So in PowerShell the

98
00:06:17.470 --> 00:06:21.040
language properly, to be clear,
I spoken to the people

99
00:06:21.040 --> 00:06:23.980
in the PowerShell team and
they all say, Oh yeah,

100
00:06:23.980 --> 00:06:27.560
it's a language. It's a
whole complete grammar. It's, it's,

101
00:06:27.560 --> 00:06:30.310
it's a programming language, but
we're not compiling to it,

102
00:06:30.310 --> 00:06:33.310
but it is a whole
distinct thing, right? It's not

103
00:06:33.310 --> 00:06:35.470
just a mishmash of a
bunch of different languages. It

104
00:06:35.480 --> 00:06:39.370
has a, has a whole
formal grammar. That's right. And

105
00:06:39.550 --> 00:06:41.260
if I include the grammar
at the, at the end

106
00:06:41.260 --> 00:06:42.880
of the book, I think
Jeffrey has published part of

107
00:06:42.880 --> 00:06:46.240
the grammar on the PowerShell
blog site at one point

108
00:06:46.240 --> 00:06:50.800
as well. But it's true
of, I mean, the, the

109
00:06:50.800 --> 00:06:54.170
corn shell, for example, one
of the things that the

110
00:06:54.310 --> 00:06:58.090
AAA did with the public
standards was actually capture the

111
00:06:58.090 --> 00:07:03.490
Cornell grammar and publish it.
So it's not does this.

112
00:07:03.940 --> 00:07:08.200
Most of the shells are
languages. Some are more powerful

113
00:07:08.200 --> 00:07:10.390
than others. Of course, he
tried to make the most

114
00:07:10.390 --> 00:07:13.390
powerful. Now the book you
mentioned of course, is PowerShell

115
00:07:13.390 --> 00:07:16.600
in action, and I've made
it about three quarters of

116
00:07:16.600 --> 00:07:20.320
the way through some, some
galleys of it. And I've,

117
00:07:20.350 --> 00:07:22.300
I've said to a lot
of people that this is

118
00:07:22.300 --> 00:07:24.910
going to be fantastic. I
really, really enjoyed the first

119
00:07:24.910 --> 00:07:28.510
three chapters. The amount of
information that kind of ramps

120
00:07:28.510 --> 00:07:31.150
you up into the whole
kind of gestalt of PowerShell

121
00:07:31.150 --> 00:07:33.610
is very, very quickly. And
very clearly, I think a

122
00:07:33.610 --> 00:07:36.310
lot of people have trouble
when they see PowerShell for

123
00:07:36.310 --> 00:07:39.340
the first time, because it
seems like it's just so

124
00:07:39.340 --> 00:07:42.100
different from, from what I
think people who don't have

125
00:07:42.100 --> 00:07:45.220
a historical perspective are used
to, to, to sit, you

126
00:07:45.220 --> 00:07:47.530
know, just sit down and
start and start going with,

127
00:07:47.740 --> 00:07:52.060
with PowerShell. Once you reached
that, I don't know that

128
00:07:52.060 --> 00:07:54.160
level of familiarity. You kind
of go over that hump

129
00:07:54.190 --> 00:07:56.920
and then you can just
start to start running. Right?

130
00:07:56.920 --> 00:08:00.010
And, and actually somebody did
a blog posting recently saying

131
00:08:00.010 --> 00:08:03.970
the first four minutes are
the hardest. And what's one

132
00:08:03.970 --> 00:08:05.380
of the things that we
did. We made a conscious

133
00:08:05.380 --> 00:08:10.240
decision early on that we're
designing a tool for professional

134
00:08:10.240 --> 00:08:15.400
users. It's not, it used
to be the dos was

135
00:08:16.510 --> 00:08:18.850
the, the old command shell
was how you worked with

136
00:08:18.850 --> 00:08:20.920
windows. And so it had
to be easy. It had

137
00:08:20.920 --> 00:08:25.960
to be easy enough for
the entire range of users

138
00:08:25.960 --> 00:08:28.480
to use. That's not an
issue so much anymore because

139
00:08:28.480 --> 00:08:30.730
that's the role of the
gooey now. So what we

140
00:08:30.730 --> 00:08:34.720
were doing was creating a
tool that would allow professionals

141
00:08:34.720 --> 00:08:38.260
to do their job as
effectively as possible. And these

142
00:08:38.260 --> 00:08:41.260
are people who will work
with this tool day in

143
00:08:41.260 --> 00:08:44.290
and day out. And so
we traded off a little

144
00:08:44.290 --> 00:08:47.710
bit of ease of learning
for a whole lot of

145
00:08:47.710 --> 00:08:51.070
power and ease of use.
Okay. So the first four

146
00:08:51.070 --> 00:08:54.190
minutes were not really a
priority in the designing of

147
00:08:54.190 --> 00:08:56.880
language. I don't suppose designed
anything in to make it

148
00:08:57.270 --> 00:09:00.750
obvious or intuitive for that
first few minutes of use.

149
00:09:03.710 --> 00:09:06.590
We did to some extent.
So if you under, we

150
00:09:06.590 --> 00:09:09.350
have a lot of aliases.
So the basic navigation in

151
00:09:09.350 --> 00:09:11.270
the show, if you typed
her and it'll work and

152
00:09:11.270 --> 00:09:13.910
you type CD, and it
will work, and whether you're

153
00:09:13.910 --> 00:09:16.040
a Unix user, you can
type LS and it will

154
00:09:16.040 --> 00:09:18.500
work. So you have some
basic navigation. There's a, there's

155
00:09:18.500 --> 00:09:22.490
enough out of the box
that you can do the

156
00:09:22.490 --> 00:09:24.170
kind of things that you
would do in a traditional

157
00:09:24.170 --> 00:09:27.170
shell pretty easily. It's when
you start to get into

158
00:09:27.170 --> 00:09:31.900
the more advanced programming stuff.
That again, they're going to,

159
00:09:31.910 --> 00:09:33.290
there's a lot of stuff
in, in the sense that

160
00:09:33.290 --> 00:09:36.500
we have tab completion. So
you, you have tools for

161
00:09:36.500 --> 00:09:40.100
exploring objects. You don't have
to sit down and, and

162
00:09:41.270 --> 00:09:43.970
read a book or, or,
or go to the website

163
00:09:44.090 --> 00:09:46.310
to look at an object.
You can explore it directly

164
00:09:46.310 --> 00:09:50.000
in the PowerShell environment. So
in that sense, we do

165
00:09:50.000 --> 00:09:51.680
provide a lot of stuff
to help you get going.

166
00:09:51.980 --> 00:09:57.290
But we assume that, that
you have some amount of

167
00:09:57.290 --> 00:10:00.470
knowledge about what you're trying
to do, but it's also

168
00:10:00.470 --> 00:10:03.350
an interactive environment. It's an
environment where you can explore

169
00:10:03.650 --> 00:10:06.140
and learn things incrementally. And
that was very much part

170
00:10:06.140 --> 00:10:10.430
of it was you could
get started doing old style

171
00:10:10.430 --> 00:10:16.010
batch type scripting fairly easily.
And then as you grow

172
00:10:16.010 --> 00:10:18.110
with the language it grows
with you, it gives you

173
00:10:18.110 --> 00:10:21.200
a lot more capability. We
didn't want it to sort

174
00:10:21.200 --> 00:10:23.690
of, I suppose, this is
one of the things that

175
00:10:23.690 --> 00:10:25.640
you, you saw a lot
in the unit shells, as

176
00:10:25.640 --> 00:10:27.380
you can get to a
certain point with a unit

177
00:10:27.380 --> 00:10:29.390
shell, and then you had
to shift to a different

178
00:10:29.390 --> 00:10:31.250
tool. You had to shift
to C or you had

179
00:10:31.250 --> 00:10:33.380
to shift to arc, or
eventually Pearl. I mean, one

180
00:10:33.380 --> 00:10:36.680
of Pearl's great strengths is
that it's much more capable.

181
00:10:36.770 --> 00:10:38.870
It has a lot of
stuff built into it. And

182
00:10:38.870 --> 00:10:41.630
so it didn't run out
of steam as quickly. We

183
00:10:41.630 --> 00:10:43.820
wanted to try and get
some of that with PowerShell.

184
00:10:43.820 --> 00:10:46.640
You can start with the
shell and do some basic

185
00:10:46.760 --> 00:10:49.100
file operations and that worked
fine. And then you could

186
00:10:49.100 --> 00:10:52.040
do text operations and you're
still finding the shell. And

187
00:10:52.040 --> 00:10:53.960
then you start to do
some object stuff, and you're

188
00:10:53.960 --> 00:10:55.550
still finding the show. You
don't have to go to

189
00:10:55.550 --> 00:10:57.680
another tool. You don't have
to learn a language. It's

190
00:10:57.680 --> 00:10:58.910
one of the things you
see in a unit shell

191
00:10:58.910 --> 00:11:01.250
script is it's usually actually
a mixture of a whole

192
00:11:01.250 --> 00:11:03.680
bunch of different languages. It
will be a little bit

193
00:11:03.680 --> 00:11:10.490
of a shell and arc
and maybe some Pearl, all

194
00:11:10.490 --> 00:11:13.660
these different syntaxes mixed together
with quoting and that's I

195
00:11:14.750 --> 00:11:17.180
really wanted to avoid. And
one of the, like the

196
00:11:17.210 --> 00:11:21.110
most common question that I
got trying to, when I

197
00:11:21.110 --> 00:11:23.930
was maintaining arch at, at
MKS was how do you

198
00:11:23.930 --> 00:11:27.980
use arc and pass arguments
into it from the shell

199
00:11:27.980 --> 00:11:30.350
and get all the coding,
right? And, and even with

200
00:11:30.350 --> 00:11:34.520
an expert, it was still
hard. It seems like in

201
00:11:34.520 --> 00:11:38.180
shell languages, there's always this
marshaling, this uncomfortable transition as

202
00:11:38.180 --> 00:11:39.860
you, as you jump out
of the shell, into the

203
00:11:39.860 --> 00:11:44.360
utility and then back, Right.
We tried to minimize that

204
00:11:44.360 --> 00:11:47.600
as much as possible. It's
one of these, this is

205
00:11:47.600 --> 00:11:49.490
actually a problem I've been
thinking about for about 20

206
00:11:49.490 --> 00:11:53.000
years. How can we take
a shell language or what's,

207
00:11:53.110 --> 00:11:55.780
what's the difference between a
shell language and a scripting

208
00:11:55.780 --> 00:11:58.660
language or a programming language.
And, you know, the big

209
00:11:58.690 --> 00:12:00.850
thing is that shell does
a lot more for you

210
00:12:00.850 --> 00:12:05.110
automatically. It does expansions, and
it does wild cards and

211
00:12:05.110 --> 00:12:08.260
all of these things that
you really don't want to

212
00:12:08.260 --> 00:12:10.630
have going on in your
programs. So how do you

213
00:12:10.630 --> 00:12:12.640
separate them out? And we've
kind of come up with

214
00:12:12.640 --> 00:12:16.540
a sort of dual syntax
mode where commands, we type

215
00:12:16.540 --> 00:12:18.070
a command on the command
line, it works like a

216
00:12:18.070 --> 00:12:21.010
command. And then if you
do an expression, it works

217
00:12:21.010 --> 00:12:24.970
much more like a traditional
programming language. And we try

218
00:12:24.970 --> 00:12:26.530
to keep it sort of
down to two modes. One

219
00:12:26.530 --> 00:12:28.420
of the things, again, that
you see in a traditional

220
00:12:28.420 --> 00:12:31.390
show is it has a
million sort of micro mode

221
00:12:31.480 --> 00:12:34.570
as this, a little mode
where expressions work and this

222
00:12:34.570 --> 00:12:36.640
little mode where variables get
expanded and this a little

223
00:12:36.640 --> 00:12:40.060
mode where, where string substitution
occurs and each one has

224
00:12:40.060 --> 00:12:42.460
his own individual syntax. And
they're sort of all nested

225
00:12:42.460 --> 00:12:45.750
together in a, in a
fairly confusing map. And how

226
00:12:45.750 --> 00:12:47.520
does, how hard does that
make it for the person

227
00:12:47.520 --> 00:12:49.530
who's actually writing the parser?
I mean, you know, I've

228
00:12:49.530 --> 00:12:52.020
done my computer science Lexan
yak work, and I've written

229
00:12:52.020 --> 00:12:56.130
little, little languages and created
these different expression trees. But

230
00:12:56.370 --> 00:12:59.250
how, how difficult is it
in PowerShell since there are

231
00:12:59.250 --> 00:13:02.250
so many potential ways that
you can modify the system,

232
00:13:02.250 --> 00:13:05.310
there's, there's the type expansion
where you can spot weld

233
00:13:05.550 --> 00:13:11.490
properties and methods onto objects.
There's variables that can expand

234
00:13:11.520 --> 00:13:13.530
differently, whether they're using a
single quote or a double

235
00:13:13.530 --> 00:13:16.830
quote around them. There's and
there's all the different commands

236
00:13:16.830 --> 00:13:19.200
that might already be in
your path. Does that make

237
00:13:19.200 --> 00:13:21.780
it difficult to design a
language when you've got so

238
00:13:21.780 --> 00:13:25.650
many potential things existing already?
I mean, you've got all

239
00:13:25.650 --> 00:13:27.840
of the.net framework, you got
everything that's in their path.

240
00:13:28.590 --> 00:13:32.910
You didn't just sit down
from a complete blank slate

241
00:13:32.970 --> 00:13:35.700
and write the language you
had all this context to.

242
00:13:36.330 --> 00:13:37.620
I guess what I'm trying
to say is that you've

243
00:13:37.620 --> 00:13:40.020
got the whole of the
framework underneath you, as well

244
00:13:40.020 --> 00:13:43.410
as all of this kind
of dos historical commands to

245
00:13:43.410 --> 00:13:45.690
how does that affect the
way you design the language?

246
00:13:46.500 --> 00:13:50.070
Well, the approach that we
used and Jim truer, who

247
00:13:50.070 --> 00:13:53.520
was the PM on the
PowerShell team, Jim and I

248
00:13:53.520 --> 00:13:55.950
worked together to design the
language. This is sort of

249
00:13:55.950 --> 00:13:59.520
the normal way that Microsoft
works. You have a developer

250
00:13:59.550 --> 00:14:02.850
and even have something called
a program manager, whose job

251
00:14:02.880 --> 00:14:07.050
is to be the customer's
advocate. So they'd look at

252
00:14:07.050 --> 00:14:10.290
what the developer is saying.
And to basically say, no,

253
00:14:10.320 --> 00:14:12.240
you're an idiot. You can't
do that. Nobody will ever

254
00:14:12.240 --> 00:14:16.110
use that. And the programmer's
job is to say, I

255
00:14:16.110 --> 00:14:18.360
can't do that. That's impossible.
You want me to hold

256
00:14:18.870 --> 00:14:20.670
all of the halting problem?
I'm sorry, we can't do

257
00:14:20.670 --> 00:14:25.710
that. And so what we
did actually is we started

258
00:14:25.710 --> 00:14:27.720
with the positive shell grammar,
right? And if you're going

259
00:14:27.720 --> 00:14:32.100
to start with designing a
new language, you want to

260
00:14:32.100 --> 00:14:35.370
start with something that has
been proven in a sense,

261
00:14:35.370 --> 00:14:36.900
what we did is we
took the same sort of

262
00:14:36.900 --> 00:14:39.540
approach to designing the PowerShell
language that the Java guys

263
00:14:39.540 --> 00:14:44.790
took. You look at an
existing, very successful language, and

264
00:14:45.300 --> 00:14:49.050
you say, okay, what are
our core characteristics? In Java's

265
00:14:49.050 --> 00:14:52.250
case, it was the garbage
collection and pervasive object orientation.

266
00:14:52.700 --> 00:14:56.690
We had again, the pervasive
object orientation. And we said,

267
00:14:56.690 --> 00:14:59.660
okay, what do we need
to change? How do we

268
00:14:59.660 --> 00:15:02.540
have to go through the
language and change it to

269
00:15:02.540 --> 00:15:05.330
work in this environment? And
it actually turned out to

270
00:15:05.330 --> 00:15:08.120
be a huge change because
it completely breaks the way

271
00:15:08.120 --> 00:15:11.320
all traditional shells work, where
they do this process of,

272
00:15:11.360 --> 00:15:13.790
of expansion and then parsing,
but it's not going to

273
00:15:13.790 --> 00:15:15.830
work because you lose all
the structure of the object.

274
00:15:15.860 --> 00:15:17.300
So we had to go
to actually a much more

275
00:15:17.300 --> 00:15:22.550
traditional language, a design it's
a basic recursive descent, parser.

276
00:15:23.540 --> 00:15:27.050
It is a context sensitive
grammar in the sense that,

277
00:15:27.070 --> 00:15:31.190
that the interpretation of, I
notice subject to where it

278
00:15:31.190 --> 00:15:33.290
appears in the, in the
source text. So that makes

279
00:15:33.290 --> 00:15:36.470
it a little bit tricky.
And there are a lot

280
00:15:36.470 --> 00:15:41.720
of deals between the parser
and the tokenized, but we

281
00:15:41.720 --> 00:15:43.580
tried to keep it as
simple as possible and as

282
00:15:43.580 --> 00:15:47.750
flexible as possible. And it
was a lot of taking

283
00:15:47.750 --> 00:15:50.240
things out, this, this characteristic.
Now we're gonna take that

284
00:15:50.240 --> 00:15:53.420
out as too complicated. So
we did, again, just like

285
00:15:53.420 --> 00:15:55.550
the Java guy said, you
know, when I looked at

286
00:15:55.550 --> 00:15:57.620
C, C plus plus, and,
and we'll take out all

287
00:15:57.620 --> 00:15:59.840
the things that don't make
sense, and we, aren't going

288
00:15:59.840 --> 00:16:02.450
to worry about backwards compatibility.
That was also another critical

289
00:16:02.450 --> 00:16:07.370
design characteristic that, okay, we
will be informed by history,

290
00:16:07.370 --> 00:16:09.440
but we won't be a
slave to history. So if

291
00:16:09.440 --> 00:16:11.570
something is known to be
a problem or known to

292
00:16:11.570 --> 00:16:15.980
be confusing for users, we'll
just take it out. And

293
00:16:16.910 --> 00:16:20.990
so that, so the basic
shell syntax, but also informed,

294
00:16:20.990 --> 00:16:23.420
differ, he had worked a
lot with DCL and he

295
00:16:23.420 --> 00:16:26.690
liked the very regular DCL
syntax. So we adopted a

296
00:16:26.690 --> 00:16:33.230
lot of that from, from
deck. And we had a

297
00:16:33.230 --> 00:16:35.750
variety of source languages. Pearl
was very high up early

298
00:16:35.750 --> 00:16:38.840
on. We did some language
reviews and got some user

299
00:16:38.840 --> 00:16:43.130
feedback. And a lot of
the Pearl isms, we retained

300
00:16:43.130 --> 00:16:45.260
some, but a lot of
them were, were, didn't go

301
00:16:45.260 --> 00:16:47.630
over very well with users.
Didn't go over very, very

302
00:16:47.630 --> 00:16:50.270
well with the reviewers. And
the other thing that we

303
00:16:50.270 --> 00:16:54.500
decided to do a little
later on was to align

304
00:16:54.650 --> 00:16:59.510
the language more with C-sharp
primarily because of the conciseness

305
00:16:59.510 --> 00:17:02.030
of the notation. If you
have a, sort of a,

306
00:17:02.060 --> 00:17:05.060
more of an algal based
language with begin and end,

307
00:17:05.420 --> 00:17:08.260
it's hard to type much
on a command line. And

308
00:17:08.300 --> 00:17:11.690
the average, the average PowerShell
script is going to be

309
00:17:11.690 --> 00:17:14.090
80 characters long because that's
the length of what you

310
00:17:14.090 --> 00:17:18.940
can conveniently type on in
a console window. So, so

311
00:17:18.940 --> 00:17:21.340
is that why you chose
to have curly braces as

312
00:17:21.340 --> 00:17:24.550
your block? That's right. As
opposed to like something like

313
00:17:24.730 --> 00:17:28.510
blue or Python that just
uses white space Again, white

314
00:17:28.510 --> 00:17:30.730
space. It's it's what, what
do you think conveniently type

315
00:17:30.730 --> 00:17:35.890
on one line? And so
Python, the new line stuff

316
00:17:35.920 --> 00:17:38.470
is, is actually very cool.
It has some nice characteristics.

317
00:17:38.710 --> 00:17:41.500
It was actually based on
a language that was designed

318
00:17:41.500 --> 00:17:45.280
to teach programming, but it
is a little bit more

319
00:17:45.280 --> 00:17:48.790
verbose and it scatters the
text across multiple lines. And

320
00:17:48.790 --> 00:17:51.540
in a window environment, that's
a little hard to edit.

321
00:17:51.720 --> 00:17:55.560
So we wanted to be
able to type significant significantly

322
00:17:55.560 --> 00:17:59.310
complex structure is while loops
and for loops all in

323
00:17:59.310 --> 00:18:02.700
one line. So that was
one of the, the drivers

324
00:18:02.700 --> 00:18:05.510
there, Hence that I got,
I've heard the term a

325
00:18:05.510 --> 00:18:08.150
write only language or writing
online, which is kind of

326
00:18:08.150 --> 00:18:10.310
a pejorative that people use
to refer to a language

327
00:18:10.310 --> 00:18:13.370
that is very easy to
write or easier for some

328
00:18:13.370 --> 00:18:16.400
people to write, but completely
impossible to read. And I've

329
00:18:16.400 --> 00:18:18.860
seen some pretty crazy stuff
done with PowerShell on one

330
00:18:18.860 --> 00:18:23.570
line and have a little
trouble sometimes reading PowerShell. How

331
00:18:23.570 --> 00:18:26.030
did you make the decision
on things like using dash

332
00:18:26.060 --> 00:18:28.370
E Q instead of an
equal sign? Cause the things

333
00:18:28.370 --> 00:18:31.340
like that for me, at
least when I read PowerShell

334
00:18:31.580 --> 00:18:33.530
scripts, I kind of stumble
over it's a little bit

335
00:18:33.530 --> 00:18:37.610
of a block that I,
a speed bump even, Right.

336
00:18:37.700 --> 00:18:41.000
And that was, was interesting.
And that was a, that

337
00:18:41.000 --> 00:18:45.140
was a huge debate. And
really the reason that we

338
00:18:45.170 --> 00:18:48.350
decided to go with those,
the, the dashi queue rather

339
00:18:48.350 --> 00:18:52.130
than equal sign and greater
than, and less than was

340
00:18:52.550 --> 00:18:54.980
to support redirection, we could
have actually used, equals and

341
00:18:54.980 --> 00:18:57.200
not equals. But in the
end we decided that we

342
00:18:57.200 --> 00:19:01.490
would be more consistent and
use the dash sequences for

343
00:19:01.490 --> 00:19:03.890
all of the operators because
people want to be able

344
00:19:03.890 --> 00:19:07.340
to use redirection. And because
it's a shell redirection was

345
00:19:07.340 --> 00:19:13.850
more important to users than
logical operations. And we had

346
00:19:13.850 --> 00:19:19.580
considered the idea of introducing
modal parsing again and decided

347
00:19:19.640 --> 00:19:21.170
in the end that no,
we didn't want to do

348
00:19:21.170 --> 00:19:23.420
that because you can. The,
the, a lot of the

349
00:19:23.420 --> 00:19:27.020
operators work on collections. So
you can select object from

350
00:19:27.020 --> 00:19:30.050
the collections that with a
single single application of an

351
00:19:30.050 --> 00:19:34.430
operator, you can select things
from a list. For example,

352
00:19:35.180 --> 00:19:36.920
you may want to use
redirection to save those to

353
00:19:36.920 --> 00:19:39.830
a file. And so we
had used greater than, and

354
00:19:39.830 --> 00:19:41.900
less than et cetera, you
wouldn't be able to do

355
00:19:41.900 --> 00:19:45.920
that. Now, some, some of
the things that I've had

356
00:19:45.920 --> 00:19:48.080
the most trouble with are
like the hash tables when

357
00:19:48.080 --> 00:19:51.770
it starts getting into, you
know, at signs and curly

358
00:19:51.770 --> 00:19:54.740
braces and parentheses and things
like that. And I know

359
00:19:54.740 --> 00:19:56.270
that you can do a
lot of really amazing things

360
00:19:56.270 --> 00:20:01.160
with both hash tables and,
and arrays that, that you

361
00:20:01.160 --> 00:20:02.630
kind of wish I wish
that I could do in

362
00:20:02.630 --> 00:20:05.450
C-sharp. You know, just being
able to say, you know,

363
00:20:06.170 --> 00:20:09.020
a dollar sign, a plus
equals comma, and then just

364
00:20:09.140 --> 00:20:12.470
slap some things on the
end of an array, right?

365
00:20:12.770 --> 00:20:15.920
How do you, how do
you balance the, you know,

366
00:20:15.920 --> 00:20:18.830
kind of really tourist, but
very useful things like that,

367
00:20:19.250 --> 00:20:23.420
that, because they're so tourist,
they're almost obscure and the

368
00:20:23.420 --> 00:20:26.300
average a developer's not going
to sit down and say,

369
00:20:26.300 --> 00:20:29.480
gosh, I wonder if they've
overloaded a raise such that

370
00:20:29.510 --> 00:20:31.610
I can do this on
one line and a C

371
00:20:31.610 --> 00:20:34.610
sharp or VB program might
find themselves doing all sorts

372
00:20:34.610 --> 00:20:37.340
of crazy things like a
radar resize in order to

373
00:20:37.370 --> 00:20:39.650
do something that could be
expressed in a very crisp

374
00:20:39.650 --> 00:20:44.090
way with PowerShell. It's a
little bit interesting because yeah,

375
00:20:44.120 --> 00:20:46.670
you see people coming at
it from a programmer background

376
00:20:46.670 --> 00:20:48.760
and they want do exactly
what you said and use

377
00:20:48.760 --> 00:20:53.680
some of the traditional programmer
style approaches. One of the

378
00:20:53.680 --> 00:20:56.140
most interesting ones is that
that a pipeline generates a

379
00:20:56.140 --> 00:20:58.540
collection of objects. And so
you don't need to loop

380
00:20:58.570 --> 00:21:00.430
through the pipeline and add
them to an array. You'll

381
00:21:00.430 --> 00:21:03.250
just get an array out
of it. So that's, that's

382
00:21:03.910 --> 00:21:08.680
an interesting approach to solving
the problems that, that seems

383
00:21:08.680 --> 00:21:13.030
a little alien to a
lot of programmers, but one

384
00:21:13.030 --> 00:21:15.580
of the things that's pretty
important about the design of

385
00:21:15.580 --> 00:21:18.670
PowerShell is that, that we
have what we call elastic

386
00:21:18.670 --> 00:21:23.410
syntax. So you can use
the short, the short forms,

387
00:21:23.410 --> 00:21:28.030
these little aliases and things
to write very terse stuff

388
00:21:28.030 --> 00:21:30.400
on the command line. But
when you're writing scripts, we

389
00:21:30.400 --> 00:21:33.160
recommend that you use the
non aliased forms of the

390
00:21:33.160 --> 00:21:37.390
names because they're much more
understandable. And so you can,

391
00:21:37.750 --> 00:21:39.700
you can write in a
very concise style, you have

392
00:21:39.700 --> 00:21:41.050
to be able to do
that. It's a shell. You

393
00:21:41.050 --> 00:21:44.320
need to be able to
write stuff very, very densely,

394
00:21:44.680 --> 00:21:47.050
but at the same time,
we provide mechanisms so that

395
00:21:47.050 --> 00:21:50.530
you can write very elaborated
and much easier to read

396
00:21:50.530 --> 00:21:53.650
code. It shouldn't be much
more difficult to read PowerShell

397
00:21:53.650 --> 00:22:00.160
code than C sharp code.
If you're a conscientious programmer,

398
00:22:00.730 --> 00:22:04.000
it's really up to the
programmer. You're not forced to

399
00:22:04.000 --> 00:22:06.910
write a opaque code, but
you can, Oh, you can

400
00:22:06.910 --> 00:22:09.130
write some opaque code. You
can do some crazy things.

401
00:22:09.250 --> 00:22:12.600
<inaudible> And just sit down.
And with the advent of

402
00:22:12.600 --> 00:22:15.570
the new features in, in
C-sharp three O and presumably

403
00:22:15.570 --> 00:22:18.210
things coming in and sharp
three, five, and being able

404
00:22:18.210 --> 00:22:21.540
to say VAR a equals,
whatever. There, it seems like

405
00:22:21.840 --> 00:22:24.120
the direction that all languages
are going in, whether it

406
00:22:24.120 --> 00:22:26.970
be VB nine or PowerShell
itself, they seem to be

407
00:22:26.970 --> 00:22:30.420
converging on some kind of
a thing, a general way

408
00:22:30.420 --> 00:22:34.260
of thinking where there's just
syntactic sugar, there's just skins

409
00:22:34.260 --> 00:22:38.460
over the, over the language
themselves, given that those languages

410
00:22:38.460 --> 00:22:42.600
were being developed around the
same time as PowerShell. Why

411
00:22:42.600 --> 00:22:48.360
not just make the language
of PowerShell? C-sharp The C

412
00:22:48.360 --> 00:22:51.660
sharp still requires a lot
of additional syntax. So for

413
00:22:51.660 --> 00:22:53.580
example, if you want to
copy a file, you have

414
00:22:53.580 --> 00:22:57.210
to do file dot copy,
open brand double quote, file

415
00:22:57.210 --> 00:22:59.700
name one, enclosed, double quote,
comma, et cetera, et cetera.

416
00:23:00.000 --> 00:23:04.530
So it's not very shell
friendly. Now, one of the

417
00:23:04.530 --> 00:23:11.160
things that, because PowerShell is
a dominant language, can you

418
00:23:11.160 --> 00:23:15.510
use.net stuff directly? It's very
easy to extend PowerShell with

419
00:23:15.510 --> 00:23:19.650
C-sharp or VB or any
done in language. You can

420
00:23:19.650 --> 00:23:22.680
just compile the class, load
it and use it. So

421
00:23:22.680 --> 00:23:28.170
that, that makes it fairly
straightforward. The other thing that

422
00:23:28.230 --> 00:23:33.390
that PowerShell provides is the
ability to dynamically create or

423
00:23:33.390 --> 00:23:36.780
dynamically extend objects. So when
we actually do this a

424
00:23:36.780 --> 00:23:40.940
lot, the object, the design
of the objects and dinette

425
00:23:40.950 --> 00:23:45.560
are pretty good, but there
are still some inconsistencies, a

426
00:23:45.680 --> 00:23:50.030
raise have the link property
collections have account property, a

427
00:23:50.060 --> 00:23:53.990
process have process name, file
as name. So if there's

428
00:23:53.990 --> 00:23:56.840
any consistencies across the, the
different objects and that's a

429
00:23:56.840 --> 00:24:00.290
pain for, especially for administration,
as one of the big

430
00:24:00.320 --> 00:24:02.870
things that WMI tried to
address was two canonical lies

431
00:24:02.870 --> 00:24:05.240
the set of names that
people use. And that's one

432
00:24:05.240 --> 00:24:07.670
of the things that PowerShell
does. You can use the

433
00:24:07.670 --> 00:24:11.510
camp property on an array.
We add the synthetic property

434
00:24:11.510 --> 00:24:13.370
on top of the array
type. So you can use

435
00:24:13.370 --> 00:24:20.590
count universally. Likewise, we, we
add different properties on objects.

436
00:24:20.590 --> 00:24:23.150
So again, you get a
much more consistent naming experience.

437
00:24:23.650 --> 00:24:25.690
How many things like that
are that, I mean, did

438
00:24:25.690 --> 00:24:28.450
you go through the entire
kind of like set of

439
00:24:28.450 --> 00:24:31.060
things people would do regularly
and just kind of linked

440
00:24:31.060 --> 00:24:34.300
them kind of with the,
with the philosophy of fall,

441
00:24:34.300 --> 00:24:38.530
into the pit of success,
kind of Once upon a

442
00:24:38.530 --> 00:24:44.680
time we started to do
that and we can spend

443
00:24:44.710 --> 00:24:47.710
a long, long time trying
to do that. We're working

444
00:24:47.710 --> 00:24:51.040
with the other groups within
Microsoft to try and encourage

445
00:24:51.070 --> 00:24:54.820
canonical possession of objects. We
did a handful of things

446
00:24:54.820 --> 00:25:00.190
that are very commonly used
files and processes and services

447
00:25:00.190 --> 00:25:02.770
and things like that. But
we have nowhere near the

448
00:25:02.770 --> 00:25:05.950
full coverage in our early
grand plans. We were going

449
00:25:05.950 --> 00:25:08.110
to do everything and, and
have all of these smart

450
00:25:08.110 --> 00:25:11.800
types. I wouldn't know the
know the world, but we're

451
00:25:11.800 --> 00:25:14.080
not that big of a
team. Yeah. And at that

452
00:25:14.080 --> 00:25:17.940
point, you'd be getting close
to isn't really powershells responsibility

453
00:25:17.940 --> 00:25:20.170
to clean up kind of
the sins of the father.

454
00:25:20.770 --> 00:25:23.260
Right. Right. And this is
something that, again, we work

455
00:25:23.260 --> 00:25:25.570
with the base class library
team and, and the net

456
00:25:25.570 --> 00:25:29.980
effects teams to try and
establish some guidelines and likewise,

457
00:25:29.980 --> 00:25:32.860
to make sure that we
also follow their guidelines. This

458
00:25:32.860 --> 00:25:35.860
is an ongoing effort to
try and, and come up

459
00:25:35.860 --> 00:25:40.210
with coding standards and object
design standards that everybody can

460
00:25:40.210 --> 00:25:44.860
live with. No, will we
see PowerShell libraries or scripts,

461
00:25:45.190 --> 00:25:48.460
Or kind of commandlet packs
coming out of your team,

462
00:25:48.460 --> 00:25:51.970
or is your team going
to only be new versions

463
00:25:51.970 --> 00:25:57.280
of PowerShell? That's actually up
in the air in the

464
00:25:57.280 --> 00:26:01.750
ideal world, it would be
best if the domain experts

465
00:26:01.750 --> 00:26:08.170
provided the commandlets for, for
their technology areas in practice.

466
00:26:08.440 --> 00:26:12.430
Well, I don't know. We'll
have to see, we'll probably

467
00:26:12.430 --> 00:26:17.920
still provide some tools and
utilities and so forth how

468
00:26:17.920 --> 00:26:20.470
the actual partitioning will work
will do will evolve over

469
00:26:20.470 --> 00:26:23.180
time. Now, one of the
things that I want to

470
00:26:23.180 --> 00:26:24.910
ask you about just in,
at the end of our,

471
00:26:24.910 --> 00:26:27.700
of our, of our half
an hour, here are script

472
00:26:27.700 --> 00:26:31.270
block parameters. If you could
explain script, block parameters, kind

473
00:26:31.270 --> 00:26:34.280
of what they are, why
they're not exactly obvious and,

474
00:26:34.280 --> 00:26:36.520
and what kind of power
they provide to someone. Cause

475
00:26:36.520 --> 00:26:39.340
I think that people might
be trying to solve problems

476
00:26:39.340 --> 00:26:42.670
where I think a script
block parameter might be exactly

477
00:26:42.670 --> 00:26:47.880
what the ordered, Right? So
a script in Unix shells,

478
00:26:48.330 --> 00:26:50.760
there is a way to
say, I want, instead of

479
00:26:50.760 --> 00:26:54.570
reading my parameter from the
command line, I want to

480
00:26:54.570 --> 00:26:57.750
read it from the pipeline
and you do this by

481
00:26:57.750 --> 00:27:03.210
saying dash. So for example,
you could cat a script

482
00:27:03.210 --> 00:27:06.390
file into org and say
dash F dash. And it's

483
00:27:06.390 --> 00:27:08.850
a, that says, you know,
read my file, read my

484
00:27:08.850 --> 00:27:11.640
source file from standard input,
instead of reading it from

485
00:27:11.670 --> 00:27:14.580
a file around the command
line or whatever. So this

486
00:27:14.580 --> 00:27:18.990
is a very, it's a
powerful compositional model. And we

487
00:27:18.990 --> 00:27:23.550
wanted to sort of generalize
this. We tried a variety

488
00:27:23.550 --> 00:27:28.560
of nasty syntactic fiddles, none
of which were particularly satisfactory

489
00:27:28.800 --> 00:27:32.580
and all of which were
Baroque. And so then we

490
00:27:32.580 --> 00:27:35.730
said, well, we have this,
this, the script blocks, right.

491
00:27:35.730 --> 00:27:39.000
That that can do arbitrary
transformations. And so what we

492
00:27:39.000 --> 00:27:44.700
will do is they'll say
rather than providing the parameter

493
00:27:44.700 --> 00:27:48.090
on the command line, or
even reading it directly from

494
00:27:48.450 --> 00:27:52.860
the, the pipeline will allow
you to specify a small

495
00:27:52.860 --> 00:27:54.660
piece of code in the
form of a script block.

496
00:27:54.990 --> 00:27:57.420
And it will take the
inbound object and it will

497
00:27:57.420 --> 00:28:00.390
do whatever transformation on it
that you need, whether it's

498
00:28:00.390 --> 00:28:02.700
a special type conversion, or
you want to multiply it

499
00:28:02.700 --> 00:28:05.640
by two, or you want
to take some sub property

500
00:28:05.640 --> 00:28:08.400
out of that property, basically
anything that you need to

501
00:28:08.400 --> 00:28:11.850
do, you can do with
this transformation. And in a

502
00:28:11.850 --> 00:28:17.310
lot of cases, it eliminates
the need for putting the,

503
00:28:17.310 --> 00:28:20.490
the command in for retail.
It, for example. So instead

504
00:28:20.490 --> 00:28:23.040
of piping into four reach,
you can just pipe directly

505
00:28:23.040 --> 00:28:24.870
into the command and use
a script block. And then

506
00:28:24.870 --> 00:28:27.540
the script block gets run
once for each inbound pipeline

507
00:28:27.540 --> 00:28:30.540
object and doing the transformation
and then the command executes.

508
00:28:31.460 --> 00:28:34.160
Yeah. We've used the script
blocks and script block parameters

509
00:28:34.160 --> 00:28:37.790
for the using them for
import CSV. I just think

510
00:28:37.790 --> 00:28:40.010
it's so funny that we
spent all these years moving

511
00:28:40.010 --> 00:28:42.980
towards XML. And then on
our projects where we use

512
00:28:42.980 --> 00:28:46.340
PowerShell scripting in a very
deep way, we keep falling

513
00:28:46.340 --> 00:28:50.840
back on comma separated values
for, for our structured data

514
00:28:50.840 --> 00:28:54.260
format. It seems like it's
a step forward, but also

515
00:28:54.260 --> 00:28:56.810
a kind of a step
back it's it's, it's just

516
00:28:56.810 --> 00:28:59.990
structured data without the angle
brackets, but it feels weird.

517
00:29:00.890 --> 00:29:02.870
Well, and a lot of
people say, you know, we've,

518
00:29:03.170 --> 00:29:05.330
we've done the structure data
thing already. It was called

519
00:29:05.330 --> 00:29:07.700
lisp angle, adding angle brackets.
Doesn't make it all that

520
00:29:07.700 --> 00:29:12.920
much difference, but it's XML
is actually not a great

521
00:29:12.920 --> 00:29:15.980
format for people. It's lots
of angle brackets, and it's

522
00:29:15.980 --> 00:29:18.230
fairly hard to type. And
so you can read it,

523
00:29:18.230 --> 00:29:20.240
but you wouldn't want to
write it. It's good for

524
00:29:20.240 --> 00:29:23.390
computers. They can read and
write it, but it's not

525
00:29:23.390 --> 00:29:26.330
a great notation for, for
a lot of purposes, which

526
00:29:26.330 --> 00:29:27.740
is why you see a
lot of people using the

527
00:29:27.740 --> 00:29:32.480
Jason notation with JavaScript, which
is just an indented data

528
00:29:32.480 --> 00:29:36.200
structure. It's much simpler than
XML. Sure. And it would

529
00:29:36.200 --> 00:29:40.340
be fairly straightforward given the
structure of Jason and the

530
00:29:40.340 --> 00:29:43.950
flexibility of, to build in
import and export Jason J

531
00:29:43.960 --> 00:29:48.750
and so in a PowerShell.
Right. And, and that's something

532
00:29:48.750 --> 00:29:51.600
that, well, I think we've
flirted with that for about

533
00:29:51.600 --> 00:29:55.380
three minutes in our copious
spare time. But it certainly

534
00:29:55.380 --> 00:29:57.240
something that we did look
at as, as being an

535
00:29:57.240 --> 00:30:00.660
alternative data format. Yeah. It
sounds like an interesting thing

536
00:30:00.660 --> 00:30:04.470
because you, as the, as
the shell designers get to

537
00:30:04.470 --> 00:30:08.700
basically punt by saying, Hey,
we're just the shell. And

538
00:30:08.700 --> 00:30:12.180
interestingly though, the community does
rise up and solve that

539
00:30:12.180 --> 00:30:13.860
problem. One of the things
that I've been amazed at

540
00:30:14.250 --> 00:30:17.340
is how quickly people have
taken things in PowerShell that

541
00:30:17.340 --> 00:30:21.930
they found distasteful and expanded
on them. The, the first

542
00:30:21.930 --> 00:30:24.120
thing that I saw that
I didn't like was the

543
00:30:24.540 --> 00:30:28.560
lack of IntelliSense, but because
tab expansion was a function

544
00:30:28.560 --> 00:30:30.480
of its own in its
own. Right. And you have

545
00:30:30.480 --> 00:30:35.250
full reflection abilities. They've been
some amazing tab expansion macros

546
00:30:35.250 --> 00:30:37.800
that I'm probably sure you
run yourself, that people have

547
00:30:37.800 --> 00:30:41.340
created. Yeah, we were, we
were pretty happy with, with

548
00:30:41.340 --> 00:30:43.980
that. And that's one of
the things that's, that's where

549
00:30:43.980 --> 00:30:47.910
I see the PowerShell environment
evolving to a large extent

550
00:30:48.060 --> 00:30:50.880
is to make more of
that customizable so that if

551
00:30:50.880 --> 00:30:54.090
people don't like a particular
behavior, then they can extend

552
00:30:54.090 --> 00:30:56.280
it themselves. That's kind of
the point of this type

553
00:30:56.280 --> 00:31:00.120
of environment. So I'm, I'm
your book is called PowerShell

554
00:31:00.120 --> 00:31:06.450
in action windows, PowerShell action.
And it's up@manningpublicationsatmanning.com slash Payette,

555
00:31:06.480 --> 00:31:10.170
manning.com/and your last name. It
looks like it's coming out

556
00:31:10.230 --> 00:31:14.970
a week after next February 12th,
That would be about right.

557
00:31:15.000 --> 00:31:19.890
The ebook should be available
now. And I just finished

558
00:31:19.950 --> 00:31:22.350
tarting together, all of the
examples. So you should be

559
00:31:22.350 --> 00:31:25.590
able to download it directly
from the Manning website. And

560
00:31:25.590 --> 00:31:27.720
then the print book will
be following shortly thereafter. And

561
00:31:27.720 --> 00:31:30.390
it looks like the complete
PowerShell grammar is in appendix

562
00:31:30.390 --> 00:31:34.110
C of that book. That's
right. Including the tokenization rules.

563
00:31:34.560 --> 00:31:37.110
Now, if I understand correctly
and please correct me if

564
00:31:37.110 --> 00:31:39.900
I'm wrong, you've got MSI.
And what people are familiar

565
00:31:39.900 --> 00:31:43.260
with, like MSI exec there's
that installer technology and early

566
00:31:43.260 --> 00:31:46.710
versions of PowerShell were installed
with MSI. Then there's the,

567
00:31:46.950 --> 00:31:49.530
well, I think what you
guys call update dot exe,

568
00:31:49.590 --> 00:31:52.590
which has the, we're not
an installer as we are

569
00:31:52.590 --> 00:31:55.150
an add on or an
update to the OSTP. And

570
00:31:55.150 --> 00:31:57.060
I, one of the ways
that I'm able to sell

571
00:31:57.060 --> 00:32:00.210
PowerShell internally and to other
companies, as I say, Hey,

572
00:32:00.210 --> 00:32:03.000
this isn't, this isn't something
we just slap onto windows.

573
00:32:03.000 --> 00:32:06.210
This is an actual KB.
You don't see it. If

574
00:32:06.210 --> 00:32:09.030
you go into add remove
programs, you have to click

575
00:32:09.030 --> 00:32:13.350
on show updates because it's
right. It's literally embedded into

576
00:32:13.350 --> 00:32:17.610
the system. So then those
are the two installer technologies

577
00:32:17.610 --> 00:32:19.890
I'm familiar with. And then
there's something new in Vista

578
00:32:20.070 --> 00:32:23.250
around in that room. Yeah.
There's a new component based

579
00:32:23.250 --> 00:32:28.950
installation mechanism in Vista that
is designed to address some

580
00:32:28.950 --> 00:32:31.980
of the limitations of, of
windows update. I don't know

581
00:32:31.980 --> 00:32:34.890
the details, particularly I didn't
shouldn't work in that area.

582
00:32:35.130 --> 00:32:37.360
We're gonna see that in,
in a power shell. Any

583
00:32:37.360 --> 00:32:43.290
anytime now, soon, I can't
say specifics. Sure, sure. But

584
00:32:44.380 --> 00:32:47.080
Before the end of 2007,
we'll have PowerShell and Vista.

585
00:32:47.350 --> 00:32:50.680
Yeah. A couple of months,
I think. Safe, safe bet.

586
00:32:50.710 --> 00:32:52.840
Yes. Good deal. Well, we're,
I'm looking forward to that

587
00:32:52.840 --> 00:32:56.050
and hopefully the book and
the Vista version of PowerShell

588
00:32:56.050 --> 00:32:58.390
come out around the same
time, because I'm going to

589
00:32:58.390 --> 00:33:02.290
start suggesting this book to
all my friends. I really,

590
00:33:02.320 --> 00:33:04.210
I really did enjoy, I
got to see an early

591
00:33:04.210 --> 00:33:07.120
access edition of the PowerShell
in action. I think as

592
00:33:07.120 --> 00:33:09.160
you were writing it, they
were putting the chapters up

593
00:33:09.160 --> 00:33:10.600
there, which I thought was
a pretty cool thing to

594
00:33:10.600 --> 00:33:14.650
do for a publishing company.
Yeah. It was, I was

595
00:33:14.650 --> 00:33:16.720
a little skeptical about it
initially, but it turned out

596
00:33:16.720 --> 00:33:19.180
to be great because I
had a chance to like

597
00:33:19.210 --> 00:33:21.730
really actively take feedback. Somebody
would ask, well, I did

598
00:33:21.730 --> 00:33:24.010
this, this portion of the
book is unclear or, or

599
00:33:24.010 --> 00:33:25.810
I'd like to see this
explain. And I was able

600
00:33:25.810 --> 00:33:28.840
to go back into the
chapters and add a new

601
00:33:28.840 --> 00:33:31.750
text, new examples, and really
incorporate some of the reader's

602
00:33:31.750 --> 00:33:34.660
feedback in the first version
of the book instead of

603
00:33:34.660 --> 00:33:37.540
having to wait two years
and do you know, like

604
00:33:37.540 --> 00:33:39.880
version two or something, Right.
It sounds like it definitely

605
00:33:39.880 --> 00:33:42.250
made it a better book.
Yeah, I was I'm. I

606
00:33:42.250 --> 00:33:44.350
was, I, like I said,
I was skeptical initially. I

607
00:33:44.350 --> 00:33:46.660
thought, you know, who would
even participate in this? But

608
00:33:46.660 --> 00:33:49.030
we had a really good
group of people. They contributed

609
00:33:49.030 --> 00:33:51.670
a lot of information and
a lot of feedback. I

610
00:33:51.670 --> 00:33:54.070
was very happy with it.
Well, it looks like it's

611
00:33:54.070 --> 00:33:56.800
a really good deal. If
you go up to manning.com/pat,

612
00:33:56.800 --> 00:33:59.800
you can get the ebook
for 2250 and you can

613
00:33:59.800 --> 00:34:03.370
get the ebook and the
soft print, the actual softbound

614
00:34:03.370 --> 00:34:06.160
paperback for 44 99. So
pretty good deal for a

615
00:34:06.160 --> 00:34:08.410
book considering that you can
get the ebook immediately and

616
00:34:08.410 --> 00:34:11.470
they'll ship the, the actual
book to you. I really

617
00:34:11.470 --> 00:34:13.090
appreciate you taking the time
out of your day to

618
00:34:13.090 --> 00:34:16.120
talk to us here. This
is pretty interesting stuff I

619
00:34:16.120 --> 00:34:17.890
could talk for another hour
or two with you. This

620
00:34:18.550 --> 00:34:20.380
it's so interesting to hear
about how someone would actually

621
00:34:20.380 --> 00:34:22.570
design a language from scratch.
And I do appreciate it.

622
00:34:24.190 --> 00:34:26.410
Thanks very much. Good talking
to you. And this has

623
00:34:26.410 --> 00:34:29.050
been another episode of Hanselminutes
and we'll see you again

624
00:34:29.050 --> 00:34:29.380
next week.

