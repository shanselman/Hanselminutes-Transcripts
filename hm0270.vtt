WEBVTT FILE

1
00:00:04.130 --> 00:00:17.060
<inaudible> from Hansel minutes.com. It's
Hansel minutes. Oh, weekly discussion

2
00:00:17.060 --> 00:00:21.740
with web developer and technologists.
Scott Hanselman. This is Lawrence Ryan

3
00:00:21.740 --> 00:00:27.890
announcing show number two 70
recorded live Thursday, June 9th, 2011. Support

4
00:00:27.890 --> 00:00:31.010
for Hansel minutes is provided
by teller at rad controls.

5
00:00:31.010 --> 00:00:34.130
The most comprehensive suite of
components for windows forms and

6
00:00:34.130 --> 00:00:43.610
asp.net web applications. online@wwwdottelerik.com. In
this episode, Scott talks with

7
00:00:43.670 --> 00:00:47.300
open source developer. Andrea's Hawkinson
about his dotnet micro web

8
00:00:47.300 --> 00:00:53.060
framework called Nancy. Hi, this
is Scott Hanselman, and this

9
00:00:53.060 --> 00:00:56.360
is another episode of Hansel
minutes. And today we're going

10
00:00:56.360 --> 00:00:59.570
to be talking about a
Sinatra inspired web framework for

11
00:00:59.570 --> 00:01:04.070
the.net platform. It's called Nancy.
If you're familiar with Sinatra,

12
00:01:04.250 --> 00:01:07.190
then you don't understand why
it's named Nancy. We're actually

13
00:01:07.190 --> 00:01:10.790
talking long distance to Andres
Hawkinson, also known as the

14
00:01:10.790 --> 00:01:13.040
code junkie. And if you've
seen him on Twitter, you're

15
00:01:13.040 --> 00:01:16.310
familiar with his avatar that
he uses everywhere. How are

16
00:01:16.310 --> 00:01:19.040
you, Andrea? Thanks for talking
to us today. Yeah. Hello.

17
00:01:19.040 --> 00:01:23.660
I'm doing fine. How are
you? Very, very well. So

18
00:01:24.230 --> 00:01:28.700
Nancy is the name of
your framework and it's inspired

19
00:01:28.700 --> 00:01:33.470
by Sinatra. What is Sinatra?
Oh, well Sinatra is a

20
00:01:33.500 --> 00:01:39.620
web framework, Ruby web framework
for building building websites with

21
00:01:39.650 --> 00:01:45.050
minimal effort. It's very low
ceremony approach to building websites.

22
00:01:46.190 --> 00:01:49.670
What does, what does that
mean? Low ceremony. There's not

23
00:01:49.670 --> 00:01:52.460
a lot of set up
and configuration you have to

24
00:01:52.460 --> 00:01:55.730
do to get started. And
basically you just type a

25
00:01:55.850 --> 00:01:57.650
couple of lines of code
and you you've got a

26
00:01:57.680 --> 00:02:00.950
basic website up and running.
Well, what's an example of

27
00:02:00.950 --> 00:02:03.740
something that's high ceremony. I
mean, that's an interesting word.

28
00:02:04.190 --> 00:02:07.730
Sometimes Ruby folks use words
like, you know, ceremony and

29
00:02:07.940 --> 00:02:11.240
an aesthetic and beauty and
things like that. Why is

30
00:02:11.240 --> 00:02:13.460
it important to have low
ceremony and what is an

31
00:02:13.460 --> 00:02:19.280
example of the opposite of
that? I build websites for

32
00:02:19.280 --> 00:02:24.230
a living and I use
web forums and asp.net MVC.

33
00:02:24.230 --> 00:02:28.010
And so that's, that's like
the background I came from

34
00:02:28.010 --> 00:02:33.290
and sometimes the framework really
like gets in the way

35
00:02:34.700 --> 00:02:36.560
for the things you really
want to do. Like you

36
00:02:36.560 --> 00:02:38.900
have to do a lot
of configuration or set up

37
00:02:38.900 --> 00:02:43.280
this and die and drop
controls everywhere, wire up stuff,

38
00:02:43.320 --> 00:02:49.790
just to do basic stuff.
And so I wanted a,

39
00:02:50.000 --> 00:02:53.960
a way to do that
on a framework without, without

40
00:02:53.990 --> 00:02:57.080
all the fuss Is that
you need first, like a

41
00:02:57.080 --> 00:03:00.970
web config file or fuss
like a bunch of preparation.

42
00:03:00.970 --> 00:03:03.070
I mean, w was it
your goal to strip this

43
00:03:03.070 --> 00:03:06.810
down to the simplest possible
thing you could? Oh yeah,

44
00:03:07.400 --> 00:03:11.880
definitely. It like, I don't,
we don't want the web

45
00:03:11.880 --> 00:03:14.070
framework to get in the
way of what you really

46
00:03:14.070 --> 00:03:15.960
want to do is like
build a website. So you

47
00:03:16.230 --> 00:03:20.040
shouldn't have to create a,
like three or four files

48
00:03:20.040 --> 00:03:23.220
just to get a text
on a page or go

49
00:03:23.220 --> 00:03:25.230
into a config file and
say, I'm wanting to use

50
00:03:25.260 --> 00:03:28.740
this and that. And so
with Nancy, you can just

51
00:03:28.740 --> 00:03:31.820
create a single file and
write two lines of code

52
00:03:31.830 --> 00:03:36.450
three lines of code. And,
and you're done, You use

53
00:03:36.460 --> 00:03:39.300
the term web framework, but
the folks that are listening

54
00:03:39.300 --> 00:03:42.060
might be, it might be
web forms, programmers, or they

55
00:03:42.060 --> 00:03:44.940
might be NBC programmers. They're
probably a few Java and

56
00:03:44.940 --> 00:03:49.740
Ruby folks. Are we talking
about serving web pages or

57
00:03:49.770 --> 00:03:54.990
is this some other kind
of web framework You could

58
00:03:54.990 --> 00:03:59.200
say it's for billing web
pages, but you could, you

59
00:03:59.310 --> 00:04:02.970
just, you can just use
nasty, like a backend that

60
00:04:02.970 --> 00:04:05.960
Jason backend for age Xtreme
and website, or if you

61
00:04:06.000 --> 00:04:09.360
use it to build a
restful end point or whatever

62
00:04:09.360 --> 00:04:12.990
you want to do, serving
the HTML content is just

63
00:04:13.050 --> 00:04:15.450
one thing you can do
with Nancy is it doesn't

64
00:04:15.450 --> 00:04:18.480
have to be All right.
So I guess what I'm

65
00:04:18.480 --> 00:04:21.150
trying to understand is is
this a data services and

66
00:04:21.150 --> 00:04:24.060
point, is this a something
I would use instead of

67
00:04:24.060 --> 00:04:27.720
maybe WCF or along with,
I'm trying to understand the

68
00:04:27.720 --> 00:04:32.250
bigger, the bigger picture, the
larger story here? It doesn't

69
00:04:32.250 --> 00:04:35.610
seem like it's, it's something
I would use in replacement

70
00:04:35.610 --> 00:04:41.100
of asp.net. But if I
had some, some application like

71
00:04:41.100 --> 00:04:44.160
a Gmail or a Twitter,
or I had a windows

72
00:04:44.610 --> 00:04:47.340
phone or an iPhone, and
I wanted to make Jason

73
00:04:47.340 --> 00:04:50.610
calls that I could use
Nancy as the end point

74
00:04:50.610 --> 00:04:52.500
that I would talk to
to get my data. Like

75
00:04:52.500 --> 00:04:55.680
you just said, like a
Jason data service. So is

76
00:04:55.680 --> 00:04:59.130
this services oriented or, But
it's also a replacement for

77
00:04:59.130 --> 00:05:02.760
like MVC or is p.net
web forums. You can build

78
00:05:02.760 --> 00:05:06.210
an entire website on, on
NASA, or if you're on

79
00:05:06.210 --> 00:05:09.660
Ruby, you can use Sinatra
that kind of frameworks works

80
00:05:09.660 --> 00:05:13.410
for building websites as well.
Like we support all the

81
00:05:13.410 --> 00:05:16.350
different view engines and all
that for serving up HTML

82
00:05:16.380 --> 00:05:21.030
content. Interesting, interesting. So the,
the basic or the, the

83
00:05:21.030 --> 00:05:25.020
hello world Nancy that people
typically see is someone goes

84
00:05:25.020 --> 00:05:27.960
and makes a new class.
So, you know, public class

85
00:05:27.960 --> 00:05:33.420
Scott and they derive from
Nancy module, they make a

86
00:05:33.420 --> 00:05:36.570
constructor. And then in that
constructor, they immediately start to

87
00:05:36.570 --> 00:05:41.340
finding routes. So right there,
it is different from asp.net,

88
00:05:41.340 --> 00:05:46.770
MVC, where by default routes
are centralized here, you create

89
00:05:46.770 --> 00:05:49.950
the routes and what the
routes do and, and the,

90
00:05:49.950 --> 00:05:51.810
the work that is being
done all in the same

91
00:05:51.810 --> 00:05:55.350
line. So basically, hello, world
is one line. You basically

92
00:05:55.350 --> 00:05:58.190
say, get you open a
square bracket. You put in

93
00:05:58.190 --> 00:06:00.470
the path that you want
it to respond to. And

94
00:06:00.470 --> 00:06:02.840
then you write a Lambda
that says, here's what I

95
00:06:02.840 --> 00:06:06.080
want you to do. So
I could say, get the,

96
00:06:06.080 --> 00:06:10.130
actually put forward slash hello,
world return, hello world. And

97
00:06:10.160 --> 00:06:13.450
basically I've written a Nancy
site. Is that right? Yeah,

98
00:06:13.450 --> 00:06:20.080
that's correct. We, we try
to make the web framework

99
00:06:20.500 --> 00:06:23.200
staying in the background for
you or the framework, stay

100
00:06:23.200 --> 00:06:26.500
in background for you and
give you some help to

101
00:06:26.500 --> 00:06:29.500
do stuff. So when you
like just return, hello world

102
00:06:29.890 --> 00:06:33.910
internally, Matthew will take care
of setting up eight HTTP

103
00:06:33.910 --> 00:06:36.430
headers and a response body
and all that for you.

104
00:06:36.940 --> 00:06:39.430
Is this something that is,
I see that it uses

105
00:06:39.430 --> 00:06:42.790
an HTTP request handler, but
is this something that's tied

106
00:06:42.850 --> 00:06:46.090
to, to asp.net MVC, or
might I want to use

107
00:06:46.090 --> 00:06:49.870
this somewhere else? So we
built Nancy to be a

108
00:06:49.870 --> 00:06:53.590
host agnostic, so you can
run it basically wherever you

109
00:06:53.590 --> 00:06:57.850
want. We have our own
request and response objects. So

110
00:06:58.660 --> 00:07:03.040
Nancy uses a concept that
we call hosts that is

111
00:07:03.040 --> 00:07:08.440
more or less an adopter
between IIS and nasty. So

112
00:07:08.440 --> 00:07:13.600
you could host a host
Nancy on top of like

113
00:07:14.260 --> 00:07:20.320
asp.net with the SV request
timer. And it would translate

114
00:07:20.320 --> 00:07:25.660
the HTTP requests to a
nasty request, pass it in.

115
00:07:25.690 --> 00:07:29.770
And when Nazi response, it
converts the response to something

116
00:07:29.770 --> 00:07:33.520
that asp.net kind of understand,
but you can just as

117
00:07:33.520 --> 00:07:37.330
well hosted on anything like
we have hosts for running

118
00:07:37.330 --> 00:07:41.680
Nancy on top of WCF,
we have a host that

119
00:07:41.710 --> 00:07:45.730
we call the cell phone
that is basically a built

120
00:07:45.730 --> 00:07:48.490
on top of a HTB
a listener. So you could

121
00:07:49.150 --> 00:07:53.890
embed Nazim into a desktop
application if you wanted to

122
00:07:53.890 --> 00:07:59.350
and expose a, a HTTP
HTD based API, if your

123
00:07:59.350 --> 00:08:02.530
application, or a small web
server in your application as

124
00:08:02.530 --> 00:08:06.280
well. So you can, you
can basically run Nancy on

125
00:08:06.280 --> 00:08:10.450
top of whatever you want.
We support a host for

126
00:08:11.140 --> 00:08:17.230
the Oh, win or open
web interface for.net. So once

127
00:08:17.590 --> 00:08:19.990
you start to get, Oh,
when running on different servers.

128
00:08:19.990 --> 00:08:22.060
So because now you can
run on top of that,

129
00:08:22.180 --> 00:08:24.340
out of the box as
well. Now, we, we talked

130
00:08:24.340 --> 00:08:28.060
actually to Benjamin Vanderveen in
the, some of the Owen

131
00:08:28.060 --> 00:08:31.210
folks and a couple of
of shows ago. And the

132
00:08:31.210 --> 00:08:34.750
idea that they had was,
I think it's similar to

133
00:08:34.750 --> 00:08:38.650
the concept called rack in
rails, which is the thing

134
00:08:38.650 --> 00:08:41.650
that you have that serving
your services or your webpages

135
00:08:42.070 --> 00:08:46.120
shouldn't necessarily be directly tied
to your web server. So

136
00:08:46.120 --> 00:08:48.940
they have a very thin
layer such that, you know,

137
00:08:49.090 --> 00:08:52.270
there's rails, there's the little
tiny adapter, and then there's

138
00:08:52.270 --> 00:08:57.240
the web server. So Owen
appears to a little web

139
00:08:57.240 --> 00:09:00.510
layer that you would write
to a little, a little

140
00:09:01.560 --> 00:09:05.280
adapter, and then I could
have IIS or Apache or

141
00:09:05.280 --> 00:09:08.730
whatever else or, or, or
some tiny web server. There's

142
00:09:08.730 --> 00:09:12.450
lots of little small web
servers, including some C-sharp example,

143
00:09:12.450 --> 00:09:17.130
web servers is Owen moving
forward. Is it happening such

144
00:09:17.130 --> 00:09:20.190
that I could make my
web applications slightly more portable?

145
00:09:20.660 --> 00:09:24.920
Oh, I talked to Benjamin
yesterday about it, and he's

146
00:09:25.520 --> 00:09:28.720
working on getting his webs
or kayak running on the

147
00:09:28.760 --> 00:09:31.160
latest specifications. So we can
start running Nanci on top

148
00:09:31.160 --> 00:09:35.930
of kayak instead. So in
terms of Nazi and Owen,

149
00:09:36.890 --> 00:09:40.700
where Owen is an abstraction
layer from whatever, you're running

150
00:09:40.700 --> 00:09:44.480
it on, we add on
an additional abstraction layer from

151
00:09:44.480 --> 00:09:47.720
Nancy. So we can written
Nancy on asp.net WCF or

152
00:09:47.720 --> 00:09:50.780
whatever, but we also have
an adapter that allows us

153
00:09:50.780 --> 00:09:56.240
to communicate with a Owen
hosts. So once the Owen

154
00:09:56.240 --> 00:09:59.930
starts running on different servers
like kayak or whatever servers

155
00:09:59.930 --> 00:10:03.470
they're out in the dotnet
a system masses, we'll be

156
00:10:03.470 --> 00:10:06.470
able to run on top
of that. Hm, no, I'm

157
00:10:06.470 --> 00:10:09.620
noticing a lot of interest
in this, in this space

158
00:10:09.620 --> 00:10:13.280
lately. And I think for,
for folks that aren't kind

159
00:10:13.280 --> 00:10:16.610
of deeply involved in the
community or folks who maybe

160
00:10:16.610 --> 00:10:18.560
aren't on Twitter or kind
of paying attention, I think

161
00:10:18.560 --> 00:10:20.690
there's a, you know, for
every one of you or

162
00:10:20.690 --> 00:10:23.990
I, there's probably a hundred
or a thousand folks that

163
00:10:23.990 --> 00:10:25.940
are just doing their jobs
and trying to get things

164
00:10:25.940 --> 00:10:27.860
done. And then every once
in a while, they'll listen

165
00:10:27.860 --> 00:10:30.860
to a show like this
one here, and they'll say,

166
00:10:30.860 --> 00:10:34.190
wait a second. There's there's,
there's Sinatra and there's Nancy

167
00:10:34.190 --> 00:10:36.650
and there's Martin and there's
monos. And there's, there's Owen.

168
00:10:36.800 --> 00:10:39.890
What is all this stuff?
For example, I know that

169
00:10:39.890 --> 00:10:42.950
there's a, there's one called
monos, which is a web

170
00:10:42.950 --> 00:10:47.210
application framework. That is a
kind of standalone small application.

171
00:10:47.930 --> 00:10:51.440
There's one called Martin, which
is similar to Sinatra and

172
00:10:51.440 --> 00:10:55.640
similar to, to Nancy there's
there's kayak. There's also open

173
00:10:55.640 --> 00:10:58.550
roster, which has been around
arguably, probably the one that's

174
00:10:58.550 --> 00:11:00.860
been around the alternative that's
been around for the longest

175
00:11:00.860 --> 00:11:04.400
time. How does one keep
track of all these? And

176
00:11:04.400 --> 00:11:07.370
how do I pick one?
It seems like it's almost

177
00:11:07.370 --> 00:11:09.800
a picking. One of these
would be a little dangerous

178
00:11:09.800 --> 00:11:11.240
because how do I know
it's not going to be

179
00:11:11.240 --> 00:11:15.260
dead in a year? I
guess that's always a risk.

180
00:11:15.260 --> 00:11:19.040
You're taking a, we decided
to license Nancy. I under

181
00:11:19.040 --> 00:11:22.100
the MIT license, it's probably
a free as it can

182
00:11:22.100 --> 00:11:27.050
get. So it's open source.
The community can do whatever

183
00:11:27.050 --> 00:11:31.070
it wants with it. It
should, I, for some unknown

184
00:11:31.070 --> 00:11:34.820
reason, lose interest in Nancy
and the community can carry

185
00:11:34.820 --> 00:11:37.100
on if they want to.
We only, we're already starting

186
00:11:37.100 --> 00:11:40.910
to get a pretty decent
community. That's contributing to NASA.

187
00:11:42.350 --> 00:11:45.980
I mean, it's always a
risk if you choose an

188
00:11:45.980 --> 00:11:50.510
open source project, but yeah,
I'm not sure. I'd say

189
00:11:51.230 --> 00:11:55.770
some will probably stay. They're
not her. So Is that,

190
00:11:55.800 --> 00:11:58.080
is that something that you
think is, is reasonable to

191
00:11:58.080 --> 00:12:00.690
tell the, you know, kind
of the average Joe out

192
00:12:00.690 --> 00:12:02.850
there, who's trying to decide
about using an open source

193
00:12:02.850 --> 00:12:06.600
project? I mean, you had
said, well, maybe you, you

194
00:12:06.600 --> 00:12:08.880
lose interest, which is one
thing. Or, you know, you

195
00:12:08.880 --> 00:12:12.150
could disappear. I think we've
all followed people on the

196
00:12:12.150 --> 00:12:15.990
internet, programmers who, you know,
you go to their blog

197
00:12:15.990 --> 00:12:17.730
and you haven't seen a
thing in a year and

198
00:12:18.150 --> 00:12:20.700
maybe the person disappeared or
they moved to another country

199
00:12:20.700 --> 00:12:22.290
or they lost control of
the domain. Or maybe they

200
00:12:22.290 --> 00:12:26.490
just got hit by a
bus. Do you think that

201
00:12:26.850 --> 00:12:31.770
smaller projects are safer projects
to, to use an in,

202
00:12:31.770 --> 00:12:34.170
in, in a, in a
business? Like if I have

203
00:12:34.170 --> 00:12:38.070
an enterprise and I decide
to use Nancy, is it

204
00:12:38.070 --> 00:12:41.010
safer because it's only, you
know, some number of thousands

205
00:12:41.010 --> 00:12:43.560
of lines of code versus
maybe a giant framework or

206
00:12:43.560 --> 00:12:46.650
something large like MVC or
DotNetNuke or something like that,

207
00:12:48.240 --> 00:12:50.520
should it should lines of
code and size of project

208
00:12:50.550 --> 00:12:56.610
go into how I decide
to use something. You should

209
00:12:56.610 --> 00:13:02.370
probably factor it in because
if the project least support

210
00:13:02.400 --> 00:13:07.500
you, you can always continue
supporting it by working on

211
00:13:07.500 --> 00:13:09.600
a source code yourself, and
then this smaller code base.

212
00:13:09.600 --> 00:13:12.120
Yeah. The easier it will
be to, to understand and

213
00:13:12.120 --> 00:13:13.920
pick up. And you, you
don't have to lose a

214
00:13:13.920 --> 00:13:16.620
lot of time to figure
out all the mechanics of

215
00:13:16.620 --> 00:13:19.410
the framework. So of course,
if you have clean code

216
00:13:19.470 --> 00:13:24.000
your life of code, good
documentation, it's probably a better

217
00:13:24.270 --> 00:13:30.690
bet to use. But I
mean, which framework you choose

218
00:13:32.010 --> 00:13:34.680
probably will come down to
what you need out of

219
00:13:34.680 --> 00:13:39.180
your framework. Like, like you
mentioned earlier, they're starting to

220
00:13:39.720 --> 00:13:42.930
do up here, a lot
of different alternatives. You mentioned

221
00:13:42.930 --> 00:13:45.570
a few, and there's a
bunch of water, not dry,

222
00:13:45.570 --> 00:13:52.560
like or different style frameworks
popping up. And, and what

223
00:13:52.560 --> 00:13:56.730
differentiates them is probably dependency.
One division you have for,

224
00:13:56.820 --> 00:13:59.070
for the framework we have
for Nancy, we have a

225
00:13:59.070 --> 00:14:02.970
certain vision of how we
want websites or web framework,

226
00:14:03.090 --> 00:14:06.630
sorry, web end points to
be built. And if that

227
00:14:06.630 --> 00:14:09.810
suits your need, and maybe
Nazi's a good fit for

228
00:14:09.810 --> 00:14:15.120
you. If, if, if AC
Don MVCs for filling all

229
00:14:15.120 --> 00:14:18.480
your goals. I see no
reason why to like migrate

230
00:14:21.120 --> 00:14:23.730
Recent developments in the.net world
have opened up a niche

231
00:14:23.730 --> 00:14:28.020
for a free.net decompiling tool.
And if you like so

232
00:14:28.020 --> 00:14:30.600
many other developers have been
looking for an alternative dotnet

233
00:14:30.600 --> 00:14:34.410
decompiler, you're certainly welcome to
watch the launch of just

234
00:14:34.410 --> 00:14:36.830
decompile. It's a new, powerful
tool. It's going to be

235
00:14:36.830 --> 00:14:41.490
free forever. It's currently available
in beta, just decompile offers

236
00:14:41.490 --> 00:14:46.590
a dotnet decompiling and assembly
browsing code analysis, navigation side-by-side

237
00:14:46.590 --> 00:14:51.030
assembly loading, automatically updates, and
even better decompiling accuracy than

238
00:14:51.050 --> 00:14:54.920
you're used to it's by
leading.net vendor. Tellerik our sponsors.

239
00:14:55.040 --> 00:14:57.050
And it's got a very
aggressive release schedule and a

240
00:14:57.050 --> 00:15:00.530
roadmap all based on community
feedback, you can visit the

241
00:15:00.530 --> 00:15:04.280
just compile feature suggestion form,
let Tellerik know what features

242
00:15:04.280 --> 00:15:07.070
you'd like to see added
or vote on one suggested

243
00:15:07.070 --> 00:15:09.740
by your peers. The launch
will be in the summer

244
00:15:10.250 --> 00:15:16.910
and you can check them
out@tellerik.com slash.net. Decompiling what do

245
00:15:16.910 --> 00:15:19.820
you think about some of
the new Microsoft stuff that's

246
00:15:19.820 --> 00:15:21.980
being worked on? I know
that Glen block is working

247
00:15:21.980 --> 00:15:26.960
on a web API, and
he's been working closely with

248
00:15:26.990 --> 00:15:29.360
the, the Owen folks and
talking to them on their,

249
00:15:29.420 --> 00:15:33.470
on their Google group a
lot. Do you think that

250
00:15:33.470 --> 00:15:35.240
there's room for a whole
lot of these? I mean,

251
00:15:35.240 --> 00:15:37.700
there's at least six that
I can think of these

252
00:15:37.700 --> 00:15:41.290
small micro web frameworks. Is
there room for them or

253
00:15:41.320 --> 00:15:44.240
should Microsoft pick one or
should Microsoft stop working on

254
00:15:44.240 --> 00:15:46.040
their own? I'm curious as
a, as a person who

255
00:15:46.040 --> 00:15:49.580
kind of has a, a
horse in the race as

256
00:15:49.580 --> 00:15:53.380
it were, what you, what
you think about that? Alright.

257
00:15:53.400 --> 00:15:56.020
I've known Glen for a
long time and ever since

258
00:15:56.320 --> 00:15:59.440
back in his meth days,
and I checked out the

259
00:15:59.440 --> 00:16:01.120
stuff they've done and I
talked to him a lot

260
00:16:01.120 --> 00:16:02.770
about it, and I think
they're doing a great work

261
00:16:02.800 --> 00:16:06.700
about it. I think the
Microsoft stack needs something like

262
00:16:06.700 --> 00:16:13.690
this. I mean, it all
comes down to your needs.

263
00:16:14.380 --> 00:16:18.910
In some, some enterprises, corporations
using open source probably will

264
00:16:18.910 --> 00:16:22.240
never be an option. You
probably won't get to do

265
00:16:23.020 --> 00:16:26.950
anything unless it's supported by
Microsoft. And in those cases,

266
00:16:27.340 --> 00:16:30.190
I Le I'd rather be
able to use like the

267
00:16:30.190 --> 00:16:35.350
web API or something. Yeah.
Something like the web API,

268
00:16:35.350 --> 00:16:39.070
because I liked the approach
they're taking then being forced

269
00:16:39.070 --> 00:16:43.600
to use. I don't know,
web forms, if you're able

270
00:16:43.600 --> 00:16:45.850
to, if you pick and
choose from the open source

271
00:16:45.850 --> 00:16:49.420
community as well, again, it
comes down to the style

272
00:16:49.420 --> 00:16:51.850
of how you want to
do stuff. Was the duty.

273
00:16:52.420 --> 00:16:55.210
If you're a vision of
how, how to build the

274
00:16:55.210 --> 00:16:58.090
stuff you're wanting to build,
like matches the vision of

275
00:16:58.090 --> 00:17:01.480
the project. So I definitely
think there's a room. I

276
00:17:01.480 --> 00:17:06.070
like diversity. We don't see
any way. When I see

277
00:17:06.100 --> 00:17:09.280
we, the, the guys are
working on nasty. We don't

278
00:17:09.460 --> 00:17:13.120
see the web API or
FUBU NBC or OPA Ross

279
00:17:13.120 --> 00:17:17.860
does a competition because frankly
people should choose what fits

280
00:17:17.860 --> 00:17:20.710
their needs. And if it's
Nancy for long project and

281
00:17:20.710 --> 00:17:23.910
good for us, if it's
FUBU NBC for another project,

282
00:17:23.980 --> 00:17:26.590
good for them. So we
w w I've talked to

283
00:17:26.590 --> 00:17:29.500
Glen a lot. I've talked
to Jeremy Miller about FUBU and

284
00:17:29.500 --> 00:17:35.470
Nancy and Sebastian for open
Ross Jackson for Manoa. And

285
00:17:35.740 --> 00:17:38.590
everybody, I get the impression
that everybody feels the same

286
00:17:38.590 --> 00:17:41.440
because we share ideas and
help out and solve problems.

287
00:17:41.440 --> 00:17:46.390
And it just works out
fine. Do you think that

288
00:17:46.390 --> 00:17:49.350
one will, will win? Cause
I remember that about year

289
00:17:49.350 --> 00:17:53.190
and a half ago, we
were all wondering between jQuery

290
00:17:53.190 --> 00:17:56.580
and MooTools and mochi kit
and, and you know, why

291
00:17:56.580 --> 00:17:59.370
UI and all these kinds
of things. And then we

292
00:17:59.370 --> 00:18:01.110
blinked in a year, went
by, and then there was

293
00:18:01.110 --> 00:18:04.650
only jQuery. Do, do you
think about stuff like that?

294
00:18:04.710 --> 00:18:07.890
Like, like we did, when
we think about JavaScript libraries

295
00:18:07.980 --> 00:18:10.470
or do you just kind
of go on and you'd

296
00:18:10.470 --> 00:18:12.390
make the best framework that
you can make and then

297
00:18:12.750 --> 00:18:17.660
whatever happens, happens. Yeah. Like
I said, we're not trying

298
00:18:17.660 --> 00:18:22.370
to compete on if, if
Nazi becomes the, mostly about,

299
00:18:22.790 --> 00:18:25.520
sorry, I used one and
sure. We'll be happy about

300
00:18:25.520 --> 00:18:28.580
that. Cause we believe in
the, in the framework and

301
00:18:28.820 --> 00:18:30.650
we're passionate about it. And
of course we want as

302
00:18:30.650 --> 00:18:34.550
many people as possible to
use what we're building. And

303
00:18:37.640 --> 00:18:42.170
I don't think there's room
for like 10 or 12

304
00:18:42.170 --> 00:18:44.970
to get become mainstream, but
a couple of them are,

305
00:18:44.970 --> 00:18:48.980
are probably going to, to
do better than the rest

306
00:18:48.980 --> 00:18:52.790
of them. And, and most
likely not because one is

307
00:18:53.210 --> 00:18:57.170
much better than the other,
because like I said, with

308
00:18:57.170 --> 00:19:00.890
Jay Carrere and the RF
framework, it just took off.

309
00:19:03.620 --> 00:19:05.600
I was a, I was
looking at a blog post

310
00:19:05.600 --> 00:19:08.780
by a fellow named Mike
had lo who wrote a

311
00:19:08.780 --> 00:19:13.340
blog post called an explosion
of alternative web frameworks and

312
00:19:13.850 --> 00:19:17.930
basically noticed all of these
different frameworks like Nancy and

313
00:19:17.930 --> 00:19:21.920
Nina and Owen and, and
monos. And one of the

314
00:19:21.920 --> 00:19:23.510
things that I thought was
interesting that he said in

315
00:19:23.510 --> 00:19:26.840
his blog post was, he
said that we know we've

316
00:19:26.840 --> 00:19:29.300
had monorail for a number
of years and then also

317
00:19:29.300 --> 00:19:33.110
there's FUBU MVC, and then
an open roster. And he

318
00:19:33.110 --> 00:19:36.230
called out open roster as,
and this is a quote,

319
00:19:36.650 --> 00:19:39.680
the only one that attempted
to break away from the

320
00:19:39.680 --> 00:19:45.650
stranglehold of asp.net and build
its own HDP abstraction. I

321
00:19:45.650 --> 00:19:49.640
think stranglehold is a little
bit harsh, but how important

322
00:19:49.640 --> 00:19:56.420
is it for a.net framework,
specifically a.net framework to not

323
00:19:57.650 --> 00:20:03.230
run on asp.net? Well, if
you're running on ASP dot

324
00:20:03.230 --> 00:20:07.910
and ads, you're probably confined
to IIS as well. I

325
00:20:07.910 --> 00:20:10.880
think I asked this a
great tool, but not for

326
00:20:10.880 --> 00:20:14.120
everything I'd like to be
able to, to build smaller

327
00:20:14.120 --> 00:20:18.560
stuff, maybe on kayak. And
we've definitely tried to break

328
00:20:18.560 --> 00:20:22.790
free from asp.net and Nancy.
We are targeting client profile

329
00:20:22.790 --> 00:20:25.850
when we're building our, our
framework. So we have no

330
00:20:25.850 --> 00:20:28.370
dependencies on systems about web
at all. We have provide

331
00:20:28.370 --> 00:20:32.690
our own abstractions if you
want. We're also able to

332
00:20:32.690 --> 00:20:37.250
run on a mano. We've
had nasty Ron on, on,

333
00:20:37.280 --> 00:20:42.800
on OSX and Linux on
different web servers. And I

334
00:20:42.800 --> 00:20:47.680
think quite again, it depends
on the size of organization

335
00:20:47.680 --> 00:20:52.120
and what you're doing there.
More people are, are doing

336
00:20:52.120 --> 00:20:57.790
startups on mano now. And
I think, I think that's

337
00:20:57.790 --> 00:21:00.340
a good option to let
you choose if you want

338
00:21:00.340 --> 00:21:03.370
to, which operating system and
which web servers you want

339
00:21:03.370 --> 00:21:06.010
to run, and you can
pick the one that fits

340
00:21:06.010 --> 00:21:09.060
your wallet more or less.
I guess I'm trying to

341
00:21:09.060 --> 00:21:13.200
understand that again, I work
for, I work for Microsoft,

342
00:21:13.890 --> 00:21:15.390
but at the same time,
I've only been there three

343
00:21:15.390 --> 00:21:19.500
years. So I'm not trying
to be a apologist like,

344
00:21:20.310 --> 00:21:22.560
Hey, what's the big deal,
but it doesn't. I just

345
00:21:22.560 --> 00:21:27.930
don't see the, the stranglehold
of IIS is it the

346
00:21:27.930 --> 00:21:31.200
visit, the stranglehold of the
licensing that you have to

347
00:21:31.200 --> 00:21:32.790
pay for it. And then
you just, you know, you

348
00:21:32.790 --> 00:21:34.470
want, you might want to
go mano, you might want

349
00:21:34.470 --> 00:21:37.440
to go something smaller or
is it just one of

350
00:21:37.440 --> 00:21:39.270
those things that it's just
a good idea to abstract

351
00:21:39.270 --> 00:21:44.820
away your integration points? Again,
I think it, people should

352
00:21:44.820 --> 00:21:48.540
be able to decide which
hosting environments fits their needs

353
00:21:48.540 --> 00:21:52.530
the best. And we decided
on this very, are, are

354
00:21:52.530 --> 00:21:55.590
they only mass just to
provide the abstraction ourselves? So

355
00:21:55.980 --> 00:21:59.730
if people wanted to use
asp.net, we were more than

356
00:22:01.140 --> 00:22:03.810
happy to help you because
we provide the opportunity hosting

357
00:22:03.810 --> 00:22:05.550
to do so. And if
you, if you want to

358
00:22:05.550 --> 00:22:09.840
run on mano on Apache
or engine X or whatever,

359
00:22:09.840 --> 00:22:12.360
and then we want to
help you do that as

360
00:22:12.360 --> 00:22:16.620
well. I mean, we don't
want to, we don't want

361
00:22:16.620 --> 00:22:18.720
to say, if you gotta
use Nazi, you have to

362
00:22:18.720 --> 00:22:23.820
use this operating system, this
web server, this database and

363
00:22:23.820 --> 00:22:28.050
whatever. I mean, that's not
for us to choose. We

364
00:22:28.050 --> 00:22:33.390
are not that opinionated. Hmm.
Okay. That, that, that makes

365
00:22:33.390 --> 00:22:35.430
sense to me, that that
kind of resonates the idea

366
00:22:35.430 --> 00:22:39.690
that, that, who are we
to tell you what, what

367
00:22:39.690 --> 00:22:41.700
you want to use or
don't want to use. So

368
00:22:41.730 --> 00:22:45.690
give them the flexibility to
choose, and then they'll make

369
00:22:45.690 --> 00:22:48.540
the decision that they feel
like making. Yeah, probably maybe

370
00:22:48.540 --> 00:22:52.530
90% end up using windows
NIS. And that's totally fine

371
00:22:52.530 --> 00:22:57.360
because to be honest, the,
the investment we we've made

372
00:22:57.390 --> 00:23:00.510
to make it possible to
run on different configuration, isn't

373
00:23:00.510 --> 00:23:06.990
that big. So, because we
started fresh, we basically got

374
00:23:06.990 --> 00:23:13.170
it freight. Hmm. That's cool.
I noticed another thing that

375
00:23:13.170 --> 00:23:15.960
was blogged. It was blogged.
I'm not sure who this

376
00:23:15.960 --> 00:23:18.600
fellow is here. You can't
tell him he doesn't actually

377
00:23:18.600 --> 00:23:22.050
have his name on his
blog, but he basically was

378
00:23:22.050 --> 00:23:24.300
blogging about a tweet that
Rob Connery sent out where

379
00:23:24.300 --> 00:23:29.490
he says a dotnet Sinatra
clone is the new black

380
00:23:29.880 --> 00:23:33.930
actually here it is. His
name is Martin ru@invalidcast.com. And

381
00:23:34.530 --> 00:23:36.840
he says a dotnet Sinatra
clone is the new black.

382
00:23:37.230 --> 00:23:39.270
I mean, are you familiar
with that? That term with

383
00:23:39.270 --> 00:23:44.790
something is the new black.
So he's basically saying that

384
00:23:44.790 --> 00:23:48.290
this a very, very stylish
thing to do and that

385
00:23:48.920 --> 00:23:51.170
creating your own Sinatra, cologne
is a, is a good

386
00:23:51.170 --> 00:23:53.450
way to kind of explore
the space and see what

387
00:23:53.450 --> 00:23:57.020
you can see, what you
can do with it. And

388
00:23:57.560 --> 00:24:00.470
he, he is, he's looking
at this explosion a little

389
00:24:00.470 --> 00:24:04.160
differently. What was it about
Sinatra that made you want

390
00:24:04.160 --> 00:24:08.510
to make Nancy? Was it
the, the, the, the syntax,

391
00:24:08.540 --> 00:24:11.030
or was it the, the
challenge of making your own

392
00:24:11.030 --> 00:24:15.190
framework? No, I definitely liked
the Centex a lot. Like

393
00:24:15.190 --> 00:24:20.830
you mentioned before you combine
the, the, the intent and

394
00:24:20.830 --> 00:24:23.620
action, I guess you could
say in a single line

395
00:24:23.620 --> 00:24:29.890
of code, if you want
to, it's very Sinatra and

396
00:24:29.890 --> 00:24:32.680
Nancy applications, and I can't
speak for the other, your

397
00:24:33.100 --> 00:24:37.390
inspiration inspired frameworks usually have
very little code in them

398
00:24:37.390 --> 00:24:41.200
as well. And they work
well for, even if you're

399
00:24:41.200 --> 00:24:43.840
building a larger website or
if you're like doing an

400
00:24:43.900 --> 00:24:47.740
Ajax or adjacent endpoint or
whatever, it works out pretty

401
00:24:47.740 --> 00:24:53.410
well. And you don't, you
don't get more than you

402
00:24:53.410 --> 00:24:56.590
need. We've tried to build
NASA in a way that

403
00:24:56.980 --> 00:25:01.690
we've got a very light
core, but we provide, I

404
00:25:01.690 --> 00:25:03.700
guess you could call them
extensions. We can call them,

405
00:25:03.990 --> 00:25:07.090
don't have a good name
for it that you can

406
00:25:07.090 --> 00:25:10.300
plug into an assay. We
don't, we have a sort

407
00:25:10.300 --> 00:25:12.970
of a request response pipeline
that helps you Jack and

408
00:25:12.970 --> 00:25:17.620
stuff as well. I would
say session support. We, we,

409
00:25:17.620 --> 00:25:21.160
we support sessions, but you
will have to opt in

410
00:25:21.220 --> 00:25:23.650
to get it. If you
don't need it, you don't

411
00:25:23.650 --> 00:25:27.760
need to COVID eat or
for it, or a different

412
00:25:27.790 --> 00:25:35.710
authentication approaches or different kinds
of view and Jens, or

413
00:25:36.520 --> 00:25:41.440
could be whatever Do, how
do I, how do I

414
00:25:41.440 --> 00:25:44.050
serialize objects? Let's say I've
got a, an array of

415
00:25:44.080 --> 00:25:48.010
people. How do I take
those people and, and return

416
00:25:48.010 --> 00:25:50.680
them in, in, in Nancy
and what kind of options

417
00:25:50.680 --> 00:25:54.350
do I have available to
me? So every action in

418
00:25:54.350 --> 00:25:59.200
Nassi actually returns a response
object called response, but then

419
00:25:59.200 --> 00:26:03.370
we put on some, there's
a lot of implicit casting

420
00:26:03.370 --> 00:26:06.130
going on on the response
object. So you can, you

421
00:26:06.130 --> 00:26:10.540
can return as a, an
integer and Nancy were interpreted

422
00:26:10.570 --> 00:26:13.840
as an HTTP status code,
or you could return a

423
00:26:13.840 --> 00:26:19.140
string. And as the word
returned to the body of

424
00:26:19.140 --> 00:26:24.580
the response, or you could
return a, an action delicate

425
00:26:24.640 --> 00:26:28.030
that will be invoked for
like rendering views and stuff.

426
00:26:29.740 --> 00:26:32.470
So you have your list
of what is it, people

427
00:26:32.470 --> 00:26:35.920
in person, and you want
it to return that you

428
00:26:35.920 --> 00:26:41.740
could, what we've done is
let you write extension message

429
00:26:41.810 --> 00:26:46.110
methods on the object. So
as long as you return

430
00:26:46.110 --> 00:26:48.750
any of the, the types
that, and I have to

431
00:26:48.750 --> 00:26:52.980
understand for implicit casting or
our response audit itself, you

432
00:26:52.980 --> 00:26:55.770
can write any extension methods
that you want. So for

433
00:26:55.800 --> 00:27:00.750
Jason, you could do a
response as Jason and just

434
00:27:01.140 --> 00:27:04.890
provide your list and Nancy
and the extension method would

435
00:27:04.890 --> 00:27:11.430
translate that into a, you
know, probably Jason format returned

436
00:27:11.430 --> 00:27:15.630
that essay. I know string.
And because Nancy knows how

437
00:27:15.630 --> 00:27:18.000
to take a string and
turn into response, it works

438
00:27:18.030 --> 00:27:21.090
beautifully. And we ship a
lot of those other box

439
00:27:21.150 --> 00:27:29.160
of like Jason XML image,
a generic file, the name

440
00:27:29.160 --> 00:27:32.040
a few. And if you
want a different Sendak's or

441
00:27:32.050 --> 00:27:37.140
use a different Jason framework
or whatever, you can just

442
00:27:37.860 --> 00:27:41.340
write your own extension method
or, or, or just return

443
00:27:41.370 --> 00:27:44.220
the string yourself. It doesn't
have to be extension method,

444
00:27:44.220 --> 00:27:47.310
but that's the, that's the
preferred and the Explorer, a

445
00:27:47.790 --> 00:27:53.240
Nazi return message. Who's Jason
serializer, are you using, I

446
00:27:53.240 --> 00:27:55.100
mean, if I have my
list of people and it

447
00:27:55.100 --> 00:27:57.330
turns into Jason, are you
using the builtin one, or

448
00:27:57.350 --> 00:28:01.700
do you have plugable We
ended up using the one

449
00:28:02.090 --> 00:28:08.180
from mano, from the Montessori
source base, because we don't

450
00:28:08.180 --> 00:28:11.510
want any external dependencies and
not the Nazis, basically a

451
00:28:11.510 --> 00:28:14.690
single DLL that you can
use. We have everything in

452
00:28:14.690 --> 00:28:17.600
dot DLL, and it's very
small ability to still less

453
00:28:17.600 --> 00:28:20.750
than a hundred K, probably
a lot smaller. So we

454
00:28:20.750 --> 00:28:24.230
ended up using the one
from mano, And I assume

455
00:28:24.230 --> 00:28:26.450
that that's something I can
swap out. I can swap

456
00:28:26.450 --> 00:28:29.480
out anything. I don't like.
You can add whatever dependency

457
00:28:29.480 --> 00:28:32.600
you want to project and
write your own extension method

458
00:28:32.600 --> 00:28:38.000
or, or code to do
to serialization and returning just

459
00:28:38.000 --> 00:28:40.340
as long as whatever you're
returning is in one of

460
00:28:40.340 --> 00:28:44.060
the formats, Dodd nonstandard status,
you can do whatever you

461
00:28:44.060 --> 00:28:46.070
want And, and how do
I, so that's how I

462
00:28:46.070 --> 00:28:48.920
can return data and I
can return it, but I

463
00:28:48.930 --> 00:28:51.350
assume any format I want
serialized any way I want,

464
00:28:51.380 --> 00:28:56.240
I, you know, RSS, I
Cal whatever. What about taking

465
00:28:56.240 --> 00:28:59.060
data in, how do I
get data out of a,

466
00:28:59.120 --> 00:29:04.340
an HTTP post, But in
a Nancy module, there is

467
00:29:04.340 --> 00:29:09.470
a property on a call,
the request object. And from

468
00:29:09.470 --> 00:29:12.470
the request audio, you can
get to the request or

469
00:29:12.470 --> 00:29:17.420
the, we said the request
body, which is currently a,

470
00:29:17.870 --> 00:29:21.380
a stream. And there is
a set of extension methods

471
00:29:21.860 --> 00:29:24.430
for, for reading the stream
as well. Just ask for

472
00:29:24.440 --> 00:29:27.920
riding to the response. And,
and again, you could write

473
00:29:27.920 --> 00:29:31.340
your own extension methods because
basically it is a dotnet

474
00:29:31.340 --> 00:29:37.520
stream on top of the
HTTP request, and you get

475
00:29:37.520 --> 00:29:43.810
all the headers and cookies,
the usual stuff as well

476
00:29:43.810 --> 00:29:47.400
on the request object. Do
I have model binders and

477
00:29:47.400 --> 00:29:49.020
things to help me out?
Or is it, I mean,

478
00:29:49.020 --> 00:29:51.630
how, I mean, I don't
want to go too low

479
00:29:51.630 --> 00:29:53.580
level, but I want to
understand, like, is this like

480
00:29:53.580 --> 00:29:57.660
classic ASP Kind of, if
you want to like, is

481
00:29:57.660 --> 00:29:59.880
that there is model binding
support as well, and it's

482
00:30:01.020 --> 00:30:05.460
there, there's a pretty good
default setup for it. And

483
00:30:05.850 --> 00:30:08.340
again, you can extend it.
If you want to support

484
00:30:08.370 --> 00:30:14.280
more complex model binding scenarios,
we also make quite heavy

485
00:30:14.280 --> 00:30:17.760
use of dynamics. So for
instance, if you do request

486
00:30:17.820 --> 00:30:23.910
on form, it's a special
dynamic objects, a dynamic dictionary

487
00:30:23.910 --> 00:30:26.550
you're having Nazis you can
do. So you have a

488
00:30:28.410 --> 00:30:33.390
post, a, a text field
called name. So you can

489
00:30:33.390 --> 00:30:37.620
do your Nazi. You can
do request.form.name, and you get

490
00:30:37.620 --> 00:30:40.140
the value out to there's.
No, well, you can do

491
00:30:40.620 --> 00:30:44.490
standard dictionary access as well,
but because he uses dynamics,

492
00:30:44.520 --> 00:30:49.110
he gets a pretty nice
index for getting stuff like

493
00:30:49.110 --> 00:30:55.140
quatre string values, form data,
posted form data, header values

494
00:30:56.280 --> 00:30:59.460
as well. But again, you
can use model by two,

495
00:30:59.550 --> 00:31:02.460
if you want out of
the box. So, okay. So

496
00:31:02.460 --> 00:31:05.160
you actually, you support the
notion of model binding and

497
00:31:05.160 --> 00:31:08.610
you, you can, you can
refer to the system, got

498
00:31:08.610 --> 00:31:10.920
web that NPC, or do
you have, you have to

499
00:31:10.920 --> 00:31:15.330
plug that in? We have
our own model binding. I

500
00:31:15.330 --> 00:31:17.370
see, I see. So out
of the box, it's just

501
00:31:17.370 --> 00:31:21.060
one deal and it doesn't
have any, We're totally running

502
00:31:21.060 --> 00:31:26.130
on client profiles. So no
nos dependencies on asp.net or

503
00:31:26.130 --> 00:31:29.430
NBC, or any of those
frameworks at all, furnace for

504
00:31:29.430 --> 00:31:32.490
the core assembly for Nancy.
I see. But if I

505
00:31:32.490 --> 00:31:35.700
choose to that, I can,
I can take that dependency

506
00:31:35.920 --> 00:31:38.550
and go and do what
I want to do. Like

507
00:31:39.270 --> 00:31:42.270
if you want to use,
say the, our spark view

508
00:31:42.270 --> 00:31:45.270
engine, of course it uses
it have the dependencies on

509
00:31:45.270 --> 00:31:48.480
spark itself or, or for
our racer view engine. We

510
00:31:48.480 --> 00:31:53.220
have support for, we use
the racer parser assembly as

511
00:31:53.220 --> 00:31:57.090
well. It's just a nasty
core. Doesn't have the external

512
00:31:57.090 --> 00:32:00.960
dependencies. So we're self contained.
We've modeled by the end

513
00:32:01.290 --> 00:32:07.170
stuff like Jason request, response
objects. And I assume that

514
00:32:07.170 --> 00:32:09.480
Nancy is in, in new
get, and folks can get

515
00:32:09.480 --> 00:32:14.520
it with the install package.
Nancy, There is a bunch

516
00:32:14.520 --> 00:32:17.340
of new gets out there
there's for the Nancy itself

517
00:32:17.370 --> 00:32:20.370
and for the different kinds
of hosts we support like

518
00:32:20.610 --> 00:32:25.880
it's b.net w FC self
hosting. There's a bunch for

519
00:32:25.890 --> 00:32:31.080
view engines like and Django
racers spark. We're adding dot

520
00:32:32.850 --> 00:32:37.200
really soon. A couple of
keystrokes you can set up

521
00:32:39.910 --> 00:32:44.170
hosted On WCF. Very cool.
Very cool. All right. Well,

522
00:32:44.170 --> 00:32:45.850
we'll make sure to put
all of the links that

523
00:32:45.850 --> 00:32:49.090
you share up on the
show notes so that folks

524
00:32:49.090 --> 00:32:50.650
can learn as much as
they want to about this,

525
00:32:50.650 --> 00:32:53.230
and everyone can go and
check this out in a

526
00:32:53.230 --> 00:32:55.180
new kit, and we'll also
link to your gift hub

527
00:32:55.240 --> 00:32:59.320
and to your blog. Fantastic.
Well, thanks so much for

528
00:32:59.320 --> 00:33:01.870
taking the time to talk
to us about Nancy, the

529
00:33:01.870 --> 00:33:09.190
alternative Framework. This has been
another episode of Hanselminutes and

530
00:33:09.190 --> 00:33:10.420
we'll see you again next
week.

