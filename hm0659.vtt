WEBVTT FILE

1
00:00:00.300 --> 00:00:03.780
First a word about net
app net app gives developers

2
00:00:03.780 --> 00:00:07.380
common tools across to any
environment and any cloud. If

3
00:00:07.380 --> 00:00:09.780
you have a cloud first
mandate for your new application,

4
00:00:09.810 --> 00:00:11.850
then you need to know
about the new Microsoft service

5
00:00:11.850 --> 00:00:15.690
for the Azure portal built
by net app Azure net

6
00:00:15.690 --> 00:00:18.030
app files is the only
Azure offering that lets you

7
00:00:18.030 --> 00:00:22.230
build your Linux file share
environment in the cloud without

8
00:00:22.230 --> 00:00:25.290
needing a specialist to create
the environment for you. Take

9
00:00:25.290 --> 00:00:27.960
control of your world with
Azure net app files, to

10
00:00:27.960 --> 00:00:31.560
read more, including the blog
from solution architect, Steve Collins,

11
00:00:31.590 --> 00:00:38.430
go to blog.net app.com. That's
blog.net app.com and search for

12
00:00:38.430 --> 00:00:55.100
Azure net app files. <inaudible>
Some of this is another

13
00:00:55.100 --> 00:00:57.620
episode of Hansel minutes. And
today I'm talking with Kent

14
00:00:57.620 --> 00:01:00.350
Beck, he's an original signer
of the agile manifesto, the

15
00:01:00.350 --> 00:01:03.860
author of the whole extreme
programming book series and old

16
00:01:03.890 --> 00:01:06.110
great keynote speaker that I've
seen all over. Thanks for

17
00:01:06.110 --> 00:01:08.660
chatting with me, sir. Oh,
thank you very much, Scott.

18
00:01:08.660 --> 00:01:11.090
It's a pleasure to be
here. So you've been around

19
00:01:11.090 --> 00:01:13.490
in software for a long
time and I first learned

20
00:01:13.490 --> 00:01:17.180
about you and I was
applying extreme programming concepts to

21
00:01:17.300 --> 00:01:21.500
banking like 20 years ago,
but you're still, you're still

22
00:01:21.500 --> 00:01:23.930
keeping it fresh. You're coming
up with new ways to

23
00:01:23.930 --> 00:01:27.020
think about software because you're
actually still building software, right?

24
00:01:27.050 --> 00:01:30.020
You're not just talking about
it. Know I do as

25
00:01:30.020 --> 00:01:33.140
much of it as I
can. I spend a fair

26
00:01:33.140 --> 00:01:35.690
amount of my time talking
to people who are doing

27
00:01:35.690 --> 00:01:39.470
it, but yeah, the, the,
I don't figure I've had

28
00:01:39.470 --> 00:01:44.420
my last idea yet. I
appreciate that. I find that

29
00:01:44.420 --> 00:01:48.170
when I talk to companies
that even though it's 2018

30
00:01:48.170 --> 00:01:51.500
and I've been thinking about,
and applying the concepts that,

31
00:01:51.740 --> 00:01:55.190
that you introduced for almost
20 years, that's still people

32
00:01:55.190 --> 00:02:01.010
aren't convinced that being agile,
iterating, doing small commits, like

33
00:02:01.040 --> 00:02:04.070
all the stuff we take
for granted, they're still debating

34
00:02:04.700 --> 00:02:09.260
in the middle part of
the 21st. Yeah. It's a

35
00:02:09.260 --> 00:02:13.580
surprise to me. And there's
even a revival of the

36
00:02:13.580 --> 00:02:18.140
waterfall, which, which really shocked
me. I thought we killed

37
00:02:18.140 --> 00:02:20.480
that monster once and for
all, but it turns out

38
00:02:20.480 --> 00:02:24.620
that even smart people are
seduced by the idea that

39
00:02:24.620 --> 00:02:27.380
you just have to figure
out exactly what you're going

40
00:02:27.380 --> 00:02:30.140
to do and then go
do it. And then you're

41
00:02:30.140 --> 00:02:33.920
done and all it still
doesn't work for all those

42
00:02:33.920 --> 00:02:38.180
same reasons. It didn't work
before. But the, the, the

43
00:02:38.180 --> 00:02:42.740
attractiveness of that as a
model is hasn't, hasn't waned

44
00:02:43.160 --> 00:02:45.110
in the fact that it
doesn't work. Doesn't seem to

45
00:02:45.110 --> 00:02:49.010
affect that. It seems like
as we are noticing in

46
00:02:49.010 --> 00:02:50.750
the world right now that
a lot of things are

47
00:02:50.750 --> 00:02:53.930
driven by fear that a
lot of things in software

48
00:02:54.080 --> 00:02:57.080
are driven by fear of
the system, right? Like the

49
00:02:57.080 --> 00:03:00.430
whole dev ops movement is
just don't anger. The machine

50
00:03:00.430 --> 00:03:03.100
like don't bother it. Like
it works. So we should

51
00:03:03.100 --> 00:03:05.740
put together systems by which
we could fear our software

52
00:03:05.740 --> 00:03:10.500
less. Well, that's a, a
fairly negative way to put

53
00:03:10.500 --> 00:03:14.100
it. I would say something
like a dev ops is

54
00:03:14.100 --> 00:03:19.080
aligning authority and responsibility. If
you can break it, then

55
00:03:19.080 --> 00:03:21.060
you need to be the
one who fixes it. I

56
00:03:21.060 --> 00:03:25.200
like that. So empowering everyone.
Yes. And certainly part of

57
00:03:25.200 --> 00:03:29.250
that is the reduction of,
of fear. I maybe 10

58
00:03:29.250 --> 00:03:32.370
years back, I figured out,
I looked back over my

59
00:03:32.370 --> 00:03:35.280
career to what does all
this add up to? And

60
00:03:35.280 --> 00:03:38.640
I realized that my personal
mission is to help geeks

61
00:03:38.880 --> 00:03:42.990
feel safe in the world.
Part of that is actually

62
00:03:42.990 --> 00:03:47.430
being safe. That is to
say, not making changes to

63
00:03:47.430 --> 00:03:52.680
software that disrupts other people's
lives. And that seems to

64
00:03:52.680 --> 00:03:56.130
be a challenge. But there
are, as you said that

65
00:03:56.160 --> 00:03:59.250
you, you listed the techniques
that, that go a long

66
00:03:59.250 --> 00:04:02.790
way toward reducing the probability
that you're going to make.

67
00:04:02.790 --> 00:04:05.400
One of those errors. I
liked that I liked the

68
00:04:05.400 --> 00:04:07.950
way that you flipped, what
was a negative way of

69
00:04:07.950 --> 00:04:11.090
looking at something fear-based and
turning it into a, a

70
00:04:11.100 --> 00:04:14.310
good feeling of one of
safety and comfort. Yeah, it's

71
00:04:14.310 --> 00:04:17.340
a habit. A habit of
mine didn't come naturally at

72
00:04:17.340 --> 00:04:20.910
first, but I've been practicing
that for, for some time.

73
00:04:22.260 --> 00:04:25.110
And as you're coming up
with these different ways to

74
00:04:25.110 --> 00:04:27.180
think about programming and different
things, ways to think about

75
00:04:27.180 --> 00:04:30.630
workflow, you've got this great
article up on medium called

76
00:04:30.660 --> 00:04:34.260
test and commit that then
became test commit or revert.

77
00:04:34.620 --> 00:04:38.820
What's the story there? Well,
for some time now I've

78
00:04:39.900 --> 00:04:45.330
worked where the, if my
tests pass, then I want

79
00:04:45.330 --> 00:04:49.050
to make a commit because
the, the sunk cost fallacy

80
00:04:49.120 --> 00:04:52.530
is, is the programmers. I'm
not going to say worst

81
00:04:52.530 --> 00:04:55.850
nightmare, but it's definitely in
the top 10 where you'll

82
00:04:56.010 --> 00:04:58.740
you'll make a change and
it doesn't work. So you'll

83
00:04:58.740 --> 00:05:01.680
make another change and it
still doesn't work. And the

84
00:05:01.680 --> 00:05:05.250
more changes you make, the
greater, the investment you've you've

85
00:05:05.250 --> 00:05:10.590
made in this initial false
change you made. And so

86
00:05:10.590 --> 00:05:15.960
you can go days, weeks,
sometimes an entire career following

87
00:05:15.960 --> 00:05:18.630
up on that initial mistake.
So I want to make

88
00:05:18.630 --> 00:05:21.420
it really cheap to get
back to a known state,

89
00:05:21.720 --> 00:05:25.230
to fight against that sunk
cost fallacy. So every time

90
00:05:25.230 --> 00:05:28.560
the tests pass, I want
to make a commit. So

91
00:05:28.860 --> 00:05:33.270
if there's ever a problem
and I feel myself, the

92
00:05:33.270 --> 00:05:38.220
swirling down that drain, I
can just revert to that

93
00:05:38.220 --> 00:05:41.340
last known green state. And
then I can move moving

94
00:05:41.340 --> 00:05:44.610
forward again. So I was
showing this to a group

95
00:05:44.640 --> 00:05:50.310
in, in Norway, maybe a
month, a month and a

96
00:05:50.310 --> 00:05:54.000
half ago. And odd man
stroma was one of the

97
00:05:54.000 --> 00:05:57.710
students. He said, well, by
symmetry and I'm sucker for

98
00:05:57.710 --> 00:06:00.440
symmetry. He said, by symmetry,
if you commit, when the

99
00:06:00.440 --> 00:06:04.160
tests pass, you should just
revert your changes. If the

100
00:06:04.160 --> 00:06:07.190
tests fail. Now, I thought
that is a stupid idea.

101
00:06:07.190 --> 00:06:11.830
This I'm an eight because
just gonna make some little

102
00:06:11.830 --> 00:06:14.590
mistake and all the code
that I typed is just

103
00:06:14.590 --> 00:06:18.040
going to disappear and that
it would be horrible. So

104
00:06:18.070 --> 00:06:20.920
I hate this idea so
much. I need to try

105
00:06:20.920 --> 00:06:24.790
it. If, you know, if
you, if you only try

106
00:06:24.850 --> 00:06:30.400
good ideas, you end up
not making much progress. If

107
00:06:30.400 --> 00:06:33.610
you, if you find a
bad idea that's cheap to

108
00:06:33.610 --> 00:06:36.610
experiment with and it works
out, then you've got an

109
00:06:36.610 --> 00:06:39.760
awesome idea. Cause, cause nobody's
stupid enough to compete with

110
00:06:39.760 --> 00:06:42.550
you. So this was one,
definitely one of those. So

111
00:06:42.550 --> 00:06:45.760
we gave it a shot
for a week and discovered

112
00:06:45.760 --> 00:06:49.390
yes, there is an, an
annoying moment. When you think

113
00:06:49.390 --> 00:06:52.180
you've made a brilliant change
to your code and then

114
00:06:52.210 --> 00:06:57.340
poof, it all disappears. But
w what this test commit

115
00:06:57.430 --> 00:07:02.950
revert workflow does is the
tests are always green and

116
00:07:03.310 --> 00:07:07.210
the incentives are to make
smaller changes. So if I

117
00:07:07.210 --> 00:07:10.840
need to change two things,
I write a new test.

118
00:07:11.080 --> 00:07:13.300
I need to change two
things in order to get

119
00:07:13.300 --> 00:07:16.240
that test to pass. I
have a strong incentive to

120
00:07:16.240 --> 00:07:21.100
figure out some way to
make one change first in

121
00:07:21.100 --> 00:07:24.910
a stable way. And then
another change afterwards, also in

122
00:07:24.910 --> 00:07:29.380
a stable way. So TCR
this test commit revert workflow

123
00:07:29.920 --> 00:07:35.740
pushes me to make many
more, many smaller changes. Does

124
00:07:35.740 --> 00:07:38.200
it push you to make
even more, more tests than

125
00:07:38.200 --> 00:07:42.310
you might ordinarily? I wouldn't
say more tests. I think

126
00:07:42.880 --> 00:07:46.180
I haven't noticed that kind
of effect. The, the main

127
00:07:46.180 --> 00:07:51.730
effect is, is, is just
if I'm going to, if

128
00:07:51.730 --> 00:07:55.000
I'm going to make a
substantial change, like three whole

129
00:07:55.000 --> 00:07:58.210
lines of code at once,
I really want to find

130
00:07:58.210 --> 00:08:01.630
some way to change two
of those lines first. And

131
00:08:01.630 --> 00:08:04.240
then one line after that.
Because if I, if I

132
00:08:04.240 --> 00:08:06.700
type in three whole lines
of code and it doesn't

133
00:08:06.700 --> 00:08:10.600
pass, then poof, they disappear
and I have to figure

134
00:08:10.600 --> 00:08:13.120
out what went wrong and
type them in again. And

135
00:08:13.120 --> 00:08:16.540
I don't like that. So
I wanna, I'm gonna press

136
00:08:16.540 --> 00:08:21.220
myself really hard. And the
surprising thing is it feels

137
00:08:21.220 --> 00:08:26.110
so good solving that puzzle
that not just what should

138
00:08:26.110 --> 00:08:29.170
the code look like, but
how am I gonna get

139
00:08:29.170 --> 00:08:34.930
to that code in small,
safe steps that the light

140
00:08:34.930 --> 00:08:38.080
bulb, where you say, Oh,
I see I changed the

141
00:08:38.080 --> 00:08:41.020
third line first. And then
I changed the first two

142
00:08:41.020 --> 00:08:45.160
lines that that's a great
feeling. And I think a

143
00:08:45.160 --> 00:08:49.420
lot of programmers are driven
by that feeling when there's

144
00:08:49.660 --> 00:08:52.780
some pattern you're looking for
and you find it in

145
00:08:52.780 --> 00:08:57.640
there just feels fantastic. Interesting.
Getting back a little bit

146
00:08:57.640 --> 00:08:59.640
bit at the beginning, when
you said the sunk cost

147
00:08:59.640 --> 00:09:02.430
fallacy, like people have this
idea that they don't want

148
00:09:02.430 --> 00:09:05.400
to waste resources. They don't
want to waste code. They

149
00:09:05.400 --> 00:09:08.820
don't want to waste work.
It's, it's fundamentally loss, aversion.

150
00:09:08.820 --> 00:09:11.580
I don't want to work
for an hour. And you're

151
00:09:11.580 --> 00:09:13.710
saying I shouldn't work for
an hour. I should work

152
00:09:13.710 --> 00:09:16.500
for minutes, or I should
think a lot harder a

153
00:09:16.500 --> 00:09:20.390
second, Steven. Yes. And so
the, the thought goes into

154
00:09:20.390 --> 00:09:24.500
the sequencing of the changes
in a safe way. There's

155
00:09:24.500 --> 00:09:28.280
a greater expense to every
step that you take, but

156
00:09:28.280 --> 00:09:31.970
there's a lower probability that
you're going to do a

157
00:09:31.970 --> 00:09:34.610
bunch of work and have
to throw it away. And

158
00:09:34.640 --> 00:09:37.310
depending on how that trade
off comes out, that that

159
00:09:37.310 --> 00:09:40.520
will, or won't pay off.
I wonder if I would

160
00:09:40.520 --> 00:09:42.980
find myself in a kind
of an analysis paralysis. If

161
00:09:42.980 --> 00:09:44.570
I continue this all the
way through, it's kind of

162
00:09:44.570 --> 00:09:48.230
like ridiculous, extreme, or We
should just try it out

163
00:09:48.230 --> 00:09:52.610
for a little while. Just
we'll find some toy project.

164
00:09:52.640 --> 00:09:55.040
I don't know that this
isn't a challenge to you,

165
00:09:55.040 --> 00:09:57.170
but I hate the idea.
I'm going to have to

166
00:09:57.170 --> 00:09:59.510
try it if it's an
offer. And if you'd like,

167
00:09:59.860 --> 00:10:02.870
like we could do a
screen cast, share a screen

168
00:10:03.860 --> 00:10:06.260
program in this way for
an hour and just see

169
00:10:06.260 --> 00:10:08.420
how it feels. That's a
great idea. In fact, I

170
00:10:08.420 --> 00:10:11.900
do things like this fun
experiments with real software using

171
00:10:11.900 --> 00:10:15.920
the website that this podcast
is based on, which has

172
00:10:16.220 --> 00:10:18.980
some tests, both regular unit
tests and all the way

173
00:10:18.980 --> 00:10:21.320
up to selenium tests as
well. So there's a bit

174
00:10:21.320 --> 00:10:25.400
of a, of a net
there as well. Yeah. Nice.

175
00:10:26.240 --> 00:10:30.650
Okay. So test and commit
or revert. And how does

176
00:10:30.710 --> 00:10:34.520
TDD relate to TCR? Is
this an a, is this

177
00:10:34.520 --> 00:10:38.690
a, an evolution? Is this
a partner? Well, this has

178
00:10:38.690 --> 00:10:41.180
been a, there's been a
bit of a kerfuffle on,

179
00:10:41.320 --> 00:10:45.920
on Twitter lately about is
this just TDD or something,

180
00:10:46.280 --> 00:10:51.440
something quite different. And people
seem to be quite upset

181
00:10:51.440 --> 00:10:57.140
about it. And I call
it an alternative workflow in

182
00:10:57.140 --> 00:11:00.740
the same way that test
after is another alternative workflow.

183
00:11:01.670 --> 00:11:04.070
You can write a bunch
of code and then write

184
00:11:04.070 --> 00:11:07.670
tests to cover it in
bits and pieces. You can

185
00:11:07.670 --> 00:11:11.930
write the tests one at
a time interleaved with the

186
00:11:11.990 --> 00:11:16.400
implementation that's TDD, or you
can work in this TCR

187
00:11:16.400 --> 00:11:21.800
style where the tests are
always green and you work

188
00:11:21.800 --> 00:11:24.740
hard to keep that true,
because if they're ever not

189
00:11:24.740 --> 00:11:28.700
green, you're do whatever changes
you made are just going

190
00:11:28.700 --> 00:11:32.930
in a bit Bitbucket. I
call it an alternative workflow.

191
00:11:33.290 --> 00:11:38.210
The incentives absolutely change from
TDD. The way that I'm

192
00:11:38.210 --> 00:11:42.410
pushed to think in a
different direction, in the same

193
00:11:42.410 --> 00:11:44.660
way, that the way I'm
pushed to think when I'm

194
00:11:44.660 --> 00:11:48.620
working TDD is that those
incentives are different than the

195
00:11:48.620 --> 00:11:51.710
incentives. If I'm going to
test after Interesting, this makes

196
00:11:51.710 --> 00:11:54.520
me think about when, when
people around and argue about

197
00:11:55.120 --> 00:11:57.730
get workflows and someone says,
Oh, no, you use get

198
00:11:57.730 --> 00:12:00.010
flow. And like, no Linus
uses it this way. And

199
00:12:00.010 --> 00:12:02.470
they argue about all the
little details. The fact is

200
00:12:02.470 --> 00:12:04.300
that good is this platform
that we have, and you're

201
00:12:04.300 --> 00:12:07.600
welcome to put whatever workflow
that makes you happy and

202
00:12:07.600 --> 00:12:10.180
makes you feel productive and
makes you feel safe on

203
00:12:10.180 --> 00:12:12.430
top of that. But to
argue that there's one true

204
00:12:12.430 --> 00:12:16.700
workflow seems like a waste
of keystrokes. Yeah, absolutely. Well,

205
00:12:16.700 --> 00:12:20.190
one of the, one of
the criticisms of TCR is

206
00:12:20.190 --> 00:12:24.120
that if you use get
as your version control system,

207
00:12:24.420 --> 00:12:27.660
your commits look very, very
different than the commits that

208
00:12:27.660 --> 00:12:30.570
you would, right? If you
were in a TDD style

209
00:12:30.570 --> 00:12:34.500
or a test after style,
you have these many, many

210
00:12:34.500 --> 00:12:39.150
teensy weensy commits. I did
the first public workshop on

211
00:12:39.150 --> 00:12:42.720
TCR last night in San
Francisco. And we had a

212
00:12:42.720 --> 00:12:47.250
little toy problem just to
Fibonacci. And the, I think

213
00:12:47.250 --> 00:12:52.920
the most commits someone had
was 25 commits to write

214
00:12:54.080 --> 00:12:59.040
maybe 12 lines of code
and tests. So that's, those

215
00:12:59.040 --> 00:13:01.620
commits are gonna look, look
very different. It doesn't mean

216
00:13:01.620 --> 00:13:05.010
it's a, I would call
it even a little bit

217
00:13:05.010 --> 00:13:07.860
of an abusive get to
do that, but because you're

218
00:13:07.860 --> 00:13:10.590
using it in a style
that it's not really intended,

219
00:13:11.160 --> 00:13:13.950
but it works just fine
for it. But you you're

220
00:13:13.950 --> 00:13:16.890
just going to end up
with a difference set of

221
00:13:16.890 --> 00:13:20.310
commits than you would. If,
if you worked with a

222
00:13:20.310 --> 00:13:23.760
different workflow that has different
incentives, It wasn't the whole

223
00:13:23.760 --> 00:13:26.220
argument that we can squash
commits and pretend that none

224
00:13:26.220 --> 00:13:29.130
of that ever happened. Well,
you can't, you, you absolutely

225
00:13:29.130 --> 00:13:32.880
can squash to mince. The
next extension of this idea

226
00:13:32.880 --> 00:13:37.080
is a something I call
limbo, where if you have

227
00:13:37.080 --> 00:13:39.990
a bunch of people working
on the same code base,

228
00:13:40.080 --> 00:13:45.240
and they're working in this
always green TCR style, and

229
00:13:45.240 --> 00:13:50.220
they're constantly pushing their changes
and then pulling the changes

230
00:13:50.220 --> 00:13:54.240
other people have made, you're
going to have a interleaved

231
00:13:54.240 --> 00:13:58.860
sets of these tsetse tiny
changes. And then the get

232
00:13:58.860 --> 00:14:02.730
commenced don't look anything like
what they look in a,

233
00:14:02.790 --> 00:14:06.900
in a code review merge
kind of style, even, even

234
00:14:06.900 --> 00:14:11.340
with a, even without branches.
But to me, that's not

235
00:14:11.340 --> 00:14:13.800
a criticism. It just said,
Oh, this was a natural

236
00:14:13.800 --> 00:14:16.650
consequence of change. You change
the incentives, you get different

237
00:14:16.650 --> 00:14:20.250
results. All right. Well, yes.
The gamification of work and

238
00:14:20.250 --> 00:14:24.180
programming itself. Yes. So then
you want the diffs to

239
00:14:24.180 --> 00:14:27.870
be as small as possible
to presumably remove friction around

240
00:14:27.900 --> 00:14:30.420
the things that are all
implied. Once someone makes a

241
00:14:30.420 --> 00:14:33.840
diff because like, I've got
two poll requests right now,

242
00:14:33.840 --> 00:14:36.780
one's a spelling mistake. And
one is a completely new

243
00:14:36.780 --> 00:14:40.380
feature, but they both require
reviews and approvals and workflow.

244
00:14:40.980 --> 00:14:44.460
Right? What I noticed, I
was at Facebook for seven

245
00:14:44.460 --> 00:14:48.810
years until early this year.
And I watched the team,

246
00:14:48.840 --> 00:14:52.760
the engineering team grow from
seven to 5,000 people. And

247
00:14:52.760 --> 00:14:55.370
I posed myself the question,
what would it take to

248
00:14:55.370 --> 00:14:59.120
go to the next order
of magnitude of engineers? I

249
00:14:59.300 --> 00:15:03.950
looked at all of the
overhead created by this asynchronous

250
00:15:03.950 --> 00:15:07.730
blocking code review style, this
pull requests style. And I,

251
00:15:08.060 --> 00:15:11.660
I just don't see the
overhead of that grows as

252
00:15:11.660 --> 00:15:14.960
the team size grows. And
I don't see how that

253
00:15:14.960 --> 00:15:18.560
works at the same time.
Everybody acknowledges that small diffs

254
00:15:18.560 --> 00:15:21.770
are better. So that's where
the, the, the name limbo

255
00:15:21.770 --> 00:15:25.220
comes from a friend of
mine. A Sourav Patrick came

256
00:15:25.220 --> 00:15:27.920
up with that name because
the limbo song X asks

257
00:15:27.920 --> 00:15:31.160
you, how low can you
go? How small could we

258
00:15:31.160 --> 00:15:35.330
make diffs? If you can
make diffs, TT, tiny and

259
00:15:35.330 --> 00:15:40.730
safe, then you don't have
to review them beforehand. Doesn't

260
00:15:40.730 --> 00:15:42.740
mean they don't get reviewed,
but you don't have to,

261
00:15:42.920 --> 00:15:46.220
it doesn't have to be
a blocker to those diffs

262
00:15:46.220 --> 00:15:50.390
being applied in other developer
machines. And for that matter

263
00:15:50.390 --> 00:15:53.780
in production, if they're, if
they're truly safe, if you

264
00:15:53.780 --> 00:15:57.650
can do that, then you
open up a brave new

265
00:15:57.650 --> 00:16:01.790
style of software collaboration, where
everybody's making a stream of

266
00:16:01.790 --> 00:16:05.170
TNC, tiny DIFs. Doesn't that
mean that theoretically, if something

267
00:16:05.170 --> 00:16:07.570
did go wrong, there would
be, you'd spend a lot

268
00:16:07.570 --> 00:16:09.970
more time kind of figuring
out like playing whack-a-mole with

269
00:16:09.970 --> 00:16:11.530
all of these disks, trying
to figure out which one

270
00:16:11.530 --> 00:16:16.000
broke the system. Yeah. Potentially
as with all the really

271
00:16:16.000 --> 00:16:20.620
powerful ideas, this is clearly
an impractical and impossible to

272
00:16:20.620 --> 00:16:25.030
do, except if you can
make it practical, then it

273
00:16:25.030 --> 00:16:27.790
becomes really interesting. Well, that's
the thing, right? Like it's

274
00:16:27.790 --> 00:16:30.010
a totally insane idea until
it's like, wow, that's a

275
00:16:30.010 --> 00:16:31.420
really great idea. We should
all be doing that right

276
00:16:31.420 --> 00:16:34.780
away. Yes. Yes. And then
it takes them 20 or

277
00:16:34.780 --> 00:16:38.350
30 years for people to
actually apply it. Right. Interesting.

278
00:16:38.350 --> 00:16:40.780
I, you know, there there's,
there's people try to impose

279
00:16:40.780 --> 00:16:44.380
flows, whether they be on
large teams or just myself,

280
00:16:44.380 --> 00:16:47.710
where if someone says I
do pull requests to myself

281
00:16:48.040 --> 00:16:50.950
and everyone should do pull
request to myself, well, I

282
00:16:50.950 --> 00:16:54.040
don't know about you, but
I personally sometimes just say,

283
00:16:54.070 --> 00:16:56.110
Oh, I'm going to fix
that. I'll commit it directly

284
00:16:56.110 --> 00:16:59.080
to master my test pass,
boom, I'll publish it right

285
00:16:59.080 --> 00:17:01.000
away. And I'll, it's in
production. And you know, if

286
00:17:01.000 --> 00:17:03.430
something went wrong, I'll hit
the Oh crap button and

287
00:17:03.430 --> 00:17:05.110
I'll revert it. As soon
as I noticed something went

288
00:17:05.110 --> 00:17:07.630
wrong and I don't feel
bad about that. No, I

289
00:17:07.630 --> 00:17:11.440
don't. Nor do I, life
is, life is too short.

290
00:17:11.500 --> 00:17:15.250
You know, it's human life
is, is now somewhere in

291
00:17:15.250 --> 00:17:19.060
the region of 3 billion seconds
is 92 years. So I've

292
00:17:19.060 --> 00:17:22.300
already spent two thirds of
mine. And I don't have

293
00:17:22.300 --> 00:17:26.230
time to mess around with,
with overhead that doesn't create

294
00:17:26.230 --> 00:17:30.310
value. So You think that
someone should sort of apply

295
00:17:30.310 --> 00:17:32.320
this? You said like the
small things, you, you did

296
00:17:32.320 --> 00:17:34.870
the test commit, revert as
a, you know, pick up

297
00:17:34.870 --> 00:17:38.320
small project. It can't hurt
to try. Right? Right. You

298
00:17:38.320 --> 00:17:42.360
think limbo is still too,
too out there to support

299
00:17:42.360 --> 00:17:45.280
someone to apply to a
large, I think it would

300
00:17:45.280 --> 00:17:50.550
take work and a certain
amount of a appetite for

301
00:17:50.550 --> 00:17:54.900
chaos. You're going to be
encountering problems. You've never encountered

302
00:17:54.900 --> 00:17:58.110
before. And when they show
up, you're going to need

303
00:17:58.590 --> 00:18:02.430
to first become aware of
the problem and then to

304
00:18:02.430 --> 00:18:05.400
be prepared, to take a
step back and, and solve

305
00:18:05.400 --> 00:18:07.920
the problem at its root
cause instead of just trying

306
00:18:07.920 --> 00:18:11.850
to patch over it. But
given the experiments that I've

307
00:18:11.850 --> 00:18:15.720
done, I think that it's,
it's an idea that could

308
00:18:15.720 --> 00:18:18.840
be applied immediately. If somebody
wanted to, to give it

309
00:18:18.840 --> 00:18:21.950
a shot, Hey friends, if
you're like me and you

310
00:18:21.950 --> 00:18:25.100
love your Nintendo switch, you
know, for, at home or

311
00:18:25.100 --> 00:18:28.310
on the go gaming Angela
podcasts, which I assume you

312
00:18:28.310 --> 00:18:30.860
do, because you're listening to
this one right now that

313
00:18:30.950 --> 00:18:33.980
I have a podcast recommendation
for you. Check it out.

314
00:18:33.980 --> 00:18:38.000
It's Nintendo dispatch. Nintendo dispatch
is by my good friend,

315
00:18:38.000 --> 00:18:41.360
James Monte Magno and his
longtime friend, Michael, there are

316
00:18:41.360 --> 00:18:45.650
two complete Nintendo fan boys.
Now each week, James and

317
00:18:45.650 --> 00:18:48.470
Michael, they break down the
latest Nintendo news. The latest

318
00:18:48.470 --> 00:18:51.680
game releases the happenings, the
reviews in the world of

319
00:18:51.680 --> 00:18:56.060
Nintendo. They review everything that
they've been playing to subscribe.

320
00:18:56.090 --> 00:18:59.870
Please go search for Nintendo
dispatch in your podcast app,

321
00:19:00.200 --> 00:19:04.520
or go directly to Nintendo
dispatch.com. I love supporting other

322
00:19:04.520 --> 00:19:07.370
podcasts. And I would really
encourage you to go and

323
00:19:07.370 --> 00:19:11.480
support Nintendo dispatch.com and maybe
tweet about it. What do

324
00:19:11.480 --> 00:19:14.180
you think that if we
think about what we very

325
00:19:14.180 --> 00:19:16.850
first started the opening of
this show, that there are

326
00:19:16.850 --> 00:19:20.720
people in 2018 that are
still not sold on what

327
00:19:20.720 --> 00:19:24.380
we think our ideas two
decades in the, in the

328
00:19:24.380 --> 00:19:29.570
baking, what should they do
when we're, they're all thinking

329
00:19:29.570 --> 00:19:32.600
about maybe TDD and we're
off looking at TCR in

330
00:19:32.600 --> 00:19:35.720
limbo and beyond. Should they
just jump over it all?

331
00:19:35.720 --> 00:19:37.790
Or do they have to
go in the linear vector

332
00:19:37.790 --> 00:19:42.470
and follow us behind What
a great question. So one

333
00:19:43.340 --> 00:19:45.140
question like this, I'm going
to have to fall back

334
00:19:45.140 --> 00:19:49.340
on first principles. So one
of my principles is that

335
00:19:49.390 --> 00:19:54.470
everybody's responsible for their own
learning. So if somebody came

336
00:19:54.470 --> 00:19:56.840
to me and said, what
should I do? I'd say,

337
00:19:56.840 --> 00:20:00.830
you're, you're going to have
to manage this first. Is

338
00:20:00.830 --> 00:20:04.460
there a problem like maybe,
maybe working in the style

339
00:20:04.460 --> 00:20:07.430
you're working now is just
fine for you just find

340
00:20:07.430 --> 00:20:11.480
for your colleagues, just find
for your company. And you're

341
00:20:11.480 --> 00:20:13.850
not one of these crazy
people who needs to try

342
00:20:13.850 --> 00:20:16.220
the latest and greatest thing.
In which case don't do

343
00:20:16.220 --> 00:20:19.640
anything about it. You know,
like it's not a problem.

344
00:20:19.640 --> 00:20:22.880
Don't solve it, given that
you want to try it

345
00:20:22.880 --> 00:20:26.810
out. I think there are
some steps that consistently helped

346
00:20:26.810 --> 00:20:31.010
me being in, in as
part of a community is

347
00:20:31.010 --> 00:20:35.660
helpful. Teaching other people is
always helpful with, with new

348
00:20:35.660 --> 00:20:39.080
skills. The only way to
get good at describing an

349
00:20:39.080 --> 00:20:42.860
idea is to be bad
at describing the idea first.

350
00:20:42.860 --> 00:20:48.040
And you just go through
those iterations with a forgiving

351
00:20:48.040 --> 00:20:52.690
audience and eventually your presentation
of it will get much,

352
00:20:52.690 --> 00:20:58.150
much smoother. The first time
I described TCR took me

353
00:20:58.600 --> 00:21:01.420
an hour. I can give
you the same information now

354
00:21:01.420 --> 00:21:03.700
in 10 minutes, but there
was no way to predict

355
00:21:03.700 --> 00:21:06.070
which parts of that hour
were useful in which parts

356
00:21:06.070 --> 00:21:10.030
weren't until it actually tried.
It looked at the, my

357
00:21:10.030 --> 00:21:13.900
listener in the, I saw
where they glazed over, saw

358
00:21:13.900 --> 00:21:17.890
where I was just wrong,
figured out which stories are

359
00:21:17.890 --> 00:21:21.310
going to be helpful for
people. When's the right time

360
00:21:21.310 --> 00:21:24.790
to jump into that example
and just show them what

361
00:21:24.790 --> 00:21:27.940
to do. So different people
are going to learn that

362
00:21:27.940 --> 00:21:34.030
in different ways, but community
and teaching and just diving

363
00:21:34.030 --> 00:21:36.610
in and doing some stuff.
But those are the, the

364
00:21:36.640 --> 00:21:40.650
strongest techniques that I know
to, to learn quickly. One

365
00:21:40.650 --> 00:21:42.810
of the things that I
find most interesting about all

366
00:21:42.810 --> 00:21:45.540
of this, whether it be
TCR, limbo and beyond is

367
00:21:45.540 --> 00:21:49.380
the, that fun question, you
know, but does it scale

368
00:21:51.120 --> 00:21:53.190
it's, we've all had that
experience where we had several

369
00:21:53.190 --> 00:21:56.490
hundred or several thousand, or
maybe even more tests and

370
00:21:56.490 --> 00:21:58.590
we change one thing, and
then we're looking at a

371
00:21:58.590 --> 00:22:01.740
screen full of red. And
then you start thinking about

372
00:22:01.740 --> 00:22:04.560
the Cartesian product of the
number of programmers, times the

373
00:22:04.560 --> 00:22:06.660
number of tests times the
number of failed builds. And

374
00:22:06.660 --> 00:22:10.230
it just gets overwhelming when
we break one test and

375
00:22:10.230 --> 00:22:12.930
how they're all dependent on
each other. It seems like

376
00:22:12.930 --> 00:22:15.960
once I get into a
couple of hundred tests, I'm

377
00:22:15.960 --> 00:22:19.200
looking at a list of
tests, but I'm wondering how

378
00:22:19.200 --> 00:22:22.620
they're interrelated and why one
went red and that caused

379
00:22:22.620 --> 00:22:25.680
another a hundred to go
red. Every time I've been

380
00:22:25.680 --> 00:22:29.070
in that situation, I didn't
really have a testing problem.

381
00:22:29.070 --> 00:22:32.250
I had a design problem.
There was, there was some

382
00:22:32.250 --> 00:22:36.330
part of the system that
wasn't pulled apart into sub

383
00:22:36.390 --> 00:22:40.290
elements in such a way
that I could easily compose

384
00:22:40.290 --> 00:22:42.780
the elements to get the,
to get the right answer.

385
00:22:42.780 --> 00:22:47.400
Instead, there was an assumption
that was spread around. I

386
00:22:47.400 --> 00:22:50.790
make one change that changes
that assumption. And if, if

387
00:22:50.790 --> 00:22:54.690
that assumption is embodied in
some way by many tests

388
00:22:55.140 --> 00:22:57.450
than, yeah, I'm going to
get a whole bunch of

389
00:22:57.450 --> 00:23:01.050
tests breaking, but that's, it's
not a testing problem. It's

390
00:23:01.050 --> 00:23:06.210
a design problem That is
really, really helpful. So then

391
00:23:06.210 --> 00:23:08.940
if I start bringing more
people into that system and

392
00:23:08.940 --> 00:23:12.030
they start making tiny changes,
they're all going to have

393
00:23:12.030 --> 00:23:14.040
that problem as well. I
need to solve that design

394
00:23:14.040 --> 00:23:17.250
problem before I go and
impose a new style of

395
00:23:17.250 --> 00:23:20.610
work, like limbo on, on
my, my team, Or you

396
00:23:20.610 --> 00:23:26.130
could use limbo to begin
making improvements together on the

397
00:23:26.130 --> 00:23:31.500
design. So I see there's
two, two barriers to doing

398
00:23:31.500 --> 00:23:34.950
a better job of designing
software. One is lack of

399
00:23:34.950 --> 00:23:40.380
skill or idea. So I've
had design problems in software

400
00:23:40.410 --> 00:23:44.520
that, that sit there for
a year. I mean, I

401
00:23:44.520 --> 00:23:47.810
think my, my record is
12 years where I just

402
00:23:47.810 --> 00:23:50.030
didn't like the way this
something was designed, but I

403
00:23:50.030 --> 00:23:53.060
just didn't know what else
to do. If that's the

404
00:23:53.060 --> 00:23:56.000
case, then you do have
to find a way of

405
00:23:56.000 --> 00:24:00.500
working productively with a design.
That's not as good as

406
00:24:00.500 --> 00:24:03.950
you wish it was. The
other part is that habit

407
00:24:03.950 --> 00:24:08.150
of rolling your chair back
and saying, this is changing.

408
00:24:08.150 --> 00:24:11.330
One more line of code
is not the most effective

409
00:24:11.330 --> 00:24:15.380
way to address this problem.
I need to say, why

410
00:24:15.380 --> 00:24:19.730
is this happening? What is
the design that would make

411
00:24:19.730 --> 00:24:23.870
this problem? Just go away
entirely. How can I get

412
00:24:23.870 --> 00:24:27.530
from where I am now
to that new design in

413
00:24:27.530 --> 00:24:31.640
small, safe steps that allows
me to continue delivering functionality

414
00:24:31.670 --> 00:24:34.670
all along the way. That's
a hard problem to solve

415
00:24:34.670 --> 00:24:37.550
this, a lot of constraints
and it can seem overwhelming,

416
00:24:38.630 --> 00:24:41.540
but at some point it's
better than the alternative of

417
00:24:41.540 --> 00:24:44.180
just writing another line of
code and another line of

418
00:24:44.180 --> 00:24:47.750
code and throwing in another
conditional and adding another case

419
00:24:47.750 --> 00:24:52.540
statement and making big messes
even bigger. Yeah. Interesting. You

420
00:24:52.540 --> 00:24:58.030
know, in, in animation they'll
draw key frames and then

421
00:24:58.030 --> 00:25:00.520
they would do a thing
called onion skinning, where they

422
00:25:00.520 --> 00:25:03.250
would, you know, do the
frame, the interpolation of the

423
00:25:03.250 --> 00:25:06.790
frames between the two frames.
And when you said that,

424
00:25:06.790 --> 00:25:08.890
you know, I'm, I'm in
a certain state, you know,

425
00:25:08.890 --> 00:25:11.980
state a and like my
software, my design is such

426
00:25:11.980 --> 00:25:14.980
that it's in this state
and then I can come

427
00:25:14.980 --> 00:25:17.050
up with one part of
the problem, which is all

428
00:25:17.050 --> 00:25:19.780
right. I know where I
need to go. The part

429
00:25:19.780 --> 00:25:22.300
that I just realized you
described it so difficult as

430
00:25:22.300 --> 00:25:24.550
the onion scanning, it's the,
okay, I've got two key

431
00:25:24.550 --> 00:25:26.890
frames. How do I get
from this frame to that

432
00:25:26.890 --> 00:25:29.980
frame and have it look
fluid and not hurt anyone

433
00:25:30.010 --> 00:25:33.730
and bother the viewer. Yeah.
And, and there is a

434
00:25:33.730 --> 00:25:36.520
skill to that, and it's
not a skill that we

435
00:25:36.520 --> 00:25:39.250
teach or that we study.
I call it the succession

436
00:25:39.250 --> 00:25:44.230
problem. What is the succession
of changes that lets us

437
00:25:44.230 --> 00:25:48.310
get from point a to
point B one with safety

438
00:25:49.090 --> 00:25:54.430
and secondarily as efficiently as
possible, the temptation is just

439
00:25:54.430 --> 00:26:00.100
start working on that the,
the, the second state, you

440
00:26:00.100 --> 00:26:03.130
know, and, and we've all
seen that little, well, we're,

441
00:26:03.150 --> 00:26:07.240
we'll replace the whole system.
And then you have Xenos

442
00:26:07.240 --> 00:26:11.250
project management paradox, where the
closer you get the, the

443
00:26:11.250 --> 00:26:15.670
more the, the target system
recedes and you never actually

444
00:26:15.670 --> 00:26:19.330
catch up. So that's the
one that's really hard to

445
00:26:19.330 --> 00:26:23.860
pull off compared to. All
right, well, what, what one

446
00:26:23.860 --> 00:26:26.320
thing can I do now?
That's a little bit more

447
00:26:26.320 --> 00:26:28.810
like where I want to
go than where I am

448
00:26:29.620 --> 00:26:32.830
and how can I use
the information gained and taking

449
00:26:32.830 --> 00:26:35.230
that step to take the
next step and the next

450
00:26:35.230 --> 00:26:37.780
step and the next step,
the result of that is

451
00:26:37.780 --> 00:26:40.570
going to be kind of
messy. You know, so you're

452
00:26:40.570 --> 00:26:43.740
going to be in this
awkward halfway in between where

453
00:26:43.740 --> 00:26:46.950
maybe you have the old
implementation and the new implementation

454
00:26:47.280 --> 00:26:51.420
coexisting at the same time,
but at least you're making

455
00:26:51.420 --> 00:26:54.360
progress towards a state that
you know, is going to

456
00:26:54.360 --> 00:26:57.810
be better. You can continue
delivering value as you do

457
00:26:57.810 --> 00:27:01.860
it. And you don't have
this risk that you think

458
00:27:01.860 --> 00:27:04.830
that you get to the
new state and discover it's

459
00:27:04.830 --> 00:27:09.200
not actually what you wanted.
I do talks on being

460
00:27:09.200 --> 00:27:12.080
a web developer where I
sit down and I theorize,

461
00:27:12.440 --> 00:27:15.500
what if I were going
to teach someone how to

462
00:27:15.500 --> 00:27:18.980
become a web developer today
with the explicit goal that

463
00:27:18.980 --> 00:27:22.580
we ignore the last 20
years and nested tables and

464
00:27:22.910 --> 00:27:24.920
one pixel gifts and all
the bad things about the

465
00:27:24.920 --> 00:27:28.130
web as it grew over
the last 20 years, how

466
00:27:28.130 --> 00:27:31.250
would you teach us, you
know, a 15 year old

467
00:27:31.440 --> 00:27:34.400
or a bunch of high
school students about how to

468
00:27:34.400 --> 00:27:39.590
make software today? Would you
ignore the history or would

469
00:27:39.590 --> 00:27:42.170
you spend a lot of
time giving them historical context?

470
00:27:43.550 --> 00:27:46.160
That's a, that's a good
question. I don't think I

471
00:27:46.160 --> 00:27:50.570
have any particular skill at
teaching beginners. Hmm. I think

472
00:27:51.620 --> 00:27:55.580
I spent much of my
career at Facebook coaching engineers

473
00:27:55.700 --> 00:27:58.970
at all levels from fairly
junior to some of the

474
00:27:58.970 --> 00:28:02.660
most senior engineers at Facebook.
And I think I have

475
00:28:02.660 --> 00:28:06.470
a decent handle on how
to help people who are

476
00:28:06.470 --> 00:28:10.700
engineers get better, but I
I'm, I'm not the person

477
00:28:10.700 --> 00:28:13.370
to walk into a room
full of 15 year olds

478
00:28:13.370 --> 00:28:17.060
and say, Oh, okay, let's
do hello world. Right. Well,

479
00:28:17.060 --> 00:28:19.400
the reason I ask is
that as I, as I

480
00:28:19.400 --> 00:28:22.070
enter the downhill, kind of
like I pass the hump

481
00:28:22.070 --> 00:28:25.190
of my career and going
down the other side, We

482
00:28:25.190 --> 00:28:27.560
call it the accelerating portion
of your career. Oh, is

483
00:28:27.560 --> 00:28:29.600
that what we call in
right directly into the grave?

484
00:28:32.020 --> 00:28:36.980
I'm applying that to that
positivity here, Scott downhill downhill

485
00:28:36.980 --> 00:28:43.040
sounds the negative to me
Is also a pretty negative

486
00:28:43.430 --> 00:28:47.480
Who doesn't want to accelerate
now that you're accelerating in

487
00:28:47.480 --> 00:28:50.540
the acceleration portion or your
careers. Okay. Okay. So now

488
00:28:50.540 --> 00:28:52.430
that I'm in that, in
the acceleration portion of my

489
00:28:52.430 --> 00:28:55.400
career and going back and
forth about whether or not

490
00:28:55.400 --> 00:28:58.550
I ignore history and try
to teach them fresh perspectives

491
00:28:58.550 --> 00:29:02.390
and modern techniques, or whether
or not, as they say,

492
00:29:02.390 --> 00:29:04.490
you know, those that fail
to learn history are doomed

493
00:29:04.490 --> 00:29:07.610
to repeat it because you
know that you and I

494
00:29:07.610 --> 00:29:10.550
will retire and someone will
go and invent, you know,

495
00:29:10.550 --> 00:29:15.530
extreme programming. Yeah. Oh, absolutely.
And the waterfall over in

496
00:29:15.770 --> 00:29:20.840
Oregon Or a Scrummerfall, which
is nice. Oh, ah, watch

497
00:29:20.840 --> 00:29:24.230
your mouth. That, yeah, it,
it is going to come

498
00:29:24.230 --> 00:29:28.220
around. I I'm old enough
to have, and I grew

499
00:29:28.220 --> 00:29:30.740
up in Silicon Valley and
my dad was a programmer.

500
00:29:30.740 --> 00:29:33.080
So I'm old enough to
have seen some of that

501
00:29:33.080 --> 00:29:38.240
history happen. I've always liked
knowing the whole stack from

502
00:29:38.240 --> 00:29:41.410
the instruction, set architecture all
the way up. I have

503
00:29:41.750 --> 00:29:48.160
a stack of microprocessor manuals
in my library, you know,

504
00:29:48.160 --> 00:29:50.410
and every once in a
while, I'll study a new

505
00:29:50.410 --> 00:29:54.580
one and, and be fascinated
and interested in it, even

506
00:29:54.580 --> 00:29:58.780
though that's not a really
like how often does actually

507
00:29:58.780 --> 00:30:02.440
useful, I've done, not so
much at the same time.

508
00:30:02.440 --> 00:30:06.640
I think so much of
learning is emotional engagement. So

509
00:30:06.640 --> 00:30:09.460
if you said, well, before
we can let you do,

510
00:30:09.490 --> 00:30:14.290
you know, web animations, first,
we have to study the

511
00:30:14.440 --> 00:30:17.410
x86 instruction set manual. You're
just going to lose a

512
00:30:17.410 --> 00:30:20.590
lot of people. So it
doesn't seem like that's going

513
00:30:20.590 --> 00:30:24.820
to be a very effective
strategy. Definitely. Well, thank you

514
00:30:24.820 --> 00:30:27.100
so much for spending time
with me today. I appreciate

515
00:30:27.100 --> 00:30:31.030
it. Oh, Scott, it's a,
I heard your voice for

516
00:30:31.030 --> 00:30:33.640
a, for many hours and
it's great to get a

517
00:30:33.640 --> 00:30:36.070
chance to actually talk to
you in person. That's very

518
00:30:36.070 --> 00:30:40.270
kind. So folks can check
out kentBeck@kentbeck.com and I'm going

519
00:30:40.270 --> 00:30:42.820
to include links to everything
that we talked about from

520
00:30:42.820 --> 00:30:45.690
Geno's paradox all the way
up, including test commit, revert

521
00:30:45.700 --> 00:30:48.010
in limbo on the cheap,
in the show notes. I

522
00:30:48.010 --> 00:30:51.010
encourage you to check those
out. This has been another

523
00:30:51.010 --> 00:31:11.080
episode of Hanselminutes and we'll
see you again. <inaudible>.

