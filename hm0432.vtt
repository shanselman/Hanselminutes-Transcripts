WEBVTT FILE

1
00:00:00.450 --> 00:00:03.810
Hey folks previously, I mentioned
code on the beach. That

2
00:00:03.810 --> 00:00:06.690
same group is hosting a
conference on a cruise ship

3
00:00:06.750 --> 00:00:09.210
code on the sea. It's
a five day cruise from

4
00:00:09.210 --> 00:00:13.500
Jacksonville, Florida to the Hamas
stopping in Nassau and half

5
00:00:13.500 --> 00:00:20.130
moon K from February 28th through
March 5th, 2015 are these sessions are

6
00:00:20.130 --> 00:00:22.440
going to be held on
sea days. So you'll have

7
00:00:22.530 --> 00:00:25.050
enough time with your family.
Plenty of time on the

8
00:00:25.050 --> 00:00:28.980
ship, explore The Bahamas through some
excursions, and then you'll get

9
00:00:28.980 --> 00:00:31.050
to soak in that warm
weather in early March. It's

10
00:00:31.200 --> 00:00:33.330
sounding better than spending the
week back home where it's

11
00:00:33.330 --> 00:00:38.250
cold speakers will include Eric Meyer,
Michael feathers, and Greg young.

12
00:00:38.550 --> 00:00:42.600
So check out code on
the c@codeontheseat.com and you can

13
00:00:42.600 --> 00:00:47.400
save $150 with coupon code
Hanselman. Now, again, that website

14
00:00:47.400 --> 00:01:06.290
is code on the c.com.
Check it out From hanselminutes.com.

15
00:01:06.980 --> 00:01:10.760
It's Hansel minutes, all weekly
discussion with web developer and

16
00:01:10.760 --> 00:01:15.590
technologist Scott Hanselman. This is
Lawrence Ryan announcing show number four

17
00:01:15.590 --> 00:01:20.420
32. In this episode, Scott
talks with David <inaudible> about

18
00:01:20.420 --> 00:01:27.230
learning web GL and making
3d HTML game. Hi, this

19
00:01:27.230 --> 00:01:29.450
is Scott Hanselman, and this
is another episode of Hansel

20
00:01:29.450 --> 00:01:31.700
minutes, and we're going to
be talking about web GL

21
00:01:32.060 --> 00:01:36.380
and the Babylon JS engine
with David Ketchu. How are

22
00:01:36.380 --> 00:01:39.260
you, sir? And fan, thank
you very much for inviting

23
00:01:39.260 --> 00:01:42.170
me. No, absolutely. My pleasure.
So I'm trying to get

24
00:01:42.170 --> 00:01:44.720
my head around all these
different API APIs. You know,

25
00:01:44.720 --> 00:01:47.270
it seems like in the
last few years, browsers have

26
00:01:47.630 --> 00:01:50.180
exploded and the number of
things that they can do

27
00:01:50.180 --> 00:01:54.080
from Gigio location and simple
API is like that to

28
00:01:54.080 --> 00:01:58.610
more deep API, like web
GL, would you consider web

29
00:01:58.610 --> 00:02:00.650
GL to be part of
what we say when we

30
00:02:00.650 --> 00:02:06.320
say HTML five? Absolutely. It's
broader than as to HTML

31
00:02:06.320 --> 00:02:10.010
five, but yeah, for the
sake of simplification, we can

32
00:02:10.010 --> 00:02:13.070
say that it's part of
his team. And when I

33
00:02:13.070 --> 00:02:19.220
go to the, can I
use website, can I use.com/web

34
00:02:19.220 --> 00:02:23.720
GL? It seems like a
while. There's not necessarily broad

35
00:02:23.720 --> 00:02:28.310
support, particularly around mobile, near
future. It is going to

36
00:02:28.310 --> 00:02:32.960
include iOS. That seems like
the beginning of the broad,

37
00:02:32.960 --> 00:02:37.790
broad adoption of web GL.
Absolutely. It started with Chrome

38
00:02:37.790 --> 00:02:40.670
and Firefox. And then I
E and right now we

39
00:02:40.670 --> 00:02:44.460
have web GL on windows
phone on almost all Android

40
00:02:44.480 --> 00:02:50.900
stuff and have the announcement
of Apple moving on to

41
00:02:50.900 --> 00:02:53.700
iOS. Yes, we can say
that right now. We have

42
00:02:53.840 --> 00:02:58.700
powerful tools to do three
D almost everywhere. When, when

43
00:02:58.700 --> 00:03:02.530
someone thinking about canvas, when
someone makes a canvas and

44
00:03:02.530 --> 00:03:07.240
just wants to draw a
circle, this would be 2d.

45
00:03:07.270 --> 00:03:10.290
They would do this just
with the canvas API. Yeah,

46
00:03:10.290 --> 00:03:13.740
I think so. We have
some good frameworks around there,

47
00:03:13.740 --> 00:03:17.880
like created JS, which also
use where did she ever

48
00:03:17.910 --> 00:03:21.900
as a tool for accelerate
too deep, but you can

49
00:03:21.910 --> 00:03:24.330
do that directly using the
canvas and it tweaked be

50
00:03:25.110 --> 00:03:28.620
in a way accelerated by
the browser you can use

51
00:03:28.620 --> 00:03:32.010
to the office. Okay. And
this, this idea of what's

52
00:03:32.010 --> 00:03:34.740
Excelerate, and what's not, it's
becoming a big, a big

53
00:03:34.740 --> 00:03:38.850
discussion. I had a chat
with Christian Heilmann recently where

54
00:03:38.850 --> 00:03:42.180
he talked about the differences
between doing animations in CSS

55
00:03:42.180 --> 00:03:46.590
three and doing them in
jQuery and how dramatic there's

56
00:03:46.590 --> 00:03:50.070
dramatic improvements when you use
an API that the browser

57
00:03:50.430 --> 00:03:52.920
is aware of at a
hardware level and can then

58
00:03:52.920 --> 00:03:55.230
say, Oh, I can use
the GPU. I can use

59
00:03:55.230 --> 00:03:59.370
the, the graphics card for
this. Yeah, absolutely. And it's

60
00:03:59.370 --> 00:04:02.850
a real challenge for web
developers today. I hope that

61
00:04:02.850 --> 00:04:05.130
in the near future, on
jQuery, we will be able

62
00:04:05.130 --> 00:04:07.770
to detect that so many
missions can be done with

63
00:04:07.800 --> 00:04:11.430
CSS. And I think for
part of them, it's already

64
00:04:11.430 --> 00:04:14.460
the case. We did the
same thing. We've when GS

65
00:04:14.460 --> 00:04:17.520
some of the animation of
wind JSR just done using

66
00:04:17.520 --> 00:04:22.050
CSS three and emissions. So
yeah, it's a bit complicated

67
00:04:22.050 --> 00:04:24.090
today, but Hey, hop, it
will be simpler in the

68
00:04:24.090 --> 00:04:29.070
near future. I see people
talking about CSS in the

69
00:04:29.070 --> 00:04:32.610
context of 3d. When should
someone do their CSS or

70
00:04:32.610 --> 00:04:36.420
do an animation in CSS
and a 3d trans transform

71
00:04:36.660 --> 00:04:39.510
versus when is it time
to jump to web GL?

72
00:04:40.440 --> 00:04:45.000
Let's say that for simple
things like rotating some DV,

73
00:04:45.050 --> 00:04:49.080
or just adding some kind
of perspective to your, to

74
00:04:49.080 --> 00:04:52.410
your page, it could be
easily done with CSS, really

75
00:04:52.410 --> 00:04:57.540
transform because mainly ECS is
transforming, just applying a metrics,

76
00:04:57.870 --> 00:04:59.940
the three D metrics to
you live. If you want

77
00:04:59.940 --> 00:05:03.960
to go further, I mean,
adding more complex object, something

78
00:05:04.050 --> 00:05:07.140
that it's not a square,
but like a ship, whatever

79
00:05:07.140 --> 00:05:11.910
you want, you need to
go to. Okay. So if

80
00:05:11.910 --> 00:05:14.790
I was going to draw
a square and rotated or

81
00:05:14.790 --> 00:05:17.310
translate it or scale it
in X, Y, or Z,

82
00:05:17.580 --> 00:05:20.400
these are all very reasonable
things to do with the

83
00:05:20.400 --> 00:05:24.000
transform property and Oh yeah.
And you will get right

84
00:05:24.000 --> 00:05:26.850
off the, all the burden
of using webcam, because where

85
00:05:26.850 --> 00:05:28.950
does you add is not
easy to use. It's lonely

86
00:05:29.850 --> 00:05:32.070
and it's not easy to
use. Yeah. But if I

87
00:05:32.070 --> 00:05:36.510
wanted to dry cube something
that actually has depth, then

88
00:05:36.540 --> 00:05:38.490
if I wanted to do
that in CSS, it becomes

89
00:05:38.490 --> 00:05:40.800
more of a challenge. And
I assume I would then

90
00:05:40.800 --> 00:05:44.340
have to start thinking about
the Z axis, which I

91
00:05:44.340 --> 00:05:48.090
don't really think about in
the NCSS. Absolutely. And you

92
00:05:48.090 --> 00:05:50.190
have to think about what
we call the present three

93
00:05:50.190 --> 00:05:53.850
D, which mean that the
back plane is not drone

94
00:05:53.850 --> 00:05:55.890
on top of the phone
plane. We have to deal

95
00:05:55.890 --> 00:06:00.740
with kind of, that will
slowly draw you to use

96
00:06:00.740 --> 00:06:04.870
a website. Okay. So talk
more about preserved 3d and

97
00:06:04.870 --> 00:06:08.000
why that's It's important because
if you want to drill

98
00:06:08.080 --> 00:06:09.940
to draw in three D
we need to have some

99
00:06:09.940 --> 00:06:12.970
kind of depth buffer. I
mean, you need to ensure

100
00:06:12.970 --> 00:06:16.090
that the pixel you are
drawing is in front of

101
00:06:16.090 --> 00:06:19.750
the previous pixel. And to
do that, we have a

102
00:06:20.050 --> 00:06:24.370
tool using CSS called <inaudible>,
which means that if a

103
00:06:24.370 --> 00:06:31.750
plane is drawn and displaying,
his father had under plane,

104
00:06:31.930 --> 00:06:34.030
which is done on top
of it, then all the

105
00:06:34.030 --> 00:06:37.270
3d will be preserved. So
you will have the feeling

106
00:06:37.270 --> 00:06:39.700
of a three D because
everything will be drawn in

107
00:06:39.700 --> 00:06:44.410
the right order. I see.
So then that transform style

108
00:06:44.410 --> 00:06:47.320
value that you would put
on a div can be

109
00:06:47.320 --> 00:06:51.760
either preserve 3d Or flat.
Absolutely. And if you don't

110
00:06:51.760 --> 00:06:53.410
want to press up through
the age with just be,

111
00:06:53.620 --> 00:06:56.830
as you said, I see.
And it sounds like that's

112
00:06:56.980 --> 00:06:59.800
about as far as you
can go in, in, in

113
00:06:59.860 --> 00:07:03.040
CSS. I mean, it, it
get provides some ability to

114
00:07:03.260 --> 00:07:05.770
rotate and turn things around.
But if I were going

115
00:07:05.770 --> 00:07:08.890
to draw something like a
sphere, it's definitely time to

116
00:07:08.890 --> 00:07:11.500
get into. Oh yeah. It
would be really challenging. I

117
00:07:11.500 --> 00:07:14.090
saw a lot of fixed
period, man, that only UCS

118
00:07:14.090 --> 00:07:16.870
has, but it's just for
really genius guys. If you

119
00:07:16.870 --> 00:07:20.650
want to really do three
D like a sphere contours,

120
00:07:20.650 --> 00:07:26.650
whatever you need. I was
familiar early on with SVG.

121
00:07:26.650 --> 00:07:29.200
And when I, as a,
as an old school HTML

122
00:07:29.200 --> 00:07:33.520
person, I think about markup
first, I think about markup

123
00:07:33.550 --> 00:07:36.280
first. So when I started
looking into web GL, I

124
00:07:36.280 --> 00:07:40.120
started kind of searching around
and ignorantly. I was trying

125
00:07:40.120 --> 00:07:43.000
to look for what do
the angle brackets look like?

126
00:07:43.060 --> 00:07:46.270
And then I finally figured
out that web GL is

127
00:07:46.270 --> 00:07:50.410
a JavaScript API entirely. There's
no angle bracket representation of

128
00:07:50.410 --> 00:07:55.210
these objects, right? Absolutely. There
is a project launched by

129
00:07:55.300 --> 00:07:59.410
the front of our university,
from Germany called <inaudible>, which

130
00:07:59.440 --> 00:08:02.980
is exactly what you are
talking about as a group

131
00:08:03.040 --> 00:08:09.010
set of HTML demands that
describe 3d scene. But right

132
00:08:09.010 --> 00:08:13.440
now, if you're thinking about
can two MCL, it's like

133
00:08:13.490 --> 00:08:17.920
comparing canvas and SVG, they
both drew to the stuff

134
00:08:17.920 --> 00:08:21.610
on the screen. One is
based on a model like

135
00:08:21.640 --> 00:08:25.120
the canvas, we just JavaScript
orders. And as it's more

136
00:08:25.120 --> 00:08:28.180
about HTML elements right now,
we just have web GL,

137
00:08:28.180 --> 00:08:31.510
which is the canvas for
three D and extra dome,

138
00:08:31.750 --> 00:08:34.960
which is some kind of
visually from the sweetie. So

139
00:08:34.960 --> 00:08:38.470
you're saying X the letter
X, the three, and then

140
00:08:38.470 --> 00:08:42.490
the word, Absolutely. So this
is, Would you save in

141
00:08:42.490 --> 00:08:45.220
a declarative 3d? It's a
way of saying here's a

142
00:08:45.220 --> 00:08:47.980
scene, here's a viewport, here's
a background, here's a shape

143
00:08:48.460 --> 00:08:51.160
and describing it. So in
the context of something like

144
00:08:51.220 --> 00:08:54.790
XML that listeners might be
familiar with, I could use

145
00:08:54.790 --> 00:08:59.040
a API and build the
tree procedurally, or I could

146
00:08:59.040 --> 00:09:02.730
build the tree declaratively. And
you're saying that X three

147
00:09:02.730 --> 00:09:05.430
Dom is the beginning of
the discussion around how to

148
00:09:05.430 --> 00:09:08.750
describe a three D scene
declaratively, Sort of the, and

149
00:09:08.750 --> 00:09:11.810
they are trying to make
it really a convenient to

150
00:09:11.810 --> 00:09:15.950
use. You can think about
XAML when we, when we

151
00:09:15.950 --> 00:09:19.220
introduced 3d in the summer,
it's almost the same thing.

152
00:09:19.220 --> 00:09:22.810
We have a attack for
seeing attack from Iraq, for

153
00:09:22.820 --> 00:09:28.130
materials, everything is declarative And
are people who work in

154
00:09:28.130 --> 00:09:31.310
3d going to be familiar
with these terms, this idea

155
00:09:31.310 --> 00:09:35.420
of like a scene and
a camera angle. So it

156
00:09:35.420 --> 00:09:38.810
was web GL created with
those people in mind who

157
00:09:38.810 --> 00:09:41.870
are already making 3d con
No, not at all. It's

158
00:09:41.870 --> 00:09:46.250
really a low level, a
PA it's more like direct

159
00:09:46.250 --> 00:09:49.190
text for the web. I
mean, you just have control

160
00:09:49.190 --> 00:09:51.770
over a drawing, try and
go. And then you have

161
00:09:51.770 --> 00:09:55.250
to define a global state
machine and you have to

162
00:09:55.250 --> 00:09:59.390
specify really lowly other things
that communicate with the GPU,

163
00:09:59.420 --> 00:10:05.030
meaning cheddar state, like alpha
manipulation of the geometry is

164
00:10:05.040 --> 00:10:08.810
everything that it's not high
level at home. That's interesting

165
00:10:08.810 --> 00:10:10.460
that you say that because
I went up to a

166
00:10:10.460 --> 00:10:14.420
website called learning web GL,
and they have an example

167
00:10:14.420 --> 00:10:17.540
where they drew a triangle
and a square. And I

168
00:10:17.540 --> 00:10:19.490
started, I said, Oh, I'll
do a view source. And

169
00:10:19.490 --> 00:10:22.190
this will be lovely. And
I can see in here,

170
00:10:22.370 --> 00:10:26.750
square Vertex position buffer, and
they're making a raise of

171
00:10:26.750 --> 00:10:31.010
data and vertices. And I
was immediately overwhelmed. And frankly,

172
00:10:31.010 --> 00:10:34.820
a little disappointed because I'm,
I'm sure that from a,

173
00:10:35.260 --> 00:10:37.790
from the perspective of someone
who does 3d all the

174
00:10:37.790 --> 00:10:42.050
time, they might say, ah,
these are familiar APIs to

175
00:10:42.050 --> 00:10:44.840
direct X, but to someone
who just wants a square,

176
00:10:45.140 --> 00:10:49.790
it was immediately overwhelming. Absolutely.
Absolutely. And this is exactly

177
00:10:49.790 --> 00:10:52.880
the price you have to
pay today. If you want

178
00:10:52.880 --> 00:10:55.250
to use the rope off
your GPU, you have to

179
00:10:55.250 --> 00:11:00.860
go really at low-level communicating
with your GPU, but in

180
00:11:00.860 --> 00:11:06.170
a really Astra understand way.
So is that why the

181
00:11:06.170 --> 00:11:10.100
kind of the next obvious
thing is to use an

182
00:11:10.100 --> 00:11:12.560
API on top of that?
Like whether it be Babylon

183
00:11:12.590 --> 00:11:16.010
or some of your company.
Yeah. It's three GS mainly.

184
00:11:17.760 --> 00:11:22.820
Yeah. It's exactly why four
years ago, mr. Loops the

185
00:11:22.820 --> 00:11:25.460
creator or into your thorough
offer three GS that he

186
00:11:25.460 --> 00:11:28.760
had working on three years.
And it's exactly why we

187
00:11:28.760 --> 00:11:32.900
decided with some friends in
France to create baby NGS

188
00:11:32.980 --> 00:11:37.580
a way for web developers
to continue using JavaScript like

189
00:11:37.610 --> 00:11:41.930
they want without having all
the burden of the prelim

190
00:11:41.930 --> 00:11:45.380
being of windshield. Mr. Dube,
D O O B is

191
00:11:45.380 --> 00:11:49.400
Ricardo Cabello from Spain. And
he is the creator of

192
00:11:49.400 --> 00:11:51.770
three dot JS. And people
can go and search for

193
00:11:51.770 --> 00:11:55.480
that as well. And the,
the idea behind these is

194
00:11:55.480 --> 00:12:00.400
to layer more familiar metaphors
and more familiar terms on

195
00:12:00.400 --> 00:12:03.660
top of that low level.
Exactly. We are talking about

196
00:12:03.690 --> 00:12:10.500
camera lights, object, textures, something
sounds more like a movie,

197
00:12:10.500 --> 00:12:13.290
you know, a movie Trinitonian,
you put your camera, you're

198
00:12:13.290 --> 00:12:16.950
looking at something. And it's
easier to understand when you

199
00:12:16.950 --> 00:12:20.010
are not a genius in
three D and maths, And

200
00:12:20.010 --> 00:12:21.870
I'm not, I'm definitely not,
but I do want to

201
00:12:21.870 --> 00:12:24.630
make a, you know, interactions
without having to do the

202
00:12:24.630 --> 00:12:27.750
low level stuff. Would anyone
want to use the low

203
00:12:27.750 --> 00:12:30.060
level stuff? Who isn't a
library provider? Is there any

204
00:12:30.060 --> 00:12:32.700
reason for a listener who's
learning about web GL for

205
00:12:32.700 --> 00:12:35.820
the first time to call
these low level APIs? Or

206
00:12:35.820 --> 00:12:39.270
should they always consider using
something higher level? I think

207
00:12:39.270 --> 00:12:44.310
that's in almost whole the
case. The frameworks are enough.

208
00:12:44.760 --> 00:12:48.120
And if you want to
use all evil, just at

209
00:12:48.120 --> 00:12:50.820
a specific moment, you can,
it's not something that is

210
00:12:50.820 --> 00:12:53.130
a black box. All the
frameworks that are working on

211
00:12:53.130 --> 00:12:55.800
top of webs yet are
really open. So you can

212
00:12:55.800 --> 00:12:59.430
do whatever you want with
the lowly Valencia and keep

213
00:12:59.430 --> 00:13:02.850
continuing using the frame rockets.
Oh, okay. So that if

214
00:13:02.850 --> 00:13:05.370
I decide to go and
create something in Babylon or

215
00:13:05.370 --> 00:13:08.520
in three, if I need
to do something very low

216
00:13:08.520 --> 00:13:13.140
level, I don't have to
really ask the library to

217
00:13:13.140 --> 00:13:15.990
get out of the way
it's not hiding everything. No,

218
00:13:15.990 --> 00:13:18.690
absolutely. We try to do
that on every piece of

219
00:13:18.720 --> 00:13:21.870
<inaudible>. For instance, each time
we do something, there is

220
00:13:21.870 --> 00:13:24.480
an event that hollow you
to take the control over

221
00:13:24.480 --> 00:13:26.970
the specific features. For instance,
you want to add shadows

222
00:13:27.180 --> 00:13:29.190
and you don't want to
do that the way we

223
00:13:29.190 --> 00:13:32.460
are doing them, you just
have to override, let's say

224
00:13:32.490 --> 00:13:37.620
a specific behavior we are
working on and write your

225
00:13:37.620 --> 00:13:39.960
own. And in this case,
you will have to discuss

226
00:13:39.960 --> 00:13:44.010
with website. So w I,
I wrote a little blog

227
00:13:44.040 --> 00:13:46.650
post about making three D
games in a browser. And

228
00:13:46.650 --> 00:13:50.790
I talk about both Babylon
and three, and right off

229
00:13:50.790 --> 00:13:52.770
the bat, you make an
engine and a scene, and

230
00:13:52.770 --> 00:13:55.980
then you set up your
camera. Yep. You can also

231
00:13:55.980 --> 00:14:01.080
set up a directional light
and you're describing these coordinates

232
00:14:01.080 --> 00:14:04.470
in XYZ space, but it
wasn't clear to me what

233
00:14:04.470 --> 00:14:06.870
those numbers meant in the
sense of, are we talking

234
00:14:06.870 --> 00:14:10.140
about pixels or feet or
arbitrary? How do I know?

235
00:14:11.010 --> 00:14:12.480
We know, I said, like,
I think I set up

236
00:14:12.480 --> 00:14:14.790
a camera at like one
comma, this comma, that, but

237
00:14:14.790 --> 00:14:17.790
I don't really understand where
I was setting that camera

238
00:14:18.030 --> 00:14:20.820
because I didn't have a
sense of, of a unit.

239
00:14:21.600 --> 00:14:23.790
Yeah. And this is a
funny thing. There is no

240
00:14:23.790 --> 00:14:28.810
unit, the units, for instance,
if you create a vector

241
00:14:28.810 --> 00:14:32.430
or like zero one zero,
then the one is whatever

242
00:14:32.430 --> 00:14:34.890
you want. It's can, it
can be one meter, one

243
00:14:34.890 --> 00:14:37.800
centimeter, sorry. I'm French. So
I use meter and centimeters

244
00:14:38.610 --> 00:14:42.480
or one mice or whatever
you need. It's just up

245
00:14:42.480 --> 00:14:44.760
to you to keep that
constraint. I mean, if it

246
00:14:44.760 --> 00:14:47.430
was considered that one unit
is one meter, then each

247
00:14:47.430 --> 00:14:50.640
time you will build a
cube of one by one

248
00:14:50.640 --> 00:14:52.670
by one, then it will
be one by one by

249
00:14:52.670 --> 00:14:57.760
one meter. There is no
fourth unit. Okay. So it's

250
00:14:57.760 --> 00:15:01.360
whatever unit makes me happy.
Absolutely. I see. So if

251
00:15:01.360 --> 00:15:05.200
I have some existing 3d
content or an application that

252
00:15:05.200 --> 00:15:08.890
has some expectations, as long
as those measurements are relative

253
00:15:08.890 --> 00:15:11.050
to each other in a
reasonable way, I could use

254
00:15:11.050 --> 00:15:15.850
those. Absolutely. Exactly. Oh, it
works. Oh, okay. So I

255
00:15:15.850 --> 00:15:17.710
could go from zero to
a hundred or zero to

256
00:15:17.710 --> 00:15:20.440
one. It doesn't really matter.
Yeah. We try to keep

257
00:15:20.470 --> 00:15:25.270
value. Let's say from zero
to 1000, because it's clear,

258
00:15:25.360 --> 00:15:27.910
but if you want to
go from zero to 1 million,

259
00:15:27.910 --> 00:15:31.210
it's possible In, in Babylon,
once I've set up my

260
00:15:31.210 --> 00:15:33.550
engine, my scene, I've set
my camera up. Maybe I've

261
00:15:33.550 --> 00:15:36.250
added a little bit of
light. You've got this thing

262
00:15:36.250 --> 00:15:40.330
called a mask. Yep. What
does it mean? It's an

263
00:15:40.330 --> 00:15:42.670
object. It's the object. This
is your metric. Ms. She's

264
00:15:42.670 --> 00:15:45.850
a group of human tree
and a lot of information

265
00:15:45.880 --> 00:15:49.630
like positions, killing rotation. Is
it visible? Is it invisible?

266
00:15:49.630 --> 00:15:53.980
Is it almost transparent? All
the thing that help them

267
00:15:53.980 --> 00:16:00.220
in NGS render an object
on the screen. Hi, this

268
00:16:00.220 --> 00:16:03.310
is Scott. I really appreciate
our sponsors because they make

269
00:16:03.310 --> 00:16:06.940
the show possible. Today's show
is sponsored by developer express,

270
00:16:07.210 --> 00:16:10.870
become a UI superhero with
dev express controls and libraries

271
00:16:11.350 --> 00:16:15.730
deliver elegant.net solutions that address
customer needs today by leveraging

272
00:16:15.730 --> 00:16:19.690
your existing knowledge, you can
build next generation touch enabled

273
00:16:19.690 --> 00:16:23.740
solutions for tomorrow. You can
download your free 30 day

274
00:16:23.740 --> 00:16:34.150
trial@dxdothanselminutes.com. That's dx.hanselminutes.com. So if
I said, Babylon dot mesh

275
00:16:34.170 --> 00:16:37.960
dot create box, this is
something that you're dealing with

276
00:16:37.960 --> 00:16:41.290
internally. Like you have these
API, you have these, these

277
00:16:41.290 --> 00:16:43.720
functions where, you know what
a box looks like, and

278
00:16:43.720 --> 00:16:46.780
you've just set up a
series of shapes. Absolutely. This

279
00:16:46.780 --> 00:16:49.390
is exactly how it works.
You create, we call create

280
00:16:49.390 --> 00:16:54.040
books and then internally, internally,
sorry, I'm creating all the

281
00:16:54.160 --> 00:16:58.990
Vertex, all the dots in
space. And I gathered them

282
00:16:58.990 --> 00:17:02.590
using faces to give you
a box. And how many

283
00:17:02.590 --> 00:17:06.130
different kinds of primitive objects
do you provide? We have

284
00:17:06.130 --> 00:17:11.350
books, fear torus through is
not and plain. And I

285
00:17:11.350 --> 00:17:15.610
think a tourist is like
a donut. He had done

286
00:17:15.610 --> 00:17:17.910
it and the tourist not,
is it the build on

287
00:17:17.920 --> 00:17:21.400
it? Ah, okay. So What
do I do though? When

288
00:17:21.400 --> 00:17:25.750
I've got, you know, some
existing 3d asset, like I

289
00:17:25.750 --> 00:17:28.570
see on Skype here that
you have cost from Babylon

290
00:17:28.600 --> 00:17:30.610
five, let's say I have
a three D model of

291
00:17:30.610 --> 00:17:34.720
cost that I made in
some other application, And this

292
00:17:34.720 --> 00:17:38.350
is something we are really
working on. We try to

293
00:17:38.770 --> 00:17:43.000
make as simple as possible
for the developer to get

294
00:17:43.300 --> 00:17:46.030
data from the three D
world. So for instance, we

295
00:17:46.030 --> 00:17:49.830
have a, an exporter from
Brenda, which is free three

296
00:17:49.830 --> 00:17:54.570
D modeling tool, and we
also have an excellent three

297
00:17:54.570 --> 00:17:58.110
DS max exporter. So you
just have to bring some

298
00:17:58.140 --> 00:18:00.780
DLL into your three years
max in station four there.

299
00:18:01.050 --> 00:18:02.910
And then we will be
able to just push a

300
00:18:02.910 --> 00:18:05.310
button and everything that we
have into three years, max

301
00:18:05.550 --> 00:18:11.190
will be saved into a
<inaudible> file. And from your

302
00:18:11.190 --> 00:18:13.920
JavaScript code, you just have
one line of code to

303
00:18:13.950 --> 00:18:16.230
load this stuff, but we
don't fate. So instead of

304
00:18:16.230 --> 00:18:19.620
having books, Cuban, whatever you
can just create using JavaScript,

305
00:18:19.620 --> 00:18:23.040
you will be able to
have your coach a on

306
00:18:23.070 --> 00:18:27.020
object or whatever your spaceship
you need to have. You

307
00:18:27.020 --> 00:18:30.560
have HTML and JavaScript. This
dot Babylon file is a

308
00:18:30.560 --> 00:18:33.230
set of vertices. It's a,
it's a format. I presume

309
00:18:33.230 --> 00:18:35.800
it's some kind of Jason
format, Easy to do something

310
00:18:35.800 --> 00:18:38.120
from it. Yeah. We wanted
to keep it simple as

311
00:18:38.120 --> 00:18:42.170
possible. And it's everything related
to us. I mean, there

312
00:18:42.170 --> 00:18:47.150
is lights inside the materials,
textures, obviously the meshes, all

313
00:18:47.150 --> 00:18:49.640
the object and the shoe
matrix, everything that you need

314
00:18:49.700 --> 00:18:52.730
to have a full scene.
If you go to <inaudible>

315
00:18:52.730 --> 00:18:55.340
dot com, you will see
a lot of really complex

316
00:18:55.340 --> 00:18:58.670
scenes. We created with three
DS max Explorer, and there

317
00:18:58.670 --> 00:19:02.990
are just one we don't
fight. So if I go

318
00:19:02.990 --> 00:19:05.120
up there right now, I'm
at Babylon JS the most

319
00:19:05.120 --> 00:19:07.430
impressive one, the one that's
blown my mind is the

320
00:19:07.430 --> 00:19:11.360
Assassin's creed pirates. Cause I
play Assassin's creed and this

321
00:19:11.360 --> 00:19:14.870
is a ship racing game.
Absolutely. And then when I

322
00:19:14.870 --> 00:19:16.940
hit that and you know,
it takes a moment to

323
00:19:16.940 --> 00:19:20.270
load what all is happening
here is this megabytes of

324
00:19:20.270 --> 00:19:24.380
information. Oh yeah. I think
that's the size of all

325
00:19:24.380 --> 00:19:28.040
the scene. Meaning every kind
of weather, the weather, all

326
00:19:28.040 --> 00:19:31.160
the textures for the ships
is around 40 megabytes of

327
00:19:31.160 --> 00:19:34.340
data, 40 megabytes. And this
isn't yeah. Four, zero 40

328
00:19:34.340 --> 00:19:37.610
megabytes of Jason. I presume
that the next step beyond

329
00:19:37.610 --> 00:19:43.190
the structures and the scene
is the Textures. Yep. The

330
00:19:43.190 --> 00:19:46.160
textures are pretty easy and
we are using something really

331
00:19:46.160 --> 00:19:50.210
interesting, which is the DDS.
DDS is a compressed format.

332
00:19:50.690 --> 00:19:54.710
And as opposed to heat
off using a Jew JPEG

333
00:19:54.710 --> 00:19:58.040
for incense, JPEG is also
compressed between you want to

334
00:19:58.040 --> 00:20:01.130
download the JPEG into the
GPU memory. You have to

335
00:20:01.160 --> 00:20:04.280
earn compress it and save
it and compressed into the

336
00:20:04.280 --> 00:20:08.900
GPU memory for, with DDS,
we have the ability to

337
00:20:08.900 --> 00:20:12.920
just load the DDS, like
it, save it into the

338
00:20:12.920 --> 00:20:17.150
GPU memory. And the GPU
is able to uncompress it

339
00:20:17.570 --> 00:20:21.440
when it needs to render
your objects, for instance, And

340
00:20:21.440 --> 00:20:25.010
DDS, was that not direct
draw surfaces, the name of

341
00:20:25.010 --> 00:20:28.490
where that originally came from.
Absolutely. It's, it's an invention

342
00:20:28.490 --> 00:20:31.850
of Microsoft, but that's now
something that everyone uses. Yeah.

343
00:20:31.880 --> 00:20:35.900
And we have a lot
of global documentation around, So

344
00:20:35.900 --> 00:20:39.620
this is a, it sounds
scary, all these different formats

345
00:20:39.620 --> 00:20:42.440
and three letter acronyms, but
that really is just another

346
00:20:42.440 --> 00:20:46.460
kind of compressed picture. It's
it's like a JPEG or

347
00:20:46.460 --> 00:20:49.890
a PNG of sorts. It's
like a date. Yeah. But

348
00:20:49.890 --> 00:20:52.580
if I understand correctly, this
format is, is little, is

349
00:20:52.680 --> 00:20:57.270
a little bit lossy. Right.
But the compression ratio is

350
00:20:57.270 --> 00:21:01.200
fixed. There's basically like how,
how compressed do you want

351
00:21:01.200 --> 00:21:05.520
it? And it's fixed and
it can be decompressed by

352
00:21:05.520 --> 00:21:08.670
the hardware. So the work
for decompressing, this can happen

353
00:21:08.670 --> 00:21:11.820
in the GPU itself. Yeah.
And in this case, you'd

354
00:21:11.820 --> 00:21:14.250
save lots of memory because
if you have to save

355
00:21:14.280 --> 00:21:17.370
an uncompressed GPS in memory,
it will take a lot

356
00:21:17.370 --> 00:21:21.780
of megabytes of memory between
the DDS because it remains

357
00:21:22.200 --> 00:21:26.850
compressed. Then you save a
lot of bandwidth. Ah, so

358
00:21:27.630 --> 00:21:29.790
It's compressed in memory as
opposed to a JP that

359
00:21:29.790 --> 00:21:31.800
turns into a bitmap. And
we've all been to web

360
00:21:31.800 --> 00:21:35.940
pages before that have a
huge JPEGs and our browser

361
00:21:35.940 --> 00:21:38.850
gets slowed down because it's
really just a giant bitmap

362
00:21:38.850 --> 00:21:42.240
in memory. Absolutely. Ah, okay.
So then the GPU, again,

363
00:21:42.240 --> 00:21:46.230
another example of using the
GPU to the fullest, does

364
00:21:46.230 --> 00:21:50.820
the decompression in the hardware
as it needs to Yes.

365
00:21:50.880 --> 00:21:53.490
And if you take the
example of <inaudible> to the

366
00:21:53.490 --> 00:21:55.950
demonstration we did here, if
you look at the sky

367
00:21:55.950 --> 00:21:59.730
box, I mean the sky,
then the sky needs six

368
00:21:59.730 --> 00:22:04.020
different texture because you have
to think about a box

369
00:22:04.020 --> 00:22:06.930
that is surrounding all the
scene. And each time you

370
00:22:06.930 --> 00:22:11.280
look around then the three
D engine is showing you

371
00:22:11.280 --> 00:22:13.950
the right face of the
cube and you have this

372
00:22:13.950 --> 00:22:18.090
impression of being surrounded by,
through Skype. And to do

373
00:22:18.090 --> 00:22:21.990
that, we need six differentiate
bag or just one DDS

374
00:22:22.020 --> 00:22:25.950
because the DDS also as
the ability or inability to

375
00:22:25.950 --> 00:22:30.060
save many phases in it,
we call that the cube

376
00:22:30.090 --> 00:22:34.710
texture. Ah, okay. Now I
made by stealing someone else's

377
00:22:34.710 --> 00:22:36.210
code, because that seems to
be the way things are

378
00:22:36.210 --> 00:22:39.990
done on the web, a
spinning cube with texture in

379
00:22:39.990 --> 00:22:42.510
space. And I tried to
make them look the same.

380
00:22:42.510 --> 00:22:45.750
I did one in Babylon
and one in three JS

381
00:22:46.170 --> 00:22:50.070
and conceptually, they were very
similar. We had scenes and

382
00:22:50.070 --> 00:22:53.610
acute geometry and I applied
a texture. But one of

383
00:22:53.610 --> 00:22:56.220
the things that I noticed
immediately was that in Babylon,

384
00:22:56.250 --> 00:23:00.330
I can grab the cube
and spin it around. I

385
00:23:00.330 --> 00:23:03.960
had interaction, but I don't
remember writing any of that

386
00:23:03.990 --> 00:23:08.250
work. Yeah. And you're right.
This is the foundation of

387
00:23:08.250 --> 00:23:11.670
wogs. This is why we
decided to create something different

388
00:23:11.670 --> 00:23:14.370
than 3g years through GSS
next to them through the

389
00:23:14.370 --> 00:23:16.230
engine. But we wanted to
have something, we have a

390
00:23:16.230 --> 00:23:20.490
different philosophy. We wanted something
that is really simple to

391
00:23:20.490 --> 00:23:24.420
use, no need to add
cord. If you can do

392
00:23:24.420 --> 00:23:27.840
something basically without no code
at all, then we will

393
00:23:27.840 --> 00:23:30.570
do that for you. For
instance, as you mentioned, we

394
00:23:30.990 --> 00:23:33.900
<inaudible>, we had to fight
for manipulation. We had to

395
00:23:33.900 --> 00:23:37.620
brought forth everything that we
can add without giving you

396
00:23:37.620 --> 00:23:41.310
the burden of doing it.
Does that take Babylon kind

397
00:23:41.310 --> 00:23:47.210
of forward? Not necessarily as
a, as a 3d Library,

398
00:23:47.210 --> 00:23:50.510
but more of a game
engine. Yeah, we think about

399
00:23:50.510 --> 00:23:53.630
it as a game engine.
We wanted to think about

400
00:23:53.630 --> 00:23:56.650
it like the IX and
a for the web. Ah,

401
00:23:56.680 --> 00:24:00.130
interesting. Now I also notice,
and this is just subjective.

402
00:24:00.130 --> 00:24:03.520
So forgive me if I'm
wrong, but it feels like

403
00:24:03.790 --> 00:24:09.700
the cube in my, my
Babylon example has somehow smoother

404
00:24:09.700 --> 00:24:11.980
sides while I'm three JS.
It ended up a little

405
00:24:11.980 --> 00:24:15.490
bit aliased is that an
illusion That I'm seeing? We

406
00:24:15.490 --> 00:24:19.330
are working a lot with
two different perceptions things when

407
00:24:19.330 --> 00:24:23.380
you want to make it
rotate, we add some inertia.

408
00:24:23.740 --> 00:24:28.840
So it feels like it's
more smooth and about rendering.

409
00:24:28.840 --> 00:24:34.170
We also add some specific
post-process effects to add and

410
00:24:34.780 --> 00:24:37.300
on all the rendering we
are doing. I see. So

411
00:24:37.300 --> 00:24:40.660
this again gets to that
point that you're, you're optimizing

412
00:24:40.660 --> 00:24:43.450
for a certain audience perhaps.
And again, we're not trying

413
00:24:43.450 --> 00:24:46.560
to speak for the author
of three JS, but that,

414
00:24:46.560 --> 00:24:48.880
that seems a little bit
closer to the metal. I'm

415
00:24:48.880 --> 00:24:51.700
sure that I could add
the post-processing and the anti-icing

416
00:24:51.730 --> 00:24:54.760
as well as the manipulation,
but you're doing that for

417
00:24:54.760 --> 00:24:58.090
free. So you're trying to
basically make me successful without

418
00:24:58.090 --> 00:25:00.010
me having to be very,
very good at three D.

419
00:25:01.030 --> 00:25:02.680
Yeah. W we tried to
add a lot of things

420
00:25:02.680 --> 00:25:06.040
for you, and instead of
asking you to add things,

421
00:25:06.190 --> 00:25:09.430
I prefer asking you to
remove things. Ah, interesting. So

422
00:25:09.430 --> 00:25:12.010
then in order to, I
would add things to the

423
00:25:12.010 --> 00:25:14.410
three JS example to get
manipulation and I would have

424
00:25:14.410 --> 00:25:18.160
to turn them off in
Babylon. Absolutely, exactly. The fields

425
00:25:18.160 --> 00:25:21.370
of, No, I was looking
at the Assassin's creed example

426
00:25:21.370 --> 00:25:24.400
and it appears that it
was made by the IEP

427
00:25:24.400 --> 00:25:29.410
team, along with the folks
at, at Yes, it's a

428
00:25:29.440 --> 00:25:33.820
partnership between <inaudible> and Ubisoft.
We wanted to showcase the

429
00:25:33.820 --> 00:25:36.910
fact that as you mentioned,
trust at the start of

430
00:25:36.910 --> 00:25:41.620
this show, the web is
almost ready for gaming. I

431
00:25:41.620 --> 00:25:45.850
mean, through gaming, AAA gaming
and you'd be served is

432
00:25:46.090 --> 00:25:50.200
convinced that we will be
able to have really great

433
00:25:50.200 --> 00:25:54.760
games without any plugin in
a browser. So they really

434
00:25:54.760 --> 00:25:57.490
think That's going to happen.
So that means that I

435
00:25:57.490 --> 00:25:58.990
would be able to get
a, you know, a steam

436
00:25:59.020 --> 00:26:02.170
quality game at some point,
like a bastion or some

437
00:26:02.170 --> 00:26:05.410
game that perhaps has already
cross-platform and run that in

438
00:26:05.410 --> 00:26:07.120
the browser. Just fine. I
mean, we've, we've all seen

439
00:26:07.120 --> 00:26:11.680
quake and the examples there's
always the, the Wolfenstein 3d

440
00:26:11.680 --> 00:26:15.160
in the browser, but they're
talking about like Assassin's creed

441
00:26:15.190 --> 00:26:18.700
quality game. Yes. Right now
we have to figure out

442
00:26:18.700 --> 00:26:23.440
some specific points like IP
protection and all to monetize

443
00:26:23.470 --> 00:26:27.550
things. So it's just a
beginning. Technically we can create

444
00:26:27.550 --> 00:26:30.430
games. This is not a
problem of technical stuff or

445
00:26:30.430 --> 00:26:33.430
JavaScript or whatever. We have
the, the Roper and access

446
00:26:33.430 --> 00:26:36.970
to GPU. It's more about
monetization and ultra protect my

447
00:26:37.900 --> 00:26:42.550
assets. So the Full access
to the GPU and the

448
00:26:42.580 --> 00:26:45.870
browser's keeping us from that,
we know that JavaScript from

449
00:26:45.870 --> 00:26:49.470
a speed perspective is near
native speed right now. And

450
00:26:49.500 --> 00:26:55.650
certainly getting faster every day
there's memory issues. Presumably people

451
00:26:55.650 --> 00:26:57.840
aren't used to a browser
taking up maybe four or

452
00:26:57.840 --> 00:27:00.330
500 megs of Ram like
a game is, but I'm

453
00:27:00.330 --> 00:27:03.150
sure they can get over
that. What about storage and

454
00:27:03.150 --> 00:27:06.000
caching? Do I, if I
want to play Assassin's creed,

455
00:27:06.000 --> 00:27:08.850
I'm going to go on
steam and download 15 gigabytes

456
00:27:09.390 --> 00:27:12.300
of and, and store all
of that. If I was

457
00:27:12.300 --> 00:27:15.660
going to play the equivalent
game in the browser, would

458
00:27:15.660 --> 00:27:18.000
you have the browser kind
of keep a ring buffer

459
00:27:18.000 --> 00:27:20.400
of just the textures and
the information I need for

460
00:27:20.400 --> 00:27:23.280
the current level and then
maybe, or would I just

461
00:27:23.400 --> 00:27:25.950
cash it all and have
a five or 10 gig

462
00:27:27.120 --> 00:27:30.380
browser cache For Bobby Jones? Yes.
What we decided to do

463
00:27:30.380 --> 00:27:34.100
is to use index DB
database of the web to

464
00:27:34.100 --> 00:27:37.340
save everything locally. So this
means that the first time

465
00:27:37.340 --> 00:27:39.890
you will connect to the
game, we will download for

466
00:27:39.890 --> 00:27:42.860
you everything into the local
database, meaning that if you

467
00:27:42.860 --> 00:27:45.260
want to go offline, you
can play, you can still

468
00:27:45.260 --> 00:27:47.630
play the game, even a
flying because all the textures

469
00:27:47.630 --> 00:27:51.200
and the resources are saved
locally. We have obviously some

470
00:27:51.200 --> 00:27:56.060
limitation when it come to
speak about space, we can

471
00:27:56.060 --> 00:28:02.750
go to 100 megabytes. It's
the limitation we have, but

472
00:28:02.750 --> 00:28:06.440
it's, it's just a good
first idea. We can do

473
00:28:06.440 --> 00:28:10.490
a lot of things with
a local case. We have

474
00:28:10.490 --> 00:28:13.730
to figure out how to
do that. Like you do

475
00:28:13.730 --> 00:28:17.090
that in stream, for instance.
Yeah. It is amazing though

476
00:28:17.090 --> 00:28:19.850
how much you can do
with not a huge amount

477
00:28:19.850 --> 00:28:23.930
of data. There's this really
cool example, odd Babylon JS

478
00:28:23.930 --> 00:28:27.980
called Hill Valley. That is
basically it's the space where

479
00:28:27.980 --> 00:28:32.480
Marty McFly parks his car
and goes to the clock

480
00:28:32.480 --> 00:28:36.200
tower. It's an incredibly complicated
scene. I mean, it's effectively

481
00:28:36.200 --> 00:28:40.160
the entire town square. You
can walk around and it's

482
00:28:40.160 --> 00:28:44.090
only about 70 megabytes. Yep.
And we added a lot

483
00:28:44.090 --> 00:28:46.340
of Easter eggs. If you
want to wander around, we

484
00:28:46.340 --> 00:28:50.870
added some really cool stuff
around and it's just 70,

485
00:28:51.260 --> 00:28:53.690
as you said, megabytes, and
it's just Jason, we are

486
00:28:53.690 --> 00:28:58.040
working on a more compressed
file format to save base

487
00:28:58.070 --> 00:29:00.980
right now. And I'm pretty
sure that we can do

488
00:29:00.980 --> 00:29:04.200
that with just 50 minutes
Really, you know, it would,

489
00:29:04.200 --> 00:29:07.670
it would be very interesting
to compare what an application

490
00:29:07.670 --> 00:29:12.470
written in a traditional gaming
language looks like taking something

491
00:29:12.470 --> 00:29:15.890
that's like maybe this Hill
Valley example in C or

492
00:29:15.890 --> 00:29:20.540
C plus plus, and how
that would be different versus

493
00:29:20.540 --> 00:29:23.210
writing it in JavaScript. I
mean, is this not just

494
00:29:23.810 --> 00:29:25.670
trying to get it to
work in the browser, but

495
00:29:25.670 --> 00:29:27.950
is it really a superior
way to deliver a three

496
00:29:27.950 --> 00:29:31.550
D game? Yes, you can
reach a lot of people

497
00:29:31.550 --> 00:29:35.240
with just a browser, right?
We can reach every people

498
00:29:35.270 --> 00:29:38.840
that have computer today is
able to get a broader

499
00:29:38.840 --> 00:29:41.890
it's free. You can just
download it. And now as

500
00:29:41.890 --> 00:29:45.580
I'm Wandering around, I'm driving,
flying around Hill Valley right

501
00:29:45.580 --> 00:29:48.730
now. And of course I
can, I have God mode

502
00:29:48.730 --> 00:29:50.110
so I can go in
and out of walls and

503
00:29:50.110 --> 00:29:53.350
things. I noticed that some
of the textures look amazing

504
00:29:53.650 --> 00:29:55.540
far away, but if I
get close up, then I

505
00:29:55.540 --> 00:29:58.930
can see, I can see
the JPEG Venus. You could,

506
00:29:58.930 --> 00:30:02.050
you have different levels of
textures. Like you see in

507
00:30:02.050 --> 00:30:04.660
3d games where it gets
better quality as it begins

508
00:30:04.660 --> 00:30:07.680
to pop in. Yeah. If
we wanted to do that,

509
00:30:07.680 --> 00:30:11.370
we can just add some
DDS because DDS integrate a

510
00:30:11.370 --> 00:30:14.790
features called meet mapping and
meet mapping is a level

511
00:30:14.790 --> 00:30:17.670
of quality for textures. If
you are closer to a

512
00:30:17.670 --> 00:30:21.180
texture, then the texture will
be extremely neat and proceed.

513
00:30:21.300 --> 00:30:24.300
And if you are going
for Verdun, we will use

514
00:30:24.510 --> 00:30:29.730
a different development map. The
functionality works like this. You

515
00:30:29.730 --> 00:30:33.090
have the full range, which
is the first level, let's

516
00:30:33.090 --> 00:30:37.140
say 1000 by 1000. And
you have a single lever

517
00:30:37.150 --> 00:30:41.010
of pipe, which is just
divided by two. So let's

518
00:30:41.010 --> 00:30:43.950
say 500 by 500 and
so on and so on.

519
00:30:44.250 --> 00:30:47.040
And automatically web GL is
able to pick the right

520
00:30:47.040 --> 00:30:50.880
one based on your distance
from the object that you

521
00:30:50.880 --> 00:30:53.550
are looking at. I see.
So then it becomes a

522
00:30:53.550 --> 00:30:57.180
really an asset management problem.
More than it is anything

523
00:30:57.180 --> 00:30:59.220
else. It's not an issue
of code. This is just

524
00:30:59.670 --> 00:31:02.430
the, to the limits of
my artist's ability to create

525
00:31:02.430 --> 00:31:05.880
textures. If I asked my
artists to redo this and

526
00:31:06.420 --> 00:31:09.150
this, the scene we've just
did, yes. Then this problem

527
00:31:09.180 --> 00:31:12.360
will go away, Got inside
the car here. And something

528
00:31:12.360 --> 00:31:13.920
happened. I'm not sure if
that's one of the Easter

529
00:31:13.920 --> 00:31:18.660
eggs I got inside Marty's
DeLorean. And then some, some

530
00:31:18.900 --> 00:31:23.340
kind of cooler effect occurred.
I think you find one

531
00:31:23.340 --> 00:31:25.260
of them. I have to
explore this. This is pretty

532
00:31:25.260 --> 00:31:27.780
amazing stuff. Do you think
that this is going to

533
00:31:27.780 --> 00:31:30.690
ha we're going to see
more people getting involved in

534
00:31:30.690 --> 00:31:34.470
game creation because it's such
a more accessible way to

535
00:31:34.470 --> 00:31:37.410
do it. Oh yeah, I
think so. If you are

536
00:31:37.410 --> 00:31:40.800
looking at what unity announced,
unity three D announced for

537
00:31:40.800 --> 00:31:45.450
their restaurant five, they will
be able to directly export

538
00:31:45.480 --> 00:31:48.360
any, you need to gain
into a full web GL

539
00:31:48.360 --> 00:31:52.410
stuff and look at also
what Firefox is doing with

540
00:31:52.470 --> 00:31:57.840
ASM JS and it's all
around us. I'm pretty sure

541
00:31:57.840 --> 00:32:01.350
that, yeah, let's say in
three or perhaps four years,

542
00:32:01.830 --> 00:32:05.370
there will be a lot
of web GL games. That's

543
00:32:05.610 --> 00:32:08.790
interesting. I, the idea that
that JavaScript is a compilation

544
00:32:08.820 --> 00:32:12.570
target, you're saying web GL
and JavaScript as a compilation

545
00:32:12.600 --> 00:32:16.680
target where a tool kits
like unity that are already

546
00:32:16.710 --> 00:32:20.820
almost game generators, someone could
simply say export as web

547
00:32:20.820 --> 00:32:25.050
based game. Yeah. And it's
something that you already notice

548
00:32:25.050 --> 00:32:28.530
on your own blog when
you was talking about JavaScript,

549
00:32:28.650 --> 00:32:33.270
easy assembler of the web.
Yep. Right, right now Java

550
00:32:33.270 --> 00:32:36.330
script is just the support
of everything that if you

551
00:32:36.330 --> 00:32:40.760
want to just be fully
cross-platform fantastic. Well, thank you

552
00:32:40.760 --> 00:32:43.790
so much, David, for chatting
with me today. My pleasure.

553
00:32:43.820 --> 00:32:45.860
Thank you so much. You
can go up and learn

554
00:32:45.860 --> 00:32:50.150
more about Babylon js@babylonjs.com and
I'll put links in the

555
00:32:50.150 --> 00:32:54.080
show notes to David on
Twitter and his blog, and

556
00:32:54.140 --> 00:32:57.890
also his GitHub. This has
been another episode of Hanselminutes

557
00:32:58.010 --> 00:32:59.330
and we'll see you again
next week.

