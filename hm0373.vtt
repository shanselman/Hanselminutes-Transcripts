WEBVTT FILE

1
00:00:12.020 --> 00:00:17.570
From hanselminutes.com. It's Hanselman. It's
a weekly discussion with web

2
00:00:17.570 --> 00:00:22.340
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.340 --> 00:00:29.240
number three 76. Recorded live
Thursday, June 13th, 2013. Support for Hansel

4
00:00:29.240 --> 00:00:32.540
minutes is provided by teller
offering the best in developer

5
00:00:32.540 --> 00:00:41.750
tools and support online@telerikdotcomandbyfranklin.net makers
of gesture pad, a powerful

6
00:00:41.750 --> 00:00:45.350
gesture, recording and recognition system
for Microsoft connect for windows

7
00:00:45.350 --> 00:00:52.370
developers details@gesturek.com. In this episode,
Scott talks with Raquel novellas

8
00:00:52.640 --> 00:00:57.920
about no JS. Hi, this
is Scott Hanselman. This is

9
00:00:57.920 --> 00:00:59.870
another episode of Hansel minutes.
I'm here in Portland, Oregon

10
00:00:59.870 --> 00:01:03.050
at the Oregon convention center
at the jQuery conference, talking

11
00:01:03.050 --> 00:01:05.270
with Raquel Velez. How are
you? I'm doing very well.

12
00:01:05.270 --> 00:01:08.360
Thank you. You're doing a
talk tomorrow on node. Yes,

13
00:01:08.360 --> 00:01:10.700
I am. I'm talking about
a front end development and

14
00:01:10.700 --> 00:01:13.850
specifically in notes And you're
doing this at the jQuery

15
00:01:13.850 --> 00:01:15.860
conference. I just figured this
would be a conference all

16
00:01:15.860 --> 00:01:18.080
about like the dollar sign
and then that would be

17
00:01:18.080 --> 00:01:19.730
it. We just dollar sign
and then that would be

18
00:01:19.760 --> 00:01:22.010
talks and talks and talks
about that. Yeah, I know

19
00:01:22.010 --> 00:01:25.640
it seems a little weird,
but actually I think because

20
00:01:25.640 --> 00:01:27.920
of the evolution of the
language, as people start to

21
00:01:27.920 --> 00:01:31.820
realize that front end development
is not just about jQuery,

22
00:01:31.850 --> 00:01:35.540
even though what 90% of
developers use jQuery on the

23
00:01:35.540 --> 00:01:38.390
front end, there are so
many more options out there.

24
00:01:38.390 --> 00:01:42.110
Now it's so many opportunities
to kind of move past

25
00:01:42.110 --> 00:01:45.120
that and move with that,
use it in other applications.

26
00:01:45.120 --> 00:01:47.390
And so when I saw
the call for speakers, I

27
00:01:47.390 --> 00:01:49.850
said, okay, let me try
putting something in about front

28
00:01:49.850 --> 00:01:51.410
end development note because a
lot of people are a

29
00:01:51.410 --> 00:01:55.130
little scared of this, you
know, crazy server-side JavaScript thing.

30
00:01:55.130 --> 00:01:59.030
And I want to relieve
that those fears People for

31
00:01:59.030 --> 00:02:02.150
some reason, and in development
seem to fall into the,

32
00:02:02.570 --> 00:02:06.050
I segment myself in that
I'm a SQL programmer or

33
00:02:06.050 --> 00:02:08.450
I'm a FoxPro or whatever,
like tiny tool. They just

34
00:02:08.450 --> 00:02:11.450
pick a tool and they
stay in their lane and

35
00:02:11.450 --> 00:02:14.270
then there's front end and
node. I know of people

36
00:02:14.270 --> 00:02:17.510
who call themselves front end
developers, but it blurs a

37
00:02:17.510 --> 00:02:20.300
little bit. When you start
talking about node development, I

38
00:02:20.300 --> 00:02:22.670
mean, that's what happens when
you have JavaScript on the

39
00:02:22.670 --> 00:02:26.540
front end and the backend,
it, it it's suddenly this

40
00:02:27.200 --> 00:02:30.410
opportunity, like there's this door
that is opened. All these

41
00:02:30.410 --> 00:02:33.320
people who have just didn't
use to writing JavaScript on

42
00:02:33.320 --> 00:02:35.840
the, on the client side.
Now they can suddenly start

43
00:02:36.020 --> 00:02:37.760
playing around with it on
the server side. And that

44
00:02:37.760 --> 00:02:39.230
just kind of blows their
minds. They don't have to

45
00:02:39.230 --> 00:02:43.070
wait for the Ruby guy,
the.net guy or whoever to

46
00:02:43.310 --> 00:02:45.260
take care of the backend
stuff for them. Now they

47
00:02:45.260 --> 00:02:47.870
can just jump in themselves.
Yeah, Yeah. That, that separation

48
00:02:47.870 --> 00:02:51.710
of concerns slash separation of
responsibilities. When I was working

49
00:02:51.710 --> 00:02:53.810
in the enterprise like pen
years ago, I was always

50
00:02:54.170 --> 00:02:56.540
waiting for a storage product
from the database guys in

51
00:02:56.540 --> 00:02:58.730
another part of the building,
or, you know, got to

52
00:02:58.730 --> 00:03:01.480
wait for the debt that
the database guy to return

53
00:03:01.480 --> 00:03:03.880
the data to the.net guy
who will then return the

54
00:03:03.880 --> 00:03:06.160
data to me. Right. And
then I'll bring it in

55
00:03:06.160 --> 00:03:09.310
with jQuery or whatever. Right.
Right. How do you think

56
00:03:09.310 --> 00:03:11.230
that people find themselves in
a note, do you think

57
00:03:11.230 --> 00:03:13.930
that they explicitly make this
leap? Like there's a, there's

58
00:03:13.930 --> 00:03:15.820
a moment where they go,
all right, I'm doing it.

59
00:03:15.850 --> 00:03:19.770
I'm going server side or
does it just happen? So

60
00:03:19.920 --> 00:03:22.650
I think what happens is
I think there's multiple camps

61
00:03:22.650 --> 00:03:24.780
of people. I think there
are the people who are

62
00:03:24.780 --> 00:03:27.120
like, Oh, there's this new
shiny language. Let me go

63
00:03:27.120 --> 00:03:30.270
play with it. But then
there's also people who are

64
00:03:30.270 --> 00:03:33.210
like, Oh, I love Java
script. And now I can

65
00:03:33.210 --> 00:03:34.950
do this on the back
end. Let me try that.

66
00:03:35.190 --> 00:03:38.550
And then I think there's
also people who they, they

67
00:03:38.550 --> 00:03:41.610
see, they find out that
it is just so easy

68
00:03:41.820 --> 00:03:44.580
to get started with node,
that, that they have a

69
00:03:44.580 --> 00:03:47.370
personal project or something. And
it's like, well, it's just

70
00:03:47.370 --> 00:03:49.890
a couple of pages of
an app, you know, do

71
00:03:49.890 --> 00:03:52.650
I have, how do I
get started? And, and then

72
00:03:52.650 --> 00:03:54.510
they see how easy it
is to just start up

73
00:03:54.510 --> 00:03:57.390
an express server and then
just start hacking away with

74
00:03:57.990 --> 00:04:01.860
Jade and stylists and picking
out the routes and everything

75
00:04:01.860 --> 00:04:05.220
like that. That they're just
like, Oh, well that doesn't

76
00:04:05.220 --> 00:04:07.500
look so hard. Let me,
let me try that. And

77
00:04:08.250 --> 00:04:10.650
so I, I think it
really depends on kind of

78
00:04:10.650 --> 00:04:14.010
what your angle is, but
we've just seen this community

79
00:04:14.010 --> 00:04:17.310
grow a million fold in
the last couple of years.

80
00:04:17.310 --> 00:04:19.290
So yeah. Well, let's, let's
pick apart some of those

81
00:04:19.290 --> 00:04:21.600
words that you use, like
stylist and Jade and express

82
00:04:21.600 --> 00:04:25.580
service and the idea that,
what is it about node

83
00:04:25.580 --> 00:04:28.440
that makes it easier to
pick up or appears to

84
00:04:28.440 --> 00:04:30.330
make it as you pick
up then Java or C

85
00:04:30.330 --> 00:04:33.280
plus plus or.net? I realized
that in those worlds, there's

86
00:04:33.360 --> 00:04:36.570
a compilation step. There's always
this implication that there's an

87
00:04:36.570 --> 00:04:40.780
IDE required. Right, Right, right.
No, with, with, with node,

88
00:04:40.800 --> 00:04:43.380
I mean, with JavaScript in
general, what you don't there

89
00:04:43.440 --> 00:04:47.700
really isn't an IDE necessarily
you don't use visual studio,

90
00:04:49.200 --> 00:04:53.790
you use VIM or Emacs
or sublime, text or brackets

91
00:04:53.790 --> 00:04:58.200
is the new one from
Adobe, whatever you like, it's,

92
00:04:58.240 --> 00:05:02.490
it's not compiled, it's it,
you know, at least on

93
00:05:02.490 --> 00:05:04.620
the front end, people are
just using it. They're used

94
00:05:04.620 --> 00:05:06.810
to just having it kind
of load and, you know,

95
00:05:06.810 --> 00:05:08.880
press refresh to try something
new. You don't have to

96
00:05:09.060 --> 00:05:10.800
Do you think that's it?
Is it the press refresh

97
00:05:10.800 --> 00:05:13.530
to try something new, both
server and client that makes

98
00:05:13.530 --> 00:05:16.080
it so accessible to people?
I think so. I think,

99
00:05:16.110 --> 00:05:17.190
I mean, you don't have
to sit there waiting for

100
00:05:17.190 --> 00:05:20.520
anything to compile ever, and
you see errors immediately and

101
00:05:20.520 --> 00:05:23.760
it, and it it's pretty
good. Debugging is not my

102
00:05:23.760 --> 00:05:26.580
thing. Just my question. Even
without interactive debugging, like say

103
00:05:26.580 --> 00:05:28.350
what you will about visual
studio, but when you really

104
00:05:28.350 --> 00:05:30.870
know what's going on, I
will stand by the fact

105
00:05:30.870 --> 00:05:34.200
that visual studio is Microsoft's
best product. I used to

106
00:05:34.200 --> 00:05:37.820
write C plus plus, and
I love it, but what

107
00:05:37.820 --> 00:05:41.040
so, okay. To be fair,
you can actually do debugging

108
00:05:41.040 --> 00:05:46.080
and, and you can have
interactive break points and everything.

109
00:05:46.080 --> 00:05:48.420
You can step into functions
and step through functions using,

110
00:05:48.960 --> 00:05:52.140
for example, Chrome dev tools.
So you can do things

111
00:05:52.140 --> 00:05:55.050
like that, and that's not
too hard at all. So

112
00:05:55.050 --> 00:05:56.580
wait a second. You can
use Chrome dev tools on

113
00:05:56.580 --> 00:06:01.190
the service. You Can actually,
I, I don't do it

114
00:06:01.250 --> 00:06:04.850
too much, but, but you
can, there's also a command

115
00:06:04.850 --> 00:06:08.660
line version of debugger. So
you can put in a

116
00:06:08.660 --> 00:06:12.320
break point in your, in
your node server side code,

117
00:06:12.790 --> 00:06:16.250
and then see it kind
of break in your, like

118
00:06:16.250 --> 00:06:17.920
in your car. So if
I'm going to make a

119
00:06:17.920 --> 00:06:20.170
note application, I have either
an app dot JS or

120
00:06:20.170 --> 00:06:22.060
a server dot JS file.
That's sitting in a folder

121
00:06:22.060 --> 00:06:23.860
somewhere and that's all I
need. Right. That's all you

122
00:06:23.860 --> 00:06:26.620
need. I type node in
that folder that fires up

123
00:06:26.620 --> 00:06:29.290
node and starts listening on
port 5,000 or whatever. Sure.

124
00:06:29.500 --> 00:06:31.450
So there was no Apache
or anything. I have a

125
00:06:31.450 --> 00:06:34.600
little tiny development server sitting
right there. That's right. And

126
00:06:34.870 --> 00:06:36.820
the, is it app server,
app dot JS, or server

127
00:06:36.820 --> 00:06:39.940
dot JS, which is the
Right now, I think right

128
00:06:39.940 --> 00:06:43.270
now it's at that JS,
it may have previously been

129
00:06:43.270 --> 00:06:45.850
served at JS. I think
it goes back and forth.

130
00:06:46.090 --> 00:06:50.230
I don't think there's any
particular convention. I mean, you

131
00:06:50.230 --> 00:06:52.090
could, you could call it
example dot JS if you

132
00:06:52.090 --> 00:06:54.070
want it to, right. Yeah.
It uses the V eight

133
00:06:54.070 --> 00:06:56.470
engine and this is the
exact same JavaScript engine that's

134
00:06:56.470 --> 00:07:00.040
inside of the Chrome browser.
That's correct. Right. Isn't that

135
00:07:00.040 --> 00:07:02.020
kind of a hack? I
mean, I'm not in no

136
00:07:02.020 --> 00:07:04.000
way trying to disparate. No,
but I really want to

137
00:07:04.000 --> 00:07:06.520
understand to my both myself
and also to people that

138
00:07:06.520 --> 00:07:10.870
are listening, how this happened.
I mean, somebody's Ryan duck

139
00:07:11.140 --> 00:07:14.230
like ripped this part of
Chrome out that he liked

140
00:07:14.320 --> 00:07:16.500
and fired it up and
said a console app. Right.

141
00:07:16.500 --> 00:07:18.130
And it worked and he
said, Oh goodness. And it

142
00:07:18.130 --> 00:07:20.950
just started running right down
the street with it. Right.

143
00:07:20.980 --> 00:07:23.260
Well, I think it's, it's
important to first say that,

144
00:07:23.290 --> 00:07:25.150
you know, the beauty of
VA is that it's got

145
00:07:25.150 --> 00:07:27.340
these C plus plus bindings,
but you can kind of

146
00:07:27.340 --> 00:07:29.740
use JavaScript on, on top
of that. Right. So it,

147
00:07:29.920 --> 00:07:34.570
it's this fancy little it's
super fast and, and really

148
00:07:34.570 --> 00:07:38.560
efficient. And you can basically,
you've got this whole event

149
00:07:38.560 --> 00:07:42.070
loop and things and, and
real time is the name

150
00:07:42.070 --> 00:07:43.660
of the game, right? Like
that's, that's the beauty of

151
00:07:43.660 --> 00:07:48.160
node. Why did on the
server side? Honestly, I don't

152
00:07:48.160 --> 00:07:51.490
really know. I see no
reason. I think, I think

153
00:07:51.490 --> 00:07:55.090
the question is more not
why, but why not. And,

154
00:07:55.540 --> 00:07:58.000
and it's really, I think
the notion is being able

155
00:07:58.000 --> 00:08:02.140
to use JavaScript on both
sides of the stack and

156
00:08:02.170 --> 00:08:06.010
to just kind of run
with that. It's not necessarily

157
00:08:07.990 --> 00:08:11.260
better or worse, but I
mean, but the implications that

158
00:08:11.260 --> 00:08:13.840
the consequences of, of all
of that is that you

159
00:08:13.840 --> 00:08:18.280
do have this opportunity to
have really fast, really high

160
00:08:18.280 --> 00:08:24.250
concurrency applications that have just
totally taken over. I mean,

161
00:08:24.910 --> 00:08:28.570
nowadays, if you want a
chat server, you use node,

162
00:08:28.600 --> 00:08:32.260
like it's just so much
easier. It's fast and you

163
00:08:32.260 --> 00:08:34.510
can have multiple people touching
the app at the same

164
00:08:34.510 --> 00:08:37.000
time and you don't have
to worry about anything In

165
00:08:37.000 --> 00:08:40.600
the, in the.net world. We
had some really neat stuff

166
00:08:40.600 --> 00:08:44.140
happening 10 years ago with,
with web forms and brought

167
00:08:44.140 --> 00:08:48.610
up a new generation of
desktop programmer into a world

168
00:08:48.610 --> 00:08:50.650
where they could drag buttons
onto a design surface, and

169
00:08:50.650 --> 00:08:54.220
suddenly they were writing web
applications. And I think.net people

170
00:08:54.220 --> 00:08:56.490
are struggling right now make
this transition where a web

171
00:08:56.490 --> 00:09:03.030
application that's served, primarily HTML
is not really serving HTML

172
00:09:03.030 --> 00:09:07.170
anymore. It's not creating like
for reaching over data, generating

173
00:09:07.170 --> 00:09:09.900
a table, and then sending
that table over the wire,

174
00:09:10.320 --> 00:09:13.770
they're sending JavaScript over the
wire, right. Does a node

175
00:09:13.770 --> 00:09:19.040
app serve HTML? Well, so
sort of in the sense

176
00:09:19.040 --> 00:09:25.100
that, so like I said,
we have express and Jaden

177
00:09:25.100 --> 00:09:27.740
status and just for the
sake of the listeners, let's

178
00:09:27.740 --> 00:09:32.300
explain what those are. So
express is a, an MVC

179
00:09:32.300 --> 00:09:35.270
framework. So you have a
model's views and controllers so

180
00:09:35.270 --> 00:09:37.370
that you can kind of
organize your code in a

181
00:09:37.370 --> 00:09:40.880
way that allows you to
take data from your database.

182
00:09:40.880 --> 00:09:44.030
So that's your model kind
of side. And then you've

183
00:09:44.030 --> 00:09:46.700
got your views, which basically
handle all of your front

184
00:09:46.700 --> 00:09:50.870
end. So your, your, your
HTML, your CSS, your front

185
00:09:50.870 --> 00:09:53.840
end JavaScript, and then you
have your controllers that basically

186
00:09:53.840 --> 00:09:56.810
allow the data to talk
between the two and, and,

187
00:09:56.990 --> 00:09:59.630
and account for routing and
all, And expresses is not

188
00:09:59.630 --> 00:10:01.460
just the framework, but a
series of conventions. Like what

189
00:10:01.460 --> 00:10:05.510
goes where Sure. I mean,
it's, it's, it's basically just

190
00:10:05.510 --> 00:10:07.700
a bunch of files. Really.
It's a bunch of folders

191
00:10:07.700 --> 00:10:09.590
that you can kind of
it, to me, it's more

192
00:10:09.590 --> 00:10:12.710
of an organizer of your
code. Right. But yes, there

193
00:10:12.710 --> 00:10:15.440
are some conventions, but it
uses node convention. So you

194
00:10:15.440 --> 00:10:18.050
don't have to use express,
you could use flat iron,

195
00:10:18.050 --> 00:10:21.110
or you could use something
completely different, like a Shepard

196
00:10:21.110 --> 00:10:26.270
or something you guys have.
Cool. Yeah. I know. I

197
00:10:26.270 --> 00:10:28.220
always talk about that. I
was like, I was making

198
00:10:28.220 --> 00:10:29.480
a joke on stage once
and I was like, you

199
00:10:29.480 --> 00:10:31.640
could just say lawn chair
dot, JS, and someone was

200
00:10:31.640 --> 00:10:35.430
like, that's a thing. Okay.
Oh man. Yeah, absolutely. It's,

201
00:10:35.430 --> 00:10:39.440
it's kind of hilarious. But
anyway, so, so express is

202
00:10:39.440 --> 00:10:42.440
just one of many examples
of a model view controller

203
00:10:42.500 --> 00:10:46.880
option and then Jade and
stylists. So Jade is an

204
00:10:46.910 --> 00:10:51.080
HTML templating. You can call
it an HTML preprocessor and

205
00:10:51.080 --> 00:10:55.250
that language, and then a
stylist is a CSS preprocessor

206
00:10:55.640 --> 00:10:58.070
as well. So if you're
familiar with less or a

207
00:10:58.070 --> 00:11:00.950
sass, a stylist is kind
of the J or the

208
00:11:01.310 --> 00:11:05.090
it's the node version. So
I know less D the

209
00:11:05.090 --> 00:11:09.620
stylist process, less files. No,
no, it's different. So the

210
00:11:09.620 --> 00:11:13.280
syntax is neither last nor
SAS, but it is in

211
00:11:13.280 --> 00:11:17.750
the same camp. So it's
a cousin. Okay, cool. Is

212
00:11:17.750 --> 00:11:22.220
the preprocessor stitch mill stylist
is the preprocessor for CSS,

213
00:11:22.250 --> 00:11:25.490
correct? I'm the organizer and
the convention in the file

214
00:11:25.490 --> 00:11:28.760
cabinet of it all is
expressed that that imposes some

215
00:11:28.760 --> 00:11:33.080
kind of model view controller
pattern. Absolutely. Okay. And then

216
00:11:34.160 --> 00:11:37.100
am I serving out like
an index dot HTML? Yes,

217
00:11:37.610 --> 00:11:40.070
That's exactly right. So what
happens is at least using

218
00:11:40.070 --> 00:11:43.940
express you, so you have
this route, that's just like,

219
00:11:43.940 --> 00:11:46.790
for example, your index, and
then you can say, well,

220
00:11:46.850 --> 00:11:51.140
whenever somebody hits the index,
go to this controller function,

221
00:11:51.350 --> 00:11:55.750
and then the controller function
you'll have a response notion

222
00:11:55.750 --> 00:12:02.140
that says on response render
this file, which in our

223
00:12:02.140 --> 00:12:04.360
case will be in Jade.
And then, but let's pass

224
00:12:04.360 --> 00:12:08.110
in this information, this data
that we may have from

225
00:12:08.110 --> 00:12:10.900
the backend, from a model
or something like that. And

226
00:12:10.900 --> 00:12:14.110
then we can take that
data and we can basically

227
00:12:14.110 --> 00:12:17.740
kind of put it into
our HTML template with Jade.

228
00:12:18.100 --> 00:12:21.820
And so we can, we'll
have all of that stuff

229
00:12:21.850 --> 00:12:24.610
in our J template. And
then it basically compiles to

230
00:12:24.610 --> 00:12:27.680
HTML. So yeah, it serves
HTML and it, and, and

231
00:12:27.700 --> 00:12:31.690
then of course, in addition,
it has the stylist, this,

232
00:12:31.710 --> 00:12:36.330
the styling of that HTM
Template. So do do, do

233
00:12:36.330 --> 00:12:40.080
node people, sweat the idea
of a model versus a

234
00:12:40.080 --> 00:12:41.910
view model. Like, you know,
you might get the model

235
00:12:41.910 --> 00:12:45.090
from the database and then
change it or projected onto

236
00:12:45.090 --> 00:12:47.970
a different, more complicated object
that represents a more complicated

237
00:12:48.000 --> 00:12:51.960
view and then pass that
view into energy. Yeah, No,

238
00:12:51.960 --> 00:12:55.920
that's, I would actually, I
probably wouldn't put it into

239
00:12:55.920 --> 00:12:58.020
Jade. I, I would put
whatever data you need to

240
00:12:58.020 --> 00:13:01.080
put into Jade and then
within Jade and your client

241
00:13:01.080 --> 00:13:03.360
side scripting. So if you
wanted to use a knockout

242
00:13:03.360 --> 00:13:06.000
or something like that, or
backbone, you do that more

243
00:13:06.000 --> 00:13:08.430
on the client side than
on the back. So on

244
00:13:08.430 --> 00:13:11.850
the.net side, the people who
are doing not JavaScript heavy

245
00:13:11.850 --> 00:13:15.180
or not a lot of
JavaScript on the client, mostly,

246
00:13:15.240 --> 00:13:18.030
you know, take some data,
pass it into a view

247
00:13:18.030 --> 00:13:20.040
and generate HTML and send
it across the wire and

248
00:13:20.040 --> 00:13:24.270
then rinse and repeat. So
for, for them model view

249
00:13:24.270 --> 00:13:27.330
controller is very much a
server side thing. Right. I

250
00:13:27.330 --> 00:13:30.780
think it gets confusing in
the node world because it

251
00:13:30.780 --> 00:13:33.810
is also a front end
developers world. There's there's two

252
00:13:33.810 --> 00:13:37.380
model view controllers. Right. Right.
And you can, you can

253
00:13:37.380 --> 00:13:40.320
kind of set it up
that way. Certainly. So you

254
00:13:40.320 --> 00:13:44.730
have your model view controller.
So I guess to, to

255
00:13:45.120 --> 00:13:48.960
be a little bit more
accurate or clarify, you set

256
00:13:48.960 --> 00:13:50.970
up all of your, your,
you used Jade on the

257
00:13:50.970 --> 00:13:52.740
back end and you set
it all up on the

258
00:13:52.740 --> 00:13:55.530
back end. And so then
what goes over the wires

259
00:13:55.530 --> 00:13:58.170
HTML? So like on, let's
say that initial load, we

260
00:13:58.170 --> 00:14:01.260
show up word index dot
HTML, HTML Crow came across

261
00:14:01.260 --> 00:14:03.330
the wire and the only
JavaScript involved initially in our

262
00:14:03.330 --> 00:14:06.210
example, right. Happened on the
server. Yes. But then let's

263
00:14:06.210 --> 00:14:09.750
say I start sorting and
paging and moving through this

264
00:14:09.810 --> 00:14:12.450
table of maybe infinite length.
Sure. Let's say I'm going

265
00:14:12.450 --> 00:14:14.280
to do one I'm one
of those infinite scroll deals.

266
00:14:14.370 --> 00:14:17.190
Okay. So now I've got
a JavaScript event that's going

267
00:14:17.190 --> 00:14:18.840
to happen on the client.
That's going to notice that

268
00:14:18.840 --> 00:14:21.360
I'm scrolling right now. I'm
going to use JavaScript to

269
00:14:21.360 --> 00:14:24.540
make a call back to
node, right. To a different

270
00:14:24.540 --> 00:14:27.990
controller to get more data.
Yeah, exactly. So you can

271
00:14:27.990 --> 00:14:30.750
basically have a new route
that will, that you can

272
00:14:30.750 --> 00:14:34.140
just Ajax to, for example.
Okay. So, so yeah, all

273
00:14:34.140 --> 00:14:38.850
of that is happening at
different. So it's important as,

274
00:14:38.850 --> 00:14:41.010
as wonderful as it is
to do JavaScript on the

275
00:14:41.010 --> 00:14:44.010
front and the back, it
is important to mentally separate

276
00:14:44.010 --> 00:14:45.720
the front end from the
back end. So that don't

277
00:14:46.200 --> 00:14:49.350
criss cross the wires. That
is it. Do I want

278
00:14:49.350 --> 00:14:53.180
to share, like, is that
an attractive thing and no,

279
00:14:53.200 --> 00:14:54.710
like I'm using JavaScript on
both ends. Should I have

280
00:14:54.710 --> 00:14:58.060
the same model on client
services? Sure, absolutely. You can

281
00:14:58.060 --> 00:15:00.670
absolutely do. Okay. So that
brings up an interesting point.

282
00:15:00.670 --> 00:15:02.440
Let's say that we're or
were you kind of using

283
00:15:02.440 --> 00:15:03.970
our little trite example? Let's
say that we're turning a

284
00:15:03.970 --> 00:15:07.450
list of people to yellow
pages. So I've got a,

285
00:15:07.660 --> 00:15:10.450
an object in JavaScript that
represents people, first name and

286
00:15:10.450 --> 00:15:13.000
last name and age and
things like that. So a

287
00:15:13.120 --> 00:15:15.490
very first time someone hits
the page. It could be

288
00:15:15.490 --> 00:15:17.920
a user, could be the
Google bot. So I definitely

289
00:15:17.920 --> 00:15:21.820
need HTML to get returned.
I do my template matching

290
00:15:21.820 --> 00:15:23.230
and I, and I do
my route matching and I

291
00:15:23.230 --> 00:15:26.830
generate HTML and I serve
HTML. But now I'm on

292
00:15:26.830 --> 00:15:30.670
the client side, correct? Doing
clients. I, things paging. Maybe

293
00:15:30.670 --> 00:15:32.710
I scroll down with my
infinite scroll. I see an

294
00:15:32.710 --> 00:15:35.650
event. I call back with
Ajax and I say, go

295
00:15:35.650 --> 00:15:39.100
give me more people. Right.
I'm thinking about people on

296
00:15:39.100 --> 00:15:41.950
the client and on the
server now, now rather than

297
00:15:41.950 --> 00:15:45.610
it calling Jade, can I
just go to the model,

298
00:15:45.610 --> 00:15:47.540
grab a bunch of people,
put them in a, a

299
00:15:47.560 --> 00:15:51.250
Ray. I just go flying
across as Jason. Yes. Now

300
00:15:51.250 --> 00:15:54.970
it's Jason. And in, in
this particular case though, you're

301
00:15:55.270 --> 00:15:59.980
because you're not changing the
HTML from the templating side

302
00:15:59.980 --> 00:16:01.840
of things, it's going to
have to stay all on

303
00:16:01.840 --> 00:16:05.770
the client side. So you
would, you'd probably use Zane

304
00:16:05.770 --> 00:16:09.190
jQuery or backbone or something
that will allow you to

305
00:16:09.220 --> 00:16:12.700
modify the Dom as you
go along. Okay. So then

306
00:16:12.700 --> 00:16:15.580
I bring that, that person,
that list of people across

307
00:16:15.580 --> 00:16:19.000
the wire and there's no
real deserialization point. I mean,

308
00:16:19.000 --> 00:16:21.700
it's just Jason at that
point. Yeah. Right. Absolutely. Jason

309
00:16:21.700 --> 00:16:24.070
is, is our data model.
If you want to think

310
00:16:24.070 --> 00:16:25.570
of it that way, like
it is, it is the

311
00:16:25.570 --> 00:16:28.600
crux of it. It's our
data structure. It's the crux

312
00:16:28.600 --> 00:16:32.410
of all data going back
and forth. We don't really

313
00:16:32.410 --> 00:16:36.400
use XML very much. We
don't really use, you know,

314
00:16:36.490 --> 00:16:40.120
most of the other options,
we just stick with Jason

315
00:16:40.390 --> 00:16:42.760
as much as possible because
it's a, it's a job.

316
00:16:43.450 --> 00:16:45.850
Right. It's, it's, it's kind
of funny, but it's running

317
00:16:45.850 --> 00:16:48.910
code. We're like, literally we're,
we're blurring the line between

318
00:16:48.910 --> 00:16:52.210
the byte code that is
JavaScript and, and data. Right.

319
00:16:52.270 --> 00:16:54.580
Absolutely. And, and, but it's
beautiful because you don't have

320
00:16:54.580 --> 00:16:56.470
to actually do anything to
the object. You can just

321
00:16:56.470 --> 00:16:59.200
leave the object as it
is and just read from

322
00:16:59.200 --> 00:17:02.020
it. Right? Yeah. There's no
impedance mismatch. I mean, I'm

323
00:17:02.020 --> 00:17:05.560
constantly trying to deserialize things
and serialize things and move

324
00:17:05.560 --> 00:17:07.420
back and forth. And that
was what that's, what was

325
00:17:07.420 --> 00:17:10.240
no fun about XML, right?
No matter what language you

326
00:17:10.240 --> 00:17:13.810
used to read from it.
Exactly. Yeah. Okay. So then

327
00:17:13.810 --> 00:17:15.910
I would take that, that
on the client, I might

328
00:17:15.910 --> 00:17:18.190
have a model view controller.
I might have angular, Ember,

329
00:17:18.190 --> 00:17:21.760
whatever, then extend that table
so that my first load

330
00:17:21.760 --> 00:17:26.770
returned HTML and my subsequent
interactions might be, might be

331
00:17:26.770 --> 00:17:30.190
Java script. Right. So then
on the client side, I

332
00:17:30.190 --> 00:17:32.830
have a controller that might
be making those Jason calls.

333
00:17:33.160 --> 00:17:35.350
Sure. Right. So I mean,
what you could do is,

334
00:17:36.460 --> 00:17:38.380
so you, you, you could
either have a client side

335
00:17:38.380 --> 00:17:41.140
controller I E via backbone
or something like that. Or

336
00:17:41.140 --> 00:17:44.590
you could just use Ajax
and just call back to

337
00:17:44.620 --> 00:17:48.580
your server side application and
have that controller take care

338
00:17:48.580 --> 00:17:51.420
of stuff as someone who
Is thinking about getting involved

339
00:17:51.420 --> 00:17:52.830
in this or learning about
it. And I'm sure a

340
00:17:52.830 --> 00:17:55.620
lot of the listeners are
interested in this. There seems

341
00:17:55.620 --> 00:17:58.710
to be such an intensity
of feeling around how to

342
00:17:58.710 --> 00:18:03.990
properly structure things. And it's
unclear from the uninitiated point

343
00:18:03.990 --> 00:18:08.760
to myself as well, being
an uninitiated person, that there

344
00:18:08.760 --> 00:18:11.430
are lots of people who
speak with these declarative statements,

345
00:18:11.970 --> 00:18:15.270
right? Yes. They'll shout do
their stuff like this. Absolutely.

346
00:18:15.360 --> 00:18:16.800
And then there's people who
are a little bit more

347
00:18:16.800 --> 00:18:19.980
like we really haven't figured
it out yet, and we're

348
00:18:19.980 --> 00:18:22.380
just making declarative statements to
see if it will stick.

349
00:18:22.830 --> 00:18:25.710
Right. Is there a right
way to make an app

350
00:18:25.710 --> 00:18:29.550
yet on the client? Are
we just still putting noun

351
00:18:29.550 --> 00:18:33.140
dot JS together to figure
out what feels right? I

352
00:18:33.140 --> 00:18:37.490
think, I think there's some
conventions, but I mean, the

353
00:18:37.490 --> 00:18:40.670
web is constantly changing. There's,
there's no way that I

354
00:18:40.670 --> 00:18:44.510
would ever say, this is
how you do it. And

355
00:18:44.510 --> 00:18:46.460
there's, we're not going to
talk about it anymore because

356
00:18:46.460 --> 00:18:48.110
this is how we do
it. And I would never

357
00:18:48.110 --> 00:18:51.560
say that things are changing
all the time. If you

358
00:18:51.620 --> 00:18:54.140
talk to somebody, you know,
a year ago, they would

359
00:18:54.140 --> 00:18:56.240
have said single page apps,
why would you do that?

360
00:18:56.300 --> 00:18:59.300
You know? So, So these
are real, it's a religious

361
00:18:59.300 --> 00:19:01.130
argument. It's never going to
get solved as a religion.

362
00:19:01.380 --> 00:19:05.150
It's, it's the same thing
as tabs versus spaces or

363
00:19:05.180 --> 00:19:08.960
semi-colons, or not semi-colons or,
you know, where do you

364
00:19:08.960 --> 00:19:13.970
put your opening curly brace?
There, there are conventions, there

365
00:19:13.970 --> 00:19:18.770
are some generally accepted things,
but there are also so

366
00:19:18.770 --> 00:19:21.890
many arguments one way or
the other, but I don't

367
00:19:21.890 --> 00:19:23.660
think it really matters to
me. So you're not a,

368
00:19:23.690 --> 00:19:27.590
you don't fall in the
religious zealot. I don't, I

369
00:19:27.590 --> 00:19:30.920
really don't. I'm the type
of person who uses things

370
00:19:30.950 --> 00:19:32.930
the way I feel like
it. I mean, I, I

371
00:19:32.930 --> 00:19:36.290
currently do hardware hacking with
node. I build robots. So,

372
00:19:36.290 --> 00:19:39.410
which is something that nobody
ever does. Let's talk about

373
00:19:39.410 --> 00:19:41.720
that. So you had mentioned
the idea that there are

374
00:19:41.720 --> 00:19:44.450
C plus plus bindings V8,
and how, you know, when

375
00:19:44.450 --> 00:19:47.450
I think of JavaScript, I'm
still kind of old school

376
00:19:47.450 --> 00:19:49.550
and that I think of
this high level interpreted language.

377
00:19:49.550 --> 00:19:53.330
And I forget that we're
talking about serious jetted Al

378
00:19:53.360 --> 00:19:55.670
like almost as if JavaScript
were close to the metal,

379
00:19:55.760 --> 00:19:58.010
right? Like C or C
plus plus. Absolutely. But I

380
00:19:58.010 --> 00:20:02.060
think it's really important to
recognize that that JavaScript is

381
00:20:02.060 --> 00:20:04.790
not a classical language. So
when people come to JavaScript

382
00:20:04.790 --> 00:20:11.600
from C plus plus, or
even Python or C, they,

383
00:20:11.600 --> 00:20:14.210
they expect there to be
these classes and then you

384
00:20:14.210 --> 00:20:16.910
have private and protected and
public and, and all these

385
00:20:16.910 --> 00:20:19.370
other things JavaScript doesn't really
have that JavaScript is a

386
00:20:19.370 --> 00:20:22.190
functional language. And so it's
like, Well, it's not functional,

387
00:20:22.230 --> 00:20:25.460
like Haskell, is it or
old camel? We'll say classical.

388
00:20:25.460 --> 00:20:28.730
I think you're meaning classically
object oriented. No. So, so

389
00:20:28.730 --> 00:20:31.340
JavaScript is definitely object oriented.
When I say classical, I

390
00:20:31.340 --> 00:20:35.850
say things more like classes.
So you, you have the,

391
00:20:35.850 --> 00:20:39.410
this class and, and JavaScript
kind of does things like

392
00:20:39.410 --> 00:20:42.290
that with its protein. I
would think that, that it's

393
00:20:42.290 --> 00:20:46.550
not a classically object oriented
language in that it doesn't

394
00:20:46.550 --> 00:20:50.830
have the kind of visibility
scoping and object hierarchy. I

395
00:20:50.830 --> 00:20:52.510
would think of it as
is it pretty straight forward

396
00:20:52.690 --> 00:20:56.700
prototypical language, Right? Well, yeah,
so it's definitely prototypical, but

397
00:20:56.730 --> 00:21:00.150
the reason I call it
functional is that it, it

398
00:21:00.780 --> 00:21:04.620
it's more like scheme than
it is like Java. Right,

399
00:21:04.620 --> 00:21:08.070
right. So, Brenda, Nick, I
heard him give a talk

400
00:21:08.320 --> 00:21:11.190
a couple of weeks ago.
He said, they told me

401
00:21:11.190 --> 00:21:12.720
that it needs to look
like Java, but it needs

402
00:21:12.720 --> 00:21:14.670
to act like scheme. And
I was like, that's a

403
00:21:14.670 --> 00:21:17.190
really interesting way of thinking
about it. Okay. So explain

404
00:21:17.190 --> 00:21:18.780
that to people who may
not be familiar with schemer,

405
00:21:18.780 --> 00:21:21.050
man. And I play with
that in school. Sure. So,

406
00:21:21.050 --> 00:21:26.640
so scheme is so basically
take all notions of, of

407
00:21:27.690 --> 00:21:30.990
Forget everything you've learned in
the last 20 years And,

408
00:21:30.990 --> 00:21:34.070
and start all over. And
so if you're familiar with

409
00:21:34.100 --> 00:21:38.130
lisp scheme and lisp are
our friends, it's this idea

410
00:21:38.130 --> 00:21:42.120
that you can pass functions
into other functions Without any

411
00:21:42.120 --> 00:21:44.610
impedance. It's not a big
deal, like in C plus

412
00:21:44.610 --> 00:21:47.430
plus it's like partners to
partners that think that there

413
00:21:47.430 --> 00:21:48.900
are no pointers. And John,
this is a big deal

414
00:21:48.900 --> 00:21:52.380
to pass a function through
function And, and passing by

415
00:21:52.380 --> 00:21:59.580
reference is just kind of
default. And, and so JavaScript

416
00:21:59.580 --> 00:22:02.220
is special because you can,
you can, one of your

417
00:22:02.220 --> 00:22:05.190
parameters can be a function
and you can return a

418
00:22:05.190 --> 00:22:08.880
function from a function. So
Like you could actually even

419
00:22:08.880 --> 00:22:11.100
create a function. You can
create She from within a

420
00:22:11.100 --> 00:22:16.320
function. Yeah. And so it's,
it's this it's weird. Right?

421
00:22:16.380 --> 00:22:18.840
Well, I think it brings
up a point that you

422
00:22:18.840 --> 00:22:22.650
can't just drop in to
JavaScript after 10 or 15

423
00:22:22.650 --> 00:22:25.170
years of doing C plus
plus or C sharp and

424
00:22:25.320 --> 00:22:28.740
expect to have the idioms
and the patterns in your

425
00:22:28.740 --> 00:22:31.380
head just ready and available.
Because if you try to

426
00:22:31.380 --> 00:22:33.780
write it as if it
were she Oh. And believe

427
00:22:33.780 --> 00:22:36.930
me, I've tried doing that
and it's ugly. Right. So

428
00:22:36.930 --> 00:22:39.810
you have to think yourself,
gosh, it's just not intuitive

429
00:22:39.810 --> 00:22:42.990
to me to pass and
functions. Absolutely. I think, I

430
00:22:42.990 --> 00:22:45.390
think one of the biggest
kind of the easiest way

431
00:22:45.390 --> 00:22:47.250
to think about that is
when you start talking about

432
00:22:47.250 --> 00:22:52.320
asynchronicity in, in JavaScript. So
this notion that, so whenever

433
00:22:52.320 --> 00:22:56.040
I was whenever I did
C plus plus, if it

434
00:22:56.040 --> 00:23:00.000
was very synchronous, so if
a then, so like, you

435
00:23:00.000 --> 00:23:02.790
know, line one goes and
then line two goes and

436
00:23:02.790 --> 00:23:06.390
line three goes Right. Extremely
procedural and very clear. Right.

437
00:23:06.570 --> 00:23:10.500
But because of the, the
single stream or the single

438
00:23:10.500 --> 00:23:14.400
threaded nature of JavaScript, it
doesn't work that way. You

439
00:23:14.400 --> 00:23:17.880
don't, you don't send off
a command and then wait

440
00:23:17.880 --> 00:23:19.590
for it to come back
before the next one goes,

441
00:23:19.590 --> 00:23:22.380
you just start sending them
back. And then when a

442
00:23:22.380 --> 00:23:26.070
function finishes, it'll come back
and we'll call you back.

443
00:23:26.130 --> 00:23:28.680
Right. So, so what we
do is we actually have

444
00:23:28.680 --> 00:23:32.010
this notion of callbacks, right?
So in, in C plus,

445
00:23:32.010 --> 00:23:36.000
plus when you have a
function, you return like a

446
00:23:36.000 --> 00:23:39.090
variable or like a, a
bullion or an int or

447
00:23:39.450 --> 00:23:43.170
something like that, unless it's
a Boyd. Right. But in

448
00:23:43.170 --> 00:23:50.270
JavaScript, if, when you're for
you want the, when you

449
00:23:50.270 --> 00:23:55.340
send an instruction off to
the, to the server, then

450
00:23:55.400 --> 00:23:59.300
you, you are notified that
it is done by using

451
00:23:59.300 --> 00:24:02.000
a callback. And what a
callback is, is it's generally

452
00:24:02.000 --> 00:24:07.790
an anonymous function that executes
after the one has finished

453
00:24:07.790 --> 00:24:10.510
executing. Okay. So you're, you're
basically getting a promise that

454
00:24:10.510 --> 00:24:12.460
I'll call you back when
I'm done, and then you're

455
00:24:12.580 --> 00:24:15.160
free to do whatever you
want to. Exactly. Exactly. Okay.

456
00:24:15.190 --> 00:24:19.120
So, but it's a little
weird because you're sending this

457
00:24:19.120 --> 00:24:22.720
function through this other function
to know when the first

458
00:24:22.720 --> 00:24:27.020
function is done. Right. And
that's really confusing, especially for,

459
00:24:27.040 --> 00:24:30.250
for folks who are used
to things being very serialized.

460
00:24:31.450 --> 00:24:35.350
So especially if you're used
to multi threads, threading has

461
00:24:35.350 --> 00:24:38.110
gone like, say goodbye. This
is where I, I have

462
00:24:38.110 --> 00:24:39.760
so much trouble when I'm
thinking about things on the

463
00:24:39.760 --> 00:24:42.760
client side, because there's feels
like there's so much more

464
00:24:42.760 --> 00:24:45.640
maintenance of state. I'm building
these state machines on the

465
00:24:45.640 --> 00:24:48.760
client side and I'm inevitably
getting things out of sync.

466
00:24:48.970 --> 00:24:52.390
Right. If I look at
really complicated apps like Gmail

467
00:24:52.390 --> 00:24:56.050
or Trello that are just
like big JavaScript apps and

468
00:24:56.050 --> 00:24:59.440
like, how are they keeping
it all together? Like somehow

469
00:24:59.440 --> 00:25:03.010
I just imagine it, the
way I would phrase it

470
00:25:03.010 --> 00:25:05.680
is that I imagine the
state just degrading over time

471
00:25:05.680 --> 00:25:08.290
and then just declaring state
bankruptcy and hitting F five

472
00:25:08.290 --> 00:25:10.780
and starting from scratch. What
I mean, I just don't

473
00:25:10.780 --> 00:25:12.490
see how that app, like,
that could run for so

474
00:25:12.490 --> 00:25:15.310
long without something getting out
of sync and then just

475
00:25:15.310 --> 00:25:16.870
giving up. Right. And the
way that we do that

476
00:25:16.870 --> 00:25:21.490
is through callbacks and, and
basically coming back to center.

477
00:25:21.490 --> 00:25:26.470
So we have this notion
in, in robotics where if

478
00:25:26.470 --> 00:25:28.480
you're just doing dead wrecking
game, and what that means

479
00:25:28.480 --> 00:25:30.820
is let's say you're counting.
Like if you close your

480
00:25:30.820 --> 00:25:32.860
eyes and you try and
walk in a straight line,

481
00:25:33.220 --> 00:25:37.600
right. It's really hard because
especially if you're right dominant.

482
00:25:37.600 --> 00:25:39.130
And so like, if you
write with your right hand,

483
00:25:39.340 --> 00:25:42.700
you probably also have more
emphasis on your right foot.

484
00:25:43.690 --> 00:25:45.880
So if, if you close
your eyes and you try

485
00:25:45.880 --> 00:25:48.250
to walk in a straight
line, you will kind of

486
00:25:48.250 --> 00:25:49.660
veer to the right a
little bit. You have no

487
00:25:49.660 --> 00:25:52.900
reference point, right. Or to
the left, I guess. But,

488
00:25:53.110 --> 00:25:55.510
but then if you reach
out and touch a wall,

489
00:25:55.870 --> 00:25:57.430
right. And you know that
you're supposed to be arms

490
00:25:57.430 --> 00:26:00.430
length from the wall, then
you can correct yourself. Oh.

491
00:26:00.430 --> 00:26:02.620
And then your perception of
where you are completely reset.

492
00:26:02.620 --> 00:26:04.060
It's like when you're walking
at night with your eyes

493
00:26:04.060 --> 00:26:06.190
closed and you're like, Oh,
I'm not where I thought

494
00:26:06.190 --> 00:26:08.260
I was. And now I
am where I thought I

495
00:26:08.260 --> 00:26:11.020
was. Exactly. So, so you
correct yourself. So, so you

496
00:26:11.020 --> 00:26:12.970
can still keep your eyes
closed, but if you use

497
00:26:12.970 --> 00:26:16.510
some external information, you can
find yourself back to where

498
00:26:16.510 --> 00:26:20.020
you need to be. So,
so we use callbacks to

499
00:26:20.020 --> 00:26:22.330
kind of do that same
exact thing. We, we, we

500
00:26:22.330 --> 00:26:25.660
veer off, we let the,
we send instructions out and

501
00:26:25.660 --> 00:26:27.520
then we wait for them
to come back. And then

502
00:26:27.520 --> 00:26:29.260
once they come back, okay,
now we're still on our

503
00:26:29.260 --> 00:26:31.810
side. Okay. And then that
is our, we bring our

504
00:26:31.810 --> 00:26:34.390
state machine back to a
known state known good state.

505
00:26:34.480 --> 00:26:37.240
Exactly. Which is effectively refreshing
and returning to a known

506
00:26:37.240 --> 00:26:41.830
state. Right. Okay. That makes
sense. Interesting. So you're thinking

507
00:26:41.830 --> 00:26:44.580
that people on the front
end find themselves in JavaScript,

508
00:26:44.580 --> 00:26:47.550
just because the lure of,
well, I'm already writing JavaScript

509
00:26:47.550 --> 00:26:49.620
on the client. Right. I
might as well just do

510
00:26:49.620 --> 00:26:53.130
a little work on the
server. Right? Exactly. Do you

511
00:26:53.130 --> 00:26:55.890
think that that brings a
new kind of person to

512
00:26:55.890 --> 00:26:59.430
the server side as if
maybe for lack of being

513
00:26:59.430 --> 00:27:01.680
a bit, maybe a little
bit of a prejudice, a

514
00:27:01.680 --> 00:27:04.830
snooty person, like the non
computer science people, the non

515
00:27:04.830 --> 00:27:07.650
software engineering, maybe the English
majors. Do we really want

516
00:27:07.650 --> 00:27:11.060
the English majors on the
server side? English majors? Absolutely.

517
00:27:11.060 --> 00:27:14.720
One of my favorite people
in the entire world who

518
00:27:14.990 --> 00:27:19.040
is easily, one of the
best JavaScript developers I've ever

519
00:27:19.040 --> 00:27:23.840
met, she's an English major.
But, but it, it, it,

520
00:27:23.990 --> 00:27:26.870
it really does open up
the doors to people who

521
00:27:27.170 --> 00:27:32.120
don't necessarily think the same
way, who don't necessarily see

522
00:27:32.120 --> 00:27:36.530
things the same way, but
can absolutely contribute in a

523
00:27:36.530 --> 00:27:41.450
very meaningful way. Do I'm
imagining, trying to think about

524
00:27:41.450 --> 00:27:43.910
like what this means to
my kind, my.net friends and

525
00:27:43.910 --> 00:27:47.720
my.net. People who rely not
just on the IDE, although

526
00:27:47.720 --> 00:27:50.090
they could certainly do their
work in sublime, but also

527
00:27:50.090 --> 00:27:52.700
things I can tell a
sense. Do you find yourself

528
00:27:52.760 --> 00:27:55.880
when you're starting out just
making all sorts of syntax

529
00:27:55.880 --> 00:28:01.880
errors and mistakes? Absolutely never
works. Yeah, Absolutely. There's, it's

530
00:28:01.880 --> 00:28:06.240
really easy to, especially if
you have a poor, like,

531
00:28:06.240 --> 00:28:09.410
if, if, if you're slightly
dyslexic and you keep changing

532
00:28:09.410 --> 00:28:11.180
a couple of letters in
your variable names, I mean,

533
00:28:11.180 --> 00:28:15.890
that just messes a person
up. But fortunately the error

534
00:28:15.920 --> 00:28:18.500
catching is, is really quite
good and JavaScript. And so

535
00:28:18.500 --> 00:28:21.980
there'll be like, eh, line
such and such. That's no

536
00:28:21.980 --> 00:28:25.160
bueno, you know? So Are
there people who, who, who,

537
00:28:25.400 --> 00:28:27.680
who need that initial unit
test, I'd like to say

538
00:28:27.680 --> 00:28:30.530
that compilation is the first
unit test. Some people have

539
00:28:30.530 --> 00:28:34.100
suggested like running JS, lint
right before you hit FIS.

540
00:28:34.310 --> 00:28:37.810
Absolutely. Yeah. And you can
certainly run JS line. I

541
00:28:37.820 --> 00:28:41.930
use, I personally use sublime
text and for a little

542
00:28:41.930 --> 00:28:45.470
while I had a linter
that would just constantly be

543
00:28:45.470 --> 00:28:48.410
running through my code. So
every time I clicked, I

544
00:28:48.410 --> 00:28:51.710
press save, it would run
through and it would highlight,

545
00:28:51.710 --> 00:28:55.670
Hey, you forgot to semi-colon
here. Or you have never,

546
00:28:56.360 --> 00:28:59.510
this variable doesn't exist elsewhere.
And you realize, Oh, I

547
00:28:59.570 --> 00:29:02.780
misspelled something or, or whatever.
So that's kind of like

548
00:29:02.780 --> 00:29:07.490
a nice pre Yeah. Little
compilation step there. But did

549
00:29:07.520 --> 00:29:09.050
you say that you used
to do that? You don't

550
00:29:09.050 --> 00:29:11.450
do it anymore. Right? I
don't do it anymore because

551
00:29:11.450 --> 00:29:12.740
I find it to be
a bit of a crutch.

552
00:29:12.830 --> 00:29:15.170
And so I, I felt
like I needed to level

553
00:29:15.170 --> 00:29:17.660
up. And so I wanted
to, so I turned it

554
00:29:17.660 --> 00:29:20.450
off so that if I
did make errors, I would

555
00:29:20.450 --> 00:29:22.220
see the error message and
then it would have to

556
00:29:22.220 --> 00:29:25.010
figure out what, why the
error message came out. And

557
00:29:25.010 --> 00:29:26.620
I actually have found that
I've become a better coder

558
00:29:26.630 --> 00:29:29.420
Because of that. Really? Yeah.
There's a lot of debate

559
00:29:29.480 --> 00:29:32.180
amongst the visual studio crowd
that, you know, is IntelliSense

560
00:29:32.180 --> 00:29:35.510
a crutch. Does it rot
the brain? I think that

561
00:29:35.510 --> 00:29:38.480
you can get really into
declarative statements when you start

562
00:29:38.480 --> 00:29:41.640
talking like that. But at
the same time though, I

563
00:29:41.680 --> 00:29:44.740
remember when I was working
at Nike maybe 15 years

564
00:29:44.740 --> 00:29:47.320
ago, and it was like
a big black and white

565
00:29:47.320 --> 00:29:50.650
X, X terminal, 30 inch
X terminal kind of thing,

566
00:29:50.680 --> 00:29:56.200
giant monitors, big CRTs. Right,
right. Green-screen VI and a

567
00:29:56.440 --> 00:30:00.100
giant thousand page book of
Java. Right. No help, you

568
00:30:00.100 --> 00:30:03.180
know, and a compile took
10 minutes. Absolutely. So I

569
00:30:03.190 --> 00:30:05.500
realized that people who are
listening, who may be older

570
00:30:05.500 --> 00:30:08.230
than I have those tales
of like, you know, 30

571
00:30:08.230 --> 00:30:11.850
minute compiles. Right. Right. But
I wonder if you had

572
00:30:11.870 --> 00:30:15.010
let JS Lindt running when
you hit save, I've heard

573
00:30:15.010 --> 00:30:17.410
of people having things like
auto test going all the

574
00:30:17.410 --> 00:30:22.380
time. Right. Absolutely. Yeah. And,
and especially, so you can

575
00:30:22.380 --> 00:30:24.810
also, as you're pushing things
up to the server, you

576
00:30:24.810 --> 00:30:28.170
can have continuous integration that
will basically run all of

577
00:30:28.170 --> 00:30:31.110
your tests. I'm very much
a pro test driven development

578
00:30:31.140 --> 00:30:34.440
type person. So every time
you push to production, it

579
00:30:34.440 --> 00:30:37.470
makes sure that everything works.
And you, you run, if

580
00:30:37.470 --> 00:30:40.260
you, if you've ever heard
of grunt, it's a command

581
00:30:40.260 --> 00:30:42.750
line tool that allows you
to automate all the things.

582
00:30:43.470 --> 00:30:46.770
And so with grunt, you
can actually automate your tests

583
00:30:46.770 --> 00:30:49.410
or automate linters and things
like that. So that before

584
00:30:49.410 --> 00:30:52.140
you press that five, all
of those things get run.

585
00:30:52.650 --> 00:30:54.330
What do you recommend people
use for unit tests? If

586
00:30:54.330 --> 00:30:56.400
I was going to graduate
from hello world to hello

587
00:30:56.400 --> 00:30:58.620
world with tests, right? What
should I, what should I

588
00:30:58.620 --> 00:30:59.970
have on my machine? I
should have noticed should have

589
00:30:59.970 --> 00:31:01.560
NPM or should have an
editor. And I should have

590
00:31:01.560 --> 00:31:05.340
what else I would recommend.
Mocha mocha to me is

591
00:31:05.340 --> 00:31:10.230
just a, it's a beautiful
JavaScript testing language. It's really

592
00:31:10.230 --> 00:31:15.300
intuitive. Especially if you understand,
if, if, if you're comfortable

593
00:31:15.300 --> 00:31:19.350
with JavaScript, comfortable, really being
a light term, like you

594
00:31:19.350 --> 00:31:20.400
don't even have to be,
you don't have to be

595
00:31:20.400 --> 00:31:23.820
like on a scale of
a total newb to Brendan

596
00:31:23.820 --> 00:31:26.910
Eich, you know, a level
nine, like it's, you can

597
00:31:26.910 --> 00:31:29.970
be a level four, just
be comfortable with jQuery. I

598
00:31:29.970 --> 00:31:31.800
like your uses of levels.
I'm going to give you,

599
00:31:32.250 --> 00:31:34.080
I'm going to give you
plus two charisma just for

600
00:31:34.080 --> 00:31:38.550
you. Yeah. Thank you. So
yeah, if you're just, if

601
00:31:38.550 --> 00:31:41.790
you're a jQuery is, is
good enough. You'll you'll like

602
00:31:41.790 --> 00:31:45.540
mocha. Cool. So Rick COVID
thanks so much for talking.

603
00:31:45.690 --> 00:31:48.030
Thank you. I really appreciate
it. This is fun. We'll

604
00:31:48.030 --> 00:31:51.990
put links to Carol on
Twitter and her website, and

605
00:31:51.990 --> 00:31:54.810
hopefully perhaps links to your
slides and information about your

606
00:31:54.810 --> 00:31:57.780
talk here at the jQuery
conference. That'd be fantastic. This

607
00:31:57.780 --> 00:32:00.000
has been another episode of
Hanselminutes and we'll see you

608
00:32:00.000 --> 00:32:00.750
again next week.

