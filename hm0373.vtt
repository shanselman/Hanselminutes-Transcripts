WEBVTT FILE

1
00:00:12.210 --> 00:00:17.340
From Hansel minutes.gov it's Hansel
minutes. Our weekly discussion with

2
00:00:17.350 --> 00:00:21.840
web developer and technologists, Scott
handsomer. This is Lawrence Ryan announcing

3
00:00:21.840 --> 00:00:28.440
show number three 73. Recorded
live Thursday, May 23rd, 2013. Support for

4
00:00:28.440 --> 00:00:31.680
Hansel minutes is provided by
teller offering the best and

5
00:00:31.680 --> 00:00:40.980
developer tools and support online@telerikdotcomandmyfranklins.net
makers of gesture pack a

6
00:00:40.980 --> 00:00:44.910
powerful gesture, recording and recognition
system for Microsoft connect for

7
00:00:44.910 --> 00:00:51.930
windows developers details@gesturepak.com. In this
episode, Scott talks with Mark

8
00:00:51.930 --> 00:00:55.290
Rendell about making the change
from desktop to web development.

9
00:00:58.970 --> 00:01:01.340
Hanselman. This is another episode
of Hansel minutes and I've

10
00:01:01.340 --> 00:01:04.070
got my buddy Mark Rendell
on the phone from England.

11
00:01:04.280 --> 00:01:07.010
How are you? I'm fine.
Thanks. How are you? Lovely,

12
00:01:07.010 --> 00:01:09.770
lovely. You and I always
have these kind of spirited

13
00:01:09.770 --> 00:01:13.790
discussions slash arguments. I like
to call them lower lowercase,

14
00:01:13.790 --> 00:01:19.040
a arguments, and you have
been a desktop guy for,

15
00:01:19.070 --> 00:01:21.920
for a long time. I
mean, putting out 20 years

16
00:01:23.420 --> 00:01:26.690
and counting and you do
like C and needed C

17
00:01:26.690 --> 00:01:28.760
and C plus plus, I
mean, you really made the

18
00:01:28.760 --> 00:01:40.370
desktop saying, yeah, went through
windows 3.15 and all those

19
00:01:40.370 --> 00:01:54.470
things with lots of different
languages, which is probably for

20
00:01:54.470 --> 00:01:59.030
the best and then through
when those forms and then

21
00:01:59.030 --> 00:02:04.550
WPF and Silverlight. So yeah,
hardcore desktop developer didn't really

22
00:02:07.700 --> 00:02:10.790
had much to offer the
world. Yeah. And web apps

23
00:02:11.090 --> 00:02:13.910
have, were, you know, were
documents effectively for a very,

24
00:02:13.910 --> 00:02:17.330
very long time. And even
until recently, it was just

25
00:02:17.330 --> 00:02:20.390
like you click and then
the entire page refreshes. So

26
00:02:20.390 --> 00:02:22.940
you were basically kind of
reading this book and going

27
00:02:22.940 --> 00:02:25.280
from page to page to
page. And I always say

28
00:02:25.280 --> 00:02:27.620
that Gmail is when we
kind of first noticed, or

29
00:02:27.620 --> 00:02:31.460
maybe maybe outlook web access
was when things started to

30
00:02:31.460 --> 00:02:33.560
change. And you said, Hey,
this could be an app.

31
00:02:34.490 --> 00:02:38.000
Yeah. Even then you were
still not convinced. No, I

32
00:02:38.000 --> 00:02:43.550
just, it was just a,
you loaded an application on

33
00:02:43.550 --> 00:02:46.130
your desktop and it's loaded.
And then it's pulling data

34
00:02:46.130 --> 00:02:50.150
and doing interesting things with
it and generating graphs or,

35
00:02:50.990 --> 00:02:54.260
or exporting data and interacting
with offers and all the

36
00:02:54.410 --> 00:02:58.520
other things you've got on
your desktop. And I just

37
00:02:58.990 --> 00:03:03.490
didn't see how web applications
could compete with that until

38
00:03:03.490 --> 00:03:07.930
quite recently. And it is
the last couple of years.

39
00:03:09.900 --> 00:03:13.800
I mean, you were in
build 2011, still arguing against

40
00:03:14.430 --> 00:03:21.420
JavaScript itself. I was, although
funnily enough, I went off.

41
00:03:22.350 --> 00:03:25.920
So they handed out the
slate of bill. And I

42
00:03:25.920 --> 00:03:29.010
went off to my hotel
that evening and motion application

43
00:03:29.010 --> 00:03:32.100
in C sharp, for example.
But as I got more

44
00:03:32.100 --> 00:03:37.710
into working with building windows
eight apps, I actually started

45
00:03:37.710 --> 00:03:43.800
writing the, the UI code
in C shop and using

46
00:03:43.800 --> 00:03:46.440
the icing code whites and
all that good stuff. But

47
00:03:46.440 --> 00:03:51.090
I started doing the UIs
in HTML just because I

48
00:03:51.090 --> 00:03:54.570
found it easier to work
with, with CSS for doing

49
00:03:55.100 --> 00:03:57.930
the responsive screen. And when
you went to sentence different

50
00:03:57.930 --> 00:04:03.270
States and that sort of
thing, and yeah, having been

51
00:04:05.130 --> 00:04:08.220
quite a fan of XAML
for quite a long time,

52
00:04:08.610 --> 00:04:11.910
I suddenly got into doing
things with HTML and CSS,

53
00:04:11.910 --> 00:04:18.210
and I'll just actually for
describing this does appear to

54
00:04:18.210 --> 00:04:22.140
be better in, in many
ways, Certainly our responsive one.

55
00:04:22.140 --> 00:04:24.650
I think that's the thing
that, you know, XAML is

56
00:04:25.350 --> 00:04:28.680
ridiculously powerful almost to the
point where the, well, not

57
00:04:28.680 --> 00:04:33.660
almost to the point the,
the on ramp to XAML

58
00:04:33.840 --> 00:04:37.530
is pretty steep, you know,
to really be good. Yeah.

59
00:04:37.950 --> 00:04:40.190
But I think, I mean,
the OnRamp to HTML is

60
00:04:40.230 --> 00:04:43.650
more shallow. Certainly both of
them ratchet up pretty quickly

61
00:04:44.440 --> 00:04:48.090
and they're in their difficulty,
but the, the initial on-ramp

62
00:04:48.600 --> 00:04:53.070
to just animals pretty hardcore.
It is. And particularly with

63
00:04:53.070 --> 00:04:58.650
the whole MVVM and when
you get into the needing

64
00:04:58.650 --> 00:05:01.560
to write your application in
such a way that a

65
00:05:01.560 --> 00:05:06.570
designer can come along with
blend and work with just

66
00:05:06.570 --> 00:05:10.290
the, for example, not with
the underlying code. And so

67
00:05:10.290 --> 00:05:13.980
you've got kind of mock
data contexts or, or whatever

68
00:05:13.980 --> 00:05:17.640
else is going on. And
when you get into theming

69
00:05:17.640 --> 00:05:21.180
and styling with sample that
whole side of things, which

70
00:05:21.180 --> 00:05:25.500
is still in XAML is
really scary compared to CSS.

71
00:05:25.560 --> 00:05:29.370
Cause there's no CSS, for
example, no, there's, there's just

72
00:05:29.370 --> 00:05:33.600
more sample and it's just
pile on top of Zamboni

73
00:05:33.600 --> 00:05:36.710
again, to kind of resource
dictionaries and results section dictionaries

74
00:05:36.720 --> 00:05:39.930
referencing other resource dictionaries. So
we don't want to pile

75
00:05:39.930 --> 00:05:42.300
on, on XAML. What I
think is the interesting story

76
00:05:42.300 --> 00:05:45.300
here is your kind of
personal transformation and it's not

77
00:05:45.300 --> 00:05:49.200
about quitting one thing and
jumping all in on the

78
00:05:49.200 --> 00:05:52.470
other, you know, that although
those kinds of stories were

79
00:05:52.470 --> 00:05:55.740
always interesting. This is more
of a, you really just

80
00:05:55.740 --> 00:05:59.540
didn't think that the web
was nearly as useful as,

81
00:05:59.740 --> 00:06:03.680
as most people did. You
were desktop and desktop till

82
00:06:03.680 --> 00:06:09.490
the end. Yeah. I, I
honestly, a year, year and

83
00:06:09.490 --> 00:06:12.490
a half ago, I could
not have seen myself becoming

84
00:06:12.600 --> 00:06:18.970
a web developer. And that
was partly just thinking it's

85
00:06:18.970 --> 00:06:23.680
not mature enough to build
proper applications. And however far

86
00:06:23.740 --> 00:06:28.210
it catches up desktop tools
and WPF and Simon and

87
00:06:28.210 --> 00:06:31.270
all these things are gonna
stay two or three steps

88
00:06:31.270 --> 00:06:38.140
ahead of that. But just
the last last year also

89
00:06:38.530 --> 00:06:43.300
HTML five is getting more
and more support. And I

90
00:06:43.310 --> 00:06:47.230
E nine had a lot
of improvements that came along

91
00:06:47.230 --> 00:06:52.000
and I attended Metro in
the windows eight tablets. And

92
00:06:52.450 --> 00:06:56.500
I just started to think,
you know, maybe you can

93
00:06:56.500 --> 00:07:00.610
actually do something useful here
and started investigating the totals.

94
00:07:00.670 --> 00:07:03.250
And once I started investigating
the tools and the frameworks

95
00:07:03.250 --> 00:07:06.760
that were available, it was
more okay, well, I have

96
00:07:06.760 --> 00:07:08.950
this, there's some really cool
stuff here. You can actually

97
00:07:08.950 --> 00:07:12.500
do really great things with
this. Does this, does this

98
00:07:12.520 --> 00:07:14.590
make you think the desktop
is dead? Because like I

99
00:07:14.590 --> 00:07:17.710
say, people always go back
and forth with these things.

100
00:07:17.710 --> 00:07:21.040
They'll they'll declare that, Oh,
well this is clearly the,

101
00:07:21.040 --> 00:07:22.750
you know, the desktop is
going to die. Now the

102
00:07:22.750 --> 00:07:25.120
web is all there is,
but then something on the,

103
00:07:25.210 --> 00:07:27.490
on the, on the desktop
will happen. That's so amazing

104
00:07:27.490 --> 00:07:29.770
that no one can believe
it, you know? And then

105
00:07:29.770 --> 00:07:33.940
we'll, well, we'll bring the
metronome back. Yeah, absolutely. I

106
00:07:33.940 --> 00:07:40.780
mean, I I'm currently waiting
until I have enough money

107
00:07:40.780 --> 00:07:43.450
in the bank to buy
a new full tower desktop

108
00:07:43.480 --> 00:07:47.980
computer just because I want
something with a Nvidia graphics

109
00:07:47.980 --> 00:07:50.830
card and all that sort
of stuff. And they're all

110
00:07:50.830 --> 00:07:55.540
things that I still think
for a long time are

111
00:07:55.540 --> 00:08:01.060
going to be the desktop
if for no other reason

112
00:08:01.180 --> 00:08:04.150
than a data transfer and
with, for a lot of

113
00:08:04.150 --> 00:08:07.450
people, isn't at the point
yet where you can kind

114
00:08:07.450 --> 00:08:10.990
of just quickly load up
a one gigabyte raw image

115
00:08:10.990 --> 00:08:15.940
file that you've taken with
your 50 megapixel camera and

116
00:08:15.970 --> 00:08:19.990
load that into the browser
and start working with it.

117
00:08:19.990 --> 00:08:24.010
So, you know, Adobe creative
cloud, it might be called

118
00:08:24.010 --> 00:08:26.710
predictive count, but it's still
a bunch of desktop applications.

119
00:08:27.040 --> 00:08:34.570
Hotsy Photoshop becoming a browser
based application for awhile, but

120
00:08:34.810 --> 00:08:39.820
I can see within the
next five to 10 years,

121
00:08:40.090 --> 00:08:46.990
visual studio to becoming a
principal stuff and obviously word

122
00:08:46.990 --> 00:08:51.820
and Excel and PowerPoint already
have browser based applications. And

123
00:08:52.360 --> 00:08:58.160
they do most of them,
the, the version, It's not

124
00:08:58.160 --> 00:09:00.410
an unreasonable kind of leap
of logic. If you think

125
00:09:00.410 --> 00:09:04.790
about it. I mean the
outlook web application is really

126
00:09:04.790 --> 00:09:06.860
amazing, you know, especially, especially
the new one, if you've

127
00:09:06.860 --> 00:09:11.570
used the office three 65.
Yes. I hate to say

128
00:09:11.570 --> 00:09:15.620
it, but I sometimes find
myself using the, the web

129
00:09:15.740 --> 00:09:18.170
version of outlook just because
it's lighter weight than the

130
00:09:18.170 --> 00:09:24.110
desktop one. Yeah. Faster. And
it's, and, and it gets

131
00:09:24.110 --> 00:09:27.140
you there quicker. And I
just find myself more and

132
00:09:27.140 --> 00:09:29.600
more these days where I
look down at my task

133
00:09:29.600 --> 00:09:36.740
bar and the only things
open the branches and kind

134
00:09:36.740 --> 00:09:39.800
of wishing actually the, some
of the things that are

135
00:09:39.800 --> 00:09:44.150
down there were in the
browser. Although still, We don't

136
00:09:44.150 --> 00:09:47.600
want a Chromebook though. Isn't
that funny? Like, like we

137
00:09:47.600 --> 00:09:49.430
all say, isn't it wonderful
that we only run the

138
00:09:49.430 --> 00:09:51.650
browser and then one or
two apps. And then when

139
00:09:51.650 --> 00:09:53.630
we are given a computer
that runs only the browser,

140
00:09:53.630 --> 00:09:57.920
we're like, yeah, Yeah. I,
it's nice to know that

141
00:09:58.010 --> 00:10:02.330
on those times when, when
my cable company manages to

142
00:10:02.330 --> 00:10:06.080
completely disconnect broadband for anything,
I can still do most

143
00:10:06.080 --> 00:10:09.020
things on my computer. Can't
play SIM city obviously, but

144
00:10:09.020 --> 00:10:16.730
I can do much things.
So yeah, but it's, it's

145
00:10:16.730 --> 00:10:19.610
increasingly skates kind of switched
the other way. So where

146
00:10:19.670 --> 00:10:24.170
I used to saying, there's
the desktop application and then

147
00:10:24.440 --> 00:10:31.040
the web version is the
lightweight alternative. Now I'm thinking

148
00:10:31.100 --> 00:10:36.740
there's the web application. And
the desktop is the heavyweight

149
00:10:36.740 --> 00:10:39.770
alternative when there's something that
I can't do in the

150
00:10:39.770 --> 00:10:45.910
browser app, for whatever reason
that might be. And I

151
00:10:45.910 --> 00:10:49.580
mean, Spotify is a great
example. I've got a windows

152
00:10:49.580 --> 00:10:54.170
eight machine and there are
issues with the Spotify desktop

153
00:10:54.170 --> 00:10:59.240
application on windows eight, depending
on what and so forth.

154
00:11:00.500 --> 00:11:03.050
But I have that run
again, a Chrome tab and

155
00:11:03.200 --> 00:11:08.030
it's fine, it's it does
everything that the, the desktop

156
00:11:08.030 --> 00:11:12.500
application does and Spotify doesn't
work offline anyway. So, you

157
00:11:12.500 --> 00:11:14.300
know, even if you've got
the desktop application, it's still

158
00:11:14.300 --> 00:11:18.590
not caching things locally. And
that's just more and more

159
00:11:18.590 --> 00:11:21.410
and more, you look at
some of the things that

160
00:11:21.410 --> 00:11:25.700
some people are doing. So,
I mean, the parental based

161
00:11:25.700 --> 00:11:29.240
office three, six, five applications
are one example. I don't

162
00:11:29.240 --> 00:11:33.140
know if you've played much
with cloud nine <inaudible>. Yeah.

163
00:11:33.140 --> 00:11:35.120
It's, it's it, that's the
thing that makes you believe

164
00:11:35.120 --> 00:11:39.050
that maybe you could in
fact do visual studio? Yeah.

165
00:11:40.520 --> 00:11:43.730
I mean, I would probably
be thinking about trying to

166
00:11:43.730 --> 00:11:48.650
do a, a C sharp
net IDE in the browser,

167
00:11:49.790 --> 00:11:51.860
if it wasn't for the
fact that Microsoft are currently

168
00:11:51.860 --> 00:11:55.360
pushing things on a visual
studio.com, the language makes me

169
00:11:55.360 --> 00:11:59.590
think maybe that's going to
happen anyway. And I don't

170
00:11:59.590 --> 00:12:01.680
want to waste too much
time on it. The new,

171
00:12:01.680 --> 00:12:04.650
yeah. The new TFS stuff,
all runs@visualstudio.com and you can

172
00:12:04.650 --> 00:12:06.600
have like your own domain.
You can have your own

173
00:12:06.600 --> 00:12:10.590
sub domains. Like I have
Hanselman taught visual studio.com. Yeah.

174
00:12:10.770 --> 00:12:12.960
I mean, I've got my
stuff in their room. I'm

175
00:12:12.960 --> 00:12:16.920
using to get service in
it rather than the, the

176
00:12:16.920 --> 00:12:20.400
TFS service. But I'm pretty
much the only person who

177
00:12:20.400 --> 00:12:23.550
works on like gets, got
a much nicer workflow for

178
00:12:23.550 --> 00:12:26.850
a single user than TFS.
No, I think that when

179
00:12:26.850 --> 00:12:28.980
I say TFS, I'm not
talking about the source control,

180
00:12:29.010 --> 00:12:31.890
TFS, the issue tracking and
all that stuff I use.

181
00:12:32.040 --> 00:12:36.000
Yeah, Yeah, yeah. I'm sorry.
So then I was going

182
00:12:36.000 --> 00:12:42.450
to say the, the brains
of CFS for various reasons,

183
00:12:42.450 --> 00:12:45.630
I'll use TFS in Firefox
because I'll use it with

184
00:12:45.630 --> 00:12:48.180
a different client ID. Then
I use in my other

185
00:12:48.180 --> 00:12:55.200
browsers, but the browser based
tools for the task pole

186
00:12:55.200 --> 00:13:00.000
to canvas board, and just
the general overview of why

187
00:13:00.000 --> 00:13:03.180
you better, because you get
like an entire browser window

188
00:13:03.300 --> 00:13:05.940
instead of that little team
Explorer assigned fall, which is

189
00:13:05.940 --> 00:13:10.860
trying to cram all that
information in and, you know,

190
00:13:11.010 --> 00:13:14.400
editing story cards and moving
things across and all this

191
00:13:14.400 --> 00:13:17.070
sort of stuff is in
the browser. You've got this

192
00:13:17.070 --> 00:13:22.380
lovely gooey story, whereas in
visual studio, it doesn't seem

193
00:13:22.380 --> 00:13:26.460
to be quite the same.
The thing that I find

194
00:13:26.460 --> 00:13:30.540
the most frustrating when I'm
doing work on, on the

195
00:13:30.540 --> 00:13:32.520
web is I just, I
still don't feel like the,

196
00:13:34.830 --> 00:13:37.690
like the debugging story is
quite there. You know, I

197
00:13:37.740 --> 00:13:39.870
find myself in visual studio
and I'm doing stuff. And

198
00:13:39.870 --> 00:13:41.820
then I run over into
Chrome or into IIE and

199
00:13:41.820 --> 00:13:44.850
I hit F 12 and
I struggled to really understand

200
00:13:44.850 --> 00:13:48.090
what the heck's going on
in JavaScript. I feel like

201
00:13:48.090 --> 00:13:50.640
there's an opportunity to kind
of disrupt things with a

202
00:13:50.640 --> 00:13:54.480
much better experience for explaining
what exactly is going on

203
00:13:54.480 --> 00:13:59.250
right now. You know, I
think so. I think, I

204
00:13:59.250 --> 00:14:01.230
think some of that's down
to JavaScript as a language

205
00:14:01.350 --> 00:14:04.230
and the fact that it's
it's dynamic. And so there's

206
00:14:04.230 --> 00:14:06.630
a limit to how much
information you can have while

207
00:14:06.630 --> 00:14:12.270
you're debugging through it in
the browser. The thing that

208
00:14:12.270 --> 00:14:16.140
really annoys me with the
debugging experience is that there

209
00:14:16.140 --> 00:14:19.710
are things that each of
the three grounds as all

210
00:14:19.710 --> 00:14:24.900
use does really well. And
I just think why com

211
00:14:26.130 --> 00:14:34.260
why Chrome do I quick
watch? And the sort of

212
00:14:34.320 --> 00:14:36.780
the stuff that's built in
for inspecting variables, I don't

213
00:14:36.780 --> 00:14:39.810
like the way Chrome does
the variable inspection I use.

214
00:14:39.810 --> 00:14:43.260
It's more like visual studio.
So that works me, but

215
00:14:43.260 --> 00:14:48.750
at the same time, X,
toilet developer tools extensible, right?

216
00:14:50.370 --> 00:14:56.510
And then in Firefox, it's
really, it's not Firefox. It's

217
00:14:56.510 --> 00:14:59.450
find a bug and you
install that. And there's some

218
00:14:59.450 --> 00:15:02.180
really great stuff in there,
but they're not, it's not

219
00:15:02.180 --> 00:15:07.520
deeply integrated into the browser.
And also it's sending itself

220
00:15:07.580 --> 00:15:12.140
every however often it is.
But have you had a

221
00:15:12.140 --> 00:15:17.570
chance to play with Sourcemap
deep hugging and Chrome with

222
00:15:17.600 --> 00:15:21.400
type skirts? Yeah. In fact,
I have a, because if

223
00:15:21.400 --> 00:15:25.240
you've played with a V
S web essentials, Mads Christianson's

224
00:15:25.240 --> 00:15:29.740
playground for our asp.net labs,
he'll make source maps for

225
00:15:29.740 --> 00:15:33.880
you with anything. So you
can actually right. Click in

226
00:15:34.210 --> 00:15:37.660
the solution Explorer and minify
stuff. And then of course,

227
00:15:37.660 --> 00:15:40.720
with TypeScript, you can just
stash sash source maps, and

228
00:15:40.720 --> 00:15:43.600
it'll spit source maps out.
When you do your, your

229
00:15:43.600 --> 00:15:46.450
compilation at the command line,
I actually ended up putting

230
00:15:46.450 --> 00:15:49.330
that in my CS proj.
So that, that stuff happens

231
00:15:49.330 --> 00:15:53.050
on bill. Yes. I have
a, I have a prebuilt

232
00:15:53.050 --> 00:15:57.100
staff that does a CSC
dot ECC across all my

233
00:15:57.100 --> 00:16:01.000
times for class, but it's
one of the things with

234
00:16:02.050 --> 00:16:08.140
the IEP team. They're a
longer release cadence than Chrome.

235
00:16:08.140 --> 00:16:11.440
And Firefox is you don't
get these advances coming in

236
00:16:12.920 --> 00:16:17.770
because the F 12 developer
tools aren't extensible That I

237
00:16:17.770 --> 00:16:21.190
eat does not have source
map control. No. So they're

238
00:16:21.340 --> 00:16:24.430
basically for when you're working
with TypeScript, you've got two

239
00:16:24.430 --> 00:16:29.050
options. One is to debug
in visual studio, which it

240
00:16:29.050 --> 00:16:32.860
works, but it doesn't feel
particularly natural. Let's back up

241
00:16:32.860 --> 00:16:35.260
a moment and just give
people an understanding about what

242
00:16:35.500 --> 00:16:37.420
source maps are and why
we should care about them.

243
00:16:38.620 --> 00:16:45.370
Okay. So soul smacks like
a PDB file for Java

244
00:16:45.370 --> 00:16:51.130
script that you all use
generated by compiling another language

245
00:16:51.430 --> 00:16:57.340
like TypeScript or copy script
or closure, or when you

246
00:16:57.340 --> 00:17:00.580
have passed your JavaScript through
a minute fire and turned

247
00:17:00.580 --> 00:17:05.230
it into a single unreadable
line of randomness and assaults

248
00:17:05.230 --> 00:17:11.020
map will link bits of
either that JavaScript file back

249
00:17:11.050 --> 00:17:14.650
to the line of source
code that is originally came

250
00:17:14.650 --> 00:17:20.500
from, and if you're using
Chrome debugger tools or a

251
00:17:20.530 --> 00:17:24.100
full TypeScript, if you're working
in visual studio 2012 with

252
00:17:24.100 --> 00:17:29.110
the TypeScript plugin, you can,
you still have to set

253
00:17:29.110 --> 00:17:34.990
the break points in the
JavaScript when it breaks. It

254
00:17:34.990 --> 00:17:39.220
goes to the TypeScript file
that that JavaScript was compiled

255
00:17:39.280 --> 00:17:43.630
from. And then you can
step debug through the TypeScript.

256
00:17:43.630 --> 00:17:45.130
So you hit half 10,
and it goes to the

257
00:17:45.130 --> 00:17:47.500
next line of TypeScript. And
you can view the TypeScript

258
00:17:47.500 --> 00:17:53.940
variables and all that sort
of thing, which obviously, you

259
00:17:53.940 --> 00:17:56.370
know, couple of years ago,
you were talking about JavaScript

260
00:17:56.370 --> 00:17:59.910
as the assembly language for
the web. And, but one

261
00:17:59.910 --> 00:18:02.520
of the big issues with
it was the particular, you

262
00:18:02.520 --> 00:18:05.040
know, coffee scripts, feed pig
for a couple of years,

263
00:18:05.400 --> 00:18:07.740
but when people were trying
to work out why their

264
00:18:07.740 --> 00:18:11.280
coffee script wasn't working, they
were having to step debug

265
00:18:11.280 --> 00:18:13.470
through the JavaScript and then
try and work out how

266
00:18:13.470 --> 00:18:17.400
to fix that in the
coffee script. Or if you

267
00:18:17.400 --> 00:18:20.610
were me instinctively fixing it
in the JavaScript and then

268
00:18:20.670 --> 00:18:24.630
overriding that the next time
you failed. So now you

269
00:18:24.630 --> 00:18:28.380
have source maps and you
can actually, you can break

270
00:18:28.380 --> 00:18:30.990
that divide in the same
way that, you know, as

271
00:18:31.500 --> 00:18:35.370
desktop native programmers or seashell
programmers, you don't have to

272
00:18:35.370 --> 00:18:38.160
set debug through the bank
code. You can link it

273
00:18:38.160 --> 00:18:41.280
back to the seashell, but
it came from an inspect

274
00:18:41.280 --> 00:18:45.050
things there. Right? Right. Cause
web applications have a, you

275
00:18:45.050 --> 00:18:48.350
know, reasonably sized ones have
this idea of a release,

276
00:18:48.590 --> 00:18:52.400
a release mode. And the
configuration of the application that

277
00:18:52.400 --> 00:18:54.260
you work on in release
mode is different from the

278
00:18:54.260 --> 00:18:56.600
debug mode one. Yeah. You
know, for a small app,

279
00:18:56.600 --> 00:19:00.200
you can absolutely go and
throw out your application exactly.

280
00:19:00.200 --> 00:19:02.780
As you work on it.
But when you put it

281
00:19:02.780 --> 00:19:05.480
into production, you minify things,
you compress things, you change

282
00:19:05.480 --> 00:19:07.610
settings, you include all sorts
of things in source maps

283
00:19:07.610 --> 00:19:11.120
for that bridge. And that's
a killer feature. Like you

284
00:19:11.120 --> 00:19:12.680
have to have that. And
if you're going to start

285
00:19:12.680 --> 00:19:14.840
using something like TypeScript or
coffee script, and you want

286
00:19:14.840 --> 00:19:17.120
to debug back to the
original, it's so important to

287
00:19:17.120 --> 00:19:21.980
have. And if I use
developer tools were written in

288
00:19:22.310 --> 00:19:26.690
Java script, presumably we would
be able to, to extend

289
00:19:26.690 --> 00:19:32.240
them. Yes. I don't know
what, what, Google's, what Chrome's

290
00:19:32.510 --> 00:19:36.440
developer tools are written in.
But one of my longtime

291
00:19:36.500 --> 00:19:41.360
bugbears with all your, that
it's not particularly extensible, which

292
00:19:41.510 --> 00:19:44.210
is, it's a shame, What
have you built? What is,

293
00:19:44.210 --> 00:19:46.730
this is, this is not
holding you back apparently. Like

294
00:19:46.730 --> 00:19:49.190
what have you built that
is comparable to a desktop

295
00:19:49.220 --> 00:19:51.740
application now that has got
you. So, so stoked about

296
00:19:51.740 --> 00:19:56.330
the web. So I spent
the last year and a

297
00:19:56.330 --> 00:20:02.240
half nearly building a studio,
which is a storage as

298
00:20:02.240 --> 00:20:06.860
your storage management tool. That's
done entirely in the browser

299
00:20:06.920 --> 00:20:11.750
and HTML five. And at
runtime it's JavaScript. But when

300
00:20:11.750 --> 00:20:14.870
I'm building it, it's, it's
a few thousand lines of

301
00:20:14.870 --> 00:20:21.710
TypeScript split across 40 old
files. And it's very strange.

302
00:20:21.710 --> 00:20:28.310
I have, I have my
web application, which has got

303
00:20:28.310 --> 00:20:30.980
control of this folder and
all sorts service line stuff.

304
00:20:31.520 --> 00:20:34.610
And then there's also an
app folder, which has got

305
00:20:34.610 --> 00:20:38.240
all my TypeScript inside it.
And inside there, I've got

306
00:20:38.600 --> 00:20:41.360
the same thing for the
client sites. I've got controllers

307
00:20:41.360 --> 00:20:45.650
and the services folder that'll
these TypeScript files is spread

308
00:20:45.650 --> 00:20:48.130
across all these things. And
then I have a pill

309
00:20:48.130 --> 00:20:53.020
process that combines them all
together, and then it follows

310
00:20:53.020 --> 00:21:01.090
the other person. And yeah,
it's the, the fact that

311
00:21:01.090 --> 00:21:04.540
the only tool, the only
tools that were available for

312
00:21:04.540 --> 00:21:09.880
managing the CEO's storage were
desktop applications was frustrating me

313
00:21:11.010 --> 00:21:12.430
at first because I wanted
to be able to use

314
00:21:12.430 --> 00:21:16.060
my own pad. And then
there is other tablets and

315
00:21:16.060 --> 00:21:21.700
phones and things. And then
because you have licensing that

316
00:21:21.700 --> 00:21:25.000
says, you can to use
this on two machines, otherwise

317
00:21:25.000 --> 00:21:28.360
you have to put another
license and you just, I've

318
00:21:28.360 --> 00:21:31.000
got, I have a lot
of computers that I have

319
00:21:31.000 --> 00:21:36.250
access to. And so, yeah,
I thought, let's see if

320
00:21:36.250 --> 00:21:39.220
I can build that as
a web app. I originally

321
00:21:39.250 --> 00:21:41.170
thought I'm going to do
an iPad for working with

322
00:21:41.230 --> 00:21:43.720
CEO storage. But then I
thought, well, if I read

323
00:21:43.720 --> 00:21:48.370
well, but Android and other
things are then windows eight

324
00:21:49.060 --> 00:21:52.120
tablet coming along. So I
thought I'd try and do

325
00:21:52.120 --> 00:21:56.320
it as a web app
started the first time through

326
00:21:56.800 --> 00:22:05.290
using a third party controls
library for JavaScript and jQuery

327
00:22:05.350 --> 00:22:09.130
and knock out for binding
and so forth. I haven't

328
00:22:09.130 --> 00:22:13.090
got one third of the
application written and I was

329
00:22:13.330 --> 00:22:16.450
reasonably happy with it, but
the code was a mess

330
00:22:18.640 --> 00:22:20.140
and there should be a
full time group came along.

331
00:22:20.410 --> 00:22:25.990
And when you're writing Java
scripts, unless you are very

332
00:22:25.990 --> 00:22:29.170
experienced and you've developed some
good practices over the years,

333
00:22:29.950 --> 00:22:31.690
you tend to end up
with your JavaScript all over

334
00:22:31.690 --> 00:22:33.250
the place. And some of
us in script tags and

335
00:22:33.250 --> 00:22:35.860
some of it's in that
file over there, because there

336
00:22:35.860 --> 00:22:41.860
is no full build process.
I could never really find

337
00:22:41.860 --> 00:22:45.960
a way of, of getting
much JavaScript, grateful, organized Phrase

338
00:22:45.960 --> 00:22:49.350
differently. As I've said before
that either compilation is the

339
00:22:49.350 --> 00:22:53.790
first unit test. I was
talking last week with Brian

340
00:22:53.790 --> 00:22:55.560
from lucid chart. And he
was telling me that they

341
00:22:55.560 --> 00:22:59.610
use closure and write a
whole bunch of JavaScript. Lucid

342
00:22:59.610 --> 00:23:02.640
chart is their kind of
Vizio for the web application.

343
00:23:03.000 --> 00:23:05.310
And it is, you know,
many, many thousands of lines

344
00:23:05.310 --> 00:23:09.090
of JavaScript. And he says
that having this compilation step

345
00:23:09.090 --> 00:23:13.800
or having more specifically having
type checking catches an entire

346
00:23:13.800 --> 00:23:18.000
class of errors that you
just wouldn't catch otherwise, like

347
00:23:18.000 --> 00:23:21.360
even the best JavaScript person
might not might have these

348
00:23:21.360 --> 00:23:23.700
errors as latent sitting there,
unless they have a lot

349
00:23:23.700 --> 00:23:27.960
of unit test coverage to
catch them. Yeah. And, and

350
00:23:29.040 --> 00:23:31.620
you can write unit tests
that will catch these things,

351
00:23:33.000 --> 00:23:37.440
but you are writing unit
tests just to catch tiny

352
00:23:37.440 --> 00:23:41.400
players. And so if you
can, if you can have

353
00:23:41.400 --> 00:23:43.380
a compiler that runs and
you can say to that

354
00:23:43.380 --> 00:23:46.220
compiler, okay. So any object
that gets passed to this

355
00:23:46.220 --> 00:23:49.820
function has to have these
three properties and potentially have

356
00:23:49.820 --> 00:23:54.830
these other two, like you
can't with TypeScript interfaces then

357
00:23:54.860 --> 00:23:56.540
rather than you having to
go, well, what are the

358
00:23:56.540 --> 00:23:58.730
possible things that could happen
and what could go wrong

359
00:23:58.730 --> 00:24:04.400
here and everything else you
can just go and the

360
00:24:04.400 --> 00:24:07.190
component that will just go,
you idiot, you've left off

361
00:24:07.250 --> 00:24:10.580
the count property on this
thing that you're trying to

362
00:24:10.580 --> 00:24:14.300
pass through a web service,
which is blatantly not do

363
00:24:14.300 --> 00:24:17.350
it again. And then, But
why not? Why isn't that

364
00:24:17.350 --> 00:24:23.560
different from just using like
JS Lynch? Cause JS, Linda

365
00:24:23.560 --> 00:24:30.100
doesn't know, it doesn't know
about types. It will pick

366
00:24:30.100 --> 00:24:33.460
up things like missing 70
COVID so you can get

367
00:24:33.460 --> 00:24:36.340
it to pick up. I
I'll use, I prefer to,

368
00:24:36.340 --> 00:24:39.940
I guess, hint to JS
Lynch because JS, hint doesn't

369
00:24:39.940 --> 00:24:42.760
tell me that I haven't
laid out my code. Right.

370
00:24:44.680 --> 00:24:49.570
But yeah, JS him we'll
say equals they're probably meant

371
00:24:49.570 --> 00:24:53.530
to use a triple equals
and, and things like that.

372
00:24:53.740 --> 00:24:57.610
But it can't tell if
you've got a chain of

373
00:24:57.820 --> 00:25:03.160
functions, what's the shape of
the objects that are being

374
00:25:03.160 --> 00:25:07.600
passed between those functions should
be. So it can't pick

375
00:25:07.600 --> 00:25:11.860
up tiny Paris because it's
working with a dynamic language.

376
00:25:13.360 --> 00:25:17.110
What TypeScript does is it
says for all of these

377
00:25:17.110 --> 00:25:21.370
functions, I can basically just
annotate the parameters and say,

378
00:25:21.370 --> 00:25:24.070
this needs to be this
interface, or this is a

379
00:25:24.070 --> 00:25:28.810
string. And then if I
try and call a function,

380
00:25:28.810 --> 00:25:31.930
lips, expecting a string and
try and possibly in there,

381
00:25:32.380 --> 00:25:39.070
then it'll tell me about
it. And I've had people

382
00:25:39.070 --> 00:25:43.270
who questioned the usefulness of
this, and I just try

383
00:25:43.270 --> 00:25:45.490
and point them to the
number of times every day,

384
00:25:45.850 --> 00:25:48.040
I hear to have sex
and have errors type errors

385
00:25:48.040 --> 00:25:51.250
in my TypeScript. So, you
know, maybe it's just because

386
00:25:51.250 --> 00:25:58.300
I suck, but yeah, I
need to have my hand

387
00:25:58.300 --> 00:26:00.430
held by the complainant or
stop me from making stupid

388
00:26:00.430 --> 00:26:07.840
mistakes. But you know, it's,
it's a possibly a luxury

389
00:26:07.840 --> 00:26:12.010
tool it's possibly just a
nice thing to have, but

390
00:26:12.070 --> 00:26:15.580
it makes me more productive.
It makes me less likely

391
00:26:15.580 --> 00:26:19.240
to release code into the
wild. So it is going

392
00:26:19.240 --> 00:26:25.060
to say object not defined
or property not found. And

393
00:26:26.050 --> 00:26:31.810
particularly since my target market
is largely web developers, these

394
00:26:31.810 --> 00:26:34.600
are the guys who, if
there's an error in the

395
00:26:34.600 --> 00:26:38.350
Java script, it's not going
to show a little yellow

396
00:26:38.350 --> 00:26:40.690
triangle down and it's going
to throw up a huge

397
00:26:40.690 --> 00:26:44.040
breakdown, a lock box, debug,
this they're going to go.

398
00:26:45.420 --> 00:26:49.080
So yeah, having talked to
groups in levers, I think

399
00:26:49.650 --> 00:26:56.940
it's, it's really accelerated my,
my journey to the dark

400
00:26:56.940 --> 00:26:59.370
side of the life side,
depending on your point of

401
00:26:59.370 --> 00:27:02.090
view. And do you think
that this is something that's

402
00:27:02.090 --> 00:27:04.070
going to become more mainstream?
I mean, like there are

403
00:27:04.070 --> 00:27:06.980
those that find TypeScript or
coffee script or closure or

404
00:27:06.980 --> 00:27:09.560
whatever, and they say, this
is it. I found it.

405
00:27:09.800 --> 00:27:11.570
This is what I need
to be doing. And then

406
00:27:11.570 --> 00:27:13.370
there are others who just
say no, no, always get

407
00:27:13.370 --> 00:27:15.320
back to that. There's almost
a get back to the

408
00:27:15.320 --> 00:27:19.100
metal kind of Renaissance right
now. We're on JavaScript. Like

409
00:27:19.290 --> 00:27:23.060
we're all learning assembler, right?
We're all learning assembler. And

410
00:27:23.120 --> 00:27:27.290
now it's time to, you
know, move to C and

411
00:27:27.290 --> 00:27:29.240
the, the, the assembler folks
are like, yeah, I don't

412
00:27:29.240 --> 00:27:31.550
really know. I kinda like
assembler. It's important to know

413
00:27:31.550 --> 00:27:36.950
assembler. Yeah. Let's see. Plus,
plus guys arguing with the

414
00:27:36.950 --> 00:27:41.000
C guys and the sequelae
scoring objects and your pre

415
00:27:41.000 --> 00:27:43.880
compiler stuff and all this
nonsense, you just, you just

416
00:27:43.880 --> 00:27:48.740
need structures and functions and
get on with it. So

417
00:27:49.430 --> 00:27:57.170
I, I think some of
the evolutions in the JavaScript

418
00:27:57.200 --> 00:28:01.520
language, the currently talking about
with the script six touch

419
00:28:01.520 --> 00:28:03.440
script actually just gives you
a lot of those now

420
00:28:04.370 --> 00:28:08.360
in a way that compiles
to JavaScript until JavaScript catches

421
00:28:08.360 --> 00:28:09.920
up. And then it'll just
go, I'll show you that,

422
00:28:09.920 --> 00:28:16.550
that I think the backlash
is more again, I was

423
00:28:16.550 --> 00:28:19.820
talking to someone earlier about
this today. It's more against

424
00:28:19.820 --> 00:28:23.000
the libraries and particularly, I
think jQuery is getting a

425
00:28:23.000 --> 00:28:27.710
hard time at the moment.
And I have to say

426
00:28:29.630 --> 00:28:33.860
you kind of, you just
drag jQuery on to your,

427
00:28:34.550 --> 00:28:37.250
your HTML files, we see
S HTML files without even

428
00:28:37.250 --> 00:28:43.970
thinking about it. And you
just use dollar Corrine, hash

429
00:28:43.970 --> 00:28:48.970
something or dot something because
it's just there. And you

430
00:28:49.160 --> 00:28:52.220
forget that it's not part
of the language. I actually

431
00:28:52.220 --> 00:28:56.960
had a guy, a reporter,
an issue with studio where

432
00:28:57.920 --> 00:29:03.410
the landing page came up
and it loads the landing

433
00:29:03.410 --> 00:29:07.520
page very quickly. He does
that very quickly and he

434
00:29:07.520 --> 00:29:09.380
was clicking the login button
and it wasn't working for

435
00:29:09.380 --> 00:29:13.640
like four seconds because it
was downloading J query. So

436
00:29:13.640 --> 00:29:18.740
that jQuery per say, dollar
dot login button dot on

437
00:29:18.800 --> 00:29:22.670
Clayco or whatever it was.
And it's just, I hadn't

438
00:29:22.670 --> 00:29:27.140
thought about it. And so
that was the only thing

439
00:29:27.140 --> 00:29:31.490
I was downloading a 50
K file into people's browsers

440
00:29:31.790 --> 00:29:34.460
so that I could add
a click event handler to

441
00:29:34.700 --> 00:29:38.120
a button. And it just
kind of, I don't think

442
00:29:38.120 --> 00:29:41.170
I really need to do
that. I can, I can

443
00:29:41.170 --> 00:29:46.810
rewrite that with a query
element and just add a

444
00:29:46.810 --> 00:29:50.440
click handler with the head
event listener. So yeah, I

445
00:29:50.440 --> 00:29:52.720
think I have to write
three extra lines of code

446
00:29:52.720 --> 00:29:56.350
over what was already there.
Right. And eliminated kind of

447
00:29:56.350 --> 00:30:00.400
a 50 K downloads, I
think, but yeah, I'll just

448
00:30:00.400 --> 00:30:03.490
have consult about it. And
I think that's the, that's

449
00:30:03.490 --> 00:30:08.110
the backlash is people including
jQuery. So they don't have

450
00:30:08.110 --> 00:30:12.520
to think rather than including
jQuery for what was originally

451
00:30:12.520 --> 00:30:16.300
intended for, which was to
cover the, the disparities between

452
00:30:16.300 --> 00:30:22.030
different browsers, implementations of the
dome and the, the JavaScript

453
00:30:22.030 --> 00:30:26.320
models and so forth. So,
and even jQuery 2.0, I

454
00:30:26.320 --> 00:30:30.370
think they've lost 19 pay
off the font size by

455
00:30:30.460 --> 00:30:34.030
dropping support for the older
browsers. Right. But it's still

456
00:30:34.030 --> 00:30:41.350
big and they still need
it. So I think that's,

457
00:30:41.380 --> 00:30:48.190
that's the backlash. I think
they're the viewer, the big

458
00:30:48.220 --> 00:30:52.180
kind of NVW frameworks like
angular JS, which is what

459
00:30:52.180 --> 00:30:55.240
I'm using a backbone, a
number and so forth. Those

460
00:30:55.540 --> 00:31:00.010
knockouts and breeze, those are
actually bringing a level of

461
00:31:00.010 --> 00:31:04.120
convenience and helpfulness and helping
you do stuff. So take

462
00:31:04.420 --> 00:31:06.370
a very long time to
do with the notes and

463
00:31:06.370 --> 00:31:10.150
all the scripts. And so
I don't think anyone saying

464
00:31:10.540 --> 00:31:14.470
stop using them. So building
these big applications, I think

465
00:31:14.470 --> 00:31:19.030
it's just stop using jQuery
for everything. Stop putting the

466
00:31:19.030 --> 00:31:22.390
dollar there all the time,
a lot of stop using

467
00:31:22.390 --> 00:31:27.250
jQuery altogether, but just think
about it. If you, if

468
00:31:27.250 --> 00:31:30.550
you come upon J query
call in your entire application,

469
00:31:31.060 --> 00:31:35.010
maybe you should rewrite it
just using JavaScript. I definitely

470
00:31:35.010 --> 00:31:37.620
think there's a maturity that
is coming soon. I think

471
00:31:37.620 --> 00:31:39.960
that we are all writing
assembler and we're all used

472
00:31:39.960 --> 00:31:42.390
to using different libraries. So
we're going to kind of

473
00:31:42.390 --> 00:31:44.340
thrash for a little bit
as we try to figure

474
00:31:44.340 --> 00:31:46.770
out what exactly this thing
that we're building wants to

475
00:31:46.770 --> 00:31:50.820
become and then a to
whatever the next step is.

476
00:31:51.810 --> 00:31:56.700
Yeah. Yeah. I think that's
probably right. But all I

477
00:31:56.700 --> 00:32:02.130
know is that I spent
the last six months having

478
00:32:02.130 --> 00:32:05.520
got to the point where
I had unmanageable unmaintainable maintainable

479
00:32:05.520 --> 00:32:09.390
code in JavaScript and various
other things. I basically through

480
00:32:09.390 --> 00:32:12.510
most of the way, rewrote
the whole of studio from

481
00:32:12.510 --> 00:32:18.840
scratch and TypeScript and angular
JS and using Twitter's bootstrap

482
00:32:19.770 --> 00:32:26.070
components. And I have not
had this much fun coding

483
00:32:27.870 --> 00:32:29.940
for a very long time.
I think since I first

484
00:32:30.150 --> 00:32:33.780
found C-sharp. So when I
went from what I was

485
00:32:33.780 --> 00:32:35.520
on to C sharp, just
got, this is a mess

486
00:32:35.520 --> 00:32:40.040
language ever. I know you
don't have to delete my

487
00:32:40.040 --> 00:32:43.850
objects and all this sort
of thing. And yeah. Working

488
00:32:43.850 --> 00:32:47.720
with, with TypeScript, with HTML
and CSS and the bootstrap

489
00:32:48.470 --> 00:32:54.590
components and with angular JS,
which is, I think it's

490
00:32:54.590 --> 00:32:59.210
the Holy grail of like
debunking. It just, it is

491
00:32:59.210 --> 00:33:02.720
so good at working out
that you change something 15

492
00:33:02.720 --> 00:33:06.380
levels down in an object
hierarchy, and just reflecting that

493
00:33:06.710 --> 00:33:11.750
in the browser screen. And
yeah, it's just awesome. I'm

494
00:33:11.750 --> 00:33:15.470
having a really great time
and having fun, just churning

495
00:33:15.470 --> 00:33:23.510
this code down, building something
that is, is in the

496
00:33:23.510 --> 00:33:26.450
browser and doing things that
I didn't think was, could

497
00:33:26.450 --> 00:33:28.910
do a couple of years
ago. So yeah. So where

498
00:33:28.910 --> 00:33:31.370
can people see your application
and kind of in closing,

499
00:33:31.370 --> 00:33:33.290
where can they go and
see this, what you're working

500
00:33:33.290 --> 00:33:35.760
on in the real world,
you can go to <inaudible>

501
00:33:35.760 --> 00:33:39.560
to IO. Cause when you're
doing a tool like this,

502
00:33:39.560 --> 00:33:43.580
you have to have a.io
domain. You can sign up

503
00:33:43.580 --> 00:33:46.460
for a free trial. Now,
if you're using SEO storage,

504
00:33:46.490 --> 00:33:50.510
flops, tables, or queues, then
just sign in with windows,

505
00:33:50.510 --> 00:33:54.050
live ID and start your
30 day free trial. And

506
00:33:54.050 --> 00:33:58.250
then when that runs out,
I'm going to give you

507
00:33:58.400 --> 00:34:04.970
a discount code for handsomely
that sisters. So they'll just

508
00:34:04.970 --> 00:34:06.350
going to be able to
go along and put 10

509
00:34:06.350 --> 00:34:11.210
20, which will give them
20% off a one year

510
00:34:11.210 --> 00:34:14.450
subscription after the free trial.
That's very of cool. Thanks

511
00:34:14.450 --> 00:34:18.200
for doing that. Well, you
know, I suspect that this

512
00:34:18.200 --> 00:34:20.120
is going to be a
good way to get people

513
00:34:20.120 --> 00:34:22.970
who will tell me what's
wrong with it. No, that's

514
00:34:22.970 --> 00:34:28.220
great. So, yeah, but it's,
I've been using it. I

515
00:34:28.220 --> 00:34:31.010
haven't used up in dogfooding
all the way through building

516
00:34:31.010 --> 00:34:37.640
it. It's what I use
now every day. And I

517
00:34:37.640 --> 00:34:41.270
think it's, it's, I'm really
proud of it. I think

518
00:34:41.270 --> 00:34:43.790
it's a good example of
what you can do with

519
00:34:44.490 --> 00:34:47.360
just one guy on six
months as a web application.

520
00:34:48.410 --> 00:34:50.960
And I've got a lot
of plans to expand on

521
00:34:50.960 --> 00:35:01.960
it, new features and other
things. So Another episode of

522
00:35:01.960 --> 00:35:11.110
Hanselminutes and we'll see you
again next week, <inaudible>.

