WEBVTT FILE

1
00:00:12.060 --> 00:00:17.460
From hanselminutes.com. It's Hanselman. That's
a weekly discussion with web

2
00:00:17.460 --> 00:00:22.200
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.200 --> 00:00:29.070
number three 65. Recorded live
Thursday, March 28th, 2013. Support for Hanselman

4
00:00:29.070 --> 00:00:32.190
it's as provided by Tellerik
offering the best in developer

5
00:00:32.190 --> 00:00:41.040
tools and support online@telerikdotcomandbyfranklins.net makers
of gesture pack a powerful

6
00:00:41.040 --> 00:00:44.580
gesture, recording and recognition system
for Microsoft connect for windows

7
00:00:44.580 --> 00:00:51.570
developers details@gesturepak.com. In this episode,
Scott talks with Steve Sanderson

8
00:00:52.050 --> 00:00:58.010
about phone gap Cordova. Hi,
this is Scott Hanselman. This

9
00:00:58.010 --> 00:01:00.200
is another episode of Hansel
minutes and we've got Steve

10
00:01:00.200 --> 00:01:02.870
Sanderson on the line. How
are you, sir? Hey, I'm

11
00:01:02.870 --> 00:01:06.260
very good. Thank you. How
are you? Lovely, lovely. Congratulations.

12
00:01:06.260 --> 00:01:11.150
You just put out a
iPhone application. I did, yes.

13
00:01:11.150 --> 00:01:12.770
It has been something I've
been wanting to do for

14
00:01:13.190 --> 00:01:15.050
a couple of years, but
I haven't really had a

15
00:01:15.050 --> 00:01:17.930
good opportunity and I decided
that that's never going to

16
00:01:17.930 --> 00:01:19.880
happen. Actually. I just need
to stay up really late

17
00:01:20.000 --> 00:01:24.770
and do it anyway. Well,
you, you're a pretty impressive

18
00:01:24.770 --> 00:01:26.960
guy and you've done a
lot of interesting stuff. I

19
00:01:26.960 --> 00:01:28.850
know that you're a web
person and I know that

20
00:01:28.850 --> 00:01:32.540
you're the author of knockout,
but I did not know

21
00:01:32.540 --> 00:01:36.260
that you knew objective C,
which means I'm a horrible

22
00:01:36.260 --> 00:01:41.420
person. Cause you know, all
the languages, I think it

23
00:01:41.420 --> 00:01:43.250
would. I'm not sure that
it would make me a

24
00:01:43.250 --> 00:01:45.890
better person to know. Objective
C actually I'd be quite

25
00:01:45.890 --> 00:01:50.660
scared of a version of
either. No, I have been

26
00:01:50.660 --> 00:01:55.370
sticking with my favorite web
technologies and I have built

27
00:01:55.370 --> 00:02:00.110
this iPhone app, which gave
me a good opportunity to

28
00:02:00.950 --> 00:02:03.620
put knockout, to use in
a different kind of application

29
00:02:04.040 --> 00:02:08.780
and also to use a
backend in the cloud, which

30
00:02:08.780 --> 00:02:13.820
relates to products. I work
on apps, Microsoft. So it

31
00:02:13.820 --> 00:02:15.050
was cool actually, to be
able to use a lot

32
00:02:15.050 --> 00:02:18.680
of technologies that I'm involved
in developing turned them into

33
00:02:18.680 --> 00:02:22.310
something fun. So how about
a little background for folks

34
00:02:22.670 --> 00:02:24.710
who may be web developers,
but don't know what phone

35
00:02:24.710 --> 00:02:28.070
gap is and don't know
what knockout is. Okay. Sure.

36
00:02:28.880 --> 00:02:33.050
Well, a knockout is a
model view view model library

37
00:02:33.050 --> 00:02:37.430
for JavaScript. So it basically
provides a nice way of

38
00:02:37.430 --> 00:02:41.450
architecting, rich JavaScript applications so
that you can separate up

39
00:02:41.450 --> 00:02:45.470
your code into views, which
are nice and simple and

40
00:02:46.490 --> 00:02:50.510
few models, which are object
oriented and self contained and

41
00:02:50.510 --> 00:02:53.420
bind them together. So it's
kind of one of the

42
00:02:53.990 --> 00:02:56.990
current generation of model view
libraries that are becoming very

43
00:02:56.990 --> 00:03:03.040
popular. So you find that
a knockout chest.com and I

44
00:03:03.040 --> 00:03:04.520
actually think a lot of
people have heard of it

45
00:03:04.750 --> 00:03:07.510
if you haven't been in
charge of tutorials and such

46
00:03:07.570 --> 00:03:13.840
that and a phone gap,
I would imagine that probably

47
00:03:13.840 --> 00:03:15.730
just about everyone has heard
of it, but just to

48
00:03:15.730 --> 00:03:18.160
kind of make sure everyone's
clear about what it is.

49
00:03:18.220 --> 00:03:22.150
It's a way of packaging,
a web application so that

50
00:03:22.150 --> 00:03:25.960
it can be submitted to
mobile app stores and marketplaces.

51
00:03:26.480 --> 00:03:30.640
So you write HTML and
JavaScript and CSS, and as

52
00:03:30.640 --> 00:03:34.390
long as it doesn't directly
depend on loading pages from

53
00:03:34.390 --> 00:03:38.020
server, then, you know, and
then it's just static files,

54
00:03:38.050 --> 00:03:40.930
then it can be packaged
up into this artifact that

55
00:03:40.930 --> 00:03:47.010
gets submitted. And does it
use JavaScript to call functions

56
00:03:47.010 --> 00:03:50.760
that are native functions? So
the idea with phone gap

57
00:03:50.760 --> 00:03:53.100
is that you will structure
the majority of your user

58
00:03:53.100 --> 00:03:58.350
interface with familiar HTML and
CSS. And at runtime phone

59
00:03:58.350 --> 00:04:03.540
gap is providing a sort
of Chrome list browser by

60
00:04:03.540 --> 00:04:06.210
chromosomes. There's no sort of,
you know, URL bar or

61
00:04:06.210 --> 00:04:08.940
anything like that. It's just
the sort of surface of

62
00:04:08.940 --> 00:04:11.970
the browser. So the user
using it doesn't know it's

63
00:04:11.970 --> 00:04:15.000
a browser, particularly if you
style it to look like

64
00:04:15.000 --> 00:04:19.170
a native app, but it
is effectively a browser. And

65
00:04:19.170 --> 00:04:22.170
so yes, you would use
JavaScript and CSS and everything

66
00:04:22.170 --> 00:04:24.330
else that you are familiar
with as a web developer

67
00:04:25.020 --> 00:04:27.600
to structure your application. And
you wouldn't normally be using

68
00:04:27.600 --> 00:04:30.630
native control to though it
is to some extent possible

69
00:04:30.900 --> 00:04:33.150
to use native controls from
your platform. It's a bit

70
00:04:33.150 --> 00:04:38.400
difficult, but it can partly
be done. And is this

71
00:04:38.640 --> 00:04:42.810
like, this is real or
is this a pale kind

72
00:04:42.810 --> 00:04:45.240
of Similac room of what
an application would look like?

73
00:04:45.240 --> 00:04:47.640
Like I, I wonder if
this is a legitimate way

74
00:04:47.640 --> 00:04:50.790
to write an app and
try to, I wouldn't say

75
00:04:50.790 --> 00:04:55.080
fool, but definitely give the
user the expectation of native

76
00:04:55.080 --> 00:04:59.550
speed and quality. Well, it's
very often a criticism that's

77
00:04:59.550 --> 00:05:02.280
brought up. In fact, you
can barely go like a

78
00:05:02.280 --> 00:05:04.950
week before. There's some sort
of hacker news post about

79
00:05:04.980 --> 00:05:09.390
comparing native and web mobile
apps is a big debate.

80
00:05:10.260 --> 00:05:13.470
I think generally people are
of the opinion that for

81
00:05:13.470 --> 00:05:17.010
sort of ultimate perfection then
yeah, native apps do come

82
00:05:17.010 --> 00:05:20.370
with some advantages in the
sense that they come with

83
00:05:20.370 --> 00:05:23.550
all the built in controls
for your platform. So they

84
00:05:23.850 --> 00:05:28.200
kind of going to look
perfect by default. And of

85
00:05:28.200 --> 00:05:31.620
course those controls and the
implementation is all optimized for

86
00:05:32.190 --> 00:05:34.890
the hardware that the stuff
is running on. So in,

87
00:05:35.010 --> 00:05:38.160
in a sense, it may
seem like using HTML and

88
00:05:38.160 --> 00:05:40.950
CSS to try and simulate.
That is a bit of

89
00:05:40.960 --> 00:05:44.010
a, a cheap trick. That's
never going to quite be

90
00:05:44.010 --> 00:05:48.480
as good, but I don't
think that really truly expresses

91
00:05:48.480 --> 00:05:51.390
the reality of it. So
there's an application that I've

92
00:05:51.390 --> 00:05:55.110
been working on, which I've
just a blog post for

93
00:05:55.110 --> 00:05:57.890
the video. And I think
that most people have tried

94
00:05:57.890 --> 00:06:01.460
it, which I agree that
it looks and feels basically

95
00:06:01.460 --> 00:06:05.750
the same as a native
app. So I just had

96
00:06:05.750 --> 00:06:08.960
to write a bunch of
CSS in order to get

97
00:06:08.990 --> 00:06:11.720
the same parents and the
same kind of transitions that

98
00:06:11.720 --> 00:06:15.320
have here in native iOS
apps and the net result.

99
00:06:15.320 --> 00:06:18.740
I'm pretty confident any normal
person would not consider for

100
00:06:18.740 --> 00:06:21.800
a minute is not a
native app. It just, you

101
00:06:21.800 --> 00:06:24.860
know, normal person just would
never think that it's different

102
00:06:24.860 --> 00:06:26.540
to any of the other
apps that are running on

103
00:06:26.540 --> 00:06:31.160
that phone. So I, I'm
confident that it's possible to

104
00:06:31.160 --> 00:06:35.510
achieve basically the same level
of fluidity and richness, but

105
00:06:35.600 --> 00:06:37.820
in some ways there's more
work involved in doing it

106
00:06:37.820 --> 00:06:40.580
because you have to actually
implement the appearance of all

107
00:06:40.580 --> 00:06:44.960
your controls yourself. But on
the other hand, you save

108
00:06:45.170 --> 00:06:47.420
a lot of time because
you don't have to learn

109
00:06:47.420 --> 00:06:53.560
some new language and new
UI frameworks. So if you

110
00:06:53.570 --> 00:06:56.630
are going to write a
project that's really intends to

111
00:06:56.960 --> 00:06:59.450
share code across multiple platforms.
You know, if you're going

112
00:06:59.450 --> 00:07:04.280
to target Android, iOS and
windows phone, then really developing

113
00:07:04.280 --> 00:07:07.070
your application from scratch in
three different languages, three different

114
00:07:07.070 --> 00:07:14.150
UI frameworks is probably so
inefficient that taking the time

115
00:07:14.150 --> 00:07:17.660
to replicate the UI that
you want in Houston, Alan

116
00:07:17.660 --> 00:07:23.530
CSS is a quite reasonable
alternative, But surely there's, there's

117
00:07:23.530 --> 00:07:26.830
existing CSS that gives you
the buttons and the, I

118
00:07:26.830 --> 00:07:30.040
mean, you're not literally trying
to make pixel perfect versions

119
00:07:30.040 --> 00:07:37.360
of iPhone buttons yourself. That's
up to you. Now, my

120
00:07:37.420 --> 00:07:42.070
objectives was cause it was
partly experimental. I really wanted

121
00:07:42.070 --> 00:07:44.680
to see if I can
genuinely create something that was

122
00:07:44.920 --> 00:07:47.770
exactly like native. So I
did actually create all of

123
00:07:47.770 --> 00:07:52.330
my elements completely from scratch
because that gave me like

124
00:07:52.330 --> 00:07:56.380
total control of however thing
looks. But if you are

125
00:07:56.650 --> 00:08:00.220
more inclined just to get
stuff done, then there are

126
00:08:00.220 --> 00:08:04.360
frameworks that you can take.
So I would probably have

127
00:08:04.370 --> 00:08:08.830
the available ones recommend looking
at Sentia touch that's that

128
00:08:08.830 --> 00:08:11.980
seems to be pretty much
the leading option in terms

129
00:08:11.980 --> 00:08:15.130
of producing a good user
experience. Obviously people have also

130
00:08:15.130 --> 00:08:18.310
heard of jQuery mobile, which
tries to do a similar

131
00:08:18.310 --> 00:08:25.090
thing. Nah, on my, on
my website, I can say,

132
00:08:25.090 --> 00:08:28.960
add to home screen and
then pin it. And when

133
00:08:28.960 --> 00:08:30.610
I run it though, I
pull it down and I

134
00:08:30.610 --> 00:08:34.060
see that I'm running in
Safari. So it's really just

135
00:08:34.060 --> 00:08:39.760
a bookmark Fullscreen bookmark there's
phone gap slash Cordova is,

136
00:08:39.760 --> 00:08:46.240
is, is a shell of
its own. Yes. So it

137
00:08:46.240 --> 00:08:50.050
is a native app as
far as the phone is

138
00:08:50.050 --> 00:08:53.320
concerned. So it's installed just
like every other native app.

139
00:08:53.320 --> 00:08:56.460
You get it from the
marketplace or store. It just

140
00:08:56.460 --> 00:08:59.970
so happens that the implementation
is that when it starts

141
00:08:59.970 --> 00:09:04.470
off, it starts a web
browser control that takes up

142
00:09:04.470 --> 00:09:07.260
the whole screen with no
address bar and then, and

143
00:09:07.260 --> 00:09:10.980
then your pages, which are
bundled with the app show

144
00:09:10.980 --> 00:09:14.070
up in there. So yeah,
as far as the phone

145
00:09:14.070 --> 00:09:16.650
is concerned, it's not just
a bookmark to a website

146
00:09:16.950 --> 00:09:20.700
is an actual app. It's
just that the application, sorry.

147
00:09:20.700 --> 00:09:26.540
The implementation happens to be
with web technologies. When, when

148
00:09:26.540 --> 00:09:29.000
phone gap first came out,
I pretty much understood it

149
00:09:29.000 --> 00:09:33.080
and I felt pretty good
about it. But then somehow

150
00:09:33.110 --> 00:09:37.540
people started saying Cordova instead
of phone gap. And, and

151
00:09:37.570 --> 00:09:39.140
this might be really, I
mean, I know the phone

152
00:09:39.140 --> 00:09:41.270
gap guys will listen and
I'll get an email from

153
00:09:41.270 --> 00:09:46.730
them afterwards. But as soon
as that name happened, then

154
00:09:46.730 --> 00:09:49.430
I became a little bit
confused and I was just

155
00:09:49.430 --> 00:09:50.930
like, okay, I don't know
what's going on over there.

156
00:09:50.930 --> 00:09:53.810
Those guys haven't got their
thing together. I'm going to

157
00:09:53.810 --> 00:09:55.550
wait and find out what
happens. Cause I don't know

158
00:09:55.550 --> 00:09:58.010
the difference between the two,
nor should I be asked

159
00:09:58.040 --> 00:10:00.380
to know the difference. Please
explain to me why two

160
00:10:00.380 --> 00:10:03.350
Your names. All right. Yeah.
It's, it's, it's weird. But

161
00:10:03.350 --> 00:10:06.800
basically the project was always
called phone gap when it

162
00:10:06.800 --> 00:10:10.820
was originally created by a
company called Toby and then

163
00:10:11.810 --> 00:10:16.490
they transferred the ownership over
to the Apache foundation. And

164
00:10:16.520 --> 00:10:18.560
as part of that, they
needed a new name that

165
00:10:18.650 --> 00:10:23.690
was not at risk of
infringing, any trademarks. So they

166
00:10:24.590 --> 00:10:26.960
came up with various alternative
names. They were calling it

167
00:10:26.960 --> 00:10:29.360
a call back at one
stage, which was a ridiculous

168
00:10:29.360 --> 00:10:31.610
name. Cause you can't search
the web for that without

169
00:10:31.610 --> 00:10:36.050
getting all kinds of things.
And eventually they decided that

170
00:10:36.050 --> 00:10:39.860
they would call the technology
Cordova and that the inspiration

171
00:10:39.860 --> 00:10:42.410
for that came from the
fact that new Toby were

172
00:10:42.410 --> 00:10:46.430
based on Cordova street in
Vancouver, anywhere that's kind of

173
00:10:46.430 --> 00:10:50.420
irrelevant. They came up with
Colinette Cordova. So now Cordova

174
00:10:50.480 --> 00:10:54.830
is the technology that's licensed
by Apache phone gap. On

175
00:10:54.830 --> 00:10:59.000
the other hand is a
particular distribution of Cordova from

176
00:10:59.000 --> 00:11:05.060
Adobe and also ties in
with other Adobe services like

177
00:11:05.090 --> 00:11:07.370
phone got build, which is
a cloud based build system

178
00:11:07.370 --> 00:11:10.730
for quarter reputations. So a
good analogy would be to

179
00:11:10.790 --> 00:11:14.540
think that just like webcam
is the underlying technology for,

180
00:11:15.140 --> 00:11:17.810
let's say Safari, which is
a distribution of a web

181
00:11:17.810 --> 00:11:23.030
browser. That includes webcast. Similarly
holdover is the underlying technology,

182
00:11:23.030 --> 00:11:26.270
which is distributed in a
package called phone gap. If

183
00:11:26.270 --> 00:11:30.290
that makes sense. I see.
So like chromium and Chrome.

184
00:11:31.010 --> 00:11:33.620
Yeah, yeah. Pretty much like
that. Yeah. The only weird

185
00:11:33.620 --> 00:11:36.290
thing is that since foam
cup is they own the

186
00:11:36.290 --> 00:11:40.160
distribution of cult over the
exists is kind of nonsensical

187
00:11:40.160 --> 00:11:43.850
out into two different minds.
Yeah. Okay. So then for

188
00:11:43.850 --> 00:11:46.130
the most part, when I
see the two names online,

189
00:11:46.130 --> 00:11:48.800
I can just mentally exchange
them. It's not like one

190
00:11:48.800 --> 00:11:51.290
does one thing and one
does the other. Yeah. Typically

191
00:11:51.290 --> 00:11:53.950
people just use them interchangeably
without knowing why there were

192
00:11:53.950 --> 00:11:58.590
two names. Okay. All right.
Well this sounds like magical

193
00:11:58.590 --> 00:12:00.330
and wonderful and we should
all immediately drop what we're

194
00:12:00.330 --> 00:12:02.670
doing and start using phone
cap to do all of

195
00:12:02.670 --> 00:12:07.680
our work. Right. I would
say that for certain projects,

196
00:12:07.710 --> 00:12:12.300
it's the advantages outweigh the
disadvantages, but for equally many

197
00:12:12.300 --> 00:12:15.060
projects there were versus true.
So I mean, I mentioned

198
00:12:15.060 --> 00:12:17.370
some of the advantages, the
obvious, the fact that you

199
00:12:17.370 --> 00:12:19.080
get to use your web
development skills and you don't

200
00:12:19.080 --> 00:12:22.830
have to learn new languages
and new UI frameworks. Other

201
00:12:22.980 --> 00:12:25.800
really compelling things I found
when I was developing my

202
00:12:25.800 --> 00:12:29.940
app, that was just amazingly
wonderful. Was if I need

203
00:12:29.940 --> 00:12:31.440
a library to do something,
I can just go and

204
00:12:31.440 --> 00:12:34.680
get hub. And there's like
58 Brazilian JavaScript libraries on

205
00:12:34.680 --> 00:12:36.330
that. And I can just
pull any one of them

206
00:12:36.330 --> 00:12:40.080
off and it's just going
to work. It's wonderful. And,

207
00:12:40.700 --> 00:12:43.560
and in some ways HTML
and CSS are actually a

208
00:12:43.560 --> 00:12:47.490
better native UI framework. Sorry,
better UI framework than the

209
00:12:47.520 --> 00:12:51.600
native alternatives for certain types
of screens. Like something that's

210
00:12:51.600 --> 00:12:54.210
like a document is really
easy to do in HTML,

211
00:12:54.240 --> 00:13:01.530
but it's very hard in
certain native frameworks. And also,

212
00:13:01.830 --> 00:13:04.350
I just think that modern
JavaScript code can be really

213
00:13:04.410 --> 00:13:07.320
nicely structured. And I can't
really say the same for

214
00:13:08.010 --> 00:13:10.710
the kind of effect I
see commonly in the wild.

215
00:13:11.970 --> 00:13:13.410
So yeah, there are, there
are tons of really good

216
00:13:13.410 --> 00:13:15.330
things, but it would be
unfair to leave out of

217
00:13:15.330 --> 00:13:19.530
that because I would say
there were some massive drawbacks

218
00:13:19.530 --> 00:13:23.220
to this as well. Like
if your objective is to

219
00:13:23.220 --> 00:13:26.970
make an app that feels
native, then you know, you've

220
00:13:26.970 --> 00:13:28.890
got tons of extra work
to do because you have

221
00:13:28.890 --> 00:13:32.250
to reimplement all of these
standard controls and transitions and

222
00:13:32.250 --> 00:13:36.600
such using HTML and JavaScript,
unless you're going to just

223
00:13:36.600 --> 00:13:39.120
take an off the shelf
implementation. But if you do

224
00:13:39.120 --> 00:13:41.310
that, then it's probably not
going to really look and

225
00:13:41.310 --> 00:13:45.540
feel native. Another major drawback
would be the fact that

226
00:13:46.170 --> 00:13:51.810
you can't really use mixed
native controls in with your

227
00:13:51.930 --> 00:13:55.260
HTML user interfaces. And now
you kind of, can't like

228
00:13:55.260 --> 00:13:59.430
in my app, I use
the native map control, but

229
00:13:59.880 --> 00:14:01.650
I had to design the
UI in such a way

230
00:14:01.650 --> 00:14:04.080
that it didn't overlap with
anything in an awkward way,

231
00:14:04.080 --> 00:14:07.200
because it's kind of like
a, I've just got the

232
00:14:07.200 --> 00:14:09.720
map and it's just overlaid
certain pixel coordinates on the

233
00:14:09.720 --> 00:14:12.840
screen, like independently of anything
else. And so I line

234
00:14:12.840 --> 00:14:14.130
it up so that it
looks like it's meant to

235
00:14:14.130 --> 00:14:19.620
be there, but you know,
it's sort of also other

236
00:14:19.620 --> 00:14:21.960
drawbacks would be that you
do have to think carefully

237
00:14:21.960 --> 00:14:25.800
about performance is possible to
get really great forms and

238
00:14:26.130 --> 00:14:29.730
you know, the wonderfully smooth
animations with CSS, transitions and

239
00:14:29.730 --> 00:14:31.860
such. But if you're not
careful and if you use

240
00:14:31.860 --> 00:14:34.710
the wrong kind of animations,
then performance can be pretty

241
00:14:34.710 --> 00:14:42.960
bad, particularly on older devices
and while different, just like

242
00:14:42.960 --> 00:14:46.170
on when developing for the
normal browsers, you have to

243
00:14:46.170 --> 00:14:50.640
be aware of cross browser
differences in phone gap, because

244
00:14:51.350 --> 00:14:55.670
let's say the Android browser
is quite different to sorry

245
00:14:55.670 --> 00:14:58.520
on iOS, even though they're
both based on webcast and

246
00:14:58.550 --> 00:15:01.070
then windows phone obviously is
based on IIE, which is

247
00:15:01.070 --> 00:15:03.980
different again. So you do
have to start thinking about

248
00:15:04.310 --> 00:15:11.870
cross browser stuff. And, and
finally, if you want to

249
00:15:12.440 --> 00:15:15.290
use any API APIs that
are not exposed by phone

250
00:15:15.290 --> 00:15:17.630
gap, then you need to
sign some native code anyway.

251
00:15:17.660 --> 00:15:21.290
So you can't necessarily avoid
having to do some native

252
00:15:21.290 --> 00:15:24.770
code unless you're writing a
very limited app that only

253
00:15:24.770 --> 00:15:29.240
does things that phone got
as anticipated. So yeah, I

254
00:15:29.240 --> 00:15:32.090
think there are quite few
drawbacks to that. And if

255
00:15:32.090 --> 00:15:34.370
you are coming to, into
a project and trying to

256
00:15:34.370 --> 00:15:36.200
decide whether this is right
for you or not, I

257
00:15:36.200 --> 00:15:40.880
would suggest that if you
are a web developer already,

258
00:15:40.880 --> 00:15:44.750
and you're fairly confident in
your JavaScript skills and your

259
00:15:44.750 --> 00:15:49.190
project intends to target multiple
platforms, like at least two

260
00:15:49.190 --> 00:15:53.900
of Android iOS and windows
phone, then perhaps on balance

261
00:15:53.900 --> 00:15:57.710
phone gap is going to
be a more efficient way

262
00:15:57.710 --> 00:16:01.400
of delivering your project and
learning new languages and frameworks.

263
00:16:02.540 --> 00:16:04.760
On the other hand, if
you're only trying to target

264
00:16:04.850 --> 00:16:08.240
one platform or you don't
already have very strong web

265
00:16:08.240 --> 00:16:11.210
development skills, then I think
that it would probably be

266
00:16:11.210 --> 00:16:13.820
a pretty bad move to
be trying to use these

267
00:16:13.820 --> 00:16:20.540
technologies. You can probably become
moderately competent in building a

268
00:16:20.660 --> 00:16:24.440
native app with probably just
a week or two intensive

269
00:16:24.440 --> 00:16:26.990
reading of a book. And
I think that amount of

270
00:16:27.460 --> 00:16:32.900
investment would probably outweigh the,
the costs. If you are

271
00:16:32.900 --> 00:16:37.420
only trying to talk at
one platform, What about data

272
00:16:37.420 --> 00:16:40.810
access? I mean, I understand
how to call restful web

273
00:16:40.810 --> 00:16:43.990
services and how to move
Jason around. And I re

274
00:16:43.990 --> 00:16:46.630
I, I'm assuming I haven't
looked a lot at objective

275
00:16:46.630 --> 00:16:48.760
C, but I'm assuming that
it's pretty, you know, because

276
00:16:48.760 --> 00:16:51.880
Jason is so trivially moved
in and out of JavaScript

277
00:16:51.910 --> 00:16:54.640
because it is JavaScript that,
you know, this idea of

278
00:16:54.640 --> 00:16:58.120
serialization and deserialization just kind
of goes away. So I'm

279
00:16:58.120 --> 00:17:00.970
assuming that there's literally no
problem moving data from place

280
00:17:00.970 --> 00:17:04.150
to place. But my question
is, what about storing it

281
00:17:04.150 --> 00:17:06.340
on the disc? I mean,
surely you have some local

282
00:17:06.340 --> 00:17:08.560
cash. How do you have
a local database and things

283
00:17:08.560 --> 00:17:11.710
like that? Yeah. Well, third,
you've got quite a few

284
00:17:11.710 --> 00:17:15.070
options, actually, if you using
phone gap, so you can

285
00:17:15.280 --> 00:17:18.220
do the same stuff that
the native developers do, which

286
00:17:18.220 --> 00:17:23.650
is to call into whatever
native that storage libraries exist.

287
00:17:23.860 --> 00:17:27.550
So going with iOS again,
and the there's something I'll

288
00:17:27.550 --> 00:17:32.020
call data, which is an
NRM basically object relational mapper

289
00:17:32.020 --> 00:17:36.940
for and SQL Lite database.
And a phone gap has

290
00:17:37.210 --> 00:17:40.630
exposes those APIs into your
JavaScript code. So you can

291
00:17:40.630 --> 00:17:43.390
just, you know, call those
directly and the days will

292
00:17:43.390 --> 00:17:46.480
get saved in the same
way, but you're not limited

293
00:17:46.480 --> 00:17:48.790
to that because since you
are in a browser, you

294
00:17:48.790 --> 00:17:53.640
can use things like local
storage and you can even

295
00:17:53.640 --> 00:17:59.310
use the HTML file system
API to write files, to

296
00:17:59.310 --> 00:18:02.040
disk in whatever custom format
you want. And that last

297
00:18:02.040 --> 00:18:04.620
option is actually what I
did in my application. So

298
00:18:04.890 --> 00:18:08.490
my data all exists in
Jason format, which is stored

299
00:18:08.490 --> 00:18:10.830
in a backend in the
cloud, but for maintaining a

300
00:18:10.830 --> 00:18:14.010
local cache, I just don't
see Jace on files as

301
00:18:14.010 --> 00:18:17.010
text files to the desk.
Each time he changed them,

302
00:18:17.050 --> 00:18:18.640
then when the app starts
up, I can load them

303
00:18:18.640 --> 00:18:22.170
some desk and carry on
as before I said desk,

304
00:18:22.620 --> 00:18:28.380
I mean, you know, slash
storage and, and then just

305
00:18:28.380 --> 00:18:31.590
carry on. So I didn't
actually have to look at

306
00:18:32.070 --> 00:18:34.800
mapping my data into a
relational database or anything. I'm

307
00:18:34.800 --> 00:18:37.470
just working with Jason Bob's
cause it fits quite nicely

308
00:18:37.470 --> 00:18:44.090
into the structure. Yeah, that's
actually an interesting technique. That's

309
00:18:44.090 --> 00:18:47.090
probably worth digging into a
little bit, cause I've used

310
00:18:47.150 --> 00:18:50.840
and shown a number of
demos that you've done. Like

311
00:18:51.050 --> 00:18:54.620
in my talk on mobile,
I use your conference browser

312
00:18:55.070 --> 00:18:58.130
and the, your, your single
page conference browser, where we

313
00:18:58.130 --> 00:19:02.390
basically look at sessions and
dates and people who gave

314
00:19:02.390 --> 00:19:05.420
them an abstracts and rooms.
And we kind of pivot

315
00:19:05.420 --> 00:19:09.560
on that data. The, the
demo that I give you

316
00:19:09.560 --> 00:19:13.340
basically have one big Jason
file. And then you use,

317
00:19:13.370 --> 00:19:17.000
if I remember correctly underscore,
which is kind of like

318
00:19:17.000 --> 00:19:22.810
link for JavaScript. Yeah. I
don't remember exactly. Yeah. Yeah.

319
00:19:23.240 --> 00:19:25.990
Well, well I guess I'm
bringing that up because it's

320
00:19:25.990 --> 00:19:29.960
such a clever and simple
way to have a little

321
00:19:29.960 --> 00:19:33.560
database when the data is
shaped a certain way. Yeah.

322
00:19:33.590 --> 00:19:37.730
Yeah. It's, it's really good
as an approach for the

323
00:19:37.730 --> 00:19:41.900
kind of apps that target
consumers, typically why the consumer

324
00:19:41.900 --> 00:19:44.780
has got their own data
or there's some sort of

325
00:19:44.780 --> 00:19:47.480
reasonable boundary around all the
data that a single individual

326
00:19:47.480 --> 00:19:50.270
is ever going to want
to see, because then you

327
00:19:50.270 --> 00:19:52.610
can roughly estimate that it's
feasible to just drop it

328
00:19:52.610 --> 00:19:55.730
all in one big block.
Obviously there are types of

329
00:19:55.730 --> 00:19:59.480
apps which wouldn't be applicable
for some like stock trading

330
00:19:59.480 --> 00:20:00.920
app where you've got to
be able to search back

331
00:20:01.100 --> 00:20:04.880
through decades worth of financial
records, or let's say the

332
00:20:04.880 --> 00:20:07.670
whole of amazon.com. You wouldn't
really want the entire catalog

333
00:20:07.700 --> 00:20:12.200
to exist in one giant
envelope. That's loaded into memory,

334
00:20:13.040 --> 00:20:15.770
but yeah, for those apps
where the amount of debt

335
00:20:16.210 --> 00:20:20.000
is bounded, then it's enormously
convenient not to have to

336
00:20:20.300 --> 00:20:23.150
look at splitting it up
into little pieces that can

337
00:20:23.150 --> 00:20:26.750
go into different tables. And
so on. That is effectively

338
00:20:26.750 --> 00:20:30.080
what you did. I mean,
you have this local single

339
00:20:30.080 --> 00:20:32.780
Jason file or do you
have a whole? So I,

340
00:20:33.470 --> 00:20:37.850
with, with my application, the
app is the principle of

341
00:20:37.850 --> 00:20:40.790
it is that the user
wants to create lists of

342
00:20:40.790 --> 00:20:43.430
places that they like to
go. And then they write

343
00:20:43.430 --> 00:20:50.350
reviews and our photos and
give all the pieces of

344
00:20:50.350 --> 00:20:54.190
information relating to the place.
So I decided to split

345
00:20:54.190 --> 00:20:57.070
up the data on a
per list basis. So for

346
00:20:57.070 --> 00:20:59.080
each list that you've got,
which is no, this might

347
00:20:59.080 --> 00:21:01.630
be like my favorite cafes
in Bristol or something like

348
00:21:01.630 --> 00:21:04.360
that. Each one of those
is a separate file, a

349
00:21:04.360 --> 00:21:07.480
separate directory. And in that
directory, I drop all of

350
00:21:07.480 --> 00:21:11.470
the photos that you've uploaded
and such, and the reason

351
00:21:11.470 --> 00:21:14.140
for splitting it up. Like
that means that there is

352
00:21:14.140 --> 00:21:18.310
some level of scale scalability
built into this. So if

353
00:21:18.670 --> 00:21:22.090
each individual list becomes so
large that it starts to

354
00:21:24.130 --> 00:21:27.730
strain the kind of amount
of stuff that you can

355
00:21:27.730 --> 00:21:30.640
learn and say, if our
performance starts hurting, then at

356
00:21:30.640 --> 00:21:34.360
least the performance doesn't depend
on how many lists you've

357
00:21:34.360 --> 00:21:36.370
got in total. It's just
depends on the size of

358
00:21:36.700 --> 00:21:41.110
each individual list. But, you
know, for every application, that

359
00:21:41.110 --> 00:21:44.950
would be some of the
reasonable kind of, I suppose,

360
00:21:44.980 --> 00:21:47.350
demand driven design people call
it an aggregate roots, you

361
00:21:47.350 --> 00:21:51.730
know, kind of national boundary
around a group of related

362
00:21:51.730 --> 00:21:56.200
data where it's reasonable to
say that that whole group

363
00:21:56.230 --> 00:22:00.130
changes as an atomic unit
and is independent from other

364
00:22:00.970 --> 00:22:06.330
islands of data. And the
application is called tour. Yeah,

365
00:22:06.330 --> 00:22:09.750
that's right. Yeah. So T
O U R a lot

366
00:22:09.750 --> 00:22:11.970
too, a lot. So if
that's on the iOS app

367
00:22:11.970 --> 00:22:16.830
store, so yeah, definitely recommend
checking out and seeing what

368
00:22:16.830 --> 00:22:20.610
you think of how good
or bad and it Chanel

369
00:22:20.970 --> 00:22:25.230
and JavaScript UI can be.
I am, I'm pretty pleased

370
00:22:25.230 --> 00:22:28.080
with that. I think most
people who've seen it who

371
00:22:28.080 --> 00:22:30.960
know about these things have
been very positive about our

372
00:22:30.960 --> 00:22:37.050
native, like it as certainly
on recent devices, like iPhone

373
00:22:37.080 --> 00:22:41.580
for us. And later it's
basically indistinguishable from native, although

374
00:22:41.580 --> 00:22:43.800
on some older devices, like
I've tried it on a

375
00:22:43.800 --> 00:22:48.510
three GS, it's a bit
sluggish, but you know, not

376
00:22:48.520 --> 00:22:50.850
really use this. And I
suppose people on those devices

377
00:22:51.600 --> 00:22:53.310
will probably find that most
of their apps of it

378
00:22:53.760 --> 00:22:57.720
as well. And the feedback
has been positive, no one

379
00:22:57.720 --> 00:22:59.670
has called it out and
said, Hey, look at that.

380
00:22:59.700 --> 00:23:02.250
That's not, that's clearly not
native or people all assuming

381
00:23:02.250 --> 00:23:04.380
what I did, which is
that Steve has learned objective,

382
00:23:06.330 --> 00:23:09.300
Well, whenever I've introduced it
to people in person I've

383
00:23:09.300 --> 00:23:11.790
been talking about the technology.
So I don't think anybody

384
00:23:13.170 --> 00:23:16.290
as well in my conversations,
people have known what it

385
00:23:16.290 --> 00:23:19.680
is, but yeah, people have
been very positive about that.

386
00:23:19.890 --> 00:23:23.000
And yeah, like I say,
I think it's, I think

387
00:23:23.010 --> 00:23:26.700
it genuinely is pretty close.
So yeah, I think the

388
00:23:26.700 --> 00:23:29.520
argument, the HTML and JavaScript
can't compete on a pure

389
00:23:29.520 --> 00:23:33.330
user experience basis is not
really correct. At least not

390
00:23:33.330 --> 00:23:36.000
for those applications that are
basically forms and lists and

391
00:23:36.000 --> 00:23:38.130
that sort of thing. Now,
obviously when you get into

392
00:23:38.130 --> 00:23:42.930
games, that's entirely different. And
if you imagine some kind

393
00:23:42.930 --> 00:23:48.050
of ridiculously elaborate facts that
don't map to any sort

394
00:23:48.050 --> 00:23:52.190
of CSS transitions or something,
then a native apps would

395
00:23:52.190 --> 00:23:57.160
obviously have a significant advantage.
Yeah. I always think about

396
00:23:57.160 --> 00:24:01.030
apps like Foursquare. And I
think if, if for, if

397
00:24:01.030 --> 00:24:03.430
you could write Foursquare in
phone gap, then that would

398
00:24:03.430 --> 00:24:07.900
be a pretty amazing example
of it can do anything.

399
00:24:09.610 --> 00:24:11.740
I would have to find
out what force could have

400
00:24:11.750 --> 00:24:16.570
is like, in order to,
I'm sorry, Because you use

401
00:24:16.570 --> 00:24:19.390
the example like the, the,
the, I guess there's probably

402
00:24:19.390 --> 00:24:21.010
not a lot of places
to check in in Bristol,

403
00:24:22.690 --> 00:24:25.810
but the It's just the,
I'm not highly social person.

404
00:24:25.810 --> 00:24:27.700
So, you know, any of
these social kinds of things.

405
00:24:28.840 --> 00:24:31.900
Yeah. Yeah. Well, you know,
your app has that very

406
00:24:31.900 --> 00:24:35.890
kind of classic iOS look
in, you know, the done

407
00:24:35.890 --> 00:24:39.880
button and the, the, the,
the lists and the lists

408
00:24:39.910 --> 00:24:44.080
pivot into a square, you
know, grids of photos. And

409
00:24:44.080 --> 00:24:46.870
then you can hold down
the photos and then delete

410
00:24:46.870 --> 00:24:50.650
them. It's just, it's a
very classic look. So I

411
00:24:50.650 --> 00:24:55.540
could definitely see that metaphor
being extended, but then apps

412
00:24:55.540 --> 00:25:00.280
like Evernote or Foursquare or
Twitter apps are all trying

413
00:25:00.280 --> 00:25:02.830
to just be a little
different. They want to look

414
00:25:02.830 --> 00:25:05.920
like an iOS app, but
they want to change their

415
00:25:05.920 --> 00:25:10.900
style. And iOS itself is
now ironically moving towards a

416
00:25:10.900 --> 00:25:15.130
flatter experience. People are saying
that they're heading in the

417
00:25:15.220 --> 00:25:20.890
direction of flat design, kind
of all Allah Metro, Metro

418
00:25:20.890 --> 00:25:24.100
design language. And I think
that, that the Metro design

419
00:25:24.100 --> 00:25:26.500
language is kind of moving
slightly towards the middle. So

420
00:25:26.740 --> 00:25:29.680
we're all gonna find ourselves
in this kind of slightly

421
00:25:29.680 --> 00:25:33.340
flats, not middle place. Yeah.
Hopefully phone gap will be

422
00:25:33.340 --> 00:25:36.070
able to make that happen
for us. Is there a,

423
00:25:36.070 --> 00:25:38.620
is there a backend to
this when I make a

424
00:25:38.620 --> 00:25:41.530
list? Yes, there is. So
the app is designed to

425
00:25:41.530 --> 00:25:45.640
work primarily offline because if
you are traveling around on

426
00:25:45.640 --> 00:25:48.610
your vacation or whatever, and
you are making a list

427
00:25:48.610 --> 00:25:50.620
of things that you've seen,
obviously you don't want to

428
00:25:51.010 --> 00:25:54.190
need some network connections. So
everything by default is just

429
00:25:54.190 --> 00:25:57.550
working against your local storage.
But the point of the

430
00:25:57.550 --> 00:26:01.510
app is that when you
have built something, create some

431
00:26:01.810 --> 00:26:03.340
list of places that you're
proud of. You want to

432
00:26:03.340 --> 00:26:06.400
share it with your friends.
So there's a published feature

433
00:26:06.400 --> 00:26:09.580
where it goes up into
the cloud and then effectively,

434
00:26:09.580 --> 00:26:11.470
you've got a website that
you can point people to,

435
00:26:11.470 --> 00:26:14.950
which shows them everything that
you've created in your photos

436
00:26:14.950 --> 00:26:16.870
and that sort of thing.
So naturally there has to

437
00:26:16.870 --> 00:26:19.720
be some kind of backend
service in order to actually

438
00:26:19.720 --> 00:26:22.930
store that data and to
serve it up as a

439
00:26:22.930 --> 00:26:28.780
website. So the way I've
done this involves a few

440
00:26:28.840 --> 00:26:32.290
components. Are you familiar with
the term backend as a

441
00:26:32.290 --> 00:26:36.130
service Backend as a service?
I mean, I, I think

442
00:26:36.130 --> 00:26:37.720
I am, but it couldn't
hurt to tell the people

443
00:26:37.720 --> 00:26:45.270
to. So if you are
learning, saving sort of pretty

444
00:26:45.270 --> 00:26:48.300
straightforward Jason data, and you
want to store it in

445
00:26:48.300 --> 00:26:51.990
a database and then query
later and then do authentication.

446
00:26:53.040 --> 00:26:57.570
These are really ridiculously common
requirements. So common that it's,

447
00:26:57.780 --> 00:27:00.390
in other words, it's like
every mobile app basically has

448
00:27:00.390 --> 00:27:04.020
to do this. And yet,
even though it's so common

449
00:27:04.290 --> 00:27:07.050
for a long time, people
were still just reinventing their

450
00:27:07.050 --> 00:27:10.140
own implementation of that from
scratch every single time. So

451
00:27:10.140 --> 00:27:15.240
maybe they were using something
like weather API, or even

452
00:27:15.330 --> 00:27:18.210
rails, or some of the
kinds of web technology that

453
00:27:18.210 --> 00:27:24.180
can accept Jaison data and
respond to HTTP requests. You

454
00:27:24.180 --> 00:27:26.880
know, that's, it's a reasonable
approach, but it's a lot

455
00:27:26.880 --> 00:27:30.360
of money we'll work to
implement that from scratch. And

456
00:27:30.360 --> 00:27:33.870
also you then have the
responsibility of deploying, get yourself,

457
00:27:34.440 --> 00:27:39.450
maintaining the hosting environment it's
on managing your own like

458
00:27:39.450 --> 00:27:43.470
security and that sort of
thing. So in recent years,

459
00:27:43.470 --> 00:27:46.830
there's been a bit of
a movement towards the spec

460
00:27:46.830 --> 00:27:49.440
end of the service concept,
which is where instead of

461
00:27:49.440 --> 00:27:52.680
inventing your own backend with
whether it's AI or rails

462
00:27:52.680 --> 00:27:55.320
or whatever, from scratch, you
can just sign up to

463
00:27:55.320 --> 00:27:56.940
you as long as it
already exists. And then you

464
00:27:56.940 --> 00:27:59.540
can configure it, say, Oh,
the daytime wants a story

465
00:27:59.540 --> 00:28:00.960
is going to be in
this shape. And I want

466
00:28:00.960 --> 00:28:03.330
to use this kind of
authentication. And I need to

467
00:28:03.330 --> 00:28:06.180
plug in a bit of
custom server side logic here,

468
00:28:06.270 --> 00:28:08.610
that sort of thing, that
there's a bunch of different

469
00:28:08.940 --> 00:28:11.190
podcasts as a service products
that are out there right

470
00:28:11.190 --> 00:28:14.850
now. And people will probably
have heard of pause.com. That's

471
00:28:14.850 --> 00:28:19.410
pretty well known. So the
things like stack mob and

472
00:28:19.950 --> 00:28:23.250
others whose name I don't
remember anyway, there's, there is

473
00:28:23.250 --> 00:28:26.790
one from Microsoft and it's
called windows Azure mobile services.

474
00:28:26.790 --> 00:28:29.220
And that's the project I
actually work on at the

475
00:28:29.220 --> 00:28:32.550
moment. So naturally I wanted
to have an opportunity of

476
00:28:32.580 --> 00:28:36.180
using that as a real
user. So that is where

477
00:28:36.180 --> 00:28:38.640
your data, all that stored
when you actually publish it

478
00:28:38.730 --> 00:28:42.180
from this app. And it's
stored in exactly the same

479
00:28:42.180 --> 00:28:47.970
format that exists on the
device like Jason and the

480
00:28:48.000 --> 00:28:52.230
backend also manages some handy
things like authentication. So you

481
00:28:52.230 --> 00:28:56.550
can log in with Facebook,
Twitter, Google, or Microsoft accounts.

482
00:28:57.090 --> 00:29:00.330
And I didn't actually have
to write any code to

483
00:29:00.450 --> 00:29:02.100
make that happen, or at
least I didn't have to

484
00:29:02.100 --> 00:29:05.430
write any code to interface
directly with those providers, because

485
00:29:05.430 --> 00:29:08.280
that is a feature that's
built into Azure mobile services.

486
00:29:08.610 --> 00:29:10.470
You just have to say
that you want to use

487
00:29:10.470 --> 00:29:14.670
all those authentication mechanisms. And
then basically the client library

488
00:29:14.760 --> 00:29:19.040
deals with presenting the login
UIs and everything. So there's

489
00:29:19.040 --> 00:29:22.100
a, there's a, there's a
phone gap. You a plug

490
00:29:22.100 --> 00:29:25.360
in for this. Yeah. So
we've just two weeks ago.

491
00:29:25.370 --> 00:29:29.120
Is it three? Now we
released a web client library

492
00:29:29.120 --> 00:29:32.570
for Azure mobile services, which
means that you can connect

493
00:29:32.570 --> 00:29:36.290
to it from any browser
based application or phone apps.

494
00:29:36.290 --> 00:29:39.620
And so on GAAP is
effectively a browser application, and

495
00:29:39.620 --> 00:29:44.980
that means that your JavaScript
can save data or query

496
00:29:45.040 --> 00:29:49.900
against these cloud Techstars that
you can configure and also

497
00:29:50.680 --> 00:29:54.280
deals with the authentication. So
for example, if you want

498
00:29:54.280 --> 00:29:56.860
to make someone login to
Twitter, you just say, client

499
00:29:56.860 --> 00:30:00.490
dot login, pass the string
of Twitter, and then you

500
00:30:00.490 --> 00:30:03.310
get a call back. So
the client library that point

501
00:30:03.310 --> 00:30:07.180
will pop open a Twitter
login UI. And when the

502
00:30:07.180 --> 00:30:08.890
user logs in, then it
also gives you a call

503
00:30:08.890 --> 00:30:12.610
back to give you the
authentic Twitter user ID. And

504
00:30:13.330 --> 00:30:16.960
that is all validated on
the server, obviously with proper

505
00:30:17.230 --> 00:30:23.110
cryptographic authentication headers. So yeah,
that's, that's where it can

506
00:30:23.110 --> 00:30:26.950
be done and it's built
into the client's library. So

507
00:30:26.950 --> 00:30:30.610
I was able to add
that to my app pretty

508
00:30:30.610 --> 00:30:35.350
easily. And it supports arbitrary
service side scripts as well

509
00:30:35.380 --> 00:30:38.260
that you can write in
JavaScript. So I have my

510
00:30:38.260 --> 00:30:40.750
UI code on my server
side code in JavaScript, which

511
00:30:40.750 --> 00:30:46.210
is nice. And yeah, it
works really well. I was

512
00:30:46.210 --> 00:30:49.750
pretty happy with of all
the things that I used

513
00:30:49.750 --> 00:30:52.450
in my project. That was
probably one that gave me

514
00:30:52.450 --> 00:30:56.760
the least amount of difficulty
We have not because you

515
00:30:56.760 --> 00:30:59.940
wrote it. I think the
fact that I'm quite familiar

516
00:30:59.940 --> 00:31:03.570
with it probably helps. Yeah.
And are you giving the

517
00:31:03.570 --> 00:31:05.220
code away to this or
is this going to be

518
00:31:05.220 --> 00:31:06.840
something that's going to be
a weekend project and you'll

519
00:31:06.840 --> 00:31:09.720
keep it to yourself? I'm
not in it at this

520
00:31:09.720 --> 00:31:12.270
point, I had this odd
tension as I was working

521
00:31:12.270 --> 00:31:14.610
on it because I have
the sort of habit of

522
00:31:14.970 --> 00:31:18.420
making libraries, open source projects
and stuff. And I was

523
00:31:18.420 --> 00:31:21.300
desperately trying not to create
some new open source projects

524
00:31:21.510 --> 00:31:23.310
with us, even though I
kept thinking, Oh, this is

525
00:31:23.310 --> 00:31:27.780
where usable, that's really usable
because I would have immediately

526
00:31:27.780 --> 00:31:30.840
got sidelined into implementing sort
of 400 use cases that

527
00:31:30.840 --> 00:31:34.560
I didn't even have myself.
And I was doing this,

528
00:31:34.560 --> 00:31:36.420
you know, at two in
the morning and I just

529
00:31:36.810 --> 00:31:40.140
wanted to ship the thing.
So, so no I'm resisting

530
00:31:40.890 --> 00:31:47.280
the urge to start releasing
code and maintaining things. But

531
00:31:47.610 --> 00:31:50.460
I am actually just going
to blog a bunch of

532
00:31:51.030 --> 00:31:54.330
posts about the techniques that
I've used and that certain

533
00:31:54.330 --> 00:31:58.020
people do want to <inaudible>.
We use some of the

534
00:31:58.020 --> 00:31:59.910
codes and they'll get to
get it that way, but

535
00:31:59.910 --> 00:32:02.340
then at least I don't
have to, you know, deal

536
00:32:02.340 --> 00:32:09.000
with people, send me issue
reports. Yeah. I think you've

537
00:32:09.000 --> 00:32:11.130
done a lot in open
source. We don't need to

538
00:32:11.130 --> 00:32:13.890
ask you to do too
much more. This is, this

539
00:32:13.890 --> 00:32:16.590
is pretty cool. This is
very exciting. I'm looking forward

540
00:32:16.590 --> 00:32:19.200
to, to seeing your posts
and reading about how you

541
00:32:19.200 --> 00:32:23.340
built this, the more detail,
the better. Cool, brilliant. Well,

542
00:32:23.340 --> 00:32:26.310
this has been another episode
of Hanselminutes and we'll see

543
00:32:26.310 --> 00:32:27.300
you again next week.

