WEBVTT FILE

1
00:00:00.780 --> 00:00:03.900
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.900 --> 00:00:07.230
they make the show possible.
Today's show is sponsored by

3
00:00:07.230 --> 00:00:11.490
Tellerik create compelling app experiences
across any screen with the

4
00:00:11.490 --> 00:00:16.350
Tellerik platform Telerx end to
end platform. Uniquely combines industry

5
00:00:16.350 --> 00:00:20.040
leading UI tools with cloud
services to simplify the entire

6
00:00:20.040 --> 00:00:24.540
app development cycle Tellerik offers
everything.net developers need to build

7
00:00:24.540 --> 00:00:33.960
quality apps faster. Try it
free at tellerik.com/platform that's tellerik.com/platform

8
00:00:47.480 --> 00:00:53.060
From Hansel minutes.com it's Hansel
minutes or weekly discussion with

9
00:00:53.060 --> 00:00:58.100
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

10
00:00:58.100 --> 00:01:02.030
show number four 59. In
this episode, Scott talks with

11
00:01:02.150 --> 00:01:08.450
dark language founders Laura's back
in Casper lawn. Hi, this

12
00:01:08.450 --> 00:01:10.850
is Scott Hanselman. This is
another episode of Hansel minutes

13
00:01:10.880 --> 00:01:14.840
and on Skype, I've got
large back and Casper Lund,

14
00:01:15.530 --> 00:01:18.730
Lars and Casper are in
our hosts in Denmark and

15
00:01:18.950 --> 00:01:22.760
they work on amongst other
things. The dart language to

16
00:01:22.790 --> 00:01:26.120
Lars is known for working
on V eight and Casper

17
00:01:26.120 --> 00:01:29.090
has a long history of
working on virtual machines. Thanks

18
00:01:29.090 --> 00:01:34.850
gentlemen, for joining me today,
It's our pleasure. So the

19
00:01:35.140 --> 00:01:38.600
dart language is something that
I've been exploring and it's

20
00:01:38.600 --> 00:01:41.570
been going on now for
what about four years since

21
00:01:41.570 --> 00:01:44.930
you announced it at the
GoTo conference? That is correct.

22
00:01:44.960 --> 00:01:49.430
It's been a long time,
but introducing new language takes

23
00:01:49.430 --> 00:01:53.660
a while before it gets
adopted. So it's a, it's

24
00:01:53.660 --> 00:01:56.690
always a long term project.
When you introduce some language,

25
00:01:57.620 --> 00:01:59.570
When you were on stage
and you were presenting it

26
00:01:59.570 --> 00:02:02.270
for the first time, are
you presenting a concept? Are

27
00:02:02.270 --> 00:02:05.090
you presenting a prototype? How
baked is it? How, how

28
00:02:05.090 --> 00:02:09.200
secretive are you before you
make it completely open? We

29
00:02:09.200 --> 00:02:12.260
made it a completely open
from the beginning. So this

30
00:02:12.260 --> 00:02:15.650
has been all along a
completely open source project. And

31
00:02:15.920 --> 00:02:19.550
you can follow minute to
minute how we do development

32
00:02:19.670 --> 00:02:26.090
in our repository. It's all
open and the main purpose

33
00:02:26.120 --> 00:02:29.330
of the doc program and
the tools around it is

34
00:02:29.330 --> 00:02:33.710
just to make programmers more
productive. So we want to

35
00:02:33.710 --> 00:02:37.600
make sure that programmers can
write big programs and then

36
00:02:37.600 --> 00:02:39.710
they can do it in
an efficient way. So they

37
00:02:39.710 --> 00:02:43.640
don't spend time on debugging
problems and stuff like that.

38
00:02:43.640 --> 00:02:46.820
So that is a fairly
simplistic programming language. That's easy

39
00:02:46.820 --> 00:02:50.570
to understand, and we believe
it scales fairly well to

40
00:02:50.570 --> 00:02:55.280
big applications. Is that the
primary idea that, that, that

41
00:02:55.290 --> 00:02:58.730
is to replace JavaScript though,
that JavaScript is not serving

42
00:02:58.730 --> 00:03:02.200
us in large applications. Therefore,
a simpler programming language is

43
00:03:02.200 --> 00:03:05.370
required. We do see a
lot of people that build

44
00:03:05.400 --> 00:03:08.340
big things in JavaScript are
struggling and a lot of

45
00:03:08.340 --> 00:03:10.350
different tools come out to
try to help that. And

46
00:03:10.350 --> 00:03:12.480
I think dart fits nicely
into that niche as well.

47
00:03:12.810 --> 00:03:14.700
But at the same time,
we are building a general

48
00:03:14.700 --> 00:03:17.790
purpose programming language that fits
in a lot of places.

49
00:03:17.820 --> 00:03:20.640
So I wouldn't call it
a JavaScript replacement, but as

50
00:03:20.640 --> 00:03:25.410
an alternative for certain kinds
of, of work. So I

51
00:03:25.410 --> 00:03:28.230
think it's really important to
us to also talk about

52
00:03:29.430 --> 00:03:32.580
the importance of having options
when you are a programmer

53
00:03:32.640 --> 00:03:35.460
or developer, right? You need
to use the tools that

54
00:03:35.460 --> 00:03:39.540
are best for your needs
and is clear if you

55
00:03:39.540 --> 00:03:43.080
I'm writing smaller programs for
the web. Do you have

56
00:03:43.080 --> 00:03:46.170
a script for this next
program, millennials? And I believe

57
00:03:46.170 --> 00:03:55.140
it's even fast nowadays, but
the, but the important part

58
00:03:55.140 --> 00:03:58.050
is that we could also
see that big companies like

59
00:03:58.200 --> 00:04:02.580
Google and other ones too,
when writing the case and

60
00:04:02.580 --> 00:04:06.390
they were struggling with the
complexity and the lack of

61
00:04:06.390 --> 00:04:09.030
structure in, in JavaScript. And
that was sort of the

62
00:04:09.030 --> 00:04:13.290
opening that made us think
about creating something that will

63
00:04:13.770 --> 00:04:17.490
suit better big projects. So
if you have the several

64
00:04:17.490 --> 00:04:20.880
teams collaborating on a big
piece of software, we actually

65
00:04:20.880 --> 00:04:24.870
had a programming language here
that would help facilitate that

66
00:04:24.870 --> 00:04:30.480
development work. You could say
that other other things have

67
00:04:30.480 --> 00:04:33.060
come along since we introduced
that like TypeScript and a

68
00:04:33.060 --> 00:04:37.110
few others like that, that
sort of gives us the

69
00:04:37.110 --> 00:04:40.440
impression that we're not alone.
And having the understanding that

70
00:04:40.800 --> 00:04:43.920
building really big things in
pure JavaScript is hard work.

71
00:04:44.010 --> 00:04:46.710
So getting more structure and
more tooling around it is

72
00:04:46.710 --> 00:04:50.070
very helpful. So when something
comes out like, like TypeScript,

73
00:04:50.340 --> 00:04:52.800
do you look upon that
as a validation of your

74
00:04:52.830 --> 00:04:55.890
concepts or as competition? Where,
how do you as programming

75
00:04:55.890 --> 00:05:00.450
language creators, see things like
that? I think the answer

76
00:05:00.450 --> 00:05:04.650
is both. Of course there's
a competitor and we love

77
00:05:04.650 --> 00:05:09.180
competition. So it's really nice
to have competitors. So we

78
00:05:09.180 --> 00:05:12.330
are on our toes and
making a better platform. On

79
00:05:12.330 --> 00:05:15.570
the other hand, it's also
validates that the program has

80
00:05:15.570 --> 00:05:21.270
need choice when doing applications.
So I will com platforms

81
00:05:21.270 --> 00:05:24.180
as well. And I think
the platforms are learning from

82
00:05:24.180 --> 00:05:27.840
each other. So I think
we are seeing faster improvements

83
00:05:27.840 --> 00:05:30.750
to client side programming tools
than we did in the

84
00:05:30.750 --> 00:05:34.260
past. And that's a very
good thing for all developers.

85
00:05:35.280 --> 00:05:38.040
So I think we can
really keep that up for

86
00:05:38.040 --> 00:05:40.440
awhile. We can actually improve
the state of the yard

87
00:05:40.440 --> 00:05:44.340
within client side programming tremendously.
So you say client side

88
00:05:44.340 --> 00:05:46.650
programming, but I'm also hearing
that you're looking at dart

89
00:05:46.650 --> 00:05:48.450
as being more general purpose.
Do you think you'll be

90
00:05:48.450 --> 00:05:51.090
writing, you know, when you
write note apps in dart

91
00:05:51.090 --> 00:05:54.000
and write service side apps
in dart, In fact, you

92
00:05:54.000 --> 00:05:57.290
can already do that today.
So if you go to

93
00:05:57.290 --> 00:06:00.110
our repository, you can see
there's already the server packages

94
00:06:00.110 --> 00:06:03.380
available. So if you want
to provide, so as in

95
00:06:03.380 --> 00:06:05.870
dark, you can do that.
And we are using that

96
00:06:05.870 --> 00:06:08.720
quite heavily ourselves. So like
we are, we're using auto

97
00:06:08.730 --> 00:06:10.730
own tools of course, to
have to learn something about

98
00:06:10.730 --> 00:06:13.970
them, but we're building a
lot of the dark tooling

99
00:06:14.000 --> 00:06:16.460
in art itself. And most
of those tools actually run

100
00:06:17.960 --> 00:06:20.720
on the command line in
a more service side, like

101
00:06:20.720 --> 00:06:24.410
setting then not really like
client apps. So the translator

102
00:06:24.410 --> 00:06:28.430
we have to translate starts
to efficient. JavaScript is essentially

103
00:06:29.570 --> 00:06:32.030
a problem. You run it
on your workstation. So it's

104
00:06:32.030 --> 00:06:34.810
not a client side programming
any in any form. Hmm.

105
00:06:35.050 --> 00:06:38.620
So anywhere, anywhere a JavaScript
that VM runs anywhere, V8

106
00:06:38.620 --> 00:06:41.290
runs dark runs as well.
Can you tell me, you

107
00:06:41.320 --> 00:06:44.080
talk about the relationship between
JavaScript and V8 and dart

108
00:06:44.080 --> 00:06:46.030
and does dart have its
own VM or to start

109
00:06:46.030 --> 00:06:48.730
run on VA because you
talk about translating dart to

110
00:06:48.730 --> 00:06:52.120
JavaScript. And when I think
JavaScript, I think V8, I'm

111
00:06:52.120 --> 00:06:56.680
not quite sure about those
relationships. So, so again, well

112
00:06:56.680 --> 00:06:59.290
the answer is yes, and
yes, first of all, it's

113
00:06:59.290 --> 00:07:02.290
important to, to note that
we don't want to break

114
00:07:02.290 --> 00:07:04.470
the web. So it's important
that we can warn in

115
00:07:04.480 --> 00:07:07.240
our process and in order
to do that, we need

116
00:07:07.240 --> 00:07:09.610
to generate a demo script
so that when you have

117
00:07:09.610 --> 00:07:11.560
a DOD program, you want
to run in, in a,

118
00:07:11.650 --> 00:07:13.840
in a, in a browser,
we can translate to JavaScript

119
00:07:13.840 --> 00:07:16.480
and it will behave exactly
the same if you run

120
00:07:16.480 --> 00:07:20.970
it in Safari or Firefox,
as well as in, in

121
00:07:21.040 --> 00:07:24.130
Chrome on the server side,
if you want to stand

122
00:07:24.130 --> 00:07:27.100
alone dot on the server,
you you're typically using the,

123
00:07:28.270 --> 00:07:33.520
the dot VM and we
have a fairly good, so

124
00:07:33.540 --> 00:07:37.570
a VM. So you can
run in 64 bit mode

125
00:07:37.600 --> 00:07:41.170
and run with like 16
gigabytes of heaps. If that's

126
00:07:41.170 --> 00:07:46.120
what you want. And you
can process big data. Is

127
00:07:46.120 --> 00:07:49.750
the dart VM a, an
offshoot of, I'm not sure

128
00:07:49.750 --> 00:07:52.300
if offshoot or fork is
better than a VA, or

129
00:07:52.300 --> 00:07:55.200
is it its own, you
know, clean room implementation of

130
00:07:55.210 --> 00:07:58.090
a new VM for made
for dart only, Oh, this

131
00:07:58.090 --> 00:08:02.050
is of course a clean
room implementation. So DOD is

132
00:08:02.050 --> 00:08:06.010
fundamentally different than <inaudible>. When
we created the other script.

133
00:08:06.010 --> 00:08:10.660
It was a use an
exercise in making a very

134
00:08:10.660 --> 00:08:14.170
dynamic system run fast. And
the way we did that

135
00:08:14.170 --> 00:08:19.180
was by, by cooking up,
eh, eh, classes on the

136
00:08:19.180 --> 00:08:22.120
fly, if you will, to
make it run fast. So

137
00:08:22.310 --> 00:08:25.210
we were creating thousands and
thousands of classes behind the

138
00:08:25.210 --> 00:08:28.690
scenes while running Java script.
We don't have to do

139
00:08:28.690 --> 00:08:32.080
that in that because it's
more structured. So all this

140
00:08:32.110 --> 00:08:35.500
dynamic behavior we don't, we
couldn't use for anything. And

141
00:08:35.500 --> 00:08:37.900
that also allows us to
make a simpler working machine

142
00:08:37.900 --> 00:08:41.050
that will execute that. And
we can certainly take advantage

143
00:08:41.050 --> 00:08:43.480
of that to make it
run faster and skate better.

144
00:08:44.140 --> 00:08:46.630
Oh, okay. So the dart
virtual machine, because it is

145
00:08:46.960 --> 00:08:50.710
really truly the dart virtual
machine for dart, it is

146
00:08:50.950 --> 00:08:53.650
fundamentally different in the problems
that it's trying to solve

147
00:08:54.040 --> 00:08:57.090
from JavaScript. It's I would
maybe say that in order

148
00:08:57.090 --> 00:08:59.250
to support JavaScript, they're probably
some hacks that you needed

149
00:08:59.250 --> 00:09:01.980
to do to make VA
super fast, but on the

150
00:09:01.980 --> 00:09:04.860
dark side, you design the
language. So you know what

151
00:09:04.860 --> 00:09:08.840
your goal is, and you
can run faster. Exactly. Example

152
00:09:08.840 --> 00:09:12.710
of that is that in
JavaScript and all objects that

153
00:09:12.720 --> 00:09:16.400
you have are basically expandable
by design. So you can

154
00:09:16.400 --> 00:09:19.310
add new properties through them
on the fly, which is

155
00:09:19.310 --> 00:09:22.090
a very dynamic feature. And
that is the way you

156
00:09:22.370 --> 00:09:25.790
construct objects in JavaScript in
art. You declare that you're

157
00:09:26.270 --> 00:09:28.580
a certain class of objects,
we'll have a number of

158
00:09:28.580 --> 00:09:31.760
fields. And once you create
an instance of a certain

159
00:09:31.760 --> 00:09:34.770
class, you cannot add new
fields to it. So there's

160
00:09:34.850 --> 00:09:41.540
the structure and the less
flexible, but much more structured

161
00:09:41.540 --> 00:09:45.650
approach really helps the VM
run, run the code faster

162
00:09:45.650 --> 00:09:48.020
because it doesn't have to
care about or worry about

163
00:09:48.020 --> 00:09:51.770
people adding properties to objects
on the fly. And another

164
00:09:51.770 --> 00:09:53.900
way to look at it
is when we did V8,

165
00:09:54.500 --> 00:09:58.460
we were focusing on optimizing
a subset of JavaScript that

166
00:09:58.460 --> 00:10:02.720
one fast. And if you
went outside that subset, the

167
00:10:02.720 --> 00:10:06.140
performance would degrade. One example.
If you delete a property

168
00:10:06.140 --> 00:10:09.410
or an object in a,
in a critical path of

169
00:10:09.410 --> 00:10:12.260
your program, it will just
slow down tremendously in the

170
00:10:12.680 --> 00:10:17.030
NGO script. And that's just
the hard to fix because

171
00:10:17.060 --> 00:10:22.040
jails could be so, so
flexible in that. On the

172
00:10:22.040 --> 00:10:25.070
other hand, you cannot change
the, the format of an

173
00:10:25.070 --> 00:10:28.880
object after it's been created.
And that means that there's

174
00:10:28.880 --> 00:10:32.930
no subset as fast, the
whole language is fast. So

175
00:10:33.290 --> 00:10:35.360
that's another way of putting
it. So we are trying

176
00:10:35.360 --> 00:10:38.570
to make sure that all
programs are written that are

177
00:10:38.570 --> 00:10:41.360
performing really well compared to
in JavaScript, but you have

178
00:10:41.360 --> 00:10:45.170
to, to manage within a
subset of it. Oh, okay.

179
00:10:45.170 --> 00:10:48.020
One of the things that
I tell, you know, new

180
00:10:48.020 --> 00:10:52.550
programmers when I'm teaching them
is assert your assumptions. And

181
00:10:52.550 --> 00:10:55.430
it seems to me like
by asserting those assumptions at

182
00:10:55.430 --> 00:10:57.740
the programming language level, you're
making it a lot easier.

183
00:10:57.750 --> 00:11:01.220
The runtime, because you're not
going to pull something out

184
00:11:01.220 --> 00:11:03.080
from underneath them. Like you
just said, like, if you,

185
00:11:03.740 --> 00:11:05.090
you know, this is an
object, this is an object.

186
00:11:05.090 --> 00:11:07.280
No, it's not the object.
You thought it was everything,

187
00:11:07.280 --> 00:11:11.450
you know is wrong. Now,
runtime, try again. You really

188
00:11:11.450 --> 00:11:14.420
can't be both incredibly flexible
and incredibly fast. Can you,

189
00:11:15.860 --> 00:11:18.140
Unless you are very structured
in your approach and it

190
00:11:18.140 --> 00:11:23.170
turns out most proficient error
script programmers, they use this

191
00:11:23.170 --> 00:11:27.110
subset and will gain a
fairly good performance out of

192
00:11:27.110 --> 00:11:31.160
it, but it's still a
very dynamic, there's no static

193
00:11:31.160 --> 00:11:35.360
types. Whereas in doc, we
put in often aesthetic type.

194
00:11:35.370 --> 00:11:37.610
So if you want to
make sure that you can,

195
00:11:38.270 --> 00:11:41.930
that the contract between a
user and the library is

196
00:11:41.930 --> 00:11:45.350
maintained, you can validate that
library is only used in

197
00:11:45.350 --> 00:11:47.750
a certain way. That's really
hard to do in JavaScript

198
00:11:47.750 --> 00:11:51.590
because there's no static types
Static typing in dart then

199
00:11:51.590 --> 00:11:55.160
is it really just a,
a spellcheck it's a, a

200
00:11:55.180 --> 00:11:58.540
more aggressive compile or other
runtime things that are gonna

201
00:11:58.570 --> 00:12:02.010
maybe make it slower because
I use those annotations. So

202
00:12:02.010 --> 00:12:07.050
the there's two things in
the programming environment, in the

203
00:12:07.290 --> 00:12:09.810
programming Weinman, you can type,
take your programs. I can

204
00:12:09.810 --> 00:12:13.260
tell you if something doesn't
match, but since it's mixed

205
00:12:13.260 --> 00:12:16.620
mode or optional type, some
code is on type. Then

206
00:12:16.620 --> 00:12:18.690
some is typed it's up
to the program of sight,

207
00:12:18.690 --> 00:12:21.450
what he wants to use,
but we haven't moved. If

208
00:12:21.450 --> 00:12:24.060
we can. One the in
that will validate that you

209
00:12:24.060 --> 00:12:27.600
pay the types in the
program, but when you deploy

210
00:12:27.600 --> 00:12:29.310
the program, you of course
don't want to run in

211
00:12:29.310 --> 00:12:32.700
this validation mode and then
once full speed. So there's

212
00:12:32.700 --> 00:12:35.280
a few ways that you
can validate your program behaves

213
00:12:35.280 --> 00:12:37.680
the way you expect it
to do. We've. We found

214
00:12:37.680 --> 00:12:42.420
that basically using type annotations,
at least allowing people to

215
00:12:42.420 --> 00:12:45.120
use them as assertions in
their code so they can

216
00:12:45.120 --> 00:12:46.950
check them at runtime and
the system will do that

217
00:12:46.950 --> 00:12:50.520
for them. It makes it
a lot easier to track

218
00:12:50.520 --> 00:12:53.280
down weird issues when debugging,
so that if you turn

219
00:12:53.280 --> 00:12:55.620
this thing on, you might
get the failure a lot

220
00:12:55.620 --> 00:12:57.690
earlier than you expected, but
that will tell you much

221
00:12:57.690 --> 00:13:00.330
more about where this weird
value turned up in the

222
00:13:00.330 --> 00:13:02.910
system, and it will not
propagate as far through the

223
00:13:02.910 --> 00:13:06.990
system before you can really
get there, get to the

224
00:13:06.990 --> 00:13:11.550
cause of it. So it's
really, really helpful when testing

225
00:13:11.550 --> 00:13:14.100
and validating that yourself at
works. I have an interesting

226
00:13:14.100 --> 00:13:17.580
story. We had a company
that had a group of

227
00:13:17.580 --> 00:13:22.080
designers. They prefer writing in,
on type code. And then

228
00:13:22.080 --> 00:13:25.230
they had the infrastructure guys
that communicated with the backend.

229
00:13:25.650 --> 00:13:29.070
They wanted to have everything
typed and in dart, they

230
00:13:29.080 --> 00:13:31.920
work really well because when
they put these two pieces

231
00:13:31.920 --> 00:13:35.430
of code together, they could,
the infrastructure guys could validate

232
00:13:35.430 --> 00:13:38.490
that the sinus would pass
in the right kind of

233
00:13:38.490 --> 00:13:42.240
optics when the tests, the
code. So in such an

234
00:13:42.240 --> 00:13:45.300
example, they have the freedom
that they want it. And

235
00:13:45.600 --> 00:13:47.790
at the same time, it
could validate the program work

236
00:13:47.790 --> 00:13:51.900
the way it was intended
to. Interesting that that actually

237
00:13:51.900 --> 00:13:54.240
makes a lot of sense.
One of the other things

238
00:13:54.240 --> 00:13:57.210
that I think is interesting
about dart is that you,

239
00:13:57.240 --> 00:14:00.030
you, it feels, you know,
it feels see, like, of

240
00:14:00.030 --> 00:14:02.910
course it's, class-based, it's single
inheritance, but then you've got

241
00:14:02.910 --> 00:14:05.430
these mix ends. Maybe you
could talk about that because

242
00:14:05.430 --> 00:14:09.900
it seems like mix ins
are, are really gaining acceptance,

243
00:14:09.930 --> 00:14:12.780
but the idea that you've
taken something that's very much

244
00:14:12.780 --> 00:14:15.090
like C and very much
like Java and then something

245
00:14:15.090 --> 00:14:17.460
that's very much like Ruby
and brought them together is

246
00:14:17.460 --> 00:14:21.870
really interesting. So it makes
sense. It's a fairly simple

247
00:14:21.870 --> 00:14:25.920
concept. Sometimes you want to
share code between separate class

248
00:14:25.920 --> 00:14:27.990
hierarchies and it's, it's, it's
somewhat hard to do in

249
00:14:27.990 --> 00:14:30.690
most systems. Some systems allow
you to do like multiple

250
00:14:30.690 --> 00:14:33.750
inheritance, but it gets really
complicated very quickly. So you

251
00:14:33.750 --> 00:14:36.510
can think of a mix
and as all the methods

252
00:14:36.540 --> 00:14:39.130
and all the behavior from
a certain class, and you,

253
00:14:39.130 --> 00:14:41.130
you can actually, in doc,
you can say that I

254
00:14:41.130 --> 00:14:45.840
want my class to basically
get the same behavior as

255
00:14:45.840 --> 00:14:49.260
another class pulled into it
definition. So you can basically

256
00:14:49.260 --> 00:14:54.530
have small units of behavior
that you can plug into

257
00:14:55.550 --> 00:14:58.580
different class hierarchies and get
extra sharing through that. So

258
00:14:58.580 --> 00:15:02.630
imagine that you have, and
you want to have multiple

259
00:15:02.630 --> 00:15:05.570
different kinds of lists in
your system, but they all

260
00:15:05.570 --> 00:15:08.390
share a good chunk of
the same behavior, like finding

261
00:15:08.390 --> 00:15:10.790
an element by index or
something like that. You can

262
00:15:10.790 --> 00:15:12.980
take that behavior and put
it in one place in

263
00:15:12.980 --> 00:15:15.110
a mixer, and then you
can apply that mix into

264
00:15:15.110 --> 00:15:18.440
multiple independent Vista implementations and
get my sharing out of

265
00:15:18.440 --> 00:15:22.160
that. So many ways, it's
a simple concept. So the

266
00:15:22.160 --> 00:15:24.500
alternative, if you don't have
mixing is you copy the

267
00:15:24.500 --> 00:15:27.620
code from one place to
another. So you have several

268
00:15:27.620 --> 00:15:30.800
copies around and then it
becomes really hard to maintain.

269
00:15:31.970 --> 00:15:34.400
So mixing, what we'll help
you do is to keep

270
00:15:34.400 --> 00:15:37.190
the code concise and make
sure we don't replicate the

271
00:15:38.030 --> 00:15:41.680
behavior. One of the examples
that I always try to

272
00:15:41.820 --> 00:15:44.080
try to use for myself
to understand this is that

273
00:15:44.290 --> 00:15:47.290
we build the standard object
oriented animal hierarchy that we

274
00:15:47.290 --> 00:15:49.990
always learned in school. And
then suddenly these animals know

275
00:15:49.990 --> 00:15:54.670
how to save themselves and
save themselves, persist themselves to

276
00:15:54.670 --> 00:15:57.070
disk. And then this is
where the students' eyes start

277
00:15:57.070 --> 00:15:59.320
to glaze over because it's
like, well, they don't really

278
00:15:59.530 --> 00:16:01.780
do that. But then with
a mix and you could

279
00:16:01.780 --> 00:16:04.390
have something like persistence that
has nothing to do with

280
00:16:04.390 --> 00:16:07.690
it. So it's almost like
there's a, a multiple inheritance,

281
00:16:08.080 --> 00:16:10.390
but it's not the kind
of inheritance that matters. Like

282
00:16:10.390 --> 00:16:14.500
the main primary inheritance is
your single inheritance and then

283
00:16:14.500 --> 00:16:18.220
mix ins are, are kind
of orthogonal to that. Yep.

284
00:16:18.910 --> 00:16:23.530
That's exactly right. And then,
so rather than interfaces, and

285
00:16:23.530 --> 00:16:26.470
then having things that know
how to save them, the

286
00:16:26.470 --> 00:16:29.800
objects could really have that
functionality by themselves. Is it

287
00:16:29.800 --> 00:16:33.670
primarily to stay dry? Is
it just a pragmatic thing

288
00:16:33.970 --> 00:16:36.940
to have makes sense? I
always say it. It's just

289
00:16:36.940 --> 00:16:41.080
a very good abstraction mechanism.
You can use. One thing

290
00:16:41.080 --> 00:16:42.970
I would like to point
out in DOD is that

291
00:16:44.710 --> 00:16:48.250
X class in dark can
be used both as an

292
00:16:48.250 --> 00:16:53.890
interface as a class. And
if the mix it, so

293
00:16:53.890 --> 00:16:58.540
the class concept we'll call
all three uses. And that's

294
00:16:58.540 --> 00:17:00.220
a little bit different than
if you look at Java

295
00:17:00.220 --> 00:17:05.170
where you have explicit classes
and explicit interfaces, That's different

296
00:17:05.170 --> 00:17:07.060
than a lot of languages,
isn't it? That's, it's almost

297
00:17:07.060 --> 00:17:10.750
like it's, you're speaking about
contracts more generally. And, and,

298
00:17:10.750 --> 00:17:12.160
and, you know, if it,
if it kind of duct

299
00:17:12.160 --> 00:17:14.290
typing, you know, like if
we need to use this

300
00:17:14.290 --> 00:17:16.450
in the context of an
interface, then we just will.

301
00:17:17.860 --> 00:17:19.870
Yeah. We found that sometimes
it's really hard for people

302
00:17:19.870 --> 00:17:22.480
to be forced to split
a class into an interface

303
00:17:22.480 --> 00:17:25.150
and interpretation very early on
the process. So sometimes they

304
00:17:25.150 --> 00:17:28.000
will not do it because
it feels painful later on.

305
00:17:28.000 --> 00:17:30.460
Maybe someone comes along and
can provide a different implementation

306
00:17:30.460 --> 00:17:33.160
of the same kind of
class. And it's really painful

307
00:17:33.160 --> 00:17:36.010
that then you have to
go and change the original

308
00:17:36.010 --> 00:17:38.330
code to allow you to
do that. It's much, much

309
00:17:38.390 --> 00:17:40.450
nicer than you can just
say, I'll hook into this

310
00:17:40.450 --> 00:17:42.640
and I'll make it work.
And I'll just, instead of

311
00:17:42.910 --> 00:17:45.520
inheriting from that class, I'll
just internet, the same interface

312
00:17:45.520 --> 00:17:49.150
as it has. And it
works really well in practice.

313
00:17:49.170 --> 00:17:52.940
I would say When you're
creating a language like this,

314
00:17:53.330 --> 00:17:56.210
you know, within the context
of Google, you're, you're kind

315
00:17:56.210 --> 00:18:01.910
of, they're your benefactors, But
you're not like Research. Like

316
00:18:01.910 --> 00:18:05.840
sometimes computer languages get created
by researchers in a very

317
00:18:06.560 --> 00:18:10.160
philosophical way up in a
ivory tower somewhere. But everything

318
00:18:10.160 --> 00:18:14.690
I hear about you guys
is pragmatism, pragmatism, pragmatism. How

319
00:18:14.690 --> 00:18:19.310
does that work? That organizationally?
So organizationally it's, it's very

320
00:18:19.310 --> 00:18:23.600
simple, right? We, our main
goal is to make, make

321
00:18:23.600 --> 00:18:27.500
products that work and that
will make programs more productive

322
00:18:27.500 --> 00:18:31.190
when they write programs. It
is not research. And I

323
00:18:31.190 --> 00:18:34.430
think it's important that we
don't see ourselves as researchers

324
00:18:34.430 --> 00:18:40.220
because then it sort of
easily ends up being more

325
00:18:40.220 --> 00:18:44.210
advanced than you actually want
for phenomenal programs. So we

326
00:18:44.210 --> 00:18:47.270
actually took a very pragmatic
view when you signed the

327
00:18:47.270 --> 00:18:50.300
language that we wanted, something
that was simple to understand

328
00:18:50.600 --> 00:18:54.770
actually our, our, our model
was a little bit like

329
00:18:54.770 --> 00:18:57.440
small, small talk. That's a
very, has a very simple

330
00:18:57.440 --> 00:19:00.320
execution model. We wanted that
to, we didn't want a

331
00:19:00.920 --> 00:19:03.620
sort of implicit conversion of
objects on the fly as

332
00:19:03.620 --> 00:19:05.450
you haven't, you have a
script. So very simple. So

333
00:19:05.450 --> 00:19:07.310
when you looked at the
program, you knew exactly what

334
00:19:07.310 --> 00:19:09.890
would happen when you execute
it. So that was sort

335
00:19:09.890 --> 00:19:11.930
of the starting point of
it. And of course, curly

336
00:19:11.930 --> 00:19:14.720
braces, you needed that because
otherwise you cannot become popular.

337
00:19:16.610 --> 00:19:20.270
But the, but I think
the, the design of the

338
00:19:20.270 --> 00:19:23.390
language while doing the instrumentation
and making sure it was

339
00:19:23.390 --> 00:19:28.000
fast initially, I think has
really helped us understand what

340
00:19:28.010 --> 00:19:31.160
we need to do in
order to evolve the language.

341
00:19:32.640 --> 00:19:35.240
Your goal, as you stated,
is really just, you know,

342
00:19:35.270 --> 00:19:38.030
make a great language that
people will like to use.

343
00:19:38.690 --> 00:19:40.580
But out in the, out,
in the, in the, in

344
00:19:40.580 --> 00:19:43.430
the world, it's kind of
like the language Wars. And

345
00:19:43.430 --> 00:19:46.820
it seems like there's almost
a, a renewed Renaissance in

346
00:19:46.820 --> 00:19:49.810
language, as people are getting
excited again about languages. We,

347
00:19:49.810 --> 00:19:52.280
there was a very quiet
period. I felt in the

348
00:19:52.280 --> 00:19:54.830
early two thousands where it
was like time to write

349
00:19:54.830 --> 00:19:57.770
some Java and everyone was
just out there writing their,

350
00:19:57.820 --> 00:19:59.900
their boring stuff. And then
suddenly we've got Brust and

351
00:19:59.900 --> 00:20:01.760
we've got go, and we've
got Python and we've got

352
00:20:01.760 --> 00:20:04.250
Ruby and we're going go,
going, going, going talk a

353
00:20:04.250 --> 00:20:07.130
little bit about, about go,
because this is another language

354
00:20:07.130 --> 00:20:11.000
is that's that's coming up.
Are they, are they comp

355
00:20:11.030 --> 00:20:14.870
competing? Are they coopertition? How
does that work? The rise

356
00:20:14.870 --> 00:20:19.250
of go and the rise
of dark. I think it's

357
00:20:19.270 --> 00:20:21.260
a different programming language. So
there's a little bit of

358
00:20:21.260 --> 00:20:25.250
competition now. They're also from
Google and they're good friends

359
00:20:25.250 --> 00:20:29.000
of ours. So it's not
a big deal. The, the

360
00:20:29.000 --> 00:20:32.150
main point I want to
make is that that goal

361
00:20:32.180 --> 00:20:35.990
is mostly targeting suicide computation,
where we are trying to

362
00:20:35.990 --> 00:20:38.630
be more general purpose, and
we will also want inside

363
00:20:38.630 --> 00:20:44.120
the browser. And again, we
have really tried with designing

364
00:20:44.120 --> 00:20:47.710
that to make it easy
to start using. So our

365
00:20:47.710 --> 00:20:50.020
goal from the beginning was
to make sure that if

366
00:20:50.020 --> 00:20:53.440
you had a background in
Java script or Java or

367
00:20:53.440 --> 00:20:56.350
C sharp, you will within
an hour to be up

368
00:20:56.350 --> 00:21:00.310
running with dot, and that's
something we have kept in

369
00:21:00.310 --> 00:21:03.880
mind doing the whole design.
And I think it's pretty

370
00:21:03.880 --> 00:21:07.600
close to what we in
debt. Yeah, we were pretty

371
00:21:07.810 --> 00:21:10.600
cautious in the sense that
we felt like we couldn't

372
00:21:10.600 --> 00:21:14.680
improve something dramatically. We decided
to go for the Familia

373
00:21:14.680 --> 00:21:17.050
solution. And I think that
that's paid off and we

374
00:21:17.050 --> 00:21:19.090
do get the feedback that
if people try this out

375
00:21:19.630 --> 00:21:22.630
and they feel, feel it's
very easy to get going

376
00:21:22.630 --> 00:21:26.500
in it, I think go
is, requires a little bit

377
00:21:26.500 --> 00:21:29.500
more of, of, of change
of mind and coming to

378
00:21:29.500 --> 00:21:31.870
terms with a different kind
of program model, which to

379
00:21:31.870 --> 00:21:33.490
some makes it a lot
more exciting. And I think

380
00:21:33.490 --> 00:21:36.100
that's a very good thing,
but for us, I think,

381
00:21:36.130 --> 00:21:40.600
eh, trying to basically cater
to some, to the needs

382
00:21:40.660 --> 00:21:43.960
of, of people that just
want to write their app

383
00:21:43.990 --> 00:21:46.990
and get it out there
running very efficiently, it seems

384
00:21:46.990 --> 00:21:49.440
like the right approach. Yeah.
That makes sense. That makes

385
00:21:49.440 --> 00:21:50.880
sense. One of the things
that I've said to people,

386
00:21:50.880 --> 00:21:53.280
I think that they should,
if people say, what should

387
00:21:53.280 --> 00:21:55.740
you learn if you want
to be a successful programmer

388
00:21:55.740 --> 00:21:59.610
in 2014 or in 2015?
And I say, learn JavaScript

389
00:21:59.670 --> 00:22:02.610
or a, and a systems
language. So something on the

390
00:22:02.610 --> 00:22:04.770
front end, something on the
backend, so they could learn

391
00:22:04.770 --> 00:22:08.970
dart maybe and Java or
dart and, and no JS

392
00:22:08.970 --> 00:22:11.400
on the back end or
dart and go, so go

393
00:22:11.400 --> 00:22:14.790
would be more for server
side and concurrency type things.

394
00:22:15.420 --> 00:22:17.070
And then they could learn
dart or they could, in

395
00:22:17.070 --> 00:22:19.860
this case, you're saying they
can use dart as JavaScript

396
00:22:19.860 --> 00:22:23.670
and as serve as a
system. No. Then you can

397
00:22:23.670 --> 00:22:25.710
ask the question, why is
it important that you run

398
00:22:25.710 --> 00:22:28.050
the same language, both on
the client, on the server,

399
00:22:28.080 --> 00:22:32.070
right. And the Holy grail
of course, is programmer productivity.

400
00:22:32.070 --> 00:22:34.740
So we've can reuse the
same modules in the client

401
00:22:34.740 --> 00:22:36.960
and on the server, you
save a lot of time

402
00:22:37.620 --> 00:22:41.820
and it also makes it
easier to late in the

403
00:22:41.820 --> 00:22:44.910
game to change the boundary
between the client and the

404
00:22:44.910 --> 00:22:47.400
server, because it's all written
in the same language. So,

405
00:22:47.710 --> 00:22:50.640
so certainly we see an
opportunity as well in making

406
00:22:50.640 --> 00:22:54.360
sure that our platform works
well, both on the sewer

407
00:22:54.390 --> 00:22:57.090
and on the client. But
again, if you want to

408
00:22:57.090 --> 00:23:00.840
prefer Gera or I'll go
on the suicide and, and

409
00:23:00.840 --> 00:23:04.830
data on the client side,
more power to you, I

410
00:23:04.830 --> 00:23:07.470
think it's really important that
people actually feel like it's

411
00:23:07.470 --> 00:23:09.090
a good thing to know
more than one language. I

412
00:23:09.090 --> 00:23:11.190
think it makes you a
much better programmer in that

413
00:23:12.090 --> 00:23:15.540
one Pacific specific language, if
you actually is fairly proficient

414
00:23:15.540 --> 00:23:17.970
in other languages too, I
think you really need to

415
00:23:18.360 --> 00:23:21.000
expand your license a little
bit. So even if I

416
00:23:21.020 --> 00:23:23.580
prefer people to write everything
in that, I think probably

417
00:23:23.580 --> 00:23:25.620
book would be better for
them to actually try a

418
00:23:25.620 --> 00:23:29.220
few things and get to
terms with whatever works well

419
00:23:29.220 --> 00:23:32.340
in go or Python or
rust, and then get back

420
00:23:32.340 --> 00:23:35.400
to that afterwards. Yeah. I
think you have to find,

421
00:23:35.400 --> 00:23:37.170
I always say the language
of your soul, you know,

422
00:23:37.170 --> 00:23:38.880
the one that makes you
feel good, the one that

423
00:23:38.880 --> 00:23:41.010
feels right in your hands,
the one that feels right

424
00:23:41.010 --> 00:23:43.380
in your mouth, I have
to give you a compliment

425
00:23:43.380 --> 00:23:46.220
though. I really feel like
when you go to lang.org

426
00:23:46.250 --> 00:23:48.140
where people can learn about
dart, they can download the

427
00:23:48.140 --> 00:23:51.140
editor. I really liked the
way you said you can

428
00:23:51.140 --> 00:23:53.540
see dart in about five
minutes. You can write it

429
00:23:53.540 --> 00:23:55.310
in about an hour and
you can dive deep in

430
00:23:55.310 --> 00:23:58.890
about a day. It's, it's
really nonthreatening. You know, when,

431
00:23:58.890 --> 00:24:00.560
when I think about some
of the other languages, like

432
00:24:00.560 --> 00:24:02.600
if I were going to
go learn, you know, our

433
00:24:02.660 --> 00:24:05.840
rushed or go, it's like,
Oh, I don't know if

434
00:24:05.840 --> 00:24:08.780
I have the mental bandwidth
to just sit down and

435
00:24:08.780 --> 00:24:13.760
dedicate my week to learning
food Lang. But you know,

436
00:24:13.760 --> 00:24:15.200
like you say, with dart
and the way you've set

437
00:24:15.200 --> 00:24:17.900
up the, the online stuff
and getting started, it really

438
00:24:17.900 --> 00:24:20.510
is very nonthreatening. And particularly
around the type annotations it's

439
00:24:20.510 --> 00:24:22.580
like, Oh, I, I kinda
know this already. Don't I,

440
00:24:23.740 --> 00:24:27.640
And I think the it's
important to note here because

441
00:24:27.640 --> 00:24:32.170
it's simple and unthreatening does
mean it's not expressive. And

442
00:24:33.010 --> 00:24:36.910
I still believe that we
have a modern programming language

443
00:24:37.660 --> 00:24:40.540
that within a few days,
we'll make it really efficient

444
00:24:40.540 --> 00:24:44.020
in writing what you want.
And so we've been implementing

445
00:24:44.020 --> 00:24:46.510
languages the last while, at
least for me the last

446
00:24:46.810 --> 00:24:50.710
28 years or so, we
have tried very hard to

447
00:24:50.710 --> 00:24:56.020
learn from the past and
make it simpler. It's definitely

448
00:24:56.020 --> 00:24:58.600
not starting from, from scratch.
You could say, we're certainly

449
00:24:58.600 --> 00:25:01.810
trying to, to make sure
that we sell to stand

450
00:25:01.810 --> 00:25:05.230
on the shoulders of the
giants and that we build

451
00:25:05.230 --> 00:25:07.540
on top of what others
found were effective ways of

452
00:25:07.540 --> 00:25:11.620
doing things. So we, we've
definitely borrowed lots of concepts

453
00:25:11.620 --> 00:25:13.900
from different places. And I
think that's a good way

454
00:25:13.900 --> 00:25:16.660
of designing languages. I would
say it's the only, the

455
00:25:16.660 --> 00:25:18.850
only way isn't it. I
mean, to abstract on the

456
00:25:18.850 --> 00:25:21.880
shoulders of giants is the
whole is the whole point.

457
00:25:21.940 --> 00:25:24.700
You know, this is languages
like these new languages, just

458
00:25:24.700 --> 00:25:26.380
because the language is new,
it doesn't make it a

459
00:25:26.380 --> 00:25:29.560
toy. And this is why
we, we look at the,

460
00:25:29.800 --> 00:25:32.440
you know, the historical context
and where this language fits

461
00:25:32.440 --> 00:25:35.890
into the family tree of
languages. And, you know, the

462
00:25:35.890 --> 00:25:37.720
fact that this is not
the, this is not your

463
00:25:37.720 --> 00:25:41.530
first rodeo. As we say
in America, you've made quite

464
00:25:41.530 --> 00:25:44.140
a few virtual machines in
your, in your, in your

465
00:25:44.140 --> 00:25:49.090
lifetimes. This is one question
I was, I was exploring

466
00:25:49.090 --> 00:25:53.080
and doing some research. I
did see this, this leaked

467
00:25:53.080 --> 00:25:57.670
internal mail before when dart
was called dash. And in

468
00:25:57.670 --> 00:25:59.770
that mail, it's kind of
a strategy, mail and leaks

469
00:25:59.770 --> 00:26:02.050
are always unfortunate. But one
of the things that is

470
00:26:02.050 --> 00:26:04.420
interesting in there as they
talk about this idea of,

471
00:26:04.840 --> 00:26:09.220
of the replacement for JavaScript,
will we ever replace it?

472
00:26:09.220 --> 00:26:10.990
Or is it just one
of those things that it'll

473
00:26:11.020 --> 00:26:13.570
always be with us is
JavaScript than idea virus. We

474
00:26:13.570 --> 00:26:16.420
can't stop. Cause everyone talks
about, you know, we love

475
00:26:16.420 --> 00:26:19.810
JavaScript. It's everywhere. We hate
JavaScript. It's so broken. Why

476
00:26:19.810 --> 00:26:22.120
do we let it to
continue? What do you think

477
00:26:22.120 --> 00:26:28.030
about that? So what can
I say? I think people

478
00:26:28.030 --> 00:26:33.010
are still using cobalt. So
I, so the web, the

479
00:26:33.010 --> 00:26:38.770
web browser is enormously popular,
right? A great advance has

480
00:26:38.770 --> 00:26:44.400
done to even improve the
ECMAScript, which telescript, and also

481
00:26:44.400 --> 00:26:47.430
the speed of it. So
it will be there for

482
00:26:47.430 --> 00:26:51.150
a long, long time. And
I didn't write the memo

483
00:26:51.150 --> 00:26:54.440
you're referring to. No, I
apologize. I didn't make that

484
00:26:54.440 --> 00:26:56.420
clear. That was, that was
written by some strategy person.

485
00:26:57.050 --> 00:27:02.090
Okay. So in my mind,
what I'm interested in is

486
00:27:02.090 --> 00:27:04.520
making sure that programs have
the tools they need to

487
00:27:04.520 --> 00:27:08.120
do to be efficient. And
especially when it comes to

488
00:27:08.120 --> 00:27:12.380
structure and large programs, we
think that that provides a

489
00:27:12.380 --> 00:27:15.860
good solution. And in fact,
we have had the projects

490
00:27:16.130 --> 00:27:19.160
both inside and outside Google,
that we've got this feedback

491
00:27:19.370 --> 00:27:23.830
that, that fairly big team
started working on that. And

492
00:27:24.380 --> 00:27:26.270
when they ship there, they
come back to us and

493
00:27:26.270 --> 00:27:29.870
say, you know what? This
has been a very pleasant

494
00:27:29.870 --> 00:27:33.230
surprise in efficiency when it
came to, to build this

495
00:27:33.230 --> 00:27:38.210
project. And that's basically, that's
why we're doing it. Like

496
00:27:38.210 --> 00:27:41.930
product productivity of developers is
something that most people, I

497
00:27:41.930 --> 00:27:44.270
think underwrite a little bit.
And I think your tools

498
00:27:44.270 --> 00:27:47.690
really, really matter there. And
you could say that we're

499
00:27:47.690 --> 00:27:50.540
much more interested in, in
helping people get a choice

500
00:27:50.780 --> 00:27:53.930
of developer tools than we
are in replacing anything. I

501
00:27:53.930 --> 00:27:57.320
think if anything, eh, time
has shown that there is

502
00:27:57.380 --> 00:28:00.260
plenty of room for lots
of languages and tool chains,

503
00:28:00.350 --> 00:28:04.430
and they will evolve over
time as well. So I

504
00:28:04.430 --> 00:28:07.730
think the one way to
evaluate a good language from

505
00:28:08.040 --> 00:28:12.140
my perspective is if you
have a debugger and when

506
00:28:12.140 --> 00:28:14.450
you set a break point
and it stops them, or

507
00:28:15.440 --> 00:28:17.480
there's a problem you can
go into debug, you can

508
00:28:17.480 --> 00:28:21.200
understand what's happening in many
program. It's really hard to

509
00:28:21.200 --> 00:28:22.820
figure out what's going on
and you have to put

510
00:28:22.820 --> 00:28:26.390
in print statements just to
make progress. I think that

511
00:28:27.650 --> 00:28:30.260
you should have different fields
that you, when you stop

512
00:28:30.260 --> 00:28:32.540
inside the Depot, you know
exactly how we got there.

513
00:28:33.050 --> 00:28:35.960
That's no magic. And I
think if you're comfortable with

514
00:28:36.020 --> 00:28:41.340
everything that's related to the
programming language, eh, eh, you

515
00:28:41.360 --> 00:28:46.220
you'll get better experimentation and,
and also becoming a better

516
00:28:46.490 --> 00:28:49.910
programmer. That's a really great
explanation. I appreciate that. Cause

517
00:28:49.910 --> 00:28:52.310
I think sometimes people who
are like my listeners and

518
00:28:52.310 --> 00:28:55.130
myself as a, as a
working programmer in the world,

519
00:28:55.130 --> 00:28:58.460
is it, it's hard to
separate the, the, the politics

520
00:28:58.460 --> 00:29:01.280
of the companies and the
languages. And that's why it's

521
00:29:01.280 --> 00:29:02.930
nice to go to the
creators and really get a

522
00:29:02.930 --> 00:29:05.810
sense of, Hey, we're just
trying to build something great.

523
00:29:06.200 --> 00:29:07.610
And I think you should
try it. And if it's

524
00:29:07.610 --> 00:29:11.830
great, you should use it
and, and separate those. So

525
00:29:12.830 --> 00:29:17.900
this we're sitting here in
Denmark fairly far out and,

526
00:29:18.710 --> 00:29:21.100
and we only have one
objective that is to, to

527
00:29:21.110 --> 00:29:26.210
make, make programs more efficient.
And so, yeah, that's no

528
00:29:26.210 --> 00:29:29.060
politics here. You might hear
that from strategists, but not

529
00:29:29.060 --> 00:29:32.390
from us. Very cool. Very
cool. And then one last

530
00:29:32.390 --> 00:29:35.330
question I wanted to ask
was that this isn't just

531
00:29:35.330 --> 00:29:38.180
something that you are just
making up in Denmark, you

532
00:29:38.180 --> 00:29:40.940
have a specification, and this
is something that you send

533
00:29:40.940 --> 00:29:43.240
to, can you talk a
little bit about the organization

534
00:29:43.240 --> 00:29:44.980
of how dart evolves as
a language? Cause I know

535
00:29:44.980 --> 00:29:47.260
that like async and deferred
loading and things like that

536
00:29:47.260 --> 00:29:52.590
are happening. Yes. In fact,
that two days ago, the

537
00:29:54.270 --> 00:29:59.850
ECMAScript technical committee TC 52
approved, I think, await and

538
00:29:59.850 --> 00:30:03.900
also enums and this part
of the spec now. So

539
00:30:03.900 --> 00:30:07.590
we have a, having a
standardization for the program blames.

540
00:30:07.590 --> 00:30:10.140
And if you think it's
important, if you're, if you're

541
00:30:10.140 --> 00:30:15.260
serious about making it a
good and sustainable program Alliance,

542
00:30:15.260 --> 00:30:18.420
that we can get feedback
from other groups using it

543
00:30:18.510 --> 00:30:20.910
so they can help making
it a better program language.

544
00:30:21.330 --> 00:30:25.020
And also we don't want
to sort of just change

545
00:30:25.020 --> 00:30:28.170
it based on the feel
of the day. So this

546
00:30:28.170 --> 00:30:31.440
is a way of making
sure that new language proposals

547
00:30:31.860 --> 00:30:34.470
are going through a process
and being evaluated before it

548
00:30:34.470 --> 00:30:38.580
gets into the standard. Very
cool. Well, thank you gentlemen

549
00:30:38.580 --> 00:30:40.530
so much for taking time
with me today to get

550
00:30:40.530 --> 00:30:42.150
me up to speed and
my listeners up to speed

551
00:30:42.150 --> 00:30:45.930
on dark. You're very welcome.
It was fun. Well, I

552
00:30:45.930 --> 00:30:48.210
hope you will start using
it. Oh well, I'm actually,

553
00:30:48.690 --> 00:30:50.850
you know, I'm taking a
look at the dart editor

554
00:30:50.850 --> 00:30:53.550
right now. You can go
up to the dart lang.org.

555
00:30:53.580 --> 00:30:56.790
You can download dart and
the editor works on windows

556
00:30:56.790 --> 00:31:01.680
works everywhere. Thanks so much,
gentlemen. Welcome. Thank you. This

557
00:31:01.680 --> 00:31:04.050
has been another episode of
Hanselminutes and we'll see you

558
00:31:04.050 --> 00:31:04.920
again next week.

