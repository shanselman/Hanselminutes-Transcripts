WEBVTT FILE

1
00:00:00.330 --> 00:00:03.480
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.480 --> 00:00:06.450
they make the show possible.
Today's show is sponsored by

3
00:00:06.450 --> 00:00:10.620
developer express, become a UI
superhero with dev express controls

4
00:00:10.620 --> 00:00:15.150
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.540 --> 00:00:19.620
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.650 --> 00:00:23.730
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.820 --> 00:00:45.710
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
Hi everybody. This is Scott

8
00:00:45.710 --> 00:00:48.200
Hanselman. This is another episode
of Hansel minutes. And today

9
00:00:48.200 --> 00:00:52.220
I'm talking with Chris Ferdinand,
Andy from go make things.com.

10
00:00:52.220 --> 00:00:54.830
How are you sir? Doing
great, Scott. Thanks. How are

11
00:00:54.830 --> 00:00:57.470
you? I am lovely and
happy to be chatting with

12
00:00:57.470 --> 00:01:01.940
you today. I've been checking
out, go make things.com and

13
00:01:01.940 --> 00:01:05.150
you've got quite the, quite
the side hustle here. You've

14
00:01:05.150 --> 00:01:08.000
got a blog and you've
got a newsletter and you've

15
00:01:08.000 --> 00:01:11.750
got guides and you do
mentoring and you do open

16
00:01:11.750 --> 00:01:13.730
sources, a ton of good
information up there. It's a

17
00:01:13.730 --> 00:01:17.600
great domain. Thank you. I
appreciate that. Yeah, it's, it's

18
00:01:17.600 --> 00:01:21.380
a, about five or six
years worth of just brain

19
00:01:21.380 --> 00:01:24.740
dump all in one spot.
Yeah. Yeah. And I see

20
00:01:24.740 --> 00:01:27.020
also that you do JavaScript
mentoring and that's one of

21
00:01:27.020 --> 00:01:28.550
the things that I wanted
to talk to you about,

22
00:01:29.000 --> 00:01:33.290
because I feel like there's
been a lot of JavaScript

23
00:01:33.320 --> 00:01:36.350
frameworks that are coming and
going, and I see people

24
00:01:36.350 --> 00:01:40.070
trying to decide which framework
to use and it feels

25
00:01:40.070 --> 00:01:41.990
to me like, they're not
just saying why don't we

26
00:01:41.990 --> 00:01:49.010
just use JavaScript? Yeah, absolutely.
It's, it's a thing. I

27
00:01:49.010 --> 00:01:51.030
hear a lot. In fact,
one of the things, when

28
00:01:51.110 --> 00:01:53.810
people sign up for my
newsletter, they get this, this

29
00:01:53.810 --> 00:01:56.180
kind of auto, thank you
for me. That asks just

30
00:01:56.180 --> 00:01:58.480
one question. What's the thing
you struggle with most is

31
00:01:58.490 --> 00:02:01.220
a developer and that is
hands down. The thing I

32
00:02:01.220 --> 00:02:04.040
hear the most about is,
I don't know what framework

33
00:02:04.040 --> 00:02:06.320
to pick. I don't know
what to focus on next.

34
00:02:06.980 --> 00:02:08.930
There's so much to know.
I don't know where to

35
00:02:08.930 --> 00:02:11.930
start. There's some variation of
that theme just comes up

36
00:02:11.960 --> 00:02:13.970
over and over and over
again. And so a big

37
00:02:14.000 --> 00:02:16.730
part of what I like
to do is help developers,

38
00:02:16.730 --> 00:02:18.890
especially people who were, who
are newer or kind of

39
00:02:18.890 --> 00:02:21.920
that early to mid career,
really just kind of help

40
00:02:21.950 --> 00:02:23.660
help them figure it all
out. Cause I've been there

41
00:02:23.660 --> 00:02:27.590
before and it's terrifying. I
get three or four emails

42
00:02:27.590 --> 00:02:31.340
a week from, from random
people who say, ah, you

43
00:02:31.340 --> 00:02:33.320
know, I want to know
if I should use angular,

44
00:02:33.320 --> 00:02:36.110
where do I start angular?
It seems to be like,

45
00:02:36.800 --> 00:02:39.410
they think that they're saying
angular like the framework, but

46
00:02:39.410 --> 00:02:41.360
I really feel like they're
using the word angular as

47
00:02:41.360 --> 00:02:44.660
a proxy for like any
JavaScript framework that will do

48
00:02:44.660 --> 00:02:49.520
more for me JavaScript itself.
But it seems like those

49
00:02:49.520 --> 00:02:53.030
frameworks are so opinionated that
I'm really asking about like,

50
00:02:53.030 --> 00:02:54.740
you know, which religion should
I pick? And I don't

51
00:02:54.740 --> 00:03:00.340
know what to tell them.
Yeah, absolutely. It's it is.

52
00:03:00.340 --> 00:03:02.200
And it is religions a
great way to describe it

53
00:03:02.200 --> 00:03:06.610
because people get really, really
dogmatic about it. I try

54
00:03:06.610 --> 00:03:09.670
hard not to be, but
I can at times be

55
00:03:09.670 --> 00:03:14.320
just as religious for lack
of a better word about

56
00:03:14.740 --> 00:03:19.000
just using plain old vanilla
JavaScript, as some people are

57
00:03:19.000 --> 00:03:21.400
about their frameworks. And I
was trying to be cognizant

58
00:03:21.400 --> 00:03:24.340
of that. Part of the
bias here is I, I

59
00:03:24.340 --> 00:03:27.580
haven't really worked on projects
where using a framework would

60
00:03:27.640 --> 00:03:29.650
benefit me to the point
that I think some of

61
00:03:29.650 --> 00:03:34.570
the costs of using one
outweigh it and, and you

62
00:03:34.570 --> 00:03:36.640
know, so I'm, I'm, I'm
aware of that, but I

63
00:03:36.640 --> 00:03:40.030
still kind of, I fight
vehemently against frameworks a lot

64
00:03:40.030 --> 00:03:43.090
of times just cause I,
I both see them overused

65
00:03:43.090 --> 00:03:47.140
and I feel like we,
we have a framework problem.

66
00:03:47.170 --> 00:03:49.240
It's not, the frameworks are
bad, but we seem to,

67
00:03:50.020 --> 00:03:53.290
as a community churn out
new ones so frequently. And

68
00:03:53.290 --> 00:03:57.460
then we have like almost
professional ADHD. So we get

69
00:03:57.460 --> 00:03:59.860
bored really easily and then
move on to the next

70
00:03:59.860 --> 00:04:03.580
thing. And it, it all
just kind of fuels this,

71
00:04:04.060 --> 00:04:08.200
this stress around not really
knowing what to learn or

72
00:04:08.200 --> 00:04:10.210
feeling like as soon as
you learn something, your knowledge

73
00:04:10.210 --> 00:04:14.440
is already out of date.
And, and you know, I've

74
00:04:14.440 --> 00:04:16.990
kind of in a moment
of Zen moved past a

75
00:04:16.990 --> 00:04:19.090
lot of the anxiety, but
I just, I still see

76
00:04:19.090 --> 00:04:22.390
so much of it in
our industry and, and yeah,

77
00:04:22.420 --> 00:04:24.280
sorry. That was a very
long winded way of saying

78
00:04:24.310 --> 00:04:27.580
I, yeah, I can be
religious in the other direction,

79
00:04:27.640 --> 00:04:29.610
although I try not to
be Well. Yeah. Cause I

80
00:04:29.610 --> 00:04:31.560
think that one could argue
that just as people are

81
00:04:31.560 --> 00:04:36.060
discussing the concept of minimalism
in one's life, like you

82
00:04:36.060 --> 00:04:39.360
have too much stuff you
should embrace minimalism and have

83
00:04:39.360 --> 00:04:43.470
only 100 things that could
argue, arguably be maybe too

84
00:04:43.470 --> 00:04:48.270
far the other direction for
me to imply that angular

85
00:04:48.270 --> 00:04:51.420
has no value or jQuery
has no value would be

86
00:04:51.420 --> 00:04:55.410
perhaps considered a kind of
extremism on that, on that,

87
00:04:56.850 --> 00:04:59.670
on that continuum where you
have used all the frameworks

88
00:04:59.670 --> 00:05:02.400
on one side and use
only vanilla JavaScript on the

89
00:05:02.400 --> 00:05:06.300
other side, certainly these frameworks
have value. So maybe is

90
00:05:06.300 --> 00:05:09.660
it an appropriate question when
someone says, should I use

91
00:05:10.110 --> 00:05:14.010
jQuery? Should I use angular?
Is the question, how do

92
00:05:14.010 --> 00:05:18.210
I determine if a framework
has value for me? Yeah.

93
00:05:18.210 --> 00:05:20.940
And I think that's a,
that's a fair way to,

94
00:05:22.050 --> 00:05:24.330
to frame it. And I
am, I had a similar

95
00:05:24.330 --> 00:05:29.280
discussion not too long ago
with, with Chris <inaudible> and

96
00:05:29.280 --> 00:05:32.520
Dave Rupert, because th this
has kind of come up

97
00:05:32.520 --> 00:05:38.190
and, and one of the,
you know, I think there's

98
00:05:38.190 --> 00:05:40.950
some, there's some clear value
you can get out of

99
00:05:40.950 --> 00:05:43.680
a lot of frameworks and
libraries. There's, there's things that

100
00:05:43.680 --> 00:05:46.920
they honest to God just
do better than, than vanilla

101
00:05:46.920 --> 00:05:49.110
JavaScript. And then there's, I
think a lot of areas

102
00:05:49.110 --> 00:05:54.780
where they, where they kind
of fall flat and, and,

103
00:05:54.780 --> 00:06:00.020
you know, the there's a
good evaluative criteria for one,

104
00:06:00.110 --> 00:06:02.240
and then the other, I
think the other problem we

105
00:06:02.240 --> 00:06:05.900
kind of struggle with just
broadly as an industry is

106
00:06:06.110 --> 00:06:13.130
developer ergonomics seems to oftentimes
be valued more heavily than

107
00:06:13.460 --> 00:06:19.130
all other factors. So ergonomics.
Yes. And I, the first

108
00:06:19.130 --> 00:06:20.570
time I heard that phrase
had no idea what it

109
00:06:20.570 --> 00:06:25.790
meant either. So sorry. So,
so specifically how comfortable and

110
00:06:25.820 --> 00:06:30.260
easy writing, writing the code
is for the developer. So

111
00:06:30.910 --> 00:06:35.000
I'll use just as a
really simple example, jQuery where

112
00:06:35.840 --> 00:06:38.990
people often love to point
out that something that might

113
00:06:38.990 --> 00:06:42.050
take 10 lines of code
and vanilla Java script can

114
00:06:42.050 --> 00:06:46.760
be done in one or
two in jQuery, in part,

115
00:06:46.760 --> 00:06:49.430
because all the helper methods
you might write to do

116
00:06:49.430 --> 00:06:53.120
a thing are already included,
or you can chain methods

117
00:06:53.150 --> 00:06:55.160
instead of having to kind
of write them out each

118
00:06:55.220 --> 00:06:59.990
out individually, you know, kind
of the, the hidden subtext

119
00:07:00.020 --> 00:07:02.870
there is supporting your ability
to write a script in,

120
00:07:02.930 --> 00:07:06.500
in five lines instead of
20 is you're also loading

121
00:07:06.500 --> 00:07:12.050
an additional 85 to 90
kilobytes of minified code to

122
00:07:12.380 --> 00:07:15.710
do that thing. And, you
know, that's, again, that's kind

123
00:07:15.710 --> 00:07:18.590
of an extreme example, but,
but you know, the, the

124
00:07:18.590 --> 00:07:21.410
big argument I often hear
in favor of using these

125
00:07:21.410 --> 00:07:24.980
is they allow you the
developer to write less code,

126
00:07:25.730 --> 00:07:28.580
even though the overall code
you're including in your code

127
00:07:28.580 --> 00:07:31.390
base may be Orders of
magnitude larger than you need.

128
00:07:31.660 --> 00:07:33.820
So I've never found that
to be a particularly compelling

129
00:07:33.820 --> 00:07:35.440
argument, but it's the one
that seems to come up

130
00:07:36.520 --> 00:07:39.610
often, or it's the, the
thing I see focused on

131
00:07:39.610 --> 00:07:41.530
a lot, when we talk
about a lot of these

132
00:07:41.530 --> 00:07:43.150
tools, it makes it easier
for me to get the

133
00:07:43.150 --> 00:07:45.670
job done. I don't want
to downplay that, like that's

134
00:07:45.670 --> 00:07:48.670
important, but I also don't
think it's necessarily the only

135
00:07:48.670 --> 00:07:50.800
thing that matters or even
the most important thing that

136
00:07:50.800 --> 00:07:55.810
matters. Hmm. Do you think
that we are as a

137
00:07:55.810 --> 00:07:58.780
community or maybe this is
just about me, of my

138
00:07:58.780 --> 00:08:03.790
hiding, my lack of understanding
of modern JavaScript with, by

139
00:08:03.790 --> 00:08:08.230
trying to fill that gap
with hunting down different frameworks

140
00:08:08.230 --> 00:08:13.060
and elements that I don't
necessarily need. No, I, that

141
00:08:13.060 --> 00:08:16.220
feels a little unfair. You
know, I think the, the

142
00:08:16.240 --> 00:08:19.210
other piece here, so where
were all of the different,

143
00:08:19.810 --> 00:08:22.570
not all the different, but
most of the different libraries

144
00:08:22.570 --> 00:08:26.710
and frameworks really kind of
win or can win is

145
00:08:26.710 --> 00:08:30.220
around documentation and getting started.
And some of them do

146
00:08:30.230 --> 00:08:33.160
better job of this than
others, but jQuery is, is,

147
00:08:33.160 --> 00:08:35.140
and I'll keep coming back
to it just because it's

148
00:08:35.170 --> 00:08:38.650
so ubiquitous and it's been
around forever, but is, is

149
00:08:38.650 --> 00:08:42.100
kind of the shining example
there of like anything you

150
00:08:42.100 --> 00:08:46.780
want to do. You can
go to jquery.com and find

151
00:08:47.200 --> 00:08:50.830
a really clear piece of
documentation with a lot of

152
00:08:50.830 --> 00:08:54.790
examples around how to do
it with jQuery and with

153
00:08:55.380 --> 00:09:00.750
just plain vanilla Java script,
there's not a one stop

154
00:09:00.780 --> 00:09:05.460
shop for all things. And
then probably one of, one

155
00:09:05.460 --> 00:09:07.530
of the best sites for
it is the Mozilla developer

156
00:09:07.530 --> 00:09:10.290
network or MDN. But a
lot of their guides are

157
00:09:10.800 --> 00:09:14.010
either inaccurate in complete, slightly
out of date or written

158
00:09:14.010 --> 00:09:16.200
in a way that's really
more appropriate for intermediate or

159
00:09:16.200 --> 00:09:19.350
advanced developers rather than to
beginners. And so it's, it's

160
00:09:19.350 --> 00:09:24.780
just really alienating and unapproachable
and, and, you know, so

161
00:09:24.780 --> 00:09:29.070
from, from that perspective, I
think it's, it's, if you're

162
00:09:29.070 --> 00:09:32.760
a beginner developer, I'd love
to see you writing, working

163
00:09:32.760 --> 00:09:36.960
code as quickly as possible.
And I don't necessarily care

164
00:09:36.960 --> 00:09:39.330
if that's with vanilla Java
script or with something else

165
00:09:39.630 --> 00:09:42.180
I learned on jQuery and
then kind of converted over.

166
00:09:43.500 --> 00:09:46.890
But I just think kind
of from a, from a

167
00:09:46.890 --> 00:09:50.580
confidence perspective and from a
feeling like, Hey, this thing

168
00:09:50.580 --> 00:09:53.400
that seems really intimidating, I
can actually do like being

169
00:09:53.400 --> 00:09:56.010
able to write work and
code is one of the

170
00:09:56.010 --> 00:09:58.170
reasons I keep doing it
is cause it's like the

171
00:09:58.170 --> 00:10:00.360
best, the best high. Like
I just get such a

172
00:10:00.360 --> 00:10:04.320
thrill out of what we
can do with, you know,

173
00:10:04.320 --> 00:10:08.040
a text editor and a
web browser. The flip side

174
00:10:08.040 --> 00:10:09.990
of that is one of
the reasons why I do

175
00:10:09.990 --> 00:10:11.760
what I do, why I
write the guides, why I

176
00:10:11.760 --> 00:10:16.800
write the daily newsletter and
articles is I really want

177
00:10:16.800 --> 00:10:19.560
to show people that you
can do a lot of

178
00:10:19.560 --> 00:10:21.810
this stuff just as easily
in vanilla JavaScript as you

179
00:10:21.810 --> 00:10:25.140
can in jQuery or some
other framework. A lot of

180
00:10:25.140 --> 00:10:27.450
the things that people use,
some of these other tools

181
00:10:27.450 --> 00:10:30.750
for basic Dominic isolation are
just as easy to do

182
00:10:30.750 --> 00:10:35.310
without any tools at all.
And the problem is really

183
00:10:35.310 --> 00:10:39.390
just that the documentation around
it socks. So my pocket

184
00:10:39.390 --> 00:10:44.400
guides are an attempt to
create better beginner, friendly documentation

185
00:10:44.400 --> 00:10:46.950
that comes with some real
practical exercises to help you

186
00:10:46.980 --> 00:10:53.000
kind of reinforce what you're
learning. The thing that hit

187
00:10:53.000 --> 00:10:55.160
me the most about what
you said was that, you

188
00:10:55.160 --> 00:10:58.460
know, people who make angular
or jQuery have a framework

189
00:10:58.460 --> 00:11:01.160
and they have a project
it's an open source project

190
00:11:01.670 --> 00:11:05.780
that is, they are incentivized
to create great documentation for

191
00:11:05.780 --> 00:11:11.660
it. Right? Absolutely. But JavaScript
itself doesn't really have like

192
00:11:11.690 --> 00:11:14.150
a place like it's a
standard, it's a thing, but

193
00:11:14.150 --> 00:11:17.570
there's, you know, other than
like w three schools, which

194
00:11:17.570 --> 00:11:19.850
we should never, we should
all block at the host

195
00:11:19.850 --> 00:11:23.990
level. There's no like place,
right. It's not a thing

196
00:11:24.200 --> 00:11:27.950
that is promoted. So who,
who owns making those great

197
00:11:27.950 --> 00:11:31.280
tutorials like that and that
great documentation. And it's kind

198
00:11:31.280 --> 00:11:34.310
of like the collective. So
a combination of that, plus

199
00:11:34.310 --> 00:11:38.690
the ubiquity and the early,
the early adoption of jQuery

200
00:11:38.690 --> 00:11:40.790
is all kind of added
up to this perfect storm,

201
00:11:41.240 --> 00:11:43.640
as well as the crappy
branding with all due respect

202
00:11:43.880 --> 00:11:48.800
of JavaScript as <inaudible>, which
kids don't want to learn.

203
00:11:50.330 --> 00:11:52.190
And it kind of adds
up to this perfect storm

204
00:11:52.190 --> 00:11:54.610
of like, well, I'll go
to get a framework. JavaScript

205
00:11:54.610 --> 00:11:57.970
is glue. It's certainly not
feature rich enough for me

206
00:11:57.970 --> 00:12:02.730
to use is I think
what people think. Yeah, absolutely.

207
00:12:02.760 --> 00:12:06.750
And there's also, there's also
kind of this, you know,

208
00:12:06.750 --> 00:12:11.400
cause we talk about, you
know, ESX and especially now

209
00:12:11.400 --> 00:12:14.040
where new features like they're,
they're really pushing for this

210
00:12:14.040 --> 00:12:18.060
annual release date, but you
know, like I already heard

211
00:12:18.060 --> 00:12:21.480
talk about ESA eight. Yes.
Six features haven't even been

212
00:12:21.480 --> 00:12:24.450
fully implemented by He's stressed
out thinking about it. Well,

213
00:12:24.450 --> 00:12:30.150
I'm looking at ESX, hyphen
features.org and it's like, Oh

214
00:12:30.150 --> 00:12:33.900
man, that's a lot More,
more stuff to learn. Right.

215
00:12:34.230 --> 00:12:41.190
And, and it's part of
the problem is with the

216
00:12:41.190 --> 00:12:46.470
way these things are named,
it never feels like there's

217
00:12:46.470 --> 00:12:49.620
completion. So like, if I
want to use ESX stuff,

218
00:12:49.650 --> 00:12:53.430
there's, there's still this and
that's the technical name. Yes.

219
00:12:53.430 --> 00:12:56.640
Six stuff. Of course. No,
but there's, there's still kind

220
00:12:56.640 --> 00:12:59.430
of this perspective that, okay,
so if I want to

221
00:12:59.430 --> 00:13:02.370
use this, either need to
kind of give the proverbial

222
00:13:02.370 --> 00:13:05.040
middle finger to people who
are using anything, but the

223
00:13:05.040 --> 00:13:10.500
latest browsers, or I need
to open up terminal install,

224
00:13:10.500 --> 00:13:15.510
Babel, run some complicated transpile
process beforehand. It's like that,

225
00:13:15.510 --> 00:13:19.500
that hacker moon article that
was making the rounds last

226
00:13:19.500 --> 00:13:22.320
year about what being a
modern JavaScript developer involves, where

227
00:13:22.320 --> 00:13:25.230
it's just all these complicated
things and I need to

228
00:13:25.230 --> 00:13:27.030
use a module bundler and
all that. And it's like,

229
00:13:27.660 --> 00:13:34.380
that's really overwhelming. And, and
I, I kind of had

230
00:13:34.380 --> 00:13:37.080
an epiphany not too long
ago. I've been avoiding ESX

231
00:13:37.080 --> 00:13:42.560
for a long time because
<inaudible>, or, you know, it

232
00:13:42.560 --> 00:13:44.400
came out like, I think
like six years ago now

233
00:13:44.430 --> 00:13:46.560
it has terrific browser support
all the way back to

234
00:13:46.560 --> 00:13:49.850
<inaudible>. You can literally just
open up a text editor

235
00:13:49.870 --> 00:13:53.340
go. And I realized not
too long ago that a

236
00:13:53.340 --> 00:13:56.190
lot of these super handy
<inaudible> kind of methods and

237
00:13:56.190 --> 00:14:00.750
functions, you can start using
today without any sort of,

238
00:14:01.290 --> 00:14:04.620
kind of compiling process just
by throwing in a few

239
00:14:04.620 --> 00:14:08.550
simple polyfills. Okay. So I've,
I've started kind of keeping

240
00:14:08.550 --> 00:14:13.680
a collection of the ones
I use and, and it

241
00:14:13.680 --> 00:14:17.250
just, it, it makes writing
JavaScript a lot easier. The

242
00:14:17.250 --> 00:14:18.600
other thing, you know, we
talked a little bit about

243
00:14:18.600 --> 00:14:20.310
the stress of like, Oh,
all this stuff I have

244
00:14:20.310 --> 00:14:24.600
to learn. And Sarah on
has influenced me quite a

245
00:14:24.600 --> 00:14:28.620
bit here. She often talks
about how she doesn't bother

246
00:14:28.620 --> 00:14:31.290
learning anything new until she
absolutely has to use it

247
00:14:31.290 --> 00:14:34.770
on a project. And, you
know, so like, you should

248
00:14:34.770 --> 00:14:37.320
be aware of things. Like
I know that ESA is

249
00:14:37.320 --> 00:14:39.360
a thing that's being worked
on and there's a whole

250
00:14:39.360 --> 00:14:43.100
bunch of stuff that's gonna
kind of make development of,

251
00:14:43.100 --> 00:14:47.160
of certain things easier. But,
you know, until I'm at

252
00:14:47.160 --> 00:14:49.230
a point where the tools
I already have in user

253
00:14:49.230 --> 00:14:53.390
insufficient for accomplishing that task,
like there's just no real

254
00:14:53.390 --> 00:14:56.630
need for me to go
learn all that stuff. So

255
00:14:56.630 --> 00:14:59.540
I, I will delightfully hold
off until such a time

256
00:14:59.540 --> 00:15:01.550
that I need it. Fetch
is actually a really good

257
00:15:01.550 --> 00:15:06.230
example of that, you know,
kind of fetches the, the

258
00:15:06.230 --> 00:15:09.800
thing that's supposed to replace.
XHR for Ajax calls and

259
00:15:09.800 --> 00:15:15.050
JavaScript and I, and, and
everybody like fetch and promises

260
00:15:15.050 --> 00:15:16.700
and fetch and promises. And
I just, I read about

261
00:15:16.700 --> 00:15:19.280
it all the time and
if you're still using XHR

262
00:15:19.280 --> 00:15:21.260
or you're totally missing out,
and I tried to use

263
00:15:21.260 --> 00:15:23.750
it the other day and
I finally settled down to

264
00:15:23.750 --> 00:15:25.580
learn it, cause I'm like,
okay, everybody's saying it's better.

265
00:15:25.580 --> 00:15:29.120
Let me give it a
shot. And I actually found

266
00:15:29.120 --> 00:15:31.490
that because it's still kind
of in development and not

267
00:15:31.490 --> 00:15:36.170
widely supported XHR meets my
needs better today than fetch

268
00:15:36.170 --> 00:15:39.620
does it just, it, you
know, it does certain things

269
00:15:39.620 --> 00:15:41.420
that fetch can't right now,
or it does them with

270
00:15:41.510 --> 00:15:46.340
fewer lines of code. So
yeah, I'm sorry. That was

271
00:15:46.340 --> 00:15:49.580
a very long and rambling,
rambling kind of thing. But

272
00:15:50.770 --> 00:15:52.450
I think we need to
back up though a moment

273
00:15:52.900 --> 00:15:55.060
and just absolutely do well
understand. I want to parse

274
00:15:55.060 --> 00:15:57.070
some of this out. Okay.
Yeah, no, absolutely. Please do

275
00:15:57.070 --> 00:16:00.490
break it down. So when
you say polyfill polyfill is

276
00:16:00.490 --> 00:16:03.220
a thing that a gentleman
named Remy sharp came up

277
00:16:03.220 --> 00:16:06.820
with in 2010, so almost
seven years ago now. And

278
00:16:06.820 --> 00:16:09.520
it's, I think of it
as being like spackle or

279
00:16:09.520 --> 00:16:12.160
putty. If you have a
crack in your wall, you

280
00:16:12.160 --> 00:16:14.410
spackle over it, you puddy
over that to make it

281
00:16:14.410 --> 00:16:18.460
smooth. This takes API APIs
and it's a shim basically.

282
00:16:18.460 --> 00:16:22.330
So it's like I have
one browser that supports the

283
00:16:22.330 --> 00:16:26.020
JavaScript location API, and I
have another one that doesn't

284
00:16:26.020 --> 00:16:28.480
support it at all. I
don't want to go and

285
00:16:28.480 --> 00:16:33.130
say write code that says
if running Netscape navigator, you

286
00:16:33.130 --> 00:16:35.410
know, that would be horrible.
Right. So I just want

287
00:16:35.410 --> 00:16:38.890
to ask for their location
and get it and you

288
00:16:38.890 --> 00:16:41.080
figure out how to do
it. This is the poly.

289
00:16:41.080 --> 00:16:43.780
Is that what a polyfill
is? Yes. Yeah. It effectively

290
00:16:43.780 --> 00:16:47.950
bolts functionality into browsers that
don't support them using the

291
00:16:47.950 --> 00:16:50.560
native syntax. So rather than
having to do, you know,

292
00:16:50.590 --> 00:16:53.650
if browser supports this, do
one thing, otherwise do something

293
00:16:53.650 --> 00:16:57.460
else. The polyfill kind of
does that behind the scenes

294
00:16:57.460 --> 00:17:00.760
and then you just write
kind of the modern to

295
00:17:00.760 --> 00:17:07.960
specification Java script. So let's
see a good, a good

296
00:17:07.960 --> 00:17:12.250
example of that. For example,
might be one of my

297
00:17:12.370 --> 00:17:15.010
personal favorites right now is,
is matches, which is a

298
00:17:15.010 --> 00:17:17.530
method you can use to
take an element and see

299
00:17:17.530 --> 00:17:20.650
if it would validate is
true against a particular selector.

300
00:17:20.980 --> 00:17:25.030
So, you know, instead of
having to do something like

301
00:17:25.060 --> 00:17:27.310
if it has a class
or if it has this

302
00:17:27.310 --> 00:17:30.910
ID, or if it has
this class, plus this data

303
00:17:30.910 --> 00:17:33.310
attributes set to this value,
you can just kind of

304
00:17:33.310 --> 00:17:36.100
use a CSS selector and
it'll tell you if the

305
00:17:36.100 --> 00:17:41.080
element matches all of those
kinds of things works in.

306
00:17:41.110 --> 00:17:43.960
I think I nine and
up, but a lot of

307
00:17:43.960 --> 00:17:47.800
older browsers use it used
a vendor prefixed version. So

308
00:17:47.800 --> 00:17:49.950
like if you're, if you're
back kind of the <inaudible>

309
00:17:50.130 --> 00:17:53.940
era or some older versions
of Chrome or Firefox, you

310
00:17:53.940 --> 00:17:56.760
know, it's going to be
prefixed with, with IAE or

311
00:17:56.760 --> 00:18:00.960
WebKit or whatever. And the
polyfill for that just kind

312
00:18:00.960 --> 00:18:06.720
of checks to see which
version which version is supported

313
00:18:07.140 --> 00:18:13.950
and, and, you know, kind
of swaps out, you know,

314
00:18:13.980 --> 00:18:17.430
swaps out that version for
the official specification of matches.

315
00:18:17.460 --> 00:18:20.280
You don't have to write,
you know, four different versions

316
00:18:20.280 --> 00:18:21.930
of that code to do
the same thing. It just

317
00:18:21.960 --> 00:18:25.290
handles it for you. And
if you're in a browser

318
00:18:25.290 --> 00:18:29.520
that doesn't support matches, but
supports query selector, it will

319
00:18:29.520 --> 00:18:32.730
go and kind of run
some other thing to kind

320
00:18:32.730 --> 00:18:35.190
of simulate what matches does
and get you the same

321
00:18:35.190 --> 00:18:38.690
result. And you're a big
fan of probably you think

322
00:18:38.690 --> 00:18:40.580
probably feels like if you're
going to use a framework,

323
00:18:40.610 --> 00:18:42.830
maybe just use vanilla JavaScript.
And when you hit a

324
00:18:42.830 --> 00:18:48.140
wall, find a tiny polyfill.
Yeah. I'm, I'm a huge

325
00:18:48.410 --> 00:18:52.370
fan of polyfills in large
part because they let me

326
00:18:52.370 --> 00:18:54.380
just focus on writing code.
And I don't have to

327
00:18:54.380 --> 00:18:57.440
kind of think about which
library or framework I have

328
00:18:57.440 --> 00:19:00.560
to use. Like modern JavaScript
is very, very capable. It's

329
00:19:00.560 --> 00:19:03.860
just not evenly distributed and
polyfills help distribute it more

330
00:19:03.860 --> 00:19:09.650
evenly. The other thing is
much like, like these days,

331
00:19:09.710 --> 00:19:12.890
I, I make sure all
my content is accessible to

332
00:19:12.890 --> 00:19:17.420
browsers like <inaudible>, but I'm
certainly not writing JavaScript enhancements

333
00:19:17.420 --> 00:19:21.920
for those browsers. And, you
know, at some point we

334
00:19:21.920 --> 00:19:24.230
will hit a threshold or,
you know, we'll hit a

335
00:19:24.230 --> 00:19:26.000
point where a lot of
the things that I'm poly

336
00:19:26.000 --> 00:19:28.910
filling today have brought enough
support that I'm gonna say,

337
00:19:28.910 --> 00:19:30.980
okay, if your browser doesn't
support that you just don't

338
00:19:30.980 --> 00:19:34.040
get this enhancement polyfills are
meant to be deleted, which

339
00:19:34.040 --> 00:19:36.290
is awesome. So like when
you hit a level of

340
00:19:37.100 --> 00:19:39.200
support that you're comfortable with,
you can just pull it

341
00:19:39.200 --> 00:19:42.710
out and then your code
base gets smaller. Whereas libraries

342
00:19:42.710 --> 00:19:46.070
and frameworks by their very
nature tend to get bigger

343
00:19:46.070 --> 00:19:49.610
over time as more features,
get bolted in writing things

344
00:19:49.610 --> 00:19:52.970
with polyfills means you rely
very heavily on what the

345
00:19:52.970 --> 00:19:56.210
browser does natively in your
code gets smaller over time,

346
00:19:56.900 --> 00:20:01.220
which is better for better
for the end user. And

347
00:20:01.220 --> 00:20:02.600
in a lot of ways,
better for you. You just

348
00:20:02.600 --> 00:20:08.420
have less stuff to kind
of manage You, you, you

349
00:20:08.420 --> 00:20:12.650
create a lot of JavaScript
plugins. Yes. And I think

350
00:20:12.650 --> 00:20:14.930
people who are listening to
the show have heard the

351
00:20:14.930 --> 00:20:19.460
term jQuery plugins, but they
may not necessarily realize that

352
00:20:19.460 --> 00:20:21.950
JavaScript can have plugins or
how that would be a

353
00:20:21.950 --> 00:20:23.900
thing and how that would
structure. Maybe you could talk

354
00:20:23.900 --> 00:20:25.640
a little bit about that.
Yeah. And you know, it's

355
00:20:25.640 --> 00:20:27.890
funny, I actually had this
conversation not too long ago

356
00:20:27.890 --> 00:20:31.490
with, with Dave, Dave, the
Sondra, the guy who made

357
00:20:32.240 --> 00:20:36.470
fluidity and masonry and a
lot of really popular kind

358
00:20:36.470 --> 00:20:40.370
of JavaScript plugins. We both
call the things that we

359
00:20:40.370 --> 00:20:44.120
do plugins, but it's really
not an accurate term for

360
00:20:44.120 --> 00:20:49.870
them. Cause plugins typically involve
bolting additional functionality into, into

361
00:20:49.870 --> 00:20:51.520
like a, you know, a
framework or a library or

362
00:20:51.520 --> 00:20:56.320
something like that. And what
we write are probably more

363
00:20:56.320 --> 00:21:02.610
accurately called like modules or
companies. Mmm. They're giving you

364
00:21:02.610 --> 00:21:05.790
a set of features. They're
not necessarily extending any particular

365
00:21:05.790 --> 00:21:08.730
library. You're just using a
bunch of Java script to

366
00:21:08.730 --> 00:21:12.180
write something that does something.
But I still like the

367
00:21:12.180 --> 00:21:18.420
term plugin because I think
it it's honestly, just from

368
00:21:18.420 --> 00:21:21.840
a marketing perspective, I think
when people think of things

369
00:21:21.840 --> 00:21:24.780
that do the type of
stuff, my plugins do, they're

370
00:21:24.780 --> 00:21:27.930
thinking of a plugin, you
know, module or component doesn't

371
00:21:27.930 --> 00:21:31.230
necessarily have kind of the
same meaning in a lot

372
00:21:31.230 --> 00:21:34.380
of, at least for the
type of audience that I

373
00:21:34.380 --> 00:21:36.780
tend to write code for,
it doesn't necessarily have the

374
00:21:36.780 --> 00:21:39.630
same or more accessible name.
It's a name we all

375
00:21:39.630 --> 00:21:41.640
understand. So that makes sense
even if, even if it's

376
00:21:41.640 --> 00:21:46.770
not the most technically accurate,
but so really what I'm,

377
00:21:46.800 --> 00:21:49.080
what I'm doing is I'm
taking a whole bunch of

378
00:21:49.110 --> 00:21:54.780
kind of lower level JavaScript
function and methods and building

379
00:21:54.780 --> 00:21:59.460
some functionality on top of
them and then abstracting out

380
00:21:59.460 --> 00:22:02.040
a bunch of stuff for
people so that they can

381
00:22:03.210 --> 00:22:06.930
kind of just get on
with, with their project without

382
00:22:06.930 --> 00:22:11.670
having to, to do too
too much work. And I'm

383
00:22:11.670 --> 00:22:13.890
also trying to, I think,
balance kind of the, the

384
00:22:13.890 --> 00:22:16.980
weight of the code against
making it easy for kind

385
00:22:16.980 --> 00:22:18.750
of beginners to get started
or make it easy for

386
00:22:18.750 --> 00:22:21.360
people to do stuff without
kind of hacking the core

387
00:22:21.360 --> 00:22:23.240
code too much. And that
for me is I think

388
00:22:23.250 --> 00:22:26.340
what, what kind of a,
the difference between for me

389
00:22:26.340 --> 00:22:29.010
anyways, what I would call
a plugin versus like a

390
00:22:29.010 --> 00:22:32.670
helper function. So I help
her function is something where

391
00:22:32.670 --> 00:22:34.230
it's just, you know, it's
kind of this little bit

392
00:22:34.230 --> 00:22:35.820
of code and you can
modify it to suit your

393
00:22:35.820 --> 00:22:41.220
purposes. Whereas a plugin is
a thing that, that when

394
00:22:41.220 --> 00:22:44.430
you run it, it, it
potentially accepts some options or

395
00:22:44.430 --> 00:22:48.480
some configurations, or you're able
to, to kind of modify

396
00:22:48.480 --> 00:22:51.870
or customize it for your
project without having to actually

397
00:22:51.870 --> 00:22:54.900
touch the core code. You
know, an example of this,

398
00:22:54.900 --> 00:22:58.410
I have a plugin called
smooth scroll that animates scrolling

399
00:22:58.410 --> 00:23:00.360
to anchor links. And there's
a ton of jQuery plugins

400
00:23:00.390 --> 00:23:02.610
that do this too, but
this one's vanilla JavaScript. So,

401
00:23:02.760 --> 00:23:04.980
you know, it doesn't require
any, any dependencies or anything.

402
00:23:05.520 --> 00:23:11.400
And you can do things
like customers, which selector actually

403
00:23:11.400 --> 00:23:13.920
triggers an animation. So maybe
you want to apply it

404
00:23:13.920 --> 00:23:15.660
to all anchor links, or
maybe you only want to

405
00:23:15.660 --> 00:23:18.150
apply it to anchor links
that have a particular class.

406
00:23:18.900 --> 00:23:22.470
You can do things like
passing options to specify the

407
00:23:22.470 --> 00:23:24.450
type of easing that the
link is going to use

408
00:23:24.450 --> 00:23:28.530
when it animates, or I
even make some of the,

409
00:23:28.560 --> 00:23:31.860
kind of the lower level
functions that run internally available

410
00:23:31.860 --> 00:23:34.770
externally. So if you want
to just animate to a

411
00:23:34.770 --> 00:23:38.400
random point on a page
by passing in a, you

412
00:23:38.400 --> 00:23:40.530
know, like a pixel point
down on the page, like,

413
00:23:40.530 --> 00:23:42.600
let's say you want to
scroll down to the 1000

414
00:23:42.600 --> 00:23:45.980
pixel Mark on your page,
just because you can do

415
00:23:45.980 --> 00:23:49.100
that by kind of calling
one of the public methods

416
00:23:49.100 --> 00:23:53.120
I expose in this plugin.
And, you know, so I

417
00:23:53.150 --> 00:23:56.810
will often get requests for
things like features or functionality.

418
00:23:57.110 --> 00:24:00.560
And because I kind of
have these set of configurations

419
00:24:00.560 --> 00:24:03.500
and options available, most of
that stuff, I can kind

420
00:24:03.500 --> 00:24:05.450
of show people how to
do without ever touching the

421
00:24:05.450 --> 00:24:08.840
core code, which is great
for them. Cause they can

422
00:24:08.840 --> 00:24:10.340
kind of build on top
of it. It's great for

423
00:24:10.340 --> 00:24:12.230
me because it keeps the
code base lighter and I

424
00:24:12.260 --> 00:24:15.800
don't have to do as
much feature development. But yeah,

425
00:24:15.830 --> 00:24:17.750
that's just, when I think
about plugins, that's kind of

426
00:24:17.750 --> 00:24:19.820
how I think about them,
but that's, that's just a

427
00:24:19.820 --> 00:24:23.030
a hundred percent kind of
personal bias on here. I

428
00:24:23.030 --> 00:24:25.160
don't, I don't think everybody
kind of thinks about plugins

429
00:24:25.160 --> 00:24:28.030
in that same way. One
thing I wanted to talk

430
00:24:28.030 --> 00:24:31.860
about was a little bit
more about jQuery because I

431
00:24:31.870 --> 00:24:35.320
feel like jQuery really made
a big difference in the

432
00:24:35.320 --> 00:24:39.950
community. It, it spackled over
it poly filled over like

433
00:24:39.970 --> 00:24:44.410
in perhaps continues to cover
up a multitude of sins

434
00:24:44.410 --> 00:24:47.170
of in compatibility and tries
to like level the playing

435
00:24:47.170 --> 00:24:50.380
field for the web. But
even as recently, as well,

436
00:24:50.680 --> 00:24:52.780
as far as far a
long ago is three years

437
00:24:52.780 --> 00:24:55.990
ago, you wrote an article
called ditching jQuery, which is

438
00:24:55.990 --> 00:25:01.180
effectively a huge, I don't
know, not a manifesto, but

439
00:25:01.180 --> 00:25:03.430
it's a complete guideline of
saying, here are all the

440
00:25:03.430 --> 00:25:06.280
things you are using jQuery
for that you shouldn't. How

441
00:25:06.280 --> 00:25:09.280
do you, how do you
balance that? Like here's an

442
00:25:09.280 --> 00:25:12.220
article on how to ditch
jQuery with the, the absolute

443
00:25:12.220 --> 00:25:14.650
value that we can all
acknowledge jQuery provided to the

444
00:25:14.650 --> 00:25:17.590
community. Yeah. And you know,
the, I mean, before we

445
00:25:17.590 --> 00:25:19.690
get into that, I just,
as much as I rail

446
00:25:19.690 --> 00:25:22.600
against jQuery, it's one how
I learned how to write

447
00:25:22.600 --> 00:25:26.920
JavaScript. And two, it has,
I think, more than anything

448
00:25:27.460 --> 00:25:31.300
had such a big impact
on the modern API APIs

449
00:25:31.300 --> 00:25:33.940
that we now are the
I now anyways, take for

450
00:25:33.940 --> 00:25:39.220
granted. So things like being
able to just select elements

451
00:25:39.220 --> 00:25:42.400
without having to just do
it by ID or classmate,

452
00:25:42.400 --> 00:25:44.410
like being able to select
by any set of CSS,

453
00:25:44.410 --> 00:25:48.400
selectors, we owe jQuery for
that being able to easily

454
00:25:48.400 --> 00:25:51.460
add, remove and toggle classes.
We owe jQuery for that.

455
00:25:52.000 --> 00:25:54.610
A lot of the new
ESX stuff like propend and

456
00:25:54.640 --> 00:25:58.120
after and remove, we owe
all of that to jQuery.

457
00:25:58.120 --> 00:26:01.960
So I never want to
take away from what John Russell

458
00:26:01.990 --> 00:26:04.990
did because it is just
an incredible piece of software

459
00:26:04.990 --> 00:26:09.400
that has, has done so,
so well and continues, I

460
00:26:09.400 --> 00:26:13.120
think to influence the way
modern JavaScript API is kind

461
00:26:13.120 --> 00:26:17.770
of play out. So all
that said the kind of

462
00:26:17.770 --> 00:26:28.180
the smoothing out of browser
bugs, I, I don't, I

463
00:26:28.180 --> 00:26:34.780
actually maybe dispute the fact
that jQuery provides better browser

464
00:26:34.780 --> 00:26:39.580
compatibility than vanilla JavaScript does
in the absolute sense. So

465
00:26:40.960 --> 00:26:43.710
if you're talking about, you
know, say version one dot

466
00:26:43.710 --> 00:26:48.550
X, then yeah. I'm on
board. You know, that, that

467
00:26:48.560 --> 00:26:53.600
carries some pretty, pretty deep
backwards compatibility. Once we get

468
00:26:53.600 --> 00:26:58.100
into the more modern versions
of jQuery, particularly version three,

469
00:26:59.570 --> 00:27:03.530
that has the same, same
browser support is ESX or

470
00:27:03.560 --> 00:27:09.560
<inaudible> Nadia six and, and
comes in at like, I

471
00:27:09.560 --> 00:27:16.040
think 85 kilobytes minified. So
you're downloading a pretty sizable

472
00:27:16.040 --> 00:27:18.830
file, which I know is
not necessarily always the end

473
00:27:18.830 --> 00:27:21.560
all be all, but it's
a, you know, it's a

474
00:27:21.560 --> 00:27:26.060
decent sized file. It it's
still got <inaudible> and up

475
00:27:26.090 --> 00:27:28.760
browser support, which is what
you get out of. Yes.

476
00:27:30.650 --> 00:27:33.800
And yeah, I, I don't
think there's a ton of

477
00:27:33.800 --> 00:27:36.690
warts that it really smooth
over the biggest thing that

478
00:27:36.740 --> 00:27:40.490
I really like the jQuery
does that vanilla doesn't is

479
00:27:41.240 --> 00:27:43.580
it fails silently if you
don't, if you don't find

480
00:27:43.580 --> 00:27:45.380
an alum. So, you know,
like for example, if I'm

481
00:27:45.380 --> 00:27:48.800
using query service and I
look for an element and

482
00:27:48.800 --> 00:27:51.290
then I go to do
something with that element, if

483
00:27:51.290 --> 00:27:56.540
that element wasn't found in,
in vanilla Java script, the

484
00:27:56.540 --> 00:27:59.510
browser is gonna throw an
error and fail spectacularly. Whereas

485
00:27:59.540 --> 00:28:01.730
jQuery is just like, Oh,
no element. We'll just kind

486
00:28:01.730 --> 00:28:05.120
of move on with our
life. And, you know, there's,

487
00:28:05.180 --> 00:28:07.820
there's ways you can kind
of get around that too.

488
00:28:08.300 --> 00:28:12.680
But yeah, generally speaking, I
don't, I don't personally feel

489
00:28:12.680 --> 00:28:17.570
like there's a ton of
warts that jQuery smooths over

490
00:28:18.020 --> 00:28:25.730
that vanilla Java script doesn't
handle perfectly fine. You know,

491
00:28:25.760 --> 00:28:28.250
if you're talking I nine
and above, if you work

492
00:28:28.250 --> 00:28:30.530
at a company that's yeah.
So my first question, were

493
00:28:30.540 --> 00:28:32.780
you going to say that
as the case, given certain

494
00:28:32.780 --> 00:28:35.420
browser constraints? Yeah. Yeah. And
that's, for me, that's kind

495
00:28:35.420 --> 00:28:38.870
of the big, I, I
started <inaudible> and above, which

496
00:28:38.870 --> 00:28:44.870
gets you 99.6% of global
web traffic, but may vary

497
00:28:44.870 --> 00:28:48.650
depending on your particular audience.
So for example, people who

498
00:28:48.650 --> 00:28:51.170
work in a corporate environment
where they're running these really

499
00:28:51.170 --> 00:28:57.350
terrible legacy web apps that
require internet Explorer running compatibility,

500
00:28:57.380 --> 00:28:59.750
the mode, or they're still
using some hacked or Patrick

501
00:28:59.750 --> 00:29:02.540
version of it, seven on
windows Vista, because they just

502
00:29:02.540 --> 00:29:06.200
can't upgrade. You have a
slightly different use case. And

503
00:29:06.200 --> 00:29:10.970
I fully acknowledged that, but
yeah, generally, generally speaking, I

504
00:29:10.970 --> 00:29:15.860
think the browser compatibility concern
is potentially overblown and it's

505
00:29:15.860 --> 00:29:19.070
made, it's made even easier
now by this really awesome

506
00:29:19.070 --> 00:29:24.590
tool from Jonathan neath and
the folks at ft labs,

507
00:29:25.310 --> 00:29:27.440
Phil IO, which you may
or may not have heard

508
00:29:27.440 --> 00:29:31.040
of already, but it's basically
an automatic poly filling service.

509
00:29:31.070 --> 00:29:35.060
That's at the moment, a
hundred percent free that when

510
00:29:35.060 --> 00:29:38.180
you load it, it detects
what browser your visitor is

511
00:29:38.180 --> 00:29:43.330
coming in on and serves
them a small polyfill file

512
00:29:43.870 --> 00:29:46.630
that is customized for their
browser and includes only the

513
00:29:46.630 --> 00:29:50.710
polyfils they need. So on
the latest version of Chrome,

514
00:29:50.710 --> 00:29:56.890
Chrome, 60, it is empty
and no polyfills and on,

515
00:29:57.460 --> 00:30:01.030
on slightly older versions of,
of Chrome and Firefox, you're

516
00:30:01.030 --> 00:30:03.040
coming in with somewhere to
like two to five kilobytes

517
00:30:03.040 --> 00:30:06.520
of files. And as you
get further back into like

518
00:30:06.520 --> 00:30:09.250
the <inaudible> range, it ends
up being somewhere closer to

519
00:30:09.250 --> 00:30:13.840
like 15 or 20 kilobytes,
which is still smaller than

520
00:30:13.870 --> 00:30:17.110
jQuery and a whole bunch
of other, other frameworks, but,

521
00:30:17.650 --> 00:30:21.910
but allows you to use
all the modern stuff. So

522
00:30:21.910 --> 00:30:24.730
it's it's for me that
that's like if I was

523
00:30:24.730 --> 00:30:27.160
working in a corporate environment
where I had to support

524
00:30:27.160 --> 00:30:29.680
those older browsers today, I
would much rather use a

525
00:30:29.680 --> 00:30:32.860
service like that than, than
turn to jQuery. Cause it

526
00:30:32.860 --> 00:30:35.440
does, it actually supports most
things back to <inaudible>, which

527
00:30:35.440 --> 00:30:39.540
is a surprisingly thorough. Yeah.
And one of the things

528
00:30:39.540 --> 00:30:43.440
that's interesting about polyfill.io is
it's supported by the financial

529
00:30:43.440 --> 00:30:47.460
times and it has a
CDN through Fastly. So while

530
00:30:47.460 --> 00:30:49.860
it is a, you know,
quote unquote little open source

531
00:30:49.860 --> 00:30:52.890
project, it's got some backing
and you would not feel

532
00:30:52.890 --> 00:30:55.500
sad about putting your app
into production on it. And

533
00:30:55.560 --> 00:30:57.270
you know, if one day
it costs money, we'll then

534
00:30:57.270 --> 00:31:01.230
pay them off. Yeah, yeah,
no, it's, it's, I'm using

535
00:31:01.230 --> 00:31:02.970
it on my latest project
and it's just been such

536
00:31:02.970 --> 00:31:05.760
a, such a boon to
be able to, to work

537
00:31:05.760 --> 00:31:08.700
with that. It's been awesome.
Cool. So folks can find

538
00:31:08.700 --> 00:31:13.440
you@gomakethings.com and you've got a
series of guides that they

539
00:31:13.440 --> 00:31:16.260
can, they can download and
pay for that. You've got

540
00:31:16.260 --> 00:31:20.430
a free, is it daily
or weekly? How often does

541
00:31:20.430 --> 00:31:24.090
your newsletter? It comes out
every day. It's short and

542
00:31:24.090 --> 00:31:26.460
sweet. So the idea is
something you can read right

543
00:31:26.460 --> 00:31:29.340
now versus, you know, kind
of having it stack up

544
00:31:29.340 --> 00:31:31.050
and then you have all
the stuff to read later,

545
00:31:31.470 --> 00:31:33.930
but yeah, that's, that's daily.
It's just little tips, tools,

546
00:31:33.930 --> 00:31:37.260
links to kind of useful
stuff. Very cool. Well, thanks

547
00:31:37.260 --> 00:31:39.480
so much for talking to
me today. Yeah. Thanks for

548
00:31:39.480 --> 00:31:41.880
having me, Scott. This was
great. This has been another

549
00:31:41.880 --> 00:31:44.670
episode of Hansel minutes and
we'll see you again next

550
00:31:44.670 --> 00:31:51.960
week. <inaudible>.

