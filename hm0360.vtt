WEBVTT FILE

1
00:00:12.080 --> 00:00:17.420
From hanselminutes.com. It's Hansel minutes,
our weekly discussion with web

2
00:00:17.420 --> 00:00:22.010
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.010 --> 00:00:29.000
number three 63. Recorded live
Thursday, March 14th, 2013. Support for Hanselman

4
00:00:29.000 --> 00:00:32.090
it's just provided by Tellerik
offering the best in developer

5
00:00:32.090 --> 00:00:41.150
tools and support online@telerikdotcomandbyfranklins.net makers
of gesture pack a powerful

6
00:00:41.150 --> 00:00:44.690
gesture, recording and recognition system
for Microsoft connect for windows

7
00:00:44.690 --> 00:00:51.740
developers details@gesturepak.com. In this episode,
Scott talks with Paul Irish

8
00:00:52.100 --> 00:00:59.060
about HTML five JavaScript Chrome
and the web platform. Hi,

9
00:00:59.060 --> 00:01:01.130
this is Scott Hanselman. This
is another episode of Hansel

10
00:01:01.130 --> 00:01:03.620
minutes. And today we've got
Paul Irish. How are you,

11
00:01:03.620 --> 00:01:06.950
sir? Hello, doing good. Doing
great. Very cool. Thanks for,

12
00:01:07.220 --> 00:01:09.920
for coming on. Talk to
me. So you work in

13
00:01:09.920 --> 00:01:13.940
at Google, you are Chrome
developer relations. Yeah, that's absolutely

14
00:01:13.940 --> 00:01:18.680
right. It's developer advocate. I'm
all about these days. I'm

15
00:01:18.680 --> 00:01:21.950
all about kind of developer
productivity, making sure that developers

16
00:01:21.950 --> 00:01:25.040
are as productive as they
can be when building web

17
00:01:25.040 --> 00:01:29.480
apps that are amazing on
desktop, on mobile and also,

18
00:01:29.480 --> 00:01:32.750
you know, people develop with
best practices, things like that.

19
00:01:34.010 --> 00:01:35.930
So I think I love
that word advocate. I think

20
00:01:35.930 --> 00:01:38.090
that you and I kind
of have similar jobs, but

21
00:01:38.090 --> 00:01:41.390
we also work for these
giant companies where people assume

22
00:01:41.390 --> 00:01:43.790
that we have to represent
all of the company's interests.

23
00:01:44.600 --> 00:01:46.790
So it's like, Oh, you
work for Google. You must

24
00:01:46.790 --> 00:01:50.960
care really deeply about ads,
but from watching you, you

25
00:01:50.960 --> 00:01:54.500
care about the web and
people think I care about

26
00:01:54.560 --> 00:01:57.530
Xbox or whatever, you know,
I got yelled at recently

27
00:01:57.530 --> 00:01:59.300
for not having a windows
phone and it's like, you

28
00:01:59.300 --> 00:02:04.470
know, kinda not my thing.
Yeah, yeah, yeah. Absolutely. My,

29
00:02:04.470 --> 00:02:08.000
my, my passion is I
want the web, so I'm

30
00:02:08.000 --> 00:02:12.860
really passionate about it as
an application platform. And I

31
00:02:12.860 --> 00:02:16.070
think that there's a lot
we can do, but I'm

32
00:02:16.070 --> 00:02:18.320
excited about the state that
it is right now. And

33
00:02:18.320 --> 00:02:21.320
so that's my focus and
it's not, it's not a

34
00:02:21.620 --> 00:02:24.620
Google point of view per
se. Like there's a lot

35
00:02:24.620 --> 00:02:27.740
of things that Google does
that could be even better

36
00:02:27.740 --> 00:02:32.120
when it comes to towards
the web and its promise.

37
00:02:32.180 --> 00:02:34.970
So I'm very happy to
be honest about those kinds

38
00:02:34.970 --> 00:02:37.070
of things. Do you feel
like you're kind of in

39
00:02:37.070 --> 00:02:39.380
a pretty sweet situation in
the sense of like, you've

40
00:02:39.380 --> 00:02:41.510
got this big company behind
you that lets you push

41
00:02:41.510 --> 00:02:44.150
the web forward kind of,
regardless of whether it helps

42
00:02:44.150 --> 00:02:46.220
Google or not like the
web will, when the web

43
00:02:46.220 --> 00:02:51.410
is winning, the avalanche has
begun. You know, it's really

44
00:02:51.410 --> 00:02:54.860
fantastic to be somewhere where,
you know, I can have

45
00:02:54.860 --> 00:02:59.470
this sort of regional impact
that I think that I

46
00:02:59.470 --> 00:03:03.640
think really benefits the situation.
So that's why I wouldn't

47
00:03:03.640 --> 00:03:05.350
like a startup is like,
Hey, Paul, you want to

48
00:03:05.350 --> 00:03:07.480
go lead a front end
engineering team? And I'm like,

49
00:03:07.480 --> 00:03:10.060
well, you know, I do
partly wanna, you know, just

50
00:03:10.060 --> 00:03:13.360
go hack a hundred percent
on web stuff, but also

51
00:03:13.930 --> 00:03:16.030
I think we're not done
yet from it, from like

52
00:03:16.030 --> 00:03:19.000
a web advocacy standpoint. So
I think it's great to

53
00:03:19.000 --> 00:03:22.320
be here Just when I
think we are even close

54
00:03:22.320 --> 00:03:25.770
to done. I'm like, no,
we've even at like 49%

55
00:03:25.770 --> 00:03:28.950
for like the last 10
years, the progress bar is

56
00:03:28.950 --> 00:03:33.120
not moving. Although Chrome definitely
changed the train change the

57
00:03:33.120 --> 00:03:35.310
speed of the progress bar.
When it, when it came

58
00:03:35.310 --> 00:03:39.810
out, I mean, I just
opened up Chrome beta. I

59
00:03:39.810 --> 00:03:41.520
think I'm on the beta
channel. I was on Canary

60
00:03:41.520 --> 00:03:44.070
for awhile. Anyway, I just
noticed literally this morning I'm

61
00:03:44.070 --> 00:03:48.720
on Chrome 27 and I
swear it was 17 really

62
00:03:48.720 --> 00:03:51.150
recently, which brings up this
idea of, I guess you

63
00:03:51.150 --> 00:03:53.400
don't really think about version
numbers anymore. It really is

64
00:03:53.400 --> 00:03:57.450
all about feature detection. Yeah,
absolutely. Yeah. So the Chrome

65
00:03:57.450 --> 00:04:00.030
ways is especially when it
comes to users, is there

66
00:04:00.030 --> 00:04:05.040
are no version numbers, Chrome
just updates. You now have

67
00:04:05.040 --> 00:04:07.320
a new feature and that's
the way that you're talking

68
00:04:07.320 --> 00:04:09.030
about it to users, to
developers, we do have to

69
00:04:09.030 --> 00:04:11.220
be a bit more specific
and that's why sites like,

70
00:04:11.220 --> 00:04:13.380
can I use are really
helpful when it comes out

71
00:04:13.380 --> 00:04:16.140
of tracking when my body
API, when, when of GL,

72
00:04:16.200 --> 00:04:19.470
et cetera, all landed and
what conversion, but of course

73
00:04:19.470 --> 00:04:23.940
yet inevitably future detection is,
is the right way to

74
00:04:23.940 --> 00:04:28.450
be handling, handling this in
Chrome and in all the

75
00:04:28.890 --> 00:04:31.770
various mobile devices that actually
are sometimes a bit trickier

76
00:04:31.770 --> 00:04:34.320
when it comes to this
sort of thing. I get

77
00:04:34.320 --> 00:04:36.750
the impression and I don't
work for I E nor

78
00:04:36.750 --> 00:04:38.610
do I know anyone over
there. So this is just

79
00:04:38.610 --> 00:04:41.910
me as web guy observing
this, that they seem to

80
00:04:41.910 --> 00:04:44.910
believe that things might be
a little more slower than

81
00:04:44.910 --> 00:04:46.890
like it's, you know how
like some people are on

82
00:04:46.890 --> 00:04:50.070
Canary. Some people aren't beta,
some people are unstable. How

83
00:04:50.070 --> 00:04:55.170
often does Chrome stable rev
About every 12 weeks. So

84
00:04:55.170 --> 00:04:57.150
people think that Chrome is
updating like every three or

85
00:04:57.150 --> 00:04:59.400
four hours, but in realistically
it's like three or four

86
00:04:59.400 --> 00:05:01.440
times a year, right? It's
not like half the speed

87
00:05:01.440 --> 00:05:05.070
of ooVoo and right. It's
very reliable. Six weeks, six

88
00:05:05.070 --> 00:05:09.090
weeks is stable Tweaks, this
stable. Okay. So, so if

89
00:05:09.090 --> 00:05:12.060
I, he starts doing it
every year or every 18

90
00:05:12.060 --> 00:05:13.950
months or something like that,
as people on the web

91
00:05:13.980 --> 00:05:18.210
are presuming the argument is
always made that, Oh, enterprises

92
00:05:18.210 --> 00:05:20.850
can't go that fast. Like,
you know, they, they, they

93
00:05:20.850 --> 00:05:24.630
all need, <inaudible> still do
enterprises use Chrome. And does,

94
00:05:25.500 --> 00:05:28.290
does it revving so fast
freak out there I'd heat

95
00:05:28.290 --> 00:05:32.910
apartments? I don't, I don't
know what, what sort of

96
00:05:33.550 --> 00:05:35.640
the enterprise situation is for
Chrome. Like I, I do

97
00:05:35.640 --> 00:05:39.240
know that when Firefox announced
that they had a new

98
00:05:39.240 --> 00:05:45.540
release model, the enterprise community
kind of really upset and

99
00:05:45.540 --> 00:05:49.890
that led Firehawks introducing the
ESR, the extended support release,

100
00:05:50.280 --> 00:05:53.130
which I think is equal
to Firefox 10 and it

101
00:05:53.140 --> 00:05:57.500
supported for a year. And
so that was way of,

102
00:05:57.650 --> 00:05:59.810
whereas the rest of Firefox
ships, every six weeks, just

103
00:05:59.810 --> 00:06:05.090
like Chrome, Chrome has supports
for being able to turn

104
00:06:05.090 --> 00:06:08.750
off automatic updates, as much
as I hate that idea,

105
00:06:09.710 --> 00:06:13.370
there is support there's, you
know, MSI installer and administrators

106
00:06:13.370 --> 00:06:16.940
can turn off updates, but
I would be very unhappy

107
00:06:16.940 --> 00:06:22.520
if I met someone that
did that, like, you know,

108
00:06:22.850 --> 00:06:30.260
the consumer side web deals
with deals with the rapidly

109
00:06:30.260 --> 00:06:33.380
changing landscape of browsers and
it deals with new browser

110
00:06:33.380 --> 00:06:35.270
versions and it feature detectors
and all those things. And

111
00:06:35.270 --> 00:06:39.710
I like, I'm just, I,
I think that the, the

112
00:06:39.710 --> 00:06:44.240
internet side of the internet
internet side web apps are

113
00:06:44.240 --> 00:06:47.240
just, there was, there was
a time when people didn't

114
00:06:47.240 --> 00:06:48.860
know how to develop them
very well. And that's why

115
00:06:48.860 --> 00:06:51.560
they got locked into only
works in this browser version.

116
00:06:53.390 --> 00:06:57.140
But I think that's changing
a lot, especially, especially with

117
00:06:57.460 --> 00:07:01.450
the changes that he has
made, you know, comparing six

118
00:07:01.470 --> 00:07:05.960
99 is a completely different
browser. And anyone developing for

119
00:07:05.960 --> 00:07:08.840
the browser is not going
to have a problem with

120
00:07:09.080 --> 00:07:12.980
10 comes down in their
company. So we're in a

121
00:07:12.980 --> 00:07:15.140
bit of a different landscape.
So I think that the

122
00:07:15.140 --> 00:07:19.130
concerns of the web doesn't
work anymore are, are mostly

123
00:07:19.400 --> 00:07:22.630
behind us. Yeah. I think
that there's, it's all just

124
00:07:22.870 --> 00:07:26.080
FID, right? It's just fear
that, you know, the expense

125
00:07:26.080 --> 00:07:29.080
reporting system we wrote 12
years ago is going to

126
00:07:29.080 --> 00:07:31.900
suddenly suddenly break. And we
don't know where that code

127
00:07:31.900 --> 00:07:33.880
is anymore. Like, it sounds
silly, but like that's a

128
00:07:33.880 --> 00:07:41.260
classic problem for an enterprise.
So if, if WebKit is

129
00:07:41.260 --> 00:07:44.830
making a move and we've
still got Firefox, but now

130
00:07:44.860 --> 00:07:47.470
opera has announced that they're
going to go web kit,

131
00:07:47.680 --> 00:07:50.470
presumably in a fairly orderly
fashion, I'm starting to see

132
00:07:50.470 --> 00:07:52.840
all of these kind of
a blog posts around what

133
00:07:52.840 --> 00:07:57.400
they call WebKit monoculture. So
WebKit, some people say it

134
00:07:57.400 --> 00:07:59.170
moves the web forward, which
I think we can all

135
00:07:59.170 --> 00:08:01.420
agree. It kind of did,
but at the same time

136
00:08:01.420 --> 00:08:03.280
people were saying, well, maybe
WebKit will hold us back

137
00:08:03.280 --> 00:08:07.270
because then they'll only be
WebKit Right. I, I think,

138
00:08:08.950 --> 00:08:13.540
I think on desktop, this
doesn't matter. I just stop

139
00:08:13.590 --> 00:08:18.280
this, this change, especially from
opera, doesn't seem to have

140
00:08:18.460 --> 00:08:22.120
as big of an impact,
but on mobile, I think

141
00:08:22.120 --> 00:08:24.880
that's, that's probably what precipitated
a lot of it. It's

142
00:08:24.880 --> 00:08:28.630
very hard. I imagine for
her Firefox, for IIE and

143
00:08:28.630 --> 00:08:33.070
previously for opera to get
impeccability on the mobile web,

144
00:08:33.760 --> 00:08:39.430
because web WebKit has had
an early lead there and

145
00:08:39.880 --> 00:08:46.240
that web developers using bad
practices. Have you mean Web

146
00:08:46.240 --> 00:08:50.650
developers targeting mobile Safari? Yeah.
Yeah. And they've, they've, they've

147
00:08:50.650 --> 00:08:57.270
targeted that side of that
flavor of the web and,

148
00:08:57.600 --> 00:09:00.450
and that in men, in
some cases has not been

149
00:09:00.450 --> 00:09:04.020
interoperable. Maybe they're missing vendor
prefixes, maybe they're using things

150
00:09:04.740 --> 00:09:09.480
that are only available in
iOS web kit, but it

151
00:09:09.480 --> 00:09:12.450
led to it issue where
there's, there's a value credibility

152
00:09:12.450 --> 00:09:15.770
thing. Mozilla actually did a
study and found like they

153
00:09:15.810 --> 00:09:18.930
basically went through a top
10,000 sites and looked at

154
00:09:18.930 --> 00:09:23.880
the vendor prefixes that they
used. And like let's say

155
00:09:23.880 --> 00:09:28.530
for every site that used
a WebKit dash transition, about

156
00:09:28.620 --> 00:09:33.840
15% of those sites also
had MSDS ms. Dash transition.

157
00:09:34.170 --> 00:09:40.620
So, and, and probably just
a few bit more would

158
00:09:40.620 --> 00:09:43.950
have the unprefixed transition, which
is what ITN actually uses.

159
00:09:44.370 --> 00:09:49.110
So there was a big
problem for the offering side.

160
00:09:49.110 --> 00:09:54.930
Didn't really expect a widely
diverse browser engine, mobile web.

161
00:09:56.220 --> 00:10:00.210
So that was 12 developers
fault. So oper made this

162
00:10:00.210 --> 00:10:04.560
move and I mean, it's,
it's going to be good

163
00:10:04.560 --> 00:10:07.290
for their users. A lot
of the concern, I think

164
00:10:07.410 --> 00:10:14.100
in YPO monoculture monoculture conversation
is that when WebKit has

165
00:10:14.400 --> 00:10:18.480
some quirk that is unique
to WebKit and that is

166
00:10:18.480 --> 00:10:20.400
not either in the spec
or is not shared by

167
00:10:20.400 --> 00:10:23.280
other browsers. And that just
becomes kind of the way

168
00:10:23.280 --> 00:10:25.950
that everyone expects things to
work. And so pugs will

169
00:10:25.950 --> 00:10:28.770
be fire piled against other
browser vendors. Why don't you

170
00:10:28.770 --> 00:10:32.760
treat border radius with elliptical
shapes like this or something?

171
00:10:33.240 --> 00:10:38.190
Cause WebKit does it so,
so I can understand why,

172
00:10:38.790 --> 00:10:43.080
why basically, you know, specs
needs to Trump web gets

173
00:10:43.080 --> 00:10:46.830
behavior. And, and I think
there's a lot of ways

174
00:10:46.830 --> 00:10:50.700
to resolve this right now,
the testing infrastructure between all

175
00:10:50.700 --> 00:10:55.970
the, all the browsers, it
couldn't be better. All the

176
00:10:56.040 --> 00:10:59.430
browsers have really great tests
that they run against, but

177
00:10:59.430 --> 00:11:02.820
they're not shared and they're
not executed across the vendors

178
00:11:02.910 --> 00:11:05.910
as much as they should
be. So, you know, these

179
00:11:05.910 --> 00:11:12.420
are fairly interoperable implementations of
the same features, but we

180
00:11:12.420 --> 00:11:14.670
could do better there. So
that's, that's one of the

181
00:11:14.670 --> 00:11:17.190
things that I've been talking
about internally inside the Chrome

182
00:11:17.190 --> 00:11:20.820
team, but also having, we
had a W3C testing workshop

183
00:11:20.820 --> 00:11:24.780
recently around, you know, making
this a set up a

184
00:11:24.780 --> 00:11:27.630
lot better where we're all
the browsers are, are kind

185
00:11:27.630 --> 00:11:39.560
of having congruent feature specs,
more trunks. I mean Trump

186
00:11:39.560 --> 00:11:41.840
implementations, but I can understand
where if there was only

187
00:11:41.840 --> 00:11:44.150
one browser and it was
only WebKit and then the

188
00:11:44.540 --> 00:11:46.400
web, it would be the
one that implemented the spec.

189
00:11:46.400 --> 00:11:48.620
And then that would be
the spec. It would become

190
00:11:48.620 --> 00:11:50.900
the defacto spec. I get
why people would be concerned

191
00:11:50.900 --> 00:11:53.530
about that, but why do
these things even go, go

192
00:11:53.530 --> 00:11:56.050
wrong? I mean, if you
look on stack overflow, almost

193
00:11:56.050 --> 00:11:59.620
every question on the web
now is these three browsers

194
00:11:59.620 --> 00:12:01.420
do it the way we
think the spec works and

195
00:12:01.420 --> 00:12:04.810
this one interpreted it differently.
There was some, I forgot

196
00:12:04.810 --> 00:12:08.200
what it was, some hover,
pseudo element thing in and

197
00:12:08.480 --> 00:12:10.450
10 or whatever. And it's
like, everybody does this way,

198
00:12:10.450 --> 00:12:13.210
except they read it that
way. Don't they all get

199
00:12:13.210 --> 00:12:14.830
in a room and chat
about this. How does that

200
00:12:14.830 --> 00:12:19.170
even happen? They do. Yeah.
So a lot. So there's

201
00:12:19.170 --> 00:12:22.440
a lot of conversations around
what behaviors should be, and

202
00:12:22.440 --> 00:12:26.400
that gets into the spec.
So you, you look, you

203
00:12:26.400 --> 00:12:31.710
look at like any mailing
list, like www style. And

204
00:12:31.950 --> 00:12:33.900
if you let that into
your inbox, so lead around

205
00:12:33.900 --> 00:12:36.210
really quickly, but there's a
lot of really healthy conversations

206
00:12:36.210 --> 00:12:38.730
across browser vendors on what
the behavior should be and

207
00:12:38.730 --> 00:12:41.760
all these edge cases. It's
really fantastic to watch. I

208
00:12:41.760 --> 00:12:43.830
think though, at the same
time, while there's a debate

209
00:12:43.830 --> 00:12:48.420
like that, there is, there's
a shortage of, of people

210
00:12:48.420 --> 00:12:51.750
who are writing specs and
especially people who are offering

211
00:12:51.780 --> 00:12:56.460
test suites, especially early on
in spec development. So what

212
00:12:56.460 --> 00:13:00.990
that means is that vendors
browsers will then be implementing

213
00:13:00.990 --> 00:13:03.450
something and there'll be writing
their own tests, but it

214
00:13:03.450 --> 00:13:07.440
won't be shared across. So
it's like this minor logistical

215
00:13:07.440 --> 00:13:11.820
issue that actually is being
changed. There's a lot of

216
00:13:11.820 --> 00:13:14.640
the proposals that have come
out of Adobe things like

217
00:13:15.270 --> 00:13:18.480
some web components, things, those
are starting out very early

218
00:13:18.480 --> 00:13:22.410
on with cross vendor test
suites. But in other cases

219
00:13:23.550 --> 00:13:27.360
like CSS transforms did not
really have that sort of

220
00:13:27.360 --> 00:13:31.920
coverage early on. So something
implementations gotta touch different. Do

221
00:13:31.920 --> 00:13:34.230
you think that this time,
next year, we're going to

222
00:13:34.230 --> 00:13:37.290
start to do fragment all
of this and get our

223
00:13:37.290 --> 00:13:39.150
heads on straight? Or are
we going to continue to

224
00:13:39.270 --> 00:13:42.420
jockey for position? Like Yeah,
I, yeah, there's a lot

225
00:13:42.420 --> 00:13:44.430
of really good things happening
in the space right now.

226
00:13:44.910 --> 00:13:48.930
W3C actually just added someone
full time. His name is

227
00:13:48.930 --> 00:13:51.930
Toby Langel. He is the,
he's the kind of W3C

228
00:13:51.930 --> 00:13:54.870
honcho at Facebook. And he
is now full time for

229
00:13:54.870 --> 00:14:00.300
one year trying to fix
the, the testing infrastructure so

230
00:14:00.300 --> 00:14:04.020
that all vendors are tested
across the same stuff. And

231
00:14:04.020 --> 00:14:07.740
that it's painless for, for
them to maintain that. So

232
00:14:08.230 --> 00:14:13.380
actually, like I've been kind
of cranky about the situation

233
00:14:13.380 --> 00:14:15.030
right now, but I see
a lot, I have a

234
00:14:15.030 --> 00:14:16.770
lot of optimism for how
it's going in the right

235
00:14:16.770 --> 00:14:19.830
direction. I feel like, I
mean, not to like overstate

236
00:14:20.310 --> 00:14:23.850
Tony's position, but it's like
we have one guy for

237
00:14:23.850 --> 00:14:26.160
one year to fix this
thing that could change the

238
00:14:26.160 --> 00:14:30.870
face of the web forever.
It seemed like somebody might

239
00:14:30.870 --> 00:14:32.880
want to just throw in
some money to help out

240
00:14:32.910 --> 00:14:34.980
and put a couple of
people on this full time

241
00:14:34.980 --> 00:14:39.700
and get some things done.
Yeah. Yes, yes. And so

242
00:14:39.700 --> 00:14:45.600
all browser vendors have people
that focus exclusively on testing,

243
00:14:47.340 --> 00:14:51.740
but, but then there's kind
of a connection that needs

244
00:14:51.740 --> 00:14:55.640
to be improved regarding browser's
own testing and then testing

245
00:14:55.790 --> 00:14:58.790
at the, at the standards
and the shared level. And

246
00:14:58.790 --> 00:15:01.400
so that's, we're going to
see more investment there I

247
00:15:01.400 --> 00:15:04.460
expect. And she'll just kind
of make everything a lot

248
00:15:04.460 --> 00:15:07.450
better. I think a lot
of people who are making

249
00:15:07.450 --> 00:15:09.280
the move, a lot of
enterprise developers that are making

250
00:15:09.280 --> 00:15:11.890
the move from kind of
server side development, where they

251
00:15:11.890 --> 00:15:16.300
really work their backend servers
to make HTML and ship

252
00:15:16.300 --> 00:15:18.730
angled brackets across the wire.
Her now moving into a,

253
00:15:19.000 --> 00:15:20.860
a balance where there's some
work that happens on the

254
00:15:20.860 --> 00:15:22.420
server. And there's a lot
of work that happens on

255
00:15:22.420 --> 00:15:26.260
the client. They find this
world where we're all jockeying

256
00:15:26.260 --> 00:15:30.310
for position. There's a lot
of personality driven development. You're

257
00:15:30.310 --> 00:15:33.040
not using required JS you
suck, Oh, you're using this.

258
00:15:33.040 --> 00:15:35.470
Do you suck? You know,
you, you, it's almost like

259
00:15:35.470 --> 00:15:38.350
you with Twitter, the idea
of followers, you pick your

260
00:15:38.350 --> 00:15:42.040
favorite JavaScript developer, or you
pick your favorite company and

261
00:15:42.040 --> 00:15:44.140
then you want to use
their stuff. It all started

262
00:15:44.140 --> 00:15:48.130
with the whole jQuery MooTools
motion kind of like, and

263
00:15:48.130 --> 00:15:50.620
smack down then one of
them one, and now we're

264
00:15:50.620 --> 00:15:59.080
fighting about MVC frameworks. Right?
Right. Yeah. I think there's,

265
00:15:59.170 --> 00:16:04.930
there's something about the web
community that really just prizes,

266
00:16:06.160 --> 00:16:10.180
just like celebrity, whether it's,
whether it's a project or

267
00:16:10.180 --> 00:16:14.620
a person. And it really
is all about, I mean,

268
00:16:14.620 --> 00:16:16.570
part of it's nice because
part of it's about like

269
00:16:16.570 --> 00:16:19.360
a strong and loyal community
and a community that you

270
00:16:19.360 --> 00:16:22.930
like have corroborate camaraderie with
and you learn from, but

271
00:16:22.930 --> 00:16:25.870
then the evil side is
that sometimes it's just not,

272
00:16:27.310 --> 00:16:30.520
you know, not pushing us
in the right direction. I

273
00:16:30.520 --> 00:16:32.590
think I got some feedback
on one of my products

274
00:16:32.590 --> 00:16:35.770
a while ago that was
along these lines because somewhere

275
00:16:35.770 --> 00:16:41.380
around when they launched the,
the copy on the homepage

276
00:16:41.780 --> 00:16:45.940
was very like, it was
very showy and it was

277
00:16:45.940 --> 00:16:48.100
very like, this stuff will
just make you look cool.

278
00:16:49.770 --> 00:16:51.700
I wrote it in a
way that I was so

279
00:16:51.700 --> 00:16:54.700
excited about it and I
was just excited to share

280
00:16:54.700 --> 00:16:58.060
it, but it wasn't, it
wasn't explaining what this does

281
00:16:58.060 --> 00:17:02.200
for you. And it was
more just like getting you

282
00:17:02.200 --> 00:17:07.600
excited, Youthful and exuberance or,
I mean like, cause there

283
00:17:07.660 --> 00:17:10.600
are people who will come
out with some, pick a

284
00:17:10.600 --> 00:17:13.330
noun dot JS, and then
they'll go in, they'll make

285
00:17:13.330 --> 00:17:15.970
a gorgeous site and it
will be like such and

286
00:17:15.970 --> 00:17:18.490
such, such and shut and
go boom. Right. Like all

287
00:17:18.490 --> 00:17:24.610
caps, like boom, that's our
tagline. Yeah. And so, yeah,

288
00:17:26.440 --> 00:17:29.750
it's, it's okay to be
excited though. I mean it's

289
00:17:29.860 --> 00:17:32.680
okay. One of the things
that I it's been a

290
00:17:32.680 --> 00:17:37.090
really enlightening to see the
flex developer community kind of

291
00:17:37.180 --> 00:17:41.740
entering into JavaScripts in nature
because they've come from a

292
00:17:41.740 --> 00:17:44.230
completely different background. They're used
to a platform that offers

293
00:17:44.230 --> 00:17:45.520
a lot of things that
they kind of have to

294
00:17:45.520 --> 00:17:47.680
put together on their own
and they come and they

295
00:17:47.680 --> 00:17:49.440
see these projects and they're
just like, why are these

296
00:17:49.440 --> 00:17:52.410
projects marketing themselves so hard
at you? Why aren't they

297
00:17:52.410 --> 00:17:54.960
just telling me bullet by
bullet the feature set that

298
00:17:54.960 --> 00:17:59.280
they offer? And I mean,
I, I understand like, you

299
00:17:59.280 --> 00:18:02.760
know, part of it is,
is the web community doesn't

300
00:18:02.760 --> 00:18:06.420
have the vocabulary established that
people like the flux community

301
00:18:06.420 --> 00:18:12.090
hat. But the other part
is that I, I agree

302
00:18:12.090 --> 00:18:17.430
that that things could be
a little bit more just

303
00:18:17.910 --> 00:18:20.850
plain and readable when it
comes to what exactly you're

304
00:18:20.850 --> 00:18:23.520
getting out of this project
and how you're going to

305
00:18:23.520 --> 00:18:26.610
want to partner your use
of this, of his tool

306
00:18:26.610 --> 00:18:29.710
or project with other things.
Yeah. I think that that

307
00:18:30.260 --> 00:18:38.090
for, it feels like that
there's small companies, small startups,

308
00:18:38.420 --> 00:18:41.270
five, 10 people in a
room really excited full of

309
00:18:41.270 --> 00:18:44.870
energy and caffeine head in
one direction. And then there's

310
00:18:44.870 --> 00:18:49.040
kind of this tired, more
enterprise you developers just like,

311
00:18:49.040 --> 00:18:50.990
just sit, just solve this
problem for me, do it

312
00:18:50.990 --> 00:18:53.810
in a reliable way. Don't
disappear. So there's like, there's

313
00:18:53.810 --> 00:18:56.330
a pragmatism aspect of things.
Almost like there's a triangle

314
00:18:56.330 --> 00:19:00.290
there's pragmatism, there's showy and
flashy. And then there's purist

315
00:19:00.590 --> 00:19:05.390
kind of like the, is
this code haiku quality, right?

316
00:19:06.230 --> 00:19:09.410
And there's this constant balance
between like take any library

317
00:19:09.410 --> 00:19:12.200
and you could plot it
on this, this triangle as

318
00:19:12.200 --> 00:19:14.330
far as like, is, is
it flashy? Is it showy?

319
00:19:14.330 --> 00:19:16.220
Is it trying to like
be lisped like, or is

320
00:19:16.220 --> 00:19:18.230
it trying to be like
coffee script where it's gorgeous

321
00:19:18.230 --> 00:19:19.790
and it's look what we
did in 12 lines of

322
00:19:19.790 --> 00:19:22.880
code or is it all
where there's no library, it's

323
00:19:22.880 --> 00:19:26.750
just really a gorgeous front
end and there's nothing, Right?

324
00:19:26.810 --> 00:19:29.450
Yeah. It seems like you'd
want, I mean, when you

325
00:19:29.450 --> 00:19:31.250
plot it out like that,
and that's trying to, like,

326
00:19:31.260 --> 00:19:32.930
I feel like I want
something that's kind of in

327
00:19:32.930 --> 00:19:35.990
the middle. You know, I
want something that is eloquently

328
00:19:35.990 --> 00:19:40.670
written and I want it
to, I want it to

329
00:19:40.670 --> 00:19:43.100
sell itself well enough that
I know that there's going

330
00:19:43.100 --> 00:19:45.190
to be a community that's
around it and who support

331
00:19:45.200 --> 00:19:47.120
it and I can learn
from, but I also want

332
00:19:47.120 --> 00:19:50.390
to know that its engineering
principles are, are, are good.

333
00:19:50.390 --> 00:19:53.000
And that the problem that
it's trying to solve is

334
00:19:53.000 --> 00:19:55.730
large enough for me to,
you know, to sink some

335
00:19:55.730 --> 00:19:58.400
time into learning it. Exactly.
I think I'm looking here

336
00:19:58.400 --> 00:20:01.220
online. I think I thought
there was a Project that

337
00:20:01.220 --> 00:20:03.620
just came out. I want
to say it was called

338
00:20:03.620 --> 00:20:10.510
like low bar or slow-mo
JS was her name. Oh,

339
00:20:10.510 --> 00:20:12.140
I'll find it. But there
was a project that just

340
00:20:12.140 --> 00:20:15.080
came out that was like
trying to be like underscore,

341
00:20:15.080 --> 00:20:20.150
but it was an underscore
competitor, low dash dash. Yeah.

342
00:20:20.180 --> 00:20:24.110
Low dash written by John David Dalton.
He's actually, he's a JavaScript

343
00:20:24.110 --> 00:20:29.180
performance manager at Microsoft, but
this is his open source

344
00:20:29.180 --> 00:20:34.940
project and yeah. So he
came out with this originally

345
00:20:35.550 --> 00:20:39.230
it started as a fork
of underscore because John tried

346
00:20:39.230 --> 00:20:45.110
to get some changes into
underscore that, that allow him

347
00:20:45.650 --> 00:20:49.090
to create a fork is
now been allowed back onto

348
00:20:49.090 --> 00:20:53.260
the project as a contributor
and collaborator. And so he's

349
00:20:53.260 --> 00:20:57.400
contributing to both his fork
and alternative and the original

350
00:20:57.520 --> 00:21:01.720
project, which is right. But
it's also like the low

351
00:21:01.720 --> 00:21:04.810
Nash community. Well, originally it
was kind of like this

352
00:21:04.810 --> 00:21:07.960
outcast and like, everyone's like,
well, I don't know if

353
00:21:07.960 --> 00:21:10.900
I can trust this now.
It's actually a very well

354
00:21:10.900 --> 00:21:15.420
like celebrated and shared kind
of project. Exactly. And I,

355
00:21:15.580 --> 00:21:18.990
I bring that up as
an example where KIPP Cambridges

356
00:21:19.110 --> 00:21:22.320
article that said to say
hello to low dash was

357
00:21:22.320 --> 00:21:28.530
presented in a way that
was practical, pragmatic, flashy, side-by-side

358
00:21:28.530 --> 00:21:32.460
demos, but extremely like, alright,
here's what we have to

359
00:21:32.460 --> 00:21:35.010
offer. So I look at
that as like, in my

360
00:21:35.010 --> 00:21:36.570
mind, the one that I've
thought of in the last

361
00:21:36.570 --> 00:21:38.800
few months, that's right in
the middle of that triangle.

362
00:21:39.330 --> 00:21:41.430
Yeah. That's a really solid
project. They've done a good

363
00:21:41.430 --> 00:21:44.940
job there. Yeah. It's pretty
exciting at a lower level.

364
00:21:45.000 --> 00:21:47.430
I feel like we're reinventing
a lot of work and

365
00:21:47.490 --> 00:21:49.680
like, alright, I'm going to
make the, world's great to

366
00:21:49.680 --> 00:21:52.350
do application first. I needed
to decide how I'm going

367
00:21:52.350 --> 00:21:54.660
to manage async first. I'm
going to decide how I

368
00:21:54.660 --> 00:21:57.750
do module loading. Sure. We've
since we're, we're in a

369
00:21:57.750 --> 00:21:59.820
very scary time of flux
right now, like if I

370
00:21:59.820 --> 00:22:01.290
was going to do a
startup and do a lot

371
00:22:01.290 --> 00:22:04.590
of JavaScript today, I might
find half of my project

372
00:22:04.590 --> 00:22:08.310
being thrown out when yes.
Six comes out next year

373
00:22:08.310 --> 00:22:11.100
or whenever things happen, you
know what I mean? Yeah.

374
00:22:11.160 --> 00:22:13.200
There's, there's a lot of
things going on right now.

375
00:22:13.200 --> 00:22:15.240
Like another part is like,
I want to build a

376
00:22:15.240 --> 00:22:18.720
web app. There's a lot
of parts that are going

377
00:22:18.720 --> 00:22:20.790
to like the best way
to build a large app

378
00:22:20.790 --> 00:22:22.830
is to never build a
large app and to build

379
00:22:22.830 --> 00:22:25.890
a collection of small, you
know, small modules work together.

380
00:22:27.210 --> 00:22:30.450
How am I adding that
into my page? Like 25

381
00:22:30.450 --> 00:22:33.930
script tags? Probably not like
I should be using modules

382
00:22:33.930 --> 00:22:37.350
these days. You know, people
go the route of offering

383
00:22:37.350 --> 00:22:41.010
an AMD modules or the
we'll use common JS modules

384
00:22:41.010 --> 00:22:43.530
and use something like no
browser. And they both have

385
00:22:43.530 --> 00:22:47.010
their advantages and disadvantages. But
I think that like nowadays

386
00:22:47.010 --> 00:22:51.600
it's pretty much impossible to
be offering something of significance

387
00:22:51.600 --> 00:22:56.550
and not be offering your
code in modules. So I'm

388
00:22:56.550 --> 00:23:00.120
excited about what ECMAScript six
does, cause modules are, are

389
00:23:00.570 --> 00:23:02.520
right now of, we have
these hacks to make this

390
00:23:02.520 --> 00:23:05.490
work, protect the global scope
and things like that. ECMAScript

391
00:23:05.490 --> 00:23:09.270
six offers a real native
way to do it, but

392
00:23:09.270 --> 00:23:11.610
also there's a lot of
other pieces coming around. This

393
00:23:11.610 --> 00:23:15.690
one is when it comes
to like going in and

394
00:23:15.690 --> 00:23:17.910
out, I'm going to have
my application cut. I'm going

395
00:23:17.910 --> 00:23:19.110
to split it up. But
I'm also going to have

396
00:23:19.110 --> 00:23:22.290
dependencies on third party code.
And right now, like, let's

397
00:23:22.290 --> 00:23:27.480
say I want to use
backbone. Okay. So I opened

398
00:23:27.480 --> 00:23:32.820
my browser and I Google
backbone. I download it, I

399
00:23:32.910 --> 00:23:35.490
move it from my downloads
folder into my application folder.

400
00:23:35.850 --> 00:23:39.420
And I added into my
page somehow when I want

401
00:23:39.420 --> 00:23:41.340
to update it, I go
through a similar thing. Like

402
00:23:41.340 --> 00:23:43.680
I'm watching Twitter to find
out when it updates. And

403
00:23:43.680 --> 00:23:47.810
then I go like this
manual steps. Oh, I didn't

404
00:23:47.810 --> 00:23:49.790
even mention the fact that
it has dependencies of its

405
00:23:49.790 --> 00:23:51.680
own that I need to
go find on the left

406
00:23:51.680 --> 00:23:55.880
too. I feel that we're
at this point where we,

407
00:23:56.120 --> 00:24:00.890
that package management can really
solve a lot of problems

408
00:24:00.890 --> 00:24:04.190
for us and make us
more productive, keep our libraries

409
00:24:04.190 --> 00:24:07.460
up to date, help us
out a lot with that.

410
00:24:07.670 --> 00:24:10.240
And so Isn't it multifaceted
though? I mean, there's packaging,

411
00:24:10.270 --> 00:24:13.840
there's bringing it down, putting
it somewhere. Yeah. There's version

412
00:24:13.840 --> 00:24:15.850
of management, dependency management, like
you mentioned, there's like the

413
00:24:16.240 --> 00:24:20.740
RPM NPM new get Jim's
side of things, development time.

414
00:24:21.070 --> 00:24:24.490
Right. Then there's runtime loading
and managing of that, but

415
00:24:24.490 --> 00:24:27.130
then bundling and minification It
does. Yeah. The optimization side

416
00:24:27.220 --> 00:24:30.490
on that side. Yeah. So
a good solution has to

417
00:24:30.490 --> 00:24:34.270
kind of handle all these
things. And a few people

418
00:24:34.270 --> 00:24:38.280
have tried different approaches. There,
there was a project a

419
00:24:38.290 --> 00:24:43.510
bit ago called BPM browser
packing manager, and it kind

420
00:24:43.510 --> 00:24:47.800
of tried to tackle all
three pieces. So not only

421
00:24:48.220 --> 00:24:51.340
checked the retrieving of packages,
but also had our hits

422
00:24:51.340 --> 00:24:56.440
own preview server and then
handled modification itself as well.

423
00:24:57.400 --> 00:25:00.310
Other projects nowadays I'm involved
in a project called Bauer

424
00:25:00.370 --> 00:25:02.800
that was originally started by
Twitter, but now as a

425
00:25:03.580 --> 00:25:06.970
very kind of large development
open source community, that's supporting

426
00:25:06.970 --> 00:25:11.890
it. And it is pretty
much only just there, there

427
00:25:11.890 --> 00:25:14.740
is a registry and there's
a way to pull things

428
00:25:14.740 --> 00:25:17.350
out from it, resolve the
dependencies, get those. And then

429
00:25:17.350 --> 00:25:22.330
she thinks that's a date
and there's hooks to connect

430
00:25:22.390 --> 00:25:26.920
to these other parts of
runtime module loading and the

431
00:25:26.920 --> 00:25:31.600
build time optimization. But I,
I mean, I'm really, really,

432
00:25:31.660 --> 00:25:38.620
I think that without basically
without adopting packaging management solutions,

433
00:25:38.920 --> 00:25:44.170
we're kind of holding ourselves,
holding ourselves back. I see

434
00:25:44.170 --> 00:25:47.590
kind of people re remaining
at the same level of,

435
00:25:47.670 --> 00:25:50.500
of the web platform. They're
just only building. So high

436
00:25:50.650 --> 00:25:54.040
people get afraid of, of
having dependencies and using third

437
00:25:54.040 --> 00:25:56.890
party code. And I think
it's really holding back the

438
00:25:56.900 --> 00:25:59.050
sophistication of what we can
actually develop on the web

439
00:25:59.050 --> 00:26:04.450
platform. So I think I'm
just really excited to see

440
00:26:04.720 --> 00:26:09.160
more adoption, more tooling around
things. You know, I don't

441
00:26:09.160 --> 00:26:11.320
want to have to manage
my, my new get and

442
00:26:11.320 --> 00:26:15.700
my NPM and my other
client side pack management, all

443
00:26:15.700 --> 00:26:17.290
uniquely, if I don't have
to. And I think there's

444
00:26:17.290 --> 00:26:22.870
important opportunities for, for integrations,
but also plenty of other

445
00:26:22.870 --> 00:26:26.230
development. So I'm pretty active
in the development, the developer

446
00:26:26.230 --> 00:26:29.680
community there and invite anyone
else to join us. One

447
00:26:29.680 --> 00:26:32.380
of the things I struggled
with a lot yesterday that

448
00:26:32.380 --> 00:26:34.450
I guess Flexbox will fix.
At some point I was

449
00:26:34.450 --> 00:26:37.480
messing with some CSS and
I had three browsers open

450
00:26:37.480 --> 00:26:39.190
on three monitors and I
was doing a bunch of

451
00:26:39.190 --> 00:26:42.730
breakpoint, responsive stuff. And I
was chasing boxes around. I

452
00:26:42.730 --> 00:26:44.580
basically a grid of boxes
and I wanted them to

453
00:26:44.580 --> 00:26:46.980
resize appropriately. And I was
deciding whether I wanted to

454
00:26:46.980 --> 00:26:51.570
go and use, what is
the, what is the one,

455
00:26:51.570 --> 00:26:54.120
that's the name of bricks?
It's the, it's the re

456
00:26:54.150 --> 00:26:57.930
automatic resizing, masonry masonry. So
I was thinking, well, maybe

457
00:26:57.930 --> 00:26:59.340
it's time to just rip
this whole design out and

458
00:26:59.340 --> 00:27:02.160
do masonry. And I opened
up Chrome tools and I

459
00:27:02.160 --> 00:27:06.720
get the CSS perfect. And
then I bumped something and

460
00:27:06.720 --> 00:27:08.670
it was back the way
it was again. And I

461
00:27:08.680 --> 00:27:11.550
lost everything. And I said
to myself, how come I'm

462
00:27:11.550 --> 00:27:14.070
not typing in here and
having it automatically go back.

463
00:27:14.490 --> 00:27:15.720
So I look around the
web and there's a half

464
00:27:15.720 --> 00:27:18.000
dozen different projects out there
where they're trying to close

465
00:27:18.000 --> 00:27:22.590
that browser tools loop to
say, I'm in a mode

466
00:27:22.590 --> 00:27:24.930
now where I've modified my
CSS. I want to push

467
00:27:24.930 --> 00:27:27.500
it back to the server.
Now that should be it.

468
00:27:27.510 --> 00:27:28.800
That should be a spec.
You see what I'm saying?

469
00:27:28.800 --> 00:27:32.600
Like every browser should support
that. Yeah. There's a few

470
00:27:32.600 --> 00:27:36.080
ways, at least in the
Chrome deductibles to tackle that

471
00:27:36.110 --> 00:27:40.820
one is command Z works,
Undo my safety self, the

472
00:27:40.820 --> 00:27:44.180
Lord, I think I reloaded.
Yeah. Yeah. That was not

473
00:27:44.180 --> 00:27:46.910
too long ago, but it's
kind of a secret and

474
00:27:46.910 --> 00:27:53.150
I probably undocumented feature. Yeah.
That happens. One of the

475
00:27:53.150 --> 00:27:56.690
other, yeah. Inside Chrome devils,
we've done a lot of

476
00:27:56.690 --> 00:27:59.630
things to create that kind
of author, an experience where

477
00:27:59.630 --> 00:28:02.000
you can just basically develop
inside the Chrome dev tools

478
00:28:02.000 --> 00:28:04.010
and nodding their head back
to your, your editor, your

479
00:28:04.010 --> 00:28:08.660
IDE Remy sharp has a
great screencast on this. And,

480
00:28:09.230 --> 00:28:12.170
but you can basically one
of the great things that

481
00:28:12.170 --> 00:28:16.340
actually just visually, so let's
say you're developing your CSS

482
00:28:16.340 --> 00:28:20.300
with SAS. There's a port
for SAS source maps. So

483
00:28:20.570 --> 00:28:24.110
I can author in SAS.
I can compile it. It

484
00:28:24.110 --> 00:28:28.040
comes out in CSS. I
see the, this, the, the

485
00:28:28.040 --> 00:28:30.740
styles of my Dom as
a regular, but then I

486
00:28:30.740 --> 00:28:34.820
can control Clinton back to
my original SAS while, while

487
00:28:34.850 --> 00:28:37.460
being in the Chrome dev
tools make changes right there

488
00:28:37.460 --> 00:28:41.540
inside the dev tools hit
save. And then my styles

489
00:28:41.540 --> 00:28:46.580
will auto refresh the new
compiled styles. So like that's

490
00:28:46.580 --> 00:28:49.880
a really cool workflow that
you don't even have to

491
00:28:49.970 --> 00:28:52.070
leave the decibels for. And
so we're seeing a lot

492
00:28:52.070 --> 00:28:54.920
of improvements there and just
kind of like, let's take

493
00:28:54.920 --> 00:28:57.200
the workflow that you're doing
with all these tools kind

494
00:28:57.200 --> 00:29:00.410
of separated and deliver it
to you. All you in

495
00:29:00.410 --> 00:29:03.080
one place Is the Chrome
dev tools than opening the

496
00:29:03.080 --> 00:29:05.330
file off disc. Or is
there a listener that might

497
00:29:05.330 --> 00:29:09.590
have to implement in my
service? It is the, the

498
00:29:09.590 --> 00:29:15.740
compilation step is up to
you. But when the compiled

499
00:29:15.740 --> 00:29:18.590
file changes, the Chrome dev
tools picks it up on

500
00:29:18.590 --> 00:29:22.040
its own. Very cool. Yeah.
One of the other things

501
00:29:22.040 --> 00:29:23.360
I want to talk to
kind of like one of

502
00:29:23.360 --> 00:29:24.890
the last things I wanted
to talk to about is

503
00:29:24.890 --> 00:29:28.040
that there it's, it's clear
that a lot of front

504
00:29:28.040 --> 00:29:32.180
end development is, is, is
Mac focused and node focused.

505
00:29:32.180 --> 00:29:35.120
And, and NPM is becoming
like the package manager for

506
00:29:35.120 --> 00:29:37.790
everything and things like Bauer
and yeoman and all those

507
00:29:37.790 --> 00:29:39.950
things are, are all focused
at the command line. And

508
00:29:39.950 --> 00:29:42.130
the windows guys are really,
if I wanted to get

509
00:29:42.130 --> 00:29:45.190
yeoman running on windows, it's
just gonna always be a

510
00:29:45.190 --> 00:29:50.770
struggle. What can, you know,
should, should Microsoft kind of

511
00:29:50.800 --> 00:29:55.150
try to help out and
make things like yeoman and

512
00:29:55.150 --> 00:29:57.400
Bauer and these different things
like easier to use for

513
00:29:57.400 --> 00:30:02.910
windows developers? What, I mean
Like Azure, for example, we

514
00:30:02.910 --> 00:30:05.550
have the Azure tools in
NPM, so you just go

515
00:30:05.550 --> 00:30:07.590
NPM, install Azure, and then
you go and rock it

516
00:30:07.590 --> 00:30:10.290
at the command line. It's
cool. But trying to get

517
00:30:10.290 --> 00:30:13.290
something like yeoman working or
auto reload, it's always like

518
00:30:13.740 --> 00:30:17.220
for Linux, for Mac and
windows and beta, what trying

519
00:30:17.220 --> 00:30:18.960
to figure out, how do
you need Cygwin or not?

520
00:30:18.960 --> 00:30:20.700
I mean, ultimately are we
being held back by the

521
00:30:20.700 --> 00:30:25.380
fact that we don't just
have bad? I think the

522
00:30:25.380 --> 00:30:28.530
answer to the last question
is probably, yeah. I mean,

523
00:30:28.530 --> 00:30:36.600
every time Windows developers out
there that want to be

524
00:30:36.600 --> 00:30:40.080
on the cutting edge. Yeah.
I want to type LS

525
00:30:40.170 --> 00:30:43.020
and have it work. And
a third, it does work

526
00:30:43.020 --> 00:30:48.720
in PowerShell, but yes. Okay,
cool. Cool. Yeah. I did

527
00:30:48.720 --> 00:30:52.680
a survey that's a long
ago about what of the

528
00:30:52.680 --> 00:30:55.290
Chrome developer tools audience and
what OSS everyone is on.

529
00:30:56.010 --> 00:31:00.900
And it's a 40, 40,
20 when Mac Linux really,

530
00:31:02.190 --> 00:31:06.510
which I was surprised by
how, how high Linux was.

531
00:31:06.510 --> 00:31:10.140
So I went and double
checked and yeah, I find

532
00:31:10.140 --> 00:31:13.200
that hard to believe. That's
pretty crazy, it's really high,

533
00:31:13.200 --> 00:31:15.930
but, but that makes me
like, make sure that Linux

534
00:31:16.740 --> 00:31:20.190
priorities is a big Linux
support is a big priority,

535
00:31:20.640 --> 00:31:24.000
but I mean that's for,
for windows priority or windows

536
00:31:25.140 --> 00:31:27.870
support for dev tools. Like
I think it's mostly just

537
00:31:27.870 --> 00:31:30.780
the history there, which is
that windows has always offered

538
00:31:30.780 --> 00:31:35.160
kind of developer tools, whereas
on Mac and Linux has

539
00:31:35.160 --> 00:31:40.260
been more command line focused.
And, and I don't know

540
00:31:40.260 --> 00:31:45.390
what windows developer developers using
windows prefer, but certainly from

541
00:31:45.390 --> 00:31:48.570
a, from a tool standpoint,
it's much easier to support

542
00:31:49.200 --> 00:31:51.750
command line tools on windows
than it is to have

543
00:31:51.750 --> 00:31:54.570
to build a story around
it, as long as you're

544
00:31:54.570 --> 00:31:58.000
okay with that, that means
your audience, someone who's comfortable

545
00:31:58.020 --> 00:32:02.610
with. Yeah. Yeah. We're, we're
finding that like an asp.net,

546
00:32:02.610 --> 00:32:07.020
for example, it's about, I
would probably say like 60,

547
00:32:07.020 --> 00:32:09.270
40, or 70 30, where
he really liked the gooey,

548
00:32:09.960 --> 00:32:13.050
but they want a command
line usually in visual studio.

549
00:32:13.050 --> 00:32:16.320
So for example, in VMs,
there's a, there's a package

550
00:32:16.320 --> 00:32:18.960
console just like in sublime,
you know, you can kind

551
00:32:18.960 --> 00:32:21.390
of bring up the quake
console and do your thing

552
00:32:21.390 --> 00:32:24.210
and then throw it away.
We use the new get

553
00:32:24.210 --> 00:32:29.340
package manager has PowerShell inside
vs. And inevitably what happens

554
00:32:29.340 --> 00:32:32.280
is we'll convert stuff from
bash to PowerShell. And then

555
00:32:32.280 --> 00:32:36.600
wish we had bash in
visual studio. Like I want

556
00:32:36.600 --> 00:32:39.860
to go into visual studio,
go into NPM install or

557
00:32:39.860 --> 00:32:42.620
add yeoman and then go
back into VAs. But I

558
00:32:42.620 --> 00:32:44.810
haven't really left, you know
what I mean? Kind of

559
00:32:44.810 --> 00:32:49.330
like vs as Whoa, Whoa.
You know what I mean?

560
00:32:49.330 --> 00:32:50.860
Like I want to, I
want it paneled. Right. I

561
00:32:50.860 --> 00:32:54.160
live in VMs. I like
things about vs, but I

562
00:32:54.160 --> 00:32:57.300
want to have a command
line that's docked. Right. And

563
00:32:57.310 --> 00:33:00.760
move smoothly between the two
and trying to figure out

564
00:33:00.760 --> 00:33:02.710
like, and I can use,
I just use yeoman as

565
00:33:02.710 --> 00:33:05.500
the example because yeoman's one
of those things that brings

566
00:33:05.500 --> 00:33:07.480
in a bunch of other
tools. I don't know whether

567
00:33:07.480 --> 00:33:09.850
Yellen will win the web,
but that's just an example

568
00:33:09.850 --> 00:33:13.810
of a perspective that I
can't even offer. Like without

569
00:33:13.810 --> 00:33:17.050
busting out my Mac book,
I can't even offer ideas

570
00:33:17.050 --> 00:33:25.750
on what I think about
it. Yeah. Yeah. We, we

571
00:33:25.750 --> 00:33:28.570
just went out under, under
when a really big refactor

572
00:33:28.570 --> 00:33:30.400
and kind of changed the
entire way that it works,

573
00:33:31.360 --> 00:33:34.930
breaking it on windows. Well,
no beta does not currently

574
00:33:34.930 --> 00:33:40.210
work. So yeah, I guess
there used to be a

575
00:33:40.210 --> 00:33:43.300
yeoman commands on the main
line and that is now

576
00:33:43.360 --> 00:33:47.500
dead and diseased. So big
change in kind of how

577
00:33:47.500 --> 00:33:52.240
everything operates and the 1.0
final, which we expect to

578
00:33:52.240 --> 00:33:57.340
ship in the next few
weeks, we'll have windows support.

579
00:33:58.030 --> 00:34:02.590
I think NPM and node
and JavaScript executable may be

580
00:34:02.590 --> 00:34:07.960
that the answer, isn't it,
I'd be pretty happy with

581
00:34:07.960 --> 00:34:10.570
that. You can't go and
go all said and knock

582
00:34:10.570 --> 00:34:13.180
my way to glory. But
if I type yo this

583
00:34:13.180 --> 00:34:16.840
and yo that, and that's
just, it's just an app.

584
00:34:17.320 --> 00:34:22.150
That'd be great. Yeah, absolutely.
I mean the, the, the

585
00:34:22.150 --> 00:34:28.000
environment of, of NPM being
so running so well on

586
00:34:28.000 --> 00:34:30.730
windows these days, I think
was a really big boost

587
00:34:30.730 --> 00:34:34.180
for both sides. And so
I really liked seeing kind

588
00:34:34.180 --> 00:34:38.650
of the tool ecosystem written
in node kind of taking

589
00:34:38.650 --> 00:34:42.790
off. It's not just for
modules that are used in

590
00:34:42.790 --> 00:34:46.090
the app, but are now
the build tools that you're

591
00:34:46.090 --> 00:34:48.310
using to construct those assets.
I'm really excited about that

592
00:34:48.310 --> 00:34:51.790
movement. Yeah, definitely. Cool. Well,
thanks so much for talking

593
00:34:51.790 --> 00:34:54.130
to me today. I really
appreciate. Yeah, absolutely. It's been

594
00:34:54.130 --> 00:34:56.710
great. All right. Well, Paul
Irish, you can check them

595
00:34:56.710 --> 00:34:58.270
out. You Google for Paul
Irish and you'll find all

596
00:34:58.270 --> 00:35:02.260
sorts of great stuff. YouTube
channel blog and HTML five

597
00:35:02.260 --> 00:35:05.620
for their plate. This has
been another episode of Hansel

598
00:35:05.620 --> 00:35:07.300
minutes. We'll see you again
next week.

