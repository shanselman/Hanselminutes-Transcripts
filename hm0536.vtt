WEBVTT FILE

1
00:00:12.570 --> 00:00:18.300
From Hansel minutes.com. It's Hansel
minutes, our weekly discussion with

2
00:00:18.300 --> 00:00:23.460
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:23.460 --> 00:00:27.570
your show number 540. In
this episode, Scott talks with

4
00:00:27.660 --> 00:00:37.650
Stephanie Hurlbert about creating a
new GPU texture compressor. Hi,

5
00:00:37.650 --> 00:00:39.810
this is Scott Hanselman. This
is another episode of Hansel

6
00:00:39.810 --> 00:00:43.020
minutes. And today I'm talking
with Stephanie Hurlbert, she's the

7
00:00:43.020 --> 00:00:46.800
owner of binomial and she's
creating a new piece of

8
00:00:46.800 --> 00:00:51.300
software, a GPU texture, transcoding,
a text, a texture compressor.

9
00:00:51.300 --> 00:00:54.600
Is that correct? That is
correct. Yes. So there's a

10
00:00:54.600 --> 00:00:56.790
market for this, right? Like
you were saying that not

11
00:00:56.790 --> 00:00:59.400
only are you making a
texture compressor, but that you're

12
00:00:59.400 --> 00:01:02.990
going to make the best
one, right? At least the

13
00:01:02.990 --> 00:01:05.900
best one for a lot
of use cases that I'm

14
00:01:05.900 --> 00:01:09.980
seeing. Yeah. So let's back
up. What is a GPU

15
00:01:09.980 --> 00:01:13.640
lossy texture compressor. There's a
lot of words in there.

16
00:01:14.320 --> 00:01:17.720
The GPU is your graphics
processing unit on a computer

17
00:01:18.650 --> 00:01:23.060
because graphics are processed in
such a special way in

18
00:01:23.060 --> 00:01:27.860
such a common use case
hardware developers created the GPU,

19
00:01:27.860 --> 00:01:31.100
which is structured in such
a way that it's specialized

20
00:01:31.100 --> 00:01:35.600
for drawing graphics. Lossy means
that it's okay to lose

21
00:01:35.600 --> 00:01:37.880
a little bit of data.
If we can take a

22
00:01:37.880 --> 00:01:42.290
photo of your cat and
make it really, really small

23
00:01:42.290 --> 00:01:44.630
so that you can store
lots of photos of your

24
00:01:44.630 --> 00:01:46.940
cat on your computer, it
might be worth it. If

25
00:01:46.940 --> 00:01:49.880
it's not perfect image quality,
it's okay to lose a

26
00:01:49.880 --> 00:01:55.370
little bit. And then texture
just refers to images, photos,

27
00:01:56.270 --> 00:02:00.770
pieces of 2d artwork, any
any kind of image or,

28
00:02:02.120 --> 00:02:05.120
or drawing that you can
save on your computer. And

29
00:02:05.120 --> 00:02:07.730
then the compressor part of
course, is compressing it, making

30
00:02:07.730 --> 00:02:11.540
that data smaller. Okay. So
if I go and open

31
00:02:11.540 --> 00:02:15.410
up like Skyrim and I'm
walking around on a cobblestone

32
00:02:16.280 --> 00:02:20.390
floor, is the texture, the
photographs or the drawings of

33
00:02:20.390 --> 00:02:25.130
the art of that cobblestone?
Absolutely. So that, that cobblestone

34
00:02:25.130 --> 00:02:28.820
floor, it's probably a tiled
texture, meaning it's a texture

35
00:02:28.820 --> 00:02:32.300
that repeats itself over and
over. But if that texture

36
00:02:32.300 --> 00:02:35.420
was too small, you would
notice the repeating and it

37
00:02:35.420 --> 00:02:38.570
would look really bad. So
it's, it's beneficial for the

38
00:02:38.570 --> 00:02:41.180
artist to make it as
detailed and as big as

39
00:02:41.180 --> 00:02:44.840
possible. And that means that
you probably should compress it

40
00:02:44.900 --> 00:02:47.600
a little bit to make
it easier to store. So

41
00:02:47.600 --> 00:02:50.240
you can have lots of
different kinds of textures and

42
00:02:50.240 --> 00:02:53.420
not a game would just
cobblestone floor Florida. And are

43
00:02:53.420 --> 00:02:57.110
these things like big, like,
like three megapixel type photographs

44
00:02:57.110 --> 00:02:59.680
or how what's a typical
texture size? I assume that

45
00:02:59.680 --> 00:03:02.170
they have round numbers like
five 12 by five 12.

46
00:03:02.910 --> 00:03:06.420
Absolutely. And it really depends
on games. A lot of

47
00:03:06.460 --> 00:03:09.330
it actually, it goes outside
of games too, you know,

48
00:03:09.330 --> 00:03:11.730
think about Google maps and
all the textures that are

49
00:03:11.730 --> 00:03:15.450
needed for an application like
that, for instance, but a

50
00:03:15.450 --> 00:03:18.330
typical game will have, you
know, you're right in that

51
00:03:18.330 --> 00:03:21.930
it's five 12 or, you
know, one K two K

52
00:03:21.930 --> 00:03:25.410
textures. Those are, those are
the common sizes that we

53
00:03:25.410 --> 00:03:28.500
see it starting to become
more common to have four

54
00:03:28.500 --> 00:03:32.370
K textures as well because
your, your screens are increasing

55
00:03:32.370 --> 00:03:36.650
in resolution and people really
want to use that to

56
00:03:36.670 --> 00:03:40.320
full advantage. Hang on now,
4k by 4k. That's like,

57
00:03:40.710 --> 00:03:43.800
like, what is it? Three
megapixels, four megapixels. That's like

58
00:03:43.800 --> 00:03:46.380
a photograph, right? That's okay.
Well, it's huge. It's huge.

59
00:03:46.380 --> 00:03:50.100
And that is exactly why
that, and many other reasons

60
00:03:50.100 --> 00:03:52.170
are why a lot of
people are looking at our

61
00:03:52.170 --> 00:03:55.830
texture compressor and realizing, wait,
we really need to focus

62
00:03:55.830 --> 00:03:59.190
on compression and getting the
best compressor we can to

63
00:03:59.190 --> 00:04:04.350
give you an example. Basically,
a lot of GPS have

64
00:04:04.380 --> 00:04:09.630
hardware decoding in them. So
what that means is memory

65
00:04:09.630 --> 00:04:12.150
is very precious on a
GPU. You don't want to

66
00:04:12.150 --> 00:04:16.230
store uncompressed textures on your
graphics processing unit. So what

67
00:04:16.230 --> 00:04:19.080
they do is they store
it in a special GPU

68
00:04:19.080 --> 00:04:24.300
format. We call these they're
different per GPU manufacturer. One

69
00:04:24.300 --> 00:04:27.390
example is DXT and other
is PVR TC that you

70
00:04:27.390 --> 00:04:30.480
can look up. And basically
if you store it in

71
00:04:30.480 --> 00:04:34.440
that special texture format, you
can decode it using the

72
00:04:34.440 --> 00:04:37.740
GPU hardware, which makes it
really fast. And it's stored

73
00:04:37.740 --> 00:04:40.650
in a way that the
GP likes the problem with

74
00:04:40.650 --> 00:04:43.950
that is that a format
like JPEG is a fourth

75
00:04:43.950 --> 00:04:48.900
of the size of those
special GPU formats. So when

76
00:04:48.900 --> 00:04:52.440
you think about, you know,
dealing with 4k or a

77
00:04:52.440 --> 00:04:54.660
two K or one K
texture, if you have a

78
00:04:54.660 --> 00:04:57.150
lot of them, a fourth
of the size makes a

79
00:04:57.150 --> 00:05:00.450
huge difference. And we don't
want to unnecessarily store a

80
00:05:00.450 --> 00:05:03.930
huge texture, even if it
can be easily decoded by

81
00:05:03.930 --> 00:05:07.170
our GPU. And we're talking
about big things here. If

82
00:05:07.170 --> 00:05:09.750
I understand correctly, like I
just downloaded while we were

83
00:05:09.750 --> 00:05:13.170
talking a wallpaper that was
4k by 4k, it was

84
00:05:13.230 --> 00:05:17.040
eight megabytes as a JPEG.
And I'm sure 50 or

85
00:05:17.040 --> 00:05:21.480
60 as a bitmap, that's
massive. It's massive. And think

86
00:05:21.480 --> 00:05:24.120
about it. It was eight
cans, a Jacob, a JPEG.

87
00:05:24.120 --> 00:05:26.640
If we had stored it
in one of these GPU

88
00:05:26.640 --> 00:05:29.130
formats, it would have been
four times that size. That's

89
00:05:29.130 --> 00:05:33.420
crazy. That's not practical. That
seems like when we move

90
00:05:33.420 --> 00:05:36.690
into 4k gaming, we're going
to hit a problem where

91
00:05:36.690 --> 00:05:38.670
Blu-rays aren't big enough. Like
we're going to be looking

92
00:05:38.670 --> 00:05:41.490
at a hundred gigabyte games.
And as you move around

93
00:05:41.490 --> 00:05:44.220
these worlds, we're going to
be transferring that information, you

94
00:05:44.220 --> 00:05:46.920
know, from the, the, the
solid state or the drive

95
00:05:46.950 --> 00:05:49.890
into the computer. And then
up into the GPU memory

96
00:05:49.890 --> 00:05:51.780
is going to be, there's
gonna be a lot of

97
00:05:51.780 --> 00:05:55.410
memory being used up in
your GPU. Exactly. And I

98
00:05:55.410 --> 00:05:59.450
mean, games, always games always
want to look as most

99
00:05:59.450 --> 00:06:02.510
cutting edge as possible. And
a lot of that involves

100
00:06:02.930 --> 00:06:06.080
taking advantage of high resolutions,
as well as using a

101
00:06:06.080 --> 00:06:11.990
lot of detail. A lot
of new graphics techniques involve

102
00:06:11.990 --> 00:06:16.310
storing other kinds of detail
and textures like say light

103
00:06:16.310 --> 00:06:20.060
maps or normal maps or
specular maps, which are basically

104
00:06:20.060 --> 00:06:24.770
extra textures that give you
detail that you may not

105
00:06:24.770 --> 00:06:28.220
be able to deduce from
just the photograph. So textures

106
00:06:28.220 --> 00:06:32.450
are on the rise and
what are our compressor and

107
00:06:32.450 --> 00:06:37.040
transcoder does, is it compresses,
it compresses your image to

108
00:06:37.040 --> 00:06:40.100
about the size of a
JPEG. So think about that.

109
00:06:40.100 --> 00:06:43.070
Now it's a fourth of
the size and what it

110
00:06:43.070 --> 00:06:45.740
does is on the CPU
before it sends it to

111
00:06:45.740 --> 00:06:51.080
the GPU, it quickly really
quickly transcodes it into a

112
00:06:51.080 --> 00:06:55.430
format that the GPU can
actually understand DXT, PBR, TC,

113
00:06:55.430 --> 00:06:57.800
one of these formats. And
then you get to take

114
00:06:57.800 --> 00:07:02.900
advantage of that really fast
decoding. So it basically allows

115
00:07:02.900 --> 00:07:06.230
you to store these images
in a format that's much

116
00:07:06.230 --> 00:07:10.820
smaller as well as transform
it to the format your

117
00:07:10.820 --> 00:07:13.400
GP likes. So it's the
best of both worlds as

118
00:07:13.400 --> 00:07:16.690
well, what we're trying to
achieve anyway. Okay. So let's

119
00:07:16.690 --> 00:07:19.810
back up a moment. Cause
we've, we've talked with a

120
00:07:19.810 --> 00:07:22.870
lot of words and a
lot of assumptions that maybe

121
00:07:22.870 --> 00:07:25.270
the audience doesn't understand, and
maybe I'm a little confused.

122
00:07:25.600 --> 00:07:30.250
So the creator of the
texture works in Photoshop and

123
00:07:30.250 --> 00:07:32.770
whatever tools that they want
to make. Right. They, they

124
00:07:32.770 --> 00:07:34.960
may take photographs, they may
render it, they may do

125
00:07:34.960 --> 00:07:38.350
whatever, but they make a
source raw image of the

126
00:07:38.350 --> 00:07:43.450
highest possible quality. Is that
right? Yeah, exactly. So the

127
00:07:43.540 --> 00:07:48.310
artists, yeah, they, they make
their assets. So in your

128
00:07:48.310 --> 00:07:53.080
couple of stone example, I
make a really beautiful cobblestone

129
00:07:53.110 --> 00:07:56.380
floor that will later be
tiled into a game. What

130
00:07:56.380 --> 00:07:59.710
I do if we used
our compressor is I would

131
00:07:59.710 --> 00:08:04.840
use the compressor to compress
it into our special format,

132
00:08:05.960 --> 00:08:08.770
the time of game creation
at the time of the

133
00:08:08.770 --> 00:08:12.910
asset creation. So we do
this beforehand, just like you

134
00:08:12.910 --> 00:08:15.130
would a JPEG, you know,
you store JPEGs on your

135
00:08:15.130 --> 00:08:19.420
computer. JPEG is a compressed
format. Okay. So then I

136
00:08:19.420 --> 00:08:22.570
saved that. I saved that
on my, in my, as

137
00:08:22.570 --> 00:08:24.610
I am building my game.
It's part of the build

138
00:08:24.940 --> 00:08:29.320
process, just like as a
blogger, I run, you know,

139
00:08:29.320 --> 00:08:31.990
like tiny PNG or P
and G gauntlet to squish

140
00:08:31.990 --> 00:08:35.770
my images before I upload
them a game maker goes

141
00:08:35.770 --> 00:08:41.020
and runs your, your closed
source encoder, and then encodes

142
00:08:41.020 --> 00:08:44.350
it in your format. What
do they do now before

143
00:08:44.800 --> 00:08:48.700
the binomial system, before, you
know, Stephanie's machine, you know,

144
00:08:48.910 --> 00:08:52.990
before Stephanie's creation, what did
they do? Ah, they can

145
00:08:52.990 --> 00:08:56.790
use a number of methods
and it's really fascinating to

146
00:08:56.790 --> 00:08:59.520
see the different hacks and
techniques that people have come

147
00:08:59.520 --> 00:09:02.970
up with. So there, there
are a lot of game

148
00:09:02.970 --> 00:09:05.910
studios that will save it
to something like a JPEG,

149
00:09:05.940 --> 00:09:09.660
for instance, because that's really
small. We love that. And

150
00:09:09.690 --> 00:09:13.170
they still understand the importance
of storing it in these

151
00:09:13.170 --> 00:09:16.890
special GPU formats on the
GPU. So what they'll do

152
00:09:17.460 --> 00:09:19.530
is they will save it
to JPEG and then they

153
00:09:19.530 --> 00:09:24.090
will decompress it entirely on
the CPU. And then recompress

154
00:09:24.090 --> 00:09:26.820
it to a J to
one of these GPU formats.

155
00:09:27.090 --> 00:09:30.840
So that, that not only
will take them extra time

156
00:09:30.840 --> 00:09:34.440
because you have to decompress
it and recompress it. But

157
00:09:34.440 --> 00:09:39.330
it'll also add double artifacts,
JPEG introduces different artifacts than

158
00:09:39.330 --> 00:09:43.290
these GPU formats do. And
so when you decompress it

159
00:09:43.290 --> 00:09:46.260
and recompress it, you, you
lose even more detail than

160
00:09:46.260 --> 00:09:50.220
you should are. What our
transcoder does in comparison is

161
00:09:50.970 --> 00:09:56.010
takes the compressed format. And
transcodes it, which means there's

162
00:09:56.010 --> 00:10:00.390
no decoding and Rayanne coding
stage. It turns it directly

163
00:10:00.390 --> 00:10:04.320
into the compressed GPU format,
which is much better for

164
00:10:04.320 --> 00:10:08.960
quality and speed And space,
right. And you eat the

165
00:10:08.960 --> 00:10:13.250
same space that you had
with JPEG. Exactly, exactly. And

166
00:10:13.280 --> 00:10:16.400
the other thing that I've
seen people do is they'll

167
00:10:16.400 --> 00:10:21.140
just store it in the
GPU format from the start

168
00:10:21.140 --> 00:10:26.750
and say, I guess I
will either try to compress

169
00:10:26.750 --> 00:10:30.260
that with something like zip,
like, or just a compressor,

170
00:10:30.260 --> 00:10:32.810
and then decompress it right
before I get to the

171
00:10:32.810 --> 00:10:36.080
GPU and take whatever losses
that gives me, or I'll

172
00:10:36.080 --> 00:10:39.050
just, I'll just accept the
fact that it's four times

173
00:10:39.050 --> 00:10:42.200
the size. It should be
and apologize to my users

174
00:10:42.230 --> 00:10:45.230
because at least it's in
directly in the format that

175
00:10:45.230 --> 00:10:47.990
GPU will understand. And I
won't need to worry about

176
00:10:47.990 --> 00:10:53.630
any decompression and recompression Is
decompression expensive or does it

177
00:10:53.630 --> 00:10:57.620
depend on the, on the
kind of decompression? It definitely,

178
00:10:57.620 --> 00:11:01.490
of course depends on the
kind of decompression you're dealing

179
00:11:01.490 --> 00:11:05.600
with, but for this, for
this particular case, it is

180
00:11:06.020 --> 00:11:11.270
more expensive than transcoding. For
instance, our transcoder is faster

181
00:11:11.270 --> 00:11:14.930
than decompressing an image and
re compressing. It Is the

182
00:11:14.930 --> 00:11:17.420
distinction there. When you say
transcoder like, when I think

183
00:11:17.450 --> 00:11:20.510
decompress, like I read the
bits off the disc and

184
00:11:20.510 --> 00:11:22.910
I explode them in, then
I put them back on

185
00:11:22.910 --> 00:11:25.190
the disc and then I
say, Hey, there's the file

186
00:11:25.190 --> 00:11:29.450
and temp space or whatever.
Is transcoding just decompressing into

187
00:11:29.450 --> 00:11:32.180
memory? Or is it, is
it a more different definition?

188
00:11:32.630 --> 00:11:35.960
It's an excellent question. So
when you, when you decompress

189
00:11:35.960 --> 00:11:39.620
something, you, you basically, you
explode the bedside as you

190
00:11:39.620 --> 00:11:41.840
say, but you also turn
it into an image that

191
00:11:41.840 --> 00:11:45.830
you can actually see and
read on your computer when,

192
00:11:46.340 --> 00:11:51.110
when you transcode, you transcode
it to another compressed format.

193
00:11:51.110 --> 00:11:54.610
So imagine taking a JPEG
and turning it into a

194
00:11:54.610 --> 00:12:01.840
PNG just directly, like it's,
it's, it's the process of

195
00:12:02.620 --> 00:12:07.020
going from one compressed format
to another. I see, without

196
00:12:07.440 --> 00:12:11.010
decompressing there, wasn't it didn't,
it didn't explode. And then

197
00:12:11.050 --> 00:12:13.410
sit in memory is a
big buffer and then squish,

198
00:12:14.140 --> 00:12:17.370
It was squished and we
just rearranged the bits so

199
00:12:17.370 --> 00:12:21.630
that it's squished in a
different way now. No intermediate.

200
00:12:22.170 --> 00:12:25.140
Okay. So to put it
into like techie layman terms,

201
00:12:25.140 --> 00:12:29.040
I could, you know, unzip
a file. I can unzip

202
00:12:29.040 --> 00:12:32.370
the zip and then use
RAR and RAR it up

203
00:12:32.370 --> 00:12:35.670
again, but I'm gonna need
all that space in memory

204
00:12:35.730 --> 00:12:37.560
and all of the churning
to go and do that

205
00:12:37.560 --> 00:12:40.050
work. If I could just
tell the zip, make me

206
00:12:40.050 --> 00:12:42.990
a RAR and it never
got exploded, that would provide

207
00:12:42.990 --> 00:12:44.910
me all sorts of value
at churn, less on the

208
00:12:44.910 --> 00:12:49.440
disk CPU works less. Everybody
wins. Exactly. That's actually a

209
00:12:49.440 --> 00:12:53.190
perfect example. And let's, let's
imagine a case where RAR

210
00:12:53.190 --> 00:12:56.790
was so much bigger than
the zip, but that's what

211
00:12:56.790 --> 00:12:59.700
you needed to end up
with. So our case would

212
00:12:59.700 --> 00:13:02.580
be like taking the zip,
which is this tiny format,

213
00:13:02.580 --> 00:13:05.790
but not something usable in
the end and transcoding it

214
00:13:05.790 --> 00:13:08.670
directly to that radar only
when it's needed, when it's

215
00:13:08.670 --> 00:13:11.790
about to send to the
GPU, except not with zip

216
00:13:11.790 --> 00:13:18.210
and RAR. So putting this
into like a topical terms,

217
00:13:18.390 --> 00:13:22.590
did you see the Dropbox
announcement yesterday? I must've missed

218
00:13:22.590 --> 00:13:24.780
it. I was out of
town yesterday. You must entertain

219
00:13:24.780 --> 00:13:26.850
me with this announcement. So
let me see if I

220
00:13:26.850 --> 00:13:29.550
understand this because you're the
expert. They came up with

221
00:13:29.550 --> 00:13:32.640
a theme. We just released
an open source image, compression

222
00:13:32.640 --> 00:13:36.990
format called leptons. So Dropbox
knows that we all have

223
00:13:36.990 --> 00:13:39.930
JPEGs in our drop boxes,
so they will take, and

224
00:13:39.930 --> 00:13:43.770
they will compress JPEGs and
they can compress them at

225
00:13:43.770 --> 00:13:46.350
five megabytes a second, and
they can decode them back

226
00:13:46.350 --> 00:13:48.780
into the original bits at
15 megabytes a second. So

227
00:13:48.780 --> 00:13:53.760
basically they've made 22% savings
reductions for existing JPEGs. They've

228
00:13:53.760 --> 00:13:58.200
gone through our Dropboxes squished
everything into their format called

229
00:13:58.200 --> 00:14:02.280
leptons, but it's lossless. And
then when we request our

230
00:14:02.280 --> 00:14:07.710
JPEGs, they stream decode it.
They transcode it back into

231
00:14:07.710 --> 00:14:10.980
JPEG and we don't notice
the difference. Yes, yes. That's

232
00:14:10.980 --> 00:14:17.100
so similar. The only differences
that the compressor that we're

233
00:14:17.100 --> 00:14:20.220
making will be lossy, but
we hope that it will

234
00:14:20.220 --> 00:14:23.160
be lossy in such a
way that it doesn't really

235
00:14:23.250 --> 00:14:26.460
affect your quality in a
way that you'll notice, Right.

236
00:14:26.460 --> 00:14:28.620
The way that modern J
pegging is like, if you

237
00:14:28.620 --> 00:14:31.140
set your JPEG at 90,
you have to be a

238
00:14:31.140 --> 00:14:35.040
photographer to notice that the
sky is, has artifacts. Exactly.

239
00:14:35.040 --> 00:14:38.430
And what we determined is
that that lossiness is worth

240
00:14:38.430 --> 00:14:40.890
it for the speed and
the compression that you get.

241
00:14:40.890 --> 00:14:44.040
But I think it's amazing
that leptin is lossy and

242
00:14:44.340 --> 00:14:48.060
transcodes and saves you so
much time and space. That's

243
00:14:48.570 --> 00:14:51.920
really, that's really awesome of
them. I love seeing compressors

244
00:14:51.920 --> 00:14:55.390
in this space. Yeah. It's
lossless and it's, and they're

245
00:14:55.390 --> 00:14:58.000
doing it of course, to
save, to save money and

246
00:14:58.000 --> 00:15:00.070
you're doing it to not
only make it better for

247
00:15:00.070 --> 00:15:02.500
the gamer, make it better
for the developer, but in

248
00:15:02.500 --> 00:15:04.420
such a way that it
sounds like it's just everybody

249
00:15:04.420 --> 00:15:07.600
wins. There's no, it's just
a superior way. No one

250
00:15:07.600 --> 00:15:10.690
loses in your scenario. Well,
and it's really fascinating to

251
00:15:10.690 --> 00:15:13.600
me to think about it
beyond games too. Like I

252
00:15:13.600 --> 00:15:16.870
got a call from someone
in the medical industry the

253
00:15:16.870 --> 00:15:19.300
other day, who was saying
that this would really change

254
00:15:19.300 --> 00:15:23.680
the healthcare industry in terms
of sending x-ray scans, CT

255
00:15:23.680 --> 00:15:28.270
scans for prognosis videos, through
their network, all kinds of

256
00:15:28.270 --> 00:15:31.480
things. So, I mean, think
about the, the amount of

257
00:15:31.480 --> 00:15:36.910
ways that streaming image data
affects our lives through all

258
00:15:36.910 --> 00:15:39.880
industries. It's extremely important to
try to do it right.

259
00:15:39.940 --> 00:15:43.240
Well, have you thought of
that? I did that. No,

260
00:15:43.240 --> 00:15:47.140
no. Someone reached out to
me directly. I was surprised

261
00:15:47.140 --> 00:15:51.400
and I welcome. I welcome
input like that. Wow. Okay.

262
00:15:51.400 --> 00:15:54.190
So let's dig a little
bit into how the GPS

263
00:15:54.190 --> 00:15:56.770
work I hear about, you
know, a new GPU comes

264
00:15:56.770 --> 00:15:59.350
out every six to nine
months, and then I read

265
00:15:59.590 --> 00:16:01.840
on like a non to
tech, all these things I

266
00:16:01.840 --> 00:16:05.080
don't understand. And suddenly we're
in a scenario where it

267
00:16:05.080 --> 00:16:07.480
feels to me like the
video card, the $600 video,

268
00:16:07.490 --> 00:16:10.480
your card you can buy
is as a good of

269
00:16:10.480 --> 00:16:13.090
a CPU and a computer
as my computer is, it's

270
00:16:13.090 --> 00:16:16.060
got four gigs of Ram
and it's got, you know,

271
00:16:16.180 --> 00:16:19.030
eight processors is that card
that I put into my

272
00:16:19.030 --> 00:16:24.400
desktop, as powerful as my
desktop. It is very powerful.

273
00:16:24.400 --> 00:16:27.880
And what's fascinating about your
question is it's just powerful

274
00:16:27.880 --> 00:16:33.130
in a different way. So
one of the easiest ways

275
00:16:33.130 --> 00:16:36.430
to explain that is to
talk about multithreading and doing

276
00:16:36.430 --> 00:16:41.260
things in parallel. So on,
on your CPU, you don't

277
00:16:41.260 --> 00:16:46.180
have nearly amount as as
much ability to paralyze your

278
00:16:46.180 --> 00:16:49.570
work as you do on
your GPU. However, there are

279
00:16:49.570 --> 00:16:52.120
other advantages to your CPU.
You have a lot more

280
00:16:52.120 --> 00:16:56.380
memory. It's, it's structured in
a way that's better for,

281
00:16:56.560 --> 00:17:01.390
for certain processes. GP was
really good at doing simple

282
00:17:01.390 --> 00:17:05.830
actions all at the same
time. And that makes sense,

283
00:17:05.830 --> 00:17:09.700
right? Because when we process
graphics, we want to be

284
00:17:09.730 --> 00:17:13.810
doing operations on all the
pixels in our screen. Seriously,

285
00:17:13.810 --> 00:17:17.260
every pixel gets processed by
your graphics and we can't,

286
00:17:17.890 --> 00:17:21.070
we can't do that on
four threads. Think about how

287
00:17:21.070 --> 00:17:24.940
many pixels especially modern screens
have. So the GPU is

288
00:17:24.940 --> 00:17:30.010
able to highly highly parallelized
those operations. The downside is

289
00:17:30.040 --> 00:17:34.270
that as GPS have gotten
more powerful in some ways,

290
00:17:34.330 --> 00:17:39.430
memory is still a big
concern for GPS. Everything still

291
00:17:39.430 --> 00:17:42.760
starts on the CPU and
is sent over. And the

292
00:17:42.760 --> 00:17:47.620
GPU is, is, is not
great at dealing with large

293
00:17:47.650 --> 00:17:52.350
memory loads, which is partly
why I'm focusing on compression

294
00:17:52.350 --> 00:17:56.360
and doing that very well
as is so important. Why

295
00:17:56.360 --> 00:17:59.360
can't we just put 16
gigs of Ram on a

296
00:17:59.360 --> 00:18:01.670
video card and load the
whole game in or 32

297
00:18:01.670 --> 00:18:04.250
gigs isn't memory Cho cheap
now. I mean, they have

298
00:18:04.250 --> 00:18:06.260
these giant fans and they've
got all these processors and

299
00:18:06.260 --> 00:18:09.020
why not just throw, you
know, gigs and gigs of

300
00:18:09.020 --> 00:18:12.920
memory at the problem. That's
actually, And extremely good question.

301
00:18:12.920 --> 00:18:16.880
And it's up to the
GPU manufacturers. Maybe they should

302
00:18:17.060 --> 00:18:21.070
work on making that a
bigger priority, but I, I

303
00:18:21.080 --> 00:18:24.470
imagine I'm not a GPU
manufacturer, but I imagine that

304
00:18:24.590 --> 00:18:27.170
there are a lot of
things to consider. For instance,

305
00:18:28.040 --> 00:18:31.910
actually building memory into the
GPU might be harder than

306
00:18:32.210 --> 00:18:35.930
harder than we think. And
the other amount is the

307
00:18:35.930 --> 00:18:38.300
more memory you put, the
more you have to think

308
00:18:38.300 --> 00:18:42.620
about, well, if I just
make all of this memory

309
00:18:42.650 --> 00:18:47.750
equally, easily accessible, I'm going
to overall slow down my

310
00:18:47.750 --> 00:18:51.110
memory access. You know, the
concept of caches, for instance,

311
00:18:51.110 --> 00:18:54.440
I want some memory that's
really easily accessible, so they

312
00:18:54.440 --> 00:18:56.720
would have to, as they
put more memory on a

313
00:18:56.720 --> 00:18:59.540
GPU, they'd have to think
about those problems some more

314
00:18:59.540 --> 00:19:02.720
and design it in a
way. So that memory access

315
00:19:02.720 --> 00:19:06.050
is still really fast. It's,
it's a very complex issue,

316
00:19:06.050 --> 00:19:08.720
but I actually, I agree
that more memory should be

317
00:19:08.720 --> 00:19:11.060
on GPS and we should
be solving that problem as

318
00:19:11.060 --> 00:19:15.140
well. Yeah. So there's this
new Nvidia card called a

319
00:19:15.150 --> 00:19:18.830
10 80, which is, that's
like the one that we

320
00:19:18.830 --> 00:19:21.140
all want, right. It was
like 600 bucks though, or

321
00:19:21.140 --> 00:19:24.890
something it's ridiculous in the
list of all of the

322
00:19:24.920 --> 00:19:29.000
huge numbers of things that
it has. It has 160

323
00:19:29.030 --> 00:19:33.200
texture units. What does that
mean? That's a really good

324
00:19:33.200 --> 00:19:36.080
question. Then I need to,
I need to dig into

325
00:19:36.080 --> 00:19:38.600
the specs of the 10
80 and detail I haven't

326
00:19:38.600 --> 00:19:42.890
yet, but I imagine those
are the units that I

327
00:19:42.890 --> 00:19:47.240
was discussing that process texture
data in parallel. So it

328
00:19:47.240 --> 00:19:50.630
allows, it allows that GPU
to be even more parallel

329
00:19:50.750 --> 00:19:54.680
than the GPS that were
prior. Okay. So this is,

330
00:19:55.850 --> 00:19:58.490
this is a logical unit
that, that you can, that

331
00:19:58.490 --> 00:20:01.460
you use a texture mapping
unit for, for once you've

332
00:20:01.460 --> 00:20:04.340
given it once you've decompressed
your texture, it's the thing

333
00:20:04.340 --> 00:20:06.350
that rotates it and moves
it around and does stuff

334
00:20:06.350 --> 00:20:10.820
with it. Right? Exactly. Exactly.
Okay. So then they will

335
00:20:10.820 --> 00:20:15.950
take your, your trans coders
resulting textures and then spin

336
00:20:15.950 --> 00:20:17.600
them around and do stuff
with them and then put

337
00:20:17.600 --> 00:20:21.830
them on the floor. And
I walk on it. Okay.

338
00:20:22.130 --> 00:20:26.300
It's really fascinating. It's this
might be a tidbit that

339
00:20:26.300 --> 00:20:30.710
isn't isn't necessary, but GPS
work in a very tile

340
00:20:30.710 --> 00:20:33.530
based approach. So what they
do is when I access

341
00:20:33.530 --> 00:20:37.220
a pixel on your cobblestone
floor, for instance, I want

342
00:20:37.220 --> 00:20:40.280
to turn that pixel yellow
because the sun is shining

343
00:20:40.280 --> 00:20:43.640
on it. And it's really
important that dot cobblestone floor

344
00:20:43.640 --> 00:20:46.340
reflects the sun in a
good way. So I would

345
00:20:46.340 --> 00:20:50.260
grab the, but instead of
grabbing the entire image, I

346
00:20:50.260 --> 00:20:53.650
would just grab a small
tile of the image to

347
00:20:53.650 --> 00:20:56.470
work with. And that's one
of the things that these

348
00:20:56.470 --> 00:21:00.250
GPU formats and GPU hardware
architecture is really good at.

349
00:21:00.490 --> 00:21:04.020
And that helps with saving
memory is only accessing things

350
00:21:04.270 --> 00:21:08.230
in tiles, instead of always
needing to grab the entire

351
00:21:08.230 --> 00:21:13.440
image from memory. And now
your partner in crime here

352
00:21:13.440 --> 00:21:18.330
at binomial is a, is
rich Goldrich Gilda. And is

353
00:21:18.330 --> 00:21:20.310
the name, the name of
it is called, is crunch.

354
00:21:20.340 --> 00:21:23.580
Is that correct? Yeah. So
he previously worked on a

355
00:21:23.640 --> 00:21:26.970
free and open source library
to anyone can use now

356
00:21:27.450 --> 00:21:31.860
called the crunch that essentially
does everything I've. Well, most

357
00:21:31.860 --> 00:21:34.200
of the things I've been
telling you, our compressor will

358
00:21:34.200 --> 00:21:39.000
do. Hasn't been actively maintained
and worked on for a

359
00:21:39.000 --> 00:21:43.800
few years and we have
just been talking nonstop about

360
00:21:43.800 --> 00:21:46.380
all kinds of ways to
improve it. And also the

361
00:21:46.380 --> 00:21:50.250
fact that he only handles
certain GPU formats. For instance,

362
00:21:50.430 --> 00:21:53.730
if you wanted to make
an iPhone game, you couldn't

363
00:21:53.730 --> 00:21:57.390
use crunch because it doesn't
support that kind of GPU

364
00:21:57.390 --> 00:22:01.200
format. So we were thinking
it's really important to get

365
00:22:01.200 --> 00:22:04.890
this technology in the hands
of everyone. So if you're

366
00:22:04.890 --> 00:22:09.000
not on a windows PC,
you can still use this

367
00:22:09.000 --> 00:22:12.960
in your game. I think
that's extremely important. Okay. So

368
00:22:12.960 --> 00:22:16.470
then your, your encoder will
take the formats that the

369
00:22:16.470 --> 00:22:20.700
asset creator is making and
then hold them. And then

370
00:22:20.700 --> 00:22:24.060
the transcoder will detect and
figure out, or be told

371
00:22:24.060 --> 00:22:26.220
that you're on an Nvidia,
you're on an ATI, you're

372
00:22:26.220 --> 00:22:29.610
on an iPhone, you're on
a Nvidia shield or whatever,

373
00:22:29.880 --> 00:22:32.970
and do the right thing
is Exactly that's the basic

374
00:22:32.970 --> 00:22:36.570
idea behind it. And that
that'll make it so that

375
00:22:38.490 --> 00:22:42.450
you don't need to use
a text. It's not as

376
00:22:42.450 --> 00:22:46.220
good if you're developing, it's
an iPhone game. This, this

377
00:22:46.230 --> 00:22:50.490
really is for this particular
use case, you know, moving

378
00:22:50.490 --> 00:22:53.580
texture data and displaying on
the GPU. I actually don't

379
00:22:53.580 --> 00:22:56.910
know of a better solution.
And I don't, I don't

380
00:22:56.910 --> 00:23:01.050
want people who develop on
different platforms to miss out

381
00:23:01.050 --> 00:23:05.850
on it. So what's the,
what's the timeframe for this?

382
00:23:05.850 --> 00:23:08.070
Is this something that's like
a like doom, it'll be

383
00:23:08.130 --> 00:23:11.760
it'll, you'll release it when
it's done In general, but

384
00:23:11.760 --> 00:23:15.480
we do have constraints right
now. We're a company that's

385
00:23:15.480 --> 00:23:18.600
kind of bootstrapping ourselves and
funding ourselves with part time

386
00:23:18.600 --> 00:23:22.860
contract work. We do VR
and AR consulting and graphics

387
00:23:22.860 --> 00:23:27.090
consulting primarily focused on optimization.
Cause it's really similar to

388
00:23:27.090 --> 00:23:32.790
this compressor work, but that
takes up time. So we're

389
00:23:32.790 --> 00:23:36.810
thinking if we continue to
do part time contracts, maybe

390
00:23:36.810 --> 00:23:39.990
we'll have an initial build
end of year early next,

391
00:23:39.990 --> 00:23:43.140
but it depends on how
much time that takes. What

392
00:23:43.140 --> 00:23:46.520
we're working on now is
if companies need it early,

393
00:23:46.520 --> 00:23:49.430
or if people just want
to support development, we're taking

394
00:23:49.430 --> 00:23:52.880
preorders and that'll allow us
to actually focus on this

395
00:23:52.880 --> 00:23:56.560
and get it done sooner.
Very cool. So then people,

396
00:23:56.590 --> 00:23:59.680
people who are listening right
now and they know that

397
00:23:59.680 --> 00:24:02.170
someone is interested in a
technology like this can reach

398
00:24:02.170 --> 00:24:06.190
out to binomial.info and get
in touch with you. Absolutely.

399
00:24:06.220 --> 00:24:10.240
Absolutely. My email is Stephanie
binomial dye info. You can

400
00:24:10.240 --> 00:24:13.450
email me anytime. Okay. So
if you don't mind, I

401
00:24:13.450 --> 00:24:15.610
want to shift gears a
little bit and I want

402
00:24:15.610 --> 00:24:18.970
to understand the kind of
software engineering that you do

403
00:24:19.360 --> 00:24:21.610
juxtapose with the kind that
maybe I do, or maybe

404
00:24:21.610 --> 00:24:25.840
our listeners do, because we
all consider ourselves programmers, coders,

405
00:24:25.840 --> 00:24:30.400
hackers, engineers, but it seems
like, you know, in school,

406
00:24:30.970 --> 00:24:32.230
you know, I hung a
left and you hung a

407
00:24:32.230 --> 00:24:37.930
right, because this feels very
math, heavy, very, very, very

408
00:24:37.930 --> 00:24:41.500
technical. Well, it makes me
feel like as someone who's

409
00:24:41.500 --> 00:24:47.080
a web developer doing CSS
and doing HTML, like text

410
00:24:47.080 --> 00:24:50.590
boxes over data, just isn't
simply a as hard a

411
00:24:50.590 --> 00:24:52.660
problem is this, does this
mean that you have a

412
00:24:52.660 --> 00:24:56.650
background in advanced math? What's
fascinating about that is that

413
00:24:56.680 --> 00:24:58.240
rich and I work on
this together and we have

414
00:24:58.240 --> 00:25:02.380
very different backgrounds. I started
school in mathematics. I wanted

415
00:25:02.380 --> 00:25:05.620
to be a mathematician. So
math is definitely my thing.

416
00:25:05.650 --> 00:25:08.620
I love it. But rich
doesn't does not have a

417
00:25:08.620 --> 00:25:11.830
background in math at all
and has just kind of

418
00:25:11.950 --> 00:25:14.530
picked it up as he
goes and focused on making

419
00:25:14.530 --> 00:25:19.420
smart architecture decisions and, and
learning about algorithms and computer

420
00:25:19.420 --> 00:25:23.080
science instead. So there are
many, there, there are many

421
00:25:23.080 --> 00:25:26.080
routes you can go and
having mouth math is definitely

422
00:25:26.080 --> 00:25:29.320
very helpful, but it's certainly
not something you can't, you

423
00:25:29.320 --> 00:25:32.470
can't pick up as well.
And I actually encourage people

424
00:25:32.470 --> 00:25:35.380
to not, not be discouraged
by a lack of math

425
00:25:35.380 --> 00:25:40.840
background. Okay. So it is
not like impossible for someone

426
00:25:40.840 --> 00:25:42.940
to shift gears. If I
wanted to switch out of

427
00:25:42.940 --> 00:25:45.430
web it, you know, I
know I have a background

428
00:25:45.490 --> 00:25:48.880
somewhat in algorithms and I
can a reasonable amount of

429
00:25:48.940 --> 00:25:52.420
code smell. I can tell
when something smells bad. What

430
00:25:52.420 --> 00:25:54.610
levels of math do I
need to understand to start

431
00:25:54.610 --> 00:25:57.490
doing things in three D
space like this? That is

432
00:25:57.490 --> 00:26:00.880
an extremely good question. And
I would say basics and

433
00:26:00.880 --> 00:26:04.750
things like linear algebra are
very good because that's, that

434
00:26:04.750 --> 00:26:07.810
is the mathematics and moving
things in space, for instance.

435
00:26:08.140 --> 00:26:12.160
But that's, that's good advice
for three D graphics in

436
00:26:12.160 --> 00:26:17.800
general, but I would actually
say, look up books. Like

437
00:26:18.190 --> 00:26:20.590
I, I should look this
up after so I can

438
00:26:20.590 --> 00:26:23.200
post it, but there, there
are many good books focused

439
00:26:23.200 --> 00:26:27.520
around mathematics for game development,
but moreover I would not,

440
00:26:28.600 --> 00:26:31.390
not go into the field
until you had a math

441
00:26:31.390 --> 00:26:35.440
background. I would dive in
and start creating things because

442
00:26:35.440 --> 00:26:38.590
the chances are, you can
build a lot of really,

443
00:26:38.590 --> 00:26:44.070
really interesting things before having
a strong math background. Really

444
00:26:44.100 --> 00:26:47.010
That's, that's very encouraging because
I, I can imagine that

445
00:26:47.010 --> 00:26:50.040
there are people listening who
might say, well, shoot, you

446
00:26:50.040 --> 00:26:51.780
know, I got to go
to the Khan Academy now

447
00:26:51.780 --> 00:26:55.170
and I learned all about
real coordinate spaces. And then

448
00:26:55.170 --> 00:26:57.600
that means three years from
now, I'll be a graphics

449
00:26:57.600 --> 00:27:01.530
programmer you're saying start now
and do it all in

450
00:27:01.530 --> 00:27:04.760
parallel. I would highly encourage
you to start now. For

451
00:27:04.760 --> 00:27:08.840
instance, I got into the
field through open source and

452
00:27:08.840 --> 00:27:13.790
free graphics engines like cinder
and openFrameworks and people who

453
00:27:13.790 --> 00:27:16.400
use those graphics engines, which
are written in C plus

454
00:27:16.400 --> 00:27:19.850
plus and open geo really
low level stuff are typically

455
00:27:19.850 --> 00:27:23.330
artists. And it is so
inspiring to see them just

456
00:27:23.540 --> 00:27:26.330
pick up these libraries. And
if they don't know math,

457
00:27:26.330 --> 00:27:29.060
I'll Google it, but usually
they can still build some

458
00:27:29.060 --> 00:27:32.570
really amazing things. And you
can see more examples of

459
00:27:32.570 --> 00:27:34.790
artists using this kind of
low level of tech on

460
00:27:34.790 --> 00:27:41.360
websites like GLSL sandbox or
shader toy. It's, it's definitely

461
00:27:41.360 --> 00:27:44.360
something that I encourage everyone
to go into and you

462
00:27:44.360 --> 00:27:47.960
don't need, you don't necessarily
need years of school to

463
00:27:48.170 --> 00:27:52.160
pick up an example and
start playing with it. So

464
00:27:52.160 --> 00:27:56.450
you were a mathematician, you
discovered open source software. And

465
00:27:56.480 --> 00:27:58.370
did you pick up coding
or were you doing math

466
00:27:58.370 --> 00:28:02.840
and computer science simultaneous. I
started at school studying mathematics

467
00:28:02.870 --> 00:28:06.470
and I ended up switching
to computer science because I

468
00:28:06.470 --> 00:28:11.270
became really interested in visualizing
my mathematics and building tools.

469
00:28:11.900 --> 00:28:15.350
And I ended up going
into that way more than

470
00:28:15.590 --> 00:28:19.670
doing mathematics research itself. And
then my first job out

471
00:28:19.670 --> 00:28:24.440
of college was working at
an advertising firm that it

472
00:28:24.440 --> 00:28:28.130
was advertising, but it really
kind of built art installations

473
00:28:28.160 --> 00:28:30.950
around the companies we worked
for. For instance, they would

474
00:28:30.950 --> 00:28:36.200
design lobbies that had very
interesting digital sculptures in there.

475
00:28:36.470 --> 00:28:39.890
And while building those, we
had to get really low

476
00:28:39.890 --> 00:28:43.010
level because they were the
types of art installations that

477
00:28:43.010 --> 00:28:46.220
weren't done before. So we
had to make our own

478
00:28:46.220 --> 00:28:50.780
tools and, and that required
picking up low level graphics.

479
00:28:51.980 --> 00:28:53.930
You know, that gets me
thinking about what are the

480
00:28:53.930 --> 00:28:56.240
most impressive things that I've
seen in the real world,

481
00:28:56.240 --> 00:28:59.960
which is when they map
a projection onto an existing

482
00:28:59.960 --> 00:29:02.300
building and then they'll make
it, make the building blow

483
00:29:02.300 --> 00:29:06.380
up or whatever. Amazing it's,
it's fascinating. And it, to

484
00:29:06.380 --> 00:29:08.990
me, one of the most
inspiring things and why I

485
00:29:08.990 --> 00:29:12.800
like building graphics tools for
people is building a tool

486
00:29:12.800 --> 00:29:16.220
for it, for an artist
that has never used math

487
00:29:16.220 --> 00:29:19.820
or programming before, but who
has a very strong design

488
00:29:19.820 --> 00:29:22.220
sense and a very strong
art background and seeing what

489
00:29:22.220 --> 00:29:24.740
they're able to do with
this amazing new medium we

490
00:29:24.740 --> 00:29:27.890
have. And that's why I'm
always encouraging of people to

491
00:29:27.890 --> 00:29:31.490
try this out without needing
a strong math background or

492
00:29:31.490 --> 00:29:34.460
a strong computer science. It's
likely you can still build

493
00:29:34.460 --> 00:29:37.850
things. No. Are you a
gamer as well? Or are

494
00:29:37.850 --> 00:29:40.070
you, you spend more time
thinking about math than you

495
00:29:40.070 --> 00:29:43.240
do actually using product. I
spent a lot of time

496
00:29:43.240 --> 00:29:46.090
thinking about math, but I
do love games very much

497
00:29:46.090 --> 00:29:49.620
so. So you do, we
spend our time looking at

498
00:29:49.620 --> 00:29:52.140
your code on binomial, LLC.
I know that you have

499
00:29:52.140 --> 00:29:54.420
part of it open source
and part of it closed

500
00:29:54.420 --> 00:29:56.670
source, right? You're going to
make the encoder closed and

501
00:29:56.670 --> 00:29:58.980
that's how you'll make your
money. And then the encoder

502
00:29:58.980 --> 00:30:01.140
will be open source and
everyone can learn from it.

503
00:30:01.650 --> 00:30:05.970
Absolutely. So our transcoder will
be open source. The encoder

504
00:30:05.970 --> 00:30:08.550
will be closed source, but
for now you can go

505
00:30:08.550 --> 00:30:12.330
to binomial. LLC is get,
get hub and check out

506
00:30:12.330 --> 00:30:16.440
crutch Rich's crunch library that
is entirely open source, including

507
00:30:16.440 --> 00:30:20.370
the encoder. And it's a
great way to see, see

508
00:30:20.370 --> 00:30:24.000
something similar to what we'll
be making. Very cool. Well,

509
00:30:24.000 --> 00:30:25.920
I really appreciate your time
and thanks so much for

510
00:30:25.920 --> 00:30:29.400
talking with me today. Nice
to meet you. Nice to

511
00:30:29.400 --> 00:30:32.400
meet you too. This has
been another episode of Hansel

512
00:30:32.400 --> 00:30:34.320
minutes and we'll see you
again next week.

