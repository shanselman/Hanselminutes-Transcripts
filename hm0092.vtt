WEBVTT FILE

1
00:00:04.920 --> 00:00:16.460
<inaudible> From Hanselman it's dot
com. It's Hansel minutes, a

2
00:00:16.470 --> 00:00:20.810
weekly discussion with web developer
and technologist Scott Hanselman hosted

3
00:00:20.810 --> 00:00:25.970
by Carl Franklin. This is Lawrence Ryan
announcing show number 92 recorded

4
00:00:25.970 --> 00:00:31.970
live Monday, December 10th, 2007. Support for
Hanselman it's is provided by

5
00:00:32.270 --> 00:00:36.140
Tellerik already controls the most
comprehensive suite of components for

6
00:00:36.140 --> 00:00:46.550
windows forums and asp.net web
applications. online@wwwdottelerik.com. Support is also

7
00:00:46.550 --> 00:00:50.600
provided by dotnet developers journal.
The world's leading dotnet developer

8
00:00:50.600 --> 00:00:57.440
magazine online at www dot
<inaudible> dot com. In this

9
00:00:57.440 --> 00:01:00.410
episode, Scott talks about the
past present and future of

10
00:01:00.410 --> 00:01:04.370
visual basic with principal VB
architect, Paul Vick, and BB

11
00:01:04.370 --> 00:01:13.460
team program manager. Paul, you
can have it. Hi, this

12
00:01:13.460 --> 00:01:15.380
is Scott Hanselman, and this
is another episode of Hansel

13
00:01:15.380 --> 00:01:17.300
minutes, and I'm sitting here
in building 41 in the

14
00:01:17.300 --> 00:01:20.990
Microsoft campus. And I am
privileged to talk to Paul.

15
00:01:20.990 --> 00:01:24.260
<inaudible> a lead program manager
on the VB team and

16
00:01:24.290 --> 00:01:26.990
pelvic architect on the VB
team. Thanks guys for taking

17
00:01:26.990 --> 00:01:30.980
the time to talk to
me. Thanks. Thanks. So I've

18
00:01:30.980 --> 00:01:32.840
got this, this idea in
my mind, this idea of

19
00:01:32.840 --> 00:01:34.760
a blog post I'm working
on writing it, and it

20
00:01:34.790 --> 00:01:36.380
may actually come out by
the time that I have

21
00:01:37.460 --> 00:01:39.770
put this on this podcast
up on the net. And

22
00:01:40.080 --> 00:01:43.190
the title is, is rooting
for visual basic like rooting

23
00:01:43.190 --> 00:01:45.680
for the red Sox, because
it seemed to me like,

24
00:01:45.680 --> 00:01:46.820
I mean, I started out
as a VB guy. I

25
00:01:46.820 --> 00:01:48.950
think everyone, ultimately at some
point in their life was

26
00:01:48.950 --> 00:01:51.680
a VB person. You know,
the red Sox, people spent

27
00:01:51.710 --> 00:01:54.350
80 years kind of suffering
and you know, they love

28
00:01:54.360 --> 00:01:57.080
their team and it wasn't
winning it. Wasn't winning. And

29
00:01:57.080 --> 00:01:59.840
now there's this new generation
who discovered the red Sox

30
00:01:59.840 --> 00:02:03.290
when they were winning. So
now it's suddenly easy. And

31
00:02:03.290 --> 00:02:06.110
then the news came out
recently that VB is the

32
00:02:06.560 --> 00:02:09.110
number one.net language. How do
you, how would you describe

33
00:02:09.110 --> 00:02:12.050
this news? Sure. Yeah, I
just say that VB is

34
00:02:12.050 --> 00:02:15.200
the most used.net language and
the most used Microsoft language.

35
00:02:15.230 --> 00:02:18.080
So that's, that's kind of
a title we had a

36
00:02:18.080 --> 00:02:19.910
long time ago and it's
one that, you know, we're

37
00:02:19.910 --> 00:02:21.800
looking at the data again.
We see that again. And

38
00:02:21.800 --> 00:02:23.060
how do you measure something
like that? How do you

39
00:02:23.060 --> 00:02:24.590
say, you know, you know,
when we, when we were

40
00:02:24.610 --> 00:02:26.660
saying, we're awesome, we're the
best you based this on

41
00:02:26.660 --> 00:02:29.090
what metric? Yeah. We have
a few different metrics and

42
00:02:29.090 --> 00:02:32.330
proxies for the metric. So
we run our own survey,

43
00:02:33.440 --> 00:02:35.420
which we call DTS. And
I can't talk too much

44
00:02:35.420 --> 00:02:37.640
about that. Sure. But that's
really what we use to

45
00:02:37.640 --> 00:02:40.760
run the business. And then
you can look at some

46
00:02:40.940 --> 00:02:43.310
external things like you could
look at the Forrester research

47
00:02:43.340 --> 00:02:46.700
that was put out there
in 2007, also in 2005,

48
00:02:47.120 --> 00:02:50.060
there's some good indicators there.
Sometimes we look at our

49
00:02:50.060 --> 00:02:53.240
express downloads, right? So we
have VB express and kind

50
00:02:53.240 --> 00:02:55.940
of the whole express line
that went out there. We

51
00:02:55.940 --> 00:02:59.770
can measure downloads and ultra
registrations downloads of tell us,

52
00:02:59.770 --> 00:03:02.290
you know, what's the initial
interest. And then registrations tell

53
00:03:02.290 --> 00:03:04.960
us how many people were
interested in the product to

54
00:03:04.960 --> 00:03:06.340
keep using it. And give
us a little bit more

55
00:03:06.340 --> 00:03:08.410
information. So it's a kind
of conversion. They allowed to

56
00:03:08.410 --> 00:03:10.330
use it for a number
of period. Exactly. Right. It's

57
00:03:10.330 --> 00:03:12.100
kind of a conversion rate.
So I can tell you

58
00:03:12.100 --> 00:03:15.040
about the express numbers, VBS
actually in the first place

59
00:03:16.180 --> 00:03:19.120
and actually in second place
a C plus plus, which

60
00:03:19.120 --> 00:03:21.700
would surprise us plus. Yeah.
Which surprised a lot of

61
00:03:21.700 --> 00:03:25.540
people. Wow. And that's about,
let's say 20% kind of

62
00:03:25.540 --> 00:03:28.240
lower number in downloads. Okay.
So that just gives you

63
00:03:28.240 --> 00:03:30.760
some facts and you know,
lets us look at some

64
00:03:30.760 --> 00:03:32.920
of the momentum. You know,
obviously there's a lot of

65
00:03:32.920 --> 00:03:34.930
other indicators we could be
looking at this surprise you

66
00:03:34.930 --> 00:03:37.090
guys. It surprised me. It
surprised me to the point

67
00:03:37.090 --> 00:03:42.970
where I'm still don't believe
you. Okay. I'm, I'm really

68
00:03:42.970 --> 00:03:47.200
not surprised because you know,
we talked to enthusiastic and

69
00:03:47.200 --> 00:03:50.140
learning programmers and really just
the masses of pro developers.

70
00:03:50.440 --> 00:03:52.390
We, you know, that's when
you're really speaking to the

71
00:03:52.390 --> 00:03:56.830
VB audience. So my red
Sox analogy that suddenly it's

72
00:03:56.830 --> 00:03:59.050
easy to root for VB.
I wonder if the old

73
00:03:59.050 --> 00:04:01.360
timers have some of that,
you know, back when VB

74
00:04:01.360 --> 00:04:03.970
wasn't popular, we stayed with
you. We fought and fought

75
00:04:03.970 --> 00:04:05.530
and fought and said that
this was the language. This

76
00:04:05.530 --> 00:04:08.260
was the language. And now
suddenly you're number one. Yep.

77
00:04:08.770 --> 00:04:10.300
That's pretty amazing. So how
long have you been on

78
00:04:10.300 --> 00:04:12.640
the team? I've been on
the team for about almost

79
00:04:12.640 --> 00:04:15.340
eight years. Wow. So forever.
And I even, I saw,

80
00:04:15.370 --> 00:04:17.110
you know, I saw the
ball go under Buckner's legs

81
00:04:17.110 --> 00:04:18.820
too, so I can definitely
relate to it. So you

82
00:04:18.820 --> 00:04:21.250
understand where you're coming from?
That's good. I feel better

83
00:04:21.250 --> 00:04:23.990
about my analogy now. So
what, what is VB written

84
00:04:23.990 --> 00:04:29.850
in? I'll pass this up
to pelvic. Okay. So most

85
00:04:29.850 --> 00:04:32.160
of the compiler is written
in C plus plus, well,

86
00:04:32.160 --> 00:04:34.320
actually it's really more C
but when we use the

87
00:04:34.320 --> 00:04:37.140
C plus plus compiler, we
use mostly, mostly sort of

88
00:04:37.140 --> 00:04:39.120
standard C with a little
bit of C plus plus

89
00:04:39.300 --> 00:04:42.240
features thrown in there. Although
there is a chunk of

90
00:04:42.240 --> 00:04:44.970
it, the, the runtime component
is all written in visual

91
00:04:44.970 --> 00:04:49.080
basic itself. So all the
late binding and language helpers

92
00:04:49.080 --> 00:04:52.320
and all of the language,
all the library functions are

93
00:04:52.320 --> 00:04:57.480
all written in VB. I
remember when visual basic.net came

94
00:04:57.480 --> 00:05:00.780
out there was this kind
of uncomfortable transition. People were,

95
00:05:00.980 --> 00:05:04.260
were feeling like, is this
really visual basic, or is

96
00:05:04.260 --> 00:05:07.230
this some new thing that
we've added.net to? Do you

97
00:05:07.230 --> 00:05:09.390
feel that those kinds of
that painful time has passed

98
00:05:09.810 --> 00:05:11.400
a transition? Yeah. Yeah. I
mean, I feel like we're

99
00:05:11.400 --> 00:05:14.850
definitely past that. I mean,
I think that a lot

100
00:05:14.850 --> 00:05:18.330
of it was even more
than the, the language itself.

101
00:05:18.330 --> 00:05:20.910
It was the transition to
a whole new framework. I

102
00:05:20.910 --> 00:05:23.160
mean, basically, you know, the
whole framework was changed out

103
00:05:23.160 --> 00:05:25.380
from under people. And I
think that now that we've

104
00:05:25.380 --> 00:05:28.260
had a, but now we've
had geez, almost six years

105
00:05:28.260 --> 00:05:31.470
of stability with that. It's
like, you know, people, I

106
00:05:31.470 --> 00:05:33.330
think people, a lot of
people have made the transition.

107
00:05:33.330 --> 00:05:38.250
There's definitely some stragglers that,
you know, have really big

108
00:05:38.250 --> 00:05:41.130
code bases or whatever for
whatever reason, but we're definitely

109
00:05:41.130 --> 00:05:43.710
seeing good migration. Right. Remember
when, when it first came

110
00:05:43.710 --> 00:05:46.020
out, the big question was
about speed. And I think

111
00:05:46.020 --> 00:05:49.080
people spend at least 18
months just panicking and, and

112
00:05:49.080 --> 00:05:51.540
writing four loops with a
million, four, one, two a

113
00:05:51.540 --> 00:05:54.090
million, well clearly VBS faster.
And it just kind of

114
00:05:54.090 --> 00:05:58.310
ridiculous benchmarks. Right. Ultimately I
think it was reflector for

115
00:05:58.310 --> 00:06:00.590
me that just proved the
point when I went in

116
00:06:00.590 --> 00:06:02.660
and just saw that, well,
you know, I was ill.

117
00:06:02.720 --> 00:06:05.740
Right. Right. Exactly. And it's,
I think too, like early

118
00:06:05.740 --> 00:06:08.470
on, there were a lot
of issues with, you know,

119
00:06:08.470 --> 00:06:12.580
comparisons between various languages where,
you know, we, if you

120
00:06:12.580 --> 00:06:15.670
take advantage of certain VB
features, you're going to, you

121
00:06:15.670 --> 00:06:18.220
know, sacrifice some performance. But
so it was really like,

122
00:06:18.220 --> 00:06:19.450
you know, once you get
down to the apples to

123
00:06:19.450 --> 00:06:21.250
apples, you know, the part
of the issue is that

124
00:06:21.250 --> 00:06:23.080
we ended up doing a
lot of things for users

125
00:06:23.440 --> 00:06:25.900
and they don't even realize
they're taking advantage of language

126
00:06:25.900 --> 00:06:28.660
features that don't exist are
harder than other languages. I

127
00:06:28.660 --> 00:06:30.250
can see it. And that's
where for me, it gets

128
00:06:30.250 --> 00:06:34.270
really interesting. Once we move
past the, the syntactic sugar

129
00:06:34.270 --> 00:06:36.460
discussions and we move past
the it's all eye on

130
00:06:36.460 --> 00:06:40.120
the perf, we understand that
these are C-sharp VB, whatever

131
00:06:40.120 --> 00:06:44.680
these are all first-class languages,
but from a language designer

132
00:06:44.680 --> 00:06:47.290
perspective, like looking at VB
as an at C-sharp as

133
00:06:47.290 --> 00:06:50.230
an example, when the using
statement came out and there

134
00:06:50.230 --> 00:06:53.440
was this big controversy that
this is just a really

135
00:06:53.440 --> 00:06:56.770
attractive syntax over try catch
finally. And people are like,

136
00:06:56.770 --> 00:06:59.200
well, that's ties the language
to the platform too much.

137
00:06:59.230 --> 00:07:01.090
It's not a pure language.
You're breaking all sorts of

138
00:07:01.090 --> 00:07:04.330
rules. And then once that
the purist moved past that

139
00:07:04.330 --> 00:07:07.240
it seemed like some really
cool innovation happened. And it

140
00:07:07.240 --> 00:07:09.940
seems to me like vb.net,
what I think of is

141
00:07:09.940 --> 00:07:11.860
kind of one O and
C sharp one, Oh, were

142
00:07:11.980 --> 00:07:16.540
really peers. They were, they
offered different flavors of the

143
00:07:16.540 --> 00:07:19.960
same thing. But then with
like the XML support and

144
00:07:19.960 --> 00:07:22.930
VB VB nine, and some
of the C-sharp throw stuff,

145
00:07:23.020 --> 00:07:25.860
it seems like you guys
are taking risks. Right. Right.

146
00:07:25.860 --> 00:07:28.870
Exactly. We kind of, well,
you know, especially for VB,

147
00:07:28.870 --> 00:07:30.790
I mean like, cause yeah,
I mean, part of the

148
00:07:30.790 --> 00:07:33.760
reason why I won, I
was so similar to, or,

149
00:07:33.760 --> 00:07:36.700
you know, our set version
seven was similar to, they

150
00:07:36.700 --> 00:07:38.380
want to see sharp. Was
it, you know, we were,

151
00:07:38.800 --> 00:07:42.400
I mean, we really started
behind the eight ball in

152
00:07:42.420 --> 00:07:44.410
a lot of ways. I
mean, because, you know, not

153
00:07:44.410 --> 00:07:46.480
only, I mean, like C-sharp
kind of had the advantage

154
00:07:46.480 --> 00:07:48.940
of starting from a blank
slate, whereas we, you know,

155
00:07:49.240 --> 00:07:52.300
had to think about language
compatibility and, and all that

156
00:07:52.300 --> 00:07:54.100
kind of stuff and, and
sort of carrying it forward.

157
00:07:54.130 --> 00:07:56.380
Yeah. Make sure it's their
work. So use your language.

158
00:07:57.160 --> 00:07:58.630
And so, you know, we've
kind of, you know, we

159
00:07:58.630 --> 00:08:01.000
spent seven, Oh, and to
some degree, eight O catching

160
00:08:01.000 --> 00:08:03.330
up with, you know, what's
going on, you know, the,

161
00:08:03.330 --> 00:08:05.200
the features like there were
things we didn't get to

162
00:08:05.200 --> 00:08:09.070
ship in seven. Oh, we
wanted to, that we wanted

163
00:08:09.070 --> 00:08:11.110
to, when we shipped to
NATO. So with, with the

164
00:08:11.110 --> 00:08:13.240
latest version, we were starting
to get to that point

165
00:08:13.240 --> 00:08:15.040
where it's like, Hey, you
know, we actually have time

166
00:08:15.040 --> 00:08:18.430
to do features like great
features, like excellent literals where

167
00:08:18.430 --> 00:08:20.860
it's like, you know, we
can do something different. And,

168
00:08:21.490 --> 00:08:25.510
and also, I mean, we've
also been seeing kind of,

169
00:08:26.020 --> 00:08:28.180
not just externally, but internally
a lot of interest in

170
00:08:28.180 --> 00:08:33.640
partnering with, you know, working
with VB language. So like,

171
00:08:33.640 --> 00:08:35.860
you know, for example, the
XML literal stuff actually was

172
00:08:35.860 --> 00:08:38.560
a partnership with the team
over in the SQL organization

173
00:08:38.860 --> 00:08:41.830
that were interested in having
better support for eczema on

174
00:08:41.830 --> 00:08:43.810
the platform. So Let's talk
about that for a minute

175
00:08:43.810 --> 00:08:47.890
because I find that almost
creepy because I think people

176
00:08:47.890 --> 00:08:50.290
have the same experience with
link. It's just like this

177
00:08:50.290 --> 00:08:53.350
really should be an inside
of quotes. You know? And

178
00:08:53.360 --> 00:08:55.780
I wrote up a paper
at me and years ago,

179
00:08:55.870 --> 00:08:58.170
I called it a caste
system for API has been

180
00:08:58.170 --> 00:09:00.410
talked about third class, second
class, and first class API

181
00:09:00.410 --> 00:09:02.600
APIs. And the idea that
so much of our, our,

182
00:09:02.600 --> 00:09:05.790
our world lives inside of
these tunneled strings, you know,

183
00:09:05.790 --> 00:09:08.940
it would be X path
or rejects or SQL, and

184
00:09:08.940 --> 00:09:11.370
then suddenly to see them
outside of those strings is

185
00:09:11.370 --> 00:09:14.370
really kind of disconcerting. And
it makes me wonder how,

186
00:09:14.400 --> 00:09:16.770
how would they do that?
How do they get IntelliSense

187
00:09:16.770 --> 00:09:18.870
to work? And what's the
relationship between IntelliSense and the

188
00:09:18.870 --> 00:09:22.440
compiler and how much voodoo
did the compiler have to

189
00:09:22.440 --> 00:09:25.370
do to understand that? Well,
it was, I mean, it

190
00:09:25.370 --> 00:09:27.110
was a fair amount of
work. Like, I mean, we

191
00:09:27.110 --> 00:09:30.680
definitely had to build, you
know, native XML, the, you

192
00:09:30.680 --> 00:09:33.800
know, same old XML parsing
and scanning technology that every,

193
00:09:33.800 --> 00:09:36.770
you know, XML processor has
to, but we actually did

194
00:09:36.770 --> 00:09:39.590
get a chance to like,
we leveraged as much code.

195
00:09:39.590 --> 00:09:42.350
So like a lot of
the XML and tell us

196
00:09:42.350 --> 00:09:46.130
it's work was actually takes
advantage of the work that

197
00:09:46.130 --> 00:09:48.830
the X, like there's an
XML editor in visual studio.

198
00:09:48.890 --> 00:09:51.170
So we just reused a
lot of that code to

199
00:09:51.170 --> 00:09:54.650
actually do a lot of
the UI work itself. So,

200
00:09:55.160 --> 00:09:57.440
so we're definitely going to
take, you know, stealing what

201
00:09:57.680 --> 00:10:00.710
any code and reusing it
that we can. So how

202
00:10:00.710 --> 00:10:02.390
does an idea like that
happen? And I mean, help

203
00:10:02.390 --> 00:10:04.250
me understand, you guys have
both been here long enough

204
00:10:04.250 --> 00:10:06.500
that you can say that
there was a meeting, right?

205
00:10:06.800 --> 00:10:09.590
Tell me about the Tuesday
when one of you guys

206
00:10:09.590 --> 00:10:12.320
or whoever who's not here
today said, dude, what if

207
00:10:12.320 --> 00:10:15.680
we, what was that meeting
like? Well, excellent literal is

208
00:10:15.680 --> 00:10:17.930
a really interesting, because it
actually was like, it's like

209
00:10:17.930 --> 00:10:20.750
kind of a very long,
it's amazing how longterm process,

210
00:10:20.750 --> 00:10:25.430
because actually it started out
being prototyped originally and something

211
00:10:25.430 --> 00:10:31.580
called <inaudible>, which was a
prototype C-sharp compiler. And Eric Meyer,

212
00:10:31.580 --> 00:10:34.580
who's an architect here. He
prototyped that and he really

213
00:10:34.580 --> 00:10:36.440
let you know, so he
was pushing that idea and

214
00:10:36.440 --> 00:10:38.840
he actually came to us
and said, you know, I

215
00:10:38.840 --> 00:10:40.520
really think this is a
great idea. We should definitely

216
00:10:40.520 --> 00:10:43.550
do it. And he volunteered
some resources even to help

217
00:10:43.550 --> 00:10:46.310
out. And so they actually
did it, they did it,

218
00:10:46.340 --> 00:10:49.730
they got our compiler code
base and they prototyped it.

219
00:10:49.730 --> 00:10:52.100
And so then they did
a proof of concept. And

220
00:10:52.100 --> 00:10:54.290
then yeah. Then there was
that kind of, there was

221
00:10:54.290 --> 00:10:55.820
the meeting where we kind
of sat down and go,

222
00:10:55.820 --> 00:10:59.210
okay, you know, what do
we think? And we decided

223
00:10:59.210 --> 00:11:01.070
to say, yeah, this actually
looks, they did a really

224
00:11:01.070 --> 00:11:03.410
compelling demo. And it's like,
yeah, this is great. And

225
00:11:03.410 --> 00:11:07.520
so, I mean, really in
some ways it's like, you

226
00:11:07.520 --> 00:11:09.530
know, there's like 10 or
15 good ideas in language

227
00:11:09.530 --> 00:11:12.230
design that we just keep
recycling, you know, over time,

228
00:11:12.590 --> 00:11:16.010
ultimately this will become list.
Exactly. So it's sort of

229
00:11:16.010 --> 00:11:19.850
like, you know, it's really
looking at, you know, having

230
00:11:19.850 --> 00:11:22.160
people prototype and looking at
these features and then, then

231
00:11:22.250 --> 00:11:24.290
we sort of, okay, what
are we gonna, what are

232
00:11:24.290 --> 00:11:26.360
we going to absorb this
time? So How do you

233
00:11:26.360 --> 00:11:29.900
guys balance productivity like raw
productivity and be kind of

234
00:11:29.900 --> 00:11:33.260
like the goal is to
get to ultimate expressiveness in

235
00:11:33.260 --> 00:11:36.650
zero lines of code with
purity in the, in the

236
00:11:36.650 --> 00:11:38.360
computer science kind of sense
where you kind of say,

237
00:11:38.390 --> 00:11:40.460
you know, what would the
current again, and Richie be

238
00:11:40.460 --> 00:11:42.170
proud of us, those kinds
of things. I mean, I

239
00:11:42.170 --> 00:11:43.760
assume those thoughts are in
the back of your mind.

240
00:11:44.180 --> 00:11:46.340
Yeah. Although it's funny, like,
you know, because like with

241
00:11:46.340 --> 00:11:48.850
the C sharp tape, I
mean, coming from the Kernaghan

242
00:11:48.870 --> 00:11:51.680
Richie, you know, lineage, I
think they're much more concerned

243
00:11:51.680 --> 00:11:54.280
about purity than I basic
is probably one of the

244
00:11:54.280 --> 00:11:57.560
most impure languages over the,
you know, and over the

245
00:11:58.060 --> 00:12:01.570
decades. But yeah. I mean,
I think that I, and

246
00:12:01.570 --> 00:12:04.000
I think that is like
something that we explicitly, you

247
00:12:04.000 --> 00:12:09.220
know, we're Def we definitely
prioritize productivity over purity, you

248
00:12:09.220 --> 00:12:10.810
know? I mean, there were
certainly people who look at

249
00:12:10.810 --> 00:12:13.000
the XML literal features and
go, ah, you know, how

250
00:12:13.000 --> 00:12:14.890
could you bake this into
your language? And what affects

251
00:12:14.890 --> 00:12:18.130
ML ends up not being,
you know, useful in the,

252
00:12:18.130 --> 00:12:20.290
you know, 20 years from
now. And it's like, Oh

253
00:12:20.290 --> 00:12:22.930
yeah. I mean, that's, that's
a risk, but right now

254
00:12:22.930 --> 00:12:25.140
it really, if it's going
to help people where we're

255
00:12:25.150 --> 00:12:27.510
going to go for it.
So those discussions did come

256
00:12:27.510 --> 00:12:29.670
up. I mean, somebody who
said that this is, this

257
00:12:29.670 --> 00:12:32.280
is horrific. We can't do
that. Yeah. Not so much

258
00:12:32.280 --> 00:12:33.870
on the VB team, but
definitely in some of the

259
00:12:33.870 --> 00:12:37.380
discussions outside or, you know,
when we talked with the

260
00:12:37.380 --> 00:12:39.660
C-sharp team about what we're
doing, you know, that was

261
00:12:39.810 --> 00:12:41.490
the other people on their
team that had that. Yeah.

262
00:12:41.770 --> 00:12:43.950
Some nice kind of a
back and forth. I know

263
00:12:43.950 --> 00:12:45.990
that the word in my,
in my eight weeks at

264
00:12:45.990 --> 00:12:47.610
Microsoft, now the word that
keeps coming up is this

265
00:12:47.610 --> 00:12:50.670
coopertition. Yep. I mean, you're
working together, but you're competing

266
00:12:50.690 --> 00:12:52.740
and that this is supposed
to move the ball forward.

267
00:12:53.130 --> 00:12:56.130
Yeah. It's a funny situation
because there definitely is that,

268
00:12:57.060 --> 00:13:00.690
you know, like we collaborate
on all kinds of things

269
00:13:00.720 --> 00:13:02.430
and we need, you know,
and yet at the same

270
00:13:02.430 --> 00:13:05.280
time, there's always that kind
of sideways looking at, okay,

271
00:13:05.280 --> 00:13:06.990
what are those guys doing?
What are we doing? You

272
00:13:06.990 --> 00:13:10.710
know, like, you know, trying
to one up each other.

273
00:13:10.710 --> 00:13:12.450
And that, I think that
is healthy in a lot

274
00:13:12.450 --> 00:13:14.640
of ways. Cause it definitely
pushes each team to be

275
00:13:14.640 --> 00:13:16.920
a lot better than it
might've been on its own

276
00:13:16.920 --> 00:13:19.560
if it had the whole
place to itself. So, so

277
00:13:19.560 --> 00:13:22.410
what is VBX and how
does the DLR that is

278
00:13:22.410 --> 00:13:24.810
kind of emerging? Everyone's talking
about iron this and iron

279
00:13:24.810 --> 00:13:29.030
that, you know, are Ruby
iron list by Python and

280
00:13:29.040 --> 00:13:31.800
the DLR is this, this
library that's going to help

281
00:13:31.800 --> 00:13:35.160
her library. That makes, I
like to say it makes

282
00:13:35.160 --> 00:13:38.610
dynamic method, even that much
more interesting. Right. Right. What

283
00:13:38.610 --> 00:13:41.550
does VBX, what am I
saying it, right. Yeah. No,

284
00:13:41.550 --> 00:13:43.260
that's, that's, you know, that's
a code name. We were,

285
00:13:43.260 --> 00:13:45.420
you were using for sort
of a, well, it started

286
00:13:45.420 --> 00:13:48.690
out as a prototyping of
how would we support a

287
00:13:48.720 --> 00:13:51.990
VB on top of the
DLR. And so we've been

288
00:13:51.990 --> 00:13:54.060
prototyping that for a while
now. Actually we don't have,

289
00:13:54.060 --> 00:13:55.710
we were hoping to have
something if we were going

290
00:13:55.710 --> 00:13:57.690
to have a PDC, but
we ended up having one,

291
00:13:59.100 --> 00:14:01.890
but basically, you know, what
we're interested in is sort

292
00:14:01.890 --> 00:14:04.890
of the, the two, well,
the shorter two major ideas

293
00:14:04.890 --> 00:14:07.320
of the DLR. Well three,
actually three major ideas. One

294
00:14:07.320 --> 00:14:10.260
is, you know, the, the
idea of being, making languages,

295
00:14:10.260 --> 00:14:13.500
host stubble, and, you know,
running them outside of visual

296
00:14:13.500 --> 00:14:16.290
studio. And that we're very
interested in. I mean, we

297
00:14:16.290 --> 00:14:17.760
kind of have a long
history of that with like

298
00:14:17.760 --> 00:14:21.090
VB script. Yeah. Because I
think everyone's wondering is, is

299
00:14:21.090 --> 00:14:23.310
it time for BB to
jump into office and to

300
00:14:23.310 --> 00:14:25.080
jump into the macros? And
if I'm going to start

301
00:14:25.080 --> 00:14:27.870
using, if I want to
exploit all of that VBA

302
00:14:27.870 --> 00:14:30.210
knowledge out there, and there's
just massive amounts of it,

303
00:14:30.360 --> 00:14:33.870
right. VB, vb.net should be
that language. Right. And so,

304
00:14:33.870 --> 00:14:35.280
you know, the question is
how do we get there

305
00:14:35.280 --> 00:14:38.370
technologically? And the DLR is
very interested in that. And

306
00:14:38.370 --> 00:14:41.010
the other thing is, is
the dynamic language aspect of

307
00:14:41.010 --> 00:14:44.700
it. And, you know, we're
kind of a, we have

308
00:14:44.700 --> 00:14:47.400
dynamic aspects. We're not a
dynamic language. Cause I th

309
00:14:47.580 --> 00:14:49.800
I wouldn't say we're fully
dynamic language. Cause there are

310
00:14:49.800 --> 00:14:52.940
a lot of things that
cannot be done at runtime,

311
00:14:54.050 --> 00:14:55.850
but we have a lot
of dynamic aspects. And so

312
00:14:55.850 --> 00:14:58.040
the other interesting thing is,
you know, where can we

313
00:14:58.040 --> 00:15:01.110
absorb those ideas? Cause I
mean, a lot of, there

314
00:15:01.110 --> 00:15:03.650
are a lot of wonderful
ideas and Ruby and Python

315
00:15:03.650 --> 00:15:06.020
and it's like, you know,
this is, you know, I

316
00:15:06.020 --> 00:15:08.270
spent a lot of time.
In fact, yesterday I spent

317
00:15:08.330 --> 00:15:10.370
two hours sitting in a
room with Jim Laguna and

318
00:15:11.060 --> 00:15:13.400
the architect on the DLR,
you know, talking about just

319
00:15:13.400 --> 00:15:15.800
these kinds of issues. Like,
you know, what, what kind

320
00:15:15.800 --> 00:15:19.070
of language features do we
need? And also, and then

321
00:15:19.070 --> 00:15:20.540
we also are spending a
lot of time talking about

322
00:15:20.660 --> 00:15:23.450
technologically, how we get there.
So right now kind of

323
00:15:23.450 --> 00:15:26.120
VBX is our code name
for what we've been prototyping.

324
00:15:26.120 --> 00:15:29.750
But now we're now that
we're and the end game

325
00:15:29.750 --> 00:15:32.540
for orcas. Sure, sure. We're
like figuring out how we

326
00:15:32.540 --> 00:15:34.480
actually bring that to a
product. Well, you know, one

327
00:15:34.480 --> 00:15:36.310
of the things that I've
been learning and I gave

328
00:15:36.310 --> 00:15:39.280
a talk on the MVC
in Vegas last week, that

329
00:15:39.730 --> 00:15:41.920
it seems that this is
nice, comfortable sign wave that

330
00:15:41.920 --> 00:15:45.010
we're settling into where it's
like big, giant release and

331
00:15:45.010 --> 00:15:47.230
then little point things that
we can, can make things

332
00:15:47.230 --> 00:15:49.900
better. I mean, a lot
of cool ad-ons came in

333
00:15:49.900 --> 00:15:53.470
after visual studio 2005 that
made it better, whether it

334
00:15:53.470 --> 00:15:56.260
be in the form of
project templates or iron Python

335
00:15:56.260 --> 00:15:58.960
integration with the thing. So
I don't think that we're

336
00:15:59.050 --> 00:16:01.480
quote unquote stuck with 2008
because there's going to be

337
00:16:01.480 --> 00:16:04.270
like two years of really
cool stuff. So I assume

338
00:16:04.270 --> 00:16:06.280
whether it be a web
download or a service pack

339
00:16:06.280 --> 00:16:09.340
or whatever, you'll find some
mechanism to get these features

340
00:16:09.340 --> 00:16:11.170
out to the people. Cool.
Yeah. That's, that'd be the

341
00:16:11.170 --> 00:16:13.210
goal. I mean, what I,
I mean, we're not, we

342
00:16:13.210 --> 00:16:15.280
don't have solid plans on
it yet, but it will

343
00:16:15.280 --> 00:16:19.750
be great to be able
to sort of disconnect ourselves

344
00:16:19.750 --> 00:16:22.120
to some degree from visual
studio and not be totally

345
00:16:22.120 --> 00:16:24.370
dependent on, you know, Oh
my God, we gotta wait

346
00:16:24.370 --> 00:16:26.410
for the next big train
to leave the station before

347
00:16:26.410 --> 00:16:29.590
we can get some interesting
things out. And actually Paul

348
00:16:29.590 --> 00:16:31.990
has been doing some great
work with like the, there

349
00:16:32.050 --> 00:16:33.820
we've been doing a lot
of like power packs and

350
00:16:33.820 --> 00:16:36.550
other things like that that
have been off cycle. And

351
00:16:36.550 --> 00:16:39.190
so it's sort of just
taken our existing strategy and

352
00:16:39.190 --> 00:16:41.380
even take kicking it up
a notch as you are.

353
00:16:41.680 --> 00:16:44.230
Yeah. So talk to me
a little bit about, explain

354
00:16:44.230 --> 00:16:46.930
like to the layman, like
what a dynamic language feature

355
00:16:46.930 --> 00:16:49.450
is. I mean, as a
VB six program, if you'd

356
00:16:49.450 --> 00:16:52.000
be three programmer myself, I
keep thinking, well, it's either

357
00:16:52.000 --> 00:16:54.460
option strict or it's not
option strict and that that's

358
00:16:54.490 --> 00:16:57.790
not the computer science person's
perspective. That's just the checkbox

359
00:16:57.790 --> 00:17:01.210
person's perspective from someone who,
you know, right-click project properties,

360
00:17:01.210 --> 00:17:04.990
option strip, help me understand
the difference. Well, I mean

361
00:17:05.320 --> 00:17:07.360
the, so the interesting thing
is like, you know, that

362
00:17:08.500 --> 00:17:11.410
if you look at dynamic
languages like Python and Ruby,

363
00:17:11.410 --> 00:17:13.660
like there's the dynamic aspect.
And then there were a

364
00:17:13.660 --> 00:17:17.050
bunch of other kind of
ancillary features that don't necessarily

365
00:17:17.050 --> 00:17:19.450
have to do with dynamism
per se, but are kind

366
00:17:19.450 --> 00:17:21.070
of, you know, people think
of as part of the

367
00:17:21.070 --> 00:17:23.620
dynamic language. I mean the
core of a dynamic language

368
00:17:23.620 --> 00:17:27.070
is just that you can
defer a lot of the

369
00:17:27.070 --> 00:17:29.800
processing you would normally do
at compile time to run

370
00:17:29.800 --> 00:17:33.520
time. So basically what that
really means is you get

371
00:17:33.520 --> 00:17:35.110
to leave off a lot
of typing, you know, you

372
00:17:35.110 --> 00:17:37.540
don't, you don't have to
be so like right now,

373
00:17:37.570 --> 00:17:40.270
like the lazy yeah, exactly.
The BB and C sharp

374
00:17:40.270 --> 00:17:42.550
compilers are a real pain
in the ass sometimes because

375
00:17:42.850 --> 00:17:45.910
they're real sticklers for all
these things matching up, you

376
00:17:45.910 --> 00:17:49.320
know, and the dynamic languages
are really nice. Cause just

377
00:17:49.320 --> 00:17:51.330
have the kind of flow
where you just, you know,

378
00:17:51.330 --> 00:17:53.400
you just do what you
want to do and you

379
00:17:53.400 --> 00:17:55.530
don't have to be real
formal about it. And it

380
00:17:55.530 --> 00:17:59.310
just at runtime, magically, everything
works and you differ. I

381
00:17:59.310 --> 00:18:01.770
mean, a lot of that
work is done at runtime,

382
00:18:03.690 --> 00:18:05.730
but then there are a
lot of other aspects like,

383
00:18:06.750 --> 00:18:09.270
you know, in, in Python
and Ruby making. And we

384
00:18:09.410 --> 00:18:12.690
started moving towards this, like
with expression trees, like making,

385
00:18:13.110 --> 00:18:15.870
you know, programs is data
and being able to manipulate

386
00:18:15.870 --> 00:18:18.990
program, they call meta-programs exactly
meta programming and we've kind

387
00:18:18.990 --> 00:18:22.290
of taken our first little
baby tentative step into that

388
00:18:22.290 --> 00:18:24.690
world with expression trees and
link. But I mean, I

389
00:18:24.690 --> 00:18:28.290
think there's a whole world
of possibilities there that we

390
00:18:28.290 --> 00:18:31.560
are interested in exploring. Cause
too, if you could, if

391
00:18:31.560 --> 00:18:32.940
you look at like some
of the things that we

392
00:18:32.940 --> 00:18:36.540
do in our language, like
the declarative event handling, like,

393
00:18:36.930 --> 00:18:40.110
you know, really, that's just
kind of meta programming that

394
00:18:40.110 --> 00:18:42.480
we've built into the compiler,
but it'd be great to

395
00:18:42.930 --> 00:18:46.050
open that up and let
other people extended and be

396
00:18:46.050 --> 00:18:48.480
able to ship new libraries
that do cool stuff like

397
00:18:48.480 --> 00:18:51.560
that. So one of the
things that I, One of

398
00:18:51.560 --> 00:18:54.620
the thoughts that I always
have about, about the Microsoft

399
00:18:54.620 --> 00:18:57.650
developer versus the non-Microsoft developer
is that there's always this

400
00:18:57.650 --> 00:19:01.820
discussion about comp PSI people,
computer science, people versus people

401
00:19:01.820 --> 00:19:04.460
who are great programmers or
have been programmers for years,

402
00:19:04.460 --> 00:19:06.230
but never went to school.
And when I say went

403
00:19:06.230 --> 00:19:08.090
to school, I don't necessarily
mean they don't have a

404
00:19:08.090 --> 00:19:13.550
formal background in things like,
I mean, I went to

405
00:19:14.660 --> 00:19:18.320
Visited MIT and ultimately went
to a community college and

406
00:19:18.320 --> 00:19:21.050
then we got a, got
a state college degree. So

407
00:19:21.050 --> 00:19:23.180
when I had my compiler
classes and things like that,

408
00:19:23.450 --> 00:19:26.090
and I've met people that
can code, you know, code

409
00:19:26.120 --> 00:19:28.580
me out, blow me away
when it comes to coding

410
00:19:29.150 --> 00:19:30.980
who have never had a
class in compiler theory or

411
00:19:30.980 --> 00:19:33.080
anything like that. And there's
always been this kind of

412
00:19:33.080 --> 00:19:36.770
perception that maybe the C
curly brace people may have

413
00:19:36.770 --> 00:19:40.190
had a more formal background
in education. Then the VB

414
00:19:40.190 --> 00:19:43.310
people is that, is that
a stigma that kind of

415
00:19:43.310 --> 00:19:46.370
sticks to VB? Cause I'm
wondering as, I mean, VB

416
00:19:46.370 --> 00:19:50.090
is well into the hardcore,
we're getting into Lambdas and

417
00:19:50.090 --> 00:19:54.860
closures and stuff that is
pretty squarely in, well, back

418
00:19:54.860 --> 00:19:56.570
in the, back in the,
in the late sixties. Right.

419
00:19:56.610 --> 00:19:59.270
You know, we're kind of
coming all back around. Is

420
00:19:59.270 --> 00:20:02.240
there concern that these things
won't be made accessible to

421
00:20:02.840 --> 00:20:05.450
the people or is the,
is the collective knowledge just

422
00:20:05.450 --> 00:20:08.990
being, being raised? Well, I
think that like when we

423
00:20:08.990 --> 00:20:11.810
do these features, a lot
of it is organized around

424
00:20:11.810 --> 00:20:16.010
like it's in the most
cases like, you know, like

425
00:20:16.010 --> 00:20:18.890
we introduced a whole bunch
of advanced features that in

426
00:20:18.890 --> 00:20:21.890
the end, we're all built
to support the simple query

427
00:20:21.890 --> 00:20:25.040
syntax in a sense it's
like the idea that you

428
00:20:25.040 --> 00:20:26.990
can, you can sort of
have a simple, you can

429
00:20:26.990 --> 00:20:28.820
live at a simple level
at the top if you,

430
00:20:28.910 --> 00:20:30.800
and then as you need
to, you dig down into

431
00:20:30.800 --> 00:20:34.850
the power and yeah. I
mean, I think, you know,

432
00:20:34.850 --> 00:20:37.430
to your broader question, it's
like, you know, about the,

433
00:20:37.520 --> 00:20:41.630
the rambling question, you know,
the academic, like, you know,

434
00:20:41.690 --> 00:20:45.050
academic versus nonacademic. I was
reading some quotes somewhere saying

435
00:20:45.050 --> 00:20:47.440
that, you know, programmers are
kind of like docs in

436
00:20:47.440 --> 00:20:49.300
the sense that they imprint
on the, for, you know,

437
00:20:49.300 --> 00:20:52.450
little ducks in print on
the first creature they come

438
00:20:52.450 --> 00:20:55.090
across and like, you know,
programmers imprint on their first,

439
00:20:55.090 --> 00:20:57.790
you know, major language. Totally.
And so, you know, since

440
00:20:57.790 --> 00:21:00.130
C is a big, you
know, language in school, you

441
00:21:00.130 --> 00:21:02.420
know, maybe people, you know,
they go through school, you

442
00:21:02.420 --> 00:21:05.010
know, Well, and another thing
is that programmers the way

443
00:21:05.010 --> 00:21:06.660
that you really test to
see if someone's a programmer

444
00:21:06.660 --> 00:21:08.700
at the fundamental level of
their personality is that of

445
00:21:08.700 --> 00:21:11.070
a programmer is you tell
someone that it's not possible

446
00:21:11.730 --> 00:21:13.320
and then see what they
can do. Right. So like

447
00:21:13.320 --> 00:21:17.250
my very first job was
getting a visual basic application

448
00:21:17.250 --> 00:21:19.920
to paint the icon when
it was minimized and program

449
00:21:19.920 --> 00:21:23.130
manager. Right. Cause you only
get the standard VVI, you

450
00:21:23.130 --> 00:21:24.990
know? So I called Dan
Appleman and I got the

451
00:21:24.990 --> 00:21:27.270
Dessa where controls and I
got into the message pump

452
00:21:27.270 --> 00:21:29.640
and I started fooling around
and I got it to

453
00:21:29.640 --> 00:21:32.280
work, you know? So whenever
anyone says that VB can't

454
00:21:32.280 --> 00:21:34.710
do this or Ruby can't
do that. Somebody hacks the

455
00:21:34.710 --> 00:21:36.540
heck out of it and
comes up with an elegant

456
00:21:36.540 --> 00:21:38.670
solution. And ultimately he ended
up using a bunch of

457
00:21:38.670 --> 00:21:42.480
advanced, advanced feature. Yeah. And
you know, and if you

458
00:21:42.480 --> 00:21:44.820
look even back at, you
know, VB sex, maybe five,

459
00:21:44.820 --> 00:21:47.280
I mean, there was a
very, you know, there was

460
00:21:47.280 --> 00:21:50.670
a flourishing group community that,
you know, was organized around

461
00:21:50.670 --> 00:21:52.590
exactly. Those kinds of problems.
It's like, you know, how

462
00:21:52.590 --> 00:21:54.750
do I do these things?
And it's like, here's the

463
00:21:54.750 --> 00:21:56.520
chunk of code that will
allow you to do it

464
00:21:56.520 --> 00:21:59.010
and you know, good. You
know, you just cut and

465
00:21:59.010 --> 00:22:01.380
paste that Were you, I
mean, you were there during

466
00:22:01.380 --> 00:22:04.020
this time, were you freaking
out that people were doing

467
00:22:04.020 --> 00:22:06.090
these things? You're like, wow,
I did not think they'd

468
00:22:06.090 --> 00:22:08.550
be able to pull that
out. I will actually, I

469
00:22:08.550 --> 00:22:10.080
came in right at the
end of the, you know,

470
00:22:10.080 --> 00:22:11.880
the old VB six era.
But yeah, I mean, it

471
00:22:11.880 --> 00:22:13.890
was, it was a little
frightening, like some of the

472
00:22:13.890 --> 00:22:16.230
things that you could do,
I mean, and it was

473
00:22:16.230 --> 00:22:17.610
one of, you know, some
of the issues as we

474
00:22:17.610 --> 00:22:20.790
looked at transitioning to dot
mad is, I mean, there

475
00:22:20.790 --> 00:22:23.630
were a lot of trap
doors in the, in the

476
00:22:23.640 --> 00:22:26.280
VB language that allowed you
to do some very frightening

477
00:22:26.280 --> 00:22:29.490
things. And actually, I mean,
even some of the people

478
00:22:29.490 --> 00:22:32.340
on our own team did
some frightening things with, there

479
00:22:32.340 --> 00:22:34.140
was a guy, Matt Curlin,
who I always remember, he

480
00:22:34.140 --> 00:22:37.560
was like, you know, would
do things that you should

481
00:22:37.560 --> 00:22:40.980
not have legally been able
to do, but he would

482
00:22:40.980 --> 00:22:43.600
find a way to do
it. So People are asking

483
00:22:43.650 --> 00:22:46.950
rather than asking for features,
now people are, are making

484
00:22:46.950 --> 00:22:50.820
them happen. Like I, I
find that the XML expressiveness

485
00:22:50.820 --> 00:22:52.830
in VB is just so
nice, but I don't want

486
00:22:52.830 --> 00:22:55.050
to ship an extra DLL.
So I went and came

487
00:22:55.050 --> 00:22:57.030
up with a whole post
build step in ms. Bill

488
00:22:57.030 --> 00:22:58.680
to go and call I'll
merge. So then now I

489
00:22:58.680 --> 00:23:01.290
can use VB in this
class and then, you know,

490
00:23:01.320 --> 00:23:03.630
kind of squish it in.
And then people said, well,

491
00:23:03.630 --> 00:23:06.900
you know, net module support
has been in, in, in.net

492
00:23:06.900 --> 00:23:08.820
for years and years. It's
just never been sourced into

493
00:23:08.820 --> 00:23:12.150
the, you know, the visual
studio shell. And I guess

494
00:23:12.150 --> 00:23:13.890
people started to talk about
that again. Well, maybe it's

495
00:23:13.890 --> 00:23:15.420
time to give that, you
know, we didn't want to

496
00:23:15.420 --> 00:23:17.400
give it to people before
it was too complicated, too

497
00:23:17.400 --> 00:23:21.600
confusing, maybe mixed language projects,
maybe it's time for that.

498
00:23:21.630 --> 00:23:24.150
You know, those. Do you
guys think about that? I

499
00:23:24.150 --> 00:23:25.890
mean, do you talk to
people about that or is

500
00:23:25.890 --> 00:23:28.260
it, well, we have our
space, we have our language

501
00:23:28.260 --> 00:23:31.170
we're going to stay Well,
it's a constant struggle. I

502
00:23:31.170 --> 00:23:33.900
mean, definitely like, because we're
the VB team, you know,

503
00:23:33.900 --> 00:23:36.540
we tend to think about,
I mean the VB issue.

504
00:23:36.570 --> 00:23:38.460
I mean, like you can
see it not just with

505
00:23:38.460 --> 00:23:41.040
net modules, but even like
when you have multi project

506
00:23:41.310 --> 00:23:44.400
multilanguage solutions, even there are
places where it's kind of

507
00:23:44.400 --> 00:23:48.710
like things don't quite fit
together between the languages. And

508
00:23:48.710 --> 00:23:51.290
that definitely is a constant
struggle, but yeah, it is.

509
00:23:51.440 --> 00:23:53.450
I think the longer we
go, the more pressure we

510
00:23:53.450 --> 00:23:56.840
get even internally to kind
of support these, these mixed

511
00:23:56.840 --> 00:23:59.660
scenarios and really be a,
I mean, like one of

512
00:23:59.660 --> 00:24:02.000
the, you know, one of
the things that we're just

513
00:24:02.000 --> 00:24:03.440
in a meeting the other
day and somebody was like,

514
00:24:03.440 --> 00:24:06.470
you know, why can't I
do a rename across multiple

515
00:24:06.470 --> 00:24:08.870
language projects in a single
solution. It's like, you know,

516
00:24:09.270 --> 00:24:11.840
factor in factor. If I
want to rename something, I'd

517
00:24:11.840 --> 00:24:13.670
only go, you know, you
have a lot of issues

518
00:24:13.670 --> 00:24:15.440
with that. And it's like,
yeah, you know, that's, that's

519
00:24:15.440 --> 00:24:17.900
true. And so let's go,
let's start trying to figure

520
00:24:17.900 --> 00:24:19.820
out how to address this
problem. So yeah, but it's

521
00:24:19.820 --> 00:24:23.090
this constant tension because of
course, you know, on the

522
00:24:23.090 --> 00:24:26.180
one hand, the languages are
similar in a lot of

523
00:24:26.180 --> 00:24:28.040
ways. And on another hand
there are a lot of

524
00:24:28.430 --> 00:24:31.700
differences. And so it's hard
to build things that work,

525
00:24:31.910 --> 00:24:36.790
you know, that abstract fully
the two languages. Do you

526
00:24:36.790 --> 00:24:40.090
guys plan, like, do you,
do you have a sense

527
00:24:40.150 --> 00:24:42.880
that, well, gosh, 2015, this
is kind of where I

528
00:24:42.880 --> 00:24:45.340
see visual basic going or
do you only go a

529
00:24:45.340 --> 00:24:48.550
couple of years because the
community is ultimately dictating what,

530
00:24:48.940 --> 00:24:50.740
what happens? I mean, I
know I'm on the BBB

531
00:24:50.740 --> 00:24:54.880
insider's list and these guys
are passionate. I mean, they

532
00:24:54.880 --> 00:24:56.770
have, you know, okay, here's
what we need in the

533
00:24:56.770 --> 00:24:58.720
next version. I mean, there's,
they're giving you a specs

534
00:24:58.720 --> 00:25:00.670
almost like this is what
we, this is what we

535
00:25:00.670 --> 00:25:03.370
plan to see people. So
I mean, how much of

536
00:25:03.370 --> 00:25:06.460
it is your guys's exploration
of the potential of the

537
00:25:06.460 --> 00:25:09.700
language versus just taking feedback
from the community? I think

538
00:25:09.700 --> 00:25:12.880
it's, Hmm. I dunno. It's
balanced. It's definitely a balance,

539
00:25:12.910 --> 00:25:15.100
you know, there's not just
with the community, but there's

540
00:25:15.100 --> 00:25:18.610
also the larger trends in
the like, you know, dynamic

541
00:25:18.610 --> 00:25:21.340
language script stuff that wasn't
even on the radar, you

542
00:25:21.340 --> 00:25:24.010
know, five years ago. And
so, you know, to some

543
00:25:24.010 --> 00:25:26.110
degree, the reality is always
going to come in and

544
00:25:26.110 --> 00:25:29.980
rearrange our priorities. But, but
we do always have like

545
00:25:29.980 --> 00:25:33.130
a long, I think probably
a thinking out at least

546
00:25:33.130 --> 00:25:34.720
a couple of releases. I
mean, if you look at

547
00:25:34.720 --> 00:25:37.720
the link stuff, I mean,
the Genesis of that was

548
00:25:38.080 --> 00:25:41.440
probably, I mean, I have
emails of discussions from, you

549
00:25:41.440 --> 00:25:46.390
know, 2003. So, you know,
it's been, it's been incubating

550
00:25:46.390 --> 00:25:49.570
for a long period of
time, you know, to get

551
00:25:49.570 --> 00:25:52.180
here. So, you know, I
think ahead, that's the thing

552
00:25:52.180 --> 00:25:54.220
that's blown me away. Cause
I mean, I've been kind

553
00:25:54.220 --> 00:25:56.200
of in the, in the
Microsoft industry, you know, for

554
00:25:57.300 --> 00:26:00.550
15, 16 years now. And
I got into the things

555
00:26:00.550 --> 00:26:02.470
like the MVP program and
there's the kind of the,

556
00:26:03.040 --> 00:26:06.010
the I felt I was
inside. And then now eight

557
00:26:06.010 --> 00:26:09.190
weeks into the company, I
didn't know anything. You guys

558
00:26:09.190 --> 00:26:11.410
are, well, you guys, we,
now I can say we

559
00:26:11.620 --> 00:26:14.260
were planning this all sorts
of crazy stuff. I had

560
00:26:14.260 --> 00:26:16.990
no idea people, it takes
so long, right? The release

561
00:26:16.990 --> 00:26:18.250
of the source code, or
you guys are going to

562
00:26:18.250 --> 00:26:20.230
be involved in that too.
We'll be able to step

563
00:26:20.230 --> 00:26:24.550
into the.net framework, which I
assume includes Microsoft visual, basic

564
00:26:24.550 --> 00:26:27.010
dot Whatever, not in the
initial release, I think. But

565
00:26:27.010 --> 00:26:29.380
I think that we're working
on getting that in, in

566
00:26:29.380 --> 00:26:32.650
a reasonable time frame That
took two or three years

567
00:26:32.860 --> 00:26:34.900
from the, like the moment
that guy had the idea

568
00:26:34.900 --> 00:26:37.660
until it actually came out.
And that's accelerating. I understand

569
00:26:37.660 --> 00:26:40.180
that the, I think Zune
was like some number of

570
00:26:40.240 --> 00:26:44.670
months from concept to, to
execution. So That's really interesting

571
00:26:44.670 --> 00:26:46.440
that you have to pay
attention to the what's coming

572
00:26:46.440 --> 00:26:49.170
out from the, the community.
And we'll keep saying that

573
00:26:49.170 --> 00:26:51.810
ultimately every language is going
to become list. And a

574
00:26:51.810 --> 00:26:53.730
lot of these old timers
in the long beards are

575
00:26:53.730 --> 00:26:57.720
saying, ah, here we go
again. Yep. It's dynamic languages

576
00:26:57.720 --> 00:27:00.300
again. Yeah. It's funny. Well,
you know, and to like,

577
00:27:00.300 --> 00:27:04.440
it's, it's also, the technology
has to come. Sometimes the

578
00:27:04.440 --> 00:27:07.320
technology has to catch up
with, you know, the, the

579
00:27:07.320 --> 00:27:10.380
design ideas and, you know,
I mean, like for example,

580
00:27:10.380 --> 00:27:13.470
with link it's like there
were so many pieces that

581
00:27:13.470 --> 00:27:15.420
kind of had to be
put into place, you know,

582
00:27:15.420 --> 00:27:18.870
like, you know, it was
not possible without generics and

583
00:27:18.870 --> 00:27:20.940
you know, lots of other
things it's sort of, you

584
00:27:20.940 --> 00:27:23.610
know, that's what these long
cycles sometimes is about. It's

585
00:27:23.610 --> 00:27:25.770
just, you know, getting everybody
lined up in the right

586
00:27:25.860 --> 00:27:29.790
direction to actually make it
happen. So. Cool. Well, I

587
00:27:29.790 --> 00:27:31.350
really appreciate you guys taking
the time out of your

588
00:27:31.350 --> 00:27:33.450
day to talk to me.
And this has been another

589
00:27:33.450 --> 00:27:35.700
episode of Hansel minutes. We'll
see you again next week.

590
00:27:36.090 --> 00:27:44.220
<inaudible>.

