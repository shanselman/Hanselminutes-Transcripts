WEBVTT FILE

1
00:00:12.060 --> 00:00:17.550
Fromm Hansel minutes.com. It's Hanselman.
It's a weekly discussion with

2
00:00:17.550 --> 00:00:22.950
web developer and technologist Scott
Hanselman hosted by Carl Franklin. This

3
00:00:22.950 --> 00:00:26.850
is Lauren's Ryan announcing show
number one 24. Recorded live

4
00:00:26.880 --> 00:00:32.550
Thursday, July 21st, 2008. Support for Hanselman
it's just provided by teller.

5
00:00:32.730 --> 00:00:36.570
Already controls the most comprehensive
suite of components for windows

6
00:00:36.570 --> 00:00:46.380
forms and asp.net web applications.
online@wwwdottelbrik.com. Support is also provided

7
00:00:46.380 --> 00:00:51.450
by.net developers journal the world's
leading.net developer magazine online at

8
00:00:51.690 --> 00:00:57.510
www dot <inaudible> dot com.
In this episode, Scott talks

9
00:00:57.510 --> 00:01:05.040
with sun Microsystems engineer, Tim
Bray. Hi, this is Scott

10
00:01:05.040 --> 00:01:07.050
Hanselman and this is another
episode of Hansel minutes. And

11
00:01:07.050 --> 00:01:09.720
I'm sitting here today with
Tim Bray, distinguished engineer from

12
00:01:09.720 --> 00:01:14.910
sun Microsystems and a fellow
Twitter, Twitter, Twitter. How are

13
00:01:14.910 --> 00:01:17.210
you, sir? Thanks for sitting
down with me today. Not

14
00:01:17.210 --> 00:01:20.600
too bad. Good to be
here. We actually set this

15
00:01:20.600 --> 00:01:24.470
up on, on Twitter, which
I'm finding more and more

16
00:01:24.470 --> 00:01:30.080
is my, my third place
of choice. I'm seeing you

17
00:01:30.080 --> 00:01:32.600
on Twitter a lot as
well. When did you get

18
00:01:32.600 --> 00:01:36.530
into the microblogging Put her
hat it's, you know, first

19
00:01:36.530 --> 00:01:39.680
Renaissance in 2006 at South
by Southwest, and then it

20
00:01:39.680 --> 00:01:42.530
had another one. Oh, I
don't know it was it

21
00:01:42.710 --> 00:01:45.530
early this year, late last
year. I forget which and

22
00:01:45.530 --> 00:01:50.270
I climbed on board then
and it sure adds richness

23
00:01:50.270 --> 00:01:52.910
to life. Yeah, this is
my first interview set up

24
00:01:52.940 --> 00:01:55.370
by Twitter. And yesterday I
had my first lunch date

25
00:01:56.990 --> 00:02:00.680
initiated on Twitter and just
10 minutes ago, Paul Kedrosky

26
00:02:00.980 --> 00:02:04.640
tweeted. He stopped reading RSS
feeds because he gets it

27
00:02:04.640 --> 00:02:07.070
off and Twitter now, which
I thought was a little

28
00:02:07.070 --> 00:02:11.360
extreme. Wow. That is a
little extreme. Considering that Twitter

29
00:02:11.360 --> 00:02:15.080
only allows 160 characters. I
don't know if the short

30
00:02:15.080 --> 00:02:19.190
attention span of the internet
is really getting healthy when

31
00:02:19.190 --> 00:02:21.830
you constrain it to that
kind of a short burst

32
00:02:21.830 --> 00:02:24.740
of information. Well, shorter is
often better, but on the

33
00:02:24.740 --> 00:02:26.270
other hand, if everybody's going
to do that there, I

34
00:02:26.270 --> 00:02:28.520
mean, there has to be
somebody injecting a new information

35
00:02:28.520 --> 00:02:33.740
into the conversation somewhere. Yeah,
it I'm starting to wonder.

36
00:02:33.800 --> 00:02:35.180
I mean, if I was,
I've always wondered if the

37
00:02:35.180 --> 00:02:38.870
internet itself was healthy in
the sense of the, the,

38
00:02:38.990 --> 00:02:41.330
I feel like I have
a shorter attention span. There's

39
00:02:41.330 --> 00:02:43.730
more of a, of a
need to be connected. Are

40
00:02:43.730 --> 00:02:46.490
you someone who Twitters at
your desk or do you,

41
00:02:46.550 --> 00:02:49.610
do you tweet mobily? I
don't do it mobily. I

42
00:02:49.610 --> 00:02:51.380
only do it when I'm
actually sitting in front of

43
00:02:51.380 --> 00:02:55.040
a computer. You know, Nick
COVID over at MIT posted

44
00:02:55.220 --> 00:02:58.850
this long piece in some
magazine recently about, you know,

45
00:02:58.850 --> 00:03:02.460
the, that the internet and
Google are making a stupid

46
00:03:02.740 --> 00:03:05.410
and, you know, and reducing
our capacity to deal with

47
00:03:05.410 --> 00:03:08.650
long form information and so
on. And it, you know,

48
00:03:08.710 --> 00:03:12.590
kicked off a predictable, a
predictable conversation. And, and, and,

49
00:03:12.590 --> 00:03:14.950
and it is true that,
you know, I certainly read

50
00:03:14.980 --> 00:03:18.130
fewer long books than I
used to, but I don't

51
00:03:18.130 --> 00:03:21.760
feel stupid or I feel
better informed. You know, there's

52
00:03:21.820 --> 00:03:25.540
gotta be a rebalancing of
our, of our attitudes towards

53
00:03:25.540 --> 00:03:28.600
information as the PA pattern
changes. That's all there is

54
00:03:28.600 --> 00:03:31.800
to it. But don't you
think that, that human brains

55
00:03:31.830 --> 00:03:34.980
like computers, that kind of
the optimal number of threads

56
00:03:34.980 --> 00:03:37.440
in any system like that
is, is one and that,

57
00:03:37.620 --> 00:03:40.830
you know, intense, focused single-tasking
is a valuable thing and

58
00:03:40.830 --> 00:03:43.620
that the internet is promoting
a level of context switching

59
00:03:43.620 --> 00:03:48.240
that maybe unhealthy Well, that's
true to some extent. I

60
00:03:48.240 --> 00:03:51.210
mean, you and I are
both fortunate enough to be

61
00:03:51.210 --> 00:03:53.580
in a field where there's
a strong career development and

62
00:03:53.580 --> 00:03:56.310
you know, when you're doing
something creative, there's no excuse.

63
00:03:56.340 --> 00:03:58.560
There's no substitute for getting
into the flow and getting

64
00:03:58.560 --> 00:04:01.320
that single minded focus. On
the other hand, a very

65
00:04:01.320 --> 00:04:05.730
high part of most people's
jobs, including mine is communication.

66
00:04:05.760 --> 00:04:10.860
And, you know, being plugged
into a several hundred parallel

67
00:04:10.860 --> 00:04:14.430
information flows increases my effectiveness
at that part of my

68
00:04:14.430 --> 00:04:18.210
job. Now is Twitter something
that you put on another

69
00:04:18.210 --> 00:04:20.850
monitor and just kind of
do your work well, the

70
00:04:20.850 --> 00:04:24.240
river of news flows over
you, or do you sit

71
00:04:24.240 --> 00:04:26.430
down and focus on the
river for awhile and then

72
00:04:26.460 --> 00:04:31.950
focus on your work? I
look at Twitter intermittently, no,

73
00:04:31.950 --> 00:04:36.120
it doesn't go on a
separate screen. It it's, they're

74
00:04:36.120 --> 00:04:38.940
off in a corner and
I look at it and

75
00:04:39.130 --> 00:04:40.530
I have a Mac. So
I have this thing called

76
00:04:40.530 --> 00:04:44.070
growl. That puts up things
momentarily on my screen when

77
00:04:44.070 --> 00:04:46.110
they come in and sometimes
they get my attention. And

78
00:04:46.110 --> 00:04:48.840
sometimes they don't. One thing
about Twitter is I don't

79
00:04:48.840 --> 00:04:51.420
worry about missing stuff. You
know, unlike some other things,

80
00:04:51.420 --> 00:04:52.860
if you know, when I've
been away from the computer

81
00:04:52.860 --> 00:04:55.770
for two hours and come
back, I don't go back

82
00:04:55.770 --> 00:04:59.460
and see what was in
the Twitter stream. No, that's

83
00:04:59.460 --> 00:05:03.270
fair. That's a very interesting
point because Nick Bradbury, the

84
00:05:03.270 --> 00:05:06.420
author of the most popular
RSS reader on windows was

85
00:05:06.420 --> 00:05:10.350
called feed demon recently commented
that the, the items list

86
00:05:10.380 --> 00:05:13.620
pain, the pain that makes
his application look a lot

87
00:05:13.620 --> 00:05:16.980
like outlook and keeps track
of read and unread items

88
00:05:17.310 --> 00:05:19.200
is something that he's been
trying to get rid of

89
00:05:19.950 --> 00:05:22.200
as a, as the designer
of his application for a

90
00:05:22.200 --> 00:05:25.050
number of years now, the,
and I've always felt that

91
00:05:25.050 --> 00:05:29.580
the, the psychic weight of
those unread items causes me

92
00:05:29.580 --> 00:05:32.640
stress. It causes me background
amounts of stress. The idea

93
00:05:32.640 --> 00:05:34.410
that, gosh, I really need
to go, I need to

94
00:05:34.410 --> 00:05:37.380
get through that. Just like
the, the weight of the

95
00:05:37.380 --> 00:05:40.590
things on your TiVo that
are unwatched somehow took something

96
00:05:40.590 --> 00:05:43.830
that was joyous and relaxing,
like watching TV and then

97
00:05:43.830 --> 00:05:46.500
made it a to do
list. But with Twitter, you

98
00:05:46.500 --> 00:05:49.290
don't have that sense Or
the weight of the things

99
00:05:49.290 --> 00:05:52.200
in your inbox. You know,
for my RSS reader, I

100
00:05:52.200 --> 00:05:57.000
eventually took a willful action
and I made two top

101
00:05:57.020 --> 00:06:01.550
level folders, which are originally
named a and B and

102
00:06:01.580 --> 00:06:03.710
in a go, the things
that I don't want to

103
00:06:03.710 --> 00:06:05.690
miss, there are a certain
number of people. And so

104
00:06:05.690 --> 00:06:09.160
on that when, you know,
when they post, I, I

105
00:06:09.170 --> 00:06:11.300
want to make sure I
have read it because they're,

106
00:06:11.360 --> 00:06:14.300
you know, information sources that
I consider important and then

107
00:06:14.300 --> 00:06:17.180
everything else goes in B
and B is totally total

108
00:06:17.180 --> 00:06:19.340
river of news. You know,
if stuff scrolls off well,

109
00:06:19.340 --> 00:06:21.020
Hey, you know, if it's
important, it'll come back to

110
00:06:21.020 --> 00:06:25.420
me. Okay. Huh? So you're
managing all aspects of information

111
00:06:25.420 --> 00:06:29.140
flow into your life as
things that are truly an

112
00:06:29.140 --> 00:06:34.240
inbox versus the river. I
think, I think it's, it's

113
00:06:34.270 --> 00:06:38.200
not maintainable to try and
go either one way or

114
00:06:38.200 --> 00:06:40.120
the other. You know, I
think there are some things

115
00:06:40.120 --> 00:06:42.160
that, you know, gotta be
paid attention to it because

116
00:06:42.160 --> 00:06:44.350
that's what your mission in
life is. And there are

117
00:06:44.350 --> 00:06:48.160
others that enrich your life,
but are optional. That's interesting.

118
00:06:48.160 --> 00:06:51.490
That sounds like the classic
Covey style of organization where

119
00:06:51.490 --> 00:06:54.190
you put things in quadrants
and things are either urgent

120
00:06:54.460 --> 00:06:59.020
important or some combination of
the two. And I've been

121
00:06:59.020 --> 00:07:01.990
trying to reconcile the Covey
way of thinking, which kind

122
00:07:01.990 --> 00:07:04.600
of is appropriate in the
context of your a and

123
00:07:04.600 --> 00:07:08.320
B example with the, the
new resurgence of the getting

124
00:07:08.320 --> 00:07:11.740
things done, style of doing
things where things either require

125
00:07:11.740 --> 00:07:14.650
action or they require action
later, or they're just for,

126
00:07:14.860 --> 00:07:18.190
for reference. Do, do you
subscribe to any particular organizational

127
00:07:18.670 --> 00:07:20.290
thing or do you just
scribble stuff on a piece

128
00:07:20.290 --> 00:07:23.530
of paper? I, you know,
I've had to abandon paper.

129
00:07:23.530 --> 00:07:25.870
I, you know, during that
period of my life, when

130
00:07:25.870 --> 00:07:27.640
I handled a lot of
paper, my desk was always

131
00:07:27.640 --> 00:07:31.090
messy and I always felt
the disorder are pressing me.

132
00:07:31.570 --> 00:07:35.590
And since I've managed to
become almost entirely paper-free, my

133
00:07:35.590 --> 00:07:39.160
desk is neat and I'm
more relaxed. And I think

134
00:07:39.160 --> 00:07:41.500
the reason is simply the,
the, you know, the, that

135
00:07:41.500 --> 00:07:44.950
the, it makes it easier.
The, the electronic information flows

136
00:07:44.950 --> 00:07:49.000
are easier to sort into,
into prioritize streams. Now I

137
00:07:49.000 --> 00:07:50.890
find a lot of time
of my own time is

138
00:07:50.890 --> 00:07:54.880
spent not just organizing lists
and moving items from place

139
00:07:54.880 --> 00:07:57.010
to place and kind of
becoming a human filing cabinet.

140
00:07:57.310 --> 00:08:00.190
But I'm spending a lot
of time transforming formats from

141
00:08:00.190 --> 00:08:02.710
one form to another, like,
I'll have an Apple, you

142
00:08:02.710 --> 00:08:05.740
know, a $10 application that
transfers things from outlook to

143
00:08:05.740 --> 00:08:08.500
Google calendar. And then another
application that goes from Google

144
00:08:08.500 --> 00:08:11.590
calendar to this other thing.
And I'm spending an awful

145
00:08:11.590 --> 00:08:14.440
lot of time transforming stuff
from one format to another.

146
00:08:15.190 --> 00:08:18.190
But I do realize that
the internet is marching forward

147
00:08:18.190 --> 00:08:20.710
in the sense of openness
is definitely there. And, you

148
00:08:20.710 --> 00:08:22.210
know, when I find an
application that doesn't have an

149
00:08:22.210 --> 00:08:24.700
API, I'm shocked, like I'm
frankly shocked that I can't

150
00:08:24.700 --> 00:08:28.830
manage Netflix effectively because there's
no API public API for,

151
00:08:28.900 --> 00:08:32.110
for Netflix. Well, the other
thing that's qualitatively improved just

152
00:08:32.290 --> 00:08:37.060
in the last few years
is that my desktop computer

153
00:08:37.330 --> 00:08:40.720
has excellent search now, so
that I don't lose things

154
00:08:40.720 --> 00:08:43.180
in there very much. And
then all the other places,

155
00:08:43.180 --> 00:08:45.340
I put things around servers
at one place or another,

156
00:08:45.610 --> 00:08:50.080
and they also have excellent
search. So I obsess less

157
00:08:50.080 --> 00:08:52.330
about where to put things,
because I know that I

158
00:08:52.330 --> 00:08:54.850
can get them back when
I need to, you know,

159
00:08:54.850 --> 00:08:58.200
in mail, Gmail has sort
of introduced this notion of

160
00:08:58.200 --> 00:09:01.500
the archive button. I sorta
thinks that everything should now

161
00:09:01.500 --> 00:09:03.270
have an archive button so
that you can make it

162
00:09:03.270 --> 00:09:05.280
go away, but, you know,
we'll be able to find

163
00:09:05.280 --> 00:09:09.290
it when you need Yeah,
but I'm having trouble reconciling

164
00:09:09.530 --> 00:09:13.100
the, pushing the archive button
and the comfort that I'll

165
00:09:13.100 --> 00:09:14.660
have that, you know, I'll,
if I need that, I'll

166
00:09:14.660 --> 00:09:17.120
find it with the idea
that it should be in

167
00:09:17.120 --> 00:09:19.310
front of my eyeballs. Lest
I forget about it all

168
00:09:19.400 --> 00:09:22.700
altogether. You know, I think
that Mac users tend to

169
00:09:22.700 --> 00:09:25.850
have a clean desktop. The
Mac environment promotes a clean

170
00:09:25.850 --> 00:09:28.220
desktop. I think that a
lot of windows users might

171
00:09:28.220 --> 00:09:30.230
myself included have just a
bunch of crap on their

172
00:09:30.230 --> 00:09:33.980
desktop that is there to
remind them not to throw

173
00:09:33.980 --> 00:09:36.470
those things away. I'm wondering
what a, maybe I should

174
00:09:36.470 --> 00:09:38.660
write an application with a
big button that says archive

175
00:09:38.660 --> 00:09:40.880
that simply takes crap off
your desktop and sticks it

176
00:09:40.880 --> 00:09:42.920
into a folder called archive.
Just so it's not there

177
00:09:42.920 --> 00:09:45.920
in front of my eyeballs
Windows these days, I assume

178
00:09:45.920 --> 00:09:49.280
comes with pretty decent search
capabilities. Yeah. It's got the

179
00:09:49.280 --> 00:09:51.860
same kind of spotlight search,
you know, click one button

180
00:09:51.860 --> 00:09:55.040
and start typing and things
show up. Right. That that's

181
00:09:55.040 --> 00:09:57.290
really, I think, been a
quality of life improver for

182
00:09:57.290 --> 00:10:00.380
those of us who are
information centric and computers. Yeah.

183
00:10:00.400 --> 00:10:02.960
Interestingly enough, even with, I've
got two Macs in the

184
00:10:02.960 --> 00:10:04.730
house in three windows machines,
and none of them, I

185
00:10:04.730 --> 00:10:06.530
can, I can't search these
machines as fast as I

186
00:10:06.530 --> 00:10:09.560
can search Google itself. There's
a certain irony in that,

187
00:10:10.730 --> 00:10:12.920
but I haven't got a
distributed search yet for all

188
00:10:12.920 --> 00:10:16.130
the machines I'd like to
search the house. I, I

189
00:10:16.160 --> 00:10:18.500
converged on having one computer.
You know, I have one

190
00:10:18.500 --> 00:10:21.680
computer that I use for
everything except for photo editing

191
00:10:21.680 --> 00:10:24.890
and movie editing. And it's
a laptop and it goes

192
00:10:24.890 --> 00:10:27.260
everywhere with me. And these
are degrees of simplicity that

193
00:10:27.260 --> 00:10:29.960
buys me. It's not to
be believed. No. And then

194
00:10:29.960 --> 00:10:31.730
you have a time machine
that backs that machine up,

195
00:10:31.730 --> 00:10:34.010
and then you're set. In
fact, I had to do

196
00:10:34.010 --> 00:10:36.320
it, my computer disc frightened
disc last week. And I

197
00:10:36.320 --> 00:10:39.200
had to restore everything from
scratch my first, my first

198
00:10:39.200 --> 00:10:42.170
attempt to do that with
time capsule and, and thank

199
00:10:42.170 --> 00:10:46.550
goodness it worked. And you
survived indeed. That is the

200
00:10:46.550 --> 00:10:48.860
definitely the best example of
a backup system working is

201
00:10:48.860 --> 00:10:51.920
that that restore, that one
never actually practices that just

202
00:10:52.310 --> 00:10:54.050
happens at the worst possible
time. Well, you know what?

203
00:10:54.050 --> 00:10:58.010
I felt qualitatively nervous during
the, you know, 24 to

204
00:10:58.010 --> 00:11:02.120
48 hour period between when
the computer fried itself. And

205
00:11:02.120 --> 00:11:04.400
I got a new computer
put together and the restore

206
00:11:04.400 --> 00:11:07.430
had completed cause you know,
everything, my whole life was

207
00:11:07.430 --> 00:11:10.850
only in one place and
that's, I felt vulnerable. I

208
00:11:10.850 --> 00:11:12.650
mean, you know, the time
capsule, it might've gone bad.

209
00:11:12.650 --> 00:11:15.500
Right then I would have
really been up. That reminds

210
00:11:15.500 --> 00:11:17.030
me of the way that
I used to feel about

211
00:11:17.060 --> 00:11:20.060
tapes. You know, as many
times, as many years, as

212
00:11:20.060 --> 00:11:22.640
I spent backing things up
to, you know, little Buffalo

213
00:11:22.640 --> 00:11:26.180
tape drives nearly every restore
that I ever tried from

214
00:11:26.180 --> 00:11:30.500
tape failed, which caused a
lifelong distrust of tape. And

215
00:11:30.500 --> 00:11:32.210
now that so many years
have gone by, I can

216
00:11:32.240 --> 00:11:34.430
almost guarantee that a hard
drive is going to fail.

217
00:11:34.670 --> 00:11:36.620
So I really have no
trust if any storage medium

218
00:11:36.620 --> 00:11:40.160
at this point, I think
as long as you can

219
00:11:40.160 --> 00:11:43.340
keep everything in two places,
you know, and don't lock

220
00:11:43.340 --> 00:11:46.310
anything important away and proprietary
formats, you can use sleep

221
00:11:46.340 --> 00:11:49.610
easily at night. And if
you're, you know, failing to,

222
00:11:49.640 --> 00:11:53.890
to, to do either of
those, you probably deserve to

223
00:11:53.890 --> 00:11:56.590
be nervous. Another big thing
I changed a few years

224
00:11:56.590 --> 00:11:59.500
ago that that's helped. You
never delete anything. Why would

225
00:11:59.500 --> 00:12:02.320
you invest time and deleting
information? Most people never even

226
00:12:02.320 --> 00:12:05.110
fill up their laptop hard
drives anymore. And you know,

227
00:12:05.110 --> 00:12:08.020
you might need it again
sometime. So why do that?

228
00:12:08.700 --> 00:12:10.590
Yeah. That's a really interesting
point. Now that you've got

229
00:12:10.890 --> 00:12:14.310
a USB keys, that'll hold
eight gigs, not counting movies

230
00:12:14.310 --> 00:12:16.110
and photos, which I think
we always kind of put

231
00:12:16.110 --> 00:12:19.560
off in their own category,
the light, the life stream

232
00:12:19.560 --> 00:12:22.980
of information, maybe not counting
code as well, depending on

233
00:12:23.130 --> 00:12:26.010
how big your code gets
certainly would not be much

234
00:12:26.010 --> 00:12:28.980
bigger than eight, eight, nine,
10 gigs. And certainly if

235
00:12:28.980 --> 00:12:30.900
it ever got that big,
I'd have more, I suppose

236
00:12:30.900 --> 00:12:32.400
I could put my whole
life on my iPhone at

237
00:12:32.400 --> 00:12:36.540
this point. Yeah. One of
the things that I read

238
00:12:36.540 --> 00:12:38.640
on your blog recently is
the, is the much and

239
00:12:38.640 --> 00:12:41.250
often quoted memory is the
new disc disc is the

240
00:12:41.250 --> 00:12:45.060
new tape and taken a
little bit of a sideways

241
00:12:45.480 --> 00:12:50.640
direction. You posted the wide
finder problem a while back,

242
00:12:50.670 --> 00:12:54.180
which was a wide finder
project, which got a lot

243
00:12:54.180 --> 00:12:55.980
bigger than I thought it
would get it. Can you

244
00:12:56.070 --> 00:12:58.500
talk a little bit about
how that started and why

245
00:12:58.500 --> 00:13:01.350
it got so big? So
fast? Well, it's, it's an,

246
00:13:01.380 --> 00:13:04.230
it's an amusing story. I
have a blog that's pretty

247
00:13:04.230 --> 00:13:07.130
popular. And so I build
up gigabytes and gigabytes of

248
00:13:07.140 --> 00:13:09.960
log files. I'm sure you're
intimately familiar with the situation.

249
00:13:10.410 --> 00:13:13.650
And I had this weird
band with spike. So I

250
00:13:13.650 --> 00:13:17.100
wrote this little Ruby program
to, to, to analyze it.

251
00:13:17.580 --> 00:13:23.760
And then I was doing
some work with sun with

252
00:13:23.760 --> 00:13:26.610
these new, highly parallel, low
clock rate, computers were making

253
00:13:26.630 --> 00:13:29.370
the Niagara family and I
had an idea. So I

254
00:13:29.370 --> 00:13:31.410
took some of that data
and ran the same Ruby

255
00:13:31.410 --> 00:13:35.850
program against it. And it
ran substantially faster on my

256
00:13:35.850 --> 00:13:40.410
Mac book than it did
on this, you know, $20,000,

257
00:13:40.440 --> 00:13:44.370
you know, highly web optimized
sun server. And this was

258
00:13:44.580 --> 00:13:47.880
a rude awakening. I mean,
like substantially faster on the

259
00:13:47.880 --> 00:13:50.640
map book. Now these, these
things, you know, they have

260
00:13:50.640 --> 00:13:53.820
like eight cores with eight
or 16 threads per core

261
00:13:53.820 --> 00:13:58.230
and massive memory bandwidth and
outstandingly great IO, but it

262
00:13:58.230 --> 00:14:00.630
only runs at like, you
know, 1.2 gigahertz and doesn't

263
00:14:00.630 --> 00:14:03.510
have terribly fast arithmetic. And
it turns out that in

264
00:14:03.510 --> 00:14:05.610
terms of handling a web
server load, you just can't

265
00:14:05.610 --> 00:14:07.860
beat these guys. I mean,
you know, they're low wattage,

266
00:14:07.860 --> 00:14:12.810
high throughput, outstandingly, great web
servers, but you know, it

267
00:14:12.990 --> 00:14:15.120
seemed like maybe they're not
so great at being general

268
00:14:15.120 --> 00:14:17.640
purpose computers. And this isn't
just a problem for sun.

269
00:14:17.670 --> 00:14:20.610
It's a problem for the
whole industry because the economics

270
00:14:20.610 --> 00:14:23.580
of doing these many core,
low clock rate computers are

271
00:14:23.580 --> 00:14:28.170
just overwhelmingly huge, particularly as
we're facing, you know, HVAC

272
00:14:28.170 --> 00:14:30.540
and power and air conditioning
problems in our, in our

273
00:14:30.540 --> 00:14:32.430
data centers. And you know,
in the planet's warming up

274
00:14:32.430 --> 00:14:34.440
too. Right? So, so this
is something we all gotta

275
00:14:34.450 --> 00:14:38.850
be worried about. So I
launched wide finder, which simply

276
00:14:38.850 --> 00:14:41.100
was okay, here's a bunch
of data. Here's the, here's

277
00:14:41.100 --> 00:14:43.290
a Ruby program that runs
unacceptably slow on it. You

278
00:14:43.290 --> 00:14:45.290
know, how are we going
to get good performance on

279
00:14:45.360 --> 00:14:48.240
this class of computers? So
I ran wide Pinder one

280
00:14:48.240 --> 00:14:50.610
last fall, and then I'm
doing wide finder two right

281
00:14:50.610 --> 00:14:52.970
now I took it further.
I actually assembled 45 gig

282
00:14:52.970 --> 00:14:57.650
of log files and staged
a one of these low

283
00:14:57.650 --> 00:15:00.500
clock rate, high, many chorus
on servers facing the internet.

284
00:15:00.500 --> 00:15:03.110
And you know, I said,
okay, anybody have at it.

285
00:15:03.470 --> 00:15:05.780
And I've got dozens of
people now who are, who

286
00:15:05.780 --> 00:15:08.900
are writing codes to, to
solve the problem in a

287
00:15:08.900 --> 00:15:12.140
variety of languages. If you,
if you type wide finder

288
00:15:12.140 --> 00:15:13.790
to, you know, you can
find the Wiki page with

289
00:15:13.790 --> 00:15:16.460
some of the results that
are reported and there's two

290
00:15:16.460 --> 00:15:19.430
problems. One is, can you
actually run this kind of

291
00:15:19.430 --> 00:15:22.250
boring, but essential data processing
task on this class of

292
00:15:22.250 --> 00:15:26.150
computer efficiently? And assuming the
answer is, yes, can you

293
00:15:26.150 --> 00:15:28.130
do it in such a
way as to empower mere

294
00:15:28.130 --> 00:15:31.070
mortal programmers to, to get,
you know, the, the mileage

295
00:15:31.070 --> 00:15:33.350
that this, this kind of
hardware can do? The answer

296
00:15:33.350 --> 00:15:35.360
is the first one is
yes. You know, it turns

297
00:15:35.360 --> 00:15:37.100
out that in fact there's
a variety of ways you

298
00:15:37.100 --> 00:15:39.950
can, you can, you can
run to get outstandingly great

299
00:15:39.950 --> 00:15:43.550
performance. The answer to the
second question is it's not

300
00:15:43.550 --> 00:15:46.100
clear yet. And I think
that that's really important. I

301
00:15:46.100 --> 00:15:49.010
mean, it really should be
the notion of writing a

302
00:15:49.010 --> 00:15:51.230
program. We should read lines
out of a file and

303
00:15:51.230 --> 00:15:53.060
does something with them is,
you know, something that's never

304
00:15:53.060 --> 00:15:54.800
going to go away. And
there ought to be a

305
00:15:54.800 --> 00:15:56.780
really super easy way for
a programmer to say, Oh,

306
00:15:56.780 --> 00:15:58.400
and by the way, it
doesn't matter what order you

307
00:15:58.400 --> 00:16:01.850
do this in. And then
the computer should just automagically

308
00:16:01.880 --> 00:16:04.490
deal it out among the
cores and IO, subsystems, and

309
00:16:04.490 --> 00:16:07.340
so on to get a
good result. And, and well,

310
00:16:07.370 --> 00:16:09.890
that's not there yet. And
I think that it's something

311
00:16:09.900 --> 00:16:12.170
we really need. And to
the extent that white binder

312
00:16:12.170 --> 00:16:14.510
can push back to that
frontier a little bit, I

313
00:16:14.510 --> 00:16:17.870
think, you know, the, the
general benefit is potentially substantial.

314
00:16:18.640 --> 00:16:19.960
Where do you think that
this problem is going to

315
00:16:19.960 --> 00:16:22.870
be solved? Is this an
issue of smarter compilers and

316
00:16:22.870 --> 00:16:26.800
appropriate language constructs? Or is
this a fundamental computer architecture?

317
00:16:26.830 --> 00:16:29.890
Because everyone's saying that, you
know, my desktop will have

318
00:16:29.890 --> 00:16:33.130
16 cores by, by, you
know, next year or whenever

319
00:16:33.130 --> 00:16:35.080
it's always more and more
and more, I've got a

320
00:16:35.080 --> 00:16:39.160
quad core now, or do
we need to just come

321
00:16:39.160 --> 00:16:42.070
to terms with that? We
need different computers serving our

322
00:16:42.070 --> 00:16:46.990
webpages than we do doing
our linear searches over log

323
00:16:46.990 --> 00:16:49.480
files. Then we do using
our desktop. Well, I mean,

324
00:16:49.630 --> 00:16:51.610
the fact that, you know,
you've got a quad, a

325
00:16:51.610 --> 00:16:54.520
mirror quad core machine, which
is probably running at like

326
00:16:54.550 --> 00:16:58.480
two plus gigahertz, probably 2.6.
If it's typical that soccer

327
00:16:58.480 --> 00:17:00.880
is putting out, you know,
a whole lot of Watts

328
00:17:01.150 --> 00:17:04.510
and, you know, burning your
lap and, and really creating

329
00:17:04.510 --> 00:17:07.300
a challenge for the battery
designers. If in fact we

330
00:17:07.300 --> 00:17:09.490
could run your laptop on
one of these many core

331
00:17:09.490 --> 00:17:13.620
machines, a better battery life
and a cooler laptop and

332
00:17:13.680 --> 00:17:19.540
life would be better. So
it's of general interest. And

333
00:17:19.540 --> 00:17:21.070
the answer I suspect is
going to be half and

334
00:17:21.070 --> 00:17:23.260
half. I mean, I don't
think that lever make the

335
00:17:23.260 --> 00:17:27.760
compilers smart enough to spot
that the business logic doesn't

336
00:17:27.760 --> 00:17:31.090
actually require, you know, a
sequential processing of some particular

337
00:17:31.090 --> 00:17:34.330
file, but that'd be really,
really easy for the programmer

338
00:17:34.330 --> 00:17:37.510
who knows to say, Oh,
for this loop, you know,

339
00:17:37.540 --> 00:17:39.400
do whatever you want. You
know, this other loop, you

340
00:17:39.400 --> 00:17:43.150
have to do it in
the right order. And what

341
00:17:43.150 --> 00:17:45.280
we need to do is
make it really, really easy

342
00:17:45.280 --> 00:17:47.440
for the programmer to express
that. And then, then the

343
00:17:47.440 --> 00:17:50.310
machine will take over and
do the rest. What About

344
00:17:50.310 --> 00:17:53.850
machines with dedicated co processors
that are appropriate for different

345
00:17:53.850 --> 00:17:56.280
tasks to have, like, we've
always talked about how much

346
00:17:56.280 --> 00:18:00.720
more powerful the PlayStation two
is, PlayStation three. Rather, it

347
00:18:00.720 --> 00:18:04.320
didn't take very long for
PlayStation threes to get ahead

348
00:18:04.320 --> 00:18:06.390
of all the other computers
in the world and protein

349
00:18:06.390 --> 00:18:09.540
folding, because that's one thing
that they can do so

350
00:18:09.540 --> 00:18:12.210
much better. And people are
starting to write libraries to

351
00:18:12.210 --> 00:18:16.860
offload computations onto the GPU,
which is a processor that's

352
00:18:16.860 --> 00:18:21.480
being unused. Do we need
to come up with generic

353
00:18:21.480 --> 00:18:25.770
1632 processor machines that can
handle pretty much anything? Or

354
00:18:25.950 --> 00:18:30.480
should we have three or
four different kinds of quad

355
00:18:30.510 --> 00:18:33.720
dual proc machines that are
all specialized custom processors that

356
00:18:33.720 --> 00:18:38.510
are appropriate for different tasks,
more heterogeneous, And historically general

357
00:18:38.510 --> 00:18:41.450
purpose computers have always wiped
out special purpose computers. I

358
00:18:41.450 --> 00:18:43.610
mean, there were lists of
machines and database machines and

359
00:18:43.610 --> 00:18:46.400
various other kinds of special
purpose machines. And these days

360
00:18:46.400 --> 00:18:50.720
health hack, we're all running
x86, right? So, so the

361
00:18:50.720 --> 00:18:53.870
history would suggest that we
get the most leverage by

362
00:18:53.870 --> 00:18:57.170
using general purpose machines. Now,
if in fact we get

363
00:18:57.170 --> 00:18:58.580
the kind of thing I'm
talking about, where there's an

364
00:18:58.580 --> 00:19:01.820
easy way for the programmer
to indicate that, you know,

365
00:19:01.860 --> 00:19:06.250
the parallel approach is fine
here. Then, you know, whether

366
00:19:06.260 --> 00:19:09.350
that, then that turns the
assistant designers free to Duke

367
00:19:09.350 --> 00:19:11.060
it out and just figure
out where they're like a

368
00:19:11.060 --> 00:19:15.680
Sony cell or cell architecture
or some, you know, Niagara

369
00:19:15.710 --> 00:19:19.010
architecture or, you know, whatever
Intel's cooking up in the

370
00:19:19.010 --> 00:19:22.910
back room. It turns out
to work better. And ideally

371
00:19:24.440 --> 00:19:27.050
you'd like to have the
program or not have to

372
00:19:27.050 --> 00:19:31.400
write code with some particular
processor in mind, because at

373
00:19:31.400 --> 00:19:33.470
the end of the day,
that seems like an unsatisfactory

374
00:19:33.470 --> 00:19:37.010
way to go Using the
sun Niagara, just as an

375
00:19:37.010 --> 00:19:39.980
example, you know, how, how
different is that? How different

376
00:19:39.980 --> 00:19:42.980
our new processor designs and
new system architecture designs, then,

377
00:19:43.370 --> 00:19:47.060
then the sins of the
father? Well, I mean, it's

378
00:19:47.060 --> 00:19:49.310
not nearly as, as weird
and exotic as the cell.

379
00:19:49.340 --> 00:19:50.900
I mean, you know, the,
the Sony cell has a

380
00:19:50.900 --> 00:19:54.800
conventional processor and then some
dozens of these weird little

381
00:19:54.800 --> 00:20:00.830
special prosperous processors, the Niagara
has, it's just a spark

382
00:20:00.830 --> 00:20:02.510
right around. It's the same
old spark construction set has

383
00:20:02.510 --> 00:20:05.150
been going on for well,
God, 10 years now, the

384
00:20:05.150 --> 00:20:09.350
thing is, it's got eight
processors or eight cars. Each

385
00:20:09.350 --> 00:20:11.630
car has a, it's actually
kind of dual cord, two

386
00:20:11.630 --> 00:20:14.750
instruction threads, and two, two
integers threads inside it. And

387
00:20:14.750 --> 00:20:17.750
then as each it's got
four sets of thread, context

388
00:20:17.750 --> 00:20:20.390
and hardware, so that when
once red block, you can

389
00:20:20.390 --> 00:20:25.040
actually switch in the next
thread in one cycle. So,

390
00:20:25.070 --> 00:20:27.380
you know, assuming you get
things blocking on IO, a

391
00:20:27.380 --> 00:20:29.600
lot, which you do in
the real world, particularly in

392
00:20:29.600 --> 00:20:32.480
web applications, you can actually
keep those eight core. It's

393
00:20:32.480 --> 00:20:34.490
pretty well maxed out now,
you know, given that this

394
00:20:34.490 --> 00:20:39.020
thing is running at 1.4
gigahertz and in the high

395
00:20:39.020 --> 00:20:41.450
end models, we'll work it
out. That's a, a, that's

396
00:20:41.450 --> 00:20:44.240
like an 11 gigahertz, a
throughput on a fairly low

397
00:20:44.240 --> 00:20:47.140
water chip, which is a
pretty attractive thing to have

398
00:20:47.140 --> 00:20:52.150
happen now because it's just
a spark. It is a

399
00:20:52.150 --> 00:20:55.330
more attractable problem for making,
you know, accessible to the

400
00:20:55.330 --> 00:20:58.300
ordinary program or something like
a Sony cell, which has

401
00:20:58.320 --> 00:21:01.270
astounding throughput when correctly deployed
is going to be harder

402
00:21:01.270 --> 00:21:04.800
for the compiler writers and
subsystem writers. Right? But ultimately

403
00:21:04.800 --> 00:21:08.190
if a compiler writer figured
out a way to make

404
00:21:08.190 --> 00:21:13.140
either appropriate language construct or
the correct, maybe jetted decisions,

405
00:21:13.140 --> 00:21:15.630
one could exploit something like
a Sony cell, which has

406
00:21:15.630 --> 00:21:18.930
historically been considered very, very
difficult to write for, and

407
00:21:18.930 --> 00:21:21.390
then abstract that away, right?
I mean, every problem is

408
00:21:21.630 --> 00:21:23.790
solved by another layer of
abstraction. Can we abstract a

409
00:21:23.790 --> 00:21:27.720
way that the toolbox of
different kinds of processors that

410
00:21:27.720 --> 00:21:30.120
is a Sony cell such
that it wouldn't be a

411
00:21:30.120 --> 00:21:33.360
big deal anymore? It's at
least not going to be

412
00:21:33.360 --> 00:21:36.960
easy, you know, and thus,
I I'm, I'm focused on

413
00:21:36.960 --> 00:21:39.720
trying to make some income
incremental process. I'm trying to

414
00:21:40.260 --> 00:21:43.260
take one small step forward,
which is, can we, you

415
00:21:43.260 --> 00:21:46.260
know, take the data, the
common data processing idiom of

416
00:21:46.260 --> 00:21:48.960
sequentially processing records out of
a file and at least

417
00:21:50.040 --> 00:21:53.760
abstract away the parallelism in
that, you know, if we

418
00:21:53.760 --> 00:21:54.930
can do that, that's better
than we can do it

419
00:21:54.930 --> 00:21:56.400
right now. And it's a
step forward. And then we

420
00:21:56.400 --> 00:21:57.840
can start to look at
that as the next wave

421
00:21:57.840 --> 00:21:59.880
of the problem. Now, I
mean, there is, there are

422
00:21:59.880 --> 00:22:03.510
people who have gone deep
on this. If you're running

423
00:22:03.810 --> 00:22:07.740
a classic Java, EEG application,
these kinds of processes, it

424
00:22:07.740 --> 00:22:10.590
works great right now today
because the core of that

425
00:22:10.590 --> 00:22:12.930
web frame has been carefully
engineered to be thread safe.

426
00:22:12.930 --> 00:22:17.610
And it all just works.
But, you know, I'm interested

427
00:22:17.610 --> 00:22:19.650
in this sort of the
more good old fashioned general

428
00:22:19.650 --> 00:22:21.990
purpose data processing application, you
know, the world of Perl

429
00:22:21.990 --> 00:22:25.200
scripts and things. Right. Well,
and interestingly, I think Pearl's

430
00:22:25.200 --> 00:22:27.750
kind of the number one
implementation of their, of your

431
00:22:27.750 --> 00:22:31.020
original wide finder right now.
If I could. Well, the

432
00:22:31.020 --> 00:22:33.810
last time I looked the,
the current wave, there's an

433
00:22:33.810 --> 00:22:36.330
old camel program that is,
that is holding the lead.

434
00:22:37.110 --> 00:22:40.290
Huh. Now how important is
IO in all of this?

435
00:22:40.520 --> 00:22:43.440
I mean, sometimes you hear
about these super powered concurrent

436
00:22:43.440 --> 00:22:46.620
machines that have a, you
know, mediocre IO, so they

437
00:22:46.620 --> 00:22:48.360
can think really fast, but
they just can't get the

438
00:22:48.360 --> 00:22:50.700
information into the process or
fast enough. Right. That's one

439
00:22:50.700 --> 00:22:52.680
of the nice things about
both the Niagara has got

440
00:22:52.680 --> 00:22:54.900
outstandingly, great memory band was.
And when you say IO

441
00:22:54.900 --> 00:22:57.570
these days, you know, you're
also talking about memory bandwidth

442
00:22:57.570 --> 00:22:59.970
because it's typical for these
things to have, you know,

443
00:22:59.970 --> 00:23:03.120
many gigabytes of Ram and
just staging that in and

444
00:23:03.120 --> 00:23:04.860
out of the processor is
a problem before you even

445
00:23:05.160 --> 00:23:08.160
get off the ship or
off, off the, off the,

446
00:23:08.160 --> 00:23:12.630
off the system board. The
question of whether it's IO

447
00:23:12.630 --> 00:23:16.110
bound or not is actually
a very complex question. And,

448
00:23:16.110 --> 00:23:20.130
you know, in a complex
system, that's running an application

449
00:23:20.130 --> 00:23:24.300
or a suite of applications,
as everybody knows, you can,

450
00:23:24.300 --> 00:23:26.040
all you can ever really
do is move the bottleneck

451
00:23:26.040 --> 00:23:28.410
around. Right. You know, because
at some point you're always

452
00:23:28.410 --> 00:23:31.470
going to be bottlenecked on
something. And ideally you'd like

453
00:23:31.470 --> 00:23:33.570
a situation where you run
out of IO, bandwidth and

454
00:23:33.570 --> 00:23:37.380
compute bandwidth at exactly the
same point. It'll never happen,

455
00:23:37.380 --> 00:23:40.590
but you know, it's so
far wide finder has been

456
00:23:40.590 --> 00:23:43.350
doing pretty well. The, the
best, the best programs they've

457
00:23:43.350 --> 00:23:46.100
been running a boat as
fast that disc and possibly

458
00:23:46.100 --> 00:23:49.460
run and getting really, really
good usable utilization of it

459
00:23:49.800 --> 00:23:53.860
all. Did you expect that?
Did you expect them to

460
00:23:53.860 --> 00:23:59.800
become a disc bound quickly?
I actually, I actually thought

461
00:23:59.830 --> 00:24:03.730
it would be more IO
bound than it has been,

462
00:24:03.730 --> 00:24:05.890
but you know, these guys
are doing clever tricks to

463
00:24:05.890 --> 00:24:09.760
actually parallelize the IO as
well. And he said, well,

464
00:24:09.760 --> 00:24:11.200
how can you do that?
There's only one desk. Well,

465
00:24:11.230 --> 00:24:13.090
maybe not true. I mean,
I'm running this on, on

466
00:24:13.120 --> 00:24:15.310
a, on a CSS file
system with two disks in

467
00:24:15.310 --> 00:24:19.000
it. You know, you know,
when you say a disc,

468
00:24:19.000 --> 00:24:20.980
well, these days, particularly when
you're in a large server

469
00:24:20.980 --> 00:24:23.860
environment, a disc can be
an ass or a sand

470
00:24:23.860 --> 00:24:26.440
with eight levels of indirection
and smarts behind it. So,

471
00:24:26.440 --> 00:24:29.260
you know, parallel as an
IO is, is it's a

472
00:24:29.260 --> 00:24:32.950
very realistic kind of thing.
That's interesting. So funny that

473
00:24:32.950 --> 00:24:35.050
we talk about abstractions and
this, this language is a

474
00:24:35.050 --> 00:24:38.620
new language construct that allows
me inappropriate layer of abstraction.

475
00:24:38.620 --> 00:24:40.480
But now we're starting to
think about, well, how would

476
00:24:40.480 --> 00:24:43.060
I write this program if
I had two disc heads

477
00:24:43.060 --> 00:24:47.440
or eight disc heads virtually,
or otherwise, Julie, you know,

478
00:24:48.790 --> 00:24:51.010
push back on that, you
don't want the program to

479
00:24:51.010 --> 00:24:54.190
think about that. You ideally,
you just like the program

480
00:24:54.190 --> 00:24:56.650
or to say, you know,
or the order of evaluation

481
00:24:56.680 --> 00:24:59.830
and this loop is not
significant and let the system,

482
00:24:59.830 --> 00:25:02.020
which has, you know, a
combination of the compiler and

483
00:25:02.020 --> 00:25:04.540
the runtime has a better
knowledge of what kind of

484
00:25:04.540 --> 00:25:07.390
computer is sitting behind them.
Then there's an, the programmer

485
00:25:07.390 --> 00:25:10.360
has let them work it
out, Certainly in an ideal

486
00:25:10.360 --> 00:25:11.890
world. Yes. But don't you
think that some of the

487
00:25:11.890 --> 00:25:14.650
implementations now have a little
bit of carnal knowledge about

488
00:25:14.650 --> 00:25:20.350
the system, Look at the
big web applications, you know,

489
00:25:20.350 --> 00:25:25.240
the Facebooks and my spaces.
And so on of this

490
00:25:25.240 --> 00:25:30.070
world, I would say the
answer is no, in my

491
00:25:30.070 --> 00:25:33.310
experience, they tend to put
memcache D up there and

492
00:25:33.610 --> 00:25:36.160
try and load as much
stuff in, into, into memory

493
00:25:36.160 --> 00:25:37.690
as they can. And they
tend to have this very

494
00:25:37.690 --> 00:25:41.470
abstracted view of, of, of,
you know, they've got processor

495
00:25:41.470 --> 00:25:44.860
instances talking to a great
big memory cache talking back

496
00:25:45.040 --> 00:25:47.410
to the great big relational
pool and maybe one of

497
00:25:47.410 --> 00:25:51.190
these post relational databases in
there. But beyond that, I

498
00:25:51.190 --> 00:25:52.960
don't think there tends to
be, you know, a lot

499
00:25:52.960 --> 00:25:56.560
of system level knowledge about,
you know, the structure of

500
00:25:56.560 --> 00:25:59.740
the processor and the actual
path to the, to the

501
00:25:59.740 --> 00:26:03.310
silicone, Is that an inappropriate
layer of abstraction that they

502
00:26:03.310 --> 00:26:09.910
even could make a differentiation
between disc memory and, and

503
00:26:09.910 --> 00:26:13.210
database. I mean, in a
perfect world, When you started

504
00:26:13.210 --> 00:26:15.340
this conversation, you were talking
about the old thing about

505
00:26:15.340 --> 00:26:17.890
discussed the new tape. And,
well, that's really true because,

506
00:26:18.670 --> 00:26:20.470
you know, we sneer at
this these days and the

507
00:26:20.470 --> 00:26:22.540
comp conventional wisdom is that
for a high volume web

508
00:26:22.540 --> 00:26:25.720
application, you can't have a
desk in the query path

509
00:26:25.750 --> 00:26:27.370
or you're going to get,
you're going to choke and

510
00:26:27.610 --> 00:26:30.040
well, that's not actually true.
Assuming you read and write

511
00:26:30.040 --> 00:26:35.830
the disc sequentially disc actually
have fantastically high performance. If

512
00:26:35.830 --> 00:26:38.500
you treat them as tape
like sequential devices, what you

513
00:26:38.500 --> 00:26:40.570
really can't afford to have
is a random acts of

514
00:26:40.570 --> 00:26:44.160
just doing random access in,
in query path, because on,

515
00:26:44.160 --> 00:26:46.890
you know, commodity describes, if
we'd all like to use,

516
00:26:47.190 --> 00:26:49.320
you know, we were still
limited to a few hundred,

517
00:26:49.320 --> 00:26:52.590
a second, you know, random
accesses, which is clearly, you

518
00:26:52.590 --> 00:26:55.710
know, inappropriate for any kind
of a high volume web

519
00:26:55.710 --> 00:26:58.650
application. But, you know, there's
the notion of having, you

520
00:26:58.650 --> 00:27:01.770
know, disks at the backend
that are best used sequentially,

521
00:27:01.920 --> 00:27:05.670
you know, front ended by
a Memcached D or equivalent,

522
00:27:05.670 --> 00:27:10.170
which as basically has, you
know, very different latency characteristics.

523
00:27:10.590 --> 00:27:12.810
You know, that that's something
that isn't so complicated that

524
00:27:12.810 --> 00:27:17.390
it really, you know, compromises
your system design. Hmm. It

525
00:27:17.390 --> 00:27:20.210
did one thing. It struck
me a little interesting is

526
00:27:20.270 --> 00:27:23.420
the, the number of what
I would consider relatively exotic

527
00:27:23.420 --> 00:27:26.210
languages that people immediately said,
Oh, well just solve white

528
00:27:26.210 --> 00:27:28.550
finger I'll I'll, I'll bring
Earl Lang in which I

529
00:27:28.550 --> 00:27:32.030
don't think of as being
an incredibly mainstream kind of

530
00:27:32.030 --> 00:27:36.380
a language During the first
white binder, I had dug

531
00:27:36.380 --> 00:27:39.920
it myself and spent a
few weeks banging away with

532
00:27:39.950 --> 00:27:42.740
Earl Lang. And boy, does
it ever change? My thinking,

533
00:27:42.740 --> 00:27:44.930
you know, early, I think
early, I think has very

534
00:27:44.930 --> 00:27:47.720
important lessons that we all
need to learn from. And

535
00:27:47.720 --> 00:27:49.910
let me tell you this.
If somebody were to pay

536
00:27:49.910 --> 00:27:52.310
me today to put up
some sort of a big

537
00:27:52.340 --> 00:27:57.050
message, dispatching application that needed
a good performance and it

538
00:27:57.050 --> 00:27:59.810
needed to be up all
the time, you know, no

539
00:27:59.810 --> 00:28:03.350
downtime, it needed to be
up with very high reliability

540
00:28:03.350 --> 00:28:06.200
for months at a time,
I would unhesitatingly choose our

541
00:28:06.200 --> 00:28:08.090
line to build it in,
you know, the kind of

542
00:28:08.090 --> 00:28:11.720
thinking that's gone into you,
don't miss the messaging architecture.

543
00:28:11.720 --> 00:28:16.550
And in particular, the reliability
engineering of Erlang is just

544
00:28:16.820 --> 00:28:19.730
streaks ahead of anything else
I've seen. Now it's a

545
00:28:19.730 --> 00:28:23.930
painful fact. The airline has
extremely bad file IO, extremely

546
00:28:23.930 --> 00:28:27.440
bad string processing and extremely
bad regular expressions, which is

547
00:28:27.440 --> 00:28:30.350
like physical pain too. You
know, scripting language veterans like

548
00:28:30.350 --> 00:28:33.410
me. But as somebody pointed
out, it's probably easier to

549
00:28:33.410 --> 00:28:36.020
fix her lines, file handling
than to have, you know,

550
00:28:36.020 --> 00:28:39.320
the real maintainability engineering wired
onto some, some other language.

551
00:28:39.920 --> 00:28:41.540
No, I don't think her
lying. That's going to take

552
00:28:41.540 --> 00:28:44.210
over and become all that
mainstream because it's just too

553
00:28:44.210 --> 00:28:47.060
weird. It's not object oriented.
The variables aren't variable. It

554
00:28:47.060 --> 00:28:50.300
doesn't have loops. There's, you
know, it really requires a

555
00:28:50.300 --> 00:28:52.520
shift in the way you
think. But, but I do

556
00:28:52.520 --> 00:28:55.640
think that, you know, the,
the, the, the fast growing

557
00:28:55.640 --> 00:28:58.220
languages, you know, the, the
rubies and PHP is, and

558
00:28:58.220 --> 00:29:00.830
Python's of this world need
to learn some of the

559
00:29:00.830 --> 00:29:04.220
languages, the lessons that are,
is trying to teach. Yeah.

560
00:29:04.220 --> 00:29:06.170
I think that's really interesting
because that might my question

561
00:29:06.170 --> 00:29:07.400
that kind of popped in
my head, as you said,

562
00:29:07.400 --> 00:29:09.860
well, it's not object oriented
made me wonder if there

563
00:29:09.860 --> 00:29:12.410
are really, and I use
this phrase a second time,

564
00:29:12.410 --> 00:29:14.570
that the sins of the
father that are still causing

565
00:29:14.570 --> 00:29:17.690
us to maybe head in
the wrong direction, you know,

566
00:29:17.750 --> 00:29:19.490
w P people are saying,
you know, it'll all turn

567
00:29:19.490 --> 00:29:21.530
into lists, but at the
end, but I, I wonder

568
00:29:21.530 --> 00:29:24.680
though, if there's something that
we're just we're missing because

569
00:29:24.680 --> 00:29:27.630
of whether it be x86
or whether it be Oh,

570
00:29:27.720 --> 00:29:30.560
concepts, or just any number
of these different bits of

571
00:29:30.560 --> 00:29:33.920
history that, that are holding
us back from truly. But

572
00:29:33.920 --> 00:29:37.130
that, I mean, clearly there
are some, you know, monuments

573
00:29:37.130 --> 00:29:39.470
that are crumbling and, you
know, the advent of things

574
00:29:39.470 --> 00:29:41.770
like coach DB and simple
DB and table, and so

575
00:29:41.770 --> 00:29:45.430
on, you know, the, the,
the brain locks that the

576
00:29:45.490 --> 00:29:49.420
CR data through SQL has
had on, on our architects

577
00:29:49.460 --> 00:29:51.520
is starting to crack, right?
And there's starting to be

578
00:29:51.520 --> 00:29:54.880
a notion that there are
persistent architectures, persistent architectures that

579
00:29:54.880 --> 00:29:57.970
are not relational. And, you
know, the, the notion that

580
00:29:57.970 --> 00:30:00.820
to get performance, you had
to have a compiled statically

581
00:30:00.820 --> 00:30:03.580
type language, is that, that
notion is crumbling away in

582
00:30:03.580 --> 00:30:05.770
the face of things like
Python and Ruby and rails

583
00:30:05.770 --> 00:30:10.090
and so on. But I
don't get the feeling that

584
00:30:10.090 --> 00:30:14.950
object orientation is under serious
threat, you know, although PHP

585
00:30:14.950 --> 00:30:17.080
as well, the popular there's,
I think there's a general

586
00:30:17.080 --> 00:30:20.080
feeling that it's a shortcoming,
that PHP is not really

587
00:30:20.080 --> 00:30:22.420
natively object oriented. It's just
also, I think, I don't

588
00:30:22.420 --> 00:30:25.600
feel that object orientation is,
is really under attack. And

589
00:30:25.600 --> 00:30:27.850
I do feel that, you
know, the lack of object

590
00:30:27.850 --> 00:30:32.940
orientation and Erlang is it's
a genuine shortcoming, Really <inaudible>

591
00:30:32.940 --> 00:30:36.000
is under attack. What, what
are some constructs that, that

592
00:30:36.000 --> 00:30:38.220
are Well, what I was
just talking about? I mean,

593
00:30:38.460 --> 00:30:40.530
you know, the notion that
all data has to be

594
00:30:40.530 --> 00:30:44.730
under relational is clearly under.
So, so fundamentally the architecture

595
00:30:44.730 --> 00:30:48.420
is All the important languages
look like either Java or

596
00:30:48.420 --> 00:30:51.270
C sharp. It is also
clearly under attack as you

597
00:30:51.270 --> 00:30:54.360
know, Python and Ruby, a
and those kinds of things

598
00:30:55.770 --> 00:30:59.610
have a monotonically increasing market
share, which is not slowing

599
00:30:59.610 --> 00:31:04.440
down at all. Hmm. Interesting.
Well, Tim Bray, thank you

600
00:31:04.440 --> 00:31:05.910
so much for taking the
time to sit down with

601
00:31:05.910 --> 00:31:08.490
me today. I appreciate you
taking the time out of

602
00:31:08.490 --> 00:31:11.580
your day. Good to talk
to you. This has been

603
00:31:11.580 --> 00:31:14.250
another episode of Hanselminutes and
we'll see you again next

604
00:31:14.250 --> 00:31:14.490
week.

