WEBVTT FILE

1
00:00:04.980 --> 00:00:32.930
<inaudible>. This is Lawrence Ryan announcing
Thursday, October the most comprehensive

2
00:00:32.930 --> 00:00:49.250
suite of components online www
dot <inaudible> dot com. Hi,

3
00:00:49.250 --> 00:00:51.230
this is Scott Hanselman and
this is another episode of

4
00:00:51.230 --> 00:00:54.260
Hansel minutes. And today we've
got a very special guest

5
00:00:54.290 --> 00:00:57.890
Chris Walker from secret labs.
Coming on to talk about

6
00:00:57.890 --> 00:01:01.040
a new net Duino project.
We talked to Colin Miller

7
00:01:01.040 --> 00:01:03.320
a little bit, a few
weeks ago about what the

8
00:01:03.320 --> 00:01:06.320
dotnet micro framework is. Now.
I wanted to go straight

9
00:01:06.320 --> 00:01:08.870
to the source of some
hardware. Talk to Chris. How's

10
00:01:08.870 --> 00:01:10.970
it going, sir? Good. Hi
Scott. Good to be on

11
00:01:10.970 --> 00:01:14.600
the show. Very cool. Thank
you for taking the time

12
00:01:16.330 --> 00:01:18.950
before you, you tell us
what you've got cooking over

13
00:01:18.950 --> 00:01:20.780
there. I want to dig
in a little bit on

14
00:01:21.770 --> 00:01:24.470
what exactly you're building, how
you built it. I got

15
00:01:24.470 --> 00:01:28.040
the idea and how this
relates to Arduino. So maybe

16
00:01:28.040 --> 00:01:30.920
you can give me a
little history. All right. No,

17
00:01:30.920 --> 00:01:33.350
very good are are doing
for those that don't know,

18
00:01:33.350 --> 00:01:36.950
is this really cool open
source eight bit platform that

19
00:01:36.950 --> 00:01:39.470
you can use to build
projects? There's a lot of

20
00:01:39.650 --> 00:01:42.800
artists to build electronics projects
from it. That's really kind

21
00:01:42.800 --> 00:01:45.830
of the Genesis of it,
but it allows people who

22
00:01:46.100 --> 00:01:49.490
have never done programming or
never done electronics before to

23
00:01:49.490 --> 00:01:53.120
hook up motors and lights
and things like this to

24
00:01:53.120 --> 00:01:57.410
a microcontroller and to build
things. So net wino is

25
00:01:57.410 --> 00:01:59.390
kind of the next generation
or the extension of that

26
00:01:59.390 --> 00:02:04.370
idea, open source community electronics,
but using the dotnet micro

27
00:02:04.370 --> 00:02:07.790
framework, this really powerful platform,
which allows you to build

28
00:02:07.820 --> 00:02:11.420
even bigger projects, more sophisticated
things at about the same

29
00:02:11.420 --> 00:02:14.750
price. How is that possible
at about the same price?

30
00:02:16.010 --> 00:02:19.010
You know, microcontrollers come down
in price over time and

31
00:02:19.010 --> 00:02:20.780
we've lived in a world
where we had eight bit

32
00:02:20.780 --> 00:02:23.570
computers and then we switched
to 32 beds. Well, this

33
00:02:23.570 --> 00:02:25.850
is the year where we're
starting to see some transition

34
00:02:25.850 --> 00:02:29.120
from APEC microcontrollers, those things
that you have in remote

35
00:02:29.120 --> 00:02:33.770
controls or baby monitors or
pedestrian stoplights, the low end

36
00:02:33.770 --> 00:02:36.650
of the computer processor spectrum.
We're seeing the spectrum of

37
00:02:36.650 --> 00:02:39.890
those to 32 bit as
well. And by using the

38
00:02:39.890 --> 00:02:42.830
dotnet micro framework, we make
it very simple to program

39
00:02:42.830 --> 00:02:46.580
those processors. So the costs
coming down and the dynamic

40
00:02:46.580 --> 00:02:49.220
or framework have kind of
created this perfect universe where

41
00:02:49.220 --> 00:02:51.830
we can now start moving
to that 32 bit world.

42
00:02:53.270 --> 00:02:55.940
So tell me about like
what's on this board. People

43
00:02:55.940 --> 00:02:58.160
can see this. If they
go to knit, do we

44
00:02:58.160 --> 00:03:01.990
know.com and there's some other
hardware vendors that create similar

45
00:03:01.990 --> 00:03:06.330
boards. What's on this little
board. Alright. So on this

46
00:03:06.330 --> 00:03:10.260
board, you have a microcontroller,
the difference you, a microcontroller

47
00:03:10.290 --> 00:03:12.800
and a processor, which would
be in your computer is

48
00:03:12.810 --> 00:03:15.030
it, these are very low
end. There's still 32 beds,

49
00:03:15.360 --> 00:03:17.940
but they have like half
a Meg of storage space

50
00:03:17.940 --> 00:03:20.850
and 128 K of Ram.
So they're like a three

51
00:03:20.850 --> 00:03:24.300
86 from years and years
and years ago. But on

52
00:03:24.300 --> 00:03:26.460
this board, you have a
push button. You have a

53
00:03:26.460 --> 00:03:29.340
bunch of connections where you
can plug in wires, you

54
00:03:29.340 --> 00:03:31.380
have a USB port and
you have a power plug

55
00:03:31.830 --> 00:03:34.470
effectively. What you do with
this board. It's the brain

56
00:03:34.470 --> 00:03:37.100
of your next electronics project.
So you're going to plug

57
00:03:37.110 --> 00:03:39.450
a motor into it. You're
going to plug an led

58
00:03:39.510 --> 00:03:41.790
into it. You're going to
plug a push button or

59
00:03:41.790 --> 00:03:46.800
a ZigBee radio into it.
But it's basically the baseboard

60
00:03:46.800 --> 00:03:49.740
that everything gets built from.
And like you mentioned, it's

61
00:03:49.740 --> 00:03:53.220
actually designed in the Arduino
form factor. So we, our

62
00:03:53.220 --> 00:03:56.430
attempt was to make it
a hundred percent compatible where

63
00:03:56.430 --> 00:03:59.820
possible with all of the
Arduino accessories out there, which

64
00:03:59.820 --> 00:04:01.620
means that there's a ton
of things you can buy

65
00:04:01.950 --> 00:04:04.860
and already plug in and
support the existing open source

66
00:04:04.860 --> 00:04:08.700
hardware community at the same
time. Okay. So assuming that

67
00:04:08.700 --> 00:04:10.740
I don't know anything about
hardware, I know a little

68
00:04:10.740 --> 00:04:12.570
bit, I know enough to
be dangerous, but let's assume

69
00:04:12.570 --> 00:04:14.490
that I, and the listeners
don't know anything about that.

70
00:04:15.030 --> 00:04:18.660
We've got a different processor,
we've got a different kind

71
00:04:18.660 --> 00:04:22.260
of core firmware, an operating
system for this little platform.

72
00:04:22.800 --> 00:04:25.110
What is it that is
compatible? How can you say

73
00:04:25.110 --> 00:04:28.350
that that's compatible with the
daughter boards from Arduino? Are

74
00:04:28.350 --> 00:04:30.990
we compatible at the voltage
level or at the, you

75
00:04:30.990 --> 00:04:34.470
know, what specification are we
compatible with At the pen

76
00:04:34.470 --> 00:04:36.720
and communication level? So actually,
let me, let me go

77
00:04:36.720 --> 00:04:39.390
into that a little bit
on the Arduino boards you

78
00:04:39.390 --> 00:04:42.720
have about 20 different what
are called pins or connection

79
00:04:42.720 --> 00:04:46.260
points where you can hook
in wires or, or LEDs,

80
00:04:46.260 --> 00:04:48.870
et cetera, et cetera. In
those, you have a few

81
00:04:48.870 --> 00:04:51.930
different communication protocols, a few
different ways. You can do

82
00:04:51.930 --> 00:04:55.800
things. You have something called
PWM, which makes waves that

83
00:04:55.950 --> 00:04:58.770
can change the intensity of
that light, or can drive

84
00:04:58.770 --> 00:05:01.650
a motor. You have something
called spy, which is a

85
00:05:01.650 --> 00:05:04.620
communication protocol. That's similar in
some ways to a serial

86
00:05:04.620 --> 00:05:07.380
port on the computer, you
have something called I squared

87
00:05:07.380 --> 00:05:10.440
C, which is another communication
protocol that you can Daisy

88
00:05:10.440 --> 00:05:14.190
chain, multiple devices together on
the net, wino the arm

89
00:05:14.190 --> 00:05:17.460
processor on it. Isn't like
the AVR eight-bit processor on

90
00:05:17.460 --> 00:05:21.360
the Arduino. So we actually
added special circuitry on the

91
00:05:21.360 --> 00:05:24.450
board so that those pin
connections, which you can plug

92
00:05:24.450 --> 00:05:27.390
those shields into are all
at the same place logically

93
00:05:27.720 --> 00:05:29.850
so that when you get
one of those accessory daughter

94
00:05:29.850 --> 00:05:31.920
boards, it will work on
the net. Do we know

95
00:05:31.950 --> 00:05:34.560
you might need to create
a driver? There is a

96
00:05:34.560 --> 00:05:38.070
voltage issue because 32 is
3.3 volts. Whereas eight bet

97
00:05:38.080 --> 00:05:40.860
was primarily five volts, but
the net do we know

98
00:05:40.870 --> 00:05:44.790
digital pins can also accept
five volts signals without damaging

99
00:05:44.790 --> 00:05:49.290
the board. So most cases,
things just work. Okay. So

100
00:05:49.290 --> 00:05:51.030
let me see if I
can translate a few things

101
00:05:51.030 --> 00:05:54.630
for people who may not
be native English speakers, or

102
00:05:54.630 --> 00:05:56.760
may not have a be
hardware, enough people that they,

103
00:05:57.890 --> 00:06:00.320
what you said you've used
the term daughter boards you've

104
00:06:00.320 --> 00:06:03.260
used. The term shields is
that the shield is what

105
00:06:03.260 --> 00:06:06.290
the Arduino guys call these,
these little additional boards that

106
00:06:06.290 --> 00:06:10.360
you stack on top of
the, the main board. Yeah,

107
00:06:10.360 --> 00:06:13.390
that's exactly correct. In the
Arduino community. One of the

108
00:06:13.390 --> 00:06:15.760
really cool things about open
source hardware is because all

109
00:06:15.760 --> 00:06:18.700
the specifications are public. There's
a large group of people

110
00:06:18.700 --> 00:06:21.760
who have created innovative ideas
on how to expand the

111
00:06:21.760 --> 00:06:24.940
platform. And so they've created
what they call shields, which

112
00:06:24.940 --> 00:06:28.270
are expansion boards, which stack
on top. And when I

113
00:06:28.270 --> 00:06:30.970
make something, when I make
hardware open source, like if

114
00:06:30.970 --> 00:06:33.280
I make, if I make
software open source, I release

115
00:06:33.290 --> 00:06:36.100
the source. But with hardware,
I assume I release a

116
00:06:36.100 --> 00:06:39.520
PDF of what the board
looks like, or what do

117
00:06:39.520 --> 00:06:42.040
I release? I'm going to
make a shield that I

118
00:06:42.040 --> 00:06:44.440
want to work with a
net Duino or an Arduino.

119
00:06:45.370 --> 00:06:48.220
So for opensource hardware, you
don't have to make your

120
00:06:48.220 --> 00:06:50.350
hardware open source to make
it work with the Arduino

121
00:06:50.350 --> 00:06:52.060
or the net Dwayne or
any of the open source

122
00:06:52.060 --> 00:06:54.700
sports. We love it. The
community does a lot of

123
00:06:54.700 --> 00:06:57.400
it, but to make your
board open source effectively, what

124
00:06:57.400 --> 00:06:59.980
you do is you publish
the source and the source

125
00:06:59.980 --> 00:07:03.640
comes in two forms. One
is your schematics some day

126
00:07:03.720 --> 00:07:06.910
publish as PDF. Some people
publish in a binary data

127
00:07:06.910 --> 00:07:10.360
file, which can be converted
into a visual representation of

128
00:07:10.630 --> 00:07:13.390
the electronic circuit, like a
PDF. And then the other

129
00:07:13.390 --> 00:07:15.070
is the board design file.
If you go to net,

130
00:07:15.070 --> 00:07:17.410
do we know.com? You go
to the downloads page, you

131
00:07:17.410 --> 00:07:20.500
can actually download the board
design file, which you could

132
00:07:20.500 --> 00:07:23.320
send off to a board
manufacturer. They would actually make

133
00:07:23.320 --> 00:07:25.840
you a board, which looked
like an Edwina. And if

134
00:07:25.840 --> 00:07:27.940
you had Matt soldering skills,
you could actually put one

135
00:07:27.940 --> 00:07:31.660
together yourself. Oh wow. So
I'm looking at this PDF

136
00:07:31.660 --> 00:07:35.950
here. It's a big eight
and a half by 11

137
00:07:36.070 --> 00:07:40.540
PDF. Looks like just one
page. And it's, this is

138
00:07:40.540 --> 00:07:42.430
the description of what I
would need to build my

139
00:07:42.430 --> 00:07:47.230
own net wino board. That's
exactly right. And it's totally,

140
00:07:47.230 --> 00:07:50.500
it's totally open. What is
it licensed in there? So

141
00:07:50.500 --> 00:07:53.350
the license on all of
the board design is commanded

142
00:07:53.380 --> 00:07:57.250
files assigned called creative commons
attribution. And what that means

143
00:07:57.250 --> 00:07:59.020
is you're welcome to use
it. You just need to

144
00:07:59.020 --> 00:08:01.960
say, Hey, this was inspired
by net Duino, but it's

145
00:08:01.960 --> 00:08:04.420
royalty free. You can use
it in your projects. And

146
00:08:04.420 --> 00:08:06.910
if you do build something
with your net, we know

147
00:08:06.910 --> 00:08:08.620
that you want to go
and turn into a commercial

148
00:08:08.620 --> 00:08:11.950
product. You can take our
design files, integrate them into

149
00:08:11.950 --> 00:08:14.530
your own product and go
off and build something and

150
00:08:14.530 --> 00:08:16.600
sell it in the world.
You don't need to stick

151
00:08:16.600 --> 00:08:20.410
a net Duino inside each
inch box. Okay? So the

152
00:08:20.410 --> 00:08:24.490
board has these, these pin
outs, these, these little blue

153
00:08:24.490 --> 00:08:26.620
pin outs, and it says,
once says digital IO and

154
00:08:26.620 --> 00:08:29.290
one says analog in. And
then there's a power block.

155
00:08:29.410 --> 00:08:34.150
These are called, is that
called GPI? So GPIO is,

156
00:08:34.150 --> 00:08:36.790
are the digital pins on
the net? We know we

157
00:08:36.790 --> 00:08:39.910
advertise, the six of them
are analog and 14 of

158
00:08:39.910 --> 00:08:42.760
the pins are digital. In
reality, all of them can

159
00:08:42.760 --> 00:08:46.330
do digital. The analog pins
will also do digital GPIO

160
00:08:46.330 --> 00:08:49.630
means general purpose in footnote.
Now you said I needed

161
00:08:49.630 --> 00:08:52.690
to write a driver though.
Now it's scary enough that

162
00:08:52.690 --> 00:08:55.360
as a software guy, I'm
going to start doing hardware,

163
00:08:56.100 --> 00:08:57.630
but then you said, I
have to write a driver

164
00:08:57.630 --> 00:08:59.580
for something. And that got
really scary because from my

165
00:08:59.580 --> 00:09:02.790
perspective, writing a driver in
windows might be, you know,

166
00:09:02.790 --> 00:09:09.030
extremely low level. And it
has to really conform to

167
00:09:09.030 --> 00:09:13.770
some specification for drivers. But
I think perhaps you might

168
00:09:13.770 --> 00:09:16.500
mean something different when you
say driver in the net

169
00:09:16.500 --> 00:09:19.940
wino world. Yeah. In the,
in the dotnet micro framework

170
00:09:19.940 --> 00:09:22.400
world and the, in the
net Dino world, driver's a

171
00:09:22.400 --> 00:09:26.000
much simpler thing. If you
are hooking up an led

172
00:09:26.270 --> 00:09:29.990
to a pin on the
net, Dino, you simply say,

173
00:09:30.320 --> 00:09:32.600
turn this on and off
that driver has already built

174
00:09:32.600 --> 00:09:35.990
into the micro framework. It's
an object called output port.

175
00:09:36.320 --> 00:09:38.330
If you hook up a
push button and you want

176
00:09:38.330 --> 00:09:40.730
to sense when someone pushes
it, you use an input

177
00:09:40.730 --> 00:09:43.310
port. If you want to
control a motor, you use

178
00:09:43.310 --> 00:09:47.480
a builtin driver called PWM.
All those things are built

179
00:09:47.480 --> 00:09:49.190
in for most of what
you do on a day

180
00:09:49.190 --> 00:09:52.400
to day basis. What you
create drivers for are things

181
00:09:52.400 --> 00:09:55.040
like a GPS sensor. And
really when we say driver

182
00:09:55.040 --> 00:09:57.920
for a GPS sensor, what
we mean is parsing the

183
00:09:57.920 --> 00:10:01.610
GPS messages to pull out
your location. The good news

184
00:10:01.610 --> 00:10:04.760
is there's a huge community
of pers people building net

185
00:10:04.760 --> 00:10:08.030
Duino, drivers, parsers all this
stuff today, and you can

186
00:10:08.030 --> 00:10:10.760
download a lot of them
right off our community forums.

187
00:10:12.230 --> 00:10:16.580
Okay. There's a push button
on this thing. And while

188
00:10:16.580 --> 00:10:18.700
I could get a shield
or I could do without

189
00:10:18.700 --> 00:10:20.630
a board, what if I
just wanted to plug in

190
00:10:21.410 --> 00:10:23.360
an led? What if I
just went to radio shack

191
00:10:23.360 --> 00:10:25.730
and got an led with
two little wires? Could I

192
00:10:25.730 --> 00:10:28.130
just shove those two little
wires into one of these

193
00:10:29.300 --> 00:10:31.880
IO ports and suddenly I'm
I'm, I'm good. And I

194
00:10:31.880 --> 00:10:33.410
can make it so I
can push the button and

195
00:10:33.410 --> 00:10:36.440
that light will turn on.
Yeah, actually, actually you can

196
00:10:36.830 --> 00:10:38.960
two things there. One is
that the push button on

197
00:10:38.960 --> 00:10:41.450
the net do we know
can function as a reset

198
00:10:41.450 --> 00:10:43.400
button or a push button
that you can use in

199
00:10:43.400 --> 00:10:46.280
your code. And there's also
an led built onto the

200
00:10:46.280 --> 00:10:49.880
net Duino so you can
actually create a program, your

201
00:10:49.880 --> 00:10:53.150
first net Duino app blinking
that light. I'm tapping out

202
00:10:53.150 --> 00:10:55.700
Morse code and making your
own little one light version

203
00:10:55.700 --> 00:10:58.040
of Simon, which someone on
the forums is actually dead

204
00:10:58.340 --> 00:11:01.580
using the net Duino itself
by simply getting an led

205
00:11:01.580 --> 00:11:03.860
and plugging it into one
of the pins. And then

206
00:11:03.860 --> 00:11:06.800
into one of the ground
headers, you can now drive

207
00:11:06.800 --> 00:11:09.380
an external led without changing
your code at all. All

208
00:11:09.380 --> 00:11:11.630
you have to do is
say, use that pen. Instead

209
00:11:11.630 --> 00:11:15.740
of the onboard led. When
I, when I start doing

210
00:11:15.740 --> 00:11:18.620
this, I I've got visual
studio installed and I just

211
00:11:18.680 --> 00:11:23.540
plug the net Duino in
via USB and other drivers

212
00:11:23.540 --> 00:11:24.980
to install. Can you kind
of walk me through the

213
00:11:24.980 --> 00:11:28.880
process? Yeah. So the, the
set up process is pretty

214
00:11:28.880 --> 00:11:32.090
straightforward. First, you're going to
need visual studio, all of

215
00:11:32.090 --> 00:11:36.020
the commercial versions work and
visual C-sharp express 2010 also

216
00:11:36.020 --> 00:11:39.590
works beautifully. So once you
have your development environment installed,

217
00:11:39.830 --> 00:11:43.220
you install the.net micro framework,
SDK, and then you install

218
00:11:43.220 --> 00:11:45.920
the net Duino SDK within
it. Do you know, SDK,

219
00:11:45.920 --> 00:11:48.710
it automatically takes care of
all the drivers and all

220
00:11:48.710 --> 00:11:50.990
the libraries for you. So
when you start a visual

221
00:11:50.990 --> 00:11:53.440
studio, you just create a
net Duino app and you're

222
00:11:53.440 --> 00:11:56.040
off and running. Okay. And
then when I'm in my

223
00:11:56.040 --> 00:12:00.630
main, there are these classes
for output port and then

224
00:12:00.630 --> 00:12:03.600
import, how do I hook
those up to the pins?

225
00:12:03.600 --> 00:12:05.160
I mean, is this pretty
low level? I mean, I

226
00:12:05.160 --> 00:12:07.410
need to go and say
pin number one is the

227
00:12:07.410 --> 00:12:09.720
input port that I'm interested
in and things like that.

228
00:12:10.650 --> 00:12:13.440
So this is C sharp.
This is.net. So to Blinken

229
00:12:13.440 --> 00:12:16.470
led, for instance, you're going
to create an output poor

230
00:12:16.470 --> 00:12:20.100
object, and that's as simple
as typing output port led

231
00:12:20.190 --> 00:12:22.740
equals new output port. And
then you tell it which

232
00:12:22.740 --> 00:12:24.990
pen you want to use.
That's all you need to

233
00:12:24.990 --> 00:12:27.480
do to hook it up.
And then you say led

234
00:12:27.480 --> 00:12:30.000
dot, right, true to turn
it on or led dot,

235
00:12:30.000 --> 00:12:32.730
write false to turn it
off. This, this is, this

236
00:12:32.730 --> 00:12:35.160
is very similar to what
you do on the desktop

237
00:12:35.460 --> 00:12:38.130
to print a line to
the screen or to send

238
00:12:38.130 --> 00:12:41.550
a bit of data. Hmm.
And like we heard with

239
00:12:41.580 --> 00:12:45.600
Colin last, last week, it's,
it's a really tiny, but

240
00:12:45.600 --> 00:12:49.890
real little a CLR. It's
got garbage collection and memory

241
00:12:49.890 --> 00:12:53.250
and it behaves exactly like
you'd expect. And the, in

242
00:12:53.250 --> 00:12:55.590
the couple of projects that
I've worked on, you know,

243
00:12:55.590 --> 00:12:57.660
you hit that five and
it really did bugs and

244
00:12:57.660 --> 00:12:59.580
you're stepping through it and
you've got to call stack

245
00:12:59.580 --> 00:13:03.540
and you've got local watches.
It's, it's, it's creepy. And

246
00:13:03.540 --> 00:13:07.860
it's, it's amazing. Well, that,
that's exactly right. And you've

247
00:13:07.860 --> 00:13:10.800
hit on something right there,
which really differentiates this from

248
00:13:10.800 --> 00:13:14.550
the eight-bit open opensource electronics
world, two things. Number one

249
00:13:14.550 --> 00:13:17.730
is you have powerful tools
and a relative bugger. If

250
00:13:17.730 --> 00:13:20.880
you take someone else's app
someone else's project they've built,

251
00:13:20.910 --> 00:13:22.890
you can pause it. You
can step through it. You

252
00:13:22.890 --> 00:13:25.680
can learn how things work.
And then as you create

253
00:13:25.680 --> 00:13:29.160
your own sophisticated projects, when
you run into a bug

254
00:13:29.190 --> 00:13:31.380
in your system, you can
just set a break point

255
00:13:31.470 --> 00:13:33.600
and you can analyze what's
going on in the system.

256
00:13:33.840 --> 00:13:36.660
And you're not trying to
write out print statements through

257
00:13:36.660 --> 00:13:40.830
a serial port and diagnosing
things. You're hyper terminal. The

258
00:13:40.830 --> 00:13:42.930
other side of that coin
is you are using visual

259
00:13:42.930 --> 00:13:45.960
studio. And with, for instance,
the net Duino, plus you

260
00:13:45.960 --> 00:13:48.210
can create an Azure app
in the cloud and a

261
00:13:48.210 --> 00:13:50.700
windows phone app, or frankly,
an iPhone app, cause it's

262
00:13:50.730 --> 00:13:54.300
platform agnostic from a communication
standpoint. And then in that

263
00:13:54.300 --> 00:13:56.340
Duino plus app, and you
can have a whole world

264
00:13:56.340 --> 00:13:59.070
of things talking, using the
same code written in the

265
00:13:59.070 --> 00:14:03.300
same environment, and you can
debug all of them. Hi,

266
00:14:03.300 --> 00:14:05.430
this is Scott coming to
you from another place in

267
00:14:05.430 --> 00:14:08.820
time. Are you using agile
practices to manage your software

268
00:14:08.820 --> 00:14:11.100
development? There's lots of tools
in the market that manage

269
00:14:11.100 --> 00:14:13.020
the steps of a project,
but most of them focus

270
00:14:13.020 --> 00:14:16.350
on individual roles, get ready
for a solution that caters

271
00:14:16.350 --> 00:14:18.900
for the success of the
whole team. Guys at Tellerik

272
00:14:18.930 --> 00:14:22.710
introduced team pulse. It's an
agile project management tool. That'll

273
00:14:22.710 --> 00:14:25.920
help you gather ideas, estimate
plan, track progress in a

274
00:14:25.920 --> 00:14:29.880
common workspace. Finally companies, regardless
of their size can use

275
00:14:29.880 --> 00:14:32.220
a lightweight and convenient tool
that makes all the stakeholders

276
00:14:32.220 --> 00:14:35.220
work as a United team.
Even if they're in different

277
00:14:35.220 --> 00:14:38.850
countries by combining intuitive user
interface and the power server

278
00:14:38.850 --> 00:14:41.790
light team poles removes the
roadblocks that you typically face

279
00:14:41.790 --> 00:14:44.820
and applying agile in an
effective manner, no more lost

280
00:14:44.820 --> 00:14:49.170
data, no disparate systems, no
lack of critical analytics regarding

281
00:14:49.170 --> 00:14:52.550
the health philosophy project. See
if yourself get a free

282
00:14:52.550 --> 00:14:58.010
copy for five users in
one project at tellerik.com/team pulse.

283
00:14:58.760 --> 00:15:02.150
And please do thank Tellerik
for supporting Hanselman it's on

284
00:15:02.150 --> 00:15:07.220
their Facebook fan page, facebook.com/t
L E R I K

285
00:15:07.730 --> 00:15:10.670
Tellerik. We do appreciate it.
There wouldn't be a Hansel

286
00:15:10.670 --> 00:15:14.840
minutes if there wasn't Tellerik
helping us. Okay. So juxtapose

287
00:15:14.840 --> 00:15:17.180
the difference in that we
know, and we know plus,

288
00:15:17.710 --> 00:15:20.800
Okay, so net Torino and
net Duino plus the basic

289
00:15:20.800 --> 00:15:23.890
difference is the nit we
know, plus adds integrated open

290
00:15:23.890 --> 00:15:27.190
source networking, which is also
pretty exclusive here. The ambit

291
00:15:27.190 --> 00:15:29.440
world. You can't do that.
And it also adds a

292
00:15:29.440 --> 00:15:32.500
micro SD slot so that
you can store data. Well

293
00:15:32.500 --> 00:15:34.990
I'm the micro SD could
be, could be gigs. I

294
00:15:34.990 --> 00:15:37.210
mean, I could have like
a sensor array that could

295
00:15:37.210 --> 00:15:39.910
be collecting information and could
just dump it onto the

296
00:15:39.910 --> 00:15:43.570
SD card. Absolutely. You can
put a two gigabyte micro

297
00:15:43.570 --> 00:15:47.920
SD card right in there.
Wow. And I'm using at

298
00:15:47.920 --> 00:15:53.260
Dino's specific file access. Are
we using system.io? You are

299
00:15:53.260 --> 00:15:55.630
using system to IO. It's
just like you were using

300
00:15:55.630 --> 00:16:01.420
the desktop.net framework. That's pretty
cool. And for networking, it's

301
00:16:01.420 --> 00:16:03.910
exactly the same as well.
I've always kind of wondered

302
00:16:03.910 --> 00:16:06.310
if this was a secret
that Microsoft was keeping like

303
00:16:06.580 --> 00:16:08.190
it's, it's a pretty small
team, right? I mean, do

304
00:16:08.200 --> 00:16:10.270
you, do you call Colin
and the guys and like

305
00:16:10.270 --> 00:16:12.850
Don it micro framework team
and just chat with them?

306
00:16:12.850 --> 00:16:15.850
Or is it, is it
different than working with other

307
00:16:16.000 --> 00:16:19.450
people at Microsoft? Yeah, so
the dynamic or framework team

308
00:16:19.450 --> 00:16:21.640
is pretty cool. It's a
small group of people and

309
00:16:21.640 --> 00:16:23.320
then they have some other
people that work with them.

310
00:16:23.380 --> 00:16:26.020
But in addition to that,
there's, what's called the core.net

311
00:16:26.020 --> 00:16:29.020
micro framework team. And I
was actually honored. They invited

312
00:16:29.020 --> 00:16:31.900
one of us from secret
labs to join, but a

313
00:16:31.900 --> 00:16:35.350
couple of companies have representatives
and like a traditional open

314
00:16:35.350 --> 00:16:38.290
source project. A lot of
us are contributing code and

315
00:16:38.290 --> 00:16:40.600
checking things back into the
core. So when we make

316
00:16:40.630 --> 00:16:43.900
a tweak to that micro
framework, let's say for the

317
00:16:43.900 --> 00:16:46.720
net, Duino, you'll actually see
those roll back into the

318
00:16:46.720 --> 00:16:49.780
main code base and benefit
any high end net micro

319
00:16:49.780 --> 00:16:53.140
framework boards, the, you know,
800 megahertz video, decoding ones,

320
00:16:53.170 --> 00:16:58.930
whichever ones out there. Wow.
Have you personally, or has

321
00:16:58.930 --> 00:17:01.270
your, you and your team
changed the framework in some

322
00:17:01.270 --> 00:17:03.640
way? Have you checked in
code that is now shipping

323
00:17:03.640 --> 00:17:07.480
with the framework? Oh yeah,
absolutely. Actually in the QFT

324
00:17:07.480 --> 00:17:10.450
one update, we worked with
the doctor at Microframe or

325
00:17:10.450 --> 00:17:12.940
team to find a bug
in the core. And that

326
00:17:12.940 --> 00:17:16.000
was actually checked in during
the development of net Duino

327
00:17:16.270 --> 00:17:18.100
we were actually pretty active
and I don't want to

328
00:17:18.100 --> 00:17:20.560
take much credit for our
team of helping drive the

329
00:17:20.560 --> 00:17:23.380
dotnet micro framework because, you
know, we might help with

330
00:17:23.380 --> 00:17:26.860
0.0, 1% of the code.
The guys at Microsoft spent

331
00:17:26.860 --> 00:17:31.030
years making this thing. It's
a pretty amazing platform. Was

332
00:17:31.030 --> 00:17:33.070
it a big deal for
them to take, take, take

333
00:17:33.130 --> 00:17:35.980
backs? Because I mean, I
really try to push open

334
00:17:35.980 --> 00:17:38.950
source that I work in
the, in the web stack

335
00:17:39.490 --> 00:17:42.790
and you know, we're, we're
slowly turning this ship around

336
00:17:43.540 --> 00:17:45.700
in being able to take
takebacks will be a big

337
00:17:45.730 --> 00:17:48.010
deal. When we, you know,
when we start doing it

338
00:17:48.130 --> 00:17:51.390
on a regular basis, do
you have any idea how,

339
00:17:51.430 --> 00:17:54.120
how they're pulling this off,
how they're able to do

340
00:17:54.120 --> 00:17:57.740
this so smoothly? What sorts
of Microsofts and interesting thing

341
00:17:57.800 --> 00:18:00.290
people have traditionally looked at
Microsoft as a company, which

342
00:18:00.290 --> 00:18:03.140
doesn't give things out, or
if they give things out,

343
00:18:03.140 --> 00:18:05.060
they're not giving you the
source code, there's a special

344
00:18:05.060 --> 00:18:07.250
license to it. There's been
a lot of misconceptions of

345
00:18:07.250 --> 00:18:10.970
intent, I think in the
past, or maybe not the

346
00:18:10.970 --> 00:18:14.660
reality of the situation is
that Microsoft is started adopting.

347
00:18:14.660 --> 00:18:17.930
What's called the Apache 2.0
license, which is an industry

348
00:18:17.930 --> 00:18:22.220
standard, open source license.net micro
framework uses it. Iron Python

349
00:18:22.220 --> 00:18:25.490
uses it. But what this
allows us to do is

350
00:18:25.490 --> 00:18:28.400
use the code Plex website
at Microsoft to do open

351
00:18:28.400 --> 00:18:31.670
source projects, just like a
traditional open source project, like

352
00:18:31.670 --> 00:18:35.960
Linux there's still control over
the project. Every project has

353
00:18:35.960 --> 00:18:38.840
its leaders and people that
approve check-ins et cetera, et

354
00:18:38.840 --> 00:18:41.210
cetera, but we can go
to COVID Plex and simply

355
00:18:41.210 --> 00:18:45.650
submit code. That's pretty cool.
I hope that it's like

356
00:18:45.650 --> 00:18:47.720
that with most things, you
know, that's my goal. That's

357
00:18:47.720 --> 00:18:48.920
one of the reasons I
came to work here was

358
00:18:48.920 --> 00:18:51.680
to make sure that that
everyone could do that. And

359
00:18:51.880 --> 00:18:54.710
it sounds like it's slowly
but surely we're gonna, we're

360
00:18:54.710 --> 00:18:58.160
going to make it happen.
Well, in, in the.net micro

361
00:18:58.160 --> 00:19:02.120
framework, 4.1, there were entire
classes that were donated. Some

362
00:19:02.120 --> 00:19:05.930
expanded collection capabilities for instance,
were donated by members of

363
00:19:05.930 --> 00:19:08.600
the community. Yeah. I mean,
that's the way, that's the

364
00:19:08.600 --> 00:19:10.160
way it should be, right?
It should be more than

365
00:19:10.160 --> 00:19:13.940
just bugs. It should be
a ongoing collaboration. I think

366
00:19:14.750 --> 00:19:18.140
with the community that you
were gonna, you were going

367
00:19:18.140 --> 00:19:19.940
to announce something today, you've
got the net, do we

368
00:19:19.940 --> 00:19:22.460
know you got the net
Reno plus that adds a

369
00:19:22.790 --> 00:19:26.840
networking and adds to the
SD card slot, but you've

370
00:19:26.840 --> 00:19:29.960
got something that you've been
cooking up. We have a,

371
00:19:29.990 --> 00:19:32.360
we have a little surprise
today. It's a, it's a

372
00:19:32.360 --> 00:19:35.570
new project. We have two
surprises. The first is for

373
00:19:35.570 --> 00:19:37.970
that net plus book there's
under that, that we know

374
00:19:38.000 --> 00:19:41.120
plus board, there's actually a
book coming out called getting

375
00:19:41.120 --> 00:19:44.150
started with the internet of
things published by O'Reilly, which

376
00:19:44.150 --> 00:19:46.850
we'll be putting sample chapters
of that on our website

377
00:19:46.910 --> 00:19:49.460
<inaudible> dot com in the
next week or two. So

378
00:19:49.460 --> 00:19:51.620
people can check that out
and see how to build

379
00:19:51.920 --> 00:19:55.400
internet connected devices using dotnet
micro framework that can also

380
00:19:55.400 --> 00:19:59.570
talk to.net apps on the
desktop. That's surprise number one,

381
00:20:00.080 --> 00:20:02.690
but surprise number two, which
I think you're alluding to

382
00:20:03.110 --> 00:20:05.300
is a new net. Duino
it's called the net Dino

383
00:20:05.300 --> 00:20:09.050
mini, and it's a tiny
it's like 0.7, two square

384
00:20:09.050 --> 00:20:12.260
inches version of the net.
Duino that you can not

385
00:20:12.260 --> 00:20:16.490
only plug into a breadboard
to do traditional electronics design,

386
00:20:16.940 --> 00:20:19.430
but when you create something
with your regular net Torino

387
00:20:19.490 --> 00:20:21.710
and you want to go
to market with it, it

388
00:20:21.710 --> 00:20:24.410
gives you a really inexpensive,
tiny little chip. You can

389
00:20:24.410 --> 00:20:28.130
solder into a simple circuit
board and make real products.

390
00:20:29.870 --> 00:20:31.640
Okay. Wow. Okay. So let
me see if I understand

391
00:20:31.640 --> 00:20:35.030
this. Cause then the Duino
itself, the one that we

392
00:20:35.030 --> 00:20:40.910
play with, you know, with
the kit is what, what's

393
00:20:40.910 --> 00:20:45.170
the size of this thing?
It's like three or three

394
00:20:45.170 --> 00:20:49.830
inches by something it's like
2.1, three inches. Yeah, absolutely.

395
00:20:49.830 --> 00:20:54.040
It's 2.8 by 2.1, 2.8
by 2.1. So, you know,

396
00:20:54.040 --> 00:20:57.420
you kind of visualize that
folks that are listening and

397
00:20:57.420 --> 00:20:59.790
you, you might say, well,
now I've got it working

398
00:20:59.790 --> 00:21:03.210
and it's kind of this
Frankenstein prototype. How am I

399
00:21:03.210 --> 00:21:05.820
going to shoehorn this, you
know, two inch by three

400
00:21:05.820 --> 00:21:08.550
inch thing into my, my
project. How big is the

401
00:21:08.550 --> 00:21:13.110
mini It's an inch it's
just over an inch long

402
00:21:13.200 --> 00:21:17.820
and 0.6 inches wide. It's
1.2 by 0.6 inches. It's

403
00:21:17.820 --> 00:21:21.390
the exact same size as
a standard 1.2 inch depth

404
00:21:21.420 --> 00:21:25.500
microprocessor chip, like you might
see in an electronics product

405
00:21:25.500 --> 00:21:30.270
today. It is tiny, tiny,
tiny. Wow. Okay. And does

406
00:21:30.270 --> 00:21:34.170
it have the same 32
bit microcontrollers still 48 megahertz

407
00:21:34.170 --> 00:21:35.910
and it's an arm and
it's got the same storage

408
00:21:35.910 --> 00:21:39.270
and Ram has the bigger
one. It actually does. It's

409
00:21:39.270 --> 00:21:42.450
the exact same processor and
it's in a different size

410
00:21:42.450 --> 00:21:45.210
of what's called a package
in order to fit it

411
00:21:45.210 --> 00:21:47.280
onto this size. We had
to use a little more

412
00:21:47.280 --> 00:21:50.790
expensive version of the microcontroller,
but you actually get a

413
00:21:50.790 --> 00:21:54.270
little bit more Ram because
it's a microchip form factor

414
00:21:54.330 --> 00:21:57.090
or a dip chip form
factor. It doesn't have USB

415
00:21:57.090 --> 00:22:00.300
on it. It has an
RSD 32 port. Well that

416
00:22:00.300 --> 00:22:02.010
saves us a little bit
of memory. So you actually

417
00:22:02.010 --> 00:22:06.810
get 4k extra space. I
think that's just such a

418
00:22:06.810 --> 00:22:10.110
different world. The idea that
it's 2010 and that people

419
00:22:10.110 --> 00:22:12.570
will rejoice in that extra
4k cause I'm sure that

420
00:22:12.570 --> 00:22:15.210
the people who are listening
are like, yes, the four

421
00:22:15.210 --> 00:22:19.020
candidates arrived and I can,
I, can You only get

422
00:22:19.020 --> 00:22:21.300
about two K of Ram
on most of the chips?

423
00:22:21.300 --> 00:22:23.490
So the fact that we
started with 60 and now

424
00:22:23.490 --> 00:22:25.950
we're going up to 64,
it's like, we, we, we

425
00:22:25.950 --> 00:22:29.070
doubled what you used to
have right there with four.

426
00:22:29.960 --> 00:22:32.730
That's awesome. So like, I'm
like, I'm looking at my,

427
00:22:33.270 --> 00:22:35.640
the electronics products that I
have all over my desk

428
00:22:35.640 --> 00:22:40.470
here. I've got my, my
job on a Bluetooth headset.

429
00:22:40.500 --> 00:22:42.960
I've got my, my electronic
watch. I've got my M

430
00:22:42.960 --> 00:22:46.500
audio microtrack audio recorder. And
I'm realizing that all of

431
00:22:46.500 --> 00:22:51.180
these consumer electronic devices are
smaller than the original net

432
00:22:51.180 --> 00:22:55.590
Duino, which makes sense for,
for hobbyists. But the, the

433
00:22:55.590 --> 00:22:57.480
men that do, you know,
many will fit in any

434
00:22:57.480 --> 00:23:01.350
of these, even inside the,
the job own tiny Bluetooth

435
00:23:01.680 --> 00:23:05.280
headset. So you expect people
will make commercial products with

436
00:23:05.280 --> 00:23:10.170
this. Well, yes and no.
Yeah, absolutely. Yes, but there's

437
00:23:10.170 --> 00:23:12.600
actually three markets here for
the net. We know many,

438
00:23:13.350 --> 00:23:17.610
a lot of educators like
teaching with the traditional microchip

439
00:23:17.610 --> 00:23:21.360
debt form factor as, as
an actual teaching aid. So

440
00:23:21.360 --> 00:23:23.970
people are learning at a
more raw level, how these

441
00:23:23.970 --> 00:23:27.000
things work. You also have
the commercial world and we

442
00:23:27.000 --> 00:23:30.450
already have some test customers
who are playing with the

443
00:23:30.450 --> 00:23:32.310
net. We know many and
are looking at putting it

444
00:23:32.310 --> 00:23:36.660
into testing apparatuses products, et
cetera. But, you know, for

445
00:23:36.810 --> 00:23:40.260
users who are using net
dinos and building things, making

446
00:23:40.260 --> 00:23:43.740
UAV, making a lot of
different projects, net Dino's, even

447
00:23:43.740 --> 00:23:46.430
though they're small are still
big. And it's something like

448
00:23:46.430 --> 00:23:49.010
a net wino mini, which
is almost weightless it's so

449
00:23:49.010 --> 00:23:52.970
light just makes the perfect
hobbyist product as well. And

450
00:23:52.970 --> 00:23:55.190
it's less than $30. So
it's kind of a no

451
00:23:55.190 --> 00:23:58.420
brainer just to pick one
up. Wow. That's cool. Well,

452
00:23:58.450 --> 00:24:02.890
very cool. Congratulations. No, we're,
I'm excited to talk about

453
00:24:02.890 --> 00:24:04.570
it on your show. This
is going to be a

454
00:24:04.570 --> 00:24:07.390
surprise to a lot of
people. I'm glad. I'm glad.

455
00:24:07.840 --> 00:24:09.460
So tell me about some
of the cool things that

456
00:24:09.460 --> 00:24:12.070
people have built is, I
mean, I've, I'm still throwing

457
00:24:12.070 --> 00:24:13.960
kind of think about what
I could build and I've

458
00:24:13.960 --> 00:24:16.450
been doing some basics. I've
been learning, I've done, you

459
00:24:16.450 --> 00:24:19.450
know, Morse code. And I,
I played with some Arduino

460
00:24:19.450 --> 00:24:24.340
stuff hooking up a, an
existing old RS, two 32

461
00:24:24.340 --> 00:24:26.020
piece of hardware. And I'm
trying to think about how

462
00:24:26.020 --> 00:24:28.600
I could move that over
to an environment that I'm

463
00:24:28.600 --> 00:24:31.060
more familiar with. But tell
me about some of the

464
00:24:31.060 --> 00:24:34.630
projects that people are building.
Oh, absolutely. And this is,

465
00:24:34.630 --> 00:24:36.610
this is what gets me
most excited. You know, as

466
00:24:36.610 --> 00:24:37.990
much as net do we
know as a, as a,

467
00:24:37.990 --> 00:24:40.720
as a product and a
microcontroller board, you can use

468
00:24:40.720 --> 00:24:44.860
to take your.net skills and
apply them to electronics. It's

469
00:24:44.860 --> 00:24:48.130
a community, a community of
people building really, really awesome

470
00:24:48.130 --> 00:24:52.210
projects. And we like to
celebrate those first of all,

471
00:24:52.360 --> 00:24:54.640
go to the projects page
or the community page on

472
00:24:54.640 --> 00:24:56.590
that tweener.com. And you'll see
some of the stuff people

473
00:24:56.590 --> 00:24:59.140
are building, but since you
mentioned it, let me name

474
00:24:59.140 --> 00:25:01.660
a few of them that
I personally love that people

475
00:25:01.660 --> 00:25:06.340
have built already. How's that?
Okay. So one of my

476
00:25:06.340 --> 00:25:11.110
favorites is actually a, a
Morse code Dakota. There's the

477
00:25:11.110 --> 00:25:15.070
projects range from what people
call pointless to really cool

478
00:25:15.160 --> 00:25:19.360
and community member Hari built
a March code Dakota. Someone

479
00:25:19.360 --> 00:25:22.180
had created an app which
took strings of text and

480
00:25:22.180 --> 00:25:24.490
blink them out via the
led on the net. We

481
00:25:24.490 --> 00:25:27.880
know in Morse code, old
school style. So Hari saw

482
00:25:27.880 --> 00:25:29.950
that and said, Oh, one
up that. And so he

483
00:25:29.950 --> 00:25:32.550
took a light sensor and
a breadboard at a net

484
00:25:32.560 --> 00:25:36.910
wino and decodes the messages
and puts them out on

485
00:25:36.910 --> 00:25:39.820
an LCD text display. So
you could have say a

486
00:25:39.820 --> 00:25:42.940
net wino plus getting tweets
from the internet, blinking the

487
00:25:42.940 --> 00:25:45.700
mountain Morse code, and then
another net. Do we know

488
00:25:45.760 --> 00:25:48.400
sensing those via a light
sensor and printing out the

489
00:25:48.400 --> 00:25:51.070
text to a display, which
most people would say would

490
00:25:51.070 --> 00:25:54.210
be completely pointless, but he
had so much fun building

491
00:25:54.220 --> 00:25:56.890
it. You could see his
joy in his posts on

492
00:25:56.890 --> 00:26:00.730
the website. Other community members
have created their own traffic

493
00:26:00.730 --> 00:26:05.770
lights. Community members have created
music players, which takes super

494
00:26:05.770 --> 00:26:09.670
Mario brothers theme and play
it out RFID reader apps,

495
00:26:09.910 --> 00:26:13.180
which consents your car, pulling
into the garage or the

496
00:26:13.180 --> 00:26:18.340
distance of something. If you
look at the forums, you'll

497
00:26:18.340 --> 00:26:21.370
see a colorimeter that was
created by David Powell, from Hartford

498
00:26:21.370 --> 00:26:25.810
hackerspace, a local maker group
down in Hartford. And it

499
00:26:25.810 --> 00:26:27.670
senses the color of something
you put in front of

500
00:26:27.670 --> 00:26:30.580
it and then changes the
led to match. Chris. Ceto

501
00:26:30.580 --> 00:26:34.810
created a self driving car.
It's a little model car,

502
00:26:34.930 --> 00:26:38.410
although it's pretty powerful, which
uses this really rich GPS

503
00:26:38.410 --> 00:26:43.980
library, gyros, accelerometers, and it
can navigate itself through different

504
00:26:44.430 --> 00:26:49.640
mazes or in its own
little. Wow. Okay. What's what's

505
00:26:49.640 --> 00:26:51.650
the biggest project that's been
made as far as like

506
00:26:51.650 --> 00:26:56.240
the most sophisticated where have
any project snuck up on

507
00:26:56.240 --> 00:26:57.770
you where you said, wow,
this guy came out of

508
00:26:57.770 --> 00:27:02.540
nowhere with this. Yeah. You
know, I would say that

509
00:27:02.570 --> 00:27:05.210
people who are putting that
dinos and balloons and sending

510
00:27:05.210 --> 00:27:09.080
them up with camera, shutter,
timers, and GPS receivers, or

511
00:27:09.080 --> 00:27:11.750
people who are creating the,
you know, self driving car

512
00:27:11.750 --> 00:27:15.800
like Chris dados rawr, I
think those are probably on

513
00:27:15.800 --> 00:27:18.380
the, on the most sophisticated
dance, the simpler ones, you

514
00:27:18.380 --> 00:27:21.050
know, the breathalyzers and the
Morse code decoders are a

515
00:27:21.050 --> 00:27:23.300
lot of fun and, and
some of them are quick

516
00:27:23.300 --> 00:27:26.090
and some of them are
not, but the really rich

517
00:27:26.090 --> 00:27:30.320
ones with GPS and sensors
and communication between multiple networks

518
00:27:30.450 --> 00:27:33.860
via ZigBee, those are, those
are really impressive. And what's

519
00:27:33.860 --> 00:27:35.930
crazy is they've been put
together in a matter of

520
00:27:35.930 --> 00:27:40.730
days. No, you just use
a term called ZigBee. Can

521
00:27:40.730 --> 00:27:44.000
you explain what that is?
Yeah. So ZigBee is a

522
00:27:44.000 --> 00:27:48.170
wireless protocol. Think of something
like a series of a

523
00:27:48.170 --> 00:27:51.920
wireless serial port, except it
can bounce between devices. So

524
00:27:51.920 --> 00:27:54.350
you're not limited to just
direct range. You can have

525
00:27:54.350 --> 00:27:56.870
a bunch of devices talking
to each other that repeat

526
00:27:56.870 --> 00:27:59.570
through each other. And there's
an XP shelled XB as

527
00:27:59.570 --> 00:28:03.680
a brand name for the
ZigBee protocol. You can plug

528
00:28:03.680 --> 00:28:06.350
into an Edwina and then
you can talk between multiple

529
00:28:06.350 --> 00:28:09.380
net dinos wirelessly. So you
can have a small army

530
00:28:09.380 --> 00:28:13.250
of swarm bots, which communicate
and dig into rebel at

531
00:28:13.250 --> 00:28:16.550
a disaster site, take photos
of people and relay back

532
00:28:16.550 --> 00:28:19.850
their coordinates. It's really crazy
stuff. Wow. So it is

533
00:28:19.850 --> 00:28:22.520
a series. It's a wireless
serial port. It's just as

534
00:28:22.520 --> 00:28:24.920
simple as talking to a
serial port. It's a wireless

535
00:28:24.920 --> 00:28:27.710
protocol. It can represent a
serial port. You could do

536
00:28:27.710 --> 00:28:29.690
all kinds of things with
it, but most people just

537
00:28:29.690 --> 00:28:35.060
use it as a syrup.
Okay. Most people who are

538
00:28:35.060 --> 00:28:38.090
listening probably took some hardware
classes in college, but you

539
00:28:38.090 --> 00:28:40.670
know, they may have forgotten
a lot of that. And

540
00:28:40.670 --> 00:28:43.640
I, you know, I find
that when I'm doing hardware,

541
00:28:43.640 --> 00:28:49.010
that's not net Duino related.
I'm thinking about voltages and

542
00:28:49.370 --> 00:28:52.250
resistors. And I get the
old multimedia out. How much

543
00:28:52.310 --> 00:28:55.190
time do I have to
spend in this environment thinking

544
00:28:55.190 --> 00:28:57.620
about things like that, lower
level stuff, where can I

545
00:28:57.620 --> 00:29:02.660
build a project without ever
getting my multimeter out? A

546
00:29:02.660 --> 00:29:05.270
lot of our users do
not have multi meters. We

547
00:29:05.270 --> 00:29:07.280
don't list it on the
standard list of what you

548
00:29:07.280 --> 00:29:10.850
need to use a net
to know that said, you

549
00:29:10.850 --> 00:29:13.940
know, having advanced tools like
a multimeter, which aren't terribly

550
00:29:13.940 --> 00:29:17.030
expensive is a really great
thing to have your, your

551
00:29:17.030 --> 00:29:20.240
best resource honestly, is the
net Duino community that you

552
00:29:20.240 --> 00:29:22.250
go to the net doing
a website, click on community.

553
00:29:22.520 --> 00:29:24.680
And there are hundreds of
people who are chatting about

554
00:29:24.680 --> 00:29:28.310
projects that they're building, growing
the thousands actually. And they'll

555
00:29:28.310 --> 00:29:30.650
help you. If you have
a question they can actually

556
00:29:30.650 --> 00:29:34.700
teach you about electronics, there's
tutorials online. There's tons of

557
00:29:34.700 --> 00:29:36.950
C sharp code out there.
It's really easy to get

558
00:29:36.950 --> 00:29:40.940
into this. Okay. Well, that's
cool. Well, I know that

559
00:29:41.440 --> 00:29:43.300
Pete Brown and I have
been having a lot of

560
00:29:43.300 --> 00:29:46.870
fun playing with this and
ultimately it's just trying to

561
00:29:46.870 --> 00:29:49.210
figure out what we want
to do. Just trying to

562
00:29:49.210 --> 00:29:54.480
think about the possibilities, you
know? Yep. Have I given

563
00:29:54.480 --> 00:29:58.110
you some ideas here? You
have, I've got this arcade

564
00:29:58.110 --> 00:30:01.320
machine that I built a
while back a retro retro

565
00:30:01.320 --> 00:30:06.630
arcade, and I never hooked
up the, the coin slot.

566
00:30:06.780 --> 00:30:09.390
I never hooked up the
quarter slot. So was trying

567
00:30:09.390 --> 00:30:11.040
to figure out what I
could build that would do

568
00:30:11.040 --> 00:30:14.850
something cool. Maybe keeping track
of how many, how many

569
00:30:14.850 --> 00:30:17.310
coins are in the slot.
Maybe build it with one

570
00:30:17.310 --> 00:30:20.930
of my sons and see
if I could get this

571
00:30:21.270 --> 00:30:25.350
30 year old hardware to,
to hook up to the

572
00:30:25.380 --> 00:30:29.430
brand new hardware and then
register that acquaint has been

573
00:30:29.430 --> 00:30:32.970
entered in. Yeah, absolutely. And
if that queen slot has

574
00:30:32.970 --> 00:30:37.140
a sensor, which sends a
voltage signal or changes a

575
00:30:37.200 --> 00:30:41.820
analog sensor, whenever a coin
goes in, you can interface

576
00:30:41.820 --> 00:30:44.610
that with the existing dotnet
micro framework, you don't need

577
00:30:44.610 --> 00:30:47.610
anything extra. Hmm. So I
wouldn't need, I would, I

578
00:30:47.610 --> 00:30:50.700
would make a driver for
my 30 year old queen

579
00:30:50.700 --> 00:30:53.310
slot. I think that would
probably be just talk to

580
00:30:53.310 --> 00:30:56.310
this pen and listen for
voltage. And we love old

581
00:30:56.310 --> 00:31:00.030
technology. Someone created an extra
sketch, a project using a

582
00:31:00.210 --> 00:31:03.030
using dotnet micro framework that
you put in a drawing

583
00:31:03.030 --> 00:31:06.030
in it. It actually turns
that ops. It's amazing how

584
00:31:06.030 --> 00:31:07.830
you can take the old
technology and the new and

585
00:31:07.830 --> 00:31:11.580
just mash them together. Very
cool. Well, thanks so much

586
00:31:11.580 --> 00:31:13.830
for coming on the show
and sharing that with, with

587
00:31:13.830 --> 00:31:15.570
us. And, and when can
we get more information with

588
00:31:15.570 --> 00:31:19.080
the net? We know Minnie,
So the net, no mini

589
00:31:19.470 --> 00:31:21.390
will actually be live in
the next few days on

590
00:31:21.390 --> 00:31:24.450
the website. It shipping next
month, a number of resellers

591
00:31:24.450 --> 00:31:26.850
will be taking preorders on
it, but all the specs

592
00:31:26.850 --> 00:31:29.700
are on the website at
net. Do we know.com forward

593
00:31:29.700 --> 00:31:32.430
slash net? Do we know
many? Cool. And then I

594
00:31:32.430 --> 00:31:35.460
would also encourage folks who
haven't heard already the, to

595
00:31:35.460 --> 00:31:37.500
listen to the show with
Colin Miller, it goes into

596
00:31:37.500 --> 00:31:41.730
more detail about the dominance
micro framework itself, and what's

597
00:31:41.730 --> 00:31:44.070
going on at that level.
And that you can see,

598
00:31:44.070 --> 00:31:49.110
I think it's net mf.com.
Thank you so much. And

599
00:31:49.110 --> 00:31:52.140
this has been another episode
of Hanselminutes and we'll see

600
00:31:52.140 --> 00:31:52.950
you again next week.

