WEBVTT FILE

1
00:00:12.020 --> 00:00:16.970
From Hanselman it's dot com.
It's Hansel minutes, a weekly

2
00:00:16.970 --> 00:00:21.080
discussion with web developer and
technologists. Scott Hanselman hosted by

3
00:00:21.080 --> 00:00:26.840
Carl Franklin. This is Lawrence Ryan announcing
Sean. Number 79. Recorded live

4
00:00:26.840 --> 00:00:33.410
Wednesday, August 29th, 2007. Support for Hansel
minutes is provided by Tellerik

5
00:00:33.440 --> 00:00:37.370
already controls the most comprehensive
suite of components for windows

6
00:00:37.370 --> 00:00:49.040
forms and asp.net web application.
online@wwwdottelerikdotcomandby.net developers journal the world's

7
00:00:49.070 --> 00:00:55.610
leading.net developer magazine online at
www dot <inaudible> dot com.

8
00:00:56.510 --> 00:00:59.360
In this episode, Scott and
Carl, talk about linked to

9
00:00:59.360 --> 00:01:07.130
XML. Hi, this is Carl Franklin
and you're listening to Hansel

10
00:01:07.130 --> 00:01:09.650
minutes from Hansel and it's
dot com. Scott and I

11
00:01:09.650 --> 00:01:12.440
are here to talk about
linked to XML. Hi Scott.

12
00:01:12.830 --> 00:01:15.290
Hey, how's it going? I'm
doing well. Thanks. How are

13
00:01:15.290 --> 00:01:19.850
you? I am ensconced in
XML. I am up to

14
00:01:19.850 --> 00:01:23.000
my ears in this stuff.
I always have been well.

15
00:01:23.000 --> 00:01:25.790
Yeah, but you know, you
don't really learn stuff until

16
00:01:25.790 --> 00:01:28.760
you really, really sit down
and try to apply something

17
00:01:28.940 --> 00:01:31.850
significant to it. And one
of the things that you

18
00:01:31.850 --> 00:01:34.880
can trouble with now that
I'm expecting, I'm going to

19
00:01:34.880 --> 00:01:36.890
get in trouble with, with,
with the blogging. And a

20
00:01:36.890 --> 00:01:39.140
couple of people have mentioned
it. They said, well, you're

21
00:01:39.140 --> 00:01:41.390
gonna go to work for
Microsoft now. But the thing

22
00:01:41.390 --> 00:01:43.340
that made your blog really
interesting was that you were

23
00:01:43.340 --> 00:01:47.420
doing real work with these
technologies. So the things that

24
00:01:47.420 --> 00:01:49.880
I would bump into were
kind of corner cases of,

25
00:01:50.180 --> 00:01:52.490
of real life, right? If
you get into the whole

26
00:01:52.490 --> 00:01:54.560
kind of like let's write
books and give talks and

27
00:01:54.560 --> 00:01:58.580
blog, you know, what software
are you really trying to

28
00:01:59.000 --> 00:02:02.780
create? So I'm trying to
build some stuff and I'm

29
00:02:02.780 --> 00:02:06.830
using linked to XML and
I'm, you know, figuring out

30
00:02:07.670 --> 00:02:09.920
cause I was a big
XML guy before when I

31
00:02:09.920 --> 00:02:12.470
say big XML guy, I
mean a big system dot

32
00:02:12.470 --> 00:02:17.570
XML guy. I love XML
reader, XML writer, huge XML

33
00:02:17.570 --> 00:02:20.840
serializer guy. When people were
dogging the XML sterilizer, I

34
00:02:20.840 --> 00:02:22.460
was doing all sorts of
crazy stuff with it. So

35
00:02:22.460 --> 00:02:25.040
I mean, I'm a huge
fan of that. So when

36
00:02:25.040 --> 00:02:28.610
I started playing with linked
to XML, I was kinda

37
00:02:28.610 --> 00:02:31.880
trying to get my mind
around it. And I'm realizing

38
00:02:31.880 --> 00:02:36.260
that it's really two things.
There's the new classes, there's

39
00:02:36.260 --> 00:02:37.760
a whole series of new
classes, right? So there's a

40
00:02:37.760 --> 00:02:42.050
new namespace system.xml.link. And there's
some new classes like X

41
00:02:42.050 --> 00:02:46.970
document X element X attribute,
but, and those things are

42
00:02:46.970 --> 00:02:51.110
really separate. A whole separate
XML. API has been imagined

43
00:02:51.530 --> 00:02:53.630
completely separate from link. This
has nothing to do with

44
00:02:53.640 --> 00:02:56.660
link though, right? Cause link
is about a syntax and

45
00:02:56.660 --> 00:03:00.700
some APIs and about compiler
support. But what I'm trying

46
00:03:00.700 --> 00:03:04.450
to say is that even
if link didn't exist yeah.

47
00:03:04.540 --> 00:03:07.420
X document XL, et cetera.
But those things in that

48
00:03:07.420 --> 00:03:11.400
new model would be still
very interesting. It's still, still

49
00:03:11.400 --> 00:03:15.120
much better than X path.
Well, yeah, it's, it's very

50
00:03:15.120 --> 00:03:17.880
interesting though that the concepts
are there, but remember one

51
00:03:17.880 --> 00:03:19.950
of the things that was
wrong with X path is

52
00:03:19.950 --> 00:03:23.430
that you would tunnel a,
another programming language in a

53
00:03:23.430 --> 00:03:26.670
string, right? So you'd say
like select nodes quote, and

54
00:03:26.670 --> 00:03:29.370
then you'd put some magic
X path goo in there.

55
00:03:30.360 --> 00:03:33.120
And that was a little,
little tiny program, you know,

56
00:03:33.120 --> 00:03:36.450
within a string. And there
was this notion of an

57
00:03:36.450 --> 00:03:38.820
axis and X path. So
when you do a select

58
00:03:39.420 --> 00:03:43.320
and you're moving around the
document either like via descendants

59
00:03:43.320 --> 00:03:46.350
or via siblings, so there's
this kind of direction. You

60
00:03:46.350 --> 00:03:48.360
have to have the sense
of where I'm moving in,

61
00:03:48.360 --> 00:03:51.960
what direction on the tree
that exists in the context

62
00:03:51.960 --> 00:03:56.400
of an X document and
X elements via different methods

63
00:03:56.430 --> 00:03:58.740
like descendants and elements. So
you can say, give me

64
00:03:58.740 --> 00:04:01.770
all of the descendants of
this particular X element. Yeah.

65
00:04:02.310 --> 00:04:05.850
So you can get X
path like experiences, but it's

66
00:04:05.850 --> 00:04:09.900
very strongly typed now with,
with VB nine, you also

67
00:04:09.900 --> 00:04:12.870
get the ability to use
like the imports method, the

68
00:04:12.870 --> 00:04:19.170
imports declaration, which we ordinarily
use to import CLR namespaces

69
00:04:19.590 --> 00:04:23.460
you can actually use that
to import XML namespaces. And

70
00:04:23.460 --> 00:04:26.130
that has gotten me really
thinking about VB again, because

71
00:04:26.130 --> 00:04:27.750
you know, I've given you
a hard time about VB,

72
00:04:28.260 --> 00:04:29.880
but You don't have to
give me a hard time.

73
00:04:29.880 --> 00:04:32.040
You give VB a hard
time. I think. Well, yeah,

74
00:04:32.070 --> 00:04:33.900
I give, and I give
BB people of our time.

75
00:04:33.900 --> 00:04:34.950
Cause I was a V
you know, I was a

76
00:04:34.950 --> 00:04:37.560
big VV guy. I was
living the life, you know,

77
00:04:37.590 --> 00:04:41.700
VB three up to VB
six, and then I just

78
00:04:41.700 --> 00:04:43.080
kind of switched over. And
the next thing you know,

79
00:04:43.080 --> 00:04:46.800
I was doing semi-colons and
I just kinda thought to

80
00:04:46.800 --> 00:04:49.440
myself, you know, VB, so
what, you know, what's the

81
00:04:49.440 --> 00:04:53.490
point, what is this silly
language for? And they really

82
00:04:53.490 --> 00:04:57.420
just went running down the
street, screaming and added all

83
00:04:57.420 --> 00:05:00.810
sorts of crazy stuff to
VB while C-sharp is staying

84
00:05:00.840 --> 00:05:04.590
kind of very, I'm trying
to use words, It's a

85
00:05:04.590 --> 00:05:06.900
classic, you know, C sharp
is going to see, I

86
00:05:06.900 --> 00:05:11.910
was going to say formal,
formal uncluttered, maybe. Yeah. Noncontroversial.

87
00:05:12.060 --> 00:05:18.300
Yeah. Noncontroversial. That's a good
one. Conservative, maybe conservative Nancy

88
00:05:18.300 --> 00:05:19.860
that's that's the thing I'm
trying to think of words

89
00:05:19.860 --> 00:05:21.600
that would get us. Not,
not a lot of mail,

90
00:05:23.310 --> 00:05:25.800
but, but yeah. I mean,
without picking, we're trying very

91
00:05:25.800 --> 00:05:28.440
carefully to pick the right
words, just to describe it.

92
00:05:28.980 --> 00:05:32.160
It is, it is trying
to be multipurpose and classic

93
00:05:32.190 --> 00:05:37.080
and a as a standard
and a formal, thoughtful way

94
00:05:37.080 --> 00:05:41.400
of doing things while VB
I'm getting the impression. And

95
00:05:41.400 --> 00:05:43.530
this is just, we're talking
about impressions and opinions here

96
00:05:43.920 --> 00:05:49.650
is surprisingly unafraid to do
some pretty crazy stuff and

97
00:05:49.650 --> 00:05:53.190
to make a formal declaration
that I want XML, you

98
00:05:53.190 --> 00:05:55.500
know, baked really, really, really
tightly into the language, I

99
00:05:55.500 --> 00:05:59.480
think is pretty cool. Now
it tighten us. It does

100
00:05:59.480 --> 00:06:01.130
tighten the news a little
bit in the sense that

101
00:06:01.130 --> 00:06:04.100
we are really tied to
the base class library, but

102
00:06:04.100 --> 00:06:07.190
as with all computer languages,
it's not like it's easy

103
00:06:07.190 --> 00:06:10.010
to keep track of what
syntax and what's underlying library.

104
00:06:10.640 --> 00:06:14.090
I mean, just like in
M sharp, the using statement

105
00:06:14.120 --> 00:06:16.550
caused a lot of controversy
because it's really just a

106
00:06:16.850 --> 00:06:20.150
bit of syntactic sugar on
top of try, finally write

107
00:06:20.570 --> 00:06:24.170
this imports. And the, the,
the XML literally is the

108
00:06:24.170 --> 00:06:27.320
ability to go and say,
you know, Fu equals and

109
00:06:27.320 --> 00:06:30.380
then just start typing XML,
having that be as syntactic

110
00:06:30.380 --> 00:06:34.220
sugar on top of a
link or something on top

111
00:06:34.220 --> 00:06:36.440
of specifically system at XML
that link in the X

112
00:06:36.500 --> 00:06:40.490
document, next element stuff is
really tying you to the

113
00:06:40.490 --> 00:06:42.230
platform, but it's not like
we weren't already tied to

114
00:06:42.230 --> 00:06:44.690
the platform before. So I
don't know, it's kind of

115
00:06:44.690 --> 00:06:47.890
a chicken and the egg
problem, but what I, what

116
00:06:47.890 --> 00:06:51.290
I will say is that
writing it is just so

117
00:06:51.290 --> 00:06:54.530
pleasant. I mean, I really
could see myself writing some

118
00:06:54.530 --> 00:06:58.340
VB libraries if I, if
I really needed to do

119
00:06:58.340 --> 00:07:00.910
some, some serious XML inside
them. So as you know,

120
00:07:00.910 --> 00:07:03.460
I've, I was recently exposed
to this by Don XML

121
00:07:03.460 --> 00:07:06.730
on DNR TV, and one
of the things, and if

122
00:07:06.730 --> 00:07:09.540
you haven't seen those episodes
and you haven't seen the

123
00:07:09.540 --> 00:07:13.810
link to XML, check it
out, DNR, tv.com. One of

124
00:07:13.810 --> 00:07:15.580
the things that I really
like is the way they

125
00:07:15.610 --> 00:07:20.470
contrast the XML, they, they
sort of fade it out.

126
00:07:20.470 --> 00:07:22.990
So it doesn't, you know,
so there's a little bit

127
00:07:22.990 --> 00:07:27.520
of contrast visually between the
XML that's literally in your

128
00:07:27.520 --> 00:07:31.000
VB app and the rest
of your code. Yeah. You

129
00:07:31.000 --> 00:07:33.010
know, that's a, that's funny,
that's a small kind of

130
00:07:33.010 --> 00:07:35.620
aesthetic detail, but you're making
a very good point because

131
00:07:36.220 --> 00:07:38.260
it, it, you, you would
think that all the angle

132
00:07:38.260 --> 00:07:41.560
brackets and elements would make
a very funny looking syntax,

133
00:07:41.560 --> 00:07:45.160
highlighted experience, but they're very
clear on the colors that

134
00:07:45.160 --> 00:07:48.250
they chose or the default
colors. And it doesn't look

135
00:07:48.250 --> 00:07:50.650
like an embedded string, and
it's very clear where the

136
00:07:50.650 --> 00:07:52.900
XML starts and where your
code begins. And it is

137
00:07:52.900 --> 00:07:57.100
really a very nice experience.
Don said something when we

138
00:07:57.100 --> 00:08:02.170
first learned about XML literals
in VB, in that he

139
00:08:02.170 --> 00:08:05.440
thought it was a bad
idea because people are going

140
00:08:05.440 --> 00:08:08.650
to write code that now
looks like classic ASP, you

141
00:08:08.650 --> 00:08:11.980
know, the, the classic spaghetti
code, the angle brackets, air

142
00:08:11.980 --> 00:08:16.510
Springs with, you know, and,
and, and he told me

143
00:08:16.510 --> 00:08:19.450
on the show that he
had such a change of

144
00:08:19.450 --> 00:08:22.630
heart after he got to
play with it, because, you

145
00:08:22.630 --> 00:08:25.150
know, it's not like that
at all. I mean, yes,

146
00:08:25.570 --> 00:08:32.770
you can express XML and
you can plug data into

147
00:08:32.770 --> 00:08:35.980
that XML, like in a
loop. So you can go

148
00:08:35.980 --> 00:08:39.400
into a loop and output
this literal XML string, and

149
00:08:39.400 --> 00:08:43.360
then plug the angle bracket
percent equals, you know, just

150
00:08:43.360 --> 00:08:47.110
like you do an ASP.
Right. But it doesn't really

151
00:08:47.110 --> 00:08:50.260
go the other way. You
know, it's not like it's,

152
00:08:50.260 --> 00:08:53.320
I don't think, I don't
think, I don't know. It's

153
00:08:53.320 --> 00:08:56.340
not like that. It's not
like classic ASP. No, It's

154
00:08:56.340 --> 00:08:59.160
not. I mean, with any
tool, one can hurt themselves.

155
00:08:59.160 --> 00:09:01.920
I mean, clearly, but one
of the things that's really

156
00:09:01.920 --> 00:09:04.650
nice about this is that
it, for me, as someone

157
00:09:04.650 --> 00:09:08.310
who has spent many years
trying to coerce objects into

158
00:09:08.310 --> 00:09:12.900
angle brackets, it makes getting
an object into an angle

159
00:09:12.900 --> 00:09:17.400
bracket format, especially when that
format doesn't necessarily look exactly

160
00:09:17.400 --> 00:09:20.160
like the object. I mean,
certainly XML serializer has some

161
00:09:20.160 --> 00:09:24.240
ability to massage things via
attributes and make the X

162
00:09:24.240 --> 00:09:26.370
amount look the way you
want, but there's always been

163
00:09:26.370 --> 00:09:28.950
this kind of gap. You
either serialize it as XML,

164
00:09:29.370 --> 00:09:32.190
or you suddenly jump off
and you're into XML rider

165
00:09:32.190 --> 00:09:34.920
world and you're, and you're
creating some pretty complicated and

166
00:09:34.920 --> 00:09:37.650
pretty deep code just to
get some angle brackets out.

167
00:09:38.040 --> 00:09:40.410
And it really lets you
understand why a lot of

168
00:09:40.410 --> 00:09:42.960
people would spend time doing
what was considered evil, which

169
00:09:42.960 --> 00:09:45.720
is building XML with string
builders, right? So it basically

170
00:09:45.720 --> 00:09:48.900
gives you the ease of
string builder, style XML building

171
00:09:49.050 --> 00:09:54.210
with the formalization, the kind
of IntelliSense, and, and then

172
00:09:54.210 --> 00:09:55.770
the, you don't get a
string. You get an X

173
00:09:55.770 --> 00:09:58.230
element when it, when it
pops out. One of the

174
00:09:58.230 --> 00:10:00.660
things that I've been exploring,
because I don't want to

175
00:10:00.660 --> 00:10:02.970
do just another show on
like, Hey, link is great.

176
00:10:02.970 --> 00:10:06.210
Yay link. I wanted to
get a little bit deeper.

177
00:10:06.270 --> 00:10:09.750
Is there are a lot
of extension methods, you know,

178
00:10:09.750 --> 00:10:14.220
about extension methods, right? So
extension methods are the ability

179
00:10:14.220 --> 00:10:16.530
to, and I've used the
term spot welding in the

180
00:10:16.530 --> 00:10:19.230
past to, to refer to
it in the context of

181
00:10:19.230 --> 00:10:21.840
Ruby where you can say,
you know, Hey, Carl has

182
00:10:21.840 --> 00:10:24.390
a, let's say Carl has
a person class and it's

183
00:10:24.390 --> 00:10:26.820
got first name and last
name, but I really want

184
00:10:26.820 --> 00:10:30.510
it to have, I don't
know, surname, I could extend

185
00:10:30.510 --> 00:10:34.890
it via, via derivation in
a kind of a classic,

186
00:10:34.920 --> 00:10:38.370
Oh way. I could make
my own class and wrap

187
00:10:38.370 --> 00:10:40.980
yours via kind of composition.
Or I can use an

188
00:10:40.980 --> 00:10:44.070
extension method and basically say,
whenever you see a person

189
00:10:44.070 --> 00:10:47.310
I wanted to have this
function, also this, this method

190
00:10:47.310 --> 00:10:50.730
also, and basically kind of
just Velcro it to the

191
00:10:50.730 --> 00:10:54.210
side of the object. And
initially it sounds very kind

192
00:10:54.210 --> 00:10:56.610
of unnerving. You could think
of all the damage that

193
00:10:56.610 --> 00:11:01.050
could potentially be done, but
within the context of what

194
00:11:01.050 --> 00:11:06.750
Microsoft has done, where they've
taken a new library, ex

195
00:11:06.790 --> 00:11:11.430
assistant.xml.link, and a whole bunch
of new classes, and they

196
00:11:11.430 --> 00:11:15.360
wanted to make a relationship,
a bridge between that and

197
00:11:15.540 --> 00:11:17.940
a system that XML, you
know, how do you make

198
00:11:17.940 --> 00:11:21.660
that kind of strange relationship?
Is there, is there derivation?

199
00:11:21.660 --> 00:11:23.880
Is there composition, are there
just a bunch of utility

200
00:11:23.880 --> 00:11:26.790
classes? Where do you put
those utility classes? I mean,

201
00:11:26.790 --> 00:11:30.660
do you make system.xml.link dot
bridge, and then make a

202
00:11:30.660 --> 00:11:35.160
bunch of utility type stuff
with extension methods when you've

203
00:11:35.160 --> 00:11:39.270
got some ex XML for
link objects, like if you've

204
00:11:39.270 --> 00:11:42.600
got an X element or
you've got a, an X

205
00:11:42.600 --> 00:11:46.650
document kind of lying around,
you can add a using

206
00:11:46.650 --> 00:11:49.800
statement or in VBS case
and import statement and bring

207
00:11:49.800 --> 00:11:52.590
in something like a system,
not XML dot that X

208
00:11:52.590 --> 00:11:59.320
path. And it's suddenly extends
your existing linked to XML

209
00:11:59.320 --> 00:12:02.230
objects with new stuff. So
for example, you've got like

210
00:12:02.230 --> 00:12:05.620
an X document and you
bring in the X path

211
00:12:05.800 --> 00:12:10.090
namespace. And by bringing that
namespace into scope, you've suddenly

212
00:12:10.090 --> 00:12:14.290
added new methods on these
documents. So for example, the

213
00:12:14.290 --> 00:12:18.850
X document then suddenly gets
an X path, select elements,

214
00:12:18.850 --> 00:12:22.720
method, the method isn't there,
it's not on the X

215
00:12:22.720 --> 00:12:25.030
document. It's actually an extension
method that was put in

216
00:12:25.030 --> 00:12:27.790
the other library. So this
is a way that the,

217
00:12:28.030 --> 00:12:31.600
the other library can influence
the future. This is the

218
00:12:31.600 --> 00:12:36.040
way we can have X
path actual X path in

219
00:12:36.040 --> 00:12:39.220
our X documents. And this
is used kind of consistently

220
00:12:39.220 --> 00:12:42.610
throughout the namespaces that's in
a really interesting way. So

221
00:12:42.610 --> 00:12:46.780
for example, if you wanted
to, well, like one of

222
00:12:46.780 --> 00:12:49.120
the things I wanted to
do is serialize an object

223
00:12:49.840 --> 00:12:52.510
in the middle of making
a bunch of X elements.

224
00:12:52.720 --> 00:12:55.840
I posted about this in
my blog topic, right? So

225
00:12:55.840 --> 00:12:57.430
I'm making a bunch of
X elements. I'm doing kind

226
00:12:57.430 --> 00:13:00.040
of this tree building, but
I've got this object that

227
00:13:00.040 --> 00:13:02.830
already serialized is just fine
and I want to go

228
00:13:02.830 --> 00:13:05.770
in serialize it. So I
talked to the XML team,

229
00:13:05.770 --> 00:13:08.140
they've got a great blog
on MSDN. It's called XML

230
00:13:08.140 --> 00:13:12.070
team and using the XML
sterilizer. I want to serialize

231
00:13:12.070 --> 00:13:13.840
an object, but I want
to add it into a

232
00:13:13.840 --> 00:13:16.540
tree of X elements that
I'm already doing. Right. Well,

233
00:13:16.960 --> 00:13:20.170
it turns out that if
you do a create writer

234
00:13:20.560 --> 00:13:23.500
on an X document, you
can get out and XML

235
00:13:23.500 --> 00:13:26.200
writer. So you can actually
ask a new style X

236
00:13:26.200 --> 00:13:29.110
document for an XML writer.
And here's the cool part.

237
00:13:29.530 --> 00:13:32.260
Anything you write to it
is actually going to turn

238
00:13:32.260 --> 00:13:34.960
into X elements and X
documents. It's going to turn

239
00:13:34.960 --> 00:13:37.300
into this new format as
soon as you close the

240
00:13:37.300 --> 00:13:40.390
writer. So they basically got
an implementation of an XML

241
00:13:40.390 --> 00:13:43.060
writer, and you're just writing
to it the way you've

242
00:13:43.060 --> 00:13:45.400
always written to an X
amount of writer, except it's

243
00:13:45.400 --> 00:13:48.070
going to be creating X
elements in the back. So

244
00:13:48.070 --> 00:13:54.010
then will an XNL serializer
just takes a writer, right?

245
00:13:54.040 --> 00:13:58.780
You can just write directly
to it. So what we

246
00:13:58.780 --> 00:14:02.350
did is we just made
a serialize as X element

247
00:14:02.650 --> 00:14:05.530
extension method to rather than
having a utility class floating

248
00:14:05.530 --> 00:14:08.860
out there in the, in
the ether, we just extended.

249
00:14:09.130 --> 00:14:13.360
XNL serializer, sorry. I just
said static class XML, serializer

250
00:14:13.360 --> 00:14:15.790
extension. And then I made
this new share lies is

251
00:14:15.790 --> 00:14:18.930
X element. And then in
the middle of my, my

252
00:14:19.010 --> 00:14:21.040
building of my tree, I
can just go and say,

253
00:14:21.100 --> 00:14:23.800
Oh yeah. And go ahead
and serialize this object. And

254
00:14:23.800 --> 00:14:26.350
this provides a lot of
code review reuse because you

255
00:14:26.350 --> 00:14:28.210
might be doing new work
and link, but you've got

256
00:14:28.210 --> 00:14:32.170
existing work that is using
XML. Serializers, you've got existing

257
00:14:32.170 --> 00:14:36.820
code that works just fine
rather than reimplementing that you

258
00:14:36.820 --> 00:14:39.310
can, you can bridge it.
And I must say that

259
00:14:39.310 --> 00:14:43.240
the bridging I've been really
impressed. It's really, really clever

260
00:14:43.240 --> 00:14:47.660
and really clean being able
to call X path on

261
00:14:47.660 --> 00:14:50.800
an X documents, being able
to serialize objects, use writers.

262
00:14:51.890 --> 00:14:55.370
It feels like an evolution
kind of an extension of

263
00:14:55.370 --> 00:14:57.710
system XML, but it doesn't
feel like I have to

264
00:14:57.710 --> 00:14:59.840
go and relearn everything because
if you already know about

265
00:14:59.840 --> 00:15:02.750
readers and writers, these things
are still there. And the

266
00:15:02.750 --> 00:15:06.170
bridge methods are all brought
in just by including that

267
00:15:06.170 --> 00:15:10.520
namespace. Yeah. That's excellent. Very
powerful. Yeah, it really is.

268
00:15:10.520 --> 00:15:13.130
And I'm going to be
interested to see what the

269
00:15:13.610 --> 00:15:16.910
future is going to bring
around extension methods about. Cause

270
00:15:17.060 --> 00:15:18.950
you know, we talked about
Ruby a little bit a

271
00:15:18.950 --> 00:15:21.410
while back and one of
the examples that came up

272
00:15:21.410 --> 00:15:25.850
was when someone in Ruby
types, 20 dot minutes ago,

273
00:15:26.450 --> 00:15:28.060
right. And then that comes
up with like, you know,

274
00:15:28.080 --> 00:15:31.160
date time for 20 minutes
ago. And the example is

275
00:15:31.160 --> 00:15:33.770
always made that a Oh,
well, we can do that

276
00:15:33.770 --> 00:15:35.330
in C sharp. And then
someone goes and writes a

277
00:15:35.330 --> 00:15:38.300
pretty complicated extension library that
extends. And then you can

278
00:15:38.300 --> 00:15:42.590
have 20 dot minutes parentheses
go parentheses and you get

279
00:15:42.590 --> 00:15:46.730
a similar experience, but it's
not Ruby actually that made

280
00:15:46.730 --> 00:15:50.030
that happen. It's the it's
that Ruby core lives that

281
00:15:50.030 --> 00:15:51.920
are added on it's some
of the rail stuff. So

282
00:15:51.920 --> 00:15:53.360
it's not the guy that
had been in Ruby who

283
00:15:53.360 --> 00:15:56.510
decided that 29 minutes ago
is supposed to look like

284
00:15:56.510 --> 00:15:59.270
that. It was, it was
Hannah Meyer Hanson. It was DHH

285
00:15:59.270 --> 00:16:02.840
the guy that made rails.
Yeah. But the aesthetic, right?

286
00:16:02.840 --> 00:16:05.120
The decision as a community
that we find this to

287
00:16:05.120 --> 00:16:09.290
be attractive and useful was
really what drove that. So

288
00:16:09.350 --> 00:16:12.650
I feel like extension methods
are kind of taking a

289
00:16:12.650 --> 00:16:15.170
little bit of the responsibility
for the syntax and the

290
00:16:15.170 --> 00:16:20.330
future of C-sharp and, and
VB out of Anders hands,

291
00:16:20.600 --> 00:16:22.760
right out of Andrews housework,
hands and kind of into

292
00:16:22.760 --> 00:16:24.650
the hands of the community.
Cause if we, as a

293
00:16:24.650 --> 00:16:27.290
collective decide that we feel
that a syntax should look

294
00:16:27.290 --> 00:16:29.240
this way, or there's some
aspect of the base class

295
00:16:29.240 --> 00:16:33.500
library, we could create a
little, you know, base class

296
00:16:33.500 --> 00:16:36.680
library extension to add, you
know, whatever we, as a

297
00:16:36.680 --> 00:16:40.580
community come up with. And
just as the, you know,

298
00:16:40.610 --> 00:16:44.390
the system.xml.link team works with
a system that XML guys

299
00:16:44.480 --> 00:16:48.290
to make that bridge clean,
such that it's seamless. I

300
00:16:48.290 --> 00:16:49.670
mean, you really have no
way of knowing that these

301
00:16:49.670 --> 00:16:53.030
are extension methods, right? Unless
you go looking for it,

302
00:16:53.660 --> 00:16:56.660
you know, what kinds of
interesting patterns could be done?

303
00:16:57.200 --> 00:16:59.240
And like in the past,
a lot of the patterns

304
00:16:59.240 --> 00:17:01.490
have been very O focused
and we read books like

305
00:17:01.490 --> 00:17:07.490
design patterns, what will extension
methods, what kinds of patterns

306
00:17:07.490 --> 00:17:09.920
will come out of that
new way of thinking? And

307
00:17:09.920 --> 00:17:11.990
I'm really interested in, in
that space and I'd be

308
00:17:11.990 --> 00:17:16.760
interested in what the, the
listeners think about that. All

309
00:17:16.760 --> 00:17:21.470
right. Good. Well, is that
a show? Yeah, I think

310
00:17:21.470 --> 00:17:23.750
so. You can tell, I
kind of rambled a little

311
00:17:23.750 --> 00:17:25.580
bit at the end, but
I am sincerely interested in

312
00:17:25.580 --> 00:17:28.370
that kind of that space
and I'd be really interested

313
00:17:28.370 --> 00:17:30.920
in some feedback from some
of the listeners. Maybe we

314
00:17:30.920 --> 00:17:32.420
can do a whole show
on exactly how to do

315
00:17:32.420 --> 00:17:35.210
extension methods or maybe a
DNR TV. Oh, that sounds

316
00:17:35.210 --> 00:17:38.870
great. Alright, Scott, thank you
very much. And until next

317
00:17:38.870 --> 00:17:49.840
time, we'll see you <inaudible>.

