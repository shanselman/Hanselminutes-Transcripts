WEBVTT FILE

1
00:00:00.030 --> 00:00:03.720
Today's podcast is sponsored by
Datadog a monitoring platform for

2
00:00:03.720 --> 00:00:09.600
cloud scale infrastructure and applications.
Datadog provides dashboarding, alerting application

3
00:00:09.600 --> 00:00:14.040
performance monitoring, and log management
in one tightly integrated platform.

4
00:00:14.040 --> 00:00:17.310
So you can get end
to end visibility quickly, and

5
00:00:17.310 --> 00:00:21.750
it integrates with more than
350 technologies, including AWS, Postgres,

6
00:00:21.750 --> 00:00:26.430
SQL, Kubernetes, and Docker. You
can visualize key metrics, set

7
00:00:26.430 --> 00:00:29.490
alerts to identify anomalies and
collaborate with your team to

8
00:00:29.490 --> 00:00:33.450
troubleshoot and fix issues fast.
Try it yourself by starting

9
00:00:33.450 --> 00:00:37.860
a free 14 day trial
today, listeners of this podcast

10
00:00:37.860 --> 00:00:44.610
will also receive a free
Datadog t-shirt visit bitly.com/data dog

11
00:00:44.640 --> 00:01:03.890
shirt. That's bitly.com/datadog shirt to
get started. <inaudible>. Hi, this

12
00:01:03.890 --> 00:01:06.980
is Scott Hanselman. This is
another cancel minutes Today. I'm

13
00:01:06.980 --> 00:01:11.000
talking to Scott Scott's on
the show. He is a

14
00:01:11.060 --> 00:01:12.800
good Python and works for
eight a fruit. How are

15
00:01:12.800 --> 00:01:16.190
you? I'm great. How are
you? I am a fan

16
00:01:16.280 --> 00:01:21.280
man. I'm a fan of
yours because I watched you

17
00:01:21.380 --> 00:01:24.830
kind of talk about building
cool stuff in circuit Python,

18
00:01:24.830 --> 00:01:27.530
but then you built something
that was even cooler. We

19
00:01:27.530 --> 00:01:30.770
bridged circuit Python with a
game boy I had, which

20
00:01:30.770 --> 00:01:32.180
was amazing. And I find
that and I get to

21
00:01:32.180 --> 00:01:34.100
meet you in person and
see it. And it's real.

22
00:01:34.140 --> 00:01:36.410
It's wonderful. Yeah. Hoping to
make it more real in

23
00:01:36.410 --> 00:01:39.320
the future. I just need
to get back to fixing

24
00:01:39.320 --> 00:01:41.870
some of the bugs and
getting the game boy color

25
00:01:41.900 --> 00:01:45.080
sorted out and hopefully actually
get it on sale at

26
00:01:45.080 --> 00:01:47.810
some point. So let's back
up and talk about what

27
00:01:47.810 --> 00:01:50.180
circuit Python is and where
it came from. Cause I've

28
00:01:50.180 --> 00:01:52.340
got a bunch of things
on my desktop here. I've

29
00:01:52.340 --> 00:01:54.650
actually got, you can probably
hear them. I've got a

30
00:01:54.650 --> 00:01:56.630
bunch of boards. These are
all eight of fruit boards.

31
00:01:56.630 --> 00:01:58.190
You can go and buy
all kinds of different things.

32
00:01:58.190 --> 00:02:00.980
How many boards does circuit
Python run on a, I

33
00:02:00.980 --> 00:02:04.730
think it's at least 60
at this point. Some of

34
00:02:04.730 --> 00:02:08.450
these are cheap. Like these
are like necklaces, the least

35
00:02:08.450 --> 00:02:11.270
expensive, I think is about
$9, nine or 10 us

36
00:02:11.270 --> 00:02:15.680
dollars. And that's the trinket.
Yeah. So those are small

37
00:02:15.680 --> 00:02:17.900
and the trinket has, you
know, some sensors and some

38
00:02:17.900 --> 00:02:20.090
lights and you can turn
it up to the circuit

39
00:02:20.090 --> 00:02:23.270
playground, the playground. What does
the trinket do? The trinket

40
00:02:23.270 --> 00:02:26.810
is very small. It only
has maybe a 10 pins

41
00:02:26.810 --> 00:02:29.330
total, but here it is.
I've got that one. Yeah.

42
00:02:29.330 --> 00:02:33.470
It's really, really small. And
it's, it's, it's very good.

43
00:02:33.470 --> 00:02:35.060
If you have like one
thing that you want to

44
00:02:35.060 --> 00:02:38.750
do and it's like the
size of a, of a

45
00:02:38.750 --> 00:02:43.880
quarter, almost something like that.
Yeah. And I've also received,

46
00:02:43.880 --> 00:02:47.270
I'm a subscriber for the
ADA fruit ADA box. You

47
00:02:47.270 --> 00:02:49.760
should definitely go out and
Google for ADA box. It's

48
00:02:49.760 --> 00:02:52.760
just a, a happiness box
that shows up every once

49
00:02:52.760 --> 00:02:55.580
in awhile, it's the best
subscription we canceled all of

50
00:02:55.580 --> 00:02:59.590
our newspaper and magazine subscriptions,
which were $10 and $10

51
00:02:59.590 --> 00:03:01.930
there. Right. We got the
eight of box and the

52
00:03:01.930 --> 00:03:03.940
11 year old and a
13 year old go running

53
00:03:03.940 --> 00:03:07.090
when they hear it's on
the way. And every box

54
00:03:07.090 --> 00:03:09.160
has something fun in it.
And the last one had

55
00:03:09.670 --> 00:03:13.390
basically like a, I mean,
it's a circuit Python based

56
00:03:13.840 --> 00:03:16.750
almost like a game boy.
It's a little, you know,

57
00:03:16.750 --> 00:03:18.880
little NES kind of a
deal. It's got controllers up,

58
00:03:18.880 --> 00:03:21.460
down left, right. And the
color screen and it runs

59
00:03:21.610 --> 00:03:24.750
Python. It can run Python.
It's not the only thing

60
00:03:24.750 --> 00:03:26.970
it runs, but it does
run circuit. Python is one

61
00:03:26.970 --> 00:03:30.300
of the options. Is that
a common idea with these,

62
00:03:30.330 --> 00:03:33.030
these boards? They can run
Python, but they also run

63
00:03:33.060 --> 00:03:36.090
yeah. Like a eight, a
fruit as a hardware company.

64
00:03:36.090 --> 00:03:38.730
So they're, they're happy to
see you use the hardware

65
00:03:38.730 --> 00:03:42.090
in any way that you
choose. We are open source

66
00:03:42.090 --> 00:03:44.940
hardware and open source software.
So you can put whatever

67
00:03:44.940 --> 00:03:47.910
you want on it. We're
happy to see you make

68
00:03:47.910 --> 00:03:51.150
things with the things that
ADA fruit makes. So these

69
00:03:51.150 --> 00:03:53.640
boards can be Arduino boards
and we can program them

70
00:03:53.640 --> 00:03:56.370
with Arduino or they can
program them with Python Or

71
00:03:56.370 --> 00:03:59.220
Microsoft. Make code is another
option as well, which they've

72
00:03:59.220 --> 00:04:02.280
done amazing work on the
gaming side. So they have

73
00:04:02.280 --> 00:04:05.520
make code arcade in that
that's really much more fleshed

74
00:04:05.520 --> 00:04:07.650
out than the gaming side
of circuit Python at this

75
00:04:07.650 --> 00:04:10.860
point. So it's worth a
look if you haven't taken

76
00:04:10.860 --> 00:04:14.730
a look. So I understand
the Arduino part. I understand

77
00:04:14.730 --> 00:04:17.730
the idea of writing a
C or C like language

78
00:04:17.760 --> 00:04:21.120
on a board that's small,
but Python's higher level. I

79
00:04:21.120 --> 00:04:23.640
mean, is there a runtime,
is there a Python runtime

80
00:04:23.640 --> 00:04:26.700
on this thing? So to
take a step back circuit

81
00:04:26.700 --> 00:04:31.350
Python is a reimplementation of
Python that runs on small

82
00:04:31.350 --> 00:04:36.180
embedded microcontrollers. They're very small
CPS. They tend to be

83
00:04:36.180 --> 00:04:39.750
about 48 to 120 megahertz
is what we run on.

84
00:04:40.140 --> 00:04:44.220
And they have anywhere from
32 kilobytes of Ram up

85
00:04:44.220 --> 00:04:47.880
to 192 kilobytes of Ram.
So much smaller than even

86
00:04:47.880 --> 00:04:50.580
what your phone has. And
we're based on a project

87
00:04:50.580 --> 00:04:53.760
called micro Python. They had,
they did a lot of

88
00:04:53.760 --> 00:04:56.470
the initial work to get
the Python experience on, on

89
00:04:56.520 --> 00:05:00.600
embedded microcontrollers and three years
or so ago, ate a

90
00:05:00.610 --> 00:05:02.700
fruit, came to me and
wanted to get that running

91
00:05:02.700 --> 00:05:05.340
on their hardware. And in
those last three years, we've

92
00:05:05.370 --> 00:05:09.900
just made it easier and
easier and more powerful in

93
00:05:09.900 --> 00:05:14.070
the ways that we think
really help beginners. And that's

94
00:05:14.070 --> 00:05:18.200
our core audiences beginners. Now,
when I got started with

95
00:05:18.390 --> 00:05:21.660
hardware and open source hardware,
I thought about raspberry pies

96
00:05:22.110 --> 00:05:23.940
and I would go and,
you know, boot up an

97
00:05:23.940 --> 00:05:27.150
entire operating system. That's not
a microcontroller, right? That's a

98
00:05:27.150 --> 00:05:33.630
microcomputer microprocessor. Yeah. Microprocessor. Okay.
And that's a full, that's

99
00:05:33.630 --> 00:05:36.330
a full PC. Basically. It
made the whole universe there

100
00:05:36.840 --> 00:05:40.380
into an operating system it's
running full Linux. Okay. But

101
00:05:40.380 --> 00:05:42.780
with a shirt, with a
device that is a microcontroller,

102
00:05:42.780 --> 00:05:46.290
I'm not booting into a,
like a full operating system

103
00:05:46.290 --> 00:05:51.480
of Linux. Am I? No,
Generally not. Linux requires some

104
00:05:51.480 --> 00:05:58.280
memory fanciness that the microcontrollers
tend not to have. You

105
00:05:58.280 --> 00:06:01.070
can get things called real
time operating systems that are

106
00:06:01.070 --> 00:06:06.290
designed for microcontrollers, but we
don't actually use any real

107
00:06:06.290 --> 00:06:11.020
time operating system for circuit
Python either. And when I

108
00:06:11.110 --> 00:06:14.110
created my little things in,
on raspberry pies, my batteries

109
00:06:14.110 --> 00:06:16.630
would only last for hours.
But when I do my

110
00:06:16.630 --> 00:06:20.200
things with, with these, these
little circuit Python devices, these

111
00:06:20.200 --> 00:06:22.660
little tiny devices, they last
for days or weeks or

112
00:06:22.660 --> 00:06:26.260
longer, hopefully. Yeah. How was
that? How was that possible?

113
00:06:26.260 --> 00:06:29.170
Help me understand that differentiation
between a micro controller and

114
00:06:29.170 --> 00:06:31.840
a microcomputer. So when someone's
listening to the show, they're

115
00:06:31.840 --> 00:06:35.470
thinking, well, I thought tiny
hardware was only raspberry pies,

116
00:06:35.490 --> 00:06:38.560
but there's a whole universe
of hundreds of boards. And

117
00:06:38.560 --> 00:06:40.720
like you said, over 60,
that support circuit pies on

118
00:06:40.720 --> 00:06:43.510
that they can get it.
Right. Right. So I don't,

119
00:06:43.510 --> 00:06:47.260
there, there is some detail
that, that draws that line

120
00:06:47.260 --> 00:06:51.580
between microprocessor and microcontroller. I
think it has to do

121
00:06:51.580 --> 00:06:54.570
with having a memory unit
that allows you to, to

122
00:06:54.580 --> 00:06:58.990
have virtual memories for different
programs before a microcontroller, the

123
00:06:58.990 --> 00:07:01.120
software that you're writing has
access to all of the

124
00:07:01.120 --> 00:07:05.380
memory. There's no, there's no
kind of boundaries there to,

125
00:07:05.470 --> 00:07:11.200
to isolate code. I don't
know if it's correct, but

126
00:07:11.200 --> 00:07:12.940
the way I've been explaining
it to my 11 year

127
00:07:12.940 --> 00:07:17.980
old, was that a microprocessor,
like a raspberry PI can

128
00:07:17.980 --> 00:07:21.400
do lots of things all
at the same time and

129
00:07:21.400 --> 00:07:24.100
our microcontroller. You kind of
think about it as a

130
00:07:24.100 --> 00:07:26.650
one program at a time,
even though the program can

131
00:07:26.650 --> 00:07:31.030
do multiple things, it's a
single tasking, not single tasking

132
00:07:31.030 --> 00:07:33.100
in a computer science sense,
but like, I want this

133
00:07:33.100 --> 00:07:34.780
to control the garage and
now I want it to

134
00:07:34.810 --> 00:07:37.480
go and make an iron
man hand. Right. Those are

135
00:07:37.480 --> 00:07:41.560
two separate tasks. Yeah. And
they're very, very common in

136
00:07:41.620 --> 00:07:44.770
kids toys. And like I
have a mini keyboard and

137
00:07:44.770 --> 00:07:47.890
I've opened it up and
it has very similar class.

138
00:07:47.950 --> 00:07:51.220
In fact, we could run
circuit Python on it. It

139
00:07:51.220 --> 00:07:53.590
has the specs that we
need in order to do

140
00:07:53.590 --> 00:07:55.750
it. So lots of the
devices that you don't think

141
00:07:55.750 --> 00:07:58.810
have computers around, you have
little microcontrollers in them to

142
00:07:58.810 --> 00:08:01.600
do basic things. Like, let
me see if buttons are

143
00:08:01.600 --> 00:08:03.550
being pressed and if buttons
are being pressed, let me

144
00:08:03.550 --> 00:08:07.210
do something based on that.
When did people, how did

145
00:08:07.210 --> 00:08:09.370
people do these things and
what, what code did they

146
00:08:09.370 --> 00:08:13.150
write before an implementation of
Python that was this small

147
00:08:13.150 --> 00:08:17.500
existed? Right. So Arduino was
the big kind of democratized

148
00:08:17.650 --> 00:08:23.680
democratizing force that happened prior
to our, Duino it, my

149
00:08:23.680 --> 00:08:26.110
understanding this is kind of
before me as well, but

150
00:08:26.110 --> 00:08:29.140
my understanding is that in
order to get into this

151
00:08:29.140 --> 00:08:32.410
class of hardware where it's
really inexpensive on a per

152
00:08:33.220 --> 00:08:36.520
chip basis, because it's in
a bunch of devices, you

153
00:08:36.520 --> 00:08:40.300
would have to have a
pricey device to program that

154
00:08:40.300 --> 00:08:43.060
chip now, or do, you
know, did a number of

155
00:08:43.060 --> 00:08:45.850
things that made it much
more accessible, but one of

156
00:08:45.850 --> 00:08:48.100
them was changing the way
that you load the code

157
00:08:48.100 --> 00:08:52.990
itself, where you didn't actually
need anything besides your, or

158
00:08:53.050 --> 00:08:57.390
like a serial connection to
load code, no expensive programmer.

159
00:08:58.500 --> 00:09:01.500
So that was kind of
the previous decade before kind

160
00:09:01.500 --> 00:09:04.650
of Python and micro Python
on circuit Python came on

161
00:09:04.650 --> 00:09:08.360
the scene. Yeah. When I
tried Arduino many years ago,

162
00:09:08.750 --> 00:09:11.840
being able to plug it
in to a USB port,

163
00:09:12.200 --> 00:09:15.320
but have it show up
as a comm port meant

164
00:09:15.320 --> 00:09:17.630
that it was super easy
to talk to. And it

165
00:09:17.630 --> 00:09:20.000
was all virtualized, you know,
once I didn't require a

166
00:09:20.000 --> 00:09:23.750
driver for anything, that's when
I felt like, like, Oh,

167
00:09:23.750 --> 00:09:26.720
this is, this is actually
worth the hassle. Well, flashing

168
00:09:26.720 --> 00:09:30.890
firmware was custom drivers. And
basically it was irritating. It

169
00:09:30.890 --> 00:09:33.470
was irritating enough that it
was for me as a

170
00:09:33.470 --> 00:09:36.650
hobbyist. No fun. Right. And,
but so with Arduino, you,

171
00:09:36.830 --> 00:09:40.250
it required you to have
the Arduino ID because they

172
00:09:40.250 --> 00:09:43.160
built the software you were
running and then pushed it

173
00:09:43.160 --> 00:09:45.620
to the device. Now, one
of the things that micro

174
00:09:45.620 --> 00:09:47.990
Python has done in circuit
pythons made it even better

175
00:09:47.990 --> 00:09:50.000
is the fact that the
tool chains on the device

176
00:09:50.000 --> 00:09:52.730
itself. So when you plug
in a device that's running

177
00:09:52.730 --> 00:09:55.370
micro Python or a circuit
Python, it shows up as

178
00:09:55.370 --> 00:09:58.460
a USB drive with the
source code itself on that

179
00:09:58.460 --> 00:10:02.180
drive. So the source code,
the human readable version of

180
00:10:02.180 --> 00:10:05.030
the code goes with the
device itself. So I could

181
00:10:05.540 --> 00:10:07.730
create a program for you
and hand you the device,

182
00:10:07.730 --> 00:10:11.030
and then you would have
the source as well. And

183
00:10:11.060 --> 00:10:14.330
one thing that we've added
that micro Python doesn't currently

184
00:10:14.330 --> 00:10:16.760
have, or hasn't had is
that when you save that

185
00:10:16.760 --> 00:10:20.660
file again, circuit Python will
actually reevaluate it immediately or

186
00:10:20.690 --> 00:10:23.540
nearly immediately. So what you'll
find is that, like, if

187
00:10:23.540 --> 00:10:26.210
you, if you're saying in
your code, you want to

188
00:10:26.210 --> 00:10:28.010
turn a light on, you
hit save, the light will

189
00:10:28.010 --> 00:10:30.890
turn on immediately. You don't
have to go anywhere else

190
00:10:30.890 --> 00:10:33.890
to say, Hey, reload. It
does automatically for you. And

191
00:10:34.250 --> 00:10:36.800
it makes it very, very
quick to experiment and see

192
00:10:36.800 --> 00:10:39.710
what happens based on the
code that you've written, which

193
00:10:39.710 --> 00:10:42.380
is the Holy grail, Why
we're going for it. It

194
00:10:42.380 --> 00:10:45.200
really is. And I, I
know that this will sound

195
00:10:45.200 --> 00:10:47.720
like some kind of an
advertisement. It is only my

196
00:10:47.720 --> 00:10:51.380
enthusiasm. I have, I have
no advertising relationship with ADA

197
00:10:51.380 --> 00:10:55.520
fruit. I just am a
fan. It is as someone

198
00:10:55.520 --> 00:10:58.820
who, you know, tried again
many years ago and it's

199
00:10:58.820 --> 00:11:01.340
still, you can do this
today. Like get accustomed device,

200
00:11:01.340 --> 00:11:05.720
install, custom drivers, flash firmer,
then next step use Arduino,

201
00:11:05.750 --> 00:11:08.420
do the cardboard thing, do
the compilation locally and then

202
00:11:08.420 --> 00:11:10.940
push it then next step.
And then just plugging a

203
00:11:10.940 --> 00:11:13.640
device with a USB cable.
I have lying around like,

204
00:11:13.910 --> 00:11:18.080
I love the circuit playground
and the idea that I

205
00:11:18.080 --> 00:11:20.300
would plug it in. And
when it popped up as

206
00:11:20.300 --> 00:11:24.710
a drive, I was like,
wait, what? And there's like

207
00:11:24.710 --> 00:11:26.810
a file there that says
code dot P Y. And

208
00:11:26.950 --> 00:11:28.010
I don't even know what
I was doing. And I

209
00:11:28.010 --> 00:11:30.350
opened it up in visual
studio code and I got

210
00:11:30.350 --> 00:11:33.980
to tell a sense and
I hit control S and

211
00:11:33.980 --> 00:11:36.320
then the light starts flashing
and then it worked. And

212
00:11:36.320 --> 00:11:40.970
I was like, this is
not possible. Yeah. Yeah. I

213
00:11:40.970 --> 00:11:43.010
mean, that's a lot of
what we focus on is,

214
00:11:43.040 --> 00:11:47.000
is what I've been calling
the first five minutes. So

215
00:11:47.300 --> 00:11:49.730
what is your first five
minutes? What is your first

216
00:11:49.730 --> 00:11:52.820
five minutes ever programming, right?
Like those are the people

217
00:11:52.820 --> 00:11:55.420
that designing this for. We're
designing it for the person

218
00:11:55.420 --> 00:11:58.720
that knows that they want
to try to code something

219
00:11:58.810 --> 00:12:01.630
like they don't know what
Python is. They just know

220
00:12:01.630 --> 00:12:04.150
that they want to code
something. And that's, that's why

221
00:12:04.150 --> 00:12:06.550
the file is named code
dot PI because that's become

222
00:12:06.970 --> 00:12:13.000
the term that people associate
with the activity and how

223
00:12:13.000 --> 00:12:16.000
quickly and how seamlessly can
we get them to that

224
00:12:16.000 --> 00:12:18.790
point where they see that
they've written code, that changes

225
00:12:18.790 --> 00:12:23.040
what happens on the device
that they're using. It's so

226
00:12:23.040 --> 00:12:25.920
empowering. My 11 year old
was able to do this

227
00:12:25.950 --> 00:12:30.060
like that, that five minutes
people want it done immediately.

228
00:12:30.090 --> 00:12:32.700
It's like, Hey, everyone, let's
install this tool chain. Right?

229
00:12:33.090 --> 00:12:35.010
No, I don't do any
of that. I don't want

230
00:12:35.010 --> 00:12:37.830
to sell anything. Just thinking
about our experience at Pittcon,

231
00:12:37.830 --> 00:12:40.260
where we had a room
full of people who wanted

232
00:12:40.260 --> 00:12:42.660
to try it, we get,
we gave circuit playground, expresses

233
00:12:42.660 --> 00:12:46.020
to everybody at Pittcon. And
we had what are called

234
00:12:46.020 --> 00:12:48.570
open spaces, which is just
like, Hey, for an hour,

235
00:12:48.570 --> 00:12:49.980
we're going to be in
this room and we'll help

236
00:12:49.980 --> 00:12:52.490
you out with it. And
we have like a, a

237
00:12:52.500 --> 00:12:55.890
double sided eight and a
half by 11 of instructions.

238
00:12:55.890 --> 00:12:58.410
And most of the people
in that room got through

239
00:12:58.440 --> 00:13:02.130
all of the instructions there
in an hour, which for

240
00:13:02.160 --> 00:13:05.730
kind of a workshop setting
with hardware is just unheard

241
00:13:05.730 --> 00:13:09.150
of where people are using
their own devices and like

242
00:13:09.150 --> 00:13:12.450
getting going. And the it's
just amazing to hear people,

243
00:13:12.450 --> 00:13:14.760
making the noises and making
the lights flash all different

244
00:13:14.760 --> 00:13:16.710
ways. And then they get
creative and they do something

245
00:13:16.710 --> 00:13:18.870
that's not on the sheet.
And they're just like glowing.

246
00:13:20.280 --> 00:13:23.880
It's really what we're going
for. And we're the challenge

247
00:13:23.880 --> 00:13:27.000
is continuing to keep that
focus on, on the first

248
00:13:27.000 --> 00:13:30.450
five minutes, because although, you
know, everybody only has their

249
00:13:30.450 --> 00:13:33.690
first five minutes, once all
of that investment in making

250
00:13:34.920 --> 00:13:40.290
it easy, pays off for
everyone, right? Like advanced people,

251
00:13:40.590 --> 00:13:44.190
advanced programmers like myself, benefit
from having a workflow that

252
00:13:44.690 --> 00:13:48.900
is that quick. Right. And
that's why it's really a

253
00:13:48.900 --> 00:13:51.060
good thing to focus on
the beginners is because the

254
00:13:51.060 --> 00:13:55.530
benefits trickle down to everybody
who's using it. The phrase

255
00:13:55.530 --> 00:13:58.710
that we use in the
developers tool division at Microsoft,

256
00:13:58.710 --> 00:14:01.890
where I work, we call
it the developers inner loop,

257
00:14:02.040 --> 00:14:03.930
not the outer loop, but
it's the inner loop. It's

258
00:14:04.140 --> 00:14:06.510
how quickly can I make
a change and then see

259
00:14:06.510 --> 00:14:09.540
the chain? Exactly. Is it,
is it one hot key?

260
00:14:09.540 --> 00:14:11.340
Is it two hot keys
and then hit a five

261
00:14:11.340 --> 00:14:13.050
and then hit a break
point and wait, do I

262
00:14:13.050 --> 00:14:16.980
have to just you've you've
taken hardware and almost turned

263
00:14:16.980 --> 00:14:19.740
it into like hitting F
12 and Chrome and hitting

264
00:14:19.740 --> 00:14:23.670
refresh. And even less, You
have one less click than

265
00:14:23.670 --> 00:14:27.450
that. The auto reload Based
on the file, same thing

266
00:14:27.480 --> 00:14:32.430
came from a micro Python
was very much using what

267
00:14:32.430 --> 00:14:34.680
is called the rebel. It's
the read of Al print

268
00:14:34.680 --> 00:14:37.500
loop where you can connect
over the serial part and

269
00:14:37.500 --> 00:14:40.740
type Python and hit enter,
and we'll evaluate it. And

270
00:14:40.740 --> 00:14:43.380
we said, this is really
powerful, right? This concept of

271
00:14:43.380 --> 00:14:46.230
like, I can type something
in and immediately see its

272
00:14:46.230 --> 00:14:50.430
action is really powerful. And
I, I understood that, but

273
00:14:50.430 --> 00:14:53.330
I also, the rep the
rep will interface because the

274
00:14:53.330 --> 00:14:56.570
code you write doesn't live
forever, right? Like once you

275
00:14:56.570 --> 00:14:59.270
write it, you can't access
it very easily. Again, it's

276
00:14:59.270 --> 00:15:02.150
a femoral. And I was
like, you know, if we

277
00:15:02.150 --> 00:15:05.900
ha, if we just auto
reloaded on save, we would

278
00:15:05.900 --> 00:15:10.610
have the same instant feedback
loop. But with code that

279
00:15:11.300 --> 00:15:15.350
stays that you can build
on, which is kinda why

280
00:15:15.350 --> 00:15:19.240
we, why we went that
way When you hit save.

281
00:15:19.240 --> 00:15:21.130
And there's a beep and
a reboot and a, you

282
00:15:21.130 --> 00:15:23.110
know, it feels like a
reboot. I'm just saying Reboot,

283
00:15:23.110 --> 00:15:27.340
but yeah. How is that?
Not corrupting any files that

284
00:15:27.340 --> 00:15:31.540
does the drive disappear? How
does that work? She'll reliably.

285
00:15:32.140 --> 00:15:33.910
And while the coal has
to be a reliable, we're

286
00:15:33.910 --> 00:15:37.240
not always, but the secret
is, is that it's not

287
00:15:37.240 --> 00:15:41.050
restarting the whole thing. It's
not restarting the whole microcontroller.

288
00:15:41.320 --> 00:15:44.860
So we're preserving your USB
link. We're preserving your file

289
00:15:44.860 --> 00:15:47.920
system for you. What we
are restarting is, is the

290
00:15:47.920 --> 00:15:52.480
virtual machine part of a
circuit Python. So all of

291
00:15:52.480 --> 00:15:55.150
the memory that Python has
touched will get wiped and

292
00:15:55.150 --> 00:15:58.840
restarted. And then we're, we're
also good about resetting all

293
00:15:58.840 --> 00:16:03.490
of the peripheral hardware that
you may have used for

294
00:16:03.520 --> 00:16:06.700
different devices. Like I squared
C in spy, for example,

295
00:16:06.700 --> 00:16:11.140
we'll reset that in between
reloads as well. Okay. Just

296
00:16:11.140 --> 00:16:14.320
want to say warm reboot.
Not a cold. Yeah, basically.

297
00:16:14.770 --> 00:16:17.740
And one of the challenges,
challenges with this has actually

298
00:16:17.740 --> 00:16:21.250
been teaching people to not
do a hard reset because

299
00:16:21.250 --> 00:16:24.520
there is there, most of
the boards have reset buttons

300
00:16:24.520 --> 00:16:28.240
on them, and that will
start the, the whole thing

301
00:16:28.240 --> 00:16:30.790
over again, and you'll lose
USB and you could corrupt

302
00:16:30.790 --> 00:16:33.820
your file systems. So we've
had to be very careful

303
00:16:33.820 --> 00:16:36.370
in how we talk about
it because the buttons labeled

304
00:16:36.370 --> 00:16:40.090
reset. So it's a, the
file system is an auto

305
00:16:40.090 --> 00:16:44.440
reload thing. Okay. That's a
good reminder to me. I

306
00:16:44.440 --> 00:16:46.150
don't want to just get
into it. I have it

307
00:16:46.150 --> 00:16:48.490
of hitting control S to
save and then hitting reset.

308
00:16:48.790 --> 00:16:52.270
Cause it's just not necessary.
Yeah, yeah, yeah. You shouldn't

309
00:16:52.360 --> 00:16:55.720
ever have to hit the
reset button at all. And

310
00:16:55.720 --> 00:16:57.430
if you do, if you
are going to hit it,

311
00:16:57.430 --> 00:16:59.800
you should always eject your
file system and make sure

312
00:16:59.800 --> 00:17:03.400
that that your host computer
has written out everything that

313
00:17:03.400 --> 00:17:06.880
it thinks it needs to.
Hi friends as a programmer,

314
00:17:06.910 --> 00:17:10.870
you think in objects with
Mongo DB sodas, your database,

315
00:17:11.260 --> 00:17:14.950
Mongo DB is the most
popular document based database built

316
00:17:14.950 --> 00:17:18.760
for modern application developers on
the cloud era, millions of

317
00:17:18.760 --> 00:17:22.540
developers use Mongo DB to
power. The world's most innovative

318
00:17:22.540 --> 00:17:27.520
products and services from cryptocurrency
to online gaming IOT and

319
00:17:27.520 --> 00:17:32.020
more, you can try Mongo
DB today with Atlas, the

320
00:17:32.020 --> 00:17:36.310
global cloud database service that
runs on AWS Azure and

321
00:17:36.310 --> 00:17:40.210
Google cloud configure, deploy and
connect to your database in

322
00:17:40.210 --> 00:17:46.180
just a few minutes, check
it out at Mongo db.com/atlas.

323
00:17:46.540 --> 00:17:52.320
That's M O N G
O D b.com/atlas. So you've

324
00:17:52.320 --> 00:17:54.720
got this wonderful high level
language in the form of

325
00:17:54.720 --> 00:17:58.710
Python, but you've got absolute
power and control over these

326
00:17:58.710 --> 00:18:00.870
devices. I mean, you can
go down to voltage, you

327
00:18:00.870 --> 00:18:04.290
can go down to pins
you yeah. Be almost like,

328
00:18:04.290 --> 00:18:06.960
see, and you can call,
you know, extra and see

329
00:18:06.960 --> 00:18:12.860
like It takes more work
to. So a lot of

330
00:18:12.860 --> 00:18:14.540
the work that I do
is actually written in C.

331
00:18:14.540 --> 00:18:18.830
So there's a lot of
modules. There's modules you'll find

332
00:18:18.830 --> 00:18:22.880
like bus IO or digital
IO. Those are actually written

333
00:18:22.880 --> 00:18:26.390
and see under the hood.
Anything that talks to the

334
00:18:26.390 --> 00:18:29.930
hardware has kind of a
C component to it. My

335
00:18:29.930 --> 00:18:32.300
job, I have not seen
that though. You've hidden that

336
00:18:32.300 --> 00:18:34.550
from me as the, as
the user with the 11

337
00:18:34.550 --> 00:18:38.120
year old. Exactly. And that's
the goal? The goal is

338
00:18:38.120 --> 00:18:40.940
that you don't need to
worry about that. You also

339
00:18:40.940 --> 00:18:44.900
shouldn't need to worry about
concurrency at all, because concurrency

340
00:18:44.900 --> 00:18:49.070
is tricky. Even for me
also. No fun. Yeah. It's

341
00:18:49.070 --> 00:18:52.970
really tough. So yeah, my
job, you know, my job

342
00:18:53.000 --> 00:18:55.430
is to focus on keeping
it easy and keeping it

343
00:18:55.430 --> 00:19:00.360
simple and keeping it consistent
across all of our API

344
00:19:00.360 --> 00:19:03.620
APIs and all of our
workflow and interactions and stuff.

345
00:19:04.820 --> 00:19:07.760
It's a challenge, but it's
very worth it. That's the

346
00:19:07.760 --> 00:19:10.580
fun side. That's the, the,
the fun, high level side

347
00:19:10.580 --> 00:19:12.800
where you don't have to
think about the internal details.

348
00:19:12.800 --> 00:19:16.760
You have made a wonderful
layer of abstraction. That's enabled

349
00:19:16.760 --> 00:19:19.460
me as a hardware dabbler,
but not a hardware expert,

350
00:19:19.460 --> 00:19:21.770
right. To do a lot
of damage with my kids.

351
00:19:21.800 --> 00:19:24.560
And it's super fun. That's
the hope people should, people

352
00:19:24.560 --> 00:19:26.870
should get these. I want
to shift though. And I

353
00:19:26.870 --> 00:19:29.390
do want to talk about
the low level. Okay. Because

354
00:19:29.540 --> 00:19:31.880
I want to talk about
this game boy thing that

355
00:19:31.880 --> 00:19:35.600
you've made here, because it
seems like the ultimate kind

356
00:19:35.600 --> 00:19:38.540
of like in my left
hand, I have Python. And

357
00:19:38.540 --> 00:19:41.420
in my right hand, I
have like the lowest level

358
00:19:41.420 --> 00:19:46.700
possible way of thinking about
computers. I'm you're fooling the

359
00:19:46.700 --> 00:19:49.160
game. Boy, somehow. I mean,
the GameBoy itself is not

360
00:19:49.160 --> 00:19:53.000
running circuit Python. Right. Walk
me through this. Yeah. So,

361
00:19:53.270 --> 00:19:55.730
so I just spent the
last 10 minutes talking about

362
00:19:55.730 --> 00:20:00.470
how circuit Python makes hardware
accessible. And I wanted to

363
00:20:00.470 --> 00:20:04.010
prove the point that that
can work for hardware that

364
00:20:04.010 --> 00:20:08.810
exists as well. You can
do Homebrew game boy games,

365
00:20:08.840 --> 00:20:11.600
but like a lot of
the stuff we talked about,

366
00:20:11.600 --> 00:20:14.270
there's a lot of kind
of esoteric programs that you

367
00:20:14.270 --> 00:20:16.790
have to install for it.
And I was thinking, I

368
00:20:16.790 --> 00:20:19.070
watched this video about how
the GameBoy works. And I

369
00:20:19.070 --> 00:20:23.000
was like, you know what?
You know, which I guess

370
00:20:23.000 --> 00:20:26.450
is the start of a
lot of my projects, but

371
00:20:26.450 --> 00:20:29.690
it's like, what I can
do is I can, so

372
00:20:30.200 --> 00:20:33.890
there's this notion of security.
That's basically like, if you

373
00:20:33.890 --> 00:20:36.590
have root access, you can
do whatever you want. Right?

374
00:20:36.590 --> 00:20:39.950
So like once the CPU
is, is in a privileged

375
00:20:39.950 --> 00:20:42.590
state, you can execute whatever
code you want. You can

376
00:20:42.590 --> 00:20:45.770
do whatever you want with
the device. And the game

377
00:20:45.770 --> 00:20:48.610
boy is 30 years old
and it doesn't have, it

378
00:20:48.610 --> 00:20:52.180
has one little bit of
security. But besides that, once

379
00:20:52.270 --> 00:20:56.830
the, the cartridge has control,
the cartridge can, can create

380
00:20:56.830 --> 00:21:01.330
code to do whatever it
wants. GameBoy games traditionally are

381
00:21:01.330 --> 00:21:06.370
just memory. So the code
that, the game that embodies

382
00:21:06.370 --> 00:21:09.100
what donkey Kong is, is
just encoded in bits on

383
00:21:09.100 --> 00:21:13.600
a, on a cartridge, but
there's actually no restriction as

384
00:21:13.600 --> 00:21:16.660
to how those bits are
generated. So what I've done

385
00:21:16.660 --> 00:21:20.260
is I run circuit Python
in the cartridge itself. And

386
00:21:20.260 --> 00:21:23.470
when the game boy says,
Hey, like either give me

387
00:21:23.770 --> 00:21:26.410
data or give me the
next instruction I should do.

388
00:21:26.620 --> 00:21:28.450
I can just return it
and say like, Hey, do

389
00:21:28.450 --> 00:21:32.980
this instruction. And that gives
me, I can do whatever

390
00:21:32.980 --> 00:21:36.280
I want as a result
of that, basically. So I

391
00:21:36.280 --> 00:21:38.770
can do things like say,
Hey, I want you to

392
00:21:38.800 --> 00:21:41.620
write a piece of memory
at this address, which happens

393
00:21:41.620 --> 00:21:44.710
to be the address that
will play a sound on

394
00:21:44.710 --> 00:21:48.340
the game. Boy. So I
say, here's, here's the address?

395
00:21:48.340 --> 00:21:49.900
Here's the piece of data.
I want you to put

396
00:21:49.900 --> 00:21:52.870
it, that address and cups
comes as sound from the

397
00:21:52.870 --> 00:21:57.730
game boy. And then I've
plumbed that capability of setting

398
00:21:58.120 --> 00:22:01.120
the memory of the GameBoy
into Python. So that you

399
00:22:01.120 --> 00:22:04.150
can say from Python, Hey,
play me a sound on

400
00:22:04.150 --> 00:22:06.810
the game, boy. Okay. So
let me see if I

401
00:22:06.810 --> 00:22:10.350
can paraphrase and understand this
the, the game boy, as

402
00:22:10.350 --> 00:22:13.890
you said, 30 years old,
1980, 89. Yup. Has a

403
00:22:13.890 --> 00:22:17.400
four megahertz processor. So certainly
not something that could run

404
00:22:17.610 --> 00:22:21.530
Python, perhaps that would be
a fair statement. You know,

405
00:22:21.530 --> 00:22:23.970
you would not want to
have it run something itself.

406
00:22:23.970 --> 00:22:28.420
It's four megahertz. It's nothing.
Yeah. It's debatable to people.

407
00:22:29.140 --> 00:22:31.800
The bait, whether it's one
megahertz or four, because the

408
00:22:32.310 --> 00:22:36.420
w the memory bus has
actually only one. Oh, so

409
00:22:36.420 --> 00:22:41.100
it's only catching one instruction,
like one of the megahertz,

410
00:22:41.100 --> 00:22:44.490
right. When one megahertz rate,
not four. Okay. So as

411
00:22:44.490 --> 00:22:46.200
you know, so it's even
four times smaller. It's four

412
00:22:46.200 --> 00:22:49.320
times weaker than I thought,
but there are a hundred

413
00:22:49.320 --> 00:22:52.530
million of them out there
and yep. It, so then

414
00:22:52.530 --> 00:22:55.260
you run, like we mentioned,
how one of the circuit

415
00:22:55.260 --> 00:22:58.770
Python devices is as small
as a coin, certainly lots

416
00:22:58.770 --> 00:23:02.250
of room inside of the
cartridge. So you, you go

417
00:23:02.250 --> 00:23:06.210
to Goodwill, you buy a
couple of copies of the

418
00:23:06.210 --> 00:23:09.180
Olsen twins game and pop
them open. You put the

419
00:23:09.180 --> 00:23:11.220
circuit pies on board inside,
which has, you know, a

420
00:23:11.220 --> 00:23:15.360
hundred megahertz, 200 megawatts, 120
megahertz is what I'm using.

421
00:23:15.930 --> 00:23:21.240
Okay. It runs circuit Python.
It is communicating with the

422
00:23:21.240 --> 00:23:24.150
GameBoy only via the pins,
the pin out on the

423
00:23:24.150 --> 00:23:26.820
cartridge. Right. And so you've
got voltage on those pins

424
00:23:27.570 --> 00:23:31.020
and the game boy goes
looking From memory, right? It

425
00:23:31.020 --> 00:23:34.740
says, Hey, what's the, what's
the instruction here. I need

426
00:23:34.740 --> 00:23:38.100
something to do. And I
say, well, for now, just

427
00:23:38.100 --> 00:23:42.810
don't do anything. And then,
you know, one, what does

428
00:23:42.810 --> 00:23:47.030
it nanosecond? Or one microsecond,
whatever, whatever a megahertz is

429
00:23:47.030 --> 00:23:48.620
like, it'll come back to
me and say, okay, now

430
00:23:48.620 --> 00:23:49.760
what do you want me
to do? And I'll say

431
00:23:49.800 --> 00:23:52.250
like, Oh, now I want
to do this like, load

432
00:23:52.760 --> 00:23:55.790
thing that causes it to
play a sound. And I

433
00:23:55.790 --> 00:24:01.150
just continued to do that
over and over again. That's

434
00:24:01.150 --> 00:24:04.270
so cool. When, when I
think of the Carter's though,

435
00:24:04.270 --> 00:24:06.370
it's a, it's a moment
in time. It's a rom,

436
00:24:06.370 --> 00:24:09.490
right? It's a, a, here
it is. There's the program,

437
00:24:09.760 --> 00:24:12.100
right. You don't know what's
going to happen. Yours is

438
00:24:12.100 --> 00:24:14.380
kind of like, I wouldn't
say non-deterministic, isn't the right

439
00:24:14.380 --> 00:24:18.220
word, but you're lying to
it. Constantly. Every instruction is

440
00:24:18.220 --> 00:24:22.300
a lie, right? So it,
in a traditional cartridge, if

441
00:24:22.300 --> 00:24:26.680
you, if the GameBoy CPU
fetches and address a particular

442
00:24:26.680 --> 00:24:29.050
address, it expects to get
the same result over and

443
00:24:29.050 --> 00:24:32.680
over again. But it doesn't
actually verify that that is

444
00:24:32.680 --> 00:24:37.240
true, which means that even
if it's like most of

445
00:24:37.240 --> 00:24:39.910
the time I can ignore
what the address is, and

446
00:24:40.270 --> 00:24:41.830
I could just say, okay,
I'll do this. I can

447
00:24:41.830 --> 00:24:44.950
not do this. And, and
the GameBoy CPU doesn't care.

448
00:24:44.950 --> 00:24:47.980
And, and we don't care
either about the addresses almost

449
00:24:48.160 --> 00:24:51.430
really. It's not saying, well,
hang on. That's not what

450
00:24:51.430 --> 00:24:53.380
you said earlier. That's not
an appropriate thing to say

451
00:24:53.380 --> 00:24:56.230
at all. Right? So it
doesn't care. So More modern

452
00:24:56.230 --> 00:24:58.660
systems, I think, would be
more trouble in that regard.

453
00:24:58.660 --> 00:25:02.170
But the GameBoy CPU is
simple enough that it doesn't

454
00:25:02.170 --> 00:25:05.020
have any caches. So that,
like, if it was trying

455
00:25:05.020 --> 00:25:07.720
to remember what was somewhere
and like, they would have

456
00:25:07.750 --> 00:25:10.960
like consistency problems and stuff,
but it doesn't do that.

457
00:25:10.960 --> 00:25:15.850
It's, it doesn't need to,
cause cartridges are relatively quick.

458
00:25:17.290 --> 00:25:19.720
Reading straight from memory is
pretty quick. It's only when

459
00:25:19.720 --> 00:25:21.500
you get to like CD
ROMs, where you have to

460
00:25:21.500 --> 00:25:24.010
S or spinning disks that
you can really incur a

461
00:25:24.010 --> 00:25:28.330
lot of time. How do
you debug this? When I

462
00:25:28.360 --> 00:25:31.660
work on, on hardware problems,
I always have this feeling

463
00:25:31.660 --> 00:25:34.270
like it's some, at some
point it gets to a

464
00:25:34.270 --> 00:25:36.550
black box and it's not
really a black box, but

465
00:25:36.550 --> 00:25:39.880
it's a black enough box
that without an oscilloscope, I

466
00:25:39.880 --> 00:25:41.500
don't really know what the
way for them looks like.

467
00:25:41.500 --> 00:25:43.930
Or I'm sitting there with
two wires trying to figure

468
00:25:43.930 --> 00:25:46.150
out if there's voltage on
that pin, how in the

469
00:25:46.150 --> 00:25:49.690
world would you do anything
other than just, I don't

470
00:25:49.690 --> 00:25:51.730
know, piss off the game
boy and make it crash

471
00:25:52.240 --> 00:25:55.570
For hours. Now I've done
that. I've definitely crashed it.

472
00:25:55.620 --> 00:25:58.450
In fact, we just, right
before we met you at

473
00:25:58.450 --> 00:26:00.610
tech tear down, my buddy
and I were working on

474
00:26:00.610 --> 00:26:04.120
making it crash less than
we realized I was accidentally

475
00:26:04.120 --> 00:26:07.660
issuing the instruction that tells
it to stop. There's a

476
00:26:07.660 --> 00:26:10.270
stop instruction on the gateway,
which turns the screen off.

477
00:26:10.270 --> 00:26:12.940
And basically the CPU off
as well, just waiting for

478
00:26:12.940 --> 00:26:14.740
you to press a button.
So if you press a

479
00:26:14.740 --> 00:26:16.990
button and it all wakes
up and it starts up

480
00:26:16.990 --> 00:26:21.520
again, but I was, I
was accidentally doing that. And

481
00:26:21.520 --> 00:26:23.620
I thought it was like
really crashing when I was

482
00:26:23.620 --> 00:26:26.740
really just telling it to
stop accidentally. How did you

483
00:26:26.980 --> 00:26:29.350
learn that though? Did you
learn it with a voltage

484
00:26:29.350 --> 00:26:31.600
meter of Altamont or did
you learn it with a

485
00:26:31.600 --> 00:26:34.450
debug statement? I'm trying to
get my sense around how

486
00:26:34.450 --> 00:26:36.790
do you debug something like
that? I have a logic

487
00:26:36.790 --> 00:26:42.130
analyzer, so it's kind of,
you know, you're connected to

488
00:26:42.160 --> 00:26:45.030
a bunch of the, on
the, so the cartridge connector

489
00:26:45.030 --> 00:26:49.170
itself is like 32 pins,
but my logic analyzer can

490
00:26:49.170 --> 00:26:53.970
only do 16 at a
time. So I've selected bits

491
00:26:53.970 --> 00:26:57.180
of the address and bits
of the data so that

492
00:26:57.180 --> 00:27:00.740
I can see what the
game boy is requesting and

493
00:27:00.770 --> 00:27:04.980
what, what we're giving it
back. And so we realized

494
00:27:04.980 --> 00:27:10.080
like, Oh, we're like on
the, on the logic analyzer

495
00:27:10.080 --> 00:27:12.480
software, we could see like,
Oh, this is the data

496
00:27:12.480 --> 00:27:15.420
that we're returning when it's
asking for an instruction and

497
00:27:15.420 --> 00:27:17.730
that instruction, we looked it
up and it said stop,

498
00:27:18.750 --> 00:27:23.130
which was bad. So, yeah,
in general, a lot of

499
00:27:23.130 --> 00:27:27.300
video game systems are really
well-documented because they've been emulated

500
00:27:27.300 --> 00:27:31.800
a bunch. So there's a
really good PDF that you

501
00:27:31.800 --> 00:27:36.570
can find called the unofficial
GameBoy CPU manual. It's I

502
00:27:36.570 --> 00:27:38.670
don't know how many pages,
but it goes into great

503
00:27:38.670 --> 00:27:42.540
detail about how the game
boy actually works. So there's

504
00:27:42.990 --> 00:27:46.410
a lot that is already
known. No, only a few

505
00:27:46.410 --> 00:27:49.020
people that I've found have
actually tried to make cartridges

506
00:27:49.020 --> 00:27:54.270
like I have, but in
general, you know, most of

507
00:27:54.270 --> 00:27:57.360
the things that you need
to know, the challenges kind

508
00:27:57.360 --> 00:28:01.200
of like bridging that gap
and making sure that you

509
00:28:01.230 --> 00:28:04.950
can respond in time, for
example, or if you are

510
00:28:04.950 --> 00:28:07.290
trying to issue instructions to
the game, boy, making sure

511
00:28:07.290 --> 00:28:10.200
that you, once a, once
you give an instruction, once

512
00:28:10.200 --> 00:28:13.020
you don't give it a
second time accidentally, you, you

513
00:28:13.020 --> 00:28:14.820
need to make sure that
you get the next thing

514
00:28:14.820 --> 00:28:18.810
there in that one megahertz
window that you've got, which

515
00:28:18.810 --> 00:28:21.180
I think is the source
of some of my problems

516
00:28:21.180 --> 00:28:24.020
right now. And that idea
that you have to the

517
00:28:24.020 --> 00:28:27.020
timing, like as old as
a device, as this is,

518
00:28:27.020 --> 00:28:29.870
it is a sensitive piece
of hardware such that if

519
00:28:29.870 --> 00:28:34.880
you're not ready, X microseconds
later than you weren't ready.

520
00:28:34.880 --> 00:28:36.860
And now you have to
wait another clock cycle to

521
00:28:36.860 --> 00:28:39.710
come back. And if you
really waited too long, you're

522
00:28:39.710 --> 00:28:41.060
going to really anger it
aren't you you're going to

523
00:28:41.060 --> 00:28:45.290
potentially. Yeah, yeah, yeah. Potentially
what you'll do is you'll

524
00:28:45.290 --> 00:28:48.230
issue an instruction that does
something that you didn't intend.

525
00:28:49.520 --> 00:28:52.970
And if you, if you
do that, you, you potentially

526
00:28:52.970 --> 00:28:56.330
lose access to the CPU.
If it, if it's trying

527
00:28:56.330 --> 00:28:59.600
to run a code from
a different part that is

528
00:28:59.600 --> 00:29:02.720
not on the cartridge, you
could potentially never get called

529
00:29:02.720 --> 00:29:06.110
back. It could never actually
read the cartridge memory anymore,

530
00:29:07.610 --> 00:29:10.170
which is kind of a
worst case. So the, the,

531
00:29:10.170 --> 00:29:13.640
the game boy part, like
shut up, take my money.

532
00:29:13.760 --> 00:29:17.870
I'm I'm right there with
you. I know there's that,

533
00:29:17.870 --> 00:29:21.320
but it feels like you've
created a generalized and I

534
00:29:21.320 --> 00:29:23.420
call it left hand, right
hand where you've got Python

535
00:29:23.420 --> 00:29:27.080
on the one hand, some
older piece of hardware. On

536
00:29:27.080 --> 00:29:28.880
the other hand, we, you
could potentially take this how

537
00:29:28.880 --> 00:29:31.340
far this is a great
way to revitalize all kinds

538
00:29:31.340 --> 00:29:34.100
of, of hardware with this
there's buddy cartridge now. Yeah.

539
00:29:34.400 --> 00:29:37.490
Whenever and C w whenever
you're in Seattle, you'll have

540
00:29:37.490 --> 00:29:40.820
to come see my laundry
room, because I have collected

541
00:29:40.820 --> 00:29:43.330
a lot of different devices
that kind of fit in

542
00:29:43.330 --> 00:29:48.430
all of the same era
of cartridge based computing systems

543
00:29:48.430 --> 00:29:54.190
like Commodore 64, our tare
800 Apple, two doesn't have

544
00:29:54.190 --> 00:29:57.400
cartridges, but they have PC
like parallel slots that would,

545
00:29:57.400 --> 00:29:59.770
could work the same way.
And they're all kind of

546
00:29:59.800 --> 00:30:03.790
pre security and validation. So
we should be able to

547
00:30:03.850 --> 00:30:08.110
play similar tricks to the
memory, even if there are

548
00:30:08.110 --> 00:30:10.660
caches that are trying to
remember what was there. We

549
00:30:10.660 --> 00:30:14.230
could always like once we
have instruction access, we can

550
00:30:14.230 --> 00:30:18.940
always turn those off. Hopefully.
So that, that it doesn't,

551
00:30:19.030 --> 00:30:21.610
we don't need to worry
about the consistency issue. So,

552
00:30:22.180 --> 00:30:24.340
yeah, there's a whole lot
of, a lot of stuff

553
00:30:24.340 --> 00:30:27.460
that, that you can do
that with another example is

554
00:30:27.460 --> 00:30:32.050
like eighties, Eric, piano, keyboards,
I've been interested in. So

555
00:30:32.050 --> 00:30:34.840
I have a, you know,
an old Yamaha keyboard and,

556
00:30:34.930 --> 00:30:38.140
and the sound chip that
does the synthesis is actually

557
00:30:38.170 --> 00:30:41.710
the same one from the
sound blaster, the original soundblaster

558
00:30:41.710 --> 00:30:45.820
card, which is like super
classic sound. And I want

559
00:30:45.820 --> 00:30:47.890
to be able to put
circuit Python and that, and

560
00:30:47.890 --> 00:30:51.910
control all the playback from
surrogate Python. So you could

561
00:30:51.910 --> 00:30:55.150
have USB middy coming in
and playing your keyboard or

562
00:30:55.450 --> 00:30:57.970
vice versa where you're playing
on this eighties, R a

563
00:30:57.970 --> 00:31:02.200
keyboard, but you're, you're streaming
Mitty backup the link, a

564
00:31:02.230 --> 00:31:06.730
tier over USB as well.
It's just, possibilities are endless.

565
00:31:06.730 --> 00:31:09.040
And I waste my time
with endless as well, but

566
00:31:09.040 --> 00:31:12.670
it is not, I was,
I was thinking about something

567
00:31:12.670 --> 00:31:14.830
that I wish I had
the skills to make, which

568
00:31:14.830 --> 00:31:18.160
was, yes, you've got cartridges
on something like a commerce

569
00:31:18.160 --> 00:31:21.400
64, but there were, there
was a whole class of

570
00:31:21.400 --> 00:31:25.030
devices that would take information
from a tape drive where

571
00:31:25.030 --> 00:31:28.900
you were effectively a one-way
modem. Like people don't realize

572
00:31:28.900 --> 00:31:31.300
that it was almost as
if you had recorded a

573
00:31:31.300 --> 00:31:34.390
modem noise and you played
it back over tape. Could

574
00:31:34.390 --> 00:31:38.770
you make a system that
lied and made that noise?

575
00:31:38.800 --> 00:31:40.510
And as if it were
a phone call that never

576
00:31:40.510 --> 00:31:43.960
ended, and you would just
keep whistling and you'd have

577
00:31:43.960 --> 00:31:47.170
your circuit Python device, you
know, send those instructions down

578
00:31:47.170 --> 00:31:49.030
the wire. Yeah, you could.
But I think what you

579
00:31:49.030 --> 00:31:51.880
would run into is that
the computer expects those devices

580
00:31:51.880 --> 00:31:56.440
to be very slow. And
I think the way that

581
00:31:56.440 --> 00:31:59.500
those typically worked is that
they, because they were slow,

582
00:31:59.500 --> 00:32:02.200
they would have to load
everything into Ram and then

583
00:32:02.200 --> 00:32:04.990
run from Ram. And so
you wouldn't necessarily be able

584
00:32:04.990 --> 00:32:07.630
to do that sort of
like dynamism that I have

585
00:32:07.630 --> 00:32:10.720
with the GameBoy, where I'm
constantly changing the program that

586
00:32:10.720 --> 00:32:14.200
I'm returning to them based
on what the program I'm

587
00:32:14.200 --> 00:32:17.470
running internally is actually going.
I think you would have

588
00:32:17.500 --> 00:32:20.140
more trouble with that. So
the cartridge based model, you

589
00:32:20.140 --> 00:32:21.700
want to see how far
you can run with this.

590
00:32:21.700 --> 00:32:23.320
And it sounds like you
could potentially run pretty far

591
00:32:23.320 --> 00:32:25.870
you're, you're limited only by
your time and perhaps the

592
00:32:25.870 --> 00:32:27.850
interest of other people in
the community who might be

593
00:32:27.850 --> 00:32:31.410
interested in, in helping. Yeah.
Yeah. I mean, you know,

594
00:32:31.410 --> 00:32:34.780
we're always looking for contributors
to circuit Python, whether the

595
00:32:34.780 --> 00:32:38.410
game boy, era retro stuff
is interesting to you or

596
00:32:39.050 --> 00:32:42.260
know who knows what, one
thing I'm very excited in

597
00:32:42.260 --> 00:32:45.560
the workflow. Vein, going back
to that, as we're starting

598
00:32:45.560 --> 00:32:48.980
to really are Bluetooth, low
energy support is starting to

599
00:32:49.430 --> 00:32:52.820
mature a lot. And what
I've found with my nieces

600
00:32:52.820 --> 00:32:57.080
is that they all have
iPods or iPads before they

601
00:32:57.080 --> 00:33:00.440
have laptops. And though, I
don't know about your sons,

602
00:33:00.440 --> 00:33:05.450
but the mobile devices are
what people are, what kids

603
00:33:05.450 --> 00:33:09.080
are starting with and having
as their own. And so

604
00:33:09.170 --> 00:33:12.320
I really want to make
circuit Python that workflow that

605
00:33:12.320 --> 00:33:15.680
we have over USB work
from a mobile device in

606
00:33:15.680 --> 00:33:19.640
a wireless way. And that's
kind of the challenge towards

607
00:33:19.640 --> 00:33:21.620
the end of the year
and probably going forward in

608
00:33:21.620 --> 00:33:24.110
the next few years to
make, make it really solid.

609
00:33:25.310 --> 00:33:27.560
And that's my day job.
So I will have time

610
00:33:27.560 --> 00:33:30.920
to do that as well.
That's so exciting. Well, thank

611
00:33:30.920 --> 00:33:33.410
you so much, Scott Shaw Kraft
for chatting with me today.

612
00:33:33.470 --> 00:33:36.620
Thanks for having me. You
can check out everything that

613
00:33:36.620 --> 00:33:40.700
he's working on it. kanoot.org.
That's T a N N

614
00:33:40.730 --> 00:33:44.150
E w t.org. And I'm
a huge fan of the

615
00:33:44.150 --> 00:33:48.530
ADA box, the eight of
fruit curated collectibles subscription service.

616
00:33:48.530 --> 00:33:52.820
Check that out@adafruit.com slash eight
a box, and also go

617
00:33:52.820 --> 00:33:55.070
check out all the great
circuit pies on boards and

618
00:33:55.070 --> 00:33:59.780
fun things that you can
do@circuitpython.org, as well as the

619
00:33:59.780 --> 00:34:03.260
products that fruit that supported.
This has been another episode

620
00:34:03.260 --> 00:34:25.630
of Hanselman <inaudible>.

