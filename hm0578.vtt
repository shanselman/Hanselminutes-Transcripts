WEBVTT FILE

1
00:00:00.180 --> 00:00:03.360
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.360 --> 00:00:06.300
they make the show possible.
Today's show is sponsored by

3
00:00:06.300 --> 00:00:10.500
developer express, become a UI
superhero with dev express controls

4
00:00:10.500 --> 00:00:15.030
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.420 --> 00:00:19.500
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.500 --> 00:00:23.610
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.700 --> 00:00:45.890
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
Hi, this is Scott Hanselman.

8
00:00:45.890 --> 00:00:48.050
This is another episode of
Hansel minutes. And today I'm

9
00:00:48.050 --> 00:00:52.460
talking with Scott bellwether, freelance
software developer, and longtime user

10
00:00:52.460 --> 00:00:55.670
of Ruby and rails. How
are you, sir? I'm great.

11
00:00:55.700 --> 00:00:58.190
Good to be talking with
you again. Yeah, you've got

12
00:00:58.250 --> 00:01:01.220
a, you gave me a
fantastic outline about what we're

13
00:01:01.220 --> 00:01:04.100
going to talk about today,
and you're a big fan

14
00:01:04.100 --> 00:01:08.570
of the Ruby language. Aren't
you? I am indeed. How,

15
00:01:08.930 --> 00:01:10.760
how long have you been
using Ruby? And I know

16
00:01:10.760 --> 00:01:13.250
that you also have done.net
and you've done node and

17
00:01:13.250 --> 00:01:16.160
you've done all kinds of
languages. You've got certainly a

18
00:01:16.160 --> 00:01:18.970
pedigree that goes back many
years and experience in a

19
00:01:18.970 --> 00:01:21.110
number of languages, but there's,
you know, you keep coming

20
00:01:21.110 --> 00:01:25.370
back to Ruby. Yeah. You
know, it started in 2006

21
00:01:25.430 --> 00:01:28.610
with there was, I think
the rise of Ruby really

22
00:01:28.610 --> 00:01:30.980
happened around a bunch of
guys who were in Java,

23
00:01:31.010 --> 00:01:34.610
who had previously been small
talk developers who ended up

24
00:01:34.610 --> 00:01:38.360
in Java and were in
the no fluff, just stuff,

25
00:01:38.360 --> 00:01:41.630
series of conferences and a
bunch of us.net guys at

26
00:01:41.630 --> 00:01:44.630
the time went to that
went to that event in

27
00:01:44.630 --> 00:01:46.640
Austin. Who's traveling Roach who
went to that event in

28
00:01:46.640 --> 00:01:48.950
Austin. And just to see
what the big, the big

29
00:01:48.950 --> 00:01:51.530
hoopla was about why the
Java guys were really getting

30
00:01:52.230 --> 00:01:55.520
excited about Ruby. So we
kinda went to no fluff

31
00:01:55.580 --> 00:01:59.870
and, and caught a little
bit of the bug. No

32
00:01:59.870 --> 00:02:03.400
fluff, just stuff is a
series of conferences. How would

33
00:02:03.410 --> 00:02:08.240
I know about that? Oh,
well, if you were in

34
00:02:08.240 --> 00:02:10.670
the job world, I think
you'd you'd would be hard

35
00:02:10.670 --> 00:02:13.760
to miss, you know, so
all the big names in,

36
00:02:13.760 --> 00:02:15.830
in, in Java, I'm not
sure if the conference is

37
00:02:15.830 --> 00:02:18.560
still being done, but it
was, you know, Ted Neward

38
00:02:18.950 --> 00:02:22.130
and well, basically I'm not
going to run down the

39
00:02:22.130 --> 00:02:25.310
list of the, of the,
of the list of celebrity

40
00:02:25.310 --> 00:02:26.810
names, but it was all
the big guys in the

41
00:02:26.810 --> 00:02:29.690
Java world on a road
show, going down to town

42
00:02:29.810 --> 00:02:33.320
for, for several years. And
then they, and then within

43
00:02:33.320 --> 00:02:37.640
that Java world, you found,
you found Ruby. Yeah. And

44
00:02:37.640 --> 00:02:39.650
I think it was always
sort of, you know, a

45
00:02:39.650 --> 00:02:42.410
thing in the Java world
to be a little bit

46
00:02:42.410 --> 00:02:44.300
more, you know, the work
that finally came out with

47
00:02:44.300 --> 00:02:49.640
polyglot a little bit more
inquisitive and to tinker more

48
00:02:49.640 --> 00:02:51.440
with more programming languages, which
is, I think why you

49
00:02:51.440 --> 00:02:55.100
get, you know, on the
JVM, there's a, there's a

50
00:02:55.100 --> 00:03:00.670
lot of really successful mainstream
languages like closure and like

51
00:03:00.670 --> 00:03:04.510
Scala that are, you know,
peer. And before that groovy

52
00:03:04.540 --> 00:03:08.440
who have these languages have
a lot of popularity and

53
00:03:08.440 --> 00:03:10.870
a lot of use, and
I'm not going to sort

54
00:03:10.870 --> 00:03:13.060
of just say as opposed
to, you know, the, the

55
00:03:13.060 --> 00:03:16.750
CLR, which has multiple language
implementations, but they're, they're not,

56
00:03:16.750 --> 00:03:19.720
as they're not as are
used in the mainstream. And

57
00:03:19.720 --> 00:03:22.000
I think in, in the
Java world, languages, many languages

58
00:03:22.000 --> 00:03:24.040
tend to end up more
in the mainstream than, than,

59
00:03:24.430 --> 00:03:27.730
than elsewhere. That's just part
of their history. I mean,

60
00:03:27.730 --> 00:03:29.950
that's just like, you know,
that's not a value judgment.

61
00:03:29.950 --> 00:03:31.750
That's just, that's just part
of the background. It's sort

62
00:03:31.750 --> 00:03:35.310
of like, right, But rails
kind of Ruby rather kind

63
00:03:35.310 --> 00:03:38.160
of Rose up. And there
was a time when dynamic

64
00:03:38.160 --> 00:03:41.280
languages were not, you know,
the new hotness and now

65
00:03:41.850 --> 00:03:45.540
Ruby and started getting people
excited. And the small talk

66
00:03:45.540 --> 00:03:49.920
programmers, you know, started exploring
Ruby and.net. People started looking

67
00:03:49.920 --> 00:03:54.120
at the aspects of dynamic
languages that provided value. Yeah.

68
00:03:54.120 --> 00:03:56.790
And I think is it
happened? You know, it was

69
00:03:56.820 --> 00:03:58.950
almost, I'm going to say
a knee jerk reaction, but

70
00:03:58.950 --> 00:04:02.220
I think it was a,
an organic reaction to what,

71
00:04:02.550 --> 00:04:05.190
at the time we were
thinking what was often called

72
00:04:05.370 --> 00:04:09.780
compiler ceremony or the rigmarole
of dealing with static typing

73
00:04:09.840 --> 00:04:13.020
when, you know, all you
wanted to do was, you

74
00:04:13.020 --> 00:04:14.790
know, invoke a method on
something that you knew the

75
00:04:14.790 --> 00:04:18.120
method was there and didn't
want to use generics and

76
00:04:18.120 --> 00:04:21.390
casting to get, to get
to that outcome. So a

77
00:04:21.390 --> 00:04:25.050
little bit less, let's say
more rigmarole, but it also

78
00:04:25.440 --> 00:04:29.100
opens up, opens up some
challenges you don't get, you

79
00:04:29.100 --> 00:04:31.350
don't get compile time checks
and so forth. So you

80
00:04:31.350 --> 00:04:34.590
relying on, on other mechanisms
to make sure your stuff

81
00:04:34.590 --> 00:04:37.170
is correct. And it also
opens up the opportunity to

82
00:04:37.170 --> 00:04:42.540
do dynamic programming or meta
programming or dynamic construction where

83
00:04:43.170 --> 00:04:47.730
the ability to create DSLs,
which was really well exercised

84
00:04:47.730 --> 00:04:51.840
and represented by, by Ruby
on rails. You know, that

85
00:04:51.840 --> 00:04:53.610
possibility opens up to you.
So you're, you're able to

86
00:04:53.610 --> 00:04:56.490
create APIs that are a
little bit more descriptive, a

87
00:04:56.490 --> 00:05:00.930
little bit more approachable to
new developers, a little bit

88
00:05:00.930 --> 00:05:05.430
less overhead in terms of
having to use XML to

89
00:05:05.430 --> 00:05:10.320
do configuration of, of, of
transformations, like, like what we

90
00:05:10.320 --> 00:05:12.720
do with, with ORM. So
if we deal with an

91
00:05:12.720 --> 00:05:15.120
hibernate, what we do with
entity framework in terms of

92
00:05:15.120 --> 00:05:19.370
creating a, a description of
a transformation in XML, it's,

93
00:05:19.370 --> 00:05:21.510
it's, it's a bit easier
when you have DSLs at

94
00:05:21.510 --> 00:05:24.360
hand. So we, we get
this popularity of, of rails

95
00:05:24.360 --> 00:05:27.540
coming up out of this
combination of, you know, dynamic

96
00:05:27.540 --> 00:05:30.870
programming language, that's enjoyable to
use plus the capabilities to

97
00:05:30.870 --> 00:05:34.650
produce DSLs. And now we
get a really, really simplified

98
00:05:35.190 --> 00:05:38.010
development environment that compared to
what we had at the

99
00:05:38.010 --> 00:05:44.610
time really did represent defacto
less rigmarole. Of course. I

100
00:05:44.610 --> 00:05:46.290
just want to make sure
for people who don't necessarily

101
00:05:46.290 --> 00:05:49.260
know the acronyms DSL is
a domain specific language. It's

102
00:05:49.530 --> 00:05:53.370
creating a language from another
language, a smaller, more domain

103
00:05:53.370 --> 00:05:57.260
specific language. And Ruby is
great for that. Yeah. And,

104
00:05:57.260 --> 00:06:00.290
and really it's, It's, you
know, a language, you know,

105
00:06:00.290 --> 00:06:03.320
all APIs have, have their
own language per se. So

106
00:06:03.330 --> 00:06:06.260
it's, it's, it's important to
say that we're not actually

107
00:06:06.260 --> 00:06:09.920
creating a whole programming language,
but just maybe making things

108
00:06:09.920 --> 00:06:13.550
in the language that looked
like the declarations that look

109
00:06:13.550 --> 00:06:15.740
like they're part of the
language, but they're not really

110
00:06:15.770 --> 00:06:18.400
part of the language. And
that kind of gets us

111
00:06:18.400 --> 00:06:20.920
into the, kind of the
impact that rails has had

112
00:06:20.920 --> 00:06:23.290
on other languages, because rails
is it's its own kind

113
00:06:23.290 --> 00:06:25.600
of DSL. I mean, it's
a web framework, but it

114
00:06:25.600 --> 00:06:28.780
also has some opinions that
it brings from its creator

115
00:06:28.780 --> 00:06:32.260
and its core team into
Ruby, such that it's almost

116
00:06:32.260 --> 00:06:35.170
sometimes impossible to tell where
Ruby ends and we know

117
00:06:35.170 --> 00:06:38.890
where rails begins with the
way that they treated dates

118
00:06:39.250 --> 00:06:41.920
and the, the action. What
is it called? The action

119
00:06:41.920 --> 00:06:48.070
pack. Yes. Yeah. That's the
website of, of rails. And

120
00:06:48.100 --> 00:06:51.280
people saw that and said,
wow, this is like poetry.

121
00:06:51.280 --> 00:06:54.490
This is like a haiku.
I want my thing to

122
00:06:54.490 --> 00:06:57.520
be like rails. I think
he might've been, I'm guessing

123
00:06:57.520 --> 00:06:59.350
here, but I think you
might've been referring to active

124
00:06:59.350 --> 00:07:04.390
support, active support the thing
that adds like, you know,

125
00:07:06.190 --> 00:07:11.890
days from, to the integer.
Yeah, exactly. Yeah. Point that

126
00:07:11.890 --> 00:07:14.680
out is that when people
go and do their little

127
00:07:14.710 --> 00:07:19.180
like elevator speech to present
why XYZ is cool, inevitably

128
00:07:19.180 --> 00:07:21.070
they come and they show
things like that. Like, look

129
00:07:21.070 --> 00:07:23.800
how easy it is to
say three seconds ago, you

130
00:07:23.800 --> 00:07:27.010
know? And, and, and then
people say, well, was that

131
00:07:27.010 --> 00:07:29.440
rails is that Ruby is
that whatever it's just, it's

132
00:07:29.440 --> 00:07:31.750
meant to codify. They're real
jealous. And you know, you

133
00:07:31.750 --> 00:07:33.990
don't have that with you
don't have that with, with

134
00:07:34.000 --> 00:07:36.550
MBC frameworks that are built
on static languages, of course.

135
00:07:36.550 --> 00:07:39.340
Cause it's pretty hard to
do, I guess, in CA

136
00:07:39.370 --> 00:07:41.500
in something like C-sharp, you
can use an extension method

137
00:07:42.280 --> 00:07:44.350
to the boat. You know,
this has been both a

138
00:07:44.350 --> 00:07:46.270
good thing and a bad
thing for both rails and

139
00:07:46.270 --> 00:07:48.460
for Ruby, actually, not for
rails, but for Ruby, Ruby

140
00:07:48.490 --> 00:07:51.310
has become indistinguishable to from
large part for a lot

141
00:07:51.310 --> 00:07:55.540
of its users from rails
and from active support. So

142
00:07:55.540 --> 00:08:01.390
I jokingly, occasionally referred to
Ruby as rails script, which

143
00:08:01.390 --> 00:08:03.970
is a way to just
to use it's it's basically

144
00:08:04.300 --> 00:08:06.790
not really you you're using
Ruby because you were using

145
00:08:06.790 --> 00:08:08.890
rails. And if rails was
written in something else, you'd

146
00:08:08.890 --> 00:08:11.470
be using that language. It
wasn't really the focus wasn't

147
00:08:11.470 --> 00:08:14.260
really Ruby, although because of
Ruby and because of its

148
00:08:14.260 --> 00:08:17.680
capabilities, rails was able to
be created, but we get

149
00:08:17.680 --> 00:08:22.120
back to this action, active
support stuff, and you have

150
00:08:22.120 --> 00:08:25.570
like one dot seconds from
now. That's an interesting, that's

151
00:08:25.570 --> 00:08:27.640
an interesting thing to have,
but, but it turns out

152
00:08:27.640 --> 00:08:30.820
that, you know, the problems
with the problems with any

153
00:08:31.360 --> 00:08:34.810
architecture that's meant for a
smaller scale team. When you

154
00:08:34.810 --> 00:08:36.370
want to break it into
a, when you want to

155
00:08:36.370 --> 00:08:37.750
get a big team where
you end up with a

156
00:08:37.750 --> 00:08:39.160
big team and a big
app, and you want to

157
00:08:39.160 --> 00:08:42.130
move some of that code
away from the core web

158
00:08:43.600 --> 00:08:49.030
framework, when you are calling
dot seconds dot from now,

159
00:08:49.030 --> 00:08:52.720
or whatever on an integer,
and you move that code

160
00:08:52.720 --> 00:08:57.780
away from rails, that method
is no longer available to

161
00:08:57.780 --> 00:09:03.600
you. Whereas we could have
created a class called seconds

162
00:09:03.600 --> 00:09:05.850
or a, you know, a
static class that you can

163
00:09:05.850 --> 00:09:07.410
invoke called sex. We could
have had another way to

164
00:09:07.410 --> 00:09:12.060
do this without, without modifying
the integer. And that was

165
00:09:12.060 --> 00:09:15.690
always, you know, that was
always a warning that was

166
00:09:15.690 --> 00:09:20.610
being issued, like watch out
for modifying things that really

167
00:09:20.640 --> 00:09:23.520
aren't of your own definition.
We, so we could have

168
00:09:23.520 --> 00:09:25.050
done things, I think in
a, in a much more

169
00:09:25.050 --> 00:09:27.150
intelligent way. And I don't
think it would have been

170
00:09:27.150 --> 00:09:29.910
either better or worse because
when you show somebody one

171
00:09:29.910 --> 00:09:32.760
dot seconds from now, you
know, developers still has to

172
00:09:32.760 --> 00:09:35.340
learn that they still have
to memorize that API, whether

173
00:09:35.340 --> 00:09:39.300
they're memorizing one style of
API versus another is sort

174
00:09:39.300 --> 00:09:41.310
of comes out in the
wash. But, you know, if

175
00:09:41.310 --> 00:09:44.760
we, if we could roll
back the clock, we might

176
00:09:44.820 --> 00:09:51.570
see more staunch advocacy for,
for not modifying existing data

177
00:09:51.570 --> 00:09:55.250
types. Doesn't so does that
mean that we know whether

178
00:09:55.250 --> 00:09:56.810
or not it was intentional
or whether or not it

179
00:09:56.810 --> 00:10:00.330
was a bad thing? The
idea that there's this, this,

180
00:10:00.430 --> 00:10:04.460
this architecture, this application rails
that has kind of brought

181
00:10:04.460 --> 00:10:08.900
its tendrils into Ruby, it
popularizes that architecture and that

182
00:10:08.900 --> 00:10:13.580
style of monkey patching that
may be fun and interesting,

183
00:10:13.580 --> 00:10:15.920
and baby, very powerful and
representative of what a dynamic

184
00:10:15.920 --> 00:10:18.200
language can do, but it
also kind of breaks some

185
00:10:18.200 --> 00:10:20.810
heart quite hard and fast,
but certainly some rules that

186
00:10:20.810 --> 00:10:24.230
we respected, if not commandments,
certainly reasonable guidelines that we've

187
00:10:24.230 --> 00:10:27.830
developed over the last several
decades. Yeah. And I think

188
00:10:27.830 --> 00:10:32.240
that's what, you know, rails
is now, you know, been

189
00:10:32.240 --> 00:10:36.410
popularized since 2007. So we're
to 2017, we're 10 years

190
00:10:36.410 --> 00:10:39.170
in. We can now easily
say we've been able to

191
00:10:39.170 --> 00:10:43.250
say for five years that
we have legacy rails apps

192
00:10:43.250 --> 00:10:46.490
in existence. So this challenge
with legacy rails apps, I

193
00:10:46.490 --> 00:10:49.310
think has to do with
some of the things that

194
00:10:49.320 --> 00:10:53.210
the framework in invites. And
I think that's true of

195
00:10:53.210 --> 00:10:56.180
every, every framework that, that
works on this scale is,

196
00:10:56.180 --> 00:11:00.170
is going to invite some,
some short cutting of the

197
00:11:00.170 --> 00:11:05.300
rules. Let's say, you know,
breaking of the laws completely

198
00:11:05.840 --> 00:11:11.990
and abjectly ignoring sound fundamentals
of, of software. Yeah. So

199
00:11:12.230 --> 00:11:16.250
we do that because this
was about the excitement of

200
00:11:16.250 --> 00:11:21.020
small startups and, and being
an entrepreneur and getting something

201
00:11:21.020 --> 00:11:23.090
into user's hands and doing
that as fast as you

202
00:11:23.090 --> 00:11:25.760
can. And, you know, the
fast feedback stuff that was

203
00:11:25.760 --> 00:11:28.280
coming out of agile, that
message was, was mixing with,

204
00:11:28.510 --> 00:11:31.790
with the rails and the
entrepreneurship and the startup scene

205
00:11:31.790 --> 00:11:34.070
at the time. So it
was all about, you know,

206
00:11:34.100 --> 00:11:37.340
get it into user's hands,
not give some consideration to

207
00:11:37.340 --> 00:11:39.590
where you're going to be.
In two months, it was

208
00:11:39.590 --> 00:11:41.990
really short cuts, but it
was really great to take

209
00:11:41.990 --> 00:11:44.450
these shortcuts if you know
that there are shortcuts and

210
00:11:44.450 --> 00:11:46.760
you know how to unwind
them later. And you know,

211
00:11:46.760 --> 00:11:49.850
when you've gone too far
with this, and, you know,

212
00:11:49.850 --> 00:11:51.980
if we use that term
from, from the startup world,

213
00:11:51.980 --> 00:11:54.790
that the pivot, if you
could apply that to a

214
00:11:54.790 --> 00:11:57.610
technology and say, at this
point in time, we need

215
00:11:57.610 --> 00:11:59.980
to pivot away from the
things we did at the

216
00:11:59.980 --> 00:12:03.070
very, very early stages into
something that can be more

217
00:12:03.070 --> 00:12:09.610
lasting rather than continue down
believing that this prototyping, methodology,

218
00:12:09.610 --> 00:12:13.420
architecture framework, and language and
software and all these things

219
00:12:13.660 --> 00:12:19.870
that around prototyping, rather than
continuing to, to, to pretend

220
00:12:19.870 --> 00:12:20.920
that we can, I'm going
to say it, but that's

221
00:12:20.920 --> 00:12:22.990
a little bit politically charged,
but I feel that this

222
00:12:22.990 --> 00:12:24.970
way it's like we were,
we ended up pretending that

223
00:12:24.970 --> 00:12:29.350
we can use these beginning
phase tools for the later

224
00:12:29.350 --> 00:12:31.480
phases of the business. And
I, and that's when people

225
00:12:31.480 --> 00:12:33.760
get into trouble and, and
in the rails world, people

226
00:12:33.760 --> 00:12:36.670
have gone looking for answers
and, you know, many times

227
00:12:36.670 --> 00:12:40.120
those answers are another language
and another framework, no JS

228
00:12:40.480 --> 00:12:42.580
for to a great extent,
got a lot of early

229
00:12:42.580 --> 00:12:47.080
adopters from rails folks who
were just exhausted from working

230
00:12:47.080 --> 00:12:49.780
with their rails code basis.
And you get a two

231
00:12:49.780 --> 00:12:51.820
year old rails code base,
and that can be a

232
00:12:51.820 --> 00:12:55.330
really dreary thing or a
Django code base, or an

233
00:12:55.330 --> 00:12:58.750
ASP MVC code base over
an ORM. It's, it's really

234
00:12:58.750 --> 00:13:02.890
about, you know, there's things
in all of those frameworks

235
00:13:02.890 --> 00:13:06.070
that represent an architectural style
that can lead you to

236
00:13:06.070 --> 00:13:11.120
some, some hellish ends. So
are you, are you that

237
00:13:11.120 --> 00:13:13.260
you a fan or not?
Because it sounds like there

238
00:13:13.260 --> 00:13:17.940
may be maybe falling out
of, I am a fan.

239
00:13:18.750 --> 00:13:22.080
I think as, as in,
in, in principle, in general

240
00:13:22.080 --> 00:13:23.970
in life, I'm a fan
of things that are good

241
00:13:23.970 --> 00:13:27.300
for what they're good for
and, and not taking them

242
00:13:27.330 --> 00:13:30.330
outside of that boundary. I
think rails is, is good

243
00:13:30.330 --> 00:13:36.660
for, from early, from an
early stage for an early

244
00:13:36.660 --> 00:13:39.120
stage development work. And I
think that we need to

245
00:13:39.120 --> 00:13:41.010
pivot away from it. So
if, if you're asking if

246
00:13:41.010 --> 00:13:43.440
I would still use it,
sure. It's a, it's a

247
00:13:43.440 --> 00:13:51.990
really well battle-tested web server
application server, but there's things

248
00:13:51.990 --> 00:13:54.870
in there that I simply
wouldn't use. I wouldn't use

249
00:13:54.870 --> 00:14:00.150
the, the, I wouldn't build
my entire application around the

250
00:14:00.150 --> 00:14:03.840
ORM because it leads to,
it leads to an architecture

251
00:14:03.840 --> 00:14:08.040
that that is very hard
to move on from microservices

252
00:14:08.040 --> 00:14:11.310
being the topic of the
day. Now I'm going from

253
00:14:11.340 --> 00:14:16.560
a, you know, quote monolith
to a service architecture is

254
00:14:16.560 --> 00:14:19.890
really not a trivial, you
know, monolith is not a

255
00:14:19.890 --> 00:14:23.220
stage, a step along the
way towards service architecture. It's

256
00:14:23.220 --> 00:14:26.760
kind of like a, they're
almost diametrically opposed in what

257
00:14:26.760 --> 00:14:28.590
they're doing. So getting from
one to the other is,

258
00:14:28.590 --> 00:14:32.940
is really, can be really
quite painful. So that brings

259
00:14:32.940 --> 00:14:35.850
us to where the, you
call it the race to

260
00:14:35.850 --> 00:14:38.190
microservices, where things are going,
we've gone from kind of

261
00:14:38.190 --> 00:14:43.590
this, this big monolith, this,
this monolithic architecture. And now

262
00:14:43.620 --> 00:14:46.890
we're starting to move out
to a more, a smaller

263
00:14:46.890 --> 00:14:50.160
microservices architecture, which is itself
its own buzzword. And I

264
00:14:50.160 --> 00:14:53.780
know that you don't like
it. People conflate microservices with

265
00:14:53.780 --> 00:14:57.970
containers. And another, another terms,
it seems to be the,

266
00:14:57.970 --> 00:14:59.960
the, the new hot word
that everyone likes to just

267
00:15:00.020 --> 00:15:02.900
say, because it feels good
in their mouth. Maybe it's

268
00:15:02.900 --> 00:15:05.140
not the right thing to
be saying, Well, I think

269
00:15:05.140 --> 00:15:07.630
it is, you know, it's
interesting. I, I, my, my

270
00:15:07.630 --> 00:15:12.310
running joke is that I
think of microservices as service

271
00:15:12.700 --> 00:15:17.950
oriented architecture with the warning
labels removed. So if you

272
00:15:17.950 --> 00:15:22.210
can imagine a 1970s cigarette
package without the, without the

273
00:15:22.630 --> 00:15:25.540
shocking and glaring big black
label that says, this will

274
00:15:25.540 --> 00:15:28.480
kill you and everybody, you
know, you know, it's, that's,

275
00:15:28.480 --> 00:15:31.420
microservices are a way to
sell SOA, I think, or

276
00:15:31.420 --> 00:15:33.370
have been a way to
sell. So without telling people,

277
00:15:33.370 --> 00:15:35.770
and there's some really challenging
things when you're going to

278
00:15:35.770 --> 00:15:37.480
have to learn and two
that you're going to have

279
00:15:37.480 --> 00:15:41.380
to modify in your existing
implementation, and that's going to

280
00:15:41.380 --> 00:15:45.370
be, it's going to be,
it's going to be troublesome

281
00:15:45.400 --> 00:15:47.740
in some cases, a travail.
And in some cases it

282
00:15:47.740 --> 00:15:52.480
might take years to do
so. Microservices has two definitions

283
00:15:52.480 --> 00:15:55.960
as well. There's one that
comes up from web developers

284
00:15:55.960 --> 00:15:59.350
who are, I think, largely
guessing at what microservices are

285
00:15:59.350 --> 00:16:01.840
from what they already know.
And then they end up

286
00:16:01.870 --> 00:16:09.940
trying to basically recreating two
thousands web services Or 1997.

287
00:16:10.990 --> 00:16:16.450
Fair enough, fair enough. 1594
is RMI Or so. So

288
00:16:16.450 --> 00:16:18.280
if I, you know, we're
gonna really drop the references.

289
00:16:18.280 --> 00:16:21.100
I think a lot of
what happens is people end

290
00:16:21.100 --> 00:16:26.380
up recreating distributed objects, DICOM
style, CORBA style, distributed objects

291
00:16:26.380 --> 00:16:28.530
that require a lot of
chatting over the network and

292
00:16:28.530 --> 00:16:31.390
introduce a lot of points
of failure, have no real

293
00:16:31.390 --> 00:16:34.930
recognition of how to contend
with such failures. And it's

294
00:16:34.930 --> 00:16:40.210
sort of just dispensing with
what was already painfully learned

295
00:16:40.210 --> 00:16:45.070
and documented by folks who
were smart about SOA and

296
00:16:45.070 --> 00:16:48.160
understood SOA in its time.
I think, you know, with

297
00:16:48.160 --> 00:16:50.710
the intention of microservices earlier
was to say, let's, you

298
00:16:50.710 --> 00:16:53.830
know, let's rename this because
SOA has become about a

299
00:16:53.840 --> 00:16:58.360
big vendor tools and monolithic
messaging. I E you know,

300
00:16:59.800 --> 00:17:01.900
McClimans, Vassar's talks about this
in a, in a, in

301
00:17:01.900 --> 00:17:05.320
a talk on YouTube from
the GoTo conference about, you

302
00:17:05.320 --> 00:17:08.260
know, the message bus, the,
the, the great big message

303
00:17:08.290 --> 00:17:10.660
bus, the enterprise bus that
was going to be the

304
00:17:10.660 --> 00:17:12.670
utility thing that we all
plug into. And it was

305
00:17:12.670 --> 00:17:14.410
going to make the world
happy and rosy, cause we

306
00:17:14.410 --> 00:17:16.330
could just plug in and
you know, that didn't quite

307
00:17:16.330 --> 00:17:18.850
work out. So we're, we're
breaking away from the monolithic

308
00:17:18.850 --> 00:17:22.390
message bus, but it's really
the monolithic, anything, the monolithic

309
00:17:22.390 --> 00:17:25.210
database, the monolithic bus, when
you have the word in

310
00:17:25.210 --> 00:17:28.990
there, you know, that's, that's
when the yellow flag should

311
00:17:28.990 --> 00:17:33.070
start to climb up the,
the flag pole and, and

312
00:17:33.070 --> 00:17:37.210
grab our attention. So microservices
in and of itself, this

313
00:17:37.210 --> 00:17:39.190
is not bad, but I
mean, there are so many,

314
00:17:39.340 --> 00:17:43.000
there are so many contradictory
definitions of microservices in play

315
00:17:43.000 --> 00:17:45.460
right now, which was the
problem that introducing the term

316
00:17:45.460 --> 00:17:49.410
microservices intended to solve. So
yeah, I like microservices. I

317
00:17:49.410 --> 00:17:51.450
love it. I love working
this way. I've learned a

318
00:17:51.450 --> 00:17:53.610
lot over the years from
some, from some people who've

319
00:17:53.610 --> 00:17:56.520
been very helpful and very
influential. And at the same

320
00:17:56.520 --> 00:17:59.430
time we struggle to get
work done. Cause we're, you

321
00:17:59.430 --> 00:18:02.160
know, we're always bashing our
heads against this wall of

322
00:18:02.160 --> 00:18:07.320
this existing presumption of microservices
as merely putting an HTTP

323
00:18:07.320 --> 00:18:11.640
endpoint onto a server into
a Docker container and, you

324
00:18:11.640 --> 00:18:14.490
know, shoving that online and
hoping, hoping that that's a

325
00:18:14.490 --> 00:18:19.170
microservice and that's really the
problem. And it's really for

326
00:18:19.170 --> 00:18:24.450
services, it's all about autonomy.
And one side of the

327
00:18:24.450 --> 00:18:27.510
microservices world understands the aspect
of autonomy and what it

328
00:18:27.510 --> 00:18:29.400
means to your design and
how to, how to implement

329
00:18:29.400 --> 00:18:31.830
it. And the, and the
other side doesn't. So that

330
00:18:31.830 --> 00:18:35.370
leaves people really grasping, grasping
for answers. And I, you

331
00:18:35.370 --> 00:18:40.410
know, you're moving up from
a rails monolith to trying

332
00:18:40.410 --> 00:18:43.860
to do autonomous services. And
if you make the leap

333
00:18:43.860 --> 00:18:46.860
in just the slightly wrong
direction, you'll end up with

334
00:18:46.860 --> 00:18:50.250
something called a distributed monolith,
which is, you know, all

335
00:18:50.250 --> 00:18:53.280
the pain of the monolith,
plus all the pain of

336
00:18:53.280 --> 00:18:57.210
distributed systems of all together,
all of the same place.

337
00:18:57.210 --> 00:19:00.120
And sometimes people even just
say to hell with microservices,

338
00:19:00.120 --> 00:19:01.590
I'm falling back. I want
to go back to my,

339
00:19:01.950 --> 00:19:03.180
I want to go back
to my model if I

340
00:19:03.180 --> 00:19:05.400
could. And that, and that
actually is a really sensible

341
00:19:05.400 --> 00:19:08.850
thing to do. If you
don't understand autonomous services and

342
00:19:08.850 --> 00:19:11.940
service autonomy, the challenges the
two years that teams and

343
00:19:11.940 --> 00:19:15.570
companies spend making that mistake
before they realized that they

344
00:19:15.570 --> 00:19:17.490
wished they hadn't ever gone
down this road to begin

345
00:19:17.490 --> 00:19:21.410
with. So how can we
kind of codify or bring

346
00:19:21.410 --> 00:19:24.380
all of this together into
something for the audience that

347
00:19:24.380 --> 00:19:26.450
may be listening that may
be younger, who might be

348
00:19:26.450 --> 00:19:29.660
thinking that, you know, suddenly
they're listening to the two

349
00:19:29.660 --> 00:19:34.250
old guys about, you know,
about the last 20 years

350
00:19:34.250 --> 00:19:36.170
of software and how do
we give them a sense

351
00:19:36.170 --> 00:19:39.980
of positivity around microservices? You
say that autonomy is important.

352
00:19:40.010 --> 00:19:42.050
What are some prescriptive things
that we can tell them

353
00:19:42.050 --> 00:19:43.940
to make sure that they
are doing it right? And

354
00:19:43.940 --> 00:19:47.390
that they don't catch themselves
into know paint themselves into

355
00:19:47.390 --> 00:19:49.250
a corner? Well, the first
thing I said, I would,

356
00:19:49.430 --> 00:19:51.350
you know, take a step
back and start with is

357
00:19:51.380 --> 00:19:55.700
you don't have to, you
don't have to leave Ruby

358
00:19:56.270 --> 00:20:00.050
to do this. We're, you
know, we're, we've been, we've

359
00:20:00.050 --> 00:20:03.800
been building autonomous services. We,
you know, a loose, a

360
00:20:03.800 --> 00:20:07.520
loose cadre of, of, of
people that are in this,

361
00:20:07.520 --> 00:20:09.680
this world, in this space
have been doing this in

362
00:20:09.680 --> 00:20:11.930
Ruby and every other language
for, for a long time.

363
00:20:13.490 --> 00:20:16.250
That's not to say you
shouldn't explore new programming languages

364
00:20:16.250 --> 00:20:18.650
and expand your mind and
your capabilities that's, that should

365
00:20:18.650 --> 00:20:23.810
be a different, a different
topic. When we get to

366
00:20:23.810 --> 00:20:27.650
autonomy. I think we can
sort of look at a

367
00:20:27.680 --> 00:20:31.760
Cardinal rule of, of service
architecture that really puts the

368
00:20:31.760 --> 00:20:34.160
pause, makes, you know, press
this pause for a lot

369
00:20:34.160 --> 00:20:35.840
of people and really makes
them think, and it can

370
00:20:35.840 --> 00:20:40.160
be a shocking moment if
we just say that, you

371
00:20:40.160 --> 00:20:43.310
know, a, one of the
golden rules of service architecture

372
00:20:43.430 --> 00:20:48.670
is that you cannot query
data from a service that

373
00:20:48.670 --> 00:20:52.930
just, you know, leads to
the sound of things, just

374
00:20:52.930 --> 00:20:55.660
falling on the floor. As
people just drop everything and

375
00:20:55.750 --> 00:20:58.450
stand a gape at what,
you know, how could you

376
00:20:58.450 --> 00:21:01.330
possibly do anything because then
I'm like, what am I

377
00:21:01.330 --> 00:21:04.900
allowed to do? Right, exactly.
And, but, and that is

378
00:21:04.990 --> 00:21:09.760
that's, that's the nature of
service architecture. And if you

379
00:21:09.760 --> 00:21:14.230
allow queries into your services,
you've basically violated the most

380
00:21:14.230 --> 00:21:16.810
fundamental tenants of building a
service, which is you tell

381
00:21:16.810 --> 00:21:20.830
a service what to do,
and you allow it to

382
00:21:20.830 --> 00:21:25.180
make its decisions and calculations,
and then using some mechanism

383
00:21:25.180 --> 00:21:29.590
like pubsub, you can, you
can ultimately get your answer

384
00:21:29.590 --> 00:21:32.440
back, but it's not really
a, let me go get

385
00:21:32.440 --> 00:21:35.020
the data from that service
and bring it over here

386
00:21:35.410 --> 00:21:37.900
to my service. And then
I'll, I'll make a decision

387
00:21:37.900 --> 00:21:39.760
based on what I find
and then take some action

388
00:21:39.760 --> 00:21:43.330
based on it. That thing,
that, that architecture is fraught

389
00:21:43.330 --> 00:21:48.190
with problems. And basically it's
just a monolith over HTTP.

390
00:21:49.150 --> 00:21:51.580
Cause it's the same old
monolith. It's really the queries.

391
00:21:51.580 --> 00:21:54.550
When you find queries going
across services, that's where you

392
00:21:54.550 --> 00:21:56.590
see your you're in the
weeds. It's when you should,

393
00:21:57.100 --> 00:21:59.350
you might not have an
answer for it yet, but

394
00:21:59.350 --> 00:22:01.180
that's where you should know
you should stop and say,

395
00:22:01.180 --> 00:22:04.450
we've got the service boundaries
wrong. That word boundary keeps

396
00:22:04.450 --> 00:22:06.670
coming up all the time.
What is about, and it's

397
00:22:06.670 --> 00:22:09.310
definitely not a relational database
table. So we get the

398
00:22:09.310 --> 00:22:13.360
other word extract a service,
or I want to break

399
00:22:13.360 --> 00:22:16.060
out this from, from the
monolith. Those are the, those

400
00:22:16.060 --> 00:22:18.310
are, those are more yellow
flags that go up because

401
00:22:18.310 --> 00:22:19.960
usually what that means is
somebody is going to try

402
00:22:19.960 --> 00:22:23.620
to take like their product
table and make a service

403
00:22:23.620 --> 00:22:25.810
out of it or their
users table and make. And

404
00:22:25.810 --> 00:22:29.200
that's also monolithic because the
product table itself is probably

405
00:22:29.200 --> 00:22:31.810
monolithic and, you know, UDI
Dahan has a really great

406
00:22:31.810 --> 00:22:35.110
example of this going back
and sort of cribbing from

407
00:22:35.110 --> 00:22:37.330
him from, from some of
his materials. But he has

408
00:22:37.330 --> 00:22:40.360
an example of a product
table that has a name

409
00:22:40.360 --> 00:22:42.370
and a price and a
quantity in stock and an

410
00:22:42.400 --> 00:22:44.080
image URL. All the things
that you would think would

411
00:22:44.080 --> 00:22:47.350
be really normal to put
in a product table, except

412
00:22:47.350 --> 00:22:53.020
that price would only be
used in, in, you know,

413
00:22:53.200 --> 00:22:57.580
pricing, pricing code, or a
pricing scenarios like price, book,

414
00:22:57.580 --> 00:23:00.580
price optimization, quantity in stock
is only ever used for

415
00:23:00.580 --> 00:23:03.910
inventory. The name is used
for the catalog. It's like

416
00:23:03.910 --> 00:23:06.010
those, those start to look,
they'll start to look like

417
00:23:06.040 --> 00:23:08.380
not the same table or
shouldn't be in the same

418
00:23:08.380 --> 00:23:12.550
table and they should be
distributed, naive, distributed data or

419
00:23:12.760 --> 00:23:16.420
distributed systems. And now we
see like the stark difference

420
00:23:16.420 --> 00:23:19.680
between what a monolith is
and what a, what a,

421
00:23:19.750 --> 00:23:22.690
what a service oriented architecture
is. And, and it really

422
00:23:22.690 --> 00:23:28.750
comes around the centralization of
the data. That's not the

423
00:23:28.750 --> 00:23:30.430
only thing, but this is
a good way to, to

424
00:23:30.430 --> 00:23:33.160
see whether you're you're in,
you got your one foot

425
00:23:33.690 --> 00:23:35.890
in the web definition of
it, or one foot in

426
00:23:35.890 --> 00:23:38.170
the SOA definition of it
is if you've got that

427
00:23:38.170 --> 00:23:41.680
data centralized, which most applications
do, because that's what ORM

428
00:23:41.680 --> 00:23:47.460
makes easy. Then you're, you're,
you're, you're very likely often

429
00:23:47.460 --> 00:23:50.050
into the weeds. That's interesting.
Cause it makes me think

430
00:23:50.050 --> 00:23:52.720
about Facebook because I don't
know how the Facebook architecture

431
00:23:52.720 --> 00:23:54.700
works. I only know what
people have said, but I

432
00:23:54.700 --> 00:23:57.160
have heard that they keep
the large amount of the,

433
00:23:57.280 --> 00:24:00.520
of the social graph in
memory at all times across

434
00:24:00.520 --> 00:24:06.820
the entire system. It's one,
one giant 65 terabytes database

435
00:24:06.850 --> 00:24:09.040
in memory. And that's, you
know, that's the best way

436
00:24:09.040 --> 00:24:11.980
to do it. That's so
that's, that's the other side

437
00:24:11.980 --> 00:24:14.230
of, of SOA, which is
data is if you look

438
00:24:14.230 --> 00:24:16.750
at think of SOA and
services as the transactional side,

439
00:24:16.750 --> 00:24:19.720
the doing side of things
and the data side is

440
00:24:19.720 --> 00:24:22.030
just, let's just like draw
a line in the sand.

441
00:24:22.030 --> 00:24:25.240
It's a data is another
consideration where w you treat

442
00:24:25.240 --> 00:24:27.880
it like a data warehouse.
I mean, obviously we don't

443
00:24:27.880 --> 00:24:30.820
necessarily necessarily have to have
data warehousing technology, but if

444
00:24:30.820 --> 00:24:33.760
it's a relational database or
redness in memory, as long

445
00:24:33.760 --> 00:24:36.040
as that thing is kept
up to date by what

446
00:24:36.040 --> 00:24:38.530
is, and I'm sort of
trivializing it by saying it

447
00:24:38.530 --> 00:24:39.820
this way, but as long
as it's kept up to

448
00:24:39.820 --> 00:24:43.210
date by the transactions that
are flowing around the system,

449
00:24:43.240 --> 00:24:45.880
I E the there's a
pub sub mechanism, let's say,

450
00:24:45.880 --> 00:24:49.690
and there's some events happening,
you know, product was removed

451
00:24:49.690 --> 00:24:52.900
from stock. Therefore that event
can also be read by

452
00:24:52.900 --> 00:24:56.590
the thing that keeps the
Reddus database up to date.

453
00:24:56.680 --> 00:25:00.040
And we look at that
data as view data. It's

454
00:25:00.040 --> 00:25:04.780
almost just data for, for
display purposes or for querying

455
00:25:04.780 --> 00:25:07.810
purposes. And he ended up
separating the query side of

456
00:25:07.810 --> 00:25:12.700
the system from the transactional
side of the system, and

457
00:25:14.080 --> 00:25:16.930
that introduces some other, some
other complaint. You basically were

458
00:25:16.930 --> 00:25:20.350
trading off complexities, but it
also makes the transactional side

459
00:25:20.350 --> 00:25:23.980
really rather simple. Cause when
you receive a K HTTP

460
00:25:23.980 --> 00:25:27.550
command into a, into a
controller and an MVC framework,

461
00:25:27.850 --> 00:25:28.960
you know, a lot of
the time when we're trying

462
00:25:28.960 --> 00:25:30.790
to figure out to do
is what do we do

463
00:25:30.790 --> 00:25:35.110
to update the database tables
based on the HTB form

464
00:25:35.110 --> 00:25:39.100
data and in a microservice
world, you would simply take

465
00:25:39.100 --> 00:25:42.700
that command, figure out what
its affects would be in

466
00:25:42.700 --> 00:25:47.290
terms of events and just
publish or save the events

467
00:25:47.740 --> 00:25:51.820
and then allow some sort
of database aggregator shaper to

468
00:25:51.820 --> 00:25:53.650
read those events and figure
out what it needs to

469
00:25:53.650 --> 00:25:56.620
do with its data. And
again, this comes back to

470
00:25:56.620 --> 00:26:00.910
authority and autonomy that the
notion of some know some

471
00:26:00.910 --> 00:26:05.590
node, some service, some compute
node will know what to

472
00:26:05.590 --> 00:26:11.470
do with an event, but
it's only, you know, it's

473
00:26:11.470 --> 00:26:13.480
the only thing that should
be required to know what

474
00:26:13.480 --> 00:26:16.180
to do. You shouldn't have
to spread this knowledge everywhere,

475
00:26:16.180 --> 00:26:19.300
spread the knowledge of the
database, schema everywhere. And once

476
00:26:19.300 --> 00:26:21.700
the database schema changes, all
this other stuff has to

477
00:26:21.700 --> 00:26:24.400
break or has to change.
And you get these teams

478
00:26:24.400 --> 00:26:27.340
that are trying to be,
you know, microservice teams, but

479
00:26:27.340 --> 00:26:29.530
you find out that really
they have to make all

480
00:26:29.530 --> 00:26:31.600
of their changes to all
of their code bases all

481
00:26:31.600 --> 00:26:35.260
at one time, because they're
still coupled to the same

482
00:26:35.260 --> 00:26:39.520
monolithic data structures, database structures
underneath. And that really sort

483
00:26:39.520 --> 00:26:41.770
of like you see in,
in practice, we, you know,

484
00:26:42.040 --> 00:26:44.880
we had teams that want
to do microservices and the

485
00:26:44.880 --> 00:26:47.940
end up with something, but
they're not getting the benefits

486
00:26:47.940 --> 00:26:51.150
cause they still have the
same workflows. Like you can't

487
00:26:51.180 --> 00:26:54.150
update, you can't deploy service
a until I update service

488
00:26:54.150 --> 00:26:57.150
B because we're both using
the same database and you

489
00:26:57.150 --> 00:27:00.270
know, that's an obvious contradiction
of microservices. You know, the

490
00:27:00.270 --> 00:27:02.700
other one you were asking
for, you're asking for concrete

491
00:27:02.700 --> 00:27:05.610
signs, if you can, if
you were a team and

492
00:27:05.610 --> 00:27:07.140
you own a service, I
have a surface or many

493
00:27:07.140 --> 00:27:11.700
services and you can simply
turn your service off and

494
00:27:11.700 --> 00:27:17.070
it doesn't make the other
services fail venue. Or now

495
00:27:17.070 --> 00:27:19.920
you're talking about a service
architecture, but when we put

496
00:27:19.920 --> 00:27:24.630
these, these queries into place
like service a is going

497
00:27:24.630 --> 00:27:27.120
to, you know, some service
is going to query the

498
00:27:27.120 --> 00:27:30.150
product service for its quantity
and stock. Well, if the

499
00:27:30.150 --> 00:27:34.380
product services offline, you know,
that requests for the quantity

500
00:27:34.380 --> 00:27:37.110
and stock is going to
get a timeout, which is

501
00:27:37.110 --> 00:27:40.470
going to cost the, the,
you know, the consuming service

502
00:27:40.470 --> 00:27:42.810
to time out as well,
very likely. And then we'll

503
00:27:42.810 --> 00:27:45.540
see cascades of failure throughout
the entire system. So if

504
00:27:45.540 --> 00:27:48.510
you can turn off one
service and many other services

505
00:27:48.510 --> 00:27:53.700
fail and cascade, that's very
likely a missed target in

506
00:27:53.700 --> 00:27:55.710
terms of your target was
to get to microservices or

507
00:27:55.710 --> 00:27:59.430
service architecture and, and you
really just didn't make it.

508
00:28:01.370 --> 00:28:05.030
Yeah, it's interesting. It gets
me thinking about what it

509
00:28:05.030 --> 00:28:07.490
gets. Almost like you get
analysis paralysis, you brought up

510
00:28:07.490 --> 00:28:12.020
so many great points. One
could potentially become overwhelmed by

511
00:28:12.020 --> 00:28:15.440
all of this information, You
know, it can. So once

512
00:28:15.440 --> 00:28:17.330
you get hit with those,
you know, these are, these

513
00:28:17.330 --> 00:28:19.760
are really like psychic shock
points. You know, these are

514
00:28:19.760 --> 00:28:24.440
like putting, putting the electrical
cables onto your ear lobes

515
00:28:24.440 --> 00:28:26.300
and, and connecting them to
like, it'll be a good

516
00:28:26.300 --> 00:28:28.610
shock at first, but you
get over it really quickly.

517
00:28:28.610 --> 00:28:30.890
It, it, it starts to
get really exciting cause you,

518
00:28:30.890 --> 00:28:37.970
you see real, real benefits,
real advantages to, to gaining

519
00:28:37.970 --> 00:28:41.240
autonomy, definitely. In terms of
everything that people have been

520
00:28:41.240 --> 00:28:44.000
saying about microservices, working with
teams that are more focused,

521
00:28:44.000 --> 00:28:47.510
that don't have to deal
with changes of all of,

522
00:28:47.540 --> 00:28:51.290
of other areas of the
system, the ability to deploy

523
00:28:51.290 --> 00:28:53.840
your services. Because if you
can turn your service off

524
00:28:54.260 --> 00:28:57.050
for some brief period of
time, without worrying about the

525
00:28:57.050 --> 00:28:59.750
rest of the rest of
the services coming, crashing down,

526
00:28:59.750 --> 00:29:03.050
then you can do continuous
deployment fairly readily as well

527
00:29:03.320 --> 00:29:06.650
without doing the game of
juggling, you know, web servers

528
00:29:06.680 --> 00:29:08.570
in and out of low
balancers. And that kind of

529
00:29:08.570 --> 00:29:11.180
thing, not that that's invalid,
but you know, it's, it

530
00:29:11.180 --> 00:29:12.740
would be easier to do
that kind of stuff if

531
00:29:12.740 --> 00:29:14.810
we didn't have to worry
about, about doing the load

532
00:29:14.810 --> 00:29:19.160
balancer of dance. So as
we, as we kind of

533
00:29:19.190 --> 00:29:21.860
wrap up and get towards
the end of our podcast

534
00:29:21.860 --> 00:29:24.380
here, maybe you could say
something about all of this

535
00:29:24.380 --> 00:29:28.280
as it relates to event
sourcing Of I'm sourcing is

536
00:29:29.570 --> 00:29:35.720
a natural outflow of having
pubsub. So if you, if

537
00:29:35.720 --> 00:29:39.560
a service can only receive
an instruction and then based

538
00:29:39.560 --> 00:29:43.750
on that instruction, it will
broadcast the results of that

539
00:29:43.750 --> 00:29:47.620
instruction. So our favorite example
is a bank account. Say,

540
00:29:47.620 --> 00:29:51.580
you, you send an instruction
to an account service component

541
00:29:52.150 --> 00:29:57.220
and tell it to withdraw
$10. And when it's done

542
00:29:57.220 --> 00:30:02.140
with that withdrawal, it broadcasts,
you know, withdrew $10 for

543
00:30:02.140 --> 00:30:07.150
account one, two, three, that
that event can be then

544
00:30:07.360 --> 00:30:11.350
picked up subscribed, processed, listened
to whatever the terminology you

545
00:30:11.350 --> 00:30:14.230
want by anything else that
needs to be aware of

546
00:30:14.230 --> 00:30:21.280
account balances changing. If you
have that style of architecture

547
00:30:21.280 --> 00:30:23.560
already, which if you don't,
it's going to be very,

548
00:30:23.560 --> 00:30:28.000
very, very difficult to achieve
a services architecture because you're

549
00:30:28.000 --> 00:30:30.940
going to end up tightly
coupling things with queries. So

550
00:30:30.940 --> 00:30:33.550
if you have that architecture
and you have events, we

551
00:30:33.550 --> 00:30:37.060
can just use those events
as the application data storage.

552
00:30:37.480 --> 00:30:40.440
So instead of updating a
relational database row in the,

553
00:30:40.440 --> 00:30:43.240
in the, in the example
of a, of a, a

554
00:30:43.240 --> 00:30:48.160
bank account or an inventory
slot or whatever you have,

555
00:30:48.610 --> 00:30:51.160
knowing that, you know, a
deposit happened, then it withdrawal

556
00:30:51.160 --> 00:30:53.170
happened. The deposit happened. Then
the withdrawal happened because these

557
00:30:53.170 --> 00:30:55.780
events are being written all
the time. Anyway, we can

558
00:30:55.780 --> 00:30:58.690
just use those events to
calculate out what the balance

559
00:30:58.690 --> 00:31:02.020
of the bank account is,
or the fact that the

560
00:31:02.020 --> 00:31:05.260
account was opened because there
was an account opened account

561
00:31:05.260 --> 00:31:07.750
or the account was closed
because it was an account

562
00:31:07.990 --> 00:31:10.210
closed account or that there
was a funds transfer because

563
00:31:10.210 --> 00:31:15.760
there was a funds transfer
event. All of these events

564
00:31:15.760 --> 00:31:18.250
that already exist that have
to exist because of pubs

565
00:31:18.250 --> 00:31:21.310
up can simply be stored
into another kind of storage,

566
00:31:21.310 --> 00:31:23.680
which is a stream. So
rather than just emitting them

567
00:31:23.680 --> 00:31:27.580
to messaging infrastructure, they actually
get stored to stream data

568
00:31:27.580 --> 00:31:32.140
storage, which is sort of
a, another database schema or

569
00:31:32.140 --> 00:31:36.610
another database technology, even in
some cases that are really

570
00:31:36.610 --> 00:31:39.430
just meant for storing events.
So you have an account

571
00:31:39.430 --> 00:31:42.730
one, two, three object. Usually
it would be a row

572
00:31:42.730 --> 00:31:44.560
in a database. Now you
have an account one, two,

573
00:31:44.560 --> 00:31:46.750
three stream. And every event
that has happened to that

574
00:31:46.750 --> 00:31:49.390
account gets written to that
stream. And you can always

575
00:31:49.390 --> 00:31:52.750
know the current state of
that account just by gathering

576
00:31:52.750 --> 00:31:56.710
up the events and applying
them in sequence. And like

577
00:31:56.740 --> 00:32:00.130
what you said about Facebook,
you know, we just have,

578
00:32:00.160 --> 00:32:02.080
we end up in this
sort of architecture with objects

579
00:32:02.080 --> 00:32:07.920
and memory rather than objects
on disc. Alright. Where would

580
00:32:07.920 --> 00:32:11.760
you, are there any books
or any particular places to

581
00:32:11.760 --> 00:32:14.550
start other than this very
good podcast? Where can someone

582
00:32:14.550 --> 00:32:16.650
start to kind of pick
this up other than a

583
00:32:16.650 --> 00:32:20.460
hard one? Yeah. I've never
had a good answer for

584
00:32:20.460 --> 00:32:24.120
that question. And the reason
is I didn't, I picked

585
00:32:24.120 --> 00:32:26.490
it up along the way
over, over, you know, numerous

586
00:32:26.490 --> 00:32:29.280
years. So I didn't go
through the FA I didn't

587
00:32:29.280 --> 00:32:31.140
go through the process of
picking it up for a

588
00:32:31.140 --> 00:32:33.330
book. So I wish I
had a better question for

589
00:32:33.330 --> 00:32:36.030
that. And I've actually never
seen, I never seen all

590
00:32:36.030 --> 00:32:38.580
of this put into one
book. I don't know if

591
00:32:38.580 --> 00:32:42.080
it's just hasn't happened yet,
or it's a, it's such

592
00:32:42.280 --> 00:32:45.710
a, you know, it's, it's,
it's, it's such a nuanced

593
00:32:45.740 --> 00:32:49.820
thing that, that it's hard
to write about, but I

594
00:32:49.820 --> 00:32:51.320
don't know if one, I'll
just say, I'll just say

595
00:32:51.320 --> 00:32:54.530
that much. I know of
people, people that I've learned

596
00:32:54.530 --> 00:32:57.860
from ironically, a lot of
them in the Microsoft community,

597
00:32:57.860 --> 00:33:00.470
like UDI to Han and
Greg young and Clemens, fasters

598
00:33:00.770 --> 00:33:04.850
very influential and very clear
minded speakers and writers, all

599
00:33:04.850 --> 00:33:10.940
of their blogs definitely worthwhile
pursuing and, you know, shameless

600
00:33:10.940 --> 00:33:16.010
plug, we're doing some training
in event sourcing and distributed

601
00:33:16.010 --> 00:33:19.820
systems for the Ruby world
in an effort to help

602
00:33:20.480 --> 00:33:25.370
people with these monolithic rails
apps to make that mind

603
00:33:25.370 --> 00:33:34.310
shift from monolithic development, to,
you know, also using service

604
00:33:34.310 --> 00:33:38.450
oriented techniques and, and libraries
without having actually having to,

605
00:33:38.810 --> 00:33:41.330
you know, you know, dump
the programming language. Not that

606
00:33:41.330 --> 00:33:42.920
that, again, not that that's
a problem. It's good to

607
00:33:42.920 --> 00:33:45.440
learn a new programming language.
It's usually a very high

608
00:33:45.440 --> 00:33:47.780
risk to learn a new
programming language and learn a

609
00:33:47.780 --> 00:33:50.570
new architecture all at the
same time while doing the

610
00:33:50.570 --> 00:33:56.170
big rewrite. So When he
variables, she makes sense. Exactly.

611
00:33:56.350 --> 00:33:58.360
Well, you know, right. When
you learn a new programming

612
00:33:58.360 --> 00:34:00.760
language, the first project you
do with it is probably

613
00:34:00.760 --> 00:34:04.660
going to be the worst.
So, so making it like

614
00:34:04.660 --> 00:34:07.780
the most high limos high
risk, you know, thing in

615
00:34:07.780 --> 00:34:10.300
your business, the big rewrite
with all new tech, all

616
00:34:10.300 --> 00:34:12.490
new knowledge, no news, you
know, none of the old

617
00:34:12.490 --> 00:34:15.280
skills were used. Yeah, that's,
that can be pretty risky.

618
00:34:15.280 --> 00:34:16.800
I mean, you can pull
it off people, people aren't,

619
00:34:16.800 --> 00:34:18.670
some people are good enough
to do that, but if

620
00:34:18.670 --> 00:34:20.350
we can reduce some of
those variables, that would be

621
00:34:20.350 --> 00:34:23.440
great and re re leveraging
skills that you already have,

622
00:34:23.440 --> 00:34:26.170
whether it's Ruby or Python
or C sharp or Java,

623
00:34:26.710 --> 00:34:29.200
you can stay within, you
know, keep some of that

624
00:34:29.200 --> 00:34:34.300
wheelhouse consistent when you're moving
to a new architecture, that

625
00:34:34.300 --> 00:34:36.220
can be really helpful. There's
a, there's a, there's a,

626
00:34:36.220 --> 00:34:39.340
there's an ease of familiarity,
a facility and a capability

627
00:34:39.340 --> 00:34:41.200
that, that you can retain.
I know a lot of

628
00:34:41.200 --> 00:34:44.140
people are moving to microservice
or saying, for some reason,

629
00:34:44.140 --> 00:34:45.760
I don't understand why this
is, but, you know, we

630
00:34:45.760 --> 00:34:51.250
should move to go. And
there's no real reason to

631
00:34:51.580 --> 00:34:54.640
do. Like there isn't a
microservice programming language. There isn't

632
00:34:54.640 --> 00:35:00.940
one that offers more microservices
or so oneness to it.

633
00:35:02.650 --> 00:35:05.500
So, and also, like I
said, it's, it's a bit

634
00:35:05.500 --> 00:35:07.900
of a risk. So we're
trying to, we're trying to

635
00:35:07.900 --> 00:35:11.830
keep that going. We're trying
to keep, you know, the

636
00:35:12.430 --> 00:35:15.760
development developers who are focused
on Ruby, who've got skills

637
00:35:15.760 --> 00:35:18.880
and who are facing some
very serious challenges with aging

638
00:35:18.880 --> 00:35:23.200
monoliths to learn how to
deal with them in situ

639
00:35:23.890 --> 00:35:26.240
before they, they, they sort
of go off and, and,

640
00:35:26.240 --> 00:35:29.410
and just, you know, and
change all the variables all

641
00:35:29.410 --> 00:35:34.060
at the same time, which
I'm really hoping is a

642
00:35:34.060 --> 00:35:39.390
future for Ruby, rather than
simply continuing to see Ruby

643
00:35:39.420 --> 00:35:42.690
conflated with rails and see
it as rails script. And

644
00:35:42.690 --> 00:35:48.240
once rails fades away, as
it naturally will do, as

645
00:35:48.240 --> 00:35:51.300
we move into different kinds
of architectures that we, that

646
00:35:51.300 --> 00:35:53.400
we remember that, you know,
the programming language is not

647
00:35:53.400 --> 00:35:55.500
the framework. And if, and
if you know, and no

648
00:35:55.500 --> 00:35:57.660
one can leverage a language,
then continue to do so.

649
00:35:58.440 --> 00:36:02.700
Alright. Which is ironically a
contradiction of all of us

650
00:36:02.760 --> 00:36:09.540
having left C-sharp and jumping
onto Ruby in 2007. Well,

651
00:36:09.540 --> 00:36:11.730
thanks for chatting with me
today, Scott, thanks to you,

652
00:36:11.730 --> 00:36:15.000
Scott. All right. This has
been another episode of Hanselminutes

653
00:36:15.000 --> 00:36:16.560
and we'll see you again
next week.

