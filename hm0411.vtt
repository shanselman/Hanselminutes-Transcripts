WEBVTT FILE

1
00:00:12.060 --> 00:00:17.520
From hanselminutes.com. It's Hansel minutes.
Oh, weekly discussion with web

2
00:00:17.520 --> 00:00:22.010
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing your

3
00:00:22.010 --> 00:00:27.510
show. Number four 11 recorded
live Thursday, February 13, 2014.

4
00:00:28.050 --> 00:00:30.330
This episode of Hansel minutes
is brought to you by

5
00:00:30.330 --> 00:00:40.080
teller offering the best in
developer tools and support online@telerikdotcomandbyfranklins.net

6
00:00:40.290 --> 00:00:43.920
makers of gesture pack a
powerful gesture, recording and recognition

7
00:00:43.920 --> 00:00:51.030
system for Microsoft connect for
windows developers details@gesturepak.com. In this

8
00:00:51.030 --> 00:00:54.870
episode, Scott talks to james'
friend, all there of PCE

9
00:00:54.870 --> 00:00:58.650
dot JS, which is support
of PCE. The portable computer

10
00:00:58.650 --> 00:01:05.000
emulator. This is Scott Hanselman.
This is another episode of

11
00:01:05.000 --> 00:01:08.240
Hansel minutes, and I'm talking
with James friend and he

12
00:01:08.240 --> 00:01:14.990
has a website@jamesfriend.com.edu. And he
has made a port of

13
00:01:14.990 --> 00:01:19.250
the PCA may later, PCE
dot JS is his port.

14
00:01:19.730 --> 00:01:23.240
And I'm actually looking at
a Mac plus emulator in

15
00:01:23.240 --> 00:01:26.120
my browser. You've made not
just the simulator, but a

16
00:01:26.120 --> 00:01:30.860
number of emulators haven't you
changed a yep. Yep. And

17
00:01:30.980 --> 00:01:32.990
you seem very casual about
that. Like, Oh yeah. You

18
00:01:32.990 --> 00:01:36.050
know, he's just over here
emulating the IBM PC in

19
00:01:36.050 --> 00:01:39.530
a browser. No problem. That's
amazing. You don't you think

20
00:01:39.530 --> 00:01:42.380
that's amazing. I think it's
amazing. I think it's amazing

21
00:01:42.380 --> 00:01:44.930
that it can be done
for sure. I think it's

22
00:01:44.930 --> 00:01:48.020
amazing that the web platform
has gotten to the point

23
00:01:48.020 --> 00:01:50.780
where we can make these
things run in the browser

24
00:01:51.620 --> 00:01:56.570
across different, different hardware and
different operating systems. And this

25
00:01:56.570 --> 00:01:58.790
isn't, this isn't faked. I
think we've seen lots of

26
00:01:58.790 --> 00:02:01.070
things where we'll have JavaScript
and HTML and someone will

27
00:02:01.070 --> 00:02:04.550
make a, a windows interface
or a Mac interface and

28
00:02:04.550 --> 00:02:06.380
it'll look and feel like
it. But it's not really,

29
00:02:06.380 --> 00:02:09.260
it is, this is really
emulating the CPU. This is

30
00:02:09.260 --> 00:02:14.480
pretending to be a 68,000
emulator. That's 68,000 processor, the

31
00:02:14.480 --> 00:02:17.810
Mac, the Mac doesn't know
that it got booted up

32
00:02:17.810 --> 00:02:23.090
inside a browser. So basically,
yeah, it's just loading the

33
00:02:23.150 --> 00:02:32.270
original startup code, the original
68 machine code. It's a

34
00:02:32.270 --> 00:02:36.590
60, 68 K process. And
the amount of Ram that

35
00:02:36.590 --> 00:02:41.690
was in original and same
input and output devices. And

36
00:02:41.690 --> 00:02:44.090
it's just running as if
it's a real math class.

37
00:02:45.260 --> 00:02:47.660
And so like you said,
the rom is totally unmodified.

38
00:02:48.920 --> 00:02:54.560
Yeah. Except the emulator itself
does patch around slightly so

39
00:02:54.560 --> 00:02:58.760
that it intercepts when the
computer tries to access the

40
00:02:58.760 --> 00:03:05.320
floppy. So that basically floppy
drives. I think they required

41
00:03:05.320 --> 00:03:07.840
a bit of delicate, you
know, timing that had to

42
00:03:07.840 --> 00:03:10.360
be quite precise and to
do with the way the

43
00:03:10.360 --> 00:03:17.230
disc expands and stuff. So
the emulator itself, actually the

44
00:03:17.230 --> 00:03:18.940
original, I mean, it was
a path that was written

45
00:03:18.940 --> 00:03:22.360
by the original author, not
myself, a really impressive guy

46
00:03:22.360 --> 00:03:26.050
code. I think it's hamper
hug the guy who wrote

47
00:03:26.050 --> 00:03:32.080
the PC emulator. Originally it
basically overrides some of the,

48
00:03:33.070 --> 00:03:36.340
the Mac pluses wrong with
just a little bit of

49
00:03:36.340 --> 00:03:40.060
code to tell emulator, Hey,
we're using the disc now,

50
00:03:40.120 --> 00:03:43.690
like jump out into of
the emulated code, jump out

51
00:03:43.690 --> 00:03:47.680
of the real macro ifs
and into the emulator. So

52
00:03:47.680 --> 00:03:52.170
we can do some disc
input and output. So the

53
00:03:52.170 --> 00:03:55.260
original emulator and there's delusion
millions of millions, but there's

54
00:03:55.260 --> 00:03:57.390
hundreds of emulators out there.
It seems like if you're

55
00:03:57.390 --> 00:03:59.460
into computer science, at some
point, you're going to write

56
00:03:59.460 --> 00:04:03.570
an emulator of some kind
and a hamper hug wrote

57
00:04:03.570 --> 00:04:07.530
a thing called PCE. And
he's got an Atari st

58
00:04:07.530 --> 00:04:09.720
and IBM PC and Mac
plus. So he's not just

59
00:04:09.720 --> 00:04:15.960
emulating 68 thousands, but also
80 86, 81 86. And

60
00:04:15.960 --> 00:04:19.590
of course, since, since the
Atari S T was a

61
00:04:19.590 --> 00:04:23.430
68,000, it's using the same
part of his emulator. Yeah.

62
00:04:23.490 --> 00:04:26.850
I think he added, I
think, yeah, it's 68. I

63
00:04:26.850 --> 00:04:29.850
wanna as well for that.
And this was written in

64
00:04:29.850 --> 00:04:34.260
what idiomatic C or C
plus plus. So in fact,

65
00:04:34.260 --> 00:04:36.900
the main reason that I
chose this particular emanated project,

66
00:04:36.960 --> 00:04:40.410
because it's, in some ways
it's less, it's not well

67
00:04:40.410 --> 00:04:42.750
known the way that say
the Mac mini the Mac

68
00:04:42.750 --> 00:04:46.350
is probably the most widely
used and well-known classic Mac

69
00:04:46.350 --> 00:04:52.800
emulator, but this code of
pieces, so absolutely clean and

70
00:04:52.830 --> 00:04:57.180
easy to understand the way
that it just has very

71
00:04:57.180 --> 00:05:03.510
careful responsibility of ownership of
various, you know, various bits

72
00:05:03.510 --> 00:05:08.340
of state. There's basically just
a big structure that describes

73
00:05:08.370 --> 00:05:10.410
the current state of the
CPU and a structure that

74
00:05:10.470 --> 00:05:12.390
describes the current state of
the system. And then they

75
00:05:12.390 --> 00:05:15.210
just get passed through really
easy to understand and well

76
00:05:15.210 --> 00:05:19.500
broken down functions. So in
fact that the fact that

77
00:05:19.500 --> 00:05:23.670
it was this really straightforward
code to a person who

78
00:05:23.910 --> 00:05:27.630
who's looked at a few
emulated code bases and that

79
00:05:27.630 --> 00:05:31.650
it was just POC, there
was not assembling was critical

80
00:05:31.650 --> 00:05:34.590
to me being able to
pull this off. I think

81
00:05:34.650 --> 00:05:37.170
I see. Yeah, for example,
if it was assembly and

82
00:05:37.170 --> 00:05:41.520
that I couldn't port it
to the browser, because the

83
00:05:41.520 --> 00:05:43.380
way that I bought it,
it was using M script

84
00:05:43.380 --> 00:05:49.260
in which can, can compile
C and C plus plus

85
00:05:49.290 --> 00:05:55.440
to the LLVM intermediate representation
and then convert that to

86
00:05:55.440 --> 00:05:59.840
JavaScript. So it has to
be high level Cody. That's

87
00:05:59.840 --> 00:06:02.860
not tied to a particular
architecture. So it's interesting that

88
00:06:02.860 --> 00:06:05.770
you're saying that that's the
C, which I think most

89
00:06:05.770 --> 00:06:08.590
of us think of as
being low-level code has to

90
00:06:08.590 --> 00:06:11.920
be sufficiently high level enough
for it to move over

91
00:06:11.920 --> 00:06:16.450
to a am script. And,
and the LLVM Right. Well,

92
00:06:16.480 --> 00:06:19.780
I mean, C was into
a lot of people, the

93
00:06:19.780 --> 00:06:22.630
original portable language, you know,
you could, that was what

94
00:06:22.630 --> 00:06:24.280
was great about C when
it first came out, because

95
00:06:24.280 --> 00:06:26.530
at the time people were
still writing things in, you

96
00:06:26.530 --> 00:06:30.490
know, like the assemble of
a PDP tan or whatever,

97
00:06:30.490 --> 00:06:34.330
or the assemble of various
different completely separate computer architectures

98
00:06:34.330 --> 00:06:37.180
and see was this code
is a language that could

99
00:06:37.180 --> 00:06:40.090
be compiled to all of
those architectures and to us

100
00:06:40.090 --> 00:06:43.360
now, that just sounds like,
well, of course, if you're

101
00:06:43.360 --> 00:06:46.360
going to support a certain
language on a certain platform,

102
00:06:46.360 --> 00:06:48.820
it needs to composite, but
at the time that was,

103
00:06:48.820 --> 00:06:52.570
you know, the original portable
language. So it has to

104
00:06:52.570 --> 00:06:57.070
be portable C can't do
really crazy stuff with like

105
00:06:57.070 --> 00:07:04.330
costing values to completely different
Val completely different types that

106
00:07:04.330 --> 00:07:08.920
will then potentially rely on
some thing that happens only

107
00:07:08.920 --> 00:07:13.450
on certain architectures. For example,
only works on an architecture

108
00:07:13.450 --> 00:07:16.000
where, and it is worth
this, you know, this size

109
00:07:16.000 --> 00:07:21.160
or whatever. So to that
in that way, it has

110
00:07:21.160 --> 00:07:25.930
to be portable together. We
compile it by unscripted and

111
00:07:25.930 --> 00:07:29.500
PC satisfies that Did em
script and do what you

112
00:07:29.500 --> 00:07:31.570
needed it to do. Is
it just a matter of,

113
00:07:31.600 --> 00:07:33.640
Oh, I'm not going to
use GCC, I'll use script

114
00:07:33.640 --> 00:07:35.650
in and I'll run it
through. And then this low-level

115
00:07:35.650 --> 00:07:38.410
virtual machine stuff will pop
out the other side. Or

116
00:07:38.410 --> 00:07:42.040
did you have to modify
in the script? Well, it's

117
00:07:42.100 --> 00:07:45.100
in the core of what
it does. Subscription is quite

118
00:07:45.790 --> 00:07:51.130
relatively easy to use for
someone who's both familiar with

119
00:07:51.880 --> 00:07:57.130
the traditional GCC make kind
of tool chain of compiling

120
00:07:57.130 --> 00:08:02.770
C applications, and also familiar
with JavaScript and JavaScript tools.

121
00:08:02.770 --> 00:08:06.820
But basically it does have
the drop in replacement for

122
00:08:07.270 --> 00:08:11.740
make and configure. However, that's
not really going to guarantee

123
00:08:11.740 --> 00:08:13.690
that the code is going
to build or work properly,

124
00:08:13.690 --> 00:08:17.440
especially considering that, you know,
on, on a particular system,

125
00:08:17.440 --> 00:08:19.750
you might have lots of
different lives and still a

126
00:08:19.750 --> 00:08:22.420
really common one is these
days is SDL, which is

127
00:08:22.420 --> 00:08:27.940
a really useful library for
abstracting input and output as

128
00:08:27.970 --> 00:08:33.850
keyboard mouse drawing to the
screen sound. So you can

129
00:08:33.850 --> 00:08:38.080
just write your application against
SDL and it'll ideally work

130
00:08:38.080 --> 00:08:40.750
on any platform that supports
us, whether it's like Mac

131
00:08:40.780 --> 00:08:45.400
windows, Linux, And SDL is
the simple direct mail. Yep.

132
00:08:45.580 --> 00:08:49.630
Yep. So that was a
really handy tool for people

133
00:08:49.630 --> 00:08:52.690
doing games and emulators and
things like that that has

134
00:08:52.690 --> 00:08:56.280
been around for a few
years. So that's something that

135
00:08:56.280 --> 00:08:58.380
someone might have installed on
their computer, but in the

136
00:08:58.380 --> 00:09:01.140
browser, we can't really access
any COVID other than what

137
00:09:01.140 --> 00:09:06.270
we've loaded ourselves. So things
like SDL have to actually

138
00:09:06.270 --> 00:09:12.990
be included with the, the,
the code that's being built

139
00:09:12.990 --> 00:09:15.410
for the browser, but actually
what I'm scripting have done

140
00:09:15.420 --> 00:09:19.800
have sort of, that's sort
of a reimplemented SDL. So

141
00:09:20.490 --> 00:09:22.860
in terms of things like
canvas, so rather than drawing

142
00:09:22.860 --> 00:09:24.810
to the screen, it draws
to a canvas and rather

143
00:09:24.810 --> 00:09:30.780
than outputting audio to what
have your output devices, I

144
00:09:30.780 --> 00:09:34.680
guess, on, on Lennox, it's
like a sound or it

145
00:09:34.680 --> 00:09:39.330
is on the, in browser,
my output as eczema, five

146
00:09:40.350 --> 00:09:45.350
web audio, data API, or
audio tag or whatever, <inaudible>

147
00:09:45.380 --> 00:09:47.170
hang on though, to put
this in the information for

148
00:09:47.170 --> 00:09:48.680
the audience who may not
have all of this. So

149
00:09:48.680 --> 00:09:50.930
if you're saying, if I
understand correctly, like what people

150
00:09:50.930 --> 00:09:53.360
usually think of when they
think of SDL, the simple

151
00:09:53.360 --> 00:09:56.540
direct media layer is this,
this layer that lets you

152
00:09:57.260 --> 00:10:00.320
give access to your audio,
your keyboard, your joystick, and

153
00:10:00.320 --> 00:10:03.980
then underneath it is usually
either open GL or direct

154
00:10:03.980 --> 00:10:07.370
3d. And you're saying on
the side of M scripting,

155
00:10:07.400 --> 00:10:10.160
which takes the LLVM bite
code and turns it into

156
00:10:10.160 --> 00:10:15.050
JavaScript, they have put canvas
underneath that and HTML five

157
00:10:15.050 --> 00:10:17.570
audio where we would ordinarily
expect to see open GL

158
00:10:17.570 --> 00:10:22.070
or direct 3d. Is that
correct? Yeah. So basically a

159
00:10:22.310 --> 00:10:27.500
prescription comes with a bunch
of re implementations of various

160
00:10:27.500 --> 00:10:32.480
popular libraries. So there's SDL,
there's some open DL tools,

161
00:10:33.620 --> 00:10:39.320
some different kinds of IO
tools like X 11. And

162
00:10:39.470 --> 00:10:43.400
it's got these little JavaScript
implementations of those things in

163
00:10:43.400 --> 00:10:45.470
terms of the tools we've
got in the browser. So

164
00:10:45.530 --> 00:10:53.990
canvas for graphics out, putting
a display, and yet we

165
00:10:53.990 --> 00:10:58.550
have audio API for audio
and just, you know, mouse

166
00:10:58.550 --> 00:11:01.640
events, for example, it can
take a mouse and keyboard

167
00:11:01.640 --> 00:11:07.280
events and turn those into
SDL key presses and mouse

168
00:11:07.280 --> 00:11:12.070
events in SDL zone representations
of those things. So COVID,

169
00:11:12.070 --> 00:11:15.350
that's already been built to
use STL for its keyboard

170
00:11:15.350 --> 00:11:19.430
and mouse input, for example,
should just what, when combined

171
00:11:19.430 --> 00:11:21.890
with some script and, and
it's, it's really does a

172
00:11:21.890 --> 00:11:25.490
lot to make it easy
to, to rebuild those code

173
00:11:26.000 --> 00:11:29.180
there's code base in the
browser. Okay. So you take

174
00:11:29.180 --> 00:11:33.650
the portable C from PCE,
the original C version of

175
00:11:33.650 --> 00:11:37.280
PC, and you use LLVM
GCC, or you use Klein

176
00:11:37.790 --> 00:11:40.970
and then LLVM pops out
the other side and then

177
00:11:40.970 --> 00:11:44.240
you take that, and that
turns into Java, Right? So

178
00:11:44.240 --> 00:11:47.420
that's the core part of
subscription apart from the fact

179
00:11:47.420 --> 00:11:50.360
that prescription has all these
nice tools to basically drop

180
00:11:50.360 --> 00:11:54.280
in place of a GCC,
for example, has something called

181
00:11:54.280 --> 00:11:58.420
MP MCC, but that's really
just a wrapper around a

182
00:11:58.480 --> 00:12:02.080
PCC client. But then with
that output, which is what's

183
00:12:02.080 --> 00:12:06.940
called LLVM intermediate representation, which
is kind of like LLVM

184
00:12:06.940 --> 00:12:10.990
biker, I guess it takes
the theme script and compile

185
00:12:11.010 --> 00:12:14.260
it takes that and converts
it into first, I think,

186
00:12:14.260 --> 00:12:17.440
naive JavaScript. And then it
has so like an exact

187
00:12:18.160 --> 00:12:23.380
representation of an exact kind
of JavaScript replica of the

188
00:12:23.770 --> 00:12:27.760
LVM by code. And then
it takes that and tries

189
00:12:27.760 --> 00:12:30.250
to optimize it so that
it's not a huge, huge

190
00:12:30.250 --> 00:12:34.930
block of code. It does
end up still being fairly

191
00:12:35.680 --> 00:12:37.930
large amount of code, but
because there's a lot of

192
00:12:37.930 --> 00:12:40.000
redundancy, you know, once they
actually load it in the

193
00:12:40.000 --> 00:12:44.380
browser, various magic that we
all benefit from every day,

194
00:12:44.380 --> 00:12:47.440
like, geez, a compression turns
that into something that's manageable.

195
00:12:48.940 --> 00:12:53.230
So, so that the output
is basically this, this JavaScript

196
00:12:53.230 --> 00:12:58.750
code, which only deals in
values. Like it only deals

197
00:12:58.750 --> 00:13:03.880
in the numbers, right? And
it's got a big type

198
00:13:04.690 --> 00:13:09.280
array, which is a feature
that's added in HTML five

199
00:13:10.270 --> 00:13:13.510
to JavaScript, which basically allows
you to have an array

200
00:13:13.510 --> 00:13:15.740
of just raw data that
you can look at as,

201
00:13:15.880 --> 00:13:19.920
as different kind of types,
like, you know, an eight

202
00:13:19.930 --> 00:13:23.620
the end. And so that's
like the memory that you,

203
00:13:23.660 --> 00:13:27.970
that this application has access
to just like on, in

204
00:13:27.970 --> 00:13:30.070
native code, you would have
like a, a big chunk

205
00:13:30.070 --> 00:13:34.150
of memory of the application
can use. And so that

206
00:13:34.150 --> 00:13:38.800
all that comes together to
basically run a kind of,

207
00:13:38.950 --> 00:13:42.370
something like that. LLVM intermediate
presentation in your browser is

208
00:13:42.370 --> 00:13:47.190
JavaScript. How much do you
have to change the resulting

209
00:13:47.190 --> 00:13:49.680
C? Is this how much
of this is bringing libraries

210
00:13:49.680 --> 00:13:52.470
together and making a build
system versus actually having to

211
00:13:52.470 --> 00:13:56.190
go in and patch a
in this case, hamper hugs,

212
00:13:56.190 --> 00:13:58.950
original C coat, cause I'm
looking at the history and

213
00:13:58.950 --> 00:14:01.350
your, and your good hub
here. And it looks to

214
00:14:01.350 --> 00:14:03.420
me like you are having
to poke around and, and

215
00:14:03.420 --> 00:14:07.020
change things at the C
level that will then affect

216
00:14:07.020 --> 00:14:10.740
how your JavaScript emulator runs.
Right? And so that's kind

217
00:14:10.740 --> 00:14:12.600
of why to be able
to do this project I

218
00:14:12.600 --> 00:14:15.990
needed to have as well
as a good understanding of

219
00:14:15.990 --> 00:14:19.500
emulators and how they tend
to be written and a

220
00:14:19.500 --> 00:14:23.550
good understanding of how JavaScript
runs in the browser. And

221
00:14:23.790 --> 00:14:26.970
you know, what the nature
of the browser environment is

222
00:14:26.970 --> 00:14:29.940
because I also had to,
you know, be fairly solid

223
00:14:30.090 --> 00:14:35.130
on my C actually went
through set shows, learn, see

224
00:14:35.130 --> 00:14:37.230
the hard way, just to
make sure that I was

225
00:14:37.230 --> 00:14:41.040
like burned up on my,
on my C before I'm

226
00:14:41.070 --> 00:14:44.040
diving into making lots of
changes to this code base.

227
00:14:44.070 --> 00:14:46.680
But I think in the
end, the changes ended up

228
00:14:46.680 --> 00:14:49.410
being fairly precise. I mean,
some of them will have

229
00:14:49.440 --> 00:14:50.880
comment above that says, this
is a bit of a

230
00:14:50.900 --> 00:14:56.090
hat, like for example, to
get the mouse working the

231
00:14:56.090 --> 00:15:01.100
way that it looks really,
really nice for users and

232
00:15:01.490 --> 00:15:04.100
the way that people expect
from using say VMware or

233
00:15:04.100 --> 00:15:09.020
whatever, basically you need the
mouse to just go wherever

234
00:15:09.020 --> 00:15:11.270
they've got the mouse over,
hovering over the window, you

235
00:15:11.270 --> 00:15:14.330
know, whereas a lot of
emulators required to actually take

236
00:15:14.330 --> 00:15:19.970
control of the mouse. And
so, you know, you have

237
00:15:19.970 --> 00:15:22.370
to click on them and
then that captured your mouse.

238
00:15:23.210 --> 00:15:26.480
I was basically doing this
kind of neat or gross

239
00:15:26.480 --> 00:15:29.650
hat, depending on your perspective.
Well, according to line four

240
00:15:29.650 --> 00:15:34.090
39 of command 68, K
it actually says gross hacks

241
00:15:34.120 --> 00:15:36.520
to set mouth position in
browser. So it sounds like

242
00:15:36.520 --> 00:15:38.920
you felt it was gross
at the time. Yeah. And

243
00:15:39.100 --> 00:15:41.830
it certainly grows in terms
of it's what it's doing

244
00:15:41.830 --> 00:15:46.210
is getting the mouse position
from the process in terms

245
00:15:46.210 --> 00:15:52.150
of, you know, the browser,
the actually through the stubbed

246
00:15:52.150 --> 00:15:56.290
out SDL code. So it's
using an SDL method, which

247
00:15:56.350 --> 00:15:58.780
inscription is then implemented in
terms of, you know, mouse

248
00:15:58.780 --> 00:16:02.530
events or to, to basically
get the position of a

249
00:16:02.530 --> 00:16:05.890
mouse relative to the canvas.
And then it's like converting

250
00:16:05.890 --> 00:16:12.070
that into and poking into
memory, the values in the

251
00:16:12.070 --> 00:16:16.900
actual emulated Mackowitz of where
the mouse position is. So

252
00:16:17.530 --> 00:16:22.030
in the emulated macro S
Kurt is running, you know,

253
00:16:22.360 --> 00:16:25.030
there'll be some routine where
it updates the mouse position.

254
00:16:26.200 --> 00:16:29.890
And basically there's a certain
location in memory, which made

255
00:16:29.890 --> 00:16:32.950
this quite easy because any
original MapQuest that had these

256
00:16:32.950 --> 00:16:38.440
things code, hi Lily memory
coils, which are just a

257
00:16:38.440 --> 00:16:41.650
bunch of global variables for
the whole operating system, I

258
00:16:41.650 --> 00:16:44.740
wanted them to select the
mass position. And so I

259
00:16:44.740 --> 00:16:48.040
was able to poke the
value of the mouse X

260
00:16:48.160 --> 00:16:52.450
and Y coordinates straight into
macro S memory, which is

261
00:16:52.450 --> 00:16:54.440
something you couldn't do on
a, on a, on an

262
00:16:54.490 --> 00:16:57.610
operating system is all this,
the layers of indirection and

263
00:16:57.670 --> 00:17:02.470
protection of memory. That, that
seems simple, like when you're

264
00:17:02.470 --> 00:17:04.090
like, Oh, you know, I
just kind of poke this

265
00:17:04.090 --> 00:17:06.640
in memory. I'm looking at
the code here though. And

266
00:17:06.670 --> 00:17:10.330
it's seems pretty specific. I
mean, it's basically magic numbers.

267
00:17:10.330 --> 00:17:14.740
You're going and saying, take
this 16 bit integer and

268
00:17:14.770 --> 00:17:18.300
here's the mouse, Y and
then you're basically shoving into

269
00:17:18.300 --> 00:17:22.090
the three separate locations. How
in the world would you

270
00:17:22.090 --> 00:17:25.930
know those locations? How would
you figure that? Well, fortunately,

271
00:17:26.020 --> 00:17:29.200
some people have gone to
the effort of figuring out

272
00:17:29.200 --> 00:17:32.320
what all the, these low
memory global variables are for

273
00:17:32.320 --> 00:17:35.860
the original Mac iOS. I
found some document on a

274
00:17:36.340 --> 00:17:39.990
website of, I think it's
like a Linux that, that

275
00:17:40.180 --> 00:17:46.030
someone made for 68 K
Motorola processes. So a Linux

276
00:17:46.030 --> 00:17:49.530
destroyed that could run on
the original Mac will probably

277
00:17:49.560 --> 00:17:54.390
many years after the fact.
And so they documented all

278
00:17:54.390 --> 00:17:58.500
this, all these magic locations
that you can put things

279
00:17:58.500 --> 00:18:01.890
like mouse position. I think
they would probably would be

280
00:18:01.890 --> 00:18:03.930
a nicer way to have
implemented it, like this way

281
00:18:03.930 --> 00:18:07.890
that the floppy drive works
in PC. Is it actually

282
00:18:07.890 --> 00:18:12.780
just once the operating system
tries to access the faulty

283
00:18:12.780 --> 00:18:14.400
drive PC, you just kind
of traps that and says,

284
00:18:14.400 --> 00:18:17.310
all right, well, we'll just
actually do something else, like

285
00:18:17.310 --> 00:18:20.250
go on to the system's
hard drive and grab out

286
00:18:20.250 --> 00:18:25.020
what the floppy disk image,
but that would be a

287
00:18:25.020 --> 00:18:28.410
lot more complicated. Cause it
actually involves writing some 68

288
00:18:28.410 --> 00:18:31.110
K assembly code kind of
like a little custom driver

289
00:18:31.440 --> 00:18:36.060
and injecting that into, into
the emulated macro. So what

290
00:18:36.060 --> 00:18:39.120
I did was a lot
simpler, just poking and values

291
00:18:39.120 --> 00:18:42.480
where Matt versus going to
look for the mouse position,

292
00:18:42.600 --> 00:18:45.620
but it seems to work
pretty well. That works pretty

293
00:18:45.620 --> 00:18:48.920
clearly. I wonder though, when
you're putting together an emulator

294
00:18:48.920 --> 00:18:51.740
like this, I feel like
there must be a moment

295
00:18:51.740 --> 00:18:53.870
or a number of moments
or a long time actually,

296
00:18:53.870 --> 00:18:57.530
before anything actually happens when
you're just trying to get

297
00:18:57.530 --> 00:19:00.020
this thing to start up.
And you're kind of feeling

298
00:19:00.020 --> 00:19:03.140
around in the dark. And
then if a bug like

299
00:19:03.140 --> 00:19:04.760
this came along, or you
didn't like the way the

300
00:19:04.760 --> 00:19:08.240
mouse was behaving, I think
maybe myself and maybe people

301
00:19:08.240 --> 00:19:10.130
that are listening would just
kind of give up. They're

302
00:19:10.130 --> 00:19:13.220
like, you know, heck if
I know I'm, I'm amazed,

303
00:19:13.220 --> 00:19:16.940
the thing works. Right? Yeah.
And to be honest, I

304
00:19:16.940 --> 00:19:18.530
wasn't really sure if this
was even going to be

305
00:19:18.530 --> 00:19:21.890
possible. When I started, I
had this idea sort of

306
00:19:21.890 --> 00:19:25.850
a rough feel of, you
know, what can be done

307
00:19:25.850 --> 00:19:29.120
in the browser, the other
previous emulator in the browser

308
00:19:29.120 --> 00:19:32.720
projects that people had done,
like, you know, there's like

309
00:19:32.720 --> 00:19:37.520
an Apple two in the
browser. And I can't remember

310
00:19:37.520 --> 00:19:40.670
what the one who really
saw that made me think

311
00:19:40.670 --> 00:19:43.430
that I could do this,
but I think probably February

312
00:19:43.430 --> 00:19:49.370
spill, odds, x86 simulator, and
the brother, which he actually

313
00:19:49.370 --> 00:19:53.120
wrote, you know, from scratch
it's Java script from scratch,

314
00:19:53.900 --> 00:19:58.370
emulating an x86 CPU. And
when that came out, everyone

315
00:19:58.370 --> 00:20:00.890
was just, you know, on
hacker news, everyone was amazed

316
00:20:01.850 --> 00:20:04.190
that this could be done.
And I think once I

317
00:20:04.190 --> 00:20:06.260
saw that, I figured, you
know, if you can do

318
00:20:06.260 --> 00:20:10.880
that and I said, he's
a CPU emulator, then I

319
00:20:10.880 --> 00:20:14.720
think this can be done.
So once I go past

320
00:20:14.750 --> 00:20:17.390
that point of at least
having some confidence about it

321
00:20:17.450 --> 00:20:20.990
and, and seeing what people
were achieving with him scripting

322
00:20:21.680 --> 00:20:24.290
as well, in terms of
being able to compile existing

323
00:20:24.590 --> 00:20:31.220
bases, like the, the unreal,
the unreal engine demo, the

324
00:20:31.730 --> 00:20:39.260
Epic Citadel, which has successfully
compiled the unreal game engine

325
00:20:39.650 --> 00:20:42.290
to run in the browser
and unscripted at, at, you

326
00:20:42.290 --> 00:20:47.860
know, perfectly acceptable frame rate.
So I, I, I felt

327
00:20:47.860 --> 00:20:51.250
like this was, this was
doable, but then I had

328
00:20:51.250 --> 00:20:54.820
to find an emulate, a
code base that was understandable

329
00:20:54.880 --> 00:20:57.760
to me. And, and to,
to the degree that I

330
00:20:57.760 --> 00:21:00.740
needed to be able to
actually get things working. And

331
00:21:00.900 --> 00:21:05.560
I found that in PCA
and then from there on,

332
00:21:05.560 --> 00:21:09.880
it was just a lot
of trying to get billed,

333
00:21:10.630 --> 00:21:15.790
looking at the errors spewing
out of scriptings rapid GCC

334
00:21:15.790 --> 00:21:19.840
LLVM, and then, you know,
slowly one by one going

335
00:21:19.840 --> 00:21:23.260
through and trying to figure
out what, what it was

336
00:21:23.260 --> 00:21:26.440
complaining about. And then, and
then it goes to the

337
00:21:26.440 --> 00:21:31.180
browser. Something was running the
browser. There was no visual

338
00:21:31.180 --> 00:21:33.550
output. I couldn't really tell
if it was working or

339
00:21:33.550 --> 00:21:37.540
not, because an emulator can
run without a screen that

340
00:21:37.540 --> 00:21:41.680
an input it's just a
ambulated computer, so it can

341
00:21:41.680 --> 00:21:45.940
be running along and churning
through instructions. And, and so

342
00:21:45.940 --> 00:21:49.570
you have to really kind
of have a bit more

343
00:21:49.920 --> 00:21:52.750
visibility of what it's doing.
So I looked at, you

344
00:21:52.750 --> 00:21:54.940
know, what the emulated CPU
was doing, where it was

345
00:21:54.940 --> 00:22:02.410
moving through the macaronis code.
And even then, you know,

346
00:22:02.410 --> 00:22:05.500
it's possible that it sort
of doesn't, it's turning through,

347
00:22:05.500 --> 00:22:07.300
but it doesn't really understand
what's happening, but I was

348
00:22:07.300 --> 00:22:10.960
able to follow it, moving
through the code in the

349
00:22:10.960 --> 00:22:15.010
way that according to the
comments that some people have

350
00:22:15.010 --> 00:22:20.110
nicely provided for the macro
from indicated where it should

351
00:22:20.110 --> 00:22:21.790
be going. And then from
there, I could tell that

352
00:22:22.210 --> 00:22:26.590
know, things were kind of
working. And I looked at,

353
00:22:27.280 --> 00:22:35.590
okay, so PC outputs, the
display through, through SDL, but

354
00:22:35.590 --> 00:22:40.240
it's not working yet, but
I was able to kind

355
00:22:40.240 --> 00:22:45.280
of like, see in memory
the, the in-memory representation of

356
00:22:45.520 --> 00:22:48.670
what's on the display. So
I could, I could tell

357
00:22:48.670 --> 00:22:53.130
that that was like up
on truth. There was like

358
00:22:53.130 --> 00:22:57.100
a quiet of one of,
because the macro West boot

359
00:22:57.100 --> 00:23:00.400
screen was originally this kind
of like black and white

360
00:23:00.610 --> 00:23:04.010
grid. So one black pixel,
one white pixel by pixel.

361
00:23:04.940 --> 00:23:06.870
And so I could see
that in memory. I know

362
00:23:06.870 --> 00:23:08.610
you're saying you can see
that in like, in like

363
00:23:08.640 --> 00:23:10.860
F 12 tools. You're seeing
this in JavaScript in a

364
00:23:10.860 --> 00:23:16.560
binder. No, no, no. It's
actually in the C the,

365
00:23:16.560 --> 00:23:21.360
the, within the memory that
inscription has. So inscription is

366
00:23:21.360 --> 00:23:23.730
kind of like another level
on top of that. It's

367
00:23:23.730 --> 00:23:28.440
like, it's got this, this
type of Ray that represents,

368
00:23:29.130 --> 00:23:33.650
you know, the, the memory
that's available from scripting, and

369
00:23:33.660 --> 00:23:36.990
then inside that you've got
your C code running. So

370
00:23:37.320 --> 00:23:39.780
I was able to kind
of like edit the C

371
00:23:39.780 --> 00:23:43.890
code of PCE to dump
out what was in its,

372
00:23:44.430 --> 00:23:47.330
it's sort of like frame
buffer, it's screen, you know,

373
00:23:47.420 --> 00:23:52.670
simulated screen. And then, and
then, so I came to

374
00:23:52.670 --> 00:23:55.130
the realization that I was
running into the problem that

375
00:23:55.130 --> 00:23:59.720
every unscripted and quartered application
has, which is that the

376
00:23:59.720 --> 00:24:04.700
browser can't just run code
indefinitely. It can't just keep

377
00:24:05.030 --> 00:24:09.740
running a piece of code
that never stops and yields

378
00:24:09.740 --> 00:24:12.470
back to the browser. That's
why that's what happens when

379
00:24:12.470 --> 00:24:17.690
you see those, those error
messages that say an unresponsive

380
00:24:17.690 --> 00:24:20.800
script is, is probably on
the page. The crowd you're

381
00:24:20.800 --> 00:24:23.050
detecting that an infinite loop
is it's just like, this

382
00:24:23.050 --> 00:24:25.450
has been going for 20
seconds and it never seems

383
00:24:25.450 --> 00:24:28.210
like it's going to stop.
Right. And that's because the

384
00:24:28.210 --> 00:24:30.850
way that a JavaScript code
runs in a browser, it

385
00:24:30.850 --> 00:24:35.020
does have to regularly yield
back to the browser's main

386
00:24:35.020 --> 00:24:38.830
event loop so that the
browser can do other things

387
00:24:38.830 --> 00:24:42.520
like update the screen updates,
the display of, of the

388
00:24:42.520 --> 00:24:47.110
page in the browser window.
So I had to find

389
00:24:47.110 --> 00:24:49.720
a way to take this
program that was designed as

390
00:24:49.720 --> 00:24:52.480
most emulators are to just
run infinitely and an infinite

391
00:24:52.480 --> 00:24:57.850
loop. I had to break
that up into little manageable

392
00:24:57.880 --> 00:25:02.110
bite sized chunks for the
browser. And so I was

393
00:25:02.110 --> 00:25:05.740
able to do that by
basically going to the, the

394
00:25:05.780 --> 00:25:09.340
main loop of the emulator.
Most simulators have this main

395
00:25:09.340 --> 00:25:12.520
loop that just updates a
few things and then runs

396
00:25:12.550 --> 00:25:16.300
some CPU cycles. And then
it loops around. And I

397
00:25:16.300 --> 00:25:18.250
was basically, I would have
to break that up to

398
00:25:18.250 --> 00:25:22.360
say, only run a few,
say 10,000 cycles of the

399
00:25:22.360 --> 00:25:29.260
CPU, and then stop. And
then the, the browser basically

400
00:25:29.260 --> 00:25:33.400
does kind of like a
set time out to say,

401
00:25:33.490 --> 00:25:37.360
you know, as soon as,
as soon as you finished

402
00:25:37.630 --> 00:25:40.330
doing other things, add into
the schedule to, to run

403
00:25:40.330 --> 00:25:46.840
another of those batches of
10,000 CPU cycles. So once

404
00:25:46.840 --> 00:25:50.020
that was happening, a whole
lot of other stuff started

405
00:25:50.050 --> 00:25:53.740
magically working like the output
to the log that the

406
00:25:53.740 --> 00:25:57.790
emulator, which is kind of
like the standard output SI

407
00:25:58.780 --> 00:26:03.280
started spewing out all these
quality messages. Because up until

408
00:26:03.280 --> 00:26:06.670
that point is infinite loop
was blocking the browser from

409
00:26:06.670 --> 00:26:09.460
actually updating, you know, anything
else on the page, not

410
00:26:09.460 --> 00:26:11.830
just the screen, but I'll
just say emulate the screen.

411
00:26:11.830 --> 00:26:14.770
But the, just the log
saying, you know, the emulators

412
00:26:14.770 --> 00:26:19.480
managed to load this disc
image. It's managed to start

413
00:26:19.480 --> 00:26:23.590
the CPU it's allocated this
much ambulated memory. And so

414
00:26:23.590 --> 00:26:25.180
once I saw that, I
was like, well, things are

415
00:26:25.180 --> 00:26:28.360
working. And from there, it
wasn't, it wasn't much to

416
00:26:28.360 --> 00:26:32.950
just figure out how to
actually get the display hearing

417
00:26:32.950 --> 00:26:36.010
in the canvas. And it
was just a matter of

418
00:26:36.010 --> 00:26:43.770
the fact that PC or
the outputs RGB. So like

419
00:26:43.800 --> 00:26:46.530
eight bits of red, eight
bits of green it's blue.

420
00:26:47.130 --> 00:26:54.120
Right. Whereas canvas typically expects
RGBA so it expects an

421
00:26:54.120 --> 00:26:57.900
extra alpha channel. And so
when I was copying, I

422
00:26:57.900 --> 00:26:59.910
just had to add like
a little, a little bit

423
00:26:59.910 --> 00:27:02.010
of extra code to M
script. And so that when

424
00:27:02.550 --> 00:27:10.200
copying the kind of frame
buffer from the emulated memory.

425
00:27:10.200 --> 00:27:13.890
So like the Mac computers,
like it's drawn the screen

426
00:27:13.890 --> 00:27:17.880
into its emulated memory. It's
like, okay, so this is

427
00:27:17.880 --> 00:27:21.450
what's on the screen, normally
in a real computer, the

428
00:27:21.450 --> 00:27:24.060
video record or whatever would,
would grab that from memory

429
00:27:24.060 --> 00:27:27.790
and put it out on
a display, the emulator kind

430
00:27:27.810 --> 00:27:30.090
does the same thing. It
just grabs what's in the

431
00:27:30.090 --> 00:27:32.520
max memory and in the
frame buffer and outputs it

432
00:27:32.520 --> 00:27:36.960
by SDL to the SDL
window. So basically in the

433
00:27:36.960 --> 00:27:38.580
process of doing that, I
just had to convert it

434
00:27:38.580 --> 00:27:44.190
from RGB to RGBA by
just adding a full, you

435
00:27:44.190 --> 00:27:51.390
know, fully pass it a
value for each pixel for

436
00:27:51.390 --> 00:27:56.410
its alpha channel. So you
ended up with an eight,

437
00:27:56.430 --> 00:28:02.400
eight, eight, eight RGBA output.
So that's eight bits for

438
00:28:02.400 --> 00:28:06.600
each channel and the opposite,
and then magically it was

439
00:28:06.630 --> 00:28:10.980
appearing in the canvas. I
don't know you've been working

440
00:28:10.980 --> 00:28:13.020
on it for, I don't
know, several weeks at that

441
00:28:13.020 --> 00:28:19.440
point. So it was, it
was quite fortunate that, that

442
00:28:19.440 --> 00:28:22.560
I, I did this project
when I had a lot

443
00:28:22.560 --> 00:28:25.890
of free time in between
jobs. And when I got

444
00:28:25.890 --> 00:28:29.220
to that point, I felt
like I hadn't been wasting

445
00:28:29.310 --> 00:28:32.130
my time for all that
time that, you know, in

446
00:28:32.130 --> 00:28:36.000
between getting a new job,
I had, I had done

447
00:28:36.000 --> 00:28:38.460
something that I thought was
really neat, and it was

448
00:28:38.460 --> 00:28:41.490
really gratifying to see that
finally coming out on the

449
00:28:41.490 --> 00:28:46.320
display, that little happy Mac
face that you get when

450
00:28:46.320 --> 00:28:50.570
you, when you bring it
up the classic MapQuest That

451
00:28:50.570 --> 00:28:52.550
must've been like the moment
where you just jumped up

452
00:28:52.550 --> 00:28:55.910
and cheered. Yeah, absolutely. I
was, I was at, I

453
00:28:55.910 --> 00:29:00.650
was actually staying with my
mom over in Melbourne. I

454
00:29:00.700 --> 00:29:03.290
just been visiting for a
couple of weeks. Cause I

455
00:29:03.290 --> 00:29:07.400
thought I'd take the opportunity
after quitting my last job

456
00:29:07.400 --> 00:29:09.890
to, to have a bit
of a bit of a

457
00:29:09.890 --> 00:29:14.370
break from, from my life
in Perth, just, and I

458
00:29:14.420 --> 00:29:16.790
was, I was over there
sitting in my mom's living

459
00:29:16.790 --> 00:29:19.940
room on my laptop and
just, yeah, it was just

460
00:29:19.970 --> 00:29:24.290
really, really gratifying to finally
see that working and then

461
00:29:24.380 --> 00:29:29.390
rooting straight up into macro
S without any problems and

462
00:29:29.390 --> 00:29:33.770
being able to click on
the Macintosh HD and browse

463
00:29:33.770 --> 00:29:39.470
around and use a simple
text. And I've loaded up

464
00:29:39.470 --> 00:29:44.710
with Mac paints as well.
And, and just using all

465
00:29:44.710 --> 00:29:47.260
of those old programs that
I've used when I was

466
00:29:47.350 --> 00:29:52.110
a little kid on my
mom's classic matchup. What do

467
00:29:52.110 --> 00:29:53.490
you, why do you think
it's important for people to

468
00:29:53.490 --> 00:29:55.320
do these kinds of exercises?
I mean, there's certainly the

469
00:29:55.320 --> 00:29:57.570
intellectual work and there's the,
you know, the, Oh, gee,

470
00:29:57.570 --> 00:29:59.760
that's amazing. But is, I
mean, is there a historical

471
00:29:59.760 --> 00:30:04.530
significance for, for putting these
together? Yeah, absolutely. I think

472
00:30:04.530 --> 00:30:09.540
that, that, it's very important
that we preserve all of

473
00:30:09.960 --> 00:30:14.010
the, you know, history of
custom computers and all the

474
00:30:14.010 --> 00:30:17.880
different stages that have gone
through and everything that's been

475
00:30:18.090 --> 00:30:20.820
built to get to the
point that we're at now.

476
00:30:21.480 --> 00:30:24.600
And I think that there
is a risk of that

477
00:30:24.600 --> 00:30:29.580
being lost because, you know,
in the short term, that's

478
00:30:29.580 --> 00:30:32.640
just an old computer, you
know, it's obsolete and people,

479
00:30:32.670 --> 00:30:34.860
you know, don't want to,
don't want to waste their

480
00:30:34.860 --> 00:30:38.310
time with some obsolete technology,
but then it passes that

481
00:30:38.310 --> 00:30:42.240
point and it becomes historical
and it becomes something that's

482
00:30:42.240 --> 00:30:46.140
different enough from what we
have now that it's, it's

483
00:30:46.140 --> 00:30:48.450
worth looking at. And yeah,
seeing how we go here.

484
00:30:48.450 --> 00:30:52.050
And in some ways what's
most impressive about looking at

485
00:30:52.380 --> 00:30:55.980
the classic 1984 macro. This
is not how all in

486
00:30:55.980 --> 00:30:58.530
different it is, but actually
how really similar it is

487
00:30:58.530 --> 00:31:01.860
to the way things still
are on desktop computers with

488
00:31:02.340 --> 00:31:07.920
windows, icons, mouse pointer, and
the animal, that stuff. So

489
00:31:08.400 --> 00:31:11.520
I think for really seeing
both how far we've come,

490
00:31:11.520 --> 00:31:14.970
but also how long these
ideas have been around and

491
00:31:15.030 --> 00:31:20.310
kind of shaping the way
we use technology. I think

492
00:31:20.730 --> 00:31:23.070
it's really important to preserve
that. And then also to

493
00:31:23.070 --> 00:31:27.090
make it accessible to everyone
because emulate is typically a

494
00:31:27.090 --> 00:31:32.550
not particularly accessible software that
usually made, but I'm fairly

495
00:31:32.550 --> 00:31:35.250
smart, fairly geeky people who
are happy to dive into

496
00:31:35.250 --> 00:31:39.590
a command line, but I
think this a value to

497
00:31:39.810 --> 00:31:43.440
making this stuff available to,
to everyone. And so that

498
00:31:43.440 --> 00:31:46.860
means putting it on the
web because the web is

499
00:31:46.860 --> 00:31:50.520
really the platform is available
to everyone. It doesn't require

500
00:31:50.520 --> 00:31:53.370
you to download and install
something and fight your way

501
00:31:53.370 --> 00:31:56.100
through some complicated command line
interface or anything like that.

502
00:31:56.100 --> 00:31:57.720
It's just, you go to
a webpage and it's there.

503
00:31:57.750 --> 00:32:00.870
And I think that's really
the, the, the kind of

504
00:32:00.870 --> 00:32:06.990
beauty of, of this, what
this embodies this project. Do

505
00:32:06.990 --> 00:32:08.340
you think you're going to
take it anywhere farther or

506
00:32:08.340 --> 00:32:12.210
are you pretty much done
at this point? I have

507
00:32:12.210 --> 00:32:14.280
a lot of keeping a
lot of emails from people

508
00:32:14.280 --> 00:32:18.060
who want to be able
to upload their own software

509
00:32:18.060 --> 00:32:21.570
and stuff, to be able
to try out, for example,

510
00:32:23.070 --> 00:32:25.740
an old app that they'd
got on disc somewhere, or

511
00:32:26.280 --> 00:32:29.670
for example, a really popular
use cases. HyperCard a lot

512
00:32:29.670 --> 00:32:32.970
of people really love HyperCard.
It was a really cool

513
00:32:32.970 --> 00:32:38.730
tool that Apple released for
building applications, simple applications for.

514
00:32:40.400 --> 00:32:44.480
And so it's, it's still
got a lot of people

515
00:32:44.510 --> 00:32:47.030
have very fond memories of
it. And a lot of

516
00:32:47.510 --> 00:32:51.770
complex little things were built
in HyperCard I think missed

517
00:32:52.190 --> 00:32:56.750
the really classic computer game
was originally built in COVID

518
00:32:57.950 --> 00:33:01.880
and certainly its predecessors, this
game coats belongs another one

519
00:33:01.880 --> 00:33:05.900
called the manhole manhole. Yeah.
And so that was HyperCard

520
00:33:05.930 --> 00:33:08.300
and a lot of people
want to be able to

521
00:33:08.300 --> 00:33:11.210
try out their old HyperCard
stacks that they've made themselves

522
00:33:11.210 --> 00:33:13.370
or that they're going on
a disc somewhere. So I,

523
00:33:13.420 --> 00:33:17.870
I kind of want to
get that working just so

524
00:33:17.870 --> 00:33:24.020
that people can like open
their own sex. Apart from

525
00:33:24.020 --> 00:33:28.970
that, I think I'd like
to try and tackle another

526
00:33:28.970 --> 00:33:31.520
emulator. That's a pretty big
thing to be taking on,

527
00:33:31.520 --> 00:33:36.140
but I'd really like to
get, perhaps you liking because

528
00:33:37.310 --> 00:33:39.770
Kimi is an emulated that
covers a lot of different

529
00:33:39.770 --> 00:33:43.700
architectures. I think that one
is probably the one that's

530
00:33:43.700 --> 00:33:46.310
most likely to be useful
for a lot of different

531
00:33:47.750 --> 00:33:51.620
applications. And I, one thing
I think would be really

532
00:33:51.620 --> 00:33:53.900
cool would be to get
a next step running in

533
00:33:53.900 --> 00:33:58.310
the browser. So that's, that's
the, the operating system that,

534
00:33:59.690 --> 00:34:02.840
you know, it was developed
by the company that Steve

535
00:34:02.840 --> 00:34:05.840
jobs founded off. He got
kicked out of Apple, went

536
00:34:05.840 --> 00:34:09.200
on to become the basis
for modern day macaronis. But

537
00:34:09.230 --> 00:34:13.910
also it was the operating
system on which the original

538
00:34:13.910 --> 00:34:18.650
web browser and web server
were developed. So I think

539
00:34:18.650 --> 00:34:20.390
it'd be really neat to
get the original web browser

540
00:34:20.390 --> 00:34:23.750
running on a web browser
only, just because it sounds

541
00:34:23.750 --> 00:34:27.710
ridiculous, but also because I
think it's worth seeing if

542
00:34:27.710 --> 00:34:30.620
you're really technically minded. Now
you can get working in

543
00:34:30.650 --> 00:34:33.170
VMware, if you can find
a copy of next step,

544
00:34:33.200 --> 00:34:36.560
but to be able to
share that to everyone, I

545
00:34:36.560 --> 00:34:39.700
think would be valuable. That's
very cool. Well, people can

546
00:34:39.700 --> 00:34:44.260
check out your site at
james' friend.com.edu, and I'll put

547
00:34:44.260 --> 00:34:48.820
links to your blog, your
article on why porting emulators

548
00:34:48.820 --> 00:34:51.970
to the browser matters and
people can check out PCE

549
00:34:51.970 --> 00:34:55.300
dot, JS both on your
site and on GitHub. Thanks

550
00:34:55.300 --> 00:34:58.540
for chatting with me today.
Thanks for having me. This

551
00:34:58.540 --> 00:35:00.850
has been another episode of
Hanselminutes and we'll see you

552
00:35:00.850 --> 00:35:01.720
again next week.

