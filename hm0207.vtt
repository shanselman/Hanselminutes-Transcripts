WEBVTT FILE

1
00:00:04.380 --> 00:00:17.480
<inaudible> From Hansel minutes.com. It's
Hansel minutes, a weekly discussion

2
00:00:17.480 --> 00:00:22.430
with web developer and technologists.
Scott Hanselman. This is Lawrence Ryan

3
00:00:22.430 --> 00:00:25.820
announcing show number two Oh
seven. Recorded live Thursday, March

4
00:00:25.820 --> 00:00:30.680
18, 2010. Support for Hanselman
it's as provided by Telerik

5
00:00:30.680 --> 00:00:34.340
rad controls, the most comprehensive
suite of components for windows

6
00:00:34.340 --> 00:00:43.940
forms and asp.net web applications
online@wwwdottdlerik.com. In this episode, Scott

7
00:00:43.940 --> 00:00:47.420
talks with developer and author
Charles Petzl about the windows

8
00:00:47.420 --> 00:00:51.410
phone seven series. Hi, this
is Scott Hanselman and I'm

9
00:00:51.410 --> 00:00:53.420
here at mix in Las
Vegas at the Mandalay Bay

10
00:00:53.420 --> 00:00:56.030
resort and casino. And I'm
talking today with legendary author

11
00:00:56.060 --> 00:00:58.250
Charles penciled, who has been
so kind to sit down

12
00:00:58.250 --> 00:01:00.470
with me as I run
to the airport. How are

13
00:01:00.470 --> 00:01:03.350
you, sir are great. I'm
great. I was, I was

14
00:01:03.350 --> 00:01:05.090
thrilled to see you here.
And I noticed that you're

15
00:01:05.090 --> 00:01:09.440
actually wearing a shirt that
says programming windows, phone seven

16
00:01:09.440 --> 00:01:12.590
series. Yes, it's a new
book. This is, this is

17
00:01:12.590 --> 00:01:16.490
why I'm feeling so great.
I am doing something I

18
00:01:16.490 --> 00:01:18.830
love doing most of all,
which is writing a book

19
00:01:19.100 --> 00:01:21.740
and it's about the new
windows phone and we're where,

20
00:01:21.750 --> 00:01:26.090
and they're really using this
week. Microsoft is using a

21
00:01:26.090 --> 00:01:29.180
mix to tell us for
the first time, tell the

22
00:01:29.180 --> 00:01:32.390
public what, how you write
apps for the windows phone.

23
00:01:32.570 --> 00:01:36.170
And that's cool for those
of the audience that may

24
00:01:36.170 --> 00:01:38.390
not be as old as
I am. I not have

25
00:01:38.390 --> 00:01:41.420
been doing windows since before
windows three, one. Tell us

26
00:01:41.420 --> 00:01:44.690
a little bit about the
kind of the Seminole book

27
00:01:44.690 --> 00:01:47.780
that you wrote and how
that, what, what did you

28
00:01:47.780 --> 00:01:51.350
write that people know you
for sir? Back in 1987,

29
00:01:51.380 --> 00:01:55.130
I began writing a book
that was eventually called programming

30
00:01:55.130 --> 00:02:01.130
windows. And this was not
the first, but one of

31
00:02:01.130 --> 00:02:03.260
the very first books about
how to write apps for

32
00:02:03.260 --> 00:02:07.190
windows. When I began writing
the book, I was targeting

33
00:02:07.190 --> 00:02:10.760
windows 1.0, by the time
I finished the book, I

34
00:02:10.760 --> 00:02:14.270
was targeting windows 2.0 a
beta. I started getting beta

35
00:02:14.270 --> 00:02:18.320
versions about halfway through writing
the book and they changed

36
00:02:18.320 --> 00:02:21.290
some of the screen and
layout paradigms. I had to

37
00:02:21.290 --> 00:02:24.380
go back and fix things
as I've had that experience

38
00:02:24.380 --> 00:02:28.910
in writing books ever since.
And that book was published

39
00:02:28.910 --> 00:02:35.180
in 1988, targeting windows 2.0
and that the sales were

40
00:02:35.190 --> 00:02:38.330
slow. And then in the
early nineties, it went through

41
00:02:38.330 --> 00:02:42.230
two more additions for windows
3.0 and windows 3.1. And

42
00:02:42.650 --> 00:02:48.620
those are the additions that
people really know about to

43
00:02:48.620 --> 00:02:51.860
this day. People come up
to me and say, I

44
00:02:51.860 --> 00:02:55.370
learned windows 3.0 from your
book in 3.1 from your

45
00:02:55.370 --> 00:02:59.150
book. So there was a
later edition for windows 95

46
00:02:59.170 --> 00:03:02.800
and then windows 98. And
that's that fifth edition published

47
00:03:02.800 --> 00:03:05.530
over 10 years ago. It's
still in print. Really, really

48
00:03:05.770 --> 00:03:08.800
I'm still earning some royalties
from it. I still get

49
00:03:08.830 --> 00:03:12.340
email from readers, mostly outside
of the U S at

50
00:03:12.340 --> 00:03:17.350
this point, doing still doing
wind 32 API programming, which

51
00:03:18.400 --> 00:03:22.260
is something I haven't done
for 10 years. Do you

52
00:03:22.260 --> 00:03:27.840
consider yourself a technologist or
author? I like to think

53
00:03:27.840 --> 00:03:32.820
of myself as an author
with a technology and math

54
00:03:32.820 --> 00:03:38.850
background. I've, I've written 15
books. I think, I think

55
00:03:38.850 --> 00:03:42.150
the total is 15. The
two books I'm proudest of

56
00:03:42.780 --> 00:03:46.590
are the first is entitled
code, hidden language of computer

57
00:03:46.590 --> 00:03:50.850
hardware and software, which is
about, it's basically a how

58
00:03:50.850 --> 00:03:57.930
computers work book, how computers
work, but it's a unique

59
00:03:58.860 --> 00:04:00.540
If I can actually stop
you because I wanted to

60
00:04:00.540 --> 00:04:02.910
bring up COVID, I'm thrilled.
The code is one of

61
00:04:02.910 --> 00:04:05.370
my Mo and I know
I realized that the audience

62
00:04:05.370 --> 00:04:07.470
will realize that of course
have a Charles petrol fan

63
00:04:07.470 --> 00:04:10.320
boy, but in all seriousness,
I started writing a book

64
00:04:10.320 --> 00:04:14.340
called computer Zen a number
of years ago. And I

65
00:04:14.370 --> 00:04:17.580
had a, I had the
audience imagine a two by

66
00:04:17.580 --> 00:04:20.670
four of wood and put
light bulbs on it. And

67
00:04:20.670 --> 00:04:24.990
then someone said, this book
has been written already. I

68
00:04:24.990 --> 00:04:27.960
wrote about four chapters and
it's called code by Charles

69
00:04:27.960 --> 00:04:31.380
pencil. And I, I actually
read that book and I've

70
00:04:31.380 --> 00:04:33.870
given it as gifts. I've
used it as a teaching

71
00:04:33.870 --> 00:04:37.620
syllabus and universities. It's just
a phenomenal book that takes

72
00:04:37.620 --> 00:04:40.980
you from the bit to
the microprocessor. Thank you. It's

73
00:04:40.980 --> 00:04:42.450
really one of my favorite
books and I encourage people

74
00:04:42.450 --> 00:04:43.890
to check it out. Thank
you. And it has a

75
00:04:43.890 --> 00:04:48.690
particularly innovative cover because it
has the word code in

76
00:04:48.720 --> 00:04:52.920
Morris code braille and yeah,
it's, it's a, it's a

77
00:04:52.920 --> 00:04:55.110
great book. I'm glad I'm,
I'm, I'm thrilled that you're

78
00:04:55.110 --> 00:04:56.970
as proud of it as
I much enjoyed reading. Yeah.

79
00:04:57.010 --> 00:04:59.370
In the first few chapters,
I use more as code

80
00:04:59.370 --> 00:05:03.330
and braille as, as two
examples of binary codes that

81
00:05:03.420 --> 00:05:07.110
preceded computers by Oh, a
good a hundred years, I

82
00:05:07.110 --> 00:05:11.730
guess. So 15 books. And
the other one I'm proudest

83
00:05:11.730 --> 00:05:14.940
of is the annotated touring,
which came out last year.

84
00:05:14.940 --> 00:05:20.700
And it's a, a takes
touring Seminole paper on computability

85
00:05:20.910 --> 00:05:25.170
that he wrote as a
graduate student in, in 1936.

86
00:05:25.200 --> 00:05:28.770
And annotates the hell out
of it? Cause the paper

87
00:05:28.770 --> 00:05:32.460
itself is only about 40
pages, less than 40 pages

88
00:05:33.390 --> 00:05:37.080
total. And I provide a
lot of background to reading

89
00:05:37.080 --> 00:05:39.990
the paper. The paper is
not easy to read. It

90
00:05:39.990 --> 00:05:43.440
uses a lot of weird
symbols. You need to know

91
00:05:43.440 --> 00:05:49.020
a little background of, of
why he wrote this paper,

92
00:05:49.860 --> 00:05:54.180
but Turing was attempting to
solve a mathematical problem that

93
00:05:54.180 --> 00:05:58.430
was posed by David Hilbert
and in, so he invented

94
00:06:00.170 --> 00:06:06.500
a computer, an imaginary computer
that can process just a

95
00:06:06.620 --> 00:06:10.520
very tiny number of instructions.
And yet has since been

96
00:06:10.520 --> 00:06:14.930
proven to be equivalent to
the biggest supercomputer, except not

97
00:06:14.930 --> 00:06:17.990
quite as fast. Now, one
of the things that I

98
00:06:17.990 --> 00:06:19.730
like about, about your books
and one of the reasons

99
00:06:19.730 --> 00:06:22.880
that I wanted to interview
was that I've always felt

100
00:06:22.940 --> 00:06:25.610
when I was teaching in,
in, in, in university. And

101
00:06:25.610 --> 00:06:28.400
then when I, when I
do, I guess you could

102
00:06:28.400 --> 00:06:30.590
call it teaching, but these
little one hour and a

103
00:06:30.590 --> 00:06:34.850
90 minute talks, that the
sense of historical context is

104
00:06:34.850 --> 00:06:39.440
so often missing from both
technical presentations and from a

105
00:06:39.450 --> 00:06:44.240
technical material that everyone thinks
that they've invented something new

106
00:06:44.240 --> 00:06:47.720
and amazing. And in all
of your books, there's a,

107
00:06:47.960 --> 00:06:50.870
there's a narrative that I
think kind of respects the

108
00:06:50.870 --> 00:06:53.540
way we've come from and
where we've, where we're going.

109
00:06:53.540 --> 00:06:56.720
I wonder if that's intentional.
Yes. I, I, I like

110
00:06:56.720 --> 00:07:01.550
history. I've, I've enjoyed history
since I was in high

111
00:07:01.550 --> 00:07:08.120
school. And I particularly am
intrigued by what's commonly referred

112
00:07:08.120 --> 00:07:12.590
to as the prehistory of
computing. The, the most obvious

113
00:07:12.620 --> 00:07:16.310
is, is Charles Babbage in
the 19th century who designed

114
00:07:17.240 --> 00:07:19.880
something that, that if it
were built, it would be

115
00:07:20.510 --> 00:07:23.390
probably the most impressive technological
feat of the 19th century.

116
00:07:23.420 --> 00:07:27.620
Unfortunately it was never built,
but also things like the

117
00:07:27.620 --> 00:07:34.580
invention of logarithms and some
analog computers that are very

118
00:07:34.580 --> 00:07:40.490
interesting historically, that that predated
digital computers just there's. There

119
00:07:40.490 --> 00:07:43.670
was a machine that was
built by Vannevar Bush called

120
00:07:43.670 --> 00:07:48.650
the differential analyzer, which basically
solved differential equations, but did

121
00:07:48.650 --> 00:07:52.970
so using a bunch of,
of, of Holies and wheels

122
00:07:52.970 --> 00:07:56.090
and stuff. And it's just
amazing. There's actually, you can

123
00:07:56.090 --> 00:08:00.650
see a little glimpse of
the differential analyzer in a,

124
00:08:02.210 --> 00:08:03.830
I don't have the title
of it. I there's a

125
00:08:03.830 --> 00:08:08.030
science fiction film from the
early fifties that, so it

126
00:08:08.030 --> 00:08:10.610
really existed. They built it.
Oh yeah, yeah. This was,

127
00:08:10.610 --> 00:08:14.870
this was built. This was
built in the 1920s at

128
00:08:14.870 --> 00:08:18.230
Harvard. I may have all
my details wrong or MIT

129
00:08:18.950 --> 00:08:22.340
readers. Our readers will correct.
Your we'll make sure that

130
00:08:22.340 --> 00:08:26.030
we put links in the
show notes. Alright. And this

131
00:08:26.030 --> 00:08:28.520
was, this was used a
great deal for solving differential

132
00:08:28.520 --> 00:08:32.270
equations. As I get older,
as I approach approach 40,

133
00:08:32.450 --> 00:08:34.760
I'm starting to feel like,
and I always refer to

134
00:08:34.760 --> 00:08:36.440
this kind of archetype as
the old guy with the

135
00:08:36.440 --> 00:08:40.310
beard. When you're a programmer,
you have to get that

136
00:08:40.310 --> 00:08:42.710
good beard going before you
can really get the big

137
00:08:42.710 --> 00:08:45.740
money, just like the 19th
century scientists. Yeah, exactly. Until

138
00:08:45.740 --> 00:08:47.780
you've got a long white
beard, they won't respect you

139
00:08:47.780 --> 00:08:52.340
when you go to parliament,
make your proclamation. Is this

140
00:08:52.970 --> 00:08:56.760
because of an increased sense
of I've seen this before

141
00:08:56.760 --> 00:08:58.260
that I'm feeling, am I
getting a sense of deja

142
00:08:58.290 --> 00:09:01.140
VU that has caused you
to become cynical? Someone like

143
00:09:01.140 --> 00:09:04.650
you who have seen it
from the very beginning to

144
00:09:04.650 --> 00:09:09.780
now, are you cynical or
excited? It's in theory, I

145
00:09:09.780 --> 00:09:14.880
should be very cynical about
all this stuff, but I,

146
00:09:14.880 --> 00:09:20.220
I, by the time.net was
introduced to which I guess

147
00:09:20.220 --> 00:09:22.020
I first started fooling around
with it in the year

148
00:09:22.020 --> 00:09:25.770
2000. Does that sound right?
I was pretty tired of

149
00:09:25.770 --> 00:09:33.750
API programming and I really
welcomed a good object oriented

150
00:09:33.780 --> 00:09:39.270
interface to windows. You might
be thinking, what about MFC?

151
00:09:39.450 --> 00:09:43.230
Well, I never really got
into MFC. And one reason

152
00:09:43.230 --> 00:09:47.250
why is that? I didn't
particularly like C plus plus

153
00:09:47.310 --> 00:09:52.380
as a language, it always
looked ugly and clunky to

154
00:09:52.380 --> 00:09:57.360
me. And because it was
basically glommed on to C,

155
00:09:57.570 --> 00:10:01.770
which was always to me,
a very elegant language and

156
00:10:02.490 --> 00:10:06.900
MFC also itself seemed to
be a very light wrapper

157
00:10:06.900 --> 00:10:11.340
on the API. I really
couldn't see a big advantage

158
00:10:11.370 --> 00:10:16.920
to MFC at that time.
I liked WinForms windows forms,

159
00:10:16.950 --> 00:10:20.550
which was introduced in.net 1.0
a lot better. And then

160
00:10:20.550 --> 00:10:25.560
when I started seeing the
betas of what became windows

161
00:10:25.560 --> 00:10:29.820
presentation foundation, I liked that
a lot. And I think

162
00:10:29.820 --> 00:10:35.130
that that to me, WPF
is industrial strength, windows programming.

163
00:10:35.130 --> 00:10:39.480
So, but two questions about
WPF. And that one is

164
00:10:39.810 --> 00:10:43.050
when I first saw XAML.
I said, Oh, it's resource

165
00:10:43.050 --> 00:10:48.720
files again, they're more proposed.
Right? And then my second

166
00:10:48.720 --> 00:10:52.470
question is why is it
so hard to learn? Why

167
00:10:52.470 --> 00:10:54.450
is the, is it the
number? Is that concept count?

168
00:10:54.450 --> 00:10:56.190
Or is it that we
haven't found the right narrative

169
00:10:56.790 --> 00:10:59.640
is the hard to learn
or just sitting down and

170
00:10:59.640 --> 00:11:02.400
busting out? XAML I remember
the first time I tried

171
00:11:02.400 --> 00:11:04.890
to learn HTML tables. I
think I spent about three

172
00:11:04.890 --> 00:11:06.450
days and then one day
it clicked and now I

173
00:11:06.450 --> 00:11:09.360
can make a table. Of
course that's no longer a

174
00:11:09.360 --> 00:11:12.810
useful skill. Now it's something
else. I think, I think

175
00:11:12.810 --> 00:11:17.130
SAML is, is somewhat similar
in that respect. There are

176
00:11:17.130 --> 00:11:23.940
some conceptual and syntactical oddities
of XAML. I'm thinking of

177
00:11:24.210 --> 00:11:29.210
property, property elements, syntax, where
you define a, if a

178
00:11:29.220 --> 00:11:33.750
property cannot be expressed, if
the value of a property

179
00:11:33.750 --> 00:11:36.000
cannot be expressed in a
texture and you need to

180
00:11:36.000 --> 00:11:38.940
break out the properties or
property element as separate tags

181
00:11:38.940 --> 00:11:43.560
and then define the property.
Like, so I remember my

182
00:11:43.560 --> 00:11:48.060
pain and confusion and encountering
this syntax for the first

183
00:11:48.060 --> 00:11:51.930
time. So when I'm writing
about Zama, like take special

184
00:11:51.930 --> 00:11:55.420
care to discuss this syntax,
to pointed out how weird

185
00:11:55.420 --> 00:11:58.240
it is, how it almost
looks like an extension to

186
00:11:58.240 --> 00:12:03.610
XML. And it's really not.
It's almost seems very kind

187
00:12:03.610 --> 00:12:07.390
of a verbose, but we
haven't created a designer yet.

188
00:12:07.390 --> 00:12:09.580
Although maybe blend is getting
close so we can truly

189
00:12:09.580 --> 00:12:12.370
hide it. It feels like
when we did front page

190
00:12:12.370 --> 00:12:14.590
and HTML, you know, you
could tell when someone wrote

191
00:12:14.590 --> 00:12:19.300
their HTML with a designer,
it's a, to me XAML

192
00:12:19.300 --> 00:12:22.900
is not verbose because if
you, if you put XAML

193
00:12:23.230 --> 00:12:26.170
side by side with the
equivalency sharp code, that's AML

194
00:12:26.170 --> 00:12:29.740
is shorter. And almost all
the cases, even with the

195
00:12:31.270 --> 00:12:34.480
O C sharp is getting
close with the, the new,

196
00:12:34.540 --> 00:12:37.960
the new syntax where you
can use angle brackets and

197
00:12:37.960 --> 00:12:42.850
define the properties when you're
constructing an object. But the

198
00:12:42.850 --> 00:12:48.310
XAML is usually more concise.
I have all of the

199
00:12:48.310 --> 00:12:53.380
XAML that I have published
in books and articles. I've

200
00:12:53.410 --> 00:12:58.480
handwritten. I have been, I
am one of these people

201
00:12:58.480 --> 00:13:03.610
who is extremely reluctant to
have tools, even visual studio,

202
00:13:03.970 --> 00:13:08.710
even visual studio generate SAML
for me. So I plus

203
00:13:08.980 --> 00:13:13.300
I have not come across
a good way of, of

204
00:13:15.550 --> 00:13:20.800
teaching people, how to program
by pulling controls over onto

205
00:13:20.800 --> 00:13:23.470
the surface of a window.
That to me is not

206
00:13:23.470 --> 00:13:27.880
programming. I, I want to
focus on the syntax and

207
00:13:27.910 --> 00:13:31.600
I want to get programmers
accustomed to writing this stuff

208
00:13:31.630 --> 00:13:34.420
for themselves. So when they
eventually go to expression blend,

209
00:13:34.450 --> 00:13:37.270
which they will, I have
no doubt of that. They'll

210
00:13:37.270 --> 00:13:41.890
at least understand what it's,
what it's generating. Also, I,

211
00:13:41.990 --> 00:13:44.710
I do a little consulting.
I, I, unfortunately I do

212
00:13:44.710 --> 00:13:47.890
more consulting these days and
I have needed to in

213
00:13:47.890 --> 00:13:53.110
the past, I, I, I
worked on a WPF kiosk

214
00:13:53.110 --> 00:13:58.330
app that they used, obviously
used expression blend to generate

215
00:13:58.750 --> 00:14:02.410
some, a bunch of animations.
They had this thing where

216
00:14:02.410 --> 00:14:04.360
you had a bunch of
tiles on the screen. And

217
00:14:04.360 --> 00:14:06.730
when you picked one, it
got bigger. The others got

218
00:14:06.730 --> 00:14:10.690
smaller. They moved around a
bit. Somebody had gone into

219
00:14:10.690 --> 00:14:15.130
expression, blend and defined individual
animations for all these things.

220
00:14:15.580 --> 00:14:18.550
And of course you had
to have a dozen different

221
00:14:18.550 --> 00:14:21.310
variations of because there were
12 different tiles. So when

222
00:14:21.310 --> 00:14:24.310
each tile got bigger, the
others got smaller and move

223
00:14:24.310 --> 00:14:28.270
to unique places around the
screen. This was pages and

224
00:14:28.270 --> 00:14:32.500
pages and pages of XAML
animation. All of which I

225
00:14:32.500 --> 00:14:36.670
threw out and replaced with
a custom panel, which to

226
00:14:36.670 --> 00:14:40.030
me was the obvious way
to go. And it took

227
00:14:40.030 --> 00:14:41.740
about a day and a
half of work. They had

228
00:14:41.740 --> 00:14:44.980
slotted about two weeks of
work for me on this.

229
00:14:45.460 --> 00:14:47.020
I was finished in a
day and a half with

230
00:14:47.020 --> 00:14:50.770
a custom panel that, that
applied all the animations in

231
00:14:50.770 --> 00:14:59.090
code that were needed. It's
relying on XAML generation tools

232
00:14:59.090 --> 00:15:02.480
and other tools can be
very dangerous unless you really

233
00:15:02.480 --> 00:15:04.970
know what's happening unless you
know what's happening. And, and

234
00:15:04.970 --> 00:15:07.190
if you have to, you
have to learn how to

235
00:15:07.190 --> 00:15:08.750
write it by hand first,
and you have to know

236
00:15:08.750 --> 00:15:11.470
the right way to do
things. And you, you, you

237
00:15:11.510 --> 00:15:13.460
kind of allude to an
interesting point that I've always,

238
00:15:13.460 --> 00:15:16.010
I've never really got a
good satisfying answer to, which

239
00:15:16.010 --> 00:15:17.840
is the, when do I
use Danila? When do I

240
00:15:17.840 --> 00:15:20.630
use code? Because initially when
this was introduced, there was

241
00:15:20.630 --> 00:15:23.360
almost this sense of, I
should feel guilty or bad

242
00:15:23.360 --> 00:15:25.700
if I somehow have to
drop into code behind it,

243
00:15:25.700 --> 00:15:27.710
like you should be able
to do these amazing things

244
00:15:27.710 --> 00:15:30.530
in SAML. So you just
said a custom panel. Did

245
00:15:30.530 --> 00:15:32.540
you write code behind to
help you, that guys are

246
00:15:32.540 --> 00:15:35.180
custom panels are written entirely
in code there's no XAML

247
00:15:35.180 --> 00:15:40.310
involved with that. Another thing
I've seen is that programmers

248
00:15:40.820 --> 00:15:43.520
no longer who have been
working with WPF for awhile

249
00:15:43.520 --> 00:15:45.650
no longer know how to
create a button in code.

250
00:15:46.760 --> 00:15:49.670
And this to me is
if you've lost that skill,

251
00:15:49.700 --> 00:15:52.670
there's something wrong. So what,
what is the responsibility of

252
00:15:52.670 --> 00:15:54.800
XAML? What is this monster
behind? Cause as we move

253
00:15:54.800 --> 00:15:58.070
towards, I like I use
them a lot and I'm,

254
00:15:58.100 --> 00:16:01.160
I'm, I'm a, in one
sense, I am as AML

255
00:16:01.160 --> 00:16:03.500
fiend, I like doing things
in XAML that nobody else

256
00:16:03.500 --> 00:16:07.070
has done in XAML. I
did a complete clock application

257
00:16:07.070 --> 00:16:10.250
in XAML, which it was
very, very hard. Cause you

258
00:16:10.370 --> 00:16:14.330
XAML can't perform arithmetic and
I needed to perform arithmetic.

259
00:16:14.990 --> 00:16:16.790
And you just did this
as a, as an exercise.

260
00:16:16.850 --> 00:16:18.590
Yeah. It's in, it's in
the, I did a blog

261
00:16:19.010 --> 00:16:21.650
post about it and I
did it in, I put

262
00:16:21.650 --> 00:16:25.190
it in my book and
basically because XAML itself, can't

263
00:16:25.190 --> 00:16:29.390
do arithmetic. I use transform
groups to perform arithmetic. So

264
00:16:29.400 --> 00:16:34.070
I basically set up a
groups of transforms. And when

265
00:16:34.070 --> 00:16:36.110
you set up a group
of transforms, they multiply by

266
00:16:36.110 --> 00:16:40.430
each other and a bunch
of data bindings and, and

267
00:16:40.490 --> 00:16:43.220
the whole thing was done
in XAML that's really a

268
00:16:43.220 --> 00:16:48.950
macho programming thing. Right. You
know, I like the way

269
00:16:49.760 --> 00:16:55.040
I can, XAML mimics the
layout structure of a window.

270
00:16:56.990 --> 00:16:59.090
And I, I try to
do as much in Zambia

271
00:16:59.090 --> 00:17:02.330
as I can with, with
that layout. And with data

272
00:17:02.330 --> 00:17:09.200
bindings, you need code for
event handling, but I, there

273
00:17:09.200 --> 00:17:12.980
are cases where it's just,
it just makes more sense

274
00:17:12.980 --> 00:17:15.620
to define an animation in
code and apply it. And

275
00:17:15.620 --> 00:17:21.290
you it's, you learn which
way to go after years

276
00:17:21.290 --> 00:17:24.200
of experience. And there's no
right, because this is programming

277
00:17:24.200 --> 00:17:26.510
because this is part art,
as well as engineering. There

278
00:17:26.510 --> 00:17:28.910
is no right answer as
well. What would you say

279
00:17:28.910 --> 00:17:32.840
that it's a good idea
to create custom controls in

280
00:17:32.840 --> 00:17:34.520
code and then express them
as animal. That that's the

281
00:17:34.520 --> 00:17:38.900
real power. There is a
very popular technique, both in

282
00:17:38.900 --> 00:17:42.140
WPF and silver light of
a user control, which is

283
00:17:42.800 --> 00:17:46.040
you derive from user control.
And it's basically a layout

284
00:17:46.040 --> 00:17:49.650
of other controls and elements
that define the visual appearance

285
00:17:49.650 --> 00:17:53.340
of the control. I, I,
that is a very useful

286
00:17:53.340 --> 00:18:00.390
technique. On the other hand,
I've done things like if

287
00:18:00.390 --> 00:18:02.580
you want to extend a
scroll bar, if you want

288
00:18:02.580 --> 00:18:04.890
to add a couple more
properties to a scroll bar,

289
00:18:04.920 --> 00:18:07.860
it's good to do that
in code and then define

290
00:18:07.860 --> 00:18:14.160
the visual appearance with a
template again, in XAML anything

291
00:18:14.190 --> 00:18:19.310
that's very visual is proper
to do in XAML. Hi,

292
00:18:19.310 --> 00:18:22.070
this is Scott Hanselman from
another parallel universe, got to

293
00:18:22.070 --> 00:18:23.750
tell you about some of
our things our sponsors are

294
00:18:23.750 --> 00:18:27.740
doing. They make this free
podcast possible. If you're developing

295
00:18:27.740 --> 00:18:30.170
a new line of business
application, you've probably tried the

296
00:18:30.170 --> 00:18:32.570
latest version of server light.
Now you can get even

297
00:18:32.570 --> 00:18:35.360
better results by combining the
functionality and server Lite for

298
00:18:35.360 --> 00:18:37.670
beta, with some of the
richness or the third party

299
00:18:37.670 --> 00:18:41.120
controls from our friends at
Tellerik. They're the first vendors

300
00:18:41.120 --> 00:18:43.460
to offer native support for
the server Lite for beta

301
00:18:43.460 --> 00:18:45.860
and their rad controls. You've
got a new server Lite

302
00:18:45.860 --> 00:18:48.890
for CTP suite of these
controls. They let you tap

303
00:18:48.890 --> 00:18:51.380
into the frameworks, great potential.
You got native right mouse

304
00:18:51.380 --> 00:18:53.660
click and all the new
features, the server line there's

305
00:18:53.660 --> 00:18:57.140
38 controls that give you
all these features. You can

306
00:18:57.140 --> 00:18:59.810
start building those compelling line
of business applications right away.

307
00:19:00.320 --> 00:19:04.400
I encourage you to check
those products out at tellerik.com/silverlight

308
00:19:05.000 --> 00:19:07.910
and, you know, thank Tellerik
for supporting Don and rock

309
00:19:07.910 --> 00:19:11.960
supporting Hansel minutes on their
Facebook fan page at facebook.com/tellerik.

310
00:19:12.380 --> 00:19:16.690
Now back to the show.
So speaking of To, to

311
00:19:16.700 --> 00:19:19.520
things that are proper and
correct, as we move into

312
00:19:19.520 --> 00:19:23.720
windows phone seven, I'm starting
to realize that they really

313
00:19:23.720 --> 00:19:26.960
are Hold us to this
aesthetic before you You'd make

314
00:19:26.960 --> 00:19:30.620
green buttons and purple backgrounds.
And nobody said anything. Well,

315
00:19:30.650 --> 00:19:37.640
there is a good reason
for imposing a particular aesthetic

316
00:19:37.640 --> 00:19:41.660
on the phone. And it
is, this phones are very

317
00:19:41.660 --> 00:19:44.660
sensitive to battery life. You
want to extend that battery

318
00:19:44.660 --> 00:19:48.410
as much as possible. These,
these phones, the, the are

319
00:19:48.410 --> 00:19:53.870
using Oh, led technology, organic
LEDs. I don't think they're

320
00:19:53.870 --> 00:19:57.830
actually made from living things.
I don't know, but one

321
00:19:57.830 --> 00:20:00.710
of the things about, Oh,
Oh, LEDs is that they

322
00:20:00.710 --> 00:20:04.460
have longer. They, they don't
use as much power as

323
00:20:04.460 --> 00:20:07.550
conventional LEDs, but only if
the screen is very dark.

324
00:20:08.090 --> 00:20:10.550
If the screen is very
light, they will use more

325
00:20:10.550 --> 00:20:12.800
power than a conventional led.
If the screen is very

326
00:20:12.800 --> 00:20:16.490
dark, they will use a
lot less power. So this

327
00:20:17.360 --> 00:20:21.560
is what is, what is
the general rule when our

328
00:20:21.560 --> 00:20:25.250
aesthetics follows from our technology
limitations. But this, this is

329
00:20:25.250 --> 00:20:29.300
why the aesthetic is, is
on the phone is very

330
00:20:29.300 --> 00:20:33.080
dark backgrounds with this light
spindly text. And I think

331
00:20:33.080 --> 00:20:37.550
that the, this Metro thing
that they've created, it also

332
00:20:38.630 --> 00:20:42.860
takes advantage of, We realized
that there were things off

333
00:20:42.860 --> 00:20:45.200
screen, and this might be
a little bit of, You

334
00:20:45.200 --> 00:20:48.910
know, Joe yuck of said
that users Will never scroll.

335
00:20:49.510 --> 00:20:51.190
And I think what was
underlying that because y'all come

336
00:20:51.200 --> 00:20:53.260
in as one, a usability
engineer was that you just

337
00:20:53.260 --> 00:20:56.290
cannot conceive of objects off
screen, right? Just like babies

338
00:20:56.500 --> 00:20:58.510
for a very long time.
Never understand that there are

339
00:20:58.510 --> 00:21:00.520
objects when you take it
out of their sight of

340
00:21:00.520 --> 00:21:04.330
vision, but now fast forward,
the entire world has matured.

341
00:21:05.200 --> 00:21:07.270
They're saying that the phone
is a window on a

342
00:21:07.270 --> 00:21:11.400
larger Panorama. There's an interesting
analogy. When we're in motion,

343
00:21:11.400 --> 00:21:15.750
pictures were first created. People
thought that audiences wouldn't wouldn't

344
00:21:15.750 --> 00:21:18.820
follow cuts. They wouldn't be
able to understand when, when

345
00:21:18.840 --> 00:21:21.720
the movie cut between two
different scenes that they were

346
00:21:21.720 --> 00:21:25.920
actually happening simultaneously. And of
course, audiences pick this up

347
00:21:25.920 --> 00:21:33.360
right away. So yeah, the,
the, exactly that, that the,

348
00:21:34.140 --> 00:21:37.110
they are, they do have
a layout on the phone

349
00:21:37.410 --> 00:21:41.880
that implies horizontal scrolling because
things go off to, off

350
00:21:41.880 --> 00:21:48.090
to the side. And I
it's, it's very interesting partially

351
00:21:48.090 --> 00:21:51.990
because it's the whole look
of windows phone is so

352
00:21:51.990 --> 00:21:55.020
unlike any other smartphone in
the market, it's really gonna

353
00:21:55.320 --> 00:21:59.220
distinguish itself in, in, in
that aspect as well. What

354
00:21:59.220 --> 00:22:01.080
do you think about the
decision for them to make

355
00:22:01.080 --> 00:22:04.710
it only managed code? I
think that's an excellent decision.

356
00:22:04.830 --> 00:22:11.730
I am very much in
favor of managed code. I,

357
00:22:12.300 --> 00:22:15.090
that may sound odd from
somebody who started off in

358
00:22:15.090 --> 00:22:17.280
assembly. This is the part
where I say you have

359
00:22:17.280 --> 00:22:22.380
all people. Me of all
people I, I started off

360
00:22:22.410 --> 00:22:25.680
with, well, I really started
off with four Tran, but

361
00:22:25.680 --> 00:22:28.440
I spent a lot of
time with assembly language on

362
00:22:28.440 --> 00:22:31.530
the ADHD and the Z
80 and the 80, 86.

363
00:22:31.800 --> 00:22:35.070
I spent a lot of
time with C. I went

364
00:22:35.070 --> 00:22:37.410
on because of my assembly
language background. I was very

365
00:22:37.410 --> 00:22:43.920
good with pointers and C,
but I have, even though

366
00:22:43.920 --> 00:22:48.000
I was a little reluctant
skeptical, I have come around

367
00:22:48.000 --> 00:22:50.850
to see the wisdom of
managed code. It just, there

368
00:22:50.850 --> 00:22:54.030
are certain types of errors,
certain types of common bugs

369
00:22:54.420 --> 00:22:57.870
that are just impossible and
managed code. And, and to

370
00:22:57.870 --> 00:23:00.990
me, this, this is the
most important aspect of it.

371
00:23:01.770 --> 00:23:05.190
It's the programs are a
lot easier to get running

372
00:23:06.720 --> 00:23:09.570
and a lot easier to
debug. And they're just not

373
00:23:09.570 --> 00:23:13.380
as buggy as, as traditional
programs. So this move to

374
00:23:13.380 --> 00:23:16.950
manage code is something that
I am very much in

375
00:23:16.950 --> 00:23:20.220
favor of. Do you think
that when, when people say,

376
00:23:20.220 --> 00:23:22.350
well, I'm frustrated that they
won't let me code in

377
00:23:22.350 --> 00:23:24.270
C plus plus or C
on this phone. That there's

378
00:23:24.510 --> 00:23:27.210
is that rooted in fear,
and I'm assuming fear that

379
00:23:27.210 --> 00:23:31.260
I will be unable to
do so Partially. I heard

380
00:23:31.260 --> 00:23:34.530
a lot of this in
the early days of.net, that

381
00:23:35.010 --> 00:23:38.640
there were certain things people
wanted to do partially with

382
00:23:38.640 --> 00:23:43.080
string handling, because strings are
immutable in, in, in.net and,

383
00:23:43.110 --> 00:23:47.630
and some certain kinds string
handling become very clumsy. There

384
00:23:47.630 --> 00:23:52.100
is a lot of reluctance
among the game, developers, gaming

385
00:23:52.100 --> 00:23:55.850
developers to move, to manage
code because, and they have

386
00:23:55.850 --> 00:23:59.330
more of an argument because
they're accustomed to getting very

387
00:23:59.330 --> 00:24:02.990
low down next to the
hardware and they are not

388
00:24:02.990 --> 00:24:06.980
accustomed to garbage collection. And
garbage collection is a serious

389
00:24:06.980 --> 00:24:13.070
problem in, in games, because
if you are, you're going

390
00:24:13.070 --> 00:24:14.960
at a frame rate of
30 frames per second, if

391
00:24:14.960 --> 00:24:18.380
you are allocating from the
local heap 30 times a

392
00:24:18.380 --> 00:24:20.930
second, there's going to be
a garbage collection. And when

393
00:24:20.930 --> 00:24:23.180
there's a garbage collection, your
game's going to stutter and

394
00:24:23.180 --> 00:24:26.450
that's not a good thing.
So a lot of the

395
00:24:26.450 --> 00:24:30.110
move to manage code in,
in games has been an

396
00:24:30.110 --> 00:24:34.220
awareness of the garbage collection
problem and avoid a lot

397
00:24:34.250 --> 00:24:42.320
of the types of, of
objects that you would normally

398
00:24:42.680 --> 00:24:46.520
be allocating 30 times a
second, during your name loop

399
00:24:46.970 --> 00:24:49.520
in X and a, a
lot of these are structures

400
00:24:49.520 --> 00:24:51.860
rather than classes. So they
don't get allocated from the

401
00:24:51.860 --> 00:24:54.830
local heat, but you still
have to be aware of,

402
00:24:54.850 --> 00:24:58.190
of this problem. And you
just have to avoid local

403
00:24:58.190 --> 00:25:03.680
heap allocations on and, and
that'll help that'll that'll solve

404
00:25:03.680 --> 00:25:07.760
the garbage collection problem. And
couldn't you pre allocate. That's

405
00:25:07.760 --> 00:25:10.280
another, that's another technique. You
can have a cache of

406
00:25:10.280 --> 00:25:13.640
objects that are pre ready
for you and reuse them.

407
00:25:13.640 --> 00:25:16.850
Yes, yes. There are, there
are numerous techniques to deal

408
00:25:16.850 --> 00:25:18.920
with this problem, but it's,
I can understand why it'd

409
00:25:18.920 --> 00:25:21.800
be afraid. Yes. It's something
that, that game developers are,

410
00:25:21.800 --> 00:25:25.550
are, are nervous about and,
and, and rightfully so. They're

411
00:25:25.550 --> 00:25:28.700
going to have to learn
some new techniques. So if

412
00:25:28.700 --> 00:25:31.130
I want to learn how
to program windows phone, then

413
00:25:31.390 --> 00:25:33.110
I'm going to buy the
book. I'm going to buy

414
00:25:33.110 --> 00:25:35.450
the pencil book. Thank you,
which well, you don't have

415
00:25:35.450 --> 00:25:39.040
to buy it. Actually, this
book is going to the

416
00:25:39.080 --> 00:25:41.750
completed book will be available
later this year as a

417
00:25:41.750 --> 00:25:45.860
free download and the first
hundred and 50 pages that

418
00:25:45.860 --> 00:25:49.160
I've written are available now
as a free download. If

419
00:25:49.160 --> 00:25:52.340
you go to my website,
Charles pencil.com on homepage, you'll

420
00:25:52.340 --> 00:25:56.480
have links. There are links
provided. There's also a link

421
00:25:56.600 --> 00:26:01.010
to the PDF file on
the, the portal to the

422
00:26:01.010 --> 00:26:06.740
windows phone developer page, which
is developer that windows, phone.com

423
00:26:07.040 --> 00:26:10.640
very important website to know
about. So it's free, it's

424
00:26:10.640 --> 00:26:13.610
free. It's absolutely free. Now
it's just a book or

425
00:26:14.030 --> 00:26:20.080
a pamphlet. It's a book
excerpt that I finished in

426
00:26:20.080 --> 00:26:23.080
time for mix is 150
pages. That's an extra. So

427
00:26:23.080 --> 00:26:24.670
we're looking at a hundred.
This is a real book.

428
00:26:24.700 --> 00:26:26.620
It's a full size. It's
going to be well, the

429
00:26:26.620 --> 00:26:30.790
contract, the contract says a
big spine, but virtually speaking,

430
00:26:30.820 --> 00:26:36.220
because it's a download a
big giant PDF or XPS

431
00:26:36.220 --> 00:26:41.110
file. The contract calls for
400 pages. I frankly, I

432
00:26:41.110 --> 00:26:45.810
think it's going to be
the original contract for programming

433
00:26:45.810 --> 00:26:48.990
windows call for a book
of about 400 pages. And

434
00:26:48.990 --> 00:26:53.100
the first edition was more
like 800. We'll see, we'll

435
00:26:53.100 --> 00:26:58.920
see. I, I love writing
books. I love par partially.

436
00:26:58.920 --> 00:27:01.620
It's it's the, the, the,
the process of building the

437
00:27:01.620 --> 00:27:05.720
book from, from nothing from
just words, but it's, it's

438
00:27:05.730 --> 00:27:10.050
the challenges of organizing the
material into a, a narrative

439
00:27:11.220 --> 00:27:14.040
that the reader can follow
from beginning to end. Unfortunately,

440
00:27:15.780 --> 00:27:17.850
although in the past, people
used to read books like

441
00:27:17.850 --> 00:27:22.170
this. A lot of people
tell me about their experience

442
00:27:22.170 --> 00:27:26.640
of reading programming windows from
cover to cover. Unfortunately, people

443
00:27:26.640 --> 00:27:30.390
don't do that much anymore,
but it's still, I'm not

444
00:27:30.390 --> 00:27:33.690
sure I can write a
book otherwise. And for, for

445
00:27:33.690 --> 00:27:37.830
a reader who jumps into
it, just to learn one

446
00:27:37.830 --> 00:27:40.830
little topic, I don't know.
Do you, do you struggle

447
00:27:40.830 --> 00:27:43.620
with the concept? I mean,
writing a book is as

448
00:27:43.620 --> 00:27:45.780
much about you putting pen
to paper, as it is

449
00:27:45.780 --> 00:27:49.950
about effectively absorb getting someone
to absorb that information into

450
00:27:49.950 --> 00:27:53.130
the brain. And because of
the way time operates, they

451
00:27:53.130 --> 00:27:54.780
have to do it in
a fairly linear fashion. And

452
00:27:54.780 --> 00:27:57.510
they may be flipping around
in the book, but by

453
00:27:57.510 --> 00:27:59.280
flipping around the book and
reading chapters in a different

454
00:27:59.280 --> 00:28:03.630
order, they're simply reading a
different book. Yes, there is.

455
00:28:05.280 --> 00:28:10.830
I take a lot of
time and, and thought to

456
00:28:10.860 --> 00:28:15.420
put my chapters in the
right order. Each chapter builds

457
00:28:15.450 --> 00:28:19.440
on the chapter previously, I
try to pace the introduction

458
00:28:19.440 --> 00:28:23.400
of materials. So it doesn't
overwhelm the reader. You also

459
00:28:23.400 --> 00:28:27.060
want to keep up the
reader's interest, but there is

460
00:28:29.310 --> 00:28:32.460
in learning programming. There is
a point at which you

461
00:28:32.460 --> 00:28:36.570
need to start, and the
knowledge is accumulated over, over,

462
00:28:36.570 --> 00:28:40.470
over a long period of
time. And I like to

463
00:28:40.470 --> 00:28:46.440
mimic that process. It's, it's
a little odd doing it

464
00:28:46.650 --> 00:28:49.980
these days, because I am
well aware that a lot

465
00:28:49.980 --> 00:28:55.620
of programmers simply don't learn
like that anymore. Partially it's

466
00:28:55.620 --> 00:28:59.820
because they don't have time.
There are a lot of,

467
00:29:00.780 --> 00:29:03.570
lots of new technologies you
have to keep up with.

468
00:29:04.140 --> 00:29:07.800
And it's, it's not like
back in the early nineties

469
00:29:07.800 --> 00:29:10.890
where every ms. Dos developer
realized I am going to

470
00:29:10.890 --> 00:29:13.050
need to learn windows. And
this is going to be

471
00:29:13.050 --> 00:29:15.810
something I'll be using for
the next 10 or 20

472
00:29:15.810 --> 00:29:19.080
years and enhance, I can
afford spending the time to

473
00:29:19.080 --> 00:29:22.920
learn it properly in a,
in a tutorial manner. That's

474
00:29:22.920 --> 00:29:26.100
a really interesting point because
you're saying that people may

475
00:29:26.100 --> 00:29:29.190
be less interested in investing
deeply in a technology if

476
00:29:29.190 --> 00:29:32.430
they can't trust that it's
there tomorrow. Exactly. And the

477
00:29:32.430 --> 00:29:36.660
technologies change so quickly and
there's so many of them

478
00:29:36.660 --> 00:29:39.930
and, and our development tools
have made it very easy.

479
00:29:39.930 --> 00:29:42.730
If you, if you boot
up visual studio, you can

480
00:29:42.970 --> 00:29:45.220
have a silver light or
an exit and a program

481
00:29:45.220 --> 00:29:48.370
running doesn't do much, but
you can run it just

482
00:29:48.370 --> 00:29:52.800
by pressing a five. So
how are you going to,

483
00:29:53.160 --> 00:29:54.540
how are you going to
write this book? I haven't

484
00:29:54.540 --> 00:29:57.540
read the excerpt yet, but
you have to assume a

485
00:29:57.540 --> 00:30:01.310
couple of things. You have
to assume that reader a

486
00:30:01.320 --> 00:30:04.860
as a programmer professionals using
several I for years, and

487
00:30:04.860 --> 00:30:07.080
that reader B is a
19 year old. Who's never

488
00:30:07.080 --> 00:30:12.120
programmed his life. I, I,
I assume that the reader

489
00:30:12.120 --> 00:30:14.820
is a programmer. I have
to do that. I assume

490
00:30:14.820 --> 00:30:19.260
that the reader knows.net. And
C-sharp, if not, I have

491
00:30:19.260 --> 00:30:23.130
a online book on my
website called if this is

492
00:30:23.130 --> 00:30:26.610
a rather shorter book, it's
called.net book zero. And it's,

493
00:30:26.620 --> 00:30:29.820
it's an introduction to.net and
C sharp for the C

494
00:30:29.820 --> 00:30:35.310
or C plus plus programmer.
Beyond that, I can't do

495
00:30:35.310 --> 00:30:41.040
anything. I, I start off
assuming the book is going

496
00:30:41.040 --> 00:30:44.070
to be both about Silverlight
and which are the two

497
00:30:44.490 --> 00:30:49.320
programming interfaces on windows phone.
And I start off with

498
00:30:49.920 --> 00:30:51.720
I'm covering both of them.
I start off assuming that

499
00:30:51.720 --> 00:30:53.720
the reader doesn't know either
one. That's what I wanted

500
00:30:53.720 --> 00:30:54.750
to know. So you were
assuming that they don't know

501
00:30:54.750 --> 00:30:58.020
XAML they don't know WPF.
If your readers haven't been

502
00:30:58.020 --> 00:31:00.090
here at mix, they might
have not have heard the

503
00:31:00.090 --> 00:31:03.990
exciting news about that windows
phone will support both Silverlight

504
00:31:04.080 --> 00:31:07.980
and SNA. So a silver
light will be used mostly

505
00:31:07.980 --> 00:31:12.690
for what we think of
as applications and utilities, calculators,

506
00:31:12.690 --> 00:31:16.260
and, and anything with a
list box will be silver

507
00:31:16.260 --> 00:31:19.290
light. Whereas Aksana is, is
for games, two D and

508
00:31:19.290 --> 00:31:21.450
three D games. And you're
going to cover both of

509
00:31:21.450 --> 00:31:22.950
them are going to cover
both of them. So it's

510
00:31:22.950 --> 00:31:27.090
two books. It's we had
a discussion about this, whether

511
00:31:27.090 --> 00:31:29.310
it should really be two
books rather than one book,

512
00:31:30.420 --> 00:31:33.240
because there will be programmers.
There will be programmers who

513
00:31:33.240 --> 00:31:35.820
will never learn X and
a for the phone. And

514
00:31:35.820 --> 00:31:37.650
they'll be programmers will never
learn civil light for the

515
00:31:37.650 --> 00:31:44.010
phone. I like to see
programmers learn both. I think

516
00:31:44.040 --> 00:31:47.760
that if you're going to
be a good windows phone

517
00:31:47.760 --> 00:31:51.930
programmer, you should, you should
know both. You should know

518
00:31:51.930 --> 00:31:54.060
when to use Silverlight. You
should know when to use

519
00:31:54.450 --> 00:31:58.590
a, you can use some
of the framework from <inaudible>

520
00:31:58.590 --> 00:32:02.760
and your Silverlight app and
vice versa, visually all your,

521
00:32:03.120 --> 00:32:06.390
the two, the two output
paradigms are very different. So

522
00:32:06.390 --> 00:32:08.250
either your app is a
Silverlight app or an X

523
00:32:08.250 --> 00:32:11.760
and a app. You can't
mix them visually at this

524
00:32:11.760 --> 00:32:15.600
time that may come sometime
in the future, but they

525
00:32:15.600 --> 00:32:20.580
are very two different paradigms
and they are different enough

526
00:32:20.580 --> 00:32:23.940
so that you can jump
back and forth between them

527
00:32:24.180 --> 00:32:28.830
without getting confused. Really? Yes.
And, and that they, they

528
00:32:28.950 --> 00:32:31.470
they're, they're both in.net. They
share core libraries. If I'm

529
00:32:31.470 --> 00:32:33.460
going to open a file
and run around. And I

530
00:32:33.460 --> 00:32:36.780
got, I don't know, I
don't wanna run an isolated

531
00:32:36.780 --> 00:32:40.130
storage and, and read data.
I'm using same API. Next

532
00:32:40.130 --> 00:32:42.290
to know, if I want
to talk to the microphone,

533
00:32:42.800 --> 00:32:44.360
I have to get the
raw feed from the microphone.

534
00:32:45.010 --> 00:32:49.180
Yes, there are, there is
an X and a classes

535
00:32:49.180 --> 00:32:51.220
to do that. And you
can access those from your

536
00:32:51.220 --> 00:32:55.090
silver light app. So w
I I'd have to plead

537
00:32:55.090 --> 00:32:56.920
ignorance on X and a
cause I know a lot

538
00:32:56.920 --> 00:32:58.210
of people who've done it.
I have friends who have

539
00:32:58.210 --> 00:33:00.070
put out X and eight
games, but I've never really

540
00:33:00.070 --> 00:33:01.270
sat down and looked at
that. Can you give me

541
00:33:01.270 --> 00:33:03.070
a brief sense of what,
what is the next day

542
00:33:03.490 --> 00:33:05.230
application look like? How do
I get things on the

543
00:33:05.230 --> 00:33:09.520
screen? Okay. In, in an
<inaudible> app, you're dealing almost

544
00:33:09.520 --> 00:33:11.920
IX. Let's, let's stick to
two D at the moment.

545
00:33:12.760 --> 00:33:17.830
And the next app you're
dealing entirely with bitmaps even,

546
00:33:17.830 --> 00:33:21.010
and they're called textures. Even
your, your text is a

547
00:33:21.010 --> 00:33:24.760
bit map. You go back
to bitmap style text, and

548
00:33:25.210 --> 00:33:31.330
you have a method that
you override called draw. And

549
00:33:31.330 --> 00:33:35.830
during this method, this draw
method is called 30 times

550
00:33:35.830 --> 00:33:38.830
a second, which is the
frame rate on the windows

551
00:33:38.830 --> 00:33:40.330
phone, on a, on a
PC. It would be called

552
00:33:40.330 --> 00:33:43.330
60 times a second or
70 times a second. And

553
00:33:43.360 --> 00:33:46.870
it's, you basically draw your
entire screen at that point,

554
00:33:47.140 --> 00:33:51.460
all your bitmaps right out
to the screen to prepare

555
00:33:51.460 --> 00:33:55.360
for that draw method. You
have another method called update

556
00:33:55.450 --> 00:33:58.540
where you perform all the
calculations. These two methods are

557
00:33:58.540 --> 00:34:03.280
separated because of some timing
issues. If you can't quite

558
00:34:03.310 --> 00:34:07.480
keep up with the frame
rate, but you're, you're basically

559
00:34:07.480 --> 00:34:10.060
on a frame by frame
basis. You're, you're doing all

560
00:34:10.060 --> 00:34:14.590
your calculations for all the,
the locations of all the

561
00:34:14.590 --> 00:34:18.670
little sprites on the screen.
You're also polling for input

562
00:34:19.270 --> 00:34:24.370
during the, the, the update
method. So it's very much

563
00:34:25.000 --> 00:34:29.230
throwing basic bitmaps and pulling
for input. Whereas in, in

564
00:34:29.230 --> 00:34:34.060
Silverlight you all your input
comes through events and you

565
00:34:34.060 --> 00:34:39.520
are even though somewhere in
the composition level, things are

566
00:34:39.520 --> 00:34:43.660
being redrawn at this screen
refresh rate. You really just

567
00:34:43.660 --> 00:34:45.940
put them there once and
they stay there. It's a

568
00:34:45.940 --> 00:34:49.960
retain mode graphics system. So
if I'm spitting out this,

569
00:34:50.080 --> 00:34:52.450
this entire screen, and I
mean, my, my knowledge of

570
00:34:52.450 --> 00:34:56.710
windows graphics, programming actually ended
GDI data. So both, both

571
00:34:56.710 --> 00:34:59.770
Silverlight necks and they are
very different from GDI. Okay.

572
00:34:59.770 --> 00:35:01.530
Well, see, I was going
to ask there that you're

573
00:35:01.540 --> 00:35:04.000
saying, and I'm thinking to
myself as an old school

574
00:35:04.000 --> 00:35:05.770
program, like it, my devil
buffering, do I just, this

575
00:35:05.880 --> 00:35:07.660
it does it handle it
for me? There is a

576
00:35:07.690 --> 00:35:11.410
<inaudible> is, is double buffered.
Yes. Yes. You are writing

577
00:35:11.410 --> 00:35:13.630
to what's called a backup
buffer. And then that is

578
00:35:13.960 --> 00:35:17.260
updated to the screen, the
actual screen It's very much

579
00:35:17.290 --> 00:35:21.070
a, a raw, you have
complete control of what's going

580
00:35:21.070 --> 00:35:25.840
on. Yes. Which is what
game programmers like. Okay. So,

581
00:35:25.870 --> 00:35:27.640
you know, for the person
who wishes that they had

582
00:35:27.640 --> 00:35:29.650
C plus plus, maybe they
really just need to check

583
00:35:29.650 --> 00:35:35.230
out. Excellent. Yeah. Yeah. I,
I, I have enjoyed XMA

584
00:35:35.230 --> 00:35:40.590
programming precisely because I I've,
I've feel very, very low

585
00:35:40.590 --> 00:35:47.790
in, in, in the technological
hierarchy and that the book

586
00:35:47.820 --> 00:35:50.760
is going to include not
just graphics and Silverlight and

587
00:35:50.760 --> 00:35:52.290
actually, but as you can
also include some of the

588
00:35:52.290 --> 00:35:54.180
more services based things are
going to be able to

589
00:35:54.180 --> 00:35:57.720
talk to him. There's a
lot, there's a real, there's

590
00:35:57.720 --> 00:36:03.150
a real, a web service
orientation to the windows phone

591
00:36:03.210 --> 00:36:09.520
and including Xbox live. I
am currently discussing with, with

592
00:36:09.540 --> 00:36:13.170
my publisher, who is Microsoft
press, about stuff that I

593
00:36:13.170 --> 00:36:16.620
won't put in a book
to allow other authors to

594
00:36:16.620 --> 00:36:21.630
give better treatment to it.
And I am considering I

595
00:36:21.630 --> 00:36:24.150
have not yet made the
decision, but I am considering

596
00:36:24.660 --> 00:36:28.830
that maybe the programs in
my book will be very

597
00:36:28.830 --> 00:36:34.440
self contained and will not
be using web services. Aside

598
00:36:34.440 --> 00:36:38.960
from there's a location service
that I just ubiquitous services,

599
00:36:39.010 --> 00:36:41.730
intrinsic services that are part
of the phone, right? Well,

600
00:36:41.950 --> 00:36:44.970
location is in the, is
a, is considered to be

601
00:36:44.970 --> 00:36:47.550
a web service, but it
is, it is there's there's

602
00:36:47.550 --> 00:36:52.110
actual classes for, for location.
And it does speak over

603
00:36:52.110 --> 00:36:54.780
the wire in some way.
Yeah. The location is interesting.

604
00:36:54.780 --> 00:36:59.520
It's it's called a GPS,
which I believe means assisted

605
00:36:59.520 --> 00:37:03.930
GPS. And the, the phone
is a GPS device. So

606
00:37:03.930 --> 00:37:07.800
it can get GPS information,
but GPS is often slow.

607
00:37:08.610 --> 00:37:12.240
It takes a while to
get the information. It's no

608
00:37:12.240 --> 00:37:15.990
good endorse. So they use
other techniques to help out

609
00:37:15.990 --> 00:37:20.460
with GPS, including wifi. They
try to figure out location

610
00:37:20.460 --> 00:37:23.700
from wifi. And I try
to figure out location from

611
00:37:23.730 --> 00:37:27.900
a cell towers. And you
can choose whether you want

612
00:37:27.900 --> 00:37:31.830
fast location. That's not so
accurate or are slow location.

613
00:37:31.830 --> 00:37:35.400
That's very accurate. And the
GPS is considered slow but

614
00:37:35.400 --> 00:37:38.250
accurate, but definitely it seems
like an important topic to

615
00:37:38.250 --> 00:37:44.340
cover. Yes. Programming windows, phone
seven series network edition is

616
00:37:44.340 --> 00:37:49.140
almost a whole book in
itself. Absolutely cloud and data.

617
00:37:49.140 --> 00:37:52.680
And I can see your,
I can see your challenge.

618
00:37:53.520 --> 00:37:55.680
Well, this has been fantastic,
sir. I really appreciate you

619
00:37:55.860 --> 00:37:58.230
sitting down with me today.
Oh, thank you very much.

620
00:37:58.230 --> 00:38:00.120
I enjoyed it. So you
can make sure that you

621
00:38:00.120 --> 00:38:04.050
check out Charles, his blog@charlespencil.com.
You can download this book

622
00:38:04.530 --> 00:38:06.120
and you can also go
and by code and some

623
00:38:06.120 --> 00:38:08.130
of the other great books
of these bots, as well

624
00:38:08.130 --> 00:38:13.380
as checking out the windows
phone developer portal@developer.windows, phone.com. This

625
00:38:13.380 --> 00:38:16.080
has been another episode of
Hansel minutes, and I'll see

626
00:38:16.080 --> 00:38:27.020
you again next week. <inaudible>.

