WEBVTT FILE

1
00:00:00.540 --> 00:00:03.660
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.660 --> 00:00:06.960
they make the show possible.
Today's show is sponsored by

3
00:00:06.960 --> 00:00:11.250
Tellerik create compelling app experiences
across any screen with the

4
00:00:11.250 --> 00:00:16.110
Tellerik platform Telerx end to
end platform. Uniquely combines industry

5
00:00:16.110 --> 00:00:19.800
leading UI tools with cloud
services to simplify the entire

6
00:00:19.800 --> 00:00:24.300
app development cycle Tellerik offers
everything.net developers need to build

7
00:00:24.300 --> 00:00:33.720
quality apps faster. Try it
free at tellerik.com/platform that's tellerik.com/platform.

8
00:00:39.470 --> 00:00:52.910
<inaudible> From hanselminutes.com. It's Hansel
minutes, a weekly discussion with

9
00:00:52.910 --> 00:00:57.980
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

10
00:00:57.980 --> 00:01:01.640
show number four 97. In
this episode, Scott talks with

11
00:01:01.640 --> 00:01:10.640
Kenton Barta about his startup
sandstorm.io. Hi, this is Scott.

12
00:01:10.880 --> 00:01:13.250
Well, this is another episode
of Hansel minutes today. I'm

13
00:01:13.250 --> 00:01:15.890
talking with Kenton Varda. Who's
a co founder and lead

14
00:01:15.890 --> 00:01:22.010
developer on sandstorm@sandstorm.io. How are
you? Great, thanks for chatting

15
00:01:22.010 --> 00:01:25.400
with me today. When I
saw sandstorm for the first

16
00:01:25.400 --> 00:01:28.190
time I went through the
demo of the Treme area

17
00:01:28.190 --> 00:01:31.520
online and it was kind
of so fast and so

18
00:01:31.520 --> 00:01:35.420
easy. I just assumed that
it was somehow faked. Could

19
00:01:35.420 --> 00:01:39.020
you, can you explain what
it is and why? It's

20
00:01:39.020 --> 00:01:42.860
interesting. Yeah, so sandstorm is
a radically easier way to

21
00:01:42.860 --> 00:01:48.440
run a personal server or
a private cloud. So what

22
00:01:48.440 --> 00:01:53.570
you saw there is you
started a fresh sandstorm server

23
00:01:53.570 --> 00:01:55.970
and you installed apps into
it, much like you would

24
00:01:55.970 --> 00:01:58.430
install apps on your phone,
through an app store, all

25
00:01:58.430 --> 00:02:01.370
through point and click and
they just start up and

26
00:02:01.370 --> 00:02:05.510
they run just like that.
And the goal is that

27
00:02:06.590 --> 00:02:11.000
individual people should be able
to run their own servers

28
00:02:11.030 --> 00:02:15.800
rather than going to, rather
than having the developers of

29
00:02:15.800 --> 00:02:18.110
the web apps that you're
using, running the servers for

30
00:02:18.110 --> 00:02:22.010
you both to give you
a better privacy, but also

31
00:02:22.010 --> 00:02:26.210
to make it much easier
to make it easier for

32
00:02:26.210 --> 00:02:28.970
developers to write apps because
they no longer have to

33
00:02:28.970 --> 00:02:31.610
run those servers. And so
like there's a lot of

34
00:02:32.060 --> 00:02:35.510
open source apps out there
that people can't really use

35
00:02:35.510 --> 00:02:38.060
today because you have to
run your own server to

36
00:02:38.060 --> 00:02:39.770
use them. And no one
really wants to spend the

37
00:02:39.770 --> 00:02:44.300
time do that. This makes
those accessible to everybody. Yeah.

38
00:02:44.300 --> 00:02:46.850
It seems like if you
tell people what you just

39
00:02:46.850 --> 00:02:49.670
said, tight techies will go,
well, no, it's not that

40
00:02:49.670 --> 00:02:52.280
big of a deal. He's
just like register a domain,

41
00:02:52.580 --> 00:02:56.660
but normal human beings may
very well have a need

42
00:02:56.660 --> 00:02:59.440
for an application. Like, think
about how complicated is just

43
00:02:59.440 --> 00:03:03.070
to start your own blog
and companies like medium and

44
00:03:03.070 --> 00:03:06.610
Facebook exists for that very
reason that it was really,

45
00:03:06.610 --> 00:03:08.890
really hard to register a
domain, hook it up to

46
00:03:08.890 --> 00:03:12.100
a web server and put
an app there. And here

47
00:03:12.100 --> 00:03:17.540
we are pouring our words
into medium. Yep. Yeah. And,

48
00:03:17.540 --> 00:03:19.660
and you should, you should
be able to set that

49
00:03:19.660 --> 00:03:23.140
up for yourself. So is
this not just making developers

50
00:03:23.140 --> 00:03:25.750
lives easier, but you anticipate
that like normal humans should

51
00:03:25.750 --> 00:03:27.040
be able to think about
the web, like an app

52
00:03:27.040 --> 00:03:31.050
store, but an open source
app store. Yes. So With

53
00:03:31.050 --> 00:03:33.780
sandstorm and it's important to
make this very clear, the

54
00:03:33.780 --> 00:03:36.270
developers do not run the
server. It's the end user

55
00:03:36.270 --> 00:03:38.970
that does. So you are
as a developer shipping an

56
00:03:38.970 --> 00:03:42.000
app to them, for them
to run. So you don't

57
00:03:42.000 --> 00:03:45.990
have to carry a pager
or anything. But So it

58
00:03:45.990 --> 00:03:50.820
is a private cloud. It's
fun to say cloud I'm,

59
00:03:50.830 --> 00:03:52.530
you know, I'm old and
some people love it. Some

60
00:03:52.530 --> 00:03:54.510
people hate it. Yeah. I'm
old enough to remember when

61
00:03:54.510 --> 00:03:56.610
the cloud was just the
Linux box in your server

62
00:03:56.700 --> 00:03:59.670
and you're in your closet
rather. Yep. So like, for

63
00:03:59.670 --> 00:04:02.640
example, I'll just use my
Synology as an example, but

64
00:04:02.640 --> 00:04:05.220
my Synology is a little
Linux machine. That's literally sitting

65
00:04:05.220 --> 00:04:09.090
in my, in my, in
my closet. I've always been

66
00:04:09.090 --> 00:04:11.460
able to SSH into it,
but I have to admit

67
00:04:11.460 --> 00:04:13.920
that I haven't really put
apps on it a lot

68
00:04:15.240 --> 00:04:17.340
until they had an app
store. I think there are

69
00:04:17.340 --> 00:04:19.650
probably people who do have
servers or can get a

70
00:04:19.650 --> 00:04:21.750
Linux server, but that's, as
far as they can go,

71
00:04:22.290 --> 00:04:24.270
do I have to go
and SSH into machines to

72
00:04:24.270 --> 00:04:25.980
do this? How much technical
stuff do I have to

73
00:04:25.980 --> 00:04:29.220
know in order to, to
run sandstorm? Yeah. So the,

74
00:04:29.220 --> 00:04:32.400
the goal is you never
know Use SSH. You never

75
00:04:32.400 --> 00:04:36.750
use text editors when you're
using sandstorm. Yeah. I, I

76
00:04:36.780 --> 00:04:40.470
like you, you know, I've
had the ability to run

77
00:04:40.470 --> 00:04:43.650
my own server for the
past 15 years. I've had

78
00:04:43.650 --> 00:04:45.840
the knowhow, but I haven't
really done it because it's

79
00:04:45.840 --> 00:04:53.280
just a lot of work.
So To install sandstorm, if

80
00:04:53.280 --> 00:04:55.650
you want to install it
on your own physical machine,

81
00:04:55.680 --> 00:04:57.660
there is still a step
where you have to run

82
00:04:57.660 --> 00:05:02.400
something in the shell. Sure.
But we're working on making

83
00:05:02.400 --> 00:05:06.210
that even easier. And you
also have the option of

84
00:05:06.480 --> 00:05:11.040
using a managed hosting service
that, you know, hosts starts

85
00:05:11.040 --> 00:05:14.670
up sandstorm for you. And
for those who don't want

86
00:05:14.670 --> 00:05:17.160
to take that one step
in the shell, but once,

87
00:05:17.400 --> 00:05:19.930
once you've got it installed,
then everything else is pointed

88
00:05:20.370 --> 00:05:23.310
And you never think about
it again. Yeah. Pretty much

89
00:05:23.310 --> 00:05:27.240
it self updates, Everything. So
then people who are listening

90
00:05:27.240 --> 00:05:30.000
might say, well, wait a
second. Isn't that Docker didn't

91
00:05:30.000 --> 00:05:32.190
he just described Docker that
gave it a different name.

92
00:05:32.910 --> 00:05:37.320
No, because with Docker, Docker
is a tool for assist

93
00:05:37.320 --> 00:05:42.240
admins and for developers to
launch their services, using a

94
00:05:42.240 --> 00:05:45.030
shell and using config files.
It is not something that

95
00:05:45.030 --> 00:05:48.910
is aimed at end users,
non technical end users, and

96
00:05:48.910 --> 00:05:51.300
a nontechnical end user can
not run their own Docker.

97
00:05:52.350 --> 00:05:54.840
Well, and arguably some technical
users, can't either, I'm still

98
00:05:54.840 --> 00:05:57.000
struggling a little bit with
the Docker client, the command

99
00:05:57.020 --> 00:06:01.010
line. Yeah. So then in
a world where we've got

100
00:06:01.250 --> 00:06:05.000
virtual machines and we've got
Linux containers, we've got Docker,

101
00:06:05.630 --> 00:06:08.450
we've got Heroku, you know,
get deploy a couple of

102
00:06:08.450 --> 00:06:10.370
years ago, get deployed. It
was like the peak of

103
00:06:10.850 --> 00:06:14.240
app deployment. Do you think
that something like sandstorm is

104
00:06:14.240 --> 00:06:16.490
like, that's the ideal, you
should just be able to

105
00:06:16.490 --> 00:06:18.950
have a, a website that
you can go to, to

106
00:06:18.950 --> 00:06:23.780
administer all of your applications
and both authors and people

107
00:06:23.780 --> 00:06:25.550
who run these apps just
don't have to think about

108
00:06:25.550 --> 00:06:32.080
the administration anymore. The administrivia
Absolutely. There's a lot of

109
00:06:32.440 --> 00:06:37.030
boiler plate that web developers
have to deal with today.

110
00:06:37.330 --> 00:06:42.040
It's not just running the
servers, but it's also, you

111
00:06:42.040 --> 00:06:48.640
know, authentication sharing models, access
control, security, making sure that,

112
00:06:49.420 --> 00:06:53.590
that they they've locked everything
down, perhaps encrypting user data,

113
00:06:54.160 --> 00:06:56.380
all of that is stuff
that sandstorm can take care

114
00:06:56.380 --> 00:06:59.530
of in, in the sandstorm
world. And so as an

115
00:06:59.530 --> 00:07:01.630
app developer, all you have
to do is focus on,

116
00:07:01.630 --> 00:07:09.700
On your business logic, An
example of that. So we

117
00:07:09.700 --> 00:07:13.630
have an app on sandstorm
called we can, it's at

118
00:07:13.630 --> 00:07:15.610
the very top of the
app store. If you look,

119
00:07:17.290 --> 00:07:19.390
and what it is is
it's similar to, well, it's

120
00:07:19.390 --> 00:07:21.820
a Kanban board, so it's
similar to Trello. And in

121
00:07:21.820 --> 00:07:24.730
my opinion, it is better
than Trello. Like they've, they

122
00:07:24.740 --> 00:07:28.180
produced something that, I mean,
it's, it's pretty similar, but

123
00:07:28.720 --> 00:07:31.510
they've got all the features.
I prefer using it over

124
00:07:31.510 --> 00:07:35.490
Trello, But there's probably not
a hosted version, right. That

125
00:07:35.490 --> 00:07:37.360
you can't like, I can
go to trello.com and they

126
00:07:37.620 --> 00:07:40.600
host it for me, right.
If I want my Kanban

127
00:07:40.600 --> 00:07:44.320
board, If we can, you
of course have to run

128
00:07:44.320 --> 00:07:45.700
it on your own server,
but you can run it

129
00:07:45.700 --> 00:07:48.820
on sandstorm. And the interesting
thing to me is that

130
00:07:48.820 --> 00:07:52.870
this was an app developed
by two guys, one in

131
00:07:52.930 --> 00:07:54.970
one in Turkey and one
in France, basically in their

132
00:07:54.970 --> 00:08:00.190
spare time. And they have
matched the quality of competing

133
00:08:00.190 --> 00:08:03.790
SaaS apps. It was just
that, you know, SAS apps

134
00:08:03.790 --> 00:08:09.760
that have presumably dozens of
developers on them. So that's

135
00:08:09.760 --> 00:08:12.700
just, that's how much easier
it is to develop an

136
00:08:12.700 --> 00:08:16.240
app. And I think that
the significant aspect of this

137
00:08:16.240 --> 00:08:18.580
is that if you were
going to start up a

138
00:08:18.580 --> 00:08:21.850
company today, you'll go and
you'll get your Google apps,

139
00:08:21.850 --> 00:08:26.620
your officer 65, you'll get
Trello, Yokota, get hub. Suddenly

140
00:08:26.620 --> 00:08:29.020
you're a little company of
one or two people has

141
00:08:29.020 --> 00:08:33.640
dependencies on 12, 15, 20,
you know, software as a

142
00:08:33.640 --> 00:08:36.880
service vendors. And you're going
to be sending them a,

143
00:08:36.880 --> 00:08:38.230
I don't know, a couple
of bucks a month, there's

144
00:08:38.230 --> 00:08:40.930
the monetary aspect of things.
But there's also the control

145
00:08:40.930 --> 00:08:44.500
aspect of things. You might
decide that, you know, food.bar

146
00:08:44.500 --> 00:08:47.470
is the best bug tracking
software ever. And then one

147
00:08:47.470 --> 00:08:50.110
day you wake up and
that has failed and they've

148
00:08:50.200 --> 00:08:53.710
gone out of business. You
have this dependency chain, but

149
00:08:53.710 --> 00:08:56.880
if you bring that cloud
and manage it yourself with

150
00:08:56.880 --> 00:08:59.760
open source apps, then you
have a lot more control.

151
00:08:59.760 --> 00:09:03.650
Right, Right, right. Yeah. When
it comes to SAS, you

152
00:09:03.650 --> 00:09:06.980
know, it's one thing to
decide to use Google or

153
00:09:06.980 --> 00:09:09.590
Microsoft product. It's another thing
to decide, to use the

154
00:09:09.590 --> 00:09:14.330
products of a small startup
that you don't know how

155
00:09:14.330 --> 00:09:17.660
far they're going to go.
And also you don't really

156
00:09:17.660 --> 00:09:19.970
know what their security practices
are like, like you can,

157
00:09:20.480 --> 00:09:22.490
you can be pretty sure
that that Google is good

158
00:09:22.490 --> 00:09:28.520
at security, but some random
startup who knows. And so

159
00:09:29.360 --> 00:09:34.160
with, with sand storm, you
know, you're handling well, sandstorm

160
00:09:34.160 --> 00:09:36.050
handles a lot of the
security and actually that's a

161
00:09:36.050 --> 00:09:38.600
whole nother conversation that we
should get into at some

162
00:09:38.600 --> 00:09:42.290
point. But yeah, yeah. I
do want to cover the

163
00:09:42.290 --> 00:09:46.340
extra security aspects, But the
control part is I think

164
00:09:46.340 --> 00:09:49.310
very, very interesting because if
you've got your small startup

165
00:09:49.400 --> 00:09:52.130
in the, in the old
days, you know, pre personal

166
00:09:52.130 --> 00:09:56.210
cloud, someone had to be
it, someone had to manage

167
00:09:56.210 --> 00:09:59.000
that server. Someone had to
think about that server, that

168
00:09:59.000 --> 00:10:02.780
server had, I call it
psychic weight that has nothing

169
00:10:02.780 --> 00:10:06.290
to do with the business.
Right. So one of the

170
00:10:06.290 --> 00:10:09.020
reasons I think that SAS
has caught on in the

171
00:10:09.020 --> 00:10:12.560
past 10 to 15 years
is because it's been so

172
00:10:12.560 --> 00:10:16.010
much easier to set up
and use, you know, you

173
00:10:16.010 --> 00:10:19.490
don't have to be technical
to register for one of

174
00:10:19.490 --> 00:10:24.380
these accounts. And I think
that it is entirely possible

175
00:10:24.380 --> 00:10:27.410
for us to get the
same ease of use with

176
00:10:27.800 --> 00:10:33.020
quote unquote on-prem software with
the right platform under it.

177
00:10:33.020 --> 00:10:34.970
That makes it really easy
to install things. And so

178
00:10:34.970 --> 00:10:37.310
that is what sensor I
was trying to do. And

179
00:10:37.310 --> 00:10:40.670
once it's, you know, as
easy to use on prem

180
00:10:40.670 --> 00:10:42.980
software and your own server,
as it is to use

181
00:10:42.980 --> 00:10:46.280
SAS, why would anyone choose
SAS? And I get this

182
00:10:46.280 --> 00:10:50.120
question a lot, people say,
well, you know, why would

183
00:10:50.120 --> 00:10:52.790
anyone care about running their
own server? Just like back

184
00:10:52.790 --> 00:10:54.860
in the seventies, people said,
why would anyone want to

185
00:10:54.860 --> 00:10:59.240
have a personal computer? But
you know, if it's equally

186
00:10:59.420 --> 00:11:02.660
all other things being equal,
why would you not want

187
00:11:02.660 --> 00:11:06.230
to keep your data on
your own machine? No, that's

188
00:11:06.230 --> 00:11:10.940
a really interesting question. Like
my email has been in

189
00:11:11.000 --> 00:11:18.050
Google apps for forever eight
years. Right. And my files

190
00:11:18.050 --> 00:11:21.260
are in Dropbox and I'm
okay with that. But my

191
00:11:21.350 --> 00:11:24.980
personal photos are in my
closet. I have them backed

192
00:11:24.980 --> 00:11:28.850
up to crash plan, but
I've never really felt comfortable

193
00:11:28.850 --> 00:11:32.690
sending all that data out
when I'm just going to

194
00:11:32.690 --> 00:11:37.760
look at it internally. Anyway.
So it's control. It's a,

195
00:11:37.780 --> 00:11:40.160
it's a sense of safety.
There's a sense of, I

196
00:11:40.160 --> 00:11:46.040
think it's control, isn't it?
Yeah. And, and flexibility. And

197
00:11:46.040 --> 00:11:50.240
being able to choose which
apps you run, you know,

198
00:11:50.240 --> 00:11:52.790
all these SAS services, when
you're, you're signed up to

199
00:11:53.110 --> 00:11:57.370
a 10 different SAS services,
none of them usually integrate

200
00:11:57.370 --> 00:12:00.280
with each other really well.
Like they'll all integrate specifically

201
00:12:00.280 --> 00:12:02.920
with Google, but they won't
integrate with each other. And

202
00:12:02.920 --> 00:12:05.440
part of that is just
because it's kind of hard

203
00:12:05.440 --> 00:12:08.470
for them to deal with
the, the access control and

204
00:12:09.610 --> 00:12:13.560
implementing OAuth and such. Whereas
if everything's under one roof

205
00:12:13.570 --> 00:12:15.910
in one login system, as
it is with sandstorm, then

206
00:12:15.910 --> 00:12:19.980
it is much easier to
integrate apps. Okay. Okay. So

207
00:12:19.980 --> 00:12:23.670
let's get a little more
technical and get some, some

208
00:12:23.670 --> 00:12:26.730
context. So people who are
listening probably are familiar with

209
00:12:26.760 --> 00:12:29.520
VMs and they realized that
they could, if they wanted

210
00:12:29.520 --> 00:12:32.670
to fire up a VM,
put a web server on

211
00:12:32.670 --> 00:12:35.730
a machine, install an application
and they, they can do

212
00:12:35.730 --> 00:12:37.890
that. Now they could go
and do Docker that may

213
00:12:37.890 --> 00:12:39.510
people may be listening and
saying, well, you know, Docker

214
00:12:39.510 --> 00:12:43.020
is fine. It's easy enough.
What is sandstorm? Does it

215
00:12:43.020 --> 00:12:45.060
sit on top of one
of those things or is

216
00:12:45.060 --> 00:12:48.120
it its own kind of
container? So we use the

217
00:12:48.120 --> 00:12:55.800
same Linux kernel features that
Docker uses for containerization. We

218
00:12:55.800 --> 00:12:59.550
have our own containerization layer
built on top of that.

219
00:12:59.550 --> 00:13:03.060
It's actually not very big.
Like it's, it's pretty easy

220
00:13:03.060 --> 00:13:04.650
to use the system calls.
So it's, you know, a

221
00:13:04.650 --> 00:13:06.840
couple of hundred lines of
code. So we don't really

222
00:13:07.770 --> 00:13:10.110
think of that as a
major feature of sandstorm, but

223
00:13:10.110 --> 00:13:14.400
rather an implementation detail. But
yeah, it's those same features

224
00:13:14.880 --> 00:13:18.090
Is this what's called L
M LXE Alec C is

225
00:13:18.090 --> 00:13:20.700
actually another set of scripts
that sit on top of

226
00:13:20.700 --> 00:13:24.390
these same, same kernel features,
but we use the system

227
00:13:24.390 --> 00:13:27.990
calls directly. Okay. So you're
using the containerization stuff that

228
00:13:27.990 --> 00:13:30.330
is built into Linux. And
that you'd like to say,

229
00:13:30.340 --> 00:13:34.290
that's an implementation detail on
your website though. You call

230
00:13:34.290 --> 00:13:39.510
out security more, more than
I've seen lightweight container systems

231
00:13:39.510 --> 00:13:41.640
call out before, because they
always say that it's not

232
00:13:41.640 --> 00:13:43.710
a strong boundary, like a
virtual machine is why do

233
00:13:43.710 --> 00:13:49.080
you do that? So most
of those other container systems

234
00:13:49.080 --> 00:13:53.070
really are not good at
sandboxing. We do a number

235
00:13:53.070 --> 00:13:57.540
of things that they don't
do. The main things are

236
00:13:59.760 --> 00:14:04.200
attack surface reduction and designing
a platform API that's actually

237
00:14:04.200 --> 00:14:09.660
sandboxable. So attack surface reduction
means the Linux kernel has

238
00:14:09.900 --> 00:14:12.840
vulnerabilities found all of the
time because it has an

239
00:14:12.840 --> 00:14:19.320
enormous API and there's bugs
in various system calls or

240
00:14:19.350 --> 00:14:23.610
other parts. And so like
on a, basically a weekly

241
00:14:23.610 --> 00:14:26.820
or monthly basis, there is
a new privilege. Escalation exploit

242
00:14:26.820 --> 00:14:30.990
found in the Linux kernel.
And most of those will

243
00:14:30.990 --> 00:14:34.440
allow you to break out
of a container. But on

244
00:14:34.440 --> 00:14:41.760
sand storm, we drastically reduce
the Lennox API by using

245
00:14:41.760 --> 00:14:45.360
set comp BPF, to disable
a lot of system calls,

246
00:14:45.390 --> 00:14:48.450
exotic system calls that a
web app has no business

247
00:14:48.450 --> 00:14:52.910
calling. We don't Mount proxy.
We don't Mount CSFs. Those

248
00:14:52.910 --> 00:14:56.750
are huge interfaces that are
not very well reviewed. We,

249
00:14:56.840 --> 00:15:01.970
the only devices visible in
the container are null zero

250
00:15:01.970 --> 00:15:05.600
and you random, which are
very heavily used devices that

251
00:15:05.600 --> 00:15:11.690
are pretty simple. And well-reviewed
as a result in, in

252
00:15:11.690 --> 00:15:16.310
the last year, I believe
there has been one bug

253
00:15:16.340 --> 00:15:19.790
that possibly theoretically was a
sandstorm breakout. Although no one

254
00:15:19.790 --> 00:15:23.780
was able to actually produce
a working exploit on that

255
00:15:23.780 --> 00:15:28.480
one. Do you believe that
Surface reduction is probably like

256
00:15:28.480 --> 00:15:31.450
the number one thing that
anybody can do to make

257
00:15:31.450 --> 00:15:40.120
their site more Well it's
tricky because these things, so

258
00:15:40.120 --> 00:15:48.190
there, there is a constant
tension between compatibility and security.

259
00:15:48.190 --> 00:15:51.550
So if you've disabled, a
bunch of system calls, there

260
00:15:51.550 --> 00:15:53.590
will be some apps that
will want to use one

261
00:15:53.590 --> 00:15:55.630
of those and they'll have
to be tweaked to not

262
00:15:55.630 --> 00:15:59.290
use it and use something
else. And that's why with

263
00:15:59.290 --> 00:16:02.560
something like Docker, where they
want to run arbitrary off

264
00:16:02.560 --> 00:16:05.470
the shelf, Linux apps, they
can't really do that, or

265
00:16:05.470 --> 00:16:09.340
they can't set it up
by default. Whereas we're willing

266
00:16:09.340 --> 00:16:12.130
to say, well, apps that
are part of the sandstorm

267
00:16:12.160 --> 00:16:14.740
do need to be tweaked
slightly as part of the

268
00:16:14.740 --> 00:16:17.140
packaging process. So if they
are doing one of these

269
00:16:17.140 --> 00:16:20.980
things, they need to stop.
It's generally not hard to

270
00:16:20.980 --> 00:16:23.170
tweak them, but it is
a thing that needs to

271
00:16:23.170 --> 00:16:28.000
be done. This episode of
Hansel minutes is brought to

272
00:16:28.000 --> 00:16:32.140
you by Braintree code for
easy online payments. If you're

273
00:16:32.140 --> 00:16:34.330
building a mobile app and
you're searching for a simple

274
00:16:34.330 --> 00:16:39.400
payment solution, check out Braintree,
the brain tree v.zero SDK

275
00:16:39.430 --> 00:16:43.030
makes it easy to offer
multiple mobile payment types. So

276
00:16:43.030 --> 00:16:47.050
you can start accepting PayPal,
Apple pay Bitcoin, Venmo, credit

277
00:16:47.050 --> 00:16:51.400
cards, and more all with
a single integration, one small

278
00:16:51.400 --> 00:16:53.260
snippet of code. And you're
set up in less than

279
00:16:53.260 --> 00:16:55.960
10 minutes. If you don't
have time, you can give

280
00:16:55.960 --> 00:16:58.420
them a call. They'll even
handle the integration for you

281
00:16:58.420 --> 00:17:02.020
and walk you through it.
The SDK supports seven languages,

282
00:17:02.050 --> 00:17:07.390
dotnet node, Java, Perl, PHP,
Python, and Ruby elegant code

283
00:17:07.600 --> 00:17:12.250
clear documentation to learn more.
And for your first $50,000

284
00:17:12.250 --> 00:17:19.450
in transactions fee free, go
to brain tree payments.com/hanselman that's

285
00:17:19.450 --> 00:17:27.460
Braintree payments.com/hanselman. So On the
one hand with Docker or

286
00:17:27.460 --> 00:17:29.620
something like that, you've got
the will run pretty much

287
00:17:29.620 --> 00:17:32.740
anything just as it is.
And then there's the potential

288
00:17:32.740 --> 00:17:36.400
for someone to make a
more app store permissive. Like,

289
00:17:36.400 --> 00:17:38.410
you know, when an application
comes down on an Android

290
00:17:38.410 --> 00:17:39.850
device and says, Hey, I
really need to talk to

291
00:17:39.850 --> 00:17:43.810
your microphone. Someone could say,
Nope, no microphone apps. Or

292
00:17:43.810 --> 00:17:47.020
if you're going to do
microphone apps, This API, or

293
00:17:47.020 --> 00:17:49.650
you could add something in
sandstorm to ask permission. Yeah.

294
00:17:49.650 --> 00:17:53.490
So that's the other part
of making something that's sandboxable

295
00:17:53.490 --> 00:17:56.790
is that you need to
have a platform API that

296
00:17:56.790 --> 00:18:01.080
actually makes sense for sandboxing
where the app is, has

297
00:18:01.080 --> 00:18:03.660
some way to request permissions
that the user is able

298
00:18:03.660 --> 00:18:08.160
to grant in a sensible
way. So take the example

299
00:18:08.160 --> 00:18:14.100
of an app that needs
to send notification emails on

300
00:18:14.190 --> 00:18:17.790
a typical, you know, VM
or Docker solution. You might

301
00:18:17.790 --> 00:18:21.090
need to give it a
port 25 ability to open

302
00:18:21.090 --> 00:18:24.210
port 25 on your SMTP
server and an end user

303
00:18:24.210 --> 00:18:28.500
doesn't know what that means
on sand storm. Instead it

304
00:18:28.500 --> 00:18:33.300
would be, I request the
ability to send emails and

305
00:18:33.300 --> 00:18:36.750
then the sandstorm UI will
come up and guide the

306
00:18:36.750 --> 00:18:42.570
user through choosing what email
address to send, as you

307
00:18:42.570 --> 00:18:45.870
know, perhaps if the, and
this is stuff that we're

308
00:18:45.870 --> 00:18:49.920
still working on, but if
the user has some domains

309
00:18:49.920 --> 00:18:52.320
attached to their sandstorm server,
then sensor and we'll say,

310
00:18:52.320 --> 00:18:54.780
okay, choose a domain. Okay.
Now type an email address.

311
00:18:54.780 --> 00:18:58.260
Okay. Now we'll grant specifically
this email address to the

312
00:18:58.260 --> 00:19:01.860
app and at the low
level, the way we represent

313
00:19:01.860 --> 00:19:05.710
that is through something called
Caton prodo, which is our

314
00:19:05.760 --> 00:19:10.590
RPC communications layer. And it
makes it really easy to,

315
00:19:12.420 --> 00:19:18.030
to represent arbitrary permissions as
an object, an object reference

316
00:19:18.030 --> 00:19:20.670
that the app receives and
then can start making calls

317
00:19:20.670 --> 00:19:24.020
to. And, and just as
a small aside for people

318
00:19:24.020 --> 00:19:28.640
who might be curious about
that, captain prodo is like,

319
00:19:28.640 --> 00:19:31.550
is it protocol buffers plus
plus plus, is it V2

320
00:19:31.550 --> 00:19:33.830
or is this an entirely
new concept on top of

321
00:19:33.830 --> 00:19:35.810
protocol buffers? I like to
think of it as a

322
00:19:35.810 --> 00:19:39.050
successor to protocol buffers. So
I used to work at

323
00:19:39.050 --> 00:19:41.930
Google for a while. I
was the one man part

324
00:19:41.930 --> 00:19:45.470
above team. I was largely
responsible for opensourcing proto buffs.

325
00:19:47.180 --> 00:19:51.410
Captain prodo is a replacement
for protocol buffers. That is

326
00:19:52.050 --> 00:19:54.290
so after I left Google,
I worked on captain prodo

327
00:19:54.290 --> 00:19:56.480
and it's all the things
that I would have wanted

328
00:19:56.480 --> 00:19:59.060
to do, but I couldn't
do on Pardot buffs because

329
00:19:59.060 --> 00:20:02.750
Google had too much data
in the existing format. So

330
00:20:02.750 --> 00:20:05.720
Kevin prodo is infinity times
faster than pro buffs. I

331
00:20:05.720 --> 00:20:08.330
like to say the reason
being that the wire format

332
00:20:08.330 --> 00:20:10.670
is also appropriate is an
in memory format. So when

333
00:20:10.670 --> 00:20:13.790
you read in a message,
you don't have to go

334
00:20:13.790 --> 00:20:15.830
through a parsing step. You
can just start using it.

335
00:20:17.480 --> 00:20:19.670
Is it infinity temps faster
all the time? Or just

336
00:20:19.670 --> 00:20:21.530
on the read, like on
the right. Someone had to

337
00:20:21.530 --> 00:20:25.040
write it though, right On
both read and write because

338
00:20:25.040 --> 00:20:28.430
you, you build the message.
Well, through the Caton protal

339
00:20:28.430 --> 00:20:31.280
library, you build the message
in memory, in exactly the

340
00:20:31.280 --> 00:20:33.050
format in which it's going
to be written out. So

341
00:20:33.050 --> 00:20:37.730
there's no serialization step. I
see. So it's a mem

342
00:20:37.730 --> 00:20:40.580
copy kind of a situation
you're stacking your Tetris blocks

343
00:20:40.670 --> 00:20:44.120
as they're coming down neatly
with minimal if for any.

344
00:20:45.230 --> 00:20:47.800
Right. Right. And, and yeah,
once you write it out,

345
00:20:47.800 --> 00:20:50.470
it's just, it's just a
mem copy. Or you can

346
00:20:50.860 --> 00:20:54.100
do things like M map
memory map in a file

347
00:20:54.100 --> 00:20:56.830
and read it as a
captain prodo structure. And only

348
00:20:56.830 --> 00:21:00.160
the parts of the file
that you actually look at

349
00:21:00.190 --> 00:21:03.760
will be loaded in from
disc. So there's a lot

350
00:21:03.760 --> 00:21:05.230
of neat things you can
do with that. And then

351
00:21:05.230 --> 00:21:08.530
on top of that, there's
the RPC layer, which protocol

352
00:21:08.530 --> 00:21:11.320
buffers, at least in my
time, we weren't able to

353
00:21:11.320 --> 00:21:14.560
release an RPC system on
top of it. But captain

354
00:21:14.560 --> 00:21:20.380
Pareto has the built in
RPC system. And the interesting

355
00:21:20.380 --> 00:21:23.650
thing about it is that
it's object capability based, which

356
00:21:23.650 --> 00:21:29.740
is a, a branch of
security theory. But the, the

357
00:21:29.740 --> 00:21:33.400
basic idea is object references
are a first class type.

358
00:21:34.390 --> 00:21:36.610
You can send someone a
message that contains a reference

359
00:21:36.610 --> 00:21:39.040
to an object that they
didn't know about before when

360
00:21:39.040 --> 00:21:42.070
they received the reference implicitly
receive permission to use the

361
00:21:42.070 --> 00:21:45.700
object, whereas before they received
the reference, they had no

362
00:21:45.700 --> 00:21:48.100
ability to address the object
in the first place. And

363
00:21:48.100 --> 00:21:50.470
on top of that, you
can build all kinds of

364
00:21:51.370 --> 00:21:56.530
complex interactions between neutrally non-trusting
parties and have it be

365
00:21:56.530 --> 00:22:00.690
secure. And the, just for
folks that are interested in

366
00:22:00.690 --> 00:22:05.130
that separate conversation, captain prodo
is under the sandstorm IO

367
00:22:05.400 --> 00:22:10.740
organization on GitHub. And it's,
it's, CAAP N captain prodo

368
00:22:10.770 --> 00:22:13.830
when you go off and,
and Google for to find

369
00:22:13.830 --> 00:22:18.240
that one other thing that
is fundamental at appears to

370
00:22:18.300 --> 00:22:22.410
a sandstorm is, is meteor,
is that because meteor is

371
00:22:22.410 --> 00:22:24.810
of, is a favorite thing
or, and you wrote much

372
00:22:24.810 --> 00:22:27.330
of it in meteorite, even
though I understand that Santorum

373
00:22:27.330 --> 00:22:32.790
can have apps written in
any language. Yeah. So it's

374
00:22:32.790 --> 00:22:36.180
not, I wouldn't call it
fundamental. Okay. The thing about

375
00:22:36.180 --> 00:22:42.540
meteor is that, so for
sensor can run apps written

376
00:22:42.540 --> 00:22:44.970
in any tech stack that
runs on Linux, but early

377
00:22:44.970 --> 00:22:48.690
on, we wrote tools specifically
for media that made it

378
00:22:48.690 --> 00:22:51.390
easier to take a meatier
app and package it for

379
00:22:51.390 --> 00:22:55.260
sandstorm because meteor apps are
laid out in a certain

380
00:22:56.340 --> 00:22:59.040
predictable way. So that makes
it easier to write a

381
00:22:59.040 --> 00:23:01.980
tool around it. Whereas the
more general tool requires a

382
00:23:01.980 --> 00:23:07.140
bit more configuration to build
your app. So, and I

383
00:23:07.140 --> 00:23:11.850
do like meteor as a
way to write a high

384
00:23:11.850 --> 00:23:17.760
quality reactive web app quickly.
We used it for the

385
00:23:17.760 --> 00:23:21.240
sandstorm front end, and generally
that's been a good experience

386
00:23:21.240 --> 00:23:24.630
for me, but I would
also say that more recently

387
00:23:24.630 --> 00:23:30.270
we've started developing tools, targeting
other specific tech stacks. So

388
00:23:30.270 --> 00:23:34.710
the, the meteor advantage is,
is decreasing at this point

389
00:23:34.770 --> 00:23:37.410
by virtue of the others.
I see. So then if

390
00:23:37.410 --> 00:23:39.750
anyone who has a tech
stack or is interested in

391
00:23:39.750 --> 00:23:41.940
a tech stack who might
be listening, they could go

392
00:23:41.940 --> 00:23:45.680
and look at how the
implementation of the, of media

393
00:23:45.680 --> 00:23:48.200
or the other apps that
create sandstorm packages. And they

394
00:23:48.200 --> 00:23:50.810
could do that themselves. I
could do this with.net on

395
00:23:50.810 --> 00:23:55.480
Linux and make the sandstorm
packaging tools. Yeah. So there's

396
00:23:55.480 --> 00:23:59.380
a, there are sort of
a Swiss army knife tool

397
00:23:59.380 --> 00:24:04.600
is something called Vagrant SPK,
meaning you use Vagrant to

398
00:24:04.630 --> 00:24:07.930
run a Linux VM and
then create SPK, which are

399
00:24:07.930 --> 00:24:14.980
sandstorm package files with it.
And it has basically configurations

400
00:24:14.980 --> 00:24:18.430
for a bunch of different
stacks and we are continually

401
00:24:18.430 --> 00:24:22.420
adding more stacks and improving
those existing configuration. So yeah,

402
00:24:22.460 --> 00:24:25.390
it would be, it would
be cool to have a.net

403
00:24:25.900 --> 00:24:29.860
stack support in there, but
it is also possible to

404
00:24:29.860 --> 00:24:33.040
do things in a general
way where it does Vagrant

405
00:24:33.040 --> 00:24:36.610
SBK does not have to
know about your stack already.

406
00:24:37.120 --> 00:24:40.180
Very cool. Well, I can
definitely make the.net one happen

407
00:24:40.210 --> 00:24:42.520
so that we'll have that
conversation offline. That's a good

408
00:24:42.520 --> 00:24:46.810
idea. So is sandstorm, is
it a company or an

409
00:24:46.810 --> 00:24:51.460
open source project or both?
It is both. So we

410
00:24:51.460 --> 00:24:56.560
are a startup. We are,
we have received seed funding,

411
00:24:57.790 --> 00:25:00.580
but we're also open source.
So the version of sandstorm

412
00:25:00.580 --> 00:25:05.440
that runs on a single
machine, the, the, what you

413
00:25:05.440 --> 00:25:08.080
would want as an individual
user is completely open source

414
00:25:08.080 --> 00:25:14.170
Apache, two license. We are
working on an enterprise product,

415
00:25:14.200 --> 00:25:18.670
which will be how we
fund things, basically features that

416
00:25:18.670 --> 00:25:23.530
only companies with a lot
of money would want, we

417
00:25:23.530 --> 00:25:27.100
will put in that product
and sell it. And one

418
00:25:27.100 --> 00:25:30.730
of those is the ability
to take a cluster of

419
00:25:30.730 --> 00:25:34.030
machines and treat it as
a single large sandstorm instance

420
00:25:34.270 --> 00:25:38.650
and have it sort of
self-manage the load balancing. And

421
00:25:38.650 --> 00:25:43.900
that is our managed hosting
product is, is built on

422
00:25:43.900 --> 00:25:47.260
that. And we will eventually
be selling that. Yeah. Okay.

423
00:25:47.470 --> 00:25:49.960
So then I can, as
a personal user, I can

424
00:25:49.960 --> 00:25:52.360
do this. Now I can
take my Linux machine and

425
00:25:52.360 --> 00:25:54.550
I can set up my
own private cloud with Linux

426
00:25:54.610 --> 00:25:57.700
at home or whatever. Yeah.
If an enterprise that's going

427
00:25:57.700 --> 00:25:59.320
to be your enterprise product
and I could go and

428
00:25:59.320 --> 00:26:01.390
do that now, does that
mean I can host it

429
00:26:01.390 --> 00:26:05.800
myself? Or do you use
your managed hosting? So you

430
00:26:05.800 --> 00:26:09.280
can do either a, we
have a managed hosting service

431
00:26:10.120 --> 00:26:12.310
for people who don't want
to run their own physical

432
00:26:12.310 --> 00:26:17.920
machine, but it's, it's up
to you. It's Weird though,

433
00:26:17.920 --> 00:26:19.810
because I thought it was
like a personal cloud, but

434
00:26:19.810 --> 00:26:23.620
now I'm back to hosting
with you. Yeah. So We

435
00:26:23.620 --> 00:26:26.290
get this question a lot.
The thing is that even

436
00:26:26.290 --> 00:26:29.410
if you're using our managed
hosting, we still aren't the

437
00:26:29.410 --> 00:26:32.470
app developer. So you still
have the separation between the

438
00:26:32.500 --> 00:26:36.820
developer and the host. And
by having that separation you

439
00:26:36.820 --> 00:26:39.970
as the user, get a
lot more power power to

440
00:26:39.970 --> 00:26:43.740
run the apps that you
choose. And moreover, if you

441
00:26:43.740 --> 00:26:47.160
decide at some point that
you would rather have your

442
00:26:47.160 --> 00:26:49.590
own machine, you can easily
move all of the apps

443
00:26:49.590 --> 00:26:52.590
from the managed hosting to
your own, because it's the

444
00:26:52.590 --> 00:26:54.540
same set of apps because
it sands storm in both

445
00:26:54.540 --> 00:26:59.180
places. So portability and vendor
lock in. Those are the

446
00:26:59.180 --> 00:27:01.520
important things, and there is
total portability and there's no

447
00:27:01.520 --> 00:27:05.360
vendor lockin. Exactly. And, and
yeah, the, the purpose of

448
00:27:05.360 --> 00:27:07.760
the managed hosting for us
is actually not so much

449
00:27:07.760 --> 00:27:13.100
about making money, but rather
making sandstorm available to as

450
00:27:13.100 --> 00:27:15.380
many users as possible, because
there are a lot of

451
00:27:15.380 --> 00:27:17.540
users who just aren't going
to run a physical machine,

452
00:27:18.080 --> 00:27:20.420
but we want that ecosystem
to be as large as

453
00:27:20.420 --> 00:27:22.520
possible so that the people
who do run their own

454
00:27:22.520 --> 00:27:27.140
machine get high quality apps.
The point about that ecosystem,

455
00:27:27.140 --> 00:27:29.420
if I've got an application,
like I've got a blog

456
00:27:29.420 --> 00:27:31.700
that I wrote in some
language, what do I need

457
00:27:31.700 --> 00:27:33.230
to do if I want
to get that into the

458
00:27:33.230 --> 00:27:38.060
sandstorm marketplace and make it
available to the ecosystem? Yeah.

459
00:27:38.060 --> 00:27:43.550
So you will want to
go use Vagrant SPK, and

460
00:27:43.580 --> 00:27:51.200
there's there's documentation online@docsdotsandstorm.io. Basically
you are going to create

461
00:27:51.200 --> 00:27:57.980
an SPK package that contains
all of your, your dependencies.

462
00:27:57.980 --> 00:28:00.830
It's, it's similar to like
a Docker image or a

463
00:28:00.830 --> 00:28:06.860
VM image. And then you,
you submit that by doing

464
00:28:06.860 --> 00:28:11.360
Vagrant SPK publish to our,
to our app market. And

465
00:28:11.660 --> 00:28:14.060
we basically look over it
just to make sure there's

466
00:28:14.060 --> 00:28:17.390
no typos or obvious missing
information. And then we approve

467
00:28:17.390 --> 00:28:23.900
it From a security perspective.
Again, it's, it's it's compartmentalize.

468
00:28:23.900 --> 00:28:26.570
So could I publish an
evil thing? And it would

469
00:28:26.690 --> 00:28:29.000
make its way up into
the sandstorm marketplace as an

470
00:28:29.000 --> 00:28:31.220
evil thing, or what would
it matter? So you could

471
00:28:31.220 --> 00:28:33.620
publish an evil thing, but
the app runs inside a

472
00:28:33.620 --> 00:28:36.770
sandbox where it's segregated from
the rest of the system.

473
00:28:37.880 --> 00:28:40.730
And so you would have
to publish an evil thing

474
00:28:40.760 --> 00:28:44.090
and convince users to give
it permissions that it can

475
00:28:44.090 --> 00:28:52.070
do evil things with. And
yeah, generally we're more worried

476
00:28:52.070 --> 00:28:56.720
about apps that are buggy
because people aren't good at

477
00:28:56.750 --> 00:29:00.110
writing or are a lot
of app developers are just

478
00:29:00.110 --> 00:29:03.590
not any good at making
their apps secure. And we

479
00:29:03.590 --> 00:29:06.050
want to make sure that
on sand storm, you don't

480
00:29:06.050 --> 00:29:10.190
really have to worry about
that because sandstorm will, eh,

481
00:29:10.280 --> 00:29:12.080
isolate the app in such
a way that those bugs

482
00:29:12.080 --> 00:29:17.180
don't matter. So, as an
example, every ether pad document

483
00:29:17.180 --> 00:29:22.880
you create, which is a,
it's a document editor is

484
00:29:23.030 --> 00:29:25.760
run in a separate container,
isolated from all the others.

485
00:29:26.150 --> 00:29:28.820
So that means that a
bug, an ether pad, which

486
00:29:28.820 --> 00:29:31.010
allows someone who has access
to one document to get

487
00:29:31.010 --> 00:29:36.770
access to others, doesn't matter
on sandstorm. And, and only

488
00:29:36.770 --> 00:29:40.130
the people that you've shared
that document to through the

489
00:29:40.130 --> 00:29:43.570
sandstorm interface possibly get access.
So through things like that,

490
00:29:43.570 --> 00:29:46.180
we've seen lots of bugs
in individual apps that just

491
00:29:46.180 --> 00:29:50.370
don't affect sandstorm. Very cool.
What do most apps do

492
00:29:50.370 --> 00:29:55.170
for databases? Yeah, so the
app gets a slice of

493
00:29:55.170 --> 00:29:59.940
file system to, to store,
to and can run whatever

494
00:29:59.940 --> 00:30:05.130
database it wants. So we
generally recommend SQL Lite because

495
00:30:05.550 --> 00:30:10.050
generally since it's one document
per container, you're dealing with

496
00:30:10.050 --> 00:30:11.820
a small amount of data
and it just doesn't make

497
00:30:11.820 --> 00:30:14.430
sense to run a large
database, but we do see

498
00:30:14.430 --> 00:30:17.700
apps that use my SQL
or Mongo or anything else.

499
00:30:17.700 --> 00:30:20.550
You just put it in
your package along with, with

500
00:30:20.550 --> 00:30:24.600
your front end. Is there
anything that you wouldn't run

501
00:30:24.630 --> 00:30:26.760
in sand storms or anything
that's too big or too

502
00:30:26.760 --> 00:30:29.160
intense or too, whatever that
you'd be like? Yeah. That's

503
00:30:29.160 --> 00:30:33.360
probably not what we're. Yeah.
So sandstorm is not intended

504
00:30:33.360 --> 00:30:37.830
to run SAS apps, meaning
apps where you're, you're primarily

505
00:30:38.010 --> 00:30:45.570
like you wouldn't. So an
app where your users are

506
00:30:45.600 --> 00:30:48.510
external and they don't know
that sand storm is behind

507
00:30:48.510 --> 00:30:50.520
it or an app where
you want to scale up

508
00:30:50.550 --> 00:30:53.250
to a hundred million users.
You would not run on

509
00:30:53.250 --> 00:30:58.530
that on sandstorm because sandstorm
is always supposed to be

510
00:30:58.530 --> 00:31:02.460
interacting with the user and
are running small scale instances

511
00:31:02.460 --> 00:31:05.220
of things. And we think
there's, there's plenty of infrastructure

512
00:31:05.220 --> 00:31:08.430
out there already, specifically for
the case of scaling to

513
00:31:08.430 --> 00:31:11.130
a hundred million users. And
that's just not a very

514
00:31:11.130 --> 00:31:13.770
interesting space for us, even
though we could probably make

515
00:31:13.770 --> 00:31:18.600
sand storm have features to
support that. It's, it's not

516
00:31:18.600 --> 00:31:22.800
what we're aiming at. Okay.
So people can get involved

517
00:31:22.800 --> 00:31:27.300
with in a number of
ways of increasing deepness. They

518
00:31:27.300 --> 00:31:29.940
can get on your announcements
mailing list, right. They can

519
00:31:29.940 --> 00:31:33.210
go check out the marketplace,
which is called Oasis, which

520
00:31:33.210 --> 00:31:35.760
is an awesome name by
the way. Well that the

521
00:31:35.760 --> 00:31:39.120
managed hosting service is Oasis.
Oh, I'm sorry. Forgive me.

522
00:31:39.120 --> 00:31:41.850
This are the managed hosting
services Oasis. The marketplace is

523
00:31:41.850 --> 00:31:50.130
just@whaturlappsdotsandstorm.io. It's just sensor map
marketplace. Very cool. And you've

524
00:31:50.130 --> 00:31:53.910
got a really active community
on GitHub. You've gotten lots

525
00:31:53.910 --> 00:31:56.070
of stars and lots of
forks. What do you think

526
00:31:56.070 --> 00:31:57.990
people are doing with all
of these forks? Has anyone

527
00:31:57.990 --> 00:31:59.760
run off and try to
do something really crazy with

528
00:31:59.770 --> 00:32:05.340
sandstorm? Yeah. So there's a
pull request that I need

529
00:32:05.340 --> 00:32:07.500
to get to this week
that I'm pretty excited about

530
00:32:08.580 --> 00:32:12.450
where someone has added the
headed support for web dev,

531
00:32:15.510 --> 00:32:18.390
so that you can host
a, he's actually got the

532
00:32:18.390 --> 00:32:23.310
own cloud file sync client
sinking to a sand storm

533
00:32:23.310 --> 00:32:27.540
app that I guess he
wrote himself. This requires that

534
00:32:27.540 --> 00:32:32.280
the HTTP bridge between them
support the full web dev

535
00:32:32.280 --> 00:32:35.790
protocol, which is an extension
to HTTP. So I'm excited

536
00:32:35.790 --> 00:32:40.130
about getting that emerged in
so that people can do

537
00:32:40.130 --> 00:32:43.610
File sync to sandstorm. Yeah.
That is pretty slick in

538
00:32:43.610 --> 00:32:45.740
a world of rest. We're
only thinking of a couple

539
00:32:45.740 --> 00:32:48.620
of HTTP verbs. There's a
whole lot of methods that

540
00:32:48.620 --> 00:32:50.390
you have to do to
make web dev, which we

541
00:32:50.390 --> 00:32:52.640
think of as being kind
of an older and older

542
00:32:52.640 --> 00:32:55.100
thing, but it's still extremely
useful. And that definitely would

543
00:32:55.100 --> 00:32:58.850
be great for, for businesses.
Very cool. Well, I really

544
00:32:58.850 --> 00:33:00.530
appreciate you taking the time
to chat with me today.

545
00:33:01.100 --> 00:33:06.200
Thanks. So again, you can
check out sandstorm@sandstorm.io. This has

546
00:33:06.200 --> 00:33:08.750
been another episode of Hanselminutes
and we'll see you again

547
00:33:08.750 --> 00:33:16.900
next week. <inaudible>.

