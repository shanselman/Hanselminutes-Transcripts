WEBVTT FILE

1
00:00:00.720 --> 00:00:03.840
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.840 --> 00:00:07.170
they make the show possible.
Today's show is sponsored by

3
00:00:07.200 --> 00:00:11.430
Tellerik create compelling app experiences
across any screen with the

4
00:00:11.430 --> 00:00:16.290
Tellerik platform Telerx end to
end platform. Uniquely combines industry

5
00:00:16.290 --> 00:00:19.980
leading UI tools with cloud
services to simplify the entire

6
00:00:19.980 --> 00:00:24.480
app development cycle Tellerik offers
everything.net developers need to build

7
00:00:24.480 --> 00:00:33.900
quality apps faster. Try it
free at tellerik.com/platform that's tellerik.com/platform

8
00:00:47.000 --> 00:00:51.740
From Hanselman it's dot com.
It's Hansel minutes, a weekly

9
00:00:51.740 --> 00:00:56.390
discussion with WebEx Developer and
technologist Scott Hanselman. This is

10
00:00:56.390 --> 00:01:01.100
Lawrence Ryan announcing your show notes
For 527. In this episode,

11
00:01:01.130 --> 00:01:05.480
Scott talks with Asha Hammerly
about practical containers and how

12
00:01:05.480 --> 00:01:11.060
they affect workflow. Hi, this
is Scott Hanselman. This is

13
00:01:11.060 --> 00:01:14.060
another episode of Hansel minutes
today. We're talking with Audra

14
00:01:14.090 --> 00:01:17.780
Hammerly, who is a cloud
developer advocate with Google. Thanks

15
00:01:17.780 --> 00:01:21.230
for chatting with me today.
Hello, this is great. So

16
00:01:21.590 --> 00:01:24.650
we're going to talk about
containers. We're talking about microservices,

17
00:01:24.680 --> 00:01:26.930
and I know it's funny
to start a podcast with

18
00:01:26.930 --> 00:01:28.910
those two buzz words, because
those are the buzz words.

19
00:01:29.780 --> 00:01:34.070
Everyone is saying this, why
is containers and microservices? So

20
00:01:34.070 --> 00:01:36.980
talked about why is it?
Have we reached peak buzzword

21
00:01:36.980 --> 00:01:40.130
with these two things? So
I think it really helps

22
00:01:40.130 --> 00:01:41.840
to like take a step
back and think about the

23
00:01:41.840 --> 00:01:44.930
problems that people have had
with microservices. So before I

24
00:01:44.930 --> 00:01:47.390
was at Google, I was
a contract developer and a

25
00:01:47.390 --> 00:01:51.530
rails developer for about eight
years. And microservices became huge

26
00:01:51.530 --> 00:01:53.570
in the rails community, but
one of the big problems

27
00:01:53.570 --> 00:01:58.160
people had was deployment and
managing huge quantities of separate

28
00:01:59.540 --> 00:02:03.260
separate services, separate sites that
had different scaling requirements, different

29
00:02:03.260 --> 00:02:06.320
performance, characteristics, maybe some of
them needed access to two

30
00:02:06.320 --> 00:02:08.990
databases, a primary and a
data warehouse and others were

31
00:02:08.990 --> 00:02:12.140
completely independent of a database
and containers have kind of

32
00:02:12.140 --> 00:02:15.260
come along as a potential
solution to that big frustration.

33
00:02:15.710 --> 00:02:17.570
And I had really no
idea what containers could do

34
00:02:17.570 --> 00:02:20.270
until about 18 months ago.
And I started hearing Docker,

35
00:02:20.270 --> 00:02:22.850
talked about it, a lot
of conferences, and now that

36
00:02:22.850 --> 00:02:24.410
I've had a little experience
with them, I think there's

37
00:02:24.410 --> 00:02:27.800
a lot of potential for
folks running complicated deployments, whether

38
00:02:27.800 --> 00:02:31.880
that's multiple services, multiple websites
needing to better utilize their

39
00:02:31.880 --> 00:02:36.170
VM resources or folks who
are just doing things that

40
00:02:36.170 --> 00:02:38.330
are cross cloud, you need
to have, we need to

41
00:02:38.330 --> 00:02:40.880
have your stuff in multiple
data centers and all that

42
00:02:40.880 --> 00:02:43.460
stuff. I think containers can
help with a lot. So

43
00:02:43.460 --> 00:02:45.110
that's kind of, I think
why they're coming up right

44
00:02:45.110 --> 00:02:46.820
now. And I mean, I
totally get that. They're a

45
00:02:46.820 --> 00:02:48.860
buzzword. I think every conference
I've been to in the

46
00:02:48.860 --> 00:02:51.140
last year has had a,
container's talk of some sort,

47
00:02:51.830 --> 00:02:55.250
even if I wasn't giving
it. So yeah, I'm, I'm

48
00:02:55.250 --> 00:02:58.460
one of the chairs this
year of Oz con and

49
00:02:58.610 --> 00:03:02.980
we're getting From some folks,
folks, maybe with a little

50
00:03:02.980 --> 00:03:07.170
bit more historical context who
are saying that, Oh, that's,

51
00:03:07.170 --> 00:03:09.610
it's all just containers and
microservices talks like that's just

52
00:03:09.610 --> 00:03:12.610
the buzzword that we're going
to use this year. And

53
00:03:13.180 --> 00:03:14.770
I don't know, I don't
know how to answer those

54
00:03:14.770 --> 00:03:17.980
because sometimes they are the
buzzwords that we need today.

55
00:03:17.980 --> 00:03:20.230
Like this is, like you
said more than a buzzword,

56
00:03:20.230 --> 00:03:22.660
it's a solution to an
actual real world problem that

57
00:03:22.660 --> 00:03:26.730
people are having. And I
think there's a lot of

58
00:03:26.730 --> 00:03:28.320
pushback on the fact that
it's a buzzword, but the

59
00:03:28.320 --> 00:03:31.020
bottom line is container technologies
were really cool. The idea

60
00:03:31.020 --> 00:03:33.600
that you can take an
application, package it up with

61
00:03:33.600 --> 00:03:37.530
all of its dependencies and
take it in a package,

62
00:03:37.530 --> 00:03:39.570
whether that's a Docker container
or a rocket container or

63
00:03:39.570 --> 00:03:42.690
some custom container format is
Google's been using containers and

64
00:03:42.690 --> 00:03:45.810
custom container formats for quite
a while and push that

65
00:03:45.810 --> 00:03:48.630
out anywhere and not have
to worry about making sure

66
00:03:48.630 --> 00:03:50.700
that all your dependencies are
installed. Not having to worry

67
00:03:50.700 --> 00:03:53.370
about if your libraries or
library source like something like

68
00:03:53.370 --> 00:03:57.150
rubygems.org or NPM is down,
or whether somebody pushed an

69
00:03:57.150 --> 00:03:59.310
extroversion of a library and
you didn't get your dependencies

70
00:03:59.310 --> 00:04:02.130
quite right. Just knowing that
if you have that box

71
00:04:02.670 --> 00:04:06.060
of the application, its dependencies
and its file system all

72
00:04:06.060 --> 00:04:08.730
ready to go, and you
can push that out anywhere.

73
00:04:08.760 --> 00:04:10.320
You want to push that
out to multiple clouds. You

74
00:04:10.320 --> 00:04:11.970
want to push that out
to your test system. You

75
00:04:11.970 --> 00:04:13.800
want to push that out
to I pre-prod system that

76
00:04:13.800 --> 00:04:16.890
your sales and marketing team
use for making promotional videos.

77
00:04:17.460 --> 00:04:20.490
All of that's just super
easy at that point. And

78
00:04:20.520 --> 00:04:22.740
it changes how you think
about ops. It changes how

79
00:04:22.740 --> 00:04:25.200
you think about even your
deployment pipeline. That's one of

80
00:04:25.200 --> 00:04:26.970
the things that I really
struggled with when we were

81
00:04:26.970 --> 00:04:29.280
thinking about using this for
a huge microservices site, I

82
00:04:29.280 --> 00:04:32.580
was working on a, we
had, I think, seven different

83
00:04:32.580 --> 00:04:35.340
code bases in three different
languages on that site, all

84
00:04:35.340 --> 00:04:38.250
to run one site. And
we were like, okay, we

85
00:04:38.250 --> 00:04:39.840
need to come up with
a way to deploy this

86
00:04:39.840 --> 00:04:42.450
in a reasonable fashion. That
can be, it was contract

87
00:04:42.450 --> 00:04:44.520
and work. So it needed
to be something that our

88
00:04:44.520 --> 00:04:47.310
contracting client can pick up
from us and, you know,

89
00:04:47.310 --> 00:04:49.920
a 50 step deployment guide
wasn't, wasn't gonna cut it.

90
00:04:50.460 --> 00:04:52.050
And so we talked, we
talked about using containers and

91
00:04:52.050 --> 00:04:54.330
we're working on containerizing it
when I ended up getting

92
00:04:54.330 --> 00:04:57.150
switched off the project. And
the idea was that if

93
00:04:57.150 --> 00:04:59.250
we could make a system
that would build out the

94
00:04:59.250 --> 00:05:01.830
containers with Docker, all they
would have to do is

95
00:05:01.830 --> 00:05:04.290
find a web host. And
there are lots of them

96
00:05:04.290 --> 00:05:06.060
who would be willing to
host the containers in a

97
00:05:06.060 --> 00:05:10.320
managed fashion. And that made
the whole deployment process so

98
00:05:10.320 --> 00:05:13.140
much easier for our customer
and also for us, because

99
00:05:13.140 --> 00:05:16.110
it meant that the deployment
was always consistent, whether that

100
00:05:16.110 --> 00:05:18.120
was in our disaster recovery
system, which was in a

101
00:05:18.120 --> 00:05:21.570
completely different cloud vendor than
our primary cloud vendor. It

102
00:05:21.570 --> 00:05:23.640
all, it all worked out
and it was very, very

103
00:05:23.640 --> 00:05:26.370
consistent. And I think that's
the big thing that a

104
00:05:26.370 --> 00:05:28.170
lot of people are missing
with containers because a lot

105
00:05:28.170 --> 00:05:29.490
of the talks I've been
seeing and a lot of

106
00:05:29.490 --> 00:05:31.440
the blog posts are about
the deep level. This is

107
00:05:31.440 --> 00:05:33.540
how we make containers work
in the Linux kernel, but

108
00:05:33.900 --> 00:05:35.640
the practical, how do I
use them day to day

109
00:05:35.640 --> 00:05:37.950
as a day to day
developer seems to be still

110
00:05:37.950 --> 00:05:39.390
a little bit of a
mystery. And if you just

111
00:05:39.390 --> 00:05:41.400
think about it as a
way of packaging, your site

112
00:05:42.000 --> 00:05:45.420
with the dependencies and everything
else ready to go, it

113
00:05:45.420 --> 00:05:46.710
gets a little easier and
it gets a little more

114
00:05:46.710 --> 00:05:49.440
obvious how that would benefit
you. I mean, repeatability is

115
00:05:49.500 --> 00:05:52.410
the golden standard and deployment
as someone who also did

116
00:05:52.410 --> 00:05:54.540
QA in the testing world,
he wants stuff to be

117
00:05:54.540 --> 00:05:58.370
the same every single time.
Right? Yeah. It seems Like,

118
00:05:58.580 --> 00:06:01.850
I think you're right in,
in so many conferences, it's

119
00:06:01.880 --> 00:06:04.490
a, you know, let's do
Docker one Oh one and

120
00:06:04.490 --> 00:06:06.230
then they're like, here's how
we talk to the Colonel.

121
00:06:06.290 --> 00:06:09.110
And that's not, that's not
necessarily what I want to

122
00:06:09.110 --> 00:06:11.090
hear about. Right? Like I
want to turn on the

123
00:06:11.090 --> 00:06:13.130
faucet and have there be
water. I don't want to

124
00:06:13.130 --> 00:06:15.080
learn how to do plumbing.
You know what I mean?

125
00:06:15.080 --> 00:06:17.690
And while plumbing may be
fascinating, it doesn't help me

126
00:06:17.690 --> 00:06:19.960
practically in my life. Yeah.
And I think that's the,

127
00:06:19.960 --> 00:06:21.310
one of the big things.
I did a series of

128
00:06:21.310 --> 00:06:23.620
blog posts on how to
do a basic rail site,

129
00:06:23.650 --> 00:06:27.310
very basic rail site and
Docker with Docker containers and

130
00:06:27.310 --> 00:06:30.550
then deploying with Kubernetes, which
is one of the current

131
00:06:31.690 --> 00:06:34.750
contenders in the space of
container management. That one happens

132
00:06:34.750 --> 00:06:37.180
to be at least partially
authored by Google. So I

133
00:06:37.180 --> 00:06:38.950
have a little more detailed
knowledge of it, but it's

134
00:06:38.950 --> 00:06:41.440
entirely open source. There's a
lot of, there's more contributors

135
00:06:41.440 --> 00:06:43.270
outside of Google at this
point than there are inside,

136
00:06:43.270 --> 00:06:48.100
which is awesome. And there
are some pretty big stumbling

137
00:06:48.100 --> 00:06:50.410
blocks. If you're thinking about
a system like rails or

138
00:06:50.410 --> 00:06:53.620
a system like Django and
containerizing, first of all, where

139
00:06:53.620 --> 00:06:55.390
do you put the database?
How does that go? And

140
00:06:55.390 --> 00:06:58.600
that's always a huge stumbling
block for folks. Another stumbling

141
00:06:58.600 --> 00:07:00.760
block is, well, how do
you deal with database migrations?

142
00:07:01.570 --> 00:07:03.970
But at the same time,
if you do the work

143
00:07:03.970 --> 00:07:07.120
upfront and there's generally pretty
good patterns for solving those

144
00:07:07.120 --> 00:07:10.420
stumbling blocks, you also get
some pretty cool benefits. Containers

145
00:07:10.420 --> 00:07:15.580
make auto-scaling fairly easy because
you have this box, this

146
00:07:15.820 --> 00:07:18.670
package that is your app.
And there's a lot of

147
00:07:18.670 --> 00:07:21.220
folks to do auto-scaling by
just making more VMs. But

148
00:07:21.220 --> 00:07:22.810
the cool thing about containers
is that I can put

149
00:07:22.810 --> 00:07:25.840
the same container multiple times
on one VM and I

150
00:07:25.840 --> 00:07:29.410
get additional throughput. I get
additional capacity for my site,

151
00:07:29.860 --> 00:07:31.870
and that's really handy for
all doing things like auto

152
00:07:31.870 --> 00:07:35.740
scaling and Kubernetes supports that
as of, I believe the

153
00:07:35.740 --> 00:07:38.410
one, one release and some
of the other container management

154
00:07:38.410 --> 00:07:40.930
tools coming out from other
cloud vendors also support that.

155
00:07:41.560 --> 00:07:44.410
And so there's a lot
of cool advantages. And the

156
00:07:44.410 --> 00:07:46.780
actual day to day packaging
up over the container is

157
00:07:46.780 --> 00:07:50.200
not that hard because doctors
have been great. Docker hub

158
00:07:50.230 --> 00:07:54.580
has example containers for pretty
much every web framework that

159
00:07:54.580 --> 00:07:56.470
you'd want as long as
it runs on some flavor

160
00:07:56.470 --> 00:07:58.720
of Linux. So if you
have rails, you want engine

161
00:07:58.720 --> 00:08:01.660
X, you want Django. There's
a, there's a container sitting

162
00:08:01.660 --> 00:08:02.770
out there that you can
at least use as a

163
00:08:02.770 --> 00:08:04.930
starting point. And there's a
lot of folks will say,

164
00:08:04.930 --> 00:08:07.570
those containers are big. The
rails container in particular has

165
00:08:07.960 --> 00:08:11.650
database drivers for both my
SQL and Postgres, and most

166
00:08:11.650 --> 00:08:13.810
folks don't need both of
those. Most folks would benefit

167
00:08:13.810 --> 00:08:17.080
from only having one, but
at least gets you started.

168
00:08:17.080 --> 00:08:19.270
It makes the barrier to
entry, actually a lot smaller

169
00:08:19.270 --> 00:08:21.400
than you get. When you're
sitting there listening to the,

170
00:08:21.400 --> 00:08:22.930
and this is how we
act the kernel to do

171
00:08:22.930 --> 00:08:25.630
this following thing. You just
actually sit down and try

172
00:08:25.630 --> 00:08:27.820
it. It's really not that
hard, which surprised me a

173
00:08:27.820 --> 00:08:29.620
lot. I actually did a
talk called dev ops for

174
00:08:29.620 --> 00:08:32.410
the lazy using containers as
a way to be lazy.

175
00:08:32.830 --> 00:08:34.090
Because once you have a
bat, once you have a

176
00:08:34.090 --> 00:08:36.550
bundled up the deployment, part's
actually pretty simple because you're

177
00:08:36.550 --> 00:08:39.220
letting Docker or some hosted
container service, do it for

178
00:08:39.220 --> 00:08:43.330
you. So let me, let
me go back and grab

179
00:08:43.330 --> 00:08:45.400
a couple of words and
what you said and dig

180
00:08:45.400 --> 00:08:47.560
a little bit deeper into
them. Because one thing that

181
00:08:47.560 --> 00:08:50.890
you said was consistency. And
then you also said a

182
00:08:50.890 --> 00:08:54.070
number of times, not worrying,
not worrying, which made me

183
00:08:54.070 --> 00:08:57.300
realize that there's been many,
many years where we live

184
00:08:57.300 --> 00:09:00.540
in fear of our deployments,
right? And this is bigger

185
00:09:00.540 --> 00:09:03.660
than continuous integration and continuous
deployment. It's just like, I

186
00:09:03.660 --> 00:09:06.060
don't really know if these
15 machines in the web

187
00:09:06.060 --> 00:09:08.670
farm all have the same
bits on them and if

188
00:09:08.670 --> 00:09:10.500
they're consistent and if they
are in fact what I

189
00:09:10.500 --> 00:09:13.580
wanted to. Yeah. And so
let's talk about the consistency

190
00:09:13.580 --> 00:09:17.510
side first. So there are
lots of ways to deal

191
00:09:17.510 --> 00:09:19.730
with consistency. And again, I'm
coming from a Ruby and

192
00:09:19.730 --> 00:09:22.160
node background. So I'm sure
that other web frameworks have

193
00:09:22.160 --> 00:09:24.830
better or worse or similar
ways of dealing with this,

194
00:09:24.830 --> 00:09:28.520
but in Ruby land, especially
rails, land, and even a

195
00:09:28.520 --> 00:09:31.220
node, you spend a lot
of time stringing together, other

196
00:09:31.220 --> 00:09:33.770
people's libraries. And then you're
pulling those from some canonical

197
00:09:33.770 --> 00:09:38.330
source, whether that's NPM or
rubygems.org or the equivalent for

198
00:09:38.330 --> 00:09:41.630
various other web frameworks. And
is anyone who's done that

199
00:09:41.630 --> 00:09:45.470
professionally knows those services are
almost always a labor of

200
00:09:45.470 --> 00:09:49.190
love by the community. People
aren't paying to keep rubygems.org

201
00:09:49.190 --> 00:09:52.280
up or npm.org. It's actually
not entirely true in Ruby

202
00:09:52.370 --> 00:09:54.500
Ruby lands now because there's
a group of companies that

203
00:09:54.500 --> 00:09:57.950
have decided to sponsor ruby.org,
but they decided to sponsor

204
00:09:57.950 --> 00:09:59.180
it because they needed it
to be up and they

205
00:09:59.180 --> 00:10:02.720
needed it to be consistent.
And I've been bitten by

206
00:10:02.780 --> 00:10:05.270
a developer on my team,
not being careful enough with

207
00:10:05.270 --> 00:10:08.900
the version dependency and having
a library. We needed version

208
00:10:08.900 --> 00:10:11.150
than some breaking way and
only half the machines getting

209
00:10:11.150 --> 00:10:13.730
it because of we did
the rollout over a course

210
00:10:13.730 --> 00:10:17.090
of several days, or we
auto scaled up two days

211
00:10:17.090 --> 00:10:19.280
after a release. And in
that two days, a new

212
00:10:19.280 --> 00:10:22.490
version of something came out
and it broke half of

213
00:10:22.490 --> 00:10:25.670
the machines and someone who's
done ops and testing. The

214
00:10:25.670 --> 00:10:28.910
worst thing in the world
is a bug that only

215
00:10:29.030 --> 00:10:31.760
reprots half the time, especially
when you can't figure out

216
00:10:31.760 --> 00:10:33.710
exactly what half the time
is. And when you're round

217
00:10:33.710 --> 00:10:37.070
robining requests, that makes it
even harder. And so they,

218
00:10:37.070 --> 00:10:39.380
one of the things I
like about containers is that

219
00:10:39.380 --> 00:10:42.140
you build that container once
and then every single machine

220
00:10:42.140 --> 00:10:44.720
gets the exact same bits.
And whether those bits are

221
00:10:44.720 --> 00:10:47.630
the ones you want is,
you know, that's up to

222
00:10:47.630 --> 00:10:49.790
your QA process and your
build process, but at least

223
00:10:49.790 --> 00:10:52.190
all the machines have the
same vets and all the

224
00:10:52.190 --> 00:10:56.090
machines have the same base
file system, too. I know

225
00:10:56.090 --> 00:10:59.540
lots of folks who are
slowly upgrading, like they've, they've

226
00:10:59.750 --> 00:11:01.850
put in a longterm contract
with their called vendor for

227
00:11:01.850 --> 00:11:03.950
a specific machine type and
they own, and now they

228
00:11:03.950 --> 00:11:06.260
need extra machines. So they're
gonna have some of their

229
00:11:06.260 --> 00:11:08.120
machines be an older machine
type. And some of their

230
00:11:08.120 --> 00:11:11.090
machines be a newer, more
powerful machine type. And for

231
00:11:11.090 --> 00:11:13.160
the most part, it shouldn't
matter. But if you're doing

232
00:11:13.160 --> 00:11:14.480
a lot of stuff, like
you're doing a lot of

233
00:11:15.500 --> 00:11:20.210
file processing image processing, video
transcoding, maybe the difference in

234
00:11:20.210 --> 00:11:24.050
disc size or the difference
in GPU is matters. And

235
00:11:24.230 --> 00:11:26.210
when you have containers, you
have a little bit more

236
00:11:26.210 --> 00:11:29.630
access to controlling that, especially
if you use a attached,

237
00:11:29.840 --> 00:11:32.660
attached to network discs, as
opposed to using the disc

238
00:11:32.660 --> 00:11:35.420
inside your container. So that's
kind of the thing on

239
00:11:35.420 --> 00:11:37.520
the consistency and that a
lot of that's coming from

240
00:11:37.520 --> 00:11:39.500
fear from my place. Cause
I mean, I carried a

241
00:11:39.500 --> 00:11:42.980
pager for three years working
in ops and QA. And

242
00:11:42.980 --> 00:11:45.200
the worst thing I hated
was when something didn't RevPro

243
00:11:45.200 --> 00:11:48.740
in test. And I know
cause I've done these container

244
00:11:48.740 --> 00:11:51.500
deployments. Now that the machine
that I deploy, the set

245
00:11:51.500 --> 00:11:55.450
that I deploy locally, exactly
the same set of code

246
00:11:55.450 --> 00:11:57.400
or the stuff that I
deployed to the server that

247
00:11:57.400 --> 00:12:00.010
sits under my desk is
exactly the same code and

248
00:12:00.010 --> 00:12:02.590
will behave in exactly the
same way when I deploy

249
00:12:02.590 --> 00:12:04.360
it to the cloud. Assuming
that the base OS is

250
00:12:04.360 --> 00:12:06.640
the same and getting the
base of us to be

251
00:12:06.640 --> 00:12:11.700
the same as easy. Yeah.
Before containers, I felt like

252
00:12:11.700 --> 00:12:14.160
I was either fighting with
the file system and my

253
00:12:14.160 --> 00:12:17.190
deployment to make sure it
was consistent and reliable. And

254
00:12:17.190 --> 00:12:19.650
I would always end up
with one file being, you

255
00:12:19.650 --> 00:12:21.060
know, some file being out
of date. And then of

256
00:12:21.060 --> 00:12:22.680
course, then it's a flaky
bug. You have to go

257
00:12:22.680 --> 00:12:26.280
hunt down. Or on the
other side, do everything with

258
00:12:26.310 --> 00:12:29.040
virtual machines, which were so
heavy. It's like, this is

259
00:12:29.040 --> 00:12:32.040
only a hundred megabyte web
application. Let me go and

260
00:12:32.040 --> 00:12:35.520
deploy this 30 gigabyte VM
image that gets, you know,

261
00:12:35.530 --> 00:12:37.800
gets me what I need.
And it seems like containers.

262
00:12:38.190 --> 00:12:40.950
Yeah, they do. Especially in
production. They do have the

263
00:12:40.950 --> 00:12:43.230
disadvantage of at least I,
I do all my development

264
00:12:43.230 --> 00:12:45.390
on a Mac and I
still have to run virtual

265
00:12:45.390 --> 00:12:49.110
machines to host my containers.
But it's, it's different than

266
00:12:49.110 --> 00:12:51.060
when I had to do
all my development against the

267
00:12:51.060 --> 00:12:53.490
virtual machine, which I did
for nine months. Cause we

268
00:12:53.490 --> 00:12:57.090
deployed, we set up a,
a virtual machine image that

269
00:12:57.090 --> 00:12:59.760
we all use that mirrored
pretty closely our production image.

270
00:12:59.760 --> 00:13:01.260
And then we all had
to, as a stage into

271
00:13:01.260 --> 00:13:03.960
the local virtual machine and
do our, do all of

272
00:13:03.960 --> 00:13:07.830
our development and testing via
SSH and SEP. And it

273
00:13:07.830 --> 00:13:10.410
was just, it was, it
was incredibly painful. But the

274
00:13:10.410 --> 00:13:12.120
reason we had to do
that was that was the

275
00:13:12.120 --> 00:13:14.760
only way to make it
so that on a contracting

276
00:13:14.760 --> 00:13:16.830
team where we had people
cycling in and out every

277
00:13:16.830 --> 00:13:20.400
couple months, everyone's dev environment
was close enough to production

278
00:13:20.400 --> 00:13:22.680
that we wouldn't end up
with crazy incompatibilities when we

279
00:13:22.680 --> 00:13:24.930
pushed. And that was with
a team that was doing

280
00:13:24.930 --> 00:13:29.040
a good job of continuous
integration and relatively continuous deployment

281
00:13:29.040 --> 00:13:31.020
where to play a couple
of times a week. And

282
00:13:31.020 --> 00:13:32.520
we did a pretty good
job of testing and code

283
00:13:32.520 --> 00:13:35.880
reviews and we still had
those problems. So the fact

284
00:13:35.880 --> 00:13:39.300
that containers, we were looking
at containers specifically because we

285
00:13:39.300 --> 00:13:41.820
needed something a little more
lightweight and a little more

286
00:13:41.820 --> 00:13:44.820
consistent. And I mean, there's
great tools for configuring your,

287
00:13:45.030 --> 00:13:47.130
your systems. I mean, there's
things like chef and puppet

288
00:13:47.130 --> 00:13:50.340
and I've used them and
they're wonderful, but they don't

289
00:13:50.340 --> 00:13:52.860
have the advantage of having
everything be neatly packaged off

290
00:13:52.860 --> 00:13:54.510
with a bow. When you
hand it over to the

291
00:13:54.510 --> 00:13:56.700
ops team. That's one of
the patterns I'm actually seeing

292
00:13:56.700 --> 00:13:59.430
a lot with teams that
use containers is the development

293
00:13:59.430 --> 00:14:03.150
team is responsible for building
the containers. They're responsible for

294
00:14:03.150 --> 00:14:05.280
making sure that their containers
set up and then they

295
00:14:05.280 --> 00:14:08.220
pass it over the wall
to ops as a prepackaged

296
00:14:08.220 --> 00:14:10.080
Mundell that ops all they
have to do is make

297
00:14:10.080 --> 00:14:13.110
sure that there's enough places
to put that container on

298
00:14:13.110 --> 00:14:15.540
the hardware, whether that's virtual
or on prem hardware or

299
00:14:15.540 --> 00:14:18.630
whatever the team has. The
ops team is just responsible

300
00:14:18.630 --> 00:14:21.480
for deploying that container into
the, into the data center

301
00:14:21.540 --> 00:14:24.420
and possibly helping with some
of the networking stuff, but

302
00:14:24.510 --> 00:14:27.420
actually getting all the dependencies.
It's no longer the operations

303
00:14:27.420 --> 00:14:31.650
team's responsibility. That is such
an important point. I'm really

304
00:14:31.650 --> 00:14:33.390
glad that you brought that
up because there've been so

305
00:14:33.390 --> 00:14:37.190
many times where I've felt
that the responsibilities of, of

306
00:14:37.200 --> 00:14:40.500
ops, you know, kind of
their lines were blurred and

307
00:14:40.500 --> 00:14:43.350
they were into my space
and I wanted a certain

308
00:14:43.350 --> 00:14:46.350
file, you know, installed on
the machine or some global

309
00:14:46.500 --> 00:14:49.170
dependency. And I had to
fill out forms and ask

310
00:14:49.170 --> 00:14:51.650
permission and, you know, get,
I couldn't get into a

311
00:14:51.650 --> 00:14:54.350
locked machine because ultimately what
it came down to the

312
00:14:54.350 --> 00:14:57.650
root cause was my app
wasn't neatly packaged up with

313
00:14:57.770 --> 00:15:00.380
all dependencies all the way
down to the operating system.

314
00:15:00.770 --> 00:15:04.010
It went down just halfway.
And then there were, you

315
00:15:04.010 --> 00:15:05.540
know, I had to give
them a word document for

316
00:15:05.540 --> 00:15:07.760
God's sake, you know, with
a list of other, you

317
00:15:07.760 --> 00:15:10.840
know, global. Yeah. I will
admit that at some point

318
00:15:10.840 --> 00:15:13.810
in my distant past, I
figured out what the bribery

319
00:15:13.810 --> 00:15:15.730
for a particular ops team
was. And it happened to

320
00:15:15.730 --> 00:15:19.000
be a specific kind of
candy. And I'm more than

321
00:15:19.000 --> 00:15:21.010
one occasion knocked on the
door to the knock and

322
00:15:21.010 --> 00:15:22.540
with a, you know, handful
of candy. And I'm like

323
00:15:22.540 --> 00:15:26.740
here now, can you please
give me SSH access or

324
00:15:27.490 --> 00:15:29.380
Telnet access or whatever I
needed so that I can

325
00:15:29.380 --> 00:15:31.180
go see the raw logs
on this machine so I

326
00:15:31.180 --> 00:15:33.940
can debug this issue. And
the thing is, I tell

327
00:15:33.940 --> 00:15:36.010
this story to folks and
most of the folks who've

328
00:15:36.010 --> 00:15:37.960
been in the industry for
more than four or five

329
00:15:37.960 --> 00:15:39.880
years, have a similar story
where they've had to do

330
00:15:39.880 --> 00:15:43.300
some sort of bribery or
no late night dealing or

331
00:15:43.540 --> 00:15:46.330
pushing, pushing things up to
three levels of managers in

332
00:15:46.330 --> 00:15:50.110
order to get access, to
actually debug their, their issues

333
00:15:50.110 --> 00:15:53.200
and anything that can help
make those lines a little

334
00:15:53.200 --> 00:15:55.180
bit cleaner. I think it
makes everyone happy. Cause then

335
00:15:55.210 --> 00:15:57.100
it makes the developer happy.
Cause they know that what

336
00:15:57.610 --> 00:15:59.920
they've set up will be
what actually it gets deployed.

337
00:16:00.340 --> 00:16:01.870
And that there isn't going
to be someone saying, no,

338
00:16:01.870 --> 00:16:03.760
actually I think this other
version of this library is

339
00:16:03.760 --> 00:16:07.090
safer, more secure. And at
the same time, ops is

340
00:16:07.090 --> 00:16:09.460
not going to have to
deal with feeling responsible for

341
00:16:09.460 --> 00:16:14.230
debugging. You know, doc has
got 80 deployment steps. Cause

342
00:16:14.230 --> 00:16:15.940
you know, I think a
lot of us have worked

343
00:16:15.940 --> 00:16:18.790
on that app. You have
to pull in all of

344
00:16:18.790 --> 00:16:21.880
these dependencies, you have to
install these particular resources. In

345
00:16:21.880 --> 00:16:24.640
this particular order, you have
to start the apps. There's

346
00:16:24.640 --> 00:16:27.910
a microservices app in the
following order. Otherwise the database

347
00:16:27.910 --> 00:16:30.760
connections don't get resolved. And
most of the ops folks

348
00:16:30.760 --> 00:16:32.260
I know would love to
get out of that business.

349
00:16:32.470 --> 00:16:35.410
So I think the container,
I think the containers model

350
00:16:35.410 --> 00:16:38.110
where the development team deploys
hands over this package and

351
00:16:38.110 --> 00:16:42.130
says, make this go is
gonna make everyone happier. Once

352
00:16:42.130 --> 00:16:43.870
we get used to it,
then that's the big, that's

353
00:16:43.870 --> 00:16:46.900
the big challenge It, and
at that point, at that

354
00:16:46.900 --> 00:16:49.000
point, they just have to
think about there's a box

355
00:16:49.090 --> 00:16:51.400
and there's a port, right.
And make it talk to

356
00:16:51.400 --> 00:16:55.300
that port. Yeah. Perhaps there's
some service discovery stuff. Although

357
00:16:55.300 --> 00:16:58.000
if you're going to use
one of the managed slightly

358
00:16:58.000 --> 00:17:02.350
managed container services from the
big cloud providers that that

359
00:17:02.350 --> 00:17:04.870
solves itself on its own
and or at least they

360
00:17:04.870 --> 00:17:07.480
have easy ways to do
that. And most of the

361
00:17:07.480 --> 00:17:09.310
ops teams I know are
pretty good about setting up

362
00:17:09.350 --> 00:17:11.920
the basic network rules and
those don't change in container

363
00:17:11.920 --> 00:17:15.070
land. Cause again, it's, it's
important. It's important on a

364
00:17:15.070 --> 00:17:19.010
box. Can we talk about
that for a second? You

365
00:17:19.010 --> 00:17:22.030
you've mentioned a couple of
different container services. Like once

366
00:17:22.030 --> 00:17:24.880
you have containers, once you've
picked your container technology, there

367
00:17:24.880 --> 00:17:27.430
are things to manage them
because it's very rare that

368
00:17:27.430 --> 00:17:29.020
you're going to have an
app that lives in one

369
00:17:29.020 --> 00:17:31.090
container and you upload that
one container and that's the

370
00:17:31.090 --> 00:17:33.430
end of at the end
of it, you might start

371
00:17:33.430 --> 00:17:35.890
it. You might get the
container bug and now it's

372
00:17:35.890 --> 00:17:37.600
a dozen. And then it's
two dozen. Next thing you

373
00:17:37.600 --> 00:17:40.180
know, you're managing a swarm
of hundreds of containers. What

374
00:17:40.180 --> 00:17:42.640
are some examples of containers?
I worked for Google. We

375
00:17:42.640 --> 00:17:46.180
have, we are one of
the main sponsors behind the

376
00:17:46.180 --> 00:17:48.430
Kubernetes project. We have a
bunch of folks working on

377
00:17:48.430 --> 00:17:53.970
Kubernetes and Kubernetes for folks
who are familiar with the

378
00:17:53.970 --> 00:17:56.190
ops space and some of
the technologies at Google, Google

379
00:17:56.190 --> 00:17:58.950
runs a lot of stuff
on something called Borg. And

380
00:17:58.950 --> 00:18:01.860
what Kubernetes is, is Google
taking a lot of the

381
00:18:01.860 --> 00:18:04.980
things we learned about how
to run containers at scale,

382
00:18:05.310 --> 00:18:08.190
the kinds of challenges that
are common. And we took

383
00:18:08.190 --> 00:18:11.130
those lessons from Borg and
wrote Kubernetes from scratch. And

384
00:18:11.130 --> 00:18:13.920
what Kubernetes does is it
says you specify what you

385
00:18:13.920 --> 00:18:17.250
want the system to look
like. I have a deep

386
00:18:17.280 --> 00:18:20.880
fondness for programming languages that
are declarative, where you say

387
00:18:20.880 --> 00:18:22.770
what you want, not how
to do something. And so

388
00:18:22.770 --> 00:18:25.560
you might say, I have
this front end app container

389
00:18:26.220 --> 00:18:28.710
that I want, at least
I want six instances of

390
00:18:28.710 --> 00:18:31.200
it. I have a backend
job processor that, you know,

391
00:18:31.200 --> 00:18:33.000
maybe sends out an email
or maybe there's a video

392
00:18:33.000 --> 00:18:35.520
transcoding or something in the
background. And I want three

393
00:18:35.520 --> 00:18:38.340
instances of that. And then
I have this database container

394
00:18:38.340 --> 00:18:39.900
and I only need one
instance of that, but it

395
00:18:39.900 --> 00:18:42.630
needs a persistent disc attached
to it because I don't

396
00:18:42.630 --> 00:18:45.570
want to, one of the
pitfalls of containers is that

397
00:18:46.170 --> 00:18:48.690
general best practices. You should
be prepared for your container

398
00:18:48.690 --> 00:18:50.640
to die at any time.
Not because they do, but

399
00:18:50.640 --> 00:18:53.970
because the advantages of containers
are that you can move

400
00:18:53.970 --> 00:18:56.070
them around. And so if
you need something like a

401
00:18:56.070 --> 00:18:58.230
database, which a lot of
people are kind of iffy

402
00:18:58.230 --> 00:19:00.030
about putting in containers, but
I've done it and it

403
00:19:00.030 --> 00:19:03.330
works great. You just need
to have a disc, some

404
00:19:03.330 --> 00:19:05.250
sort of block store discs,
cause they get attached to

405
00:19:05.250 --> 00:19:08.130
the container that it can
put the database files on.

406
00:19:09.150 --> 00:19:11.430
And with Kubernetes, you say,
you just specify out in

407
00:19:11.430 --> 00:19:15.090
Yamhill or Jason, this container
named this many instances, this

408
00:19:15.090 --> 00:19:18.150
container named this many instances.
And then we also provide

409
00:19:18.150 --> 00:19:20.370
a way through your Kubernetes
to do discovery where you

410
00:19:20.370 --> 00:19:23.340
can say everything in this
container is part of this

411
00:19:23.340 --> 00:19:26.430
service. And so you can
hook the containers together via

412
00:19:26.430 --> 00:19:29.790
the service names pretty easily
and figuring out which IP

413
00:19:29.790 --> 00:19:31.800
that is in round robining
and stuff is all taken

414
00:19:31.800 --> 00:19:34.350
care of for you. Once
you have a Kubernetes cluster

415
00:19:34.350 --> 00:19:36.450
up and running and I'm,
I will admit for me,

416
00:19:36.450 --> 00:19:39.090
at least setting up a
Kubernetes cluster is way more

417
00:19:39.090 --> 00:19:42.270
complicated than I want to
get into. Luckily hosted Kubernetes

418
00:19:42.270 --> 00:19:46.140
exists, Google calls it Google
container engine. And so that's

419
00:19:46.140 --> 00:19:48.510
one option. There's also tools
like Dockers forum, which I've

420
00:19:48.510 --> 00:19:50.970
played with a bit, it's
a little bit lighter weight.

421
00:19:51.720 --> 00:19:55.410
It's not designed to do
all the niceties of service

422
00:19:55.410 --> 00:19:58.740
discovery and stuff for you.
I know Amazon has their

423
00:19:58.740 --> 00:20:00.690
container product. I know some
folks who work on it

424
00:20:01.200 --> 00:20:05.160
and it has some, again,
some slight philosophy differences on

425
00:20:05.370 --> 00:20:08.310
how containers should be managed
from Kubernetes. And that's one

426
00:20:08.310 --> 00:20:11.190
of the things I find
interesting about this space is

427
00:20:11.190 --> 00:20:13.350
that there's a couple of
companies who have been playing

428
00:20:13.350 --> 00:20:15.840
in it for a while
and actually using containers in

429
00:20:15.840 --> 00:20:17.490
production for a while. And
they all seem to have

430
00:20:17.490 --> 00:20:20.490
different opinions on best practices.
And it'll be interesting over

431
00:20:20.490 --> 00:20:22.320
the next year or two
as more people pick up

432
00:20:22.320 --> 00:20:25.620
containers to see which best
practices seem to come out.

433
00:20:26.160 --> 00:20:28.800
I have a fondness for
the Kubernetes system, partly just

434
00:20:28.800 --> 00:20:31.410
because I'm most familiar with
it, but also because anyone

435
00:20:31.410 --> 00:20:33.660
who takes care of my
networking and my service discovery

436
00:20:33.660 --> 00:20:36.000
for me is going to
get massive bonus points is

437
00:20:36.000 --> 00:20:38.490
I find that stuff tedious.
So if I can just

438
00:20:38.490 --> 00:20:40.830
say, Hey, I need five
versions of this container and

439
00:20:40.830 --> 00:20:43.290
they should all respond to
this name and we should

440
00:20:43.290 --> 00:20:46.800
automatically round Robin between them.
And I can do that

441
00:20:46.800 --> 00:20:49.600
all six lines of Yammel
I'm, I'm all, I'm all

442
00:20:49.600 --> 00:20:52.360
in on that. That's great
because it lets me be

443
00:20:52.360 --> 00:20:55.420
lazy. So there's a lot
of those. There's just, I

444
00:20:55.420 --> 00:20:56.800
mean, those are the three
big ones that I know

445
00:20:56.800 --> 00:20:58.630
of. I'm sure there are
more, that I'm not a

446
00:20:58.630 --> 00:21:01.060
hundred percent aware of. And
I know that there are

447
00:21:01.060 --> 00:21:03.490
more people coming out with
different ways of managing containers

448
00:21:03.490 --> 00:21:05.620
every single day. Like when
I started working on this

449
00:21:05.620 --> 00:21:09.040
a year ago, the list
was entirely different. So it's

450
00:21:09.040 --> 00:21:13.720
one of those rapidly changing
things based on people's opinions

451
00:21:13.720 --> 00:21:16.450
and based just also based
on people's experiences of running

452
00:21:16.450 --> 00:21:19.110
containers in production and what
ends up being hard. Right.

453
00:21:19.140 --> 00:21:22.710
Right. It seems like right
now there's like a bit

454
00:21:22.710 --> 00:21:24.480
of a, I wouldn't say
a cold war, but you

455
00:21:24.480 --> 00:21:26.430
know, like there's just lots
of different people doing lots

456
00:21:26.430 --> 00:21:28.770
of different innovations. And from
the people on the outside

457
00:21:28.770 --> 00:21:31.680
who maybe aren't doing containers,
they're hearing all of these

458
00:21:31.680 --> 00:21:35.340
strange new words, whether it
be Kubernetes or zookeeper or

459
00:21:35.370 --> 00:21:39.360
misos or swarm. And they're
wondering how all these things

460
00:21:39.660 --> 00:21:42.750
plug into each other and,
and whether the layer cake

461
00:21:42.840 --> 00:21:44.970
that they would be choosing
as a company would be

462
00:21:44.970 --> 00:21:47.580
the right layer cake. And
then of course the bottom

463
00:21:47.580 --> 00:21:49.350
layer of the cake would
be the cloud that they,

464
00:21:49.590 --> 00:21:51.900
that they pick that they
put the thing on. And

465
00:21:51.900 --> 00:21:54.180
in the past, you know,
cross cloud has been kind

466
00:21:54.180 --> 00:21:56.520
of a myth. It hasn't
like there's always been vendor

467
00:21:56.520 --> 00:21:58.980
lock in at some point,
but do you think containers

468
00:21:58.980 --> 00:22:03.750
could allow us to really
have a cloud portability? That's

469
00:22:03.750 --> 00:22:06.000
my big hope. And when
I go to conferences and

470
00:22:06.000 --> 00:22:08.190
I'm talking to folks and
since I work at Google

471
00:22:08.190 --> 00:22:10.380
and I'm an advocate for
Google cloud, I'm talking to

472
00:22:10.380 --> 00:22:13.170
folks about Google cloud and
very few of the big

473
00:22:13.170 --> 00:22:15.690
to medium sized companies. I've
been talking to really want

474
00:22:15.690 --> 00:22:17.910
to stick with one cloud.
And they're like, well, how

475
00:22:17.910 --> 00:22:20.670
can we, how can we
do this so that, you

476
00:22:20.670 --> 00:22:22.980
know, on the off chance
that there's a massive outage

477
00:22:23.010 --> 00:22:28.800
or, you know, stuff happens,
Intercontinental fiber cables get eaten

478
00:22:28.800 --> 00:22:30.930
by it and get bitten,
getting apart by sharks and

479
00:22:30.930 --> 00:22:33.840
stuff, right? Lightning storms happen,
how can we make it

480
00:22:33.840 --> 00:22:37.320
so that we can stay
up? Even if this happens

481
00:22:37.320 --> 00:22:38.940
in one of our vendors
go down. I mean, every

482
00:22:38.940 --> 00:22:41.760
major cloud provider has had
at least a regional outage

483
00:22:41.790 --> 00:22:44.340
that people in the industry
I've heard about. And the

484
00:22:44.340 --> 00:22:46.980
nice thing about containers is
that as long as you

485
00:22:46.980 --> 00:22:50.190
can get Docker or whatever,
your container runner is on

486
00:22:50.580 --> 00:22:53.370
some version of Linux that
supports it, you can move

487
00:22:53.370 --> 00:22:55.080
your containers anywhere and you
can just pick them up

488
00:22:55.080 --> 00:22:58.380
wholesale. That doesn't deal with
the data piece. If you're

489
00:22:58.440 --> 00:23:01.080
writing to your cloud providers,
specific storage, but most of

490
00:23:01.080 --> 00:23:02.610
the cloud providers I've talked
to and I've been on

491
00:23:02.610 --> 00:23:06.780
panels with folks from Microsoft
and AWS, they're all like,

492
00:23:06.780 --> 00:23:08.310
no, we, we want to
make it so that you

493
00:23:08.310 --> 00:23:10.500
can move because competition is
good for us in this

494
00:23:10.500 --> 00:23:13.650
space. And I really believe
that's true. And the nice

495
00:23:13.650 --> 00:23:15.900
thing about containers though, is
that unlike some of the

496
00:23:15.900 --> 00:23:17.970
platform, as a service stuff,
where you get locked into

497
00:23:17.970 --> 00:23:20.370
a specific runtime and a
specific set of tools that

498
00:23:20.370 --> 00:23:24.060
a provider might support, if
you, if you can do

499
00:23:24.060 --> 00:23:26.010
the upfront effort and it
is a little more effort

500
00:23:26.010 --> 00:23:28.050
than just deploying to something,
that's a platform as a

501
00:23:28.050 --> 00:23:30.030
service where you're just like,
here's my get repo go.

502
00:23:31.530 --> 00:23:33.720
If you can do the
upfront effort, it gives you

503
00:23:33.720 --> 00:23:35.910
more portability. I can take
the same containers that I

504
00:23:35.910 --> 00:23:38.820
ran on Google container engine.
I can run them on

505
00:23:38.820 --> 00:23:41.820
hardware that I have physical
hardware that I've bought. And

506
00:23:41.820 --> 00:23:43.860
that's what a lot of
folks that I've been talking

507
00:23:43.860 --> 00:23:47.120
to are doing. They need,
they, they're still trying to

508
00:23:47.120 --> 00:23:49.040
convince their upper level management
that the cloud is a

509
00:23:49.040 --> 00:23:51.710
good idea, but they want
to be prepared for it.

510
00:23:51.710 --> 00:23:54.170
So they're starting out by
getting all their stuff internally,

511
00:23:54.170 --> 00:23:57.590
containerized, partly because it lets
them use their limited hardware

512
00:23:57.590 --> 00:24:00.380
resources better. They can run
multiple apps on a VM

513
00:24:00.380 --> 00:24:02.840
in a ways that they
don't collide. But also it

514
00:24:02.840 --> 00:24:04.460
means that when it's time
to move to the cloud

515
00:24:04.460 --> 00:24:06.170
or when they have that
really good day or they

516
00:24:06.170 --> 00:24:10.190
go viral, they can add
capacity quickly because they have

517
00:24:10.190 --> 00:24:12.050
this image that they can
deploy and start up in

518
00:24:12.050 --> 00:24:15.590
a couple of minutes, it's
like a Kubernetes cluster running

519
00:24:15.590 --> 00:24:17.540
rails. I can get the
whole thing up and running,

520
00:24:17.930 --> 00:24:20.930
including downloading the images from
Docker hub in less than

521
00:24:20.930 --> 00:24:23.900
five minutes. And that's awesome
compared to how long some

522
00:24:23.900 --> 00:24:26.570
of my deployments took with
tools like chef and puppet,

523
00:24:26.570 --> 00:24:28.490
where I was having to
do multiple passes to get

524
00:24:28.490 --> 00:24:31.660
all of the environment variables
and everything set correctly. Right.

525
00:24:31.690 --> 00:24:33.370
And that's something that people
almost need to see to

526
00:24:33.370 --> 00:24:35.950
believe. Yeah, there's a, there's
a great video done by

527
00:24:35.950 --> 00:24:40.360
one of my coworkers, Brian Dorsey,
where he had one of

528
00:24:40.360 --> 00:24:44.800
the lead developers on Kubernetes
timed, making a latte versus

529
00:24:44.800 --> 00:24:47.590
starting up a Kubernetes cluster.
And it was, it was

530
00:24:47.590 --> 00:24:49.420
kind of ridiculous, but it
also pointed it out. And

531
00:24:49.420 --> 00:24:51.280
one of the demos I
like to do with containers

532
00:24:51.280 --> 00:24:53.560
is I like to kill
one of the VMs that

533
00:24:53.560 --> 00:24:55.480
I'm using to run my
set of containers and then

534
00:24:55.480 --> 00:24:58.150
watch the scheduler, move them
around so that I don't

535
00:24:58.480 --> 00:25:02.920
lose any capacity. And you
know, you hope that your

536
00:25:02.920 --> 00:25:05.380
VM doesn't die, but sometimes
they do. You hope that

537
00:25:05.380 --> 00:25:07.840
your hard drive doesn't die,
but sometimes they do. And

538
00:25:08.440 --> 00:25:10.690
seeing that the whole thing
can be reconfigured in less

539
00:25:10.690 --> 00:25:13.750
than two seconds. And it
really is that fast is

540
00:25:13.750 --> 00:25:16.480
just amazing because coming from
a world where I did

541
00:25:16.690 --> 00:25:20.320
to manually, I couldn't recover
from it. I couldn't recover

542
00:25:20.320 --> 00:25:23.440
from a disc failure that
quickly. Like I remember getting

543
00:25:23.440 --> 00:25:26.980
in the car with the
ops manager, my boss and

544
00:25:26.980 --> 00:25:30.220
driving down to the data
center South of Seattle and

545
00:25:30.220 --> 00:25:33.400
going in and dealing with
a machine that had gone

546
00:25:33.400 --> 00:25:35.500
bad because the data center
had had a fire. And

547
00:25:35.500 --> 00:25:37.840
like that was like, it
was a big deal. We

548
00:25:37.840 --> 00:25:41.410
were offline for three hours.
And if we had a

549
00:25:41.410 --> 00:25:44.500
been in the cloud and
B been using container-based technology,

550
00:25:45.520 --> 00:25:47.320
it wouldn't have been that
bad. We may have lost

551
00:25:47.320 --> 00:25:49.570
a little bit of time,
data, database replication to get

552
00:25:49.570 --> 00:25:51.130
to a different data center.
But even if we had

553
00:25:51.130 --> 00:25:53.500
set up a proper disaster
recovery with a replica, with

554
00:25:53.500 --> 00:25:56.530
a replica at another data
center, which is considered best

555
00:25:56.530 --> 00:25:59.800
practice at this point, we
wouldn't have lost hardly any

556
00:25:59.800 --> 00:26:03.090
time at all. And that's
the idea that, that that

557
00:26:03.100 --> 00:26:05.560
is the AI that's possible
and be unlike five years

558
00:26:05.560 --> 00:26:07.750
ago. And that seemed really
hard and required a lot

559
00:26:07.750 --> 00:26:12.760
of just duplicating effort, having
hot, hot swappable servers on

560
00:26:12.760 --> 00:26:16.030
that. You're not using, you
don't have to do that

561
00:26:16.030 --> 00:26:17.980
anymore. If you have the
container image up, getting it

562
00:26:17.980 --> 00:26:21.310
up and running is, you
know, 10 minute process in

563
00:26:21.310 --> 00:26:24.100
different data center for your
provider, possibly even less. Right.

564
00:26:24.880 --> 00:26:27.070
Yeah. And people who are
listening might be like, some

565
00:26:27.070 --> 00:26:28.870
may be nodding and some,
some may be going now

566
00:26:28.890 --> 00:26:32.230
that's Oh, that's exaggeration. But
it really isn't because once

567
00:26:32.230 --> 00:26:34.900
you, you know, all of
the, all the Lego pieces

568
00:26:34.900 --> 00:26:37.240
are here now, we've got,
you know, durable storage that

569
00:26:37.240 --> 00:26:39.160
we can rely on. And
we, That's just the right

570
00:26:39.160 --> 00:26:42.250
layers of abstraction. And you
know, whether you do decide

571
00:26:42.250 --> 00:26:45.050
to pick, you know, Docker
swarm and compose, or whether

572
00:26:45.050 --> 00:26:47.550
you decide to use that
patchy mezzos or whatever, whatever

573
00:26:47.550 --> 00:26:51.510
thing that you pick, it
does appear that the cloud

574
00:26:51.510 --> 00:26:54.840
vendors are allowing for choice.
Like one of the teams

575
00:26:54.840 --> 00:26:56.520
that I worked on as
a PA was on the

576
00:26:56.520 --> 00:26:59.880
Azure container service. And, you
know, you might go, no,

577
00:26:59.880 --> 00:27:01.380
it's going to be Microsoft
Azure and they're going to

578
00:27:01.380 --> 00:27:03.960
make you use their stuff,
but it uses swarm and

579
00:27:03.960 --> 00:27:05.400
it uses misos and you
can pick the one that

580
00:27:05.400 --> 00:27:08.490
makes you happy. So then
theoretically, you could run a

581
00:27:08.490 --> 00:27:11.100
container on Google cloud. You
could move it to AWS,

582
00:27:11.100 --> 00:27:12.900
you could move it to
Azure and it would just

583
00:27:12.930 --> 00:27:16.710
behave the same way everywhere.
And presumably then they compete

584
00:27:17.040 --> 00:27:20.790
not based on their, on
their container. Toolings is that,

585
00:27:20.790 --> 00:27:22.430
would it be all of
us? There was some container

586
00:27:22.430 --> 00:27:25.160
to Lehman's closed source. Some
of the, some of the

587
00:27:25.160 --> 00:27:27.560
vendors are putting out their
own container services that are

588
00:27:27.560 --> 00:27:31.610
close to ours. And even
Kubernetes, the hosted version has

589
00:27:31.610 --> 00:27:34.640
some closed source components, but
the base underlying Kubernetes is

590
00:27:34.640 --> 00:27:38.270
entirely open source and completely
developed in the open that's.

591
00:27:38.270 --> 00:27:39.830
One of the big things
is that all the bugs

592
00:27:39.830 --> 00:27:42.740
and everything are tracked in
the open and it's community-based.

593
00:27:43.850 --> 00:27:47.300
And the whole idea is
that, is that containers seem

594
00:27:47.300 --> 00:27:48.980
like they're a really, really
good way to solve a

595
00:27:48.980 --> 00:27:51.320
lot of the problems that
folks are having. And specifically

596
00:27:51.320 --> 00:27:52.910
a lot of the problems
that are preventing folks from

597
00:27:52.910 --> 00:27:55.700
adopting the cloud, cause they
don't want to be locked

598
00:27:55.700 --> 00:27:57.890
in. And if you know
that the promise of containers

599
00:27:57.890 --> 00:27:59.930
is, and thus far, I've
seen it to be true,

600
00:28:00.380 --> 00:28:01.940
that you can package this
thing up and pick it

601
00:28:01.940 --> 00:28:04.190
up and take it somewhere
else. If your provider isn't

602
00:28:04.190 --> 00:28:06.740
doing what you want, if
your provider doesn't have a

603
00:28:06.740 --> 00:28:09.380
data center in the region
that you need, or if,

604
00:28:09.380 --> 00:28:10.850
you know, it's just going
to be cheaper to move

605
00:28:10.850 --> 00:28:13.760
it elsewhere. And I think
everyone benefits, at least all

606
00:28:13.770 --> 00:28:17.540
the big cloud providers benefit
when people have choice, because

607
00:28:17.540 --> 00:28:20.480
it will encourage cloud providers
to make better tools. And

608
00:28:20.480 --> 00:28:23.090
it will also let folks
do actually do cross cloud

609
00:28:23.090 --> 00:28:28.040
for real, because it just
seems not unwise for a

610
00:28:28.040 --> 00:28:32.120
really big site with really
strict uptime requirements to necessarily

611
00:28:32.120 --> 00:28:35.480
put all of their, all
of their eggs in one

612
00:28:35.480 --> 00:28:37.190
basket. So to speak. I
know there are folks doing

613
00:28:37.190 --> 00:28:38.480
it, and I know there
are folks doing it very

614
00:28:38.480 --> 00:28:42.650
successfully, but I also know
that if you're not one

615
00:28:42.650 --> 00:28:46.430
of the huge players, it's
frequently easier to sell your

616
00:28:46.670 --> 00:28:48.800
management chain on the cloud.
If you can sell them

617
00:28:48.920 --> 00:28:52.190
on something that's cross-cloud that
you can promise to them

618
00:28:52.190 --> 00:28:55.100
that if one of your
providers has a bad day,

619
00:28:55.100 --> 00:28:57.980
you're not going to be
completely out of luck. And

620
00:28:58.010 --> 00:28:59.750
at least that was my
experience. We had a lot

621
00:28:59.750 --> 00:29:02.330
of problems selling folks on
the cloud, both of the

622
00:29:02.330 --> 00:29:05.270
startup I worked at for
five years and also when

623
00:29:05.270 --> 00:29:08.480
I was consulting. And once
we were able to convince

624
00:29:08.480 --> 00:29:10.970
them that we would happily
support across cloud solution or

625
00:29:10.970 --> 00:29:14.450
one provider was the disaster
recovery for the other. They

626
00:29:14.450 --> 00:29:16.460
were much more willing to
accept the cloud as opposed

627
00:29:16.460 --> 00:29:19.310
to having to expose, to
wanting to buy and maintain

628
00:29:19.310 --> 00:29:21.440
their own hardware. And we
wanted them to be on

629
00:29:21.440 --> 00:29:23.480
the cloud just because it
made it easier for us

630
00:29:23.540 --> 00:29:25.160
to manage. And it made
it easier for us to

631
00:29:25.160 --> 00:29:29.540
upgrade systems and debatably. We
thought it was more cost

632
00:29:29.540 --> 00:29:32.120
effective because it let us
scale the system down when

633
00:29:32.120 --> 00:29:34.490
we weren't using it. A
lot of the products I've

634
00:29:34.490 --> 00:29:38.390
worked on have very particular
time-based load curves, being able

635
00:29:38.390 --> 00:29:42.130
to dynamically scale really helps
with cost. So yeah, there's

636
00:29:42.130 --> 00:29:44.920
a lot of advantages and
I really think containers while

637
00:29:44.920 --> 00:29:47.140
they're a buzzword. I do
think that for a lot

638
00:29:47.140 --> 00:29:49.960
of people, they're at least
worth investigating to see if

639
00:29:49.960 --> 00:29:53.170
it might solve some of
the current pain process pain

640
00:29:53.170 --> 00:29:55.360
prop points in your deployment
process or in your ops

641
00:29:55.360 --> 00:29:59.110
story. Yeah. I really liked
the way that it formalizes

642
00:29:59.110 --> 00:30:02.440
responsibilities. Like the part of
this conversation that is resonated

643
00:30:02.440 --> 00:30:06.010
with me the most is
the, the idea of choice,

644
00:30:06.070 --> 00:30:08.950
but also the idea of
responsibilities, like what's dev ops

645
00:30:09.220 --> 00:30:12.880
real job. And where's the
clean bright line between what

646
00:30:12.880 --> 00:30:14.500
they do and what I
do as a developer. But

647
00:30:14.500 --> 00:30:16.570
then from a container perspective,
like what's the job of

648
00:30:16.570 --> 00:30:19.270
the operating system. What's what's
what is the app represent?

649
00:30:19.270 --> 00:30:21.670
How cleanly is it packaged?
And what's the job of

650
00:30:21.670 --> 00:30:24.520
the cloud that the thing
sits on and ultimately who

651
00:30:24.520 --> 00:30:27.730
owns your, who owns your
uptime, right. You know, you

652
00:30:27.730 --> 00:30:30.580
do. And if you want
to go with a hybrid

653
00:30:30.580 --> 00:30:32.620
cloud where the cloud is
with another cloud providers or

654
00:30:32.630 --> 00:30:36.190
backup, that's absolutely your right.
And you should have a

655
00:30:36.190 --> 00:30:40.000
technology stack that supports that
hopefully formalize the mean, my

656
00:30:40.000 --> 00:30:42.400
big hope is that this
will make everything a little

657
00:30:42.400 --> 00:30:45.130
cleaner and a little easier
and a lot less messy

658
00:30:45.280 --> 00:30:48.100
in between the steps of
making something cool and sharing

659
00:30:48.100 --> 00:30:51.040
that something cool with the
rest of the world. And

660
00:30:51.100 --> 00:30:52.960
we'll see, I mean, this
is still new days for

661
00:30:52.960 --> 00:30:55.180
a lot of this technology.
I mean, Kubernetes only went

662
00:30:55.180 --> 00:30:58.840
one last fall, I believe.
And Docker swarm and compose

663
00:30:59.020 --> 00:31:01.960
that store, that all that
stuff's under active development, the

664
00:31:01.970 --> 00:31:04.720
container services from other cloud
providers are under active development.

665
00:31:05.290 --> 00:31:06.970
And I'm guessing in the
next six months to a

666
00:31:06.970 --> 00:31:10.240
year, maybe longer, I'm not
a prognosticator and we'll start

667
00:31:10.240 --> 00:31:12.040
it. We'll be starting to
see some best practices in

668
00:31:12.040 --> 00:31:14.020
this area. And I definitely
have some opinions and I've

669
00:31:14.020 --> 00:31:16.570
shared some of them, but
I'm also just curious to

670
00:31:16.570 --> 00:31:18.580
see what people do with
this, what people do with

671
00:31:18.580 --> 00:31:21.250
this technology and how it
helps them make cool things

672
00:31:21.250 --> 00:31:24.190
faster. Yeah. It definitely seems
like it's here to stay.

673
00:31:24.190 --> 00:31:27.580
It's not just buzzwords. Yeah.
I definitely agree. Cool. Well,

674
00:31:27.580 --> 00:31:29.650
thanks so much for chatting
with me today. This was

675
00:31:29.650 --> 00:31:32.800
lovely. Thank you. This has
been another episode of Hanselminutes

676
00:31:32.830 --> 00:31:41.670
and we'll see you again
next week. <inaudible>.

