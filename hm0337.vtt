WEBVTT FILE

1
00:00:12.210 --> 00:00:17.790
From hanselminutes.com. It's Hansel minutes,
a weekly discussion with web

2
00:00:17.790 --> 00:00:22.410
developer and technologists. Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.410 --> 00:00:28.680
number three 39. Recorded live
Tuesday, October 2nd, 2012. This episode is

4
00:00:28.680 --> 00:00:31.650
brought to you by Tellerik
offering the best in developer

5
00:00:31.650 --> 00:00:39.300
tools and support online@telerik.com and
by Franklin star net training

6
00:00:39.300 --> 00:00:42.690
developers to work smarter and
now offering gesture pack a

7
00:00:42.690 --> 00:00:46.350
powerful gesture, recording and recognition
system for Microsoft connect for

8
00:00:46.350 --> 00:00:52.680
windows developers details@gesturepak.com. In this
episode, Scott talks with Dez

9
00:00:52.680 --> 00:00:59.330
humble and Martin Fowler about
continuous delivery. Hi, this is

10
00:00:59.330 --> 00:01:01.430
Scott Hanselman. This is another
episode of Hansel minutes and

11
00:01:01.430 --> 00:01:03.770
I'm here in Denmark at
the GoTo conference and I'm

12
00:01:03.770 --> 00:01:07.190
sitting down with Martin Fowler.
How are you, sir? And

13
00:01:07.370 --> 00:01:10.640
good jazz. Humble. Just humble
has written the book on

14
00:01:10.640 --> 00:01:13.910
continuous delivery along with David Farley.
How's it going? Great. Thanks

15
00:01:13.910 --> 00:01:15.590
for hugging me. Is it
okay to say you've written

16
00:01:15.620 --> 00:01:18.190
the book because you've written
a book, a short that

17
00:01:18.190 --> 00:01:20.930
that works fine. I think
it's, it's somehow more impressive

18
00:01:20.930 --> 00:01:22.550
to say you've written the,
have there been any other

19
00:01:22.550 --> 00:01:26.870
books on continuous delivery? Not
specifically, no, I think this

20
00:01:26.870 --> 00:01:30.440
is the first one. There's
a continuous integration book. That

21
00:01:30.440 --> 00:01:34.120
was an earlier book in
my series, but that to

22
00:01:34.120 --> 00:01:37.100
explore later on, that's not
quite the same thing. Okay.

23
00:01:37.130 --> 00:01:40.520
Okay. So continuous delivery is
a really interesting topic because

24
00:01:40.520 --> 00:01:42.650
it's, it's fun to say,
and it's a fun buzz

25
00:01:42.650 --> 00:01:45.890
word and everyone everyone's bought
into the wisdom around continuous

26
00:01:45.890 --> 00:01:50.480
integration. Obviously the next step
is to deliver stuff continuously.

27
00:01:50.750 --> 00:01:52.310
And in the book, you
talk about a number of

28
00:01:52.310 --> 00:01:56.390
different things around creating a
pipeline, a deployment pipeline, but

29
00:01:56.600 --> 00:02:00.140
as someone who had done
similar things, while I hadn't

30
00:02:00.230 --> 00:02:04.250
named them in 2005, 2006,
the thing that struck me

31
00:02:04.250 --> 00:02:06.740
the most was that it
doesn't, it seem like it

32
00:02:06.740 --> 00:02:09.800
is simply the will that
is required to do this

33
00:02:09.800 --> 00:02:13.400
more than it is the
process. Yeah, I think that's

34
00:02:13.400 --> 00:02:15.830
a various deep observation and
I think you're quite right.

35
00:02:15.860 --> 00:02:17.810
None of this stuff is
really that new and it's

36
00:02:17.810 --> 00:02:20.360
stuff that we were doing
in around the same time

37
00:02:20.360 --> 00:02:23.060
periods and other people in
Silicon Valley were doing, you

38
00:02:23.060 --> 00:02:25.520
know, the IVs of this
world, we're doing continuous deployment

39
00:02:25.730 --> 00:02:28.310
around the same time. And
I think what was different

40
00:02:28.310 --> 00:02:31.250
about those companies is like
you say that the will

41
00:02:31.490 --> 00:02:34.010
and the need the necessity
to actually get stuff out

42
00:02:34.010 --> 00:02:37.070
there quickly and get feedback
on it quickly. So it

43
00:02:37.070 --> 00:02:40.370
kind of came from a
business imperative. And also just

44
00:02:40.580 --> 00:02:43.460
from the fact it's so
frustrating to have to wait

45
00:02:43.460 --> 00:02:44.980
for such a long time
for your code to get

46
00:02:44.980 --> 00:02:48.920
out there. It's partly just
reducing misery or, you know,

47
00:02:49.020 --> 00:02:51.710
the converse, which is improving
your, your happiness as a

48
00:02:51.710 --> 00:02:57.200
developer. Yeah. I remember one
of my earlier involvements with

49
00:02:57.200 --> 00:02:59.890
it was when I visited
Kent when he was working

50
00:02:59.890 --> 00:03:03.880
in Switzerland in the late
nineties and they were doing

51
00:03:03.880 --> 00:03:08.320
this insurance system for extremely
rich Swiss people. And they

52
00:03:08.320 --> 00:03:12.430
were pushing to production every
night. And you know, they

53
00:03:12.430 --> 00:03:13.960
did that for a year
and wants to have to

54
00:03:13.960 --> 00:03:17.440
roll back and that was
kind of normal. But the

55
00:03:17.440 --> 00:03:20.410
thing is that in that
environment, Kent was in this

56
00:03:20.410 --> 00:03:23.230
really nice, small talk environment.
It was fairly straightforward to

57
00:03:23.230 --> 00:03:25.810
go through it. I pushed
to production path through our

58
00:03:25.810 --> 00:03:29.740
clients that pushed the production
path is as minefields and

59
00:03:29.740 --> 00:03:33.850
dragons, some of which are
technical, but the really muscular

60
00:03:33.850 --> 00:03:39.220
dragons, a human usually when
did pushing to production become

61
00:03:39.220 --> 00:03:42.100
such a big deal. I
mean, in, in the early

62
00:03:42.100 --> 00:03:44.050
nineties I was developing software
and I don't remember a

63
00:03:44.050 --> 00:03:47.890
lot of fear around that
somewhere in the late nineties,

64
00:03:47.890 --> 00:03:51.130
early two thousands, it became
scary to put something into

65
00:03:51.130 --> 00:03:54.940
production. Is that a language
reason or a cultural reason?

66
00:03:55.570 --> 00:03:58.060
I don't know. I feel
it's always been a big

67
00:03:58.060 --> 00:04:01.200
deal, but the thing was
in the past, it was

68
00:04:01.210 --> 00:04:02.650
only the thing you did
at the end of the

69
00:04:02.650 --> 00:04:06.160
project. I mean it's two
years and then we go

70
00:04:06.160 --> 00:04:09.640
to production. So yeah, it's
a big deal, but it's

71
00:04:09.640 --> 00:04:12.190
got a different context. But
when you're saying to yourself,

72
00:04:12.190 --> 00:04:14.890
well, we want to build
this software in tiny increments

73
00:04:15.160 --> 00:04:19.930
of user valuable features every
few weeks. And as soon

74
00:04:19.930 --> 00:04:23.350
as possible, put them into
production and then continue putting

75
00:04:23.350 --> 00:04:25.960
stuff out, then it becomes
a whole big deal because

76
00:04:25.960 --> 00:04:28.600
the process that's going to
be okay to do once

77
00:04:28.600 --> 00:04:31.150
every two or three years
is not what you want

78
00:04:31.150 --> 00:04:33.120
to be doing every week.
And I think the other

79
00:04:33.120 --> 00:04:36.420
thing is that people naturally
equate released with deployment. You

80
00:04:36.420 --> 00:04:38.310
think it's the same thing,
you know, we're gonna, we're

81
00:04:38.310 --> 00:04:40.170
going to deploy to production.
And that's, that's when we

82
00:04:40.170 --> 00:04:42.090
release our software. And I
think one of the things

83
00:04:42.090 --> 00:04:45.150
that I've realized is actually
really important is to distinguish

84
00:04:45.150 --> 00:04:47.970
between those two things. One
of the things that Facebook

85
00:04:47.970 --> 00:04:50.280
talk about Chuck Ross, he
gives a talk where he

86
00:04:50.280 --> 00:04:53.790
talks about how every major
feature in Facebook for the

87
00:04:53.790 --> 00:04:56.280
next six months is already
in production. You just can't

88
00:04:56.280 --> 00:04:59.010
see it yet. So they've
separated release and deployment. They're

89
00:04:59.010 --> 00:05:01.380
deploying a once a day
or now twice a day,

90
00:05:01.380 --> 00:05:03.330
I think a Facebook and
a production, but they have

91
00:05:03.360 --> 00:05:05.700
a lot of the features
switched off or they, they

92
00:05:05.700 --> 00:05:07.830
actually have a piece of
software called gatekeeper, which controls

93
00:05:07.830 --> 00:05:09.810
who can see which features.
So a lot of those

94
00:05:09.810 --> 00:05:12.360
features are only available internally.
And then they dial them

95
00:05:12.360 --> 00:05:15.870
up to 1% of users
or everywhere. They have different

96
00:05:15.870 --> 00:05:18.600
toggles for different people. So
they can say this feature

97
00:05:18.600 --> 00:05:21.600
is available to everyone except
tech crunch editors, and actually

98
00:05:21.600 --> 00:05:26.010
have a toggle for that.
And so That idea I'm

99
00:05:26.040 --> 00:05:28.350
citing the login feature. I
think that would be nice

100
00:05:28.350 --> 00:05:31.620
if tech crunch, I was
unable to, to use that

101
00:05:31.620 --> 00:05:35.940
feature So they can control
a very fine grains rate.

102
00:05:35.970 --> 00:05:38.400
Well, when features are released
to users, but that's completely

103
00:05:38.400 --> 00:05:42.270
decoupled from deployment, that's a
completely separate activity. So it

104
00:05:42.270 --> 00:05:45.660
was the addition of frequency
that made deployment a big

105
00:05:45.660 --> 00:05:47.730
deal. I mean, it's okay
that deployment's happening at the

106
00:05:47.730 --> 00:05:50.280
end of two years because
we're releasing software, we've been

107
00:05:50.280 --> 00:05:53.100
working for two years, there'll
be some manual steps. You

108
00:05:53.100 --> 00:05:55.440
know, why would we automate
something that was done once,

109
00:05:55.470 --> 00:05:58.940
right? And then suddenly we're
releasing and, or deploying, you

110
00:05:58.940 --> 00:06:00.650
know, once a week, once
a month, once a quarter,

111
00:06:00.650 --> 00:06:03.710
once a scrum, however you
want to phrase it. It

112
00:06:03.710 --> 00:06:06.230
seems to me like it's
a natural computer science thing

113
00:06:06.470 --> 00:06:11.330
too, if you, if you
do something twice automated, but

114
00:06:11.360 --> 00:06:14.210
today in 2012, there are
still people who are dragging

115
00:06:14.210 --> 00:06:18.380
their websites from a folder
into a FTP program. And

116
00:06:18.410 --> 00:06:20.840
the thing I don't understand
is the second time they

117
00:06:20.840 --> 00:06:23.840
do that, some alarm doesn't
go off in their head

118
00:06:23.840 --> 00:06:28.630
that said stop. That should
be a script. Right? Absolutely.

119
00:06:28.900 --> 00:06:32.350
And I think what, what,
what you saw is that

120
00:06:32.650 --> 00:06:34.840
it was a web companies
who started doing, I mean,

121
00:06:34.840 --> 00:06:37.060
I was thinking as deployment
in 2000 when I was

122
00:06:37.060 --> 00:06:40.480
FTP ING files from my
workstation directly into production, which

123
00:06:40.480 --> 00:06:43.570
is not something I'd recommend
now necessarily. But I think,

124
00:06:43.600 --> 00:06:46.540
you know, w flicker were
really the people who most

125
00:06:46.540 --> 00:06:49.690
visibly pioneered this back in
2009, when they gave a

126
00:06:49.690 --> 00:06:52.570
talk at velocity about dev
ops cooperation. And, and they

127
00:06:52.570 --> 00:06:54.610
just calmly said, Oh yeah,
we're deploying 10 times a

128
00:06:54.610 --> 00:06:57.100
day into production. It was
just the way they started

129
00:06:57.100 --> 00:06:59.710
off doing it because it
made sense to them. I

130
00:06:59.710 --> 00:07:02.410
think another thing that's made
a big impact here is

131
00:07:02.410 --> 00:07:06.250
the testing culture. You know,
when I think of, when

132
00:07:06.250 --> 00:07:08.740
I kind of started in
this game, testing was something

133
00:07:08.740 --> 00:07:11.890
you didn't even think about
doing until you'd finished coding.

134
00:07:12.940 --> 00:07:16.090
And the idea that we
do contesting continuously as part

135
00:07:16.090 --> 00:07:18.280
of development, I think also
makes a good bit of

136
00:07:18.280 --> 00:07:20.500
this more possible because you
begin to realize, well, the

137
00:07:20.710 --> 00:07:23.980
code can be completely tested.
Even if we are building

138
00:07:23.980 --> 00:07:26.110
in increments of once a
week, we don't have to

139
00:07:26.110 --> 00:07:27.970
kind of go through a
phase to make it good

140
00:07:27.970 --> 00:07:31.690
enough to deploy given the
amount of computing power that

141
00:07:31.690 --> 00:07:34.000
we have available to us,
whether it be on our

142
00:07:34.000 --> 00:07:35.920
laptops and desktops or whether
it be in the cloud.

143
00:07:35.920 --> 00:07:40.270
Is there really anything we
shouldn't be doing continuously? No,

144
00:07:40.600 --> 00:07:43.480
I don't think so. I
mean, I, we talk about

145
00:07:43.480 --> 00:07:46.540
continuous testing and that applies
to, to exploratory testing and

146
00:07:46.540 --> 00:07:49.600
usability testing as well. We
should be doing usability testing

147
00:07:49.600 --> 00:07:53.140
continuously. People talk about doing
code reviews. And one thing

148
00:07:53.140 --> 00:07:55.990
that I often say is
that pairing is continuous code

149
00:07:55.990 --> 00:07:59.380
review. So I think, you
know, continuous feedback getting features

150
00:07:59.380 --> 00:08:02.800
out to users and small
iterations of features, this whole

151
00:08:02.800 --> 00:08:04.390
idea of the lean startup
that you come up with,

152
00:08:04.390 --> 00:08:07.630
an idea, work out what
the smallest possible amount of

153
00:08:07.630 --> 00:08:09.460
what you can do to
test the idea is get

154
00:08:09.460 --> 00:08:12.220
that small incremental out there,
get data back continuously to

155
00:08:12.220 --> 00:08:14.020
getting feedback from our users.
I think, you know, it's

156
00:08:14.020 --> 00:08:17.890
a very widely applicable concept.
Yeah. I never ever say

157
00:08:17.890 --> 00:08:22.540
never. So there's probably some
cases somewhere, but I think

158
00:08:22.540 --> 00:08:26.020
what we've done now is
flipped the default, the default

159
00:08:26.020 --> 00:08:30.160
now is continuously, and that
has a lot of consequences.

160
00:08:30.850 --> 00:08:33.670
I remember a conversation I
had once with a guy

161
00:08:33.670 --> 00:08:36.460
who was very big in
the SOA world. And he

162
00:08:36.460 --> 00:08:38.710
was calling me up, talking
about patterns and stuff and

163
00:08:38.710 --> 00:08:41.830
saying, well, it's really important
with services that you have

164
00:08:41.830 --> 00:08:44.290
the, because it's so hard
to change the contracts of

165
00:08:44.290 --> 00:08:47.180
these services. You have to
really nail them down and

166
00:08:47.200 --> 00:08:50.110
get them right before you
actually put the services deployed.

167
00:08:50.650 --> 00:08:52.720
And it really struck me
at that point on how

168
00:08:52.720 --> 00:08:56.220
my worldview and this goes
worldview. We're at complete odds

169
00:08:56.400 --> 00:08:58.710
because I'm always, how do
we make it easy to

170
00:08:58.710 --> 00:09:01.530
change, how we can make
this continuous movement going on?

171
00:09:01.710 --> 00:09:05.220
That's just my default way
of thinking now. And I

172
00:09:05.220 --> 00:09:07.680
think that's the, the shift
is more and more people

173
00:09:07.680 --> 00:09:10.530
are beginning to think of
this idea of continuous change

174
00:09:10.560 --> 00:09:13.430
as a default. It goes
all the way through the

175
00:09:13.430 --> 00:09:16.640
life cycle. So people are
doing continuous design UX. People

176
00:09:16.640 --> 00:09:20.000
are thinking about how they
can continuously iterate their designs

177
00:09:20.000 --> 00:09:23.330
in response to user feedback
and even business people are

178
00:09:23.330 --> 00:09:25.820
thinking about. And I think
that's a really radical change

179
00:09:25.820 --> 00:09:28.100
in this, not necessarily the
technical change, but the interface

180
00:09:28.100 --> 00:09:34.190
between business ideas and it,
and your users is changing

181
00:09:34.190 --> 00:09:38.360
that whole relationship. Instead of,
you know, someone once said

182
00:09:38.360 --> 00:09:42.230
that our job as developers
is to take business ideas

183
00:09:42.230 --> 00:09:45.470
and turn them into measurable
customer outcomes, which I think

184
00:09:45.470 --> 00:09:47.480
is a brilliant phrase. And
I think if you're doing

185
00:09:47.480 --> 00:09:49.460
continuous delivery, what it means
is instead of the business

186
00:09:49.460 --> 00:09:51.890
coming up with, you know,
six month bunch of requirements

187
00:09:51.890 --> 00:09:55.250
and throwing it over the
wall, instead it is saying,

188
00:09:55.280 --> 00:09:58.400
what should we try next?
And the business people are

189
00:09:58.400 --> 00:10:00.680
coming up with ideas. How
do we test that? Let's

190
00:10:00.680 --> 00:10:03.260
run this test and get
the, and get the information

191
00:10:03.260 --> 00:10:05.360
back. And then what should
we try next? You're always

192
00:10:05.360 --> 00:10:07.760
asking what ideas should we
try next? And that fundamentally

193
00:10:07.760 --> 00:10:10.610
changes the relationship between all
the people involved in building

194
00:10:10.610 --> 00:10:14.000
software systems. I think that
changes there changes everything. The

195
00:10:14.000 --> 00:10:18.500
idea of actual metrics. It's
surprising that as software developers,

196
00:10:18.500 --> 00:10:21.170
we spend so much time
doing micro benchmarks of string

197
00:10:21.170 --> 00:10:25.130
libraries, but so little time
AB testing on whether or

198
00:10:25.130 --> 00:10:28.640
not this button converts to
that button. For some reason,

199
00:10:28.640 --> 00:10:32.570
micro benchmarks are really exciting,
but we forget as engineers

200
00:10:32.570 --> 00:10:35.090
that we're not just writing
it to be fast or

201
00:10:35.090 --> 00:10:37.610
to be fun, but we're
trying to support a business.

202
00:10:38.150 --> 00:10:42.770
So, so, so rarely I
hear people utilizing techniques like

203
00:10:42.770 --> 00:10:46.020
continuous delivery to make more
money for the business. And

204
00:10:46.030 --> 00:10:48.230
they don't get excited about
those benchmarks. Like we made

205
00:10:48.230 --> 00:10:51.890
this button green and 20%
more people gave us money,

206
00:10:52.310 --> 00:10:55.700
like other than Amazon, who
else does that? Yeah. And

207
00:10:55.700 --> 00:10:58.580
I think this is a
deeper cultural issue that comes

208
00:10:58.580 --> 00:11:01.790
in a lot of the
time we tend to the

209
00:11:01.790 --> 00:11:06.170
habit seems to be everywhere
to treat developers and real

210
00:11:06.170 --> 00:11:10.070
people as completely separate islands.
We mustn't have developers talking

211
00:11:10.070 --> 00:11:13.820
to the business. People directly,
developers are only interested in

212
00:11:13.820 --> 00:11:17.060
the technical stuff and like
many things, there's some truth

213
00:11:17.060 --> 00:11:19.430
in that a lot of
developer people do get overly

214
00:11:19.490 --> 00:11:21.710
interested in the technical side
to the detriment of the

215
00:11:21.710 --> 00:11:25.280
rest of the picture, but
it's something that's reinforced and

216
00:11:25.280 --> 00:11:28.790
encouraged time and time again.
And one of the key

217
00:11:28.790 --> 00:11:31.400
things, right from the beginning
of, of my involvement in

218
00:11:31.400 --> 00:11:34.460
the agile community in Kent
with the XP was we

219
00:11:34.460 --> 00:11:36.980
really want to break that
and get people coming together.

220
00:11:36.980 --> 00:11:39.410
So that it's actually not
just business people who are

221
00:11:39.410 --> 00:11:41.990
coming up with ideas for
how to improve a software

222
00:11:41.990 --> 00:11:45.410
product. It could be the
developers. And as a result,

223
00:11:45.410 --> 00:11:47.660
the ideas can come from
anywhere. And I think this

224
00:11:47.660 --> 00:11:49.880
is going to be increasingly
the case now, as we

225
00:11:49.880 --> 00:11:53.860
get to do all the
verse big data stuff, because

226
00:11:54.010 --> 00:11:57.430
a Lot of things are
in the developers can come

227
00:11:57.430 --> 00:12:00.340
up with things that business
people aren't even gonna think

228
00:12:00.340 --> 00:12:04.510
to ask for and are
sometimes remarkably simple things. And

229
00:12:04.960 --> 00:12:08.470
it's really important, therefore, to
increase that level of collaboration.

230
00:12:08.880 --> 00:12:10.890
And I think there's a
virtuous cycle here. I think

231
00:12:10.890 --> 00:12:12.840
part of the reason that
developers are more interested in

232
00:12:12.840 --> 00:12:14.790
the technical side and the
business side is if they

233
00:12:14.790 --> 00:12:17.190
have to wait a month
or six months for their

234
00:12:17.190 --> 00:12:19.710
stuff to go live, that
feedback loops so slow. It's

235
00:12:19.710 --> 00:12:21.720
really hard to be interested
in it. Whereas if you're

236
00:12:21.720 --> 00:12:24.210
deploying and seeing the effects
of that, that actually becomes

237
00:12:24.210 --> 00:12:26.460
really interesting to you as
a developer. And it encourages

238
00:12:26.460 --> 00:12:29.030
developers to think a lot
more about that stuff. And

239
00:12:29.040 --> 00:12:31.560
so that virtuous and you
see that in organizations that

240
00:12:31.560 --> 00:12:34.230
are doing this, developers become
much more focused on running

241
00:12:34.230 --> 00:12:36.690
these kinds of experiments next
exciting for them. And that

242
00:12:36.690 --> 00:12:40.740
enables much more cross functional
behavior and developers being much

243
00:12:40.740 --> 00:12:44.040
more engaged in the business
side. So that's interesting because

244
00:12:44.040 --> 00:12:48.210
I've always made with all
jokes. There is truth. And

245
00:12:48.380 --> 00:12:50.310
I've always said that one
of the things that drives

246
00:12:50.310 --> 00:12:54.120
developers is a selfishness to
work on the things that

247
00:12:54.120 --> 00:12:57.270
they want to work on
and laziness the very best

248
00:12:57.270 --> 00:13:01.080
developers are truly, truly lazy.
And, you know, anytime I

249
00:13:01.080 --> 00:13:03.870
see myself doing something more
than once I try to

250
00:13:03.870 --> 00:13:06.810
automate it. So what you're
describing in very kind of,

251
00:13:07.470 --> 00:13:09.300
I would even go so
far as to say suit

252
00:13:09.300 --> 00:13:12.360
friendly terms. Like it's a
virtual cycle that supports the

253
00:13:12.360 --> 00:13:16.800
business really as a developer,
I'm hearing about it's okay

254
00:13:16.800 --> 00:13:18.610
to laugh. I hear you
guys laughing, but you're not.

255
00:13:18.610 --> 00:13:20.460
It's just full of jet.
It's just the thought of

256
00:13:20.460 --> 00:13:22.950
jazz, a suit friendly. Well,
you're not seeing how he's

257
00:13:22.950 --> 00:13:25.410
dressed on the radio. I'm
not wearing a suit, but

258
00:13:25.410 --> 00:13:27.330
he does have pants though.
And that's where that's very

259
00:13:27.330 --> 00:13:32.760
lucky for us, but you
know, you're English, but you're,

260
00:13:32.760 --> 00:13:34.740
you're, you're saying, you know,
virtuous cycle support the business.

261
00:13:34.740 --> 00:13:36.930
But really what you're saying
is we finally set up

262
00:13:36.930 --> 00:13:40.410
a system that will make
lazy developers work on those

263
00:13:40.410 --> 00:13:43.020
things that they shellfish they
want to work on. Yeah.

264
00:13:43.020 --> 00:13:45.720
And some people have been
experimenting very forceful in his

265
00:13:45.720 --> 00:13:49.080
idea. There's an ex colleague
of ours, Fred George who's

266
00:13:49.230 --> 00:13:51.570
who's. I think you can
find some of his talks

267
00:13:51.570 --> 00:13:54.390
on info Q and the
like, and he, the company

268
00:13:54.390 --> 00:13:57.390
he's associated with, they try
very much to set broad

269
00:13:57.390 --> 00:14:00.480
business metrics and then say
to developers, do whatever you

270
00:14:00.480 --> 00:14:04.620
like, just improve these metrics.
And he's claim is it

271
00:14:04.620 --> 00:14:07.890
really does engage and get
people going now who knows

272
00:14:07.890 --> 00:14:10.290
what the full reality is
that though. But I think

273
00:14:10.290 --> 00:14:16.170
the promise is really quite
interesting. This episode of Hansel

274
00:14:16.170 --> 00:14:18.480
minutes is brought to you
by careers 2.0 and our

275
00:14:18.480 --> 00:14:21.900
friends at stack overflow. If
you're not familiar with careers,

276
00:14:21.900 --> 00:14:24.990
2.0, it's the job site
within stack overflow that helps

277
00:14:24.990 --> 00:14:27.900
you advance your career as
a programmer and host a

278
00:14:27.900 --> 00:14:31.230
portfolio of all your work.
You can search through job

279
00:14:31.230 --> 00:14:33.810
listings or create a profile
to show off the work

280
00:14:33.810 --> 00:14:38.250
you've done. And let employers
find you careers. 2.0, lets

281
00:14:38.250 --> 00:14:41.880
you showcase real coding samples
by importing answers that you've

282
00:14:41.880 --> 00:14:46.170
posted on stack overflow, open
source contributions from GitHub Bitbucket,

283
00:14:46.170 --> 00:14:50.010
and SourceForge were blog posts.
You've written. Even if you're

284
00:14:50.010 --> 00:14:53.270
not currently looking a job,
your profile can still serve

285
00:14:53.270 --> 00:14:56.720
as a terrific representation of
all your programming knowledge, but

286
00:14:56.720 --> 00:14:59.360
don't worry. Unlike other sites,
you won't get spammed by

287
00:14:59.360 --> 00:15:05.000
recruiters. You'll only find qualified
employers here. Careers. 2.0 profiles

288
00:15:05.000 --> 00:15:09.560
are also invite only. So
the community stays top-notch and

289
00:15:09.560 --> 00:15:13.400
as an exclusive offer to
Hansel minutes, listeners stack overflow

290
00:15:13.400 --> 00:15:16.310
wants to help you jumpstart
your job search the first

291
00:15:16.340 --> 00:15:19.790
200 people to sign up
for a careers. 2.0 profile

292
00:15:20.180 --> 00:15:25.550
will receive a limited edition
stack overflow branded padfolio. So

293
00:15:25.550 --> 00:15:32.000
head on over to careers
dot stack overflow.com/h M that's

294
00:15:32.000 --> 00:15:36.620
careers dot stack overflow.com/h M.
Sign up today. Just make

295
00:15:36.620 --> 00:15:39.290
sure that you include your
mailing address so you can

296
00:15:39.290 --> 00:15:43.340
receive your free gift. Once
again, that's careers dot stack,

297
00:15:43.370 --> 00:15:50.180
overflow.com/h M. One of the
things that you comment on

298
00:15:50.180 --> 00:15:52.850
the book is the importance
of a delivery team that

299
00:15:52.850 --> 00:15:56.450
is from multiple disciplines, but
is focused on, on one

300
00:15:56.450 --> 00:16:00.400
thing. You don't just say,
have a build guy. You,

301
00:16:00.400 --> 00:16:03.350
you almost have like a
council of deployment and you've

302
00:16:03.350 --> 00:16:05.510
got a database person and
an ops person. And they

303
00:16:05.510 --> 00:16:08.240
all work as a team.
That seems a little bit

304
00:16:08.240 --> 00:16:10.730
difficult though, because you're basically
using kind of like aspect

305
00:16:10.730 --> 00:16:13.580
orientation and you're slicing through
the organization and you're saying

306
00:16:13.910 --> 00:16:16.700
we all have to agree.
This is important. So everyone

307
00:16:16.700 --> 00:16:19.460
needs to agree and then
send a representative and then

308
00:16:19.460 --> 00:16:23.290
do whatever it takes to
remove that, that friction. Yeah.

309
00:16:23.290 --> 00:16:25.360
One of our principles in
the book is that everyone

310
00:16:25.360 --> 00:16:27.520
is responsible for delivery. That's
one of our kind of

311
00:16:27.520 --> 00:16:29.230
top eight principles that we
talk about. And I think

312
00:16:29.230 --> 00:16:32.830
that's, that's very important. Part
of the problem w part

313
00:16:32.830 --> 00:16:34.510
of the root cause of
this problem is the fact

314
00:16:34.510 --> 00:16:37.540
that developers don't consider themselves
responsible for what happens in

315
00:16:37.540 --> 00:16:39.940
production. And that means they
write crappy code that doesn't

316
00:16:39.940 --> 00:16:42.670
actually work in production. And
I think a big part

317
00:16:42.670 --> 00:16:45.760
of this is aligning responsibility
with the power to actually

318
00:16:45.760 --> 00:16:48.160
change things. You know, if
the developer, if the operations

319
00:16:48.160 --> 00:16:49.450
people are getting it in
the neck all the time,

320
00:16:49.450 --> 00:16:51.190
when the site goes down
with the developers don't feel

321
00:16:51.190 --> 00:16:54.430
any pain, people don't change
unless they feel pain. You

322
00:16:54.430 --> 00:16:56.680
know, obviously there's the carrot
and the stick and, you

323
00:16:56.680 --> 00:16:59.170
know, but I think a
big part of it is

324
00:16:59.170 --> 00:17:01.630
saying, well, we're all responsible
for this. And if you

325
00:17:01.630 --> 00:17:03.910
make developers carry pagers and
they get called out when

326
00:17:03.910 --> 00:17:06.970
the site goes down, that
tends to encourage them very

327
00:17:06.970 --> 00:17:10.090
effectively to write much more
production ready systems in, in,

328
00:17:10.190 --> 00:17:13.750
in, in my experience. I
think the other thing that

329
00:17:13.750 --> 00:17:15.880
is important is to say
that if you look at

330
00:17:15.880 --> 00:17:18.520
the way that companies are
organized, that a lot of

331
00:17:18.520 --> 00:17:21.580
them are divided according to
functional silos. That makes sense

332
00:17:21.580 --> 00:17:23.920
when you have these really
long delivery cycles and you're

333
00:17:23.920 --> 00:17:28.150
working in big batches, because
you can optimize for individual

334
00:17:28.240 --> 00:17:32.170
silos, individual functional silos, doing
their part very well. When

335
00:17:32.170 --> 00:17:34.630
you move to a process
where you're optimizing for cycle

336
00:17:34.630 --> 00:17:37.930
time or lead time. In
fact, I should say time

337
00:17:37.930 --> 00:17:41.560
from idea to realize business
value in production. The way

338
00:17:41.560 --> 00:17:43.870
to do that really effectively
is to reduce batch size.

339
00:17:44.230 --> 00:17:47.590
And when you're reducing batch
size, it's just wildly inefficient

340
00:17:47.590 --> 00:17:50.100
to have functional silos and
handoffs. And so the only

341
00:17:50.100 --> 00:17:52.920
way really to effectively optimize
for lead time is to

342
00:17:52.920 --> 00:17:55.650
have cross functional teams and
focus on how do we

343
00:17:55.650 --> 00:17:59.100
get stories from start to
finish as fast as possible

344
00:17:59.630 --> 00:18:03.180
and, and many interesting consequences
follow when you actually change

345
00:18:03.180 --> 00:18:06.380
your process in that way.
Yeah. It's been one of

346
00:18:06.380 --> 00:18:09.890
the long running questions for,
for quite a while, but

347
00:18:10.040 --> 00:18:14.030
should we organize organizations by
sort of the activity and

348
00:18:14.030 --> 00:18:16.880
skill that you do, or
should it be organized in

349
00:18:16.880 --> 00:18:21.050
terms of some more domain
business outcome? And we find

350
00:18:21.050 --> 00:18:22.850
it in people and also
we find it in code.

351
00:18:23.060 --> 00:18:26.870
Should we organize our codes
major divisions by database versus

352
00:18:26.870 --> 00:18:29.060
UI or, or should we
make it in terms of

353
00:18:29.060 --> 00:18:32.000
more functional pieces? I've always
gone for the latter because

354
00:18:32.000 --> 00:18:36.170
that focuses everybody's mind on
some useful business or domain

355
00:18:36.170 --> 00:18:38.630
purpose. And I think that's
the way you want to

356
00:18:38.630 --> 00:18:42.470
orient everybody. Now it does
have this advantages. It does

357
00:18:42.470 --> 00:18:45.920
mean that you get a
less, less fertilization of ideas

358
00:18:45.920 --> 00:18:49.490
within a particular skill group.
It also means you may

359
00:18:49.490 --> 00:18:53.690
have to have some limited
utilization. I mean, you only

360
00:18:53.690 --> 00:18:55.880
really need a database guy
half the time, but you

361
00:18:55.880 --> 00:18:57.710
want him full time on
the team because you can't

362
00:18:57.710 --> 00:19:01.040
afford him flashing between two
teams. But again, I think

363
00:19:01.040 --> 00:19:04.520
that this is also the,
the thinking that comes out

364
00:19:04.520 --> 00:19:06.890
of the lean thinking. It's
better to have Slack in

365
00:19:06.890 --> 00:19:11.780
the system and under underutilized
resources in order to do

366
00:19:11.780 --> 00:19:14.900
that cycle time. And I
just did the most evil

367
00:19:14.900 --> 00:19:16.730
thing in the world. I
just referred to a human

368
00:19:16.730 --> 00:19:21.980
being as resource Naughty Martin.
Bye bye. A round of

369
00:19:21.980 --> 00:19:24.230
drinks later on, I think
for that. But I think

370
00:19:24.230 --> 00:19:26.000
this is one of the
things that's very important is

371
00:19:26.000 --> 00:19:28.190
you ha you have to,
and in fact, you can

372
00:19:28.190 --> 00:19:30.530
prove from Q theory that
when you optimize for lead

373
00:19:30.530 --> 00:19:34.160
time, you, you, you sub
optimize for utilization. And one

374
00:19:34.160 --> 00:19:38.120
of the problems with traditional
project management theories, which work

375
00:19:38.120 --> 00:19:41.750
on cost accounting and optimize
for utilization, that creates the

376
00:19:41.750 --> 00:19:46.130
most inefficient process you possibly
can for actually getting software

377
00:19:46.430 --> 00:19:49.310
from idea to production. And
so we have to change

378
00:19:49.310 --> 00:19:52.820
our mindset about this and
Slack time is really important.

379
00:19:52.820 --> 00:19:55.040
Those people who aren't working
on features, they're the people

380
00:19:55.040 --> 00:19:57.380
who are keeping the system
working and, you know, for,

381
00:19:57.440 --> 00:20:01.330
for, for the one line
definition of continuous delivery, it

382
00:20:01.330 --> 00:20:05.390
is prioritize keeping the system
working overdoing work, and to

383
00:20:05.390 --> 00:20:07.460
keep the system working. You
need people who are working

384
00:20:07.460 --> 00:20:10.850
on things like making the
automated tests more efficient or

385
00:20:11.030 --> 00:20:14.150
automating the deployment process or
simplifying the deployment process so

386
00:20:14.150 --> 00:20:16.550
that we can automate it
efficiently or working on how

387
00:20:16.550 --> 00:20:19.250
we do the infrastructure management.
You need Slack in the

388
00:20:19.250 --> 00:20:21.440
system to be able to
do those things, to keep

389
00:20:21.440 --> 00:20:24.110
the process efficient. When I,
when I go and visit

390
00:20:24.110 --> 00:20:26.930
customers and talk to customers
and explain to them, you

391
00:20:26.930 --> 00:20:28.550
know, you need to think
about unit testing, or you

392
00:20:28.550 --> 00:20:31.550
need to think about continuous
integration, which, which a lot

393
00:20:31.550 --> 00:20:34.700
of us take for granted,
but I don't think a

394
00:20:34.700 --> 00:20:36.980
lot of us realized that
the vast number of kind

395
00:20:36.980 --> 00:20:41.180
of dark matter developers are
just barely keeping their heads

396
00:20:41.180 --> 00:20:45.740
above water, much less thinking
about having Slack time to

397
00:20:45.740 --> 00:20:48.070
go off and, and put
together a system. I mean,

398
00:20:48.070 --> 00:20:51.700
How do you tell the
chief architect and the Nebraska

399
00:20:51.700 --> 00:20:55.030
department of forestry that, you
know, his system would be

400
00:20:55.030 --> 00:20:57.310
more effective if he could
just take a week off

401
00:20:57.340 --> 00:21:01.090
and put, put in continuous
integration when he's just trying

402
00:21:01.090 --> 00:21:05.790
to like, keep the system
running? Yeah, it's, it's a

403
00:21:05.790 --> 00:21:09.240
difficult problem. And I think
firstly, you have to just

404
00:21:09.240 --> 00:21:12.240
provide people real examples of
how this has worked in

405
00:21:12.240 --> 00:21:14.370
practice. And I think a
big part of what we

406
00:21:14.370 --> 00:21:16.470
do is just letting people
know that there is a

407
00:21:16.470 --> 00:21:18.450
better way to do things
and that it is possible

408
00:21:18.450 --> 00:21:21.180
to do things differently and
that it can actually work.

409
00:21:21.390 --> 00:21:24.720
And I think that the
key ingredient of changes, people

410
00:21:24.720 --> 00:21:27.450
have to be interested in
getting better at what they

411
00:21:27.450 --> 00:21:30.090
do, But, but let me
interrupt. But a lot of

412
00:21:30.090 --> 00:21:33.300
people say, well, that's great
for you jazz. You know,

413
00:21:33.300 --> 00:21:37.500
you use Ruby or fancy
language dot 2.0 or that's,

414
00:21:37.520 --> 00:21:40.350
that's great for you, Martin
you're Martin Fowler, but I

415
00:21:40.560 --> 00:21:43.500
work in Microsoft access or
I'm still doing stuff in

416
00:21:43.500 --> 00:21:46.500
clipper. You know, it's just
simply not possible to automate

417
00:21:47.400 --> 00:21:53.070
problem X, I think often
that is just in people's

418
00:21:53.070 --> 00:21:56.070
heads and some of the
great advances that have been

419
00:21:56.070 --> 00:21:59.460
made in computer science. So
when people have solved problems

420
00:21:59.700 --> 00:22:01.950
that other people thought were
impossible, just because they didn't

421
00:22:01.950 --> 00:22:04.260
know they were impossible. So
there was a talk yesterday

422
00:22:04.260 --> 00:22:08.010
by Brian control, where he
kind of gave an example

423
00:22:08.010 --> 00:22:11.160
of someone who there was
an, a new hire in

424
00:22:11.160 --> 00:22:13.800
the company. And they said,
go and write a parser

425
00:22:13.800 --> 00:22:16.620
for this particular thing. And
everyone knew it was impossible.

426
00:22:16.800 --> 00:22:18.150
And then they forgot about
this guy. And he came

427
00:22:18.150 --> 00:22:19.620
back two months later and
said, Oh, I've done it.

428
00:22:19.890 --> 00:22:22.560
And they said, but, but
that's impossible. And he did

429
00:22:22.560 --> 00:22:24.780
it because he didn't realize
it was impossible. And there's

430
00:22:24.780 --> 00:22:26.820
a story from Xerox park,
which is similar about the

431
00:22:26.820 --> 00:22:28.620
kind of window retrial. Well,
that's how you end it.

432
00:22:28.700 --> 00:22:31.730
That's another way to really
get programmers moving. And I

433
00:22:31.740 --> 00:22:34.380
know this because that's how
my wife gets me moving

434
00:22:34.410 --> 00:22:37.500
is she just makes the
declaration that it's not possible

435
00:22:37.500 --> 00:22:39.060
for this to be done
this way. And then of

436
00:22:39.060 --> 00:22:42.690
course I can't sleep. I
can't eat. I'm thinking about

437
00:22:42.690 --> 00:22:45.210
it in the shower, you
know, until it, until it

438
00:22:45.290 --> 00:22:47.640
happens. The system that I
mentioned that I was working

439
00:22:47.640 --> 00:22:51.720
on in 2005, 2006 was
a banking system. And banking

440
00:22:51.720 --> 00:22:54.600
is historically a very kind
of waterfall kind of a

441
00:22:54.600 --> 00:22:57.630
world. And for us, it
went from waterfall to Scrummerfall,

442
00:22:57.870 --> 00:22:59.880
right. You know, where we
think we're doing scrum, but

443
00:22:59.880 --> 00:23:02.820
we're really just iterating ourselves
down the waterfall. But one

444
00:23:02.820 --> 00:23:04.080
of the things that we
really did a great job

445
00:23:04.080 --> 00:23:06.420
of is we introduced continuous
integration into a number of

446
00:23:06.420 --> 00:23:09.420
large United States banks to the
point where we would do

447
00:23:09.420 --> 00:23:14.340
a commit and a complete
virtual machine with a runnable

448
00:23:14.340 --> 00:23:17.040
system would pop out the
other end because the business

449
00:23:17.040 --> 00:23:19.620
problem that we were trying
to solve, wasn't shipping the

450
00:23:19.620 --> 00:23:22.320
banking software because that really
only did happen once or

451
00:23:22.320 --> 00:23:26.070
twice a year. It was
actually shipping a complete demonstration

452
00:23:26.070 --> 00:23:30.750
bank to a salesperson sales
guy needed a new version

453
00:23:30.750 --> 00:23:32.640
of the system every month.
And he was ending up

454
00:23:32.640 --> 00:23:34.980
getting one every year. How
is he going to go

455
00:23:34.980 --> 00:23:36.780
and sell that if he
only gets to every year?

456
00:23:36.780 --> 00:23:41.040
So we optimized our delivery
system to deliver tiny Northwind

457
00:23:41.040 --> 00:23:45.370
bank in a virtual machine.
And the, and then the

458
00:23:45.950 --> 00:23:48.410
way That we finally got
past that final hurdle, which

459
00:23:48.410 --> 00:23:51.470
was, which was automation, we
didn't realize that VMware had

460
00:23:51.470 --> 00:23:53.660
an automation interface. And once
we figured it out, we

461
00:23:53.660 --> 00:23:56.450
were like, Oh, well now
we can actually just fire

462
00:23:56.450 --> 00:23:58.670
up that base image. And
in the book you talk

463
00:23:58.670 --> 00:24:01.520
about really going from bare
metal all the way up.

464
00:24:01.550 --> 00:24:05.180
You want to not just
check your software into source

465
00:24:05.180 --> 00:24:07.100
code control, but what do
you mean by checking the

466
00:24:07.100 --> 00:24:10.510
entire system? So it should
be, why don't you talk

467
00:24:10.510 --> 00:24:15.580
about your, your test for,
for data center integrity? Oh,

468
00:24:15.640 --> 00:24:17.950
the one by a you're
prepared to let me in,

469
00:24:17.950 --> 00:24:22.060
you turn up with chainsaws
and explosives and water pistols

470
00:24:22.060 --> 00:24:24.250
and go at your data
center and we time how

471
00:24:24.250 --> 00:24:25.840
long it is for you
to come back live again.

472
00:24:26.230 --> 00:24:29.470
Yeah. That one, right? So
this is, this is Martins

473
00:24:29.470 --> 00:24:34.660
test of your operations readiness.
So it should be possible

474
00:24:34.660 --> 00:24:36.010
for you to do that
and for you to say,

475
00:24:36.010 --> 00:24:37.960
okay, well, no problem. I
can bring up a completely

476
00:24:37.960 --> 00:24:42.220
working system from scratch using
what's in version control, plus

477
00:24:42.220 --> 00:24:44.680
a bunch of scripts that
that should be possible. And

478
00:24:44.680 --> 00:24:47.260
that has obviously utility in
the case of business continuity

479
00:24:47.260 --> 00:24:49.330
and disaster recovery, whatever you
want to call it. But

480
00:24:49.330 --> 00:24:53.860
it's also really important in
terms of actually producing, working

481
00:24:53.890 --> 00:24:57.340
a working system that if
you're going to test, if

482
00:24:57.340 --> 00:24:59.650
you're gonna produce production, like
test environments, a lot of

483
00:24:59.650 --> 00:25:01.750
the problems we see in
organizations is where it takes

484
00:25:02.200 --> 00:25:05.380
a week to bring up
a test environment. And then

485
00:25:05.380 --> 00:25:08.080
there's tickets going back and
forth between the infrastructure people

486
00:25:08.080 --> 00:25:10.090
in the testers and the
developers. And we say, well,

487
00:25:10.090 --> 00:25:11.830
no, that's ridiculous. You should
be able to do that

488
00:25:11.830 --> 00:25:13.870
in a push button way.
How do you do that

489
00:25:13.870 --> 00:25:17.200
while you have declarative, the
D declared state of your

490
00:25:17.200 --> 00:25:20.830
infrastructure in version control and
you know, tools like puppet

491
00:25:20.830 --> 00:25:24.310
and chef allow you to
instantiate those environments using fully

492
00:25:24.310 --> 00:25:28.900
automated processes. And One thing
I do want to throw

493
00:25:28.900 --> 00:25:30.790
in, in this discussion, because
I think we have to

494
00:25:30.790 --> 00:25:32.860
throw it in. Whenever we
talk about this topic is

495
00:25:32.860 --> 00:25:36.880
we make this slightly annoying
distinction between continuous delivery and

496
00:25:36.880 --> 00:25:41.680
continuous deployment, which is very
important. We've talked when we

497
00:25:41.680 --> 00:25:44.390
talk about this stuff, we
usually talk about cases where

498
00:25:44.450 --> 00:25:47.620
typical like websites like Facebook
or flicker, and they nail

499
00:25:47.620 --> 00:25:51.640
deploying into production multiple times
a day. But continuous delivery

500
00:25:51.640 --> 00:25:53.980
is broader than that. Even
if you could only deploy

501
00:25:54.130 --> 00:25:56.410
once, if you could only
deploy into production once a

502
00:25:56.410 --> 00:25:59.200
year, like when Jaz was
managing our go tool and

503
00:25:59.200 --> 00:26:01.450
its shrink wrap software, and
you could only send it

504
00:26:01.450 --> 00:26:04.840
out every so often, you
can still do continuous delivery.

505
00:26:05.050 --> 00:26:07.780
The test is that the
software should always be ready

506
00:26:07.900 --> 00:26:10.360
to be able to deploy
to production, and that you

507
00:26:10.360 --> 00:26:13.960
make the decision to deploy,
to production purely a business

508
00:26:13.960 --> 00:26:17.590
decision, not a technical decision
that many of our clients,

509
00:26:17.590 --> 00:26:20.200
I would say most of
our clients tend to deploy

510
00:26:20.200 --> 00:26:23.920
into production every one to
two weeks. But the point

511
00:26:23.920 --> 00:26:27.220
of using continuous delivery is
that you're always ready. There's

512
00:26:27.220 --> 00:26:28.930
an interesting book coming out
in a couple of months,

513
00:26:28.960 --> 00:26:32.220
which is by the HP
firmware team. And they moved

514
00:26:32.220 --> 00:26:35.260
to a continuous delivery process.
And obviously HP firmware, you

515
00:26:35.260 --> 00:26:38.050
know, it doesn't get released
very often, but what they

516
00:26:38.050 --> 00:26:40.120
found was they had a
different branch for every HP

517
00:26:40.120 --> 00:26:44.580
printer and it, they worked
out activity and only 5%

518
00:26:44.580 --> 00:26:46.290
of their time was actually
building features. The rest of

519
00:26:46.290 --> 00:26:48.360
the time is they just
sending 25% of their time

520
00:26:48.360 --> 00:26:51.540
merging between branches. And so
they rearchitected their systems. So

521
00:26:51.540 --> 00:26:55.290
they built the entire firmware
on trunk and the firma

522
00:26:55.290 --> 00:26:57.060
would actually detect what printer
it was running on and

523
00:26:57.060 --> 00:27:00.300
turn features on and off
accordingly. But they, they moved

524
00:27:00.300 --> 00:27:02.790
to a trunk based development
system. They built continuous integration.

525
00:27:02.940 --> 00:27:04.920
This is a C plus
plus code base, a large

526
00:27:04.920 --> 00:27:07.680
C plus plus code base.
And they wrote automated tests

527
00:27:07.680 --> 00:27:09.960
that ran in a virtual
machine. And then on logic

528
00:27:09.960 --> 00:27:12.420
boards to prove that the
firmer would actually work, they

529
00:27:12.420 --> 00:27:15.780
had 30,000 automated tests. And
if you're checking broke, some

530
00:27:15.780 --> 00:27:18.120
of those tests, it was
automatically reverted from version control.

531
00:27:18.270 --> 00:27:20.370
They moved to continuous delivery
and it made a huge

532
00:27:20.370 --> 00:27:22.830
difference to their process. They
were able to get 40%

533
00:27:22.830 --> 00:27:25.220
of their time spent on
features rather than 5%. So

534
00:27:25.220 --> 00:27:26.960
it sounds like there's two
interesting things that happen there.

535
00:27:26.960 --> 00:27:30.470
One that someone identified that
there was a problem right

536
00:27:30.500 --> 00:27:33.710
there that in 25% of
their time is going just

537
00:27:33.710 --> 00:27:37.760
wasted, just using one of
my favorite software engineering terms,

538
00:27:37.760 --> 00:27:41.420
yak, shaving, right? They're not
actually doing any software delivery.

539
00:27:41.420 --> 00:27:43.700
They're just shaving the yak
because it's part of the

540
00:27:43.700 --> 00:27:47.360
process. And then the will,
the business will to actually

541
00:27:47.510 --> 00:27:50.120
make that happen that you
say though, out of, kind

542
00:27:50.120 --> 00:27:51.500
of one side of your
mouth, that we should be

543
00:27:51.500 --> 00:27:53.720
delivering on a regular basis.
We should always have a

544
00:27:53.720 --> 00:27:56.360
system that is deliverable. But
then here you just give

545
00:27:56.360 --> 00:27:59.660
an example, right, right. After
that, where they rip the

546
00:27:59.660 --> 00:28:01.940
guts out of an entire
system and put the guts

547
00:28:01.940 --> 00:28:04.280
back in there must have
been a time when that

548
00:28:04.280 --> 00:28:06.650
software was not deliverable. So
how do you deal with

549
00:28:06.710 --> 00:28:11.690
complete system refactorings and you
know, reimaginings of systems while

550
00:28:11.690 --> 00:28:15.980
also maintaining a deliverable system?
So I think in the

551
00:28:15.980 --> 00:28:19.640
case of, of HP, I
mean, this was in 2008,

552
00:28:19.640 --> 00:28:21.410
before the book came out,
they were doing continuous delivery

553
00:28:21.410 --> 00:28:23.420
and, you know, they didn't
know what it was called,

554
00:28:23.420 --> 00:28:26.060
but they did it anyway.
And they rewrote the architecture

555
00:28:26.060 --> 00:28:29.690
from scratch. Now that's not
something we'd always recommend. What

556
00:28:29.690 --> 00:28:31.730
we do have is a
pattern, which we've used a

557
00:28:31.730 --> 00:28:34.130
bunch of times, which is
kind of a slightly crappy

558
00:28:34.130 --> 00:28:36.770
name of branch by abstraction.
And the idea is this,

559
00:28:36.770 --> 00:28:38.240
you want to make a
large scale change to your

560
00:28:38.240 --> 00:28:40.730
system. What you want to
do is find a seam

561
00:28:40.730 --> 00:28:44.060
above that layer, say an
abstraction layer, and you have

562
00:28:44.060 --> 00:28:47.270
the existing implementation and you
create a new implementation side

563
00:28:47.270 --> 00:28:49.160
by side, and that's checked
into version control. And you

564
00:28:49.160 --> 00:28:53.570
just use polymorphism. You substitute
one object for another object,

565
00:28:53.570 --> 00:28:55.040
and you do that using
a toggle, which could be

566
00:28:55.040 --> 00:28:57.830
at bill time or runtime.
So for example, a software

567
00:28:57.830 --> 00:28:59.780
that I used to work
on, go, we were moving

568
00:28:59.780 --> 00:29:02.270
from, I bought this to
hibernate in the backend. And

569
00:29:02.270 --> 00:29:05.540
what we did is we,
we had the repository pattern,

570
00:29:05.540 --> 00:29:08.330
which was a layer over
the database access. So that

571
00:29:08.330 --> 00:29:10.790
was transparent to the, to
the system. And we created

572
00:29:10.790 --> 00:29:14.510
a new object, which implemented
the same interface. And we

573
00:29:14.510 --> 00:29:17.420
started implementing hibernate calls for
that. And we did it

574
00:29:17.420 --> 00:29:20.270
on a, as a feature
was played, as a story

575
00:29:20.270 --> 00:29:22.340
was played that required a
change to the backend. We

576
00:29:22.340 --> 00:29:25.520
would make those changes by
porting over to hibernate, but

577
00:29:25.520 --> 00:29:28.970
we had both of those,
you know, some calls would

578
00:29:28.970 --> 00:29:31.430
go to hibernate and some
calls or gateway parties, and

579
00:29:31.430 --> 00:29:34.550
gradually would move methods over
from being implemented in. I

580
00:29:34.550 --> 00:29:37.210
bought this to hibernate, but
trunk was still releasable. And

581
00:29:37.220 --> 00:29:39.770
so you're making large scale
architectural changes at the same

582
00:29:39.770 --> 00:29:41.830
time. On the front end,
we were moving from a

583
00:29:41.860 --> 00:29:44.650
velocity based stack to a
J Ruby on rails base

584
00:29:44.650 --> 00:29:47.500
stack. And we did that
basically using the same process.

585
00:29:47.500 --> 00:29:50.860
You'd have some, your eyes
would go slash new slash

586
00:29:50.890 --> 00:29:52.990
and then the page name.
And that would go through

587
00:29:52.990 --> 00:29:55.000
the J Ruby on rails,
stack other calls or go

588
00:29:55.000 --> 00:29:56.890
to the, to the velocity
stack. And it was the

589
00:29:56.890 --> 00:30:00.310
same HTML and CSS. So
it looked identical. It was

590
00:30:00.310 --> 00:30:02.320
just going through a completely
different code path. And the

591
00:30:02.320 --> 00:30:04.180
only way you would know
whether you, the page you

592
00:30:04.180 --> 00:30:06.940
were on was day Ruby
on rails or velocity was

593
00:30:07.480 --> 00:30:09.310
by looking at the URI
and seeing if that new

594
00:30:09.310 --> 00:30:11.820
was in there. So even
though the system was deliverable

595
00:30:11.820 --> 00:30:14.400
at any time, it doesn't
necessarily mean you would deliverable

596
00:30:14.430 --> 00:30:18.090
deliver it in this kind
of middle Frankenstein's monster. We

597
00:30:18.090 --> 00:30:19.980
did. We kept releasing. You
actually did, even in that

598
00:30:19.980 --> 00:30:23.790
state. Oh, so I mean,
that, that was, we had

599
00:30:23.790 --> 00:30:25.350
to do it because we
were going to make this

600
00:30:25.350 --> 00:30:27.360
large change and we realized,
well, if we do this

601
00:30:27.360 --> 00:30:29.340
completely, it's going to take
us a year and we

602
00:30:29.340 --> 00:30:31.590
can't do that. We have
to release a software. So

603
00:30:31.590 --> 00:30:33.450
that's really interesting to me,
cause I've, I've sat down

604
00:30:33.450 --> 00:30:35.220
with lots of different people
and they've talked about what

605
00:30:35.220 --> 00:30:37.410
we're going to move from
X, Trent technology to Y

606
00:30:37.410 --> 00:30:41.550
technology. And there's always that
feeling that a hybrid is

607
00:30:41.550 --> 00:30:44.550
a dirty word. You know,
I, in, in the asp.net

608
00:30:44.550 --> 00:30:46.410
world where I live, someone
might be going from web

609
00:30:46.410 --> 00:30:49.200
forums over to MVC and
they would never think of

610
00:30:49.200 --> 00:30:52.380
releasing something that was both.
But I think your point

611
00:30:52.380 --> 00:30:54.930
is that, well, the URL
is fine and the HTML

612
00:30:54.930 --> 00:30:58.470
is fine, but most importantly,
the functionality is fine. Why

613
00:30:58.470 --> 00:31:02.670
not release a hybrid? Exactly.
I mean, it's sometimes it's

614
00:31:02.670 --> 00:31:05.220
very difficult to do depending
on what your technology basis,

615
00:31:05.430 --> 00:31:08.820
but if you can, then
it comes down to, it

616
00:31:08.820 --> 00:31:11.490
should be a business decision.
And a lot of the

617
00:31:11.490 --> 00:31:13.080
time it says, yeah, the
mate, you may be in

618
00:31:13.080 --> 00:31:15.150
the middle of a major
shift, but we need still,

619
00:31:15.150 --> 00:31:17.430
we need to release. So
we should, I think that

620
00:31:17.550 --> 00:31:19.620
it's important to point out
all that stuff was tested.

621
00:31:19.860 --> 00:31:22.020
So we're writing unit tests
for all that code. We

622
00:31:22.020 --> 00:31:25.110
had acceptance tests that were
running through web driver to

623
00:31:25.110 --> 00:31:27.240
make sure that all that
stuff was working. So all

624
00:31:27.240 --> 00:31:30.810
that code was tested and,
and we've definitely prioritized that

625
00:31:30.810 --> 00:31:32.880
very, very, very strongly. That's
very important to us. Right.

626
00:31:33.450 --> 00:31:37.370
But I mean, you say
it it's dirty. I mean,

627
00:31:37.370 --> 00:31:41.100
I guess <inaudible> yeah, absolutely.
But for us it was,

628
00:31:41.100 --> 00:31:43.080
you know, it was more
important. It was dirtier to

629
00:31:43.080 --> 00:31:44.550
us to be in a
state where we couldn't release

630
00:31:44.550 --> 00:31:46.530
for a year. I mean,
that for me is basic

631
00:31:46.530 --> 00:31:50.070
hygiene. That's really interesting. And
your, your point about these

632
00:31:50.070 --> 00:31:52.020
kinds of these quality Gates,
cause you talk in the

633
00:31:52.020 --> 00:31:55.710
book about setting up a
pipeline and even, you know,

634
00:31:55.740 --> 00:31:59.100
even spikes and even crazy
new refactorings should still be

635
00:31:59.100 --> 00:32:01.740
moving their way through the
pipeline. Someone doesn't just go

636
00:32:01.740 --> 00:32:03.780
off in a room, close
the door, design the new

637
00:32:03.780 --> 00:32:06.630
system and then bring it
down from the mountain. Here

638
00:32:06.630 --> 00:32:09.930
is the new system. No,
I think I would say

639
00:32:09.950 --> 00:32:12.330
it's okay to go out
and try crazy new ideas.

640
00:32:12.600 --> 00:32:14.760
Those never get checked into
trunk. I mean, you can

641
00:32:14.760 --> 00:32:17.130
go and create a branch
and run a bunch of

642
00:32:17.130 --> 00:32:19.410
ideas, but the crucial thing
is those get thrown away.

643
00:32:19.440 --> 00:32:22.020
The output of that process
is knowledge, which you then

644
00:32:22.020 --> 00:32:25.020
go to use and actually
write the real code. But

645
00:32:25.020 --> 00:32:28.050
yeah, you know, any of
those things, any big architectural

646
00:32:28.050 --> 00:32:31.800
changes you, any big features
that you're writing, all that

647
00:32:31.800 --> 00:32:33.480
stuffs are going to trunk
and all that stuff should

648
00:32:33.480 --> 00:32:36.690
be tested an easily or
normal price of doing that.

649
00:32:36.840 --> 00:32:41.030
You just use goods, objects,
principles to make sure that

650
00:32:41.030 --> 00:32:43.880
that stuff doesn't get run
a runtime. And that it's

651
00:32:43.910 --> 00:32:47.030
well encapsulated. You know, you
follow all the usual architectural

652
00:32:47.030 --> 00:32:49.310
principles. And if you, I
mean, if you can do

653
00:32:49.310 --> 00:32:51.350
this stuff, that for me
is a sign, the, or

654
00:32:51.350 --> 00:32:53.990
architecture is actually good that
you've practiced, you know, good

655
00:32:53.990 --> 00:32:57.170
object oriented design that you
have nice separation of concerns

656
00:32:57.380 --> 00:33:00.380
that you have a properly
componentized architectures when people find

657
00:33:00.380 --> 00:33:03.020
this difficult it's normally because
they've got a horrible monolithic

658
00:33:03.020 --> 00:33:05.090
ball of mud. And in
that, you know, in that

659
00:33:05.090 --> 00:33:06.920
situation, you know, this is
just one of the problems

660
00:33:06.920 --> 00:33:08.510
that your experience is that
they will be hard to

661
00:33:08.510 --> 00:33:11.740
do continuous delivery. Yeah. I
think it's a good test

662
00:33:11.740 --> 00:33:13.600
for a design of a
system is have you thought

663
00:33:13.600 --> 00:33:17.320
about how it can be
gracefully and gradually replaced? And

664
00:33:17.320 --> 00:33:18.940
we should all be thinking
about the death of our

665
00:33:18.940 --> 00:33:23.980
systems from the early earliest
days. Very cool. Well, thanks

666
00:33:23.980 --> 00:33:25.990
guys for chatting with me
today, the book is called

667
00:33:25.990 --> 00:33:29.590
continuous delivery, reliable software releases
through build test and deployment

668
00:33:29.590 --> 00:33:33.310
automation. And it's by jazz
humble and also David Farley. And

669
00:33:33.310 --> 00:33:35.590
this is part of the
Addison Wesley signature series of

670
00:33:35.590 --> 00:33:38.320
which you are the series
editor. Indeed I am. And

671
00:33:38.650 --> 00:33:41.650
I've been very fortunate to
have these books, although I

672
00:33:41.650 --> 00:33:43.600
am annoyed that this is
yet another book that this

673
00:33:43.630 --> 00:33:48.430
William jolt award and I've
only ever come second. And

674
00:33:48.430 --> 00:33:50.680
on that bitter note, I
thank you guys, both just

675
00:33:50.680 --> 00:33:52.990
humble and Martin Fowler for
chatting with me today here

676
00:33:52.990 --> 00:33:56.350
at GotU. Thanks for having
us. Thanks. This has been

677
00:33:56.350 --> 00:33:59.110
another episode of Hanselminutes and
we'll see you again next

678
00:33:59.110 --> 00:33:59.290
week.

