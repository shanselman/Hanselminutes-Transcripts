WEBVTT FILE

1
00:00:12.230 --> 00:00:16.340
From Hanselman it's dot com.
It's Hanselman. It's a weekly

2
00:00:16.340 --> 00:00:20.720
discussion with web developer and
technologists. Scott Hanselman hosted by

3
00:00:20.720 --> 00:00:25.310
Carl Franklin. This is Lawrence Ryan announcing
show number five recorded Monday,

4
00:00:25.310 --> 00:00:31.730
February 6th, 2006. Support for Hanselman it's
is provided by automated QA

5
00:00:31.850 --> 00:00:36.890
makers of tests. Complete providing
automated testing of windows.net framework,

6
00:00:37.070 --> 00:00:46.850
Java and web applications online@wwwdotautomatedqa.com.
And by Peter bloom.com start

7
00:00:46.850 --> 00:00:56.720
with better controls. Finish it
better sites online@wwwdotpeterblum.com. Support is

8
00:00:56.720 --> 00:01:01.400
also provided by.net developers journal
the world's leading.net developer magazine

9
00:01:02.060 --> 00:01:07.880
online at www dot <inaudible>
dot com. In this episode,

10
00:01:08.090 --> 00:01:11.540
Scott discusses the state of
the mano project, an open

11
00:01:11.540 --> 00:01:18.380
source free BSD implementation of
the.net framework. Thank you very

12
00:01:18.380 --> 00:01:21.470
much. This is Carl Franklin and
you're listening to Hansel minutes.

13
00:01:22.070 --> 00:01:24.590
I'm here with Scott again,
and this week we're talking

14
00:01:24.590 --> 00:01:27.560
about mano, are we not?
We are in fact a

15
00:01:27.560 --> 00:01:31.040
good topic. I haven't talked
about mano since I interviewed

16
00:01:31.040 --> 00:01:35.150
Miguel de Caza a long
time ago on dotnet rocks.

17
00:01:35.720 --> 00:01:38.510
And at that point, mano
is in a state where

18
00:01:39.020 --> 00:01:41.960
it was working really well
in ASP net and a

19
00:01:41.960 --> 00:01:45.290
windows forms still hadn't support
hadn't come out yet. And

20
00:01:45.290 --> 00:01:48.830
I guess that's the really
a Holy grail of motto.

21
00:01:48.830 --> 00:01:51.590
Isn't it? Yeah. I mean,
mano as another, as an

22
00:01:51.590 --> 00:01:55.130
optional Java, right. Would be
the Holy grail. So, so

23
00:01:55.130 --> 00:01:58.910
what is it all about?
So I've been re I've

24
00:01:58.910 --> 00:02:00.950
been collecting links, looking at
mano reading about it. I've

25
00:02:00.950 --> 00:02:03.140
been using it for a
while. You know, we do

26
00:02:03.140 --> 00:02:06.170
a lot of asp.net around
here. So anytime someone writes

27
00:02:06.170 --> 00:02:08.810
something in asp.net, they they're
always thinking in the back

28
00:02:08.810 --> 00:02:10.340
of their head, Lou gee
whiz, wouldn't it be nice

29
00:02:10.340 --> 00:02:12.560
to run this on a
different, on a different stack?

30
00:02:12.770 --> 00:02:16.490
Yeah. Now the there's the
windows kind of stack, right?

31
00:02:16.490 --> 00:02:19.670
Which is the buy into
all things, windows way of

32
00:02:19.670 --> 00:02:22.190
thinking about things. But for
many, many years, there's been

33
00:02:22.190 --> 00:02:25.010
a thing that's called the
lamp stack. L I M

34
00:02:25.010 --> 00:02:28.160
P. And that's an acronym
that refers to a Linux,

35
00:02:28.160 --> 00:02:31.700
Apache, my sequel and Pearl,
right. Or Python or PHP,

36
00:02:31.700 --> 00:02:33.650
or any of the, you
know, the P kind of

37
00:02:33.680 --> 00:02:37.670
starting with P languages. And
this lamp stack really kind

38
00:02:37.670 --> 00:02:39.890
of started with CGI in
the nineties and is kind

39
00:02:39.890 --> 00:02:42.620
of move forward. So there's
basically, there's lamp people. And

40
00:02:42.620 --> 00:02:46.910
then there's Microsoft people. And
within the, the mano community,

41
00:02:46.910 --> 00:02:49.550
they kind of started up
another acronym, the lamb L

42
00:02:49.550 --> 00:02:53.480
a M M stack, which
would be Linux Apache, my

43
00:02:53.480 --> 00:02:57.020
SQL, and instead of the
P for Pearl and PHP,

44
00:02:57.320 --> 00:03:00.100
it would be M Vermano.
So you get all of

45
00:03:00.100 --> 00:03:03.130
the benefits of free everything
and of course free like

46
00:03:03.130 --> 00:03:07.060
a puppy. Right. Right. And
you get the convenience and

47
00:03:07.060 --> 00:03:10.890
the flexibility of C-sharp as
your language of choice, Noodling

48
00:03:10.890 --> 00:03:14.040
around with mano, have you
personally done Well, I've done

49
00:03:14.040 --> 00:03:16.890
a lot. I've we know
there's a, there's a fellow

50
00:03:16.890 --> 00:03:18.810
who did a port of
an early version of DAS

51
00:03:18.810 --> 00:03:23.310
blog, DAS blog, the blogging
software that Clemons vaster started

52
00:03:23.310 --> 00:03:24.840
that Omar and I, and
a bunch of guys work

53
00:03:24.840 --> 00:03:27.450
on. It turns out that
if you were going to

54
00:03:27.450 --> 00:03:30.840
get something like DAS blog
running on under mano, what

55
00:03:30.840 --> 00:03:33.600
would, what would be some
things you couldn't do? Well,

56
00:03:33.600 --> 00:03:37.290
you couldn't access the registry
unless you were only on

57
00:03:37.290 --> 00:03:38.790
windows. And of course you
want to get this to

58
00:03:38.790 --> 00:03:41.310
work on Lennox. So there's
some places in Mon in

59
00:03:41.310 --> 00:03:43.050
a dash blog and early
versions desk blog, where we

60
00:03:43.050 --> 00:03:46.230
access the, the registry. Well,
the answer is clear. Linux

61
00:03:46.230 --> 00:03:48.870
has to add a registry,
Slap a registry on it,

62
00:03:48.870 --> 00:03:50.520
and then it would be
good to go, right? They

63
00:03:50.520 --> 00:03:52.410
can have all the, all
the convenience of a giant

64
00:03:52.410 --> 00:03:55.350
binary opaque file that is
easily corruptible. It's the obvious

65
00:03:55.350 --> 00:03:58.110
answer. So there's a number
of different things that are,

66
00:03:58.110 --> 00:04:00.450
that are specific to the
platform that you wouldn't want

67
00:04:00.450 --> 00:04:02.700
to do. So we weren't
thinking about that when we

68
00:04:02.700 --> 00:04:05.820
wrote this blog. So, but
they got a version of

69
00:04:05.820 --> 00:04:09.900
DAS blog up and running
on, on mano. And, you

70
00:04:09.900 --> 00:04:12.630
know, the easiest way for
someone to mess with mano

71
00:04:12.630 --> 00:04:15.420
without messing with their machine
would be to use one

72
00:04:15.420 --> 00:04:20.820
of these mano live CDs.
You can get this@manohyphenlive.com. So

73
00:04:20.820 --> 00:04:22.920
is it an ISO image
kind of thing? Yeah, exactly.

74
00:04:23.160 --> 00:04:24.930
I, him, as you download,
you burn it to a

75
00:04:24.930 --> 00:04:27.150
CD and then you actually
boot directly off the CD

76
00:04:27.150 --> 00:04:31.440
and you get a complete
running Linux distribution with all

77
00:04:31.440 --> 00:04:34.290
the mano tools, configure it,
install with all the paths

78
00:04:34.290 --> 00:04:36.720
and shell scripts and things
that windows people aren't really

79
00:04:36.750 --> 00:04:38.910
savvy about. Yeah. And does
it use a space on

80
00:04:38.910 --> 00:04:41.760
your hard drive? No. It
actually never mounts your C

81
00:04:41.760 --> 00:04:43.620
drive, so you can do
all this work and then

82
00:04:43.620 --> 00:04:46.410
you just start over, you
know, you can save it

83
00:04:46.410 --> 00:04:48.300
to a, you save your
code to a USB key

84
00:04:48.300 --> 00:04:50.550
and then remove the disc
reboot and you're back to

85
00:04:50.610 --> 00:04:52.950
really, So it doesn't recognize
your drives. It doesn't ever

86
00:04:52.950 --> 00:04:55.890
Mount them. You can, you
can optionally Mount your drives.

87
00:04:56.010 --> 00:04:57.990
Okay. But the idea is
that he live CD you

88
00:04:57.990 --> 00:05:00.330
kind of the gestalt around
a live CD, whether it

89
00:05:00.330 --> 00:05:02.640
be the, like the baboon
to Linux live CDs, or

90
00:05:02.640 --> 00:05:06.600
whether it be the <inaudible>,
let folks do a boot

91
00:05:06.600 --> 00:05:08.880
without all of the pain
and fear of dual booting.

92
00:05:08.940 --> 00:05:11.820
Right. Okay. Well, okay. So
you could go and install

93
00:05:11.820 --> 00:05:13.530
the next on a machine
and get all of the

94
00:05:13.830 --> 00:05:17.160
accoutrement that you needed to
make mano happen. USB key

95
00:05:17.520 --> 00:05:20.280
makes sense. I just run
mano live booting off of

96
00:05:20.280 --> 00:05:22.530
the CD and then you're
into it. And that actually

97
00:05:22.530 --> 00:05:25.590
includes the DAS blog port.
It includes a port of

98
00:05:25.590 --> 00:05:29.850
I spy. That's been running
on my own all sorts

99
00:05:29.850 --> 00:05:31.530
of applications. And one of
the things that's neat about

100
00:05:31.530 --> 00:05:34.560
mano is that it's a,
it's B it's gaining acceptance,

101
00:05:34.560 --> 00:05:37.110
just like the.net framework gained
acceptance before people would go,

102
00:05:37.110 --> 00:05:39.120
gosh, I've got a windows
machine. Do I really want

103
00:05:39.120 --> 00:05:41.970
to Sully it with the.net
framework? Now there are things

104
00:05:41.970 --> 00:05:45.000
like banshee, a popular audio
player. That's just being installed

105
00:05:45.000 --> 00:05:48.060
by default Linux distributions, like
a boon to just install

106
00:05:48.060 --> 00:05:51.690
Moto along for the ride.
So it's becoming ubiquitous for

107
00:05:51.870 --> 00:05:54.360
all those grandmas out there
that are running Linux. Wow.

108
00:05:54.900 --> 00:05:56.370
So one of the things
that I want to kind

109
00:05:56.370 --> 00:05:59.480
of talk about generally, it's
like, what exactly is mano?

110
00:05:59.480 --> 00:06:00.830
Because a lot of people
hear mano and they say,

111
00:06:00.860 --> 00:06:03.260
Oh, well, I figured someone
else went out and basically

112
00:06:03.260 --> 00:06:07.490
wrote everything Microsoft wrote again.
And, you know, that's how

113
00:06:07.490 --> 00:06:11.630
it works. That's basically what
has happened, but they've done

114
00:06:11.630 --> 00:06:14.840
this by not reverse engineering.
It's very important to note

115
00:06:14.840 --> 00:06:18.260
that motto is not someone
peeking into.net and reflect during

116
00:06:18.260 --> 00:06:21.470
they, they explicitly disallow that
if you remember that, that

117
00:06:21.530 --> 00:06:25.790
the CLI that common language
implementation is itself, a specification,

118
00:06:26.000 --> 00:06:29.090
right? And Microsoft released rotor
R O T O R

119
00:06:29.300 --> 00:06:33.050
their own BSD implementation to
make the point very clear

120
00:06:33.050 --> 00:06:36.500
that.net, the B the base
class library, to some extent,

121
00:06:36.770 --> 00:06:40.100
but more importantly, the, the
runtime is a, a thing

122
00:06:40.100 --> 00:06:42.350
that could run anywhere. It
wasn't just a theory. They

123
00:06:42.350 --> 00:06:45.230
wanted to really make that,
make that happen. I've actually

124
00:06:45.230 --> 00:06:50.570
got a screencast. So you
can see@shrinkstir.com slash <inaudible>. That's

125
00:06:50.570 --> 00:06:52.760
just a flash screen cast
that I put together where

126
00:06:52.760 --> 00:06:55.880
I just build a hello
world. And it's not just

127
00:06:55.880 --> 00:06:58.850
a matter of saying, here's
some, C-sharp compile it on

128
00:06:58.970 --> 00:07:02.180
windows, run it on windows.
Here's some sharp ComPilot under

129
00:07:02.180 --> 00:07:04.490
mano and run it on
whatever you can mix and

130
00:07:04.490 --> 00:07:08.180
match, because understand that mano
is a compiler and it's

131
00:07:08.180 --> 00:07:11.120
a kind of a runtime
interpreter or a jitter. So

132
00:07:11.120 --> 00:07:14.210
you can actually have many
combinations that people don't really

133
00:07:14.210 --> 00:07:17.420
think of. You could potentially
compile on windows using the

134
00:07:17.420 --> 00:07:23.180
Microsoft compiler run against mottoes
base class library on Llanos

135
00:07:24.770 --> 00:07:28.010
with mottos jitter, with models,
runtime, or you can do

136
00:07:28.010 --> 00:07:31.460
any combination you could potentially
compile on mano and run

137
00:07:31.460 --> 00:07:34.130
under windows. I mean, if
you can reflect or into

138
00:07:34.130 --> 00:07:37.040
a mano executable, just like
you can into a windows,

139
00:07:37.040 --> 00:07:39.830
because it's the same specification
that I L is there.

140
00:07:40.100 --> 00:07:43.790
And that screencast@trickster.com slash <inaudible>
is a, a real visceral

141
00:07:43.790 --> 00:07:46.450
example of exactly how that
works. So, as I was

142
00:07:46.450 --> 00:07:48.760
saying before, when I spoke
to Miguel a couple of

143
00:07:48.760 --> 00:07:52.150
years ago, we, he, he
was saying that, you know,

144
00:07:52.150 --> 00:07:54.070
they tried to do windows
forms a couple of different

145
00:07:54.070 --> 00:07:56.680
ways, and it just wasn't
together yet. What's the status

146
00:07:56.680 --> 00:08:00.220
of that? Well, there's, there's
lots of pretty cool windows

147
00:08:00.220 --> 00:08:02.080
forms, demos. A lot of
people who are doing this

148
00:08:02.080 --> 00:08:05.790
stuff and making it happen,
the issue is that the,

149
00:08:05.790 --> 00:08:09.190
the, the wind forms library
has to have that underlying

150
00:08:09.340 --> 00:08:15.640
windows windowing rather support. So
there's things like Glade, sharp,

151
00:08:15.670 --> 00:08:19.540
Coco sharp for Mac different
underlying windowing library. So that

152
00:08:19.540 --> 00:08:22.720
when you say, you know,
window w equals new window,

153
00:08:23.140 --> 00:08:25.690
somebody underneath has got to
do the work. And I

154
00:08:25.690 --> 00:08:28.060
guess the problem is that,
you know, why these UIs,

155
00:08:28.090 --> 00:08:31.240
that emulate windows have typically
been slow is because they

156
00:08:31.240 --> 00:08:34.240
basically have to wrap those
low level API calls that

157
00:08:34.750 --> 00:08:39.280
hold resources in the system,
right? Not really. It would

158
00:08:39.280 --> 00:08:43.420
be ideal if someone could
simply call the underlying API

159
00:08:43.420 --> 00:08:46.520
that mapped directly to what
the management is, but what

160
00:08:46.540 --> 00:08:49.240
happens is like early versions
of Java, didn't have what's

161
00:08:49.240 --> 00:08:51.640
called native control support. Remember
when you ran a job

162
00:08:51.670 --> 00:08:54.610
application, it always looked funky.
That's because there really were

163
00:08:54.610 --> 00:08:57.450
not any controls on the
screen. You thought you saw

164
00:08:57.450 --> 00:09:00.330
a button and you thought
you saw listbox, but they

165
00:09:00.330 --> 00:09:04.710
painted them themselves. Then you
got support for when I

166
00:09:04.710 --> 00:09:07.100
say button, I mean, really
give me a button. Yup.

167
00:09:07.340 --> 00:09:11.300
And unfortunately though, there's the
underlying, when doing APIs for

168
00:09:11.300 --> 00:09:16.040
Mac four X, 11, four
for Glade <inaudible> genome on

169
00:09:16.040 --> 00:09:19.550
a Noam, rather on a
Linux, these are all different

170
00:09:19.550 --> 00:09:23.210
when doing APIs and trying
to make WinForms behave appropriately,

171
00:09:23.210 --> 00:09:26.120
such that it would really
write once, run anywhere. It

172
00:09:26.120 --> 00:09:28.430
can be a little confusing,
but yes, it is totally

173
00:09:28.430 --> 00:09:30.410
possible. I mean, banshee has
an audio player as an

174
00:09:30.410 --> 00:09:33.860
example. And really the most,
the most extreme example is

175
00:09:33.920 --> 00:09:37.250
mom develop, which is a
fork of sharp develop. You

176
00:09:37.250 --> 00:09:41.330
can get it@manodeveloped.com version 0.9
really looks like a nice,

177
00:09:41.390 --> 00:09:44.240
a nice IDE, and it
runs under Mac. It runs

178
00:09:44.240 --> 00:09:47.780
under Linux. It's not a
bad experience. It's certainly not

179
00:09:47.870 --> 00:09:51.380
as polished as visual studio,
but it's a very clear,

180
00:09:51.380 --> 00:09:54.020
for example, that wind farm
support can be made to,

181
00:09:54.230 --> 00:09:57.290
to happen on across platforms.
Speaking of IDs, did you

182
00:09:57.290 --> 00:09:59.990
see sun's new ID? This
is the one they, the

183
00:09:59.990 --> 00:10:03.800
J the eclipse Ajax stuff.
Yeah. There's a lot of,

184
00:10:03.830 --> 00:10:06.110
you know, we, yesterday we
woke up and there were

185
00:10:06.110 --> 00:10:09.080
no IDs and a windows.
People just kind of put

186
00:10:09.080 --> 00:10:11.030
it along thinking that visual
studio was where it was

187
00:10:11.030 --> 00:10:12.740
at. And there was either
visual studio people. There are

188
00:10:12.740 --> 00:10:15.350
people who coded in VI,
and then you wake up

189
00:10:15.350 --> 00:10:17.720
the next day and you
realize, gosh, there are lots

190
00:10:17.720 --> 00:10:20.210
of people out there other
than Don boxers off using

191
00:10:20.210 --> 00:10:23.930
Emacs. There are lots of
people out there coding just

192
00:10:23.930 --> 00:10:27.230
happily in these free IDs.
On the windows side, sharp

193
00:10:27.230 --> 00:10:31.490
develop is really very impressive.
There's actually a rocks book,

194
00:10:31.490 --> 00:10:33.590
one of the big red,
but books, like the ones

195
00:10:33.590 --> 00:10:36.470
that bill having an eye
right for that is a

196
00:10:36.470 --> 00:10:42.020
dissection of sharp develop. And
it's a fantastic basically autopsy

197
00:10:42.050 --> 00:10:44.420
of a really COVID okay.
The wind farms application, that

198
00:10:44.420 --> 00:10:47.570
decisions they made, the decisions
that they didn't. And you

199
00:10:47.570 --> 00:10:49.790
can go up at <inaudible>
dot com slash B T

200
00:10:49.790 --> 00:10:52.790
H, and download sharp develop
totally free. IDE it's kind

201
00:10:52.790 --> 00:10:55.160
of like the, it looks
like visual studio kind of,

202
00:10:55.320 --> 00:10:57.950
it really does it. It's
got some visual studio, like

203
00:10:58.100 --> 00:11:01.220
a likeness to it, but
it is really its own

204
00:11:01.220 --> 00:11:04.340
beast. It's got the built
actually, one of the things

205
00:11:04.340 --> 00:11:05.930
I would suggest when you
go to sharp developers, go

206
00:11:05.930 --> 00:11:08.030
to the page, scroll all
the way down to the

207
00:11:08.030 --> 00:11:10.640
bottom. And there's a really
small section that says you

208
00:11:10.640 --> 00:11:14.390
can download unstable builds. There's
a one.one version and a

209
00:11:14.390 --> 00:11:17.030
two hour version check out
the unstable builds. They've got

210
00:11:17.030 --> 00:11:21.140
stuff like support for code
coverage and testing built directly

211
00:11:21.140 --> 00:11:24.890
into it. The debugger works
a law for a very

212
00:11:24.890 --> 00:11:27.890
long time. Sharp developed didn't
have any debugger support. And

213
00:11:27.890 --> 00:11:30.080
if you want to do
any kind of optional language

214
00:11:30.200 --> 00:11:33.920
support on, on an 80
sharp developed, lets you do

215
00:11:33.920 --> 00:11:37.520
that. There's a really great
language called boo boo is

216
00:11:37.520 --> 00:11:40.830
what they call a wrist
friendly CLI language. So a

217
00:11:40.910 --> 00:11:44.210
language for the common language
implementation, meaning a dotnet based

218
00:11:44.210 --> 00:11:48.290
language that is friendly to
your wrists. These guys basically

219
00:11:48.290 --> 00:11:51.710
said all these curly braces
and, and parentheses are all

220
00:11:51.710 --> 00:11:54.640
very confusing. You're always from
top of the page to

221
00:11:54.640 --> 00:11:55.990
the bottom of the page,
trying to make sure that

222
00:11:55.990 --> 00:12:00.970
your, your brackets match up
with BU it's kinda like

223
00:12:01.000 --> 00:12:04.210
it's kind of like Python
in that there is a

224
00:12:04.450 --> 00:12:08.110
meaningful white space. You don't
use curly braces to indicate

225
00:12:08.110 --> 00:12:11.590
a block. You actually use
indentation. So indentations meaningful. And

226
00:12:11.590 --> 00:12:13.360
if you want to end
your, your method, you hit

227
00:12:13.360 --> 00:12:16.360
enter twice and you start
writing your next method. So

228
00:12:16.360 --> 00:12:18.100
it really gets rid of
a lot of the fluff.

229
00:12:18.100 --> 00:12:20.890
It's very comfortable language. It
feels like Python kind of

230
00:12:20.890 --> 00:12:23.020
feels like Ruby, but actually,
you know, for a VB

231
00:12:23.020 --> 00:12:24.870
guy, your VB guy. Yeah,
yeah. I'm looking at it.

232
00:12:24.870 --> 00:12:26.880
It looks very VB. Like
There is a, there's a

233
00:12:26.880 --> 00:12:29.610
thing they call duck typing,
which is something that they

234
00:12:29.640 --> 00:12:31.860
kind of took from Python.
That Ruby also claims to

235
00:12:31.860 --> 00:12:33.810
have, which is if it
looks like a duck and

236
00:12:33.810 --> 00:12:35.790
it walks like a duck,
it must be a duck.

237
00:12:35.790 --> 00:12:38.910
So if you go X
equals four, it'll do typing

238
00:12:38.910 --> 00:12:40.980
of that. But not in
the sense of a variant

239
00:12:41.910 --> 00:12:44.400
where it figures out at
runtime. In this case, the

240
00:12:44.400 --> 00:12:47.940
compiler actually figures out at
a compile time. This, this

241
00:12:47.940 --> 00:12:49.830
is an ant right now.
I can see because he's

242
00:12:49.830 --> 00:12:53.190
gone X equals four. So
it looks a little scary.

243
00:12:53.520 --> 00:12:55.170
Well, it is a little
scary, but you guys deal

244
00:12:55.170 --> 00:12:56.820
with it at runtime every
day with your, with your

245
00:12:56.820 --> 00:12:59.520
variants and your crazy stuff
You don't use. I don't

246
00:12:59.520 --> 00:13:04.620
use variants. Oh, absolutely. Okay,
good. I hate the variants.

247
00:13:04.770 --> 00:13:08.670
Variants are evil. That's true.
Yeah. So his, so his

248
00:13:08.670 --> 00:13:13.530
options strict off Evil. Fantastic.
You would, you would like

249
00:13:13.530 --> 00:13:16.200
boo. Boo, I think is
an, if, if ever there

250
00:13:16.200 --> 00:13:19.290
could be a language that
somehow merged the, you know,

251
00:13:19.290 --> 00:13:22.110
got the C-sharp people and
the VB people to like,

252
00:13:22.170 --> 00:13:24.180
you know, throw down their
arms and have a cup

253
00:13:24.180 --> 00:13:26.670
of coffee, you know, something
like BU would, would allow

254
00:13:26.670 --> 00:13:29.220
you to do that. Okay.
Definitely something you want to

255
00:13:29.300 --> 00:13:42.090
would want to check out.
I will. Hey, this is

256
00:13:42.090 --> 00:13:47.790
Carl Franklin checkout test complete from
automated qa.com. Test complete does

257
00:13:47.820 --> 00:13:53.940
automated testing of windows.net framework,
Java and web applications. It's

258
00:13:53.940 --> 00:13:57.330
won jolt awards two years
in a row from software

259
00:13:57.330 --> 00:14:01.680
development magazine, even though it's
been voted best testing tool

260
00:14:02.250 --> 00:14:05.880
test complete is really affordable.
It costs just a fraction

261
00:14:05.880 --> 00:14:07.830
of what you'd have to
pay for its nearest big

262
00:14:07.830 --> 00:14:13.500
name. Competitor test complete is
standards based and extensible with

263
00:14:13.500 --> 00:14:17.850
a well-documented plugin API and
the test scripts use familiar

264
00:14:17.850 --> 00:14:23.280
languages, VB script, Java script,
C-sharp script C plus plus

265
00:14:23.280 --> 00:14:27.270
script, and even Delphi scripts.
You choose the language that

266
00:14:27.270 --> 00:14:30.480
works best for your team.
You don't have to buy

267
00:14:30.480 --> 00:14:34.380
a dozen different modules to
test all your applications. Test

268
00:14:34.380 --> 00:14:38.490
complete is a full test
development environment. It has features

269
00:14:38.490 --> 00:14:42.000
like an easy to use
windows test recorder that auto

270
00:14:42.000 --> 00:14:46.050
creates test scripts and an
advanced script editor with features

271
00:14:46.050 --> 00:14:52.400
like syntax highlighting code completion,
and context sensitive help. It

272
00:14:52.400 --> 00:14:57.170
has test execute a lightweight
utility for running distributed tests

273
00:14:57.680 --> 00:15:01.370
and test recorder, a library
for building tests into your

274
00:15:01.370 --> 00:15:05.540
application. And if you plan
on using visual studio, 2005

275
00:15:05.540 --> 00:15:09.740
team system test complete integrates
nicely with it and adds

276
00:15:09.800 --> 00:15:14.000
a new test, complete test
type. So do yourself a

277
00:15:14.000 --> 00:15:27.710
favor in download a free
evaluation copy of testcomplete@automatedqa.com. All

278
00:15:27.710 --> 00:15:30.440
right. So we've got the
languages in the windows forms

279
00:15:30.440 --> 00:15:32.720
and all that stuff. What
is, what is monetarily made

280
00:15:32.720 --> 00:15:35.630
up of? What's the compiler?
What is it? So this

281
00:15:35.630 --> 00:15:38.330
is a really interesting thing
about model. The compiler itself

282
00:15:38.360 --> 00:15:41.540
is actually written in C
sharp and the compiler can

283
00:15:41.540 --> 00:15:44.840
compile itself. It's been able
to compile itself since late

284
00:15:44.840 --> 00:15:48.800
December of 2001. Yeah. So
they've, I don't know quite

285
00:15:49.010 --> 00:15:52.850
how a compiler builds itself.
You certainly couldn't build the

286
00:15:52.850 --> 00:15:54.530
new version with the new
version cause you're in the

287
00:15:54.530 --> 00:15:56.900
process of building the new
version. So there's some potential

288
00:15:56.900 --> 00:15:59.900
space, time anomalies and possibly
ripping open the fabric of

289
00:16:00.200 --> 00:16:02.330
the time that could affect
as long as you're not

290
00:16:02.330 --> 00:16:05.480
writing over your own file.
You're okay. Probably, but there's

291
00:16:05.480 --> 00:16:09.470
actually two mano compilers. Interestingly
enough, there's one called MCs.

292
00:16:09.500 --> 00:16:13.130
Just like we're used to
the, you know, CSC under

293
00:16:13.820 --> 00:16:17.150
the C sharp compiler. MCs
is the one O mano

294
00:16:17.150 --> 00:16:20.750
compiler and then G M
C S G is for

295
00:16:20.750 --> 00:16:23.390
generics is the two old
compounders. So there's actually two

296
00:16:23.390 --> 00:16:28.990
compilers and there's actually two
class libraries. So you'd have

297
00:16:28.990 --> 00:16:31.430
to put a little thought
in that. So by default,

298
00:16:31.430 --> 00:16:34.220
if you run MCs, you'll
be building one O code

299
00:16:34.220 --> 00:16:37.130
against the two O class
library. So Amano guys, do

300
00:16:37.130 --> 00:16:38.420
you have to give a
little bit of thought about

301
00:16:38.420 --> 00:16:40.490
what they're trying to accomplish
and if they, if they

302
00:16:40.490 --> 00:16:42.500
just want things to work
on mono it'll work great.

303
00:16:42.500 --> 00:16:45.140
But if they want to
do cross platform things, they

304
00:16:45.140 --> 00:16:46.700
need to give a little
bit of thought into what

305
00:16:46.700 --> 00:16:49.670
they're trying to, trying to
do now for anyone who

306
00:16:49.670 --> 00:16:53.690
doesn't know what cross-platform means,
what are the platforms that

307
00:16:53.690 --> 00:16:57.040
we're talking about? Yeah. So
the, the list of, of

308
00:16:57.050 --> 00:17:01.340
architectures is, is pretty long,
but it works on, on

309
00:17:01.340 --> 00:17:04.520
Linux. It works on Solaris.
It works on windows. It

310
00:17:04.520 --> 00:17:08.240
works on, you know, all
the different BSD variants, open

311
00:17:08.240 --> 00:17:11.150
BSD, net, BSD, things like
that. And then on some

312
00:17:11.150 --> 00:17:13.790
of the more kind of
weird things like HPUX, there's

313
00:17:13.790 --> 00:17:16.250
an interpreter, but you know,
for the most part, the,

314
00:17:16.250 --> 00:17:21.200
the, the easy answer is
Linux windows, Solaris, and Mac

315
00:17:21.200 --> 00:17:25.190
OS 10. Yeah. Now that's
interesting. I mean, it's all.

316
00:17:25.190 --> 00:17:27.380
And I said this to
Miguel too, you know, the

317
00:17:27.380 --> 00:17:29.870
day I really become interested
in mano is the day

318
00:17:29.870 --> 00:17:33.440
where I can, you know,
email an exe and windows,

319
00:17:33.440 --> 00:17:36.620
the ECC that I've compiled
on a windows app to

320
00:17:36.620 --> 00:17:38.780
my Mac friend and have
him open it and run

321
00:17:38.780 --> 00:17:41.600
it. And you can totally,
you can actually totally do

322
00:17:41.600 --> 00:17:43.250
that. Now are there, I
know a lot of people

323
00:17:43.250 --> 00:17:46.940
who do Mac mano development
on their windows machines, and

324
00:17:46.940 --> 00:17:49.500
then they just copy the
executable over to their Mac

325
00:17:49.980 --> 00:17:53.480
to get that stuff. And
the question obviously is how

326
00:17:53.480 --> 00:17:57.320
rich is the support? So
obviously anything that isn't windows

327
00:17:57.320 --> 00:18:00.770
is not there, but what
else is, I mean, well,

328
00:18:00.770 --> 00:18:03.980
so you have access to
web services. Yeah. So, so

329
00:18:03.980 --> 00:18:07.550
actually more powerful than the
wind form stuff, which of

330
00:18:07.550 --> 00:18:09.770
course you would struggle with
third party controls and you

331
00:18:09.770 --> 00:18:12.260
couldn't just drop in any
old funky grid control. You

332
00:18:12.260 --> 00:18:14.450
can't just go grab all
the Infragistics stuff and make

333
00:18:14.450 --> 00:18:17.030
it work. Unless they've gotten
a mano, a mano stuff

334
00:18:17.030 --> 00:18:20.360
working because anytime someone does
a pee invoke or a

335
00:18:20.360 --> 00:18:22.820
comment or op or anything
like that, then you're often

336
00:18:22.820 --> 00:18:26.030
in space. Right. But on
the, on the asp.net side,

337
00:18:26.660 --> 00:18:29.720
there is some crazy, fantastic
support. I mean, it's really

338
00:18:29.780 --> 00:18:31.550
slick, right? Yeah. That's where
it makes a lot of

339
00:18:31.550 --> 00:18:35.150
sense. Totally, totally. I mean,
I would very much want

340
00:18:35.150 --> 00:18:39.110
the next version of dusk
blog to be extracted away

341
00:18:39.110 --> 00:18:41.030
enough that someone could be
running it on Linux and

342
00:18:41.030 --> 00:18:43.880
my SQL on or on
a Mount, on a Mac.

343
00:18:44.240 --> 00:18:46.730
And then on the windows
side use, you know, my

344
00:18:46.730 --> 00:18:50.960
SQL or SQL express or
whatever, you know, you, you

345
00:18:50.960 --> 00:18:54.890
know about Cassini, right? Yes.
This is the file based

346
00:18:55.310 --> 00:18:58.340
a web server that Scott
Guthrie's team wrote for ice

347
00:18:58.340 --> 00:19:01.070
peanut too well. So The
motto guys have got their

348
00:19:01.070 --> 00:19:04.220
own kind of Cassini called
X S P. And this

349
00:19:04.220 --> 00:19:07.040
is the tiny little web
server that's written, mostly managed

350
00:19:07.040 --> 00:19:11.150
code that lets you run
just HTTP. You can't run

351
00:19:11.210 --> 00:19:14.000
SSL, but you can test
your stuff. You basically fire

352
00:19:14.000 --> 00:19:16.010
it up just in time,
you do your thing and

353
00:19:16.010 --> 00:19:18.050
then you shut it down.
But they've also got a

354
00:19:18.050 --> 00:19:20.810
thing called mod mano, which
is the equivalent of a

355
00:19:20.810 --> 00:19:23.150
nice sappy DLL. If you
put it in the terms

356
00:19:23.150 --> 00:19:27.380
of a person, right. People
at the low level, right?

357
00:19:27.380 --> 00:19:31.190
These ISI API, these ice
sappy filters, the internet server

358
00:19:31.190 --> 00:19:34.640
API, and that's a bridge
between AIS and whatever you're

359
00:19:34.640 --> 00:19:37.400
deciding to call. Yeah. So
these different modules that you

360
00:19:37.400 --> 00:19:39.950
plug into a patchy provide
you with that bridge. Apache

361
00:19:39.950 --> 00:19:45.350
handles the HDP traffic and
mano, their asp.net runtime would

362
00:19:45.350 --> 00:19:48.560
handle the actual generation of
the pages. They've got some

363
00:19:48.560 --> 00:19:51.680
ASP on that. Two O
support. They've got web services

364
00:19:51.680 --> 00:19:55.640
support. I mean, it really
works. You, you wouldn't have

365
00:19:55.640 --> 00:19:57.200
been able to, they wouldn't
have been able to get

366
00:19:57.350 --> 00:19:59.780
any version of dash blog
going with all the crazy

367
00:19:59.780 --> 00:20:02.510
stuff that we're doing in
there with the view States.

368
00:20:02.510 --> 00:20:05.060
And post-bac, I mean, it's
all there, all the eventing

369
00:20:05.420 --> 00:20:08.120
and it's very, very rich.
And they're just the fact

370
00:20:08.120 --> 00:20:12.680
that they've got all of
'em, all of <inaudible> running

371
00:20:12.690 --> 00:20:15.260
under undermine. It's pretty, it's
pretty amazing stuff. And it's

372
00:20:15.260 --> 00:20:19.670
amazing. Sometimes people don't, sometimes
people don't want to run

373
00:20:19.670 --> 00:20:22.850
IAS in their, in their
data centers. Sometimes people aren't

374
00:20:22.850 --> 00:20:27.140
really comfortable running windows. Perhaps
they may already have a

375
00:20:27.140 --> 00:20:30.230
whole pile of Linux machines
and they just say, you

376
00:20:30.230 --> 00:20:32.240
know, I just said, I'm
not really comfortable hiring you,

377
00:20:32.280 --> 00:20:35.480
you know, Fred developer, because
everything we do here is

378
00:20:35.480 --> 00:20:37.310
Linux. You know, what can
you really offer me? And

379
00:20:37.310 --> 00:20:41.600
now that I think the,
the bigotry against mottos lash.net

380
00:20:41.600 --> 00:20:43.880
in the Linux world is
going away simply by virtue

381
00:20:43.880 --> 00:20:46.160
of the fact that it
works. Yeah. It's always nice

382
00:20:46.160 --> 00:20:48.550
to use success a metric.
Yeah. You don't go say,

383
00:20:48.580 --> 00:20:51.310
Oh, well, yeah, this totally
works. Know, are you sure

384
00:20:51.310 --> 00:20:52.950
this isn't just a toy?
No, you don't. I know

385
00:20:52.990 --> 00:20:55.270
Novell does this. And it
kind of, you know, our

386
00:20:55.270 --> 00:20:57.980
compiler does 18,000 lines of
second. You know, we, we

387
00:20:58.050 --> 00:21:00.850
kind of know what we're
doing. They've really proven themselves.

388
00:21:01.030 --> 00:21:03.010
What are the, what are
the developer tools look like

389
00:21:03.040 --> 00:21:05.140
other than the IDs? Are
there any tools out there

390
00:21:05.140 --> 00:21:09.260
that help help you with
the motto? So if, if,

391
00:21:09.260 --> 00:21:12.100
if I were personally writing
motto and I was gonna

392
00:21:12.130 --> 00:21:14.260
try to like, do some
work for someone writing motto,

393
00:21:14.260 --> 00:21:16.960
I would probably either use
sharp develop. But since I'm

394
00:21:16.960 --> 00:21:19.900
such a visual studio guy,
there is an interesting visual

395
00:21:19.900 --> 00:21:23.530
studio add in that you
can get called PRJ project

396
00:21:23.560 --> 00:21:27.580
to make PRJ, to make,
and you can get this@shrinkstir.com

397
00:21:27.580 --> 00:21:31.000
slash <inaudible> or more interestingly,
the visual studio add in

398
00:21:31.000 --> 00:21:35.470
specific version of that at
shrinks.com/bt F. This is an

399
00:21:35.470 --> 00:21:38.560
add in that adds a
menu to visual studio that

400
00:21:38.560 --> 00:21:42.310
allows you to create solutions,
create CS projects and different

401
00:21:42.310 --> 00:21:47.230
projects within visual studio, compile
them on windows, test them

402
00:21:47.230 --> 00:21:49.900
on windows. And then when
it comes time to test

403
00:21:49.900 --> 00:21:53.020
it on, on motto, you
just go to the menu

404
00:21:53.020 --> 00:21:57.430
and you say, test on
mano and handles the convert,

405
00:21:57.460 --> 00:22:00.070
the kind of on the
fly conversion of that. So

406
00:22:00.070 --> 00:22:02.650
this adds a mint, this
add this project to make

407
00:22:02.650 --> 00:22:05.110
ads, a menu to visual
studio. And then I can

408
00:22:05.110 --> 00:22:07.330
just click on it and
say test and mano compile

409
00:22:07.330 --> 00:22:11.000
and motto. But interestingly, I
don't think that the, the,

410
00:22:11.090 --> 00:22:13.960
the, the bridge between visual
studio and mano personally is

411
00:22:13.960 --> 00:22:16.630
really going to happen with
little ins, like this little

412
00:22:16.630 --> 00:22:18.910
toys like this, as, as
clever as it is. Yeah.

413
00:22:19.360 --> 00:22:21.640
So I think it's really
ms. Bill. That is where

414
00:22:21.640 --> 00:22:23.590
the interesting thing of things
are gonna happen because ms.

415
00:22:23.590 --> 00:22:27.190
Build is more than just
Microsoft's version of Nat. It's

416
00:22:27.190 --> 00:22:30.010
a whole build system. I
hope backend build system is

417
00:22:30.010 --> 00:22:33.310
just as they've got the,
the Microsoft be, are you

418
00:22:33.310 --> 00:22:36.340
familiar with this MSB project?
Yeah. Right. This is the

419
00:22:36.340 --> 00:22:39.430
build Everett environment. This is
the ability to actually build

420
00:22:39.760 --> 00:22:43.540
dotnet one, one code using
visual studio two Oh 2005.

421
00:22:43.840 --> 00:22:47.500
Yeah. So there's a guy
named Gustavo Garah who has

422
00:22:47.500 --> 00:22:52.810
a, a Target's file. These
ms. Build files are built

423
00:22:52.810 --> 00:22:55.660
up of a build targets,
and he has actually added

424
00:22:55.660 --> 00:23:00.640
in mano support to his
own, his own target file.

425
00:23:00.940 --> 00:23:07.060
And you can get that
at shrink, stir.com/btl. And this

426
00:23:07.060 --> 00:23:09.070
is pretty low level stuff.
So, I mean, unless you're

427
00:23:09.070 --> 00:23:11.260
a person who wants to
poke around inside of ms.

428
00:23:11.260 --> 00:23:13.180
Build and try to get
this thing working, it might

429
00:23:13.180 --> 00:23:15.370
be more interesting just to
kind of read. You can

430
00:23:15.370 --> 00:23:19.150
also search my blog that
computer's end for ms. Build.

431
00:23:19.150 --> 00:23:21.790
And I talk about kind
of how that works. And

432
00:23:21.790 --> 00:23:24.400
if you search just for
ms. Build and mano, you'll

433
00:23:24.400 --> 00:23:27.280
start seeing some interesting work.
There's a guy named Matt

434
00:23:27.280 --> 00:23:31.150
ward. Who's got some custom
ms. Build tasks. So he's

435
00:23:31.150 --> 00:23:34.300
actually created tasks in ms.
Build that would be used

436
00:23:34.300 --> 00:23:37.390
for compiling motto three. He's
created an MCs task to

437
00:23:37.390 --> 00:23:40.330
call them mano a mano
stuff. That's one way to

438
00:23:40.330 --> 00:23:42.280
look at it. And then
there's the creation of an

439
00:23:42.280 --> 00:23:44.950
entire Target's file to do
the same. So this guy,

440
00:23:44.960 --> 00:23:47.950
Gustavo is interesting cause he
not only did it for.net.net,

441
00:23:47.960 --> 00:23:51.080
one, one, one, mano. He
did it for compact framework

442
00:23:51.080 --> 00:23:54.020
as well. So he's got
an EMIS build file such

443
00:23:54.020 --> 00:23:57.650
that you could do an
application that would simultaneously compile

444
00:23:57.650 --> 00:24:00.350
on, you know, as many
as 11 different dotnet frameworks.

445
00:24:00.650 --> 00:24:03.260
Wow. That's sweet. So, you
know, this, this stuff isn't

446
00:24:03.260 --> 00:24:06.470
necessarily ready for prime time,
but it's pretty darn amazing.

447
00:24:07.690 --> 00:24:10.480
Now what about grasshopper? I've
heard about this as being

448
00:24:10.480 --> 00:24:14.140
a pretty cool tool for
Linux. Yeah. So the, the

449
00:24:14.140 --> 00:24:17.170
main soft guys at dev
dot <inaudible> dot com, I've

450
00:24:17.170 --> 00:24:21.340
got this visual main wind
version 1.74 J two EE.

451
00:24:21.610 --> 00:24:23.320
But since that's so hard
to say, it's just called

452
00:24:23.320 --> 00:24:28.360
grasshopper. And this is an
interesting relationship that they've got

453
00:24:28.360 --> 00:24:33.070
with, with the mano guys.
What they've done is in

454
00:24:33.070 --> 00:24:35.380
the past means soft has
been known for creating a

455
00:24:35.380 --> 00:24:39.460
C API layer in Linux,
such that a windows, API

456
00:24:39.460 --> 00:24:41.650
developer, or a windows developer
writing in C or C

457
00:24:41.650 --> 00:24:44.110
plus, plus, who's going to
call like load library and

458
00:24:44.110 --> 00:24:46.120
all the kinds of things
that we used to do

459
00:24:46.120 --> 00:24:49.420
in, in unmanaged code. They
wrote a layer such that

460
00:24:49.420 --> 00:24:53.290
you could run applications cross-platform
except when someone called the

461
00:24:53.290 --> 00:24:56.710
library or show window or
peak message, it would call

462
00:24:56.710 --> 00:25:01.210
the underlying API written by
these guys. So what they've

463
00:25:01.210 --> 00:25:04.600
done is they've taken a
chunk of mano. The cause

464
00:25:04.600 --> 00:25:07.300
of the model source code
is available and they have

465
00:25:07.300 --> 00:25:10.270
a compiler that will take
that ill and turn it

466
00:25:10.270 --> 00:25:13.780
into Java bytecode wow, because
if you think about IPL,

467
00:25:13.780 --> 00:25:17.620
it's really trying to express
the programmer's intent and Java

468
00:25:17.620 --> 00:25:20.740
byte code expresses the intent
as well. Really what you

469
00:25:20.740 --> 00:25:23.050
need to do is express
that intent in such a

470
00:25:23.050 --> 00:25:27.280
way that the abstract things
translate very directly. And then

471
00:25:27.280 --> 00:25:28.690
when it comes time to
go and do something really

472
00:25:28.690 --> 00:25:32.200
physical, like get that file,
they would translate something like

473
00:25:32.200 --> 00:25:37.060
a file.open command and.net into
whatever the equivalent Java API

474
00:25:37.060 --> 00:25:40.210
is underneath. Or in this
case, probably the underlying Linux

475
00:25:40.210 --> 00:25:44.830
machines file open APIs. They've
integrated all of this with

476
00:25:44.830 --> 00:25:48.610
visual studio in a really
amazing way. Wow. You can

477
00:25:48.610 --> 00:25:52.840
say, build, get all this
Java code that's going to

478
00:25:52.840 --> 00:25:55.750
pop out and they'll actually
create a whole JTE package.

479
00:25:56.170 --> 00:25:59.170
And then you can send
that information over to J

480
00:25:59.170 --> 00:26:02.410
boss. I like winning Tomcat
or anything like that, or

481
00:26:02.410 --> 00:26:05.350
you can compile it and
deploy it off to WebSphere.

482
00:26:05.950 --> 00:26:07.930
And I've actually played with
some of this stuff. And

483
00:26:07.930 --> 00:26:11.050
it's, it's, it's real, it's
real weird to be clear

484
00:26:11.050 --> 00:26:15.280
because you're taking, you're taking,
C-sharp compiling it into this,

485
00:26:15.430 --> 00:26:19.360
this aisle that gets translated,
compile off into byte code,

486
00:26:19.930 --> 00:26:22.330
and then it's not running
on mano anymore. To be

487
00:26:22.330 --> 00:26:27.790
clear, it's running against the
mano base class library, having

488
00:26:27.790 --> 00:26:32.560
been translated into Java. It's
a, quite a hybrid. I

489
00:26:32.560 --> 00:26:34.240
mean, it's kind of, if
you ever heard the term

490
00:26:34.240 --> 00:26:37.480
Rube Goldberg, absolutely. You know,
it's like the little guy

491
00:26:37.480 --> 00:26:41.170
jumps off the cliff thing,
the mouse trap. It's pretty,

492
00:26:41.170 --> 00:26:43.290
it's pretty crazy stuff, but
you know, somehow they, it

493
00:26:43.290 --> 00:26:47.550
work, you know, it's, it's
certainly worth checking out if

494
00:26:47.550 --> 00:26:49.710
you were, if you were
interested in doing cross-platform stuff,

495
00:26:49.950 --> 00:26:53.250
but more, more than for
the cross platform stuff, which

496
00:26:53.250 --> 00:26:55.950
I think mano does by
itself. Very, very well. If

497
00:26:55.950 --> 00:26:58.980
you have a client who
insists that this must be

498
00:26:58.980 --> 00:27:02.190
in our JTE environment because
we do JTE here, right?

499
00:27:02.220 --> 00:27:04.590
We like the management tools
we trust IBM, we want

500
00:27:04.590 --> 00:27:07.980
to be JTE shop. Then
this could be something that

501
00:27:07.980 --> 00:27:10.440
we're a.net developer could really
get some, some useful work

502
00:27:10.440 --> 00:27:14.640
done, particularly on the asp.net
side. Yeah. I have personally

503
00:27:14.640 --> 00:27:19.350
translated asp.net sites over into
a grasshopper and it, it

504
00:27:19.350 --> 00:27:23.340
does work. It's pretty amazing
stuff. All right, Scott, well,

505
00:27:23.550 --> 00:27:26.070
this is pretty good. You
know, a motto seems like

506
00:27:26.070 --> 00:27:28.860
it's come a long way
since I interviewed Miguel. And

507
00:27:29.280 --> 00:27:31.470
it's good to know that
you're using it as well.

508
00:27:31.680 --> 00:27:34.530
Yeah. I think at the
very least every, every dotnet

509
00:27:34.560 --> 00:27:36.720
programmer should at least give
it a try. You can

510
00:27:36.720 --> 00:27:40.410
install the motto for windows
installer. It sets up everything

511
00:27:40.410 --> 00:27:44.100
for you. It's very familiar.
It gives you the mano

512
00:27:44.100 --> 00:27:46.530
command prompt, just like we
have the visual studio command

513
00:27:46.530 --> 00:27:50.130
prompt, and then, you know,
go and install a mano

514
00:27:50.130 --> 00:27:53.250
develop or a sharp develop
one of the betas and

515
00:27:53.250 --> 00:27:55.140
just start, start playing with
it. I really think it

516
00:27:55.140 --> 00:27:57.660
can be a, be a
powerful thing to at least

517
00:27:57.720 --> 00:28:00.990
understand where mano fits into
the larger scheme of things.

518
00:28:01.170 --> 00:28:03.270
Even if a windows developer
would never end up using

519
00:28:03.270 --> 00:28:06.600
it. Very good. Alright, Scott,
that wraps it up for

520
00:28:06.600 --> 00:28:09.270
another episode of Hansel minutes.
We'll see you next week.

