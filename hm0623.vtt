WEBVTT FILE

1
00:00:00.450 --> 00:00:04.200
Hey folks. Today's episode was
sponsored by Datadog it's. A

2
00:00:04.200 --> 00:00:08.430
cloud scale monitoring and analytics
platform. Datadog was built to

3
00:00:08.430 --> 00:00:12.480
bring clarity to complex dynamic
applications in the cloud on

4
00:00:12.480 --> 00:00:16.830
premises in containers or wherever
they run with beautiful dashboards,

5
00:00:16.980 --> 00:00:21.300
distributed, tracing, and seamless integrations.
With more than 200 technologies,

6
00:00:21.780 --> 00:00:26.160
including Azure and Docker and
PagerDuty Datadog provides deep end

7
00:00:26.160 --> 00:00:28.830
to end visibility into the
health and performance of modern

8
00:00:28.830 --> 00:00:33.270
apps. Visualize key metrics, set
alerts to identify anomalies and

9
00:00:33.270 --> 00:00:36.510
collaborate with your team to
troubleshoot and fix issues fast.

10
00:00:37.080 --> 00:00:39.300
I'd like you to try
it yourself by starting a

11
00:00:39.300 --> 00:00:43.260
free 14 day trial today,
listeners of this podcast, we'll

12
00:00:43.260 --> 00:00:49.470
also get a free Datadog
t-shirt get started at bitly.com/data

13
00:00:49.470 --> 00:01:07.820
dog shirt. That's bitly.com/datadog shirt.
<inaudible>. Hi, this is Scott

14
00:01:07.820 --> 00:01:10.490
Hanselman. This is another episode
of Hansel minutes today. I'm

15
00:01:10.490 --> 00:01:13.070
talking with sessile, Phillip. He
is the host of the

16
00:01:13.070 --> 00:01:18.680
away from the keyboard podcast@awayfromthekeyboard.com
and he works on serverless

17
00:01:18.680 --> 00:01:21.080
at Microsoft. How are you
sir? Doing pretty good, Scott,

18
00:01:21.110 --> 00:01:23.720
how are you, bro? I'm
chilling. I'm chilling. There's no

19
00:01:23.720 --> 00:01:25.640
more snow. So I'm feeling
good about that. We had

20
00:01:25.640 --> 00:01:26.900
a lot of snow and
we were stuck in the

21
00:01:26.900 --> 00:01:29.540
house for a week last
week, but it is all

22
00:01:29.540 --> 00:01:31.970
good now. Well, actually not
last week by the time

23
00:01:31.970 --> 00:01:35.240
this has aired, but last
week, by the time we

24
00:01:35.240 --> 00:01:37.280
recorded it. So let me,
let me tell you a

25
00:01:37.280 --> 00:01:39.710
funny story to that. So
all of my life I

26
00:01:39.710 --> 00:01:42.560
had, I had never seen
snow up until January of

27
00:01:42.560 --> 00:01:46.520
this year, January, 2018 lion. No.
So, so think about it.

28
00:01:46.520 --> 00:01:48.980
I grew up in an
Island, so obviously there's, doesn't

29
00:01:48.980 --> 00:01:52.700
snow there. And then I
live in Florida. Does it

30
00:01:52.700 --> 00:01:56.000
snow here either. So the
first time I saw snow

31
00:01:56.150 --> 00:01:58.250
again in January, we are
me and my family went

32
00:01:58.250 --> 00:02:00.920
over to Denver and you
know, I took my son,

33
00:02:00.920 --> 00:02:03.680
I have a five-year-old and
I took him skating. We

34
00:02:03.680 --> 00:02:05.750
went on the Hills and
went sledding and all this

35
00:02:05.750 --> 00:02:09.440
types of stuff. And when
we opened the car door,

36
00:02:09.620 --> 00:02:12.560
like he runs out, he
runs over the car and

37
00:02:12.560 --> 00:02:15.410
goes like face first into
the snow. And he was

38
00:02:15.410 --> 00:02:17.930
like making snow angels and
he's playing around. And then

39
00:02:18.520 --> 00:02:20.750
I'm kinda just like, I
don't know about the snow

40
00:02:20.750 --> 00:02:24.890
stuff, man. It was a
lot of fun though. What

41
00:02:24.890 --> 00:02:26.600
is that? Like? This is
totally not the topic of

42
00:02:26.600 --> 00:02:30.710
this podcast, but you intellectualize
snow. You've seen a thousand

43
00:02:30.710 --> 00:02:32.930
movies. You've seen people stuck
in the snow and they,

44
00:02:33.290 --> 00:02:35.750
they, you know, everyone lands,
you know, there's a car,

45
00:02:35.750 --> 00:02:37.700
there's a plane crash and
they all are trapped in

46
00:02:37.700 --> 00:02:39.590
the snow. And then somebody
has to eat somebody else.

47
00:02:39.590 --> 00:02:41.660
Like you've seen all that,
but when you're in your

48
00:02:41.660 --> 00:02:45.140
thirties or whatever, and you
intellectualize, do you sit there

49
00:02:45.140 --> 00:02:46.580
and like pick the snow
up and look at it

50
00:02:46.580 --> 00:02:48.800
and like, look at it
close and try to register.

51
00:02:49.610 --> 00:02:51.560
Or did you just like
nonchalant, just jump out of

52
00:02:51.560 --> 00:02:53.840
the car? Like, yes, no
first time, but whatever, you

53
00:02:53.840 --> 00:02:57.710
know, in certain animals in
the animal kingdom see something

54
00:02:57.710 --> 00:02:59.290
that's foreign to their environment
and it kind of look

55
00:02:59.290 --> 00:03:02.020
at it from A distance
and then they like slowly

56
00:03:02.020 --> 00:03:03.790
start to edge towards it
to be like, okay, I

57
00:03:03.790 --> 00:03:06.340
think this is okay. I
can play with it very

58
00:03:06.340 --> 00:03:09.880
much. A lot of that.
So it's, you know, it

59
00:03:09.880 --> 00:03:11.230
definitely wasn't as bad as
I thought it was going

60
00:03:11.230 --> 00:03:12.490
to be. I thought I
was going to be like

61
00:03:12.490 --> 00:03:14.380
frozen head to toe, but
you know, it was, it

62
00:03:14.380 --> 00:03:16.890
wasn't, it wasn't bad. We
did. Okay. Interesting. Well, some,

63
00:03:17.070 --> 00:03:19.800
some cultures have multiple words
for snow, you know, and

64
00:03:19.830 --> 00:03:22.440
like snow in Portland is
not snow in Canada is

65
00:03:22.440 --> 00:03:24.570
not snow in Maine. So
I don't know if you

66
00:03:24.570 --> 00:03:26.970
were in Denver on a
mountain, maybe you got soft

67
00:03:26.970 --> 00:03:31.800
powdery, snow and not mean
angry ice balls. No. Yeah,

68
00:03:31.800 --> 00:03:34.620
it definitely wasn't like two,
three feet of snow or

69
00:03:34.620 --> 00:03:38.910
anything like that. It was
very small, fluffy pottery type

70
00:03:39.090 --> 00:03:42.600
type snow. That's awesome. My
10 year old, I just

71
00:03:42.600 --> 00:03:46.290
literally last, last day yesterday
opened up the freezer to

72
00:03:46.290 --> 00:03:48.600
get some ice cream. And
there was a snowball that

73
00:03:48.600 --> 00:03:52.170
my 10 year old apparently
was saving in our freezer.

74
00:03:52.710 --> 00:03:54.210
So when he pulls it
out and he throws it

75
00:03:54.210 --> 00:03:57.150
at his brother, but you're
probably familiar with how these

76
00:03:57.240 --> 00:04:00.360
laws of thermodynamics and things
go, it turned into an

77
00:04:00.360 --> 00:04:02.550
ice ball. You know what
I mean? And frankly, I'm

78
00:04:02.550 --> 00:04:04.080
lucky he didn't put it
right through the TV set.

79
00:04:04.140 --> 00:04:07.350
So that was bad. That's
crazy. Yeah, not cool. Okay.

80
00:04:07.860 --> 00:04:10.290
Enough of this, we're wasting
people's times. I wanted to

81
00:04:10.290 --> 00:04:14.940
talk to you about serverless
and you know, everyone is

82
00:04:14.940 --> 00:04:17.100
using it as the buzz
word first, it was microservices

83
00:04:17.100 --> 00:04:20.040
and it was containers. Now
it's serverless and I've been

84
00:04:20.040 --> 00:04:22.230
reading articles about it. And
a bunch of these articles

85
00:04:22.230 --> 00:04:27.990
are saying serverless slash F
a S. And I know

86
00:04:27.990 --> 00:04:31.500
what I as is infrastructure
as a service. And I'm

87
00:04:31.500 --> 00:04:33.270
pretty sure I know what
platform as a services, but

88
00:04:33.270 --> 00:04:35.820
now I feel like people
are taking serverless functions into

89
00:04:35.820 --> 00:04:38.400
serverless functions as a service
implying that, that the same

90
00:04:38.400 --> 00:04:42.150
thing, then there's backend as
a service. I'm very confused.

91
00:04:44.250 --> 00:04:47.280
Sure. So when most people
talk about serverless, kind of

92
00:04:47.280 --> 00:04:49.260
like what you said, they,
they assume that we're talking

93
00:04:49.260 --> 00:04:52.590
about functions as a service,
which is which pretty much

94
00:04:52.590 --> 00:04:54.210
just means that, Hey, I'm
going to write some code.

95
00:04:54.210 --> 00:04:56.110
I'm going to give it
to somebody, they going to

96
00:04:56.110 --> 00:04:58.110
run it for me. And
I don't have to think

97
00:04:58.110 --> 00:05:01.650
about anything else that's happening
in the background. Right. And

98
00:05:01.650 --> 00:05:04.140
from, from a, from a
high perspective, that's, that's really

99
00:05:04.140 --> 00:05:06.000
what serverless does for you,
right? Like it allows you

100
00:05:06.000 --> 00:05:09.450
to build these applications without
having to worry about servers,

101
00:05:09.450 --> 00:05:12.180
without having to worry about,
you know, machine updates or

102
00:05:12.180 --> 00:05:15.540
anything of that nature. Now,
when we talk about FAS

103
00:05:15.540 --> 00:05:20.970
or FAS, what we're talking
about is serverless compute, right?

104
00:05:20.970 --> 00:05:24.030
So again, I'm going to
run my Python script. I'm

105
00:05:24.030 --> 00:05:26.610
going to run my, you
know, Java, like whatever type

106
00:05:26.610 --> 00:05:28.560
of app that I'm building,
I'm going to send it

107
00:05:28.560 --> 00:05:32.640
over to AWS. I'm gonna
send it to Google cloud.

108
00:05:32.670 --> 00:05:34.980
You know, whoever's actually running
that code for me and

109
00:05:34.980 --> 00:05:37.920
they're just going to run
it. Now, some of the

110
00:05:37.920 --> 00:05:40.500
other things that we get
inside of serverless is also,

111
00:05:40.500 --> 00:05:44.220
we also have serverless databases,
for instance. So let's say

112
00:05:44.220 --> 00:05:46.740
you're talking about something like
cosmos DB or even dynamo

113
00:05:46.740 --> 00:05:49.680
DB, because at the end
of the day, like whenever

114
00:05:49.680 --> 00:05:52.380
I provisioned this database, right,
the only thing that I'm

115
00:05:52.380 --> 00:05:54.180
going to say is, Hey,
just create this thing for

116
00:05:54.180 --> 00:05:57.260
me. I don't care where
it lives very much don't

117
00:05:57.260 --> 00:06:00.050
care. You know how big
it is, you know, the

118
00:06:00.050 --> 00:06:01.910
scale just kind of expand
for me as I needed

119
00:06:01.910 --> 00:06:04.220
to be, but I just
want you to create something

120
00:06:04.220 --> 00:06:06.440
that I'll just use. And
that's pretty much just how

121
00:06:06.440 --> 00:06:10.930
it goes. Hmm. It seems
like there's a major shift

122
00:06:10.930 --> 00:06:15.670
in the industry right now
where we are simultaneously excited

123
00:06:15.670 --> 00:06:20.680
about serverless and backend as
a service. Yeah. But then

124
00:06:20.710 --> 00:06:25.000
with the rise of Kubernetes,
you see Kubernetes people and

125
00:06:25.000 --> 00:06:29.650
smart people online talking about,
you know, internals of processes

126
00:06:29.650 --> 00:06:33.160
and how they fork and
Linux. And so it's like,

127
00:06:33.220 --> 00:06:36.010
while we are in the
growing pains of serverless, we're

128
00:06:36.010 --> 00:06:40.240
all running H top, which
seems ironic. Right. So when

129
00:06:40.240 --> 00:06:42.610
we talk about Coobernetti's Colin's
is a little bit different,

130
00:06:42.610 --> 00:06:46.090
right? Because so Kubernetes itself
is what we call an

131
00:06:46.090 --> 00:06:49.990
orchestrator, right. And in the
world of, of Docker containers.

132
00:06:50.380 --> 00:06:53.890
So Kubernetes will take your
Docker container or your Docker

133
00:06:53.890 --> 00:06:56.260
image, and it'll orchestrate it
in a way that you

134
00:06:56.260 --> 00:06:58.480
say, Hey, I want to
have like five of these

135
00:06:58.480 --> 00:07:00.130
things, or I want to
have four of these things.

136
00:07:00.580 --> 00:07:03.970
Right. And it'll just kind
of make sure that environment

137
00:07:04.000 --> 00:07:06.880
is, is in the desired
States, right. This kind of

138
00:07:06.880 --> 00:07:09.550
what we call this things
like desired state configuration, it's

139
00:07:09.550 --> 00:07:11.560
in the desired state that
you needed to be in.

140
00:07:12.340 --> 00:07:14.920
Now, this is a little
bit different from the serverless

141
00:07:14.920 --> 00:07:17.920
pieces, right? Because again, with
serverless, I don't, I don't

142
00:07:17.920 --> 00:07:21.640
think about anything other than
writing code and sending it

143
00:07:21.640 --> 00:07:24.430
off, you know, somewhere for
it to be run. Right.

144
00:07:25.180 --> 00:07:26.820
I don't really care too
much about the region. And

145
00:07:26.820 --> 00:07:29.290
I don't care very much
about like where, how it's

146
00:07:29.290 --> 00:07:32.410
being run, but I do
care that someone is managing

147
00:07:32.440 --> 00:07:35.920
like that infrastructure for me.
When we talk about Kubernetes

148
00:07:35.920 --> 00:07:38.560
now, like even though it's
kind of doing some of

149
00:07:38.560 --> 00:07:41.380
that orchestration for our containers
for us, we still have

150
00:07:41.380 --> 00:07:43.390
to manage that. Right. Like
we still have to provision

151
00:07:43.390 --> 00:07:46.420
servers. We still have to
provision memory and Ram like

152
00:07:46.420 --> 00:07:48.640
demand the right amount of
resources. That's going to be

153
00:07:48.640 --> 00:07:50.860
able to run that for
us. So, so even though

154
00:07:50.860 --> 00:07:53.320
it does make things a
little bit easier from a

155
00:07:53.620 --> 00:07:58.840
orchestration perspective and again, managing
multiples of these multiples of

156
00:07:58.840 --> 00:08:01.480
these container images, like we
still have to think about,

157
00:08:02.680 --> 00:08:04.750
and again, depending on what
you're doing and the panel,

158
00:08:04.810 --> 00:08:06.910
depending on the type of
app that you're building, that

159
00:08:06.910 --> 00:08:08.860
might be something that you
might want to have, like

160
00:08:08.890 --> 00:08:12.490
that might be like your
right level of abstraction for

161
00:08:12.490 --> 00:08:15.190
serverless people. It's more, Hey,
I got a really cool

162
00:08:15.190 --> 00:08:18.670
idea, but I don't want
to spend, like, I don't

163
00:08:18.670 --> 00:08:21.100
know, an hour or two
hours setting up machines and

164
00:08:21.430 --> 00:08:23.380
picking skews or anything like
that. Like I just want

165
00:08:23.380 --> 00:08:25.180
to like, let me just
write this code really quickly

166
00:08:25.270 --> 00:08:27.740
and then just put it
out there. Right. And so

167
00:08:27.900 --> 00:08:30.760
what you get with serverless
again, is this, this, this

168
00:08:30.760 --> 00:08:33.280
faster time to market where
I'm kind of just saying,

169
00:08:33.580 --> 00:08:37.360
Hey, here's some code, just
run it from me. No,

170
00:08:39.100 --> 00:08:41.170
no. On top of that,
we do get some additional

171
00:08:41.200 --> 00:08:44.300
features from serverless, right? So
we also get like the

172
00:08:44.320 --> 00:08:46.750
per second billing, which is,
you know, a big thing

173
00:08:46.750 --> 00:08:49.360
for a lot of folks.
So when we talk about,

174
00:08:49.420 --> 00:08:52.570
again, like running VMs or
platform as a service offerings

175
00:08:52.570 --> 00:08:55.830
in the cloud, like regardless
of whether you're these things

176
00:08:55.830 --> 00:08:57.420
or not, like you still
have to pay for them.

177
00:08:58.140 --> 00:09:00.120
So I get, I go
up and I split up

178
00:09:00.150 --> 00:09:03.960
like something on Heroku or
on, you know, elastic, Beanstalk

179
00:09:03.960 --> 00:09:07.380
on AWS, regardless of whether
I publish the app or

180
00:09:07.380 --> 00:09:10.830
not, whether somebody is actually
using it or not, I'm

181
00:09:10.830 --> 00:09:13.650
going to get continuously charged,
whatever it is that my

182
00:09:13.650 --> 00:09:17.040
fee is per month with
serverless. Now we only get

183
00:09:17.250 --> 00:09:20.010
billed per usage, you know,
whether that's permitted or per

184
00:09:20.010 --> 00:09:22.530
second, based on, you know,
whoever your host happens to

185
00:09:22.530 --> 00:09:25.650
be. But, but now I
only have to worry about

186
00:09:25.860 --> 00:09:29.340
computes or these resources, like
as a utility. So let's

187
00:09:29.340 --> 00:09:32.040
say, you know, imagine it's
like your electric bill, right?

188
00:09:32.040 --> 00:09:34.380
Like if you don't use
so much electricity, then you're

189
00:09:34.380 --> 00:09:36.360
only going to be built
so much. Right. So it's

190
00:09:36.360 --> 00:09:39.570
a very dynamic way of,
of kind of managing those

191
00:09:39.570 --> 00:09:42.380
resources. It seems like a
lot of people though are

192
00:09:42.530 --> 00:09:46.760
doing things like running serverless
things on Kubernetes. So they

193
00:09:46.760 --> 00:09:49.940
want to simultaneously think about
things at the low level,

194
00:09:50.420 --> 00:09:54.980
but also provide a service
to their customers with their

195
00:09:54.980 --> 00:09:58.580
customers might be other people
in the same company. You

196
00:09:58.580 --> 00:10:00.380
know what I mean? So
it's like they use, they

197
00:10:00.380 --> 00:10:03.530
use Kubernetes for its orchestration
and for its management and

198
00:10:03.530 --> 00:10:06.770
for its auto scale. And
then they'll run a serverless

199
00:10:06.950 --> 00:10:08.690
runtime on top of it.
So they kind of get

200
00:10:08.690 --> 00:10:12.950
the best of both worlds.
They effectively use their infrastructure

201
00:10:13.640 --> 00:10:17.120
better. They have full and
complete control down to the,

202
00:10:17.510 --> 00:10:20.270
you know, the smallest text
file, but then they're their

203
00:10:20.270 --> 00:10:22.370
customer. Like if I was
your customer and we work

204
00:10:22.370 --> 00:10:24.230
at the same company, doesn't
have to think about it.

205
00:10:25.490 --> 00:10:27.890
And that's a, that's a
use case or usage scenario

206
00:10:27.890 --> 00:10:31.040
that we see a lot
of folks doing. So again,

207
00:10:31.070 --> 00:10:33.980
I, as a developer, like
I just want to be

208
00:10:33.980 --> 00:10:35.780
able to publish code really
quickly and try it out,

209
00:10:35.990 --> 00:10:38.240
like in a, in an
environment where I don't have

210
00:10:38.240 --> 00:10:40.460
to think too much about,
and I'm setting up a

211
00:10:40.460 --> 00:10:42.710
patchy or I'm setting up
engine X or IAS, just

212
00:10:42.710 --> 00:10:45.350
to kind of run these
things, particularly when you're in

213
00:10:45.350 --> 00:10:47.990
the early stages. And you're
doing like PLCs when you're

214
00:10:47.990 --> 00:10:50.900
doing like, you just want
to prototype really quick ideas,

215
00:10:51.590 --> 00:10:53.630
you know, I just want
to write this code, push

216
00:10:53.630 --> 00:10:56.360
it out and let me
see what's actually happening. And

217
00:10:56.360 --> 00:10:59.540
so from a developer perspective,
from a productivity perspective, like

218
00:10:59.540 --> 00:11:02.180
your, your productivity goes up
so much higher because you're

219
00:11:02.180 --> 00:11:06.590
not worried about some of
these additional concerns. Obviously if

220
00:11:06.590 --> 00:11:08.810
it's inside of your company,
like your dev ops folks

221
00:11:08.810 --> 00:11:11.540
or your infrastructure folks are
gonna have to be managing

222
00:11:11.540 --> 00:11:15.440
that for you. But even
from that perspective, now, again,

223
00:11:15.470 --> 00:11:18.650
your productivity is so much
higher as a developer because

224
00:11:18.680 --> 00:11:22.310
that, that development model just
allows you to iterate that

225
00:11:22.310 --> 00:11:25.040
much faster. Right. Right. No,
I mean the whole, the

226
00:11:25.040 --> 00:11:28.310
whole point is to put
the person's business, get, get

227
00:11:28.310 --> 00:11:32.780
the person's business problem solved
so that, you know, random

228
00:11:32.780 --> 00:11:36.620
line developer isn't, you know,
FTP and stuff, or thinking

229
00:11:36.620 --> 00:11:39.830
about production and thinking about
dev ops, right. The goal

230
00:11:39.830 --> 00:11:45.140
is check code in, have
code run in scale. Right.

231
00:11:45.680 --> 00:11:49.400
Without having to think about
anything, like basically freeing my,

232
00:11:49.520 --> 00:11:54.580
my, my mental cycles. Exactly.
And you actually remember when

233
00:11:54.760 --> 00:11:57.280
I first heard about this
quote unquote cloud thing, right.

234
00:11:58.090 --> 00:12:00.520
And when that first came
out, this is exactly what

235
00:12:00.520 --> 00:12:02.410
I thought it was going
to be. I thought it

236
00:12:02.410 --> 00:12:03.910
was going to be, Hey,
I'm just going to have

237
00:12:03.910 --> 00:12:06.340
some application and I'm going
to send it somewhere and

238
00:12:06.340 --> 00:12:07.270
it's going to run and
I'm going to get a

239
00:12:07.270 --> 00:12:08.830
bill at the end of
the month. It's going to

240
00:12:08.830 --> 00:12:11.440
be like, Oh, okay, you
use this much, this space.

241
00:12:11.440 --> 00:12:14.260
And you use this much
bandwidth, you know, like again,

242
00:12:14.410 --> 00:12:18.490
the, your software being built
as a utility versus like

243
00:12:18.490 --> 00:12:21.700
some static resource, like a
virtual machine or, or something

244
00:12:21.700 --> 00:12:23.890
of that nature. And so
it's kind of good to

245
00:12:23.890 --> 00:12:26.260
see that we, we have
this stuff now and, you

246
00:12:26.260 --> 00:12:28.180
know, I think going forward,
we're going to see that

247
00:12:28.180 --> 00:12:30.220
just kind of continue to
improve with more and more

248
00:12:30.220 --> 00:12:34.290
features The functions as a
service, being able to take

249
00:12:34.290 --> 00:12:37.200
like a, do it written
in any language and then

250
00:12:37.230 --> 00:12:40.260
scale. It is interesting. But
then I also think, see

251
00:12:40.470 --> 00:12:45.300
backend as a service BAS
where it's like, you know,

252
00:12:45.300 --> 00:12:48.420
like I know that Azure
had one of those and

253
00:12:49.080 --> 00:12:52.950
Firebase is one of those,
right. Where it's like more

254
00:12:52.950 --> 00:12:55.980
than serverless. It's really like
almost software as a service,

255
00:12:55.980 --> 00:12:59.070
but it's like, I want
a rest API to handles

256
00:12:59.070 --> 00:13:02.100
everything from my mobile app.
Yeah. We definitely see a

257
00:13:02.100 --> 00:13:04.410
lot of that inside of
the mobile space. Right. So

258
00:13:04.650 --> 00:13:08.370
can you talk about Firebase
for instance? So Firebase today,

259
00:13:08.370 --> 00:13:11.610
I believe you can actually
execute serverless functions again, so

260
00:13:11.610 --> 00:13:13.020
you could write some code
and you could send it

261
00:13:13.020 --> 00:13:15.390
to Firebase and they'll run
it. But again, on top

262
00:13:15.390 --> 00:13:18.630
of that, you get the
authentication, you get the ties

263
00:13:18.630 --> 00:13:23.190
into Google drive and you
get, again, mobile notifications, you

264
00:13:23.190 --> 00:13:25.380
get tons of, and obviously
you get the database storage

265
00:13:25.380 --> 00:13:28.170
to their realtime database. So
you almost get like, it's

266
00:13:28.170 --> 00:13:30.810
like this package deal. You
know, it's like, Hey, give

267
00:13:30.810 --> 00:13:33.870
me some of the, the,
the base, the basic things

268
00:13:33.870 --> 00:13:36.870
that I need for an
application, regardless of whether it's

269
00:13:36.870 --> 00:13:39.750
desktop mobile or whatever the
case is, here's some basic

270
00:13:39.750 --> 00:13:41.430
things that I need, let's
package it up and kind

271
00:13:41.430 --> 00:13:44.250
of give it to you
as, you know, as a

272
00:13:44.250 --> 00:13:47.310
service and you get billed
for it every month, you

273
00:13:47.310 --> 00:13:49.470
know, you get billed for
usage or how much bandwidth

274
00:13:49.470 --> 00:13:53.010
you use, but now your,
your developers, your company, you

275
00:13:53.010 --> 00:13:55.200
don't need to worry about,
you know, how do I

276
00:13:55.200 --> 00:13:57.540
set up this Facebook app
and, you know, set up

277
00:13:57.540 --> 00:13:59.820
these off keys or, you
know, how do I, how

278
00:13:59.820 --> 00:14:02.850
do I authenticate with Slack
to send it, you know,

279
00:14:02.850 --> 00:14:04.830
to set up messages, all
you have to do is

280
00:14:04.830 --> 00:14:07.770
just say, okay, Hey, give
me this thing, right? And

281
00:14:07.770 --> 00:14:09.930
I'm going to call your
API APIs. And then, you

282
00:14:09.930 --> 00:14:11.970
know, depending on how much
ever work that I do,

283
00:14:12.060 --> 00:14:13.830
or how much ever, how
many ever requests that I

284
00:14:13.830 --> 00:14:15.450
send every month, that's what
you're going to build me

285
00:14:15.450 --> 00:14:18.390
for. But now me as
a, let's say I'm a

286
00:14:18.390 --> 00:14:21.150
health company, or I'm working
on insurance or marketing or

287
00:14:21.150 --> 00:14:24.030
whatever the case is. I
could focus on just doing

288
00:14:24.060 --> 00:14:26.220
whatever it is that my
business is good at. And

289
00:14:26.220 --> 00:14:28.290
I don't have to worry
about like, well, I'd have

290
00:14:28.290 --> 00:14:31.560
to worry as much about
security or displace or any

291
00:14:31.560 --> 00:14:32.910
of these types of things.
Right. I could just go

292
00:14:32.910 --> 00:14:36.030
out and get to work,
Which I think I know

293
00:14:36.030 --> 00:14:38.670
I brought up Kubernetes and
you set me straight about

294
00:14:38.670 --> 00:14:42.030
like, what that does versus
what like traditional serverless means.

295
00:14:42.420 --> 00:14:44.760
But when you look at
a system, a large system

296
00:14:44.790 --> 00:14:49.320
that used a lot of
different services as a serverless

297
00:14:49.320 --> 00:14:52.040
architecture, you know, you got
your, your, but it's gonna

298
00:14:52.040 --> 00:14:55.460
end up calling an authentication
service and some API gateway.

299
00:14:55.460 --> 00:14:59.870
And then an number of
functions, the functions are at

300
00:14:59.870 --> 00:15:03.020
one functions as a service
place, the authentication service might

301
00:15:03.020 --> 00:15:06.620
be Azure or Amazon or
a zero. The database might

302
00:15:06.620 --> 00:15:09.890
be cosmos or Mongo in
the cloud. Another database might

303
00:15:09.890 --> 00:15:14.600
be somewhere else. Suddenly I've
outsourced my things either to

304
00:15:14.600 --> 00:15:18.680
one vendor or a dozen,
any one of which could

305
00:15:18.680 --> 00:15:21.350
potentially go down, which then
gets me thinking back to

306
00:15:21.350 --> 00:15:25.910
orchestrators, like, like surface fabric
and Kubernetes, where I could

307
00:15:25.910 --> 00:15:29.750
still do that exact same
architecture. I could still pretend

308
00:15:29.750 --> 00:15:34.490
that there are no computers,
but, but ultimately if I

309
00:15:34.490 --> 00:15:37.040
needed to, I could get
to them by, you know,

310
00:15:37.040 --> 00:15:39.050
I could get into the
dashboard if I needed to.

311
00:15:39.880 --> 00:15:43.420
Yeah, exactly. And essentially what
we're talking about now is,

312
00:15:43.930 --> 00:15:47.620
again, I have these different
slots of functionality that are

313
00:15:47.620 --> 00:15:50.770
kind of spread around the
place. How do I compose

314
00:15:50.770 --> 00:15:54.160
them together to create whatever
my solution is? And that's

315
00:15:54.160 --> 00:15:57.070
kinda when we start talking
about like microservices and things

316
00:15:57.070 --> 00:16:00.010
of that nature, right? And
again, microservices from a, from

317
00:16:00.010 --> 00:16:04.270
a very high level definition,
just being very specific units

318
00:16:04.270 --> 00:16:07.330
of functionality that are been
separated, but now I can

319
00:16:07.330 --> 00:16:09.430
kind of bring them together
to make, I don't know,

320
00:16:09.430 --> 00:16:12.220
whatever my solution happens to
be at this particular point

321
00:16:12.220 --> 00:16:16.090
in time. And so what
you see is it's very

322
00:16:16.090 --> 00:16:18.190
easy for us to kind
of bring all of these

323
00:16:18.190 --> 00:16:21.610
concepts together, right? So, so
I could create a serverless

324
00:16:22.360 --> 00:16:26.170
application and then kind of
create it in a, in

325
00:16:26.170 --> 00:16:30.010
a Vera microservice type type
manner. Right. Because I might

326
00:16:30.010 --> 00:16:33.310
have different functions that have
different concerns. I might have

327
00:16:33.310 --> 00:16:35.530
one that's concerned for logging.
I may have one that's

328
00:16:35.530 --> 00:16:39.490
concerned for sending email or
sending test messages by some

329
00:16:39.730 --> 00:16:42.430
third party service. And what
I can do in the

330
00:16:42.430 --> 00:16:45.160
front end of that in
front of my functions as

331
00:16:45.160 --> 00:16:48.160
a service, I can have
something like, like an API

332
00:16:48.160 --> 00:16:51.010
gateway or API proxy or
something of that nature so

333
00:16:51.010 --> 00:16:54.060
that it can have the
kind of it kind of

334
00:16:54.250 --> 00:16:56.800
groups together that functionality a
little bit. So I don't

335
00:16:56.800 --> 00:16:59.320
have to worry about kicking
off to so many different

336
00:16:59.320 --> 00:17:01.840
end points. I could kind
of look at one URL,

337
00:17:01.840 --> 00:17:05.380
one location, and then in
the background, like he kind

338
00:17:05.380 --> 00:17:07.780
of fork off to, you
know, I need to go

339
00:17:07.780 --> 00:17:09.990
to the service over here
or the service over here,

340
00:17:10.000 --> 00:17:13.480
that service over there. But
from, from my application's perspective,

341
00:17:13.690 --> 00:17:17.680
I'm just going to one
place. Yeah. In like, traditionally,

342
00:17:17.980 --> 00:17:20.170
if you had like a
shopping cart service and you

343
00:17:20.170 --> 00:17:22.600
add something to the shopping
cart, you know, the UI

344
00:17:22.990 --> 00:17:25.210
calls, the business logic calls
the service, et cetera, et

345
00:17:25.210 --> 00:17:29.980
cetera. But with, with these
more, these more distributed applications,

346
00:17:29.980 --> 00:17:32.740
it's like, you almost have
DNS and load balancing at

347
00:17:32.740 --> 00:17:37.540
every possible level. So every
single caller is sitting in

348
00:17:37.540 --> 00:17:40.390
front of a load balancer
and every single thing that

349
00:17:40.390 --> 00:17:45.040
can get called can potentially
scale independently. No, exactly. And

350
00:17:45.040 --> 00:17:48.610
again, that's another good thing
about building in a serverless

351
00:17:48.610 --> 00:17:51.120
model is that I don't
have to worry about the

352
00:17:51.120 --> 00:17:54.180
load balancing of some of
these types of things, because

353
00:17:54.570 --> 00:17:57.360
the platform should be able
to scale for me dynamically.

354
00:17:57.960 --> 00:18:00.480
Right. Cause again, I'm not
managing the server, right? Like

355
00:18:00.510 --> 00:18:03.630
my holster, my provider, whoever
they happen to be, they're

356
00:18:03.630 --> 00:18:06.780
managing that for me. So
whenever my load goes up,

357
00:18:07.200 --> 00:18:09.210
like they should be able
to detect that increase in

358
00:18:09.210 --> 00:18:12.510
traffic and say, Oh, okay,
well sessile needs like five

359
00:18:12.510 --> 00:18:15.030
more machines or two more
machines. Or, you know, I

360
00:18:15.030 --> 00:18:18.090
can say, Hey, you know,
this is after Christmas, you

361
00:18:18.090 --> 00:18:21.180
know, the big shopping season
has done. We provision the

362
00:18:21.180 --> 00:18:22.920
service room before we can
kind of take them down.

363
00:18:22.920 --> 00:18:27.020
Cause he's not really using
this much compute power, Which

364
00:18:27.020 --> 00:18:29.480
is really interesting. So if
you could give a little

365
00:18:29.480 --> 00:18:32.570
historical context to something that
I experienced, I used to

366
00:18:32.570 --> 00:18:39.320
work@acompanycalledeighthundred.com. This is back when
you could actually buy a

367
00:18:39.320 --> 00:18:43.190
three-letter domain. And it eventually
got bought by best buy.

368
00:18:43.310 --> 00:18:46.490
And to kind of, this
is pre-Amazon right, right. And

369
00:18:46.640 --> 00:18:49.010
eight hundred.com did this crazy
thing. You can actually go

370
00:18:49.010 --> 00:18:51.590
and search for it. It
was a three DVDs for

371
00:18:51.590 --> 00:18:53.780
a dollar. This is right
when DVDs were coming out

372
00:18:53.780 --> 00:18:56.420
and DVDs were expensive. And
we wanted to like IX,

373
00:18:56.450 --> 00:18:59.540
you know, surprise everyone as
you know, what was going

374
00:18:59.540 --> 00:19:02.630
to become black Friday started.
So we said three DVDs

375
00:19:02.630 --> 00:19:04.910
for a buck and it
completely changed the way our

376
00:19:04.910 --> 00:19:10.220
site scaled because we went
from everyone basically browsing and

377
00:19:10.220 --> 00:19:13.160
running around our read only
part of our site to

378
00:19:13.160 --> 00:19:15.590
everyone's strike, trying to put
stuff in their shopping cart,

379
00:19:15.620 --> 00:19:19.130
which is the right part
of our site. And though

380
00:19:19.150 --> 00:19:23.150
we ended up basically making
subdomains for images dot eight

381
00:19:23.150 --> 00:19:27.020
hundred.com and shopping cart.com. And
I didn't, we didn't actually,

382
00:19:28.790 --> 00:19:30.620
we didn't know we were
doing it at the time,

383
00:19:30.620 --> 00:19:34.520
but it's this kind of
classic problem where we, we

384
00:19:34.520 --> 00:19:37.370
solved it with commodity load
balancing. It's just that the

385
00:19:37.370 --> 00:19:40.730
load balancing was seen by
the user because they saw,

386
00:19:41.360 --> 00:19:43.700
you know, shopping cart dot,
whatever.com. And then we had

387
00:19:43.700 --> 00:19:47.450
a shopping cart farm that
was independent, you know, from

388
00:19:47.450 --> 00:19:51.530
the, the images farm and
the product catalog farm, but

389
00:19:51.530 --> 00:19:53.900
we did it all manually.
So we did exactly what

390
00:19:53.900 --> 00:19:56.120
you just described, but we
still ended up doing it

391
00:19:56.150 --> 00:19:59.360
kind of on our own.
When you, when you really

392
00:19:59.360 --> 00:20:02.810
think about the time, the
effort, the research, you know,

393
00:20:02.810 --> 00:20:04.400
the, the trial and errors
that you had to go

394
00:20:04.400 --> 00:20:06.950
through to do that all
of that can kind of

395
00:20:07.160 --> 00:20:10.220
be almost lessened or even
completely go away. If you're

396
00:20:10.220 --> 00:20:12.440
just like, okay, here's my
code. Just run this for

397
00:20:12.450 --> 00:20:14.360
me. Let me know when
it's done and I can

398
00:20:14.360 --> 00:20:17.600
get my response back. Right.
Right. It's almost like the

399
00:20:17.600 --> 00:20:21.980
best practices of, you know,
our, our, our grandmothers and

400
00:20:21.980 --> 00:20:26.390
fathers is now a checkbox.
Right. We've got distracted away.

401
00:20:26.390 --> 00:20:28.550
All of the best practices.
I like to joke that

402
00:20:28.550 --> 00:20:30.730
like the second page of
my resume is now completely

403
00:20:30.740 --> 00:20:33.560
just the check box you're
in a cloud somewhere. Yeah.

404
00:20:33.590 --> 00:20:36.890
A lot of that operational
type of work has really

405
00:20:36.890 --> 00:20:38.750
just been automated based on,
you know, some of the

406
00:20:38.750 --> 00:20:41.420
things that we're doing today
inside of the cloud. I

407
00:20:41.420 --> 00:20:45.860
also hear serverless and functions
being compared to what are

408
00:20:45.860 --> 00:20:49.390
called 12 factor. And I'll
put a link to the

409
00:20:49.390 --> 00:20:52.300
concept of 12 factor applications.
But these are basically, you

410
00:20:52.300 --> 00:20:55.000
know, all of the best
practices. It's 12 factors that

411
00:20:55.000 --> 00:20:58.660
describe best practices, like, you
know, one code base and

412
00:20:58.990 --> 00:21:01.990
lots of deploys and your
dependencies are isolated, et cetera.

413
00:21:02.380 --> 00:21:06.220
But Adrian cock Croft, who
is a, used to be

414
00:21:06.220 --> 00:21:09.850
the joint, one of the
chief architects at Netflix talks

415
00:21:09.850 --> 00:21:13.270
about how quickly you can
bring up your app. Like

416
00:21:13.750 --> 00:21:16.810
if you can bring it
up in milliseconds, the entire

417
00:21:16.810 --> 00:21:19.360
application and then throw it
away, then he says, you

418
00:21:19.360 --> 00:21:22.480
can call it serverless, which
I thought was a very

419
00:21:22.480 --> 00:21:24.520
bold statement. And I'm not
sure I necessarily agree with

420
00:21:24.520 --> 00:21:29.520
that. So, so when we
talk about again, like just

421
00:21:29.520 --> 00:21:32.040
being able to push your
code and, and let's say

422
00:21:32.040 --> 00:21:33.960
you want to prototype an
idea, like you want to

423
00:21:33.960 --> 00:21:37.110
do that really quickly. Right.
Alright. So again, think about,

424
00:21:38.040 --> 00:21:40.410
think about what it used
to take when, you know,

425
00:21:40.410 --> 00:21:42.360
you're working at your first
job or, you know, one

426
00:21:42.360 --> 00:21:45.420
of your first companies and
Hey, I need a server

427
00:21:45.420 --> 00:21:48.200
to go run this code.
I remember for me, that

428
00:21:48.210 --> 00:21:51.660
used to take me like
two weeks, right. Physically buy

429
00:21:51.660 --> 00:21:54.210
it, you have to physically
buy it. Or, you know,

430
00:21:54.240 --> 00:21:56.610
I had to wait for
an admin to provision like

431
00:21:56.730 --> 00:22:00.680
a virtual machine or something
of that nature. There's, there's

432
00:22:00.780 --> 00:22:02.640
a lot of time that
has to go by, right.

433
00:22:02.640 --> 00:22:05.430
Because again, you're, you're controlling
this infrastructure, right. So you

434
00:22:05.430 --> 00:22:08.880
have to create it, provision
it, plug it in, install,

435
00:22:08.880 --> 00:22:11.790
whatever updates, plug it into
the network. And so, so

436
00:22:11.790 --> 00:22:13.940
all this time is kind
of just going on and

437
00:22:13.950 --> 00:22:17.400
kind of moving forward for
you when we talk about

438
00:22:17.400 --> 00:22:19.710
doing that stuff in the
cloud, right? Like the automation

439
00:22:19.710 --> 00:22:22.770
is there and it's a
lot faster, but again, like

440
00:22:23.280 --> 00:22:27.000
anytime that you're doing something
like pass, for instance, when

441
00:22:27.000 --> 00:22:30.090
you're, when you're low goes
up, like you still have

442
00:22:30.090 --> 00:22:33.570
to provision another VM. Right.
You're not doing it, but

443
00:22:33.570 --> 00:22:36.540
like the framework is still
doing it for you. And

444
00:22:36.540 --> 00:22:39.090
so obviously with that, like
there's a time to, you

445
00:22:39.090 --> 00:22:41.910
know, for that provision to
be complete, you know what

446
00:22:41.910 --> 00:22:44.040
I mean? And so within
that time, you're still getting

447
00:22:44.040 --> 00:22:46.680
load. You're still getting requests
coming in. People are still

448
00:22:46.680 --> 00:22:50.700
visiting your application until, okay,
this the server's on and

449
00:22:50.700 --> 00:22:53.760
it's hot now. It's like,
okay, I could, you know,

450
00:22:53.760 --> 00:22:56.100
fork off some of my
requests. You there go over

451
00:22:56.100 --> 00:22:59.220
to that machine. And so
what do you see with

452
00:22:59.220 --> 00:23:01.650
the serverless environment? What, one
of the ways that we

453
00:23:01.650 --> 00:23:04.230
kind of, and we, as
in like the industry kind

454
00:23:04.230 --> 00:23:06.330
of, kind of resolve this
is kind of just having

455
00:23:06.330 --> 00:23:08.490
like a pool of servers
that are already available for

456
00:23:08.490 --> 00:23:11.670
you. So when you send
your requests over and you

457
00:23:11.670 --> 00:23:14.040
need to quickly, you know,
Hey, I need to give

458
00:23:14.040 --> 00:23:17.400
Scott like five more machines,
typically, like there's a pool

459
00:23:17.400 --> 00:23:19.140
that I could just reach
into that pool and grab

460
00:23:19.140 --> 00:23:21.840
out, you know, two, three
machines, five machines, whatever the

461
00:23:21.840 --> 00:23:24.090
case is. And so now
you don't have to wait

462
00:23:24.090 --> 00:23:27.120
as long for that to
happen. Right. And so that's

463
00:23:27.120 --> 00:23:29.190
kind of how you get
that dynamic scale a little

464
00:23:29.190 --> 00:23:32.430
bit, right? Like there's these
pre-provisioned environments and, you know,

465
00:23:32.430 --> 00:23:34.710
they might have, you know,
whatever they need to have

466
00:23:34.710 --> 00:23:36.930
install them, them, all that
needs to happen now is

467
00:23:36.930 --> 00:23:40.410
that your application just gets
copied over there, installed on

468
00:23:40.410 --> 00:23:42.870
the run side. And now,
you know, these requests could

469
00:23:42.870 --> 00:23:47.450
start forking off to these
different places that you know,

470
00:23:48.200 --> 00:23:50.960
that the latency or the
time to, I guess the

471
00:23:50.960 --> 00:23:53.690
time to scale kind of
helps gets reduced a little

472
00:23:53.690 --> 00:23:55.670
bit when we're talking about
like building in the serverless

473
00:23:55.670 --> 00:24:00.970
environment. An interesting point that
was also made was if

474
00:24:00.970 --> 00:24:02.920
you are providing this as
a service, or if you

475
00:24:02.920 --> 00:24:05.500
are using a cloud that
provides this kind of stuff

476
00:24:05.500 --> 00:24:08.860
as a service, the T
the argument would be the

477
00:24:08.860 --> 00:24:11.200
time that it takes to
spin up these things or

478
00:24:11.200 --> 00:24:15.250
get your container or your
function or your whatever set

479
00:24:15.250 --> 00:24:17.980
up and running should not,
you shouldn't be charged for

480
00:24:17.980 --> 00:24:20.140
that. You should only charge
for the time that your

481
00:24:20.320 --> 00:24:24.730
function executes. Yeah. Yeah, exactly.
So again, depending on who

482
00:24:24.730 --> 00:24:27.670
your provider is, like, they'll
usually have like per second

483
00:24:27.670 --> 00:24:31.450
billing or per minute billing,
and again, it's the utility,

484
00:24:31.450 --> 00:24:33.070
right? So the more you
use, the more you pay,

485
00:24:33.070 --> 00:24:35.410
the less you use, the
less you pay, Right? Yeah.

486
00:24:35.440 --> 00:24:38.920
The idea that the outer
loop of the setup and

487
00:24:38.920 --> 00:24:41.050
the getting the, getting the
thing ready to go is

488
00:24:41.050 --> 00:24:44.260
free and the Interloop wouldn't
would be what you pay

489
00:24:44.260 --> 00:24:45.850
for. It would be pretty
cool. So then it's like,

490
00:24:46.300 --> 00:24:51.250
you start paying for CPU
cycles. Yeah. That's, that's pretty

491
00:24:51.250 --> 00:24:56.010
much CPU cycles, memory bandwidth.
So if we use the

492
00:24:56.020 --> 00:24:59.230
example of <inaudible> on Amazon,
that's, that's a pretty common

493
00:24:59.230 --> 00:25:02.110
service. A lot of people
use, I just want to

494
00:25:02.110 --> 00:25:05.440
say, okay, store these files
for me, right. I'm going

495
00:25:05.440 --> 00:25:07.810
to create a bucket, right.
A container for me to

496
00:25:07.810 --> 00:25:10.720
store this information in, and
I'm going to just give

497
00:25:10.720 --> 00:25:12.730
you some stuff to store.
Now, if I create this

498
00:25:12.730 --> 00:25:15.310
bucket and I don't put
anything in there, then I'm

499
00:25:15.310 --> 00:25:17.950
not gonna get charged for
it. Right. Because the bucket's

500
00:25:17.950 --> 00:25:20.500
there, but I'm not actually
using it to do anything

501
00:25:21.520 --> 00:25:23.410
when I started using it
to do so I start

502
00:25:23.440 --> 00:25:25.870
taking up space or using
bandwidth or anything of that

503
00:25:25.870 --> 00:25:29.650
sort. That's when the billing
starts, right. So how much

504
00:25:29.650 --> 00:25:32.080
space am I taking up?
How often am I accessing

505
00:25:32.080 --> 00:25:34.930
it? You know, how often
am I making requests here?

506
00:25:35.380 --> 00:25:38.320
And then you will build
accordingly for the usage, but

507
00:25:38.320 --> 00:25:41.290
not the provisioning of the
research. Well, and even better,

508
00:25:41.290 --> 00:25:44.380
if you could hide as
much of the billing and

509
00:25:44.380 --> 00:25:47.650
the mint as possible, like
you're listing out the stuff

510
00:25:48.100 --> 00:25:51.100
that one could potentially bill,
it'd be nice. It'd be

511
00:25:51.100 --> 00:25:52.690
nice. If you could remove
as many of those things

512
00:25:52.690 --> 00:25:57.130
as possible. Like I'm thinking
of like Azure container service,

513
00:25:57.490 --> 00:26:02.710
which the management VMs, the
cluster management, do, you don't

514
00:26:02.710 --> 00:26:04.480
pay for that. Right. So
you do pay for the

515
00:26:04.480 --> 00:26:08.110
VMs that your things, your
containers are running on. So

516
00:26:08.110 --> 00:26:10.300
that's on you and you
pay for those as kind

517
00:26:10.300 --> 00:26:13.030
of as virtual machines. But
if you could hide the

518
00:26:13.030 --> 00:26:14.590
management and if you could
hide as much of the

519
00:26:14.590 --> 00:26:16.360
bandwidth as possible, if you
could hide as much of

520
00:26:16.360 --> 00:26:21.160
the storage as possible, That'd
be cool. Yeah. And they

521
00:26:21.160 --> 00:26:24.760
actually do a spray, similar
thing with the Azure container

522
00:26:24.760 --> 00:26:29.440
service, the Azure community service.
Like again, they just, the

523
00:26:29.440 --> 00:26:31.750
management stuff you'd have to
worry about. All I need

524
00:26:31.750 --> 00:26:34.630
to worry about is, Hey,
let me push this, push

525
00:26:34.630 --> 00:26:37.360
this image. Right. And then
they'll worry about provisioning some

526
00:26:37.360 --> 00:26:38.620
of that stuff for you.
So that works out really

527
00:26:38.620 --> 00:26:42.250
good. Yeah. So do you
think that a year from

528
00:26:42.250 --> 00:26:45.000
now two years now, there
will be a generation of

529
00:26:45.030 --> 00:26:47.820
people who don't think about
Kubernetes. They don't think about

530
00:26:48.450 --> 00:26:51.000
VMs. They just check a
box or pull a slider

531
00:26:51.000 --> 00:26:54.060
bar and their code shows
up somewhere. And then there's

532
00:26:54.450 --> 00:26:56.850
the dev ops. People are
the only ones that know

533
00:26:56.910 --> 00:27:01.430
or understand. So I've definitely
spoken to a few companies

534
00:27:01.430 --> 00:27:06.020
that they're like a hundred
percent serverless. So I, for

535
00:27:06.020 --> 00:27:09.110
instance, I know that's a
few, what do you call

536
00:27:09.110 --> 00:27:13.550
them? Video hosting websites. Right.
So they do like educational

537
00:27:13.550 --> 00:27:15.860
learning through, you know, hosted
video and things of that

538
00:27:15.860 --> 00:27:19.730
nature. And a lot of
them are completely serverless now.

539
00:27:20.150 --> 00:27:22.940
So again, they, they, you
know, they have servers storage,

540
00:27:22.970 --> 00:27:26.660
so to speak, right? Their
applications are built on serverless

541
00:27:26.660 --> 00:27:29.330
APIs and then their front
ends are just, you know,

542
00:27:29.360 --> 00:27:32.090
thick JavaScript clients that are
calling these serverless APIs in

543
00:27:32.090 --> 00:27:36.350
the background. So again, no
servers, no, you know, machines

544
00:27:36.350 --> 00:27:39.350
to worry about no VM
updates. And, and that's essentially

545
00:27:39.350 --> 00:27:42.320
how they run and it
works great for them because

546
00:27:42.590 --> 00:27:45.620
now they, they, they, again,
they only pay for what

547
00:27:45.620 --> 00:27:48.650
they use. Right. So, you
know, I don't have to

548
00:27:48.650 --> 00:27:51.140
be okay, this is going
to be a very heavy,

549
00:27:51.470 --> 00:27:54.230
you know, sales season for
me. I have to, you

550
00:27:54.230 --> 00:27:58.940
know, expand and buy additional
servers, like the platforms automatically

551
00:27:58.940 --> 00:28:01.640
scales up and scales down.
And that works really well

552
00:28:01.640 --> 00:28:06.200
for them from a cost
perspective. Hm. And do you,

553
00:28:06.230 --> 00:28:10.730
do you see this taking
over like the all of

554
00:28:10.730 --> 00:28:14.090
computing? Cause I feel like
when I teach people, when

555
00:28:14.090 --> 00:28:16.010
I teach people software and
I assume you do the

556
00:28:16.010 --> 00:28:18.260
same, I either start at
functions or I start at

557
00:28:18.590 --> 00:28:21.560
websites and then I try
to find a website that

558
00:28:21.560 --> 00:28:23.900
I can throw up as
quickly as possible so that

559
00:28:23.900 --> 00:28:26.660
people feel, you know, happy
and comfortable, which is usually

560
00:28:27.020 --> 00:28:29.990
platform as a service. Do
you think that that will

561
00:28:29.990 --> 00:28:34.400
be hidden from, you know,
new learners entirely? I don't

562
00:28:34.400 --> 00:28:36.890
think so. I think, you
know, kind of like computing

563
00:28:36.890 --> 00:28:38.390
in general, this is the
kind of way that I

564
00:28:38.390 --> 00:28:42.500
look at it is we
all operate at a different

565
00:28:42.500 --> 00:28:44.900
level of abstraction, right. And
as you're building out your

566
00:28:44.900 --> 00:28:47.390
solution, you have to find
out the level of abstraction

567
00:28:47.390 --> 00:28:50.660
that makes sense for you.
We still have tons of

568
00:28:50.660 --> 00:28:53.370
people that are running virtual
machines. Right. And that, that

569
00:28:53.390 --> 00:28:55.460
makes sense for them, right.
Because they need to have

570
00:28:55.460 --> 00:28:59.450
that level of, of control
over their environment. Then you

571
00:28:59.450 --> 00:29:01.850
have, again, the platform as
a service type offering where,

572
00:29:02.120 --> 00:29:04.310
well, I don't really worry
about the VM in terms

573
00:29:04.310 --> 00:29:06.860
of managing it, but I
do say, Hey, I want

574
00:29:06.860 --> 00:29:09.350
it to be this big
and this fast, right? Like

575
00:29:09.350 --> 00:29:10.910
I want this much Ram
and I want this much

576
00:29:10.910 --> 00:29:13.850
CPU and I want it
to scale based on some

577
00:29:13.880 --> 00:29:16.670
predefined rules that you set
up. But at the end

578
00:29:16.670 --> 00:29:18.950
of the day, like that's
that level of obstruction works

579
00:29:18.950 --> 00:29:21.650
for them. Right. So several
of us knows like a

580
00:29:21.650 --> 00:29:24.530
higher level of abstraction. This
is the level of abstraction

581
00:29:24.530 --> 00:29:27.290
where we just say, here's
the code, let me know

582
00:29:27.290 --> 00:29:29.690
how much money I have
for you, because I don't

583
00:29:29.690 --> 00:29:31.820
really care about worrying about
some of these other things.

584
00:29:32.390 --> 00:29:35.960
Is it, is it their
comfort level though? Or is

585
00:29:35.960 --> 00:29:39.080
it like, are people picking
VMs? Cause they are comfortable

586
00:29:39.080 --> 00:29:40.310
with it or to using
it. They actually have a

587
00:29:40.310 --> 00:29:43.330
business reason care about the
VM. And I think there's

588
00:29:43.330 --> 00:29:45.790
a little bit of both.
Right? So for some people

589
00:29:45.940 --> 00:29:48.370
definitely do have a business
reason for that, right. Because

590
00:29:48.760 --> 00:29:50.800
you know, again, depending on
the type of industry you're

591
00:29:50.800 --> 00:29:53.950
in, you might have certain
requirements, particularly when it comes

592
00:29:53.950 --> 00:29:56.770
to compliance and things of
that nature that, you know,

593
00:29:56.770 --> 00:29:59.050
you need to have some
level of like a deeper

594
00:29:59.050 --> 00:30:02.080
level of control again. And
when we talk about auditing

595
00:30:02.080 --> 00:30:03.940
and things of that nature,
like you might need to

596
00:30:03.940 --> 00:30:07.960
do that, but also too,
from a comfort level, when

597
00:30:07.960 --> 00:30:12.040
you think about onboarding your
developers and getting people into

598
00:30:12.040 --> 00:30:14.410
the cloud really quickly, you
mentioned you have a new

599
00:30:14.410 --> 00:30:17.770
developer that starts today and
you say, Hey, could you,

600
00:30:17.770 --> 00:30:19.120
I will need you to
go look at this API

601
00:30:19.390 --> 00:30:21.280
it's serverless and it's running,
you know, it's running in

602
00:30:21.280 --> 00:30:24.670
the cloud, I need you
to update this code. Well,

603
00:30:24.670 --> 00:30:25.870
you know what they could
do, they could go, they

604
00:30:25.870 --> 00:30:27.100
could check out the code,
they can update it and

605
00:30:27.100 --> 00:30:29.860
they could push it. And
then, you know, probably in

606
00:30:29.860 --> 00:30:31.750
a couple of seconds they
can actually see like the

607
00:30:31.750 --> 00:30:35.200
results of that change, like
in a real environment. Right,

608
00:30:35.200 --> 00:30:39.460
exactly. Right. Right. Versus being
like, okay, I need to

609
00:30:39.460 --> 00:30:42.730
set up this virtual machine
locally on my laptop. I'd

610
00:30:42.730 --> 00:30:45.130
have to get all the
settings. Right. The configurations. Right.

611
00:30:45.430 --> 00:30:48.070
I gotta get the right
dependencies and DLLs installed and

612
00:30:48.070 --> 00:30:50.440
all this types of stuff.
And then I still may

613
00:30:50.440 --> 00:30:52.150
not even get it right.
Because I got to, you

614
00:30:52.150 --> 00:30:54.130
know, there's a lot of,
there's a lot of tweaking

615
00:30:54.130 --> 00:30:57.250
and changing that needs to
happen. At least with serverless,

616
00:30:57.250 --> 00:30:59.050
you have a little bit
more of a consistent environment.

617
00:30:59.050 --> 00:31:01.450
Right. So when we talk
about time to change, where

618
00:31:01.450 --> 00:31:05.980
we talk about the increase
in level of productivity, that

619
00:31:05.980 --> 00:31:09.040
for you might be like
an acceptable level of abstraction

620
00:31:09.040 --> 00:31:13.240
to be at for those
particular games. Nice. So you,

621
00:31:13.480 --> 00:31:16.120
as I said before, are
the host of a way

622
00:31:16.120 --> 00:31:19.660
from the keyboard to podcast?
Is it a tech podcast

623
00:31:19.660 --> 00:31:23.110
or is it a, is
a people podcast? It's a

624
00:31:23.110 --> 00:31:25.420
little bit of both. Right.
So at the show, what

625
00:31:25.420 --> 00:31:28.330
we do is we talk
to mainly different folks in

626
00:31:28.330 --> 00:31:31.900
the technology industry, but we
talked to them about not

627
00:31:31.900 --> 00:31:35.980
technology, right? So again, if
you're, if you work on

628
00:31:35.980 --> 00:31:39.100
company XYZ and you're into
this compiler of that programming

629
00:31:39.100 --> 00:31:42.730
language, that's great. Kudos to
you. We don't really want

630
00:31:42.730 --> 00:31:45.310
to talk about that. Well,
we do want to talk

631
00:31:45.310 --> 00:31:48.400
about is, you know, what
are you actually doing? You

632
00:31:48.400 --> 00:31:51.340
know, like what really motivates
you? What really pushes you?

633
00:31:51.340 --> 00:31:53.080
Like what are the things
that really get you going

634
00:31:53.080 --> 00:31:56.170
as an individual? And I
think those are important stories

635
00:31:56.170 --> 00:31:58.720
to tell, because now you
can kind of get to

636
00:31:58.720 --> 00:32:02.290
see, you know, what's the
journey this person kind of

637
00:32:02.290 --> 00:32:05.050
took to, to be where
they are today. Like, what

638
00:32:05.050 --> 00:32:07.390
are some of the, the
hurdles they had to cross

639
00:32:07.390 --> 00:32:08.860
or, you know, what are
some of the things that

640
00:32:08.860 --> 00:32:11.080
they do to kind of
distress when they're not working?

641
00:32:12.340 --> 00:32:14.710
And now you get to
see, let's say Scott, right?

642
00:32:14.710 --> 00:32:16.660
Like we get to see
Scott as a person. Right.

643
00:32:16.660 --> 00:32:18.430
We get to see sessile
as a person and not

644
00:32:18.430 --> 00:32:20.890
just, you know, somebody on
YouTube or a name in

645
00:32:20.890 --> 00:32:22.720
a book that you happen
to pick up in the

646
00:32:22.720 --> 00:32:26.470
bookstore. Great. Cool. Well thank
you for coming on my

647
00:32:26.470 --> 00:32:29.110
podcast and we'll be sure
to check out yours. Thank

648
00:32:29.110 --> 00:32:31.720
you so much. God, you've
been a pleasure. This has

649
00:32:31.720 --> 00:32:34.720
been another episode of Hanselminutes
and we'll see you again

650
00:32:34.720 --> 00:32:42.930
next week. <inaudible>.

