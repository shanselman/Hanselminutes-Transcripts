WEBVTT FILE

1
00:00:12.090 --> 00:00:17.880
From a Hansel minutes.com. It's
Hansel minutes. Oh, weekly discussion

2
00:00:17.880 --> 00:00:22.440
with web developer and technologists.
Scott Hanselman. This is Lawrence Ryan

3
00:00:22.440 --> 00:00:28.620
announcing the show. Number three
72 recorded live Thursday, May 16th, 2013.

4
00:00:29.340 --> 00:00:32.850
Support for Hansel minutes is
provided by Tellerik offering the

5
00:00:32.850 --> 00:00:42.420
best in developer tools and
support online@telerikdotcomandbyfranklins.net makers of gesture

6
00:00:42.420 --> 00:00:46.440
pack a powerful gesture, recording
and recognition system for Microsoft

7
00:00:46.440 --> 00:00:53.430
connect for windows developers details@gesturepak.com.
In this episode, Scott talks

8
00:00:53.430 --> 00:00:59.060
with Troy hunt about the
state of web security. Hi,

9
00:00:59.060 --> 00:01:01.010
this is Scott Hanselman. This
is another episode of Hansel

10
00:01:01.010 --> 00:01:03.680
minutes and I've got security
guy, Troy hunt on the

11
00:01:03.680 --> 00:01:06.290
phone. How are you? Hey,
Scott. I'm really good. Thanks.

12
00:01:06.830 --> 00:01:10.490
Have you broken into anyone's
wifi today? No, not today,

13
00:01:10.490 --> 00:01:12.680
but it's still early yet.
So we will see how

14
00:01:12.680 --> 00:01:16.370
it pans out. I've been
freaking out since I've been

15
00:01:16.370 --> 00:01:18.770
reading your stuff about wifi
and breaking into it. I

16
00:01:18.770 --> 00:01:23.180
mean, I knew that that
WEP WEP is not a

17
00:01:23.180 --> 00:01:25.130
good way to, you know,
kind of set up my,

18
00:01:25.370 --> 00:01:27.740
my wifi and I've, I've
gone to my parents house

19
00:01:27.740 --> 00:01:32.900
and I've changed them from
WP to WPA. And anytime

20
00:01:32.900 --> 00:01:34.910
I see a neighbor or
a family member or friend,

21
00:01:34.910 --> 00:01:38.840
I switched them over, but
I'm still a little concerned.

22
00:01:38.870 --> 00:01:41.780
How, how insecure is wifi?
Yeah, look, it's, it's an

23
00:01:41.780 --> 00:01:44.270
interesting question. I mean, I'm
unlike you, we've sort of

24
00:01:44.270 --> 00:01:46.730
moved through the web era
and we're into the WPA

25
00:01:46.730 --> 00:01:49.100
two era. And I think
to be honest, as a,

26
00:01:49.100 --> 00:01:51.590
as a consumer and particularly
as a, as a home

27
00:01:51.590 --> 00:01:53.480
user, you know, that's about
the best we can do

28
00:01:53.480 --> 00:01:56.300
today. We, we picked WPI
two and we try and

29
00:01:56.300 --> 00:01:58.790
have a nice strong passcode
on it. So it can't

30
00:01:58.790 --> 00:02:02.080
be too easily grouped forced.
So that's easy. I mean,

31
00:02:02.150 --> 00:02:04.550
the, I guess the more
interesting bit is, is what

32
00:02:04.550 --> 00:02:06.860
happens with all of our
devices that are still trying

33
00:02:06.860 --> 00:02:09.560
to connect to unsecured networks.
And that's where some of

34
00:02:09.560 --> 00:02:11.840
the research I've been doing
has been hitting. That's the,

35
00:02:12.230 --> 00:02:15.470
that's the thing that keeps
me awake, but what is,

36
00:02:15.470 --> 00:02:17.930
what do I tell my
wife? What do I tell

37
00:02:17.930 --> 00:02:20.360
the nontechnical portion? I want
to get a sense of

38
00:02:20.360 --> 00:02:24.650
the paranoia slider bar and
where, where should I be

39
00:02:25.040 --> 00:02:27.410
and where should my family
be? So I think there's

40
00:02:27.410 --> 00:02:29.450
two sides to look at
it. So in, in terms

41
00:02:29.450 --> 00:02:31.970
of, for those of us
setting up access points, I

42
00:02:31.970 --> 00:02:34.640
mean, we've got WPA to,
and again, you know, we

43
00:02:34.640 --> 00:02:36.800
put a strong passcode on
that and that's about the

44
00:02:36.800 --> 00:02:39.410
best we can do. But
the other side of it

45
00:02:39.440 --> 00:02:43.010
is what other networks are
our devices connecting to? Because

46
00:02:43.010 --> 00:02:45.170
what a lot of people
don't realize is that when

47
00:02:45.170 --> 00:02:49.400
we connect to an access
point, our device then walks

48
00:02:49.400 --> 00:02:53.090
around broadcasting this little pro
signal, looking for that access

49
00:02:53.090 --> 00:02:55.850
point again in the future.
Now, when that access point

50
00:02:55.850 --> 00:02:59.030
that you've connected to may
have been insecure. So no

51
00:02:59.050 --> 00:03:02.170
web, no WPI, just an
open network. That's where we

52
00:03:02.170 --> 00:03:04.240
start to get a real
risk because we can have

53
00:03:04.240 --> 00:03:06.880
these other nasty sneaky devices,
which is the sort of

54
00:03:06.880 --> 00:03:09.430
thing I've been writing about.
Stand up and say, Hey,

55
00:03:09.430 --> 00:03:11.320
I'm the access point that
you're looking for? Come on

56
00:03:11.320 --> 00:03:14.290
board. And they connect and
they have a little relationship.

57
00:03:14.320 --> 00:03:16.770
And as far as the
device knows, it's talking to

58
00:03:16.780 --> 00:03:20.400
nine network. Okay. So hang
on a second. You're saying

59
00:03:20.400 --> 00:03:24.990
that rather than maintaining a
list of my favorite access

60
00:03:24.990 --> 00:03:29.190
points, my preferred access points,
and then simply attaching to

61
00:03:29.190 --> 00:03:31.590
one when it sees it,
which seems like a fairly

62
00:03:31.590 --> 00:03:35.850
harmless and passive thing that
all the wifi devices in

63
00:03:35.850 --> 00:03:40.170
the world actively announce They're
looking for. Yeah. So what's

64
00:03:40.170 --> 00:03:42.600
happening and you know, whether
it's your phone or your

65
00:03:42.600 --> 00:03:46.440
tablet or your PC, when
you make an association to

66
00:03:46.440 --> 00:03:50.070
a wireless access point, the
way the device reconnects, when

67
00:03:50.070 --> 00:03:51.900
you come home and you
walk in the front door,

68
00:03:51.900 --> 00:03:54.360
as the device is sending
out these little probe requests

69
00:03:54.750 --> 00:03:56.490
and the saying, Hey, is
my network. There? Is it

70
00:03:56.490 --> 00:03:59.910
there? The access point receives
the probe request and responds

71
00:03:59.910 --> 00:04:02.010
and says, Hey, I'm look,
I'm the guy you're looking

72
00:04:02.010 --> 00:04:05.550
for. And that's when the
association happens. Now, there's nothing

73
00:04:05.550 --> 00:04:08.370
wrong with that. And there's
obviously like a massive convenience

74
00:04:08.370 --> 00:04:10.350
factor to be able to
just walk home and things

75
00:04:10.350 --> 00:04:14.070
work where it gets interesting
is that if one of

76
00:04:14.070 --> 00:04:18.810
those access points had no
security whatsoever, there is a

77
00:04:18.810 --> 00:04:22.740
vulnerability where another device, and
this is this pineapple thing

78
00:04:22.740 --> 00:04:25.500
I've been running about can
go and actually spoof that

79
00:04:25.560 --> 00:04:27.780
SSI D so it can
say, Hey, I'm, you know,

80
00:04:27.780 --> 00:04:30.510
Scott's home a welcome on
board let's connect. And because

81
00:04:30.510 --> 00:04:33.660
there is no handshake, there's
no sort of authentication process

82
00:04:34.140 --> 00:04:37.260
the association is made. And
that's the real interesting risk,

83
00:04:38.160 --> 00:04:40.650
But how does it know?
So what is the protocol

84
00:04:40.650 --> 00:04:42.750
that is, that is faulty
here that is saying that,

85
00:04:42.810 --> 00:04:45.990
you know, let's say Hanselman
is the SSI ID that

86
00:04:45.990 --> 00:04:47.730
I want. Like, how do
they know? Like I can

87
00:04:47.730 --> 00:04:50.790
understand if someone is parked
in a van out front

88
00:04:50.790 --> 00:04:56.040
of my house, broadcasting free
wifi, that someone might connect

89
00:04:56.040 --> 00:04:59.040
to that because Hey, free
wifi. But how would they

90
00:04:59.040 --> 00:05:03.420
ever know that I, that
my device Hanselman. Yeah. And

91
00:05:03.480 --> 00:05:05.640
of course that would be
an explicit action. If you

92
00:05:05.640 --> 00:05:07.590
saw free wifi and you
said, Hey, I, you know,

93
00:05:07.590 --> 00:05:08.850
I want to get on
board with this. Let's go

94
00:05:08.850 --> 00:05:11.870
and grab some. So how
the device knows or, or

95
00:05:11.880 --> 00:05:14.610
how the rogue access point,
if you like. And that's

96
00:05:14.610 --> 00:05:16.590
probably the best word to
use. So say an attacker

97
00:05:16.590 --> 00:05:18.930
says, look, I want to
try and get Scott to

98
00:05:18.930 --> 00:05:22.470
connect to my access point
without any explicit action whatsoever.

99
00:05:22.950 --> 00:05:25.920
When you walk past with
your phone, you phone saying,

100
00:05:26.190 --> 00:05:28.560
where's the handsome and SSR
day. Where's the answer when

101
00:05:28.560 --> 00:05:31.350
SSR day and it keeps
sending out this probe request.

102
00:05:31.800 --> 00:05:35.280
Now the device, the rogue
device can detect this probe

103
00:05:35.280 --> 00:05:37.890
request and it can say,
Hey, I'm going to change

104
00:05:37.920 --> 00:05:41.550
my SSI ID. So it
reads handsome. Now, if your

105
00:05:41.550 --> 00:05:45.450
phone wasn't expecting to make
an authenticated request or wasn't

106
00:05:45.450 --> 00:05:48.870
expecting to sort of go
through an authentication handshake, I,

107
00:05:48.900 --> 00:05:51.420
it was an open network
and I credentials that's when

108
00:05:51.420 --> 00:05:53.700
the association is made. So
that's where the risk is.

109
00:05:53.700 --> 00:05:56.580
And the real story, if
your original question about how

110
00:05:56.580 --> 00:06:00.230
do we, as consumers protect
our devices, the simple answer

111
00:06:00.230 --> 00:06:03.290
is don't connect to unprotected
networks because that's where this

112
00:06:03.290 --> 00:06:05.600
risk comes from. So even
if you go to the

113
00:06:05.600 --> 00:06:09.170
airport and Hey, there's airport
free wifi you'll then go

114
00:06:09.170 --> 00:06:11.330
somewhere else with your phone
and your phone saying, Hey,

115
00:06:11.330 --> 00:06:14.090
where's the airport free wifi.
And if a rogue access

116
00:06:14.090 --> 00:06:16.640
point can receive that and
say, well, I'm going to

117
00:06:16.640 --> 00:06:19.310
tell you that on the
airport free wifi. That's when

118
00:06:19.310 --> 00:06:22.000
the problem comes. I see.
So if I went to

119
00:06:22.000 --> 00:06:23.860
the airport and someone knew
I was going to be

120
00:06:23.860 --> 00:06:28.180
there, could they have a
Hanselman honeypot waiting for me?

121
00:06:28.210 --> 00:06:30.700
Or that's not a problem?
Cause Hanselman is not a

122
00:06:31.090 --> 00:06:33.580
open wife. Well, I think
you probably write on both

123
00:06:33.580 --> 00:06:36.370
fronts. So, you know, like
me, you've probably got WPI

124
00:06:36.430 --> 00:06:40.000
two protections. So the device
is expecting to authenticate. It's

125
00:06:40.000 --> 00:06:42.910
expecting to go through this.
They call us for way

126
00:06:42.910 --> 00:06:45.550
handshake, which is part of
the ADA two 11 protocol.

127
00:06:45.970 --> 00:06:48.220
And it's not going to
happen because the access point,

128
00:06:48.220 --> 00:06:50.230
isn't going to be able
to complete its side of

129
00:06:50.230 --> 00:06:53.260
that, that authentication process. But
they don't have to sort

130
00:06:53.260 --> 00:06:54.850
of be there waiting for
you. I mean, if you

131
00:06:54.850 --> 00:06:57.730
go to any busy place
and turn on of these

132
00:06:57.730 --> 00:07:01.330
rogue access points, you'll see
all of these probes come

133
00:07:01.330 --> 00:07:03.400
from, you know, hundreds and
hundreds of probes come from

134
00:07:03.400 --> 00:07:07.060
people around you. You're looking
for these access points. Yikes.

135
00:07:07.630 --> 00:07:10.690
Okay. So then the solution
is never ever connect to

136
00:07:10.690 --> 00:07:14.470
anything that is not authenticated
that I control. Yeah, pretty

137
00:07:14.470 --> 00:07:17.620
much. Or if you do
forget that network, because it's

138
00:07:17.620 --> 00:07:21.070
the automatic association and even
then forgetting the network, it

139
00:07:21.070 --> 00:07:24.310
depends on the device. So
something like an iOS device,

140
00:07:24.700 --> 00:07:27.250
it's easy to forget a
network when you can see

141
00:07:27.250 --> 00:07:30.010
it, when you can't see
it, you can't forget it

142
00:07:30.010 --> 00:07:32.620
because you've got to be
able to select a network

143
00:07:32.620 --> 00:07:35.920
which is currently in range.
So for something like iOS

144
00:07:36.400 --> 00:07:38.050
you've then got to sort
of go back and delete

145
00:07:38.050 --> 00:07:40.960
all your network settings. If
you're on a macro PC,

146
00:07:40.960 --> 00:07:42.640
at least you can go
and see all of the

147
00:07:42.640 --> 00:07:45.430
devices or rather all of
the wireless access points that

148
00:07:45.430 --> 00:07:47.710
you've previously connected to. And
you can sort of, you

149
00:07:47.710 --> 00:07:50.080
know, selectively nuke them. And
they tell you, you know,

150
00:07:50.110 --> 00:07:53.260
was this access point a
secured or not? Right? But

151
00:07:53.260 --> 00:07:57.040
on windows eight, that dialogue
has gone. The, the wireless

152
00:07:57.040 --> 00:07:58.870
settings dialogue you used to
be able to get to

153
00:07:58.870 --> 00:08:02.890
is gone. You can't delete
old networks anymore. Oh really?

154
00:08:02.890 --> 00:08:04.840
So, you know, I hadn't
looked at eight. I know

155
00:08:04.840 --> 00:08:07.570
that previously we couldn't, I
know you can't on OSX,

156
00:08:07.570 --> 00:08:10.090
but yeah, that is interesting
because that then puts you

157
00:08:10.090 --> 00:08:12.340
back in the iOS category
where your only option then

158
00:08:12.340 --> 00:08:14.170
is to say, well, I
just got to delete everything,

159
00:08:14.410 --> 00:08:17.170
Right? Because on windows you
can right click and say,

160
00:08:17.170 --> 00:08:19.600
open network settings here. You
can say network and sharing

161
00:08:19.600 --> 00:08:22.330
center. But on the left
hand side that used to

162
00:08:22.330 --> 00:08:25.420
say change, adapter, settings, change,
advanced sharing settings. And then

163
00:08:25.420 --> 00:08:28.000
there was one for wifi
that's gone now. And windows

164
00:08:28.000 --> 00:08:31.090
eight. Interesting. I wonder if
it still exists under the

165
00:08:31.090 --> 00:08:33.810
covers somewhere and you've just
got to, We should, we

166
00:08:33.820 --> 00:08:35.740
should look into that because
if there's a way to

167
00:08:35.740 --> 00:08:39.670
maybe launch that dialogue box
programmatically, just like the dialogue

168
00:08:39.700 --> 00:08:43.900
is there, but it's been
hidden away. That that would

169
00:08:43.900 --> 00:08:46.270
be really interesting. Cause I
have seen times where I've

170
00:08:46.270 --> 00:08:51.550
had, you know, 40, 50
wifi points from all the

171
00:08:51.550 --> 00:08:54.790
airports all over the world,
just sitting there. Yeah. And

172
00:08:54.790 --> 00:08:56.580
the, you, that's the really
weird thing Too, because you

173
00:08:56.580 --> 00:08:58.500
go back to somewhere, you
haven't been for a while

174
00:08:58.500 --> 00:08:59.970
and you look down and
you go, Hey, I've got

175
00:08:59.970 --> 00:09:02.550
signal. You know, what's going
on? Was I here before?

176
00:09:02.880 --> 00:09:08.540
Right. So it sounds like
removing automatic Romano, automatic association

177
00:09:08.540 --> 00:09:12.590
completely would be a good
start. Like it's a convenience,

178
00:09:12.950 --> 00:09:15.350
but it's that implicit action
that gets us into trouble.

179
00:09:15.860 --> 00:09:18.170
Well, you know, it depends
on the context because I

180
00:09:18.170 --> 00:09:20.270
want to be able to
come home each day and

181
00:09:20.270 --> 00:09:23.000
I'm connected. I want that
to work. That's a convenience

182
00:09:23.000 --> 00:09:25.280
that has a security aspect
to it because I trust

183
00:09:25.280 --> 00:09:27.890
my home network, but I
also want to be able

184
00:09:27.890 --> 00:09:32.120
to maybe use a public
network somewhere, be selective about

185
00:09:32.120 --> 00:09:35.270
the services I use and
then not have it automatically

186
00:09:35.270 --> 00:09:37.910
reconnected from stopped in the
traffic at the front of

187
00:09:37.910 --> 00:09:41.240
the McDonald's or something like
that. If I go now,

188
00:09:41.270 --> 00:09:43.790
I've always had people say,
I should use SSL and

189
00:09:43.790 --> 00:09:47.090
HTTPS for all of my
logins. And a couple of

190
00:09:47.090 --> 00:09:51.500
years ago, maybe 18 months
ago, Twitter and Facebook and

191
00:09:51.500 --> 00:09:54.950
Google. And a lot of
people just switched to HTTP

192
00:09:55.010 --> 00:09:59.450
HTTPS by default. And you
know, certainly if you're logging

193
00:09:59.450 --> 00:10:02.420
in somewhere and you're about
to hit submit, and it's

194
00:10:02.420 --> 00:10:05.510
not under HTTPS, then you
probably have a problem. That's

195
00:10:05.510 --> 00:10:08.240
not somewhere you want to
spend time with. But if

196
00:10:08.240 --> 00:10:11.240
I have connected to one
of these honeypots or if

197
00:10:11.240 --> 00:10:15.530
I am associated with a,
an evil rogue network that

198
00:10:15.590 --> 00:10:20.190
HTTPS may not matter, what
would it mean that it

199
00:10:20.230 --> 00:10:23.270
may not save me? Yeah.
So here's the interesting thing.

200
00:10:23.270 --> 00:10:26.090
And for me, looking at
wifi is not because I

201
00:10:26.090 --> 00:10:29.330
want to break people's networks.
It's because from a developer

202
00:10:29.360 --> 00:10:33.230
security perspective, I'm interested in
what is the risk to

203
00:10:33.230 --> 00:10:37.880
web applications when the connection
can't be trusted. So, you

204
00:10:37.880 --> 00:10:40.940
know, you're right in so
far as HTTPS is, is

205
00:10:40.940 --> 00:10:43.550
really the key there. And
really actually Pierce is there

206
00:10:43.550 --> 00:10:45.620
to save us. In fact,
I should have asked is

207
00:10:45.620 --> 00:10:47.150
there to do several things,
but one of the key

208
00:10:47.150 --> 00:10:49.430
things is it's there to
save us when we can't

209
00:10:49.430 --> 00:10:53.300
necessarily trust the transport layer.
So if you are connected

210
00:10:53.300 --> 00:10:57.560
to a rogue access point,
is that web application sufficiently

211
00:10:57.560 --> 00:11:01.220
implementing HTTPS, that is someone
is able to intercept your

212
00:11:01.220 --> 00:11:04.880
traffic. They're not able to
do evil with it. Okay.

213
00:11:05.960 --> 00:11:08.570
What if they're using one
of these new devices you've

214
00:11:08.570 --> 00:11:12.380
been talking about this wifi
pineapple, what is this? Yeah,

215
00:11:12.380 --> 00:11:14.840
so the pineapple is, is
this little piece of equipment.

216
00:11:14.840 --> 00:11:17.660
That's making things quite interesting
for me. So the pineapple

217
00:11:17.660 --> 00:11:19.580
is a little device. It's
about the size of a

218
00:11:19.580 --> 00:11:22.100
cigarette pack. They sell it
for a hundred dollars. You

219
00:11:22.100 --> 00:11:25.970
get it from the hack
five shop online. It is

220
00:11:25.970 --> 00:11:31.400
sold for quote unquote penetration
testing purposes. I suspect it's

221
00:11:31.400 --> 00:11:36.920
not always used for penetration
purposes and penetrations detection purposes.

222
00:11:37.190 --> 00:11:39.380
So, you know, the thing
about the pineapple, it's a

223
00:11:39.380 --> 00:11:42.710
little device that again is
quite small. It has an

224
00:11:42.710 --> 00:11:45.740
aerial. So it's got its
own wifi access point. It's

225
00:11:45.740 --> 00:11:48.350
got an ethernet port and
it runs a little version

226
00:11:48.350 --> 00:11:52.640
of open WRT embedded Linux.
And it's really tiny little

227
00:11:52.640 --> 00:11:56.530
computer, which is able to
perform the sort of activities

228
00:11:56.530 --> 00:11:59.230
we were talking about before
with regards to rogue access

229
00:11:59.230 --> 00:12:02.410
points. So for example, when
I turn the pineapple on

230
00:12:02.800 --> 00:12:04.570
and you compare it by
battery, so you can just

231
00:12:04.660 --> 00:12:06.370
Chuck it in your pocket
or your bag or something,

232
00:12:06.850 --> 00:12:10.090
it will start looking for
these probe requests from devices.

233
00:12:10.090 --> 00:12:12.100
So if you walk past
and your device says, Hey,

234
00:12:12.100 --> 00:12:15.730
I'm trying to connect to
free airport wifi in Seattle.

235
00:12:16.360 --> 00:12:18.460
This device will get that.
And it will say, okay,

236
00:12:18.460 --> 00:12:20.290
well, I'm going to turn
around and I'm going to

237
00:12:20.290 --> 00:12:23.410
tell Scott that I am
free wifi, you know, free

238
00:12:23.410 --> 00:12:25.960
airport wifi in Seattle. And
I'm going to allow that

239
00:12:25.960 --> 00:12:30.190
association to happen. Now, if
an attacker can then route

240
00:12:30.460 --> 00:12:33.820
the traffic that you're sending
to that device through to

241
00:12:33.820 --> 00:12:36.880
an actual open internet connection.
So for example, if we

242
00:12:36.880 --> 00:12:40.030
take that ethernet port, plug
it into your laptop with

243
00:12:40.030 --> 00:12:43.450
connection sharing, we can now
route your traffic through the

244
00:12:43.450 --> 00:12:46.540
device. So this device becomes
a man in the middle

245
00:12:47.080 --> 00:12:49.210
and when it's a man
in the middle, it can

246
00:12:49.210 --> 00:12:53.110
see any unprotected traffic that
you're sending. So there's sort

247
00:12:53.110 --> 00:12:57.820
of a confidentiality risk. It
can manipulate any unpredicted traffic

248
00:12:57.820 --> 00:13:00.430
you're sending. So there's an
integrity risk. It can maybe

249
00:13:01.060 --> 00:13:03.940
change the path or change
the form action of a

250
00:13:03.940 --> 00:13:06.370
log and form. And really
it can, it can pretty

251
00:13:06.370 --> 00:13:09.600
much mess with anything you
send across that connection. Wow.

252
00:13:09.630 --> 00:13:12.120
Okay. But is it, it
is not a wifi point

253
00:13:12.120 --> 00:13:14.370
or it is a wifi
point in the middle. It's

254
00:13:14.370 --> 00:13:17.310
just there to be evil.
Yeah. Correct. It's a wifi

255
00:13:17.340 --> 00:13:18.840
point in the middle. And
in fact, one way you

256
00:13:18.840 --> 00:13:21.000
can use it as just
as a normal wifi access

257
00:13:21.000 --> 00:13:23.670
points. So, you know, to
your earlier example, you could

258
00:13:23.670 --> 00:13:25.950
set it up to have
a, an SSI D that

259
00:13:25.950 --> 00:13:28.740
it broadcast, which just says,
Hey, I'm free wifi. And

260
00:13:28.740 --> 00:13:31.260
if you go somewhere, that's
busy enough with enough people

261
00:13:31.260 --> 00:13:33.840
like a cafe where people
want to sit and browse

262
00:13:34.320 --> 00:13:36.690
and they open up their
wireless connections and they go,

263
00:13:36.690 --> 00:13:39.480
Hey, there's free wifi and
it's not protected. We'll just

264
00:13:39.480 --> 00:13:42.240
jump on that. Now what
they don't realize is that

265
00:13:42.240 --> 00:13:46.350
any services they're connecting to,
whether that be via the

266
00:13:46.350 --> 00:13:49.890
browser, or maybe any apps
talking to backend web services,

267
00:13:50.370 --> 00:13:54.720
if those services don't have
a proper implementation of HTTPS,

268
00:13:55.200 --> 00:13:58.530
then they can be intercepted.
And like they manipulated, Wow,

269
00:13:58.560 --> 00:14:01.200
is this something that I
should, does this only exist?

270
00:14:01.890 --> 00:14:04.290
The pineapple itself will, again,
that the theory is it's

271
00:14:04.290 --> 00:14:07.800
for penetration testers. And I
think it's look, it's really

272
00:14:07.800 --> 00:14:09.870
question of intent. So for
me, I'm not evil with

273
00:14:09.870 --> 00:14:13.020
it for me, I'm using
that to then write about

274
00:14:13.590 --> 00:14:16.920
when you don't follow particular
good practices in your web

275
00:14:16.920 --> 00:14:20.070
development, this is the way
it can be exploited. So

276
00:14:20.070 --> 00:14:23.610
for me, the value proposition
is that this helps materialize

277
00:14:23.610 --> 00:14:25.860
a risk that I think
for many people is very

278
00:14:25.860 --> 00:14:28.140
conceptual. You know, a lot
of people say, Hey, it's

279
00:14:28.140 --> 00:14:30.930
just, you know, we're just
sending some cookies around and

280
00:14:30.930 --> 00:14:33.480
it's not a right CDPs.
Can it really be exploited?

281
00:14:33.660 --> 00:14:35.280
And this is the little
tool that helps me do

282
00:14:35.280 --> 00:14:38.070
that. Now, of course, other
people might go along to

283
00:14:38.070 --> 00:14:40.980
the airport or the coffee
shop and proxy people's traffic

284
00:14:41.010 --> 00:14:43.890
through and capture all the
packets they possibly can and

285
00:14:43.890 --> 00:14:46.740
harvest credentials so that, you
know, there's definitely potential for

286
00:14:46.740 --> 00:14:50.940
misuse. So speaking as a,
as a technical person who

287
00:14:51.140 --> 00:14:53.360
wants to be safe on
the web, and maybe this

288
00:14:53.360 --> 00:14:57.500
is beyond the average Joe
and their abilities, but should

289
00:14:57.500 --> 00:15:00.410
I be using VPN, should
I be paying a VPN

290
00:15:00.440 --> 00:15:03.800
company for security on top
of security? Should I be

291
00:15:03.800 --> 00:15:06.560
VPN back into my home
and then surfing from there,

292
00:15:06.560 --> 00:15:09.950
or purchasing a private network
or even running my own

293
00:15:10.580 --> 00:15:15.340
Linode instance and doing proxying
through that? Yeah. Well, VPNs

294
00:15:15.340 --> 00:15:18.490
is one thing that certainly
fixes this. Well, it, it

295
00:15:18.490 --> 00:15:21.670
fixes it in so far
as if there were websites

296
00:15:21.670 --> 00:15:24.370
that would otherwise leave you
vulnerable. At least if you

297
00:15:24.370 --> 00:15:28.540
have an encrypted network between
your device and an end

298
00:15:28.540 --> 00:15:31.540
point somewhere else, that is
trusted, you know, you've got

299
00:15:31.540 --> 00:15:33.760
that security. So if someone's
sitting there on the wifi

300
00:15:33.790 --> 00:15:35.950
in the middle, they're not
going to be able to

301
00:15:36.250 --> 00:15:38.800
gain access to that traffic.
And certainly there are tools

302
00:15:38.800 --> 00:15:40.810
around, I mean, there are
products like cloak, I've been

303
00:15:40.810 --> 00:15:43.600
hearing a bit about lately,
which is designed to run

304
00:15:43.600 --> 00:15:46.660
on devices, such as eye
phones and tablets and whatever

305
00:15:46.660 --> 00:15:48.880
else it may be, where
you can say, Hey, I'm

306
00:15:48.880 --> 00:15:50.890
going to connect to a
network. And whether I trust

307
00:15:50.890 --> 00:15:52.630
it or not, I'm going
to turn on cloak, turn

308
00:15:52.630 --> 00:15:54.850
on the VPN, and then
we're going to be safe,

309
00:15:55.060 --> 00:15:57.580
at least until it gets
to whatever end point cloak

310
00:15:57.580 --> 00:16:01.420
has somewhere in their own
servers. And isn't that something

311
00:16:01.420 --> 00:16:04.630
like Tor or is cloak
different from tour. Cause cloak

312
00:16:04.630 --> 00:16:06.910
is a paid project. That's
a company that you pay

313
00:16:06.910 --> 00:16:10.750
the money and a tour
is more of a distributed

314
00:16:10.780 --> 00:16:14.410
kind of a elite thing.
Yeah. And, and tools really

315
00:16:14.410 --> 00:16:18.730
more about anonymizing than anything.
So, you know, we particularly

316
00:16:18.730 --> 00:16:22.660
see toy used for political
dissidence or other people wanting

317
00:16:22.660 --> 00:16:25.630
to do evil things where
they really want to obfuscate

318
00:16:25.630 --> 00:16:28.930
identity. And my understanding is
that tour also has some,

319
00:16:29.170 --> 00:16:31.810
some pretty serious limitations in
terms of speed and capacity

320
00:16:31.810 --> 00:16:34.450
as well. So it's, it's
kind of a different use

321
00:16:34.450 --> 00:16:36.640
case, but certainly in, in
the case of where we're

322
00:16:36.640 --> 00:16:40.180
talking about, Hey, I wanna
use, I want to use

323
00:16:40.180 --> 00:16:41.440
it and I'm going to
be cautious of way I

324
00:16:41.440 --> 00:16:43.810
say it. I want to
use a network where I

325
00:16:43.810 --> 00:16:48.310
may not trust everyone between
myself and the target service

326
00:16:48.310 --> 00:16:51.160
that I'm hitting. You know,
that's a good VPN case

327
00:16:51.460 --> 00:16:53.650
and that's not about, I
want to, I want to

328
00:16:53.650 --> 00:16:55.690
hide my identity. It's about,
Hey, I want to protect

329
00:16:55.690 --> 00:17:00.070
my traffic. But if I'm
just using Gmail and connecting

330
00:17:00.070 --> 00:17:04.450
to my work's outlook and
surfing the web, does it

331
00:17:04.450 --> 00:17:06.550
matter if someone's watching? I
mean, if I'm over at

332
00:17:06.580 --> 00:17:09.160
Gmail and I look at
my shirts in the browser

333
00:17:09.160 --> 00:17:11.650
and it looks legit, do
I have anything to worry

334
00:17:11.650 --> 00:17:14.440
about? Well, I mean, this
is what sort of brings

335
00:17:14.440 --> 00:17:17.560
us back around to the
fact that this is really

336
00:17:17.560 --> 00:17:20.710
only a risk that is
exploited when web applications are

337
00:17:20.710 --> 00:17:24.310
not properly protecting the traffic.
And g-mail certainly does a

338
00:17:24.310 --> 00:17:26.470
good job of that. I
mean, these guys do know

339
00:17:26.470 --> 00:17:29.440
a thing or two about
securing web applications, and it's

340
00:17:29.440 --> 00:17:31.750
the same if you're using
outlook.com, it's the same. If

341
00:17:31.750 --> 00:17:36.280
you're using most banks with
some exceptions, you know, it's,

342
00:17:36.280 --> 00:17:39.460
it's not too, not too
bad when you're using applications

343
00:17:39.460 --> 00:17:42.660
that implement things correctly. And
that's the real trick. And

344
00:17:42.690 --> 00:17:44.530
again, why I've even got
the panel to begin with

345
00:17:44.530 --> 00:17:48.100
yet, are we getting our
HTTPS right in our applications

346
00:17:48.100 --> 00:17:52.200
to begin with? Okay. So
what is the, the obvious

347
00:17:52.200 --> 00:17:55.200
thing that a, you know,
some startup who is launched

348
00:17:55.230 --> 00:17:58.080
today, they're taking a break,
they're listening to Hansel minutes

349
00:17:58.080 --> 00:18:00.770
and they forgot to do
it. Yeah. There's a few

350
00:18:00.770 --> 00:18:03.520
common patterns. And you know,
obviously the first one is,

351
00:18:03.520 --> 00:18:06.110
is that when you send
anything of any sensitive nature

352
00:18:06.110 --> 00:18:08.300
across the web, whether you're
sending it to the server

353
00:18:08.300 --> 00:18:10.490
or you're receiving it back
in the other way, you

354
00:18:10.490 --> 00:18:12.890
do want to send that
across a protected connection. So,

355
00:18:13.430 --> 00:18:15.080
you know, if you're not
logging in and seeing a

356
00:18:15.080 --> 00:18:18.110
padlock icon in your address
bar, and that doesn't sort

357
00:18:18.110 --> 00:18:20.570
of light up and show
a valid certificate, you know,

358
00:18:20.570 --> 00:18:22.850
that that would be a
problem, but that's pretty low

359
00:18:22.850 --> 00:18:24.980
hanging fruit. I think most
people tend to get that

360
00:18:24.980 --> 00:18:28.100
right where things start to
be a little bit more

361
00:18:28.100 --> 00:18:30.680
greasier, there's a few patterns
that we seem to keep

362
00:18:30.680 --> 00:18:33.860
seeing again, where people think
they're secure, but they really

363
00:18:33.860 --> 00:18:37.310
pose a risk. And a
really good example is often

364
00:18:37.310 --> 00:18:41.150
you'll see, log on forms
that are loaded over HTTP.

365
00:18:41.300 --> 00:18:44.480
So there is an un-encrypted
connection. And then the form

366
00:18:44.480 --> 00:18:48.050
action is an HTTPS address.
And I'll say a lot

367
00:18:48.050 --> 00:18:50.450
of cases where people sort
of bring this to their

368
00:18:50.450 --> 00:18:52.670
attention. So someone will tweet
a company and say, Hey

369
00:18:52.670 --> 00:18:54.980
guys, you know, you're not
protecting your form and they'll

370
00:18:54.980 --> 00:18:57.290
come back and they'll say,
aha, but we are because

371
00:18:57.320 --> 00:19:00.560
when we post it, your
password is protected when it

372
00:19:00.560 --> 00:19:03.980
is sent to our server.
Now, the problem is, is

373
00:19:03.980 --> 00:19:06.170
that you do not know
that it is actually sent

374
00:19:06.170 --> 00:19:08.810
to them, Right, without doing
a F of a view

375
00:19:08.810 --> 00:19:12.020
source. How could you know?
Well, it's not just that.

376
00:19:12.020 --> 00:19:13.790
So, I mean, let's imagine
that it is sent to

377
00:19:13.790 --> 00:19:16.610
this server and the format
is still the same, but

378
00:19:16.610 --> 00:19:20.780
because that form has been
loaded over HTTP, some man

379
00:19:20.780 --> 00:19:23.450
in the middle and we'll,
let's be gender agnostic. Somebody

380
00:19:23.450 --> 00:19:25.820
in the middle has managed
to inject a script into

381
00:19:25.820 --> 00:19:28.190
that page. And that script
is going to take your

382
00:19:28.190 --> 00:19:30.650
credentials and also send them
off to an attacker's server.

383
00:19:31.280 --> 00:19:34.700
Now, this sounds very hypothetical,
but there was a case

384
00:19:34.700 --> 00:19:36.350
of this. In fact, there
are many cases of one

385
00:19:36.350 --> 00:19:39.380
that was a sort of
very high profile is a

386
00:19:39.380 --> 00:19:41.030
couple of years ago when
there was a lot of

387
00:19:41.120 --> 00:19:45.980
political uprising in Tunisia. Facebook
was still serving log-on forms

388
00:19:45.980 --> 00:19:49.460
over HTTP and posting about
city peers. And there were

389
00:19:49.460 --> 00:19:52.430
cases documented cases. And we
have the script to demonstrate

390
00:19:52.430 --> 00:19:57.530
this where the <inaudible> were
injecting script into that login

391
00:19:57.530 --> 00:20:00.560
page. So people were logging
into Facebook and it seemed

392
00:20:00.560 --> 00:20:03.170
just fine. But what they
didn't realize is that the

393
00:20:03.170 --> 00:20:06.350
page had been manipulated the
login page and their credentials

394
00:20:06.350 --> 00:20:10.700
were being siphoned off to
the side as well. Okay.

395
00:20:10.880 --> 00:20:12.950
So what if I visit
a page and I get

396
00:20:12.950 --> 00:20:16.130
those warnings that I ignore
that say, you know, some

397
00:20:16.130 --> 00:20:18.320
of the things on this
page were not loaded securely.

398
00:20:19.460 --> 00:20:22.130
Yeah. So yeah, this is
the, you know, part of

399
00:20:22.130 --> 00:20:24.290
the problem. I think we
sort of desensitize people a

400
00:20:24.290 --> 00:20:26.540
little bit to warnings at
times because we do see

401
00:20:26.540 --> 00:20:29.840
them so frequently. So that
one you're probably referring to

402
00:20:29.840 --> 00:20:32.960
there is what we'd refer
to as mixed mode, where

403
00:20:32.960 --> 00:20:36.680
you've got both HTTP and
HTTPS on the page. So

404
00:20:36.680 --> 00:20:39.260
let's say for example, you
load a page and it

405
00:20:39.260 --> 00:20:42.680
has an HTTPS address and
the page loads over HTTPS.

406
00:20:43.160 --> 00:20:46.280
Now that gives you confidence
in the integrity of that

407
00:20:46.370 --> 00:20:49.960
page as returned by the
request, I've actually pissed. So

408
00:20:49.960 --> 00:20:54.250
that's fine. Now the page
then goes and puts jQuery

409
00:20:54.250 --> 00:20:57.160
on the page, but it
requests it from the query,

410
00:20:57.580 --> 00:21:00.100
a CDN hosted by Google
and it requests it over

411
00:21:00.100 --> 00:21:03.340
HTTP. Now that's when you
get the warning because the

412
00:21:03.340 --> 00:21:07.540
browser says, although this page
loaded securely, it has got

413
00:21:07.570 --> 00:21:10.510
assets that have been embedded
on the page that weren't

414
00:21:10.510 --> 00:21:14.680
led securely. Now the risk
is particularly with Java script.

415
00:21:15.100 --> 00:21:17.380
You got to ask yourself
if I could control the

416
00:21:17.380 --> 00:21:20.710
Java script on this page
and because it wasn't loaded

417
00:21:20.710 --> 00:21:23.530
securely, I might be able
to do that. What could

418
00:21:23.530 --> 00:21:25.060
I do? So, you know,
if I can control the

419
00:21:25.060 --> 00:21:28.420
JavaScript, I can start accessing
the Dom turning things on

420
00:21:28.420 --> 00:21:32.830
and off grabbing anything from
cookies, changing link pals, or

421
00:21:32.830 --> 00:21:35.050
form actions. You know, you
can do just about anything

422
00:21:35.050 --> 00:21:38.340
if you can control that
JavaScript. Interesting. So does that

423
00:21:38.340 --> 00:21:41.790
mean that I should use
the protocol lists a URL

424
00:21:41.790 --> 00:21:45.030
where instead of saying HTTP
or HTTPS, I say just

425
00:21:45.120 --> 00:21:47.160
slash lash and then I
let the browser figure it

426
00:21:47.160 --> 00:21:51.120
out for newer browsers. Yeah.
So protocol relative URLs are

427
00:21:51.120 --> 00:21:52.830
a good way of fixing
that. So, you know, if

428
00:21:52.830 --> 00:21:54.840
we start looking at it
from the developer side, what

429
00:21:54.840 --> 00:21:59.880
does the developer do? Avoiding
explicit schemes when you're embedding

430
00:21:59.880 --> 00:22:03.690
any contents. So, you know,
rather than saying that my

431
00:22:03.720 --> 00:22:06.930
image source, so my script
source is HTTP comforters Ford

432
00:22:06.930 --> 00:22:09.670
slash like you say, starting
with a whack whack, which

433
00:22:09.670 --> 00:22:13.320
should be a protocol relative
URL, which will then, you

434
00:22:13.320 --> 00:22:15.750
know, you can then reference
another domain. So you can

435
00:22:15.750 --> 00:22:19.410
say, you know, whack, whack,
you know, Google cdn.com and

436
00:22:19.410 --> 00:22:21.660
it will get it over
HTTP when the page, the

437
00:22:21.660 --> 00:22:24.870
parent pages, letter ratio, DP,
or actually DPS, if it's

438
00:22:24.870 --> 00:22:27.900
loaded over a secure connection.
So that's one option. And

439
00:22:27.900 --> 00:22:30.570
then if you're embedding content
from your own site, just

440
00:22:30.570 --> 00:22:33.570
using relative URLs, you know,
starting the path with a

441
00:22:33.570 --> 00:22:36.480
whack and then, you know,
directory and then, then asset

442
00:22:36.480 --> 00:22:39.240
name. So that fixes that.
But the important thing is

443
00:22:39.240 --> 00:22:43.080
to avoid explicitly hard coding
and HTTP address, because that's

444
00:22:43.080 --> 00:22:46.650
where the problem comes from.
I've noticed people talking about

445
00:22:46.950 --> 00:22:51.060
package managers like new get
and gems and NPM, these

446
00:22:51.060 --> 00:22:54.360
package managers that developers use
to go to a central

447
00:22:54.360 --> 00:22:58.470
location, a trusted central location
and, and download some stuff.

448
00:22:59.070 --> 00:23:04.590
And people have complained that,
Oh, well that that's not

449
00:23:04.590 --> 00:23:08.010
using HTTPS. And then the
guys who run the package

450
00:23:08.010 --> 00:23:12.660
manager system will switch that
to use HTTPS, but they're

451
00:23:12.660 --> 00:23:17.670
not checking that it is
in fact, the, the SSL

452
00:23:17.670 --> 00:23:19.920
certificate that they want it.
How important is that if

453
00:23:19.920 --> 00:23:23.100
I'm making a web services
call or a connection to

454
00:23:23.100 --> 00:23:26.550
a location, and I say,
Hey, I, I used HTTPS,

455
00:23:26.580 --> 00:23:29.430
what's the problem, right? I'm
under SSL. How important is

456
00:23:29.430 --> 00:23:34.760
that? Not just certificate revocation,
but certificate identity. Yeah, it's,

457
00:23:34.760 --> 00:23:36.930
it's a good question. And
in fact, I see that

458
00:23:36.930 --> 00:23:39.960
a lot on mobile apps.
So one of the things

459
00:23:39.990 --> 00:23:42.750
that I'll often do from
looking at mobile apps is

460
00:23:42.750 --> 00:23:46.400
our proxy it through Fiddler.
So Fiddler is an HTTP

461
00:23:46.400 --> 00:23:49.550
proxy tool, free product, which
you can run on your

462
00:23:49.550 --> 00:23:53.630
PC, set up your, your,
a wireless device to connect

463
00:23:53.840 --> 00:23:56.810
via that proxy and then
inspect all the traffic that

464
00:23:56.810 --> 00:23:59.600
goes from your wireless device
across the network. So I'll

465
00:23:59.600 --> 00:24:01.730
configure that, and then you'll
fire up an app that

466
00:24:01.730 --> 00:24:04.490
should send out a securely,
but you see this data

467
00:24:04.490 --> 00:24:07.670
appearing in Fiddler because Fiddler
is able to issue its

468
00:24:07.670 --> 00:24:11.390
own self sign certificate. So
it's not a valid certificate

469
00:24:11.390 --> 00:24:14.930
issued by a valid certificate
authority. It's just a way

470
00:24:15.030 --> 00:24:17.780
of, like you say, sort
of keeping an HTTPS connection.

471
00:24:18.530 --> 00:24:21.410
Now, a lot of apps,
like some of the banking

472
00:24:21.410 --> 00:24:24.020
apps, for example, you know,
banks are usually pretty good

473
00:24:24.020 --> 00:24:26.510
at this sort of thing.
They'll basically just drop the

474
00:24:26.510 --> 00:24:28.730
connection on the device. They'll
say, Hey, look, we can't

475
00:24:28.730 --> 00:24:32.090
get through because inevitably they're
validating the certificate. They're making

476
00:24:32.090 --> 00:24:36.140
sure that it is legitimate
for that particular domain. Some

477
00:24:36.140 --> 00:24:38.660
of them will even validate
the signature on the certificate

478
00:24:38.660 --> 00:24:41.300
and make sure that it
actually reconciles to the one

479
00:24:41.300 --> 00:24:43.730
that was originally issued. So
they have sort of a

480
00:24:43.730 --> 00:24:47.000
further verification process, but the
worrying bit is some of

481
00:24:47.000 --> 00:24:51.200
these apps will simply say,
let's make an HTTPS connection,

482
00:24:51.650 --> 00:24:54.410
regardless of what happens with
the certificate. Let's just accept

483
00:24:54.410 --> 00:24:57.050
whatever comes back. Now. I'm
sure that that made it

484
00:24:57.050 --> 00:25:00.350
really easy during development time,
because you could self sign.

485
00:25:00.350 --> 00:25:01.820
You didn't have to worry
about any of this sort

486
00:25:01.820 --> 00:25:05.180
of stuff, but to your
point, it still sort of

487
00:25:05.180 --> 00:25:06.800
allows a man to get
in the middle and say,

488
00:25:06.800 --> 00:25:08.330
Hey, well, I'm just going
to send you whatever else

489
00:25:08.330 --> 00:25:11.030
certificate. I like. And if
your app isn't actually validating

490
00:25:11.030 --> 00:25:14.230
that it's correct, then you've
got a problem. Right? So

491
00:25:14.230 --> 00:25:17.380
in that instance, you're, you're
trusting that the communication is

492
00:25:17.380 --> 00:25:20.170
secure, but you have no
idea who you're talking to.

493
00:25:20.680 --> 00:25:22.690
Yeah, pretty much because all
you're doing is saying, Hey,

494
00:25:22.690 --> 00:25:24.430
it's, it's actually passed. It
must be good, but there's

495
00:25:24.430 --> 00:25:26.530
no, actually, you know, there's
not really a process of

496
00:25:26.530 --> 00:25:29.050
saying is this is the,
a certificate. Good. And that's

497
00:25:29.050 --> 00:25:32.380
something our browsers do by
default. And that's great. But

498
00:25:32.380 --> 00:25:34.390
a lot of the time
with mobile apps, people do

499
00:25:35.050 --> 00:25:36.640
configure them that way. And
I'm sure it's the same,

500
00:25:36.640 --> 00:25:39.160
you know, when we're sort
of connecting through the package

501
00:25:39.160 --> 00:25:41.860
managers, if there's not an
explicit process of saying, Hey,

502
00:25:41.860 --> 00:25:44.290
are we happy with this
certificate? That's one, we've got

503
00:25:44.290 --> 00:25:47.470
a problem. It seems like
it's a, it's a problem

504
00:25:47.470 --> 00:25:50.920
with HTTPS and SSL as
a concept for the users

505
00:25:50.950 --> 00:25:56.860
that they think it means
security. And it means privacy.

506
00:25:57.520 --> 00:25:59.630
And trying to explain that
to a user is, is

507
00:25:59.740 --> 00:26:03.370
pretty difficult. You know, I
look at it as, as

508
00:26:03.370 --> 00:26:05.740
meaning several different things and
this probably doesn't make it

509
00:26:05.740 --> 00:26:08.890
a whole lot easier for
users either. But the sort

510
00:26:08.890 --> 00:26:10.060
of the first way I
look at it is that

511
00:26:10.060 --> 00:26:13.390
it is authenticity. So if
we can get a valid

512
00:26:13.390 --> 00:26:16.720
certificate back and we can
expect it, inspect it, and

513
00:26:16.720 --> 00:26:18.640
we know that it's issued
by the site that we're

514
00:26:18.640 --> 00:26:21.330
connecting to it, you know,
it's got their, their information,

515
00:26:21.340 --> 00:26:24.490
the certificate that gives us
confidence of who we're connecting

516
00:26:24.490 --> 00:26:27.490
to. So there's your, your
authenticity. The other side is

517
00:26:27.490 --> 00:26:31.060
the integrity. So, you know,
moving beyond just privacy, how

518
00:26:31.060 --> 00:26:33.670
can I have confidence that
the information on the page

519
00:26:33.670 --> 00:26:36.610
hasn't been changed now that
doesn't always mean that it's

520
00:26:36.610 --> 00:26:39.310
going to be sensitive information.
It may just simply be

521
00:26:39.310 --> 00:26:41.680
that we want to have
a high degree of confidence

522
00:26:41.770 --> 00:26:44.160
as a website owner. And
maybe you can sort of

523
00:26:44.160 --> 00:26:46.730
pick some government examples. You
know, it could be a

524
00:26:46.740 --> 00:26:49.690
case for this where the
data hasn't been manipulated. So

525
00:26:49.710 --> 00:26:52.260
since an integrity piece as
well, and then there's the

526
00:26:52.260 --> 00:26:54.420
third piece, which is what
you've just mentioned in terms

527
00:26:54.420 --> 00:26:56.760
of privacy as well. And
I think that's what most

528
00:26:56.760 --> 00:26:58.920
people expect to see from
it. They expect to see

529
00:26:58.920 --> 00:27:02.610
privacy, but there is also
this assumption, like you say,

530
00:27:02.610 --> 00:27:05.730
where if I can see
a padlock in the address

531
00:27:05.730 --> 00:27:09.720
bar, that means we have
security and it's, it's really

532
00:27:09.720 --> 00:27:12.360
a little bit misleading and
it's kind of a difficult

533
00:27:12.360 --> 00:27:14.550
concept to explain to people
too, isn't it where, Hey,

534
00:27:14.550 --> 00:27:18.300
look, it actually means these
very particular technical constructs. It

535
00:27:18.300 --> 00:27:21.030
doesn't mean that everything you
do on this website is

536
00:27:21.030 --> 00:27:24.560
going to be super safe.
Right? Right. Well, people watch,

537
00:27:25.100 --> 00:27:28.280
you know, layman's watch spy
movies and someone says, is

538
00:27:28.280 --> 00:27:31.220
this a secure line? You
know, they're not saying, does

539
00:27:31.220 --> 00:27:34.940
this line have to have
security, integrity, privacy? It's, you

540
00:27:34.940 --> 00:27:36.410
know, they just, Oh, it's
a secure line. So we're

541
00:27:36.410 --> 00:27:40.370
cool. And I remember when
a browser toolbars and browser

542
00:27:40.370 --> 00:27:43.340
address bar has turned green,
you know, about 10 years

543
00:27:43.340 --> 00:27:48.110
ago in the high, Hi,
I trust what was the

544
00:27:48.110 --> 00:27:52.100
name of those Evie SSL?
The extended validation certificates. Yeah.

545
00:27:52.130 --> 00:27:56.150
Yes. Extended validation. And I
remember myself personally going to

546
00:27:56.150 --> 00:27:59.960
banks all over the U
S convincing them that they

547
00:27:59.960 --> 00:28:03.320
needed to get those certificates.
They're super expensive. And they,

548
00:28:03.320 --> 00:28:07.070
they basically involve someone visiting
your, your data center and

549
00:28:07.070 --> 00:28:08.840
proving that you're real people.
And there's a lot of

550
00:28:08.840 --> 00:28:11.900
faxing. And just generally going
around that around to prove

551
00:28:11.900 --> 00:28:14.810
that you're who you say
you are, but I feel

552
00:28:14.810 --> 00:28:17.180
like other than the large,
you know, kind of the

553
00:28:17.180 --> 00:28:20.420
top 100 sites plus banks,
most people don't take the

554
00:28:20.420 --> 00:28:22.760
time to get those certificates.
So they're really quite useless.

555
00:28:22.940 --> 00:28:25.130
Yeah. It's a funny thing.
Actually. I heard someone say

556
00:28:25.130 --> 00:28:27.800
recently that the extended validation
certificates were getting a lot

557
00:28:27.800 --> 00:28:30.020
cheaper and it's a little
bit odd because like you

558
00:28:30.020 --> 00:28:32.870
say, there's a sort of
a very extensive identity verification

559
00:28:32.870 --> 00:28:36.080
process that you go through
with that. But then on

560
00:28:36.080 --> 00:28:38.420
the other hand, SSL itself
is getting a lot cheaper.

561
00:28:38.420 --> 00:28:40.580
I mean, you can go
to somewhere like start SSL

562
00:28:40.580 --> 00:28:44.210
now and literally get a
free SSL certificate. So I

563
00:28:44.210 --> 00:28:46.670
guess it stands to reason
that the visa it's maybe

564
00:28:46.670 --> 00:28:49.550
coming down a bit in
price as well, which Is

565
00:28:49.550 --> 00:28:51.530
a good thing or a
bad thing. I mean, if

566
00:28:51.530 --> 00:28:53.660
it's, if it's easy to
prove that I am someone,

567
00:28:54.050 --> 00:28:56.870
perhaps I'll just prove that
I'm a Microsoft except I'll

568
00:28:56.870 --> 00:29:00.260
misspell. Yeah. So I guess
it's a question of, does

569
00:29:00.260 --> 00:29:03.260
the reduction in price indicate
that there's a reduction in

570
00:29:03.260 --> 00:29:05.480
due diligence or is it
simply that they're being more

571
00:29:05.480 --> 00:29:08.690
competitive and you know, now
it's more highly available to

572
00:29:08.690 --> 00:29:10.910
a broader range of people,
which I guess if it's

573
00:29:10.910 --> 00:29:13.700
done right. Is a good
thing, but like you say,

574
00:29:13.700 --> 00:29:15.260
you know, we, we don't
want to sort of make

575
00:29:15.260 --> 00:29:18.320
it easy for people to
go in and spoof identities

576
00:29:18.320 --> 00:29:20.960
or claim to be people
that they are not right.

577
00:29:21.380 --> 00:29:23.420
I mean, I would like
as the, kind of the

578
00:29:23.420 --> 00:29:29.120
owner of hanselman.com to give
visitors a sense of appreciation

579
00:29:29.120 --> 00:29:32.120
of my effort or a
sense of, Hey, I guess

580
00:29:32.120 --> 00:29:34.820
he doesn't understand security and
wants me to feel secure.

581
00:29:35.720 --> 00:29:37.700
I would love to put
the whole thing under SSL

582
00:29:37.730 --> 00:29:40.920
and under Evie SSL. But
does that provide value to,

583
00:29:40.960 --> 00:29:43.670
to a blog owner? You
know, I know that I

584
00:29:43.720 --> 00:29:47.080
see security consultants tend to
use PGP certificates and they

585
00:29:47.080 --> 00:29:50.530
sign their email and I'm
always impressed simply because of

586
00:29:50.530 --> 00:29:52.360
the amount of effort required
to get it to work

587
00:29:52.360 --> 00:29:55.930
correctly. Not because necessarily that
I'm talking to, you know,

588
00:29:55.940 --> 00:29:58.360
that I care about the
little, the little cert, I

589
00:29:58.360 --> 00:30:01.000
just go, Oh, wow. That
person jumped through the hoops

590
00:30:01.000 --> 00:30:04.120
in order to get this,
this little ribbon to show

591
00:30:04.120 --> 00:30:07.290
up in his email. I
just wish I had things

592
00:30:07.290 --> 00:30:10.050
that were impressive enough in
my email to require that

593
00:30:10.050 --> 00:30:13.620
sort of encryption. But, you
know, the blog sites is

594
00:30:13.620 --> 00:30:15.930
an interesting one. And certainly
it's been asked of me

595
00:30:15.930 --> 00:30:17.460
a few times, you know,
Hey, you keep writing that

596
00:30:17.470 --> 00:30:20.700
SSL, but look at your
blog, it's all HTTP. And

597
00:30:20.700 --> 00:30:24.210
it's, you know, look, it
is a good question. And

598
00:30:24.210 --> 00:30:25.950
I, I, I did actually
have a good think about

599
00:30:25.950 --> 00:30:28.200
it. I thought, well, you
know, look, there's an integrity

600
00:30:28.200 --> 00:30:30.750
question. Okay. So people could
actually change what's on my

601
00:30:30.750 --> 00:30:34.230
blog. You know, really how
are you going to commoditize

602
00:30:34.230 --> 00:30:36.180
that you can only get,
you know, you can only

603
00:30:36.180 --> 00:30:38.130
sort of be a man
in the middle in certain

604
00:30:38.130 --> 00:30:40.650
locations. If you get, you
know, a few people at

605
00:30:40.650 --> 00:30:42.750
a conference on the wifi,
it's not going to exactly

606
00:30:42.750 --> 00:30:46.290
be a big deal. Nobody's
sort of submitting things that

607
00:30:46.290 --> 00:30:49.590
are sensitive. The best I
could come up with was

608
00:30:49.620 --> 00:30:54.090
I used discuss comments on
my blog and discuss, does

609
00:30:54.090 --> 00:30:58.230
seem to send their authentication
cookies backwards and forwards in

610
00:30:58.230 --> 00:31:00.330
the clear, which has a
bit of a risk, but

611
00:31:00.350 --> 00:31:03.270
this is something that discussed
needs to fix as well.

612
00:31:03.630 --> 00:31:05.610
You know, it's something that
sort of falls back to

613
00:31:05.610 --> 00:31:07.860
them. Hmm. It would be
interesting to see if you

614
00:31:07.860 --> 00:31:10.860
use protocol relative URLs to
load discuss, do they have

615
00:31:10.860 --> 00:31:14.460
a valid certificate? So if
you use SSL, would things

616
00:31:14.460 --> 00:31:17.520
work themselves out? Yeah, that
would be a good question

617
00:31:17.520 --> 00:31:19.260
that may, may well happen.
And of course you could

618
00:31:19.260 --> 00:31:21.900
just embed discuss over HTTPS
and see what it does

619
00:31:21.900 --> 00:31:24.570
as well. So that, that
would be a good question.

620
00:31:25.620 --> 00:31:27.540
I mean, the other thing
is, you know, look, if

621
00:31:27.540 --> 00:31:29.970
you're going to go to
SSL, it's a question of,

622
00:31:30.120 --> 00:31:31.860
you know, many of us
like myself. I mean, I

623
00:31:31.860 --> 00:31:34.740
run on blogger, for example,
I'm not sure that blogger

624
00:31:34.740 --> 00:31:37.470
actually has the facilities to
support that. So short of

625
00:31:37.470 --> 00:31:40.350
me going to a blogging
platform, I can run myself

626
00:31:40.350 --> 00:31:42.660
and wake it up on
energy or site and put

627
00:31:42.660 --> 00:31:44.700
my own certificate on it.
You know, you've got to

628
00:31:44.700 --> 00:31:47.340
get support from the other
players that are involved in

629
00:31:47.340 --> 00:31:49.920
the, in the blog Indeed.
And all of this requires

630
00:31:49.920 --> 00:31:53.010
effort. I think that's the
takeaway that you need to

631
00:31:53.010 --> 00:31:54.930
at least put thought into
it. So if you're choosing

632
00:31:54.960 --> 00:31:58.140
not to do something that
you know, why you chose

633
00:31:58.140 --> 00:32:00.060
not to, and it was
a conscious decision and not

634
00:32:00.060 --> 00:32:03.570
simply one of laziness. Yeah.
I think that really nails

635
00:32:03.570 --> 00:32:05.430
it and, and you know,
a really good example of

636
00:32:05.430 --> 00:32:09.240
that is stack overflow. So
stack overflow, who many of

637
00:32:09.240 --> 00:32:12.570
your listeners probably use pretty
religiously like myself when you

638
00:32:12.570 --> 00:32:14.700
log on, particularly when you
log on with one of

639
00:32:14.700 --> 00:32:17.520
the third party authentication providers,
everything is secure and that's

640
00:32:17.520 --> 00:32:19.680
all great. And then you
get back to stack overflow

641
00:32:19.680 --> 00:32:23.460
and it's all over HTTP.
So your stack overflow authentication

642
00:32:23.460 --> 00:32:26.400
cookie for example, is HTTP.
If you get a man

643
00:32:26.400 --> 00:32:29.070
in the middle, while you're
browsing stack overflow, they can

644
00:32:29.100 --> 00:32:33.030
copy that cookie and they
can become you. So vote

645
00:32:33.150 --> 00:32:35.700
things, leave ridiculous comments, you
know, I can do whatever

646
00:32:35.700 --> 00:32:38.550
they want. Now in a
case like that, the guys

647
00:32:38.610 --> 00:32:43.040
understand absolutely 100% what the
risk is and what's involved

648
00:32:43.490 --> 00:32:47.090
in moving from HTTP to
HTTPS. So, you know, I

649
00:32:47.090 --> 00:32:49.250
think that's a good example
of where they've made a

650
00:32:49.250 --> 00:32:52.790
very conscious decision about what
would be involved. And in

651
00:32:52.790 --> 00:32:55.160
fact, Nick Craver from stack
overflow wrote a post just

652
00:32:55.160 --> 00:32:57.050
a few weeks ago. He
talks about all of the

653
00:32:57.050 --> 00:32:59.750
things that need to fall
into place for a sort

654
00:32:59.750 --> 00:33:03.470
of top 200 website, like
theirs to move. So, you

655
00:33:03.470 --> 00:33:05.360
know, they've got to get
all their third party content

656
00:33:05.360 --> 00:33:08.200
providers to make sure that
things like ads and avatars

657
00:33:08.200 --> 00:33:11.630
and any inline videos or
images or circular rate CPS,

658
00:33:11.630 --> 00:33:14.630
they've got to consider CDNs
and load balances and multiple

659
00:33:14.630 --> 00:33:16.970
domains. I mean, there's a
whole lot of work and

660
00:33:16.970 --> 00:33:18.470
it sounds like those guys
are going to go down

661
00:33:18.470 --> 00:33:21.590
that path anyway, but at
least it's a conscious process.

662
00:33:21.650 --> 00:33:23.570
You know, it's not just
sort of, we did this

663
00:33:23.570 --> 00:33:26.980
because we didn't know. Wow.
Well, you can read about

664
00:33:26.980 --> 00:33:29.560
all of these exploits and
ideas and things that Troy

665
00:33:29.590 --> 00:33:34.010
is thinking about and security@troyhunt.com.
Thanks for chatting with me

666
00:33:34.040 --> 00:33:37.150
again. Thanks very much, Scott.
This has been another episode

667
00:33:37.150 --> 00:33:39.400
of Hansel minutes and we'll
see you again next week.

