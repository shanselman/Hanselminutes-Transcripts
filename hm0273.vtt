WEBVTT FILE

1
00:00:12.050 --> 00:00:17.330
From Hansel minutes.com it's Hansel
minutes or weekly discussion with

2
00:00:17.330 --> 00:00:22.250
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:22.250 --> 00:00:28.130
show number two 73. Recorded
live Thursday, June 30th, 2011. Support for

4
00:00:28.130 --> 00:00:32.330
Hanselman is provided by Tellerik
rad controls, the most comprehensive

5
00:00:32.330 --> 00:00:36.170
suite of components for windows
forms and asp.net web applications

6
00:00:36.590 --> 00:00:43.850
online@wwwdottdlerik.com. Can you miss episode,
Scott talks with open source

7
00:00:43.850 --> 00:00:47.420
developers, Anthony vendor horn, and
Nick Molnar about the glimpse

8
00:00:47.420 --> 00:00:52.130
project. Hi, this is Scott
Hanselman. This is another episode

9
00:00:52.130 --> 00:00:55.370
of Hansel minutes. And today
it's the glimpse guys. We've

10
00:00:55.370 --> 00:00:57.830
got Anthony van horn and
Nick Molnar on the phone

11
00:00:58.280 --> 00:01:03.320
talking to us about glimpse.
How's it going guys? I

12
00:01:03.320 --> 00:01:05.750
am fantastic. Cause I'm talking
to you guys. My favorite

13
00:01:05.750 --> 00:01:09.290
open source people. I met
you guys, where was that?

14
00:01:09.290 --> 00:01:12.860
Was that mixed? So we
met Las Vegas at the

15
00:01:12.860 --> 00:01:16.940
opensource Fest that mix that
2001. Absolutely brilliant. Yeah, the

16
00:01:16.940 --> 00:01:20.540
opensource Fest was fantastic because
that was John Papa's a

17
00:01:20.570 --> 00:01:23.030
little party that he had
that I personally thought was

18
00:01:23.030 --> 00:01:25.130
going to be very small.
And then when I showed

19
00:01:25.130 --> 00:01:28.820
up, it was full of
just tables and tables and

20
00:01:28.820 --> 00:01:31.610
tables of really, really cool
open source projects. And I

21
00:01:31.610 --> 00:01:37.040
saw finger tracking on connect
and I saw profilers and

22
00:01:37.040 --> 00:01:40.190
libraries and Jason parsers and
all this kind of stuff.

23
00:01:40.220 --> 00:01:45.290
And then Phil hack grabs
me and says, Oh dude,

24
00:01:45.290 --> 00:01:47.300
because he talks like that,
Oh dude, you have to

25
00:01:47.300 --> 00:01:49.880
see this. Oh my goodness.
And I ran over and

26
00:01:49.880 --> 00:01:52.190
he says, check this out.
And then he starts showing

27
00:01:52.190 --> 00:01:57.320
me some stuff that looks
like Firebug basically, he opens

28
00:01:57.320 --> 00:02:00.860
up a pain on his
browser and starts clicking around

29
00:02:00.860 --> 00:02:02.960
on tabs. And I'm like,
okay, that's lovely. You're showing

30
00:02:02.960 --> 00:02:08.150
me Firebug and then he
starts selecting texts over it.

31
00:02:08.150 --> 00:02:10.730
Like he, he selects text
on the webpage and then

32
00:02:10.850 --> 00:02:13.730
drags into that div. And
then I realized that I

33
00:02:13.730 --> 00:02:16.100
was looking at something that
was implemented entirely on the

34
00:02:16.100 --> 00:02:20.240
client side and then my
brain exploded and it leaked

35
00:02:20.240 --> 00:02:23.540
out of my ears and
we all started yelling. And

36
00:02:23.540 --> 00:02:27.740
then you explained what it
was. So one of you

37
00:02:27.740 --> 00:02:29.180
guys, I don't know if
you're in the same room,

38
00:02:29.180 --> 00:02:33.050
maybe you can decide, explain
to me the elevator pitch

39
00:02:33.080 --> 00:02:38.060
for what glimpse is. Sure.
So the elevator pitch for

40
00:02:38.060 --> 00:02:43.700
glimpse is basically a way
to understand what's happening in

41
00:02:43.700 --> 00:02:46.700
your web application, kind of
on the server. So, so

42
00:02:46.700 --> 00:02:49.370
Firebug is a good analogy
from a UI perspective, it

43
00:02:49.370 --> 00:02:53.000
looks very similar and a
Firebug does a similar job.

44
00:02:53.450 --> 00:02:55.640
It gives you information about
what's happening on the client

45
00:02:55.640 --> 00:02:59.380
side, your HTML, your Java
script, your styles limps will

46
00:02:59.380 --> 00:03:02.080
tell you that same kind
of information about server side

47
00:03:02.080 --> 00:03:06.820
considerations, such as which views
are being picked up from

48
00:03:06.820 --> 00:03:09.580
your view engine, if you're
using MVC or what the

49
00:03:09.580 --> 00:03:13.000
request data was, or some
information about your environment, like

50
00:03:13.000 --> 00:03:15.760
what process that's running in
or your configuration. So we

51
00:03:15.760 --> 00:03:19.150
get lots of rich information
that helps us to bug

52
00:03:19.150 --> 00:03:21.520
and diagnose certain issues that
you might have with a

53
00:03:21.520 --> 00:03:24.640
website, or even just find
ways that you can tweak

54
00:03:24.640 --> 00:03:29.490
and performance enhance what's going
on in your site. And

55
00:03:29.520 --> 00:03:31.740
when I saw glimpse for
the first time, I noticed

56
00:03:31.740 --> 00:03:33.600
that there was a whole
series of tabs and then

57
00:03:33.600 --> 00:03:35.940
I clicked on a couple.
And at the time I

58
00:03:35.940 --> 00:03:38.790
was told by the tool
that these things were not

59
00:03:38.790 --> 00:03:43.950
implemented, is it what's the
plugin architecture underneath? Yeah. So

60
00:03:43.980 --> 00:03:47.100
basically what we've got is
out of the box, we've

61
00:03:47.100 --> 00:03:50.010
tried to think of what,
what plugins would be the

62
00:03:50.010 --> 00:03:54.180
most useful for someone who's
working on the, let's say

63
00:03:54.180 --> 00:03:58.890
asp.net platform, because that's what
we decided to target first

64
00:03:59.340 --> 00:04:01.800
and out of the box,
because we both do a

65
00:04:01.800 --> 00:04:04.320
lot of MVC. It was
kind of like we're thinking,

66
00:04:04.320 --> 00:04:06.480
wow, wouldn't it be cool
if we could see, you

67
00:04:06.480 --> 00:04:09.660
know, routes directly in the,
in the browser, you know,

68
00:04:09.690 --> 00:04:12.420
within the context of the
requests that we've just made

69
00:04:12.720 --> 00:04:14.430
or wouldn't it be cool
if we could actually see

70
00:04:14.430 --> 00:04:19.650
the execution pipeline because as
of MVC three, the pipeline

71
00:04:19.650 --> 00:04:22.920
is actually, it can be
quite dynamic in terms of

72
00:04:22.920 --> 00:04:26.340
you've got filters coming into
the equation and, you know,

73
00:04:26.340 --> 00:04:28.800
at a page level at
a global level or a

74
00:04:28.800 --> 00:04:32.010
control level. Sorry. And so
just trying to get an

75
00:04:32.010 --> 00:04:34.830
overall picture of what's actually
going on, it can be

76
00:04:34.830 --> 00:04:38.550
quite tough. And for the
ones that weren't implemented at

77
00:04:38.550 --> 00:04:41.700
that time, probably the trickiest
one for us more from

78
00:04:41.700 --> 00:04:45.210
a UI perspective was a
binding tab. And that was

79
00:04:45.210 --> 00:04:48.750
the primary one that we
had not implemented yet. But

80
00:04:48.750 --> 00:04:51.570
since then, we've actually an,
probably a couple of weeks

81
00:04:51.570 --> 00:04:55.470
after the open opensource we
managed to, I think, get

82
00:04:55.470 --> 00:04:58.500
the UI right on that
one. And so, yeah, that's,

83
00:04:58.510 --> 00:05:01.470
that's what we managed to
implant. And so really everything

84
00:05:01.470 --> 00:05:04.770
that you see there to
date is kind of like,

85
00:05:04.830 --> 00:05:08.250
you know, what have we
found useful in our day

86
00:05:08.250 --> 00:05:11.850
to day jobs? And what
do we think other people,

87
00:05:11.850 --> 00:05:16.350
you know, would find useful
in that context, in terms

88
00:05:16.350 --> 00:05:20.460
of a plugin architecture, we
really wanted to kind of

89
00:05:20.460 --> 00:05:22.740
come up with something that
was really simple, even from

90
00:05:22.740 --> 00:05:24.780
our point of view, because
we have been experimenting with

91
00:05:24.870 --> 00:05:27.750
at the time with different
data that we wanted to

92
00:05:27.750 --> 00:05:33.210
show, you know, different contexts
data. And, you know, I

93
00:05:33.210 --> 00:05:35.280
think it was Nick who
came up with a great

94
00:05:35.280 --> 00:05:39.120
idea that, you know, why
don't we use math? And

95
00:05:39.150 --> 00:05:42.450
it was kind of like
brilliant because then what we

96
00:05:42.450 --> 00:05:45.140
could do is we could
just get people to implement

97
00:05:45.180 --> 00:05:49.320
the standard interface, which is
dead simple. Basically you receive

98
00:05:49.320 --> 00:05:54.690
a HTP context and you
return an object and that's

99
00:05:54.690 --> 00:05:57.530
it. So you can do
whatever you want with height,

100
00:05:57.530 --> 00:06:00.950
speed context. And remember, this
is just on the.net platform.

101
00:06:01.460 --> 00:06:05.720
This is the implementation details
on the.net platform. Will you,

102
00:06:05.720 --> 00:06:09.110
do you like, for instance,
in a routing situation for

103
00:06:09.110 --> 00:06:12.320
routing time, you know, we
just look at, we pull

104
00:06:12.320 --> 00:06:15.350
out all the routing information
that we need and then,

105
00:06:15.380 --> 00:06:18.860
you know, send that, put
that into a dictionary structure,

106
00:06:18.920 --> 00:06:23.150
a structure or an array
structure and return it. And

107
00:06:23.150 --> 00:06:26.300
that's it. The rest of
the grip glimpse framework picks

108
00:06:26.300 --> 00:06:29.140
that up. Okay. Let's, let's
do this, let's back up

109
00:06:29.170 --> 00:06:32.320
a little bit and think
about the, how this thing

110
00:06:32.320 --> 00:06:36.430
is architected and generally how
it works. So what I

111
00:06:36.430 --> 00:06:38.350
do is I go file
new project and I make

112
00:06:38.350 --> 00:06:42.100
an asp.net MVC application. I
go into new get, and

113
00:06:42.100 --> 00:06:45.630
I say, install, package. And
I just say glimpse, right?

114
00:06:45.700 --> 00:06:47.350
Do I have to say
glimpse dot MVC or something?

115
00:06:48.640 --> 00:06:51.940
So you have the choice
where we're leveraging the dependencies

116
00:06:52.420 --> 00:06:54.550
features of new gets. So
you can do just limbs

117
00:06:54.580 --> 00:06:58.000
if you're using a web
forms, projects or Winston <inaudible>,

118
00:06:58.270 --> 00:07:00.070
if you're doing an MBC
project and that will pull

119
00:07:00.070 --> 00:07:03.310
down the dependency on, on
glimpse by itself, which is

120
00:07:03.310 --> 00:07:07.930
kind of the core engine.
We we'd like to think

121
00:07:07.930 --> 00:07:11.650
of NBC as a plugin
pack that adds additional tabs.

122
00:07:12.040 --> 00:07:14.920
And we, we, we could
foresee us and other people

123
00:07:14.950 --> 00:07:18.340
shipping additional plugin packs to
add more on top of

124
00:07:18.340 --> 00:07:23.620
the framework. Okay. So then
I run my application and

125
00:07:23.620 --> 00:07:25.750
it looks the same, right.
I don't really do I

126
00:07:25.750 --> 00:07:27.730
do I know right off
the bat that I've installed

127
00:07:27.730 --> 00:07:30.040
glimpse, even if I've just
installed it and hit run

128
00:07:30.190 --> 00:07:33.490
or do I have to
turn it on? No. So

129
00:07:33.490 --> 00:07:35.260
that's a good, a great
question. So, so we have

130
00:07:35.260 --> 00:07:37.210
to turn it on. So
we made the decision that

131
00:07:37.210 --> 00:07:40.960
this kind of information, this
diagnostics information that we're showing

132
00:07:41.200 --> 00:07:44.080
shouldn't be there on every
request. It does represent a

133
00:07:44.080 --> 00:07:47.980
minimal amount of overhead for
the request. So we wanted

134
00:07:47.980 --> 00:07:51.070
to find a way that
the, the requester or the

135
00:07:51.070 --> 00:07:54.160
user of the site would
say specifically to give me

136
00:07:54.160 --> 00:07:57.550
this information on every request.
So the way that we've

137
00:07:57.550 --> 00:08:01.150
done that is we actually
use a cookie. And so

138
00:08:01.150 --> 00:08:03.850
it makes setting that cookie
really easily, really easy for

139
00:08:03.850 --> 00:08:08.710
you. We have a HTTP
handler called glimpse about D

140
00:08:09.100 --> 00:08:11.680
so you can browse to
glimpse study XD after you've

141
00:08:11.680 --> 00:08:14.320
installed glimpse to be a
nugget. And there's a giant

142
00:08:14.320 --> 00:08:16.900
button right there that says,
turn glimpse on. That's simply

143
00:08:16.900 --> 00:08:19.180
setting a cookie for you.
Once you go back to

144
00:08:19.180 --> 00:08:22.090
your website, you'll then see
the little, little evil eyes

145
00:08:22.090 --> 00:08:24.700
staring at you of glimpse
that has all the information

146
00:08:24.700 --> 00:08:27.790
that you're Okay. And by
the evil lie, you mean

147
00:08:27.790 --> 00:08:30.040
that there's, there's literally this
kind of little picture of

148
00:08:30.040 --> 00:08:32.110
an eye. It's an all
seeing eye that sits in

149
00:08:32.110 --> 00:08:35.110
the corner of the, of
the browser. And this is

150
00:08:35.110 --> 00:08:37.720
a div, right? This is
a little piece of HTML

151
00:08:37.750 --> 00:08:40.960
and some JavaScript that's been
injected into the page. So

152
00:08:40.960 --> 00:08:44.380
my page should work as
before it shouldn't work any

153
00:08:44.380 --> 00:08:49.150
differently, but you've changed it
dynamically. You've you've done something

154
00:08:49.150 --> 00:08:52.330
on the server side to
inject something in that has

155
00:08:52.330 --> 00:08:56.400
then presented itself on the
client side. Yeah, exactly. So

156
00:08:56.460 --> 00:09:02.010
on the end of the
request, we actually append what

157
00:09:02.010 --> 00:09:06.720
it is we need, which
is just again, through, through

158
00:09:06.750 --> 00:09:10.920
some extension work that was
done with glimpse today, XD

159
00:09:11.010 --> 00:09:13.860
you can actually, if you
just go glimpse today, you

160
00:09:13.860 --> 00:09:17.430
get the configuration page, but
if you go glimpse X,

161
00:09:17.440 --> 00:09:21.090
the question Mark, and use
the query string, we actually

162
00:09:21.150 --> 00:09:25.770
serve up other assets through
that same ASD. And so

163
00:09:25.770 --> 00:09:28.800
in this case, when we
see that the request is

164
00:09:28.800 --> 00:09:32.850
finishing up, we actually inject
lines of JavaScript that we

165
00:09:32.850 --> 00:09:37.710
need to load a glimpse
up. So what you'll actually

166
00:09:37.710 --> 00:09:41.400
see if you've used source
on your request is dynamically

167
00:09:41.430 --> 00:09:47.400
added this HTML, the HTML
elements that will get your

168
00:09:47.400 --> 00:09:50.790
browser to load up glimpse
into the end of your

169
00:09:50.790 --> 00:09:56.670
request. And once that's there
and the client finishes loading,

170
00:09:57.930 --> 00:10:01.200
we use jQuery to detect
when the page is finished

171
00:10:01.200 --> 00:10:05.550
loading, and then we will
add up points. We render

172
00:10:05.550 --> 00:10:11.730
it. And from, from an
architectural standpoint on the client,

173
00:10:11.850 --> 00:10:15.450
the glimpse client is just
a really fancy renderer. I

174
00:10:15.690 --> 00:10:17.340
really think that's the best
way to look at it.

175
00:10:17.340 --> 00:10:19.650
So what we've done is
when we send down the

176
00:10:19.650 --> 00:10:23.160
data from the server of,
let's say the payload, which

177
00:10:23.160 --> 00:10:26.110
is the data that you
want to see, it's, it's

178
00:10:26.150 --> 00:10:30.750
just adjacent or adjacent structure.
It's just J Jason data.

179
00:10:31.290 --> 00:10:35.100
And from that, what we
do is we interpret that

180
00:10:35.100 --> 00:10:39.390
data and render the UI
based on the data structures

181
00:10:39.390 --> 00:10:43.590
that you've used. And that's
what's going on under the

182
00:10:43.590 --> 00:10:45.510
sea, under the hoods on
the client. If that makes

183
00:10:45.510 --> 00:10:50.300
sense. Okay. How does this
div, that renders prevent? I

184
00:10:50.300 --> 00:10:52.880
mean, how do you not
mess up other things? One

185
00:10:52.880 --> 00:10:54.350
of the things that I've
always been surprised about with

186
00:10:54.350 --> 00:10:57.290
glimpses, that I haven't had
any trouble with the different

187
00:10:57.290 --> 00:10:59.750
versions of jQuery that I
use. And I also haven't

188
00:10:59.750 --> 00:11:04.190
noticed that it looks right
everywhere. I mean, somehow no

189
00:11:04.190 --> 00:11:07.070
matter what I'm doing from
a markup perspective, you're not

190
00:11:07.070 --> 00:11:09.740
screwing up my markup and
I'm not screwing up yours.

191
00:11:09.890 --> 00:11:13.130
How, how is that possible?
Yeah, that was a lot

192
00:11:13.130 --> 00:11:17.480
of fun. It wasn't easy.
So to get an initial

193
00:11:17.480 --> 00:11:22.190
cut for the open source
test, we managed to do

194
00:11:22.220 --> 00:11:27.260
reasonably well, but when we've
gone to the plethora of

195
00:11:27.290 --> 00:11:31.250
different websites out there and
we see what people are

196
00:11:31.250 --> 00:11:35.650
actually doing and what they're
doing with their styles, we've

197
00:11:35.650 --> 00:11:38.120
had a pretty tough time.
So what you just to

198
00:11:38.150 --> 00:11:40.040
back up a little bit
and add a little bit

199
00:11:40.040 --> 00:11:43.610
of a story to this,
essentially, when we were looking

200
00:11:43.610 --> 00:11:47.750
at how we wanted to
display the UI originally, we're

201
00:11:47.750 --> 00:11:51.590
actually going to do it
as a Firebug plugin. And

202
00:11:51.980 --> 00:11:54.820
when we were doing that
thought, there was several benefits

203
00:11:54.820 --> 00:11:56.830
to that. The fact that
we wouldn't have to create

204
00:11:56.830 --> 00:12:00.520
any base infrastructure, we were
leveraging something that people already

205
00:12:00.520 --> 00:12:05.020
knew. And, you know, the
majority of web developers use

206
00:12:05.020 --> 00:12:07.900
five again anyway, and that
was a pretty rich platform

207
00:12:07.900 --> 00:12:11.620
to build on. But when
we're actually sitting down and

208
00:12:11.620 --> 00:12:14.890
actually looking to create the
plugin, maybe it was just,

209
00:12:14.920 --> 00:12:18.220
you know, our skill sets,
but it wasn't a simple,

210
00:12:18.280 --> 00:12:21.610
it didn't seem like a
simple endeavor just to create

211
00:12:21.700 --> 00:12:25.960
a, a plugin for a
fire bug. And we thought

212
00:12:25.990 --> 00:12:30.130
that, you know, with them
tying ourselves to Firefox. So

213
00:12:30.460 --> 00:12:32.890
to just to get started,
I think it was me

214
00:12:32.890 --> 00:12:35.740
who just said to Nick,
Hey, let me just, just

215
00:12:35.800 --> 00:12:37.480
let me see what I
can get up and going

216
00:12:37.480 --> 00:12:39.820
here. Let me see if
I can just get some

217
00:12:39.820 --> 00:12:43.330
sort of basic, you know,
HTML injected into the bottom

218
00:12:43.330 --> 00:12:46.030
of the page here and
rendered out. And then later

219
00:12:46.030 --> 00:12:49.210
on, we'll do the proper
version kind of thinking along

220
00:12:49.210 --> 00:12:52.420
the lines of what a
Firebug does, how they got

221
00:12:52.420 --> 00:12:55.330
fired by glide, and then
you've got Firebug proper. And

222
00:12:55.330 --> 00:12:57.160
so let me just see
if I can get this

223
00:12:57.310 --> 00:13:00.040
basic core version out, and
then we'll worry about the

224
00:13:00.040 --> 00:13:03.160
full version later on, because
we're under a huge time

225
00:13:03.160 --> 00:13:06.460
crunch because, and that's another
story, but we wanted to

226
00:13:06.520 --> 00:13:10.090
make something in time for
the open source. We had

227
00:13:10.090 --> 00:13:13.450
five weeks that we gave
ourselves. And so we started

228
00:13:13.450 --> 00:13:15.760
off with this light version
and what I found out

229
00:13:15.760 --> 00:13:18.640
very quickly to come to
tie it back ground was

230
00:13:18.910 --> 00:13:22.390
getting the styling, right? So
that, you know, nothing that

231
00:13:22.390 --> 00:13:25.210
the client was doing was
a real challenge. And when

232
00:13:25.210 --> 00:13:28.510
I looked at how far
by was doing it, they're

233
00:13:28.510 --> 00:13:31.180
actually for fly bug light.
They just have like a

234
00:13:31.180 --> 00:13:34.060
little div at the bottom
of the page that they

235
00:13:34.060 --> 00:13:37.960
then render an eye frame
into. And that I frame,

236
00:13:38.050 --> 00:13:41.530
because it's not part of
the core HTML of the

237
00:13:41.560 --> 00:13:47.740
hosting page, there is no,
let's say a cascading of

238
00:13:47.740 --> 00:13:50.380
the styles down into that
dif so that's how they

239
00:13:50.380 --> 00:13:53.710
get away with it. Whereas
we had already had headed

240
00:13:53.710 --> 00:13:56.950
down the track of just
injecting the HTML. And so

241
00:13:56.950 --> 00:13:59.260
it was like, Ooh, do
we back out and go

242
00:13:59.260 --> 00:14:02.440
to an iframe approach? Or
what do we do? And

243
00:14:02.440 --> 00:14:04.720
so in the end, what
we, what we experimented with

244
00:14:04.750 --> 00:14:09.910
was actually doing a Jew,
like a CSS reset on

245
00:14:10.000 --> 00:14:13.480
a scoped region. So imagine
that instead of just doing

246
00:14:13.480 --> 00:14:16.510
a CSS reset on the
whole page, let's do a

247
00:14:16.510 --> 00:14:23.310
CSS reset for anything within
the glimpse cloth. And so

248
00:14:23.310 --> 00:14:27.000
that's what we did. And
so basically we reset all

249
00:14:27.000 --> 00:14:32.460
the styles. I'm just using
like a basic CSS reset

250
00:14:32.460 --> 00:14:37.740
that is like widely available,
which, you know, if someone's

251
00:14:37.740 --> 00:14:41.280
floating all their dibs to
the left would set them

252
00:14:41.280 --> 00:14:44.160
back so that they're no
longer floating within their scope.

253
00:14:45.060 --> 00:14:50.550
And then we start applying
glimpse specific styles on top

254
00:14:50.550 --> 00:14:54.280
of that. Does that kinda
make sense? No, but I'm

255
00:14:54.280 --> 00:14:56.620
kinda understand though. I can
see the idea of doing

256
00:14:56.620 --> 00:14:59.860
a CSS reset for a
scope region. That's pretty, pretty

257
00:14:59.860 --> 00:15:06.130
interesting actually. But if, if,
how do you keep from

258
00:15:06.160 --> 00:15:11.110
conflicting with other CSS classes
or dibs IDs, things that

259
00:15:11.110 --> 00:15:14.080
I might use, right. What
if I make something called

260
00:15:14.440 --> 00:15:18.850
the glimpse thing? Yeah. So
everything's a prefixed. And so

261
00:15:18.850 --> 00:15:23.320
we've kind of made an
assumption that you're not gonna

262
00:15:23.320 --> 00:15:28.240
have any classes called glimpse
dash something Corolla, and that

263
00:15:28.240 --> 00:15:31.390
you're not going to have
any IDs called glimpse dash

264
00:15:31.420 --> 00:15:35.980
something or other. And so
given that principle, we haven't

265
00:15:35.980 --> 00:15:39.820
been bitten yet by anyone
saying that what the name

266
00:15:39.820 --> 00:15:42.910
of my company is actually
glimpse and you're interfering with

267
00:15:42.940 --> 00:15:46.390
all my classes, but unfortunately,
it's, it's one of the

268
00:15:46.390 --> 00:15:50.530
challenges of developing this kind
of thing for the web

269
00:15:50.530 --> 00:15:53.710
and taking the approach we
have that, you know, there

270
00:15:53.710 --> 00:15:56.980
is a potential that we
could run into someone's toes

271
00:15:56.980 --> 00:16:00.400
at some point. But the
prefix that we've got is,

272
00:16:00.400 --> 00:16:03.700
is serving us pretty well
to start with at the

273
00:16:03.700 --> 00:16:07.150
moment. I see. I see.
So it's, it's, it's a,

274
00:16:07.360 --> 00:16:10.600
you're taking a chance that
some company called clumps international

275
00:16:10.600 --> 00:16:13.990
doesn't really want to jump
in and collide with you,

276
00:16:13.990 --> 00:16:18.670
but ultimately the prefix is
what's saving you. Yeah. And

277
00:16:18.670 --> 00:16:21.190
to answer your question about
the J query, how do

278
00:16:21.190 --> 00:16:24.760
we get away with that?
At first, we may, and

279
00:16:24.760 --> 00:16:28.720
this was in time for
open source Fest. We made

280
00:16:28.720 --> 00:16:33.970
an assumption that, you know,
most people use jQuery as

281
00:16:33.970 --> 00:16:37.450
it turned out later on
that, you know, not everyone

282
00:16:37.450 --> 00:16:41.440
uses jQuery and they were
running into some issues and

283
00:16:41.440 --> 00:16:45.970
we wanted to support those
people. And that there is

284
00:16:45.970 --> 00:16:48.310
still a fair bit of
difference in some of the

285
00:16:48.310 --> 00:16:53.590
versions of jQuery. And so
that presented a particular challenge.

286
00:16:53.590 --> 00:16:57.340
And so what we've actually
done and, you know, I'm

287
00:16:57.340 --> 00:17:01.450
not sure if I'm 100%
happy with the approach, but

288
00:17:01.450 --> 00:17:06.640
it works is that we've
actually taken a copy of,

289
00:17:06.640 --> 00:17:10.480
let's say the jQuery source
code. And we've actually when

290
00:17:10.480 --> 00:17:15.880
needed, we embed it in
our Java script file. And

291
00:17:15.880 --> 00:17:20.080
what we do is we've
purposely to avoid net version

292
00:17:20.080 --> 00:17:25.630
collisions is we've modified that
jQuery source flatly, so that

293
00:17:25.630 --> 00:17:30.910
instead of jQuery, trying to
go window dot jQuery and

294
00:17:30.940 --> 00:17:34.990
owls, trying to override that
we've actually changed a couple

295
00:17:34.990 --> 00:17:37.630
of the variable names that
are scoped at a global

296
00:17:37.630 --> 00:17:42.100
level to be like jQuery,
jQuery glimpse. And the dollar

297
00:17:42.100 --> 00:17:45.010
signs would be dollar sign
glimpse so that we can

298
00:17:45.010 --> 00:17:49.590
actually get that version independence.
Does that kinda make, and

299
00:17:49.590 --> 00:17:53.730
so, yes, I guess in
theory, it could sometimes load

300
00:17:54.030 --> 00:17:58.800
two versions of glimpse on
the one client, which I

301
00:17:58.800 --> 00:18:01.650
guess there is a little
bit of performance overhead of

302
00:18:01.650 --> 00:18:06.390
that, but it's not used
when a normal user is

303
00:18:06.390 --> 00:18:09.510
using your site. It's used
in the context of when

304
00:18:09.510 --> 00:18:12.210
you're wanting to debug and
diagnose a problem that you

305
00:18:12.210 --> 00:18:17.160
have and getting a consistent
experience for people and not

306
00:18:17.160 --> 00:18:20.880
telling them, Hey, you've jumped
ahead. So that in jQuery

307
00:18:20.880 --> 00:18:23.310
versions and we have, or
we've gone further than you

308
00:18:23.310 --> 00:18:27.060
have and having a really
inconsistent experience. That's, that's how

309
00:18:27.060 --> 00:18:31.640
we kind of got to
that point. This episode of

310
00:18:31.640 --> 00:18:35.540
Hansel minutes is brought to
you by careers 2.0 careers,

311
00:18:35.540 --> 00:18:37.670
2.0 is a new service
by our friends at stack

312
00:18:37.670 --> 00:18:41.450
overflow. You're probably all familiar
with stack overflow, the online

313
00:18:41.450 --> 00:18:45.590
Q and a resource dedicated
specifically to programmers and programming

314
00:18:45.590 --> 00:18:49.700
related topics. Well, the team
at stack overflow created careers

315
00:18:49.700 --> 00:18:52.970
2.0 to provide you with
access to great jobs and

316
00:18:52.970 --> 00:18:54.710
introduce you to a bunch
of great companies that you

317
00:18:54.710 --> 00:18:57.530
might consider working for, even
if you're not currently looking

318
00:18:57.530 --> 00:19:00.800
for a job, think of
careers. 2.0 is a programmer

319
00:19:00.800 --> 00:19:04.190
profile, gives you a platform
to show that you're awesome

320
00:19:04.670 --> 00:19:09.080
by featuring your proudest contributions
to stack overflow GitHub SourceForge

321
00:19:09.110 --> 00:19:12.680
Bitbucket, anything programming related, you
can even add your favorite

322
00:19:12.680 --> 00:19:17.300
programming books from amazon.com profiles
on careers. 2.0 are free.

323
00:19:17.480 --> 00:19:20.510
They're easy to get started,
especially by importing your LinkedIn

324
00:19:20.510 --> 00:19:25.790
profile. However, there's one catch
profiles on career 2.0 or

325
00:19:25.880 --> 00:19:29.180
invite only they did this
to keep out the spam

326
00:19:29.180 --> 00:19:33.200
and have a high quality
environment. Fortunately, for you as

327
00:19:33.200 --> 00:19:36.380
a Hansel minutes listener, I've
got your back head on

328
00:19:36.380 --> 00:19:42.080
over to careers dot stack
overflow.com/h M to accept your

329
00:19:42.080 --> 00:19:48.920
invitation today, once again, that's
careers dot stack overflow.com/hm. I

330
00:19:48.920 --> 00:19:55.520
hope you like it. Okay.
Let's, let's shift to the

331
00:19:55.520 --> 00:19:58.220
service side because the thing
that's most interesting about glimpse,

332
00:19:58.490 --> 00:20:01.340
I think we, once you
move past how you use

333
00:20:01.820 --> 00:20:06.140
HTML and jQuery is the
relationship between the server and

334
00:20:06.140 --> 00:20:09.260
the, and the, and the
client, because glimpse gives you

335
00:20:09.350 --> 00:20:13.220
insights into what's going on
on the server. That is

336
00:20:13.910 --> 00:20:18.110
disturbing to me because it's
just a huge amount of

337
00:20:18.110 --> 00:20:21.410
information. It's almost as if
you guys have said, let's

338
00:20:21.410 --> 00:20:24.800
just show them everything. Like
every single piece of data

339
00:20:24.800 --> 00:20:28.580
that is available on the
server. You're, you're, you know,

340
00:20:28.580 --> 00:20:31.880
you're looping through all the
different collections that have anything

341
00:20:31.880 --> 00:20:35.120
interesting, and then organizing it
in a very neat way

342
00:20:35.120 --> 00:20:38.450
on the client. It seems
like one, a huge amount

343
00:20:38.450 --> 00:20:46.100
of information. And to, is
that not a little invasive?

344
00:20:46.100 --> 00:20:48.400
Isn't the word? Is it,
is it a little slow

345
00:20:48.400 --> 00:20:50.320
To do all that on
every single call? I want

346
00:20:50.320 --> 00:20:53.530
to understand how you're getting
all that information, like where

347
00:20:53.530 --> 00:20:55.150
your hooks are in and
how you're moving it to

348
00:20:55.150 --> 00:20:58.600
the client. And, you know,
if I should worry about

349
00:20:58.630 --> 00:21:00.640
all that pile of information
that you're sending back and

350
00:21:00.640 --> 00:21:06.030
forth. Yeah. That's a, that's
a great question. So the

351
00:21:06.030 --> 00:21:10.500
server side architecture, you know,
so the plugin architecture sits

352
00:21:10.500 --> 00:21:13.620
on top of methods as
Anthony had already mentioned. And

353
00:21:13.620 --> 00:21:18.660
so Of course, pain managing
sensibility framework. Oh yeah. I'm

354
00:21:18.660 --> 00:21:22.200
sorry, man. It's testability framework.
So there's really two main

355
00:21:22.230 --> 00:21:25.050
pieces to glimpse. We have
in our HTTP handler, which

356
00:21:25.050 --> 00:21:26.820
we already discussed is where
you go to turn on

357
00:21:26.820 --> 00:21:29.850
glimpse. And that's also kind
of the end point that

358
00:21:29.850 --> 00:21:32.910
we have access to, to
serve up any other resources

359
00:21:32.910 --> 00:21:36.270
like our icons or our
JavaScript file, et cetera, et

360
00:21:36.270 --> 00:21:39.750
cetera. And then we also
have this HTPB module. Now

361
00:21:39.750 --> 00:21:42.690
the module, we try to
be very, very efficient inside

362
00:21:42.690 --> 00:21:46.110
of there because that's really
kind of, what's scraping all

363
00:21:46.110 --> 00:21:48.900
of the information out of
the runtime during our request

364
00:21:49.410 --> 00:21:53.220
to put together the Jason
blog, but the client will

365
00:21:53.220 --> 00:21:57.210
later render. So what we
haven't done is we have

366
00:21:57.600 --> 00:22:03.360
an entire pipeline of what
we call validators and that

367
00:22:03.780 --> 00:22:07.650
basically bales out of glimpse
doing any work, as soon

368
00:22:07.650 --> 00:22:10.560
as we know we should
bail. So for example, as

369
00:22:10.560 --> 00:22:12.450
soon as we know what
the content type of request

370
00:22:12.450 --> 00:22:15.120
is, if we're returning an
image loose, can't really help

371
00:22:15.120 --> 00:22:17.130
you out with your images
and we're going to bail.

372
00:22:17.460 --> 00:22:20.790
But if you're returning text
slash HTML, then we know

373
00:22:20.790 --> 00:22:23.730
that there's some work that
we can do there. Cause

374
00:22:23.730 --> 00:22:26.640
you're probably running through a
view engine or something like

375
00:22:26.640 --> 00:22:30.750
that. So we've, we've tried
really hard not to just

376
00:22:30.750 --> 00:22:33.240
take all of the data
that we had access to

377
00:22:33.240 --> 00:22:36.720
and dump it out. But
instead tried to solve real

378
00:22:36.720 --> 00:22:40.050
world problems, issues that we've
run into in the past.

379
00:22:40.140 --> 00:22:44.550
I know that I actually
get to teach people how

380
00:22:44.550 --> 00:22:46.320
to use MVC quite often.
And I see them run

381
00:22:46.320 --> 00:22:49.320
into issues with, with routes.
I see them at run

382
00:22:49.320 --> 00:22:53.910
into issues with finding and
understanding child actions and things

383
00:22:53.910 --> 00:22:55.950
like that. So we've kind
of taken some of those

384
00:22:55.950 --> 00:22:58.470
experiences that we've had, plus
a lot of feedback from

385
00:22:58.470 --> 00:23:03.840
the community and, and Twitter
in general and those, those

386
00:23:03.840 --> 00:23:08.070
pieces of information into the
UI. So the way that

387
00:23:08.070 --> 00:23:11.310
we actually hook in really
isn't a Testament to glimpse

388
00:23:11.310 --> 00:23:13.770
at all. It's really a
Testament to some of the

389
00:23:13.770 --> 00:23:16.440
recent work that the asp.net
team has been pumping out.

390
00:23:16.440 --> 00:23:19.950
Really all the plugin points
were there. We didn't invent

391
00:23:19.980 --> 00:23:24.210
anything by any means. So
in general, we, we either

392
00:23:24.210 --> 00:23:30.960
wrap or extend hook points
like the IVU engine or

393
00:23:30.960 --> 00:23:34.080
I model binder, and just
kind of sit in the

394
00:23:34.080 --> 00:23:36.630
middle so we can see
the parameters that are being

395
00:23:36.630 --> 00:23:39.480
passed into those methods by
the framework and the results

396
00:23:39.540 --> 00:23:41.730
that are coming out on
the other end. And then

397
00:23:41.730 --> 00:23:44.760
we throw away any data
that we don't need to

398
00:23:44.760 --> 00:23:47.060
try to things efficient. And
then, and then send that

399
00:23:47.060 --> 00:23:50.620
down at the end of
the response. And are you,

400
00:23:50.830 --> 00:23:53.200
is this all just Ajax
back and forth? This is

401
00:23:53.200 --> 00:23:57.820
all just Jason, like one
giant Jason call or 50

402
00:23:57.820 --> 00:24:00.550
different Jason calls us pushing
information back. That's a good,

403
00:24:00.640 --> 00:24:04.810
that's a good question. So
we are very mindful of

404
00:24:04.810 --> 00:24:09.010
performance, particularly from an HTTP
standpoint. And we try to

405
00:24:09.010 --> 00:24:13.270
reduce the number of HTTP
calls. So as of right

406
00:24:13.270 --> 00:24:15.940
now, and there's some debate
going on internally about whether

407
00:24:15.940 --> 00:24:18.280
or not we should change
this, but as of right

408
00:24:18.280 --> 00:24:21.810
now, when you make a
request, all that we render

409
00:24:21.810 --> 00:24:25.300
out to your page is
two script tags once inline

410
00:24:25.330 --> 00:24:28.330
and basically has the Jason
blob with all the information.

411
00:24:28.750 --> 00:24:32.050
And then the other is
the script tag to go

412
00:24:32.050 --> 00:24:35.950
back and get our, our,
our JavaScript clients. And that

413
00:24:35.950 --> 00:24:39.370
will go through some caching
layer, HDB caching. So you

414
00:24:39.370 --> 00:24:41.860
don't actually have to request
that after the first time.

415
00:24:42.370 --> 00:24:45.430
So there's no Ajax going
on at all to get

416
00:24:45.430 --> 00:24:49.630
the basic glimpse. There are
two tabs, however, that start

417
00:24:49.640 --> 00:24:53.350
to really play into Ajax.
And that's the Ajax tab

418
00:24:53.410 --> 00:24:58.270
and the remote tab, the
way that those work is,

419
00:24:58.270 --> 00:25:01.510
we actually take all the
metadata that we're sending down

420
00:25:01.930 --> 00:25:05.590
on the page response. And
by default, we'll keep the

421
00:25:05.590 --> 00:25:10.030
last 15 requests to the
server in memory. And then,

422
00:25:10.450 --> 00:25:12.880
so for example, the remote
tab, when you only, when

423
00:25:12.880 --> 00:25:16.840
you've selected, it will make
an Ajax request to our

424
00:25:16.870 --> 00:25:21.400
HTTP handler endpoint that I
described earlier and returned back

425
00:25:21.430 --> 00:25:25.300
information about previous requests. So
you can start to maybe

426
00:25:25.300 --> 00:25:28.510
compare the request you just
made with the one that

427
00:25:28.510 --> 00:25:30.670
you made a couple of
minutes ago, et cetera, et

428
00:25:30.670 --> 00:25:34.720
cetera. And then same with
the Ajax tab. If, if

429
00:25:34.870 --> 00:25:39.190
an Ajax request is made
to your server, we can't

430
00:25:39.190 --> 00:25:41.590
append a giant Jason blob
on top of that because

431
00:25:41.590 --> 00:25:45.490
you're probably already returning Jason
or an HTML snippet, something

432
00:25:45.490 --> 00:25:49.300
like that. So instead what
we do is I kind

433
00:25:49.300 --> 00:25:51.880
of like this, I think
it's kind of clever. We

434
00:25:51.880 --> 00:25:55.030
take the ID, the glimpse
ID of the request because

435
00:25:55.030 --> 00:25:57.250
we assign a unique ID
to every request that comes

436
00:25:57.250 --> 00:26:01.060
in. And we add that
to an HTTP header on

437
00:26:01.060 --> 00:26:04.810
the response of your Ajax
request. We can then using

438
00:26:04.810 --> 00:26:09.040
the same HTTP handler endpoint.
You take that ID and

439
00:26:09.040 --> 00:26:12.520
say, give me all of
the metadata for the request

440
00:26:12.520 --> 00:26:15.580
that came in before with
this ID. And then that's

441
00:26:15.580 --> 00:26:17.710
what we render and show
you in our Ajax panel.

442
00:26:17.860 --> 00:26:20.560
So you can then kind
of launch in attached to

443
00:26:20.560 --> 00:26:23.620
that request and see all
those ones from glimpse information

444
00:26:23.620 --> 00:26:26.080
and it's us. Okay. So
this is almost like changing

445
00:26:26.080 --> 00:26:28.750
the channel on a TV
set. You're exactly right. It's

446
00:26:28.750 --> 00:26:32.380
like changing the channel, your
selecting, which requests you want

447
00:26:32.380 --> 00:26:34.360
to look at by default,
we're going to show you

448
00:26:34.360 --> 00:26:37.560
the one that your browser
just made with theirs, but

449
00:26:37.570 --> 00:26:39.970
it could be a one
that JavaScript made on your

450
00:26:39.970 --> 00:26:42.910
behalf via Ajax. It could
be one that was in

451
00:26:42.910 --> 00:26:45.780
the, that you made three
clicks ago. It could be

452
00:26:45.780 --> 00:26:50.040
one that another user entirely
has made. So really interesting

453
00:26:50.040 --> 00:26:53.580
scenario that we haven't documented
well, which will allow for

454
00:26:53.580 --> 00:26:57.240
me to maybe debug something
that's happening on a mobile

455
00:26:57.240 --> 00:26:59.700
device or the glimpse UI
is not necessarily going to

456
00:26:59.700 --> 00:27:01.800
work out. But if I
have a user call me

457
00:27:01.800 --> 00:27:04.740
and say that they're experiencing
a problem, I can watch

458
00:27:04.740 --> 00:27:07.170
them as they're making requests
and attached to one of

459
00:27:07.170 --> 00:27:10.890
their requests remotely and see
what's going on. So it's

460
00:27:10.920 --> 00:27:14.250
just like changing the channel,
except the channels. Here are

461
00:27:14.340 --> 00:27:18.290
our requests over time. Could
I open up multiple windows

462
00:27:18.290 --> 00:27:21.140
and have my main page
in one window and then

463
00:27:21.140 --> 00:27:23.960
some Ajax over in another?
So I don't, I don't

464
00:27:23.960 --> 00:27:26.000
follow you. So you want
to have your mind? No,

465
00:27:26.000 --> 00:27:28.280
but I want to debug
Ajax and I want to

466
00:27:28.280 --> 00:27:31.880
debug my main page at
the same time. Yes. Yeah.

467
00:27:31.880 --> 00:27:33.440
You can do that. So
what you would do is

468
00:27:33.440 --> 00:27:35.510
we actually have a UI
feature that would allow you

469
00:27:35.510 --> 00:27:38.240
to pop glimpse out and
it literally just opens up

470
00:27:38.240 --> 00:27:40.970
an a in a web
browser popup window. So you

471
00:27:40.970 --> 00:27:42.830
can move that over to
one window and then you

472
00:27:42.830 --> 00:27:46.040
can open up the gums
panel and your main page.

473
00:27:46.070 --> 00:27:48.500
And now you can be
looking at Ajax and the

474
00:27:48.500 --> 00:27:50.930
pop out and looking at
the main page and still

475
00:27:50.930 --> 00:27:52.730
on the device. Why do
you think this is? And

476
00:27:52.730 --> 00:27:54.320
this might be a weird
question, but just kind of

477
00:27:54.320 --> 00:27:56.270
came to me. Why do
you think that this hasn't

478
00:27:56.270 --> 00:27:59.240
been done before? That is
a good question. So, you

479
00:27:59.240 --> 00:28:01.280
know, to be honest with
you, I think it has

480
00:28:01.280 --> 00:28:05.780
been done before, not in
this exact implementation obviously, and

481
00:28:05.780 --> 00:28:10.850
not really for the.net community
when Anthony and I were

482
00:28:10.850 --> 00:28:13.400
discussing, starting to build glimpse.
We looked at some other

483
00:28:13.400 --> 00:28:16.820
tools that are out out
and then, and other web

484
00:28:17.150 --> 00:28:22.340
web development frameworks, and a
lot of those frameworks that

485
00:28:22.340 --> 00:28:25.130
have this kind of tooling,
like PHP and cold fusion

486
00:28:25.370 --> 00:28:29.120
have tooling similar to this,
that tooling is because the

487
00:28:29.120 --> 00:28:35.480
server side team of whatever
framework built in some diagnostics

488
00:28:35.930 --> 00:28:37.760
that somebody then later just
went and built a client

489
00:28:37.760 --> 00:28:42.170
for. I feel like that
was the holdup for asp.net.

490
00:28:42.890 --> 00:28:46.580
I don't think there's really
this diagnostics information built into

491
00:28:46.580 --> 00:28:50.690
the framework it was available,
but nobody was collecting it

492
00:28:50.690 --> 00:28:53.810
and gathering it into an
easy to consume format. That's

493
00:28:53.810 --> 00:28:56.240
all we've really done with
glimpse plus a really nice

494
00:28:56.240 --> 00:29:00.740
client and a decent extensibility
model. Okay. How many people

495
00:29:00.740 --> 00:29:02.510
are working on this? And
I'm curious how long it

496
00:29:02.510 --> 00:29:03.890
took. Cause it seemed like,
I think a lot of

497
00:29:03.890 --> 00:29:07.700
people would agree that it
came out of nowhere and

498
00:29:07.700 --> 00:29:11.990
it was great. Well, this
is a, I hinted to

499
00:29:11.990 --> 00:29:15.590
it before, but it was
funny. We were actually standing

500
00:29:15.950 --> 00:29:19.670
outside of a subway and
one night and we were

501
00:29:19.670 --> 00:29:23.150
talking about, you know, cool
things wouldn't we love if

502
00:29:23.150 --> 00:29:26.150
we could have this. And,
you know, Nick started talking

503
00:29:26.150 --> 00:29:28.460
about, well, you know, back
in the day, you know,

504
00:29:28.460 --> 00:29:31.310
when I was doing cold
fusion, you know, we, we

505
00:29:31.310 --> 00:29:33.950
had it too, you know,
where you could actually see

506
00:29:33.950 --> 00:29:36.830
details of your request. And,
you know, I was like,

507
00:29:36.860 --> 00:29:40.550
wow, wouldn't that be cool?
And you know, this was

508
00:29:40.550 --> 00:29:46.930
pretty much probably eight weeks
maybe before open source test

509
00:29:47.530 --> 00:29:51.600
and Oh no, a little
bit before that. And yeah,

510
00:29:51.630 --> 00:29:54.780
it was when we figured
out the John popper had

511
00:29:54.780 --> 00:29:57.540
just announced that, you know,
they are looking for more

512
00:29:57.540 --> 00:30:01.980
projects and missions to open
source fests. So probably before

513
00:30:01.980 --> 00:30:04.470
that we'd spent maybe three
weeks that had maybe been

514
00:30:04.470 --> 00:30:09.480
three weeks since that conversation
outside the subway to when

515
00:30:09.480 --> 00:30:13.380
the announcement of John popper
made. And from when we

516
00:30:13.380 --> 00:30:17.700
knew were accepted, we had
five weeks to finish Gramps

517
00:30:17.730 --> 00:30:21.120
or at least get it
to a decent point that

518
00:30:21.120 --> 00:30:24.630
we could actually demo it
to people. And so we

519
00:30:24.630 --> 00:30:27.870
actually had a very, very
short period of time. And

520
00:30:27.900 --> 00:30:30.600
so from the time you
was five weeks, basically, and

521
00:30:30.600 --> 00:30:35.010
at that point, you know,
glimpse was just get hub

522
00:30:35.010 --> 00:30:38.520
projects. You know, I don't
think anyone was watching it

523
00:30:39.300 --> 00:30:40.950
and we were just doing
our commits and it was

524
00:30:40.950 --> 00:30:44.760
just myself and Nick. And
when we came to open

525
00:30:44.760 --> 00:30:50.970
source Fest, we've literally been
spending every night, probably the

526
00:30:50.970 --> 00:30:53.730
time we got home at
six or seven o'clock until

527
00:30:53.730 --> 00:30:56.610
like one or two in
the morning, trying to, you

528
00:30:56.610 --> 00:31:00.390
know, pump in the functionality
and trying to really get

529
00:31:00.390 --> 00:31:04.290
a compelling experience because we,
you know, we wanted people

530
00:31:04.290 --> 00:31:06.780
to use it. Plus for
ourselves, it was, it was

531
00:31:06.780 --> 00:31:10.260
really going to be a
benefit and then open source

532
00:31:10.260 --> 00:31:13.260
fast, you know, and put
it this way without open

533
00:31:13.260 --> 00:31:15.810
source first. I really don't
know if it would be

534
00:31:15.810 --> 00:31:20.430
where we are today. You
know, that platform I think

535
00:31:20.430 --> 00:31:23.910
is, is a phenomenal idea
for the.net community and probably

536
00:31:23.910 --> 00:31:26.430
other communities as well. Although
I think they've got similar

537
00:31:26.430 --> 00:31:30.150
sorts of things, but especially
for the.net community to showcase

538
00:31:30.150 --> 00:31:34.260
things. And when we went
there, we were totally unknown.

539
00:31:34.260 --> 00:31:37.680
We're an unknown project, but
that didn't, that wasn't the

540
00:31:37.680 --> 00:31:40.170
criteria. You didn't have to
be a known project. You

541
00:31:40.170 --> 00:31:42.150
didn't, you could, you could
just admit, Hey, I've got

542
00:31:42.150 --> 00:31:44.760
this cool concept or the
school project. This is what

543
00:31:44.760 --> 00:31:48.150
it is. I'm happy to
show it. And so that's

544
00:31:48.150 --> 00:31:51.120
what we did. And as
soon as we started talking

545
00:31:51.120 --> 00:31:54.300
to people, it was like,
wow. You know, because they

546
00:31:54.300 --> 00:31:57.540
hadn't seen anything like this
or the dinette platform before,

547
00:31:58.530 --> 00:32:00.450
you know, and it was
like, you know, this is

548
00:32:00.810 --> 00:32:03.960
really cool. And it's really
simple to put in my

549
00:32:03.960 --> 00:32:07.950
website. I don't need to
change anything, which is one

550
00:32:07.950 --> 00:32:12.060
of our leading principles. Unfortunately,
you still need to make

551
00:32:12.060 --> 00:32:14.880
a slight modification to your
web conference to say that

552
00:32:14.880 --> 00:32:18.660
you want glimpse turned on,
but you know, besides that,

553
00:32:18.660 --> 00:32:21.360
it's not like I've got
to change, you know, what

554
00:32:21.360 --> 00:32:25.200
handlers I'm using or, you
know, what implementation is, you

555
00:32:25.200 --> 00:32:29.010
know, I view you using
for, you know, MVC or

556
00:32:29.010 --> 00:32:33.090
whatever else. It just works.
And I think, yeah, when

557
00:32:33.090 --> 00:32:37.170
that clicked for people that,
you know, here's data, that

558
00:32:37.170 --> 00:32:41.510
was extremely difficult for me
get to see in aggregate

559
00:32:41.510 --> 00:32:45.260
before in summary before. And
I'm just seeing it now

560
00:32:45.260 --> 00:32:47.930
for every request and I've
had to do nothing except

561
00:32:47.930 --> 00:32:53.120
references DLL. I think that
really resonated with people. You

562
00:32:53.120 --> 00:32:56.420
know, I remember when Phil
hack was walking around the

563
00:32:56.420 --> 00:32:59.960
tables and, you know, I
purposely walked over and grabbed

564
00:32:59.960 --> 00:33:02.120
him and said, Hey, I
think, I think you'll find

565
00:33:02.120 --> 00:33:05.720
this interesting. And you know,
it was so funny because

566
00:33:05.750 --> 00:33:08.690
he took like, it was
30 seconds of me talking

567
00:33:08.720 --> 00:33:12.230
and him looking at the
example that will shine and

568
00:33:12.230 --> 00:33:15.680
it just clicked. And, you
know, I think he was

569
00:33:15.980 --> 00:33:18.350
pretty excited or he seemed
pretty excited at that time.

570
00:33:18.380 --> 00:33:20.600
And I think that's when
he said I'll be back.

571
00:33:21.140 --> 00:33:23.690
And that was when he
went, ran over to you

572
00:33:23.690 --> 00:33:26.810
and why quiet within a
very short period of time,

573
00:33:26.810 --> 00:33:30.200
much shorter than I expected.
You just got it. And

574
00:33:30.200 --> 00:33:33.080
you just, you saw the
value of it and, you

575
00:33:33.080 --> 00:33:35.180
know, and that's why I
think it really took off.

576
00:33:35.600 --> 00:33:38.330
And the other thing that
really helped was new, good

577
00:33:38.330 --> 00:33:41.120
as a platform, you know,
it was the right delivery

578
00:33:41.120 --> 00:33:45.620
mechanism at the right time.
And, you know, the fact

579
00:33:45.620 --> 00:33:48.470
that people could just go,
they could find it and

580
00:33:48.470 --> 00:33:53.060
just through visual studio, just
add it to add it

581
00:33:53.060 --> 00:33:57.710
to their project that just
worked. And so I think

582
00:33:57.710 --> 00:34:02.600
people really loved that. Very
cool. Very cool. And in

583
00:34:02.600 --> 00:34:07.820
terms of contributors, Nick. Yeah.
So Anthony and I have

584
00:34:07.820 --> 00:34:10.070
done, you know, a lion's
share of the work, especially

585
00:34:10.070 --> 00:34:11.780
in those five weeks for,
we didn't get a ton

586
00:34:11.780 --> 00:34:14.840
of sleep before open source
Fest, but we've had great

587
00:34:14.840 --> 00:34:18.020
community support. So actually the
night of open source first,

588
00:34:18.410 --> 00:34:19.910
a guy came up to
us and said, Hey, I'm

589
00:34:19.910 --> 00:34:21.950
not really a developer, but
what you guys are doing

590
00:34:21.950 --> 00:34:24.830
looks awesome. Can I make
you a logo? And so

591
00:34:24.890 --> 00:34:27.170
literally that Monday night, we
were up with this guy

592
00:34:27.170 --> 00:34:29.240
until about two in the
morning, his name's David Stubbs.

593
00:34:29.240 --> 00:34:31.730
And he put together what
I think is a pretty

594
00:34:31.730 --> 00:34:35.480
kick butt glimpse logo. We've
had another gentleman named Peter

595
00:34:35.480 --> 00:34:39.950
Handorff who has done a
fantastic job writing documentation for

596
00:34:39.950 --> 00:34:43.490
us and contributing that back
to the website. Since you

597
00:34:43.490 --> 00:34:45.950
said you'd love glimpse, but
thought, you know, it needed

598
00:34:45.950 --> 00:34:49.620
better documentation. And we completely
agreed. We actually have a,

599
00:34:50.270 --> 00:34:54.770
I don't know, I would
say a decent ecosystem built

600
00:34:54.770 --> 00:34:56.870
around glimpse as well now.
So I'm looking, I'm looking

601
00:34:56.870 --> 00:34:59.930
right now and, and new
get that Oregon. There's, there's

602
00:35:00.470 --> 00:35:04.520
eight to 10 different plugins
for glimpse available to download.

603
00:35:04.520 --> 00:35:06.320
I know about at least
three or four others on

604
00:35:06.320 --> 00:35:09.740
different sites. And so somebody
like Stephen Lauer's who built

605
00:35:09.800 --> 00:35:12.650
a Elmo plugin for glimpse.
So you can see all

606
00:35:12.650 --> 00:35:15.620
of the Elmos information right
in the glimpse UI, that's

607
00:35:15.640 --> 00:35:17.750
come back and even worked
with us to say, Hey,

608
00:35:17.750 --> 00:35:20.630
you know, it'd be really
great if glimpse supported paging

609
00:35:20.630 --> 00:35:22.730
of data. And so we're
trying to find a nice

610
00:35:22.730 --> 00:35:25.010
generic way to fit that
into the framework and move

611
00:35:25.010 --> 00:35:28.250
forward with that. So we're
getting some pretty good contributions

612
00:35:28.250 --> 00:35:31.160
from the community, whether directly
to the court or just

613
00:35:31.160 --> 00:35:34.590
to the ecosystem and adding
their own plugins. And w

614
00:35:34.600 --> 00:35:37.090
it will be seeing versions
of limps for all other,

615
00:35:37.470 --> 00:35:39.750
other platforms that aren't asp.net.
At some point, it sounds

616
00:35:39.750 --> 00:35:44.870
like too. Yeah. So essentially
what we've done is at

617
00:35:44.870 --> 00:35:47.180
its core, if we, if
we go really pie in

618
00:35:47.180 --> 00:35:50.510
the sky and think about
what glimpse is, the way

619
00:35:50.510 --> 00:35:53.330
we like to think about
it is that it's just

620
00:35:53.330 --> 00:35:57.770
a framework. It's a framework
that people can develop plugins

621
00:35:57.770 --> 00:36:03.260
for. And that if those
plugins return a particular data

622
00:36:03.260 --> 00:36:07.190
structure, which is, which is
all documented and, you know,

623
00:36:07.220 --> 00:36:11.600
which renders out in the
glimpse protocol, which the glimpse

624
00:36:11.600 --> 00:36:15.980
protocol isn't anything fancy or
whatever else, it's more like,

625
00:36:16.010 --> 00:36:18.770
Oh, data in the fact
that, you know, odometer is

626
00:36:18.770 --> 00:36:22.910
just a set of conventions
that allow you to interpret

627
00:36:22.910 --> 00:36:29.060
meaning from, from the data
that's present. So if we

628
00:36:29.060 --> 00:36:32.360
see a plain Jason object,
that's been that's in the

629
00:36:32.390 --> 00:36:35.060
data packet, that's been sent
down to the client, we'll

630
00:36:35.060 --> 00:36:37.640
just render it as a
key value table. If we

631
00:36:37.640 --> 00:36:40.820
see a complex array of
arrays, then we'll display it

632
00:36:40.820 --> 00:36:44.870
as a, you know, multi
column table. So it's just

633
00:36:44.870 --> 00:36:48.950
this framework. And if you
send down the data in

634
00:36:48.950 --> 00:36:51.920
this format, the client will
render it out. Okay. And

635
00:36:51.920 --> 00:36:53.810
you get that for free.
So that's what makes it

636
00:36:53.810 --> 00:36:58.250
really easy for people to
develop plugins under, under.net because

637
00:36:58.310 --> 00:37:00.950
of map particularly makes it
really easy for us to

638
00:37:00.950 --> 00:37:04.970
pick up extensions and whatever
else. Now, I think that

639
00:37:04.970 --> 00:37:11.990
concept of having something that,
you know, an overarching framework

640
00:37:12.260 --> 00:37:18.230
that facilitates people easily writing
plugins, and then this overriding

641
00:37:18.230 --> 00:37:21.770
framework loops through those plugins
and says, what data do

642
00:37:21.770 --> 00:37:24.830
you have available for me?
And then serializes that into

643
00:37:24.830 --> 00:37:28.550
Jason and includes it as
part of the payload and

644
00:37:28.550 --> 00:37:32.180
then uses the same generic
UI that we have. That's

645
00:37:32.180 --> 00:37:35.120
that's w to me, at
least that makes a lot

646
00:37:35.120 --> 00:37:38.000
of sense on other platforms
as well, because even though

647
00:37:38.030 --> 00:37:42.080
we've mentioned that PHP may
have some more sorta tooling

648
00:37:42.080 --> 00:37:45.020
or whatever else, you know,
they don't seem to be

649
00:37:45.020 --> 00:37:49.640
as rich necessarily as what
glimpses or necessarily targeted the

650
00:37:49.640 --> 00:37:53.810
same way as glimpses, you
know, in terms of overall,

651
00:37:54.440 --> 00:37:58.610
you know, diagnostics and, you
know, debugging. And so that's

652
00:37:58.610 --> 00:38:01.460
what we really, you know,
we've started, you know, to

653
00:38:01.460 --> 00:38:05.000
really look at is, you
know, well, is there a

654
00:38:05.000 --> 00:38:07.850
good story that we can
provide, let's say for no

655
00:38:07.850 --> 00:38:13.130
JS, you know, could someone
or us develop, you know,

656
00:38:13.160 --> 00:38:17.540
that frame or that overarching
framework that queries a bunch

657
00:38:17.540 --> 00:38:19.610
of plugins and says, what
data do you have for

658
00:38:19.610 --> 00:38:23.120
me? And then includes that
as part of the payload.

659
00:38:23.660 --> 00:38:27.800
And once that's developed for
that platform, it doesn't matter

660
00:38:27.800 --> 00:38:30.890
what, you know, MVC framework
they happen to be using

661
00:38:30.890 --> 00:38:33.590
in node or whatever the
flavor of the moment is,

662
00:38:33.590 --> 00:38:38.440
or whatever else it's really
simple architecture that people can

663
00:38:38.440 --> 00:38:41.940
plug into. And to me,
that, and to Nick, that

664
00:38:42.010 --> 00:38:45.370
seems to make a lot
of sense. And so at

665
00:38:45.370 --> 00:38:49.690
the moment, our focus has
definitely been on.net, but, you

666
00:38:49.690 --> 00:38:52.060
know, we've had interest from
people who are like, you

667
00:38:52.060 --> 00:38:54.400
know, when is this coming
to PHP? When's this coming

668
00:38:54.400 --> 00:38:57.250
to Ruby on rails? You
know, I want, I want

669
00:38:57.250 --> 00:39:00.460
the exact same ease of
creating a plugin that I

670
00:39:00.460 --> 00:39:04.780
have under.net. Go ahead. And
as I do in PHP

671
00:39:06.130 --> 00:39:09.730
and, or no JS, and,
and that's a story that

672
00:39:09.760 --> 00:39:13.780
we're really interested in and
one that we're trying to

673
00:39:15.010 --> 00:39:18.000
get traction on as well.
Well, cool. This is a,

674
00:39:18.000 --> 00:39:19.860
it's a very exciting time,
and I'm glad that you

675
00:39:19.860 --> 00:39:23.640
guys have had such success.
And I was happy to

676
00:39:23.640 --> 00:39:25.440
be a very small part
of that, and I wish

677
00:39:25.440 --> 00:39:30.300
you all the best. Thank
you very much. Remember folks

678
00:39:30.300 --> 00:39:34.590
can check out glimpse at,
get glimpse.com and it'll have

679
00:39:34.590 --> 00:39:36.330
a little video there, and
it will explain how to

680
00:39:36.330 --> 00:39:39.840
get this installed using nougat.
And thanks again, this has

681
00:39:39.840 --> 00:39:42.330
been another episode of Hansel
minutes, and we'll see you

682
00:39:42.330 --> 00:39:43.080
again next week.

