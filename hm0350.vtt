WEBVTT FILE

1
00:00:12.020 --> 00:00:17.750
From hanselminutes.com. It's Hansel minutes,
a weekly discussion with web

2
00:00:17.750 --> 00:00:22.340
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.340 --> 00:00:28.280
number three 50 recorded live
Thursday, December 13th, 2012. This episode is

4
00:00:28.280 --> 00:00:31.280
brought to you by Tellerik
offering the best in developer

5
00:00:31.280 --> 00:00:38.930
tools and support online@telerik.com and
by Franklin Stott net training

6
00:00:38.930 --> 00:00:42.320
developers to work smarter and
now offering gesture pack a

7
00:00:42.320 --> 00:00:45.980
powerful gesture, recording and recognition
system for Microsoft connect for

8
00:00:45.980 --> 00:00:52.880
windows developers details@gesturepak.com. In this
episode, Scott talks with Michael

9
00:00:52.880 --> 00:00:58.730
SAR, Shea about learning, how
to learn get Hi, this

10
00:00:58.730 --> 00:01:00.740
is Scott Hanselman. This is
another episode of Hansel minutes.

11
00:01:01.160 --> 00:01:02.870
And today on the show,
I've got my buddy Michael

12
00:01:02.870 --> 00:01:06.770
sachet. How's it going, sir?
It's good. Not too bad.

13
00:01:07.370 --> 00:01:08.600
How did you and I
meet and what are we

14
00:01:08.600 --> 00:01:19.160
working on? We met through
Twitter and help me with

15
00:01:19.160 --> 00:01:28.100
that. And so I refactor
some stuff and it's fun.

16
00:01:28.760 --> 00:01:31.430
It is, it is fun.
I, I think that's a,

17
00:01:31.430 --> 00:01:34.340
that's a very, very nice
way of putting it. I

18
00:01:34.340 --> 00:01:37.730
think, I think I said
something more like, may God

19
00:01:37.730 --> 00:01:40.370
have mercy on my soul
for this code that I'm

20
00:01:40.370 --> 00:01:44.000
about to commit? I think
I expressed that it was

21
00:01:44.120 --> 00:01:49.940
pretty horrible. The smallest.net it's
literally smallest D O T

22
00:01:50.180 --> 00:01:53.420
N E t.com. We actually
would be cool if we

23
00:01:53.420 --> 00:01:57.350
could by smallest.net as a
domain, but it's actually smallest

24
00:01:57.350 --> 00:02:01.520
DOD ntt.com is this little
website that people can use.

25
00:02:01.520 --> 00:02:04.460
It'll tell them what the
smallest download for forgotten ed

26
00:02:04.460 --> 00:02:06.440
is that they can get
it'll detect what they've got.

27
00:02:06.890 --> 00:02:09.200
Tell them if they're up
to date. And I wrote

28
00:02:09.200 --> 00:02:12.700
it like in an hour,
two years ago, and it

29
00:02:12.710 --> 00:02:16.640
was basically a switch statement
and it was just horrible.

30
00:02:17.030 --> 00:02:19.760
And then windows eight came
out and then.net four or

31
00:02:19.760 --> 00:02:22.940
five came out and people,
people started actually using this

32
00:02:22.940 --> 00:02:26.360
site. It gets like 10,000
views or something in a

33
00:02:26.360 --> 00:02:29.060
month. And I'm like, wow,
this, this matters. And people

34
00:02:29.060 --> 00:02:31.670
emailed me that we need
to update this. So what

35
00:02:31.670 --> 00:02:34.370
I put out the word,
not only did I get,

36
00:02:34.430 --> 00:02:36.230
Hey, I'll be happy to
help you, which is always

37
00:02:36.230 --> 00:02:39.700
appreciated, but I got pull
requests. And then I said,

38
00:02:39.700 --> 00:02:43.610
wait a second. I'm going
to learn from this guy

39
00:02:44.090 --> 00:02:47.540
because he showed where they
say, talk is cheap. Show

40
00:02:47.540 --> 00:02:55.430
me the code. Here's my
Skype name, call me at

41
00:02:55.430 --> 00:02:57.520
work. And then we had
like an hour long session

42
00:02:57.530 --> 00:03:00.010
where I was trying to
show you how to merge

43
00:03:00.010 --> 00:03:03.220
The pull requests and do
rebasing. And I think I

44
00:03:04.690 --> 00:03:06.400
had to slow down a
couple of times to go

45
00:03:06.400 --> 00:03:08.260
back over stuff. Cause I'm
so used to it. And

46
00:03:08.260 --> 00:03:10.840
I wasn't really aware of
how much you had had

47
00:03:10.930 --> 00:03:14.670
access to it Also what
you're so you're so politically

48
00:03:14.670 --> 00:03:16.890
correct. You're so nice. I
had to slow down a

49
00:03:16.890 --> 00:03:20.340
little bit cause you're an
idiot, Scott. I wouldn't say

50
00:03:20.340 --> 00:03:21.900
that. I mean, it's a
new, it's a tool. I

51
00:03:21.900 --> 00:03:25.950
mean, it's definitely complicated if
you, you know, don't know

52
00:03:26.010 --> 00:03:28.500
like what's going on there's
so the get command line

53
00:03:28.500 --> 00:03:30.720
is not forgiving. I will,
I would definitely say that

54
00:03:30.720 --> 00:03:32.970
much. It takes some time
and there's a lot of

55
00:03:32.970 --> 00:03:35.460
good tools now, but they're
going to know the nuts

56
00:03:35.460 --> 00:03:37.740
and bolts a little bit.
Yeah. I have a, I

57
00:03:37.740 --> 00:03:40.290
have a love, hate relationship
with get, I mean, I've

58
00:03:40.290 --> 00:03:42.450
been using it now for
a couple of years, but

59
00:03:42.450 --> 00:03:45.090
I, I would not say
I can do much more

60
00:03:45.090 --> 00:03:49.530
than, you know, commanding branching,
making diff sending, sending pull

61
00:03:49.530 --> 00:03:54.090
requests where I get really
confused. Are we basing and

62
00:03:54.720 --> 00:03:57.150
some of the crazy fast
forward stuff and I'm always

63
00:03:57.390 --> 00:03:59.850
still even now having to
go off and Google for,

64
00:04:01.770 --> 00:04:03.510
you know, for some of
those commands where it's like,

65
00:04:04.140 --> 00:04:06.840
Oh, was it get reset,
hard head. I always, I

66
00:04:06.870 --> 00:04:09.840
get that one wrong. And
then the one where you

67
00:04:09.840 --> 00:04:11.880
go back in time, two
steps, I always have to

68
00:04:11.880 --> 00:04:15.450
look up what those are,
you know? Yeah. I mean,

69
00:04:15.450 --> 00:04:17.490
I think that's kind of
a problem in general with

70
00:04:17.490 --> 00:04:21.330
get the lot of the
commands they look the same,

71
00:04:21.330 --> 00:04:23.880
but they do totally different
things. Like the fact that

72
00:04:23.880 --> 00:04:26.580
I can name probably four
ways to create a branch.

73
00:04:28.020 --> 00:04:29.400
Well, I guess there's only
two or three, but I

74
00:04:29.400 --> 00:04:31.230
mean the fact that it's
just, you have to think

75
00:04:31.230 --> 00:04:32.580
about it. There's not just
like, you know, you can

76
00:04:32.580 --> 00:04:35.010
do getting branch new branch
name or you can do

77
00:04:35.010 --> 00:04:38.010
get checkout dash be branch
name, or, you know, you

78
00:04:38.010 --> 00:04:41.490
can pull out some new
stuff on the server or

79
00:04:41.490 --> 00:04:43.440
you can check out a
remote branch differently. And it's

80
00:04:43.440 --> 00:04:45.840
just like, Oh, well, which
one of these do I

81
00:04:45.840 --> 00:04:48.330
want to do? And I
think it's really just getting

82
00:04:48.330 --> 00:04:52.650
your head around all that
is sometimes a large task.

83
00:04:53.190 --> 00:04:56.430
Well, it's interesting because there
are people that look, let's

84
00:04:56.430 --> 00:04:58.740
look at it in terms
of programming languages. There are

85
00:04:58.740 --> 00:05:01.590
people who learn Ruby and
a few days into it,

86
00:05:01.590 --> 00:05:04.110
they go, wow, this is
the language of my soul.

87
00:05:04.500 --> 00:05:07.500
Right. I'm supposed to do
this. And then there are

88
00:05:07.500 --> 00:05:10.470
those who learn C-sharp and
have the exact same feeling.

89
00:05:11.220 --> 00:05:13.950
And the same thing occurs,
I think with get and

90
00:05:13.980 --> 00:05:18.270
mercurial. When I learned mercurial,
I was like, Oh yeah,

91
00:05:18.600 --> 00:05:21.570
totally. You know what I
mean? Like even now mercurial

92
00:05:21.570 --> 00:05:25.200
just makes total sense to
me. Totally get it awesome.

93
00:05:25.530 --> 00:05:29.490
You know, probably because it's
kind of like mercurial is

94
00:05:29.490 --> 00:05:32.430
distributed towards control for people
who like SVN. So it's

95
00:05:32.430 --> 00:05:35.400
almost like, you know, it's
just totally intuitive. If you

96
00:05:35.400 --> 00:05:38.220
dug SVN, if you'd have
some version, it doesn't do

97
00:05:38.220 --> 00:05:42.900
that much more. And it's
all the, all the commands

98
00:05:42.900 --> 00:05:45.990
are fair effectively similar. And
then if you want to

99
00:05:45.990 --> 00:05:48.000
get into the crazy stuff,
you can, but you can

100
00:05:48.000 --> 00:05:50.100
get a lot done without
a lot of complications. But

101
00:05:50.700 --> 00:05:53.010
as soon as you get
into get world, it's almost

102
00:05:53.010 --> 00:05:57.650
like, like when you ask
a Unix guy, know I

103
00:05:57.650 --> 00:06:00.920
will use, I need to
solve this one problem. And

104
00:06:00.920 --> 00:06:02.630
the Unix guy says, all
right, well, let's start by

105
00:06:02.630 --> 00:06:04.340
writing this regular expression. You're
like, no, no, no, no,

106
00:06:04.340 --> 00:06:05.660
no, no. It's just let
me just, I just want

107
00:06:05.660 --> 00:06:08.180
to do this one thing.
Okay. Well here's how often

108
00:06:08.180 --> 00:06:09.950
said work. Well, I can
get back up for a

109
00:06:09.950 --> 00:06:12.020
second. I feel like that
would get it's like, okay,

110
00:06:12.020 --> 00:06:13.310
I want to check this
in. All right, well, first

111
00:06:13.310 --> 00:06:15.980
we're going to rebate. It
gets the second it and

112
00:06:15.980 --> 00:06:18.710
it's like, Oh man, you
can just code in. You

113
00:06:18.710 --> 00:06:22.090
know what I mean? Yeah.
Actually I learned material before

114
00:06:22.090 --> 00:06:24.100
I learned to get. And
I think the big thing

115
00:06:24.100 --> 00:06:26.560
about materials material is not
very big on letting you

116
00:06:26.560 --> 00:06:30.160
touch your history. So you
commit something and you can't

117
00:06:30.160 --> 00:06:31.510
like, if you want to
undo it, you have to

118
00:06:31.510 --> 00:06:35.320
revert it and get where
you can just crank it

119
00:06:35.320 --> 00:06:37.960
out and then, or rebates,
which is a way of

120
00:06:37.960 --> 00:06:41.740
modifying your history and get
you that doesn't really exist

121
00:06:41.740 --> 00:06:44.590
in material. And if it
does, I mean, I'm not

122
00:06:44.590 --> 00:06:46.330
aware of it. Cause I
only use it for like

123
00:06:46.360 --> 00:06:48.240
three or four months on
a project. And I just

124
00:06:48.240 --> 00:06:50.050
loved it. Like what you
said, like the command line

125
00:06:50.050 --> 00:06:52.810
is just so much better.
There's like merge, merging branch

126
00:06:52.810 --> 00:06:57.280
makes a branch and you
know, reset, resets your repository

127
00:06:57.280 --> 00:06:59.140
and all you have to
do unlike get where you

128
00:06:59.140 --> 00:07:02.650
have to like supply a
commit hash or a branch

129
00:07:02.680 --> 00:07:04.390
name or something to point
to what you want to

130
00:07:04.390 --> 00:07:08.920
reset to. Yeah, exactly. Exactly.
So I think that, that

131
00:07:08.980 --> 00:07:12.340
the, the source control that
you spend time with the

132
00:07:12.340 --> 00:07:16.690
most before you are introduced
to get color, is your

133
00:07:16.690 --> 00:07:19.990
relationship with get, when did
you say? Yeah. And I

134
00:07:19.990 --> 00:07:23.020
actually started out my very
first job. I walked in

135
00:07:23.020 --> 00:07:27.940
and they're using source safe
and I like died on

136
00:07:27.940 --> 00:07:29.560
the inside. As soon as
I realized I had to

137
00:07:29.560 --> 00:07:32.470
like check code out from
the server and stuff. And

138
00:07:32.470 --> 00:07:34.120
like other people could check
it out and I couldn't

139
00:07:34.120 --> 00:07:35.770
work for three days cause
they were out of the

140
00:07:35.770 --> 00:07:38.290
office and they didn't check
their code in. That was

141
00:07:38.290 --> 00:07:41.080
always fun. There's a lot
of people still using sources.

142
00:07:41.530 --> 00:07:43.300
Oh yeah. I'm aware it's
gone a lot better. I've

143
00:07:43.300 --> 00:07:46.660
heard. I haven't. No it
hasn't. But the point is,

144
00:07:48.130 --> 00:07:50.380
the point is though that
like there may be people

145
00:07:50.380 --> 00:07:51.880
who are listening to this
are like, Oh man, I

146
00:07:51.880 --> 00:07:54.370
wish, you know, like, but,
but at the same time

147
00:07:54.370 --> 00:07:56.530
it did get a lot
of work done. Like people

148
00:07:56.530 --> 00:07:58.870
got a lot of work
done with, with, with source

149
00:07:58.870 --> 00:08:02.050
safe. I'm not saying that
as a Microsoft apologist. I'm

150
00:08:02.050 --> 00:08:04.480
just saying that as like
the, it was it like

151
00:08:04.510 --> 00:08:07.210
after zip files, that was
it for a long time

152
00:08:07.210 --> 00:08:11.110
for windows people at least.
Yeah. Well, I mean it's,

153
00:08:11.350 --> 00:08:12.820
I mean, you get work
done. And we did like

154
00:08:12.880 --> 00:08:14.680
the project Tom was on
it and I got it

155
00:08:15.070 --> 00:08:17.200
like moved over to material
and then we use that

156
00:08:17.200 --> 00:08:22.150
and then I went off
to another job after that

157
00:08:22.150 --> 00:08:25.930
point. So, So do you
think that a new user

158
00:08:25.930 --> 00:08:27.910
should sit down with kit
and learn the command line

159
00:08:27.910 --> 00:08:29.590
or they should go and
learn one of the kind

160
00:08:29.590 --> 00:08:33.700
of half done gooeys that
there are? That is a

161
00:08:33.700 --> 00:08:38.170
great question. So I, I
actually prefer people that are

162
00:08:38.170 --> 00:08:40.000
in the command line first.
And the reason for that

163
00:08:40.000 --> 00:08:42.900
is, is the gummies are
great. I mean, get, has

164
00:08:42.910 --> 00:08:46.390
a built in gooey. They
get Dewey, which is pretty

165
00:08:46.390 --> 00:08:50.560
functional, but they're not very
forgiving if you don't know

166
00:08:50.560 --> 00:08:53.620
what's going on underneath and
without fail, you got on

167
00:08:53.620 --> 00:08:55.950
the fancy GitHub for windows,
you will have to hit

168
00:08:56.610 --> 00:08:58.440
the command line at some
point, cause you're gonna have

169
00:08:58.440 --> 00:09:00.570
a merge conflict and you
have to know how to

170
00:09:00.570 --> 00:09:03.720
go in and, you know,
continue a merge and run

171
00:09:03.720 --> 00:09:05.700
your merge tool and all
that. And so I think

172
00:09:05.730 --> 00:09:07.620
learning the command line, you
know, like, okay, when I

173
00:09:07.630 --> 00:09:10.170
click the sync button, what's
really happening, like, am I

174
00:09:10.170 --> 00:09:12.630
pushing changes? Am I pulling
changes? Is a merge going

175
00:09:12.630 --> 00:09:15.330
to happen? I think just
kind of learning to, even

176
00:09:15.330 --> 00:09:16.980
if it's a baseline, like
I need to learn how

177
00:09:16.980 --> 00:09:19.650
to push and pull and
do a merge and commit

178
00:09:19.710 --> 00:09:21.360
to command line is the
best way, because then when

179
00:09:21.360 --> 00:09:25.590
something breaks, you know, you
can kinda run the look

180
00:09:25.590 --> 00:09:27.390
at the command line and
say, okay, well I can

181
00:09:27.390 --> 00:09:29.670
see my status and stuff
here, or I can reset

182
00:09:29.700 --> 00:09:33.750
and that's not always accessible
via the buoys that are

183
00:09:33.750 --> 00:09:36.210
available. So I think command
line first and then find

184
00:09:36.210 --> 00:09:39.330
a degree that argument, your
command line usage is almost

185
00:09:39.330 --> 00:09:42.500
the best way to go.
You mentioned the sync button

186
00:09:42.500 --> 00:09:45.020
and when we say the
sync button right now, the

187
00:09:45.170 --> 00:09:47.870
most well-designed or the prettiest
or the kind of the

188
00:09:47.870 --> 00:09:51.080
premier get a gooey would
be the get hub for

189
00:09:51.080 --> 00:09:54.680
windows, client, which is optimized
for the GitHub website, but

190
00:09:54.680 --> 00:09:57.590
you could take existing, get
repositories and drag it in.

191
00:09:57.590 --> 00:10:01.190
So if you had a
local repository or if you

192
00:10:01.190 --> 00:10:04.700
were using Bitbucket or a
code Plex, you could bring

193
00:10:04.700 --> 00:10:09.500
that, get repository down, drag
it into GitHub. And there's

194
00:10:09.500 --> 00:10:13.280
this sync button. And I
think that the fact that

195
00:10:13.280 --> 00:10:16.700
there is a button called
sync, which is effectively the,

196
00:10:17.000 --> 00:10:18.590
you know, figure it out
and get me completely up

197
00:10:18.590 --> 00:10:24.140
to date, but there is
no single command line command

198
00:10:24.170 --> 00:10:28.220
that, that, that, that maps
directly to that is kind

199
00:10:28.220 --> 00:10:30.230
of proof that there's a
problem with get, you know

200
00:10:30.230 --> 00:10:32.570
what I mean? The GitHub
for windows guys said, we

201
00:10:32.570 --> 00:10:36.200
need a button that just
gets regular people caught up,

202
00:10:37.370 --> 00:10:38.990
but it does a bunch
of stuff in the background.

203
00:10:39.860 --> 00:10:42.920
Well, yeah, what's interesting about
those two is, is, so

204
00:10:42.920 --> 00:10:44.960
if you're on, if you're
on a branch and you're

205
00:10:44.960 --> 00:10:47.930
trying to seek your branch
and you're ahead, and someone

206
00:10:47.930 --> 00:10:51.290
else's committed to that branch,
it doesn't work because there

207
00:10:51.290 --> 00:10:53.210
is, as you said, there's
no analog to the command

208
00:10:53.210 --> 00:10:55.640
line for that action. And
it requires, you know, okay,

209
00:10:55.980 --> 00:10:57.530
you have to make a
decision at that point in

210
00:10:57.530 --> 00:10:59.240
time, how you want to
handle that. And I think

211
00:11:00.080 --> 00:11:02.930
that's a, that's an interesting,
and it's part of get,

212
00:11:03.140 --> 00:11:05.390
because it's, it's, you can
modify the history in a

213
00:11:05.390 --> 00:11:08.930
lot of ways like that,
so, Right, right. And the

214
00:11:08.930 --> 00:11:12.890
sync button is, is fantastic
and works perfectly until it

215
00:11:12.890 --> 00:11:17.930
completely doesn't work at all.
Yeah. We're dropping you into

216
00:11:17.930 --> 00:11:20.450
the shell that you've never
seen before. Get ready for

217
00:11:20.450 --> 00:11:25.340
it. Yep. It's a, it
can be it's fun when

218
00:11:25.340 --> 00:11:27.410
people look at it and
go, Oh, there's this big

219
00:11:27.410 --> 00:11:30.560
red thing that says abort
or open shell and you

220
00:11:30.560 --> 00:11:33.110
just don't know which one
to click sometimes. Right. Right.

221
00:11:33.410 --> 00:11:35.570
And then, and then that's
kind of the, the sad

222
00:11:35.570 --> 00:11:38.390
thing about, about GIF is
that they've done such an

223
00:11:38.390 --> 00:11:40.520
amazing job of hiding it
with the up for windows

224
00:11:40.520 --> 00:11:44.300
tool. And then there's not
even an off ramp, it's

225
00:11:44.360 --> 00:11:47.660
it? Doesn't, they don't, they
don't slowly like back you

226
00:11:47.660 --> 00:11:49.850
down from the, a, the
stuff they've been hiding, it

227
00:11:49.850 --> 00:11:52.910
just disappears. And it's like,
alright, we've, you know, this,

228
00:11:52.930 --> 00:11:57.100
this obstruction has officially leaked
and it's over now abort

229
00:11:57.100 --> 00:12:02.400
or open command shell. Yeah.
I think doing like often,

230
00:12:02.400 --> 00:12:04.320
I just want to say,
get me the latest stuff

231
00:12:04.350 --> 00:12:08.670
and in whatever way possible.
So I think, I believe

232
00:12:08.670 --> 00:12:11.760
it does a good whole,
and then they get merged

233
00:12:11.790 --> 00:12:16.650
if it can. And then
it also is a push.

234
00:12:16.770 --> 00:12:18.600
So I'm not exactly one
of them should have the

235
00:12:18.600 --> 00:12:22.020
order because I can't see
that what's happening. But typically

236
00:12:22.020 --> 00:12:23.940
what you do, if you
want to seek your pository

237
00:12:23.970 --> 00:12:29.340
and without changing history is
you pull the branch from

238
00:12:29.340 --> 00:12:32.100
the remote repository, which could
be, you know, another full

239
00:12:32.220 --> 00:12:37.470
computer get over whatever. Yeah.
So it brings all those

240
00:12:37.470 --> 00:12:39.480
changes and then you merge
those. Then you go through

241
00:12:39.480 --> 00:12:44.160
the marriage and then you
push any local changes that

242
00:12:44.160 --> 00:12:45.960
are on the server up.
So like, you know, you're

243
00:12:45.960 --> 00:12:48.570
bringing in the changes that
exist and you're pushing them

244
00:12:48.570 --> 00:12:50.700
up or in the case
that there are no changes,

245
00:12:50.700 --> 00:12:55.830
you would just run a
push. And so that's what

246
00:12:55.830 --> 00:12:59.790
it's doing behind the background.
I'd not, That's kind of

247
00:12:59.790 --> 00:13:01.170
the thing that you'd want
to do all the time.

248
00:13:01.170 --> 00:13:02.730
I mean, that's what I
do kind of every morning.

249
00:13:04.140 --> 00:13:07.530
Yeah. That's an interesting thing
too. I know a lot

250
00:13:07.530 --> 00:13:09.360
of people are of that
mindset where, you know, I've

251
00:13:09.360 --> 00:13:12.930
got to get my changes
all the time. I'm not,

252
00:13:14.820 --> 00:13:17.970
if I'm not, if I'm
working on something that's disconnected

253
00:13:17.970 --> 00:13:21.420
from what's being done, I
don't seem to care. Cause

254
00:13:21.480 --> 00:13:26.670
it doesn't matter at a
later date. Talk about that

255
00:13:26.670 --> 00:13:28.740
because I think that at
the beginning, we said about

256
00:13:29.070 --> 00:13:33.750
how your previous experiences color,
your color, your relationship with

257
00:13:33.750 --> 00:13:38.070
kid, I'm really obsessed with
always being up to date.

258
00:13:38.550 --> 00:13:41.820
And, and that is probably
because of a fear of

259
00:13:41.820 --> 00:13:45.330
emerge going bad, right. Because
if I don't have to

260
00:13:45.330 --> 00:13:48.270
merge, then I don't have
to face that fear. I

261
00:13:48.270 --> 00:13:50.430
just have to make sure
that I've got the latest

262
00:13:50.430 --> 00:13:54.540
stuff and my mergers become
very small and very non-scary,

263
00:13:54.870 --> 00:13:57.540
but you sounds like you'll
stay disconnected for days, weeks

264
00:13:58.920 --> 00:14:01.590
Not weeks. I think there's
a show a couple of

265
00:14:01.590 --> 00:14:03.810
weeks, a little bit back
that you had about continuous

266
00:14:03.810 --> 00:14:06.180
deployment. That as a mindset
that I try to follow

267
00:14:06.180 --> 00:14:10.680
with, get code in production,
not necessarily features. So I'm

268
00:14:10.680 --> 00:14:15.180
like tested code and like
fully working code quickly. And

269
00:14:15.180 --> 00:14:17.580
so I tend to do
lots of small commits throughout

270
00:14:17.580 --> 00:14:20.070
the day. So I'm like
I added these methods and

271
00:14:20.070 --> 00:14:22.500
they work and it's like
commit those. And then, you

272
00:14:22.500 --> 00:14:24.990
know, I get kind of
a stopping point where, you

273
00:14:24.990 --> 00:14:26.880
know, something's complete and it
may not be the whole

274
00:14:26.880 --> 00:14:29.730
feature. Like maybe I've only
wrote the data access. I

275
00:14:29.730 --> 00:14:32.010
will go ahead and merge
that into master or the

276
00:14:32.010 --> 00:14:35.280
branch or whatever, then I'm
on. And a lot of

277
00:14:35.280 --> 00:14:36.810
people, what they want to
do is make sure that

278
00:14:36.810 --> 00:14:39.570
their branch has always has
all the changes. And so

279
00:14:39.630 --> 00:14:42.510
I feel like, well, I'm
working on, you know, this

280
00:14:42.900 --> 00:14:46.500
feature and other people are
working on bug fixes or

281
00:14:46.500 --> 00:14:49.140
whatever. And as long as
those bug fixes, aren't associated

282
00:14:49.140 --> 00:14:52.430
with my feature, to me,
it doesn't matter if I

283
00:14:52.430 --> 00:14:54.680
have them in my work,
in my branch. I'm working

284
00:14:54.680 --> 00:14:57.440
out of, because at the
end of the day, I'm

285
00:14:57.440 --> 00:15:01.040
just going to, hopefully if
your code is built properly

286
00:15:01.520 --> 00:15:06.290
or it's not, the churn
is not super high, you

287
00:15:06.290 --> 00:15:09.560
can just go in and
do a rebate, which is,

288
00:15:09.950 --> 00:15:11.750
you know, something kind of
advanced, or you can just

289
00:15:11.750 --> 00:15:14.690
merge it if you don't
mind, most commits. And there

290
00:15:14.690 --> 00:15:16.790
shouldn't be too many conflicts
that you have to deal

291
00:15:16.790 --> 00:15:21.880
with Basically. And assuming that
people know what that means.

292
00:15:21.880 --> 00:15:25.030
Let's talk about that because
rebase seems to be like

293
00:15:25.300 --> 00:15:29.230
the first thing that someone
learns that's, that's, that's kind

294
00:15:29.230 --> 00:15:31.780
of scary and makes no
sense. You know, it's just

295
00:15:32.260 --> 00:15:35.710
words that, that totally makes
sense to you. Or to

296
00:15:35.710 --> 00:15:37.600
this day, I still don't
quite understand what a rebase

297
00:15:37.600 --> 00:15:40.860
does, but I know that
people use it like out

298
00:15:40.860 --> 00:15:43.030
like a weapon, you know,
like get users are like,

299
00:15:43.060 --> 00:15:44.870
Oh yeah, I did a
rebate. I'm like, Oh God,

300
00:15:44.890 --> 00:15:49.570
what is that? That's you
must be advanced. So a

301
00:15:49.570 --> 00:15:55.210
rebate is a very low
way of rewriting a history

302
00:15:55.390 --> 00:15:58.870
for a set of changes.
So like a set of

303
00:15:58.870 --> 00:16:01.840
commits rather. So that could
be committed in a branch

304
00:16:01.960 --> 00:16:05.320
commit against another branch. So
let's say I have my

305
00:16:05.320 --> 00:16:09.520
master branch. And then I
make what are normally called

306
00:16:09.520 --> 00:16:12.790
topic branches, which is like,
you know, some branch for

307
00:16:12.790 --> 00:16:16.270
a specific bug or topic
that I'm working on. And

308
00:16:16.270 --> 00:16:20.920
then someone's made, commits the
master. So my branch will

309
00:16:20.920 --> 00:16:24.690
point to the commit that
master was head of it.

310
00:16:24.690 --> 00:16:27.210
At the time I made
the branch, that's like the

311
00:16:27.370 --> 00:16:30.070
newest commit on master. And
then so people have added

312
00:16:30.070 --> 00:16:32.740
changes. So when I rebase,
what I'm doing is I'm

313
00:16:32.740 --> 00:16:36.580
saying by get rebates and
then typically it's against master

314
00:16:36.580 --> 00:16:41.470
or another branch. And that
just says, find the newest

315
00:16:41.470 --> 00:16:46.690
commit on master of whatever.
I'm just getting smashed for

316
00:16:46.690 --> 00:16:50.920
this and move the changes
from the current one into

317
00:16:50.920 --> 00:16:53.470
that. So you're changing the
base commit of your branch

318
00:16:53.500 --> 00:16:57.280
or set of changes to
a new commit. So you

319
00:16:57.280 --> 00:16:58.930
can even go back. I
think you could even go

320
00:16:58.930 --> 00:17:01.180
back in time. I've never
tried that, but I don't

321
00:17:01.180 --> 00:17:04.240
see why not. But basically
all it does is say,

322
00:17:04.330 --> 00:17:08.860
take the new changes and
make my history reflect those.

323
00:17:09.580 --> 00:17:11.230
Okay. So let me see
if I understand this and

324
00:17:11.240 --> 00:17:15.430
I'll play it back to
you. Okay. Rebase the statement

325
00:17:15.430 --> 00:17:19.930
here. Okay. So me and
a guy show up at

326
00:17:19.930 --> 00:17:22.930
work on Monday and I
make a branch of the

327
00:17:22.930 --> 00:17:25.780
work that he did on
Monday. So I'm off kind

328
00:17:25.780 --> 00:17:28.720
of on a branch doing
my own thing. He's on

329
00:17:28.720 --> 00:17:32.170
master. He does a bunch
of work Monday, Tuesday, Wednesday,

330
00:17:32.170 --> 00:17:37.180
Thursday, he's coming, Thursday comes
along, he's got Thursdays work

331
00:17:37.180 --> 00:17:39.820
and Wednesdays work and Tuesdays
work all sitting on master.

332
00:17:40.180 --> 00:17:42.880
I've been working off on
Monday stuff all this time.

333
00:17:43.600 --> 00:17:46.750
I have two choices. Now
I could merge my stuff

334
00:17:46.780 --> 00:17:54.150
in with master, or I
could basically take the changes

335
00:17:54.150 --> 00:17:58.020
that I've added since Monday.
And rather than applying them

336
00:17:58.020 --> 00:18:01.140
to Monday, I'll apply them
and see if they apply

337
00:18:01.140 --> 00:18:03.600
to his new stuff on
Thursday. So I kind of

338
00:18:03.930 --> 00:18:06.480
back up, you know, kind
of unroll my stuff, hold

339
00:18:06.480 --> 00:18:09.030
onto it for a second,
go back up to Thursday

340
00:18:09.030 --> 00:18:13.970
and then play it back.
Exactly. So typically that goes

341
00:18:13.970 --> 00:18:17.150
really well. Unless, like I
said, there's a lot of

342
00:18:17.180 --> 00:18:19.430
churn, especially on the stuff
that your branch is in.

343
00:18:20.060 --> 00:18:24.350
So like, let's say from
Monday to Thursday, he doesn't

344
00:18:24.350 --> 00:18:27.710
touch anything that you're working
on. And if you do

345
00:18:27.710 --> 00:18:29.780
a marriage, then you're, you'll
get emergency ma'am, which is

346
00:18:29.780 --> 00:18:32.600
not a bad thing. It's
just kind of a preference.

347
00:18:32.720 --> 00:18:35.660
Like some places don't mind
merge, commits the place I

348
00:18:35.660 --> 00:18:37.760
work. We try not to
have merge commits because they

349
00:18:37.760 --> 00:18:43.490
make reverting changes out of
a branch kind of trickier,

350
00:18:45.530 --> 00:18:48.200
Slow down. So a merge
commit would be a commit

351
00:18:48.200 --> 00:18:50.450
that is just showing all
of the results of the

352
00:18:50.450 --> 00:18:53.900
merge. So they tend to
be big and messy. No.

353
00:18:53.900 --> 00:18:57.170
So a merge commit is
a specific commit that contains

354
00:18:58.910 --> 00:19:09.800
information to resolve any conflicts.
Like what if, if I

355
00:19:09.800 --> 00:19:11.270
look at it in a
diff tool, what's it going

356
00:19:11.270 --> 00:19:15.230
to look like? It depends.
So let's say, let's say

357
00:19:15.230 --> 00:19:17.480
that we have like a
small, a small file has

358
00:19:17.480 --> 00:19:20.300
got a method, you know,
not to get, get people

359
00:19:20.300 --> 00:19:22.880
and it's got some stuff
and you change something in

360
00:19:22.880 --> 00:19:25.010
and he changed something in
it. And there's a conflict

361
00:19:25.010 --> 00:19:27.290
where you both change the
same line, but there's no

362
00:19:27.290 --> 00:19:29.930
way to resolve that. You
know, with no methods like

363
00:19:29.930 --> 00:19:31.490
you both, didn't like, what
are you going to rename

364
00:19:31.490 --> 00:19:33.200
a variable? And the other
one, you know, rename another

365
00:19:33.200 --> 00:19:37.430
thing. So emergent commit would
say, you know, you get

366
00:19:37.430 --> 00:19:41.510
a three way merge tool,
like Qaeda for the on

367
00:19:41.510 --> 00:19:43.250
compare, whatever, and you would
have to pick, okay, I

368
00:19:43.250 --> 00:19:45.020
want this line or I
want it. You need to

369
00:19:45.240 --> 00:19:49.160
mainly make some changes. And
those changes that you create

370
00:19:49.160 --> 00:19:51.320
in that merge tool are
typically what show up. So

371
00:19:51.320 --> 00:19:54.080
it's like, okay, you know,
he renamed this variable and

372
00:19:54.080 --> 00:19:55.730
I renamed it to something
else. And so we had

373
00:19:55.730 --> 00:19:58.100
to pick one of those.
So will have the correct

374
00:19:58.850 --> 00:20:04.670
diff there to the past
rather to make those changes.

375
00:20:04.670 --> 00:20:09.050
So it reflects the necessary
patches to resolve any emergence

376
00:20:09.050 --> 00:20:12.830
conflicts. That's what a merged
commit has. We'll get into

377
00:20:12.830 --> 00:20:15.620
trouble with this. Like where,
when is using rebates, just

378
00:20:15.620 --> 00:20:17.450
a phenomenally bad idea, and
it's going to hurt you.

379
00:20:18.710 --> 00:20:21.980
Rebates is a phenomenally bad
idea. If you're rebasing changes

380
00:20:21.980 --> 00:20:26.120
that have already been pushed
to another repository And that's

381
00:20:26.120 --> 00:20:29.180
because other people are going
to be basing all of

382
00:20:29.180 --> 00:20:32.930
their work on those commits
that are now public. Exactly.

383
00:20:32.930 --> 00:20:37.370
So you're affecting public history,
which is bad and affecting

384
00:20:37.370 --> 00:20:40.520
private history is not because
it's not anywhere else. So

385
00:20:41.420 --> 00:20:45.890
there's a flavor of rebasing
called interactive rebasing, where you

386
00:20:45.890 --> 00:20:50.200
actually are allowed to four
modified commit messages or which

387
00:20:50.210 --> 00:20:55.210
commits are being rebased against
another branch. And that's a

388
00:20:55.210 --> 00:20:58.660
really actually handy tool. So
for example, I do a

389
00:20:58.660 --> 00:21:01.780
lot of a work in
progress commit on my local

390
00:21:01.780 --> 00:21:04.270
branches when I like get
up to go home at

391
00:21:04.270 --> 00:21:08.980
the end of the day.
So I don't have those

392
00:21:08.980 --> 00:21:10.990
changes just floating on my
machine for, let's say, you

393
00:21:10.990 --> 00:21:15.010
know, everything breaks in like
open visual studio and it

394
00:21:15.010 --> 00:21:18.010
rewrites, you know, a file
for some reason. And I

395
00:21:18.010 --> 00:21:19.750
have a commit now over,
I don't have to worry

396
00:21:19.750 --> 00:21:22.060
about what happened. I can
just get that state. And

397
00:21:22.060 --> 00:21:24.040
so I don't really want
to work in progress, commit

398
00:21:24.040 --> 00:21:27.250
on master, but I've committed
to a branch already, but

399
00:21:27.250 --> 00:21:29.590
it's a local branch only.
So when I do a

400
00:21:29.590 --> 00:21:33.770
rebate, I'll either squash that
commit into another commit, which

401
00:21:33.830 --> 00:21:37.450
means it's just combining the
two sets of changes in

402
00:21:37.450 --> 00:21:41.200
those two commits into one,
or I'll just re I'll

403
00:21:41.200 --> 00:21:45.310
modify that commit message to
say what I actually did,

404
00:21:45.310 --> 00:21:48.510
if I've realized that I
was actually done. That brings

405
00:21:48.510 --> 00:21:51.630
up another interesting question. I
like to commit stuff a

406
00:21:51.630 --> 00:21:55.020
lot, almost, maybe too much.
It's kind of a paranoia

407
00:21:55.410 --> 00:21:57.870
because I just, I just
don't know what I'm doing

408
00:21:57.870 --> 00:21:59.430
and I just don't want
to lose things. So I

409
00:21:59.430 --> 00:22:01.740
just, I tend to commit
anytime, anything I don't want

410
00:22:01.740 --> 00:22:07.110
to lose happens anytime, anything
that I would just go,

411
00:22:07.140 --> 00:22:08.610
Oh man, I, you know,
I, I might need that

412
00:22:08.610 --> 00:22:11.460
later. So I'll just commit,
commit, commit. I wouldn't say

413
00:22:11.460 --> 00:22:14.220
it's as bad as the
people that do that kind

414
00:22:14.220 --> 00:22:17.460
of habitual control S that
kind of the little Twitch

415
00:22:17.460 --> 00:22:20.190
that we develop as programmers,
we just hit control S

416
00:22:20.940 --> 00:22:23.760
but you know, I do
have a tendency to do

417
00:22:23.760 --> 00:22:26.700
that quite a bit. So
my, my question is, can

418
00:22:26.700 --> 00:22:28.560
I, in, in, in get,
is it something that I

419
00:22:28.560 --> 00:22:31.860
could do where I could
commit 20 times locally and

420
00:22:31.860 --> 00:22:34.860
then say those 20 really
represent one that I want

421
00:22:34.890 --> 00:22:38.370
other people to see. So
that's, that's what a rebase

422
00:22:38.370 --> 00:22:41.550
is. So you interactive rebase
rather. So you do get

423
00:22:41.550 --> 00:22:45.300
rebates dash. I is the
command and it brings up

424
00:22:45.330 --> 00:22:50.220
a text file effectively. That
has lines that look like

425
00:22:50.310 --> 00:22:54.390
hick the commit hash, which
is just the unique identifier

426
00:22:54.390 --> 00:22:56.820
for a commit. And then
the commit message, the first

427
00:22:56.820 --> 00:22:59.970
line of it, at least.
And then what you can

428
00:22:59.970 --> 00:23:02.880
do is you can actually
just in there there's things

429
00:23:02.880 --> 00:23:05.970
you can do. You can
squash, you can just delete

430
00:23:05.970 --> 00:23:07.770
the line. So you don't
even use the commit if

431
00:23:07.770 --> 00:23:10.710
you don't want to go
whatever reason. And then you

432
00:23:10.710 --> 00:23:13.620
can, you know, do some
changes. And I think there's

433
00:23:13.620 --> 00:23:14.580
something else you can do,
but I don't know to

434
00:23:14.580 --> 00:23:16.830
tell my head, cause I
normally don't use picking squash

435
00:23:16.830 --> 00:23:20.400
or delete a line. So
you can actually squash all

436
00:23:20.400 --> 00:23:22.140
those into one commit. So
you'd have one that was

437
00:23:22.140 --> 00:23:25.470
picked and then you squash
the other 19 and then

438
00:23:25.500 --> 00:23:27.780
it'll you save that. And
so do that and it'll

439
00:23:27.780 --> 00:23:30.330
pop up another dialogue, let
you modify all those commit

440
00:23:30.330 --> 00:23:35.010
messages into one, however you
want. And so, yeah, that's

441
00:23:35.010 --> 00:23:37.050
a very common thing to
do. Like, let's say you're

442
00:23:37.050 --> 00:23:40.260
fixing a bug and you'd
have 15 commits for a

443
00:23:40.260 --> 00:23:42.420
bug fix and then going
to put that bug fixing

444
00:23:42.420 --> 00:23:46.190
master, well, you could rebate
those into one commit and

445
00:23:46.190 --> 00:23:47.990
push in a master and
let's say, will you find

446
00:23:47.990 --> 00:23:51.860
out that, Oh, that's actually
causing another problem on master

447
00:23:53.120 --> 00:23:57.230
in production. And so instead
of having to go and

448
00:23:57.260 --> 00:24:00.050
revert 15 commits, you just
revert one to revert that

449
00:24:00.050 --> 00:24:01.700
bug fix and then fix
it on your branch and

450
00:24:01.700 --> 00:24:04.550
then recommit. It is the
tip. Yeah. So that's a

451
00:24:04.550 --> 00:24:08.090
really good workflow. So I
actually prefer commit early commit

452
00:24:08.090 --> 00:24:13.700
often because it's way easier
to modify all your changes.

453
00:24:14.990 --> 00:24:17.960
When you have lots of
small commits, then if you

454
00:24:17.960 --> 00:24:20.540
have like, Oh, well I've
fixed these 23 files and

455
00:24:20.600 --> 00:24:23.930
actually don't want to do
two of them. So you

456
00:24:23.930 --> 00:24:26.030
have to go through a
lot of work to only

457
00:24:26.120 --> 00:24:28.790
add certain files to the
stage and, you know, commit

458
00:24:28.790 --> 00:24:31.880
those and then reset certain
ones. And I think frequent

459
00:24:31.880 --> 00:24:35.470
committee and work a lot
better. Now, if, if I,

460
00:24:35.470 --> 00:24:38.680
if I do this squashing,
does it, does it squash

461
00:24:38.680 --> 00:24:40.630
it locally? In the sense
of, if I looked at

462
00:24:40.630 --> 00:24:42.700
my local log, it, it
will always be that way.

463
00:24:43.120 --> 00:24:47.750
Or is it only, only
the result of the like,

464
00:24:47.750 --> 00:24:49.780
I guess I'm trying to
understand what happens on the

465
00:24:49.780 --> 00:24:52.390
server versus which is what
happens on my local machine.

466
00:24:53.170 --> 00:24:55.000
Yeah. So you're not squashing
on the server, I guess

467
00:24:55.480 --> 00:24:58.240
you you've never really want,
like, you mostly want to

468
00:24:58.240 --> 00:25:00.430
do these kinds of things
on local branches. You can

469
00:25:00.430 --> 00:25:02.830
do these kinds of things
on a remote, but it's

470
00:25:03.340 --> 00:25:07.960
kind of dangerous. So like
you have a branch, like,

471
00:25:08.080 --> 00:25:10.450
let's say you have your,
your branch, you know, my

472
00:25:10.450 --> 00:25:13.180
20 commit branch. And you're
about to push that to

473
00:25:13.180 --> 00:25:14.190
the server and be like,
why do I want to

474
00:25:14.190 --> 00:25:17.020
send 20? So you had
rebased locally and that'll actually

475
00:25:17.020 --> 00:25:19.540
turn all those into one
commit in your local history.

476
00:25:19.570 --> 00:25:21.700
And you'll just see it
as one commit. You want

477
00:25:21.700 --> 00:25:26.840
to see those 20 commits
anymore? Clear that up. Yeah.

478
00:25:27.160 --> 00:25:30.520
Okay. All right. I'm getting
there. I'm getting there. I'm

479
00:25:30.520 --> 00:25:33.310
a little slow, but I'll
figure it out. How long

480
00:25:33.310 --> 00:25:36.940
did this take? You Take
me to do what? To

481
00:25:36.940 --> 00:25:40.480
like figure all this out.
Oh yeah. Oh, I don't

482
00:25:40.480 --> 00:25:42.880
know. I just like, I
would, I learned, you know,

483
00:25:42.880 --> 00:25:45.020
all the basic stuff first,
and then I would run

484
00:25:45.020 --> 00:25:47.800
into a problem that I
Google it or get on

485
00:25:49.180 --> 00:25:53.230
stack overflow or programmers or
a chat room and bother

486
00:25:53.230 --> 00:25:55.600
someone. And they're like, what
command? Don't you? I don't

487
00:25:55.600 --> 00:25:58.000
know what's happening here. And
a lot of it's the

488
00:25:58.000 --> 00:25:59.950
Google through of being able
to know what you're searching

489
00:25:59.950 --> 00:26:04.120
for and get like, I
like what just happened? Like

490
00:26:04.180 --> 00:26:06.190
I lost the commit. Like
how do you find that?

491
00:26:06.220 --> 00:26:08.590
Cause you know, everybody has
their way of doing it.

492
00:26:08.590 --> 00:26:11.410
Sometimes it feels like, yeah,
which one is right. And

493
00:26:11.410 --> 00:26:13.840
so it's just a lot
of like, it was a

494
00:26:13.840 --> 00:26:18.340
lot of, Oh no, I
just broke something. How do

495
00:26:18.340 --> 00:26:21.220
I fix it? And then
figuring that out and then

496
00:26:21.220 --> 00:26:25.050
just doing it a lot
every day. And is, is

497
00:26:25.110 --> 00:26:27.340
it true that you, you
really can't lose a lot

498
00:26:27.340 --> 00:26:30.610
of stuff with me if
it's committed, is it difficult

499
00:26:30.610 --> 00:26:33.160
to lose things or, or
can you really shoot yourself

500
00:26:33.160 --> 00:26:36.460
in the foot quite easily?
You could shoot yourself in

501
00:26:36.460 --> 00:26:41.020
the foot if you deleted
a branch without, you know,

502
00:26:41.020 --> 00:26:43.680
merging some other ones. But
I mean, if it's committed

503
00:26:43.740 --> 00:26:47.760
and you're not deleting branches
and you're pushing stuff to

504
00:26:47.760 --> 00:26:51.300
the, some kind of centralized
repository or other repositories, then

505
00:26:51.300 --> 00:26:54.990
it's really, really hard to
lose stuff. And even, even

506
00:26:54.990 --> 00:26:56.730
in the cases where you
do get rid of stuff,

507
00:26:56.760 --> 00:26:58.740
a lot of times you
can still get it back

508
00:26:58.890 --> 00:27:04.890
with it's called we flog.
And there's a file system

509
00:27:04.920 --> 00:27:07.110
check one where you can
like see dangling commits, which

510
00:27:07.110 --> 00:27:12.150
has all kinds of crazy
town. Yeah. It's what happens

511
00:27:12.150 --> 00:27:15.150
when you, like, let's say
you check out a branch

512
00:27:15.180 --> 00:27:19.920
and then you go, I
don't know how it actually

513
00:27:19.920 --> 00:27:22.650
happens. Actually. I just know
it happens sometimes. Like when

514
00:27:22.650 --> 00:27:24.750
you get into like rebates
as a merged state, sometimes

515
00:27:24.750 --> 00:27:27.600
commits get stuck around, but
don't necessarily get removed. If

516
00:27:27.600 --> 00:27:29.760
you like a board, a
commit, not a board, a

517
00:27:29.760 --> 00:27:32.670
committed board merger, border rebates.
And so you can see

518
00:27:32.670 --> 00:27:38.580
them there or so that,
that happens sometimes. So I'm

519
00:27:38.580 --> 00:27:40.560
not really sure exactly how
it happens. I just know

520
00:27:40.560 --> 00:27:43.680
it does. And they're not,
it's just like lost in

521
00:27:43.680 --> 00:27:46.650
the index, which is, it's
not lost. It's just still

522
00:27:46.650 --> 00:27:49.320
stuck in the index, but
it's not inside. It's not

523
00:27:49.640 --> 00:27:52.920
associated with any branch, if
that makes sense, which is

524
00:27:52.920 --> 00:27:55.910
a commit that has no
home. Oh, a commit that

525
00:27:55.910 --> 00:27:58.370
has no home. I see.
Okay. That's yeah, that makes

526
00:27:58.370 --> 00:28:00.140
sense. Let me try to
put it in the context

527
00:28:00.170 --> 00:28:03.920
of file systems. Right. Cause
it really is just a

528
00:28:03.920 --> 00:28:07.280
file system. That's, that's the
clever thing about, about get,

529
00:28:07.610 --> 00:28:11.330
and you know, the times
happen where you, you know,

530
00:28:11.330 --> 00:28:13.430
you lose a file even
as a, as a technical

531
00:28:13.430 --> 00:28:15.530
person, you lose a file
and you're wandering around in

532
00:28:15.530 --> 00:28:17.060
your hard drive looking for,
and you're like, how did

533
00:28:17.060 --> 00:28:20.720
it end up in there?
Yeah. What's the one last

534
00:28:20.730 --> 00:28:22.100
thing about get to, as
you can always find a

535
00:28:22.100 --> 00:28:26.480
file, not a fine file.
Find it commit by it's

536
00:28:26.480 --> 00:28:30.320
hash a lot of times.
Right? Cause every commit has

537
00:28:30.320 --> 00:28:32.930
a unique hash. Yeah. So
I mean, you can move

538
00:28:32.930 --> 00:28:35.390
anything from any branch, another
branch with it, if you

539
00:28:35.390 --> 00:28:39.230
know, it's hash, One of
the things that I've been

540
00:28:39.230 --> 00:28:43.400
most happy about in learning
get with, with the project

541
00:28:43.400 --> 00:28:46.280
that we're working on smallest.net
was that we hooked it

542
00:28:46.280 --> 00:28:49.070
up on Azure and then
set up the, the hook

543
00:28:49.100 --> 00:28:53.420
on GitHub. So when we
push to master on, on

544
00:28:53.420 --> 00:28:55.690
GitHub, it automatically publishes. And
I think this is a

545
00:28:56.020 --> 00:28:58.850
thing that Heroku did a
couple of years ago and

546
00:28:58.850 --> 00:29:00.650
everyone kind of thought that
was awesome. And now that

547
00:29:00.650 --> 00:29:03.890
seems to be the standard
way of, of putting websites

548
00:29:03.890 --> 00:29:06.530
live. These simple ones is
just you push it up

549
00:29:06.530 --> 00:29:10.190
to master and then get
we'll go and notify Azure.

550
00:29:10.190 --> 00:29:14.330
That it's changed. Yeah. I
do really like that. I'm

551
00:29:14.330 --> 00:29:15.620
not sure if you're trying
to ask me a question

552
00:29:15.620 --> 00:29:21.380
in there or it's just
my opinion. I'm sorry. Yeah,

553
00:29:21.380 --> 00:29:23.120
no, I like that. There's
a lot of, there's a

554
00:29:23.120 --> 00:29:25.100
ton of hooks, a get
hub. That's like a mountain

555
00:29:25.100 --> 00:29:26.990
of them. Is that something
that you've done a lot

556
00:29:26.990 --> 00:29:29.270
of? Do you do that
in like for, for real

557
00:29:29.270 --> 00:29:33.410
sites and not just toys
like ours? I, we actually,

558
00:29:34.550 --> 00:29:38.270
ours is hooked into team
city at work. So team

559
00:29:38.270 --> 00:29:43.900
city gets monitors are repositories
on GitHub. And so what

560
00:29:43.900 --> 00:29:47.740
were you organization? Private repositories
on getting hub for, at

561
00:29:47.740 --> 00:29:53.500
my company and well, the
place I work and that's

562
00:29:53.500 --> 00:29:55.750
all, so it teams, city
monitors it and team city

563
00:29:55.750 --> 00:29:58.600
builds anytime there's a new
commit. And then we actually

564
00:29:58.600 --> 00:30:03.070
use a octopus to deploy
post that. But yeah, I

565
00:30:03.070 --> 00:30:07.030
mean, get hooks are really
awesome. I actually use HipChat

566
00:30:07.330 --> 00:30:10.480
with some of my coworkers
for just on the side

567
00:30:10.480 --> 00:30:13.600
talking and remembering conversations and
they have hooks. We can

568
00:30:13.600 --> 00:30:17.350
hook up it to monitor,
get repositories. So you're alerted

569
00:30:17.350 --> 00:30:20.230
to pull request and commits
and all kinds of stuff.

570
00:30:20.980 --> 00:30:24.420
So cool. What else could
I do with a good

571
00:30:24.420 --> 00:30:30.150
hook other than just deploy
stuff? Yeah. Oh God. There's

572
00:30:30.150 --> 00:30:33.480
all kinds of stuff you
can do there have, has,

573
00:30:33.690 --> 00:30:35.790
I don't know how many
integrations, like any integrations with

574
00:30:35.790 --> 00:30:39.180
like obviously get hub issues.
You can integrate a lot

575
00:30:39.180 --> 00:30:42.390
of it with issue trackers
where if you like, you

576
00:30:42.390 --> 00:30:46.050
know, put a flag of
some form that has the

577
00:30:46.050 --> 00:30:50.370
issue ID, it'll say this
has been, you know, resolve

578
00:30:50.370 --> 00:30:52.680
they're mentioned in this committed
and you can do the

579
00:30:52.680 --> 00:30:55.560
code and all kinds of
crazy stuff you can do

580
00:30:56.070 --> 00:30:59.460
with get hooks. I'm pretty
much open to the world,

581
00:30:59.610 --> 00:31:01.530
I guess. Cause they have
get hub as an API,

582
00:31:02.190 --> 00:31:05.970
get hooks are mostly in
get hub. I think for

583
00:31:05.970 --> 00:31:08.940
the most part. And that
bucket has a bunch, I

584
00:31:08.940 --> 00:31:11.160
guess it's because it is
a hook. Literally I could

585
00:31:11.160 --> 00:31:13.440
have someone, I could have
it text me or I

586
00:31:13.440 --> 00:31:16.170
could, you know, more than
just deploying. I could have

587
00:31:16.170 --> 00:31:22.380
other processes like a build
process or They'll process your

588
00:31:22.380 --> 00:31:26.430
unit tests. Good run, all
that stuff. Continuous integration. I

589
00:31:26.430 --> 00:31:30.300
actually have a, I use
Zapier that's I E r.com.

590
00:31:31.050 --> 00:31:33.990
Their free account gives you
like five hooks. It's like,

591
00:31:34.020 --> 00:31:37.710
if this, then that, but
for API and they actually

592
00:31:37.710 --> 00:31:42.330
send me a message over
Google POC, every time someone

593
00:31:42.330 --> 00:31:45.960
commits to a repo that
I am active in. Oh

594
00:31:45.960 --> 00:31:50.580
really? Yeah. Well, cause I
have hit chat, which I

595
00:31:50.580 --> 00:31:53.280
mean, I use my computer
in my phone, but the

596
00:31:53.610 --> 00:31:56.100
Android application is terrible. When
you turn it off, you

597
00:31:56.100 --> 00:31:59.280
walk out, it'll still send
you notifications, which is not

598
00:31:59.280 --> 00:32:01.800
what I want. I get
a lot of messages in

599
00:32:01.800 --> 00:32:04.920
there. Right. And so I
use Google talks on it

600
00:32:04.920 --> 00:32:06.480
and it'll ping me with
stuff. And that way I

601
00:32:06.480 --> 00:32:09.000
can see, you know, if
someone's got a pull request,

602
00:32:09.000 --> 00:32:11.460
I need to review at
work or someone's committed code

603
00:32:11.460 --> 00:32:15.930
to a repository that I
I'm interested in at work.

604
00:32:16.380 --> 00:32:18.660
So I use that a
lot. Cause it pops up

605
00:32:18.660 --> 00:32:20.430
and says, hello, and you
can have seen you emails

606
00:32:20.430 --> 00:32:24.150
or text messages and all
kinds of stuff. So give

607
00:32:24.150 --> 00:32:27.120
me some, some online resources
that, that you recommend. I

608
00:32:27.120 --> 00:32:28.950
mean, anyone can go and
Google for learn, get, but

609
00:32:28.950 --> 00:32:31.500
what do you think people
should, should do online to

610
00:32:31.500 --> 00:32:35.040
learn how to do that?
Yeah. So if you really

611
00:32:35.040 --> 00:32:37.050
want to learn about get,
and you will learn everything,

612
00:32:37.500 --> 00:32:42.010
get S m.org. That's the
actual main site for the

613
00:32:42.290 --> 00:32:46.610
project. It has a link
to the pro get book,

614
00:32:46.670 --> 00:32:49.700
which is a really nice
book. It's free. You can

615
00:32:49.700 --> 00:32:51.620
buy it if you want
from a press. I think

616
00:32:52.790 --> 00:32:54.890
a press or somebody who
actually had been a double

617
00:32:54.890 --> 00:32:57.200
check that, cause I don't
want to put you wrong

618
00:32:57.210 --> 00:33:00.080
here. Aren't saying this, but
it's got all the information

619
00:33:00.080 --> 00:33:01.640
about all the nuts and
bolts that you want to

620
00:33:01.650 --> 00:33:09.560
get and to get, and
also try not get hub.com.

621
00:33:09.590 --> 00:33:12.470
It's actually a part of
code school, but it's free.

622
00:33:12.470 --> 00:33:14.420
And it goes through just
in your basic get usage

623
00:33:14.420 --> 00:33:17.030
and they have a bunch
of advanced get a tech

624
00:33:17.030 --> 00:33:19.730
pub has a lot of
tech has a good series

625
00:33:19.730 --> 00:33:24.050
called mastering get. And he
he's like $15 and there's

626
00:33:24.050 --> 00:33:27.590
help that get hub.com, which
has a lot of resources

627
00:33:27.590 --> 00:33:31.100
for just using get and
using GitHub. And my opinion,

628
00:33:31.100 --> 00:33:32.720
the best way is just
to sit down and start

629
00:33:32.720 --> 00:33:35.300
working on some small project
that you don't really need

630
00:33:35.300 --> 00:33:38.060
to invest your brain in
the actual project, but using

631
00:33:38.060 --> 00:33:39.770
it to like, look at
how commits work and everything.

632
00:33:40.720 --> 00:33:42.850
Very cool. I'm going to
add all of those links

633
00:33:42.940 --> 00:33:45.490
to the show notes. So
people will find those up

634
00:33:45.490 --> 00:33:47.770
at Hanselman's dot com. That's
about it. Yeah. I think

635
00:33:48.160 --> 00:33:49.990
that's a good starting point.
And then from there just

636
00:33:49.990 --> 00:33:55.510
kind of, you know, working
with it. Very cool. Well,

637
00:33:55.510 --> 00:33:57.760
thanks Michael. I appreciate it.
And I continue to look

638
00:33:57.760 --> 00:34:00.070
forward to working with you
on our little side project

639
00:34:00.070 --> 00:34:02.170
to a small.net, which I
think people should check out

640
00:34:02.260 --> 00:34:06.010
because people should go and
look at small setting on

641
00:34:06.010 --> 00:34:12.370
an iPhone just to see
what happens. All right, Scott,

642
00:34:12.760 --> 00:34:16.600
I appreciate it. Very cool.
Thanks a lot. This has

643
00:34:16.600 --> 00:34:19.030
been another episode of Hanselminutes
and we'll see you again

644
00:34:19.030 --> 00:34:19.450
next week.

