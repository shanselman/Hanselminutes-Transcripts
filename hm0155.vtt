WEBVTT FILE

1
00:00:12.060 --> 00:00:17.520
From Hansel minutes.com near Tansel
minutes or weekly discussion with

2
00:00:17.520 --> 00:00:22.860
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:22.860 --> 00:00:26.550
is Lawrence Ryan announcing a show
number one 55 recorded live

4
00:00:26.580 --> 00:00:32.460
Thursday, March 19th, 2009. Support for Hanselman
it's just provided by teller

5
00:00:32.640 --> 00:00:36.630
red controls, the most comprehensive
suite of components for windows

6
00:00:36.630 --> 00:00:46.950
forms and asp.net web applications
online@wwwdottdlerikdotcomandby.net developers journal, the world's

7
00:00:46.950 --> 00:00:52.320
leading that net developer magazine
online at www dot <inaudible>

8
00:00:52.650 --> 00:00:56.790
dot com. In this episode
from Mixo nine, Scott talks

9
00:00:56.790 --> 00:01:00.210
with Pete Brown about the
Commodore 64 emulator Peter's writing

10
00:01:00.210 --> 00:01:05.750
in Silverlight three. Hi, this
is Scott Hanselman, and this

11
00:01:05.750 --> 00:01:08.330
is another episode of Hansel
minutes. Also recorded here at

12
00:01:08.330 --> 00:01:10.580
mix in Las Vegas. And
I'm sitting down with Pete

13
00:01:10.580 --> 00:01:14.060
Brown. Who's a Silverlight MVP
and the author of a

14
00:01:14.060 --> 00:01:18.500
blog at irritated vowel, V
O w E L vowel.com.

15
00:01:18.890 --> 00:01:21.800
And he has written something
that is so amazing and

16
00:01:21.800 --> 00:01:24.590
so fantastically wonderful that I
had to grab him out

17
00:01:24.590 --> 00:01:27.020
of the hallway and say,
show me, what is this

18
00:01:27.020 --> 00:01:28.880
on your laptop? I'm looking
at your laptop and I

19
00:01:28.880 --> 00:01:32.960
cannot believe it. This is
what, this is a Commodore

20
00:01:32.960 --> 00:01:37.070
64 emulator in Silverlight three.
So you've written this entirely

21
00:01:37.070 --> 00:01:40.850
in managed code. Yeah, this
is 100% C-sharp managed code.

22
00:01:40.970 --> 00:01:44.300
I'm emulating the real deal.
Okay. And I'm looking at

23
00:01:44.300 --> 00:01:46.700
the ready prompt and it's,
it's got that gorgeous blue

24
00:01:46.700 --> 00:01:50.210
cursor. That's flashing back and
forth. This is not fake.

25
00:01:50.270 --> 00:01:52.730
This is not a video
that I'm looking at. It's

26
00:01:52.730 --> 00:01:54.980
a video, but it's not
a video. Like we might

27
00:01:54.980 --> 00:01:57.380
think of one I'm actually,
you know, using Silverlight three

28
00:01:57.380 --> 00:02:00.710
to generate the frames of
the video based on the

29
00:02:00.710 --> 00:02:03.530
output of the video chip
of a simulated Commodore 64.

30
00:02:03.530 --> 00:02:05.450
So, but you can interact
with this. You can do

31
00:02:05.450 --> 00:02:07.550
whatever you want and it's
using some of the new

32
00:02:07.550 --> 00:02:09.770
cool things that are available
in Silverlight three. So it's

33
00:02:09.770 --> 00:02:12.830
a video in the sense
that you're generating video on

34
00:02:12.830 --> 00:02:16.460
the client side and using
a media control. Yep. So

35
00:02:16.460 --> 00:02:19.250
there's a regular media element
that's in, XAML on here.

36
00:02:19.580 --> 00:02:21.770
And the source of the
video for the media element

37
00:02:21.770 --> 00:02:25.550
is actually my ambulator and
the emulator. You know, I

38
00:02:25.550 --> 00:02:27.560
have a couple of buffers
in there that, you know,

39
00:02:27.560 --> 00:02:29.930
that the Vic chip, which
is a commerce 60 fours,

40
00:02:29.960 --> 00:02:33.050
a video chip, actually right.
To write individual pixels too.

41
00:02:33.050 --> 00:02:35.000
And I swap frames and
just spit it all out

42
00:02:35.000 --> 00:02:37.070
at 50 frames per second.
Okay. So let's, let's dig

43
00:02:37.070 --> 00:02:40.250
into that for a second.
So you have in memory

44
00:02:40.250 --> 00:02:43.730
somewhere, some array that represents
the video buffer. Yep. This

45
00:02:43.730 --> 00:02:45.650
is a, what is this?
Three 20 by two 40.

46
00:02:45.800 --> 00:02:48.230
Yeah. It's like three 20
by 200 or five. Remember

47
00:02:48.230 --> 00:02:51.410
correctly. Okay. So you've got
an, a two dimensional Ray

48
00:02:51.410 --> 00:02:53.840
of three 20 by two
40 by how deep of

49
00:02:53.990 --> 00:02:57.710
color depth. So the color
I went and actually mapped

50
00:02:57.710 --> 00:03:01.180
it to, you know, the
full like 16, I think

51
00:03:01.180 --> 00:03:03.040
it was full 30 to
pick color actually to make

52
00:03:03.040 --> 00:03:07.450
that come out. Right. But
internally, you know, the commerce

53
00:03:07.450 --> 00:03:09.430
64 allows you to have
16 colors. So I don't

54
00:03:09.430 --> 00:03:11.430
really need all those, but
that's just a convener And

55
00:03:11.430 --> 00:03:14.550
it was 16 absolute colors,
not palletized colors. You could

56
00:03:14.550 --> 00:03:16.500
do some funky things with
the chip, if you understood

57
00:03:16.500 --> 00:03:19.150
how to like shift some,
what it really came down

58
00:03:19.150 --> 00:03:21.000
to the voltages and stuff
on there. But yeah, it's

59
00:03:21.000 --> 00:03:23.760
really 69. Okay. But effectively
it's what is that four

60
00:03:23.760 --> 00:03:28.290
bit color. Yep. And that
array is just an array,

61
00:03:28.380 --> 00:03:30.150
right? Yeah. It's just nothing
fancy going on here. And

62
00:03:30.150 --> 00:03:33.840
then the video source. So
you've got the media element

63
00:03:33.840 --> 00:03:35.820
sitting in XAML so you've
got like basically one element

64
00:03:35.820 --> 00:03:37.350
on your page and it's
a hundred by a hundred

65
00:03:37.350 --> 00:03:39.450
and it says, alright, my
source is what, it's an

66
00:03:39.450 --> 00:03:43.710
object. It says, my source
is the class that I

67
00:03:43.710 --> 00:03:46.710
have that implements the new
media stream source API. Okay.

68
00:03:47.130 --> 00:03:48.870
And that's just something that's
built into server layer three.

69
00:03:48.870 --> 00:03:50.400
And I just have to
make sure that I respond

70
00:03:50.400 --> 00:03:52.830
to some of the events
that are in there. There's

71
00:03:52.830 --> 00:03:55.980
an event called get sample.
Okay. And I just, you

72
00:03:55.980 --> 00:03:59.670
know, we'll go a little
bit deeper here, 50 times

73
00:03:59.670 --> 00:04:01.920
per second. I go in
and, you know, get a

74
00:04:01.920 --> 00:04:05.850
sample requested from Silverlight. And
I tell it, here are

75
00:04:05.850 --> 00:04:08.520
all the pixels for this
particular frame. And I give

76
00:04:08.520 --> 00:04:10.440
it the position that is,
you know, one 50th of

77
00:04:10.440 --> 00:04:12.450
a second next and I
keep a counter on there

78
00:04:12.450 --> 00:04:14.850
and then the next frame
gets requested and I increment

79
00:04:14.850 --> 00:04:17.100
that counter for why one
50th of a second. Right.

80
00:04:17.130 --> 00:04:19.920
So they're calling you 50
times a second. Yes, they

81
00:04:19.920 --> 00:04:21.990
are calling you. So it's
a callback mechanism. They're calling

82
00:04:22.080 --> 00:04:25.230
your get sample 50 times.
How would this run on

83
00:04:25.230 --> 00:04:27.510
a slow machine? Wouldn't you
buffer up? If you couldn't

84
00:04:27.510 --> 00:04:30.420
get those fifties out who
would be dropping the frame

85
00:04:30.420 --> 00:04:33.360
server? Are you, Yeah, I
think Silverlight will start dropping

86
00:04:33.360 --> 00:04:34.980
the frames. Cause it's going
to look at the time

87
00:04:35.220 --> 00:04:37.110
that I have assigned for
each frame and it's going

88
00:04:37.110 --> 00:04:39.360
to skip as an essence.
It would work naturally because

89
00:04:39.360 --> 00:04:42.720
from your point of view,
as the producer, you're writing

90
00:04:42.720 --> 00:04:45.480
into memory at the same
time, 50 times a second,

91
00:04:45.480 --> 00:04:48.210
and it's 50 times a
second because the European standard

92
00:04:48.210 --> 00:04:51.540
for pal is 50 Hertz.
Right, Right. Yep. And that's,

93
00:04:51.540 --> 00:04:52.920
you know, a lot of
games and stuff were written

94
00:04:52.920 --> 00:04:54.720
at the time to take
advantage of the, you know,

95
00:04:54.720 --> 00:04:57.270
the number of times per
second that the <inaudible> would

96
00:04:57.270 --> 00:04:59.790
spit out video. Okay. And
so I, I kept that

97
00:04:59.790 --> 00:05:02.220
emulated. Exactly. Okay. So over
here in my right hand

98
00:05:02.220 --> 00:05:06.300
is his pizza Vic chip
that his writing is managed

99
00:05:06.300 --> 00:05:08.940
code. Vic chip is writing
into this array of 50

100
00:05:08.940 --> 00:05:11.760
times a second, regardless. And
then over my left hand

101
00:05:11.760 --> 00:05:14.700
is silver light, which is
going and requesting it 50

102
00:05:14.700 --> 00:05:17.430
times a second or presumably
less on a slow machine.

103
00:05:17.880 --> 00:05:20.400
And how do you dealing
with contention? Because you've got

104
00:05:20.430 --> 00:05:22.140
these reads, like I'll have
reads coming out of here

105
00:05:22.140 --> 00:05:23.640
and a lot of rights
going in there, you have

106
00:05:23.640 --> 00:05:26.340
to synchronize. And I figured
out right away, you know,

107
00:05:27.030 --> 00:05:28.830
when I started to design,
this is I was gonna

108
00:05:28.840 --> 00:05:30.510
have issues with tearing if
I had like a half

109
00:05:30.510 --> 00:05:32.850
completed array. Right. So what
I did is actually keep

110
00:05:32.850 --> 00:05:35.640
two buffers and it's just
two arrays and well, it's

111
00:05:35.640 --> 00:05:38.730
really, it's one double dimension
array. And I have an

112
00:05:38.730 --> 00:05:40.530
index in there that says
whether you're using buffer one

113
00:05:40.530 --> 00:05:42.810
or buffer two or it's
buffer zero for one. Right.

114
00:05:43.230 --> 00:05:45.510
And so I'm always writing
to one of those and

115
00:05:45.510 --> 00:05:48.090
Silverlight is always pulling from
the other one. And then

116
00:05:48.090 --> 00:05:50.160
when the Vic chip says,
I finished this page, I

117
00:05:50.160 --> 00:05:52.080
go and I swapped the
numbers and then several sites

118
00:05:52.100 --> 00:05:54.960
pulling from the other one.
That's cool. That's pretty clever.

119
00:05:55.470 --> 00:05:57.500
Is that like a standard
kind of comp side? Or

120
00:05:57.500 --> 00:05:59.510
you just come up with
that? I don't know the

121
00:05:59.510 --> 00:06:00.890
right way to do this.
I mean, I'd probably do

122
00:06:00.890 --> 00:06:03.530
something lame, like, you know,
on a, on a, on

123
00:06:03.530 --> 00:06:05.480
a video game, on a
director, 3d it's like sync

124
00:06:05.480 --> 00:06:07.130
on frames, you know, you
click a button and then

125
00:06:07.130 --> 00:06:09.710
everybody has to sync. So
you'd basically make somebody get

126
00:06:09.710 --> 00:06:11.870
in line for a number
of milliseconds. And if he,

127
00:06:12.050 --> 00:06:13.880
if you're not ready yet
you just give him nothing.

128
00:06:14.380 --> 00:06:16.480
Yeah. And well, really what
happens if they, if they're

129
00:06:16.480 --> 00:06:18.700
not ready yet they get
the last frame that's kind

130
00:06:18.700 --> 00:06:20.770
of double buffering. Yeah. So
it's really, it's, it's pretty

131
00:06:20.770 --> 00:06:24.100
traditional, double buffering. Danek very
cool. And it's, it's not

132
00:06:24.100 --> 00:06:26.200
just about contention though, but
it's to prevent tearing on

133
00:06:26.200 --> 00:06:28.240
the screen, which is, you
know, you look, the top

134
00:06:28.240 --> 00:06:30.370
half of the screen is,
you know, frame 21, but

135
00:06:30.370 --> 00:06:32.140
the bottom half is frame
20. And so it looks

136
00:06:32.140 --> 00:06:35.470
a little weird, Especially during
horizontal moves where the tear

137
00:06:35.470 --> 00:06:37.090
might appear at the top
of the screen and then

138
00:06:37.090 --> 00:06:40.180
slowly move its way down.
Yep. Yep. Interesting. So how

139
00:06:40.180 --> 00:06:43.690
did this start? I mean,
help me understand from file

140
00:06:43.690 --> 00:06:46.510
new project and then, you
know, are you standing on

141
00:06:46.510 --> 00:06:48.310
the shoulders of giants and
if so, what are those

142
00:06:48.310 --> 00:06:51.580
giants write the code in?
Oh, sorry. Absolutely. So there

143
00:06:51.580 --> 00:06:53.890
are lots of different C
64 emulators out there on

144
00:06:53.890 --> 00:06:55.210
the net and some are
really good and some are

145
00:06:55.210 --> 00:06:58.960
halfway decent. What I decided
to use for the base

146
00:06:58.960 --> 00:07:03.850
for this was a cycle,
exact emulator called Frodo, which

147
00:07:03.850 --> 00:07:05.980
was written in C plus
plus and C back in

148
00:07:05.980 --> 00:07:09.760
like 94, you know, and
it's been maintained over time

149
00:07:09.760 --> 00:07:11.860
from there. And absolutely there's
no way I would have

150
00:07:11.860 --> 00:07:13.630
gotten this done. If somebody
else hadn't already done the

151
00:07:13.630 --> 00:07:16.390
hard, like electrical engineering type
work that she needed to

152
00:07:16.390 --> 00:07:20.110
have for these. And then
another person who unfortunate, I

153
00:07:20.150 --> 00:07:22.840
can't remember their name went
a few years back and

154
00:07:22.840 --> 00:07:25.750
created a C-sharp version of
much of that. Not a

155
00:07:25.750 --> 00:07:27.520
hundred percent compatible, but they
got a lot of it

156
00:07:27.520 --> 00:07:31.210
over, but all very, very
pointer based, you know, coming

157
00:07:31.210 --> 00:07:32.980
back from the C plus
plus side, it's just all

158
00:07:32.980 --> 00:07:35.800
that was unsafe. It was
totally like almost every function

159
00:07:35.800 --> 00:07:38.110
said unsafe and everything was
dealing with, you know, Which

160
00:07:38.130 --> 00:07:40.240
would make sense because in
the, in, in those times

161
00:07:40.240 --> 00:07:43.060
that would kind of be
how Would port sharp code?

162
00:07:43.360 --> 00:07:45.970
And they did it for
perf reasons, you know? So

163
00:07:46.450 --> 00:07:48.940
I had to translate all
that stuff into totally safe

164
00:07:48.940 --> 00:07:50.890
or re based code Now
why you did that because

165
00:07:50.890 --> 00:07:52.650
that's how the Silverlight works.
I mean, you can't write

166
00:07:52.670 --> 00:07:55.510
unsafe code it's yeah. Right.
And there are deliberately, you

167
00:07:55.510 --> 00:07:57.550
know, moving past the ends
of a raise with pointers

168
00:07:57.550 --> 00:07:59.080
and stuff like that. And
you just simply can't do

169
00:07:59.080 --> 00:08:02.410
that in, in a sandbox
environment. Did you get stuck

170
00:08:02.440 --> 00:08:04.630
at any point? I mean,
this is pretty hairy stuff

171
00:08:04.630 --> 00:08:08.410
because you're basically emulating chips.
You're emulating CPS. There are

172
00:08:08.410 --> 00:08:11.470
chips for input like joystick
and keys. There's chips for

173
00:08:11.470 --> 00:08:14.350
output like sound at, at
what point do you, well,

174
00:08:14.370 --> 00:08:15.700
give me, give me an
idea of where you really

175
00:08:15.700 --> 00:08:17.350
got stuck in. I'm like,
I don't know if I

176
00:08:17.350 --> 00:08:20.590
can possibly finish this. Yeah.
So, and that what's really

177
00:08:20.590 --> 00:08:22.510
funny is that happened a
few weeks ago when it

178
00:08:22.510 --> 00:08:27.760
came time to implement the
drive emulation. So the 1541

179
00:08:27.760 --> 00:08:31.240
drive that Commodore came, most
Commodore computers came with was

180
00:08:31.240 --> 00:08:34.180
actually a whole computer in
and of itself. You know,

181
00:08:34.180 --> 00:08:36.640
it costs more than the
C 64, but that's cause

182
00:08:36.640 --> 00:08:38.380
it had a 65 Oh
two and two K of

183
00:08:38.380 --> 00:08:40.570
Ram and it all its
own IO and everything else

184
00:08:40.570 --> 00:08:42.520
inside it. So you had,
you know, it's just like

185
00:08:42.520 --> 00:08:45.280
the first dual proc machine,
right. It had the, you

186
00:08:45.280 --> 00:08:48.130
know, a whole, a whole
set of processing power inside

187
00:08:48.130 --> 00:08:52.000
the drive. And while I
didn't do the full emulation

188
00:08:52.000 --> 00:08:54.130
of all that, although there
some demos written that use

189
00:08:54.130 --> 00:08:55.740
that, that are pretty neat.
I didn't do the full

190
00:08:55.740 --> 00:08:58.680
emulation of all that, but
some of the things that

191
00:08:58.680 --> 00:09:01.410
they were doing to simulate
reading bites off of sectors

192
00:09:01.410 --> 00:09:04.020
on the desk, they're doing
some really hairy pointer manipulation

193
00:09:04.020 --> 00:09:06.810
in there where they would
take like an unsafe structure

194
00:09:06.810 --> 00:09:08.330
and then they would get
some offset into it that

195
00:09:08.360 --> 00:09:10.740
was like halfway through. And
it wasn't on any sort

196
00:09:10.740 --> 00:09:13.050
of variable boundary or anything
like that. And they would

197
00:09:13.050 --> 00:09:15.330
just start pouring bites into
that structure and then just

198
00:09:15.330 --> 00:09:18.780
read on, you know, and
that, and those bites would

199
00:09:18.780 --> 00:09:20.970
then, you know, halfway through
those bites, it would actually

200
00:09:20.970 --> 00:09:23.070
be a Ray of some
other structure. And so I

201
00:09:23.070 --> 00:09:24.960
had to go and take
all that stuff and figure

202
00:09:24.960 --> 00:09:26.700
out some way to make
that all safe and just,

203
00:09:26.730 --> 00:09:29.190
you know, serialized from a
race. And you're assuming that

204
00:09:29.190 --> 00:09:31.760
it's correct. Yeah. And that's
kind of the difficult thing

205
00:09:31.760 --> 00:09:34.340
is that you picked up
two different projects that are

206
00:09:34.370 --> 00:09:37.520
good. Yep. But they're not
perfect. They don't emulate every

207
00:09:37.520 --> 00:09:39.710
game. They're not, they're not
bite. Perfect. And it really

208
00:09:39.710 --> 00:09:41.900
only takes a couple of
bites to screw well, one

209
00:09:41.900 --> 00:09:44.840
really to screw it up
completely. And I already ran

210
00:09:44.840 --> 00:09:47.810
into that in a couple
of places where, and what's

211
00:09:47.810 --> 00:09:49.310
nice is since there are
so many emulators out there,

212
00:09:49.310 --> 00:09:51.860
I can check it against
those. And I have a

213
00:09:51.860 --> 00:09:53.750
comment on one 28 sitting
behind me in my home

214
00:09:53.750 --> 00:09:55.580
office. Right. So I can
always really check against that

215
00:09:55.580 --> 00:09:57.740
if I want the final
authority on it or almost

216
00:09:57.740 --> 00:10:01.520
final authority. And I'm like,
there's some games where I,

217
00:10:01.520 --> 00:10:02.750
you know, I looked in
and saw that I was

218
00:10:02.750 --> 00:10:04.550
having some weird video issues
on mine. So then I

219
00:10:04.550 --> 00:10:06.740
would go and run the
version of the code that

220
00:10:06.740 --> 00:10:08.510
I poured it from and
see if it had the

221
00:10:08.510 --> 00:10:10.280
same issue. And if it
did, I was like, all

222
00:10:10.280 --> 00:10:11.540
right, well, I need to
go and look at another

223
00:10:11.540 --> 00:10:14.450
source to try and get
a better handle on what's

224
00:10:14.450 --> 00:10:16.220
going on. If they didn't
have the issue, then I

225
00:10:16.220 --> 00:10:17.840
knew it was a mistake
in my port of that.

226
00:10:18.520 --> 00:10:21.090
So what are the iterations
look like? I mean, I

227
00:10:21.110 --> 00:10:23.240
mean, it's not really a
good way to put this,

228
00:10:23.240 --> 00:10:25.040
but when you moving together
like four bites at a

229
00:10:25.040 --> 00:10:27.230
time and from a, from
a, you know, write some

230
00:10:27.230 --> 00:10:29.510
code, run it, test it,
shut it down. Right. A

231
00:10:29.510 --> 00:10:32.060
little bit more. How much
code are you writing at

232
00:10:32.060 --> 00:10:34.760
a time when you're digging
deep into this and what

233
00:10:34.760 --> 00:10:37.250
does it look like and
how much progress are you

234
00:10:37.250 --> 00:10:40.790
making? So then, and the
progress slows on a curve.

235
00:10:40.790 --> 00:10:43.610
Yeah. I understand, like, you
know, it's 2:00 AM, the kids

236
00:10:43.610 --> 00:10:46.700
are asleep, you're working on
this thing. And you know,

237
00:10:46.790 --> 00:10:50.360
my goal tonight is to
get What yeah. And, and

238
00:10:50.360 --> 00:10:51.740
that's what I was doing
was like, I want Sprite

239
00:10:51.740 --> 00:10:54.320
graphics because nobody is going
to get this. If they're

240
00:10:54.320 --> 00:10:56.120
just looking at the blue
screen and I can see

241
00:10:56.150 --> 00:10:58.640
10 print, hello world. Right.
So I wanted to get

242
00:10:58.640 --> 00:11:00.770
the Sprite graphics done. And
what I would do is

243
00:11:01.010 --> 00:11:04.460
I would go through and
get like little chunks of

244
00:11:04.460 --> 00:11:06.620
functionality, like smaller than a
function. And I would say

245
00:11:06.620 --> 00:11:07.640
like, let me see what
it's going to take to

246
00:11:07.640 --> 00:11:09.470
port this. And then I
would see if I had

247
00:11:09.470 --> 00:11:12.170
enough to be able to
run something. It would have

248
00:11:12.170 --> 00:11:14.480
been great. You know, I
could've written some basic test

249
00:11:14.480 --> 00:11:18.050
cases actually in basic, in
on Commodore. If I, if

250
00:11:18.050 --> 00:11:20.810
I had thought about that
before, just now and then

251
00:11:20.810 --> 00:11:22.250
I could have, you know,
tested some of the spray

252
00:11:22.250 --> 00:11:25.100
graphics and stuff. Well, it
really is. You could make

253
00:11:25.100 --> 00:11:27.530
the entire, or, you know,
it it's own test harness

254
00:11:27.530 --> 00:11:30.260
and just right. Run it
up and have a whole

255
00:11:30.260 --> 00:11:32.210
suite of tests. Right. We'll
be using some of the

256
00:11:32.210 --> 00:11:35.930
Silverlight testing stuff. Right? Hi,
it's Scott here from another

257
00:11:35.930 --> 00:11:37.790
place in time. I hope
you're enjoying the show so

258
00:11:37.790 --> 00:11:40.280
far. I apologize for interrupting
it, but I wanted to

259
00:11:40.280 --> 00:11:42.380
let you know that assembling
a podcast like this every

260
00:11:42.380 --> 00:11:45.530
week, isn't free. Certainly the
bandwidth bill crushes us every

261
00:11:45.530 --> 00:11:46.850
month. So I wanted to
let you know that this

262
00:11:46.850 --> 00:11:49.820
show is sponsored by Tellerik.
They make the show possible

263
00:11:49.820 --> 00:11:52.280
and it makes it pretty
cool products as well. For

264
00:11:52.280 --> 00:11:55.270
example, if you're trying to
a web 2.0 Ajax application,

265
00:11:55.300 --> 00:11:57.580
trying to use the web
1.0 components, it's kind of

266
00:11:57.580 --> 00:11:59.950
difficult. You gotta get the
next gen stuff. If you

267
00:11:59.950 --> 00:12:02.260
want to build the next
gen websites. And that's exactly

268
00:12:02.260 --> 00:12:04.330
what the folks at Tellerik
have got and their new

269
00:12:04.330 --> 00:12:08.200
upcoming product, which is code
named rad controls. Prometheus's big

270
00:12:08.230 --> 00:12:10.510
pack, a web controls built
entirely on top of the

271
00:12:10.840 --> 00:12:13.900
Microsoft ASP net Ajax stuff
that you already understand. It's

272
00:12:13.900 --> 00:12:15.700
going to give you a
lot of performance interactivity on

273
00:12:15.700 --> 00:12:19.000
your next project. They mirror
the ASP net Ajax API.

274
00:12:19.000 --> 00:12:22.750
So the development's really straightforward
client scripture's shared loading time

275
00:12:22.750 --> 00:12:25.360
is pretty fast set a
couple of properties. You can

276
00:12:25.360 --> 00:12:28.690
even bind a web services
for really efficient operation. The

277
00:12:28.690 --> 00:12:31.060
new rad editor for ESPN
Ajax loads up to four

278
00:12:31.060 --> 00:12:33.850
times faster than before. And
the rad grid will do

279
00:12:33.850 --> 00:12:36.880
thousands of records and milliseconds.
But of course, it's, it's

280
00:12:36.880 --> 00:12:38.680
better to try these things
for yourself. So you can

281
00:12:38.680 --> 00:12:41.800
visit <inaudible> dot com slash
ASP, net Ajax, and download

282
00:12:41.800 --> 00:12:44.440
a trial. Thanks a lot
for listening and we'll get

283
00:12:44.440 --> 00:12:47.560
right back to the show.
So you, so you're looking

284
00:12:47.560 --> 00:12:49.660
at the open source code.
You're trying to figure it

285
00:12:49.660 --> 00:12:52.030
out. You say I'm going
to get these 10 lines,

286
00:12:52.270 --> 00:12:54.490
but one of the things
that I've noticed in my

287
00:12:54.490 --> 00:12:56.440
years of writing see is
that there's a lot of

288
00:12:56.440 --> 00:13:00.190
global global stuff. So you
might look at 10 lines

289
00:13:00.190 --> 00:13:01.660
and go, yeah, I get,
I get the intent of

290
00:13:01.660 --> 00:13:04.330
that, but there's side effects.
There's so many side effects

291
00:13:04.830 --> 00:13:06.810
And that's what they would
do a lot with the

292
00:13:06.810 --> 00:13:09.030
pointers. And some of the
CODOs moving over. I'd have

293
00:13:09.030 --> 00:13:11.070
to go and trace back
through. And it was a

294
00:13:11.070 --> 00:13:13.980
really manual process. And so
I have a background in

295
00:13:13.980 --> 00:13:15.420
C plus plus from way
back, I just don't get

296
00:13:15.420 --> 00:13:17.280
to exercise it very much
so I can at least

297
00:13:17.280 --> 00:13:20.070
understand what's going on in
the code, but they would

298
00:13:20.070 --> 00:13:22.380
have, you know, a lot
of global variables or global

299
00:13:22.380 --> 00:13:24.840
to the class where they
would leave the pointer at

300
00:13:24.840 --> 00:13:26.700
some position at the end
of one function that pick

301
00:13:26.700 --> 00:13:29.670
it back up in another
function. And that doesn't work

302
00:13:29.670 --> 00:13:31.500
too well either when you're
translating over to a raise.

303
00:13:31.500 --> 00:13:33.480
So it just, that was
really trial and error and

304
00:13:33.480 --> 00:13:35.190
just tracing through and figure
out what that code was

305
00:13:35.190 --> 00:13:39.120
doing, how much threading is
going on. I have two

306
00:13:39.120 --> 00:13:41.850
threads. There's the main UI
thread and Silverlight, and then

307
00:13:41.850 --> 00:13:44.820
I have a background thread
that's running at one, you

308
00:13:44.820 --> 00:13:46.800
know, one Hertz. So it's
actually just short of one

309
00:13:46.800 --> 00:13:49.620
Hertz. That's a tight loop.
That's simulating all the hardware.

310
00:13:50.300 --> 00:13:52.890
And then actually Silverlight is
probably doing a third for

311
00:13:52.890 --> 00:13:55.890
the video. I'm not sure
about that myself. Right? So

312
00:13:55.890 --> 00:13:58.200
there's, you know, Atmos, there's
probably three threads going. So

313
00:13:59.280 --> 00:14:01.900
Yeah. Bring it down even
into more detail here. What

314
00:14:02.100 --> 00:14:04.890
one Hertz is a thousand
times a second, right? How

315
00:14:04.890 --> 00:14:06.810
are you keeping the four
loop it a thousand times

316
00:14:06.810 --> 00:14:09.000
a second or Rob? A
one megawatt. Excuse me. When

317
00:14:09.000 --> 00:14:13.890
megahertz. Yeah. One megahertz. One
megahertz. Yeah. Is that right?

318
00:14:14.250 --> 00:14:15.480
I think that's okay. Now
we're going to get someone

319
00:14:15.480 --> 00:14:17.820
to call them somebody call
and tell me, I was

320
00:14:17.820 --> 00:14:19.830
trying to 50 Hertz is
50 times a second one.

321
00:14:19.830 --> 00:14:21.810
Hertz is once a second.
Yeah, this is, this is

322
00:14:21.840 --> 00:14:24.630
definitely more than a thousand
times. I'll make a Hertz

323
00:14:24.810 --> 00:14:29.010
one MHC. Yes. Right? Yes.
Now we've just, now we

324
00:14:29.010 --> 00:14:31.140
look silly. Definitely. Yeah, definitely.
Okay. So you've got this

325
00:14:31.140 --> 00:14:33.450
thing going, how's that? How
are you doing that? Because

326
00:14:33.480 --> 00:14:36.330
it's not just like, well,
true. Right? You need to

327
00:14:36.330 --> 00:14:37.680
know how much time you
spend in there because you

328
00:14:37.680 --> 00:14:41.490
need a clock, right? Yeah.
And, and this is where,

329
00:14:41.550 --> 00:14:44.760
you know, Don't feel bad
if it's, if I don't

330
00:14:44.760 --> 00:14:46.590
know, I was just thinking
like, this is where the

331
00:14:46.590 --> 00:14:48.480
folks that released the dotnet
source code needs to close

332
00:14:48.480 --> 00:14:50.580
your ears for a second.
So, Okay. Don't listen, if

333
00:14:50.580 --> 00:14:53.690
you release of, so There
is a, there's a class

334
00:14:53.690 --> 00:15:00.130
that is available in dotnet
called a stopwatch. Right, right.

335
00:15:00.740 --> 00:15:02.930
That is not in Silverlight.
And so I was like,

336
00:15:02.930 --> 00:15:04.280
well, I know I want
to get a high performance

337
00:15:04.280 --> 00:15:06.590
timer, but you know, I
want to see, I know

338
00:15:06.590 --> 00:15:09.080
there's stopwatch and it does
exactly what I want. And

339
00:15:09.080 --> 00:15:10.700
so I looked at it
and actually downloaded source code,

340
00:15:10.700 --> 00:15:13.240
looked at it. And as
like It calls, query performance,

341
00:15:13.240 --> 00:15:15.700
something which is a low
level, wind 32 Call back

342
00:15:15.730 --> 00:15:18.790
is the date time dot,
get T count or get

343
00:15:18.790 --> 00:15:21.360
text or something like that,
which Silverlight does have. Right.

344
00:15:21.370 --> 00:15:23.380
So I was able to
just implement just the fallback

345
00:15:23.380 --> 00:15:25.510
from there. Okay. And so
I built my own stopwatch

346
00:15:25.870 --> 00:15:28.330
and I use that. So
inside the loop, I'm checking

347
00:15:28.330 --> 00:15:30.730
to see, you know, how
many, you know, how many

348
00:15:31.840 --> 00:15:33.730
do I sleep? And then
it sleeps for an amount

349
00:15:33.730 --> 00:15:35.980
of time at the end
of each year. And is,

350
00:15:36.030 --> 00:15:39.010
is, is that detailed enough?
Don't you float as your

351
00:15:39.010 --> 00:15:41.290
synchronization kind of fall off?
It makes me feel like

352
00:15:41.290 --> 00:15:42.700
if you ran it for
an hour or two, it

353
00:15:42.700 --> 00:15:45.430
might, you might get some
synchronization. Right. I'm sure it'll

354
00:15:45.430 --> 00:15:47.410
eventually, you know, have some
rounding errors and stuff in

355
00:15:47.410 --> 00:15:50.920
there though. That'll float a
little bit. But yeah. So

356
00:15:50.920 --> 00:15:54.610
these ROMs, you know, someone
has a video game, I've

357
00:15:54.610 --> 00:15:57.880
got a bunch of common
or 64 disks at home,

358
00:15:58.050 --> 00:16:00.370
you know, five and a
quarter inch floppies. And I

359
00:16:00.370 --> 00:16:02.470
know that you can get
parallel port serial port, and

360
00:16:02.470 --> 00:16:05.620
now some USB port cables
made where you can dump

361
00:16:05.650 --> 00:16:07.990
the binaries off of those,
those things. So if I've

362
00:16:07.990 --> 00:16:11.710
got like epics summer games
or something, I can go

363
00:16:11.710 --> 00:16:13.720
and get my, how, how
big are these ROMs? Like

364
00:16:13.810 --> 00:16:15.790
20 K or something like
that. Most of them, they,

365
00:16:15.790 --> 00:16:17.800
they usually zip them down
to a small size cartridges,

366
00:16:17.830 --> 00:16:20.860
very, but disc for like
a, you know, it's like

367
00:16:20.860 --> 00:16:24.940
120 characters And this is
the raw byte array of

368
00:16:24.940 --> 00:16:27.310
what's on the disc. What
is the format of that?

369
00:16:27.580 --> 00:16:29.560
Is it a, is it
a file system Format? It's

370
00:16:29.560 --> 00:16:31.910
yeah. It's like a little
file system built directly inside

371
00:16:31.930 --> 00:16:34.600
it, but it's using the
CBM dos, you know, file

372
00:16:34.600 --> 00:16:38.770
format. Right. So the file
is the raw bytes from

373
00:16:38.770 --> 00:16:42.190
zero to the end of
the disc, right? Yeah. From

374
00:16:42.550 --> 00:16:46.150
it's all like 34 sectors
or 40. So it's a

375
00:16:46.150 --> 00:16:49.510
file. It's not an executable
that you're right. It is

376
00:16:49.660 --> 00:16:52.240
a, it's an image of
the data, an image of

377
00:16:52.240 --> 00:16:55.510
the data on the disc.
Yep. And, and that's arranged

378
00:16:55.510 --> 00:16:57.160
in such a way that
you can go through and

379
00:16:57.160 --> 00:16:59.110
I go, and I'll take
a look to see like

380
00:16:59.110 --> 00:17:01.390
where the directory sector is,
which is, I think S

381
00:17:01.450 --> 00:17:04.030
like sector HR track 18,
or so you load this

382
00:17:04.030 --> 00:17:06.520
up in an array. It's
loaded up. It's actually in

383
00:17:06.520 --> 00:17:08.410
a stream server, like gives
me a stream when I

384
00:17:08.410 --> 00:17:10.000
do a file open. So
I keep that stream in

385
00:17:10.000 --> 00:17:13.960
the background. Okay. And sequel.
Yeah. It's I go through

386
00:17:13.960 --> 00:17:17.380
and it just, it, it
looks at the offset for,

387
00:17:17.440 --> 00:17:20.080
you know, track 18 or
whatever it is, is going

388
00:17:20.080 --> 00:17:22.030
to be at this particular
offset for these number of

389
00:17:22.030 --> 00:17:24.640
bites. And I go, and
I read in the directory

390
00:17:24.640 --> 00:17:26.650
information from that, and this
is where the old code

391
00:17:26.650 --> 00:17:28.810
used to do, you know,
reads, halfway into a structure

392
00:17:28.810 --> 00:17:30.910
and do a mess there.
But I serialized that into

393
00:17:30.910 --> 00:17:32.890
a structure and it has
a pointer to the next

394
00:17:32.890 --> 00:17:35.020
location for the next directory
entry. And I'd serialize that

395
00:17:35.020 --> 00:17:37.300
in itself. So that's interesting.
So the physical aspects of

396
00:17:37.300 --> 00:17:39.520
things are, it's a stream,
it's just a bunch of

397
00:17:39.520 --> 00:17:42.520
bytes. How much translation did
you do in the sense

398
00:17:42.520 --> 00:17:44.800
of getting it into a
format that your brain could

399
00:17:44.800 --> 00:17:47.910
understand? Did you go and
create a, you know, a

400
00:17:47.920 --> 00:17:51.920
drive or disc image structure
with tracks? Okay. So there's

401
00:17:51.920 --> 00:17:55.880
a standard format called the
<inaudible>, which is, you know,

402
00:17:55.880 --> 00:17:58.010
supported by almost all the
emulators out there. And that

403
00:17:58.010 --> 00:18:03.260
is a 1541 drive disc
image for single-sided desk. Right.

404
00:18:03.590 --> 00:18:05.450
And so I use that
because there are lots and

405
00:18:05.450 --> 00:18:08.300
lots of disc images available
on the internet. I'm assuming

406
00:18:08.300 --> 00:18:10.220
you had licenses to the
game Originally, all that's all

407
00:18:10.220 --> 00:18:13.160
owned these games, wink, wink,
nudge, nudge, Or at least

408
00:18:13.160 --> 00:18:14.480
we all had copies of
them at some point at

409
00:18:14.480 --> 00:18:17.600
some point. Right. And so
I use that format and

410
00:18:17.600 --> 00:18:19.760
just go right through and
support that format. There's a

411
00:18:19.760 --> 00:18:22.240
couple other formats. There's a
T 64 for tape, but

412
00:18:22.240 --> 00:18:24.410
I don't support that. Yeah.
So these formats, you read

413
00:18:24.410 --> 00:18:26.720
them in and you hold
them as, as C-sharp classes

414
00:18:26.720 --> 00:18:29.510
that are in that style.
So how many times are

415
00:18:29.510 --> 00:18:31.700
you running around with just
an array of bytes versus

416
00:18:31.700 --> 00:18:35.360
some real high level? So
it's almost always just, you

417
00:18:35.360 --> 00:18:38.330
know, when I'm getting a
directory that I have some

418
00:18:38.330 --> 00:18:41.060
high level objects that I
read stuff into, but otherwise

419
00:18:41.060 --> 00:18:43.820
it's, you know, the, the
CPS requesting a bite at

420
00:18:43.820 --> 00:18:46.310
this position, I get back,
I send a bite back

421
00:18:46.310 --> 00:18:47.870
and that's the end of
that. And then the next

422
00:18:47.870 --> 00:18:51.140
cycle is requesting another bite
and then whatnot, or it's

423
00:18:51.140 --> 00:18:53.240
requesting a buffer of them,
you know, depending upon what

424
00:18:53.570 --> 00:18:56.450
type of call is being
made. Now the, the big,

425
00:18:56.480 --> 00:18:58.340
the big loop, right. I
mean, with all of these

426
00:18:58.340 --> 00:19:01.940
kinds of things, there's the
wild true. Yep. How do

427
00:19:01.940 --> 00:19:03.110
you decide, well, I'm going
to go look for the

428
00:19:03.110 --> 00:19:04.940
keyboard now, and I'm gonna
look for the choice now

429
00:19:04.940 --> 00:19:06.530
and Oh, now it's time
to write to the screen.

430
00:19:06.770 --> 00:19:09.440
Right. So I used to
do some game programming way

431
00:19:09.440 --> 00:19:11.870
back in C plus plus.
And you, you always had

432
00:19:11.870 --> 00:19:13.520
like the game loop in
the middle of the game

433
00:19:13.550 --> 00:19:16.640
and the game loop did
the same things. Every single

434
00:19:16.640 --> 00:19:18.380
time. You know, it was
before we did event driven

435
00:19:18.380 --> 00:19:20.900
stuff. So first step in
the game loop, you're going

436
00:19:20.900 --> 00:19:22.400
to look for input from
the user and the second

437
00:19:22.400 --> 00:19:24.410
step, you're going to move
your sprites around or your

438
00:19:24.410 --> 00:19:26.660
graphics around. And third step,
you're going to check for

439
00:19:26.660 --> 00:19:28.520
collisions in the fourth step.
You're going to play a

440
00:19:28.520 --> 00:19:31.370
sound and then fifth set.
And only some of those

441
00:19:31.370 --> 00:19:34.790
that just happen every single
time in inside the steps.

442
00:19:34.790 --> 00:19:36.200
You're going to check and
see, do I really need

443
00:19:36.200 --> 00:19:38.600
to do something if not,
then return back. Right. And

444
00:19:38.600 --> 00:19:40.250
so it's the same thing
here. So it pulls the

445
00:19:40.250 --> 00:19:43.550
joysticks, every single loop through
it pulls a keyboard every

446
00:19:43.550 --> 00:19:47.300
single time it goes through
and calls the Vic stuff

447
00:19:47.330 --> 00:19:50.510
for the video every single
time. And there's always something

448
00:19:50.510 --> 00:19:52.490
to happen over there, whether
it's blinking the cursor or

449
00:19:52.490 --> 00:19:55.640
whatever. Anyway. Alright, can you
do this in Silverlight three?

450
00:19:55.640 --> 00:19:57.560
Just cause you could, I
mean, it could have been

451
00:19:57.560 --> 00:19:59.540
in WPF, I suppose it
wouldn't have really bought you

452
00:19:59.540 --> 00:20:02.540
anything. Yeah. I mean, this,
this totally would be better

453
00:20:02.540 --> 00:20:05.600
as a desktop application. Yeah.
Enterprise are now, I mean,

454
00:20:05.600 --> 00:20:08.510
everyone's talking about quake live
now. Right. Forget those guys.

455
00:20:08.510 --> 00:20:11.210
I want to play 64
games. Right, right, Right. And

456
00:20:11.210 --> 00:20:13.400
so like, you'd gain some
advantages by having as a

457
00:20:13.400 --> 00:20:15.440
desktop application. Like, it would
be easier for me to

458
00:20:15.440 --> 00:20:17.480
Mount drives or something like
that and be able to

459
00:20:17.480 --> 00:20:19.790
write them back and do
some interesting things there, but

460
00:20:20.570 --> 00:20:22.850
really it's in several light.
Cause I wanted to show

461
00:20:22.850 --> 00:20:24.830
that you could do this
in Silverlight and it's such

462
00:20:24.830 --> 00:20:26.960
a weird edge case that
I don't think anybody would

463
00:20:26.960 --> 00:20:30.170
really think about doing a
full emulation here. Well, and

464
00:20:30.170 --> 00:20:32.000
it's important to point out
for those that aren't at

465
00:20:32.000 --> 00:20:34.100
mics and maybe haven't been
following things if this isn't

466
00:20:34.250 --> 00:20:37.460
a, this is a build
of Silverlight three. This is

467
00:20:37.460 --> 00:20:39.800
not running in the browser
right now. No, this is

468
00:20:39.800 --> 00:20:42.920
an outer browser application. And
the reason why I have

469
00:20:42.920 --> 00:20:45.110
this out of browser is
so I can get all

470
00:20:45.110 --> 00:20:47.350
the function, keys and stuff
that the browser normally swallows.

471
00:20:48.010 --> 00:20:49.990
So there are probably some
ways to get around that.

472
00:20:49.990 --> 00:20:52.920
I'm just, you know, I'm,
I'm not a great, So

473
00:20:52.920 --> 00:20:54.600
this was an example where
you needed something in the

474
00:20:54.600 --> 00:20:57.810
browser didn't provide. Yep. You
jumped out, not all the

475
00:20:57.810 --> 00:21:00.210
way out to the WPF
side of things, which I

476
00:21:00.210 --> 00:21:02.070
suppose this would be trivial
to port to. Yeah. It

477
00:21:02.070 --> 00:21:04.350
should be pretty easy, but,
but you're living outside of

478
00:21:04.350 --> 00:21:08.220
the, that you have this,
this host application that's around

479
00:21:08.220 --> 00:21:10.950
you and this is like
SL browser dot exe or

480
00:21:10.950 --> 00:21:13.440
something. Yup. And I've got
it. It's fully scaled to

481
00:21:13.500 --> 00:21:15.150
my whole screen. Yeah. I'm
just scanning it. If you

482
00:21:15.150 --> 00:21:18.420
resize this now will it?
Oh, absolutely. So I'm just

483
00:21:18.420 --> 00:21:20.730
using it And you don't
have to do anything cause

484
00:21:20.730 --> 00:21:22.380
it's a relaxed doing it
for you. Yep. It's just

485
00:21:22.380 --> 00:21:26.280
a normal video that like
any other videos. Thanks. It's

486
00:21:26.280 --> 00:21:28.200
can you right click and
say like pause or it

487
00:21:28.200 --> 00:21:30.840
doesn't really know that it's
a video. If I put

488
00:21:30.840 --> 00:21:33.480
in UI controls deposit, I
definitely could, but I, you

489
00:21:33.480 --> 00:21:35.620
know, server light itself never
has that. So what are

490
00:21:35.620 --> 00:21:37.620
some other, so the out
of browsers, a big aspect

491
00:21:37.620 --> 00:21:40.410
of things you're running this
as a hosted application, as

492
00:21:40.410 --> 00:21:45.240
it's only XE, what other
things could you not do

493
00:21:45.240 --> 00:21:47.040
until several like three came
out? Because I know that

494
00:21:47.040 --> 00:21:48.480
you said you did this
in several, like two and

495
00:21:48.480 --> 00:21:51.750
then stop when you get
to. Right. And so the,

496
00:21:52.260 --> 00:21:53.760
you know, way back in
the early days of several

497
00:21:53.760 --> 00:21:55.770
eight too, there was no
way to push pixels out

498
00:21:55.770 --> 00:21:58.110
to the screen, you know,
just to fill up some,

499
00:21:58.140 --> 00:22:00.840
you know, space on the
screen, like an inch. And

500
00:22:00.840 --> 00:22:02.850
I think Peter Blois and
a couple other people came

501
00:22:02.850 --> 00:22:04.530
up with some ideas for
how you, maybe it was

502
00:22:04.530 --> 00:22:06.690
just segment, I think put
out an example of a

503
00:22:06.690 --> 00:22:10.110
PNG generator. And I mess
around with that a little

504
00:22:10.110 --> 00:22:12.510
bit, but the perf on
that is not 50 frames

505
00:22:12.510 --> 00:22:16.350
per second. So that was
Generating 50 PNGs and spitting

506
00:22:16.350 --> 00:22:18.450
them out and drawing them
Your second. And, and so

507
00:22:18.450 --> 00:22:21.510
that kind of worked, but
you know, I was definitely

508
00:22:21.650 --> 00:22:24.600
tapping the CPU at that
point. And so survey three

509
00:22:24.600 --> 00:22:27.390
had two, two options that
came out and, you know,

510
00:22:27.390 --> 00:22:28.950
as part of the insiders
program, I was playing around

511
00:22:28.950 --> 00:22:32.220
with some of the builds
early on and I use

512
00:22:32.220 --> 00:22:35.310
the new pixel, the bitmap
API originally. And I started

513
00:22:35.310 --> 00:22:38.730
pushing out 50 bitmaps a
second. And originally that didn't,

514
00:22:39.270 --> 00:22:41.880
you know, perform really well,
but now it's on par

515
00:22:41.880 --> 00:22:43.470
with what I'm doing. So
I could actually go either

516
00:22:43.470 --> 00:22:46.050
way with this really. But
then for some reason, you

517
00:22:46.050 --> 00:22:48.000
know, I started messing around.
It was actually Peter Boise

518
00:22:48.000 --> 00:22:50.310
suggested, say, why don't you
just have it spit out

519
00:22:50.310 --> 00:22:54.200
a video? And it just
never occurred to me. Well,

520
00:22:54.200 --> 00:22:56.370
why would it such a
weird thing to say, Then

521
00:22:56.370 --> 00:22:59.610
you think, well, what's the
Commodore 64 doing, it's spitting

522
00:22:59.610 --> 00:23:03.120
out a video it's spitting
out like, you know, 50

523
00:23:03.120 --> 00:23:04.560
frames per second, a video
that nobody You go to

524
00:23:04.560 --> 00:23:05.970
your television and it's such
a nice way to do

525
00:23:05.970 --> 00:23:08.310
it because it lets them
worry about the buffering. It

526
00:23:08.310 --> 00:23:10.740
makes us double buffering problem.
And nonissue. I wrote a

527
00:23:10.740 --> 00:23:14.820
web cam application to pull
frames from the baby cam

528
00:23:14.880 --> 00:23:17.600
the nanny cam and put
it into a widget in

529
00:23:17.660 --> 00:23:20.940
a Vista widget. And it
was a matter of just

530
00:23:21.030 --> 00:23:23.280
getting bitmaps and throwing them
over the, you know, it

531
00:23:23.280 --> 00:23:25.920
was a poor man's video,
right? Because I didn't have

532
00:23:25.920 --> 00:23:28.470
those constructs, those high level
constructs where I would actually

533
00:23:28.470 --> 00:23:31.830
have a video source. And
I think that's an interesting

534
00:23:32.130 --> 00:23:34.710
aspect of this. And I
let you know on a

535
00:23:34.710 --> 00:23:36.630
slow machine and I haven't
actually tested on a slow

536
00:23:36.630 --> 00:23:38.940
machine yet, but on a
slow machine, several I can

537
00:23:38.940 --> 00:23:40.680
manage dropping frames. You know,
I don't have to put

538
00:23:40.680 --> 00:23:42.390
anything in there. That's going
to get stuff out of

539
00:23:42.390 --> 00:23:44.310
sync with the keyboard input
or I've tried it on

540
00:23:44.310 --> 00:23:46.910
a Mac yet. I have
not. Now I will say

541
00:23:46.940 --> 00:23:49.100
one thing that the reason
I haven't tried it on

542
00:23:49.100 --> 00:23:51.170
a Mac yet is because
several, it gives you a

543
00:23:51.170 --> 00:23:53.900
certain set of key codes
that it'll recognize and map

544
00:23:53.900 --> 00:23:57.020
for you automatically the keyboard
yeah. From the keyboard. And

545
00:23:57.020 --> 00:24:00.290
then there are some keys
that are not mapped, which

546
00:24:00.290 --> 00:24:03.290
are things like the bracket
key and you know, the

547
00:24:03.510 --> 00:24:06.290
little slash key, the pipe
key, things like that, which,

548
00:24:06.290 --> 00:24:07.670
you know, I think just
to keep the working set

549
00:24:07.670 --> 00:24:10.640
small. And so I don't
know what the keyboard codes

550
00:24:10.640 --> 00:24:12.860
are for those on the
Mac. And so I have

551
00:24:12.860 --> 00:24:16.460
platform specific key code hooks
in here just for windows

552
00:24:16.460 --> 00:24:19.330
on it. I noticed when
you hit shift too, which

553
00:24:19.330 --> 00:24:21.700
is an on an American
keyboard is an add sign,

554
00:24:21.730 --> 00:24:24.100
but on a Commodore, it
was a double quote. Yep.

555
00:24:24.130 --> 00:24:25.960
It was a double quote.
So you kind of through,

556
00:24:26.210 --> 00:24:29.230
and the right bracket is
a, you know, the Astros.

557
00:24:29.620 --> 00:24:30.820
And so if you have
a comment or you always

558
00:24:30.820 --> 00:24:34.420
have the type load open
quote, asterisk closed, quote, come

559
00:24:34.420 --> 00:24:36.190
a come a one for
many of us, that's all

560
00:24:36.190 --> 00:24:37.450
we did most of the
time. Cause we just played

561
00:24:37.450 --> 00:24:40.360
games all on them and
you have to have that

562
00:24:40.360 --> 00:24:43.000
map, right? Complicated. Is this
how many lines of code

563
00:24:43.000 --> 00:24:44.530
are we talking about? Are
we talking a thousand lines,

564
00:24:44.530 --> 00:24:47.200
10,000 lines? That's a lot
of lines of code. You

565
00:24:47.200 --> 00:24:49.090
know, I've never actually done
a, you know, kind of

566
00:24:49.090 --> 00:24:51.250
a code counter. I'm looking
at your project here to

567
00:24:51.250 --> 00:24:53.890
see if it's something it's,
it's a big project. It's

568
00:24:53.890 --> 00:24:56.290
pretty cool. You look like
you've got about 40, 50

569
00:24:56.740 --> 00:24:58.930
CS files in there. Yeah.
There are a lot. And

570
00:24:58.930 --> 00:25:01.150
some of those CS files
like the one for the

571
00:25:01.150 --> 00:25:04.140
Vic chip and the one
for the CPU have just

572
00:25:04.150 --> 00:25:06.640
an enormous switch statement, which,
you know, we'd like to

573
00:25:06.640 --> 00:25:09.280
normally keep your switch statements
pretty small, but when you

574
00:25:09.280 --> 00:25:11.560
have to have one switch
statement for every op code

575
00:25:11.950 --> 00:25:13.870
that the CPU would normally
have, it gets pretty big.

576
00:25:13.900 --> 00:25:16.570
Even for something as simple
as the apex. Sure. I'm

577
00:25:16.570 --> 00:25:18.280
looking at your code here.
And I think it's interesting.

578
00:25:18.280 --> 00:25:19.870
You've got Dan, you know,
a lot, a lot, a

579
00:25:19.870 --> 00:25:25.270
bit shifting a lot of
manipulation of, yeah. I mean,

580
00:25:25.270 --> 00:25:27.280
this is just piles of
pitch. If you can matrix

581
00:25:27.310 --> 00:25:30.490
math and yeah. That doesn't
look like any fun code

582
00:25:30.490 --> 00:25:34.420
to write. It's not necessarily
fun to write it. But

583
00:25:34.420 --> 00:25:37.240
then when you see that
doctor who is walking across

584
00:25:37.240 --> 00:25:40.150
the screen Yeah. That doctor
who running the video game

585
00:25:40.180 --> 00:25:42.700
and that's just totally worth
it at that. That's amazing.

586
00:25:43.750 --> 00:25:45.250
Wow. So what are the
plans with this? Where are

587
00:25:45.250 --> 00:25:46.780
you going to release this
as open source? Give it

588
00:25:46.780 --> 00:25:48.730
to the people. Yeah. So
the, the code right now

589
00:25:48.730 --> 00:25:51.480
is sort of lab quality,
but you know, I think

590
00:25:51.490 --> 00:25:52.720
it'd be good for people
to have it so they

591
00:25:52.720 --> 00:25:54.940
can see how it works
and you know, and just,

592
00:25:55.000 --> 00:25:57.520
you know, play with it.
My next step is there's

593
00:25:57.520 --> 00:26:00.040
another emulator out there for
the commerce 64 called the

594
00:26:00.040 --> 00:26:03.460
vice emulator and they take
a totally different approach to

595
00:26:03.460 --> 00:26:05.380
how you emulate the common
or like this one does

596
00:26:05.650 --> 00:26:10.210
cycle exact Scanline emulation is
very CPU intensive and the

597
00:26:10.210 --> 00:26:13.060
vice one is event driven.
Although I'm not entirely sure

598
00:26:13.060 --> 00:26:15.280
what that means in this
context, but it's much easier

599
00:26:15.280 --> 00:26:17.290
on your CPU. So I
was thinking, I might actually

600
00:26:17.290 --> 00:26:19.450
give a hit of, now
that I understand the architecture

601
00:26:19.450 --> 00:26:21.940
of the Commodore. Right. And
I could port something else

602
00:26:21.940 --> 00:26:24.280
over without just doing a
line by line port, but

603
00:26:24.280 --> 00:26:27.760
really understanding like what the
parts do. So is there

604
00:26:27.760 --> 00:26:29.800
a code here? You don't
understand? There, there are a

605
00:26:29.800 --> 00:26:31.840
couple of things, but you
still don't get it. There

606
00:26:31.840 --> 00:26:33.430
are a couple places I'm
like, I don't know what

607
00:26:33.430 --> 00:26:35.380
that's doing right there, but
it appears to be working.

608
00:26:35.410 --> 00:26:37.150
Yeah. But then I've learned
an awful lot of the

609
00:26:37.150 --> 00:26:39.820
other spots here that I
knew a lot more about

610
00:26:39.820 --> 00:26:41.500
the guts of a <inaudible>
than I did when I

611
00:26:41.500 --> 00:26:42.730
was using it back. And
how did you learn a

612
00:26:42.730 --> 00:26:45.420
lot about guts of server
line? Yeah. Was super light

613
00:26:45.420 --> 00:26:47.040
in your, this is a
weird question, but was it

614
00:26:47.040 --> 00:26:49.560
in your way at all?
Was several like in my

615
00:26:49.560 --> 00:26:52.920
way, well, since I specifically
wanted to do this in

616
00:26:52.920 --> 00:26:56.430
Silverlight now the reason I
ask is that I've been

617
00:26:56.430 --> 00:26:59.700
doing a lot of asp.net
MVC right now. And I

618
00:26:59.730 --> 00:27:01.980
like that as a framework.
It's not in my way.

619
00:27:02.400 --> 00:27:03.780
Right. I'm not like I
can't get out of my

620
00:27:03.780 --> 00:27:07.260
way framework. Right. And I'm
wondering, do you feel constrained

621
00:27:07.440 --> 00:27:10.260
inside of several layers? I
mean you're managed code. Yes.

622
00:27:10.260 --> 00:27:12.390
I'm writing managed code and
I don't have pointers. Right,

623
00:27:12.510 --> 00:27:14.160
right. So that's the that's
really, the big thing was

624
00:27:14.160 --> 00:27:15.390
I don't have pointers, so
I have to do all

625
00:27:15.390 --> 00:27:17.610
this stuff in a race,
but it's like big deal.

626
00:27:17.700 --> 00:27:20.100
And you haven't reached any
perf issues to the point

627
00:27:20.100 --> 00:27:22.600
where you need to actually
use a profiling. No. So

628
00:27:22.710 --> 00:27:24.390
I was looking here, I've
seen various places where you're,

629
00:27:24.720 --> 00:27:27.600
you're casting and some stuff,
and you're, you know, you're

630
00:27:27.840 --> 00:27:29.760
probably some boxing in there
that may or may not

631
00:27:29.760 --> 00:27:33.240
be I'm intentional. I know
where my perf problems are

632
00:27:33.240 --> 00:27:34.620
in this app that I,
that I want to take

633
00:27:34.620 --> 00:27:37.980
care of. And that's, you
know, I did a lot

634
00:27:37.980 --> 00:27:39.550
of let's just get it
working and see what happens.

635
00:27:40.980 --> 00:27:42.900
So they're in a lot
of, I'm doing a lot

636
00:27:42.900 --> 00:27:47.130
of array copying as opposed
to sending offsets into array.

637
00:27:47.160 --> 00:27:49.320
So like, you know, they
would pass around in the

638
00:27:49.320 --> 00:27:52.200
old code. They would pass
around like pointers to an

639
00:27:52.200 --> 00:27:56.340
offset, into an array of
characters. Right, right. For different

640
00:27:56.340 --> 00:27:59.460
reasons. And I'm doing like
a, you know, a subset

641
00:27:59.460 --> 00:28:00.990
of that array, which is
a copy of that array.

642
00:28:00.990 --> 00:28:02.430
And I send it over
to the functions and then

643
00:28:02.430 --> 00:28:04.770
do something right. And I
know all that array. Yeah.

644
00:28:04.800 --> 00:28:06.780
I know all that array
copying is, is where I'm

645
00:28:06.780 --> 00:28:09.750
taking a hit. It'd be
really, really interesting to profile

646
00:28:09.810 --> 00:28:13.260
and see, cause a, you
know, with the faster machines

647
00:28:13.260 --> 00:28:15.060
with managed code, the whole,
you're not going to need

648
00:28:15.060 --> 00:28:17.790
it is so true these
days. And you might find

649
00:28:17.790 --> 00:28:19.020
that that's not that big
of a deal and it

650
00:28:19.020 --> 00:28:20.880
might be something we didn't
even think of. Right. Well,

651
00:28:20.880 --> 00:28:23.580
this is fantastic. A few
people can check out your

652
00:28:23.580 --> 00:28:29.340
blog@irritatedvowel.com or you're on Twitter,
Twitter, Pete underscore Brown, Pete

653
00:28:29.340 --> 00:28:32.790
underscore Brown. And if there's
any she's 64 enthusiast, are

654
00:28:32.790 --> 00:28:35.100
you to the point where
you're interested in folks that

655
00:28:35.100 --> 00:28:37.080
maybe have written emulators, you
might be listening and will

656
00:28:37.080 --> 00:28:39.270
absolutely help out a little
bit. I mean, this is,

657
00:28:39.600 --> 00:28:41.190
you know, I'll, I'll stick
this stuff out on code

658
00:28:41.190 --> 00:28:44.430
Plex and anybody who is
interested in playing around with

659
00:28:44.430 --> 00:28:46.830
it or contributing to it
and stuff, please help yourself.

660
00:28:46.860 --> 00:28:48.840
I mean, this is just
cool stuff. Awesome. Well, thanks

661
00:28:48.840 --> 00:28:50.880
so much, Pete Brown, I
heard Mixo nine in Las

662
00:28:50.880 --> 00:28:53.940
Vegas and this has been
another episode of Hansel minutes.

663
00:28:54.090 --> 00:29:08.370
And I'll see you again
next week. <inaudible>.

