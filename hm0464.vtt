WEBVTT FILE

1
00:00:01.350 --> 00:00:04.500
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:04.500 --> 00:00:07.470
they make the show possible.
Today's show is sponsored by

3
00:00:07.470 --> 00:00:11.640
developer express, become a UI
superhero with dev express controls

4
00:00:11.640 --> 00:00:16.170
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:16.560 --> 00:00:20.640
by leveraging your existing knowledge,
you can build next generation

6
00:00:20.670 --> 00:00:24.750
touch enabled solutions for tomorrow,
you can download your free

7
00:00:24.870 --> 00:00:48.330
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com
from Hanselman it's dot com.

8
00:00:48.840 --> 00:00:52.470
It's Hansel minutes, all weekly
discussion with web developer and

9
00:00:52.470 --> 00:00:56.970
technologist Scott Hanselman. This is
Lawrence Ryan announcing the show number

10
00:00:56.970 --> 00:01:01.050
four 64. In this episode,
Scott talks with closure expert,

11
00:01:01.140 --> 00:01:04.590
Karen Meyer about how to get
started with this powerful functional

12
00:01:04.590 --> 00:01:09.750
language. Hi, this is Scott
Hanselman. This is another episode

13
00:01:09.750 --> 00:01:12.780
of Hansel minutes, and I'm
talking with Karen Meyer from outpaced

14
00:01:12.780 --> 00:01:16.650
systems. She's a, you studied
physics in college, but you

15
00:01:16.650 --> 00:01:19.290
also were a professional ballet
dancer. So you've got experience

16
00:01:19.290 --> 00:01:21.750
spanning many years in many
disciplines. Thanks for chatting with

17
00:01:21.750 --> 00:01:25.320
me today. Thanks for having
me. You have a book

18
00:01:25.320 --> 00:01:28.020
coming out though that I'm
very excited about called living

19
00:01:28.020 --> 00:01:29.820
closure, and this is going
to be coming out just

20
00:01:29.820 --> 00:01:32.570
in a couple of months,
right? Correct. I'm very excited

21
00:01:32.570 --> 00:01:37.270
too. What was it about
the closure language that, that

22
00:01:37.340 --> 00:01:39.020
made you feel like there
was a book inside you

23
00:01:39.020 --> 00:01:41.540
and you needed to get
it out? Well, I love

24
00:01:41.540 --> 00:01:46.370
closure. I was so happy
when I finally discovered it.

25
00:01:46.430 --> 00:01:50.120
It brought a lot of
joy to my programming and

26
00:01:50.150 --> 00:01:53.270
I wanted to be able
to share that language and

27
00:01:53.270 --> 00:01:57.650
get people into it. But
I noticed around me that

28
00:01:57.830 --> 00:02:01.400
some people were having trouble
getting into the language. We

29
00:02:01.400 --> 00:02:04.370
have a, a user group,
a local user group in

30
00:02:04.370 --> 00:02:09.650
Cincinnati, which is great, but
I hear people sometimes saying

31
00:02:09.680 --> 00:02:12.230
I tried to learn closure
over the weekend and I

32
00:02:12.230 --> 00:02:15.140
had a really hard time
doing it, I guess it's

33
00:02:15.140 --> 00:02:18.020
just not for me. And
it happened at the same

34
00:02:18.020 --> 00:02:21.680
time. I was actually trying
to run a five K

35
00:02:21.680 --> 00:02:26.780
and I've never run before
and I kept trying to

36
00:02:26.780 --> 00:02:29.660
run and I, I think
I would do too much

37
00:02:30.410 --> 00:02:35.060
and end up failing and
just figure, Oh, I just

38
00:02:35.060 --> 00:02:37.880
can't run. And then I
finally came into this program.

39
00:02:37.880 --> 00:02:39.980
I think it was called
ease, ease in the 5k

40
00:02:40.580 --> 00:02:42.560
and actually have a plan
for you that said, Oh,

41
00:02:42.710 --> 00:02:44.480
you don't do it all
on a weekend or you

42
00:02:44.480 --> 00:02:46.370
don't do it all in
two weeks. You just build

43
00:02:46.370 --> 00:02:50.660
up gradually. And that finally
after doing that and not

44
00:02:50.660 --> 00:02:52.910
doing too much too fast,
I was finally able to

45
00:02:52.910 --> 00:02:55.100
run a five K. So
it kind of a bell

46
00:02:55.100 --> 00:02:57.080
went off in my head
saying, Hey, you know what?

47
00:02:57.110 --> 00:03:00.970
Maybe the same approach to
learning language is, is the

48
00:03:00.970 --> 00:03:04.210
same way as you know,
learning to run or learning

49
00:03:04.210 --> 00:03:08.080
anything. The reason I think
that people run into trouble

50
00:03:08.080 --> 00:03:11.500
is they try to do
too much too fast. So

51
00:03:11.500 --> 00:03:13.330
the point of the book
is a, is an introduction,

52
00:03:13.570 --> 00:03:17.320
but it's also to give
a paced training plan. That's

53
00:03:17.320 --> 00:03:20.190
a gradual, What do you
think it is about the

54
00:03:20.190 --> 00:03:23.040
state of programming languages today
that makes people feel like,

55
00:03:23.070 --> 00:03:24.960
you know, if I can't
learn it in 15 minutes,

56
00:03:24.960 --> 00:03:27.120
then, well, forget it. Like
if it's not tweet sized,

57
00:03:27.120 --> 00:03:28.970
if there's entire language grammar,
doesn't fit inside as a

58
00:03:28.980 --> 00:03:31.590
tweet, then I, it's not
for me. I mean, closure's

59
00:03:31.590 --> 00:03:34.500
not C-sharp or Java. It's
not something that you just

60
00:03:34.890 --> 00:03:38.250
figure out in a couple
of hours. Yeah. I think,

61
00:03:38.280 --> 00:03:41.490
well, there's a couple contributing
factors to that, right? I

62
00:03:41.490 --> 00:03:43.200
mean, at first for me,
and for a lot of

63
00:03:43.200 --> 00:03:47.670
people coming from an object
oriented language, like Ruby or

64
00:03:47.670 --> 00:03:52.230
Java or any, or any
other language is different than

65
00:03:52.230 --> 00:03:55.140
functional, it's all about a
different way of thinking. And

66
00:03:55.140 --> 00:03:59.070
that's training your brain fundamentally
to think in a different

67
00:03:59.070 --> 00:04:02.130
way. And I, I don't
think it's really easy to

68
00:04:02.130 --> 00:04:04.320
do that over the course
of a weekend. And the

69
00:04:04.320 --> 00:04:10.110
other factor is just the
pace of change now and

70
00:04:10.200 --> 00:04:13.560
with Twitter and with blogs.
And I love it. I

71
00:04:13.560 --> 00:04:16.560
love the pace of innovation
and technology, but this feels

72
00:04:16.570 --> 00:04:20.010
overwhelming. Sometimes you feel very
pressured to learn the next

73
00:04:20.010 --> 00:04:23.400
thing or learn it fast
as you can cram it

74
00:04:23.400 --> 00:04:27.660
in. This is a, is
it correct to call this

75
00:04:27.690 --> 00:04:31.590
a list? It is, yeah.
Closure is less. So That

76
00:04:31.590 --> 00:04:34.050
mean for people who like,
let's think about who's listening

77
00:04:34.050 --> 00:04:36.480
to this show, like they've
heard the word list. Maybe

78
00:04:36.480 --> 00:04:39.480
they learned it for a
week or two in college

79
00:04:39.480 --> 00:04:42.390
and forgot it. And 20
years has gone by and

80
00:04:42.390 --> 00:04:45.870
they have a sense that,
well, they're smart people and

81
00:04:45.870 --> 00:04:48.780
they know what list is,
but then there's, there's me.

82
00:04:49.290 --> 00:04:52.290
And I, you know, I
drag buttons onto a forum

83
00:04:52.290 --> 00:04:54.030
and I kind of, you
know, I'm, I'm speaking actually

84
00:04:54.030 --> 00:04:57.000
about myself. You know what
I mean? Like I intellectualized

85
00:04:57.030 --> 00:04:59.100
lists, but I always feel
like there's a level of

86
00:04:59.100 --> 00:05:02.550
discourse that's happening around the
concept of lists and a

87
00:05:02.550 --> 00:05:06.120
list that I'm not able
to participate in. Yeah. Well,

88
00:05:06.720 --> 00:05:10.860
I guess lisp is, it
comes from, I think it's

89
00:05:10.890 --> 00:05:15.420
list processing. I forget exactly
the, what it stands for,

90
00:05:15.840 --> 00:05:18.270
but the thing that I
love about it is it's

91
00:05:18.330 --> 00:05:23.580
just such a simple syntax.
And there's so little to

92
00:05:23.580 --> 00:05:28.710
remember, which really suits me.
It's a very regular syntax.

93
00:05:28.740 --> 00:05:32.610
There's lots of prints, but,
and I know people get

94
00:05:33.120 --> 00:05:36.960
scared at that. Like, Oh
my gosh, all the brands,

95
00:05:36.970 --> 00:05:38.790
what am I going to
do? But really when you

96
00:05:38.790 --> 00:05:42.420
get a editor that handles
the prints for you, they

97
00:05:42.420 --> 00:05:46.050
just kind of seem to
disappear and you can actually

98
00:05:46.050 --> 00:05:50.070
move things back and forth
really efficiently. And people have

99
00:05:50.070 --> 00:05:54.510
actually come to think of
the Prinz as hugs for

100
00:05:54.510 --> 00:05:59.570
their code. That Is very
cool. Whenever I think about

101
00:05:59.570 --> 00:06:03.440
Lisbon parentheses, I think about
the classic XKCD number two

102
00:06:03.440 --> 00:06:07.250
97, where they hand the,
you know, the obiwan basically

103
00:06:07.250 --> 00:06:10.010
comes over and hand someone,
a pile of parentheses and

104
00:06:10.010 --> 00:06:13.130
says, these are your father's
princesses elegant weapons for the

105
00:06:13.130 --> 00:06:16.790
more civilized age closure has
been a list. Brother has

106
00:06:16.790 --> 00:06:22.220
been around for forever, you
know, in 1958. And when

107
00:06:22.220 --> 00:06:25.580
you say though, a, a
list that's where I think

108
00:06:25.580 --> 00:06:28.730
things get a little interesting,
cause there's the list proper

109
00:06:28.730 --> 00:06:32.210
noun, but now has become
a generic term for other

110
00:06:32.210 --> 00:06:35.980
people's lists, Right? So there
are different dialects of lists

111
00:06:36.040 --> 00:06:40.390
and like common lists. And
I guess closure is another

112
00:06:40.390 --> 00:06:45.880
dialect and scheme. And to
tell you, quite frankly, I

113
00:06:45.880 --> 00:06:52.270
don't know exactly how they
all differ, but fundamentally they

114
00:06:52.270 --> 00:06:58.150
are all about processing lists
and your code is in

115
00:06:58.150 --> 00:07:04.030
a nested list of lists
and they execute and evaluate

116
00:07:04.090 --> 00:07:08.830
these forms and lists structures.
So at the very core,

117
00:07:08.830 --> 00:07:15.340
it's, it's a very beautiful
structure and I wouldn't get

118
00:07:15.340 --> 00:07:18.430
too hung up in the
different dialects. And that's just

119
00:07:18.430 --> 00:07:21.640
my personal opinion Is your
personal opinion is all of

120
00:07:21.640 --> 00:07:26.710
that, Of, you know, how,
how people can argue that

121
00:07:26.710 --> 00:07:29.200
it's not exactly this sort
of list because it's missing

122
00:07:29.230 --> 00:07:34.390
this exact syntax or whatever.
Some people have said that

123
00:07:34.870 --> 00:07:38.920
they think of closure as
being like an extremely powerful,

124
00:07:39.400 --> 00:07:42.100
they call it a power
language, right? Like if you

125
00:07:42.100 --> 00:07:44.470
were going to pick between
Haskell and closure, they're like,

126
00:07:44.470 --> 00:07:47.260
well, you know, Haskell's great.
There's some things you can

127
00:07:47.260 --> 00:07:49.870
do with it and production,
but if you're really serious,

128
00:07:50.050 --> 00:07:51.400
you want to get some
work done, you go with

129
00:07:51.400 --> 00:07:55.570
closure because it is fully
and completely compiled. And it

130
00:07:55.570 --> 00:07:58.030
runs on the job of
VM. I think there's also

131
00:07:58.030 --> 00:08:00.880
one that runs in the.net
runtime, but it also remains

132
00:08:00.880 --> 00:08:05.470
completely dynamic. It's not an
academic language, but any case

133
00:08:05.470 --> 00:08:07.590
like you're doing real work
and getting real stuff done.

134
00:08:08.110 --> 00:08:10.120
Yeah. I mean, I've been
using it in my day

135
00:08:10.120 --> 00:08:14.260
job for quite a while
and we love it, feel

136
00:08:14.260 --> 00:08:18.040
highly productive in it. We
use it for the backend

137
00:08:18.070 --> 00:08:23.020
for web services for API
APIs, but we also use

138
00:08:23.020 --> 00:08:25.120
it in the front end
and the browser now with

139
00:08:25.720 --> 00:08:30.760
closure script. So this makes
it very compelling that it's,

140
00:08:30.760 --> 00:08:34.720
it's a, I mean, there
is a few different dialect

141
00:08:34.720 --> 00:08:38.860
changes between closure script and
closure closure script is sort

142
00:08:38.860 --> 00:08:40.720
of a subset of closure,
but it allows you to

143
00:08:40.720 --> 00:08:43.690
work in the same language,
basically in the same mindset

144
00:08:43.990 --> 00:08:46.990
in the front end and
in the backend, which is

145
00:08:47.860 --> 00:08:52.840
just lovely, Really so well,
well, everyone is off talking

146
00:08:52.840 --> 00:08:55.060
about things like node and
look how wonderful it is.

147
00:08:55.140 --> 00:08:56.820
I can write JavaScript on
the server and JavaScript on

148
00:08:56.820 --> 00:08:59.520
the client. You are still
doing the exact same thing

149
00:08:59.520 --> 00:09:01.980
except in the language that
speaks more to your soul.

150
00:09:03.900 --> 00:09:06.840
That is amazing. And this
is something that's production ready.

151
00:09:06.840 --> 00:09:09.840
I mean, someone could go
into closure and also closure

152
00:09:09.840 --> 00:09:12.240
script and not feel in
any way that they were

153
00:09:12.360 --> 00:09:15.000
living on the cutting edge
of, you know, like I

154
00:09:15.000 --> 00:09:17.150
don't know about going into
production with Oh yeah. I

155
00:09:17.150 --> 00:09:20.480
mean, it's, it's gotten a
whole lot of traction lately.

156
00:09:21.380 --> 00:09:24.950
So I think it was
on the ThoughtWorks, like adopt

157
00:09:25.940 --> 00:09:28.850
radar for the past couple
years. And I've just noticed

158
00:09:28.850 --> 00:09:34.130
personally, just many, many companies
using it in production. So

159
00:09:34.280 --> 00:09:37.100
if you're a closure developer,
it's a happy time. There's

160
00:09:37.310 --> 00:09:41.780
quite a few jobs out
there now, Someone compared, and

161
00:09:41.790 --> 00:09:43.460
I know that this is
a weird comparison, but they

162
00:09:43.460 --> 00:09:48.980
compare it to closure and
its ecosystem to Python. In

163
00:09:48.980 --> 00:09:51.350
the sense of it has
this, all these tools. There's

164
00:09:51.350 --> 00:09:54.170
so many of them, it's
very straightforward. It's very flexible,

165
00:09:54.530 --> 00:09:56.330
but it'll take you a
long way. You could write

166
00:09:56.330 --> 00:09:58.940
a little script in it
and a little utility, or

167
00:09:58.940 --> 00:10:01.220
you could go and make
a whole distributed cluster in

168
00:10:01.220 --> 00:10:05.210
M in Amazon web services
all with, with closure. I

169
00:10:05.270 --> 00:10:07.820
can't, I can't speak to
the Python ecosystem cause I'm

170
00:10:07.820 --> 00:10:10.280
not, I don't, I'm not
really familiar with it, but

171
00:10:10.960 --> 00:10:16.040
the closure ex ecosystem is
really good. There's many libraries

172
00:10:16.040 --> 00:10:18.800
like AWS, any, anything that
you'd really need. And it

173
00:10:18.800 --> 00:10:22.700
also has the flexibility that
you can on the server

174
00:10:22.710 --> 00:10:27.530
side, use your favorite Java
libraries as well, because it's

175
00:10:27.530 --> 00:10:30.740
got the JVM interrupt and
on the closure strip sky

176
00:10:30.950 --> 00:10:34.010
aside, you can also use
JavaScript libraries as well. So

177
00:10:34.010 --> 00:10:38.300
it's got a lot of
flexibility Is, is the Java

178
00:10:38.330 --> 00:10:40.700
integration and the fact that
it primarily runs on the

179
00:10:40.700 --> 00:10:45.830
JVM, like something that comes
up a lot, like, are

180
00:10:45.830 --> 00:10:48.950
you finding yourself saying like,
this problem is solvable because

181
00:10:48.950 --> 00:10:51.680
of this really great tight
Java integration, like when you

182
00:10:51.680 --> 00:10:53.750
have a sense, like you're
interrupting, like you drop into

183
00:10:53.750 --> 00:10:55.850
Java. Like if you find
a Java class library. Yeah.

184
00:10:56.060 --> 00:10:59.600
Yeah. So it's not all
the time, but, but definitely

185
00:11:00.200 --> 00:11:03.440
it's common. For example, I'm
just thinking of a random

186
00:11:03.440 --> 00:11:08.270
thing, but like generating a
UID, you know, you can

187
00:11:08.270 --> 00:11:10.640
just drop down to the
Java interrupt and say, Hey,

188
00:11:10.760 --> 00:11:14.660
Java, you UID, give me
a new one and you

189
00:11:14.660 --> 00:11:17.480
don't have to write a
closure method to do that.

190
00:11:17.480 --> 00:11:19.130
But there is a closure
library. If you want to

191
00:11:19.130 --> 00:11:22.910
use a closure library that
wraps that and add some

192
00:11:22.910 --> 00:11:27.950
additional functionality to it. You
can use that instead Is,

193
00:11:28.160 --> 00:11:32.390
is closure. What they call
a pure functional language. It

194
00:11:32.390 --> 00:11:37.250
is not a pure functional
programming language in that it

195
00:11:37.250 --> 00:11:40.760
does embrace side effects and
side effects are things like,

196
00:11:41.420 --> 00:11:48.470
you know, writing, writing a
print statement, writing, you know,

197
00:11:48.500 --> 00:11:51.080
doing input now put stuff.
So it's not a pure

198
00:11:51.110 --> 00:11:55.600
functional programming language in that
respect, but it does manage

199
00:11:56.050 --> 00:12:00.130
state and side-effect do things
in a sane fashion. So

200
00:12:00.910 --> 00:12:03.490
yeah, it's, it's uncontrolled, so
it's not spread all over

201
00:12:03.490 --> 00:12:05.850
the place. So is it
fair to say that it

202
00:12:05.850 --> 00:12:08.880
is, it definitely is unquestionably
a functional language. It is

203
00:12:08.880 --> 00:12:12.450
a functional, you know, list
and it is attempting to

204
00:12:12.900 --> 00:12:16.590
do those things that functional
languages do well. Yes, yes.

205
00:12:16.620 --> 00:12:18.840
But it's, it's a practical
language and I think that's

206
00:12:18.840 --> 00:12:23.370
what makes it so good
for just general use because

207
00:12:23.370 --> 00:12:27.090
it, although it doesn't have
the purity of say Haskell,

208
00:12:28.440 --> 00:12:31.710
it does, it is functional
and it does let you

209
00:12:31.710 --> 00:12:37.530
do your job and your
work and Imply that purely

210
00:12:37.530 --> 00:12:39.660
functional languages are like really
cool. And they make you

211
00:12:39.660 --> 00:12:42.120
do nice feminazis sequences, but
when it comes to getting

212
00:12:42.120 --> 00:12:45.960
work done, they, Yeah, that
might be an unfair comparison,

213
00:12:45.960 --> 00:12:50.820
but Indeed, indeed. So in,
in your book, you know,

214
00:12:50.820 --> 00:12:53.100
you go through the structure
of closure and some of

215
00:12:53.100 --> 00:12:56.160
the flow, but you get
right into concurrency really early

216
00:12:56.160 --> 00:12:59.220
on like chapter three. What,
why is that? Is that

217
00:12:59.220 --> 00:13:01.440
because closure's really good at
that or because it's just

218
00:13:01.440 --> 00:13:03.660
a very concurrent time we're
living in It is well,

219
00:13:03.660 --> 00:13:07.020
both, I mean, but closure
that's one of it's, that's

220
00:13:07.020 --> 00:13:09.000
one of its driving points
and that's one of the

221
00:13:09.330 --> 00:13:13.080
things that made me first
explore. It was the ability

222
00:13:13.440 --> 00:13:17.100
to handle concurrency in a
nice way. You know, that,

223
00:13:17.330 --> 00:13:19.410
that sort of thing is
like really hard and Java,

224
00:13:19.680 --> 00:13:23.910
which was the language I
was coming from. So yeah.

225
00:13:23.920 --> 00:13:28.560
Yeah. It's got many different
approaches depending on what you're

226
00:13:28.560 --> 00:13:33.480
looking for, but mutable state
in a general sense is

227
00:13:33.480 --> 00:13:36.630
not something that's spread along
your code in a, in

228
00:13:36.630 --> 00:13:40.500
a spaghetti fashion. So it
allows you to actually handle

229
00:13:40.500 --> 00:13:45.480
concurrency. And your background before
closure was really all Java.

230
00:13:45.480 --> 00:13:47.640
You spent like 15 years,
right? In Java. Yeah. I

231
00:13:47.640 --> 00:13:51.540
did some Java and then
some Ruby as well. And

232
00:13:51.690 --> 00:13:54.870
did you feel like, was
it was the, the, the

233
00:13:54.870 --> 00:13:57.450
language structure of closure that
made it most attractive to

234
00:13:57.450 --> 00:13:59.310
you? Or did you care
that it ran on J

235
00:13:59.340 --> 00:14:01.680
the JVM or not like,
was that helpful in your

236
00:14:01.680 --> 00:14:03.990
decision to kind of switch
from Java to, I think

237
00:14:03.990 --> 00:14:06.570
it was definitely helpful that
it ran on the JVM

238
00:14:06.630 --> 00:14:09.900
and that I could have
the inner op with it,

239
00:14:10.620 --> 00:14:13.590
but the selling point that
really just made me fall

240
00:14:13.590 --> 00:14:16.950
in love with it was
the simplicity of it being

241
00:14:16.950 --> 00:14:21.360
a lisp and also the
interactive nature of development that

242
00:14:21.360 --> 00:14:26.280
you have this rebel, which
is what you work in,

243
00:14:26.670 --> 00:14:29.880
that you can really get
fast feedback and play with

244
00:14:29.880 --> 00:14:34.320
your data structures and almost
sculpt your code as you're

245
00:14:34.320 --> 00:14:38.230
writing it. And if you
pair that with a, you

246
00:14:38.400 --> 00:14:40.950
can use any, a lot
of editor choices, I use

247
00:14:40.950 --> 00:14:45.960
Emacs, but there's Intelijay and
eclipse has plugins, but it

248
00:14:45.960 --> 00:14:48.810
really, So if you would,
if you would, excuse my

249
00:14:48.810 --> 00:14:52.010
ignorance, you're sitting here and
you're writing a closure program.

250
00:14:52.010 --> 00:14:53.990
What kind of things do
you have open? You've got

251
00:14:54.470 --> 00:14:57.410
Emacs open, is that it
you're basically Fullscreen Emacs, and

252
00:14:57.410 --> 00:15:00.790
you just switched between buffers.
Where's your rep. Yeah. So

253
00:15:01.000 --> 00:15:04.600
the rebel is actually in
Emacs. So I use a,

254
00:15:05.530 --> 00:15:08.440
a plugin for Emacs where
you can jackin to your

255
00:15:08.440 --> 00:15:11.770
closure code, which sounds pretty
nice. That sounds pretty awesome.

256
00:15:11.770 --> 00:15:14.830
And matrix. So you jackin,
you get a, a rappel

257
00:15:14.830 --> 00:15:18.250
going and then you can
actually just kind of start

258
00:15:18.250 --> 00:15:23.050
driving through your code. And
a form is kind of

259
00:15:23.110 --> 00:15:26.470
what you call her. An
expression is the, the stuff

260
00:15:26.740 --> 00:15:29.440
in between the prints. So
you can go to the

261
00:15:29.440 --> 00:15:31.510
end of a print and
you can do a keystroke

262
00:15:31.600 --> 00:15:34.630
and it'll just evaluate it.
So you could just, you

263
00:15:34.630 --> 00:15:38.050
know, scroll through your code
and, you know, sort of

264
00:15:38.080 --> 00:15:44.380
interactively evaluate it and port
it over to another buffer

265
00:15:44.380 --> 00:15:49.660
and work with it. And
people call this a rebel

266
00:15:49.690 --> 00:15:53.980
driven development. It's a really
nice way to play with

267
00:15:53.980 --> 00:15:55.720
stuff, get an idea of
where you want to go

268
00:15:55.720 --> 00:15:58.540
with it. And then you
can bring it into a

269
00:15:58.540 --> 00:16:01.900
test or, you know, depending
on what your workflow is

270
00:16:01.900 --> 00:16:06.370
at the time. But One
of the things that happens

271
00:16:06.370 --> 00:16:08.740
in the law, in the
nonfunctional languages that I'm familiar

272
00:16:08.740 --> 00:16:11.590
with is that debugging is
a challenge because there's so

273
00:16:11.590 --> 00:16:13.900
much set up to get
into the function that needs

274
00:16:13.900 --> 00:16:15.550
to do what you want
to do. So it's, you

275
00:16:15.550 --> 00:16:18.760
know, it's like, you know,
start debugging and step steps

276
00:16:18.760 --> 00:16:21.370
to up and make sure
the state is correct. And

277
00:16:21.370 --> 00:16:23.470
then once I get to
this point, now I'm ready.

278
00:16:23.470 --> 00:16:25.660
So you spend less time
actually writing the code and

279
00:16:25.660 --> 00:16:29.410
more time getting the state.
Yeah, exactly. And that's, that's

280
00:16:29.440 --> 00:16:32.530
one of the advantages of
functional programming, right? That you

281
00:16:32.530 --> 00:16:35.860
kind of strive for these
small functions that, you know,

282
00:16:35.860 --> 00:16:39.300
ideally they don't have side
effects. So if you, if

283
00:16:39.300 --> 00:16:40.900
you did run them with
the same inputs are always

284
00:16:40.900 --> 00:16:42.460
going to give you the
same output. So it makes

285
00:16:42.520 --> 00:16:48.970
your code a lot easier
to test. And not only

286
00:16:48.970 --> 00:16:51.460
do you go into concurrency
really quick, you spend an

287
00:16:51.460 --> 00:16:55.960
entire chapter of your book
talking about core.ac. Yeah. That's

288
00:16:55.960 --> 00:17:00.220
a really exciting library. I
really enjoy it. And the

289
00:17:00.220 --> 00:17:03.370
nice thing about that is,
well, let me step back

290
00:17:03.370 --> 00:17:05.800
and tell you a little
bit what, what Cory sink

291
00:17:05.800 --> 00:17:09.040
is. So it allows you
to set up almost like

292
00:17:09.250 --> 00:17:12.880
pipelines. I like to think
of them as like pipelines

293
00:17:14.110 --> 00:17:22.120
of processing and you can
do this asynchronously. So you

294
00:17:22.120 --> 00:17:26.350
can set up these pipelines
and send whatever sort of

295
00:17:26.350 --> 00:17:29.290
processing you want to it.
And you can actually just

296
00:17:29.290 --> 00:17:31.570
like pipe, you can build
them up to other pipes,

297
00:17:34.540 --> 00:17:36.550
But you're doing asynchronous. Like
I understand the idea of

298
00:17:36.550 --> 00:17:40.000
like, you know, you know,
sending this from said to

299
00:17:40.000 --> 00:17:42.430
OC to more et cetera,
and I'm making a pipeline,

300
00:17:42.430 --> 00:17:45.340
but all of that synchronous
when I get it Right.

301
00:17:45.340 --> 00:17:47.650
So you can, you can
make a nice synchronously. And

302
00:17:47.710 --> 00:17:52.980
also the is available on
the server side and an

303
00:17:52.980 --> 00:17:56.550
enclosure script on the front
end as well. So you've

304
00:17:56.550 --> 00:18:02.160
got that nice duality that
you can take the, take

305
00:18:02.160 --> 00:18:05.430
the same tack both on
the server side and the

306
00:18:05.430 --> 00:18:08.280
front end. And the benefit
of that on the browser

307
00:18:08.280 --> 00:18:12.090
side is it gives you
a asynchronous processing on the

308
00:18:12.090 --> 00:18:15.140
browser as well. Oh, wow.
I see. So they've mapped

309
00:18:15.140 --> 00:18:19.460
that asynchronous pipeline model to
winning no promises or whatever,

310
00:18:19.460 --> 00:18:21.860
the thing within JavaScript that
allows you to, you know,

311
00:18:21.860 --> 00:18:24.440
to manage those expectations asynchronously.
So you're doing it in

312
00:18:24.440 --> 00:18:27.920
a familiar way without having
to know idiomatic, JavaScript. Exactly.

313
00:18:28.640 --> 00:18:33.230
Ah, interesting. Okay. Then you,
you get into the power

314
00:18:33.230 --> 00:18:35.150
of macros. Now I know
what macros are from a

315
00:18:35.150 --> 00:18:40.250
CE perspective, how do macros
work in closure? So macros

316
00:18:40.250 --> 00:18:43.070
are a kind of like
a way to do meta

317
00:18:43.100 --> 00:18:50.000
programming, but it allows you
to almost add features to

318
00:18:50.010 --> 00:18:53.930
language. So if you're in
language like Java and you

319
00:18:53.930 --> 00:18:58.670
wanted to add like this
Fu method, you've always wanted

320
00:18:58.670 --> 00:19:02.210
this Fu method and to
actually get that added. And

321
00:19:02.210 --> 00:19:05.630
then the language yourself you'd
have to send up a

322
00:19:05.660 --> 00:19:10.340
change requests to, I dunno,
who, and then years later,

323
00:19:10.370 --> 00:19:14.120
maybe, maybe it would get
into language, but you can

324
00:19:14.120 --> 00:19:17.780
do this fairly easily yourself
with closure, with a macro.

325
00:19:17.780 --> 00:19:22.940
And you can just add
your, your Fu that you

326
00:19:22.940 --> 00:19:25.400
wanted to call and it
would be there for you.

327
00:19:25.400 --> 00:19:31.460
So it makes DSLs domain
specific languages really easy. I

328
00:19:31.460 --> 00:19:33.830
see. So it's kind of
like, I'm thinking about like

329
00:19:33.830 --> 00:19:36.620
extension methods on the dotnet
CLR, where it's like, you

330
00:19:36.620 --> 00:19:39.230
know, strings should really all
have this. I can't believe

331
00:19:39.230 --> 00:19:41.720
they didn't do that. Like
why that's unacceptable or, or

332
00:19:41.720 --> 00:19:47.060
monkey patching and Ruby. So
is this because the, the,

333
00:19:47.510 --> 00:19:51.710
the atoms, the pieces, the,
the individual available methods that

334
00:19:51.710 --> 00:19:54.140
you have enclosure are so
basic, like you have like,

335
00:19:54.170 --> 00:19:57.530
if, and you have do,
but there's no win. So

336
00:19:57.530 --> 00:20:00.650
if you need a win,
you know, you have to

337
00:20:00.650 --> 00:20:03.410
make that yourself. So then
that becomes a macro, right?

338
00:20:03.410 --> 00:20:05.960
Exactly. What is the difference
between a macro and a

339
00:20:05.960 --> 00:20:12.620
helper function? So it's kinda
gets, gets a little bit

340
00:20:12.620 --> 00:20:16.190
hairy, trying to look at
the difference of them, but

341
00:20:16.520 --> 00:20:21.560
so some things that like
a macro could do that

342
00:20:21.560 --> 00:20:23.780
help her function. Oh, let
me, let me, let me

343
00:20:23.780 --> 00:20:27.020
just say this, that if
you can use a helper

344
00:20:27.020 --> 00:20:30.230
function and on a macro,
you should always go with,

345
00:20:31.010 --> 00:20:35.090
Oh, really? Why is that?
Because macros get complicated. They're

346
00:20:35.090 --> 00:20:41.960
not easy to write, you
know, being a meta way

347
00:20:41.960 --> 00:20:45.140
of meta programming. So if
you can do something the

348
00:20:45.140 --> 00:20:51.040
simpler way first, you definitely
do this, but some things

349
00:20:51.040 --> 00:20:54.850
you just cannot use a
helper function for, for example,

350
00:20:54.850 --> 00:20:59.950
if you wanted to make
a new way, that would

351
00:21:00.010 --> 00:21:03.840
define a function. Oh, okay.
So you're changing fundamentally the

352
00:21:03.840 --> 00:21:06.060
language structure and how yeah.
Yeah. Or if you wanted

353
00:21:06.060 --> 00:21:08.820
to have, you know, something
that you always wanted to

354
00:21:08.820 --> 00:21:13.740
add to defin To define
a C diff Find a

355
00:21:13.740 --> 00:21:15.690
function, that's something that you
could couldn't do with a

356
00:21:15.690 --> 00:21:19.440
regular function. So you'd have
to use a macro to

357
00:21:19.440 --> 00:21:23.340
do that. I says you
can actually take over techniques

358
00:21:23.340 --> 00:21:27.000
and take over keywords within
closure and change things fundamentally.

359
00:21:28.080 --> 00:21:31.800
Oh, okay. Interesting. So, so
macros are these combinations of

360
00:21:31.830 --> 00:21:35.820
primitive, you know, forms that
are built in, but not

361
00:21:35.820 --> 00:21:38.400
necessarily interchangeable with a helper
function. But so it sounds

362
00:21:38.400 --> 00:21:40.200
like it's almost like taking
the safety off the gun

363
00:21:40.200 --> 00:21:42.030
at that point. Like once
you're, once you've made it

364
00:21:42.030 --> 00:21:44.790
that far into the book,
you're probably pretty good. Yeah.

365
00:21:46.350 --> 00:21:49.590
Okay. Now you say that
you're writing web apps, like

366
00:21:49.590 --> 00:21:54.090
what's the closure on rails,
what's the web framework. So

367
00:21:54.090 --> 00:21:58.080
it's a little bit different
closure as a, as a

368
00:21:58.080 --> 00:22:02.640
language and an ecosystem doesn't
really like frameworks. So we

369
00:22:02.640 --> 00:22:08.160
prefer kind of collections of
libraries instead. So there isn't

370
00:22:08.160 --> 00:22:12.990
really a killer app like
rails or anything like that.

371
00:22:13.950 --> 00:22:18.750
So you'll see very there
there's foundation libraries that kind

372
00:22:18.750 --> 00:22:23.040
of everybody uses, or most
people use this ring is

373
00:22:23.040 --> 00:22:26.820
a library for doing web
servers. And that's one that

374
00:22:26.820 --> 00:22:31.530
you'll see a lot in
the wild, but there are

375
00:22:31.530 --> 00:22:36.360
also some libraries that combine
other libraries that people put

376
00:22:36.360 --> 00:22:39.480
together to hack actually have
some more batteries included. So

377
00:22:39.480 --> 00:22:44.100
you don't have to have
a real pair down <inaudible>

378
00:22:44.610 --> 00:22:46.470
It seems like in the
research that I did that,

379
00:22:46.680 --> 00:22:50.160
even if you go searching
around for closure web framework,

380
00:22:50.260 --> 00:22:53.010
and this is again, Googling
and ignorance, which is what

381
00:22:53.010 --> 00:22:55.320
I do very well, you
know, I'll say, well, look,

382
00:22:55.380 --> 00:22:57.780
here it is, here's one
called luminous, right? This is,

383
00:22:58.290 --> 00:23:00.300
this is the solution. And
then I get in there

384
00:23:00.300 --> 00:23:03.870
and it immediately says, we're
a micro framework and we're

385
00:23:03.870 --> 00:23:06.360
based on a set of
lightweight library. So basically it's

386
00:23:06.360 --> 00:23:09.930
just someone drew a dotted
line around some useful methods

387
00:23:09.930 --> 00:23:12.360
and functions and said, yeah,
let's give that a name

388
00:23:12.450 --> 00:23:14.850
that's useful for people to
start with. And it's like,

389
00:23:14.850 --> 00:23:18.450
well, wait a second. This
isn't the, the DHH level

390
00:23:18.450 --> 00:23:20.880
opinion. Like, you're not ordering
me how to do things.

391
00:23:21.000 --> 00:23:23.520
This is just a collection
of useful things. It's very,

392
00:23:24.060 --> 00:23:27.300
it's very kind of laissez
Faire is the community like

393
00:23:27.300 --> 00:23:34.320
that. Just very micro framework.
Yeah, definitely, definitely prefer libraries

394
00:23:34.320 --> 00:23:38.790
over frameworks. It's even better
when these libraries are composable.

395
00:23:39.900 --> 00:23:44.070
Just like kind of keep
it simple, keep it composable,

396
00:23:45.710 --> 00:23:49.480
keep it light. That's really
kind of the, the closure

397
00:23:49.510 --> 00:23:53.200
ecosystem philosophy. Yeah. When I
went looking around on GitHub

398
00:23:53.230 --> 00:23:55.600
for different closure libraries, and
by the way, you all

399
00:23:55.600 --> 00:23:58.600
have some of the best
cool names. Like there's one

400
00:23:58.600 --> 00:24:02.860
called composure, but again, the
J is pronounced like an

401
00:24:02.860 --> 00:24:05.500
ass. I think it's just,
it's so cool. Like when

402
00:24:05.500 --> 00:24:07.090
you have a really awesome
name and everyone in the

403
00:24:07.090 --> 00:24:10.630
community goes for it entirely,
and you started poking around

404
00:24:10.630 --> 00:24:13.480
and it's like, it's four,
it's four files, you know,

405
00:24:13.510 --> 00:24:16.000
when a couple of K
each. So this is the

406
00:24:16.000 --> 00:24:17.640
thing about it. It kind
of speaks to the, the,

407
00:24:17.730 --> 00:24:20.710
the purity and the pragmatism
of the language purity in

408
00:24:20.710 --> 00:24:24.580
the sense of, you know,
here's the least viable thing

409
00:24:24.580 --> 00:24:27.760
I needed to be useful.
And, you know, I made

410
00:24:27.760 --> 00:24:30.340
it as clear and concise
as possible, and I wish

411
00:24:30.340 --> 00:24:34.870
you all the best with
it. Very true. That is

412
00:24:34.870 --> 00:24:38.800
great. Have you built up
your own libraries and within

413
00:24:38.800 --> 00:24:42.160
your company or a open
source thing? Yeah, we are.

414
00:24:42.550 --> 00:24:47.200
I, we are looking at
open sourcing a couple where

415
00:24:47.320 --> 00:24:49.300
I think we have to
get it more in a

416
00:24:49.630 --> 00:24:52.630
actually I think we have,
I'm trying to, I don't

417
00:24:52.630 --> 00:24:55.360
have to bring it up,
but I think we do

418
00:24:55.360 --> 00:24:57.610
actually open source a couple,
but the name names of

419
00:24:57.610 --> 00:25:00.310
them are escaping right now.
And we're open source a

420
00:25:00.310 --> 00:25:05.020
couple more. I've worked on
a couple libraries myself, just

421
00:25:05.020 --> 00:25:08.260
for fun. One of them
was for the AR Duran

422
00:25:08.260 --> 00:25:11.470
called CLJ drown. So, Yeah.
So just to make sure

423
00:25:11.470 --> 00:25:14.350
that people heard that you
made a drone, a library

424
00:25:14.350 --> 00:25:18.880
for it, you said an
AR drone. Yeah. The augmented

425
00:25:18.880 --> 00:25:20.980
reality. Is that what Yeah,
it does. It sounds for

426
00:25:21.190 --> 00:25:25.030
augmented reality. It's a quad
copter. So that was kind

427
00:25:25.030 --> 00:25:28.090
of my first closure library,
just kind of learning language

428
00:25:28.090 --> 00:25:29.890
and playing with it. And
that was a lot of

429
00:25:29.890 --> 00:25:32.590
fun. Being able to be
in a Rupal and having

430
00:25:32.650 --> 00:25:38.110
a quad copter take off
so that if you want

431
00:25:38.110 --> 00:25:41.050
to play around with quad
copters enclosure, that's a fun

432
00:25:41.050 --> 00:25:44.110
place. And that is actually
your most popular. Isn't that

433
00:25:44.110 --> 00:25:46.390
funny how that works? That's
your most popular GitHub repository?

434
00:25:46.390 --> 00:25:49.330
There's like almost 200 stars.
People like quad copter enclosure.

435
00:25:49.330 --> 00:25:53.560
That's awesome. It's pretty fun
that you did a, a,

436
00:25:53.640 --> 00:25:56.800
a cool talk a couple
of years ago about Alice

437
00:25:56.800 --> 00:25:59.170
in Wonderland as it relates
to closure. Can you talk

438
00:25:59.170 --> 00:26:04.270
about that? Yeah. So I'm
sure if you've heard these,

439
00:26:04.540 --> 00:26:08.980
if you've gotten into functional
programming, then you start hearing

440
00:26:09.010 --> 00:26:12.520
new vocabulary that you haven't
heard before. And one of

441
00:26:12.520 --> 00:26:15.430
the words that I heard
when I got into functional

442
00:26:15.430 --> 00:26:19.120
programming was monad and I
had no idea what this

443
00:26:19.120 --> 00:26:22.180
was and what people were
talking about. And I took

444
00:26:22.180 --> 00:26:25.450
the approach of, Oh, I'll
just sit down during lunch

445
00:26:25.510 --> 00:26:27.550
a couple of days and
I'll, I'll figure it all

446
00:26:27.550 --> 00:26:31.300
out. And I still had
no clue. I have to

447
00:26:31.300 --> 00:26:33.100
say, I think I knew
it once, but then it

448
00:26:33.100 --> 00:26:36.460
escaped me. Yeah. They're like
that you, you, you figure

449
00:26:36.470 --> 00:26:39.790
it out and then it
just goes away. But, so

450
00:26:40.570 --> 00:26:45.390
I decided to take a
more, a more hard approach

451
00:26:45.390 --> 00:26:50.490
of trying to learn it
and in studying papers and

452
00:26:51.210 --> 00:26:53.670
really kind of apply myself,
trying to learn it. I

453
00:26:53.670 --> 00:26:57.810
found maybe the best way
of trying to explain it

454
00:26:57.810 --> 00:27:00.210
to myself and to other
people was in the context

455
00:27:00.210 --> 00:27:05.610
of a story. So I'm
a big proponent of storytelling

456
00:27:05.610 --> 00:27:09.450
as a way of teaching.
And sometimes if you've got

457
00:27:09.570 --> 00:27:13.980
kind of a scary concept,
like monad, your brain kind

458
00:27:13.980 --> 00:27:16.890
of goes into anxiety, like,
Oh my gosh, how am

459
00:27:16.890 --> 00:27:18.630
I gonna learn this? But
if you put it in

460
00:27:18.630 --> 00:27:21.720
the context of a story
and an adventure of someone

461
00:27:21.720 --> 00:27:24.330
else doing it, you can
actually problem solve and learn

462
00:27:24.330 --> 00:27:27.210
things a little bit better.
So that's what that talk

463
00:27:27.210 --> 00:27:29.940
did that kind of took
an Alice in Wonderland approach

464
00:27:29.940 --> 00:27:33.770
to learning what monads were.
Can you give me a

465
00:27:33.770 --> 00:27:37.160
short explanation so that someone
might leave this podcast? Not

466
00:27:37.160 --> 00:27:39.170
only with a good understanding
of closure, which I think

467
00:27:39.170 --> 00:27:41.750
you've done, but also they
could tell someone at work

468
00:27:41.750 --> 00:27:43.940
what a monad is, or
is it something that takes

469
00:27:43.940 --> 00:27:47.270
another half an hour? Well,
th th the thing about

470
00:27:47.300 --> 00:27:53.720
monads are, they're almost very
Zen. Exactly. Yes, it is

471
00:27:55.430 --> 00:27:57.860
That you probably already know
them and you probably already

472
00:27:57.920 --> 00:28:02.480
implemented them, but you, you
won't realize that you have

473
00:28:02.570 --> 00:28:05.900
until you see the pattern
a few times. So it's

474
00:28:05.900 --> 00:28:07.790
not really something that you
can describe in words so

475
00:28:07.790 --> 00:28:09.980
much, you kind of just
have to see them code

476
00:28:09.980 --> 00:28:12.230
done like three or four
times. And you're like, Oh,

477
00:28:12.590 --> 00:28:16.460
I totally have done that.
That is extremely mr. Miyagi

478
00:28:16.490 --> 00:28:20.420
kind of like hand in
hand. I don't know what

479
00:28:20.420 --> 00:28:26.840
you're saying, mr. Miyagi, please
help me. Fantastic. So the,

480
00:28:26.930 --> 00:28:30.200
okay, so the language is
in as a list, it

481
00:28:30.200 --> 00:28:35.810
runs on the JVM. It
is functional, but practical the

482
00:28:35.810 --> 00:28:39.290
community, it sounds like they're
very welcoming community. Yes they

483
00:28:39.290 --> 00:28:42.230
are. And in fact, that
was one of the reasons

484
00:28:42.270 --> 00:28:45.140
I got involved in the
community. I wanted to get

485
00:28:45.140 --> 00:28:48.830
involved with an open source
project. And at the time

486
00:28:49.040 --> 00:28:52.250
there was a group trying
to make this a website

487
00:28:52.250 --> 00:28:55.730
called foreclosure that I got
hooked up with. And it's

488
00:28:55.730 --> 00:28:58.580
actually a four. And then
it's closure. It's something to

489
00:28:58.580 --> 00:29:02.840
do with like foreclosure poems,
but it's a wonderful site.

490
00:29:02.840 --> 00:29:06.140
So if you're, if you're
interested in getting into closure,

491
00:29:06.140 --> 00:29:09.500
you can actually try little
bite sized, fill in the

492
00:29:09.500 --> 00:29:14.540
blank, solve this closure problem.
And it's very addictive though.

493
00:29:14.570 --> 00:29:16.520
I have to warn you.
Like people have said that

494
00:29:16.520 --> 00:29:21.170
stayed up for nights, trying
to really, yes. So beware

495
00:29:21.290 --> 00:29:23.020
as you're as you're going
there, but it's a fantastic

496
00:29:23.030 --> 00:29:28.460
site. And it was a
fantastic first opensource project to

497
00:29:28.460 --> 00:29:31.250
get involved in as well.
And that's at the number

498
00:29:31.250 --> 00:29:37.430
four closure.com and there's a
whole problem list. And it

499
00:29:37.430 --> 00:29:39.860
goes from elementary all the
way up. It's almost like

500
00:29:39.860 --> 00:29:44.450
the, Oh, shoot. What, what,
what, what are the, I

501
00:29:44.500 --> 00:29:46.600
feel bad. I'm on my
own podcast. And I'm blanking.

502
00:29:46.870 --> 00:29:52.360
What is the, the, the
coding problems that you it's

503
00:29:52.390 --> 00:29:55.210
oiler, right? E U L
E R the other project.

504
00:29:55.900 --> 00:29:58.930
Am I pronounced project Euler?
Yeah. I think I'm pronouncing

505
00:29:58.930 --> 00:30:01.680
that right. It does have
some of those problems in

506
00:30:01.680 --> 00:30:05.400
there as well, but it
takes more of like a

507
00:30:05.400 --> 00:30:10.050
cone approach of your co
K O N. So it's

508
00:30:10.050 --> 00:30:12.000
sort of the fill in
the blank, small little bite

509
00:30:12.000 --> 00:30:16.380
sized problem. I see. It's,
it's, it's caught us Katas

510
00:30:16.530 --> 00:30:18.360
yeah, because they're a little
bit bigger, I think, but

511
00:30:18.390 --> 00:30:22.290
yeah, so, but they're like
small, So this is great.

512
00:30:22.290 --> 00:30:24.930
Now I have to go
figure out how katas and

513
00:30:24.930 --> 00:30:29.460
koans and haikus and, and
all of this fits in.

514
00:30:29.460 --> 00:30:31.950
And what a monad is.
People can also go to

515
00:30:31.950 --> 00:30:35.550
tri C L j.com and
they can just type this

516
00:30:35.550 --> 00:30:39.450
right in their browser. And
they can learn that if

517
00:30:39.450 --> 00:30:41.640
I last question, if I
decide to go and do

518
00:30:41.640 --> 00:30:44.730
something enclosure, but I'm not
a closure shop in our

519
00:30:44.730 --> 00:30:47.460
company, hasn't bought into it.
You know, what's the kind

520
00:30:47.460 --> 00:30:50.520
of work or processing or
bite-sized thing that I could

521
00:30:50.520 --> 00:30:54.030
maybe start with to introduce
this into a company. Well,

522
00:30:54.030 --> 00:30:58.080
I mean, tests are always
good way to introduce a

523
00:30:58.080 --> 00:31:00.570
new language into a company
and kind of have risk-free

524
00:31:00.570 --> 00:31:04.620
fashion. So you can start
writing some of your tests

525
00:31:04.620 --> 00:31:06.750
and closure and gain experience
with it. And then as

526
00:31:06.750 --> 00:31:08.700
your team kind of ramps
up with it, then you

527
00:31:08.700 --> 00:31:11.430
could start using it for
more things. I see. That's

528
00:31:11.430 --> 00:31:14.250
a good idea. So if
I'm a Java shop already,

529
00:31:14.550 --> 00:31:16.050
or even if I have
a.net shop, cause they're, I

530
00:31:16.050 --> 00:31:19.140
believe is a full version
of closure for.net, then just

531
00:31:19.140 --> 00:31:20.790
bring in the extra, you
know, the little bit of

532
00:31:20.790 --> 00:31:23.490
overhead the closure has as
far as libraries and compilers

533
00:31:24.000 --> 00:31:28.380
and don't change my existing
code. That's correct. That is

534
00:31:28.380 --> 00:31:29.970
a great idea. And then
if everyone starts to love

535
00:31:29.970 --> 00:31:32.490
it, it's the idea of
virus that changes the whole

536
00:31:32.490 --> 00:31:35.730
company. Exactly. So when is
your book coming out and

537
00:31:35.730 --> 00:31:39.240
who is it with? It's
with a Riley and it's

538
00:31:39.240 --> 00:31:41.670
coming out in a couple
months. I believe if everything

539
00:31:41.700 --> 00:31:46.320
works with the production stuff.
So that is in April

540
00:31:47.250 --> 00:31:49.380
And O'Reilly books have an
animal on the cover, which

541
00:31:49.380 --> 00:31:51.710
is the animal we should
be looking for. Mine is

542
00:31:51.710 --> 00:31:55.440
a water rail It's as
a bird with a very

543
00:31:55.440 --> 00:31:58.740
long beak. Yeah. Very cool.
Well, thank you so much,

544
00:31:58.740 --> 00:32:02.760
Karen Meyer. Well, thank you. So
Karen's book is living closure

545
00:32:02.760 --> 00:32:04.230
and we'll put a link
to that in the show

546
00:32:04.230 --> 00:32:07.590
notes. This has been another
episode of Hanselminutes and we'll

547
00:32:07.590 --> 00:32:15.240
see you again next week.
<inaudible>.

