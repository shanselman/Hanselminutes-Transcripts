WEBVTT FILE

1
00:00:00.450 --> 00:00:03.600
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.600 --> 00:00:06.540
they make the show possible.
Today's show is sponsored by

3
00:00:06.540 --> 00:00:10.740
developer express, become a UI
superhero with dev express controls

4
00:00:10.740 --> 00:00:15.270
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.630 --> 00:00:19.710
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.740 --> 00:00:23.850
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.940 --> 00:00:47.300
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com
From hanselminutes.com. It's Hansel minutes.

8
00:00:47.540 --> 00:00:51.260
Oh, weekly discussion with web
developer and technologist Scott Hanselman.

9
00:00:51.830 --> 00:00:55.670
This is Lawrence Ryan announcing show
number four 26. In this

10
00:00:55.670 --> 00:01:00.290
episode, Scott talks with Damien
Edwards about asp.net V. Next.

11
00:01:03.680 --> 00:01:05.510
Hi, this is Scott Hanselman.
This is another episode of

12
00:01:05.510 --> 00:01:08.750
Hansel minutes and I've got
my good friend Damien Edwards

13
00:01:08.750 --> 00:01:10.790
on Skype with me. How
are you, sir? I'm very

14
00:01:10.790 --> 00:01:13.520
well. How are you? I'm
lovely. Actually. I'm actually not

15
00:01:13.520 --> 00:01:18.350
lovely. I'm extremely tired. I've
last week or the week

16
00:01:18.350 --> 00:01:21.500
and a half ago now,
tech ed really took a

17
00:01:21.500 --> 00:01:24.620
lot out of me. What
happened that week? Yeah, I

18
00:01:24.620 --> 00:01:27.290
did. I ended up doing
like four talks and I

19
00:01:27.290 --> 00:01:29.900
did talk with Fowler, David,
David, Valerie, to talk with

20
00:01:29.990 --> 00:01:34.130
Scott Hunter and basically have been
sleeping ever since. Pretty, pretty

21
00:01:34.130 --> 00:01:36.860
ridiculous. Yeah. Doing these kinds
of events. It involves a

22
00:01:36.860 --> 00:01:41.990
lot of preparation and a
lot of, you know, getting

23
00:01:41.990 --> 00:01:44.060
things right. We ended up
doing the bill that we

24
00:01:44.060 --> 00:01:46.940
showed. Gosh, that was built
the day before. Yeah, that

25
00:01:46.940 --> 00:01:49.670
sounds right. Do we usually
do that? Like I know

26
00:01:49.670 --> 00:01:52.490
that we do, we get
a beta ready or an

27
00:01:52.490 --> 00:01:54.620
alpha ready and we present
it, but I can't remember

28
00:01:54.620 --> 00:01:59.180
one where the programmer who
works on it gave me

29
00:01:59.180 --> 00:02:02.180
a build like a couple
of hours before the talk.

30
00:02:02.720 --> 00:02:07.820
Yeah. I've seen it happen
more frequently since, since I

31
00:02:07.820 --> 00:02:11.810
joined Microsoft just over four
years ago. But I think

32
00:02:11.810 --> 00:02:14.570
this is probably the biggest
example I've seen of that,

33
00:02:14.600 --> 00:02:17.840
where this wasn't just a
build of some new extension

34
00:02:17.840 --> 00:02:20.450
or some new template or
some new library that you

35
00:02:20.450 --> 00:02:23.840
bring into an existing sort
of thing. This was, here's

36
00:02:23.840 --> 00:02:26.330
a build of the completely
new stack that we're going

37
00:02:26.330 --> 00:02:29.900
to sell to the world
sort of thing. Yeah. Why

38
00:02:29.900 --> 00:02:31.100
do you think it went
down like that? I mean,

39
00:02:31.100 --> 00:02:33.500
is this an example of
we're not organized and we're

40
00:02:33.500 --> 00:02:36.020
not sloppy or we are
sloppy rather? Or is this

41
00:02:36.080 --> 00:02:39.050
more of a, we're doing
everything in the open. So

42
00:02:39.050 --> 00:02:42.590
here's, here's what we're thinking.
It's, it's very much the

43
00:02:42.590 --> 00:02:46.340
latter and opening the doors
much earlier than perhaps we

44
00:02:46.340 --> 00:02:48.530
have done in the past
and not even perhaps than

45
00:02:48.530 --> 00:02:50.450
we have done in the
past. This is about us

46
00:02:50.450 --> 00:02:53.120
being open. And as soon
as we have something that

47
00:02:53.120 --> 00:02:57.560
we think is enough to
construct a message around like

48
00:02:57.890 --> 00:02:59.610
the, that there's sort of
a fine balance, right? Even

49
00:02:59.620 --> 00:03:03.670
an open source About around
how soon do you show

50
00:03:04.030 --> 00:03:07.030
people, your thinking when you
have a large sort of

51
00:03:07.030 --> 00:03:12.340
incumbent user base without freaking
everybody out. And so in

52
00:03:12.340 --> 00:03:14.950
this case, it was while
this was the time we

53
00:03:14.950 --> 00:03:18.100
felt that we had enough
of the new thing to

54
00:03:18.100 --> 00:03:20.380
show people that we could
sell sort of the core

55
00:03:20.380 --> 00:03:23.230
principles, the core things that
we were using to make

56
00:03:23.230 --> 00:03:27.110
decisions on when we build
this new system. And that

57
00:03:27.760 --> 00:03:29.890
just happened to line up
pretty well with when ticket

58
00:03:29.890 --> 00:03:32.680
came on. But, you know,
we were doing things right

59
00:03:32.680 --> 00:03:34.480
up to the last minute
because you know, there's a

60
00:03:34.480 --> 00:03:35.950
lot of people involved and
there's a lot of moving

61
00:03:35.950 --> 00:03:38.860
parts and things break daily
at the moment. We're still

62
00:03:38.860 --> 00:03:41.140
at that phase where things
are breaking pretty regularly, more

63
00:03:41.140 --> 00:03:43.180
than, than working as we
tease out and sort of

64
00:03:43.180 --> 00:03:45.210
try out a lot of
these ideas. Yeah. It's, it's

65
00:03:45.210 --> 00:03:49.530
funny that you phrase it
like that, that you have

66
00:03:49.530 --> 00:03:51.120
to get something ready in
order to kind of like

67
00:03:51.120 --> 00:03:53.310
quote unquote, sell it. Of
course, everything we're doing is

68
00:03:53.310 --> 00:03:57.870
free right now. But the
idea that I actually saw

69
00:03:57.870 --> 00:04:01.500
some complaints on Twitter, like
maybe five or six, you

70
00:04:01.500 --> 00:04:05.040
know, like not, not, not
the PR the predominant response

71
00:04:05.040 --> 00:04:07.380
was very positive, but I
literally saw some responses like

72
00:04:07.710 --> 00:04:10.500
this. Isn't very open sourcing
of you, you know, you're,

73
00:04:10.680 --> 00:04:12.600
you're showing us the stuff
that you've been working on

74
00:04:12.600 --> 00:04:15.000
in secret for months. And
it's like, well, gosh, do

75
00:04:15.000 --> 00:04:18.570
you want to see the
check-in mail that says ignition

76
00:04:18.600 --> 00:04:22.770
initial check-in yeah. Like here's
here's hello world. Is that,

77
00:04:22.770 --> 00:04:24.870
is that the level of
early, like does open source

78
00:04:24.900 --> 00:04:31.020
always require the very, very
first spike to be completely

79
00:04:31.020 --> 00:04:34.950
public? Yeah, I don't know.
I think there's no one

80
00:04:34.950 --> 00:04:37.080
answer to that. Like I
think every that's a personal

81
00:04:37.080 --> 00:04:41.280
choice per project. Some people
like not to show their

82
00:04:41.280 --> 00:04:44.430
ideas and let's talk about
opensource at the personal level

83
00:04:44.430 --> 00:04:45.690
first, and then we can
talk about it as sort

84
00:04:45.690 --> 00:04:48.630
of the corporate level, as
a personal thing. A lot

85
00:04:48.630 --> 00:04:51.600
of people are very open
and happy to put their

86
00:04:51.600 --> 00:04:54.150
work out there. As soon
as it sort of leaves

87
00:04:54.150 --> 00:04:56.880
their hands and goes into
the individual studio, whatever they're

88
00:04:56.880 --> 00:05:01.530
using and resilient enough and
confident enough or whatever the

89
00:05:02.710 --> 00:05:05.460
description might be to say,
Hey, here's what I'm working

90
00:05:05.460 --> 00:05:07.830
on right now. Give me
your worst. You hate it.

91
00:05:07.860 --> 00:05:09.510
Do you think I've done?
You know, I'm stupid. Do

92
00:05:09.510 --> 00:05:11.910
you think I'm doing amazing
things, whereas other people like

93
00:05:11.910 --> 00:05:16.530
to sort of incubate and
think and iterate before they

94
00:05:16.530 --> 00:05:19.050
think this thing is ready
to, to, to, to show

95
00:05:19.050 --> 00:05:21.000
to others. And that, that,
that there's kind of, I

96
00:05:21.000 --> 00:05:24.750
guess, emotionally ready to, to
accept criticism or to accept

97
00:05:24.750 --> 00:05:28.380
feedback. I mean, some ideas
need time within someone's head

98
00:05:28.380 --> 00:05:31.620
to tease apart and to,
to sort of mash again

99
00:05:31.830 --> 00:05:33.930
before they're ready for other
people to come and tell

100
00:05:33.930 --> 00:05:35.880
them it's the worst thing
or that, you know, they

101
00:05:35.880 --> 00:05:37.590
can see the thought that's
gone into it and et

102
00:05:37.590 --> 00:05:41.430
cetera, et cetera. At the
corporate level. I think it's

103
00:05:41.430 --> 00:05:43.800
not one person. There were
a lot of people involved

104
00:05:43.800 --> 00:05:46.350
and it's not just the
people working and committing code.

105
00:05:46.350 --> 00:05:48.540
It's all the other people
that we have to convince

106
00:05:48.540 --> 00:05:51.390
that this is the right
idea. And so if we

107
00:05:51.390 --> 00:05:56.460
just started doing all of
our prototype hacky things in

108
00:05:56.460 --> 00:05:58.970
the open, some of those
things would be fine, things

109
00:05:58.970 --> 00:06:03.430
that are kind of adjunct
to our existing story. There,

110
00:06:03.430 --> 00:06:05.360
there wouldn't be much harm
in doing that. And we've

111
00:06:05.670 --> 00:06:07.160
done that quite a lot.
You know, we've had, we've

112
00:06:07.160 --> 00:06:09.590
had stuff that goes up
on our previous code Plex

113
00:06:09.590 --> 00:06:12.230
site, which was very much
a preview or very much

114
00:06:12.230 --> 00:06:14.870
a prototype. And we, you
know, we sort of communicated

115
00:06:14.870 --> 00:06:17.270
it as that. And then
there are other things which

116
00:06:17.270 --> 00:06:19.880
were really, you know, we're
sitting down and taking a

117
00:06:19.880 --> 00:06:22.190
good, hard look at the
last 15 years of our

118
00:06:22.190 --> 00:06:24.860
story and then trying to
come up with a story

119
00:06:24.860 --> 00:06:27.770
for the next 15 years.
And those things require a

120
00:06:27.770 --> 00:06:30.860
lot more careful consideration by
a lot of people. And

121
00:06:31.100 --> 00:06:33.290
some, I think there needs
to be a period of

122
00:06:33.290 --> 00:06:38.570
sort of introspection and iteration
internally to get enough people

123
00:06:38.630 --> 00:06:41.120
sort of agreeing internally that
this is the right direction

124
00:06:41.120 --> 00:06:44.030
before we then share that
externally. And that's what happened

125
00:06:44.030 --> 00:06:48.540
in this case. And so
how juxtaposing that, you know,

126
00:06:48.880 --> 00:06:51.670
was this something that people
were hacking on for years

127
00:06:51.730 --> 00:06:54.310
or how much time from,
wow, I think we could

128
00:06:54.310 --> 00:06:56.170
do this too. Wow. I
think we should show this

129
00:06:56.170 --> 00:07:00.250
to people We've been kicking
around this idea for over

130
00:07:00.280 --> 00:07:03.340
two years. I probably go
back three years. I can

131
00:07:03.340 --> 00:07:07.480
remember meetings. We had nearly
three years ago where we

132
00:07:07.480 --> 00:07:12.970
were discussing this idea of
a sort of server optimized

133
00:07:13.750 --> 00:07:20.680
profile of.net and then a
new set of asp.net frameworks

134
00:07:20.680 --> 00:07:23.530
that sit on top of
that and what that type

135
00:07:23.530 --> 00:07:25.750
of transition and change would
look like. And, you know,

136
00:07:25.780 --> 00:07:29.650
they were very, very, very
early prototypes around those. None

137
00:07:29.650 --> 00:07:32.320
of those were new. You
would even consider functional. They

138
00:07:32.320 --> 00:07:35.200
were experiments to see what
it would look like to

139
00:07:35.200 --> 00:07:37.900
use a different CLR than
the one that's in windows.

140
00:07:37.900 --> 00:07:40.210
For example, the core CLR,
which we've talked a little

141
00:07:40.210 --> 00:07:43.330
bit about in the past
few weeks, but it wasn't

142
00:07:43.330 --> 00:07:47.500
really until mid last year
that I think a few

143
00:07:47.500 --> 00:07:50.530
people really started to hack
stuff together. In fact, it

144
00:07:50.530 --> 00:07:52.570
was David Falla while we
were still working on the

145
00:07:52.570 --> 00:07:57.460
release of signal, our two
who one night went home

146
00:07:57.760 --> 00:08:01.840
and decided he was going
to try and port MVC

147
00:08:01.840 --> 00:08:07.480
to run on top of
Katana, our Owen based sort

148
00:08:07.480 --> 00:08:10.210
of web framework stuff. Oh.
And being open web interfaces

149
00:08:10.210 --> 00:08:15.100
and.net. So it's not us,
it's a community based interface

150
00:08:15.100 --> 00:08:17.830
that describes how to plug
middleware together, right. And core

151
00:08:17.860 --> 00:08:20.790
system where sorry, MVC has
been based on system where

152
00:08:20.860 --> 00:08:22.960
ever since it came out
system web being, you know

153
00:08:22.960 --> 00:08:25.870
what we ship in the.net
based class library as the

154
00:08:25.900 --> 00:08:29.530
current asp.net sort of development
stack. And he went and

155
00:08:29.800 --> 00:08:31.480
literally went home over a
week and it came in

156
00:08:31.480 --> 00:08:33.940
on the, on the Monday
and said, okay, well, here's

157
00:08:33.940 --> 00:08:36.160
the work I had to
do to get hello world,

158
00:08:36.160 --> 00:08:41.140
working on MVC on top
of Katana. And that was

159
00:08:41.140 --> 00:08:43.930
porting these listing embassy Kobe's
that wasn't writing it from

160
00:08:43.930 --> 00:08:46.560
scratch. It was literally get
a cleanser from Coplex and

161
00:08:46.560 --> 00:08:49.180
then comment out as much
as you can until stuff

162
00:08:49.180 --> 00:08:52.390
works. It was a pretty
typical spike, like, yeah. So,

163
00:08:52.420 --> 00:08:54.400
so let's, let's, let's back
up and think about the

164
00:08:54.400 --> 00:08:57.090
timeline. So you said a
couple of years ago, people

165
00:08:57.090 --> 00:08:59.550
were brainstorming kind of ideas
of the future. And this

166
00:08:59.550 --> 00:09:02.640
is very much, wouldn't it
be crazy if we could

167
00:09:03.150 --> 00:09:05.580
yes. And then you're looking
around and correct me if

168
00:09:05.580 --> 00:09:08.310
I'm wrong, you're looking around
the company and you were

169
00:09:08.310 --> 00:09:10.950
saying, Oh, well, the CLR
team has been doing these

170
00:09:10.950 --> 00:09:13.320
crazy ideas because they always
have a fork or a

171
00:09:13.320 --> 00:09:16.710
spike of different versions of
the CLR where they're brainstorming

172
00:09:16.710 --> 00:09:19.980
things. Absolutely. And we, the
asp.net team who are not

173
00:09:19.980 --> 00:09:22.020
the core CLR team or
are looking at them and

174
00:09:22.020 --> 00:09:23.670
we'll meet with them occasionally
and say, Hey, that's kind

175
00:09:23.670 --> 00:09:27.090
of a cool idea. And
then simultaneously, you've got groups,

176
00:09:27.090 --> 00:09:29.670
other groups doing, you know,
quote, unquote crazy stuff, like

177
00:09:30.060 --> 00:09:33.420
getting known to work in
visual studio. That's another group

178
00:09:33.540 --> 00:09:36.960
that's going off and doing
their thing. And these ideas

179
00:09:36.960 --> 00:09:40.860
are jelling while simultaneously you're
working on the thing that

180
00:09:40.860 --> 00:09:45.240
we ship all the time,
asp.net proper. Then when did

181
00:09:45.240 --> 00:09:48.810
someone decide to go into,
you know, get hub and

182
00:09:48.810 --> 00:09:54.060
start doing, putting these things
together in a more cohesive

183
00:09:54.060 --> 00:09:58.700
way? Yeah. That happened. I
think about November last year.

184
00:09:59.300 --> 00:10:01.550
And I think, I think
the commit timeline show that,

185
00:10:02.660 --> 00:10:04.250
Oh yeah, that's a good
point. You can go, people

186
00:10:04.250 --> 00:10:07.730
can go back and now
that these are public repositories,

187
00:10:07.760 --> 00:10:11.180
see initial check in, I
suppose. Yeah. And I'm sure

188
00:10:11.180 --> 00:10:13.310
that initial checking wasn't empty.
I like, I'm sure there

189
00:10:13.310 --> 00:10:17.390
was some stuff that had
come from someone's laptop or

190
00:10:17.390 --> 00:10:21.890
some internal repository, but pretty
much the timeline that you

191
00:10:21.890 --> 00:10:25.850
can now see publicly on
those repos represents the timeline

192
00:10:25.880 --> 00:10:28.460
of that code base. There
were previous code basis. As

193
00:10:28.490 --> 00:10:30.560
you know, we talked about
that with spikes and prototypes

194
00:10:30.560 --> 00:10:34.160
and thought experiments. And then
a lot of the new

195
00:10:34.160 --> 00:10:39.170
code base is the underpinnings
were very much written from

196
00:10:39.170 --> 00:10:42.290
scratch. Like the, the, the
KLR the K runtime as

197
00:10:42.290 --> 00:10:45.290
it's called, which is the
sort of the piece that

198
00:10:45.290 --> 00:10:48.380
actually boots the CLR, either
the desktop CLR or the

199
00:10:48.380 --> 00:10:51.500
core CLR, that's all new
and, you know, C plus

200
00:10:51.500 --> 00:10:52.970
plus, and a bunch of
crazy code that I will

201
00:10:52.970 --> 00:10:56.630
never dream of understanding. And
then there's the sort of

202
00:10:56.660 --> 00:11:00.830
middleware sort of pipelining stuff,
which was very heavily inspired

203
00:11:00.830 --> 00:11:03.410
by the work we did
in Katana with the IAP

204
00:11:03.410 --> 00:11:07.160
builder and the Owen sort
of dictionary idea of, of

205
00:11:07.160 --> 00:11:10.220
a chain of functions that
get executed, which is what

206
00:11:10.220 --> 00:11:14.450
ultimately becomes your request handler
that work has sort of

207
00:11:14.450 --> 00:11:17.150
floated over from Katana. And
then there are pieces of

208
00:11:17.150 --> 00:11:22.700
functionality from Katana, like the
authentication middleware, the static file

209
00:11:22.700 --> 00:11:25.820
middleware, the welcome page. Those
things were just almost complete

210
00:11:25.820 --> 00:11:28.220
ports. So we move them
over as code basis and

211
00:11:28.220 --> 00:11:30.290
just fix the things that
had to be fixed. Then

212
00:11:30.290 --> 00:11:33.470
there is the frameworks on
top. So, you know, NBC

213
00:11:34.550 --> 00:11:39.230
where that's more of a
component and, and, and we've

214
00:11:39.230 --> 00:11:41.450
rewriting parts of that as
we go with, we, we're

215
00:11:41.450 --> 00:11:46.010
treating this as the opportunity
to try and fix some

216
00:11:46.010 --> 00:11:49.220
of the things that we
didn't particularly like about MVC.

217
00:11:49.220 --> 00:11:52.280
I mean, NBC has been
through five major versions now.

218
00:11:53.020 --> 00:11:55.390
And so we're taking this
opportunity to, and we really

219
00:11:55.390 --> 00:11:57.280
sweat API last year, right?
So we had sort of

220
00:11:57.290 --> 00:12:00.970
another web based framework for
dealing with request response, which

221
00:12:00.970 --> 00:12:03.340
was tuned for a particular
type of scenario, but there

222
00:12:03.340 --> 00:12:05.080
were a lot of similarities.
And we got into the

223
00:12:05.080 --> 00:12:09.280
situation where we had MVC
web, API, and signaler that

224
00:12:09.280 --> 00:12:12.430
had a set of cross
cutting concerns that went cross

225
00:12:12.430 --> 00:12:14.530
cutting. Like they weren't implemented
in a cross cutting way.

226
00:12:14.530 --> 00:12:16.960
They each had their own
idea of dependency resolution. They

227
00:12:16.960 --> 00:12:19.210
each had their own authorization.
They each had their own

228
00:12:19.210 --> 00:12:23.350
logging. And because they were
all developed in isolation essentially

229
00:12:23.350 --> 00:12:27.130
and released at different times,
there wasn't much coherence between

230
00:12:27.130 --> 00:12:29.050
them. And so this was
our opportunity to say, let's

231
00:12:29.050 --> 00:12:32.530
build a new coal, a
new core set of hosting

232
00:12:32.890 --> 00:12:37.030
abstractions and common concerns such
as logging and DEI and

233
00:12:37.270 --> 00:12:40.690
a whole bunch of others
configuration. And then let's port

234
00:12:40.690 --> 00:12:43.150
those libraries and merge them
where appropriate so that they

235
00:12:43.150 --> 00:12:45.190
all sit on top of
these common concerns. So now

236
00:12:45.190 --> 00:12:47.650
in your application, when you
use those three, and this

237
00:12:47.650 --> 00:12:50.410
includes things like entity framework
as well, when you use

238
00:12:50.410 --> 00:12:53.110
these libraries together, they look
like they were designed to

239
00:12:53.110 --> 00:12:55.150
work together because they were
all built at the same

240
00:12:55.150 --> 00:12:59.620
time and they're all sharing
common pieces. Now, a lot

241
00:12:59.620 --> 00:13:01.150
of people might be listening
to this and thinking, well,

242
00:13:01.150 --> 00:13:03.550
isn't that just.net? I mean,
you know, dot net has

243
00:13:03.550 --> 00:13:06.160
always shipped. If we think
about the base class library

244
00:13:06.160 --> 00:13:08.680
is this large set of
frameworks that all share common

245
00:13:08.680 --> 00:13:13.480
components. And to an extent
that's true, the differences that.net

246
00:13:13.510 --> 00:13:16.480
always shipped as a large
set of components. Whereas in

247
00:13:16.480 --> 00:13:18.400
this case, we have taken
the opportunity to make everything

248
00:13:18.400 --> 00:13:20.890
modular. And so we're very
big on this pay as

249
00:13:20.890 --> 00:13:24.430
you go sort of idea
when you're developing your app,

250
00:13:24.430 --> 00:13:27.610
when you're composing your application
and pulling different pieces together

251
00:13:28.030 --> 00:13:31.360
in this world, you really
do start with nothing. And

252
00:13:31.360 --> 00:13:33.580
from there, it's up to
you to compose the things

253
00:13:33.580 --> 00:13:35.980
together that you want for
your application. And thus you'll

254
00:13:35.980 --> 00:13:38.500
only pay for those, but
when you do, they should

255
00:13:38.500 --> 00:13:42.060
all look like, Yeah, yeah,
that's interesting. We should, we

256
00:13:42.060 --> 00:13:45.150
should break it down with
a little historical context. And

257
00:13:45.150 --> 00:13:48.060
I think maybe people I
should, maybe we should, we,

258
00:13:48.060 --> 00:13:49.260
you and I should work
together in a blog post

259
00:13:49.260 --> 00:13:53.910
about this because people 10
years ago would install this

260
00:13:53.910 --> 00:13:57.720
two or 300 Meg runtime
that would put a complete

261
00:13:57.720 --> 00:14:01.920
framework, arguably one of the
most complete base class library

262
00:14:01.920 --> 00:14:05.850
frameworks, you know, short of
Java that said here's default

263
00:14:05.850 --> 00:14:10.620
functionality from system.date, time to
dot threading that you can

264
00:14:10.620 --> 00:14:14.610
start with. So, you know,
hello world didn't involve go

265
00:14:14.610 --> 00:14:17.310
and get a bunch of
libraries, right? You literally had

266
00:14:17.310 --> 00:14:19.740
them all already, but it
required an, you know, 300

267
00:14:19.740 --> 00:14:24.120
Meg install and a reboot.
That's the lowest lowest level.

268
00:14:24.120 --> 00:14:26.190
And what I would teach
this at a, at the

269
00:14:26.190 --> 00:14:29.040
university level, when I was
teaching C-sharp, I would go

270
00:14:29.040 --> 00:14:31.710
into hello world. I do
a console dot Rightline. I

271
00:14:31.710 --> 00:14:33.150
do a four loop and
I'd look at it and

272
00:14:33.150 --> 00:14:35.880
<inaudible> ILD, you know, the
aisle disassembler and I'd say,

273
00:14:35.880 --> 00:14:38.280
look, here's the base that
we built on top of,

274
00:14:38.790 --> 00:14:42.840
you know, that is well
tested, reliable, wonderful. The CLR

275
00:14:42.840 --> 00:14:47.520
is, is kicking butt, but
the desktop CLR requires this

276
00:14:47.520 --> 00:14:51.060
big install. Then move up
a layer. We created system

277
00:14:51.080 --> 00:14:57.760
dot web and people shouldn't
conflate web forms. The, the,

278
00:14:57.760 --> 00:15:01.640
the style of development that
abstracts away the statelessness of

279
00:15:01.640 --> 00:15:05.360
HTTP, the idea of a
button.click existing in the web

280
00:15:05.360 --> 00:15:08.600
world. They shouldn't conflate that
necessarily with system dot web,

281
00:15:09.530 --> 00:15:12.620
right. And underneath that as
HTTP handler and HTP module,

282
00:15:12.620 --> 00:15:14.420
which are kind of what
we thought of as being

283
00:15:14.420 --> 00:15:17.000
atomic, the atoms that we
built our systems on top

284
00:15:17.000 --> 00:15:23.590
of. Right? Yes. And the
interesting thing is that@thetimewhenasp.net system

285
00:15:23.590 --> 00:15:27.430
web was designed really the
only two or three things

286
00:15:27.430 --> 00:15:30.310
that you were building on
top of those were web

287
00:15:30.310 --> 00:15:34.270
forms or web services as
a max. Because if you

288
00:15:34.270 --> 00:15:38.080
remember back to the.net days,
the whole sale of.net was

289
00:15:38.260 --> 00:15:41.710
around heterogeneous, you know, a
connected systems, service oriented type

290
00:15:41.710 --> 00:15:45.490
architecture, and asp.net role was
to build the UI for

291
00:15:45.490 --> 00:15:48.910
that and to host services
for that. And then the

292
00:15:48.910 --> 00:15:52.360
other things were just the,
everything else, handlers to serve

293
00:15:52.360 --> 00:15:54.790
binary data or to serve
files or to allow file

294
00:15:54.790 --> 00:15:56.500
upload. And they were really
the things that you built

295
00:15:58.150 --> 00:16:01.930
and the underpinnings where you
can see in the underpinnings,

296
00:16:01.930 --> 00:16:04.090
the way that the HEB
handler system was built and

297
00:16:04.090 --> 00:16:06.430
the way the configuration system
is built, that that's what

298
00:16:06.430 --> 00:16:10.270
they were built to support.
And so as new models

299
00:16:10.270 --> 00:16:12.940
have evolved on top, or,
you know, in the web

300
00:16:12.940 --> 00:16:15.640
development world, we were still
building on, on top of

301
00:16:15.640 --> 00:16:17.830
these underpinnings. Now you can
do, you can go a

302
00:16:17.830 --> 00:16:19.690
long way. And suddenly we
did, we went a very

303
00:16:19.690 --> 00:16:22.900
long way in adopting some
of these new models, but

304
00:16:22.900 --> 00:16:26.920
ultimately to use your hello
world example, when you did

305
00:16:26.920 --> 00:16:30.250
hello world in asp.net, you
were still pulling in an

306
00:16:30.370 --> 00:16:33.910
awful lot of infrastructure to
serve these other three things

307
00:16:34.390 --> 00:16:36.640
just to do hello world.
Now, hello world obviously is

308
00:16:36.650 --> 00:16:39.520
not a real example, but
the difference in this new

309
00:16:39.520 --> 00:16:42.310
stack over the content is
that when you do hello

310
00:16:42.310 --> 00:16:44.350
world in the new stack,
you don't have to pull

311
00:16:44.350 --> 00:16:47.470
in any subsystem other than
this is how you handle

312
00:16:47.470 --> 00:16:49.990
an HTP request. And when
I say handle, you execute

313
00:16:49.990 --> 00:16:51.870
this delegate, but you execute
it. Do you know that?

314
00:16:51.870 --> 00:16:54.580
That's really interesting because if
you take the concept of

315
00:16:54.580 --> 00:16:57.940
just hello world, and you
say like here's Python, right?

316
00:16:57.970 --> 00:17:00.380
Put hello world, you know,
print, hello world, and then

317
00:17:00.380 --> 00:17:01.960
zero. And look here it
is hello world at the

318
00:17:01.960 --> 00:17:05.590
console level. But I think
windows, people sometimes are used

319
00:17:05.590 --> 00:17:08.110
to things like visual basic
three or visual basic six

320
00:17:08.110 --> 00:17:10.750
from 15, 20 years ago.
And it's like, here's hello

321
00:17:10.750 --> 00:17:14.020
world. And there's this form
and there's a button. And

322
00:17:14.020 --> 00:17:15.670
then they drag, hello world,
a button over and they

323
00:17:15.670 --> 00:17:17.680
go look it's hello world.
And they go, Oh, that's

324
00:17:17.680 --> 00:17:20.740
the base that's hello world.
Right? They forget about the

325
00:17:20.740 --> 00:17:23.650
fact that visual basic sat
on top of when 32,

326
00:17:23.650 --> 00:17:25.720
which sits on top of
painting API, et cetera, et

327
00:17:25.720 --> 00:17:29.470
cetera, et cetera. So a
hello world at an HTTP

328
00:17:29.470 --> 00:17:34.300
handler level versus at a
WCF channel level versus at

329
00:17:34.450 --> 00:17:36.760
a web forums is very
different. And I think it's

330
00:17:36.760 --> 00:17:40.750
funny that we see these,
these benchmarks. There's a tech

331
00:17:40.750 --> 00:17:42.850
empower benchmark that keeps coming
up every once in a

332
00:17:42.850 --> 00:17:46.330
while, and they'll go and
they'll compare like a web

333
00:17:46.330 --> 00:17:49.800
service created in web forms
saying, hello world, a web

334
00:17:49.800 --> 00:17:54.270
service and web API saying,
hello world with the lowest

335
00:17:54.270 --> 00:17:57.150
level handler in a node
app or a Java app.

336
00:17:57.540 --> 00:18:02.640
So it's like, here's a
motorcycle versus a minivan versus

337
00:18:02.640 --> 00:18:05.400
a single wheel with a
jet engine attached to it.

338
00:18:06.210 --> 00:18:08.040
You know what I mean?
But then they don't take

339
00:18:08.040 --> 00:18:09.600
into consideration that like, well,
how am I going to

340
00:18:09.600 --> 00:18:13.710
take the kids to school
and soccer practice on this

341
00:18:13.710 --> 00:18:17.180
wheel attached to a jet
engine In defense of those

342
00:18:17.180 --> 00:18:19.820
benchmarks. We look at those
benchmarks. We think that's actually

343
00:18:19.820 --> 00:18:24.890
a really great community driven
effort. Those benchmarks are just

344
00:18:24.890 --> 00:18:28.880
data. And what you read
into those is actually completely

345
00:18:28.880 --> 00:18:30.680
at the discretion of the
person, looking at the data,

346
00:18:30.950 --> 00:18:35.030
the benchmarks don't claim to
be a measure of one

347
00:18:35.030 --> 00:18:39.140
system's capabilities. Well, they're just
a big spreadsheet. Yeah. And,

348
00:18:39.140 --> 00:18:41.540
and even more to that
point, they actually go out

349
00:18:41.540 --> 00:18:45.230
of their way to do
comparisons such as if I

350
00:18:45.230 --> 00:18:49.130
take a core system like
Java or, you know, frameworks

351
00:18:49.130 --> 00:18:50.690
built on top of the
Java language and the Java

352
00:18:50.690 --> 00:18:53.870
runtime, or perhaps just the
Java runtime. And we do

353
00:18:53.870 --> 00:18:56.210
something at the lowest possible
level. And then I add

354
00:18:56.210 --> 00:18:58.430
a framework that's on top
of that. And I do

355
00:18:58.430 --> 00:19:01.520
effectively the same thing. What
is the Delta? And of

356
00:19:01.520 --> 00:19:04.040
course the, the value you
get out of that you

357
00:19:04.040 --> 00:19:06.500
say, you now have an
understanding of what overhead, what

358
00:19:06.500 --> 00:19:09.380
is the cost in the
framework that you've chosen over

359
00:19:09.380 --> 00:19:12.590
the thing upon which it
is built. And then it

360
00:19:12.590 --> 00:19:14.930
all becomes trade offs, right?
It's not saying that that's

361
00:19:14.930 --> 00:19:17.510
bad. They're saying that yeah.
When you get a minivan,

362
00:19:17.840 --> 00:19:20.900
your getting a whole bunch
of stuff that allows it

363
00:19:20.900 --> 00:19:24.380
to serve its purpose as
a minivan, but that comes

364
00:19:24.380 --> 00:19:25.760
at the cost of if
you're going to do a

365
00:19:25.760 --> 00:19:28.730
drag race, you're going to
be slow. Exactly. So then

366
00:19:28.730 --> 00:19:33.020
fast forwarding to today, we
are, it feels like we're

367
00:19:33.020 --> 00:19:36.170
looking at what's great about
the CLR. What's good about

368
00:19:36.170 --> 00:19:38.390
new things that didn't exist
10 years ago, like new,

369
00:19:38.390 --> 00:19:43.220
get new thinking around how
assembly loaders work, and then

370
00:19:43.220 --> 00:19:47.510
the innovations around the core
CLR, which is a CLR.

371
00:19:47.510 --> 00:19:50.270
You could install side by
side, as well as things

372
00:19:50.270 --> 00:19:54.680
like Rosalyn, all these kind
of new, I feel like

373
00:19:54.680 --> 00:19:58.310
I'm always using the Lego
analogy, but it's like sometimes

374
00:19:58.310 --> 00:20:00.770
I get these, these old
timers on Twitter who like,

375
00:20:00.800 --> 00:20:01.940
you know, when I was
a kid, these are the

376
00:20:01.940 --> 00:20:04.310
Legos we used. And I
don't like these custom parts.

377
00:20:04.970 --> 00:20:08.030
Well, you know, I was
at the Lego museum. I

378
00:20:08.030 --> 00:20:10.460
went to, you know, to
Denmark. I met them and

379
00:20:10.460 --> 00:20:12.950
they said, well, you know,
after the innovation of this

380
00:20:12.950 --> 00:20:14.900
part, and they all have
funny names for the parts,

381
00:20:14.900 --> 00:20:18.800
you know, like once we
had like the, the lantern,

382
00:20:19.430 --> 00:20:24.290
you know, brick, they, they
call them elements. Once we

383
00:20:24.290 --> 00:20:26.150
innovated this element, it was
a lot of controversial. And

384
00:20:26.150 --> 00:20:28.370
I don't want to create
a, a Lego brick with

385
00:20:28.370 --> 00:20:33.080
a, with a, a stud
on the side, but then

386
00:20:33.080 --> 00:20:35.090
it opened up an entire
new world. And then now

387
00:20:35.090 --> 00:20:37.820
for this generation, this has
become a Lego piece that

388
00:20:37.820 --> 00:20:39.470
we can all count on.
And once you can count

389
00:20:39.470 --> 00:20:41.720
on it, it completely opens
your eyes. So for example,

390
00:20:42.260 --> 00:20:47.710
you know, Roslyn changes thinking
completely about, you can do

391
00:20:47.710 --> 00:20:49.660
something and why you should
do something. And someone might

392
00:20:49.660 --> 00:20:53.080
say, well, this is, this
is a weird, new, strange

393
00:20:53.140 --> 00:20:55.060
world that we're opening up.
Are we sure we want

394
00:20:55.060 --> 00:20:57.790
to do that? But once
you accept it, then you

395
00:20:57.790 --> 00:21:00.220
realize like, wow, we can
do stuff we couldn't even

396
00:21:00.220 --> 00:21:03.870
thought of before. It's almost
baffling that anyone in this

397
00:21:03.870 --> 00:21:08.340
industry would feel that way
about innovation. When you consider

398
00:21:08.340 --> 00:21:12.360
that in every other industry,
whether it's mechanics or architecture

399
00:21:12.360 --> 00:21:16.350
and buildings and everything gets
the advantage and the benefit

400
00:21:16.410 --> 00:21:19.530
of, you know, improvements in
design or the adoption of

401
00:21:19.560 --> 00:21:23.160
new techniques and manufacturing or
new materials. The buildings we

402
00:21:23.160 --> 00:21:24.690
build a hundred years ago
were very different than the

403
00:21:24.690 --> 00:21:28.410
buildings we built now. And
that's the same timescale that

404
00:21:28.410 --> 00:21:31.650
that industry works on. Our
timescale is much shorter. And,

405
00:21:31.650 --> 00:21:33.780
you know, we do on
the web where I know

406
00:21:33.780 --> 00:21:35.850
you say quite a lot,
the timescale web years is

407
00:21:35.850 --> 00:21:38.340
kind of crazy, right. You
know, a week is, is

408
00:21:38.340 --> 00:21:41.730
years in the web. And
we've been working on this

409
00:21:41.730 --> 00:21:46.470
asp.net framework now since the
late nineties. And we, when

410
00:21:46.470 --> 00:21:49.890
we made the transition from
ASP classic, as we call

411
00:21:49.890 --> 00:21:54.510
it to waste.net, a lot
of the API APIs that

412
00:21:54.510 --> 00:21:57.690
exist in asp.net. And what
are the behaviors are actually

413
00:21:57.690 --> 00:22:00.570
there, because as part of
that transition, we opted to

414
00:22:00.570 --> 00:22:03.450
tick the compatibility box. We
said, Hey, we're going to

415
00:22:03.450 --> 00:22:05.760
make it so that you
can drop an ASP page

416
00:22:05.880 --> 00:22:08.940
or just change the extension
to dot ASP X. And

417
00:22:08.940 --> 00:22:11.730
it will run in asp.net.
And so a lot of

418
00:22:11.730 --> 00:22:13.950
the API is, and a
lot of the programming paradigms

419
00:22:13.950 --> 00:22:17.100
exist in asp.net because they
actually came over from ASP.

420
00:22:17.370 --> 00:22:20.730
And so if you add
that timeline on, we're dealing

421
00:22:20.730 --> 00:22:24.210
with a web framework and
ideas that have been around

422
00:22:24.210 --> 00:22:26.060
for quite some time, and
this, I think this is

423
00:22:26.070 --> 00:22:28.050
really interesting to me cause
I've been here listening to

424
00:22:28.370 --> 00:22:31.020
your talks with Douglas Crockford
and he was interviewed on

425
00:22:31.020 --> 00:22:34.380
another podcast recently. And your
latest Hansel minutes listened to

426
00:22:34.380 --> 00:22:37.140
this morning about computer science
stories with, I can't remember

427
00:22:37.140 --> 00:22:38.900
the gentleman's name, but I
know he works in Australia.

428
00:22:39.420 --> 00:22:42.450
Yeah. And it's just how
much we take for granted

429
00:22:42.450 --> 00:22:45.090
about what we use in
technology today is the way

430
00:22:45.090 --> 00:22:47.880
it is because of decisions
that were made decades ago,

431
00:22:48.480 --> 00:22:52.080
many decades ago, and every
now and then someone sits

432
00:22:52.080 --> 00:22:53.820
up and says, you know
what a lot's happened in

433
00:22:53.820 --> 00:22:56.160
the last 20 years, perhaps
this is a good opportunity

434
00:22:56.160 --> 00:22:59.700
for us to break the
mold and, you know, keep

435
00:22:59.700 --> 00:23:01.260
what we think is really
good about what we do

436
00:23:01.260 --> 00:23:04.110
now, but look at better
incorporating the things that have

437
00:23:04.110 --> 00:23:06.240
happened in that, you know,
that last period of time.

438
00:23:06.630 --> 00:23:09.090
So looking at that idea
of, of, of breaking the

439
00:23:09.090 --> 00:23:13.290
mold, like we've got wind
forms, which I still write

440
00:23:13.290 --> 00:23:17.070
stuff for. We've got WPF
and they are different and

441
00:23:17.310 --> 00:23:20.400
parallel. And I see people
doing stuff in both like

442
00:23:20.430 --> 00:23:23.850
Tellerik has a bunch of
great new WinForms controls that

443
00:23:23.940 --> 00:23:26.910
are new, innovative, and being
added on top of, even

444
00:23:26.910 --> 00:23:30.590
though wind forms is arguably
done. And people are always

445
00:23:30.600 --> 00:23:31.920
like, Oh, is it dead?
Well, it's like, well, it

446
00:23:31.920 --> 00:23:35.490
gets bug fixes and it's
finished, but people are building

447
00:23:35.490 --> 00:23:37.470
on top of it with
some amazing stuff. So if

448
00:23:37.470 --> 00:23:40.920
we look at this with
web forms versus what's going

449
00:23:40.920 --> 00:23:45.150
forward with MVC and web
API being kind of converged

450
00:23:45.290 --> 00:23:48.830
appears to be this kind
of web forms framework, and

451
00:23:48.830 --> 00:23:53.300
then MVC, which, which comprises
of both MVC. What we

452
00:23:53.300 --> 00:23:55.790
know of historically is MPC
and the web API, they've

453
00:23:55.790 --> 00:23:59.540
now converged, but what have
we done in the last

454
00:23:59.540 --> 00:24:03.970
year around web forums? So
yeah, so web forms is,

455
00:24:04.210 --> 00:24:07.450
is, is in an interesting
place in that it's in

456
00:24:07.480 --> 00:24:10.540
the analogy you draw the
WinForms is, is kind of

457
00:24:10.540 --> 00:24:13.060
similar, but I wouldn't even
go as far as that

458
00:24:13.060 --> 00:24:15.130
in the case of web
forms. So web forms, we,

459
00:24:15.670 --> 00:24:18.070
we did a blog post
recently about all the stuff

460
00:24:18.070 --> 00:24:19.930
that we've done in web
forms. And I made some

461
00:24:19.930 --> 00:24:22.060
announcements during the week of
build at the same time

462
00:24:22.060 --> 00:24:23.920
that we talked about ASP
net v-necks to do with

463
00:24:23.920 --> 00:24:25.540
web forms. And some of
them may have been a

464
00:24:25.540 --> 00:24:27.670
little confusing cause we use
some of the same terms.

465
00:24:28.420 --> 00:24:31.630
And so for instance, we
just shipped a preview of

466
00:24:31.660 --> 00:24:36.010
a Roslyn based code Dom
provider, which typically you would

467
00:24:36.010 --> 00:24:39.640
use in a web forms
application or an MVC application

468
00:24:39.640 --> 00:24:41.890
that used the web forms,
who engine or the razor

469
00:24:41.890 --> 00:24:45.190
view engine. So co Dom
is the mechanism in.net that

470
00:24:45.190 --> 00:24:49.120
existed before Roslyn that allowed
you to write code from

471
00:24:49.120 --> 00:24:52.780
code. It is a Dom
like API. You have a

472
00:24:52.780 --> 00:24:55.630
tree with nodes and you
add expressions and this and

473
00:24:55.630 --> 00:24:58.090
that. And then once you
have that tree, you can

474
00:24:58.090 --> 00:25:00.760
say, turn this into a
C sharp string. And then

475
00:25:00.760 --> 00:25:02.680
once you have that string,
you can compile it using

476
00:25:02.680 --> 00:25:05.470
whatever Kampala Kampala you have
now in, I guess, put

477
00:25:05.470 --> 00:25:08.080
on that today, that all
happens by calling out to

478
00:25:08.080 --> 00:25:11.080
the C sharp compiler, literally
C S C dot ECC

479
00:25:11.290 --> 00:25:14.620
gets cold when we compile
your dot SPX page on

480
00:25:14.620 --> 00:25:17.710
the web server. And then
that result in assembly goes

481
00:25:17.710 --> 00:25:20.800
into the temporary ASP net
files folder that everyone knows.

482
00:25:20.800 --> 00:25:23.770
And so the new thing
that we released was a

483
00:25:23.770 --> 00:25:26.890
reimplementation of that based on
top of Roslyn. And there

484
00:25:26.890 --> 00:25:28.870
were two main benefits that
you'll get out of using

485
00:25:28.870 --> 00:25:31.090
this one is that obviously
you get to use new

486
00:25:31.090 --> 00:25:34.420
language features that exist that
or that are coming, that

487
00:25:34.420 --> 00:25:36.430
are based on Russell, because
all new language features from

488
00:25:36.430 --> 00:25:39.010
here on for C sharp
and VB will be implemented

489
00:25:39.010 --> 00:25:42.220
in the Roslyn based compilers,
not the old compilers. So

490
00:25:42.220 --> 00:25:44.440
we needed to do that
work to support new languages

491
00:25:45.160 --> 00:25:48.430
and to is a performance
improvement. So as your AC

492
00:25:48.430 --> 00:25:50.470
unit site gets more complicated
and as you have more

493
00:25:50.470 --> 00:25:54.190
folders and more assemblies in
bin, the cost of spinning

494
00:25:54.190 --> 00:25:57.040
up that executable, CSE dot
ECC at the command line,

495
00:25:57.460 --> 00:26:00.130
dozens and dozens, or even
hundreds of times when your

496
00:26:00.130 --> 00:26:02.980
application starts up to compile
all the pages in your

497
00:26:02.980 --> 00:26:07.030
application can get very high,
can actually be exponential depending

498
00:26:07.030 --> 00:26:09.880
on the structure of your
application. And so the new

499
00:26:09.880 --> 00:26:11.830
compiles that are based on
Rosslyn have a lot of

500
00:26:11.830 --> 00:26:15.250
clever tricks around caching so
that when we call the

501
00:26:15.250 --> 00:26:17.200
compiler over and over again,
you don't pay that cost

502
00:26:17.200 --> 00:26:19.840
again. And so we have
some example data where a

503
00:26:20.350 --> 00:26:23.470
fairly complicated application with their
hundreds of assemblies in bean

504
00:26:23.770 --> 00:26:28.360
and hundreds of views in
the application can take 40

505
00:26:28.360 --> 00:26:31.900
minutes to compile using the
old compiler and can take

506
00:26:32.620 --> 00:26:34.810
a minute or two to
compile with the Roslyn based

507
00:26:34.810 --> 00:26:38.500
compiler. Oh, that's really interesting.
So this is potentially, you

508
00:26:38.500 --> 00:26:41.050
know, older web forms, apps,
you know, kind of venerable

509
00:26:41.050 --> 00:26:43.620
web forms app that the
kinds of you see in

510
00:26:43.620 --> 00:26:46.920
large enterprises, large line of
businesses, hundreds and hundreds of

511
00:26:46.920 --> 00:26:50.130
pages. I know we've all
been there with multi minute

512
00:26:50.130 --> 00:26:54.180
long builds and multi minute
long warmup times. Yes. So

513
00:26:54.180 --> 00:26:57.450
the arguably the kind of
the oldest most reliable thing

514
00:26:57.450 --> 00:27:01.650
we have is now being
given support for the newest,

515
00:27:01.650 --> 00:27:05.270
most amazing thing we have.
It's funny because the actual

516
00:27:05.270 --> 00:27:07.820
catalyst for doing this like
right now is that we

517
00:27:07.820 --> 00:27:11.270
had a customer contact us
through customer support saying that

518
00:27:11.270 --> 00:27:13.490
we're seeing that we're having
trouble with a very large

519
00:27:13.490 --> 00:27:16.310
application, taking a very long
time to compile, which was

520
00:27:16.310 --> 00:27:18.860
affecting their ability to sort
of react as a development

521
00:27:18.860 --> 00:27:20.540
team because they would make
a change. It would take

522
00:27:20.540 --> 00:27:24.170
40 minutes to see that
change result in the application.

523
00:27:24.170 --> 00:27:25.790
Now it turns out we
were able to help them

524
00:27:25.790 --> 00:27:27.830
with, with some of their
architecture stuff so that they

525
00:27:27.830 --> 00:27:30.290
could get that time down.
But we took that opportunity

526
00:27:30.290 --> 00:27:32.690
to say, you know, now
might be the right time

527
00:27:32.960 --> 00:27:35.660
to go and look at
building this new code on,

528
00:27:35.970 --> 00:27:37.970
provide a replacement based on
Roslyn and see if we

529
00:27:37.970 --> 00:27:39.710
get a benefit and it
turned out we did. And

530
00:27:39.710 --> 00:27:41.960
so we've released that as
a preview. And the plan

531
00:27:41.960 --> 00:27:46.280
is that as Roslyn continues
to release previews and torts

532
00:27:46.280 --> 00:27:48.440
and RTM, we will keep
in step until they hit

533
00:27:48.440 --> 00:27:50.660
RTM. And then we'll hit
RTM. And it's just a

534
00:27:50.660 --> 00:27:52.250
new game package to be
clear, you can just new

535
00:27:52.250 --> 00:27:55.850
get this into your existing
MVC or web forms application.

536
00:27:55.850 --> 00:27:57.560
And just to reiterate, the
point is not just about

537
00:27:57.560 --> 00:28:00.860
web forms. It also works
in razor pages and in

538
00:28:00.920 --> 00:28:04.070
MPC as well. Then once
you knew get it in,

539
00:28:04.070 --> 00:28:05.870
you'll get the benefit immediately.
And if you do pre

540
00:28:05.870 --> 00:28:08.900
compile using the ASP net
Kampala dot ECC, it also

541
00:28:08.900 --> 00:28:13.190
gets used for that as
well. So then arguably, it's

542
00:28:13.190 --> 00:28:16.400
almost like this new thing,
this new, this new pipeline,

543
00:28:16.490 --> 00:28:19.610
the new cypress@asp.net v-necks is
like a new kind of

544
00:28:19.610 --> 00:28:23.810
vehicle that's been created. And
that doesn't mean existing vehicles

545
00:28:23.810 --> 00:28:26.180
are going to change your
stop. And since you can,

546
00:28:26.180 --> 00:28:28.970
not only new get in
Roslyn support, which is going

547
00:28:28.970 --> 00:28:31.650
to give you basically C-sharp
six support before she starts,

548
00:28:31.650 --> 00:28:34.760
six is available. You can
nuke it in web forms,

549
00:28:34.820 --> 00:28:38.900
friendly URLs, the new identity
subsystem, all the new <inaudible>

550
00:28:38.900 --> 00:28:42.920
support. These are now parallel.
Like th there's a, there's

551
00:28:42.920 --> 00:28:45.560
almost like there's a, there's
a high occupancy vehicle lane

552
00:28:45.920 --> 00:28:47.540
and there's a regular lane,
but we're on the same

553
00:28:47.540 --> 00:28:51.560
freeway we're going forward. You
can still, we, we, I

554
00:28:51.560 --> 00:28:54.230
guess I'm funny when I'm
in podcast mode, I don't

555
00:28:54.230 --> 00:28:57.710
usually say we, but you
know, Microsoft can continue to

556
00:28:57.710 --> 00:29:00.170
put stuff into web forms
with new, get packages and

557
00:29:00.170 --> 00:29:03.590
add onto it and et
cetera. So people who are

558
00:29:03.590 --> 00:29:06.590
already invested in web forms
don't necessarily need to care

559
00:29:06.590 --> 00:29:09.560
about the new aspect of
net v-necks pipeline. It's just

560
00:29:09.980 --> 00:29:12.500
a different lane that they
could move to and from.

561
00:29:13.920 --> 00:29:17.120
And that's going to be
a decision that any application

562
00:29:17.120 --> 00:29:19.430
team will make as they
make any sort of decisions.

563
00:29:19.430 --> 00:29:21.320
And, you know, to be
clear, all those new things

564
00:29:21.320 --> 00:29:24.590
that you just sort of
listed off the web forms,

565
00:29:24.740 --> 00:29:26.330
that that is work that
we did. It's not like

566
00:29:26.330 --> 00:29:28.280
that those things just, no,
It's not old stuff you

567
00:29:28.280 --> 00:29:30.650
release that we released that
like a couple months ago

568
00:29:31.280 --> 00:29:33.260
And, and it's not like
they, those things, you know,

569
00:29:33.260 --> 00:29:35.420
we did the identity version
to work and then that

570
00:29:35.420 --> 00:29:37.610
just magically works. Now we
did the identity to work,

571
00:29:37.610 --> 00:29:40.640
and then we consciously did
work to make it work

572
00:29:40.640 --> 00:29:43.420
in web forms. Right. Right.
And we'll, we'll continue to

573
00:29:43.420 --> 00:29:47.050
do things like that as
appropriate, you know, for web

574
00:29:47.050 --> 00:29:50.980
forms where it makes sense
to that new subsystems that

575
00:29:50.980 --> 00:29:54.250
we deliver would have immediate
benefit in web forms and

576
00:29:54.250 --> 00:29:57.580
the cost involved in doing
so sort of the trade

577
00:29:57.580 --> 00:29:59.110
off is worth it. Then
we will, then we will

578
00:29:59.140 --> 00:30:03.150
continue to do that. And
arguably, as reality is typically

579
00:30:03.150 --> 00:30:05.940
a hybrid application, like you'll
see a web forums app

580
00:30:05.940 --> 00:30:08.970
in a large enterprise with
a Reddis cash, you know,

581
00:30:09.000 --> 00:30:13.320
with Mongo DB, they might
have asp.net. V-necks using web

582
00:30:13.320 --> 00:30:16.230
API in a segment of
their app. They may have

583
00:30:16.230 --> 00:30:20.400
the web forms aspect of
their application and the red

584
00:30:20.400 --> 00:30:22.410
is cash. They're gonna use
all these things together. So

585
00:30:22.470 --> 00:30:25.320
is it really, like we
talked about years ago, one

586
00:30:25.320 --> 00:30:29.700
asp.net and correctly sized Lego
pieces all working together. Is

587
00:30:29.700 --> 00:30:33.990
that actually happening? Yeah, I
think so. The only distinction

588
00:30:33.990 --> 00:30:37.320
really would be with the
big one asp.net effort, a

589
00:30:37.320 --> 00:30:40.350
large part of that message
was sort of saying, look,

590
00:30:40.350 --> 00:30:44.430
you can use these things
within the same application from

591
00:30:44.430 --> 00:30:47.460
an, from sort of a
<inaudible> point of view. Right.

592
00:30:47.580 --> 00:30:50.010
Cause if I think about
an ASP on an application,

593
00:30:50.310 --> 00:30:52.500
I don't really think about
it being bound to one

594
00:30:52.500 --> 00:30:56.180
process and like more people
should Think about that. I

595
00:30:56.190 --> 00:30:58.350
just put out my little
startup and it actually has

596
00:30:58.350 --> 00:31:03.480
three asp.net applications, but I
think Exactly. Yeah. And so,

597
00:31:03.540 --> 00:31:05.850
you know, that will continue
to work even with the

598
00:31:06.150 --> 00:31:08.910
new v-neck stuff we're talking
about. Like in IAS, you'll

599
00:31:08.910 --> 00:31:12.600
still be able to have
a root application, which may

600
00:31:12.600 --> 00:31:15.240
be the full, you know,
full desktop and running a

601
00:31:15.240 --> 00:31:17.880
web forms or a previous
version of NBC. And then

602
00:31:17.880 --> 00:31:21.180
you can have a sub
application of that or a

603
00:31:21.180 --> 00:31:24.030
sibling application that you make
look like a sub using

604
00:31:24.030 --> 00:31:26.880
something like URL rewrite, have
them run in different apples,

605
00:31:26.880 --> 00:31:30.000
but you can still share,
you know, authentication tokens between

606
00:31:30.000 --> 00:31:33.900
the two and you can
still share code the business

607
00:31:33.900 --> 00:31:37.050
logic code and whatnot by
way of, you know, either

608
00:31:37.050 --> 00:31:40.200
cost compiling or using portable
class libraries, which are they,

609
00:31:40.260 --> 00:31:44.550
you know, the.net way of
sharing, compile.net code between different

610
00:31:44.550 --> 00:31:48.000
platforms, all those mechanisms still
exist. And I think anyone

611
00:31:48.000 --> 00:31:51.000
who has worked with asp.net
for a while and has

612
00:31:51.000 --> 00:31:53.940
built anything sizeable will know
that you get to a

613
00:31:53.940 --> 00:31:56.460
point where it makes good
sense to split out the

614
00:31:56.460 --> 00:32:00.990
application into multiple physical iOS
applications, I guess, and even

615
00:32:00.990 --> 00:32:04.170
perhaps distribute them onto different
machines, but you generally consider

616
00:32:04.170 --> 00:32:07.710
them still as part of
the same overall system. And

617
00:32:07.710 --> 00:32:10.770
this isn't any different. That's
cool. That's cool. I think

618
00:32:10.840 --> 00:32:13.110
that we are heading in
the right direction. Aren't we?

619
00:32:14.250 --> 00:32:16.650
I hope so. I certainly
hope so, but the thing

620
00:32:16.650 --> 00:32:18.240
is now that we've, we're
out in the open and

621
00:32:18.240 --> 00:32:21.780
people are giving us their
feedback. And so if we

622
00:32:21.780 --> 00:32:24.360
listen, which I like to
think that we do, then

623
00:32:24.360 --> 00:32:25.680
we're going to end up
in a good place. And

624
00:32:25.710 --> 00:32:28.740
so far people seem to
like the core principles that

625
00:32:28.740 --> 00:32:31.520
we're kind of basing this
new system on so uncomfortable

626
00:32:31.530 --> 00:32:33.600
and heading in the right.
Cool. And people can of

627
00:32:33.600 --> 00:32:38.190
course check all this out
at asp.net/v next. They can

628
00:32:38.190 --> 00:32:42.200
check it out on, on
my blog and also get

629
00:32:42.200 --> 00:32:44.090
hub. If they really want
to see what's going on,

630
00:32:44.090 --> 00:32:46.970
get hub.com/asp net, and they
can see the commits and

631
00:32:46.970 --> 00:32:49.280
you guys are committing directly
to that. Right. That's yeah.

632
00:32:49.280 --> 00:32:51.590
And I will say again,
this is really early days.

633
00:32:51.650 --> 00:32:54.020
So now is the time
to get in and have

634
00:32:54.020 --> 00:32:55.820
a look under the covers.
If you want to influence

635
00:32:55.820 --> 00:32:59.450
some of the big pieces
of this v-neck system, because

636
00:32:59.450 --> 00:33:01.550
we are still, we are
working daily on this thing,

637
00:33:01.550 --> 00:33:02.960
and then you can see
the commits as we make

638
00:33:02.960 --> 00:33:05.600
them, including the feature branches
where we're doing work, that

639
00:33:05.600 --> 00:33:08.750
isn't in the main trunk
yet. Okay. Well, thanks for

640
00:33:08.750 --> 00:33:10.640
talking to me. I really
appreciate you setting us straight.

641
00:33:11.270 --> 00:33:13.520
No glad, glad to be
here again. This has been

642
00:33:13.520 --> 00:33:16.400
another episode of Hanselminutes and
we'll see you again next

643
00:33:16.400 --> 00:33:16.580
week.

