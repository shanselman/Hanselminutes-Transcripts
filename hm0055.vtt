WEBVTT FILE

1
00:00:12.060 --> 00:00:16.830
From Hanselman it's dot com
it's Hansel minutes or weekly

2
00:00:16.830 --> 00:00:21.150
discussion with web developer and
technologists. Scott Hanselman hosted by

3
00:00:21.150 --> 00:00:26.670
Carl Franklin. This is Lawrence Ryan announcing
show number 55 recorded Monday,

4
00:00:26.760 --> 00:00:32.400
March 12th, 2007. Support for Hanselman it's
is provided by Tellerik rad

5
00:00:32.400 --> 00:00:36.390
controls, the most comprehensive suite
of components for windows forms

6
00:00:36.390 --> 00:00:48.090
and asp.net web applications online@wwwdottlerikdotcomandby.net
developers journal the world's leading.net

7
00:00:48.090 --> 00:00:54.900
developer magazine online at www
dot <inaudible> dot com. In

8
00:00:54.900 --> 00:00:59.220
this episode, Scott discusses monorail
with Aaron Jensen and Jacob Llewellyn

9
00:00:59.310 --> 00:01:04.940
of Ellucian technologies. Hi, this
is Scott Hanselman. This is

10
00:01:04.940 --> 00:01:07.790
another episode of Hansel minutes,
the podcast. It doesn't waste

11
00:01:07.790 --> 00:01:10.580
your time. I'm sitting here
with Erin Jensen and Jacob

12
00:01:10.580 --> 00:01:15.110
Llewellyn from Ellucian technologies. And
we're going to talk about

13
00:01:15.380 --> 00:01:18.260
something wacky and crazy called
monorail. And I say that

14
00:01:18.260 --> 00:01:21.050
with the tongue placed firmly
in cheek, but you know,

15
00:01:21.050 --> 00:01:22.160
I'm going to ask you
that net guy, and I

16
00:01:22.160 --> 00:01:23.930
wanted to hear about some
of the alternative ways that

17
00:01:23.930 --> 00:01:26.420
people are building applications on
asp.net. So when we're talking

18
00:01:26.420 --> 00:01:29.120
about monorail, so what is
monorail and why should I

19
00:01:29.120 --> 00:01:33.470
care? Well, maybe I should
talk about why we switched

20
00:01:33.470 --> 00:01:36.320
off of forum. So we
started out doing a web

21
00:01:36.320 --> 00:01:40.130
forums and it worked, I
mean, we actually looked at

22
00:01:40.130 --> 00:01:43.640
monorail initially and decided, nah,
we don't really know what

23
00:01:43.640 --> 00:01:46.400
that is. Let's not really
look into it. And so

24
00:01:46.400 --> 00:01:48.350
we started doing web forums.
I mean, all the controls

25
00:01:48.350 --> 00:01:51.800
are available and magic happens
with the view state and

26
00:01:51.800 --> 00:01:55.040
the post backs. And we
just kind of found as

27
00:01:55.040 --> 00:01:59.060
we were writing our pages,
that the view state was

28
00:01:59.060 --> 00:02:00.680
a bit heavier than we
liked. So we looked into

29
00:02:00.680 --> 00:02:02.630
turning it off so you
can turn it off when

30
00:02:02.630 --> 00:02:04.730
you don't need it. And
then, then we realized, Oh,

31
00:02:04.730 --> 00:02:08.570
wait, there's still this control
state. There's still these wacky

32
00:02:09.230 --> 00:02:13.880
IDs, you know, repeater, underscore
repeater, underscored, text box, et

33
00:02:13.880 --> 00:02:17.420
cetera, et cetera, which makes
doing any sort of Ajax

34
00:02:17.420 --> 00:02:20.360
or any sort of JavaScript
on the, on the client,

35
00:02:20.450 --> 00:02:26.110
a lot more difficult. The,
just the whole post-back mechanism

36
00:02:26.130 --> 00:02:29.120
and the, in the view
state just kinda killed us.

37
00:02:29.120 --> 00:02:31.250
I mean, it, it, it
made things a lot more

38
00:02:31.250 --> 00:02:35.000
difficult than we liked and,
and combined with the fact

39
00:02:35.000 --> 00:02:38.510
that controls were rendered in
ways we didn't like with

40
00:02:38.510 --> 00:02:43.430
span tags for labels. And,
and I know now they

41
00:02:43.430 --> 00:02:46.400
have those, the new control
rendering, just going to ask

42
00:02:46.400 --> 00:02:47.930
you like, so the controls
don't render that way and

43
00:02:47.930 --> 00:02:49.850
you can put in control
adapters and things like that.

44
00:02:49.880 --> 00:02:52.430
Yeah. Yeah. So the control
adopters, that was that's fairly

45
00:02:52.430 --> 00:02:54.410
new. And I think when
we, when we started, there

46
00:02:54.410 --> 00:02:56.510
was one available. So we
didn't really ever look into

47
00:02:56.510 --> 00:03:00.700
those, but we started looking
in a again and, and

48
00:03:00.730 --> 00:03:04.750
the way monorail works is
it's just a lot easier

49
00:03:04.750 --> 00:03:09.430
to follow. And once you
understand it, and essentially what

50
00:03:09.430 --> 00:03:12.400
it does is it, you
set up a HTTP handler

51
00:03:12.670 --> 00:03:16.300
that is just a front
controller that will take all

52
00:03:16.300 --> 00:03:19.810
of your dot rails requests
and for them to inappropriate

53
00:03:20.440 --> 00:03:24.730
controller, a monorail controller. So
in monorail, you've got three

54
00:03:24.730 --> 00:03:31.390
main things that are important
areas, controllers, and actions. And

55
00:03:31.390 --> 00:03:35.770
so a controller lives in
an area areas kind of

56
00:03:35.770 --> 00:03:37.870
like a namespace, we, which
we wish it was tied

57
00:03:37.870 --> 00:03:40.110
to. Namespaces more than that.
So slow down, I'm not

58
00:03:40.110 --> 00:03:43.620
very clever. There's a HTTP
handler that handles any extension

59
00:03:43.620 --> 00:03:46.500
that is a dot rails
extension. And I'm sure you

60
00:03:46.500 --> 00:03:48.540
can probably have other things
that live alongside so you

61
00:03:48.540 --> 00:03:51.930
can have.foo and not SPX,
but dot rails is the

62
00:03:52.200 --> 00:03:54.690
phrase you said the term
front controller. So we're talking

63
00:03:54.700 --> 00:03:57.180
model view, controller, model three
type stuff. That kind of

64
00:03:57.180 --> 00:03:59.640
stuff that Java guys are
used to, right? Yeah. Is

65
00:03:59.640 --> 00:04:02.640
it model view controller or
is it just view It's

66
00:04:02.640 --> 00:04:04.740
model view controller? I mean,
your model is your object

67
00:04:04.740 --> 00:04:07.020
model. So what are these
terms area that you just

68
00:04:07.020 --> 00:04:11.220
said? So areas is a,
it's like a namespace, it's

69
00:04:11.220 --> 00:04:13.770
a, it's a group of
controllers. Most things live in

70
00:04:13.770 --> 00:04:16.440
the, you know, default area.
But I, for example, we've

71
00:04:16.440 --> 00:04:19.590
got a student area teacher
area, a manager area. And

72
00:04:19.590 --> 00:04:22.410
so like, you'd have the
student take test control or

73
00:04:22.410 --> 00:04:26.070
the, the evaluation controller and
that would live within the

74
00:04:26.070 --> 00:04:29.070
student area. So it's just
a grouping for controllers. Okay.

75
00:04:29.610 --> 00:04:31.140
So if I'm going to
put this in the terms

76
00:04:31.140 --> 00:04:34.110
that like the Northwind database,
right. You know, about like

77
00:04:34.110 --> 00:04:36.120
customers and orders and stuff,
so I'd have a customary

78
00:04:36.120 --> 00:04:38.250
order areas, stuff like that,
but is it that apply

79
00:04:38.250 --> 00:04:39.900
to the, to the UI
or does it apply to

80
00:04:39.900 --> 00:04:43.260
the model? It's more to
the UI? So, I mean,

81
00:04:43.470 --> 00:04:46.670
it's an area what you
see as a user and

82
00:04:46.670 --> 00:04:50.220
an area becomes a directory
in, in your HTML. So

83
00:04:50.220 --> 00:05:00.990
if your www.ellucian.com/student/placement/index.rails. And so
w if you don't have

84
00:05:00.990 --> 00:05:05.040
the areas, then everything is,
it would just be your

85
00:05:05.040 --> 00:05:07.590
controller name. So it allows
you to break it into

86
00:05:07.590 --> 00:05:11.450
different directories. It's, it's just
a maintainability aspect. Okay. I'm

87
00:05:11.460 --> 00:05:13.980
still not following. Maybe you
can, maybe, maybe you can

88
00:05:13.980 --> 00:05:18.390
help. I think it's, it's,
it's a minor thing really.

89
00:05:18.390 --> 00:05:20.370
I mean, all you're doing
is, like Erin said, you're,

90
00:05:20.370 --> 00:05:24.600
you're just providing a way
to, to group controllers into,

91
00:05:24.600 --> 00:05:27.240
you know, areas where, you
know, related controllers into an

92
00:05:27.240 --> 00:05:29.700
area, you know, under ASP,
you can make new folders

93
00:05:29.700 --> 00:05:31.770
and put ASP Xs under
them. This is how you

94
00:05:31.770 --> 00:05:34.110
group them under monorail. You
put them in an area.

95
00:05:34.800 --> 00:05:36.840
So if I'm doing a
Northwind database and I want

96
00:05:36.840 --> 00:05:38.280
to go to the customers
page, and I want a

97
00:05:38.280 --> 00:05:40.920
grid with a bunch of
customers, you know, so in

98
00:05:40.920 --> 00:05:44.100
asp.net, I go file new
page customer, not SPX. I

99
00:05:44.100 --> 00:05:46.470
drag a data grid over
maybe David shore, select star

100
00:05:46.470 --> 00:05:48.480
from customers bind to the
data grid. And then I've

101
00:05:48.480 --> 00:05:50.190
got a bunch of stuff
in a grid. How do

102
00:05:50.190 --> 00:05:53.490
I do that in monorail,
under monorail? You probably just

103
00:05:53.490 --> 00:05:56.220
have a customer controller. And,
you know, I don't, I

104
00:05:56.220 --> 00:05:59.630
don't know that that the
North wind scenario is complicated

105
00:05:59.630 --> 00:06:01.820
enough to warrant, you know,
a bunch of different areas.

106
00:06:02.080 --> 00:06:06.050
What's a better room. What
are like a real web

107
00:06:06.050 --> 00:06:10.490
application. So you're doing well
in our situation. You know,

108
00:06:10.490 --> 00:06:12.530
we have, we have a
top level area. And then

109
00:06:12.530 --> 00:06:16.400
we've, we grouped our controllers
into, into areas where, you

110
00:06:16.400 --> 00:06:19.160
know, specific to roles, you
know, like for, for administrators

111
00:06:19.160 --> 00:06:21.200
would go to these to
go to this. We have

112
00:06:21.260 --> 00:06:22.910
under this area, they would
have a bunch of controllers

113
00:06:22.910 --> 00:06:24.830
related to, you know, tasks
that they can carry out.

114
00:06:25.100 --> 00:06:27.650
You know, students, you know,
that they would have, their

115
00:06:27.650 --> 00:06:29.360
controllers would be under, you
know, an area, you know,

116
00:06:29.360 --> 00:06:33.110
related to their tasks. It's,
it's very simple, just a

117
00:06:33.110 --> 00:06:36.080
way to organize the controllers,
which are really the important

118
00:06:36.080 --> 00:06:39.530
part of, you know, monorail.
So our controllers related directly

119
00:06:39.530 --> 00:06:44.200
to your eyes to URLs.
Yes. All three things. I

120
00:06:44.200 --> 00:06:48.040
mentioned areas, controllers and actions
are related to two URLs,

121
00:06:49.320 --> 00:06:51.790
what monorail does. And when
it's, when it's parsing a

122
00:06:51.790 --> 00:06:56.770
URL is take the first,
the, the directory is leading

123
00:06:56.770 --> 00:07:00.430
up to the V the
last directory, the deepest directory,

124
00:07:00.700 --> 00:07:03.340
and that's becomes the area.
The deepest directory is the

125
00:07:03.340 --> 00:07:07.630
controller's name. And then the
index dot rails or manage

126
00:07:07.630 --> 00:07:09.760
users dot rails, or what
have you, is the action.

127
00:07:10.180 --> 00:07:12.220
So the, the thing with
the dot rails extension is

128
00:07:12.220 --> 00:07:15.580
the action. There's actually no
file called user management dot

129
00:07:15.580 --> 00:07:20.290
rails. It doesn't exist. And
so that, that action is,

130
00:07:20.380 --> 00:07:23.350
is essentially a method. I
mean, it is a method

131
00:07:23.350 --> 00:07:27.270
that gets called on the
controller and Okay, so that's

132
00:07:27.280 --> 00:07:30.160
good. So then I'm in,
in, in asp.net world, in

133
00:07:30.160 --> 00:07:32.860
my brain, I've got the
grid for taking a test

134
00:07:32.860 --> 00:07:34.840
or adding some information about
a student. Maybe I'm going

135
00:07:34.840 --> 00:07:36.520
to update student. So I'm
on a student page, I'm

136
00:07:36.520 --> 00:07:39.490
gonna change his name, hit
update student and asp.net. We

137
00:07:39.490 --> 00:07:42.130
do a postbac. So we're
doing an HTTP post with

138
00:07:42.130 --> 00:07:45.610
a bunch of control, control,
state view, state, and additional

139
00:07:45.610 --> 00:07:47.350
information that was on the
page. We're going to post

140
00:07:47.350 --> 00:07:49.510
it back to our page.
It's going to get picked

141
00:07:49.510 --> 00:07:50.950
up at the same page.
And then we're going to

142
00:07:50.950 --> 00:07:53.950
fire some studio events on
the server side. How does

143
00:07:53.950 --> 00:07:57.160
that whole post-bac process? It
wouldn't be a post-bac process,

144
00:07:57.160 --> 00:08:00.100
but how does that, I
pushed the button process work

145
00:08:00.280 --> 00:08:04.720
for that same scenario in
monorail. So in monorail, you're,

146
00:08:04.810 --> 00:08:06.880
you've got a lot of
freedom, right? I mean, you

147
00:08:06.880 --> 00:08:10.120
can use Ajax, you can
use a post, you can

148
00:08:10.120 --> 00:08:12.670
use a get, and you
can use whatever you want

149
00:08:12.670 --> 00:08:17.260
to, to call a, an
action. And so let's say

150
00:08:17.260 --> 00:08:20.290
your action is update user,
and you want to, you're

151
00:08:20.290 --> 00:08:22.510
just changing the user's username.
That's the only field you

152
00:08:22.510 --> 00:08:24.940
update. So you would do
a, you would create a

153
00:08:24.940 --> 00:08:29.410
form and the forms action
it's submit action would be

154
00:08:29.410 --> 00:08:33.330
a post to update user
dot rails. And in the

155
00:08:33.340 --> 00:08:35.860
form parameters you have in
the form values, you have

156
00:08:35.860 --> 00:08:38.260
whatever you need to update
the user dot rails. And,

157
00:08:38.650 --> 00:08:44.440
and that would call the
user dot rails or the

158
00:08:44.440 --> 00:08:48.760
user action on the user
management controller. And that, that

159
00:08:48.760 --> 00:08:52.450
action would then do what
it needs to do. It

160
00:08:52.450 --> 00:08:56.310
would update the database, show
an error, unnecessary, and then

161
00:08:56.310 --> 00:09:01.320
it would, it would redirect,
or so the other thing

162
00:09:01.350 --> 00:09:04.050
I'll back up a bit.
The other thing that's in

163
00:09:04.080 --> 00:09:08.040
a monorail, that's important as
views. So not only do

164
00:09:08.040 --> 00:09:11.070
you have your controller action,
an area, but the only

165
00:09:11.220 --> 00:09:13.410
what's shown to the user
as a view, and by

166
00:09:13.410 --> 00:09:16.620
default, you have a one
to one mapping between your

167
00:09:16.650 --> 00:09:18.810
actions and your views. So
if you have index dot

168
00:09:18.810 --> 00:09:22.380
rails, you'd have an index
dot VM or brail or

169
00:09:22.380 --> 00:09:25.290
whatever view engine you're using.
There's multiple view engines. But

170
00:09:25.920 --> 00:09:28.050
so we use, we use
braille. So you'd have a

171
00:09:28.050 --> 00:09:30.600
index dot braille, and that
would be your HTML. It's

172
00:09:30.600 --> 00:09:35.250
just a simple template using
the boot language. And like

173
00:09:35.250 --> 00:09:36.630
I said, you can use
any velocity if you don't

174
00:09:36.630 --> 00:09:40.830
like BU but so you've
got, you've got that, that

175
00:09:40.830 --> 00:09:43.590
gets rendered. And, and I
can talk more about how,

176
00:09:43.800 --> 00:09:47.520
how things get rendered between,
or how data gets passed

177
00:09:47.520 --> 00:09:51.750
from the controller to the
view. But essentially once you

178
00:09:51.780 --> 00:09:57.150
did the post in the,
to update user, it would

179
00:09:57.330 --> 00:09:59.730
send them back to the
index dot rails. So they

180
00:09:59.730 --> 00:10:03.920
would just redirect to index
dot rails. I should mention

181
00:10:03.920 --> 00:10:07.220
that the foreign values that
are, that are posted are

182
00:10:07.220 --> 00:10:11.120
fed as arguments to, to
the action method. So, you

183
00:10:11.120 --> 00:10:13.250
know, very simply if you're
just doing username, you just

184
00:10:13.250 --> 00:10:15.350
have a string argument with
the same name as the

185
00:10:15.350 --> 00:10:18.380
form value, and there are
more complex ways to, you

186
00:10:18.380 --> 00:10:21.020
know, to, to bind, you
know, there's a data bind

187
00:10:21.260 --> 00:10:24.500
system in, in monorail that
lets you do complex binding

188
00:10:24.500 --> 00:10:27.200
on, you know, transfer objects
or, you know, other view

189
00:10:27.200 --> 00:10:29.990
objects that you may need
to, to use to more

190
00:10:29.990 --> 00:10:31.400
express, you know, the data
and all that kind of

191
00:10:31.400 --> 00:10:34.550
thing. Okay. So within the
context of asp.net, if I

192
00:10:34.550 --> 00:10:38.570
have a input name, input
type equals text name equals

193
00:10:38.570 --> 00:10:40.850
Fu, that's going to show
up in whatever text box

194
00:10:40.850 --> 00:10:43.490
on the server side also
has the name Fu so

195
00:10:43.490 --> 00:10:45.680
you have a similar kind
of implicit binding based on

196
00:10:45.680 --> 00:10:48.980
name, but then also additional
explicit mining's based on attributes

197
00:10:49.010 --> 00:10:53.390
or, Well, it's, it's always,
it's always based on name.

198
00:10:53.780 --> 00:10:57.920
The, the method of binding
is what varies. So the

199
00:10:57.920 --> 00:11:00.230
default binding would, you know,
you're, you would just have

200
00:11:00.230 --> 00:11:02.990
a, a method, an action
method that has a string

201
00:11:03.020 --> 00:11:07.760
username and an ant user
ID. You can do more

202
00:11:07.760 --> 00:11:11.000
complicated things like have a
user object. That's just a

203
00:11:11.000 --> 00:11:13.820
DTO, just a simple view
object that has an ID

204
00:11:13.820 --> 00:11:17.810
and a name property. And
then you would in your,

205
00:11:18.140 --> 00:11:20.330
in your view, and when
you're, when you're referencing them

206
00:11:20.330 --> 00:11:24.800
on the form, you do
user.id or user.name, and it

207
00:11:24.800 --> 00:11:27.740
would actually do that data
binding behind the scenes so

208
00:11:27.740 --> 00:11:30.080
that you get a user
object with those properties filled

209
00:11:30.080 --> 00:11:34.700
in. You can do even
cooler things. Like if you're

210
00:11:34.700 --> 00:11:38.420
just referencing a user like
you can, instead of passing

211
00:11:38.420 --> 00:11:41.840
the ID in a DTO,
you do what we do.

212
00:11:41.840 --> 00:11:44.750
It's called like, what do
we call it? Entity In

213
00:11:44.750 --> 00:11:46.640
the action method. One of
the arguments is actually one

214
00:11:46.640 --> 00:11:50.810
of our hibernate entities. And
if, if there is a

215
00:11:50.810 --> 00:11:53.090
value in the form with
the same name as that,

216
00:11:53.110 --> 00:11:55.420
that argument, and it is
the primary key for that

217
00:11:55.420 --> 00:11:58.360
entity, then it will automatically,
you know, do an in

218
00:11:58.360 --> 00:12:00.550
hibernate load and pass that
in. So we never have

219
00:12:00.550 --> 00:12:02.800
to deal with these primary
keys and, you know, passing

220
00:12:02.800 --> 00:12:06.130
all these identities around now
is the use of an

221
00:12:06.130 --> 00:12:11.720
hibernate required or traditional within
the context of monorail. It's,

222
00:12:11.720 --> 00:12:14.110
it's not required a lot
of, a lot of stuff's

223
00:12:14.110 --> 00:12:18.100
really optional there's inversion of
control container. It's a monorail

224
00:12:18.100 --> 00:12:20.470
itself as part of a
larger framework called castle. And

225
00:12:20.470 --> 00:12:23.050
they have their own inversion
of control container that you

226
00:12:23.050 --> 00:12:27.550
can use with monorail. It's
used as optional, which is

227
00:12:28.060 --> 00:12:30.130
something we don't quite like.
We would like it to

228
00:12:30.130 --> 00:12:33.970
be mandatory, but you know,
there's a few other components

229
00:12:33.970 --> 00:12:36.540
that they, that they push.
One of them is a,

230
00:12:36.540 --> 00:12:40.620
is active record. And that's
a, it's a framework built

231
00:12:40.620 --> 00:12:43.260
on top of an hibernate
that allows you to it's.

232
00:12:43.260 --> 00:12:44.940
I mean, it's similar to
the active record stuff in

233
00:12:44.940 --> 00:12:47.850
Ruby, and it allows you
to map to a database

234
00:12:47.850 --> 00:12:51.090
and just attribute your classes
and say, you know, this

235
00:12:51.090 --> 00:12:54.840
property maps to that database
field. And, and they've actually

236
00:12:54.840 --> 00:12:57.600
got an active record data
binder, like the one we

237
00:12:57.600 --> 00:12:59.850
wrote for just straight in
hibernate, and that will allow

238
00:12:59.850 --> 00:13:03.570
you to get an active
record entity as a query

239
00:13:03.570 --> 00:13:06.090
string parameter, even though it's
actually only an ID in

240
00:13:06.090 --> 00:13:09.300
the query string. So talk
to me more about this

241
00:13:09.300 --> 00:13:11.010
inversion of control. This is
the, they call it the

242
00:13:11.010 --> 00:13:14.130
Windsor container. I think that
inversion of control might be

243
00:13:14.130 --> 00:13:15.900
something that a lot of
people are not really familiar

244
00:13:15.900 --> 00:13:17.890
with. And how is that
different than just like a,

245
00:13:18.420 --> 00:13:21.630
just a service factory? The
main thing with inversion of

246
00:13:21.630 --> 00:13:26.040
control is, is you're when
you're writing lots of code

247
00:13:26.070 --> 00:13:27.420
and you want to test
that code, you want a

248
00:13:27.430 --> 00:13:29.670
unit test that code, lots
of times a service will

249
00:13:29.670 --> 00:13:33.840
depend on other services and,
you know, in version control.

250
00:13:34.260 --> 00:13:36.600
It's a good question, huh?
I mean, how do you,

251
00:13:36.960 --> 00:13:40.440
I can just go a
foo foo a equals new

252
00:13:40.440 --> 00:13:42.480
Fu what's wrong with that?
Well, a lot of the

253
00:13:42.480 --> 00:13:44.460
time food is going to
take, you know, a bar.

254
00:13:44.520 --> 00:13:46.860
So you'll be doing new
food, you know, passing a

255
00:13:46.860 --> 00:13:50.130
new bar in and you
know, Well, it's tobacco even

256
00:13:50.130 --> 00:13:53.460
more that's, that's not the
traditional way. The traditional way

257
00:13:53.460 --> 00:13:57.120
is within foods, constructor, you
instantiate a new bar. And

258
00:13:57.180 --> 00:14:00.750
so now Fu has a
bar and fruit is going

259
00:14:00.750 --> 00:14:04.620
to use bar to calculate
through bar. And it, if

260
00:14:04.620 --> 00:14:07.590
you want to test Fu
on its own, you cannot

261
00:14:08.580 --> 00:14:11.520
in, in C sharp. You
just, you can't do it

262
00:14:11.520 --> 00:14:15.840
because bar is already instantiated.
It's always the same bar.

263
00:14:16.590 --> 00:14:20.550
If you want to mock
bar, then you need to

264
00:14:21.570 --> 00:14:25.590
basically rewrite the class to
accept bar as a constructor

265
00:14:25.590 --> 00:14:29.220
argument or as like type
mock or you could use

266
00:14:29.220 --> 00:14:35.700
Taimak, But That's a bit
of a heavy stick when

267
00:14:35.700 --> 00:14:41.850
compared to something that's already
testable. And so, I mean,

268
00:14:41.880 --> 00:14:44.310
we use rhino mocks here.
We're very happy with it.

269
00:14:45.210 --> 00:14:48.690
And if you're designing for
testability, which I know some

270
00:14:48.690 --> 00:14:52.400
people disagree with, then we're,
you don't run into that

271
00:14:52.400 --> 00:14:54.710
problem. You don't have to
use tight mock to mock

272
00:14:54.710 --> 00:14:58.310
private private methods, or everything's
going to be accessible and

273
00:14:58.310 --> 00:15:00.790
testable. Okay. So now bring
it all back around to

274
00:15:00.790 --> 00:15:05.530
inversion version of control. So
once you've got the, your

275
00:15:05.530 --> 00:15:10.360
food class accepting a bar
class, and more likely, it's

276
00:15:10.360 --> 00:15:12.880
going to be accepting an
IBR interface so that you

277
00:15:12.880 --> 00:15:15.550
can more easily market that
way. You're not tied to

278
00:15:15.820 --> 00:15:18.550
always having virtual methods. You
can just do an interface.

279
00:15:18.820 --> 00:15:21.730
You mock the interface itself
rather than the, the instance

280
00:15:21.730 --> 00:15:25.870
of the class. Once you
have that, you run into

281
00:15:25.870 --> 00:15:29.350
things where let's say food
depends on bar, which depends

282
00:15:29.350 --> 00:15:33.520
on blah and yada. And
then so you're in San

283
00:15:33.520 --> 00:15:36.910
creation would look like new
Fu new bar, which takes

284
00:15:36.910 --> 00:15:40.210
new yadda new. And it's
just, it just gets huge

285
00:15:40.210 --> 00:15:43.690
and unwieldy and across a
large system it's it's even

286
00:15:43.690 --> 00:15:46.750
worse. So what in a
version of control framework does

287
00:15:46.960 --> 00:15:51.190
is allows you to take
all of those things, all

288
00:15:51.190 --> 00:15:55.180
of those dependencies and put
them into one container. And

289
00:15:55.180 --> 00:15:57.910
then once they're in that
container, you, you asked the

290
00:15:57.910 --> 00:16:00.400
container had given me a
Fu it's going to look

291
00:16:00.400 --> 00:16:03.610
at fruits. Constructor realized that
fruit takes a bar. So

292
00:16:03.610 --> 00:16:05.650
it's going to instantiate a
bar, but it's going to

293
00:16:05.650 --> 00:16:07.780
look at bars constructor and
realize that it takes a

294
00:16:07.780 --> 00:16:10.300
block and a yada. And
so it's going to instantiate

295
00:16:10.300 --> 00:16:13.600
blahs and Jada's and put
those into the bar and

296
00:16:13.600 --> 00:16:15.880
then put that bar into
Fu. So what you get

297
00:16:15.880 --> 00:16:18.730
back is just a food
that has everything it needs.

298
00:16:18.970 --> 00:16:22.840
And if you want to
test through, instead of asking

299
00:16:22.840 --> 00:16:25.300
the container for it, unless
it's an auto mocking container,

300
00:16:25.540 --> 00:16:29.350
then you ask you just
instantiate one and pass it

301
00:16:29.350 --> 00:16:32.740
in box and the, in
the constructor. So the, the

302
00:16:33.090 --> 00:16:36.010
resulting food that's been created
and all of the things

303
00:16:36.010 --> 00:16:39.280
within that dependency framework that
the dependency injection framework has,

304
00:16:39.580 --> 00:16:42.580
has, has gleaned. These are
all mocked versions. You've told

305
00:16:42.580 --> 00:16:45.010
the dependency framework. When I
asked for a Fu I

306
00:16:45.010 --> 00:16:47.860
want those other three dependencies
to be mocked or So

307
00:16:47.860 --> 00:16:50.770
in, in the application itself,
they're not mocked, obviously they're,

308
00:16:50.770 --> 00:16:54.580
they're, they're full versions of
it in our testing framework.

309
00:16:54.760 --> 00:16:56.770
Typically what we do is
we just create the mocks

310
00:16:56.770 --> 00:16:58.780
and pass them into the
constructors. The container does not

311
00:16:58.780 --> 00:17:02.500
enter into it. Jacob worked
on something that we're kind

312
00:17:02.500 --> 00:17:05.590
of experimenting with. That's a,
it's an auto mocking container

313
00:17:05.620 --> 00:17:08.500
where you can ask the
container for a real instance

314
00:17:08.500 --> 00:17:11.740
of Fu and it'll automatically
instantiate mocks for each of

315
00:17:11.740 --> 00:17:15.130
the types of food requires
a it's pretty slick. And

316
00:17:15.130 --> 00:17:17.500
we haven't used it too
much in practice. He just

317
00:17:17.500 --> 00:17:20.860
wrote it. And we're probably
going to start playing with

318
00:17:20.860 --> 00:17:24.210
it. We're concerned about performance
a little, but it's, it's

319
00:17:24.310 --> 00:17:27.550
not that heavy because the
main problem with containers, the

320
00:17:27.550 --> 00:17:32.560
main overhead is actually putting
things into that container. And

321
00:17:32.560 --> 00:17:34.780
with the auto mocking container,
you don't actually put anything

322
00:17:34.780 --> 00:17:38.740
into it. It just infers
the, for the, the one

323
00:17:38.740 --> 00:17:41.590
thing you're instantiating. Okay. So
I'm starting to get an

324
00:17:41.590 --> 00:17:43.960
idea of how this works
and is this easier to,

325
00:17:44.050 --> 00:17:47.200
it's obviously easier to test.
It's easier to maintain Absolutely.

326
00:17:47.200 --> 00:17:50.070
I mean, with ASP net,
and one of the things

327
00:17:50.100 --> 00:17:53.500
you run into is an
issue. The page life cycle

328
00:17:53.530 --> 00:17:56.580
is complicated. I mean, there's
a reason there's like tons

329
00:17:56.580 --> 00:17:59.220
of charts and books dedicated
to just the page life

330
00:17:59.220 --> 00:18:03.560
cycle. One of those, thanks
for that. Well, that's, that's

331
00:18:03.560 --> 00:18:05.450
a no fault. I mean,
that's not your fault, right?

332
00:18:05.450 --> 00:18:09.770
You're, you're helping people understand
it and that's good. So

333
00:18:09.830 --> 00:18:13.610
in monorail, the page life
cycles really easy. You get

334
00:18:13.850 --> 00:18:17.090
a method called your action
is called and you do

335
00:18:17.090 --> 00:18:19.880
things in that action. And
the result of that action,

336
00:18:19.910 --> 00:18:22.190
you know, you've got your
side effects, your database saves

337
00:18:22.220 --> 00:18:27.290
what have your reads, and
then you end up either

338
00:18:27.290 --> 00:18:30.950
redirecting them to a page
or rendering a view within

339
00:18:30.950 --> 00:18:34.310
your controller, or, I mean,
essentially it's, it's, it's always,

340
00:18:34.460 --> 00:18:36.710
you know, you're returning some
sort of response. Usually it's

341
00:18:36.710 --> 00:18:39.530
a view. So it sounds
like because the views and

342
00:18:39.530 --> 00:18:42.650
the controllers are much more
separate than they are in

343
00:18:42.650 --> 00:18:45.170
the terms of a markup
and a code behind that.

344
00:18:45.170 --> 00:18:47.420
You can test this without
bringing up a browser or

345
00:18:47.420 --> 00:18:49.730
using water or any kind
of a browser automation framework.

346
00:18:49.730 --> 00:18:52.340
Cause you just make controllers
and they don't really care

347
00:18:52.370 --> 00:18:55.910
what's going on. Do they
know about HTTP context? Because

348
00:18:55.910 --> 00:18:58.250
then I start getting into
state cookies query, you know,

349
00:18:58.250 --> 00:19:01.430
when do you, when do
you break the fourth wall?

350
00:19:01.610 --> 00:19:04.100
And this beautiful thing starts
crashing down because you've decided

351
00:19:04.100 --> 00:19:07.550
to reach into a cookie
somewhere. So with the controller,

352
00:19:07.580 --> 00:19:10.190
the controller has, you know,
access to the response and

353
00:19:10.190 --> 00:19:13.430
the request. It can get
cookies, it can get query

354
00:19:13.430 --> 00:19:17.570
string. I can get form
values directly. Luckily most of

355
00:19:17.570 --> 00:19:20.090
those things come in as
parameters. You can actually make

356
00:19:20.120 --> 00:19:24.020
a cookie parameter and it'll,
it'll take the value of

357
00:19:24.020 --> 00:19:26.360
that cookie that bit us,
when we had a, we

358
00:19:26.360 --> 00:19:28.850
didn't know this, we had
a locale query string parameter,

359
00:19:28.850 --> 00:19:31.340
and a locale cookie that
with the same name and

360
00:19:31.340 --> 00:19:35.870
we actually got an array
of it. And so we

361
00:19:35.870 --> 00:19:38.030
learned that when the hard
way, but it's pretty slick

362
00:19:38.030 --> 00:19:40.160
because, you know, you can
just add a parameter for

363
00:19:40.160 --> 00:19:42.590
your cookie. If you want
to access it directly. If

364
00:19:42.590 --> 00:19:44.690
you want to write a
cookie, you do have access

365
00:19:44.690 --> 00:19:47.960
to the response and the
request it's, they're all contained

366
00:19:47.960 --> 00:19:52.100
within the rails engine context.
And so part of the

367
00:19:52.100 --> 00:19:56.000
testability concerns is how do
you test cookies? How do

368
00:19:56.000 --> 00:20:01.220
you test response? And we've
got some pretty creative ways

369
00:20:01.220 --> 00:20:04.100
to handle those out of
the box. Monorail isn't as

370
00:20:04.100 --> 00:20:07.130
testable as we'd like. We've
been working with Hamilton over

371
00:20:07.130 --> 00:20:09.290
at the council project to,
to kind of make it

372
00:20:09.290 --> 00:20:14.330
more testable. And essentially in
order to, to test it,

373
00:20:15.200 --> 00:20:17.180
you can't, you want to
create a controller and you

374
00:20:17.180 --> 00:20:19.700
want to have complete access
over the cookies. And so

375
00:20:19.700 --> 00:20:21.860
you want to essentially be
able to mock that cookie

376
00:20:21.860 --> 00:20:25.610
collection. And by default, you
don't have access to that.

377
00:20:26.240 --> 00:20:29.450
Hamilton just made a few
methods that were previously internal

378
00:20:29.450 --> 00:20:32.390
public. And so you can
now you now have access

379
00:20:32.390 --> 00:20:35.060
to those. So you can
now mock the, the entire

380
00:20:35.060 --> 00:20:39.050
rails engine context. So you
said, you keep saying cookie

381
00:20:39.050 --> 00:20:41.450
collection, but we're not talking
necessarily about system that web,

382
00:20:41.450 --> 00:20:43.820
that HDP cooking collection area.
We're talking about a collection

383
00:20:43.820 --> 00:20:46.460
of cookies. I'm wondering how
much system dot web dependency

384
00:20:46.460 --> 00:20:49.630
there is in, in the
controller itself. IRL is engine

385
00:20:49.630 --> 00:20:52.750
context. The default one has
a I response and I

386
00:20:52.750 --> 00:20:55.960
requests, you know, there's properties
with those, the return, those

387
00:20:55.960 --> 00:20:58.150
values, and they have their
own, those are their, their

388
00:20:58.150 --> 00:21:03.370
own monorail interfaces. They have
adapters that wrap the, the

389
00:21:04.000 --> 00:21:06.850
HTP context dot current stuff.
And that's how most of

390
00:21:06.850 --> 00:21:08.740
that stuff has done. Yeah.
We've had a lot of

391
00:21:08.740 --> 00:21:12.190
trouble trying to mock HTP
context, and I know that

392
00:21:12.190 --> 00:21:14.920
people really want to be
able to basically test an

393
00:21:14.920 --> 00:21:17.290
entire web application without ever
using the web to do

394
00:21:17.290 --> 00:21:20.530
it. And I've just decided
that that's not possible kind

395
00:21:20.530 --> 00:21:23.710
of, I'm going to say
decided until I decide otherwise.

396
00:21:24.880 --> 00:21:27.670
And we just basically use
water. We, we automate I

397
00:21:27.670 --> 00:21:31.360
E what, what better way
to why Mach, when you

398
00:21:31.360 --> 00:21:34.980
can just integrate is kind
of my perspective. The reason

399
00:21:34.980 --> 00:21:38.300
is we can write, we
can develop our controllers, our,

400
00:21:38.300 --> 00:21:41.580
our code behind essentially in
the asp.net world. We can,

401
00:21:41.610 --> 00:21:45.630
we can develop that entirely
using TDD. We can set

402
00:21:45.630 --> 00:21:51.570
up all of our responses,
all, all of our expectations.

403
00:21:51.750 --> 00:21:55.170
We can set all of
that up without ever running

404
00:21:56.130 --> 00:21:59.910
IIS. And the reason that's
nice is because our tests,

405
00:21:59.940 --> 00:22:03.450
you know, run a thousand
tests per 30 seconds, instead

406
00:22:03.450 --> 00:22:07.550
of, you know, instead of
the standard in Sanchez, I

407
00:22:07.800 --> 00:22:10.770
S N I E and
I, and water tests are

408
00:22:10.770 --> 00:22:12.810
great and there's a place
for them there. I'm not

409
00:22:12.810 --> 00:22:16.320
saying that we get rid
of them, but they, they

410
00:22:16.320 --> 00:22:18.930
really test the view and
that's what they should test

411
00:22:18.930 --> 00:22:21.180
and, and the, the end
to end. So they should

412
00:22:21.180 --> 00:22:23.190
test, you know, that that
button appears. And then I

413
00:22:23.190 --> 00:22:24.930
can click on that button.
And then when I click

414
00:22:24.930 --> 00:22:27.330
on that button after, you
know, a second and then

415
00:22:27.360 --> 00:22:30.210
a new page comes up,
that's, there's a place for

416
00:22:30.210 --> 00:22:32.970
that. But as far as
just testing behavior, just testing

417
00:22:32.970 --> 00:22:36.720
that the controller asks the
Dow factory for a user

418
00:22:36.720 --> 00:22:39.630
down requests, a user, and
then saves that user. I

419
00:22:39.650 --> 00:22:43.320
just testing that is something
that you should be able

420
00:22:43.320 --> 00:22:45.390
to do with unit tests.
And you can with monorail

421
00:22:45.390 --> 00:22:48.600
complete, Do you have a
thousand tests? We have over

422
00:22:48.600 --> 00:22:53.040
3000. So what's the percentage
of lines of code and

423
00:22:53.040 --> 00:22:56.310
tests versus not in test
the ratio. That's a good

424
00:22:56.310 --> 00:22:59.250
question. I don't know that
I had, we haven't. I

425
00:22:59.250 --> 00:23:02.460
mean, it's probably at least
50%, if not more. Yes.

426
00:23:03.300 --> 00:23:05.370
50% of the code that
you've written is tests. Yeah.

427
00:23:05.460 --> 00:23:09.090
So it's one to two
tests to code. Yeah. Cool.

428
00:23:09.150 --> 00:23:11.460
Rock on. What else are
we missing? What else haven't

429
00:23:11.460 --> 00:23:15.510
we talked about trying to
make this accessible to the

430
00:23:15.510 --> 00:23:18.300
listener. So guy, you know,
someone's listening, he's driving to

431
00:23:18.300 --> 00:23:21.120
work right now. And he
works for the Nebraska department

432
00:23:21.120 --> 00:23:23.790
of forestry and they use
ESPN. Now, how is he

433
00:23:23.790 --> 00:23:25.770
going to go and sell
this to his boss? Does

434
00:23:25.770 --> 00:23:27.600
he just need to do
it, tell his boss later

435
00:23:27.600 --> 00:23:30.870
that he did it using
a nonstandard thing? How, how

436
00:23:30.870 --> 00:23:32.310
did they get started? I
mean, they can go and

437
00:23:32.310 --> 00:23:33.900
they can download it and
they can fool around, but

438
00:23:33.900 --> 00:23:36.630
what's the best way for
them to really crock what's

439
00:23:36.630 --> 00:23:38.580
going on in Monterey and
decide whether it's right for

440
00:23:38.580 --> 00:23:41.460
them. So I'm in the
best way is really to

441
00:23:41.490 --> 00:23:43.200
just dive in and give
it a shot. I mean,

442
00:23:43.380 --> 00:23:48.500
we, I mentioned that we
used asp.net. We now are

443
00:23:48.500 --> 00:23:52.610
using both web forms and
a monorail. And the reason

444
00:23:52.640 --> 00:23:55.340
is that we just don't
have the time or resources

445
00:23:55.340 --> 00:23:58.280
to convert all of our
web forms, pages to monorail,

446
00:23:58.460 --> 00:23:59.900
nor do we really need
to. I mean, if, if

447
00:23:59.900 --> 00:24:03.830
they're working, they're working, we
tried some model view presenters

448
00:24:03.830 --> 00:24:06.680
things with web forms, and
that would allow us to

449
00:24:06.740 --> 00:24:09.800
better test the, the logic
within a, within a code

450
00:24:09.800 --> 00:24:12.020
behind it. It wasn't as
good as we wanted it

451
00:24:12.020 --> 00:24:13.670
to be. And, and so
that's why we moved to

452
00:24:13.670 --> 00:24:17.240
monorail, but I mean, you
can completely run web forms

453
00:24:17.240 --> 00:24:20.360
and monorail side-by-side. We have
ASP X pages, we have

454
00:24:20.360 --> 00:24:23.840
dot rails pages. They link
to each other. We actually

455
00:24:23.840 --> 00:24:27.740
have a master page. And
then monorail has something called

456
00:24:27.740 --> 00:24:30.560
a layout, which is just
a master page. And we

457
00:24:30.560 --> 00:24:34.190
maintain them both as do
we maintain two different navigation

458
00:24:34.190 --> 00:24:37.100
controls. It's kind of a
headache. We would love to

459
00:24:37.100 --> 00:24:40.130
be rid of web forms,
but cause I mean that

460
00:24:40.130 --> 00:24:43.220
maintainability is more obnoxious, but
I mean, it was well

461
00:24:43.220 --> 00:24:46.600
worth the investment and the
overhead. Do you think that

462
00:24:46.600 --> 00:24:49.150
monorail is kind of a,
I wasn't gonna say doomed,

463
00:24:49.150 --> 00:24:50.560
but I'll just say, is
it going to be always

464
00:24:50.560 --> 00:24:56.710
relegated to an alternative lifestyle?
I hope not. I mean,

465
00:24:56.710 --> 00:25:01.030
it's, I think asp.net and
web forums is going to

466
00:25:01.030 --> 00:25:04.360
have to, to change. I
mean, I think that, that

467
00:25:04.360 --> 00:25:06.700
there's, there's gotta be changed
in the wind. I mean,

468
00:25:06.910 --> 00:25:09.790
they've got to know that
that, that whole, the whole

469
00:25:09.790 --> 00:25:12.820
view state, the post-bacc thing
is it's, it's great for

470
00:25:12.820 --> 00:25:17.230
demos. The drag and drop
is like, it's really impressive.

471
00:25:18.280 --> 00:25:20.200
But when you try to
write a real application with

472
00:25:20.200 --> 00:25:22.670
it, it kinda starts to
break down and it, and

473
00:25:22.700 --> 00:25:25.390
it's just, it's not as
testable. It's not as maintainable.

474
00:25:25.390 --> 00:25:29.260
I think that, that it
with asp.net, Ajax, I mean,

475
00:25:29.650 --> 00:25:33.940
Microsoft kind of heading in
the right direction and hopefully

476
00:25:33.940 --> 00:25:37.120
some changes will happen, but
with monorail it's, I mean,

477
00:25:37.120 --> 00:25:40.720
it's here to stay. I
mean, and it's, yeah, it's

478
00:25:40.720 --> 00:25:43.480
an alternative right now, but
yeah. Is there any movement,

479
00:25:43.480 --> 00:25:45.760
I mean, you guys are
using HTP handlers, but so

480
00:25:45.760 --> 00:25:48.400
you're beholden to asp.net. This
could certainly be a nice,

481
00:25:48.400 --> 00:25:51.380
happy extension. Is there any
movement of getting out of,

482
00:25:52.120 --> 00:25:54.430
out of the web dot
config file and somewhere else?

483
00:25:55.840 --> 00:25:58.270
I don't know that there
really needs to be. I

484
00:25:58.270 --> 00:26:02.020
mean, yeah, right now, especially
in our scenario, since we're

485
00:26:02.020 --> 00:26:05.060
using both, it makes sense
to use both. And I

486
00:26:05.060 --> 00:26:07.190
mean, there's a lot of
stuff in system dot web,

487
00:26:07.190 --> 00:26:10.030
and that is useful. I
mean, we still use the

488
00:26:10.030 --> 00:26:15.070
membership provider. Like we, we
use that to log in

489
00:26:15.070 --> 00:26:16.780
and to, to create, do
we still use it to

490
00:26:16.780 --> 00:26:19.060
create users? No. No. Okay.
We just use it to

491
00:26:19.060 --> 00:26:22.210
log in, but, but we
still use it. And so,

492
00:26:22.210 --> 00:26:24.220
I mean, there is, there
are useful things there. It's

493
00:26:24.220 --> 00:26:27.790
not, it's not a wash.
Cool. I'm sure Scott Guthrie will

494
00:26:27.790 --> 00:26:29.260
be happy to hear that
when he listens to this

495
00:26:29.260 --> 00:26:32.410
podcast, guys, I really appreciate
you taking the time to

496
00:26:32.410 --> 00:26:34.450
talk to me and hopefully
I'll start digging a little

497
00:26:34.450 --> 00:26:36.280
bit more. I know that
monorail is just one part

498
00:26:36.280 --> 00:26:38.530
of the castle project, and
I know that I I've

499
00:26:38.530 --> 00:26:40.960
given the castle project a
cursory glance in the past

500
00:26:40.960 --> 00:26:42.280
and I'll have to pay
a little more attention to

501
00:26:42.280 --> 00:26:54.810
it now. Thanks for taking
the time <inaudible>.

