WEBVTT FILE

1
00:00:12.210 --> 00:00:16.410
From Hanselman it's dot com
it's Hansel minutes or weekly

2
00:00:16.410 --> 00:00:20.370
discussion with web developer and
technologist Scott Hanselman and hosted

3
00:00:20.370 --> 00:00:25.200
by Carl Franklin. This is Lawrence Ryan
announcing show number nine. Recorded

4
00:00:25.230 --> 00:00:30.030
February 27, 2006. Support for
Hanselman it's is provided by

5
00:00:30.060 --> 00:00:34.380
automated QA and makers of
test complete providing automated testing

6
00:00:34.380 --> 00:00:43.530
of windows.net framework, Java and
web applications online@wwwdotautomatedqa.com. And by

7
00:00:43.560 --> 00:00:47.550
Peter blom.com. Start with better
controls finish with better sites

8
00:00:48.180 --> 00:00:56.340
online@peterblum.com. Support is also provided
by.net developers journal the world's

9
00:00:56.340 --> 00:01:02.730
leading.net developer magazine online at
www dot <inaudible> dot com.

10
00:01:03.660 --> 00:01:07.800
In this episode, Scott talks
about debugging by coincidence, debugging,

11
00:01:07.860 --> 00:01:14.010
XML, serializers Ruby for.net fusion.
Yeah. And other things too.

12
00:01:14.010 --> 00:01:18.990
Cool to mention here. Hi,
this is Carl Franklin and you're

13
00:01:18.990 --> 00:01:21.690
listening to Hanselman it's show
number nine. I'm here with

14
00:01:21.690 --> 00:01:26.130
Scott. Hi, Scott Hanselman. Hello,
Carl Franklin. How are you? What

15
00:01:26.130 --> 00:01:28.770
are we going to talk
about today? Cut a couple

16
00:01:28.770 --> 00:01:30.660
of random things and then
I want to talk about

17
00:01:30.690 --> 00:01:36.810
programming by coincidence and my
buddy Patrick Caldwell's favorite subject

18
00:01:37.350 --> 00:01:41.310
said with tongue firmly in
cheek debugging. Ah, good by

19
00:01:41.310 --> 00:01:44.340
coincidence. Excellent. Yeah, but to
start with, I've got a

20
00:01:44.340 --> 00:01:47.730
couple of cool things to
talk about two cool one

21
00:01:47.730 --> 00:01:50.760
painful first cool. One is,
you know, how I, I

22
00:01:50.760 --> 00:01:54.480
plug into my media center
PC using the media center

23
00:01:54.480 --> 00:01:57.210
feature of the Xbox three
60. I do, or we

24
00:01:57.210 --> 00:02:00.390
remote kind of remote desktop
into it, but you're using

25
00:02:00.390 --> 00:02:03.960
a custom X-Box three 60
kind of remote desktop. OK.

26
00:02:04.500 --> 00:02:06.630
You know, parts of the
user interface or remote desktop

27
00:02:06.660 --> 00:02:10.920
parts. Aren't and you can't
browse the net. You can't

28
00:02:10.920 --> 00:02:14.250
run I E right, right.
But there's this fellow named

29
00:02:14.280 --> 00:02:20.010
anthonyPark@shrinkstir.com slash C I zero.
He looks very young. I

30
00:02:20.010 --> 00:02:22.500
think that's a picture of
him last week before he

31
00:02:22.500 --> 00:02:25.500
can, his beard came in.
Yeah. He's a, he's a

32
00:02:25.770 --> 00:02:28.110
regular guy. And although he's
got a picture of himself

33
00:02:28.140 --> 00:02:30.810
at 10 on his blog,
right. And he's got a

34
00:02:30.810 --> 00:02:34.200
thing called M C E
browser. And basically this is

35
00:02:34.200 --> 00:02:36.900
a, what you call a
browser with a 10 foot

36
00:02:36.900 --> 00:02:41.910
interface. He's basically hosting I
E with big buttons and

37
00:02:41.910 --> 00:02:45.120
the big MCE keyboard. And
allowing you to use your

38
00:02:45.120 --> 00:02:47.940
media center PC from far
away and browse the net.

39
00:02:48.420 --> 00:02:51.570
Yeah. It's pretty cool. I
especially like the telephone dial

40
00:02:51.570 --> 00:02:55.830
sort of a keyboard interface
there, right? Because that, that

41
00:02:55.830 --> 00:02:57.900
mirrors the same interface that
you've might have on your

42
00:02:57.900 --> 00:03:00.910
remote control. Right? So he's
got snippets to let you

43
00:03:00.910 --> 00:03:05.050
type in HTTP and www.com
faster, but you can browse

44
00:03:05.050 --> 00:03:07.690
using just your normal control.
And because this is done

45
00:03:07.690 --> 00:03:11.890
as a pure media center,
PC app, basically he's, he's

46
00:03:11.890 --> 00:03:15.430
hosting IAE within this media
center HTML, and then the

47
00:03:15.430 --> 00:03:20.350
resulting composite screen image is
remoted over to your Xbox

48
00:03:20.350 --> 00:03:23.440
three 60, right? You can't,
you can then surf the

49
00:03:23.440 --> 00:03:25.690
net on your Xbox three
60. Now this is not

50
00:03:25.990 --> 00:03:28.270
designed for the Xbox three
60, but because the X-Box

51
00:03:28.270 --> 00:03:31.150
three 60 has such rich
support for remoting into media

52
00:03:31.150 --> 00:03:34.600
center. Suddenly I can browse
on my X-Box and that's

53
00:03:34.600 --> 00:03:36.910
pretty sweet. And it's cool.
Yeah. I guess he's going

54
00:03:36.910 --> 00:03:39.070
to be charging soon, but
it'll be like 10 bucks

55
00:03:39.070 --> 00:03:42.040
and seriously took to browse
the web from my 37

56
00:03:42.040 --> 00:03:44.590
inch LCD is going to
be awesome. Even just to

57
00:03:44.590 --> 00:03:47.340
check the news occasionally, As
long as we're talking about

58
00:03:47.340 --> 00:03:49.560
cool things, you know what
I just discovered like four

59
00:03:49.560 --> 00:03:54.010
weeks ago. What's that? Slingbox,
Isn't that sweet. Yeah. I

60
00:03:54.030 --> 00:03:57.720
had getting content all over
the place. Slingbox man. slingbox.com.

61
00:03:58.290 --> 00:04:00.210
Yeah. Yeah. W w with
the stuff, whether it be

62
00:04:00.210 --> 00:04:03.480
things that Clemens Vassar's throws
together, like his new television

63
00:04:03.870 --> 00:04:09.300
or a Slingbox or remoting
video around, or using windows

64
00:04:09.300 --> 00:04:11.730
media connect, you know, I
tell you if they would

65
00:04:11.730 --> 00:04:15.060
just open up the Xbox
three 60 for video streaming,

66
00:04:15.600 --> 00:04:17.730
you could, you know, use
the Slingbox with the Xbox

67
00:04:17.730 --> 00:04:20.670
three 60. They must be
some reason they're afraid to

68
00:04:20.670 --> 00:04:24.360
open up the Xbox three
60 video aspects to, to

69
00:04:24.360 --> 00:04:25.950
the world. I think it's
probably some of the, you

70
00:04:25.950 --> 00:04:28.770
know, the DRM rights management
stuff You don't want to

71
00:04:28.770 --> 00:04:33.090
sell. What is essentially a
$1,200 PC for 300 bucks.

72
00:04:33.300 --> 00:04:36.000
So Slingbox is a, for
those of you who don't

73
00:04:36.000 --> 00:04:38.520
know Slingbox is one of
these things where you can

74
00:04:38.910 --> 00:04:41.370
just connect this thing to
your cable box and a

75
00:04:41.370 --> 00:04:44.310
PC, and then you can
log into your PC and

76
00:04:44.310 --> 00:04:47.790
watch the TV and control
it. Yeah. My buddy, Greg

77
00:04:47.790 --> 00:04:54.000
Hughes blogged about this last
september@shrinks.com slash CIJ. Greg Hughes

78
00:04:54.000 --> 00:04:56.670
has got a lot of
stuff around moving video from

79
00:04:56.670 --> 00:05:00.000
place to place and gadgetry
and stuff. And I guess

80
00:05:00.000 --> 00:05:03.050
they sell this stuff, a
radio shack. Now the sandbox,

81
00:05:03.060 --> 00:05:06.570
I mean, they've got a
good distribution deal And slingbox.com

82
00:05:06.570 --> 00:05:10.200
is shrinks dries. It's C
I, I cool. So, yeah,

83
00:05:10.260 --> 00:05:12.420
actually that's a very good
kind of segue to talk

84
00:05:12.420 --> 00:05:15.120
about some of the problems
that I'm having, getting my

85
00:05:15.120 --> 00:05:18.030
high definition experience to work
out. You know, I have

86
00:05:18.030 --> 00:05:22.320
one of these Comcast cable
DVRs, digital video recorders. I

87
00:05:22.320 --> 00:05:25.410
use the Motorola. Yeah, me
too. That's so same, same

88
00:05:25.410 --> 00:05:27.300
one I have. Yeah. And
I'm, I'm having a heck

89
00:05:27.300 --> 00:05:29.730
of a time with this
thing. It's just a, it

90
00:05:29.740 --> 00:05:34.920
stutters, I get Phantom chunks
of, of a show, like

91
00:05:34.920 --> 00:05:36.570
10 minutes of a show.
And then it'll say it's

92
00:05:36.570 --> 00:05:40.350
been interrupted. And I just
went from a phase, a

93
00:05:40.350 --> 00:05:42.900
phase two version to a
phase three. If you go

94
00:05:42.930 --> 00:05:45.570
to Wikipedia, you can search
for Comcast DVR. There's apparently

95
00:05:45.570 --> 00:05:49.800
three versions. I just upgraded
by just calling and complaining

96
00:05:50.100 --> 00:05:53.700
to the phase three edition,
which doesn't include a DVI

97
00:05:53.700 --> 00:05:56.070
out. So I couldn't plug
it into the DVI on

98
00:05:56.070 --> 00:05:59.060
my, my LCD anymore. So
I had to go get

99
00:05:59.060 --> 00:06:04.610
a DVI HTMI converter, a
little, little $25 widget, plug

100
00:06:04.610 --> 00:06:07.670
it into the cable and
check this out. The Comcast

101
00:06:07.670 --> 00:06:12.440
DVR won't output digital audio
in the 5.1 Dolby out

102
00:06:12.440 --> 00:06:15.440
of the, out, out of
the optical. If it's plugged

103
00:06:15.440 --> 00:06:19.580
into HTMI literally, I had
the thing plugged into two.

104
00:06:19.960 --> 00:06:23.210
I'm listening to sound. I'm
hearing it at 5.1, the

105
00:06:23.210 --> 00:06:26.210
big blue light on my
is turned on. I plug

106
00:06:26.210 --> 00:06:30.110
in the HTMI adapter. It
stops and parts putting out

107
00:06:30.290 --> 00:06:34.670
two channel Dolby, huh? Pull
it back out, pops back

108
00:06:34.670 --> 00:06:39.560
to 5.1, where some reason
they stop outputting the 5.1

109
00:06:39.740 --> 00:06:42.530
to the optical and they
start outputting it only from

110
00:06:42.530 --> 00:06:46.700
HTMI now who listens to
audio out of their HTMI.

111
00:06:46.700 --> 00:06:49.730
Right. Who uses the crap
speakers on their HDTV? Right.

112
00:06:49.940 --> 00:06:52.490
So I actually had to
downgrade, I felt just last

113
00:06:52.490 --> 00:06:56.300
week, I had to start
using the component out of

114
00:06:56.300 --> 00:07:00.350
the Comcast. And now I've
got slightly degraded video because

115
00:07:00.350 --> 00:07:04.430
of the cabling. Right. But
I've got 5.1 very frustrating

116
00:07:04.430 --> 00:07:07.160
stuff. I'm getting, I've just
about had it with these

117
00:07:07.160 --> 00:07:10.250
guys. This box is crap.
And I'm thinking I want

118
00:07:10.250 --> 00:07:12.530
to go somewhere else, but
I don't want to satellite

119
00:07:12.530 --> 00:07:14.240
hanging off the side of
my house and they don't

120
00:07:14.240 --> 00:07:17.450
have decent two, two tuner
DVRs. Do they right now,

121
00:07:17.870 --> 00:07:21.170
I guess there's a, there's
a TiVo direct TiVo for

122
00:07:21.170 --> 00:07:24.300
direct TV, but it's a
couple of hundred bucks. And

123
00:07:24.300 --> 00:07:27.560
they gave me the Comcast
DVR for free I'm unfamiliar

124
00:07:27.560 --> 00:07:29.420
with those it's. I think
it's just a TiVo. It's

125
00:07:29.420 --> 00:07:31.400
a high definition TiVo, but
I don't think it has

126
00:07:31.400 --> 00:07:34.160
two tuners and it's TiVo
and TiVo has got that

127
00:07:34.160 --> 00:07:37.490
whole kind of like pop
snap, crackle, pop thing with

128
00:07:37.490 --> 00:07:38.750
a thumbs up in the
thumbnail. It's gonna have a

129
00:07:38.750 --> 00:07:41.900
toy. I'm just not a
fan. But man, Intel HD

130
00:07:41.900 --> 00:07:44.240
works this out where I
can just get a standard

131
00:07:44.720 --> 00:07:48.500
two tuner high definition DVR.
It's not gonna happen for

132
00:07:48.500 --> 00:07:51.970
me. Well, you know, you
can foresee that you're going

133
00:07:51.970 --> 00:07:56.110
to have video cards with
HDTV inputs. So, you know,

134
00:07:56.230 --> 00:08:00.070
inputs and outputs. So you'll
be able to record HDTV

135
00:08:00.070 --> 00:08:02.830
with your computer before too
long. You gotta be able

136
00:08:02.830 --> 00:08:04.690
to do it sooner or
later. Well, yeah, you can

137
00:08:04.690 --> 00:08:08.470
take like the HTTV I'm
all in wonder from ATI.

138
00:08:08.470 --> 00:08:11.740
There's a number of inexpensive
ones, but I just, somehow

139
00:08:11.740 --> 00:08:14.770
I don't see my computer
deeply involved in my day

140
00:08:14.770 --> 00:08:17.560
to day HDTV watching. I
really want to just plug

141
00:08:17.560 --> 00:08:20.950
a cable in from the
wall, Unless, unless you dedicate

142
00:08:20.950 --> 00:08:23.260
a computer to that process,
which we really have to

143
00:08:23.260 --> 00:08:25.330
do, you know? Right. And
then I would need two

144
00:08:25.330 --> 00:08:28.600
tuners. Now that I've kind
of experienced the two tuners

145
00:08:28.630 --> 00:08:31.030
watching one, you know, watching
one show or taping two

146
00:08:31.030 --> 00:08:33.340
shows at the same time,
I've actually seen these. I've

147
00:08:33.340 --> 00:08:37.540
actually seen multi, I've seen
eight tuner cards, right. Except

148
00:08:37.570 --> 00:08:40.360
the, the HDTV cards for
the most part, I believe

149
00:08:40.390 --> 00:08:44.140
pull the HDTV off of
the air. Not off of

150
00:08:44.140 --> 00:08:45.980
the Comcast yet. So we're
going to have to wait

151
00:08:45.980 --> 00:08:47.950
until the next COVID. Yeah.
That's what I'm saying. That's

152
00:08:47.950 --> 00:08:49.630
what I'm saying. Yeah. Yeah.
The next version of media

153
00:08:49.630 --> 00:08:51.460
center, I guess, supports cable
cards. So I can get

154
00:08:51.460 --> 00:08:55.290
that special card from exactly
the cable company. Alright. We

155
00:08:55.290 --> 00:08:57.960
talked a little bit about
the Ruby language on the

156
00:08:57.960 --> 00:09:00.660
show. A couple of couple
of shows ago, you got

157
00:09:00.660 --> 00:09:04.730
some more interesting things to
talk about. Yeah. We're not

158
00:09:04.730 --> 00:09:05.930
done. And I think we're
going to continue to hear

159
00:09:05.930 --> 00:09:08.210
more and more about Ruby.
Ruby is, is a really

160
00:09:08.210 --> 00:09:11.210
interesting language one, because I
think it's becoming a new

161
00:09:11.210 --> 00:09:14.840
second language for, for dotnet
folks. You know, the real

162
00:09:14.840 --> 00:09:17.360
hardcore comp side people, computer
science people say, you know,

163
00:09:17.360 --> 00:09:19.640
always try to learn more
and more languages don't limit

164
00:09:19.640 --> 00:09:23.630
yourself to Phoebe or C-sharp.
And they'll sometimes they'll say,

165
00:09:23.630 --> 00:09:26.690
go learn lists or go
learn Pearl or something like

166
00:09:26.690 --> 00:09:30.200
that. But, but Ruby is
a very comfortable, accessible language

167
00:09:30.200 --> 00:09:33.530
to people that are familiar
with, with.net and, and kind

168
00:09:33.530 --> 00:09:36.140
of standard old practices. But
it is still, you know,

169
00:09:36.140 --> 00:09:41.870
an interpreted language and it's
a, a very different world

170
00:09:41.870 --> 00:09:46.310
than the.net world. But there's
this fellow John Lamb, you may

171
00:09:46.310 --> 00:09:51.560
know of him. I unknown.com
or shrinks or.com/cig, who is

172
00:09:51.560 --> 00:09:54.680
building what he calls the
Ruby CLR. And it's really

173
00:09:54.680 --> 00:09:58.640
interesting because it's important to
note that he's not porting

174
00:09:58.640 --> 00:10:01.580
Ruby the language in the
way that most dotnet people

175
00:10:01.580 --> 00:10:04.850
are used to hearing about
a new language, like you

176
00:10:04.850 --> 00:10:06.950
know about iron Python. Right?
I do. So it's a

177
00:10:06.950 --> 00:10:11.450
compiler that takes Python and
makes IRL. Yep. Okay. So

178
00:10:11.450 --> 00:10:13.130
when you hear Ruby CLR,
you kind of think, well,

179
00:10:13.130 --> 00:10:15.500
maybe he's taking Ruby and
turning it into IOL. What

180
00:10:15.500 --> 00:10:18.830
he's doing is he's providing
a bridge so that Ruby

181
00:10:18.830 --> 00:10:24.050
can call.net completely transparently Ruby
doesn't just care. It just

182
00:10:24.050 --> 00:10:28.670
works. So it's interrupt. Exactly.
Exactly. It's Ruby interrupt, just

183
00:10:28.670 --> 00:10:32.060
like common Robert's Ruby interrupt.
And he has actually got

184
00:10:32.450 --> 00:10:38.120
a nontrivial windows forms, 2.0
application, actually a full RSS

185
00:10:38.120 --> 00:10:43.280
reader written entirely in Ruby,
talking to windows forms to

186
00:10:43.280 --> 00:10:46.100
O running it up. And
when you run this thing,

187
00:10:46.100 --> 00:10:48.290
it works. It runs, it
looks just fine. It looks

188
00:10:48.290 --> 00:10:51.310
like a windows app it's
fast. But if you look,

189
00:10:51.380 --> 00:10:53.750
you got it in the
task manager, that's being run

190
00:10:53.750 --> 00:10:57.110
by Ruby dot exe. Wow.
Open it up with process

191
00:10:57.110 --> 00:11:00.890
Explorer. You see that dot
nets loaded up inside there

192
00:11:00.890 --> 00:11:04.880
and he's managing the back
and forth. Wow. Pretty crazy.

193
00:11:04.910 --> 00:11:06.470
You know, John's a brilliant
guy. He's one of those

194
00:11:06.470 --> 00:11:08.570
guys. Who's so brilliant. It
hurts to talk to him.

195
00:11:09.680 --> 00:11:13.820
Cause I don't like to
feel stupid, but I do

196
00:11:13.820 --> 00:11:18.320
so try my job someday.
Yeah. He's doing some really

197
00:11:18.320 --> 00:11:21.010
neat stuff. He's implementing things
like they using pattern. And

198
00:11:21.020 --> 00:11:25.400
when he calls auto dispose,
he's getting interfaces working. He's

199
00:11:25.400 --> 00:11:29.060
got native Ruby array binding.
Yeah. I don't know if

200
00:11:29.060 --> 00:11:30.950
this is something I would
use in my everyday life,

201
00:11:31.220 --> 00:11:34.700
but when it starts, when
I start thinking about better

202
00:11:34.700 --> 00:11:38.300
ways to integrate Ruby testing
and some of the water,

203
00:11:38.600 --> 00:11:42.170
the Rab application testing in
Ruby, the water work that

204
00:11:42.170 --> 00:11:45.710
we're doing, right. We usually
do it where.net pole from

205
00:11:45.710 --> 00:11:48.560
Ruby will have Ruby write
to a file or we'll

206
00:11:48.560 --> 00:11:51.230
have, we'll listen to Ruby,
pulling data out at the,

207
00:11:51.350 --> 00:11:54.220
the console. And then we'll
just look that that's a

208
00:11:54.220 --> 00:11:58.150
very poor man's integration. He
has got a very kind

209
00:11:58.150 --> 00:12:01.570
of first class integration where
dotnet objects and Ruby objects

210
00:12:01.600 --> 00:12:05.680
are just living together in
harmony and something to definitely

211
00:12:05.680 --> 00:12:07.630
to watch what he's doing
there. Even if you don't

212
00:12:07.870 --> 00:12:12.220
find yourself using it. Very
cool. Yeah, totally. So what

213
00:12:12.220 --> 00:12:15.060
was this a blog Most
on view state user key

214
00:12:15.060 --> 00:12:17.160
that you did recently? Yeah,
No, actually this was a

215
00:12:17.160 --> 00:12:20.550
little while ago, but it
keeps coming up. So view

216
00:12:20.550 --> 00:12:24.030
state is this, is this
pariah, right? I mean, when

217
00:12:24.030 --> 00:12:26.010
you think of G state,
you think this is, this

218
00:12:26.010 --> 00:12:29.910
is evil, right? Black box.
Exactly. It's a big, giant

219
00:12:29.910 --> 00:12:34.860
blob of crap that comes
by in my, a hidden

220
00:12:34.860 --> 00:12:36.600
form field. And, and all
you want to do is

221
00:12:36.600 --> 00:12:39.510
make it go away and
make it smaller. Right. And

222
00:12:39.580 --> 00:12:41.550
still work. And no one
really knows kind of what

223
00:12:41.550 --> 00:12:42.840
it does or they kind
of know that it does,

224
00:12:42.840 --> 00:12:44.220
but they just, they, they
know, they know they don't

225
00:12:44.220 --> 00:12:47.430
like it Also very dependent
on lots of little processes

226
00:12:47.430 --> 00:12:51.540
that have to happen. Exactly.
It's very Rube Goldberg even.

227
00:12:51.720 --> 00:12:56.700
Right. So is that a
word Rube Goldberg? I think

228
00:12:56.700 --> 00:12:58.890
that is a word, you
know, Rube Goldberg. Right? Right.

229
00:12:58.920 --> 00:13:02.130
Sure. The mouse trap game
is the expression of Rube

230
00:13:02.160 --> 00:13:05.160
Goldberg machines. Exactly. So like,
you know, when for view

231
00:13:05.160 --> 00:13:07.080
state to work, you know,
it must be a Tuesday

232
00:13:07.080 --> 00:13:08.480
and you must be on
one foot and then the

233
00:13:08.490 --> 00:13:11.370
little man will jump off
of his leg and into

234
00:13:11.370 --> 00:13:13.290
the pool and then the
mouse will get the cheese.

235
00:13:13.920 --> 00:13:15.330
And then the view state
we'll come back with an

236
00:13:15.330 --> 00:13:20.640
exception. It all works magically.
So, so view state is

237
00:13:20.850 --> 00:13:23.130
the state of the view,
right? Let's say I had

238
00:13:23.130 --> 00:13:25.320
a webpage with a single
button on it in a

239
00:13:25.320 --> 00:13:28.920
single text box. And I
typed in Fu and I

240
00:13:28.920 --> 00:13:31.020
click on the button. Yeah.
And then we do, what's

241
00:13:31.020 --> 00:13:33.450
called a post-bac right. We
do a forum post, but

242
00:13:33.450 --> 00:13:35.430
we post back to the
page that we came from.

243
00:13:36.210 --> 00:13:40.320
So it's not only going
to send back what's in

244
00:13:40.320 --> 00:13:44.340
the text box, it's going
to send back what was

245
00:13:44.340 --> 00:13:46.410
in the text box when
it sent me the page

246
00:13:46.410 --> 00:13:48.390
in the first place. Yeah.
So if I sent you

247
00:13:48.390 --> 00:13:51.030
a text box with Fu
I erase Fu I type

248
00:13:51.030 --> 00:13:54.480
in bar, and then I
hit the button, I'm going

249
00:13:54.480 --> 00:13:59.100
to send back foo and
bar. And this allows.net to

250
00:13:59.100 --> 00:14:02.220
basically simulate a state when
there isn't a state. Right.

251
00:14:03.210 --> 00:14:05.880
Basically it gives you things
like a text changed event,

252
00:14:06.420 --> 00:14:10.110
right? So that means duplication.
There's a lot of duplicated

253
00:14:10.110 --> 00:14:12.810
data and that's why we
want to sometimes turn view

254
00:14:12.810 --> 00:14:14.940
state off in certain instances
when we don't need it.

255
00:14:15.390 --> 00:14:17.460
But there's a number of
things that affect your state,

256
00:14:17.610 --> 00:14:20.730
particularly that what's called the
machine key. The machine key

257
00:14:20.730 --> 00:14:23.430
is a configuration section in
the web dot config. And

258
00:14:23.430 --> 00:14:26.130
this is a kind of
a key that is used

259
00:14:26.280 --> 00:14:31.350
along with whatever cryptography method
that you choose for trying

260
00:14:31.350 --> 00:14:34.830
to protect the view state,
along with your forms, authentication

261
00:14:36.080 --> 00:14:40.500
ticket, Some sort of unique
identifier to that machine, like

262
00:14:40.500 --> 00:14:43.860
a network. Exactly. It's a
big, giant, long number. It's

263
00:14:43.860 --> 00:14:46.380
kind of like the Mac
address, Mac address. Yeah. And

264
00:14:46.380 --> 00:14:48.540
there's also a thing called
enabled view state Mac, which

265
00:14:48.630 --> 00:14:50.730
ties the view state in
some small way to your

266
00:14:50.730 --> 00:14:54.560
Mac, all of these ways,
hoping to detect people doing

267
00:14:54.800 --> 00:14:57.620
what I call TiVo attacks
basically on record and replay

268
00:14:57.620 --> 00:15:01.850
attacks. Yeah. So there's another
kind of little known feature

269
00:15:02.210 --> 00:15:05.030
within view state that's called
the view state user key.

270
00:15:05.750 --> 00:15:09.080
This is a user specific
key, not a machine specific

271
00:15:09.080 --> 00:15:11.960
key. So I could say
if you'd logged in Carl

272
00:15:11.960 --> 00:15:14.660
via farm's authentication, I know
your name and I can

273
00:15:14.660 --> 00:15:18.950
go and say a user.identity.name.
And I could put that

274
00:15:18.950 --> 00:15:22.190
inside of page dot view,
state, user key. So then

275
00:15:22.190 --> 00:15:24.260
your view state is not
just married to the machine,

276
00:15:24.290 --> 00:15:26.390
so you couldn't record and
replay it then, but it's

277
00:15:26.390 --> 00:15:29.470
also married to your forms,
auth cookie, and yeah. And

278
00:15:29.570 --> 00:15:32.390
that doesn't necessarily mean that
a person can't decode and

279
00:15:32.390 --> 00:15:34.610
read the view state, but
it does mean that they

280
00:15:34.610 --> 00:15:37.970
can't create their own. It
makes view, state more cryptographically.

281
00:15:37.970 --> 00:15:40.310
Significant. You say, it's not
somewhere that you want to

282
00:15:40.310 --> 00:15:44.300
put information, that's private, but
it's definitely a place that

283
00:15:44.300 --> 00:15:48.260
you can store information. That's
not private, but you may

284
00:15:48.260 --> 00:15:50.660
need to look at later.
Okay. So this view state

285
00:15:50.660 --> 00:15:53.620
user key is a really,
if you're going to be

286
00:15:54.040 --> 00:15:57.610
in the middle of it
automatically enrolling a user into

287
00:15:57.610 --> 00:16:00.640
a site. So imagine that
you come to a site

288
00:16:01.360 --> 00:16:04.360
and the person's anonymous and
they're going to be enrolling

289
00:16:04.480 --> 00:16:06.610
on the fly. So you're
going to learn about them

290
00:16:07.000 --> 00:16:08.290
and they're going to type
in their name and all

291
00:16:08.290 --> 00:16:11.290
their information, their preferred password.
And then they're going to

292
00:16:11.380 --> 00:16:13.540
enroll on the fly and
sign in all at once.

293
00:16:14.050 --> 00:16:16.360
This happens a lot in,
in e-banking. We want to

294
00:16:16.360 --> 00:16:19.630
be able to join up
with a new bank and

295
00:16:20.110 --> 00:16:22.840
do it all in an,
on the fly enrollment. So

296
00:16:22.870 --> 00:16:24.970
the very first page, when
I'm anonymous, I'm going to

297
00:16:24.970 --> 00:16:27.850
get a view state back
that doesn't include anything about

298
00:16:28.030 --> 00:16:32.020
my identity. Right. Okay. And
that views that will be

299
00:16:32.020 --> 00:16:34.510
sent and held at the
client inside of a hidden

300
00:16:34.510 --> 00:16:39.100
form field. But then if
I do a postbac yeah.

301
00:16:39.130 --> 00:16:45.070
And enroll them and their
identity changes, I might then

302
00:16:45.070 --> 00:16:49.150
send them view state that
has, is married to their

303
00:16:49.150 --> 00:16:53.680
identity. Yeah. Okay. If it's
point later on, they back

304
00:16:53.680 --> 00:16:55.470
up a couple of pages,
you know how in the,

305
00:16:55.470 --> 00:16:57.730
in the most browsers you
can back up and if

306
00:16:57.730 --> 00:16:59.950
you go back far enough,
it'll say, Oh, I need

307
00:16:59.950 --> 00:17:01.990
to post this data back
because the page that we

308
00:17:01.990 --> 00:17:04.930
were on bane of my
existence, man, exactly totally sucks.

309
00:17:04.930 --> 00:17:06.970
Right. And it says, I
need to post this data

310
00:17:06.970 --> 00:17:09.880
back. So we're going to
go back to an anonymous

311
00:17:09.880 --> 00:17:13.600
this page, but who we
are, somebody now we have

312
00:17:13.600 --> 00:17:16.300
a forms. Auth cookie. Yeah.
We are. We are a

313
00:17:16.300 --> 00:17:19.360
Karl. So then when that
page runs, it's going to

314
00:17:19.360 --> 00:17:23.800
say view, state, user key
equals who you are, but

315
00:17:23.950 --> 00:17:25.870
what's the view state that
you have saved in your

316
00:17:25.870 --> 00:17:28.750
cash, right? It's an anonymous,
it's anonymous. Yeah. So then

317
00:17:28.750 --> 00:17:31.480
your view state will invalid.
You'll get an invalid view

318
00:17:31.480 --> 00:17:34.210
state. It's going to kick
back. When most people see

319
00:17:34.210 --> 00:17:36.250
in valid view state exceptions,
they usually assume that the

320
00:17:36.250 --> 00:17:39.340
machine keys aren't synchronized between
two machines. Maybe I got

321
00:17:39.340 --> 00:17:41.320
view state from machine one
and then posted it to

322
00:17:41.320 --> 00:17:45.400
machine two. But if you're
using as, as we, as

323
00:17:45.400 --> 00:17:47.590
we do, and some folks
do the view state user

324
00:17:47.590 --> 00:17:52.050
key, you set that to
a known state during that

325
00:17:52.050 --> 00:17:54.600
enrollment process. Even if you
set it to just like

326
00:17:54.600 --> 00:17:58.500
enrollment, some, some value that
is not their name, but

327
00:17:58.500 --> 00:18:00.860
maybe is the name of
the process. So what's the

328
00:18:00.860 --> 00:18:03.140
long and short of this.
The long and short of

329
00:18:03.140 --> 00:18:07.310
this is that if you,
if you debug by coincidence,

330
00:18:07.310 --> 00:18:09.770
if you, if you know
enough to be dangerous, but

331
00:18:09.770 --> 00:18:13.760
you don't really understand what's
going on. As you move

332
00:18:14.240 --> 00:18:17.510
COVID around, you're going to
move your bugs around. This

333
00:18:17.510 --> 00:18:21.500
is something that I posted
about literally a year ago,

334
00:18:21.500 --> 00:18:23.030
I guess the beyond. This
was almost the one year

335
00:18:23.030 --> 00:18:26.990
anniversary a year and three
weeks ago, but it still

336
00:18:26.990 --> 00:18:28.880
comes, it still comes up.
It came up in my

337
00:18:28.880 --> 00:18:30.650
life. It took me a
second to remember what was

338
00:18:30.650 --> 00:18:32.630
going on. And this is
the nice thing about blogging.

339
00:18:32.630 --> 00:18:35.240
Of course you can Google.
Right? Right. So, you know,

340
00:18:35.750 --> 00:18:37.610
I think my brain knew
that once I'm going to

341
00:18:37.610 --> 00:18:39.350
go and see if my
really did, cause I blogged

342
00:18:39.350 --> 00:18:42.410
about it. But so many
people, I think debugged by,

343
00:18:42.620 --> 00:18:45.410
by coincidence, right? This is
like, you know, walking into

344
00:18:45.410 --> 00:18:47.570
a minefield and you make
you take three or four

345
00:18:47.570 --> 00:18:51.680
steps and you don't die.
So that must mean you're

346
00:18:51.680 --> 00:18:54.920
not in the mind. Yeah.
It's empirical. Exactly. You start

347
00:18:54.920 --> 00:18:56.930
pushing stuff around and what's
the worst kind of bug,

348
00:18:56.960 --> 00:18:59.780
right? It's a flaky. Right.
And you said, well, you

349
00:18:59.780 --> 00:19:03.530
know, I, I rebooted and
darn it. It stopped and

350
00:19:03.530 --> 00:19:05.450
view States one of those
things, but this is the

351
00:19:05.450 --> 00:19:11.990
deal it's not flaky. It's
absolutely complete predictable view. State

352
00:19:11.990 --> 00:19:14.420
exceptions happen for a reason.
It just doesn't feel like

353
00:19:14.420 --> 00:19:16.520
they do because it's such
a twiddly thing. Like you

354
00:19:16.520 --> 00:19:19.400
said before, it's such a,
so many variables involved, many

355
00:19:19.410 --> 00:19:23.300
variables. So understanding those things,
it can make you a

356
00:19:23.300 --> 00:19:27.200
more kind of effective if
debugger. And that can be

357
00:19:27.200 --> 00:19:29.330
very, very frustrating. And I
think that sometimes people need

358
00:19:29.330 --> 00:19:32.330
to specialize. They need to
become one kind of debugger.

359
00:19:32.360 --> 00:19:38.990
Like I'm reallyGood@debugginghddpandasp.net specific stuff.
But, you know, I don't

360
00:19:38.990 --> 00:19:40.880
think I could do a
lot of database debugging. I

361
00:19:40.880 --> 00:19:43.550
wouldn't know where to start.
So again, where can you

362
00:19:43.550 --> 00:19:47.870
send people if they're having
view state woes. So to

363
00:19:47.870 --> 00:19:51.980
start with, try decoding the
views that you can pull

364
00:19:51.980 --> 00:19:53.530
that view state out and
you can decode it and

365
00:19:53.540 --> 00:19:56.030
go to Google and search
review, state decoder. There are

366
00:19:56.540 --> 00:19:59.120
online decoders that will take
apart few state and show

367
00:19:59.120 --> 00:20:01.100
you what's inside them. They'll
tell you whether or not

368
00:20:01.100 --> 00:20:04.220
it was in fact invalid.
There are offline ones by

369
00:20:04.220 --> 00:20:06.320
Fritz onion that you can
download and keep on your

370
00:20:06.320 --> 00:20:08.750
machine to look at few
state primarily. And if you

371
00:20:08.750 --> 00:20:13.400
look at my post, a
trunkster.com/c H S, there are

372
00:20:13.400 --> 00:20:15.650
only so many things that
can go wrong with, with

373
00:20:15.710 --> 00:20:19.280
your view state. Either you
have two machines or more,

374
00:20:19.640 --> 00:20:23.960
and they do not have
their machine keys synchronized, or

375
00:20:23.960 --> 00:20:27.350
you've tried to post some
view state to another page,

376
00:20:27.380 --> 00:20:30.440
right? Maybe by you've hacked
around with the form. Actually,

377
00:20:30.440 --> 00:20:32.870
this happened to me last
week, a fella needed to

378
00:20:32.870 --> 00:20:35.570
do some integration with another
vendor, and he was going

379
00:20:35.570 --> 00:20:38.810
to post a form using
asp.net. One, one, not using

380
00:20:38.810 --> 00:20:42.200
cross page, post backs, anyone
to post this stuff over

381
00:20:42.200 --> 00:20:44.720
to this other vendor. The
other vendor was also using

382
00:20:44.720 --> 00:20:48.700
asp.net. And he was consistently
getting a view state invalid.

383
00:20:49.090 --> 00:20:52.180
So they said, well, gosh,
we should just synchronize our

384
00:20:52.180 --> 00:20:55.300
machine keys. Yeah, well, but
this vendor is going to

385
00:20:55.300 --> 00:20:57.850
integrate with other companies. Does
that mean that suddenly everyone

386
00:20:57.880 --> 00:21:01.990
who wants to use this
vendors, integration methodology should use

387
00:21:01.990 --> 00:21:04.420
his machine key. Right? So
how do we fix it?

388
00:21:04.420 --> 00:21:06.370
Well, we tried turning off
few state, but of course,

389
00:21:06.370 --> 00:21:07.840
you know, you can only
turn it off so much

390
00:21:07.840 --> 00:21:09.880
and there's always one or
two small bits of you

391
00:21:09.880 --> 00:21:12.370
state. You can't really turn
it off. So we ended

392
00:21:12.370 --> 00:21:15.100
up adding a little JavaScript
that would actually blow away

393
00:21:15.100 --> 00:21:18.640
the view state when this
form got submitted. So then

394
00:21:18.640 --> 00:21:20.530
no view state was sent
over to the other machine.

395
00:21:20.680 --> 00:21:22.840
So you're mucking with it.
Yeah, we were hacking it,

396
00:21:22.870 --> 00:21:25.180
but that was the reasonable
thing to do. Other, other

397
00:21:25.180 --> 00:21:28.570
than making this page that
was sourcing this, this form,

398
00:21:28.750 --> 00:21:32.140
not a, a, an asp.net
forum. Scott, I want to

399
00:21:32.140 --> 00:21:34.630
take a minute here to
remind the listeners that Hansel

400
00:21:34.630 --> 00:21:37.390
minutes would not be possible
without the generous support of

401
00:21:37.390 --> 00:21:41.140
our sponsors. And one of
those sponsors is automated QA.

402
00:21:41.170 --> 00:21:44.260
They make a great product
called test complete, which is

403
00:21:44.260 --> 00:21:47.680
a testing tool that covers
windows apps, web apps, dot

404
00:21:47.680 --> 00:21:50.590
net framework apps, and Java
apps. It's, it's a complete

405
00:21:50.590 --> 00:21:54.130
solution. And we'd really like
everybody right now to go

406
00:21:54.130 --> 00:21:59.230
to automated qa.com checkout test
complete and tell them thanks

407
00:21:59.230 --> 00:22:14.720
for supporting Hansel minutes. Is
there any way to know,

408
00:22:14.720 --> 00:22:16.200
I don't know what the
answer to this is, but

409
00:22:16.200 --> 00:22:19.110
is there any way you
can think of to make

410
00:22:19.140 --> 00:22:22.740
the whole view state thing
work better if you attack

411
00:22:22.740 --> 00:22:26.100
the problem at a lower
level, perhaps? Well, that's a

412
00:22:26.100 --> 00:22:28.290
very good question. The thing
is that the information has

413
00:22:28.290 --> 00:22:31.080
to be kind of along
with the page. It is

414
00:22:31.080 --> 00:22:33.510
the state of the view
for that particular page. It's

415
00:22:33.510 --> 00:22:36.540
really the HTTP spec. That's
the cause of all this

416
00:22:36.540 --> 00:22:38.820
problem, right? It could put
all that stuff in a

417
00:22:38.820 --> 00:22:42.540
header, right? A cookie wouldn't
be appropriate because cookies are

418
00:22:42.540 --> 00:22:44.400
not on a per page
basis. They're on a per

419
00:22:44.400 --> 00:22:47.640
domain or per virtual directorate
basis. And you couldn't just

420
00:22:47.640 --> 00:22:51.420
like, you couldn't just ask
the world to change. HDDP.

421
00:22:51.420 --> 00:22:53.640
I mean, this is, we're
talking about a change, a

422
00:22:53.640 --> 00:22:57.480
fundamental change to the protocol
or Kenya. Well, I think

423
00:22:57.480 --> 00:22:58.980
it's too late. I mean,
there will be a new

424
00:22:58.980 --> 00:23:00.660
version of HTP just like
there will be a new

425
00:23:00.660 --> 00:23:03.330
version of IP, right. IPV
six. Right. But it won't

426
00:23:03.330 --> 00:23:08.160
be backward compatible necessarily. And
there will always be layers

427
00:23:08.160 --> 00:23:10.680
of <inaudible> that we just
can't do anything about it.

428
00:23:10.680 --> 00:23:13.500
I mean, HDP is great.
It just it's stainless. It

429
00:23:13.500 --> 00:23:16.560
was meant to push pages
around. So physicists could look

430
00:23:16.560 --> 00:23:20.730
at information. Exactly. And it's
interesting, because years ago we

431
00:23:20.730 --> 00:23:23.520
were all using 32 70.
Right. Right. For those who

432
00:23:23.520 --> 00:23:25.830
don't know, 30 to 70,
it's basically like bulletin boards,

433
00:23:25.830 --> 00:23:29.010
you would log in and
you'd get control code sent

434
00:23:29.010 --> 00:23:31.140
to the screen. And basically
the screen was sent to

435
00:23:31.140 --> 00:23:34.380
you a poor man's X
windows. Basically. It was like

436
00:23:34.380 --> 00:23:37.380
logging into a bulletin board
system, basic mainframe kind of

437
00:23:37.590 --> 00:23:41.250
right. And that basically remoted
the UI, but the client

438
00:23:41.250 --> 00:23:43.920
didn't do any work. So
then in the eighties and

439
00:23:43.920 --> 00:23:47.150
nineties, we switched over to
this client server thing where

440
00:23:47.150 --> 00:23:50.870
we had VB <inaudible> and
you know, the Dan Appleman

441
00:23:50.870 --> 00:23:53.270
years when we had grids
and such, and we would

442
00:23:53.330 --> 00:23:56.500
transmit only data from the
SQL servers. And yeah. And

443
00:23:56.500 --> 00:23:59.200
Appleman would take offense to
you saying his years are

444
00:23:59.200 --> 00:24:02.290
over. Oh, no, I don't
mean to say is here's

445
00:24:02.290 --> 00:24:05.350
Rover. I do. I met
Dan Appleman at a, at

446
00:24:05.350 --> 00:24:06.850
a tech ed and I
took him to lunch and

447
00:24:06.850 --> 00:24:09.670
I just worshiped the ground.
He walks on The golden

448
00:24:09.670 --> 00:24:12.580
years of Dan Appleman. But
I mean, that's like saying

449
00:24:12.610 --> 00:24:15.310
it's over for Jerry Lewis, right.
Jerry Lewis. Isn't dead. Is he?

450
00:24:16.480 --> 00:24:18.880
I know what to tell
you the truth. I'm embarrassed

451
00:24:19.270 --> 00:24:22.240
to say. I don't know.
Well, assuming that Jerry Lewis isn't

452
00:24:22.240 --> 00:24:25.060
dead. I don't think so.
Dan Appleman was a, what

453
00:24:25.060 --> 00:24:27.190
was a legend and will
be a legend once again.

454
00:24:27.340 --> 00:24:30.760
Yeah. Anyway, so we went
into this world where we're

455
00:24:30.760 --> 00:24:33.460
moving data from place to
place. And then we went

456
00:24:33.460 --> 00:24:35.800
into HDDP and folks thought
that it was a step

457
00:24:35.800 --> 00:24:38.770
forward, but it's not now
we're just pushing user interface

458
00:24:38.770 --> 00:24:42.100
around again. Right. Except the
user of interfaces, angle brackets,

459
00:24:42.430 --> 00:24:46.630
and Ajax is kind of
the redheaded stepchild of, of

460
00:24:46.630 --> 00:24:49.690
HTTP where it's like, well,
we can't quite get what

461
00:24:49.690 --> 00:24:52.000
we want and we don't
quite have a fat client,

462
00:24:52.000 --> 00:24:54.400
but we have kind of
a chubby client. And, you

463
00:24:54.400 --> 00:24:57.430
know, do you really feel
that your, a penny and

464
00:24:57.430 --> 00:25:00.560
four is working hard right
now? Yeah, no, it's, it's,

465
00:25:00.710 --> 00:25:06.010
it's absolutely hanging out and
people hate asp.net and post

466
00:25:06.010 --> 00:25:09.790
backs and, and Microsoft for
that matter because they don't

467
00:25:09.790 --> 00:25:12.490
understand what the intent was.
What would have been a

468
00:25:12.490 --> 00:25:16.660
better way to build a
state machine, to him, to

469
00:25:16.660 --> 00:25:19.990
give the, the VB developers
of the day, the feeling

470
00:25:20.020 --> 00:25:23.500
of inventing, how do you
do a text change event

471
00:25:23.920 --> 00:25:26.410
over a stateless protocol? It
seems to be the best

472
00:25:26.530 --> 00:25:29.860
implementation you can come up
with them. Other than, as

473
00:25:29.860 --> 00:25:34.690
I mentioned before, you know,
actually changing HDDP, you know,

474
00:25:34.780 --> 00:25:36.820
at attacking, you can either
attack it at a lower

475
00:25:36.820 --> 00:25:39.850
level, which is more difficult
and has its own problems

476
00:25:39.850 --> 00:25:42.970
or you bolt on exactly.
Cause that's what we've done.

477
00:25:42.970 --> 00:25:46.030
We bolted on. Now that
said there are some hacky

478
00:25:46.030 --> 00:25:48.790
and interesting ways that you
can make view state work

479
00:25:48.790 --> 00:25:53.290
for you. David yak, and
a number of MVPs myself

480
00:25:53.290 --> 00:25:56.200
included have got a book
coming out that will be

481
00:25:56.200 --> 00:26:02.800
available@techedcalledasp.net 2.0 MVP hacks. And
this book has a section

482
00:26:02.800 --> 00:26:05.440
on screwing around with view
state, basically a chapter on

483
00:26:05.440 --> 00:26:08.140
how to mess with view
state. And right now view

484
00:26:08.140 --> 00:26:10.450
state of course comes along
with the page, but there's

485
00:26:10.450 --> 00:26:14.110
lots of tools and things
that you could use to

486
00:26:15.040 --> 00:26:18.280
hide the view state elsewhere.
You can search for this

487
00:26:18.280 --> 00:26:20.830
on Google. You can find
places where people store view

488
00:26:20.830 --> 00:26:23.590
state in the session object.
Yeah. I've started that database.

489
00:26:23.590 --> 00:26:25.540
You've done that kind of
start to files. Yep. Put

490
00:26:25.540 --> 00:26:29.620
in files. That book is
available@shrinks.com slash C I K.

491
00:26:30.310 --> 00:26:33.490
That'll be also out at
tech ed. David Jack will

492
00:26:33.490 --> 00:26:35.200
be there. He's just a
new, I'm a new RD

493
00:26:35.200 --> 00:26:39.070
now, new regional director for
Microsoft. Congratulations to David. And

494
00:26:39.610 --> 00:26:44.010
just the fact that people
have taken time to hack

495
00:26:44.010 --> 00:26:47.460
it and not completely give
up on it shows how

496
00:26:47.460 --> 00:26:49.380
kind of fundamental to what
we win. That it is

497
00:26:49.380 --> 00:26:51.960
to the entire framework. It
is needed to make a

498
00:26:51.960 --> 00:26:57.070
venting work cleanly. Excellent. Now,
if you abandon the entire

499
00:26:57.070 --> 00:26:58.920
eventing model and asp.net, sure.
You can get away with

500
00:26:58.920 --> 00:27:02.780
that few state. Okay. Hey,
switching gears for a minute.

501
00:27:02.780 --> 00:27:07.670
What is fusion? Ah, fusion
is the thing that resolves

502
00:27:08.120 --> 00:27:12.650
assemblies. When you have, when
you say a dynamically load,

503
00:27:12.650 --> 00:27:16.010
something, if you've ever done
like assembly dot load, or

504
00:27:16.010 --> 00:27:18.770
if you, for the very
first time used the reference

505
00:27:18.770 --> 00:27:22.070
and.net is going to load
a library, assembly fusion is

506
00:27:22.070 --> 00:27:25.280
the thing that looks around
for that information, right? Even

507
00:27:25.280 --> 00:27:27.860
if you have a.net exe,
when you load the exe,

508
00:27:27.860 --> 00:27:30.440
the first thing that loads
up is native code that

509
00:27:30.440 --> 00:27:33.440
loads the CLR and all
that stuff. Once the dotnet

510
00:27:33.440 --> 00:27:36.230
CLR is loaded. Once the
native code has brought the

511
00:27:36.230 --> 00:27:41.540
CLR locally, all references to
assemblies are handled by fusion

512
00:27:42.230 --> 00:27:44.720
and few. And I think
if you go into the

513
00:27:44.720 --> 00:27:46.940
windows directory, which I'll do
right now, and I'll just

514
00:27:46.940 --> 00:27:51.350
go into windows and I'll
look into microsoft.net and I'll

515
00:27:51.350 --> 00:27:54.530
go into the framework directory
and I'll just search for

516
00:27:54.530 --> 00:27:58.880
F U S slash S.
So DIR F U S

517
00:27:58.880 --> 00:28:01.760
start at star slash S
I see fusion dot DLL.

518
00:28:02.210 --> 00:28:05.060
This, this DLL gets loaded
up into memory is responsible

519
00:28:05.060 --> 00:28:10.220
for all these different resolutions.
This is we've resolved. Libraries.

520
00:28:10.220 --> 00:28:13.190
Is this native or managed?
This is well fusion itself.

521
00:28:13.190 --> 00:28:15.560
I don't know. That's a
very good question. I know

522
00:28:15.560 --> 00:28:17.360
it was, I was largely
written by a woman named

523
00:28:17.360 --> 00:28:21.680
Suzanne cook, I believe. And,
but that's that's, as far

524
00:28:21.680 --> 00:28:23.840
as I know about its
history, Oh, we'll find out.

525
00:28:23.840 --> 00:28:26.930
We'll tell you next week.
Okay. So when you load

526
00:28:26.930 --> 00:28:29.240
an assembly, right. You know
how the assembly loader works,

527
00:28:29.240 --> 00:28:31.520
it looks in the current
directory, it looks in the

528
00:28:31.520 --> 00:28:35.060
GAC and there's all these
rules around. What do you

529
00:28:35.060 --> 00:28:38.120
want versus what are you
going to get? Right? So

530
00:28:38.120 --> 00:28:43.070
your, your application could request
version one, but you could

531
00:28:43.070 --> 00:28:46.100
have code in the app
dot config file that says,

532
00:28:46.400 --> 00:28:48.320
no, no, you're not going
to get version one. You're

533
00:28:48.330 --> 00:28:52.310
going to get version one,
one, right? Redirection, exactly binding

534
00:28:52.310 --> 00:28:57.140
redirection. You can use a
publisher policy. Peter Blom uses

535
00:28:57.140 --> 00:28:59.390
this very wisely when he
releases new versions of his

536
00:28:59.390 --> 00:29:01.880
tools, such that he adds
them to the GAC and

537
00:29:01.880 --> 00:29:05.840
includes publisher policy to indicate
that existing applications that were

538
00:29:05.840 --> 00:29:09.320
compiled against one version will
in fact, get the new

539
00:29:09.320 --> 00:29:12.170
bug fixed version and they
don't have to recompile right

540
00:29:13.250 --> 00:29:16.730
now. The fusion loader can
be very confusing because oftentimes

541
00:29:16.730 --> 00:29:18.830
when you're trying to do
any kind of dynamic loading,

542
00:29:18.830 --> 00:29:20.540
when you're trying to ask
the system to give you

543
00:29:20.540 --> 00:29:23.420
a DLL and you don't
get it, it can be

544
00:29:23.420 --> 00:29:26.120
very, very frustrating. It can
be very confusing, cause there's

545
00:29:26.120 --> 00:29:29.030
so many things that could
go wrong. And there's a

546
00:29:29.030 --> 00:29:33.470
really great workshop that Richard Grimes
put up@shrinkstir.com slash C H

547
00:29:33.470 --> 00:29:39.800
U absolutely phenomenal explanation of
how the fusion system works.

548
00:29:40.490 --> 00:29:43.750
And it's, step-by-step about the
different locations that dotnet looks

549
00:29:43.750 --> 00:29:46.840
for assemblies tools that you
can use to kind of

550
00:29:46.840 --> 00:29:50.620
resolve some of these problems.
Particularly one that comes with

551
00:29:50.650 --> 00:29:54.190
a.net called the fusion log
viewer, F U S log

552
00:29:54.220 --> 00:29:57.220
VW. You've got this on
your machine already. And you

553
00:29:57.220 --> 00:29:59.800
can search for enabling fusion
on Google. And there's just

554
00:29:59.800 --> 00:30:02.350
a registry key that you
set up. I usually just

555
00:30:02.350 --> 00:30:05.200
keep this on all the
time. And this is a

556
00:30:05.200 --> 00:30:09.040
tool that will automatically dump
out log files for all

557
00:30:09.340 --> 00:30:12.430
assembly loads that fail on
your, on your system. Wow,

558
00:30:12.430 --> 00:30:14.980
this is deep. This is
like a book online. This

559
00:30:14.980 --> 00:30:18.190
guy is absolutely brilliant. And
there was a time, a

560
00:30:18.190 --> 00:30:23.440
couple of couple of months
ago where he put up

561
00:30:23.440 --> 00:30:25.300
a thing at the top
saying it was going away,

562
00:30:26.440 --> 00:30:28.840
literally that it was disappearing.
And that Mike, you know,

563
00:30:28.840 --> 00:30:31.270
I wasn't clear whether Microsoft
was shutting him down and

564
00:30:31.600 --> 00:30:33.550
I just went nuts and
started emailing people. I knew

565
00:30:33.550 --> 00:30:35.980
at Microsoft, we gotta keep
this guy up. So take

566
00:30:35.980 --> 00:30:38.260
a look at his stuff,
scroll down to the very

567
00:30:38.890 --> 00:30:41.800
bottom. And there's a section
on PayPal. This is a

568
00:30:41.800 --> 00:30:43.600
book. If it was published
as a book, you pay

569
00:30:43.600 --> 00:30:45.940
50 bucks for it. And
this is the kind of

570
00:30:45.940 --> 00:30:48.010
thing that you'd take a
two week seminar on, right?

571
00:30:48.640 --> 00:30:50.410
The amount of effort this
guy has put into this

572
00:30:50.410 --> 00:30:54.130
is unreal. I have not
found anywhere, even in Don

573
00:30:54.130 --> 00:30:58.750
boxers books or Jeffrey Richter's
books, a better explanation of

574
00:30:58.750 --> 00:31:01.990
how fusion works than this
place. So he's got my

575
00:31:01.990 --> 00:31:06.100
50 bucks. Yeah, absolutely brilliant.
I wish there was a

576
00:31:06.100 --> 00:31:08.110
way to download it, but
if people did, they would

577
00:31:08.110 --> 00:31:10.390
go and they they'd steal
it. He's even got it.

578
00:31:10.390 --> 00:31:15.730
Completely updated for version two
of.net. And it explains exactly

579
00:31:15.730 --> 00:31:18.910
how fusion works. Now, it's
one of those fusions. One

580
00:31:18.910 --> 00:31:20.740
of those things where if
you don't have a problem

581
00:31:20.740 --> 00:31:24.340
with it, thank yourself. Because
we always say that.net, a

582
00:31:24.340 --> 00:31:28.360
hides, DLL, hell, but there's
another hell it's called assembly.

583
00:31:28.360 --> 00:31:32.470
Hell yeah. right.net. Doesn't hide
DLL. Hell it takes it

584
00:31:32.470 --> 00:31:35.050
off the backs of the
user and puts it on

585
00:31:35.050 --> 00:31:41.320
the back of the developer.
Being an effective debugger within.net

586
00:31:41.920 --> 00:31:45.430
means understanding fusion. If you're
doing any kind of dynamic

587
00:31:45.430 --> 00:31:49.180
binding of stuff, which actually
gets me into another thing

588
00:31:49.180 --> 00:31:52.780
about really dynamic things that
happen within.net, which is like

589
00:31:52.780 --> 00:31:56.830
debugging XML. Serializers if you
use the XML sterilizer before,

590
00:31:56.830 --> 00:32:00.640
right? Sure. Works absolutely phenomenally
until it completely doesn't work

591
00:32:00.640 --> 00:32:04.720
at all. Right. And there's
another one of those black

592
00:32:04.720 --> 00:32:07.090
box things. It is, it
is. Cause what's it doing?

593
00:32:07.090 --> 00:32:11.200
It's looking at your object,
gleaning, how it's going to

594
00:32:11.530 --> 00:32:14.170
serialize it, taking a good
guess and getting it right.

595
00:32:14.200 --> 00:32:17.800
99% of the time until
it gets entirely wrong. A

596
00:32:17.800 --> 00:32:21.280
really, really interesting thing to
try is debugging into an

597
00:32:21.280 --> 00:32:25.690
XML serializer because when you
say XML, serializer equals new

598
00:32:25.690 --> 00:32:29.920
XML, serializer, X dot serialize,
a lot of stuff happens.

599
00:32:29.920 --> 00:32:32.620
Basically a miracle happens and
then a whole pile of

600
00:32:32.620 --> 00:32:35.320
code gets generated. They reflect
over your object and they

601
00:32:35.320 --> 00:32:39.980
generate code. You can see
that code by making in

602
00:32:39.980 --> 00:32:43.100
your app config file, right?
And your, your application dot

603
00:32:43.100 --> 00:32:48.260
exe dot config, adding a
diagnostic switch called XML, servitization

604
00:32:48.260 --> 00:32:51.530
dot compilation and setting its
value to some value. That's

605
00:32:51.530 --> 00:32:54.740
not zero. I've got this
up on my blog. This

606
00:32:54.740 --> 00:32:59.360
is an older post at
shrinks.com/c H X. You're really

607
00:32:59.360 --> 00:33:01.160
going to try this. I
encourage you to try this

608
00:33:01.160 --> 00:33:05.390
first. You set this up,
you run your application. I

609
00:33:05.390 --> 00:33:08.600
gave a very trivial example
already done for you. You

610
00:33:08.600 --> 00:33:10.820
compile and you run and
you step up when the

611
00:33:10.820 --> 00:33:13.490
debugger right up to the
line where the serializer is

612
00:33:13.490 --> 00:33:17.060
constructed. Yeah. Step over the
line where they make the

613
00:33:17.060 --> 00:33:20.450
serializer and then go poking
around and documents and settings

614
00:33:20.930 --> 00:33:24.380
deep in the bowels, under
local settings temp, you're going

615
00:33:24.380 --> 00:33:27.200
to see a bunch of
created dot CS files. Even

616
00:33:27.200 --> 00:33:30.950
if you're using VB open
up that file. And you're

617
00:33:30.950 --> 00:33:35.480
going to see Microsoft dot
XML dot serialization dot generated

618
00:33:35.480 --> 00:33:37.880
assembly in a new namespace.
And you're going to see

619
00:33:37.880 --> 00:33:41.450
a whole pile of code
generated specific to your object.

620
00:33:42.140 --> 00:33:44.690
Now here's the cool part.
If you set a break

621
00:33:44.690 --> 00:33:48.440
point in that generated file,
the PDBs are in there

622
00:33:48.440 --> 00:33:51.230
too, right? The programmable debug
databases are in there. So

623
00:33:51.230 --> 00:33:54.740
you can then serialize and
then debugging into the serializer.

624
00:33:55.280 --> 00:33:57.380
And when the serializer is
not working, and this is

625
00:33:57.380 --> 00:34:00.080
another thing, the XML, serializers
a thing that I know

626
00:34:00.080 --> 00:34:02.180
that people get very frustrated
with. They get angry with

627
00:34:02.180 --> 00:34:04.190
it, just like they do
with view state, but you

628
00:34:04.190 --> 00:34:06.620
can see what's going on.
I've been fighting with the

629
00:34:06.620 --> 00:34:09.800
serializer for two years. We
use it a lot at

630
00:34:09.800 --> 00:34:12.890
Kirlian and we struggle with
it. If I couldn't debug

631
00:34:12.890 --> 00:34:15.500
into it, I'd be very
frustrated. But the fact that

632
00:34:15.500 --> 00:34:17.690
I can go in and
say, Oh, I see what

633
00:34:17.690 --> 00:34:20.180
the serializers getting wrong. And
then I could come up

634
00:34:20.180 --> 00:34:22.640
with ways to give it
what it wants. It's not

635
00:34:22.640 --> 00:34:25.400
perfect, but it's not a
black box. It's kind of

636
00:34:25.400 --> 00:34:30.130
a gray box. Wow. That's,
that's incredible. You know, I

637
00:34:30.130 --> 00:34:34.060
can always count on you
to find visibility tools, tools

638
00:34:34.060 --> 00:34:38.140
that help you see into
those black boxes. And I

639
00:34:38.410 --> 00:34:41.880
Like that. That's really handsome,
Wants visibility tools. That's that's

640
00:34:41.980 --> 00:34:45.070
true. I mean, you introduced
me to file Mon basically,

641
00:34:45.190 --> 00:34:47.500
which is the file monitor.
If people don't know what

642
00:34:47.500 --> 00:34:51.820
that is, anytime you an
application hangs, this is, I

643
00:34:51.820 --> 00:34:54.700
was just using this right.
And application hangs. You don't

644
00:34:54.700 --> 00:34:57.850
know why it's accessing the
disc. You know, you want

645
00:34:57.850 --> 00:35:00.760
to see what it's doing.
So Then it's doing the

646
00:35:00.760 --> 00:35:02.890
lights or flights or flash
and it must be You

647
00:35:02.890 --> 00:35:05.440
run file Mon. And it
basically is like a tracer

648
00:35:05.440 --> 00:35:07.480
for all file activity. And
it tells you what apps

649
00:35:07.480 --> 00:35:10.150
are loading, what files. And
that way you can sort

650
00:35:10.150 --> 00:35:12.940
of see what it's doing.
Yeah. Regimen does the same

651
00:35:12.940 --> 00:35:15.880
thing for the registry. Yeah.
I was struggling with some

652
00:35:15.880 --> 00:35:19.180
stuff with a stupid little
shareware application. I just could

653
00:35:19.180 --> 00:35:21.400
not figure out what they
must've been looking for something

654
00:35:21.400 --> 00:35:23.500
and they couldn't find it.
And they would freak out.

655
00:35:23.500 --> 00:35:25.060
And I got to find
out the keys they were

656
00:35:25.060 --> 00:35:28.390
poking around looking for. And
this is the thing for

657
00:35:28.400 --> 00:35:31.390
being a good, I call
it being a good dotnet

658
00:35:31.390 --> 00:35:35.260
citizen. I've got a blog
about this at shrinks, your.com/chv.

659
00:35:36.430 --> 00:35:42.060
Your debugging really are about
you understanding what's happening because

660
00:35:42.330 --> 00:35:47.030
we all know that.net is
managed spackle, right? It's it's,

661
00:35:47.030 --> 00:35:51.950
it's spackling over Were all
of the, And when 32,

662
00:35:52.130 --> 00:35:54.290
I mean, 32 was not
fun. And dotnet hides that

663
00:35:54.290 --> 00:35:57.140
from us. But somebody has
got a call load library.

664
00:35:58.220 --> 00:36:00.050
When you, when you say,
you know, dim X as

665
00:36:00.050 --> 00:36:02.450
new objects, somebody has got
to call them low library

666
00:36:02.870 --> 00:36:06.410
and forgetting that that's the
case is a mistake. I

667
00:36:06.410 --> 00:36:07.910
think a lot of people
make now you don't necessarily

668
00:36:07.910 --> 00:36:09.680
all have to be a
plumber and you don't have

669
00:36:09.680 --> 00:36:11.060
to know how to do
that stuff. I know that

670
00:36:11.390 --> 00:36:14.330
somebody has got to call,
move a X comma, you

671
00:36:14.330 --> 00:36:18.170
know, CX in the assembler.
That's a little farther down

672
00:36:18.170 --> 00:36:20.690
than I want to go.
I'll find someone, but it

673
00:36:20.690 --> 00:36:23.300
is happening. So when people
say, Oh man, it worked

674
00:36:23.300 --> 00:36:26.060
yesterday. It didn't work today.
There is a reason. Yeah.

675
00:36:26.060 --> 00:36:28.070
You just got to go
down a couple levels. Yeah,

676
00:36:28.130 --> 00:36:30.710
Exactly. And reformatting or paving
your machine. Even though I

677
00:36:30.710 --> 00:36:33.380
did it last month, when
you don't know what's wrong,

678
00:36:33.740 --> 00:36:35.540
you know, if you get
a spot in your carpet,

679
00:36:35.570 --> 00:36:37.790
you fixed the spot, you
don't lay new carpet. Right.

680
00:36:37.940 --> 00:36:39.950
So it's a pretty decent
analogy. So if you really

681
00:36:39.950 --> 00:36:43.340
understand your environment, you can
understand what your program's dependencies

682
00:36:43.340 --> 00:36:47.630
are, you know, and debug
that assert it's something. I

683
00:36:47.630 --> 00:36:49.670
don't think enough people yet.
Yeah. That's a good point.

684
00:36:49.700 --> 00:36:53.660
Debug dot assert to actually
stop the, stop the program

685
00:36:53.840 --> 00:36:57.470
and say, Hey programmer, you
got a problem here. When

686
00:36:57.470 --> 00:36:59.780
people would try to write
overly defensive code and they'll

687
00:36:59.780 --> 00:37:01.520
have all sorts of, if
this is now that that

688
00:37:01.520 --> 00:37:04.310
is no, but they don't
ever have anything. They don't

689
00:37:04.310 --> 00:37:07.190
ever say what they're going
to do about it. They'll

690
00:37:07.190 --> 00:37:09.160
just say, Oh crap, this
is no, what are you

691
00:37:09.170 --> 00:37:11.450
gonna do while you continue
running? And you freak out.

692
00:37:11.750 --> 00:37:13.880
But if you get into
a situation where something's no,

693
00:37:13.880 --> 00:37:16.970
and there's no chance in
hell that your system should

694
00:37:16.970 --> 00:37:21.590
be returning, not at that
point. Yeah. Express that, express

695
00:37:21.590 --> 00:37:22.880
that in the code and
don't express it in the

696
00:37:22.880 --> 00:37:26.120
code by popping up a
message, box your shirt. You

697
00:37:26.120 --> 00:37:30.080
know, if your system has
three States that it could

698
00:37:30.080 --> 00:37:32.450
be in, and one of
the States is completely invalid,

699
00:37:32.900 --> 00:37:36.320
assert that express that anything
that your system should not

700
00:37:36.320 --> 00:37:38.600
be doing, you need to
express and debug. That assert

701
00:37:38.600 --> 00:37:42.020
is a really great way
to All right. Let's move

702
00:37:42.020 --> 00:37:48.170
on to yet. Y a
T T. So everything at

703
00:37:48.170 --> 00:37:51.980
pocket pocket, souq.com is Brian.
This is Simon fell. And

704
00:37:51.980 --> 00:37:55.700
yet is yet another trace
tool. You probably use trace

705
00:37:55.700 --> 00:37:59.090
tools like Ethereum. There's lots
of tools or windows network

706
00:37:59.090 --> 00:38:02.570
monitor, but this is kind
of like red Mon or

707
00:38:02.570 --> 00:38:06.110
file Mon for the network.
Okay. That is yet another

708
00:38:06.110 --> 00:38:07.880
trace tool. He's also got
a number of other tools

709
00:38:07.880 --> 00:38:11.210
out there like proxy trace
and TCP trace. And these

710
00:38:11.210 --> 00:38:13.070
are tools that let you
see the traffic that are

711
00:38:13.070 --> 00:38:16.010
going to, and from your
system. I like yet because

712
00:38:16.010 --> 00:38:19.280
it's nice and simple. It's,
it's very basic gooey. It

713
00:38:19.280 --> 00:38:22.490
shows to and fro, and
you can say only show

714
00:38:22.490 --> 00:38:25.250
me things on this network
card, going to that host.

715
00:38:26.090 --> 00:38:29.030
So recently when I was
building a, a baby webcam,

716
00:38:29.240 --> 00:38:32.600
so I could see benzo
from work, I wanted to

717
00:38:32.990 --> 00:38:37.090
debug into this inexpensive that
I bought at Fry's electronics.

718
00:38:37.750 --> 00:38:39.520
I'm going to be writing
an article about this soon,

719
00:38:39.850 --> 00:38:42.730
and I've just fired up
yet. And what I thought

720
00:38:42.730 --> 00:38:45.640
was going to be a
video stream from this cheapo,

721
00:38:46.210 --> 00:38:51.280
a webcam in fact, turned
out to be an HTTP

722
00:38:51.280 --> 00:38:54.370
stream that would never end,
but just went JPEG, JPEG,

723
00:38:54.400 --> 00:38:59.020
JPEG, JPEG, JPEG, it's called
M JPEG. It's not MPEG.

724
00:38:59.020 --> 00:39:01.360
It's M JPEG, which is
basically all throw you JP

725
00:39:01.380 --> 00:39:02.910
Eggs, as fast as you
can draw sort of a

726
00:39:02.910 --> 00:39:06.480
brute force method of video.
Yeah. Brute force. But this

727
00:39:06.480 --> 00:39:07.890
is the thing I was
thinking, why is this, why

728
00:39:07.890 --> 00:39:10.380
are they doing this? If
they had to do a

729
00:39:10.860 --> 00:39:14.760
video codec like pressure decompressor,
they need to pay somebody.

730
00:39:15.090 --> 00:39:17.370
Yeah. But I bet you
it's free to throw JPEGs

731
00:39:17.370 --> 00:39:21.330
around. Well, that makes sense.
Yeah, it totally does. Yeah.

732
00:39:21.630 --> 00:39:23.820
This is what I mean
by visibility tools, you know,

733
00:39:23.820 --> 00:39:27.360
knowing what's going on under
the hood helps you solve

734
00:39:27.360 --> 00:39:32.160
the problem faster. Totally, totally.
Recently, a guy came to

735
00:39:32.160 --> 00:39:36.330
me here at Karelian with
a really weird problem. I

736
00:39:36.330 --> 00:39:38.010
love it. When people come
to me with weird problems

737
00:39:38.430 --> 00:39:41.370
and he, he had installed
a web service on his

738
00:39:41.370 --> 00:39:44.970
machine. Everything has worked fine
on six different machines, but

739
00:39:44.970 --> 00:39:48.360
on this machine, it wasn't
happening. He decided to browse

740
00:39:48.360 --> 00:39:51.270
to the ASM X file
and he got four Oh

741
00:39:51.270 --> 00:39:55.170
four and he looked in
the directory and the files

742
00:39:55.170 --> 00:39:57.120
were there and he looked
and I S and the

743
00:39:57.120 --> 00:39:59.520
files were there and it
just wasn't, it wasn't happening.

744
00:39:59.880 --> 00:40:02.280
So it's like, well, who's
returning the four Oh four.

745
00:40:02.280 --> 00:40:05.370
We kind of asked ourselves.
It's probably, I S probably

746
00:40:05.370 --> 00:40:07.710
not asp.net. That was saying
four Oh four, because we

747
00:40:07.710 --> 00:40:10.380
knew the file was there.
And it wasn't a 500.

748
00:40:10.380 --> 00:40:12.960
It wasn't saying the DLL
is not compiling. Or the

749
00:40:13.440 --> 00:40:17.310
code's boogered. It said four
Oh four, not found, not

750
00:40:17.310 --> 00:40:19.710
found, something's not found. Right.
So there's your first tip,

751
00:40:19.710 --> 00:40:21.540
right? And this is the
thing. When people have problems

752
00:40:21.540 --> 00:40:24.540
like this as to say
is what is the error

753
00:40:24.540 --> 00:40:27.180
message I'm giving me provided
providing me value is the

754
00:40:27.180 --> 00:40:30.210
error message I'm being given,
providing me value four Oh

755
00:40:30.210 --> 00:40:34.020
four is saying, I'm not
finding something. So then understanding

756
00:40:34.020 --> 00:40:37.620
how asp.net plugs into IAS
was a first step. So

757
00:40:37.620 --> 00:40:39.870
we went into the IIS
manager, we right, clicked on

758
00:40:39.870 --> 00:40:42.150
the folder. We hit properties
and went to configuration and

759
00:40:42.150 --> 00:40:46.920
notice that the ASM X
extension was not mapped. So

760
00:40:46.950 --> 00:40:50.760
I asked, didn't know how
to handle ASMs. This is

761
00:40:50.760 --> 00:40:54.550
a real common thing. If
you install IIS after, after

762
00:40:54.570 --> 00:40:58.200
they install. Exactly. So we
go out and we type

763
00:40:58.200 --> 00:41:04.980
in ASP, net, <inaudible> installs
asp.net. So then I'm thinking,

764
00:41:05.010 --> 00:41:06.840
Oh, well, I've done this
10 times before I'm done.

765
00:41:06.840 --> 00:41:09.030
Right. And you're thinking the
same thing. I am. We

766
00:41:09.030 --> 00:41:12.630
visited four Oh four. The
next thing I would do

767
00:41:12.630 --> 00:41:15.240
is check the version. Okay.
So we go in and

768
00:41:15.240 --> 00:41:18.600
we check the version. It's
version one, one, that's the

769
00:41:18.600 --> 00:41:20.670
right version. We don't have
to Oh, on this machine.

770
00:41:20.790 --> 00:41:23.430
Okay. That's cool. They're mapped.
The, the extensions are mapped

771
00:41:23.430 --> 00:41:27.090
correctly. Four Oh four, then
I'm thinking, well, and this

772
00:41:27.090 --> 00:41:29.400
is where I wasn't thinking
clearly, maybe the ASP net

773
00:41:29.400 --> 00:41:32.910
user has no access. So
I started assigning access to

774
00:41:32.910 --> 00:41:36.080
the net user in this
case network service, because it

775
00:41:36.080 --> 00:41:39.320
was windows 2003. Okay. So
then I'm thinking, wait, wait

776
00:41:39.380 --> 00:41:41.030
a second. That would have
been a four Oh three.

777
00:41:41.660 --> 00:41:44.540
That would have been a,
not a forbidden. Right. That's

778
00:41:44.540 --> 00:41:46.340
right. And then I said,
well, wait a second. I

779
00:41:46.340 --> 00:41:49.010
didn't just assign access to
the ASP net user, because

780
00:41:49.010 --> 00:41:51.950
that would be on windows,
XP pro I assigned access

781
00:41:51.950 --> 00:41:55.100
to the network service user.
Then I was reminded I'm

782
00:41:55.100 --> 00:41:58.130
on a windows 2003 machine.
And what does 2003 do

783
00:41:58.130 --> 00:42:02.090
with asp.net? Yeah. There's another
account for that. Isn't there.

784
00:42:02.420 --> 00:42:06.200
Yeah. It's the network service
network. Right. But it was

785
00:42:06.200 --> 00:42:12.260
that windows 2003 disables, asp.net
by the flow. Sure. Under

786
00:42:12.260 --> 00:42:16.280
their extension stuff. And I
asked by they disabled everything

787
00:42:16.280 --> 00:42:19.880
by default ASP and ASP
net. They lock it down.

788
00:42:19.880 --> 00:42:21.830
So I had to go
into the extensions and explicitly

789
00:42:21.830 --> 00:42:24.350
allow it, then it worked.
So there were actually two

790
00:42:24.350 --> 00:42:26.810
things wrong and they were
kind of hiding each other,

791
00:42:26.810 --> 00:42:28.460
but you had to kind
of do the root cause

792
00:42:28.460 --> 00:42:31.280
to figure this out. And
it's, it's funny how one

793
00:42:31.280 --> 00:42:33.860
will find themselves, you know,
twiddle a bit, hit F

794
00:42:33.860 --> 00:42:37.190
five twiddle a bit, put
F sure. It's expecting a

795
00:42:37.190 --> 00:42:39.350
different result each time. And
I, I did it in

796
00:42:39.350 --> 00:42:41.660
this case as well. It's
an old story that I've

797
00:42:41.660 --> 00:42:44.000
told many times, but, you
know, we used to be

798
00:42:44.000 --> 00:42:48.020
surgeons back in the days
of, of Dawson, single process

799
00:42:48.380 --> 00:42:52.010
stuff, where we didn't have
multi multitasking going on, you

800
00:42:52.010 --> 00:42:54.260
write some code, you have
control of the machine until

801
00:42:54.260 --> 00:42:58.100
you release it. You know?
And, and now increasingly we,

802
00:42:58.100 --> 00:43:00.770
but with windows and multithreading
and all this stuff, you're

803
00:43:00.770 --> 00:43:04.790
more like a psychologist. You
know, you, you spend some

804
00:43:04.790 --> 00:43:07.370
time with the computer. You
make, you, you have a

805
00:43:07.370 --> 00:43:11.330
conversation, you make some suggestions,
you observe the behavior, you

806
00:43:11.330 --> 00:43:14.990
prescribe some meds, you know,
you, you come back it's

807
00:43:14.990 --> 00:43:18.860
it's you're right. It's an
empirical kind of thing. It

808
00:43:18.860 --> 00:43:21.260
feels like, you know, I
used to say CSI, you

809
00:43:21.260 --> 00:43:24.080
know, dot net. It's, it's,
it's putting all the clues

810
00:43:24.080 --> 00:43:25.940
together and say, you're trying
to tell me something, you

811
00:43:25.940 --> 00:43:29.270
know, it's like cold case.
Yeah. Okay. And on that

812
00:43:29.270 --> 00:43:30.950
note, we have a show.
It's been a little bit

813
00:43:30.950 --> 00:43:33.320
of a long one, but
we, we think the listeners

814
00:43:33.320 --> 00:43:36.890
will appreciate it. And Scott
have a, have a great

815
00:43:37.190 --> 00:43:39.650
week and we'll talk to
the listeners next week on

816
00:43:39.730 --> 00:43:40.160
Hanselman.

