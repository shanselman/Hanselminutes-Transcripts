WEBVTT FILE

1
00:00:00.510 --> 00:00:03.240
Hey friends. I want to
thank our sponsor. Reagan, are

2
00:00:03.240 --> 00:00:05.910
you struggling to replicate the
bugs and performance issues that

3
00:00:05.910 --> 00:00:09.150
your customers are reporting? Plug
Regan into your web and

4
00:00:09.150 --> 00:00:12.780
mobile applications right now, and
diagnose problems in minutes rather

5
00:00:12.780 --> 00:00:16.140
than hours. Kiss goodbye. Having
to dig through log files

6
00:00:16.140 --> 00:00:19.770
and relying on frustrated users
to report issues, make your

7
00:00:19.770 --> 00:00:23.430
software developmental life so much
easier. Using Reagan's error, crash,

8
00:00:23.430 --> 00:00:27.540
and performance monitoring tools. Every
software team can create flawless

9
00:00:27.540 --> 00:00:30.960
software experiences for their customers
with Reagan. Try it free

10
00:00:30.960 --> 00:00:34.590
today. And Ray gun.com. That's
our a Y G U

11
00:00:34.590 --> 00:00:51.440
n.com. <inaudible> Not answered. And
this is another episode of

12
00:00:51.440 --> 00:00:56.000
Hansel minutes. And today I'm
talking Tom Spillman games. There's

13
00:00:56.010 --> 00:00:58.040
one of the leads on
mano game. How are you,

14
00:00:58.040 --> 00:01:01.160
sir? Hey Scott, how are
you doing? I'm pretty thrilled

15
00:01:01.160 --> 00:01:04.970
to be talking to you
because I like playing games

16
00:01:04.970 --> 00:01:07.790
and then discovering after I've
beat it, that it was

17
00:01:07.790 --> 00:01:10.490
written in C sharp.net lean.
It's just, it's kind of

18
00:01:10.490 --> 00:01:13.130
like something that I feel
far away from, which is

19
00:01:13.130 --> 00:01:15.410
games, cause I've never made
one and then something that

20
00:01:15.410 --> 00:01:17.960
I'm very close to, like.net
and open source. And then

21
00:01:17.960 --> 00:01:19.610
I'm like, Oh, I just
played that. And that was

22
00:01:19.610 --> 00:01:21.350
it. That wasn't dot net
and built with mano game.

23
00:01:21.530 --> 00:01:25.850
That's so nice. Yeah. It's
pretty incredible. We're always, really,

24
00:01:26.760 --> 00:01:29.120
it's always really neat for
us to hear about games

25
00:01:29.120 --> 00:01:30.620
that have shipped. It's like,
Oh, that was written in

26
00:01:30.620 --> 00:01:32.360
modern game. Like sometimes we
don't even know what had

27
00:01:32.360 --> 00:01:34.700
happened. Really. They don't have
it yet. You don't have

28
00:01:34.700 --> 00:01:37.250
to phone home and let
you know it's open source.

29
00:01:37.250 --> 00:01:39.350
You know, anybody can do
anything. So it's kind of

30
00:01:39.350 --> 00:01:41.870
a, sometimes we find out
ahead of time. Sometimes we

31
00:01:41.870 --> 00:01:44.540
found out after the fact
and how long has mano

32
00:01:44.540 --> 00:01:46.760
game been around? And what's
the relationship because there was

33
00:01:46.760 --> 00:01:49.010
a thing called a X
and a touch like 10

34
00:01:49.010 --> 00:01:52.580
years ago, right? Yeah, it
was, it was originally called

35
00:01:52.580 --> 00:01:55.550
X and a touch was
written by Jose for us.

36
00:01:55.640 --> 00:01:58.400
And he, he started basically
cause he really liked the

37
00:01:58.400 --> 00:02:00.200
X and API, you know,
the original X and Hey

38
00:02:00.210 --> 00:02:04.130
guys, they wrote really nice
API to do C-sharp games

39
00:02:04.130 --> 00:02:06.170
that, you know, a lot
of people loved at the

40
00:02:06.170 --> 00:02:08.180
time, but it didn't like
it was kinda misunderstood I

41
00:02:08.180 --> 00:02:10.610
think at the time. But
the API was really solid.

42
00:02:10.610 --> 00:02:12.890
It was built off of,
you know, DX 11 and

43
00:02:12.890 --> 00:02:15.140
DX nine concepts. So it
was a really nice API

44
00:02:15.140 --> 00:02:18.800
to use to quickly prototype
games and develop interesting games

45
00:02:18.800 --> 00:02:21.290
from it. And it was
pretty powerful and he liked

46
00:02:21.290 --> 00:02:22.610
it a lot. He was
like, I'd love to have

47
00:02:22.610 --> 00:02:25.220
this on iOS where the
story at the time was

48
00:02:25.220 --> 00:02:28.760
not as good for building
games. So he said, well,

49
00:02:28.790 --> 00:02:31.160
mano is available on iOS.
How can I make an

50
00:02:31.160 --> 00:02:33.410
API that looks like X
and a, but runs on

51
00:02:33.410 --> 00:02:35.960
iOS. And that's how he
started X and a touch.

52
00:02:36.320 --> 00:02:39.500
So he kind of originally
built it from bill rice,

53
00:02:39.500 --> 00:02:42.260
had a tool, a library
called silver Sprite, which was

54
00:02:42.260 --> 00:02:45.620
basically a version of XMA
that ran in, in, in

55
00:02:45.620 --> 00:02:48.650
Silverlight back in the day.
And he took bits of

56
00:02:48.650 --> 00:02:51.170
that and BICS of another
project called mano X and

57
00:02:51.170 --> 00:02:53.390
a at the time, then
he kind of smashed them

58
00:02:53.390 --> 00:02:55.400
together and started working on
it and got a version

59
00:02:55.400 --> 00:02:57.860
that worked on iOS. And
that was the first version

60
00:02:57.860 --> 00:03:00.970
of mano game that was
on iOS back in 2009.

61
00:03:01.570 --> 00:03:03.900
So it's been around for
a while now. Yeah. And

62
00:03:03.900 --> 00:03:08.280
when I look@thegotogithub.com slash motto
game, I'm looking at the

63
00:03:08.280 --> 00:03:11.970
list of supported platforms and
it's not just windows, Linux

64
00:03:11.970 --> 00:03:15.780
and Mac, it's Android, it's
iPad, it's PlayStation four PlayStation,

65
00:03:15.810 --> 00:03:19.800
Vita, Xbox one and two
different formats. And my favorite

66
00:03:19.800 --> 00:03:24.510
console, Nintendo switch as well
as other things. Is it

67
00:03:24.510 --> 00:03:26.370
okay, Hard to add a
platform? Like, is it a

68
00:03:26.370 --> 00:03:29.490
big deal? There are a
lot of abstractions. It depends

69
00:03:29.490 --> 00:03:32.490
on the platform. You know,
the PC ones have always

70
00:03:32.490 --> 00:03:35.130
been easy because they're usually,
you know, it's usually some

71
00:03:35.130 --> 00:03:37.110
form of open GL or
some form of direct X

72
00:03:37.110 --> 00:03:39.720
and we're, we're good to
go kind of thing. Except,

73
00:03:39.720 --> 00:03:41.820
you know, when my Microsoft
throws a wrench in the

74
00:03:41.820 --> 00:03:44.220
works and gives us a
new platform like windows eight

75
00:03:44.220 --> 00:03:47.790
where things were very different,
right? So those are pretty

76
00:03:47.790 --> 00:03:51.060
easy. The phones are usually
pretty straight forward, cause there's

77
00:03:51.240 --> 00:03:53.430
not a lot of new
phones at this point. The

78
00:03:53.430 --> 00:03:55.710
consoles are the ones that
are a little trickier, but

79
00:03:55.890 --> 00:03:58.170
we've kind of developed a
technique over the years to

80
00:03:58.170 --> 00:04:00.270
get them to console that,
you know, through a cross

81
00:04:00.270 --> 00:04:03.960
compiler technology that we built
that actually makes it pretty

82
00:04:03.960 --> 00:04:07.770
easy. Like our first one
was the first console we

83
00:04:07.770 --> 00:04:10.890
got on was PlayStation four
and that took us some

84
00:04:10.890 --> 00:04:12.900
time to get that up
and running. And at the

85
00:04:12.900 --> 00:04:15.240
time we were using a
version of mano on PlayStation

86
00:04:15.240 --> 00:04:17.610
four and then Vieta was
the next one we did,

87
00:04:17.610 --> 00:04:19.920
but mano wasn't available. So
that's where we developed our

88
00:04:19.920 --> 00:04:22.380
cross compiler to get there.
And that took a couple

89
00:04:22.380 --> 00:04:24.630
of years to get that
solid and reliable. But then

90
00:04:24.630 --> 00:04:27.120
after that we brought it
pretty quickly to Xbox one.

91
00:04:27.480 --> 00:04:29.700
And then after that, we
brought it to switch most

92
00:04:29.700 --> 00:04:32.760
recently. And that I think
we, from the day that

93
00:04:32.760 --> 00:04:34.710
we got to switch dev
kit to the day that

94
00:04:35.130 --> 00:04:37.200
we had at first have
some, a game running on

95
00:04:37.200 --> 00:04:39.540
there, it was maybe like
a month and a half

96
00:04:39.540 --> 00:04:42.240
or so. And then ever
since then, you know, Newports

97
00:04:42.240 --> 00:04:44.850
are pretty quick. We've gotten
pretty good at getting it

98
00:04:44.850 --> 00:04:48.390
to new console platforms, mostly
cause our cross compiler technology

99
00:04:49.470 --> 00:04:52.470
Cross compiler technology. When I
think about.net, I think about,

100
00:04:53.340 --> 00:04:56.040
you know, a, a jitter
adjust in time compiler, I

101
00:04:56.040 --> 00:04:59.850
think about a runtime. And
then I always wonder how

102
00:04:59.850 --> 00:05:04.500
would this runtime live or
exist on a small system?

103
00:05:04.860 --> 00:05:07.410
And I understand that with
Xamarin and on iPhones and

104
00:05:07.410 --> 00:05:10.470
stuff, you know, you're doing
basically ahead of time, AOT

105
00:05:10.500 --> 00:05:12.990
not jet, right, is the
same thing, the case on

106
00:05:12.990 --> 00:05:17.070
a PlayStation Yes. In a
way. And the PlayStation for

107
00:05:17.070 --> 00:05:19.410
the current PlayStation four games,
most of them are running,

108
00:05:19.440 --> 00:05:23.220
using mano AOT on, on
the newer platforms. We've moved

109
00:05:23.220 --> 00:05:25.410
over to our cross compiler
where we actually take C-sharp

110
00:05:25.410 --> 00:05:27.900
code. We compile it as
a C sharp assembly. Then

111
00:05:27.900 --> 00:05:29.790
we run it through our
cross compiler works, takes that

112
00:05:29.790 --> 00:05:33.030
C sharp code or a
C sharp L and dumps

113
00:05:33.030 --> 00:05:36.380
out a bunch of C
plus plus code. And then

114
00:05:36.450 --> 00:05:39.870
compile that yeah. Basically actually
like text. Yep. You then

115
00:05:40.260 --> 00:05:44.220
we compile that along with
a custom backend runtime built

116
00:05:44.220 --> 00:05:48.630
from the mano BCL and
our own runtime implementation kind

117
00:05:48.630 --> 00:05:51.330
of focused on game stuff.
So kind of a myths,

118
00:05:51.330 --> 00:05:55.050
all the security layer stuff
that would be in normal

119
00:05:55.320 --> 00:05:59.270
Mo mano runtimes and you
know, our own version of

120
00:05:59.270 --> 00:06:01.910
a garbage collector and a
compile that altogether. And we

121
00:06:01.910 --> 00:06:04.730
have a native assembly that
can basically run on it

122
00:06:04.790 --> 00:06:07.370
on a console and that's
been pretty successful for us.

123
00:06:07.370 --> 00:06:10.040
We mostly went that direction
because at the time it's

124
00:06:10.040 --> 00:06:13.310
amazing how much C-sharp the
ecosystem has changed in the

125
00:06:13.310 --> 00:06:16.070
last five years, we first
started doing that five years

126
00:06:16.070 --> 00:06:19.460
ago, mano was still a
GPL product and it was

127
00:06:19.460 --> 00:06:23.090
still owned by Xamarin. And
if you wanted to use

128
00:06:23.090 --> 00:06:24.770
it on a closed platform,
you had to pay a

129
00:06:24.770 --> 00:06:27.980
licensing fee. And that was
kind of, it was kind

130
00:06:27.980 --> 00:06:29.990
of a problem. A lot
of times when we were

131
00:06:29.990 --> 00:06:32.300
trying to get to new
platforms, it was like, you

132
00:06:32.300 --> 00:06:35.420
know, it became a thing
between Xamarin and the licensing

133
00:06:36.290 --> 00:06:39.140
in the console manufacturer to
figure out a licensing deal.

134
00:06:39.140 --> 00:06:42.470
And that became, you know,
difficult. So one day, you

135
00:06:42.470 --> 00:06:43.850
know, out of the blue,
we were kind of just

136
00:06:43.850 --> 00:06:46.940
like, you know, I, I
think it, what it reminded

137
00:06:46.940 --> 00:06:48.740
me of is that the
year that we did this,

138
00:06:49.040 --> 00:06:51.740
there was a demo of
unreal engine running in a,

139
00:06:51.800 --> 00:06:55.340
in a browser using JavaScript,
you know, that was using

140
00:06:55.340 --> 00:07:00.380
that ASM JS technology. And
it was really impressive. And

141
00:07:00.380 --> 00:07:01.850
I saw that demo and
I was like, you know,

142
00:07:01.850 --> 00:07:05.120
if they can convert cross
compile C, C plus plus

143
00:07:05.150 --> 00:07:07.970
to JavaScript and make it
run fast, I can surely

144
00:07:07.970 --> 00:07:11.300
cross compile C sharp L
down to C plus plus

145
00:07:11.300 --> 00:07:14.000
and make it run fast.
So that's when we started

146
00:07:14.000 --> 00:07:15.380
that project. And, you know,
it took us quite a

147
00:07:15.380 --> 00:07:16.910
few years to get it
to that point. But at

148
00:07:16.910 --> 00:07:19.610
this point, you know, we
have a pretty solid technology

149
00:07:19.610 --> 00:07:24.770
that we can deploy.net applications
or.net games in particular onto

150
00:07:24.770 --> 00:07:29.420
consoles pretty quickly and pretty
reliably, you know, but it

151
00:07:29.420 --> 00:07:31.370
took quite a while to
get there. And it's, it's

152
00:07:31.370 --> 00:07:33.650
that flexibility that's allowed us
to get into more consoles

153
00:07:33.650 --> 00:07:36.620
at this point. Now there
is Microsoft started their own

154
00:07:37.010 --> 00:07:40.100
cross compiler tech. I think
it's called core RT. It's

155
00:07:40.520 --> 00:07:42.650
currently open source and we've
looked at that a couple

156
00:07:42.650 --> 00:07:44.750
of times, but you know,
our is says a few

157
00:07:44.750 --> 00:07:46.340
features that I think were
better for us at the

158
00:07:46.340 --> 00:07:48.530
moment, but this is not
something new, like a unity

159
00:07:48.530 --> 00:07:51.950
does this as well. They
have their, a ILT CPP

160
00:07:52.400 --> 00:07:55.220
technology that they built on
their end. That's how unity

161
00:07:55.220 --> 00:07:57.710
runs on most of the
consoles nowadays. So it's kind

162
00:07:57.710 --> 00:08:00.140
of come into fashion, I
guess, using a cross compiler

163
00:08:00.140 --> 00:08:03.650
to bring a.net to other
platforms, but I'm hoping one

164
00:08:03.650 --> 00:08:06.170
day, you know, dot net
makes all of that all

165
00:08:06.170 --> 00:08:09.680
obsolete, you know, with making
a really core version of.net,

166
00:08:09.680 --> 00:08:12.380
that's fully open source and
it's easy, easily portable to

167
00:08:12.380 --> 00:08:15.730
new platforms, Right? Exactly. Something
that you could go and

168
00:08:15.730 --> 00:08:17.620
call configure and make on.
And it would just work.

169
00:08:17.830 --> 00:08:20.170
Exactly. And it Always been
very different. I mean, mottos

170
00:08:20.170 --> 00:08:21.970
tried to do that. It's
just a mano is a

171
00:08:21.970 --> 00:08:24.730
very complex beast and it's
hard to kind of do

172
00:08:24.730 --> 00:08:26.830
that kind of thing with
it. And you have to

173
00:08:26.830 --> 00:08:29.470
have a lot of knowledge
about the inner workings of

174
00:08:29.470 --> 00:08:31.420
mano and how it builds
in order to make that

175
00:08:31.420 --> 00:08:34.630
successful. And at the time
there was also a licensing

176
00:08:34.630 --> 00:08:37.150
issue. Well, the licensing issue
like went away a couple

177
00:08:37.150 --> 00:08:39.760
of years ago, right? So
at this point, it's really

178
00:08:39.760 --> 00:08:42.820
only a matter of understanding
the build system properly, but

179
00:08:42.820 --> 00:08:44.890
we've kind of stepped with
our cross compiler cause we

180
00:08:44.890 --> 00:08:46.630
kind of get some things
for free and that we

181
00:08:46.630 --> 00:08:49.060
get, we instead of break
point anywhere in the code

182
00:08:49.060 --> 00:08:50.470
and it works, I can
set a break point in

183
00:08:50.470 --> 00:08:53.350
the garbage collector in no,
when the garbage collector is

184
00:08:53.350 --> 00:08:56.370
running and why, or what
allocations having students, some nice

185
00:08:56.370 --> 00:08:59.520
features of doing that. But
it also gave us a

186
00:08:59.520 --> 00:09:03.120
really good idea of like
how much.net brings to you,

187
00:09:03.120 --> 00:09:05.130
like the amount of code
that you have to generate

188
00:09:05.130 --> 00:09:09.030
to implement. Even the most
basic C-sharp features is kind

189
00:09:09.030 --> 00:09:11.460
of incredible how much code
is behind the hood to

190
00:09:11.460 --> 00:09:15.150
make that work. And it's,
it's focused our mind on

191
00:09:15.150 --> 00:09:18.750
like w how much better
C-sharp is for development. Anything

192
00:09:18.750 --> 00:09:20.280
else, you know, the C
plus plus here is just

193
00:09:20.280 --> 00:09:22.890
a means to an end.
You know, the C sharp

194
00:09:22.890 --> 00:09:24.480
part is the part that
we want to keep, and

195
00:09:24.510 --> 00:09:27.300
we're hoping there's, dotnet moves
forward that, you know, we're

196
00:09:27.300 --> 00:09:29.190
able to do more of
that stuff using, you know,

197
00:09:29.220 --> 00:09:31.800
the common.net that everybody else
is using and not our

198
00:09:31.950 --> 00:09:36.050
custom AOT process. Okay. So
speaking of bringing things to

199
00:09:36.050 --> 00:09:38.990
the table and hiding things,
you're, you know, you're cross

200
00:09:38.990 --> 00:09:43.130
compiling or transpiling from one
language into another, and then

201
00:09:43.460 --> 00:09:46.190
there's a, there's a runtime
and there's always the sea

202
00:09:46.190 --> 00:09:48.620
runtime and things like that.
Right. What do you do

203
00:09:48.620 --> 00:09:51.200
in the abstraction leaks? You
said you can set a

204
00:09:51.200 --> 00:09:53.150
break point. How is that
possible that you can set

205
00:09:53.150 --> 00:09:55.820
a break point in C
sharp? Do you map from

206
00:09:55.820 --> 00:09:58.940
the what's happening in C
plus plus to what's what

207
00:09:58.940 --> 00:10:01.850
your intentions were in C-sharp
Oh, no. Yeah. I know

208
00:10:01.880 --> 00:10:03.590
I'm misunderstanding. We don't set
a break point in C

209
00:10:03.590 --> 00:10:05.360
sharp. We could, we have
some code in there that

210
00:10:05.360 --> 00:10:08.240
like emits line pragmatists. So
you can actually do that

211
00:10:08.240 --> 00:10:10.400
and see the actual C
sharp code and do it

212
00:10:10.400 --> 00:10:12.140
that way. But we really
often don't do it. We

213
00:10:12.140 --> 00:10:14.540
usually usually work directly from
the C C plus plus

214
00:10:14.570 --> 00:10:16.400
if we have to do
that, but it's really kind

215
00:10:16.400 --> 00:10:18.920
of a throw away. The
idea is it's really treated

216
00:10:18.920 --> 00:10:22.070
as an AOT process. You
run the cross compiler, it

217
00:10:22.100 --> 00:10:24.650
dumps out C plus plus
code updating source files is

218
00:10:24.650 --> 00:10:26.990
it needs to, you know,
so that it makes your

219
00:10:27.050 --> 00:10:30.320
build times minimal. And then
when you build, it just

220
00:10:30.320 --> 00:10:33.350
builds the files that change
runs on the device, and

221
00:10:33.350 --> 00:10:35.030
you can set break points
in the C plus plus

222
00:10:35.030 --> 00:10:37.250
code, or at the low
level runtime code, if you

223
00:10:37.250 --> 00:10:40.940
need to, in order to
debug things as needed. But

224
00:10:40.940 --> 00:10:42.740
yeah, it isn't as nice
as just working in plain

225
00:10:42.740 --> 00:10:45.200
C-sharp, that's where we want
to get to eventually, but

226
00:10:45.200 --> 00:10:48.410
that's going to probably require
some more work on a,

227
00:10:48.420 --> 00:10:51.170
on the official C-sharp on
getting it to be more

228
00:10:51.170 --> 00:10:54.290
portable, EAs, more easily portable
to new platforms, which is

229
00:10:54.290 --> 00:10:58.520
still kind of tricky. I
see. So you want a,

230
00:10:59.300 --> 00:11:01.220
if you want to think
about C plus plus as

231
00:11:01.220 --> 00:11:03.380
a minified, C-sharp in this
sense, the way that we

232
00:11:03.380 --> 00:11:06.200
see source maps and like,
I can do TypeScript, or

233
00:11:06.200 --> 00:11:08.690
I can do even wisdom
or blazer, he would have

234
00:11:08.690 --> 00:11:11.270
12 in the browser and
then hit a break point

235
00:11:11.270 --> 00:11:14.930
and it's kind of a
Right, right. Yeah, exactly. And

236
00:11:14.930 --> 00:11:18.020
I think, you know, the
web blazer is another example

237
00:11:18.020 --> 00:11:19.820
of that kind of thing,
like dot nets, really going

238
00:11:19.820 --> 00:11:22.640
everywhere at this point. And,
you know, I know that

239
00:11:22.640 --> 00:11:26.120
we were experimenting with more
web based C-sharp and it's

240
00:11:26.120 --> 00:11:28.130
very exciting for us to
see mano game running on,

241
00:11:28.460 --> 00:11:32.510
on browsers now with technologies
like that. Okay. So this

242
00:11:32.510 --> 00:11:35.720
is a game framework, but
how much does it, how

243
00:11:35.720 --> 00:11:38.060
much does mano game give
me if I'm going to

244
00:11:38.060 --> 00:11:41.060
make a game, like, like
I'm looking at a game

245
00:11:41.060 --> 00:11:44.180
here called chasm. That's like
a Tootie, you know, little

246
00:11:44.180 --> 00:11:47.390
dude runs around back and
forth on a pixels pixel

247
00:11:47.390 --> 00:11:50.300
screen. How much of this
is a game maker and

248
00:11:50.300 --> 00:11:52.310
how much of this is
just, you know, get a

249
00:11:52.310 --> 00:11:54.670
framework to help me Blit
things onto the screen. I'm

250
00:11:54.670 --> 00:11:57.400
trying to understand what it
gives me and then what

251
00:11:57.400 --> 00:11:59.940
it doesn't give me. Right.
Yeah. I mean, I think

252
00:11:59.940 --> 00:12:02.190
that's a clear distinction that
we can make there. You

253
00:12:02.190 --> 00:12:04.980
know, something like unity, that's
more of a game maker

254
00:12:04.980 --> 00:12:07.620
in that it's more of
an IDE and more of

255
00:12:07.620 --> 00:12:10.410
a tool that somebody can
even more pull things together,

256
00:12:10.410 --> 00:12:13.620
DRO, drag, and drop it,
use preexisting components and kind

257
00:12:13.620 --> 00:12:16.560
of build something more visually,
I guess, in a way,

258
00:12:17.010 --> 00:12:20.310
whereas a mano game is
more of a programmer's toolkit

259
00:12:20.310 --> 00:12:23.370
than anything else. It is
more low level is not

260
00:12:23.370 --> 00:12:26.130
really for an artist, even
though we've had people that

261
00:12:26.160 --> 00:12:28.950
I've talked to like a,
a popular game, Salton sanctuary

262
00:12:28.950 --> 00:12:31.650
that was really popular there
on, on PS4 and lots

263
00:12:31.650 --> 00:12:34.680
of platforms you're recently, you
know, that developer didn't really

264
00:12:34.680 --> 00:12:36.840
consider himself a programmer. When
he started the project, he

265
00:12:36.840 --> 00:12:39.930
kind of just looked at
XMA samples and pulled together

266
00:12:39.930 --> 00:12:42.540
code and kind of learned
as he went along, you

267
00:12:42.540 --> 00:12:44.580
know, but, but he was
able to build this really

268
00:12:44.580 --> 00:12:47.340
popular game out of it.
Well, we're really a programmers

269
00:12:47.340 --> 00:12:49.110
kind of level tools. So
a lot of people come

270
00:12:49.110 --> 00:12:51.510
into it expecting something more
unity. Like it's like, it's

271
00:12:51.510 --> 00:12:53.640
not really that it is
really, if you want to

272
00:12:53.640 --> 00:12:57.210
really know your code from
bottom up, this gives you

273
00:12:57.210 --> 00:12:59.190
that ability. If you want
to write your own entity

274
00:12:59.190 --> 00:13:02.490
systems and high level game
systems and your own editors,

275
00:13:02.520 --> 00:13:05.070
that's really what this is
about. It is not about,

276
00:13:05.100 --> 00:13:08.670
here's an editor, here's a
pre pre-baked system for, you

277
00:13:08.670 --> 00:13:12.180
know, rendering my game objects.
It's, it's really more about

278
00:13:12.180 --> 00:13:15.810
abstracting, the low level graphics
and sound API APIs and

279
00:13:15.810 --> 00:13:18.450
input API APIs, so that
you can focus on your

280
00:13:18.450 --> 00:13:21.720
game code in your gameplay
and not on, well, how

281
00:13:21.720 --> 00:13:24.510
do I make this render
the same way on an

282
00:13:24.510 --> 00:13:27.930
iPad and the same way
on the console? Okay. So

283
00:13:27.930 --> 00:13:30.330
an example, like if we're
talking about today games, cause

284
00:13:30.330 --> 00:13:33.600
I just ended up finishing
Katana zero yesterday, and I'm

285
00:13:33.600 --> 00:13:37.530
doing a lot of 2d
sprites thinking about sprites or

286
00:13:37.530 --> 00:13:40.440
batches of sprites. I just
want them on the screen,

287
00:13:40.440 --> 00:13:42.900
whether I want them rotated
a certain way or blended

288
00:13:42.900 --> 00:13:45.690
with other sprites, mano game,
Hide all that from me.

289
00:13:46.320 --> 00:13:48.810
Right. I mean, there is
the motto game has again,

290
00:13:48.810 --> 00:13:51.240
coming from XMA, we kind
of adopted the entire X

291
00:13:51.240 --> 00:13:54.030
and API, which was really
great and very friendly. And

292
00:13:54.030 --> 00:13:56.400
it had a concept of
Sprite batch where you would

293
00:13:56.400 --> 00:13:58.290
just say, Hey, I'm going
to bring in a batch

294
00:13:58.290 --> 00:14:00.750
of sprites and you can
say, draw this one here,

295
00:14:00.750 --> 00:14:03.360
draw that one there, draw
this one here, you just

296
00:14:03.360 --> 00:14:05.310
pass it a texture and
a coordinate. And if you

297
00:14:05.310 --> 00:14:07.410
want rotation and things like
that, and then you say

298
00:14:07.410 --> 00:14:09.030
end and it takes care
of under the hood to

299
00:14:09.030 --> 00:14:11.970
sort them batch them and
render them to the screen.

300
00:14:11.970 --> 00:14:14.340
So it's kind of like
a high level of that

301
00:14:14.340 --> 00:14:16.650
level, but you can also
go down and actually work

302
00:14:16.650 --> 00:14:20.610
with Vertex, buffers and index
buffers and shaders and wow.

303
00:14:20.740 --> 00:14:22.380
So you can go lower
level if you want to.

304
00:14:22.380 --> 00:14:24.930
But the Sprite batch has
kind of a nice convenient

305
00:14:24.930 --> 00:14:26.370
way to kind of get
in there and do two

306
00:14:26.370 --> 00:14:28.980
D things. And there's some
more, we have some 3d

307
00:14:28.980 --> 00:14:31.740
support where there's some model
classes and things like that

308
00:14:31.740 --> 00:14:34.140
where you can bring in
a model, import it in

309
00:14:34.140 --> 00:14:37.890
from 30th, max exporting is
like an FBX or a,

310
00:14:38.520 --> 00:14:41.190
a colada file and then
Crow and then build it

311
00:14:41.190 --> 00:14:42.960
in the content pipeline and
actually render it to the

312
00:14:42.960 --> 00:14:45.810
screen. But that's a little
bit more involved. We see

313
00:14:45.810 --> 00:14:48.960
more, typically more 2d games,
people doing more to games

314
00:14:48.960 --> 00:14:50.880
with mano game, but there
are also some 3d games

315
00:14:50.880 --> 00:14:53.600
out there's like right now,
like one of the most

316
00:14:53.600 --> 00:14:57.200
popular or the most popular
flight SIM on iOS is

317
00:14:57.200 --> 00:15:01.220
called infinite flight and that's
all mano game and they've

318
00:15:01.220 --> 00:15:03.290
actually, they took it and
like modified it and made

319
00:15:03.290 --> 00:15:05.360
some changes to make it
fit what their needs are

320
00:15:05.360 --> 00:15:07.220
since it's an open source
project, but it is a

321
00:15:07.220 --> 00:15:11.080
motto game-based project. Yeah. I
actually had Laura Lavonne on

322
00:15:11.080 --> 00:15:15.340
the show in episode number
five 93 in August of

323
00:15:15.340 --> 00:15:19.540
20 2017. Sure. To put
a link to her in

324
00:15:19.540 --> 00:15:22.870
the, in the show notes.
And that's like you said

325
00:15:22.870 --> 00:15:26.080
that you're, you're seeing more
two D games, but infinite

326
00:15:26.080 --> 00:15:29.200
flight really pushes 3d. It's
quite an amazing thing. I

327
00:15:29.200 --> 00:15:32.320
mean, you're looking at it.
It's almost like a PC

328
00:15:32.320 --> 00:15:35.830
quality flight simulator in 3d
on an iPad. It's yeah,

329
00:15:36.200 --> 00:15:38.470
yeah, yeah. It's a it's
they they've done some really

330
00:15:38.470 --> 00:15:40.630
cool stuff with the quality.
There is really high end

331
00:15:40.630 --> 00:15:43.750
that it's amazing that, you
know, whenever we see these

332
00:15:43.750 --> 00:15:45.340
things, it's like, wow, that's
modern game as well. That's

333
00:15:45.340 --> 00:15:48.280
impressive that, you know, but
it's really the time that

334
00:15:48.280 --> 00:15:50.650
they spend engineering their own
systems on top of mano

335
00:15:50.650 --> 00:15:53.650
game, that's, you know, the
real magic here. And we

336
00:15:53.650 --> 00:15:56.170
mostly see today games, cause
in general, today games are

337
00:15:56.200 --> 00:15:59.470
much easier to develop and
understand, you know, from, you

338
00:15:59.470 --> 00:16:02.290
know, building systems and things
like that. It's harder to

339
00:16:02.290 --> 00:16:03.550
get to a three D
game, but we have some

340
00:16:03.550 --> 00:16:05.770
three D games that are
out there, you know? So

341
00:16:05.780 --> 00:16:09.040
it's, we have a little
bit of both. Hey, there's

342
00:16:09.040 --> 00:16:12.460
you know, about the strange
Loop conference, it brings together

343
00:16:12.460 --> 00:16:17.140
over 2000 software developers for
an educational and inspiring experience.

344
00:16:17.830 --> 00:16:22.450
You can see talks like
monitoring traffic and space behind

345
00:16:22.450 --> 00:16:27.130
the scenes of the New York
times, crossword securing cloud applications,

346
00:16:27.340 --> 00:16:31.030
building an open source pancreas,
the science and history of

347
00:16:31.060 --> 00:16:38.800
color voice-driven development, probabilistic programming,
the computers of Voyager and

348
00:16:38.830 --> 00:16:45.310
Grammy nominated recording artist imaging
heap, strange loop 2019 takes

349
00:16:45.310 --> 00:16:49.720
place September 12th through the 14th
in st. Louis, get your

350
00:16:49.720 --> 00:16:57.460
tickets now@thestrangeloop.com and use discount
code Hansel, H a N

351
00:16:57.460 --> 00:17:03.100
S E L for $75
off. You mentioned different shaders

352
00:17:03.100 --> 00:17:07.150
and low-level things, but it's
low level, but still abstracted

353
00:17:07.150 --> 00:17:11.230
away from the, from the
hardware. Is that correct? Yes.

354
00:17:11.740 --> 00:17:13.660
You know, for shader is,
you know, for the most

355
00:17:13.660 --> 00:17:17.830
part, I guess the industry
is kind of adopted HLSL

356
00:17:17.830 --> 00:17:21.640
is kind of like a
basic standard for shaders. So

357
00:17:21.850 --> 00:17:24.400
like in mano game, you
build your shaders and HLSL,

358
00:17:24.400 --> 00:17:27.040
which is a Microsoft shaving
language that was used in

359
00:17:27.040 --> 00:17:31.180
direct decks. And we use
a, another, again, another kind

360
00:17:31.180 --> 00:17:34.870
of cross compiler technology to
convert that HLSL into GLSL

361
00:17:34.870 --> 00:17:38.680
for GL platforms. You know,
it's an open source tool.

362
00:17:38.680 --> 00:17:39.730
I forgot the name of
it off the top of

363
00:17:39.730 --> 00:17:41.920
my head. That's used to
do that conversion. And then

364
00:17:41.920 --> 00:17:44.200
on consoles, they're all kind
of a little different, some

365
00:17:44.200 --> 00:17:47.230
consoles use something very similar
to HLSL. So we use

366
00:17:47.230 --> 00:17:50.400
that civil I'm already have
cross compilers HLSL to the

367
00:17:50.700 --> 00:17:53.580
consoles native shader language. And
you know, for the most

368
00:17:53.580 --> 00:17:55.680
part that's kind of been
adopted across the industry. Like

369
00:17:55.710 --> 00:17:58.440
even even unreal engine, you
kind of write your shaders

370
00:17:58.470 --> 00:18:01.770
and once an HLSL and
under the hood, they cross

371
00:18:01.770 --> 00:18:04.710
compile it to the right
platforms, just because it's easier

372
00:18:04.710 --> 00:18:06.690
to do it that way
than to try to write

373
00:18:06.690 --> 00:18:11.150
a native shader in that
native platforms language, You might

374
00:18:11.150 --> 00:18:13.970
not know that acronym. Of
course it's high level shader

375
00:18:13.970 --> 00:18:17.600
language. And then GLSL is
the open GL shader or

376
00:18:17.600 --> 00:18:21.050
shading language. What is a
shader there's pixel shaders, there's

377
00:18:21.050 --> 00:18:26.000
geometry shaders, all flavors of
shaders. Yes. Yes. Oh, well,

378
00:18:26.000 --> 00:18:27.120
I mean a shader, you
can think of it as

379
00:18:27.140 --> 00:18:30.500
a small program that runs
on the graphics card. You

380
00:18:30.500 --> 00:18:33.350
know, it's people don't realize
that your graphics card is

381
00:18:33.350 --> 00:18:37.730
a separate PC, basically running
separately from your regular PC.

382
00:18:37.730 --> 00:18:40.700
So your regular PC sends
that graphics card, some commands

383
00:18:40.700 --> 00:18:44.000
and it runs its own
programs. So every pixel that

384
00:18:44.000 --> 00:18:46.040
you see on the screen
or really groups of pixels

385
00:18:46.280 --> 00:18:48.320
are run through a pixel
shader that actually does all

386
00:18:48.320 --> 00:18:52.040
the mathematical calculations to build
the final pixel onto the

387
00:18:52.040 --> 00:18:54.410
screen. And that's what you're
building is you're building a

388
00:18:54.410 --> 00:18:56.930
shader that just tells the
GPU how to shade your

389
00:18:56.930 --> 00:18:59.600
pixel to colorize that pixel.
And it can be everything

390
00:18:59.600 --> 00:19:02.420
from something very simple that
just read your pixel from

391
00:19:02.420 --> 00:19:04.940
a texture, that map that
you pass the graphics card,

392
00:19:04.940 --> 00:19:07.400
or it could be something
very complex that does mathematical

393
00:19:07.400 --> 00:19:11.510
calculations and build something very
procedural. So it just depends.

394
00:19:11.510 --> 00:19:14.450
And there's pixel shaders work
on your pixels, your Vertex

395
00:19:14.450 --> 00:19:16.730
shaders work on the Vertex
data on the geometry that

396
00:19:16.730 --> 00:19:20.330
you pass through the hardware.
And those, those are kind

397
00:19:20.330 --> 00:19:23.570
of the basic building blocks
of almost all rendering across

398
00:19:23.570 --> 00:19:27.440
all games and all game
engines When I've seen 2d

399
00:19:27.440 --> 00:19:29.780
pixel games or kind of
this resurgence that we've seen

400
00:19:29.780 --> 00:19:32.090
in the last five or
10 years of, of, you

401
00:19:32.090 --> 00:19:34.400
know, 16 bit games, we'll
call them kind of a

402
00:19:34.400 --> 00:19:37.640
game like chasm or again,
that could like Stardew Valley

403
00:19:37.640 --> 00:19:39.860
that looks like it could
be a super Nintendo game.

404
00:19:40.430 --> 00:19:45.050
They feel like we remember
those games were, but they're

405
00:19:45.050 --> 00:19:48.500
far more sophisticated. Oh, absolutely.
Like the little, the little

406
00:19:48.500 --> 00:19:53.390
pixelated person will walk by
a fire and the fire

407
00:19:53.390 --> 00:19:56.540
itself casts light and changes
the pixels. And that just

408
00:19:56.540 --> 00:19:58.610
wouldn't have been possible with
simple sprites back in the

409
00:19:58.610 --> 00:20:02.750
day. Right? Absolutely. I mean,
that's, it's funny. We spend

410
00:20:02.810 --> 00:20:04.970
a lot of developers now
spend a lot of time

411
00:20:04.970 --> 00:20:07.550
trying to get pixel perfect.
Right. It's hard. It's easy

412
00:20:07.550 --> 00:20:10.130
to be just slap an
image onto the GPU and

413
00:20:10.130 --> 00:20:13.220
get some, you know, some
photo realistic looking image working

414
00:20:13.220 --> 00:20:15.710
to get something pixel perfect,
where it looks like, and

415
00:20:15.830 --> 00:20:18.110
an honest to goodness, 16
bit game for back in

416
00:20:18.110 --> 00:20:19.670
the day or an eight
bit game back in the

417
00:20:19.670 --> 00:20:22.640
day is very difficult to
do properly. So I know

418
00:20:22.640 --> 00:20:24.530
that the chasm guys, when
we work with them, you

419
00:20:24.530 --> 00:20:27.650
know, they were very, they
were very intense about making

420
00:20:27.650 --> 00:20:29.990
sure that everything was pixel
perfect, that the art was

421
00:20:29.990 --> 00:20:33.320
exactly all the pixels were
perfectly square. There wasn't any

422
00:20:33.320 --> 00:20:36.380
cutoff or, you know, any
small little differences in pixels,

423
00:20:36.380 --> 00:20:38.120
which is very easy to
happen when you're trying to

424
00:20:38.120 --> 00:20:40.310
port it to multiple platforms.
So it's a, it's a

425
00:20:40.310 --> 00:20:42.230
really, it's an art and
a challenge to make those

426
00:20:42.230 --> 00:20:44.510
things look like that, even
though it seems like it's

427
00:20:44.510 --> 00:20:47.590
easy, it's actually not, you
know, in the UC games

428
00:20:47.590 --> 00:20:50.230
like chasm like that, you
see a Celeste, which was

429
00:20:50.230 --> 00:20:52.000
like a, it was like
game of the year, last

430
00:20:52.000 --> 00:20:54.940
year that tries to maintain
that pixel perfect look. But

431
00:20:54.940 --> 00:20:58.000
also as a new things,
like they, all their UIs

432
00:20:58.000 --> 00:20:59.680
are kind of done in
a high fidelity kind of

433
00:20:59.680 --> 00:21:03.520
look mostly for portability and
localization, but it had a

434
00:21:03.520 --> 00:21:06.460
very interesting look. So it's
like people are mixing techniques,

435
00:21:06.820 --> 00:21:09.370
you know, pixel perfect along
with, you know, things that

436
00:21:09.370 --> 00:21:12.310
are more modern. And in
order to build kind of,

437
00:21:12.670 --> 00:21:16.270
I guess, retro games that,
that, that are different they're

438
00:21:16.270 --> 00:21:19.090
they feel retro and they
have some retro concepts, but

439
00:21:19.090 --> 00:21:21.880
they, they have a new
look and a new feel,

440
00:21:21.940 --> 00:21:24.610
which I think is, you
know, people, people like, I

441
00:21:24.610 --> 00:21:27.400
think it's a, it's a
nice throwback in difference from,

442
00:21:27.400 --> 00:21:30.220
you know, your typical call
of duty, you know, doom

443
00:21:30.250 --> 00:21:33.270
kind of things. Absolutely. Like
I just finished this game,

444
00:21:33.270 --> 00:21:38.130
Katana zero just literally just
yesterday. And it totally feels

445
00:21:38.130 --> 00:21:39.600
like something I would have
played in the nineties, but

446
00:21:39.600 --> 00:21:41.970
if I go back and
I, for example, I recently

447
00:21:42.270 --> 00:21:46.680
modded my Nintendo 64 to
support HTMI with a custom

448
00:21:46.890 --> 00:21:49.710
chip called an ultra HTMI.
And when you go back

449
00:21:49.710 --> 00:21:52.230
and actually See the way
it was in the early

450
00:21:52.230 --> 00:21:54.630
days, It wasn't like it
was today. These are these

451
00:21:54.630 --> 00:21:58.170
modern pixel games are extremely
sophisticated. Right. I think we've

452
00:21:58.170 --> 00:22:02.610
made our we've improved Things
where our memories have upscaled

453
00:22:02.610 --> 00:22:04.980
the graphics to be much
nicer than they actually were.

454
00:22:05.490 --> 00:22:08.820
Yeah. That's definitely an effect.
I mean, we were, you

455
00:22:08.820 --> 00:22:11.220
know, in, for our regular
business here, you know, we

456
00:22:11.220 --> 00:22:14.640
do game ports and we're
currently working on a, a

457
00:22:14.640 --> 00:22:16.710
port of a game from
20 years ago that ran

458
00:22:16.710 --> 00:22:20.400
on the PlayStation one, PlayStation
two, and, you know, bringing

459
00:22:20.400 --> 00:22:23.610
those to a modern console
and uprising the graphics and

460
00:22:23.610 --> 00:22:25.770
stuff. But it's a, it's
difficult, you know, a lot

461
00:22:25.770 --> 00:22:28.050
of people like it's hard,
like even though we're appraising

462
00:22:28.050 --> 00:22:29.550
the graphics, it's hard. I
think for some people to

463
00:22:29.550 --> 00:22:32.760
realize how much we're upgrading
them, because they're either mind

464
00:22:32.760 --> 00:22:35.370
makes up the differences. Like
it's very hard for somebody

465
00:22:35.370 --> 00:22:38.040
to realize how low fidelity
some of these games were

466
00:22:38.040 --> 00:22:40.830
back then, you know, you
really have to see it

467
00:22:40.830 --> 00:22:42.750
side by side to really
go like, wow, there's a

468
00:22:42.750 --> 00:22:46.110
big, a big improvement here
over what it was. And

469
00:22:46.620 --> 00:22:49.800
yeah, it's kind of amazing
that, you know, how much,

470
00:22:49.830 --> 00:22:52.170
how much games have advanced
in the last 20 years.

471
00:22:52.530 --> 00:22:55.770
Yeah. Three 20 by two
40. It doesn't cut it

472
00:22:55.770 --> 00:22:59.370
anymore. Indeed. Yeah. Not quite,
even though, like, I think

473
00:22:59.370 --> 00:23:02.940
it's, TowerFall renders at three
20 by two 40 internally,

474
00:23:03.090 --> 00:23:05.820
right. Into an offscreen render
target. Yeah. Like there's some

475
00:23:05.820 --> 00:23:08.160
of the classic pixel art
games, Bryn and mano game

476
00:23:08.160 --> 00:23:11.520
render to offscreen targets that
are these low resolutions in

477
00:23:11.520 --> 00:23:14.190
order to get that pixel
look and then they upscale

478
00:23:14.190 --> 00:23:16.680
them and then apply a
bunch of fancier effects on

479
00:23:16.680 --> 00:23:18.960
top of it to kind
of modernize the look on

480
00:23:18.960 --> 00:23:21.240
top of it. So it's,
it's interesting how they, they

481
00:23:21.240 --> 00:23:24.360
do these techniques. That is
very, very interesting. Now, one

482
00:23:24.360 --> 00:23:26.250
of the things that, again,
as a doc, I think

483
00:23:26.250 --> 00:23:27.900
it will be dominant. Developers
have a little bit of

484
00:23:28.290 --> 00:23:30.630
low self esteem. Maybe I
do, because like we said,

485
00:23:30.630 --> 00:23:32.640
we're always amazed when we
find out that like something

486
00:23:32.640 --> 00:23:34.740
like mano game hits the
big time. Is it true?

487
00:23:34.740 --> 00:23:38.360
That Valley is written in
motto game. Yes. I mean,

488
00:23:38.580 --> 00:23:41.760
yeah. The hottest game of
the year, everyone was talking

489
00:23:41.760 --> 00:23:44.640
about starting a Valley and
it's everywhere. Yeah. It's pretty,

490
00:23:44.640 --> 00:23:49.100
it's been pretty huge. You
know, Eric, the developer, he,

491
00:23:49.490 --> 00:23:51.500
he had written it like
he was just a garage

492
00:23:51.530 --> 00:23:54.440
developer working on his own
for several years, bringing sturdy

493
00:23:54.440 --> 00:23:57.380
Valley to market. He kind
of, he kind of learned

494
00:23:57.380 --> 00:23:59.840
programming along the way and
he wrote it in X

495
00:23:59.840 --> 00:24:02.180
and a back then he
just, he liked the programming

496
00:24:02.180 --> 00:24:05.330
language and he worked on
it. And then we came

497
00:24:05.330 --> 00:24:07.100
in and started helping them
a couple of years back.

498
00:24:07.100 --> 00:24:09.410
It was to bring it
to other platforms. So at

499
00:24:09.410 --> 00:24:11.060
the time was like, well,
mano game is a perfect

500
00:24:11.060 --> 00:24:12.920
fit for that, you know,
since he had written in

501
00:24:12.920 --> 00:24:15.260
next to the originally. So
that's where we started our

502
00:24:15.260 --> 00:24:17.750
journey of getting it to
all these other console platforms.

503
00:24:18.110 --> 00:24:21.740
And yeah, it's, it's amazing
how, how big Stardew Valley

504
00:24:21.740 --> 00:24:23.630
is and the amount of
people that play it. It's

505
00:24:23.630 --> 00:24:26.870
huge. It's, you know, on
switch, it's done extremely well.

506
00:24:26.870 --> 00:24:29.390
They just released an iOS
version, which has done extremely

507
00:24:29.390 --> 00:24:32.210
well. I think it's still
like in the top 10

508
00:24:32.210 --> 00:24:36.320
or 20 on the, on
the app store, the Android

509
00:24:36.320 --> 00:24:40.240
version just shipped as well.
It's amazing. That's fantastic. It's

510
00:24:40.240 --> 00:24:42.760
so nice. And what's great
about it is that you

511
00:24:42.760 --> 00:24:45.250
play the game and you
don't know like that's the

512
00:24:45.250 --> 00:24:46.860
way it's supposed to be.
Like, you just enjoy it.

513
00:24:46.860 --> 00:24:49.720
You have a great experience
and hopefully the developer had

514
00:24:49.720 --> 00:24:52.990
a great experience making it
and using mano games. Yeah,

515
00:24:52.990 --> 00:24:55.360
absolutely. I mean, end of
the day, you know, a

516
00:24:55.360 --> 00:24:56.890
game is a game. It
can be written in any

517
00:24:56.890 --> 00:25:00.010
language. Some are harder than
others. Like we've been recently

518
00:25:00.010 --> 00:25:04.330
porting a game that, that
was written in Java originally

519
00:25:04.420 --> 00:25:07.510
and Java, as much as
people think it's portable, isn't

520
00:25:07.510 --> 00:25:12.670
really portable strangely enough. So
that was an interesting experiment

521
00:25:12.670 --> 00:25:15.970
in taking what we ended
up doing with that game

522
00:25:15.970 --> 00:25:17.920
is we, we use some
of the tech that we

523
00:25:17.920 --> 00:25:21.070
used in mano game and
we actually took the Java

524
00:25:21.070 --> 00:25:23.890
code and converted it into
C sharp using like an

525
00:25:23.890 --> 00:25:27.340
off the shelf tool is
available on the internet to

526
00:25:27.340 --> 00:25:29.590
convert Java to C sharp.
And then we ran it

527
00:25:29.590 --> 00:25:32.800
through our cross compiler and
got it onto consoles, which

528
00:25:32.800 --> 00:25:35.800
is crazy that we cross
compiled it twice. But that's

529
00:25:35.830 --> 00:25:37.690
essentially what we did to
bring it to consoles, but

530
00:25:37.690 --> 00:25:40.570
nobody would know. I mean,
from the outside, a player

531
00:25:40.570 --> 00:25:42.310
would never know that it
was written in Java or

532
00:25:42.310 --> 00:25:45.220
there was cross compile twice
or any of this nonsense.

533
00:25:45.220 --> 00:25:48.100
You know, it's, it's really
about the developers, you know,

534
00:25:48.100 --> 00:25:49.990
picking your tools are really
about the developers and your

535
00:25:49.990 --> 00:25:53.080
workflow. And, you know, C
sharp is just a really

536
00:25:53.080 --> 00:25:56.110
nice language to work with.
It's a, you know, you

537
00:25:56.110 --> 00:25:57.880
can get to the nitty
gritty. If you need to,

538
00:25:57.880 --> 00:26:00.220
if you really need performance,
you can say, Hey, I'm

539
00:26:00.220 --> 00:26:02.740
going to start using unsafe
code in this section. Cause

540
00:26:02.750 --> 00:26:05.200
I know what I'm doing.
And you better know what

541
00:26:05.200 --> 00:26:07.120
you're doing. If not, you
can hit cause problems. Like

542
00:26:07.450 --> 00:26:09.070
we reporting a game the
other day and it was

543
00:26:09.070 --> 00:26:11.500
using some unsafe code and
it was crashing. We're trying

544
00:26:11.500 --> 00:26:13.150
to figure out why. And
it's like, because they were

545
00:26:13.210 --> 00:26:15.130
overflowing memory, they were going
outside of the bounds of

546
00:26:15.130 --> 00:26:17.110
memory, which unsafe code in
C sharp will let you

547
00:26:17.110 --> 00:26:21.130
do. It's called say for
a reason, but, but you

548
00:26:21.130 --> 00:26:23.080
being able to turn kind
of features like that on

549
00:26:23.080 --> 00:26:25.750
and off, you know, it
was beneficial. You know, we've,

550
00:26:25.940 --> 00:26:29.260
we've definitely seen in, you
know, in our developing, in

551
00:26:29.260 --> 00:26:31.900
our reporting days that, you
know, C plus plus games

552
00:26:31.900 --> 00:26:36.160
are generally have a tougher
time being stable. And Le

553
00:26:36.190 --> 00:26:39.100
they're generally have, are harder
to get stable and reliable.

554
00:26:39.100 --> 00:26:42.640
You'll find more bugs and
pointer errors and array errors,

555
00:26:42.640 --> 00:26:45.260
things you don't generally run
into in a C-sharp based

556
00:26:45.260 --> 00:26:49.020
game. So there's definitely some
trade offs there. If your

557
00:26:49.020 --> 00:26:51.960
game can, if you're not
trying to make the next

558
00:26:52.410 --> 00:26:55.080
crisis or the next doom,
you, you know, you could

559
00:26:55.080 --> 00:26:57.390
probably get away with C
sharp on just about any

560
00:26:57.390 --> 00:27:00.360
game that you want to
build and just dive into

561
00:27:00.360 --> 00:27:04.530
some more unsafe code practices
in places where you really

562
00:27:04.530 --> 00:27:07.050
need crazy amounts of performance.
But in general, most C

563
00:27:07.050 --> 00:27:09.450
sharp games that we poured
in don't use very much

564
00:27:09.450 --> 00:27:13.290
unsafe code is pretty straightforward.
Cause again, in these games,

565
00:27:13.320 --> 00:27:15.900
the GPU is doing the
bulk of the work, right?

566
00:27:15.930 --> 00:27:18.990
You're passing it, all the
graphics code, all the graphics

567
00:27:18.990 --> 00:27:21.240
commands and the GPS doing
the work to actually crunch

568
00:27:21.240 --> 00:27:23.460
out the graphics. It's mostly
when your game has to

569
00:27:23.460 --> 00:27:25.920
have a lot of CPU
intensive work that, you know,

570
00:27:25.920 --> 00:27:30.090
C sharp can maybe become
a problem, or when you're

571
00:27:30.090 --> 00:27:33.780
going through massive amounts of
memory, right. You know, C

572
00:27:33.780 --> 00:27:36.990
sharp has a garbage collector.
And in that, a lot

573
00:27:36.990 --> 00:27:39.120
of people think, well, garbage
collectors, bad for games. You

574
00:27:39.120 --> 00:27:41.940
know, even though like, you
know, every unity game as

575
00:27:41.940 --> 00:27:44.730
it is as a garbage
collector in it, right. But

576
00:27:45.030 --> 00:27:46.470
if you think of it,
I always thought of it

577
00:27:46.470 --> 00:27:49.410
like this. Like if you
had a C plus plus

578
00:27:49.410 --> 00:27:51.750
based game and you, every
time you needed to allocate

579
00:27:52.050 --> 00:27:54.000
to work with a string,
you'd allocate with when knew

580
00:27:54.000 --> 00:27:56.130
and didn't call delete on
it constantly to be just

581
00:27:56.310 --> 00:27:59.100
making all these new and
delete allocations, you wouldn't do

582
00:27:59.100 --> 00:28:00.780
that. You wouldn't write a
C plus plus game. That

583
00:28:00.780 --> 00:28:04.470
way it's inefficient. It's the
bad idea. Well, you shouldn't

584
00:28:04.470 --> 00:28:06.330
be doing that kind of
thing in C sharp either.

585
00:28:06.360 --> 00:28:08.610
So you know, the same
things you do in a

586
00:28:08.610 --> 00:28:11.340
C plus plus game, like
pull your objects, you know,

587
00:28:11.340 --> 00:28:13.920
use, you know, reuse objects
and pull them is the

588
00:28:13.920 --> 00:28:16.170
common techniques that you'd use
in C sharp. So in

589
00:28:16.170 --> 00:28:20.160
general, it, you know, unless
you're being very sloppy, C

590
00:28:20.160 --> 00:28:22.080
sharp has never been, you
know, you can, you can

591
00:28:22.080 --> 00:28:25.590
make fast games that don't
get lots of GC hiccups,

592
00:28:25.620 --> 00:28:28.590
you know, on a, on
NC sharp. You just have

593
00:28:28.590 --> 00:28:30.150
to be a little smart
about how you write it.

594
00:28:31.440 --> 00:28:35.960
What is it? The relationship
between mano and mano game

595
00:28:35.990 --> 00:28:38.570
in the sense of mano
game runs on most of

596
00:28:38.570 --> 00:28:43.730
the dot nets, right? Yeah.
It's the relationship is loose.

597
00:28:43.730 --> 00:28:47.330
I guess I asked the
Dominican Louis he's, he's one

598
00:28:47.330 --> 00:28:50.210
of the guys that took
over for Jose when he

599
00:28:50.270 --> 00:28:52.070
was stepping away from the
project and he kind of

600
00:28:52.070 --> 00:28:53.930
ran the project for a
lot of years. He was

601
00:28:53.930 --> 00:28:56.060
the one that came up
with the name for named

602
00:28:56.060 --> 00:28:58.370
it, change it from a
touched the mano game. And

603
00:28:58.370 --> 00:29:00.620
I think it just sounded
like, Oh, well, you know,

604
00:29:00.620 --> 00:29:04.430
it kind of follows mottoes
naming convention. So we'll use

605
00:29:04.430 --> 00:29:06.260
mano game. That's what he
called it at the time.

606
00:29:06.260 --> 00:29:08.720
It was just, it really
was just that the it's

607
00:29:08.720 --> 00:29:12.500
never really been anything tied
to mano in any particular

608
00:29:12.500 --> 00:29:16.550
way, other than we use
mano on several platforms. But

609
00:29:16.850 --> 00:29:20.180
yeah, the relationship is loose.
You know, we really kind

610
00:29:20.180 --> 00:29:23.510
of follow the, you know,
try to run on whatever.net

611
00:29:23.510 --> 00:29:27.110
is available. Kind of a,
you know, idea because the

612
00:29:27.110 --> 00:29:30.290
truth is that every platform
has different flavors of.net. You

613
00:29:30.290 --> 00:29:32.990
know, you might have an
old version of.net here or

614
00:29:32.990 --> 00:29:36.680
a newer one there we
experimented once with the, using

615
00:29:36.680 --> 00:29:38.630
the, have you ever heard
of, I think it was

616
00:29:38.630 --> 00:29:43.960
called.net. M F is It
Michael framework? Yeah. It was

617
00:29:43.960 --> 00:29:46.450
a tiny, tiny.net that would
run on things like a

618
00:29:46.450 --> 00:29:49.740
net. Right, right. We've experimented
with trying to run on

619
00:29:49.740 --> 00:29:52.620
things like that. It's, you
know, I think, I guess

620
00:29:52.620 --> 00:29:54.720
that's the nice thing about.net
is that there are different

621
00:29:54.720 --> 00:29:56.670
flavors and you can kind
of tailor it to different

622
00:29:56.670 --> 00:29:59.550
platforms. Now we're hoping for
the grand new reunification, right.

623
00:29:59.550 --> 00:30:03.240
Where all these flavors of.net
come back together into, you

624
00:30:03.240 --> 00:30:06.210
know, back into one thing
and maybe one day that

625
00:30:06.210 --> 00:30:08.550
will occur. But, you know,
till then, you know, we're

626
00:30:08.550 --> 00:30:11.100
kind of maintaining our flexibility
because we know that it's

627
00:30:11.100 --> 00:30:13.290
just going to be different
on each platform. Like we

628
00:30:13.290 --> 00:30:16.500
were looking at, I think
Samsung uses a version of.net

629
00:30:16.530 --> 00:30:19.320
on some of their TV
OSS for building where you

630
00:30:19.320 --> 00:30:21.480
can build games with that.
We've been looking into that

631
00:30:21.480 --> 00:30:25.140
platform and it's a different
version of.net yet again. So

632
00:30:26.130 --> 00:30:28.590
you have to maintain flexibility,
but in general, most all

633
00:30:28.590 --> 00:30:31.410
the flavors have the same
basic concepts, a garbage collector.

634
00:30:31.410 --> 00:30:34.560
You have the same dotnet
class library, which is very

635
00:30:34.740 --> 00:30:38.610
flexible and useful for, you
know, game development. So we

636
00:30:38.610 --> 00:30:41.610
just ended up providing our,
our layer, which gives you

637
00:30:41.610 --> 00:30:44.580
the low level graphics and,
you know, your audio APIs

638
00:30:44.580 --> 00:30:46.890
and your input API APIs,
and you're ready to go.

639
00:30:46.890 --> 00:30:49.680
So we try to maintain
kind of conservative approach, not

640
00:30:49.680 --> 00:30:53.580
using the most cutting edge.net
features unless we actually have

641
00:30:53.580 --> 00:30:55.500
to, in order to make
sure that we can get

642
00:30:55.500 --> 00:30:58.540
to as many platforms as
possible. Are you, are you

643
00:30:58.560 --> 00:31:02.130
trying to pound a define,
you know, like half pound

644
00:31:02.130 --> 00:31:04.020
to find your way around
things, or are you doing

645
00:31:04.020 --> 00:31:08.700
plugins to when something is
specific to an operator? We,

646
00:31:08.700 --> 00:31:11.880
we tend to do a
mixture. We do two things

647
00:31:11.880 --> 00:31:13.440
we do. We do pound
to find every once in

648
00:31:13.440 --> 00:31:15.060
a while, we did that
really early on in the

649
00:31:15.060 --> 00:31:17.340
modern game project. We did
a lot of that. Mostly

650
00:31:17.340 --> 00:31:20.760
because people don't realize this,
but using an interface like

651
00:31:20.850 --> 00:31:25.410
a C-sharp interface actually costs
you cycles like a interface

652
00:31:25.410 --> 00:31:28.590
function calls are slower than
just a regular function call.

653
00:31:29.070 --> 00:31:31.560
And Eric at least can
be, especially in an IOT

654
00:31:31.560 --> 00:31:33.900
sense in a Git sense.
I think the Git can

655
00:31:33.900 --> 00:31:37.350
sometimes do some really clever
things and optimize those things

656
00:31:37.350 --> 00:31:40.650
away at times. So there
are some overheads to doing

657
00:31:40.650 --> 00:31:43.050
interface based calls. So we've
always kind of resisted doing

658
00:31:43.050 --> 00:31:45.990
that just because we didn't
want to add any more

659
00:31:45.990 --> 00:31:49.350
overhead than we absolutely had
to, especially when, when you're

660
00:31:49.350 --> 00:31:51.570
going to mobile and, you
know, every cycle kind of

661
00:31:51.570 --> 00:31:54.330
counts. It was really important
to us not to do

662
00:31:54.330 --> 00:31:56.790
that. So we use a
lot of pound defines early

663
00:31:56.790 --> 00:32:01.050
on, but that became really
difficult to maintain. So the

664
00:32:01.050 --> 00:32:03.090
new technique that we've been
using, which has actually been

665
00:32:03.090 --> 00:32:05.430
really, really flexible for us,
and I don't think we've

666
00:32:05.430 --> 00:32:08.700
seen very many other projects
use it is we've been

667
00:32:08.700 --> 00:32:12.360
using partial classes a lot
to do this. So what

668
00:32:12.360 --> 00:32:15.450
we would do is we
would define a most of

669
00:32:15.450 --> 00:32:18.930
our, most of the stuff
is implemented as a, a

670
00:32:18.930 --> 00:32:22.830
single class that has different
calls that we define as

671
00:32:22.830 --> 00:32:26.100
like platform calls that are
platform specific calls. And those

672
00:32:26.100 --> 00:32:29.670
aren't implemented in the main
class CS file. And then

673
00:32:29.670 --> 00:32:32.520
we actually have a separate
CS file that ha that's

674
00:32:32.640 --> 00:32:37.140
per platform that implements these
other functions that are implemented

675
00:32:37.140 --> 00:32:39.000
through a partial function or
a partial, you know, through

676
00:32:39.020 --> 00:32:42.290
another class, another function in
a partial class. And that

677
00:32:42.290 --> 00:32:44.570
works out really nice cause
it kind of organizes the

678
00:32:44.570 --> 00:32:47.540
code in different platforms. And
it doesn't require a bunch

679
00:32:47.540 --> 00:32:50.090
of if depths which are
easily get tangled up. And

680
00:32:50.480 --> 00:32:52.520
you know, it's hard to
kind of read your code

681
00:32:52.520 --> 00:32:54.110
if you have a ton
of deaths, but at the

682
00:32:54.110 --> 00:32:58.100
same time implies no performance
cost at all. Right. Because

683
00:32:58.100 --> 00:33:01.610
it's all done at compile
time. So we've been really

684
00:33:01.610 --> 00:33:03.740
happy with that technique and
it's worked really well for

685
00:33:03.740 --> 00:33:06.530
us. So yeah, we we've,
we've had pressure in the

686
00:33:06.530 --> 00:33:08.480
past to like make a
bunch of interfaces and stuff

687
00:33:08.510 --> 00:33:10.580
we've kind of held back
just because we just don't

688
00:33:10.580 --> 00:33:13.580
want to introduce any more
overhead to that processes if

689
00:33:13.580 --> 00:33:15.740
possible. And the partial class
stuff has worked really well.

690
00:33:16.820 --> 00:33:21.290
So people can check out
mano game@monogame.net. You shipped there's

691
00:33:21.290 --> 00:33:24.350
thousands of games that have
shipped with a mano game.

692
00:33:24.350 --> 00:33:29.990
It's supported basically everywhere. X-Box
switch PlayStation, four Vita Mac,

693
00:33:30.020 --> 00:33:34.280
Linux, iOS, Android windows. Is
this a place where people

694
00:33:34.280 --> 00:33:36.110
could get involved? If they're
looking to get involved in

695
00:33:36.110 --> 00:33:38.570
open source, can they maybe
help you with your documentation?

696
00:33:38.810 --> 00:33:41.270
Oh, absolutely. You know, we're
always looking for people to

697
00:33:41.270 --> 00:33:44.090
help. It's it's, you know,
if anybody's run open source

698
00:33:44.090 --> 00:33:46.880
project, they know that it's
very difficult to get help

699
00:33:46.880 --> 00:33:49.100
and get good help, you
know, people, a lot of

700
00:33:49.100 --> 00:33:50.720
times people tend to help,
but you know, they just

701
00:33:50.720 --> 00:33:52.910
don't have enough experience to
help properly. So it's always

702
00:33:52.910 --> 00:33:56.180
difficult to find the right,
you know, good, good help,

703
00:33:56.210 --> 00:33:57.950
but anybody that wants to
come in and help jump

704
00:33:57.950 --> 00:34:00.590
in there, we have issues
Mark in our GitHub that

705
00:34:00.590 --> 00:34:03.380
are Mark kind of good
for beginner kind of issues

706
00:34:03.410 --> 00:34:05.030
that, you know, anybody can
jump in there and help

707
00:34:05.030 --> 00:34:07.820
him fix. And it's really
community driven. You know, we

708
00:34:07.820 --> 00:34:11.450
have a small group of
kind of a have guys

709
00:34:11.450 --> 00:34:13.610
that help help maintain it,
you know, from day to

710
00:34:13.610 --> 00:34:15.860
day, you know, checking, pull
requests and things like that.

711
00:34:15.890 --> 00:34:18.260
But you know, it's pretty
much all volunteer work. You

712
00:34:18.260 --> 00:34:20.540
know, people that are jumping
in there to help because

713
00:34:20.540 --> 00:34:22.490
they feel like they really
want to move the project

714
00:34:22.490 --> 00:34:24.710
forward. Cause they have their
own vested interest in seeing

715
00:34:24.710 --> 00:34:28.100
the project succeed. So all
really a volunteer labor of

716
00:34:28.100 --> 00:34:30.560
love from all of us.
Well, I look where I'm

717
00:34:30.560 --> 00:34:33.230
looking right now and I
see 16 open issues all

718
00:34:33.230 --> 00:34:36.650
marked as good first issue.
Great opportunity to get involved

719
00:34:36.650 --> 00:34:38.570
in open source. And if
you're looking to make a

720
00:34:38.570 --> 00:34:42.860
game, do it, check it
out. Mano game.net. Thank you

721
00:34:42.860 --> 00:34:45.620
so much, Tom Spillman for
chatting with me today. Thanks

722
00:34:45.620 --> 00:34:49.010
Scott. It's great. This has
been another episode of Hansel

723
00:34:49.010 --> 00:35:11.350
minutes. We'll see you again
next week. <inaudible>.

