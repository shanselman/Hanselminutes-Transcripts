WEBVTT FILE

1
00:00:05.370 --> 00:00:16.680
<inaudible> from Hanselman it's dot
com. It's Hansel minutes or

2
00:00:16.680 --> 00:00:21.210
weekly discussion with web developer
and technologists. Scott Hanselman. This

3
00:00:21.210 --> 00:00:25.020
is Lawrence Ryan announcing show number
two Oh two recorded live

4
00:00:25.050 --> 00:00:30.360
Tuesday, February 9th, 2010. Support for Hanselman
it's is provided by Tellerik

5
00:00:30.360 --> 00:00:33.960
rad controls, the most comprehensive
suite of components for windows

6
00:00:33.960 --> 00:00:43.980
forms and asp.net web applications.
online@wwwdottlerik.com. In this episode, Scott

7
00:00:43.980 --> 00:00:50.040
talks with Readify senior consultant.
Take them ADI. Hi, this

8
00:00:50.040 --> 00:00:52.290
is Scott Hanselman and this
is another episode of Hansel

9
00:00:52.290 --> 00:00:55.620
minutes. We've just had our
200th episode and now to

10
00:00:55.620 --> 00:00:57.900
hit off the next 200,
I'm sitting here today with

11
00:00:57.930 --> 00:01:01.380
Tatum, ADI from Australia. He's
actually a senior consultant at

12
00:01:01.380 --> 00:01:05.130
ratify and he's currently sleeping
on my couch. How are

13
00:01:05.130 --> 00:01:07.860
you, sir? Good and so
wonderful couch. It is quite

14
00:01:07.860 --> 00:01:11.100
lovely. Thank you. So you've,
you've been working on some

15
00:01:11.100 --> 00:01:14.130
stuff with your, with your
partner, Damon, Damien Edwards, right?

16
00:01:14.130 --> 00:01:16.590
And he just came to
work for Microsoft. Actually, we

17
00:01:16.590 --> 00:01:18.630
split up the web duo.
He's come to Microsoft and

18
00:01:18.630 --> 00:01:20.370
I'm having to hold the
Fort back down in Australia.

19
00:01:20.460 --> 00:01:24.030
Okay. But partners in crime
that you guys are, you

20
00:01:24.030 --> 00:01:27.990
put together an interesting project
and it's called web forums

21
00:01:27.990 --> 00:01:30.180
MVP, at least as, as,
as of the time of

22
00:01:30.180 --> 00:01:32.730
this recording, although maybe it
might be called something else

23
00:01:32.730 --> 00:01:36.300
some other day. But when
I hear the name MVP,

24
00:01:36.300 --> 00:01:39.210
I immediately think about the
Microsoft I'm, you know, most

25
00:01:39.210 --> 00:01:42.060
valuable professional, but this is
about the pattern. What is

26
00:01:42.060 --> 00:01:47.070
the difference between MVP and
MVC MVC? If we think

27
00:01:47.070 --> 00:01:49.890
about in a websites. So
sticking with asp.net is that

28
00:01:49.890 --> 00:01:52.710
a sort of discussion area
is really about the controller

29
00:01:52.890 --> 00:01:56.070
getting the actual, the request
up front. So it goes

30
00:01:56.070 --> 00:01:58.020
to the controller, it can
make a decision. And then

31
00:01:58.020 --> 00:02:01.260
it ultimately delegates to the
view. MVP kind of flips

32
00:02:01.260 --> 00:02:04.200
that a little bit. So
it's model view, presenter. The

33
00:02:04.200 --> 00:02:05.940
view has a little bit
of intelligence to it. So

34
00:02:05.940 --> 00:02:08.130
we'd actually will have things
like buttons and events and

35
00:02:08.130 --> 00:02:10.920
whatever else. And you'll hit
that first. The presented knows

36
00:02:10.920 --> 00:02:13.500
how to react to that,
build the relevant information and

37
00:02:13.680 --> 00:02:15.960
get that back down to
the view. Okay. So an

38
00:02:15.960 --> 00:02:20.010
MVC, there's a, there's a
route that's kind of ignored.

39
00:02:20.310 --> 00:02:25.140
It's almost like MVC are@leastinthecontextofasp.net,
where that route takes the

40
00:02:25.140 --> 00:02:29.370
incoming URL and a miracle
happens. And the controller gets

41
00:02:29.370 --> 00:02:33.330
involved. What happens in MVP
from the point of the

42
00:02:33.330 --> 00:02:36.750
URL is requested and then
something happens. So an MVP

43
00:02:37.190 --> 00:02:39.900
in an asp.net sense, your
view will be something like

44
00:02:39.900 --> 00:02:43.050
the ASP X page. And
the request will go to

45
00:02:43.050 --> 00:02:45.780
that SPX page. You might
have a button click or

46
00:02:45.780 --> 00:02:48.570
something like that, fires the
present or react to that.

47
00:02:48.870 --> 00:02:50.490
And then it goes back
to the view before it

48
00:02:50.490 --> 00:02:52.380
goes out to the response.
So the presenter's kind of

49
00:02:52.380 --> 00:02:54.780
involved in the middle of
the request, whereas the control

50
00:02:54.780 --> 00:02:58.140
was involved up front is
the presenter a kind of

51
00:02:58.140 --> 00:03:01.060
a router of its own.
In some ways you could

52
00:03:01.060 --> 00:03:04.180
go and change out the
view through a presented, but

53
00:03:04.540 --> 00:03:07.060
really it's about taking the
view that's there and just

54
00:03:07.510 --> 00:03:10.210
putting displaying the right panels,
setting the right States and

55
00:03:10.210 --> 00:03:13.710
various things, Help me get
the difference between a view

56
00:03:13.710 --> 00:03:15.660
and a presenter, a little
more separate, because I think

57
00:03:15.660 --> 00:03:19.140
that some people maybe who
myself and maybe people who

58
00:03:19.140 --> 00:03:21.180
don't speak English might think
that view and presenter are

59
00:03:21.180 --> 00:03:24.900
kind of the same thing.
So a view is more

60
00:03:24.900 --> 00:03:27.330
about the rendering. So this
is the market we have,

61
00:03:27.330 --> 00:03:29.880
and this is how it
sits. We want that one

62
00:03:29.880 --> 00:03:32.460
to be enabled this one
to be disabled. The presenter

63
00:03:32.460 --> 00:03:34.650
is what makes those decisions.
So when they click this

64
00:03:34.650 --> 00:03:37.110
button, I need to go
back to the database, save

65
00:03:37.110 --> 00:03:39.690
this record, and then I
need to display some information

66
00:03:39.720 --> 00:03:42.300
there. So it has the
intelligence and that's also the

67
00:03:42.300 --> 00:03:44.400
area that, where we want
to have as much of

68
00:03:44.400 --> 00:03:46.470
our code as possible so
that we can unit test

69
00:03:46.470 --> 00:03:50.520
it. But given what you
just said, couldn't you art

70
00:03:50.520 --> 00:03:53.910
couldn't one argue that we
already have model view presenter

71
00:03:54.000 --> 00:03:57.330
in web forms by itself
that the ASP X page

72
00:03:58.020 --> 00:04:01.080
is the view and the
presenters, the code behind It

73
00:04:01.080 --> 00:04:03.510
is very close to that,
but it's not a very

74
00:04:03.510 --> 00:04:05.820
clean implementation of it. And
it's very easy to blow

75
00:04:05.820 --> 00:04:07.650
those lines and get them
mixed up a little bit.

76
00:04:07.920 --> 00:04:10.230
And that's where you get
into these really spaghetti, ugly

77
00:04:10.230 --> 00:04:13.200
web forms sites. And do
you think that that's one

78
00:04:13.200 --> 00:04:14.520
of the reasons why a
lot of people will kind

79
00:04:14.520 --> 00:04:19.260
of in the MVC camp,
malign, MVP as a concept

80
00:04:19.890 --> 00:04:22.890
or malign web forums rather?
Yeah. So One of the

81
00:04:22.890 --> 00:04:25.110
things that I really like
about MVC coming along is

82
00:04:25.110 --> 00:04:27.690
that it's not only giving
people a new framework to

83
00:04:27.690 --> 00:04:31.140
work with, but suddenly there's
a whole set of.net developers

84
00:04:31.140 --> 00:04:33.870
that have started to care
about things like architectures in

85
00:04:33.870 --> 00:04:36.900
jQuery and CSS. And there's
all this hidden training that's

86
00:04:36.900 --> 00:04:39.060
come along the way. And
for a lot of people

87
00:04:39.060 --> 00:04:41.070
we've been working on web
forms before that. And I

88
00:04:41.070 --> 00:04:43.890
know I was certainly one
of those people originally where

89
00:04:43.890 --> 00:04:45.720
you could fall into that
spaghetti and get a bit

90
00:04:45.720 --> 00:04:48.750
of a mess. So MVC
was the nice refresh. And

91
00:04:48.750 --> 00:04:51.210
do you think that MVC
kind of makes people happy

92
00:04:51.210 --> 00:04:55.830
because of its its rigidity
it's, it's focused on separation

93
00:04:55.830 --> 00:04:59.340
of concerns and that people
with a newly renewed focus

94
00:04:59.340 --> 00:05:02.640
of separation of concerns, then
look back at the web

95
00:05:02.640 --> 00:05:04.260
forms that they did before.
And they said, wow, it

96
00:05:04.260 --> 00:05:07.620
was all just kind of
mushed together. Sure. And MVC

97
00:05:07.620 --> 00:05:09.720
is very much about you
put this here and then

98
00:05:09.720 --> 00:05:11.370
you put that there and
then this here, and you've

99
00:05:11.370 --> 00:05:14.940
got that separation of concerns
and it's very much convention

100
00:05:14.940 --> 00:05:17.310
as well. Whereas web forms,
if you want to get

101
00:05:17.310 --> 00:05:19.110
that nice architecture, you've really
got to work for it

102
00:05:19.110 --> 00:05:21.240
a little bit. It doesn't
have anywhere near that rigidity

103
00:05:21.240 --> 00:05:25.110
at all. So is there
a w by creating a

104
00:05:25.110 --> 00:05:28.800
project on top of web
forms by enhancing web forms

105
00:05:28.800 --> 00:05:30.960
with web form, what is,
what you're calling web forms,

106
00:05:30.960 --> 00:05:34.650
MVP or web forms plus
plus are, you're making a

107
00:05:34.650 --> 00:05:38.010
statement about web forms, right?
Just by virtue of the

108
00:05:38.010 --> 00:05:41.160
existence of the project, that,
what are you saying? Are

109
00:05:41.160 --> 00:05:44.220
you saying that it is
deficient in some way that

110
00:05:44.220 --> 00:05:47.460
web forms has dropped the
ball and you're picking it

111
00:05:47.460 --> 00:05:49.470
up? Or what, what are
you, what is your project

112
00:05:49.470 --> 00:05:52.560
saying by its existence? Well,
You'll see that there's value

113
00:05:52.560 --> 00:05:54.780
in web forms. The same
as there's obviously value in

114
00:05:54.780 --> 00:05:57.590
NVC. It really depends on
what do you want to

115
00:05:57.590 --> 00:05:59.660
work with? And what's the
platform that's right for you

116
00:06:00.200 --> 00:06:03.350
with web forms existing, we
felt that we could improve

117
00:06:03.350 --> 00:06:06.020
upon it and help out
with these architectures, put some

118
00:06:06.020 --> 00:06:07.820
of the base framework in
place that allow you to

119
00:06:07.820 --> 00:06:10.730
do clean web forms, development,
and testability. So we're not

120
00:06:10.730 --> 00:06:12.260
trying to make a statement
of whether you should use

121
00:06:12.260 --> 00:06:14.870
MVC or web forms, but
if you are using web

122
00:06:14.870 --> 00:06:17.570
forms, it'd be better. If
you used web forms, MVP,

123
00:06:17.600 --> 00:06:19.340
we think it'll give you
a better project. It will

124
00:06:19.340 --> 00:06:21.970
make you a better web
forms, developer, Which are making

125
00:06:21.970 --> 00:06:24.790
a step statement that you
think there's value in and

126
00:06:24.790 --> 00:06:27.760
web forms. Definitely. I mean,
and I'm not trying by,

127
00:06:27.820 --> 00:06:29.770
by, by the being the
interviewer, I'm not trying to

128
00:06:29.770 --> 00:06:32.980
pick a side really, other
than the side of what

129
00:06:32.980 --> 00:06:35.530
I always pick, which is
use the framework that makes

130
00:06:35.530 --> 00:06:37.570
you happy. But I think
there's a lot of people

131
00:06:37.570 --> 00:06:40.900
arguing about MVC versus web
forums, who some people have

132
00:06:40.900 --> 00:06:43.840
just insisted. You should simply
abandon web forums. It's a

133
00:06:43.840 --> 00:06:46.540
useless thing. And, and, you
know, you're a guy I

134
00:06:46.540 --> 00:06:49.420
respect in the community. So
I feel like there's kind

135
00:06:49.420 --> 00:06:52.270
of a vote of confidence
by the fact that you're

136
00:06:52.270 --> 00:06:56.530
investing in platforms. There's obviously
all the business decisions around.

137
00:06:56.590 --> 00:06:59.380
Do you have an existing
project? You don't need to

138
00:06:59.380 --> 00:07:01.900
go and rewrite that in
MVC of night, but even

139
00:07:01.900 --> 00:07:03.730
a lot of the new
projects there certainly is that

140
00:07:03.730 --> 00:07:05.320
bit of a dissing of
web form saying we're not

141
00:07:05.320 --> 00:07:07.780
going to use that. And
I find that each of

142
00:07:07.780 --> 00:07:10.120
them do definitely have their
place. I've used both of

143
00:07:10.120 --> 00:07:13.810
them on recent projects. Greenfield's
engagement starting from scratch of

144
00:07:13.810 --> 00:07:15.700
saying, in this case here,
web forms is going to

145
00:07:15.700 --> 00:07:17.530
work better because of the
team or because of what

146
00:07:17.530 --> 00:07:19.500
we had to produce, or
some of the controls that

147
00:07:19.500 --> 00:07:24.040
are available existing code. We
had not necessarily legacy code,

148
00:07:24.040 --> 00:07:26.110
but just stuff we wanna
integrate with, or there's MVC,

149
00:07:26.110 --> 00:07:28.570
where that was particularly suited
to some sort of framework

150
00:07:28.570 --> 00:07:31.030
or architectural Working in that
sense. Have you made a

151
00:07:31.030 --> 00:07:33.400
lot of hybrid applications? I've
always been a big proponent

152
00:07:33.400 --> 00:07:37.020
of, you might have like
the backend administrative section and

153
00:07:37.120 --> 00:07:39.490
web forms and some certain
things on the front end,

154
00:07:39.490 --> 00:07:41.440
or you might mix and
match on a URL by

155
00:07:41.440 --> 00:07:45.100
URL basis, whether you want
web forums or MVC. Yep.

156
00:07:45.160 --> 00:07:48.520
Definitely the administration. Site's a
good example that actually done

157
00:07:48.520 --> 00:07:51.220
that a little bit, sort
of in reverse of where

158
00:07:51.220 --> 00:07:54.460
we had a MVC based
site. And then for a

159
00:07:54.460 --> 00:07:57.400
really quick administration system, we
just dropped a dynamic data

160
00:07:57.400 --> 00:08:00.130
wrapping, which is web forms
based and off we went.

161
00:08:00.340 --> 00:08:03.120
And that came as a
really simple access plan. Okay.

162
00:08:03.190 --> 00:08:05.380
So let's, let's dig in
a little detail here. So

163
00:08:05.380 --> 00:08:08.080
we, I think we all
who are listening understand generally

164
00:08:08.080 --> 00:08:10.960
how, how web forms works
and, you know, a quick

165
00:08:10.960 --> 00:08:14.050
distinction to explain kind of
the difference between the MVC

166
00:08:14.050 --> 00:08:16.570
and web forms. Web forms
is a, is a control

167
00:08:16.570 --> 00:08:21.100
abstraction on top of HTML
and HTTP. And with that

168
00:08:21.100 --> 00:08:23.410
control abstraction, you of course
get the ability to have

169
00:08:23.410 --> 00:08:28.000
controls with those controls come
their behavior, their rendering, you

170
00:08:28.000 --> 00:08:31.480
know, the logic incorporated within
those controls. And you also

171
00:08:31.480 --> 00:08:34.810
get an eventing model, which
is a stateful inventing model

172
00:08:34.810 --> 00:08:39.610
over a stateless API, which
is HTTP. What is web

173
00:08:39.610 --> 00:08:42.190
forms, MVP as a project,
bring on top of that.

174
00:08:43.090 --> 00:08:45.610
We put in a lot
of the base classes and

175
00:08:45.610 --> 00:08:48.340
things like that that you'd
want to use to apply

176
00:08:48.370 --> 00:08:52.690
a nice implementation of an
MVP based architecture to web

177
00:08:52.690 --> 00:08:54.910
forms. So it's not hard
to do, but it's a

178
00:08:54.910 --> 00:08:56.760
little fiddly to go and
get all the right stuff

179
00:08:56.760 --> 00:08:58.410
and all the right places
to give you that clean

180
00:08:58.410 --> 00:09:02.030
architecture. So that's what we've
gone. And So what is

181
00:09:02.030 --> 00:09:04.310
it exactly? Is it a
series of libraries? Is it

182
00:09:04.310 --> 00:09:06.740
a new project type? Walk
me through a hello world

183
00:09:07.550 --> 00:09:12.140
scenario in an M web
forms, MVP world. So the

184
00:09:12.140 --> 00:09:13.970
first thing we have is
there is a DLL we

185
00:09:13.970 --> 00:09:17.240
ship, which is just a
single DLL. So you'd add

186
00:09:17.240 --> 00:09:19.280
that as a reference to
your project. You'd have a,

187
00:09:19.670 --> 00:09:21.950
you start off with say
a web application project like

188
00:09:21.950 --> 00:09:24.230
you would normally do with
web ports. Then what you

189
00:09:24.230 --> 00:09:26.420
do is build out the
various parts of your website

190
00:09:26.480 --> 00:09:30.470
as user controls. So one
of the really nice things

191
00:09:30.470 --> 00:09:33.350
about web forms and that
control abstraction is not necessarily,

192
00:09:34.010 --> 00:09:35.690
there's the usual argument of
saying, Oh, I can drop

193
00:09:35.690 --> 00:09:37.700
on this really big, fancy
data grid. I don't actually

194
00:09:37.700 --> 00:09:39.590
find that the best part.
What I really like is

195
00:09:39.590 --> 00:09:42.200
the ability to composite pages.
So you've got something like

196
00:09:42.200 --> 00:09:45.080
a really complex eCommerce site
and you got menus down

197
00:09:45.080 --> 00:09:46.760
the side that had dynamic
and carts and the top

198
00:09:46.760 --> 00:09:48.230
and all that stuff. You
can build each of those

199
00:09:48.230 --> 00:09:52.010
sections of your pages as
controls with web forms, MVP,

200
00:09:52.010 --> 00:09:54.770
you inherit each of those
from an MVP user control.

201
00:09:55.490 --> 00:09:58.010
You define a model that
it uses and that's a

202
00:09:58.010 --> 00:10:01.070
presentation model. And you put
an attribute on the code

203
00:10:01.070 --> 00:10:03.590
behind that user control, which
says what type of presenter

204
00:10:03.600 --> 00:10:06.920
to use. And at that
point there, you've got the

205
00:10:06.920 --> 00:10:09.200
architecture working. So you go
off and create a class

206
00:10:09.200 --> 00:10:11.630
for the presenter as a
base class you're inherit from,

207
00:10:11.810 --> 00:10:13.910
and it'll wire all the
rest of it up. Okay.

208
00:10:14.120 --> 00:10:16.700
So let's say, I want
to have, if I, if

209
00:10:16.700 --> 00:10:18.230
I can help me out
here, we'll do an, we'll

210
00:10:18.230 --> 00:10:20.540
do an on the fly
example. Let's see, I've got

211
00:10:20.540 --> 00:10:23.060
my application. I want to
add a ticker to it.

212
00:10:23.150 --> 00:10:25.130
And a ticker is something
who's kind of logic and

213
00:10:25.130 --> 00:10:28.430
everything would be kind of
orthogonal. I would make the,

214
00:10:28.440 --> 00:10:30.980
make a user control. Describe
what I want that ticker

215
00:10:30.980 --> 00:10:33.140
to look like. And I
could use CSS or dibs,

216
00:10:33.140 --> 00:10:36.080
or I could use tables
or whatever that, that has

217
00:10:36.080 --> 00:10:38.900
a, a code behind with
it. So that's, We have

218
00:10:38.900 --> 00:10:41.090
a code behind that would
normally inherit just from user

219
00:10:41.090 --> 00:10:43.940
control, right? You would change
that to inherit from MVP

220
00:10:43.940 --> 00:10:46.760
user control of type model.
So the same as when

221
00:10:46.760 --> 00:10:48.920
you do a view in
MVC, have a strongly typed

222
00:10:48.920 --> 00:10:51.680
model. That's what we've got
for web forms now as

223
00:10:51.680 --> 00:10:54.800
well. So you're doing MVP
user control of ticker model.

224
00:10:55.340 --> 00:10:57.890
He put an attribute on
it, present a binding type

225
00:10:57.890 --> 00:11:01.940
of ticket presenter. That's the
control done off you go

226
00:11:01.940 --> 00:11:05.660
create new class, call it
ticket presenter inherit from presenter

227
00:11:05.720 --> 00:11:09.350
of ticker model. At that
point there, you've got a

228
00:11:09.620 --> 00:11:12.320
environment which feels very familiar
to coding and a page

229
00:11:12.320 --> 00:11:14.150
behind. So you've got a
load event that you can

230
00:11:14.150 --> 00:11:18.440
subscribe to. You can push
information into the model and

231
00:11:18.470 --> 00:11:20.750
use it. You've also got
support for things like inversion

232
00:11:20.750 --> 00:11:22.010
of control, as you can
go and pull in all

233
00:11:22.010 --> 00:11:24.320
your repositories and stuff like
that, if you will. Okay.

234
00:11:24.350 --> 00:11:26.690
So let me make sure
I understand this. I've got

235
00:11:26.690 --> 00:11:30.170
my, my ASC X page.
I've got my ASC X

236
00:11:30.800 --> 00:11:33.890
ASX dot VB or dot
CS that is now derived

237
00:11:33.890 --> 00:11:36.980
from a new base class.
And that's the view. And

238
00:11:36.980 --> 00:11:39.710
that's my view. And do
I have a lot of

239
00:11:39.710 --> 00:11:42.230
code in that code behind?
No, a lot of the

240
00:11:42.230 --> 00:11:44.180
sites we've been using this
on, we literally don't have

241
00:11:44.210 --> 00:11:46.580
any code in that code
behind it all. So the

242
00:11:46.580 --> 00:11:49.070
way we then get information
out actually rendered onto the

243
00:11:49.070 --> 00:11:52.520
page is we use binding
syntax in the market. So

244
00:11:52.550 --> 00:11:56.290
very similar, the web forms,
a view engine in NVC,

245
00:11:56.770 --> 00:11:59.410
you can go out and
in your markup use angle

246
00:11:59.410 --> 00:12:04.180
bracket percent equals model.org. We
also support angle bracket percent

247
00:12:04.210 --> 00:12:06.760
hash model dot. What that
allows you to do is

248
00:12:06.760 --> 00:12:08.860
say, you've got a repeater
or something like that to

249
00:12:08.860 --> 00:12:12.280
list out each vertical or
items. You can go in

250
00:12:12.280 --> 00:12:16.720
the market, ASP repeater data
source equals angle, bracket percent

251
00:12:16.720 --> 00:12:20.800
hash model dot ticket items.
So that right. Okay. And

252
00:12:20.800 --> 00:12:23.280
it'll automatically trigger the binding
at the right point in

253
00:12:23.300 --> 00:12:25.750
life cycle so that your
repeater goes and renders all

254
00:12:25.750 --> 00:12:28.200
that content out. And that's
the kind of sloppy code

255
00:12:28.200 --> 00:12:30.990
I'd shove in a winner
in a load event. Yeah.

256
00:12:30.990 --> 00:12:32.970
So normally you'd get the
load, you'd load it somehow.

257
00:12:32.970 --> 00:12:35.490
And then you can repeat
a one.data source equals something

258
00:12:35.490 --> 00:12:38.460
repeated.data binds. So we get
rid of all that. So

259
00:12:38.460 --> 00:12:41.130
your markup looks very much
like a, almost like a

260
00:12:41.130 --> 00:12:43.410
templating language. So it's still
web forms. You still use

261
00:12:43.410 --> 00:12:46.290
controls, but it's a bit
more template style, all of

262
00:12:46.290 --> 00:12:48.840
your logics back in the
presenters. Okay. So I've got

263
00:12:48.840 --> 00:12:52.260
nothing in my code behind
I've associated my view and

264
00:12:52.260 --> 00:12:56.700
my presenter using the, the
template style, you know, something

265
00:12:56.730 --> 00:13:01.620
of type, explain to me
again, what that looks like.

266
00:13:01.950 --> 00:13:07.890
The view derives from MVP
view, a user control of

267
00:13:07.920 --> 00:13:11.760
type take your model in
this case. And where is

268
00:13:11.760 --> 00:13:15.480
the presenter? The presented class
is an attribute that you

269
00:13:15.480 --> 00:13:17.520
put onto the user control.
So you put a presented

270
00:13:17.520 --> 00:13:19.710
binding attribute until the type
of presenter you want it

271
00:13:19.710 --> 00:13:22.170
to create. And when it
hits that user control, it'll

272
00:13:22.170 --> 00:13:24.990
go and find that attribute
and go on. So the

273
00:13:24.990 --> 00:13:28.350
view and the presenter are
associated only by this attribute.

274
00:13:28.620 --> 00:13:31.470
Correct. Now that's interesting. So
that, that must have been

275
00:13:32.640 --> 00:13:34.770
an interesting design discussion that
you could have done it

276
00:13:34.770 --> 00:13:38.760
as an attribute. You could
have, if you had multiple

277
00:13:38.760 --> 00:13:41.250
inheritance, you could have done
it like that. You probably

278
00:13:41.250 --> 00:13:44.610
could have passed it in
a type type of T

279
00:13:44.610 --> 00:13:47.760
comma of an another, have
another type T one and

280
00:13:47.760 --> 00:13:50.550
T two. You probably also
could have put together some

281
00:13:50.550 --> 00:13:53.310
kind of a mapping in
the global ASX, because ultimately

282
00:13:53.310 --> 00:13:56.970
what you're trying to do
is tunnel two types into

283
00:13:56.970 --> 00:14:00.930
this system. Why did you
choose to derive one and

284
00:14:00.930 --> 00:14:04.380
include the presenter while the
other one included them all?

285
00:14:04.920 --> 00:14:06.570
So the first thing you
pick up on there is

286
00:14:06.570 --> 00:14:08.040
the idea that we could
have put in a whole

287
00:14:08.040 --> 00:14:10.140
bunch of places. And we
do actually allow that, so

288
00:14:10.140 --> 00:14:12.480
that the way that it
finds, which presented to use

289
00:14:12.480 --> 00:14:15.570
for review call a presented
discovery strategy, and you can

290
00:14:15.570 --> 00:14:17.760
completely replace how that works.
Oh. So if you don't

291
00:14:17.760 --> 00:14:20.610
like the posted notes, style
of attributes on the class,

292
00:14:20.910 --> 00:14:22.770
Put it wherever you want.
You can go and store

293
00:14:22.770 --> 00:14:24.540
them in SQL database, if
you want. Probably not the

294
00:14:24.540 --> 00:14:27.030
best plan, but you could
share the reason we did

295
00:14:27.030 --> 00:14:29.010
it through attributes. Well, first
of all, the reason that

296
00:14:29.010 --> 00:14:32.580
the model is there as
a generic type argument is

297
00:14:32.580 --> 00:14:35.550
so that we get all
the nice IntelliSense support actually

298
00:14:35.550 --> 00:14:37.620
in the view markups. So
you go model dot Pitt

299
00:14:37.620 --> 00:14:39.900
shows up. We need inheritance
to do that. And that

300
00:14:39.900 --> 00:14:42.720
makes sense because it's part
of the views contract, what

301
00:14:42.720 --> 00:14:46.980
data it requires in the
model, the presenter though, we,

302
00:14:47.010 --> 00:14:48.870
there are some other scenarios
that we wanted to support

303
00:14:48.900 --> 00:14:51.060
around. You can actually go
move that attribute off to

304
00:14:51.140 --> 00:14:53.900
page and say, anytime you
find one of these user

305
00:14:53.900 --> 00:14:57.350
controls, use that presenter for,
so then putting that user

306
00:14:57.350 --> 00:15:00.050
control on different pages could
have different presenters wide up

307
00:15:00.050 --> 00:15:02.930
to them. And we also
support things like composite views

308
00:15:02.930 --> 00:15:07.300
and shared presenters, this other
architectures. Hi, this is Scott

309
00:15:07.300 --> 00:15:09.910
Hanselman from another parallel universe,
got to tell you about

310
00:15:09.910 --> 00:15:11.770
some of our things our
sponsors are doing. They make

311
00:15:11.770 --> 00:15:15.730
this free podcast possible. If
you're developing a new line

312
00:15:15.730 --> 00:15:18.190
of business application, you've probably
tried the latest version of

313
00:15:18.190 --> 00:15:20.800
server light. Now you can
get even better results by

314
00:15:20.800 --> 00:15:23.800
combining the functionality and server
Lite for beta, with some

315
00:15:23.800 --> 00:15:25.720
of the richness or the
third party controls from our

316
00:15:25.720 --> 00:15:29.320
friends at Tellerik. They're the
first vendors to offer native

317
00:15:29.320 --> 00:15:31.360
support for the server Lite
for beta and their rad

318
00:15:31.360 --> 00:15:34.270
controls. They've got a new
server Lite for CTP suite

319
00:15:34.270 --> 00:15:37.000
of these controls. They let
you tap into the frameworks,

320
00:15:37.000 --> 00:15:39.280
great potential. You've got native,
right mouse click and all

321
00:15:39.280 --> 00:15:42.470
the new features, the server
line there's 38 controls that

322
00:15:43.000 --> 00:15:45.250
give you all these features.
You can start building those

323
00:15:45.250 --> 00:15:48.310
compelling line of business applications
right away. I encourage you

324
00:15:48.310 --> 00:15:53.230
to check those products out
at tellerik.com/silverlight and, you know,

325
00:15:53.230 --> 00:15:56.260
thank Tellerik for supporting Don
and rock supporting Hansel minutes

326
00:15:56.260 --> 00:16:00.220
on their Facebook fan page
at facebook.com/tellerik. Now back to

327
00:16:00.220 --> 00:16:03.520
the show. So that gives
me in my mind, at

328
00:16:03.520 --> 00:16:06.130
least I think I can
understand the kind of standard

329
00:16:06.130 --> 00:16:09.880
page load scenario, that initial
load it, you you've tie-dyed

330
00:16:09.880 --> 00:16:12.580
up, you know, what could
be potentially a mess and

331
00:16:12.580 --> 00:16:15.820
page load. What about the
post-bac model? What about the

332
00:16:15.820 --> 00:16:18.340
event model? There could be
the same multiple buttons on

333
00:16:18.340 --> 00:16:21.220
a combo box in this
ticker, all of which could

334
00:16:21.640 --> 00:16:25.030
have events behind them or
multiple events. How does that

335
00:16:25.030 --> 00:16:28.630
get handled? So you would
have the controls as say,

336
00:16:28.690 --> 00:16:31.750
ASP button controls or whatever
you want in your markup.

337
00:16:32.320 --> 00:16:35.260
You would subscribe to the
events in the market. And

338
00:16:35.260 --> 00:16:36.850
then this is one point
where you do have a

339
00:16:36.850 --> 00:16:38.680
little bit of code behind
in the view, but all

340
00:16:38.680 --> 00:16:40.720
you do is catch that
event and proxy it back

341
00:16:40.720 --> 00:16:43.690
up to the presenter. So
on the view, what you

342
00:16:43.690 --> 00:16:46.540
then do is same as
you're already inheriting from MVP

343
00:16:46.540 --> 00:16:49.690
user control of ticket model,
you then implement an eye

344
00:16:49.690 --> 00:16:52.360
tick of view, which describes
what events your view is

345
00:16:52.360 --> 00:16:55.210
going to raise back to
the presenter. And that's a

346
00:16:55.210 --> 00:16:57.460
grand total of like four
lines of code. And where

347
00:16:57.460 --> 00:16:59.260
does that interface come from?
You, you have to create

348
00:16:59.260 --> 00:17:01.210
that You would write that
yourself and the value of

349
00:17:01.210 --> 00:17:03.160
writing it yourself is that,
that means you can mock

350
00:17:03.160 --> 00:17:05.980
the view because the models
are concrete class, it's dumb.

351
00:17:05.980 --> 00:17:08.890
It's just a bunch of
properties. That's easy. The presenter,

352
00:17:09.070 --> 00:17:11.350
you don't have any dependencies
on it. They're all in

353
00:17:11.350 --> 00:17:13.900
version control, whatever you want
to do, the view is

354
00:17:13.900 --> 00:17:15.460
the bit that you need
to break out for testing.

355
00:17:15.910 --> 00:17:18.640
So having a view interface
allows you to completely mock

356
00:17:18.640 --> 00:17:21.010
all the interactions that use
a control for the purpose

357
00:17:21.010 --> 00:17:23.560
of testing the presenter. Okay.
So expand on that a

358
00:17:23.560 --> 00:17:26.770
little bit, because you know,
web forums, the one thing

359
00:17:26.770 --> 00:17:29.140
that people complain about is
that they can't test it.

360
00:17:29.890 --> 00:17:32.200
What are we testing and
what are we not testing?

361
00:17:32.200 --> 00:17:35.440
What parts of the system
go untested? And is that,

362
00:17:35.440 --> 00:17:37.690
or is that not okay.
Okay. So the only part

363
00:17:37.690 --> 00:17:40.600
of your code that you
wouldn't test is in the

364
00:17:40.600 --> 00:17:45.100
code behind files, those event
proxies. So your markup is

365
00:17:45.580 --> 00:17:48.550
basically markup in pretty much
any platform in the world.

366
00:17:48.550 --> 00:17:51.570
You don't really the mockup
output and that's fairly clean

367
00:17:51.570 --> 00:17:54.350
and obvious Unless you use
selenium or something like that.

368
00:17:54.410 --> 00:17:56.450
Yeah. Functional Testing was sent
on top of the Cheshire

369
00:17:56.720 --> 00:17:59.120
in a unit testing, since
we've moved all of the

370
00:17:59.120 --> 00:18:02.210
unit testable code into the
presenter, which is basically all

371
00:18:02.210 --> 00:18:06.560
of the logic. So that's
Everything in the code behind,

372
00:18:06.560 --> 00:18:08.420
or what I've previously thought
about as the code behind

373
00:18:08.760 --> 00:18:12.290
is just one line events
and one line wiring up

374
00:18:12.290 --> 00:18:15.350
of approximating, rather of those
events kind of up the

375
00:18:15.350 --> 00:18:18.740
chain And coding in the
presenter. Isn't really that much

376
00:18:18.800 --> 00:18:21.050
different from an initial experience,
point of view. So it's

377
00:18:21.050 --> 00:18:23.780
very different in the architectural
achieves, but you can still

378
00:18:23.780 --> 00:18:27.530
go request dot query, string,
response dot headers, all those

379
00:18:27.530 --> 00:18:30.110
are accessible, and that uses
the system dot web dot

380
00:18:30.110 --> 00:18:33.650
abstractions namespace, the same as
MVC does. So that's all

381
00:18:33.650 --> 00:18:36.620
unit testable and lockable as
well. So are you saying

382
00:18:36.620 --> 00:18:38.450
that if I was going
to go poking around from

383
00:18:38.450 --> 00:18:41.900
the code behind in query
string or form that I'm

384
00:18:41.900 --> 00:18:46.490
really using an abstract Title
from your presented? Yes, Because

385
00:18:46.490 --> 00:18:48.920
that's where my base class
now over in the presenter

386
00:18:49.190 --> 00:18:52.250
from the presenter, not from
MV MVP user, Well, you

387
00:18:52.250 --> 00:18:53.810
don't have any code in
there other than just your

388
00:18:53.810 --> 00:18:55.880
event proxy, so you wouldn't
be doing it. Okay. So

389
00:18:55.880 --> 00:18:59.030
what about more complex scenarios?
I know that in the

390
00:18:59.030 --> 00:19:00.920
web, a lot of the
web forms applications that I've

391
00:19:01.310 --> 00:19:05.090
written, I'll find myself catching
certain things in events, and

392
00:19:05.090 --> 00:19:08.240
then having to go and
check if not, as post-bac

393
00:19:08.240 --> 00:19:10.160
and you know, the next
thing, you know, what was

394
00:19:10.160 --> 00:19:13.370
a nice, simple page load
and a couple of events

395
00:19:13.370 --> 00:19:16.880
has turned into quite a
little state. So the first

396
00:19:16.880 --> 00:19:19.640
thing you really need to
get is the load event.

397
00:19:19.640 --> 00:19:22.100
Isn't the place where I
really should be working. Just

398
00:19:22.100 --> 00:19:23.540
moving a lot of your
code back to the nit

399
00:19:23.540 --> 00:19:26.870
event gets around 95% of
those is not post-bac problems.

400
00:19:26.900 --> 00:19:30.620
Why is that view state
starts tracking after a net.

401
00:19:30.620 --> 00:19:32.810
So if you say you
want to have a dropdown

402
00:19:32.810 --> 00:19:34.550
list and you want to
populate it with a list

403
00:19:34.550 --> 00:19:36.890
of countries, if you do
that in the load event,

404
00:19:37.550 --> 00:19:39.560
you go and add them
all in the person chooses

405
00:19:39.560 --> 00:19:41.210
something. When the page loads
up again, you're going to

406
00:19:41.210 --> 00:19:43.250
clear out that list and
add all the countries. And

407
00:19:43.250 --> 00:19:45.410
again, you've lost their selection.
So that's why you wrap

408
00:19:45.410 --> 00:19:48.170
it in the is not
post-bacc. The other problem with

409
00:19:48.170 --> 00:19:50.630
that approach is that you've
actually stored the information twice.

410
00:19:50.630 --> 00:19:53.000
It's once in your HTML.
And once in your view

411
00:19:53.010 --> 00:19:55.580
state, if we move that
code back to a net,

412
00:19:55.790 --> 00:19:58.940
the net event fires first,
you populate the contents to

413
00:19:58.950 --> 00:20:01.730
the dropdown list and then
view state starts tracking. So

414
00:20:01.730 --> 00:20:04.160
anything past this point is
where we'll go and interview

415
00:20:04.160 --> 00:20:08.060
state the user's selection and
the post-bacc will then get

416
00:20:08.090 --> 00:20:12.410
pushed into the control. So
you selected United States of America, and then

417
00:20:12.410 --> 00:20:14.450
the event will fire. They
click the button or whatever.

418
00:20:14.960 --> 00:20:17.780
So at that point they're
yes. On every time a

419
00:20:17.780 --> 00:20:20.300
page is executing on your
server, you're populating that combo

420
00:20:20.300 --> 00:20:22.910
box, but that's pretty cheap.
Or you can fix that

421
00:20:22.910 --> 00:20:25.490
with caching or whatever, but
you're not storing it redundantly

422
00:20:25.490 --> 00:20:27.680
in view state, and you
avoid a Lowe's is not

423
00:20:27.680 --> 00:20:30.830
postbac checks. So it's a
really good blog post about

424
00:20:30.830 --> 00:20:34.250
that, which Dave Reed actually
put up influence loop, Google,

425
00:20:34.580 --> 00:20:39.050
just view, state, infinite loop
on being, and you'll find

426
00:20:39.260 --> 00:20:41.150
all the information about how
that works. It was about

427
00:20:41.150 --> 00:20:43.790
three or four page article.
Do you find the use

428
00:20:43.790 --> 00:20:45.620
for page load ever? Really?
I mean, is that just

429
00:20:45.770 --> 00:20:47.860
what's what's what good is
it then? It's ironic that

430
00:20:47.860 --> 00:20:49.600
it's the place that you
end up when you hit

431
00:20:49.600 --> 00:20:52.740
up seven, but what do
you do with it? Not

432
00:20:52.740 --> 00:20:56.310
a lot go back to
or catch click events. So

433
00:20:56.310 --> 00:20:59.100
it's, it's, it's interesting. I'm
hearing kind of like the

434
00:20:59.100 --> 00:21:04.800
defaults that historically web forms
have given us don't enable

435
00:21:04.800 --> 00:21:07.770
best practices, Not at all.
And the templates really do

436
00:21:07.770 --> 00:21:10.260
need to get a bit
of refresh. One of the

437
00:21:10.260 --> 00:21:12.390
things we'd like to do
with web forms in VP

438
00:21:12.390 --> 00:21:14.370
is another step is to
actually drop a series of

439
00:21:14.370 --> 00:21:16.920
our own project templates that
go and clean up a

440
00:21:16.920 --> 00:21:19.590
bunch of that stuff. As
a first step. There's another

441
00:21:19.590 --> 00:21:24.330
project on code Plex, which
are XHTML templates. They do

442
00:21:24.330 --> 00:21:26.610
a little bit more than
just exceptional compliance. So what

443
00:21:26.610 --> 00:21:29.100
it is is when your
fall new web application project,

444
00:21:29.490 --> 00:21:31.650
you'll get one where the
web conflict's set up properly

445
00:21:31.650 --> 00:21:33.480
and you've got the right
master pages, the right doc

446
00:21:33.480 --> 00:21:35.940
types and things on it.
It also goes and cleans

447
00:21:35.940 --> 00:21:37.920
up a few of those
ugly points in the templates.

448
00:21:38.130 --> 00:21:40.890
So it basically sets you
up for success around X

449
00:21:40.890 --> 00:21:43.310
H, Right. And we'd like
to take those and extend

450
00:21:43.320 --> 00:21:46.080
it a little bit further
again, so that things like

451
00:21:46.170 --> 00:21:48.180
when you create a new
page, you don't have a

452
00:21:48.180 --> 00:21:50.760
page load handler there by
default because you shouldn't be

453
00:21:50.760 --> 00:21:55.850
using it. Okay. And I
remember a, You know, there's

454
00:21:55.850 --> 00:21:58.080
the thing about web forums
is there's the, do you

455
00:21:58.080 --> 00:22:00.990
choose to respond to an
event via an actual event,

456
00:22:01.170 --> 00:22:03.150
or do you choose to
do it via an override?

457
00:22:04.020 --> 00:22:07.530
Do you have any opinions
about that In using the

458
00:22:07.530 --> 00:22:11.130
library or with web forms,
MVP you'd be subscribing from

459
00:22:11.130 --> 00:22:13.110
the presenter. So in that
sense you would be subscribing

460
00:22:13.110 --> 00:22:15.960
to an event. Okay. Sometimes
though I do find myself

461
00:22:15.960 --> 00:22:17.880
from having to write code
in master pages or something

462
00:22:17.880 --> 00:22:20.430
like that. And in those
cases, they're all always gone

463
00:22:20.430 --> 00:22:22.770
subscribed to the event rather
than the override. It's just

464
00:22:22.770 --> 00:22:26.850
a lot more explicit and
less blackout. So speaking of

465
00:22:26.850 --> 00:22:29.670
black arts, how, how trusted
is this? I mean, how

466
00:22:29.670 --> 00:22:31.080
much, what have you actually
done with this? Is this

467
00:22:31.080 --> 00:22:32.970
just a spike that you
kind of been screwing around

468
00:22:32.970 --> 00:22:35.430
with? Or is this something
that you've actually put into

469
00:22:35.430 --> 00:22:39.240
production? This is grown out
of several of the projects

470
00:22:39.240 --> 00:22:42.150
that I've worked on as
a consultant with Damien Edwards,

471
00:22:42.150 --> 00:22:44.220
who was largely the one
that started the framework. And

472
00:22:44.220 --> 00:22:46.470
then on recent projects, we
started working together on it.

473
00:22:46.980 --> 00:22:49.050
And one of the main
ones is actually the largest

474
00:22:49.050 --> 00:22:52.860
retail eCommerce site in Australia.
And it's pushing several million

475
00:22:52.860 --> 00:22:54.840
page views a day through
this framework at the moment

476
00:22:54.870 --> 00:22:57.270
across quite a large server
farm. So out of that,

477
00:22:57.270 --> 00:22:59.790
we've gone and fixed all
the memory leaks and gone

478
00:22:59.790 --> 00:23:01.830
and done all the performance
fixes and all that sort

479
00:23:01.830 --> 00:23:04.140
of fun. The next one
is actually being picked up

480
00:23:04.140 --> 00:23:06.810
on us and Australian government
projects. So they're pretty confident

481
00:23:06.810 --> 00:23:09.450
to adopt it themselves. It's
all open source. It's up

482
00:23:09.450 --> 00:23:14.370
on code Plex. It's licensed
on MSPL and it's pretty

483
00:23:14.370 --> 00:23:18.840
stable so far. How complicated
is it? It's really not

484
00:23:18.840 --> 00:23:21.630
that complicated. There's about 25
classes all up. They're all

485
00:23:21.630 --> 00:23:24.120
pretty small. A lot of
it's just, you know, faces

486
00:23:24.120 --> 00:23:27.390
the right amount of wiring.
There are some crazy parts

487
00:23:27.390 --> 00:23:29.040
if you dig through the
code, but those are for

488
00:23:29.040 --> 00:23:32.580
more advanced things like composite
views and shared presenters, which

489
00:23:32.640 --> 00:23:35.190
aren't, you know, what use
case. Okay, well, let's, let's

490
00:23:35.190 --> 00:23:37.950
get into those though, because
are those things that I

491
00:23:37.950 --> 00:23:40.110
can, you know, I can
do easily in web forums

492
00:23:40.110 --> 00:23:42.300
and you just needed to
support them or these advanced

493
00:23:42.300 --> 00:23:46.100
scenarios that really are only
possible with forms MVP. So

494
00:23:46.100 --> 00:23:49.160
There's two real scenarios that
are specific to web forms,

495
00:23:49.160 --> 00:23:52.220
MVP that just aren't supported
in web forms. The first

496
00:23:52.220 --> 00:23:55.730
one is messaging. So one
of the big advantages that

497
00:23:55.730 --> 00:23:57.650
I find about web forms
is your ability to composite

498
00:23:57.650 --> 00:23:59.810
the page. So I was
talking about, let's say, you've

499
00:23:59.810 --> 00:24:02.030
got an eCommerce site you're
building. So this is obviously

500
00:24:02.030 --> 00:24:04.070
a real world example of
running into. You've got a

501
00:24:04.070 --> 00:24:07.010
product page now in the
sidebar, you've got your menu

502
00:24:07.010 --> 00:24:10.100
that sits off somewhere else
in your master page, you've

503
00:24:10.100 --> 00:24:11.810
got all your product details
showing in the main section

504
00:24:11.810 --> 00:24:13.730
of the site and somebody
decided, all right, well, we

505
00:24:13.730 --> 00:24:16.370
want to show a little
widget in the sidebar that's

506
00:24:16.400 --> 00:24:19.190
related products or a bunch
of links. How do you

507
00:24:19.190 --> 00:24:22.310
get the information between those
two places? This is where

508
00:24:22.310 --> 00:24:24.200
you master page starts to
get a bit messy and

509
00:24:24.200 --> 00:24:27.560
you own try and find
properties setters of around the

510
00:24:27.560 --> 00:24:29.260
owning page and stuff. And
that's where web forms gets

511
00:24:29.260 --> 00:24:32.560
through. Yeah. I mean, people
shove things into session. They

512
00:24:32.560 --> 00:24:35.530
shove things into items, dot
context and hope that it'll

513
00:24:35.540 --> 00:24:38.800
stick around. They worry about
what order things actually run

514
00:24:38.800 --> 00:24:41.020
in it's it's chaos. And
this is where the secret

515
00:24:41.060 --> 00:24:43.570
page life cycle just turns
into a nightmare. So the

516
00:24:43.570 --> 00:24:46.060
way we've solved that is
you would build two user

517
00:24:46.060 --> 00:24:48.580
controls for that. You'd obviously
have your main product details,

518
00:24:48.760 --> 00:24:51.190
and then you'd have your
related products, widget that would

519
00:24:51.190 --> 00:24:53.470
both be MVP, user controls,
and that each have their

520
00:24:53.470 --> 00:24:56.710
own presented. Now say the
product details, presenter, it's going

521
00:24:56.710 --> 00:24:58.830
to load the product from
the database, push the information

522
00:24:58.840 --> 00:25:01.330
to the model. He can
also publish that as a

523
00:25:01.330 --> 00:25:04.900
message. So it goes onto
a message bus separately. We

524
00:25:04.900 --> 00:25:08.410
have our related products, presenter.
It's going to subscribe to

525
00:25:08.410 --> 00:25:11.230
a message of type product.
So it's all strongly typed.

526
00:25:11.890 --> 00:25:13.900
And when that message turns
up on the message bus,

527
00:25:13.990 --> 00:25:15.580
it'll get a copy of
it. So he can say,

528
00:25:15.640 --> 00:25:17.980
Oh, somewhere else on this
page, this product is getting

529
00:25:17.980 --> 00:25:19.990
rendered. And this has all
the information I need about

530
00:25:19.990 --> 00:25:22.810
that product to render this
little widget and all of

531
00:25:22.810 --> 00:25:24.700
the life cycle that's managed
for you. So if you

532
00:25:24.700 --> 00:25:28.330
subscribe first published, lighter, published
first subscribed, lighter, any of

533
00:25:28.330 --> 00:25:30.370
those sermons, it doesn't matter.
You'll always get the message.

534
00:25:30.880 --> 00:25:32.890
And how does that work?
Because I know I've had

535
00:25:32.890 --> 00:25:35.680
all sorts of trouble juggling
the order in which things

536
00:25:35.680 --> 00:25:37.390
happen and where they live.
And if I am, if

537
00:25:37.390 --> 00:25:40.510
I'm am I in pre-render
or render, if you, even,

538
00:25:40.510 --> 00:25:43.030
if you pick up a
control and move it elsewhere

539
00:25:43.030 --> 00:25:45.760
on the page, it could
change the order in which

540
00:25:45.760 --> 00:25:49.090
things happen. We maintain a
list of the subscriptions and

541
00:25:49.090 --> 00:25:51.100
also list of all the
messages that have been published.

542
00:25:51.130 --> 00:25:54.070
So if you subscribe to
a message of Taipei and

543
00:25:54.070 --> 00:25:55.660
then you publish one of
the, and then somebody else

544
00:25:55.660 --> 00:25:57.580
comes along subscribes to be,
we'll get a hold on.

545
00:25:57.580 --> 00:25:59.170
We know that there's a
pending message there for Pete.

546
00:25:59.470 --> 00:26:01.540
Here's a copy of it.
The other thing we do

547
00:26:01.540 --> 00:26:04.450
is we have a callback
of never received. So if

548
00:26:04.450 --> 00:26:06.400
you go and subscribe to
a message of type product

549
00:26:06.580 --> 00:26:10.000
for say you related widget,
and that message never comes,

550
00:26:10.060 --> 00:26:12.070
we'll actually also give you
another call back. So you

551
00:26:12.070 --> 00:26:14.410
can go and throw an
exception or display some different

552
00:26:14.410 --> 00:26:16.000
UI or whatever you want
to do in that case

553
00:26:16.480 --> 00:26:19.270
in any time before pre-render,
we manage all of that

554
00:26:19.270 --> 00:26:22.240
lifecycle at pre-render. We close
the message pass. We send

555
00:26:22.240 --> 00:26:25.090
out all those callbacks, have
you subscribed to that? You

556
00:26:25.090 --> 00:26:27.400
didn't get it. Just letting
you know. So you then

557
00:26:27.400 --> 00:26:30.190
got enough time to react
before render When I'm writing

558
00:26:30.190 --> 00:26:32.770
things like this. Am I
thinking about the page life

559
00:26:32.770 --> 00:26:34.570
cycle anymore? I mean, I'm
kind of hearing that. I

560
00:26:34.600 --> 00:26:36.940
think about it a lot
less, if at all. No,

561
00:26:36.940 --> 00:26:39.220
there's basically one entry point
to your presenter, which is

562
00:26:39.220 --> 00:26:41.350
just the ANet. And then
from there, each of the

563
00:26:41.350 --> 00:26:44.100
presenters are all fairly independent.
They don't need to know

564
00:26:44.100 --> 00:26:46.830
what other presenters are on
the page. Other than perhaps

565
00:26:46.830 --> 00:26:50.040
an implicit contract that whenever
I have this related products

566
00:26:50.040 --> 00:26:52.950
widget, I need to have
this other product control on

567
00:26:52.950 --> 00:26:55.290
the page too, to get
the right information there. But

568
00:26:55.290 --> 00:26:57.790
that's pretty easy contract to
manage. Other than that, they

569
00:26:57.790 --> 00:26:59.610
all just act in their
own time, push stuff out

570
00:26:59.610 --> 00:27:01.710
to the message person. It
appears when it needs to.

571
00:27:02.690 --> 00:27:05.990
Can you get into scenarios
where there's complex dependencies, where

572
00:27:06.890 --> 00:27:10.820
like, what happens if two
controls are both loading a

573
00:27:10.820 --> 00:27:12.530
list of products and we
don't want to go to

574
00:27:12.530 --> 00:27:16.940
the database twice? Well, I
just hit on it in

575
00:27:16.940 --> 00:27:19.910
rendering a page, unless you
explicitly going out and doing

576
00:27:19.940 --> 00:27:23.360
asynchronous tasks, then it's all
running in a synchronous order

577
00:27:23.360 --> 00:27:25.280
anyway. So one of them
will load at first and

578
00:27:25.310 --> 00:27:27.890
you really need to manage
that through caching. Okay. So

579
00:27:27.890 --> 00:27:30.560
that's really up to you
and your model to not

580
00:27:30.560 --> 00:27:33.620
hit it twice, right? That
does lead into though, if

581
00:27:33.620 --> 00:27:35.510
you do want to get
into, if you've got expensive

582
00:27:35.510 --> 00:27:37.670
loads and you don't want
to do them twice and

583
00:27:37.670 --> 00:27:40.220
things like that, there's obviously
occasion, but there's also a

584
00:27:40.220 --> 00:27:42.680
sync tasks. So say you're
calling out to a web

585
00:27:42.680 --> 00:27:46.670
service and you don't want
to block the rendering thread

586
00:27:46.670 --> 00:27:47.930
for that whole time where
you wait for it to

587
00:27:47.930 --> 00:27:51.830
respond. Web forms already has
support for asynchronous page tasks

588
00:27:51.830 --> 00:27:53.840
built into it, but we've
brought that up through the

589
00:27:53.840 --> 00:27:56.420
web forms, MVP framework as
well. So that from your

590
00:27:56.420 --> 00:28:00.440
presenter, you can lodge asynchronous
tasks and get callbacks when

591
00:28:00.440 --> 00:28:02.600
they completed the of pipe
and all that life cycle.

592
00:28:03.770 --> 00:28:05.210
Now, what if I want
to start using a bunch

593
00:28:05.210 --> 00:28:09.380
of JavaScript and jQuery and
an Ajax type stuff? Am

594
00:28:09.380 --> 00:28:12.110
I going to go and
use jQuery and MooTools and

595
00:28:12.110 --> 00:28:13.790
that kind of stuff, or
am I going to use

596
00:28:14.030 --> 00:28:20.030
the Microsoft Ajax controls Really
independent of where your MVC

597
00:28:20.030 --> 00:28:22.520
web forms, web forms, MVP
or anything really because you've,

598
00:28:22.520 --> 00:28:25.640
you should have that nice
separation. On the last major

599
00:28:25.640 --> 00:28:28.400
project, we use this on
the eCommerce site, we chose

600
00:28:28.400 --> 00:28:31.820
to use the Microsoft Ajax
libraries and the jQuery libraries

601
00:28:31.910 --> 00:28:34.550
because Microsoft Ajax gave us
a really nice script floater,

602
00:28:35.000 --> 00:28:38.090
which makes it really easy
from different pages and master

603
00:28:38.090 --> 00:28:40.190
pages and things to represent
all the scripts we need,

604
00:28:40.550 --> 00:28:43.310
push them out, combined at
runtime, things like that. And

605
00:28:43.310 --> 00:28:46.490
a really nice way of
calling web services. jQuery obviously

606
00:28:46.490 --> 00:28:49.310
gives us a really nice
platform for doing progressive enhancement

607
00:28:49.310 --> 00:28:51.590
on the client. One of
the things we had on

608
00:28:51.590 --> 00:28:53.480
this site was that up
in the header, it had

609
00:28:53.480 --> 00:28:56.030
like six items in cart.
And if you clicked that

610
00:28:56.060 --> 00:28:58.010
it would slide down the
cart, like a bit of

611
00:28:58.010 --> 00:28:59.660
you, I would just slide
down over the page and

612
00:28:59.660 --> 00:29:02.270
show the number, what was
actually in your cart so

613
00:29:02.270 --> 00:29:05.180
that they would use jQuery
to attach to the link,

614
00:29:05.390 --> 00:29:07.400
because normally it's just a
hyperlink goes to the cart

615
00:29:07.400 --> 00:29:09.120
page. So if you don't
have JavaScript, you go to

616
00:29:09.120 --> 00:29:12.380
the cat page. If you
click it with JavaScript, jQuery

617
00:29:12.380 --> 00:29:14.960
will catch that slide down
the interface. And we'd use

618
00:29:14.960 --> 00:29:17.330
the Microsoft Ajax libraries to
do a web service call

619
00:29:17.330 --> 00:29:19.730
to find out what was
actually in Yukon. So we

620
00:29:19.730 --> 00:29:21.860
didn't need to embed that
information in the page. That's

621
00:29:21.860 --> 00:29:24.260
a really nice example of,
of, like you said, progressive

622
00:29:24.260 --> 00:29:27.800
enhancement. We had full support
for non JavaScript along the

623
00:29:27.800 --> 00:29:29.540
way. And it really wasn't
that hard to do gives

624
00:29:29.540 --> 00:29:32.030
you that nice experience. So
if I click on the

625
00:29:32.150 --> 00:29:34.550
items and cart link, that
takes me to the cart

626
00:29:34.550 --> 00:29:37.760
dot ASP X page. But
if I've got JavaScript, I'm

627
00:29:37.760 --> 00:29:40.430
going to get a nice,
you know, local example of

628
00:29:40.430 --> 00:29:43.210
that. What did that web
service call to get the

629
00:29:43.210 --> 00:29:44.950
list of things in the
car? Did it call it

630
00:29:45.010 --> 00:29:47.430
an ASM X page or
did it, Yeah, we just

631
00:29:47.430 --> 00:29:49.650
had an Asics that was
then just published through the

632
00:29:49.650 --> 00:29:53.910
Microsoft Ajax script. Loader has
really nice services node. Does

633
00:29:53.910 --> 00:29:58.050
the JavaScript proxy really easy
to call clients side and,

634
00:29:58.340 --> 00:30:01.110
and even with the web
forms, MVP framework, we actually

635
00:30:01.110 --> 00:30:04.440
have full support for web
services, HTP, handlers, everything like

636
00:30:04.440 --> 00:30:06.870
that, applying the same architecture,
so you can have web

637
00:30:06.870 --> 00:30:09.840
services with presentencing behind them.
So if I wanted to

638
00:30:09.840 --> 00:30:14.520
do a, an Ash X
on HTTP handler on my

639
00:30:14.520 --> 00:30:17.040
own and return, Jason custom,
I could do that. Or

640
00:30:17.040 --> 00:30:18.930
I could use an as
a Mac slash JS and

641
00:30:18.930 --> 00:30:21.330
do it that way. Yep.
You just create a where

642
00:30:21.330 --> 00:30:25.860
you HTP handler would normally
inherit from HTP handler. You

643
00:30:25.860 --> 00:30:28.950
just change it to MVP,
HTP handler, put the presented

644
00:30:28.950 --> 00:30:33.060
binding attribute on it. And
they, Okay. So you've got,

645
00:30:33.320 --> 00:30:35.970
you've got base classes for
basically everything. We do use

646
00:30:35.970 --> 00:30:38.820
a controls, HTP handlers and
web services, but you don't

647
00:30:38.820 --> 00:30:41.670
need to use the base
classes. A lot of times

648
00:30:41.670 --> 00:30:44.610
base classes as a concept
scare people off. And particularly

649
00:30:44.640 --> 00:30:46.560
there are valid reasons for
that in so many different

650
00:30:46.560 --> 00:30:49.860
cases. Let's say you're building
a DotNetNuke module and you

651
00:30:49.860 --> 00:30:51.600
need to use their base
class, but you want to

652
00:30:51.600 --> 00:30:55.290
use our MVP architecture. Obviously
you can't use the two

653
00:30:55.290 --> 00:30:58.740
based classes. So we also
have very easy support. One

654
00:30:58.740 --> 00:31:01.650
line of code in your
control in the event that

655
00:31:01.650 --> 00:31:04.200
just says, Hey, go and
register me. And it'll wire

656
00:31:04.200 --> 00:31:05.640
it all up for you
as well. So the base

657
00:31:05.640 --> 00:31:08.700
classes are just a nice
little syntax way of doing

658
00:31:08.700 --> 00:31:15.000
that. Saving use a few
extra lines of code. So@theriskofinvokingthetermalt.net,

659
00:31:15.540 --> 00:31:19.680
is this an alt.net friendly
web forums? It does hit

660
00:31:19.680 --> 00:31:21.300
a lot of those points.
We've tried to make it

661
00:31:21.900 --> 00:31:24.540
not very prescriptive in forcing
you to do things. Give

662
00:31:24.540 --> 00:31:27.510
me a lot of options.
It's very pluggable. It's testable,

663
00:31:28.170 --> 00:31:33.390
it's extendable. So you've, you've
put together large live websites

664
00:31:33.450 --> 00:31:35.490
that are doing millions of
hits a month, and you've

665
00:31:35.490 --> 00:31:39.150
got tests and continuous integration
and inversion of control and

666
00:31:39.150 --> 00:31:41.820
all that stuff. So there's,
yeah, it's got little version

667
00:31:41.820 --> 00:31:45.570
control support. We have already
built support for unity, which

668
00:31:45.570 --> 00:31:48.090
is running on one of
the government projects. We have

669
00:31:48.090 --> 00:31:50.400
support for castle, which is
running on the retail site.

670
00:31:51.270 --> 00:31:53.370
It's got all unit tests
through it. We track code

671
00:31:53.370 --> 00:31:55.650
coverage, all of that. And
it's a pretty active project.

672
00:31:56.160 --> 00:31:58.860
Yep. So far we haven't
actually cut a version one

673
00:31:58.860 --> 00:32:02.220
yet. Officially it is stable.
The only reason we haven't

674
00:32:02.220 --> 00:32:04.680
dropped a V one release
is that we keep adding

675
00:32:04.680 --> 00:32:07.230
features and we haven't finished
all the doco yet. So

676
00:32:07.230 --> 00:32:09.630
we are pretty close to
cutting that, but we released

677
00:32:09.870 --> 00:32:13.380
seven CTP so far, and
they're dropping about every two

678
00:32:13.380 --> 00:32:16.260
to three weeks And give
a sense of how interested

679
00:32:16.260 --> 00:32:18.690
the community is. What kind
of download you get? There's

680
00:32:18.690 --> 00:32:24.090
been about 4,000 downloads so
far, I think. Yeah, fairly

681
00:32:24.090 --> 00:32:26.370
consistently throughout each of the
releases, people are picking that

682
00:32:26.370 --> 00:32:30.000
up and about 50% of
downloading the compiled release and

683
00:32:30.000 --> 00:32:34.320
50% downloading source release, which
is pretty cool. And there's

684
00:32:34.320 --> 00:32:36.700
actually also a contrary project
has already spun up for

685
00:32:36.700 --> 00:32:38.700
it. One of the other
guys in the community has

686
00:32:38.700 --> 00:32:42.020
spun up web forms, MVP
country. So there he's building

687
00:32:42.020 --> 00:32:44.480
out things like common presenters
you use for stuff like

688
00:32:44.510 --> 00:32:47.900
logging in other IOC integration
points and so on. So

689
00:32:48.170 --> 00:32:50.060
there's obviously other people in
the community passionate about it

690
00:32:50.660 --> 00:32:52.850
and you see this, you
know, continuing on and for,

691
00:32:52.850 --> 00:32:56.180
Oh, and I think assume
things like page routes and

692
00:32:56.180 --> 00:32:59.690
things like that to make
URLs friendly, support and.net for.

693
00:33:00.050 --> 00:33:02.360
Yep. So we've already started
to cut builds that actually

694
00:33:02.360 --> 00:33:04.490
have all the support for
things like page routes as

695
00:33:04.490 --> 00:33:06.740
well, and trying to get
all those 4.0 features in

696
00:33:06.740 --> 00:33:09.140
there. Nice and early. Wow.
I wish we knew someone

697
00:33:09.140 --> 00:33:12.110
at Microsoft to check this
out. Maybe we do you

698
00:33:12.110 --> 00:33:14.210
think? Yeah. Do you think
Damien's going to try to

699
00:33:14.210 --> 00:33:17.510
get the right people looking
at this? I think if

700
00:33:17.510 --> 00:33:20.390
you are on the Microsoft
Redmond campus, you would struggle

701
00:33:20.390 --> 00:33:23.060
to avoid Damien in any
form of web conversation. Really

702
00:33:23.120 --> 00:33:25.670
just talking about this at
every moment. Well, not just

703
00:33:25.670 --> 00:33:27.500
about this, he's very passionate
about the open web and

704
00:33:27.500 --> 00:33:29.450
it's good to see him
over at Microsoft. Well, this

705
00:33:29.450 --> 00:33:31.730
is very, very cool. I
appreciate you sitting down and

706
00:33:31.730 --> 00:33:34.670
chatting with me. I'll I'll
put links up on the

707
00:33:34.670 --> 00:33:36.590
show site to make sure
that people can see this.

708
00:33:37.210 --> 00:33:38.840
I want to know where
they can get the source,

709
00:33:38.840 --> 00:33:40.370
where they can get the
downloads. This is just web

710
00:33:40.370 --> 00:33:43.610
forms, mvp.com. That's correct. And
what is the name of

711
00:33:43.610 --> 00:33:46.400
the site? The Australian site
that I can actually go

712
00:33:46.400 --> 00:33:50.180
and shop and see this
live that's grays online.com. So

713
00:33:50.180 --> 00:33:53.390
G R a Y S
online.com. They're very strong in

714
00:33:53.390 --> 00:33:57.050
bidding and they're running this
stuff live and they're happy

715
00:33:57.050 --> 00:34:01.160
with it. Yep. Fantastic. Well,
thank you so much. Take

716
00:34:01.160 --> 00:34:03.980
the money for shutting out
and you should probably go

717
00:34:04.400 --> 00:34:06.650
and have a nap on
the couch now. Wonderful. Thank

718
00:34:06.650 --> 00:34:09.710
you, Scott. This has been
another episode of Hansel minutes

719
00:34:09.890 --> 00:34:11.180
and we'll see you again
next week.

