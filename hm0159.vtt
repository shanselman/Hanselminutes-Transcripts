WEBVTT FILE

1
00:00:12.030 --> 00:00:17.760
From Hansel minutes.com. It's Hanselman.
It's a weekly discussion with

2
00:00:17.760 --> 00:00:23.160
web developer and technologists. Scott
Hanselman posted by Carl Franklin. This

3
00:00:23.160 --> 00:00:26.730
is Lauren's Ryan announcing show
number one 59. Recorded live

4
00:00:26.730 --> 00:00:32.910
Wednesday, April 23rd, 2009. Support for Hansel
minutes is provided by Tellerik

5
00:00:32.910 --> 00:00:36.750
rad controls, the most comprehensive
suite of components for windows

6
00:00:36.750 --> 00:00:48.180
forms and asp.net web applications.
online@wwwdottelerikdotcomandby.net developers journal the world's

7
00:00:48.210 --> 00:00:54.540
leading.net developer magazine online at
www dot <inaudible> dot com.

8
00:00:55.230 --> 00:00:58.980
In this episode, Scott talks
with iron Python programmer Michael Ford.

9
00:01:01.020 --> 00:01:03.150
Hi, this is Scott Hanselman
and this is another episode

10
00:01:03.150 --> 00:01:07.050
of Hansel minutes sitting down
today with Michael Ford, a Python

11
00:01:07.050 --> 00:01:09.720
advocate and the author of
the new book from Manning

12
00:01:09.720 --> 00:01:13.530
called iron Python and action.
And Michael works. I actually

13
00:01:13.530 --> 00:01:15.510
paid for a living to
work on Python all day

14
00:01:15.510 --> 00:01:18.450
long for resolver systems. So
I wanted to sit down

15
00:01:18.450 --> 00:01:21.390
with him and get an
understanding about a kind of

16
00:01:21.390 --> 00:01:24.300
Python. So what I want
to be convinced that this

17
00:01:24.300 --> 00:01:27.240
is an awesome, awesome thing.
Thanks for sitting down with

18
00:01:27.240 --> 00:01:29.570
me, Michael. No problem. It's
great to speak to you.

19
00:01:31.190 --> 00:01:34.070
So where do you want
to start? I mean, there's

20
00:01:34.070 --> 00:01:35.900
a lot of C-sharp programmers
and there's a lot of

21
00:01:35.900 --> 00:01:38.900
VB programmers, and now there
are more choices, you know,

22
00:01:38.900 --> 00:01:41.810
for many years there was
really just the two languages

23
00:01:41.810 --> 00:01:43.940
and they would kind of
play some war to decide,

24
00:01:43.940 --> 00:01:46.940
which was on top. And
then out of nowhere, the

25
00:01:46.940 --> 00:01:50.600
DLR and Ruby and Python,
and then a whole litany

26
00:01:50.600 --> 00:01:55.610
of niche.net languages that are
dynamic based. Why, why did

27
00:01:55.610 --> 00:01:59.150
you pick <inaudible>? Why did
you write your application in.net

28
00:01:59.150 --> 00:02:02.420
at all? I come from
a Python background. I've been

29
00:02:02.420 --> 00:02:07.250
developing with, with Parsons from
about 2002. So I come

30
00:02:07.250 --> 00:02:11.180
from a background of dynamic
languages and living in the

31
00:02:11.180 --> 00:02:16.310
dynamic languages community. I've seen
the popularity of dynamic languages

32
00:02:16.820 --> 00:02:20.390
on the rise really for
ever since. I started, certainly

33
00:02:20.390 --> 00:02:23.960
when I started in 2002
dynamic languages in general and

34
00:02:23.960 --> 00:02:28.160
pricing, and in particular really
were in niche. And I

35
00:02:28.160 --> 00:02:32.000
think as computer hardware as
has been getting better, so

36
00:02:32.060 --> 00:02:35.050
raw performance is perhaps being
less of an issue, but

37
00:02:35.120 --> 00:02:38.870
for whatever reason, dynamic languages
have been becoming more popular.

38
00:02:39.200 --> 00:02:43.310
And then particularly with the
explosion of Ruby, a couple

39
00:02:43.310 --> 00:02:46.970
of years ago, interest in
dynamic languages, just rocketed. And

40
00:02:47.030 --> 00:02:50.180
I mean, we've seen at
the, our international pipeline conference,

41
00:02:50.450 --> 00:02:53.690
we've seen record attendances for
the last couple of years

42
00:02:54.200 --> 00:02:56.660
with Google app engine and
that all the Google support

43
00:02:56.660 --> 00:02:59.710
for Python, there's been an
enormous amount of interest in

44
00:02:59.710 --> 00:03:03.930
dynamic languages. Now for the
average C-sharp or VP developer,

45
00:03:03.930 --> 00:03:07.590
who's listening, let's, let's be
a little pedantic and, and

46
00:03:07.830 --> 00:03:10.200
give me a definition of
static versus dynamic in a

47
00:03:10.200 --> 00:03:12.150
way that someone who has
never done anything into that

48
00:03:12.150 --> 00:03:17.060
mic languages maybe could understand
Slightly fuzzy terms. But I

49
00:03:17.070 --> 00:03:21.210
think that the clear differences
that in aesthetically type language,

50
00:03:21.600 --> 00:03:24.870
the type of every variable
that you use, the type

51
00:03:24.870 --> 00:03:27.240
of every object that you
use has to be known

52
00:03:27.240 --> 00:03:30.330
at compile time now in,
in C sharp and vb.net.

53
00:03:30.330 --> 00:03:33.270
That means you declare it
in languages like F sharp

54
00:03:33.270 --> 00:03:37.170
and Haskell. The type is
inferred by the compiler, and

55
00:03:37.260 --> 00:03:40.860
it occasionally needs some hints,
but whether it's inferred or

56
00:03:40.860 --> 00:03:44.250
it's declared, the type is
known upfront when you compile

57
00:03:44.250 --> 00:03:46.380
your code. So the compiler
is going to pick up

58
00:03:46.410 --> 00:03:51.840
any type of errors in
dynamic languages, the type isn't

59
00:03:52.260 --> 00:03:56.160
determined until runtime now that
they're still strongly typed languages.

60
00:03:56.610 --> 00:03:59.070
So you can't do sort
of crazy things like adding

61
00:03:59.430 --> 00:04:01.530
numbers to strings, which, which
you can do in some

62
00:04:01.530 --> 00:04:05.280
languages, JavaScript, and Pearl, for
example, will let you do

63
00:04:05.280 --> 00:04:07.680
that. And that leads to
crazy bugs to find out

64
00:04:07.680 --> 00:04:10.320
you'll still get errors, but
you'll get runtime errors in

65
00:04:10.440 --> 00:04:13.890
instead of compile time errors
and in dynamic languages, the

66
00:04:14.110 --> 00:04:16.650
semantics of what you do
is much more determined by

67
00:04:16.650 --> 00:04:21.210
object behavior than it is
just by specifically types. And

68
00:04:21.210 --> 00:04:23.910
that actually gives you a
lot more flexibility in what

69
00:04:23.910 --> 00:04:27.420
you can do with the
language. It's, it's a lot

70
00:04:27.420 --> 00:04:30.300
less restrictive in, in terms
of you don't have to

71
00:04:30.300 --> 00:04:32.460
fight against the type system
as you, as you're writing

72
00:04:32.460 --> 00:04:35.340
your code to do what
you want to do. Okay.

73
00:04:35.340 --> 00:04:38.520
So I'm going to ask
some devil's advocate questions, kind

74
00:04:38.520 --> 00:04:41.460
of ignorant questions to get
an understanding about this. So

75
00:04:41.460 --> 00:04:43.950
I see when I see
the dynamic language, hello, world

76
00:04:43.950 --> 00:04:46.950
demo, and one explains it
to a static language person.

77
00:04:47.490 --> 00:04:50.610
They usually go look, you
know, a equals a string,

78
00:04:50.610 --> 00:04:52.590
and then I go look
a equals some other days,

79
00:04:52.590 --> 00:04:55.230
see how it just changed
type dynamically. Isn't that amazing

80
00:04:57.150 --> 00:05:00.330
that in itself kind of
is the says what you

81
00:05:00.330 --> 00:05:04.020
just said, but in a
very, very, very simplistic way.

82
00:05:04.500 --> 00:05:08.100
So I can so types,
so types can be changed

83
00:05:08.100 --> 00:05:11.160
at runtime type types are
inferred. How does that really

84
00:05:11.160 --> 00:05:14.280
change the, the idioms that
I use as a programmer?

85
00:05:14.580 --> 00:05:17.010
How does that make it
more fun? I mean, it

86
00:05:17.010 --> 00:05:20.220
seems to me that when
I, when I, you know,

87
00:05:20.220 --> 00:05:22.380
sneak in and I'm a
fly on the wall with

88
00:05:22.380 --> 00:05:25.050
a dynamic language programming group,
they seem to be having

89
00:05:25.050 --> 00:05:29.160
more fun. Why is that
two lines of code where

90
00:05:29.160 --> 00:05:31.170
I turn this, I change
a string variable into a

91
00:05:31.170 --> 00:05:33.030
date and nothing, you know,
it just happens. Why does

92
00:05:33.030 --> 00:05:34.500
that make it so much
more fun to be a

93
00:05:34.510 --> 00:05:38.070
dynamic language program? Okay, well
obviously the, that specific example

94
00:05:38.070 --> 00:05:40.740
is trivial in it and
is actually generally bad practice

95
00:05:40.740 --> 00:05:45.450
just generally just changing the
type of your variables on

96
00:05:45.450 --> 00:05:47.280
the fly. But I mean,
let me give you one

97
00:05:47.280 --> 00:05:52.350
specific example. I've had an
email very recently from a

98
00:05:52.350 --> 00:05:57.680
guy called Mark Bloodworth. Who's
a Microsoft architecture evangelist. He

99
00:05:57.680 --> 00:06:00.260
was, he's been interested in
dynamic languages for awhile. And

100
00:06:00.260 --> 00:06:04.100
so he asked, he asked
me, where do I think

101
00:06:04.100 --> 00:06:06.380
that dynamic language is fit
best? Is there a niche

102
00:06:06.410 --> 00:06:09.800
that dynamic languages fit into?
And now I think first

103
00:06:09.800 --> 00:06:12.770
of all, there are niches
that dynamic languages fit into

104
00:06:12.770 --> 00:06:16.490
even for the, even for
those who prefer statically, really

105
00:06:16.490 --> 00:06:20.060
type languages like C sharp
and vb.net. And hopefully we

106
00:06:20.060 --> 00:06:22.970
will get to some, some
of those use cases, even

107
00:06:22.970 --> 00:06:25.460
if you're not about to,
to, to jump ship. But

108
00:06:25.520 --> 00:06:27.800
one of the things as
I've been using C-sharp more

109
00:06:27.800 --> 00:06:29.930
and more, we've got a
bit of C sharp in

110
00:06:29.930 --> 00:06:31.610
our code base. I wrote
a lot of C sharp

111
00:06:31.610 --> 00:06:35.600
examples for the book, the
embedding C sharp and so

112
00:06:35.600 --> 00:06:38.000
on. And I'm becoming more
and more convinced that dynamic

113
00:06:38.000 --> 00:06:43.010
language is actually allow for
simpler architectures. And that's partly

114
00:06:43.280 --> 00:06:46.490
to do with the dynamic
typing itself. And it's partly

115
00:06:46.490 --> 00:06:49.880
to do with less inherent
complexity in, in, in, in

116
00:06:49.880 --> 00:06:53.120
the runtimes they assume. But
just to give one specific

117
00:06:53.120 --> 00:06:58.610
example, a colleague and I
did a tutorial, an introduction

118
00:06:58.610 --> 00:07:02.360
to iron pipes and the
recent Python potent conference. And

119
00:07:02.360 --> 00:07:04.280
one of the things we
did was write a database

120
00:07:04.280 --> 00:07:07.760
application, the work with various
different databases. Now, if you've

121
00:07:07.760 --> 00:07:11.450
done that in.net and you've
used the different sort of

122
00:07:11.450 --> 00:07:16.310
database provider classes, then some
of the connections you're creating

123
00:07:16.310 --> 00:07:19.400
for all of the different
databases, they don't share a

124
00:07:19.400 --> 00:07:21.860
common interface and they're all
different types. So if you

125
00:07:21.860 --> 00:07:24.140
want to be agnostic about
which one you want to

126
00:07:24.140 --> 00:07:26.690
use, you've got to write
this extra layer over the

127
00:07:26.690 --> 00:07:29.840
top, which will say right,
if I'm using this date,

128
00:07:29.900 --> 00:07:32.750
this particular database, I'm using
this particular class, and I

129
00:07:32.750 --> 00:07:36.080
need to put an interface
layer on top, on top

130
00:07:36.080 --> 00:07:38.360
of it so that I
can have easy access to

131
00:07:38.360 --> 00:07:41.510
it without having to compare
in without having to CA

132
00:07:41.540 --> 00:07:43.730
care in the next level
up of the code as

133
00:07:43.730 --> 00:07:46.940
to which one it is.
Whereas in, in person, we

134
00:07:46.940 --> 00:07:49.430
just had a very simple
bit of code that says,

135
00:07:49.430 --> 00:07:54.230
right, depending on which one
I'm using, I'll import the,

136
00:07:54.640 --> 00:07:57.500
the correct class and I'll
import it and I'll, I'll

137
00:07:57.500 --> 00:08:00.530
give it a common name,
SQL connection, whichever one of

138
00:08:00.530 --> 00:08:02.570
those it is I'm using.
And then I just need

139
00:08:02.570 --> 00:08:04.610
to store a little bit
of information about which of

140
00:08:04.610 --> 00:08:07.430
the parameter classes I need
to be using and so

141
00:08:07.430 --> 00:08:09.710
on. So there's this whole
layer of architecture we could

142
00:08:09.710 --> 00:08:13.010
remove just by being able
to dynamically do the lookup

143
00:08:13.010 --> 00:08:15.410
for which class we needed
to use at runtime, rather

144
00:08:15.410 --> 00:08:17.780
than having it sort of
statically baked into our code.

145
00:08:18.490 --> 00:08:22.690
Hm. Now, is that, is
that something that's fundamental and

146
00:08:22.690 --> 00:08:24.730
really only possible in a
dynamic language? Or is that

147
00:08:24.730 --> 00:08:27.250
something I could have, if
I'd known the pattern I

148
00:08:27.250 --> 00:08:29.560
could have done in C
sharp using some clever bit

149
00:08:29.560 --> 00:08:32.830
of reflection or Just do
it in reflection. But I

150
00:08:32.830 --> 00:08:35.530
think reflection is one of
the wonderful examples of the

151
00:08:35.530 --> 00:08:38.830
differences between dynamic languages and
statically typed languages. Because if

152
00:08:38.830 --> 00:08:41.890
you look at reflection in
dotnet and the kind of

153
00:08:41.890 --> 00:08:44.440
code you have to write
it, it's kind of ugly

154
00:08:44.440 --> 00:08:46.660
because you're carrying around these
system dot types and you

155
00:08:46.660 --> 00:08:50.080
have to call if you've
done any of it, you

156
00:08:50.080 --> 00:08:54.160
just know it's a bit
painful. Whereas the introspection capabilities

157
00:08:54.160 --> 00:08:57.180
of, of languages, Python, and
Ruby and small talk, it's

158
00:08:57.180 --> 00:08:59.970
all beautifully simple. And you
can just look up the

159
00:08:59.970 --> 00:09:02.400
members, you can call members.
And because, cause you're late

160
00:09:02.400 --> 00:09:09.350
bounds because you're dynamically typed,
it's also straightforward. Hmm. Okay.

161
00:09:09.590 --> 00:09:13.760
So a lot of people
have been taking iron Python

162
00:09:13.760 --> 00:09:18.740
as a, as a, a
dynamic language that also does.net

163
00:09:18.770 --> 00:09:20.720
and then been embedding it,
it seems to become the

164
00:09:20.720 --> 00:09:24.080
scripting language, does your, where
you have an app and

165
00:09:24.080 --> 00:09:26.600
you want to make it
a scriptable you drop in

166
00:09:26.600 --> 00:09:29.750
iron, iron Python. Right? And
I think that's one of

167
00:09:29.750 --> 00:09:33.020
the main use cases for.net
developers, who aren't about to

168
00:09:33.020 --> 00:09:36.230
jump ship and write their
applications in iron person. But

169
00:09:36.230 --> 00:09:38.240
if you want to add
scripting capability, if you want

170
00:09:38.240 --> 00:09:42.400
maybe an extensible architecture, you've
got a readymade scripting engine

171
00:09:42.440 --> 00:09:44.030
and it was designed for
this from the start. So

172
00:09:44.030 --> 00:09:49.370
the API for embedding or
calling code for creating instances

173
00:09:49.370 --> 00:09:51.560
of classes that are written
in on POS is all

174
00:09:51.560 --> 00:09:53.510
very simple. And it's going
to get a lot nicer

175
00:09:53.510 --> 00:09:57.770
in, in C sharp for
as well. Hmm. Okay. Now,

176
00:09:57.800 --> 00:09:59.660
how do you use it
as a scripting language in

177
00:09:59.660 --> 00:10:02.820
your application and how did
that come about? Because you

178
00:10:02.870 --> 00:10:04.850
said there was a little
bit of a, of a

179
00:10:04.850 --> 00:10:09.020
history there about what happened
first, The application that we've

180
00:10:09.020 --> 00:10:12.920
created resolver one is a,
it's a programmable spreadsheet. And

181
00:10:12.920 --> 00:10:15.740
the idea is that if
the spreadsheets get used to

182
00:10:15.740 --> 00:10:21.140
create business applications and they
rapidly grow out of control

183
00:10:21.140 --> 00:10:23.330
and become very difficult to
maintain, I think anyone who's

184
00:10:23.330 --> 00:10:26.210
been involved in businesses, sort
of seeing that happen with

185
00:10:26.240 --> 00:10:28.280
the idea was by the
guys who founded the company

186
00:10:28.280 --> 00:10:32.120
was, was to create a
spreadsheet system that was programmable

187
00:10:32.120 --> 00:10:34.790
right from the start. And
that was baked right into

188
00:10:34.790 --> 00:10:37.460
the heart of the application.
And so the idea was

189
00:10:37.460 --> 00:10:40.430
that it would have this
interpreted language embedded in it,

190
00:10:40.460 --> 00:10:43.490
the, the, the, the formula
and the data that you

191
00:10:43.490 --> 00:10:45.920
put into the spreadsheet would
be turned into an in

192
00:10:45.920 --> 00:10:49.580
real time code in this
interpreted language, and then mixing

193
00:10:49.580 --> 00:10:53.330
in your own code and
interfacing to external systems would

194
00:10:53.330 --> 00:10:56.660
then be very easy. And
because it was a desktop

195
00:10:56.660 --> 00:10:59.960
application and it was going
to be aimed at businesses,

196
00:11:00.260 --> 00:11:03.650
they chose m.net and windows
forms as the platform. Cause

197
00:11:03.650 --> 00:11:07.520
they're very established technologies and
they kind of assumed that

198
00:11:07.520 --> 00:11:09.110
they were going to be
writing it in C sharp.

199
00:11:09.140 --> 00:11:11.450
Cause that's, you know, if
you're writing a, a desktop

200
00:11:12.170 --> 00:11:14.630
application, that's just what you
do. You write it in

201
00:11:14.630 --> 00:11:18.110
C sharp. Yeah. Or VB.
I mean, I guess really

202
00:11:18.110 --> 00:11:19.970
you just, you, you sit
down and you say, I

203
00:11:19.970 --> 00:11:23.330
guess these are the two
choices I have. Yup. Yup.

204
00:11:23.390 --> 00:11:25.580
And you, you pick whichever
one, I mean, one of

205
00:11:25.580 --> 00:11:28.580
them was an ex Java
developer. One of them has

206
00:11:28.580 --> 00:11:31.100
done a lot of C
plus plus and objective C.

207
00:11:31.340 --> 00:11:33.710
So C sharp seemed to
the more natural fit for

208
00:11:34.130 --> 00:11:35.780
what they were going to
do, but they needed to

209
00:11:35.780 --> 00:11:38.870
have this interpretive language embedded
in it. And iron bison

210
00:11:38.870 --> 00:11:42.380
was about version 9.7 at
the time. And this was

211
00:11:42.380 --> 00:11:44.660
a few months before I
joined the company and they

212
00:11:44.660 --> 00:11:47.330
started playing with iron posts
and they found that, first

213
00:11:47.330 --> 00:11:49.610
of all, everything they wanted
to do with the.net framework

214
00:11:49.640 --> 00:11:52.670
they could do from iron
pipe and the integration was

215
00:11:52.670 --> 00:11:56.260
very and very straightforward. So
you can, you can import

216
00:11:56.260 --> 00:11:58.360
the classes. You can have
references to the assemblies. You

217
00:11:58.360 --> 00:12:00.970
can use the classes, all
the features of dot matter

218
00:12:00.970 --> 00:12:04.710
available to you. But the
second thing was the person

219
00:12:04.710 --> 00:12:07.360
was very easy to learn.
And so not having used

220
00:12:07.360 --> 00:12:09.700
it, they found that they
were picking it up very

221
00:12:09.700 --> 00:12:11.770
rapidly. They really enjoyed it.
They liked it as a

222
00:12:11.770 --> 00:12:14.590
language. But the other thing
was that they decided to

223
00:12:14.590 --> 00:12:17.260
use test driven development. The
guy, one of the guys

224
00:12:17.260 --> 00:12:21.190
who founded the company was,
is, has used test driven

225
00:12:21.190 --> 00:12:23.020
development before, and is a
real fan of it for

226
00:12:23.020 --> 00:12:27.490
producing quality code and for
creating a system that's maintainable.

227
00:12:27.490 --> 00:12:30.670
And one of the big
things about dynamic languages, because

228
00:12:30.670 --> 00:12:34.030
you can override behavior at
runtime, they're dramatically easier to

229
00:12:34.030 --> 00:12:36.580
test. And so they have
this crazy idea. They thought,

230
00:12:36.580 --> 00:12:39.730
well, let's prototype the application
in iron person. We'll see

231
00:12:39.730 --> 00:12:42.670
how far we get. And
then at some point, presumably

232
00:12:42.670 --> 00:12:44.800
we're going to hit a
wall. Whether that wall is

233
00:12:44.800 --> 00:12:47.860
performance or stuff we can't
do, but by then, we'll

234
00:12:47.860 --> 00:12:49.990
have a, we'll have a
great prototype and maybe we

235
00:12:49.990 --> 00:12:51.820
can keep the testing stuff
in on place. And who

236
00:12:51.820 --> 00:12:55.600
knows. And that was over
three years ago, we've got

237
00:12:55.870 --> 00:12:57.850
sort of 30 to, well,
I think it's about 40,000

238
00:12:57.850 --> 00:12:59.620
lines of code in nine
plus, and now a few

239
00:12:59.620 --> 00:13:03.640
hundred lines of C sharp
and about 140, 150,000 lines

240
00:13:03.640 --> 00:13:06.520
of iron pipe and code
in our tests framework. So

241
00:13:06.520 --> 00:13:08.950
really the choice to use
iron pipe was made or

242
00:13:08.950 --> 00:13:11.410
the choice to use Piscean
was made after the choice

243
00:13:11.410 --> 00:13:14.080
to use. Dotmailer kind of
happened by accident. And when

244
00:13:14.080 --> 00:13:15.880
I joined the firm, I
was the first one with

245
00:13:15.880 --> 00:13:20.010
any experience of bison, which
was quite fun. Now, did

246
00:13:20.010 --> 00:13:23.100
they, did they ever acknowledge
that they're not turning back?

247
00:13:24.180 --> 00:13:26.070
Oh yes. Yeah. I mean,
now it just wouldn't make

248
00:13:26.070 --> 00:13:29.880
sense except the fact that
we've always said that for

249
00:13:29.880 --> 00:13:32.640
performance reasons, if we, if
we need, if we can

250
00:13:32.640 --> 00:13:35.990
get better performance by recoding
parts of our application in,

251
00:13:35.990 --> 00:13:38.040
in C sharp, and then
we'll do it, we're not

252
00:13:38.040 --> 00:13:41.700
kind of them, we're not
doctrinal about it. We, we,

253
00:13:41.710 --> 00:13:43.500
we need to do what
we need to do, but

254
00:13:43.620 --> 00:13:46.740
we've actually looked at performance
at various times, various bits

255
00:13:46.740 --> 00:13:49.320
of the application. And that
was, we'll have to do

256
00:13:49.320 --> 00:13:51.480
it again in, in, in
the future with, we're probably

257
00:13:51.480 --> 00:13:54.510
about do around that actually.
And every time we've come

258
00:13:54.510 --> 00:13:57.030
to look at performance, we've
said this particular operation or

259
00:13:57.030 --> 00:14:00.990
these set of operations needs
to take X amount of

260
00:14:00.990 --> 00:14:03.510
time and it's currently taking
them why that's too long.

261
00:14:03.540 --> 00:14:06.390
And we've always gotten the
performance we needed by refactoring

262
00:14:06.390 --> 00:14:09.420
by, by profiling and optimizing
our power in the code

263
00:14:09.720 --> 00:14:13.920
rather than having to drop
down to C sharp. But

264
00:14:13.920 --> 00:14:15.720
the nice thing about the
iron pipeline is that the

265
00:14:15.720 --> 00:14:19.260
integration is so good that
if we were writing classes

266
00:14:19.260 --> 00:14:22.020
in C-sharp, we would just
be using them as native

267
00:14:22.440 --> 00:14:24.660
Python classes. So other than
having to do a bit

268
00:14:24.660 --> 00:14:27.080
of coding in C sharp,
it wouldn't require us to

269
00:14:27.090 --> 00:14:29.970
change much in the application
to do that. And I

270
00:14:29.970 --> 00:14:31.620
think this is, this is
one of the things about

271
00:14:31.620 --> 00:14:34.440
dynamic language is people have
this impression that they're slow,

272
00:14:34.680 --> 00:14:38.070
they're not suitable for large
scale applications. And I think

273
00:14:38.070 --> 00:14:41.610
that largely basically entirely comes
from people who haven't actually

274
00:14:41.610 --> 00:14:43.470
tried them. If you, if
you're ruling out a dynamic

275
00:14:43.470 --> 00:14:46.950
language on the basis of
performance, then you're making a

276
00:14:46.950 --> 00:14:52.010
premature optimization and largely programs
run slow because the languages

277
00:14:52.010 --> 00:14:55.640
are slow. But because it's
hard to write code faster

278
00:14:55.970 --> 00:14:59.350
and it takes work. Now,
one thing that you said

279
00:14:59.350 --> 00:15:02.710
there was, was integration. And
I think when people think

280
00:15:02.710 --> 00:15:04.750
about integration, there's two aspects
of it. There's like you

281
00:15:04.750 --> 00:15:07.630
said, talking to the PCL
and being able to speak

282
00:15:07.630 --> 00:15:09.520
to the base class library
and to integrate with other

283
00:15:09.520 --> 00:15:12.040
dominant languages in a fairly
seamless way. That's one company.

284
00:15:12.050 --> 00:15:14.530
Yeah. There was a gap
at the moment. The, the

285
00:15:14.530 --> 00:15:17.620
gap is with attributes, not,
not attributes, which can be

286
00:15:17.620 --> 00:15:21.100
a problem for some libraries.
So we have written stop-losses

287
00:15:21.100 --> 00:15:23.540
in C sharp where we've
needed to access attributes and

288
00:15:23.590 --> 00:15:25.810
the main reason they haven't
integrated that is actually cause

289
00:15:25.810 --> 00:15:28.630
there's, well, there are various
reasons, but one of the

290
00:15:28.630 --> 00:15:30.640
reasons is that it's hard
to find a good syntax

291
00:15:30.640 --> 00:15:32.860
for it in bison. So
we're bugging the iron place

292
00:15:32.860 --> 00:15:34.630
and guys, and we'll get
that soon. We're a short,

293
00:15:35.590 --> 00:15:38.980
yeah. That's one side of
integration. Okay. Then the other

294
00:15:39.310 --> 00:15:45.360
aspect is integration with the,
with visual studio. There's this

295
00:15:45.360 --> 00:15:48.070
sense that if something, if
you can't go file new

296
00:15:48.070 --> 00:15:51.760
whatever and get syntax highlighting
and some kind of IntelliSense

297
00:15:51.760 --> 00:15:55.780
and debugging, then it's, it's
scary. Or it's I was

298
00:15:55.780 --> 00:15:59.500
gonna say, it's scary enough.
Or it's it's off the

299
00:15:59.500 --> 00:16:03.550
main beaten path enough that
that a company will say,

300
00:16:03.550 --> 00:16:06.310
you know, I don't know
what kind of toy language

301
00:16:06.310 --> 00:16:09.850
this is, but I'm not
going to, we as a

302
00:16:09.850 --> 00:16:12.970
company, whoever we are are
not gonna standardize on this.

303
00:16:12.970 --> 00:16:15.280
Cause it's just, it's just,
just, it's not in visual

304
00:16:15.280 --> 00:16:19.270
studio. It's not real, right.
It's not actual until that

305
00:16:19.270 --> 00:16:21.280
little dot P Y files.
You can double click on

306
00:16:21.280 --> 00:16:23.710
them and start typing. And
you can tell us what's

307
00:16:23.710 --> 00:16:29.080
the experience in as far
as integration and Python, Unfortunately,

308
00:16:29.080 --> 00:16:32.230
the integration with visual studio
2005 is better than the

309
00:16:32.230 --> 00:16:37.960
integration with visual studio, 2008,
with visual studio, 2005, you

310
00:16:37.960 --> 00:16:41.590
get this, you have to
install the SDK, which means

311
00:16:41.590 --> 00:16:45.400
you need visual studio professional,
but the SDK has got

312
00:16:45.400 --> 00:16:48.130
pretty good integration in terms
of debugging in terms of

313
00:16:48.130 --> 00:16:52.060
the designers and you get
the syntax highlighting, of course.

314
00:16:52.060 --> 00:16:58.090
And some IntelliSense, IntelliSense is
something that's, that's hard for

315
00:16:58.090 --> 00:17:01.750
dynamic languages because the types
aren't known until runtime. So

316
00:17:01.750 --> 00:17:04.900
visual studio really does the
very minimum. They're actually much

317
00:17:04.900 --> 00:17:08.170
better placed than IDs, which
have been by people. Who've

318
00:17:08.170 --> 00:17:11.080
been working with dynamic languages
for a lot longer that

319
00:17:11.080 --> 00:17:13.690
do a lot more work
on statically, analyzing the code,

320
00:17:13.690 --> 00:17:17.230
inferring the types and giving
you good. I'm good IntelliSense.

321
00:17:17.230 --> 00:17:21.430
Good. Auto-complete so my, my
preferred ID is for place

322
00:17:21.430 --> 00:17:24.580
and is not equal weight,
but I, in visual studio

323
00:17:24.580 --> 00:17:28.360
2005, if you do get
that now in 2008 as

324
00:17:28.360 --> 00:17:35.080
this external project called iron
pipe and studio, and that

325
00:17:35.080 --> 00:17:39.430
uses the extensibility shell, Right.
They call it VSX right.

326
00:17:39.910 --> 00:17:42.040
Yeah, that's right. Yeah. And
you can run it on

327
00:17:42.040 --> 00:17:44.320
its own as an IDE,
or you can run it

328
00:17:44.320 --> 00:17:48.640
integrated into visual studio. You
do get, you do get

329
00:17:48.640 --> 00:17:55.860
syntax, you get the same
limited IntelliSense. So that works,

330
00:17:56.070 --> 00:17:59.070
the basic stuff works, but
it was really done as

331
00:17:59.070 --> 00:18:04.020
an example of visual studio
extensibility. And so I found

332
00:18:04.020 --> 00:18:07.330
that the, the designers crashed
for example, and so on.

333
00:18:07.330 --> 00:18:09.900
And so it's not something
that I really recommend using.

334
00:18:10.460 --> 00:18:12.830
So it sounds like it's
not quite a slam dunk.

335
00:18:12.830 --> 00:18:15.440
It's not quite to the
point where I can rush

336
00:18:15.440 --> 00:18:18.770
over to my boss boss's
office with a laptop and

337
00:18:18.770 --> 00:18:20.000
say, well, we kind of
do it now in Python.

338
00:18:20.000 --> 00:18:21.500
Look how awesome it is.
See how it integrates with

339
00:18:21.500 --> 00:18:24.140
everything. That's right. And we'll
see what they come up

340
00:18:24.140 --> 00:18:26.810
with in visual studio, 2010
I've I've only just finished

341
00:18:26.810 --> 00:18:31.280
the book it came out
in and amazon.com literally a

342
00:18:31.280 --> 00:18:32.870
couple of weeks ago. So
I haven't looked at what

343
00:18:32.870 --> 00:18:35.420
they've done in visual studio
2010 yet, but I'll be

344
00:18:35.420 --> 00:18:38.270
having a look at that.
But I was at a

345
00:18:38.270 --> 00:18:41.000
conference with Martin Fowler very
recently. Who's a he's of

346
00:18:41.000 --> 00:18:46.880
course, a dynamic language enthusiast
who works for footwork's. And

347
00:18:47.600 --> 00:18:51.960
he really became, turned onto
dynamic languages through Ruby. And,

348
00:18:51.960 --> 00:18:55.070
and over the last few
years, he's seen ThoughtWorks do

349
00:18:55.070 --> 00:18:58.460
more and more Ruby projects.
It's still only, I can't

350
00:18:58.460 --> 00:19:00.650
remember exactly what he said
about 30% of their work

351
00:19:00.650 --> 00:19:02.330
or so on his route
is Ruby. They still do

352
00:19:02.330 --> 00:19:03.710
a lot of Java. They
still do a lot of

353
00:19:03.710 --> 00:19:05.690
dot nets. But one of
the things he said is

354
00:19:05.690 --> 00:19:10.310
that there's the focus switch
from Java to Ruby. They

355
00:19:10.310 --> 00:19:14.210
typically switch from using eclipse
to using the editors like

356
00:19:14.240 --> 00:19:17.840
text, make them Emacs that
the much more lightweight, some

357
00:19:17.840 --> 00:19:21.830
editors I was in lightweight
tools for lightweight languages. And

358
00:19:21.830 --> 00:19:24.230
he said, the interesting thing
is that the refactoring support

359
00:19:24.320 --> 00:19:28.040
that you have in eclipse,
you haven't heard anyone complain

360
00:19:28.040 --> 00:19:31.340
about missing it. Now these
tools are available for dynamic

361
00:19:31.340 --> 00:19:33.950
languages. There's some very good
tools for placing out there.

362
00:19:34.040 --> 00:19:36.140
I think it's a bit
of a myth that tools

363
00:19:36.140 --> 00:19:38.960
don't exist with dynamic languages.
I think exactly what you

364
00:19:38.960 --> 00:19:41.330
were saying earlier, that when
people say the tool support,

365
00:19:41.330 --> 00:19:43.550
isn't very good for dynamic
languages. What they mean is

366
00:19:43.550 --> 00:19:46.790
it doesn't run in visual
studio. But the interesting thing

367
00:19:46.790 --> 00:19:49.130
is that the developers who
do switch actually tend to

368
00:19:49.130 --> 00:19:53.510
end up using much more
lightweight editors. Anyway, Hi, it's

369
00:19:53.510 --> 00:19:55.550
Scott here from another place
in time. I hope you're

370
00:19:55.550 --> 00:19:58.370
enjoying the show so far.
I apologize for interrupting it,

371
00:19:58.370 --> 00:19:59.870
but I wanted to let
you know that assembling a

372
00:19:59.870 --> 00:20:03.110
podcast like this every week,
isn't free. Certainly the bandwidth

373
00:20:03.110 --> 00:20:04.820
bill crushes us every month.
So I wanted to let

374
00:20:04.820 --> 00:20:07.490
you know that this show
is sponsored by Tellerik. They

375
00:20:07.490 --> 00:20:09.020
make the show possible and
it makes it pretty cool

376
00:20:09.020 --> 00:20:11.780
products as well. For example,
if you're trying to build

377
00:20:11.780 --> 00:20:14.690
a web 2.0 Ajax application,
trying to use the web

378
00:20:14.690 --> 00:20:17.600
1.0 components, it's kind of
difficult. You got to get

379
00:20:17.600 --> 00:20:18.890
the next gen stuff. If
you want to build the

380
00:20:18.890 --> 00:20:21.410
next gen websites. And that's
exactly what the folks at

381
00:20:21.410 --> 00:20:23.930
Tellerik have got and their
new upcoming product, which is

382
00:20:23.930 --> 00:20:27.130
code named rad controls. Prometheus's,
it's a big pack of

383
00:20:27.130 --> 00:20:30.170
web controls built entirely on
top of the Microsoft ASP

384
00:20:30.170 --> 00:20:32.630
net Ajax stuff that you
already understand. It's going to

385
00:20:32.630 --> 00:20:34.520
give you a lot of
performance interactivity on your next

386
00:20:34.520 --> 00:20:37.790
project. They mirror the ASP
net Ajax API. So the

387
00:20:37.790 --> 00:20:41.630
development's really straightforward client scripture's
shared loading time is pretty

388
00:20:41.630 --> 00:20:44.390
fast. Instead, a couple of
properties, you can even bind

389
00:20:44.390 --> 00:20:47.650
a web services for really
efficient operation. The new rad

390
00:20:47.650 --> 00:20:49.870
editor for ESPN at Ajax
loads up to four times

391
00:20:49.870 --> 00:20:52.900
faster than before. And the
rad grid will do thousands

392
00:20:52.900 --> 00:20:55.630
of records in milliseconds. But
of course, it's, it's better

393
00:20:55.630 --> 00:20:57.550
to try these things for
yourself. So you can visit

394
00:20:57.580 --> 00:21:00.400
<inaudible> dot com slash ASP,
net Ajax, and download a

395
00:21:00.400 --> 00:21:03.130
trial. Thanks a lot for
listening and we'll get right

396
00:21:03.130 --> 00:21:05.800
back to the show. Now,
did, did, did any of

397
00:21:05.800 --> 00:21:08.890
this integration or lack of
integration become a problem with

398
00:21:08.890 --> 00:21:10.570
your, with your company that
you have to keep kind

399
00:21:10.570 --> 00:21:12.610
of convincing them that no,
don't worry. Don't worry. This

400
00:21:12.610 --> 00:21:17.130
is supported. This is real.
No. And the interesting thing

401
00:21:17.130 --> 00:21:20.010
is we've never, well, whenever
we've hired, we've never made

402
00:21:20.280 --> 00:21:23.700
knowing Python a priority because
we know that if we

403
00:21:23.700 --> 00:21:26.130
hire good developers, that they're
going to pick up pipes

404
00:21:26.130 --> 00:21:29.760
in very quickly. And as
I said, I, I prefer

405
00:21:29.760 --> 00:21:31.740
the wing idea. It turns
out that most of the

406
00:21:31.740 --> 00:21:34.130
rest of the developers in
my company, there's a, this,

407
00:21:34.130 --> 00:21:38.280
this war between the max
users and the VR users,

408
00:21:38.310 --> 00:21:41.430
and we do pair programming.
So whoever you pair with

409
00:21:41.430 --> 00:21:43.470
you end up using their
ID. So if you're a,

410
00:21:43.920 --> 00:21:45.630
if you're a fan of
them, you end up using

411
00:21:45.630 --> 00:21:47.960
them Emacs. So the other
way around, there's a, there's

412
00:21:47.960 --> 00:21:51.090
a bit of Peyton, but
it's, that's just never been

413
00:21:51.090 --> 00:21:54.660
an issue for us. And
then you've been doing this

414
00:21:54.660 --> 00:21:56.520
for very, very long time,
but what is a good

415
00:21:56.520 --> 00:21:58.860
way for someone to sit
down and learn it, dynamic

416
00:21:58.860 --> 00:22:01.770
language? I mean, should they
should have done it program

417
00:22:01.770 --> 00:22:03.780
or a VB or a
C sharp programmer, sit down

418
00:22:03.780 --> 00:22:06.750
and try to learn iron
Python, or should they go

419
00:22:06.750 --> 00:22:10.110
and get straight Python and
kind of learn the other

420
00:22:10.110 --> 00:22:11.880
side and then try to
bring it over to the

421
00:22:11.880 --> 00:22:13.770
irony and bring their knowledge
over to iron Python once

422
00:22:13.770 --> 00:22:17.070
they've got the basic center.
The great thing about <inaudible>

423
00:22:17.080 --> 00:22:21.090
is that I'm really, you're
just using the.net framework. I

424
00:22:21.090 --> 00:22:23.940
mean, I often look stuff
up on MSDN and I

425
00:22:23.940 --> 00:22:26.910
need to convert the C
sharp examples to <inaudible>. And

426
00:22:26.910 --> 00:22:29.400
very often it's just a
case of remove the type

427
00:22:29.400 --> 00:22:33.300
declarations, remove the new, remove
the curly braces, remove the

428
00:22:33.300 --> 00:22:37.620
semi-colons and bang is valid.
And the syntax really is

429
00:22:37.620 --> 00:22:39.990
very clear. It is a
very easily easy language to

430
00:22:39.990 --> 00:22:44.190
learn. And if you're starting
with iron pipe and having

431
00:22:44.190 --> 00:22:47.100
done, C-sharp having done vb.net,
you're going to find most

432
00:22:47.100 --> 00:22:49.170
of what you're doing very
familiar. So that's actually a

433
00:22:49.170 --> 00:22:52.350
very good way. So until
I'm talking, obviously I recommend

434
00:22:52.350 --> 00:22:54.660
as the very best way
of learning on person. I

435
00:22:54.660 --> 00:22:58.230
am posting in action. It's
a fantastic book, but pricing

436
00:22:58.230 --> 00:23:01.950
it's really very easy to
learn. Now, your book are

437
00:23:01.950 --> 00:23:04.680
in Python, an action book
that you wrote. Is that

438
00:23:04.680 --> 00:23:07.050
something that is appropriate for
someone to just get started

439
00:23:07.050 --> 00:23:10.230
with? Yes. I wrote it
specifically with us in mind.

440
00:23:10.950 --> 00:23:15.270
The, the, the second chapter
is a very fast paced

441
00:23:15.270 --> 00:23:17.370
Python tutorial, and then it
goes through, there's a few

442
00:23:17.370 --> 00:23:22.230
chapters of just writing a
simple structured application in place

443
00:23:22.230 --> 00:23:25.260
and using various of the
language features and using various

444
00:23:25.260 --> 00:23:28.890
of the features of the.net
framework. But there's, there's hopefully

445
00:23:28.890 --> 00:23:30.660
enough in there that it
should serve as a reference

446
00:23:30.660 --> 00:23:34.320
as well. And with those
chapters on Silverlight on WPF,

447
00:23:34.320 --> 00:23:37.740
on system administration, one of
the things I love with

448
00:23:37.770 --> 00:23:40.620
hyphema is that the very
first chapter introduces the interactive

449
00:23:40.620 --> 00:23:45.350
interpreter and the interactive interpreter.
You, you can fire up

450
00:23:45.380 --> 00:23:47.390
if you've got a console
and you can start to

451
00:23:47.390 --> 00:23:50.540
execute code immediately, so you
can import your classes. You

452
00:23:50.540 --> 00:23:52.700
can start to create instances
of them. So you get

453
00:23:52.700 --> 00:23:55.610
to play around with things
in a very interactive and

454
00:23:55.610 --> 00:24:00.560
a very exploratory sort of
environments. And I know.net developers

455
00:24:00.560 --> 00:24:02.870
who they, they don't really
use iron pipes in production,

456
00:24:03.170 --> 00:24:05.660
but they do use the
interactive interpreters as a tool

457
00:24:05.660 --> 00:24:09.110
for exploring things that are
new to them and just

458
00:24:09.230 --> 00:24:13.220
trying things out. So the
interactive experience is one of

459
00:24:13.220 --> 00:24:16.240
the things that's very important
with dynamic languages. Have you,

460
00:24:16.240 --> 00:24:19.090
have you used PowerShell at
all? I've used it a

461
00:24:19.090 --> 00:24:23.080
little bit, actually, mainly through
writing the book, because one

462
00:24:23.080 --> 00:24:25.450
of the interesting things about
PowerShell is you can embed

463
00:24:25.450 --> 00:24:29.320
it into other languages and,
and, and the same thing

464
00:24:29.320 --> 00:24:32.260
with iron. And so in
the chapter on system administration,

465
00:24:32.260 --> 00:24:35.170
there's a section on embedding
PowerShell in on bison and

466
00:24:35.180 --> 00:24:38.860
a section on embedding iron
pipes and in PowerShell PowerShell,

467
00:24:39.110 --> 00:24:43.030
for example, the WMI integration
and the integration is very

468
00:24:43.030 --> 00:24:45.190
good. So you might want
to take advantage of that

469
00:24:45.190 --> 00:24:46.990
for mine place. And then,
then I'm placing, you can

470
00:24:46.990 --> 00:24:49.000
use to overcome some of
the things that are harder

471
00:24:49.020 --> 00:24:52.450
to do in, in PowerShell.
So yeah, I've played with

472
00:24:52.450 --> 00:24:53.920
it a bit. I haven't
used it a great deal.

473
00:24:54.520 --> 00:24:56.740
Well, I bring it up
because a while back I

474
00:24:56.740 --> 00:25:00.340
had an application that I
wanted to make. Scriptable I

475
00:25:00.340 --> 00:25:03.880
had a fairly organized object
model. And the way that

476
00:25:03.880 --> 00:25:07.840
you made that scriptable in
PowerShell was that you just

477
00:25:07.840 --> 00:25:10.030
fired up an instance of
one of these PowerShell engine

478
00:25:10.030 --> 00:25:12.270
objects or whatever. I don't
remember what PowerShell host or

479
00:25:12.270 --> 00:25:15.130
something like that. You handed
it, you fired up a

480
00:25:15.130 --> 00:25:19.090
PowerShell host, you handed it
your object, your, your live

481
00:25:19.510 --> 00:25:23.290
running instance of an object.
And then you said.run. And

482
00:25:23.290 --> 00:25:25.810
that was kind of three
lines. And instantly, you've got

483
00:25:26.050 --> 00:25:30.310
a scripting now, fast forward,
many years, and now I've

484
00:25:30.310 --> 00:25:33.850
got this, this baby smash
game, which I want to

485
00:25:33.850 --> 00:25:36.160
turn into an educational tool.
I've got a bunch of

486
00:25:36.160 --> 00:25:39.370
objects and I want to
make it scriptable. Cause rather

487
00:25:39.370 --> 00:25:42.670
than me adding functionality to
it, why not let the

488
00:25:42.670 --> 00:25:48.070
parents just write Python? Right?
Walk me through what's involved

489
00:25:48.070 --> 00:25:51.070
in taking some application. It
doesn't matter what it is.

490
00:25:51.070 --> 00:25:53.350
You know, it's just some
basic application that has an

491
00:25:53.350 --> 00:25:59.140
object model and making it
scriptable. Well, it's very similar

492
00:25:59.140 --> 00:26:02.560
to, to doing with, with
power shots at one conference,

493
00:26:02.560 --> 00:26:05.530
I had a Mark, the
PowerShell guy, who's got a,

494
00:26:05.530 --> 00:26:07.120
he's got a very good
blog on PowerShell. And he

495
00:26:07.120 --> 00:26:09.850
showed me one of his
examples with a, a turtle

496
00:26:09.850 --> 00:26:12.610
that you could write little
scripts and move the turtle

497
00:26:12.610 --> 00:26:15.460
around that the screen light
light logo. And I converted

498
00:26:15.460 --> 00:26:17.740
that over to, to iron
Python. And it was like

499
00:26:17.740 --> 00:26:20.590
one extra line of code,
I think, to, to change

500
00:26:20.590 --> 00:26:23.320
his example, to scripting with
iron bison. So it's quite

501
00:26:23.320 --> 00:26:27.070
a similar experience. You create
the and engine, and then

502
00:26:27.070 --> 00:26:30.010
you, you create a context
that you're going to execute

503
00:26:30.010 --> 00:26:33.040
your code in. That's like
a namespace. So where variables

504
00:26:33.040 --> 00:26:36.370
are created by the script
or objects are instantiated, that

505
00:26:36.390 --> 00:26:39.340
the context is where they're
going to live. And then

506
00:26:39.340 --> 00:26:44.730
you, you just execute code
inside that context if you

507
00:26:44.730 --> 00:26:47.760
want. So the big question
is always, well, how do

508
00:26:47.760 --> 00:26:51.800
I expose the object model
from my application? Exactly. And

509
00:26:51.800 --> 00:26:54.080
my question before you, before
you continue, my question is

510
00:26:54.290 --> 00:26:59.720
what should my object model
look like? Well, an execution

511
00:26:59.720 --> 00:27:02.030
context is really just, it's
just a mapping. It's just

512
00:27:02.030 --> 00:27:06.410
a, it's effectively a dictionary
that maps names strings to,

513
00:27:06.680 --> 00:27:10.160
to objects, which are then
appear as variables in the,

514
00:27:11.330 --> 00:27:13.700
in the user's context. So
you could put classes in

515
00:27:13.700 --> 00:27:17.150
there and let the user
instantiate them. I mean, Parson

516
00:27:17.150 --> 00:27:21.290
has this, its whole execution
model. A model is based

517
00:27:21.290 --> 00:27:24.860
around modules, which are a
bit like namespaces in, in

518
00:27:25.280 --> 00:27:28.850
C sharp and vb.net. So
you can, you can make

519
00:27:28.850 --> 00:27:33.140
things available to import by
effectively making them as available

520
00:27:33.140 --> 00:27:36.440
as, as, as modules to
the, to the embedded engine.

521
00:27:36.800 --> 00:27:38.420
So you can either put
them directly. You can just

522
00:27:38.420 --> 00:27:41.930
put objects directly into the
namespace and say interacts with

523
00:27:41.930 --> 00:27:44.150
this, which is how the
turtle was. You have a

524
00:27:44.150 --> 00:27:48.200
turtle object that you could
call dots, move forward, dot

525
00:27:48.200 --> 00:27:50.720
turn left, and, and this
kind of thing. Or you

526
00:27:50.720 --> 00:27:53.480
can put the, you can
expose the object model as,

527
00:27:54.410 --> 00:27:56.750
as a series of modules.
The user can then import

528
00:27:57.360 --> 00:27:59.180
and you can then have
hooks, which say, right, if

529
00:27:59.180 --> 00:28:01.820
they create instances of these
classes, I'm going to collect

530
00:28:01.820 --> 00:28:04.490
them. So when that script
is executed, I can then

531
00:28:04.490 --> 00:28:08.810
introspect the instances that they've
created, pull those out. And

532
00:28:08.810 --> 00:28:11.180
then maybe, maybe each instance
is going to be an

533
00:28:11.180 --> 00:28:15.500
instance of a command objects.
That's an example of that

534
00:28:15.500 --> 00:28:18.200
in chapter 15 of iron
plus an inaction, which is

535
00:28:18.530 --> 00:28:23.300
writing a dotnet applique application
with, with plugins and the

536
00:28:23.300 --> 00:28:27.620
plugins are written in Python
code. Oh, very cool. Okay,

537
00:28:27.620 --> 00:28:30.560
cool. So chapter 15 of
your book, I'll make sure

538
00:28:30.560 --> 00:28:34.010
you get a copy, Scott.
Well, I guess it, it

539
00:28:34.010 --> 00:28:38.150
has, the membership has its
privileges. Thank you. Okay. So

540
00:28:38.150 --> 00:28:41.690
now do you, when you're
hosting iron Python in your

541
00:28:41.690 --> 00:28:45.130
application, you're still in the
CLR you're, you're still, you're,

542
00:28:45.130 --> 00:28:49.490
you're hosting the DLR runtime,
but as far as keeping

543
00:28:49.490 --> 00:28:52.910
track of, of what am
I trying to say, keeping

544
00:28:52.910 --> 00:28:57.360
track of conflicts and things.
I mean, this is just

545
00:28:57.380 --> 00:28:59.810
a, another library. It's not
like a new app domain

546
00:28:59.810 --> 00:29:03.620
fires up, right, Right. Yes.
It's executing in your abdomen.

547
00:29:03.770 --> 00:29:05.960
You can't, there is a
built in support. So say

548
00:29:06.400 --> 00:29:09.140
in the dynamic language runtime
to say, right, create me

549
00:29:09.140 --> 00:29:11.780
a place engine and create
it in this app domain.

550
00:29:11.780 --> 00:29:14.990
So keep it completely separate.
And that's quite useful if

551
00:29:14.990 --> 00:29:17.810
you want to add plugins
and use a scripting, but

552
00:29:17.810 --> 00:29:20.750
you want to restrict the
privileges of, of what the

553
00:29:20.750 --> 00:29:24.950
user can do, but you,
you might not want it

554
00:29:24.950 --> 00:29:27.890
to do that Now from
a security perspective though, what

555
00:29:27.890 --> 00:29:29.030
kind of things do I
want to think about? I'm

556
00:29:29.030 --> 00:29:32.900
going to be suddenly opening
up a huge chunk of

557
00:29:32.900 --> 00:29:38.510
my application for a well,
really arbitrary code execution. I'm

558
00:29:38.510 --> 00:29:40.820
saying here, take this textbox
and put whatever you want

559
00:29:40.820 --> 00:29:43.510
in it. How do I
keep someone in resolver or

560
00:29:43.510 --> 00:29:47.590
in baby smashed Python edition
from writing format C colon?

561
00:29:48.780 --> 00:29:51.330
Right. So the thing to
do then would be to,

562
00:29:51.620 --> 00:29:56.490
to, to put the pipes
in engine inside, inside an

563
00:29:56.490 --> 00:29:59.520
app, its own app domain,
and set there, the security

564
00:29:59.520 --> 00:30:02.370
privileges on that. And then
when you, when you want

565
00:30:02.370 --> 00:30:06.000
to look at objects from
your, from your side of

566
00:30:06.000 --> 00:30:08.730
the barrier, that they've going
to be serialized across the

567
00:30:08.730 --> 00:30:12.150
boundary for you, but the
code, the on piping code

568
00:30:12.150 --> 00:30:14.700
is restricted to only doing
what you've allowed it to

569
00:30:14.700 --> 00:30:18.390
do. Do you, do you
guys do that with resolver?

570
00:30:18.420 --> 00:30:20.850
How do I, you know,
how can someone avoid attacking

571
00:30:20.850 --> 00:30:22.320
resolver in that way? Or
is that not really an

572
00:30:22.320 --> 00:30:25.380
attack? Well, we have, we
have, we don't see it

573
00:30:25.650 --> 00:30:28.170
at the moment as an
attack because the code you're

574
00:30:28.170 --> 00:30:30.900
running on it is the,
is the code you've written.

575
00:30:30.900 --> 00:30:35.370
So it's intended as an
application development platform. So we

576
00:30:35.370 --> 00:30:38.070
don't want to very heavily
restrict what you're capable of

577
00:30:38.070 --> 00:30:39.840
doing. Cause the whole point
is you're supposed to be

578
00:30:39.840 --> 00:30:42.900
capable of doing whatever you
want, but that's certainly something

579
00:30:42.900 --> 00:30:44.660
we look, we're looking out
for the future for, for

580
00:30:44.670 --> 00:30:47.760
having a restricted execution model.
I guess it becomes more

581
00:30:47.760 --> 00:30:50.220
of a problem when one
introduces something like an online

582
00:30:50.220 --> 00:30:53.700
gallery or they give their
plugins their own extension and

583
00:30:53.700 --> 00:30:57.510
make it such that someone
could download plugins quickly. If

584
00:30:57.510 --> 00:31:02.280
resolver had a large community
of shared scripts, then things

585
00:31:02.510 --> 00:31:05.130
and it's one click to
import it into your application.

586
00:31:05.130 --> 00:31:09.030
And I suppose that might
be a more of more

587
00:31:09.030 --> 00:31:11.790
dangerous We would like to
see that happen. So it's

588
00:31:11.790 --> 00:31:13.800
definitely something we've, we've got
an eye on for the,

589
00:31:13.930 --> 00:31:16.710
for the future, But it's
good that iron pipe sounds

590
00:31:16.710 --> 00:31:20.130
like iron Python supports that
very nicely with the having

591
00:31:20.170 --> 00:31:22.260
other app domains and then
being able to have different

592
00:31:22.260 --> 00:31:26.370
trusts for those, for those
apps. So what do you

593
00:31:26.370 --> 00:31:28.500
want to change about iron
Python? I assume you talked

594
00:31:28.500 --> 00:31:31.110
to the team all the
time, where does it completely

595
00:31:31.110 --> 00:31:33.090
fall down? Is it just
the attributes thing that you

596
00:31:33.090 --> 00:31:38.340
mentioned earlier? That's quite a
big hole. It will get

597
00:31:38.340 --> 00:31:43.230
filled. I guess the, the
one thing at the moment,

598
00:31:43.230 --> 00:31:46.680
if, if you're working from
the, from the embedding side

599
00:31:46.710 --> 00:31:51.690
from the, and you're embedding
on pricing into C sharp,

600
00:31:52.830 --> 00:31:56.310
the difficult the difficulty is
when you're working with objects

601
00:31:56.310 --> 00:31:58.410
on the C sharp side,
you, you need to know

602
00:31:58.410 --> 00:32:02.070
the type upfront. So you've
got a compile time. So

603
00:32:02.070 --> 00:32:05.670
you've got this kind of,
what's the phrase impedance mismatch

604
00:32:05.670 --> 00:32:09.420
between I'm creating objects that
runtime by executing user code

605
00:32:09.420 --> 00:32:12.270
in, in a dynamically type
language. So those objects don't

606
00:32:12.270 --> 00:32:15.450
even exist until runtime, but
then I need to interact

607
00:32:15.450 --> 00:32:18.600
with them from the, from
the statically type side where

608
00:32:18.600 --> 00:32:21.810
I need to be able
to say a compile time,

609
00:32:21.810 --> 00:32:23.460
what type of those objects
are going to be. And

610
00:32:23.460 --> 00:32:26.280
of course, if you're executing
arbitrary code, you just don't

611
00:32:26.280 --> 00:32:30.570
know what's going to happen.
And certainly if you create

612
00:32:30.570 --> 00:32:34.170
pure Python objects, then the
objects you get is of

613
00:32:34.170 --> 00:32:38.190
a dynamic type. And, and
so you can't say to

614
00:32:38.190 --> 00:32:42.440
the compiler at compile time,
give me this member, or

615
00:32:42.440 --> 00:32:45.230
I want to call this
method because the compiler just

616
00:32:45.500 --> 00:32:48.290
doesn't know where to look,
that that method doesn't exist

617
00:32:48.290 --> 00:32:51.200
until runtime. So at the
moment, the way round that

618
00:32:51.200 --> 00:32:53.690
is the DLI itself has
got its own API that

619
00:32:53.690 --> 00:32:56.270
says, right, give me a
dynamic object and tell me

620
00:32:56.270 --> 00:32:58.190
what message you want to
call and I'll call it

621
00:32:58.190 --> 00:33:00.800
for you. And it just,
it looks a bit like

622
00:33:00.800 --> 00:33:04.900
reflection. It's not quite as,
as intricate as reflection is

623
00:33:04.910 --> 00:33:07.160
it, but, but it just,
the, the code for then

624
00:33:07.160 --> 00:33:10.190
interacting with dynamic objects starts
to become a bit more

625
00:33:10.190 --> 00:33:13.550
verbose than you'd really like.
One of the very interesting

626
00:33:13.550 --> 00:33:15.830
things is I think the,
the fix for that, that

627
00:33:15.830 --> 00:33:18.200
they've got coming in, in
C-sharp four is really very

628
00:33:18.200 --> 00:33:20.960
elegant. And what you can
do is you can say

629
00:33:22.010 --> 00:33:25.100
when I've got objects that
I've created for my end

630
00:33:25.100 --> 00:33:27.020
person, and I want to
pull those and interacts with

631
00:33:27.020 --> 00:33:29.800
those from, from C sharp
will be beat on that.

632
00:33:29.900 --> 00:33:31.970
What you can do is
declare that type as being

633
00:33:31.970 --> 00:33:35.240
dynamic and safe to the
compiler. This is a dynamic

634
00:33:35.240 --> 00:33:40.340
object. So I'm done statically
compile my, my member look

635
00:33:40.340 --> 00:33:43.610
ups my indexing. When I
use this as a numerical

636
00:33:43.610 --> 00:33:46.010
object to all of these
things that would normally be

637
00:33:46.700 --> 00:33:49.400
resolved at compile time. You
say, this is a dynamic

638
00:33:49.400 --> 00:33:52.760
objects you need to do
at late bounds when the

639
00:33:52.760 --> 00:33:54.770
code is actually running and
it calls back into the

640
00:33:54.770 --> 00:33:57.440
DLR and it does all
this stuff for you. So

641
00:33:57.440 --> 00:33:59.480
that's something that in C
sharp is going to be

642
00:33:59.480 --> 00:34:02.510
a lot nicer, but I,
I dunno how quickly a

643
00:34:02.510 --> 00:34:04.850
resolver we're going to be
able to depend on C-sharp

644
00:34:04.880 --> 00:34:07.010
for our application. We'll we'll
have to see how quick

645
00:34:07.010 --> 00:34:09.580
the take up is on
that. Now, one of the

646
00:34:09.580 --> 00:34:11.230
things that you just brought
up, I thought we should

647
00:34:11.230 --> 00:34:14.110
probably talk about just before
we, before we finish up

648
00:34:14.110 --> 00:34:16.840
here was the notion of
the dynamic object. I think

649
00:34:16.840 --> 00:34:19.450
that the C-sharp NPB developers
are familiar with the concept

650
00:34:19.450 --> 00:34:23.220
of system dot object that
you just kind of in

651
00:34:23.230 --> 00:34:26.710
passing mentioned that an object
that I created in Python,

652
00:34:27.250 --> 00:34:30.550
if I go and create
a person object and gave

653
00:34:30.550 --> 00:34:34.300
it some, some behavior, and
it found its way over

654
00:34:34.300 --> 00:34:37.720
into C-sharp or VB, it's
not quite gonna look like

655
00:34:37.720 --> 00:34:40.720
I might expect if I
started exploring that object. Can

656
00:34:40.720 --> 00:34:43.330
you talk a little bit
more about that? Sure. And

657
00:34:43.390 --> 00:34:46.870
I'm one of, one of
the difficulties is that piping

658
00:34:46.890 --> 00:34:51.460
classes are a lot more
flexible than C shop classes.

659
00:34:51.460 --> 00:34:55.330
You can add members at
runtime, you can override members

660
00:34:55.480 --> 00:34:59.080
or runtime classes can be
garbage collectors. You can create

661
00:34:59.080 --> 00:35:00.910
new ones at runtime. And
in fact, none of the

662
00:35:00.910 --> 00:35:04.990
classes are even created until
runtime. So if you create

663
00:35:04.990 --> 00:35:09.040
a Python class that is
not a true C sharp

664
00:35:09.040 --> 00:35:13.210
class, you can't statically reference
that and then use it

665
00:35:13.210 --> 00:35:17.230
directly. And, but the, these
features are one of the

666
00:35:17.230 --> 00:35:20.140
things that make testing a
dynamic language is so, so

667
00:35:20.140 --> 00:35:22.600
much easier because if I
want to test this, I'm

668
00:35:22.630 --> 00:35:27.220
calling method a calls, method,
B passing in certain types,

669
00:35:27.250 --> 00:35:31.570
we can override method, be
it runtime, very straightforwardly things

670
00:35:31.570 --> 00:35:35.200
like dependency, injection, and inversion
of controls that are, I

671
00:35:35.200 --> 00:35:38.680
mean, they're good architectural patterns,
but they're often used just,

672
00:35:38.770 --> 00:35:42.480
you can make your code
testable and they're just not

673
00:35:42.480 --> 00:35:45.180
needed for those reasons. But,
but the downside of that

674
00:35:45.180 --> 00:35:47.100
is, is that if we
want to use these classes

675
00:35:47.430 --> 00:35:50.550
from C-sharp the VB on
that we haven't got at

676
00:35:50.550 --> 00:35:54.680
that dotnet class to use.
Okay. So let's do dig

677
00:35:54.680 --> 00:35:57.080
a little bit more into
that because you've mentioned a

678
00:35:57.080 --> 00:36:00.980
couple of times that it
makes testing really easy. This

679
00:36:00.980 --> 00:36:04.880
is because of mocking, right?
We don't mock the same

680
00:36:04.880 --> 00:36:08.420
way in, in a dynamic
language that we do instead

681
00:36:08.420 --> 00:36:14.390
of language. Yeah. In, in
for example, suppose you have

682
00:36:15.530 --> 00:36:19.490
methadone and it takes two,
two parameters X, and Y

683
00:36:19.700 --> 00:36:22.910
both of those, you have
to declare the type. And

684
00:36:22.910 --> 00:36:26.660
that calls up to methadone.
There are mocking libraries that

685
00:36:26.660 --> 00:36:29.990
you can use in, in
dot nets to achieve all

686
00:36:29.990 --> 00:36:34.940
that. But in, and particularly
in Python, the runtime, isn't

687
00:36:34.940 --> 00:36:37.640
going to check the types
of X and Y. What

688
00:36:37.640 --> 00:36:39.790
it's going to do is
check the behavior. So lots,

689
00:36:39.830 --> 00:36:43.370
as long as you pass
in some objects that implements

690
00:36:43.400 --> 00:36:46.490
the same behavior, it doesn't
matter if the types don't

691
00:36:46.490 --> 00:36:51.590
match. And the same with
we've got method, a calling

692
00:36:51.590 --> 00:36:54.170
up to method B, we
can actually override method B

693
00:36:54.530 --> 00:36:57.680
to check whether it's being
cooled. And that's very simple,

694
00:36:57.710 --> 00:37:00.350
very, very little code. And
we can also, we can

695
00:37:00.350 --> 00:37:05.360
even do things like suppose
method B instantiates, a class,

696
00:37:05.690 --> 00:37:08.390
Right? That would be a
dependence. I would solve that

697
00:37:08.390 --> 00:37:12.620
with dependency injection, Right? The
architecture of your application in

698
00:37:12.620 --> 00:37:16.670
order to make it testable.
Whereas in person, we can

699
00:37:16.670 --> 00:37:19.430
override that dependency at runtime
and say for the purposes

700
00:37:19.430 --> 00:37:22.340
of the test, just during
the execution of this test,

701
00:37:22.610 --> 00:37:25.400
that class name, when it's
looked up at runtime, I'm

702
00:37:25.400 --> 00:37:26.930
actually going to give you
that I'm going to give

703
00:37:26.930 --> 00:37:30.140
you my object and test
that you've instantiated my objects.

704
00:37:30.470 --> 00:37:32.660
Now, if dependency injection turns
out to be a better

705
00:37:32.660 --> 00:37:34.190
way to write the code,
and of course you can

706
00:37:34.190 --> 00:37:36.260
still do that. You don't
need to change the way

707
00:37:36.260 --> 00:37:38.570
you write your application just
to even make it test.

708
00:37:39.600 --> 00:37:42.980
I see. Okay. Yeah. That's
interesting. You just said that

709
00:37:42.980 --> 00:37:44.870
you wouldn't want it. You
wouldn't have to change the

710
00:37:44.870 --> 00:37:46.460
way that you write your
application just to make it

711
00:37:46.460 --> 00:37:48.560
testable. And that's kind of
one of the little bit

712
00:37:48.560 --> 00:37:52.700
of tension points of tension.
And in doing development test

713
00:37:52.700 --> 00:37:56.420
driven development kind of makes
your stuff testable by virtue

714
00:37:56.420 --> 00:37:57.890
of the fact that the
tests are driving the way

715
00:37:57.890 --> 00:38:00.110
things are going. Yeah. So
you ha you're forced to

716
00:38:00.110 --> 00:38:02.120
ride in a testable way
and we use test driven

717
00:38:02.120 --> 00:38:05.090
development. And I think it's,
I'm a big advocate, but

718
00:38:05.300 --> 00:38:08.270
I didn't do it before
joining resolver. And it has

719
00:38:08.270 --> 00:38:10.970
changed the way I develop.
I think it's a fantastic

720
00:38:10.970 --> 00:38:13.970
way of thinking through and
designing your API, but it

721
00:38:13.970 --> 00:38:17.390
doesn't quite change the style
of your coding quite so

722
00:38:17.390 --> 00:38:20.330
much, necessarily in a dynamic
language, because you don't have

723
00:38:20.330 --> 00:38:23.840
to jump through hoops just
to do the testing. Huh.

724
00:38:23.900 --> 00:38:25.970
Okay. And then you think
that's a, that's a, a

725
00:38:26.030 --> 00:38:29.630
big win for, for dynamic
languages. In general, if I'm

726
00:38:29.630 --> 00:38:32.180
trying to convince someone to
start looking at dynamic languages,

727
00:38:33.350 --> 00:38:36.610
Testing really is orders of
magnitude. You've got no compile

728
00:38:37.510 --> 00:38:39.070
time, which is one of
the first things. So you've

729
00:38:39.070 --> 00:38:43.540
got this very quick, rapid
feedback, edit run. So particularly

730
00:38:43.540 --> 00:38:45.850
when you're doing TDD, where
you write a test, run

731
00:38:45.850 --> 00:38:49.420
it, watch it fail, write
a bit of code, run

732
00:38:49.420 --> 00:38:52.750
it, see whether the test
now passes. That's that feedback

733
00:38:52.750 --> 00:38:56.350
cycle is very rapid with
dynamic languages. You cut out

734
00:38:56.350 --> 00:38:58.450
the compile phase, but also
the features of the language

735
00:38:58.480 --> 00:39:01.570
really make themselves amenable to
testing. And again, there's a

736
00:39:01.570 --> 00:39:04.120
very good chapter on nothing
less than an action, which

737
00:39:04.120 --> 00:39:07.570
goes through things like the
way you use mock objects

738
00:39:07.570 --> 00:39:10.720
with that with dynamic languages,
things like monkey, patching modifying

739
00:39:10.960 --> 00:39:13.570
live objects, which is something
that in general is bad

740
00:39:13.570 --> 00:39:18.070
practice. But for testing, it's
very, it's quite ordinary and

741
00:39:18.070 --> 00:39:20.950
very useful. And it also
talks about dependency injection and

742
00:39:20.950 --> 00:39:23.980
how we do that. But
again, with dependency injection, we

743
00:39:23.980 --> 00:39:26.500
don't have the type of
problem we can. We can

744
00:39:27.010 --> 00:39:31.500
swap in objects of any
type. Now you just said,

745
00:39:31.500 --> 00:39:34.500
monkey patching for you. That's
a throwaway word, but for

746
00:39:34.500 --> 00:39:37.920
people who are listening, that's
probably not a throwaway, Right?

747
00:39:38.070 --> 00:39:40.050
My monkey patching is a,
it's a term that actually

748
00:39:40.140 --> 00:39:44.160
originates in the Python community,
the Zopa, which is the

749
00:39:44.160 --> 00:39:47.610
big granddaddy of pipes and
web frameworks, and all the

750
00:39:47.790 --> 00:39:52.650
Zopa developers it's originated as
an object publishing framework. And

751
00:39:53.610 --> 00:39:55.470
a big application written on
top of it is called

752
00:39:55.530 --> 00:39:58.320
<inaudible>, which is a content
management system, very widely used

753
00:39:58.320 --> 00:40:01.520
in Europe. And it's been
around for years. So that's

754
00:40:01.520 --> 00:40:03.840
sort of quite annoyed with
these upstarts, you know, the

755
00:40:04.260 --> 00:40:07.740
Django and, and rails and
asp.net MVC, which are just

756
00:40:07.740 --> 00:40:09.990
discovering all these things that
they say they've been doing

757
00:40:09.990 --> 00:40:12.720
for years, but it's a
very big and heavy framework.

758
00:40:12.720 --> 00:40:15.150
So I'm a little bit
of a funny reputation in

759
00:40:15.150 --> 00:40:19.620
the place of wealth, but
they, they, they came up

760
00:40:19.620 --> 00:40:23.250
with this term for modifying
live objects on the fly,

761
00:40:23.250 --> 00:40:25.350
and they called it gorilla
patching, you know, with the

762
00:40:25.350 --> 00:40:29.550
gue, with it, the sort
of thing, doing things sneakily

763
00:40:29.550 --> 00:40:32.070
on the fly. And that's
kind of that term morphed

764
00:40:32.070 --> 00:40:36.570
through gorilla patching to monkey
patching. And it's a, it's

765
00:40:36.570 --> 00:40:38.640
a term that's got a
bit of a bad reputation

766
00:40:38.650 --> 00:40:42.540
in Python. You can modify
live objects, you can change

767
00:40:42.540 --> 00:40:45.300
the implementation or runtime, but
if you do that in

768
00:40:45.300 --> 00:40:48.660
production code, what you end
up with is behavior. But

769
00:40:48.660 --> 00:40:50.340
when you then go back
to the source code to

770
00:40:50.340 --> 00:40:53.220
look at where that behavior
that is implemented, you reading

771
00:40:53.220 --> 00:40:55.620
the code, and you're thinking,
you're thinking the code I'm

772
00:40:55.620 --> 00:40:57.810
looking at is being executed,
but some other part of

773
00:40:57.810 --> 00:41:02.010
your code is actually modified,
modified it at runtime and

774
00:41:02.010 --> 00:41:04.620
something else is be something
else is actually executing. So

775
00:41:04.620 --> 00:41:06.840
something that within the culture
of pipe and just isn't

776
00:41:06.840 --> 00:41:10.470
done a lot, but then
Ruby came along and, and

777
00:41:11.550 --> 00:41:14.390
they, you can modify the
built in types of the

778
00:41:14.390 --> 00:41:16.830
various sort of primitive types
in, in Ruby. It was

779
00:41:16.830 --> 00:41:19.890
just something you can't do
in pricing. You can attach

780
00:41:19.890 --> 00:41:25.020
new methods to integers and
strings, and they took up

781
00:41:25.020 --> 00:41:27.300
this term monkey patching, and
it became quite a common

782
00:41:27.300 --> 00:41:29.790
term within the Ruby community.
So it's, it's a term

783
00:41:29.790 --> 00:41:33.260
it's quite well known within
the dynamic languages community. That

784
00:41:33.260 --> 00:41:36.580
mean that when Dotnet developers
use extension methods, we are

785
00:41:36.590 --> 00:41:41.980
monkey patching and that's bad.
So kind of it it's

786
00:41:41.980 --> 00:41:47.590
statically resolved. So for example,
the very common problem that

787
00:41:47.590 --> 00:41:50.680
can happen. There's not that
common, but they'd certainly has

788
00:41:50.680 --> 00:41:54.610
caused real problem for real
developers in Ruby is the

789
00:41:54.620 --> 00:42:00.100
way you, you have two
libraries that define the same

790
00:42:00.460 --> 00:42:04.510
methods and patch the same
methods onto, into JIRA or

791
00:42:05.620 --> 00:42:07.930
onto a string, but have
a different implementation and perhaps

792
00:42:07.930 --> 00:42:11.950
even take different number of
arguments they're going to clash

793
00:42:11.950 --> 00:42:13.300
or things aren't going to
be cooled in the way

794
00:42:13.300 --> 00:42:15.640
you expect. And you're not
necessarily going to know about

795
00:42:15.640 --> 00:42:17.800
it. I mean, obviously if
you're testing, you'll probably find

796
00:42:17.800 --> 00:42:20.530
out about it earlier. Whereas
I guess where if you're

797
00:42:20.530 --> 00:42:24.970
using C of VB vb.net,
it just wouldn't compile. I

798
00:42:24.970 --> 00:42:28.330
see. So in that instance,
it is, it is monkey

799
00:42:28.330 --> 00:42:30.760
patching kind of technically, but
the fact that we have

800
00:42:30.760 --> 00:42:34.090
that, that, that initial unit
test, Well, it is, and

801
00:42:34.110 --> 00:42:36.250
I guess you could run
into the same situation where

802
00:42:36.250 --> 00:42:39.490
you, where you get live
with convenience libraries, or even

803
00:42:39.490 --> 00:42:42.610
parts of your application that
try to define these, these

804
00:42:42.610 --> 00:42:45.100
common methods and think, well,
instead of providing these as

805
00:42:46.240 --> 00:42:51.250
static methods or functions, as
we'd say in a world

806
00:42:51.250 --> 00:42:53.710
where you have real functions,
you know, we're going to

807
00:42:53.710 --> 00:42:57.160
be clever and patch these
orders, extension methods, then suddenly

808
00:42:57.160 --> 00:43:00.220
you've got conflict and you've
got coach tried to call

809
00:43:00.220 --> 00:43:03.490
things that actually doesn't exist.
And you go to try

810
00:43:03.490 --> 00:43:05.260
and sort that out yourself,
which I guess is one

811
00:43:05.260 --> 00:43:08.530
of the common arguments against
over use of extension methods.

812
00:43:09.430 --> 00:43:11.740
Okay. Okay. Well, I've got
one last one last question,

813
00:43:11.740 --> 00:43:13.690
which is kind of like
a, more of a comment

814
00:43:13.690 --> 00:43:16.690
slash question, but someone told
me once that when, when

815
00:43:16.690 --> 00:43:22.210
arguing about static languages versus
dynamic languages, that compilation was

816
00:43:22.210 --> 00:43:26.710
really just a unit test
and that dynamic languages could

817
00:43:26.710 --> 00:43:29.710
compete with static languages. If
the argument was simply that,

818
00:43:29.740 --> 00:43:31.480
Oh, well, I have this
compiler and it makes things

819
00:43:31.480 --> 00:43:34.960
safer. If you have a
unit test, There's this great

820
00:43:34.960 --> 00:43:36.940
quote by this guy. I
think he's called Stuart Halloway.

821
00:43:37.270 --> 00:43:40.360
And he said that in
years to come, we're going

822
00:43:40.360 --> 00:43:43.240
to seek compilation as the
very weakest form of unit

823
00:43:43.240 --> 00:43:48.580
testing. And the thing is
that the compiling really does

824
00:43:48.580 --> 00:43:52.960
catch only a very small
subset of all possible bugs.

825
00:43:53.650 --> 00:43:56.710
And, you know, I know
some programs think that if

826
00:43:56.710 --> 00:43:59.110
their program compiles, it doesn't
have any bugs, but I

827
00:43:59.110 --> 00:44:02.430
suspect that they haven't been
programming for very long and

828
00:44:02.590 --> 00:44:04.720
really the kind of bugs,
the type errors that it

829
00:44:04.720 --> 00:44:06.970
catches are really the sort
of ones that are quite

830
00:44:06.970 --> 00:44:08.950
easy to catch. And the
minimal amount of testing, if

831
00:44:08.950 --> 00:44:10.960
you exit, if the code
is, if your code is

832
00:44:10.960 --> 00:44:14.740
making the wrong assumptions about
types, then really just exercising

833
00:44:14.740 --> 00:44:16.900
that code in, in almost
any way. It's probably gonna

834
00:44:16.910 --> 00:44:20.650
pick up those bugs and
also automated tools. I mean,

835
00:44:20.650 --> 00:44:24.880
we use PI lint, which
is a coding quality checker

836
00:44:24.880 --> 00:44:27.970
that, that runs over our
code base and catches a

837
00:44:27.970 --> 00:44:30.730
lot of the kinds of
errors. Constellation would normally catch

838
00:44:31.080 --> 00:44:34.320
compilation, really just Catches nothing
at all. If you think

839
00:44:34.320 --> 00:44:37.410
about it, when it comes
to how it doesn't tell

840
00:44:37.410 --> 00:44:39.630
you anything about how you
expect your application will run,

841
00:44:40.270 --> 00:44:42.120
it's just, it's like saying,
well, I've written a fine

842
00:44:42.120 --> 00:44:45.240
novel here and everything. It's
a wonderful novel. The spellchecker

843
00:44:45.240 --> 00:44:50.420
said, so That's right. Yeah,
exactly. And I think if

844
00:44:50.420 --> 00:44:52.160
you want to, if you
care about the quality of

845
00:44:52.160 --> 00:44:54.710
your code, you're going to
have automated tests. You're going

846
00:44:54.710 --> 00:44:57.230
to even attest that it
behaves how, how you expected.

847
00:44:57.610 --> 00:44:59.840
And in which case, really
compilation has bought you very

848
00:44:59.840 --> 00:45:02.660
little. And it turns out
that, that, that in maintaining

849
00:45:02.660 --> 00:45:05.500
this type safety and adhering
to this type system, that

850
00:45:05.500 --> 00:45:07.820
there's actually quite a cost
and what it allows you

851
00:45:07.820 --> 00:45:13.730
to do Well, Michael Ford, thank
you so much for speaking

852
00:45:13.730 --> 00:45:16.610
with me and talking about
Python today. And that folks

853
00:45:16.610 --> 00:45:19.250
remember that Michael's got a
book out called Python Python

854
00:45:19.280 --> 00:45:24.140
inaction, and your name online
is void space, right? Both

855
00:45:24.140 --> 00:45:26.630
spaces, but also UK slash
blogs. We'll get you to

856
00:45:26.630 --> 00:45:31.220
my blog. <inaudible> dot com,
books, websites, and then forget

857
00:45:31.220 --> 00:45:38.390
resolver systems.com, which everyone should
try out. Fantastic. Well, this

858
00:45:38.390 --> 00:45:40.850
has been another episode of
Hansel minutes, and we'll see

859
00:45:40.850 --> 00:45:41.750
you again next week.

