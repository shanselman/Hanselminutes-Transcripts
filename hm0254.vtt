WEBVTT FILE

1
00:00:12.210 --> 00:00:17.850
From hanselminutes.com. It's Hansel minutes,
our weekly discussion with web

2
00:00:17.850 --> 00:00:22.860
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.860 --> 00:00:29.580
number two 54. Recorded live
Thursday, February 3rd, 2011. Support for Hanselman

4
00:00:29.580 --> 00:00:33.600
it's provided by Tellerik rad
controls, the most comprehensive suite

5
00:00:33.600 --> 00:00:42.180
of components for windows forums
and asp.net web applications online@wwwdottelerik.com.

6
00:00:42.990 --> 00:00:46.710
In this episode, Scott talks
with Damien Edwards about new

7
00:00:46.710 --> 00:00:52.550
features in asp.net web forms.
Hi, this is Scott Hanselman

8
00:00:52.550 --> 00:00:56.060
and this is another episode
of Hansel minutes web forums.

9
00:00:56.360 --> 00:00:59.110
The reports of my death
have been greatly exaggerated at

10
00:00:59.110 --> 00:01:01.460
as the title of today's
show. And we've got Damien

11
00:01:01.460 --> 00:01:05.330
Edwards. How's it going, Damien?
Very well. Thank you, Scott.

12
00:01:06.020 --> 00:01:08.990
You know, we actually had
had your buddy take him

13
00:01:08.990 --> 00:01:11.690
on a couple of months
ago, talking about web forums

14
00:01:11.690 --> 00:01:14.390
and stuff. You guys work
together on the web forms,

15
00:01:14.390 --> 00:01:16.940
MPP project before you went
to work for Microsoft. Is

16
00:01:16.940 --> 00:01:21.290
that right? That's correct. Yeah.
So you guys are smart

17
00:01:21.290 --> 00:01:25.340
guys. I mean you're advanced,
advanced, alpha, alpha geeks. I

18
00:01:25.340 --> 00:01:27.290
think of you guys that
way. I mean, if I

19
00:01:27.290 --> 00:01:32.320
may be so bold, you
know, I mean, you, you

20
00:01:32.330 --> 00:01:34.610
like your things a certain
way and you're very opinionated

21
00:01:34.820 --> 00:01:38.150
and in the way that
you program and, you know,

22
00:01:38.390 --> 00:01:40.220
I think there's some people
who might have a misunderstanding

23
00:01:40.220 --> 00:01:43.460
about web forms and web
forms, why you would even

24
00:01:43.460 --> 00:01:46.160
bother with web forms. There's
so many, there's so much

25
00:01:46.190 --> 00:01:49.370
hype right now around MVC,
but if you look at

26
00:01:49.370 --> 00:01:51.890
the stats, I think that,
you know, probably big, big

27
00:01:51.890 --> 00:01:54.980
numbers, 80% of people are
still using 90% are still

28
00:01:54.980 --> 00:01:58.640
using, still using web forms.
Even though NBC is the,

29
00:01:58.670 --> 00:02:01.130
kind of the new, sexy
thing to talk about. Why

30
00:02:01.130 --> 00:02:03.980
do you think that the
alpha keeps you going in

31
00:02:03.980 --> 00:02:05.990
one direction and why is
web forums getting a bad,

32
00:02:06.290 --> 00:02:11.900
bad rap? That's a, that's
a difficult question. I think

33
00:02:12.020 --> 00:02:14.720
the alpha geeks tend to
pick on many different things

34
00:02:14.720 --> 00:02:17.210
about web forms. I mean,
webforms is very good at

35
00:02:17.210 --> 00:02:21.380
doing a particular types of
things and doing those very

36
00:02:21.380 --> 00:02:24.170
well. And if it suits
your purposes, then there's really

37
00:02:24.170 --> 00:02:26.540
nothing wrong with using that.
Then coming back to why

38
00:02:26.540 --> 00:02:32.150
people sometimes may pick on
web forms for various reasons.

39
00:02:33.140 --> 00:02:35.450
We have to remember that
web forms really was designed

40
00:02:35.510 --> 00:02:39.590
to be an abstraction over
the top of the coal

41
00:02:39.680 --> 00:02:42.290
roll protocols of building or
involved when you're building web

42
00:02:42.290 --> 00:02:46.100
applications. So it really abstracts
away the idea of HDP

43
00:02:47.120 --> 00:02:49.850
of doing get some posts
and even to a large

44
00:02:49.850 --> 00:02:52.830
extent to dealing with the
web browser. I mean, we

45
00:02:52.880 --> 00:02:55.550
really don't see an awful
lot of HTML. We don't

46
00:02:55.550 --> 00:02:58.190
see a lot of JavaScript
that the developer has to,

47
00:02:58.220 --> 00:03:01.090
right, unless they want to
get under the covers. And

48
00:03:01.090 --> 00:03:03.550
I think a lot of
people, when they, when they

49
00:03:03.550 --> 00:03:07.390
see that obstruction Stott Lake,
that they, they use that

50
00:03:07.390 --> 00:03:10.810
as a reason for putting
the whole sort of platform

51
00:03:10.810 --> 00:03:14.650
down, whether that's right or
wrong, I guess will depend

52
00:03:14.650 --> 00:03:17.290
on your circumstances. But I
think those are the sorts

53
00:03:17.290 --> 00:03:19.480
of things that people have
in the past picked on

54
00:03:19.480 --> 00:03:23.970
web forms for. Well, so
are you saying that there's

55
00:03:23.970 --> 00:03:26.040
a PR there are, there
are, there are not problems

56
00:03:26.040 --> 00:03:28.560
with web forms or are
you saying that there are

57
00:03:28.560 --> 00:03:32.400
problems with alpha geeks and
those personality quirks caused them

58
00:03:32.400 --> 00:03:34.040
to pick out a web
forms? I'm trying to understand

59
00:03:34.050 --> 00:03:37.140
like which direction you're coming
at this from. I think

60
00:03:37.140 --> 00:03:39.780
there are problems with any
platform or framework depending on

61
00:03:39.780 --> 00:03:43.350
what direction you're coming from.
And so certainly for doing

62
00:03:43.350 --> 00:03:46.110
certain types of things, web
forms can get in your

63
00:03:46.110 --> 00:03:49.200
way. If you want to
be able to have certain

64
00:03:49.200 --> 00:03:53.550
types of control or get
certain advantages out of using

65
00:03:53.580 --> 00:03:56.520
sort of the pre-canned elements,
you'll find that there are

66
00:03:56.520 --> 00:04:00.510
restrictions and caveats that come
along with doing that. That

67
00:04:00.510 --> 00:04:03.090
was the resurgence of, I
guess, in the last few

68
00:04:03.090 --> 00:04:08.250
years of, of web programming,
treating web programming as actual

69
00:04:08.250 --> 00:04:11.400
web programming and not dealing
with some obstruction over the

70
00:04:11.400 --> 00:04:14.810
top and the resurgence in
things like all of the,

71
00:04:14.810 --> 00:04:17.550
the, the rise of things
like mobile devices, where having

72
00:04:18.090 --> 00:04:22.650
a real control over mock
up, and what's going across

73
00:04:22.650 --> 00:04:26.040
the wire from your browser
to the server, people were

74
00:04:26.040 --> 00:04:30.600
writing into these, running into
these limitations, perhaps of web

75
00:04:30.600 --> 00:04:34.560
forms when trying to build
applications using sort of the

76
00:04:34.560 --> 00:04:37.710
top level paradigms that were
formed Springs, like server controls

77
00:04:37.710 --> 00:04:42.690
and pages. And we're ripe
for looking for an alternative

78
00:04:42.690 --> 00:04:46.560
and MVC sort of gave
that alternative. And it really

79
00:04:46.560 --> 00:04:50.910
does shine in those areas
where perhaps we're forms isn't

80
00:04:50.940 --> 00:04:54.150
the best suited candidate. Do
you think that when they

81
00:04:54.150 --> 00:04:57.570
made web forms that it
was targeted at, I mean,

82
00:04:57.570 --> 00:04:59.730
people always say like it
was targeted at the visual

83
00:04:59.730 --> 00:05:05.760
basic programmer at the dragon
drop button programmer. Is it

84
00:05:05.760 --> 00:05:10.560
fair to make judgments about
a programmers kind of inherent

85
00:05:10.560 --> 00:05:13.440
ability or current skill level
when thinking about it in

86
00:05:13.440 --> 00:05:17.010
the context of a framework
like web forms is good

87
00:05:17.010 --> 00:05:20.310
for beginner programmers in such
and such as good for

88
00:05:20.980 --> 00:05:23.730
advanced programmers, or is it,
does that have nothing to

89
00:05:23.730 --> 00:05:27.600
do with it? I think
that's more about what the

90
00:05:27.600 --> 00:05:30.450
particular and what the OnRamp
at that particular platform looks

91
00:05:30.450 --> 00:05:32.940
like. I mean, how high
is the concept count for

92
00:05:32.940 --> 00:05:35.610
someone coming into this platform
for the first time and

93
00:05:35.610 --> 00:05:38.520
is there an easy way
for them to ease into,

94
00:05:39.810 --> 00:05:42.750
into building for that platform
without having to learn a

95
00:05:42.750 --> 00:05:45.240
whole bunch of different things
before like an, even an

96
00:05:45.270 --> 00:05:48.420
output, a very simple sort
of UI from that, from

97
00:05:48.420 --> 00:05:50.730
that platform in terms of
web forms. I mean, it's

98
00:05:50.730 --> 00:05:53.880
very easy to do the
hello world example. It's very

99
00:05:53.880 --> 00:05:56.880
easy to get some data
from a database and display

100
00:05:56.880 --> 00:06:00.350
that the screen with, you
know, in his day was

101
00:06:00.350 --> 00:06:07.160
a fairly rich experience with
agreed that allows sorting and

102
00:06:07.460 --> 00:06:10.310
pays posts back for paging
and those types of things,

103
00:06:11.090 --> 00:06:14.630
standard sort of business application
UI, for sure. But if

104
00:06:14.630 --> 00:06:16.640
you were to try and
build that from scratch, with

105
00:06:16.670 --> 00:06:20.420
roar, HTML, JavaScript, and some
type of service, so programming,

106
00:06:20.840 --> 00:06:22.580
it would take you a
lot longer than dragging a

107
00:06:22.580 --> 00:06:25.700
couple of controls on not
configuring some properties and hitting

108
00:06:25.700 --> 00:06:30.530
F five and visual studio.
So I, I'm not sure

109
00:06:30.530 --> 00:06:34.010
whether it's, it's certainly valid
to judge the, the willing,

110
00:06:34.070 --> 00:06:36.650
the suitable, whether a platform
is suitable or not for

111
00:06:36.740 --> 00:06:40.340
various types of program is
based on the competencies or

112
00:06:40.340 --> 00:06:42.590
not. But I think there's
certainly an element of truth

113
00:06:42.590 --> 00:06:45.830
to the, to the assertion
that a web forms was

114
00:06:45.830 --> 00:06:51.700
built to really help the
VB programmer in quotes. Yeah,

115
00:06:51.700 --> 00:06:54.250
but not maybe language, but
kind of put it, yeah,

116
00:06:54.280 --> 00:06:57.760
not the VB language, but
the prototypical visual basic programmer

117
00:06:57.760 --> 00:07:01.930
of the early mid nineties
who You'll do a design

118
00:07:01.930 --> 00:07:04.840
surface and event driven programming
and those types of things.

119
00:07:06.670 --> 00:07:07.990
Right. But the thing that
I'm trying to get my

120
00:07:07.990 --> 00:07:12.670
head around is that, is
it somehow let's say two

121
00:07:12.670 --> 00:07:16.420
examples. Somebody takes a data
control and drags it from

122
00:07:16.750 --> 00:07:20.980
visual studio onto the design
surface, hooks up a database

123
00:07:20.980 --> 00:07:24.790
and they have a grid.
Another person does something from

124
00:07:24.790 --> 00:07:28.900
the command line, generates the
exact same results and create

125
00:07:28.900 --> 00:07:30.760
some code that does a
four loop that makes a

126
00:07:30.760 --> 00:07:34.870
grid except they did it
using a scaffolding system. The

127
00:07:34.870 --> 00:07:39.400
output is identical, you know,
effectively, but one of them

128
00:07:39.400 --> 00:07:41.770
is an advanced is considered
an advanced program are doing

129
00:07:41.770 --> 00:07:43.780
really cool stuff with a
new framework. And the other

130
00:07:43.780 --> 00:07:46.660
one is just dragging and
dropping. Is it a matter

131
00:07:46.660 --> 00:07:51.400
of programmer bigotry? The were
easy, but not too easy,

132
00:07:52.330 --> 00:07:54.970
like a dragon, how is
dragging and dropping somehow less

133
00:07:54.970 --> 00:07:59.740
noble than typing rake from
the command line? Oh, I

134
00:07:59.740 --> 00:08:03.220
don't think it is again,
I'm, I'm a big exponent

135
00:08:03.220 --> 00:08:05.770
of using the right tool
for the right job. And,

136
00:08:06.250 --> 00:08:08.590
you know, and that includes
not just what you're trying

137
00:08:08.590 --> 00:08:11.710
to output, but the know
the experiences and the, and

138
00:08:11.710 --> 00:08:14.080
the efforts involved by the
people actually building the things.

139
00:08:14.080 --> 00:08:17.350
And if those tools match
all those outcomes for the

140
00:08:17.350 --> 00:08:19.630
thing that you're trying to
achieve, then I don't think

141
00:08:19.630 --> 00:08:21.460
it's in anyone's place to
tell you that you're using

142
00:08:21.460 --> 00:08:23.140
the wrong thing or that
what you are doing is

143
00:08:23.470 --> 00:08:28.240
somehow inferior to what other
people are doing. I think

144
00:08:28.240 --> 00:08:30.940
we as programmers tend to
be, I mean, as you

145
00:08:30.970 --> 00:08:35.380
said before, yes, take them
and I fairly opinionated that

146
00:08:35.380 --> 00:08:37.290
can be now, if you
look at our framework, we've,

147
00:08:37.290 --> 00:08:39.580
we've made some opinionated decisions
about what's there and what's

148
00:08:39.580 --> 00:08:42.160
not, but that's not to
say that. I think it's

149
00:08:42.160 --> 00:08:45.580
developer's job to judge other
developers on these things. At

150
00:08:45.580 --> 00:08:48.250
the end of the day,
we're all just trying to

151
00:08:48.310 --> 00:08:52.300
do our jobs and to
write good code. Or even

152
00:08:52.300 --> 00:08:53.830
if we're not trying to
write good code write code

153
00:08:53.830 --> 00:08:57.750
that works. So I'm not
going to sit here and

154
00:08:57.750 --> 00:09:01.830
tell people that doing this
thing is completely wrong, you

155
00:09:01.830 --> 00:09:04.440
know, unless, unless I can,
I, I will have a

156
00:09:04.440 --> 00:09:06.570
heated argument about it, but
I'm not about to tell

157
00:09:06.570 --> 00:09:08.340
them that they're completely wrong,
that they should be doing

158
00:09:08.340 --> 00:09:11.760
it this way without really
giving consideration to what it

159
00:09:11.760 --> 00:09:15.080
is that they're trying to
achieve. Yeah. Yeah. It's funny

160
00:09:15.080 --> 00:09:18.770
that people, people are still
teasing me about making the,

161
00:09:19.310 --> 00:09:21.380
the website for the other
podcast that I do with

162
00:09:21.380 --> 00:09:24.080
Rob Connery, this developer's life,
we made that website in

163
00:09:24.080 --> 00:09:27.500
web matrix. And, you know,
there's been some gentle ribbing,

164
00:09:27.530 --> 00:09:29.780
but having done that in
web matrix because people still

165
00:09:29.780 --> 00:09:32.270
think that it was a
kind of a toy. And

166
00:09:32.270 --> 00:09:34.340
we actually had Rob on
the show and talked about,

167
00:09:35.090 --> 00:09:36.530
you know, the fun that
we had in making that.

168
00:09:36.800 --> 00:09:38.690
I wonder if I had
built it in web forums,

169
00:09:38.690 --> 00:09:41.240
if I would have been
teased from a different group,

170
00:09:42.230 --> 00:09:47.300
I'm sure you would have.
I think, I, I think

171
00:09:47.300 --> 00:09:50.210
no matter what technology you
choose, you would likely get

172
00:09:50.210 --> 00:09:53.300
teased. I mean, maybe MVC
is the cool kids smoking

173
00:09:53.300 --> 00:09:54.920
behind the bike sheds at
the moment. No, one's going

174
00:09:54.920 --> 00:09:58.190
to pick on them, but
yeah, but everything else I

175
00:09:58.190 --> 00:10:00.800
think is fair game. Well,
it's funny. I always talk

176
00:10:00.800 --> 00:10:04.550
about the whole car versus
motorcycle analogy. The idea that

177
00:10:05.060 --> 00:10:08.300
MVC is a motorcycle that
gives you lots of control

178
00:10:08.300 --> 00:10:10.220
and it lets you feel
the, you know, feel the

179
00:10:10.280 --> 00:10:13.370
road beneath you. And of
course you could fly off

180
00:10:13.370 --> 00:10:16.250
the motorcycle and really hurt
yourself. But ultimately if you,

181
00:10:16.250 --> 00:10:18.530
if you really want that
kind of magic of driving,

182
00:10:18.590 --> 00:10:22.460
you know, use NVC use
a motorcycle and web forms

183
00:10:22.460 --> 00:10:25.160
is the kind of the
minivan or the car. It's

184
00:10:25.160 --> 00:10:27.290
got more cargo space and
it lets you take the

185
00:10:27.290 --> 00:10:29.750
kids to the store. It
just doesn't look very good

186
00:10:29.780 --> 00:10:33.530
like myself. Now that I've
got kids, I drive, I

187
00:10:33.530 --> 00:10:37.130
like to call it a
crossover vehicle. That's that's man

188
00:10:37.130 --> 00:10:41.810
speak for a swollen minivan.
And, but, you know, I

189
00:10:41.810 --> 00:10:45.560
tell myself that it's okay,
but there's really nothing, nothing

190
00:10:45.560 --> 00:10:48.860
necessarily wrong with that because
most people drive cars. Most

191
00:10:48.860 --> 00:10:51.920
people use web forms. And
I know that in dotnet

192
00:10:51.920 --> 00:10:54.020
at four, there was a
lot of stuff that was

193
00:10:54.020 --> 00:10:55.940
added to web forums to
make it better. You know,

194
00:10:55.940 --> 00:11:01.490
view's date got 30 or
40% smaller. You have the

195
00:11:01.490 --> 00:11:06.650
ability to have CSS, like
basically change the rendering of

196
00:11:06.650 --> 00:11:10.880
any control using advanced templating.
So even really old funky

197
00:11:10.880 --> 00:11:14.330
controls, if people have forgotten
about like the ASP wizard

198
00:11:14.330 --> 00:11:17.060
control and the, you know,
stuff like that, you could

199
00:11:17.060 --> 00:11:20.150
make it output, you know,
dibs and Juelz and allies

200
00:11:20.150 --> 00:11:23.450
and stuff like that. That's
fine. What's a, what's coming

201
00:11:23.450 --> 00:11:26.750
next though. Everyone's saying that
all the, all the hype

202
00:11:26.750 --> 00:11:29.090
is running VC, but what,
what do we know about

203
00:11:29.090 --> 00:11:31.430
Envia but the next version
of web forums, and then

204
00:11:31.730 --> 00:11:33.740
also, what can you do
with platforms today? You know,

205
00:11:34.130 --> 00:11:36.650
Interesting if you bring it
up that people have this

206
00:11:36.650 --> 00:11:39.770
perception that perhaps web forms
isn't being invested in, I

207
00:11:39.770 --> 00:11:41.540
mean, you just, you just
pointed out that with our

208
00:11:41.540 --> 00:11:44.930
latest release, which is coming
up to 12 months now,

209
00:11:44.960 --> 00:11:47.090
so it's not even, I
think 10 months since we

210
00:11:47.090 --> 00:11:50.270
released that we did, there
was a significant investment in

211
00:11:50.330 --> 00:11:52.610
web forms in.net for, you
mentioned a couple of things

212
00:11:52.610 --> 00:11:56.890
there. We did work about
controlling client IDs. And then

213
00:11:56.890 --> 00:11:58.540
there was a lot of
work that went in sort

214
00:11:58.540 --> 00:12:02.740
of@thebaseasp.net level, but web forms
got the advantage of as

215
00:12:02.740 --> 00:12:06.310
well. Now for the next
version, we're really sort of

216
00:12:06.310 --> 00:12:10.360
continuing on this idea of,
well, you know, asp.net is

217
00:12:10.360 --> 00:12:14.020
a foundation framework. And then
on top of asp.net, CIT

218
00:12:14.950 --> 00:12:18.190
other smaller frameworks that plug
into that, depending on how

219
00:12:18.190 --> 00:12:21.010
you want to go about
building your applications. And from

220
00:12:21.010 --> 00:12:23.440
time to time, there will
be things that get built

221
00:12:23.470 --> 00:12:27.940
in one of those smaller
frameworks that shipped with that

222
00:12:27.940 --> 00:12:30.610
framework. And then eventually it
sort of realized, well, you

223
00:12:30.610 --> 00:12:32.500
know, this would be, this
is a really good concept

224
00:12:32.710 --> 00:12:35.680
and it doesn't just fit
inside this framework. Perhaps we

225
00:12:35.680 --> 00:12:37.270
could pull it across to
one of the other ones.

226
00:12:37.720 --> 00:12:40.840
And so, as an example,
in the MVC world, we

227
00:12:40.840 --> 00:12:45.940
have the idea of a
model binders, which makes a

228
00:12:45.940 --> 00:12:47.800
lot of sense in NBC.
I mean, NBC is very

229
00:12:47.800 --> 00:12:52.510
code focused and the idea
that you would use some

230
00:12:52.510 --> 00:12:55.270
code to access your data
to, and then generate a

231
00:12:55.270 --> 00:12:57.400
model that you give to
your view. But then when

232
00:12:57.400 --> 00:13:00.040
that, the request from the
browser is coming back in,

233
00:13:00.250 --> 00:13:01.660
you don't want to have
to do all that left

234
00:13:01.660 --> 00:13:04.570
hand, right hand side code
to, to take the user

235
00:13:04.570 --> 00:13:06.550
input and push that back
into your model. So we

236
00:13:06.550 --> 00:13:08.530
have the concept of a
model binders do that for

237
00:13:08.530 --> 00:13:10.810
you. So we're looking at
that concept of a web

238
00:13:10.810 --> 00:13:14.050
forms and, and having a
look at what's required today

239
00:13:14.050 --> 00:13:17.260
in web forms to say,
use something like in a

240
00:13:17.260 --> 00:13:20.620
D framework code first, where
if I want to, if

241
00:13:20.620 --> 00:13:24.230
I'm quite happy to write
code, to do my, my

242
00:13:24.230 --> 00:13:27.130
model management in the middle
tier off to the database,

243
00:13:27.160 --> 00:13:29.800
using something like ETF code
first, how do I go

244
00:13:29.800 --> 00:13:31.960
about using that with web
forms? Well, today, if you

245
00:13:31.960 --> 00:13:33.970
want to use a grid
view, you'd have a couple

246
00:13:33.970 --> 00:13:36.700
of options. You could put
a grid view on your

247
00:13:36.700 --> 00:13:39.420
page and then a drop
an object data source onto

248
00:13:39.420 --> 00:13:41.890
the page next to it,
configure the grid view to

249
00:13:41.890 --> 00:13:44.230
use that object data source.
And then you would have

250
00:13:44.230 --> 00:13:47.230
to create another class that
the object data source is

251
00:13:47.230 --> 00:13:50.080
going to look at, which
is the class that would

252
00:13:50.110 --> 00:13:52.090
then have your code in
it that does the EOF

253
00:13:52.090 --> 00:13:56.710
code first work. Then if
you needed to wire up

254
00:13:56.800 --> 00:13:59.650
a certain inputs into those
methods, like your, your crud

255
00:13:59.650 --> 00:14:02.080
methods that would exist on
that class, you would have

256
00:14:02.080 --> 00:14:05.110
to go back into your
page markup and declare a

257
00:14:05.110 --> 00:14:07.750
bunch of parameters on that
object, data source to pull

258
00:14:07.750 --> 00:14:10.150
all of those values through.
So if you look at

259
00:14:10.150 --> 00:14:11.590
the markup, I mean, you
can do all of this

260
00:14:11.590 --> 00:14:14.290
with the designer that eventually
a lot of people will

261
00:14:14.290 --> 00:14:16.240
have to jump in into
the mockup to configure this

262
00:14:16.240 --> 00:14:18.580
stuff. And you'll see a
lot of markup in your

263
00:14:18.580 --> 00:14:21.670
page, just that at the
end of the day, all

264
00:14:21.670 --> 00:14:23.470
you want to be able
to do is call, you

265
00:14:23.470 --> 00:14:28.330
know, my database context dot
customers, dot, get whatever. And

266
00:14:28.330 --> 00:14:29.620
so we're looking at how
we can make that a

267
00:14:29.620 --> 00:14:31.780
lot easier. So rather than
having to have, say an

268
00:14:31.780 --> 00:14:33.760
object data source on the
page, you can just have

269
00:14:33.760 --> 00:14:37.030
a grid view and just
point that directly at the

270
00:14:37.030 --> 00:14:39.190
methods in your code behind
that are going to go

271
00:14:39.190 --> 00:14:41.470
off and do whatever it
is you do to get

272
00:14:41.470 --> 00:14:44.290
data. And then also take
care of some of that

273
00:14:44.290 --> 00:14:46.330
left hand, right hand code
for you so that when

274
00:14:46.330 --> 00:14:49.120
the user clicks the save
button, whether it's on a

275
00:14:49.120 --> 00:14:53.060
grid view row or a
form view, edit template, the

276
00:14:53.060 --> 00:14:58.130
values associated with that action
automatically bound. If you want

277
00:14:58.130 --> 00:15:00.770
model bound, if you'd like
to the method that you've

278
00:15:00.770 --> 00:15:03.530
declared as being say the
update method in that case.

279
00:15:04.040 --> 00:15:05.690
So that's a case where
we're looking at bringing some

280
00:15:05.690 --> 00:15:10.000
of those things across. Hi,
this is Scott coming to

281
00:15:10.000 --> 00:15:12.820
you from another place in
time. Are you using agile

282
00:15:12.820 --> 00:15:15.670
practices to manage your software
development? There's lots of tools

283
00:15:15.670 --> 00:15:17.740
in the market that manage
the steps of a project,

284
00:15:17.740 --> 00:15:20.860
but most of them focus
on individual roles, get ready

285
00:15:20.860 --> 00:15:22.780
for a solution that caters
for the success of the

286
00:15:22.780 --> 00:15:26.440
whole team. Guys at Tellerik
introduced team pulse. It's an

287
00:15:26.440 --> 00:15:30.130
agile project management tool. That'll
help you gather ideas, estimate

288
00:15:30.130 --> 00:15:34.600
plan, track progress in a
common workspace. Finally, companies, regardless

289
00:15:34.600 --> 00:15:36.640
of their size can use
a lightweight and convenient tool

290
00:15:36.640 --> 00:15:39.070
that makes all the stakeholders
work as a United team.

291
00:15:40.030 --> 00:15:43.210
Even if they're in different
countries by combining intuitive user

292
00:15:43.210 --> 00:15:45.910
interface and the power server
light team poles removes the

293
00:15:45.910 --> 00:15:48.550
roadblocks that you typically face
and applying agile in an

294
00:15:48.550 --> 00:15:52.630
effective manner, no more lost
data, no disparate systems, no

295
00:15:52.630 --> 00:15:56.140
lack of critical analytics regarding
the health and philosophy project.

296
00:15:56.620 --> 00:15:59.590
See if yourself get a
free copy for five users

297
00:15:59.590 --> 00:16:06.040
in one project at tellerik.com/team
pulse. And please do thank

298
00:16:06.040 --> 00:16:08.800
tolerance for supporting Hansel minutes
on their Facebook fan page,

299
00:16:09.280 --> 00:16:15.340
facebook.com/t L E R I
K Keller. We do appreciate

300
00:16:15.340 --> 00:16:17.050
it. They wouldn't be a
Hansel minutes if there wasn't

301
00:16:17.050 --> 00:16:20.020
teller helping us. So yeah,
one of the things when

302
00:16:20.020 --> 00:16:22.120
I'm running a lot of
web forums code that I

303
00:16:22.120 --> 00:16:25.570
spent I am doing is
digging around in the HTP

304
00:16:25.570 --> 00:16:28.720
requests. I mean, that's almost
half of the kinds of

305
00:16:28.720 --> 00:16:30.910
code that I'm writing when
I'm messing around, like you

306
00:16:30.910 --> 00:16:33.620
called it left hand, right
hand code. You know, that,

307
00:16:33.620 --> 00:16:36.970
that idea that I want
to dig into the HTP

308
00:16:36.970 --> 00:16:40.870
request a request form, request
a query string, pull that

309
00:16:40.870 --> 00:16:42.940
stuff out and stick it
into my object and then

310
00:16:43.060 --> 00:16:44.950
take that object and do
something with it. That's really

311
00:16:44.950 --> 00:16:48.310
tedious code it's. It can
be a huge portion of

312
00:16:48.310 --> 00:16:52.600
the, of the code behind.
So with model binding that

313
00:16:52.600 --> 00:16:55.930
just kind of collapses, doesn't
it? It does. And I

314
00:16:55.930 --> 00:16:59.230
think one of the other
things that people sort of

315
00:16:59.230 --> 00:17:01.660
pick on web forms for
is the lack of testability.

316
00:17:02.080 --> 00:17:04.780
And it's easy to see
that if, if you, if

317
00:17:04.780 --> 00:17:08.380
you open up a general,
a typical code behind file

318
00:17:08.380 --> 00:17:10.990
for an asp.net web forms
page you'll, you'll generally see

319
00:17:10.990 --> 00:17:13.000
a lot of this type
of code. A lot of

320
00:17:13.000 --> 00:17:16.660
is UI crud sort of
code. And it's very hard

321
00:17:16.660 --> 00:17:21.010
to test because the, the,
the asp.net based classes for

322
00:17:21.010 --> 00:17:24.970
web forms inherently aren't, markable,
they're, they're not easy to

323
00:17:24.970 --> 00:17:28.510
substitute things for, to run
them outside of the asp.net

324
00:17:28.690 --> 00:17:31.690
web forms, runtime. And so
if you wanted to make

325
00:17:31.690 --> 00:17:33.910
those things testable, you have
to write a layer of

326
00:17:33.910 --> 00:17:37.480
your own abstractions and then
move all that code out

327
00:17:37.480 --> 00:17:39.910
into another class. And then
you have to have another

328
00:17:39.910 --> 00:17:42.220
framework sitting there doing the
glue for you. So I

329
00:17:42.220 --> 00:17:45.370
think model binders in the
context of web forms will

330
00:17:45.370 --> 00:17:47.980
kind of help because any
code that you can remove

331
00:17:48.190 --> 00:17:51.030
from your code behind is
a less code you had

332
00:17:51.030 --> 00:17:53.460
to write and be less
code you have to test.

333
00:17:54.180 --> 00:18:00.410
And so less code means
less bugs generally. Hmm. So

334
00:18:01.220 --> 00:18:02.450
is this the kind of
thing that we're going to

335
00:18:02.450 --> 00:18:05.510
see as a, as an
add on or a futures?

336
00:18:05.510 --> 00:18:07.160
I mean, one of the
things that the asp.net team

337
00:18:07.160 --> 00:18:11.300
has kind of done lately
is releasing new ad-ons to

338
00:18:11.300 --> 00:18:14.750
things like MVC as, as
NBC futures. Is there a

339
00:18:14.750 --> 00:18:17.210
web forms, futures where I
can use these kinds of

340
00:18:17.210 --> 00:18:20.150
things today? Are there other
future web forms features that

341
00:18:20.150 --> 00:18:24.020
someone could be playing with
after this podcast? Not, not

342
00:18:24.020 --> 00:18:25.430
immediately. I mean, if you
go up to the ASP

343
00:18:25.430 --> 00:18:27.890
net code Plex site today,
there is a web form

344
00:18:27.890 --> 00:18:30.380
section. And I believe the
only thing in that web

345
00:18:30.380 --> 00:18:34.100
forms future section at the
moment was the CSS sprites

346
00:18:34.130 --> 00:18:38.330
prototype that we shipped last
year, which you can certainly

347
00:18:38.330 --> 00:18:40.280
go in and have a
look at to get an

348
00:18:40.280 --> 00:18:41.900
idea of some of the
things that we were thinking

349
00:18:41.900 --> 00:18:44.840
about in terms of the
release mechanism for the things

350
00:18:44.840 --> 00:18:46.940
that we're talking about now
at the moment, these are

351
00:18:46.940 --> 00:18:50.180
all being talked about going
to the next version of

352
00:18:50.180 --> 00:18:52.580
web forms. Now, web forms
we have to remember is

353
00:18:52.580 --> 00:18:57.950
actually pot of asp.net. It's
not like MVC in that

354
00:18:58.310 --> 00:19:02.060
the web forms, assemblies and
types are actually in the.net

355
00:19:02.060 --> 00:19:07.160
framework base class library itself.
So unfortunately, when we want

356
00:19:07.160 --> 00:19:08.900
to make changes to some
of these things, it can

357
00:19:08.900 --> 00:19:11.840
be difficult for us to
do them out of band,

358
00:19:11.840 --> 00:19:13.820
which is a term that
we use to say, when

359
00:19:13.820 --> 00:19:15.980
we want to release something,
that's not part of the

360
00:19:15.980 --> 00:19:20.060
main shipping vehicle for.net or
visual studio. Now that doesn't

361
00:19:20.060 --> 00:19:21.980
mean we can't all the
time and date. If you,

362
00:19:21.980 --> 00:19:24.380
if you cast your mind
back when we first released

363
00:19:24.380 --> 00:19:29.330
the MSA Ajax framework in
version one that was done

364
00:19:29.330 --> 00:19:32.000
as an out of band
on top of dotnet too

365
00:19:32.060 --> 00:19:34.220
at the time. And then
eventually that roll back into

366
00:19:34.220 --> 00:19:38.630
the framework in.net 3.5 service
pack one, I think now

367
00:19:39.230 --> 00:19:42.440
this we're still in early
planning, so it's, it could

368
00:19:42.440 --> 00:19:44.930
go either way, but at
the moment, it's the thoughts

369
00:19:44.930 --> 00:19:47.210
are it would go into
the base in the next

370
00:19:47.210 --> 00:19:49.940
version of the.net framework. But
that's not to say that

371
00:19:49.940 --> 00:19:51.650
there won't be other things
that we can do for

372
00:19:51.650 --> 00:19:54.800
web forms before that next
version of the framework comes

373
00:19:54.800 --> 00:19:57.530
around. Do you think the
sprites thing will be, we'll

374
00:19:57.530 --> 00:19:59.210
make it in there? I
mean, how many things that

375
00:19:59.210 --> 00:20:01.130
make it into a future
is released make it into

376
00:20:01.130 --> 00:20:04.550
the product and how do
you decide that? I think

377
00:20:04.550 --> 00:20:08.300
it's, it's really, it's not
very different to any other

378
00:20:08.420 --> 00:20:12.200
software planning mechanism or exercise.
I mean, I I've been

379
00:20:12.200 --> 00:20:14.300
here for a year now.
And I think when I

380
00:20:14.300 --> 00:20:17.150
came to Microsoft, I really
expected it to be different

381
00:20:17.150 --> 00:20:18.950
in terms of me not
being a software engineer for

382
00:20:19.340 --> 00:20:21.590
over 10 years. And I'd
worked in lots of very

383
00:20:21.590 --> 00:20:25.520
big software projects, but all
web based on I was

384
00:20:25.520 --> 00:20:27.590
a web developer and I
sort of came here expecting

385
00:20:27.590 --> 00:20:29.540
it to somehow be different,
but I can tell you

386
00:20:29.540 --> 00:20:31.970
that it's, it's not it's
we have a list of

387
00:20:31.970 --> 00:20:33.980
features. We have a backlog.
If you'd like that, we

388
00:20:33.980 --> 00:20:37.190
sort of keep adding to
it. As time goes over.

389
00:20:37.190 --> 00:20:40.010
We, we, we collect customer
feedback. We talk to customers,

390
00:20:40.010 --> 00:20:43.760
we talk amongst ourselves, we
prototype internally. And then there

391
00:20:43.760 --> 00:20:45.740
comes a point when we
need to start locking down

392
00:20:45.740 --> 00:20:49.000
features for whatever the release
or the next version of

393
00:20:49.000 --> 00:20:51.040
what it is that we're
building is. And we go

394
00:20:51.040 --> 00:20:54.520
through a process like any
other group of building software,

395
00:20:54.520 --> 00:20:57.010
would we, you know, we
do a cost analysis of

396
00:20:57.010 --> 00:20:59.950
how much it will cost
to build a specific feature.

397
00:20:59.950 --> 00:21:01.780
What is, what do we
think the benefit to customers

398
00:21:01.780 --> 00:21:03.820
is by doing that? How
does it fit in with

399
00:21:03.820 --> 00:21:07.300
the strategy that we're trying
to, to adhere to? And

400
00:21:07.990 --> 00:21:11.110
there's really nothing. I think
nothing magic that goes into

401
00:21:11.110 --> 00:21:12.820
that process. And in terms
of how we're going to

402
00:21:12.820 --> 00:21:14.530
make the decision this time,
it will be, we have

403
00:21:14.530 --> 00:21:17.410
a stack ranked list of
features that we would like

404
00:21:17.410 --> 00:21:19.600
to see in web forms.
We look at how many

405
00:21:19.600 --> 00:21:21.730
resources we have and how
much time we have, and

406
00:21:21.730 --> 00:21:24.490
then we draw a line
underneath where we can't do

407
00:21:24.490 --> 00:21:27.900
any more work anymore. All
right. So there's a number

408
00:21:27.900 --> 00:21:29.550
of things that are coming
in web forms. Then what

409
00:21:29.580 --> 00:21:32.010
else do we have that
is moving over from MPC?

410
00:21:32.010 --> 00:21:36.060
It seems like NVC is
revving quickly. It's being developed.

411
00:21:36.060 --> 00:21:38.430
We're already on version three.
And because it's out of

412
00:21:38.430 --> 00:21:40.680
band, that gives us the
ability to do that with

413
00:21:40.680 --> 00:21:43.530
web forms. We're moving a
little bit more slowly, at

414
00:21:43.530 --> 00:21:46.890
least in the short term,
are we bringing other features

415
00:21:46.890 --> 00:21:50.730
over from MVC and incorporating
them into, into web forms

416
00:21:50.730 --> 00:21:54.570
in the next version? So
one of the things that

417
00:21:54.570 --> 00:21:58.440
webform, sorry, MVC introduced in
version three was the concept

418
00:21:58.440 --> 00:22:02.610
of unobtrusive, Java script, both
in the forms of validation

419
00:22:02.640 --> 00:22:05.220
and Ajax. And so for
the next version of web

420
00:22:05.250 --> 00:22:07.890
forms, we're looking at bringing
across at least the validator

421
00:22:07.890 --> 00:22:12.870
portion of that. Today, there
are server side controls called

422
00:22:12.870 --> 00:22:15.240
validators in web forms that
you can use to drop

423
00:22:15.240 --> 00:22:19.560
on your page. That gives
you pre-canned validation facilities. Then

424
00:22:19.590 --> 00:22:21.600
they, you tie them to
the controls on the page,

425
00:22:21.630 --> 00:22:23.760
like a text box, and
you say this is required.

426
00:22:24.300 --> 00:22:26.970
But if you actually look
at what gets admitted into

427
00:22:26.970 --> 00:22:30.600
the HTML markup, in order
to facilitate the client side

428
00:22:30.600 --> 00:22:34.140
validation, there was a whole
lot of JavaScript that gets

429
00:22:34.140 --> 00:22:37.110
you a bigger raise of,
of stuff that gets spewed

430
00:22:37.110 --> 00:22:40.380
out into your HTML page
when you use those things.

431
00:22:41.070 --> 00:22:43.560
So we're looking at cleaning
that up by using the

432
00:22:43.560 --> 00:22:47.010
same mechanism that MVC does
today, whereby we rely on

433
00:22:47.010 --> 00:22:51.030
jQuery validate to provide the
client side validation sort of

434
00:22:51.030 --> 00:22:54.570
base framework. And then we
use the HTML five data

435
00:22:54.570 --> 00:23:00.330
dash attributes to inject the
metadata required to drive those

436
00:23:00.330 --> 00:23:03.720
valid, that validation framework into
the page directly onto the

437
00:23:03.720 --> 00:23:06.390
controls that you want to
validate. Now, when I say

438
00:23:06.390 --> 00:23:09.780
HTML five, I'll say immediately
for people who have, who

439
00:23:09.780 --> 00:23:12.510
were thinking, well, shouldn't have
five in web forms. What

440
00:23:12.510 --> 00:23:15.300
does that mean for backwards
compatibility? People have to remember

441
00:23:15.300 --> 00:23:19.020
that HTML five isn't isn't
just about adding new stuff

442
00:23:19.020 --> 00:23:23.130
to HTML. It's also about
rationalization of things that were

443
00:23:23.130 --> 00:23:26.550
already supported by lots of
browsers and just making them

444
00:23:26.550 --> 00:23:28.380
part of the standard. And
one of those things with

445
00:23:28.380 --> 00:23:32.280
something called expando attributes or
expando properties, or many, I

446
00:23:32.280 --> 00:23:34.740
think many web developers have
discovered that they can just

447
00:23:34.740 --> 00:23:39.120
add extra properties to the
HTML elements. And while the

448
00:23:39.120 --> 00:23:41.490
browser may not understand them
and they don't won't get

449
00:23:41.490 --> 00:23:46.610
validated by any HTML validator
there, you can happily access

450
00:23:46.610 --> 00:23:49.910
those values from the Java,
from JavaScript using the Dom.

451
00:23:50.540 --> 00:23:53.750
Once that HTML is serialized
or pallets, I should say.

452
00:23:53.810 --> 00:23:58.190
So the data dash spec
inside HTML five is just

453
00:23:58.190 --> 00:24:00.320
a formalization of that. So
it just says, well, any

454
00:24:00.320 --> 00:24:04.130
attribute on any element in
an HTML five document that

455
00:24:04.130 --> 00:24:07.640
begins with data dash and
then something else is totally

456
00:24:07.640 --> 00:24:10.220
valid, just, just, that's an
attribute that you can put

457
00:24:10.220 --> 00:24:12.440
anywhere. And the, the intent
for you is to put

458
00:24:12.440 --> 00:24:14.210
any values in there that
you want to be able

459
00:24:14.210 --> 00:24:18.710
to essentially harvest using JavaScript
once the page is loaded.

460
00:24:18.710 --> 00:24:21.140
So people don't need to
be worried about that, not

461
00:24:21.140 --> 00:24:24.860
working in, in older browsers
that will work just fine.

462
00:24:24.860 --> 00:24:26.570
And we're looking to take
advantage of that to sort

463
00:24:26.570 --> 00:24:28.580
of clean up some of
the JavaScript that we output

464
00:24:28.970 --> 00:24:31.310
in terms of validation in
the next, in the next

465
00:24:31.310 --> 00:24:35.800
version Web forms. Is there
something fundamental about web forms

466
00:24:35.890 --> 00:24:38.530
that, that makes people think
it makes bad markup or

467
00:24:38.530 --> 00:24:42.970
bad JavaScript, or is it
certain controls, output, different things?

468
00:24:43.090 --> 00:24:44.110
You don't see what I'm
saying? Like, is there a

469
00:24:44.110 --> 00:24:47.800
control I should avoid? Or
how could I make, can

470
00:24:47.800 --> 00:24:50.710
I make a web forms
application where I can say

471
00:24:51.370 --> 00:24:54.880
view source and have it
be Well, you can definitely

472
00:24:54.880 --> 00:24:57.190
do that. I mean, and
this is some of the

473
00:24:57.190 --> 00:24:58.600
talks that taste them and
I have given them the

474
00:24:58.600 --> 00:25:01.540
past. They've been very much
about this point. Now there

475
00:25:01.540 --> 00:25:03.940
were in the past some
controls that we would recommend

476
00:25:03.940 --> 00:25:07.090
you completely avoid because they
just didn't give you the

477
00:25:07.090 --> 00:25:10.450
control that you needed to
stop it out. Putting things

478
00:25:10.450 --> 00:25:13.690
like wrapping it in a
table tag. Now back when

479
00:25:13.690 --> 00:25:16.360
these controls were originally developed,
and we think back, this

480
00:25:16.360 --> 00:25:19.480
is talking six, seven years
ago. Now that wasn't really

481
00:25:19.480 --> 00:25:22.570
frowned upon using tables for
layout in HTML was sort

482
00:25:22.570 --> 00:25:25.720
of the flavor of the
day, but we know better

483
00:25:25.810 --> 00:25:30.010
than doing that now. So
as we mentioned before and.net

484
00:25:30.010 --> 00:25:33.250
for almost all of that
was cleaned up. If you

485
00:25:33.250 --> 00:25:37.570
use the.net for control rendering
mode, you, you will find

486
00:25:37.610 --> 00:25:39.490
you find it very difficult
to find a table in

487
00:25:39.490 --> 00:25:42.820
your Mark out in your
markup that was generated by

488
00:25:42.820 --> 00:25:47.980
asp.net, unless it's for tabula
data, say the app would

489
00:25:47.980 --> 00:25:50.200
have a grid view. So
it's actually a lot easier

490
00:25:50.200 --> 00:25:52.090
than it was back then.
And then especially now you

491
00:25:52.090 --> 00:25:55.090
can control your view state
much more granually as well

492
00:25:55.090 --> 00:25:57.430
and control your client ID.
It's actually much simpler to

493
00:25:57.430 --> 00:26:01.000
get cleaner markup. Now, before
that, we use some third

494
00:26:01.000 --> 00:26:05.050
party or out of band
libraries, I guess, to, to

495
00:26:05.050 --> 00:26:09.490
help doing this. There was
something called the, the CSS

496
00:26:09.490 --> 00:26:13.480
friendly control adapters asp.net is
built on this foundation of

497
00:26:13.480 --> 00:26:17.320
an, of a, of an
adaptable control rendering system. So

498
00:26:18.070 --> 00:26:21.310
even if your button control
doesn't output, what you want

499
00:26:21.310 --> 00:26:24.340
it to output, there is
actually the mechanism for you

500
00:26:24.610 --> 00:26:27.250
to completely change what that
outputs. And there were a

501
00:26:27.250 --> 00:26:28.630
couple of ways you can
do that and you can

502
00:26:28.630 --> 00:26:31.930
subclass the button control and
then override his random method,

503
00:26:31.930 --> 00:26:35.260
which is kind of the
brute force approach. Or you

504
00:26:35.260 --> 00:26:39.730
can register a controller adapter,
which it's a little bit

505
00:26:39.730 --> 00:26:42.580
easier, perhaps not an awful
lot easier, but essentially maintains

506
00:26:42.590 --> 00:26:45.180
the behavior, the control, but
at the point where it

507
00:26:45.180 --> 00:26:47.670
gets rendered, it'll, it'll sort
of shell into your logic

508
00:26:47.970 --> 00:26:50.580
to, to, to go ahead
and render that control instead

509
00:26:50.580 --> 00:26:52.860
of using the default rendering.
But you, you really don't

510
00:26:52.860 --> 00:26:55.050
have to do that much
these days, if you're using.net

511
00:26:55.050 --> 00:26:57.240
for, because of just how
much better the markup is

512
00:26:57.630 --> 00:27:00.450
now that said, you don't
have to use the server

513
00:27:00.450 --> 00:27:03.030
controls. I mean, we talk
about web forms a lot,

514
00:27:03.060 --> 00:27:08.250
but there's nothing stopping you,
writing asp.net pages. So ASP

515
00:27:08.250 --> 00:27:11.360
X pages and using user
controls and master pages, and

516
00:27:11.400 --> 00:27:14.340
that whole sort of front
end mechanism there, but you

517
00:27:14.340 --> 00:27:15.960
don't have to use a
grid view if you don't

518
00:27:15.960 --> 00:27:19.730
want to. There's nothing wrong
with using a repeater or

519
00:27:19.800 --> 00:27:22.800
a list view that is
fully templatable and, and, and

520
00:27:22.800 --> 00:27:27.000
handwriting your markup to get
the output that you want.

521
00:27:27.000 --> 00:27:28.950
I mean, you still get
benefits in doing that. The

522
00:27:28.950 --> 00:27:32.520
list view, for example, has
a lot of behavior that

523
00:27:32.520 --> 00:27:36.000
is completely separate from the
way it is displayed. So

524
00:27:36.000 --> 00:27:40.350
the list view supports paging
and editing and inserting and

525
00:27:40.350 --> 00:27:43.530
different templates for all those
different modes. And you don't

526
00:27:43.530 --> 00:27:46.860
have to worry about controlling
what mode is currently in.

527
00:27:46.860 --> 00:27:49.800
It'll just do that using
the command mechanism inside asp.net

528
00:27:49.800 --> 00:27:51.960
web forms, but you still
get full control over the

529
00:27:51.960 --> 00:27:55.410
markup. So there is a
middle ground between, you know,

530
00:27:55.410 --> 00:28:00.300
just giving, giving the web
forms, pages and controls full

531
00:28:00.300 --> 00:28:04.050
control over what they, I
should say, just delegating to

532
00:28:04.050 --> 00:28:05.700
them to say, Hey, you
render all the markup. I

533
00:28:05.700 --> 00:28:07.740
don't really care about that.
Just give me the behavior.

534
00:28:07.950 --> 00:28:09.510
And then the other side
where you don't use any

535
00:28:09.510 --> 00:28:12.210
controls whatsoever. And you're just
back to basically writing classic

536
00:28:12.210 --> 00:28:16.110
ASP, but with ASP X
inline.net pages, there is a

537
00:28:16.110 --> 00:28:18.750
middle ground, I think, and,
you know, the framework web

538
00:28:18.750 --> 00:28:20.700
forms, MVP, or that taste
them. And I put together

539
00:28:20.700 --> 00:28:24.540
was really designed about hitting
that middle ground about, you

540
00:28:24.540 --> 00:28:26.280
know, there is some value
in using some of the

541
00:28:26.280 --> 00:28:28.540
buildings controls and web forms,
but if you want a

542
00:28:28.540 --> 00:28:31.620
little bit more control around
testability and around coding and

543
00:28:31.620 --> 00:28:35.830
patents, then this framework can
help you do that. Do

544
00:28:35.830 --> 00:28:39.380
you do by default, when
you upgrade from that done

545
00:28:39.410 --> 00:28:42.170
to done at three, five,
two done at four, do

546
00:28:42.170 --> 00:28:46.160
your asp.net pages automatically start
out putting better markup, or

547
00:28:46.160 --> 00:28:47.660
do you have to do
something to tell them that

548
00:28:48.140 --> 00:28:50.390
that's okay, You have to
do something. Unfortunately, that would

549
00:28:50.390 --> 00:28:52.340
be a breaking change. And
we try to, we try

550
00:28:52.340 --> 00:28:57.020
to avoid breaking changes when
they're associated with an upgrade

551
00:28:57.020 --> 00:29:00.290
process. So if you start
a new.net for a project,

552
00:29:00.440 --> 00:29:02.540
you will get the new
rendering. But if you upgrade

553
00:29:03.050 --> 00:29:05.390
you, won't now to change
that you need to change

554
00:29:05.390 --> 00:29:09.260
the setting in your web.com
fig file. And you will

555
00:29:09.320 --> 00:29:12.650
in doing so. You will
probably find that there will

556
00:29:12.650 --> 00:29:16.010
be things that break, because
most generally what happens is

557
00:29:16.010 --> 00:29:20.360
people take a dependency at
some point in the development

558
00:29:20.360 --> 00:29:22.730
of an application of a
web forms application on the

559
00:29:22.730 --> 00:29:25.880
markup that's being admitted. They
might write some custom JavaScript

560
00:29:25.880 --> 00:29:28.610
to do something on the
client and, or they might

561
00:29:28.610 --> 00:29:31.790
have some CSS that's targeting
the markup that used to

562
00:29:31.790 --> 00:29:33.800
be outputted by web forms.
And now when they change

563
00:29:33.800 --> 00:29:35.690
the rendering mode, they're going
to have to go and

564
00:29:35.690 --> 00:29:40.670
change that stuff as well.
Okay. Okay. So what, what

565
00:29:40.670 --> 00:29:42.160
kind of am I going
to run into though? Like,

566
00:29:42.160 --> 00:29:43.810
is there a, is there
a limit to what I

567
00:29:43.810 --> 00:29:46.810
can do in web forms?
As far as making few

568
00:29:46.810 --> 00:29:50.260
sores pretty, could, could someone
create a web forms application

569
00:29:50.770 --> 00:29:52.570
that you wouldn't be able
to tell it was web

570
00:29:52.570 --> 00:29:54.670
forums? I mean, you've got
routing also, right? You can

571
00:29:54.670 --> 00:29:58.350
make pretty URLs and web
forms. I mean, there are,

572
00:29:58.350 --> 00:30:01.800
there are a couple of
limitations. One is around the,

573
00:30:01.980 --> 00:30:06.450
the form tag now web
forms is, is geared around

574
00:30:06.450 --> 00:30:09.930
the concept of a server
form. And you'll see that

575
00:30:09.930 --> 00:30:12.690
in the markup of any
web forms page, you'll have

576
00:30:12.690 --> 00:30:15.570
a form run out equal
server tag. You could only

577
00:30:15.570 --> 00:30:19.410
have one of those per
page and it's, it's not

578
00:30:19.410 --> 00:30:22.530
per control. It's not permit,
it's actually per output page.

579
00:30:22.530 --> 00:30:25.320
You can only have one
of those now that does

580
00:30:25.320 --> 00:30:29.160
limit what you can do
in terms of building a

581
00:30:29.190 --> 00:30:33.690
multi-form pages. And certainly MVC
doesn't have this limitation at

582
00:30:33.690 --> 00:30:35.970
all, because it really has
no concept of a service

583
00:30:35.970 --> 00:30:40.620
side form. It just looks
at the raw request information

584
00:30:40.620 --> 00:30:43.650
coming in. Now that doesn't
mean you can't use multiple

585
00:30:43.650 --> 00:30:45.870
forms in web forms, but
you just, you can't have

586
00:30:45.870 --> 00:30:49.440
more than one service side
form. So then the following

587
00:30:49.440 --> 00:30:51.840
question from that to go,
okay, well, what's the limitations

588
00:30:51.840 --> 00:30:53.850
of not having a service
side form. If I have

589
00:30:53.850 --> 00:30:56.850
a service side form and
then a client side form,

590
00:30:57.090 --> 00:30:59.370
what can I not put
in the client side form?

591
00:30:59.730 --> 00:31:05.550
Now, there are certain asp.net
server controls that require being

592
00:31:05.550 --> 00:31:08.340
inside a server form to
work properly. And they'll actually

593
00:31:08.340 --> 00:31:10.380
throw an exception if you
put them outside of a

594
00:31:10.380 --> 00:31:14.790
server form. But I would,
I would certainly recommend people

595
00:31:14.790 --> 00:31:18.810
if they building UIs that
have multiple web based UIs

596
00:31:18.810 --> 00:31:21.390
with both forms that have
multiple points on the page

597
00:31:21.570 --> 00:31:25.560
that require input, then you
would certainly it's worth looking

598
00:31:25.560 --> 00:31:29.880
at using multiple forms. If
those other portions of UI

599
00:31:29.910 --> 00:31:35.040
don't require the complex server
controls, you know, to surrender

600
00:31:35.040 --> 00:31:36.900
those. And at a classic
example is if you have

601
00:31:36.900 --> 00:31:39.810
a search box at the
top of your, in the,

602
00:31:39.810 --> 00:31:42.480
in the header of your
website, there's really no point

603
00:31:42.480 --> 00:31:46.740
having that search box inside
the server form for asp.net

604
00:31:46.740 --> 00:31:49.200
web forms. And you actually
have to work around that

605
00:31:49.200 --> 00:31:53.310
sometimes because if you have
one form in your HTML,

606
00:31:53.490 --> 00:31:56.730
then the, the action of
the enter key in the

607
00:31:56.730 --> 00:32:01.290
HTML becomes an issue because
an HTML form T generally

608
00:32:01.320 --> 00:32:04.380
expects to have a single
submit button. And when you

609
00:32:04.380 --> 00:32:08.790
hit enter inside any field
in that form, that's the

610
00:32:08.790 --> 00:32:11.850
button that gets submitted. Now,
when you look@asp.net web forms,

611
00:32:12.270 --> 00:32:13.920
it was kind of designed
to have a single web

612
00:32:13.920 --> 00:32:15.780
server form. And then you
could put as many buttons

613
00:32:15.780 --> 00:32:18.270
on there as you liked,
and then it would use

614
00:32:18.270 --> 00:32:20.730
the, the, it would actually
figure out which button you

615
00:32:20.730 --> 00:32:23.700
clicked based on a number
of different factors that can,

616
00:32:24.030 --> 00:32:26.220
it couldn't do, but that
was all very much based

617
00:32:26.220 --> 00:32:27.720
on clicking. If you just
want to be able to

618
00:32:27.720 --> 00:32:30.360
type in something and hit
enter, you have to set

619
00:32:30.360 --> 00:32:32.850
extra properties in web forms
to sort of say, Hey,

620
00:32:32.850 --> 00:32:35.070
this is the button that
I want to be in

621
00:32:35.070 --> 00:32:38.100
a verdict climates clicked, or
habits click event raised when

622
00:32:38.100 --> 00:32:40.490
the user hits enter while
I'm in this text box

623
00:32:40.700 --> 00:32:44.210
and it uses JavaScript to
do that. So that's really

624
00:32:44.210 --> 00:32:45.950
not the most elegant way
of doing that. If you're

625
00:32:45.950 --> 00:32:47.360
just putting a search box
at the top of your

626
00:32:47.360 --> 00:32:49.580
page, put it in a
different form, put it in

627
00:32:49.580 --> 00:32:51.410
the client side form. It's
just a text box in

628
00:32:51.410 --> 00:32:53.630
a submit button. And then
you don't have to worry

629
00:32:53.630 --> 00:32:55.610
about that when the user
is in that text box

630
00:32:55.610 --> 00:32:58.310
and they type in the
hit enter, it's automatically going

631
00:32:58.310 --> 00:33:00.980
to use that, that button,
that client's eye button there,

632
00:33:00.980 --> 00:33:03.280
because it's in the same
form. Yeah, yeah. I've actually,

633
00:33:03.280 --> 00:33:05.590
I've actually done that myself
on my own site. Cause

634
00:33:06.010 --> 00:33:08.290
dusk blog, the blogging engine
that I run has a

635
00:33:08.290 --> 00:33:11.440
single service side form, of
course. And then I've got

636
00:33:11.440 --> 00:33:13.540
some search boxes around the
outside and I do some,

637
00:33:13.810 --> 00:33:15.550
I'm just, you know, one
or two lines of JavaScript

638
00:33:15.640 --> 00:33:18.610
to pull that information out
of those form fields and

639
00:33:18.610 --> 00:33:22.540
then put them through the,
the process regularly. Well, it

640
00:33:22.540 --> 00:33:24.820
sounds like you guys are
thinking a lot about web

641
00:33:24.820 --> 00:33:28.510
forms. I'm kind of surprised.
You're thinking about pretty, pretty

642
00:33:28.510 --> 00:33:32.020
deeply are we going to
see some web forms, cool

643
00:33:32.020 --> 00:33:33.880
stuff in the next couple
of months or the next

644
00:33:33.880 --> 00:33:37.000
year? Yeah, I certainly hope
so. I mean, as I

645
00:33:37.000 --> 00:33:38.920
said, we've mentioned a few
things that we're working on

646
00:33:38.920 --> 00:33:42.100
for the next version, but
I think there are other

647
00:33:42.100 --> 00:33:44.890
things that we're working on
that we hope to get

648
00:33:44.890 --> 00:33:48.710
out before then. So certainly
some things around our, our

649
00:33:48.730 --> 00:33:52.690
move to jQuery as our
preferred Ajax model expect to

650
00:33:52.690 --> 00:33:56.320
see some more information about
that in the coming months

651
00:33:56.980 --> 00:33:59.620
and not just information, but
hopefully some more concrete things

652
00:33:59.620 --> 00:34:02.380
that you can actually use
inside web forms, as well

653
00:34:02.380 --> 00:34:06.430
as MVC, of course, to
do with Ajax and jQuery

654
00:34:06.430 --> 00:34:09.040
and things like that. We're
obviously keeping a close eye

655
00:34:09.040 --> 00:34:12.370
on HTML five as well.
We, we get this question

656
00:34:12.370 --> 00:34:14.050
a lot about, you know,
when is web phone's going

657
00:34:14.050 --> 00:34:17.230
to be upgraded restroom or
five. The, the truth is

658
00:34:17.230 --> 00:34:19.900
there's really nothing stopping. You're
using HTML five today. I

659
00:34:19.900 --> 00:34:22.240
mean, HTML five is a
kind of a horrible term

660
00:34:22.240 --> 00:34:24.850
because it encompasses so many
different things. And we really

661
00:34:24.850 --> 00:34:26.650
don't know what customers mean
all of the time when

662
00:34:26.650 --> 00:34:29.890
they ask that. But in
terms of concrete things, you

663
00:34:29.890 --> 00:34:31.870
know, certainly the next version
of the templates that we

664
00:34:31.870 --> 00:34:34.720
build will use, you know,
some HTML five as much

665
00:34:34.720 --> 00:34:38.230
as we can. That makes
sense. And we'll, you know,

666
00:34:38.230 --> 00:34:40.390
we're always looking at what
the browsers are, where the

667
00:34:40.390 --> 00:34:43.690
current browsers caught up to
and what makes sense to,

668
00:34:43.690 --> 00:34:46.480
to add as functionality and
the base framework to take

669
00:34:46.480 --> 00:34:50.200
advantage of whatever new capabilities
that the browsers have. I

670
00:34:50.200 --> 00:34:54.430
think coming up, you'll probably
see some talks there about

671
00:34:54.430 --> 00:34:58.090
web forms and HTML five
working together, and maybe some

672
00:34:58.090 --> 00:35:00.520
talks about more about what
we're going to, we're planning

673
00:35:00.520 --> 00:35:02.020
to do with the next
version of web forms as

674
00:35:02.020 --> 00:35:06.070
well. So I think, I
think you'll see us talking

675
00:35:06.070 --> 00:35:08.110
more about it, like we
are today. And if you

676
00:35:08.110 --> 00:35:10.210
come along to our conferences,
you'll, you'll see us continue

677
00:35:10.210 --> 00:35:12.880
to talk about it as
well. Very cool. Well, thanks

678
00:35:12.880 --> 00:35:14.950
a lot for taking the
time to educate me on

679
00:35:15.190 --> 00:35:18.430
what's going on in web
forums. I appreciate it. Thanks

680
00:35:18.430 --> 00:35:21.820
for having me. This has
been another episode of Hansel

681
00:35:21.820 --> 00:35:23.710
minutes. We'll see you again
next week.

