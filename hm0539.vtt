WEBVTT FILE

1
00:00:00.540 --> 00:00:03.690
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.690 --> 00:00:06.660
they make the show possible.
Today's show is sponsored by

3
00:00:06.660 --> 00:00:10.860
developer express, become a UI
superhero with dev express controls

4
00:00:10.860 --> 00:00:15.390
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.750 --> 00:00:19.830
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.860 --> 00:00:23.940
touch enabled solutions for tomorrow,
you can download your free

7
00:00:24.060 --> 00:00:48.320
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com
From Hansel minutes.com it's Hansel

8
00:00:48.320 --> 00:00:53.090
minutes, all weekly discussion with
web developer and technologist Scott

9
00:00:53.090 --> 00:00:58.790
Hanselman. This is Lawrence Ryan announcing
show number 539. In this

10
00:00:58.790 --> 00:01:03.710
episode, Scott talks with Andrea
From Corgibytes about working with

11
00:01:03.710 --> 00:01:09.290
legacy code. Hi, this is
Scott Hanselman. This is another

12
00:01:09.290 --> 00:01:12.290
episode of Hansel minutes. I'm
here at dotnet fringe in

13
00:01:12.290 --> 00:01:14.930
Portland, Oregon, and we're at
the crystal ballroom. So if

14
00:01:14.930 --> 00:01:17.660
you hear the background noise,
because there's a conference happening

15
00:01:17.660 --> 00:01:21.500
around us, and I'm now
here with Andrea Goulay from

16
00:01:21.500 --> 00:01:25.640
Corgibytes software who just got
off stage doing her fantastic

17
00:01:25.640 --> 00:01:29.090
opening keynote. And you specialize,
if I understand correctly in

18
00:01:29.090 --> 00:01:32.420
the legacy code, that's part
of your consultancy. Yes. So

19
00:01:32.420 --> 00:01:35.870
Corgibytes corgi like the dog
and our tagline is old

20
00:01:35.870 --> 00:01:41.060
code new tricks. Nice, nice.
So legacy code, old code.

21
00:01:41.480 --> 00:01:44.000
What is, what is the
definition of legacy code? Like

22
00:01:44.000 --> 00:01:46.010
how old is it and
when does it become legacy?

23
00:01:46.400 --> 00:01:47.990
Yeah. So the way that
we kind of think about

24
00:01:47.990 --> 00:01:50.180
it is the legacy code
is code that's difficult to

25
00:01:50.180 --> 00:01:56.660
work with. And Michael feathers
has a really kind of

26
00:01:56.660 --> 00:02:00.590
accepted definition of legacy code
in that it is code

27
00:02:00.590 --> 00:02:03.680
without tests and the way
that we've been kind of

28
00:02:03.680 --> 00:02:07.580
exploring this over the past
several years, because whenever I've

29
00:02:08.300 --> 00:02:10.940
talked to people about that
definition, it tends to be

30
00:02:10.940 --> 00:02:14.210
kind of divisive because some
people are saying, well, how

31
00:02:14.210 --> 00:02:15.980
much test coverage do you
need? Should you get a

32
00:02:15.980 --> 00:02:18.890
hundred percent? And the way
that I started thinking about

33
00:02:18.890 --> 00:02:22.910
it was a test is
really just an artifact of

34
00:02:22.940 --> 00:02:26.450
your intention or your idea.
And so there are other

35
00:02:26.450 --> 00:02:31.100
artifacts, there are commit messages.
There are the way you

36
00:02:31.100 --> 00:02:35.450
name your variables. There are
error messages. There are so

37
00:02:35.450 --> 00:02:38.120
many different types of things
that are in the code

38
00:02:38.540 --> 00:02:42.740
that are English and are
not the programming language that

39
00:02:42.740 --> 00:02:47.900
you're working in. And so
legacy code is code that

40
00:02:47.930 --> 00:02:52.400
doesn't have communication artifacts so
that you can go back

41
00:02:52.460 --> 00:02:56.150
and either revisit what your
rationale was. Or if you're

42
00:02:56.150 --> 00:03:00.430
picking up a new project
that was inherited, that you

43
00:03:00.430 --> 00:03:03.700
can learn what the intention
was. It's almost like archeology

44
00:03:03.700 --> 00:03:05.610
in a way. That's funny.
I love that. You said

45
00:03:05.610 --> 00:03:07.740
that because I was literally
going to say, isn't this

46
00:03:07.740 --> 00:03:12.270
a kind of archeology you're
you're describing the, the picking

47
00:03:12.270 --> 00:03:17.400
up after this civilization, that
that is trying to express

48
00:03:17.400 --> 00:03:21.090
its intent, but you know,
all of the, all of

49
00:03:21.090 --> 00:03:23.130
the stone tablets cracked, and
now we just have the

50
00:03:23.130 --> 00:03:27.540
pieces. Yes. And the reason
that legacy code is relevant

51
00:03:28.110 --> 00:03:32.820
is because there are so
many business applications that are

52
00:03:32.820 --> 00:03:40.200
generating revenue and the monetary
let's just scrap it all.

53
00:03:40.500 --> 00:03:44.130
Let's just bulldoze this app
and start from scratch. Doesn't

54
00:03:44.130 --> 00:03:49.530
make monetary sense B and
so similar to how the

55
00:03:49.530 --> 00:03:54.840
human body reinvents itself every
seven years, just through continuous

56
00:03:54.840 --> 00:03:57.810
improvement, like the cells that
are in your body today

57
00:03:57.810 --> 00:04:00.210
are not the same, that
were seven years ago. You

58
00:04:00.210 --> 00:04:04.260
can use continuous improvement, continuous
delivery, continuous integration. We use

59
00:04:04.260 --> 00:04:09.000
continuous estimating even right, where
it's just regular ongoing conversations,

60
00:04:09.000 --> 00:04:13.290
regular ongoing improvement. And you
can transform an application that

61
00:04:13.290 --> 00:04:16.890
way, But you're describing things,
concepts that, that at least

62
00:04:17.010 --> 00:04:20.760
in my world of software
didn't exist 20 years ago.

63
00:04:20.910 --> 00:04:23.670
Like I was, we were
just thinking about unit testing

64
00:04:23.670 --> 00:04:26.970
at that time, and you're
describing continuous this and continuous

65
00:04:26.970 --> 00:04:29.850
that we didn't have a
lot of continuous stuff. Yeah.

66
00:04:29.850 --> 00:04:32.580
And I think, you know,
the, the idea with pretty

67
00:04:32.580 --> 00:04:35.310
much all of that is
to shorten the feedback loops.

68
00:04:35.970 --> 00:04:40.110
And so that's why communication
becomes so important when you're

69
00:04:40.110 --> 00:04:43.650
talking about legacy code. Because
part of the reason why

70
00:04:43.650 --> 00:04:47.280
legacy code is notoriously difficult
to work with is because

71
00:04:47.280 --> 00:04:51.180
the feedback loops are really,
really long. So if you

72
00:04:51.180 --> 00:04:55.110
have to go hunt down
some documentation from a developer

73
00:04:55.110 --> 00:04:57.570
who doesn't work there anymore,
right? That's a lot of

74
00:04:57.570 --> 00:04:59.430
kind of steps that you
have to go through or

75
00:04:59.440 --> 00:05:03.780
for, you have to reverse
engineer something traditionally that's, it's

76
00:05:03.780 --> 00:05:07.680
not quick and easy. The
documentation isn't readily available. But

77
00:05:07.710 --> 00:05:11.670
I found the reason that
my, that we got started

78
00:05:11.670 --> 00:05:15.840
in this was because my
business partner happened to really

79
00:05:15.840 --> 00:05:18.600
like these types of projects.
Is that, is he the

80
00:05:18.600 --> 00:05:21.210
only person that thinks that's
a good thing? You know,

81
00:05:21.630 --> 00:05:24.390
when we first started, because
we had been in business

82
00:05:24.390 --> 00:05:28.290
for about six years and
we had kind of, we're

83
00:05:28.290 --> 00:05:33.930
a general all-purpose software development
shop. And one day we

84
00:05:33.930 --> 00:05:38.790
were watching this old house,
Oh, the remodeling remodeling show.

85
00:05:39.360 --> 00:05:42.870
And we both kind of
had this epiphany, like, that's

86
00:05:42.870 --> 00:05:48.630
what we do with software.
We take applications that need

87
00:05:48.630 --> 00:05:52.860
to still have a good
integration, good bones, you know,

88
00:05:53.250 --> 00:05:54.840
and you can still work
with them, but you know,

89
00:05:54.840 --> 00:05:57.680
maybe they need an updated
kitchen, you know, so started

90
00:05:57.680 --> 00:06:01.490
looking at, you know, things
like, you know, you can

91
00:06:01.490 --> 00:06:05.660
look at the way that
things are structured, you know,

92
00:06:05.990 --> 00:06:09.050
and kind of peeking behind
walls. So we did things

93
00:06:09.050 --> 00:06:13.760
like with one of our
clients, they were doing, they

94
00:06:13.760 --> 00:06:18.080
were looking for some performance
issues. And so we deleted

95
00:06:18.080 --> 00:06:22.450
a bunch of features. Hmm.
Refactoring via subtraction. Really. I

96
00:06:22.450 --> 00:06:24.700
think we won't talk about
delete. I sometimes call it

97
00:06:24.700 --> 00:06:29.110
KonMari, which is the art
of tidying up. And it's

98
00:06:29.110 --> 00:06:33.840
this idea of, you know,
software has entropy, right. So

99
00:06:33.930 --> 00:06:36.520
it's naturally moving to a
chaotic state. So you have

100
00:06:36.520 --> 00:06:40.750
to actively clean up, like
you would in your house.

101
00:06:40.790 --> 00:06:42.910
Right. And so like, if
you don't take the trash

102
00:06:42.910 --> 00:06:44.050
out of your house, you're
going to have a big

103
00:06:44.050 --> 00:06:45.970
mess. And if you don't
think, if you don't delete

104
00:06:45.970 --> 00:06:47.110
code every once in a
while, you're going to have

105
00:06:47.110 --> 00:06:49.450
a big mess as well.
But it's being able to

106
00:06:49.450 --> 00:06:52.720
know how to do that
safely, safely. That's really important.

107
00:06:52.840 --> 00:06:56.170
Yeah. So, so that's where
tests and automated testing and

108
00:06:56.170 --> 00:06:58.570
all the continuous integration comes
in hand. So are you

109
00:06:58.570 --> 00:07:01.630
saying that you, you believe
that one should add tests

110
00:07:01.630 --> 00:07:05.380
after the fact and wrap
tests around old code? Yeah.

111
00:07:05.380 --> 00:07:08.140
So that's, that's kinda what
we do is every time

112
00:07:08.140 --> 00:07:10.330
we touch something, so it's
kind of the, I think

113
00:07:10.720 --> 00:07:13.450
Bob Martin talks about how
it's the boy scout role,

114
00:07:13.720 --> 00:07:18.100
where, where every time you
touch something, make it better.

115
00:07:18.820 --> 00:07:21.640
So that's typically how we
do it sometimes. And it

116
00:07:21.640 --> 00:07:26.290
depends on the client context,
right? So some clients really

117
00:07:26.290 --> 00:07:29.680
want to get a massive
productivity boost from their team

118
00:07:30.130 --> 00:07:33.610
and they're not doing any
automated testing, so we'll take

119
00:07:33.640 --> 00:07:36.700
a sprint or two, and
we'll build them an automated

120
00:07:36.700 --> 00:07:39.550
framework on main testing framework.
And then they'll go in

121
00:07:39.550 --> 00:07:44.230
and populate the tests. And
we've seen clients who they've

122
00:07:44.230 --> 00:07:47.380
doubled their team's productivity by
just by doing that other

123
00:07:47.380 --> 00:07:49.480
clients where it's like, eh,
you know, it's not so

124
00:07:49.480 --> 00:07:52.540
much the team productivity I've
got developers, then it's like

125
00:07:52.540 --> 00:07:55.120
more of a, you know,
kind of slow and steady

126
00:07:55.270 --> 00:07:57.430
kind of right. Well, you're,
you're setting them up for

127
00:07:57.430 --> 00:07:59.860
success. You're building the framework
for them to be successful.

128
00:08:00.130 --> 00:08:03.280
I think that the remodeling
analogy works because as soon

129
00:08:03.280 --> 00:08:05.770
as you're saying this, that
you build out a framework,

130
00:08:05.860 --> 00:08:07.750
it reminds me of when
you're doing like a barn

131
00:08:07.750 --> 00:08:10.390
raising, I don't know anything
about a barn raising, but

132
00:08:10.390 --> 00:08:13.210
if somebody can help me
with the framework part, I

133
00:08:13.210 --> 00:08:15.760
can do the push really
hard on the wall part

134
00:08:16.750 --> 00:08:18.490
and get the, get the
thing to turn into an

135
00:08:18.490 --> 00:08:22.720
actual. Yeah. And we also
find that when you're trying

136
00:08:22.720 --> 00:08:25.690
to adhere to some of
these principles, there's a lot

137
00:08:25.690 --> 00:08:30.850
of inertia in trying to
kind of change your behavior.

138
00:08:31.300 --> 00:08:34.840
And so sometimes it does
help. Like I think sometimes

139
00:08:34.840 --> 00:08:39.130
about the organization shows where
they have the, you know,

140
00:08:39.160 --> 00:08:41.680
organizer who comes in and
just kind of like cleans

141
00:08:41.680 --> 00:08:44.200
your house and gets everything
set up. It's a much

142
00:08:44.230 --> 00:08:47.950
easier to maintain something. If
you have professional help to

143
00:08:47.950 --> 00:08:51.160
kind of come in and
do that. So in some

144
00:08:51.160 --> 00:08:55.180
ways we're helping and we're
working right alongside other times,

145
00:08:55.350 --> 00:08:57.660
get, you know, we're going
to build up tech debt

146
00:08:57.660 --> 00:08:59.400
and we know it. And
we're just, that's the way

147
00:08:59.400 --> 00:09:02.280
our developers are. Would you
come kind of clean up

148
00:09:02.280 --> 00:09:04.830
behind us? We're happy to
do that too. We've noticed

149
00:09:04.830 --> 00:09:11.940
that there's two different personality
types of software developers. So

150
00:09:12.480 --> 00:09:15.330
as we started going through
this, we started figuring out

151
00:09:15.330 --> 00:09:17.850
like, who are the people
who like working on this?

152
00:09:18.240 --> 00:09:21.570
And so Scott did a
tour where he was giving

153
00:09:21.570 --> 00:09:23.250
a talk on this and
he would always ask, you

154
00:09:23.250 --> 00:09:25.890
know, who in here really
likes working on legacy code

155
00:09:26.820 --> 00:09:28.950
and in a room of
200 people, he'd get maybe

156
00:09:28.950 --> 00:09:32.430
two hands. So not a
whole lot of people, but

157
00:09:32.430 --> 00:09:35.460
the people who do like
this type of work, really

158
00:09:35.460 --> 00:09:39.030
like it because you are
working on some of the

159
00:09:39.030 --> 00:09:44.220
most interesting engineering problems that
you can like, we've, we've

160
00:09:44.220 --> 00:09:50.490
done projects where there is
a home grown database. Like

161
00:09:50.490 --> 00:09:54.810
it was built completely from
scratch a modern application that

162
00:09:54.810 --> 00:09:57.030
just for some reason, decided
to build their own database,

163
00:09:57.060 --> 00:10:01.980
no documentation. And so we
went in and extracted everything

164
00:10:01.980 --> 00:10:06.330
from the binary files and
looking at your face right

165
00:10:06.330 --> 00:10:07.830
now. You're like, no, no,
no, no, no, no, no.

166
00:10:07.980 --> 00:10:10.790
That sounds like horrible. It
really sounds very painful. It

167
00:10:10.790 --> 00:10:12.740
sounds, it sounds like the
opposite of fun to me,

168
00:10:14.070 --> 00:10:17.360
my team and people who
identify as menders. I mean,

169
00:10:18.020 --> 00:10:20.240
it was like Christmas, what
are the two types? So

170
00:10:20.240 --> 00:10:23.780
there's makers, right? So makers
like doing, I mean, there's

171
00:10:23.780 --> 00:10:27.290
a whole culture around makers,
right? Make magazine, make maker

172
00:10:27.290 --> 00:10:31.520
fair, but there's not really
a culture around people who

173
00:10:31.520 --> 00:10:36.170
like to fix things. And
so we identified Scott as

174
00:10:36.680 --> 00:10:40.520
the type of person who's
like, I really like taking

175
00:10:40.520 --> 00:10:44.270
a project that has kind
of been abandoned and making

176
00:10:44.270 --> 00:10:46.460
it better. So he, I
find that there are a

177
00:10:46.460 --> 00:10:50.270
lot of people in the
open source world who fall

178
00:10:50.270 --> 00:10:54.710
into menders because they really
like contributing to something that

179
00:10:54.740 --> 00:10:59.480
maybe somebody else built. So
we decided, well, we'll go

180
00:10:59.480 --> 00:11:02.570
out this. We thought that
the, the hang up for

181
00:11:02.570 --> 00:11:06.440
us was going to be
talent. Cause we're like finding

182
00:11:06.440 --> 00:11:09.470
people, finding people who are
menders and we found that

183
00:11:09.470 --> 00:11:14.120
it's actually been the opposite
because menders, there is very

184
00:11:14.120 --> 00:11:18.560
little community around these people.
And so we have a

185
00:11:18.560 --> 00:11:21.770
whole slew of people who
have emailed us and said,

186
00:11:21.770 --> 00:11:23.660
yes, I want to come
work for you, which I

187
00:11:23.660 --> 00:11:25.100
did not think was going
to happen. I thought we

188
00:11:25.100 --> 00:11:26.900
were going to have a
slew of clients because there's

189
00:11:26.900 --> 00:11:30.110
so many, so many legacy
projects out there, but I

190
00:11:30.110 --> 00:11:34.010
actually have a backlog of
developers who I would love

191
00:11:34.010 --> 00:11:36.920
to hire. And so now
I'm out there looking for

192
00:11:36.920 --> 00:11:39.650
the projects that are the
right fit. And I think

193
00:11:39.830 --> 00:11:41.810
one of the reasons there
are developers really like us

194
00:11:41.810 --> 00:11:44.540
too, is that to make
a mender happy. And in

195
00:11:44.540 --> 00:11:50.150
engineers in general, you know,
it's, I'm solving interesting problems,

196
00:11:50.180 --> 00:11:54.910
right? Which that in and
of itself, recognizing that if

197
00:11:54.910 --> 00:11:58.270
you build your entire business
model around, I'm going to

198
00:11:58.270 --> 00:12:01.540
find interesting problems for my
engineers to work on. Like

199
00:12:02.080 --> 00:12:04.180
that will attract people. But
when I, when people ask

200
00:12:04.180 --> 00:12:05.500
me, they're like, how do
you get so many lead

201
00:12:05.500 --> 00:12:07.240
developers who are good at
this work? I'm like, well,

202
00:12:07.430 --> 00:12:11.050
I built my entire culture
around making our developers happy.

203
00:12:11.560 --> 00:12:15.700
You know, we give them
really good resources, fast computers,

204
00:12:16.660 --> 00:12:18.130
and then we get out
of their way. I give

205
00:12:18.130 --> 00:12:21.360
them a lot of autonomy,
but Working on interesting problems

206
00:12:21.360 --> 00:12:23.280
is, is one thing. And
I think it's, it's easy

207
00:12:23.280 --> 00:12:26.460
to say that, but there's
also the idea of moving

208
00:12:26.460 --> 00:12:29.160
forward. I feel like, am
I moving forward on the

209
00:12:29.160 --> 00:12:34.170
project? Am I making a
forward technical progress? Am I

210
00:12:34.170 --> 00:12:38.070
improving myself as a developer?
Yeah. Yeah. So, so one

211
00:12:38.070 --> 00:12:40.050
of the things we do
there is we have 10%

212
00:12:40.050 --> 00:12:43.020
time. So instead of, so
we have four hours a

213
00:12:43.020 --> 00:12:47.490
week of dedicated professional development
every week where, you know,

214
00:12:47.490 --> 00:12:51.390
it's, it's go research a
new language, it's go learn

215
00:12:51.390 --> 00:12:54.270
something. The other thing that
we do is when you're

216
00:12:54.270 --> 00:12:59.880
working in legacy code, you
know, it's usually several different

217
00:12:59.970 --> 00:13:02.850
languages that are all cobbled
together and in different ways.

218
00:13:02.850 --> 00:13:05.760
So, so we say any
language, any platform, any framework.

219
00:13:05.790 --> 00:13:09.720
So we don't, so it's
the opportunity to continue to

220
00:13:09.720 --> 00:13:14.130
learn in there. Are there
projects that can't be saved?

221
00:13:14.130 --> 00:13:15.690
Do you go? And you
say, Oh, this is VB

222
00:13:15.690 --> 00:13:19.290
three. We can't do that.
We have. Yeah. And typically,

223
00:13:19.740 --> 00:13:22.530
yeah, I mean, we, we
had a client who didn't

224
00:13:22.530 --> 00:13:26.280
have a lot of users.
They were still pre-revenue. They

225
00:13:26.280 --> 00:13:29.760
were very much a startup
and their CTO was using

226
00:13:29.790 --> 00:13:32.580
that net web forms. And
we're like, Hmm, Hang on.

227
00:13:32.580 --> 00:13:36.710
Now my web forums, I
work on that team. What,

228
00:13:36.730 --> 00:13:39.930
you know, how old, right?
Like it's funny, brand new.

229
00:13:39.930 --> 00:13:42.000
So no. So that's an
answer. That's very interesting that

230
00:13:42.000 --> 00:13:44.400
this is, this is where
the conversation will get controversial.

231
00:13:45.510 --> 00:13:48.240
Cause web forums is, is,
is, is actively developed. And

232
00:13:48.240 --> 00:13:51.360
I'm not saying this in
an, in defense, but was

233
00:13:51.360 --> 00:13:53.100
it about the tech or
was it about the way

234
00:13:53.100 --> 00:13:55.890
it was written? Because it
was the funny story about

235
00:13:55.890 --> 00:13:57.990
legacy code that I haven't,
I haven't talked to you

236
00:13:57.990 --> 00:14:02.940
about yet, but my blog
runs on web forms from

237
00:14:02.970 --> 00:14:07.290
2003 and people often ask,
well, why do you keep

238
00:14:07.290 --> 00:14:09.480
it like that? Why don't
you upgrade it? And I

239
00:14:09.480 --> 00:14:12.480
was like, well, it works
great. It works really fine.

240
00:14:12.480 --> 00:14:14.370
So what we did is
we put tests around it

241
00:14:15.120 --> 00:14:19.290
and I worked with a
gentleman on Twitter in Papa

242
00:14:19.300 --> 00:14:22.410
string, Mark Downey, who helps
me with, with DAS blog

243
00:14:22.590 --> 00:14:25.500
because we both love the
code base. And we don't

244
00:14:25.500 --> 00:14:28.350
see any reason to work
for a year to rewrite

245
00:14:28.350 --> 00:14:30.520
it and then just be
exactly where we already are.

246
00:14:30.900 --> 00:14:33.210
And that's a great point
because it all comes down

247
00:14:33.240 --> 00:14:37.770
to the business driver, right?
So for this particular client,

248
00:14:38.220 --> 00:14:41.940
they wanted to scale very,
very rapidly. And they were

249
00:14:41.940 --> 00:14:46.200
having a difficult time attracting
developers who could work in

250
00:14:46.200 --> 00:14:49.590
that they wanted to build
the API in a particular

251
00:14:49.590 --> 00:14:52.580
way. The peop the end
developers who were coming in

252
00:14:52.580 --> 00:14:55.940
were wanting to build more
restful things. And the CTO

253
00:14:56.420 --> 00:15:01.340
was just almost dogmatic in
this. I'm not going to

254
00:15:01.340 --> 00:15:03.350
let go of this technology.
This is the way I

255
00:15:03.350 --> 00:15:05.540
know how to build things.
And therefore, everybody else must

256
00:15:05.540 --> 00:15:10.010
conform to me. And the
CEO was getting frustrated because

257
00:15:10.010 --> 00:15:13.130
she just saw her team
wasn't working and she couldn't

258
00:15:13.130 --> 00:15:17.150
quite understand the technology behind
it. So we came in

259
00:15:17.150 --> 00:15:19.940
and, and, you know, just,
we do what we call

260
00:15:19.940 --> 00:15:24.500
a software inspection, a code
inspection. And so we just

261
00:15:24.500 --> 00:15:26.240
listed out and said, you
know, here are the different

262
00:15:26.240 --> 00:15:30.170
things based on your business
goals. You know, here are

263
00:15:30.350 --> 00:15:34.730
some frameworks that may be
more attuned to your particular

264
00:15:34.730 --> 00:15:38.080
needs. Not saying that, you
know, No, but you're describing

265
00:15:38.080 --> 00:15:40.990
exactly the right scenario where
this was someone with a,

266
00:15:41.390 --> 00:15:43.360
a, and some people don't
like this term, but I

267
00:15:43.360 --> 00:15:46.180
religious bent. They weren't, they
were, they were not just

268
00:15:46.180 --> 00:15:48.160
excited about our religion, but
they were like a zealot

269
00:15:48.670 --> 00:15:52.210
for this thing. And like
this round peg is going

270
00:15:52.210 --> 00:15:54.760
to fit in this square
hole, no matter what. And

271
00:15:54.760 --> 00:15:56.920
I can agree with you
that while web forms runs

272
00:15:56.920 --> 00:15:59.200
my blog and runs a
lot of great websites, if

273
00:15:59.200 --> 00:16:01.750
you're going to build a
giant restful application with angular

274
00:16:01.750 --> 00:16:03.670
JS, it's, you know, you're
going to bump into some

275
00:16:03.670 --> 00:16:07.030
real problems. And at some
point you gotta, Yeah. So

276
00:16:07.030 --> 00:16:11.710
for that particular client, we
ended up letting go of

277
00:16:11.710 --> 00:16:15.880
all the web forms, because
we said, you know, you

278
00:16:15.880 --> 00:16:19.210
don't have any users. There's
not a lot of value.

279
00:16:19.240 --> 00:16:20.950
There's not a lot of
business value in keeping them

280
00:16:20.950 --> 00:16:22.630
code base the way it
is. So we got in

281
00:16:22.720 --> 00:16:25.330
and they were able to
replace a lot of the

282
00:16:25.330 --> 00:16:27.970
infrastructure with what they needed.
You know, in a matter

283
00:16:27.970 --> 00:16:32.860
of a couple of months,
This episode of Hansel minutes

284
00:16:32.860 --> 00:16:36.010
is brought to you by
brain tree payments. Why make

285
00:16:36.010 --> 00:16:39.280
payment integration more difficult than
it has to be? Braintree's

286
00:16:39.280 --> 00:16:42.730
powerful, full stack payment platform
allows you to accept nearly

287
00:16:42.760 --> 00:16:46.120
any type of payment from
any device. With one integration,

288
00:16:46.630 --> 00:16:50.290
it's flexible to your system's
needs, supports most programming languages.

289
00:16:50.290 --> 00:16:53.770
So whether you're using Java,
Ruby, or Python, you'll always

290
00:16:53.770 --> 00:16:56.860
have a range of service
side and client side SDKs

291
00:16:56.860 --> 00:17:00.670
available. Braintree makes payments and
your job a whole lot

292
00:17:00.670 --> 00:17:09.340
easier. You can learn more@braintreepayments.com
slash Hanselman. So they keep

293
00:17:09.340 --> 00:17:11.500
the brain, they keep the
data access, they keep the

294
00:17:11.500 --> 00:17:14.650
parts that were not holding
them back. Yeah. And now

295
00:17:14.680 --> 00:17:17.830
they're achieving their business goals.
Now, other clients is going

296
00:17:17.830 --> 00:17:21.010
to be completely different, right?
If you have a million

297
00:17:21.010 --> 00:17:23.950
users, right. And we have
clients like this too, where

298
00:17:23.980 --> 00:17:26.380
it's like, it is not
an option, right. This is

299
00:17:26.380 --> 00:17:29.560
a block box and you
cannot change this, you know,

300
00:17:29.590 --> 00:17:32.290
then it's working within it.
So one of the core

301
00:17:32.290 --> 00:17:36.460
values that we have at
Corgibytes is always say craftsmanship

302
00:17:36.460 --> 00:17:40.180
in context. And so it's
the idea of when you're

303
00:17:40.180 --> 00:17:43.570
thinking about the technology choices
that you're making, you have

304
00:17:43.570 --> 00:17:47.620
to remember the business context
in which you are using

305
00:17:47.620 --> 00:17:50.520
them. So for you and
your right, there's not a

306
00:17:50.520 --> 00:17:53.040
lot of business value for
you upgrading, right. You've, you've,

307
00:17:53.070 --> 00:17:55.800
you've put in, you know,
things in place and that's

308
00:17:55.800 --> 00:17:58.680
the same way with a
house, right? Like if you're

309
00:17:58.680 --> 00:18:00.960
going to go and sell
your house, then yeah. There's

310
00:18:00.960 --> 00:18:02.400
gonna, you know, there's going
to be a lot of,

311
00:18:02.550 --> 00:18:05.550
kind of return on your
investment. You know, maybe you'll

312
00:18:05.550 --> 00:18:07.680
update the kitchen or paint
the walls. But if you're

313
00:18:07.680 --> 00:18:09.210
just like, you know what,
I don't really mind the

314
00:18:09.210 --> 00:18:11.930
walls and, you know, yeah.
It'd be nice. You know,

315
00:18:11.960 --> 00:18:13.400
that is a really great
way to look at it

316
00:18:13.400 --> 00:18:17.540
because I know exactly what's
wrong. The two things wrong

317
00:18:17.540 --> 00:18:20.360
with my blog are it
can only scale to a

318
00:18:20.360 --> 00:18:22.790
point. It just happens to
be a point I haven't

319
00:18:22.790 --> 00:18:27.290
reached yet. And I don't
like the URLs. Yeah. Yeah.

320
00:18:27.860 --> 00:18:29.660
And you're willing to live
with it. Do I have

321
00:18:29.660 --> 00:18:31.670
the nine months or whatever,
to go and rewrite the

322
00:18:31.670 --> 00:18:34.100
thing from scratch, there's all
sorts of great things. I

323
00:18:34.100 --> 00:18:36.140
like about it. You know,
it's got a creaky floor

324
00:18:36.140 --> 00:18:39.260
and I like the kitchen,
you know, it's a fixer

325
00:18:39.260 --> 00:18:41.210
upper, it's got character, but
I enjoy it very much

326
00:18:41.210 --> 00:18:42.830
and I'm not willing to
throw it out quite yet.

327
00:18:43.040 --> 00:18:45.170
So I like that. But
I think that your point

328
00:18:45.170 --> 00:18:48.380
is, is that having my
eyes wide open about the

329
00:18:48.380 --> 00:18:51.620
business requirements, the ones that
I'm willing to feel that

330
00:18:51.620 --> 00:18:54.800
are not being met well,
the aspects that are subpar,

331
00:18:55.220 --> 00:18:58.250
all of that is being
conscious about my, my, my

332
00:18:58.250 --> 00:19:01.100
legacy code base, as opposed
to being delusional about it.

333
00:19:01.160 --> 00:19:03.770
Yes. And so, you know,
I think of legacy code

334
00:19:03.770 --> 00:19:08.180
almost this way, right? So,
you know, 10, 15 years

335
00:19:08.180 --> 00:19:10.430
ago we had the agile
movement where we said, you

336
00:19:10.430 --> 00:19:14.000
know what? Change is inevitable.
Let's just learn how to

337
00:19:14.000 --> 00:19:18.380
embrace it and work with
it rather than like ignoring

338
00:19:18.380 --> 00:19:21.380
it and just pretending that
it doesn't exist. And I

339
00:19:21.380 --> 00:19:23.600
think that we can go
through a similar shift with

340
00:19:23.600 --> 00:19:27.860
legacy code. So let's just
acknowledge that code bases are

341
00:19:27.860 --> 00:19:30.920
going to stick around and
that the majority of us

342
00:19:31.070 --> 00:19:36.890
work on applications that are
not brand new. And once

343
00:19:36.890 --> 00:19:40.850
we just kind of mentally
acknowledge that and start looking

344
00:19:40.850 --> 00:19:44.900
at legacy code as something
that can be interesting, something

345
00:19:44.900 --> 00:19:46.460
that you can learn from
something that you can grow

346
00:19:46.460 --> 00:19:50.300
from. The other thing that's
interesting too, is that you

347
00:19:50.300 --> 00:19:54.650
don't have to use antiquated
tools to, you can use

348
00:19:54.650 --> 00:19:57.890
very modern tooling to work
on an older code base.

349
00:19:58.370 --> 00:20:01.370
So the analogy that I
use sometimes is if you

350
00:20:01.370 --> 00:20:05.600
bought a house that was
a hundred years old, you

351
00:20:05.600 --> 00:20:07.190
and you wanted to remodel
it and you wanted to

352
00:20:07.190 --> 00:20:10.610
update it, you wouldn't just
use hand drills. You would

353
00:20:10.610 --> 00:20:12.920
use, you would go out
to the hardware store and

354
00:20:12.920 --> 00:20:15.440
you would buy power drill.
So you can think about

355
00:20:15.440 --> 00:20:18.800
getting your new, shiny more
in the tooling, rather than

356
00:20:18.800 --> 00:20:22.370
in the, you know, kind
of Right. You could have

357
00:20:22.370 --> 00:20:25.160
a 15 year old web
application and they use, you

358
00:20:25.160 --> 00:20:28.850
know, the most modern selenium
WebDriver and load to drive

359
00:20:28.850 --> 00:20:33.770
the whole thing, or use
the latest dotnet testing techniques

360
00:20:33.830 --> 00:20:36.350
on an, on a 10
year old dotnet application. Yep,

361
00:20:36.920 --> 00:20:41.030
Absolutely. Yeah. So when you,
you know, we've been exploring

362
00:20:41.030 --> 00:20:42.890
this metaphor for a couple
of years and we've been

363
00:20:42.890 --> 00:20:45.470
waiting for it to break
down and it kind of

364
00:20:45.470 --> 00:20:48.220
hasn't yet it's it's of
these things that I think

365
00:20:48.250 --> 00:20:51.550
once you just start realizing
that, you know, there are

366
00:20:51.550 --> 00:20:54.160
people who like doing the
new construction, they like kind

367
00:20:54.160 --> 00:20:56.740
of just getting something up
to speed and then handing

368
00:20:56.740 --> 00:20:59.650
it off and recognizing that,
yeah, there are many of

369
00:20:59.650 --> 00:21:02.410
us who like inheriting and
project, and it is all

370
00:21:02.410 --> 00:21:05.680
about putting the right people
in the right places, right.

371
00:21:05.710 --> 00:21:08.500
Don't have the people who
enjoy doing the making and

372
00:21:08.500 --> 00:21:13.540
the, you know, don't have
them writing, fixing bugs, have

373
00:21:13.540 --> 00:21:16.810
them on new features and
exploratory things. And then have

374
00:21:16.810 --> 00:21:19.090
the people who are menders
like, those are the people

375
00:21:19.090 --> 00:21:22.920
that you want doing bug
fixes. Cause they, Right. One

376
00:21:22.920 --> 00:21:24.660
thing I wanted to ask
you about is that, you

377
00:21:24.660 --> 00:21:27.330
know, 15, 20 years ago,
even 20 plus years ago,

378
00:21:27.330 --> 00:21:30.000
I was doing, you know,
VB three and VB five

379
00:21:30.330 --> 00:21:33.930
things moved in a slower
pace. You would write code

380
00:21:33.930 --> 00:21:37.350
and BB for a year
or 18 months, and then

381
00:21:37.350 --> 00:21:39.330
maybe a minor version would
come out, but you didn't

382
00:21:39.330 --> 00:21:41.730
have a sense that the
world was shifting underneath you.

383
00:21:42.150 --> 00:21:46.710
But I literally, for example,
yesterday updated a node application

384
00:21:46.890 --> 00:21:50.460
to the latest something. And
one of the libraries, which

385
00:21:50.670 --> 00:21:54.450
I think was made like
Tuesday told me it was

386
00:21:54.450 --> 00:21:58.200
deprecated. And, and then you
go and look at another

387
00:21:58.200 --> 00:22:02.070
libraries, documentation that depends on
that deprecate ones. And it

388
00:22:02.070 --> 00:22:04.230
says, yeah, don't worry about
that. We know about that,

389
00:22:04.250 --> 00:22:07.830
that that message you can
ignore that things are getting

390
00:22:07.830 --> 00:22:11.730
deprecated, like hourly legacy code
literally could be what I

391
00:22:11.730 --> 00:22:15.000
wrote last week. Absolutely. I
love that. You say that.

392
00:22:16.560 --> 00:22:19.560
Yeah. And it, it, again,
it comes down to communication,

393
00:22:19.590 --> 00:22:24.390
right? So are you, are
you monitoring that, are you

394
00:22:24.390 --> 00:22:27.180
thinking about that? Are you
documenting your ideas and your

395
00:22:27.180 --> 00:22:31.500
rationale and so that when
things happen and when things

396
00:22:31.500 --> 00:22:34.290
break, you remember that, and
you can keep that mental

397
00:22:34.290 --> 00:22:37.380
model in your head, People
don't and I think you'll

398
00:22:37.380 --> 00:22:39.270
use it. I'll use note
as an example. And we'll

399
00:22:39.270 --> 00:22:41.880
say dotnet core because like
Dutton of core is brand

400
00:22:41.880 --> 00:22:45.390
new. Like it's a month
old. People are writing tomorrow's

401
00:22:45.390 --> 00:22:48.360
legacy code today. And I
don't think that they're thinking

402
00:22:48.360 --> 00:22:51.240
about things like versions, right?
Like I had a note

403
00:22:51.240 --> 00:22:54.570
application, like I was saying,
I upgraded it. I I'm

404
00:22:54.570 --> 00:22:57.300
a bad person, but I
upgraded it yesterday to the

405
00:22:57.300 --> 00:23:00.690
latest version of node, because
it was the latest version

406
00:23:00.690 --> 00:23:03.300
of node, you know what
I mean? And it worked,

407
00:23:03.870 --> 00:23:05.580
but I honestly feel like
that was quite a role

408
00:23:05.580 --> 00:23:07.350
of a dice right there,
but I didn't write it

409
00:23:07.350 --> 00:23:11.100
down, but I upgraded from
three point whatever, whatever to

410
00:23:11.100 --> 00:23:14.070
four point, whatever, whatever, I
don't really know what the

411
00:23:14.070 --> 00:23:18.510
library tree or the dependency
tree looks like. So that

412
00:23:18.570 --> 00:23:21.780
if you said 10 years
from now, get back here,

413
00:23:22.350 --> 00:23:26.370
who knows if NPM repository
is going to be around

414
00:23:26.370 --> 00:23:29.790
that those libraries will exist
anymore. I need to freeze

415
00:23:29.790 --> 00:23:33.060
dry that into Amber or
a VM or something so

416
00:23:33.060 --> 00:23:37.110
that I can rebuild this
thing. Yeah. Yeah. And so

417
00:23:37.110 --> 00:23:41.340
this is where it gets
into empathy, which I, when

418
00:23:41.340 --> 00:23:44.640
I was doing my strategic
plan around, we're going to

419
00:23:44.640 --> 00:23:48.980
work on code. We worked
with a strategic consultant and

420
00:23:48.980 --> 00:23:51.800
she told me, you can't
use the word empathy in

421
00:23:51.800 --> 00:23:55.360
tech. You'll never be taken
seriously. I am wondering where

422
00:23:55.360 --> 00:23:59.920
you're going with this. Well,
The idea of you have

423
00:23:59.920 --> 00:24:04.270
to take a perspective. You
have to first learn and

424
00:24:04.270 --> 00:24:07.210
understand what the needs are
of the people that you're

425
00:24:07.210 --> 00:24:09.850
working with. And that person
could be your future self.

426
00:24:10.990 --> 00:24:14.440
It could be yourself three
months from now, and you

427
00:24:14.440 --> 00:24:16.690
have to be able to
step in, you know, step

428
00:24:16.690 --> 00:24:21.040
into that person's shoes and
say, okay, what is their

429
00:24:21.040 --> 00:24:23.380
need? So it could be
your client. It could be

430
00:24:23.380 --> 00:24:27.430
your users, you know? And
No, that makes sense to

431
00:24:27.430 --> 00:24:32.320
me because Empathy is so,
so, so critical to building

432
00:24:32.320 --> 00:24:36.040
software Because you can use
that word and say, Oh,

433
00:24:36.040 --> 00:24:38.800
this is touchy, feely, and
heart. This hardware know hardware

434
00:24:38.800 --> 00:24:40.750
and software. That's not touchy,
feely. Just give me the

435
00:24:40.750 --> 00:24:43.270
version numbers I need to
use. But what you're saying

436
00:24:43.270 --> 00:24:48.610
is that I need to
transfer momentarily and imagine myself,

437
00:24:48.640 --> 00:24:52.150
six months down the road,
when I dig that code

438
00:24:52.150 --> 00:24:56.260
back up and I think
to myself, future self, how

439
00:24:56.260 --> 00:24:58.360
do I build this? Yeah.
What am I going to

440
00:24:58.360 --> 00:25:01.150
need in six months to
make it easier for me

441
00:25:01.150 --> 00:25:04.960
to context, switch and easier
for me to remember where

442
00:25:04.960 --> 00:25:08.050
I am. My favorite story
is, you know, almost, almost

443
00:25:08.050 --> 00:25:10.660
all of us have run,
get blame, like in a

444
00:25:10.810 --> 00:25:13.540
heat of fury being really
angry, like who would have

445
00:25:13.540 --> 00:25:15.100
done it this way. And
it ends up being yourself.

446
00:25:15.620 --> 00:25:18.550
I SPN blame before that.
And yeah, it's like when

447
00:25:18.550 --> 00:25:20.080
you go and you Google
for a problem and you

448
00:25:20.080 --> 00:25:22.450
find the one post where
you're asking for the problem

449
00:25:22.510 --> 00:25:24.580
and no one has ever
answered, you're all alone in

450
00:25:24.580 --> 00:25:27.820
the world. It was you.
Yeah. And to get back

451
00:25:27.820 --> 00:25:31.270
to your point about dependencies,
I think one of the

452
00:25:31.270 --> 00:25:37.480
things that is particularly challenging
with legacy code is that

453
00:25:37.480 --> 00:25:42.610
you cannot create a repeatable
process around it because if

454
00:25:42.610 --> 00:25:48.040
we look at dependencies and
if we look at mathematically

455
00:25:48.490 --> 00:25:55.270
chaos theory, the more dependencies
and the more interdependencies that

456
00:25:55.270 --> 00:25:58.840
you have in a system,
the less likely you are

457
00:25:58.840 --> 00:26:01.960
to be able to accurately
estimate. So this is part

458
00:26:01.960 --> 00:26:04.510
of where there's a lot
of controversy in like there's

459
00:26:04.510 --> 00:26:08.050
a no estimates hashtag on
Twitter. And so the idea

460
00:26:08.050 --> 00:26:12.070
is if you're working on
a Greenfield application, yeah, you,

461
00:26:12.160 --> 00:26:13.960
you know, you can do
a project. If you're doing

462
00:26:13.960 --> 00:26:15.880
UI. If you're doing a
lot of front end stuff,

463
00:26:16.210 --> 00:26:18.880
you know, that's more of
a complicated system where it's

464
00:26:18.880 --> 00:26:20.620
just a series of steps
and you can have a

465
00:26:20.620 --> 00:26:25.080
lot of confidence in it's
estimating. We don't estimate we,

466
00:26:25.150 --> 00:26:28.150
I call it continuous estimation.
So I work completely on

467
00:26:28.150 --> 00:26:32.650
retainer. We do short retainers
and we say, you stop

468
00:26:32.650 --> 00:26:35.830
paying us when you stop
getting value. Right. And that

469
00:26:35.830 --> 00:26:40.450
forces a budget discussion regularly.
And if people ask me

470
00:26:40.510 --> 00:26:43.620
about estimates, the way that
I go about that is

471
00:26:43.620 --> 00:26:47.160
we give a confidence value.
So we say, you know,

472
00:26:47.160 --> 00:26:49.290
I'm 30% confident I'll be
able to get this done

473
00:26:49.290 --> 00:26:51.890
in a week. Well, this
is, this is the progress,

474
00:26:51.890 --> 00:26:54.590
the universal progress bar problem.
What we really need is

475
00:26:54.590 --> 00:26:57.140
a progress bar with a
number over the top of

476
00:26:57.140 --> 00:26:59.810
it that tells us the
confidence level that the progress

477
00:26:59.810 --> 00:27:02.000
bar has in, you know,
cause we always joke about

478
00:27:02.000 --> 00:27:04.220
the progress bar getting in
99% and then just sitting

479
00:27:04.220 --> 00:27:06.230
there for a day or
two, because you know, you

480
00:27:06.230 --> 00:27:09.560
don't know, but you're supposed
to know the estimate, the

481
00:27:09.560 --> 00:27:11.960
closer you get to it,
you ask them, talk to

482
00:27:11.960 --> 00:27:14.270
the approach the ending of
the year. And so we

483
00:27:14.300 --> 00:27:16.730
that's, that's one of the
things I tell new clients,

484
00:27:16.730 --> 00:27:18.680
cause they're like, well, well
what would it take for

485
00:27:18.680 --> 00:27:21.890
you to get an accurate
estimate? I was like, I

486
00:27:21.890 --> 00:27:23.210
need to be able to
get to the point where

487
00:27:23.210 --> 00:27:26.240
I've solved your problem. And
at that point when I'm

488
00:27:26.240 --> 00:27:29.600
done, I'm done. So, so
yeah, so we do everything

489
00:27:29.600 --> 00:27:31.760
time and materials and I
mean, so it's been a

490
00:27:31.760 --> 00:27:36.620
really interesting way to kind
of look at this system,

491
00:27:36.620 --> 00:27:40.850
which has been, I think,
overlooked, but there's a lot

492
00:27:40.850 --> 00:27:43.580
of business value. There's a
lot of people who are

493
00:27:43.580 --> 00:27:46.040
trying to look at this
problem. And I look at

494
00:27:46.040 --> 00:27:49.880
it in a way, almost
like, you know, we know

495
00:27:49.880 --> 00:27:54.770
that our workforce is aging.
You know, our software applications

496
00:27:54.770 --> 00:27:58.370
are aging as well. And
there are people who, you

497
00:27:58.370 --> 00:28:00.860
know, are going to have
to maintain them. We get

498
00:28:00.920 --> 00:28:07.010
called in regularly because this
one person has known this

499
00:28:07.070 --> 00:28:10.370
system for 20 years and
now they're ready to retire.

500
00:28:10.640 --> 00:28:15.470
And if they, that one
person leaves, we're going to

501
00:28:15.500 --> 00:28:18.470
be sunk because this is
the driver of main driver

502
00:28:18.470 --> 00:28:21.650
of our revenue. So there's
a lot of, I think

503
00:28:21.680 --> 00:28:25.100
business opportunity in legacy code
as well. But it, but

504
00:28:25.100 --> 00:28:27.440
it does create kind of
a little bit of a

505
00:28:27.440 --> 00:28:30.710
mind shift. Well, and getting
it down to a repeatable

506
00:28:31.070 --> 00:28:35.690
build and also formalizing the
hosting of the thing like

507
00:28:35.720 --> 00:28:37.370
this. This is an opportunity
for a lot of what

508
00:28:37.370 --> 00:28:40.100
they call lift and shift
into the cloud where it's

509
00:28:40.100 --> 00:28:43.400
like, you know, that expense
reporting system that, you know,

510
00:28:43.430 --> 00:28:45.950
Anna wrote 20 years ago,
it's been running under her

511
00:28:45.950 --> 00:28:50.060
desk, you know, the whole
time. And she's retiring now

512
00:28:50.060 --> 00:28:55.100
what? Yeah, Yeah. We call
'em the people who solve

513
00:28:55.100 --> 00:28:59.720
the, who work on our
team code whispers because we

514
00:28:59.720 --> 00:29:03.410
don't use the term developer
because they, in order to

515
00:29:03.410 --> 00:29:06.110
do this, you have to
have software development skills. You

516
00:29:06.110 --> 00:29:10.340
have to have some business
analysis skills, right? Understand the

517
00:29:10.340 --> 00:29:13.520
business context testing, you know,
you have to be part

518
00:29:13.520 --> 00:29:16.610
tester, you have to be
project manager. So we have

519
00:29:16.610 --> 00:29:20.540
a very, very flat organization
where we hire people who

520
00:29:20.540 --> 00:29:22.220
have all of these skills.
And again, people were like,

521
00:29:22.220 --> 00:29:24.200
you're going to be crazy.
No one is ever going

522
00:29:24.200 --> 00:29:27.320
to be able to work
for you. But surprisingly, there

523
00:29:27.320 --> 00:29:28.940
are a lot of people
out there who have all

524
00:29:28.940 --> 00:29:30.770
of these skills and have
been looking to do this

525
00:29:30.770 --> 00:29:34.900
type of work. This was
pretty senior work Come out

526
00:29:34.910 --> 00:29:36.740
of high school or coming
out of college rather than

527
00:29:37.130 --> 00:29:40.040
Your first job we had.
No, all of them, I

528
00:29:40.040 --> 00:29:43.270
would, no, it's Not to
be ageist. I'm just saying

529
00:29:43.270 --> 00:29:44.680
that like this would be
when I retire, that would

530
00:29:44.680 --> 00:29:47.110
be a good job for
me to do. Yeah, we

531
00:29:47.110 --> 00:29:51.450
have 'em Yeah. I would
say the, I am the

532
00:29:51.450 --> 00:29:54.270
least seasoned person on our
team and I've been coding

533
00:29:54.270 --> 00:29:59.970
for eight years. You know,
several people have 30 plus

534
00:29:59.970 --> 00:30:02.270
years of experience for sure.
But I mean, yeah, it's,

535
00:30:02.270 --> 00:30:08.430
it's just that building up
of context and, and being

536
00:30:08.430 --> 00:30:10.380
able to just dive in
and it's like, Oh, I've

537
00:30:10.380 --> 00:30:13.110
seen this problem before, but
you know, we have, we

538
00:30:13.110 --> 00:30:16.290
have someone on our team,
who's taken an IBMI mainframe

539
00:30:16.290 --> 00:30:20.400
and upgraded it to Ruby
on rails. Right. So it's

540
00:30:20.400 --> 00:30:23.370
knowing how to integrate all
of the different pieces together

541
00:30:23.730 --> 00:30:27.360
so that it's functioning, it's
working well. It's going to,

542
00:30:28.350 --> 00:30:32.100
you know, serve the needs
of whatever the business is,

543
00:30:32.460 --> 00:30:35.220
you know, for years to
come Too, as we end

544
00:30:35.250 --> 00:30:37.170
two fun things that I
wanted to share with you

545
00:30:37.170 --> 00:30:39.480
to see if you saw
the first one was that

546
00:30:39.480 --> 00:30:43.470
there was a 17 year
old who bought a mainframe

547
00:30:43.590 --> 00:30:47.490
on eBay. Seriously. That's awesome.
He like, this is your

548
00:30:47.490 --> 00:30:49.380
legacy code. You need to
have this person on your

549
00:30:49.380 --> 00:30:53.040
team. He bought a mainframe,
it was a $200,000 mainframe

550
00:30:53.430 --> 00:30:55.740
that he bought for like
300 bucks. And he had

551
00:30:55.740 --> 00:30:58.290
to like go to Rutgers
and like rent a truck

552
00:30:58.290 --> 00:31:00.330
and have it like get
out. And he, he put

553
00:31:00.330 --> 00:31:01.920
it back together and he
put it on the internet.

554
00:31:01.920 --> 00:31:04.830
Like he got it running
again. It took him And

555
00:31:04.830 --> 00:31:07.320
see that's the thing is
the, like, this is the

556
00:31:07.320 --> 00:31:10.380
most interesting challenge. And I
am going to stick with

557
00:31:10.380 --> 00:31:12.510
it until I freaking solve
it. Yeah. He had to

558
00:31:12.510 --> 00:31:14.850
buy certain kind of cables.
He had to talk and

559
00:31:14.850 --> 00:31:17.610
he was talking to people
in their sixties about like,

560
00:31:17.730 --> 00:31:20.730
how did this used to
work and getting that thing

561
00:31:20.730 --> 00:31:23.310
booted up and then getting
modern ethernet to plug into

562
00:31:23.310 --> 00:31:25.920
this, this thing. That's the
first thing I wanted to

563
00:31:25.920 --> 00:31:27.810
share with you. Then the
second thing, did you see

564
00:31:28.200 --> 00:31:32.460
that the Apollo landing code?
So we have a, we

565
00:31:32.460 --> 00:31:36.600
opened an open. Oh, okay.
So, so yeah, so the

566
00:31:36.600 --> 00:31:41.400
Apollo 11 landing mainlander so
there have been several projects

567
00:31:41.400 --> 00:31:44.250
lately that have been open
sourced. So they opened source

568
00:31:44.250 --> 00:31:47.130
dos a few years ago,
which was awesome. So we've

569
00:31:47.130 --> 00:31:49.800
went in and looked at
that. They also look at

570
00:31:49.830 --> 00:31:53.700
open source Prince of Persia,
which I played McNair put

571
00:31:53.700 --> 00:31:57.840
all that code. So there
have been some wonderful kind

572
00:31:57.840 --> 00:32:00.270
of standards. So if you
look at jazz or if

573
00:32:00.270 --> 00:32:04.650
you look at literature, you
know, there are standards that

574
00:32:04.650 --> 00:32:06.900
you go to to look
for and say, how was

575
00:32:06.900 --> 00:32:09.060
this structured? What can I
learn? How can I learn

576
00:32:09.060 --> 00:32:10.740
how to code? So one
of the things that we're

577
00:32:10.740 --> 00:32:13.560
doing is there's a project
that I'm doing as a

578
00:32:13.560 --> 00:32:17.580
side gig called legacy code
rocks, and there's a get

579
00:32:17.580 --> 00:32:21.030
hub repo. And one of
the things on there is

580
00:32:21.930 --> 00:32:25.170
awesome legacy code. So we're
starting to compile and curate

581
00:32:25.170 --> 00:32:28.080
a list of all of
the different open source, you

582
00:32:28.080 --> 00:32:31.620
know, things that are out
there. Yeah. Yeah. I hope

583
00:32:31.620 --> 00:32:36.660
so. I, I really have
just thoroughly enjoyed learning about

584
00:32:36.660 --> 00:32:39.740
this. There's so much interesting
work here and it's such

585
00:32:39.740 --> 00:32:43.100
a good way to bridge
people and talk to people.

586
00:32:43.100 --> 00:32:46.450
So like yourself, so Well,
thanks so much for chatting

587
00:32:46.450 --> 00:32:50.170
today, Lately. This has been
a pleasure. Thank you, Andrea.

588
00:32:50.170 --> 00:32:53.770
Goulay from Corky bites. We'll
put the, her website and

589
00:32:53.770 --> 00:32:56.170
Twitter and the link to
her GitHub repo in the

590
00:32:56.170 --> 00:32:59.560
show notes. This has been
another episode of Hanselminutes and

591
00:32:59.560 --> 00:33:00.880
we'll see you again next
week.

