WEBVTT FILE

1
00:00:12.060 --> 00:00:16.770
From Hanselman it's dot com.
It's Hansel minutes or weekly

2
00:00:16.770 --> 00:00:21.210
discussion with web developer and
technologist Scott Hanselman. This is

3
00:00:21.210 --> 00:00:25.200
Lawrence Ryan announcing show number two
Oh nine. Recorded live Thursday,

4
00:00:25.230 --> 00:00:30.960
April 1st, 2010. Support for Hanselman. This
is provided by Tellerik rad

5
00:00:30.960 --> 00:00:34.530
controls, the most comprehensive suite
of components for windows forms

6
00:00:34.530 --> 00:00:43.800
and asp.net web applications. online@wwwdottelerik.com.
In this episode, Scott talks

7
00:00:43.800 --> 00:00:50.370
with Headspring systems CTO, Jeffrey
Palermo. Hi, this is Scott

8
00:00:50.370 --> 00:00:52.440
Hanselman and this is another
episode of Hansel minutes. And

9
00:00:52.440 --> 00:00:57.570
today I've got Jeffrey Palermo,
CTO, Headspring systems and author

10
00:00:57.570 --> 00:01:01.830
of a book on asp.net
MVC, specifically asp.net, MVC inaction.

11
00:01:02.190 --> 00:01:04.910
How's it going, Jeffrey. Good.
Thanks for having me Scott.

12
00:01:05.840 --> 00:01:09.860
So you, you work on
an opensource project called MVC

13
00:01:09.860 --> 00:01:12.860
contrib, and you guys have
been doing this for awhile,

14
00:01:12.860 --> 00:01:16.520
who all is on this,
on this project? Well, the

15
00:01:16.520 --> 00:01:19.430
project is about two years
old and Eric Hexter and

16
00:01:19.430 --> 00:01:23.630
I are the co founders
and we actually started about

17
00:01:23.630 --> 00:01:27.350
five days after the first
CTP of the MVC framework

18
00:01:27.350 --> 00:01:33.500
was launched and we've had
multiple contributors from Headspring systems,

19
00:01:34.370 --> 00:01:39.260
individual, Tim Scott, and then
Jeremy Skinner, our most active committer.

20
00:01:39.950 --> 00:01:41.390
And they're the main guys
and our, we have our

21
00:01:41.390 --> 00:01:44.690
first Microsoft committer, David Ebo
at the T for NBC

22
00:01:45.710 --> 00:01:48.290
stuff. So it's about two
years old and it's a,

23
00:01:48.420 --> 00:01:50.360
it has quite a bit
of a history of the

24
00:01:50.360 --> 00:01:53.630
source code has been three
different places. And now it's

25
00:01:53.660 --> 00:01:57.620
finally found a home as
a copay foundation. Cool. So

26
00:01:57.650 --> 00:02:01.760
tell me what, what is
the whole contrib kind of

27
00:02:01.760 --> 00:02:04.070
vibe? You always see a
project and then you see

28
00:02:04.070 --> 00:02:06.770
that project can trip. So
there's like napkin, Trib and

29
00:02:06.850 --> 00:02:10.340
MPC. Contrib. Is that a,
is that a tradition in

30
00:02:10.340 --> 00:02:14.180
software to come up with
a contrib version of a

31
00:02:14.180 --> 00:02:19.370
commercial project? I don't know
the actual source or who

32
00:02:19.370 --> 00:02:24.500
made the first country project,
but going back, going back

33
00:02:24.500 --> 00:02:28.700
to, even when I actually,
when I first started working

34
00:02:29.150 --> 00:02:33.890
with open source libraries in
the.net one Oh days, I

35
00:02:33.890 --> 00:02:38.750
was working with Nancy contrib
and then in hibernate contrib.

36
00:02:39.050 --> 00:02:41.360
And so when we were
looking for a name, we

37
00:02:41.360 --> 00:02:44.330
thought, you know, it's not
about being a new open

38
00:02:44.330 --> 00:02:49.520
source library. It's about, it's
about reinforcing and enhancing the

39
00:02:49.520 --> 00:02:52.670
experience with an existing library.
So it's not about creating

40
00:02:52.670 --> 00:02:56.660
a brand new identity. It's
about bolstering and strengthening the

41
00:02:56.660 --> 00:03:02.010
existing identity, which is asp.net
MVC. So it's not about

42
00:03:02.040 --> 00:03:05.730
like sometimes I describe MVC
contributors, the project that has

43
00:03:05.730 --> 00:03:07.500
all of this stuff that,
you know, that we wish

44
00:03:07.500 --> 00:03:10.440
we had the time to
put into MPC is not

45
00:03:10.440 --> 00:03:13.650
the case. I'd love for
the team at Microsoft, actually

46
00:03:13.650 --> 00:03:15.990
think about it that way.
And, and actually over the

47
00:03:15.990 --> 00:03:18.870
past two years, there's been,
there's been things there's been

48
00:03:18.870 --> 00:03:24.630
code that we have deleted
because AC NBC version two

49
00:03:24.630 --> 00:03:27.600
was able to incorporate some
of the ideas. And so,

50
00:03:27.630 --> 00:03:30.990
you know, deleting code is
always fun. Yeah. Re refactoring

51
00:03:31.020 --> 00:03:35.490
via subtraction. Exactly, exactly. Accomplish
the goal with the least

52
00:03:35.490 --> 00:03:38.220
amount of code possible, the
least amount of software possible.

53
00:03:39.480 --> 00:03:42.630
Are there things in NBC
contrib that are just copied

54
00:03:42.840 --> 00:03:45.240
from another project and like,
they, they live like this,

55
00:03:45.240 --> 00:03:47.760
like a small open source
project now has a home

56
00:03:47.760 --> 00:03:50.970
inside NBC contrib or is
it a collection or are

57
00:03:50.970 --> 00:03:52.950
there things in NBC country
that there are only in

58
00:03:52.950 --> 00:03:58.140
there, There are things what
most of MVC contrib is,

59
00:03:58.320 --> 00:04:02.250
are, are unique things that
they started there. And that's

60
00:04:02.670 --> 00:04:05.820
the only place that they
are. NBC kinship is not

61
00:04:05.820 --> 00:04:08.850
a standalone library. In other
words, you wouldn't use NBC

62
00:04:08.850 --> 00:04:11.580
contrib just by itself and
say, Oh, I'm creating an

63
00:04:11.580 --> 00:04:14.610
NBC contribute application that just
doesn't make sense. You would

64
00:04:14.610 --> 00:04:20.070
be creating an asp.net MVC
application. And then you would

65
00:04:20.070 --> 00:04:25.260
leverage the MVC contrib library
for some extra goodness. Now,

66
00:04:27.060 --> 00:04:31.860
a few years ago, when
it first started, we received

67
00:04:31.860 --> 00:04:35.940
some contributions of adoptations to
the end velocity view engine

68
00:04:36.240 --> 00:04:39.630
adapted for ACN and NBC,
the braille view engine, and

69
00:04:39.630 --> 00:04:44.190
then an XSLT transformed view
engine. And those were really

70
00:04:44.190 --> 00:04:48.060
interesting early ideas and they
were contributed and they haven't,

71
00:04:48.870 --> 00:04:52.320
they haven't received a whole
lot of traction in velocity.

72
00:04:52.320 --> 00:04:56.910
And braille came over from
the ASP net adaptations that

73
00:04:56.910 --> 00:05:00.900
were already in monorail. And
so it was since they

74
00:05:00.900 --> 00:05:02.940
already worked with ASP net,
it was pretty easy to

75
00:05:02.940 --> 00:05:07.980
just adapt them for NBC
NBC version two, to correspond

76
00:05:07.980 --> 00:05:13.140
with asp.net, NBC version two
we've deprecated the extra view

77
00:05:13.140 --> 00:05:15.570
engines, just because we haven't
found that people have been

78
00:05:15.570 --> 00:05:19.710
using them. So you deprecated
something just because it didn't

79
00:05:19.710 --> 00:05:21.930
get a lot of support.
Isn't there like some person

80
00:05:21.930 --> 00:05:26.010
out there who like really
cares about that. Moreover, we

81
00:05:26.010 --> 00:05:29.370
don't have a committer who
is maintaining them. So even

82
00:05:29.370 --> 00:05:31.440
to upgrade them, we don't,
we don't have anyone in

83
00:05:31.440 --> 00:05:36.180
the community to who is
maintaining those. So while they

84
00:05:36.180 --> 00:05:40.050
are still available, while they
are still available and you

85
00:05:40.050 --> 00:05:43.530
can still get builds that
do support those, they're not

86
00:05:43.530 --> 00:05:46.200
actively being maintained. And so
we put that, put them

87
00:05:46.200 --> 00:05:49.650
out on the MVC one
branch, but for NBC version

88
00:05:49.650 --> 00:05:52.260
two and going forward, we
don't have a volunteer in

89
00:05:52.260 --> 00:05:54.750
the community who stepped up
and says, yeah, I'll maintain

90
00:05:54.750 --> 00:05:58.580
those for the project when
you run An open source

91
00:05:58.580 --> 00:06:01.820
project like this. And I,
would it be fair to

92
00:06:01.820 --> 00:06:03.860
say that you're kind of
the coordinator at this point?

93
00:06:05.140 --> 00:06:09.370
I would say that I
am one of the faces

94
00:06:09.370 --> 00:06:13.790
of MVC contrib. And at
this point probably a in,

95
00:06:13.790 --> 00:06:16.960
in, in Microsoft speak a
evangelist. And I would say

96
00:06:16.960 --> 00:06:21.910
that Eric Hexter is the
actual coordinator, moving things around

97
00:06:21.910 --> 00:06:26.830
and, and coordinating the actual
tactical actions of the project

98
00:06:26.830 --> 00:06:33.220
itself. I know in my
dual role, as, as NBC

99
00:06:33.220 --> 00:06:38.230
contrib cofounder, and also leading
the practice here at Headspring,

100
00:06:38.680 --> 00:06:44.080
we contribute lots of features
directly from Headspring staff through

101
00:06:44.080 --> 00:06:48.190
patches, to some of the
NBC contrib committers. And in

102
00:06:48.190 --> 00:06:50.110
that role, I'll sort of
give direction that, you know,

103
00:06:50.110 --> 00:06:52.360
what we need, we need
these features in NBC contributor.

104
00:06:52.360 --> 00:06:54.220
We need this, these features
to make it to NBC

105
00:06:54.220 --> 00:06:56.890
contrib. And so I'll give
direction that way, but, but

106
00:06:56.920 --> 00:06:58.750
I gotta give credit to
Eric texture as being the

107
00:06:58.750 --> 00:07:03.610
real coordinator, the overall coordinator
for the project itself, Where

108
00:07:03.610 --> 00:07:05.710
does, where does Eric work?
And the reason I ask

109
00:07:05.710 --> 00:07:07.780
is that it seems that
with all open source projects

110
00:07:07.780 --> 00:07:09.880
that, you know, these are
all really good successful ones,

111
00:07:10.210 --> 00:07:13.720
they succeed the most when
someone has a commercial interest

112
00:07:13.720 --> 00:07:15.880
in getting them to work
like, you know, you're using

113
00:07:15.880 --> 00:07:18.340
NBC contribute at your company.
I, is it fair to

114
00:07:18.340 --> 00:07:22.090
say Eric probably doing the
same thing at his, That

115
00:07:22.090 --> 00:07:25.120
is fair to say, because
Eric works at Headspring Aha.

116
00:07:25.690 --> 00:07:28.270
That all comes around. So
how do I, if I'm

117
00:07:28.270 --> 00:07:30.280
a, if I'm a community
member, how do I know

118
00:07:30.280 --> 00:07:33.760
that NBC contribute? Isn't just
a, you know, a Headspring

119
00:07:34.840 --> 00:07:37.810
product as opposed to, you
know, a real vibrant open

120
00:07:37.810 --> 00:07:42.100
source project. Well, that's, that's
part of the decision to,

121
00:07:42.310 --> 00:07:45.430
to contribute all the intellectual
property to the code flex

122
00:07:45.440 --> 00:07:49.060
foundation. Now, even though both
Eric and I are at

123
00:07:49.060 --> 00:07:53.170
Headspring and yes, we do
use NBC contrib on client

124
00:07:53.170 --> 00:07:56.230
projects, just like we use
other open source projects, like

125
00:07:56.290 --> 00:08:00.910
in hibernate and Nance and
in unit, Tim Scott is

126
00:08:00.910 --> 00:08:03.910
another committer who is not
at Headspring or he does

127
00:08:03.910 --> 00:08:06.250
live in Austin, Texas. So
we see him face to

128
00:08:06.250 --> 00:08:08.800
face quite, quite frequently. And
he comes to the austin.net

129
00:08:08.800 --> 00:08:14.410
user group. And Jeremy Skinner is
our most active committer and

130
00:08:14.410 --> 00:08:21.260
documenter, and he was in
the UK. So that's it,

131
00:08:21.260 --> 00:08:24.850
it's not, it's not a,
you know, one way Headspring

132
00:08:24.850 --> 00:08:27.220
track. We certainly give, give
leadership to it, but it's,

133
00:08:27.490 --> 00:08:30.760
it's more broad. And we
have our first Microsoft committer,

134
00:08:30.760 --> 00:08:34.930
David Evo. So this project
is now part of the

135
00:08:34.930 --> 00:08:39.160
code flex foundation. It does
not have any intellectual property

136
00:08:39.220 --> 00:08:43.540
left rooted at Headspring or
actually in, in me or

137
00:08:43.540 --> 00:08:46.870
Eric or Tim or Jeremy
is individuals, you know, actual

138
00:08:46.870 --> 00:08:49.330
property. And the ownership now
resides with the coast Lux

139
00:08:49.330 --> 00:08:54.820
foundation. We are still leading
the MVC country project and

140
00:08:54.820 --> 00:08:57.180
the direction that we think
it should go, but there's

141
00:08:57.180 --> 00:09:00.720
an active mailing list with
lots of people using it

142
00:09:00.720 --> 00:09:04.530
that also are asking questions,
helping each other out and

143
00:09:04.560 --> 00:09:07.770
giving their opinions about what
the direction of MEC contributor

144
00:09:07.780 --> 00:09:09.330
goes. So I think it's
really turned out to be

145
00:09:09.780 --> 00:09:13.590
a great vibrant open source
project. And it's definitely not

146
00:09:13.620 --> 00:09:17.480
a one company operation. So
for, for those people who

147
00:09:17.480 --> 00:09:20.030
are listening, who may not
be familiar there's code Plex

148
00:09:20.060 --> 00:09:25.550
or what Sam Ramji calls
the forge coplex.com, which is

149
00:09:25.550 --> 00:09:28.820
the place that you host
your projects. And then there's,

150
00:09:28.940 --> 00:09:36.950
COVID flex.org, which is a
nonprofit external foundation that kind

151
00:09:36.950 --> 00:09:42.260
of helps projects be used.
It's basically a Microsoft jump-started

152
00:09:42.260 --> 00:09:45.590
foundation. That's now an entirely
independent of Microsoft that helps

153
00:09:45.860 --> 00:09:49.130
helps projects be used by
commercial the software. So you're

154
00:09:49.130 --> 00:09:53.780
saying that you donated NVC
contrib to the copex foundation.

155
00:09:55.280 --> 00:10:00.890
Yes, yes. And we rounded
up the surprisingly thick stack

156
00:10:00.890 --> 00:10:05.900
of paperwork required for all
the current committers, as well

157
00:10:05.900 --> 00:10:12.080
as, as well as me
in my capacity as Headspring

158
00:10:12.080 --> 00:10:14.240
thing that it's bringing as
a company does not claim

159
00:10:14.240 --> 00:10:16.790
any ownership we hear by
grant, you know, yada yada,

160
00:10:17.210 --> 00:10:19.940
all this stuff over. And
then Tim Scott, Jeremy Skinner individually,

161
00:10:19.940 --> 00:10:24.110
me individually, Eric individually, and
then everyone who has contributed

162
00:10:24.110 --> 00:10:28.670
a patch, we kept contact
information on them. And when

163
00:10:28.670 --> 00:10:32.720
you contribute a patch through
covid.com, there's verbiage that already

164
00:10:32.720 --> 00:10:34.820
helps out that says, Hey,
I'm contributing to this patch.

165
00:10:34.820 --> 00:10:37.940
I don't, I don't retain
ownership. I hear by contribute

166
00:10:37.940 --> 00:10:39.950
this past year, click the
button. So that helps out

167
00:10:39.950 --> 00:10:43.370
with that. But yes, there's,
there's official paperwork that says

168
00:10:43.370 --> 00:10:45.800
any intellectual property that would
be assigned to me is

169
00:10:45.800 --> 00:10:49.130
now assigned to the Coplex
foundation. Was that, was that

170
00:10:49.130 --> 00:10:50.990
pretty difficult? I mean, was
it worth, was it worth

171
00:10:50.990 --> 00:10:52.580
the trouble? I mean, that's
it, that sounds like a

172
00:10:52.580 --> 00:10:55.250
big deal. Gosh, all every
single person I've ever did

173
00:10:55.250 --> 00:10:58.700
a patch, Every single person
that ever did a Pat

174
00:10:58.700 --> 00:11:02.360
didn't have to do that
paperwork because code flex.com has

175
00:11:02.360 --> 00:11:06.980
a patch submission process, which
has a legal disclaimer that

176
00:11:06.980 --> 00:11:10.700
helped out a lot. It
really did because when you

177
00:11:10.700 --> 00:11:14.060
submit a patch, you agree
to the terms of submitting

178
00:11:14.060 --> 00:11:16.780
that patch and it's attached
to your user ID. And

179
00:11:16.790 --> 00:11:20.240
the terms are that you're
contributing this patch and the

180
00:11:20.240 --> 00:11:24.650
intellectual property that goes along
with it, normal us copyright

181
00:11:24.650 --> 00:11:27.110
law would say that even
though you gave someone the

182
00:11:27.110 --> 00:11:31.250
code, the intellectual property for
that code would still reside

183
00:11:31.250 --> 00:11:34.310
with the person who created
it. And so the disclaimer,

184
00:11:34.730 --> 00:11:38.900
you know, officially says, I
am, I am here by

185
00:11:38.900 --> 00:11:42.920
giving my, my intellectual property,
my copyright, and I'm not

186
00:11:42.920 --> 00:11:46.370
going to, Wow. It sounds
like one more reason to

187
00:11:46.370 --> 00:11:49.940
read your ULAs when you,
when you click agree on

188
00:11:49.940 --> 00:11:55.660
something on the web. But
you know, that's the, that's

189
00:11:55.660 --> 00:11:58.810
the purpose of the, of,
of code flex.com is to

190
00:11:58.810 --> 00:12:05.050
facilitate open source libraries and
in the open source mindset,

191
00:12:05.410 --> 00:12:08.980
when you contribute something to
a project in your mind,

192
00:12:08.980 --> 00:12:11.590
you're not thinking, Oh, I'm
contributing this code to the

193
00:12:11.590 --> 00:12:14.920
project. So that later on,
if this project is successful,

194
00:12:15.100 --> 00:12:17.110
I can try to get
some money out of it

195
00:12:17.110 --> 00:12:20.080
because some of my intellectual
property and then go after

196
00:12:20.080 --> 00:12:22.300
all the commercial companies and
ended up using this open

197
00:12:22.300 --> 00:12:27.250
source project, that's not your
mindset. And so there's, there's

198
00:12:27.250 --> 00:12:33.400
some legal maneuvers that are
necessary in order to jive

199
00:12:33.730 --> 00:12:36.700
the open source mindset with
the legal reality. And I

200
00:12:36.700 --> 00:12:40.020
think that's the value of
the code flex foundation. So

201
00:12:40.230 --> 00:12:42.960
when you suggested this idea
to like the team that

202
00:12:42.960 --> 00:12:44.160
they thought it was a
good winner, was it a

203
00:12:44.160 --> 00:12:48.330
hard sell? You know, it
was a surprisingly easy sell

204
00:12:48.600 --> 00:12:51.630
at the, at the mano
space conference in Austin this

205
00:12:51.630 --> 00:12:56.670
past October, some of the,
some of the code flex

206
00:12:56.670 --> 00:13:01.070
foundation guys were there and
Eric and I they're going,

207
00:13:01.070 --> 00:13:02.310
I spoke to them, said,
you know, what would it

208
00:13:02.310 --> 00:13:05.040
take to get NBC contributed
to the Copeland to hope

209
00:13:05.040 --> 00:13:08.670
flux foundation. We're very interested
in being one of the

210
00:13:08.670 --> 00:13:13.650
first non-Microsoft funded, open source
projects. What's, what's your roadmap.

211
00:13:14.100 --> 00:13:16.710
And at that point, they
didn't have the procedures completely

212
00:13:16.710 --> 00:13:21.600
fleshed out about how they
would accept projects. But, you

213
00:13:21.600 --> 00:13:24.750
know, we worked with them
to get their process in

214
00:13:24.750 --> 00:13:28.590
place. They had a board
meeting, they approved NBC contrib.

215
00:13:29.580 --> 00:13:35.430
We met the criteria and
furthermore, the first funded gallery

216
00:13:36.120 --> 00:13:39.840
in code flex foundation is
the asp.net gallery. And ASEAN

217
00:13:39.870 --> 00:13:44.130
Ajax was the first project
contributed. And so it just

218
00:13:44.130 --> 00:13:48.450
so happened that a gallery
was funded in the code

219
00:13:48.450 --> 00:13:50.880
flex foundation. That was a
very good home for NBC

220
00:13:50.880 --> 00:13:55.440
contrib. Now, if this project
was geared towards, I don't

221
00:13:55.440 --> 00:13:58.770
know, SQL server and open
source SQL server projects, then

222
00:13:59.250 --> 00:14:01.590
we probably wouldn't be in
the copex foundation because there

223
00:14:01.590 --> 00:14:05.460
is not a sequel server
gallery that has funding, but

224
00:14:05.460 --> 00:14:08.190
there is an ASP in
gallery. I see, I guess,

225
00:14:08.190 --> 00:14:12.680
at least not yet. Not
yet. Exactly. Not yet. And

226
00:14:12.690 --> 00:14:16.620
we met the other criteria,
for instance, being, being active

227
00:14:16.620 --> 00:14:21.930
for a demonstrable reasonable period
of time, having people having

228
00:14:21.930 --> 00:14:25.500
so many committers, so much
activity, because if you just,

229
00:14:25.500 --> 00:14:28.170
if you're a one man
opensource project and you spin

230
00:14:28.170 --> 00:14:31.320
something up and, and you
throw some code out there

231
00:14:31.500 --> 00:14:33.780
that doesn't quite meet the
criteria for entrance into the

232
00:14:33.780 --> 00:14:38.070
code flex foundation, you have
to demonstrate that you have

233
00:14:38.070 --> 00:14:41.100
a life. And the life
of the open source project

234
00:14:41.130 --> 00:14:43.920
is not directly tied to
the single founder. In other

235
00:14:43.920 --> 00:14:47.460
words, if the single founder
sort of walked away with

236
00:14:47.460 --> 00:14:50.790
the open source project flounder,
or is there a community

237
00:14:50.790 --> 00:14:53.340
around that would keep it
going Right? You know, and,

238
00:14:53.340 --> 00:14:55.240
and that's actually something that
I I've called in the

239
00:14:55.240 --> 00:14:59.680
past, the bus factor, which
is what's the bus factor

240
00:14:59.680 --> 00:15:01.480
on a project. What are
the chances that someone gets

241
00:15:01.480 --> 00:15:06.190
hit by a bus and
this project falls apart. Right?

242
00:15:06.850 --> 00:15:08.470
And I can say, let
me say that if I

243
00:15:08.470 --> 00:15:11.650
went away, even if Eric
Hexter went away, this project

244
00:15:11.650 --> 00:15:14.470
would keep going Well, that's
pretty cool. Cause that's one

245
00:15:14.470 --> 00:15:16.060
of the things that people
wonder about. They want to

246
00:15:16.060 --> 00:15:19.990
know if, if the project
falls apart, who's going to

247
00:15:19.990 --> 00:15:22.030
step up and nothing is
sad than an open source

248
00:15:22.030 --> 00:15:25.960
project. That's really been abandoned.
Right? Right. But at the

249
00:15:25.960 --> 00:15:29.950
same time, success for an
open source project is only

250
00:15:29.950 --> 00:15:34.720
defined by the goals of
the founder. And, and we

251
00:15:34.720 --> 00:15:37.630
can't, we can't be quick
to say that if an

252
00:15:37.630 --> 00:15:39.880
open source project is only
used by one or two

253
00:15:39.880 --> 00:15:42.910
people and only maintained by
one person, then it's not

254
00:15:42.910 --> 00:15:48.190
a real open source project.
Our definition of success is

255
00:15:48.190 --> 00:15:52.390
not everyone's definition of success
for their open source project.

256
00:15:52.390 --> 00:15:55.360
Some people are fine saying,
no, I'm not going to

257
00:15:55.360 --> 00:15:59.200
let anyone contribute to it,
but I'll give my work

258
00:15:59.200 --> 00:16:01.960
away for free. And someone
contributes a patch and says,

259
00:16:01.960 --> 00:16:06.070
no, I don't want your
patch. Now it's, it's there

260
00:16:06.070 --> 00:16:10.240
definitely it's it's up to
the founder. And so when

261
00:16:10.240 --> 00:16:12.760
you get to the foundation
level, when you have communities

262
00:16:12.760 --> 00:16:15.760
around these open source projects,
sort of all go gone

263
00:16:15.760 --> 00:16:19.210
in the same direction, however,
open source, the open source

264
00:16:20.170 --> 00:16:23.980
ecosystem and community is, is
so broad. I don't think

265
00:16:23.980 --> 00:16:27.130
you can say one thing
about it. That's uniform across

266
00:16:27.130 --> 00:16:29.710
every single open source project.
In fact, I don't think

267
00:16:29.710 --> 00:16:32.860
we'll ever be able to
have a catalog of every

268
00:16:32.860 --> 00:16:36.400
open source project because some
open source projects, the founder

269
00:16:36.400 --> 00:16:39.580
just doesn't advertise. It's not
founder, doesn't care about advertising,

270
00:16:39.640 --> 00:16:42.160
maybe his friends up and
down his own block or

271
00:16:42.160 --> 00:16:44.320
the only, or the extent
of the advertising that he

272
00:16:44.320 --> 00:16:49.000
does. Hi, this is Scott
Hanselman from another parallel universe,

273
00:16:49.000 --> 00:16:50.350
got to tell you about
some of our things our

274
00:16:50.350 --> 00:16:54.310
sponsors are doing. They make
this free podcast possible. If

275
00:16:54.310 --> 00:16:56.920
you're developing a new line
of business application, you've probably

276
00:16:56.920 --> 00:16:59.380
tried the latest version of
server light. Now you can

277
00:16:59.380 --> 00:17:02.050
get even better results by
combining the functionality and server

278
00:17:02.050 --> 00:17:04.330
Lite for beta, with some
of the richness or the

279
00:17:04.330 --> 00:17:07.180
third party controls from our
friends at Tellerik, they're the

280
00:17:07.180 --> 00:17:10.150
first vendors to offer native
support for the server Lite

281
00:17:10.150 --> 00:17:12.460
for beta and their rag
controls. You've got a new

282
00:17:12.460 --> 00:17:15.670
server for CTP suite of
these controls. They let you

283
00:17:15.670 --> 00:17:18.250
tap into the frameworks, great
potential. You got native right

284
00:17:18.250 --> 00:17:20.110
mouse click and all the
new features it's server line.

285
00:17:20.650 --> 00:17:24.160
There's 38 controls that give
you all these features. You

286
00:17:24.160 --> 00:17:26.650
can start building those compelling
line of business applications right

287
00:17:26.650 --> 00:17:29.290
away. I encourage you to
check those products out at

288
00:17:29.320 --> 00:17:34.630
tellerik.com/server light, and, you know,
thank Tellerik for supporting that

289
00:17:34.630 --> 00:17:37.240
and rock supporting Hansel minutes
on their Facebook fan page

290
00:17:37.240 --> 00:17:41.770
at facebook.com/tellerik. Now back to
the show. So let's, let's

291
00:17:41.770 --> 00:17:43.540
shift a little bit and
walk me through some of

292
00:17:43.540 --> 00:17:45.790
the things that are inside
of MVC contributed. I might

293
00:17:45.790 --> 00:17:55.020
want to, to use. Sure.
So first and foremost, and

294
00:17:55.080 --> 00:17:58.740
I'm saying, and I'm saying
this first, because it's, it's

295
00:17:58.740 --> 00:18:02.970
so important would be the
UI testing. The, there is

296
00:18:02.970 --> 00:18:08.700
a, there's a UI testing
wrapper and adapter around, and

297
00:18:08.700 --> 00:18:13.470
initially implemented over the Watson
library that makes it very

298
00:18:13.470 --> 00:18:18.210
easy to create UI tests
and by UHS really full

299
00:18:18.210 --> 00:18:21.720
system tests, or just UI
tests for your web apps

300
00:18:21.720 --> 00:18:26.970
running AceNet NBC where opens
up internet Explorer. It types

301
00:18:26.970 --> 00:18:30.150
in the text, boxes, clicks
the button and then asserts

302
00:18:30.170 --> 00:18:33.300
the right thing happen. There's
the assembly is called NBC

303
00:18:33.300 --> 00:18:37.530
can trip dot test helper.
And it has a really

304
00:18:37.530 --> 00:18:41.940
easy syntax over Wattens that
makes it a little bit

305
00:18:41.940 --> 00:18:45.360
easier to use. It also
has an interface called eyebrows

306
00:18:45.360 --> 00:18:48.810
or driver, and Watson is
currently the only implementation of

307
00:18:48.810 --> 00:18:53.250
that interface. But another implementation
that's in the works is

308
00:18:53.250 --> 00:18:57.810
over the LTF framework, the
lightweight test automation framework from,

309
00:18:58.100 --> 00:19:01.670
from actually the QA team
of ESPN and ABC. How

310
00:19:01.670 --> 00:19:04.250
does this work exactly when
you say UI testing, I

311
00:19:04.250 --> 00:19:06.800
think of someone automating a
browser and clicking for me,

312
00:19:06.950 --> 00:19:10.040
I think of like the,
the coded UI test and

313
00:19:10.040 --> 00:19:14.570
visual studio, 2010, or water
or Watson or things like

314
00:19:14.570 --> 00:19:18.650
that. How is this different?
Right, Right. It absolutely is

315
00:19:18.650 --> 00:19:23.450
automating the tests. It's, it's
making a test script that

316
00:19:23.450 --> 00:19:26.270
you would run in a
test runner like in unit

317
00:19:26.300 --> 00:19:30.620
or ms. Test or MBE
unit. And when the test

318
00:19:30.620 --> 00:19:34.910
runs, it would interact with
it and open up internet

319
00:19:34.910 --> 00:19:39.140
Explorer, navigate to the page
and questions, click the right

320
00:19:39.140 --> 00:19:43.250
links, you know, select things
and drop down menu, click

321
00:19:43.250 --> 00:19:47.150
a button, go to another
page. And, and literally you

322
00:19:47.150 --> 00:19:51.050
can automate, you can automate
a test of placing an

323
00:19:51.050 --> 00:19:54.980
order in e-commerce ASP net
application. And so you can,

324
00:19:56.180 --> 00:20:02.870
what we use it for@headspringisforfullsystemtestingforasp.net
apps, then ACE and NBC

325
00:20:02.870 --> 00:20:05.540
apps. It can work with
web forms, but it works

326
00:20:05.600 --> 00:20:09.150
the best with NBC. And,
and it I'm sorry, it

327
00:20:09.170 --> 00:20:12.410
is automating the browser. It
is, it opens up internet

328
00:20:12.410 --> 00:20:16.190
Explorer, it types in the
text boxes and it clicks

329
00:20:16.190 --> 00:20:18.050
the buttons. You can stand
back, you can sit back

330
00:20:18.050 --> 00:20:20.870
in your chair and watch
it run. And it's just

331
00:20:20.870 --> 00:20:23.870
a robot. Is this a
new implementation of something that

332
00:20:23.870 --> 00:20:26.180
hasn't been done before with
like, again, like with water,

333
00:20:26.240 --> 00:20:28.640
which is web application testing
and Ruby or Watson, or

334
00:20:28.640 --> 00:20:31.700
did you bring Watson into
your project? Oh, this has

335
00:20:31.700 --> 00:20:34.220
been done over and over
again. This is just making

336
00:20:34.220 --> 00:20:38.240
it work very easily with
the MVC framework. So the

337
00:20:38.240 --> 00:20:42.830
actual implementation of, of driving
the browser Dom is Watson

338
00:20:43.610 --> 00:20:47.500
or El task, depending on
which one you're using, the

339
00:20:47.500 --> 00:20:53.140
test helper is an abstraction
over whichever browser driving library.

340
00:20:53.140 --> 00:20:57.760
You choose. It could conceptually
be selenium or cucumber or

341
00:20:57.760 --> 00:21:01.540
whatever, but it's an abstraction
over that to make it

342
00:21:01.540 --> 00:21:05.610
very easy to do the
testing for NBC apps. I

343
00:21:05.610 --> 00:21:08.610
see. So you've put a
help on both sides to

344
00:21:08.610 --> 00:21:11.010
make sure. So it's not
just an entirely client side

345
00:21:11.010 --> 00:21:13.290
browser driving solution. There's something
on the back end. That's

346
00:21:13.290 --> 00:21:16.740
helping It's part of the
library. That's helping you author

347
00:21:17.160 --> 00:21:20.160
the test scripts. Okay. Okay.
But you don't have to

348
00:21:20.160 --> 00:21:24.450
change your application. It'll work
just as before, Right? You

349
00:21:24.450 --> 00:21:28.230
do not have to change
your application. However, if you

350
00:21:28.230 --> 00:21:33.990
don't have a test surfaces
already designed into your application

351
00:21:34.110 --> 00:21:37.320
as a part of the
application architecture, then it's going

352
00:21:37.320 --> 00:21:40.770
to be more difficult to,
to test it. Just like,

353
00:21:41.070 --> 00:21:43.080
just like in a modern
automobile. When you go to

354
00:21:43.080 --> 00:21:48.000
the dealership, there is, there
is a, a plugin, a,

355
00:21:48.120 --> 00:21:50.610
a Jack that they're going
to connect the computer to.

356
00:21:50.610 --> 00:21:53.190
And it's a, it's a
diagnostic port and they can

357
00:21:53.190 --> 00:21:56.730
get error codes and other
information directly from the engine.

358
00:21:56.970 --> 00:21:59.790
And you as the user,
you don't care about that

359
00:21:59.790 --> 00:22:05.460
whatsoever. That's purely for testing
purely for diagnostics, but it

360
00:22:05.460 --> 00:22:10.740
was engineered into the car
because that's so important. There

361
00:22:10.740 --> 00:22:14.550
are specific pins on an
Intel microprocessor that are only

362
00:22:14.550 --> 00:22:19.860
for testing and it gives
visibility under the covers. And

363
00:22:19.860 --> 00:22:24.330
so the same principle has
been applied in lots of

364
00:22:24.330 --> 00:22:28.020
other types of engineering. And,
and it behooves us as

365
00:22:28.020 --> 00:22:30.990
software engineers to put it
in our applications, because if

366
00:22:30.990 --> 00:22:36.990
our applications really only provide
the end user interface as

367
00:22:36.990 --> 00:22:40.470
a surface for testing, then
we're at a handicap when

368
00:22:40.500 --> 00:22:43.200
we're trying to write these
automated test scripts. And so

369
00:22:44.370 --> 00:22:46.470
in our client projects, you
know, we leave certain spots

370
00:22:46.470 --> 00:22:50.250
open as, as purely test
surfaces and it makes offering

371
00:22:50.250 --> 00:22:52.740
those tests so much easier.
So one of the other

372
00:22:52.740 --> 00:22:55.710
things that's inside of MPC
contribute something called portable areas.

373
00:22:55.860 --> 00:22:57.900
How is that different from
the areas feature in NBC

374
00:22:57.900 --> 00:23:02.100
too? Right? So portable areas
is an add on to

375
00:23:02.100 --> 00:23:05.850
the areas feature itself. It's
not a replacement. It, it

376
00:23:05.880 --> 00:23:11.790
basically takes a NVC area
and makes it a component

377
00:23:11.790 --> 00:23:16.680
model. It makes it distributable
as a single DLL. You

378
00:23:16.680 --> 00:23:20.580
take the area, package it
up. And then, you know,

379
00:23:20.760 --> 00:23:22.710
in other words, one of
the samples and NBC can

380
00:23:22.710 --> 00:23:24.900
trip that you can get
to. If you download the

381
00:23:24.900 --> 00:23:30.420
code from, from NBC contrib.org,
you can go into source

382
00:23:30.420 --> 00:23:34.440
and samples and go into
a portable areas, a sample.

383
00:23:34.440 --> 00:23:42.780
And it's essentially has a
RSS widget helper. And there's

384
00:23:42.780 --> 00:23:45.620
an RSS widget controller, and
there's a view and it

385
00:23:45.620 --> 00:23:48.020
takes any RSS fee that
you want and it formats

386
00:23:48.020 --> 00:23:51.890
it nicely on a page.
And that is its own

387
00:23:51.890 --> 00:23:57.020
area. And the portable areas
capability allows you to package

388
00:23:57.050 --> 00:24:00.380
that up into a single
DOL. I can hand it

389
00:24:00.380 --> 00:24:05.090
to you. You can do
add reference RSS widget, portable

390
00:24:05.090 --> 00:24:09.890
area into your application. You
instantly have a new HTML

391
00:24:09.890 --> 00:24:13.460
helper available on your views.
You can say HTML dot

392
00:24:13.460 --> 00:24:17.930
RSS, passing the string of
the RSS feed. And then

393
00:24:17.960 --> 00:24:23.060
instantly you have a what
amounts to a partial view

394
00:24:23.510 --> 00:24:27.980
pop right in that section,
formatted nicely with the contents

395
00:24:27.980 --> 00:24:31.580
of that RSS feed. And
to you, it looked like

396
00:24:31.610 --> 00:24:35.540
a, it looked like a
simple HTML helper. Both the

397
00:24:35.540 --> 00:24:39.320
implementation was an entire area.
Now, the second thing that's

398
00:24:39.320 --> 00:24:44.300
interesting about this is that
areas registered new routes. And

399
00:24:44.300 --> 00:24:47.840
so by adding a reference
to a new portable area,

400
00:24:47.990 --> 00:24:51.830
and then in your global
ASX, I'm just registering all

401
00:24:51.830 --> 00:24:56.540
areas. The MVC framework automatically
discovers all the areas that

402
00:24:56.540 --> 00:24:59.240
are in your bin folder,
or that are in the,

403
00:24:59.300 --> 00:25:02.630
the assemblies that the app
domain has loaded. Right? So

404
00:25:02.630 --> 00:25:05.300
now you have the portable
area loaded into your app

405
00:25:05.300 --> 00:25:09.920
domain. It'll find the area
it'll register the routes automatically,

406
00:25:10.400 --> 00:25:13.370
and you can instantly have
10 or 20 brand new

407
00:25:13.370 --> 00:25:16.250
pages active on your site
right away. So if you

408
00:25:16.250 --> 00:25:19.430
think about it, something that's
not implemented now, but I

409
00:25:19.430 --> 00:25:21.860
think it would be great.
If someone wanted to try

410
00:25:21.860 --> 00:25:25.220
their hand at it, take,
take a, you know, open

411
00:25:25.220 --> 00:25:30.650
source forum or discussion group,
open source project that's for

412
00:25:30.650 --> 00:25:33.230
ASP net and package it
up as an NBC two

413
00:25:33.230 --> 00:25:37.970
area. And then, and then
layer on the portable on

414
00:25:37.970 --> 00:25:40.940
top of it and distributed
as a single DLL add

415
00:25:40.940 --> 00:25:43.970
reference them. You instantly have
a discussion group on your,

416
00:25:44.210 --> 00:25:52.790
on your Espino site, the
most exciting part of your

417
00:25:53.030 --> 00:25:58.250
trip. Gosh, you know, it
it's, it's pretty well up

418
00:25:58.250 --> 00:26:03.200
there. It's pretty well up
there. Cause NBC too, isn't,

419
00:26:03.980 --> 00:26:08.150
isn't excited. Exciting just by
itself. It's exciting because it's

420
00:26:08.150 --> 00:26:12.500
such an open framework. It
doesn't say it doesn't say

421
00:26:12.500 --> 00:26:15.410
no, no, no, here's the
framework. And you as the

422
00:26:15.410 --> 00:26:18.080
human fit yourself into the
pieces of it and you

423
00:26:18.080 --> 00:26:21.020
put your code here and
nowhere else it says, no,

424
00:26:21.020 --> 00:26:24.080
no, no, no. Here's, here's
all the different ways that

425
00:26:24.080 --> 00:26:26.840
we can help you put
together the web application that

426
00:26:26.840 --> 00:26:30.980
you want to. And then
where, where you want to

427
00:26:30.980 --> 00:26:33.590
go further, you extend it.
And there's hooks for that.

428
00:26:34.200 --> 00:26:37.610
And same thing with NBC
can trip. There's a lot

429
00:26:37.610 --> 00:26:41.060
of places that are just
extensions for particular hooks, like

430
00:26:41.060 --> 00:26:46.440
the controller factories, HTML, helpers,
there's view, data extensions, or

431
00:26:46.440 --> 00:26:49.350
view data. You have to
access with a string keys.

432
00:26:49.920 --> 00:26:52.710
Well, the view data extensions
makes it where you can

433
00:26:52.710 --> 00:26:55.500
use a generic parameter instead
of string keys so that

434
00:26:55.500 --> 00:26:57.570
you have fewer string literals
in your views, in the

435
00:26:57.570 --> 00:27:01.470
controllers. And so little things
like that, just just make

436
00:27:01.490 --> 00:27:04.580
working with the MVC framework,
a little more desirable, but

437
00:27:04.890 --> 00:27:08.080
probably if I were to
pick a most exciting feature,

438
00:27:08.160 --> 00:27:09.750
as you can trip, I
would have to pick the

439
00:27:09.750 --> 00:27:14.970
input builders. So NBC can
trip came up with input

440
00:27:14.970 --> 00:27:21.960
builders before the NBC two
roadmap was, was, was put

441
00:27:21.960 --> 00:27:24.780
out there. And so it
is similar to the MVC

442
00:27:24.780 --> 00:27:29.490
to template has helpers. And
the vision is that you

443
00:27:29.490 --> 00:27:34.530
can describe your view with
the view model and then

444
00:27:34.560 --> 00:27:40.230
using conventions. The views can
be drawn automatically for you.

445
00:27:40.740 --> 00:27:43.650
Now it's interesting because this
sort of goes, it seems

446
00:27:43.650 --> 00:27:46.260
at the surface level to
go against some of the

447
00:27:46.260 --> 00:27:49.050
original marketing of the MVC
framework was you're going to

448
00:27:49.050 --> 00:27:52.470
have absolute, complete control over
your market. And that was,

449
00:27:52.560 --> 00:27:54.390
you know, that was a
Microsoft selling feature. You're going

450
00:27:54.390 --> 00:27:56.460
to have control over your
markup. You're going to be

451
00:27:56.460 --> 00:28:01.650
closer to the HTML, whereas
what we actually didn't didn't

452
00:28:01.650 --> 00:28:04.650
want that per se, we
built build infant builders because

453
00:28:04.650 --> 00:28:06.720
we didn't want to have
to write the HTML. Now

454
00:28:06.870 --> 00:28:09.870
we wanted absolute control over
what it would be, but

455
00:28:09.870 --> 00:28:12.630
we didn't want to write
it all. We wanted it

456
00:28:12.630 --> 00:28:16.080
to be written for us
because HTML is kind of

457
00:28:16.140 --> 00:28:19.070
low level it's repetitive. Yeah.
Wouldn't you say that input

458
00:28:19.070 --> 00:28:22.310
builders were an attempt to
keep things dry, right? Don't

459
00:28:22.310 --> 00:28:25.880
repeat yourself. Yes. Yes. Perhaps
we're going to have, we're

460
00:28:25.880 --> 00:28:28.790
going to have tons of
input type equals text all

461
00:28:28.790 --> 00:28:31.880
over the application. How can
I have input type equals

462
00:28:31.880 --> 00:28:35.420
text only specified once in
the code that I contribute

463
00:28:35.450 --> 00:28:40.070
to my version control system,
that's essentially the problem. So

464
00:28:40.370 --> 00:28:45.020
employee builders is a runtime
code generator for HTML and

465
00:28:45.560 --> 00:28:50.630
it's, it's very similar to
web forms controls. When you

466
00:28:50.630 --> 00:28:52.970
say the goal is for
it to decide, to write

467
00:28:52.970 --> 00:28:58.160
HTML, but web forms controls
don't really have a good

468
00:28:58.190 --> 00:29:01.430
convention model where you can
say, every time I see

469
00:29:01.430 --> 00:29:03.950
this, I want you to
choose ASP colon text box.

470
00:29:04.010 --> 00:29:05.900
For every time you see
this, I want you to

471
00:29:06.080 --> 00:29:09.440
choose ASP colon dropdown. That's
what the input builders do.

472
00:29:09.440 --> 00:29:12.310
If we see a, we,
if we see an email

473
00:29:12.320 --> 00:29:15.530
them or a type that
we know to be enumerated

474
00:29:15.530 --> 00:29:19.190
in our application, we can
create a simple convention class

475
00:29:19.190 --> 00:29:22.580
that says evaluate the property.
When you see it to

476
00:29:22.580 --> 00:29:28.340
be this use, use our
dropdown builder, which uses HTML

477
00:29:28.370 --> 00:29:32.690
dot dropdown list. And then
it passes in the select

478
00:29:32.690 --> 00:29:35.540
list and it can, you
know, put together the list

479
00:29:35.540 --> 00:29:38.660
from the enumeration, or if
it's lookup data in the

480
00:29:38.660 --> 00:29:42.070
database, that'll go and grab
that automatically. And any time

481
00:29:42.280 --> 00:29:45.070
the view model is a
particular type that we know

482
00:29:45.070 --> 00:29:49.600
to be enumerated. We automatically
get the dropdown populated with

483
00:29:49.600 --> 00:29:52.060
the right pieces and same
goes with lots of other

484
00:29:52.060 --> 00:29:55.290
types of, So how is
that different from the display

485
00:29:55.290 --> 00:29:58.260
for an editor for templates
and NBC two there's a

486
00:29:58.260 --> 00:30:02.520
complimentary or is it just
another option? Good question. Good

487
00:30:02.520 --> 00:30:06.150
question. And, and I don't
know this for sure, but

488
00:30:06.180 --> 00:30:11.280
the input builders sufficiently preceded
the roadmap for NBC two,

489
00:30:11.370 --> 00:30:13.830
two that we, we hope
some of the inspiration from

490
00:30:13.830 --> 00:30:18.090
it, you know, made it
in. And NBC contribute has

491
00:30:18.090 --> 00:30:23.460
been refactored. I E code
deleted since NBC two has

492
00:30:23.460 --> 00:30:25.890
come out with the template
as helpers, because there was

493
00:30:25.890 --> 00:30:30.450
some overlap for instance, investigating
the view model to decide

494
00:30:30.450 --> 00:30:35.910
what to do at the
highest level, you know, HTML

495
00:30:35.910 --> 00:30:40.500
dot form for model just
enumerates every property in your,

496
00:30:41.240 --> 00:30:44.400
your model, and then spit
them all out. That mechanism

497
00:30:44.400 --> 00:30:48.330
is the same. I'm using
the Dana data annotations. That

498
00:30:48.330 --> 00:30:52.260
was something we were factor
too. But the piece that

499
00:30:52.620 --> 00:30:57.980
is really important is the
conventions structure. There's there is

500
00:30:57.990 --> 00:31:00.480
no way in template and
helpers that I can say

501
00:31:01.890 --> 00:31:06.510
for this application, if you
have, let's just say, if

502
00:31:06.510 --> 00:31:12.390
the property ends with, if
the property ends with a

503
00:31:12.420 --> 00:31:18.240
password suffix like, like initial
password and then confirm password,

504
00:31:18.480 --> 00:31:21.300
let's say that those are
two properties with a template

505
00:31:21.300 --> 00:31:24.210
as helpers. It would, you
know, you could, you could

506
00:31:24.210 --> 00:31:29.400
annotate it with a attribute
that, you know, says, Hey,

507
00:31:29.400 --> 00:31:32.760
use a password, but it's
everywhere in my side. I

508
00:31:32.760 --> 00:31:34.560
said, you know, I just
want this convention that says,

509
00:31:35.250 --> 00:31:37.410
if the property name ends
with password, I want you

510
00:31:37.410 --> 00:31:41.430
to use HTML dot password
then instantly for the entire

511
00:31:41.430 --> 00:31:44.580
site. That's the way it
is. So it's site level

512
00:31:44.580 --> 00:31:48.360
conventions. Whereas the template helpers
really focus on the individual

513
00:31:48.360 --> 00:31:55.530
view and adding conventions on
top of that really enable

514
00:31:57.630 --> 00:32:01.140
removing a lot of duplication
that you would place as

515
00:32:01.140 --> 00:32:06.330
attributes in your view model.
Okay. Okay. It is, it

516
00:32:06.330 --> 00:32:10.140
is an opinionated framework. Isn't
it? MVC country. I mean

517
00:32:10.140 --> 00:32:12.270
that in a positive way,
right? I mean, it, it,

518
00:32:12.270 --> 00:32:15.450
it, it sets, it puts
some opinions in the ground,

519
00:32:15.450 --> 00:32:16.760
but just stake in the
ground and said, this is,

520
00:32:16.760 --> 00:32:19.950
this is what we believe
in It does. And I

521
00:32:19.950 --> 00:32:22.440
think that is a positive,
regardless of what the opinion

522
00:32:22.440 --> 00:32:26.730
is. And there's a sufficiently
large number of libraries, both

523
00:32:26.730 --> 00:32:30.330
commercial and open source that,
you know, there's, there's enough

524
00:32:30.330 --> 00:32:32.640
opinions. You can choose the
one that you agree with,

525
00:32:33.810 --> 00:32:35.730
but the one thing that
NBC country have also, it

526
00:32:35.730 --> 00:32:38.670
doesn't lock you in it
doesn't lock you into using

527
00:32:38.670 --> 00:32:41.120
all the, in other words,
you can pick and choose

528
00:32:41.120 --> 00:32:43.550
the features you want to
use. And they're sufficiently standalone.

529
00:32:43.550 --> 00:32:47.120
You don't say, Oh, are
you building an MVC application?

530
00:32:47.180 --> 00:32:50.900
Or are you building an
NBC plus NBC can trip.

531
00:32:50.930 --> 00:32:53.480
You know, it's not an
all or none proposition. So

532
00:32:53.810 --> 00:32:55.880
if you just, if for
instance, if you don't like

533
00:32:55.880 --> 00:32:57.920
the input builders, you can
still use a lot of

534
00:32:57.920 --> 00:33:01.190
the other features without input
builders. But before we move

535
00:33:01.190 --> 00:33:05.180
on to another topic, the
other big, big win of

536
00:33:05.180 --> 00:33:09.620
the input builders is that
it leverages partial based master

537
00:33:09.620 --> 00:33:16.940
pages. If you think about
it, the view engine mechanism

538
00:33:17.670 --> 00:33:22.070
of the MVC framework does
not care if the partial

539
00:33:22.580 --> 00:33:26.660
is a view page or
a view user control, right?

540
00:33:27.440 --> 00:33:29.600
View user controls and ASP.
And I do not have

541
00:33:29.600 --> 00:33:32.900
the capability of having a
master page view pages, however,

542
00:33:32.930 --> 00:33:39.380
do, and view master pagers
can be infinitely nested. So

543
00:33:39.620 --> 00:33:44.720
what we've done is, is
go with the convention that

544
00:33:44.900 --> 00:33:49.760
every view, excuse me, every,
every partial view that is

545
00:33:49.760 --> 00:33:53.240
the implementation of an input
and input builder. For instance,

546
00:33:53.960 --> 00:33:57.200
there is a partial for
the text box. There is

547
00:33:57.200 --> 00:34:00.680
a partial for a dropdown
list. There is a partial

548
00:34:00.680 --> 00:34:04.970
for checkbox list. Now, inside
those partials, you know, it,

549
00:34:04.970 --> 00:34:07.760
doesn't delegate back to the
MVC framework and use, you

550
00:34:07.760 --> 00:34:10.430
know, display for, I mean,
you know, display for an

551
00:34:10.430 --> 00:34:12.230
editor for, and all the
built in stuff is just

552
00:34:12.230 --> 00:34:15.050
layers onto the built-in stuff.
But the input builders is

553
00:34:15.050 --> 00:34:19.130
partial based partial view based,
and all the parcels are

554
00:34:19.160 --> 00:34:23.330
implemented as view pages. And
so each of those view

555
00:34:23.330 --> 00:34:28.340
pages can have a master
page. That's also convention based

556
00:34:28.700 --> 00:34:30.710
so that you, so that
I can say, you know

557
00:34:30.710 --> 00:34:36.230
what, in this application, I
want a, I want my

558
00:34:36.230 --> 00:34:38.750
label and then I want
a colon. And then I

559
00:34:38.750 --> 00:34:42.290
want the input element. And
then I want the validation.

560
00:34:42.560 --> 00:34:45.770
And then I want an
example, if there is an

561
00:34:45.770 --> 00:34:48.680
example and I can lay
out how I want the

562
00:34:48.680 --> 00:34:51.050
field to be. Now, the
template is helpers right off

563
00:34:51.050 --> 00:34:53.960
the bat, sort of say,
okay, we're gonna, you know,

564
00:34:53.960 --> 00:34:57.620
we're going to have just
a label or just a

565
00:34:57.620 --> 00:35:02.420
couple of things. Your application
can override the master page

566
00:35:02.450 --> 00:35:05.120
because all we're doing is
searching for a View-Master page

567
00:35:05.150 --> 00:35:07.820
by name. So you can
put in a View-Master page

568
00:35:07.850 --> 00:35:10.400
by that name in your
shared folder and boom, you've

569
00:35:10.400 --> 00:35:15.260
overwritten the default. And you
can add certain elements. If

570
00:35:15.260 --> 00:35:18.590
you wanted to add a
little image with a question

571
00:35:18.590 --> 00:35:21.530
Mark, for extra help on
each individual field, you would

572
00:35:21.530 --> 00:35:26.070
add that in the field
level master page. And, and

573
00:35:26.220 --> 00:35:29.150
that would be applied to
every field throughout the entire

574
00:35:29.150 --> 00:35:33.440
site, because every partial is
a page and the pages

575
00:35:33.440 --> 00:35:38.370
have the message. That's pretty
cool stuff You guys are

576
00:35:38.370 --> 00:35:45.170
doing. It really did eliminate
a large set of duplicated

577
00:35:45.170 --> 00:35:50.090
markets that would otherwise be
in the views because XML

578
00:35:50.540 --> 00:35:55.130
and HTML are not object
oriented. C sharp is Keeping

579
00:35:55.130 --> 00:35:58.790
it dry with MVC can
trim. So you've got a

580
00:35:58.790 --> 00:36:02.390
book now called asp.net MVC
in action, and you can

581
00:36:02.810 --> 00:36:04.850
get all the links to
stuff like that at Jeffery's

582
00:36:04.850 --> 00:36:10.610
blog@jeffreypalermo.com. That book is fromManning@manning.com
slash Palermo. We'll put all

583
00:36:10.610 --> 00:36:13.520
those links in the show
notes. Thanks a lot for

584
00:36:13.520 --> 00:36:17.750
sitting down and chatting today.
Jeffrey, this has been another

585
00:36:17.750 --> 00:36:20.300
episode of Hanselminutes and we'll
see you again next week.

