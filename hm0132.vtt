WEBVTT FILE

1
00:00:12.030 --> 00:00:16.770
From Hanselman it's dot com.
It's Hansel minutes, a weekly

2
00:00:16.770 --> 00:00:21.060
discussion with web developer and
technologist Scott Hanselman hosted by

3
00:00:21.060 --> 00:00:26.670
Carl Franklin. This is Lawrence Ryan announcing
show number one 32 recorded

4
00:00:26.670 --> 00:00:32.190
live Thursday, October 2nd, 2008. Support for
Hanselman it's just provided by

5
00:00:32.340 --> 00:00:36.450
Tellerik red controls. The most
comprehensive suite of components for

6
00:00:36.450 --> 00:00:45.660
windows forms and asp.net web
applications. online@wwwdottelerik.com. Support is also

7
00:00:45.660 --> 00:00:50.940
provided by.net developers journal the
world's leading.net developer magazine online

8
00:00:50.940 --> 00:00:56.880
at www dot <inaudible> dot
com. In this episode, Scott

9
00:00:56.880 --> 00:01:02.150
discusses subsonic with Rob Connery.
Hi, this is Scott Hanselman

10
00:01:02.150 --> 00:01:04.310
and this is another episode
of Hansel minutes and I'm

11
00:01:04.310 --> 00:01:07.430
sitting down right now with
Rob Connery, my partner in

12
00:01:07.430 --> 00:01:10.970
crime at Microsoft, a program
manager. What, what group do

13
00:01:10.970 --> 00:01:12.530
you work in? Rob? Are
you on the asp.net group?

14
00:01:13.190 --> 00:01:15.710
No, I'm not in the
asp.net group. I actually work

15
00:01:15.740 --> 00:01:19.820
with Sean Burke in the silver
light tooling group. Believe it

16
00:01:19.820 --> 00:01:24.620
or not tooling. Yeah, but
you're kind of best known

17
00:01:24.620 --> 00:01:27.470
for building a subsonic. And
then most recently been doing

18
00:01:27.470 --> 00:01:30.410
some really cool stuff with
the MVC storefront. How has

19
00:01:30.410 --> 00:01:33.890
that Silverlight doing well? Interestingly,
we, when I started, I

20
00:01:33.890 --> 00:01:36.500
started off in the agility
group and it's kind of

21
00:01:36.500 --> 00:01:39.350
an internal group to Microsoft.
And Sean was the director

22
00:01:39.350 --> 00:01:41.930
of that group. They were
the guys that did the

23
00:01:41.930 --> 00:01:45.020
Ajax control toolkit. And so
the best way that we

24
00:01:45.020 --> 00:01:46.880
used to look at it
was, you know, there's sort

25
00:01:46.880 --> 00:01:49.310
of a little pack of
ninjas that could work outside

26
00:01:49.310 --> 00:01:52.280
of some of the software
strictures within Microsoft. And they

27
00:01:52.280 --> 00:01:54.560
could do things like work
on code, flex projects and

28
00:01:54.560 --> 00:01:57.260
so on. So this stuff
that I was doing for

29
00:01:57.260 --> 00:02:01.430
NBC initially, which was the
HTML control tool kit sort

30
00:02:01.430 --> 00:02:04.010
of outside or out of
band, as they say internally,

31
00:02:04.220 --> 00:02:06.380
I'm not really part of
the core. Stuff's the, they

32
00:02:06.380 --> 00:02:08.000
loved it to Sean's group
and I got to work

33
00:02:08.000 --> 00:02:10.490
on it. That's how, that's
how that all started. Oh,

34
00:02:10.490 --> 00:02:14.150
so you were Sean, Burke's
private Ninja, Sean. Burke's private.

35
00:02:14.180 --> 00:02:17.000
Exactly. And I am on
fire. Thank you very much.

36
00:02:17.870 --> 00:02:20.900
Very cool. Okay. And then,
and you've been doing the

37
00:02:20.900 --> 00:02:22.970
NBC storefront. How many of
those screencasts have you done

38
00:02:22.970 --> 00:02:26.480
so far? I am recording
number 22 right now. Believe

39
00:02:26.480 --> 00:02:30.620
it or not. That's you
shamed me. You've shamed me

40
00:02:30.620 --> 00:02:34.160
with your, with your talented
does. Screencasts see all of

41
00:02:34.160 --> 00:02:40.280
those, that asp.net/mvc if I
understand correctly. That's right. Yes.

42
00:02:41.090 --> 00:02:43.160
So you've been building this
storefront. When is it going

43
00:02:43.160 --> 00:02:46.130
to be done? You know,
that's a good question. I

44
00:02:46.130 --> 00:02:49.730
get asked that question a
lot in internally. And my

45
00:02:49.730 --> 00:02:53.600
answer is, I don't really
know. I think the initial

46
00:02:53.600 --> 00:02:55.190
rev was going to be
done here in the next

47
00:02:55.190 --> 00:02:58.370
month. And, but I know
there's going to be things

48
00:02:58.370 --> 00:03:00.160
I'm going to need to
add tweak and change to

49
00:03:00.160 --> 00:03:03.400
it, but hopefully the initial
bits will be done in

50
00:03:03.400 --> 00:03:05.850
a month or so I
think. Okay. Now, what do

51
00:03:05.850 --> 00:03:07.560
you, what do you use
for the, for the data

52
00:03:07.560 --> 00:03:10.160
access layer? Cause you're known
for subsonic, which is a

53
00:03:10.260 --> 00:03:13.770
data access layer generator. What
do you, what are you

54
00:03:13.770 --> 00:03:17.040
using for the storefront? Well,
interestingly, I'm using linked to

55
00:03:17.040 --> 00:03:20.580
SQL the goal of the
storefront is to be lightweight,

56
00:03:20.730 --> 00:03:24.780
reusable, expandable. And so, you
know, I had to kind

57
00:03:24.780 --> 00:03:27.270
of go with something that
people are familiar with and

58
00:03:27.630 --> 00:03:29.940
can use. And, you know,
subsonic is, it's got a

59
00:03:29.940 --> 00:03:33.000
decent following, but not that
many people in ASP world

60
00:03:33.000 --> 00:03:35.040
use it. So I had
to go with something that

61
00:03:35.040 --> 00:03:39.000
people were immediately familiar with.
In addition, subsonic, as of

62
00:03:39.000 --> 00:03:42.420
now doesn't do any of
the eye queryable stuff. So

63
00:03:42.750 --> 00:03:45.060
I had to go with
something cause my repository demands,

64
00:03:45.060 --> 00:03:46.770
I queryable. So I had
to go with something that

65
00:03:46.770 --> 00:03:50.010
did that. Now this is
interesting. So you're also working

66
00:03:50.010 --> 00:03:52.170
on patterns. You're thinking about
patterns when you're doing this,

67
00:03:52.170 --> 00:03:55.710
this is an educational experience,
not just for the public,

68
00:03:55.710 --> 00:03:58.020
but for yourself as well.
What is this eye repository

69
00:03:58.020 --> 00:04:00.390
pattern that you've kind of
you and Phil and some

70
00:04:00.390 --> 00:04:02.270
other folks have worked out.
I know that there's a

71
00:04:02.280 --> 00:04:05.070
common repository pattern, but you
guys have a specific one

72
00:04:05.070 --> 00:04:07.980
for link. Yeah. It was
an interesting thing that came

73
00:04:07.980 --> 00:04:10.500
about, you know, and we,
when we started doing the

74
00:04:10.500 --> 00:04:12.510
storefront, I was interviewing a
bunch of guys, you know,

75
00:04:12.510 --> 00:04:14.220
I didn't want to make
any mistakes, so to speak.

76
00:04:14.220 --> 00:04:16.290
And I wanted to kind
of please the police, the

77
00:04:16.290 --> 00:04:18.360
crowd that used MVC the
most. So I talked to

78
00:04:18.360 --> 00:04:20.760
Steve Harmon and I and
D Raheen and a couple

79
00:04:20.760 --> 00:04:23.070
of things that came out
of it was the idea

80
00:04:23.070 --> 00:04:29.010
of using I queryable as
the repository return type. And

81
00:04:29.310 --> 00:04:32.100
initially it was like, well,
that sounds interesting. You know,

82
00:04:32.100 --> 00:04:35.670
we'll do some late CQL
execution here, but what ended

83
00:04:35.670 --> 00:04:37.680
up happening is that, you
know, since you can build

84
00:04:37.680 --> 00:04:39.960
your queries on top of
an eye queryable later, in

85
00:04:39.960 --> 00:04:43.200
other words, keep building this
expression out. What ended up

86
00:04:43.200 --> 00:04:46.590
happening is we built a
really lean repository API. In

87
00:04:46.590 --> 00:04:49.620
other words, in the typical
repository pattern, you have a

88
00:04:49.620 --> 00:04:53.070
get by kind of a
get by problem. In other

89
00:04:53.070 --> 00:04:55.080
words, your API bleeds and
bleeds and bleeds and gets

90
00:04:55.080 --> 00:04:57.150
bigger and bigger and bigger.
As you need more functionality

91
00:04:57.150 --> 00:05:00.690
from your database. What you
can do with an eye

92
00:05:00.690 --> 00:05:04.050
queryable repository is you can
have, let's say five core

93
00:05:04.290 --> 00:05:08.250
returns and maybe one saved
method and you might have

94
00:05:08.250 --> 00:05:10.410
just something like get products.
And then you, what you

95
00:05:10.410 --> 00:05:13.020
can do is you can
push the filtration up one

96
00:05:13.020 --> 00:05:15.420
level into say business logic.
And then you can say,

97
00:05:15.420 --> 00:05:19.080
get products, dash where product
ID equals, blah, blah, blah.

98
00:05:19.530 --> 00:05:22.080
And so it was a
very fascinating turn of a

99
00:05:22.590 --> 00:05:24.330
turn of a pattern there.
I got, I got a

100
00:05:24.330 --> 00:05:26.430
little bit of backlash to
it. People didn't like me

101
00:05:26.670 --> 00:05:30.300
moving their repository, cheese. And
they were like, this is

102
00:05:30.300 --> 00:05:32.760
not what Fowler says to
do. And so, you know,

103
00:05:32.760 --> 00:05:35.020
it was good. It was
a good interchange, but as

104
00:05:35.020 --> 00:05:36.600
people have been using it,
they really like it. And

105
00:05:36.600 --> 00:05:39.360
I have to say, I
really enjoy the simplicity of

106
00:05:39.360 --> 00:05:43.080
it all. And do you
think that things have calmed

107
00:05:43.080 --> 00:05:44.340
down and people think it's
a good thing? Or are

108
00:05:44.340 --> 00:05:47.760
they still, you still got
enemies? No, I think the

109
00:05:47.760 --> 00:05:49.680
more people that I wouldn't
say they're enemies, they're just

110
00:05:49.680 --> 00:05:52.470
saying, you know, the pattern
police, right? They were just

111
00:05:52.470 --> 00:05:54.480
saying this isn't, this isn't
what Valerie says to do.

112
00:05:54.480 --> 00:05:56.820
And it was a good
point because they, what they

113
00:05:56.820 --> 00:05:59.450
mostly concerned about was I
was calling it the repository

114
00:05:59.450 --> 00:06:04.060
pattern in what you're saying.
Yeah. Linked to SQL grub,

115
00:06:04.060 --> 00:06:08.440
Connery repository pattern, as told
to I repository pattern. Has

116
00:06:08.440 --> 00:06:11.890
anyone asked Martin when he
thinks, no, not yet. See

117
00:06:11.890 --> 00:06:13.840
how I just said Martin.
Like I like we hang

118
00:06:13.840 --> 00:06:18.280
out all the time. Why
name dropper? I heard that

119
00:06:18.280 --> 00:06:23.080
about you. Me and Martin
hanging out at Chipotle. Sorry.

120
00:06:23.080 --> 00:06:27.700
It's taco taco time with
Martin and yeah. Anyway, I

121
00:06:27.700 --> 00:06:30.760
hear handsome, handsome Hansel minutes.
Next Hansel minutes. We'll be

122
00:06:30.760 --> 00:06:32.290
talk with time with Martin.
I think that's what the

123
00:06:32.290 --> 00:06:35.040
title should be Taco time
with Martin. I think that

124
00:06:35.040 --> 00:06:36.490
I'll call him and I
may just do that just

125
00:06:36.490 --> 00:06:39.370
to make a point. Okay.
So why didn't you use

126
00:06:39.370 --> 00:06:40.810
subsonic and are you going
to move it over to

127
00:06:40.810 --> 00:06:43.750
subside? Well, the main reason
I didn't use subsonic is

128
00:06:43.750 --> 00:06:47.500
because I am still working
on version 3.0, which is

129
00:06:47.500 --> 00:06:53.320
implementing queryable and that is
not easy stuff. And it

130
00:06:53.440 --> 00:06:56.410
requires that I rejigger a
lot of the internals of

131
00:06:56.410 --> 00:07:00.520
the way subsonic does things
Implement Ikea. Well, you're going

132
00:07:00.520 --> 00:07:02.350
to become a, you're going
to be subsonic link pro.

133
00:07:03.040 --> 00:07:06.070
Exactly. Yeah. So Yeah, I've
heard from my end day

134
00:07:06.080 --> 00:07:09.880
that that is nontrivial. It
is exactly. Non-trivial, it's an

135
00:07:09.880 --> 00:07:13.600
amazingly complex pattern. I mean
it complex in a good

136
00:07:13.600 --> 00:07:15.430
way. It's not, I'm not
trying to say anything negative.

137
00:07:15.430 --> 00:07:17.590
It's just that right. Not
overly complex. It's just, it

138
00:07:17.590 --> 00:07:19.360
does a lot. So it's
where you have to take

139
00:07:19.360 --> 00:07:21.580
that expression tree and translate
it into your own kind

140
00:07:21.580 --> 00:07:23.560
of an expression tree. But
when you start, you know,

141
00:07:23.560 --> 00:07:25.720
getting basic stuff to work,
but once you start getting

142
00:07:25.720 --> 00:07:29.710
a projection, then suddenly things
become normal. Exactly. Right. Yep.

143
00:07:30.730 --> 00:07:34.390
Interesting. Interesting. So here, I'm
going to play the role

144
00:07:34.390 --> 00:07:37.480
of the guy that doesn't
know anything about subsonic. Sure.

145
00:07:37.510 --> 00:07:40.600
And let's, let's walk through
what this is like. So

146
00:07:40.990 --> 00:07:44.440
I'm a Joe developer or
Scott developer at this point,

147
00:07:44.440 --> 00:07:47.350
I guess all developers named
Scott at this point. And

148
00:07:47.800 --> 00:07:50.620
I've got a domain which
is true. I've got a

149
00:07:50.650 --> 00:07:53.830
nerd dinner.com and I want
to make it a place

150
00:07:53.830 --> 00:07:57.070
for people to register in
your dinners. And I've decided,

151
00:07:57.070 --> 00:07:59.410
let's say that I want
to use Microsoft open source

152
00:07:59.410 --> 00:08:01.360
software as much as I
can. I'm going to use

153
00:08:01.750 --> 00:08:06.130
NVC and I'll use, I
want to use subsonic. So

154
00:08:06.130 --> 00:08:09.300
I sit down, I get
my system and I, I,

155
00:08:09.520 --> 00:08:11.050
what do I do? How
do I, what do I

156
00:08:11.050 --> 00:08:13.330
start when I want to
do this? Well, you'd head

157
00:08:13.330 --> 00:08:15.760
over to COVID Plex, download
and install the latest, which

158
00:08:15.760 --> 00:08:24.700
is 2.1 Subsonic project.com At
code plex.com/subsonic. Yeah. And then

159
00:08:24.700 --> 00:08:29.140
we have support@subsonicproject.com. That's right.
Yep. Okay. Okay. Should I

160
00:08:29.140 --> 00:08:32.500
get subsonic 2.1? And so
what does it do to

161
00:08:32.500 --> 00:08:35.110
my system? Should I be
afraid of it? No, it

162
00:08:35.110 --> 00:08:37.840
doesn't. Well, we have an
installer. So what it does,

163
00:08:37.840 --> 00:08:40.210
what a typical installer does,
which is, you know, puts

164
00:08:40.210 --> 00:08:43.690
it in the program register.
No, no gap, no gap

165
00:08:43.690 --> 00:08:46.930
at all. Oh yeah, yeah.
No gas. So nothing, nothing

166
00:08:46.930 --> 00:08:49.510
in terms of a hardcore.net
stuff. This is all just,

167
00:08:49.510 --> 00:08:52.210
you know, when you typically
install like a program using

168
00:08:52.210 --> 00:08:54.820
an MSI windows installer, it
registers it somewhere. And then

169
00:08:54.930 --> 00:08:57.660
in the registry ether, so
you can uninstall it as

170
00:08:57.660 --> 00:09:01.320
well. So in your program
folders, a program's files folder,

171
00:09:01.320 --> 00:09:03.270
you'll see a subsonic folder
in there and you'll have

172
00:09:03.270 --> 00:09:06.510
all the bits, including our
assemblies and also our co-generation

173
00:09:06.510 --> 00:09:10.050
templates. But that's neither here
nor there to install it

174
00:09:10.050 --> 00:09:13.050
into your project. There are
a couple of, a couple

175
00:09:13.050 --> 00:09:14.850
of settings need to do
on the web config. And

176
00:09:14.850 --> 00:09:17.310
if you go to subsonic
project.com right there on the

177
00:09:17.310 --> 00:09:20.070
front is watch this video.
It's all of six minutes.

178
00:09:20.070 --> 00:09:23.370
And it's me slobbering into
a microphone telling you and

179
00:09:23.370 --> 00:09:27.360
showing you by my typical
webcast ways, how to set

180
00:09:27.360 --> 00:09:31.230
up subsonic in your project.
Okay. And it uses the

181
00:09:31.230 --> 00:09:33.300
connectors. Do you install admins
and do you mess with

182
00:09:33.300 --> 00:09:36.960
visual studio in some way?
No. No. Initially when we

183
00:09:36.960 --> 00:09:39.060
were, when we came out
with subsonic a while ago,

184
00:09:39.090 --> 00:09:42.900
we use the build provider
that's specific to a website

185
00:09:42.990 --> 00:09:45.750
versus Lynette web application project.
And I'm going to assume

186
00:09:45.750 --> 00:09:48.630
we're going to use, we're
using MVC for nerd dinner,

187
00:09:48.630 --> 00:09:51.030
right? So that is a
hybrid of kind of a

188
00:09:51.030 --> 00:09:54.030
web application project, a long
and short of it is

189
00:09:54.030 --> 00:09:57.210
you can't use a build
provider. What we did before

190
00:09:57.210 --> 00:09:59.700
was we used the build
provider to actually generate code

191
00:10:00.210 --> 00:10:02.910
in, like I used to
say in memory, but it's

192
00:10:02.910 --> 00:10:05.040
more like in the temporary
ASP net folders, but you

193
00:10:05.040 --> 00:10:07.830
had access to the code
that was generated. It didn't

194
00:10:07.830 --> 00:10:10.620
create any files in your
project. It was just there.

195
00:10:11.670 --> 00:10:14.520
And so that's, that was
the original appeal of it.

196
00:10:14.520 --> 00:10:15.810
And you didn't have to
manage it and you didn't

197
00:10:15.810 --> 00:10:17.790
have to do anything to
build provider digital for you.

198
00:10:18.660 --> 00:10:20.930
Okay. So at that, in
that case, in that example,

199
00:10:20.950 --> 00:10:25.770
subsonic is a bill provider
and code generator exactly. For

200
00:10:25.770 --> 00:10:30.180
dolls, for data access layer.
Exactly. But the Dalit generates

201
00:10:30.180 --> 00:10:32.790
isn't, isn't a generic Dal,
it's its own Dallas, its

202
00:10:32.790 --> 00:10:37.350
own style. You don't generate
and hibernate stuff. You generate

203
00:10:37.350 --> 00:10:39.990
subsonic stuff. Yeah. We use,
you know, we use kind

204
00:10:39.990 --> 00:10:42.540
of the lightweight, I call
it ORM light where, you

205
00:10:42.540 --> 00:10:44.790
know, you, you kind of
project the database as your

206
00:10:44.790 --> 00:10:47.580
domain or model back into
the application. And he worked

207
00:10:47.580 --> 00:10:51.360
from that point on and
we used active record the

208
00:10:51.360 --> 00:10:55.800
active record pattern simply because
it was easiest. And which

209
00:10:56.040 --> 00:10:57.720
kind of winds me back
to the whole focus and

210
00:10:57.720 --> 00:11:00.540
goal of subsonic, which was
to kind of take the

211
00:11:00.540 --> 00:11:03.210
80% approach, which is, you
know, 80% of the projects

212
00:11:03.210 --> 00:11:07.470
out there are lightweight eat
just really quick implementations, probably

213
00:11:07.470 --> 00:11:09.900
don't need to use what
I'll call a heavyweight pattern

214
00:11:09.900 --> 00:11:14.010
or enterprise patterns. They could
be prototypes. You know, Aaron Jensen

215
00:11:14.010 --> 00:11:15.780
told me once he said,
I thought subsonic was just

216
00:11:15.780 --> 00:11:17.990
a toy. I mean, it
doesn't really do much. And

217
00:11:17.990 --> 00:11:19.620
it doesn't really do this
enterprise stuff. And I said,

218
00:11:19.620 --> 00:11:21.930
well, you know, toy is
fine. It's a good way

219
00:11:21.930 --> 00:11:24.270
to put it. But at
the same time, you know,

220
00:11:24.270 --> 00:11:25.890
let's face it. Most of
the applications that people are

221
00:11:25.890 --> 00:11:28.360
working on out there in
the world, aren't designed to

222
00:11:28.410 --> 00:11:30.540
make airplanes. They're, you know,
they're, they're just sort of

223
00:11:30.540 --> 00:11:35.070
these basic applications now, are
you, are you, are you

224
00:11:35.070 --> 00:11:37.920
minimizing subsonic a little bit
there? Are you saying that

225
00:11:37.920 --> 00:11:39.960
you, you would use it
for little stuff and not

226
00:11:39.960 --> 00:11:43.680
for big stuff, you know,
for, in terms of active

227
00:11:43.680 --> 00:11:46.380
record, that would, that would
sort of be the approach

228
00:11:46.380 --> 00:11:48.660
and the reason why I
say that, if so, I'm

229
00:11:48.660 --> 00:11:51.060
have a caveat coming. So
there's two parts of what

230
00:11:51.060 --> 00:11:53.140
I'm about to say. The
first part is if you're

231
00:11:53.140 --> 00:11:55.660
going to use active record,
you know, generally it's kind

232
00:11:55.660 --> 00:11:57.010
of a boom bang kind
of thing. I want to

233
00:11:57.010 --> 00:11:58.240
get this thing done and
want to get it out.

234
00:11:58.240 --> 00:12:00.130
I have some work to
do and there's, this is

235
00:12:00.130 --> 00:12:02.200
not an enterprise app, et
cetera, et cetera, et cetera.

236
00:12:03.280 --> 00:12:05.560
So in that case, yeah,
it's sort of a lightweight,

237
00:12:06.040 --> 00:12:09.100
however, the second part of
that is you can also

238
00:12:09.160 --> 00:12:13.180
absolutely use it in a
higher enterprise pattern. Like the

239
00:12:13.240 --> 00:12:14.920
pattern we just talked about.
If you want to implement

240
00:12:14.920 --> 00:12:17.890
repository with dependency, injection and
all that stuff, you certainly

241
00:12:17.890 --> 00:12:20.590
can. And I have, I
have a blog post on

242
00:12:20.590 --> 00:12:23.860
that and it's on subsonic
project is.com as well, where

243
00:12:23.860 --> 00:12:25.480
I show you how to
just use the query tool

244
00:12:25.480 --> 00:12:29.230
to go retrieve some data
and fill in your model.

245
00:12:29.650 --> 00:12:31.990
And yeah. So you can
definitely do something like that

246
00:12:31.990 --> 00:12:35.640
too. Hi, this is Scott
Hanselman with a word from

247
00:12:35.640 --> 00:12:38.310
our sponsor. Do you know
how to build web 2.0

248
00:12:38.310 --> 00:12:42.090
Ajax applications with web 1.0
components? You really can't. If

249
00:12:42.090 --> 00:12:44.490
you want to do the
next generation web applications you'll

250
00:12:44.490 --> 00:12:47.070
need next generation components. Just
like the ones that our

251
00:12:47.070 --> 00:12:50.010
friends at Telerik have got
their rad controls for ESPN

252
00:12:50.010 --> 00:12:52.860
at Ajax. So a huge
pack of web controls built

253
00:12:52.860 --> 00:12:57.420
on top of asp.net, Ajax
that lab previously impossible performance

254
00:12:57.420 --> 00:13:01.170
interactivity to your next project.
The new controls mirror, the

255
00:13:01.200 --> 00:13:05.610
Ajax API from asp.net. So
development is really straightforward. The

256
00:13:05.610 --> 00:13:07.860
client scripts are shared. So
loading time is not a

257
00:13:07.860 --> 00:13:10.260
problem. If you just set
a couple of properties and

258
00:13:10.260 --> 00:13:12.510
you'll be able to automatically
bind a web services for

259
00:13:12.510 --> 00:13:16.280
a really efficient operation, the
new rad editor from ESPN

260
00:13:16.280 --> 00:13:19.530
and Ajax, Telerik loads up
to four times faster than

261
00:13:19.530 --> 00:13:22.530
before. And the new rad
grid handles thousands of records

262
00:13:22.530 --> 00:13:25.350
and just milliseconds, but as
always, it's best to try

263
00:13:25.350 --> 00:13:28.950
for yourself. So you can
visit <inaudible> dot com slash

264
00:13:29.040 --> 00:13:31.800
ASP, net Ajax, and download
a trial. Thanks a lot.

265
00:13:32.850 --> 00:13:35.250
Now, where do you, where
do you see subsonic fitting

266
00:13:35.250 --> 00:13:39.090
into a world with, you
know, LLB Elgen and Ben

267
00:13:39.090 --> 00:13:42.960
hibernate and all those kinds
of things. Those are more

268
00:13:43.080 --> 00:13:45.240
focused on it being NRM
while yours is more of

269
00:13:45.240 --> 00:13:48.840
a Swiss army knife. Exactly.
It all comes back to,

270
00:13:48.840 --> 00:13:51.660
I have a one sentence
value principle that I've applied

271
00:13:51.660 --> 00:13:53.520
to this project ever since
I started it. And that

272
00:13:53.520 --> 00:13:56.700
is, I want the developer
to go home early. And

273
00:13:56.730 --> 00:13:59.700
I, my opinion has always
been that there's too much

274
00:13:59.730 --> 00:14:02.970
cruft and complication in our
lives. There really is. And

275
00:14:02.970 --> 00:14:05.520
as developers and geeks, we
overcomplicate things. It's just our

276
00:14:05.520 --> 00:14:09.030
nature. And in a lot
of times, it's just doesn't

277
00:14:09.030 --> 00:14:11.220
matter what the things were
we're spinning out on. Just

278
00:14:11.220 --> 00:14:14.070
doesn't matter. You know, and
I'm not trying to minimize

279
00:14:14.070 --> 00:14:17.250
her to say things are
unimportant, but the point being

280
00:14:17.250 --> 00:14:19.680
that the whole goal of
subsonic is to just get

281
00:14:19.680 --> 00:14:23.730
the work done, get you
out the door. So I

282
00:14:23.730 --> 00:14:25.140
forgot the question you just
asked me, cause I was

283
00:14:25.140 --> 00:14:28.290
going off on a tangent.
You're too focused on getting

284
00:14:28.290 --> 00:14:29.940
out the door cause you
live in Hawaii and your

285
00:14:29.940 --> 00:14:34.140
focus is always to leave
work. I know. Yeah, exactly.

286
00:14:34.140 --> 00:14:35.670
Right. It's a beautiful sunny
day. Why am I talking

287
00:14:35.670 --> 00:14:37.890
to you? My question was
where do you see you

288
00:14:38.310 --> 00:14:43.650
as it relates to more,
more formal open source, but

289
00:14:43.650 --> 00:14:48.330
industrial strength, ORM, are you
industrial strength? I don't know

290
00:14:48.330 --> 00:14:51.060
what that means, but people
always have No it's okay.

291
00:14:51.170 --> 00:14:53.750
A good question. Industrial strength
in terms of, can I

292
00:14:53.750 --> 00:14:56.300
scale or can I can
subsonic scale? Can it handle

293
00:14:56.300 --> 00:15:01.010
the load? Of course it
can. In terms of, in

294
00:15:01.010 --> 00:15:04.610
terms of kind of applying
patterns that let's say the

295
00:15:04.610 --> 00:15:07.940
all.net crowd holds dear, maybe
not, maybe it won't, it's

296
00:15:07.940 --> 00:15:11.240
not so good that way.
And hibernate is excellent at

297
00:15:11.240 --> 00:15:14.030
doing the things that <inaudible>
in theory are supposed to

298
00:15:14.030 --> 00:15:17.300
do. You know, for me,
theory is wonderful, but I

299
00:15:17.300 --> 00:15:19.640
don't hold tight to it.
So what I've tried to

300
00:15:19.640 --> 00:15:22.160
do with subsonic is to
make it as absolutely flexible

301
00:15:22.160 --> 00:15:25.190
and sort of hybrid and
just get the job done.

302
00:15:25.370 --> 00:15:26.930
And, and so, you know,
if you need to, I

303
00:15:26.930 --> 00:15:28.730
don't want to say cut
corners, but I have a

304
00:15:28.730 --> 00:15:30.170
thing in there. This is
a quick tangent. I have

305
00:15:30.170 --> 00:15:33.710
a query in there called
an Atwood query and also

306
00:15:33.710 --> 00:15:36.410
called a coding horror query,
which just takes inline CQL

307
00:15:37.130 --> 00:15:40.180
cause you know, Jeff, Jeff
had a rail against That.

308
00:15:40.180 --> 00:15:43.780
You liked command dot Atwood
query. Yeah. You can say

309
00:15:43.790 --> 00:15:46.720
a new, new subsonic dot
Atwood query and then you

310
00:15:46.720 --> 00:15:49.800
have to just send in
straight SQL. That's actually what's

311
00:15:49.810 --> 00:15:53.710
called. Yeah. That's awesome. Well,
yeah, I respect them. I

312
00:15:53.710 --> 00:15:56.200
respect the framework. Just that
much more. Now It's a,

313
00:15:56.200 --> 00:15:57.790
it's a little, a little
Easter egg I threw in

314
00:15:57.790 --> 00:16:01.360
there for Jeff. Has he
ever found it? Hopefully I'm

315
00:16:01.360 --> 00:16:03.370
on it now, but he's
busy doing other things. Oh

316
00:16:03.370 --> 00:16:05.650
yeah. He's a very busy
man. So anyway, that's how

317
00:16:05.650 --> 00:16:08.530
it stacks up against, against
the bigger, the bigger heavyweight

318
00:16:08.530 --> 00:16:10.660
things out there. And you
know, we don't have XML

319
00:16:10.660 --> 00:16:13.270
files. We don't, we don't
have built in the concept

320
00:16:13.300 --> 00:16:16.720
of abstracting out a model
of for you and whatever.

321
00:16:17.200 --> 00:16:19.090
We kind of leave that
to you. Whereas in hibernate

322
00:16:19.090 --> 00:16:20.740
tackles a little bit, bit
of a bigger picture, that

323
00:16:20.740 --> 00:16:22.780
way they have caching, they
have this thing called a

324
00:16:22.780 --> 00:16:26.140
future query, which is really
cool. All these great ideas.

325
00:16:26.200 --> 00:16:27.910
And I, you know, I'm
trying to keep it lightweight

326
00:16:27.910 --> 00:16:31.570
and easy. Okay. So I've
downloaded that. I install it.

327
00:16:31.570 --> 00:16:34.660
You don't screw up my
gack. Do I start at

328
00:16:34.660 --> 00:16:36.250
the database or do I
start writing? What do I

329
00:16:36.250 --> 00:16:39.130
do? I mean, I've got
nerdina.com. I know that there's

330
00:16:39.130 --> 00:16:40.870
going to be nerd dinners.
You know, I know what

331
00:16:40.870 --> 00:16:43.450
am I domain is going
to be, where do I

332
00:16:43.450 --> 00:16:47.050
start With the database and
build out your model in

333
00:16:47.050 --> 00:16:51.370
your database. That's so database
focused. I know I can't.

334
00:16:51.490 --> 00:16:55.240
Yeah, I know it's so
what a year ago? Two

335
00:16:55.240 --> 00:16:57.490
years ago. Okay. But, so
I started the database, so

336
00:16:57.490 --> 00:16:59.140
I have to show, so
it really is table focused.

337
00:16:59.140 --> 00:17:02.360
It's not like rails where
I can, can make a

338
00:17:02.620 --> 00:17:04.780
markup file that describes what
the database looks like. And

339
00:17:04.780 --> 00:17:07.600
you can project it onto
the database. You can share

340
00:17:07.600 --> 00:17:10.060
you can we have migrations
as well. So generate my

341
00:17:10.060 --> 00:17:12.400
database form. It can, yeah,
we can. We have migrations.

342
00:17:13.060 --> 00:17:14.260
So if you want to,
if you want to use

343
00:17:14.260 --> 00:17:17.620
migrations, this is a good
time to introduce the second

344
00:17:17.680 --> 00:17:20.800
aspect of what subsonic has.
We have a, a command

345
00:17:20.800 --> 00:17:22.840
line tool that does a
lot of cogeneration for you.

346
00:17:23.770 --> 00:17:26.500
And so that is also
as part of the installer

347
00:17:26.560 --> 00:17:29.920
and it's called Sonic dot
exe, also known as sub

348
00:17:29.920 --> 00:17:33.160
commander. And so what you
can do is you can

349
00:17:33.160 --> 00:17:36.430
just work directly with the
command line tool and you

350
00:17:36.430 --> 00:17:38.530
can do things like generate
your data access code, and

351
00:17:38.710 --> 00:17:41.800
it puts it right into
your project. You can harness

352
00:17:41.800 --> 00:17:45.340
those calls into a, like
a, an external tool process

353
00:17:45.340 --> 00:17:47.320
inside visual studio, which is
what I urge people to

354
00:17:47.320 --> 00:17:49.980
do. We have all this
in screencast walkthroughs by the

355
00:17:49.980 --> 00:17:52.620
way on our site. And
so yeah, you can do

356
00:17:52.620 --> 00:17:54.960
things like that and to
run migrations, it's one of

357
00:17:54.960 --> 00:17:58.200
those you say, Sonic dot
exe migrate, and then the

358
00:17:58.200 --> 00:18:00.060
name of your table. And
then it spits out the

359
00:18:00.060 --> 00:18:02.160
code that you need sticks,
enter project. And then you

360
00:18:02.160 --> 00:18:05.040
go from there using, you
know, kind of typical thing,

361
00:18:05.040 --> 00:18:08.910
like, you know, a new
table with this name, table

362
00:18:08.910 --> 00:18:10.830
dot add column table that
add column with the type

363
00:18:10.830 --> 00:18:13.320
and so on. And then
you hit migrate Sonic XE

364
00:18:13.320 --> 00:18:15.090
migrate, and then it will
do it. It'll generate your

365
00:18:15.090 --> 00:18:18.410
database. So what, what am
I writing to get my,

366
00:18:18.470 --> 00:18:21.050
if I'm going to have
a dinner, a dinners table,

367
00:18:21.500 --> 00:18:23.360
and I'm writing markup, if
I'm writing C-sharp am I

368
00:18:23.360 --> 00:18:27.800
writing something You writing C
sharp and you would say

369
00:18:27.800 --> 00:18:31.250
using my, yeah, you'd say
using migration M equal to

370
00:18:31.250 --> 00:18:33.920
new migration and then open
and break open brace. I'm

371
00:18:33.920 --> 00:18:35.330
going to do this in
C sharp on the flat

372
00:18:35.360 --> 00:18:37.910
top of my head. Woohoo.
And then you'd say dinner

373
00:18:37.910 --> 00:18:40.460
table, which is, you know,
you'd say table, and then

374
00:18:40.460 --> 00:18:43.190
you give it a name,
dinner equals new table, new

375
00:18:43.190 --> 00:18:45.440
table with, you know, in
quotes, passing the constructor. It's

376
00:18:45.440 --> 00:18:48.860
the name? Describe the whole
table in C sharp. Yes

377
00:18:48.860 --> 00:18:51.890
you can. And the cool
thing is if you forget

378
00:18:51.920 --> 00:18:53.930
to add a primary key,
we add it for you.

379
00:18:54.380 --> 00:18:57.710
You can also add, you
can add our audit columns.

380
00:18:57.710 --> 00:18:59.720
We have four of them,
which is created by created

381
00:18:59.720 --> 00:19:03.590
on modified, by modified on
as well as a timestamp

382
00:19:03.590 --> 00:19:06.770
field. That's added for you
automatically. If you tell it

383
00:19:06.770 --> 00:19:09.560
to you'd say, add subsonic,
state columns, it'll do it.

384
00:19:10.220 --> 00:19:13.430
And then that's it. And
so if, when you're in

385
00:19:13.430 --> 00:19:16.460
your projects and you hit
run, our standard is that

386
00:19:16.460 --> 00:19:19.850
there's a folder in there
called migrations. This our tool

387
00:19:19.850 --> 00:19:22.250
will look for the files
and we'll actually pull the

388
00:19:22.250 --> 00:19:24.680
code in, compile it on
the fly and execute it.

389
00:19:25.190 --> 00:19:27.560
And when the execution goes
off, it turns it into

390
00:19:27.560 --> 00:19:30.230
SQL and shoves it into
the database. And then it

391
00:19:30.260 --> 00:19:32.180
forms your table for you.
Yeah. So I'm thinking I

392
00:19:32.180 --> 00:19:33.770
do all this. Let's say,
let's say that I really

393
00:19:33.770 --> 00:19:35.570
liked domain driven, design everything.
That's a better way to

394
00:19:35.570 --> 00:19:38.030
do it. This is a
kind of a poor man's

395
00:19:38.030 --> 00:19:40.790
domain driven design because I
mean, I am using, I'm

396
00:19:40.790 --> 00:19:43.730
describing it in this case.
My, my DSL, my domain

397
00:19:43.730 --> 00:19:47.420
specific languages happens to be
C-sharp plus subsonic. I described

398
00:19:47.420 --> 00:19:51.650
my migrations. You will, I
run this and you'll go

399
00:19:51.650 --> 00:19:53.930
off to my database and
add the appropriate tables and

400
00:19:54.230 --> 00:19:57.350
create my SQL database. That's
right. Will you make me

401
00:19:57.350 --> 00:19:59.480
do SQL files or do
I do all my migrations

402
00:19:59.510 --> 00:20:02.870
use with your tool? You
can, once the, once the

403
00:20:02.870 --> 00:20:06.620
database is created, we also
have another feature in hub

404
00:20:06.620 --> 00:20:11.180
commander, which will take your
sequel, both your, your structure

405
00:20:11.180 --> 00:20:13.320
and your, or your schema
and your data. And we'll,

406
00:20:13.320 --> 00:20:15.020
I'll put it to a
SQL file. That's a separate

407
00:20:15.020 --> 00:20:19.700
operation. Yes. Sure. Okay. So,
so now I've got my

408
00:20:19.700 --> 00:20:21.900
dinner's table and I've got
my dinner database and I'm

409
00:20:21.900 --> 00:20:25.160
let me use asp.net MVC.
So I go up to

410
00:20:25.190 --> 00:20:29.210
covid.com/asp net. And I get
that. And you know, I

411
00:20:29.210 --> 00:20:32.060
start writing, you know, writing
tests and things. What is

412
00:20:32.060 --> 00:20:34.370
it about subsonic? That's going
to make writing the tests

413
00:20:34.400 --> 00:20:36.260
easy or not easy. Do
I need to get a

414
00:20:36.260 --> 00:20:40.370
mocking framework? No, you don't
need a mock subsonic. In

415
00:20:40.370 --> 00:20:42.050
this case, what I would
urge you to do is

416
00:20:42.050 --> 00:20:44.780
to use a typical repository
pattern, which is very testable

417
00:20:44.780 --> 00:20:48.700
pattern. And then inside your
repository, you can use subs

418
00:20:48.880 --> 00:20:52.420
inside your implementation of your
repository. Let's call it your

419
00:20:52.420 --> 00:20:56.770
SQL dinner repository. You would
use subsonic inside there, but

420
00:20:56.770 --> 00:20:59.890
I would urge you to
mock or stub the repository

421
00:20:59.890 --> 00:21:01.750
for testing. You don't want
to rely on subsonic for

422
00:21:01.750 --> 00:21:04.230
any of this stuff. Does
that make sense? Well, subsonic

423
00:21:04.230 --> 00:21:07.890
create that repository pattern for
me, Not at this time,

424
00:21:07.890 --> 00:21:11.370
but I am working on
something to do just that

425
00:21:11.430 --> 00:21:14.010
actually at the moment. Is
there anything that you want

426
00:21:14.010 --> 00:21:18.600
to announce and give me
an exclusive worldwide? I wish

427
00:21:18.600 --> 00:21:21.360
I could. Let's just say
if I made the announcement,

428
00:21:21.360 --> 00:21:23.130
I'd be quite happy to
make the announcement. I can't

429
00:21:23.130 --> 00:21:25.590
just yet. I have to,
I have to do a

430
00:21:25.590 --> 00:21:27.870
few more things. Okay. But
you are working on something.

431
00:21:27.870 --> 00:21:30.300
So, so that's interesting because
where I was going with

432
00:21:30.300 --> 00:21:32.850
that was seemed like a
very obvious next step. And

433
00:21:32.850 --> 00:21:36.360
you're already doing that. So
it's coming soon. Yes, exactly.

434
00:21:36.360 --> 00:21:39.670
Right. Okay. So I use
the repository pattern and I

435
00:21:39.710 --> 00:21:42.570
suppose I can learn that
pattern. The I queryable style

436
00:21:42.570 --> 00:21:45.720
of the Rob Connery official,
not Martin Fowler. I repository

437
00:21:45.720 --> 00:21:50.490
pattern from looking at your
MVC storefront. Well, in this

438
00:21:50.490 --> 00:21:52.950
case, if we're using subsonic,
we can't do a queryable,

439
00:21:53.330 --> 00:21:55.140
not with 2.1. So what
we would need to do

440
00:21:55.140 --> 00:21:59.700
is just implement your typical
repository pattern, which is as

441
00:21:59.700 --> 00:22:01.740
we need a call to
the repository, to get some

442
00:22:01.740 --> 00:22:04.740
data that has to be
an explicit call. Okay. What

443
00:22:04.740 --> 00:22:06.480
would those return then if
they're not returning, I query,

444
00:22:06.480 --> 00:22:09.090
well, they're just, I list
of stuff. Exactly. Right. I

445
00:22:09.090 --> 00:22:12.600
listed stuff. Okay. And then
I would just because I'm

446
00:22:12.600 --> 00:22:14.640
using the repository pattern I
could fit, pass in, in

447
00:22:14.640 --> 00:22:18.090
memory repositories and return. I
lists of stuff that doesn't

448
00:22:18.090 --> 00:22:20.400
end the database and exactly
what my testing and my

449
00:22:20.400 --> 00:22:24.750
mocking and everything's magical. Yup,
exactly. Right. Minimal mocking. Really?

450
00:22:25.380 --> 00:22:26.970
Yeah. And well, this is
one of the neat things

451
00:22:26.970 --> 00:22:29.490
about subsonic. One of the
features that not many people

452
00:22:29.490 --> 00:22:31.950
know that we have is
that you can create your

453
00:22:31.950 --> 00:22:34.320
own domain objects if you
want, although we do generate

454
00:22:34.320 --> 00:22:37.020
it for you, but you
don't need to have a

455
00:22:37.030 --> 00:22:39.810
generated for you. You can
actually, we have a, I

456
00:22:39.810 --> 00:22:41.190
don't want to call it
a DSL, but it's a

457
00:22:41.190 --> 00:22:45.750
very fluent interface, querying tool.
So you can say new

458
00:22:45.750 --> 00:22:48.330
select dot from, and pass
in the name of the

459
00:22:48.330 --> 00:22:51.240
table in a string, which
has extreme. But if you

460
00:22:51.240 --> 00:22:54.060
don't generate your code, that's
what we have any way,

461
00:22:54.060 --> 00:22:56.700
you'd say select new and
then from dinner. And then

462
00:22:56.700 --> 00:23:01.950
you can say execute as
execute as tight list. And

463
00:23:01.950 --> 00:23:04.740
then you pass in the
type of object you want

464
00:23:04.740 --> 00:23:08.190
returned in a list. So
what subsonic will do is

465
00:23:08.310 --> 00:23:10.440
will, Spelunk your object that
you put in and it

466
00:23:10.440 --> 00:23:13.590
will actually tie the, it
will actually bind it for

467
00:23:13.590 --> 00:23:15.270
you in a list and
kind of do an on

468
00:23:15.270 --> 00:23:19.350
the fly sort of a
translation if you will. So

469
00:23:19.350 --> 00:23:22.560
that that's, that's one way
to, to have subsonic be

470
00:23:22.620 --> 00:23:25.680
a nice data access tool
for you. The benefit there,

471
00:23:25.680 --> 00:23:26.850
because a lot of people
would say, why would I

472
00:23:26.850 --> 00:23:28.740
do that? Instead of you
say a SQL command or

473
00:23:28.740 --> 00:23:30.780
something like that. And the
benefit of doing it that

474
00:23:30.780 --> 00:23:33.930
way is that subsonic will
talk to a lot of

475
00:23:33.930 --> 00:23:39.930
databases, including my SQL SQL
Lite SQL CE Vista. And

476
00:23:41.310 --> 00:23:43.410
you have a city be
thank you. And in Postgres.

477
00:23:43.770 --> 00:23:47.150
So, wow. Yeah. So that's
cool. That's what that's, that's

478
00:23:47.150 --> 00:23:48.290
a lot that sounds like
a lot. That would be

479
00:23:48.290 --> 00:23:51.860
a very complicated test, a
test suite to support all

480
00:23:51.860 --> 00:23:53.900
those databases. I think. So
you're just doing that. You're

481
00:23:53.900 --> 00:23:55.640
just doing that, the ADP
and making sure that the,

482
00:23:55.810 --> 00:23:58.280
the underlying SQL that you
end up generating is, is

483
00:23:58.520 --> 00:24:02.350
very compatible. Or do you
have providers? We have, we

484
00:24:02.350 --> 00:24:05.380
have a provider pattern for
this. And so what kinds

485
00:24:05.430 --> 00:24:06.880
Do you make sure that
you're not going to break

486
00:24:07.210 --> 00:24:10.630
just Postgres in the next
version? Oh man, that's a

487
00:24:10.630 --> 00:24:13.960
good question. We have. Let's
see. So you got to

488
00:24:13.960 --> 00:24:16.420
answer this, right? We have
to use different providers, different

489
00:24:16.420 --> 00:24:20.160
data providers to talk to
different database systems, but they,

490
00:24:20.180 --> 00:24:24.220
that those are not responsible
for doing our SQL generation.

491
00:24:24.250 --> 00:24:27.400
So we'll use, we use
a, an inheritance pattern for

492
00:24:27.400 --> 00:24:29.560
doing that. We have what
we call the ANSI SQL

493
00:24:29.560 --> 00:24:33.430
generator, and then it will
generate according to standards, ANSI

494
00:24:33.430 --> 00:24:35.650
SQL, but every database has
its own version of ANSI

495
00:24:35.650 --> 00:24:39.130
SQL. It's pretty much so
we have, we have, we

496
00:24:39.130 --> 00:24:43.360
have overrides override generators on
top of that, if that

497
00:24:43.360 --> 00:24:45.190
makes any sense. So when
it's one of those things,

498
00:24:45.190 --> 00:24:47.770
where if we find a
problem during regeneration, we can

499
00:24:47.770 --> 00:24:49.960
go in and we can
tweak it with like Oracle,

500
00:24:49.960 --> 00:24:52.060
let's say the Oracle SQL
generator is something we've had

501
00:24:52.060 --> 00:24:54.910
to pay a lot of
attention to stuff like delimiters

502
00:24:54.910 --> 00:24:56.590
and the way hand dates
are handled and so on.

503
00:24:57.370 --> 00:24:59.740
So that's, that's pretty much
how we test it. It's

504
00:24:59.740 --> 00:25:02.860
not easy. It's not easy
at all. Hmm. Well, but

505
00:25:02.860 --> 00:25:05.980
it certainly makes my life
easier as the programmer. Yeah.

506
00:25:06.010 --> 00:25:08.020
Well, you know, it's funny
in a small other tangent,

507
00:25:08.020 --> 00:25:10.540
I had a big, a
big discussion on our forums.

508
00:25:10.540 --> 00:25:12.820
Once one of the users
said, could you please stop

509
00:25:12.850 --> 00:25:15.610
hitting the database so much
with your unit tests? Let

510
00:25:15.610 --> 00:25:17.200
me said, I'd love to,
but unfortunately this is a

511
00:25:17.200 --> 00:25:19.030
data access to all. I
don't really know any other

512
00:25:19.030 --> 00:25:20.620
better way to do it,
to make sure the queries

513
00:25:20.620 --> 00:25:24.040
that are returned are correct.
So I'm sorta stuck. So

514
00:25:24.040 --> 00:25:25.570
if any of your listeners
out there have ideas for

515
00:25:25.570 --> 00:25:27.400
me, I'd love to hear
it. Cause I like, you

516
00:25:27.400 --> 00:25:30.430
know, Oracle in my SQL
and testing SQL. I mean,

517
00:25:30.430 --> 00:25:33.220
sure. I can do string
comparisons, but I dunno, it

518
00:25:33.220 --> 00:25:34.680
doesn't seem to be. Yeah.
That's a good point. What

519
00:25:34.690 --> 00:25:37.420
is, what is correct at
that, at that level? Exactly.

520
00:25:38.350 --> 00:25:41.530
Huh? Okay. So what I'm
that? This is the downside.

521
00:25:41.530 --> 00:25:44.620
What controls, what, what website
controls, what page controls do

522
00:25:44.620 --> 00:25:46.750
you have that are gonna
make my life easier? You

523
00:25:46.750 --> 00:25:48.010
know, of course, I know
that you have some web

524
00:25:48.010 --> 00:25:50.830
form stuff, but I'm using
ASP net MVC in this,

525
00:25:50.890 --> 00:25:54.790
in this experiment For NBC.
There's not much, you know,

526
00:25:55.600 --> 00:25:57.640
the, the thing I'm working
on right now. And it's

527
00:25:57.880 --> 00:25:59.950
kind of, one of the
major reasons I was hired

528
00:25:59.950 --> 00:26:02.980
is to kind of sprinkle
some, some goodness on top

529
00:26:02.980 --> 00:26:05.860
of the framework. And so
that's kind of what I've

530
00:26:05.860 --> 00:26:07.810
been doing over the last
few months, although I haven't

531
00:26:07.810 --> 00:26:09.970
been terribly active in it
and it's mostly because I

532
00:26:09.970 --> 00:26:12.640
want the framework to mature.
Like I can't, I can't,

533
00:26:12.670 --> 00:26:14.890
you know, double up triple
up my work and change

534
00:26:14.920 --> 00:26:18.340
things every time the framework
changes. But unfortunately I don't

535
00:26:18.340 --> 00:26:21.490
have much UI stuff yet.
Well, do any of the

536
00:26:21.490 --> 00:26:23.770
things you do have, like
the dropdown, the quick table,

537
00:26:23.770 --> 00:26:26.920
many, many lists, do any
of those not require post-bac

538
00:26:26.920 --> 00:26:29.110
such that they could be
used in ASP, net MVC?

539
00:26:30.100 --> 00:26:33.040
I, if all of those,
I'm thinking maybe quick table

540
00:26:33.730 --> 00:26:38.860
dropdown requires post-bacc, you know,
cause they're kind of data

541
00:26:38.860 --> 00:26:41.830
bound controls. They flood, they
flex the, the core, the

542
00:26:41.830 --> 00:26:46.200
core control framework, quick table,
I think just output straight

543
00:26:46.200 --> 00:26:48.150
HTML. So that might be
a nice candidate, but I

544
00:26:48.150 --> 00:26:50.520
haven't tried it yet, to
be honest with you. Hmm.

545
00:26:51.090 --> 00:26:54.320
I think that, But if
the database, if the dowel

546
00:26:54.320 --> 00:26:57.860
is pretty clean, there's probably
a, wouldn't it be hard

547
00:26:57.860 --> 00:27:01.430
to make a bunch of
subsonic specific HTML helpers to

548
00:27:01.430 --> 00:27:04.100
make life easier. And certainly
the ones that exist now,

549
00:27:04.220 --> 00:27:07.040
but I'm thinking like larger
ones to spit out why

550
00:27:07.040 --> 00:27:10.940
UI grids and things like
that. Well, yet you just

551
00:27:10.940 --> 00:27:13.490
homed in on exactly the
reason I'm waiting on this

552
00:27:13.490 --> 00:27:15.800
UI stuff. I mean, my
opinion and it's kind of

553
00:27:15.800 --> 00:27:17.450
crazy when I was building
the, when I was making

554
00:27:17.450 --> 00:27:20.000
the builders, I always had
a sanity check where, you

555
00:27:20.000 --> 00:27:22.020
know, I would, I would
look at the code that

556
00:27:22.020 --> 00:27:23.990
I, when I initially was
creating this way long time

557
00:27:23.990 --> 00:27:25.580
ago, I would look at
the code that it took

558
00:27:25.580 --> 00:27:29.360
to output an element. Like
let's say a dropdown and

559
00:27:29.360 --> 00:27:30.980
then I'd weigh it against
the HTML that it took

560
00:27:30.980 --> 00:27:33.380
to write it, you know?
And, and like, you know,

561
00:27:33.380 --> 00:27:36.440
so HTML dot text box
and where you need to

562
00:27:36.440 --> 00:27:38.720
add in some class attributes
was one of the main

563
00:27:38.720 --> 00:27:41.930
culture culprits because it took
more code to use the

564
00:27:41.930 --> 00:27:44.480
framework than it did just
to write, you know, open

565
00:27:44.480 --> 00:27:48.770
brace or excuse me, open,
open thing, input type equals

566
00:27:48.770 --> 00:27:51.200
text, you know, and then
decorate it with some code.

567
00:27:51.200 --> 00:27:53.840
So, you know, that to
me is the sanity check

568
00:27:53.900 --> 00:27:55.880
and it's something that I
need to have a good

569
00:27:55.880 --> 00:27:59.180
grasp on before I do
anything with subsonic, because whatever

570
00:27:59.180 --> 00:28:01.910
I created that basic level
is going to have to

571
00:28:02.000 --> 00:28:03.890
kind of be the core
of what I create later.

572
00:28:03.950 --> 00:28:09.200
You know what I'm saying?
Yeah. So, huh. Okay. So

573
00:28:09.200 --> 00:28:12.470
let me think here At
MVC, we've got our, you

574
00:28:12.470 --> 00:28:14.660
know, we pick our unit
testing platform. We might need

575
00:28:14.660 --> 00:28:16.820
a little mocking here and
there, but the repository pattern

576
00:28:16.820 --> 00:28:20.300
will handle most of that.
I can pick whatever data

577
00:28:20.300 --> 00:28:23.510
has been done, whatever, excuse
me. I can pick whatever

578
00:28:23.510 --> 00:28:27.230
database I want because of
the flexibility of subsonic. Now

579
00:28:27.950 --> 00:28:31.070
I would use subsonic over
an hibernate or over LVL

580
00:28:31.070 --> 00:28:36.620
gen Y Well, well The
practicality of it, the pragmatism,

581
00:28:36.650 --> 00:28:38.600
I mean, it's okay to
talk up your own project.

582
00:28:39.170 --> 00:28:44.120
Yeah, sure. Well, so, you
know, LLB, I can't say

583
00:28:44.120 --> 00:28:45.980
enough good things about it.
I mean, it's an awesome

584
00:28:45.980 --> 00:28:48.830
tool, but it's, if you
have a pocket book constraint,

585
00:28:49.190 --> 00:28:53.690
then that might be a
consideration. It, it, it blows

586
00:28:53.690 --> 00:28:57.380
doors and subsonic in terms
of functionality, but that functionality

587
00:28:57.380 --> 00:29:00.590
tends to be more edge
case stuff. If I can

588
00:29:00.590 --> 00:29:02.990
just sort of, kind of
cushion it that way, France,

589
00:29:03.010 --> 00:29:06.260
please don't send me hate
mail. I'm just saying, you

590
00:29:06.260 --> 00:29:08.270
know, but it's an awesome
tool in terms of in

591
00:29:08.270 --> 00:29:10.490
hibernate, there is a level
of complexity in terms of

592
00:29:10.490 --> 00:29:13.190
implementing it and working with
it. Some people find it

593
00:29:13.190 --> 00:29:15.620
a little daunting. Now that's
changing with all the screencasts

594
00:29:15.620 --> 00:29:19.100
they're doing and the introductions
to and hibernate. So it's,

595
00:29:19.130 --> 00:29:20.900
It's more of a, it's
more of a PR that

596
00:29:20.900 --> 00:29:23.810
speaks to the pragmatism, I
think. Right? Yeah. And this

597
00:29:24.080 --> 00:29:28.760
using subsonic is, is really
for people that aren't into

598
00:29:28.760 --> 00:29:33.110
sort of the tinkering aspects
of, of building a website,

599
00:29:33.110 --> 00:29:34.810
you know, a lot of
people really get into the,

600
00:29:34.810 --> 00:29:37.670
the underlying like pop, open
the hood and let's roll

601
00:29:37.670 --> 00:29:40.580
up our sleeves and get
greasy. Some people are just

602
00:29:40.580 --> 00:29:43.180
like, I, you know, I
got this Honda sports car

603
00:29:43.180 --> 00:29:46.360
with lowered, you know, neon,
neon things under the doors.

604
00:29:46.360 --> 00:29:48.010
And I just want to
get in and drive fast.

605
00:29:48.070 --> 00:29:49.570
You know what I mean?
I don't, if I open

606
00:29:49.570 --> 00:29:51.490
that hood, it's going to
scare me. There's a lot

607
00:29:51.490 --> 00:29:53.710
of people just kind of
want some flexibility, but they

608
00:29:53.710 --> 00:29:55.870
just don't want to get
into the, into the kind

609
00:29:55.870 --> 00:29:58.500
of minutiae. Does that make
sense? No, I like that.

610
00:29:58.510 --> 00:30:01.990
That's, that's good. That, that
is a very pre your,

611
00:30:02.110 --> 00:30:05.620
your pragmatism at every level
is what I'm hearing. Yeah.

612
00:30:05.860 --> 00:30:08.200
Well, you know, and I
figured that the neon under

613
00:30:08.200 --> 00:30:10.240
the door reference, you'd like,
cause you have that under

614
00:30:10.240 --> 00:30:12.940
your, your, your minivan at
home, don't you. And I

615
00:30:12.940 --> 00:30:18.400
saw that Nance, the minivan
has a lot of hydraulics

616
00:30:18.400 --> 00:30:27.190
and things cause the boys
get my minivan now. So

617
00:30:27.780 --> 00:30:30.430
what are some other, any
example projects? What is the

618
00:30:30.430 --> 00:30:33.100
canonical project? When we send
people off to go learn

619
00:30:33.100 --> 00:30:36.280
more about subsonic, I'm sure
people have heard about it.

620
00:30:36.280 --> 00:30:40.090
And haven't necessarily seen the,
the example application. What's the

621
00:30:40.090 --> 00:30:45.250
best example of a really
complete subsonic application. We had

622
00:30:46.300 --> 00:30:48.910
about two a year and
a half ago. I created

623
00:30:48.910 --> 00:30:51.310
a starter site. I called
it the subsonic starter site.

624
00:30:51.310 --> 00:30:54.760
It was a web web
forms application worked with subsonic

625
00:30:54.760 --> 00:30:59.860
2.03. It was just your
basic CMS file, new use,

626
00:30:59.860 --> 00:31:01.840
this template kind of thing.
And we had a bunch

627
00:31:01.840 --> 00:31:04.930
of widgets in their F
CK editor and a bunch

628
00:31:04.930 --> 00:31:10.510
of other things. And that
was a pretty cool site.

629
00:31:10.510 --> 00:31:13.000
I mean, generally it knocked
out 80% of the things

630
00:31:13.000 --> 00:31:16.720
you needed such as membership.
It was all wired in

631
00:31:16.720 --> 00:31:20.410
there. Logging in. We had
Ajax plugged in, we had

632
00:31:20.410 --> 00:31:24.430
on the fly editing of
pages and creating, creating paragraphs

633
00:31:24.430 --> 00:31:26.860
and stuff to make it
make, it was like, it

634
00:31:26.860 --> 00:31:30.040
was like.net nuke, ultra light,
to be honest with you.

635
00:31:30.040 --> 00:31:33.310
So, yeah. And the whole
goal was, you know, I

636
00:31:33.310 --> 00:31:35.990
felt at the time 60%
of all the applications that

637
00:31:35.990 --> 00:31:38.110
I remade needed, those things
and I could just build

638
00:31:38.110 --> 00:31:40.900
on top of it. So
that was, that was what

639
00:31:40.900 --> 00:31:44.230
we did before. We kind
of veered away from supporting

640
00:31:44.230 --> 00:31:48.980
that only because of time
limitations and, you know, I

641
00:31:48.980 --> 00:31:51.010
I'm, I'm my plan is
when we, when we kind

642
00:31:51.010 --> 00:31:54.280
of issue out three point
out here in the future,

643
00:31:54.480 --> 00:31:58.000
I'm going to revamp that
entire site. But so having,

644
00:31:58.030 --> 00:32:01.090
having jumped on the MVC
team and stopped working pretty

645
00:32:01.090 --> 00:32:03.040
much web forums all together,
it's sort of been hard

646
00:32:03.040 --> 00:32:07.270
to, to, to support that.
Alright. Very cool. Well, Rob,

647
00:32:07.270 --> 00:32:08.980
Kyrie, thank you so much
for taking the time to

648
00:32:08.980 --> 00:32:11.140
sit down and chat with
me today. Sure. Well, I'm

649
00:32:11.140 --> 00:32:12.940
glad I could help. When,
when are we gonna get

650
00:32:12.940 --> 00:32:17.200
started on new dinner? Let's
let's put this podcast in

651
00:32:17.200 --> 00:32:19.570
the can and get it
out and let's start working

652
00:32:19.570 --> 00:32:23.320
on neuron dinner in the
next five minutes. Sounds good.

653
00:32:23.830 --> 00:32:26.170
All right. This has been
another episode of Hansel minutes

654
00:32:26.380 --> 00:32:27.790
and I'll talk to you
again.

