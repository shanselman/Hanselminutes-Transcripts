WEBVTT FILE

1
00:00:12.020 --> 00:00:17.690
From hanselminutes.com. It's Hansel minutes,
a weekly discussion with web

2
00:00:17.690 --> 00:00:22.820
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.820 --> 00:00:28.670
number two 86. Recorded live
Tuesday, September 26, 2011. Support

4
00:00:28.670 --> 00:00:32.480
for Hanselman is provided by
Telerik rad controls, the most

5
00:00:32.480 --> 00:00:36.350
comprehensive suite of components for
windows forms and asp.net web

6
00:00:36.350 --> 00:00:45.320
applications online@wwwdottelerik.com. In this episode
of the startup series, it's

7
00:00:45.320 --> 00:00:48.680
got talks with feel for
tour creator of post sharp.

8
00:00:51.380 --> 00:00:53.240
Hi, this is Scott Hanselman,
and this is another episode

9
00:00:53.240 --> 00:00:56.510
of Hansel minutes. And today
via the magic of Skype

10
00:00:56.510 --> 00:00:57.980
from the other side of
the world, we have Gail

11
00:00:57.980 --> 00:01:01.910
for two from sharp crafters
creator of post sharp. How

12
00:01:01.910 --> 00:01:05.720
are you, sir? I'm great.
How are you? I'm very

13
00:01:05.720 --> 00:01:07.070
well. I'm happy to be
talking to you. I'm a

14
00:01:07.070 --> 00:01:10.010
big fan. We have lots
to talk about, but this

15
00:01:10.010 --> 00:01:12.080
is still part of the
startup series and I thought

16
00:01:12.080 --> 00:01:15.020
it would be great to
talk to you because you're

17
00:01:15.020 --> 00:01:17.660
an open source person. Who's
done software that I've used

18
00:01:17.660 --> 00:01:19.370
in the open source world,
but not all. You also

19
00:01:19.370 --> 00:01:21.740
have a company built around
that. So I want to

20
00:01:21.740 --> 00:01:25.520
understand that transition that you
made and, and then we'll

21
00:01:25.520 --> 00:01:26.960
talk a little bit about
the product and what it

22
00:01:26.960 --> 00:01:30.380
does and what the future
is. So start me out

23
00:01:30.380 --> 00:01:32.570
by just telling me what
it is that you built.

24
00:01:35.660 --> 00:01:39.920
So we've been post-harvest, which
is a post compiler or

25
00:01:39.920 --> 00:01:44.930
an aspect 20 framework. So
what it does is that

26
00:01:44.990 --> 00:01:48.890
it, it allows you as
a developer to produce code

27
00:01:48.890 --> 00:01:53.600
with less boiler plate code.
So when you think of

28
00:01:53.600 --> 00:01:58.070
a feature like implementing notified
properly change or undo, redo,

29
00:01:58.440 --> 00:02:01.580
always have to write the
same three lines of code.

30
00:02:01.610 --> 00:02:04.130
So three nights ago, there's
nothing, but it happens for

31
00:02:04.130 --> 00:02:08.300
every single property of every
class and they, so these

32
00:02:08.300 --> 00:02:13.700
can turn into thousands of
lines of code. And actually

33
00:02:13.730 --> 00:02:18.890
there, there is a better
way to write code it's

34
00:02:18.960 --> 00:02:23.720
to recognize that there is
an implementation pattern there. And

35
00:02:23.720 --> 00:02:29.500
then, so the tool we
make allows you to well

36
00:02:29.500 --> 00:02:32.780
to implement the design patterns
so that the code is

37
00:02:32.840 --> 00:02:37.850
actually generated automatically and does
not pollute your source code.

38
00:02:37.880 --> 00:02:40.520
So this is, this is
post sharp, and this is

39
00:02:40.520 --> 00:02:45.380
aspect oriented programming. So aspect
oriented programming. I I've heard

40
00:02:45.380 --> 00:02:49.010
it referred to in the
terms of cross cutting concerns.

41
00:02:49.010 --> 00:02:53.240
Like people think about things
vertically when creating object orientation

42
00:02:53.240 --> 00:02:56.090
and this derives from that,
and that derives from this

43
00:02:56.090 --> 00:03:01.510
other thing, but aspect oriented
programming, logging is used as

44
00:03:01.510 --> 00:03:04.000
an example. This is something
that doesn't fit into the

45
00:03:04.120 --> 00:03:08.980
vertical hierarchy, but instead cuts
across aspects of the entire

46
00:03:08.980 --> 00:03:12.450
application. Is that a good
way to express that? Yes,

47
00:03:12.450 --> 00:03:19.890
exactly. So, so the, the,
the principle design principle in,

48
00:03:20.520 --> 00:03:24.640
in software engineering is the
separation of concerns. So when

49
00:03:25.310 --> 00:03:28.350
we think of a feature,
we would like to see

50
00:03:28.410 --> 00:03:31.850
a single artifact of implementation.
For instance, when you, when

51
00:03:31.860 --> 00:03:34.830
we think of customer management,
you would like to see,

52
00:03:34.830 --> 00:03:39.960
say a single namespace. Then
when we go finder in

53
00:03:39.960 --> 00:03:42.450
your features, we go to
find your artifacts like a

54
00:03:42.450 --> 00:03:45.570
class mattered and so on.
So what we want is

55
00:03:45.570 --> 00:03:49.650
a nice separation of concerns,
but when we think about

56
00:03:49.650 --> 00:03:54.090
logging or transaction handling or
exception handling, notify probiotic change,

57
00:03:54.120 --> 00:04:00.210
and do we do security.
So we have this concerns

58
00:04:00.240 --> 00:04:05.160
that cross-cut all the business
functions of the program. And

59
00:04:05.250 --> 00:04:09.540
in, in object oriented jargon,
we call that crosscutting concerns.

60
00:04:10.350 --> 00:04:13.020
So these are the features
that are common to old

61
00:04:13.030 --> 00:04:19.740
business features, and that cannot
be addressed vertically by classes,

62
00:04:20.040 --> 00:04:27.840
procedures, methods. And that's, that's
why, well, a team in

63
00:04:28.140 --> 00:04:32.340
Palo Alto started to think
about this problem in 2001.

64
00:04:32.340 --> 00:04:36.780
And they, they, they came
with the principles of aspect

65
00:04:36.780 --> 00:04:41.070
20 programming. And so there
are very strong implementations in,

66
00:04:42.000 --> 00:04:47.460
in Java. And while Paul's
sharp is the implementation will

67
00:04:47.460 --> 00:04:52.350
the strongest implementation in, dotnet
not the only one, but

68
00:04:52.590 --> 00:04:58.410
the most nimble comprehensive for
microsoft.net. When did you create

69
00:04:58.410 --> 00:05:01.290
this? Did you, were you
working on a project and

70
00:05:01.290 --> 00:05:03.390
you said to yourself, this
is a need and I'm

71
00:05:03.390 --> 00:05:05.550
going to make it, and,
and how did it become

72
00:05:05.550 --> 00:05:10.470
open source? Oh, it's, it
started immediately as open source.

73
00:05:11.160 --> 00:05:16.740
I S I started with
when I was a developer

74
00:05:16.820 --> 00:05:21.750
in a telecom company and
I had to implement provisioning

75
00:05:21.750 --> 00:05:28.120
processes, and I felt the
need to do some, some

76
00:05:28.170 --> 00:05:30.990
more interesting code, more low
level codes. So I picked

77
00:05:30.990 --> 00:05:35.520
a problem and I started
playing with that. This was

78
00:05:35.520 --> 00:05:43.140
back in 2004 and after
a like nine months or

79
00:05:43.140 --> 00:05:46.440
one year. So, so I
did it every evening, one

80
00:05:46.440 --> 00:05:50.790
or two harbors. And after
one year, I, I noticed

81
00:05:50.790 --> 00:05:54.090
that, that people were interested
in the product and we've

82
00:05:54.090 --> 00:05:59.780
done loads, started conversations on
the support forum. So some

83
00:05:59.780 --> 00:06:04.940
companies wanted to sponsor the
project to develop features that

84
00:06:04.940 --> 00:06:09.710
they would use. And so
gradually it became much more

85
00:06:09.710 --> 00:06:15.320
and more important. And after
I think it was three

86
00:06:15.320 --> 00:06:20.240
years in 2007, then, then
I, I decided to leave

87
00:06:20.240 --> 00:06:25.700
my full time job at
a telecom company and start

88
00:06:25.700 --> 00:06:29.090
as a freelancer. And the
idea at the beginning was

89
00:06:29.090 --> 00:06:33.800
to devote 40% of my
time to the open source

90
00:06:33.800 --> 00:06:37.940
project. So not being paid.
And so to invoice the

91
00:06:37.940 --> 00:06:42.200
customer is 60% of that
time of the whole time.

92
00:06:44.000 --> 00:06:49.760
And so this balance worked
during two years and then,

93
00:06:50.150 --> 00:06:55.670
well, the six is what
continued to continue to grow.

94
00:06:55.880 --> 00:06:59.120
And so 40% was not
announced. So it was 50

95
00:06:59.120 --> 00:07:03.350
60. And at that point,
well, I had to realize

96
00:07:03.350 --> 00:07:06.410
that it was not possible
to, to, to make a

97
00:07:06.410 --> 00:07:10.790
living on just 40% of
my time. So and so,

98
00:07:11.060 --> 00:07:15.740
so users were pushing for
more support, more features, a

99
00:07:15.740 --> 00:07:23.050
more, a stronger commercial foundation.
So I decided to, to

100
00:07:23.090 --> 00:07:27.590
create a company on the
existing product. And so what

101
00:07:27.590 --> 00:07:31.640
I did there is to,
is to contact a business

102
00:07:31.670 --> 00:07:38.390
angel with large experience in,
in software startups. And I

103
00:07:38.390 --> 00:07:41.870
started working on a new
version. So the open source

104
00:07:41.870 --> 00:07:44.540
version is still, is still
available. Now it is still

105
00:07:44.570 --> 00:07:48.260
three. It is not supported
anymore. So we did the

106
00:07:48.260 --> 00:07:55.730
new version with new features.
And after nine months, as

107
00:07:55.730 --> 00:08:00.440
I think of, of development
and testing, we, we started

108
00:08:00.440 --> 00:08:04.480
selling this, this, this new
version. Okay, well, there's a

109
00:08:04.480 --> 00:08:06.820
couple of interesting things there
you've got, you've just shared

110
00:08:06.820 --> 00:08:10.420
us a lot of information.
Let me start a little

111
00:08:10.420 --> 00:08:13.960
bit farther back. You, you
have the open source project,

112
00:08:13.960 --> 00:08:17.710
it became quite popular. So
you decided to quit your

113
00:08:17.710 --> 00:08:21.370
full time job, do consulting,
and then hope that the

114
00:08:21.370 --> 00:08:24.940
consulting would support your work
on the open source project.

115
00:08:26.230 --> 00:08:29.530
Was your, was your consulting
exclusively in the area of

116
00:08:29.530 --> 00:08:33.760
aspect oriented programming, or was
it just general consulting? It

117
00:08:33.760 --> 00:08:37.240
was connected to a post
harm itself at the beginning.

118
00:08:37.240 --> 00:08:42.210
It was the main, the
main topic of, of, of

119
00:08:42.250 --> 00:08:45.580
the contract. And then I
started working on, on very

120
00:08:45.580 --> 00:08:50.800
different features that were not
related to the product. So,

121
00:08:52.180 --> 00:08:57.210
so the open source project
helped me to get visibility

122
00:08:57.600 --> 00:09:01.620
in the.net community and to
get better contracts that that

123
00:09:02.040 --> 00:09:05.190
would allow me to work
only with 60% is instead

124
00:09:05.190 --> 00:09:10.650
of of 100. And I
think that's, that's something that's

125
00:09:12.060 --> 00:09:15.420
what if you talk with,
with open source contributors, they

126
00:09:15.420 --> 00:09:18.360
will tell you the same
story. When you start contributing

127
00:09:18.360 --> 00:09:22.650
to a significant project, or
you start a significant project

128
00:09:23.310 --> 00:09:27.540
on your own, you get
huge visibility and you, and

129
00:09:27.660 --> 00:09:30.510
then you get opportunities that
you will not get. If

130
00:09:30.510 --> 00:09:36.000
you just follow the, the
past that your manager, what

131
00:09:36.000 --> 00:09:38.220
it has for you, or
that you could achieve in

132
00:09:38.220 --> 00:09:42.740
your own local city, But
why it seems like a

133
00:09:42.740 --> 00:09:46.160
very straightforward business that you're
trying to make here. You

134
00:09:46.160 --> 00:09:48.920
have a project that's popular,
it's open source. You have

135
00:09:48.920 --> 00:09:53.480
an, you have an engaged
user base. So you'll consult

136
00:09:53.480 --> 00:09:55.160
part of the time and
then work on your open

137
00:09:55.160 --> 00:09:57.140
source part of the time.
But then you said it

138
00:09:57.140 --> 00:10:01.580
became 40%, 50%, 60%. Why
was it, why was the

139
00:10:01.580 --> 00:10:06.440
work overwhelming the open source
project? Why did the percentage

140
00:10:06.470 --> 00:10:11.570
go up like that Much,
much of the work came

141
00:10:11.570 --> 00:10:18.620
from social supporting frameworks is
an issue and creating your

142
00:10:18.620 --> 00:10:23.420
features. So when you start
a project, I think that's

143
00:10:23.450 --> 00:10:26.510
what any project, when you
don't have any, any user,

144
00:10:27.080 --> 00:10:30.110
then you, then you don't
have any legacy. It's very

145
00:10:30.410 --> 00:10:33.860
easy to create the first,
well, the first lines of

146
00:10:33.860 --> 00:10:37.760
code. Then, then when you
have users, anything you add

147
00:10:37.880 --> 00:10:43.610
to the project? Well, it
has a quadratic cost. Nope.

148
00:10:43.700 --> 00:10:48.920
The, so the marginal cost
of implementing a feature is

149
00:10:48.920 --> 00:10:52.550
actually a function of, of
the legacy code base. That's

150
00:10:53.120 --> 00:10:58.490
something quite common in, in,
in software development. So when

151
00:10:58.490 --> 00:11:02.000
the project became two years
old and the user were,

152
00:11:02.030 --> 00:11:08.840
were, were counted in, in
thousands, it, it started to

153
00:11:08.840 --> 00:11:14.150
require significant afford to what
support new frameworks like civil

154
00:11:14.150 --> 00:11:18.770
light at this time was
new windows. Azure was new.

155
00:11:18.770 --> 00:11:22.970
There were specific requirements for
the first versions of windows

156
00:11:22.970 --> 00:11:30.290
Azure, and then companies or
developers start using the product

157
00:11:30.320 --> 00:11:35.810
in companies. And that they
want some kind of guaranteed

158
00:11:35.810 --> 00:11:40.190
that the project will continue
to be maintained in a

159
00:11:40.190 --> 00:11:46.430
future. And a commercial company
seems a better guarantee for

160
00:11:46.430 --> 00:11:51.110
them. So, so there were
both sources of pressure that

161
00:11:51.140 --> 00:11:55.180
will the time. And also
the telling, you know, we

162
00:11:55.180 --> 00:11:58.950
are, we are waiting for
a commercial version. Okay. So

163
00:11:58.950 --> 00:12:00.960
that's where it starts getting
interesting, because I think that

164
00:12:01.260 --> 00:12:03.840
a lot of the listeners
are probably either involved in

165
00:12:03.840 --> 00:12:06.390
an open source project or
they are interested in getting

166
00:12:06.390 --> 00:12:09.330
involved. We all know that
it's easier to work on

167
00:12:09.330 --> 00:12:11.820
an open source project, or
at least get started than

168
00:12:11.820 --> 00:12:13.830
it is to find a
job. So a number of

169
00:12:13.830 --> 00:12:16.770
people want to get experience,
or as you said, to

170
00:12:16.770 --> 00:12:20.610
get visibility, they work in
an open source project. But

171
00:12:20.610 --> 00:12:23.340
then when a project gets
to a certain size or

172
00:12:23.340 --> 00:12:27.930
a certain popularity enterprises and
companies and large commercial entities

173
00:12:27.930 --> 00:12:33.420
demand more, they expect more,
they want an organization behind

174
00:12:33.420 --> 00:12:36.540
it, whether it be, you
know, like a, like an

175
00:12:36.540 --> 00:12:41.100
Apache foundation or a outer
curve foundation, or eclipse, or

176
00:12:41.100 --> 00:12:45.330
an actual commercial entity. But
when you transition between open

177
00:12:45.330 --> 00:12:48.570
source and commercial, don't, you
risk losing a lot of

178
00:12:48.570 --> 00:12:51.180
people. As you know, you
might gain some, but you

179
00:12:51.180 --> 00:12:56.010
could also lose your base.
Oh yes, you are. When,

180
00:12:56.220 --> 00:13:00.480
when you make that transition,
you are changing your audience.

181
00:13:00.960 --> 00:13:05.730
So indeed we, we, we
lost a lot of users

182
00:13:05.730 --> 00:13:10.260
and we loaded what's what's
called well, the community karma

183
00:13:10.740 --> 00:13:15.840
during the first six months.
But then we had to

184
00:13:16.020 --> 00:13:20.250
develop different strategies to, to
what, to get an audience

185
00:13:20.310 --> 00:13:24.300
and a way to recover
and to gain a new

186
00:13:24.300 --> 00:13:29.610
audience. So it's, it's, it
is, it is risky. It

187
00:13:29.610 --> 00:13:38.040
is not a guaranteed success,
but before doing the transition,

188
00:13:38.400 --> 00:13:41.070
there is that there is
something that will, I tried

189
00:13:41.130 --> 00:13:45.660
unsuccessfully, but what are some
other people with eventual project

190
00:13:46.170 --> 00:13:49.890
did successfully? What I tried
before is to try to

191
00:13:49.890 --> 00:13:54.570
sell support on the free
product. And so during six

192
00:13:54.570 --> 00:13:59.060
months, there was a commercial
version of the product with

193
00:13:59.070 --> 00:14:05.040
a commercial licensing, and that
came with, with support. But

194
00:14:05.070 --> 00:14:11.400
actually I sold three, five
licenses. You know, it was,

195
00:14:11.400 --> 00:14:15.270
it was not enough to
make a living. So this

196
00:14:15.270 --> 00:14:20.340
was in 2008, I think.
And I, there was a

197
00:14:20.340 --> 00:14:22.740
kind of belief in the
community that when you do

198
00:14:22.740 --> 00:14:24.840
open source project, you can
make a living out of

199
00:14:24.840 --> 00:14:29.040
support. And for me, it
turned out to be, to

200
00:14:29.040 --> 00:14:35.430
be wrong. And if you
think about that, making a

201
00:14:35.430 --> 00:14:39.270
living out of support is
kind of a lose, win

202
00:14:39.270 --> 00:14:43.050
situation. You are winning because
your customer is losing when

203
00:14:43.050 --> 00:14:47.190
your customer calls support is
probably means that he's frustrated

204
00:14:48.200 --> 00:14:51.320
that he has had problem
and needs help. I think

205
00:14:51.320 --> 00:14:57.170
developers don't, don't like to
contact support. They, so we

206
00:14:57.170 --> 00:14:59.690
are kinds of people who
like to solve problems ourselves.

207
00:15:00.710 --> 00:15:03.770
So this is something that
does, for me, did not

208
00:15:03.770 --> 00:15:08.000
work. And what worked was
to we're stuck with the

209
00:15:08.000 --> 00:15:11.840
open source edition and, and
we'll take to people, Hey,

210
00:15:12.350 --> 00:15:15.710
we made investments in the
new version. If you want

211
00:15:15.710 --> 00:15:18.860
to, to get the new
features is going to be

212
00:15:19.100 --> 00:15:22.130
for a fee. And if
you don't want, then you

213
00:15:22.130 --> 00:15:26.570
have two possibilities. You have
the old version that was

214
00:15:26.570 --> 00:15:29.570
still available and it's still
for, I guess, users. And

215
00:15:29.570 --> 00:15:33.230
then there is a free
edition. So we moved from

216
00:15:33.320 --> 00:15:38.660
an open source model to
what premium, a freemium edition

217
00:15:39.170 --> 00:15:43.510
and a professional edition. Okay.
So the old version is

218
00:15:43.510 --> 00:15:46.510
frozen in time, right? It's
it's, it's done. Has it

219
00:15:46.510 --> 00:15:48.580
been forked and moved in
another direction or is it

220
00:15:48.580 --> 00:15:53.560
simply finished? No, it is.
It is finished. Some folks

221
00:15:53.560 --> 00:15:57.460
in the community made a
copy in <inaudible> and your

222
00:15:57.460 --> 00:16:02.200
repository, but no one had
had taken over the code.

223
00:16:02.230 --> 00:16:08.260
And so this, this version
is dead, but I think

224
00:16:08.260 --> 00:16:12.850
still, I think up to
50% of people who are

225
00:16:12.850 --> 00:16:16.360
using post route every day,
still use the old version

226
00:16:17.380 --> 00:16:19.930
And then it will eventually
die when something in the

227
00:16:19.930 --> 00:16:23.230
framework changes that is simply
unsupported and no one fixes

228
00:16:23.230 --> 00:16:28.240
it, I assume. Yes. So
it doesn't support.net for Oh,

229
00:16:29.320 --> 00:16:31.810
so that means that there
is still a large number

230
00:16:31.810 --> 00:16:34.570
of, of, of developers that
work on the three to

231
00:16:34.570 --> 00:16:39.520
five stack. Hi, this is
Scott coming to you from

232
00:16:39.520 --> 00:16:42.730
another place in time. Are
you using agile practices to

233
00:16:42.730 --> 00:16:44.950
manage your software development? There's
lots of tools in the

234
00:16:44.950 --> 00:16:47.260
market that manage the steps
of a project, but most

235
00:16:47.260 --> 00:16:50.170
of them focus on individual
roles, get ready for a

236
00:16:50.170 --> 00:16:52.540
solution that caters for the
success of the whole team.

237
00:16:52.690 --> 00:16:56.440
Guys at Tellerik introduced team
pulse. It's an agile project

238
00:16:56.440 --> 00:17:00.010
management tool. That'll help you
gather ideas, estimate plan, track

239
00:17:00.010 --> 00:17:03.910
progress, and a common workspace.
Finally, companies, regardless of their

240
00:17:03.910 --> 00:17:06.070
size can use a lightweight
and convenient tool that makes

241
00:17:06.070 --> 00:17:09.490
all the stakeholders work as
a United team. Even if

242
00:17:09.490 --> 00:17:12.910
they're in different countries by
combining intuitive user interface and

243
00:17:12.910 --> 00:17:15.670
the power server light team
poles removes the roadblocks that

244
00:17:15.670 --> 00:17:18.310
you typically face and applying
agile in an effective manner,

245
00:17:18.940 --> 00:17:22.150
no more lost data, no
disparate systems, no lack of

246
00:17:22.150 --> 00:17:25.990
critical analytics regarding the health
and philosophy project. See if

247
00:17:26.000 --> 00:17:29.020
yourself get a free copy
for five users in one

248
00:17:29.020 --> 00:17:35.740
project at tellerik.com/team pulse. And
please do thank tolerance for

249
00:17:35.740 --> 00:17:40.510
supporting Hansel minutes on their
Facebook fan page, facebook.com/t L

250
00:17:40.750 --> 00:17:44.680
E R I K Keller.
We do appreciate it. They

251
00:17:44.690 --> 00:17:46.480
wouldn't be a handsome and
it's, if there wasn't, Tellerik

252
00:17:46.480 --> 00:17:50.580
helping us, what kind advice
would you give to someone

253
00:17:50.580 --> 00:17:53.880
out there who's listening who
has open source and they

254
00:17:53.880 --> 00:17:58.560
built something significant and they
start to think about, well,

255
00:17:58.560 --> 00:18:00.930
I've done all this free
work and I've got all

256
00:18:00.930 --> 00:18:04.950
this fame, but I don't
have any money should, should,

257
00:18:05.190 --> 00:18:07.350
should every open source project
when it gets to a

258
00:18:07.350 --> 00:18:12.320
certain level of popularity switch
to commercial. I don't think

259
00:18:12.320 --> 00:18:17.810
so because, because I, I
have seen different moderns working

260
00:18:17.810 --> 00:18:22.070
well. Well, it's, it's it's
of course, if it were

261
00:18:22.070 --> 00:18:25.820
difficult to, to see if
something works well commercially without

262
00:18:25.820 --> 00:18:28.490
knowing the internal numbers, and
you will never know them,

263
00:18:28.850 --> 00:18:34.250
but so you can get
a very high popularity and

264
00:18:35.600 --> 00:18:39.710
thanks for your popularity, what
become a so famous concert,

265
00:18:39.710 --> 00:18:42.650
and you can offer a
training. This can be a

266
00:18:42.650 --> 00:18:47.780
more profitable business model than
turning commercial then, but then

267
00:18:47.780 --> 00:18:52.230
if you were turning commercially,
you, you may have, so

268
00:18:52.230 --> 00:18:55.880
you, so you may lose
a part of, of your

269
00:18:55.880 --> 00:19:00.020
audience for a part of
your audience. You turn from

270
00:19:00.020 --> 00:19:04.130
a hero to do a
household because you, what it

271
00:19:04.130 --> 00:19:06.110
used to be three, and
now it's commercial. And, and

272
00:19:06.170 --> 00:19:10.550
there is a minority of,
of people that will send

273
00:19:10.550 --> 00:19:13.580
you a silly emails that
you are not a good

274
00:19:13.580 --> 00:19:16.400
guy anymore, but this is
a minority. This is, this

275
00:19:16.400 --> 00:19:21.440
is maybe a 5% of
the users who will do

276
00:19:21.440 --> 00:19:23.480
the opposite and telling that
this is the right move

277
00:19:23.480 --> 00:19:29.420
to do. So, should you
move your opensource project to

278
00:19:30.080 --> 00:19:36.310
what? To commercial? I would
say it's, it's not an,

279
00:19:37.660 --> 00:19:43.040
an, an abused choice first
thinking about the other strategies

280
00:19:43.040 --> 00:19:48.560
you have and think about
the, Nope. Are you able

281
00:19:48.560 --> 00:19:51.530
to get contributors for your
projects? Because in case of

282
00:19:51.530 --> 00:19:54.110
post sharp, it was so
low level. And so what

283
00:19:54.110 --> 00:19:59.090
is so complex that I,
I have not been able

284
00:19:59.090 --> 00:20:02.330
to get contributors in the
project when I decided to,

285
00:20:02.790 --> 00:20:05.510
to switch to open source.
So at that time I

286
00:20:05.510 --> 00:20:12.290
was author of 99, 7%
of the source code. See,

287
00:20:12.290 --> 00:20:18.620
that's interesting because even simple
projects and popular projects, basic

288
00:20:18.620 --> 00:20:22.820
things like, like nerd dinner,
my silly little example, you

289
00:20:22.820 --> 00:20:26.450
know, we've had people contribute
over the years, but in

290
00:20:26.470 --> 00:20:29.750
the last year it's been
me and John Galloway and two

291
00:20:29.750 --> 00:20:34.130
other, very nice guys from
the community, John Peterson and Peter

292
00:20:34.130 --> 00:20:37.490
Morefield. And you would think
I would have 30, 40,

293
00:20:37.490 --> 00:20:41.240
50 people, you know, sending
me a code, but it

294
00:20:41.240 --> 00:20:43.940
just doesn't happen. And then
if you, if you, if

295
00:20:43.940 --> 00:20:47.740
you, if you turn up
the difficulty like something with

296
00:20:47.740 --> 00:20:51.700
an aspect oriented project, you're,
you're making the pool of

297
00:20:51.700 --> 00:20:53.770
people that you can choose
from smaller and smaller. And

298
00:20:53.770 --> 00:20:56.710
then you find yourself all
alone with a project that

299
00:20:56.710 --> 00:21:01.950
has thousands and thousands of
users. Exactly. So, so there

300
00:21:01.950 --> 00:21:07.140
is a point where, where,
where you have to realize

301
00:21:07.140 --> 00:21:10.470
that if you want the
project to continue and just

302
00:21:10.470 --> 00:21:14.790
to be alive and to
grow into, and to, to

303
00:21:14.820 --> 00:21:17.430
get adapted to the new
features of the.net platform at

304
00:21:17.430 --> 00:21:20.760
the minimum, then you need
to pay people because the

305
00:21:20.760 --> 00:21:27.150
contributors will not to not
come, or you could find

306
00:21:27.150 --> 00:21:30.360
some kind of contributors that
will tell you, well, give

307
00:21:30.360 --> 00:21:32.130
me a task and I
will do that. And so

308
00:21:32.130 --> 00:21:35.850
you have to do nearly
micromanagement and you are losing

309
00:21:35.850 --> 00:21:39.870
more time that you are
gaining. So this, this was

310
00:21:39.870 --> 00:21:46.320
the situation in 2006, seven
at the time where a

311
00:21:46.320 --> 00:21:50.880
sold force was, was the
hub of, of opensource development.

312
00:21:52.500 --> 00:21:54.360
How do you, when you
transition from open source to

313
00:21:54.360 --> 00:21:57.210
commercial, do you, do you
close the source and how

314
00:21:57.210 --> 00:22:05.160
do you do that? It
was a source actually, you

315
00:22:05.160 --> 00:22:09.000
need to be the only,
the only contributor, because otherwise

316
00:22:09.990 --> 00:22:15.300
you don't have the right
to do that. So, so

317
00:22:15.300 --> 00:22:19.170
you, so you need the
agreement of all contributors and

318
00:22:19.200 --> 00:22:22.350
is better. If, if, if
it's a small number and

319
00:22:22.350 --> 00:22:26.220
then you can change the
license because when the copyright

320
00:22:26.280 --> 00:22:31.830
owners can change the license.
So, so what I did

321
00:22:31.830 --> 00:22:35.550
is to create a new
version based on the old

322
00:22:35.550 --> 00:22:38.430
version, of course, but within,
it was a differential license.

323
00:22:38.790 --> 00:22:43.050
I consider doing a part
of the product sitting open

324
00:22:43.050 --> 00:22:46.680
source and doing the add
ins in close source. But

325
00:22:46.680 --> 00:22:50.690
I was not able to
find an architecture where the

326
00:22:50.700 --> 00:22:57.600
license would so that when
the commercial features will not

327
00:22:57.600 --> 00:23:00.870
be like cross-cutting to the
free ones and that there

328
00:23:00.870 --> 00:23:03.120
could be a separation of
license in the separation of

329
00:23:03.120 --> 00:23:06.930
code. So that's the only
thing that could work in

330
00:23:06.930 --> 00:23:09.720
some software. For instance, you
can make an open source

331
00:23:09.750 --> 00:23:13.500
ERP and make commercial plugins,
but in the case of

332
00:23:13.500 --> 00:23:17.430
post sharp, this was not
possible. Okay, well, let's, let's

333
00:23:17.430 --> 00:23:19.650
spend a little time talking
about post sharpen, what it

334
00:23:19.650 --> 00:23:22.770
does. We talked a little
bit about aspect oriented programming,

335
00:23:23.160 --> 00:23:27.600
but if I understand correctly,
if there's anything that you

336
00:23:27.600 --> 00:23:30.960
want in your source to,
to change the behavior of

337
00:23:30.960 --> 00:23:34.260
the entire application with, like
you said, security or logging

338
00:23:34.260 --> 00:23:39.930
or exception management, these are
almost like, like plugins, but

339
00:23:39.930 --> 00:23:42.690
they don't plug in. Again,
I use the term vertically

340
00:23:42.690 --> 00:23:44.490
in the sense of they
don't plug into the hierarchy,

341
00:23:44.490 --> 00:23:48.020
necessarily they slice all the
way through the application. Like

342
00:23:48.020 --> 00:23:53.960
you could turn on detailed
logging in your application, but

343
00:23:53.960 --> 00:23:56.150
is it correct? You can
do it without changing the

344
00:23:56.150 --> 00:23:59.540
source and really you could
do it without ever seeing

345
00:23:59.540 --> 00:24:05.020
it. So in imposter version
two, which is the current

346
00:24:05.020 --> 00:24:11.170
version, it is principally based
on custom attributes. So at

347
00:24:11.170 --> 00:24:14.320
least you need one custom
attribute insight. For instance, your

348
00:24:14.320 --> 00:24:18.520
assembly info that CS that's
the minimum you need. There

349
00:24:18.520 --> 00:24:20.770
is a trick to do
it without that, but it

350
00:24:20.770 --> 00:24:23.200
is not the, the way
it is supposed to work.

351
00:24:23.950 --> 00:24:29.170
So in impulse shop to
the system is designed to

352
00:24:29.170 --> 00:24:34.510
modify a program whose you
have the source code. So

353
00:24:34.930 --> 00:24:37.930
not, not an arbitrary program,
this is, this is something

354
00:24:37.930 --> 00:24:40.330
that, that will change in
Paul's shop tree. We will

355
00:24:40.330 --> 00:24:46.660
allow for modification of whatever
that impulse shop to it

356
00:24:46.660 --> 00:24:50.380
is designed as a development
tool, not as a, as

357
00:24:50.380 --> 00:24:56.290
a monitoring tool, which would
let you to analyze whatever,

358
00:24:56.320 --> 00:25:00.610
like whatever code, for instance,
SharePoint who always having the

359
00:25:00.610 --> 00:25:06.370
source code. So, so post
sharp is very oriented to,

360
00:25:07.000 --> 00:25:10.180
with, with custom attributes, but
it doesn't mean that you

361
00:25:10.180 --> 00:25:13.450
need to add a custom
attribute to every method you

362
00:25:13.450 --> 00:25:18.310
need to target. Typically, if
you want to do logging

363
00:25:18.310 --> 00:25:22.510
of everything, you would put
a custom attribute at the

364
00:25:22.510 --> 00:25:26.080
SMB level, a single customer
attribute, and then you will,

365
00:25:26.430 --> 00:25:31.330
you have filters. So you
can see you, you can

366
00:25:31.330 --> 00:25:36.370
say that you want to
trace only public metals, or

367
00:25:36.370 --> 00:25:38.440
you can do more complex
things. You can, you can

368
00:25:38.440 --> 00:25:41.210
use a reflection at the
build time. This is, this

369
00:25:41.210 --> 00:25:44.920
is quite, quite cool because
when it post chaperones at,

370
00:25:45.190 --> 00:25:47.830
at build time. So just,
just after the C sharp

371
00:25:47.830 --> 00:25:54.310
compiler, so you can write
code that executes, inciteful sharp.

372
00:25:54.370 --> 00:26:00.100
And so you can inspect
the assembly using reflection, and

373
00:26:00.100 --> 00:26:05.280
you can add the aspects
wherever it is. It is

374
00:26:05.290 --> 00:26:08.650
relevant based on C sharp
code. So you, so you

375
00:26:08.650 --> 00:26:12.460
can do very, very fun
stuff. Like you can do

376
00:26:12.460 --> 00:26:15.250
a link query over reflection
that returns a set of

377
00:26:15.250 --> 00:26:19.690
aspect. For instance, Help me
understand where this fits into

378
00:26:19.690 --> 00:26:23.440
the process. Because for most
people they write source, they

379
00:26:23.440 --> 00:26:25.750
run it through the compiler
from the company that they,

380
00:26:25.960 --> 00:26:28.960
you know, they bought the
software from Microsoft. So they

381
00:26:28.960 --> 00:26:32.980
run it through Microsoft's compiler
and it makes I, it

382
00:26:32.980 --> 00:26:35.440
makes intermediate language. And then
that's the end of it.

383
00:26:36.010 --> 00:26:39.760
Where do you, where do
you fit in? So it's

384
00:26:39.760 --> 00:26:43.810
so post sharp runs just
after the compiler, it reads

385
00:26:43.810 --> 00:26:47.580
the MSI, it transforms it,
and then it tries it

386
00:26:47.580 --> 00:26:53.040
back. So when it, conceptually
it can be a, it

387
00:26:53.040 --> 00:26:56.550
can be understood as an
extension of the compiler, but

388
00:26:56.550 --> 00:27:01.680
technically it runs as a
post compilation step w which

389
00:27:01.680 --> 00:27:05.540
is post sharp post C
sharp. Okay. So it's post

390
00:27:05.540 --> 00:27:08.490
compilation. So you're literally taking
the binary or what, what,

391
00:27:08.500 --> 00:27:11.180
what we, let me rephrase
what we think of as

392
00:27:11.180 --> 00:27:14.330
the binary, which is really
just this container full of

393
00:27:14.330 --> 00:27:18.230
oil. You open it up
and you change the resulting

394
00:27:18.230 --> 00:27:22.400
code. You change the code
that C-sharp made in injecting

395
00:27:22.400 --> 00:27:26.150
in your own aisle, weaving
in as a, as it

396
00:27:26.150 --> 00:27:29.630
were your own aisle. How
can I then debug that?

397
00:27:30.740 --> 00:27:34.820
So that's, that's quite easy
because when Paul's hot, he

398
00:27:34.820 --> 00:27:41.210
writes the PDB file. So
when it, when Paul's shrub

399
00:27:41.240 --> 00:27:46.280
injects interactions, it also injects
sequence points. So it updates

400
00:27:46.310 --> 00:27:49.430
the mapping between the binary
and the source code. So

401
00:27:49.430 --> 00:27:53.450
actually when, when you debug
that you, you just, it,

402
00:27:53.500 --> 00:27:56.840
it just works as usually,
but you have the aspects

403
00:27:56.840 --> 00:27:59.330
there. So if you step
into a method and there

404
00:27:59.330 --> 00:28:01.610
is an aspect of the
method, you will get into

405
00:28:01.610 --> 00:28:05.390
the aspect, and then the
aspect will call for instance,

406
00:28:05.420 --> 00:28:08.180
proceed. For instance, you can
make a caching aspect that

407
00:28:08.180 --> 00:28:11.510
intercepts the method you are
on the method. You click

408
00:28:11.510 --> 00:28:14.840
on, step into you, get
into the aspect. And then

409
00:28:14.840 --> 00:28:18.770
when, when the caching aspect
calls proceed, because what the

410
00:28:18.770 --> 00:28:21.520
metal is not cached and
needs to be executed, and

411
00:28:21.520 --> 00:28:23.600
then you step into proceed
and you get back into

412
00:28:23.600 --> 00:28:27.530
the method, and then you
can step as usually It's

413
00:28:27.530 --> 00:28:29.840
really seamless. I mean, if
it, I assume that if

414
00:28:29.840 --> 00:28:33.230
it broke anything from the
debugging experience, people would be

415
00:28:33.230 --> 00:28:35.420
less likely to use it,
but you're saying I can

416
00:28:35.420 --> 00:28:37.650
hit F 11 and go
right into the aspect. And

417
00:28:37.880 --> 00:28:42.050
It's just fine. Yes. You
can put break phones. Usually

418
00:28:43.460 --> 00:28:46.190
if you don't want to
step into an aspect every

419
00:28:46.190 --> 00:28:49.040
time, because you don't know
is there, and you don't

420
00:28:49.040 --> 00:28:52.190
want to debug that, then
you can use the custom

421
00:28:52.200 --> 00:28:58.760
attributes of the system, diagnostics,
namespace, for instance, debuggers step

422
00:28:58.760 --> 00:29:02.300
through. And so, and so
stepping into will not step

423
00:29:02.300 --> 00:29:06.470
into the aspect. Well, why
would I want to use

424
00:29:06.470 --> 00:29:10.550
aspect oriented programming, as opposed
to perhaps building in my

425
00:29:10.550 --> 00:29:13.790
own plugin model, to like
meth, using meth, to plug

426
00:29:13.820 --> 00:29:17.660
things into a, to my
application, why would I pick

427
00:29:17.720 --> 00:29:20.360
aspect of any programming over
designing my own model to

428
00:29:20.360 --> 00:29:23.840
inject code in, or, or,
or at least load code

429
00:29:23.840 --> 00:29:29.000
into to my space? So
if, if you use a

430
00:29:29.260 --> 00:29:36.800
dependency injection framework, you aren't
able to do inject behaviors

431
00:29:36.830 --> 00:29:42.340
between the client and the
service. So because the, so

432
00:29:42.350 --> 00:29:46.840
dependency injection works this way,
that, that the client requests

433
00:29:47.800 --> 00:29:52.300
requests an interface to the
container and the container when

434
00:29:52.300 --> 00:29:58.810
normally returns the implementation. But
the container, if there is

435
00:29:58.810 --> 00:30:02.920
an aspect on the implementation
or on the service, he

436
00:30:02.920 --> 00:30:05.980
would, he would return a
proxy and the proxy would

437
00:30:06.190 --> 00:30:09.040
call them up the logging
and so on. But that

438
00:30:09.040 --> 00:30:14.860
means that you are limited
to what, to adding behaviors,

439
00:30:14.860 --> 00:30:18.700
to first to the communication
between a client and a

440
00:30:18.700 --> 00:30:22.510
service. It means not to
private methods, not to a

441
00:30:22.900 --> 00:30:27.550
static methods, not to WPF
control. So the set of

442
00:30:27.550 --> 00:30:30.280
points to which you can
add aspects, it's actually pretty

443
00:30:30.280 --> 00:30:34.770
limited. And is this something
that I should be concerned

444
00:30:34.770 --> 00:30:37.800
about as a developer or
are aspects meant to just

445
00:30:37.800 --> 00:30:42.000
simply fade into the background
and that I simply forget

446
00:30:42.000 --> 00:30:43.860
that they're there. I mean,
I guess I would be

447
00:30:43.860 --> 00:30:46.710
concerned that something would happen
that I would be unable

448
00:30:46.710 --> 00:30:53.150
to debug When, when, when
we talk with longtime customers,

449
00:30:53.150 --> 00:30:56.640
so people who have been
using <inaudible> for three, four

450
00:30:56.640 --> 00:31:02.100
years, they, they tell me
the main benefit is not

451
00:31:02.100 --> 00:31:05.430
the number of lines of
code that, that you decrease.

452
00:31:05.760 --> 00:31:09.420
The main benefit is that
the knowledge required by a

453
00:31:09.420 --> 00:31:13.860
new team member is lower.
So they have new team

454
00:31:13.860 --> 00:31:18.150
members who don't understand aspect
20 programming. Don't need to

455
00:31:18.150 --> 00:31:21.690
understand what is an aspect.
And it's only after six

456
00:31:21.690 --> 00:31:25.620
to nine months that they
ask, Hey, how much transaction

457
00:31:25.620 --> 00:31:29.430
handling so implemented anyway, because
it's not in the code,

458
00:31:29.430 --> 00:31:34.320
it just happens magically. So,
but, but so during his

459
00:31:34.320 --> 00:31:38.190
six, nine months, the new,
the new team member was

460
00:31:38.190 --> 00:31:42.930
able to do good code
without requiring large learning of,

461
00:31:42.990 --> 00:31:46.140
you know, merchant treading caching
for induction and link. It

462
00:31:46.140 --> 00:31:50.280
was just there. So the
architect just put the aspects

463
00:31:50.280 --> 00:31:54.840
on the business objects and
were told, I want to

464
00:31:55.470 --> 00:32:00.450
trace this, this needs to
be transactional. So it can

465
00:32:00.450 --> 00:32:03.240
be a real benefit that
you don't need to know

466
00:32:03.240 --> 00:32:07.020
that the aspects is there.
That's interesting because it's, it's

467
00:32:07.020 --> 00:32:09.960
another kind of abstraction. I
was going to say another

468
00:32:09.960 --> 00:32:13.680
layer of abstraction, but it's
another, another kind of abstraction.

469
00:32:14.130 --> 00:32:19.320
And I think that abstractions
are the whole point of

470
00:32:19.320 --> 00:32:21.690
what the computer is supposed
to be doing. It's supposed

471
00:32:21.690 --> 00:32:26.340
to do the work for
you. That's not fun. And,

472
00:32:26.340 --> 00:32:29.790
you know, logging is no
fun and transactions are no

473
00:32:29.790 --> 00:32:34.800
fun. So why not hide
that? Do, do you, do

474
00:32:34.800 --> 00:32:37.740
you have any thoughts on
why aspect oriented programming hasn't

475
00:32:38.900 --> 00:32:41.840
taking the world by fire?
Like why everyone isn't using

476
00:32:41.840 --> 00:32:47.090
it? I think one of
the reasons was that it

477
00:32:47.110 --> 00:32:53.290
has been designed by, by
academic researchers at the Xerox

478
00:32:53.290 --> 00:32:59.410
Palo Alto laboratory. And the
first implementations were academic with

479
00:32:59.470 --> 00:33:05.740
very, I think, cumbersome con
concepts so that the, so

480
00:33:05.740 --> 00:33:09.100
that the learning curve was
very, very steep at the

481
00:33:09.100 --> 00:33:13.900
beginning. And so when, when
I started to design post

482
00:33:13.900 --> 00:33:18.880
Sharvin in 2004 or five,
I looked at that stuff

483
00:33:18.880 --> 00:33:22.300
and what I thought to
myself, cause I've, I've been

484
00:33:22.300 --> 00:33:25.570
programming since, since eight of
11. So I have kind

485
00:33:25.570 --> 00:33:29.800
of what problem was mine
before being so an engineer.

486
00:33:29.830 --> 00:33:32.740
So I'll say, so I
thought to myself, that's, that's

487
00:33:32.800 --> 00:33:34.720
not the way that that
should be done because in

488
00:33:34.720 --> 00:33:37.690
dotnet we have custom attributes.
We can, we can make

489
00:33:37.930 --> 00:33:40.930
maybe it's much more natural
for programmers to use without

490
00:33:40.930 --> 00:33:45.340
introducing new concepts. And so
I designed a very light

491
00:33:46.210 --> 00:33:49.930
weight, a lightweight version of
a spectrum, anti programming that

492
00:33:49.930 --> 00:33:57.310
was called Laos lightweight aspect
oriented system. And this started

493
00:33:57.310 --> 00:34:00.790
to be popular. These version,
none, the complex one that

494
00:34:00.790 --> 00:34:05.020
existed back then, for instance,
aspect of DNG or aspect

495
00:34:05.020 --> 00:34:10.300
sharp and aspect J clones,
this simple version became popular.

496
00:34:10.900 --> 00:34:13.930
So I think there was
a communication problem at the

497
00:34:13.930 --> 00:34:19.600
beginning, so that many people
that got maybe burned by

498
00:34:20.770 --> 00:34:26.200
beta complexity. But now if
I, so if I look

499
00:34:26.200 --> 00:34:31.360
at at will the industry,
that's the tower when all

500
00:34:31.360 --> 00:34:36.250
best customers or, or more
frequent one, it's actually not

501
00:34:36.250 --> 00:34:40.900
the software development industry that
this is finance and healthcare.

502
00:34:41.740 --> 00:34:45.610
So people doing business software,
this is where, what EOP

503
00:34:45.610 --> 00:34:50.260
is the most useful, Right?
Big enterprises where the work

504
00:34:50.260 --> 00:34:52.660
needs to get done. And
there are crosscutting concerns that

505
00:34:52.660 --> 00:34:55.960
can be created by the
architect or another group so

506
00:34:55.960 --> 00:34:58.630
that the business person can
focus on the business problem.

507
00:34:59.020 --> 00:35:01.630
And the other issues can
be handled by the software.

508
00:35:02.410 --> 00:35:05.050
Exactly. Well, thank you so
much for chatting with me

509
00:35:05.050 --> 00:35:08.140
today. Folks can go up
to sharp crafters.com and you

510
00:35:08.140 --> 00:35:11.170
can download the free starter
edition of pro sharp and

511
00:35:11.320 --> 00:35:13.810
check it out. It's a
pretty amazing piece of software.

512
00:35:13.810 --> 00:35:15.400
And if you look there
on the homepage, you've got

513
00:35:15.400 --> 00:35:18.850
folks like again, day from
then hibernate does singing its

514
00:35:18.850 --> 00:35:21.670
praises. So I would encourage
you to check out a

515
00:35:21.680 --> 00:35:24.400
post sharpen. Thanks so much
Gail Frito for coming on

516
00:35:24.400 --> 00:35:27.580
the show and talking about
your, your starting, Thank you,

517
00:35:27.580 --> 00:35:31.570
Scott. This has been another
episode of Hanselminutes and we'll

518
00:35:31.570 --> 00:35:32.800
see you again next week.

