WEBVTT FILE

1
00:00:04.920 --> 00:00:17.210
<inaudible> From hanselminutes.com. It's Hanselman.
That's a weekly discussion with

2
00:00:17.210 --> 00:00:22.010
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:22.010 --> 00:00:27.560
show number three 68. Recorded
live Thursday, April 18, 2013.

4
00:00:28.220 --> 00:00:31.610
Support for Hanselman it's as
provided by Telerx offering the

5
00:00:31.610 --> 00:00:40.220
best in developer tools and
support online@tglerikdotcomandbyfranklins.net makers of gesture

6
00:00:40.220 --> 00:00:43.700
pack a powerful gesture, recording
and recognition system for Microsoft

7
00:00:43.730 --> 00:00:50.600
connect for windows developers details@gesturepak.com.
In this episode, Scott talks

8
00:00:50.600 --> 00:00:53.990
with Dean Ellis from Xamarin
and Phillipe Rollins from infinite

9
00:00:53.990 --> 00:00:57.560
flight about using mano game
and Xamarin to make infinite

10
00:00:57.560 --> 00:01:02.210
flight a reality. Hi, this
is Scott Hanselman. This is

11
00:01:02.210 --> 00:01:04.250
another episode of Hansel minutes,
and we're here at Xamarin

12
00:01:04.250 --> 00:01:07.010
evolve in Austin, Texas. They've
taken over the hotel. It's

13
00:01:07.010 --> 00:01:10.400
amazing. And there's people all
over the place talking about

14
00:01:10.400 --> 00:01:12.770
visual studio and talking about
Xamarin studio and all the

15
00:01:12.770 --> 00:01:15.110
great things that they can
do. They can write applications

16
00:01:15.110 --> 00:01:17.270
in C sharp that run
in any app store on

17
00:01:17.270 --> 00:01:20.420
the planet. And I have
got a Dean Ellis from

18
00:01:20.930 --> 00:01:23.930
Xamarin who works on motto
game. How are you? I'm

19
00:01:23.930 --> 00:01:26.180
fine. Thank you, Scott. How
are you? I am freaking

20
00:01:26.180 --> 00:01:28.760
brilliant. I just had a
blast. Just got off stage.

21
00:01:28.760 --> 00:01:31.640
So I'm coming down from
that emotional high. Yeah, it's

22
00:01:31.660 --> 00:01:35.330
amazing conference. It's fantastic. It's
so fun. It's just, it's

23
00:01:35.330 --> 00:01:38.030
it's love in the, in
the streets right now. And

24
00:01:38.030 --> 00:01:42.050
then we've got Phillipe rollin
from infinite flight. It's gotten

25
00:01:42.060 --> 00:01:45.320
pretty good. You've got, you've
got apps in the app

26
00:01:45.320 --> 00:01:48.680
store. Yeah, we do infinite
flights on a windows phone

27
00:01:48.680 --> 00:01:52.940
and iOS and yeah, it's
been great. That's fantastic. There

28
00:01:52.940 --> 00:01:55.280
are a lot of games
that are written in mano

29
00:01:55.280 --> 00:01:57.920
game. And we can't tell
though that they're written in

30
00:01:57.920 --> 00:02:00.110
model game. And I think
that from the end user's

31
00:02:00.110 --> 00:02:01.970
point of view, that's what
we want. Right. You shouldn't

32
00:02:01.970 --> 00:02:03.650
be able to tell, I
talked to the draw stick

33
00:02:03.650 --> 00:02:05.540
man, guys a couple of
months ago on the show

34
00:02:06.080 --> 00:02:09.710
and I had no idea
it didn't like run slower.

35
00:02:10.220 --> 00:02:13.460
You had no performance issues.
It just is. No, I

36
00:02:13.460 --> 00:02:16.250
mean the, the mono game,
I mean, all the middle

37
00:02:16.250 --> 00:02:20.720
game community has made Lincoln
amazing job porting X and

38
00:02:20.720 --> 00:02:25.190
a two to multiple platform.
And, and to keep the

39
00:02:25.190 --> 00:02:28.520
native feel on all of
those platform, that's really the,

40
00:02:28.520 --> 00:02:30.770
the, the strength that has
been a mono game so

41
00:02:30.770 --> 00:02:32.960
far. And I wanted to
talk to you from infinite

42
00:02:32.960 --> 00:02:35.000
flight, because when you think
about a flight simulator, you

43
00:02:35.000 --> 00:02:39.110
think about calculations in physics
and mathematics and complexity and

44
00:02:39.110 --> 00:02:42.620
frames per second, correct? Yes.
And at a high level,

45
00:02:42.680 --> 00:02:45.530
I think of C-sharp as
being this, you know, garbage

46
00:02:45.530 --> 00:02:49.040
collected high level thing. It's
not a low level language.

47
00:02:49.040 --> 00:02:51.620
So why would you pick
the highest level language when

48
00:02:51.620 --> 00:02:54.710
you want massive amounts of
performance in 60 frames? A

49
00:02:54.710 --> 00:02:57.890
second? Well, I mean, for,
for us particularly, it was

50
00:02:57.890 --> 00:03:01.030
more like a, we were
dotnet developers Were not mobile

51
00:03:01.030 --> 00:03:05.710
developers and, and we decided
on dotnet because we loved

52
00:03:05.770 --> 00:03:09.400
a C sharp and we
realized very quickly that we

53
00:03:09.400 --> 00:03:13.120
were able to, to, to
do very performance stuff on,

54
00:03:13.120 --> 00:03:17.080
on, on seashore with C
sharp. So that's pretty much

55
00:03:17.170 --> 00:03:19.950
the reason why we choose
that. So you did not

56
00:03:19.950 --> 00:03:22.230
want to go and learn
how to do objective C.

57
00:03:23.070 --> 00:03:26.700
We tried for 30 minutes
and is that fair? Is

58
00:03:26.700 --> 00:03:28.740
that fair? Are there opportunities
out there where people will

59
00:03:28.740 --> 00:03:30.900
be not fair? I mean,
we're a little bit biased

60
00:03:31.590 --> 00:03:34.560
from, from being a dotnet
developer for S for, for

61
00:03:34.560 --> 00:03:38.070
the man for, for so
long. And so that's why,

62
00:03:38.610 --> 00:03:41.430
I mean, there's no, no
other real reason for that

63
00:03:41.430 --> 00:03:45.330
choice. And Dean Felipe said
the X and a community,

64
00:03:45.330 --> 00:03:47.760
so X and a kind
of came from, came from

65
00:03:47.760 --> 00:03:50.670
where Well, excellent. It was
originally a framework written by

66
00:03:50.670 --> 00:03:55.710
Microsoft for specifically for the
Xbox and also the windows

67
00:03:55.860 --> 00:04:00.510
platform. And the idea was
to create a nice, simple

68
00:04:00.510 --> 00:04:03.410
API that developers could pick
up and write games with.

69
00:04:03.420 --> 00:04:07.110
It was mainly for indie
developers now where when a

70
00:04:07.110 --> 00:04:10.050
game stepped in there was
trying to bring that kind

71
00:04:10.050 --> 00:04:13.800
of nice API and easy
API to other platforms so

72
00:04:13.800 --> 00:04:17.220
that developers could take their
code and take their games

73
00:04:17.220 --> 00:04:20.490
and just use them on
iPads or other devices. Lots

74
00:04:20.490 --> 00:04:22.920
of people who are listening
will, you know, they understand

75
00:04:23.220 --> 00:04:26.190
you add an, add a
library as a reference and

76
00:04:26.190 --> 00:04:28.350
you get all of these
namespaces available to you is,

77
00:04:28.360 --> 00:04:31.080
was X and H just
one DLL or two or

78
00:04:31.080 --> 00:04:34.230
three DLLs. And then you
add reference The original X

79
00:04:34.230 --> 00:04:38.490
and a system was probably
about five or six assemblies,

80
00:04:38.490 --> 00:04:42.090
farm embroidery. And they're all
split up into various places,

81
00:04:42.150 --> 00:04:46.080
various power parts, like a
core library, which contains mathematical

82
00:04:46.080 --> 00:04:49.590
functions like vectors and matrices.
And then you've also got

83
00:04:49.590 --> 00:04:54.540
stuff like the graphics assembly,
which contained the Lorenda at

84
00:04:54.540 --> 00:04:56.670
render targets and textures and
all that kind of stuff.

85
00:04:56.670 --> 00:04:59.070
And there's a whole bunch
of other stuff, including networking.

86
00:05:00.210 --> 00:05:02.010
And the idea was that
you just create a new,

87
00:05:02.430 --> 00:05:04.830
excellent project and add those
references, and then you can

88
00:05:04.830 --> 00:05:07.650
just stop, stop making, making
a game, making a great

89
00:05:07.650 --> 00:05:10.230
game for Xbox and windows.
I know when I read

90
00:05:10.230 --> 00:05:12.270
a console app, I've got
like a main, and then

91
00:05:12.270 --> 00:05:14.010
I'm just kind of on
my own, is that where

92
00:05:14.010 --> 00:05:16.440
you start the next day
I'm in X and a,

93
00:05:16.470 --> 00:05:18.630
yeah, there's a, there's usually
a main entry point. And

94
00:05:18.630 --> 00:05:22.200
then you create a class
that's derived from a game

95
00:05:22.200 --> 00:05:24.990
class, and then you run
that class is it's very

96
00:05:24.990 --> 00:05:27.390
similar to the way kind
of WinForms works. You create

97
00:05:27.390 --> 00:05:30.180
a form and then you
run, run the application. So

98
00:05:30.180 --> 00:05:32.160
it's got that kind of
feel to it. And then

99
00:05:32.550 --> 00:05:35.180
in the game class, you
see you then in the

100
00:05:35.180 --> 00:05:37.620
class that you derived from
the game class, you then

101
00:05:37.620 --> 00:05:44.070
override the updates and the
draw methods to update your

102
00:05:44.100 --> 00:05:47.850
inputs, and then obviously Julia
graphics. So, so it's quite

103
00:05:47.850 --> 00:05:49.920
a nice little framework to
you to work with. And

104
00:05:49.920 --> 00:05:52.470
can I bring in other
dotnet classes that I might

105
00:05:52.470 --> 00:05:53.850
want, or do I have
to stick within a certain

106
00:05:53.850 --> 00:05:56.070
surface area of things that
only X and a will

107
00:05:56.070 --> 00:05:58.520
allow me to do well
for, for the Xbox, you

108
00:05:58.520 --> 00:06:01.010
were restricted as to what
classes you could use, but

109
00:06:01.340 --> 00:06:03.650
when you were using XMA
on the desktop, you could

110
00:06:03.650 --> 00:06:07.870
pretty much use any, any
dot-net assembly you wanted. And

111
00:06:08.110 --> 00:06:10.630
is it mostly UI and
graphics and things like that?

112
00:06:10.630 --> 00:06:12.550
Or are there isolated storage
APS or how do I

113
00:06:12.760 --> 00:06:16.000
save my settings? There are,
there are isolated storage APIs

114
00:06:16.000 --> 00:06:19.810
for, for those platforms as
well. And mano game implement

115
00:06:19.810 --> 00:06:22.480
those. So you can use
the same kind of API

116
00:06:22.480 --> 00:06:25.510
APIs on all the platforms.
So it's a quite nice

117
00:06:25.510 --> 00:06:28.060
little framework You say implement.
Now, when I think of

118
00:06:28.060 --> 00:06:31.390
implementing, I think of implementing,
you know, interfaces, and it's

119
00:06:31.390 --> 00:06:33.610
not like the XMA stuff
was all just like, here

120
00:06:33.610 --> 00:06:35.290
are all these friendly interfaces
and you get to go

121
00:06:35.290 --> 00:06:37.990
in and implement those interfaces.
Or what you're doing is

122
00:06:38.290 --> 00:06:41.290
making classes that do the
exact same thing written entirely

123
00:06:41.290 --> 00:06:43.210
from scratch. And they just
happened to be named the

124
00:06:43.210 --> 00:06:45.760
same. Yeah. I mean, basically
what we've done is we've,

125
00:06:45.760 --> 00:06:49.930
we've copied the exact same
namespaces and we've got all

126
00:06:49.930 --> 00:06:51.760
the same classes. So in
X and eight, as a

127
00:06:51.760 --> 00:06:55.150
texture to the eClass in
mano game, there's a texture

128
00:06:55.150 --> 00:06:58.090
Duke, two D class in
exactly the same namespace. The

129
00:06:58.090 --> 00:07:02.410
actual interface for that for
the texture duty class is

130
00:07:02.410 --> 00:07:04.330
exactly the same as the
next night. And then when

131
00:07:04.330 --> 00:07:09.340
our game, so basically from
the outside, there's no difference

132
00:07:09.550 --> 00:07:12.550
between the two platforms. It's
just everything that we do

133
00:07:12.550 --> 00:07:16.840
under the hood. So on
say Android and iOS, we

134
00:07:16.840 --> 00:07:19.180
use open GL under the
hood to do the graphics

135
00:07:19.180 --> 00:07:23.020
API APIs on windows. We've
got a direct acts, 11

136
00:07:23.020 --> 00:07:26.290
backend, which we use for
windows eight store and also

137
00:07:26.440 --> 00:07:29.860
normal windows, desktop. And for
Linux and Mac, we've got

138
00:07:29.860 --> 00:07:33.070
an open GL backend as
well. So, and all that's

139
00:07:33.100 --> 00:07:36.430
all that kind of platform
specific stuff is hidden away

140
00:07:36.430 --> 00:07:39.820
from the user because we
just surface the excellent APIs

141
00:07:40.570 --> 00:07:43.030
And it never leaks out.
I mean, like, forgive my

142
00:07:43.030 --> 00:07:46.270
ignorance. I don't mean to
ask stupid questions, but like,

143
00:07:46.570 --> 00:07:48.400
I get that you've got
open GL and all these

144
00:07:48.400 --> 00:07:50.560
platforms, and then you've got
direct X over on these

145
00:07:50.560 --> 00:07:52.960
other platforms. And I'm thinking,
well, surely you must get

146
00:07:52.960 --> 00:07:55.990
into these weird situations where
some textures in front of

147
00:07:55.990 --> 00:07:58.360
another, or there's some weird
Z ordering thing or something

148
00:07:58.360 --> 00:08:01.120
clips on one platform and
not another. And it's because

149
00:08:01.120 --> 00:08:03.790
of some abstraction that you've
tried to hide that has

150
00:08:03.790 --> 00:08:05.800
then bubbled its way all
the way up. And now

151
00:08:05.800 --> 00:08:09.010
you've got to hack your
way around it Originally. I

152
00:08:09.010 --> 00:08:11.530
think when the framework first
started, we did have issues

153
00:08:11.530 --> 00:08:15.040
like that, but it's, the
frame has been in development

154
00:08:15.040 --> 00:08:17.200
for probably about four, four
or five years now, I

155
00:08:17.200 --> 00:08:19.930
think. So there's been quite
a few man hours put

156
00:08:19.930 --> 00:08:24.160
into this community effort. And
a lot of those particular

157
00:08:24.160 --> 00:08:27.670
issues are that they're non-existent
at the moment. I mean,

158
00:08:27.670 --> 00:08:29.590
one is one good example
is if you use the

159
00:08:29.590 --> 00:08:33.010
normal Sprite batch class, which
you use to just render

160
00:08:33.010 --> 00:08:36.880
textures on the screen, there
is literally no difference between

161
00:08:37.120 --> 00:08:39.560
an accent, a game and
something that's running on one

162
00:08:39.620 --> 00:08:43.450
game. It looks, looks the
same, Really. So if I

163
00:08:43.450 --> 00:08:46.210
were to go and write
something in like, you know,

164
00:08:46.210 --> 00:08:49.030
I don't know whatever the
raw thing is on, on

165
00:08:49.060 --> 00:08:52.180
iOS. And then do the
same thing with extranet. You

166
00:08:52.180 --> 00:08:54.970
just couldn't tell apart. Yeah,
pretty much pixel for pixel,

167
00:08:55.080 --> 00:08:57.300
if you, if you're a
very art focused game, like

168
00:08:57.300 --> 00:08:59.130
I think bastion is one
of the games that I'm

169
00:08:59.130 --> 00:09:02.430
really excited about, where everything
has to be pixel perfect,

170
00:09:02.430 --> 00:09:04.320
or it's going to look
wrong and the little men

171
00:09:04.320 --> 00:09:08.720
are gonna interact incorrectly. It
just it's just him. Yeah.

172
00:09:08.720 --> 00:09:10.760
I mean, we've, we've that
the team has spent a

173
00:09:10.760 --> 00:09:12.770
lot of time and effort
trying to make sure that

174
00:09:12.770 --> 00:09:15.710
the, the, the graphics results
are as good as they

175
00:09:15.710 --> 00:09:18.230
can be. Now you bring
up an interesting point a

176
00:09:18.230 --> 00:09:19.700
little bit a minute ago.
You said that this is

177
00:09:19.790 --> 00:09:22.430
a couple of years old,
like four years old, plus

178
00:09:22.490 --> 00:09:25.100
this is not like a
little series of Shem hacks

179
00:09:25.100 --> 00:09:27.530
on top of stuff. It's
not a thrown together library.

180
00:09:27.530 --> 00:09:30.110
This is tremendous amounts of
man hours have been put

181
00:09:30.110 --> 00:09:32.840
into this. Yeah, absolutely. Yeah.
It's a, it's a long

182
00:09:32.840 --> 00:09:38.420
going product. Well, it originally
started as mano. What was

183
00:09:38.420 --> 00:09:43.830
it? The, the original framework
was, I can't remember what

184
00:09:43.830 --> 00:09:47.630
it was called now. It
was precipitately specifically for iPhone

185
00:09:48.350 --> 00:09:52.220
and it was only for
iPhone. And then a couple

186
00:09:52.220 --> 00:09:54.410
of people added, came into
the team. They saw this

187
00:09:54.410 --> 00:09:56.900
excellent API, and then we
moved it to Mac and

188
00:09:56.900 --> 00:10:00.950
Android. And then after that
came windows eight, and then

189
00:10:00.950 --> 00:10:04.910
I was obviously Linux and
windows desktop. So it's been

190
00:10:04.970 --> 00:10:06.920
quite a few years in
the making. So there's a

191
00:10:06.920 --> 00:10:08.810
lot of man hours behind
it. We've got a good

192
00:10:09.860 --> 00:10:12.440
team of core developers. Most
of the virtue had been

193
00:10:12.440 --> 00:10:16.030
working on it for over
a year or more. And

194
00:10:16.040 --> 00:10:18.890
we were very passionate about
that particular project. So it's,

195
00:10:19.310 --> 00:10:22.190
it's not going away anytime
soon about how many competitors

196
00:10:22.190 --> 00:10:25.970
are there. Well, there's a,
there's a core of about

197
00:10:25.970 --> 00:10:29.630
six developers, but then we
have, I don't know what

198
00:10:29.630 --> 00:10:32.360
the community is, but we've
got a whole bunch of

199
00:10:32.360 --> 00:10:36.440
people that fix issues or
implement new features is all

200
00:10:36.440 --> 00:10:39.110
handled through get. So they
just fought with the library

201
00:10:39.620 --> 00:10:42.530
and push that, send, pull
requests when they've got something

202
00:10:42.530 --> 00:10:44.150
they want to include. And
this is a kind of

203
00:10:44.150 --> 00:10:46.010
a copy local thing in
the sense that if someone

204
00:10:46.010 --> 00:10:47.750
did go and fork it
and fix some bug and

205
00:10:47.750 --> 00:10:49.160
didn't want to wait for
a new release, they could

206
00:10:49.160 --> 00:10:52.070
ship with that on it.
Yeah, Absolutely. And that's exactly

207
00:10:52.070 --> 00:10:55.100
what bastion did. Bastion took
a fork of the Monarch

208
00:10:55.100 --> 00:10:58.940
game products. They did some
stuff that they needed specifically

209
00:10:59.360 --> 00:11:02.360
for the games that they
were producing and they've, they

210
00:11:02.360 --> 00:11:04.670
then opened source there for
a little while ago. Cause

211
00:11:04.670 --> 00:11:07.490
it diverged quite a lot
from the, the original one.

212
00:11:08.690 --> 00:11:12.470
And yeah. So all that
is kind of available. Felipe,

213
00:11:12.470 --> 00:11:14.120
did you guys do anything
like that? Did you find

214
00:11:14.120 --> 00:11:18.360
anything behaviors or things in
Montana? Well, yeah, exactly. When

215
00:11:18.380 --> 00:11:22.250
we just started a forking
mono game was in 2011,

216
00:11:22.250 --> 00:11:25.130
I think September. And so
there was no 3d back

217
00:11:25.130 --> 00:11:28.040
then in at least in
the public version of motor

218
00:11:28.040 --> 00:11:30.290
games. So what we did
is we forked it and

219
00:11:30.290 --> 00:11:34.120
we implemented the whole like
3d shaders stage of, of

220
00:11:34.340 --> 00:11:36.650
motor game to match X
and a as close as

221
00:11:36.650 --> 00:11:41.690
possible. And so we forget,
and it was, it was

222
00:11:41.690 --> 00:11:45.650
kind of, it went kind
of far from the original,

223
00:11:46.070 --> 00:11:49.250
the original fork branch that
was on the mono game,

224
00:11:49.460 --> 00:11:54.250
get her page. So it,
it was hard for Us

225
00:11:54.260 --> 00:11:57.460
to contribute back directly to
them. So what we did

226
00:11:57.460 --> 00:11:59.680
is we just send them
the source code and the

227
00:11:59.980 --> 00:12:03.760
reimplement reintegrated it in their
branch and actually extended. And

228
00:12:03.760 --> 00:12:07.360
now it's, it's really, it's
really well done according to

229
00:12:07.630 --> 00:12:10.720
really close to, they kind
of took your stuff on

230
00:12:10.720 --> 00:12:13.520
mass and then kind of
tighten it up. Yeah. Because,

231
00:12:13.570 --> 00:12:15.340
because we were on it,
I guess, on the shipping

232
00:12:15.340 --> 00:12:18.010
schedule and sure. And then
are you back on the

233
00:12:18.010 --> 00:12:20.620
main line now? Now we
are in the next version

234
00:12:20.620 --> 00:12:24.490
of infinite flight. We'll be
back on the current branch

235
00:12:24.730 --> 00:12:28.660
and actually everything that we,
we modify it right now

236
00:12:28.990 --> 00:12:32.440
is, is, is public. We
have all branch of a

237
00:12:32.460 --> 00:12:35.890
motor game is public and
whatever we're shipping on the

238
00:12:35.890 --> 00:12:41.290
app store or, or the
marketplace that's the, or, or

239
00:12:41.290 --> 00:12:44.620
get a page, there's the
public version of motor games

240
00:12:44.620 --> 00:12:48.250
that we use that might
have some modification that are

241
00:12:48.250 --> 00:12:50.620
not yet integrated back into
the main branch of motor

242
00:12:50.620 --> 00:12:55.090
game of Mondo game, but
it's, it's there for anybody

243
00:12:55.090 --> 00:12:57.280
to use. Well, I think
that people who are listening

244
00:12:57.280 --> 00:13:00.190
might be thinking well, on
the one hand, this is

245
00:13:00.190 --> 00:13:02.170
really mature. And you're saying
it's been around for four

246
00:13:02.170 --> 00:13:04.000
years and we can trust
it and it's not going

247
00:13:04.000 --> 00:13:06.370
anywhere. But on the other
hand, we've got two really

248
00:13:06.370 --> 00:13:08.860
great examples and bastion and
infinite flight. And in both

249
00:13:08.890 --> 00:13:11.590
instances you had to fork
it and go off and

250
00:13:11.590 --> 00:13:13.330
do something. So then someone
else might say, well, that

251
00:13:13.330 --> 00:13:15.250
doesn't sound like a mature
library. That sounds like a

252
00:13:15.250 --> 00:13:18.250
library. That's missing chunks of
what I need. Is that,

253
00:13:18.760 --> 00:13:20.770
is that a fair statement?
Or do you think that

254
00:13:20.770 --> 00:13:22.840
it's just that you had
really special needs that you

255
00:13:22.840 --> 00:13:25.300
want to game didn't it's
in your case 3d wasn't

256
00:13:25.300 --> 00:13:29.440
there? Well, yes, a now
it is a, so that's

257
00:13:29.440 --> 00:13:31.360
why now we, we, we
going back into it and

258
00:13:31.360 --> 00:13:34.810
because we don't have the
manpower that Moto game contributors

259
00:13:35.350 --> 00:13:39.020
have. I mean, when they're
six and plus all the

260
00:13:39.370 --> 00:13:42.790
other conditions. So even if,
I mean, now it would

261
00:13:42.790 --> 00:13:45.580
be, it would be foolish
to thing that we can,

262
00:13:46.030 --> 00:13:49.440
we can afford that kind
of manpower to, to be,

263
00:13:49.720 --> 00:13:51.700
to be able to release
on all those platform that

264
00:13:52.120 --> 00:13:54.970
we want to target. So
w would you say that

265
00:13:54.970 --> 00:13:57.070
if someone's got X and
a code right now, or

266
00:13:57.070 --> 00:13:58.690
they wrote a game a
couple of years ago that

267
00:13:58.690 --> 00:14:00.250
they can, and they wrote
it on the original X

268
00:14:00.250 --> 00:14:02.320
and I did, they could
totally jump in and they

269
00:14:02.320 --> 00:14:05.370
should start doing work and
modern gaming. Yeah, Absolutely. We've

270
00:14:06.360 --> 00:14:09.720
if you've got an existing
mano and application for Xbox

271
00:14:09.720 --> 00:14:11.730
or for windows phone seven,
cause we've had a lot,

272
00:14:11.730 --> 00:14:15.720
quite a few people convert
from windows phone seven, you

273
00:14:15.720 --> 00:14:20.010
can just take your code
and begin porting, very simple

274
00:14:20.010 --> 00:14:23.520
games with just, you know,
say two detectors and sound

275
00:14:23.520 --> 00:14:27.150
effects and various, you know,
your kind of normal windows

276
00:14:27.150 --> 00:14:29.700
phone games that are very
simple. You can probably put

277
00:14:29.700 --> 00:14:33.960
those in, in a few
hours tops and, and most

278
00:14:33.960 --> 00:14:37.890
of that statement. Yes. Yeah.
Well, personally, I've, I've, I've

279
00:14:37.890 --> 00:14:40.410
had experience of doing that
kind of stuff. So it

280
00:14:40.410 --> 00:14:43.530
gets more complex depending on
what you're using. There are

281
00:14:43.530 --> 00:14:47.100
certain APIs that aren't implemented
yet in Monarch game, because

282
00:14:47.100 --> 00:14:50.010
obviously it's still evolving. One
of the things is achievements

283
00:14:50.990 --> 00:14:53.860
and leader boards. That's, that's
not, Yeah. That's a very

284
00:14:53.860 --> 00:14:57.220
high level thing though. You're
talking about sprites in three

285
00:14:57.220 --> 00:15:00.220
days and matrices, and then
you're saying, well, gosh, you

286
00:15:00.220 --> 00:15:01.960
know, we don't have leader
boards, but every leader board

287
00:15:01.960 --> 00:15:04.600
is different. Every play there's
X Xbox live on one

288
00:15:04.600 --> 00:15:08.830
platform. And then there's. Yeah.
So I mean, those are,

289
00:15:09.070 --> 00:15:10.870
those are the areas that
we're in now. We're kind

290
00:15:10.870 --> 00:15:14.950
of trying to get these
high level APIs implemented. But

291
00:15:15.100 --> 00:15:17.800
yeah, I mean, if you've
got an existing game, the

292
00:15:17.800 --> 00:15:21.190
vast majority of your code,
I mean, we've hit since

293
00:15:22.060 --> 00:15:23.860
have given us some stats.
And they said it was

294
00:15:23.860 --> 00:15:27.310
95% of their code just
came across without any changes.

295
00:15:28.330 --> 00:15:30.370
And how do they factor
it where that the controls

296
00:15:30.370 --> 00:15:32.290
are different. I understand that
the most common thing is

297
00:15:32.290 --> 00:15:34.930
just, you know, positioning the
Croll controls whether or not

298
00:15:34.930 --> 00:15:37.600
you have a gyroscope or
not, and detecting that and

299
00:15:37.600 --> 00:15:39.760
then allowing in the settings,
whether or not the gyroscope

300
00:15:39.760 --> 00:15:41.470
is used or not. And
just things like that, it

301
00:15:41.470 --> 00:15:44.620
seems like control scheme is
like the number one thing

302
00:15:44.620 --> 00:15:46.690
that people end up changing
as they go from The

303
00:15:46.690 --> 00:15:49.240
platform, the platform. Yeah. I
mean, in the original X-Box

304
00:15:49.240 --> 00:15:52.390
you had game controllers, keyboard
input, and a mouse input.

305
00:15:52.390 --> 00:15:55.810
And that was for X-Box
and obviously windows with the

306
00:15:55.810 --> 00:15:59.350
introduction of windows, phone seven,
they added a new touch

307
00:15:59.380 --> 00:16:04.480
API. And obviously that wouldn't
compile on the Xbox version.

308
00:16:04.480 --> 00:16:07.480
So in that particular case,
most developers with hash to

309
00:16:07.480 --> 00:16:10.990
find that out for that
particular platform. And what we

310
00:16:10.990 --> 00:16:14.830
find is if you're developing
for the desktop platforms that

311
00:16:14.830 --> 00:16:18.190
we support, so Mac or
Linux, or just a windows

312
00:16:18.190 --> 00:16:21.340
desktop, that same rule applies.
So there is no touch

313
00:16:21.400 --> 00:16:24.610
interface. There's no touch support
on those platforms as of

314
00:16:24.610 --> 00:16:27.340
yet. So you, you cash
to find those areas out

315
00:16:27.550 --> 00:16:32.590
now for other platforms like
windows eight, store, Android and

316
00:16:32.590 --> 00:16:35.590
iOS, they all the touch
API is exactly the same

317
00:16:35.620 --> 00:16:39.040
and they all work in
the same way. So again,

318
00:16:39.100 --> 00:16:41.860
instead of just having a
say, hash define windows phone,

319
00:16:41.860 --> 00:16:44.890
you has a hash defined
windows phone, or Android or

320
00:16:44.890 --> 00:16:48.580
iOS, and you can just
include the same APIs. Well,

321
00:16:48.580 --> 00:16:50.770
I think a lot of
business C sharp developers, aren't

322
00:16:50.770 --> 00:16:53.020
used to that the whole,
if Def has to know

323
00:16:53.050 --> 00:16:55.900
or hash define the idea
of, of this is the

324
00:16:55.900 --> 00:16:57.670
code. I want you to
run. If we're compiling with

325
00:16:57.670 --> 00:17:00.070
this flag set, and this
is old hat for C

326
00:17:00.070 --> 00:17:02.290
and C plus plus programmers,
but I think that people

327
00:17:02.290 --> 00:17:05.920
could probably code their entire
career and never ever see

328
00:17:05.920 --> 00:17:07.960
those kinds of things that
seems real common in the,

329
00:17:07.960 --> 00:17:10.840
in the cross platform, compilation
world. Yeah. It's just one

330
00:17:10.840 --> 00:17:13.540
of those things that you
kind of have to do

331
00:17:13.820 --> 00:17:18.880
to get around certain particular
issues. One issue is obviously

332
00:17:18.880 --> 00:17:21.610
that the touch API just
flat doesn't exist in certain

333
00:17:22.280 --> 00:17:25.180
on the Xbox. So that's
why you ended up that

334
00:17:25.330 --> 00:17:28.030
there wasn't even an assembly
or a namespace, which included

335
00:17:28.030 --> 00:17:30.760
it. So you had to
make sure your coach they're

336
00:17:30.770 --> 00:17:33.550
compiled and the hash define
was the most efficient way

337
00:17:33.550 --> 00:17:36.790
of doing that. Actually just
out of curiosity. Cause I'm

338
00:17:36.790 --> 00:17:40.300
wondering how do people who
don't have this tool set

339
00:17:40.300 --> 00:17:42.850
available to them do this?
Like whenever I see like

340
00:17:42.880 --> 00:17:44.650
angry birds or whatever, like
is that just written in

341
00:17:44.650 --> 00:17:46.510
C and they just write
it all over again, when

342
00:17:46.510 --> 00:17:48.610
they move it to the
next thing, To be honest,

343
00:17:48.610 --> 00:17:50.370
I don't actually know how
those guys do. How would

344
00:17:50.370 --> 00:17:51.660
you guess? You know what
I'm saying? Like if it

345
00:17:51.660 --> 00:17:55.010
was in Moto we'd know,
Well, I hopefully they'll tell

346
00:17:55.010 --> 00:17:57.530
us. Yeah. I just wonder,
like, I'm just using angry

347
00:17:57.530 --> 00:17:59.600
birds as an example, but
you know, you see a

348
00:17:59.600 --> 00:18:01.220
game and then at the
bottom of the ad for

349
00:18:01.220 --> 00:18:03.870
the game, it's like PlayStation
and Xbox and Android. And

350
00:18:03.900 --> 00:18:06.050
I was like, wow, who's
are they just doing the

351
00:18:06.050 --> 00:18:07.460
game over and over again?
Or they're doing it and

352
00:18:07.460 --> 00:18:09.740
see, They're probably doing it
in C or C plus

353
00:18:09.740 --> 00:18:12.860
plus, cause I mean, C
has got a, it's been

354
00:18:12.860 --> 00:18:15.170
cross platform for quite a
few years. So you can

355
00:18:15.170 --> 00:18:18.800
imagine that a core part
of their game is written

356
00:18:18.800 --> 00:18:20.810
in C or C plus
plus, or they can just

357
00:18:20.960 --> 00:18:23.510
kind of port to other
platforms. And then it's just

358
00:18:23.510 --> 00:18:25.700
the, the layer on top
of that, the integrates with

359
00:18:25.700 --> 00:18:29.600
the various platforms that they're
using. So they're probably during

360
00:18:29.600 --> 00:18:32.960
that, I would guess, or
using HTML five, But, but

361
00:18:32.960 --> 00:18:35.270
we're here at a conference
full of people who love

362
00:18:35.270 --> 00:18:38.660
dotnet and she's sharp. Are
we fooling ourselves? Like it's

363
00:18:38.660 --> 00:18:40.160
the only reason we're here
is because we don't want

364
00:18:40.160 --> 00:18:44.030
to manage memory ourselves. No,
I think we're here because

365
00:18:44.030 --> 00:18:46.310
C-sharp is such a cool
language. Yeah. It has so

366
00:18:46.310 --> 00:18:50.390
many more feet. It has
some excellent features which make

367
00:18:50.390 --> 00:18:55.520
developers more productive than say
if you had a standard

368
00:18:55.550 --> 00:18:58.610
C plus plus developer with
the same amount of experience

369
00:18:58.610 --> 00:19:01.490
as a C sharp developer,
I probably my personal opinion

370
00:19:01.490 --> 00:19:03.050
is that the C sharp
daughter who would be more

371
00:19:03.050 --> 00:19:05.960
productive, Put them up against
the sea bird. Can I

372
00:19:05.970 --> 00:19:09.050
just wondering if there's someone
who's listening, who's saying, Hey,

373
00:19:09.050 --> 00:19:11.210
these people just need to
suck it up and start

374
00:19:11.210 --> 00:19:15.920
writing portable CC is the
great equalizer. No, I think

375
00:19:15.920 --> 00:19:18.650
C, C sharp stands up
against C and C plus

376
00:19:18.650 --> 00:19:22.190
plus in my own personal
opinion. Yeah. Cool. One question

377
00:19:22.190 --> 00:19:23.660
I wanted to ask you
and then move over to

378
00:19:23.660 --> 00:19:26.640
Felipe was that there's all
these different screen sizes and

379
00:19:26.930 --> 00:19:29.360
all the different resolutions, but
the most of the games

380
00:19:29.360 --> 00:19:32.330
that I play are crisp
on every screen. How do

381
00:19:32.330 --> 00:19:34.400
you deal with the textures?
How do you deal with

382
00:19:34.400 --> 00:19:37.220
the graphics? Like, you know,
super Mario looks awesome on

383
00:19:37.340 --> 00:19:40.580
even, you know, six 40
by 400 or a retina

384
00:19:40.640 --> 00:19:44.720
iPad. How is that handled?
There's various different techniques for

385
00:19:44.720 --> 00:19:48.500
that on the iPad. They
have specific ways of dealing

386
00:19:48.500 --> 00:19:51.650
with that. There's a, you
can put two sets of

387
00:19:51.650 --> 00:19:54.800
assets into your application, one,
which is sort of like

388
00:19:55.100 --> 00:19:57.950
normal resolution and the high
definition, one that's for the

389
00:19:57.950 --> 00:20:02.300
retina displays modern game actually
has support for if you've

390
00:20:02.300 --> 00:20:04.460
got those two types of
textures in there and they're

391
00:20:04.460 --> 00:20:08.150
identified by a specific, I
think it's at two X

392
00:20:08.210 --> 00:20:11.600
identify when I gave them
were automatically detect this on

393
00:20:11.600 --> 00:20:14.060
a retina display and lows,
that load those high definition

394
00:20:14.060 --> 00:20:18.860
images platforms like Android. Again,
there's, there's lots of different

395
00:20:19.340 --> 00:20:22.900
screen sizes. It's probably a
little bit more difficult to

396
00:20:22.910 --> 00:20:25.460
do that on Android, but
you can probably use something

397
00:20:25.460 --> 00:20:28.730
similar, but it's obviously not
in the modern game system

398
00:20:28.730 --> 00:20:32.360
at the moment. So developers
would need to think about

399
00:20:33.980 --> 00:20:36.800
packaging, maybe different versions of
the application. One with high

400
00:20:36.800 --> 00:20:40.970
res graphics, one without Felipe.
When you, when you load

401
00:20:40.970 --> 00:20:44.240
up infinite flight, like on
different windows machines, windows, you're

402
00:20:44.240 --> 00:20:47.890
in the windows app store
now. Yes, they have resolutions

403
00:20:47.890 --> 00:20:49.420
with this phone app store.
I mean, there's phone apps.

404
00:20:49.600 --> 00:20:51.940
There's like what three or
four resolutions of windows for

405
00:20:51.950 --> 00:20:55.680
now? Well, now we're on
the, all the windows phones.

406
00:20:55.710 --> 00:20:58.980
So we started on windows
phone seven. And so it

407
00:20:58.980 --> 00:21:03.060
was only one resolution. If
I'm, if I'm, if I

408
00:21:03.060 --> 00:21:06.450
remember correctly for night though,
we do run on windows

409
00:21:06.450 --> 00:21:09.420
phone eight, but because windows
phone eight supports windows phone

410
00:21:09.480 --> 00:21:12.570
seven and 7.5 application. We
don't, we, we don't have

411
00:21:12.570 --> 00:21:15.540
any special like windows phone,
eight code in there. Okay.

412
00:21:15.630 --> 00:21:17.220
So if I ran you
on one of the new,

413
00:21:17.220 --> 00:21:19.050
like seven 20 P ones,
there might be a little

414
00:21:19.050 --> 00:21:21.720
bar. Yeah, Correct. It will,
it would run at the

415
00:21:21.750 --> 00:21:23.910
old resolution. So how do
you think that you'll, how

416
00:21:23.910 --> 00:21:25.320
do you think you'll handle
that if you've been thinking

417
00:21:25.320 --> 00:21:27.270
about that and is that
just a matter of, Oh,

418
00:21:27.270 --> 00:21:29.700
you just need to recognize
the resolution and paint. Well,

419
00:21:29.700 --> 00:21:34.170
we basically, we basically solve
that problem on iPad. I

420
00:21:34.170 --> 00:21:37.830
mean, with iPhone and supporting
iPhone all the way down

421
00:21:37.830 --> 00:21:42.270
to three GS and up
to the iPad. So yes.

422
00:21:42.600 --> 00:21:44.640
So we have multiple, I
mean, that's, that's pretty much

423
00:21:44.640 --> 00:21:47.740
what, what Dean just said,
multiple version of the, of,

424
00:21:47.740 --> 00:21:51.500
of the textures also since
we're three D games mean

425
00:21:51.500 --> 00:21:53.730
it's a little bit easier
to, to handle scaling, at

426
00:21:53.730 --> 00:21:55.770
least for the rendering of
the three D since it's

427
00:21:55.890 --> 00:22:01.030
by definition, a scalable, beneficial,
scalable for the UI. That's

428
00:22:01.030 --> 00:22:03.630
that's a little bit more
involved. There's some, some logic

429
00:22:03.630 --> 00:22:06.060
in that actually it's, it's
one of the hardest thing

430
00:22:06.060 --> 00:22:08.460
to do is to have
a scalable UI that works

431
00:22:09.000 --> 00:22:11.550
on all those devices. Right.
Well, how did you do

432
00:22:11.550 --> 00:22:13.740
it? Like, let's talk about
your, when you start up

433
00:22:13.740 --> 00:22:16.100
and you have your start
settings and all that, and

434
00:22:16.100 --> 00:22:18.960
the three GS, it looks
great on a forum or

435
00:22:18.960 --> 00:22:22.230
a retina display for Yeah.
So, so it's, it's, it's

436
00:22:22.230 --> 00:22:26.970
a matter of scaling properly
based on resolution and DPI

437
00:22:28.050 --> 00:22:30.300
and making sure that you
select the right font to,

438
00:22:30.930 --> 00:22:33.780
because while obviously some font
they're not going to look

439
00:22:34.830 --> 00:22:37.110
good on, on smaller screens.
I mean, on the three

440
00:22:37.110 --> 00:22:39.900
GS where it's gonna look
great on, on a, on

441
00:22:39.900 --> 00:22:44.040
a 4g. So yeah. That's,
I mean, that's, that's all

442
00:22:44.130 --> 00:22:47.370
just scaling layouts also a
little bit. Well, you're, you're,

443
00:22:47.370 --> 00:22:49.590
you're making a gesture like
it's trivial, but I think

444
00:22:49.590 --> 00:22:51.840
that the, for the listener
who's thinking about getting into

445
00:22:51.840 --> 00:22:55.680
this, this is really interesting.
So you can use fonts,

446
00:22:55.680 --> 00:22:57.270
you can use like, you
know, these two type fonts

447
00:22:57.270 --> 00:22:59.520
or these open, you know,
OTF or what kind of

448
00:22:59.520 --> 00:23:03.120
fonts are these that I
can use Basically using the,

449
00:23:03.450 --> 00:23:05.640
the, the X, X and
S right. Fonts. And what

450
00:23:05.640 --> 00:23:09.960
we're doing is, is we
have the same font, like

451
00:23:09.960 --> 00:23:14.850
many different resolution and, or
code or UI code based

452
00:23:14.850 --> 00:23:18.270
on that resolution. And the
final size of that UI

453
00:23:18.270 --> 00:23:22.980
element, we'll select the right
font at, at run time.

454
00:23:23.070 --> 00:23:25.800
So we don't, we don't
have, we don't precompute anything.

455
00:23:25.800 --> 00:23:27.960
I mean, it's all done
a run time, so it's

456
00:23:27.960 --> 00:23:30.870
very flexible. It's, you know,
it works for when they

457
00:23:30.870 --> 00:23:33.360
came up, came out with
a iPad, the iPad mini,

458
00:23:33.660 --> 00:23:35.100
we didn't have to do
anything. It was your choice.

459
00:23:35.140 --> 00:23:38.070
It just works right now,
when you get into the

460
00:23:38.100 --> 00:23:39.690
game and you get into
like the cockpit, do you

461
00:23:39.690 --> 00:23:43.620
have like cockpit renderings? So
the copied in 3d it's

462
00:23:44.040 --> 00:23:48.140
it doesn't have the rendering
of the glass display yet.

463
00:23:48.320 --> 00:23:51.080
So it's not, it's not
interactive, but that's something that

464
00:23:51.080 --> 00:23:53.780
we definitely want to get
into the game at some

465
00:23:53.780 --> 00:23:55.480
point. So it's a, it's
a, it's a series of

466
00:23:55.480 --> 00:24:00.220
arts, art it's textures. Textures.
Yes. What is the difference?

467
00:24:00.220 --> 00:24:01.870
If I say like, what's
the texture? Is it just

468
00:24:01.870 --> 00:24:03.670
a PNG in a folder
somewhere? Yeah. Yeah. It's just

469
00:24:03.670 --> 00:24:06.460
an image that, that is
loaded and applied on the

470
00:24:06.460 --> 00:24:10.780
3d in there and is
static for, for the sake

471
00:24:10.780 --> 00:24:14.330
of the simulation. We want
to have actual, like all

472
00:24:14.350 --> 00:24:16.030
those screens, as you see
in a, in a seven

473
00:24:16.030 --> 00:24:18.910
47 cockpit, for example, that
tells you that it gives

474
00:24:18.910 --> 00:24:22.540
you the maps or gives
you information about, about the

475
00:24:22.540 --> 00:24:26.520
plane. Those things are usually
dynamic and that's, that's, that's

476
00:24:26.540 --> 00:24:29.110
things that we want to
be able to rendering in

477
00:24:29.110 --> 00:24:33.820
real time. And that's also
does it also involve a

478
00:24:33.820 --> 00:24:35.910
UI scaling problem. So you
have to be able to

479
00:24:35.920 --> 00:24:37.300
just scale it to the
right. Yeah. Look, if you're

480
00:24:37.300 --> 00:24:40.630
going to overlay an altimeter
over this, a dynamic one

481
00:24:40.630 --> 00:24:41.880
over the static one, there's
gonna be a lot of

482
00:24:41.890 --> 00:24:44.470
things. So the idea behind
this, I mean, if you

483
00:24:44.620 --> 00:24:49.300
want to go a little
bit technical, <inaudible> The technical

484
00:24:49.300 --> 00:24:52.360
enough, given that we're 24
minutes in, So w w

485
00:24:52.360 --> 00:24:55.360
we were gonna do this
all in vector graphics, a

486
00:24:55.420 --> 00:24:58.780
and B, and it's Mo
it's probably what, what's the

487
00:24:58.780 --> 00:25:01.150
best for a UI in
general. I mean, that's what,

488
00:25:01.150 --> 00:25:05.470
that's, what is using WPF
a lot, or like as

489
00:25:05.830 --> 00:25:08.260
is to give you just
an example of, of vector

490
00:25:08.260 --> 00:25:11.470
graphics. So we, we want
to do this, the more

491
00:25:11.470 --> 00:25:13.570
you we do in, in
vector graphics, the better, the

492
00:25:13.600 --> 00:25:16.420
easier it is to scale
to many resolutions. So that's,

493
00:25:16.450 --> 00:25:18.730
I mean, that's, I guess
that's what that would advise

494
00:25:19.120 --> 00:25:21.250
anybody who wants to do
it There's model game there

495
00:25:21.250 --> 00:25:23.740
to support you in these,
or is that No, that,

496
00:25:23.740 --> 00:25:25.960
that's more, that that's things
that you have to do

497
00:25:25.960 --> 00:25:28.510
on top of motor game,
because motor game is still,

498
00:25:28.510 --> 00:25:32.590
it's fairly low level allowing
you to do that kind

499
00:25:32.590 --> 00:25:35.380
of stuff, but that's, that's,
you know, the extra IP

500
00:25:35.380 --> 00:25:37.120
that you put on it.
Okay. So this is more

501
00:25:37.120 --> 00:25:39.940
math for you. And then
you'll use the underlying constructs

502
00:25:40.000 --> 00:25:42.580
to present that. So model
games supports things like 2d

503
00:25:42.580 --> 00:25:45.310
sprites, and it supports matrix
math and things that you

504
00:25:45.310 --> 00:25:48.970
care about Mean drawing lines,
for example, but something you

505
00:25:48.970 --> 00:25:52.960
have to realize is there's
a tons of <inaudible> samples

506
00:25:52.960 --> 00:25:56.650
and X, and a example
tutorials out there that have

507
00:25:56.680 --> 00:25:59.260
already that kind of component
because X, and it has

508
00:25:59.320 --> 00:26:04.270
a pretty heavy component based
system. And, and so there's

509
00:26:04.560 --> 00:26:06.490
good chances that, that, that
type of code is already

510
00:26:06.490 --> 00:26:10.630
written somewhere in a tutorial
that could help you start,

511
00:26:10.810 --> 00:26:14.080
you know, not from nothing.
Do you have any backend?

512
00:26:14.080 --> 00:26:16.120
Are there, are you uploading
things or do you use

513
00:26:16.120 --> 00:26:18.640
your community sign into your
application and then post things

514
00:26:18.640 --> 00:26:23.260
up on some? So we
do have a leaderboard system

515
00:26:23.260 --> 00:26:27.730
that law, that logs your,
your, your landings logs, your,

516
00:26:27.730 --> 00:26:30.720
your flat hours right now,
it's not available yet on,

517
00:26:30.720 --> 00:26:35.350
on iOS. It's just for
windows, phone users, but that's

518
00:26:35.350 --> 00:26:39.880
definitely something that we want
to, to, to, to provide

519
00:26:39.880 --> 00:26:43.030
to as many people as
possible, because that's what creates

520
00:26:43.050 --> 00:26:44.670
the, you shouldn't get you
To show you that you

521
00:26:44.670 --> 00:26:47.610
should, let me say you
Azure mobile services. Yeah. So

522
00:26:47.610 --> 00:26:51.080
are you on Android? W
so, no, not yet, but

523
00:26:51.110 --> 00:26:53.810
that's definitely not our next
platform we're working on it.

524
00:26:55.160 --> 00:26:57.650
We can probably announce that
kind of work. I mean,

525
00:26:57.650 --> 00:26:59.390
it works, but so you
have it working on your

526
00:26:59.390 --> 00:27:01.850
Android phone. Yes, we have
it working on our Android.

527
00:27:01.970 --> 00:27:04.100
Okay. So this is a
good question. So Dean's like,

528
00:27:04.100 --> 00:27:06.950
Hey, it works everywhere. Why
Android last? And what was

529
00:27:06.950 --> 00:27:08.510
it that's slowing you down
on Android? Is it the

530
00:27:08.510 --> 00:27:10.730
number of devices that are
there or are they just

531
00:27:10.820 --> 00:27:14.390
setting up the bill? I
guess it was, it was

532
00:27:14.390 --> 00:27:19.040
a popularity contest when we
choose between iOS and Android.

533
00:27:19.910 --> 00:27:21.770
And also the fact that,
I mean, we're, we're a

534
00:27:21.770 --> 00:27:25.400
very small team and, and
it's, it's a matter of

535
00:27:25.430 --> 00:27:27.590
being able to support all
this platform at the same

536
00:27:27.590 --> 00:27:30.620
time. And Android also has
a lot more devices, a

537
00:27:30.620 --> 00:27:33.680
lot more fragmented. It's getting
better, but has a lot

538
00:27:33.680 --> 00:27:37.940
more fragmentation. So that, that's
the reason, the main reason

539
00:27:37.940 --> 00:27:41.720
why we chose, I can
just work on one Android.

540
00:27:41.720 --> 00:27:42.650
Like you want me to
say, Oh, it works on

541
00:27:42.650 --> 00:27:44.720
galaxy as threes and everyone
else. Good luck. You want

542
00:27:44.720 --> 00:27:47.090
it to work everywhere. Exactly.
Yeah. So it's really more

543
00:27:47.090 --> 00:27:49.730
of a testing thing. It's
more of a testing thing

544
00:27:49.730 --> 00:27:52.400
and that's, yeah, that's, that's
where we hear it. And

545
00:27:52.400 --> 00:27:54.290
the build the building and
the setting up of the

546
00:27:54.290 --> 00:27:56.510
build and the sharing of
the code was not the

547
00:27:56.510 --> 00:28:00.190
case Complicated. No, not that
complicated. I mean, we, as,

548
00:28:00.190 --> 00:28:03.680
as Dean mentioned, we, we
sharing 90, 95%, if not

549
00:28:03.680 --> 00:28:05.990
more of our code. I
mean, we have, we have

550
00:28:05.990 --> 00:28:09.800
a solution for each platform
and we have, when we

551
00:28:09.800 --> 00:28:13.510
code, we have all the,
all the different solution open

552
00:28:13.520 --> 00:28:17.690
in visual studio, and we
just switched from one visuals

553
00:28:17.690 --> 00:28:19.280
to do it to another,
to just make sure that

554
00:28:19.280 --> 00:28:20.780
we don't break in it.
So I've been seeing different

555
00:28:20.780 --> 00:28:22.460
ways people to do this.
I've seen one way where

556
00:28:22.460 --> 00:28:25.760
they'll have like my game
dot portable and they'll have

557
00:28:26.180 --> 00:28:29.090
windows phone, seven windows, phone,
eight windows, phone windows eight,

558
00:28:29.120 --> 00:28:31.130
and then they'll go Android
and iOS, or sometimes they'll

559
00:28:31.130 --> 00:28:33.800
have tablet and phone, and
they'll all open like five,

560
00:28:33.800 --> 00:28:38.060
six projects, or they'll have
one visual studio per, per

561
00:28:38.060 --> 00:28:40.520
platform. So you have one,
Yeah. We have one per

562
00:28:40.520 --> 00:28:43.010
platform. I mean, there's a
multiple that does just power,

563
00:28:43.910 --> 00:28:45.860
No preference, but this is
good information for people to

564
00:28:45.860 --> 00:28:48.950
hear. So then you, you're
using visual studio and then

565
00:28:48.950 --> 00:28:51.080
the integration. And then when
you want to build on,

566
00:28:51.620 --> 00:28:54.020
on, on iPhone, you have
a build server, that's your

567
00:28:54.020 --> 00:28:57.080
Mac that does the Building.
So, yeah, I mean, for

568
00:28:57.140 --> 00:29:00.050
iOS so far, we use
the mono develop and now

569
00:29:00.050 --> 00:29:03.320
that they released the, the
integration with visual studio, that's,

570
00:29:03.350 --> 00:29:05.840
that's the route we're going
to, because this way we

571
00:29:05.840 --> 00:29:08.360
can really just use visual
studio all the time and

572
00:29:08.360 --> 00:29:12.080
not have to switch between
between iOS, I mean, between

573
00:29:13.340 --> 00:29:16.400
S and windows. And do
you use like ReSharper or

574
00:29:16.400 --> 00:29:19.370
any plugins, whatever you want,
Visual studio. Yeah. That's, that's

575
00:29:19.370 --> 00:29:22.610
the beauty of it as
is any, any, I think

576
00:29:22.610 --> 00:29:26.870
we using ants for, for
memory analysis and we're using,

577
00:29:26.870 --> 00:29:31.040
I mean, a bunch of
other plugins, the power tools

578
00:29:31.040 --> 00:29:36.250
are power commands, memory profilers
and stuff too, from the,

579
00:29:36.250 --> 00:29:39.500
the one. Yes. Yeah. And
that lets you profile the

580
00:29:39.510 --> 00:29:42.400
stuff that run in windows,
things like that. What about

581
00:29:42.400 --> 00:29:44.410
when you're running an iOS?
Cause you're running native. Well,

582
00:29:44.420 --> 00:29:47.740
usually those things we want
to, we want to do

583
00:29:47.740 --> 00:29:51.010
the debugging and profiling on
the device. And for this,

584
00:29:51.010 --> 00:29:55.300
we use the, we use
instruments. So the it's provided

585
00:29:55.300 --> 00:29:58.630
by Apple, which is fairly
accurate. I mean, it's, it's

586
00:29:58.630 --> 00:30:00.490
pretty good. The answer is
like, allow us on the

587
00:30:00.490 --> 00:30:05.230
windows or any memory profiler
directly on windows allows us

588
00:30:05.310 --> 00:30:07.840
to really quickly see you.
Okay. What are we doing

589
00:30:07.840 --> 00:30:10.990
wrong in NC sharpening? Are
we not? Are we using

590
00:30:10.990 --> 00:30:13.810
the language properly? So I
think of three things when

591
00:30:13.810 --> 00:30:16.900
I'm thinking about developing software,
like this, there's the writing,

592
00:30:16.900 --> 00:30:19.880
the code that is customed
to your application. That's the

593
00:30:19.930 --> 00:30:24.160
IP, there's the debugging issues
with the fact that you're

594
00:30:24.160 --> 00:30:28.180
on multiple platforms and then
there's the actually putting it

595
00:30:28.180 --> 00:30:30.610
in the app store. Which
of those three things do

596
00:30:30.610 --> 00:30:32.680
you spend the most time
messing around with? Is it

597
00:30:32.680 --> 00:30:36.760
the writing, your code? Is
it the debugging cross-platform issues

598
00:30:36.760 --> 00:30:38.980
or is it just the
tedious stuff of going into

599
00:30:38.980 --> 00:30:41.800
the app store on multiple
app stores and uploading all

600
00:30:41.800 --> 00:30:43.930
of your PNGs and stuff?
I will say the leader

601
00:30:43.930 --> 00:30:48.520
to, well, we say that
the, you know, the, the

602
00:30:48.580 --> 00:30:51.370
last 10% of, of your,
of your product is taking

603
00:30:51.370 --> 00:30:53.680
90% of your time. Well,
that's all the screenshots. Yeah,

604
00:30:53.710 --> 00:30:57.400
right. Exactly. I was joking
with somebody that windows phone

605
00:30:57.400 --> 00:30:59.500
seven and windows phone eight,
like you're going to spend

606
00:30:59.500 --> 00:31:01.180
half of your time writing
your app. And the other

607
00:31:01.180 --> 00:31:03.520
half is taking screenshots of
every resolution that you put

608
00:31:03.520 --> 00:31:06.370
in the description, the description
in every languages. And you're

609
00:31:06.370 --> 00:31:08.650
doing that to doing at
least this description. And we

610
00:31:08.650 --> 00:31:12.580
don't, we don't localize for
every languages, but we did

611
00:31:12.580 --> 00:31:15.790
the description in all the
supported languages on the app

612
00:31:15.790 --> 00:31:18.490
store, on the app store
and on the marketplace. What

613
00:31:18.490 --> 00:31:21.940
did you hire? Like a
translator. Yes. Wow. That's like

614
00:31:21.940 --> 00:31:23.620
a real thing. So you
guys have quit your jobs

615
00:31:23.620 --> 00:31:25.600
and this is your company
now flying development studio is

616
00:31:25.600 --> 00:31:28.780
you are, it's a real
thing. Yeah. Yeah. That's so

617
00:31:28.780 --> 00:31:31.120
we've been, we started the
company two years ago and

618
00:31:31.900 --> 00:31:35.050
we'll own own for one
of us for a year

619
00:31:35.050 --> 00:31:37.750
and myself for like the
past four months. That's fantastic.

620
00:31:37.750 --> 00:31:40.510
Congratulations. So she sharp and
motto game along with Xamarin

621
00:31:40.510 --> 00:31:42.550
and visual studio has allowed
you to quit your day

622
00:31:42.550 --> 00:31:45.730
job, correct. And make piles
and piles of money in

623
00:31:45.730 --> 00:31:48.880
every app store on the
planet to, to, to live.

624
00:31:48.970 --> 00:31:51.220
Okay. Two guys can live,
so it's not quite piles

625
00:31:51.220 --> 00:31:52.870
and piles of money, but
two guys are living quite

626
00:31:52.870 --> 00:31:55.840
nicely. That's great. So infinite
flight, we can go and

627
00:31:55.840 --> 00:31:58.750
we can find that on
windows. And when those marketplace

628
00:31:58.760 --> 00:32:01.480
we find the app store
and then someday soon and

629
00:32:01.480 --> 00:32:04.440
an Android marketplace. Yes. That's
fantastic. Thanks so much for

630
00:32:04.450 --> 00:32:06.610
that perfectly. Thank you, Scott
and Dean, where can we

631
00:32:06.610 --> 00:32:09.650
go and learn more about
monarchy? Well, there's a Monarch

632
00:32:09.650 --> 00:32:13.140
game.net, which is that's our
main launch site. And that

633
00:32:13.140 --> 00:32:17.250
will give you links to
a copex site for the

634
00:32:17.250 --> 00:32:19.290
forums. And I'll get app
site where you can get

635
00:32:19.290 --> 00:32:23.070
the code or download the
installers. We do binary stores

636
00:32:23.070 --> 00:32:26.010
as well for those people
running on windows. So yeah,

637
00:32:26.040 --> 00:32:28.830
just go to morgan.net. If
you're interested and get involved,

638
00:32:28.830 --> 00:32:33.810
it is a community project.
So unlike Felipe, I don't

639
00:32:33.810 --> 00:32:37.680
actually make any money, not
actually a product of Xamarin.

640
00:32:37.770 --> 00:32:42.400
No, it's, it's free community
product. So for those exnayed

641
00:32:42.400 --> 00:32:45.590
developers out there, if you
want to take control of

642
00:32:45.590 --> 00:32:47.480
the future of X and
eight and get involved with

643
00:32:47.480 --> 00:32:50.350
the projects. Okay, cool. And
speaking of free things, you

644
00:32:50.350 --> 00:32:51.940
can go up and you
can get either the tiny,

645
00:32:51.970 --> 00:32:54.490
tiny starter edition and try
out Xamarin, or you can

646
00:32:54.490 --> 00:32:56.590
get the trials and try
out the full trial. Yeah.

647
00:32:56.590 --> 00:32:58.630
You can get the trials
at the moment when our

648
00:32:58.640 --> 00:33:01.780
game doesn't really work with
a starter, this is a

649
00:33:01.780 --> 00:33:04.330
bit too big. We are
working with Xamarin to get

650
00:33:04.330 --> 00:33:07.090
it white listed. So people
will be able to make

651
00:33:07.090 --> 00:33:10.230
small games using one again
with a starter. So, and

652
00:33:10.240 --> 00:33:11.890
as soon as we get
that and that sorted out,

653
00:33:11.890 --> 00:33:14.470
we'll make an announcement on
the website. Absolutely brilliant. Well,

654
00:33:14.470 --> 00:33:17.020
thanks so much for chatting.
Thanks for having us. This

655
00:33:17.020 --> 00:33:19.210
has been another episode of
Hansel minutes and we'll see

656
00:33:19.210 --> 00:33:20.170
you again next week.

