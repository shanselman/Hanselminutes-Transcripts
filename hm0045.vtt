WEBVTT FILE

1
00:00:12.060 --> 00:00:17.070
From Hansel minutes.com it's Hansel
minutes or weekly discussion with

2
00:00:17.070 --> 00:00:21.630
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:21.630 --> 00:00:28.290
is Lawrence Ryan announcing show number
45 recorded Wednesday, January 3rd, 2007. Support

4
00:00:28.290 --> 00:00:31.860
for handsome limits is provided
by COVID Smith tools, makers

5
00:00:31.890 --> 00:00:34.620
of code Smith and extensible.
Have the base code generator

6
00:00:34.620 --> 00:00:38.940
for.net. Hanselman is listeners. Get
$100 off code Smith professional

7
00:00:38.940 --> 00:00:45.600
with coupon code H M
100. online@covidsmithtools.com and buy slash

8
00:00:45.630 --> 00:00:49.500
end software red carpet subscriptions.
The most comprehensive solution for

9
00:00:49.500 --> 00:00:54.510
any connectivity to your.net and
asp.net application with components for

10
00:00:54.510 --> 00:01:02.160
every major internet protocol online@wwwdotandsoftware.com.
Support is also provided by

11
00:01:02.160 --> 00:01:06.420
dotnet developers journal. The world's
leading dotnet developer magazine online

12
00:01:06.420 --> 00:01:11.400
at www dot <inaudible> dot
com. In this episode, Scott

13
00:01:11.400 --> 00:01:18.840
and Kroll discuss programming language
extensibility. Hi, this is Carl Franklin

14
00:01:18.840 --> 00:01:20.760
and you're listening to Hansel
minutes from handsome and it's

15
00:01:20.760 --> 00:01:23.820
dot com. I'm here with
Scott Hanselman. We're back from

16
00:01:23.820 --> 00:01:27.930
a, from a long period
of hiatus. Scott you're in

17
00:01:28.050 --> 00:01:30.480
Tanzania, weren't you? Yeah, I
was, I was in a

18
00:01:30.480 --> 00:01:34.470
Russian Tanzania, just a couple
of hours West of Mount

19
00:01:34.470 --> 00:01:39.180
Kilimanjaro. So what was, what
were you doing there? My

20
00:01:39.180 --> 00:01:40.710
wife and I, my wife,
she was in Bob way.

21
00:01:40.710 --> 00:01:43.860
We go to Africa every
year to visit family. We

22
00:01:43.860 --> 00:01:47.580
usually go to Zimbabwe or
South Africa, but most my wife

23
00:01:47.610 --> 00:01:50.580
Mo her sister in law
works at the Rwanda and

24
00:01:50.580 --> 00:01:53.700
war crimes tribunal, which is
in Urrutia cause Rwanda is

25
00:01:53.700 --> 00:01:57.750
just to the West of
Tanzania right next to Burundi.

26
00:01:58.710 --> 00:02:00.780
So she works for the
war crimes tribunal for the

27
00:02:00.780 --> 00:02:03.360
UN, and we want to
just go visit her. And

28
00:02:03.630 --> 00:02:07.410
we ended up having kind
of a informal family reunion.

29
00:02:08.130 --> 00:02:10.890
Moe is number four of
seven kids, and we ended

30
00:02:10.890 --> 00:02:13.380
up getting quite a few
kids up there at the

31
00:02:13.380 --> 00:02:16.080
same time. Wow. And this
is near a, the big

32
00:02:16.080 --> 00:02:19.110
mountain Kilimanjaro, right? Yeah, it
is. We actually got a

33
00:02:19.110 --> 00:02:20.940
chance to go to Kilimanjaro
as well, but we're not

34
00:02:20.940 --> 00:02:24.060
really climber types. And since
we took Zanesville our 13

35
00:02:24.060 --> 00:02:26.880
month old with us, which
was interesting on a 25

36
00:02:26.880 --> 00:02:30.420
hour flight, by the way,
we just kinda went to

37
00:02:30.420 --> 00:02:33.210
the base and looked around
at school. We were there

38
00:02:33.210 --> 00:02:35.580
for a month. We hung
out for Christmas, learned Swahili

39
00:02:35.580 --> 00:02:38.310
and generally had a good
time. I took my parents

40
00:02:38.310 --> 00:02:40.500
to their first time anywhere.
First time out of the,

41
00:02:40.510 --> 00:02:42.840
on a plane for some
out of the country. Well,

42
00:02:42.870 --> 00:02:44.580
I think actually they went
to Mexico once, but I

43
00:02:44.580 --> 00:02:47.790
don't think that counts. That's
just South San Diego. So

44
00:02:47.790 --> 00:02:50.640
how do you say I'm
a VB programmer in Swahili?

45
00:02:52.770 --> 00:03:04.900
I don't know. I don't
know. Need you foods talk

46
00:03:04.900 --> 00:03:07.900
on you, new foods, new
taco. What would you, food's

47
00:03:07.900 --> 00:03:12.850
a VB programmer. Wow. You
actually attempted that. I think

48
00:03:12.850 --> 00:03:14.680
that means, I think that
means I want to learn

49
00:03:14.710 --> 00:03:17.050
to be a BB programmer,
but it's it, you know,

50
00:03:17.080 --> 00:03:20.920
I was only there a
month. Wow. It's still impressive.

51
00:03:20.950 --> 00:03:23.620
So what are we talking
about today, Scott? Well, you

52
00:03:23.620 --> 00:03:26.050
know, we wanted to get
back into the programming way

53
00:03:26.050 --> 00:03:29.290
of doing things. And I
think that the programming shows

54
00:03:29.290 --> 00:03:31.060
are the best. That's what
we're good at. We're programmers.

55
00:03:31.990 --> 00:03:34.780
And I was looking at
this white paper that was

56
00:03:34.780 --> 00:03:38.140
up kind of a throwaway
thing buried inside of the

57
00:03:38.260 --> 00:03:42.520
announcement that Microsoft released support
for iron Python. You remember

58
00:03:42.520 --> 00:03:47.140
a while back iron Python
was developed basically an implementation

59
00:03:47.140 --> 00:03:51.220
of Python that would compile
too ill to intermediate language.

60
00:03:51.970 --> 00:03:56.410
And they released iron Python
for asp.net. And we had

61
00:03:56.410 --> 00:03:59.800
done that, that one show
on dynamic languages, right. And

62
00:03:59.800 --> 00:04:03.940
then, you know, John Lamb, who's
at I unknown.com John Lamb, who

63
00:04:03.940 --> 00:04:09.100
created a Ruby CLR, CLR.
Exactly. That's that bridge between

64
00:04:09.100 --> 00:04:11.710
Ruby and the CLR. It's
kind of like calm interrupt

65
00:04:11.740 --> 00:04:16.090
in the sense that actual
Ruby code, not, not Ruby

66
00:04:16.480 --> 00:04:20.980
compiled to IRL, but actual
interpreted Ruby code could call.net

67
00:04:20.980 --> 00:04:25.720
objects and talk to compile.net
objects as well as use

68
00:04:25.720 --> 00:04:30.850
things like inline sharp. He's
moving to Redmond. Yeah. We

69
00:04:30.850 --> 00:04:34.750
knew he went to go
join the firm, but I

70
00:04:34.750 --> 00:04:36.970
didn't know he was moving.
That's pretty. Yeah. So he,

71
00:04:37.030 --> 00:04:38.920
I actually, he emailed me
a couple of days ago

72
00:04:38.920 --> 00:04:41.710
asking where he should bank.
Right. And you know, I'm

73
00:04:41.710 --> 00:04:43.180
banker type. So he says,
where should I bank a

74
00:04:43.180 --> 00:04:45.700
movement? Cause he's from Canada.
Yeah. So I said, you

75
00:04:45.700 --> 00:04:48.160
know, bank at first technology
credit union, it's Microsoft credit

76
00:04:48.160 --> 00:04:49.900
union, blah, blah, blah. And
then I started thinking about

77
00:04:49.900 --> 00:04:53.110
this. He's going to move
to work on the CLR

78
00:04:53.110 --> 00:04:54.880
team as a program manager.
And he, and he's all

79
00:04:54.880 --> 00:04:57.280
about Ruby and he wouldn't
make a move like that

80
00:04:57.280 --> 00:04:59.230
unless he was serious about
something. And you and I

81
00:04:59.230 --> 00:05:01.660
had talked a little bit
in the dynamic language show

82
00:05:01.660 --> 00:05:06.040
about that. Microsoft's clearly starting
to think about dynamic languages.

83
00:05:06.280 --> 00:05:09.220
So I'm looking at this
release of iron Python and

84
00:05:09.220 --> 00:05:11.350
there's this really great white
paper. I think you probably

85
00:05:11.350 --> 00:05:13.750
have a link for it.
I, I sent you by

86
00:05:13.750 --> 00:05:16.330
a guy named David Ebo.
It's buried in the middle

87
00:05:16.330 --> 00:05:22.330
of the announcement. It's just
an asp.net/iron Python. And it's

88
00:05:22.330 --> 00:05:25.570
a white paper on the
new dynamic language extensibility model

89
00:05:25.570 --> 00:05:29.140
for asp.net. Now I love
the CLR team. I love

90
00:05:29.140 --> 00:05:31.840
the.net framework team, but don't
you ever get the feeling

91
00:05:31.840 --> 00:05:35.410
that the, the there's some
always cool innovation going on

92
00:05:35.410 --> 00:05:40.270
in the asp.net team. Absolutely.
asp.net primarily pushes the.net framework.

93
00:05:40.420 --> 00:05:42.640
Yeah. If they're doing something
crazy, I think about all

94
00:05:42.640 --> 00:05:44.410
the different things that has
been in it has influenced

95
00:05:44.980 --> 00:05:49.810
<inaudible> yup. Is so much
different from ISX. And <inaudible>

96
00:05:49.830 --> 00:05:53.950
because of what the asp.net
team continues to do, you

97
00:05:53.950 --> 00:05:58.640
know, Ajax when, when migrant,
you know, things, what kind

98
00:05:58.650 --> 00:06:00.260
of, what they're doing in
the new version of outlook,

99
00:06:00.260 --> 00:06:02.690
web access, you know, they
always have to come down

100
00:06:02.690 --> 00:06:04.730
to the asp.net team and
see, well, what kind of

101
00:06:04.730 --> 00:06:07.610
creative things can you come
up with? Yeah. So, you

102
00:06:07.610 --> 00:06:11.300
know, asp.net and, and even
classic ASP before always supported

103
00:06:11.300 --> 00:06:14.660
some kind of an extensibility
model, right? If you create

104
00:06:14.660 --> 00:06:18.440
a language, if you make
Carl Lange as a, as

105
00:06:18.440 --> 00:06:20.690
a third party vendor that
makes compilers, you know, you

106
00:06:20.690 --> 00:06:24.410
could certainly use that for
asp.net. Right. Right. You'd go

107
00:06:24.410 --> 00:06:29.210
into the page and you'd
say language equals whatever Carl

108
00:06:29.210 --> 00:06:31.730
Lange, and you'll be able
to do that. But that's

109
00:06:31.730 --> 00:06:36.710
assuming that your language would
actually compile into IRL at

110
00:06:36.710 --> 00:06:43.600
compile time and, and be
a real assembly. But the,

111
00:06:43.600 --> 00:06:47.240
the statically typed languages, statically,
compiled languages, rather like C

112
00:06:47.240 --> 00:06:50.120
sharpening, there's more dynamic languages
like Python and like Ruby.

113
00:06:50.750 --> 00:06:55.880
So they changed asp.net in
order to allow this extensibility

114
00:06:55.880 --> 00:06:57.710
model and this, this white
paper, I thought it was

115
00:06:57.710 --> 00:06:59.870
so interesting that I thought
we should kind of kind

116
00:06:59.870 --> 00:07:03.520
of run through it. Right.
How did they change Change

117
00:07:03.530 --> 00:07:05.800
ASP net for the next
version? Or is this a

118
00:07:05.800 --> 00:07:08.860
service pack or what, how
is it going to change?

119
00:07:09.370 --> 00:07:12.490
Well, it, it, it appears
that they've basically, they're using

120
00:07:12.490 --> 00:07:15.070
this for an asp.net to
O and they've kind of,

121
00:07:16.720 --> 00:07:19.870
they've kind of spot welded
into it. They basically hacking

122
00:07:19.870 --> 00:07:22.870
into their own thing is
white papers, really interesting. It's

123
00:07:22.870 --> 00:07:25.660
worth reading. It's only about
eight pages. Okay. And they

124
00:07:25.660 --> 00:07:28.090
talk about, you know, some
of the techniques, they have

125
00:07:28.090 --> 00:07:30.670
an asp.net that will go
over and what they did

126
00:07:30.670 --> 00:07:34.540
to, to weld in, and
then where they saw that

127
00:07:34.540 --> 00:07:37.510
there were weaknesses. And it's
pretty clear that the point

128
00:07:37.510 --> 00:07:39.460
is is that this is
early, right. I'm gleaning here.

129
00:07:39.460 --> 00:07:41.620
I don't know anything. No.
One's told me any secrets.

130
00:07:41.650 --> 00:07:44.770
Right? I'm not saying anything
that's under NDA. I'm just

131
00:07:44.770 --> 00:07:46.480
looking at stuff that you
can find on the net.

132
00:07:46.900 --> 00:07:49.810
And I am speculating. So
I'm speculating that they're so

133
00:07:49.810 --> 00:07:52.030
deeply interested in asp.net, that
they're kind of doing this

134
00:07:52.030 --> 00:07:55.690
proof of concept to think
about what we could do

135
00:07:55.690 --> 00:08:00.550
to make dynamic languages a
better experience under asp.net. Okay.

136
00:08:01.060 --> 00:08:04.150
Now We had some discussions
and some feedback after the

137
00:08:04.150 --> 00:08:08.860
dynamic languages show about early
binding, late binding dynamic, typing,

138
00:08:08.860 --> 00:08:11.950
static, typing duct typing. We
will leave people to go

139
00:08:11.950 --> 00:08:14.050
and listen to that show.
Again, some of the things

140
00:08:14.050 --> 00:08:15.760
we got, right? Some of
the things we didn't. So

141
00:08:15.760 --> 00:08:18.340
we're not going to talk
about whether we think dynamic

142
00:08:18.340 --> 00:08:22.600
languages are, are better or
static. Typing is better. We're

143
00:08:22.600 --> 00:08:24.460
just gonna kind of speak
about here's what's here's what's

144
00:08:24.460 --> 00:08:28.840
happening. Okay. Sure. So iron
iron Python is an implementation

145
00:08:28.840 --> 00:08:32.740
of Python for the CLR.
And it's really very good.

146
00:08:32.740 --> 00:08:35.350
It's considered very good at
some of the Python conferences.

147
00:08:35.350 --> 00:08:37.930
They did some tests cause
there's a standard test suite

148
00:08:38.530 --> 00:08:42.460
when someone wants to implement
Python and it's very fast,

149
00:08:42.700 --> 00:08:45.340
it's very fast. And a
lot of people like Python,

150
00:08:45.370 --> 00:08:48.850
people say that Ruby feels
a lot like Python it's.

151
00:08:49.130 --> 00:08:51.580
If you look at the
language boo, boo, that we've

152
00:08:51.580 --> 00:08:54.460
talked about before, it feels
a little bit like Python

153
00:08:54.460 --> 00:08:56.880
with a C sharp twist.
So, you know, Python's language

154
00:08:56.880 --> 00:08:59.610
has been around for a
long time. That is very

155
00:08:59.610 --> 00:09:01.800
comfortable to a lot of
people. And the idea that

156
00:09:01.800 --> 00:09:04.380
someone might want to write
pages in Python is pretty,

157
00:09:05.580 --> 00:09:09.900
pretty obvious. Certainly right now,
most people write their asp.net

158
00:09:09.900 --> 00:09:14.070
pages in sharp. And we
usually call C-sharp first among

159
00:09:14.100 --> 00:09:16.470
equals because there's, you know,
it's like, what is it?

160
00:09:16.590 --> 00:09:20.070
70% C-sharp and 30% VB
don't like that. Do you

161
00:09:20.070 --> 00:09:22.590
know what the numbers are
now? I don't know. It's

162
00:09:22.590 --> 00:09:24.210
something like it's something like
that. I mean, VB is

163
00:09:24.210 --> 00:09:27.870
a first class language and
C-sharp is just kind of

164
00:09:27.870 --> 00:09:29.730
a little bit more first
class because every once in

165
00:09:29.730 --> 00:09:31.710
a while something will be
released and they'll only support

166
00:09:31.710 --> 00:09:34.790
C-sharp well, you know, You
don't want to give people

167
00:09:34.790 --> 00:09:38.000
the wrong impression most of
the time it's because the

168
00:09:38.000 --> 00:09:40.430
examples are in C sharp,
because what comes out of

169
00:09:40.430 --> 00:09:45.110
Redmond is mostly from, comes
from C sharp developers, but

170
00:09:45.110 --> 00:09:52.010
it all eventually gets VBI
sized. Right? Absolutely. Microsoft recognizes

171
00:09:52.010 --> 00:09:55.400
that choice is important, you
know, and as much as

172
00:09:55.400 --> 00:09:57.530
we say things like this
language and that language are

173
00:09:57.530 --> 00:10:00.740
syntactic sugar, and they're just
different skins on the same

174
00:10:00.740 --> 00:10:04.580
underlying thing, they each have
things that are kind of

175
00:10:04.580 --> 00:10:06.740
unique to them, but it's
always just been those two

176
00:10:06.740 --> 00:10:11.660
languages. So it appears that
Microsoft trying to work towards

177
00:10:11.690 --> 00:10:14.630
more choice, which is always
a good thing, but it's

178
00:10:14.630 --> 00:10:16.820
not just picking other languages
to do this work in,

179
00:10:16.820 --> 00:10:20.690
but it's also languages that
are fundamentally different than what

180
00:10:20.690 --> 00:10:23.480
people were expecting when they
design stuff. So let's talk

181
00:10:23.480 --> 00:10:27.830
about kind of how the
existing asp.net model works, right?

182
00:10:28.580 --> 00:10:31.640
So let's say that you
have an ASP X page,

183
00:10:32.000 --> 00:10:34.700
right. That's sitting on the
file system and it's got

184
00:10:34.700 --> 00:10:38.450
some, some code in, you
know, asp.net will parse that

185
00:10:38.450 --> 00:10:41.690
page, that ASP X page,
and then look at all

186
00:10:41.690 --> 00:10:43.730
of the different things that
exist within it. It might

187
00:10:43.730 --> 00:10:47.120
have some declarative markup, like,
you know, the HTML body

188
00:10:47.120 --> 00:10:50.540
tags, meta-tags things like that.
It may include some server

189
00:10:50.540 --> 00:10:53.060
controls that it's going to
go have to get and

190
00:10:53.060 --> 00:10:56.270
resolve. And then it may
have code snippets. Now a

191
00:10:56.270 --> 00:10:58.250
lot of people put their
code in code behinds, but

192
00:10:58.250 --> 00:11:00.950
there's still some value in
putting your code and code

193
00:11:00.950 --> 00:11:03.170
snippets that are in line
in the ASB X page.

194
00:11:03.200 --> 00:11:09.530
Right? So then asp.net, you
know, creates this, this code

195
00:11:09.530 --> 00:11:12.650
Dom tree, right? The code
Dom is literally that it's

196
00:11:12.650 --> 00:11:17.270
a document object model representing
code one time. We'll talk

197
00:11:17.270 --> 00:11:20.750
about how you can use
the code down to generate

198
00:11:20.750 --> 00:11:24.170
your own code. We use
this to make serializers the

199
00:11:24.170 --> 00:11:28.430
XML sterilizer internal.net framework uses
the code Dom to represent

200
00:11:28.430 --> 00:11:32.450
this. So asp.net is making
a language independent tree to

201
00:11:32.690 --> 00:11:39.800
derive from system.web.page. And it's
going to describe the markup.

202
00:11:39.860 --> 00:11:41.720
So it takes the declarative
markup and all the different

203
00:11:41.720 --> 00:11:45.510
angle brackets, and then express
that in a, in a,

204
00:11:45.550 --> 00:11:48.410
in a code dump, or
we're just translating declarative to

205
00:11:48.410 --> 00:11:52.040
procedural. So if you go
and you say, angle bracket

206
00:11:52.100 --> 00:11:55.720
B close bracket, hello, and
then close, be just some

207
00:11:55.960 --> 00:11:58.510
literal text that eventually is
going to turn into a

208
00:11:58.510 --> 00:12:02.020
response dot right call with
your texts expressed as a

209
00:12:02.020 --> 00:12:06.190
string literal. So that's being
generated after the parsing. So

210
00:12:06.190 --> 00:12:09.250
you get this tree that
represents this Dom, this is

211
00:12:09.550 --> 00:12:16.060
not yet compiled. So then
asp.net will pick a code

212
00:12:16.060 --> 00:12:18.580
Dom provider. There's one for
VB there's one for C

213
00:12:18.580 --> 00:12:21.850
sharp. And based on that
language attribute that we talked

214
00:12:21.850 --> 00:12:26.380
about, that language equals quote
VB or C-sharp that appears

215
00:12:26.380 --> 00:12:28.360
in the page directive. And
then they're going to go

216
00:12:28.360 --> 00:12:32.170
and say, Hey, provider generate
source code, given this code

217
00:12:32.170 --> 00:12:37.120
Dom tree, we've described constructs
that are in basically L

218
00:12:37.120 --> 00:12:39.850
in this, in this code
Dom, and we'll go and

219
00:12:39.850 --> 00:12:42.610
generate that source code might
be in C sharp, might

220
00:12:42.610 --> 00:12:45.940
be in VP. It depends
on what you're doing with

221
00:12:45.940 --> 00:12:48.550
that page directive. And then
it goes, and it compiles

222
00:12:48.550 --> 00:12:50.920
that into a DLL, you
know, a temporary DLL. You've

223
00:12:50.920 --> 00:12:54.090
seen these in asp.net, and
it actually does that by

224
00:12:54.130 --> 00:12:57.670
launching the compiler, right? You
can hit a page in

225
00:12:57.670 --> 00:13:00.490
asp.net and actually see the
VB compiler, the C sharp

226
00:13:00.490 --> 00:13:03.670
compiler firing off in the
background. Same thing happens when

227
00:13:03.670 --> 00:13:07.210
you're doing XML sterilizers and
stuff like that. And then

228
00:13:07.210 --> 00:13:10.510
of course the generated assembly
gets loaded and then gets

229
00:13:10.510 --> 00:13:13.810
run, right. And all of
that code gen stuff only

230
00:13:13.810 --> 00:13:15.670
happens once the very first
time you hit the page.

231
00:13:15.670 --> 00:13:17.650
And that's why we always
have to hit asp.net pages

232
00:13:17.650 --> 00:13:20.110
ahead of time, unless we've
done all the work ahead

233
00:13:20.110 --> 00:13:25.060
of time, right. That's basically
how it works. And, you

234
00:13:25.060 --> 00:13:27.790
know, in partial classes instead
of derivation and asp.net to,

235
00:13:27.790 --> 00:13:31.780
Oh, but the general gist
is about like that. So

236
00:13:32.920 --> 00:13:36.400
there is a thing and
asp.net that no one uses,

237
00:13:36.400 --> 00:13:41.350
but the SharePoint team called
no compile pages. Okay. And

238
00:13:41.350 --> 00:13:43.450
they literally just that their
pages that are totally driven

239
00:13:43.450 --> 00:13:46.420
by data, they don't have
any compilation at all. They

240
00:13:46.420 --> 00:13:49.660
don't get any code, right?
This is basically pages that

241
00:13:49.660 --> 00:13:54.850
are static HTML and, and
server controls. But, you know,

242
00:13:54.850 --> 00:13:56.800
the SharePoint team thought that
would be useful. And just

243
00:13:56.800 --> 00:13:58.870
like I said, all the
different teams within Microsoft kind

244
00:13:58.870 --> 00:14:01.750
of put pressure on the
asp.net team to innovate, do

245
00:14:01.750 --> 00:14:05.770
different things. And it allowed
SharePoint to scale considerably when

246
00:14:05.770 --> 00:14:08.860
there were times that you
didn't need to do compilation.

247
00:14:09.280 --> 00:14:12.580
Okay. Okay. So this no
compile model exists. And basically

248
00:14:12.580 --> 00:14:15.850
that just doesn't parsing builds
this tree and executes it.

249
00:14:16.990 --> 00:14:19.900
And as long as the
page doesn't change, everything works

250
00:14:19.900 --> 00:14:25.330
just fine. So they've got
these two different models for

251
00:14:25.330 --> 00:14:29.590
asp.net pages, right? You've got
one that requires compilation statically

252
00:14:29.590 --> 00:14:32.790
ahead of time. And you've
got one that doesn't require

253
00:14:32.800 --> 00:14:35.980
compilation, but of course it's
no compile, so you don't

254
00:14:35.980 --> 00:14:38.980
get any code. So what
these guys needed when they

255
00:14:38.980 --> 00:14:41.500
wanted to do a dynamic
language was a model that

256
00:14:42.220 --> 00:14:45.910
doesn't necessarily cause static compilation,
but still lets the page

257
00:14:45.910 --> 00:14:49.030
have code. Cause once a
page gets compiled and turn

258
00:14:49.030 --> 00:14:50.800
into a deal LNS, we
hadn't yet it doesn't exactly

259
00:14:50.800 --> 00:14:53.690
get released. Right? I mean
these DLLs hang out for

260
00:14:53.690 --> 00:14:57.350
a long time cause they
get compiled and they're real

261
00:14:57.350 --> 00:15:00.260
DLLs in the temporary asp.net
files folder. And they sit

262
00:15:00.260 --> 00:15:03.260
there and they don't really
go away until you shut

263
00:15:03.260 --> 00:15:07.520
down and start over again.
So what they did was

264
00:15:07.580 --> 00:15:11.270
apparently in an asp.net to,
Oh, there was a thing

265
00:15:11.270 --> 00:15:15.170
called the page, parser filter
didn't know, I didn't know

266
00:15:15.170 --> 00:15:19.550
this existed. This is apparently
a part of the very,

267
00:15:19.550 --> 00:15:22.070
very beginning step when we
parsed the page and they

268
00:15:22.070 --> 00:15:25.340
wanted what they changed to
make this work was this

269
00:15:25.340 --> 00:15:29.150
parser. So this was an
entry point that existed that

270
00:15:29.150 --> 00:15:33.140
had been previously untapped. Exactly.
You've nailed it. And it's

271
00:15:33.170 --> 00:15:35.690
very early on in the
process. Yeah. And I don't

272
00:15:35.690 --> 00:15:38.060
know if they'll do, they
may do another way. Right.

273
00:15:38.060 --> 00:15:42.740
But this is part of
the no compile feature, but

274
00:15:42.920 --> 00:15:44.990
this is a piece that
they basically said, Oh gosh,

275
00:15:44.990 --> 00:15:47.060
you know, cause you imagine
them having this conversation, like

276
00:15:47.090 --> 00:15:49.160
what exactly are we going
to hook into to make

277
00:15:49.160 --> 00:15:52.640
this happen? And that was,
you know, that's a challenge.

278
00:15:53.810 --> 00:15:56.750
So what they did was
they made a new page,

279
00:15:56.780 --> 00:16:00.800
parser filter. So with the
no compile pages, you, you

280
00:16:00.800 --> 00:16:03.740
go into your page directive
and you say, compilation mode

281
00:16:03.740 --> 00:16:08.180
equals never. You can, you
know, with asp.net and with

282
00:16:08.180 --> 00:16:10.580
most of.net, you can basically
plug in anything you want.

283
00:16:10.580 --> 00:16:13.250
So in your web doc
and fig you go in

284
00:16:13.250 --> 00:16:16.370
and you can say in
the, in the pages section,

285
00:16:16.760 --> 00:16:20.510
right, you can go and
say page parser, filter type

286
00:16:20.690 --> 00:16:23.960
and then put your own,
which is cool. You can

287
00:16:23.960 --> 00:16:26.270
put your own page parts
or filter. You basically override

288
00:16:26.270 --> 00:16:28.670
the existing one and do
whatever you want. So they

289
00:16:28.670 --> 00:16:31.580
wrote one that customized the
parsing behavior and then actually

290
00:16:31.580 --> 00:16:38.090
allowed code in these quote
unquote no compile pages. So

291
00:16:38.240 --> 00:16:40.610
basically if the page uses
a dynamic language and in

292
00:16:40.610 --> 00:16:42.590
this example, this proof of
concept that they're doing, it's

293
00:16:42.590 --> 00:16:46.190
just iron Python. They will
make sure that the page

294
00:16:46.190 --> 00:16:48.980
inherits from a custom based
class, cause they basically created

295
00:16:48.980 --> 00:16:51.710
their own base class that
is going to allow this

296
00:16:51.710 --> 00:16:53.750
stuff to happen. So they
hooked in two different places

297
00:16:53.750 --> 00:16:58.850
here. And here's the cool
part. The, if the parser

298
00:16:59.210 --> 00:17:02.120
right, finds a code snippet,
remembering that these are not

299
00:17:02.120 --> 00:17:07.640
allowed in, in no compile
pages. Right? Right. No compile

300
00:17:07.640 --> 00:17:11.360
pages only support markup or
server controls. So if the

301
00:17:11.360 --> 00:17:13.880
parser finds a code snippet,
these are the little things

302
00:17:13.880 --> 00:17:17.570
like angle bracket percent, you
know, it actually replaces the

303
00:17:17.570 --> 00:17:22.490
snippet at parsing time with
a special control that holds

304
00:17:22.490 --> 00:17:27.590
the code. I mean, that's
just, it's horrible, but it's

305
00:17:27.590 --> 00:17:31.130
brilliant. Just drink it in.
Right. You got this model

306
00:17:31.190 --> 00:17:33.890
don't allow code. We do
allow server controls. When you

307
00:17:33.890 --> 00:17:35.750
see a code snippet, you
yank it out, you wrap

308
00:17:35.750 --> 00:17:37.880
it around and you, and
no one knows the better.

309
00:17:38.660 --> 00:17:42.410
So basically as my boss,
Chris Brooks always says that

310
00:17:43.340 --> 00:17:46.010
any problem in computer science
can be solved by one

311
00:17:46.010 --> 00:17:49.230
additional layer of indirection, right?
So they've added their own

312
00:17:49.230 --> 00:17:51.150
indirection. So for the point
of view of asp.net, as

313
00:17:51.150 --> 00:17:53.490
it says here in the,
in the white paper, there

314
00:17:53.490 --> 00:17:57.270
is no code. The snippet
becomes a control that happens

315
00:17:57.270 --> 00:18:00.560
to have a string property
with the code And that's

316
00:18:00.560 --> 00:18:03.380
all you need for that.
Well, yeah. So then they

317
00:18:03.380 --> 00:18:07.430
basically have a, an HTTP
module that lets them get

318
00:18:07.430 --> 00:18:09.500
in early in the, in
the environment and in the,

319
00:18:09.620 --> 00:18:11.960
the cycle as the app
domain gets loaded and they

320
00:18:11.960 --> 00:18:14.570
can get all of their
different modules loaded up ahead

321
00:18:14.570 --> 00:18:18.290
of time. And they have
this custom based class called

322
00:18:18.290 --> 00:18:22.430
script page that basically derives
from the standard page class

323
00:18:22.820 --> 00:18:26.990
and having those base classes,
both a module and for

324
00:18:27.110 --> 00:18:30.950
the base class for all
their pages, gives those pages

325
00:18:30.950 --> 00:18:32.960
a better way to interact
with the life cycle and

326
00:18:32.960 --> 00:18:35.480
make things fit together. The
flow of this show is

327
00:18:35.600 --> 00:18:38.630
going based on this really
create white paper. So I'm

328
00:18:38.630 --> 00:18:41.210
kind of going on the,
on the high level. Yeah.

329
00:18:41.660 --> 00:18:44.000
Got it. I mean, I've
got a few questions probably

330
00:18:44.000 --> 00:18:47.420
as do you go ahead
and I'm not sure you'll

331
00:18:47.420 --> 00:18:49.640
be able to answer them.
But my, my first question

332
00:18:49.640 --> 00:18:53.930
that comes to mind is
how, how does, how does,

333
00:18:53.930 --> 00:18:56.510
how is the rest of
the page life cycle affected

334
00:18:56.510 --> 00:19:02.390
by this? If, if you're
compiling in the parser stage,

335
00:19:02.960 --> 00:19:05.780
does it then get plugged
back into the, it has

336
00:19:05.780 --> 00:19:07.940
to plug back into the
rest of the life cycle.

337
00:19:08.450 --> 00:19:12.740
So does, is there another,
is there another level of

338
00:19:12.740 --> 00:19:17.450
compilation that happens at the
normal compilation time for the

339
00:19:17.450 --> 00:19:20.090
things that aren't dynamic? It's
a good question, but what

340
00:19:20.090 --> 00:19:22.820
they do is this, this
page parser filter. They're the

341
00:19:22.820 --> 00:19:26.660
one that they've replaced. What
it does is it sees

342
00:19:26.660 --> 00:19:29.030
a code snippet and it
replaces the snippet with a

343
00:19:29.030 --> 00:19:32.840
special control. And the control
just holds the code because

344
00:19:32.840 --> 00:19:36.260
in the no compile model,
you're allowed to have markup

345
00:19:36.650 --> 00:19:39.500
and server controls. All right.
So they squirreled away the

346
00:19:39.500 --> 00:19:45.440
code. And then later, later
on when their page becomes

347
00:19:45.440 --> 00:19:48.860
their, their special base class
gets instantiated, they've got a

348
00:19:48.860 --> 00:19:51.230
whole tree of controls that
they can go. And then

349
00:19:51.230 --> 00:19:56.570
themselves dynamically compile using the
iron Python compiler. I see

350
00:19:56.570 --> 00:19:59.450
iron Python techniques scene see
in the code Dom, right?

351
00:19:59.450 --> 00:20:01.550
When you use the code
Dom model, the standard model,

352
00:20:01.820 --> 00:20:05.180
all the user code on
the page shows up inside

353
00:20:05.180 --> 00:20:08.630
of that ultimately generated source
code file. But in this

354
00:20:08.630 --> 00:20:11.180
model, all of the code
is going to be kind

355
00:20:11.180 --> 00:20:14.060
of separate and they're going
to be able to compile

356
00:20:14.060 --> 00:20:17.360
that themselves. There's nothing that
is preventing them from doing

357
00:20:17.360 --> 00:20:21.290
that compilation themselves. Okay. So
the dynamic languages, they've just

358
00:20:21.290 --> 00:20:25.430
basically taken the, the compilation
phase, not the entire page,

359
00:20:25.640 --> 00:20:29.060
but just at the iron
Python portions. And they've moved

360
00:20:29.060 --> 00:20:32.210
it farther along in the,
in the lifecycle. Very cool.

361
00:20:32.960 --> 00:20:34.550
So the part that's a
little confusing. It took me

362
00:20:34.550 --> 00:20:37.220
awhile to get my head
around is that they're using

363
00:20:37.250 --> 00:20:40.760
this no compile feature of
asp.net, but they're simply using

364
00:20:40.760 --> 00:20:44.270
it as a hook to
do, to control the compilation

365
00:20:44.270 --> 00:20:47.920
themselves so that it doesn't
mean that dynamic languages are

366
00:20:47.920 --> 00:20:51.310
being interpreted. It just means
that they're being compiled at

367
00:20:51.310 --> 00:20:54.310
a different time by different
folks, right? Yeah. It's not

368
00:20:54.310 --> 00:20:58.300
the code Dom static compilation.
It's the dynamic code that's

369
00:20:58.300 --> 00:21:02.620
being compiled on the fly
by their, their, their engine.

370
00:21:02.800 --> 00:21:05.320
It's kind of a nice
hack. Yeah. I think it's

371
00:21:05.320 --> 00:21:08.770
pretty clever. They, they, they've
got it working with snippets.

372
00:21:08.770 --> 00:21:12.850
They've got it working with,
with data binding expressions. They're

373
00:21:12.850 --> 00:21:17.410
doing different things to make
doing is called dynamic injection.

374
00:21:18.070 --> 00:21:20.470
So one of the things
that's really cool about dynamic

375
00:21:20.470 --> 00:21:23.890
languages are like, for example,
if you wanted to get

376
00:21:23.890 --> 00:21:25.930
something out of the query
string, right in C sharp,

377
00:21:26.470 --> 00:21:30.220
right now, you would say,
you know, string Fu equals

378
00:21:30.220 --> 00:21:33.520
requests dot query string, and
then angle brat, you know,

379
00:21:33.520 --> 00:21:36.100
bracket, quote, whatever. And you'd
pull that thing out of

380
00:21:36.100 --> 00:21:38.950
the query string, but in
a dynamic language, because it's

381
00:21:38.950 --> 00:21:42.670
being interpreted, it's supposed to
be interpreted later. It's compiled

382
00:21:42.670 --> 00:21:48.430
later. You might just say
request dot Fu, even though

383
00:21:48.430 --> 00:21:51.370
food doesn't really exist as
a property on the request

384
00:21:51.370 --> 00:21:55.510
object. Right. You can interpret
that later. So what they

385
00:21:55.510 --> 00:21:59.260
do is they register the
thing called an injector that

386
00:21:59.260 --> 00:22:02.380
basically says, if you see
something like this in this

387
00:22:02.380 --> 00:22:06.250
form, where in the, in
this example where the request

388
00:22:06.970 --> 00:22:09.370
where this object is a
request object, but there's no

389
00:22:09.370 --> 00:22:12.460
property, you know, basically you're
basically doing, what's called method

390
00:22:12.490 --> 00:22:15.850
missing in Ruby. So if
there's a car object and

391
00:22:15.850 --> 00:22:18.580
I go car.drive, but the
car optic doesn't actually have

392
00:22:18.580 --> 00:22:21.190
a drive method, they just
yank that out and store

393
00:22:21.190 --> 00:22:24.160
it away for later. Exactly.
Add the fee, add the

394
00:22:24.160 --> 00:22:27.430
method. Right? So you can
go and make things like

395
00:22:27.430 --> 00:22:30.040
I'm finding controls and a
tree where you go like

396
00:22:30.280 --> 00:22:34.990
control dot, find control Fu
here. Now in, in something

397
00:22:34.990 --> 00:22:37.000
like a dynamic language, whether
it be iron Python or

398
00:22:37.000 --> 00:22:40.120
something else, you would say,
you know, control dot and

399
00:22:40.120 --> 00:22:41.770
then the name of the
child control. And then the

400
00:22:41.770 --> 00:22:46.900
injector method would automatically inject
the appropriate intent. So what

401
00:22:46.900 --> 00:22:49.300
this means, isn't just, Oh,
gee, we get to express

402
00:22:49.300 --> 00:22:53.620
things as in dynamic languages,
but that we can express

403
00:22:53.620 --> 00:22:55.870
our intent more clearly. Right?
And this is what link

404
00:22:55.870 --> 00:22:57.790
and de-link are all about.
And we'll talk more about

405
00:22:57.790 --> 00:23:01.450
those in another show. So
all of this just adds

406
00:23:01.450 --> 00:23:02.860
up, you know, what does
this mean to you as

407
00:23:02.860 --> 00:23:05.020
a VB programmer and me
as a C sharp programmer.

408
00:23:05.500 --> 00:23:09.820
This just means they're pushing
the envelope and there's language

409
00:23:09.820 --> 00:23:11.590
guys inside of Microsoft. And
this why I brought up

410
00:23:11.680 --> 00:23:14.590
John Lamb is that I have,
I know John personally is

411
00:23:14.590 --> 00:23:17.830
a friend of mine. He
is deeply interested in making

412
00:23:17.830 --> 00:23:21.070
it easier to express your
intent as a programmer to

413
00:23:21.070 --> 00:23:23.350
the computer. That's like what
he believes. And he thinks

414
00:23:23.350 --> 00:23:25.750
that Ruby's like the language
that God would write. If

415
00:23:25.990 --> 00:23:30.070
God could write programming languages
and I can, I can't

416
00:23:30.070 --> 00:23:32.740
help. But think that that
when they move, when they're

417
00:23:32.740 --> 00:23:35.110
doing these kinds of things,
these, whether these, these thought

418
00:23:35.110 --> 00:23:39.130
experiments like this iron Python
for, for asp.net, and then

419
00:23:39.130 --> 00:23:42.940
you get guys like John
moving to Microsoft, that something's

420
00:23:42.940 --> 00:23:45.290
cool is going to happen.
And I think that something's

421
00:23:45.290 --> 00:23:48.260
definitely going to happen, you
know, C sharp three, five,

422
00:23:48.260 --> 00:23:50.360
3.5 or whatever. The next
version is going to be

423
00:23:50.360 --> 00:23:52.640
with link D link with
this. It might take a

424
00:23:52.640 --> 00:23:57.020
while to get the tooling
going on, but something's cool

425
00:23:57.020 --> 00:23:59.300
happening. And it's not going
to be always just see

426
00:23:59.300 --> 00:24:01.430
languages, right. They've been with
us for years, but it's

427
00:24:01.430 --> 00:24:03.860
going to be something else.
It might be 10 years

428
00:24:03.860 --> 00:24:05.120
from now. And it might
be five years. I don't

429
00:24:05.120 --> 00:24:08.030
know. But this white paper,
I really thought was a

430
00:24:08.030 --> 00:24:11.600
harbinger of things to come.
And I would encourage people

431
00:24:11.600 --> 00:24:14.660
to check it out. I
don't know if you'd put

432
00:24:14.660 --> 00:24:16.760
it into production or not,
but it sure is interesting

433
00:24:16.760 --> 00:24:21.410
to think about, well, until
something cool actually does happen.

434
00:24:21.410 --> 00:24:24.740
You can listen to Scott
and I thinking about it

435
00:24:24.860 --> 00:24:29.240
here every week on Hanselman
and Scott. Thanks a lot.

436
00:24:29.360 --> 00:24:31.820
This has been a great
show. Thanks a lot. We'll

437
00:24:31.820 --> 00:24:41.270
talk to you next week
on handsome. <inaudible>.

