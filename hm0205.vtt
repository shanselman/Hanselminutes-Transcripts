WEBVTT FILE

1
00:00:12.210 --> 00:00:18.090
From hanselminutes.com. It's Hanselman. It's
a weekly discussion with web

2
00:00:18.090 --> 00:00:22.920
developer and technologist Scott Hanselman.
This is Lawrence Ryan and unsync

3
00:00:22.920 --> 00:00:28.980
show number two Oh five.
Recorded live Thursday, March 11th, 2010. Support

4
00:00:28.980 --> 00:00:31.440
for Hanselman it's. This provided
by Tellerik R a D

5
00:00:31.440 --> 00:00:35.130
control the most comprehensive suite
of components for windows forms

6
00:00:35.130 --> 00:00:44.280
and asp.net web applications online@wwwdottelerik.com.
In this episode, Scott talks

7
00:00:44.340 --> 00:00:49.800
Oh, data with Pablo Castro.
Hi, this is Scott Hanselman,

8
00:00:49.800 --> 00:00:52.860
and this is another episode
of Hanselminutes today. We've got

9
00:00:52.980 --> 00:00:56.700
Pablo Castro. Who's a principal
architect at Microsoft, and one

10
00:00:56.700 --> 00:00:58.950
of my favorite people because
he works at one of

11
00:00:58.950 --> 00:01:02.160
my favorite products and that
product is changing a little

12
00:01:02.160 --> 00:01:03.840
bit. And I wanted to
bring Pablo on the show

13
00:01:03.840 --> 00:01:06.240
and talk about it. Thanks
for taking the time to

14
00:01:06.240 --> 00:01:10.910
sit down with me. Hey,
Hey Scott. Yeah, sure. So

15
00:01:10.940 --> 00:01:13.220
let's start at the beginning
because I'm a little confused.

16
00:01:13.580 --> 00:01:16.940
Some people are confused. There's
there's this thing called the

17
00:01:16.940 --> 00:01:20.330
open data protocol for old
data. And if you go

18
00:01:20.330 --> 00:01:23.750
to old data.org, there's a
very basic webpage. That explains

19
00:01:23.750 --> 00:01:26.000
a lot about this thing,
but then there was a

20
00:01:26.000 --> 00:01:30.290
thing called ado.net data services
that you can go file

21
00:01:30.290 --> 00:01:33.740
new item in visual studio.
And then there was a

22
00:01:33.740 --> 00:01:37.550
thing that was code named
Estoria. Can you reconcile these

23
00:01:37.550 --> 00:01:42.110
three things for me please?
Oh, absolutely. And so we

24
00:01:42.290 --> 00:01:44.670
thought the beginning there was
a project and that story,

25
00:01:45.290 --> 00:01:47.870
and that was an experiment.
And, you know, we give

26
00:01:47.870 --> 00:01:49.910
experiments code names because we
don't know what we're going

27
00:01:49.910 --> 00:01:53.960
to do with them. Then
we, you know, people liked

28
00:01:53.960 --> 00:01:56.030
it. So we turned it
into a product. And since

29
00:01:56.030 --> 00:01:59.030
we don't do cool lanes,
some other policy, we changed,

30
00:02:00.290 --> 00:02:06.470
we changed the authorial name
into ado.net data services, which

31
00:02:06.890 --> 00:02:09.690
sort of matches the team
where the technology sits and

32
00:02:09.690 --> 00:02:14.000
it aligns with other other
components in the stack. And

33
00:02:14.000 --> 00:02:18.590
we, we did that for
a while. Now. One of

34
00:02:18.590 --> 00:02:21.350
the things that happened while
we were trying to get

35
00:02:21.350 --> 00:02:24.650
used to say ADR does
net data services, is that

36
00:02:25.400 --> 00:02:29.150
the protocol used by ADL
data services sort of took

37
00:02:29.150 --> 00:02:31.700
a life of its own.
People started to implement it

38
00:02:31.850 --> 00:02:35.540
sometimes using our tool kits
sometimes without, and we saw

39
00:02:35.540 --> 00:02:38.300
a lot of value on,
on the protocol itself. It

40
00:02:38.300 --> 00:02:41.180
was an enabler for applications
to share data and all

41
00:02:41.180 --> 00:02:44.630
that. And it sort of,
it became a thing of

42
00:02:44.630 --> 00:02:48.740
its own independent from the,
from effectively, what is our.net

43
00:02:48.740 --> 00:02:51.770
implementation. So we decided to
give the protocol a name

44
00:02:51.920 --> 00:02:54.310
and, you know, we deleted
this a lot and that

45
00:02:54.320 --> 00:02:56.360
we ended up calling it
the open data protocol or

46
00:02:56.360 --> 00:03:01.300
all data. And so now
we have the protocol and

47
00:03:01.780 --> 00:03:06.670
of course have.net implementation. And
we realized that we actually

48
00:03:06.680 --> 00:03:10.240
were doing a lot of
work to aligned the authorial

49
00:03:10.240 --> 00:03:13.240
stack with WCF. We already
do some, but we wanted

50
00:03:13.240 --> 00:03:16.300
to go further. And this
set up is actually very

51
00:03:16.300 --> 00:03:18.760
similar to what we already
do in other contexts. Like

52
00:03:18.850 --> 00:03:21.220
if you look at our
soap stack, we have soap.

53
00:03:21.280 --> 00:03:24.760
That is a protocol and
we have the WTF implementation.

54
00:03:24.760 --> 00:03:28.310
That is the dotnet implementation
of the SaltStack. So we,

55
00:03:28.310 --> 00:03:30.340
we, we thought it would
be a good idea to

56
00:03:30.340 --> 00:03:32.740
do the same thing. And
this sets up us for

57
00:03:32.740 --> 00:03:35.800
the, for the long run.
So what we have now

58
00:03:35.800 --> 00:03:40.240
is the open data protocol.
That's the protocol. So it's

59
00:03:40.270 --> 00:03:42.700
a document if you will,
that describes what to do.

60
00:03:43.030 --> 00:03:45.760
And then we have dub
CF data services, which is

61
00:03:45.760 --> 00:03:49.060
the.net implementation of it. And
you can expect all that

62
00:03:49.060 --> 00:03:52.150
implementations of all data to,
to pop out there over

63
00:03:52.150 --> 00:03:55.150
time that you know, are
independent from WTF CF data

64
00:03:55.150 --> 00:03:58.680
servers. Okay. So let me
see if I understand then,

65
00:03:58.680 --> 00:04:02.940
so a story, it was
an early code name, ado.net

66
00:04:02.940 --> 00:04:05.100
data services was the thing
that we called it. When

67
00:04:05.100 --> 00:04:10.590
we put out.net 3.5, the
service pack one, and then

68
00:04:10.590 --> 00:04:13.050
it became kind of a
thing of its own, specifically

69
00:04:13.050 --> 00:04:16.580
the protocol, the, the, the
angle brackets and the, the

70
00:04:16.640 --> 00:04:20.580
model, the data model. Then
you put the protocol out

71
00:04:20.580 --> 00:04:23.320
into the world and you
release it basically like an

72
00:04:23.340 --> 00:04:28.110
open specification. And then now
what we thought of is

73
00:04:28.110 --> 00:04:32.910
ado.net data services is the
Microsoft implementation of old data.

74
00:04:33.810 --> 00:04:37.560
And are we calling the
Microsoft implementation of ODA, something

75
00:04:38.280 --> 00:04:43.530
different than ado.net data services?
So starting with four, Oh,

76
00:04:44.370 --> 00:04:47.100
we're starting to call it
the DOP CF data services,

77
00:04:47.760 --> 00:04:51.450
WCF data service. Yeah. Okay.
But it's all the same.

78
00:04:52.680 --> 00:05:00.480
Yes. Okay. So that means
if I already have one

79
00:05:00.480 --> 00:05:05.220
of these, I've had an
open data endpoint, is that

80
00:05:05.220 --> 00:05:09.660
correct? Is that what I
would call that? If I

81
00:05:09.660 --> 00:05:12.080
have an ado.net data service
now, and I'm using it

82
00:05:12.090 --> 00:05:13.680
in my product, can I
tell people I have an

83
00:05:13.680 --> 00:05:19.470
open data endpoint? I have
an old data service. Okay.

84
00:05:20.250 --> 00:05:23.040
I assume that as principal
architect, you have no control

85
00:05:23.040 --> 00:05:28.470
over the actual name that
some marketing guide decided That's

86
00:05:28.470 --> 00:05:30.510
a fair assumption. I like
to think that I can

87
00:05:30.870 --> 00:05:33.390
influence a little bit, but
as you can tell, I

88
00:05:33.410 --> 00:05:37.320
failed miserably. So yeah, I
think it's a fair take.

89
00:05:39.060 --> 00:05:42.450
Okay. So give us a
little bit of a basics

90
00:05:42.570 --> 00:05:45.360
of how this works. I
I'm, I'm reasonably familiar with

91
00:05:45.360 --> 00:05:47.940
it, but kind of walk
me through the, through the

92
00:05:47.940 --> 00:05:50.430
stack. Is this talking to
the database or is this

93
00:05:50.430 --> 00:05:53.940
talking to some objects? What
interfaces to those objects have

94
00:05:53.940 --> 00:05:56.470
to, to have, and then
kind of walk me from,

95
00:05:56.470 --> 00:06:02.450
from the, Got it. So
they know the protocol doesn't

96
00:06:02.450 --> 00:06:05.870
dictate anything about where the
data comes from or how

97
00:06:05.870 --> 00:06:09.290
you process it. It is
entirely described in terms of

98
00:06:09.290 --> 00:06:12.800
the edge, like the interface
itself. So you can think

99
00:06:12.800 --> 00:06:14.690
of it as what you
see when you talk to

100
00:06:14.690 --> 00:06:17.840
a server over at HTTP
end, it really doesn't get

101
00:06:17.840 --> 00:06:21.200
into the business of how
you manage that data. If

102
00:06:21.200 --> 00:06:28.360
you look@actualimplementationsinparticularlyifyoulookatour.net implementation, the, the
way this works is we,

103
00:06:28.360 --> 00:06:31.700
we have, we have an
abstraction that is the usual,

104
00:06:31.760 --> 00:06:36.350
you know, provider model thing,
where we, since the system

105
00:06:36.350 --> 00:06:40.280
is heavily declarative, the abstraction
is very centered around metadata.

106
00:06:41.030 --> 00:06:43.760
So what you do is
you describe the shape of

107
00:06:43.760 --> 00:06:47.270
your dataset somehow, and they
somehow could be, you give

108
00:06:47.270 --> 00:06:49.190
us a bunch of dotnet
types. And you tell us

109
00:06:49.190 --> 00:06:51.830
that each type represents the
shape of a particular data

110
00:06:51.830 --> 00:06:55.550
item, or there is a
more generic way of describing

111
00:06:55.880 --> 00:06:58.490
the shape of your data,
using a few classes that

112
00:06:59.960 --> 00:07:01.910
you can think of them
as sort of the reflection

113
00:07:01.910 --> 00:07:05.060
classes, except that they are
independent from dotnet types. So

114
00:07:05.060 --> 00:07:07.220
you can give us a
description of your data, even

115
00:07:07.220 --> 00:07:10.700
if you don't have done
it types for them. So

116
00:07:10.760 --> 00:07:12.620
why don't you give us
a description of what the

117
00:07:12.800 --> 00:07:17.270
data looks like? We will
ultimately construct that URL namespace.

118
00:07:17.270 --> 00:07:19.580
So the serialization formats and
all of that for you.

119
00:07:20.510 --> 00:07:23.570
The second question though, is
that's metadata. Where does the

120
00:07:23.570 --> 00:07:27.470
data come from? That again,
is up to the implementation.

121
00:07:27.860 --> 00:07:30.980
And in the case of
the.net implementation, what we did

122
00:07:30.980 --> 00:07:35.810
is we needed something that
was very flexible, then impose

123
00:07:36.530 --> 00:07:39.800
any particular data model constraints
in it. And it turns

124
00:07:39.800 --> 00:07:43.790
out that the link framework
that was kicking around back

125
00:07:43.790 --> 00:07:47.030
then it was like a
new thing. It's a perfect

126
00:07:47.030 --> 00:07:49.460
abstraction for that, because it
has the idea of an

127
00:07:49.460 --> 00:07:52.220
eye queryable. So you can
formulate a query, but the

128
00:07:52.220 --> 00:07:54.500
shape of the query and
the shape of the results

129
00:07:54.530 --> 00:07:57.110
are very flexible. They are
not constrained into a particular

130
00:07:57.110 --> 00:08:01.610
model. So the way we
did in our framework is

131
00:08:01.610 --> 00:08:05.390
we actually did sort of
the abstraction that separates the

132
00:08:05.390 --> 00:08:07.700
provider from Astoria is just
an eye. It's a query

133
00:08:07.700 --> 00:08:12.470
option. So the, the Estonia,
runtime, whatever I say is

134
00:08:12.470 --> 00:08:16.120
totally you can replace in
your mind Cause you're still

135
00:08:16.120 --> 00:08:18.530
calling it that in your
mind as well. Oh yeah.

136
00:08:18.550 --> 00:08:20.560
Yeah. But you can, you
can replace it with a

137
00:08:20.620 --> 00:08:24.730
corporate compliant name. Well, as
long as we all can

138
00:08:24.730 --> 00:08:26.800
agree as a group, that
it's all the same thing.

139
00:08:26.800 --> 00:08:29.050
I think that's, what's important
and it is, and that's

140
00:08:29.050 --> 00:08:35.080
comforting. Yep. Yep. So the
framework, simply whenever we get

141
00:08:35.080 --> 00:08:37.360
a URL, we think of
a URL as a query

142
00:08:37.780 --> 00:08:40.150
and we translate it into
a query object and then

143
00:08:40.150 --> 00:08:42.610
hand it out to the
provider. And then you can

144
00:08:42.610 --> 00:08:45.640
use any quotable implementation or
create your own to keep

145
00:08:45.640 --> 00:08:48.910
the data source and the
data source. It may be

146
00:08:48.910 --> 00:08:51.750
a relational database. And in
that case, you, you never

147
00:08:51.760 --> 00:08:53.680
hide. You don't equate. They
will use one that already

148
00:08:53.680 --> 00:08:56.700
exists. You know, you can
just, the entity framework you

149
00:08:56.700 --> 00:08:59.420
can use, there is a
link translator for any highway

150
00:08:59.420 --> 00:09:03.600
at night or whatever, whatever
you want to use, or

151
00:09:03.600 --> 00:09:06.360
you can write link translators
for, for custom things. And

152
00:09:06.360 --> 00:09:07.890
we have, we see a
lot of people doing that.

153
00:09:07.890 --> 00:09:11.850
They write sort of very
like relatively narrow, specific translators

154
00:09:11.850 --> 00:09:16.050
for custom backend. And, you
know, then it's up to

155
00:09:16.050 --> 00:09:17.760
you to run the query.
You give us the results

156
00:09:18.120 --> 00:09:22.110
and then we'll handle serialization
and such. So basically the

157
00:09:22.110 --> 00:09:26.190
separation of responsibilities is the,
the data services framework will

158
00:09:26.190 --> 00:09:31.110
handle all HTTP has all
the URLs, serialization, all the

159
00:09:31.110 --> 00:09:35.850
interaction model, please, a little,
a few details of HTTP

160
00:09:35.850 --> 00:09:37.770
that, you know, we don't
want everybody to have to

161
00:09:37.770 --> 00:09:40.530
deal with. So we ship,
we handle all that. And

162
00:09:40.530 --> 00:09:43.590
the data source gives us
a way of figuring out

163
00:09:43.650 --> 00:09:45.390
the shape of it. It
gives us a way of

164
00:09:45.390 --> 00:09:48.540
figuring out or a way
of quoting for the data.

165
00:09:48.840 --> 00:09:50.400
And if they want to,
they give us an, a

166
00:09:50.400 --> 00:09:54.590
way to update data back
into the data source. Okay.

167
00:09:54.590 --> 00:09:56.120
So if I want to
make one of these and

168
00:09:56.120 --> 00:09:59.720
I don't want my database
underneath it, I implement, I

169
00:09:59.720 --> 00:10:04.010
queryable. And if I want
to support updating, I should,

170
00:10:04.100 --> 00:10:06.890
I implement I updatable and
that's, that's all I need

171
00:10:06.890 --> 00:10:08.810
to do. I mean, if
my object or my database

172
00:10:08.810 --> 00:10:13.040
or my data source implements,
I queryable completely, then I

173
00:10:13.040 --> 00:10:15.860
can make it an old
data end point. No problem.

174
00:10:16.760 --> 00:10:18.890
Yeah. Yeah. There is a
little bit of a dance

175
00:10:18.890 --> 00:10:21.980
you have to do to
hook it up. But if

176
00:10:21.980 --> 00:10:25.280
you already have, and I
queriable, the rest is really,

177
00:10:25.280 --> 00:10:29.450
really a little bit of
incremental work. Like a great

178
00:10:29.450 --> 00:10:33.830
example of this is, you
know, starting with the 2010

179
00:10:33.830 --> 00:10:37.730
version, all of the SharePoint
sites are, are all data

180
00:10:37.730 --> 00:10:40.370
servers. So if you have
any SharePoint site kicking around,

181
00:10:40.670 --> 00:10:44.300
if the administrator deploys the
option to order the package,

182
00:10:44.600 --> 00:10:46.910
to have data services on
it, all of the SharePoint

183
00:10:46.910 --> 00:10:51.560
data is all data. So
the way that happened is

184
00:10:51.740 --> 00:10:54.860
the SharePoint guys have a
link provider or a link

185
00:10:54.860 --> 00:10:58.130
translator that they, you know,
they are rebuilt. They use

186
00:10:58.130 --> 00:11:01.850
for our things as well.
That goes against SharePoint against

187
00:11:01.850 --> 00:11:04.310
the SharePoint. You can think
of it as a link

188
00:11:04.310 --> 00:11:06.410
to that later on top
of SharePoint business logic layer.

189
00:11:08.540 --> 00:11:10.910
And that the way they
use data services is they

190
00:11:10.910 --> 00:11:13.790
simply give us the root
of their queries, their own

191
00:11:13.790 --> 00:11:17.990
equatable implementation. And they, the
services that's the HTTP business.

192
00:11:17.990 --> 00:11:21.020
And then SharePoint continues to
there'll be slushy stuff. And

193
00:11:21.020 --> 00:11:25.040
there's very, very little sort
of code that goes beyond

194
00:11:25.040 --> 00:11:28.070
this like strong separation layer
that is the liquid interface.

195
00:11:29.060 --> 00:11:30.470
So they didn't have to
do a lot of work

196
00:11:30.470 --> 00:11:34.050
then. I mean, really their,
their underlying data source that

197
00:11:34.130 --> 00:11:36.230
didn't change the way that
they think about things didn't

198
00:11:36.230 --> 00:11:38.990
change. It's just that rather
than navigating it with a

199
00:11:38.990 --> 00:11:43.850
browser, you're navigating it with
the old data model. Exactly.

200
00:11:43.910 --> 00:11:46.340
And they got to present
their business logic, which is

201
00:11:47.030 --> 00:11:50.570
one of the key aspects
of data services and the

202
00:11:50.910 --> 00:11:53.560
all data engineering as a
protocol to bear in is

203
00:11:53.920 --> 00:11:56.920
like, well, data is not
the thing you use to

204
00:11:57.190 --> 00:12:00.400
sort of create a shortcut
into the database. Like a

205
00:12:00.400 --> 00:12:03.700
gateway type of thing is,
you know, sometimes you want

206
00:12:03.700 --> 00:12:06.310
to do that. If you
have, for example, reference information,

207
00:12:06.310 --> 00:12:08.290
you want to just Polish
the insurer, you can put

208
00:12:08.290 --> 00:12:10.270
an old data hell on
a database and shared it.

209
00:12:10.570 --> 00:12:13.360
But oftentimes it's on something
like SharePoint that has custom

210
00:12:13.370 --> 00:12:16.090
access control, the updates, have
a lot of constraints in

211
00:12:16.090 --> 00:12:19.270
them and things like that.
You actually want all data

212
00:12:19.270 --> 00:12:22.390
to expose data as seen
through your business logic, not

213
00:12:22.390 --> 00:12:25.180
as your store. And a,
I think SharePoint is a

214
00:12:25.180 --> 00:12:28.020
perfect example of how healthy
machine that, you know, SharePoint

215
00:12:28.030 --> 00:12:30.910
has all these options around
who can do what, and

216
00:12:30.910 --> 00:12:33.310
you know, all these workflows
and all these things. And

217
00:12:33.340 --> 00:12:35.260
they all data has to
be on top of that,

218
00:12:35.380 --> 00:12:38.460
not on top of the
underlying store. Okay. So what,

219
00:12:38.460 --> 00:12:42.210
what happens if SharePoint needs
to, you know, throw some

220
00:12:42.210 --> 00:12:45.600
kind of important business exception
or, or, or let me

221
00:12:45.600 --> 00:12:49.020
know about something that, Oh,
data as a protocol doesn't

222
00:12:49.020 --> 00:12:54.090
support. So SharePoint, any implementation
for that matter, you can,

223
00:12:55.150 --> 00:12:57.180
you can stop at any
point and throw an exception.

224
00:12:57.210 --> 00:13:01.740
And if you usually, what
happens is the, the inner

225
00:13:01.740 --> 00:13:04.560
parts of the system that
will exceptions that are specific

226
00:13:04.560 --> 00:13:08.070
to their business logic, and
then usually in your all

227
00:13:08.070 --> 00:13:11.160
data, or actually in this
case, in the data services

228
00:13:12.210 --> 00:13:14.760
provider logic, you catch those.
And then there is a

229
00:13:14.760 --> 00:13:19.410
special exception called data service
exception that lets you indicate

230
00:13:19.410 --> 00:13:21.960
the actual message, which you
usually get from the underlying

231
00:13:21.960 --> 00:13:25.380
exception. And also you can
give us an HTTP status

232
00:13:25.380 --> 00:13:27.810
code. So we are a,
so we can put a

233
00:13:27.820 --> 00:13:30.330
port the proper status code
to the client. You know,

234
00:13:30.450 --> 00:13:32.070
one of the things we
do and we're very picky

235
00:13:32.070 --> 00:13:34.340
about is will we try
hard to be very good

236
00:13:34.350 --> 00:13:37.920
HTTP CD sense? So we,
we include all of the

237
00:13:37.920 --> 00:13:41.100
folks implementing these things to
do proper translation of, you

238
00:13:41.100 --> 00:13:44.130
know, specific error messages to
something that maps reasonably to

239
00:13:44.130 --> 00:13:49.050
HTTP HTTP arrows. When, when
it's possible. Hi, this is

240
00:13:49.050 --> 00:13:51.720
Scott Hanselman from another parallel
universe, got to tell you

241
00:13:51.720 --> 00:13:53.550
about some of our things
our sponsors are doing. They

242
00:13:53.550 --> 00:13:57.510
make this free podcast possible.
If you're developing a new

243
00:13:57.510 --> 00:14:00.120
line of business application, you've
probably tried the latest version

244
00:14:00.120 --> 00:14:02.640
of server light. Now you
can get even better results

245
00:14:02.640 --> 00:14:05.670
by combining the functionality and
server life for beta, with

246
00:14:05.670 --> 00:14:07.650
some of the richness of
the third party controls from

247
00:14:07.650 --> 00:14:11.040
our friends at Tellerik, they're
the first vendors to offer

248
00:14:11.040 --> 00:14:13.110
native support for the server
Lite for beta and their

249
00:14:13.110 --> 00:14:15.960
rad controls. You've got a
new server Lite for CTP

250
00:14:15.960 --> 00:14:18.570
suite of these controls. They
let you tap into the

251
00:14:18.570 --> 00:14:21.120
frameworks, great potential. You got
native right mouse click and

252
00:14:21.120 --> 00:14:24.270
all the new features of
server line there's 38 controls

253
00:14:24.270 --> 00:14:27.060
that give you all these
features. You can start building

254
00:14:27.060 --> 00:14:30.210
those compelling line of business
applications right away and encourage

255
00:14:30.210 --> 00:14:35.100
you to check those products
out at tellerik.com/silverlight. And, you

256
00:14:35.100 --> 00:14:37.980
know, thank Tellerik for supporting
Don and rock supporting Hansel

257
00:14:37.980 --> 00:14:42.150
minutes on their Facebook fan
page at facebook.com/tellerik. Now back

258
00:14:42.150 --> 00:14:45.180
to the show. So this,
this is interesting because this

259
00:14:45.180 --> 00:14:47.910
brings up the concept of
rest. And you're saying that

260
00:14:48.510 --> 00:14:51.200
that data and you're in
the audit, a spec and

261
00:14:51.200 --> 00:14:55.250
the, and your implementation of
it tries to use HTTP,

262
00:14:55.880 --> 00:14:57.920
I would say, as the
envelope, right? I mean, with

263
00:14:57.920 --> 00:15:01.520
soap, HDP was secondary and
the envelope was something that

264
00:15:01.520 --> 00:15:05.030
was part of the body
of the HTTP message. But

265
00:15:05.060 --> 00:15:07.880
with data, if there's something,
if there's a, if there's

266
00:15:07.880 --> 00:15:10.280
an existing error code in
the spec that maps to

267
00:15:10.280 --> 00:15:13.580
what you're trying to do,
then you'll use that, that

268
00:15:13.580 --> 00:15:15.740
starts getting into the kind
of the rest philosophy of

269
00:15:15.740 --> 00:15:19.970
things, which is, you know,
embrace our, our transport in

270
00:15:19.970 --> 00:15:23.360
this case. HTTP, is that
fair to say, but how

271
00:15:23.360 --> 00:15:29.120
does that make Oh, date
is Odetta arrest style interface

272
00:15:29.120 --> 00:15:32.680
or is it something else?
Yeah, so I guess to

273
00:15:32.680 --> 00:15:36.130
answer your first question, yes.
We try, like, I, I

274
00:15:36.180 --> 00:15:39.730
would say one of the
main guiding principles around the

275
00:15:39.730 --> 00:15:42.340
design of, of data services
and all data in general

276
00:15:42.340 --> 00:15:45.490
is, do not invent stuff.
And I think the whole

277
00:15:45.490 --> 00:15:48.130
team has just gotten that
mantra and they are all

278
00:15:48.140 --> 00:15:50.620
used now to look hard
around before you come up

279
00:15:50.620 --> 00:15:53.380
with anything new. And that
includes all of the HTTP

280
00:15:53.380 --> 00:15:57.580
protocol. We will use a
lot of it. In fact,

281
00:15:57.580 --> 00:15:59.440
I'm surprised to look back
and see how much of

282
00:15:59.440 --> 00:16:01.150
it we were able to
leverage. Like there is a

283
00:16:01.150 --> 00:16:03.130
lot of, a lot in
the HTTP protocol that was

284
00:16:03.160 --> 00:16:07.570
a very, very natural fit
for data, for data expanding

285
00:16:07.570 --> 00:16:10.060
from your error codes to
actually very nice things like,

286
00:16:10.390 --> 00:16:12.790
you know, eat dogs for
concurrency control and things like

287
00:16:12.790 --> 00:16:17.350
that. So yeah, we use
it extensively as for the

288
00:16:17.350 --> 00:16:20.260
rest question, you know, loosely
speaking, I think, yes, you

289
00:16:20.260 --> 00:16:22.870
can say all data is
a restful system in the

290
00:16:22.870 --> 00:16:26.830
sense that it's, it's very
centered around state and resources.

291
00:16:26.860 --> 00:16:31.570
And, and for the most
part, the protocol does not

292
00:16:31.570 --> 00:16:34.450
include custom operations. Like the
protocol is very centered around

293
00:16:34.450 --> 00:16:37.140
the idea of have a
uniform interface, which is the

294
00:16:37.150 --> 00:16:40.200
other core concept of fresh
food systems together with, with

295
00:16:40.240 --> 00:16:44.020
resources. And also every resource
in the system gets an

296
00:16:44.020 --> 00:16:46.810
address. When you put this
together, it means that the

297
00:16:46.810 --> 00:16:51.520
uniform interface gives you the
ability to perform the uniform

298
00:16:51.550 --> 00:16:53.620
actions on top of all
of the resources by using

299
00:16:53.650 --> 00:16:57.160
URLs to talk about them.
And that is, you know,

300
00:16:57.190 --> 00:16:59.850
many of the elements that
are characteristic of restful systems.

301
00:16:59.850 --> 00:17:01.990
So I think in that
sense, it's fair to say

302
00:17:01.990 --> 00:17:06.340
that it's, it lines up
fairly well with restful systems.

303
00:17:06.730 --> 00:17:10.330
There is a few things
that, you know, that we

304
00:17:10.480 --> 00:17:13.450
push a little bit farther,
like for example, a good

305
00:17:13.480 --> 00:17:17.080
restful systems are hypermedia even
a, would that means is,

306
00:17:17.320 --> 00:17:19.080
you know, you, you send
a document to a user,

307
00:17:19.090 --> 00:17:22.600
to a client and the
client, the only thing it

308
00:17:22.600 --> 00:17:26.110
does is it renders the
document or presents the documents

309
00:17:26.110 --> 00:17:28.660
using its knowledge of mine
types. And then it follows

310
00:17:28.660 --> 00:17:32.050
links to, for, to the
next action. So the document

311
00:17:32.050 --> 00:17:34.300
continuing contains the links to
the next thing, or the

312
00:17:34.330 --> 00:17:37.500
next set of documents. You
can go see all data,

313
00:17:37.930 --> 00:17:40.420
that's heavy use of links.
So you can actually do

314
00:17:40.420 --> 00:17:43.030
that. And you can, every
document you get, you get

315
00:17:43.030 --> 00:17:45.100
the links to the related
items and things like that.

316
00:17:45.430 --> 00:17:48.240
But we also have a
URL convention that people that

317
00:17:48.240 --> 00:17:50.550
want to use can to
use. And that allows you

318
00:17:50.550 --> 00:17:53.880
to formulate simple queries and
things like that. Having on

319
00:17:53.880 --> 00:17:57.410
the client knowledge of the
silver URLs is it's controversial

320
00:17:57.820 --> 00:18:01.320
at least. And you know,
it, it sort of doesn't

321
00:18:01.320 --> 00:18:04.950
fit well with the hypermedia
centric approach. So, you know,

322
00:18:04.950 --> 00:18:06.780
there's folks that would prefer
to opt out of that

323
00:18:06.780 --> 00:18:08.460
and we define the protocol.
So you kind of talk

324
00:18:08.460 --> 00:18:11.490
to that, but if you
opt into it, then you

325
00:18:11.490 --> 00:18:14.490
have like a fairly wrestled
protocol for the most part.

326
00:18:14.490 --> 00:18:17.820
And you have this bit
that, that eateries it's like

327
00:18:17.850 --> 00:18:21.440
extra functionality, but it bypasses
the hypermedia constraint. When I

328
00:18:21.440 --> 00:18:24.680
hit an old data endpoint
with my browser, it immediately

329
00:18:25.100 --> 00:18:27.920
thinks that it's a feed
and I get, you know,

330
00:18:27.920 --> 00:18:32.420
the feed friendly view inside
of internet Explorer. And I

331
00:18:32.420 --> 00:18:35.810
have to go in and
tell internet Explorer, don't stop

332
00:18:35.810 --> 00:18:38.750
doing that. Basically. I don't
think that you're a feed

333
00:18:38.780 --> 00:18:41.600
I want to see, I
want to see reality. So

334
00:18:41.600 --> 00:18:44.240
then I, I turn off
friendly feed view and I

335
00:18:44.240 --> 00:18:48.890
see the actual markup. And
just like you said, you

336
00:18:48.890 --> 00:18:51.650
see the, you get a
particular item, you see a

337
00:18:51.650 --> 00:18:53.960
URL to the next related
item, and then you can

338
00:18:54.200 --> 00:18:56.570
navigate to it. And it's
usually a copy paste, kind

339
00:18:56.570 --> 00:19:00.860
of an operation. It feels
like your navigating the web

340
00:19:00.980 --> 00:19:04.100
with Telnet, if you've ever
tried that, that's an experiment

341
00:19:04.100 --> 00:19:06.650
that I do in a,
in some of the classes

342
00:19:06.650 --> 00:19:09.470
that I used to teach
in university. I basically make

343
00:19:09.470 --> 00:19:13.130
people open up telling that,
telling that into port 80

344
00:19:13.130 --> 00:19:15.710
and then surf the web.
And it's kind of the

345
00:19:15.710 --> 00:19:19.040
same thing. Do you anticipate,
or is it already, has

346
00:19:19.040 --> 00:19:21.530
it already happened like, Oh,
data browsers or would it

347
00:19:21.530 --> 00:19:26.240
be specific browsers or making
browsers recognize old data so

348
00:19:26.240 --> 00:19:27.650
that it could be presented
in a way that would

349
00:19:27.650 --> 00:19:32.720
allow me to navigate more
naturally? Oh, absolutely. Absolutely. So

350
00:19:34.010 --> 00:19:36.770
there's actually seven at airports
to do that. And they

351
00:19:36.770 --> 00:19:42.320
range from, from developer tools.
Like for example, folks that

352
00:19:42.320 --> 00:19:46.250
work with link, maybe familiar
with link path, which is

353
00:19:46.670 --> 00:19:49.280
available out there. It's not
a Microsoft thing. It's a

354
00:19:49.490 --> 00:19:54.020
couple of folks building it.
And the link pilot as

355
00:19:54.020 --> 00:19:56.120
of a few months ago
actually supports all data. So

356
00:19:56.120 --> 00:19:58.010
you can point or link
back to an old data

357
00:19:58.010 --> 00:20:01.040
end point and actually browse
around with it. Oh really?

358
00:20:01.160 --> 00:20:04.850
Yeah. I love LinkedIn. Well,
now it's a, it's an

359
00:20:04.850 --> 00:20:11.050
April date speaker. So we
also cooking up a couple

360
00:20:11.070 --> 00:20:14.030
internally and actually we're packaging
one of them as an

361
00:20:14.030 --> 00:20:17.030
example, we'll probably ship it
pretty soon. And so people

362
00:20:17.030 --> 00:20:18.920
come here and play with
it and modify it and

363
00:20:18.920 --> 00:20:22.880
stuff. But yeah, I definitely
expect all data, all data

364
00:20:22.880 --> 00:20:27.650
exploders to, to, to start
to pop up, I expect

365
00:20:27.650 --> 00:20:29.870
and expect them of them
from big, simple ones that

366
00:20:29.870 --> 00:20:33.170
just browse around and maybe
follow links to sophisticated ones

367
00:20:33.170 --> 00:20:36.350
that can actually change data
if they, you know, kind

368
00:20:36.350 --> 00:20:39.350
of authentication and all that
stuff provides a December allowances.

369
00:20:39.950 --> 00:20:42.200
So that brings up an
interesting point. I think there's

370
00:20:42.200 --> 00:20:46.040
kind of two classes of
old data services. There's the,

371
00:20:46.960 --> 00:20:50.380
you know, S basically slapped
the implementation of ODA on

372
00:20:50.380 --> 00:20:52.150
top of an eye queryable.
You know, this is the

373
00:20:52.150 --> 00:20:55.960
very, very basic step zero.
And I think that's what

374
00:20:55.960 --> 00:20:59.310
I see the majority of.
And then there's extending old

375
00:20:59.310 --> 00:21:01.960
data, inappropriate ways, like, you
know, may course making it

376
00:21:01.960 --> 00:21:09.490
updatable, but also making service
operations available. And I've been

377
00:21:09.490 --> 00:21:15.220
working on extending an application
to include data and myself

378
00:21:15.250 --> 00:21:18.820
and John Galloway, who's working on
it with me and yourself

379
00:21:20.170 --> 00:21:23.590
kind of had some discussions
where we would think that,

380
00:21:23.800 --> 00:21:26.950
Oh, here's a perfect place
for an operation and by

381
00:21:26.950 --> 00:21:29.800
an operation, I mean, not
navigating in the standard way,

382
00:21:29.800 --> 00:21:32.890
but like almost, it's almost
like an operation and our

383
00:21:32.890 --> 00:21:34.660
data as an extension method,
you know, it's like, Oh,

384
00:21:34.660 --> 00:21:37.600
look here. Yep. And each
time you would kind of

385
00:21:38.020 --> 00:21:39.820
say, no, no, you don't
need that because you can

386
00:21:39.970 --> 00:21:44.710
get to that data the
regular way is that, is

387
00:21:44.710 --> 00:21:47.320
that common? That, that, that
we keep it. It's almost

388
00:21:47.320 --> 00:21:50.020
like saying, Hey, we need
a stored procedure here. And

389
00:21:50.020 --> 00:21:51.700
you say, no, no, you
can do the query like

390
00:21:51.700 --> 00:21:53.500
this. And then suddenly you
don't need a short procedure.

391
00:21:53.740 --> 00:21:56.950
Do you find that there
are fewer and fewer needs

392
00:21:56.950 --> 00:21:59.290
for this service operation? And
maybe you could say a

393
00:21:59.290 --> 00:22:03.030
little something about service operations.
Yeah, well, I, you know,

394
00:22:03.040 --> 00:22:05.640
I tend to push back
on service operations until they're

395
00:22:05.640 --> 00:22:09.180
really, really needed. The problem
with service operations is one

396
00:22:09.180 --> 00:22:13.260
of the really, really good
things about HTTP and in

397
00:22:13.260 --> 00:22:16.620
particular restful systems on top
of HTTP is the idea

398
00:22:16.620 --> 00:22:20.040
of a uniform interface. Uniform
interface means everybody I'll give

399
00:22:20.280 --> 00:22:22.500
what you're on the meaning
of the operations you do.

400
00:22:22.920 --> 00:22:25.650
So when you do a
get, I mean, the web

401
00:22:25.650 --> 00:22:28.110
works because of these. Like
when you do an HTTP,

402
00:22:28.110 --> 00:22:30.480
get to get a resource
from say a webpage or

403
00:22:30.480 --> 00:22:34.710
something, a black, oftentimes a
proxy or some other kind

404
00:22:34.710 --> 00:22:37.830
of intermediary will actually answer
on behalf of the seller

405
00:22:37.830 --> 00:22:40.620
without even talking to the
server. And that actually is

406
00:22:40.620 --> 00:22:43.710
done without second guessing anything
that is the protocol clearly

407
00:22:43.710 --> 00:22:45.900
defines whether or not that
is okay to do or

408
00:22:45.900 --> 00:22:47.910
not. When you can catch
when you can replay on

409
00:22:47.910 --> 00:22:50.550
behalf of the server and
all that. So they immediately

410
00:22:50.550 --> 00:22:55.410
to have intermediaries requires that
intermediaries clients and servers have

411
00:22:55.680 --> 00:22:59.370
agreement on the meaning of
the operations. And that means

412
00:22:59.370 --> 00:23:01.860
that you have to be
well known. So the uniform

413
00:23:01.860 --> 00:23:04.800
interface is exactly the list
of operations that everybody agrees

414
00:23:04.800 --> 00:23:08.340
on. So we all know
that get descent, or hopefully

415
00:23:08.580 --> 00:23:13.350
there's always something broken, but
in principle, get, if you

416
00:23:13.350 --> 00:23:15.630
do a, get against a
URL, that's a non side-effect

417
00:23:15.630 --> 00:23:19.530
in operation. And most, you
know, Heather Heather's to control

418
00:23:19.740 --> 00:23:22.650
caching, it's usually safe to
catch the thing. You take

419
00:23:22.650 --> 00:23:24.930
them portent. So you save
to replay it and all

420
00:23:24.930 --> 00:23:28.260
that. So, you know, those
characteristics, similarly, we know that

421
00:23:28.260 --> 00:23:30.780
if you're doing put that
is certainly a side effect

422
00:23:30.780 --> 00:23:33.900
in operation. And so, you
know, you can't, for example,

423
00:23:35.040 --> 00:23:36.720
that you may not be
able to catch the response

424
00:23:36.720 --> 00:23:40.050
for example, or you're not
supposed to blindly replay just

425
00:23:40.050 --> 00:23:42.990
in case it may not
be idempotent or posting particularly

426
00:23:42.990 --> 00:23:47.070
simple example of that. So
it's, that'd be separations, but

427
00:23:47.300 --> 00:23:50.960
the uniform interface, they introduce
a name of an operation

428
00:23:51.140 --> 00:23:55.100
that is opaque to everybody.
So unless you know about

429
00:23:55.100 --> 00:23:57.680
implementation on that server, you
don't know the characteristics of

430
00:23:57.680 --> 00:24:00.380
the operation, is it really
the only side effecting or

431
00:24:00.380 --> 00:24:03.770
not idempotent no, you don't
know. So the only thing

432
00:24:03.770 --> 00:24:05.960
you can do is I
know you can guess any

433
00:24:05.960 --> 00:24:08.570
stain shadows, or you can,
you can assume the worst

434
00:24:08.900 --> 00:24:11.710
and then never cash. It
never help anybody have the,

435
00:24:11.750 --> 00:24:13.780
tell me the IDs blindly
pass it around until so.

436
00:24:13.780 --> 00:24:16.760
And so this is kind
of geeky around the next

437
00:24:16.770 --> 00:24:20.120
TTP, but it actually is
important to build good scalable

438
00:24:20.120 --> 00:24:25.790
systems. So the reality though,
is that the research centric

439
00:24:25.790 --> 00:24:28.790
abstraction sometimes just runs out
of gas and, you know,

440
00:24:28.970 --> 00:24:32.030
you can still represent certain
things, but then it gets

441
00:24:32.030 --> 00:24:35.810
weird and, you know, doing
things very, very weird only

442
00:24:35.810 --> 00:24:40.010
on principle. Sometimes it's just,
you know, inflicting pain without

443
00:24:40.010 --> 00:24:44.000
that real gain. So service
operations are a way on,

444
00:24:44.000 --> 00:24:46.520
in, in data services to
say, well, you know, if

445
00:24:46.760 --> 00:24:49.400
things got really, really weird
and you want to have

446
00:24:49.400 --> 00:24:51.020
a custom entry point here
is how you do it.

447
00:24:51.080 --> 00:24:52.760
At least we'll do it
all the same way. So

448
00:24:52.760 --> 00:24:56.000
we agree on how you
do it. There's some use

449
00:24:56.000 --> 00:24:58.940
cases for service operations that
are great. A couple of

450
00:24:58.940 --> 00:25:02.090
examples are what is pure
computation. Like if you're doing

451
00:25:02.090 --> 00:25:05.780
like a calculator function or
something, those are very weird

452
00:25:05.780 --> 00:25:09.140
to do as a, as
a research resources and statement

453
00:25:09.140 --> 00:25:11.120
session, it's much better to
just have a function that

454
00:25:11.120 --> 00:25:14.540
does something. The other one
is when you have, when

455
00:25:14.540 --> 00:25:16.670
you want to have kind
of views other the data.

456
00:25:16.670 --> 00:25:20.870
And sometimes the view has
a filtering criteria or whatever

457
00:25:21.470 --> 00:25:24.170
way of sorting or something
that you just can't express

458
00:25:24.320 --> 00:25:27.380
easily in a URL because
it's complicated or because it

459
00:25:27.380 --> 00:25:29.510
will require you to send
too much data or something.

460
00:25:29.900 --> 00:25:31.720
And it's just easier to
pass a few parameters to

461
00:25:31.730 --> 00:25:34.160
function and get the results
back. And as you know,

462
00:25:34.370 --> 00:25:36.230
I think in that sense,
I think it's just a

463
00:25:36.230 --> 00:25:39.680
matter of being pragmatic and
balancing principles with, you know,

464
00:25:39.710 --> 00:25:44.380
getting the job done With
Oh, data were using for

465
00:25:44.380 --> 00:25:48.160
the most part. If I
understand correctly angle brackets across

466
00:25:48.160 --> 00:25:52.270
the wire, unless we're talking
to JavaScript and then it

467
00:25:52.270 --> 00:25:57.040
will automatically speak, Jason, it'll
be up JavaScript, object notation.

468
00:25:58.420 --> 00:26:00.280
Is there an a, can
I, can I speak at

469
00:26:00.350 --> 00:26:03.130
any and even more terse
format? Can I have it

470
00:26:03.130 --> 00:26:07.270
speak binary XML? So not
today, that's the shortest answer.

471
00:26:07.930 --> 00:26:09.940
I did set topic that
I care about a lot

472
00:26:09.940 --> 00:26:15.040
though. You know, this, this
is a tricky thing where

473
00:26:15.040 --> 00:26:19.870
you have to balance, you
know, the interoperability with, with,

474
00:26:20.020 --> 00:26:23.350
you know, efficiency requirements and
such. So right now there's

475
00:26:23.350 --> 00:26:26.950
nobody in India, any binary,
eczema support. So your options

476
00:26:26.950 --> 00:26:30.220
today are you can use
Jason. Jason is a, is

477
00:26:30.430 --> 00:26:33.790
a small, it's a smaller
payload than, than the atom

478
00:26:33.820 --> 00:26:36.670
or XML format that we
use. Although it has, it

479
00:26:36.670 --> 00:26:39.850
has some, it has less
fidelity because the Jason liter

480
00:26:39.870 --> 00:26:43.000
ulcer are not enough to
cover the typical datasets that

481
00:26:43.110 --> 00:26:46.530
manage. So what, what I've
seen people being successful at

482
00:26:46.530 --> 00:26:49.770
today is they they've been
using just HTTP compression, you

483
00:26:49.770 --> 00:26:52.590
know, XML, compresses really well.
And you know, you're playing

484
00:26:52.590 --> 00:26:56.040
it for CPU, but the
trade off works, works well.

485
00:26:56.040 --> 00:26:58.920
And I've seen people being
successful at this. So if

486
00:26:58.920 --> 00:27:02.010
you turn on compression, you'll
see a huge reduction in,

487
00:27:02.490 --> 00:27:06.230
in with utilities, Right? And
this is, this is actually

488
00:27:06.230 --> 00:27:10.820
a good example of doing
HTTP and embracing HTTP. It's,

489
00:27:10.820 --> 00:27:14.420
it's part of it's part
of the spec. And it

490
00:27:14.420 --> 00:27:19.160
will squish it'll squish something
like 40 50%. Yeah. Sometimes

491
00:27:19.160 --> 00:27:21.470
more. I mean, XML is
a great thing to compress

492
00:27:21.470 --> 00:27:23.660
because you, you, you can
feel very proud of yourself

493
00:27:23.660 --> 00:27:29.150
very quickly. So yes, and
this is plain HTTP. There

494
00:27:29.150 --> 00:27:32.330
is, you know, content and
calling seller, you can negotiate.

495
00:27:32.330 --> 00:27:35.090
I clients negotiate whether or
not they can handle competition.

496
00:27:35.090 --> 00:27:37.670
So the same end point
can set up both clients

497
00:27:37.670 --> 00:27:41.570
that kind of clients that
can not handle compression, you

498
00:27:41.570 --> 00:27:44.780
know, and we, we're looking
at binary XML. I really

499
00:27:44.780 --> 00:27:47.720
care about biometrics. The only
problem is even choosing of

500
00:27:47.720 --> 00:27:50.870
identity, XML format is controversial.
So, you know, this is

501
00:27:50.990 --> 00:27:53.420
a topic that we need
to spend some time figuring

502
00:27:53.420 --> 00:27:54.920
out what is the right
thing and how do we

503
00:27:54.920 --> 00:27:57.770
do it and how to
make sure it's interpretable. You

504
00:27:57.770 --> 00:28:00.200
know, I know that. So
I think there's just a

505
00:28:00.200 --> 00:28:03.650
bunch of open questions, but
it's certainly a topic we're

506
00:28:03.650 --> 00:28:06.800
looking at. Well, this is,
and I was actually headed

507
00:28:06.800 --> 00:28:08.570
in a certain direction. And
I think you can probably

508
00:28:08.570 --> 00:28:11.900
guess that, which is in
the, in the, in the

509
00:28:11.900 --> 00:28:16.700
nineties, I was thinking about
complice. And we thought about

510
00:28:16.700 --> 00:28:21.200
comm in the context of,
Hey, look, here's an object.

511
00:28:21.200 --> 00:28:23.240
And it was in process.
And, Oh, look, now it's

512
00:28:23.240 --> 00:28:26.540
out of process. And you
know, I have location transparency.

513
00:28:26.540 --> 00:28:29.060
I don't even need to
think about that. And when

514
00:28:29.060 --> 00:28:34.340
you would go from object
orientation to distributed applications, a

515
00:28:34.340 --> 00:28:36.770
lot of times you'd keep,
people would keep pushing the

516
00:28:36.770 --> 00:28:41.360
concept that look there's location
transparency, and then service orientation

517
00:28:41.360 --> 00:28:45.440
introduced some formalization to that
to say, it's not reasonable

518
00:28:45.440 --> 00:28:47.420
to take an object and
suddenly take it from in

519
00:28:47.420 --> 00:28:51.050
process and put it in,
in New Zealand. I need to

520
00:28:51.050 --> 00:28:54.680
know that that, that object
and accessing its data has

521
00:28:54.680 --> 00:28:59.540
a cost. So service orientation
kind of formalize that, but

522
00:28:59.900 --> 00:29:02.810
all the while I felt
like Microsoft hasn't really embraced

523
00:29:02.870 --> 00:29:09.710
any kind of prescriptive guidance
around multi-tiered systems is, is,

524
00:29:10.430 --> 00:29:14.410
is old data is our
own data implementation. The, the

525
00:29:14.470 --> 00:29:17.300
kind of the ideal way
to make a two tier

526
00:29:17.330 --> 00:29:23.450
crud system now a three
tier credit system. Yeah, I

527
00:29:23.450 --> 00:29:27.200
think the generalization is to
the insurers. I don't think

528
00:29:27.200 --> 00:29:29.990
it's general enough for people
to use it as a

529
00:29:29.990 --> 00:29:35.570
rule. I, so the reality
is that you have to

530
00:29:35.570 --> 00:29:38.270
think a little bit about
the nature of the interaction

531
00:29:38.270 --> 00:29:41.410
between the upper half of
your application on the half,

532
00:29:41.410 --> 00:29:43.210
sort of what it's going
to become the front end

533
00:29:43.210 --> 00:29:44.650
of the app. And what's
going to become the middle

534
00:29:44.650 --> 00:29:47.260
tier. And that you have
to think about whether you

535
00:29:47.260 --> 00:29:50.710
can truly express all interactions
in terms of resources. If

536
00:29:50.710 --> 00:29:53.260
you can, then data services
will save you a lot

537
00:29:53.260 --> 00:29:55.210
of work. And in the
process, it also gives you

538
00:29:55.210 --> 00:29:57.400
a middle tier that has
a lot of goodies. It

539
00:29:57.400 --> 00:30:00.670
can be accessed by other
applications. It's interoperable, you know,

540
00:30:00.670 --> 00:30:03.070
any client out there can
talk to it and all

541
00:30:03.070 --> 00:30:05.590
the standard I'm gonna call
it the all data pitch.

542
00:30:05.980 --> 00:30:08.350
So there's a bunch of
benefits to it, but the

543
00:30:08.350 --> 00:30:11.290
interaction would have to work
for you. There are scenarios

544
00:30:11.290 --> 00:30:14.890
where you want a more
operations centric interface that is

545
00:30:14.890 --> 00:30:18.850
more constraint, and sometimes being
able to like constraining the

546
00:30:18.850 --> 00:30:21.310
interface. So it does less,
and it's more domain specific.

547
00:30:21.310 --> 00:30:23.410
It's more specific to what
you're trying to do. It's

548
00:30:23.410 --> 00:30:26.200
actually a, it's a great
feature because it adds to

549
00:30:26.200 --> 00:30:32.850
predictability In general, it has
a very crisp boundary on

550
00:30:32.850 --> 00:30:35.250
what the application can and
cannot do. And in that

551
00:30:35.250 --> 00:30:37.410
case, I think the right
thing to do is to

552
00:30:37.410 --> 00:30:42.900
use WCF and, and create
a more operations centric interface

553
00:30:42.900 --> 00:30:46.650
and not, not a resource
centric interface. So, you know,

554
00:30:46.920 --> 00:30:49.800
I think once you, you,
you can make a call

555
00:30:49.800 --> 00:30:53.370
on whether you are going
for an operations centric, obstruction,

556
00:30:53.370 --> 00:30:56.430
or you want, you're comfortable
with research centric, then the

557
00:30:56.430 --> 00:30:59.160
decision easy straight forward, if
you are heavily research centric,

558
00:30:59.160 --> 00:31:02.310
then you can, you can
use the services. If, if

559
00:31:02.310 --> 00:31:05.310
you want to do a
bunch of operations, then we

560
00:31:05.310 --> 00:31:08.970
have WCF, which has extensive
support for sort of is

561
00:31:08.980 --> 00:31:13.770
SOA type systems. And, you
know, an operation sensing, et

562
00:31:13.770 --> 00:31:16.710
cetera, we see interface in
it. So it seems like

563
00:31:16.710 --> 00:31:20.400
if you, that very, very
commonly people would have both,

564
00:31:20.430 --> 00:31:24.990
you mean you'd have WCF
data services for the resource

565
00:31:24.990 --> 00:31:27.510
centric aspects of things. And
then for the more formal

566
00:31:27.510 --> 00:31:30.930
things that are, you know,
operations that would have different

567
00:31:30.930 --> 00:31:34.200
requirements, you would use WCF
proper. And what I think

568
00:31:34.200 --> 00:31:39.030
of is Ws start out
star and they would live

569
00:31:39.030 --> 00:31:40.770
side by side. I mean,
there's no reason they can't

570
00:31:40.770 --> 00:31:44.550
be in the same application.
I suppose We see that

571
00:31:44.550 --> 00:31:46.440
a lot people use the
two services together a lot.

572
00:31:46.500 --> 00:31:48.660
And in fact, that's part
of the reason why we

573
00:31:48.660 --> 00:31:51.090
are, I mean, we didn't
just change the branding of

574
00:31:51.090 --> 00:31:55.560
data services. We're actually working,
aligning the technologies because we

575
00:31:55.560 --> 00:31:59.940
see our customers using them
together so often that we

576
00:31:59.940 --> 00:32:03.360
think there is value in
having deeper integration between, between

577
00:32:03.360 --> 00:32:05.430
the stack. We have some
already, but we haven't gone

578
00:32:05.430 --> 00:32:07.770
far enough. And that's why
people have to have to.

579
00:32:08.190 --> 00:32:10.530
And so we're exploring how,
how we can do that

580
00:32:10.560 --> 00:32:13.170
better. And yeah, it depends
on the type of the

581
00:32:13.170 --> 00:32:16.050
apps, but applications that are
more like traditional multi tier

582
00:32:16.060 --> 00:32:18.960
apps do tend to have
both, you know, we, we

583
00:32:18.960 --> 00:32:21.570
want to help there as
well. So to make sure

584
00:32:21.570 --> 00:32:25.560
I get my names, right,
WCF services and WTF data

585
00:32:25.560 --> 00:32:29.160
services are different things. WCS
data services is now what

586
00:32:29.160 --> 00:32:32.700
we're calling our implementation of
data. And then WCF services

587
00:32:32.700 --> 00:32:37.890
are the services that I've,
I'm familiar with already. Alright,

588
00:32:37.920 --> 00:32:40.160
well, thanks so much for
sitting down with me today

589
00:32:40.160 --> 00:32:42.530
and explaining all of this.
I really appreciate it. And

590
00:32:42.530 --> 00:32:44.450
are, I suppose we'll hear
some cool stuff at, at

591
00:32:44.450 --> 00:32:48.400
mix about old data as
well. Oh, absolutely. So it

592
00:32:48.400 --> 00:32:50.650
makes next week and we'll
have a, we'll have a

593
00:32:50.650 --> 00:32:54.730
bunch of news. So, you
know, watch the blogs, watch

594
00:32:54.730 --> 00:32:57.070
the keynotes there. We have
a lot to say it

595
00:32:57.070 --> 00:33:00.430
makes it <inaudible> And definitely
of course check out <inaudible>

596
00:33:00.460 --> 00:33:04.390
dot org and lots of
stuff up there as well.

597
00:33:05.440 --> 00:33:07.990
Oh yes. Yes. You can
expect actually an actual site.

598
00:33:08.020 --> 00:33:10.960
You mentioned that the site
was kind of the case.

599
00:33:12.070 --> 00:33:16.510
So something next week, definitely
check out or you'll actually

600
00:33:16.510 --> 00:33:19.930
see a website that looks
like a website there. Very

601
00:33:19.930 --> 00:33:22.450
cool. Well, thank you, public
Astro for sitting down with

602
00:33:22.450 --> 00:33:26.320
me today and explaining data.
Great. Thanks, Scott. This has

603
00:33:26.320 --> 00:33:28.630
been another episode of Hansel
minutes and I'll see you

604
00:33:28.630 --> 00:33:29.560
again next week.

