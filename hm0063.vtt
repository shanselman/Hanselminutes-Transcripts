WEBVTT FILE

1
00:00:12.080 --> 00:00:17.720
From Hanselman is.com. It's Hansel
minutes, a weekly discussion with

2
00:00:17.720 --> 00:00:22.640
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:22.640 --> 00:00:29.600
is Lawrence Ryan announcing show number
63 quarter Tuesday May 1st, 2007. Support

4
00:00:29.600 --> 00:00:33.890
for Hansel minutes is provided
by Tellerik already controls the

5
00:00:33.890 --> 00:00:38.060
most comprehensive suite of components
for windows forms, asp.net web

6
00:00:38.060 --> 00:00:48.800
applications. online@wwwdottelerik.com. Support is also
provided by dotnet developers journal.

7
00:00:48.860 --> 00:00:54.830
The world's leading.net developer magazine
online at www dot <inaudible>

8
00:00:55.040 --> 00:00:59.300
dot com. In this episode,
Scott talks with Scott Guthrie and

9
00:00:59.300 --> 00:01:04.130
Jason Zander at mix about
silver lights. Hi, this is

10
00:01:04.130 --> 00:01:06.350
Scott Hanselman, and this is
another episode of Hansel minutes,

11
00:01:06.350 --> 00:01:08.720
the podcast. It doesn't waste
your time and we're over

12
00:01:08.720 --> 00:01:11.990
here at mix in Las
Vegas. And I am fortunate

13
00:01:11.990 --> 00:01:17.900
enough to be sitting with
Scott Guthrie and Jason Zander and

14
00:01:18.320 --> 00:01:22.550
Scott. We know that you
control all things type using

15
00:01:22.580 --> 00:01:25.190
and you hit control space.
You pretty much are everything

16
00:01:25.190 --> 00:01:28.220
there. Jason, you were actually
at Devon, the core CLR

17
00:01:28.220 --> 00:01:31.040
team and now have risen
to a power broker. Well,

18
00:01:31.040 --> 00:01:33.650
I was one of the
original developers. The CLR started

19
00:01:33.650 --> 00:01:36.230
in 96, small set of
us started working on it

20
00:01:36.230 --> 00:01:39.140
then. So I'm a general
manager for the CLR team,

21
00:01:39.140 --> 00:01:42.860
compact framework, other things like
that, working for Scott. Oh,

22
00:01:43.070 --> 00:01:47.990
awesome. So everyone's talking about
the silver light surprise. That

23
00:01:48.110 --> 00:01:49.940
one actually called it the
Silverlight surprise out in the

24
00:01:49.940 --> 00:01:55.610
hallway and it's cross-platform CLR.
Mack people are wandering around

25
00:01:55.610 --> 00:01:59.370
mics, running.net code on their
Macs. That was a little

26
00:01:59.390 --> 00:02:02.330
bit of a fun surprise
to drop on people. I

27
00:02:02.330 --> 00:02:04.640
thought to people's brains were
going to explode. It's pretty

28
00:02:04.640 --> 00:02:07.340
fantastic. There was, there was
definitely, you know, it's fun

29
00:02:07.340 --> 00:02:09.140
when you're doing a keynote
and people are wondering what

30
00:02:09.200 --> 00:02:12.830
is going to come next.
And that was a little

31
00:02:12.830 --> 00:02:17.750
bit of that yesterday. So
there's the Silverlight story. There's

32
00:02:17.750 --> 00:02:21.290
beta is 1.0 beta and
there's 1.1 alpha and all

33
00:02:21.290 --> 00:02:27.290
those bits are up at
microsoft.com/silverlight. But that the cross-platform

34
00:02:27.290 --> 00:02:30.920
thing to make that happen,
people were speculating tiny CLR,

35
00:02:30.920 --> 00:02:34.190
micro CLR, re totally new
written CLR, but you guys

36
00:02:34.190 --> 00:02:37.850
have done something different. What
we've done is we're shipping

37
00:02:38.210 --> 00:02:41.600
silver, like one L this
summer, and that's basically focused

38
00:02:41.600 --> 00:02:44.690
on media scenarios. It only
has a JavaScript programming model.

39
00:02:45.230 --> 00:02:46.820
We're going to go ahead
and ship one one later,

40
00:02:47.300 --> 00:02:50.300
but their alpha of one,
one is available for download

41
00:02:50.300 --> 00:02:53.510
now along with visual studio
tool support for it. And

42
00:02:53.510 --> 00:02:55.880
basically in the one, one
release, we are including a

43
00:02:55.880 --> 00:02:59.180
CLR engine and the CLR
engine we're using is actually

44
00:03:00.100 --> 00:03:01.900
Is based on the same
code base for the full

45
00:03:01.900 --> 00:03:05.020
desktop CLR. So it's not
a tiny CLR, it's not

46
00:03:05.020 --> 00:03:07.660
a complex framework version of
the CLR. It is actually

47
00:03:07.660 --> 00:03:12.250
the same CLR execution engine
that you know, that you're

48
00:03:12.250 --> 00:03:15.420
using with Donna today. The
two O CLRs it's generics

49
00:03:15.420 --> 00:03:17.760
and collections and all that
Generics was collections. It was

50
00:03:17.760 --> 00:03:21.030
the same garbage collector. It
has the same jitter and

51
00:03:21.210 --> 00:03:23.010
the same type of system.
And one of the benefits

52
00:03:23.020 --> 00:03:26.430
that means is that you
can actually compile an assembly.

53
00:03:27.050 --> 00:03:30.570
And if you use the
same framework libraries, you know,

54
00:03:30.600 --> 00:03:32.730
that same file format and
the same assembly can be

55
00:03:32.730 --> 00:03:36.450
used on the desktop engine,
as well as within Silverlight.

56
00:03:36.660 --> 00:03:39.150
So are we going to
see prescriptive guidance coming about

57
00:03:39.150 --> 00:03:42.900
whether it's appropriate to start
moving computational work that happened

58
00:03:42.900 --> 00:03:46.230
on the server side, like
validation and data transfer objects

59
00:03:46.230 --> 00:03:49.290
and different business objects and
moving those over onto all

60
00:03:49.290 --> 00:03:53.190
those desktop Pentiums that are
currently hanging out, not doing

61
00:03:53.190 --> 00:03:56.010
any work. Yeah, well, so
certainly ongoing going forward, you'll

62
00:03:56.010 --> 00:04:01.410
see much more prescriptive guidance
as to, you know, how

63
00:04:01.410 --> 00:04:05.250
you use all the different
app patterns that we have.

64
00:04:05.640 --> 00:04:07.110
You know, I think one
of the important things that

65
00:04:07.260 --> 00:04:09.510
people should make sure to
really understand is, you know,

66
00:04:09.510 --> 00:04:11.780
so really in many ways
it doesn't replace things. It's,

67
00:04:11.780 --> 00:04:14.790
it's really enabling new scenarios
that, that weren't possible today.

68
00:04:15.300 --> 00:04:19.230
And so there's definitely, you
know, we still absolutely expect

69
00:04:19.230 --> 00:04:23.940
people to be building a
full desktop apps using WPF.

70
00:04:24.420 --> 00:04:26.520
I'm absolutely going to be
building suicide apps with the

71
00:04:26.520 --> 00:04:29.460
asp.net. And you know, what
we're trying to do with

72
00:04:29.460 --> 00:04:31.920
Silverlight is enable you to
run down in the browser

73
00:04:32.430 --> 00:04:33.840
and go ahead and kind
of merge some of the

74
00:04:33.840 --> 00:04:37.470
best attributes of both worlds
and integrate nicely into, you

75
00:04:37.470 --> 00:04:39.930
know, an overall suite, Right?
I mean, certainly folks have

76
00:04:39.930 --> 00:04:42.480
gotten that on their, on
their desktop. They can exploit.net

77
00:04:42.480 --> 00:04:45.600
all they want, but, and
your demo, you took an

78
00:04:45.600 --> 00:04:47.460
XP box and I think
it was just an XP

79
00:04:47.460 --> 00:04:49.590
gold desk. It didn't have
anything on it. You're running,

80
00:04:49.590 --> 00:04:52.950
<inaudible> it didn't, it looked
like it had just been

81
00:04:52.950 --> 00:04:55.780
booted up fresh, no.net framework
on it, of any kind

82
00:04:56.610 --> 00:05:00.420
at all. And you went
click click, and suddenly you

83
00:05:00.420 --> 00:05:02.520
were running.net in the browser.
What are the things that

84
00:05:02.520 --> 00:05:04.680
we've done with silver light?
And you're, you'll see us

85
00:05:04.920 --> 00:05:07.770
take the same installed technology
to the full diamond framework

86
00:05:07.770 --> 00:05:09.930
going forward as well. But
with silver, one of things

87
00:05:09.930 --> 00:05:12.840
that we did was really
try to make the install

88
00:05:12.840 --> 00:05:15.990
experience lightening fast. And so,
you know, in general, once

89
00:05:15.990 --> 00:05:17.970
you have the bits download,
it's about a ten second install

90
00:05:17.970 --> 00:05:20.910
experience on a clean machine,
and that does not require

91
00:05:20.910 --> 00:05:22.890
the diamond framework on the
machine. It does not require

92
00:05:22.890 --> 00:05:24.960
any codex on the machine.
Literally, as you take a

93
00:05:24.960 --> 00:05:27.510
fresh machine, 10 seconds, you're
good to go That whole

94
00:05:27.510 --> 00:05:30.500
three minutes. What is MSI
doing? Correct. Kind of thing.

95
00:05:30.880 --> 00:05:32.960
It was actually so fast.
I ran it three times.

96
00:05:32.970 --> 00:05:35.190
Cause I didn't know that
it did anything. Yeah. Yeah.

97
00:05:35.570 --> 00:05:37.200
We've heard that from a
few people. Yeah. That somehow

98
00:05:37.200 --> 00:05:39.300
make it more obvious that
like, Oh, it worked because

99
00:05:39.870 --> 00:05:41.940
lot of people keep saying
like, well, okay, I guess

100
00:05:41.940 --> 00:05:45.930
it was the crash because
it takes seconds and it's

101
00:05:45.930 --> 00:05:48.270
gone, you know, It takes
longer to remove shareware than

102
00:05:48.270 --> 00:05:49.770
it does to get this
thing on your box. I

103
00:05:49.770 --> 00:05:52.320
mean, it's just butter. It
really installed my butter. Yeah.

104
00:05:52.410 --> 00:05:54.720
And that's, that's certainly kind
of an experience that I

105
00:05:54.720 --> 00:05:57.860
think, you know, it's critical
for the types of scenarios

106
00:05:57.860 --> 00:06:01.010
we're going after with silver
light are really kind of

107
00:06:01.010 --> 00:06:03.950
enabled kind of ubiquitous web
apps on the web to

108
00:06:03.950 --> 00:06:05.540
take advantage of this. And
then you have to have

109
00:06:05.540 --> 00:06:08.540
that kind of a seamless,
completely seamless installed technology in

110
00:06:08.540 --> 00:06:10.180
order to make that out.
Now, one of the things

111
00:06:10.180 --> 00:06:12.160
that you said a moment
ago was that right now

112
00:06:12.160 --> 00:06:15.640
in Silverlight one, Oh, the,
the kind of engine, the

113
00:06:15.670 --> 00:06:19.690
glue is the JavaScript inside
the browser, but outside Silverlight,

114
00:06:20.080 --> 00:06:23.710
but we're going to be
enabling JavaScript inside Silverlight inside

115
00:06:23.710 --> 00:06:25.720
the browser. So you have,
you could have managed JavaScript

116
00:06:25.720 --> 00:06:28.570
like J script, what other
dynamic languages are going to

117
00:06:28.570 --> 00:06:30.220
be in there. Yeah. So
one of the things that

118
00:06:30.220 --> 00:06:33.520
we announced yesterday is this,
this new framework lab where

119
00:06:33.520 --> 00:06:35.710
we call the dynamic language
time. And it's just a,

120
00:06:35.710 --> 00:06:38.260
it's an assembly that provides
a whole bunch of infrastructure

121
00:06:38.260 --> 00:06:42.520
support for enabling dynamic languages
and dramatically simplifies writing new

122
00:06:42.520 --> 00:06:47.740
languages on top of.net. And
we'll support that with Python.

123
00:06:47.740 --> 00:06:50.290
We have our iron Python
compiler that we've already shipped

124
00:06:50.290 --> 00:06:53.950
in the past Java script,
dynamic version of VB. And

125
00:06:53.950 --> 00:06:55.900
then one of things we
also announced yesterday was that

126
00:06:55.900 --> 00:06:58.720
we're supporting Ruby through a
new compiler that we're building

127
00:06:58.720 --> 00:07:02.020
called iron Ruby. So this
means Ruby in the browser,

128
00:07:02.050 --> 00:07:04.600
but also the DLR, because
it's not actually, even though

129
00:07:04.600 --> 00:07:07.840
it's called the DLR runtime,
it doesn't modify our patch,

130
00:07:07.840 --> 00:07:09.760
the CLR, like you said,
it's just an assembly. Yep.

131
00:07:09.790 --> 00:07:12.010
I can reference it on
the service side to start.

132
00:07:12.450 --> 00:07:14.860
Absolutely. Yeah. You can start
using mix and match a

133
00:07:14.860 --> 00:07:17.260
Ruby on the server side.
You can use Ruby inside

134
00:07:17.260 --> 00:07:20.290
WPF and obviously you can
use it inside a silver

135
00:07:20.290 --> 00:07:23.980
line. So from a language
perspective, if you love Python,

136
00:07:23.980 --> 00:07:26.860
you love Ruby. You'll love
C sharp. You love vb.net.

137
00:07:26.860 --> 00:07:28.930
It's the place to be
one of the big things

138
00:07:29.120 --> 00:07:31.000
we should say. That's also
available on COVID flux right

139
00:07:31.000 --> 00:07:32.980
now you can download the
source code. But the big

140
00:07:32.980 --> 00:07:34.390
thing that we're trying to
do with the dynamic language

141
00:07:34.390 --> 00:07:37.090
runtime was take some of
the elements that came out

142
00:07:37.090 --> 00:07:38.620
of the iron Python work
that Jim Hogan and I

143
00:07:38.620 --> 00:07:40.600
had done and said, how
can we just like we

144
00:07:40.600 --> 00:07:43.000
did with the common language
subset in the CLR originally

145
00:07:43.310 --> 00:07:46.480
make it really easy for
dynamic language author to go

146
00:07:46.480 --> 00:07:49.000
build new languages that can
share and take advantage of

147
00:07:49.000 --> 00:07:51.220
the built in functionality. And
so, as soon as you

148
00:07:51.220 --> 00:07:53.740
sit on top of this,
you get dispatch and, you

149
00:07:53.740 --> 00:07:55.900
know, type interaction and things
like that. If you'd otherwise

150
00:07:55.900 --> 00:07:58.090
have to go write yourself
and you might wind up

151
00:07:58.090 --> 00:08:00.820
with kind of a walled
garden approach where you know

152
00:08:00.820 --> 00:08:03.100
that dynamic language didn't understand
this one, this kind of

153
00:08:03.100 --> 00:08:05.740
bridges, that gap. And then,
because it's all written with

154
00:08:06.040 --> 00:08:09.220
the same CLR underneath, it's
the same file format. You

155
00:08:09.220 --> 00:08:11.020
can use the debugger, separate
points, all the rest of

156
00:08:11.020 --> 00:08:12.520
that kind of stuff just
comes to you for free.

157
00:08:12.880 --> 00:08:14.410
This is going to be
a playground for the guys

158
00:08:14.410 --> 00:08:17.200
that wrote BU to go,
because I've looked at the,

159
00:08:17.200 --> 00:08:18.490
if you look at the
code, if you take some,

160
00:08:18.490 --> 00:08:20.530
you know, BU from code
house, you look at their

161
00:08:20.530 --> 00:08:23.680
stuff, which is know Python
kind of risk friendly CLI

162
00:08:23.680 --> 00:08:26.740
language. And if you look
at their stuff and reflector,

163
00:08:27.100 --> 00:08:29.770
they're doing a lot of
compiler generation and they're doing

164
00:08:29.770 --> 00:08:32.410
some kind of filtering some
funky stuff in there. They're

165
00:08:32.410 --> 00:08:34.030
gonna be able to kind
of throw all that away

166
00:08:34.030 --> 00:08:36.490
because a lot of those
services around dynamic dispatch going

167
00:08:36.490 --> 00:08:39.190
to be available to them
in the field. Yeah. Orange

168
00:08:39.190 --> 00:08:43.630
is already looking forward to
playing with the dealer more.

169
00:08:44.620 --> 00:08:46.630
Yeah, certainly one of the
goals that we kind of

170
00:08:46.630 --> 00:08:51.250
have from our, the dynamic
language runtime is to be

171
00:08:51.250 --> 00:08:53.290
able to do a talk
at some point, you know,

172
00:08:53.290 --> 00:08:56.820
a future PDC or a
future laying.net conference where you

173
00:08:56.820 --> 00:08:58.800
can actually start at the
very beginning of the talk

174
00:08:58.800 --> 00:09:01.320
and sort of define the
language on stage, and then

175
00:09:01.320 --> 00:09:02.970
you can actually code it
and actually have it up

176
00:09:02.970 --> 00:09:07.560
and running, working inside Silverlight
and then having a work

177
00:09:07.560 --> 00:09:09.490
inside the WPA. I wonder
how long it's been It

178
00:09:09.490 --> 00:09:13.220
take for somebody to hack
together a PowerShell asp.net, a

179
00:09:13.250 --> 00:09:17.180
dynamic language thing. I probably
won't take too long at

180
00:09:17.180 --> 00:09:19.010
all. Actually. Yeah. I suspect
it probably won't take very

181
00:09:19.010 --> 00:09:21.350
long at all. Well, the
key thing for us, you

182
00:09:21.350 --> 00:09:23.230
know, again, the thing we're
trying to enable, you know,

183
00:09:23.230 --> 00:09:24.980
like, you know, why use
the CLR? It's like, well,

184
00:09:24.980 --> 00:09:27.590
you get to use, you
know, RGC are just in

185
00:09:27.590 --> 00:09:30.230
time compiler it's world class,
and now you get to

186
00:09:30.230 --> 00:09:32.600
essentially use Jim Hogan and
then his code and, you

187
00:09:32.600 --> 00:09:34.970
know, John Lamb and all the
code he's contributing and just

188
00:09:35.000 --> 00:09:36.770
bring that on top of
yours. So it makes it

189
00:09:36.860 --> 00:09:39.410
really, really simple. So in
the past, when I've tried

190
00:09:39.410 --> 00:09:42.230
to do kind of a
poor man's co-generation of poor

191
00:09:42.230 --> 00:09:46.100
man's dynamicism in, within the
CLR, I do reflection that

192
00:09:46.100 --> 00:09:48.830
emit and coat dump stuff.
And I usually end up

193
00:09:48.860 --> 00:09:51.530
leaking assemblies. I can't get
assemblies kicked out and stuff.

194
00:09:51.530 --> 00:09:53.720
And then with dotnet two
Oh, there was introduction to

195
00:09:53.720 --> 00:09:57.470
the dinner Method. Yeah. It's
the lightweight gen or LCG

196
00:09:57.470 --> 00:10:00.890
for short. So you're basically
kind of creating programmer intent,

197
00:10:01.250 --> 00:10:03.470
wrapping it around this handle
and calling it a dynamic

198
00:10:03.470 --> 00:10:05.930
method and they get garbage
collected, just like Any other

199
00:10:05.930 --> 00:10:07.700
object. That's right. It's kind
of like, I have this

200
00:10:07.700 --> 00:10:09.530
piece of IOL. I'd like
to trade that for a

201
00:10:09.530 --> 00:10:12.350
function pointer police. Right. Which
is really nice and a

202
00:10:12.360 --> 00:10:15.590
kind of malleable dynamic environment
where you're defining redefining methods,

203
00:10:15.590 --> 00:10:17.930
et cetera. That was actually
a feature that was put

204
00:10:17.930 --> 00:10:20.750
into version 2.0 with the
CLR way back when, in

205
00:10:20.750 --> 00:10:23.810
order to support a dynamic
languages. And so then Jim

206
00:10:23.810 --> 00:10:25.490
was able to come along,
do you want your Python

207
00:10:25.490 --> 00:10:27.350
one point, Oh, you know,
you leverage that in a

208
00:10:27.350 --> 00:10:29.900
bunch of other code and
you know, that's essentially what

209
00:10:29.900 --> 00:10:32.450
you get, because if you
just try and do this

210
00:10:32.450 --> 00:10:34.640
work yourself, it can be
kind of hard to figure

211
00:10:34.640 --> 00:10:36.230
out what the tricks are,
how to make it performance

212
00:10:36.230 --> 00:10:38.080
and things like that. And
that's what the deal art

213
00:10:38.080 --> 00:10:39.440
does for you. It just
does a lot of that

214
00:10:39.440 --> 00:10:41.470
heavy lifting. You can just
hook up to it or

215
00:10:41.480 --> 00:10:44.300
Ryan's gonna love that The
blue guys. So when you're

216
00:10:44.300 --> 00:10:48.500
doing a lot of dynamic,
co-generation like that, how do

217
00:10:48.500 --> 00:10:50.690
you balance that with, with
security and safety? I know

218
00:10:50.690 --> 00:10:54.410
there's probably a new security
model within Silverlight, but also

219
00:10:54.410 --> 00:10:57.410
just the regular CLR. And
you've got ill being shitted

220
00:10:57.410 --> 00:10:59.720
left and right here. Yeah.
Well, the important thing there

221
00:10:59.720 --> 00:11:01.850
is, you're still using IO
and you're still using the

222
00:11:02.030 --> 00:11:04.520
type safe, you know, subsistent
inside of the CLR. So

223
00:11:04.820 --> 00:11:07.250
we're still gonna run the
verifier, you know, inappropriate and

224
00:11:07.250 --> 00:11:10.100
based on usual security settings
and things like that. And

225
00:11:10.100 --> 00:11:12.020
so you get all those,
those same kinds of benefits,

226
00:11:12.020 --> 00:11:14.000
right? That is the advantage
of having the, you know,

227
00:11:14.120 --> 00:11:17.270
the managed code system, therefore
you, and as you mentioned

228
00:11:17.270 --> 00:11:20.150
in silver light, there's actually
a new, a pretty simple,

229
00:11:20.150 --> 00:11:23.390
straightforward sandbox security model. We
will be bringing that forward

230
00:11:23.390 --> 00:11:26.030
onto the desktop CLR as
well. So that your apps

231
00:11:26.030 --> 00:11:27.830
again, when you write it
for Silverlight and you decide

232
00:11:27.840 --> 00:11:29.930
at some point, wow, I'd
really love to add, you

233
00:11:29.930 --> 00:11:32.870
know, 3d and full WPF.
You can quite easily just

234
00:11:32.870 --> 00:11:34.880
take that code and move
it forward. So there's been

235
00:11:34.880 --> 00:11:36.800
a lot of innovation around
security in this release. It's

236
00:11:36.800 --> 00:11:38.600
something we haven't even talked
about too much yet, but

237
00:11:39.050 --> 00:11:41.390
I'll probably be doing follow
ups on blogs and stuff

238
00:11:41.420 --> 00:11:44.930
over there. Very cool. Do
you see that there are

239
00:11:44.930 --> 00:11:46.310
a lot of people who've
done a lot of crazy

240
00:11:46.310 --> 00:11:48.860
stuff in JavaScript and I
say crazy stuff. I don't

241
00:11:48.860 --> 00:11:51.050
mean that it's necessarily bad
or to be pejorative, but

242
00:11:51.470 --> 00:11:54.190
they've taken JavaScript and just
squeezed so much that they

243
00:11:54.210 --> 00:11:57.130
built entire engines. I'm not
talking specifically about Ajax, but

244
00:11:57.250 --> 00:12:01.570
whole object models and realizations
in the browser. How compliant

245
00:12:01.570 --> 00:12:04.870
is the ECMAScript support. That's
going to get jetted versus

246
00:12:04.870 --> 00:12:06.940
the stuff on the outside,
such that someone could take

247
00:12:07.360 --> 00:12:09.790
good JavaScript and an engine
on the client side and

248
00:12:09.820 --> 00:12:12.460
put that in and suddenly
get a thousand X speed

249
00:12:12.460 --> 00:12:14.820
up A couple of different
things. You will be able

250
00:12:14.820 --> 00:12:16.950
to go ahead and use
our JavaScript compiler. Right? I

251
00:12:16.950 --> 00:12:19.230
think the big key thing
for developers that we're going

252
00:12:19.230 --> 00:12:22.320
to have to sort through
is, you know, how compatible

253
00:12:22.320 --> 00:12:24.120
can we make that code
when we go off and

254
00:12:24.120 --> 00:12:25.740
do it, obviously, you know,
the one nice thing about

255
00:12:25.740 --> 00:12:28.230
JavaScript, it's, you know, it's
been in, you know, Firefox,

256
00:12:28.230 --> 00:12:29.490
he's had her for a
long time. It was kind

257
00:12:29.490 --> 00:12:31.740
of standardized, et cetera. And
any time you come along

258
00:12:31.740 --> 00:12:34.230
with a new code system
or language, that's usually the

259
00:12:34.230 --> 00:12:36.240
trickiest part is to get
that there. So we will

260
00:12:36.240 --> 00:12:38.520
have the performance, as you
mentioned, with the, with the

261
00:12:38.600 --> 00:12:40.770
compile code on top of
it, but we're going to

262
00:12:40.770 --> 00:12:42.780
work through the guidance and
you know, what we won't

263
00:12:42.780 --> 00:12:45.440
recommend is saying, Hey, just
go drop this thing in,

264
00:12:45.460 --> 00:12:47.760
replace everything. We're going to
have a more gradual kind

265
00:12:47.760 --> 00:12:51.030
of set of guidance there.
Appropriate. Yeah, yeah, yeah, exactly.

266
00:12:51.990 --> 00:12:54.900
We know that J script
dot DLL and its history

267
00:12:54.900 --> 00:12:56.760
it's been around for a
very long time. And there's

268
00:12:56.760 --> 00:12:59.100
a lot of people that
feel that, you know, J

269
00:12:59.100 --> 00:13:00.840
script because of the way
it was architected and some

270
00:13:00.840 --> 00:13:03.050
of the comm background around
the scripting languages and the

271
00:13:03.050 --> 00:13:05.730
plugins and how it was
reused with classic ASP, it's

272
00:13:05.730 --> 00:13:08.640
a little slow, particularly in
its interactions with the Dom,

273
00:13:09.780 --> 00:13:12.630
how are Silverlight and server
lights now going to be

274
00:13:12.630 --> 00:13:15.030
allowed to reach out of
itself and into the Dom

275
00:13:15.210 --> 00:13:18.270
as well as JavaScript code
in the browser outside of

276
00:13:18.270 --> 00:13:20.820
Silverlight reaching back in. So
there's this kind of this

277
00:13:20.940 --> 00:13:24.480
seamless bridge between two type
systems. How does that work

278
00:13:24.480 --> 00:13:27.060
and how has that performance?
Yeah, it was, we basically,

279
00:13:27.450 --> 00:13:30.120
there's two features that call
out one is we do

280
00:13:30.120 --> 00:13:33.210
have a managed Dom API.
Now the chips were Silverlight.

281
00:13:33.270 --> 00:13:35.310
And so you can go
ahead and use any thought

282
00:13:35.310 --> 00:13:37.350
in it language, you can
use C sharp, you can

283
00:13:37.350 --> 00:13:40.680
use VB, you can use
Python, Ruby, Java script. And

284
00:13:40.680 --> 00:13:43.310
from within dotnet code, you
can go ahead and just

285
00:13:43.310 --> 00:13:46.260
say each mole, page dot
HTML document. And you have

286
00:13:46.260 --> 00:13:48.660
a reference to the HTML
document that the silver light

287
00:13:49.200 --> 00:13:51.870
controls being hosted on. And
so you can create elements.

288
00:13:51.870 --> 00:13:55.290
You can get access to
elements, a dominate, get element

289
00:13:55.290 --> 00:13:57.240
by ID and get a
reference to it. You can

290
00:13:57.240 --> 00:13:59.010
also, and this is kind
of really cool is if

291
00:13:59.010 --> 00:14:01.430
you, for example, reach out
and grab a button or

292
00:14:01.440 --> 00:14:04.200
reference to a button, you
can also attach a managed

293
00:14:04.200 --> 00:14:07.170
event to that button. So
you can reach any HTML

294
00:14:07.170 --> 00:14:09.840
element and wire up any
event that typically you do

295
00:14:09.840 --> 00:14:13.770
in Java script and wire
up a dotnet delegate to

296
00:14:13.770 --> 00:14:17.280
it. And so if you
want to really have the

297
00:14:17.280 --> 00:14:20.880
complete capability to interact with
HTML or rich way, that's

298
00:14:20.880 --> 00:14:24.300
hot. Yeah. That's pretty cool.
And that works across browser,

299
00:14:24.330 --> 00:14:26.540
so, and cross platform. So
that's not just an naive

300
00:14:26.540 --> 00:14:29.730
thing that works in Firefox
that works in Safari. There's

301
00:14:29.730 --> 00:14:32.010
a dynamic, there's a dispatch
mechanism within some of the

302
00:14:32.010 --> 00:14:35.250
ag hosts, chit JavaScript. Then
it must be why It's

303
00:14:35.250 --> 00:14:37.930
not an AGU host, but
it's public it's in the

304
00:14:37.930 --> 00:14:42.090
it's in the plugin. The
plugin is watching what's going

305
00:14:42.090 --> 00:14:44.280
on. Yeah. I didn't realize
I had that kind of

306
00:14:44.280 --> 00:14:47.700
power plugins plugins can do
a lot. How can they

307
00:14:47.700 --> 00:14:49.380
go full screen? I thought
that was kind of creepy.

308
00:14:50.790 --> 00:14:56.240
Yeah. So, you know, basically
plugins do have the ability

309
00:14:56.240 --> 00:14:57.950
to go full screen. So
we, one of the demos

310
00:14:57.950 --> 00:15:00.080
that we showed a couple
of demos we showed was

311
00:15:00.080 --> 00:15:02.690
the ability for people to
effectively go completely full screen

312
00:15:03.230 --> 00:15:05.960
and, and do some pretty,
pretty neat interactions as a

313
00:15:05.960 --> 00:15:08.480
result. Yeah. And one of
the nice things also about

314
00:15:08.480 --> 00:15:11.660
the Fullscreen is you can
go ahead and not only

315
00:15:11.660 --> 00:15:14.780
run video snippets, but you
can actually run the video

316
00:15:14.780 --> 00:15:17.390
over the entire thing. And
so you can actually do

317
00:15:17.390 --> 00:15:20.450
full screen video with silver
light and even cooler. And

318
00:15:20.450 --> 00:15:22.070
it's one of the things
that the major league baseball

319
00:15:22.220 --> 00:15:27.680
folks showed on Monday is
you can actually overlay text

320
00:15:27.680 --> 00:15:31.070
as well as controls and
rich UI and UI. You

321
00:15:31.070 --> 00:15:33.770
want go with WPI on
top of the video while

322
00:15:33.770 --> 00:15:35.870
you're running full screen. And
that just really lets you

323
00:15:35.870 --> 00:15:39.160
build some mind boggling UI
experiences. I noticed when they

324
00:15:39.160 --> 00:15:41.110
did that, they would go
to Fullscreen and they'd look

325
00:15:41.110 --> 00:15:42.850
at the video and they'd
go back in the brand.

326
00:15:42.850 --> 00:15:45.250
And it wouldn't actually restart
like with windows media player

327
00:15:45.250 --> 00:15:46.780
where it's like, Oh, I've
gone full screen and we're

328
00:15:46.780 --> 00:15:48.130
going to start all over
again. I got to see.

329
00:15:48.460 --> 00:15:50.710
Yep. So yeah, we don't,
we don't have to restart

330
00:15:50.740 --> 00:15:52.810
and you can even go
ahead and actually resize the

331
00:15:52.810 --> 00:15:56.700
video dynamically. So it's not
just full screen or minimalized.

332
00:15:56.720 --> 00:15:58.240
You can actually say like,
I'm going to expand the

333
00:15:58.240 --> 00:16:02.530
video by 5% every second.
And the, the video stream

334
00:16:02.530 --> 00:16:04.570
does not stop. It does
not pause. It does not

335
00:16:04.570 --> 00:16:07.780
restart. You get a completely
smooth experience. And that's again,

336
00:16:07.900 --> 00:16:11.620
across all platforms, all browsers,
Yeah. Back to the JavaScript

337
00:16:11.650 --> 00:16:15.040
kind of CLR bridge. And
this, this, this, this seamlessness

338
00:16:15.040 --> 00:16:17.290
that's going on, could that
Putin. I know that every

339
00:16:17.290 --> 00:16:20.410
technology, every new technology gives
someone potentially more rope to

340
00:16:20.410 --> 00:16:22.900
hang themselves with, but people
are doing a lot of

341
00:16:22.900 --> 00:16:25.540
threadings and more and more
in the client. And now

342
00:16:25.540 --> 00:16:28.960
you've got two different threading
models, the JavaScript on the

343
00:16:28.960 --> 00:16:31.540
outside and the JavaScript on
the inside, they could both

344
00:16:31.540 --> 00:16:34.120
potentially listen to events, be
poking at buttons. One could

345
00:16:34.120 --> 00:16:36.640
probably get themselves into a
bit of a, Well, from

346
00:16:36.640 --> 00:16:40.510
a threading perspective. You're, you're
actually handling all of the

347
00:16:40.510 --> 00:16:42.460
events on the same UI
thread. And so the way

348
00:16:42.460 --> 00:16:44.680
the browser works is, you
know, if you have two

349
00:16:44.680 --> 00:16:47.770
buttons with two event handlers,
you can't run into a

350
00:16:47.770 --> 00:16:50.470
situation where you click both
real quickly in both events,

351
00:16:50.470 --> 00:16:52.720
fire, you'll actually be executing
on the same thread. There's

352
00:16:54.370 --> 00:16:56.800
no, yeah. There's only one
UI thread for browsers. Now

353
00:16:57.040 --> 00:16:59.740
what Silverlake will enable you
to do is create background

354
00:16:59.740 --> 00:17:01.600
threads. And so if you
want to be able to

355
00:17:01.600 --> 00:17:05.800
use any computationally intensive in
the background, there's, there will

356
00:17:05.800 --> 00:17:07.150
be a model for you
to go ahead and do

357
00:17:07.150 --> 00:17:09.820
that within Silverlight. And then
you can, you can basically

358
00:17:09.820 --> 00:17:12.700
post an event, post an
event that the UI thread

359
00:17:12.700 --> 00:17:14.890
can then go ahead and
handle. So once you finished

360
00:17:14.890 --> 00:17:16.570
with that, you can go
ahead and update the UI

361
00:17:16.780 --> 00:17:19.330
Can poorly, but I'm a
little confused, can poorly behaved

362
00:17:19.330 --> 00:17:22.980
JavaScript in the browser outside
Silverlight affect the threat of

363
00:17:22.980 --> 00:17:24.940
the UI thread enough that
the Silverlight would have trouble

364
00:17:25.150 --> 00:17:27.250
doing it's video. There's the
Brown, I mean the brothers,

365
00:17:27.250 --> 00:17:30.220
the browser wind frame, there's
there's the client area that's

366
00:17:30.220 --> 00:17:32.740
rendered. And then there's kind
of the execution thread of

367
00:17:32.740 --> 00:17:35.520
the browser phase. Yeah. If
proper theory, if you had

368
00:17:35.530 --> 00:17:38.110
like an infinite loop in
your JavaScript that that could

369
00:17:38.110 --> 00:17:40.240
affect, obviously the We're going
to do a Silverlight, I'm

370
00:17:40.240 --> 00:17:44.950
just thinking more about just
generally, because the potential not

371
00:17:44.950 --> 00:17:49.180
only for using the client
for more serious computations now

372
00:17:49.770 --> 00:17:52.740
becomes kind of pretty significant,
but also the ability for

373
00:17:52.740 --> 00:17:55.410
concurrency to be, to be
doing one thing while doing

374
00:17:55.410 --> 00:17:58.200
another, I mean, we were
watching the top banana demo

375
00:17:58.200 --> 00:18:00.930
during the, during the keynote
and he had it would

376
00:18:00.930 --> 00:18:05.010
nine videos going simultaneously while
moving a scroll bar over

377
00:18:05.010 --> 00:18:06.420
on the left. And I'm
trying to think to myself,

378
00:18:06.450 --> 00:18:08.640
how much concurrency and state
is he having to manage

379
00:18:08.640 --> 00:18:11.070
and how much of this
is just being handled by

380
00:18:11.070 --> 00:18:14.820
the intrinsic media functionality built
into Silverlight. It appears that

381
00:18:15.420 --> 00:18:18.510
playing video is, is it's
trivial. It's just handle you

382
00:18:18.510 --> 00:18:20.520
just say, Hey, play it.
You have to worry about

383
00:18:20.520 --> 00:18:24.950
anything. It manages to stay.
Yeah. There's a built into

384
00:18:24.980 --> 00:18:27.110
both full and WPF. And
then also the WPF on

385
00:18:27.110 --> 00:18:30.440
silver Silverlight he has a
immediate element control. And basically

386
00:18:30.440 --> 00:18:32.510
with a media element control,
you can go ahead and

387
00:18:32.750 --> 00:18:34.910
point to kind of any
type of media file, including

388
00:18:34.910 --> 00:18:37.940
a WMV video file. And
there's an object model for

389
00:18:37.940 --> 00:18:42.890
playing pausing, stopping, seeking for
that. And so this top

390
00:18:42.890 --> 00:18:46.160
of Nana app, which you
can actually go to www.silverlight.net,

391
00:18:46.760 --> 00:18:49.430
and I believe we have
a video up and just

392
00:18:49.870 --> 00:18:51.470
a nice high rise video
if you want to watch

393
00:18:51.470 --> 00:18:54.710
it, but it's pretty stunning.
And the nice thing is

394
00:18:54.710 --> 00:18:58.460
all of the actual graphics
performance is encapsulated inside that

395
00:18:58.460 --> 00:19:01.190
media element control. And so
yeah, all he did in

396
00:19:01.190 --> 00:19:03.320
his app is play, play,
play on the nine of

397
00:19:03.320 --> 00:19:07.370
them. And, you know, Silverlight
handles the rest. I think

398
00:19:07.370 --> 00:19:09.740
from, you know, using the
concurrency on the client, you

399
00:19:09.740 --> 00:19:11.390
know, you, you have the
nice thing which is system

400
00:19:11.540 --> 00:19:13.460
threading. So it's the same
API that you're already familiar

401
00:19:13.460 --> 00:19:15.890
with. And I think the
very common usages are going

402
00:19:15.890 --> 00:19:17.990
to be, if you're gonna
do intense, you know, numerical

403
00:19:17.990 --> 00:19:20.390
crunching or a big algorithm
analytics, you know, take your

404
00:19:20.390 --> 00:19:22.130
pick and go kick off
a thread to do that.

405
00:19:22.400 --> 00:19:24.680
Another interesting one will be
things like, Hey, I'd like

406
00:19:24.680 --> 00:19:26.780
to go make a web
service call. It may, you

407
00:19:26.780 --> 00:19:28.400
know, have a lot of
latency associated with it. It

408
00:19:28.400 --> 00:19:30.920
may take a long time
to stream it. So this

409
00:19:30.920 --> 00:19:33.020
gives me an opportunity to
kick off that background thread,

410
00:19:33.200 --> 00:19:35.600
pulling in results, processing them,
kind of queuing them up

411
00:19:35.600 --> 00:19:37.700
for the UI piece. That's
the sort of thing I

412
00:19:37.700 --> 00:19:39.590
think you'll wind up using
it. People do try and

413
00:19:39.590 --> 00:19:42.230
do that today with JavaScript,
with a wacky combination of,

414
00:19:42.260 --> 00:19:43.670
you know, kind of timers
and those sort of things.

415
00:19:44.030 --> 00:19:45.590
I think that gets to,
you know, it's hard to

416
00:19:45.590 --> 00:19:47.180
write that kind of code.
It's hard to debug it

417
00:19:47.180 --> 00:19:49.490
and get it right. So
having that powerful, just writing

418
00:19:49.490 --> 00:19:51.740
model with that and that
therefore you, you know, works

419
00:19:51.740 --> 00:19:53.780
great. And then the media
controls encapsulate all the other

420
00:19:53.780 --> 00:19:56.780
hard work. So the two
is very powerful. You have

421
00:19:56.780 --> 00:19:58.550
a good point that you're
saying that the there's the,

422
00:19:59.110 --> 00:20:01.130
the threading, the threading classes
that we're used to, you

423
00:20:01.130 --> 00:20:03.620
know, it may not be
the actual BCL system, not

424
00:20:03.620 --> 00:20:07.250
threading that, you know, exact
same code, but it's, it's

425
00:20:07.250 --> 00:20:09.610
behaving the same way. It's
the same public interface. It

426
00:20:09.610 --> 00:20:12.380
may have Silverlight specific things,
but I just, as I,

427
00:20:12.380 --> 00:20:14.840
their system got IO that
isolated storage, right. Is that

428
00:20:14.840 --> 00:20:17.210
the same isolated storage? There's
probably no, it's probably Silverlight

429
00:20:17.210 --> 00:20:20.540
specific for the security. The,
the, in general we did

430
00:20:20.540 --> 00:20:22.640
is we went through again,
looked at the scenarios, came

431
00:20:22.640 --> 00:20:25.010
from the core up, decided
what the minbar was. And

432
00:20:25.010 --> 00:20:27.350
a lot of cases, we
actually just factored the existing

433
00:20:27.350 --> 00:20:29.900
code. That's the case for
the core CLR itself is

434
00:20:29.900 --> 00:20:31.610
the case for a bunch
of the framework libraries as

435
00:20:31.610 --> 00:20:34.280
well. In other cases, we
said, well, what's unique about

436
00:20:34.280 --> 00:20:37.250
being in the browser, right?
And I have XML HTTP,

437
00:20:37.250 --> 00:20:39.170
I have other kinds of
services for the browser. And

438
00:20:39.170 --> 00:20:41.270
so we took some of
the same, you know, API

439
00:20:41.270 --> 00:20:44.270
contracts gives you the same
behavior, like you mentioned, but

440
00:20:44.270 --> 00:20:46.610
we may have plumbed some
of those into the environment

441
00:20:46.610 --> 00:20:48.610
that we live. So there's
a little mixture of both

442
00:20:48.940 --> 00:20:50.770
in every case, it was,
what's the right thing for

443
00:20:50.770 --> 00:20:53.470
what the developer wants to
accomplish in this environment. That's

444
00:20:53.470 --> 00:20:54.990
how we did it. So
I don't know if this

445
00:20:54.990 --> 00:20:58.260
is an appropriate analogy, but
tell me if this, if

446
00:20:58.260 --> 00:21:00.660
my thinking is right for
a while, I would write

447
00:21:00.690 --> 00:21:02.970
code on one Oh one
one, and I'd make sure

448
00:21:02.970 --> 00:21:04.830
they compiled and worked on
both. And then there was

449
00:21:04.830 --> 00:21:06.510
a time when I'd write
code on one, one and

450
00:21:06.510 --> 00:21:09.300
two Oh, and maybe motto.
And you want to just

451
00:21:09.300 --> 00:21:12.120
basically pick the intersection of
the base class library, is

452
00:21:12.120 --> 00:21:13.890
that, that same thinking that
we could do, and it's

453
00:21:13.920 --> 00:21:19.950
totally appropriate. Even, even encouraged
to write assemblies and take

454
00:21:19.950 --> 00:21:21.990
that exact same DLL and
use it on the surface.

455
00:21:21.990 --> 00:21:24.360
I use it on the
client side using that subset

456
00:21:24.360 --> 00:21:27.760
of intersected, a base class
library. Yeah. I mean, I

457
00:21:27.760 --> 00:21:30.180
mean, we, even, even what
we tried to in Silverlight

458
00:21:30.180 --> 00:21:31.890
is, you know, I think
if you look at the

459
00:21:31.890 --> 00:21:33.780
number of classes we have,
I haven't actually counted them,

460
00:21:33.780 --> 00:21:37.410
but it's probably 1200 or
something. You know, we have

461
00:21:37.410 --> 00:21:40.320
some pretty rich libraries, including
for example, link. So if

462
00:21:40.320 --> 00:21:42.090
you have some business logic
and your, your, you know,

463
00:21:42.090 --> 00:21:44.490
you have some collections of
objects that are, you know,

464
00:21:44.490 --> 00:21:47.820
generic collections and, you know,
you've got computational, you got

465
00:21:47.820 --> 00:21:49.980
some validation, logic or anything
like that. You know, you

466
00:21:49.980 --> 00:21:52.320
can express that using link
and some of the functional

467
00:21:52.620 --> 00:21:55.680
programming constructs that it provides,
you do all the query

468
00:21:55.680 --> 00:21:57.240
and you can do all
the data modeling and yeah.

469
00:21:57.300 --> 00:22:00.810
That assembly will work in
any dotnet. There's so many

470
00:22:00.810 --> 00:22:03.450
people out in the hallway.
Now that mostly from my

471
00:22:03.450 --> 00:22:06.150
point of view, that the
developers that are thinking about

472
00:22:06.600 --> 00:22:08.280
is this going to be,
you know, is this whatever

473
00:22:08.280 --> 00:22:10.080
they're thinking about the way
to do something like one

474
00:22:10.080 --> 00:22:12.990
guy said, well, we'll, we'll
take our HTML forms and

475
00:22:12.990 --> 00:22:15.030
we'll score them off into
a Silverlight, that'll be like

476
00:22:15.030 --> 00:22:17.130
a one pixel by one
pixel Silverlight it won't have

477
00:22:17.130 --> 00:22:20.670
any UI we'll load up
the object and then send

478
00:22:20.670 --> 00:22:23.070
it across via web services.
And this is how they're

479
00:22:23.070 --> 00:22:25.260
going to exploit their web
services stuff. I mean, certainly

480
00:22:25.260 --> 00:22:27.690
you could do that. I
can do a lot of

481
00:22:27.690 --> 00:22:28.980
things. You can do a
lot of things. So you

482
00:22:28.980 --> 00:22:33.540
can absolutely have a HTML
page that has no WPF

483
00:22:33.540 --> 00:22:36.750
UI on it at all.
And, you know, use the,

484
00:22:36.810 --> 00:22:39.150
the, both the HTML Dom
API, since it's overload. The

485
00:22:39.150 --> 00:22:41.700
other thing that's kind of
cool though, is Silverlight allows

486
00:22:41.700 --> 00:22:46.620
you to expose public static
methods on your route container

487
00:22:46.620 --> 00:22:49.080
class. And you can then
go ahead and decorate those

488
00:22:49.080 --> 00:22:52.590
methods and say they are
script realizable. And that means

489
00:22:52.590 --> 00:22:55.320
that you can actually from
JavaScript in the browser. So

490
00:22:55.320 --> 00:22:57.540
again, using the native JavaScript
that ships with a browser,

491
00:22:57.840 --> 00:23:01.950
you can actually construct JavaScript
objects and call those public

492
00:23:01.950 --> 00:23:04.290
static methods that might be
written in C sharp and

493
00:23:04.290 --> 00:23:07.500
will actually serialize the JavaScript
to, and from those methods,

494
00:23:08.450 --> 00:23:11.760
This is like a method
missing for jobs. Yeah. Well,

495
00:23:11.760 --> 00:23:13.980
JavaScript's, you know, job's going
to lay back It's whole.

496
00:23:13.980 --> 00:23:16.020
Yeah, it's holding it down
thing. I keep putting things

497
00:23:16.020 --> 00:23:18.390
in Ruby terms, but I
just decided that I want

498
00:23:18.390 --> 00:23:20.640
to function be called Fu
I'm going to call it

499
00:23:20.640 --> 00:23:23.040
from JavaScript. And when I
say Fu it's happening again,

500
00:23:23.610 --> 00:23:26.910
Correct. And if you pass
in, for example, a couple

501
00:23:26.910 --> 00:23:29.940
of strings or an integer
or an array of objects,

502
00:23:30.540 --> 00:23:32.610
we can actually serialize back
and forth. And we were

503
00:23:32.610 --> 00:23:35.880
actually reusing the same sterilization
technology that we used, where

504
00:23:35.880 --> 00:23:38.220
they spend an Ajax on
the server as part of

505
00:23:38.220 --> 00:23:40.680
our Jason marshaling code. But
the cool thing is we're

506
00:23:40.680 --> 00:23:44.550
actually marshaling, not, you know,
we're marshaling to and from

507
00:23:44.550 --> 00:23:48.110
native dominant types provides another
easy way that, you know,

508
00:23:48.120 --> 00:23:49.760
if you want to go
ahead and you have something

509
00:23:49.760 --> 00:23:52.850
computationally intensive on the browser,
you can actually, yeah. If

510
00:23:52.850 --> 00:23:54.350
you want it, you can
host a server like control

511
00:23:54.350 --> 00:23:56.150
that has no UI and
just call into it and

512
00:23:56.150 --> 00:23:58.930
use the CLR engine to
basically process it. It seems

513
00:23:58.930 --> 00:24:01.210
like you could, you can
scale up your use of

514
00:24:01.210 --> 00:24:03.130
Silverlight. I mean, if you're
using the example you just

515
00:24:03.130 --> 00:24:05.500
gave as a, as a
really simple one, you know,

516
00:24:05.500 --> 00:24:07.630
maybe I'm a scientist and
I've got something really hardcore

517
00:24:07.630 --> 00:24:10.060
going on. And I want
to just add a computational

518
00:24:10.060 --> 00:24:13.420
engine and do some more
distributed computing. Suddenly Silverlight, without

519
00:24:13.420 --> 00:24:15.820
UI is doing distribute computing.
Then I decide to put

520
00:24:15.820 --> 00:24:18.460
some visualizations in and maybe
I go to a 100%

521
00:24:18.460 --> 00:24:21.640
buy 100% silver light fills
the screen. And I'm kind

522
00:24:21.640 --> 00:24:25.150
of living the whole rich
media lifestyle and go all

523
00:24:25.150 --> 00:24:27.330
the way up and down
that hole. Yeah. And the

524
00:24:27.370 --> 00:24:29.980
WB, I mean, the WPF
UI framework that we'll ship

525
00:24:29.980 --> 00:24:32.590
in Silverlight will be a
rich framework today. I mean,

526
00:24:32.590 --> 00:24:35.860
today in the alphabets, it
is very much focused on

527
00:24:35.860 --> 00:24:38.680
visualization and some of the
core primitives that we need

528
00:24:38.680 --> 00:24:40.660
in order to build higher
level controls. We don't have,

529
00:24:40.810 --> 00:24:43.810
we don't have many higher
level controls yet. You'll see

530
00:24:43.810 --> 00:24:45.340
those controls start to appear.
And now that we have

531
00:24:45.510 --> 00:24:48.100
the core basis there and
he'll see constructs like the

532
00:24:48.100 --> 00:24:51.940
WPF layout, manager's data binding,
you know, eventually a data

533
00:24:51.940 --> 00:24:54.160
grid and those types of
controls up here of they're

534
00:24:54.160 --> 00:24:56.350
not all there yet, but
it does provide a really

535
00:24:56.350 --> 00:25:00.520
good foundation today is with
today's build as well as

536
00:25:00.520 --> 00:25:02.710
a control encapsulation model, such
that you can build those

537
00:25:02.710 --> 00:25:05.320
types of components. You know,
I definitely recommend people do

538
00:25:05.320 --> 00:25:07.150
take a look at WPF
because it is a very

539
00:25:07.150 --> 00:25:10.300
exciting technology. One thing, going
back to your threading comments

540
00:25:10.900 --> 00:25:13.750
in terms of how the
top banana video editor app

541
00:25:13.750 --> 00:25:17.920
was able to display things
as sort of stunning. And

542
00:25:17.920 --> 00:25:20.650
as real time as it
looked is that WPF is

543
00:25:20.650 --> 00:25:23.140
what we call a retain
mode graphics engine, which means

544
00:25:23.140 --> 00:25:25.870
that when you actually paint
something on the screen, you

545
00:25:25.870 --> 00:25:28.180
don't have to manually write
any code to repaint it

546
00:25:28.680 --> 00:25:31.210
WPF. And the whole model
does that for you automatically.

547
00:25:31.210 --> 00:25:34.210
So it's different than say
when 32 or user TDI,

548
00:25:34.900 --> 00:25:36.780
which made it much more
harder to do that. The

549
00:25:36.820 --> 00:25:39.370
thing that we've done with
our WPF implementation and Silverlight

550
00:25:39.820 --> 00:25:42.100
is it is very much
optimized to take advantage of

551
00:25:42.100 --> 00:25:44.380
as many cores or processors
you have on the system.

552
00:25:45.070 --> 00:25:47.110
So if you have two
cores and, you know, going

553
00:25:47.110 --> 00:25:49.420
forward, pretty much every machine
will have two cores or

554
00:25:49.420 --> 00:25:55.030
more cores. You automatically get
a really rich UI framework

555
00:25:55.360 --> 00:25:57.640
that is designed to maximize
and take advantage of that.

556
00:25:57.700 --> 00:26:00.970
And that, that, that is
also one of the reasons

557
00:26:00.970 --> 00:26:04.180
why you can build some
stunning graphics using Silverlight. Yeah.

558
00:26:04.180 --> 00:26:06.840
Is that, that usage of
multiple cores, is that at

559
00:26:06.840 --> 00:26:09.970
a WPF aspect of Silverlight
or is that a new

560
00:26:10.060 --> 00:26:13.930
thing in the core CLR?
Well, the, the CLR does

561
00:26:13.930 --> 00:26:16.240
take advantage of multiple cores
are things like garbage collection

562
00:26:16.240 --> 00:26:19.480
and things like that, but,
but from a graphics perspective

563
00:26:19.480 --> 00:26:21.730
and from a UI framework
perspective, that is certainly something

564
00:26:21.730 --> 00:26:25.090
we're doing the Silverlight and
the full WPF going forward.

565
00:26:25.450 --> 00:26:28.390
And, you know, there's a
number of dozens, a good

566
00:26:28.390 --> 00:26:30.310
blog post I should do,
but there's number of things

567
00:26:30.310 --> 00:26:33.310
that we're doing across.net. Well,
the UI layer, but also

568
00:26:33.550 --> 00:26:36.910
things like link that by
going to a mode where

569
00:26:36.910 --> 00:26:39.100
you're just you're, you're not
actually telling us what to

570
00:26:39.100 --> 00:26:41.530
do. You're actually describing what
you'd like to have done.

571
00:26:42.010 --> 00:26:44.910
So XAML, you, you say
paint this pixel, you say,

572
00:26:44.910 --> 00:26:49.050
I want a rectangle here,
this dimension, and with link,

573
00:26:49.110 --> 00:26:51.540
you don't say search the
four, don't do a four

574
00:26:51.540 --> 00:26:53.280
loop. I say, I want
to have something that meets

575
00:26:53.280 --> 00:26:57.690
this criteria by doing more
declarative intent, you know, the

576
00:26:57.690 --> 00:27:01.290
CLR and thought net and
or higher level frameworks will

577
00:27:01.290 --> 00:27:03.600
be able to go ahead
and optimize appropriately across multiple

578
00:27:03.600 --> 00:27:06.650
cores. Does Silverlight act any
different on Vista with the

579
00:27:06.650 --> 00:27:09.790
desktop compositing engine? I mean,
it's, it's painting it's, it's,

580
00:27:09.800 --> 00:27:12.200
it's constrained to what the
put the browser can do,

581
00:27:12.200 --> 00:27:15.740
right. So I think I'd
asked this question to you

582
00:27:15.740 --> 00:27:18.110
casually in the hall, the
idea that if you use

583
00:27:18.110 --> 00:27:21.860
the accessibility magnifier and you
hover over a WPF app,

584
00:27:21.890 --> 00:27:25.880
like the New York times reader,
you get beautiful anti-elitist stuff.

585
00:27:25.910 --> 00:27:28.820
But if the WPF engine
in Silverlight is different and

586
00:27:28.820 --> 00:27:31.790
living within the browser, if
you take the Vista magnifier

587
00:27:31.790 --> 00:27:35.030
over that, you'll probably get,
rasters probably get better. Yeah.

588
00:27:35.060 --> 00:27:36.350
You asked me yesterday. I
haven't had a chance to

589
00:27:36.350 --> 00:27:38.780
try it out Box line
around, you know what I'm

590
00:27:38.780 --> 00:27:40.820
asking about though? Don't you
Jason. Yeah. Yeah. I understand

591
00:27:40.820 --> 00:27:43.100
exactly what you're asking about.
I mean, it's not a

592
00:27:43.100 --> 00:27:44.870
particularly interesting, it's not a
big deal, but it sure

593
00:27:44.870 --> 00:27:47.540
is an interesting question because
it tells you how it,

594
00:27:47.540 --> 00:27:49.580
it gives it gives it's
nice to experiment. Right? Cause

595
00:27:49.580 --> 00:27:51.710
I don't have the code.
So as a, as a

596
00:27:51.710 --> 00:27:53.960
scientist, I have to use
a scientific method to clean

597
00:27:53.960 --> 00:27:56.180
what I think is going
on inside. Yeah. The thing

598
00:27:56.180 --> 00:27:59.570
with WPF on the desktop,
especially with Vista Vista introduced

599
00:27:59.570 --> 00:28:02.000
a new driver model and
it made it much easier

600
00:28:02.000 --> 00:28:05.750
to do this kind of
cooperative, you know, graphics processing

601
00:28:05.750 --> 00:28:08.420
on the machine. And so,
you know, you get full

602
00:28:09.020 --> 00:28:12.440
hardware acceleration and other things
like that. And so that's

603
00:28:12.440 --> 00:28:14.150
one of the advantages you're
gonna get with the desktop

604
00:28:14.150 --> 00:28:17.000
version of WPF. In this
case, Silverlight is optimized for,

605
00:28:17.000 --> 00:28:19.160
you know, cross plaid giving
you reach et cetera, but

606
00:28:19.160 --> 00:28:20.750
it shares a lot of
the same, you know, graphics

607
00:28:21.170 --> 00:28:24.440
techniques underneath of that. That's
very, that's very, very good

608
00:28:24.440 --> 00:28:27.830
information because you're, you're, you're
starting to give me and

609
00:28:27.830 --> 00:28:31.730
hopefully other folks enough information
to decide what, what tools

610
00:28:31.730 --> 00:28:34.160
right. For the job, like,
I've always wondered about the

611
00:28:34.160 --> 00:28:38.000
ex bap, right? The XAML
browser-based applications. And I've always

612
00:28:38.000 --> 00:28:40.220
thought it was kind of
this red headed stepchild, but

613
00:28:40.220 --> 00:28:42.680
you just right then made
me realize that if I

614
00:28:42.680 --> 00:28:46.520
was doing a browser based
3d accelerated application, that the

615
00:28:46.670 --> 00:28:49.610
protein folding or something, and
I wanted it to be,

616
00:28:49.880 --> 00:28:51.260
and I didn't want it
to be a OneTouch deploy,

617
00:28:51.300 --> 00:28:53.630
jump out of the browser.
I wanted a silver light

618
00:28:54.380 --> 00:28:57.290
like experience and a very
minimal installation that an expert

619
00:28:57.290 --> 00:28:59.060
would be totally appropriate for
that. I would get all

620
00:28:59.060 --> 00:29:02.450
the hardware acceleration and all
of the, the full WPF

621
00:29:02.450 --> 00:29:06.920
desktop experience inside the car.
Yeah, certainly, you know, the

622
00:29:06.920 --> 00:29:08.540
way we've been thinking about
Silverlight and this, this is

623
00:29:08.540 --> 00:29:10.400
I think an important point
for people to understand is

624
00:29:11.540 --> 00:29:13.790
all the API is, and
the features and Silverlight are

625
00:29:13.790 --> 00:29:16.520
absolutely designed to be cross
platform. And we won't be

626
00:29:16.520 --> 00:29:20.780
adding in features to Silverlight
that we can't consistently expose

627
00:29:20.780 --> 00:29:23.840
on all platforms. And so
developers can know, Hey, if

628
00:29:23.840 --> 00:29:26.090
I write to the subset,
it will work in all

629
00:29:26.090 --> 00:29:29.450
browsers and all platforms. You
know, there will always be

630
00:29:29.540 --> 00:29:32.240
richer features that we can
have, we can use that

631
00:29:32.240 --> 00:29:36.200
are platform specific, like 3d
hardware, acceleration, you know, like

632
00:29:36.200 --> 00:29:40.490
richer database support and things
like that. And those, you

633
00:29:40.490 --> 00:29:42.310
know, obviously the dot framework
and the window, you know,

634
00:29:43.030 --> 00:29:46.870
things like X paps and
full WPF applications, all the

635
00:29:46.870 --> 00:29:50.140
client will be able to
take advantage of. And certainly

636
00:29:50.140 --> 00:29:52.690
we see that there are
different types of apps that

637
00:29:52.690 --> 00:29:55.240
people build. Sometimes they want
it to be as ubiquitous

638
00:29:55.240 --> 00:29:57.220
as possible. So really it's
the way to go for

639
00:29:57.220 --> 00:30:00.190
client apps. And sometimes you
want to take as much

640
00:30:00.220 --> 00:30:03.790
maximum reach of the operating
system you're running on the

641
00:30:03.790 --> 00:30:06.280
system, whether it's office integration,
whether it's 3d, whether it's

642
00:30:06.280 --> 00:30:08.710
offline support, there's a whole
bunch of other good reasons

643
00:30:08.710 --> 00:30:12.760
there. And there obviously the
full.net framework with WPF, either

644
00:30:12.760 --> 00:30:16.000
running an expat mode or
outside the browser is really

645
00:30:16.000 --> 00:30:18.260
appropriate. The best is absolutely
the right thing to do.

646
00:30:18.790 --> 00:30:22.090
Cool. People are stoked. People's
brains are exploding. They're wanting

647
00:30:22.120 --> 00:30:24.160
to one guy blogged. He's
like, wow, I have learning

648
00:30:24.160 --> 00:30:26.320
to do. He's like, he's
been kind of sitting around,

649
00:30:26.320 --> 00:30:27.850
you know, just cutting C
sharp for a few years.

650
00:30:27.850 --> 00:30:31.210
Like, Oh, this is the
biggest thing since.net. As far

651
00:30:31.210 --> 00:30:33.820
as I'm concerned, we're pretty
excited about it. It's been,

652
00:30:34.180 --> 00:30:37.600
we've been working on this
for a year now and

653
00:30:38.770 --> 00:30:42.520
it's great to finally be
able to ship the bits

654
00:30:42.520 --> 00:30:44.080
and be able to talk
about it and see people's

655
00:30:44.080 --> 00:30:47.330
reactions. You know, people were
just stunned yesterday and it's

656
00:30:47.530 --> 00:30:50.080
always fun to have that.
The future is bright. I

657
00:30:50.080 --> 00:30:51.730
really appreciate you guys taking
the time out of your

658
00:30:51.730 --> 00:30:54.440
day. I know your schedule
with you guys talking to

659
00:30:54.440 --> 00:30:56.590
the press, everybody. Thanks a
lot for talking to us

660
00:30:56.590 --> 00:31:04.920
here on house. <inaudible>.

