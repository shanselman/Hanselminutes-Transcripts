WEBVTT FILE

1
00:00:00.330 --> 00:00:03.480
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.480 --> 00:00:06.450
they make the show possible.
Today's show is sponsored by

3
00:00:06.450 --> 00:00:10.620
developer express, become a UI
superhero with dev express controls

4
00:00:10.620 --> 00:00:15.150
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.540 --> 00:00:19.620
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.650 --> 00:00:23.730
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.820 --> 00:00:48.780
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com
Hansel minutes.com it's Hansel minutes,

8
00:00:49.230 --> 00:00:53.400
a weekly discussion with web
developer and technologist Scott Hanselman.

9
00:00:53.850 --> 00:00:58.800
This is Lawrence Ryan announcing show
number 530. In this episode,

10
00:00:58.800 --> 00:01:02.700
Scott talks with Jen Looper
about building native apps using

11
00:01:02.700 --> 00:01:09.120
native script. Hi, this is
Scott Hanselman. This is another

12
00:01:09.120 --> 00:01:13.110
episode of Hanselminutes today. We're
talking with Jen Luper about

13
00:01:13.110 --> 00:01:16.590
native script. I understand that
you were just at a

14
00:01:16.590 --> 00:01:20.060
conference. Was it an angular
conference about Yes, we were

15
00:01:20.060 --> 00:01:22.580
just at M NG comp
in Utah in salt Lake

16
00:01:22.580 --> 00:01:25.820
city. And that's the biggest
and one of the most

17
00:01:25.820 --> 00:01:28.760
fun conferences I've ever been
to actually it's the biggest

18
00:01:29.030 --> 00:01:33.920
angular conference that it's actually
a conference put on by

19
00:01:33.920 --> 00:01:36.710
the community, but the Google
angular team is heavily involved

20
00:01:36.710 --> 00:01:38.420
in it. So they do
this every year and this

21
00:01:38.420 --> 00:01:40.790
is their third year. So
it's kind of become the

22
00:01:40.790 --> 00:01:44.210
angular con Definitely the angular
confit in the U S

23
00:01:44.240 --> 00:01:46.550
and I'll be an angular
connect in London in September

24
00:01:46.550 --> 00:01:49.400
as well. All right, very
cool. Now, one thing just

25
00:01:49.400 --> 00:01:53.510
in the interest of a
full disclosure, a native script

26
00:01:53.510 --> 00:01:55.700
is an open source project,
and you can see it

27
00:01:55.700 --> 00:01:58.220
on get hub. You can
go to native script.org. It

28
00:01:58.220 --> 00:02:03.380
is financially supported though by
Tellerik Tellerik coincidentally has sponsored

29
00:02:03.500 --> 00:02:06.260
Hansel minutes for a number
of years. I didn't know

30
00:02:06.260 --> 00:02:08.420
any of this though, when
I invited you on the

31
00:02:08.420 --> 00:02:10.910
show, but I just want
to make sure that people

32
00:02:10.910 --> 00:02:13.430
don't understand that you're on
the show because native script

33
00:02:13.430 --> 00:02:17.420
is cool, unrelated to any
sponsorship relationship we have with

34
00:02:17.420 --> 00:02:21.530
Tellerik, which is a great
company, but unrelated. Awesome. Cool.

35
00:02:21.920 --> 00:02:24.290
So, so native script is
you can go to native

36
00:02:24.290 --> 00:02:26.870
script.org. It's an open source
platform, and it says for

37
00:02:26.870 --> 00:02:32.180
building native mobile applications, is
it its own language? Am

38
00:02:32.180 --> 00:02:33.920
I writing Java script? Am
I writing some other special

39
00:02:33.920 --> 00:02:37.400
links? Yeah, I think that
the word native script, sometimes

40
00:02:37.460 --> 00:02:39.710
I mislead some people because
I was actually just at

41
00:02:39.710 --> 00:02:42.020
a meetup last night and
they said, you know, so

42
00:02:42.020 --> 00:02:44.600
I have to learn a
new language. Oh no, no,

43
00:02:44.600 --> 00:02:48.470
actually it's, it's just using
JavaScript to write native apps.

44
00:02:48.470 --> 00:02:50.480
So the word native script
is almost like a mashup

45
00:02:50.480 --> 00:02:54.350
of JavaScript plus native. So
even writing in JavaScript or

46
00:02:54.350 --> 00:02:57.350
TypeScript, if you so prefer
on the front end, you

47
00:02:57.350 --> 00:03:00.340
might use XML. And then
you can, your app CSS

48
00:03:00.760 --> 00:03:03.310
and native script is a
runtime that allows you to

49
00:03:03.850 --> 00:03:06.120
use these languages to build
a truly native app. So

50
00:03:06.130 --> 00:03:09.400
it's really a new technology
and it's a pretty exciting

51
00:03:09.400 --> 00:03:14.040
place to be right now.
So when I hear about

52
00:03:14.100 --> 00:03:19.290
native apps on native apps
with JavaScript, I think, Oh,

53
00:03:19.290 --> 00:03:23.790
wait a second, you're putting
a, a fake native frame

54
00:03:24.300 --> 00:03:26.310
around something. And then you're
just putting it in a

55
00:03:26.310 --> 00:03:29.820
web view and lights like
Cordova, right. Which when we've

56
00:03:29.820 --> 00:03:32.310
all been there, we've all
seen those kinds of web

57
00:03:32.460 --> 00:03:35.580
websites in a frame they're
kind of like fake apps.

58
00:03:37.200 --> 00:03:40.620
You had many sites. Exactly.
Right? So this is like

59
00:03:40.620 --> 00:03:43.680
the next generation after Cordova,
I would say. And I

60
00:03:43.680 --> 00:03:45.840
don't want to disrespect, you
know, the hybrid mobile app

61
00:03:46.200 --> 00:03:49.560
ecosystem, because I mean, we
certainly still support the creation

62
00:03:49.560 --> 00:03:52.980
of hybrid mobile apps and,
but they're running in a

63
00:03:52.980 --> 00:03:55.170
web view. So you're going
to have a little bit

64
00:03:55.170 --> 00:03:58.890
of a lag because this
rapper does, does basically wrap

65
00:03:58.920 --> 00:04:02.730
web technologies, but it's a
great way to build, you

66
00:04:02.730 --> 00:04:06.390
know, your cross platform, iOS,
Android, even windows, phone apps,

67
00:04:06.390 --> 00:04:09.090
quickly and easily with one
code base also using, you

68
00:04:09.090 --> 00:04:11.310
know, CSS and JavaScript, but
it's running within a web

69
00:04:11.340 --> 00:04:14.130
view. So it does have
a little bit of lag

70
00:04:14.160 --> 00:04:17.160
sometimes. And sometimes the look
and feel and the kind

71
00:04:17.160 --> 00:04:20.190
of organic nature of the
app. Doesn't just, doesn't quite

72
00:04:20.190 --> 00:04:23.580
feel native unless you really
know what you're doing. And

73
00:04:23.580 --> 00:04:26.460
you're really using a lot
of little plugins to create

74
00:04:26.460 --> 00:04:29.400
native interactions and that sort
of thing. There are some

75
00:04:29.400 --> 00:04:32.310
great hybrid mobile apps out
there like untapped as one.

76
00:04:32.940 --> 00:04:35.550
And it's, it's perfectly adequate
for what you need, but

77
00:04:36.150 --> 00:04:38.370
when at a certain point
in every developer's life, there

78
00:04:38.370 --> 00:04:40.500
comes a time when you
might want to have something

79
00:04:40.500 --> 00:04:42.300
with a little bit more
of a native experience and

80
00:04:42.300 --> 00:04:46.350
these new technologies like native
script or offering this ecosystem.

81
00:04:47.520 --> 00:04:49.290
And it's just being built
up right now and it's

82
00:04:49.290 --> 00:04:52.200
brand new and it's really
a fun place to be

83
00:04:52.200 --> 00:04:57.120
right now. Yeah. I think
you, you're far more polite

84
00:04:57.120 --> 00:04:59.580
than maybe I was, I
don't mean to disrespect hybrid

85
00:04:59.580 --> 00:05:02.310
apps. I think the point
is that as a user,

86
00:05:03.270 --> 00:05:06.960
I don't want to smell
an app that looks like

87
00:05:07.060 --> 00:05:10.560
it's been thrown together. You
know? So I think hybrid

88
00:05:10.560 --> 00:05:13.650
apps have gotten a bad
rap in the last several

89
00:05:13.650 --> 00:05:17.460
years when someone takes a
mediocre mobile site, puts it

90
00:05:17.460 --> 00:05:20.160
in a frame and says,
Hey look, website. But I

91
00:05:20.160 --> 00:05:22.890
can, I agree that like,
whether it be Xamarin or

92
00:05:22.890 --> 00:05:27.330
Cordova tools, there are absolutely
apps where you would tell

93
00:05:27.330 --> 00:05:29.340
me that that's not really
a native app. And I'd

94
00:05:29.340 --> 00:05:32.670
be like, wow, like that's
insane. And that's the best

95
00:05:32.670 --> 00:05:35.220
compliment, right? That you can
give an app. Yeah, my

96
00:05:35.220 --> 00:05:37.200
boss Burke, actually, if you
look on YouTube, he did

97
00:05:37.200 --> 00:05:41.160
the hybrid mobile challenge, sort
of like the Pepsi challenge,

98
00:05:41.160 --> 00:05:44.310
you know, can you tell
which of course actually both

99
00:05:44.310 --> 00:05:46.110
were hybrid mobiles. It was
kind of really funny at

100
00:05:46.110 --> 00:05:47.550
the end. It's quite an
amusing if you look it

101
00:05:47.550 --> 00:05:52.170
up on YouTube, but yeah.
So our, our goal is

102
00:05:52.170 --> 00:05:55.500
to make truly native apps
and make them as performing

103
00:05:55.500 --> 00:05:58.550
as native because they aren't
native. Okay. So does that

104
00:05:58.550 --> 00:06:01.970
mean that they, I use
Java script and I use

105
00:06:02.030 --> 00:06:07.110
what on the UI? You
said, you said, Yeah. Yeah.

106
00:06:07.120 --> 00:06:09.370
It's interesting. And a lot
of the people coming from

107
00:06:09.370 --> 00:06:11.950
the Xamarin world are using
the XAML. They might have

108
00:06:11.950 --> 00:06:15.190
a little more familiarity already,
excuse me, with this technique,

109
00:06:16.090 --> 00:06:18.880
the JavaScript developers might look
a little askance at this

110
00:06:18.880 --> 00:06:22.540
kind of putting together of
the UI, but once you

111
00:06:22.540 --> 00:06:25.390
get into it, it starts
to make sense. And it

112
00:06:25.390 --> 00:06:27.730
feels almost like HTML. So
it's not so bad. You

113
00:06:27.730 --> 00:06:29.180
know, like if I can
do it, anybody can do

114
00:06:29.180 --> 00:06:30.370
it. It's like the whole
point of my career. If

115
00:06:30.370 --> 00:06:32.290
I can do it, you
can do it. So you

116
00:06:32.290 --> 00:06:34.450
would use XML on the
front end to write your

117
00:06:34.450 --> 00:06:37.780
UI. And then you would
have code behind files are

118
00:06:37.780 --> 00:06:40.120
written in JavaScript or TypeScript.
And then you can style

119
00:06:40.120 --> 00:06:42.760
with a subset of CSS.
And we have all of

120
00:06:42.760 --> 00:06:45.250
this documented. If you go
to native script.org, look at

121
00:06:45.250 --> 00:06:48.790
the docs. So how does
the, how does the workflow

122
00:06:48.790 --> 00:06:51.600
work? I write my XML,
my UI in a, in

123
00:06:51.600 --> 00:06:55.060
a, in a non specific
way. I'm not saying here's

124
00:06:55.060 --> 00:06:57.550
an Android button, here's an
iPhone button. I just say,

125
00:06:57.550 --> 00:06:59.230
here's a button and I
want it to look like

126
00:06:59.230 --> 00:07:01.960
this. Exactly. So you can
take a look again at

127
00:07:01.960 --> 00:07:03.880
the docs, but what we're
doing is we're offering native

128
00:07:03.880 --> 00:07:06.760
script modules so that you
don't have to write a

129
00:07:06.760 --> 00:07:09.640
native Android button and a
native iOS button in JavaScript.

130
00:07:09.820 --> 00:07:12.400
You just use the tag
button and with, you know,

131
00:07:12.400 --> 00:07:17.500
text equals push me and
tap is go. And then

132
00:07:17.500 --> 00:07:20.710
this creates an abstraction. So
the beauty of native script

133
00:07:20.710 --> 00:07:24.010
is that abstraction that it
makes to allow you to

134
00:07:24.040 --> 00:07:26.860
lever it, to, to bridge
over to then the native

135
00:07:26.860 --> 00:07:29.260
code behind the scenes. So
there's a lot of work

136
00:07:29.260 --> 00:07:31.510
being done behind the scenes
that is abstracted away from

137
00:07:31.510 --> 00:07:34.540
you. That's really helpful. But
the beauty, the other beauty

138
00:07:34.540 --> 00:07:36.670
of native script, other than
those abstractions is that we

139
00:07:36.670 --> 00:07:40.500
do allow you to access
all of the native API

140
00:07:40.500 --> 00:07:42.670
APIs. And this is what
sets us apart to some

141
00:07:42.670 --> 00:07:45.010
of the other people in
this, in this space, you

142
00:07:45.010 --> 00:07:47.890
can always take a look
at the way native things

143
00:07:47.890 --> 00:07:51.790
are done natively and write
JavaScript to leverage those, those

144
00:07:51.790 --> 00:07:55.120
native, the native extras that
you might need to, to

145
00:07:55.170 --> 00:07:58.930
leverage. So if there's some
thing that an Android phone

146
00:07:58.930 --> 00:08:02.320
can do a certain flavor
that another, an iPhone couldn't,

147
00:08:03.220 --> 00:08:06.310
you're writing effectively native code
in JavaScript, you can call

148
00:08:06.310 --> 00:08:08.740
that API. If the API
is invisible to you, you

149
00:08:08.740 --> 00:08:11.290
can call it like any
old API. Exactly. And we're

150
00:08:11.290 --> 00:08:14.920
leveraging the JavaScript's virtual machines
to allow that translation to

151
00:08:14.920 --> 00:08:17.710
be made. And that's kind
of the exciting bit. It

152
00:08:17.710 --> 00:08:21.160
just takes a little bit,
you need to understand a

153
00:08:21.160 --> 00:08:24.100
little of the way, you
know, the native ecosystems work,

154
00:08:24.100 --> 00:08:25.750
and then you can write
your Java script on top

155
00:08:25.750 --> 00:08:28.240
of it. And it works
really nicely. There's a couple

156
00:08:28.240 --> 00:08:31.480
of articles on native script.org
on our blogs that explain,

157
00:08:31.480 --> 00:08:33.010
you know, how this is
done. So it's really kind

158
00:08:33.010 --> 00:08:36.250
of a good read. And
I understand that there's no

159
00:08:36.250 --> 00:08:40.210
like bridging involved. It's not
that you're marshaling things. It's

160
00:08:40.210 --> 00:08:44.230
just, you're, it's, you're somehow
writing native code and calling

161
00:08:44.230 --> 00:08:47.830
native code using the JavaScript
VM or an, Oh, you

162
00:08:47.830 --> 00:08:49.600
have a special runtime of
your own. Yeah. It's the

163
00:08:49.600 --> 00:08:51.340
runtime of our own actually.
So there's a little bit

164
00:08:51.340 --> 00:08:54.130
of marshaling going on, but
yeah, I think that the

165
00:08:55.170 --> 00:08:57.420
have this very specific runtime
that we use on some

166
00:08:57.420 --> 00:08:59.340
other solutions, you know, have
more of a bridging or

167
00:08:59.340 --> 00:09:01.680
a wrapper solutions. Everybody's trying
to do the same thing,

168
00:09:01.680 --> 00:09:05.600
but yeah. Different ways. Right,
right. I've seen people say,

169
00:09:05.930 --> 00:09:07.700
well, we're using a web
view and then we're using

170
00:09:07.700 --> 00:09:10.460
JavaScript within it. And then
we're going to make native

171
00:09:10.460 --> 00:09:13.640
things available via the Dom
and then kind of like

172
00:09:13.640 --> 00:09:15.620
a bottom up. And then
other people say, no, we're

173
00:09:15.620 --> 00:09:18.200
going to start with JavaScript
virtual machines, like V8 or

174
00:09:18.200 --> 00:09:21.590
JavaScript core, and then modify
those and then make the

175
00:09:21.590 --> 00:09:24.620
native APIs available to the
VM directly. And that's what

176
00:09:24.620 --> 00:09:27.740
we're doing. That's that letter?
That letter piece. Absolutely. Alright.

177
00:09:27.740 --> 00:09:29.810
So, so then that means
you're getting basically the same

178
00:09:29.810 --> 00:09:32.390
kind of support that you
would get writing, like a

179
00:09:32.390 --> 00:09:35.630
desktop app in Chrome, like
an electron app, like you're

180
00:09:35.630 --> 00:09:38.300
getting real access to the
native stuff. Just like, you're

181
00:09:38.440 --> 00:09:41.180
like, like a native app
in what's an example, like

182
00:09:41.180 --> 00:09:43.910
Slack is a great example
of electronic app that doesn't

183
00:09:43.910 --> 00:09:48.830
really feel like a web
app. Exactly. Exactly. Okay. So

184
00:09:48.830 --> 00:09:53.240
this works on iOS and
Android. Yes. And we're going

185
00:09:53.240 --> 00:09:55.730
to be supporting windows universal
and some point in the

186
00:09:55.730 --> 00:09:57.920
near future. I think there's
a proof of concept out

187
00:09:57.920 --> 00:09:59.810
there actually. And all of
this stuff is open source,

188
00:09:59.810 --> 00:10:02.570
so you can go tinker
with it. Oh. So then

189
00:10:02.570 --> 00:10:04.990
I will be able to
write a UWP app and

190
00:10:05.000 --> 00:10:07.430
they would run anywhere that
runs. That's pretty cool. Yeah.

191
00:10:07.430 --> 00:10:09.800
That's something to think about.
We also have an amazing

192
00:10:09.800 --> 00:10:13.910
community and they're writing these
really cool scaffolding projects. We

193
00:10:13.910 --> 00:10:18.020
have a wonderful tolerant developer
expert called Nathan Walker, who is

194
00:10:18.050 --> 00:10:22.520
very active in the angular
community. And he's written something

195
00:10:22.520 --> 00:10:26.780
called, I think it's called
angular seed scaffolding. And it

196
00:10:26.780 --> 00:10:28.730
allows you to use that
your one code base to

197
00:10:28.730 --> 00:10:31.970
write for the web, for
desktop, for, and then for

198
00:10:31.970 --> 00:10:35.270
iOS and Android. He also
has another scaffolding project called

199
00:10:36.170 --> 00:10:40.760
I think it's angular native
script magic. And that does

200
00:10:40.760 --> 00:10:43.760
the same sort of thing.
So people are sort of

201
00:10:43.760 --> 00:10:47.300
helping you get, get started
quickly by publishing these cool

202
00:10:47.300 --> 00:10:49.400
open source projects on GitHub.
I just spun up a

203
00:10:49.400 --> 00:10:51.590
web app today and I'm
like, Oh my gosh, I

204
00:10:51.590 --> 00:10:53.880
just created, you know, whether
native and it's sharing code

205
00:10:53.880 --> 00:10:59.660
and is awesome. So this
came out in March of

206
00:10:59.690 --> 00:11:02.420
2015, so you're a little
bit over a year into

207
00:11:02.420 --> 00:11:04.850
it. And this was kind
of a crowded space though.

208
00:11:04.850 --> 00:11:07.340
Cause you had phone gap
early on, you had Cordova,

209
00:11:07.340 --> 00:11:10.820
then there was titanium and
Xamarin. Now there's, there's this

210
00:11:10.820 --> 00:11:15.170
react native. Where does native
script fit into that ecosystem?

211
00:11:16.490 --> 00:11:19.250
Yeah, so this isn't like
I said, the second generation

212
00:11:19.280 --> 00:11:21.890
after Cordova. So a lot
of people are trying to

213
00:11:21.890 --> 00:11:23.930
solve this, you know, titanium
certainly been around doing the

214
00:11:23.930 --> 00:11:25.970
same sort of thing. I
believe they use a bridging

215
00:11:27.320 --> 00:11:30.800
as does react native. Of
course the big difference between

216
00:11:30.830 --> 00:11:33.350
a native script and react
native is of course react

217
00:11:33.350 --> 00:11:35.900
native is using react. Whereas
we have kind of hitched

218
00:11:35.900 --> 00:11:40.220
our wagon to the angular
ecosystem. So there are two

219
00:11:40.220 --> 00:11:42.680
ways to build native script
apps. You can build, you

220
00:11:42.680 --> 00:11:46.250
know, straight JavaScript XNL CSS
or you can use the

221
00:11:46.250 --> 00:11:49.460
angular integration that we have
for angular two very specifically.

222
00:11:49.760 --> 00:11:52.100
So that's a, that's a
great way to go ahead

223
00:11:52.100 --> 00:11:55.540
and, and start building up
up your app. But yeah,

224
00:11:55.540 --> 00:11:58.060
and then the differentiator between
us and for example, you

225
00:11:58.060 --> 00:12:00.160
know, Xamarin would be, of
course they're using C-sharp, you

226
00:12:00.160 --> 00:12:04.000
know, so everyone's picking kind
of the, the language and

227
00:12:04.000 --> 00:12:07.180
the ecosystem that they prefer.
And now they're able to

228
00:12:07.180 --> 00:12:10.270
leverage these new technologies to
build nice native mobile apps.

229
00:12:10.270 --> 00:12:14.940
It's really fun. Hmm. So
when, when I'm writing an

230
00:12:14.940 --> 00:12:18.330
app that I want to
run everywhere, but I simultaneously

231
00:12:18.330 --> 00:12:22.140
want it to feel native.
Might I find myself saying

232
00:12:22.140 --> 00:12:24.450
like writing code? That's like,
well, if I'm on Android,

233
00:12:24.450 --> 00:12:26.940
call this native Android API
and if I'm on iOS

234
00:12:26.940 --> 00:12:29.640
call this native iOS API.
So which, how many times

235
00:12:29.640 --> 00:12:32.640
am I calling native APIs
versus calling kind of universal

236
00:12:32.640 --> 00:12:36.360
native script runtimes? Yeah. I
have two apps in production.

237
00:12:36.360 --> 00:12:38.940
Actually. One is a weather
app and I'm on an

238
00:12:39.240 --> 00:12:41.730
Android and iOS. And the
other is a game both

239
00:12:41.730 --> 00:12:45.030
in, in native script and
for the game, I did

240
00:12:45.030 --> 00:12:50.550
not use any specific native
code at all because the

241
00:12:50.550 --> 00:12:54.990
module took care of me,
but that kind of interface

242
00:12:54.990 --> 00:12:57.330
is more, you know, you're
picking images and you're doing

243
00:12:57.330 --> 00:12:59.820
a fun, it was actually
integrated to clarify API. So

244
00:13:00.060 --> 00:13:02.700
the beauty of that app
is not so much the

245
00:13:02.700 --> 00:13:05.610
nativeness of it, but the
gamification of it, the other

246
00:13:05.610 --> 00:13:07.740
app is the weather app.
And I didn't need to

247
00:13:07.740 --> 00:13:12.330
dig into the location modules
and write a little bit

248
00:13:12.330 --> 00:13:15.840
of native code because iOS
and Android get location vary

249
00:13:16.260 --> 00:13:18.930
quite differently. So you need
to be able to know

250
00:13:18.930 --> 00:13:20.220
where you are so that
you can get your local

251
00:13:20.220 --> 00:13:22.470
weather. So for that sort
of use case, I did

252
00:13:22.470 --> 00:13:24.000
need to get a little
bit more native than I

253
00:13:24.000 --> 00:13:26.220
actually was wanting to, but
Oh, well, it's a good

254
00:13:26.220 --> 00:13:29.790
exercise, you know? So forgive
my ignorance. But is that

255
00:13:29.850 --> 00:13:33.210
a runtime thing where it's
like, if I'm on iOS

256
00:13:33.210 --> 00:13:35.820
do this, or is it
more of a if Def

257
00:13:35.820 --> 00:13:38.550
where it's like, you know,
before compilation and then you

258
00:13:38.550 --> 00:13:41.520
make two different versions of
the app? Oh yeah. I,

259
00:13:41.530 --> 00:13:44.310
it was just a switch
because we have a module

260
00:13:44.340 --> 00:13:46.680
for the platform. So you
can determine which platform you're

261
00:13:46.680 --> 00:13:49.920
on. If you're on iOS,
then get my location in

262
00:13:49.920 --> 00:13:52.110
this way. And if I'm
on Android use the other

263
00:13:52.110 --> 00:13:54.510
way. So, But do you
know if it happens at

264
00:13:54.510 --> 00:13:56.640
runtime or if it happens
at build time, like when

265
00:13:56.640 --> 00:13:58.830
you build this, you have
to make a separate APK

266
00:13:58.830 --> 00:14:01.890
for Android and an iOS
package. Right. So I'm just

267
00:14:01.890 --> 00:14:06.120
curious if, if there's a,
if that's happening during compilation

268
00:14:06.120 --> 00:14:08.220
or if that's happening while
it runs, I believe it's

269
00:14:08.220 --> 00:14:12.030
during run time. Okay. I
probably would want to verify

270
00:14:12.030 --> 00:14:15.480
that, but So that's a
great, that's a great point

271
00:14:15.480 --> 00:14:17.700
though, that you can verify
that because this is open

272
00:14:17.700 --> 00:14:19.650
source, right. I could go
in and look at this

273
00:14:19.650 --> 00:14:24.450
stuff And just verify what
I'm saying here. Yeah. That's

274
00:14:24.450 --> 00:14:26.280
really important. I think that's
the fun part about this

275
00:14:26.280 --> 00:14:28.170
is that, you know, certainly
we don't want to say

276
00:14:28.170 --> 00:14:30.240
that the source code is
the docs cause there's lots

277
00:14:30.240 --> 00:14:32.490
of great docs and anytime
we do have a question

278
00:14:32.490 --> 00:14:34.380
like that, you can kind
of just go poke around.

279
00:14:34.950 --> 00:14:37.440
Absolutely. We're working very hard
on our docs and our

280
00:14:37.440 --> 00:14:40.950
getting started guides, my colleague,
TJ and I are, you

281
00:14:40.950 --> 00:14:43.770
know, really hitting the, getting
started experience so that people

282
00:14:43.770 --> 00:14:46.020
can just dig in and
then always have access to,

283
00:14:46.440 --> 00:14:48.420
you know, take a look
at, even the module code

284
00:14:48.420 --> 00:14:50.190
is open source. You can
see exactly what's going on

285
00:14:50.190 --> 00:14:52.580
behind the scenes. You create
your own modules and we're

286
00:14:52.760 --> 00:14:55.760
really encouraging people to create
plugins as well. So that's

287
00:14:55.760 --> 00:14:58.100
a fun experience for them.
The Slack community is terrific.

288
00:14:58.670 --> 00:15:00.700
The other dogs are great.
If you go to docs

289
00:15:00.730 --> 00:15:03.700
dot native script.org under getting
started, it says get started

290
00:15:03.700 --> 00:15:06.460
with JavaScript course. But then
it says, get started with

291
00:15:06.490 --> 00:15:09.400
TypeScript and angular. Now I
want to talk about angular

292
00:15:09.400 --> 00:15:10.990
a little bit because you,
you, like you said, you've

293
00:15:10.990 --> 00:15:13.030
hitched your wagon to it,
but it sounds like you

294
00:15:13.030 --> 00:15:15.620
can also just sit down
and work, use TypeScript and

295
00:15:16.030 --> 00:15:18.850
it works great. Yeah. TypeScript
is actually a first class

296
00:15:18.850 --> 00:15:21.940
citizen in, in a native
script. So the, the engineering

297
00:15:21.940 --> 00:15:24.550
team is all in Bulgaria
and they are big fans

298
00:15:24.550 --> 00:15:28.480
of TypeScript. So modules are
all in TypeScript and they

299
00:15:28.480 --> 00:15:31.300
just went on that from
day one. So, and if

300
00:15:31.300 --> 00:15:34.690
you're going to be writing
currently an angular two app,

301
00:15:34.690 --> 00:15:37.540
you need to be writing
your native script using TypeScript,

302
00:15:38.050 --> 00:15:39.820
I think in the near
or far future that might

303
00:15:39.820 --> 00:15:41.470
change. And you can go
ahead and write in JavaScript.

304
00:15:41.470 --> 00:15:45.070
But honestly, once you get
into the TypeScript world, it's

305
00:15:45.070 --> 00:15:48.760
okay. You know, we can
deal. We're big. We can

306
00:15:48.760 --> 00:15:51.640
manage it. It seems like
the, when the, when the

307
00:15:51.640 --> 00:15:53.920
Google folks in the angular
folks were like, okay, TypeScript

308
00:15:53.920 --> 00:15:56.440
is not bad. It's not
like a tainted or it's

309
00:15:56.440 --> 00:15:58.870
not some evil Microsoft thing.
That's going to ruin the

310
00:15:58.870 --> 00:16:01.000
world. They're like, Oh, okay,
this is cool. It give

311
00:16:01.000 --> 00:16:02.980
us, it gives us what
we want with ESX and

312
00:16:02.980 --> 00:16:06.130
beyond now, without any, any,
any stress you get all

313
00:16:06.130 --> 00:16:10.210
the IntelliSense and stuff. Oh
yeah. The visual studio code

314
00:16:10.210 --> 00:16:11.830
is what I use right
now. I switched out from

315
00:16:11.830 --> 00:16:15.550
sublime. I'm loving it. It's,
it's an amazing IDE and

316
00:16:15.820 --> 00:16:19.570
we have great native scripts
and integrations for visual studio

317
00:16:19.570 --> 00:16:21.940
code with all the IntelliSense
I was doing. I was

318
00:16:22.150 --> 00:16:24.730
at a meetup last night
and made a mistake. I,

319
00:16:24.730 --> 00:16:27.730
I did a fancy quote
instead of a plain quote

320
00:16:27.730 --> 00:16:30.970
and tell us, picked it
up just immediately, like immediately

321
00:16:30.970 --> 00:16:33.730
fix it. And then since
live sync was working on

322
00:16:33.760 --> 00:16:36.730
Jenny motion, everything just was
beautiful. I was like, it

323
00:16:36.730 --> 00:16:41.440
was, I haven't sent experience.
So, so visual studio code

324
00:16:41.860 --> 00:16:43.960
D can you do it
in visual studio, proper and

325
00:16:43.960 --> 00:16:45.880
the bigger visual studio, or
do you really prefer the

326
00:16:45.880 --> 00:16:48.580
visual studio code? I'm on
a Mac. So I do

327
00:16:48.580 --> 00:16:52.690
use visual studio code. And
it's funny because at NG

328
00:16:52.690 --> 00:16:56.740
comp, everybody was except, well,
TJ was using sublime and

329
00:16:56.740 --> 00:16:58.570
he was really in the
minority. It's kind of funny.

330
00:17:00.760 --> 00:17:02.800
Hey, this is Scott. I
wanted to tell you about

331
00:17:02.830 --> 00:17:07.000
LLB. Elgen pro the leading
entity modeling designer for your

332
00:17:07.000 --> 00:17:11.380
favorite.net. Oh, our mapping framework
version five was just released

333
00:17:11.380 --> 00:17:14.590
with some exciting new features
like derive models, support for

334
00:17:14.590 --> 00:17:20.290
DTL class models, document databases,
real time validation, one-click relational

335
00:17:20.290 --> 00:17:23.860
model synchronization, and much, much
more. You can read all

336
00:17:23.860 --> 00:17:27.970
about it. It LL B
L G E n.com. That's

337
00:17:27.970 --> 00:17:32.020
LLB elgin.com. It's a fantastic
product it's been around for

338
00:17:32.020 --> 00:17:34.270
years and you should check
it out. L L B

339
00:17:34.270 --> 00:17:39.880
L Jen. It's funny how
sublime is kind of slowed

340
00:17:39.880 --> 00:17:42.190
down since visual studio code
came along. I think people

341
00:17:42.190 --> 00:17:47.320
are enjoying the IntelliSense support.
Definitely those squiggly red lines.

342
00:17:47.320 --> 00:17:49.950
You just love them after
a while. It's a great,

343
00:17:49.980 --> 00:17:52.050
great thing to have. And
then all the plugins that

344
00:17:52.050 --> 00:17:55.440
people are creating, John Papa
has created these great angular,

345
00:17:55.440 --> 00:18:00.870
two snippet integrations. It's, it's
just really, really helpful for

346
00:18:00.870 --> 00:18:03.420
your workflow. The only thing
about visual studio code that

347
00:18:03.420 --> 00:18:05.790
I'm still not a hundred
percent ecstatic about is the

348
00:18:05.790 --> 00:18:08.190
lack of tabs. I'm so
used to that in sublime.

349
00:18:08.190 --> 00:18:10.650
And we have arguments that
go on and on, you

350
00:18:10.650 --> 00:18:14.250
know, man, we just need
tabs, man. This is so

351
00:18:14.250 --> 00:18:17.360
hard. Yeah. And that's the
kind of thing. Put the

352
00:18:17.360 --> 00:18:19.370
pressure on that team and
see if they'll, they'll do

353
00:18:19.370 --> 00:18:21.650
it because they've also got
their insiders built. You can

354
00:18:21.650 --> 00:18:24.380
have the daily builds visual
studio code. I started running

355
00:18:24.380 --> 00:18:26.090
those as well. So yeah.
Check, check those out. So

356
00:18:26.090 --> 00:18:27.860
I, and they run side
by side. So you can

357
00:18:27.860 --> 00:18:30.350
have your main stable visual
studio code and then your

358
00:18:30.350 --> 00:18:32.270
insider's build. So you get
a preview of what's coming

359
00:18:32.270 --> 00:18:34.460
in the month. Oh, that's
fantastic. Yeah. There is a

360
00:18:34.460 --> 00:18:36.980
ticket open and we're arguing
with the, with the code

361
00:18:36.980 --> 00:18:40.220
team, you know, tabs Tom's
please, please. They're like Nat

362
00:18:41.630 --> 00:18:44.420
Script extension for visual studio
code as well as you

363
00:18:44.420 --> 00:18:47.270
said, like things like snippets
and IntelliSense, but you get

364
00:18:47.270 --> 00:18:50.600
like real debugging, like we'll
be in vs. Code on

365
00:18:50.600 --> 00:18:54.470
a Mac and it'll say
launch on iOS emulator or

366
00:18:54.470 --> 00:18:56.930
attach on Android device, you
really can go and do

367
00:18:56.930 --> 00:19:00.470
full debugging and step through.
Yeah. Break points. It's a

368
00:19:00.590 --> 00:19:03.170
on a Mac. Yeah. And
there's so I just wanna

369
00:19:03.500 --> 00:19:06.470
spun up a site called
native script snacks.com, other short

370
00:19:06.470 --> 00:19:10.760
little video tutorials and code
snippets. And one of the

371
00:19:10.760 --> 00:19:13.190
first ones we have by
Burke Holland, my manager is

372
00:19:13.640 --> 00:19:16.550
how to leverage visual studio
code for debugging. And it's,

373
00:19:16.660 --> 00:19:20.540
it's great. It's a great
little intro intro guide on

374
00:19:20.540 --> 00:19:23.510
how to really leverage visual
studio code. And I think

375
00:19:23.510 --> 00:19:25.370
I'm going to start making,
I'm going to open up

376
00:19:25.370 --> 00:19:27.530
that windows machine and get
visual studio working and see

377
00:19:27.530 --> 00:19:28.820
how far we can get
with this sort of thing

378
00:19:28.820 --> 00:19:33.770
too. And this is so
like we mentioned, the beginning

379
00:19:33.770 --> 00:19:37.850
is supported by Tellerik, but
how does Tellerik make money?

380
00:19:37.850 --> 00:19:40.730
Like I know that when
people put together open source

381
00:19:40.730 --> 00:19:44.180
projects and they get a
sponsor, sometimes they, the sponsor

382
00:19:44.180 --> 00:19:48.320
sells support contracts or sells
additional widgets or, you know,

383
00:19:48.560 --> 00:19:51.230
how does that? Yeah. And
this is a question we

384
00:19:51.230 --> 00:19:54.350
get a lot because the
branding of native scripts seems

385
00:19:54.350 --> 00:19:58.250
almost isolated from Tellerik and
of course Tellerik is, was

386
00:19:58.250 --> 00:20:00.980
acquired by progress. So we're,
you know, progress plus tolerate

387
00:20:00.980 --> 00:20:03.680
plus native script. But the
native script team is, you

388
00:20:03.680 --> 00:20:08.530
know, deeply embedded within Tellerik
and Bulgaria. And the idea

389
00:20:08.540 --> 00:20:11.090
behind monetizing, it is a
little bit like what we

390
00:20:11.090 --> 00:20:15.470
did with Kendo. We have
the basic open source. You

391
00:20:15.470 --> 00:20:18.410
know, the whole project is
basically open source, but if

392
00:20:18.410 --> 00:20:21.560
you want any kind of
fancy UI, we have native

393
00:20:21.560 --> 00:20:23.570
script UI, which is a
separate product that you can

394
00:20:23.570 --> 00:20:29.120
use on top of native
script charting, let's see there's

395
00:20:30.410 --> 00:20:38.120
menus charts, charts of all
different flavors, calendar, and very

396
00:20:38.120 --> 00:20:41.810
fancy lists. So you may
or may not need that,

397
00:20:41.810 --> 00:20:43.490
but when you do, you
may not want to build

398
00:20:43.490 --> 00:20:44.990
it yourself. In which case
we can help you with

399
00:20:44.990 --> 00:20:49.630
that. And then the monetization
strategy is that native script

400
00:20:49.630 --> 00:20:53.920
is tightly integrated with tolerant
platform, which is all the

401
00:20:53.920 --> 00:20:56.140
tooling that you're going to
need around your mobile app

402
00:20:56.140 --> 00:21:05.410
delivery. So analytics, no SQL
database push notifications, all of

403
00:21:05.410 --> 00:21:07.810
those sort of helpful tooling,
even the little tools that

404
00:21:07.810 --> 00:21:09.790
help me make your idea,
size your icon, make your

405
00:21:09.790 --> 00:21:13.150
screen casts, share it, share
your code, all of these

406
00:21:13.210 --> 00:21:17.220
like helpful, helpful tooling around
delivering mobile apps. So it's

407
00:21:17.340 --> 00:21:20.340
like, I look at the,
the Cordova as an example,

408
00:21:20.340 --> 00:21:22.620
like it's a patchy Cordova,
it's its own thing. You

409
00:21:22.620 --> 00:21:24.630
don't need visual studio to
do any of those things,

410
00:21:24.930 --> 00:21:27.750
but visual studio has a
Cordova thing. So you could

411
00:21:27.840 --> 00:21:30.360
buy visual studio and then
use, you know, Cordova. So

412
00:21:30.360 --> 00:21:34.290
you can do native script
yourself in notepad and at

413
00:21:34.290 --> 00:21:38.010
the command line, right. Or
you can start getting involved

414
00:21:38.010 --> 00:21:40.230
in the community and using
different modules that people have

415
00:21:40.230 --> 00:21:43.020
created in one of those
that you could potentially purchase

416
00:21:43.020 --> 00:21:46.440
would be Tellerik UI on
top of that. Absolutely. Yes.

417
00:21:46.470 --> 00:21:49.320
And speaking of plugins, we
also have our plugin ecosystem

418
00:21:49.620 --> 00:21:53.820
for Cordova, plugins.telerik.com. So that's,
we do make our own

419
00:21:53.820 --> 00:21:57.540
plugins and we support those
ourselves, especially for the code

420
00:21:58.050 --> 00:22:00.000
Cordova system, but also for
native script. Right. So we

421
00:22:00.390 --> 00:22:04.650
go to plug, Oh yes.
We've got a terrific that's

422
00:22:04.650 --> 00:22:06.960
one of my favorite things
about our card Cordova support

423
00:22:06.960 --> 00:22:10.260
is the plugins. Yeah. So,
you know, if you need

424
00:22:10.260 --> 00:22:11.910
that location plug and you
just slam it in and

425
00:22:11.910 --> 00:22:14.460
your, and your golden Sierra
plugins.telerik.com is one of my

426
00:22:14.460 --> 00:22:17.940
favorite websites. It's just so
helpful. All right. That's cool.

427
00:22:18.300 --> 00:22:23.760
Yeah. Huh. So the, the,
the angular stuff though, when

428
00:22:23.760 --> 00:22:25.560
did you, when did native
script go from just being

429
00:22:25.560 --> 00:22:28.440
a, a, you know, kind
of a core concepts and

430
00:22:28.440 --> 00:22:30.840
the core runtime to saying,
you know, we think that

431
00:22:30.840 --> 00:22:33.000
the way to do it
is with the angular framework

432
00:22:33.000 --> 00:22:35.400
and their, their data binding
in their model, if you

433
00:22:35.400 --> 00:22:38.460
control our style of thinking.
Right. So I think as

434
00:22:38.460 --> 00:22:42.180
soon as angular two was
announced that, and it was

435
00:22:42.180 --> 00:22:44.520
made, known how they were
going to build angular two,

436
00:22:44.550 --> 00:22:47.250
which was decoupled from the
Dom. All of a sudden,

437
00:22:47.250 --> 00:22:49.170
a lot of people realized,
Oh my gosh, that opens

438
00:22:49.170 --> 00:22:52.620
up just a universe because
in native script, do you

439
00:22:52.620 --> 00:22:55.140
know, there is no Dom,
this is a native UI

440
00:22:55.140 --> 00:22:58.110
that we're building. So we
need some other strategy. So

441
00:22:58.110 --> 00:23:00.690
we just started having meetings
with these guys every week,

442
00:23:00.690 --> 00:23:04.410
actually the core team and
Bulgaria, a wonderful engineers in

443
00:23:04.410 --> 00:23:06.960
Bulgaria, having, having these meetings
every week with the Google

444
00:23:06.960 --> 00:23:10.260
team and just working with
them from day one, to

445
00:23:10.500 --> 00:23:13.380
get an integration going, it's
been a very, very close

446
00:23:13.380 --> 00:23:16.560
relationship, especially with their love
for TypeScript. Our love for

447
00:23:16.560 --> 00:23:18.810
TypeScript. It's sort of an,
I hate this word, but

448
00:23:18.810 --> 00:23:23.700
it's synergy. So it just
worked out beautifully. Does this

449
00:23:23.700 --> 00:23:26.340
mean that if I, if
someone's listening and they're an

450
00:23:26.340 --> 00:23:29.370
angular web developer and they
really like angular and they're

451
00:23:29.370 --> 00:23:33.540
using it at work and
they know JavaScript, they, they

452
00:23:33.540 --> 00:23:35.970
may be mobile developers and
not realize it that there's

453
00:23:35.970 --> 00:23:39.600
an opportunity there. Yes. I
mean, if they're looking, if

454
00:23:39.600 --> 00:23:42.210
they're angular one developers right
now, and they're looking to

455
00:23:42.210 --> 00:23:44.550
jump onto the angular two
bandwagon, or they're looking to

456
00:23:44.550 --> 00:23:47.480
use the migrate tools to
migrate up to angular to,

457
00:23:47.930 --> 00:23:51.110
once you migrate up to
angular two, really the universe

458
00:23:51.110 --> 00:23:54.590
is just going to open
there's angular, universal there's of

459
00:23:54.590 --> 00:23:57.350
course, native script. There's all
sorts of awesome stuff. Angular

460
00:23:57.350 --> 00:24:03.140
material really exciting world is
opening up, I think, and

461
00:24:03.500 --> 00:24:05.900
I'm not even an angular
fan person, but I was

462
00:24:05.900 --> 00:24:08.830
so impressed by what I
was seeing. I think that

463
00:24:08.830 --> 00:24:12.190
that idea that I want
to leverage existing skills and

464
00:24:12.190 --> 00:24:15.130
not just redo, like, not
this relearn, something like, I

465
00:24:15.130 --> 00:24:16.810
know everyone says you're supposed
to learn a new language

466
00:24:16.810 --> 00:24:18.370
every year and all that
kind of stuff, but it

467
00:24:18.370 --> 00:24:21.550
gets a little exhausting. And
if I'm already an angular

468
00:24:21.550 --> 00:24:23.560
person I'm already into TypeScript
and it's like, Oh, wait

469
00:24:23.560 --> 00:24:25.570
a second. There's a world
I can jump in. And

470
00:24:25.570 --> 00:24:28.270
I can be immediately productive
making a mobile app. That's

471
00:24:28.650 --> 00:24:31.960
very comforting. Especially when I
think about people who have

472
00:24:31.960 --> 00:24:34.660
like corporate jobs or enterprise
jobs. And it's like, you

473
00:24:34.660 --> 00:24:36.040
know, I really want to
make a mobile app on

474
00:24:36.040 --> 00:24:39.670
the side, but learning iOS
is exhausting. Oh yeah. Yeah.

475
00:24:39.760 --> 00:24:42.380
It's, it's, it's just so
daunting to think that you're

476
00:24:42.380 --> 00:24:43.840
going to have to, you
know, deal with X code,

477
00:24:44.290 --> 00:24:46.180
right. Something that Swift or
objective C, although actually I

478
00:24:46.180 --> 00:24:48.280
kind of liked Swift and
then do it all again

479
00:24:48.280 --> 00:24:50.860
in Java released twice. It's
just like, it just makes

480
00:24:50.860 --> 00:24:52.630
your hair turn gray. It's
just not a pretty picture

481
00:24:52.750 --> 00:24:56.230
for a small shop, especially.
But yeah, I think if

482
00:24:56.230 --> 00:24:58.330
you can get your web
team on board to jump

483
00:24:58.330 --> 00:25:00.670
onto angular two, and then
you can really start to

484
00:25:00.670 --> 00:25:05.410
leverage this code sharing strategy
about 75%, maybe a little

485
00:25:05.410 --> 00:25:07.540
bit less of the code,
you know, that you've already

486
00:25:07.540 --> 00:25:10.060
got, you can use on
the service tier and even

487
00:25:10.060 --> 00:25:13.450
on the router to spin
up your native app. If

488
00:25:13.450 --> 00:25:15.670
you layer on native script,
it's, it's a, it's a

489
00:25:15.670 --> 00:25:20.290
beautiful picture. Do I need
a Mac? This is probably,

490
00:25:20.290 --> 00:25:21.760
I know the answer to
this. I think, do I

491
00:25:21.760 --> 00:25:24.310
need a Mac to make
Mac apps? Or is there

492
00:25:24.310 --> 00:25:26.710
some cloud compiler? Like how
does, is there X code

493
00:25:26.710 --> 00:25:29.230
underneath it? Like how what's
the idea I say, build

494
00:25:29.590 --> 00:25:32.080
in visual studio code and
then a miracle happens in

495
00:25:32.080 --> 00:25:35.500
a Mac app iOS app
pops up. Yeah. So this

496
00:25:35.500 --> 00:25:38.230
is the one of the
money propositions of course, of

497
00:25:38.230 --> 00:25:40.720
Tellart platform because we do
do cloud builds. And then,

498
00:25:40.720 --> 00:25:43.840
you know, you get, you'll
have your, your, your build

499
00:25:43.840 --> 00:25:45.700
happening in the cloud, on
your PC. And then you're

500
00:25:45.700 --> 00:25:47.830
not gonna have to worry
about buying a Mac, but

501
00:25:47.830 --> 00:25:50.860
for the open source project
using the native script, CLI,

502
00:25:51.130 --> 00:25:53.350
you're going to need, sadly,
you're going to need a

503
00:25:53.350 --> 00:25:55.480
Mac for that because it
does rely on the X

504
00:25:55.480 --> 00:26:00.100
code and the X code
emulator. So I don't know

505
00:26:00.100 --> 00:26:03.550
how Mac and cloud works,
but have you ever taken

506
00:26:03.550 --> 00:26:06.400
a look at that? I
have not. I know that

507
00:26:06.430 --> 00:26:08.200
there are people who suggest
the best way to do

508
00:26:08.200 --> 00:26:10.000
this is to buy like
a Mac mini and stick

509
00:26:10.000 --> 00:26:12.070
it in the closet and
treat it and treat it

510
00:26:12.070 --> 00:26:14.470
as your own kind of
personal internal cloud. And I

511
00:26:14.470 --> 00:26:15.910
know that there are, there
are ways to do that.

512
00:26:15.910 --> 00:26:17.560
So it sounds like teller
platform is one way to

513
00:26:17.560 --> 00:26:20.620
think about that as well.
So you are utilizing the

514
00:26:20.620 --> 00:26:23.950
existing Android tools and you're,
you're, you're sitting on top

515
00:26:23.950 --> 00:26:28.060
of their, their tool chain.
So you build Android, you

516
00:26:28.060 --> 00:26:29.710
start, you do it all
in native script. You probably

517
00:26:29.710 --> 00:26:31.750
never even have to see
the Android tools. And then

518
00:26:31.930 --> 00:26:33.970
an Android app pops out.
You don't have to, you

519
00:26:33.970 --> 00:26:36.250
don't have to open the
X code, an iOS app

520
00:26:36.340 --> 00:26:39.820
pops out, Right? Yeah. You're
just basically leveraging the simulator.

521
00:26:39.880 --> 00:26:42.940
The emulators, I should say,
I always use Jenny motion.

522
00:26:43.230 --> 00:26:45.600
I never can actually manage
to get my Android emulator

523
00:26:45.600 --> 00:26:48.180
to behave. It's all on
my Mac. So Jenny motion

524
00:26:48.180 --> 00:26:51.060
has a terrific little tool.
Just open it up and

525
00:26:51.060 --> 00:26:53.040
then you can live sync
it. So every time you

526
00:26:53.040 --> 00:26:55.140
make a change in the
code, it just refreshes and

527
00:26:55.140 --> 00:26:56.910
rebuild. Right. And then you
can see what's going on

528
00:26:56.910 --> 00:27:00.140
is great. Yeah. I use
the visual studio, Android emulator

529
00:27:00.860 --> 00:27:03.440
on my, on a windows
machine cause it uses hyper

530
00:27:03.440 --> 00:27:07.310
V. So the next great
thing will be some way

531
00:27:07.310 --> 00:27:11.000
to have iOS running in
an emulator on, on windows.

532
00:27:11.000 --> 00:27:13.610
And then I'll be all
set. This is ever going

533
00:27:13.610 --> 00:27:16.190
to happen, you know, will,
will Apple ever, ever allow

534
00:27:16.190 --> 00:27:18.500
this? I don't know. You
know, the thing is that

535
00:27:18.500 --> 00:27:22.130
it's possible, right? Like anything's
possible, isn't it? I'm sure.

536
00:27:23.150 --> 00:27:26.120
You know, it's, it's, it's
possible, but they, it takes

537
00:27:26.150 --> 00:27:30.890
organizational willpower. Yeah. I mean,
we, I used to evangelize

538
00:27:30.890 --> 00:27:33.620
a little bit informally for
our own Corona SDK and

539
00:27:33.620 --> 00:27:35.330
it was a great thing
that everybody could just, you

540
00:27:35.330 --> 00:27:38.720
know, have the, have the
software installed and then you

541
00:27:38.720 --> 00:27:42.350
have the most beautiful emulator
is just like rolling out

542
00:27:42.350 --> 00:27:44.960
your app. And it was
a great thing to see.

543
00:27:44.960 --> 00:27:47.060
And there wasn't any issue
because we weren't using native

544
00:27:47.060 --> 00:27:49.550
emulators, but then of course
you hit the device and

545
00:27:49.550 --> 00:27:51.830
then you see some issues
because the ambulance didn't really

546
00:27:51.830 --> 00:27:54.590
show you what was going
on. So if you're building

547
00:27:54.590 --> 00:27:56.090
a native app, I guess
you do need those native

548
00:27:56.090 --> 00:27:59.350
emulators. So you're just going
to have to deal. Nope.

549
00:27:59.360 --> 00:28:01.280
That seems totally reasonable. But
I think the point is

550
00:28:01.280 --> 00:28:05.360
that in your regular work,
in your, you know, edit

551
00:28:05.360 --> 00:28:08.090
and continue, edit and refresh
kind of, you know, workflow,

552
00:28:08.090 --> 00:28:11.330
you're not thinking about it.
Like the friction level I'm

553
00:28:11.330 --> 00:28:14.330
hearing you say for something
like native script is low.

554
00:28:14.330 --> 00:28:17.240
I feel like I'm writing
TypeScript and JavaScript 90% of

555
00:28:17.240 --> 00:28:19.020
the time when I want
to call it native API,

556
00:28:19.020 --> 00:28:22.730
I can, but I don't
necessarily feel constrained by the

557
00:28:22.730 --> 00:28:26.480
frame. Exactly. Yeah. It's, I
would say it's a very

558
00:28:26.480 --> 00:28:28.490
flexible framework and you can,
you know, write as much

559
00:28:28.490 --> 00:28:30.830
or as little of the
native code as you want.

560
00:28:30.830 --> 00:28:33.710
You can branch, especially your
UI, as much as you

561
00:28:33.710 --> 00:28:37.030
want. You could inline styles
like on the ant on

562
00:28:37.040 --> 00:28:40.070
Android style, my text box
this way. And on iOS,

563
00:28:40.070 --> 00:28:41.870
that way you can do
that in line. You can

564
00:28:41.870 --> 00:28:43.520
do it by it by
separate style sheets, or you

565
00:28:43.520 --> 00:28:46.640
can even make your own
little XML layouts. Some people

566
00:28:46.640 --> 00:28:51.590
have their own XML layouts
for iPads versus iPhones versus

567
00:28:51.770 --> 00:28:55.070
a smaller tablets, bigger tablets.
They get pretty, it can

568
00:28:55.070 --> 00:28:57.560
get complicated or as simple
as you want. And I

569
00:28:57.560 --> 00:29:00.500
really appreciate that kind of
flexibility. It's really, it's really

570
00:29:00.500 --> 00:29:05.270
nice So that I just
realized that we're using angular,

571
00:29:05.270 --> 00:29:09.950
we're using JavaScript, but we're
not using HTML, our templates

572
00:29:10.430 --> 00:29:12.080
that we're going to bind
our data to. Aren't going

573
00:29:12.080 --> 00:29:15.440
to say, you know, div
and class and things like

574
00:29:15.440 --> 00:29:18.320
that. It's going to say
grid layout and list. Yeah.

575
00:29:19.430 --> 00:29:24.890
That's where the code sharing
story stops because the UI

576
00:29:24.920 --> 00:29:27.170
is going to be different.
You can make it look

577
00:29:27.170 --> 00:29:29.480
as similar as you want
on the web versus native.

578
00:29:29.510 --> 00:29:31.670
But at some point you're
going to have to deal

579
00:29:31.670 --> 00:29:36.080
with things like the way
Android handles tab navigations and

580
00:29:36.080 --> 00:29:38.390
back buttons and that sort
of thing versus the way

581
00:29:38.420 --> 00:29:41.120
iOS does it. So, and
we don't have a Dom

582
00:29:41.230 --> 00:29:42.970
we can manipulate like you
do on the web. So

583
00:29:42.970 --> 00:29:44.950
we have to use XML.
We can't, you know, have

584
00:29:44.950 --> 00:29:47.860
nice <inaudible> and devs and
Flexbox, I wish we could

585
00:29:47.860 --> 00:29:49.960
use Flexbox. That would be
just paradise, but we're not

586
00:29:49.960 --> 00:29:54.130
there. Although you can now
use key frame animation. This

587
00:29:54.130 --> 00:29:56.350
is one of the really
cool things we introduced in

588
00:29:56.380 --> 00:29:59.320
native script to, we had,
we do have our own

589
00:29:59.320 --> 00:30:02.920
animation module, but we just
introduced the ability to support

590
00:30:02.920 --> 00:30:05.110
key frame animations. And you
can even bring animate dot

591
00:30:05.110 --> 00:30:08.080
CSS, that little library of
really nice little animations for

592
00:30:08.080 --> 00:30:11.440
bouncing and things flying around.
And you can just bring

593
00:30:11.440 --> 00:30:13.180
that right on in and
use that within a native

594
00:30:13.180 --> 00:30:15.790
script app. And that's, that's
really exciting to have that

595
00:30:15.790 --> 00:30:19.330
sort of thing translated to
native on an animation level

596
00:30:19.330 --> 00:30:22.240
and have it perform to
a native level. It's really

597
00:30:22.240 --> 00:30:25.410
nice, Which kind of brings
us full circle because that

598
00:30:25.410 --> 00:30:28.020
means that I'm, I can
go into the app store

599
00:30:28.020 --> 00:30:30.420
right now in an iPhone
because I have an iPhone

600
00:30:30.870 --> 00:30:32.760
and I'm not going to
be able to tell what's

601
00:30:32.760 --> 00:30:35.490
a native script app or
what's not because it's all

602
00:30:35.490 --> 00:30:37.710
just a native iOS app
and it'll, it'll look and

603
00:30:37.710 --> 00:30:40.380
feel there's not going to
be any, you know, any

604
00:30:40.380 --> 00:30:42.990
tell in poker terms, Right.
It's going to give it

605
00:30:42.990 --> 00:30:46.260
away. No sunglasses, right? Yeah.
If you want to take

606
00:30:46.260 --> 00:30:50.130
a look at a native
script example, it's, there's, I

607
00:30:50.130 --> 00:30:52.650
think it's called example native
script. I think that's what

608
00:30:52.650 --> 00:30:55.050
it's called. It's like an
actual app. It's an actual

609
00:30:55.050 --> 00:30:56.640
app and you can download
that onto your phone and

610
00:30:56.640 --> 00:30:59.940
you can feel the performance
of it. And especially with

611
00:30:59.940 --> 00:31:02.340
those charts, that's actually an
example of native script UI.

612
00:31:02.700 --> 00:31:06.030
And it is the nice
snappy bar charts and pie

613
00:31:06.030 --> 00:31:08.730
charts that kind of swirl
around. And it's really fun

614
00:31:08.730 --> 00:31:11.010
to play with. That's it,
it demos very well. So

615
00:31:11.010 --> 00:31:13.860
I'm happy to have that
at hand. Oh, I just

616
00:31:13.860 --> 00:31:16.530
I'm searching right now. And
I see examples, native script.

617
00:31:17.050 --> 00:31:21.060
Yeah. It's full of layouts
and conference has got a

618
00:31:21.060 --> 00:31:24.480
conference agenda, user profile. It's
kind of an, an app

619
00:31:24.480 --> 00:31:26.790
of all trades. It's like,
it's an app. It's a

620
00:31:26.790 --> 00:31:29.460
kitchen sink app that lets
me check that out. Well,

621
00:31:29.460 --> 00:31:32.130
that's very cool. Well, thanks
so much for your time.

622
00:31:32.460 --> 00:31:34.110
Thank you for letting me
talk about native script. It's

623
00:31:34.110 --> 00:31:36.720
a fun thing to talk
about. Yeah. So you can

624
00:31:36.720 --> 00:31:40.290
check out native script and
native script.org and also on

625
00:31:40.320 --> 00:31:44.130
github.com/native script. And it's really
worth pointing out that a

626
00:31:44.140 --> 00:31:47.280
there's a lot of great
samples up there. Particularly there's

627
00:31:47.280 --> 00:31:49.980
a grocery list management app,
which is a real nice

628
00:31:49.980 --> 00:31:53.700
native script built iOS and
Android app. So explore those.

629
00:31:53.700 --> 00:31:55.740
And it looks like you've
got quite a lot of

630
00:31:55.740 --> 00:31:58.110
people working on it and
some open issues. So maybe

631
00:31:58.110 --> 00:32:00.690
an opportunity to also get
involved in open source. Absolutely

632
00:32:00.690 --> 00:32:03.090
a great opportunity, a great
community hop on Slack and

633
00:32:03.090 --> 00:32:06.540
join us. We'd love to
have you Very cool. This

634
00:32:06.540 --> 00:32:08.910
has been another episode of
Hanselminutes and we'll see you

635
00:32:08.910 --> 00:32:09.840
again next week.

