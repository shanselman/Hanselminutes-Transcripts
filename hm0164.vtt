WEBVTT FILE

1
00:00:12.030 --> 00:00:17.880
From Ansul minutes.com it's Hansel
minutes, a weekly discussion with

2
00:00:17.880 --> 00:00:23.250
web developer and technologists. Scott
Hanselman posted by Carl Franklin. This

3
00:00:23.250 --> 00:00:27.270
is Lawrence Ryan announcing show number
one 64. Recorded live Wednesday,

4
00:00:27.270 --> 00:00:32.670
June 11th, 2009. Support for Hanselman it's
as provided by tellering rad

5
00:00:32.670 --> 00:00:36.540
controls. The most comprehensive suite
of components for windows forms

6
00:00:36.540 --> 00:00:47.220
and asp.net web applications. online@wwwdotlerikdotcomandby.net
developers journal the world's leading.net

7
00:00:47.220 --> 00:00:52.860
developer magazine online at www
dot <inaudible> dot com. In

8
00:00:52.860 --> 00:00:58.520
this episode, Scott talks Silverlight
three with Tim Heuer. Hi,

9
00:00:58.520 --> 00:01:00.440
this is Scott Hanselman, and
this is another episode of

10
00:01:00.440 --> 00:01:04.070
Hansel minutes chatting with Tim
Heuer today. Tim, Tim and

11
00:01:04.070 --> 00:01:05.840
I are peers on the
same team and Tim is

12
00:01:05.840 --> 00:01:10.280
a community program manager for
Silverlight. And I figured there

13
00:01:10.280 --> 00:01:12.770
wasn't anyone who knew more
about server Lite three than

14
00:01:12.770 --> 00:01:14.900
Tim. So I thought it
was time to have him

15
00:01:14.900 --> 00:01:17.210
on the show. Thanks a
lot, Tim, for chatting with

16
00:01:17.210 --> 00:01:21.140
me today. Thanks for having
me Scott. So for me,

17
00:01:21.140 --> 00:01:23.450
cause I don't live and
breathe. So like, like, like

18
00:01:23.450 --> 00:01:25.940
you do, it's, you know,
it's getting a little confusing

19
00:01:26.150 --> 00:01:29.390
where our versioning is getting
real fast. I assume we're

20
00:01:29.400 --> 00:01:32.480
like four or five and
six are coming soon just

21
00:01:32.480 --> 00:01:36.260
because the numbers are changing
so quick. What's new and

22
00:01:36.260 --> 00:01:39.020
Silverlight three. Cause I'm just
now getting my brain around

23
00:01:39.020 --> 00:01:41.360
server light too. Yeah. I
think one of the things

24
00:01:41.360 --> 00:01:44.360
I like about Silverlight so
far is it's solid versioning,

25
00:01:44.360 --> 00:01:47.720
no dot versioning so far
so less confusing at least,

26
00:01:48.230 --> 00:01:52.520
but yeah, we're we have
a really quick iteration process

27
00:01:52.520 --> 00:01:54.020
to at least one of
the quicker ones that I've

28
00:01:54.020 --> 00:01:57.980
seen in, in Microsoft timeframe,
at least. And we're coming

29
00:01:57.980 --> 00:02:00.980
up on version three and
some of the significant changes

30
00:02:00.980 --> 00:02:05.150
in version three are we've
added a couple new transforms

31
00:02:05.150 --> 00:02:09.050
for things like perspective 3d
we've made a significant investment

32
00:02:09.050 --> 00:02:14.180
in both controls and a
framework for making developing line

33
00:02:14.180 --> 00:02:17.510
of business applications a little
bit easier and enhancing the

34
00:02:17.510 --> 00:02:21.680
control set in general with
built in validation and, and

35
00:02:21.680 --> 00:02:25.190
things like that. Kind of
providing the developer a lot

36
00:02:25.190 --> 00:02:27.380
more out of the box
rather than to have to

37
00:02:27.590 --> 00:02:30.110
do a lot of that
plumbing code for them. So

38
00:02:30.110 --> 00:02:32.720
those are the two areas
or two areas that I

39
00:02:32.720 --> 00:02:34.820
think are some of the
significant improvements. And of course

40
00:02:34.820 --> 00:02:41.360
there's also general improvements over
various new features or various

41
00:02:41.360 --> 00:02:45.260
existing features from Silverlight to
performance, some standard bug fixes,

42
00:02:45.260 --> 00:02:48.350
et cetera. And then the
one that feature that people

43
00:02:48.350 --> 00:02:50.750
keep talking about is the,
what we call the out

44
00:02:50.750 --> 00:02:54.920
of browser feature in Silverlight
three, which is a completely

45
00:02:54.920 --> 00:02:58.010
new feature didn't exist in
into. So this is an

46
00:02:58.010 --> 00:03:01.030
entirely new feature for three.
A lot of people didn't

47
00:03:01.030 --> 00:03:03.540
think that was going to
happen. So, you know, service

48
00:03:03.540 --> 00:03:05.830
has always been an in
an in browser thing and

49
00:03:05.830 --> 00:03:09.820
then Adobe air kind of
came out and I think

50
00:03:09.820 --> 00:03:12.190
most people think of Adobe
error in the context of

51
00:03:12.190 --> 00:03:15.010
Twitter clients, which is interesting.
It's almost as if I

52
00:03:15.010 --> 00:03:18.490
Toby air's a Twitter client
construction set, right? All the,

53
00:03:18.610 --> 00:03:22.030
all the big Twitter clients
or our air. I wonder

54
00:03:22.030 --> 00:03:24.490
if the, that that fact
is what pushed us to

55
00:03:24.490 --> 00:03:26.290
do it, or if we'd
planned it the whole time

56
00:03:26.880 --> 00:03:28.500
We've been planning it, you
know, it was a big

57
00:03:29.010 --> 00:03:33.600
customer request to kind of
create this desktop like experience

58
00:03:33.600 --> 00:03:39.030
in, in this cross platform
environment. And our implementation is

59
00:03:39.030 --> 00:03:41.640
different from air as it,
as it stands right now,

60
00:03:42.210 --> 00:03:46.980
we do still honor the
browser security sandbox. And so

61
00:03:47.160 --> 00:03:51.300
it's not a full trust
environment, but the, the big

62
00:03:51.330 --> 00:03:54.600
difference between the two from
an end customer standpoint is

63
00:03:54.600 --> 00:03:57.870
there's no additional stuff to
download. So with air, you

64
00:03:57.870 --> 00:03:59.670
have to have flash and
then you have to have

65
00:03:59.670 --> 00:04:02.130
the air run time as
well. And then the application.

66
00:04:02.640 --> 00:04:05.820
So with Silverlight it's, if
the user has Silverlight and

67
00:04:05.820 --> 00:04:08.010
your application wants to take
advantage of this out of

68
00:04:08.010 --> 00:04:11.100
the browser feature, it literally
is actually just one line

69
00:04:11.100 --> 00:04:14.040
of code to call that
function, to take it out

70
00:04:14.040 --> 00:04:17.010
of the browser. And, and
there's no additional download that

71
00:04:17.010 --> 00:04:20.190
your user has to have.
So it's, it's pretty cool

72
00:04:20.190 --> 00:04:22.710
in that regard. And it
was something that our customers

73
00:04:22.710 --> 00:04:25.500
have been requesting and we'll
it'll evolve over time as

74
00:04:25.500 --> 00:04:27.150
well. This is kind of
the first iteration of the

75
00:04:27.150 --> 00:04:30.330
feature. So we already are
getting feedback on, on some

76
00:04:30.330 --> 00:04:33.720
things that, that customers want
out of the feature as

77
00:04:33.720 --> 00:04:35.370
well, but it's pretty cool.
It's, it's neat to see

78
00:04:35.370 --> 00:04:39.930
what people are thinking about,
obviously that traveling salesmen scenario

79
00:04:40.950 --> 00:04:43.410
of, you know, pretty much
any of the travel traveling

80
00:04:43.410 --> 00:04:47.160
salesman, scenario, expense claims, customer
visits, orders, that type of

81
00:04:47.160 --> 00:04:52.260
thing fit very well with
this kind of a thin

82
00:04:52.440 --> 00:04:56.220
smart client RIA, whatever you
want to call it, that

83
00:04:56.220 --> 00:04:58.590
can be detached from the
browser, run offline, and then

84
00:04:58.590 --> 00:05:00.480
kind of go back to
the home office and synchronize

85
00:05:00.480 --> 00:05:04.680
later Is that, that they
use of the traveling salesman

86
00:05:04.680 --> 00:05:08.130
scenario. Like, like that's totally
obvious to me in that,

87
00:05:08.280 --> 00:05:11.010
of course, who else would
use server light then traveling

88
00:05:11.010 --> 00:05:14.220
salesman. But is that the,
is that the scenario that

89
00:05:14.220 --> 00:05:17.430
you guys use? Is this
a character or a, what

90
00:05:17.430 --> 00:05:19.740
do you call that when
you have a song in

91
00:05:19.740 --> 00:05:23.190
name, like less like, Oh,
it's Fred, the traveling salesman.

92
00:05:23.190 --> 00:05:24.870
He, everyone needs to refer
to Fred now, even though

93
00:05:24.870 --> 00:05:27.810
he's some priorities from architects.
Yeah, no, we, we don't

94
00:05:27.810 --> 00:05:31.410
have any specific persona. Basically
the three scenarios that that

95
00:05:31.410 --> 00:05:33.930
feature is trying to, that
we think more in scenarios

96
00:05:33.960 --> 00:05:37.740
lately than the actual people
personas, which I guess essentially

97
00:05:37.740 --> 00:05:40.860
mapped to each other, but
the three scenarios is kind

98
00:05:40.860 --> 00:05:45.120
of like the, the fully
disconnected app. So, you know,

99
00:05:45.330 --> 00:05:49.050
you, you detach an application
from, from the browser and

100
00:05:49.050 --> 00:05:51.630
it's, it's not network dependent.
You know, that you can

101
00:05:51.630 --> 00:05:55.020
think of this as a
standalone casual game or that

102
00:05:55.020 --> 00:05:57.770
type of thing. Something that
we don't care if connected

103
00:05:57.770 --> 00:06:00.980
or not the fully connected
app. So it still requires

104
00:06:00.980 --> 00:06:04.160
internet connection, but it's somewhat
of a more desktop like

105
00:06:04.160 --> 00:06:06.170
experience. So the one that
I like to think about

106
00:06:06.170 --> 00:06:09.350
is kind of that Pandora
radio concept, where you may

107
00:06:09.350 --> 00:06:11.600
not want to hold browser
open the entire time, but

108
00:06:11.960 --> 00:06:15.410
you have this little application
that's still essentially is a

109
00:06:15.410 --> 00:06:18.350
web based application, but it's
more of a desktop feel.

110
00:06:18.770 --> 00:06:21.530
And then the third would
be that occasionally connected scenario,

111
00:06:21.530 --> 00:06:25.400
where if I'm connected, great
use the resources, communicate, live

112
00:06:25.400 --> 00:06:27.800
data, et cetera. If I'm
not, you know, give me

113
00:06:27.800 --> 00:06:30.740
some type of offline storage
mechanism that I can communicate

114
00:06:30.740 --> 00:06:33.500
save later. And when I
do detect a connection, you

115
00:06:33.500 --> 00:06:36.650
know, I can build in
logic to do that resolution

116
00:06:36.650 --> 00:06:39.020
or synchronization, whatever that may
be. So those are the

117
00:06:39.020 --> 00:06:41.780
three key areas that, that
outer browser is aiming to

118
00:06:41.780 --> 00:06:46.600
solve for, for our customers
right now. So the support

119
00:06:46.600 --> 00:06:50.500
that it provides is the
frame in which the application

120
00:06:50.770 --> 00:06:53.950
lives, the detection of whether
you're edit will help you

121
00:06:53.950 --> 00:06:56.290
detect if you're online or
offline. Correct. I'm trying to

122
00:06:56.290 --> 00:07:00.130
put this around what my
offline experience, which is using

123
00:07:00.580 --> 00:07:04.870
Gmail with Google gears offline,
right. And I'm not just,

124
00:07:04.870 --> 00:07:07.510
I don't understand how they're
able to take these Ajax

125
00:07:07.510 --> 00:07:11.710
applications and when they're not
connected to the net, they

126
00:07:11.710 --> 00:07:14.410
can get to all their
resources. And I'm wondering if

127
00:07:15.130 --> 00:07:18.970
the, are they basically relying
on the browser cache for

128
00:07:18.970 --> 00:07:21.850
all of these things, these
JavaScript files and how that

129
00:07:21.850 --> 00:07:24.430
relates to what we're relying
on? Yeah, that's, that's a

130
00:07:24.430 --> 00:07:27.880
great question. I'm not exactly
sure how, I mean, I

131
00:07:27.880 --> 00:07:29.950
know what the mechanism of
gears is, but I'm not

132
00:07:29.950 --> 00:07:33.670
sure how someone like Google
Gmail has taken advantage of

133
00:07:33.670 --> 00:07:36.160
that. I'm assuming that they're
pushing all their CSS and

134
00:07:36.160 --> 00:07:40.390
logic, like you said, down
to gears as well, ours,

135
00:07:40.450 --> 00:07:43.480
one of the benefits of
Silverlight is that your application

136
00:07:43.510 --> 00:07:47.830
lives in a single entity
file. So we call that

137
00:07:47.830 --> 00:07:51.460
a zap. It's a dot
XAP extension. So when, when

138
00:07:51.460 --> 00:07:54.220
the developer creates this application,
you know, they're using visual

139
00:07:54.220 --> 00:07:57.820
studio, writing, managed code, et
cetera, their UI is in

140
00:07:57.820 --> 00:08:01.150
XAML when they hit compile
all that UI and all

141
00:08:01.150 --> 00:08:06.040
that logic gets compiled into
this zap file. So in

142
00:08:06.340 --> 00:08:11.020
our out of browser scenario,
when somebody takes that application

143
00:08:11.020 --> 00:08:14.200
to their desktop, offline, detached,
whatever the term you wanna

144
00:08:14.210 --> 00:08:18.340
use, basically we say, okay,
we know where we know

145
00:08:18.340 --> 00:08:21.010
what that zap is. So
let's store that in this,

146
00:08:21.010 --> 00:08:25.060
this location. And now we
just launch, we launched that

147
00:08:25.060 --> 00:08:27.370
zap when the user double
clicks that shortcut on their

148
00:08:27.370 --> 00:08:30.310
desktop. So all the, all
your logic is already self

149
00:08:30.310 --> 00:08:33.280
contained in that one file.
And we don't have to

150
00:08:33.280 --> 00:08:36.640
download anything additional. And so
we have, we have a,

151
00:08:36.700 --> 00:08:38.860
you know, a hosting model
that basically is kind of

152
00:08:38.860 --> 00:08:43.440
this launcher that basically says,
okay, you know, users detached

153
00:08:43.440 --> 00:08:46.180
this application, they have the
shortcut on their desktop double

154
00:08:46.180 --> 00:08:49.180
click it, we launch our
host and we say, here's,

155
00:08:49.180 --> 00:08:51.100
here's this app you need
to run. And that becomes

156
00:08:51.100 --> 00:08:54.910
the application. And you still
get to take advantage of

157
00:08:54.960 --> 00:08:58.380
the, of dotnet isolated storage
at that point for offline

158
00:08:58.950 --> 00:09:03.050
storage mechanism, things like that.
What if I had external,

159
00:09:03.110 --> 00:09:05.360
what if I'm writing baby
smash for Silverlight and I

160
00:09:05.360 --> 00:09:07.970
want to make it offline,
but I have resources that

161
00:09:07.970 --> 00:09:09.800
I would go off to
the wire to get like

162
00:09:10.100 --> 00:09:13.580
downloading wave files and movies
and things that aren't obvious

163
00:09:14.240 --> 00:09:17.180
offline resources. Yeah. So there,
so in that instance, you're

164
00:09:17.180 --> 00:09:19.460
dependent a little bit on
a connection. So you definitely

165
00:09:19.460 --> 00:09:21.000
would want to make sure
you take advantage of those

166
00:09:21.000 --> 00:09:23.600
API and say, Hey, can
I go do this? But

167
00:09:23.600 --> 00:09:25.460
if the assumption is made
there that you do have

168
00:09:25.460 --> 00:09:28.640
connection, you still have those
capabilities. So that the standard,

169
00:09:28.670 --> 00:09:32.600
you know, web client HTTP,
web request calls still exist

170
00:09:32.600 --> 00:09:34.550
in the outer browser scenario
for you to say, you

171
00:09:34.550 --> 00:09:38.180
know, go fetch me this
resource loaded into, in memory,

172
00:09:39.050 --> 00:09:41.870
do whatever. Or you can
still use isolated storage and

173
00:09:41.870 --> 00:09:43.160
say, you know, I need
to go get this wave

174
00:09:43.160 --> 00:09:46.310
file store of my own.
And then later, you know,

175
00:09:46.340 --> 00:09:49.280
use it later for my
side storage as well. Okay.

176
00:09:49.310 --> 00:09:51.410
So then yeah, just drop
it and download it when

177
00:09:51.410 --> 00:09:54.350
I am online. Right. Bring
it to isolated storage. And

178
00:09:54.350 --> 00:09:56.480
then just, if I'm offline,
get it here, get it

179
00:09:56.480 --> 00:09:59.960
locally. Right. Right. Am I
able to take advantage of

180
00:09:59.960 --> 00:10:03.380
the browser cache? Can I
tell the browser to download

181
00:10:03.380 --> 00:10:04.880
it and then just say,
if it's in the cash,

182
00:10:04.880 --> 00:10:06.410
use it, or do I
have to have my own

183
00:10:06.440 --> 00:10:08.810
kind of cash with an
isolated story? You're kind of

184
00:10:08.810 --> 00:10:12.050
managing your own cash within
isolated storage a little bit.

185
00:10:12.050 --> 00:10:14.480
And right now that's just
because of the nature of,

186
00:10:14.540 --> 00:10:18.710
of the way we're hosting
the outer browser zap. So

187
00:10:18.920 --> 00:10:21.680
we're still using kind of,
you know, the platform specific

188
00:10:22.610 --> 00:10:27.050
browser host models. So, but
it's in a different enough

189
00:10:27.050 --> 00:10:32.240
mechanism that you shouldn't rely
on the browser cache. Huh.

190
00:10:32.450 --> 00:10:35.990
Okay. Now this, sometimes Microsoft
has been criticized and also

191
00:10:35.990 --> 00:10:40.160
Java and, you know, a
browser other earlier browsers with

192
00:10:40.160 --> 00:10:42.830
this notion of what they
call drive by downloads, which

193
00:10:42.830 --> 00:10:47.030
is the, you arrive at
a page and something immediately

194
00:10:47.030 --> 00:10:49.400
happens. Whether a file gets
at, you know, in the

195
00:10:49.400 --> 00:10:52.660
old days, a download would
start immediately. And then, and

196
00:10:52.660 --> 00:10:55.640
this is a while back,
but then the little yellow

197
00:10:55.640 --> 00:11:00.040
bar would appear and say,
and say, you know, this,

198
00:11:00.040 --> 00:11:03.800
this page is trying to
download a file. And then,

199
00:11:03.930 --> 00:11:06.380
you know, some, some browsers
it's easier to get it

200
00:11:06.380 --> 00:11:09.470
to automatically start the download
than others. Cause drive by

201
00:11:09.470 --> 00:11:13.490
downloads are not necessarily a
good thing, but sometimes people

202
00:11:13.880 --> 00:11:19.160
say that Microsoft's click once
is a drive by download

203
00:11:19.640 --> 00:11:22.220
click. Once is when you
can load it WPF app,

204
00:11:22.250 --> 00:11:25.280
like an actual rich or
rich application, you do have

205
00:11:25.280 --> 00:11:27.170
to click on it and
install it and all those

206
00:11:27.170 --> 00:11:30.770
kinds of things. But if
I can suddenly start running

207
00:11:30.770 --> 00:11:33.800
applications out of the browser,
does that mean I could

208
00:11:33.800 --> 00:11:40.460
write a socialite virus In,
in theory? No. The everything

209
00:11:40.460 --> 00:11:42.860
in silver light, that's, it's
a great thing to point

210
00:11:42.860 --> 00:11:46.010
out. The differences between click
wants, especially in this type

211
00:11:46.010 --> 00:11:51.080
of concept, we still honor.
So there is no in

212
00:11:51.080 --> 00:11:53.200
Silverlight there's still no kind
of drive by install. It

213
00:11:53.200 --> 00:11:57.280
requires user intent to actually
take an application offline. So

214
00:11:57.280 --> 00:11:59.590
you can't just type in
a URL and boom, you

215
00:11:59.590 --> 00:12:02.380
have a Silverlight application offline.
You have to, we always

216
00:12:02.380 --> 00:12:05.140
start from an in-browser experience
and you know, your application

217
00:12:05.140 --> 00:12:06.760
would have a button or
some type of command that

218
00:12:06.760 --> 00:12:09.790
says, take me offline. So
the user is fully aware

219
00:12:09.790 --> 00:12:12.460
of what they're doing. The
second part is that once

220
00:12:12.460 --> 00:12:15.640
it is offline, we're operating
still in, in a secure

221
00:12:15.640 --> 00:12:18.280
sandbox. And the best way
to think about it is

222
00:12:18.280 --> 00:12:22.390
still the browser secure sandbox.
So there's, there's no, there's

223
00:12:22.390 --> 00:12:25.960
no way that you would
be able to access the

224
00:12:25.960 --> 00:12:29.320
local file system without the
user, again, providing intent through

225
00:12:29.320 --> 00:12:32.230
some type of file dialogue
or something like that. Now,

226
00:12:32.230 --> 00:12:35.830
if you have a, there's
no protection for media users,

227
00:12:35.830 --> 00:12:38.380
right? I mean, if I
create this, the wicked cool

228
00:12:38.470 --> 00:12:41.380
Silverlight application.com and someone thinks
it's so great. And I

229
00:12:41.380 --> 00:12:44.170
say, you know, load your
Microsoft money file and they

230
00:12:44.170 --> 00:12:46.180
click the button and load
their Microsoft money file. You

231
00:12:46.180 --> 00:12:48.120
know, there's nothing preventing. Yeah.
Yeah. I mean, if it

232
00:12:48.120 --> 00:12:51.000
says typing your social security
number and they type that

233
00:12:51.000 --> 00:12:53.820
we can't stop it, but,
but arguably, you know, this

234
00:12:53.820 --> 00:12:55.260
is kind of a tough
one. Maybe there should be,

235
00:12:55.560 --> 00:12:59.460
you know, we should protect
the idiot user. But, but

236
00:12:59.460 --> 00:13:02.250
my question is that when
I run this thing, when

237
00:13:02.250 --> 00:13:05.640
I go and pull out
my, my, my Twitter client,

238
00:13:06.060 --> 00:13:08.520
how much do I trust
this thing? And can it,

239
00:13:09.240 --> 00:13:13.200
can it go on read,
you know, C colon, whatever

240
00:13:13.200 --> 00:13:15.060
could it just go anywhere?
And what kind of permission,

241
00:13:15.060 --> 00:13:17.080
you know, is this thing
going a sandbox like, like,

242
00:13:17.820 --> 00:13:20.190
like Java or is it
like out there in the

243
00:13:20.190 --> 00:13:23.850
world doing whatever it wants?
Like, No, it isn't a

244
00:13:23.850 --> 00:13:26.790
low trust environment still, which
is kind of one of

245
00:13:26.790 --> 00:13:29.670
the, the benefits that, you
know, when you're, you're not

246
00:13:29.670 --> 00:13:32.040
actually installing anything, you're, you're
kind of putting it. We

247
00:13:32.040 --> 00:13:35.100
actually put the, the offline
applications are stored in the

248
00:13:35.100 --> 00:13:37.560
same location as isolated storage.
So it's in this low

249
00:13:37.560 --> 00:13:41.520
trust environment. It is in
the sandbox. And even, even

250
00:13:41.520 --> 00:13:44.340
in, through the open file
dialogue mechanism, which is how

251
00:13:44.340 --> 00:13:48.900
users would provide input for
file type data Silverlight is

252
00:13:48.900 --> 00:13:51.990
not aware of the location
of that information. The only

253
00:13:51.990 --> 00:13:54.510
thing that our runtime allows
is we say, okay, the

254
00:13:54.510 --> 00:13:58.290
user has provided this C
colon food dot text, but

255
00:13:58.290 --> 00:14:00.150
we're not telling you at
C colon food dot text,

256
00:14:00.150 --> 00:14:03.060
we're just giving the developer
a stream that they can

257
00:14:03.060 --> 00:14:06.690
read to. So the, the,
the runtime still is unaware

258
00:14:06.720 --> 00:14:09.750
of where that file came
from is just aware of

259
00:14:09.780 --> 00:14:13.290
the, the bytes of that
file. So in that regard,

260
00:14:13.290 --> 00:14:16.620
the, the operating system and
the file system specifically is

261
00:14:16.860 --> 00:14:20.880
protected, same thing happens for
writing data through mechanisms like

262
00:14:20.880 --> 00:14:24.840
save file dialogue. We just
give you a stream. We

263
00:14:24.840 --> 00:14:27.330
don't, we don't allow the
developer or the runtime. Doesn't

264
00:14:27.330 --> 00:14:29.340
see, Oh, I'm seeing, you're
trying to save it to

265
00:14:29.340 --> 00:14:33.150
see colon system 32 or
something like that. Right, right.

266
00:14:33.150 --> 00:14:36.390
I'm just trying to get
a sense around the threat

267
00:14:36.390 --> 00:14:40.800
modeling. Right. I don't want
to, to show up somewhere

268
00:14:40.800 --> 00:14:44.280
and have a, and because
I have several, I'd have

269
00:14:44.280 --> 00:14:48.120
something evil know hurt me.
I don't want applications to

270
00:14:48.120 --> 00:14:50.880
like, like, like, you know,
visit a site, load up

271
00:14:51.200 --> 00:14:54.680
lights, several light application leaps
out of the other dimension

272
00:14:54.680 --> 00:14:58.250
into the, into the offline
mode and then hides itself

273
00:14:58.250 --> 00:15:00.350
in the tray and squirrels
away. And now it's running

274
00:15:00.350 --> 00:15:03.720
in the background being evil,
Right? Yeah. We've, we've done

275
00:15:03.750 --> 00:15:06.520
a good amount of threat
assessment to prevent that specific

276
00:15:06.520 --> 00:15:08.680
scenario. And, and again, you
know, this is the first

277
00:15:08.680 --> 00:15:12.160
iteration of, of that particular
feature. So whether or not

278
00:15:12.160 --> 00:15:15.340
trust levels increase in the
future that that's up in

279
00:15:15.340 --> 00:15:17.740
the air, you know, but
right now we're in the

280
00:15:17.740 --> 00:15:22.560
lowest trust environment. It it's
a real secure surface. It

281
00:15:22.570 --> 00:15:26.830
isn't a sandbox and those
types of things shouldn't be

282
00:15:26.830 --> 00:15:30.310
possible. If we do think
in the future about increasing

283
00:15:30.310 --> 00:15:33.760
that trust, you know, we'll
typical kind of Microsoft will,

284
00:15:33.760 --> 00:15:37.870
we'll probably have some type
of dialogue or something that

285
00:15:37.870 --> 00:15:41.650
requires the user to authorize
that type of action. And

286
00:15:41.650 --> 00:15:44.590
in fact, even with isolated
storage and Silverlight now, if

287
00:15:44.590 --> 00:15:47.050
you go beyond the default
limit, you have to request

288
00:15:47.050 --> 00:15:48.850
permission from the user to
say, I need, I'm going

289
00:15:48.850 --> 00:15:50.620
to use more space of
your hard drive. Will you

290
00:15:50.620 --> 00:15:54.100
allow me to do that?
We don't just automatically allow

291
00:15:54.130 --> 00:15:59.260
arbitrary writing of gigs of,
of data types. So you

292
00:15:59.260 --> 00:16:01.300
left, you let the USU
pop a dialogue and say,

293
00:16:01.330 --> 00:16:04.330
you know, I'm willing to
give 10 megs. Yep. The

294
00:16:04.340 --> 00:16:07.240
there's there's the, the runtime
itself has an API to

295
00:16:07.240 --> 00:16:09.550
say, to be able to
look and say what, you

296
00:16:09.550 --> 00:16:12.250
know, what's the current quota
for this application, let's say,

297
00:16:12.280 --> 00:16:14.590
and by default, it's a
one Meg in the browser,

298
00:16:14.590 --> 00:16:17.230
25 mags out of the
browser. And if I know

299
00:16:17.230 --> 00:16:20.200
my application is going to
need 50 megs, I can

300
00:16:20.200 --> 00:16:22.600
say, well, I only have
one Meg available. I'm going

301
00:16:22.600 --> 00:16:25.900
to call this API to
say, request quota increase, which

302
00:16:25.900 --> 00:16:28.990
pops a dialogue to the
user saying, your application says,

303
00:16:28.990 --> 00:16:31.240
it needs this much space.
You currently have this much

304
00:16:31.240 --> 00:16:36.070
space allocated. Would you like
to authorize the increase? And

305
00:16:36.070 --> 00:16:37.870
if they say, no, it's
up to your logic to

306
00:16:37.870 --> 00:16:40.450
handle that. No, if they
say yes, then that increase

307
00:16:40.450 --> 00:16:45.760
automatically happens. Okay. The user's
in complete control of the

308
00:16:45.760 --> 00:16:48.670
isolated storage as well. I
mean, it's right. It's not

309
00:16:48.670 --> 00:16:51.870
PERMA store, you know, it's,
I can delete it at

310
00:16:51.880 --> 00:16:53.740
my will. So you're, I
assume you need to write

311
00:16:53.740 --> 00:16:56.440
your code such that that
storage could be deleted in

312
00:16:56.440 --> 00:17:01.360
between. Sure. It shouldn't be
considered a Low trust, isolated

313
00:17:01.360 --> 00:17:05.740
scratch space. Scratch. Exactly. So
I've written WPF apps and

314
00:17:05.740 --> 00:17:09.190
I like, I liked WPF
apps, but now that we've

315
00:17:09.190 --> 00:17:13.840
got silver light outside of
the browser, what does that

316
00:17:13.840 --> 00:17:17.260
say? What message does that
say to the WPF programmer?

317
00:17:18.100 --> 00:17:20.110
I mean, why would I
write anything in WPF now?

318
00:17:20.140 --> 00:17:21.730
Why wouldn't I write all
of my line of business

319
00:17:21.730 --> 00:17:25.100
apps and Silverlight, and now
they'll work cross browser, cross

320
00:17:25.330 --> 00:17:30.520
OSTP, rather, I think WPF
is represents the best of

321
00:17:30.520 --> 00:17:34.720
breed of our platform, right?
Silverlight is both a subset

322
00:17:34.750 --> 00:17:37.540
of WPF from the UI
standpoint. So a subset of

323
00:17:37.540 --> 00:17:40.900
XAML and the presentation framework,
as well as a subset

324
00:17:40.900 --> 00:17:44.260
of the base class libraries
and.net. So there really is

325
00:17:44.260 --> 00:17:46.690
simply things you cannot do
in server Lite, as it

326
00:17:46.690 --> 00:17:52.080
stands today, as an example,
access to anything device peripherals,

327
00:17:52.170 --> 00:17:54.360
or, you know, if you
have a scanner in your

328
00:17:54.360 --> 00:17:57.900
line of business application, you
know, silver light directly cannot

329
00:17:57.900 --> 00:18:02.130
access that. Whereas WPF in
a full trust environment, you

330
00:18:02.130 --> 00:18:06.390
could. So there are absolutely
scenarios where WPF makes sense.

331
00:18:06.390 --> 00:18:08.430
And what I always like
to tell people is when,

332
00:18:08.430 --> 00:18:11.280
when they go about developing,
you know, a rich client

333
00:18:11.880 --> 00:18:15.060
and they're considering Silverlight my
first question is what's, what's

334
00:18:15.060 --> 00:18:18.810
your target platform. And if
the target platform is windows,

335
00:18:18.840 --> 00:18:21.870
I say, Oh, you should
look at WPF. And if

336
00:18:21.870 --> 00:18:23.550
they say, well, you know,
we really kind of like

337
00:18:23.550 --> 00:18:25.650
that web deploy model. Okay,
great. You should look at

338
00:18:25.650 --> 00:18:29.730
WPF and click once. And
then if they, you know,

339
00:18:29.730 --> 00:18:31.410
if, if the question is,
you know, we, we have

340
00:18:31.410 --> 00:18:35.530
a customer facing application, we
need the broadest potential. We

341
00:18:35.550 --> 00:18:39.450
want the richest client on.net,
but we want the broadest

342
00:18:39.450 --> 00:18:42.120
reach. Then silver light should
be considered. But if your

343
00:18:42.120 --> 00:18:45.420
target is windows and especially
for, you know, kind of

344
00:18:45.960 --> 00:18:50.070
a behind the firewall rich
line of business applications that

345
00:18:50.070 --> 00:18:52.890
may need to do more
than what a browser security

346
00:18:52.890 --> 00:18:55.740
sandbox would allow, then WPF
should really be your first

347
00:18:55.740 --> 00:18:58.650
consideration and look at it
from that way. The second

348
00:18:58.650 --> 00:19:00.510
thing is you could also
look at it as a

349
00:19:00.510 --> 00:19:03.690
continuum of technology. So when
you look at a lot

350
00:19:03.690 --> 00:19:07.530
of thick clients that you
use, or at least some

351
00:19:07.530 --> 00:19:10.320
that, you know, that I've
seen is there's usually, you

352
00:19:10.320 --> 00:19:13.560
know, the, the biggest and
best application, right? Let's, let's

353
00:19:13.560 --> 00:19:16.200
even just use visual studio,
right? So visual studio is

354
00:19:16.210 --> 00:19:20.070
a behemoth of an application,
but it provides incredible features

355
00:19:20.070 --> 00:19:22.860
for a developer. But what
if we provided some type

356
00:19:22.860 --> 00:19:26.160
of, you know, lighter version,
maybe just an editor of

357
00:19:26.160 --> 00:19:28.290
some sort, you know, is
that a mechanism where we

358
00:19:28.290 --> 00:19:30.210
can say, well, we don't
need the compiler. We don't

359
00:19:30.210 --> 00:19:32.940
need DAPI skater. We don't
need, you know, the bill

360
00:19:32.950 --> 00:19:35.280
management and things like that.
We just want an editor.

361
00:19:35.550 --> 00:19:39.240
Could we create an online
version using, you know, a

362
00:19:39.240 --> 00:19:43.260
subset of, of those technologies.
And that gives us a

363
00:19:43.260 --> 00:19:45.180
little bit broader reach or
the office scenario, right. What

364
00:19:45.180 --> 00:19:47.760
office is doing with, with
office and office live is

365
00:19:47.760 --> 00:19:51.030
actually a good example of
that. So thinking of it,

366
00:19:51.030 --> 00:19:52.770
I don't think it's a
zero sum game is basically

367
00:19:52.770 --> 00:19:56.670
what I'm saying. I think
so Silverlight represents a continuum

368
00:19:57.420 --> 00:20:02.940
to WPF and to other
areas of, of the development

369
00:20:02.940 --> 00:20:05.310
platform as well, to even
to windows seven, et cetera.

370
00:20:06.420 --> 00:20:08.490
But it also, it doesn't
have to be a zero

371
00:20:08.490 --> 00:20:12.060
sum game. Each platform is,
is gonna have its sweet

372
00:20:12.060 --> 00:20:15.630
spot for sure. And, you
know, that's that's as of

373
00:20:15.630 --> 00:20:19.830
today, you know, in, in
five, 10 years, who knows

374
00:20:19.830 --> 00:20:22.080
what the powers that be,
that are making those decisions,

375
00:20:22.080 --> 00:20:24.810
you know, what the platform
will look like, but right

376
00:20:24.810 --> 00:20:27.240
now, you know, silver lights,
a subset, it's not the

377
00:20:27.240 --> 00:20:31.710
full dotnet framework and that
has its limitations, the cross

378
00:20:31.800 --> 00:20:35.910
platform and, and a browser
application has its benefits, but

379
00:20:35.910 --> 00:20:37.560
you also need to take
in consideration, what does my

380
00:20:37.560 --> 00:20:41.280
application need to do? You
know, how much, how much

381
00:20:41.280 --> 00:20:42.930
more code do I have
to write to get it

382
00:20:42.930 --> 00:20:46.590
there that WPF has already
providing me as an example,

383
00:20:47.350 --> 00:20:49.030
do you know how to
make the Possible out of

384
00:20:49.030 --> 00:20:52.390
the impossible? Well, the dotnet
ninjas at Telerik do they

385
00:20:52.390 --> 00:20:54.850
just released a huge pack
of web controls, all built

386
00:20:54.850 --> 00:20:58.000
on top of ESPN at
Ajax, that'll help you build

387
00:20:58.000 --> 00:21:00.880
impossibly fast and interactive applications
in no time at all.

388
00:21:01.780 --> 00:21:05.770
They've made the impossible possible
in desktop development. If you

389
00:21:05.770 --> 00:21:08.170
think you can have a
carousel component and wind forms

390
00:21:08.170 --> 00:21:11.500
while you can, they're windows
form suite features a super

391
00:21:11.500 --> 00:21:14.710
powerful grid view control on
32 other crazy desktop components.

392
00:21:14.710 --> 00:21:18.400
That'll give you a dazzling
WPF like features, but in

393
00:21:18.400 --> 00:21:21.340
wind farms, they do the
same thing in reporting solutions

394
00:21:21.340 --> 00:21:23.530
with a new design surface,
like nothing else looks just

395
00:21:23.530 --> 00:21:28.060
like graph paper, cause you
advanced page layout capabilities makes

396
00:21:28.060 --> 00:21:30.040
it feel more like a
graphic design software than a

397
00:21:30.040 --> 00:21:35.260
reporting solution. Go check them
out@telerikdotcomandbea.net Ninja. Thanks for listening.

398
00:21:36.310 --> 00:21:38.590
Couldn't you get into a
situation where you you'd, you'd

399
00:21:38.590 --> 00:21:41.140
say, you know, we want
a line of business application.

400
00:21:41.140 --> 00:21:43.150
We want this and this
and this and several lights

401
00:21:43.150 --> 00:21:46.090
looking great. And then somebody
says, Oh, and it's an

402
00:21:46.090 --> 00:21:49.150
absolute requirement that this thing
needs to access the scanner.

403
00:21:49.450 --> 00:21:53.080
You know, I need Twain.
I need WIA windows, image

404
00:21:53.080 --> 00:21:56.050
acquisition. And then at that
point you just go, Nope,

405
00:21:56.080 --> 00:21:58.660
sorry. Well, we know you
just, you just hit a

406
00:21:58.660 --> 00:22:04.090
spot that several light doesn't
do so. No. Yeah. Isn't

407
00:22:04.090 --> 00:22:07.330
there a way for Silverlight
to talk to a local

408
00:22:07.330 --> 00:22:10.450
service such that you could,
you know, you could make

409
00:22:10.450 --> 00:22:13.240
it, that you could be
talking through your requirements hit

410
00:22:13.240 --> 00:22:19.390
what appears to be an
obvious, you know, stopping point.

411
00:22:19.780 --> 00:22:21.520
Let's say, I want to
do an app that does

412
00:22:21.700 --> 00:22:23.680
all this great stuff server
light does. And it shows

413
00:22:23.680 --> 00:22:26.650
videos and it ones offline
and dah, dah, dah, but

414
00:22:26.650 --> 00:22:30.250
it also needs to have
things scanned in. Sure. Could

415
00:22:30.250 --> 00:22:32.380
I make a local service
so that when I'm running

416
00:22:32.380 --> 00:22:34.510
on windows server, I could
say, Oh, look, there's that

417
00:22:34.510 --> 00:22:37.110
service over there. He'll do
the scanning. Yeah. And, and

418
00:22:37.110 --> 00:22:39.510
that's, and actually that's what
some, some people are doing.

419
00:22:39.870 --> 00:22:42.150
I'd argue that once you
give it to them, I

420
00:22:42.150 --> 00:22:45.570
just made that up. You
just made that. No, I'm

421
00:22:45.570 --> 00:22:47.370
just like totally made that
scenario up. I like, I

422
00:22:47.370 --> 00:22:49.680
was kind of half kidding.
You're saying you can actually

423
00:22:49.710 --> 00:22:53.370
have your server light stuff.
Talk to another process that's

424
00:22:53.370 --> 00:22:55.770
like sitting around. Absolutely. I
mean, you could, you could

425
00:22:55.770 --> 00:22:59.460
have a window service that's
exposing basically, you know, a

426
00:22:59.460 --> 00:23:03.150
WCF endpoint to receive and,
and communicate with in, you

427
00:23:03.150 --> 00:23:06.120
know, like a message bus
of some sort, Oh, like

428
00:23:06.120 --> 00:23:08.430
a little web server, local
little local web server, and

429
00:23:08.430 --> 00:23:10.650
then server, like we just
talk to them, Right. I

430
00:23:10.650 --> 00:23:14.790
mean, Silverlight has a supports
network sockets, so you can

431
00:23:14.940 --> 00:23:17.760
absolutely do that type of
thing. But I I'd argue

432
00:23:17.760 --> 00:23:19.590
once you get into that
scenario, if someone was to

433
00:23:19.590 --> 00:23:21.510
say, well, yeah, we can,
you know, we can install

434
00:23:21.510 --> 00:23:23.790
windows service that talks to
the scanner and then we

435
00:23:23.790 --> 00:23:25.860
expose an API to allow
it to talk to that.

436
00:23:26.310 --> 00:23:28.260
And I would say, well,
you just added a second

437
00:23:28.260 --> 00:23:33.000
install to your application and
another dependency. Yeah. So, you

438
00:23:33.000 --> 00:23:35.070
know, then, then I would
back back into that conversation

439
00:23:35.070 --> 00:23:38.070
of does WPF make more
sense in this regard? And

440
00:23:38.070 --> 00:23:40.140
if they go, well, you
know, on windows, we could,

441
00:23:40.170 --> 00:23:42.540
we could use this service
and on other platforms, we

442
00:23:42.540 --> 00:23:44.190
still want to have the
app available, but they wouldn't

443
00:23:44.190 --> 00:23:47.420
have that. Okay. Then you're
getting into user experience discussion

444
00:23:47.420 --> 00:23:49.910
of what kind of, how
are you devaluing your own

445
00:23:49.910 --> 00:23:52.850
application on other platforms? You
know, if you start making

446
00:23:53.240 --> 00:23:58.450
platform specific decisions. So that,
that really gets down to

447
00:23:58.450 --> 00:24:00.700
the, you know, just because
you can do something doesn't

448
00:24:00.700 --> 00:24:05.380
mean you necessarily should. And
that's, you know, Silverlight has

449
00:24:05.530 --> 00:24:08.350
some pretty, pretty interesting capabilities
and there's always a way

450
00:24:08.350 --> 00:24:12.400
to lash something together with,
with angle brackets and, and

451
00:24:12.610 --> 00:24:15.790
paperclips. But it sounds to
me like a solution, like

452
00:24:15.790 --> 00:24:17.890
that really is more of
a, of a WPF solution,

453
00:24:17.890 --> 00:24:19.870
because then you get the
full framework, you get the

454
00:24:19.870 --> 00:24:23.230
full and not just the
full framework from a net

455
00:24:23.230 --> 00:24:26.320
perspective, but everything underneath it,
like, like I just mentioned

456
00:24:26.320 --> 00:24:29.770
WIA, which is a calm
interface and, you know, Twain,

457
00:24:29.770 --> 00:24:32.860
which is native and on.
Right, exactly. Yeah. Just because

458
00:24:32.860 --> 00:24:35.020
you know that all the
hooks are there, but exactly

459
00:24:35.020 --> 00:24:37.690
what you said, just because
you can do something doesn't

460
00:24:37.690 --> 00:24:40.600
necessarily mean it's the right
thing to do. Huh. Now,

461
00:24:40.600 --> 00:24:42.430
are we going to get
up to flashes on what

462
00:24:42.430 --> 00:24:46.060
version? 10 version 10 are
we going to, how quickly

463
00:24:46.060 --> 00:24:49.750
can we get to version
10? We're a, let's see.

464
00:24:50.590 --> 00:24:53.770
October will be version four.
November will be version five.

465
00:24:53.920 --> 00:24:56.950
No, I'm just kidding. No,
I think you know that

466
00:24:56.990 --> 00:24:59.710
the team has been looking
at it. And if you

467
00:24:59.710 --> 00:25:02.350
look at the history, it's
really been 12 month iteration

468
00:25:02.350 --> 00:25:07.090
so far. And in Microsoft
timeframe, that's pretty fast. I'd

469
00:25:07.090 --> 00:25:10.510
like, you know, as a
developer, everyone would like it

470
00:25:10.510 --> 00:25:13.120
to be faster. I suppose,
I guess it's always 50

471
00:25:13.120 --> 00:25:15.820
50, you know, push things
out too fast. People get

472
00:25:16.690 --> 00:25:18.430
upset that too much thing
has come in and too

473
00:25:18.430 --> 00:25:21.370
slow. It's not fast enough,
but yeah, this year long

474
00:25:21.370 --> 00:25:25.840
cycle has, has, seemed to
be pretty effective. So right

475
00:25:25.840 --> 00:25:28.780
now, I mean, we're already
starting planning on Silverlight for,

476
00:25:29.890 --> 00:25:32.380
we're looking at, you know,
the, the forums and what

477
00:25:32.380 --> 00:25:34.960
people are requesting. We have
our kind of top 10

478
00:25:34.960 --> 00:25:38.740
punch list for, for things
for sort of like for

479
00:25:38.740 --> 00:25:41.230
that we want to look
at and get feedback on.

480
00:25:41.770 --> 00:25:44.410
And I don't, I don't
think it's unreasonable to assume

481
00:25:44.410 --> 00:25:46.900
that we're going to follow
that same type of iteration

482
00:25:46.900 --> 00:25:51.010
pattern. You know, we've made
no timeline roadmaps so far

483
00:25:51.010 --> 00:25:54.220
for, for Silverlight for as
an example. But you know,

484
00:25:54.220 --> 00:25:58.930
if, if, if history repeats
itself, you know, like I

485
00:25:58.930 --> 00:26:00.430
said, I don't, I don't
think it'd be uncommon for

486
00:26:00.430 --> 00:26:03.370
us to see a version
four and another quick iteration

487
00:26:03.370 --> 00:26:06.910
like that. And, and the
team is agile enough that,

488
00:26:07.900 --> 00:26:10.270
you know, we're allowing that
and we've actually segmented some

489
00:26:10.270 --> 00:26:12.550
things to even make those
iterations quicker. So things like

490
00:26:12.550 --> 00:26:15.520
the Silverlight toolkit, which has,
you know, a lot of

491
00:26:15.520 --> 00:26:19.480
the STK controls, you know,
they're, they're an open source

492
00:26:19.480 --> 00:26:22.090
project they're out on code
Plex. So they'll, you know,

493
00:26:22.090 --> 00:26:24.070
they'll have an update for
Silverlight three one, so really

494
00:26:24.080 --> 00:26:26.980
three releases. But you know,
if somebody has this cool

495
00:26:26.980 --> 00:26:30.820
whizzbang new save the world
control and they can crank

496
00:26:30.820 --> 00:26:34.390
it out in two months,
there's nothing preventing them from,

497
00:26:34.930 --> 00:26:37.720
from releasing, you know, that
control in two months, they

498
00:26:37.720 --> 00:26:42.430
don't have to wait for
Silverlight for, so really the

499
00:26:42.430 --> 00:26:44.700
team has done a good
kind of segmenting core and

500
00:26:44.700 --> 00:26:47.490
controls and other things in
the ecosystem is, is pretty

501
00:26:47.490 --> 00:26:52.800
good to allow even pretty
decent innovation in between these

502
00:26:52.800 --> 00:26:58.160
major milestones to occur. I
personally have been, I, this

503
00:26:58.160 --> 00:27:01.580
is kind of where you
and I, coincidentally, both kind

504
00:27:01.580 --> 00:27:05.780
of worked for Microsoft. So
sometimes, but sometimes, you know,

505
00:27:05.780 --> 00:27:07.730
we, we get in trouble
for saying stuff that we

506
00:27:07.730 --> 00:27:10.880
think is pretty true. But
even though it's not necessarily

507
00:27:10.880 --> 00:27:14.030
the Microsoft party line, but
I, one of the things

508
00:27:14.030 --> 00:27:16.520
that's kept me from getting
deeply involved in civil life

509
00:27:16.550 --> 00:27:19.490
is that it seems like
the, to get the development

510
00:27:19.490 --> 00:27:23.270
environment set up involves like
eight installs after just getting

511
00:27:23.270 --> 00:27:26.900
visual studio itself. You know?
So it's like visual studio.

512
00:27:26.900 --> 00:27:29.360
And then at the time
that I'm thinking of it's

513
00:27:29.360 --> 00:27:31.550
like, so you need a
visual studio and you get

514
00:27:31.550 --> 00:27:33.050
service pack, whatever. And then
you have to get the

515
00:27:33.050 --> 00:27:34.520
server like tools. You have
to get the server that

516
00:27:34.520 --> 00:27:38.480
SDK it's a real itself.
That is this going to

517
00:27:38.480 --> 00:27:42.260
get any, any better because
that's the, the fear of

518
00:27:42.260 --> 00:27:45.080
having all this extra stuff
stacked on top of my

519
00:27:45.080 --> 00:27:48.680
existing visual studio installed is
keeping me from really jumping

520
00:27:48.680 --> 00:27:50.900
in. And then by the
time I eventually get comfortable

521
00:27:50.900 --> 00:27:53.510
enough to do that. There's
a new version coming, which

522
00:27:53.510 --> 00:27:57.550
involves another new stack of
beta stuff. Right? Yeah. I'm

523
00:27:57.590 --> 00:27:59.390
totally with you there. I
mean, I think one of

524
00:27:59.390 --> 00:28:03.500
the biggest Achilles heel for
Microsoft, especially in the developer

525
00:28:03.500 --> 00:28:06.290
division is this, you know,
this concept, which we call

526
00:28:06.290 --> 00:28:08.870
what's your ship vehicle, right?
What's the shift vehicle for

527
00:28:09.200 --> 00:28:13.850
product X and anything developer
related, you know, you want,

528
00:28:14.270 --> 00:28:17.300
you want visual studio to
be able to be, to

529
00:28:17.300 --> 00:28:19.940
be able to be the
editor for that. The problem

530
00:28:19.940 --> 00:28:23.360
is, you know, visual studio
doesn't have fast iterations. You

531
00:28:23.360 --> 00:28:27.680
know, they have long iterations
with specific service pack requirements

532
00:28:27.680 --> 00:28:30.350
and things. And so when
you get something like Silverlight

533
00:28:30.350 --> 00:28:31.790
and you go, Oh, we
need to provide tools for

534
00:28:31.790 --> 00:28:37.430
visual studio, you know, doing,
wait for, for <inaudible> to

535
00:28:37.430 --> 00:28:40.940
provide that, or do we
release, you know, the, the

536
00:28:40.940 --> 00:28:43.010
tools out of band, you
know, Microsoft calls out of

537
00:28:43.010 --> 00:28:46.400
band. And so when you
see, you know, it happens

538
00:28:46.400 --> 00:28:48.530
today, right? We have visual
studio 2008, but we have

539
00:28:48.590 --> 00:28:51.500
how many different out-of-band releases.
Right. We've got dynamic data.

540
00:28:51.500 --> 00:28:55.430
We've got ESPN VC, we've
got, we've got Silverlight so

541
00:28:55.890 --> 00:29:01.010
Required tooling though. They, they
don't all require you're right.

542
00:29:01.760 --> 00:29:04.340
But neither does silver. I
mean, neither does.net for that

543
00:29:04.340 --> 00:29:06.680
matter. Right. I mean, you
could use no patent compiler

544
00:29:06.680 --> 00:29:10.670
is all you need. Yeah,
sure. But, Well, I just,

545
00:29:10.670 --> 00:29:11.930
I'm trying to think. I'm
trying not to, I'm trying

546
00:29:11.930 --> 00:29:14.810
to avoid messing up my
install. Like sometimes one of

547
00:29:14.810 --> 00:29:17.470
the things that I think
is a common scenario for

548
00:29:17.570 --> 00:29:20.660
programmers who are on Microsoft
is that, you know, programmer

549
00:29:20.780 --> 00:29:24.920
Fred is working on a
project, then a new, you

550
00:29:24.920 --> 00:29:28.010
know, that that's using some
technology that's well understood like

551
00:29:28.010 --> 00:29:31.700
asp.net, then a new technology
comes out and programmer, Fred

552
00:29:31.700 --> 00:29:34.640
wants to mess with that
new technology. But he's afraid

553
00:29:34.640 --> 00:29:37.790
that if he installs something
on his machine, it will

554
00:29:37.790 --> 00:29:42.160
mess up the project he's
working on. That makes sense.

555
00:29:42.190 --> 00:29:46.200
Sure, sure. So, so Silverlight
for me is always that

556
00:29:46.200 --> 00:29:48.120
thing where it's like, you
know, I would install it,

557
00:29:48.120 --> 00:29:49.470
but I don't know if
that's going to mess up

558
00:29:49.470 --> 00:29:52.680
my install because I'm working
on something now and I

559
00:29:52.680 --> 00:29:55.350
can't afford to get this
thing to, to, you know,

560
00:29:55.350 --> 00:29:57.570
to mess it up. You
do bring up one good

561
00:29:57.570 --> 00:29:59.550
point. I mean, so we've
done, we've done a couple

562
00:29:59.550 --> 00:30:01.650
of things to mitigate that
a little bit. The first

563
00:30:01.650 --> 00:30:03.780
thing that we've done for
Silverlight is there are a

564
00:30:03.780 --> 00:30:05.730
couple of pieces, right? I
mean, there's the SDK, there's

565
00:30:05.730 --> 00:30:07.980
the runtime and there's the
tools. So one of the

566
00:30:07.980 --> 00:30:10.830
things that we've done to
kind of obviscate the confusion

567
00:30:10.830 --> 00:30:14.340
a little bit is we,
we created one, one installer.

568
00:30:14.370 --> 00:30:17.280
So if you're, if you're
an actual developer, you have

569
00:30:17.280 --> 00:30:21.180
one install and it does
the visual studio update. It

570
00:30:21.180 --> 00:30:24.690
does the developer runtime, it
deploys the STK and it

571
00:30:24.690 --> 00:30:27.060
creates the project templates in
visual studio. So you're not,

572
00:30:27.090 --> 00:30:30.930
you really only have to
download one thing. The second

573
00:30:30.930 --> 00:30:32.550
thing though, that you pointed
out, which is, which is

574
00:30:32.550 --> 00:30:36.780
key to understand is right
now, like say Silverlight two

575
00:30:36.780 --> 00:30:38.940
is released and let's say,
I'm doing Silverlight to development

576
00:30:38.940 --> 00:30:40.560
and you have exactly what
you just said in your

577
00:30:40.560 --> 00:30:42.000
mindset. Well, I kind of
want to get into sort

578
00:30:42.000 --> 00:30:43.200
of like three, but I
want to mess up what

579
00:30:43.200 --> 00:30:48.120
I have. Right. Right now
that that is somewhat true.

580
00:30:48.120 --> 00:30:53.340
Like once you install whatever
Silverlight development environment version you

581
00:30:53.340 --> 00:30:57.180
have, that's what it is.
There's no multi targeting with,

582
00:30:57.350 --> 00:31:00.750
with vs 2008. So the
second you installed the server

583
00:31:00.900 --> 00:31:04.650
three tools, your machine just
became a Silverlight three developer

584
00:31:04.650 --> 00:31:09.900
machine. Exactly. Yeah, exactly. Now
that changes in, in visual

585
00:31:09.900 --> 00:31:15.370
studio, 2010 with multi targeting
support and you know, for,

586
00:31:15.370 --> 00:31:19.950
for the.net framework. But we
also have Silverlight multi targeting

587
00:31:19.950 --> 00:31:23.160
support and depth 10. It's
just something that's not going

588
00:31:23.160 --> 00:31:25.470
to happen for 2008. And
again, it gets back to

589
00:31:25.470 --> 00:31:27.870
those, those ships cycles of,
of those teams, you know,

590
00:31:27.870 --> 00:31:30.960
what kind of investments and
priorities are they making? It's

591
00:31:30.960 --> 00:31:33.420
not, not necessarily there's things
that are technically holding it

592
00:31:33.420 --> 00:31:37.110
back. It's more so timing
and resources. And where do

593
00:31:37.110 --> 00:31:42.120
you want to put your
efforts? Yeah. Okay. I just,

594
00:31:42.130 --> 00:31:45.300
things move so fast. Even
I get overwhelmed with, with

595
00:31:45.360 --> 00:31:48.120
this stuff. Yeah. I'm starting
to use a lot more

596
00:31:48.120 --> 00:31:50.940
VMs to do these kinds
of things, you know? And

597
00:31:50.950 --> 00:31:52.920
I'm just trying to think
that if, if you want

598
00:31:52.920 --> 00:31:55.350
somebody to see your product
and mess with it, even

599
00:31:55.350 --> 00:31:57.630
when it's in beta, you
know, you can't keep paving

600
00:31:57.630 --> 00:32:02.010
your machine when, when things
happen now, several like three

601
00:32:02.010 --> 00:32:05.790
of those sounds more like
certain improvements, but it's still,

602
00:32:06.150 --> 00:32:09.420
it's still fundamentally Silverlight is
it's not. So what I'm

603
00:32:09.420 --> 00:32:11.160
trying to say is it's
not several like two plus

604
00:32:11.160 --> 00:32:13.290
some stuff, is it, I
mean, are they changing the

605
00:32:13.290 --> 00:32:15.300
runtime? I mean, or is
it just a bunch of

606
00:32:15.300 --> 00:32:19.920
extra? No, it's, it's not,
I mean, it is, you

607
00:32:19.920 --> 00:32:21.960
know, there, there are updates
to the core, but it,

608
00:32:21.990 --> 00:32:25.170
it's not like it's a,
you shouldn't think of it

609
00:32:25.170 --> 00:32:29.670
as like a.net, three.net four
type thing from the, from

610
00:32:29.670 --> 00:32:32.520
the court run time. I
hate to say two plus,

611
00:32:32.520 --> 00:32:34.740
but that is, you know,
when you, when you think

612
00:32:34.740 --> 00:32:38.850
about how dotnet two came
out or done at three

613
00:32:38.850 --> 00:32:40.640
and three, five is probably
a better way to think

614
00:32:40.640 --> 00:32:44.800
about it. Well, I mean,
th the.net desktop versioning is

615
00:32:44.950 --> 00:32:48.550
just great. It's bonkers. Yeah.
So I bought it. I

616
00:32:48.550 --> 00:32:50.860
like how we've simplified it.
And Silverlight of, of just

617
00:32:50.860 --> 00:32:54.220
saying, you know, version two,
version three, but version three

618
00:32:54.220 --> 00:32:58.900
is our goal is always
backward compatibility. So the end

619
00:32:58.900 --> 00:33:00.850
user will still will have
to have, if you're running

620
00:33:00.850 --> 00:33:02.470
a version three application, they're
going to need the new

621
00:33:02.470 --> 00:33:04.810
plugin because, you know, you're
targeting things that just aren't

622
00:33:04.810 --> 00:33:08.140
there and so relate to.
Okay. But if you have,

623
00:33:09.220 --> 00:33:13.630
if you have the Silverlight
three runtime installed and you

624
00:33:13.630 --> 00:33:16.990
visit it's Silverlight to application,
it will still work. It's

625
00:33:16.990 --> 00:33:19.570
not like it's breaking anything.
It's not like you need

626
00:33:19.570 --> 00:33:23.140
to have both plugins installed
or anything like that. So

627
00:33:23.140 --> 00:33:25.240
just, just like flash for
the most part, if you

628
00:33:25.240 --> 00:33:27.250
have the new step and
you visited a site that

629
00:33:27.250 --> 00:33:29.560
uses the old stuff, you
won't notice a difference at

630
00:33:29.560 --> 00:33:33.040
all. Correct. Okay. Huh. All
right. What have I forgotten

631
00:33:33.040 --> 00:33:34.810
to ask you? I had
a list of, I had

632
00:33:34.810 --> 00:33:36.100
a list of things and
you've done a pretty good

633
00:33:36.100 --> 00:33:39.100
job of addressing them, them
all. What do you think

634
00:33:39.100 --> 00:33:42.730
is going to keep Fred
the developer from, from trying

635
00:33:42.730 --> 00:33:48.490
Silverlight out? What's in his
way? I think for me,

636
00:33:48.490 --> 00:33:51.580
you know, I there's, I
look at developers really in

637
00:33:51.580 --> 00:33:54.220
two larger buckets, you're a
client developer, or you're a

638
00:33:54.220 --> 00:33:56.800
web developer, and I know
that's way over simplifying it,

639
00:33:56.800 --> 00:33:59.440
but let's just simp over,
simplify it for a second.

640
00:34:00.220 --> 00:34:02.770
I think for me, some
of the coming from the

641
00:34:02.770 --> 00:34:06.430
web developer side, doing more
web than, than client when

642
00:34:06.730 --> 00:34:10.120
there's, there was probably two
larger hurdling blocks that that

643
00:34:10.120 --> 00:34:14.140
will not prevent people from
getting started, but probably, you

644
00:34:14.140 --> 00:34:16.450
know, have their head scratching
a little bit. And that's

645
00:34:16.450 --> 00:34:18.280
one that, you know, you
are in a client environment,

646
00:34:18.310 --> 00:34:20.860
even though it's kind of
a web model, you, when

647
00:34:20.860 --> 00:34:23.170
you're doing Silverlight, you're doing
client development and that brings

648
00:34:23.170 --> 00:34:27.400
different paradigms than asp.net server
side development. Right? The, one

649
00:34:27.400 --> 00:34:31.180
of the biggest ones is
asynchronous communication with services. So

650
00:34:31.180 --> 00:34:32.770
if you're a web developer
and you're just used to

651
00:34:32.770 --> 00:34:35.320
adding, you know, add web
reference and one line of

652
00:34:35.320 --> 00:34:37.030
code, I call the web
service, the second line of

653
00:34:37.030 --> 00:34:39.070
code, I used the return
of that web service, et

654
00:34:39.070 --> 00:34:41.920
cetera. You know, again, that
kind of server mentality, this

655
00:34:41.920 --> 00:34:46.180
asynchronous model might be new
to you and, you know,

656
00:34:46.210 --> 00:34:48.910
might be a little bit
of hurdle to kind of

657
00:34:48.910 --> 00:34:51.580
understand, okay, how do I
chain events together? How do

658
00:34:51.580 --> 00:34:54.160
I effectively use it? And
my opinion, it's gonna ultimately

659
00:34:54.160 --> 00:34:58.360
make you a more well
rounded programmer. But for some,

660
00:34:58.360 --> 00:35:00.220
it kind of gets frustrating.
I was like, Oh, what's

661
00:35:00.220 --> 00:35:02.380
this async handler crap I
have to deal with now.

662
00:35:02.380 --> 00:35:04.330
You know? And then the
second thing I would say

663
00:35:04.330 --> 00:35:08.200
is probably XAML can be
a little intimidating if you

664
00:35:08.200 --> 00:35:11.920
are completely unfamiliar with it.
And you know, it is,

665
00:35:12.490 --> 00:35:15.430
it is a markup language.
It is kind of analogous

666
00:35:15.430 --> 00:35:17.560
to HTML as far as,
you know, containers and things

667
00:35:17.560 --> 00:35:20.650
like that. But if you
haven't completely looked at it

668
00:35:20.650 --> 00:35:23.740
and trying to understand the
layout mechanism and what you

669
00:35:23.740 --> 00:35:26.860
should use, where and what,
what might take a little

670
00:35:26.860 --> 00:35:29.440
bit, a little bit of
time just to remove that

671
00:35:29.440 --> 00:35:31.870
intimidation factor, if you haven't
looked down now, luckily, you

672
00:35:31.870 --> 00:35:34.750
know, again, we have the
tools to kind of, obviscate

673
00:35:34.750 --> 00:35:36.910
some of that a little
bit with like expression blend

674
00:35:36.910 --> 00:35:40.890
as of a UI designer,
for example. But I would

675
00:35:40.890 --> 00:35:42.470
say those are kind of
some of the things that,

676
00:35:42.480 --> 00:35:46.560
that might get new developers,
a little, a little concerned

677
00:35:46.560 --> 00:35:48.360
off the bat. But other
than that, I mean, it's,

678
00:35:48.390 --> 00:35:51.540
it's the.net side of things
is the same.net that a

679
00:35:51.540 --> 00:35:53.700
developer would be used to.
So if you're doing an

680
00:35:53.700 --> 00:35:56.820
asp.net today and you're writing
C-sharp or VB, it's the

681
00:35:56.820 --> 00:35:59.850
same C-sharp and VB that,
that you'd be writing, it's

682
00:35:59.850 --> 00:36:02.660
just, you don't have all
those base class libraries. Yeah.

683
00:36:02.660 --> 00:36:04.700
That's the thing that is
the most difficult for me

684
00:36:04.700 --> 00:36:08.660
when working in Silverlight or
in WPF is always the,

685
00:36:08.840 --> 00:36:11.300
what can I do in
XAML and markup versus what

686
00:36:11.300 --> 00:36:13.640
I can do in code
behind? I mean, literally just

687
00:36:13.640 --> 00:36:15.980
yesterday, I was talking to
a buddy of mine who

688
00:36:15.980 --> 00:36:19.160
was doing some, some texts
that was going to fade

689
00:36:19.160 --> 00:36:21.410
away and then fade back
in and I said, Oh,

690
00:36:21.440 --> 00:36:23.300
cool. You could probably do
that as a animal animation.

691
00:36:23.300 --> 00:36:24.650
And he's like, you know,
I just did it in

692
00:36:24.650 --> 00:36:27.080
COVID behind. And it was
really, it was interesting cause

693
00:36:27.080 --> 00:36:29.600
he was really apologetic. I
said, Oh, you know, I

694
00:36:29.600 --> 00:36:31.610
understood what was going on.
I mean, code behind made

695
00:36:31.610 --> 00:36:34.310
sense. I understood how to
make a timer and make

696
00:36:34.310 --> 00:36:37.010
this thing fade away. I
know I could do it

697
00:36:37.010 --> 00:36:38.930
in XAML, but you know,
who, who wants to go

698
00:36:38.930 --> 00:36:41.510
through the hassle? It seems
like the getting over the

699
00:36:41.510 --> 00:36:44.630
hump on XAML is a
big, big problem for everybody.

700
00:36:44.890 --> 00:36:46.730
Yeah. And, and, you know,
there's still gonna always be

701
00:36:46.730 --> 00:36:48.350
two types, right? I mean,
I mean, you could write

702
00:36:48.350 --> 00:36:51.140
an asp.net application that just
says a single placeholder control.

703
00:36:51.140 --> 00:36:53.630
Right. And just dynamically inject
things all day long, but

704
00:36:53.630 --> 00:36:55.220
does it, you know, it
doesn't make sense. I mean,

705
00:36:55.220 --> 00:36:58.100
if you're a hardcore developer
and you live and you

706
00:36:58.100 --> 00:37:00.740
live in, you'd rather live
in code, you can certainly

707
00:37:00.740 --> 00:37:02.900
do that. I think that's
kind of the benefit of

708
00:37:02.900 --> 00:37:05.630
our platform is, you know,
we have, we have this

709
00:37:05.630 --> 00:37:08.750
thing called XAML that you
can represent, you know, UI

710
00:37:08.750 --> 00:37:12.230
elements as angle brackets and
things, but they're this, you

711
00:37:12.230 --> 00:37:14.090
can still represent them as
code and they're, I mean,

712
00:37:14.090 --> 00:37:18.170
they are objects themselves really
XAML. I mean, if you,

713
00:37:18.170 --> 00:37:21.080
if you look at XAML
and a tag, like button,

714
00:37:21.950 --> 00:37:24.530
the button tag and XAML
is nothing more than an

715
00:37:24.530 --> 00:37:28.700
instantiation command. I mean, it's
new, you know, effectively it's

716
00:37:28.700 --> 00:37:32.510
new button. That's what that
angle bracket button means. So,

717
00:37:32.510 --> 00:37:35.210
you know, that's kind of
a weird way to think

718
00:37:35.210 --> 00:37:37.730
about it, but that's really
what's happening behind the scenes.

719
00:37:38.180 --> 00:37:40.730
But yeah, I mean, I
think, I think that that

720
00:37:40.730 --> 00:37:42.560
can be a challenge, especially
in when, you know, when

721
00:37:42.560 --> 00:37:44.630
you're the sole developer and
you don't have this kind

722
00:37:44.630 --> 00:37:48.110
of designer developer workflow that
we keep talking about that

723
00:37:48.110 --> 00:37:50.090
you're trying to figure out,
how can I, you know,

724
00:37:50.810 --> 00:37:52.910
how can I get from
a, to B quickly and,

725
00:37:52.940 --> 00:37:54.080
Oh, I know how to
do that in code. I'll

726
00:37:54.080 --> 00:37:55.310
just do it in code.
And there's, I don't think

727
00:37:55.310 --> 00:37:58.610
there's anything wrong with that,
that type of thinking. I

728
00:37:58.610 --> 00:38:02.120
think, you know, the challenges
you'll face is once you

729
00:38:02.120 --> 00:38:05.390
start hitting into maybe certain
types of pattern development, or

730
00:38:05.720 --> 00:38:10.070
now you've added another team
member or another UI view

731
00:38:10.070 --> 00:38:12.050
that you have to integrate
with, you know, how now,

732
00:38:12.050 --> 00:38:14.390
how does that code work
with the rest of your

733
00:38:14.390 --> 00:38:17.450
application? But I don't necessarily
think there's anything wrong with

734
00:38:17.450 --> 00:38:19.190
that way of thinking. In
fact, we tell people, you

735
00:38:19.190 --> 00:38:21.410
know, you can create a
button in zoom or you

736
00:38:21.410 --> 00:38:23.960
can create an encode. We
don't care. Hmm. I think

737
00:38:23.960 --> 00:38:27.680
that you don't care because
it works, but with all

738
00:38:27.680 --> 00:38:31.490
things, there's an intrinsic sense
of the aesthetic. And I've

739
00:38:31.490 --> 00:38:34.910
always felt that went with
XAML with the PF, with

740
00:38:34.930 --> 00:38:38.080
Silverlight there's always a, For
some reason, somewhere along the

741
00:38:38.080 --> 00:38:40.900
process, it gets started that
if you can do it

742
00:38:40.900 --> 00:38:43.300
in XAML, that's more impressive.
That's somehow better, which I

743
00:38:43.300 --> 00:38:46.630
don't quite understand because it's
harder to debug. If something

744
00:38:46.630 --> 00:38:48.970
goes wrong, it's not like
you're going to drop into

745
00:38:48.970 --> 00:38:52.180
the code and in a
friendly break point, you know,

746
00:38:52.360 --> 00:38:54.280
so I'm, I'm still trying
to get my head around

747
00:38:54.280 --> 00:38:57.160
when it's time to just
cut bait and let it

748
00:38:57.160 --> 00:39:00.010
happen in the code behind.
And I feel dirty when

749
00:39:00.010 --> 00:39:02.050
I do it. Yeah. And
that's where some of these

750
00:39:02.050 --> 00:39:04.240
patterns are emerging. Right. So
one of the more popular

751
00:39:04.330 --> 00:39:07.990
patterns in, in XAML development,
both WPF and Silverlight is

752
00:39:07.990 --> 00:39:11.710
this model, view, view, model,
pattern that kind of is

753
00:39:12.040 --> 00:39:15.790
this, this guideline or pattern
that talks about, you know,

754
00:39:16.720 --> 00:39:19.660
you really shouldn't put any
type of UI logic in

755
00:39:19.660 --> 00:39:23.130
your, in your code area,
right? I mean, you should,

756
00:39:23.130 --> 00:39:24.700
you should have this thing
called a view. And that

757
00:39:24.700 --> 00:39:27.940
represents literally the view of,
of your, of your UI.

758
00:39:27.940 --> 00:39:31.090
And it has your UI
elements. And the view model

759
00:39:31.090 --> 00:39:33.850
is this kind of glue
that, that is the code

760
00:39:33.850 --> 00:39:36.670
that talks to and does
the data binding and et

761
00:39:36.670 --> 00:39:39.700
cetera. And that view model
is the thing that becomes

762
00:39:40.090 --> 00:39:44.050
more testable, easier to debug
that you're not, you're not

763
00:39:44.050 --> 00:39:46.120
coupling it with, you know,
just kind of this two

764
00:39:46.120 --> 00:39:50.710
tier tier is probably not
the best word, but, you

765
00:39:50.710 --> 00:39:53.770
know, code behind kind of
approach type thing. So the,

766
00:39:53.770 --> 00:39:56.050
you know, that the view
model approach is one pattern

767
00:39:56.050 --> 00:39:59.830
that's, that's emerging to try
to solve or try to

768
00:39:59.830 --> 00:40:03.700
provide better guidance on that
type of development problem that

769
00:40:03.700 --> 00:40:05.830
you just mentioned, you know,
how, how do I, where

770
00:40:05.830 --> 00:40:08.650
is the best place to
put things and how do

771
00:40:08.650 --> 00:40:10.960
I make it the most
productive development environment for me,

772
00:40:10.960 --> 00:40:13.330
both in creation, as well
as debugging and maintenance as

773
00:40:13.330 --> 00:40:16.600
well. Yeah. We should do
another talk at some point

774
00:40:16.600 --> 00:40:20.620
about, about the kind of
this code smell, because I'm

775
00:40:20.620 --> 00:40:22.630
finding more and more and
more as I start doing

776
00:40:22.630 --> 00:40:27.550
work with more and more
diverse amounts of, of, of

777
00:40:27.550 --> 00:40:30.670
technology that, that I, sometimes
I get paralyzed with the

778
00:40:31.090 --> 00:40:33.880
inability to move forward because
I can't come up with

779
00:40:33.880 --> 00:40:37.480
a way to make something
aesthetically. Correct. I can't get

780
00:40:37.480 --> 00:40:40.750
the code to the point
where I, it doesn't, it

781
00:40:40.750 --> 00:40:43.990
doesn't make me want to
barf. It works, but it

782
00:40:43.990 --> 00:40:48.070
doesn't make you feel right.
Right. Pretty much. Yeah. Well,

783
00:40:48.070 --> 00:40:50.620
thanks, Tim. I really appreciate
you sitting down and taking

784
00:40:50.620 --> 00:40:52.420
the time to talk to
me about, about sober life

785
00:40:53.530 --> 00:40:55.960
and hopefully I'll get you
back on, we'll talk about

786
00:40:55.960 --> 00:40:59.170
several light for absolutely. This
has been another episode of

787
00:40:59.170 --> 00:41:01.810
Hansel minutes and I'll see
you again next week.

