WEBVTT FILE

1
00:00:05.400 --> 00:00:17.030
<inaudible> From Hansel minutes.com. It's
Hansel minutes, a weekly discussion

2
00:00:17.030 --> 00:00:21.110
with web developer and the
technologist Scott Hanselman. This is

3
00:00:21.110 --> 00:00:26.990
Lawrence Ryan announcing show number two
56. Recorded live Wednesday, March 2nd, 2011.

4
00:00:27.620 --> 00:00:31.310
Support for Hanselman. This is
provided by Telerik rad controls,

5
00:00:31.340 --> 00:00:34.520
the most comprehensive suite of
components for windows forms and

6
00:00:34.520 --> 00:00:44.270
asp.net web applications online@wwwdottelerik.com. In
this episode, Scott talks with

7
00:00:44.270 --> 00:00:48.350
Elijah Manor and Dave ward
about taking your JavaScript knowledge

8
00:00:48.380 --> 00:00:53.570
to the next level. Hi,
this is Scott Hanselman, and

9
00:00:53.570 --> 00:00:55.550
this is another episode of
Hansel minutes, and I'm here

10
00:00:55.550 --> 00:00:57.860
on campus at Microsoft. And
this is a very special

11
00:00:57.860 --> 00:01:01.130
show. Why do you ask
it's because it's show number

12
00:01:01.130 --> 00:01:05.150
256 bits of Hanselman. It's
it is eight pits of

13
00:01:05.150 --> 00:01:07.070
Hanselman, and this is a
very special show. It is

14
00:01:07.070 --> 00:01:10.940
our round number show show
200 went by without even

15
00:01:10.940 --> 00:01:14.300
a thought, but a show
two 56 will not go

16
00:01:14.300 --> 00:01:18.140
unrecognized and here Dave ward
with your wonderful radio voice.

17
00:01:18.170 --> 00:01:20.030
Thank you sir. For joining
me. I happy to be

18
00:01:20.030 --> 00:01:22.310
here. And we've also got
the man who has more

19
00:01:22.310 --> 00:01:25.250
Twitter followers than Scott goo,
Elijah Manor. How are you,

20
00:01:25.250 --> 00:01:27.230
sir? I'm doing well. You
have, you have too many

21
00:01:27.230 --> 00:01:29.690
Twitter followers. How many you
have now it's close to

22
00:01:29.690 --> 00:01:32.750
31,000. That's a problem. I'm
taking you down. My friend,

23
00:01:33.830 --> 00:01:36.350
we are, we just actually
came out of some sessions

24
00:01:36.350 --> 00:01:39.080
at the MVP summit. We've
been talking about JavaScript has

25
00:01:39.080 --> 00:01:41.990
been a lot of JavaScript
discussion, and I want to

26
00:01:42.020 --> 00:01:45.440
come at this with the
direction of a person who

27
00:01:45.440 --> 00:01:49.550
kind of, I know JavaScript,
but I don't know, JavaScript.

28
00:01:49.550 --> 00:01:53.570
Like I understand alert. I
understand on click. I understand

29
00:01:53.570 --> 00:01:55.850
JavaScript is a piece of
glue that allows me to

30
00:01:55.850 --> 00:01:59.330
hook up some actions to
my markup, but I don't

31
00:01:59.540 --> 00:02:02.600
really think that I, as
a professional engineer have really

32
00:02:02.600 --> 00:02:06.140
accepted JavaScript as its own
language. I don't give it

33
00:02:06.140 --> 00:02:09.530
the respect that it needs.
And then I also have

34
00:02:09.530 --> 00:02:11.990
a tendency to tweet kind
of smart ass things about

35
00:02:12.200 --> 00:02:15.260
JavaScript. Like no one really
writes JavaScript anymore. They only

36
00:02:15.260 --> 00:02:17.870
write jQuery. And I said
to myself, here are two

37
00:02:17.870 --> 00:02:20.660
guys who respect the language
and care about the language

38
00:02:20.660 --> 00:02:23.210
and you would help me
develop my sense of smell.

39
00:02:23.210 --> 00:02:25.730
So, I mean, do I
have my head wrong? Or

40
00:02:25.730 --> 00:02:27.440
do you think that it's
true that there are a

41
00:02:27.440 --> 00:02:30.560
whole cast of programmers out
there that kind of know

42
00:02:30.570 --> 00:02:33.050
JavaScript, but haven't really accepted
it into their life. They

43
00:02:33.050 --> 00:02:35.870
don't know the good news
about JavaScript. Yeah, I think,

44
00:02:37.250 --> 00:02:39.470
I think you have a
right. I think most of

45
00:02:39.470 --> 00:02:42.530
the developers that I come
across and, and, you know,

46
00:02:42.530 --> 00:02:44.960
looking at blogs on the
internet, it seems a lot

47
00:02:44.960 --> 00:02:47.330
of people know how to
just do all that basic

48
00:02:47.330 --> 00:02:49.610
stuff. And jQuery has really
made the language a lot

49
00:02:49.610 --> 00:02:53.480
more popular and accessible. And
mainly because it's made working

50
00:02:53.480 --> 00:02:56.030
with the Dom easier, you
don't have to worry as

51
00:02:56.030 --> 00:02:59.410
many of the cross-browser issues,
which has become popular. But

52
00:02:59.650 --> 00:03:02.770
the more That you write
jQuery, you're going to run

53
00:03:02.770 --> 00:03:06.700
into problems if you don't
really know JavaScript well. And

54
00:03:07.780 --> 00:03:10.840
which kind of led me
to, I'm actually gonna speak

55
00:03:10.840 --> 00:03:14.860
at mics about this topic
because I see especially well,

56
00:03:15.010 --> 00:03:17.110
C sharp developers. Cause that's
what the people that I

57
00:03:17.110 --> 00:03:20.500
know seem to make the
same common mistakes because they,

58
00:03:20.680 --> 00:03:23.860
they program Java script as
if it were C sharp.

59
00:03:24.100 --> 00:03:30.010
And there are actually many
differences. Java script is probably

60
00:03:30.010 --> 00:03:33.250
more akin to F sharp
and cause its functional nature.

61
00:03:34.090 --> 00:03:36.400
And it is dynamic as
well, which is slightly different.

62
00:03:36.400 --> 00:03:39.640
But if you don't understand
those things, you can run

63
00:03:39.640 --> 00:03:43.210
into a lot of problems
and just, you know, the

64
00:03:43.210 --> 00:03:45.580
scope is different. So if
you have an F block,

65
00:03:45.700 --> 00:03:48.220
one C sharp, you know,
between the curly places, you're

66
00:03:48.220 --> 00:03:50.800
like, Oh, if a variable
is in there, it's stays

67
00:03:50.800 --> 00:03:53.770
in there. But in JavaScript
it's not. And so you

68
00:03:53.770 --> 00:03:56.500
could run it a lot
of problems and four loops

69
00:03:56.500 --> 00:04:00.430
are a little bit different.
And anyway, so I came

70
00:04:00.430 --> 00:04:03.280
up with this talk because
I was doing a front

71
00:04:03.280 --> 00:04:05.860
end architecture review for a
client and they were making

72
00:04:05.860 --> 00:04:09.580
all the same mistakes that
I made initially. And then

73
00:04:09.580 --> 00:04:14.710
I've slowly learned over time,
just studying Douglas Crockford and

74
00:04:14.710 --> 00:04:19.060
reading his book. And so
I really think, unless you're

75
00:04:19.060 --> 00:04:21.940
doing something very trivial, which
is usually the demos that

76
00:04:21.940 --> 00:04:25.510
you see, people usually pick
that up and just they'll

77
00:04:25.510 --> 00:04:28.780
write a really complicated app,
but use those simple techniques

78
00:04:28.780 --> 00:04:32.020
and, and your code becomes
kind of unmaintainable and tightly

79
00:04:32.020 --> 00:04:36.160
coupled. And there's actually a
lot of nice JavaScript patterns

80
00:04:36.160 --> 00:04:38.920
you can pick up to
really split that out. Do

81
00:04:38.920 --> 00:04:40.600
you agree with that day?
The idea that I see

82
00:04:40.600 --> 00:04:42.550
curly braces and I go,
Oh, I know curly brace

83
00:04:42.550 --> 00:04:45.040
language. I'll write this other
curly brace language in the

84
00:04:45.040 --> 00:04:48.240
same way. Yeah. I had
two points. Exactly. They were

85
00:04:48.240 --> 00:04:50.850
just right at a, it's
so easy to try to

86
00:04:50.850 --> 00:04:55.140
write C-sharp in JavaScript, you
know, going too far toward

87
00:04:55.140 --> 00:04:58.950
the object oriented paradigm instead
of embracing either, you know,

88
00:04:58.980 --> 00:05:01.380
none of it, you don't
have to necessarily have objects.

89
00:05:01.390 --> 00:05:04.050
You can just use namespace
objects to hold your code

90
00:05:05.070 --> 00:05:08.790
or, you know, doing the
really complex objects where you

91
00:05:08.790 --> 00:05:11.190
end up having more plumbing
code than actual code that

92
00:05:11.190 --> 00:05:13.200
is running your site. I
think that's a big problem.

93
00:05:13.320 --> 00:05:15.660
And also not embracing the
fact that it's a dynamic

94
00:05:15.660 --> 00:05:17.790
language. Cause it really is
a beautiful thing when you're

95
00:05:17.790 --> 00:05:21.660
working with the UI because
that's where a aesthetic language

96
00:05:21.660 --> 00:05:24.360
like you C sharp is
actually sort of messy. That's

97
00:05:24.360 --> 00:05:26.340
interesting that, that at first
aspect, let's talk about that.

98
00:05:26.340 --> 00:05:28.500
The idea that JavaScript is
really a truly dynamic dynamic

99
00:05:28.500 --> 00:05:33.480
language. We, we hear people
complaining about lack of IntelliSense

100
00:05:33.660 --> 00:05:36.360
in JavaScript and C sharp
programmers and BB programmers say,

101
00:05:36.360 --> 00:05:38.370
well, I don't really like
JavaScript because I feel like

102
00:05:38.370 --> 00:05:40.230
I'm out there without a
net and you really are,

103
00:05:40.680 --> 00:05:43.140
but it's not necessarily a
deficiency of the tools. Sometimes

104
00:05:43.140 --> 00:05:47.580
it's, it's honestly the JavaScript
stuff that's going on inside

105
00:05:47.580 --> 00:05:50.940
of visual studio is pretty
amazing. It's actually not a

106
00:05:50.940 --> 00:05:53.250
deficiency, but a strength of
the language that you just

107
00:05:53.250 --> 00:05:55.740
don't know until you run
it, what's going to happen.

108
00:05:56.160 --> 00:05:59.030
Yeah, that's true. You know,
I sort of Liken it

109
00:05:59.030 --> 00:06:01.220
to regular expressions. You know,
every time that you need

110
00:06:01.220 --> 00:06:03.530
a red X for something,
you have to go back

111
00:06:03.530 --> 00:06:05.060
out and learn the syntax.
It's one of those things

112
00:06:05.060 --> 00:06:07.610
that you use just infrequently
enough that, you know, it

113
00:06:07.610 --> 00:06:09.110
can do what you want.
You just don't know how

114
00:06:09.110 --> 00:06:11.330
to do it. And I
think the JavaScript is the

115
00:06:11.330 --> 00:06:13.190
same way for a lot
of people who have been,

116
00:06:13.760 --> 00:06:16.730
you know, maybe copy pasting
some snippets from a dynamic

117
00:06:16.730 --> 00:06:19.130
drive or something like that,
or, or using the things

118
00:06:19.130 --> 00:06:22.850
that frameworks will generate like
asp.net and just enough to,

119
00:06:22.850 --> 00:06:25.070
you know, be dangerous, but
not necessarily be able to

120
00:06:25.070 --> 00:06:27.920
sit down and write some
JavaScript from scratch. And that's

121
00:06:27.920 --> 00:06:30.260
that sort of tipping point
where you really have to

122
00:06:30.770 --> 00:06:33.620
embrace it, embrace the language,
embrace the strengths of it.

123
00:06:34.280 --> 00:06:38.270
And I think that that's
probably because people use it

124
00:06:38.270 --> 00:06:41.420
just infrequently enough to remember
the pain points. They never

125
00:06:41.420 --> 00:06:43.850
get past the tipping point
where they start to see

126
00:06:43.850 --> 00:06:46.360
the true benefits of using
it. Yeah. I want to

127
00:06:46.360 --> 00:06:49.180
understand how I can go
from a beginner to a

128
00:06:49.210 --> 00:06:50.890
kind of an apprentice and
work my way up to

129
00:06:50.890 --> 00:06:53.020
kind of a journeyman, because
I was looking at some

130
00:06:53.020 --> 00:06:55.660
code that Steve Sanderson wrote
that we demonstrated during the

131
00:06:55.990 --> 00:06:58.660
cemeteries on knockout JS. And
I had Steve on the

132
00:06:58.660 --> 00:07:01.960
show a couple of weeks
ago and he had built

133
00:07:01.960 --> 00:07:06.460
an entire view model. And
that, again, this will just

134
00:07:06.460 --> 00:07:10.600
belie my own ignorance, but
he, it had methods and

135
00:07:10.600 --> 00:07:12.970
properties and they were interacting
between each other. It was

136
00:07:12.970 --> 00:07:15.220
really quite a beautiful thing.
And I looked at it

137
00:07:15.220 --> 00:07:18.940
and could read it, but
couldn't visualize a world where

138
00:07:18.940 --> 00:07:20.830
I could write that myself.
You know what I'm saying?

139
00:07:21.370 --> 00:07:24.250
So I think you're right.
That I'm still at that

140
00:07:24.280 --> 00:07:26.530
basic level where I say,
Oh, they've got four loops,

141
00:07:26.530 --> 00:07:28.510
I've got four loops. They've
got switched statements. I've got

142
00:07:28.510 --> 00:07:31.960
switched statements. But, but how
to make that transition, I

143
00:07:31.960 --> 00:07:34.060
mean the basic structure about
like, what does a good

144
00:07:34.060 --> 00:07:36.700
JavaScript object look like? What
kind of behavior should it

145
00:07:36.700 --> 00:07:38.290
have? And then you brought
up the issue of namespace

146
00:07:38.290 --> 00:07:41.500
scoping. It's a little bit
overwhelming. Yeah. I think a

147
00:07:41.500 --> 00:07:45.160
lot of the C sharp
developers don't realize that, you

148
00:07:45.160 --> 00:07:47.830
know, the fact that they
can namespace and she's sharp

149
00:07:47.950 --> 00:07:50.140
is a good thing. But
when they go to write

150
00:07:50.140 --> 00:07:54.640
JavaScript, everything's on the global
object, like they just use

151
00:07:54.640 --> 00:07:57.340
function and a name and
then they go on and

152
00:07:57.340 --> 00:08:00.340
they don't realize actually that's
a bad thing because especially

153
00:08:00.340 --> 00:08:03.220
in browsers like Chrome and
stuff, it all the extensions

154
00:08:03.220 --> 00:08:08.050
that you install, your functions
could conceivably conflict with their

155
00:08:08.050 --> 00:08:09.880
code as well. Really. So
those are all living in

156
00:08:09.880 --> 00:08:13.450
the same place. If you
actually open up the debugger

157
00:08:13.480 --> 00:08:14.890
or the, you know, to
look at your code and

158
00:08:15.430 --> 00:08:18.220
select all the scripts because
you want to debug your

159
00:08:18.220 --> 00:08:21.520
script. Well, among that script
is like all the extension

160
00:08:21.520 --> 00:08:23.380
scripts as well. So how
does it work at all?

161
00:08:23.380 --> 00:08:25.750
I mean, it makes me
wonder how well I've, I've

162
00:08:25.750 --> 00:08:29.050
run into some extensions that
it broke a page because

163
00:08:29.830 --> 00:08:32.380
they were conflicting and what
they were using. And so

164
00:08:32.380 --> 00:08:35.460
that's really the, one of
the importance of using namespace,

165
00:08:35.460 --> 00:08:38.590
spacing your stuff. And there's
some simple patterns, actually, there's

166
00:08:38.590 --> 00:08:42.760
several ways to do it.
But Douglas Crockford in his

167
00:08:42.760 --> 00:08:46.420
book JavaScript the good parts
really outlined several techniques that

168
00:08:46.420 --> 00:08:49.510
you could, you could have
an object with public and

169
00:08:49.510 --> 00:08:53.320
private properties, public and private
methods, just kind of like

170
00:08:53.320 --> 00:08:56.910
you're used to in C
sharp. And, but most people

171
00:08:56.910 --> 00:08:59.670
don't realize that. And by
doing so, you're protecting the

172
00:08:59.670 --> 00:09:02.130
global namespace. So you're not
going to conflict with all

173
00:09:02.130 --> 00:09:04.680
these other libraries. So yeah,
if, if you don't like

174
00:09:04.680 --> 00:09:07.620
to read, which sometimes it's
hard to read, there's a

175
00:09:07.620 --> 00:09:09.600
great, he did the same
content, basically in a video

176
00:09:09.810 --> 00:09:13.020
video series on, on Yahoo.
You can actually go there

177
00:09:13.020 --> 00:09:15.930
and, and watch it, but
he outlines a lot of

178
00:09:15.930 --> 00:09:21.560
these techniques that most developers
don't know Also brought up

179
00:09:21.560 --> 00:09:23.330
a good point there in
terms of, you know, there

180
00:09:23.330 --> 00:09:25.550
are, there are a lot
of different ways to create

181
00:09:25.550 --> 00:09:28.370
objects and, and set up,
you know, your, your inheritance,

182
00:09:28.370 --> 00:09:31.660
a prototype and things like
that in JavaScript. But something,

183
00:09:31.710 --> 00:09:34.190
I think probably because most
of the sample code you're

184
00:09:34.190 --> 00:09:36.860
going to see if you
look at something that's that

185
00:09:36.860 --> 00:09:39.710
we get an ASP dot
that often is a framework.

186
00:09:39.740 --> 00:09:42.110
It's, it's something that is
meant to be very, very

187
00:09:42.110 --> 00:09:44.930
generic that, that works in
every case. You're going to

188
00:09:44.930 --> 00:09:48.710
see a little bit more
architecture than you probably need

189
00:09:48.710 --> 00:09:51.290
for your website. You know,
I think that's something that

190
00:09:51.290 --> 00:09:53.300
I see an awful and,
and it adds to the

191
00:09:53.300 --> 00:09:55.270
complexity, going back to what
you said about, you know,

192
00:09:55.270 --> 00:09:57.080
if I'm just starting, you
know, how much do I

193
00:09:57.080 --> 00:09:59.060
really have to learn? And
if you add all this

194
00:09:59.060 --> 00:10:01.760
plumbing on top of the
core concepts, it really makes

195
00:10:01.760 --> 00:10:03.410
it harder to approach. And
then you bring up a

196
00:10:03.410 --> 00:10:05.420
really interesting point that kind
of resonates with me that

197
00:10:05.420 --> 00:10:08.180
as a, as a purported
educator, I'm going to try

198
00:10:08.180 --> 00:10:10.160
to put out samples there
and encourage people to put

199
00:10:10.160 --> 00:10:13.250
out samples. But if that
sample says, include these nine

200
00:10:13.250 --> 00:10:16.790
files, and by the way,
beyond JavaScript itself as a

201
00:10:16.790 --> 00:10:19.610
language, you need to understand
these two other frameworks, then

202
00:10:19.790 --> 00:10:22.070
that can be really overwhelming.
But then at the same

203
00:10:22.070 --> 00:10:24.770
time, if I put out
a sample, inevitably, something is

204
00:10:24.770 --> 00:10:26.810
going to be copy pasted
directly from that sample. And

205
00:10:26.810 --> 00:10:29.420
it was a naive sample.
And no matter how many

206
00:10:29.420 --> 00:10:31.850
times you put things in
bold and red on the

207
00:10:31.850 --> 00:10:33.770
sample, that this is a
naive sample, do not copy

208
00:10:33.770 --> 00:10:36.170
paste. It, it will end
up in production somewhere that's.

209
00:10:36.440 --> 00:10:39.290
So it feels like there's
a gap and that gap

210
00:10:39.320 --> 00:10:44.180
is basic working knowledge of
JavaScript and then creating object

211
00:10:44.180 --> 00:10:47.360
models and hierarchies and namespaces
should I, what should I

212
00:10:47.360 --> 00:10:49.280
be doing? Should I be
reading books or should I

213
00:10:49.290 --> 00:10:52.940
be reading source code? I
think reading source code is

214
00:10:52.940 --> 00:10:56.360
a really good idea. Like
I absolutely agree with the

215
00:10:56.450 --> 00:11:00.110
Crockfords the JavaScript, the good
parts. It's a really concise

216
00:11:00.110 --> 00:11:01.820
book, you know, you can
read it very quickly. I

217
00:11:01.820 --> 00:11:04.310
think it's just a hundred
pages or so. And that,

218
00:11:04.310 --> 00:11:06.590
that is a good primer.
I don't know if I

219
00:11:06.590 --> 00:11:09.560
would recommend starting with that
first because it assumes a

220
00:11:09.560 --> 00:11:12.710
little bit of knowledge, but
absolutely reading code. You know,

221
00:11:12.710 --> 00:11:14.140
I know that you're a
proponent of that and that

222
00:11:14.150 --> 00:11:16.160
that's, that's definitely one of
the best ways. And especially

223
00:11:16.160 --> 00:11:19.010
JavaScript is, is always out
there. You know, you can

224
00:11:19.010 --> 00:11:21.530
view source on so many
websites. You, how did they

225
00:11:21.530 --> 00:11:23.240
do this, but you source
and now, you know, or

226
00:11:23.240 --> 00:11:26.660
look at it in something
like fireball, Just to piggyback

227
00:11:26.660 --> 00:11:29.420
on that. Paul Irish, she's
one of the jQuery team

228
00:11:29.420 --> 00:11:33.110
members. He has two videos.
The first one was called

229
00:11:34.010 --> 00:11:37.520
10 things. I learned from
reading the jQuery source. And

230
00:11:37.520 --> 00:11:42.200
he actually dives into some
really complicated, but approachable things.

231
00:11:43.190 --> 00:11:45.020
It's a really great video.
And then he, it was

232
00:11:45.020 --> 00:11:47.060
so popular. I mean, tons
of people watched it that

233
00:11:47.060 --> 00:11:48.950
he did it out of
the one, like 11 more

234
00:11:48.950 --> 00:11:52.610
things he learned from the
jQuery source. And well, that's

235
00:11:52.610 --> 00:11:56.230
a lot of, so, but
I highly recommend those because

236
00:11:56.770 --> 00:11:59.170
some of those patterns, you
know, I learned from watching

237
00:11:59.170 --> 00:12:03.700
him and then it encouraged
myself to look at Jake

238
00:12:03.730 --> 00:12:07.360
Corey source more closely. And
I'm just picking up a

239
00:12:07.360 --> 00:12:11.410
lot of, a lot of
the techniques that modern JavaScript

240
00:12:11.410 --> 00:12:13.570
uses, because you'll see lots
of code snippets on the

241
00:12:13.570 --> 00:12:17.200
web, like old ways to
do things that's interesting right

242
00:12:17.200 --> 00:12:20.500
there, modern JavaScript, because it's
clear that JavaScript is a

243
00:12:20.500 --> 00:12:24.010
language can no longer be
avoided with old style web

244
00:12:24.010 --> 00:12:27.340
forms, 2002, 2003. And then
the original Ajax tool kit

245
00:12:27.340 --> 00:12:32.410
stuff. The idea was abstract
away, HTML, abstract away, JavaScript

246
00:12:32.740 --> 00:12:39.070
and jQuery embraces JavaScript, but
abstracts away, browser inconsistencies. But

247
00:12:39.070 --> 00:12:41.050
then you just said kind
of a hot button issue

248
00:12:41.050 --> 00:12:43.780
for me, which is modern
JavaScript. How do I know

249
00:12:44.260 --> 00:12:48.070
when I'm reading some code,
if it's modern or not

250
00:12:48.070 --> 00:12:51.970
modern. And does that mean
modern inform or does that

251
00:12:51.970 --> 00:12:54.880
mean that only certain browsers
understand it or only certain

252
00:12:54.880 --> 00:12:58.540
JavaScript, you know, interpreters or
JavaScript compilers can understand that?

253
00:12:58.710 --> 00:13:01.600
I mean, did the language
change or did the techniques

254
00:13:01.600 --> 00:13:05.680
change? It's more of the
techniques from my perspective, when

255
00:13:05.680 --> 00:13:09.340
I say modern JavaScript, I'm
more talking about not embedding

256
00:13:09.910 --> 00:13:13.210
code in, in your HTML
elements. Like, you know, having

257
00:13:13.210 --> 00:13:16.420
that separation a concern where
your markup is your markup,

258
00:13:16.720 --> 00:13:19.780
and then you add to
that in your JavaScript. And

259
00:13:19.780 --> 00:13:22.630
so you, you know, attach
to things. And that way,

260
00:13:22.630 --> 00:13:25.750
if, if, you know, just
having a clean separation just

261
00:13:25.750 --> 00:13:28.210
helps things out. And another
obvious thing to see if

262
00:13:28.210 --> 00:13:30.100
it's old, as you know,
is it, is it namespace

263
00:13:30.100 --> 00:13:32.260
or not? You know, just
like we talked about before,

264
00:13:32.260 --> 00:13:33.670
what does that mean? Like
give me an example, a

265
00:13:33.670 --> 00:13:37.000
concrete example of namespace or
not are all your functions,

266
00:13:37.120 --> 00:13:40.120
you know, just at the
root in your, in your

267
00:13:40.120 --> 00:13:44.140
file, is it like, I
would say function, hanselman.cool. And

268
00:13:44.140 --> 00:13:48.610
that's namespace versus just a
cool function. And so instead

269
00:13:48.610 --> 00:13:52.060
of saying like function space,
you know, Hanselman's function, open

270
00:13:52.060 --> 00:13:54.730
print, closed print, instead of
doing something like that, like

271
00:13:54.730 --> 00:13:56.890
that you would first create
an object and then you

272
00:13:56.890 --> 00:13:59.020
would define the, the method
off of the object. I

273
00:13:59.020 --> 00:14:01.420
see. And so that way
you could define multiple methods,

274
00:14:01.420 --> 00:14:03.700
but you attach them to
your object. So when you

275
00:14:03.700 --> 00:14:06.150
say the root, that scope,
that's an object, the window

276
00:14:06.180 --> 00:14:09.040
scoped, like if you just
open up the text editor

277
00:14:09.040 --> 00:14:12.790
and just start typing immediately,
that will be attached to

278
00:14:13.090 --> 00:14:15.160
the window. I see. So
if you don't actually attach

279
00:14:15.160 --> 00:14:16.630
it to something, it's going
to be attached to the

280
00:14:16.630 --> 00:14:20.320
window and that's where the
collisions can happen. So those

281
00:14:20.320 --> 00:14:22.660
are just some techniques that
it's just like, Oh, I

282
00:14:22.660 --> 00:14:25.270
probably shouldn't do it that
way. There's a better way.

283
00:14:25.360 --> 00:14:26.800
So there's nothing in the
language to prevent me from

284
00:14:26.800 --> 00:14:29.680
doing that, but that is
an expected convention. It's bad

285
00:14:29.680 --> 00:14:31.560
to not do it that
way. Yeah. I think it's

286
00:14:31.560 --> 00:14:34.320
probably tough to quantify exactly
what is modern, what isn't,

287
00:14:34.320 --> 00:14:37.530
you know, it's pretty subjective
that that is absolutely a

288
00:14:37.530 --> 00:14:39.510
one thing that the name
spacing, because I think a

289
00:14:39.510 --> 00:14:41.550
lot of people don't realize
that if you just type

290
00:14:41.580 --> 00:14:43.590
a variable name or type
of function name that is

291
00:14:43.590 --> 00:14:46.740
window dot, that variable and
window, not that function and

292
00:14:47.100 --> 00:14:50.940
what you were talking about
in terms of the, the

293
00:14:50.960 --> 00:14:54.520
separation of concerns, that's something
you bug me On a

294
00:14:54.520 --> 00:14:58.900
regular basis. Dave, I'm always
I'll make a JavaScript file,

295
00:14:58.930 --> 00:15:00.580
but then I'll put two
or three functions in my

296
00:15:00.580 --> 00:15:03.510
markup and you're like, stop
doing that. Yeah, yeah. That

297
00:15:03.510 --> 00:15:07.870
that's called unobtrusive JavaScript. The
idea that you, we can

298
00:15:07.870 --> 00:15:11.170
use event handlers that we
wire up, you know, completely

299
00:15:11.170 --> 00:15:14.320
separate from the, the, you
know, the HTML that markup

300
00:15:15.040 --> 00:15:18.880
the concept behind unintrusive JavaScript
is that you completely separate

301
00:15:19.060 --> 00:15:21.760
the markup and functionality that
you attach to it. So

302
00:15:21.760 --> 00:15:24.280
instead of, you know, in
the past, you've seen window

303
00:15:24.460 --> 00:15:26.350
onload and they'll put it
right there in the right.

304
00:15:26.470 --> 00:15:27.850
That's how I would do
it. And I did it

305
00:15:27.850 --> 00:15:29.950
for years, window on load
button on click and all

306
00:15:29.950 --> 00:15:32.860
that. Sure. And we all
have, but, and the reason,

307
00:15:32.860 --> 00:15:37.000
the reason that we did
that is because the mechanism

308
00:15:37.150 --> 00:15:39.940
for attaching those event handlers,
that is part of the

309
00:15:39.940 --> 00:15:41.950
Dom, that's not part of
the language itself, Dom the

310
00:15:41.950 --> 00:15:45.190
document object model. Yes. And
until recently we didn't have

311
00:15:45.190 --> 00:15:47.650
a good abstraction to do
that cleanly, you know, you

312
00:15:47.650 --> 00:15:49.270
know how to do it
in jQuery. It's very, very

313
00:15:49.270 --> 00:15:51.760
simple to add those handlers,
but before it's a quite

314
00:15:51.760 --> 00:15:53.950
a bit of code to
do it completely unobtrusively. So

315
00:15:53.950 --> 00:15:55.720
it just, it made sense
to do it in line.

316
00:15:55.810 --> 00:15:58.780
That's why asp.net did it
in line originally. And that

317
00:15:58.780 --> 00:16:02.560
was fun back then. Hi,
this is Scott coming to

318
00:16:02.560 --> 00:16:05.380
you from another place in
time. Are you using agile

319
00:16:05.380 --> 00:16:08.230
practices to manage your software
development? There's lots of tools

320
00:16:08.230 --> 00:16:10.300
in the market that manage
the steps of a project,

321
00:16:10.300 --> 00:16:13.420
but most of them focus
on individual roles, get ready

322
00:16:13.420 --> 00:16:15.340
for a solution that caters
for the success of the

323
00:16:15.340 --> 00:16:19.000
whole team. Guys at Tellerik
introduced team pulse. It's an

324
00:16:19.000 --> 00:16:22.660
agile project management tool. That'll
help you gather ideas, estimate

325
00:16:22.690 --> 00:16:27.160
plan, track progress in a
common workspace. Finally, companies, regardless

326
00:16:27.160 --> 00:16:29.200
of their size can use
a lightweight and convenient tool

327
00:16:29.200 --> 00:16:31.630
that makes all the stakeholders
work as a United team.

328
00:16:32.590 --> 00:16:35.770
Even if they're in different
countries by combining intuitive user

329
00:16:35.770 --> 00:16:38.470
interface and the power server
light team poles removes the

330
00:16:38.470 --> 00:16:41.110
roadblocks that you typically face
and applying agile in an

331
00:16:41.110 --> 00:16:45.190
effective manner, no more lost
data, no disparate systems, no

332
00:16:45.190 --> 00:16:49.330
lack of critical analytics regarding
the health philosophy project. See

333
00:16:49.330 --> 00:16:52.270
if yourself get a free
copy for five users in

334
00:16:52.270 --> 00:16:59.020
one project at tellerik.com/team pulse.
And please do thank tolerance

335
00:16:59.050 --> 00:17:03.580
for supporting Hansel minutes on
their Facebook fan page, facebook.com/t

336
00:17:03.580 --> 00:17:07.960
L E R I K
teller. We do appreciate it.

337
00:17:07.990 --> 00:17:09.910
They wouldn't be a handsome
minutes if there wasn't, Tellerik

338
00:17:09.910 --> 00:17:13.450
helping us. So if I'm
building an application and I've

339
00:17:13.450 --> 00:17:16.300
got a lot of JavaScript
in my markup now, I

340
00:17:16.300 --> 00:17:18.640
think probably a lot of
the listeners do. And if

341
00:17:18.640 --> 00:17:20.670
I move that out, am
I going to, I mean,

342
00:17:20.670 --> 00:17:23.770
I'm going to end up
with hundreds of JavaScript files

343
00:17:23.770 --> 00:17:27.070
and am I in my
hooking up my, my events

344
00:17:27.070 --> 00:17:30.400
based on the ID of
buttons, or am I trying

345
00:17:30.400 --> 00:17:32.260
to make things much more
generic and say, well, this

346
00:17:32.260 --> 00:17:34.060
is a button of this
class. I mean, how do

347
00:17:34.060 --> 00:17:37.150
I have that separation of
concerns without making a custom

348
00:17:37.150 --> 00:17:40.060
JavaScript file for every page?
Well, I think that you'll

349
00:17:40.060 --> 00:17:43.300
find a lot of times
this stuff is generic enough

350
00:17:43.300 --> 00:17:45.970
that you can either find
plugins that are already made

351
00:17:45.970 --> 00:17:49.030
or abstract your stuff out
into plugins, because often you,

352
00:17:49.080 --> 00:17:51.060
how many times have you
written a, an enclave for

353
00:17:51.060 --> 00:17:53.580
every row of a table
cell or a table, and

354
00:17:53.580 --> 00:17:55.680
you'll have, you know, a
hundred on clicks on a

355
00:17:55.680 --> 00:17:59.130
page or something like that.
And with the newer techniques

356
00:17:59.130 --> 00:18:01.380
that you use with JavaScript
or the other libraries, you

357
00:18:01.380 --> 00:18:03.930
can attach one handler to
the table. And as the

358
00:18:03.930 --> 00:18:05.910
event comes up to that
handler, you can say, well,

359
00:18:05.910 --> 00:18:08.190
which you know, which row
is clicked and grab its

360
00:18:08.190 --> 00:18:11.160
ID or some bit of
text out of the table

361
00:18:11.160 --> 00:18:13.410
or something like that. And
then, and work based on

362
00:18:13.410 --> 00:18:15.420
that. So you didn't, you
turned out that you turned

363
00:18:15.420 --> 00:18:17.850
a hundred of those handlers
into one. So you actually

364
00:18:17.850 --> 00:18:20.070
had a lot of gain
in efficiency. They're not, you

365
00:18:20.070 --> 00:18:23.090
know, not a loss And
if I've got an application

366
00:18:23.090 --> 00:18:25.190
like it has order details,
but it only has one

367
00:18:25.190 --> 00:18:28.520
order details page. I might
have some framework JavaScript that

368
00:18:28.520 --> 00:18:30.890
everyone included maybe at the
master page level, and then

369
00:18:30.890 --> 00:18:34.610
I might have page specific
JavaScript just for that order

370
00:18:34.610 --> 00:18:38.330
details page. Sure. And especially
now with the, how many

371
00:18:38.330 --> 00:18:40.570
script leaders we have that
are becoming more mature. And

372
00:18:40.570 --> 00:18:43.370
I know Boris is working
on different JS, A lot

373
00:18:43.370 --> 00:18:46.190
of information they're compressed in
a small area, you said

374
00:18:46.190 --> 00:18:48.440
script loaders. And he tells
us what that is. And

375
00:18:48.440 --> 00:18:52.400
who's Boris. Right. Okay. Boris
is on the asp.net team.

376
00:18:52.400 --> 00:18:54.710
And, and he's, he's the
developer that actually did most

377
00:18:54.710 --> 00:18:56.390
of the work on the
templates and the data linking

378
00:18:56.390 --> 00:19:00.650
and the globalization plugins. Yeah.
It'd been Microsoft JavaScript, Dave,

379
00:19:00.650 --> 00:19:02.120
there was Dave Reed and
then Boris, where it was

380
00:19:02.120 --> 00:19:04.520
more gotten involved and now
Damien's helping out. There's a

381
00:19:04.520 --> 00:19:06.950
lot of people here and
Dave and both Dave and

382
00:19:06.950 --> 00:19:11.420
Elijah are here. Our, our,
you know, JavaScript your MVPs,

383
00:19:11.450 --> 00:19:13.610
but you could probably compete
JavaScript, MVPs as well as

384
00:19:13.610 --> 00:19:16.100
ESPN and MVPs. So you
know, these guys on a

385
00:19:16.100 --> 00:19:17.930
first name basis and you've
worked with them and then

386
00:19:18.170 --> 00:19:20.210
because a lot of this
new work and JavaScript is

387
00:19:20.210 --> 00:19:23.210
being done out in the
open, you can interact with

388
00:19:23.210 --> 00:19:25.010
Boris as well, just by
going and looking at his

389
00:19:25.010 --> 00:19:26.660
kid hub page, which is
where he does most of

390
00:19:26.660 --> 00:19:28.670
his work. Yeah. He wants
that. He wants that interaction

391
00:19:28.670 --> 00:19:30.620
with everyone Quite done the
way it used to be,

392
00:19:30.620 --> 00:19:32.960
where we just, you know,
check things into TFS and

393
00:19:32.960 --> 00:19:34.610
then 18 months from now,
you find out what Boris

394
00:19:34.610 --> 00:19:36.770
is working on. You can
ask you follow us, follow

395
00:19:36.770 --> 00:19:40.220
Boris on, on GitHub. So
that was one thing. And

396
00:19:40.220 --> 00:19:41.930
then the script loader you
were saying that the script

397
00:19:41.930 --> 00:19:44.270
loaders make life easier when
we have lots of different

398
00:19:44.270 --> 00:19:45.590
scripts, what does the script
loader and why do I

399
00:19:45.590 --> 00:19:48.470
care? I think maybe the
life span over the past

400
00:19:48.470 --> 00:19:51.020
10 years of, of how
we include these scripts. You

401
00:19:51.020 --> 00:19:53.180
know, it's sort of gone
from, you know, we started

402
00:19:53.180 --> 00:19:55.400
out with just, just so
little script that it was

403
00:19:55.400 --> 00:19:57.980
embedded in the page. And
then we realized, Hey, you

404
00:19:57.980 --> 00:19:59.930
know, we're sort of duplicating
ourselves and this is messy.

405
00:19:59.930 --> 00:20:01.670
So we move it out
into a single script file.

406
00:20:02.030 --> 00:20:04.010
And then we start finding,
you know, dozens of scripts

407
00:20:04.010 --> 00:20:05.780
that we want on the
page and, and things like

408
00:20:05.780 --> 00:20:09.200
the asp.net Ajax library fill
sort of to that problem,

409
00:20:09.200 --> 00:20:12.410
to where each control would
include a separate JavaScript file.

410
00:20:12.830 --> 00:20:15.680
And then we realized, well,
this, the HTTP connections for

411
00:20:15.680 --> 00:20:18.980
each one, often the overheads
and make that connection takes

412
00:20:18.980 --> 00:20:22.610
more time and resources then
downloading the entire file itself.

413
00:20:23.030 --> 00:20:25.010
So we realized we have
to do something about that.

414
00:20:25.430 --> 00:20:29.780
And, and now probably most
anyone that's working with clients

415
00:20:29.780 --> 00:20:32.330
and stuff now knows you
should combine and compress your

416
00:20:32.330 --> 00:20:35.600
JavaScript down into as few
files as possible, which is

417
00:20:35.600 --> 00:20:37.280
pretty easy these days. There's
a lot of tools for

418
00:20:37.280 --> 00:20:41.370
it. Well, these days you
can actually take advantage of

419
00:20:41.390 --> 00:20:43.160
the way that newer browsers
work working by newer. I

420
00:20:43.160 --> 00:20:45.800
mean, like I ain't even
<inaudible>, you know, this isn't

421
00:20:45.800 --> 00:20:49.600
a really cutting edge thing
to actually asynchronously load the,

422
00:20:49.720 --> 00:20:52.120
the scripts in the background.
So at the very top

423
00:20:52.120 --> 00:20:53.740
of the page, you say,
Hey, would you pull these

424
00:20:53.740 --> 00:20:55.840
scripts in, but don't block
the rest of the page.

425
00:20:55.840 --> 00:20:58.630
Don't impact my performance very
much so that then you

426
00:20:58.630 --> 00:21:00.730
can move back toward a
more modular approach. So you

427
00:21:00.730 --> 00:21:02.950
don't have to have that
duplicated JavaScript code included on

428
00:21:02.950 --> 00:21:06.370
every, every page in order
to get a single combined

429
00:21:06.430 --> 00:21:10.300
file. And so now probably
going forward, what you'll see

430
00:21:10.300 --> 00:21:12.340
is, like you said earlier,
you know, there'll be a

431
00:21:12.340 --> 00:21:15.100
single base file is probably
necessary on every single page

432
00:21:15.130 --> 00:21:18.940
for common functionality, but then
it's not very costly to

433
00:21:18.940 --> 00:21:22.030
have pages, just use a
script floater to, to quickly

434
00:21:22.030 --> 00:21:25.330
pull in a little file
that has page specific functionality.

435
00:21:25.900 --> 00:21:28.890
So, you know, you can
really make it more modular.

436
00:21:28.940 --> 00:21:30.250
It makes it easier to
work on it, maintain it

437
00:21:30.250 --> 00:21:33.510
too. I like that. Yeah.
And just to follow up

438
00:21:33.510 --> 00:21:36.360
with that, another good thing
about most of these libraries,

439
00:21:36.360 --> 00:21:39.630
like the Fergus and lab
JS and required us, there's

440
00:21:39.630 --> 00:21:42.630
lots of them, but not
only can you tell it

441
00:21:42.630 --> 00:21:45.810
to do it asynchronously, but
sometimes there's a specific order

442
00:21:45.930 --> 00:21:48.810
that has to be in.
And, and most of them

443
00:21:48.810 --> 00:21:51.150
you can actually say, okay,
you know, for these to

444
00:21:51.840 --> 00:21:55.140
download them asynchronously, but only,
but execute them in order.

445
00:21:55.410 --> 00:21:57.030
And, but you could choose
which ones you want, which

446
00:21:57.030 --> 00:22:00.840
is great because more and
more apps are becoming single

447
00:22:00.840 --> 00:22:04.740
page apps. Like, you know,
just because Ajax and it's

448
00:22:04.740 --> 00:22:07.380
more responsive. And so instead
of refreshing and going somewhere

449
00:22:07.380 --> 00:22:11.280
else, you need, you need
all these tools eventually, but

450
00:22:11.280 --> 00:22:14.220
some of them you might
need immediately, like Dave was

451
00:22:14.220 --> 00:22:17.640
saying, so having the combination
of specifying the order is

452
00:22:17.640 --> 00:22:19.170
also good. And some of
them, you might, I don't

453
00:22:19.170 --> 00:22:21.300
care. You know, just, it
could be the last one

454
00:22:21.300 --> 00:22:23.550
then that's fine because I
won't need it. Maybe till

455
00:22:23.550 --> 00:22:27.870
I'm using jQuery templates later
on in the app. No,

456
00:22:27.870 --> 00:22:31.470
you know, within JavaScript, there's
all these different plugins. And

457
00:22:31.470 --> 00:22:34.260
then within jQuery, there's just
a whole community of plugins.

458
00:22:34.650 --> 00:22:36.030
And I think it's funny.
I mean, when people complain

459
00:22:36.030 --> 00:22:39.270
about Microsoft and our fragmentation
and our lack of documentation,

460
00:22:39.270 --> 00:22:42.480
but when you start getting
into the JavaScript world, it's

461
00:22:42.480 --> 00:22:44.910
just, everyone's got an opinion
and everyone's got a plug

462
00:22:44.910 --> 00:22:46.860
in, where do I start?
I mean, you're rattling off.

463
00:22:46.860 --> 00:22:49.200
Like you said, differ JS.
And we heard about the

464
00:22:49.200 --> 00:22:53.580
modernizer library before, but by
the time a book comes

465
00:22:53.580 --> 00:22:55.470
out and the tree's been
chopped down, the dead tree

466
00:22:55.470 --> 00:22:57.270
has been printed and shipped
to my house. Something new

467
00:22:57.270 --> 00:23:00.870
has come out. Where do
you go to, to know

468
00:23:00.870 --> 00:23:02.970
that I should use the
modernizer and I should use

469
00:23:02.970 --> 00:23:05.970
differ JS or, or I
should use the HX script

470
00:23:05.970 --> 00:23:08.580
loader, et cetera, et cetera.
Yeah. That's, that's actually a

471
00:23:08.580 --> 00:23:11.790
big problem. And I get
that question a lot and

472
00:23:11.880 --> 00:23:15.120
you know, there is a
repository on jQuery, you know,

473
00:23:15.150 --> 00:23:17.640
they could go to plugins,
but it's really old. And

474
00:23:17.670 --> 00:23:21.390
the team's looking to revamp
it a lot and to

475
00:23:21.390 --> 00:23:23.970
have a section like these
are recommended by the team,

476
00:23:24.090 --> 00:23:27.450
right? Here's ones that support
the jQuery theme roller, which

477
00:23:27.540 --> 00:23:29.820
allows you to switch out
the colors really easily and

478
00:23:29.820 --> 00:23:33.870
make it look nice. And
then, you know, possibly maybe

479
00:23:33.870 --> 00:23:36.660
have a rating that's from
the community. But as of

480
00:23:36.660 --> 00:23:39.780
now, it's, you know, what
I do is I first

481
00:23:39.780 --> 00:23:41.670
go to jQuery UI, cause
they have a lot of

482
00:23:41.700 --> 00:23:45.170
quality widgets that are highly
tested unit tests. And that,

483
00:23:45.190 --> 00:23:46.610
that's the thing I look
for. If I look for

484
00:23:46.610 --> 00:23:50.150
a plugin, are there unit
tests behind it? Another thing

485
00:23:50.150 --> 00:23:52.340
is, does it support the
theme roller? Because I usually

486
00:23:52.340 --> 00:23:54.620
like all my stuff to
have a similar look and

487
00:23:54.620 --> 00:23:57.050
feel. And when I switched
it out, theme, theme, roller

488
00:23:57.080 --> 00:23:59.440
theme, roller L L E
R, that's something that is

489
00:23:59.780 --> 00:24:04.100
a standard way to skin
your visual widget as a

490
00:24:04.150 --> 00:24:07.570
set of CSS classes that
jQuery UI uses behind the

491
00:24:07.570 --> 00:24:10.540
scenes. And if you can
inform to those, you could

492
00:24:10.540 --> 00:24:14.200
style your own widgets. And
then another thing, I just

493
00:24:14.200 --> 00:24:16.750
take a look at it,
Some of the key figures

494
00:24:16.780 --> 00:24:19.180
and then jQuery Community, and
you know, what are they

495
00:24:19.180 --> 00:24:23.440
developing? What are they using
in their apps? And, but

496
00:24:23.440 --> 00:24:25.180
the, the story is kind
of difficult right now, but

497
00:24:25.960 --> 00:24:28.600
that's kind of the flow
I do. And if I

498
00:24:28.600 --> 00:24:30.390
don't find what I want,
I'll just write my own,

499
00:24:30.430 --> 00:24:33.010
but I try to follow
those standards, make it the

500
00:24:33.010 --> 00:24:37.510
mobile, use the jQuery UI
widget factory, which is what

501
00:24:37.510 --> 00:24:39.940
the jQuery UI uses behind
the scenes. It's an easy

502
00:24:39.940 --> 00:24:44.440
way, easy framework to create
widgets in, in a good

503
00:24:44.590 --> 00:24:47.460
using best practices. So that's
kind of the flow. What

504
00:24:47.470 --> 00:24:49.060
do you think Dave? Well,
I want to say though,

505
00:24:49.060 --> 00:24:51.760
that that's works for jQuery
and UI widgets and stuff,

506
00:24:51.760 --> 00:24:54.250
but what about the general
stuff outside of the jQuery

507
00:24:54.250 --> 00:24:56.590
community? How do I know?
I mean, the modernizer that

508
00:24:56.590 --> 00:24:59.020
I keep hearing about is
not part of jQuery and

509
00:24:59.020 --> 00:25:02.860
the script loaders are not
necessarily part of Jake. Well,

510
00:25:02.860 --> 00:25:04.300
one thing I was going
to say, going back to

511
00:25:04.300 --> 00:25:06.880
earlier, you were talking about
how you can learn JavaScript

512
00:25:06.880 --> 00:25:10.210
by view source. Basically, even
though a lot of sites

513
00:25:10.210 --> 00:25:12.130
are, you know, minifying their
jobs, pretend it's hard to

514
00:25:12.130 --> 00:25:14.320
understand what it is. If
you see something on a

515
00:25:14.320 --> 00:25:17.290
site that you like and
you right. Click and inspect

516
00:25:17.290 --> 00:25:19.210
the element, and there's a
good chance that you're going

517
00:25:19.210 --> 00:25:22.140
to see the name of
whatever plugin they're using. I've

518
00:25:22.150 --> 00:25:25.150
found some really great stuff
that like Elijah said, and

519
00:25:25.150 --> 00:25:28.180
it was hard to find
another repository and places like

520
00:25:28.180 --> 00:25:32.410
that in terms of finding
just general JavaScript. I think

521
00:25:32.410 --> 00:25:34.240
I have to agree with
Elijah that, you know, you

522
00:25:34.630 --> 00:25:39.100
follow the people in the
community, you look at the

523
00:25:39.100 --> 00:25:41.860
people on GitHub that are
doing interesting JavaScript things and

524
00:25:41.860 --> 00:25:44.050
follow them. See what kind
of projects they're working on.

525
00:25:45.100 --> 00:25:48.400
The in terms of just
raw JavaScript that it really

526
00:25:48.400 --> 00:25:52.180
is it's explosive right now,
how much work is going

527
00:25:52.180 --> 00:25:55.570
on just the time, The
fact that there's an explosion

528
00:25:55.570 --> 00:25:57.550
of JavaScript and innovation and
that space is that kind

529
00:25:57.550 --> 00:25:59.200
of why it's so hard
to follow. I mean, there's

530
00:25:59.200 --> 00:26:02.590
no Bible that's come out
that says, this is what

531
00:26:02.590 --> 00:26:04.990
you need to know because
it'll be different next year,

532
00:26:05.320 --> 00:26:07.570
but you really took to
be an effective JavaScript program

533
00:26:07.570 --> 00:26:09.460
and you really need to
be an effective community member.

534
00:26:09.850 --> 00:26:13.270
Wouldn't you agree? Or just,
you know, follow a few

535
00:26:13.270 --> 00:26:16.090
of the community members? Well,
I mean the Forrester research

536
00:26:16.090 --> 00:26:17.770
did this thing a while
back about the different kinds

537
00:26:17.770 --> 00:26:23.170
of people in the community.
You've got critics, contributors, consumers,

538
00:26:23.470 --> 00:26:25.270
just because you're not sitting
in a room with a

539
00:26:25.270 --> 00:26:27.760
bunch of fools doing a
podcast. Like we are, it

540
00:26:27.760 --> 00:26:29.290
doesn't mean that you're not
a member of the community,

541
00:26:29.290 --> 00:26:31.060
right? I mean, a consumer
is a proper member of

542
00:26:31.060 --> 00:26:34.330
community, but you can't just
be insulated in your, in

543
00:26:34.330 --> 00:26:36.580
your basement trying to learn
JavaScript on your own because

544
00:26:36.580 --> 00:26:38.710
there's just so much innovation
going on in this space.

545
00:26:39.130 --> 00:26:41.320
Yeah. A lot of the
innovation has seemed to be

546
00:26:41.620 --> 00:26:46.530
to come from the HTML
five and CSS, three things

547
00:26:46.530 --> 00:26:49.140
that are coming out and,
and like what's a good

548
00:26:49.140 --> 00:26:51.990
way. Cause a lot of
developers want to do the

549
00:26:51.990 --> 00:26:54.120
new stuff. And so what's
a good way that you

550
00:26:54.120 --> 00:26:56.700
could use the new stuff,
but still have a way

551
00:26:56.700 --> 00:27:00.540
to support old browsers. Cause
you know, you're depending on

552
00:27:00.540 --> 00:27:02.220
your client, they may or
may not be able to

553
00:27:02.310 --> 00:27:07.290
only say Chrome 11, you
know, or whatever, or I

554
00:27:07.360 --> 00:27:11.970
nine. And, and so the
modernizer was made to address

555
00:27:11.970 --> 00:27:15.990
that because a technique, a
lot of JavaScript libraries used

556
00:27:15.990 --> 00:27:18.360
to use is to look
at the user agent, you

557
00:27:18.360 --> 00:27:21.840
know, what browser am I
on? What version, what features

558
00:27:22.230 --> 00:27:25.530
is it known to support?
And that's very problematic because

559
00:27:25.530 --> 00:27:27.480
another one will come out
and you have all these

560
00:27:27.480 --> 00:27:33.870
conflicts. And so jQuery several
releases ago, basically doesn't do

561
00:27:33.870 --> 00:27:36.600
most of those checks. They
actually do feature detection, you

562
00:27:36.600 --> 00:27:39.330
know, does this browser let
me do XYZ? And they

563
00:27:39.330 --> 00:27:41.460
test for that. And if
it does, it'll go through

564
00:27:41.460 --> 00:27:44.160
one branch of code. That's
more optimal if it doesn't

565
00:27:44.190 --> 00:27:47.460
it'll have it, if it
doesn't support this nice feature,

566
00:27:47.760 --> 00:27:50.100
then there's some other code
that's less optimal, but still

567
00:27:50.100 --> 00:27:51.630
gets the job done. And
that's how it does a

568
00:27:51.630 --> 00:27:54.180
lot of it's. That's why
it does so well. And

569
00:27:54.180 --> 00:27:57.990
so the modernizer was filling
a similar gap, but looking

570
00:27:57.990 --> 00:28:02.220
at the HTML five features
like, okay, does, does this

571
00:28:02.220 --> 00:28:05.580
browser support the placeholder attribute,
which is, you know, it's

572
00:28:05.580 --> 00:28:08.910
kinda like a watermark on
the text box and if

573
00:28:08.910 --> 00:28:11.430
it doesn't, then it basically
tells you if it does

574
00:28:11.430 --> 00:28:14.010
or doesn't. And if it
doesn't, then you could provide

575
00:28:14.010 --> 00:28:18.630
some polyfill or, or some
mechanism to simulate that like

576
00:28:18.660 --> 00:28:21.210
maybe get a jQuery plugin
that does that. And so

577
00:28:21.210 --> 00:28:24.930
modernizer allows, it was written
to fill that need of,

578
00:28:24.930 --> 00:28:28.830
I want to code really
nice looking stuff first and

579
00:28:28.830 --> 00:28:31.430
if not do something else,
That's interesting. What is the,

580
00:28:31.680 --> 00:28:34.340
the modernizer sounds like in
the U S we call

581
00:28:34.340 --> 00:28:36.260
putty or spackle. It's like,
you've got a wall with

582
00:28:36.260 --> 00:28:37.640
a bunch of cracks and
you want to smooth it

583
00:28:37.640 --> 00:28:39.920
out. You just puddy over
it kind of like, you

584
00:28:39.920 --> 00:28:43.070
know, re spackle this wall.
I thought that jQuery was

585
00:28:43.070 --> 00:28:45.560
some of that as well.
jQuery kind of spackles over

586
00:28:45.560 --> 00:28:48.170
a lot of browser incompatibilities.
How are those two libraries

587
00:28:48.170 --> 00:28:50.570
related? Well, it's funny you
say that because the, you

588
00:28:50.570 --> 00:28:54.050
heard Elijah just called the,
some of the workarounds polyfills

589
00:28:54.350 --> 00:28:56.120
I guess in the youth,
I guess that is some

590
00:28:56.120 --> 00:28:58.340
sort of, yeah, Holly polyfill
was a technical term and

591
00:28:58.340 --> 00:29:00.110
also a kind of spackle
that you can clean up

592
00:29:00.140 --> 00:29:02.210
quick cracks in your wall.
But in terms of the

593
00:29:02.210 --> 00:29:05.690
differences, I think that it's
just simply that jQuery only

594
00:29:05.690 --> 00:29:09.950
really abstracts away things like
Dom manipulation and Ajax, and

595
00:29:10.010 --> 00:29:12.290
it has a few utility
methods, but it really doesn't

596
00:29:12.290 --> 00:29:15.320
try to get into the
internals of fixing JavaScript too

597
00:29:15.320 --> 00:29:20.450
much. Whereas things like modernizer,
they're more focused on browser

598
00:29:20.450 --> 00:29:24.290
features, things that are just
absolutely missing, not things that

599
00:29:24.290 --> 00:29:26.720
you can smooth over at
all, but that you have

600
00:29:26.720 --> 00:29:28.190
to realize that, you know,
can this thing do it

601
00:29:28.190 --> 00:29:30.860
at all or not Cracks
in the wall, but literally

602
00:29:30.940 --> 00:29:33.830
holes. I don't support geolocation.
How are you gonna make

603
00:29:33.830 --> 00:29:37.310
<inaudible> make that happen for
sure. So an example might

604
00:29:37.310 --> 00:29:40.100
be, if your browser doesn't
have geolocation, I still call

605
00:29:40.100 --> 00:29:42.190
the same API APIs, except
you're going to go And

606
00:29:42.340 --> 00:29:45.100
look me up by my
IP address. So close enough.

607
00:29:46.110 --> 00:29:48.930
Yeah. And there, the great
thing is once you pair

608
00:29:48.930 --> 00:29:51.870
modernizer with some of these
polyfills are out there, a

609
00:29:51.870 --> 00:29:56.940
lot of these new features
like local storage and geolocation,

610
00:29:56.940 --> 00:29:59.850
like you mentioned, there are
libraries that allow the polyfill

611
00:30:00.030 --> 00:30:03.000
technically a polyfill is a
library that it lets you

612
00:30:03.000 --> 00:30:06.330
program against the same API
that is coming Jason to

613
00:30:06.330 --> 00:30:07.830
dot JS is another one
that probably a lot of

614
00:30:07.830 --> 00:30:10.950
people know of so that
when you use the code,

615
00:30:10.950 --> 00:30:14.940
your code is actually standards
code. And if the compatibility

616
00:30:14.940 --> 00:30:17.970
layer is necessary, then it's
used and you use the

617
00:30:17.970 --> 00:30:21.840
less efficient maybe API call,
like you mentioned. And then

618
00:30:21.900 --> 00:30:24.270
automatically, if that code is
running in a newer browser,

619
00:30:24.270 --> 00:30:25.750
then it's just going to
go ahead and use the

620
00:30:25.770 --> 00:30:29.520
standards. And so that's, that's
where modernizer differs because jQuery

621
00:30:29.520 --> 00:30:31.350
is going to give you
standard functionality, no matter what

622
00:30:31.640 --> 00:30:34.170
you can count on everything
that jQuery does, it will

623
00:30:34.170 --> 00:30:36.690
do in every browser. Whereas
this is just giving you

624
00:30:36.930 --> 00:30:40.080
something like modernizers just giving
you the ability to sort

625
00:30:40.080 --> 00:30:42.510
of make some decisions on
how to implement newer stuff.

626
00:30:43.170 --> 00:30:44.790
Cool. All right. So I
need to go check out

627
00:30:44.790 --> 00:30:49.620
Douglas Crockfords JavaScript. The good
parts. Paul Irish is a

628
00:30:49.830 --> 00:30:52.110
blog post about things that
he learned. Two blog posts.

629
00:30:52.110 --> 00:30:54.060
Was it nine things and
11 things and learned about

630
00:30:54.060 --> 00:30:57.360
looking at the jQuery stores.
I'd recommend going to the

631
00:30:57.360 --> 00:31:00.210
get hub for the modernizer
project. He has a Wiki

632
00:31:00.210 --> 00:31:03.450
page there. It has a
long list. It's really, really

633
00:31:03.450 --> 00:31:07.440
interesting stuff. Fantastic. And of
course, follow Elijah. He tweets

634
00:31:08.340 --> 00:31:10.140
tons of great information about
you. You go and you

635
00:31:10.140 --> 00:31:12.900
search Twitter for jQuery or,
and, or JavaScript. You will

636
00:31:12.900 --> 00:31:16.140
very likely find that both
of you guys several thousand

637
00:31:16.140 --> 00:31:19.140
times a day, at least.
Alright. Well, I really appreciate

638
00:31:19.140 --> 00:31:20.760
you taking the time to
chat with me today. It

639
00:31:20.760 --> 00:31:23.970
was fun. This has been
another episode of Hansel minutes

640
00:31:23.970 --> 00:31:25.470
and I'll see you again
next week.

