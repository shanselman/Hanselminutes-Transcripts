WEBVTT FILE

1
00:00:00.480 --> 00:00:02.580
This episode of Hansel minutes
is brought to you by

2
00:00:02.610 --> 00:00:07.620
Telerx dev craft quarter one
2014. Online conference this Thursday,

3
00:00:07.680 --> 00:00:12.690
March 6th. Learn how dev craft
the most comprehensive dotnet toolbox

4
00:00:13.110 --> 00:00:16.620
can help you build.net apps
twice as fast. Sign up

5
00:00:16.650 --> 00:00:19.230
to see the exciting new
features and action, and for

6
00:00:19.230 --> 00:00:21.720
a chance to win one
of 10 dev craft complete

7
00:00:21.720 --> 00:00:45.620
licenses, registration information is@tellerikdotcomslashdevcraftfromhanselminutes.com. It's
Hansel minutes, a weekly discussion

8
00:00:45.620 --> 00:00:49.850
with web developer and technologist
Scott Hanselman. This is Lawrence Ryan

9
00:00:49.850 --> 00:00:56.600
announcing show number four 12
recorded live Thursday, February 20th, 2014. This

10
00:00:56.600 --> 00:00:59.090
episode of Hansel minutes is
brought to you by teller

11
00:00:59.540 --> 00:01:03.320
offering the best in developer
tools and support online at

12
00:01:04.490 --> 00:01:09.830
<inaudible> dot com and by
franklins.net, makers of gesture are

13
00:01:09.830 --> 00:01:13.670
powerful gesture, recording and recognition
system for Microsoft connect for

14
00:01:13.670 --> 00:01:19.550
windows developers details. Add gesture,
ak.com. In this episode, Scott

15
00:01:19.550 --> 00:01:23.420
talks with full stack developer
with Shane McBean about JavaScript

16
00:01:23.420 --> 00:01:28.610
unit testing with Jasmine. Hi,
this is Scott Hanselman. This

17
00:01:28.610 --> 00:01:30.200
is another episode of Hansel
minutes, and I'm here in

18
00:01:30.200 --> 00:01:33.590
San Diego at the jQuery
conference. And I'm talking with

19
00:01:33.590 --> 00:01:37.070
Rashane McBean, she's a full
stack web developer, and she

20
00:01:37.070 --> 00:01:39.980
just came off the stage
giving a talk about JavaScript

21
00:01:40.040 --> 00:01:42.710
unit testing. Thanks for chatting
with me, not a problem,

22
00:01:42.710 --> 00:01:47.060
Scott. So JavaScript unit testing,
I get unit testing. That's

23
00:01:47.060 --> 00:01:52.110
cool. And I get JavaScript,
but somehow a JavaScript can,

24
00:01:52.170 --> 00:01:53.750
can run in so many
different places. It can run

25
00:01:53.750 --> 00:01:55.730
in the browser. You can
run the console labs and

26
00:01:55.730 --> 00:02:00.470
node. You can host V8
the Chrome JavaScript engine. Somehow

27
00:02:00.470 --> 00:02:04.100
it just seems more daunting
when you take JavaScript plus

28
00:02:04.100 --> 00:02:06.290
unit testing, it put them
together. And I have to

29
00:02:06.290 --> 00:02:08.840
admit that I don't do
a lot of JavaScript unit

30
00:02:08.870 --> 00:02:13.910
testing. Is that back? Yes
and no, depending on if

31
00:02:13.910 --> 00:02:16.550
you're working with a team
or something, you plan to

32
00:02:16.550 --> 00:02:19.580
come back to you in
a couple of months that

33
00:02:19.580 --> 00:02:21.560
it might get bad. Cause
you might just not remember

34
00:02:21.560 --> 00:02:23.990
what you wrote or the
intention of it. Yeah. So

35
00:02:24.130 --> 00:02:26.120
it's just as important in
JavaScript than it is in

36
00:02:26.120 --> 00:02:30.410
any other language. Yes. And
you, your presentation, you talked

37
00:02:30.410 --> 00:02:33.560
about Jasmine, that's one of
many different choices that I've

38
00:02:33.560 --> 00:02:37.640
got available to me. Correct.
And I chose Jasmine cause

39
00:02:37.640 --> 00:02:42.710
it's very approachable from a
behavior unit driven perspective and

40
00:02:42.830 --> 00:02:46.370
it kind of forces you
to start taking your functions

41
00:02:46.370 --> 00:02:50.150
and making them more object,
literal, friendly, and writing more

42
00:02:50.150 --> 00:02:52.580
testable code. So you will
want to touch to a

43
00:02:52.580 --> 00:02:56.120
code. So I can't just
go and take existing JavaScript

44
00:02:56.120 --> 00:02:58.790
really. And just start like
slap intestine, like just putting

45
00:02:58.790 --> 00:03:02.100
asserts. It's a little different
than that, Right? Yeah. If

46
00:03:02.100 --> 00:03:05.190
you have something that function
within a few functions, it

47
00:03:05.190 --> 00:03:10.380
will be hard to test
that that one expectation actually

48
00:03:10.620 --> 00:03:14.160
happen. And you said this
is more behavior driven, more

49
00:03:14.160 --> 00:03:19.020
BDD than TDD. Right? Right.
The way it looks, it's

50
00:03:19.020 --> 00:03:22.560
like you're describing that I
have this function and when

51
00:03:22.560 --> 00:03:25.440
I come to it and
interact with it, that one

52
00:03:25.440 --> 00:03:28.920
particular thing, or several things
may happen depending on what

53
00:03:28.920 --> 00:03:32.820
is in the function. It
seems like I came from

54
00:03:32.820 --> 00:03:35.040
a world with more TDD
and I kept saying things

55
00:03:35.040 --> 00:03:39.150
like assert assert. And now
with BDD, it's much more

56
00:03:39.150 --> 00:03:42.090
kind of story-driven it's in
you, you you're encouraged to

57
00:03:42.090 --> 00:03:45.270
use sentences inside of your
expectations. That really describe what

58
00:03:45.270 --> 00:03:49.680
your intent was. Correct. Yeah.
You're definitely describing something. That's

59
00:03:49.680 --> 00:03:52.800
very English like to someone
coming to your application, you're

60
00:03:52.800 --> 00:03:56.310
describing the function and you're
setting out these expectations and

61
00:03:56.310 --> 00:03:59.340
seeing if they match particular
outcomes, whether they're true or

62
00:03:59.340 --> 00:04:03.360
false. And now Jasmine is
not necessarily specific to note.

63
00:04:03.360 --> 00:04:05.790
Right? I could use this
with any backend system. This

64
00:04:05.790 --> 00:04:08.040
is really about testing the
Java script that runs in

65
00:04:08.040 --> 00:04:13.260
your client browser, right? Correct.
It's very backend agnostic to

66
00:04:13.260 --> 00:04:15.570
what you're doing. It's all
about testing, what the user's

67
00:04:15.570 --> 00:04:18.870
interacting with in the browser.
And is it a whole

68
00:04:19.230 --> 00:04:22.110
ecosystem of stuff with plugins
like jQuery or does it,

69
00:04:22.110 --> 00:04:23.940
do I really need to
get started? Do I just

70
00:04:23.940 --> 00:04:26.790
need the main Jasmine stuff
To get started? You'll just

71
00:04:26.790 --> 00:04:32.310
need the main Jasmine, the
framework itself doesn't revolve around

72
00:04:32.340 --> 00:04:35.850
the Dom or doing anything
Ajax. Even if your application

73
00:04:35.850 --> 00:04:40.590
needs that you're just testing
your vanilla JavaScript without all

74
00:04:40.590 --> 00:04:43.200
the other layers. But if
you want to test things

75
00:04:43.200 --> 00:04:45.840
like that, there are many
plugins from the community. Popular

76
00:04:45.840 --> 00:04:48.570
ones are Jasmine jQuery, where
you can test like the

77
00:04:48.570 --> 00:04:53.880
events, interactions that are happening
on the page. Then there's

78
00:04:54.240 --> 00:04:57.690
Jasmine Ajax, which tests all
your Ajax and persistence that

79
00:04:57.690 --> 00:05:01.470
may be happening for third
party servers or your I've

80
00:05:01.470 --> 00:05:04.560
done a lot of integration
testing. So on the like

81
00:05:04.590 --> 00:05:08.490
automating the browser, like I
call it putting the browser

82
00:05:08.490 --> 00:05:11.220
on a string, like a
puppet. This is not, that

83
00:05:11.250 --> 00:05:13.410
is that right? This is
not like selenium. No, it's

84
00:05:13.410 --> 00:05:16.350
not like saline in that
sense. Selenium fires up a

85
00:05:16.350 --> 00:05:18.690
whole web browser and test
your app from start to

86
00:05:18.690 --> 00:05:22.560
finish. What Jasmine gives you
is a way to test

87
00:05:22.800 --> 00:05:26.940
isolated client interactions on the
page, on the subset of

88
00:05:26.940 --> 00:05:28.920
your page. So you don't
have to worry about firing

89
00:05:28.920 --> 00:05:31.290
up the whole browser for
that. If you only cared

90
00:05:31.290 --> 00:05:35.520
about what's inter happening on
this particular interaction. Okay. So

91
00:05:35.790 --> 00:05:39.060
I'm not necessarily going to
bring up my web server

92
00:05:39.060 --> 00:05:43.050
and have server-side generated HTML
come across the wire and

93
00:05:43.050 --> 00:05:45.600
test that like, Right. Yeah.
You don't have to worry

94
00:05:45.600 --> 00:05:49.110
about like, cause with selenium
tests, you're firing up the

95
00:05:49.110 --> 00:05:51.240
whole application and you're waiting
for the database and all

96
00:05:51.240 --> 00:05:53.550
those other parts to load
up just to probably test

97
00:05:53.550 --> 00:05:56.070
a click event when Jasmine
kind of gives you, gives

98
00:05:56.070 --> 00:06:00.160
you that to do without
all of the extras. Okay.

99
00:06:00.160 --> 00:06:02.680
So in the integration example,
you just said like a

100
00:06:02.680 --> 00:06:05.200
click event with something like
a selenium or an integration

101
00:06:05.200 --> 00:06:08.950
test, I hit click. There's
an, there's a result of

102
00:06:08.950 --> 00:06:11.500
that, which is the Ajax
call. It goes to a

103
00:06:11.500 --> 00:06:14.050
real database and really does
stuff. And the results come

104
00:06:14.050 --> 00:06:17.470
back and the page changes,
that's a full stack integration

105
00:06:17.500 --> 00:06:20.170
test, right? What's the kind
of stuff that I would

106
00:06:20.170 --> 00:06:24.640
check with Jasmine with an
enclave. So if we're just

107
00:06:24.640 --> 00:06:27.520
worrying about the on click
events, if your users coming

108
00:06:27.520 --> 00:06:30.040
to the page and they
needed a drop down, you

109
00:06:30.040 --> 00:06:32.770
don't necessarily want the whole
selenium browser to do that.

110
00:06:32.770 --> 00:06:35.950
If you're just checking for
interactions. So what the plugin

111
00:06:35.950 --> 00:06:38.650
Jasmine J gives you is
the ability to click on

112
00:06:38.650 --> 00:06:42.610
things, click on the selectors
and check the expectation of

113
00:06:42.610 --> 00:06:45.820
the outcome. Did the dropdown
show, did it stay hidden?

114
00:06:46.420 --> 00:06:50.050
Are these things actually present
now on the page? Whether

115
00:06:50.050 --> 00:06:54.010
or not you're serving back
any data to your database,

116
00:06:54.010 --> 00:06:57.040
you can test those things
right with Jesse, But that

117
00:06:57.040 --> 00:06:59.050
would probably be a separate
test. Like you would break

118
00:06:59.050 --> 00:07:01.090
it down into a piece.
Like if I click this

119
00:07:01.090 --> 00:07:04.060
button, it makes this dropdown
up here. And then I

120
00:07:04.060 --> 00:07:07.240
check the visibility status of
the dropdown. That's one thing

121
00:07:07.420 --> 00:07:09.400
to expect and trust, right?
Yeah. You would want to,

122
00:07:09.400 --> 00:07:12.970
in that scenario, individually test,
like I clicked it, it

123
00:07:12.970 --> 00:07:18.070
opened now that it's open
is the ma is my

124
00:07:18.070 --> 00:07:21.400
name visible to see in
this dropdown is a second

125
00:07:21.400 --> 00:07:24.310
test you can have in
there. And then you want

126
00:07:24.310 --> 00:07:26.650
to, it forces your code
to kind of be granular

127
00:07:26.650 --> 00:07:29.470
in a sense that all
these functions for this particular

128
00:07:29.470 --> 00:07:33.130
event can work without aren't
dependent on the other one.

129
00:07:33.610 --> 00:07:35.980
Okay. So this sounds like
this is going to push

130
00:07:36.010 --> 00:07:39.550
me towards a certain style
of writing JavaScript, Right. And

131
00:07:39.640 --> 00:07:43.420
pushes you to writing more
modular reusable code. So if

132
00:07:43.420 --> 00:07:46.810
I needed events for one
page, they're easily available to

133
00:07:46.810 --> 00:07:48.460
me to use on another
page and I don't have

134
00:07:48.460 --> 00:07:51.370
to write a long 20
line function all over again.

135
00:07:51.880 --> 00:07:54.700
And it sounds like since
there's, there's really no UI,

136
00:07:54.730 --> 00:07:57.370
this is all happening. Just
testing the JavaScript. It's not

137
00:07:57.730 --> 00:08:00.910
talking to my backend server
that I would write a

138
00:08:00.910 --> 00:08:04.210
click handler and make it
a function, as opposed to

139
00:08:04.210 --> 00:08:06.340
just having a bunch of
inline code inside of a

140
00:08:06.340 --> 00:08:09.820
click handler. Like I want
to abstract away my interactions,

141
00:08:10.330 --> 00:08:14.560
Right? Yeah. Yeah. You, you
wouldn't want to click something

142
00:08:14.560 --> 00:08:17.440
and it triggering like five
more things inside there that

143
00:08:17.440 --> 00:08:20.230
you can test it. It
is forcing your, all those

144
00:08:20.230 --> 00:08:25.030
separate interactions to live independently
and therefore you have more

145
00:08:25.030 --> 00:08:27.940
modular and reusable code. So
more kind of single responsibility

146
00:08:27.940 --> 00:08:30.700
principle. Yeah. Yeah. Okay. All
right. So let's think about

147
00:08:30.700 --> 00:08:32.530
this from a hello world
perspective. If I've got a

148
00:08:32.530 --> 00:08:35.080
hello world function that returns
a string at the most

149
00:08:35.080 --> 00:08:39.250
abstract level, I've got a
JavaScript function that returns a

150
00:08:39.250 --> 00:08:42.010
string. And I want to
test that, what do I,

151
00:08:42.040 --> 00:08:46.300
what do I need to
do? So in that instance,

152
00:08:46.420 --> 00:08:49.480
you have your function, hello
world, you would describe it,

153
00:08:50.020 --> 00:08:53.350
which Jasmine, and then you
would set in the spec

154
00:08:53.350 --> 00:08:55.800
what an expectation you want
to come back. So describe

155
00:08:55.800 --> 00:08:57.570
as a function Or is
it a library or what

156
00:08:57.570 --> 00:08:59.510
does it describe? So describe
as given to you from

157
00:08:59.510 --> 00:09:02.510
Jasmine, it's how you describe
your test suite or your

158
00:09:02.510 --> 00:09:05.420
particular function in this scenario.
And then you have these

159
00:09:05.420 --> 00:09:08.120
things called it blocks that
are testing a single component

160
00:09:08.180 --> 00:09:11.720
of your function. So with
hello world, if I only

161
00:09:11.720 --> 00:09:14.390
wanted a test that I
was getting back the world

162
00:09:14.420 --> 00:09:17.480
of hello, I could set
it up as I'm describing

163
00:09:17.480 --> 00:09:20.900
hello or function inside of
it. I expect it to

164
00:09:20.900 --> 00:09:24.620
return world. And my actual
expectation that I set up,

165
00:09:24.650 --> 00:09:27.290
that's also given to you
from Jasmine, we'll expect when

166
00:09:27.290 --> 00:09:30.770
I call this function, that
it contains, contains a matcher

167
00:09:30.770 --> 00:09:33.620
from Jasmine and gives you
World, okay. So let's break

168
00:09:33.620 --> 00:09:35.510
that down cause there's a
lot of really good information

169
00:09:35.510 --> 00:09:39.380
in there. So when you
say describe that's a method,

170
00:09:39.410 --> 00:09:41.810
and then within that you
have a string, which is

171
00:09:41.810 --> 00:09:45.440
your description of that specification,
that yes, that larger method

172
00:09:45.440 --> 00:09:48.320
that we're checking, and then
you have an anonymous function.

173
00:09:48.800 --> 00:09:51.920
So you should describe, you
know, some string anonymous function.

174
00:09:51.920 --> 00:09:55.340
And then within that expect
is also a method which

175
00:09:55.340 --> 00:09:59.510
then takes other anonymous functions.
Right? So yeah, you have

176
00:09:59.510 --> 00:10:02.840
a few anonymous functions going
on there from a higher

177
00:10:02.840 --> 00:10:05.900
level that describe, which takes
a string of any nature

178
00:10:06.410 --> 00:10:08.750
by most convention. People like
to put the name of

179
00:10:08.750 --> 00:10:12.290
the function they're describing, OK.
Then in the it block,

180
00:10:12.290 --> 00:10:16.640
that's taken another anonymous function.
And that that's usually describing

181
00:10:16.640 --> 00:10:20.000
that one particular component you're
testing and this case returning

182
00:10:20.210 --> 00:10:23.180
back to the string world.
And that expectation given to

183
00:10:23.180 --> 00:10:27.140
you from, from the framework
is also going to actually

184
00:10:27.140 --> 00:10:29.750
now call to your actual
hello world function that exists

185
00:10:29.750 --> 00:10:33.080
somewhere else. And then it's
going to match that against

186
00:10:33.080 --> 00:10:35.720
what you're trying to prove
is true or false. And

187
00:10:35.720 --> 00:10:39.170
this instance, we want to
see if the matcher contains

188
00:10:39.380 --> 00:10:43.010
the word hello, and it
will fail our pass accordingly.

189
00:10:43.130 --> 00:10:44.960
Okay. So let's go from,
describe into the, and you

190
00:10:44.960 --> 00:10:48.590
keep saying, get block. This
is another method that does

191
00:10:48.590 --> 00:10:51.080
another function within it. And
the block is, is it

192
00:10:51.080 --> 00:10:53.900
an anonymous function? Yeah, the
iBlock is an anonymous function

193
00:10:53.900 --> 00:10:58.100
that will actually contain the
single component, your tests. Okay.

194
00:10:58.490 --> 00:11:02.090
And then where does the
first English sentence appear? Is

195
00:11:02.090 --> 00:11:04.910
it really inside of that?
It block? The very first

196
00:11:04.910 --> 00:11:08.510
one is in the described
block, which is testing the

197
00:11:08.510 --> 00:11:11.540
whole component of your Function.
So where would I say,

198
00:11:11.540 --> 00:11:16.490
like, you know, hello world
returns, the string world, where

199
00:11:16.490 --> 00:11:19.580
does that English sentence appear?
That particular one will then

200
00:11:19.580 --> 00:11:22.880
be in the it block
can testing that particular account.

201
00:11:23.360 --> 00:11:26.930
Okay. So you're basically saying,
you know, it's, it was

202
00:11:26.960 --> 00:11:28.850
like, it is the case
is kind of implied, right?

203
00:11:28.850 --> 00:11:31.460
It is the case that
hello world returns the string

204
00:11:32.210 --> 00:11:34.910
and then expect, and then
do you have another English

205
00:11:34.910 --> 00:11:37.760
sentence? No. So when you
get down to the expect

206
00:11:37.760 --> 00:11:41.270
level, now that's actually calling
out to your hello world

207
00:11:41.270 --> 00:11:45.380
function and then it will
pass a type of match

208
00:11:45.380 --> 00:11:47.960
or in this case, the
contain and see if it

209
00:11:47.960 --> 00:11:52.010
actually returns backward And then
matchers, that's a Jasmine ism

210
00:11:52.370 --> 00:11:55.660
where a, it's a method
that I use to express

211
00:11:55.660 --> 00:11:58.720
my expectation. Is that right?
Correct. Okay. And what are

212
00:11:58.720 --> 00:12:03.450
some examples of a matcher?
So I'm back playing off

213
00:12:03.450 --> 00:12:05.880
of the whole world. You
can have expect hello world

214
00:12:05.880 --> 00:12:09.540
to equal hello world. That
the whole string is actually

215
00:12:09.540 --> 00:12:12.360
containing hello world. Instead of
just contained to a world.

216
00:12:13.170 --> 00:12:16.050
If your function was involved
in the math, you can

217
00:12:16.050 --> 00:12:19.470
can check if it equal
to anything, you can also

218
00:12:19.470 --> 00:12:21.870
negate these functions by putting
not before them. If you

219
00:12:21.870 --> 00:12:25.440
wanted to prove that something
was actually false, I would

220
00:12:25.530 --> 00:12:27.870
actually have the word not.
So it's like, you know,

221
00:12:27.890 --> 00:12:32.670
hello world, open-close dot, not
dot. And then keep going.

222
00:12:33.180 --> 00:12:37.440
I expect hello world to
not equal hello universe. It

223
00:12:37.440 --> 00:12:42.600
was a very fluent interface.
Yes. And then the jQuery,

224
00:12:43.380 --> 00:12:46.830
Jasmine dot jQuery that it
adds additional matters. Is that

225
00:12:46.830 --> 00:12:51.360
how that plugin extends the
system, Right? So that library

226
00:12:51.360 --> 00:12:53.340
extends the system and you
can also extend the system

227
00:12:53.340 --> 00:12:56.550
yourself. If you find that
your application needs its own

228
00:12:56.550 --> 00:12:59.370
set of matters, that Jasmine,
the framework itself gives you

229
00:12:59.370 --> 00:13:02.190
that ability to the Jasmine
J gray one is giving

230
00:13:02.190 --> 00:13:06.450
you some common custom CSS
matches that you typically use

231
00:13:06.480 --> 00:13:09.990
in the, from the jQuery
framework. Like you want to

232
00:13:09.990 --> 00:13:12.720
check if something was hidden
on the page or if

233
00:13:12.720 --> 00:13:16.260
it exists, does it have
CSS? The, the list goes

234
00:13:16.260 --> 00:13:18.690
on and on and you
can find more at the

235
00:13:18.690 --> 00:13:22.500
GitHub page, Jasmine Jaker. So
Jasmine jQuery, it sounds like

236
00:13:22.950 --> 00:13:26.400
it, it makes Jasmine kind
of speak the language at

237
00:13:26.400 --> 00:13:29.190
the level of granularity that
a jQuery person would expect.

238
00:13:29.400 --> 00:13:32.610
Right. Okay. And is it,
is that adding like lots

239
00:13:32.610 --> 00:13:35.190
of things, like is something
visible or not and bringing

240
00:13:35.190 --> 00:13:39.300
in the CSS, matching the
selector engine? Yeah. So as

241
00:13:39.300 --> 00:13:43.320
long as you're using jQuery
itself, outside of testing, once

242
00:13:43.320 --> 00:13:48.060
you start incorporating testing, you
can use the, anything from

243
00:13:48.060 --> 00:13:50.940
the jQuery API itself to
test within your test. Like

244
00:13:50.970 --> 00:13:53.580
you find an element on
the page and you actually

245
00:13:53.580 --> 00:13:55.980
want to check if it
was visible. So you can

246
00:13:55.980 --> 00:13:59.310
use jQuery itself. You can
use like the dot find.

247
00:13:59.370 --> 00:14:02.160
If you're looking for elements
on your page and then

248
00:14:02.160 --> 00:14:04.950
you can actually then use
the custom matches. You're getting

249
00:14:04.950 --> 00:14:08.100
from Jasmine jQuery to check
that something was visible or

250
00:14:08.100 --> 00:14:11.850
it had CSS. Now, can
I mock things out if

251
00:14:11.850 --> 00:14:14.130
I want to bring some
fake data back? Like if

252
00:14:14.130 --> 00:14:15.840
I have have a function
that is going to go

253
00:14:15.840 --> 00:14:18.060
off and make an Ajax
call, I really want to

254
00:14:18.060 --> 00:14:20.730
test the result of that,
you know, can I return

255
00:14:20.730 --> 00:14:24.810
fake data? Yeah. So there's
this concept of fixtures. There

256
00:14:24.810 --> 00:14:27.150
are Jason ones where you
can model out fake data,

257
00:14:27.150 --> 00:14:30.900
depending on if it's from
your brow, from coming from

258
00:14:30.900 --> 00:14:33.750
your application, the database itself,
or coming from a third

259
00:14:33.750 --> 00:14:37.080
party service, then there's HTML
fixtures as well, where you're

260
00:14:37.620 --> 00:14:40.380
all mocking out your templates
that you're using in various

261
00:14:40.380 --> 00:14:42.780
places that you want to
test with Jasmine. And those

262
00:14:42.780 --> 00:14:44.910
are clients. I tip lights,
a candle Of ours. Yeah.

263
00:14:44.970 --> 00:14:49.710
Handlebars, regular HTML. Okay. And
if, even though we don't

264
00:14:49.710 --> 00:14:53.300
do a lot of HTML
fixture work, you're basically saying

265
00:14:53.300 --> 00:14:56.660
that I would load those
fixtures. Like a fixture might

266
00:14:56.660 --> 00:14:59.330
be like an HTML file
that represents a small amount

267
00:14:59.360 --> 00:15:01.490
of, of a, of a,
of a handlebars template or

268
00:15:01.490 --> 00:15:06.580
something like that. Yeah. You're
typically testing like partial views

269
00:15:06.580 --> 00:15:09.550
on the page. You don't
need to rerender your whole

270
00:15:09.550 --> 00:15:13.270
page for this fixture. So
those would be isolated partials

271
00:15:13.270 --> 00:15:17.020
in a fixtures folder. And
then what you would do

272
00:15:17.020 --> 00:15:20.920
is you would load that
up when you're setting up

273
00:15:21.100 --> 00:15:23.800
the suite. So back to
the described blocks I was

274
00:15:23.800 --> 00:15:28.060
describing. Right. And before that,
there is a concept of

275
00:15:28.060 --> 00:15:30.220
before each where you can
have a lot of mock

276
00:15:30.220 --> 00:15:32.590
pre data. So in there
is where you would typically

277
00:15:32.590 --> 00:15:35.590
load any partials that you're
testing out. If it's any

278
00:15:36.430 --> 00:15:38.260
fake Jace on data that
you want to make sure

279
00:15:38.260 --> 00:15:40.180
is in there, you load
them up in a before

280
00:15:40.180 --> 00:15:42.490
each. And you can also
clear, clear them out what

281
00:15:42.490 --> 00:15:44.740
an after each, when you
want to start the next

282
00:15:44.740 --> 00:15:48.040
test with a clean slate.
Okay. Okay. So before each

283
00:15:48.040 --> 00:15:51.100
and after each are well
known function names, and if

284
00:15:51.100 --> 00:15:53.980
they had lived within that
described block, they get called

285
00:15:53.980 --> 00:15:58.450
automatically for each Before every
it block. Yeah. Okay. So

286
00:15:58.450 --> 00:16:00.940
then in the context of
an old school TDD person

287
00:16:00.940 --> 00:16:02.590
like me, I think of
that as being like set

288
00:16:02.590 --> 00:16:06.520
up and tear down. Okay.
And then I can bring

289
00:16:06.520 --> 00:16:09.250
in a and change the
scope of things. So like

290
00:16:09.250 --> 00:16:11.110
if I wanted to bring
in any variable that I

291
00:16:11.110 --> 00:16:13.930
make in the, in the,
before each it's available to

292
00:16:13.930 --> 00:16:18.520
me within the Jasmine test.
Correct. Okay. And when I'm

293
00:16:18.520 --> 00:16:21.490
running these, am I doing
this with like the command

294
00:16:21.490 --> 00:16:23.320
line with a runner, like
a node runner of some

295
00:16:23.320 --> 00:16:26.560
kind or Depends. If so,
if depending on how you

296
00:16:26.560 --> 00:16:30.010
set up your local testing
development, you can configure grunt

297
00:16:30.010 --> 00:16:32.530
to do those things. But
if you're very new to

298
00:16:32.530 --> 00:16:36.130
testing and you feel like
automation scares you, you can

299
00:16:36.130 --> 00:16:38.830
just run these directly in
your browser by loading up

300
00:16:38.830 --> 00:16:42.190
a test runner that Jasmine
gives you. And it highlights

301
00:16:42.190 --> 00:16:45.010
things in green or red,
depending on where they're failing,

302
00:16:45.220 --> 00:16:47.680
but that's more of a
manual way to test things.

303
00:16:48.100 --> 00:16:50.770
Once you first start just
getting started, you'll keep refreshing

304
00:16:50.770 --> 00:16:53.800
the browser. But automation is
a thing that all am.

305
00:16:53.800 --> 00:16:55.660
If you're using Ruby that
you can set up rate

306
00:16:55.660 --> 00:16:58.330
tax for that, if you're
using grunt, you can configure

307
00:16:58.330 --> 00:17:01.510
that and other Jasmine's other
JavaScript tests to do that.

308
00:17:01.690 --> 00:17:03.760
Okay. So as a, as
a beginner, I think that

309
00:17:03.760 --> 00:17:05.530
I would probably want to
see it for a while

310
00:17:05.530 --> 00:17:07.960
and see the red and
green. And it just feels

311
00:17:07.960 --> 00:17:11.230
more real. And then once
I, okay, like I get

312
00:17:11.230 --> 00:17:13.120
it, I'm able to add
some and then I would

313
00:17:13.120 --> 00:17:16.030
graduate. You would graduate to
like putting that in your

314
00:17:16.030 --> 00:17:18.640
terminal. So you can only
see all red or green

315
00:17:18.640 --> 00:17:21.220
dots depending on how you
configure it. And, but you

316
00:17:21.220 --> 00:17:23.680
can also see like English
sentences, you're almost building English

317
00:17:23.680 --> 00:17:25.750
sentences. Cause I noticed that
you have a lot in,

318
00:17:25.750 --> 00:17:26.860
in the test that you
showed me, you have a

319
00:17:26.860 --> 00:17:28.900
lot of, a lot of,
you know, I say English.

320
00:17:28.900 --> 00:17:31.630
I mean, what I mean
by that is prose. You

321
00:17:31.630 --> 00:17:33.580
know, you're not just putting
like one word here, like

322
00:17:34.030 --> 00:17:37.810
expect it works. You know,
it didn't, you literally had

323
00:17:37.810 --> 00:17:40.030
like, you know, it is
the case that the button

324
00:17:40.030 --> 00:17:43.270
is, is visible. So are
you, are you stringing those

325
00:17:43.270 --> 00:17:45.430
sentences together so that when
you run that test at

326
00:17:45.430 --> 00:17:46.780
the command line, you're going
to get like a whole

327
00:17:46.780 --> 00:17:48.790
story about whether or not
the thing worked or not.

328
00:17:49.110 --> 00:17:51.600
Right? So yeah, When it
starts from that higher level,

329
00:17:51.600 --> 00:17:54.660
like we described the hello
world and then it will

330
00:17:54.660 --> 00:17:57.390
concatenate onto it. When, if
you're running them in the

331
00:17:57.510 --> 00:18:00.450
browser will concatenate the it
block of eight should print

332
00:18:00.450 --> 00:18:04.590
out, hello world. If you
had a further test that

333
00:18:04.590 --> 00:18:07.710
said it should only contain
world, it keeps concatenating anything

334
00:18:07.710 --> 00:18:10.380
that is an it block
scope to anything that is

335
00:18:10.380 --> 00:18:13.940
a described law. And it
sounds like you can have

336
00:18:13.940 --> 00:18:15.620
as many of these events
as you want. And these

337
00:18:15.620 --> 00:18:19.760
expects, Right. You can nest
nest year sweet. So they

338
00:18:19.760 --> 00:18:24.200
looked a lot more cleaner.
You can have multiple describes

339
00:18:24.320 --> 00:18:29.600
within a parent describe and
multiple it's within a singular

340
00:18:29.600 --> 00:18:33.840
described lot Can have multiple
nested describes. So what, what,

341
00:18:33.840 --> 00:18:35.210
what would be an example
of why I would want

342
00:18:35.210 --> 00:18:37.550
to do something like that?
So if you had a

343
00:18:37.550 --> 00:18:40.430
tool tip on the page
tool tips, typically opening close.

344
00:18:40.880 --> 00:18:44.900
So from a higher level,
you'll describe the tool tip,

345
00:18:45.290 --> 00:18:47.900
and then you want to
break down to now I'm

346
00:18:47.900 --> 00:18:50.300
interacting with a tool tip.
So that would be your

347
00:18:50.300 --> 00:18:53.600
second described. So then within
there you can nest that

348
00:18:53.720 --> 00:18:56.630
now I'm interacting with it,
but am I interacting with

349
00:18:56.670 --> 00:18:59.600
when it's open or is
it closed? So within the

350
00:18:59.690 --> 00:19:02.810
interacting block of the describe,
you can have an open

351
00:19:02.810 --> 00:19:05.480
or a close and it
reads down nice and clean

352
00:19:05.480 --> 00:19:09.050
that I've approached this. It
was closed. Here's what happens

353
00:19:09.500 --> 00:19:11.990
when I interact with a
close tool tip. And here's

354
00:19:11.990 --> 00:19:14.630
what happens when I interact
with an open tool. Oh,

355
00:19:14.630 --> 00:19:17.570
okay. So I was initially
thinking that this was a

356
00:19:17.570 --> 00:19:20.420
way to have too many
expectations and kind of overload

357
00:19:20.420 --> 00:19:22.580
the test. But you're, you're
saying this is really more

358
00:19:22.580 --> 00:19:25.220
of a structure thing. Like
when you nest CSS rules

359
00:19:25.790 --> 00:19:29.330
and indent them just to
keep everything all together. Correct.

360
00:19:30.050 --> 00:19:31.760
And then can I, when
I do the test runner,

361
00:19:31.760 --> 00:19:33.740
can I go and just
run like one and just

362
00:19:33.740 --> 00:19:35.000
say like, I don't want
to run the whole thing.

363
00:19:35.000 --> 00:19:37.370
I just want to run
this one. Describe and down

364
00:19:38.300 --> 00:19:40.490
that might be useful. Oh
yeah. I believe you can

365
00:19:40.490 --> 00:19:42.380
do that when you're like
automated things. But if you're

366
00:19:42.380 --> 00:19:46.130
just refreshing the console, it's
just going to refresh everything.

367
00:19:46.430 --> 00:19:50.240
You can also call 'em
when you have the test

368
00:19:50.240 --> 00:19:52.400
runner open, it'll load up
all your tests, but you

369
00:19:52.400 --> 00:19:55.580
can click on them actually.
And then they'll open like

370
00:19:55.580 --> 00:19:59.390
its own window on the
page where you're only looking

371
00:19:59.390 --> 00:20:01.670
at that singular test and
you can keep refreshing that

372
00:20:01.670 --> 00:20:04.160
if particularly that was the
only one. Yeah. And if

373
00:20:04.160 --> 00:20:05.780
it's a problem to run
all of your tests all

374
00:20:05.780 --> 00:20:07.250
the time, you can just
say, I want to focus

375
00:20:07.250 --> 00:20:10.340
on this one thing. Yeah.
How big have you gotten

376
00:20:10.340 --> 00:20:12.350
these? I mean, if you've
gotten into situation with hundreds

377
00:20:12.350 --> 00:20:18.590
and hundreds of tests Yeah.
I'd say one of my

378
00:20:18.590 --> 00:20:23.390
applications, it was nearing 70
or 75, but there's not

379
00:20:23.390 --> 00:20:26.240
really a performance issue because
in a way you're not

380
00:20:26.240 --> 00:20:28.670
really, you're not loading up
the browser like you are

381
00:20:28.670 --> 00:20:31.100
with selenium. So there's nothing
to be worried about from

382
00:20:31.100 --> 00:20:33.470
a performance. All right. Should
I show you right. That's

383
00:20:33.470 --> 00:20:35.450
a good point. I didn't
really think about that. That

384
00:20:35.690 --> 00:20:38.810
it's not a matter of
you're going as fast as

385
00:20:38.810 --> 00:20:41.780
your app can go. You
really are just focusing on

386
00:20:41.780 --> 00:20:44.720
the, the engine of the
JavaScript at its at its

387
00:20:44.720 --> 00:20:48.760
core. And this, are you
finding that this has caused

388
00:20:48.760 --> 00:20:51.400
you to write your JavaScript
really differently, like to separate

389
00:20:51.400 --> 00:20:53.350
it in ways that you
hadn't thought about before to

390
00:20:53.350 --> 00:20:57.060
make it more testable? Yeah.
Cause it made me think

391
00:20:57.060 --> 00:20:59.730
of, there's a lot of
things happening on the page

392
00:20:59.730 --> 00:21:03.930
that normally you just write
the function, not think about

393
00:21:03.930 --> 00:21:06.960
it, but the test is
actually like forced me to

394
00:21:06.960 --> 00:21:10.920
get green layer count for
more scenarios that I didn't

395
00:21:10.920 --> 00:21:13.050
think were possible while I
was before I written the

396
00:21:13.050 --> 00:21:16.020
test. Usually you catch those
things after you've released to

397
00:21:16.020 --> 00:21:19.050
like QA or production, but
the test kind of ensure

398
00:21:19.050 --> 00:21:21.510
a little bit more code
quality before going out the

399
00:21:21.510 --> 00:21:24.330
door. Someone just told me
once that one of the

400
00:21:24.330 --> 00:21:26.190
reasons that you should test
all the time is that

401
00:21:26.520 --> 00:21:29.730
if you, if you fear
your code, then you're in

402
00:21:29.730 --> 00:21:33.150
trouble. Like you write something
and it works. You're maybe

403
00:21:33.150 --> 00:21:34.980
not a hundred percent sure
why it works, but you

404
00:21:34.980 --> 00:21:36.930
know, it does. And you're
just now you don't want

405
00:21:36.930 --> 00:21:39.270
to touch it because you're
afraid of it, that you

406
00:21:39.270 --> 00:21:42.060
should write as many tests
as you can, until that

407
00:21:42.060 --> 00:21:46.200
fear goes away because you
might like change it, break

408
00:21:46.200 --> 00:21:49.680
it in some subtle way.
And that subtle thing that

409
00:21:49.680 --> 00:21:51.510
you broke is exactly the
kind of thing that you

410
00:21:51.510 --> 00:21:55.230
need to test for. Right?
Yeah, yeah. Yeah. Definitely ensures

411
00:21:55.230 --> 00:21:59.370
that. I definitely approach new
features for things. And I'm

412
00:21:59.460 --> 00:22:01.830
assured that I'm not really
gonna break something cause because

413
00:22:02.100 --> 00:22:04.830
there's hopefully a test around
that and I won't catch

414
00:22:04.830 --> 00:22:07.410
it too late because my
test will either break that

415
00:22:07.740 --> 00:22:11.220
or by me writing the
test or even me just

416
00:22:11.220 --> 00:22:14.790
writing the new functionality. If
I break something, then I

417
00:22:14.790 --> 00:22:17.280
know that I need to
fix that test and probably

418
00:22:17.280 --> 00:22:21.060
fix my own. Now you
you've talked about interactions with,

419
00:22:21.080 --> 00:22:23.490
with data and interactions, with
tool tips and things like

420
00:22:23.490 --> 00:22:26.040
that, which are very kind
of visual things. When do

421
00:22:26.040 --> 00:22:29.130
you know that you're getting
too close to integration testing

422
00:22:29.130 --> 00:22:31.140
and you need to, Jasmine's
no longer the thing you

423
00:22:31.140 --> 00:22:33.630
want to use. And it's
time to test that in

424
00:22:33.630 --> 00:22:38.610
an integration test When I'm
starting to mock out, I

425
00:22:38.610 --> 00:22:43.500
would say the whole feature
within, within that test, then

426
00:22:43.500 --> 00:22:46.410
I know that like I
need to be doing a

427
00:22:46.410 --> 00:22:49.170
full integration test. So like
the user came to my

428
00:22:49.170 --> 00:22:51.600
site, they logged in and
they did all those things.

429
00:22:52.170 --> 00:22:55.380
Yeah. Sometimes I found myself,
this has happened a couple

430
00:22:55.380 --> 00:22:56.580
of times. I mean, I
think we've all had this

431
00:22:56.580 --> 00:22:59.130
happen where you know, I'm
mocking and I'm mocking and

432
00:22:59.130 --> 00:23:01.590
then I'm like, I've been
mocking for like an hour.

433
00:23:02.070 --> 00:23:04.980
What the hell am I
testing? I'm testing nothing. I

434
00:23:04.980 --> 00:23:07.440
have literally mocked nothing out
to see if that string

435
00:23:07.440 --> 00:23:10.260
equals this. So yeah. It's
time to take a break.

436
00:23:10.500 --> 00:23:15.270
Yeah. That's cool. Is there
an example of something that

437
00:23:15.270 --> 00:23:18.010
just Jasmine is just not
right for? I mean like

438
00:23:18.210 --> 00:23:22.110
interactions, integration, testing, it's just,
yeah. So as you could

439
00:23:22.110 --> 00:23:23.850
do it like that, but
that's not what it's meant

440
00:23:23.850 --> 00:23:25.470
to do if you have
to generate a whole lot

441
00:23:25.470 --> 00:23:29.220
of stuff on that, Right?
Yeah. If you're, yeah. If

442
00:23:29.220 --> 00:23:32.730
you're generating a lot of
like the fixtures and partials

443
00:23:32.730 --> 00:23:37.050
for your Jasmine, I would
probably approach why am I

444
00:23:37.050 --> 00:23:39.990
sure I'm doing the right
testing, but so far it's

445
00:23:40.380 --> 00:23:43.110
been a really good introduction
to testing for client side.

446
00:23:43.890 --> 00:23:48.770
There are things that you're
gonna probably outgrow and start

447
00:23:48.770 --> 00:23:51.950
to look for other libraries
for Jasmine or just another

448
00:23:51.950 --> 00:23:54.590
framework in general. Once you
may find that Jasmine doesn't

449
00:23:54.590 --> 00:23:57.520
fit your standards anymore. And
have you made this a

450
00:23:57.520 --> 00:24:00.550
standard part of your toolkit
now? Yes. I have write

451
00:24:00.580 --> 00:24:03.340
as many Jasmine tests as
I can when I find

452
00:24:03.340 --> 00:24:06.940
them necessary, but I find
that it's a nice compliment

453
00:24:06.940 --> 00:24:09.760
to the integration test. Cause
you don't need to fire

454
00:24:09.760 --> 00:24:12.430
up the browser every time
for something. And how often

455
00:24:12.430 --> 00:24:14.190
do you have these running?
I've heard of people who

456
00:24:14.210 --> 00:24:16.180
saying that they just want
these on another monitor, just

457
00:24:16.180 --> 00:24:18.400
going all the time and
just like refresh, refresh, refresh,

458
00:24:18.820 --> 00:24:21.940
and then other people do
it where they're like just

459
00:24:21.940 --> 00:24:24.820
doing it during a build
where they don't run the

460
00:24:24.820 --> 00:24:28.720
time all the time. Typically
I have them running when,

461
00:24:29.740 --> 00:24:32.710
if I'm touching multiple files
for a feature, I'll kind

462
00:24:32.710 --> 00:24:35.560
of have it watching my
whole application so that if

463
00:24:35.560 --> 00:24:37.750
I touch that file, it'll
automatically run out and break

464
00:24:37.750 --> 00:24:42.060
anything. Typically once I'm done
with the feature and written

465
00:24:42.060 --> 00:24:44.950
my test for it, then
I'll most likely run the

466
00:24:44.950 --> 00:24:47.910
whole build on my machine
first before pushing out. Oh.

467
00:24:47.910 --> 00:24:50.590
Especially when I don't have
my own a dev server,

468
00:24:50.590 --> 00:24:54.130
that's running through a circle
CIO or something like that.

469
00:24:54.760 --> 00:24:57.310
So you're using grunt. That's
your kind of your, your

470
00:24:57.340 --> 00:25:00.190
build system. Yeah. So yeah,
if I'm not doing a

471
00:25:00.190 --> 00:25:02.860
Ruby application, I typically use
Gren. If not, I'll just

472
00:25:02.860 --> 00:25:06.580
use, I'll write a rake
task. Okay. So the, the,

473
00:25:06.580 --> 00:25:08.790
the model is you're writing
your JavaScript. You're writing your,

474
00:25:08.790 --> 00:25:11.740
your Jasmine test you've of
course graduated. So you're not

475
00:25:11.740 --> 00:25:13.390
doing this in the browser.
It's all at the command

476
00:25:13.390 --> 00:25:14.920
line and you just go
over it, you hit grunt

477
00:25:15.610 --> 00:25:17.800
and then see the results
in the command line there

478
00:25:17.800 --> 00:25:19.750
and you know, right away
whether the thing works. Right.

479
00:25:20.230 --> 00:25:23.800
Okay. That's cool. I'm trying
to think if there's anything

480
00:25:23.800 --> 00:25:27.100
else that I would want
to know about Jasmine, are

481
00:25:27.100 --> 00:25:30.190
there any plugins that aren't
the jQuery example that are

482
00:25:30.190 --> 00:25:34.150
like, must have like the
essential Jasmine plugin. I know

483
00:25:34.150 --> 00:25:38.230
your jQuery fan jQuery conference,
but I'm just thinking that

484
00:25:38.230 --> 00:25:40.540
like, other than Jasmine and
Jasmine jQuery are those like

485
00:25:40.540 --> 00:25:45.430
the essentials, There's also a
good one. Jasmine Ajax for

486
00:25:45.430 --> 00:25:48.940
mocking out a lot of
those calls. Is that something

487
00:25:48.950 --> 00:25:50.350
you do a lot? Like
where are you? I mean,

488
00:25:50.620 --> 00:25:52.450
that's an example of interaction
that really kind of is

489
00:25:52.450 --> 00:25:54.820
more appropriate because you're, you're
going to maybe take a

490
00:25:54.820 --> 00:25:57.190
list or an array of
something, do some sorting and

491
00:25:57.190 --> 00:26:00.790
then assert that the result
occurred. But you don't want

492
00:26:00.790 --> 00:26:02.800
to call the actual backend.
You just want to test

493
00:26:02.800 --> 00:26:07.210
the, Yeah. I wanted to
estimate manipulation for that. The

494
00:26:07.210 --> 00:26:09.610
client got back and make
sure like, was it a

495
00:26:09.610 --> 00:26:12.820
successful response or not? And
then what's happening once I

496
00:26:12.820 --> 00:26:15.670
got that response, If you
found out all were Jasmine

497
00:26:15.670 --> 00:26:19.210
will change the behavior of
another library just because it's

498
00:26:19.750 --> 00:26:23.770
cause it's there like jazz
will Jasmine's presence affect any

499
00:26:23.770 --> 00:26:27.640
of your words. No, it's
very Ignacio and very standalone.

500
00:26:27.640 --> 00:26:30.430
You can incorporate it with
other plugins. People have written

501
00:26:30.430 --> 00:26:33.310
for it, like jQuery, the
Jasmine, Jake we're in Ajax,

502
00:26:33.310 --> 00:26:35.950
or you can use other
ones like mocha chai. What

503
00:26:35.950 --> 00:26:38.950
are those? Those are, It
sounds like you guys and

504
00:26:38.950 --> 00:26:41.080
by you guys, I mean
like, like I'm a Microsoft

505
00:26:41.080 --> 00:26:47.340
person, so JavaScript people it's
every possible noun dot JS.

506
00:26:47.370 --> 00:26:48.780
You know what I mean?
You're like, you're just like

507
00:26:49.260 --> 00:26:52.590
naming off kinds of coffee
and I'm supposed to know

508
00:26:52.590 --> 00:26:54.990
that those are JavaScript libraries.
I feel really bad. Like,

509
00:26:54.990 --> 00:26:56.430
you know, I mean, I've
tried to be as up

510
00:26:56.430 --> 00:26:58.920
on this stuff as possible.
And now I've just learned

511
00:26:58.920 --> 00:27:00.690
that mocha and chai or
two things that I want

512
00:27:00.690 --> 00:27:03.990
to know about. Got it.
So a Jasmine tea, I

513
00:27:03.990 --> 00:27:06.650
assume that's why it's called
Jasmine is another drink. I

514
00:27:06.650 --> 00:27:10.370
think this one was called
after Jasmine rice. Okay. So

515
00:27:10.370 --> 00:27:12.380
what are mocha and chai
and how do they relate?

516
00:27:13.160 --> 00:27:16.970
Oh, those are mocha and
chai are another like TDD

517
00:27:16.970 --> 00:27:21.530
and BDD frameworks with chai
though. You have more flexibility

518
00:27:21.530 --> 00:27:24.290
to write in a more
BDD or TDD style. They

519
00:27:24.290 --> 00:27:27.650
give you, there are two
components to the library, so

520
00:27:27.650 --> 00:27:30.020
you can configure it however
you want it to be

521
00:27:30.020 --> 00:27:32.960
readable. Those are things to
graduate to after Jasmine just

522
00:27:32.960 --> 00:27:35.150
cause there are a lot
more configurable, a lot more

523
00:27:35.150 --> 00:27:39.800
extendable. I recommend Jasmine just
cause like you'll understand BDD

524
00:27:39.800 --> 00:27:42.410
and unit testing at the
same time. And it's all

525
00:27:42.410 --> 00:27:45.740
a familiar English like language
to get your feet wet.

526
00:27:46.700 --> 00:27:49.130
And then there's also a
Q unit that jQuery uses

527
00:27:49.130 --> 00:27:52.460
to test jQuery. And that's
more like drill down unit

528
00:27:52.460 --> 00:27:56.750
testing. It doesn't look as
English usually as Jasmine, but

529
00:27:56.990 --> 00:27:59.750
it is. Okay. So you
think that for the, for

530
00:27:59.750 --> 00:28:02.210
the listener who is getting
kind of getting into JavaScript

531
00:28:02.210 --> 00:28:04.640
unit testing, this is the
best, on-ramp not like a

532
00:28:04.640 --> 00:28:07.730
JS unit or Q unit
or something like that. I

533
00:28:07.730 --> 00:28:09.560
would kill you. And it
would be a second. I

534
00:28:09.800 --> 00:28:13.700
recommend Jasmine just cause I,
I grasp it easier coming

535
00:28:13.700 --> 00:28:19.460
from a BDD centric team.
So co moving over to

536
00:28:19.460 --> 00:28:21.710
Jasmine was very natural fit
for me when it came

537
00:28:21.710 --> 00:28:24.770
to testing JavaScript, Q unit
would be my second favorite

538
00:28:24.770 --> 00:28:29.030
before moving on to MOCA
or chai or even a

539
00:28:29.030 --> 00:28:33.650
Sonos, which is for doing
more stubs and mocks S

540
00:28:33.650 --> 00:28:36.770
I N O N I
always been known. I always

541
00:28:36.770 --> 00:28:38.720
mispronounce it. Some people say,
say no, and some people

542
00:28:38.720 --> 00:28:41.600
say sign on it, but
everyone in the community always

543
00:28:41.600 --> 00:28:43.580
seems to know what you're
talking about. Yeah. That's all,

544
00:28:43.630 --> 00:28:46.430
that's all it matters. Yeah.
I think that the I've

545
00:28:46.430 --> 00:28:49.070
had people from BDD communities
on before, and I've always

546
00:28:49.070 --> 00:28:52.520
felt as an, as a
non, let me see as

547
00:28:52.520 --> 00:28:54.710
a test agnostic person. Like
I don't have like a

548
00:28:54.710 --> 00:28:58.160
religious way. I don't really
care, you know, whatever D

549
00:28:58.160 --> 00:29:01.040
D right. As long as
you're testing, whether it's BDD

550
00:29:01.040 --> 00:29:02.600
or TDO and they were
all people always love to

551
00:29:02.600 --> 00:29:05.480
argue about whether it BDD,
UTD, but I think whatever

552
00:29:05.480 --> 00:29:08.750
feels the most comfortable and
whatever feels most intuitive and

553
00:29:08.750 --> 00:29:12.050
whatever you feel yourself naturally
writing would be the framework

554
00:29:12.050 --> 00:29:14.750
that you would then write
towards. Yeah. So it sounds

555
00:29:14.750 --> 00:29:16.880
like BDD is kind of
like where your heart is.

556
00:29:16.880 --> 00:29:19.100
So that just kind of
made sense to move that

557
00:29:19.100 --> 00:29:22.280
direction. Yeah. Okay. And so
people can learn more about

558
00:29:22.280 --> 00:29:24.320
Jasmine at the GitHub Jasmine
page, and then go on

559
00:29:24.320 --> 00:29:28.010
certain Google for Jasmine, and
then we'll put your Twitter

560
00:29:28.070 --> 00:29:32.360
handle a copacetic kid on
the, on the show notes

561
00:29:32.690 --> 00:29:34.610
and they can also reach
out to me. They're very

562
00:29:34.610 --> 00:29:36.650
cool. Well, thank you. We're
Shane McMeen for checking chat

563
00:29:36.660 --> 00:29:39.620
with me today at the
jQuery conference. Okay. Thank you.

564
00:29:40.220 --> 00:29:42.920
This has been another episode
of Hanselminutes and we'll see

565
00:29:42.920 --> 00:29:50.720
you again next week. <inaudible>.

