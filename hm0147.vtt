WEBVTT FILE

1
00:00:11.960 --> 00:00:17.090
From Hansel minutes.com it's Hansel
minutes. Our weekly discussion with

2
00:00:17.090 --> 00:00:22.100
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:22.100 --> 00:00:26.450
is Lawrence Ryan announcing show number
one 47. Recorded live Wednesday,

4
00:00:26.450 --> 00:00:31.790
January 21st, 2009. Support for handsome. And
this is provided by teller

5
00:00:32.030 --> 00:00:35.750
rad controls, the most comprehensive
suite of components for windows

6
00:00:35.750 --> 00:00:46.700
forms and asp.net web applications.
online@wwwdottelerikdotcomandby.net developers journal the world's

7
00:00:46.730 --> 00:00:52.640
leading.net developer magazine online at
www dot <inaudible> dot com.

8
00:00:53.960 --> 00:00:57.530
In this episode, Scott talks
with developer, Noah Richards about the

9
00:00:57.530 --> 00:01:05.240
new WPF based text editor
in visual studio, 2010, Scott

10
00:01:05.240 --> 00:01:07.910
Hanselman. This is another episode
of Hansel minutes. I'm up

11
00:01:07.910 --> 00:01:10.550
here hanging out for a
couple of days on the

12
00:01:10.550 --> 00:01:12.980
Redmond campus of Microsoft. I
come up here every month

13
00:01:12.980 --> 00:01:15.500
or so and wander around
the hallways. And every once

14
00:01:15.500 --> 00:01:17.000
in a while, I just
pop into an office and

15
00:01:17.000 --> 00:01:18.980
find out what someone's working
on and I've hit the

16
00:01:18.980 --> 00:01:22.130
Motherlode today because I'm talking
with a software development engineer,

17
00:01:22.610 --> 00:01:26.720
Noah Richards. Who's one of the,
how many developers, about eight

18
00:01:26.720 --> 00:01:32.060
developers, eight developers working on
the new editor for dev

19
00:01:32.600 --> 00:01:35.300
visual studio, 2010. Yes. Don't
call it dev 10. We

20
00:01:35.310 --> 00:01:37.250
call it a visual studio.
We call it dev 10.

21
00:01:37.280 --> 00:01:39.920
You call it demo, but
you, the listener, you don't

22
00:01:39.920 --> 00:01:43.430
get to call it that
now. So why would I

23
00:01:43.760 --> 00:01:46.040
want to talk about a
text editor? Well, I think

24
00:01:46.040 --> 00:01:47.780
this is pretty interesting and
I wanted to talk to

25
00:01:47.780 --> 00:01:50.540
an actual, you said you
called yourself earlier a lowly.

26
00:01:51.020 --> 00:01:54.770
Yeah. I'm just one of
the lowly coders code as

27
00:01:54.770 --> 00:01:57.020
they say. So you work
on the WPF editor. So

28
00:01:57.020 --> 00:02:00.440
this means that the editor
in visual studio 2010 is

29
00:02:00.750 --> 00:02:03.170
different and we've seen things
about this and if people

30
00:02:03.170 --> 00:02:05.960
are enthusiastic, they can, they
can search around and they

31
00:02:05.960 --> 00:02:08.450
can find channel nine videos.
They can, they can piece

32
00:02:08.450 --> 00:02:12.230
together. What's going on here.
What's happening with the editor,

33
00:02:12.230 --> 00:02:15.200
the text editor in visual
studio, 2010. So for visual

34
00:02:15.200 --> 00:02:19.640
studio, 2010, we, we started
over and we wrote the

35
00:02:19.640 --> 00:02:23.480
editor from the ground up
with accessibility in mind. And

36
00:02:23.900 --> 00:02:26.330
so like you said, the
editor, it uses WPF now,

37
00:02:26.450 --> 00:02:30.740
which is of course different
and we're all managed code.

38
00:02:31.430 --> 00:02:35.660
We write almost entirely in
C sharp and we use

39
00:02:35.660 --> 00:02:40.900
something called the managed extensibility
framework, math. Yeah, Glen locksmith,

40
00:02:41.100 --> 00:02:44.720
Glen blocks. I love that
guy for our ex sensibility

41
00:02:44.720 --> 00:02:48.380
story. So anyone would just,
you just want me to

42
00:02:48.380 --> 00:02:50.360
hop into these, maybe talk
about, I mean, I want

43
00:02:50.360 --> 00:02:52.820
to understand like a couple
of things about this editor.

44
00:02:52.820 --> 00:02:55.880
So when we pay the
editor, we're talking about all

45
00:02:55.880 --> 00:02:58.790
of the typing of texts,
the rendering of text, the

46
00:02:58.790 --> 00:03:02.770
scroll that, that, that whole
kind of area that lives

47
00:03:02.770 --> 00:03:06.040
inside of visual studio. Yes.
That's what we're talking about.

48
00:03:06.070 --> 00:03:07.900
So somebody is in a,
in looking at an, a

49
00:03:07.910 --> 00:03:10.030
solution Explorer and they double
click on a file. And

50
00:03:10.030 --> 00:03:12.190
somehow visual studio decides that
this is a file that

51
00:03:12.190 --> 00:03:14.650
you're going to be handling.
Yep. And then what happens

52
00:03:14.860 --> 00:03:16.870
is the text editor is
at a DLL. I mean,

53
00:03:17.480 --> 00:03:19.060
I mean, I imagine it
from the point of that,

54
00:03:19.060 --> 00:03:21.700
I've got the visual studio
IDE open, I double click

55
00:03:21.700 --> 00:03:24.370
on it on a CS
file. Sure. And what happens?

56
00:03:24.630 --> 00:03:27.870
So there are, there are
two pieces to the editor.

57
00:03:28.350 --> 00:03:30.720
There's what we call the,
the platform piece or the

58
00:03:30.720 --> 00:03:35.340
<inaudible> piece. And you might've
noticed if you use expression

59
00:03:35.340 --> 00:03:38.160
blend, or if you downloaded
the new wind seven beta

60
00:03:38.550 --> 00:03:41.820
and you open up the
PowerShell ISE, the integrated scripting

61
00:03:41.820 --> 00:03:45.840
environment, you'll see, that's our
editor in both applications. That's

62
00:03:45.840 --> 00:03:49.360
our editor. And we're kind
of being hosted in, in

63
00:03:49.390 --> 00:03:50.760
more than that. Those are
just the ones off the

64
00:03:50.760 --> 00:03:52.500
top of my head, but
yeah, And that's just like

65
00:03:52.500 --> 00:03:55.350
a DLL that they benefit.
It's a, it's a set

66
00:03:55.350 --> 00:04:00.540
of DLLs. It's about, they're
a couple separated for various

67
00:04:00.540 --> 00:04:02.910
reasons, but there are a
couple of DLLs. And then

68
00:04:03.240 --> 00:04:06.450
inside of visual studio, we
have a package that takes

69
00:04:06.450 --> 00:04:08.970
care of loading us up
and then provides a, what

70
00:04:08.970 --> 00:04:12.410
we call a shim layer
on top of our, our

71
00:04:12.720 --> 00:04:16.140
rehost double part that allows
old native clients to continue

72
00:04:16.140 --> 00:04:18.360
calling the editor as if
it was still the old

73
00:04:18.360 --> 00:04:21.300
editor. So the shim is,
it's just that it's a

74
00:04:21.300 --> 00:04:25.860
lie that it's extensibility to.
It says, I'm still here.

75
00:04:25.860 --> 00:04:30.930
I'm still, nothing's changed. It's
IVs, text, whatever IBS thing.

76
00:04:31.050 --> 00:04:34.410
Sure. And then they're, they're
really, there are two parts

77
00:04:34.410 --> 00:04:37.260
of that. There's the integration
piece, which talks to VMs.

78
00:04:37.650 --> 00:04:39.390
And then there's the shim
piece, which is like you

79
00:04:39.390 --> 00:04:42.510
said, it's the lie that
we tell to our older,

80
00:04:42.510 --> 00:04:44.670
older native clients, but it's,
it's, it's there so that

81
00:04:44.670 --> 00:04:47.130
you have a, a more
gradual path to move forward.

82
00:04:47.280 --> 00:04:49.770
Right. So this doesn't necessarily
so rewriting an entire edit

83
00:04:49.770 --> 00:04:52.740
doesn't necessarily break some add
in that I wrote earlier.

84
00:04:52.740 --> 00:04:55.560
Right? Absolutely. Okay. That's cool.
So I double click on

85
00:04:55.560 --> 00:04:58.500
the CS file. Visual studio
says, Hey, it's text, editor

86
00:04:58.500 --> 00:05:03.060
time. Your package shows up.
And then there's a lot

87
00:05:03.060 --> 00:05:06.360
involved here. There's the deciding
of the viewport. You know,

88
00:05:06.360 --> 00:05:08.310
whether this is a really
long file or not, maybe

89
00:05:08.310 --> 00:05:11.610
this is a megabyte of
text. So there's memory management

90
00:05:11.700 --> 00:05:13.860
in texting, dealing with the
text editor. There's all the

91
00:05:13.860 --> 00:05:18.300
syntax highlighting. Is that your
responsibility Part of it? So

92
00:05:18.300 --> 00:05:21.750
we still use the language
services that are provided linked

93
00:05:21.750 --> 00:05:23.760
to C-sharp team as their
language service and the VB

94
00:05:23.760 --> 00:05:27.510
team. We have a subsystem
that they talk to and

95
00:05:27.510 --> 00:05:30.000
that's how they provide coloring.
And that's, that's also new

96
00:05:30.000 --> 00:05:35.250
and, and, and vs 10
recently called classification where people

97
00:05:35.250 --> 00:05:37.470
get to provide things. And
they say, this span of

98
00:05:37.470 --> 00:05:39.570
text is a, is a
key word, the span of

99
00:05:39.570 --> 00:05:43.380
text, isn't a number, what's
that word you're saying, classification

100
00:05:43.770 --> 00:05:48.210
should this band of tech
span, span of text, the

101
00:05:48.210 --> 00:05:50.490
span of text is, is
such and such a thing.

102
00:05:50.490 --> 00:05:53.070
And then we have another
service sitting there, which says,

103
00:05:53.100 --> 00:05:57.740
Oh, well, keyword is equivalent
to this WPF solid color

104
00:05:57.740 --> 00:05:59.720
brush. And then that comes
in, in the top of

105
00:05:59.720 --> 00:06:02.560
the UI layer and says,
Oh, keywords are blue. These

106
00:06:02.560 --> 00:06:04.930
services, you calling them services.
So you have a kind

107
00:06:04.930 --> 00:06:06.610
of service oriented architecture, but
this is all in proc

108
00:06:06.610 --> 00:06:09.790
though. Yes. Yes. It's all
improv. So, so yeah. So

109
00:06:09.790 --> 00:06:11.950
at, at, at the level
of math of the six

110
00:06:11.950 --> 00:06:15.700
sensibility framework, we have all
these different sub systems that

111
00:06:15.700 --> 00:06:19.720
said classification is one of
them. Things like, like the

112
00:06:19.900 --> 00:06:22.510
little squiggly as you get
in the editor, that's that

113
00:06:22.510 --> 00:06:26.410
uses another subsystem to do
that. And basically we have

114
00:06:26.410 --> 00:06:30.340
these services that we provide
and we use them internally

115
00:06:30.340 --> 00:06:32.800
to build the application, but
they're all, they're all public,

116
00:06:32.830 --> 00:06:35.200
they're all services that you,
as an extender can come

117
00:06:35.200 --> 00:06:36.700
in and say, well, I
want to provide my own

118
00:06:36.700 --> 00:06:41.920
squiggles. So you can implement
this, this interface. And so

119
00:06:42.250 --> 00:06:45.490
one of the things about
the new editor I like

120
00:06:45.490 --> 00:06:49.450
to think of is kind
of democratizing it, that you

121
00:06:49.450 --> 00:06:52.420
can write an extension that
adds new colors to C

122
00:06:52.420 --> 00:06:55.180
sharp and plays along with
the C sharp language service.

123
00:06:55.390 --> 00:06:58.990
You could add an extension
that say, you want to

124
00:06:58.990 --> 00:07:01.840
add, spellchecking two comments. You
can do that. You can

125
00:07:01.840 --> 00:07:03.940
write an extension that spellchecking,
and then puts a squiggle

126
00:07:03.940 --> 00:07:06.670
under the spell check and
under the misspelled words. And

127
00:07:06.670 --> 00:07:09.910
that would all just work.
Okay. So then maybe I

128
00:07:09.910 --> 00:07:11.530
wasn't thinking about this, right?
Let's think about it in

129
00:07:11.530 --> 00:07:14.980
terms of a line of
text. Sure. Okay. So, I

130
00:07:14.980 --> 00:07:16.600
mean, I've got a line
of text, right? I've got

131
00:07:16.600 --> 00:07:19.990
a four loop or something
like that. How many different

132
00:07:19.990 --> 00:07:22.960
things are involved in the,
in the ultimate rendering of

133
00:07:22.960 --> 00:07:26.530
the correct colors? A couple
of squiggles on the single,

134
00:07:26.680 --> 00:07:28.450
what do you call it?
A span of text. Right.

135
00:07:28.470 --> 00:07:30.670
So, okay. So this is
the life cycle of that

136
00:07:30.670 --> 00:07:34.120
space. There are, there are
three primary layers to the

137
00:07:34.120 --> 00:07:38.890
editor. There's the data layer,
which is text buffers. And

138
00:07:38.890 --> 00:07:40.870
then when I say with
things like span, there, there

139
00:07:40.870 --> 00:07:43.750
are things called spans and
so on and so forth.

140
00:07:43.750 --> 00:07:46.360
And these refer to the
text and the text buffer.

141
00:07:46.960 --> 00:07:49.180
And I'll pause for a
second because I do want

142
00:07:49.180 --> 00:07:51.220
to say one of the
cool things about the new

143
00:07:51.220 --> 00:07:54.520
editor is that all the
data structures in the buffer

144
00:07:54.520 --> 00:08:00.850
level are functional or immutable.
So when text changes, if

145
00:08:00.850 --> 00:08:02.620
the text at any point
in time is what's called

146
00:08:02.620 --> 00:08:06.580
a text snapshot, and you
can grab this tech snapshot,

147
00:08:06.610 --> 00:08:08.140
you can do stuff with
it. Like if you're a

148
00:08:08.140 --> 00:08:11.530
language, you can build an
AST, you can see what's

149
00:08:11.530 --> 00:08:14.410
there without worrying about anybody
else coming in and changing

150
00:08:14.410 --> 00:08:17.200
it. So one of the
things is there's not a

151
00:08:17.200 --> 00:08:19.030
lot of locking anymore. You
don't have to lock, get

152
00:08:19.030 --> 00:08:21.010
a read, lock, read the
thing, make sure nobody edits

153
00:08:21.010 --> 00:08:23.350
it. You just grab the
snapshot. When somebody makes a

154
00:08:23.350 --> 00:08:26.020
change to the buffer, we
generate a new snapshot and

155
00:08:26.020 --> 00:08:29.080
then move forward to that.
And if you ask for

156
00:08:29.080 --> 00:08:30.850
the current snapshot at that
point, you'll get the new

157
00:08:30.850 --> 00:08:35.020
one. But so almost all
of the, the world of

158
00:08:35.020 --> 00:08:37.900
the editor talks in terms
of these snippets, You're getting

159
00:08:37.900 --> 00:08:41.020
around the issues of concurrency
that with just the issue

160
00:08:41.020 --> 00:08:43.750
of you're getting a moment
in time, Right? And this

161
00:08:43.750 --> 00:08:46.240
was, this was a huge
problem. We don't about a

162
00:08:46.240 --> 00:08:48.550
huge farm. It was a
problem in visual studio past

163
00:08:48.550 --> 00:08:53.110
where language services and consumer
like third party senators had

164
00:08:53.110 --> 00:08:54.880
to do this, too. If
you wanted to get a

165
00:08:54.900 --> 00:08:57.570
copy of the text, you
would take the entire text

166
00:08:57.570 --> 00:09:00.330
bopper and copy it into
a string and look at

167
00:09:00.330 --> 00:09:02.870
it yourself. Yeah. Just so
you wouldn't Right. And that's

168
00:09:02.870 --> 00:09:05.660
where you'd see things like,
you know, five megabyte file

169
00:09:05.660 --> 00:09:07.030
might be fine, but then
as soon as you put

170
00:09:07.040 --> 00:09:09.800
on, you know, Fred's third
party, extension things start to

171
00:09:09.800 --> 00:09:11.630
slow down. It turns out
he's not dealing with that

172
00:09:11.630 --> 00:09:13.820
size of files. Well, and
it's, it was hard to

173
00:09:13.820 --> 00:09:15.690
do. It's a little bit
easier to do now. So,

174
00:09:15.690 --> 00:09:18.050
so we have this that's
the data level. And above

175
00:09:18.050 --> 00:09:20.390
that, we have the logic
level where things like classification

176
00:09:20.390 --> 00:09:24.350
live. So it's something that
classification, isn't really a UI

177
00:09:24.350 --> 00:09:27.860
concept. It's something that you
add on top of the

178
00:09:27.860 --> 00:09:31.370
data. So just the fact
that the text is a

179
00:09:31.370 --> 00:09:33.350
keyword has nothing to do
with the fact that it's

180
00:09:33.350 --> 00:09:36.800
blue that comes from this
is metadata, which has metadata

181
00:09:36.800 --> 00:09:38.900
that you add. And we
have, we have basically two

182
00:09:38.900 --> 00:09:41.630
subsystems that kind of talk
in terms of this classification

183
00:09:41.630 --> 00:09:45.290
and another one called tagging,
which is, is similar. It's

184
00:09:45.290 --> 00:09:47.780
a way of saying like
this piece of text is

185
00:09:47.780 --> 00:09:49.700
a squiggle. That's a type
of tag that you get

186
00:09:49.700 --> 00:09:52.640
to put as an error
on Aerotek. And then on

187
00:09:52.640 --> 00:09:55.130
top of that is the
UI layer. And that's the

188
00:09:55.130 --> 00:09:59.680
layer that we have an
implementation of this layer. It's,

189
00:09:59.680 --> 00:10:02.120
it's kind of agnostic. So
you can have UI without

190
00:10:02.120 --> 00:10:05.300
knowing that it's WPF, but
then there's a UI specific

191
00:10:05.300 --> 00:10:06.890
one. And so when you
have a line of text

192
00:10:07.460 --> 00:10:10.130
or the text view, what
it does is it gets

193
00:10:10.130 --> 00:10:13.610
the current snapshot. When the
snapshots change, it goes through

194
00:10:13.610 --> 00:10:15.740
and it goes into WPF
and render some of this

195
00:10:15.740 --> 00:10:20.780
text. And then it asks
for all the classifications over,

196
00:10:20.780 --> 00:10:23.120
it asks for all the
different tags over it. There

197
00:10:23.120 --> 00:10:26.990
is like squiggles, there's a
thing called a squiggle visual

198
00:10:26.990 --> 00:10:29.810
manager that, okay, So then
the, at the second layer

199
00:10:29.810 --> 00:10:31.760
at that, what I'm calling
this, this metadata layer, you

200
00:10:31.770 --> 00:10:36.290
call it the data there.
That's where things like things

201
00:10:36.290 --> 00:10:39.350
like background compilation of, you
know, errors that have showed

202
00:10:39.350 --> 00:10:42.260
up spellcheck. That's where I
hook in where I'm saying

203
00:10:42.260 --> 00:10:44.750
that this is wrong. I
want to squiggle there to

204
00:10:44.750 --> 00:10:49.040
indicate something about this, but,
but not necessarily saying, I

205
00:10:49.040 --> 00:10:51.590
want a visual squiggle. I
want to tag this with

206
00:10:51.590 --> 00:10:53.750
the information, say, this is
an error. This is an

207
00:10:53.750 --> 00:10:56.090
error. And in visualization of
that error is a totally

208
00:10:56.090 --> 00:10:58.130
separate thing. Right. We try
to keep that separate as

209
00:10:58.130 --> 00:11:00.860
much as possible, just because
it makes things cleaner and

210
00:11:00.860 --> 00:11:04.130
easier to work with. And
yeah. So that's the, that's

211
00:11:04.130 --> 00:11:06.890
the logic layer. Okay. It,
so when I heard that

212
00:11:06.890 --> 00:11:08.750
we were writing the whole
thing over again, like you

213
00:11:08.750 --> 00:11:11.360
said, at the beginning, it's
been done from, from scratch.

214
00:11:12.530 --> 00:11:15.020
It looks the same though.
You know, it was like,

215
00:11:15.200 --> 00:11:18.470
Oh yeah, I saw the
CTP and it's like, Oh,

216
00:11:18.470 --> 00:11:20.810
we're writing, we're doing all
this work. It's totally written

217
00:11:20.840 --> 00:11:22.940
from scratch. And it looks
exactly the same. And it's

218
00:11:22.940 --> 00:11:25.010
always that, you know, that
joke about rewriting stuff. And

219
00:11:25.010 --> 00:11:26.570
you get exactly where you
were a couple of years

220
00:11:26.570 --> 00:11:29.810
ago. So that we're here.
We are. It looks exactly

221
00:11:29.810 --> 00:11:32.240
the same. Yep. And we
did this though. It was

222
00:11:32.240 --> 00:11:36.770
extensibility. Yes. So, so the
way we look at it

223
00:11:36.770 --> 00:11:40.660
is that we want it
to be extensible. It's, it's

224
00:11:40.670 --> 00:11:43.430
very extensible and it's built
so that you can do

225
00:11:43.850 --> 00:11:46.160
wherever, wherever your mind takes.
You, you know, you can

226
00:11:46.160 --> 00:11:50.360
build a visualization in WPF
that does, does whatever you

227
00:11:50.360 --> 00:11:53.290
want it to do. But
in terms of when talk

228
00:11:53.290 --> 00:11:56.380
about dev 10 and delivering
and shipping and visual studio,

229
00:11:57.190 --> 00:11:59.740
we had a priority that
we didn't want to, we

230
00:11:59.740 --> 00:12:03.090
certainly didn't want to degrade
the experience. And so we,

231
00:12:03.090 --> 00:12:06.190
we tried very hard as
best we could without sacrificing

232
00:12:06.190 --> 00:12:11.080
anything, to, to maintain the
same type of functionality that

233
00:12:11.080 --> 00:12:13.150
you're used to. So that
a guy who sits down

234
00:12:13.150 --> 00:12:16.120
and he just got vs
2010 or no, his, his

235
00:12:16.450 --> 00:12:18.580
company just switched to BS
2010. You go type in

236
00:12:18.580 --> 00:12:20.740
the editor and doesn't need
to know that it's a

237
00:12:20.740 --> 00:12:23.160
deal. So he's not going
to notice the difference if

238
00:12:23.160 --> 00:12:25.090
he doesn't actually go looking
for anything. Yeah. Right. If,

239
00:12:25.160 --> 00:12:27.900
if he doesn't have anything
else, he'll notice, he might

240
00:12:27.900 --> 00:12:31.020
notice the one thing everybody
notices is that the selection

241
00:12:31.020 --> 00:12:32.850
box has a gradient in
it. That's one of the

242
00:12:32.850 --> 00:12:36.420
only visible things like the
outlining might look a little

243
00:12:36.420 --> 00:12:39.440
bit different. Some of the,
you know, the glyphs graphics

244
00:12:39.440 --> 00:12:42.840
and graphics might look a
bit different, but the functionality

245
00:12:42.840 --> 00:12:45.030
we're trying to maintain. Hmm.
So you're not trying to

246
00:12:45.030 --> 00:12:47.490
freak people out with some
dramatic change, but you said

247
00:12:47.490 --> 00:12:49.620
that earlier, speaking of freaking
people out, you said you

248
00:12:49.620 --> 00:12:52.410
could do whatever you want,
as far as your imagination.

249
00:12:52.410 --> 00:12:54.120
I mean, what are some
of the wacky stuff that

250
00:12:54.120 --> 00:12:56.370
people have been writing to
see how far they can

251
00:12:56.370 --> 00:12:59.400
push this? So we had
a, there was a guy

252
00:12:59.400 --> 00:13:04.500
on one of our partner
teams who he built visualization

253
00:13:04.500 --> 00:13:07.470
that he used some of
the existing visual studio stuff

254
00:13:07.500 --> 00:13:10.080
to figure out where methods
were and then he made

255
00:13:10.080 --> 00:13:11.970
it. So when you clicked
on the method, it would

256
00:13:11.970 --> 00:13:14.070
highlight the method and then
pop up this, this rich

257
00:13:14.100 --> 00:13:17.340
edit control that says, you
know, like who last edited

258
00:13:17.340 --> 00:13:22.380
the method and code coverage
numbers and the data, the

259
00:13:22.380 --> 00:13:24.810
data for his presentation was
all made up. But the

260
00:13:24.810 --> 00:13:27.870
idea is that at the
end of the day, the

261
00:13:27.870 --> 00:13:31.710
view is just, it's just
a WPF element. It's just

262
00:13:31.710 --> 00:13:34.230
a UI element. And you
can do, you can hook

263
00:13:34.230 --> 00:13:36.690
into the editor various levels.
And like, like you said,

264
00:13:36.690 --> 00:13:37.920
one of things you can
do is that you can

265
00:13:37.920 --> 00:13:40.410
provide these arrow tags, but
then on the top, you

266
00:13:40.410 --> 00:13:42.900
can provide any type of
visualization you want. So we've

267
00:13:42.900 --> 00:13:46.170
had ideas for things like
let's pretend every time you

268
00:13:46.170 --> 00:13:49.530
say new solid color brush,
we replace whatever is in

269
00:13:49.530 --> 00:13:52.620
that constructor and solid color
brush with a color picker.

270
00:13:53.490 --> 00:13:55.110
Like we can do that.
We can stick it right

271
00:13:55.110 --> 00:13:57.420
in the editor. Like you
could write that. You can

272
00:13:57.420 --> 00:13:59.240
write things that say, Hang
on a second. So you,

273
00:13:59.240 --> 00:14:02.130
yeah. Cause we've said new
solid color brush before, but

274
00:14:02.130 --> 00:14:04.740
you're saying that you're writing
some code, you're sitting down

275
00:14:04.740 --> 00:14:08.070
and you're going, you know,
VAR B equals new solid

276
00:14:08.070 --> 00:14:11.970
color brush, open paren. And
at that point We could,

277
00:14:12.030 --> 00:14:14.040
you show a Coke. You
could write, you could write

278
00:14:14.040 --> 00:14:16.320
an extension that, that does
any of this stuff. You

279
00:14:16.320 --> 00:14:18.840
could write an extension that
says you create a UI

280
00:14:18.840 --> 00:14:20.430
element. Well, why don't we
just show it in the

281
00:14:20.430 --> 00:14:24.120
editor? You can write an
extension like a swash. Sure.

282
00:14:24.150 --> 00:14:26.490
You can, you can, you
can write an extension that

283
00:14:27.060 --> 00:14:29.820
effectively takes some piece of
the editor and says, why

284
00:14:29.830 --> 00:14:32.970
want to represent it this
way instead? Hi, this is

285
00:14:32.970 --> 00:14:35.760
Scott coming at you from
another place in time. Are

286
00:14:35.760 --> 00:14:38.250
you looking for an object,
relational mapping tool for mission

287
00:14:38.250 --> 00:14:41.520
critical projects using lincoln.net. I
wanted to share with you

288
00:14:41.520 --> 00:14:46.680
genome specifically designed for developing.net
enterprise applications. Genome is a

289
00:14:46.680 --> 00:14:50.100
mature link, integrated ORM tool.
It's been employed in numerous

290
00:14:50.100 --> 00:14:53.420
large scale projects. The last
six years genome was created

291
00:14:53.420 --> 00:14:56.120
for the.net platform as opposed
to being a port from

292
00:14:56.120 --> 00:15:01.640
Java. And it's thrived on
platform innovation since.net. 1.0 genome

293
00:15:01.640 --> 00:15:04.250
has supported links since its
CTP release. In may of

294
00:15:04.250 --> 00:15:08.120
2006. It offers several unique
features, such as encapsulation and

295
00:15:08.120 --> 00:15:11.420
reuse of linked queries and
expressions. You can really fully

296
00:15:11.420 --> 00:15:13.940
harness the power of link
while benefiting from your database

297
00:15:13.940 --> 00:15:18.290
platforms. Unique features, compose complex,
linked queries, decompose the query

298
00:15:18.290 --> 00:15:21.290
logic and your domain model
link supports all the major

299
00:15:21.290 --> 00:15:24.770
database platforms you find in
enterprise environments like SQL server,

300
00:15:24.980 --> 00:15:28.430
but also Oracle and IBM
DB too. And find out

301
00:15:28.430 --> 00:15:32.060
more about how genome integrates
tightly with visual studio and

302
00:15:32.060 --> 00:15:36.650
what tools do you know
offers to reduce development time@tinyurl.com

303
00:15:36.680 --> 00:15:40.910
slash try genome G N
O M E, where you

304
00:15:40.910 --> 00:15:43.790
can also download a free
and fully functional trial version.

305
00:15:43.940 --> 00:15:45.920
I hope you enjoy it.
So how do I get

306
00:15:45.920 --> 00:15:51.110
the notification? It's one thing
to, to describe the different

307
00:15:51.110 --> 00:15:52.970
layers that you just said,
but it's another thing to

308
00:15:52.970 --> 00:15:55.220
be notified that it's really
my opportunity to jump in

309
00:15:55.660 --> 00:15:58.690
Well, so this is why
we have, so we kind

310
00:15:58.690 --> 00:16:01.330
of separate these math components
into two things. There are

311
00:16:01.330 --> 00:16:04.480
services that we, that we
kind of provide. So there's

312
00:16:04.870 --> 00:16:06.910
a fine service and a
search service. And then they're

313
00:16:07.420 --> 00:16:11.290
extensions that will go and
like grep over these people

314
00:16:11.290 --> 00:16:14.200
who provide these extensions at
various points in time. So

315
00:16:14.200 --> 00:16:17.830
classification is one of those.
Every time, every time a

316
00:16:17.830 --> 00:16:20.800
view comes up, we'll go
in and we'll say, okay,

317
00:16:21.130 --> 00:16:23.830
well this is a C-sharp
file. Let me find all

318
00:16:23.830 --> 00:16:26.710
the people who say, well,
I provide classification for C-sharp.

319
00:16:27.640 --> 00:16:30.220
Likewise. You can say, well,
tell me every time a

320
00:16:30.220 --> 00:16:33.730
view is created and the
content type of the thing

321
00:16:33.730 --> 00:16:36.610
is VB or the content
type of the thing is

322
00:16:36.610 --> 00:16:37.990
C sharp. And then you
can sit and you can

323
00:16:37.990 --> 00:16:41.170
listen to, Oh, the buffers
have changed. Oh, the view

324
00:16:41.170 --> 00:16:44.970
has changed. Do I want
to do we just subscribed

325
00:16:44.970 --> 00:16:46.180
to, and you say, just,
you know, just let me

326
00:16:46.180 --> 00:16:49.000
know whenever things happen. And
then I can decide, do

327
00:16:49.000 --> 00:16:52.150
I want to add my
thing here? We have this

328
00:16:52.150 --> 00:16:54.970
general idea of things called
adornments, which are these, these

329
00:16:54.970 --> 00:16:57.640
UI things. And you can
say, Oh, well, I want

330
00:16:57.640 --> 00:17:01.000
to put this adornment here.
I want to put, think

331
00:17:01.000 --> 00:17:04.150
of like the three, the
three dots for when you

332
00:17:04.150 --> 00:17:08.740
are, when you have collapsed
texts and an outlining region,

333
00:17:08.740 --> 00:17:10.960
that's just an adornment that
we stick in the text

334
00:17:10.990 --> 00:17:13.270
and you can write that.
And in fact, with the

335
00:17:13.270 --> 00:17:15.280
way outlining works, you can
replace that if you don't

336
00:17:15.280 --> 00:17:18.460
like that three dot, or
you can provide your own

337
00:17:18.460 --> 00:17:20.950
outlining regions because outlining is
yet another one of these

338
00:17:20.950 --> 00:17:25.240
things that under the covers
uses these logic subsystems tagging.

339
00:17:25.240 --> 00:17:27.610
And I can go in
and say, well, in my

340
00:17:27.610 --> 00:17:30.280
C-sharp files, I want to
be able to collapse such

341
00:17:30.280 --> 00:17:32.230
and such a thing. So
you write a component that

342
00:17:32.560 --> 00:17:36.070
whenever C-sharp files open up,
you say this region is

343
00:17:36.070 --> 00:17:39.430
also a collapsible, And I'm
starting to think about what

344
00:17:40.750 --> 00:17:42.700
I'm trying to think of,
what kinds of things that

345
00:17:42.700 --> 00:17:45.820
someone could do if they,
if they were designing like

346
00:17:45.820 --> 00:17:48.430
a language, but they knew
that an editor that was

347
00:17:48.430 --> 00:17:52.440
extensible existed ahead of time,
like a, you know, a

348
00:17:52.470 --> 00:17:56.790
multidimensional raise are no fun,
of course, right? But tiny

349
00:17:56.790 --> 00:18:00.540
Excel spreadsheets embedded in your
editor are cool. Sure. So

350
00:18:00.540 --> 00:18:03.360
why not do that? It'll
be interesting. If third parties

351
00:18:03.390 --> 00:18:06.270
jump in and decide to
like make the, you know,

352
00:18:06.270 --> 00:18:09.210
the via super crazy power
pack thing, you know, remember

353
00:18:09.210 --> 00:18:12.990
when debugger visualizers came out
and everyone went just, you

354
00:18:12.990 --> 00:18:15.570
know, nuts coming out with
all sorts of visualizers for

355
00:18:15.570 --> 00:18:18.950
things, they can do the
same thing now. So the

356
00:18:18.950 --> 00:18:22.700
reason why I get so
excited about the new editor

357
00:18:23.180 --> 00:18:27.590
is because we talk about
the editor is public surface

358
00:18:27.590 --> 00:18:30.050
area. It's not like there's,
there are these magical things

359
00:18:30.050 --> 00:18:32.690
that we use underneath. And
those are the powerful things.

360
00:18:32.690 --> 00:18:34.610
And then we show you
some little pieces at the

361
00:18:34.610 --> 00:18:38.000
top, right? We implement everything.
Like you can write a

362
00:18:38.000 --> 00:18:40.910
classifier, we write classifiers, it's
all the same. You write

363
00:18:40.910 --> 00:18:43.370
a tagger for something. We
write a tagger for something.

364
00:18:43.520 --> 00:18:46.640
I mean, they're using meth.
Of course there are like,

365
00:18:46.670 --> 00:18:49.580
there are some things that
are implementation details of something

366
00:18:49.580 --> 00:18:53.540
or other, but every, you
can provide any extension that

367
00:18:53.540 --> 00:18:56.810
we can provide. You can
consume any service that we

368
00:18:56.810 --> 00:18:59.390
consume. And every one of
our pieces are designed in

369
00:18:59.390 --> 00:19:03.470
this way. And that the,
you know, something that uses

370
00:19:03.470 --> 00:19:07.160
classification, it's not part of
classification. It consumes the classification

371
00:19:07.160 --> 00:19:10.580
service and uses that. So
everything is very loosely connected

372
00:19:10.580 --> 00:19:14.510
in that way. No, I
mean, this is random, but

373
00:19:14.660 --> 00:19:18.290
how, how long have you
worked here? About a year

374
00:19:18.290 --> 00:19:20.570
and a half. Okay. So
you're, let's just phrase it

375
00:19:20.570 --> 00:19:23.900
this way. You're not an
old dude. Yes. And you're

376
00:19:23.900 --> 00:19:25.820
not an old dude, not
just in age, but in

377
00:19:25.820 --> 00:19:28.760
that kind of like been,
been here for 20 years,

378
00:19:28.880 --> 00:19:32.690
kind of old dude in
a way, certainly. And you're

379
00:19:32.690 --> 00:19:34.760
on a team, you said
seven or eight people who

380
00:19:34.760 --> 00:19:39.620
work on the editor. Yeah,
probably. Yeah. There's probably, I

381
00:19:39.620 --> 00:19:41.090
feel bad if I give
the wrong number of people,

382
00:19:42.380 --> 00:19:44.180
you know, a handful of
devs, probably. There's probably about

383
00:19:44.180 --> 00:19:48.440
20 people. Total project managers,
developers, testers that work on

384
00:19:48.440 --> 00:19:54.110
the editor. And are, are
they mostly newer Microsoft employees

385
00:19:54.710 --> 00:19:58.640
or are they old dudes?
We got one guy who,

386
00:19:58.720 --> 00:20:00.890
who got his 15 year,
not too long ago, but

387
00:20:00.920 --> 00:20:04.580
other than him, it's mostly
a bunch of young guys.

388
00:20:04.880 --> 00:20:09.980
We got one. I mean
our architect who, who playfully

389
00:20:09.980 --> 00:20:12.560
refers to me as the
one of those open source

390
00:20:12.560 --> 00:20:14.660
communists and see, this is
what I was kind of

391
00:20:14.660 --> 00:20:18.080
going at All this stuff
about like, Oh yeah, let

392
00:20:18.080 --> 00:20:22.010
them go nuts. Total extensibility
seems kind of not Microsofty

393
00:20:22.910 --> 00:20:24.770
I guess. I mean, I
I've heard that. I mean,

394
00:20:24.770 --> 00:20:25.940
I'm not trying to, when
I say, Oh, I want

395
00:20:25.940 --> 00:20:27.530
to make sure that the
listeners understand when I say

396
00:20:27.560 --> 00:20:31.850
old, dude, I'm not talking
about old in age or

397
00:20:31.850 --> 00:20:34.610
even old in seniority. I'm
talking about old and mind.

398
00:20:34.700 --> 00:20:36.380
Right. I've met a lot
of 23 year olds that

399
00:20:36.380 --> 00:20:38.870
were old in their minds.
You know what I mean?

400
00:20:39.110 --> 00:20:42.320
But this seems to be
a very relaxed and mellow,

401
00:20:42.320 --> 00:20:44.360
like, Oh yeah, let them
have that as an extensibility

402
00:20:44.360 --> 00:20:46.880
point. Right? You, you would
be surprised. I mean, so

403
00:20:48.370 --> 00:20:52.180
people are really excited about
the, the community that we

404
00:20:52.180 --> 00:20:55.960
can create from this about
letting people have the power

405
00:20:55.960 --> 00:20:59.470
to create whatever they want
and not restricting them. And

406
00:20:59.830 --> 00:21:01.520
I mean, our partners tell
us the same thing. Our

407
00:21:01.570 --> 00:21:05.440
partners, outside of visual studio,
like blend, like they blend

408
00:21:05.440 --> 00:21:07.480
and PowerShell. They tell us,
you know, they, they love

409
00:21:07.480 --> 00:21:09.700
that. They can just, they
can take this editor and

410
00:21:09.700 --> 00:21:11.970
mold it into whatever they
want it to be. I

411
00:21:11.970 --> 00:21:14.250
think about my, you know,
my good friends at like

412
00:21:14.670 --> 00:21:18.060
dev express, like code rush,
and code rush has been

413
00:21:18.060 --> 00:21:21.360
doing like, like what? I
can only describe as impossible.

414
00:21:21.630 --> 00:21:26.760
Yes. Oh yeah. You know,
half a decade with the

415
00:21:26.760 --> 00:21:29.160
old editor and when the
new editor came out, I

416
00:21:29.160 --> 00:21:31.080
was like, Oh no, what
does this mean for code

417
00:21:31.080 --> 00:21:33.330
rush? I'm starting to realize
more and more as I

418
00:21:33.330 --> 00:21:34.710
dig into it, that they're
going to be able to

419
00:21:34.710 --> 00:21:38.520
go Bonkers. So, and we've,
we've been working with, we've

420
00:21:38.520 --> 00:21:40.470
been working with all these
great, all these great companies

421
00:21:40.470 --> 00:21:42.030
that are making these. And
like you said, it really

422
00:21:42.030 --> 00:21:46.580
is the things they do
are really, they're impossible. The

423
00:21:46.650 --> 00:21:49.350
hoops, the hurdles, they have
to jump over to do

424
00:21:49.350 --> 00:21:51.390
it, to get what they
have to do for some

425
00:21:51.390 --> 00:21:54.120
of the, like the really
cool visualizations it's, it's painful.

426
00:21:54.140 --> 00:21:56.670
And, you know, we showed
them this stuff. And personally,

427
00:21:56.670 --> 00:21:58.050
I was wondering the same
thing. Are they going to

428
00:21:58.050 --> 00:22:01.590
be that we're making it
so easy, but no, they

429
00:22:01.590 --> 00:22:03.870
come around and they're like,
this is, it's so much

430
00:22:03.870 --> 00:22:06.810
fun. I mean, we we've
heard from various people, you

431
00:22:06.810 --> 00:22:08.700
know, it's, it's so much
fun to work with. It's

432
00:22:08.700 --> 00:22:12.090
so much easier. Yeah. They
love that. It's managed code.

433
00:22:12.090 --> 00:22:14.370
I mean, that's one of
those And you, like you

434
00:22:14.370 --> 00:22:16.140
said, and, and it's, it's,
it's fast as it was

435
00:22:16.140 --> 00:22:19.830
before. I mean, people, people
still people still years and

436
00:22:19.830 --> 00:22:23.940
years later think that managed
code can't run fast. Oh

437
00:22:23.940 --> 00:22:26.790
yeah. But that's just, it's
not the case. I remember

438
00:22:27.540 --> 00:22:29.310
one of the things that
I wrote when I first

439
00:22:29.310 --> 00:22:31.320
got here was a different
thing service. So we have

440
00:22:31.320 --> 00:22:34.080
a text, a generalized differencing
service, and we do this

441
00:22:34.080 --> 00:22:36.660
text, differencing in the editor
for various things and different

442
00:22:36.660 --> 00:22:39.060
thing in the editor for
various things. And I wrote

443
00:22:39.060 --> 00:22:40.350
it in C sharp and
a lot of people were

444
00:22:40.350 --> 00:22:43.110
saying, you know, Oh, well
it's managed code. It's going

445
00:22:43.150 --> 00:22:48.360
be horrible. And comparing it
against like the new, you

446
00:22:48.360 --> 00:22:50.670
know, Def it's little bit
slower because startup costs for,

447
00:22:50.730 --> 00:22:54.690
for.net. But man, it's really,
there's, there's not a lot

448
00:22:54.690 --> 00:22:57.120
of difference once you get
into it. Now, now one

449
00:22:57.120 --> 00:22:58.440
of the other things I
wanted to ask is that,

450
00:22:58.770 --> 00:23:01.350
you know, how do you
develop an editor in the

451
00:23:01.350 --> 00:23:04.080
same editor, I assume, are
you using dev tend to

452
00:23:04.080 --> 00:23:08.250
develop DenTek dev 10. Yeah.
Do you have like host

453
00:23:08.250 --> 00:23:10.530
applications that host this thing?
Or do you have two

454
00:23:10.530 --> 00:23:12.420
versions of visual studio running
at the time? I mean,

455
00:23:12.420 --> 00:23:15.450
we have, like, we have
test harnesses type things that,

456
00:23:15.450 --> 00:23:17.310
like I said, cause it's
rehost double. We can run

457
00:23:17.310 --> 00:23:21.660
it. But because we rely
on, like I said, these,

458
00:23:21.670 --> 00:23:24.150
these language services that have
to be in visual studio,

459
00:23:24.150 --> 00:23:28.260
they depend on, on the
visual studio ecosystem. Right. Do

460
00:23:28.260 --> 00:23:29.520
you have to test a
lot of our stuff in

461
00:23:29.520 --> 00:23:32.790
VR? So it does, it
does get hairy when somebody

462
00:23:32.790 --> 00:23:35.940
checks in the thing that
breaks the whatever, and now

463
00:23:35.940 --> 00:23:37.890
you can't use it anymore,
but we try to be

464
00:23:37.890 --> 00:23:40.380
pretty good about making sure
that we maintain quality. I

465
00:23:40.380 --> 00:23:41.940
mean, so one of the
things we care a lot

466
00:23:41.940 --> 00:23:45.410
about is, is unit testing
and code coverage on editor

467
00:23:45.410 --> 00:23:48.380
team. And, you know, we
get our daily code coverage

468
00:23:48.860 --> 00:23:50.570
builds and it's important that
we keep it at a

469
00:23:50.570 --> 00:23:55.430
certain level and we get
a lot of benefit out

470
00:23:55.430 --> 00:23:57.160
of it. Do you do
test driven development? You write

471
00:23:57.160 --> 00:24:03.130
your test first? No, not
yet. You feel bad? Well,

472
00:24:03.130 --> 00:24:05.050
I was trying to think
if anybody, I mean, individual

473
00:24:05.050 --> 00:24:08.200
people might Like, you know,
watch it fail and then

474
00:24:08.200 --> 00:24:10.390
fix it and then watch
it succeed. I dunno if

475
00:24:10.390 --> 00:24:12.610
anybody, I don't, I don't
know. I'm trying to think

476
00:24:12.610 --> 00:24:15.520
anybody individually. I don't think
anybody individually does that, but

477
00:24:15.730 --> 00:24:17.380
we do spend a lot
of time on it and

478
00:24:18.070 --> 00:24:21.250
part, because a lot of
our stuff is functional. Data

479
00:24:21.250 --> 00:24:24.610
structures is immutable. It makes
unit testing a lot easier

480
00:24:25.420 --> 00:24:27.100
because you have to worry
less of it. So when

481
00:24:27.100 --> 00:24:32.050
we get into testing the
interface, user interface testing, and

482
00:24:32.080 --> 00:24:35.650
this integration testing, it gets
a little more complicated, but

483
00:24:35.650 --> 00:24:39.190
when we're testing like the
buffer and snapshots and all

484
00:24:39.190 --> 00:24:42.160
these other things we built
down there and there's, there's

485
00:24:42.160 --> 00:24:45.160
a, a wealth of, of
things that we've built down

486
00:24:45.160 --> 00:24:48.490
in our data level for
people to discover. But it's

487
00:24:48.490 --> 00:24:52.750
so easy to test because
it's just functional immutable data

488
00:24:52.750 --> 00:24:55.750
structures. Now, how often are
your tests really unit tests

489
00:24:55.780 --> 00:25:00.070
versus integration tests or orchestration
tests where you've got a

490
00:25:00.070 --> 00:25:02.560
bug, but it only happens
when you've got these subsystems

491
00:25:02.560 --> 00:25:04.960
all working together and you
bring it to you. Part

492
00:25:04.960 --> 00:25:07.630
of the nice thing again,
about being about being functional

493
00:25:07.630 --> 00:25:10.420
and immutable is that our
unit tests are pretty good.

494
00:25:11.260 --> 00:25:14.350
A coverage of what's going
to happen even when you

495
00:25:14.350 --> 00:25:17.260
integrate. So we do have
like, I mean, we do

496
00:25:17.260 --> 00:25:21.340
have integration tests that effectively
do the, make sure that

497
00:25:21.340 --> 00:25:25.330
when the selection moves here
and you press delete or

498
00:25:25.330 --> 00:25:28.240
you press whatever that all
these things happen and all

499
00:25:28.240 --> 00:25:31.510
these subsystems work together. Right.
And make sure that this

500
00:25:31.510 --> 00:25:35.350
text turns blue when, when
whatever, but we don't rely

501
00:25:35.350 --> 00:25:38.740
on those heavily. We rely
mostly on our unit test

502
00:25:38.740 --> 00:25:41.500
to tell us what's going
on. You test those kinds

503
00:25:41.500 --> 00:25:43.450
of things. Like the example
you just gave, you know,

504
00:25:43.450 --> 00:25:45.730
hit, delete this turns, blue
hit delete. Again, it turns

505
00:25:45.730 --> 00:25:48.040
black. Is that something that
you can test at the

506
00:25:48.040 --> 00:25:50.230
data layer of your three
layers or do you actually

507
00:25:50.260 --> 00:25:52.390
have an orchestration and you
watch it happen on the

508
00:25:52.390 --> 00:25:54.940
screen. And you're, you know,
an invisible hand is typing

509
00:25:54.940 --> 00:25:58.720
delete Test. So we do
some of our UI tests

510
00:25:58.720 --> 00:26:01.510
do bring up UI and
you can see like IntelliSense

511
00:26:01.510 --> 00:26:03.190
or you can, it opens
up the thing and you

512
00:26:03.190 --> 00:26:08.330
can see the dropdown open
up. But our, I mean

513
00:26:08.330 --> 00:26:10.960
our data test Taylor tests,
our data things we can

514
00:26:10.960 --> 00:26:13.720
test at the logic level.
We can test the classification,

515
00:26:13.720 --> 00:26:16.540
does what it says. We
can test that you have

516
00:26:16.540 --> 00:26:20.140
three classifiers and they all
provide things. And at the

517
00:26:20.140 --> 00:26:23.200
top of all, all of
these buffers, you know, it

518
00:26:23.200 --> 00:26:26.500
comes out the way you
expect. And then at some

519
00:26:26.500 --> 00:26:28.810
level of the UI on
top of that is just,

520
00:26:28.870 --> 00:26:32.200
you know, we test to
make sure that the translation

521
00:26:32.200 --> 00:26:36.280
from classification type to classification
format, this WPF thing works

522
00:26:36.880 --> 00:26:39.820
and you stick it all
together and it, it works.

523
00:26:40.800 --> 00:26:42.490
You think you have, like,
you have thousands of tests

524
00:26:42.490 --> 00:26:44.100
at this point. How long
does it take to run

525
00:26:44.100 --> 00:26:48.170
all the tests To run
all of our unit tests?

526
00:26:49.580 --> 00:26:53.570
Maybe 10 minutes. So there's
a lot of tests. Yeah.

527
00:26:53.810 --> 00:26:55.640
It's not like you don't
like build, test, build, test,

528
00:26:55.640 --> 00:26:57.380
build test, because it takes
10 minutes to run them.

529
00:26:57.860 --> 00:27:00.620
Right. I mean, so we
can, because everything is very

530
00:27:00.620 --> 00:27:03.110
localized and make a change
to classification. It's really easy

531
00:27:03.110 --> 00:27:09.290
to run the classification unit
tests, but yeah, the, the

532
00:27:09.290 --> 00:27:13.160
editor unit tests and integration
tests, and we split them

533
00:27:13.160 --> 00:27:16.220
out separately too. Like we
have texts, tests and language

534
00:27:16.220 --> 00:27:20.510
tests and various levels there.
Probably about 10 minutes. Yeah.

535
00:27:21.200 --> 00:27:22.850
Okay. There are a couple
more questions this, as we

536
00:27:22.850 --> 00:27:25.250
wrap up here, so what
did you work on today?

537
00:27:25.430 --> 00:27:26.840
Like what code did you
write today? Or what did

538
00:27:26.840 --> 00:27:32.120
you fix today? See a
fixed two different bugs. And

539
00:27:32.720 --> 00:27:37.130
recently I've been working a
lot on performance. Okay. So

540
00:27:37.130 --> 00:27:40.610
a lot of profiling and
trying to figure out, making

541
00:27:40.610 --> 00:27:43.970
sure, like, like I said,
that we maintain your expectations

542
00:27:44.940 --> 00:27:48.020
and there's a city of
2010 And are those expectations,

543
00:27:48.020 --> 00:27:51.200
like things like I open
a 55 Meg text file

544
00:27:51.200 --> 00:27:52.880
and it was slow. Is
it that kind of thing?

545
00:27:52.940 --> 00:27:56.390
Yeah. Those are large file
scenarios are absolutely some of

546
00:27:56.390 --> 00:27:58.220
the things that we look
at. And, and we're, we're

547
00:27:58.220 --> 00:28:03.770
very, we're very careful that
the relative performance of some

548
00:28:03.770 --> 00:28:07.820
component isn't relative to file
size, it's either relative to

549
00:28:07.820 --> 00:28:10.550
what's visible or relative to
what changed or relative to

550
00:28:10.550 --> 00:28:13.220
things like this. A lot
of it is just, you

551
00:28:13.220 --> 00:28:16.250
know, trying to localize and
minimize the impact of various

552
00:28:16.250 --> 00:28:19.970
actions that you take in
the editor. Very cool. And

553
00:28:19.970 --> 00:28:21.950
I assume there'll be like
a hole at some point

554
00:28:21.950 --> 00:28:24.140
in the future. There'll be
a whole SDK and anyone

555
00:28:24.140 --> 00:28:26.180
who is interested in this
can get involved in and

556
00:28:26.180 --> 00:28:30.560
people can start writing. Oh,
absolutely. And like you said,

557
00:28:30.560 --> 00:28:32.570
for, you know, if you,
if you get the CTP,

558
00:28:33.290 --> 00:28:35.030
you can, I mean, the
editors there now. Okay. So

559
00:28:35.030 --> 00:28:36.560
they can start in any
way it was using meth

560
00:28:36.560 --> 00:28:38.210
in the CTP. So you
can start doing that now

561
00:28:39.070 --> 00:28:41.690
To, to start building your
own extensions. We have some

562
00:28:41.690 --> 00:28:43.880
samples in there. So they
show you The heroic sensibility

563
00:28:43.880 --> 00:28:47.870
samples already in the seat.
We have various various things.

564
00:28:47.870 --> 00:28:49.880
I know one of the
things we showed, one of

565
00:28:49.880 --> 00:28:53.300
the apps we built is
a different thing. Application where

566
00:28:53.300 --> 00:28:55.130
it shows, it's just, it's
an inline difference. So you

567
00:28:55.130 --> 00:28:56.960
know, a difference, two things,
and you can edit it

568
00:28:57.500 --> 00:28:59.480
and type in it. And
you get all of your,

569
00:28:59.510 --> 00:29:02.930
you get IntelliSense, you get
in the middle and in

570
00:29:02.930 --> 00:29:04.850
the middle of your desk,
you get it all like

571
00:29:04.850 --> 00:29:07.070
that. So I mean, something
like that's a little more

572
00:29:07.070 --> 00:29:10.130
complicated, but these are all
things that we absolutely want

573
00:29:10.130 --> 00:29:14.030
people to download and try.
Like, for me, that's the

574
00:29:14.030 --> 00:29:18.590
value of, of, of, of
a platform is how much

575
00:29:18.590 --> 00:29:22.220
it enables people to build
on it. Yeah. See, I've

576
00:29:22.220 --> 00:29:24.920
always wanted to have my
buddy of mine named Travis,

577
00:29:25.760 --> 00:29:29.540
built a thing called documenter
that basically takes the XML

578
00:29:29.540 --> 00:29:31.730
help and shows you what
it would look like. If

579
00:29:31.730 --> 00:29:35.390
you ran it through like
an Docker skin sandcastle, I've

580
00:29:35.390 --> 00:29:38.750
always wanted to have a
rich text, MSDN style editor

581
00:29:39.350 --> 00:29:42.160
overlaid over my XML docs.
I would just type it

582
00:29:42.190 --> 00:29:45.240
and then it would just
make the right XML. Absolutely.

583
00:29:45.450 --> 00:29:48.090
Totally. So that's, that's, that's
something, in fact, that's something

584
00:29:48.090 --> 00:29:49.950
like, people here have been
like, this is something we

585
00:29:49.950 --> 00:29:51.690
need to do. This is
something we should play with.

586
00:29:51.990 --> 00:29:54.630
I mean, people here, we,
we have these application building

587
00:29:54.630 --> 00:29:57.030
weeks and people just get,
they get so excited, like

588
00:29:57.030 --> 00:29:59.400
think about the cool things
that you can build now

589
00:29:59.400 --> 00:30:02.040
that you don't have to
worry about. It's nice to

590
00:30:02.040 --> 00:30:05.940
look at an API and
not go, Oh man, I

591
00:30:05.940 --> 00:30:08.190
can't do that. You know
what I'm saying? Yeah. But

592
00:30:08.190 --> 00:30:11.310
to see a whole, a
whole object model, a series

593
00:30:11.310 --> 00:30:15.780
of subsystems, a nice a
plugin, a management system, like

594
00:30:15.780 --> 00:30:17.970
meth, I think I'll have
Glenn block on the show

595
00:30:17.970 --> 00:30:19.590
next and he can talk
about Memphis has been fun

596
00:30:19.590 --> 00:30:23.010
working with meth. Yeah. I
mean, so we've, we've yeah.

597
00:30:23.040 --> 00:30:25.800
We've, we've gone through a
few different like component systems.

598
00:30:25.800 --> 00:30:29.190
As, as, as they've been
building, they rough math and

599
00:30:29.190 --> 00:30:31.110
we pick it up and
we give them feedback and

600
00:30:31.140 --> 00:30:33.150
they're all great guys. They,
I mean, they Was, it

601
00:30:33.180 --> 00:30:35.370
was that a big deal
to say, all right, we're

602
00:30:35.370 --> 00:30:37.890
taking a dependency on meth.
Now from the beginning, the

603
00:30:37.890 --> 00:30:41.250
editor has, has said, we're
going to, we're going to

604
00:30:41.250 --> 00:30:44.730
be effectively using a component
system. We're going to push

605
00:30:44.730 --> 00:30:47.580
ourselves into components. We're going
to separate as we need

606
00:30:47.580 --> 00:30:49.890
to. And so math was
kind of just the next

607
00:30:49.890 --> 00:30:52.350
iteration in this stuff we
had been, we had been

608
00:30:52.350 --> 00:30:55.950
working with for so long.
Cool. All right. Well, thanks

609
00:30:55.950 --> 00:30:57.990
so much nor Richard for
talking to me today about

610
00:30:57.990 --> 00:31:01.140
the new WPF base editor
in dev 10 and visual

611
00:31:01.140 --> 00:31:04.440
studio, 2010. Thanks very much.
This has been another episode

612
00:31:04.440 --> 00:31:06.720
of Hansel minutes and I'll
see you again next week.

