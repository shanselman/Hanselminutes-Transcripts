WEBVTT FILE

1
00:00:12.900 --> 00:00:18.180
Hansel minutes.com. It's Hansel minutes.
Oh, weekly discussion with web

2
00:00:18.180 --> 00:00:22.890
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.890 --> 00:00:29.700
number three 84. Recorded live
Thursday, August eight, 2013. Support

4
00:00:29.700 --> 00:00:32.940
for Hansel minutes is provided
by teller. Offering the best

5
00:00:32.940 --> 00:00:42.300
in developer tools and support
online@telerikdotcomandbyfranklins.net makers of gesture pack

6
00:00:42.780 --> 00:00:46.440
a powerful gesture, recording and
recognition system for Microsoft connect

7
00:00:46.560 --> 00:00:53.820
for windows developers details@gesturepak.com. In
this episode, Scott talks with

8
00:00:53.880 --> 00:01:00.330
Dino villain about Python tools
for visual studio. Hi, this

9
00:01:00.330 --> 00:01:02.490
is Scott Hanselman. This is
another episode of Hansel minutes.

10
00:01:02.520 --> 00:01:05.490
And on the phone I've
got Dino Vieland from Microsoft.

11
00:01:05.490 --> 00:01:07.950
How's it going? Good. How
are you doing Scott? Very

12
00:01:07.950 --> 00:01:13.830
well. You have been doing
Python at Microsoft, like as

13
00:01:13.830 --> 00:01:15.990
a full time job. You're
a dev for how many

14
00:01:15.990 --> 00:01:20.430
years? It's been about seven
so far. So why does

15
00:01:20.430 --> 00:01:23.610
Microsoft have a Python person
on staff and how are

16
00:01:23.610 --> 00:01:26.490
they letting you do this
for seven years? Well, it

17
00:01:26.490 --> 00:01:31.290
started with iron Python, which
was an effort to get

18
00:01:31.320 --> 00:01:35.760
Python running on.net. And, you
know, there was a lot

19
00:01:35.760 --> 00:01:41.010
of interest in.net and there
wasn't a really great scripting

20
00:01:41.010 --> 00:01:46.200
story for.net. So Jim Hugin
started off initially trying to

21
00:01:46.230 --> 00:01:51.210
prove that.net wasn't a good
platform for doing dynamic languages

22
00:01:51.600 --> 00:01:56.190
and ended up proving the
opposite. So shortly after doing

23
00:01:56.190 --> 00:01:59.970
that, he came and joined
Microsoft and I was on

24
00:01:59.970 --> 00:02:04.020
the CLR team at that
point in time. And shortly

25
00:02:04.020 --> 00:02:07.410
after he joined, I switched
to iron Python, which was

26
00:02:07.410 --> 00:02:11.370
also being incubated inside of
the CLR team. And that

27
00:02:11.370 --> 00:02:14.550
was my first experience with
Python. And so I got

28
00:02:14.550 --> 00:02:18.390
to learn it by implementing
it and it was a

29
00:02:18.390 --> 00:02:20.190
lot of fun. And so
I've stuck with it since

30
00:02:20.190 --> 00:02:22.830
then. And one form or
another, were you a Python

31
00:02:22.830 --> 00:02:26.370
fan like before? No, I
was actually scared away by

32
00:02:26.370 --> 00:02:30.090
the significant white space, which
is really not an issue

33
00:02:30.090 --> 00:02:33.210
at all. That that was
your, that was your fear,

34
00:02:33.360 --> 00:02:34.910
like of all the things
you could be afraid of.

35
00:02:34.920 --> 00:02:38.310
It was white space. Yeah.
I mean, it, it just

36
00:02:38.310 --> 00:02:40.140
seemed kind of crazy to
me at the time and

37
00:02:40.140 --> 00:02:43.530
you know, that was just
my own ignorance. You know,

38
00:02:43.530 --> 00:02:46.140
I was very used to
the squiggly brackets in my

39
00:02:46.140 --> 00:02:49.560
code and you know what,
you know, this is crazy,

40
00:02:49.560 --> 00:02:51.480
you know, it's all based
off on white space. And

41
00:02:51.480 --> 00:02:53.280
so I just, I never
really gave it the time

42
00:02:53.280 --> 00:02:59.070
of day, but it seemed
really interesting from a language

43
00:02:59.080 --> 00:03:02.410
implementation perspective. And that's what
drew drew me to it

44
00:03:02.410 --> 00:03:08.070
initially. And you know, and
now The, the team is

45
00:03:08.070 --> 00:03:10.380
pretty small though, right? Like
there's not a lot of

46
00:03:10.380 --> 00:03:15.210
people over there. Right. So
I'm working on PTVs today.

47
00:03:15.210 --> 00:03:20.340
We have four developers in
two testers and 1:00 PM. So

48
00:03:20.550 --> 00:03:23.130
it's not a big team.
And we actually split our

49
00:03:23.130 --> 00:03:26.940
time between PTVs and some
other efforts that we occasionally

50
00:03:26.940 --> 00:03:30.090
work on Do. So, I
mean, is this under, like,

51
00:03:30.090 --> 00:03:31.620
I want to get a
sense of this, right? Like,

52
00:03:31.620 --> 00:03:34.560
is this under the radar?
Are you guys doing something

53
00:03:34.890 --> 00:03:36.870
you shouldn't be doing and
just no one has noticed

54
00:03:36.870 --> 00:03:40.350
yet? No. I mean, our
management is aware of what

55
00:03:40.350 --> 00:03:44.100
we're doing and we try
to tie in what we're

56
00:03:44.100 --> 00:03:48.810
doing into our overall efforts.
So it's not a complete

57
00:03:48.810 --> 00:03:52.770
skunkworks project or anything like
that. They support us. And,

58
00:03:53.640 --> 00:03:56.490
you know, in return we
try to support their efforts

59
00:03:56.490 --> 00:04:00.300
too. But give me some
historical context, because I remember

60
00:04:00.300 --> 00:04:04.470
that like when John Lamb and
the DLR folks were all

61
00:04:04.470 --> 00:04:07.500
off doing dynamic language one
time, there was this kind

62
00:04:07.500 --> 00:04:11.370
of like excitement around iron
Ruby and iron Python. Yeah.

63
00:04:11.670 --> 00:04:14.400
And, and then, and then
this is what people would

64
00:04:14.400 --> 00:04:16.650
say, and I'm kind of
speaking for the public, like,

65
00:04:16.980 --> 00:04:20.730
and then Microsoft killed them
all and declared these languages

66
00:04:20.730 --> 00:04:23.520
suck and will never support
them and then fired everyone.

67
00:04:23.520 --> 00:04:26.280
And the team was disbanded
and cut into small pieces.

68
00:04:26.760 --> 00:04:29.490
Well, we didn't Entirely kill
them. It's more like we

69
00:04:29.490 --> 00:04:33.810
release them to a farm
upstate, right. We worked with

70
00:04:33.810 --> 00:04:38.400
the community and we got
several key players involved and

71
00:04:38.400 --> 00:04:41.220
we handed off iron Python
and iron Ruby to the

72
00:04:41.220 --> 00:04:43.680
community in a way that,
you know, they continue to

73
00:04:43.680 --> 00:04:48.120
evolve. Iron Python in particular,
saw a huge amount of

74
00:04:48.120 --> 00:04:52.740
immediate benefit when we released
it, because there was a

75
00:04:52.740 --> 00:04:55.260
bunch of stuff we weren't
taking contributions back to the

76
00:04:55.260 --> 00:04:58.560
project. Cause there's always this
concern of what we might

77
00:04:58.560 --> 00:05:01.020
want to ship it in
the box somewhere. And people

78
00:05:01.230 --> 00:05:04.530
were nervous about that. And
so there was a bunch

79
00:05:04.530 --> 00:05:07.290
of pent up work that
could easily just flow into

80
00:05:07.290 --> 00:05:09.540
the project. So it, it
saw a bunch of immediate

81
00:05:09.540 --> 00:05:13.530
benefits. What's the, what's the
difference though, between like releasing

82
00:05:13.530 --> 00:05:15.210
it to open source because
we want to kill it

83
00:05:15.210 --> 00:05:18.510
and just throw it over
the wall versus like making

84
00:05:18.510 --> 00:05:21.300
it open source and having
it continue because it seems

85
00:05:21.300 --> 00:05:23.550
to me and do correct
me if I'm wrong. That

86
00:05:23.580 --> 00:05:27.840
iron Python is, is doing
pretty well. It's quite healthy.

87
00:05:28.080 --> 00:05:30.660
And iron Ruby though is
kind of chilling. It's not

88
00:05:30.660 --> 00:05:34.650
really doing much. Yeah. It
that, No, it definitely didn't

89
00:05:34.650 --> 00:05:38.910
get quite the same amount
of interest in it. I

90
00:05:38.910 --> 00:05:41.070
think that is just kind
of iron Python was a

91
00:05:41.070 --> 00:05:45.870
little more mature. Iron Ruby
is also, you know, Ruby

92
00:05:45.870 --> 00:05:49.950
is a more challenging language
in itself. So while iron

93
00:05:49.950 --> 00:05:52.740
Python, you know, it showed
some great performance benefits over

94
00:05:52.740 --> 00:05:56.190
C Python, Ruby, that was
always more challenging so that

95
00:05:56.190 --> 00:05:58.940
might've had something to, with
it as well. And there's

96
00:05:58.940 --> 00:06:01.910
just the fact, you know,
I think Python probably gets

97
00:06:01.910 --> 00:06:06.380
more broad adoption than Ruby
does as well. It's used

98
00:06:06.380 --> 00:06:09.890
in a bunch of different
areas, whether it's web development,

99
00:06:09.890 --> 00:06:14.810
which Ruby shares or whether
it's technical computing or any

100
00:06:14.810 --> 00:06:18.920
other number of areas where
people are actively doing Python

101
00:06:18.920 --> 00:06:21.230
development. And there's a huge
amount of libraries for those

102
00:06:21.230 --> 00:06:24.260
other areas. So I think
it's just a little more

103
00:06:24.260 --> 00:06:26.570
mature than Ruby and that
probably helped it out as

104
00:06:26.570 --> 00:06:31.280
well. But you know, they
both, to a certain extent,

105
00:06:31.310 --> 00:06:34.370
suffered a little bit longer
term, you know, it helps

106
00:06:34.370 --> 00:06:36.290
when you have people who
are working full time on

107
00:06:36.290 --> 00:06:40.490
them and there's, there's no
substitute for that. So there

108
00:06:40.490 --> 00:06:45.140
was pluses and minuses. I
think the nice thing about

109
00:06:45.140 --> 00:06:50.590
it is that it Really
changed The way that Microsoft

110
00:06:50.590 --> 00:06:54.070
focused on Python. And so
we are very focused about

111
00:06:54.070 --> 00:06:57.910
taking Python and getting it
running on.net, which is on

112
00:06:57.910 --> 00:07:00.940
our platform. And that's interesting
to a lot of people,

113
00:07:01.180 --> 00:07:03.700
but if you look at
what the bulk of Python

114
00:07:03.700 --> 00:07:07.570
developers are using, it's actually
C Python. And so kind

115
00:07:07.570 --> 00:07:11.200
of moving to see Python
and embracing the Python developers

116
00:07:11.200 --> 00:07:14.350
where they're at. I think
that was, you know, despite

117
00:07:14.350 --> 00:07:19.060
the hecticness, the hectic ness
of having your project canceled,

118
00:07:19.690 --> 00:07:22.630
I think it's a good
longterm outcome. So when you

119
00:07:22.630 --> 00:07:26.740
say canceled, that means that
Microsoft was no longer going

120
00:07:26.740 --> 00:07:31.240
to pay people full time
to work on, on iron

121
00:07:31.240 --> 00:07:35.140
Python, on iron Ruby. Yes.
Instead you're saying that they

122
00:07:35.140 --> 00:07:37.570
wanted to see if they
would kind of exist on

123
00:07:37.570 --> 00:07:41.110
their own. And the Ruby
community was just like, eh,

124
00:07:41.380 --> 00:07:45.160
don't really want Ruby on
the CLR. So, So I

125
00:07:45.160 --> 00:07:47.950
wouldn't say that Microsoft really
wanted to see if they

126
00:07:47.950 --> 00:07:51.130
would exist on their own.
That wasn't really the reasoning,

127
00:07:51.130 --> 00:07:54.520
right? The reasoning was all
about resources and where do

128
00:07:54.520 --> 00:07:57.610
we want to allocate our
resources? And so it happened

129
00:07:57.610 --> 00:08:01.570
that the team that I
was on, they were feeling

130
00:08:01.570 --> 00:08:04.060
a bit of a crunch
resource wise. And so it

131
00:08:04.060 --> 00:08:07.690
was kind of what goes,
and it wasn't like that

132
00:08:07.690 --> 00:08:10.960
team then picked up and
started doing other Python development.

133
00:08:10.990 --> 00:08:14.170
I actually went and joined
another team, the start R

134
00:08:14.170 --> 00:08:18.070
Python tools for visual studio
effort. So it was interesting

135
00:08:18.070 --> 00:08:20.740
for me because I actually
got to take my code

136
00:08:20.740 --> 00:08:25.090
base from iron Python and
move significant parts of it

137
00:08:25.090 --> 00:08:28.240
over. We were already working
on visual studio tooling, so

138
00:08:28.240 --> 00:08:30.670
that moved over and I
got to take my code

139
00:08:30.670 --> 00:08:34.120
base and go join a
new team after having my

140
00:08:34.150 --> 00:08:39.610
job eliminated. Oh, wow. Yeah.
So iron Ruby is in

141
00:08:39.610 --> 00:08:41.680
the community right now, but
it's just kind of not

142
00:08:41.680 --> 00:08:44.260
doing anything. Right. So like,
I wouldn't want to bet

143
00:08:44.260 --> 00:08:47.020
my whole company on iron
Ruby. I wouldn't Your whole

144
00:08:47.020 --> 00:08:50.110
company on it, but there
are still people contributing to

145
00:08:50.110 --> 00:08:54.760
it in particular Tomas, who
was the lead developer on

146
00:08:54.760 --> 00:08:58.410
iron. He still contributes to
it. He's working on things

147
00:08:58.410 --> 00:09:02.970
like you getting it running
on windows, phone eight and

148
00:09:03.030 --> 00:09:06.440
other platforms like that. So,
Yeah. So that means I

149
00:09:06.440 --> 00:09:10.100
might want to use that
for scripting or integrating existing

150
00:09:10.100 --> 00:09:14.330
Ruby code with stuff that
I'm doing and.net. Yep. Yeah.

151
00:09:14.390 --> 00:09:17.300
And in fact, I think
iron Ruby is further along

152
00:09:17.330 --> 00:09:22.070
in its support for the
different profiles I'm running on

153
00:09:22.070 --> 00:09:25.220
windows phone, running on windows
eight, then iron Python is

154
00:09:25.220 --> 00:09:28.220
actually, and that's due to
his efforts. Okay. That's pretty

155
00:09:28.220 --> 00:09:31.550
cool. Yeah. Okay. Now, when
I look at the iron

156
00:09:31.550 --> 00:09:38.240
Python code Plex page, iron
python.covid.com, it says current version

157
00:09:38.240 --> 00:09:41.900
two 73, and it has
a date of 2012, which

158
00:09:41.900 --> 00:09:44.540
might lead someone to say,
Oh, that's that's dead or

159
00:09:44.540 --> 00:09:47.870
done or on pause. But
if I go to Python

160
00:09:47.870 --> 00:09:52.310
tools for visual studio, which
is PI tools.co Plex, it's

161
00:09:52.310 --> 00:09:54.920
like a hotbed of activity.
What is the difference between

162
00:09:54.920 --> 00:09:58.460
those two things? So iron
Python does have a more

163
00:09:58.460 --> 00:10:02.780
recent release, but it's a
beta release. So 2.7 0.4

164
00:10:02.780 --> 00:10:05.150
beta is available, but you're
just not going to see

165
00:10:05.150 --> 00:10:10.790
it on the main site
as the prominent download. There's

166
00:10:10.790 --> 00:10:14.210
also iron pythons activity. If
you look at code Plex,

167
00:10:14.210 --> 00:10:16.490
you're not going to see
a lot of activity there

168
00:10:16.730 --> 00:10:20.030
because it's actually all hosted
on GitHub. So when we

169
00:10:20.030 --> 00:10:25.040
released the languages before they
were in silos where iron

170
00:10:25.040 --> 00:10:28.370
Python source code was hosted
on code Plex and Ruby's

171
00:10:28.370 --> 00:10:32.180
was over on get hub.
But internally we're all in

172
00:10:32.180 --> 00:10:35.480
one source repo. And we
would push out to the

173
00:10:35.510 --> 00:10:38.300
various places, the things that
we needed. And we knew

174
00:10:38.300 --> 00:10:41.780
that wasn't going to work
for the community because there

175
00:10:41.780 --> 00:10:44.060
were shared components between them
and they needed to be

176
00:10:44.060 --> 00:10:48.740
developed together. So when that
went out, everything moved to

177
00:10:48.740 --> 00:10:51.500
get hub, as far as
source control goes. So you

178
00:10:51.500 --> 00:10:55.910
can see some actual activity
going on there, PI tools.

179
00:10:55.940 --> 00:10:58.430
On the other hand, you
know, we do have four

180
00:10:58.430 --> 00:11:01.640
full time developers working on
it. And so there is

181
00:11:01.640 --> 00:11:04.070
a lot of activity on
PI tools and we host

182
00:11:04.070 --> 00:11:06.110
the entire thing on code
Plex. So you'll see our

183
00:11:06.110 --> 00:11:10.670
source commits and our issue
tracker and it's all there.

184
00:11:10.670 --> 00:11:13.070
So you're going to see
a lot of activity there.

185
00:11:13.880 --> 00:11:18.500
As we, during our releases,
we will not be pushing

186
00:11:18.500 --> 00:11:21.230
sources very often, but as
we get more and more

187
00:11:21.920 --> 00:11:24.860
stable, we just start pushing
individual bug fixes. And we're

188
00:11:24.860 --> 00:11:27.650
about to turn the corner
there. And so you can

189
00:11:27.650 --> 00:11:30.440
go to our source code
tab and you'll see commits

190
00:11:30.440 --> 00:11:34.760
basically every single day. And
so it, yes, it does

191
00:11:34.760 --> 00:11:38.090
look very active To explain
it to me as an

192
00:11:38.090 --> 00:11:42.320
ignorant person who used Python
in school, the difference between

193
00:11:42.320 --> 00:11:45.110
C Python and then iron
Python. I can spend a

194
00:11:45.350 --> 00:11:47.000
bit of the podcast at
the beginning here. We're talking

195
00:11:47.000 --> 00:11:49.730
about iron, this and iron
that these are all implementations

196
00:11:49.760 --> 00:11:54.940
of languages on.net, but see
Python is what Python program

197
00:11:54.940 --> 00:11:58.810
is used. So it seems
like Python tools supports multiple

198
00:11:58.810 --> 00:12:02.790
engines. It's like, plugable explain
the differences. Yeah. So iron

199
00:12:02.790 --> 00:12:05.700
Python is the version that's
running on dotnet and C

200
00:12:05.700 --> 00:12:10.260
Python is not surprisingly the
original version that is implemented

201
00:12:10.320 --> 00:12:15.900
in C there's, other implementation.
So there's implementation called PI,

202
00:12:16.500 --> 00:12:20.700
which is Python. That's actually
implemented in Python. And that

203
00:12:20.700 --> 00:12:24.810
might sound completely crazy, but
they have this entire tool

204
00:12:24.810 --> 00:12:31.140
chain, which actually produces a
G compiled Python implementation that

205
00:12:31.140 --> 00:12:34.320
is implemented in Python. So
you can take that implementation.

206
00:12:34.500 --> 00:12:37.320
You can run it just
as a Python script, or

207
00:12:37.320 --> 00:12:41.070
you can go through this
massive compilation process and get

208
00:12:41.070 --> 00:12:44.880
this runtime that is super,
super fast and specializes code

209
00:12:44.880 --> 00:12:49.260
like crazy and PI even
there's other languages that run

210
00:12:49.260 --> 00:12:52.320
on top of it now
as well. There's Jonathan, which

211
00:12:52.320 --> 00:12:56.340
is yet another implementation, which
is Python running on Java.

212
00:12:56.940 --> 00:13:01.530
That was also done by
Jim Hugans originally. And it

213
00:13:01.530 --> 00:13:05.220
was originally called J Python
back then. So there's a

214
00:13:05.220 --> 00:13:08.340
bunch of different implementations. They
all kind of have their

215
00:13:08.340 --> 00:13:11.440
sweet spots, right? So R
and Python and Jonathan, you

216
00:13:11.440 --> 00:13:15.810
know, they're great for integrating
with your runtime environment. If

217
00:13:15.810 --> 00:13:18.720
you're a Java or C
sharp developer for extending those

218
00:13:18.720 --> 00:13:23.100
environments, letting your users script
your application, things like that.

219
00:13:23.640 --> 00:13:27.330
See Python also gets embedded
in applications a lot, you

220
00:13:27.330 --> 00:13:31.080
know, civilization for had a
huge amount of scripting code

221
00:13:31.080 --> 00:13:34.050
that was written all in
Python, even though the core

222
00:13:34.050 --> 00:13:37.320
app was written in C
plus plus, and you can

223
00:13:37.320 --> 00:13:40.680
do there's various like boost
bindings to call into Python

224
00:13:40.710 --> 00:13:43.380
easily. Not that it's very
difficult to do it just

225
00:13:43.380 --> 00:13:47.940
from see by hand. And
then PI is kind of

226
00:13:47.970 --> 00:13:52.890
for speed fanatics, where they
need to get every single

227
00:13:53.280 --> 00:13:55.860
bit of performance out, but
it's also still a little

228
00:13:55.860 --> 00:14:00.420
more experimental than the other
implementation. So we support all

229
00:14:00.420 --> 00:14:04.620
of these in Python tools
for visual studio, we have

230
00:14:04.620 --> 00:14:08.100
our own parser and we
typically talk to a Python

231
00:14:08.100 --> 00:14:12.930
implementation just over socket, right?
So our debugger, it's very

232
00:14:12.960 --> 00:14:16.380
easy to implement a debugger
and pure Python itself that

233
00:14:17.130 --> 00:14:20.640
is intercepting the function calls,
and you can stop execution

234
00:14:20.640 --> 00:14:24.300
for a while. And so
there's just standard APIs that

235
00:14:24.300 --> 00:14:27.000
support that. And so our
debugger is written in Python

236
00:14:27.330 --> 00:14:31.080
and we communicate over, we
communicate with Python process over

237
00:14:31.080 --> 00:14:36.300
socket. So if your Python
implementation supports system set, trace,

238
00:14:36.390 --> 00:14:40.860
our debugger can debug you.
There are some features that

239
00:14:40.860 --> 00:14:44.340
we kind of specialize. So
we have profiling support that

240
00:14:44.340 --> 00:14:49.650
is C Python specific just
because we have a instrumented

241
00:14:50.160 --> 00:14:52.400
profiler and we want it
to be as fast as

242
00:14:52.400 --> 00:14:57.560
possible. So we're talking to
the C API directly. And,

243
00:14:57.650 --> 00:15:00.500
but, you know, we have
our own parser. We analyze

244
00:15:00.500 --> 00:15:04.430
the code all without executing
code. We have a rebel

245
00:15:04.430 --> 00:15:06.380
window and it works the
same way as the debugger

246
00:15:06.380 --> 00:15:08.960
does. And that we've just
talking to a Python process

247
00:15:08.960 --> 00:15:12.380
over socket and sending information
back and forth. So we're

248
00:15:12.380 --> 00:15:18.650
very Python, interpreter agnostic, and
you could just bring whatever

249
00:15:18.650 --> 00:15:21.730
Python interpreter you have and
use it. I, yeah, it's

250
00:15:21.730 --> 00:15:25.450
interesting. There's a, there's a
little Python interpreter's toolbox and

251
00:15:25.450 --> 00:15:28.210
visual studio that lists all
the different ones and you

252
00:15:28.210 --> 00:15:30.430
can switch back and forth
and make them to default.

253
00:15:30.730 --> 00:15:33.910
It's almost like just to
put it in the context

254
00:15:33.910 --> 00:15:35.680
of people who've never done
anything like this before. Imagine

255
00:15:35.680 --> 00:15:37.930
if you could plug in
different CLRs. If there was

256
00:15:37.930 --> 00:15:40.330
more than just the main
CLR and mano there's like

257
00:15:40.390 --> 00:15:42.910
five or six, and people
were just bringing out different

258
00:15:42.910 --> 00:15:45.790
ones all the time, and
you might pick and choose

259
00:15:45.790 --> 00:15:49.060
a runtime interpreter as just
like you pick and choose

260
00:15:49.060 --> 00:15:52.180
a pair of pants. Yup.
And, you know, if you're

261
00:15:52.180 --> 00:15:55.240
targeting multiple Python versions that,
you know, it starts to

262
00:15:55.240 --> 00:15:57.790
become very useful to be
able to switch between those

263
00:15:57.790 --> 00:16:01.060
quickly and easily and, you
know, make sure that your

264
00:16:01.060 --> 00:16:03.640
code's working on Python two
seven, and then switch over

265
00:16:03.640 --> 00:16:05.590
to three, three and make
sure it works there as

266
00:16:05.590 --> 00:16:10.330
well. And, and the, that
new interpreters window is new

267
00:16:10.330 --> 00:16:14.080
in 2.0, and we also
have virtual environments, which are

268
00:16:14.080 --> 00:16:18.010
new, and that's even, that's
kind of like the same

269
00:16:18.010 --> 00:16:21.220
concept, but on steroids, where
instead of just having these

270
00:16:21.220 --> 00:16:24.340
core interpreters that are installed,
you can do all sorts

271
00:16:24.340 --> 00:16:26.830
of customizations on top of
them and have different sets

272
00:16:26.830 --> 00:16:30.880
of libraries that are available
in different interpreters. And how

273
00:16:30.880 --> 00:16:32.380
did you guys pull this
off though? It's just a

274
00:16:32.380 --> 00:16:34.420
small group of people. That's
the thing I'm kind of

275
00:16:34.420 --> 00:16:37.030
trying to get my head
around. There's how many, how

276
00:16:37.030 --> 00:16:41.230
many people worked on this?
So this project actually has

277
00:16:41.230 --> 00:16:45.730
a very long history. You
know, it came out of

278
00:16:45.730 --> 00:16:48.880
iron Python when we were
working on iron Python tools

279
00:16:48.880 --> 00:16:52.600
for visual studio, but the
code base has pieces that

280
00:16:52.600 --> 00:16:58.840
go back for a pretty
long time. So in 2005,

281
00:16:59.380 --> 00:17:04.060
the vs SDK team used
iron Python as a sample

282
00:17:04.060 --> 00:17:08.020
in the vs SDK. So
that's kind of the very

283
00:17:08.020 --> 00:17:13.330
first piece of visual studio
integration that ever happened. Then

284
00:17:13.630 --> 00:17:16.210
after that, you know, and
that kept gait getting updated

285
00:17:16.210 --> 00:17:20.320
along the way. At some
point, there was a project

286
00:17:20.320 --> 00:17:25.180
that we called Nessie, which
was using the visual studio

287
00:17:25.210 --> 00:17:31.090
2010 editor bits, which hadn't
shipped yet. They were, that

288
00:17:31.090 --> 00:17:34.630
was yet another internal project
that was before it got

289
00:17:34.630 --> 00:17:36.340
into visual studio. And we
were trying to do a

290
00:17:36.340 --> 00:17:40.090
standalone IDE with that stuff
where we were using the

291
00:17:40.090 --> 00:17:43.630
editor bits and plugging it
into Python. And so some

292
00:17:43.630 --> 00:17:47.410
stuff survived out of that
effort. Later, we had an

293
00:17:47.410 --> 00:17:52.080
effort called Boston where again,
we were kind of using

294
00:17:52.080 --> 00:17:55.080
those same vs editor bits,
but we're actually trying to

295
00:17:55.110 --> 00:17:57.510
do all of the coding
in Python itself and iron

296
00:17:57.510 --> 00:18:01.320
Python. So we were hosting
the vs editor in this

297
00:18:01.320 --> 00:18:03.990
Python app that was written
in Python. So trying to

298
00:18:03.990 --> 00:18:08.640
build a Python ID entirely
in Python. And that's kind

299
00:18:08.640 --> 00:18:13.260
of when our analysis engine
initially got wrote, and there

300
00:18:13.260 --> 00:18:18.510
was a, yet another effort
to plug into vs 2008,

301
00:18:18.510 --> 00:18:22.470
at one point, which we
called iron studio. And we

302
00:18:22.470 --> 00:18:26.070
were actually looking at doing
a, both iron Python and

303
00:18:26.070 --> 00:18:29.280
iron Ruby at the same
time. And so we built

304
00:18:29.280 --> 00:18:32.640
upon what's called MPF proj,
which is the project system

305
00:18:32.640 --> 00:18:36.660
that everyone builds upon when
they're doing visual studio development

306
00:18:36.690 --> 00:18:40.710
and they want to plug
in a language. And there's

307
00:18:40.710 --> 00:18:43.680
a bunch of common stuff
shared between the two and

308
00:18:43.680 --> 00:18:46.380
a bunch of that code
continues to live on. So

309
00:18:46.410 --> 00:18:49.830
there, and then we did
iron Python studio finally, and

310
00:18:49.830 --> 00:18:52.530
that saw the light of
day. We released it at

311
00:18:52.530 --> 00:18:58.080
PICA. And I want to
say four years ago, so

312
00:18:58.410 --> 00:19:01.410
you can see that's a
pretty long history already. And

313
00:19:01.410 --> 00:19:06.510
then after our and Python
was canceled, we started Python

314
00:19:06.510 --> 00:19:09.030
tools for visual studio. And
so that kind of sucked

315
00:19:09.030 --> 00:19:12.900
in all of these assets
that had been building up

316
00:19:12.930 --> 00:19:17.520
over a very long period
of time. And so I

317
00:19:17.520 --> 00:19:20.550
was initially the only developer
on that. And then eventually

318
00:19:20.550 --> 00:19:23.590
we got a tester and
the team has been growing.

319
00:19:23.590 --> 00:19:26.610
And you know, now with
four people and a very

320
00:19:26.610 --> 00:19:29.430
solid foundation to build upon,
we're able to move pretty

321
00:19:29.430 --> 00:19:33.170
quickly. What is the Python
community think about this? Like,

322
00:19:33.170 --> 00:19:35.300
you know, Microsoft, you know,
I, I came to work

323
00:19:35.300 --> 00:19:38.990
here to help make things
better, right. And I don't

324
00:19:38.990 --> 00:19:41.720
like the whole Microsoft is
evil thing. Even when our

325
00:19:41.720 --> 00:19:44.720
group isn't evil and other
groups are evil, it's, you

326
00:19:44.720 --> 00:19:47.180
know, it's frustrating. But when
you, when you go on

327
00:19:47.180 --> 00:19:49.580
stage at a Python conference
and you go, Hey, this

328
00:19:49.580 --> 00:19:51.650
and that, and the other
thing are they like, Oh,

329
00:19:51.680 --> 00:19:54.350
boo, you suck. Or is
it more about the love

330
00:19:54.350 --> 00:19:58.550
of the language? So the
Python community has been nothing

331
00:19:58.580 --> 00:20:02.660
but supporting throughout my entire
time that I've been working

332
00:20:02.660 --> 00:20:04.860
with Python at Microsoft. You
know, I go to pike

333
00:20:04.860 --> 00:20:09.410
con every single year. I
think I've only ever heard,

334
00:20:09.410 --> 00:20:12.590
you know, one sort of
spiteful comment to my face.

335
00:20:12.620 --> 00:20:16.460
Maybe everything gets said behind
my face, but they're very

336
00:20:16.460 --> 00:20:20.210
embracing, you know, we are
supporting the language and we

337
00:20:20.210 --> 00:20:23.720
are not going out and
tinkering with it and doing

338
00:20:23.720 --> 00:20:27.650
evil, even with iron Python,
we are very careful to

339
00:20:27.860 --> 00:20:30.830
make sure that what we're
doing with the language was

340
00:20:30.830 --> 00:20:32.900
the right thing and that
we weren't embracing it and

341
00:20:32.900 --> 00:20:37.430
extending it. I think there's
only one language difference in

342
00:20:37.430 --> 00:20:40.520
iron Python versus C Python,
which is you can do

343
00:20:40.520 --> 00:20:44.780
food dot none. And in
C Python, nuns, keyword, and

344
00:20:44.780 --> 00:20:47.680
in dotnet none as used
in <inaudible> all the time.

345
00:20:47.740 --> 00:20:51.340
And so it was just
a compromise where, okay, we'll

346
00:20:51.340 --> 00:20:55.390
let this one little edge
case slide through so that

347
00:20:55.390 --> 00:20:59.950
people can use.net in a
reasonable way. And other than

348
00:20:59.950 --> 00:21:03.100
that, we were super true
to the language. And, you

349
00:21:03.100 --> 00:21:06.580
know, we would work with
the C Python test suites.

350
00:21:06.610 --> 00:21:10.480
We would write our own
test suites when they were

351
00:21:10.480 --> 00:21:13.060
inadequate and, you know, we
just wanted it to be,

352
00:21:13.120 --> 00:21:15.550
we just wanted to nail
it. And I think people

353
00:21:15.550 --> 00:21:20.050
recognize that. And with Python
tools, for visual studio, there's

354
00:21:20.050 --> 00:21:24.910
obviously less of a corrupting
influence that's possible because we're

355
00:21:24.910 --> 00:21:28.780
just kind of consuming the
language. But you know, at

356
00:21:28.780 --> 00:21:30.790
the same time we try
to take it to new

357
00:21:30.790 --> 00:21:33.690
places. And I think people
appreciate that. Yeah. One of

358
00:21:33.690 --> 00:21:35.880
the things that I was
a little surprised about, and

359
00:21:35.880 --> 00:21:38.430
I think you should talk
about is when, when you

360
00:21:38.430 --> 00:21:40.950
hear about stuff like this,
you assume that because the

361
00:21:40.950 --> 00:21:44.010
non express skew version of
visual studio is the only

362
00:21:44.010 --> 00:21:47.190
one that supports extensions, that
this would require pro or

363
00:21:47.190 --> 00:21:51.870
ultimate, but you're actually not
using express pro or ultimate.

364
00:21:51.870 --> 00:21:55.860
You're using something called via
shell. Well, you can use

365
00:21:55.860 --> 00:21:59.280
the sh the integrated shell.
You can also plug into

366
00:21:59.280 --> 00:22:02.160
pro and ultimate and there's
benefits to that too. But

367
00:22:02.370 --> 00:22:05.880
the integrated shell, we ship
that for free. It's a

368
00:22:05.880 --> 00:22:09.090
little confusing. There's something called
the isolated shell and the

369
00:22:09.090 --> 00:22:12.900
integrated shell. And in order
to install the full shell,

370
00:22:12.900 --> 00:22:15.120
you have to first install
the isolated shell and then

371
00:22:15.120 --> 00:22:17.850
install the integrated shell on
top of it. And then

372
00:22:17.850 --> 00:22:20.220
you can go off and
install whatever plugins you want.

373
00:22:20.460 --> 00:22:24.330
But basically it's a blank
canvas of vs has no

374
00:22:24.510 --> 00:22:27.390
built in language support. So
there's no project types when

375
00:22:27.390 --> 00:22:30.360
you start off. But once
you drop in other plugins,

376
00:22:30.570 --> 00:22:34.440
you can start doing all
of your development with, At

377
00:22:34.440 --> 00:22:36.930
that point, you described a
list of things that sounded

378
00:22:36.930 --> 00:22:40.050
complicated, but I'm looking at
the PI tools website. And

379
00:22:40.050 --> 00:22:42.570
it says, I don't have
VAs, and I want free

380
00:22:42.570 --> 00:22:46.260
Python. There's one thing to
install. Yeah. So we made

381
00:22:46.260 --> 00:22:48.960
that really simple in this
release. In the past, we

382
00:22:48.990 --> 00:22:52.620
told people to go off
and install a, B, C,

383
00:22:52.620 --> 00:22:55.350
and then you have everything
you want. And with this

384
00:22:55.350 --> 00:22:58.740
release, we now have the
integrated installer that just brings

385
00:22:58.770 --> 00:23:01.740
that it has everything in
it. It's a 400 megabyte

386
00:23:01.740 --> 00:23:05.520
download, but you can just
save that and install it.

387
00:23:05.610 --> 00:23:08.640
And, and you've got Python
tools for visual studio for

388
00:23:08.640 --> 00:23:12.900
free. That's pretty, that's pretty
crazy. Is there like a

389
00:23:12.900 --> 00:23:15.690
boss who will say no
at some point, like why

390
00:23:15.690 --> 00:23:19.830
don't we charge people at
$99? So there are advantages

391
00:23:19.830 --> 00:23:22.050
to going to pro, and
those are kind of the

392
00:23:22.050 --> 00:23:24.990
same advantages that you see
with going to pro with

393
00:23:24.990 --> 00:23:29.220
other languages. So VAs has
some features that don't ship

394
00:23:29.220 --> 00:23:33.540
with the integrated shell and
those include unit testing, which

395
00:23:33.540 --> 00:23:40.050
we just added support for.
And PTVs 2.0 and, and

396
00:23:40.050 --> 00:23:43.440
profiling is also not available.
And then there's also just

397
00:23:43.440 --> 00:23:46.640
kind of the mixed language
scenario. I think a lot

398
00:23:46.640 --> 00:23:49.760
of people want to do
with Python as well. If

399
00:23:49.760 --> 00:23:54.260
you're doing some technical computing
scenarios frequently, you're going to

400
00:23:54.260 --> 00:23:56.780
have to drop down to
writing some C code. If

401
00:23:56.780 --> 00:24:00.650
you're doing C Python, if
you're a.net developer, typically you're

402
00:24:00.650 --> 00:24:04.640
interfacing with some C-sharp code.
And so getting a solution

403
00:24:04.640 --> 00:24:08.150
where you can work with
multiple language types, that's just

404
00:24:08.150 --> 00:24:10.850
not possible with the integrated
shell, because we don't ship

405
00:24:11.270 --> 00:24:13.870
a C plus plus plugin
for the integrated shell or

406
00:24:13.880 --> 00:24:18.140
C-sharp plugin. And now we
have mixed mode debugging, which

407
00:24:18.170 --> 00:24:21.080
kind of makes this even
more compelling. So if you

408
00:24:21.080 --> 00:24:24.290
have a C app, a
C plugin for your Python

409
00:24:24.290 --> 00:24:27.530
code, you can create a
solution in visual studio. You

410
00:24:27.530 --> 00:24:30.590
can have your a C
extension module in there and

411
00:24:30.590 --> 00:24:33.350
your Python code in there,
and you can start debugging.

412
00:24:33.350 --> 00:24:35.690
You can just step from
your Python code to your

413
00:24:35.690 --> 00:24:38.690
C plus plus code or
vice versa. So there are

414
00:24:38.690 --> 00:24:41.650
some really compelling scenarios when
you upgrade to pro, I

415
00:24:41.650 --> 00:24:43.540
have to admit I've done
C and C plus plus

416
00:24:43.540 --> 00:24:47.500
I've done Pascal. I've never
written Python for money, but

417
00:24:47.560 --> 00:24:51.340
the extent of my mixed
mode debugging skills has been

418
00:24:52.390 --> 00:24:54.520
in by mixed mode. I
mean, doing more than one

419
00:24:54.520 --> 00:24:59.590
language in one solution was
a Pascal calling C back

420
00:24:59.590 --> 00:25:02.290
in, you know, 20 years
ago. But when I explained

421
00:25:02.290 --> 00:25:04.870
this mixed mode debugging, some
people were freaking out like,

422
00:25:04.870 --> 00:25:07.720
they're like, this is the
most compelling thing ever. Who

423
00:25:07.720 --> 00:25:10.570
are these people who would
care about that? So lots

424
00:25:10.570 --> 00:25:13.210
of people need to get
every bit of performance out

425
00:25:13.210 --> 00:25:16.270
of their Python code. That's
possible. So they'll start off,

426
00:25:16.510 --> 00:25:22.690
they'll be prototyping their code
in Python initially, and they'll

427
00:25:22.690 --> 00:25:25.030
figure out the right algorithm.
And then they'll want to

428
00:25:25.030 --> 00:25:27.880
rewrite a portion of that
algorithm. You know, the inner

429
00:25:27.880 --> 00:25:31.000
loop in C codes that
they can avoid things like

430
00:25:31.000 --> 00:25:34.630
boxing. So in Python, every
single integer that you allocate

431
00:25:34.690 --> 00:25:38.290
is an object and it
involves a memory allocation. And

432
00:25:38.290 --> 00:25:40.750
so if you're doing a
tight loop, things like that

433
00:25:40.810 --> 00:25:44.590
are pretty slow. So mixed
mode debugging lets you are

434
00:25:44.590 --> 00:25:48.190
C plus writing C extensions,
lets you rip out some

435
00:25:48.190 --> 00:25:50.920
of the Python code and
make the slow parts really,

436
00:25:50.920 --> 00:25:54.280
really fast. And that that's
been encapsulated for a lot

437
00:25:54.280 --> 00:25:57.820
of things. There's libraries like
numb PI and side PI,

438
00:25:58.090 --> 00:26:00.940
which have a huge number
of algorithms, things with, you

439
00:26:00.940 --> 00:26:04.150
know, matrix CS and other
things. There's lots of graphics,

440
00:26:04.150 --> 00:26:08.170
libraries that are out there.
And so if you're working,

441
00:26:08.200 --> 00:26:10.630
if you're just consuming the
library, you know, it's probably

442
00:26:10.630 --> 00:26:13.060
not too interesting to you,
but if you're actually developing

443
00:26:13.060 --> 00:26:16.360
one of these libraries, the
ability to look at both

444
00:26:16.360 --> 00:26:19.060
sides of the world and
just step from one to

445
00:26:19.060 --> 00:26:21.160
the other, you know, it's
not, I'm debugging my C

446
00:26:21.160 --> 00:26:24.610
code and I, you know,
figured out what's going on

447
00:26:24.610 --> 00:26:27.070
there. And so now I
have to stop and restart

448
00:26:27.070 --> 00:26:29.530
and build up all of
my context again and then

449
00:26:29.530 --> 00:26:31.690
go and work on my
Python code a little bit.

450
00:26:32.500 --> 00:26:35.200
You're not bouncing back and
forth between those two worlds.

451
00:26:35.200 --> 00:26:37.270
You're just in both of
them at the same time.

452
00:26:37.660 --> 00:26:39.670
This is blow mine so
much though. Like, is this

453
00:26:39.670 --> 00:26:42.310
really hard or not a
common thing or are most

454
00:26:42.310 --> 00:26:45.090
people who are doing kind
of work and aren't using

455
00:26:45.150 --> 00:26:48.180
Python tools? Are they just
like doing God here, debugging

456
00:26:48.180 --> 00:26:51.680
with like debug dot log?
All of those things are

457
00:26:51.680 --> 00:26:56.420
true. I think so a
it's it is really hard.

458
00:26:57.170 --> 00:27:00.230
You know, the CLR has
had mixed mode debugging with

459
00:27:00.770 --> 00:27:02.930
C plus plus and C
sharp for a very long

460
00:27:02.930 --> 00:27:07.070
time, but it's not perfect.
The way it's implemented the

461
00:27:07.070 --> 00:27:09.950
CLR has this debugger helper
thread that's running in its

462
00:27:09.950 --> 00:27:15.080
process, that's there and being
used to help do your

463
00:27:15.080 --> 00:27:18.830
debugging operations, whereas a C
plus plus to bugger typically

464
00:27:18.830 --> 00:27:23.630
wants to stop your entire
application. And while it's stopped,

465
00:27:23.630 --> 00:27:26.510
it can poke around at
data structures, but code's not

466
00:27:26.510 --> 00:27:29.510
running inside of it. And
so the helper thread is

467
00:27:29.510 --> 00:27:33.530
working against that. Python. Our
debugger works the exact same

468
00:27:33.530 --> 00:27:36.770
way. We have a helper
thread that's running. So the

469
00:27:36.770 --> 00:27:39.080
first thing that you have
to solve is how do

470
00:27:39.080 --> 00:27:44.330
you debug your runtime environment
without having any code running

471
00:27:44.330 --> 00:27:48.260
inside of it? And so
that is a difficult thing

472
00:27:48.260 --> 00:27:51.230
to do alone. And in
Python it's really difficult because

473
00:27:51.260 --> 00:27:54.470
almost every single debuggers implemented
in the style of having

474
00:27:54.470 --> 00:27:57.260
a debugger helper thread. And
so, you know, we have

475
00:27:57.260 --> 00:28:00.560
to go off and look
at tons of debugging, symbols

476
00:28:00.770 --> 00:28:04.910
for Python and drill through
the data structures and basically

477
00:28:04.910 --> 00:28:08.600
recreate what the Python runtime
would do for us very

478
00:28:08.600 --> 00:28:13.700
easily. So there's that technical
challenge. Then there's the technical

479
00:28:13.700 --> 00:28:17.060
challenge that the vs debugger
team solved, which is coming

480
00:28:17.060 --> 00:28:19.880
up with an architecture for
this stuff where you can

481
00:28:19.880 --> 00:28:22.430
have a bunch of debuggers
that are working together and

482
00:28:22.430 --> 00:28:27.170
working together nicely and they
solve that problem in vs

483
00:28:27.170 --> 00:28:31.220
2012 in a very elegant
way with something that's called

484
00:28:31.220 --> 00:28:34.040
Concord. I'm not sure if
there's a better public name

485
00:28:34.040 --> 00:28:36.950
for that, but you know,
we talk about mixed mode,

486
00:28:36.950 --> 00:28:39.740
Python and C plus plus
debugging, but you can actually

487
00:28:39.740 --> 00:28:42.860
mix in a C-sharp or
Java script bugging with that

488
00:28:42.860 --> 00:28:44.960
as well. And you can
have a call stack that

489
00:28:44.960 --> 00:28:48.200
spans all of these different
languages and it just works

490
00:28:48.200 --> 00:28:52.610
seamlessly. So that's a very
difficult problem. And you know,

491
00:28:52.610 --> 00:28:55.790
people have done things where
they've taken like GDB and

492
00:28:55.790 --> 00:28:59.270
they are running their program
in Python. Python has a

493
00:28:59.270 --> 00:29:04.280
command line to bugger called
PDB and then you weigh

494
00:29:04.280 --> 00:29:06.800
or GDB on top of
it. And you get an

495
00:29:06.800 --> 00:29:10.580
experience that's similar to this,
but having it all integrated

496
00:29:10.580 --> 00:29:13.370
together and having it just
look like your normal debugging

497
00:29:13.370 --> 00:29:17.600
experience requires so much stuff
to come together and work

498
00:29:17.600 --> 00:29:22.880
nicely. So it's a pretty
tough technical problem. And I'm

499
00:29:22.940 --> 00:29:24.740
a little surprised that we
were able to pull it

500
00:29:24.740 --> 00:29:27.680
off. When did visual studio
get good at this? Like,

501
00:29:27.680 --> 00:29:30.380
was it 2012 or when
did we, cause I mean,

502
00:29:30.680 --> 00:29:34.070
I don't know. I've been
been visual studio since 2003.

503
00:29:34.070 --> 00:29:37.090
So what is that 10
years plus, and you know,

504
00:29:37.430 --> 00:29:39.500
for awhile there, it got
quite a bad name and

505
00:29:39.500 --> 00:29:41.860
there are still people who
feel that it's fat for

506
00:29:41.860 --> 00:29:45.310
what it does. It's too
heavy. But then it seems

507
00:29:45.310 --> 00:29:46.780
like in the last three
or four years, you've got

508
00:29:46.780 --> 00:29:51.370
really good at making, becoming
a language factory, a place

509
00:29:51.370 --> 00:29:54.250
for, for doing stuff like
this. I know that magic

510
00:29:54.250 --> 00:29:57.700
Christianson's vs web essentials, he
has found the editors and

511
00:29:57.700 --> 00:30:02.530
language services really flexible once
you learn the magic underneath

512
00:30:02.530 --> 00:30:08.040
them. Yep. I think it's
been over, you know, starting

513
00:30:08.040 --> 00:30:12.120
with 2010, I think vs
really started changing and becoming

514
00:30:12.150 --> 00:30:14.550
a lot more extensible and
a lot more friendly to

515
00:30:14.550 --> 00:30:19.080
people who are extending it.
So vs 2010 took a

516
00:30:19.080 --> 00:30:22.680
bet on meth. And so
now you, and they took

517
00:30:22.680 --> 00:30:24.870
a large bet on managed
code as well, where you

518
00:30:24.870 --> 00:30:28.140
have a large number of
interfaces, which are just so

519
00:30:28.140 --> 00:30:32.280
quick and easy to extend
using meth. You can just

520
00:30:32.580 --> 00:30:36.330
export an interface and it
gets picked up magically and

521
00:30:36.700 --> 00:30:40.440
you're not dealing with a
calm anymore, which you know,

522
00:30:40.440 --> 00:30:44.760
is always painful. It's hard
to discover things. Meth can

523
00:30:44.760 --> 00:30:47.040
be a little bit hard
to discover things. It's still

524
00:30:47.040 --> 00:30:51.690
very interface driven, but the
API APIs are so much

525
00:30:51.720 --> 00:30:55.440
simpler and cleaner and nicer.
So if you want to

526
00:30:55.440 --> 00:30:59.310
go off and write a
classifier for your own content

527
00:30:59.310 --> 00:31:02.760
type in visual studio, it's
pretty easy. You just implement

528
00:31:02.760 --> 00:31:07.410
this. I classify our provider
and handoff classifiers to VMs

529
00:31:07.410 --> 00:31:11.520
and you just walk your
text and report back the

530
00:31:11.520 --> 00:31:15.870
various classifications to it and
defining new classifications is super

531
00:31:15.870 --> 00:31:20.880
easy to you just implement
a, a class that has

532
00:31:20.880 --> 00:31:25.170
some attributes on it basically.
And so it becomes much

533
00:31:25.170 --> 00:31:28.890
more declarative and much simpler
to go off and extend.

534
00:31:28.890 --> 00:31:31.860
And then there's the new
editor that got implemented in

535
00:31:31.890 --> 00:31:36.780
vs 2010, the mixed mode,
debugging stuff, all got rewritten

536
00:31:36.840 --> 00:31:41.640
in 2012. And it's just,
they've been building and building

537
00:31:41.640 --> 00:31:44.910
more and more new, easy
to use interfaces. And if

538
00:31:44.910 --> 00:31:47.790
you go back and compare
it to you, use the

539
00:31:47.790 --> 00:31:52.410
term language service, and it's
kind of interesting. The language

540
00:31:52.410 --> 00:31:57.960
services slowly kind of disappearing
from vs. There used to

541
00:31:57.960 --> 00:32:02.520
be, you know, there's like
this, there's this language info

542
00:32:02.580 --> 00:32:05.220
interface I believe it's called,
which was kind of the

543
00:32:05.220 --> 00:32:08.880
heart of your language service,
not. And now that is,

544
00:32:08.940 --> 00:32:11.370
it's not quite gone yet.
You know, we still implement

545
00:32:11.370 --> 00:32:14.460
one of those for Python,
but all of the details

546
00:32:14.460 --> 00:32:16.590
that used to be handled
by that thing are off

547
00:32:16.590 --> 00:32:21.030
somewhere else. Now using much
cleaner, nicer interfaces. Well, one

548
00:32:21.210 --> 00:32:24.690
last question here is what
group are you in? Like

549
00:32:24.720 --> 00:32:26.550
what is, who is, who
is the boss who is

550
00:32:26.550 --> 00:32:30.870
paying for Python divots? I
am in the cloud tools

551
00:32:30.870 --> 00:32:33.750
team. So, you know, one
of the things that we

552
00:32:33.750 --> 00:32:38.220
do with PTVs and in
general on our team is

553
00:32:39.050 --> 00:32:41.930
features related to the cloud.
So a feature that I

554
00:32:41.930 --> 00:32:45.410
didn't mention, I probably should
is our new support for

555
00:32:45.410 --> 00:32:50.690
windows Azure websites. And PTVs
2.0, so now you can

556
00:32:50.690 --> 00:32:53.540
do file new project. You
can make a Django application,

557
00:32:53.780 --> 00:32:56.870
you can right. Click on
it and publish and we'll

558
00:32:56.900 --> 00:32:59.120
go ahead and send it
up to windows Azure for

559
00:32:59.120 --> 00:33:03.040
you, John Being a very
popular web framework for Python.

560
00:33:03.550 --> 00:33:07.930
Yeah, exactly. And so, you
know, we've done other Django

561
00:33:07.930 --> 00:33:11.410
integration in previous versions, we've
had cloud service support. So

562
00:33:11.410 --> 00:33:13.900
you could take Django, deploy
it to a VM running

563
00:33:13.900 --> 00:33:17.320
in the cloud. We've done
things like the Azure client

564
00:33:17.320 --> 00:33:22.300
libraries, which let you manage
windows Azure itself. And you

565
00:33:22.300 --> 00:33:25.180
can spin up VMs and
other, you know, tables and

566
00:33:25.180 --> 00:33:28.330
services and you can insert
data into tables and all

567
00:33:28.330 --> 00:33:32.650
of those things. So each
release, we kind of, not

568
00:33:32.650 --> 00:33:35.260
only are we focused on
just making a better Python

569
00:33:35.260 --> 00:33:39.850
IDE, but we're also focused
on making the ID work

570
00:33:39.850 --> 00:33:44.140
really nicely with windows Azure
too. That's pretty sweet. I

571
00:33:44.140 --> 00:33:46.030
am. I really appreciate you
taking the time to chat

572
00:33:46.030 --> 00:33:48.460
with me today. No problem.
It's been a lot of

573
00:33:48.460 --> 00:33:50.590
fun. So folks can check
this stuff out at P

574
00:33:50.590 --> 00:33:53.410
Y tools dot <inaudible> dot
com. I did a big

575
00:33:53.440 --> 00:33:59.920
blog post on Python. PTVs
beta. All of this stuff

576
00:33:59.950 --> 00:34:02.320
is, is free if you
want. And, and like Dino

577
00:34:02.320 --> 00:34:05.050
said, if you've got pro
you get even more stuff.

578
00:34:05.080 --> 00:34:08.560
So check it out. This
has been another episode of

579
00:34:08.560 --> 00:34:10.930
Hanselminutes and we'll see you
again next week.

