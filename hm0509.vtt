WEBVTT FILE

1
00:00:00.630 --> 00:00:03.750
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.750 --> 00:00:07.080
they make the show possible.
Today's show is sponsored by

3
00:00:07.080 --> 00:00:11.370
Tellerik create compelling app experiences
across any screen with the

4
00:00:11.370 --> 00:00:16.200
Tellerik platform Telerx end to
end platform. Uniquely combines industry

5
00:00:16.200 --> 00:00:19.890
leading UI tools with cloud
services to simplify the entire

6
00:00:19.890 --> 00:00:24.390
app development cycle Tellerik offers
everything.net developers need to build

7
00:00:24.390 --> 00:00:33.810
quality apps faster. Try it
free at tellerik.com/platform that's tellerik.com/platform

8
00:00:47.150 --> 00:00:53.000
From hanselminutes.com. It's Hansel minutes,
a weekly discussion with web

9
00:00:53.000 --> 00:00:57.890
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing a

10
00:00:57.890 --> 00:01:02.570
show number 513. In this
episode, Scott talks with next

11
00:01:02.570 --> 00:01:05.810
game CTO, Kylie. Hito a
lot about what it's like

12
00:01:05.810 --> 00:01:08.990
building and scaling a mobile
game to millions of users.

13
00:01:14.180 --> 00:01:16.550
Hi, this is Scott Hanselman.
This is another episode of

14
00:01:16.550 --> 00:01:22.220
Hanselminutes today. We're talking with
next game CTO. <inaudible> how

15
00:01:22.220 --> 00:01:25.610
are you? Thanks. Pleasure to
be here. Yeah. Thanks for,

16
00:01:25.760 --> 00:01:27.290
thanks for chatting with me.
And you stayed up late

17
00:01:27.290 --> 00:01:30.020
for me and I appreciate
that. No worries. So a

18
00:01:30.020 --> 00:01:34.880
couple of years back next
games, the mobile game company

19
00:01:34.880 --> 00:01:39.830
that you worked for raised
like $6 million in starting up,

20
00:01:39.860 --> 00:01:43.280
right. And becoming the next
big mobile game company and

21
00:01:43.370 --> 00:01:47.510
fast forward to 2016 and
the walking dead game is

22
00:01:47.510 --> 00:01:51.950
a certified hit. Isn't it?
Well, yeah, so it seems

23
00:01:51.950 --> 00:01:54.800
like at least we were
really pleased with the success

24
00:01:54.800 --> 00:01:58.160
that we have been seeing
with the game. So at

25
00:01:58.160 --> 00:02:01.340
least on some level it's
a heater. You sound very,

26
00:02:01.340 --> 00:02:03.140
you sound very modest. Is
it a, is it hard

27
00:02:03.140 --> 00:02:04.760
to judge whether a game
is a hit or not?

28
00:02:07.430 --> 00:02:11.120
Yeah, that is a bit
of the depends so much

29
00:02:11.120 --> 00:02:13.400
where you compare it to,
if you convert to the

30
00:02:13.400 --> 00:02:16.220
big names, we're still way
behind them. But then again,

31
00:02:16.220 --> 00:02:19.400
if you just compare like
general level of how games

32
00:02:20.330 --> 00:02:23.000
are full, we were doing
really well. And of course

33
00:02:23.210 --> 00:02:26.720
it's the finished way of
actually not being too proud

34
00:02:26.720 --> 00:02:31.490
of anything. It's a people
really, you don't run around

35
00:02:31.490 --> 00:02:33.590
and just going, Hey, I've
got a hit game. Woo.

36
00:02:33.920 --> 00:02:42.170
Now we're like, yeah, we're
somewhere there. Maybe somewhere shouting

37
00:02:42.170 --> 00:02:45.920
about it. So when you,
when you publish a game,

38
00:02:45.920 --> 00:02:48.380
when you, when you hit
publish, where you all sitting

39
00:02:48.380 --> 00:02:50.210
in a room, like the
entire company is like in

40
00:02:50.210 --> 00:02:52.640
the main common room and
you hit publish and you

41
00:02:52.640 --> 00:02:55.190
say it's live, or was
it just something you did?

42
00:02:55.460 --> 00:03:01.690
And then you went home?
Well, We actually did gather

43
00:03:01.700 --> 00:03:04.540
the getter, especially on our
first game. We, we, we

44
00:03:04.540 --> 00:03:08.140
do have Duquesne's the initial
first game was the compass

45
00:03:08.140 --> 00:03:11.920
blood West, which is a
battle builder game. And that

46
00:03:11.920 --> 00:03:14.800
was like our first, first
one to come out. It

47
00:03:14.800 --> 00:03:20.230
was last sprint that we
bought and especially doing that

48
00:03:20.230 --> 00:03:23.020
because obviously being the first
of the company, we were

49
00:03:23.020 --> 00:03:29.680
all gathered in our meeting
room and just population all

50
00:03:29.680 --> 00:03:31.960
together and the launch, the
game. And then we started

51
00:03:31.960 --> 00:03:35.650
to wait until they actually
went live, drew out the

52
00:03:36.010 --> 00:03:40.240
Apple store and started to
see how people started to

53
00:03:40.240 --> 00:03:42.910
come in, did the game.
And we were lucky enough

54
00:03:42.910 --> 00:03:48.580
to get to featuring, and
actually thanks to we had

55
00:03:48.760 --> 00:03:53.260
tent. We had some spare
time before we actually launched

56
00:03:53.260 --> 00:03:57.250
the game during that day.
And our addicting was thinking

57
00:03:57.250 --> 00:03:58.840
like, what, what can we
do a lot? We have

58
00:03:58.840 --> 00:04:03.070
done all the preparation that
we can, everything should be

59
00:04:03.070 --> 00:04:07.120
set up and everything was
doubled, triple checked. So we

60
00:04:07.120 --> 00:04:09.550
came up with this idea
that let's, let's create this

61
00:04:10.060 --> 00:04:14.470
word map that will show
live every player that comes

62
00:04:14.470 --> 00:04:19.810
alive as adults. So we
can visualize how players are

63
00:04:19.810 --> 00:04:23.470
pouring in. So we ended
up watching that word map,

64
00:04:23.740 --> 00:04:26.710
which we call it the
world domination map the whole

65
00:04:26.710 --> 00:04:29.410
evening. And it was pretty
nice because you could actually

66
00:04:29.410 --> 00:04:34.300
see how players when the
featuring went out on different

67
00:04:34.960 --> 00:04:37.990
countries or an app store.
So you could see how

68
00:04:38.020 --> 00:04:40.340
people start pouring in from
UK. And then there's a

69
00:04:40.340 --> 00:04:43.150
pouring in for us. And
so on. Like the time

70
00:04:43.150 --> 00:04:49.300
zone is always <inaudible> and,
and for the walking dead,

71
00:04:49.300 --> 00:04:52.930
we do pretty much the
same, although we weren't all

72
00:04:52.930 --> 00:04:55.270
in the same room, we
would go to the game

73
00:04:55.270 --> 00:04:58.480
because we were a bit,
a bit out here and

74
00:04:58.480 --> 00:05:03.760
there in different locations, some
of us were having some

75
00:05:03.760 --> 00:05:06.190
lodging. First of all, first
of all, it is in

76
00:05:06.190 --> 00:05:10.330
New York. And most of the
company was here in Helsinki

77
00:05:10.990 --> 00:05:14.710
watching how the game was
published. And then few of

78
00:05:14.710 --> 00:05:18.040
us were in Redwood, actually
sitting at the Microsoft office.

79
00:05:19.380 --> 00:05:21.600
Wow. Okay. So you were
all over the world and

80
00:05:23.070 --> 00:05:28.350
watching this, this live globally
in different. Yeah. So when

81
00:05:28.350 --> 00:05:31.920
you hit publish, do you
know that it's lie like

82
00:05:31.960 --> 00:05:33.480
that? When do you know
it's live? Do you sit

83
00:05:33.480 --> 00:05:35.100
there on the app store
and just hit refresh or

84
00:05:35.100 --> 00:05:37.110
do you wait for it
to be featured? And when

85
00:05:37.110 --> 00:05:38.850
you got featured, is that
just luck or do you

86
00:05:38.850 --> 00:05:41.040
have some relationship with Apple
that makes sure that it's,

87
00:05:41.140 --> 00:05:44.700
It's featured it's, it's mainly
like, obviously we tried to

88
00:05:44.700 --> 00:05:48.990
communicate with Apple about like
how to have some sort

89
00:05:48.990 --> 00:05:51.240
of conduct. They're not saying
that we are launching game

90
00:05:51.330 --> 00:05:54.360
and of course, like PR
and everything like that helps

91
00:05:54.360 --> 00:05:57.260
there, but it's that there's
no magic to it traditional

92
00:05:57.260 --> 00:06:01.070
way of like, they, they
make their own decisions and

93
00:06:01.070 --> 00:06:05.650
there's nothing we can basically
do about it. And the,

94
00:06:06.040 --> 00:06:08.710
I understand that when, when
apps get launched, when mobile,

95
00:06:08.710 --> 00:06:11.740
when mobile games get launched,
sometimes you'll become popular in

96
00:06:11.740 --> 00:06:15.370
a country randomly. And you
don't know, like you'll just

97
00:06:15.370 --> 00:06:17.410
be sitting around like suddenly
we're huge in Malaysia. And

98
00:06:17.410 --> 00:06:20.050
you don't know why that
happened. Have you noticed as

99
00:06:20.050 --> 00:06:22.780
a particular country or part
of the world that just

100
00:06:22.780 --> 00:06:25.510
loves playing the walking dead?
No, man's land more than

101
00:06:25.510 --> 00:06:32.260
another. I should probably check
from the data. I believe

102
00:06:32.260 --> 00:06:39.010
there were some odd countries
and especially shows when you

103
00:06:39.010 --> 00:06:41.230
were looking at the countries
that are spending most money

104
00:06:41.230 --> 00:06:43.180
and then you can be
some very old ones or

105
00:06:43.180 --> 00:06:47.270
very small ones that are
like, when you compare the

106
00:06:47.270 --> 00:06:49.870
amount of spending money to
the amount of players you're

107
00:06:49.870 --> 00:06:54.400
getting like Switzerland is surprisingly
good. Seems like those guys

108
00:06:54.400 --> 00:06:56.620
have a lot of money
or something like that, Or

109
00:06:56.620 --> 00:06:58.360
a lot of money to
spend on equipment for there.

110
00:06:58.510 --> 00:07:01.540
Yeah. Other people it's not
like raising crazy amounts, but

111
00:07:01.540 --> 00:07:06.010
it's compared to something else
it's, you can see that

112
00:07:06.010 --> 00:07:09.400
some Congress are better, but
I know that, for example,

113
00:07:09.400 --> 00:07:12.250
on the first weekend, of
course the United States was in

114
00:07:12.250 --> 00:07:16.030
the top, but also Thailand
apparently loves this game. Yeah.

115
00:07:16.810 --> 00:07:18.880
There was a lot of
players coming in from Thailand.

116
00:07:19.450 --> 00:07:22.060
And I can't remember what
other countries were the biggest

117
00:07:22.060 --> 00:07:24.670
ones, obviously U S was,
was the biggest one that

118
00:07:24.670 --> 00:07:28.810
we went to do number
one during the time. Hmm.

119
00:07:29.110 --> 00:07:31.600
So in the first weekend,
there's over a million downloads

120
00:07:31.660 --> 00:07:34.090
and it was the number
one app in 12 countries,

121
00:07:34.090 --> 00:07:37.000
number one free game and
13 countries. And the number

122
00:07:37.000 --> 00:07:40.960
one role playing game in
117 countries. So this is

123
00:07:40.960 --> 00:07:43.630
a big deal. And apparently
the best part was that

124
00:07:43.630 --> 00:07:48.280
50 million zombies were, were killed
in that first weekend. Yeah,

125
00:07:48.700 --> 00:07:53.020
that's quite a lot. Would
probably take me a lifetime

126
00:07:53.020 --> 00:07:56.980
to do that by myself.
So the, the thing that

127
00:07:56.980 --> 00:07:59.680
I thought was interesting about
this is that you mentioned,

128
00:07:59.680 --> 00:08:02.020
of course, just now that
you were at, at Microsoft,

129
00:08:02.320 --> 00:08:05.320
but you're not really a
Microsoft shop. You're not necessarily

130
00:08:05.320 --> 00:08:08.350
a shop that identifies yourselves
as a Microsoft shop, right?

131
00:08:09.670 --> 00:08:13.600
Well, no, we, we don't
need to define ourselves as

132
00:08:13.600 --> 00:08:18.820
any specific company that we
will be using those. Just

133
00:08:18.880 --> 00:08:23.620
let some companies technologies, we
more like look into what

134
00:08:23.620 --> 00:08:26.650
would be just the easiest
way or most effective way

135
00:08:26.660 --> 00:08:31.270
of getting things done. And
for us, it meant do

136
00:08:31.270 --> 00:08:34.990
use Microsoft in the backend
solutions. Although we do use

137
00:08:34.990 --> 00:08:37.150
some, a bit of Amazon
and we do use a

138
00:08:37.150 --> 00:08:43.240
bit of Google, but mainly
mainly on Microsoft systems. And

139
00:08:43.240 --> 00:08:46.240
then when we were creating
our client's side, it's all

140
00:08:46.240 --> 00:08:50.560
done on unity. So, So
yeah, like most companies that

141
00:08:50.560 --> 00:08:54.250
I've heard that are successful,
a hybrid cloud strategy is

142
00:08:54.250 --> 00:08:56.400
the way to go. You,
like you just mentioned the

143
00:08:56.400 --> 00:08:58.890
three major clouds and you've
got, you know, a little

144
00:08:58.890 --> 00:09:03.050
bit on all of those
on all of those. Yeah.

145
00:09:03.110 --> 00:09:08.960
Yeah. Well obviously like 90%
of everything is on Microsoft

146
00:09:08.960 --> 00:09:11.150
cloud, but there still is
a little bit, bit bitter

147
00:09:11.810 --> 00:09:16.520
parts on other cloud providers.
It's just like all the

148
00:09:16.520 --> 00:09:22.400
cloud providers have like their
best benefits sort of thing

149
00:09:22.850 --> 00:09:25.760
that they can offer offers.
Or there's like, if you

150
00:09:25.820 --> 00:09:29.030
compare some of the technologies
that Google or is providing

151
00:09:29.030 --> 00:09:32.840
culvert to Microsoft, there's obviously
something that Google is better

152
00:09:32.960 --> 00:09:37.460
than Microsoft is vice versa.
So on the first weekend,

153
00:09:37.460 --> 00:09:39.500
we'll just use the first
weekend as an example, apparently

154
00:09:39.500 --> 00:09:43.760
31 million minutes were played just
on that opening weekend alone.

155
00:09:43.760 --> 00:09:47.090
So I can assume now,
you know, fast forwarding from

156
00:09:47.090 --> 00:09:51.710
October when this came out
to now, months later, we're

157
00:09:51.710 --> 00:09:54.710
looking at billions and billions
of transactions that are going

158
00:09:54.710 --> 00:09:58.460
on. How did you decide
where to put that? Is

159
00:09:58.460 --> 00:10:01.580
that, did you say when
you were starting, we're gonna

160
00:10:01.590 --> 00:10:04.190
use a no sequel database
or did you try it

161
00:10:04.190 --> 00:10:06.830
and in my SQL or
SQL server and then say,

162
00:10:06.830 --> 00:10:08.630
this is not really a
good idea for our persistence.

163
00:10:10.550 --> 00:10:14.450
Well, the decision to use
CQL and go with no

164
00:10:14.450 --> 00:10:18.500
SQL solution was, was done
pretty early on. I didn't

165
00:10:18.500 --> 00:10:23.570
actually even consider using SQL
because my previous line of,

166
00:10:24.010 --> 00:10:28.940
of job, I had my
battles with SQL servers and

167
00:10:28.940 --> 00:10:32.900
trying to scale them and
do my experience. Data is

168
00:10:32.900 --> 00:10:37.220
just a simple escape, simply
data data, just scale. And

169
00:10:37.790 --> 00:10:41.090
especially when we were, when
we started to talk about

170
00:10:41.120 --> 00:10:45.800
like large amount of users,
they're fine on dialect hundreds

171
00:10:45.800 --> 00:10:47.930
and thousands. But when you
get more of that, more

172
00:10:47.930 --> 00:10:52.400
than that, they just didn't
do break it up. And

173
00:10:52.400 --> 00:10:55.190
it sounds like, You know,
scaling it and sharding and

174
00:10:55.190 --> 00:10:56.840
all the kinds of stuff
one has to do when

175
00:10:56.840 --> 00:10:59.630
you're doing SQL. That's not
interesting. You want to make

176
00:10:59.660 --> 00:11:02.570
really good games and really
you just want to move

177
00:11:02.570 --> 00:11:07.250
the slider bar and have
the no SQL database. Yeah.

178
00:11:07.520 --> 00:11:12.140
That's, that would be the
optimal situation, obviously at the

179
00:11:12.140 --> 00:11:17.720
moment. It's not quite there
yet. We are using Azure

180
00:11:17.810 --> 00:11:24.620
table storage's, which are pretty
dude in providing scalability. But

181
00:11:24.620 --> 00:11:28.670
for example, if you want
to sharp and more than

182
00:11:28.670 --> 00:11:31.850
your initial shot, you need
to do a complete data

183
00:11:31.850 --> 00:11:34.910
migration. I see. So with
table storage, it's a big

184
00:11:34.940 --> 00:11:38.810
deal to go and change
your existing sharding. Yeah, it

185
00:11:38.810 --> 00:11:42.890
is. Okay. We learned that
the hard way. Well, and

186
00:11:42.890 --> 00:11:44.780
this is, what's good about
this kind of conversation is

187
00:11:44.780 --> 00:11:46.310
you find out what's the
hard way and what's the

188
00:11:46.310 --> 00:11:49.640
easy way. Cause things sound
like they're easy initially, but

189
00:11:49.640 --> 00:11:53.530
then there's there's technical debt
that builds up what you

190
00:11:53.530 --> 00:11:57.010
use as your document DB.
Then the Jason based, no

191
00:11:57.010 --> 00:12:03.180
SQL solution versus table storage
for Document DB is mainly

192
00:12:03.180 --> 00:12:07.500
used for fast churches. So
we store basically the same

193
00:12:07.500 --> 00:12:12.240
data in Dayville starches and
also in DP. But we,

194
00:12:12.240 --> 00:12:15.990
we, we delay the saving
for the document DB and

195
00:12:15.990 --> 00:12:20.280
also we use aggregate tables
there to create faster cherish

196
00:12:20.550 --> 00:12:27.870
searches. So yeah, the lack
of indexing in Dale's storage

197
00:12:27.870 --> 00:12:30.870
is, is forcing us to
use some solution that our

198
00:12:30.870 --> 00:12:34.950
document DB was pretty open.
I'm all for it. So

199
00:12:34.950 --> 00:12:37.050
when you've got, when you've
got like millions or hundreds

200
00:12:37.050 --> 00:12:39.780
of thousands, millions of users
online at the same time,

201
00:12:40.140 --> 00:12:42.570
how, how chatty is this?
Like, there's all the little

202
00:12:42.570 --> 00:12:45.030
transactions you make as you
upgrade your people or as

203
00:12:45.030 --> 00:12:48.150
you go out and you
battle, are you just sending

204
00:12:48.150 --> 00:12:52.110
a constant stream of, of
data into the back end

205
00:12:52.110 --> 00:12:54.630
and letting it chew on
it? Or are there smarts

206
00:12:54.840 --> 00:12:57.420
in the game itself that,
you know, that batch these

207
00:12:57.420 --> 00:13:02.880
things up and send aggregate
data back? Well, client isn't

208
00:13:02.880 --> 00:13:06.870
that smart in a sense
he does send Lego. We,

209
00:13:08.160 --> 00:13:10.890
we do send a comat
every time you do a

210
00:13:10.890 --> 00:13:14.160
change in the game that
needs to be reflected into

211
00:13:14.160 --> 00:13:16.680
the game model or in
the state of the player.

212
00:13:18.090 --> 00:13:21.180
But what we do is
we actually cache these players

213
00:13:21.210 --> 00:13:27.120
on the front servers. So
instead of pushing every change,

214
00:13:27.150 --> 00:13:33.720
always back into the database
table storage, or instead we

215
00:13:33.750 --> 00:13:36.510
give them a memory in
cash and we just keep

216
00:13:36.510 --> 00:13:39.900
on talking with the client
directly from the cash. So

217
00:13:39.900 --> 00:13:44.580
it's really faster basically in
one big victory, old layers

218
00:13:44.610 --> 00:13:49.410
that are on that server
instance. And we always store

219
00:13:50.790 --> 00:13:56.670
the player into the, versus
the data storage when the

220
00:13:56.670 --> 00:14:01.870
player disconnects or the server
goes into the sharp Indonesia.

221
00:14:02.550 --> 00:14:04.590
I see. So you're pushing
data into that, that edge

222
00:14:04.620 --> 00:14:06.750
cache, that front end cash.
And then you flush it

223
00:14:06.750 --> 00:14:10.290
effectively when the person either
has timed out and disappeared

224
00:14:10.290 --> 00:14:14.400
or they formally left the
game. Yeah. That's basically what

225
00:14:14.400 --> 00:14:17.310
we do, they seem to
fly Is that, of course

226
00:14:17.310 --> 00:14:20.790
everything's simplified. Is that like
a Reddis cash or your

227
00:14:20.790 --> 00:14:23.220
own memory, and you just
said it in memory dictionary,

228
00:14:23.220 --> 00:14:26.220
or are you using an
out and out of a,

229
00:14:26.250 --> 00:14:28.980
out of the box or
an open source memory caching

230
00:14:28.980 --> 00:14:32.550
system, like Reddis We are
using just it's in a

231
00:14:32.550 --> 00:14:36.510
memory dictionary at the moment
we looked into using reddish.

232
00:14:37.110 --> 00:14:40.680
The problem was that we
were unable to get actually

233
00:14:40.680 --> 00:14:47.250
any good performance numbers out
of radius. At least when

234
00:14:47.250 --> 00:14:50.580
we talk with, with Microsoft
and ask like, what's the

235
00:14:50.580 --> 00:14:55.220
performance on their ready solution?
No one came up and

236
00:14:56.030 --> 00:15:00.470
gave us like exact numbers.
They were it's fast. How

237
00:15:00.470 --> 00:15:06.130
fast? Interesting. Well, it's fast.
Okay. Like benchmark numbers, right?

238
00:15:06.130 --> 00:15:08.920
Because you're thinking about things
in terms of, of milliseconds,

239
00:15:08.920 --> 00:15:10.930
right? You don't want, you
can't do, you're doing work

240
00:15:10.930 --> 00:15:13.480
that you can't wait a
second or two seconds for

241
00:15:13.480 --> 00:15:16.660
something to happen if you're
thinking about any member. Yeah.

242
00:15:17.320 --> 00:15:22.420
And also because we were
handling our modals, played a

243
00:15:22.430 --> 00:15:25.930
modals in Jason, so we
would have you use ready.

244
00:15:26.290 --> 00:15:30.310
We would, every time need
to basically sterilize that model

245
00:15:30.670 --> 00:15:34.390
somehow to be able start
to be ready. And the

246
00:15:34.390 --> 00:15:40.150
most costly thing that we
do on the servers is

247
00:15:40.150 --> 00:15:43.510
actually serializing the model back
and forward from Jason and

248
00:15:44.110 --> 00:15:47.260
or a license to commands
or anything that happens there.

249
00:15:47.680 --> 00:15:51.960
And these are revising stuff.
So when we actually stored

250
00:15:51.960 --> 00:15:55.090
them as a memory object,
there's no need for serialization

251
00:15:55.090 --> 00:15:59.980
because they're already there. So
that is a huge performance

252
00:16:00.550 --> 00:16:03.820
benefit that we get from
using any memory. Gosh, is

253
00:16:03.820 --> 00:16:06.100
that Yeah. You know, I
think, I think that's really

254
00:16:06.100 --> 00:16:09.130
interesting. That's something that has
come up in my experience

255
00:16:09.130 --> 00:16:12.580
over the last 20 years,
doing all kinds of before

256
00:16:12.580 --> 00:16:14.560
it was Jason, it was
XML. And before it was

257
00:16:14.560 --> 00:16:17.830
XML, it was CSV. But
you'd be surprised that when

258
00:16:17.830 --> 00:16:21.340
you get a really tuned
system and you start getting

259
00:16:21.340 --> 00:16:25.600
latency down to nothing, serialization
comes up as the number

260
00:16:25.600 --> 00:16:27.760
one thing that your application
ends up doing. And then

261
00:16:27.760 --> 00:16:30.190
you have to ask yourself
how badly do I really

262
00:16:30.190 --> 00:16:34.030
want to serialize this? Yeah.
We noticed that, that, that

263
00:16:34.030 --> 00:16:37.210
is actually the number one
thing that is using our

264
00:16:37.210 --> 00:16:40.270
resources at the moment is,
is serializing. So we are

265
00:16:40.270 --> 00:16:44.140
obviously always looking into options
that could be used other

266
00:16:44.140 --> 00:16:48.940
ways of serializing than Jason,
for example, wrote the path

267
00:16:48.970 --> 00:16:54.040
or a message back, but
they all have their drawbacks.

268
00:16:54.100 --> 00:16:57.760
And obviously also it's very
important that those things are

269
00:16:57.760 --> 00:17:02.170
serialized, same way. Like the,
the data that we want

270
00:17:02.170 --> 00:17:03.910
to serialize the object we
want to Sarah, last time

271
00:17:03.910 --> 00:17:06.850
Sarah left the same way
also on unique clients that

272
00:17:06.850 --> 00:17:10.720
want our model. So we
have to be really careful

273
00:17:10.780 --> 00:17:14.530
what we use for Sheryl
laceration. Right. And are you

274
00:17:14.530 --> 00:17:17.590
on Android now as well?
Yeah. So you're on Android

275
00:17:17.590 --> 00:17:19.870
and iOS is that those
are the two, my main

276
00:17:19.870 --> 00:17:22.990
clients. Yeah, those are right.
And you want to make

277
00:17:22.990 --> 00:17:26.110
sure that that, that serialization
works everywhere, but you also,

278
00:17:26.110 --> 00:17:29.620
I assume as you evolve
the game, as you add

279
00:17:29.620 --> 00:17:32.620
new features, you want a
reasonably flexible schema because there

280
00:17:32.620 --> 00:17:35.170
might be new features that
you add to a Guild.

281
00:17:35.500 --> 00:17:38.590
And you've also got people
on different versions of the

282
00:17:38.590 --> 00:17:41.380
game who might not all
update at the exact same

283
00:17:41.380 --> 00:17:44.200
time. And if you go
and serologic protocol buffers, or

284
00:17:44.200 --> 00:17:46.240
you start thinking about serialization,
then you have to manage

285
00:17:46.240 --> 00:17:51.630
serialization and versioning serialization. Yeah.
That day And a bit

286
00:17:51.630 --> 00:17:55.080
of a fecal to handle
it. I actually, at the

287
00:17:55.080 --> 00:17:59.400
moment we don't support players
with different versions. At least

288
00:18:00.140 --> 00:18:02.220
they cannot have like a
big difference in, in the

289
00:18:02.220 --> 00:18:06.440
version number. Oh, okay. The
client would force me to

290
00:18:06.440 --> 00:18:08.660
update if it found I
was too far back. Yeah.

291
00:18:09.110 --> 00:18:13.070
It will say that you
need gloves, but that's just

292
00:18:13.550 --> 00:18:20.390
since otherwise creating all the
necessary migrations and making sure

293
00:18:20.390 --> 00:18:24.410
that they work would be
too much of a hassle.

294
00:18:25.130 --> 00:18:28.580
We focus mainly on grading
migrations instead of new features.

295
00:18:29.270 --> 00:18:32.630
And we want to keep
refreshing the game and keep

296
00:18:32.630 --> 00:18:35.700
it fresh for the players
all the time. So W

297
00:18:35.700 --> 00:18:37.940
when you're doing these kinds
of different queries against the

298
00:18:37.940 --> 00:18:42.110
backend system, how many, how
many queries are when it's

299
00:18:42.110 --> 00:18:45.170
a user thinking about the
things that are in the

300
00:18:45.170 --> 00:18:50.300
user's world versus major aggregating
data, like high score leaderboards

301
00:18:50.300 --> 00:18:53.450
that are the entire country,
or, you know, scores by,

302
00:18:53.810 --> 00:18:56.240
you know, grouping, like all
the people on Facebook and

303
00:18:56.240 --> 00:18:58.580
all the people in Thailand
and things like that, you

304
00:18:58.580 --> 00:19:00.380
know, there's different. I guess
what I'm saying is that

305
00:19:00.380 --> 00:19:05.720
there's different key characteristics as
you're playing the game. There's

306
00:19:05.720 --> 00:19:07.970
the things that I care
about, my guilt things about

307
00:19:08.240 --> 00:19:10.550
versus the things that my
country thinks about versus the

308
00:19:10.550 --> 00:19:18.770
global leaderboard. Well, actually the
leaderboards themselves don't do that

309
00:19:18.770 --> 00:19:23.670
much work at all. We
have a pretty nice leader

310
00:19:23.670 --> 00:19:27.740
of artist and debt that
is created in a way

311
00:19:27.740 --> 00:19:31.880
that we can have infinite
amount of leaderboards and the

312
00:19:31.880 --> 00:19:35.630
game itself can decide what
kind of leader boards they

313
00:19:35.630 --> 00:19:38.090
want to use for the
back back. And doesn't actually

314
00:19:38.090 --> 00:19:41.570
care what kind of leader
boards you have. So if,

315
00:19:41.660 --> 00:19:44.240
if the game team decides
to have a new leader

316
00:19:44.240 --> 00:19:48.500
board with some, like, based
on, if you would like

317
00:19:48.500 --> 00:19:51.050
to have like leaderboard for
health, for a blade from

318
00:19:51.050 --> 00:19:55.070
Helsinki, they could do it.
There's no limitation to it.

319
00:19:55.130 --> 00:20:01.580
That's DB, which we use
to generate our leaderboards. And

320
00:20:01.580 --> 00:20:04.370
then the player data, it's
actually pretty simple in a

321
00:20:04.370 --> 00:20:08.120
sense it's for, for the,
for the server or the

322
00:20:08.120 --> 00:20:13.670
player is just a bunch
of text basically. And also

323
00:20:13.670 --> 00:20:18.950
also a model that inherits
a base model and the

324
00:20:18.950 --> 00:20:22.490
server only understand base model.
And it has very few

325
00:20:22.490 --> 00:20:26.600
methods into it. So from
the server point of view,

326
00:20:27.110 --> 00:20:31.250
things are really symbol. And
like, if we create new

327
00:20:31.250 --> 00:20:34.700
features, it doesn't usually need
a lot of <inaudible> the

328
00:20:34.700 --> 00:20:38.240
server team to actually implement
them because everything is so

329
00:20:38.240 --> 00:20:42.650
generic. We handle all the
commands that the, that the

330
00:20:42.650 --> 00:20:46.160
client Cindy in, they're all
just Jerry last, Jason, and

331
00:20:46.160 --> 00:20:48.670
for the server, there's a
serialized, Jason that's happened to

332
00:20:48.670 --> 00:20:52.390
implement an interface and we
then just shove it. Doll

333
00:20:52.400 --> 00:20:57.580
did the model and the
model manager and the model

334
00:20:57.580 --> 00:21:00.640
manager handles the execution of
that command on the server

335
00:21:00.640 --> 00:21:04.000
side. So for us, everything
is just strings on the

336
00:21:04.000 --> 00:21:10.470
server side. Nice. So in
this world of cloud-based scalable

337
00:21:10.470 --> 00:21:13.890
games in 2016, how much
do you have to think

338
00:21:13.890 --> 00:21:17.100
about scale? Right. I think
when the marketing people sell

339
00:21:17.100 --> 00:21:20.220
us the cloud, they tell
us that, Oh yeah, you

340
00:21:20.220 --> 00:21:22.350
don't have to think about
it at all. But you

341
00:21:22.350 --> 00:21:26.640
know, computer science is computer
science. So somewhere between you

342
00:21:26.640 --> 00:21:29.040
don't have to think about
it at all. And you

343
00:21:29.040 --> 00:21:31.740
have to think about it
constantly. You know, reality is

344
00:21:31.740 --> 00:21:33.630
in the middle somewhere. And
I'm curious in the real

345
00:21:33.630 --> 00:21:39.960
world, how much are you
sweating scale? Well, I've led

346
00:21:39.960 --> 00:21:43.110
to say not that much,
but then actually starting to

347
00:21:43.110 --> 00:21:45.830
starting and how much I've
been thinking about that at

348
00:21:45.830 --> 00:21:50.280
the past week, it's been
quite a lot. So does

349
00:21:50.280 --> 00:21:54.300
that vary week by week,
you will eat dust depending

350
00:21:54.300 --> 00:21:57.840
on what's delight. There's always
some issues as there is

351
00:21:57.900 --> 00:22:00.810
with any system. There's always
some issues. And depending on

352
00:22:00.810 --> 00:22:05.340
which issues issue happened to
be solid, but for us,

353
00:22:05.370 --> 00:22:08.610
it's, it's like, yeah, in
a sense, we already did

354
00:22:08.640 --> 00:22:11.940
all the farts that affect
scaling up. We did the

355
00:22:11.940 --> 00:22:15.390
sharding, we have the caching.
So the foundation is there

356
00:22:17.430 --> 00:22:22.380
and we have the glove
tools that helps us do

357
00:22:22.890 --> 00:22:27.300
the scale. But then you
can abuse those in a

358
00:22:27.300 --> 00:22:31.320
sense that if you start
thinking like, Oh, it'll just

359
00:22:31.320 --> 00:22:36.570
scale. But then we noticed
that we are actually, each

360
00:22:36.570 --> 00:22:42.270
player is like several megabytes
of Jason because he little

361
00:22:42.270 --> 00:22:45.390
scale and we didn't pay
attention how much data we

362
00:22:45.390 --> 00:22:49.320
were actually putting into a
player save. He doesn't actually

363
00:22:49.320 --> 00:22:54.440
skate anymore. So then the
marketing spirit just don't affect

364
00:22:54.460 --> 00:22:57.780
anymore. So that kind of
things you have to think

365
00:22:57.780 --> 00:23:01.890
about and be careful that
as you go along and

366
00:23:02.490 --> 00:23:06.540
level the game, you don't
recreate the kind of problems.

367
00:23:07.290 --> 00:23:08.970
So in a sense, you
need to think about it,

368
00:23:09.240 --> 00:23:13.170
but if you relate to
a foundational, well, it's really

369
00:23:13.260 --> 00:23:18.120
pretty scared at the pretty
easy not to get into

370
00:23:18.120 --> 00:23:22.260
any sort of scaling problems.
Do you think that there's

371
00:23:22.260 --> 00:23:25.350
a, the scaling issues are
really a matter of how

372
00:23:25.350 --> 00:23:27.660
much money you're willing to
spend versus how much you're

373
00:23:27.660 --> 00:23:29.970
able to scale? Because I
assume that you could hide

374
00:23:30.330 --> 00:23:34.080
architectural flaws by just paying
lots of money and scaling

375
00:23:34.080 --> 00:23:37.860
to the, the highest level,
you know, on any cloud,

376
00:23:37.860 --> 00:23:41.160
right. You just throw CPU
at it. So is it

377
00:23:41.160 --> 00:23:43.320
a balance between how much
engineering work we want to

378
00:23:43.320 --> 00:23:47.560
spend to affect much money
we spend each month? Well,

379
00:23:47.560 --> 00:23:51.070
actually drawing a CPU in
a sense like scaling up

380
00:23:51.550 --> 00:23:55.600
is something that we are
not using a scalability factor.

381
00:23:55.600 --> 00:24:00.640
We look more into like
how many players we can

382
00:24:00.640 --> 00:24:04.540
support simultaneously on one server
instance. And then we just

383
00:24:04.540 --> 00:24:07.480
have to make sure that
the system works as we

384
00:24:07.480 --> 00:24:14.590
add those instances. So we
scale out and they're in

385
00:24:14.590 --> 00:24:17.530
that scanner area. You cannot
actually hide that much of

386
00:24:17.530 --> 00:24:22.570
your architecture depth if you
didn't do it well, a

387
00:24:22.570 --> 00:24:25.210
scaling up in a sentence.
If, if you just draw

388
00:24:25.240 --> 00:24:29.380
more CPU or bigger instances,
then you get basically high

389
00:24:29.380 --> 00:24:34.730
some of the floors. But,
but I wouldn't say that

390
00:24:34.750 --> 00:24:38.620
would be the same thing
for the, for scaling out

391
00:24:38.620 --> 00:24:41.830
and making sure that you
can actually truly scale in

392
00:24:41.830 --> 00:24:46.030
a sense that as you
add more instances, your scaling

393
00:24:46.030 --> 00:24:49.810
will just multiply by the
number of instances. I see.

394
00:24:50.050 --> 00:24:52.930
So when you decide as
a company, as a team,

395
00:24:52.930 --> 00:24:57.160
how many people you want
on one server, did you

396
00:24:57.160 --> 00:24:58.960
just kind of figure that
out? Or how did you

397
00:24:58.960 --> 00:25:01.240
know, like, is it a
thousand or 10,000 or some

398
00:25:01.240 --> 00:25:02.800
number and you go, yeah,
that seems like a good

399
00:25:02.800 --> 00:25:08.170
number now we'll scale out
instead of up. Well, no,

400
00:25:08.170 --> 00:25:13.570
we actually did a pretty
much a load testing. So

401
00:25:13.570 --> 00:25:16.030
we did a, quite a,
quite a bit of that.

402
00:25:16.330 --> 00:25:20.710
We used the visual studio
online for that, which is

403
00:25:20.710 --> 00:25:25.480
really easy to just create
tens of thousands or hundreds

404
00:25:25.780 --> 00:25:29.890
of thousands virtual users. So
what we did, we created

405
00:25:29.920 --> 00:25:35.170
a unit desk that was
also using single arm mutual

406
00:25:35.170 --> 00:25:39.280
use for productivity to the
back end. And basically it

407
00:25:39.280 --> 00:25:44.230
was, we, what we did
was we recorded the commands

408
00:25:44.260 --> 00:25:51.730
that we sent during a,
a normal glacier straight out

409
00:25:51.730 --> 00:25:54.930
of unity. And then we
played back that with the,

410
00:25:55.040 --> 00:25:59.020
the unit test. And then
we launched that drew the

411
00:25:59.080 --> 00:26:05.620
visual studio online load test
harness, which then I believe

412
00:26:05.620 --> 00:26:08.140
it's can these days generate,
it used to be 50

413
00:26:08.140 --> 00:26:11.800
agents that it could generate
a 50 different instances of

414
00:26:11.830 --> 00:26:15.310
virtual machines now 200 or
something like that. So we

415
00:26:15.310 --> 00:26:19.900
used that to bombard our
load test environment. And from

416
00:26:19.900 --> 00:26:24.340
there, we could see when
we were actually spiking on

417
00:26:24.340 --> 00:26:29.020
CPU and what's the perfect
level for how many players

418
00:26:29.020 --> 00:26:33.940
we could support for on
each instance. Okay. And then

419
00:26:33.940 --> 00:26:37.480
once you've got that, that
number, do you auto scale

420
00:26:37.480 --> 00:26:39.010
out or do you have
a team that makes a

421
00:26:39.020 --> 00:26:43.530
decision to scale? We do.
We have set, set all

422
00:26:43.530 --> 00:26:46.560
the scaling on, but most,
most of the times happening

423
00:26:46.560 --> 00:26:51.620
by decision from the team.
So we have a continuous

424
00:26:51.630 --> 00:26:55.680
monitoring of the situation and
alerting system. And of course,

425
00:26:55.770 --> 00:27:01.890
on, on call personnel that
will immediately take action. If

426
00:27:01.890 --> 00:27:06.170
we get an alert, that
CPU is burning somewhere. So

427
00:27:06.170 --> 00:27:08.660
then you could, you know,
let's say that you were

428
00:27:08.660 --> 00:27:12.620
on the news or Oprah
mentions, Hey, I love walking

429
00:27:12.620 --> 00:27:16.400
dead, no man's land. And
then everyone rushes it'll scale,

430
00:27:16.700 --> 00:27:19.280
you know, cleanly and the
people who are playing the

431
00:27:19.280 --> 00:27:22.910
game, won't notice There's a
rush of people basically. Yeah.

432
00:27:23.270 --> 00:27:26.210
That would be the situation.
Fantastic. So then let me

433
00:27:26.210 --> 00:27:29.120
ask you this, now that
you've got that infrastructure created

434
00:27:29.120 --> 00:27:33.050
for this game, the next
game, how much can you

435
00:27:33.050 --> 00:27:35.360
use what you've learned and
what you've built to make

436
00:27:35.360 --> 00:27:38.810
the next massively multiplayer game?
Just Work that much easier.

437
00:27:39.740 --> 00:27:44.640
Well, everything, the way we
build the system, it is

438
00:27:44.640 --> 00:27:46.700
it's actually built in a
way that eat can be

439
00:27:46.700 --> 00:27:50.960
used by any game. So
we are actually using it.

440
00:27:51.050 --> 00:27:54.380
The first game is using
the same system, the compass

441
00:27:54.380 --> 00:27:58.640
blood waste as the walking
dead. So he could basically

442
00:27:58.640 --> 00:28:01.730
host any game that just
happens to obey, do our

443
00:28:01.730 --> 00:28:07.070
interface. All right. So then
next games, next game can

444
00:28:07.070 --> 00:28:10.370
be using this backend and
then it's intellectual property that

445
00:28:10.370 --> 00:28:12.740
you could sell or license
to someone else and they

446
00:28:12.740 --> 00:28:16.340
could use it Back end
in theory. Yes. Yeah. Most

447
00:28:16.340 --> 00:28:20.660
likely our next game we'll
use the same backend system.

448
00:28:21.860 --> 00:28:26.870
It has some pretty good
benefits. Like it's basically, well,

449
00:28:27.200 --> 00:28:30.200
I wouldn't say it like
deep poof, but it's really

450
00:28:30.200 --> 00:28:34.490
hard to cheat on. So
because everything is run on

451
00:28:34.490 --> 00:28:36.650
the server, we run the
whole game model and the

452
00:28:36.650 --> 00:28:41.960
server and the model is
deterministic. So whatever happens as

453
00:28:41.960 --> 00:28:45.830
Azure will happen on the
client and vice versa. Right.

454
00:28:45.830 --> 00:28:48.260
I think that people have
decided that even though I

455
00:28:48.260 --> 00:28:51.650
cloud on the iTunes side,
like iCloud game saves is

456
00:28:51.650 --> 00:28:54.590
not exactly that the best
way to do things. If

457
00:28:54.590 --> 00:28:57.680
people can log in via
Facebook or Google or their

458
00:28:57.680 --> 00:29:00.710
game center ID. And I
can go from my iPhone

459
00:29:00.890 --> 00:29:04.610
to my iPad and back,
and my game just feels

460
00:29:04.610 --> 00:29:07.520
persistent that this is a
model that people who play

461
00:29:07.520 --> 00:29:12.050
mobile games want. Yeah. That's
definitely something that you can

462
00:29:12.050 --> 00:29:16.370
do with our games. We,
you can basically blade on

463
00:29:17.240 --> 00:29:21.530
simultaneous knee while simultaneously, but
you can share the same

464
00:29:21.530 --> 00:29:25.250
game on your iPad or
iPhone or even your Android

465
00:29:25.250 --> 00:29:28.970
device. Yeah, absolutely. I like
being able to roam with

466
00:29:28.970 --> 00:29:30.440
any game. And I think
that if I have to

467
00:29:30.440 --> 00:29:32.930
go and synchronize saves and
things like that. So I

468
00:29:32.930 --> 00:29:35.990
think that the model for
these massively multiplayer games or

469
00:29:35.990 --> 00:29:38.390
games that can move from
mobile device to mobile device

470
00:29:38.630 --> 00:29:41.440
where the server is, like
you said, is running the

471
00:29:41.440 --> 00:29:43.540
game model on the server.
It has all sorts of

472
00:29:43.540 --> 00:29:46.420
benefits. Like you said, less
likely to have people cheating,

473
00:29:46.720 --> 00:29:49.420
but not having to think
about, you know, models, synchronization

474
00:29:49.420 --> 00:29:55.740
as well. Yeah, because it's
it's yeah. The synchronization is

475
00:29:55.740 --> 00:30:00.750
really simple. The server is
always right. We don't trust

476
00:30:00.750 --> 00:30:04.920
anything that the client actually
says. For example, if we

477
00:30:04.920 --> 00:30:07.830
send a command that you
call it, like in the

478
00:30:07.830 --> 00:30:11.230
walking dead, you call it
the tomato cans. Instead of

479
00:30:11.420 --> 00:30:16.110
<inaudible> from the client, like
collect five Harvard can't. He

480
00:30:16.120 --> 00:30:20.700
just sends a command from
the client, which is first

481
00:30:20.700 --> 00:30:23.520
executed on the client against
the model of the client

482
00:30:24.090 --> 00:30:28.710
saying that collect all available
cash from this building. And

483
00:30:28.710 --> 00:30:30.720
then it runs on the
server and does the same

484
00:30:30.720 --> 00:30:38.400
thing. And that'll update the
number of available tomato cans

485
00:30:38.430 --> 00:30:42.270
that you have in the
game on both sides. But

486
00:30:42.270 --> 00:30:45.690
the model itself actually decides
how much. So if you

487
00:30:45.690 --> 00:30:50.310
drive the cheat, eventually when
you drive to use those

488
00:30:50.310 --> 00:30:56.220
cans, there will be a
command that will use certain

489
00:30:56.220 --> 00:30:59.730
amount of cans, but it
will fail on the server.

490
00:30:59.730 --> 00:31:02.340
But because it didn't have
the amount of cash that

491
00:31:02.340 --> 00:31:05.910
your client thought it would
have, if you have a

492
00:31:05.910 --> 00:31:09.120
jailbreak device that you could
basically go dinger with the

493
00:31:09.120 --> 00:31:13.200
data I see. So the
authoritative source is, is the

494
00:31:13.200 --> 00:31:16.890
server and that prevents these
kinds of issues. Yes. Very

495
00:31:16.890 --> 00:31:19.170
cool. Well, I really appreciate
you taking the time to

496
00:31:19.170 --> 00:31:22.830
chat with me today. Ah,
what's happened to beer, So

497
00:31:22.830 --> 00:31:25.140
make sure to check out
next games and you can

498
00:31:25.140 --> 00:31:28.170
go look at the walking
dead. No man's land on

499
00:31:28.230 --> 00:31:32.580
iTunes and on the Android
store. This has been another

500
00:31:32.580 --> 00:31:35.280
episode of Hansel minutes and
we'll see you again next

501
00:31:35.280 --> 00:31:35.640
week.

