WEBVTT FILE

1
00:00:00.450 --> 00:00:03.750
Do you know, Swift objective
C and Java. Can you

2
00:00:03.750 --> 00:00:06.660
use them in tools like
X code or Android studio?

3
00:00:06.810 --> 00:00:10.320
If so awesome. But for
everyone else, there's native script

4
00:00:10.830 --> 00:00:14.850
to cross platform framework for
building native iOS and Android

5
00:00:14.850 --> 00:00:20.220
apps using skills, you already
have JavaScript or TypeScript CSS,

6
00:00:20.280 --> 00:00:25.110
and XAML like XML, markup.
Start building your dream native

7
00:00:25.110 --> 00:00:28.950
mobile apps today. Use the
native script command line interface

8
00:00:28.950 --> 00:00:32.280
for free or use native
script in visual studio with

9
00:00:32.280 --> 00:00:35.490
a Tellerik platform subscription, which
will enable you to build

10
00:00:35.490 --> 00:00:58.650
iOS apps without the glowing
Apple get started for free@telerikdotcomslashnativescriptfromhanselminutes.com.

11
00:00:59.280 --> 00:01:02.970
It's Hansel minutes, our weekly
discussion with web developer and

12
00:01:02.970 --> 00:01:08.610
technologist Scott Hanselman. This is
Lawrence Ryan announcing show number 509.

13
00:01:09.330 --> 00:01:12.840
In this episode, Scott talks
with Ben Adams about the

14
00:01:12.840 --> 00:01:19.320
MMO game, age of ascent.
Hi, this is Scott Hanselman.

15
00:01:19.320 --> 00:01:22.230
This is another episode of
Hansel minutes today. I'm talking

16
00:01:22.230 --> 00:01:26.010
with Ben Adams. He's the
CTO at Illyriad games, and

17
00:01:26.220 --> 00:01:28.920
they're working on an upcoming
video game called age of

18
00:01:28.920 --> 00:01:32.480
ascent. Thanks for chatting with
me. Hi Scott. Thanks for

19
00:01:32.480 --> 00:01:36.170
inviting me. So your game
has been being worked on

20
00:01:36.170 --> 00:01:38.810
now for a while. It's
coming up on two years,

21
00:01:38.810 --> 00:01:42.350
where you, since you started
your public alpha. Yeah, it

22
00:01:42.350 --> 00:01:48.740
has. It's, it's quite an
exciting journey. It's been, there's

23
00:01:48.950 --> 00:01:52.550
been all sorts of challenges
along the way. So You

24
00:01:52.550 --> 00:01:55.640
were trying to break scalability
records though on the Guinness

25
00:01:55.640 --> 00:01:58.850
book of world records, like
again two years ago, why

26
00:01:58.850 --> 00:02:01.910
did you start with scale
at, at, at a top

27
00:02:01.910 --> 00:02:07.250
of mind? Well, the, I
mean games in almost the

28
00:02:07.250 --> 00:02:11.780
last two decades, haven't really,
they haven't really changed. I

29
00:02:11.780 --> 00:02:15.530
mean, they've become more beautiful.
They've become, the physics has

30
00:02:15.530 --> 00:02:19.490
become better, but in terms
of, you know, the, the

31
00:02:19.510 --> 00:02:25.070
concurrency, the number of players
that play together, it hasn't

32
00:02:25.070 --> 00:02:29.090
really changed. I mean, now
the, the big improvements are

33
00:02:29.150 --> 00:02:34.940
saying that a big triple
a title you'd have you

34
00:02:34.940 --> 00:02:38.690
go from 32 players in
a match to 64, but

35
00:02:38.960 --> 00:02:43.490
you know, 10 years ago
that from the amount of

36
00:02:43.490 --> 00:02:47.150
technology has moved on since
then, that that's not really

37
00:02:47.150 --> 00:02:50.690
a great advancement. So we're
trying to usher in sort

38
00:02:50.690 --> 00:02:54.620
of ultra MMO, kind of
an entirely new scale of

39
00:02:54.620 --> 00:03:00.250
gaming to harness the power
of the cloud and, you

40
00:03:00.250 --> 00:03:04.120
know, just be able to
dynamically scale. And I mean,

41
00:03:04.120 --> 00:03:06.420
that sort of is all
about, So yeah, when I

42
00:03:06.420 --> 00:03:09.630
play like, you know, Battlefront,
I might get 32 players,

43
00:03:09.630 --> 00:03:12.360
I've seen 64 player games
and that's considered to be

44
00:03:12.590 --> 00:03:17.370
extraordinary, but didn't a game
called Eve online, get three

45
00:03:17.370 --> 00:03:21.000
or 4,000 players going a
couple of years back. Well,

46
00:03:21.000 --> 00:03:23.090
that was the, the record
we were trying to beat.

47
00:03:23.280 --> 00:03:26.550
I see. So 4,000 is
the record of concurrent players

48
00:03:26.550 --> 00:03:32.190
in one world. Well, yeah,
4,000 is the record for

49
00:03:33.660 --> 00:03:38.040
con players in a single
battle. However, I mean, I

50
00:03:38.670 --> 00:03:40.740
don't want to call out
Eve, but they, they, in

51
00:03:40.740 --> 00:03:43.710
order to achieve that, they
do slow the speed of

52
00:03:43.710 --> 00:03:49.710
gameplay down by 10% speed.
Whereas we're looking at sort

53
00:03:49.710 --> 00:03:53.820
of a real time keeping
it Twitch, Twitch based and

54
00:03:53.820 --> 00:03:56.640
really fast. And there are
people looking at that. So

55
00:03:56.640 --> 00:03:59.700
there's like planet side too,
I think. And there was

56
00:03:59.700 --> 00:04:02.400
a man versus machine, which
was a sort of tech

57
00:04:02.460 --> 00:04:06.390
preview where they did a
thousand players. So that, that

58
00:04:06.390 --> 00:04:08.460
was sort of the low
bar we were trying to

59
00:04:08.460 --> 00:04:11.820
get over for a Guinness
world record attempt. We only

60
00:04:12.450 --> 00:04:17.670
on the day, we only
had 990, about 996 players

61
00:04:17.700 --> 00:04:22.800
turn up, which was unfortunate
because we were, we just

62
00:04:22.800 --> 00:04:26.880
missed that low bar by
about five players. But the,

63
00:04:26.880 --> 00:04:29.280
the game though, you've designed
it with an order of

64
00:04:29.280 --> 00:04:33.720
magnitude more scale, right? I
mean, you, you could potentially

65
00:04:33.720 --> 00:04:36.420
have tens of thousands of
players in, in a single

66
00:04:36.420 --> 00:04:41.430
battle if you want it.
Absolutely. I mean, we've, we've

67
00:04:41.430 --> 00:04:44.880
tested it about a year
ago. We tested it up

68
00:04:44.880 --> 00:04:50.200
to 50,000 players in a
single battle battle where, and,

69
00:04:50.200 --> 00:04:52.320
and this is why performance
is so important to us

70
00:04:52.350 --> 00:05:01.260
where we were doing 297 million
application messages, a second two

71
00:05:01.290 --> 00:05:04.620
in order to have all
these players talking to each

72
00:05:04.620 --> 00:05:09.450
other, Heard articles and you'll
have to forgive my ignorance.

73
00:05:09.450 --> 00:05:14.070
Cause when I worked on
applications of massive scale, we

74
00:05:14.070 --> 00:05:16.920
were more like banking applications.
And we topped out at,

75
00:05:16.950 --> 00:05:19.740
you know, a few tens
of thousands of people, but

76
00:05:19.740 --> 00:05:23.130
they weren't sending dozens of
messages a second. They were

77
00:05:23.160 --> 00:05:26.700
checking their online banking balances.
So I realized that gaming

78
00:05:26.700 --> 00:05:31.680
is a very different experience.
But when I think about

79
00:05:31.680 --> 00:05:35.760
large scale message passing in
the millions or billions, I

80
00:05:35.760 --> 00:05:39.420
usually hear people talk about
WhatsApp and Earl Lang and

81
00:05:39.420 --> 00:05:44.520
Tim Bray kind of like
most famously said somewhere around

82
00:05:44.520 --> 00:05:46.500
2008, that if he were
going to build a large

83
00:05:46.500 --> 00:05:49.170
scale message passing system, he
would do it in Erlang

84
00:05:49.170 --> 00:05:52.200
and then WhatsApp went and
did it, did you look

85
00:05:52.200 --> 00:05:54.870
at languages like that or
systems like that for something

86
00:05:54.870 --> 00:05:59.840
of this scale We did,
but I mean, our, our

87
00:05:59.840 --> 00:06:05.420
expertise is the, the.net, a
variety of languages. And C-sharp,

88
00:06:05.420 --> 00:06:10.220
so that's where we focused
and, and, you know, we've

89
00:06:10.220 --> 00:06:14.540
spent many, many years with
it and know where to

90
00:06:14.540 --> 00:06:17.600
optimize it, where all the
rough edges are and you

91
00:06:17.600 --> 00:06:23.600
know how to do perf
analysis and work out where

92
00:06:23.600 --> 00:06:26.260
we need to improve things.
Was there any concern? I

93
00:06:26.260 --> 00:06:29.200
mean, I hear dotnet can't
scale and people point to

94
00:06:29.200 --> 00:06:31.930
stack overflow as the example,
but it's fair to say

95
00:06:31.930 --> 00:06:34.180
that there's not a huge
amount of startups out there

96
00:06:34.660 --> 00:06:38.410
doing.net. And while, while in
gaming, though, there is quite

97
00:06:38.410 --> 00:06:40.780
a few people using.net, but
they use it because unity

98
00:06:41.020 --> 00:06:45.010
brings them into the world
of C-sharp. I don't, I

99
00:06:45.010 --> 00:06:48.640
don't think we had any,
any worries. I mean, where

100
00:06:49.000 --> 00:06:58.840
our previous title, the eponymous
Lariat, isn't a asp.net application

101
00:06:59.140 --> 00:07:07.960
based on MVC. And that
is entirely C-sharp. So, and,

102
00:07:07.960 --> 00:07:10.240
and now there's also a
massively multiplayer game. It's a

103
00:07:10.240 --> 00:07:13.180
lot more slow paced than
what we're doing here, which

104
00:07:13.180 --> 00:07:17.650
is, you know, Twitch combat,
but in terms of the

105
00:07:17.650 --> 00:07:22.030
performance and the level of
concurrency that we were able

106
00:07:22.030 --> 00:07:26.010
to achieve, we had no
worries whatsoever. I mean, the,

107
00:07:26.010 --> 00:07:29.380
the whole landscape has changed
quite a bit from, you

108
00:07:29.380 --> 00:07:32.410
know, when, when async started
coming in, that's where it

109
00:07:32.410 --> 00:07:36.940
really started to, to change
how things work. So let's

110
00:07:36.940 --> 00:07:39.340
talk a little bit about
how you scale and how

111
00:07:39.340 --> 00:07:41.380
the backend works before we
get into the front end,

112
00:07:41.380 --> 00:07:43.630
which is itself interesting enough
to have it's almost its

113
00:07:43.630 --> 00:07:46.390
own show because the, the
technology behind this is really

114
00:07:46.390 --> 00:07:50.830
fascinating, but suffice it to
say right now, if you

115
00:07:50.830 --> 00:07:52.510
want to be involved in
the beta test or the

116
00:07:52.510 --> 00:07:54.550
alpha test, this has done
in the browser, right? This

117
00:07:54.550 --> 00:07:57.790
is all HTML, five web
GL web workers. Is that

118
00:07:57.790 --> 00:08:01.690
correct? Yep. So what are
you if I were to

119
00:08:01.720 --> 00:08:04.690
go and F 12 tools
and watch the messages across

120
00:08:04.690 --> 00:08:10.030
the wire, what are we
talking here? It's, it's entirely

121
00:08:10.030 --> 00:08:16.390
HTTPS web sockets. We have
to go over HTTPS because

122
00:08:16.420 --> 00:08:22.450
web sockets don't work well
for everybody over, you know,

123
00:08:22.450 --> 00:08:26.710
the open web, because not
every intermediary, although all the

124
00:08:26.710 --> 00:08:30.190
browsers understand it, the intermediaries,
you know, proxies and routers

125
00:08:30.190 --> 00:08:34.000
that some of them interfere
with the communication and we'll

126
00:08:34.000 --> 00:08:38.260
break it. So that, that's
why it's all over HTTPS,

127
00:08:38.290 --> 00:08:42.970
but it is essentially web
sockets between us and the,

128
00:08:43.120 --> 00:08:46.600
and the browser Does that
additional layer there itself bring

129
00:08:46.600 --> 00:08:48.880
in scalability issues and them
introduced quite a bit of

130
00:08:48.880 --> 00:08:55.200
latency. That was somewhere where
we had a worry of,

131
00:08:55.240 --> 00:08:57.750
of probably of anything. In
fact, we had to go

132
00:08:57.750 --> 00:09:01.920
over HTTPS was our biggest
worry, but no, we've had

133
00:09:01.920 --> 00:09:05.540
no problems. And it, it
works Interesting. Couldn't you have

134
00:09:05.540 --> 00:09:08.180
just been more draconian in
your technical requirements and just

135
00:09:08.180 --> 00:09:10.640
said, well, it's going to
be web sockets proper, and

136
00:09:10.640 --> 00:09:12.710
we're not going to, and
if you can't do it,

137
00:09:12.710 --> 00:09:17.840
you can't play Well. No,
I mean, one of our,

138
00:09:18.020 --> 00:09:21.950
one of our sort of
tenants is, you know, it's

139
00:09:21.970 --> 00:09:26.420
open web it's available to
anyone and you can just

140
00:09:27.020 --> 00:09:30.020
come along and you're instantly
in the game. I mean,

141
00:09:30.020 --> 00:09:33.470
we, we do have a
minimum bar, which is that

142
00:09:33.470 --> 00:09:37.790
you need to be able
to run web GL, although

143
00:09:38.930 --> 00:09:42.680
that's for the main flying
in space, space combat, but

144
00:09:42.680 --> 00:09:45.800
we will still have non-web
gel things. So if you

145
00:09:45.800 --> 00:09:48.800
want to trade in your
market and organize your laid

146
00:09:48.800 --> 00:09:50.660
out and all that sort
of stuff, you'll still be

147
00:09:50.660 --> 00:09:52.640
able to do that. And
that's more of a traditional

148
00:09:52.640 --> 00:09:57.230
webpage. Okay. So you're talking
web sockets over SSL you're

149
00:09:57.230 --> 00:09:59.750
and what is listening on
the other side? Are we

150
00:09:59.750 --> 00:10:06.170
using a cloud based servers?
Are they stateful stateless? What's

151
00:10:06.170 --> 00:10:14.240
on the backend, On the
backend, we have Kestrel server

152
00:10:15.290 --> 00:10:21.950
listening in service fabric honors
year, and that enables us

153
00:10:21.950 --> 00:10:27.050
to scale up their wealth
scale out dynamically and also

154
00:10:27.050 --> 00:10:32.210
scale back in dynamically. So
if we have, so if

155
00:10:32.210 --> 00:10:35.510
we have thousands of, of
players, you know, two alliances

156
00:10:35.510 --> 00:10:38.150
go to war and they,
they all decide to meet

157
00:10:38.150 --> 00:10:40.400
in the same, same place
we might be running on,

158
00:10:40.820 --> 00:10:44.450
you know, a tiny cluster.
And at that point, as

159
00:10:44.810 --> 00:10:48.080
the, the messages increase in
the CPU, you load increases,

160
00:10:48.080 --> 00:10:52.250
we essentially unfolds space and
spread it over more and

161
00:10:52.250 --> 00:10:55.370
more machines. So it becomes
bigger and that's sort of

162
00:10:55.370 --> 00:10:58.310
a seamless transition. The service
fabric gives us that sort

163
00:10:58.310 --> 00:11:04.880
of reliable frontend architecture. That's
always available as we're unfolding

164
00:11:04.880 --> 00:11:09.590
space and it organizes the
orchestration behind it. And then,

165
00:11:09.680 --> 00:11:11.890
you know, when the, when
the combats died down, we,

166
00:11:11.890 --> 00:11:15.170
we fold space back in
and it's based on sort

167
00:11:15.170 --> 00:11:19.100
of player density Was service
fabric. Like the thing that

168
00:11:19.100 --> 00:11:22.190
you needed, because I've heard
lots of things about it,

169
00:11:22.190 --> 00:11:25.040
but it still has a
certain amount of, you know,

170
00:11:25.040 --> 00:11:27.060
for lack of a better
word of phrasing. It it's,

171
00:11:27.410 --> 00:11:30.080
it smells like PhDs. When
I start thinking about Azure

172
00:11:30.080 --> 00:11:31.460
service fabric and I go,
I don't know if I'm

173
00:11:31.460 --> 00:11:35.510
smart enough to use that.
I mean, initially we were,

174
00:11:35.510 --> 00:11:41.090
we were building our own
system and service fabric sort

175
00:11:41.090 --> 00:11:43.970
of came along at the
right time. It was, I

176
00:11:43.970 --> 00:11:46.580
mean, we had a look
at Orleans previously, which was

177
00:11:47.950 --> 00:11:51.350
another actor based, well, I
mean, we're not using actors

178
00:11:51.350 --> 00:11:54.880
and service fabric. We're using
this state stateful and stateless

179
00:11:54.880 --> 00:11:59.020
services and tried to see
if that would meet our

180
00:11:59.020 --> 00:12:01.270
needs. And it didn't quite
fit what we were trying

181
00:12:01.270 --> 00:12:06.550
to do. So we started
building our own system that

182
00:12:06.550 --> 00:12:12.520
would, would do this orchestration
of space, unfolding, dynamically re

183
00:12:12.520 --> 00:12:16.660
partitioning players. And then it,
it, it sort of came,

184
00:12:16.900 --> 00:12:18.880
came along at the right
time where we weren't too

185
00:12:18.880 --> 00:12:22.990
far down the path and
it solved an awful lot

186
00:12:22.990 --> 00:12:28.330
more problems. And yeah, there
is, there is a way

187
00:12:28.330 --> 00:12:31.240
for PhD in terms of
how the problems have been

188
00:12:31.240 --> 00:12:34.630
solved, but it's in terms
of using it. It's not

189
00:12:34.630 --> 00:12:38.010
that hard. I've seen demos
where service fabric will make

190
00:12:38.010 --> 00:12:41.880
millions of objects and you,
as the person managing state,

191
00:12:41.910 --> 00:12:43.980
just doesn't have to think
about it. You just make

192
00:12:43.980 --> 00:12:46.170
a million of these things
and you let surface fabric

193
00:12:46.170 --> 00:12:49.680
figure it out. Is that
basically how it works? I

194
00:12:49.680 --> 00:12:51.810
mean, is it that simple
or are you thinking about

195
00:12:51.810 --> 00:12:55.950
how to scale as you're
coding this? Well, they have

196
00:12:56.310 --> 00:13:00.600
two different scenarios. So that's
the, the actor model where

197
00:13:00.600 --> 00:13:05.070
you have all these individual
items that as you say

198
00:13:05.070 --> 00:13:07.500
live, you can create millions
of them. And it, it

199
00:13:07.980 --> 00:13:10.320
deals with the orchestration. We
use the, the other one,

200
00:13:10.320 --> 00:13:15.180
which is the microservice based
thing where we have sort

201
00:13:15.180 --> 00:13:20.640
of concurrent D persistent, reliable
collections that we store statin.

202
00:13:20.940 --> 00:13:25.520
And it's pretty much like.net
collections, you know, dictionaries and

203
00:13:25.530 --> 00:13:28.800
so forth. And then it
handles, you know, it looks

204
00:13:28.800 --> 00:13:32.760
at the CPU loads and
works out where to move

205
00:13:32.760 --> 00:13:34.740
things about, and you can
put constraints on. So you

206
00:13:34.740 --> 00:13:38.640
might say, this should never,
this type of service should

207
00:13:38.640 --> 00:13:41.430
never occupy the same servers,
this type of server. Cause

208
00:13:41.430 --> 00:13:43.500
you know that the contention
will be bad between them

209
00:13:44.970 --> 00:13:48.330
or you want them on,
on particular sized VMs. But

210
00:13:48.330 --> 00:13:52.410
yeah, it organizes where it
needs to, to move things

211
00:13:52.770 --> 00:13:57.090
around. And if you know,
you have the primary fall

212
00:13:57.090 --> 00:14:00.240
over, then you have secondaries
that immediately step in and

213
00:14:00.240 --> 00:14:06.990
take over for us sort
of seamless, seamless reliability. I've

214
00:14:06.990 --> 00:14:09.840
always felt that when someone
does a start up or

215
00:14:09.840 --> 00:14:11.730
they sit down and they
want to make something amazing,

216
00:14:12.030 --> 00:14:15.030
the fact that often we
hear that, well, you know,

217
00:14:15.030 --> 00:14:18.750
before I make this cool
space shooting game, I have

218
00:14:18.750 --> 00:14:21.720
to design a microservice framework
that will manage state. You

219
00:14:21.720 --> 00:14:23.730
know what I mean? Like
it's like before I do

220
00:14:23.730 --> 00:14:26.340
this amazing high level thing,
that's not been done before,

221
00:14:26.340 --> 00:14:27.960
I need to go and
do this crazy low level

222
00:14:27.960 --> 00:14:31.050
thing that hasn't been done
before. And it just seems

223
00:14:31.050 --> 00:14:34.560
so like against the way
business should be done, you

224
00:14:34.560 --> 00:14:39.150
know, are, are you consciously
trying to use available services

225
00:14:39.150 --> 00:14:42.870
and open source and projects
that have reliably solved things

226
00:14:42.870 --> 00:14:45.810
before? Or are you finding
yourself dropping down into the

227
00:14:45.810 --> 00:14:47.790
low level a lot and
kind of going, gosh, why

228
00:14:47.790 --> 00:14:50.250
am I on the, why
am I thinking about, you

229
00:14:50.250 --> 00:14:52.610
know, bite at this level,
I really need to be

230
00:14:52.610 --> 00:14:57.370
making space games. Yeah, we
are, we are dropping down

231
00:14:57.460 --> 00:15:01.270
to quite low level, but
I mean, it is because

232
00:15:01.270 --> 00:15:04.090
we are trying to do
it at such a such

233
00:15:04.090 --> 00:15:08.530
a huge scale. So we
have, you know, about every

234
00:15:08.530 --> 00:15:11.410
two months, we we'll have
a meeting discussing our message

235
00:15:11.410 --> 00:15:15.820
packets and single bit, not
a bite, a single bit

236
00:15:15.970 --> 00:15:20.620
in, in our message explodes
to 900 megabytes a second,

237
00:15:20.680 --> 00:15:25.300
Oh, sorry. Not 909 megabytes
a second in server bandwidth

238
00:15:26.050 --> 00:15:28.630
at that kind of scale.
So we, we do need

239
00:15:28.630 --> 00:15:32.650
to go down to that
level. However, if there is

240
00:15:32.650 --> 00:15:36.340
a technology that exists, we
do try and use it.

241
00:15:36.640 --> 00:15:44.230
So for instance, service fabric,
Castro, asp.net, and you know,

242
00:15:44.230 --> 00:15:48.040
of course the LR. Do
you, did you, are you

243
00:15:48.040 --> 00:15:50.740
familiar with captain Prado or
protocol buffers? Do you use

244
00:15:50.740 --> 00:15:54.700
those at all? No, we,
I mean, I am familiar

245
00:15:54.700 --> 00:15:57.370
with them, but we, I
mean, we, we do have

246
00:15:57.370 --> 00:16:02.770
very custom messages to, so
we, you know, it's very

247
00:16:02.770 --> 00:16:05.860
domain specific in terms of
what, in a message we

248
00:16:05.860 --> 00:16:10.450
can discard what we can
make slightly lossy and all

249
00:16:10.450 --> 00:16:12.340
that sort of stuff. And
when we can send it,

250
00:16:12.370 --> 00:16:16.870
maybe we can, we can
put an extra header in

251
00:16:16.870 --> 00:16:21.970
one message and then all
the others don't need sort

252
00:16:21.970 --> 00:16:25.990
of reduced data. He is
a completely custom binary protocol.

253
00:16:25.990 --> 00:16:28.840
It's not just taking strucks
and sterilizing them across the

254
00:16:28.840 --> 00:16:30.820
wire. It is down. Like
I said to the bite

255
00:16:31.930 --> 00:16:34.990
To the bit Bitch. Pardon
me? That's amazing. I mean,

256
00:16:34.990 --> 00:16:38.680
that's insane. An extra bit
is an extra gig on

257
00:16:38.680 --> 00:16:41.310
the wire, you know, when
it, when you run into

258
00:16:41.330 --> 00:16:43.150
scale, but it makes sense,
right? That is the, that

259
00:16:43.150 --> 00:16:45.550
is the issue. There's the
old joke that I always

260
00:16:45.550 --> 00:16:49.090
like to tell about about
scalability is that if you

261
00:16:49.090 --> 00:16:54.220
do nothing, you can do
it infinitely. Indeed. I have

262
00:16:54.220 --> 00:16:55.960
a, I have a tweet
from you on one of

263
00:16:55.960 --> 00:17:02.350
our blog posts, but nothing
can scale infinitely. So speaking

264
00:17:02.350 --> 00:17:06.970
of doing nothing infinitely, you
have most recently become the

265
00:17:06.970 --> 00:17:11.800
primary committer on the asp.net
Kestrel web server. This is

266
00:17:11.800 --> 00:17:15.670
the live UV based web
server that, that Microsoft is

267
00:17:15.670 --> 00:17:19.120
going to ship with asp.net
five. And about three weeks

268
00:17:19.120 --> 00:17:23.560
ago, you did a merge
with ESPN, Annette Kestrel, and

269
00:17:23.560 --> 00:17:27.910
you went from 88 bytes
allocated per request to zero.

270
00:17:29.200 --> 00:17:30.730
How do you, how do
you do that? And what

271
00:17:30.730 --> 00:17:34.330
is the significance of something
like that? Well, the, the,

272
00:17:36.190 --> 00:17:41.140
with the very high throughput,
obviously you're doing lots and

273
00:17:41.140 --> 00:17:45.460
lots and lots of requests
per second. Even though I'm

274
00:17:45.640 --> 00:17:49.800
in the.net world, you don't
have to so much worry

275
00:17:49.800 --> 00:17:53.970
about your memory because it's,
you know, as garbage collected,

276
00:17:53.970 --> 00:17:56.070
you don't need need to
know when you're allocating the

277
00:17:56.070 --> 00:18:01.320
allocating and so forth. You're
you are putting load on

278
00:18:01.320 --> 00:18:03.480
the garbage collector in order
for it to do that

279
00:18:03.480 --> 00:18:08.130
work. So the idea is,
if you, if you don't

280
00:18:08.130 --> 00:18:11.280
need to allocate the memory
and you can avoid it,

281
00:18:11.490 --> 00:18:13.950
then the garbage collect doesn't
have to do the, the

282
00:18:13.950 --> 00:18:16.950
cleanup work, which gives you,
gives them more back to

283
00:18:16.950 --> 00:18:21.290
the application. So you can
do even more work, Which

284
00:18:21.290 --> 00:18:24.600
is do nothing in this
case. Like if you, if

285
00:18:24.600 --> 00:18:26.720
you can reuse something, don't
do it. And with, and

286
00:18:26.720 --> 00:18:28.910
we abused. And honestly, for
the last 10 years, even

287
00:18:28.910 --> 00:18:32.270
20 years, we've abused garbage
collectors, but we always have

288
00:18:32.270 --> 00:18:34.760
to pay for it. When
things pause when the actual

289
00:18:34.760 --> 00:18:39.350
garbage collection occurs. Yeah, completely.
I mean, when I was

290
00:18:39.350 --> 00:18:42.800
testing the, the throughput, I
don't know, it was about

291
00:18:43.070 --> 00:18:48.200
six months ago, you know,
as you putting a very

292
00:18:48.200 --> 00:18:51.770
heavy load through it, it
would, it would perform quite

293
00:18:51.770 --> 00:18:56.600
well. But then after about
five minutes of doing 500

294
00:18:56.600 --> 00:19:01.160
requests, a second, sorry, 500,000
requests, a second, suddenly everything

295
00:19:01.160 --> 00:19:03.800
would stop or the network
traffic would drop to zero.

296
00:19:04.010 --> 00:19:06.440
Your CPU would still be
on a hundred percent as

297
00:19:06.440 --> 00:19:09.140
the garbage collector was going
through the gigabytes and gigabytes

298
00:19:09.140 --> 00:19:14.390
and gigabytes that you'd been
allocating per second. This episode

299
00:19:14.390 --> 00:19:17.540
of Hansel minutes is brought
to you by Braintree code

300
00:19:17.540 --> 00:19:20.690
for easy online payments. If
you're building a mobile app

301
00:19:20.690 --> 00:19:23.540
and you're searching for a
simple payment solution, check out

302
00:19:23.540 --> 00:19:27.650
brain tree, the brain tree
v.zero SDK makes it easy

303
00:19:27.650 --> 00:19:31.220
to offer multiple mobile payment
types. So you can start

304
00:19:31.220 --> 00:19:35.510
accepting PayPal, Apple pay Bitcoin,
Venmo, credit cards, and more

305
00:19:35.930 --> 00:19:39.860
all with a single integration,
one small snippet of code.

306
00:19:39.860 --> 00:19:42.410
And you're set up in
less than 10 minutes. If

307
00:19:42.410 --> 00:19:44.150
you don't have time, you
can give them a call.

308
00:19:44.150 --> 00:19:46.520
They'll even handle the integration
for you and walk you

309
00:19:46.520 --> 00:19:51.560
through it. The SDK supports
seven languages, dotnet node, Java,

310
00:19:51.590 --> 00:19:57.140
Perl, PHP, Python, and Ruby
elegant code clear documentation to

311
00:19:57.140 --> 00:20:01.400
learn more. And for your
first $50,000 in transactions fee

312
00:20:01.400 --> 00:20:15.570
free, go to Braintree payments.com/hanselman
that's Braintree payments.com/hanselman. The, the,

313
00:20:15.570 --> 00:20:17.980
the, the decision to go
Kestrel and to go ESPN

314
00:20:17.980 --> 00:20:22.400
at five, you're doing something
that's pretty alpha. It's pretty

315
00:20:22.490 --> 00:20:26.270
on the cutting edge, the
bleeding edge. Again, no concerns

316
00:20:26.270 --> 00:20:30.530
about, about, you know, racing
forward into the future using

317
00:20:31.080 --> 00:20:33.830
web GL and the latest
JavaScript things, and the latest,

318
00:20:34.400 --> 00:20:36.980
the latest, everything on both
on the server and on

319
00:20:36.980 --> 00:20:39.320
the, on the client. Have
you gotten, have you gotten

320
00:20:39.320 --> 00:20:44.180
in trouble? Have you gotten
nailed? Well, originally we weren't

321
00:20:44.660 --> 00:20:48.520
going that direction. I mean,
we traditionally, or previously we,

322
00:20:48.520 --> 00:20:53.110
we, we were asp.net, I
suppose. It's four. Was that

323
00:20:53.180 --> 00:20:58.440
the first one before four,
four, six. Yeah. And it

324
00:20:58.450 --> 00:21:02.620
didn't quite work for us
for what we are trying

325
00:21:02.620 --> 00:21:08.170
to do for age of
ascent. We did, we did

326
00:21:08.170 --> 00:21:12.730
move to Katana rather than
as our, as our first

327
00:21:12.730 --> 00:21:15.010
step. And then we had,
we, we did run into

328
00:21:15.010 --> 00:21:19.300
some, some issues. There were
some issues that we found

329
00:21:19.300 --> 00:21:21.160
with the framework that we
fed back to the team

330
00:21:21.160 --> 00:21:25.240
and, and got fixed with
web sockets and then to

331
00:21:25.240 --> 00:21:29.470
get even more pref performance,
we moved to HDDP Lesnar.

332
00:21:29.480 --> 00:21:32.620
So we dropped IAS. So
we were going sort of

333
00:21:33.250 --> 00:21:36.490
raw to the socket. And
then we found we needed

334
00:21:36.610 --> 00:21:41.080
even more. And so which,
which point we started developing

335
00:21:41.080 --> 00:21:47.170
our own web server to
serve that need. And I

336
00:21:47.170 --> 00:21:52.810
think around that time, I
mean, asp.net five was always

337
00:21:52.810 --> 00:21:57.970
open source, I think, but
around that time, a whole

338
00:21:57.970 --> 00:22:03.700
bunch of interesting things started
happening. so.net, open sourced, the

339
00:22:03.700 --> 00:22:07.570
whole framework then.net core appeared.
And that was, that was

340
00:22:07.570 --> 00:22:10.240
suddenly, you know, pay for
play. That was a lot

341
00:22:10.240 --> 00:22:15.280
more what we wanted. And
then I started paying a

342
00:22:15.280 --> 00:22:19.420
lot more attention to what
was happening in the asp.net

343
00:22:19.420 --> 00:22:22.690
world with asp.net five. It
sort of, you know, woke

344
00:22:22.690 --> 00:22:26.620
me up a little bit
and I thought maybe time

345
00:22:26.620 --> 00:22:31.930
to revisit. And I think
I was watching a community

346
00:22:31.930 --> 00:22:39.310
standup and Damian was saying,
you created a benchmarks report.

347
00:22:39.670 --> 00:22:44.740
So, and, you know, accepting
pull requests of different service

348
00:22:44.740 --> 00:22:46.660
to see what was going
on. And they were sharing

349
00:22:46.660 --> 00:22:50.530
that result. And so I,
I gave a sort of

350
00:22:50.530 --> 00:22:53.050
a view of the server
we were creating, which was

351
00:22:53.050 --> 00:22:57.660
the using the register dyad,
extensions and windows. And I

352
00:22:57.670 --> 00:23:01.990
pushed that to the, the
benchmarks and they seemed quite

353
00:23:01.990 --> 00:23:07.480
happy with it. So, but
there's, there's an awful lot

354
00:23:07.480 --> 00:23:10.420
more than what we were
trying to do specifically for

355
00:23:10.420 --> 00:23:13.510
flying in space, which is
where we need that really

356
00:23:13.510 --> 00:23:18.460
high throughput. You know, we
wanted a web services of

357
00:23:18.460 --> 00:23:23.230
webpages assets, web API, all
that sort of stuff, which,

358
00:23:23.620 --> 00:23:27.130
you know, is something extra
that asp.net five gives you

359
00:23:27.700 --> 00:23:30.790
rather than our, we have
a raw web socket server.

360
00:23:34.480 --> 00:23:41.440
So we started looking@whetherwecouldputasp.net five
on top of our web

361
00:23:41.440 --> 00:23:48.830
server. And so I was
talking to Damien Edwards and

362
00:23:48.830 --> 00:23:53.960
David Fowler about them, and they
were helping me sort of

363
00:23:54.440 --> 00:23:56.480
what, what I needed to
put in the web server

364
00:23:56.480 --> 00:23:59.720
to make it work. And
then at one point they've

365
00:24:00.050 --> 00:24:04.460
asked, you know, have you
ever thought of maybe improving

366
00:24:04.460 --> 00:24:07.850
Kestrel to, to work with
what you, you know, what

367
00:24:07.850 --> 00:24:11.660
you want to do? And
I thought, ah, yeah, why

368
00:24:11.660 --> 00:24:17.480
not? So, so at that
point I started looking at

369
00:24:17.480 --> 00:24:20.150
all the performance metrics of
Castro and that's where it

370
00:24:20.150 --> 00:24:25.040
all started and, and began.
And although, you know, I

371
00:24:25.040 --> 00:24:28.550
put pull requests in that,
that make it an awful

372
00:24:28.550 --> 00:24:32.360
lot faster. It's come with
all sorts of extra benefits.

373
00:24:32.360 --> 00:24:34.520
So I have a, I
have a team of people

374
00:24:35.360 --> 00:24:37.580
at Microsoft who are looking
at all my changes and

375
00:24:37.580 --> 00:24:39.560
going, well, have you thought
of doing this? Have you

376
00:24:39.560 --> 00:24:43.250
thought of doing that? And
suddenly all my improvements become

377
00:24:43.250 --> 00:24:46.850
an awful lot better. And
they're, you know, other fringe

378
00:24:46.850 --> 00:24:49.970
benefits, I get an enterprise
support agreement of my end

379
00:24:49.970 --> 00:24:53.950
code. I mean, you know,
That's a really interesting idea,

380
00:24:53.950 --> 00:24:56.500
right? If you work on
code that we are, we,

381
00:24:56.500 --> 00:25:00.460
Microsoft are going to eventually
ship, then yeah. It turns

382
00:25:00.460 --> 00:25:02.290
around and we hand it
right back to you with

383
00:25:02.590 --> 00:25:06.010
full support, because it's the
real thing which gets to

384
00:25:06.010 --> 00:25:09.040
the original kind of question.
But 15, 20 minutes ago

385
00:25:09.040 --> 00:25:11.530
where it's like, we're making
a space game, you know,

386
00:25:11.530 --> 00:25:13.330
do we need to have
our own web server that

387
00:25:13.330 --> 00:25:17.890
we wrote from scratch? And
no, it turns out that

388
00:25:17.890 --> 00:25:21.040
way. It turns out that
you don't, I mean, originally

389
00:25:21.040 --> 00:25:25.930
it was, but, you know,
we've, we have sort of

390
00:25:26.110 --> 00:25:30.040
shaped Castro to, to meet
our needs, which has also,

391
00:25:30.970 --> 00:25:34.070
you know, works with the
needs of the community, But

392
00:25:34.180 --> 00:25:36.520
everyone wins, right. I mean,
that's, that's, that's kind of

393
00:25:36.520 --> 00:25:39.040
how it's supposed to work.
Right. You needed a feature

394
00:25:39.430 --> 00:25:41.020
and it just happened to
be features that other people

395
00:25:41.020 --> 00:25:44.500
needed as well. And, you
know, everybody wins, hopefully it

396
00:25:44.500 --> 00:25:45.940
won't get to a point
where you have to fork

397
00:25:45.940 --> 00:25:49.060
it, but it sounds like
everyone wins so far. Yeah,

398
00:25:49.090 --> 00:25:54.220
definitely. I mean, open sources.
Yeah. It's, it's like a

399
00:25:54.220 --> 00:25:58.870
force multiplier, so everything we've,
it sort of gives us

400
00:25:58.870 --> 00:26:01.440
the best of both worlds.
We've got like a, a

401
00:26:01.590 --> 00:26:04.300
great diversity of minds from
all around the world, sort

402
00:26:04.300 --> 00:26:07.510
of giving a wider viewpoint.
Cause we, you know, obviously

403
00:26:07.510 --> 00:26:11.530
we have quite a narrow
focus and there's, they're all

404
00:26:11.530 --> 00:26:14.860
specialists and they, that we
can contribute if we need

405
00:26:14.860 --> 00:26:19.540
fixes and the, the community
improves on what we do

406
00:26:19.540 --> 00:26:24.070
and our contributions and everything
just improves exponentially beyond it.

407
00:26:24.520 --> 00:26:27.610
Right. So let's move to
the client in the last

408
00:26:27.790 --> 00:26:32.080
remaining minutes here right now,
it's in the browser. Right.

409
00:26:32.110 --> 00:26:35.020
So when we talk about
cross-platform things, we kind of

410
00:26:35.440 --> 00:26:37.330
think about the browser and
say, well, if it runs

411
00:26:37.330 --> 00:26:40.180
in the browser, it runs
on every platform, but you're

412
00:26:40.180 --> 00:26:45.690
so JavaScript heavy. And so
web heavy are the platforms

413
00:26:45.690 --> 00:26:49.470
that you're targeting Chrome and
chromium and then Microsoft edge.

414
00:26:49.500 --> 00:26:52.470
Like, are those the quote
unquote operating systems that are

415
00:26:52.470 --> 00:26:56.690
your targets? Yes. I mean,
we, we, we go a

416
00:26:56.690 --> 00:27:02.100
little bit further than just
the browser. I mean, we,

417
00:27:02.100 --> 00:27:07.070
we are essentially just the
browser, but different environments, people,

418
00:27:08.750 --> 00:27:11.870
people like apps and things
I can install also. So

419
00:27:11.870 --> 00:27:14.600
if we're looking at steam,
van will, will mean an

420
00:27:14.600 --> 00:27:16.760
ACCE. If we're looking at
the windows store, we need

421
00:27:16.760 --> 00:27:20.180
an app that we can
put in there. But you

422
00:27:20.180 --> 00:27:23.960
know, in the windows store
where HTML JS app, that

423
00:27:23.960 --> 00:27:29.090
we, that we put in
the store and on for

424
00:27:29.090 --> 00:27:32.750
steam or, you know, people
just want to download next

425
00:27:32.770 --> 00:27:36.620
and install some random thing
from the internet. We're a,

426
00:27:37.040 --> 00:27:41.210
we use the electron, the
atom shell and which is

427
00:27:41.240 --> 00:27:45.710
chromium and, and that's how
we present it. So we

428
00:27:45.710 --> 00:27:51.020
have the, the website, we
have the edge based windows,

429
00:27:51.020 --> 00:27:56.820
10 universal platform that works
across devices. And then we

430
00:27:56.870 --> 00:28:00.800
have the electron shell as
well. Electronic formerly Adam shell

431
00:28:01.160 --> 00:28:04.820
went now historically though Iowa.
And historically, historically like right

432
00:28:04.820 --> 00:28:08.600
now, there seems to be
some negativity, I would say

433
00:28:08.600 --> 00:28:11.210
from not the end users.
I don't think that the

434
00:28:11.210 --> 00:28:15.320
nontechnical care, but the, just
technical enough to get, to

435
00:28:15.320 --> 00:28:21.080
be dangerous, look on electron
applications and Adam shell applications

436
00:28:21.080 --> 00:28:24.890
with disdain, you know, probably
an inappropriate disdain, but they'll

437
00:28:24.890 --> 00:28:28.760
look at something like the
Slack windows application and they'll

438
00:28:28.760 --> 00:28:30.830
install it and they go,
this is just the web

439
00:28:30.830 --> 00:28:33.770
browser and it in a
shell, it's certainly not, they

440
00:28:33.770 --> 00:28:36.560
don't realize how complicated what
they're doing is going on

441
00:28:36.560 --> 00:28:39.140
there. But how do you
think we combat that? Like,

442
00:28:39.650 --> 00:28:41.540
do you combat it with
just amazing graphics and a

443
00:28:41.540 --> 00:28:44.570
great gaming experience? And Hey,
I downloaded it from steam.

444
00:28:44.570 --> 00:28:47.990
So it doesn't really matter.
I, I mean, I mean,

445
00:28:47.990 --> 00:28:50.870
one of the issues that
we had with Alara ad

446
00:28:50.870 --> 00:28:54.290
was the, because it was
a game in a web

447
00:28:54.290 --> 00:28:58.190
browser sort of game reviews.
Don't, they're like, well, that's

448
00:28:58.190 --> 00:29:00.980
not a game. You know,
you don't read magazines, they

449
00:29:00.980 --> 00:29:05.960
understand it. They're just prejudice.
Yeah. So, I mean, it

450
00:29:05.960 --> 00:29:09.950
is moving to, we are,
it went, seemed like a,

451
00:29:10.370 --> 00:29:13.520
just a, a website in
a, in an app. I

452
00:29:13.520 --> 00:29:18.140
mean, that's what it will
be. So we're probably not

453
00:29:18.170 --> 00:29:22.820
concentrate on to, I mean,
the, the end user is

454
00:29:22.820 --> 00:29:26.690
just the experience. That's important
really Well. Frankly, if I

455
00:29:26.690 --> 00:29:28.940
go into steam and I
buy the thing and it

456
00:29:28.940 --> 00:29:31.310
looks like an official game
and it installs and it

457
00:29:31.310 --> 00:29:33.470
shows up on my machine
and I go full screen

458
00:29:33.800 --> 00:29:35.690
and it is doing 60
frames a second and it

459
00:29:35.690 --> 00:29:38.600
looks great. I don't think
I'm going to care. I

460
00:29:38.600 --> 00:29:42.640
mean, there are some extra
benefits we have with, so

461
00:29:42.640 --> 00:29:47.260
the universal windows platform and
with the electronic shell in

462
00:29:47.260 --> 00:29:51.070
that we can also our,
our build process we have.

463
00:29:52.300 --> 00:29:55.300
So we have, it goes
through, we put the assets

464
00:29:55.300 --> 00:29:58.550
for the website, we throw
in some Prejean zipping for

465
00:29:58.730 --> 00:30:00.790
the website. And so we
can download it, but we

466
00:30:00.790 --> 00:30:04.900
also deploy the assets into
those applications. So they they're

467
00:30:04.900 --> 00:30:09.640
running with local assets. And
so, you know, it's also

468
00:30:09.760 --> 00:30:16.290
a little bit bigger. So,
so the, the universal windows

469
00:30:16.290 --> 00:30:18.360
app, I'll be able to
go in the, in the

470
00:30:18.360 --> 00:30:20.250
store, like, you'll be in
as many stores as you

471
00:30:20.250 --> 00:30:21.870
can be. And I assume
you want everyone to play

472
00:30:21.870 --> 00:30:24.420
your game. So I go
into the steam store and

473
00:30:24.420 --> 00:30:26.550
you'll be there, it'll come
down and it'll look and

474
00:30:26.550 --> 00:30:29.190
run exactly as it should.
If I go into the

475
00:30:29.190 --> 00:30:32.730
universal windows store, it'll look
and run as it should.

476
00:30:32.910 --> 00:30:35.580
It's the same code though,
right? It's all, it's, it's

477
00:30:35.580 --> 00:30:39.070
JavaScript and web GL, isn't
it It's exactly the same.

478
00:30:39.070 --> 00:30:44.130
And, you know, I mean,
there are two slight differences

479
00:30:44.160 --> 00:30:50.610
with the windows universal platform
and electron in that they're

480
00:30:50.610 --> 00:30:54.450
actually better than the web
version because they have both

481
00:30:54.450 --> 00:30:59.460
of them have, we essentially
can put an iframe in

482
00:30:59.460 --> 00:31:02.370
them that we put the,
the web GL in and

483
00:31:02.370 --> 00:31:05.310
on Adam shell. That's a
web view. And I think

484
00:31:05.310 --> 00:31:09.330
in, we translate that into
a web view and in

485
00:31:09.360 --> 00:31:12.180
the universal windows platform, we
translate it into, I think

486
00:31:12.180 --> 00:31:16.440
it's an X ms. Web
view, and that then runs

487
00:31:16.890 --> 00:31:19.680
in a separate thread. So
we have two rendering threads,

488
00:31:19.680 --> 00:31:22.680
so we can put the
UI on top of the

489
00:31:22.680 --> 00:31:24.930
web GL. So they don't
actually interfere with each other.

490
00:31:26.310 --> 00:31:29.100
It's a better experience. Yeah.
It's a, so we can

491
00:31:29.100 --> 00:31:32.130
have like animated UI, and
it's not interfering with the

492
00:31:32.220 --> 00:31:35.220
web GL, but that's just
a fringe benefit. We're great

493
00:31:35.220 --> 00:31:38.430
on the web And you
don't spend lots of time,

494
00:31:38.910 --> 00:31:42.240
you know, chasing incompatibilities. It
seems like I hear so

495
00:31:42.240 --> 00:31:44.880
often when I talk to
like enterprise developers or people

496
00:31:44.880 --> 00:31:48.120
building text boxes over data,
you know, what a healthcare

497
00:31:48.120 --> 00:31:50.490
company or an insurance company,
they're like, Oh, we struggle

498
00:31:50.490 --> 00:31:54.810
with, you know, browser incompatibilities.
And I just can't write

499
00:31:54.810 --> 00:32:01.380
JavaScript that will validate this
text box, but you somehow

500
00:32:01.380 --> 00:32:04.550
have made a space game
that runs everywhere. Yeah. And

501
00:32:04.550 --> 00:32:06.330
I do find it strange.
I mean, there's even people

502
00:32:06.330 --> 00:32:10.650
that have trouble. I can't
even scroll my page. How

503
00:32:10.650 --> 00:32:12.780
would that have been janky?
Yeah. And it's like, well,

504
00:32:12.780 --> 00:32:15.510
that was a problem that
was sold what, 20 years

505
00:32:15.510 --> 00:32:20.640
ago. But we, we pay
an enormous amount of detail

506
00:32:20.640 --> 00:32:23.430
to, you know, what's going
on in the JavaScript, if

507
00:32:23.430 --> 00:32:26.040
there are any errors. Cause
if we're, if we're writing

508
00:32:26.220 --> 00:32:29.340
console errors hidden behind the
scenes, you know, you've got

509
00:32:29.340 --> 00:32:31.680
to call up at 12
and you just see that

510
00:32:32.520 --> 00:32:35.550
the site spewing thousands of
thousands of errors, that's hitting

511
00:32:35.550 --> 00:32:39.030
our frame rate directly. And
suddenly the game looks, looks

512
00:32:39.350 --> 00:32:42.020
so we, we it's it's
that we pay a lot

513
00:32:42.020 --> 00:32:44.180
of attention to it. We
have to pay a lot

514
00:32:44.180 --> 00:32:50.720
of attention to it, but
I'm not sure everybody looks

515
00:32:50.720 --> 00:32:53.560
at the detail as much
as maybe they should. You're

516
00:32:53.560 --> 00:32:55.570
being very kind. And I
don't want to call you

517
00:32:55.570 --> 00:32:59.470
out for being excessively English
or anything, but are you

518
00:32:59.500 --> 00:33:01.570
basically saying that people just
need to try a little

519
00:33:01.570 --> 00:33:04.810
harder pay a little more
attention? I mean, it's, it's

520
00:33:04.810 --> 00:33:08.230
not, you know, because where
we're amazingly brilliant, although, you

521
00:33:08.230 --> 00:33:11.380
know, it probably is, but
to make up for my

522
00:33:11.380 --> 00:33:16.540
Britishness. Excellent. But the people
just need to look a

523
00:33:16.540 --> 00:33:19.380
little bit deeper, pay attention
to the details. It's, it's

524
00:33:19.420 --> 00:33:23.500
more, you know, look at
what's going on, pay attention

525
00:33:23.500 --> 00:33:26.170
to, to what's going on
in Europe. That's, that's, what's

526
00:33:26.170 --> 00:33:28.210
really, You think it's fair
to say that a lot

527
00:33:28.210 --> 00:33:32.140
of people treat these systems
as black boxes and they

528
00:33:32.140 --> 00:33:34.990
just don't really know what's
going on. Like they use,

529
00:33:35.170 --> 00:33:36.970
like, I always use the
example of jQuery where it's

530
00:33:36.970 --> 00:33:40.930
like, yeah, I use jQuery
and, and a miracle occurs

531
00:33:41.380 --> 00:33:44.170
and the JavaScript runs, but
they don't really understand what's

532
00:33:44.170 --> 00:33:49.930
going on as deep enough,
maybe enough, enough layers of

533
00:33:49.930 --> 00:33:53.740
abstraction down. I don't, I
don't think so. I mean,

534
00:33:53.920 --> 00:33:58.060
I used to be the
greatest fan of jQuery, but

535
00:33:59.650 --> 00:34:03.070
browsers you've done. They do
JavaScript. Does it all natively

536
00:34:03.070 --> 00:34:06.520
now? Not, not everything. I'm
sure. You know, there's, there's

537
00:34:06.520 --> 00:34:09.220
polyfills and jQuery does help
with a lot of things,

538
00:34:09.280 --> 00:34:12.760
but you know, you go
to stack overflow and the

539
00:34:12.820 --> 00:34:15.400
I'm trying to do this
in JavaScript. And you know

540
00:34:15.400 --> 00:34:18.790
that the first 10 ounces
star with a dollar sign,

541
00:34:18.790 --> 00:34:21.210
you know, here's the jQuery,
you need to write this.

542
00:34:21.210 --> 00:34:23.350
Like, no, you can, you
can use the JavaScript for

543
00:34:23.350 --> 00:34:26.260
this. This is really simple.
Or, you know, you're doing

544
00:34:26.260 --> 00:34:29.470
an animation, you're doing like
a jQuery animation. And I

545
00:34:29.470 --> 00:34:31.930
said, well, you can do
that in CSS. And you

546
00:34:31.930 --> 00:34:34.480
know, it's hardware accelerated by
the browser. You don't need

547
00:34:34.480 --> 00:34:39.400
to be updating, you know,
moving top left of, you

548
00:34:39.400 --> 00:34:41.950
know, a text box, every
frame. It seems like the

549
00:34:41.950 --> 00:34:44.920
troubles of the last 10
years of browser compatibility perhaps

550
00:34:44.920 --> 00:34:47.980
have poisoned us. And we're
still doing stuff the way

551
00:34:47.980 --> 00:34:49.900
it was done years ago.
And it's just not necessary

552
00:34:49.900 --> 00:34:55.030
anymore. I completely, I mean,
what if we're using the

553
00:34:55.030 --> 00:34:58.420
patterns that we used to
use probably about 10, even

554
00:34:58.420 --> 00:35:03.010
five years ago, that that
will actually make your website

555
00:35:03.010 --> 00:35:06.550
performance worse? You know, the,
everything, everything has changed, the

556
00:35:06.550 --> 00:35:10.360
browsers have caught up. I
mean, you know, if you're,

557
00:35:10.420 --> 00:35:13.930
if you are, if you
need to support say, you

558
00:35:13.930 --> 00:35:17.740
know, ISX, which hopefully nobody
does now, but you know,

559
00:35:17.740 --> 00:35:22.900
there are, there are situations,
but you know, if you,

560
00:35:22.900 --> 00:35:26.530
if you also work with
the, the, the modern browsers,

561
00:35:26.920 --> 00:35:30.670
then if everybody does it,
then, you know, we can,

562
00:35:30.670 --> 00:35:33.340
we can release our grip
on the, the old browsers.

563
00:35:33.970 --> 00:35:37.860
And you know, a lot
of these compatibility go away.

564
00:35:37.920 --> 00:35:40.140
I know all the browser
vendors are working really hard

565
00:35:40.650 --> 00:35:43.850
to make sure there aren't
these issues. That's a good

566
00:35:43.850 --> 00:35:45.620
point. The fact that we
all want this to happen.

567
00:35:45.620 --> 00:35:48.080
I think we shouldn't underestimate
the power of the collective.

568
00:35:48.590 --> 00:35:52.340
So when can people play
age of ascent and where,

569
00:35:52.340 --> 00:35:57.020
and what platforms? Well, we,
we are currently available on

570
00:35:57.020 --> 00:36:00.920
the web and we have
a, a monthly playtest where

571
00:36:00.920 --> 00:36:04.520
we're gearing that up to
be more frequent and where

572
00:36:04.550 --> 00:36:10.160
we're hoping around March, April,
that we will move into

573
00:36:10.160 --> 00:36:13.130
a sort of 24 hour
continuous game. So that'll be

574
00:36:13.130 --> 00:36:17.540
a lack of first public
continuous alpha of the, of

575
00:36:17.540 --> 00:36:20.570
the massively multiplayer game. But
we're going to be on,

576
00:36:20.630 --> 00:36:29.090
on all platforms. You know,
the universal windows platform, Mac

577
00:36:29.660 --> 00:36:35.150
PC windows store will, will
be on your phone. I

578
00:36:35.150 --> 00:36:38.930
mean, one of the things
we have is we're also

579
00:36:38.930 --> 00:36:42.710
doing, sorry, I didn't mention
this, build your own cockpit

580
00:36:42.740 --> 00:36:46.250
where, you know, I want,
I have all these devices.

581
00:36:46.610 --> 00:36:48.980
I have a tablet, I
have a phone. I have,

582
00:36:50.630 --> 00:36:52.430
I want to bring them
in and build my own

583
00:36:52.430 --> 00:36:55.040
cockpit. I want my radar
on my surface. I want

584
00:36:55.040 --> 00:36:58.820
my target list on my
phone. You know, bring up,

585
00:36:58.850 --> 00:37:01.940
you've got all these devices,
they've all got browsers. We're

586
00:37:01.940 --> 00:37:03.170
going to, we're going to
bring them in and you

587
00:37:03.170 --> 00:37:06.050
can create your own little
bridge as it were if

588
00:37:06.050 --> 00:37:08.690
you want to. Cool. It
seems like the, the massively

589
00:37:08.690 --> 00:37:11.600
multiplayer space game, this is
the year for that, for

590
00:37:11.600 --> 00:37:14.540
that experience, it does seem
to be, and suddenly the

591
00:37:14.540 --> 00:37:16.970
pressure is on you now
to have VR enabled age

592
00:37:16.970 --> 00:37:18.770
of ascent. So we're going
to want that as well.

593
00:37:18.770 --> 00:37:25.070
When we start playing your
game, There are the movements

594
00:37:25.070 --> 00:37:27.410
for VR in the browser,
but it might be early

595
00:37:27.410 --> 00:37:30.710
days for us. Very cool.
Thanks, Ben, Adam so much

596
00:37:30.710 --> 00:37:32.900
for chatting with me today.
Thank you very much for

597
00:37:32.900 --> 00:37:36.200
having me. This has been
another episode of Hansel minutes,

598
00:37:36.260 --> 00:37:37.880
and we'll see you again
next week.

