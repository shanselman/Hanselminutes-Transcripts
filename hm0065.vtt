WEBVTT FILE

1
00:00:17.130 --> 00:00:22.710
From Hansel minutes.com it's Hansel
minutes or weekly discussion with

2
00:00:22.710 --> 00:00:27.480
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:27.480 --> 00:00:31.980
is Lawrence Ryan announcing show number
65 recorded Saturday may 19

4
00:00:32.250 --> 00:00:38.010
2007. Support for Hanselman is
provided by Tellerik rad controls,

5
00:00:38.280 --> 00:00:41.580
the most comprehensive suite of
components for windows forms and

6
00:00:41.580 --> 00:00:52.470
asp.net web applications. online@wwwdottelerik.com. Support
is also provided by dotnet

7
00:00:52.470 --> 00:00:58.080
developers journal. The world's leading.net
developer magazine online at www

8
00:00:58.080 --> 00:01:02.670
dot <inaudible> dot com. In
this episode, Scott talks with

9
00:01:02.670 --> 00:01:06.600
Martin Fowler, David Heinemeier Hansson
at the rails conference in

10
00:01:06.600 --> 00:01:11.720
Portland. Hi, this is Scott
Hanselman and this is another

11
00:01:11.720 --> 00:01:14.240
episode of Hansel minutes. We're
here in Portland, Oregon, my

12
00:01:14.240 --> 00:01:17.630
hometown at the rails conference
at the Oregon convention center.

13
00:01:18.170 --> 00:01:20.900
And I am sitting in
a little area here off

14
00:01:20.900 --> 00:01:22.670
the side of the exhibit
hall. If you hear some

15
00:01:22.670 --> 00:01:25.490
background noise that's because the
exhibit is bouncing here at

16
00:01:25.490 --> 00:01:29.120
rails conference, and I am
sitting with David Heinemeier Hansson

17
00:01:29.120 --> 00:01:31.850
and Martin Fowler. How are
you guys doing? Doing great.

18
00:01:33.080 --> 00:01:35.480
Yeah, just cool. All right.
That is the extent of

19
00:01:35.480 --> 00:01:38.720
the wasting of time. We
shall commence, you know, yesterday

20
00:01:38.720 --> 00:01:41.750
at the booth here at
the ThoughtWorks booth, we had

21
00:01:41.750 --> 00:01:44.030
kind of an interesting conversation
and to turn into a

22
00:01:44.030 --> 00:01:46.820
bit of a, of a,
of a mud wrestling match.

23
00:01:46.820 --> 00:01:48.020
And I thought we had
a pretty good time. It's

24
00:01:48.020 --> 00:01:51.680
too bad. We didn't tape
that. But yeah, David, I

25
00:01:51.680 --> 00:01:54.200
had, I had brought up
the issue that I thought

26
00:01:54.200 --> 00:01:57.470
maybe HTML has seen its
day. Like I'm tired of

27
00:01:57.470 --> 00:02:01.070
pushing angle brackets around that
are really using ineffective small

28
00:02:01.070 --> 00:02:04.010
constructs and you didn't agree.
No, I know. And I

29
00:02:04.130 --> 00:02:07.730
very much enjoy the current
standards we have for creating

30
00:02:07.730 --> 00:02:12.740
applications. I think the low
level of expressiveness that we

31
00:02:12.740 --> 00:02:15.800
have in HTML and CSS
and JavaScript is actually a

32
00:02:15.800 --> 00:02:19.640
huge bone to most applications.
That constraints are a good

33
00:02:19.640 --> 00:02:22.670
thing. That constraints leads to
better applications when we don't

34
00:02:22.670 --> 00:02:25.640
need to reinvent everything. When
you just have a blank

35
00:02:25.670 --> 00:02:28.100
canvas where you can paint
whatever you want on it,

36
00:02:28.310 --> 00:02:32.480
you pretty much end up
with, with something quote unquote

37
00:02:32.510 --> 00:02:36.530
original every time. And I
don't think originality in UI

38
00:02:36.530 --> 00:02:39.200
design is necessarily a good
thing. I just think actually

39
00:02:39.380 --> 00:02:41.360
most of the time it's
a bad thing. And more

40
00:02:41.360 --> 00:02:44.990
importantly, in terms of HTML
and CSS for the developer,

41
00:02:45.200 --> 00:02:47.360
I think those are great
tools. I do not want

42
00:02:47.360 --> 00:02:49.640
to go back to the
desktop world. And I actually

43
00:02:49.640 --> 00:02:52.940
kind of resend that notion
that HTML and CSS and

44
00:02:52.940 --> 00:02:58.520
JavaScript are dirty technologies from
the perspective of desktop developers,

45
00:02:58.520 --> 00:03:04.060
who've been used to a
more cleaner development experience somehow,

46
00:03:04.090 --> 00:03:08.830
but I don't think clean
translates to pleasant in that

47
00:03:08.830 --> 00:03:13.110
sense, Clean and dirty within
are using that to describe

48
00:03:13.140 --> 00:03:16.470
the developer experience or the
under the underlying stuff that

49
00:03:16.470 --> 00:03:18.750
is being abstracted away. Cause
the desktops just as messy

50
00:03:18.750 --> 00:03:22.140
as the You're seeing it
is that people conflate those

51
00:03:22.140 --> 00:03:26.910
two issues. They see HTML
and CSS is dirty languages

52
00:03:26.910 --> 00:03:29.910
or implementations because there are
bugs in different browsers and

53
00:03:29.910 --> 00:03:32.040
so on. And then they
kind of bleed that into

54
00:03:32.040 --> 00:03:36.810
development experience because HTML or
JavaScript has issues in various

55
00:03:36.810 --> 00:03:41.790
browsers. That should also mean
that the development process itself

56
00:03:41.790 --> 00:03:44.400
has started. I think that
that's not really true. I

57
00:03:44.400 --> 00:03:50.280
think the HTML and CSS
style development is actually incredibly

58
00:03:50.280 --> 00:03:53.970
friendly and clean to developer.
It's a really easy way

59
00:03:54.120 --> 00:03:57.090
to get applications going because
you don't have all the

60
00:03:57.090 --> 00:03:59.430
options of the world. You
don't have a blank canvas

61
00:03:59.430 --> 00:04:01.440
that you can paint anything
on. So you have to

62
00:04:01.440 --> 00:04:05.220
use the pure, simple building
blocks that are available. And

63
00:04:05.640 --> 00:04:09.630
once you take that creativity
out of it, things just

64
00:04:09.630 --> 00:04:12.330
become a lot simpler. They
become, there's not so much

65
00:04:12.360 --> 00:04:15.660
confusion about what to do.
There's a lot of conventions

66
00:04:15.690 --> 00:04:20.190
in HTML on how to
build information applications, which means

67
00:04:20.190 --> 00:04:21.990
that you don't have to
think about all that stuff

68
00:04:22.020 --> 00:04:24.960
over and over and over
again, which is in essence,

69
00:04:24.960 --> 00:04:27.510
the same argument we have
for rails. Why are conventions

70
00:04:27.510 --> 00:04:29.460
a good thing because you
don't have to make that

71
00:04:29.460 --> 00:04:32.520
sin decisions again and again.
Well, you're, you're saying that

72
00:04:32.520 --> 00:04:36.570
the universal building blocks too,
to draw a weak analogy

73
00:04:36.570 --> 00:04:39.540
that the corks that we
have discovered so far are

74
00:04:39.540 --> 00:04:41.940
adequate, but there's always the
talk that there might be

75
00:04:41.940 --> 00:04:44.880
something else out there. Is
there life beyond checkboxes and

76
00:04:44.880 --> 00:04:47.850
radio buttons? Is there an
input type equals that we

77
00:04:47.850 --> 00:04:51.090
haven't discovered yet that is
going to make the molecules

78
00:04:51.090 --> 00:04:53.730
that we build from all
of this fundamentally more compelling?

79
00:04:53.880 --> 00:04:56.730
And I think that's great
and it's called research. And

80
00:04:56.790 --> 00:04:59.070
I don't think we should
conflate research with day to

81
00:04:59.070 --> 00:05:02.460
day development. And I think
first of all, like we've

82
00:05:02.460 --> 00:05:05.520
already had that blank canvas
for 10 years on the

83
00:05:05.520 --> 00:05:08.370
web with applets with flash,
with a bunch of other

84
00:05:08.370 --> 00:05:10.650
technologies that gave us a
blank can, which we could

85
00:05:10.650 --> 00:05:13.830
dream up anything we wanted.
Did we get better input

86
00:05:13.830 --> 00:05:17.280
models? No, I like we
just have 10 years of

87
00:05:17.280 --> 00:05:21.300
history showing us that someday
we might end up on

88
00:05:21.300 --> 00:05:24.090
that great breakthrough, but it
hasn't happened yet. So I'm

89
00:05:24.090 --> 00:05:26.940
not going to hold my
breath, waiting for silver light

90
00:05:26.960 --> 00:05:29.790
or Apollo to deliver that
if it happens and if

91
00:05:29.790 --> 00:05:33.780
this break great breakthrough does
happen, it's wonderful. I'm not

92
00:05:33.780 --> 00:05:36.750
going to reject that. I'm
going to stick with HTML

93
00:05:36.750 --> 00:05:39.180
for all eternity. I'm just
saying we have history of

94
00:05:39.180 --> 00:05:44.100
10 years showing that kind
of unsettling innovation has not

95
00:05:44.100 --> 00:05:45.810
come out of the blank
canvas. I'm not going to

96
00:05:45.810 --> 00:05:48.300
hold my breath. And I'm
happy with the tools I

97
00:05:48.300 --> 00:05:52.440
use Martin you're nodding your
head. You agree? Yeah. I

98
00:05:52.440 --> 00:05:56.850
mean, from the early days
of Web interfaces and the

99
00:05:57.470 --> 00:06:00.020
people have always Said, well,
this is so inferior to

100
00:06:00.020 --> 00:06:03.080
what we can do with
a rich client kind of

101
00:06:03.080 --> 00:06:09.680
application. And what we've seen
is certainly my sense is

102
00:06:09.680 --> 00:06:13.220
from the user side, people
being actually quite comfortable getting

103
00:06:13.220 --> 00:06:15.950
used to the, the HTML,
Oh, this application works like

104
00:06:16.220 --> 00:06:18.320
a web thing that therefore
I know already kind of

105
00:06:18.320 --> 00:06:20.930
how to work with it.
And also developers finding the

106
00:06:20.930 --> 00:06:25.370
whole web model, actually working
quite well for them. And

107
00:06:25.610 --> 00:06:28.370
I'm not in, in, in
that sense, what my sense

108
00:06:28.370 --> 00:06:30.770
has been of it is
the people have not been

109
00:06:30.770 --> 00:06:34.640
super keen to join, move
towards the full desktop experience.

110
00:06:35.240 --> 00:06:37.550
There's been occasional flourishes of
it, but they haven't really

111
00:06:37.550 --> 00:06:42.800
followed through. And so again,
if you just kind of

112
00:06:42.800 --> 00:06:46.340
drawing from where we are
so far, well maybe yeah,

113
00:06:46.340 --> 00:06:49.310
there could be some really
compelling advantage with some of

114
00:06:49.310 --> 00:06:52.910
these technologies, but you know,
I'm inclined to bet the

115
00:06:52.910 --> 00:06:55.520
way things have gone before
until, and be wrong one

116
00:06:55.520 --> 00:06:57.940
time out of 10, But
doesn't, it seem like kind

117
00:06:57.940 --> 00:07:02.020
of a schizophrenia thing that
we've got barrel and the

118
00:07:02.020 --> 00:07:05.020
Linux world doing amazing things
with 3d. We've got the

119
00:07:05.260 --> 00:07:08.890
<inaudible>, which has been gorgeous
for years. And just yesterday

120
00:07:08.890 --> 00:07:11.170
I dropped a dashboard widget
onto the background and this

121
00:07:11.170 --> 00:07:14.560
wonderful kind of drop of
water affect appeared. We've got

122
00:07:14.560 --> 00:07:18.520
Vista doing similar 3d things.
Here are three operating systems

123
00:07:18.520 --> 00:07:21.040
on the desktop. That really
feels strongly that there's some

124
00:07:21.040 --> 00:07:24.790
new way of visualization that
could provide not just comfort

125
00:07:24.790 --> 00:07:29.620
for the user, but presumably
some additional functionality, But still

126
00:07:30.310 --> 00:07:33.220
Applications like, like, like David,
like here's a 37 signals,

127
00:07:33.940 --> 00:07:39.460
very clean, crisp, simple, they
flourish is that kind of

128
00:07:39.460 --> 00:07:42.280
split brain that you're saying
that that's okay. People have

129
00:07:42.280 --> 00:07:43.540
a mental model for the
web and they have a

130
00:07:43.540 --> 00:07:46.380
mental model for the desktop.
I think they're doing it.

131
00:07:46.390 --> 00:07:48.280
I think it's interesting in
all the examples that you

132
00:07:48.280 --> 00:07:52.570
mentioned of interesting effects going
on on the desktop, I

133
00:07:52.570 --> 00:07:55.150
think most of them are
just because we can, they're

134
00:07:55.150 --> 00:07:59.830
not about adding functionality just
because you can drop something

135
00:07:59.830 --> 00:08:01.930
on the dashboard. It makes
an idea cause ripple effect.

136
00:08:02.410 --> 00:08:05.050
I don't think any real
users really care. I think

137
00:08:05.050 --> 00:08:08.320
geeks go Gaga over that
because we have this super

138
00:08:08.320 --> 00:08:12.370
powerful graphics processor and it's
being used greatly in games

139
00:08:12.370 --> 00:08:15.730
or simulations or any of
these other visualizations, a media

140
00:08:15.940 --> 00:08:18.460
and people feel like shouldn't,
we also be using it

141
00:08:18.460 --> 00:08:21.070
for applications and they can't
come up with anything better

142
00:08:21.070 --> 00:08:24.580
than ripples when you drop
something on the dashboard. And

143
00:08:24.580 --> 00:08:27.880
I don't think that's a
representation of good UI design.

144
00:08:28.060 --> 00:08:31.180
And I think that's why
a lot of the stuff

145
00:08:31.180 --> 00:08:34.090
currently going on with, with
Ajax is that people kind

146
00:08:34.090 --> 00:08:37.360
of discovered it, Whoa or
JavaScript can now actually give

147
00:08:37.360 --> 00:08:39.940
us kind of the same
things. And they went overboard

148
00:08:39.940 --> 00:08:42.370
and a lot of cases.
So even just with the

149
00:08:42.370 --> 00:08:46.030
limited possibilities we have in
something like JavaScript, people already

150
00:08:46.030 --> 00:08:48.280
went too far. So I
don't think we need even

151
00:08:48.280 --> 00:08:52.690
more blank canvas, even more
water effects on droplets. I

152
00:08:52.690 --> 00:08:54.850
think we need to focus
on less things. And I

153
00:08:54.850 --> 00:08:57.540
think the great thing about
HTML And CSS and the

154
00:08:57.540 --> 00:09:03.090
ease of use of just
creating basic applications, encourages people

155
00:09:03.090 --> 00:09:05.520
to just stick with the
basics. And I think most

156
00:09:05.520 --> 00:09:08.550
people can't handle blank canvases.
This is one of the

157
00:09:08.550 --> 00:09:11.490
reasons I traditionally in web
applications have not been a

158
00:09:11.490 --> 00:09:15.870
big fan of rich text
interfaces. When you give people

159
00:09:15.870 --> 00:09:19.080
the tool to make something
purple and in comic sense,

160
00:09:19.290 --> 00:09:21.540
they will put it in
purple in comic sense. I

161
00:09:21.540 --> 00:09:25.830
think MySpace is the perfect
example of what happens when

162
00:09:25.830 --> 00:09:29.370
you give people all the
<inaudible>. Yeah, exactly. And I

163
00:09:29.370 --> 00:09:31.440
think we don't even need
to look to my space.

164
00:09:31.470 --> 00:09:35.040
Look at the world of
flash applications. Flash is wonderful

165
00:09:35.040 --> 00:09:37.530
for media and enables a
bunch of things, but when

166
00:09:37.530 --> 00:09:42.110
you actually get down to
application design, it's usually, So

167
00:09:42.110 --> 00:09:44.060
what do you think about
people that are, I guess

168
00:09:44.060 --> 00:09:46.340
you would call them researchers
then that are pushing the

169
00:09:46.340 --> 00:09:50.930
limits on, on how user
experience should be. It should

170
00:09:50.930 --> 00:09:53.600
be expressed. Like we talked
about that worry dream.com the

171
00:09:53.600 --> 00:09:56.300
magic ink manifesto, where they
gave an example of a

172
00:09:56.540 --> 00:10:00.200
train scheduling application that used
the basic pieces available to

173
00:10:00.200 --> 00:10:02.780
us in HTML. It's basically
a screen full of check

174
00:10:02.780 --> 00:10:06.290
boxes and combo boxes, and
then a, a more designer

175
00:10:06.290 --> 00:10:10.370
focused user experience focused ex
experience that this particular individual

176
00:10:10.370 --> 00:10:12.650
said that it's flash it's
something like that, that you're

177
00:10:12.650 --> 00:10:15.800
going to need to make
that experience reality. You think

178
00:10:15.800 --> 00:10:18.890
that's, I think that's very
much an education. That's the

179
00:10:18.920 --> 00:10:22.130
biggest problem I have with
the whole re blank slit

180
00:10:22.310 --> 00:10:25.580
movement is that it's being
billed as though we're rebooting

181
00:10:25.580 --> 00:10:29.000
the web as though this
is the full new paradigm

182
00:10:29.000 --> 00:10:31.610
for application design. And I
don't see it as such.

183
00:10:31.640 --> 00:10:33.650
I see it as, this
is the two to 5%

184
00:10:33.650 --> 00:10:39.200
case for widgets, not application
widgets. There are some widgets,

185
00:10:39.320 --> 00:10:42.050
a plane where you want
to pick your seat, something

186
00:10:42.050 --> 00:10:46.040
where you want to remodel
a virtual room in Ikea

187
00:10:46.040 --> 00:10:49.670
to see how your furniture
aligns. Great, which is awesome

188
00:10:49.670 --> 00:10:53.450
for that. And it's also
worth remembering. A lot of

189
00:10:53.450 --> 00:10:55.430
what we really need to
do is we need to

190
00:10:55.430 --> 00:10:59.450
improve the overall interaction experience
and talking about the eye

191
00:10:59.450 --> 00:11:03.350
candy and the colors and
the icon design is only

192
00:11:03.350 --> 00:11:05.540
a part of that picture.
I mean, you've got to

193
00:11:05.540 --> 00:11:07.820
look much more at the
entire interaction that you have

194
00:11:07.820 --> 00:11:10.430
with the application. And the
idea is that people who

195
00:11:10.430 --> 00:11:14.210
are focusing on that level
of interaction design, thinking about

196
00:11:14.210 --> 00:11:17.510
the entire picture, I think
here with people like Jesse,

197
00:11:17.510 --> 00:11:21.230
James Garrett and his stuff on
information architecture, my colleague Jeff

198
00:11:21.230 --> 00:11:23.390
pattern has been writing a
lot about how to bring

199
00:11:23.540 --> 00:11:27.320
user centered design in an
agile context. These, I think

200
00:11:27.320 --> 00:11:29.030
are going to make a
much bigger difference because it's

201
00:11:29.030 --> 00:11:31.880
going much, much deeper than
just the, the, just the

202
00:11:31.880 --> 00:11:34.790
pictures and the, the eye
candy. And, and you're saying

203
00:11:34.790 --> 00:11:37.370
that the kinds of thought
being put around those kinds

204
00:11:37.370 --> 00:11:39.200
of experiences are going to
be able to use the

205
00:11:39.200 --> 00:11:42.290
existing tools we have available
in HTML CSS. And there'll

206
00:11:42.290 --> 00:11:46.310
be just as compelling. I
think we can get more

207
00:11:46.310 --> 00:11:50.510
improvement by focusing on the
full picture kind of stuff

208
00:11:50.510 --> 00:11:54.100
that they're doing than just
splashing a lot more. I

209
00:11:54.100 --> 00:11:55.960
Can do it. I have
no doubt, but somebody will,

210
00:11:55.960 --> 00:11:58.510
at some point come up
with an incredibly new visual

211
00:11:58.510 --> 00:12:01.180
Watts it, and there'll be
one of these researchers shooting

212
00:12:01.180 --> 00:12:04.210
off and doing this stuff.
I mean, 95% of that

213
00:12:04.210 --> 00:12:06.610
research is complete waste of
time. But of course we

214
00:12:06.610 --> 00:12:08.380
don't know which 5% is
the good bit. So we

215
00:12:08.380 --> 00:12:11.830
have to engage the whole
a hundred percent. But I

216
00:12:11.830 --> 00:12:14.050
think when we're looking at
sort of bang for buck,

217
00:12:14.260 --> 00:12:16.750
I would rather be focusing
on the people who are

218
00:12:16.750 --> 00:12:19.750
looking at a deeper interaction
design stuff. I would want

219
00:12:19.750 --> 00:12:23.050
to be listening to folks
like Jeff Patton or Jesse James Garrett, rather

220
00:12:23.050 --> 00:12:26.730
than getting familiar with more
and more widget toolkits. So

221
00:12:26.760 --> 00:12:29.310
looking at this kind of
a triangle of individuals here

222
00:12:29.310 --> 00:12:31.980
myself as interviewer I'm I'm
hearing and tell me if

223
00:12:31.980 --> 00:12:34.980
you think this is an
incorrect, I'm paraphrasing here, but

224
00:12:34.980 --> 00:12:38.940
that, that David you're concerned
about making the developer experience

225
00:12:39.030 --> 00:12:43.110
as pleasant and wonderful as
possible. Given the existing interaction

226
00:12:43.140 --> 00:12:45.990
elements we have available to
us and, and user Martin

227
00:12:45.990 --> 00:12:50.280
are focused on making the
process as pleasant as possible,

228
00:12:50.280 --> 00:12:53.580
enabling the people doing the
right kind of research around

229
00:12:53.670 --> 00:12:55.590
that kind of stuff while
I'm over here, kind of

230
00:12:55.620 --> 00:12:59.490
blustering about, you know, but
can't there be more, I

231
00:12:59.490 --> 00:13:01.680
wish there was more star
Trek. Where's that interface? Why

232
00:13:01.680 --> 00:13:04.890
don't I have a touchscreen?
I think they kind of

233
00:13:04.890 --> 00:13:07.440
go hand in hand. I
think when developers get tools

234
00:13:07.440 --> 00:13:10.650
that are blank slates, they
get obsessed about them. Like

235
00:13:10.740 --> 00:13:14.490
they direct all their attention
on all their focus on

236
00:13:14.790 --> 00:13:18.720
making new water ripple effects
and that's time taking away

237
00:13:18.900 --> 00:13:23.070
from just core interaction design.
When you're restricted in your

238
00:13:23.070 --> 00:13:27.180
visual or visual expression tools,
you tend to focus on

239
00:13:27.180 --> 00:13:29.700
something else you tend to
focus on just is this

240
00:13:29.700 --> 00:13:33.900
something users can use in
a more direct fashion. And

241
00:13:33.900 --> 00:13:36.240
I think that that's really,
we haven't even optimized the

242
00:13:36.240 --> 00:13:40.380
HTML application yet. So before
you made that as good

243
00:13:40.380 --> 00:13:42.630
as it can be, I
don't think we need all

244
00:13:42.630 --> 00:13:45.240
these other tools. I think
that like, we've got to

245
00:13:45.270 --> 00:13:47.490
learn how to do a
walk before we can run.

246
00:13:47.490 --> 00:13:50.190
And we are still crawling
when it comes to HTML

247
00:13:50.190 --> 00:13:52.860
application, are we even running
in the right direction, right?

248
00:13:53.070 --> 00:13:56.700
That too, To, to, to
what you thought works does,

249
00:13:56.700 --> 00:14:00.570
and you guys provide a
complete, if I understand correctly,

250
00:14:00.570 --> 00:14:03.030
you can provide the complete
development experience. You can provide

251
00:14:03.030 --> 00:14:07.110
architectural consulting in that in
you're largely thought of as

252
00:14:07.110 --> 00:14:09.660
a, as a thought leader
in the, in the process

253
00:14:09.660 --> 00:14:13.800
space is the development process
broken with respect to the

254
00:14:13.800 --> 00:14:16.770
user experience like user experience
is not built into the

255
00:14:16.770 --> 00:14:20.130
process. And in general, in
the world of it, the

256
00:14:20.130 --> 00:14:23.430
development process is broken just
about every access you might

257
00:14:23.430 --> 00:14:26.640
want to look at. That's
why I asked certainly one

258
00:14:26.640 --> 00:14:30.510
of those breakages is in
the whole user experience side

259
00:14:30.510 --> 00:14:33.390
of it. And thinking about
how to, to work with

260
00:14:33.420 --> 00:14:35.580
the, the, the way in
which people are using an

261
00:14:35.580 --> 00:14:39.270
application. I think, I mean,
there is a community of

262
00:14:39.270 --> 00:14:42.630
people that, that really try
to focus on that, but

263
00:14:43.200 --> 00:14:45.630
trying, trying to let that
fit with the rest of

264
00:14:45.630 --> 00:14:48.300
the development process, particularly the
way we like to work

265
00:14:49.290 --> 00:14:52.850
with a very incremental and
agile style approach. That is

266
00:14:52.850 --> 00:14:54.950
an area that, that needs
a good bit of work

267
00:14:54.950 --> 00:14:58.640
at the moment. And it's
an area we've been pushing

268
00:14:58.640 --> 00:15:01.010
hard. I mean, we've got
a number of people who

269
00:15:01.010 --> 00:15:04.400
are in very, very interested
in interaction design, a one

270
00:15:04.400 --> 00:15:06.440
blogger. For instance, what I
would recommend taking a look

271
00:15:06.440 --> 00:15:09.680
at is Mark McNeil, who has
written some really good stuff

272
00:15:09.710 --> 00:15:12.500
about focusing on what exactly
it is people need to

273
00:15:12.500 --> 00:15:16.280
do. And again, it's concentrating
on this entire interaction. What

274
00:15:16.280 --> 00:15:18.680
is somebody trying to do?
How do we make that

275
00:15:18.680 --> 00:15:21.560
simpler for them and the
special effects and the eye

276
00:15:21.560 --> 00:15:26.000
candy are, they're kind of
cool, but they're less important.

277
00:15:26.590 --> 00:15:29.320
So yesterday we saw at
the ThoughtWorks booth kind of

278
00:15:29.320 --> 00:15:34.570
a spontaneous demonstration by ward
Cunningham of some interesting visualizations

279
00:15:34.570 --> 00:15:37.120
about the user experience. And
I thought that we were

280
00:15:37.120 --> 00:15:39.160
all kind of impressed by
that. And there's some spontaneous

281
00:15:39.160 --> 00:15:41.830
applause that kind of happened
at the, at the end

282
00:15:41.830 --> 00:15:45.130
there. Do you think that
this was a visual tool

283
00:15:45.130 --> 00:15:49.300
that showed swim lanes, all
a UML sequence diagram, except

284
00:15:49.300 --> 00:15:52.540
as you hovered over each
of the actors, you saw

285
00:15:52.540 --> 00:15:55.480
what that individual and what
a user would see at

286
00:15:55.480 --> 00:15:58.660
that point in the interaction.
And I, when I saw

287
00:15:58.690 --> 00:16:01.120
that, I said, that's a
tool that I don't have.

288
00:16:01.480 --> 00:16:04.510
I have nothing like that
in my process at all.

289
00:16:04.510 --> 00:16:06.910
And Martin is nodding his
head furiously here. Do you

290
00:16:06.910 --> 00:16:10.570
have something you want to
add? Well, no. Other than

291
00:16:10.600 --> 00:16:12.640
I was, I mean, this
is a typical piece of

292
00:16:12.640 --> 00:16:16.390
wood Cunningham brilliance. I mean,
how many times has word

293
00:16:16.390 --> 00:16:19.390
Cunningham, just come up with
something that, you know, you

294
00:16:19.390 --> 00:16:21.460
look at it and you
think, wow, that's way too

295
00:16:21.460 --> 00:16:24.100
simple and obvious. And why
is it? We haven't thought

296
00:16:24.100 --> 00:16:26.560
of that for the last
10 years. And that's yet

297
00:16:26.590 --> 00:16:29.500
another moment of just knocking
my, I mean, I'm used

298
00:16:29.500 --> 00:16:31.840
to having my, I mean,
knock back by ward. I

299
00:16:31.840 --> 00:16:34.360
mean, if I'm not clobbered
by award idea every couple

300
00:16:34.360 --> 00:16:37.150
of years now, I'm surprised
When I saw that it

301
00:16:37.150 --> 00:16:40.840
really made me it seeing
it, that that visceral act

302
00:16:40.840 --> 00:16:43.960
of, of actually witnessing like,
wow, I see where this

303
00:16:43.960 --> 00:16:46.660
kind of a tool and
this kind of expression of

304
00:16:46.660 --> 00:16:48.400
what that tool is trying
to get across could really

305
00:16:48.400 --> 00:16:51.490
fit into my development process
right now, because I think

306
00:16:51.490 --> 00:16:53.830
that people focus so much
on user stories and use

307
00:16:53.830 --> 00:16:57.310
cases. And then sometimes the
experience, whether it be the

308
00:16:57.310 --> 00:17:00.070
experience of a screen or
as word was trying to

309
00:17:00.250 --> 00:17:04.450
tell us about the entire
interaction, the entire workflow really

310
00:17:04.450 --> 00:17:07.030
gets scribbled on a, on
a napkin and then sent

311
00:17:07.030 --> 00:17:10.600
off to a designer to
make rounded corners. I think

312
00:17:10.600 --> 00:17:12.250
that's a huge part. And
I think that's one of

313
00:17:12.250 --> 00:17:16.180
the most flawed aspects of
modern web application development is

314
00:17:16.180 --> 00:17:20.260
the fact that designers are
thought of as painters. And

315
00:17:20.410 --> 00:17:24.700
there's just people who have
to layer something on top

316
00:17:24.700 --> 00:17:27.940
of what we already have.
That's completely reversed of how

317
00:17:27.940 --> 00:17:29.860
it should be. So the
way we develop the staff

318
00:17:29.860 --> 00:17:33.490
at 37 sequels is interface
first development. We do not

319
00:17:33.490 --> 00:17:38.530
start on any programming before
we have final HTML screens

320
00:17:38.530 --> 00:17:41.830
that are ready to be
hooked up. And I really

321
00:17:41.830 --> 00:17:43.900
think that that's the way
it has to be. Because

322
00:17:43.990 --> 00:17:48.010
even at the level of
constraint that HTML gives us,

323
00:17:48.190 --> 00:17:51.630
it still matters greatly how
The elements are put together.

324
00:17:51.720 --> 00:17:53.970
Is this a radio button?
Is this a dropdown field?

325
00:17:53.970 --> 00:17:55.620
Do you split it into
one screen? Do you split

326
00:17:55.620 --> 00:17:58.620
it into two screens? How
does validations work? All of

327
00:17:58.620 --> 00:18:02.970
these decisions happen often off
the cuff by programmers, because

328
00:18:02.970 --> 00:18:06.060
they're just putting the programming
together thinking, well, the designer

329
00:18:06.060 --> 00:18:08.190
will make it pretty. And
if you think of the

330
00:18:08.190 --> 00:18:11.730
signers, as people who make
stuff pretty, that's exactly the

331
00:18:11.730 --> 00:18:13.560
path that you're going to
be let down. And you

332
00:18:13.560 --> 00:18:15.990
still wonder why can't people
figure out how to use

333
00:18:15.990 --> 00:18:19.050
my application. He made it
pretty it's pink and it

334
00:18:19.050 --> 00:18:21.840
has round corners. And that's
just not what the sign

335
00:18:21.840 --> 00:18:25.610
is supposed to be. Yeah.
I've always used the comic

336
00:18:25.610 --> 00:18:28.220
book metaphor where the developer
thinks that they're the penciler

337
00:18:28.670 --> 00:18:30.620
and then someone else is
going to lay down the

338
00:18:30.620 --> 00:18:32.930
ink and the color. But
of course, what they've penciled

339
00:18:32.930 --> 00:18:36.230
out is a bunch of
crap. Exactly. And I think

340
00:18:36.230 --> 00:18:38.990
that that's just, we need
to change that first. So

341
00:18:39.680 --> 00:18:42.710
that's why I actually think
in parts to why HTML

342
00:18:42.710 --> 00:18:45.530
and CSS is so wonderful
because it puts the tool

343
00:18:45.620 --> 00:18:49.420
of the design of real
screens into the hands of

344
00:18:49.490 --> 00:18:54.140
designers. It's not a programming
exercise. And even more importantly,

345
00:18:54.320 --> 00:18:56.630
if you split those two
things up, if you make

346
00:18:56.630 --> 00:18:59.720
the construction of the UI
so hard that you need

347
00:18:59.720 --> 00:19:02.660
programmers to do it, what
you'll end up with is

348
00:19:02.660 --> 00:19:06.770
the sinus drawing on cardboards.
You'll end up with people

349
00:19:06.770 --> 00:19:09.920
working in Photoshop and we've
been there. That was how

350
00:19:09.950 --> 00:19:13.530
web design looked from 95
to 99, Sit up and

351
00:19:13.540 --> 00:19:16.970
in Dreamweaver. And everything's okay.
Exactly. And that's just exactly

352
00:19:16.970 --> 00:19:18.950
the wrong way to go
about it. Because a designer

353
00:19:18.950 --> 00:19:22.310
who works in Photoshop works
in a different medium than

354
00:19:22.310 --> 00:19:27.020
the web. When you can
make rounded corners easily in

355
00:19:27.020 --> 00:19:30.980
Photoshop, when that's just a
function of Photoshop, you will

356
00:19:30.980 --> 00:19:34.130
do it when you're the
designer is forced to work

357
00:19:34.130 --> 00:19:37.070
in the natural construct of
the web with HTML and

358
00:19:37.070 --> 00:19:40.970
CSS, they won't do things
that are pushing against a

359
00:19:40.970 --> 00:19:44.060
grain of those materials. So
it's kind of asking people

360
00:19:44.060 --> 00:19:47.480
to make sculptures in clay
and they have to work

361
00:19:47.480 --> 00:19:50.420
with steel afterwards. They have
to be implemented in steel.

362
00:19:50.570 --> 00:19:53.990
That's just not how you
get good construction, good art,

363
00:19:53.990 --> 00:19:56.540
good. Anything you need the
people who are making the

364
00:19:56.540 --> 00:19:59.450
decisions of how it should
work to work as closely

365
00:19:59.450 --> 00:20:03.020
as humanly possible with the
real materials. It's the final

366
00:20:03.020 --> 00:20:07.760
product. Now, some people might
say that too often prototypes

367
00:20:07.760 --> 00:20:09.950
have become actual code, but
I'm hearing you say that

368
00:20:09.950 --> 00:20:13.490
they're probably writing the S
the HTML that becomes the,

369
00:20:13.490 --> 00:20:16.010
our HTML. They're right. They're
writing this in static. HTML,

370
00:20:16.010 --> 00:20:18.890
are they writing this in
rails? They're designers? Yeah, The

371
00:20:18.890 --> 00:20:21.530
designers and the style we
follow is usually there goes

372
00:20:21.540 --> 00:20:24.380
one screen. The first screen,
or the first few screens

373
00:20:24.410 --> 00:20:28.610
are done in completely a
static HTML, but very, very

374
00:20:28.610 --> 00:20:32.330
quickly thereafter, we wrap it
up, make it dynamic, replace

375
00:20:32.330 --> 00:20:34.820
a few things, inject the
loop, and then design it

376
00:20:34.820 --> 00:20:38.060
from that point on, make
all their evolution into real

377
00:20:38.060 --> 00:20:42.200
product. They'll make it inside
of the HTML to has

378
00:20:42.200 --> 00:20:45.260
sprinkled Ruby across it. And
they'll deal with that. And

379
00:20:45.260 --> 00:20:48.820
what I'm actually finding is
that we have this misconceptions

380
00:20:48.820 --> 00:20:51.880
Of designers who will scream
and runaway the first moment

381
00:20:51.880 --> 00:20:54.610
they see code. And it's
just not true in a

382
00:20:54.610 --> 00:20:57.790
lot of ways, code help
stir them, do their job.

383
00:20:57.940 --> 00:21:00.790
Like now there's dynamic real
pieces of data. They don't

384
00:21:00.790 --> 00:21:03.400
have to use Laura Ipsen
to fill it up with

385
00:21:03.400 --> 00:21:06.160
crap. And I think that
that's another issue. We haven't

386
00:21:06.160 --> 00:21:08.710
even talked about the notion
of using real data, using

387
00:21:08.710 --> 00:21:12.970
a real running application as
guiding your development and design

388
00:21:12.970 --> 00:21:16.500
process. And that that's a
very good segue into thinking

389
00:21:16.500 --> 00:21:19.920
about how a design first
and a user interface. First

390
00:21:21.330 --> 00:21:26.370
philosophy fits into a continuous
integration process. You know, are

391
00:21:26.370 --> 00:21:29.010
the designers, the designers are
part of the process. They're

392
00:21:29.010 --> 00:21:32.040
checking in assets. They're things
are building. And now you

393
00:21:32.040 --> 00:21:34.410
can certainly break a build
when a, when a test

394
00:21:34.410 --> 00:21:37.410
is wrong, how do you
test if a designer did

395
00:21:37.410 --> 00:21:40.500
something incorrect? And is that,
is that, is that a

396
00:21:40.500 --> 00:21:44.160
spec? Is that, So to
me, there is no spec

397
00:21:44.370 --> 00:21:48.570
to me, the spec is
the interface screens. So we're

398
00:21:48.570 --> 00:21:51.840
big believers in saying no
to functional specs because there's

399
00:21:51.840 --> 00:21:55.710
nothing functional about functional specs.
The only functional part is

400
00:21:55.710 --> 00:21:57.960
a real running application. So
we try to get to

401
00:21:57.960 --> 00:22:01.350
real running applications as soon
as humanly possible. And then

402
00:22:01.350 --> 00:22:04.590
that's the spec. So what
were the way the application

403
00:22:04.590 --> 00:22:06.780
works right now is supposed
to be the way the

404
00:22:06.780 --> 00:22:09.630
application works right now. And
if we disagree, we change

405
00:22:09.640 --> 00:22:11.970
the real application. We don't
go back and try to

406
00:22:11.970 --> 00:22:14.550
find some spec and rewrite
some of that change, the

407
00:22:14.550 --> 00:22:18.030
real application set and modify
performance. Yeah. That's a very

408
00:22:18.030 --> 00:22:20.910
important thing. I want to
reiterate this when David is

409
00:22:20.910 --> 00:22:24.570
saying designer first, he's not
talking about the way that

410
00:22:24.570 --> 00:22:26.790
some people would think that
his designer first, which is

411
00:22:26.790 --> 00:22:28.530
the designers go off for
a couple of months and

412
00:22:28.530 --> 00:22:32.220
produce designs for every single
webpage in the application, and

413
00:22:32.220 --> 00:22:34.860
then hand it over. We're
talking, I'm imagining. So I

414
00:22:34.860 --> 00:22:37.170
haven't talked to him about
this, but a designer is

415
00:22:37.320 --> 00:22:39.900
doing the stuff for the
design. That program is turning

416
00:22:39.900 --> 00:22:41.940
it around and we're talking
a matter of hours or

417
00:22:41.940 --> 00:22:45.390
maybe days in the complete
turnaround of the application. And

418
00:22:45.390 --> 00:22:49.200
that's the very tight iterative
process, which I think is

419
00:22:49.200 --> 00:22:51.960
very key to this because
you can't imagine what this

420
00:22:51.960 --> 00:22:54.300
whole thing looks like. It's
much. You've got to build

421
00:22:54.300 --> 00:22:57.030
it and see it and
change it and alter it

422
00:22:57.330 --> 00:22:59.850
and make it so that
altering the existing application is

423
00:22:59.850 --> 00:23:03.510
your normal way of look
So change. Yeah. Change happens

424
00:23:03.510 --> 00:23:06.250
all the time. You're constantly
in flux, but you, but

425
00:23:06.270 --> 00:23:08.070
at the same time, we
don't ever want to break

426
00:23:08.070 --> 00:23:12.030
the application. I was thinking
about this in a clean

427
00:23:12.030 --> 00:23:16.200
code talk, Robert Martin, uncle Bob
was saying that you make

428
00:23:16.200 --> 00:23:19.320
the tiniest little changes. How
do you, how do you,

429
00:23:19.370 --> 00:23:21.060
he kept saying, well, when
you re you, even when

430
00:23:21.060 --> 00:23:23.220
you rip the guts out
of the thing, whether it

431
00:23:23.220 --> 00:23:25.650
be designer, guts, or code
guts, you don't want to

432
00:23:25.650 --> 00:23:27.960
break it. And I kept
thinking why that was happening.

433
00:23:27.960 --> 00:23:30.390
Well, sometimes you really do
have to pull. You can't

434
00:23:30.390 --> 00:23:33.360
pull a heart out. Oh,
well, no, no. You can

435
00:23:33.360 --> 00:23:37.380
do amazing changes if you,
if you just figure out

436
00:23:37.380 --> 00:23:40.440
how to do it in
this small step, the application's

437
00:23:40.440 --> 00:23:43.800
always alive. I mean, we
look at the mingle, the

438
00:23:43.920 --> 00:23:47.960
project management tool we've been
working on On that tool.

439
00:23:48.770 --> 00:23:51.260
I happen to know that,
I mean, they have a

440
00:23:51.530 --> 00:23:54.590
test base is twice as
much as they're at code

441
00:23:54.590 --> 00:23:56.630
base. So two thirds of
the code in that product

442
00:23:56.660 --> 00:23:59.330
is tests and now allows
them to do quite violent

443
00:23:59.330 --> 00:24:02.360
things. I know that a
couple of months ago they

444
00:24:02.360 --> 00:24:05.150
made a very fundamental change
for the database scheme. I

445
00:24:05.150 --> 00:24:07.940
mean, we're talking utterly to
the guts of the database

446
00:24:07.940 --> 00:24:09.710
scheme and that's the kind
of stuff I'm concerned about.

447
00:24:09.770 --> 00:24:13.370
And I did that and
I mean, it wasn't even

448
00:24:13.370 --> 00:24:15.950
an event worth talking about
and when they were planning

449
00:24:15.950 --> 00:24:17.510
to do it, they were
saying, yeah, yeah, we've got

450
00:24:17.510 --> 00:24:20.810
to fundamentally alter the core
tables in this application. Yeah,

451
00:24:20.840 --> 00:24:23.120
we'll do that. I mean,
it's not a big deal.

452
00:24:23.120 --> 00:24:26.360
And what was, what, what
scaffolding, what was set up

453
00:24:26.360 --> 00:24:29.240
to allow that to succeed?
I mean, people were involved.

454
00:24:29.240 --> 00:24:31.940
Processes were involved development environment.
There was a, there was

455
00:24:31.940 --> 00:24:35.570
a set point of health
of the, our overall organization,

456
00:24:35.570 --> 00:24:38.840
the overall project that enabled
that if anything was a

457
00:24:38.840 --> 00:24:42.860
bit dodgy, it wouldn't have
succeeded. It would be interesting

458
00:24:42.860 --> 00:24:46.580
to ask him more detail
the team about that. I'm

459
00:24:46.580 --> 00:24:49.190
several thousand miles distance, but
my sense comes down to

460
00:24:49.190 --> 00:24:51.980
it's the way the team
works. It's the discipline of

461
00:24:51.980 --> 00:24:54.410
the way they work. They're
very anal about testing. They're

462
00:24:54.410 --> 00:24:58.850
very anal about integration. They're
working very closely together, then

463
00:24:58.880 --> 00:25:02.240
making sure the app is
always alive, always working and

464
00:25:02.240 --> 00:25:04.850
they figure out how to
make these little changes. And,

465
00:25:04.850 --> 00:25:06.620
and of course the other
thing that helps is a

466
00:25:06.620 --> 00:25:10.070
very modular application rails kind
of forces you into a

467
00:25:10.070 --> 00:25:13.700
well-designed modular application. That's one
of its great strengths. And

468
00:25:13.700 --> 00:25:16.280
you know, these are people
who follow through with that.

469
00:25:17.390 --> 00:25:19.550
That's he just made a
very interesting point when he

470
00:25:19.550 --> 00:25:22.550
said, which was kind of
a throwaway statement. That rails

471
00:25:22.550 --> 00:25:25.910
makes it easy to have
a marginalized, you know, well

472
00:25:25.910 --> 00:25:29.360
thought out application for the
asp.net developer, who probably is

473
00:25:29.360 --> 00:25:32.240
listening to this. When they
go file new web project,

474
00:25:32.240 --> 00:25:34.760
they get a config file,
a bin folder where all

475
00:25:34.760 --> 00:25:37.190
their DLLs go, and then
it's pretty much up to

476
00:25:37.190 --> 00:25:40.330
them. Exactly. They get a
blank slate. And my big

477
00:25:40.360 --> 00:25:43.480
issue is against blank slate.
Because most of the time,

478
00:25:43.480 --> 00:25:46.300
you don't want to reinvent
everything from scratch. There's a

479
00:25:46.300 --> 00:25:49.600
huge amount of decisions you
don't care about making over

480
00:25:49.600 --> 00:25:52.720
and over and over again.
I think coach structure and

481
00:25:52.720 --> 00:25:56.260
organization is one of those
things. So rails doesn't give

482
00:25:56.260 --> 00:25:59.530
you a blank slate. It
gives you a file cabinet,

483
00:25:59.740 --> 00:26:02.170
a full file cabinet where
everything kind of has its

484
00:26:02.170 --> 00:26:04.840
place from day one. You
don't have to invent a

485
00:26:04.840 --> 00:26:08.440
new organizational scheme for ever
project. And the problem is,

486
00:26:08.620 --> 00:26:12.130
even though people could reuse
these things, most humans, didn't

487
00:26:12.130 --> 00:26:14.200
just not that structured. The
only way you get that

488
00:26:14.200 --> 00:26:16.960
kind of structure is by
forcing it in and forcing

489
00:26:16.960 --> 00:26:21.280
it upon people. So HTML
is forcing people to use

490
00:26:21.280 --> 00:26:23.590
the same kind of organization,
the same kind of approach

491
00:26:23.590 --> 00:26:26.650
to application development by having,
by giving them a file

492
00:26:26.650 --> 00:26:29.620
folder. There are only these
input fields. There are only

493
00:26:29.620 --> 00:26:32.500
these core types you can
work with. So people do

494
00:26:32.800 --> 00:26:35.500
and they get consistent applications
where users can jump from

495
00:26:35.500 --> 00:26:38.470
application to application and still
know what's going on. Rails

496
00:26:38.470 --> 00:26:42.370
does exactly the same thing
for code organization, for approaches

497
00:26:42.370 --> 00:26:45.450
to development. We give you
the file cabinet. So you

498
00:26:45.450 --> 00:26:49.560
have to actually make the
choice to throw that file

499
00:26:49.560 --> 00:26:52.020
cabinet out. If you want
to start from scratch and

500
00:26:52.020 --> 00:26:55.380
nobody wants to do that.
So you goat people into

501
00:26:55.380 --> 00:26:58.320
doing the right things by
making it harder to do

502
00:26:58.320 --> 00:27:00.510
the wrong things. So it's
not that rails gives you

503
00:27:00.510 --> 00:27:05.370
the opportunity of having better
organization. It's really makes it

504
00:27:05.790 --> 00:27:08.520
almost impossible not to have
that. You have to make

505
00:27:08.520 --> 00:27:12.680
an active statement to get
bad organization. Now that's, you're

506
00:27:12.680 --> 00:27:14.610
going to add something Martin.
Yeah. I want to flip.

507
00:27:14.610 --> 00:27:17.190
That was one of the
things I really liked about

508
00:27:17.190 --> 00:27:18.900
rails. So I don't know
how many times I've started

509
00:27:18.900 --> 00:27:21.330
a new project in the
new environment thing. Okay. Where

510
00:27:21.330 --> 00:27:23.130
shall I put my source
files? Where should I put

511
00:27:23.130 --> 00:27:25.740
this? And rails just does
it for you. You just

512
00:27:25.740 --> 00:27:27.960
hit the button and away
it goes. And there is

513
00:27:27.960 --> 00:27:30.510
an equivalent in the dotnet
world, a tree surgeon, which

514
00:27:30.510 --> 00:27:34.950
a colleague of ours wrote
with Mike Roberts. And it does

515
00:27:34.950 --> 00:27:37.470
a similar kind of thing.
But the point with rails

516
00:27:37.470 --> 00:27:40.730
is that it's really deeply
in the psyche of, of

517
00:27:40.830 --> 00:27:44.160
every rail's development project. It's
very hard to go against

518
00:27:44.160 --> 00:27:46.800
that grain. That is true
in the, in the.net world.

519
00:27:47.330 --> 00:27:49.200
And you do spend a
lot of time kind of

520
00:27:49.370 --> 00:27:52.790
setting up your, your desktop,
you know, rearranging icons. I

521
00:27:52.790 --> 00:27:55.520
kind of think, you know,
get your <inaudible> make files

522
00:27:55.520 --> 00:27:58.400
set up, make sure that
you're even the notion of

523
00:27:58.400 --> 00:28:01.460
development versus test versus production.
Those things are not necessarily

524
00:28:01.760 --> 00:28:04.640
baked in. Now you had
said something interesting, David, when

525
00:28:04.640 --> 00:28:06.620
you said that you kind
of go to people into

526
00:28:06.620 --> 00:28:08.990
doing the right thing, and
I wanted to talk to

527
00:28:08.990 --> 00:28:12.320
you guys about this kind
of sense of are we,

528
00:28:12.740 --> 00:28:14.540
you, you seem to have,
you guys have, seem to

529
00:28:14.540 --> 00:28:19.460
have successfully used peer pressure
to make people write better

530
00:28:19.460 --> 00:28:22.220
code. I mean, the community
has a sense of beauty.

531
00:28:22.820 --> 00:28:24.260
I still haven't been able
to put my finger on

532
00:28:24.260 --> 00:28:27.710
it about what beautiful Ruby
code is. At least that

533
00:28:27.710 --> 00:28:30.620
Americans, right? That, and you
had commented the Japanese people

534
00:28:30.620 --> 00:28:32.540
write very different Ruby code
and it has a different

535
00:28:32.540 --> 00:28:35.330
sense of beauty. They, they
do. And that's actually interesting.

536
00:28:35.330 --> 00:28:39.350
So beauty is very much
a cultural term and it's

537
00:28:39.350 --> 00:28:43.490
very culturally relative. So one
community will think something is

538
00:28:43.490 --> 00:28:46.520
beautiful and another community will
think something else is beautiful.

539
00:28:46.520 --> 00:28:49.530
And I'm kind of just
seeing that split, looking at

540
00:28:49.530 --> 00:28:52.850
some Japanese Ruby code where
I think, huh, that's interesting.

541
00:28:52.850 --> 00:28:54.890
That's a very different approach
than we take in a

542
00:28:54.890 --> 00:28:57.410
lot of the rails code.
For example, it doesn't mean

543
00:28:57.470 --> 00:28:59.750
that one thing is better
or worse than another. It

544
00:28:59.750 --> 00:29:03.530
just means that it actually
strengthens your sense of aesthetic

545
00:29:03.560 --> 00:29:07.310
when you can identify different
branches of beauty. And we

546
00:29:07.310 --> 00:29:10.490
have a particular branch of
beauty in, in rails code

547
00:29:10.490 --> 00:29:13.550
and we have a particular
branch of thought on how

548
00:29:13.550 --> 00:29:16.100
you should organize your projects.
And the thing is, it's

549
00:29:16.100 --> 00:29:19.880
not just peer pressure, it's
actual code it's actual structures.

550
00:29:20.090 --> 00:29:23.690
So the peer pressure comes
in terms of when you

551
00:29:23.690 --> 00:29:26.390
generate a new model, you
cannot choose not to have

552
00:29:26.390 --> 00:29:28.820
a test for that model
is simply not an option

553
00:29:28.820 --> 00:29:31.580
for the generator. It will
generate a test file for

554
00:29:31.580 --> 00:29:35.870
you. So it's that peer
pressure comes in form of

555
00:29:36.440 --> 00:29:40.010
fundamental structures we have in
the rails set setup. You

556
00:29:40.010 --> 00:29:42.610
don't get to choose testing
from you. Don't get a

557
00:29:42.610 --> 00:29:45.460
lot of these things are
just not options. We have

558
00:29:45.460 --> 00:29:48.520
opinions about these things. So
it's not to say you

559
00:29:48.520 --> 00:29:51.070
can, you can't avoid it.
You certainly can. But if

560
00:29:51.070 --> 00:29:53.320
you're just following the flow,
if you're just getting into

561
00:29:53.320 --> 00:29:55.390
rails, if you just want
to learn and know what's

562
00:29:55.390 --> 00:29:58.690
going on, you'll just run
the default commands and you'll

563
00:29:58.690 --> 00:30:01.180
see what's going on. Huh?
They generate a test falls

564
00:30:01.180 --> 00:30:03.910
for me. I guess that
means I should be testing.

565
00:30:04.120 --> 00:30:08.890
And that just flows people
into good manners without forcing

566
00:30:08.890 --> 00:30:11.170
them. So it's not peer
pressure in the police have

567
00:30:11.170 --> 00:30:13.990
a smoke or take a
line of Coke. It's peer

568
00:30:13.990 --> 00:30:17.320
pressure in the sense of
like, why shouldn't I do

569
00:30:17.320 --> 00:30:20.800
this? I get something back.
That's good for me. And

570
00:30:20.800 --> 00:30:23.410
I I'm new here. I
I'll do as they do

571
00:30:23.410 --> 00:30:30.000
in Rome. Huh? So within
the, within the rails community,

572
00:30:30.000 --> 00:30:32.370
there's this, there's this correctness.
There's a sense of beauty.

573
00:30:32.520 --> 00:30:35.700
The sense of smell kind
of came with the environment

574
00:30:36.120 --> 00:30:38.280
so that a newbie, even
a few months into it

575
00:30:38.280 --> 00:30:39.930
starts to have a sense
of what's right. And what's

576
00:30:39.930 --> 00:30:42.930
wrong when he sees something
that's potentially outside the norm.

577
00:30:43.290 --> 00:30:46.230
He, he knows as well.
I remember when I was

578
00:30:46.230 --> 00:30:48.540
working, I worked at, at
Nike 10 years ago doing

579
00:30:48.540 --> 00:30:55.020
Java and we had, sometimes
we got so wrapped up

580
00:30:55.020 --> 00:30:58.350
in, Oh, for <inaudible> sake.
We kind of forgot about

581
00:30:58.350 --> 00:31:01.350
the, kind of the, the
big picture I I've noticed

582
00:31:01.350 --> 00:31:03.090
in the.net world. A lot
of people are doing that

583
00:31:03.090 --> 00:31:05.340
a little bit with interfaces.
They're just thinking everything in

584
00:31:05.340 --> 00:31:06.930
the world can be solved
with an interface and a

585
00:31:06.930 --> 00:31:09.240
provider and a, a pluggable
model. I've been trying to

586
00:31:09.240 --> 00:31:13.980
get my head around that,
that, whereas our communal sense

587
00:31:13.980 --> 00:31:16.620
of code smell and how
does that fit into, how

588
00:31:16.620 --> 00:31:19.770
can I use that in
the development process? It's, it's

589
00:31:19.770 --> 00:31:24.420
interesting that even, even things
like naming it's, it's baked

590
00:31:24.420 --> 00:31:27.330
into the system, I think
name is a huge thing.

591
00:31:27.330 --> 00:31:29.340
I think it's one of
the most important skills you

592
00:31:29.340 --> 00:31:32.010
gonna have in programming is
being good at picking great

593
00:31:32.010 --> 00:31:34.830
names. And I think by
the fact that we force

594
00:31:34.830 --> 00:31:38.280
you to call something, acts
that we have pluralization, for

595
00:31:38.280 --> 00:31:41.190
example, which I think to
most people, if they had

596
00:31:41.190 --> 00:31:44.100
heard the idea of front,
they would think of Explain

597
00:31:44.100 --> 00:31:45.300
that to the listener. They
may not know what that

598
00:31:45.300 --> 00:31:48.750
is. Pluralization and rails works
in the sense that models

599
00:31:48.750 --> 00:31:52.680
are singular. So you have
class person. And now the

600
00:31:53.370 --> 00:31:56.190
place where these people go
to sleep, what is that

601
00:31:56.190 --> 00:31:59.970
called? It's called the people
table. So we pluralized pretty

602
00:31:59.970 --> 00:32:04.080
much anything to do that
conversion. You have person goes

603
00:32:04.080 --> 00:32:07.380
to people, you have goat.
It goes to goats projects

604
00:32:07.380 --> 00:32:10.380
to projects. You have a
table somewhere or a dictionary.

605
00:32:10.590 --> 00:32:15.630
We actually reversed engineered the
English language, polarization scheme to

606
00:32:15.630 --> 00:32:18.810
a fairly high degree. We
have something like 95% hit

607
00:32:18.810 --> 00:32:21.270
rate on that. And pretty
much a hundred percent on

608
00:32:21.270 --> 00:32:24.270
the common words that people
use, tasks and projects and

609
00:32:24.270 --> 00:32:27.150
all of these. We actually
had a very interesting debate

610
00:32:27.150 --> 00:32:32.430
at one point on how
to portalize octopus. We actually

611
00:32:32.430 --> 00:32:36.150
have that. Now there's a
special rule just for octopus

612
00:32:36.450 --> 00:32:39.650
to have an octopus model
model will look for an

613
00:32:39.650 --> 00:32:42.320
eye to pie table. So
that's the kind of the

614
00:32:42.320 --> 00:32:45.080
level of it just got
fun. It got fun in

615
00:32:45.080 --> 00:32:47.120
the way that we care
about these things so much

616
00:32:47.270 --> 00:32:49.940
and people today, wouldn't it
be easier if you just

617
00:32:49.940 --> 00:32:53.840
had person and person there
wouldn't be any translation. There

618
00:32:53.840 --> 00:32:56.930
wouldn't be this big scheme
for Florida the station, but

619
00:32:56.960 --> 00:32:59.690
no, really. We made a
point that we prefer those

620
00:32:59.690 --> 00:33:04.790
aesthetics. I prefer the aesthetic
of pluralization. My collections are

621
00:33:04.790 --> 00:33:08.210
plural, so my tables should
be plural too. So we

622
00:33:08.210 --> 00:33:11.480
went through all this effort
just to make a point

623
00:33:11.480 --> 00:33:16.060
about aesthetics matter. Well, you
decided to care about a

624
00:33:16.060 --> 00:33:19.480
particular thing. I mean, I
w yeah, and I think

625
00:33:19.480 --> 00:33:21.880
this is something as well.
That's come from the whole,

626
00:33:22.030 --> 00:33:25.450
the way the Ruby community
has grown up, particularly in

627
00:33:25.450 --> 00:33:28.180
the U S where the
people who went into Ruby

628
00:33:28.210 --> 00:33:30.850
early on were people who
did care about this kinds

629
00:33:30.850 --> 00:33:33.670
of thing. I mean, not,
not just David, but also,

630
00:33:33.670 --> 00:33:35.890
you know, the prags have
always cared. A great deal

631
00:33:35.890 --> 00:33:40.390
about writing code is writing
to his programmers program. A

632
00:33:40.390 --> 00:33:43.570
book. What we've seen is
the people that got into

633
00:33:43.570 --> 00:33:47.020
Ruby tended to be people
who cared a lot about

634
00:33:47.020 --> 00:33:51.970
the design, about expressiveness, it
attracted likeminded people, and that

635
00:33:51.970 --> 00:33:56.560
generated the kernel of that
whole community around that degree

636
00:33:56.560 --> 00:33:59.080
of, of caring about that
stuff. And I think we're

637
00:33:59.080 --> 00:34:01.030
seeing we're reaping the benefit
of that at the moment.

638
00:34:02.650 --> 00:34:05.440
I think actually in, in
large ways, we had a

639
00:34:05.440 --> 00:34:08.080
huge fuss at one point
in the rails community about

640
00:34:08.080 --> 00:34:11.170
pluralization people saying, this is
crazy. This is the worst

641
00:34:11.170 --> 00:34:14.800
feature about rails. And in
some ways they're true from

642
00:34:14.800 --> 00:34:18.130
a technical perspective that it
doesn't really make sense, but

643
00:34:18.130 --> 00:34:20.260
it was kind of a
firewall. It was a firewall

644
00:34:20.260 --> 00:34:23.890
for aesthetics. So if you
could not appreciate why we

645
00:34:23.890 --> 00:34:26.410
did this, why we chose
to go through all of

646
00:34:26.410 --> 00:34:29.800
this work to get prettier
code, maybe you weren't yet

647
00:34:29.800 --> 00:34:31.390
in the state of mind,
that was a good fit

648
00:34:31.390 --> 00:34:35.350
for this community. So we
try to weed people out,

649
00:34:35.410 --> 00:34:38.380
in some sense, if they
don't share the same cultural

650
00:34:38.620 --> 00:34:42.880
bias, if they don't share
the same values, then maybe

651
00:34:42.880 --> 00:34:44.650
they're not a good fit
for the rails community. And

652
00:34:44.650 --> 00:34:47.260
we try to put those
decisions very upfront. So you

653
00:34:47.260 --> 00:34:50.200
don't have to get six
months into Ruby and rails

654
00:34:50.200 --> 00:34:52.990
to realize, Hey, maybe I
don't share the cultural values.

655
00:34:53.020 --> 00:34:56.170
We have to cultural values
on the door of the

656
00:34:56.170 --> 00:34:58.780
entry. So you're not going
to walk into this house

657
00:34:58.870 --> 00:35:01.960
if you don't somewhat respect
these values or can learn

658
00:35:01.960 --> 00:35:05.740
to appreciate them. Yeah. The,
the, the passion definitely seems

659
00:35:05.740 --> 00:35:08.890
to be built in, I
mean, this is, this is

660
00:35:08.890 --> 00:35:12.250
my first rails conference in
Portland here, and it is

661
00:35:12.250 --> 00:35:15.520
a very passionate crowd. It
doesn't appear to be any,

662
00:35:16.900 --> 00:35:19.060
everyone has an opinion here.
Well, again, look at the

663
00:35:19.060 --> 00:35:23.860
origins of the, of the
community and what made.net popular.

664
00:35:24.010 --> 00:35:26.080
Microsoft told you this is
going to be the next

665
00:35:26.080 --> 00:35:29.950
big thing. What made Java
popular IBM and sun told

666
00:35:29.950 --> 00:35:31.720
you, this is going to
be an expert thing. What

667
00:35:31.720 --> 00:35:35.440
made Ruby popular? There was
no corporation backing. I would

668
00:35:35.440 --> 00:35:38.850
say that it was using
Godins idea virus Idea, that

669
00:35:38.850 --> 00:35:41.520
there was a vacuum out
there of pain. And the

670
00:35:41.520 --> 00:35:44.340
pain was the lack of
beauty and lack of comfort

671
00:35:44.640 --> 00:35:48.590
for the developer. And that
vacuum sucked in a large

672
00:35:48.600 --> 00:35:51.170
amount of people, But it
was very much a grassroots

673
00:35:51.200 --> 00:35:53.810
thing. I mean, there's been
no, I mean, the closest

674
00:35:53.810 --> 00:35:56.120
thing you've got to big
corporates is ThoughtWorks and we're

675
00:35:56.120 --> 00:35:59.510
only 800 people for goodness
sake. I mean, there isn't

676
00:35:59.600 --> 00:36:02.780
that in the Ruby community
that will change. Those pressures

677
00:36:02.780 --> 00:36:06.110
will come in. But, but
like in a, in software

678
00:36:06.110 --> 00:36:09.650
development, a big system depends
a lot on those early

679
00:36:09.650 --> 00:36:12.530
iterations that set the tone,
the, how the rest of

680
00:36:12.530 --> 00:36:16.100
the system will be built.
My hope is that what

681
00:36:16.100 --> 00:36:19.640
we're doing with Ruby the
early days are gonna create

682
00:36:19.640 --> 00:36:24.020
the such a Colonel around
Ruby and rails that will,

683
00:36:24.020 --> 00:36:27.110
as it grow, helps set
the tone for community, but

684
00:36:27.110 --> 00:36:29.150
will continue to follow the
kinds of things that David's

685
00:36:29.150 --> 00:36:32.090
talking about. Now, thinking about
the, the growing of this

686
00:36:32.090 --> 00:36:35.030
nascent community and thinking about
the size difference that you

687
00:36:35.040 --> 00:36:37.640
just did, kind of a
juxtaposition between Microsoft and thought

688
00:36:37.640 --> 00:36:42.020
works as Microsoft brings things
to bear like this dynamic

689
00:36:42.020 --> 00:36:45.470
language runtime, is it possible
for someone as big as

690
00:36:45.470 --> 00:36:49.790
Microsoft, 40,000 people now, I'm
not sure they're big to

691
00:36:49.790 --> 00:36:53.060
get involved in such a
way that people would actually

692
00:36:53.060 --> 00:36:56.570
respect some of the things
that they would offer. I

693
00:36:56.570 --> 00:37:01.490
think most technical Communities respect
a real contributions of any

694
00:37:01.490 --> 00:37:05.750
kind. And that's really where
it rests on for the

695
00:37:05.750 --> 00:37:08.840
Ruby and rails community. In
general, there's definitely a bias

696
00:37:08.840 --> 00:37:11.690
against Microsoft because they there's
a long history. There's a

697
00:37:11.690 --> 00:37:14.750
long history of events and
actions that that company took

698
00:37:14.750 --> 00:37:18.830
that was not appreciated. Let's
say it mildly like that

699
00:37:19.250 --> 00:37:21.680
by the open source community
in general and the Ruby

700
00:37:21.680 --> 00:37:24.710
on rails community in particular,
that doesn't mean it can't

701
00:37:24.710 --> 00:37:30.320
change. For example, sun forced
Java, a lot of people

702
00:37:30.320 --> 00:37:33.830
and, and Ruby and rails
is a rebellion. And in

703
00:37:33.830 --> 00:37:38.390
some sense against that kind
of culture, but doesn't mean

704
00:37:38.390 --> 00:37:41.630
we don't appreciate J Ruby.
For example, Sana stepped up

705
00:37:41.630 --> 00:37:46.400
and paid people to, to
work on furthering a compiler,

706
00:37:46.570 --> 00:37:49.970
a runtime for, for Ruby.
That's not the default C1.

707
00:37:50.060 --> 00:37:53.510
You don't see any bun
batting dad. I mean, that's

708
00:37:53.510 --> 00:37:55.790
a good thing because they
stepped up, did a real

709
00:37:55.790 --> 00:37:59.390
contribution and then they earned
some respect. So that's usually

710
00:37:59.390 --> 00:38:02.180
how you do it. Microsoft
definitely has to work harder

711
00:38:02.180 --> 00:38:05.240
for that. They have a
much, much higher mountain to

712
00:38:05.240 --> 00:38:08.180
climb in that sense of
regaining some respect from this

713
00:38:08.180 --> 00:38:13.400
community, but nothing is impossible.
There's a, there's definitely a

714
00:38:13.400 --> 00:38:16.400
sense of a, of a
significant inflection point coming up

715
00:38:16.400 --> 00:38:21.650
at the moment. We've I
think part of it and

716
00:38:21.650 --> 00:38:23.480
a large part of it
is the growth of dynamic

717
00:38:23.480 --> 00:38:26.360
languages in general, Ruby in
particular, and a sense of,

718
00:38:26.360 --> 00:38:28.400
we can really change the
way in which we think

719
00:38:28.400 --> 00:38:31.970
about corporate it. And we
want to get rid of

720
00:38:31.970 --> 00:38:34.310
the, the bloat ware and
the stuff that's out there.

721
00:38:34.760 --> 00:38:37.720
What I've seen from sun
Is a really great willingness

722
00:38:37.720 --> 00:38:40.990
to engage with that. And
the whole J Rubian enterprise

723
00:38:40.990 --> 00:38:43.780
hiring some of the leading
Jay Ruby developers and letting

724
00:38:43.780 --> 00:38:48.580
them do the job, the
decision to absolutely implement Ruby

725
00:38:48.580 --> 00:38:50.260
the way it is so
that you can take a

726
00:38:50.260 --> 00:38:54.400
C Ruby application complex one
like rails applications and run

727
00:38:54.400 --> 00:38:56.920
them on J Ruby. That
was exactly the right thing

728
00:38:56.920 --> 00:39:00.400
to do. Now, the question
that has been answered by

729
00:39:00.400 --> 00:39:03.520
son, kind of for the,
for the Java community, interestingly

730
00:39:03.520 --> 00:39:07.840
by sun, not by IBM.
Now, the questions shifts back

731
00:39:07.840 --> 00:39:11.020
to Microsoft, can, will they
do the same thing for

732
00:39:11.020 --> 00:39:15.610
the CLR? Microsoft has done
many things over the last

733
00:39:15.610 --> 00:39:19.060
couple of years that shows
a, an openness to deal

734
00:39:19.060 --> 00:39:21.010
with what I think is
the reality of the open

735
00:39:21.010 --> 00:39:23.650
source movement, instead of trying
to deny it and push

736
00:39:23.650 --> 00:39:25.720
it back that begin to
open up a little bit.

737
00:39:26.170 --> 00:39:29.530
And if that trend continues,
we could well see a

738
00:39:29.530 --> 00:39:32.890
good Ruby implementation on the
CLR. On the other hand,

739
00:39:32.890 --> 00:39:36.550
we have the 235 patents
fiasco. And if that's the

740
00:39:36.550 --> 00:39:39.430
attitude of Microsoft, then the
mountain has just got a

741
00:39:39.430 --> 00:39:42.730
lot bigger. And the point
is the future is developers.

742
00:39:43.180 --> 00:39:45.610
And I, I know that
there is concern in, in

743
00:39:45.610 --> 00:39:49.060
places in Microsoft that they've,
they've lost the attention of

744
00:39:49.060 --> 00:39:51.940
the alpha developers and that
that's in a, in the

745
00:39:51.940 --> 00:39:54.940
medium longterm is going to
kill them. And I think

746
00:39:55.090 --> 00:39:59.200
their reaction to open source
in general, their reaction to

747
00:39:59.200 --> 00:40:01.930
Ruby in particular, that's going
to make a big difference

748
00:40:01.930 --> 00:40:07.770
for Microsoft's future, The, the
characterization of the alpha developer

749
00:40:08.460 --> 00:40:11.060
and that it was in
the medium and longterm that

750
00:40:11.060 --> 00:40:13.500
it's almost has kind of
an insidious quality to it.

751
00:40:13.500 --> 00:40:15.030
It's like there is a,
there's a bit of a

752
00:40:15.030 --> 00:40:19.980
diaspora happening. It seems, and
people, the alpha developers, the

753
00:40:19.980 --> 00:40:24.540
alpha dog at the company
is, is, is missing something

754
00:40:24.870 --> 00:40:27.450
that sense of beauty that
we talked about before. And

755
00:40:28.350 --> 00:40:32.460
if, if Microsoft doesn't join
the conversation in some substantive

756
00:40:32.460 --> 00:40:34.950
way, they might wake up
the next day and find

757
00:40:34.950 --> 00:40:38.400
that that guy's not there
anymore. Yeah, It's interesting. I

758
00:40:38.400 --> 00:40:43.530
mean, we had ThoughtWorks, we
got heavily into.net, decided to

759
00:40:43.530 --> 00:40:45.660
get heavily into.net when.net came
out, it was a big

760
00:40:45.690 --> 00:40:47.880
deal at Fort works, you
know, wherever, a lot of

761
00:40:47.880 --> 00:40:51.930
geeks and developers like us
off, not terribly popular. We

762
00:40:51.930 --> 00:40:55.020
were solidly in Java. It
was quite a risk to

763
00:40:55.020 --> 00:40:57.300
get involved in.net, but we,
we did, and we've done

764
00:40:57.300 --> 00:41:01.710
quite a lot of.net projects.
What we've noticed very recently

765
00:41:02.220 --> 00:41:05.220
is particularly in the U
S a notable falling off

766
00:41:05.700 --> 00:41:09.450
in.net project starting. Now, we
don't know whether this is

767
00:41:09.450 --> 00:41:12.150
just it's, it's fairly recent.
We don't know whether this

768
00:41:12.150 --> 00:41:14.640
is a blip or a
trend, but we're noticing it

769
00:41:14.640 --> 00:41:17.340
and thinking, Hmm. People who
come to ThoughtWorks tend to

770
00:41:17.340 --> 00:41:20.010
be wanting to be pushing
the edge that tells us

771
00:41:20.010 --> 00:41:22.530
that maybe people don't think
dot nets, the original Java's

772
00:41:22.530 --> 00:41:25.770
going along perfectly fine. It's
steady. Ruby is a huge

773
00:41:25.770 --> 00:41:29.340
surge. I mean, for 40%
of our new business this

774
00:41:29.340 --> 00:41:32.700
year, Wasn't it a sense
that Java has plateaued over

775
00:41:32.700 --> 00:41:35.230
the last two or three
years? Okay. I think so.

776
00:41:35.230 --> 00:41:38.020
Yes, there are us, but
the intriguing thing is not,

777
00:41:38.020 --> 00:41:41.960
not hasn't plateaued it's declined.
And that surprises me. And

778
00:41:41.960 --> 00:41:43.300
I just said, I don't
know whether it's a blip.

779
00:41:43.300 --> 00:41:45.130
It could just be the
way things are going, but

780
00:41:45.130 --> 00:41:48.310
it also could be a
sign of, of what Paul Graham

781
00:41:48.310 --> 00:41:50.740
has said. You know, Microsoft
is dead because they're no

782
00:41:50.740 --> 00:41:54.970
longer dangerous. Who knows? I
don't know. I think it's

783
00:41:54.970 --> 00:41:59.560
a great point in terms
of what developers alpha geeks

784
00:41:59.560 --> 00:42:02.620
or whatever they choose to
work on has serious repercussion

785
00:42:02.620 --> 00:42:05.250
for everything else. So even
if Ruby on rails is

786
00:42:05.320 --> 00:42:10.240
tiny blip on the, in
the larger scale and picture

787
00:42:10.240 --> 00:42:14.710
of things compared to 6 million
Java developers and how many

788
00:42:15.080 --> 00:42:20.110
million Microsoft developers it matters,
who is not just a

789
00:42:20.110 --> 00:42:23.080
conversation about the numbers. And
I think we're seeing the

790
00:42:23.080 --> 00:42:25.900
same thing with Ruby on
rails. As we, in some

791
00:42:25.900 --> 00:42:29.530
sense, we're seeing with agile
and with XP people leave

792
00:42:29.560 --> 00:42:33.970
companies to work in more
passionate environments. And if they

793
00:42:33.970 --> 00:42:38.110
were forced to work in
waterfall development, processes and practices,

794
00:42:38.230 --> 00:42:41.560
they would leave that company
to go chase an XP

795
00:42:41.560 --> 00:42:44.740
shop or an agile environment.
And I'm seeing the same

796
00:42:44.740 --> 00:42:46.420
kind of thing. A lot
of people come up to

797
00:42:46.420 --> 00:42:49.510
me and say, I quit
my job because of Java.

798
00:42:49.660 --> 00:42:53.110
I quit my job because
of.net. I simply did not

799
00:42:53.110 --> 00:42:55.180
want to work in an
environment where we use those

800
00:42:55.180 --> 00:42:58.630
tools anymore. I'm not passionate
about those tools. So I

801
00:42:58.630 --> 00:43:02.260
chose to take a minor
position somewhere else, doing Ruby

802
00:43:02.260 --> 00:43:05.020
on rails. I chose to
go freelance doing Ruby on

803
00:43:05.020 --> 00:43:09.520
rails, and I'm much happier
now. And the interesting thing

804
00:43:09.520 --> 00:43:12.460
is this is not because
Microsoft is short of interesting

805
00:43:12.460 --> 00:43:14.440
technologies. I mean, you look
at what's going on with

806
00:43:14.440 --> 00:43:19.570
link really interesting stuff. One
of our main guy who

807
00:43:19.570 --> 00:43:21.430
looks at a lot of
Microsoft stuff, Mike too, who's

808
00:43:21.430 --> 00:43:23.710
one of the guys who
wrote 10 unit. He's very

809
00:43:23.710 --> 00:43:26.200
keen on the workflow stuff
in windows. He says, this

810
00:43:26.200 --> 00:43:30.490
is really good technology, but
it's, it's almost as if

811
00:43:30.520 --> 00:43:33.250
there's, I don't know if
there's some weird distortion field

812
00:43:33.250 --> 00:43:37.030
floating around Microsoft and that
the interesting technologies aren't getting

813
00:43:37.030 --> 00:43:40.510
out there and engaging people,
Oh, it's yet another add

814
00:43:40.510 --> 00:43:44.230
on to visual studio and
some designer. And, and there's

815
00:43:44.230 --> 00:43:48.240
no attempt to really make
that impact and engagement. And

816
00:43:48.250 --> 00:43:50.470
as I said, I think
the reaction to Ruby is

817
00:43:50.470 --> 00:43:52.810
going to be an interesting
sign of that because there's

818
00:43:52.810 --> 00:43:55.570
an opportunity there to really
say, okay, we can engage.

819
00:43:57.160 --> 00:44:00.550
I've always felt a little
strange about Microsoft and its

820
00:44:00.550 --> 00:44:04.330
size. It's not one company
of 30,000 people. It's about

821
00:44:04.360 --> 00:44:09.400
3010 person companies and they're,
and they're competing against each

822
00:44:09.400 --> 00:44:11.410
other. You know what I
mean? Who knows how many

823
00:44:11.710 --> 00:44:16.570
implemented different implementations died internally
before one, you know, made

824
00:44:16.570 --> 00:44:19.140
it out. There seems to
be this sense that, and

825
00:44:19.140 --> 00:44:21.820
I've always felt that they
should put more wood behind

826
00:44:21.820 --> 00:44:25.780
the arrow head. I had
lunch with Ray Ozzie, the

827
00:44:25.780 --> 00:44:28.660
chief architect of Microsoft while
I was at mics. And

828
00:44:28.660 --> 00:44:32.880
I wanted to understand kind
of the, the plan. And

829
00:44:32.880 --> 00:44:35.880
it was much more relaxed
than I had expected. He

830
00:44:35.880 --> 00:44:37.770
was very developer focused. We're
going to give them great

831
00:44:37.770 --> 00:44:39.690
tools and then they will
make the next big thing.

832
00:44:40.080 --> 00:44:41.700
But I kind of felt
like I was meeting the

833
00:44:41.700 --> 00:44:44.640
Pope and I wanted some
dogma laid down. I wanted

834
00:44:44.640 --> 00:44:51.030
some, some super passionate expression
of, well, just a declaration.

835
00:44:51.600 --> 00:44:56.760
You David are certainly not
in any way, devoid of

836
00:44:56.760 --> 00:45:00.480
opinions. And you have expressed
them some fly some don't,

837
00:45:00.480 --> 00:45:02.730
but you're not afraid of
saying it ought to be

838
00:45:02.730 --> 00:45:05.900
like this. I think people
like that, don't they? I

839
00:45:05.900 --> 00:45:07.580
think they do. I, and
I think that's one of

840
00:45:07.580 --> 00:45:11.360
the reason Microsoft is currently
looked upon with great suspicion.

841
00:45:11.360 --> 00:45:14.480
Right now they're jumping in
all direction. It seems, Oh,

842
00:45:14.570 --> 00:45:16.730
you can choose whatever language
you want. We don't have

843
00:45:16.730 --> 00:45:19.250
any opinions on that. We
spend so much time on

844
00:45:19.250 --> 00:45:24.830
the whole soap, Ws, death
star approach. And now this

845
00:45:24.830 --> 00:45:27.380
rest of looks like it's
gaining traction. So let's do

846
00:45:27.380 --> 00:45:29.120
something with that too. It
seems like there is no

847
00:45:29.120 --> 00:45:31.880
direction. It seems like there's
no focus. And even worse

848
00:45:31.880 --> 00:45:34.070
than that, it seems like
there's great infighting that we

849
00:45:34.070 --> 00:45:37.940
can get this spasm over
the Linux patents. I'm pretty

850
00:45:37.940 --> 00:45:41.180
sure that Ray Ozzie was
really shaking his head when

851
00:45:41.180 --> 00:45:43.700
that press release went out
and like how much of

852
00:45:43.700 --> 00:45:46.550
my good work just went
undone. I have no doubt.

853
00:45:46.550 --> 00:45:49.190
He did not. Okay. That
press release. Exactly. And that's

854
00:45:49.190 --> 00:45:50.990
just one of those reasons
that a lot of people

855
00:45:50.990 --> 00:45:53.810
don't trust Microsoft, they have
so many hats. They're a

856
00:45:53.810 --> 00:45:56.960
Hydra in that sentence. So
even though one guy might

857
00:45:56.960 --> 00:45:59.630
be smiling, another guy from
within the same company is

858
00:45:59.630 --> 00:46:02.780
trying to bite you Well.
And as a Microsoft enthusiast,

859
00:46:02.780 --> 00:46:04.880
and you know, I'm a
Microsoft guy, I'm a Microsoft

860
00:46:04.880 --> 00:46:07.250
guy until I declare that
I'm not a, you know,

861
00:46:07.250 --> 00:46:10.400
they've happily paid my mortgage,
you know, indirectly for the

862
00:46:10.640 --> 00:46:15.020
last many years. I like
the people I have. I

863
00:46:15.020 --> 00:46:18.320
have yet to meet an
individual at Microsoft who I

864
00:46:18.320 --> 00:46:21.650
consider to be evil I've
yet to meet one. I

865
00:46:21.650 --> 00:46:24.650
even, we considered to be
kind of creepy or not

866
00:46:24.650 --> 00:46:27.620
trustworthy. They're just all very
pleasant on an individual or

867
00:46:27.620 --> 00:46:30.770
small team basis. You know,
John Lamb, the guy who was

868
00:46:30.770 --> 00:46:34.400
working on the DLR with
Jim Hagan and two great

869
00:46:34.400 --> 00:46:38.210
guys, I hope that they
are heard at the higher

870
00:46:38.210 --> 00:46:40.370
levels. I hope that someone
up at the top says

871
00:46:40.610 --> 00:46:43.310
this could be something that
we could be a, a

872
00:46:43.310 --> 00:46:46.670
member of the rails community
and have a great implementation

873
00:46:46.670 --> 00:46:51.110
of Ruby on.net. But I
don't know, is it Ray

874
00:46:51.110 --> 00:46:54.950
Ozzie? Is it, Bill's not,
Bill's busy. I know. And

875
00:46:54.950 --> 00:46:56.990
I think that the thing
is that the notion of

876
00:46:57.020 --> 00:46:59.660
evil is, is a weird
term because I don't believe

877
00:46:59.660 --> 00:47:02.480
that in any of this,
there are truly evil people,

878
00:47:02.600 --> 00:47:05.510
but I do believe there
are malicious deeds. And I

879
00:47:05.510 --> 00:47:09.440
do believe that the actions
speak much louder than words

880
00:47:09.500 --> 00:47:11.570
in the sense of a
person can very much be

881
00:47:11.570 --> 00:47:13.790
a pleasant person to be
around. And you can like

882
00:47:13.790 --> 00:47:18.860
that person and still his
actions can be appalling. And

883
00:47:18.860 --> 00:47:20.510
I think that that's really
what they need to be

884
00:47:20.510 --> 00:47:23.120
judged on. They're not being
judged on how nice people

885
00:47:23.120 --> 00:47:25.790
there are. We're not saying
that we dislike any of

886
00:47:25.790 --> 00:47:29.060
them. Personally. We're saying that
as a company, they've done

887
00:47:29.080 --> 00:47:33.190
some deeds as recently as
last week that we, don't

888
00:47:33.220 --> 00:47:36.670
not only don't agree with,
but find appalling and puts

889
00:47:36.670 --> 00:47:39.940
a really bad spin on
everybody else. They are when

890
00:47:39.940 --> 00:47:42.050
it comes down to it,
one company. And even though

891
00:47:42.070 --> 00:47:44.290
there are, there are good
forces. It can very, very

892
00:47:44.440 --> 00:47:47.920
quickly become undone. And every
time a deed like the

893
00:47:47.920 --> 00:47:53.020
Linux spasm over patents goes
up, it erases all of

894
00:47:53.020 --> 00:47:55.720
that Goodwill. They build up.
So it seems very much

895
00:47:55.720 --> 00:47:59.800
like the start building up
good stuff, and then they

896
00:47:59.860 --> 00:48:03.100
take it away. So it's
very fluctuating right now. And

897
00:48:03.100 --> 00:48:05.380
I think they need just
a longer period of time

898
00:48:05.380 --> 00:48:08.110
where they're just not doing
bad deeds. We can't trust

899
00:48:08.110 --> 00:48:10.540
them for three months at
a time. They've had such

900
00:48:10.540 --> 00:48:13.600
a long history to, to
infect us and give us

901
00:48:13.600 --> 00:48:16.030
a certain perception of the
company that they need a

902
00:48:16.030 --> 00:48:18.900
long time to redeem that.
Well, I'm certainly not a,

903
00:48:18.920 --> 00:48:21.000
I don't want to bash
Microsoft and I don't want

904
00:48:21.000 --> 00:48:24.600
to speak to hyperbolically about,
about Microsoft, but I do

905
00:48:24.600 --> 00:48:29.160
feel like to what you're
saying, some leadership at the

906
00:48:29.220 --> 00:48:33.150
top levels and some, some
declarations of like, even than

907
00:48:33.150 --> 00:48:35.610
the Google side of don't
be evil, you know, early

908
00:48:35.610 --> 00:48:37.800
on, they were very out
there. Larry and Sergei were

909
00:48:37.800 --> 00:48:39.060
like, you know, this is
how things are going to

910
00:48:39.060 --> 00:48:41.430
go. And even Google is
starting to get that, that

911
00:48:41.430 --> 00:48:45.180
fragmented sense. You know, there's
all these different labs everyone's

912
00:48:45.180 --> 00:48:48.030
working on something in their
spare time. You can't really

913
00:48:48.030 --> 00:48:50.760
cover up internal fragmentation with
a little toolbar at the

914
00:48:50.760 --> 00:48:52.590
top of the page with
the, and here are the

915
00:48:52.590 --> 00:48:54.660
15 other things that you
could search. And except for

916
00:48:54.660 --> 00:48:56.580
frugal, that was too useful.
We can't give you that.

917
00:48:57.240 --> 00:49:01.320
You know, there's there's, can
you have a company that

918
00:49:01.350 --> 00:49:06.390
big that has one face,
one voice of goodness of

919
00:49:06.390 --> 00:49:09.510
developer empowerment. I mean, could
re turn this around by

920
00:49:10.260 --> 00:49:12.990
making some declarations by shutting
some projects down by putting

921
00:49:12.990 --> 00:49:16.140
some emphasis on others. And
just as the U S

922
00:49:16.140 --> 00:49:17.760
is tempting to do that
as we reach out to

923
00:49:17.760 --> 00:49:19.950
other countries, you mean, as
you're speaking, both of you,

924
00:49:19.950 --> 00:49:23.130
Martin and David too, I'm
seeing these parallels as we

925
00:49:23.130 --> 00:49:25.350
are trying to say, no,
we're really good. We really

926
00:49:25.350 --> 00:49:27.570
are. We're trying to tell
the world we have good

927
00:49:27.570 --> 00:49:29.640
things. And I think that's
a great parallel. Well, again,

928
00:49:29.760 --> 00:49:32.280
it doesn't help to tell
somebody you're good. You have

929
00:49:32.280 --> 00:49:34.830
to be good. You have
to act good. You judge

930
00:49:34.860 --> 00:49:38.580
people on their actions, not
on their words. And that's

931
00:49:38.580 --> 00:49:40.920
what we're doing with Microsoft
in large sense. So I

932
00:49:40.920 --> 00:49:44.550
think they have a very
ingrained culture that came from

933
00:49:44.850 --> 00:49:47.700
a period of time of
when they had great success

934
00:49:47.700 --> 00:49:50.250
in the nineties and so
on where a certain strategy

935
00:49:50.250 --> 00:49:52.770
work, where you could cut
off the air supply. And

936
00:49:52.770 --> 00:49:55.410
that was a good business
tactic that made you billions

937
00:49:55.410 --> 00:49:58.770
of dollars. So in some
sense, why wouldn't you and

938
00:49:58.830 --> 00:50:02.790
taking that out again is
very, very hard. And it's

939
00:50:02.790 --> 00:50:05.250
even harder when you have
40,000 people. Some of them

940
00:50:05.250 --> 00:50:08.520
have worked there for 15
years. That just doesn't happen

941
00:50:08.520 --> 00:50:11.610
overnight. Well, it is comforting
to me to see people

942
00:50:11.610 --> 00:50:16.010
like John and Jim care
about the language. And I

943
00:50:16.050 --> 00:50:18.930
know that as a Microsoft
developer, I would like to

944
00:50:19.200 --> 00:50:22.020
be able to do some,
some rails. And I'd like

945
00:50:22.020 --> 00:50:24.000
to be able to host
it on I S N

946
00:50:24.050 --> 00:50:25.650
and run it in a
data center that runs SQL

947
00:50:25.650 --> 00:50:29.900
server 2005. But until Then,
I am enjoying my time

948
00:50:29.900 --> 00:50:32.120
here at, at the rails
conference. And I appreciate both

949
00:50:32.120 --> 00:50:34.130
of you guys offering the
time to just sit down

950
00:50:34.130 --> 00:50:35.390
and chat with me. Is
there anything that you'd like

951
00:50:35.390 --> 00:50:38.330
to add in closing, sir?
Thanks for taking time to

952
00:50:38.330 --> 00:50:40.250
talk to us. It's always
fun to talk to somebody

953
00:50:40.250 --> 00:50:43.820
who don't necessarily have the
same religion as yourself in

954
00:50:43.820 --> 00:50:46.310
the sense that this is
a meeting of the fateful

955
00:50:46.700 --> 00:50:50.900
cultural exchange here. Yeah, exactly.
And I enjoyed it too.

956
00:50:50.900 --> 00:50:55.190
It's always nice to share
a chat with David because

957
00:50:55.190 --> 00:50:58.820
I can be quiet and
reasonable. Just like when I

958
00:50:58.820 --> 00:51:01.280
was sharing a podium with
campus. It's great to be

959
00:51:01.280 --> 00:51:04.280
the, well, thank you so
much for letting this dotnet

960
00:51:04.280 --> 00:51:07.400
Bedouin come into your, your
camp here. And that's another

961
00:51:07.400 --> 00:51:09.080
episode of Hansel match. We'll
see you next week.

