WEBVTT FILE

1
00:00:12.060 --> 00:00:17.670
From Hansel minutes.com it's Hansel
minutes, a weekly discussion with

2
00:00:17.670 --> 00:00:22.260
web developer and technologists. Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:22.260 --> 00:00:28.440
show number two 28. Recorded
live Thursday, August 12th, 2010. Support for

4
00:00:28.440 --> 00:00:31.950
Hanselman it's just provided by
Tellerik rad controls, the most

5
00:00:31.950 --> 00:00:35.640
comprehensive suite of components for
windows forms and asp.net web

6
00:00:35.640 --> 00:00:45.120
applications. online@wwwdottelerik.com. In this episode,
Scott talks with Jeff Wilcox from

7
00:00:45.120 --> 00:00:48.300
the Silverlight team about developing
on the windows phone seven.

8
00:00:50.660 --> 00:00:52.820
Hi, this is Scott Hanselman.
This is another episode of

9
00:00:52.820 --> 00:00:56.300
Hansel minutes, brought to you
today with a lovely Colt.

10
00:00:56.540 --> 00:01:00.230
So forgive my one octave
down voice and I'm on

11
00:01:00.230 --> 00:01:05.240
the phone today with Jeff Wilcox.
Jeff is a software development

12
00:01:05.240 --> 00:01:08.600
engineer at Microsoft and works
on the phone. What I

13
00:01:08.620 --> 00:01:11.840
call we call the windows
phone seven series. How are

14
00:01:11.840 --> 00:01:15.560
you Jeff? Doing great. Thanks
for having me on. No

15
00:01:15.560 --> 00:01:18.290
worries. What was your specific
area that you focused on?

16
00:01:18.290 --> 00:01:19.760
You work on the phone,
right? You work on server

17
00:01:19.760 --> 00:01:24.110
light. What are you? What's
your job? Well, I'm actually

18
00:01:24.110 --> 00:01:26.510
on the silver proper team.
So my job is to

19
00:01:26.510 --> 00:01:29.240
make sure that Silverlight just
works great on the phone.

20
00:01:29.330 --> 00:01:32.420
Cause it's the real silver
light. It's really not that

21
00:01:32.420 --> 00:01:35.570
different from what's on the
desktop. So, you know, my

22
00:01:35.570 --> 00:01:38.570
job is to work on
improving the performance and kind

23
00:01:38.570 --> 00:01:40.160
of sharing the message on
how to make your apps.

24
00:01:40.580 --> 00:01:43.370
You're running a lot better
on the phone. So that's

25
00:01:43.370 --> 00:01:45.830
interesting. So there's this, there's
the silver light team and

26
00:01:45.830 --> 00:01:47.750
that's the same team that
delivers silver light on the

27
00:01:47.750 --> 00:01:51.440
web. Right. And then there's
a low level phone guys.

28
00:01:51.650 --> 00:01:53.720
How was that? How was
that organized? I mean, do

29
00:01:53.720 --> 00:01:55.280
you work a little bit
on phone stuff and you

30
00:01:55.280 --> 00:01:58.310
work a little bit on
web stuff? Yeah. Well, that's

31
00:01:58.310 --> 00:02:02.660
not, that's not calling low
level phone guys, but it's

32
00:02:02.660 --> 00:02:05.450
definitely, you know, there's this,
I guess people don't really

33
00:02:05.450 --> 00:02:09.170
care about the organizations that
Microsoft, you know, but when

34
00:02:09.170 --> 00:02:11.360
we got the silver team
and we are looking at

35
00:02:11.450 --> 00:02:14.360
everything we do, we've got
the plugin, we're doing, you

36
00:02:14.360 --> 00:02:17.750
know, the phone story here,
then there's this app platform

37
00:02:17.750 --> 00:02:20.570
team. And they're working on
making sure that, you know,

38
00:02:20.570 --> 00:02:22.130
the whole windows phone is
really the best way to

39
00:02:22.130 --> 00:02:24.710
build apps and they're part
of the whole windows phone

40
00:02:24.710 --> 00:02:27.950
organization. So it's kind of
this big partnership with all

41
00:02:27.950 --> 00:02:30.110
three of these teams working
together to bring this to

42
00:02:30.110 --> 00:02:33.680
developers. So if you do
something on Silverlight, if you

43
00:02:33.680 --> 00:02:36.410
improve something, like you said
that you work on performance,

44
00:02:37.010 --> 00:02:38.810
is that something that, where
you can improve something in

45
00:02:38.810 --> 00:02:41.150
Silverlight and then you'll get
that improvement in both places?

46
00:02:41.990 --> 00:02:44.900
Yeah. You know, it's actually,
it goes both ways on

47
00:02:44.900 --> 00:02:47.600
the phone. We've actually kind
of changed how animations work.

48
00:02:47.960 --> 00:02:51.230
They actually are a lot
more smooth and robust and

49
00:02:51.230 --> 00:02:52.910
this work we're hoping in
the future to bring back

50
00:02:52.910 --> 00:02:54.710
the silver light. So it's
kind of a two way

51
00:02:54.710 --> 00:02:59.440
street then at the same
side on the phone, it's

52
00:02:59.440 --> 00:03:01.780
kind of based on Silverlight
free. Cause we're working on

53
00:03:01.780 --> 00:03:04.450
at the same time as
silver Lake for, but we

54
00:03:04.450 --> 00:03:06.790
had to start somewhere. So
we actually brought a lot

55
00:03:06.790 --> 00:03:11.280
of features from Silverlight four
to the phone directly. So

56
00:03:11.280 --> 00:03:13.320
is it kind of like
several like three and some

57
00:03:13.320 --> 00:03:17.130
extra stuff? Yeah. It's like
Silverlight 3.7 I think is

58
00:03:17.130 --> 00:03:20.940
kind of our fun name
for it. 3.7. Okay, cool.

59
00:03:21.000 --> 00:03:23.160
Yeah. But the good news
is if you built so

60
00:03:23.170 --> 00:03:25.830
blade three apps, it's exactly
the same and that's even

61
00:03:25.830 --> 00:03:30.390
better. Yeah. I've, I've got
all the tools I've installed

62
00:03:30.390 --> 00:03:33.180
on my, on my system
here. And I'm not really

63
00:03:33.180 --> 00:03:37.170
a, a Silverlight person quite
yet, but I'm, I'm trying

64
00:03:37.170 --> 00:03:41.400
to get my head around
this because I'm a guy

65
00:03:41.400 --> 00:03:43.860
that gave me a phone.
So I've actually got an

66
00:03:43.860 --> 00:03:46.800
actual prototype phone. One of
these developer phones, I guess

67
00:03:46.800 --> 00:03:50.220
this phone will never be
made, but it's a nice

68
00:03:50.220 --> 00:03:54.570
little, a developer type phone.
You know, if you tell

69
00:03:54.570 --> 00:03:56.790
people you have that phone,
people just don't want you

70
00:03:56.790 --> 00:03:58.110
to run their apps and
they're going to want to

71
00:03:58.110 --> 00:04:03.030
see it. So It's funny,
everyone was talking about like,

72
00:04:03.060 --> 00:04:03.960
Oh, I wish I had
a phone. I wish I

73
00:04:03.960 --> 00:04:05.070
had a fallen. I was
like, well, you know, you

74
00:04:05.070 --> 00:04:09.300
have a great emulator. And
they were like, no, but

75
00:04:09.300 --> 00:04:10.530
I just want to see
it. And I was like,

76
00:04:10.560 --> 00:04:14.910
Oh, that's silly. But then
I, I got my app

77
00:04:14.910 --> 00:04:17.790
running on the phone yesterday
and it was just like,

78
00:04:18.480 --> 00:04:21.060
I don't know. I was
just kind of giddy. There's

79
00:04:21.060 --> 00:04:24.420
something about the phone itself.
Like the idea that I

80
00:04:24.420 --> 00:04:27.720
affected a computer outside my
computer, you know, it's so

81
00:04:27.720 --> 00:04:30.060
stupid, but that's one of
the things that's great about

82
00:04:30.060 --> 00:04:32.790
any kind of embedded systems
work or any, any work

83
00:04:32.790 --> 00:04:37.530
that involves additional hardware. Getting
that to, to, to, you

84
00:04:37.530 --> 00:04:40.380
know, getting a pixel, the
wiggle or whatever is, is

85
00:04:40.380 --> 00:04:43.620
extremely satisfying. I think part
of it is the touch.

86
00:04:43.620 --> 00:04:45.660
Right. You know, we're just
so used to using that

87
00:04:45.660 --> 00:04:48.030
mouse on the computer and
it's just a total different

88
00:04:48.030 --> 00:04:50.910
world once you get it
running on that phone. Yeah.

89
00:04:50.910 --> 00:04:53.850
It is. I've got a
touch monitor, but, but the

90
00:04:53.850 --> 00:04:55.830
via the emulator and the
touch, it's just not the

91
00:04:55.830 --> 00:04:59.160
same. And actually seeing my
icon on the, on the

92
00:04:59.160 --> 00:05:04.340
screen there is, is pretty
insane. Yeah. But That's actually

93
00:05:04.350 --> 00:05:07.200
windows phone, you know, running
in your emulator. So it's

94
00:05:07.200 --> 00:05:09.720
really similar. It's just an
x86 build of the alas.

95
00:05:10.140 --> 00:05:12.750
So there's a lot of
similarities there. So I mean,

96
00:05:12.750 --> 00:05:14.370
he really is the OSTP.
Right. Who use it? It's

97
00:05:14.370 --> 00:05:18.300
not faking anything. Yeah. It's
an actual build when we

98
00:05:18.300 --> 00:05:20.790
build off, you know, a
windows phone built on machine,

99
00:05:20.820 --> 00:05:23.580
we're actually building an X
86 what's in the emulator

100
00:05:23.940 --> 00:05:25.560
and then the own arm,
which is what goes on

101
00:05:25.560 --> 00:05:31.680
a phone. Hmm. Okay. Some
of the things that I'm

102
00:05:31.680 --> 00:05:33.720
noticing that I'm, I've not
been able to get working

103
00:05:33.720 --> 00:05:36.270
quite yet. And this is
mostly because I haven't been

104
00:05:36.270 --> 00:05:39.960
reading too much is some
of the subtle animations. Like

105
00:05:40.140 --> 00:05:42.780
I've got a nice list
going and I've modified the

106
00:05:42.780 --> 00:05:45.660
list and I've added some
nice icons and you know,

107
00:05:45.660 --> 00:05:49.140
all that stuff is really
pretty straightforward. Although I have

108
00:05:49.140 --> 00:05:51.600
a, I'm not a designer.
I have a very Spartan

109
00:05:52.140 --> 00:05:59.720
design here. Well, yeah, it
is a little rough. I

110
00:05:59.720 --> 00:06:02.360
want to have some animations
from like page to page.

111
00:06:02.360 --> 00:06:05.240
So I've started out with
the basic list of stuff

112
00:06:05.630 --> 00:06:09.650
and then the details, right.
Cause I'm porting a, an

113
00:06:09.650 --> 00:06:13.700
offline reader application from the
iPhone. So you're, you're, you

114
00:06:13.700 --> 00:06:15.500
know, you've got your list
of things that you've got

115
00:06:15.500 --> 00:06:18.110
in your offline reader cash
and you click a button

116
00:06:18.110 --> 00:06:21.560
and then it goes forward.
But right now it it's

117
00:06:21.560 --> 00:06:24.260
pretty basic. When I, when
I find on this fire

118
00:06:24.260 --> 00:06:26.720
at the emulator here and
then the list kind of

119
00:06:26.720 --> 00:06:29.210
like goes up and I've
got the nice scroll, the

120
00:06:29.210 --> 00:06:32.000
stuff that was all for
free. Cool. And then when

121
00:06:32.000 --> 00:06:34.850
I click, it just goes,
boom. And I'm right there.

122
00:06:35.840 --> 00:06:40.820
I want to get a
full page animation. How does

123
00:06:40.820 --> 00:06:43.700
that work? I have like
my main page dot XAML

124
00:06:43.700 --> 00:06:46.070
and I have my details
page dot XAML. I understand

125
00:06:46.070 --> 00:06:49.310
how to do animations within
a page, but how do

126
00:06:49.310 --> 00:06:53.470
I animate between two pages?
Well, we've been having a

127
00:06:53.470 --> 00:06:56.350
lot of customers up in
Redmond, kinda stuffing through the

128
00:06:56.350 --> 00:06:59.710
same problem. And I think
everyone wants something to just

129
00:06:59.710 --> 00:07:01.510
drop right in there. You
know, you just want to,

130
00:07:01.840 --> 00:07:03.520
either in case they're going
to control or put a

131
00:07:03.520 --> 00:07:06.280
control on your page, it
takes care of that. And

132
00:07:07.150 --> 00:07:09.130
the important messages someone's going
to do that. I hope.

133
00:07:11.740 --> 00:07:14.650
Yeah. Yeah. In the meantime,
you can totally flare up

134
00:07:14.680 --> 00:07:16.570
blend and you can hook
up, you know, your own

135
00:07:16.570 --> 00:07:20.050
storyboard for the actual page
and that's no problem, but

136
00:07:20.050 --> 00:07:22.420
unfortunately there's no just wait
today and say, Hey, you

137
00:07:22.420 --> 00:07:25.780
know, make this really cool
animation. So it's something we're

138
00:07:25.780 --> 00:07:27.280
aware of. And I know
that there's a couple of

139
00:07:27.280 --> 00:07:29.770
guys that are trying to
actually take all the windows,

140
00:07:29.770 --> 00:07:32.800
phone animations and document them.
So the windows phone documentation

141
00:07:32.800 --> 00:07:33.970
will have a lot of
the stuff you need to

142
00:07:33.970 --> 00:07:36.880
do that, but it's not
there today. Sorry. No, no,

143
00:07:36.880 --> 00:07:38.740
of course I'm not, I'm
not, I'm not as worried

144
00:07:38.740 --> 00:07:40.600
about what's here today and
what's there tomorrow. Cause I

145
00:07:40.600 --> 00:07:43.840
recognize that people will, that,
you know, I'm sure that

146
00:07:43.840 --> 00:07:45.700
there's missing stuff and it'll
be there cause it's not

147
00:07:45.700 --> 00:07:48.820
out yet, but I'm more
interested in the, in the,

148
00:07:48.820 --> 00:07:51.760
in the internal details, in
the sense of, you know,

149
00:07:51.760 --> 00:07:54.580
there's all these different UI
design guidelines and you can

150
00:07:54.580 --> 00:07:57.070
go up and download these.
There's like a PDF all

151
00:07:57.070 --> 00:08:01.210
about how your application should
behave in a Metro world.

152
00:08:01.810 --> 00:08:04.570
And there's like the turnstile
animation and the rotation, you

153
00:08:04.570 --> 00:08:06.190
know, all these kinds of
things that you see as

154
00:08:06.190 --> 00:08:10.060
you move around the phone.
If I make a storyboard,

155
00:08:10.060 --> 00:08:13.480
right. That's the basis of
an animation in Silverlight am

156
00:08:13.480 --> 00:08:16.480
I correct? Yep. So if
I go and do like

157
00:08:16.510 --> 00:08:22.390
a, a forward turnstile animation
where I click and the

158
00:08:22.390 --> 00:08:24.910
page kind of turns away
and the new one turns

159
00:08:24.910 --> 00:08:29.590
in are, are these, like,
I can see how I

160
00:08:29.590 --> 00:08:31.240
can draw the animation. Like
you said, I can go

161
00:08:31.240 --> 00:08:33.940
into blend or I can
go on and find various

162
00:08:33.940 --> 00:08:39.580
people's blogs, but is this
like in the onload event?

163
00:08:39.580 --> 00:08:41.560
Or how do you know,
how do you make it

164
00:08:41.560 --> 00:08:44.050
smooth? Is there like a,
an event that I'm not,

165
00:08:44.200 --> 00:08:46.510
I'm not seeing or a
place to hook in for

166
00:08:46.510 --> 00:08:49.060
each of these pages? I
assume that there's a, I'm

167
00:08:49.060 --> 00:08:51.700
about to leave and animate
out and here I come

168
00:08:51.700 --> 00:08:55.470
animate in. Yeah. Yeah. So
there's navigation events on the

169
00:08:55.470 --> 00:08:58.650
pages and that's part of
the story. And I think

170
00:08:58.650 --> 00:09:00.480
a lot of it's going
to be fine tuning. So

171
00:09:00.480 --> 00:09:02.760
you click on the button,
you queue up your animation

172
00:09:02.760 --> 00:09:06.180
immediately and then you can
actually monitor when that storyboard

173
00:09:06.180 --> 00:09:08.250
completes and then use that
to kick off the next

174
00:09:08.250 --> 00:09:14.820
navigation. It's a lot easier
than it sounds. But the

175
00:09:14.820 --> 00:09:20.070
general idea is that this
is happening. This has happened

176
00:09:20.490 --> 00:09:24.720
kind of events. Yeah. Yup.
Yeah. It's something where I

177
00:09:24.720 --> 00:09:26.820
think we need to get
guidance out to people on

178
00:09:26.820 --> 00:09:29.010
here's the perfect way to
do that turnstile and it'll

179
00:09:29.010 --> 00:09:31.440
be real easy at that
point. Yeah. I'm sure all

180
00:09:31.440 --> 00:09:33.480
of that will be on.
My name is Dan. I

181
00:09:33.480 --> 00:09:36.300
know lots of people are
working on things. So when

182
00:09:36.300 --> 00:09:39.120
I click on something, I
use this thing called the

183
00:09:39.120 --> 00:09:42.870
navigation service. Is that right?
Yep. Yeah. That's a property

184
00:09:42.870 --> 00:09:47.280
of actually lives right on
your page. Oh really? Yeah.

185
00:09:47.880 --> 00:09:50.190
I noticed that when I
navigate, I'm actually navigating to

186
00:09:50.190 --> 00:09:54.330
Auri, which was funny because
it reminded me that I

187
00:09:54.330 --> 00:09:55.950
really am in Silverlight. Do
you know what I'm saying?

188
00:09:57.380 --> 00:09:59.880
Yeah. It should be kind
of familiar if you're using

189
00:09:59.880 --> 00:10:03.150
the silver light navigation service
today. Right. And exactly I'm

190
00:10:03.150 --> 00:10:06.420
saying navigation, service dot navigate,
take me to details and

191
00:10:06.420 --> 00:10:09.600
I'm passing that, that information
in the URL. So it's

192
00:10:09.600 --> 00:10:12.900
almost like every application is
like a little web, a

193
00:10:12.900 --> 00:10:15.830
little web browser. Yeah, totally.
You know, you have your

194
00:10:15.830 --> 00:10:18.210
example files that are sitting
right there in your project

195
00:10:18.450 --> 00:10:21.870
and you can navigate to
those that's easy, but you

196
00:10:21.870 --> 00:10:23.880
know, a big things about
improving the performance of your

197
00:10:23.880 --> 00:10:25.980
apps. How do you just
make it quicker and how

198
00:10:25.980 --> 00:10:28.890
do you improve your startup
time? And you can actually

199
00:10:28.890 --> 00:10:32.010
put those animal pages and
you know, another project inside

200
00:10:32.010 --> 00:10:36.000
that same application, right? And
when you do that, that

201
00:10:36.000 --> 00:10:38.910
deal will actually be delay
loaded until, you know, until

202
00:10:38.910 --> 00:10:40.740
you actually need it, we'll
keep it to the side.

203
00:10:41.850 --> 00:10:43.860
And so that, that whole
year I send texts is

204
00:10:43.860 --> 00:10:47.160
a way to actually improve
performance in your application. You

205
00:10:47.160 --> 00:10:50.400
move that secondary content into
that other project and it

206
00:10:50.400 --> 00:10:52.920
just works well. That's interesting
that you bring that up

207
00:10:52.920 --> 00:10:54.540
because performance was one of
the things I want to

208
00:10:54.540 --> 00:10:58.380
talk about when I start
my application up. Now there's

209
00:10:58.380 --> 00:11:02.430
a little clock that appears
for just a moment. And

210
00:11:02.430 --> 00:11:07.500
then my app starts up.
It's actually inside your project,

211
00:11:07.500 --> 00:11:12.630
Scott. No crappy. I was
like, I was like, I

212
00:11:12.630 --> 00:11:13.920
thought you were only telling
me the button to push

213
00:11:13.920 --> 00:11:16.980
to fix that. No, no.
So that's actually the splash

214
00:11:16.980 --> 00:11:20.820
screen. It's totally up to
you to, you can have

215
00:11:20.820 --> 00:11:23.220
your branding there. You could
have make, make it look

216
00:11:23.220 --> 00:11:24.810
like your first page of
the app. There's a lot

217
00:11:24.810 --> 00:11:27.420
you can do there and
you don't really have to

218
00:11:27.420 --> 00:11:32.850
have a splash screen that
you probably want one O

219
00:11:32.850 --> 00:11:35.100
clock. And I'm like, I
wonder what that clock is.

220
00:11:36.630 --> 00:11:38.850
Well, you know, I'm not
sure exactly which build you're

221
00:11:38.850 --> 00:11:41.520
using, but we've done some
really big improvements on perf

222
00:11:41.640 --> 00:11:44.730
you know, since the beta
and hopefully, you know, people

223
00:11:44.730 --> 00:11:46.230
are just going to see
the goodness we've been working

224
00:11:46.230 --> 00:11:49.470
real hard on improving performance
and splash screen as part

225
00:11:49.470 --> 00:11:51.930
of that. Okay. So I
can put, I can put

226
00:11:51.930 --> 00:11:54.460
up whatever I, whatever want,
but you said something Interesting

227
00:11:54.460 --> 00:11:57.040
there where you said that
if there's XAML pages that

228
00:11:57.040 --> 00:11:59.260
I'm not going to need
or maybe I'll need them

229
00:11:59.290 --> 00:12:03.070
later, is there, you said
there's benefit for putting that

230
00:12:03.070 --> 00:12:07.320
in another DLL? Oh yeah,
totally. So when you started

231
00:12:07.320 --> 00:12:10.290
your application, it's actually, you
know, it's already on the

232
00:12:10.290 --> 00:12:13.830
phone. All those files are
just sitting there alongside, so

233
00:12:13.830 --> 00:12:15.540
we're going to start up
your main app by reading

234
00:12:15.540 --> 00:12:19.410
that whole deal well into
the whole CLR process. If

235
00:12:19.410 --> 00:12:21.290
you can have that split
up across a couple of

236
00:12:21.300 --> 00:12:23.730
different files, then we'll just
take that first one and

237
00:12:23.730 --> 00:12:27.420
keep the others, you know,
until you need them. Ah,

238
00:12:27.450 --> 00:12:32.340
okay. That's interesting. Cause my
application will primarily have its

239
00:12:32.340 --> 00:12:36.930
main screen and it's detailed
screen settings would be like

240
00:12:36.930 --> 00:12:40.050
an example of a complicated
page that probably won't be

241
00:12:40.050 --> 00:12:43.950
used very often. Yeah. Settings
totally is a great candidate.

242
00:12:43.950 --> 00:12:47.460
Just put it along to
the side. Okay. Okay. So

243
00:12:47.460 --> 00:12:49.710
then any delays would be,
Would any Easter eggs in

244
00:12:49.710 --> 00:12:52.650
there and put the Easter
egg somewhere else? Right? Anything

245
00:12:52.650 --> 00:12:54.090
that's going on that that's
going to load up big

246
00:12:54.090 --> 00:12:58.140
animations or anything complicated. Yeah.
So do you actually have

247
00:12:58.140 --> 00:13:00.630
your project open right now
on your computer? I am

248
00:13:00.630 --> 00:13:03.510
looking at, do you have
a splash screen image that

249
00:13:03.510 --> 00:13:06.180
JPEG in your project? Yeah.
So I'm looking in my

250
00:13:06.180 --> 00:13:09.360
project, splash screen image dot
JPEG up and there it

251
00:13:09.360 --> 00:13:11.190
is. I double click and
I there's my clock. All

252
00:13:11.190 --> 00:13:14.400
right. I didn't even read
that. Sorry. You can put

253
00:13:14.580 --> 00:13:16.320
a picture of yourself up
there and you have the

254
00:13:16.320 --> 00:13:19.740
best app. I mean, honestly
I think I'd rather not

255
00:13:19.740 --> 00:13:22.830
have a splash me at
all. It shows up for

256
00:13:22.860 --> 00:13:28.470
just an instant and it
just, it lashes for half

257
00:13:28.470 --> 00:13:30.780
a second. And I wonder,
do I want a big

258
00:13:30.780 --> 00:13:33.270
startup? I really want my
application to feel like it

259
00:13:33.660 --> 00:13:36.390
fits in with everything else.
You know, when I launch

260
00:13:36.390 --> 00:13:38.430
mail, it just comes up.
And when I launched the

261
00:13:38.430 --> 00:13:40.830
browser, it just comes up.
So that's going to be

262
00:13:40.830 --> 00:13:42.630
an interesting challenge. I don't
want to spend a lot

263
00:13:42.630 --> 00:13:46.050
of time. Yeah. Well, splash
screen. You don't need to

264
00:13:46.050 --> 00:13:48.150
have one. I think if
your apps are really big,

265
00:13:48.360 --> 00:13:50.550
you know, if you were
doing a huge movie experience

266
00:13:50.550 --> 00:13:52.960
and you were loading, you
know, 30 different projects up

267
00:13:52.980 --> 00:13:56.430
then in that case, you
probably want one because psychologically

268
00:13:56.430 --> 00:13:58.890
you kind of trick people.
You say, Hey, maybe it

269
00:13:58.890 --> 00:14:01.470
wasn't 700 milliseconds. Maybe it
was 200. It's kind of

270
00:14:01.470 --> 00:14:04.800
hard to tell. Yeah. That's
an interesting point. One of

271
00:14:04.800 --> 00:14:07.470
the things, one of the
things my application's going to

272
00:14:07.470 --> 00:14:09.900
do is do stuff in
the background because I want

273
00:14:09.900 --> 00:14:13.800
it to start up and
then immediately start downloading things.

274
00:14:14.670 --> 00:14:17.910
Definitely. How much thought am
I going to have to

275
00:14:17.910 --> 00:14:20.550
put into performance? I know
these are, these are fast

276
00:14:20.550 --> 00:14:23.040
little things. I think they're
like gigahertz processors or whatever.

277
00:14:23.040 --> 00:14:25.740
I mean, there there's a
hardware spec for these things.

278
00:14:25.740 --> 00:14:28.650
And I, I I've, I've
got the little pre-build phone

279
00:14:28.650 --> 00:14:31.380
here and it's, it's, it's
very, very fast. I haven't

280
00:14:31.380 --> 00:14:34.590
had any trouble with the
speed, but I'm wondering what

281
00:14:34.590 --> 00:14:35.970
are some gotchas that I'm
going to need to watch

282
00:14:35.970 --> 00:14:38.070
out for that so that
I don't show this down

283
00:14:38.070 --> 00:14:41.130
inadvertently. Yeah. We know, to
be honest, it's, it's a

284
00:14:41.130 --> 00:14:44.700
completely different world than, you
know, Silverlight for the desktop.

285
00:14:45.270 --> 00:14:48.180
And hopefully people understand that.
I think people do, you

286
00:14:48.180 --> 00:14:51.320
know, it's one gigahertz versus,
you know, an eight core

287
00:14:51.320 --> 00:14:54.380
machines. It's just rocking a
lot of memory. So there's

288
00:14:54.380 --> 00:14:56.300
actual work. People are going
to need to do once

289
00:14:56.300 --> 00:14:58.640
they start getting devices to
just, you know, try the

290
00:14:58.640 --> 00:15:02.300
animals out and make optimizations.
And we've shared a, there's

291
00:15:02.300 --> 00:15:04.760
actually a white paper up
it's public today and it's

292
00:15:04.760 --> 00:15:07.910
all about performance. And that's
really something people should check

293
00:15:07.910 --> 00:15:11.060
out because we've detailed probably
10 or 15 different steps

294
00:15:11.090 --> 00:15:13.460
that just really will make
your apps that much better

295
00:15:13.460 --> 00:15:15.560
than on simulate. You never
had to worry about at

296
00:15:15.560 --> 00:15:20.770
all. Yeah. I saw this
creating high-performance serverless applications on

297
00:15:20.770 --> 00:15:25.390
the phone. It must, it
must be chaos over there.

298
00:15:26.020 --> 00:15:28.510
I mean, you're about to
launch something and you're releasing

299
00:15:28.510 --> 00:15:30.490
stuff as fast as you
can. And then white papers

300
00:15:30.490 --> 00:15:33.400
are coming out and I
mean, this must be insane.

301
00:15:33.700 --> 00:15:35.620
I'm surprised you got it.
Well, you know, it's really

302
00:15:35.620 --> 00:15:37.900
nice that we're able to
share that white paper right

303
00:15:37.900 --> 00:15:41.410
now because you know, some
developers that we've actually met,

304
00:15:41.470 --> 00:15:44.230
they, they were Silverlight developers
for a long time and

305
00:15:44.230 --> 00:15:47.410
before that WPF. And so
they just never thought about,

306
00:15:47.500 --> 00:15:49.570
you know, well, how do
I have the best animation

307
00:15:49.570 --> 00:15:52.390
that's going to look smooth?
Because honestly, sometimes you just

308
00:15:52.390 --> 00:15:55.000
get really happy and blend
and you start pulling things

309
00:15:55.000 --> 00:15:57.790
together and you can make
complex animations with five or

310
00:15:57.790 --> 00:16:00.940
six layers. And that's really
difficult for the phone's hardware

311
00:16:00.940 --> 00:16:03.790
to handle. Yeah. Yeah, no,
on a, on a big

312
00:16:03.790 --> 00:16:06.930
machine, like I've got a
hexachord I guess it's called

313
00:16:06.940 --> 00:16:13.990
a six core machine. What's
that? Yes. The nine of

314
00:16:13.990 --> 00:16:18.820
the X six dream magical
super version. Yeah. I guarantee

315
00:16:18.820 --> 00:16:21.070
you that your run, you
know, your emulator experience is

316
00:16:21.070 --> 00:16:22.810
going to be a little
different on that machine then

317
00:16:22.900 --> 00:16:24.490
when it's on the phone.
So I'm glad you have

318
00:16:24.490 --> 00:16:26.890
a phone there. Oh, is
that interesting? Are you saying

319
00:16:26.890 --> 00:16:28.510
that it might run just
as fast, you know, like

320
00:16:28.510 --> 00:16:30.970
too fast, it might be
just not representative at all

321
00:16:31.240 --> 00:16:34.210
because it's so fast Close,
but you know, we don't

322
00:16:34.210 --> 00:16:37.660
really throttle to emulate or
that much it's really a

323
00:16:37.660 --> 00:16:40.780
big problem to solve. And
so right now it's called

324
00:16:40.780 --> 00:16:42.970
an emulator for a reason.
You know, it's not, it's

325
00:16:42.970 --> 00:16:45.790
not the windows phone inside
your computer. It's just emulating,

326
00:16:45.820 --> 00:16:48.910
you know, the iOS and
the experience. And so, you

327
00:16:48.910 --> 00:16:51.580
know, your computer is really
powerful. So you might have

328
00:16:51.580 --> 00:16:53.470
what looks like a frame
rate of 60 frames, a

329
00:16:53.470 --> 00:16:55.660
second, you know, on the
computer and on the phone,

330
00:16:55.660 --> 00:16:57.550
it might be 40. So
you'll just need to do

331
00:16:57.550 --> 00:17:01.630
optimizations. Once you have that
phone in hand, This is

332
00:17:01.630 --> 00:17:03.910
the part of the show
where I mock you while

333
00:17:03.910 --> 00:17:08.590
actually Tellerik mocks us your
applications that you're testing dependent

334
00:17:08.590 --> 00:17:11.770
on external systems over which
you have no control. Maybe

335
00:17:11.770 --> 00:17:14.680
you're being slowed down by
those systems, their lack of

336
00:17:14.680 --> 00:17:18.010
availability. Responsiveness. Do you want
to do TDD? Right? Our

337
00:17:18.010 --> 00:17:20.470
friends at Tellerik help you
solve some of those problems

338
00:17:20.470 --> 00:17:24.010
with their newest mocking tool,
just mock to let you

339
00:17:24.010 --> 00:17:27.850
do fast, simple controlled unit
tests, independent of external resources

340
00:17:27.850 --> 00:17:32.920
like databases, web services, proprietary
code, unlike some marketing tools,

341
00:17:32.950 --> 00:17:37.840
just mock works with non-virtual
methods, seal classes, static methods,

342
00:17:38.020 --> 00:17:40.750
giving you complete control of
your code. You can get

343
00:17:40.750 --> 00:17:46.120
more details. You can download
just mock at tellerik.com/just mock.

344
00:17:46.150 --> 00:17:48.550
And don't forget to thank
Tellerik for supporting Hanselman it's

345
00:17:48.550 --> 00:17:54.570
on their Facebook fan page,
facebook.com/tellerik. Thanks a lot. One

346
00:17:54.570 --> 00:17:55.890
of the things I wanted
to ask you about was

347
00:17:55.890 --> 00:17:58.530
that when I'm running a
desktop application, there's the UI

348
00:17:58.530 --> 00:18:01.890
thread and then there's other
background threads, but there's two

349
00:18:01.890 --> 00:18:04.680
threads that are kind of
the two main threads inside

350
00:18:04.680 --> 00:18:06.990
of a of Silverlight. Can
you talk about that a

351
00:18:06.990 --> 00:18:09.090
little bit? Because that's been
something that's been hard for

352
00:18:09.090 --> 00:18:11.990
me to get my head
around. So one of the

353
00:18:11.990 --> 00:18:14.420
best, you know, the biggest
wins we've had for silver

354
00:18:14.430 --> 00:18:17.120
light for the windows phone.
So it's called a composite

355
00:18:17.120 --> 00:18:19.820
or a thread and its
only job is to do

356
00:18:19.820 --> 00:18:23.480
really smooth animations. And it's
separate from that user interface

357
00:18:23.510 --> 00:18:27.190
thread, which is all there.
Wasn't silver light. So, so

358
00:18:27.410 --> 00:18:29.920
we've got that much, right?
You asked red composite or

359
00:18:29.950 --> 00:18:33.170
thread and there they're both
sharing that single core in

360
00:18:33.170 --> 00:18:38.030
the phone. However, they both
have very different purposes And

361
00:18:38.030 --> 00:18:41.150
the composite is thread, like
you said, it does. Its

362
00:18:41.150 --> 00:18:45.200
job is to facilitate smooth
animation. Right. But there's specific

363
00:18:45.500 --> 00:18:49.220
kinds of animations that it
will basically offload to the

364
00:18:49.220 --> 00:18:54.650
graphics processor. Yeah. So the
composite or thread, it's the

365
00:18:54.650 --> 00:18:57.050
independent animations. Fred. So that's,
what's going to make your

366
00:18:57.050 --> 00:19:00.260
app look beautiful running at
60 frames a second. And

367
00:19:00.260 --> 00:19:02.840
that's because if you have
any really basic properties, you're

368
00:19:02.840 --> 00:19:06.980
animating capacity, you know, the
scales transforms, rotates and planes.

369
00:19:07.820 --> 00:19:09.140
All of those are going
to be handled on the

370
00:19:09.140 --> 00:19:12.020
composite or thread, keeping the
UI thread just responsive and

371
00:19:12.020 --> 00:19:16.250
ready to do anything else.
Okay. So that means that

372
00:19:16.280 --> 00:19:19.820
you said planes and rotates.
So I can, the animations

373
00:19:19.820 --> 00:19:21.200
that I was talking about
earlier, when I want to

374
00:19:21.200 --> 00:19:25.640
turn a page or rotate
something away, that's all stuff

375
00:19:25.640 --> 00:19:29.060
that the GPU will accelerate
in. And I, if I,

376
00:19:29.060 --> 00:19:30.800
if I do it right
and I do the storyboard

377
00:19:30.800 --> 00:19:33.680
correctly, it shouldn't be an
issue. Great. Yeah. You have

378
00:19:33.680 --> 00:19:36.230
to market it for a
bitmap mode. That's the caching

379
00:19:36.230 --> 00:19:39.080
mode. And once you do
that, we hand off that

380
00:19:39.080 --> 00:19:41.270
texture, you know, to the,
to the GPU and it

381
00:19:41.270 --> 00:19:45.380
just handles everything. So it's
really efficient. Okay. So that's

382
00:19:45.380 --> 00:19:48.080
interesting. So I have, is
this a default or is

383
00:19:48.080 --> 00:19:49.460
this something I have to
go out and, and set

384
00:19:49.460 --> 00:19:55.340
myself this bitmap mode that
you mentioned, There's actually a

385
00:19:55.340 --> 00:19:59.810
visualization setting. You can, there's
a flag of consent. And

386
00:19:59.810 --> 00:20:01.380
so when you run it
on the phone, you'll see

387
00:20:01.400 --> 00:20:04.160
kind of this heat map
and that'll show you, what's

388
00:20:04.160 --> 00:20:08.420
currently cast and what's not,
No, A lot of things

389
00:20:08.420 --> 00:20:11.600
will be set by default
cast mode. If you have

390
00:20:11.600 --> 00:20:14.150
something inside like a list
box, we're going to automatically

391
00:20:14.150 --> 00:20:17.360
add that property whenever it
makes the most sense, but

392
00:20:17.360 --> 00:20:19.280
it's definitely something that you
can optimize in your app

393
00:20:19.280 --> 00:20:22.640
as well. Ah, okay. This
is interesting. So it looks

394
00:20:22.640 --> 00:20:27.170
like it's a application current
yada yada yada enable frame

395
00:20:27.170 --> 00:20:31.190
rate counter. True. And then
it goes in and adds

396
00:20:31.190 --> 00:20:33.500
this kind of cool star
Wars fan. So that's the

397
00:20:33.500 --> 00:20:37.910
one that gives you the
pretty numbers. Then there's also

398
00:20:37.910 --> 00:20:42.560
a separate one, which is
Casper's realizations Cash visualizations. Here

399
00:20:42.560 --> 00:20:45.650
we go. Enable cash realizations
equals true heat map of

400
00:20:45.650 --> 00:20:49.240
textures. That's awesome. Okay. So,
so then when I get

401
00:20:49.240 --> 00:20:52.360
my app mostly working, I
go and I turn this

402
00:20:52.360 --> 00:20:54.790
on and then this will
let me know if there's,

403
00:20:54.910 --> 00:20:57.730
if there's something I'm doing
wrong in case I've made

404
00:20:57.730 --> 00:21:00.880
an animation, that's too complex.
And suddenly the windows phone

405
00:21:00.910 --> 00:21:05.550
GPU is not involved anymore.
Right. Right. I actually turned

406
00:21:05.550 --> 00:21:07.290
them on, on your app
right now and place it

407
00:21:08.490 --> 00:21:11.820
That's okay. Well it'll work
in the emulator. Yeah. Okay.

408
00:21:11.850 --> 00:21:14.850
So let me do that.
I'll go into a, I

409
00:21:14.850 --> 00:21:19.530
guess I go into app
initialized phone application and then

410
00:21:19.530 --> 00:21:24.630
I'll put in application, current
host settings, cash realization, right.

411
00:21:25.470 --> 00:21:28.830
Employee succeeded. Oh, okay. So
I have a list full

412
00:21:28.830 --> 00:21:31.170
of that and everything is
suddenly blue. All of there's

413
00:21:31.170 --> 00:21:34.140
like a blue background about
all of my list items.

414
00:21:35.940 --> 00:21:37.530
And then I click on
them and then yeah. Every,

415
00:21:37.530 --> 00:21:40.260
so everything in my app
is currently blue and I've

416
00:21:40.260 --> 00:21:42.630
got, and I click go
ham everything's blue. What does

417
00:21:42.630 --> 00:21:46.050
that mean? It means that
that current time that was

418
00:21:46.050 --> 00:21:49.200
rendered, we haven't had to
touch the textures again since

419
00:21:49.200 --> 00:21:53.400
then. Yeah. Some textures updated.
Do you actually see it

420
00:21:53.430 --> 00:21:55.350
kind of toggled to the
next color in the series?

421
00:21:56.610 --> 00:21:59.880
Okay. So blue, is it
blue is good or bad?

422
00:22:00.630 --> 00:22:02.400
It was indifferent. So it's
just going to tackle through

423
00:22:02.400 --> 00:22:06.750
colors. Okay. And as I
move around, everything is staying

424
00:22:06.810 --> 00:22:09.570
is staying blue. It's not
actually like flashing if you

425
00:22:09.570 --> 00:22:11.760
don't see it going from
blue to red to green.

426
00:22:12.210 --> 00:22:14.280
And that means that you're
totally cast right now and

427
00:22:14.280 --> 00:22:17.220
you're doing well. Okay. Cool.
All right. Good. Well then

428
00:22:17.220 --> 00:22:20.550
I'm getting lucky with my
defaults then. Yeah. We're trying

429
00:22:20.550 --> 00:22:22.260
to make it, you know,
a good experience for you,

430
00:22:22.260 --> 00:22:24.180
but you should be aware
of it once you start

431
00:22:24.180 --> 00:22:26.910
tuning it out. Okay. So
then what is, what is

432
00:22:26.910 --> 00:22:30.150
fill rate? I know that
this comes up in, in

433
00:22:30.150 --> 00:22:34.530
gaming. Yeah. So on the
far right of the screen,

434
00:22:34.530 --> 00:22:36.840
do you currently have a
bunch of numbers? No, I

435
00:22:36.840 --> 00:22:38.850
don't have any numbers here.
So this should be the

436
00:22:38.850 --> 00:22:41.910
frame rate. All right. Let
me turn that on. So

437
00:22:41.910 --> 00:22:47.220
that's enable frame rate, counter
equals true. Put that in

438
00:22:47.610 --> 00:22:53.430
and rerun. It starts up
again. And the app runs.

439
00:22:53.430 --> 00:22:56.760
Everything is blue and then,
Oh, okay. So in the

440
00:22:56.760 --> 00:23:00.000
far right, it's kind of
hard to see. Let me

441
00:23:00.030 --> 00:23:04.260
zoom in here. I've got
a bunch of zeros that

442
00:23:04.260 --> 00:23:08.220
are red and yeah. Loose.
It looks like a weird

443
00:23:08.220 --> 00:23:13.710
font. It's like a star
Wars font game. Well, do

444
00:23:13.710 --> 00:23:14.970
you want to walk through
with all these members? I

445
00:23:14.970 --> 00:23:17.280
mean, Yeah, sure. What do
we got here? Oh, one

446
00:23:17.280 --> 00:23:20.970
of them just jumped. So
the first one is render

447
00:23:20.970 --> 00:23:25.260
thread. That's the compositor. And
that's the one that we

448
00:23:25.260 --> 00:23:28.050
want to have at 60
all the time. Yeah. This

449
00:23:28.050 --> 00:23:32.400
one says 70, 71, 69,
66. So that's frames per

450
00:23:32.400 --> 00:23:36.240
second For a second. And
in the emulator, a lot

451
00:23:36.240 --> 00:23:38.250
of times it might be
over 60, but on the

452
00:23:38.250 --> 00:23:43.160
phone you'll be capped at
60. Okay. And one thing

453
00:23:43.190 --> 00:23:45.560
I noticed, if the number
says zero or number doesn't

454
00:23:45.560 --> 00:23:48.260
change, that's just means there's
no animations happening right now.

455
00:23:48.380 --> 00:23:52.760
So there's nothing, there's no
work happening. Okay. Second thread

456
00:23:52.760 --> 00:23:56.310
is the UI thread, the
user interface thread. Okay. And

457
00:23:56.310 --> 00:23:59.710
that was also 60 on
this machine. Yeah. And so

458
00:23:59.710 --> 00:24:02.470
that's the most important thread
for Silverlight that's where all

459
00:24:02.470 --> 00:24:06.430
the events are processed, touched
and adjusters, all of your

460
00:24:06.430 --> 00:24:08.890
events and code for data
binding everything's on the UI

461
00:24:08.890 --> 00:24:10.630
thread. So that's why you
want to make sure that

462
00:24:10.630 --> 00:24:12.520
that thread is as free
as possible to do that

463
00:24:12.520 --> 00:24:14.920
work. Okay. So then if
I see a drop in

464
00:24:14.920 --> 00:24:18.160
that thread, then, then I'm
doing something wrong. Well, you're

465
00:24:18.160 --> 00:24:19.720
going to see a drop
in that thread, you know,

466
00:24:19.720 --> 00:24:22.960
regularly. Cause there's, there's a
garbage collector. That's going to

467
00:24:22.960 --> 00:24:25.180
be kicked off from time
to time. There's data binding.

468
00:24:25.180 --> 00:24:27.340
It's just, it's going to
happen. Just realize that if

469
00:24:27.340 --> 00:24:29.560
it drops below 20 that
you know, you'll start to

470
00:24:29.560 --> 00:24:34.180
see a degradation in performance.
Ah, okay. Okay. Okay. So

471
00:24:34.180 --> 00:24:36.190
I just deployed it to
the app to the, to

472
00:24:36.190 --> 00:24:37.900
the phone rather. So I'm
actually, I'm on an actual

473
00:24:37.900 --> 00:24:42.340
phone now and I'm moving
it around 59, 60, 56,

474
00:24:42.340 --> 00:24:47.440
69, 69. I is not
going to really see a

475
00:24:47.440 --> 00:24:49.870
huge difference between 50 and
60. So those are great

476
00:24:49.870 --> 00:24:54.430
numbers. Okay. All right. So
that's the first two. So

477
00:24:54.430 --> 00:24:59.470
you've got the render frames
per second, the user interface

478
00:24:59.470 --> 00:25:04.720
frames per second, then Texture
memory usage. So that one's

479
00:25:04.720 --> 00:25:09.370
about 5,000 right now. Okay.
You know, that one, that

480
00:25:09.370 --> 00:25:11.170
number is going to change
all the time and that's

481
00:25:11.170 --> 00:25:13.540
just kind of an FYI
of how much memory is

482
00:25:13.540 --> 00:25:16.870
being used. And I don't
know the exact, the memory

483
00:25:16.870 --> 00:25:18.670
limits on your device, but
it's just something you can

484
00:25:18.670 --> 00:25:22.570
see to recognize, have huge
textures. And yes. Sounds like

485
00:25:22.570 --> 00:25:23.770
something I would care about
if I was doing a

486
00:25:23.770 --> 00:25:28.780
game. Yeah, totally. The next
one is the surface counter

487
00:25:29.680 --> 00:25:33.550
And that one's 28. Okay.
So that, one's actually the

488
00:25:33.550 --> 00:25:36.580
number of textures that we're
storing and giving to the

489
00:25:36.580 --> 00:25:39.820
GPU. So it's a good
number to have. If it's

490
00:25:39.820 --> 00:25:42.130
really low, you need to
do some additional work to

491
00:25:42.130 --> 00:25:47.250
cache, more UI elements. Okay.
And then the next dominant

492
00:25:47.250 --> 00:25:52.120
number is one That's the
intermediate texture count. Okay. So

493
00:25:52.120 --> 00:25:54.490
that's, that's just kind of
telling you how many different

494
00:25:54.490 --> 00:25:58.000
layers are we having to
composite. So if you imagine

495
00:25:58.000 --> 00:26:00.520
having kind of your in
sitting in Photoshop, you have

496
00:26:00.520 --> 00:26:02.620
three different layers and they
all kind of overlap one

497
00:26:02.620 --> 00:26:05.680
another. We might actually have
to generate a couple of

498
00:26:05.680 --> 00:26:08.920
intermediate textures in order to
render that on the composter,

499
00:26:08.920 --> 00:26:14.170
Fred. So the lower that
number, the better. Okay. And

500
00:26:14.170 --> 00:26:17.410
then the last one is
fill rate, counter, according to

501
00:26:17.410 --> 00:26:24.580
the book here. Super important
number. Okay. So what's your

502
00:26:24.580 --> 00:26:28.300
number right there on the
phone 0.5. Oh, you're doing

503
00:26:28.300 --> 00:26:30.820
great as I scroll around.
So it does that, is

504
00:26:30.820 --> 00:26:33.610
that, let me guess, is
that telling me like I'm

505
00:26:33.610 --> 00:26:37.600
feeling I'm basically redrawing half
the screen. Yeah, exactly. It's

506
00:26:37.600 --> 00:26:40.540
telling you how many screens
are currently being drawn and

507
00:26:40.540 --> 00:26:43.800
anything under two is good.
Oh wow. Okay. How many

508
00:26:43.800 --> 00:26:46.500
screens Were being drawn per
frame? So, so how many

509
00:26:46.500 --> 00:26:50.370
like, like if of, so
the value one value of

510
00:26:50.370 --> 00:26:53.810
one would mean I redrew
the entire screen. Yeah. Yeah.

511
00:26:53.840 --> 00:26:55.460
Let's say you had just
a picture that takes up

512
00:26:55.460 --> 00:26:58.610
the exact screen resolution of
the device. That's going to

513
00:26:58.610 --> 00:27:01.160
be 1.0 and that's fine.
That's really easy for the

514
00:27:01.160 --> 00:27:04.490
hardware handle. But if you
also had, let's say another

515
00:27:04.490 --> 00:27:07.490
picture you wanted to slide
in smoothly. It's probably sitting

516
00:27:07.490 --> 00:27:09.500
a little bit to the
right of your screen and

517
00:27:09.500 --> 00:27:11.480
all of a sudden you'll
have a full count of

518
00:27:11.480 --> 00:27:13.970
2.0 because you've got that
whole other picture ready to

519
00:27:13.970 --> 00:27:16.850
come in. I see. So
it's going to start getting

520
00:27:16.850 --> 00:27:20.090
really interesting when I start
doing my animations later. Yeah,

521
00:27:20.090 --> 00:27:22.160
definitely because you know, if
you want it to be

522
00:27:22.160 --> 00:27:25.010
smooth, you're going to want
to have off screen visuals.

523
00:27:25.730 --> 00:27:27.350
They might not be currently
in the screen, but they're

524
00:27:27.350 --> 00:27:29.780
part of that fill rate.
Cause there's a Silverlight layout

525
00:27:29.780 --> 00:27:32.180
pass happening. We have to
know how large the item

526
00:27:32.180 --> 00:27:33.920
is, how to fit it
into the whole scheme of

527
00:27:33.920 --> 00:27:37.520
things. So it's pretty important
to keep that number monitored

528
00:27:37.520 --> 00:27:40.940
well, because once it's over
about 2.5, you'll probably see

529
00:27:40.940 --> 00:27:43.520
your frame rates start to
drop from 60 frames down

530
00:27:43.520 --> 00:27:46.190
to maybe 30 frames a
second and it'll get worse.

531
00:27:46.190 --> 00:27:50.900
The more, you know, that's
on there. Okay. One of

532
00:27:50.900 --> 00:27:52.520
the things that I, I
spent a lot of time

533
00:27:52.520 --> 00:27:55.970
doing in the, in the
early couple of hours of

534
00:27:55.970 --> 00:27:59.090
starting this application was I
ran around looking for images.

535
00:27:59.570 --> 00:28:03.170
I wanted to, you know,
make my little application bar

536
00:28:03.170 --> 00:28:06.170
have cool images. So I
went around and found all

537
00:28:06.170 --> 00:28:10.130
of these different images and
they're all transparent PNGs. But

538
00:28:10.130 --> 00:28:12.590
then I noticed that the
splash screen is a JPEG.

539
00:28:13.220 --> 00:28:16.040
Why should I use, I
mean, I like PNGs. They

540
00:28:16.040 --> 00:28:19.070
have transparency. They're really clear,
but they're also really big.

541
00:28:19.640 --> 00:28:22.580
Why should I use a
PNG over a JPEG on

542
00:28:22.580 --> 00:28:24.680
the phone? And how do
I keep things from being

543
00:28:24.680 --> 00:28:28.880
really, you know, Jay Peggy?
Yeah. Well, that's, you know,

544
00:28:28.880 --> 00:28:31.340
that's kind of part of
why we hire designers because

545
00:28:31.340 --> 00:28:35.360
they know what they're doing
and there's huge performance differences

546
00:28:35.360 --> 00:28:38.540
between the two. So we
can, you know, it's really

547
00:28:38.540 --> 00:28:41.210
easy for the computer to,
you know, to rasterize that

548
00:28:41.210 --> 00:28:44.240
JPEG and get it up
to the graphics unit. The

549
00:28:44.240 --> 00:28:48.710
P and G is going
to take more work. Okay.

550
00:28:49.130 --> 00:28:51.290
It's kind of this delicate
balance. You need to walk,

551
00:28:51.320 --> 00:28:53.600
you know, if you want
transparency, obviously you need that

552
00:28:53.600 --> 00:28:56.330
PNG. And so a lot
of your icons are probably

553
00:28:56.330 --> 00:28:58.910
going to be PNGs, but
for your splash screen, we

554
00:28:58.910 --> 00:29:01.280
want your app to start
as soon as possible. So

555
00:29:01.290 --> 00:29:04.250
JPEG says, Hey, let's do
the least work we can

556
00:29:04.250 --> 00:29:06.140
to get that splash screen
shown so we can do

557
00:29:06.140 --> 00:29:09.200
the real work in the
background. I see, I see

558
00:29:09.950 --> 00:29:14.450
that currently my application is
a black background with white,

559
00:29:15.140 --> 00:29:17.300
but I thought it would
be cool to switch back

560
00:29:17.300 --> 00:29:20.690
and forth between a black
background and white text and

561
00:29:20.690 --> 00:29:23.180
a white background and black
text. I'm not sure whether

562
00:29:23.180 --> 00:29:25.640
that's something that people are
gonna want to do. And

563
00:29:25.640 --> 00:29:29.300
there's some interesting discussions on
different blogs about whether or

564
00:29:29.300 --> 00:29:33.860
not you should have dark
images and light images. A

565
00:29:33.860 --> 00:29:36.590
lot of people are saying
that you should take your,

566
00:29:36.630 --> 00:29:39.320
your, your, your images. Like
I've got my transparent PNG

567
00:29:39.320 --> 00:29:43.660
with my white text it's
background as is transparent. And

568
00:29:43.660 --> 00:29:46.720
then just do the work
of the, we, you know,

569
00:29:46.720 --> 00:29:49.810
the mirroring the inverting rather,
and switching it to a

570
00:29:50.530 --> 00:29:53.650
lack on white and then
compiling in those resources. So

571
00:29:53.650 --> 00:29:56.950
the application would be slightly
larger, but I've done the

572
00:29:56.950 --> 00:30:00.580
I've done the work. However,
you know, programmers are always

573
00:30:00.580 --> 00:30:05.260
looking to keep from repeating
yourselves. And some guys have

574
00:30:05.260 --> 00:30:08.560
said, no, no, you should
just have one, one resource

575
00:30:08.560 --> 00:30:11.350
for all of your, your,
your pretty buttons. And then

576
00:30:11.350 --> 00:30:13.960
use them some kind of
a mask to do the

577
00:30:13.960 --> 00:30:17.650
inverting at runtime. And then
another guy comes in and

578
00:30:17.650 --> 00:30:21.550
says, no, no, no using
PNGs or for, for patches,

579
00:30:21.880 --> 00:30:24.760
you should use everything in
XAML. You should take your

580
00:30:24.760 --> 00:30:27.850
paths directly from illustrator or
blend and you should paste

581
00:30:27.850 --> 00:30:30.160
them in there. And you
should draw all of your

582
00:30:30.160 --> 00:30:34.480
buttons manually that way they're
vectors and they scale, and

583
00:30:34.480 --> 00:30:37.030
you can switch them back
and forth. Now, I don't

584
00:30:37.030 --> 00:30:40.990
know, I don't know much,
but it seems to me

585
00:30:41.470 --> 00:30:45.070
that I should put that
work up front and actually

586
00:30:45.070 --> 00:30:47.470
make these PNGs separately. Even
though it makes the app

587
00:30:47.500 --> 00:30:53.470
slightly larger, I'm doing some
processing, some CPU work now

588
00:30:54.430 --> 00:30:56.650
so that no one ever
has to do it. And

589
00:30:56.650 --> 00:30:59.770
what these other guys are
proposing with the masking and

590
00:30:59.770 --> 00:31:02.050
doing the work of inverting,
all of this stuff and,

591
00:31:02.050 --> 00:31:06.250
or rest rationalizing everything themselves.
They're effectively saying, I want

592
00:31:06.250 --> 00:31:08.140
millions of phones to do
the work that I wasn't

593
00:31:08.140 --> 00:31:12.280
going to do upfront. So
settle a bet for me.

594
00:31:12.280 --> 00:31:13.900
And tell me what you
think is just your opinion.

595
00:31:14.970 --> 00:31:17.580
You know what, it's, it's
really a continuum. So I

596
00:31:17.580 --> 00:31:21.750
think everyone wins at this
bet maybe, but man, we

597
00:31:21.750 --> 00:31:24.330
keep saying that, you know,
Azure and the whole cloud

598
00:31:24.480 --> 00:31:27.060
is there to do really
hard, really heavy lifting because

599
00:31:27.060 --> 00:31:29.820
the cloud is just really
powerful. Don't do that on

600
00:31:29.820 --> 00:31:33.360
the phone, do your crazy
processing there. It doesn't apply

601
00:31:33.360 --> 00:31:36.150
to images. Obviously I'm not
going to rasterize my image

602
00:31:36.150 --> 00:31:39.840
and insurer at startup, but
the messages, if you can

603
00:31:39.840 --> 00:31:42.210
sit on your computer, you
know, your eight core computer,

604
00:31:42.210 --> 00:31:45.180
there are six scores and
you can generate those PNGs.

605
00:31:45.720 --> 00:31:47.670
That's just gonna be the
right call, I think in

606
00:31:47.670 --> 00:31:53.070
most cases. Okay. So it
sounds like doing a mask

607
00:31:53.100 --> 00:31:58.080
and some, some image processing
at startup, just because you're,

608
00:31:58.080 --> 00:32:01.530
you don't want two copies
of images in your application

609
00:32:03.060 --> 00:32:05.490
is, is as a better,
is a better strategy. Just

610
00:32:05.490 --> 00:32:09.090
seems to me that the
work that it would be

611
00:32:09.090 --> 00:32:11.010
required, you'd have to do
that every single time. Right.

612
00:32:11.010 --> 00:32:13.050
Or you'd have to have
the, you have to save

613
00:32:13.050 --> 00:32:15.210
them, I guess you could
cash them. Yeah. You can

614
00:32:15.210 --> 00:32:17.880
always put them in isolated
storage, but that is additional

615
00:32:17.880 --> 00:32:21.240
work. So, you know, there's
still reasons to use AML

616
00:32:21.240 --> 00:32:24.000
as well though. You know,
the phone has the accent

617
00:32:24.000 --> 00:32:27.780
color. So I think it's
blue by default. And so

618
00:32:27.780 --> 00:32:30.390
if you change that to
pink or green, if you're

619
00:32:30.390 --> 00:32:32.880
using XAML, it can actually
pick up that color and

620
00:32:32.880 --> 00:32:36.300
use that in your house.
Oh, that's an interesting point

621
00:32:36.300 --> 00:32:38.850
too. I have a little
thing in my application that

622
00:32:38.850 --> 00:32:41.680
is unread kind of a
button right now. It's a,

623
00:32:41.740 --> 00:32:43.880
a little image that sits
in a column inside of

624
00:32:43.880 --> 00:32:45.860
my list that tells you
whether or not something has

625
00:32:45.860 --> 00:32:48.740
been read or not. And
I've gone back and forth

626
00:32:48.740 --> 00:32:51.140
about using the accent color,
but currently it's a PNG,

627
00:32:51.890 --> 00:32:54.350
but it's just a PNG
of a circle with kind

628
00:32:54.350 --> 00:32:57.160
of a yin yang thing.
Well, that's really easy to

629
00:32:57.160 --> 00:32:59.860
do in XAML. And if
you haven't been mapped cast,

630
00:32:59.890 --> 00:33:02.440
it's going to be quick
to do I see, and

631
00:33:02.440 --> 00:33:04.480
then is it a bitmap
cash? Something that, so I

632
00:33:04.480 --> 00:33:06.850
have like an image right
now. I have my list

633
00:33:06.850 --> 00:33:10.930
box and inside it is
my, my open bracket image

634
00:33:10.990 --> 00:33:13.330
and I just have to
go and say cash mode

635
00:33:13.330 --> 00:33:19.480
equals Equals bitmap. Gosh. Yeah.
Okay. I see. And then,

636
00:33:19.480 --> 00:33:21.580
then, then by default things,
aren't cast because you want

637
00:33:21.580 --> 00:33:26.260
to take control of that,
You know, by default many

638
00:33:26.260 --> 00:33:28.930
things aren't cached, but once
you're in a scrolling container

639
00:33:28.990 --> 00:33:31.660
or a list box will,
will actually automatically apply it.

640
00:33:31.660 --> 00:33:36.640
If it makes sense. That's
interesting. Is, is this something

641
00:33:36.640 --> 00:33:39.040
that I should be thinking
about proactively or should I,

642
00:33:39.340 --> 00:33:41.440
from a, from a larger
perspective, should I just make

643
00:33:41.440 --> 00:33:44.410
my app and then make
my app fast? Or should

644
00:33:44.410 --> 00:33:47.230
I be thinking about performance
all the time? I think

645
00:33:47.260 --> 00:33:49.840
you need to think about
performance from time to time,

646
00:33:49.840 --> 00:33:52.600
but make your app first.
And as long as you've

647
00:33:52.600 --> 00:33:55.930
at least reviewed some of
these documents, you're cognizant of,

648
00:33:55.990 --> 00:33:57.970
you know, what should I
be doing with these graphics?

649
00:33:58.480 --> 00:34:00.340
And I think you'll be
fine to just from time

650
00:34:00.340 --> 00:34:02.500
to time run your app
and think about it rather

651
00:34:02.500 --> 00:34:06.520
than just not thinking about
it. You can sleep fine

652
00:34:06.520 --> 00:34:09.250
at night. Yeah. I mean,
I guess, like I said

653
00:34:09.250 --> 00:34:11.320
before, if I'm making a
game and I really care

654
00:34:11.320 --> 00:34:13.540
about frame rate, that's important,
but in this case here,

655
00:34:13.540 --> 00:34:15.550
it's going to be kind
of text boxes over data

656
00:34:15.580 --> 00:34:17.650
and I'm going to be
processing stuff. It seems to

657
00:34:17.650 --> 00:34:21.340
me like the performance on
the animation side is something

658
00:34:21.340 --> 00:34:23.230
that I'm going to be
able to figure out. And

659
00:34:23.230 --> 00:34:26.440
I could modify a different
elements by marking them as

660
00:34:26.440 --> 00:34:30.280
caching. And I can experiment
with my different animation to

661
00:34:30.280 --> 00:34:34.240
make sure I can pick
a smooth one. But these

662
00:34:34.240 --> 00:34:35.840
two threads that you talked
about, that main thread and

663
00:34:35.840 --> 00:34:37.690
the composer thread I can,
I have, I can have

664
00:34:37.690 --> 00:34:40.080
other threads that I could
fire off background threads and

665
00:34:40.180 --> 00:34:42.850
go off to the network
and download things while these

666
00:34:42.850 --> 00:34:47.350
animations are happening. Yeah, yeah,
definitely. So you always want

667
00:34:47.350 --> 00:34:50.440
to do like heavy parsing
of Jason or XML and

668
00:34:50.440 --> 00:34:53.650
a background thread because that
keeps that UI thread open

669
00:34:53.650 --> 00:34:56.710
to respond to gestures and,
you know, events that the

670
00:34:56.710 --> 00:34:59.290
LMS has. And so you
use the background threads for

671
00:34:59.290 --> 00:35:02.880
that and the composite threads
running the entire time. It's

672
00:35:02.950 --> 00:35:05.260
giving you a beautiful 60
frames a second in most

673
00:35:05.260 --> 00:35:08.170
cases. And so that's a
great thing that just isn't

674
00:35:08.170 --> 00:35:10.540
in Silverlight and Silverlight, if
you were to block in

675
00:35:10.540 --> 00:35:13.000
the UI thread, you wouldn't
see animation, or you can

676
00:35:13.000 --> 00:35:15.190
actually block the UI thread
now that you'd want to

677
00:35:15.400 --> 00:35:17.680
on the phone and you'd
get your animations are still

678
00:35:17.680 --> 00:35:20.920
smoothly animating in the background.
Oh, really? So even if

679
00:35:20.920 --> 00:35:23.030
I screw up and I,
and I start messing around

680
00:35:23.030 --> 00:35:25.240
on the UI thread, if
I have a new background

681
00:35:25.240 --> 00:35:28.030
things going on, it'll keep
going. Yeah. If you have

682
00:35:28.030 --> 00:35:30.970
your animations done, right. It'll
just be really smooth. And

683
00:35:31.030 --> 00:35:32.230
we've done a lot of
work to make sure that

684
00:35:32.230 --> 00:35:37.620
it looks nice. Okay. And
this background threat, I know

685
00:35:37.620 --> 00:35:39.030
I'm going to fire up
a background thread to go

686
00:35:39.030 --> 00:35:42.410
and fetch my information for
my offline reader as it

687
00:35:42.420 --> 00:35:44.970
should. I just keep, keep
using that thread and do

688
00:35:44.970 --> 00:35:46.980
my parsing when it comes
back or should I fire

689
00:35:46.980 --> 00:35:49.200
off yet another thread and
do parsing as a separate

690
00:35:49.200 --> 00:35:53.180
worker thing? What can I
reuse one It's easy enough

691
00:35:53.180 --> 00:35:55.700
to actually, instead of worrying
about doing threading, just using

692
00:35:55.700 --> 00:35:58.270
the background worker, which is
actually built into the, the

693
00:35:58.370 --> 00:36:00.770
whole platform and it's really
easy. It's got events, you

694
00:36:00.770 --> 00:36:03.320
just kick it off and
it goes, Oh really? Okay.

695
00:36:03.320 --> 00:36:04.700
So I don't need to
think about threading. I just

696
00:36:04.700 --> 00:36:06.890
say background worker, and this
is, this, is this a

697
00:36:06.890 --> 00:36:10.730
controller? This is a, a
helper method. Yeah. It's a

698
00:36:10.730 --> 00:36:13.390
helper that's built into the
platform and it's actually inside

699
00:36:13.400 --> 00:36:16.850
that performance document. There's some
examples of using it. Okay.

700
00:36:17.360 --> 00:36:19.010
This is a, this is
actually a nice document. So

701
00:36:19.010 --> 00:36:21.410
this is version 0.1, the
version that I have here.

702
00:36:21.980 --> 00:36:24.110
So it sounds like it
will get revved if it's

703
00:36:24.110 --> 00:36:29.750
0.1, but it's 26 pages
now, right? Yeah, exactly. You

704
00:36:29.750 --> 00:36:32.300
know, something else I wanted
to say, you were talking

705
00:36:32.300 --> 00:36:37.550
about having resources that were
images, right? Yeah. So resources

706
00:36:37.580 --> 00:36:40.340
are the wrong decision for
windows phone apps. You actually

707
00:36:40.340 --> 00:36:42.350
want to make sure they're
marked as content in your

708
00:36:42.350 --> 00:36:47.570
app. Okay. Why is that?
This is because an embedded

709
00:36:47.570 --> 00:36:50.810
resource is part of that
DLL that's loaded at startup

710
00:36:50.810 --> 00:36:54.140
time and it goes through
the CLR. Okay. So imagine

711
00:36:54.140 --> 00:36:56.450
you had some video of
Brittany Spears in there that was

712
00:36:56.450 --> 00:36:59.330
three megs. You don't want
to load that at startup

713
00:36:59.330 --> 00:37:01.250
time. You want to bring
it on demand only if

714
00:37:01.250 --> 00:37:03.310
you actually want to watch
the video. So you Mark

715
00:37:03.310 --> 00:37:04.880
market as content, and we'll
just pull it in when

716
00:37:04.880 --> 00:37:07.040
you need it. Instead of
every time your app starts.

717
00:37:09.380 --> 00:37:11.660
This is interesting because actually
I'm looking in my images

718
00:37:11.660 --> 00:37:14.630
here and I have three
or four of them marked

719
00:37:14.630 --> 00:37:19.070
as resource. So this is
interesting. The, the new images

720
00:37:19.070 --> 00:37:21.440
that I added to my
list are marked as resource.

721
00:37:22.130 --> 00:37:26.330
Now, if I go over
into my XAML, I refer

722
00:37:26.330 --> 00:37:30.440
to some of these images
with a forward slash, and

723
00:37:30.440 --> 00:37:33.290
then later on a little
differently, is there a particular

724
00:37:33.290 --> 00:37:35.990
way to refer to something
as content versus as a,

725
00:37:36.260 --> 00:37:40.850
a resource It's actually inside
those animal? The, if it's

726
00:37:40.850 --> 00:37:42.650
a content, it'll just look
kind of like a simple

727
00:37:42.650 --> 00:37:45.500
UI. And if it's a
resource, you'll see some other

728
00:37:45.500 --> 00:37:50.510
crazies and you know, there's
component text in there. And

729
00:37:50.510 --> 00:37:52.970
so it's really less about
those animal experience. It's more

730
00:37:52.970 --> 00:37:55.820
about making sure that in
the little properties, window and

731
00:37:55.820 --> 00:37:58.820
visual studio, that it's marked,
that that image is kind

732
00:37:58.820 --> 00:38:00.890
of, Okay, so I'll be
able to refer to it

733
00:38:00.890 --> 00:38:03.170
either way. So I've just
switched all of those from

734
00:38:03.170 --> 00:38:05.870
content. That's interesting. I had
a bunch of images that

735
00:38:05.870 --> 00:38:07.640
were set to resource, so
that may have been slowing

736
00:38:07.640 --> 00:38:11.120
my app down a little
bit. Yeah. Very cool. This

737
00:38:11.120 --> 00:38:14.180
is great. Do magic. It's
a lot of things to

738
00:38:14.180 --> 00:38:16.970
know. Well, you know, there's
always a, I call it,

739
00:38:16.970 --> 00:38:20.330
we call that concept count,
right. There's definitely a lot

740
00:38:20.330 --> 00:38:24.200
to know, but I've talked
to, to Pete Brown and

741
00:38:24.200 --> 00:38:26.240
Tim here, it's different guys
that know Silverlight and I've

742
00:38:26.240 --> 00:38:28.880
talked to a bunch of
XAML people who've done server

743
00:38:28.880 --> 00:38:33.260
light, but hadn't done the
phone. And they have said

744
00:38:33.260 --> 00:38:35.980
that it's, if you have
server light skills that you're

745
00:38:35.980 --> 00:38:38.560
going to find it very,
very comfortable. I mean, no

746
00:38:38.560 --> 00:38:41.410
one who knows Silverlight has
complained to me about having

747
00:38:41.410 --> 00:38:43.840
trouble picking up the phone.
So the issues that I'm

748
00:38:43.840 --> 00:38:49.330
having are, are learning about
what, what XAML wants, and

749
00:38:50.110 --> 00:38:52.120
because it's such a small
phone on a small screen

750
00:38:52.120 --> 00:38:55.750
compared to a big, big,
complicated application, I'm finding that

751
00:38:55.750 --> 00:38:57.970
the XAML in my, my
applications is a lot less

752
00:38:57.970 --> 00:39:00.400
scarier than I thought it
was going to be. I

753
00:39:00.400 --> 00:39:04.360
think I've got about 50
lines of XAML so far.

754
00:39:04.510 --> 00:39:06.010
I'm sure it'll get more
when I start adding in

755
00:39:06.010 --> 00:39:09.990
all my, my animations. Yeah.
Well, it's really simple. And

756
00:39:10.200 --> 00:39:12.120
you know, I think even
people that don't know Silverlight

757
00:39:12.420 --> 00:39:14.340
will be amazed at how
easily they can just kinda

758
00:39:14.370 --> 00:39:16.890
start building apps. You know,
if you're a.net developer today,

759
00:39:16.890 --> 00:39:19.080
it's really easy to at
least get started with that

760
00:39:19.080 --> 00:39:22.110
simple app. Yeah. Well, I
want to tell you, I

761
00:39:22.110 --> 00:39:25.470
really enjoyed reading your blog.
I know that your, your

762
00:39:25.470 --> 00:39:27.270
full time job is dev.
You're not in a kind

763
00:39:27.270 --> 00:39:30.900
of evangelist and you're not
know, I guess probably no

764
00:39:30.900 --> 00:39:33.630
bosses care whether you blog
or not, but I really

765
00:39:33.630 --> 00:39:37.140
do enjoy your blog. His
blog is Jeff got wilcox.name.

766
00:39:37.800 --> 00:39:39.840
I'm sure that if you
search for Jeff Wilcox and phone,

767
00:39:40.260 --> 00:39:44.070
you'll find that you've got,
definitely got a knack for

768
00:39:44.070 --> 00:39:46.690
blogging. I really do appreciate,
and I hope that you

769
00:39:46.800 --> 00:39:49.470
continue to find time to
put that information out there.

770
00:39:50.460 --> 00:39:52.770
That will. Thank you. Alright.
Well, this has been another

771
00:39:52.770 --> 00:39:55.800
episode of Hanselminutes and we'll
see you again next week.

