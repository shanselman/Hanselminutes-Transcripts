WEBVTT FILE

1
00:00:00.660 --> 00:00:03.780
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.780 --> 00:00:07.110
they make the show possible.
Today's show is sponsored by

3
00:00:07.110 --> 00:00:11.400
Tellerik create compelling app experiences
across any screen with the

4
00:00:11.400 --> 00:00:16.230
Tellerik platform Telerx end to
end platform. Uniquely combines industry

5
00:00:16.230 --> 00:00:19.950
leading UI tools with cloud
services to simplify the entire

6
00:00:19.950 --> 00:00:24.420
app development cycle Tellerik offers
everything.net developers need to build

7
00:00:24.420 --> 00:00:33.840
quality apps faster. Try it
free at tellerik.com/platform that's tellerik.com/platform

8
00:00:47.190 --> 00:00:52.620
from hanselminutes.com. It's Hanselman. That's
our weekly discussion with web

9
00:00:52.620 --> 00:00:57.060
developer and technologist and Scott
Hanselman. This is Lawrence Ryan announcing

10
00:00:57.060 --> 00:01:00.540
the show number four 85.
In this episode, Scott talks

11
00:01:00.540 --> 00:01:08.340
with Matt Johnson about time.
Hi, this is Scott Hanselman.

12
00:01:08.340 --> 00:01:10.770
This is another episode of
Hansel minutes, and today is

13
00:01:10.770 --> 00:01:13.680
all about time. And I'm
talking with Matt Johnson and

14
00:01:13.680 --> 00:01:15.720
you're up actually in a
very nice studio. You're one

15
00:01:15.720 --> 00:01:17.940
of the few guests I've
had on who has a

16
00:01:17.940 --> 00:01:20.820
nice studio setup. You borrowed
one from channel nine. Yeah,

17
00:01:20.820 --> 00:01:23.640
I'm enjoying the environment here.
They've got a great mic

18
00:01:23.640 --> 00:01:26.370
setup and a good soundproofing
and it's on campus, so

19
00:01:26.370 --> 00:01:30.780
it's awesome. Cool. I appreciate
that. So time you work

20
00:01:30.780 --> 00:01:35.640
on a note, a time
with John skeet, John skeet,

21
00:01:36.000 --> 00:01:37.680
I've had him on the
show a number of times,

22
00:01:37.680 --> 00:01:41.130
and I've talked to him
a number of times. And

23
00:01:41.160 --> 00:01:45.210
would you describe noted time
as being a, is it

24
00:01:45.210 --> 00:01:47.940
a vote of no confidence
against system.date time and the

25
00:01:47.940 --> 00:01:49.950
things around it, or is
it just an improvement on

26
00:01:49.950 --> 00:01:53.910
it? I don't think so.
I think the general idea

27
00:01:53.910 --> 00:01:58.140
is that there are patterns
for the domain of date

28
00:01:58.140 --> 00:02:00.390
and time. I like thinking
about date and time as

29
00:02:00.390 --> 00:02:04.230
a domain problem. Not necessarily
just as data types. Sometimes

30
00:02:04.230 --> 00:02:06.270
they get mixed in with
data types, like, like intern

31
00:02:06.270 --> 00:02:08.550
bullying and so forth. But
really when you think about

32
00:02:08.550 --> 00:02:11.490
how a date relates to
a time relates to a

33
00:02:11.490 --> 00:02:15.150
time and a specific location
relates to an instantaneous point

34
00:02:15.150 --> 00:02:18.160
in time, those things do
make up somewhat of a

35
00:02:18.240 --> 00:02:22.050
complex domain and no time
models that domain exactly as

36
00:02:22.050 --> 00:02:25.620
the domain exists in, in
the natural world where a

37
00:02:25.620 --> 00:02:28.140
system date time is more
of a, you know, some,

38
00:02:28.200 --> 00:02:31.080
some things put into the
framework that help you interact

39
00:02:31.080 --> 00:02:32.510
with that, but you kind
of have to bring that

40
00:02:32.520 --> 00:02:35.970
on your own understanding of
that model. Okay. So it's

41
00:02:35.970 --> 00:02:39.780
about the clarity and the
completeness of the model, which

42
00:02:39.870 --> 00:02:42.870
that completeness doesn't exist kind
of out of the box.

43
00:02:43.330 --> 00:02:47.580
It really doesn't like for
example, one of the first

44
00:02:47.580 --> 00:02:50.220
things we see with eight
time and.net is the system

45
00:02:50.220 --> 00:02:54.480
that daytime class, which is
supposed to be by design

46
00:02:54.480 --> 00:02:57.240
a multipurpose type. It is
a, a date or a

47
00:02:57.240 --> 00:02:59.260
time or a time and
a date or a time

48
00:02:59.260 --> 00:03:02.170
and a date and a
specific location. And, you know,

49
00:03:02.200 --> 00:03:05.590
if you get into software
practices and single responsibility principles,

50
00:03:05.800 --> 00:03:07.900
there's several violations of that,
just in the nature of

51
00:03:07.900 --> 00:03:11.610
that. And is this, do
you think that this is

52
00:03:11.610 --> 00:03:15.090
a mistake, is there is
note a time something that

53
00:03:15.090 --> 00:03:17.160
should have been come up
that the dotnet team should

54
00:03:17.160 --> 00:03:19.020
have come up with or
is this just a matter

55
00:03:19.020 --> 00:03:22.800
of completeness and, you know,
balancing being complete with things

56
00:03:22.800 --> 00:03:25.980
it's a little bit of
both. Some, There are some

57
00:03:25.980 --> 00:03:28.080
things in there that I
would say is a mistake.

58
00:03:28.790 --> 00:03:31.950
There are things like the
daytime kind enumeration that make

59
00:03:32.040 --> 00:03:34.470
working with that class a
little bit tricky. Some of

60
00:03:34.470 --> 00:03:36.840
those things were improved in
the dinette framework with the

61
00:03:36.840 --> 00:03:42.360
daytime offset type. But I
think having the more completeness

62
00:03:42.360 --> 00:03:45.780
as is exactly what the
project's about, it's also about

63
00:03:46.290 --> 00:03:51.030
testability being able to stub
out things like the current

64
00:03:51.030 --> 00:03:55.080
moment in time being able
to interact naturally with other

65
00:03:55.080 --> 00:03:57.930
types of time zones. I'm
not sure if you're aware,

66
00:03:57.930 --> 00:04:02.190
but there, there really are
only two time zone data

67
00:04:02.190 --> 00:04:05.730
sets used in, in modern
computing. One is from Microsoft

68
00:04:05.730 --> 00:04:07.560
and use with times on
info and, and the windows

69
00:04:07.560 --> 00:04:10.530
platform. And the other is
from an open source project

70
00:04:10.800 --> 00:04:14.310
called the T's EDB, which
is now kind of curated

71
00:04:14.310 --> 00:04:16.200
by a Diana, which is
the same group that we

72
00:04:16.200 --> 00:04:19.350
get our IP addresses. Yeah.
I had a lot of

73
00:04:19.350 --> 00:04:22.800
trouble with Clemons Vassar's and
I, when we were working

74
00:04:22.800 --> 00:04:27.990
on DAS blog, somewhere around
2003, we ended up getting

75
00:04:27.990 --> 00:04:30.570
a time zone database and
putting it into the registry

76
00:04:31.200 --> 00:04:33.300
because there was just, there
was just nowhere to find

77
00:04:33.300 --> 00:04:36.630
this information and we needed
a database just as, before

78
00:04:36.630 --> 00:04:38.940
Jason. And it was either
XML files on disc or

79
00:04:38.940 --> 00:04:42.690
registry based stuff. It was
quite a mess. Exactly. And

80
00:04:42.690 --> 00:04:44.760
that's kind of what times
on info does today, is

81
00:04:44.760 --> 00:04:46.230
it, it pulls the data
out of the registry and

82
00:04:46.230 --> 00:04:48.330
it relies on the windows
operating system to provide that

83
00:04:48.330 --> 00:04:52.500
data. Why do you think
it's about the, and I

84
00:04:52.500 --> 00:04:55.080
don't mean to keep picking
on system.date time, but it

85
00:04:55.080 --> 00:05:01.620
is 2015. And when the
date time handling stuff, when

86
00:05:01.620 --> 00:05:03.480
all of that, when this
isn't a daytime type and

87
00:05:03.480 --> 00:05:08.040
with the methods were done
for.net, this was 2002, you

88
00:05:08.040 --> 00:05:10.800
know, is, is there a,
is there a maturity, was

89
00:05:10.800 --> 00:05:13.680
it 13 years that was
required? Or is this just

90
00:05:13.680 --> 00:05:18.060
a matter of what ships
with.net is fine for most

91
00:05:18.060 --> 00:05:20.610
people, but when you start
getting into any kind of

92
00:05:20.850 --> 00:05:23.340
edge cases, you need to
go in and get a

93
00:05:23.340 --> 00:05:28.080
better, a better domain. I
think The original design had

94
00:05:28.080 --> 00:05:30.930
the constraints of that time.
Period. Most people were designing

95
00:05:31.710 --> 00:05:35.460
for local computers on local
desktops, and weren't really thinking

96
00:05:35.460 --> 00:05:38.760
about, you know, how they're
going to interact with people

97
00:05:38.760 --> 00:05:40.020
on the other side of
the world on a regular

98
00:05:40.020 --> 00:05:44.220
basis. We didn't have internet
of things, scenarios and cloud

99
00:05:44.220 --> 00:05:48.090
applications and, and all of
these modern interconnected systems that

100
00:05:48.090 --> 00:05:50.850
we have today. And if
we did the people that

101
00:05:50.850 --> 00:05:53.280
were worried about time in
those domains could kind of

102
00:05:53.280 --> 00:05:57.090
specialize in that. But I
think nowadays time is kind

103
00:05:57.140 --> 00:06:00.640
introduced into almost every problem
that has to do with,

104
00:06:00.640 --> 00:06:05.720
with business or, you know,
anything that's non-trivial has some

105
00:06:05.720 --> 00:06:08.540
element of time to it.
And I think having something

106
00:06:08.570 --> 00:06:11.600
built in it would be
nice. And there are some

107
00:06:11.600 --> 00:06:14.450
improvements happening in an area
I'm helping out a little

108
00:06:14.450 --> 00:06:17.900
bit with the, the core.net
core team. We're doing some

109
00:06:17.900 --> 00:06:20.840
work on the system that
daytime improvements. We've actually got

110
00:06:20.840 --> 00:06:23.630
some stuff going into a
project on GitHub called core

111
00:06:23.630 --> 00:06:27.500
effects lab, and a couple
of things we're introducing, for

112
00:06:27.500 --> 00:06:32.240
example, as, as prototypes would
be a date type, it's

113
00:06:32.270 --> 00:06:34.460
just a date. That's not
a date and time. It's

114
00:06:34.460 --> 00:06:35.930
just a date. Cause there
are a lot of business

115
00:06:35.930 --> 00:06:37.990
cases for just the date.
Yeah. I know. I spend

116
00:06:37.990 --> 00:06:39.850
a lot of time just
carrying date times around at

117
00:06:39.850 --> 00:06:41.950
midnight. And then I have
to say, well, this is

118
00:06:41.950 --> 00:06:45.250
really mean midnight or does
this mean an actual date

119
00:06:46.300 --> 00:06:51.040
by itself? Exactly. And if
you consider that midnight doesn't

120
00:06:51.040 --> 00:06:53.950
exist on every local day,
then your mind just kind

121
00:06:53.950 --> 00:06:57.370
of blows up. For example,
wait a second. What? Yeah.

122
00:06:57.640 --> 00:07:01.270
So, so daylight saving time
is a really interesting problem

123
00:07:01.270 --> 00:07:04.390
with, with date and time,
you know, different parts of

124
00:07:04.390 --> 00:07:07.030
the world in our use
daylight saving time, or don't

125
00:07:07.030 --> 00:07:09.550
use daylight saving time when
they do use it. They

126
00:07:09.550 --> 00:07:13.870
use it with different starting
times, different ending times, different

127
00:07:13.870 --> 00:07:17.830
times of day. And a
really great example is Brazil.

128
00:07:18.070 --> 00:07:21.430
So when Brazil switches for
daylight saving time, they do

129
00:07:21.430 --> 00:07:23.470
it right at the stroke
of midnight. So the clocks

130
00:07:23.470 --> 00:07:28.180
there go from 1159, 59
to 1:00 AM. So there is

131
00:07:28.180 --> 00:07:30.490
no midnight on the day
of the spring forward transition,

132
00:07:32.110 --> 00:07:34.600
which happens in November, by
the way, not in March.

133
00:07:34.840 --> 00:07:36.970
Well, I just assumed that
everyone did at 2:00 AM on

134
00:07:36.970 --> 00:07:40.520
a Sunday. Yeah. That's just
the United States. And actually that

135
00:07:40.540 --> 00:07:42.640
brings up another interesting point
is that when, when we

136
00:07:42.640 --> 00:07:44.710
do the like saving time
in United States, we do it

137
00:07:44.710 --> 00:07:47.470
at 2:00 AM, but we do
it in 2:00 AM, local time

138
00:07:47.470 --> 00:07:50.320
for each time zone separately.
So it's like an accordion

139
00:07:50.320 --> 00:07:52.000
effect. It starts at the
East coast and works its

140
00:07:52.000 --> 00:07:54.820
way to the West coast.
But in Europe they do

141
00:07:54.820 --> 00:07:59.500
it at 1:00 AM UTC. So
the entire European union that

142
00:07:59.500 --> 00:08:02.410
follows that set of rules
transitions at the exact same

143
00:08:02.410 --> 00:08:05.740
moment. So somebody ever asks
you like how many hours

144
00:08:05.740 --> 00:08:09.010
are there between New York and
LA? The answer is, well,

145
00:08:09.010 --> 00:08:13.480
it depends usually three, but
sometimes two, sometimes four. And

146
00:08:13.930 --> 00:08:15.970
that can't be said for
like the one hour difference

147
00:08:15.970 --> 00:08:21.040
between London and Paris. For
example, it's such a, it's

148
00:08:21.040 --> 00:08:24.070
such a rabbit hole to
go down. There is still

149
00:08:24.070 --> 00:08:26.470
today. I use DAS blog
as the example, because the

150
00:08:26.470 --> 00:08:29.320
two major projects that I've
worked on that deal with

151
00:08:29.320 --> 00:08:32.110
daytime was the banking system
that I worked on before

152
00:08:32.110 --> 00:08:34.090
I went to work at
Microsoft and, and DAS blog,

153
00:08:34.780 --> 00:08:39.010
DAS blog to this day
is broken when we fall

154
00:08:39.010 --> 00:08:43.780
back because there's an hour
there where it knows that

155
00:08:43.780 --> 00:08:47.200
it was the future for
a minute and then suddenly

156
00:08:47.200 --> 00:08:49.420
it's not the future anymore.
You know what I mean?

157
00:08:49.420 --> 00:08:51.400
Like it knew that somehow
I have to look into

158
00:08:51.400 --> 00:08:54.640
the details, but basically it
knew that we just backed

159
00:08:54.640 --> 00:08:58.170
up. So for an hour,
every, every year there's a

160
00:08:58.170 --> 00:09:00.900
blue is a yellow screen
of death on my blog,

161
00:09:01.230 --> 00:09:03.150
but it happens at 2:00 AM.
So I don't really sweat

162
00:09:03.150 --> 00:09:06.320
it yeah. Happens between the
hour, the hour between one

163
00:09:06.320 --> 00:09:08.960
and two. And it happens
twice, at least in the

164
00:09:08.960 --> 00:09:12.710
United States. Yeah. But, but that
has been a huge problem

165
00:09:12.740 --> 00:09:18.050
for, for, for me because
everything else works. I just

166
00:09:18.050 --> 00:09:19.670
don't want to anger it
by. Cause I know that

167
00:09:19.670 --> 00:09:20.990
if I try to fix
that bug, it's gonna get

168
00:09:20.990 --> 00:09:23.240
even worse. So one of
the ways that that that

169
00:09:23.360 --> 00:09:28.100
happens in websites is by
people, the developers relying on

170
00:09:28.100 --> 00:09:30.650
times on settings, on the
server, which in my view

171
00:09:30.650 --> 00:09:34.250
is an anti-pattern. You really
should never call daytime.now from

172
00:09:34.250 --> 00:09:37.530
a web application or from
a server application. And you,

173
00:09:37.530 --> 00:09:39.620
you really shouldn't rely on
the times under the server

174
00:09:39.620 --> 00:09:42.380
to be anything in particular,
because you might pick up

175
00:09:42.380 --> 00:09:44.390
that server and move it.
You might have an administrator

176
00:09:44.390 --> 00:09:46.550
go in and change it.
And that's happened on an,

177
00:09:46.550 --> 00:09:49.130
on some pretty large notable
websites, not just smaller projects.

178
00:09:49.700 --> 00:09:51.800
Why, you know, that's a,
that's a really powerful thing.

179
00:09:51.800 --> 00:09:54.590
We should say that again.
You're saying that if your

180
00:09:54.590 --> 00:09:58.250
application relies on the server
being set on a certain

181
00:09:58.250 --> 00:10:02.210
time zone, you're doing it
Wrong. Exactly. He really should

182
00:10:02.720 --> 00:10:05.330
rely only on the service
clock being synchronized and, you

183
00:10:05.330 --> 00:10:08.030
know, make sure you follow
the best practices from a,

184
00:10:08.030 --> 00:10:12.020
an it perspective to have
those clocks synchronized. But the

185
00:10:12.020 --> 00:10:14.060
server should only ask the
clock for a UTC time.

186
00:10:14.480 --> 00:10:16.550
If it's going to need
a local time, it should

187
00:10:16.550 --> 00:10:19.190
know what time zone it
needs to project that into.

188
00:10:19.610 --> 00:10:22.370
And that should come from
the application domain. If you

189
00:10:22.370 --> 00:10:23.960
have a screen somewhere where
the user picks their time

190
00:10:23.960 --> 00:10:26.930
zone, then that's what you
should use. So those, those

191
00:10:27.680 --> 00:10:29.750
understandings of time zones and
what they want, those are

192
00:10:29.750 --> 00:10:34.940
offsets to UTC that you're
storing in your own applications

193
00:10:34.940 --> 00:10:38.180
database, Right? And it's when
you do that, it's important

194
00:10:38.180 --> 00:10:40.490
to store the identifier the
time zone, not just the

195
00:10:40.490 --> 00:10:43.340
offset. I answer a lot
of questions on stack overflow

196
00:10:43.400 --> 00:10:46.100
actually. And I would say
about a third of them

197
00:10:46.130 --> 00:10:49.010
are simply not understanding that
a time zone is not

198
00:10:49.010 --> 00:10:52.400
the same as an offset.
And, and the Pacific time

199
00:10:52.400 --> 00:10:55.280
zone that we're in here
at Microsoft is a good

200
00:10:55.280 --> 00:10:58.370
example of that right now,
where at UTC minus seven,

201
00:10:58.370 --> 00:11:00.920
because daylight saving time is
in effect. But most of

202
00:11:00.920 --> 00:11:03.260
the time we're in UTC
minus eight. So you can't

203
00:11:03.260 --> 00:11:05.000
just take one number and
put it in the database

204
00:11:05.000 --> 00:11:07.280
and say, that's the user's
time zone. But then that

205
00:11:07.280 --> 00:11:09.290
mean that I also can't
what do I put in

206
00:11:09.290 --> 00:11:13.250
the database? Because there's P
D T Pacific daylight time.

207
00:11:13.250 --> 00:11:15.500
And then there's P S
T Pacific standard time. If

208
00:11:15.500 --> 00:11:17.270
I put one of those
in the database, it doesn't

209
00:11:17.270 --> 00:11:20.030
mean something. Yeah, you really
shouldn't put an abbreviation. There

210
00:11:20.030 --> 00:11:23.480
there's too many that are
ambiguous. Like central standard time

211
00:11:23.480 --> 00:11:27.110
is often CST, but CST
could also be China standard

212
00:11:27.110 --> 00:11:30.230
time or Cuba standard time,
or, you know, there's, there's

213
00:11:30.230 --> 00:11:32.810
five of them actually could
be Australian central state. So

214
00:11:32.810 --> 00:11:35.090
do I need to have,
is, is the good, is

215
00:11:35.100 --> 00:11:38.390
the, you know, the unique
ID and a full on

216
00:11:38.390 --> 00:11:41.420
English string. Yeah. So there's,
so that's when you get

217
00:11:41.420 --> 00:11:43.250
into the two different types
of times zones, you have

218
00:11:43.340 --> 00:11:45.620
the ones coming from my
Ana that actually have standardized

219
00:11:45.620 --> 00:11:48.170
names. The Pacific time zone
would be represented by a

220
00:11:48.170 --> 00:11:52.640
location identifier like America slash
Los Angeles. And that is

221
00:11:52.640 --> 00:11:54.730
an exact, that is an
identifier. And you could put

222
00:11:54.730 --> 00:11:57.760
that in your database. If
you're using Dutton it's times

223
00:11:57.760 --> 00:12:00.520
on info with windows times
zones, you actually store the

224
00:12:00.520 --> 00:12:03.700
string Pacific standard time. But
it's important to realize that

225
00:12:03.700 --> 00:12:06.010
it doesn't just mean standard
time. It really means specific

226
00:12:06.010 --> 00:12:09.160
time. And that particular string
doesn't get localized. It doesn't

227
00:12:09.160 --> 00:12:11.710
get changed in different languages.
It's just an identifier to

228
00:12:11.710 --> 00:12:15.540
represent that time zone. Okay.
So the string would be

229
00:12:15.540 --> 00:12:18.660
unique. It might say semantically,
it might, it might appear

230
00:12:18.660 --> 00:12:22.600
to say Pacific standard time,
but it's really just a,

231
00:12:22.600 --> 00:12:25.370
an identifier that I would
then pass into my library

232
00:12:25.500 --> 00:12:27.840
at a time. And then
it would tell me what

233
00:12:27.840 --> 00:12:30.690
the actual time Exactly. As
soon as you apply that

234
00:12:30.690 --> 00:12:34.170
time zone to a particular
moment in time, a particular

235
00:12:34.170 --> 00:12:36.660
UTC moment, then you can
determine whether it's specific or

236
00:12:37.050 --> 00:12:40.560
daylight or Pacific standard. And,
and some of those IDs,

237
00:12:40.620 --> 00:12:43.290
especially on the windows side
are really confusing. So I

238
00:12:43.290 --> 00:12:44.820
tried to pick not to
read too much into it.

239
00:12:45.120 --> 00:12:48.480
Like there's, there's one that's
w dot European standard time.

240
00:12:48.510 --> 00:12:52.010
And that is actually not
Western European time. All those

241
00:12:52.020 --> 00:12:54.480
ones are in central European
time. And then there's like

242
00:12:54.780 --> 00:12:59.130
three different versions of Arab
standard time Arabia, standard time

243
00:12:59.190 --> 00:13:03.090
or Arabian standard time. There's,
there's three different spellings and

244
00:13:03.090 --> 00:13:05.250
they're there in three completely
different parts of the world.

245
00:13:05.250 --> 00:13:07.860
So they are in fact
different. They are different and

246
00:13:07.860 --> 00:13:09.990
they are unique strings. And
the point is just to

247
00:13:09.990 --> 00:13:11.940
not read too much into
the IDs, other than just

248
00:13:11.940 --> 00:13:14.700
know that they represent an
entry in the windows registry.

249
00:13:15.960 --> 00:13:18.990
There have been times in
the past where I have

250
00:13:18.990 --> 00:13:22.230
had to be on calls
and try to debug things.

251
00:13:22.230 --> 00:13:27.090
And the result was that,
you know, the Bangkok servers

252
00:13:27.150 --> 00:13:31.740
time zone got reset and
someone had the remote desktop

253
00:13:31.740 --> 00:13:35.460
into the server and they'll
check the control panel and

254
00:13:35.460 --> 00:13:38.340
switch time zones. You know,
this was 12 years ago,

255
00:13:38.340 --> 00:13:40.380
but I'm ashamed to say
it, you know, I am

256
00:13:40.380 --> 00:13:42.390
very sure that there are
people who are listening right

257
00:13:42.390 --> 00:13:45.990
now, who would say that,
Oh yeah, we definitely know

258
00:13:45.990 --> 00:13:49.470
that the expense reporting server
has to be on New York

259
00:13:49.470 --> 00:13:51.960
time or everything goes to
heck, Right? That's a, that's

260
00:13:51.960 --> 00:13:55.230
a smell of an older
era. And I would say

261
00:13:55.230 --> 00:13:57.270
that if you have that
smell, you should probably hit

262
00:13:57.270 --> 00:14:00.180
it face on, you know,
there is a best practice

263
00:14:00.180 --> 00:14:02.760
to say, well, servers should
be set to UTC. And

264
00:14:02.790 --> 00:14:04.590
that happens in the cloud.
Anything you run in Azure

265
00:14:04.590 --> 00:14:07.950
or an AWS is running
under UTC, but you shouldn't

266
00:14:07.950 --> 00:14:10.230
rely on that. Really. You
should be able to have

267
00:14:10.320 --> 00:14:12.540
your server set to anything
you want to, because it's

268
00:14:12.540 --> 00:14:16.260
really just about what displays
on the local clock, Right?

269
00:14:16.530 --> 00:14:20.130
Cause you say daytime dot
UTC. Now, no matter what

270
00:14:20.130 --> 00:14:23.250
time your PC is on,
as if it's appropriately synchronized,

271
00:14:23.250 --> 00:14:27.180
you will get UTC, right?
And if you use, if

272
00:14:27.180 --> 00:14:29.160
you need that local time
and that there are centers

273
00:14:29.160 --> 00:14:31.020
where you need that local
time, the best thing to

274
00:14:31.020 --> 00:14:33.030
do is use the date
time offset type. So you

275
00:14:33.030 --> 00:14:36.330
can say daytime offset.now. And
instead of just getting the

276
00:14:36.330 --> 00:14:38.340
local time, you get the
local time and you get

277
00:14:38.340 --> 00:14:41.700
its relation to UTC, is
that particular offset for that

278
00:14:41.700 --> 00:14:44.910
particular moment in time. So
that gives you the best

279
00:14:44.910 --> 00:14:47.400
of both. Best of both
worlds, like for example, in

280
00:14:47.400 --> 00:14:50.460
IOT scenarios, if you are
recording temperatures and you need

281
00:14:50.460 --> 00:14:53.440
to know that something is
colder in the morning or

282
00:14:53.450 --> 00:14:57.170
hotter in the afternoon that
morning or afternoon is very

283
00:14:57.170 --> 00:14:59.720
depend on that local time
zone. So it makes sense

284
00:14:59.720 --> 00:15:02.870
to record the local time
and it's offset. If you

285
00:15:02.870 --> 00:15:04.430
don't record the offset, you
can't get back to a

286
00:15:04.430 --> 00:15:06.560
specific moment in time. And
that makes it really difficult

287
00:15:06.560 --> 00:15:09.800
to correlate logs and, you
know, group things and, and

288
00:15:09.800 --> 00:15:12.500
all kinds of other wild
stuff that happens if you,

289
00:15:12.560 --> 00:15:15.250
if you don't know what
time zone it's in, Does

290
00:15:15.250 --> 00:15:17.440
that mean as I start
persisting these things, putting them

291
00:15:17.440 --> 00:15:19.870
in databases or throwing them
around. And Jason, does that

292
00:15:19.870 --> 00:15:23.710
mean that one daytime is
really multiple types? Like there's

293
00:15:23.710 --> 00:15:25.540
the daytime. And then there's
the offset, which is the

294
00:15:25.540 --> 00:15:29.590
second column. Yeah. Well, there's,
there's some databases that support

295
00:15:29.590 --> 00:15:31.930
it naturally like SQL server
actually does have a daytime

296
00:15:31.930 --> 00:15:36.100
offset type as a single
field. Other databases have something

297
00:15:36.100 --> 00:15:38.440
called a time zone or
sorry, they call it a

298
00:15:38.440 --> 00:15:42.580
timestamp with time zone or
timestamp, TZ type. Not everything

299
00:15:42.580 --> 00:15:44.410
has that though. So sometimes
you do have to store

300
00:15:44.410 --> 00:15:48.880
it in two fields. As
far as Jason, Jason actually

301
00:15:48.880 --> 00:15:52.360
doesn't have a date format.
And it's spec like XML,

302
00:15:52.360 --> 00:15:55.480
for example, requires that you
use the ISO 86 Oh

303
00:15:55.490 --> 00:16:00.580
one specification, Jason recommends these,
the ISO 86 11 specifications,

304
00:16:00.610 --> 00:16:02.440
or actually the spec doesn't
say anything about it at

305
00:16:02.440 --> 00:16:04.780
all, but that's the general
best practice, but people have

306
00:16:04.780 --> 00:16:07.540
done interesting things in the
past, you know, in the

307
00:16:07.540 --> 00:16:10.840
past things like data contract,
Jason sterilizer kind of invented

308
00:16:10.840 --> 00:16:13.360
their own format with some
weird slashes. I think you

309
00:16:13.360 --> 00:16:16.540
have a blog post about
that. And, you know, we

310
00:16:16.540 --> 00:16:19.300
try to discourage people from
using that particular format anymore.

311
00:16:20.800 --> 00:16:23.950
There's a lot of, I
think maybe about, I think

312
00:16:23.950 --> 00:16:26.650
when rails came out, a
lot of people started seeing

313
00:16:27.160 --> 00:16:30.790
times that would say a
moment ago or an hour

314
00:16:30.790 --> 00:16:33.010
in the PA, you know,
when did that start and

315
00:16:33.010 --> 00:16:35.950
is that just an aesthetic
choice or It's actually a

316
00:16:35.950 --> 00:16:41.800
really good UX solution to
the time zone problem I'm

317
00:16:42.070 --> 00:16:45.220
thinking about, you know, do
I really want to relate

318
00:16:45.220 --> 00:16:47.920
to people a specific moment
in time and have to

319
00:16:47.920 --> 00:16:49.870
explain time zones to them?
Or do I just want

320
00:16:49.870 --> 00:16:53.800
to let them get, have
some sense of understanding how

321
00:16:53.800 --> 00:16:56.110
much duration has passed since
I posted something on a

322
00:16:56.110 --> 00:16:59.050
website and I encourage that
you do that. There's a

323
00:16:59.050 --> 00:17:01.690
really great library for JavaScript
that does this called moment

324
00:17:01.690 --> 00:17:04.330
dot JS. I'm a contributor
on that library as well.

325
00:17:05.500 --> 00:17:08.710
And it's, it's a free
open source project. We're taking

326
00:17:08.710 --> 00:17:12.550
a poll requests and interacting
with community and, and it

327
00:17:12.550 --> 00:17:15.760
does have a feature for
exactly that for producing a

328
00:17:15.760 --> 00:17:19.270
string like three moments ago
or last week or whatever

329
00:17:19.810 --> 00:17:22.510
it definitely yeah. Adds a
human touch. I've always impressed.

330
00:17:22.510 --> 00:17:25.420
It's such an easy thing
to add, but getting time

331
00:17:25.420 --> 00:17:27.610
right. And doing it in
a human way, adds a

332
00:17:27.610 --> 00:17:30.340
lot. And when you do
that, you really only have

333
00:17:30.340 --> 00:17:33.130
to be concerned with UTC.
You don't have to worry

334
00:17:33.130 --> 00:17:35.740
about, well, what's the user's
time zone and how does

335
00:17:35.740 --> 00:17:37.330
that relate to my time
zone or any of that?

336
00:17:37.600 --> 00:17:39.760
If you know, the UTC
moment that something happened, you

337
00:17:39.760 --> 00:17:41.260
can tell how long ago
that was, no matter where

338
00:17:41.260 --> 00:17:44.650
in the world you are,
Have you always been obsessed

339
00:17:44.650 --> 00:17:46.650
with time or are you
just, is this just a

340
00:17:46.690 --> 00:17:49.120
problem domain that you got
into? Like, how does this,

341
00:17:49.170 --> 00:17:51.900
how did this start for
you? It's a really interesting

342
00:17:51.900 --> 00:17:54.930
story. So yeah, originally I
think I was kind of

343
00:17:54.930 --> 00:17:57.330
naive about time. Like I
th I think the vast

344
00:17:57.330 --> 00:17:59.910
majority of developers are, it's
a really easy thing to

345
00:17:59.910 --> 00:18:02.460
be naive about because as
humans, we, you know, we

346
00:18:02.460 --> 00:18:04.920
grew up learning in preschool
about how the clocks work,

347
00:18:04.920 --> 00:18:07.080
and we kind of think
we know this dummy and

348
00:18:07.080 --> 00:18:09.390
it's not until you get
into computing that you, you

349
00:18:09.390 --> 00:18:12.240
realize there's more to it.
But for me, it happened

350
00:18:12.240 --> 00:18:14.670
because I worked for a
company that built a timekeeping

351
00:18:14.670 --> 00:18:18.300
systems for employees, time and
attendance system. So when it

352
00:18:18.300 --> 00:18:19.830
comes to work and they
clock in and they clock

353
00:18:19.830 --> 00:18:22.170
out, which sounds like you
don't have to deal with

354
00:18:22.170 --> 00:18:25.740
that with time too much
until you consider businesses that

355
00:18:25.740 --> 00:18:28.230
stay open late in the
evening, this might be open

356
00:18:28.260 --> 00:18:32.190
across the daylight, saving time
transition or employees that are

357
00:18:32.190 --> 00:18:34.920
mobile, for example, a trucker
that might clock in, in

358
00:18:34.920 --> 00:18:37.770
one time zone and clock
out and other. So I

359
00:18:37.770 --> 00:18:40.200
started kind of going deep
on the domain of time

360
00:18:40.200 --> 00:18:43.500
after running into those problems.
And I kind of found

361
00:18:43.500 --> 00:18:48.600
the solutions widely applicable to,
to many domains And that

362
00:18:49.180 --> 00:18:50.720
this wasn't like you were
as a kid and you

363
00:18:50.720 --> 00:18:54.200
always had a watch or
there's no background story like

364
00:18:54.200 --> 00:18:58.370
that. Well, I know my,
my first basic program on

365
00:18:58.370 --> 00:19:01.940
a <inaudible> a computer camp
was a ticking clock. So

366
00:19:01.940 --> 00:19:04.550
there you go. No, I
don't feel so bad. Yeah.

367
00:19:05.420 --> 00:19:10.910
Now there is a, a
blog post called common anti-patterns

368
00:19:10.940 --> 00:19:15.320
in daytime for.net developers. And
I'll want to run through

369
00:19:15.320 --> 00:19:17.450
those. I think this is
your blog. Yeah. So that

370
00:19:17.450 --> 00:19:21.650
should be uncoated. matt.com. Yeah.
Code of Matt. So when

371
00:19:21.830 --> 00:19:25.070
we talked about this, when
measuring human activity, right, you

372
00:19:25.070 --> 00:19:28.730
always want to use UTC
now for your, for your

373
00:19:28.730 --> 00:19:34.100
offsets, right? You never do
math with, with daytime.now. Exactly.

374
00:19:34.100 --> 00:19:36.470
And if you do.net, we'll
get it wrong. When you

375
00:19:36.470 --> 00:19:39.170
cross one of those daylight
saving time transitions, even though

376
00:19:39.170 --> 00:19:41.360
it's got that date time
kind local, it doesn't pay

377
00:19:41.360 --> 00:19:44.330
attention to it when it's
adding and subtracting time. Yup.

378
00:19:44.420 --> 00:19:47.540
I've totally, totally had that
happen. You, you store something,

379
00:19:47.900 --> 00:19:51.950
time goes back an hour
and then you suddenly get

380
00:19:51.950 --> 00:19:54.500
weird results negative at times,
or all sorts of things

381
00:19:54.500 --> 00:20:00.920
like that. Right. And then
using daytime.now for computational activity,

382
00:20:01.010 --> 00:20:04.010
right? My recommendation there is
don't use daytime at all.

383
00:20:04.490 --> 00:20:06.920
Donna has this really great
class called the stopwatch. It's

384
00:20:06.920 --> 00:20:11.030
under the system diagnostics, namespace,
and this exposes a different

385
00:20:11.030 --> 00:20:13.550
part of the hardware on
your computer, which is more

386
00:20:13.550 --> 00:20:17.750
suited for measuring durations of
things. Anything that time you're

387
00:20:17.750 --> 00:20:20.510
profiling some coat and saying,
I need to know how

388
00:20:20.510 --> 00:20:22.700
long that took to run.
You really don't want to

389
00:20:22.700 --> 00:20:25.160
introduce date, time, use a
stopwatch. It's much more liable.

390
00:20:25.970 --> 00:20:29.090
And you mentioned Clock drift.
That seems like computers are

391
00:20:29.090 --> 00:20:31.130
really fast and do all
sorts of amazing things, but

392
00:20:31.130 --> 00:20:33.800
they still fall out of
time alignment. They do actually

393
00:20:33.800 --> 00:20:38.840
align. Is that okay? Well,
because the way that drift

394
00:20:38.840 --> 00:20:42.470
happens, I mean, yeah, drift
happens, but there's a bumper

395
00:20:42.470 --> 00:20:46.280
sticker for you. The way
that that happens is the,

396
00:20:46.340 --> 00:20:49.240
the oscillators on the computer
can only be precise to,

397
00:20:49.870 --> 00:20:53.770
to a certain degree. And
in most cases, it's about

398
00:20:53.770 --> 00:20:56.590
10 milliseconds. So a real
time clock when you call

399
00:20:56.680 --> 00:20:59.500
the time.now on, on a
computer is only precise about

400
00:20:59.500 --> 00:21:04.990
10 milliseconds, but that can
change over time. It will

401
00:21:04.990 --> 00:21:07.750
go out of alignment. And
that just kind of happens

402
00:21:07.750 --> 00:21:10.930
naturally, if you think about
relativity and the whole idea

403
00:21:10.930 --> 00:21:14.710
that not everybody has the
same perspective of time, computers

404
00:21:14.710 --> 00:21:17.350
are constantly trying to reconcile
that. And a lot of

405
00:21:17.350 --> 00:21:19.200
it also just comes down
to the quality of, of

406
00:21:19.330 --> 00:21:23.020
the actual components on the
motherboard. So yeah, there's, there's

407
00:21:23.020 --> 00:21:25.270
routines in the operating system
to watch for the clock

408
00:21:25.270 --> 00:21:28.090
drifting. And as it does,
it makes corrections for it.

409
00:21:29.730 --> 00:21:33.540
Your third eye pattern basically
says, don't use the timezone

410
00:21:33.540 --> 00:21:36.750
class. Like you just assist
them dot time zone, go

411
00:21:36.750 --> 00:21:38.610
and do a search and
replace right now. You should

412
00:21:38.610 --> 00:21:41.160
not be. Yeah. So when
you were looking at, or

413
00:21:41.160 --> 00:21:44.340
when you were asking about
mistakes and the.net framework, this

414
00:21:44.340 --> 00:21:47.430
was one of them, the
times on class was any

415
00:21:47.430 --> 00:21:49.710
time zone, as long as
it's yours, you know, like

416
00:21:49.710 --> 00:21:53.160
any color, as long as
it's black and not only

417
00:21:53.160 --> 00:21:55.950
that, but it didn't actually
work with the times when

418
00:21:56.040 --> 00:21:59.760
the system had properly. So
you may know that in

419
00:21:59.790 --> 00:22:03.570
2007, the United States changed its
daylight, saving time rules, the

420
00:22:03.570 --> 00:22:05.370
times and classes and aware
of that change. If you

421
00:22:05.370 --> 00:22:07.230
pull out a date before,
then it'll still just use

422
00:22:07.230 --> 00:22:10.170
the current set of rules.
Not only that, but it's

423
00:22:10.170 --> 00:22:13.770
actually gone. When you look
at.net core, they decided not

424
00:22:13.770 --> 00:22:16.290
to move forward with it.
And that's a good thing

425
00:22:16.290 --> 00:22:18.510
because pretty much anything the
time zone class can do

426
00:22:18.510 --> 00:22:21.180
the times on info class
can do better. Okay. So

427
00:22:21.180 --> 00:22:24.750
time, time zone info is
kind of time zone edX.

428
00:22:24.750 --> 00:22:28.800
It's the replacement, correct? We
should probably Mark time zone.

429
00:22:30.060 --> 00:22:32.040
Yeah. I don't, I'm not
really sure what, what, the

430
00:22:32.040 --> 00:22:33.900
reason they didn't do that,
but I do know that

431
00:22:34.230 --> 00:22:37.350
it's been omitted from the
diner core. That's cool. That's

432
00:22:37.350 --> 00:22:40.590
great. I'm actually heartened That
you are working on this

433
00:22:40.590 --> 00:22:42.420
stuff for the doing, you
know, helping them and consulting

434
00:22:42.420 --> 00:22:44.190
with them on the Danette
core. Yeah. Well, that's the

435
00:22:44.190 --> 00:22:46.590
great thing about open source,
right? Yeah. So I work,

436
00:22:46.620 --> 00:22:48.210
I do work for Microsoft.
I don't work for that

437
00:22:48.210 --> 00:22:51.450
team and it's so great
that they have the ability

438
00:22:51.450 --> 00:22:53.790
to accept input from me.
And as if I was

439
00:22:53.790 --> 00:22:55.950
a member of the open
source community on this work,

440
00:22:55.950 --> 00:22:59.850
which I Now, what is
the one about field validation?

441
00:23:00.750 --> 00:23:04.530
So that's an interesting thing.
So a lot of applications

442
00:23:04.710 --> 00:23:08.760
ask the user to enter
a time like this comes

443
00:23:08.760 --> 00:23:12.390
up a lot during scheduling
appointments. So you may say,

444
00:23:12.390 --> 00:23:14.100
well, what time is something
going to happen? And you

445
00:23:14.100 --> 00:23:15.840
just accept that if it's
a date and it's a

446
00:23:15.840 --> 00:23:18.990
time and it fits into
the class, that it's something

447
00:23:18.990 --> 00:23:21.300
that I can work with.
But again, that goes back

448
00:23:21.300 --> 00:23:24.300
to daylight saving time. So
if, like you said in

449
00:23:24.300 --> 00:23:26.730
United States, in the spring, we
skip from two to three.

450
00:23:26.730 --> 00:23:29.520
If I enter a time
of two 30, I probably

451
00:23:29.520 --> 00:23:32.130
should prop up on the
UI. Hey, this time isn't

452
00:23:32.130 --> 00:23:35.580
valid. You know, and likewise,
if I enter a time

453
00:23:35.580 --> 00:23:38.190
of one 30 for the
fall transition, I should probably

454
00:23:38.190 --> 00:23:40.230
say, Hey, you know, which
did you mean? Because there's

455
00:23:40.230 --> 00:23:42.780
two, one 30 is on
this particular date. Yup. When

456
00:23:42.780 --> 00:23:45.090
I tell my phone, like
set an alarm for seven

457
00:23:45.110 --> 00:23:49.850
30, it's really smart. Like
if it's midnight, when I

458
00:23:49.850 --> 00:23:55.460
do that, it assumes that
it's 7:30 AM. Right. But if

459
00:23:55.460 --> 00:23:59.990
it's six in the evening,
it asks and to do

460
00:23:59.990 --> 00:24:03.140
that is hard. It requires
willpower. It requires code and

461
00:24:03.950 --> 00:24:06.530
emotional willpower as a, as
a, I can imagine them

462
00:24:06.530 --> 00:24:09.110
having discussions about how we
can make sure that this

463
00:24:09.110 --> 00:24:11.540
is, this is right for
the user to do the

464
00:24:11.540 --> 00:24:13.670
same thing on a form
on a webpage would be

465
00:24:13.670 --> 00:24:17.750
quite challenging. Well, do you
remember early on in the

466
00:24:17.770 --> 00:24:21.700
history of, I think it
was the iPhone, there was

467
00:24:21.700 --> 00:24:24.220
a problem with the, the
clock going off at the

468
00:24:24.220 --> 00:24:25.960
wrong time of the day.
I made the news, there

469
00:24:25.960 --> 00:24:27.840
was some big headlines about
it and people's clocks were,

470
00:24:27.840 --> 00:24:30.700
were wrong. So what that
comes down to is, is

471
00:24:30.730 --> 00:24:33.610
there's this kind of mainstream
understanding that you should always

472
00:24:33.610 --> 00:24:35.650
store UTC and just work
with time zones at the

473
00:24:35.650 --> 00:24:39.010
very last minute. Well, that
works great when you're recording

474
00:24:39.010 --> 00:24:42.520
time, when you're working with
past or present, but when

475
00:24:42.520 --> 00:24:46.120
you're dealing with future, you
can't do that because the

476
00:24:46.120 --> 00:24:50.110
relationship between timezone and UTC
is up to the whim

477
00:24:50.110 --> 00:24:52.330
of the governments. We can
change our minds. We can

478
00:24:52.330 --> 00:24:55.240
say, well, DST is here
right now, but next month

479
00:24:55.240 --> 00:24:57.670
it's going to be somewhere
else. And that does happen

480
00:24:57.670 --> 00:24:58.990
all over the world. I
mean, the U S is

481
00:24:59.050 --> 00:25:01.690
a little more pragmatic about
getting noticed, but in other

482
00:25:01.690 --> 00:25:03.430
parts of the world, about
a dozen times a year

483
00:25:03.430 --> 00:25:05.770
or so, there are updates
to the time zone rules

484
00:25:05.770 --> 00:25:09.250
that these different places follow.
So you not only have

485
00:25:09.250 --> 00:25:12.640
to take into account that,
Hey, if I schedule something

486
00:25:12.640 --> 00:25:15.520
at 7:00 AM every day, it
needs to run at 7:00 AM

487
00:25:15.520 --> 00:25:19.150
every day, not at 8:00 AM.
You know, once the DST

488
00:25:19.150 --> 00:25:24.400
changes because I was recording
UST or UTC, but For

489
00:25:24.400 --> 00:25:28.030
the windows 95 used to
take, but you know, big

490
00:25:28.090 --> 00:25:30.400
changes in windows. I don't
know how windows changed itself,

491
00:25:30.430 --> 00:25:33.430
but remember windows 95, windows
eight was constantly taking windows,

492
00:25:33.430 --> 00:25:36.790
update things and patches for
new times on information. It's

493
00:25:36.790 --> 00:25:40.270
still doing that today. Is
it, is windows doing that

494
00:25:40.270 --> 00:25:42.400
today? Quietly? I guess I
don't see those showing up

495
00:25:42.400 --> 00:25:46.120
in windows updated anymore. They're
not in your face. There

496
00:25:46.140 --> 00:25:48.550
they are out there as
updates to the operating system.

497
00:25:49.060 --> 00:25:52.120
It's not a secret. You
can go to microsoft.com/time, and

498
00:25:52.120 --> 00:25:54.610
there's actually an RSS feed.
You can subscribe to that.

499
00:25:54.700 --> 00:25:57.790
That shows them, they do
two cumulative updates a year

500
00:25:57.790 --> 00:26:00.610
that go to everybody. They're
both towards the end of

501
00:26:00.610 --> 00:26:02.980
the year, because that tends
to be when these updates

502
00:26:02.980 --> 00:26:06.340
are centralized around, but there
are hotfixes that come out

503
00:26:06.340 --> 00:26:09.640
all the time as necessary.
And sometimes those hotfixes only

504
00:26:09.640 --> 00:26:13.270
get distributed to people that
are directly affected by these

505
00:26:13.270 --> 00:26:16.000
times zones. And that in
itself can be a problem.

506
00:26:16.420 --> 00:26:19.900
Like Russia changed their base
times. Last year, they got

507
00:26:19.900 --> 00:26:22.810
rid of DST and shifted
everything down by an hour

508
00:26:22.810 --> 00:26:24.730
and opened up two new
time zones. So this was

509
00:26:24.730 --> 00:26:28.960
a big deal like ours,
2007 big deal. And those

510
00:26:28.960 --> 00:26:31.600
went out as hot fixes
to the operating system, which

511
00:26:31.600 --> 00:26:33.970
meant that for a time,
if you were scheduling an

512
00:26:33.970 --> 00:26:38.440
appointment with somebody in Russia,
your time reflecting their time,

513
00:26:38.440 --> 00:26:40.270
wasn't going to match up.
So you might be an

514
00:26:40.270 --> 00:26:42.550
hour late or an hour
early to their phone call.

515
00:26:43.800 --> 00:26:46.110
Now, since that's been pushed
out into a cumulative update,

516
00:26:46.110 --> 00:26:49.230
we can hope that everybody
has it, but there are

517
00:26:49.230 --> 00:26:51.840
some people that turn off
all windows updates and those

518
00:26:51.840 --> 00:26:54.290
people are going to have
their clock sentencing. What a

519
00:26:54.290 --> 00:26:56.990
mess. Yeah. I'm seeing here
that they added Bellaruse standard

520
00:26:56.990 --> 00:27:02.450
time and changed Callum grad.
That's amazing. Yep. Kaliningrad rather

521
00:27:02.450 --> 00:27:07.260
excuse me. Okay. So then
the, the final one, I'm

522
00:27:07.260 --> 00:27:09.950
looking at your blog post
here after field validation was

523
00:27:10.610 --> 00:27:14.990
reporting. And this was blows
my mind, assuming that all

524
00:27:14.990 --> 00:27:18.920
days have 24 hours, right?
That's if I can't count

525
00:27:18.920 --> 00:27:21.990
on that now, Matt, what
can I count on You?

526
00:27:21.990 --> 00:27:24.860
You really can't people like
to aggregate things by day,

527
00:27:25.010 --> 00:27:27.860
and then they look at
daily totals. Well, what happens

528
00:27:27.860 --> 00:27:29.240
when you, all of a
sudden, you see one day

529
00:27:29.240 --> 00:27:32.360
is significantly less or significantly
more than another, and you

530
00:27:32.360 --> 00:27:34.430
think either you had a
bad day or you were

531
00:27:34.430 --> 00:27:37.070
ultra successful, and that's not
necessarily the case. It just

532
00:27:37.070 --> 00:27:38.720
may be that there were
23 hours on that day

533
00:27:38.720 --> 00:27:41.870
or 25 hours on that
day. And I would probably

534
00:27:41.870 --> 00:27:44.030
guess that I'm thinking about
all the reports that I've

535
00:27:44.030 --> 00:27:46.250
written and reports that I
may have even just written

536
00:27:46.250 --> 00:27:49.610
an Excel. I'm thinking that
that is an assumption that

537
00:27:49.610 --> 00:27:52.220
we have all made. And
would that mean that we're

538
00:27:52.250 --> 00:27:55.220
grabbing extra hours? Like when
it's really a 23 hour

539
00:27:55.220 --> 00:27:59.600
a day, might we be
accidentally borrowing data from, you

540
00:27:59.600 --> 00:28:01.880
know, the, the edge and
reaching into the next day

541
00:28:02.000 --> 00:28:04.820
Possibly, but usually not usually
just your totals will be

542
00:28:04.820 --> 00:28:07.910
short that day or for
that month or whatever, whatever

543
00:28:07.910 --> 00:28:10.550
period you're looking at. And
you might wonder why it

544
00:28:10.550 --> 00:28:12.320
is. Yeah. What about the
25 hour days? Are we

545
00:28:12.320 --> 00:28:14.570
missing an hour in there
somewhere perhaps? Well, you're getting

546
00:28:14.570 --> 00:28:17.660
that, that one o'clock hour,
twice, right? Because of the,

547
00:28:17.710 --> 00:28:20.780
the, the spring forward or
the sorry, the fall back

548
00:28:20.780 --> 00:28:23.180
daylight saving time transition. Well,
that would cause problems with

549
00:28:23.180 --> 00:28:25.850
charts as well. Oh, you
could see a spike on,

550
00:28:25.910 --> 00:28:28.640
at one o'clock on daylight
savings. Exactly. You'll see a

551
00:28:28.640 --> 00:28:31.220
big spike. And again, this
comes down to how you

552
00:28:31.220 --> 00:28:33.380
group your data. So if
you're grouping your data by

553
00:28:33.380 --> 00:28:36.050
the UTC day, you're not
going to see this, but

554
00:28:36.050 --> 00:28:39.800
most businesses want data group
by some time zone that

555
00:28:39.800 --> 00:28:43.790
they consider important for their
business, some home time zone.

556
00:28:44.240 --> 00:28:46.100
And when you're looking at
the local day and you

557
00:28:46.100 --> 00:28:48.140
do groupings, you will see
spikes or dips for those

558
00:28:48.140 --> 00:28:51.980
things. You can level them
out. You can average values

559
00:28:51.980 --> 00:28:54.800
across the other days and,
and account for that to

560
00:28:54.800 --> 00:28:57.740
level out your crafts. But
of course, when you do

561
00:28:57.740 --> 00:29:01.370
that, you're, you're artificially leveling
out because there really aren't

562
00:29:01.760 --> 00:29:06.410
24 hours in every local
day. Now you are actively

563
00:29:06.410 --> 00:29:09.440
working on your own kind
of branch, your called core

564
00:29:09.440 --> 00:29:12.050
effects, date and time with
some proposals for what you'd

565
00:29:12.050 --> 00:29:15.800
like to see happen in
the.net core framework. Yeah. So

566
00:29:15.800 --> 00:29:18.080
this is what I was
talking about earlier. So this

567
00:29:18.080 --> 00:29:22.490
actually is being migrated over
to core effects lab under

568
00:29:22.490 --> 00:29:28.490
the, the, the get hub
slash.net repository set. And so

569
00:29:28.490 --> 00:29:33.110
cortex lab has several things
that are not guaranteed to

570
00:29:33.110 --> 00:29:35.180
go into the next version
of.net, but things that are

571
00:29:35.180 --> 00:29:37.940
being proposed. So originally I
built this out on my

572
00:29:37.940 --> 00:29:41.350
own, in my own repository
and invited a few people

573
00:29:41.350 --> 00:29:43.480
to come help. And then
when it reached a certain

574
00:29:43.480 --> 00:29:45.130
point that on that team
said, sure, why don't you

575
00:29:45.130 --> 00:29:46.690
move us over? And we
can all start looking at

576
00:29:46.690 --> 00:29:50.890
it. That's very cool. Congratulations.
Thanks. And you also, I

577
00:29:50.890 --> 00:29:53.230
want to make sure that
the listeners hear about this,

578
00:29:53.260 --> 00:29:54.640
and I'm going to make
sure to put this in

579
00:29:54.640 --> 00:29:58.720
the show notes, you have
a six plus hour long

580
00:29:58.810 --> 00:30:03.160
course called Dayton time fundamentals.
I love that it's six

581
00:30:03.160 --> 00:30:07.240
plus hours long and it's
just the fundamentals. Yeah. I

582
00:30:07.240 --> 00:30:10.300
think I have an editing
problem. No, I think what

583
00:30:10.300 --> 00:30:13.450
it is is that you're
being extremely clear and precise

584
00:30:13.450 --> 00:30:16.330
and you're including all the
information that one would possibly

585
00:30:16.330 --> 00:30:19.930
need to, to, to handle
this. If you're doing trading

586
00:30:19.930 --> 00:30:23.380
or medical software or anything
really, I mean, anything at

587
00:30:23.380 --> 00:30:25.780
all that touches a date
time. That means that if

588
00:30:25.780 --> 00:30:27.580
you're not thinking about the
things we've talked about on

589
00:30:27.580 --> 00:30:29.770
this podcast, you have bugs
that you don't know, you

590
00:30:29.770 --> 00:30:32.710
have likely do. And likely
they're kind of bugs that

591
00:30:32.710 --> 00:30:33.940
are going to wake you
up at two o'clock in

592
00:30:33.940 --> 00:30:36.460
the morning when you'd rather
be sleeping. It's funny how

593
00:30:36.460 --> 00:30:38.140
that works. They always seem
to be two o'clock in

594
00:30:38.140 --> 00:30:41.500
the morning. Yeah. So yeah,
the, the Pluralsight course is

595
00:30:41.680 --> 00:30:44.920
doing pretty well. I've gotten
some really great feedback and

596
00:30:45.000 --> 00:30:46.810
it is a little bit
long, but I would encourage

597
00:30:46.810 --> 00:30:49.120
you to, to at least
skim it and find the

598
00:30:49.120 --> 00:30:51.970
pieces that are relevant to
your situation. I go deep

599
00:30:51.970 --> 00:30:55.210
on.net and on JavaScript, but
I also cover Java PHP,

600
00:30:55.210 --> 00:30:57.760
Python, a little bit of
Ruby, just to kind of

601
00:30:57.760 --> 00:31:00.790
give a, an overview of
the ecosystem. And there, there

602
00:31:00.790 --> 00:31:05.320
are some differences in different
languages and frameworks. Cool. So

603
00:31:05.320 --> 00:31:07.990
I'm going to put your
site and note a time

604
00:31:07.990 --> 00:31:13.720
and your five common daylight
savings times anti-patterns and make

605
00:31:13.720 --> 00:31:16.750
sure that everyone checks out
the Pluralsight course, all in

606
00:31:16.750 --> 00:31:19.210
the show notes. Thanks so
much for chatting with me

607
00:31:19.210 --> 00:31:22.420
today. Thanks a lot. It's
been great. This has been

608
00:31:22.420 --> 00:31:25.180
another episode of Hanselminutes and
we'll see you again next

609
00:31:25.180 --> 00:31:34.260
week. <inaudible>.

