WEBVTT FILE

1
00:00:12.150 --> 00:00:17.850
From Hansel minutes.com it's Hansel
minutes, a weekly discussion with

2
00:00:17.850 --> 00:00:23.580
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:23.580 --> 00:00:27.570
is Lawrence Ryan announcing show number
one 60 recorded live Thursday,

4
00:00:27.570 --> 00:00:33.210
April 30th, 2009. Support for Hanselman it's
just provided by Tellerik Arrieta

5
00:00:33.220 --> 00:00:36.930
controls. The most comprehensive suite
of components for windows forms

6
00:00:36.930 --> 00:00:47.850
and asp.net web applications. online@wwwdottelerikdotcomandby.net
developers journal the world's leading.net

7
00:00:47.850 --> 00:00:54.450
developer magazine online at www
dot <inaudible> dot com. In

8
00:00:54.450 --> 00:00:57.690
this episode, Scott talks with
son engineer, Joshua Maher notch.

9
00:01:01.050 --> 00:01:03.030
Hi, this is Scott Hanselman
and this is another episode

10
00:01:03.030 --> 00:01:05.790
of Hansel minutes and I'm
in the lion's den down

11
00:01:05.790 --> 00:01:10.050
here in Eugene, Oregon, and
a Scott Bell where my friend

12
00:01:10.050 --> 00:01:13.230
hooked me up with Josh
marinacci, who is a staff

13
00:01:13.230 --> 00:01:16.590
engineer on Java effects. That's
what I mean by the

14
00:01:16.590 --> 00:01:19.710
lion's den a, a sun
employee and a Microsoft employee

15
00:01:20.040 --> 00:01:23.190
had lunch. I had the
hummus, he had a hamburger

16
00:01:23.640 --> 00:01:26.250
and the world did not
end in fact it was

17
00:01:26.250 --> 00:01:30.540
delicious. It was lovely. It
was pretty cool actually. And

18
00:01:30.540 --> 00:01:32.820
there were actually a drum
circle broke out, which was

19
00:01:32.820 --> 00:01:35.610
just beautiful here in Eugene
rare sunny day in Oregon.

20
00:01:35.700 --> 00:01:41.280
Yeah, the Berkeley of the
Northwest. So yeah. So you

21
00:01:41.280 --> 00:01:44.490
work on Java effects. Now
I worked in Java 10

22
00:01:44.490 --> 00:01:48.000
years ago at no 10
years ago, 1998, 99, somewhere

23
00:01:48.000 --> 00:01:51.870
around there at Nike. And
I remember doing, I guess

24
00:01:51.870 --> 00:01:56.010
it was called a WT,
the abstract windowing toolkit. Yep.

25
00:01:56.220 --> 00:01:58.320
It's kind of all coming
back. You've been in Java

26
00:01:58.320 --> 00:02:01.980
for 15 years. Yeah, pretty
much since the early betas

27
00:02:02.430 --> 00:02:05.910
first public made us 95.
And I, I think I

28
00:02:05.910 --> 00:02:11.430
went Microsoft kind of after
that the EWT was really

29
00:02:11.430 --> 00:02:14.940
early on. So this was
like Netscape four days. And

30
00:02:14.940 --> 00:02:16.560
at that point, I think
Java was really the only

31
00:02:16.560 --> 00:02:20.010
plugin of any significance that
you would have in your

32
00:02:20.010 --> 00:02:23.730
browser. So then fast forward,
10 years later, what does

33
00:02:23.730 --> 00:02:25.860
Java FX and how does
it, how does it relate

34
00:02:25.860 --> 00:02:31.950
to Java? So Java facts
is, Hey, I'll start with

35
00:02:31.950 --> 00:02:36.930
the official marketing ease. Nobody
wants that, but okay. Make

36
00:02:36.930 --> 00:02:41.310
it quick. It's a platform
for RAs, rich internet applications

37
00:02:41.850 --> 00:02:44.220
for all the screens of
your life. That sounds like

38
00:02:44.220 --> 00:02:47.370
marketing all the screens of
your life. And you guys

39
00:02:47.370 --> 00:02:50.520
give us hassle for, I'm
not terribly happy with it,

40
00:02:50.520 --> 00:02:53.880
but it is actually accurate.
It is a rich internet

41
00:02:53.880 --> 00:02:58.020
application platform, meaning it's a
set of tools, API APIs,

42
00:02:58.050 --> 00:03:02.440
and a new language that
Are for building rich internet

43
00:03:02.440 --> 00:03:06.490
apps, meaning programs that run
inside your web browser and

44
00:03:06.490 --> 00:03:09.390
on the desktop. Okay. A
new language. I heard that

45
00:03:09.390 --> 00:03:11.640
I'm going to come back
to that. I don't really

46
00:03:11.640 --> 00:03:15.510
like the term RIA because
you know, rich internet application

47
00:03:15.510 --> 00:03:17.580
who wants an application that
isn't rich, who was a

48
00:03:17.580 --> 00:03:20.310
poor app and all apps
have to do with the

49
00:03:20.310 --> 00:03:23.670
internet. Now, even if it's
purely for installation, all apps

50
00:03:23.670 --> 00:03:26.940
are coming from the internet
or connected to the internet,

51
00:03:26.940 --> 00:03:30.120
doing something interesting with the
internet. So really it's just

52
00:03:30.660 --> 00:03:35.370
applications as a platform for
building applications. This is all

53
00:03:35.370 --> 00:03:38.190
client side. This is not
stuff that you run on

54
00:03:38.190 --> 00:03:40.590
your server. This is what
actually runs on your desktop

55
00:03:40.620 --> 00:03:44.460
computer or your cell phone.net
Developers that are listening to

56
00:03:44.460 --> 00:03:46.350
us to put this into
context because I going to

57
00:03:46.380 --> 00:03:48.300
kind of put things in
a dotnet context for those

58
00:03:48.330 --> 00:03:51.690
people who are done at
programmers. This isn't J two

59
00:03:51.720 --> 00:03:55.170
EE. There's no beans involved
in this Java. This is

60
00:03:55.440 --> 00:03:59.130
your client's side story, I
guess is the way to

61
00:03:59.130 --> 00:04:02.010
put it. Okay. So you
said there's a new language.

62
00:04:02.040 --> 00:04:05.040
Java is a language I'm
familiar with and Java and

63
00:04:05.040 --> 00:04:08.130
C sharp look a lot
alike. And then Java effects

64
00:04:08.160 --> 00:04:11.700
is a language too. So
Java effects is the platform

65
00:04:11.700 --> 00:04:14.250
and it has its own
language called Java effects, script

66
00:04:14.280 --> 00:04:17.520
Java, FX script. It's a
language designed to be familiar

67
00:04:17.520 --> 00:04:21.120
to people who are pure
programmers, Java, and C sharp

68
00:04:21.120 --> 00:04:24.810
developers and people who are
what we sort of call

69
00:04:24.810 --> 00:04:28.230
the web to Dido hipsters.
The people who know some

70
00:04:28.230 --> 00:04:31.830
JavaScript and maybe a little
bit of PHP or Ruby,

71
00:04:32.100 --> 00:04:33.780
but they do a lot
of work in Dreamweaver, a

72
00:04:33.780 --> 00:04:37.590
lot of work in flash
and Photoshop illustrator, and the

73
00:04:37.600 --> 00:04:41.190
people who are very visually
oriented into some scripting. We

74
00:04:41.190 --> 00:04:43.830
wanted something that would be
familiar to them at the

75
00:04:43.830 --> 00:04:47.280
same time. Our focus is
gooeys. So there are features

76
00:04:47.280 --> 00:04:51.390
in the language specifically for
building user interfaces. Binding is

77
00:04:51.390 --> 00:04:54.720
built in time is an
actual data type because it's

78
00:04:54.720 --> 00:04:58.080
important to animation. Animation is
built in. Oh, really? So

79
00:04:58.080 --> 00:05:00.240
you're saying that there are
things in the language that

80
00:05:00.240 --> 00:05:04.290
are built into solve the
problems Of user interface builder,

81
00:05:04.860 --> 00:05:09.270
right? You would never use
this to make a backend

82
00:05:09.270 --> 00:05:11.820
application. It doesn't, You would
never make a Java effects

83
00:05:11.850 --> 00:05:14.550
thing that had no UI.
Right. Okay. It's whole purpose

84
00:05:14.550 --> 00:05:17.280
is user interfaces. Okay. All
of that said it is

85
00:05:17.280 --> 00:05:19.560
built on top of the
Java platform at the end

86
00:05:19.560 --> 00:05:21.840
of the day, all this
stuff compiles down to Java

87
00:05:22.110 --> 00:05:25.230
byte code it's in a
jar file, right? The jar

88
00:05:25.230 --> 00:05:27.510
files like a zip file
or a cab or a

89
00:05:27.540 --> 00:05:29.460
what we would call a
zap. It's a zip file

90
00:05:29.460 --> 00:05:33.390
with a different extension. Okay.
Okay. And it runs on

91
00:05:33.420 --> 00:05:35.940
the Java virtual machine, the
JVM. Okay. So you don't

92
00:05:35.940 --> 00:05:38.220
actually need a new plugin
for your web browser. It

93
00:05:38.220 --> 00:05:41.910
uses the regular Java applet
plugin. And on the desktop,

94
00:05:41.910 --> 00:05:45.980
it uses Java web start,
which is similar to a

95
00:05:45.980 --> 00:05:50.940
Adobe air. And I think
Microsoft has the, Yeah. Okay.

96
00:05:50.940 --> 00:05:53.610
So Java web start is
the thing that makes it

97
00:05:53.610 --> 00:05:57.620
jump out of the browser.
Yes. Okay. Java FX, the

98
00:05:57.980 --> 00:06:01.880
platform and Java FX script
is the language, the language.

99
00:06:01.940 --> 00:06:04.100
Okay. But it's not Java
script. It has no relation

100
00:06:04.100 --> 00:06:07.090
to Java script. There's no
relation to JavaScript other than

101
00:06:07.360 --> 00:06:10.240
it should be familiar to
people who program in JavaScript,

102
00:06:10.270 --> 00:06:11.350
they should be able to
pick it up pretty easy.

103
00:06:11.380 --> 00:06:14.260
So if it's familiar, that
probably means it uses curly

104
00:06:14.260 --> 00:06:17.830
braces. It uses a lot
of curly braces. Yes. Now

105
00:06:17.830 --> 00:06:21.370
we have a language in
Silverlight called XAML that uses

106
00:06:21.370 --> 00:06:24.070
a lot of angle brackets
or your curly braces, like

107
00:06:24.070 --> 00:06:26.740
our angle brackets. In many
ways, we use a lot

108
00:06:26.740 --> 00:06:29.050
of curly braces and the
declarative parts of your code.

109
00:06:29.380 --> 00:06:32.050
So you can have, you
can create much like you

110
00:06:32.050 --> 00:06:36.370
would an XML or HTML,
a tree like structure describing

111
00:06:36.370 --> 00:06:39.340
your user interface. And then
you start attaching event handlers

112
00:06:39.700 --> 00:06:43.120
and data to that Visual
structure. So for a first

113
00:06:43.120 --> 00:06:47.020
for scoping and for parenting,
for describing that this is

114
00:06:47.020 --> 00:06:51.100
a parent of that for
making hierarchies. Yes. Okay. And

115
00:06:52.420 --> 00:06:54.250
when we, so let me
see who the players here,

116
00:06:54.250 --> 00:06:57.340
we've got this flash and
then I guess it's flex,

117
00:06:57.370 --> 00:07:02.440
what's flashing Flash flux. So
flex is basically the Jesus

118
00:07:02.440 --> 00:07:05.890
action script, which is related
to Java script. It's essentially

119
00:07:06.020 --> 00:07:09.400
a way for programmers to
code things that compile down

120
00:07:09.400 --> 00:07:12.130
to flash files. So you
can make a user interface

121
00:07:12.130 --> 00:07:15.160
that talks to the network
and becomes a flash file

122
00:07:15.160 --> 00:07:17.800
that will play in the
flash player. Okay. So flash

123
00:07:17.800 --> 00:07:20.080
has a kind of a
virtual machine of sorts, a

124
00:07:20.080 --> 00:07:22.690
language and a UI thing.
So they have a VM

125
00:07:22.690 --> 00:07:25.810
in a box that's flash
runtime air is the thing

126
00:07:25.810 --> 00:07:27.700
that they have that jumps
out of the browser. Right?

127
00:07:28.060 --> 00:07:32.860
Then we have, we have
server Lite, which has star.net,

128
00:07:32.890 --> 00:07:36.070
the, you know, the CLR
and then Silverlight three can

129
00:07:36.070 --> 00:07:39.010
jump out of the browser.
Right. And then Java effects

130
00:07:39.010 --> 00:07:40.900
can live in the browser
as a, as a, an

131
00:07:40.900 --> 00:07:45.040
applet or a square active
area. And it can also

132
00:07:45.040 --> 00:07:47.320
jump out yes. As well.
So there is, if I

133
00:07:47.320 --> 00:07:51.870
missed anybody pretty much. It's
the big three. Yeah. Well

134
00:07:51.880 --> 00:07:55.720
actually I have missed somebody
Java script itself. True. Which

135
00:07:55.720 --> 00:07:58.930
may or may arguably be
our greatest competition. We should

136
00:07:58.930 --> 00:08:02.950
be friends and we should
crush JavaScript. We should, that's

137
00:08:02.950 --> 00:08:06.220
going to be hard though.
More people use JavaScript than

138
00:08:06.220 --> 00:08:09.670
any other language. And of
all the, when you install

139
00:08:09.670 --> 00:08:11.590
a browser, I mean, that's
the thing that you, that's

140
00:08:11.590 --> 00:08:13.570
the thing you have, that's
the, it comes out of

141
00:08:13.570 --> 00:08:17.470
the box. You have JavaScript,
which is getting faster and

142
00:08:18.070 --> 00:08:22.600
HTML five will let you
watch movies in a movie.

143
00:08:22.780 --> 00:08:25.150
Was it called it media?
I forget the name of

144
00:08:25.150 --> 00:08:30.400
the tag video tag. Yeah.
So that there's four of

145
00:08:30.400 --> 00:08:35.130
us. Yeah. It sounds like
Google owns jobs. Right. I

146
00:08:35.140 --> 00:08:37.260
dunno if they completely own
it, but they No, no,

147
00:08:37.290 --> 00:08:39.460
no one owns JavaScript. But
if you could say, well,

148
00:08:39.460 --> 00:08:43.800
what's, Google's, it's probably JavaScript.
Absolutely. It is. They are.

149
00:08:43.870 --> 00:08:46.090
And they are driving a
lot of the development and

150
00:08:46.190 --> 00:08:49.330
next generation JavaScript technology they're
I mean, they're making their

151
00:08:49.330 --> 00:08:52.690
own web. Yeah, absolutely. But
I think it's bigger than

152
00:08:52.690 --> 00:08:55.770
making them a web browser
because they're making a, that,

153
00:08:55.800 --> 00:08:58.260
you know, they don't use
Silverlight, they don't use flash

154
00:08:58.290 --> 00:09:02.460
and they don't use a
Java. Right. So they've made,

155
00:09:02.460 --> 00:09:05.730
they've made their decision about
what their runtime is. Now.

156
00:09:05.850 --> 00:09:07.470
One of the in Silverlight
we have a thing, we

157
00:09:07.470 --> 00:09:09.630
have this thing called the
JavaScript bridge, which means that

158
00:09:09.630 --> 00:09:12.780
Silverlight can reach out into
the Dom and kind of

159
00:09:12.780 --> 00:09:15.450
deal with it and vice
versa. Can you do some

160
00:09:15.450 --> 00:09:19.400
other things in Java? In
fact, one of the, so

161
00:09:19.400 --> 00:09:22.910
Java was the original plugin
and it was the very

162
00:09:22.910 --> 00:09:24.920
first plugin that would let
you make programs that ran

163
00:09:24.920 --> 00:09:27.650
in the browser. Right. And
that was a big story

164
00:09:27.650 --> 00:09:31.370
up until about 97, 98,
and then Java on the

165
00:09:31.370 --> 00:09:34.520
clients, hard to fade away
and Java on the server

166
00:09:34.520 --> 00:09:37.580
became the thing that most
job developers work with. A

167
00:09:37.580 --> 00:09:40.520
lot of that has to
do is partly because of

168
00:09:40.520 --> 00:09:41.960
the UI toolkit, but a
lot of it had to

169
00:09:41.960 --> 00:09:45.140
do with the actual applet
plugin. So horrible. It was

170
00:09:45.140 --> 00:09:49.520
built on Netscape, two era
API APIs. It, it never

171
00:09:49.520 --> 00:09:52.070
worked the same in different
browsers. It could crash your

172
00:09:52.070 --> 00:09:55.760
browser or lock it up.
It wasn't Java's the languages

173
00:09:55.760 --> 00:09:58.760
fault as it was that
this, this plugin lived. It

174
00:09:58.760 --> 00:10:04.220
lived way too long. So
a guy at sun who

175
00:10:04.580 --> 00:10:06.920
actually works on the joggle
project, which is open GL

176
00:10:06.920 --> 00:10:11.600
by the Java open GL.
Okay. I love that. I

177
00:10:11.600 --> 00:10:13.430
think it's great. I'm sorry.
I have to interrupt because

178
00:10:13.430 --> 00:10:16.430
I think it's great that
when I feel bad about

179
00:10:16.430 --> 00:10:20.840
our names, I realize that
everybody not just sun are

180
00:10:21.320 --> 00:10:24.980
right. Everybody has these crazy.
Why did we call it?

181
00:10:25.430 --> 00:10:28.640
You know, I sure is
our cloud, you know, I

182
00:10:28.640 --> 00:10:31.820
have to juggle. Yep. You
win on that one. That's

183
00:10:31.820 --> 00:10:36.020
awesome. Classic engineering, marketing. It's
great name though. I love

184
00:10:36.020 --> 00:10:39.680
it. So joggle opened GL
bindings. He really cared about

185
00:10:39.680 --> 00:10:43.310
making three D games and
visualizations, and he wants to

186
00:10:43.310 --> 00:10:44.510
share that with the world.
So it needs to go

187
00:10:44.510 --> 00:10:46.160
on a web browser, right?
And this is what he

188
00:10:46.160 --> 00:10:49.880
discovered just how truly bad
or applet plugin was. And

189
00:10:49.880 --> 00:10:53.120
he joined the deployment team
to rewrite the applet plugin

190
00:10:53.600 --> 00:10:56.750
and he did it. He
completely rewrote it from scratch

191
00:10:57.140 --> 00:11:01.340
through way, all of the
code Java web start, which

192
00:11:01.340 --> 00:11:04.430
is an XML file that
downloads a bunch of resources

193
00:11:04.430 --> 00:11:08.180
and runs it. And applets,
which were HTML, the downloads

194
00:11:08.180 --> 00:11:10.220
a bunch of resources and
runs it, right. They used

195
00:11:10.220 --> 00:11:12.920
to be two entirely separate
things, even when they were

196
00:11:12.920 --> 00:11:16.610
using, they're doing basically the
same thing, right? So he

197
00:11:16.610 --> 00:11:21.050
combined the two together, completely
rewrite it from scratch, using

198
00:11:21.050 --> 00:11:25.400
modern browser API APIs. It
does require a recent browser.

199
00:11:25.400 --> 00:11:28.130
You have to have <inaudible>
or Firefox three or higher

200
00:11:28.490 --> 00:11:29.780
Because these are this, this
is, we're talking about the,

201
00:11:29.780 --> 00:11:33.080
I think it's the NS
API. Yes. Plugin. I mean,

202
00:11:33.080 --> 00:11:35.210
this is, if you're going
to write a plugin, there's

203
00:11:35.210 --> 00:11:36.230
a number of ways you
can do it. And they're

204
00:11:36.230 --> 00:11:38.540
not all active acts. There's
this notion of the Netscape

205
00:11:38.600 --> 00:11:41.930
API APIs that are historical.
Right. And then this NSA

206
00:11:41.930 --> 00:11:47.660
API, there are some weird
things about where each browser

207
00:11:47.660 --> 00:11:50.450
runs it. What threads are
involved. If the, one of

208
00:11:50.450 --> 00:11:52.770
the things that people complain
about is that, you know,

209
00:11:52.770 --> 00:11:55.030
Oh, well I E crashes
a lot. Well, it might

210
00:11:55.030 --> 00:11:57.640
not be it it's in
fact plugins that are ill

211
00:11:57.640 --> 00:12:01.150
behaved. Right? So even the
best plugin developer still has

212
00:12:01.150 --> 00:12:04.150
to be aware that I'm
running on opera or I'm

213
00:12:04.150 --> 00:12:07.840
running on IAE and do
some little kind of things

214
00:12:08.380 --> 00:12:11.940
to make it work Well.
Right. And so the, the

215
00:12:11.940 --> 00:12:14.640
old app plugin had just
been writing that, that line

216
00:12:14.640 --> 00:12:17.550
for way too long. Okay.
So the new one completely

217
00:12:17.550 --> 00:12:23.160
rewritten, unifies, everything uses modern
API APIs, and it'll actually

218
00:12:23.160 --> 00:12:26.880
run Java itself in a
separate process. So you can

219
00:12:26.880 --> 00:12:30.600
actually kill dash nine, the
Java process for applet. It

220
00:12:30.600 --> 00:12:33.120
won't take down the browser.
Is this regardless of the

221
00:12:33.120 --> 00:12:37.170
browser, if you, if we're
using the new plugin, meaning

222
00:12:37.290 --> 00:12:41.070
97 or Firefox three. Yeah.
Interesting. And I wonder if

223
00:12:41.070 --> 00:12:44.100
you're using <inaudible> or Chrome,
which runs plugins in a

224
00:12:44.100 --> 00:12:47.790
separate process. If it'll run
another process on top of

225
00:12:47.790 --> 00:12:51.060
it, I'm not sure. I
know it works in Chrome,

226
00:12:51.090 --> 00:12:53.850
but there might be an
extra bounce, bounce, bounce, right?

227
00:12:53.880 --> 00:12:58.290
Well, essentially the plugin use,
it has a very slim

228
00:12:58.290 --> 00:13:02.770
JVM, which monitors all of
the others. And so it's

229
00:13:02.820 --> 00:13:05.280
kind of a little manager,
which lets us do things

230
00:13:05.280 --> 00:13:07.440
like if you have an
applet that really needs a

231
00:13:07.440 --> 00:13:09.990
bunch more memory, you need
to set some JVM arguments.

232
00:13:10.350 --> 00:13:12.420
It can do that. Force
it to be in its

233
00:13:12.420 --> 00:13:14.640
own JVs. You could have
a page that had a

234
00:13:14.640 --> 00:13:17.400
half dozen Java applets yes.
And they'll all have their

235
00:13:17.400 --> 00:13:20.280
own process. If you choose
by default, I will try

236
00:13:20.280 --> 00:13:21.960
to share it. Oh. So
you can give the, you

237
00:13:21.960 --> 00:13:25.050
can give your host a
hint. Yes. Oh, okay. And

238
00:13:25.050 --> 00:13:26.850
it will try and do
the right thing. Okay. And

239
00:13:26.850 --> 00:13:28.950
our goal was to make
sure that it was impossible

240
00:13:28.950 --> 00:13:31.770
for Java to ever crash
your browser. As a side

241
00:13:31.770 --> 00:13:34.530
benefit, it loads up faster.
And we can do some

242
00:13:34.530 --> 00:13:37.530
interesting tricks. Like if you
write your applet in a

243
00:13:37.530 --> 00:13:39.780
certain way, and this is
true for Java applets and

244
00:13:39.780 --> 00:13:43.980
Java effects, you can literally
drag the running program out

245
00:13:43.980 --> 00:13:46.800
of your web browser. And
it still continues to run,

246
00:13:47.070 --> 00:13:49.560
navigate away or close your
web browser. The app is

247
00:13:49.560 --> 00:13:51.930
still running. Then when you
close it, it asks you

248
00:13:51.930 --> 00:13:53.610
if you want to create
a shortcut on your desktop.

249
00:13:53.640 --> 00:13:56.280
Oh, that's cool. Now this
is a new thing. Yeah.

250
00:13:56.280 --> 00:14:00.750
This we showed probably if
you have, it came on

251
00:14:00.750 --> 00:14:05.670
Java six, update 10, which
was released in October. Right.

252
00:14:05.700 --> 00:14:08.970
Okay. Okay. So let me
ask you this. I don't

253
00:14:08.970 --> 00:14:11.610
get the naming now. I
know we, we, we kind

254
00:14:11.610 --> 00:14:13.980
of have some funny names
to share these silver lights

255
00:14:13.980 --> 00:14:16.680
only on three. Although I
told the Silverlight guys to

256
00:14:16.680 --> 00:14:19.140
just call it silver light
11. So then we would

257
00:14:19.140 --> 00:14:22.770
just skip over flash completely.
Excellent. And just then call

258
00:14:22.770 --> 00:14:26.160
it 13. Just pick random
numbers that are like, maybe

259
00:14:26.190 --> 00:14:29.550
go primes, just go and
say three, five, seven. And

260
00:14:29.550 --> 00:14:31.410
how'd that go over? And
that didn't like that idea,

261
00:14:31.890 --> 00:14:34.020
but at least they're not
calling it like, you know,

262
00:14:34.050 --> 00:14:39.270
Silverlight 3.5 service pack, two
CTP. But you guys, I

263
00:14:39.270 --> 00:14:42.600
remember there was Java three
or what was it in

264
00:14:42.600 --> 00:14:45.450
1999? What was I programming
in 99? Well, there is,

265
00:14:45.510 --> 00:14:48.660
there is Java one Java
1.1. And then we jumped

266
00:14:48.660 --> 00:14:52.700
to Java two. Yeah. Okay.
That was the confusing, Because

267
00:14:52.700 --> 00:14:55.850
the version number was still
Java. 1.2, we call that

268
00:14:55.850 --> 00:14:59.140
job. I remember those days.
Okay. I was on Java

269
00:14:59.140 --> 00:15:02.590
1.1 and then RMI. I
was running Java one, one

270
00:15:03.040 --> 00:15:06.100
like RMI edition, which was
like a daily build at

271
00:15:06.100 --> 00:15:11.020
one, one. And then two
happened, which was 1.2 included

272
00:15:11.020 --> 00:15:14.830
RMI. And then I left.
Right. So fast forward, 10

273
00:15:14.830 --> 00:15:19.450
years we're on Java six.
Yes. Java seven is still

274
00:15:19.450 --> 00:15:22.720
currently under development. Now one
of the rules of the

275
00:15:22.720 --> 00:15:25.600
Java community process, w when
you say Java, you're really

276
00:15:25.600 --> 00:15:28.930
talking about a specification. It's
the language and API APIs.

277
00:15:28.960 --> 00:15:32.050
Okay. Then we have our
implementation of it, which is

278
00:15:32.200 --> 00:15:34.990
what most people think of
when they download Java. But

279
00:15:34.990 --> 00:15:37.810
there are other, other implementations.
Do you know how to

280
00:15:37.810 --> 00:15:40.870
make the possible out of
the impossible? Well, the dotnet

281
00:15:40.870 --> 00:15:43.690
ninjas at Telerik do they
just released a huge pack

282
00:15:43.690 --> 00:15:45.940
of web controls, all built
on top of done at

283
00:15:45.940 --> 00:15:50.170
Ajax. That'll help you build
impossibly fast and interactive applications

284
00:15:50.170 --> 00:15:53.530
in no time at all.
They've made the impossible possible

285
00:15:53.530 --> 00:15:56.590
in desktop development. If you
think you can't have a

286
00:15:56.590 --> 00:15:59.950
carousel component and wind forms
while you can, their windows

287
00:15:59.950 --> 00:16:02.890
form suite features a super
powerful grid view control on

288
00:16:02.890 --> 00:16:05.200
32 other crazy desktop components
that will give you a

289
00:16:05.200 --> 00:16:10.000
dazzling WPF like features, but
in wind forms, they do

290
00:16:10.000 --> 00:16:12.100
the same thing in reporting
solutions with a new design

291
00:16:12.100 --> 00:16:15.070
surface, like nothing else looks
just like graph paper gives

292
00:16:15.070 --> 00:16:18.790
you advanced page layout capabilities
makes it feel more like

293
00:16:18.790 --> 00:16:21.760
a graphic design software than
a reporting solution. Go check

294
00:16:21.760 --> 00:16:24.970
them out@telerik.com and be at
dotnet Ninja. And thanks for

295
00:16:24.970 --> 00:16:28.360
listening. Okay. So they put
this in the context of

296
00:16:28.420 --> 00:16:30.730
the Microsoft person that may
be listening. We have this

297
00:16:30.820 --> 00:16:33.880
thing called the CLI the
common language implementation, I think,

298
00:16:33.880 --> 00:16:36.340
is what it's called. And
it's like our definition of

299
00:16:36.340 --> 00:16:39.820
what a CLR implementation should
look like, which is different

300
00:16:39.820 --> 00:16:42.520
from the instance. Right. But
these things merge a lot,

301
00:16:42.580 --> 00:16:45.520
right? Like we have this
motto, which is an instance

302
00:16:45.520 --> 00:16:48.700
of the CLI and open
source implementation. Yeah. Okay. So

303
00:16:48.700 --> 00:16:51.040
when I say Java, I'm
thinking like the version I

304
00:16:51.040 --> 00:16:54.400
just installed. Right. But there's
an, there's a, There's this

305
00:16:54.400 --> 00:16:56.560
kind of abstract spec. And
one of the rules is

306
00:16:56.560 --> 00:17:00.220
that we can't change any
public API between major versions.

307
00:17:01.270 --> 00:17:07.860
So Java six actually came
out end of 2000. Let's

308
00:17:07.860 --> 00:17:11.140
see when I joined. So
end of 2006, I believe

309
00:17:11.440 --> 00:17:14.410
Java six came out Java
seven will come out next

310
00:17:14.800 --> 00:17:17.980
spring, probably. Okay. So that's
a four year gap. In

311
00:17:17.980 --> 00:17:21.040
the meantime, we've done many
update releases, which actually provide

312
00:17:21.040 --> 00:17:24.190
a lot of crucial functionality,
but we haven't added any

313
00:17:24.190 --> 00:17:27.130
new API APIs. Okay. So
you're only allowed to add

314
00:17:27.130 --> 00:17:29.950
an API In a major
major, and it has to

315
00:17:29.950 --> 00:17:33.490
go through all of this
approval and all this stuff.

316
00:17:33.760 --> 00:17:35.830
Most of what we wanted
to fix actually didn't require

317
00:17:35.830 --> 00:17:38.710
new API APIs. It was
purely implementation improvements. And so

318
00:17:38.710 --> 00:17:41.350
that's what, all of the
updates. Okay. So we're on

319
00:17:41.350 --> 00:17:44.410
update. Third, 10 update 10.
Well, no 10 came out

320
00:17:44.410 --> 00:17:47.560
October. I think the last
public is update 12 or

321
00:17:47.560 --> 00:17:50.490
13 and 14 will be
coming out. So I've always

322
00:17:50.490 --> 00:17:52.860
felt that both of us,
I mean, me speaking for

323
00:17:52.870 --> 00:17:56.760
Microsoft and use beacon for
sun should keep, have developers

324
00:17:56.760 --> 00:17:58.920
should have one version number
and my mom should have

325
00:17:58.920 --> 00:18:02.810
another. Right. You know, For
most people it's Java six.

326
00:18:03.110 --> 00:18:06.080
Oh, okay. Realistic. For most
people it's Java or that

327
00:18:06.080 --> 00:18:09.440
copycat thing, they don't even
really understand. But like I

328
00:18:09.440 --> 00:18:14.030
tried to install, I installed
new Boone too yesterday and

329
00:18:14.030 --> 00:18:16.250
I got the 64 bit
version, which I thought was

330
00:18:16.250 --> 00:18:18.920
a good idea. Wasn't a
good idea. Because then I

331
00:18:18.920 --> 00:18:21.560
wanted to get Java working,
but I needed Java six

332
00:18:21.560 --> 00:18:25.340
update, 14 preview or something
like that. Right. Because 14

333
00:18:25.340 --> 00:18:27.800
won't come out for another
month or two. Right. But

334
00:18:27.800 --> 00:18:31.160
they're on, we're on 10
now. Well, 12 came out

335
00:18:31.160 --> 00:18:33.590
in this. Yeah. So you
have trouble keeping this stuff

336
00:18:33.590 --> 00:18:34.760
straight and as much as
I do, so I don't

337
00:18:34.760 --> 00:18:37.710
feel bad. This is good.
Cause we all, we all,

338
00:18:38.120 --> 00:18:39.710
all of us, all of
our companies screw this stuff

339
00:18:39.710 --> 00:18:45.890
up. So 14. Yeah. I
didn't understand that. That was

340
00:18:45.890 --> 00:18:49.910
just like, it's like Java
6.14 Essentially. Yeah. Is what

341
00:18:49.910 --> 00:18:52.340
it was. We now call
it, update something, but you

342
00:18:52.340 --> 00:18:55.010
can think of it as,
okay. So what's a difference

343
00:18:55.010 --> 00:18:57.970
between like, you know, 10
and 14, like we released

344
00:18:57.970 --> 00:19:01.760
these things called, I think
we call them GTRs general

345
00:19:01.760 --> 00:19:05.660
distribution releases for Silverlight. So
like every couple of months

346
00:19:05.930 --> 00:19:09.890
your Silverlight implementation will just
magically get updated. Right. Just

347
00:19:09.890 --> 00:19:12.470
like flash does the same
thing. We don't say, we

348
00:19:12.470 --> 00:19:15.110
don't tell you if it's
something that's minor, we're just

349
00:19:15.110 --> 00:19:17.930
fixing some bugs. Right. And
everything we've done is bug

350
00:19:17.930 --> 00:19:21.680
fixes. Now what we typically
do is alternate releases, where

351
00:19:21.680 --> 00:19:23.720
if you go to request
a download or you get

352
00:19:23.720 --> 00:19:26.450
the most recent version, and
then there's the version that

353
00:19:26.450 --> 00:19:29.090
we turn on and the
auto update auto update, it's

354
00:19:29.090 --> 00:19:32.150
usually a point release behind
that way. We've had a

355
00:19:32.150 --> 00:19:35.060
chance to test it even
more, you know, so lots

356
00:19:35.060 --> 00:19:38.210
of developers have tested it,
but we haven't actually pushed

357
00:19:38.210 --> 00:19:40.970
it out to the entire
world. Oh, that's cool. Okay.

358
00:19:40.970 --> 00:19:44.120
So then I might've downloaded
a 10 cause that's the

359
00:19:44.120 --> 00:19:46.640
one that's on the website.
Right. But people have been

360
00:19:46.640 --> 00:19:49.340
auto updating to nine to
see if 10 has problems.

361
00:19:50.990 --> 00:19:53.660
I think 10 is now
an auto update. Probably 12

362
00:19:53.660 --> 00:19:56.990
is what you could download.
Correct. Okay. That's cool. So

363
00:19:56.990 --> 00:19:59.390
it's kind of a way
of keeping things conservative, but

364
00:19:59.390 --> 00:20:02.960
you're not adding major functionality,
right? Until Java seven, Till

365
00:20:02.960 --> 00:20:05.780
Java seven Java, seven Ohio,
the actual new API APIs

366
00:20:05.780 --> 00:20:07.910
and lots of others Now,
which one do I need

367
00:20:07.910 --> 00:20:12.290
to run? Java FX six,
Actually six updates. Seven or

368
00:20:12.290 --> 00:20:16.400
above. Okay. That's your baseline?
That's our baseline. I highly

369
00:20:16.400 --> 00:20:20.180
recommend six, 10 or above
just because that's where you

370
00:20:20.180 --> 00:20:22.910
get the new Apple plugin
and the experience of running

371
00:20:22.910 --> 00:20:26.120
applets in a web browser
is so much better. Really?

372
00:20:26.150 --> 00:20:29.060
It's not even worth. Yeah.
I bump into applets when

373
00:20:29.060 --> 00:20:31.640
I'm looking at my, my
nanny cam, my kid has

374
00:20:31.640 --> 00:20:34.250
a camera and it has
a Java applet. Right. So

375
00:20:34.340 --> 00:20:36.440
sometimes in the old days
when I would hit a

376
00:20:36.440 --> 00:20:38.690
Java applet, I knew I
was about to hit it.

377
00:20:38.690 --> 00:20:41.780
Cause the browser would freeze.
Right. That would be before

378
00:20:41.780 --> 00:20:46.370
your, before Java guy fixed
it. Yeah. Right. Or Ken

379
00:20:46.400 --> 00:20:48.940
did the magic. So Then
if you have a job

380
00:20:48.970 --> 00:20:50.890
athlete that you come into
contact with, you want to

381
00:20:51.310 --> 00:20:54.250
update. Absolutely. And then that
will make the, that applicant,

382
00:20:54.280 --> 00:20:56.760
even all that let's work
still. Yeah. It runs all

383
00:20:56.760 --> 00:20:59.580
the old, we take backwards
compatibility very seriously, which is

384
00:20:59.580 --> 00:21:01.230
why it actually took so
long. It took over a

385
00:21:01.230 --> 00:21:04.470
year to completely rewrite. The
plugin think would be a

386
00:21:04.470 --> 00:21:10.140
small thing, but compatibility. So,
So Java effects lets me

387
00:21:10.140 --> 00:21:13.080
write UIs. I assume it
lets me do video and

388
00:21:13.080 --> 00:21:15.690
the kind of things like
that. Yes. In addition to

389
00:21:15.690 --> 00:21:18.210
the language, we have a
new runtime with new APIs.

390
00:21:18.270 --> 00:21:21.840
Okay. So the new APIs
have a scene graph rather

391
00:21:21.840 --> 00:21:25.170
than drawing lines. Scene graph
S C E N E.

392
00:21:25.320 --> 00:21:28.620
Yes. Okay. So rather than
saying the old Java way

393
00:21:28.620 --> 00:21:30.900
of doing things is you've
given a graphics context and

394
00:21:30.900 --> 00:21:32.970
you say, draw a line,
right? That color, draw this

395
00:21:32.970 --> 00:21:38.070
other line. Second color windows
3.1. Now you say here's

396
00:21:38.070 --> 00:21:40.680
a rectangle. Here's where it
should be on the screen.

397
00:21:41.070 --> 00:21:43.590
I don't care how it
gets painted. If the screen

398
00:21:43.590 --> 00:21:45.210
needs to be refreshed, I
don't want to be called

399
00:21:45.210 --> 00:21:47.670
back every time that has
to be repainted. Here's an

400
00:21:47.670 --> 00:21:50.490
object representing the rectangle, make
it happen. If I move

401
00:21:50.490 --> 00:21:54.450
the rectangle, changing its X
value, then the screen should

402
00:21:54.450 --> 00:21:56.970
get updated again. And I
don't care how it happens.

403
00:21:57.150 --> 00:22:00.600
That's what I've seen graph
gives. Okay. So that's interesting

404
00:22:00.600 --> 00:22:04.710
because that's a similar philosophy
moving from like on the,

405
00:22:04.710 --> 00:22:07.410
on the client, from what
we call wind forms to

406
00:22:07.410 --> 00:22:12.420
WPF, right. Or from yeah.
Or moving to moving into

407
00:22:12.420 --> 00:22:16.440
Silverlight. Cause XAML says here's
an object and there's no

408
00:22:16.440 --> 00:22:19.500
notion of like the WM
paint event. Now there is

409
00:22:19.620 --> 00:22:22.020
like Underneath the shirt, you
don't have to deal with

410
00:22:22.020 --> 00:22:24.690
it. You think that, do
you think that you and

411
00:22:24.720 --> 00:22:25.950
I, but again, when I
say you and I, I

412
00:22:25.950 --> 00:22:29.460
mean you represent all employees
of sun and of course,

413
00:22:29.670 --> 00:22:33.240
and, and represent, but don't
speak for all employees at

414
00:22:33.240 --> 00:22:36.930
Microsoft. Do you think that
we are, are like in

415
00:22:36.930 --> 00:22:40.500
this massive thumb, more from
a computer science perspective or

416
00:22:40.500 --> 00:22:42.750
is this like, like, you
know, we came up with

417
00:22:42.750 --> 00:22:44.490
this idea first and you
come up with that or

418
00:22:44.490 --> 00:22:47.070
is this just the only
direction it could have gone?

419
00:22:47.760 --> 00:22:50.520
So it's interesting. It's interesting.
You brought this up. I

420
00:22:50.520 --> 00:22:54.180
actually gave a presentation to
some university of Oregon students

421
00:22:54.180 --> 00:22:59.050
here about graphics, history, like
development of API, because they

422
00:22:59.050 --> 00:23:01.620
had just started learning about
seeing graphs. So they wanted

423
00:23:01.620 --> 00:23:03.990
me to kind of give
it a retrospective. And actually

424
00:23:03.990 --> 00:23:06.150
I sat down and did
some research, you know, read

425
00:23:06.150 --> 00:23:08.850
through my old graphics books.
I really think this is

426
00:23:08.850 --> 00:23:11.940
just a logical way. It's
going to go. When you

427
00:23:11.940 --> 00:23:14.850
work at a higher level,
you do take a performance

428
00:23:14.850 --> 00:23:17.160
hit, right? But it makes,
it makes you so much

429
00:23:17.160 --> 00:23:21.000
more productive. And that eventually
the tools and implementation get

430
00:23:21.000 --> 00:23:23.220
to be so good that
they can actually do a

431
00:23:23.220 --> 00:23:26.130
better job than if I
were to implement it myself.

432
00:23:26.700 --> 00:23:29.220
It's the same thing that
happened with compilers. I don't

433
00:23:29.220 --> 00:23:31.710
write an assembly because I
can write in C and

434
00:23:31.710 --> 00:23:34.920
the competitor's actually good enough
that in 99% of the

435
00:23:34.920 --> 00:23:36.990
cases they'll do a better
job that if I was

436
00:23:36.990 --> 00:23:40.140
to write in assembly, plus
I can write 10 times

437
00:23:40.140 --> 00:23:42.390
more code in the same
amount of time. Then we

438
00:23:42.390 --> 00:23:46.490
moved up another level to
languages like and C sharp,

439
00:23:46.520 --> 00:23:49.460
where we don't have to
manage objects, manage the memory

440
00:23:49.460 --> 00:23:52.790
anymore. All of that is
handled for us. And 99%

441
00:23:52.790 --> 00:23:55.370
of the time, the automated
systems do a better job

442
00:23:55.400 --> 00:23:58.310
because now we've had 10,
15 years of improvement. I

443
00:23:58.310 --> 00:24:01.130
think the same graphs are
the same thing. Even JavaScript

444
00:24:01.160 --> 00:24:03.770
is basically the same graph
is the Dawn is this

445
00:24:03.770 --> 00:24:06.440
big tree structure make a
change. And then the browser

446
00:24:06.440 --> 00:24:09.490
figures out how to redraw
it on screen. Yeah. Cause

447
00:24:09.490 --> 00:24:12.940
like you would bump into
problems when you would do

448
00:24:12.940 --> 00:24:15.670
something in graphics and then
you'd go and you'd learn

449
00:24:15.670 --> 00:24:18.490
how double buffering worked. Right.
And then you think to

450
00:24:18.490 --> 00:24:22.060
yourself, gosh, I'm writing a
checkbook application. Why do I

451
00:24:22.060 --> 00:24:23.590
have to know, why do
I care about double buffering?

452
00:24:24.700 --> 00:24:27.190
And the same thing happens
in 3d now where it's

453
00:24:27.190 --> 00:24:30.150
like, you know, just let
the, let the remember the

454
00:24:30.310 --> 00:24:33.700
what's it called? The voodoo.
Oh yeah. Tons of low

455
00:24:33.700 --> 00:24:36.130
level custom coding to squeak
out every bit of it.

456
00:24:36.340 --> 00:24:38.720
Yeah. And now it's just
like, you'd write to direct

457
00:24:38.740 --> 00:24:41.410
X and or open GL
and it just, it works

458
00:24:41.410 --> 00:24:45.190
itself out. Yep. Yeah. Yeah.
And I expect, because I

459
00:24:45.190 --> 00:24:47.360
know not as much about
direct X, but open JLL

460
00:24:47.370 --> 00:24:51.280
is very much a draw
level. Like here draw a

461
00:24:51.280 --> 00:24:53.890
line, draw a polygon, right.
Vertex. Isn't just to handle

462
00:24:53.890 --> 00:24:57.010
it yet. And more and
more people are programming to

463
00:24:57.010 --> 00:24:59.770
things built on top of
open GL where it's 3d

464
00:24:59.770 --> 00:25:02.140
scene graph. Basically. No, that's
a really good way to

465
00:25:02.140 --> 00:25:04.330
put it. Cause they are
doing that. They're saying here's

466
00:25:04.330 --> 00:25:07.450
an actor and that actor
is moving over here. And

467
00:25:07.450 --> 00:25:09.400
then they'll say, well, here's
from a physics engine, right.

468
00:25:09.670 --> 00:25:13.810
Here's who's doing my ragdoll
physics. Now, do you guys

469
00:25:13.840 --> 00:25:16.090
talk to the hardware too?
We just it's over like

470
00:25:16.120 --> 00:25:21.130
three has 3d accelerated. Yeah.
So we just started adding

471
00:25:21.130 --> 00:25:24.760
hardware acceleration. We will use
open GL and director of

472
00:25:24.760 --> 00:25:28.090
three D one available, but
we have software fallbacks for

473
00:25:28.090 --> 00:25:32.080
everything. Right. We also have
pixel level effects, which under

474
00:25:32.080 --> 00:25:34.960
the hood turn into pixel
shaders. So like blur and

475
00:25:34.960 --> 00:25:39.340
drop shadow a hue, rescale,
that kind of stuff. It's

476
00:25:39.340 --> 00:25:42.040
amazing that we are even
talking about like a browser

477
00:25:42.040 --> 00:25:45.100
plugin that cares about pixel
shaders. I'm not even a

478
00:25:45.100 --> 00:25:46.900
hundred percent sure what a
pixel shader is. I mean,

479
00:25:46.900 --> 00:25:50.350
it's either one color or
it's not Well from a

480
00:25:50.350 --> 00:25:53.110
technical perspective, they're interesting for
lots of sorts of reasons.

481
00:25:53.110 --> 00:25:56.020
But from an application developer
point of view, it just

482
00:25:56.020 --> 00:26:00.370
means you're making your user's
graphics card. Do all the

483
00:26:00.370 --> 00:26:03.160
heavy lifting. The more you
can shove up to the

484
00:26:03.160 --> 00:26:05.680
graphics card, the better, right?
Because the graphics card is

485
00:26:05.680 --> 00:26:09.730
optimized for pushing out pixels
really fast. So I could

486
00:26:09.730 --> 00:26:13.030
do a blur operation in
software, or I could do

487
00:26:13.030 --> 00:26:15.880
it in the GPU. The
GPU will be 10 times

488
00:26:15.880 --> 00:26:18.640
faster. It's kind of sad
because I feel bad for

489
00:26:18.640 --> 00:26:20.950
all those Java applet developer
guys from like 10 years

490
00:26:20.950 --> 00:26:23.170
ago that would take, remember
they'd have the here's a

491
00:26:23.170 --> 00:26:25.720
picture. And then right below
it would be the water.

492
00:26:27.400 --> 00:26:29.740
And I was like, Oh
dude, he wrote, that's amazing.

493
00:26:29.740 --> 00:26:31.660
I've never seen anything like
that. And now it's like

494
00:26:32.230 --> 00:26:35.500
an attribute yeah. On an
object. Just make it ripple.

495
00:26:35.740 --> 00:26:38.380
Yup. And then like Apple
has made an entire business

496
00:26:38.380 --> 00:26:43.680
out of the upside down
blurry, shiny desk. This century

497
00:26:43.680 --> 00:26:46.410
is a Drop shadow, I
think. Or the paint. No.

498
00:26:46.470 --> 00:26:49.200
Remember that they used to
put Paige curls on everything.

499
00:26:49.230 --> 00:26:52.340
Oh yeah. I actually was
looking at a magazine that

500
00:26:52.340 --> 00:26:54.350
someone gets, someone sent me
a link to a magazine.

501
00:26:54.350 --> 00:26:56.510
I don't know. I think
it was in flash. And

502
00:26:56.510 --> 00:26:58.940
it was like one of
these Zinio type things where

503
00:26:58.940 --> 00:27:01.910
you can read the magazine
and flash. Oh, right, right.

504
00:27:02.210 --> 00:27:05.960
It had no hot keys.
And you had to not

505
00:27:05.960 --> 00:27:07.490
only just grab you, I
thought you just click the

506
00:27:07.490 --> 00:27:11.210
page, curl every single page,
turn required. You grabbing the

507
00:27:11.210 --> 00:27:15.140
page and dragging it across
the full length of a

508
00:27:15.140 --> 00:27:19.370
1200, 1280 that's progress. And
I was like, okay, well

509
00:27:19.370 --> 00:27:22.190
the first time that was
so fun. But when I

510
00:27:22.190 --> 00:27:25.400
was on like page 80,
I'm no longer interested in

511
00:27:25.400 --> 00:27:27.560
turning the page. I don't
care how interesting your magazine

512
00:27:27.560 --> 00:27:30.320
is. It was almost like
the guy was just really

513
00:27:30.470 --> 00:27:33.380
so excited about his page
curl effect. He had to

514
00:27:33.380 --> 00:27:35.900
find a way to use
it. So I don't see

515
00:27:36.020 --> 00:27:39.500
a lot of Java effects
when I'm kind of bumping

516
00:27:39.500 --> 00:27:42.650
around the net That that's
just because it's very new

517
00:27:43.130 --> 00:27:47.060
Java <inaudible>, which is still
pretty limited shipped in December.

518
00:27:47.480 --> 00:27:49.700
Okay. Oh, isn't it. Wow.
There's like a couple months

519
00:27:49.700 --> 00:27:52.550
old now. Yeah. It seemed
like Java effects is not

520
00:27:52.550 --> 00:27:55.190
Java web start. Java web
start has been part of

521
00:27:55.190 --> 00:27:59.090
core Java since 2003. Okay.
Okay. Cause see, that's a

522
00:27:59.090 --> 00:28:01.550
long time ago and I
was thinking that this was

523
00:28:02.060 --> 00:28:06.590
five-year-old Well, Java effects. We
announced it in Oh seven.

524
00:28:06.980 --> 00:28:09.560
We had something real to
show on stage and Oh

525
00:28:09.560 --> 00:28:12.950
eight. Okay. Preview was last
summer and the one Oh

526
00:28:12.950 --> 00:28:15.860
was December. Then we did
a one, one release, which

527
00:28:15.860 --> 00:28:18.440
was really the mobile targeted
thing, which is the other

528
00:28:18.440 --> 00:28:22.460
major feature of Java effects.
The language for gooeys. Really

529
00:28:22.460 --> 00:28:25.430
good runtime. That does stuff
for you. Right? The major,

530
00:28:25.460 --> 00:28:27.620
the other major feature is
that the exact same code

531
00:28:27.620 --> 00:28:31.820
can run on Java, Emmy
cell phones, Java enabled phones.

532
00:28:31.910 --> 00:28:33.650
Okay. So this is when
you get back to what

533
00:28:33.740 --> 00:28:36.770
we were teasing each other
about screens, all the screens

534
00:28:36.770 --> 00:28:39.500
of your life, the television
screen. And there will eventually

535
00:28:39.500 --> 00:28:41.810
be Java X for TV.
And I think we're going

536
00:28:41.810 --> 00:28:45.350
to show stuff at Java,
one Java VM in my

537
00:28:45.350 --> 00:28:49.160
television, sir, Or something attached
to your toes. Yeah. I

538
00:28:49.160 --> 00:28:52.070
don't know the details, but
it has always been part

539
00:28:52.070 --> 00:28:56.360
of our plan that, you
know, traditionally Java Amie, Java

540
00:28:56.360 --> 00:28:59.990
for cell phones, Java se
which standard edition Java for

541
00:28:59.990 --> 00:29:03.230
desktops. Okay. While they both
use the Java language, the

542
00:29:03.230 --> 00:29:06.050
API has been very different.
And if you were a

543
00:29:06.050 --> 00:29:08.660
Java desktop developer, you had
to learn lots of new

544
00:29:08.660 --> 00:29:12.260
things to be mobile developer
and vice versa. Java X

545
00:29:12.260 --> 00:29:14.780
gets rid of that. It
is one platform. There is

546
00:29:14.780 --> 00:29:18.350
no Java FX, mobile. There's
just Java FX. Oh, okay.

547
00:29:18.590 --> 00:29:21.620
And we ha we have
demos where it's like a

548
00:29:21.620 --> 00:29:24.140
little Yahoo search application. I
can run it in a

549
00:29:24.140 --> 00:29:28.400
web browser from within that
beans are IDE. Right. I

550
00:29:28.400 --> 00:29:31.430
can flip a switch and
say target mobile. Okay. Run.

551
00:29:31.610 --> 00:29:33.260
It will pop up in
the mobile ambulator at the

552
00:29:33.260 --> 00:29:37.460
exact same program code changes
whatsoever. And did the person

553
00:29:37.460 --> 00:29:39.500
really only had to be
aware of the screen thing,

554
00:29:39.530 --> 00:29:42.160
the size of the screen,
right. If right. We have

555
00:29:42.160 --> 00:29:45.490
Things called profiles. Most API
APIs are in the common

556
00:29:45.490 --> 00:29:47.620
profile. If you stick with
a common profile, it will

557
00:29:47.620 --> 00:29:50.860
literally work everywhere. Just all
you have to care about

558
00:29:50.860 --> 00:29:54.600
is screen resizing. Right? Yeah.
I had a, a demo

559
00:29:54.600 --> 00:29:57.600
I gave at our, our,
our conference called PDC professional

560
00:29:57.600 --> 00:30:00.870
developers conference where I took
a server Silverlight to application

561
00:30:01.170 --> 00:30:04.620
and put it on server
light two for mobile. Right,

562
00:30:04.620 --> 00:30:07.350
right. Same kind of thing.
But the, the screen size,

563
00:30:07.350 --> 00:30:09.750
but it was like the
difference between 1280. Right, right.

564
00:30:09.780 --> 00:30:11.430
Versus I don't think it
was like three 20 by

565
00:30:11.430 --> 00:30:14.070
two 40, The cell phone
screens are starting to get

566
00:30:14.070 --> 00:30:17.400
pretty high Rez. I have
a demo phone from demo

567
00:30:17.420 --> 00:30:22.110
to Sony Experia I think
X one really, it has

568
00:30:22.110 --> 00:30:28.320
an 800 by 400 pixel
screen. You know, someone was

569
00:30:28.320 --> 00:30:32.430
talking that there there's word
of an iPad could be,

570
00:30:32.490 --> 00:30:35.850
which would be like large
iPod touch or a small

571
00:30:35.850 --> 00:30:41.460
Newton. The email. Exactly. It's
a message pad 2000, because

572
00:30:41.460 --> 00:30:43.620
it's like, and suddenly I
just had this whole kind

573
00:30:43.620 --> 00:30:45.780
of John Luke Picard thing
where I would be walking

574
00:30:45.780 --> 00:30:51.510
around my kitchen with this
similarly sized as a, as

575
00:30:51.510 --> 00:30:54.210
an iPhone, as far as
thickness, but maybe like nine

576
00:30:54.210 --> 00:30:58.800
inches, I guess I would
run it. Like not a

577
00:30:58.800 --> 00:31:01.680
netbook, you know how Apple
has been. So they've been

578
00:31:01.680 --> 00:31:04.810
bashing on the Netflix, Netflix
lousy experience, you know, they're

579
00:31:04.810 --> 00:31:06.300
going to release them that
course, but they're not going

580
00:31:06.300 --> 00:31:08.250
to call it a netbook.
They're going to call it

581
00:31:08.250 --> 00:31:10.440
the iPad or whatever, because
it's just going to be

582
00:31:10.440 --> 00:31:13.560
the screen part of the
netbook. Right. And that makes

583
00:31:13.560 --> 00:31:18.440
them like, we're awesome. Look,
no keyboard. But like, I

584
00:31:18.450 --> 00:31:20.850
mean, we're sitting here and
I'm using my, my Dell

585
00:31:20.850 --> 00:31:24.360
mini nine. I'm trying to
I'm, I'm covering one eye

586
00:31:24.420 --> 00:31:26.940
and then I'm using my
hand to cover the keyboard.

587
00:31:26.940 --> 00:31:28.620
And it's like, okay, I
could see that being useful

588
00:31:28.620 --> 00:31:31.260
if I could carry on
a tablet, which is as

589
00:31:31.260 --> 00:31:33.090
a Microsoft guy. And I'm
only been a Microsoft guy

590
00:31:33.090 --> 00:31:35.430
for a year, but, but
I have to RA for

591
00:31:35.430 --> 00:31:38.430
the company. Sometimes it's like,
man, tablet, PCs were a

592
00:31:38.430 --> 00:31:42.810
good idea, except they were
seven pounds. Right. And they

593
00:31:42.810 --> 00:31:45.630
folded, you know, they folded.
Yeah. And a flash hard

594
00:31:45.630 --> 00:31:49.110
drive was $5,000. Exactly. That's
someone else will do it

595
00:31:49.140 --> 00:31:51.720
though. We won't get, we
won't get the credit. Yeah.

596
00:31:51.840 --> 00:31:56.550
Okay. I'm better. Not really.
So Java developers do their

597
00:31:56.550 --> 00:32:00.740
work in eclipse or Java
what's what do you guys

598
00:32:01.590 --> 00:32:05.580
Job IDs? The main two
are eclipse and net beans,

599
00:32:05.610 --> 00:32:07.380
which is the one that
sun makes they're both open

600
00:32:07.380 --> 00:32:11.850
source beans. That's okay. That's
the, that's not Java beans,

601
00:32:11.880 --> 00:32:13.680
which is a different thing.
Yeah. Jonathan means it's just

602
00:32:13.680 --> 00:32:17.220
a spec for objects that
you can incorporate. You told

603
00:32:17.220 --> 00:32:20.430
me, I apologize. It's been
a long time. Sure. Netted

604
00:32:20.430 --> 00:32:23.280
beans. Well Debbie's was originally
built on Java beans, which

605
00:32:23.280 --> 00:32:26.160
is why the, because of
the name, which cause it's

606
00:32:26.160 --> 00:32:28.110
not a logical thing to
have in the name of

607
00:32:28.110 --> 00:32:31.500
your ID. So netted beans
is our IDE. We ship

608
00:32:31.530 --> 00:32:33.540
Java X comes with a
plugin for net beans that

609
00:32:33.540 --> 00:32:36.300
does code completion and has
a very nice preview mode

610
00:32:36.420 --> 00:32:38.790
where you can actually see
the graphics that you're composing

611
00:32:38.790 --> 00:32:42.650
on. Every time you change
a letter, it will recompile

612
00:32:42.650 --> 00:32:45.100
it Like split screen. You
have your Java FX code

613
00:32:45.100 --> 00:32:47.260
and then you've got your
preview. Right. And so you

614
00:32:47.260 --> 00:32:49.690
can say, you know, what
I love about Java effects

615
00:32:49.690 --> 00:32:53.230
is it makes coding really
fun. You know, I, there

616
00:32:53.230 --> 00:32:55.270
are things that I wouldn't
have done in swinging because

617
00:32:55.270 --> 00:32:56.920
it would just take too
long and I get bored.

618
00:32:56.950 --> 00:32:59.530
So what's the effects. So
swing was the old user

619
00:32:59.530 --> 00:33:02.920
interface tool. Okay. So I
used the HWT. Right. Which

620
00:33:02.920 --> 00:33:05.890
had like buttons and stack
panels. Right, Right. Swing was

621
00:33:05.890 --> 00:33:07.840
a more advanced version of
that. But it was still

622
00:33:07.840 --> 00:33:12.850
built for the desktop of
like windows 95 Wasn't swing

623
00:33:12.850 --> 00:33:15.430
was the one where it
had themes, but none of

624
00:33:15.430 --> 00:33:18.670
them looked like the OSU
were running. Right. And they

625
00:33:18.670 --> 00:33:21.940
were all horribly ugly. Cause
then Him in the green.

626
00:33:22.010 --> 00:33:26.260
Yeah. Okay. So then, okay.
So swing AWD actually looked

627
00:33:26.260 --> 00:33:30.220
pretty good. It was hard.
We actually use native. Right.

628
00:33:30.220 --> 00:33:32.380
It looked like, like a
Mac or it looked like,

629
00:33:32.630 --> 00:33:35.050
Right. But that also caused
problems because your code would

630
00:33:35.050 --> 00:33:37.660
behave differently in different platforms.
When we had that problem

631
00:33:37.780 --> 00:33:39.730
at Nike, we had to
go and say, if on

632
00:33:39.730 --> 00:33:43.330
Mac, do this right. Swing
was created to solve that

633
00:33:43.660 --> 00:33:46.600
The owner drove everywhere. Right.
Okay. So, well they weren't

634
00:33:46.600 --> 00:33:49.330
real buttons. They were a
picture of a button. Yes.

635
00:33:49.330 --> 00:33:53.170
It was all done in
pure Java code. Okay. And

636
00:33:53.170 --> 00:33:55.660
it, it worked reasonably well,
but there are limitations to

637
00:33:55.660 --> 00:33:59.410
swing. I wrote a book
called swing hacks, which was

638
00:33:59.590 --> 00:34:02.320
500 pages of pushing swing
to its limits. I know

639
00:34:02.320 --> 00:34:05.740
how far it can go.
And it was built for

640
00:34:05.740 --> 00:34:08.050
the era of windows 95.
It was built for the

641
00:34:08.050 --> 00:34:12.040
era of most things aren't
shaped. We don't have very

642
00:34:12.040 --> 00:34:16.360
much translucency. Certainly don't have
shaped windows. It's not common

643
00:34:16.360 --> 00:34:18.820
that you're going to have
your, your user interface controls

644
00:34:18.820 --> 00:34:22.360
actually slide across the screen.
So doing those things are

645
00:34:22.360 --> 00:34:25.930
very difficult. Lots of custom
code or simply impossible because

646
00:34:25.930 --> 00:34:28.900
the underlying platform can't support
it right now. It's the

647
00:34:28.900 --> 00:34:32.650
21st century. We have compositing
window managers. We have shaped

648
00:34:32.650 --> 00:34:36.190
windows. We have fast graphics
cards. We can have gradients,

649
00:34:36.190 --> 00:34:39.790
we can move things across
space and time, but the

650
00:34:39.790 --> 00:34:42.760
UI tool kit just wasn't
up for it. Right. Okay.

651
00:34:42.790 --> 00:34:44.860
So that's where Java FX
comes in. This is our

652
00:34:44.860 --> 00:34:49.900
chance to reinvent desktop Java,
client side, Java learning the

653
00:34:49.900 --> 00:34:53.410
lessons of the last 15
years, but taking advantage of

654
00:34:53.410 --> 00:34:55.840
modern techniques. So putting this
into the context of the

655
00:34:55.870 --> 00:34:59.350
vocabulary, rather of the dinette
guy. So like when forms,

656
00:34:59.350 --> 00:35:01.600
you just kind of like,
you know, native, native controls,

657
00:35:01.600 --> 00:35:04.810
a buttons, a button, and
then WPF is our kind

658
00:35:04.810 --> 00:35:08.860
of reinvention of desktop. Exactly.
Windows using modern technology. And

659
00:35:08.860 --> 00:35:10.690
it can still look like
a normal application. I mean

660
00:35:10.690 --> 00:35:13.120
sometimes when people demo these
kinds of things, they go

661
00:35:13.750 --> 00:35:16.240
completely over the top. Right.
But the, all the page

662
00:35:16.240 --> 00:35:18.340
girls on it. Yeah. Yeah.
Here's, here's a line of

663
00:35:18.340 --> 00:35:21.340
business application with this page.
Corolla it's own flip it

664
00:35:21.340 --> 00:35:24.370
over transparent green buttons. Right.
You can probably do those

665
00:35:24.370 --> 00:35:27.130
things in Java effects too.
Right. You can, but where

666
00:35:27.130 --> 00:35:29.530
you can be more kind
of buttoned down, right. And

667
00:35:29.530 --> 00:35:34.060
look like an actual line
of business application. Exactly. And

668
00:35:34.120 --> 00:35:37.500
take advantage of greater speed.
The fact that runs the

669
00:35:37.500 --> 00:35:40.920
same everywhere, all of the
implementation fixes we put in

670
00:35:41.340 --> 00:35:43.710
and because Java effects, like
I said, it was built

671
00:35:43.740 --> 00:35:47.220
for gooeys binding. The language
means you can do things

672
00:35:47.220 --> 00:35:49.920
like I have a business
object, which represents like a

673
00:35:49.920 --> 00:35:53.610
person, you know, and it
has a name field on

674
00:35:53.610 --> 00:35:56.610
it and a address field.
I can create a gooey

675
00:35:56.610 --> 00:35:59.190
and literally bind the two
together in code where I

676
00:35:59.190 --> 00:36:05.850
just say address field dot
text equals bind a person

677
00:36:05.880 --> 00:36:10.780
object.name. And then the underlying
system makes it happen. That's

678
00:36:10.790 --> 00:36:12.680
so crazy. Cause we have
a similar thing we have

679
00:36:12.740 --> 00:36:15.560
binding in XAML did you,
do you look at our

680
00:36:15.560 --> 00:36:18.830
stuff? I started to look
at it because I met

681
00:36:18.830 --> 00:36:22.220
some of the Silverlight of
Angeles at aura dev last

682
00:36:22.220 --> 00:36:25.610
year in Sweden. Yeah. And
it, there are some differences

683
00:36:25.610 --> 00:36:27.950
between our platforms, but there's
a lot of similarities I

684
00:36:27.950 --> 00:36:30.260
think, because we're all trying
to solve the same problem.

685
00:36:30.260 --> 00:36:33.890
Yeah. Does it make you
wonder if our bosses, like

686
00:36:33.890 --> 00:36:36.140
the people who come up
with this stuff are like

687
00:36:36.590 --> 00:36:38.330
in, in like, I don't
know, talking to each other

688
00:36:38.330 --> 00:36:40.190
or do you, I mean,
we don't, we asked a

689
00:36:40.190 --> 00:36:42.830
little bit about this question
earlier, but I mean, could

690
00:36:42.830 --> 00:36:45.020
it really be just that
this is the only direction

691
00:36:45.020 --> 00:36:47.270
that our simple minds can
go and then we're all

692
00:36:47.270 --> 00:36:49.430
going there at the same
time. Cause I suspect if

693
00:36:49.430 --> 00:36:51.770
we had a flash guy
on the show that they

694
00:36:51.770 --> 00:36:54.140
would, the same things happen.
Yeah. Flex does a lot

695
00:36:54.140 --> 00:36:56.690
of the same things it's
because we're trying to solve

696
00:36:56.690 --> 00:36:58.670
the same problem. Yeah. And
this is the only way

697
00:36:58.670 --> 00:37:00.410
though. I mean just because
we all have the same

698
00:37:00.410 --> 00:37:01.880
problem doesn't mean that we
would all come up with

699
00:37:01.880 --> 00:37:04.730
the same similar data binding.
We have our own little

700
00:37:05.390 --> 00:37:07.400
twists on it. I'm sure
our binding is different than

701
00:37:07.400 --> 00:37:11.930
yours. We use CSS for
skinning. We have some plugins

702
00:37:11.930 --> 00:37:15.770
for Photoshop and illustrator that
are different than the, the

703
00:37:15.770 --> 00:37:19.340
expression design suite. But if
you take a look at

704
00:37:19.340 --> 00:37:21.320
it from a high level,
strip off all the brand

705
00:37:21.320 --> 00:37:25.640
names, technology details, we're trying
to solve the same problem,

706
00:37:27.740 --> 00:37:30.580
Looking back 20 years. And
they look at this, they're

707
00:37:30.580 --> 00:37:33.140
going to say, yeah, well,
you know, humans were heading

708
00:37:33.140 --> 00:37:36.230
in this direction as opposed
to these four or three.

709
00:37:36.230 --> 00:37:38.390
I don't know. I'm wondering,
I'm wondering more and more

710
00:37:38.390 --> 00:37:41.120
if we need to be
more worried about JavaScript and

711
00:37:41.120 --> 00:37:45.530
HTML five than fighting, Putting
a lot of money. I

712
00:37:45.530 --> 00:37:47.990
wonder if of the four
of us, of Adobe, Microsoft,

713
00:37:47.990 --> 00:37:51.890
sun and Google. If, if,
if it's who's the most

714
00:37:51.890 --> 00:37:55.670
evil, right. We all know
what the knee jerk reaction

715
00:37:55.850 --> 00:37:57.620
is. Right. I'm starting to
wonder if that's not the

716
00:37:57.620 --> 00:37:59.720
case. I don't know. I
gotta get a Google guy

717
00:37:59.720 --> 00:38:01.400
on the show and ask
him what the math Yeah.

718
00:38:01.820 --> 00:38:05.750
Ask him about GWT WT,
lets you write Java code

719
00:38:05.750 --> 00:38:09.440
on your server. That essentially
is compiled into JavaScript where

720
00:38:09.440 --> 00:38:15.170
they're literally using JavaScript purely
as their virtual machine. Oh

721
00:38:15.170 --> 00:38:18.470
wow. Someone's here that I
need gene we're in Eugene.

722
00:38:18.470 --> 00:38:21.110
Someone is someone is smoking
and it's being picked up

723
00:38:21.740 --> 00:38:24.560
and they've burned something down
and they've burned something down.

724
00:38:25.140 --> 00:38:28.730
GW has Google windowing, toolkit,
Google web toolkit, web toolkit.

725
00:38:28.760 --> 00:38:33.260
Right. Essentially you write Java
code, which has compiled on

726
00:38:33.260 --> 00:38:36.820
your server. Right. And then
it actually produces These gigantic

727
00:38:36.820 --> 00:38:39.460
blobs of JavaScript that you
would never. So JavaScript would

728
00:38:39.460 --> 00:38:42.850
be, are your byte code?
My I L yes, they

729
00:38:42.850 --> 00:38:46.420
are essentially using JavaScript as
by code. Interesting. That's why

730
00:38:46.420 --> 00:38:49.420
it's in their interest for
JavaScript interpreters to be faster.

731
00:38:49.570 --> 00:38:52.600
You know, one of the
things that never one little

732
00:38:52.600 --> 00:38:55.000
company that never really got
its its thing, it never

733
00:38:55.000 --> 00:38:59.320
really happened was called open
Laszlo. Oh yeah. Those guys.

734
00:39:00.100 --> 00:39:02.560
So open Laszlo had this
thing where you would write

735
00:39:02.560 --> 00:39:05.810
in angle brackets and XML
the description of a, of

736
00:39:05.810 --> 00:39:07.660
a, of a window and
you'd do it in the

737
00:39:07.660 --> 00:39:13.720
open Laszlo language. And it
would compile to either JavaScript,

738
00:39:13.840 --> 00:39:17.770
DHT, mill or flash. And
they were always talking about

739
00:39:17.770 --> 00:39:20.350
maybe doing it into Silverlight,
but I think they faded

740
00:39:20.350 --> 00:39:21.670
away. I don't know what
the status of them is,

741
00:39:21.910 --> 00:39:23.790
but it was a similar
kind of an idea where

742
00:39:23.790 --> 00:39:28.150
like, let's make a language
that is totally implementation nonspecific.

743
00:39:28.240 --> 00:39:31.000
Right. And then we'll use
everyone else's runtime. So as

744
00:39:31.000 --> 00:39:34.060
long as everyone's locked into
us, they can push us

745
00:39:34.060 --> 00:39:36.730
meaning open Laszlo. Right. Then
we can push a button

746
00:39:37.120 --> 00:39:38.650
and they can choose what
they want to be locked

747
00:39:38.650 --> 00:39:42.700
into. Right. Or JavaScript, which
may or may not be

748
00:39:42.700 --> 00:39:44.860
the illusion of being not
locked into anyone. I guess

749
00:39:46.500 --> 00:39:49.540
that is definitely being, you
may not be controlled. That's

750
00:39:49.540 --> 00:39:54.790
definitely driven by a very
small, yeah. Interesting. I don't

751
00:39:54.790 --> 00:39:56.140
know which way direction it's
going to go. It'll be

752
00:39:56.140 --> 00:39:57.730
fun to listen to this
in five years and see.

753
00:39:57.810 --> 00:40:03.190
Yeah. Cool. Well Josh, thanks
a lot for sitting down

754
00:40:03.190 --> 00:40:04.990
with me today. I really
appreciate you taking the time.

755
00:40:05.770 --> 00:40:08.890
Alright. Well this has been
another episode of Hanselminutes and

756
00:40:08.920 --> 00:40:10.300
we'll see you again next
week.

