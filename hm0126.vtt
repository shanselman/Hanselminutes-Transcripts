WEBVTT FILE

1
00:00:12.060 --> 00:00:16.650
From Hanselman it's dot com.
It's Hanselman. It's a weekly

2
00:00:16.650 --> 00:00:20.910
discussion with web developer and
technologist and Scott Hanselman hosted

3
00:00:20.910 --> 00:00:25.590
by Carl Franklin. This is Lauren's
Ryan announcing show number one

4
00:00:25.590 --> 00:00:32.760
26. Recorded live Friday, August 8th, 2008.
Support for Hanselman is provided

5
00:00:32.760 --> 00:00:37.020
by tolerant rad controls, the
most comprehensive suite of components

6
00:00:37.020 --> 00:00:46.710
for windows forms and asp.net
web application. online@wwwdotteldrik.com. Support is

7
00:00:46.710 --> 00:00:52.050
also provided by.net developers journal.
The world's leading.net developer magazine

8
00:00:52.590 --> 00:00:58.560
online at www dot <inaudible>
dot com. In this episode,

9
00:00:58.560 --> 00:01:04.830
Scott talks with jQuery creator,
John Resig. Hi, this is

10
00:01:04.830 --> 00:01:07.140
Scott Hanselman and this is
another episode of Hansel minutes.

11
00:01:07.200 --> 00:01:10.560
And I'm sitting down today
with John Resig, the creator

12
00:01:10.560 --> 00:01:14.010
of jQuery and JavaScript evangelists
for Mozilla. Thanks a lot

13
00:01:14.010 --> 00:01:18.120
for taking the time to
chat with me today. So

14
00:01:18.390 --> 00:01:21.900
you brought jQuery to the
world in January of 2006

15
00:01:21.900 --> 00:01:26.700
at, at bar camp 2006.
Is that right? And that

16
00:01:26.700 --> 00:01:29.280
wasn't very long ago. It
just seems like there's so

17
00:01:29.280 --> 00:01:31.800
much stuff on the internet
that's happening so quickly that

18
00:01:32.470 --> 00:01:34.650
it feels like jQuery has
always been around, but I'm

19
00:01:34.650 --> 00:01:36.750
looking at my calendar and
that was not very long

20
00:01:36.750 --> 00:01:40.520
ago. Yeah. A lot could
happen to the, just a

21
00:01:40.520 --> 00:01:44.270
couple of years. Yeah. Did,
did this, was this something

22
00:01:44.270 --> 00:01:46.430
that came to you as
a Eureka moment? Did it,

23
00:01:47.450 --> 00:01:48.920
I had you, or had
you been working on this

24
00:01:48.920 --> 00:01:51.740
for, you know, in the
quiet for a long period

25
00:01:51.740 --> 00:01:55.550
of time before you brought
it out? I guess, I

26
00:01:55.550 --> 00:01:59.030
guess in the quiet, I
mean, I'm, I guess traditionally

27
00:01:59.140 --> 00:02:02.960
I'm pretty much a hacker
at heart. You know, I

28
00:02:02.960 --> 00:02:05.810
like to, I always have
bunches of little side projects

29
00:02:05.810 --> 00:02:09.290
that I like to work
on in my spare time.

30
00:02:09.710 --> 00:02:14.570
And a couple of these
side projects were, were, were

31
00:02:14.570 --> 00:02:17.870
just tools. And I had
built that sort of came

32
00:02:17.870 --> 00:02:21.680
together in the form of,
of jQuery. So like I

33
00:02:21.680 --> 00:02:27.020
was originally working an animation,
a toolkit that I, that

34
00:02:27.020 --> 00:02:28.760
I was just playing around
with. And then I was

35
00:02:28.760 --> 00:02:34.280
also working on a selector
library for doing CSS, selectors

36
00:02:34.280 --> 00:02:40.310
and JavaScript. And these two
tools came together and I

37
00:02:40.970 --> 00:02:45.080
into just this little, little
framework. So it was more

38
00:02:45.080 --> 00:02:49.070
of an amalgam of rather
than doing something from, from

39
00:02:49.070 --> 00:02:53.270
the outright. Hmm. A lot
of people say that it

40
00:02:53.300 --> 00:02:55.580
fits together in such a
natural way in such a

41
00:02:55.580 --> 00:02:59.170
comfortable and, and maybe fluent
as a cliche, but in

42
00:02:59.170 --> 00:03:01.300
a very fluent way, you
know, when did it come

43
00:03:01.300 --> 00:03:03.370
to you that you should
have the jQuery object be

44
00:03:03.370 --> 00:03:07.530
returned from every method and
then chain things together? One

45
00:03:07.770 --> 00:03:13.750
thing that I wanted was
I wanted to is, is

46
00:03:14.700 --> 00:03:16.350
what I wanted to do
is I want it to

47
00:03:16.350 --> 00:03:23.280
have the shortest syntax possible
for doing things within the

48
00:03:23.280 --> 00:03:27.090
document. And so, so this,
you know, from manipulating for

49
00:03:27.210 --> 00:03:30.780
attaching events, for modifying an
attribute, so all of these

50
00:03:30.780 --> 00:03:35.400
things I wanted have the
shortest physical code. So one,

51
00:03:35.970 --> 00:03:38.160
you know, sort of, I
guess, I guess, you know,

52
00:03:38.160 --> 00:03:40.860
hack that I had that
I had for doing this

53
00:03:40.860 --> 00:03:43.740
was, this is cheating. You
know, we turning the object

54
00:03:43.740 --> 00:03:47.280
itself because I could do
that. And it was all

55
00:03:47.290 --> 00:03:49.200
the shorts that the syntax
to be in the shorter,

56
00:03:49.530 --> 00:03:52.050
it was, I guess it
was more incidental that it

57
00:03:52.050 --> 00:03:58.080
ended up becoming actually usable
and interesting because it is

58
00:03:58.410 --> 00:04:00.600
when, when I saw it
is more of just that

59
00:04:00.630 --> 00:04:04.380
I wanted it to just
be really terse, Really. So

60
00:04:04.380 --> 00:04:06.810
terseness was the goal, not
fluency. He didn't want it

61
00:04:06.810 --> 00:04:11.910
to read like English, Not,
not explicitly. I mean, obviously

62
00:04:11.910 --> 00:04:16.980
I wanted it to, to
still be understandable. I mean,

63
00:04:16.980 --> 00:04:24.360
because I mean, obviously you
can pretty easily sacrifice usability

64
00:04:24.390 --> 00:04:26.970
when you want to shoot
for chosenness. There's a lot

65
00:04:26.970 --> 00:04:29.160
of languages that are, you
know, a good example of

66
00:04:29.160 --> 00:04:32.460
that, but I, I, you
know, so I didn't want

67
00:04:32.520 --> 00:04:37.740
that to occur. So instead
I was wanting to see

68
00:04:37.740 --> 00:04:43.380
how far you could get
without, you know, without having

69
00:04:43.380 --> 00:04:46.830
cryptic methods while you still
having things that, that made

70
00:04:46.830 --> 00:04:51.660
sense. Now, when you, when
you, when you chain these

71
00:04:51.660 --> 00:04:55.050
kinds of things together, and
you say something like, you

72
00:04:55.050 --> 00:04:58.110
know, dollar sign, div dot
add, and then you start

73
00:04:59.280 --> 00:05:03.030
kind of hopping back and
forth between strings that have

74
00:05:03.030 --> 00:05:07.080
semantics and methods that have
semantics. How did you find

75
00:05:07.080 --> 00:05:10.260
the balance between kind of
the, the semantics that were

76
00:05:10.260 --> 00:05:13.320
tunneled into a string, like
saying, you know, P dot

77
00:05:13.320 --> 00:05:16.950
quote or dev dot test
versus breaking that out into

78
00:05:16.950 --> 00:05:19.440
methods? Cause I, I suspect
there's a lot of, of

79
00:05:19.440 --> 00:05:22.440
string parsing going on because
you've got semantics for like

80
00:05:22.440 --> 00:05:27.810
CSS selector, strings and things.
Yeah. Yeah. So yeah, I

81
00:05:27.840 --> 00:05:31.770
guess it's actually good. There's,
there's certainly a lot of

82
00:05:32.250 --> 00:05:35.460
method overloading going on in
jQuery. Cause there's no doubt

83
00:05:35.460 --> 00:05:41.130
about that. And you know,
even down to the argument

84
00:05:41.130 --> 00:05:45.840
level there, but I think
this is something that's sort

85
00:05:45.840 --> 00:05:49.770
of Ru is it's, you
know, as the age of

86
00:05:49.800 --> 00:05:55.140
I developed, you know, being
able to define that, you

87
00:05:55.140 --> 00:06:00.080
know, if, if a selector
was ever coming in, then

88
00:06:00.200 --> 00:06:03.350
it should be a string
and it should also be

89
00:06:03.350 --> 00:06:07.610
able to accept these other
types of arguments. So what

90
00:06:07.610 --> 00:06:09.980
happened is, is that internally
in J crew, there was

91
00:06:09.980 --> 00:06:13.850
a number of methods that
started to be constructed that

92
00:06:13.850 --> 00:06:16.700
could accept any of these
generic arguments, such as a

93
00:06:16.700 --> 00:06:20.150
CSS selector stream or a
Dom element or an array

94
00:06:20.150 --> 00:06:23.240
of Dom elements. And it
just, all these varieties and

95
00:06:23.240 --> 00:06:25.370
the output would always be
the same. The output would

96
00:06:25.400 --> 00:06:29.510
always be an array of
Dom elements. So that way

97
00:06:29.540 --> 00:06:33.620
you could have these methods
that could accept any of

98
00:06:33.620 --> 00:06:38.720
these inputs and it would
still have the same effective

99
00:06:38.740 --> 00:06:43.090
behavior. Is there any, can
you get in trouble with

100
00:06:43.090 --> 00:06:45.210
jQuery? I mean, can you,
does this is the syntax

101
00:06:45.210 --> 00:06:48.340
so open and flexible that
you can, you can write

102
00:06:48.490 --> 00:06:50.770
something that looks like an
auto work, but it just

103
00:06:50.800 --> 00:06:54.250
doesn't because the, the underlying
engine just didn't see it

104
00:06:54.250 --> 00:07:00.610
coming. And I mean, it's,
at this point, we we've

105
00:07:00.610 --> 00:07:04.010
worked out most edge cases
pretty well. I mean, we,

106
00:07:04.010 --> 00:07:08.140
we have a pretty strong
test. We here where we

107
00:07:08.140 --> 00:07:11.800
do check for a lot
of these for, for potential

108
00:07:11.800 --> 00:07:16.990
weirdness. So in most cases
now, I think we're quite

109
00:07:16.990 --> 00:07:21.490
solid. Now, what do you
do your development? And I've

110
00:07:21.490 --> 00:07:24.190
found at least I'm a
windows guy, although I've got

111
00:07:24.190 --> 00:07:25.630
a couple of Macs in
the house, but I really

112
00:07:25.630 --> 00:07:28.480
find that I'm pretty much
stuck in, you know, note

113
00:07:28.480 --> 00:07:31.150
pad and, and Firebug is
where I live when it

114
00:07:31.150 --> 00:07:33.760
comes to JavaScript development. It
just doesn't feel like on

115
00:07:33.760 --> 00:07:36.940
the windows side that there's
a, a full fledged, you

116
00:07:36.940 --> 00:07:39.820
know, world for developing this
kind of stuff, an ID,

117
00:07:40.360 --> 00:07:42.340
you know, Aptana is pretty
good. The new version of

118
00:07:42.340 --> 00:07:44.860
visual studio is pretty good,
but Java script for me

119
00:07:44.860 --> 00:07:48.120
still feels kind of loosey
goosey, which, you know, it

120
00:07:48.120 --> 00:07:51.100
makes sense given the dynamic
dynamicism of the language, but

121
00:07:51.250 --> 00:07:54.220
w what do you use
for your development of JavaScript

122
00:07:54.400 --> 00:07:58.360
application? I'm, I'm very similar.
I mean, I, I use

123
00:07:58.870 --> 00:08:03.640
fireball a lot, you know,
significantly within my development, but

124
00:08:03.730 --> 00:08:10.300
I don't use any IDs
in particular. I just, I

125
00:08:10.300 --> 00:08:14.410
use a couple of different
editors. I use them. I

126
00:08:14.410 --> 00:08:17.680
also use an editor for
OSS called off. So ISA

127
00:08:17.680 --> 00:08:22.450
edit, I looked at what
it allows you to collaborate

128
00:08:22.450 --> 00:08:26.320
in real time with other
people. It's, it's a pretty

129
00:08:26.320 --> 00:08:31.180
simple editor, but the, the
collaboration is, is quite nice

130
00:08:31.210 --> 00:08:34.210
legends that I know a
number of occasions, but I

131
00:08:34.250 --> 00:08:39.100
I'm. Yeah. I'm not really
a bells and whistles kinda

132
00:08:39.100 --> 00:08:41.890
guy. So I just, I
would just use a straightforward

133
00:08:41.890 --> 00:08:44.770
tool. Yeah. You do a
lot of peer programming though

134
00:08:44.770 --> 00:08:48.400
that way. It, it depends
on the situation. If I'm

135
00:08:48.400 --> 00:08:52.300
doing the situation where I've
probably been, be most useful

136
00:08:52.330 --> 00:08:55.290
is in pure web development.
So yeah, if I'm, if

137
00:08:55.290 --> 00:08:59.460
I'm working on a web
page and like there's one

138
00:08:59.460 --> 00:09:02.700
person editing the CSS as
one person editing the JavaScript's

139
00:09:02.790 --> 00:09:06.090
or two people editing a
CSS, or, you know, that

140
00:09:06.090 --> 00:09:08.880
way you can all pull
these houses together in real

141
00:09:08.880 --> 00:09:13.470
time and be able to,
you know, work very dynamically

142
00:09:13.470 --> 00:09:18.080
in that matter. I get
the impression from, from reading

143
00:09:18.080 --> 00:09:21.020
your blog and from looking
at the projects that you're

144
00:09:21.020 --> 00:09:24.260
very much kind of a
top down developer that really

145
00:09:24.260 --> 00:09:27.980
it's the result that matters.
And you, you, you visualize

146
00:09:27.980 --> 00:09:30.710
what you want it to,
what you want the end

147
00:09:30.710 --> 00:09:34.070
result to look like. And
then you, you kind of

148
00:09:34.910 --> 00:09:37.910
push down and make sure
that the underlying libraries support

149
00:09:37.910 --> 00:09:40.970
that in an elegant and
an elegant way is that

150
00:09:41.300 --> 00:09:44.420
that's just, again, gleaning this
from reading your projects. And

151
00:09:44.720 --> 00:09:49.640
you've got all these great
examples where like, you know,

152
00:09:49.640 --> 00:09:52.250
like just little stuff like
the sparklines library, we want

153
00:09:52.250 --> 00:09:55.940
the, the way that you
implement this as simple as

154
00:09:55.940 --> 00:09:59.480
possible at the, at the
very top level. Is that

155
00:09:59.480 --> 00:10:01.700
how you work? Did you
think about the example first?

156
00:10:03.630 --> 00:10:05.540
You think about the core
first you go from the

157
00:10:05.540 --> 00:10:08.150
outside and or from the
inside out. It depends, I

158
00:10:08.150 --> 00:10:11.480
guess it depends on the
project. I can think of

159
00:10:11.480 --> 00:10:15.020
two projects in particular where
I've words off from the

160
00:10:15.020 --> 00:10:20.210
outside end one was recently
released. I poured it there's

161
00:10:20.210 --> 00:10:27.080
this, this visualization programming language
called processing implemented in, in

162
00:10:27.080 --> 00:10:32.570
Java typically. And I ported
that to Java script. So

163
00:10:32.930 --> 00:10:36.170
in that case, I worked
hopped out. I took a

164
00:10:36.170 --> 00:10:40.070
whole bunch of demos that
worked, and I went through

165
00:10:40.640 --> 00:10:43.280
one by one and I
made each demo work. And

166
00:10:43.280 --> 00:10:45.140
in order to do that,
you know, I implemented a

167
00:10:45.140 --> 00:10:48.050
number of aspects, you know,
a parser for the programming

168
00:10:48.050 --> 00:10:51.560
language of various aspects of
the API, you know, and

169
00:10:51.590 --> 00:10:55.400
just going through a piece
by piece and getting more

170
00:10:55.400 --> 00:10:59.090
and more demos to work.
I'm not sure if that's,

171
00:11:00.290 --> 00:11:02.750
I wouldn't say that that's
the best way to develop

172
00:11:02.840 --> 00:11:08.150
at least in a holistic
sense, simply because the inevitability

173
00:11:08.270 --> 00:11:14.000
of the gaps in your
development. But if you work,

174
00:11:14.150 --> 00:11:16.430
you know, you can, you
can work around this though.

175
00:11:16.880 --> 00:11:18.860
Well, the reason I asked
that is that there's, there's

176
00:11:18.860 --> 00:11:24.230
a thoughtfulness to Jake, to
jQuery as an example. And

177
00:11:24.500 --> 00:11:27.830
even the, even the code
for processing the processing JS

178
00:11:27.830 --> 00:11:30.710
is so clean that it
makes it makes me wonder

179
00:11:30.710 --> 00:11:34.250
what, what does that cleanliness
come from a real clear

180
00:11:34.250 --> 00:11:36.830
understanding of where you want
it to go from the

181
00:11:36.830 --> 00:11:39.320
inside out where you, you
visualize the design and you

182
00:11:39.320 --> 00:11:41.420
knew that it was gonna
turn out that way, or

183
00:11:41.420 --> 00:11:45.920
was it driven by requirements
of the, the end result?

184
00:11:47.660 --> 00:11:53.410
I guess typically it's more
driven by requirements. I, I

185
00:11:53.410 --> 00:11:58.420
like to see things grow
organically and you have to

186
00:11:58.430 --> 00:12:01.660
sort of, as I, you
know, as a develop them,

187
00:12:02.140 --> 00:12:04.180
but then, and then in,
you know, and kind of

188
00:12:04.180 --> 00:12:09.040
mold it as it comes
towards a final result, I

189
00:12:09.040 --> 00:12:11.880
enjoyed that style of development,
at least. Do you do

190
00:12:11.880 --> 00:12:15.210
a lot of refactoring? Is
it very iterative? Yeah. Yeah.

191
00:12:15.870 --> 00:12:19.770
Very much so Now, one
of the neat things about

192
00:12:19.770 --> 00:12:21.390
jQuery, one of the things
that I think made it

193
00:12:21.390 --> 00:12:23.310
take off was this, this
notion of this, of a

194
00:12:23.320 --> 00:12:27.390
plugin, but because JavaScript is
so, so it's a loose,

195
00:12:27.420 --> 00:12:30.870
it's so flexible. It's pretty,
it's a pretty loose definition.

196
00:12:30.870 --> 00:12:34.170
A plugin in jQuery, right.
Is just a method or

197
00:12:34.180 --> 00:12:36.750
series of methods that also
return the jQuery object. Is

198
00:12:36.750 --> 00:12:40.050
that right? Yep. I was
just wondering why, why it's

199
00:12:40.050 --> 00:12:43.200
been successful because, you know,
I was a prototype and,

200
00:12:43.230 --> 00:12:45.930
you know, Scriptaculous guy for,
for the longest time. And

201
00:12:45.930 --> 00:12:47.400
then just something about J
crew. I don't know if

202
00:12:47.400 --> 00:12:50.460
it was the smallness of
it or the, the richness

203
00:12:50.460 --> 00:12:52.470
of the plugin library. I'm
trying to get an understanding

204
00:12:52.470 --> 00:12:54.990
of what, why is it
that this particular library is

205
00:12:54.990 --> 00:12:59.730
taken off and A big
thing for me that, that

206
00:12:59.760 --> 00:13:07.470
that's really gone on me.
Simplicity is just a simplicity

207
00:13:07.500 --> 00:13:11.490
of just rules in so
many ways. It can, that,

208
00:13:11.490 --> 00:13:17.010
you know, it makes development
simpler. You're able to leverage

209
00:13:17.010 --> 00:13:21.420
it more and it's easier
to learn. It's easier to

210
00:13:21.420 --> 00:13:26.550
document it's in so many
ways, it's I find a

211
00:13:26.550 --> 00:13:34.290
more optimal experience. So when
you optimize for simplicity in

212
00:13:34.290 --> 00:13:38.160
your development, in your code,
so the result is, ends

213
00:13:38.160 --> 00:13:43.050
up being better all around
this carries on into, into

214
00:13:43.250 --> 00:13:48.270
plugin development. If you, you
know, if you make adding

215
00:13:48.270 --> 00:13:52.080
in plugins and developing plugins,
really simple, there's going to

216
00:13:52.080 --> 00:13:54.540
be a lot of plugins.
And which is, which is

217
00:13:54.540 --> 00:13:56.820
the case with jQuery there's,
there's hundreds and hundreds of

218
00:13:56.820 --> 00:13:59.700
plugins. And, you know, and
even to the point where

219
00:13:59.700 --> 00:14:03.870
there's a lot of duplication,
but I've, I don't particularly

220
00:14:03.870 --> 00:14:07.890
think that this is necessarily
a bad thing because when,

221
00:14:07.920 --> 00:14:10.650
when it's that simple for
a developer to get in

222
00:14:10.740 --> 00:14:14.850
and start, you know, extending
it in that manner, there's

223
00:14:14.850 --> 00:14:19.140
a lot of healthy competition
and you really see excellent

224
00:14:19.140 --> 00:14:21.390
code start to rise to
the top, which I think

225
00:14:21.390 --> 00:14:24.990
is great. Hi, this is
Scott Hanselman with a word

226
00:14:24.990 --> 00:14:27.240
from our sponsor. Do you
know how to build web

227
00:14:27.270 --> 00:14:31.410
2.0 Ajax applications with web
1.0 components? You really can't.

228
00:14:31.470 --> 00:14:33.450
If you want to do
the next generation web applications

229
00:14:33.780 --> 00:14:36.420
you'll need next generation components,
just like the ones that

230
00:14:36.420 --> 00:14:39.090
our friends at Telerik have
got their rad controls for

231
00:14:39.090 --> 00:14:42.000
ESPN at Ajax. It's a
huge pack of web controls

232
00:14:42.000 --> 00:14:46.320
built on top of asp.net
Ajax. That'll add previously impossible

233
00:14:46.320 --> 00:14:50.280
performance interactivity to your next
project. The new controls mirror,

234
00:14:50.280 --> 00:14:55.070
the Ajax from asp.net. So
development is really straightforward. The

235
00:14:55.070 --> 00:14:57.320
client scripts are shared. So
loading time is not a

236
00:14:57.320 --> 00:14:59.720
problem. If you just set
a couple of properties and

237
00:14:59.720 --> 00:15:01.940
you'll be able to automatically
bind a web services for

238
00:15:01.940 --> 00:15:05.830
a really efficient operation, the
new rad editor from ESPN

239
00:15:05.870 --> 00:15:09.440
Ajax, Telerik loads up to
four times faster than before.

240
00:15:09.620 --> 00:15:12.080
And the new rad grid
handles thousands of records and

241
00:15:12.080 --> 00:15:14.900
just milliseconds, but as always,
it's best to try for

242
00:15:14.900 --> 00:15:18.890
yourself. So you can visit
<inaudible> dot com slash ASP,

243
00:15:18.890 --> 00:15:23.450
net Ajax, and download a
trial. Thanks a lot. What

244
00:15:23.450 --> 00:15:25.130
are some of the plugins
that you find yourself turning

245
00:15:25.130 --> 00:15:26.930
to that are ones that
you didn't write? I mean,

246
00:15:26.930 --> 00:15:29.060
do you use, do you
use interface? Do you use

247
00:15:29.060 --> 00:15:30.650
the, you know, what are
the, what are the plugins

248
00:15:30.650 --> 00:15:34.990
that you turn to? I
mean, there's a, there's a

249
00:15:34.990 --> 00:15:39.880
bunch like, I mean, definitely
for, you know, user interface

250
00:15:39.880 --> 00:15:44.710
components, I'm, I'm almost always
training the plugins. I have

251
00:15:44.710 --> 00:15:48.700
very little desire to write
another accordion or to write

252
00:15:48.700 --> 00:15:52.420
another tab, you know, component.
So, I mean, in those

253
00:15:52.420 --> 00:15:56.020
cases, you know, thankfully a
lot of those now have

254
00:15:56.070 --> 00:16:00.670
integrated back into jQuery UI,
which is a project of

255
00:16:00.670 --> 00:16:05.470
ours where we maintain UI
components. So I, I frequently

256
00:16:05.470 --> 00:16:08.710
refer back to a jQuery
UI. There's also a number

257
00:16:08.710 --> 00:16:11.950
of other plugins. There's one
called a live query, which

258
00:16:11.950 --> 00:16:17.230
is quite cool and makes
the CFS queries and in

259
00:16:17.230 --> 00:16:21.670
J Cray work live. So
if you add new information

260
00:16:21.670 --> 00:16:23.980
to the document at any
point, so like from an

261
00:16:24.040 --> 00:16:28.090
Ajax request or what have
you, it will run the

262
00:16:28.090 --> 00:16:31.540
query again. And one in
an effective live, which is,

263
00:16:31.630 --> 00:16:37.540
which is quite, it's quite
powerful. And another plugin that

264
00:16:37.540 --> 00:16:41.830
I use a lot called
the form plugin, and it

265
00:16:42.130 --> 00:16:45.490
it's able to take any
existing form and turn it

266
00:16:45.490 --> 00:16:48.460
into an Ajax form. I
use that one all the

267
00:16:48.460 --> 00:16:52.840
time. It's just immensely useful.
You can just drop it

268
00:16:52.840 --> 00:16:56.730
in and it's the you've
converted, you know, in a

269
00:16:56.740 --> 00:17:01.600
way that will degrade gracefully
your form into something that'll,

270
00:17:02.140 --> 00:17:06.520
that's quite sexy. Yeah. Were
there any of these plugins,

271
00:17:06.520 --> 00:17:08.830
or were there while you
were developing jQuery or watching

272
00:17:09.040 --> 00:17:12.070
the jQuery community kind of
grow up around it, were

273
00:17:12.070 --> 00:17:13.660
there any of these that
caused you to say, wow,

274
00:17:13.690 --> 00:17:15.670
I didn't think that they'd
be able to pull that

275
00:17:15.670 --> 00:17:23.380
off. And they did. I
mean, there's, there's just, there's,

276
00:17:23.380 --> 00:17:28.240
there's big projects. I mean,
it's just seeing large scale,

277
00:17:28.300 --> 00:17:35.410
you know, people take on,
you know, these large, that

278
00:17:35.410 --> 00:17:38.530
might like there used to
be this plugin plugin called

279
00:17:38.560 --> 00:17:42.280
interface. It has since been
superseded by a jQuery UI,

280
00:17:43.750 --> 00:17:48.190
but, but that those whole
string of developments was quite

281
00:17:48.190 --> 00:17:51.810
fascinating to, and I think
it's pretty cool to see

282
00:17:52.830 --> 00:17:57.260
people know, develop these, these
large, I guess, subproducts of

283
00:17:57.330 --> 00:18:00.750
jQuery and really see them
take a life of their

284
00:18:00.750 --> 00:18:04.250
own. At what point do
you think that JavaScript as

285
00:18:04.250 --> 00:18:07.310
a language and the browser
support got to the, to

286
00:18:07.310 --> 00:18:10.100
the, to the place where
the jQuery was possible, because

287
00:18:10.580 --> 00:18:13.430
JavaScript was kind of a
mess across, not as a

288
00:18:13.430 --> 00:18:17.480
language, but implementation of it
across the different browsers was

289
00:18:17.480 --> 00:18:21.080
really, was really pretty bad
for a long time, you

290
00:18:21.080 --> 00:18:24.470
know, was it, was it
<inaudible> and Firefox two that

291
00:18:24.470 --> 00:18:27.050
finally kind of pulled it
together? Or, you know, at

292
00:18:27.050 --> 00:18:36.470
what point did this become
possible? I think, yeah. What

293
00:18:36.500 --> 00:18:41.750
interested me about the dissolver
when I started to, well,

294
00:18:41.780 --> 00:18:43.790
I guess I've been doing
web development for a long

295
00:18:43.790 --> 00:18:48.830
time now, but doing front
end development, I've really started

296
00:18:48.830 --> 00:18:53.210
to focus on back in
about 2004. And that was

297
00:18:53.210 --> 00:18:57.170
about the time at which
a Firefox was released. And

298
00:18:57.170 --> 00:19:00.230
I think that was at
least for me, a big

299
00:19:00.290 --> 00:19:05.480
turning point in my, my
personal development. And so, but

300
00:19:05.670 --> 00:19:08.930
I guess the big milestones
at least was the release

301
00:19:08.930 --> 00:19:13.490
of Firefox. So Lisa Firebug
having Firebug and the toolset

302
00:19:13.490 --> 00:19:17.270
providers, especially like being able
to have that console so

303
00:19:17.270 --> 00:19:20.300
that you can dip in
and play with JavaScript, have

304
00:19:20.300 --> 00:19:24.010
being able to profile and
JavaScript and stuff like that,

305
00:19:24.020 --> 00:19:31.010
that I is deceptively simple
and incredibly powerful. And I

306
00:19:31.010 --> 00:19:37.400
mean, those, you know, dramatically
changed how I worked. What

307
00:19:37.400 --> 00:19:39.440
direction are you going to
take jQuery and the team

308
00:19:39.440 --> 00:19:42.500
and take jQuery for, you
know, 2.0, you know, you

309
00:19:42.500 --> 00:19:46.730
can kind of going forward
with, you know, 0.1 0.01

310
00:19:46.730 --> 00:19:52.190
type 1.51, 1.52. Do you
have some big master plan

311
00:19:52.190 --> 00:19:54.830
for, for 2.0, is it
going to, in, in what,

312
00:19:54.830 --> 00:19:58.550
what would justify a major
release like that? The biggest

313
00:19:58.550 --> 00:20:01.850
release that we're working on
right now is jQuery 1.3.

314
00:20:02.330 --> 00:20:08.060
And this is w w
w as we usually do,

315
00:20:08.120 --> 00:20:13.460
we're focusing on performance significantly.
So we're looking at a

316
00:20:13.460 --> 00:20:16.130
number of areas that are
very critical in trying to

317
00:20:16.130 --> 00:20:22.100
improve them. But the thing
is, is that typically when

318
00:20:22.100 --> 00:20:24.800
you, if we were to
look at, let's say a

319
00:20:24.800 --> 00:20:28.640
2.0 release, which we really
aren't focusing on at the

320
00:20:28.640 --> 00:20:30.980
moment is that that would
tend to imply that there

321
00:20:30.980 --> 00:20:34.640
would be dramatic changes. And
so that would mean that

322
00:20:34.640 --> 00:20:39.890
there'll be other, say for
example, dramatic API changes, and

323
00:20:40.310 --> 00:20:43.280
there are places they clearly
with the API could probably,

324
00:20:44.060 --> 00:20:47.560
you know, it could probably
use some polishing, know, maybe

325
00:20:47.590 --> 00:20:51.070
some more descriptive names or
what have you. But I

326
00:20:51.070 --> 00:20:57.910
don't think having those changes
is better making those changes

327
00:20:57.970 --> 00:21:03.100
is beneficial enough to warrant
breaking a significant number of

328
00:21:03.100 --> 00:21:06.940
existing code bases. I think
it's, it's far more important

329
00:21:06.940 --> 00:21:12.640
at this point to promote
stability, performance and quality than

330
00:21:12.640 --> 00:21:17.170
to have any large overhauls.
And I think what's important

331
00:21:17.170 --> 00:21:20.560
here is that the plugin
architecture for jQuery really makes

332
00:21:20.560 --> 00:21:23.860
us possible because if the,
you know, if there wasn't

333
00:21:24.850 --> 00:21:28.180
a way to easily snap
in this new functionality, somebody

334
00:21:28.180 --> 00:21:31.390
would be forced to continually
be adding on and just

335
00:21:31.720 --> 00:21:35.910
constantly growing and growing. And
I know that you guys

336
00:21:35.910 --> 00:21:38.580
really focus a lot on
performance. I mean, one, one,

337
00:21:38.580 --> 00:21:41.040
two, six was a, I
mean, I misspoke earlier and

338
00:21:41.040 --> 00:21:43.590
I said, one five. I
was thinking about jQuery UI,

339
00:21:43.590 --> 00:21:46.710
but a one to six
has a major performance improvements.

340
00:21:47.280 --> 00:21:50.010
How are you figuring these,
these, these improvements out? And

341
00:21:50.350 --> 00:21:52.890
I'm curious how often you
get into a situation where

342
00:21:53.700 --> 00:21:56.970
you have to write an
entirely separate chunk of code

343
00:21:56.970 --> 00:21:59.820
to make it fast on
one browser versus fast on

344
00:21:59.820 --> 00:22:03.510
another whole different branch to
say, gosh, we can make

345
00:22:03.510 --> 00:22:05.310
it a hundred percent faster
on Firefox, but if we

346
00:22:05.310 --> 00:22:09.690
do, it's gonna suck on
E or whatever. Yeah. So,

347
00:22:09.720 --> 00:22:14.070
okay. So the first part
is for, you know, where

348
00:22:14.070 --> 00:22:18.660
to improve. We really, so
there's a couple of us.

349
00:22:18.660 --> 00:22:20.940
We have, we have a
bunch of tools that we

350
00:22:20.940 --> 00:22:26.670
use, including Firebug, but I
bought a tool recently for

351
00:22:26.700 --> 00:22:32.310
profiling jQuery application. You can,
you, you stick this little

352
00:22:32.310 --> 00:22:37.200
library into your webpage. It
uses jQuery. And after the

353
00:22:37.200 --> 00:22:42.480
page finishes running, it dumps
a full report out. And

354
00:22:42.480 --> 00:22:44.790
it tells you exactly how
much where all your time

355
00:22:44.790 --> 00:22:49.740
is being spent. So this,
this tool then really eyeopening

356
00:22:50.010 --> 00:22:52.680
lately. We've been able to
use this in a number

357
00:22:52.680 --> 00:22:56.160
of places like, like, we,
we can take this and

358
00:22:56.160 --> 00:23:00.960
we can insert it into,
you know, major websites that

359
00:23:00.960 --> 00:23:04.920
use jQuery and, and get
a feel for what is

360
00:23:04.920 --> 00:23:09.770
hurting them the most. And
so for example, one place,

361
00:23:09.810 --> 00:23:13.080
we were going to be
making optimizations to our ride-on

362
00:23:13.090 --> 00:23:17.400
modification code. So being able
to append prepared, answer before

363
00:23:17.400 --> 00:23:21.810
insert after, and we've made
some dramatic changes because we

364
00:23:21.810 --> 00:23:24.390
found that to be one
of the largest bottlenecks and

365
00:23:24.390 --> 00:23:29.250
applications. So that improvement is
going to be, it's going

366
00:23:29.250 --> 00:23:31.980
to be quite, quite good.
So what was the other

367
00:23:31.980 --> 00:23:35.220
half of the question? Well,
I was wondering if there,

368
00:23:35.230 --> 00:23:37.050
if you ever got yourself
in a situation where you

369
00:23:37.050 --> 00:23:39.300
found that you could make
something a hundred percent faster

370
00:23:39.300 --> 00:23:42.060
or some percent faster, but
if you did, it would

371
00:23:42.090 --> 00:23:45.060
negatively impact some other browser.
And then you ended up

372
00:23:45.380 --> 00:23:48.320
with a different, you know,
basically with a switch statement

373
00:23:48.320 --> 00:23:50.270
in a different branch to
say, you know, if I

374
00:23:50.270 --> 00:23:52.730
E do it this way,
else do it that way.

375
00:23:53.560 --> 00:23:58.220
There are cases where that
happens and it is, it

376
00:23:58.230 --> 00:24:04.240
is quite tricky. W generally
speaking, we try to write

377
00:24:04.300 --> 00:24:10.150
our code in a very
agnostic way that does rely

378
00:24:10.150 --> 00:24:18.220
upon a particular browser in
certain way. So whatever we

379
00:24:18.220 --> 00:24:23.140
can, we try to determine
ways in which you can

380
00:24:23.860 --> 00:24:29.320
make a smart guess about,
which will be faster. I

381
00:24:29.320 --> 00:24:33.010
mean, we, we would prefer
not to have one advisor

382
00:24:33.010 --> 00:24:36.790
better fit at the sacrifice
of another. And I don't

383
00:24:36.790 --> 00:24:39.400
think we've ever had a
case where it's, where it's

384
00:24:39.470 --> 00:24:41.740
been really dramatic. I mean,
we may have been able

385
00:24:41.740 --> 00:24:45.490
to get like a dramatic
improvement in one browser to

386
00:24:45.490 --> 00:24:49.450
a slight degregation and rather
BattleTech has never had was

387
00:24:49.450 --> 00:24:56.020
something quite extreme, but I
mean, it's, it's been, yeah.

388
00:24:56.230 --> 00:24:58.000
I mean, it's hard cause
you have to take it

389
00:24:58.000 --> 00:25:02.560
really on a, on a
case by case basis. One

390
00:25:02.560 --> 00:25:04.870
thing that we've been looking
at here for what three,

391
00:25:05.140 --> 00:25:07.720
and that's going to be
quite new and quite exciting

392
00:25:08.260 --> 00:25:15.220
is that we're working to
move all uses of browser,

393
00:25:15.250 --> 00:25:22.540
user agents sniffing. This is
something that, of virtually all

394
00:25:22.600 --> 00:25:28.090
modern JavaScript libraries use. And,
you know, you know, saying,

395
00:25:28.090 --> 00:25:30.520
you know, if internet Explorer
do this or, you know,

396
00:25:30.580 --> 00:25:35.530
if Firefox do this and
we've worked out some code

397
00:25:36.070 --> 00:25:39.070
that is going to make
it possible that we don't

398
00:25:39.070 --> 00:25:43.990
have to do that anymore
in jQuery it's, it's, it's,

399
00:25:44.010 --> 00:25:46.450
it's a lot of code,
but we think it'll be

400
00:25:46.540 --> 00:25:49.510
really worth it. And it's
going to help to promote

401
00:25:50.380 --> 00:25:53.950
some good practices to a
web developers as a whole.

402
00:25:54.280 --> 00:25:57.550
So we're be really quite
excited by that. So this

403
00:25:57.550 --> 00:25:58.960
is a technique that other
people are gonna be able

404
00:25:58.960 --> 00:26:02.230
to use. It's gonna, it's
gonna raise the water level

405
00:26:02.230 --> 00:26:07.180
for everybody. Yeah, yeah. So
I mean, an important part

406
00:26:07.240 --> 00:26:11.590
of this is that, you
know, is, is what's called

407
00:26:11.590 --> 00:26:18.430
off feature simulation and doing
so such testing a feature

408
00:26:18.430 --> 00:26:20.830
and seeing it to behave
like the, expect it to,

409
00:26:21.460 --> 00:26:25.840
and if, if it, if
it does it and, you

410
00:26:25.840 --> 00:26:31.840
know, doing a fallback, something
that works properly. And what's

411
00:26:31.840 --> 00:26:38.680
interesting about this is that
you effectively removed the need

412
00:26:38.680 --> 00:26:41.080
for, you know, for sniffing
at that point from making

413
00:26:41.080 --> 00:26:44.490
a blind decision about a
browser. And generally the code

414
00:26:44.490 --> 00:26:47.930
just becomes much, much better.
Huh? Wow. Well, I really

415
00:26:47.930 --> 00:26:51.380
think it's great the way
that you guys really do

416
00:26:51.380 --> 00:26:53.810
this development out in the
open with, particularly with the

417
00:26:53.810 --> 00:26:56.420
test suites. I mean, certainly
open source projects that should

418
00:26:56.420 --> 00:26:58.790
be doing their work in
the open, but you're so

419
00:26:58.790 --> 00:27:03.440
detailed in your, in your
differences between the different, you

420
00:27:03.440 --> 00:27:05.600
know, showing your test suites
and showing, you know, here

421
00:27:05.600 --> 00:27:07.730
are the eight browsers we're
testing on and here's the

422
00:27:07.730 --> 00:27:11.150
diff between this version and
that version, some of the,

423
00:27:11.150 --> 00:27:15.200
the improvements in speed are
just obscene, like the, the,

424
00:27:15.620 --> 00:27:18.530
between one, two, three, and
one, two six, some of

425
00:27:18.530 --> 00:27:23.060
the changes in JavaScript map,
like one of them was

426
00:27:23.060 --> 00:27:25.250
a opera nine went from
like two and a half

427
00:27:25.250 --> 00:27:28.460
seconds to 95 milliseconds or
something like that. It was

428
00:27:28.460 --> 00:27:32.090
just unreal amounts of improvement.
And if you go down

429
00:27:32.090 --> 00:27:36.230
the entire sheet, there isn't
a single place where something

430
00:27:36.230 --> 00:27:40.480
didn't get at least slightly
faster. Yeah. Yeah. So, I

431
00:27:40.490 --> 00:27:45.470
mean, I guess that's, that's
important is that interesting part

432
00:27:45.470 --> 00:27:50.900
about having effectively a static
code days? That's not to

433
00:27:50.900 --> 00:27:52.580
say that the shake for
it, isn't going to change

434
00:27:52.610 --> 00:27:55.700
add new methods. It's just,
at this point we're changing

435
00:27:55.730 --> 00:27:59.450
very, very well of, of
the API. And because of

436
00:27:59.450 --> 00:28:02.270
that, we can, we can
really just focus on iterating

437
00:28:02.270 --> 00:28:05.540
and improving what we have
fixing bugs, fixing, you know,

438
00:28:05.630 --> 00:28:10.190
looking, digging and seeing where,
where the performance pains are

439
00:28:10.580 --> 00:28:13.430
and just continually improving and
iterating and making a better,

440
00:28:13.430 --> 00:28:18.170
which I, I think it's
a really, really lucky situation,

441
00:28:18.200 --> 00:28:20.720
you know, just being able
to just iterate like this

442
00:28:23.480 --> 00:28:25.490
One last question I wanted
to ask you is how

443
00:28:25.490 --> 00:28:30.080
do you decide what plugins
to, to bring in his

444
00:28:30.080 --> 00:28:31.940
appointment as a plugin, the
best way for someone to

445
00:28:32.120 --> 00:28:36.890
kind of get noticed? I
mean, it is what's happened

446
00:28:38.270 --> 00:28:41.390
historically is, you know, people
that a plug in and

447
00:28:43.520 --> 00:28:46.130
in a couple of cases
there there's been plugins that

448
00:28:46.130 --> 00:28:49.550
have just been immensely useful.
And what we find are

449
00:28:49.550 --> 00:28:54.080
just people using them over
and over again. And there's,

450
00:28:54.090 --> 00:28:56.030
you know, there's a coming
to rely on them and

451
00:28:56.030 --> 00:28:59.150
other plugins are coming to
rely on them. So what

452
00:28:59.150 --> 00:29:03.770
we've started to do now
is to take these really

453
00:29:03.770 --> 00:29:09.860
successful plugins and start to,
you know, integrate them back

454
00:29:09.890 --> 00:29:13.400
into core. And this has
been, this has been really

455
00:29:13.400 --> 00:29:16.130
useful for us, and it's
been great for the plugin

456
00:29:16.130 --> 00:29:19.010
office as well to see
there, the code effectively, you

457
00:29:19.010 --> 00:29:24.500
know, graduate and, you know,
the, the user's benefit. And

458
00:29:24.890 --> 00:29:27.470
what's nice about this is
that it serves as a,

459
00:29:27.980 --> 00:29:31.190
as a testing ground because
such we don't actually have

460
00:29:31.190 --> 00:29:36.440
to introduce these new methods
into the core. You know,

461
00:29:36.440 --> 00:29:38.240
we can, you can just
say, Oh, here, just use

462
00:29:38.240 --> 00:29:41.590
this plugin, let us know
how it works. And eventually

463
00:29:41.590 --> 00:29:46.330
we can integrate it back
in. And I think that's,

464
00:29:46.780 --> 00:29:50.500
it's ended up being really,
you know, successful model of

465
00:29:50.500 --> 00:29:54.510
development for us. I think
that's a really successful model

466
00:29:54.510 --> 00:29:56.790
for development. I'm kind of
for everyone. I think that

467
00:29:56.790 --> 00:30:00.390
looking of course, hindsight is
2020. So looking back, it

468
00:30:00.390 --> 00:30:03.060
seems obvious, but the idea
that if one makes it

469
00:30:03.180 --> 00:30:07.560
as just incredibly easy to
extend, one's open source project

470
00:30:08.190 --> 00:30:12.990
fan, rather than saying, you
know, let's all fight about

471
00:30:13.710 --> 00:30:15.720
who's going to get commit
access and who's going to

472
00:30:15.720 --> 00:30:18.960
be able to extend the
core, just make it incredibly

473
00:30:18.960 --> 00:30:22.860
extensible and then, you know,
pick the right ones to

474
00:30:22.860 --> 00:30:26.430
pull back in. It seems
like it's a more natural

475
00:30:26.430 --> 00:30:28.800
model for an open source
project. It's just a more

476
00:30:28.800 --> 00:30:32.160
natural opensource way of doing
things. But that, that is

477
00:30:32.160 --> 00:30:37.230
all predicated on having an
incredibly simple model for extensibility.

478
00:30:37.990 --> 00:30:42.240
Yeah. Yeah. Cool. Well, John,
I really appreciate you taking

479
00:30:42.240 --> 00:30:43.590
the time to sit down
and talk to me today

480
00:30:43.590 --> 00:30:47.820
about jQuery and we'll have
links to all the information

481
00:30:47.820 --> 00:30:51.120
about John and jQuery up
on the show site. Thanks

482
00:30:51.120 --> 00:30:54.780
again. Thanks for having me.
And this has been another

483
00:30:54.780 --> 00:30:57.210
episode of Hanselminutes and we'll
see you again next week.

