WEBVTT FILE

1
00:00:00.420 --> 00:00:03.570
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.570 --> 00:00:06.510
they make the show possible.
Today's show is sponsored by

3
00:00:06.510 --> 00:00:10.710
developer express, become a UI
superhero with dev express controls

4
00:00:10.710 --> 00:00:15.240
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.600 --> 00:00:19.680
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.710 --> 00:00:23.820
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.910 --> 00:00:48.500
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com
From Hansel minutes.com. It's Hanselman.

8
00:00:48.500 --> 00:00:53.000
It's a weekly discussion with
web developer and technologists. Scott

9
00:00:53.000 --> 00:00:58.250
Hanselman. This is Lawrence Ryan announcing
the show number 520. In

10
00:00:58.250 --> 00:01:03.200
this episode, Scott talks with
Aaron Thompson, formerly or Pixar about

11
00:01:03.200 --> 00:01:11.090
her new startup Modular. Hi,
this is Scott Hanselman. This

12
00:01:11.090 --> 00:01:14.000
is another episode of Hansel
minutes. We're here doing marches

13
00:01:14.000 --> 00:01:16.730
for makers. It's all March
long. We're doing great hardware

14
00:01:16.730 --> 00:01:19.310
and maker stuff. And today
we're talking with Aaron Thompson. How

15
00:01:19.310 --> 00:01:21.650
are you? I'm doing great.
Thanks so much for having

16
00:01:21.650 --> 00:01:23.750
me on the show. Scott,
I know this is exciting.

17
00:01:23.750 --> 00:01:29.120
So I was actually doing
some Arduino work and I

18
00:01:29.120 --> 00:01:32.090
was trying to get a
and hope I get the

19
00:01:32.090 --> 00:01:34.790
words right here. It was
a, I think it's an

20
00:01:34.790 --> 00:01:37.430
accelerometer I wanted to know
about like X, Y, Z,

21
00:01:38.930 --> 00:01:40.910
and I was trying to
get it to work with

22
00:01:42.310 --> 00:01:45.200
a, I think it was
a particle or a photon

23
00:01:45.920 --> 00:01:49.130
and I stumbled into some
forums and I saw you

24
00:01:49.130 --> 00:01:52.670
having some interactions. Now we
pump into forums all the

25
00:01:52.670 --> 00:01:55.850
time and we see people
having interactions except yours included

26
00:01:56.630 --> 00:02:02.330
detailed and intense reproductions of
the bugs that immediately got

27
00:02:02.330 --> 00:02:05.750
the attention of the, of
the moderators, because you have

28
00:02:05.750 --> 00:02:08.120
like a, what is it
called as an oscilloscope of

29
00:02:08.120 --> 00:02:09.860
some kind you were showing
the wave forms of what

30
00:02:09.860 --> 00:02:13.160
happened at like at the
atomic level? Yeah, it was

31
00:02:13.160 --> 00:02:16.910
a logic analyzer dump. So
it's showing the, the logic

32
00:02:16.910 --> 00:02:20.990
levels on a couple of
the wires over time. So

33
00:02:20.990 --> 00:02:24.020
from that, you can see
how the two parts on

34
00:02:24.020 --> 00:02:27.080
the board are communicating with
each other. And there was

35
00:02:27.080 --> 00:02:29.510
a problem with how they
were communicating. So I was

36
00:02:30.980 --> 00:02:34.280
including that in order to
show the particle folks, what

37
00:02:34.280 --> 00:02:36.410
I thought the bug was
so we could figure it

38
00:02:36.410 --> 00:02:40.580
out together. And it was
such a clear bug was

39
00:02:40.580 --> 00:02:43.880
such a clear, like explanation
of why something was wrong.

40
00:02:44.180 --> 00:02:45.950
It seemed like they all
kind of like jumped in

41
00:02:46.190 --> 00:02:48.020
and into the forum and
it became this long. It

42
00:02:48.020 --> 00:02:50.440
was rather quite a long
post. It went on for

43
00:02:50.450 --> 00:02:53.660
months and it was pretty
long and they acknowledged that

44
00:02:53.660 --> 00:02:56.060
this is a problem. So
I started digging around and

45
00:02:56.060 --> 00:03:00.460
I went to your profile
and then found modular.co, Which

46
00:03:00.460 --> 00:03:03.880
is this amazing Kickstarter that
you did last year? Well,

47
00:03:03.880 --> 00:03:07.390
thank you. It's, it's really
kind of slick because I've

48
00:03:07.390 --> 00:03:10.690
tried Arduinos. I've tried breadboards.
A lot of these things

49
00:03:10.690 --> 00:03:14.440
are a little intimidating, you
know, like you have, you

50
00:03:14.440 --> 00:03:16.450
have to learn, you learn
to solder and then you

51
00:03:16.450 --> 00:03:18.340
say, well, that's, that's too
hard. Then I'll go down

52
00:03:18.340 --> 00:03:22.480
to using breadboards. What is
it about modular that makes

53
00:03:22.480 --> 00:03:25.290
it even easier to get
started? I was always doing

54
00:03:25.290 --> 00:03:28.500
projects like that myself. I
was a software engineer and

55
00:03:28.500 --> 00:03:31.350
I was doing little hardware
projects on the side, just

56
00:03:31.350 --> 00:03:35.550
for fun. And I'm like
you, I would, I would

57
00:03:36.720 --> 00:03:39.180
kind of dig in and
then everything was pretty difficult,

58
00:03:39.180 --> 00:03:42.270
pretty intimidating, made it hard
to you kind of get

59
00:03:42.270 --> 00:03:46.170
a project going quickly. So
I wanted to create something

60
00:03:46.170 --> 00:03:51.330
that would solve those problems.
So modular has these little

61
00:03:51.360 --> 00:03:56.640
individual circuit boards each have
a particular component. So, you

62
00:03:56.640 --> 00:03:58.410
know, there might be one
with a joystick on it,

63
00:03:58.890 --> 00:04:02.400
one with a little color
display, and you can slide

64
00:04:02.400 --> 00:04:05.370
these things onto the base.
And then as far as

65
00:04:05.370 --> 00:04:08.370
the physical construction goes, you're
done. You just connect them.

66
00:04:10.110 --> 00:04:13.590
So you don't have to
worry about logic, analyzer diagrams,

67
00:04:13.590 --> 00:04:16.140
or, you know, data sheets
and all that kind of

68
00:04:16.140 --> 00:04:18.930
stuff you can get right,
right. To building your project.

69
00:04:20.670 --> 00:04:24.120
So that was kinda my
idea. That's where modular came

70
00:04:24.120 --> 00:04:26.640
from and that's the problem
that tries to solve. So

71
00:04:26.640 --> 00:04:29.460
this is a, a higher
level of abstraction. How is

72
00:04:29.460 --> 00:04:33.360
this different from like an
Arduino shield? Well, do we

73
00:04:33.360 --> 00:04:35.790
know shield is similar in
some ways and that you

74
00:04:35.790 --> 00:04:39.780
can kind of just plug
it onto the Arduino and

75
00:04:39.780 --> 00:04:42.120
then you, I use it
more easily than you would

76
00:04:42.120 --> 00:04:44.880
if you had to build
that whole circuit from scratch,

77
00:04:45.510 --> 00:04:49.260
but modular allows you to
connects several different things. So

78
00:04:49.260 --> 00:04:51.840
kind of in the size
of an artery, no, you

79
00:04:51.840 --> 00:04:55.590
can have four different modules
that plug together and they

80
00:04:55.590 --> 00:04:57.300
can be mixed and matched.
They can be put in

81
00:04:57.300 --> 00:05:03.210
different locations and they all
have a unique idea D

82
00:05:03.210 --> 00:05:05.670
that can be used to
communicate with them to identify

83
00:05:05.670 --> 00:05:10.140
them. Yeah. So it's kind
of a, another, your step

84
00:05:10.140 --> 00:05:12.870
up in terms of being
at a higher level and

85
00:05:12.870 --> 00:05:14.850
being a little more modular
than what a shield would

86
00:05:14.850 --> 00:05:20.460
be. What is the, the
different communication protocol? These are

87
00:05:20.460 --> 00:05:23.790
these three letter acronyms as
an Arduino beginner I'm bumping

88
00:05:23.790 --> 00:05:28.980
into it's like I, yeah,
I, or people say I

89
00:05:28.980 --> 00:05:32.490
squared C so it's this
old serial protocol it's been

90
00:05:32.490 --> 00:05:38.520
around for, for decades. And
it's used to allow multiple

91
00:05:38.520 --> 00:05:41.160
components. It's on a board
to send data between, I

92
00:05:41.160 --> 00:05:46.680
mean, each other. So it's
a relatively simple protocol as

93
00:05:46.680 --> 00:05:50.880
protocols go, but it's also
really robust, supported by a

94
00:05:50.880 --> 00:05:53.910
lot of different things. So
modular makes use of that

95
00:05:53.910 --> 00:05:57.830
in order to allow these
different modules communicate with each

96
00:05:57.830 --> 00:06:02.830
other. Oh, interesting. Okay. So
when I take an Arduino

97
00:06:03.280 --> 00:06:06.250
and I let's say that
I took a, an ethernet

98
00:06:06.400 --> 00:06:08.920
shield, I put it on
top and it gets bigger

99
00:06:08.920 --> 00:06:11.080
and bigger, like a sandwich.
And then I put a

100
00:06:11.080 --> 00:06:14.050
screen on top of that.
There are adrenals at the

101
00:06:14.050 --> 00:06:16.960
bottom. Yup. Ether nets in
the middle. And the screens

102
00:06:16.960 --> 00:06:19.990
on the top is the
Arduino basically shouting down the

103
00:06:19.990 --> 00:06:24.130
line and going, Hey, screen,
put some stuff there. And

104
00:06:24.460 --> 00:06:26.380
the, the ethernet has to
pass it all the way

105
00:06:26.380 --> 00:06:29.710
up. Well, within our Duino,
all of the wires are

106
00:06:29.710 --> 00:06:32.470
kind of connected between all
of those. So all the

107
00:06:32.470 --> 00:06:37.870
pins are directly connected from
the Arduino itself, through the

108
00:06:37.870 --> 00:06:42.460
shield. It's in the middle
to the top. So particular

109
00:06:42.460 --> 00:06:45.670
shields will use particular pins.
So there are different pin

110
00:06:45.670 --> 00:06:49.810
numbers on each one. Okay.
So the display, you know,

111
00:06:49.810 --> 00:06:54.470
maybe it uses pins three,
four, and five. Maybe the,

112
00:06:54.470 --> 00:06:57.070
the other shield uses the
same ones, or maybe it

113
00:06:57.070 --> 00:07:00.130
uses different ones, but there's
the potential there that, that

114
00:07:00.130 --> 00:07:03.610
can conflict because they might
use the same pins. They

115
00:07:03.610 --> 00:07:06.430
might use them in the
same way or in different

116
00:07:06.430 --> 00:07:12.010
ways. Modular kind of just
uses two pins for everything.

117
00:07:12.610 --> 00:07:17.200
And there, it uses one
communication protocol to handle that

118
00:07:17.200 --> 00:07:20.680
communication, but you don't ever
have to worry about which

119
00:07:20.680 --> 00:07:24.010
pins something is using, whether
they're already used up by

120
00:07:24.010 --> 00:07:26.770
another modular, you can just
kind of connect whatever you

121
00:07:26.770 --> 00:07:29.560
want. So on the, on
the website, when you go

122
00:07:29.560 --> 00:07:33.310
to modular.co, you can see
like you're plugging into what

123
00:07:33.310 --> 00:07:37.150
looked like, like Xbox thumb
sticks, and you move them,

124
00:07:37.150 --> 00:07:39.460
you go lower, left corner,
upper right corner. When you

125
00:07:39.460 --> 00:07:41.080
move it, how do you
address it? How do you

126
00:07:41.080 --> 00:07:44.830
do say there's a joystick
at this location? And does

127
00:07:44.830 --> 00:07:46.510
it know about the location
or how do you, when

128
00:07:46.510 --> 00:07:48.130
you move one from side
to side, how do you

129
00:07:48.130 --> 00:07:52.000
know to address that? So
each module has a unique

130
00:07:52.000 --> 00:07:56.410
ID, burned into it when
it's manufactured and you can

131
00:07:56.410 --> 00:08:00.520
communicate with it using that
ID. So it's possible to

132
00:08:00.520 --> 00:08:04.450
say, give me all the
different joysticks that are connected

133
00:08:04.660 --> 00:08:07.750
and I'll return you a
list of all those IDs.

134
00:08:08.530 --> 00:08:11.920
And then you can talk
to a particular one, or

135
00:08:12.010 --> 00:08:14.350
if you just need some
joystick, you don't care which

136
00:08:14.350 --> 00:08:16.630
one it is. You can
just say, use the first

137
00:08:16.630 --> 00:08:19.720
one and it'll assume whatever.
The first one it finds

138
00:08:19.720 --> 00:08:22.870
is the choice tech you're
looking for. Ah, okay. That's

139
00:08:22.870 --> 00:08:24.940
really elegant. So it's just
like, you know, the difference

140
00:08:24.940 --> 00:08:27.370
between an IP address and
a Mac address. The Mac

141
00:08:27.370 --> 00:08:31.210
address is something that stays
with the ethernet card or

142
00:08:31.210 --> 00:08:34.540
the wireless card. So there's
a unique joystick out there,

143
00:08:34.540 --> 00:08:36.880
and it's, it's unique no
matter where it is on

144
00:08:36.880 --> 00:08:40.840
the bus. And there's a
process of assigning that address

145
00:08:40.840 --> 00:08:43.450
to it and saying, this
is the one I'm going

146
00:08:43.450 --> 00:08:46.450
to talk to. That's kind
of similar to, you know,

147
00:08:46.450 --> 00:08:48.760
to use your network analogy
kind of similar to like

148
00:08:48.760 --> 00:08:52.390
DHCP where it's assigning an
address and now it can

149
00:08:52.390 --> 00:08:55.560
talk on the network to
everything else. Okay. And then

150
00:08:55.560 --> 00:08:57.570
I can enumerate Them and
say, give me the first

151
00:08:57.570 --> 00:08:59.220
one and the last one,
or the first screen that

152
00:08:59.220 --> 00:09:01.410
you find, and then start
talking to it. That's a

153
00:09:01.410 --> 00:09:04.220
really elegant thing. Yeah. I
wanted to make it, you

154
00:09:04.220 --> 00:09:05.930
know, a lot of times
you don't, you're not going

155
00:09:05.930 --> 00:09:07.970
to have more than one
joystick or more than one

156
00:09:08.600 --> 00:09:11.810
display. So when it's make
it really easy to just

157
00:09:12.200 --> 00:09:14.060
do the right thing most
of the time, which is

158
00:09:14.060 --> 00:09:16.820
to just use the one
at fines. But then if

159
00:09:16.820 --> 00:09:19.730
you do have more, you
can very be very specific

160
00:09:19.730 --> 00:09:22.820
about which one you're talking
to. And that way you

161
00:09:22.820 --> 00:09:24.920
can put it in a
different place on the board.

162
00:09:25.520 --> 00:09:28.310
You can even have multiple
boards and Daisy chain them

163
00:09:28.310 --> 00:09:33.200
together, but wherever you put
it, it'll always have that

164
00:09:33.200 --> 00:09:35.150
same address and you can
always talk to it in

165
00:09:35.150 --> 00:09:37.760
the same way. Oh, really?
Okay. So then if you

166
00:09:37.760 --> 00:09:40.760
were referring to a screen
by it's a good, for

167
00:09:40.760 --> 00:09:43.610
lack of a better word
and you have, it was

168
00:09:43.610 --> 00:09:45.560
first in the list, and
then later on you had

169
00:09:45.560 --> 00:09:47.060
eight of these in a
row. When you put it

170
00:09:47.060 --> 00:09:49.040
at the end, you just
keep talking to that screen.

171
00:09:49.160 --> 00:09:52.490
That's right. It'll always have
the same address and behave

172
00:09:52.490 --> 00:09:55.280
the same way. No matter
what the physical configuration is.

173
00:09:56.510 --> 00:09:58.070
That seems like something that
should take off. I mean,

174
00:09:58.070 --> 00:10:00.650
that seems like such a
clean and elegant solution. Are

175
00:10:00.650 --> 00:10:06.260
there other similar solutions out
there? There are a few,

176
00:10:06.260 --> 00:10:10.460
there are some temperature sensors
that use SM bus. I

177
00:10:10.460 --> 00:10:12.380
don't know if you've heard
of that. It's another one

178
00:10:12.380 --> 00:10:15.950
of these protocols, but SM
bus is based on an

179
00:10:15.950 --> 00:10:19.370
I squared C and it
has a similar ability for

180
00:10:20.390 --> 00:10:22.910
one of these temperature sensors
to have an ID built

181
00:10:22.910 --> 00:10:26.750
into it. And then you
can communicate with that particular

182
00:10:26.750 --> 00:10:31.760
ID, but I haven't seen
other systems that have kind

183
00:10:31.760 --> 00:10:34.490
of this more general thing
where all your different devices

184
00:10:34.790 --> 00:10:37.850
speak, that you can use
whatever device you want. And

185
00:10:37.850 --> 00:10:40.100
they all kind of play
by that, that same rule.

186
00:10:41.810 --> 00:10:45.170
And when we think about
people doing prototyping and things

187
00:10:45.170 --> 00:10:49.130
like Arduino or raspberry pies,
they were always told, well,

188
00:10:49.130 --> 00:10:51.980
you're you're prototyping. And then
later on, you might go

189
00:10:51.980 --> 00:10:55.220
to production with that know,
make it simpler. Would that

190
00:10:55.220 --> 00:10:56.930
be something you'd do with
modular or would you just

191
00:10:56.930 --> 00:10:58.850
leave it as it is
and go to production as

192
00:10:58.850 --> 00:11:01.850
it is? Well, I kind
of wanted to solve more

193
00:11:01.850 --> 00:11:04.400
of the hobbyist thing rather
than I think that model

194
00:11:04.400 --> 00:11:07.880
of prototype it, you know,
take it to the next

195
00:11:07.880 --> 00:11:12.950
stage design circuit boards that
works really well for a

196
00:11:12.950 --> 00:11:15.440
product you're creating where you're
going to make thousands of

197
00:11:15.440 --> 00:11:18.980
these things. But if you're
just trying to make one

198
00:11:18.980 --> 00:11:22.310
thing, I wanted to make
it as easy as possible

199
00:11:22.910 --> 00:11:24.980
to just create that thing
and have it be good

200
00:11:24.980 --> 00:11:28.100
enough to actually use for
whatever purpose you have in

201
00:11:28.100 --> 00:11:33.110
mind. Okay. So for a
purpose, for, for an example

202
00:11:33.110 --> 00:11:35.120
of a purpose, you had
a cold last week. So

203
00:11:35.120 --> 00:11:37.730
we had to reschedule, I'm
still getting over it a

204
00:11:37.730 --> 00:11:40.520
little bit, A little bit
of a T a in

205
00:11:40.520 --> 00:11:43.610
the background there, you made
it a tea maker, a

206
00:11:43.610 --> 00:11:47.090
tea pouring robot, didn't you?
I did. That was one

207
00:11:47.090 --> 00:11:49.850
of the example projects we
did for the Kickstarter campaign.

208
00:11:50.630 --> 00:11:52.760
So if you wouldn't mind,
even though we're on a,

209
00:11:53.380 --> 00:11:56.470
maybe you could kind Of
describe, you know, you have

210
00:11:56.470 --> 00:11:59.770
a modular and it has
four quadrants that one could

211
00:11:59.770 --> 00:12:02.140
plug things in. How many
did you use and what

212
00:12:02.140 --> 00:12:04.840
components would one need to
make a tea pouring robot?

213
00:12:05.770 --> 00:12:08.470
So we had two, two
of these basis. These are

214
00:12:08.470 --> 00:12:12.820
the things that hold the
four modulars, one base was

215
00:12:12.820 --> 00:12:16.720
on the little robot. And
so it would have the

216
00:12:17.110 --> 00:12:21.010
controller which runs the program
to control the robot, the

217
00:12:21.010 --> 00:12:23.200
controller isn't the base it's
one of the modules is

218
00:12:23.200 --> 00:12:25.480
a controller. That's right. Yeah.
One of the modules that

219
00:12:25.480 --> 00:12:28.000
lets you use different types
of controllers, if you want

220
00:12:28.000 --> 00:12:32.470
to. So we had that.
And then we had the,

221
00:12:33.160 --> 00:12:36.010
one of the motor drivers
that we have, which can

222
00:12:36.010 --> 00:12:39.670
drive to DC motors. So
we had little DC motors

223
00:12:39.670 --> 00:12:43.750
to control the wheels. And
then we had a servo

224
00:12:43.750 --> 00:12:46.690
motor to control an arm
that goes up and down.

225
00:12:47.560 --> 00:12:48.790
And at the end of
the arm, there was a

226
00:12:48.790 --> 00:12:52.690
teabag. So the teabag would
lower into the cup of

227
00:12:52.690 --> 00:12:55.270
tea and rays. And it
would do that for a

228
00:12:55.270 --> 00:12:59.920
period of time while you're
brewing your tea. So that

229
00:12:59.920 --> 00:13:01.870
was all on the robot
itself. And then we had

230
00:13:01.870 --> 00:13:05.140
a cable from the modular
base on the robot to

231
00:13:05.140 --> 00:13:08.260
a second base and that
second base had all the

232
00:13:08.260 --> 00:13:10.450
controls. So that was kind
of like a little game

233
00:13:10.450 --> 00:13:15.100
pad almost. So we had
a joystick on there. So

234
00:13:15.100 --> 00:13:18.070
you could drive the robot
around and drive it up

235
00:13:18.070 --> 00:13:23.500
to your cup of tea,
a little display that would

236
00:13:23.500 --> 00:13:26.800
show you whether, you know,
if it's currently brewing, it'll

237
00:13:26.800 --> 00:13:30.250
say how many seconds are
left as it's raising, lowering

238
00:13:30.250 --> 00:13:35.410
the teabag and then two
knobs that would let you

239
00:13:35.410 --> 00:13:41.500
either manually raise a lower
the arm, or you could

240
00:13:41.500 --> 00:13:43.570
change the duration that you
want to steep your tea.

241
00:13:43.600 --> 00:13:46.090
If you turn the other
knob, it was just one

242
00:13:46.090 --> 00:13:47.740
of the, what did you
call it? A rainbow knob

243
00:13:47.740 --> 00:13:51.610
is a knob that also
has lighting. Yeah. Yeah. It

244
00:13:51.610 --> 00:13:54.760
has an RGB led and
it's a push button and

245
00:13:54.760 --> 00:13:58.270
it's a rotary encoder. So
that lets you do a

246
00:13:58.270 --> 00:14:02.860
lot of different user interactions.
Whether it's, you just want

247
00:14:02.860 --> 00:14:05.950
to push it to switch
something on and off, provide

248
00:14:05.950 --> 00:14:09.580
some basic feedback, dial a
number, you know, change a

249
00:14:09.580 --> 00:14:16.060
position. It's a pretty versatile
little input device. Some of

250
00:14:16.060 --> 00:14:17.890
the stuff that you've gotten
here, if you, you know,

251
00:14:17.900 --> 00:14:21.940
again, this is@modular.com O D
U L O dot C

252
00:14:21.940 --> 00:14:24.430
O really blows my mind.
Like you've got an old

253
00:14:24.430 --> 00:14:26.890
led display that is like
an inch and a half

254
00:14:26.890 --> 00:14:29.530
wide and has its own
module. I mean, that's insane.

255
00:14:30.130 --> 00:14:32.230
I can't even get my
head around that. Yeah, it's

256
00:14:32.230 --> 00:14:34.990
really nice. We started out
with just a black and

257
00:14:34.990 --> 00:14:38.410
white display. And then when
we found, we were able

258
00:14:38.410 --> 00:14:41.980
to source these color displays,
you can just do so

259
00:14:41.980 --> 00:14:43.720
much more with them. You
know, if you're drawing a

260
00:14:43.720 --> 00:14:45.730
graph or something, all of
a sudden you can draw

261
00:14:46.360 --> 00:14:48.370
several lines on top of
each other and make sense

262
00:14:48.370 --> 00:14:49.960
of it where you just
couldn't do that with a

263
00:14:49.960 --> 00:14:53.660
black and white screen. So
there's a lot of really

264
00:14:54.230 --> 00:14:56.480
cool things you did that
were very small. Like I'm

265
00:14:56.480 --> 00:14:59.120
used to again, thinking about
things in terms of an

266
00:14:59.120 --> 00:15:03.680
Arduino shield, one shield, one,
one use, you've got like

267
00:15:03.680 --> 00:15:07.310
a motor driver modular that
can do like two motors

268
00:15:07.310 --> 00:15:10.490
or four single ended devices
in a, in a tiny

269
00:15:10.490 --> 00:15:14.570
little thing, the size of
an inch. Yeah. You know,

270
00:15:14.570 --> 00:15:17.390
some, I think some of
these other modular kits that

271
00:15:17.390 --> 00:15:20.960
are out there, they're cool,
but they kind of have

272
00:15:20.960 --> 00:15:23.180
to use a lot of
components in order to build

273
00:15:23.180 --> 00:15:26.780
something. And I, I knew
I could only design and

274
00:15:26.780 --> 00:15:30.830
manufacture a fairly small number
of boards to start out

275
00:15:30.830 --> 00:15:33.800
with. So I wanted to
make sure I really made

276
00:15:33.800 --> 00:15:36.380
each one as impactful as
I could make, made it

277
00:15:36.380 --> 00:15:41.380
useful for a lot of
different things. Folks, I wanted

278
00:15:41.380 --> 00:15:44.110
to take a moment to
tell you about Reagan and

279
00:15:44.110 --> 00:15:46.960
their new product called pulse.
Reagan is an error and

280
00:15:46.960 --> 00:15:50.980
crash reporting software provider and
their new product pulse. It's

281
00:15:50.980 --> 00:15:54.400
a realtime user monitoring product.
It gives you performance data

282
00:15:54.430 --> 00:15:58.360
and user insights. Lets you
understand exactly what's happening when

283
00:15:58.360 --> 00:16:01.270
users interact with your software.
So you're never left guessing.

284
00:16:01.930 --> 00:16:04.810
Reagan provides you with the
answers to your performance questions

285
00:16:04.960 --> 00:16:08.350
and they've found over 10 billion
that's billion with a B

286
00:16:08.710 --> 00:16:12.130
bugs and customer apps with
their crash reporting product. And

287
00:16:12.130 --> 00:16:15.460
now Reagan will help you
understand application quality. Like no

288
00:16:15.460 --> 00:16:19.540
one else over 30,000 developers
worldwide, can't be wrong. I

289
00:16:19.540 --> 00:16:21.340
use Reagan and all the
time and I enjoy it

290
00:16:21.340 --> 00:16:23.770
very much. You can try
it out today with a

291
00:16:23.770 --> 00:16:27.520
no risk 30 day free
trial start improving your software

292
00:16:27.520 --> 00:16:36.400
quality immediately try Reagan for
free today@reagan.io. Let me back

293
00:16:36.400 --> 00:16:40.330
up a little bit because
right now it is 2016

294
00:16:40.330 --> 00:16:44.500
and hardware and IOT is
amazing thing. As amazing as

295
00:16:44.500 --> 00:16:46.330
the stuff that you built
is you didn't start out

296
00:16:46.390 --> 00:16:51.820
as a hardware person. Now,
15 years ago, you were

297
00:16:51.820 --> 00:16:54.520
at Pixar and spent a
long time. There were didn't

298
00:16:54.520 --> 00:16:58.930
you doing software? Yeah. I
spent 13, almost 13 years

299
00:16:58.930 --> 00:17:02.670
there. And I started out
working directly on the films.

300
00:17:02.770 --> 00:17:08.020
I was doing shading work
for finding Nemo, the Incredibles

301
00:17:08.020 --> 00:17:12.820
Ratatouille. And then after that
I switched over to Pixars

302
00:17:12.840 --> 00:17:19.210
internal software development group. We
at Pixar, we build our

303
00:17:19.210 --> 00:17:22.480
own animation software that we
animate our films with and

304
00:17:22.480 --> 00:17:26.260
we were doing a large
next generation project kind of

305
00:17:26.260 --> 00:17:29.080
rewriting all of that software.
So I did that for

306
00:17:29.080 --> 00:17:31.120
a number of years too.
And that was an really

307
00:17:31.120 --> 00:17:35.170
amazing project to be part
of having spent so much

308
00:17:35.170 --> 00:17:38.560
time in software, I would
fail. I would feel I'm

309
00:17:38.560 --> 00:17:40.540
just going to feeling myself
that it would be very

310
00:17:40.540 --> 00:17:44.920
intimidating to like it's still
computers, but you're really making

311
00:17:44.920 --> 00:17:48.580
a transition to an entirely
different universe here where yeah,

312
00:17:48.610 --> 00:17:50.670
there's a lot of new
stuff and it's a very

313
00:17:50.670 --> 00:17:54.840
different world for me. That
was kind of exciting. Cause

314
00:17:54.840 --> 00:17:57.270
I that's what I was
looking for. I really wanted

315
00:17:57.270 --> 00:17:59.820
to do something new. I
wanted to learn about new

316
00:17:59.820 --> 00:18:04.910
things. I'd always kind of
played around with electronics, But

317
00:18:04.910 --> 00:18:09.200
I had never, You know,
really designed professional quality circuit

318
00:18:09.200 --> 00:18:14.000
boards. Hadn't done surface Mount
soldering. Hadn't done much firmware

319
00:18:14.000 --> 00:18:17.930
development. All of those things
were new to me. So

320
00:18:17.930 --> 00:18:19.400
yeah, it was a lot,
lot to get up to

321
00:18:19.400 --> 00:18:23.780
speed on. Was that intimidating?
I mean I'm, I'm giving

322
00:18:23.780 --> 00:18:25.370
you a compliment, but I'm
also a little bit in

323
00:18:25.400 --> 00:18:29.390
awe because I could see
like, you know, leaving Pixar

324
00:18:29.390 --> 00:18:31.580
and going and making your
own, you know, I don't

325
00:18:31.580 --> 00:18:34.040
know 3d shader and that
would be like a very

326
00:18:34.040 --> 00:18:39.410
safe thing to do. It
was intimidating. But for me

327
00:18:39.410 --> 00:18:42.200
at that point I just,
I just needed something that

328
00:18:42.200 --> 00:18:45.920
felt kind of fresh and
new to me just cause

329
00:18:45.920 --> 00:18:47.570
I had been working in
the same area for a

330
00:18:47.570 --> 00:18:51.440
long time and it's not
too bad. You know, the

331
00:18:51.440 --> 00:18:54.710
open source hardware community is
really incredible right now. There's

332
00:18:54.710 --> 00:18:59.330
a lot out there. It's
so easy to find resources.

333
00:18:59.330 --> 00:19:03.440
You can go download the
schematics and PCB layouts for,

334
00:19:03.800 --> 00:19:06.980
you know, most of your
favorite boards. And that's a

335
00:19:06.980 --> 00:19:08.990
great way to get started.
I use that a lot,

336
00:19:08.990 --> 00:19:12.830
you know, ADA fruit and
spark fund circuit board designs

337
00:19:12.830 --> 00:19:14.960
when it looked at those,
looked at how they put

338
00:19:15.080 --> 00:19:18.410
them together. And that kind
of really helped me get

339
00:19:18.410 --> 00:19:22.580
going and get to a
point where I could, you

340
00:19:22.580 --> 00:19:24.770
know, where I could develop
my own boards and, And

341
00:19:24.770 --> 00:19:29.420
start manufacturing them. Did you
have the background in the

342
00:19:29.420 --> 00:19:32.540
hardware engineering? Cause I noticed
that we both have similar

343
00:19:32.750 --> 00:19:36.440
degrees. You've got a degree
in computer software engineering, which

344
00:19:36.440 --> 00:19:38.990
is a little bit different.
As I recall from computer

345
00:19:38.990 --> 00:19:41.780
science, I did a software
engineering degree, which I found

346
00:19:41.780 --> 00:19:45.200
to be more, more hands
on, more practical than a

347
00:19:45.200 --> 00:19:48.800
more academic computer science degree.
I think my, my degree

348
00:19:48.800 --> 00:19:51.770
was fairly hands on and
practical. I didn't do a

349
00:19:51.770 --> 00:19:54.290
lot of hardware in college,
but I did do a

350
00:19:54.290 --> 00:20:00.140
little bit and I'd say
mostly I taught myself. I

351
00:20:00.140 --> 00:20:03.080
just did a lot of
projects over the years and

352
00:20:03.080 --> 00:20:05.180
learned about it over time.
And what's a little bit

353
00:20:05.180 --> 00:20:09.290
of, of college background I
had in it. That was

354
00:20:09.290 --> 00:20:11.900
enough to kind of get
me through it. I don't,

355
00:20:11.960 --> 00:20:13.940
you know, I would not
be someone who could go

356
00:20:13.940 --> 00:20:19.430
and design a radio-frequency front
end for, you know, some

357
00:20:19.430 --> 00:20:24.710
complicated electrical engineering thing, but
I can get along pretty

358
00:20:24.710 --> 00:20:27.500
well with digital circuits and
basic stuff. And that's kind

359
00:20:27.500 --> 00:20:29.960
of all I needed. No,
I think, I think you're

360
00:20:29.960 --> 00:20:32.930
selling yourself short, given that
you have a pretty amazing

361
00:20:33.980 --> 00:20:40.970
start up here with, with
modular modesty indeed. But did

362
00:20:40.970 --> 00:20:43.400
you find that you were
going back and looking up

363
00:20:43.430 --> 00:20:46.220
things like you're in school
again? Like were you looking

364
00:20:46.220 --> 00:20:50.530
at electrical type basics? Yep.
You know, some of it

365
00:20:50.530 --> 00:20:55.450
I remembered, but a lot
of other stuff either, you

366
00:20:55.450 --> 00:20:57.700
know, it didn't remember the
details and didn't know the

367
00:20:57.700 --> 00:21:02.590
practical aspects of how to
actually do it. There was

368
00:21:02.590 --> 00:21:07.030
a lot of it that's
less about like electrical engineering

369
00:21:07.060 --> 00:21:10.420
theory and more just how
you do this stuff. Like

370
00:21:10.420 --> 00:21:14.260
how do you actually, you
know, use a PCB layout

371
00:21:14.260 --> 00:21:16.210
program to lay out a
circuit board? How do you

372
00:21:16.210 --> 00:21:20.830
actually solder surface Mount components
for prototype? That kind of

373
00:21:20.830 --> 00:21:23.620
stuff is more practical knowledge
and a little bit less,

374
00:21:24.910 --> 00:21:28.570
you know, college book learning
kind of stuff. When you

375
00:21:28.570 --> 00:21:31.930
were designing modular in, in
your mind, did you, how

376
00:21:31.930 --> 00:21:36.280
did you validate that it
was correct that it was

377
00:21:36.280 --> 00:21:39.670
the way that someone who'd
been doing hardware for 20

378
00:21:39.670 --> 00:21:44.920
years would do it to
be honest, I didn't, I

379
00:21:45.220 --> 00:21:49.150
kind of just made it
work and then, you know,

380
00:21:49.150 --> 00:21:52.420
tested it. And if there
was a problem, I would

381
00:21:52.420 --> 00:21:58.450
dig into that. But I
suspect that someone who's a

382
00:21:58.450 --> 00:22:01.420
really great hardware engineer would
probably find some flaws here

383
00:22:01.420 --> 00:22:05.470
and there. It sounds like
it's working pretty well though.

384
00:22:05.470 --> 00:22:07.720
And the reason that I
ask this is that I

385
00:22:07.720 --> 00:22:13.060
want to understand, could this
have been done 15 years

386
00:22:13.060 --> 00:22:15.940
ago, 10 years ago before
open source hardware, because I

387
00:22:15.940 --> 00:22:17.770
think that this is such
a wonderful time for people

388
00:22:17.770 --> 00:22:21.040
to jump in. Yeah. I
had a community to kind

389
00:22:21.040 --> 00:22:23.200
of help. I think it
would have been a lot

390
00:22:23.200 --> 00:22:27.310
harder. I think both, you
know, finding the information would

391
00:22:27.310 --> 00:22:32.050
have been harder, getting help
other companies, you know, like

392
00:22:32.050 --> 00:22:36.250
you mentioned particle, they've been
really awesome friend and partner

393
00:22:36.700 --> 00:22:39.940
in doing this. And like
you said, you know, I

394
00:22:40.090 --> 00:22:42.280
just posted on their forum
about this problem I was

395
00:22:42.280 --> 00:22:46.210
having. And they were able
to look into it, they're

396
00:22:46.210 --> 00:22:48.340
open source. So I could
look at their code and

397
00:22:48.790 --> 00:22:50.500
figure out what's going on.
They could look at my

398
00:22:50.500 --> 00:22:55.930
code and then just the
way that you can send

399
00:22:55.930 --> 00:22:58.690
out for boards to be
made, get them back quickly

400
00:22:58.690 --> 00:23:02.500
and cheaply and build them
yourself and iterate on that.

401
00:23:03.850 --> 00:23:07.480
That was a lot less
accessible in the past. And

402
00:23:08.350 --> 00:23:10.930
that's something people can do
now. And it actually makes

403
00:23:10.930 --> 00:23:14.200
it possible to start a
hardware company without a huge

404
00:23:14.200 --> 00:23:17.680
amount of capital. So you
didn't have to like fly

405
00:23:17.680 --> 00:23:22.330
to China and visit warehouses
and manufacturing. I think if

406
00:23:22.330 --> 00:23:24.580
I had been at a
higher volume that probably would

407
00:23:24.580 --> 00:23:27.160
have made sense, but for
me it was a pretty

408
00:23:27.160 --> 00:23:30.910
low volume. And so I
did it all here. I

409
00:23:30.910 --> 00:23:34.750
had a contract manufacturer in
Fremont here in the Bay

410
00:23:34.750 --> 00:23:40.780
area that did the manufacturing
for me. And there was

411
00:23:40.780 --> 00:23:43.540
some sourcing in China, but
it was all remote. You

412
00:23:43.540 --> 00:23:47.500
know, I would email the,
the there and get prices

413
00:23:47.500 --> 00:23:49.960
on parts, get samples. They
would send them over to

414
00:23:49.960 --> 00:23:52.480
me. So I was able
to do it all just

415
00:23:52.480 --> 00:23:56.830
from a home office. When
in, as a software person,

416
00:23:57.970 --> 00:23:59.950
I would do everything I
can to accelerate what I'm

417
00:23:59.950 --> 00:24:03.640
doing. I do continuous integration
and testing and unit tests

418
00:24:03.640 --> 00:24:07.960
and integration tests. But can
you, if you ship a

419
00:24:07.960 --> 00:24:11.320
piece of hardware and it
has a bug, what kinds

420
00:24:11.320 --> 00:24:13.930
of bugs are there? Is
it a bug like these

421
00:24:13.930 --> 00:24:16.420
two traces are too close
to each other or I

422
00:24:16.420 --> 00:24:18.640
pick the wrong chip or
what's a bug in the

423
00:24:18.640 --> 00:24:21.640
hardware world and how do
you deal with it? Yeah.

424
00:24:22.960 --> 00:24:26.110
Well there can be a
few different kinds. So some

425
00:24:26.110 --> 00:24:28.720
of them are literally, you
know, a trace is wrong

426
00:24:28.810 --> 00:24:32.740
or, you know, a component
is wrong or something, and

427
00:24:32.740 --> 00:24:34.720
there's not much you can
do about that. Other than,

428
00:24:35.020 --> 00:24:39.910
other than hopefully it's not
too serious. And if you've

429
00:24:39.910 --> 00:24:43.390
tested yourself stuff, you know
what it, it functions then

430
00:24:43.390 --> 00:24:48.190
you probably don't have anything
too serious, but other things

431
00:24:48.190 --> 00:24:52.720
can be, you know, more,
you know, more minor stuff,

432
00:24:52.750 --> 00:24:56.350
probably more firmware. Right? I
think that's a lot more

433
00:24:57.910 --> 00:25:00.400
or likely it's harder to
kind of test all the

434
00:25:00.400 --> 00:25:05.080
corner cases. What's your firmware?
So, one thing I did

435
00:25:05.080 --> 00:25:08.740
was I actually developed a
bootloader that runs on each

436
00:25:08.740 --> 00:25:11.950
of these little modules. So
if there is a bug

437
00:25:11.980 --> 00:25:14.980
I'm actually able to create
a software fix for that

438
00:25:15.880 --> 00:25:19.090
someone, a program to run
that can update the software

439
00:25:19.600 --> 00:25:23.410
that's running on their own.
So I haven't had to

440
00:25:23.410 --> 00:25:26.050
use that yet, but it's
given me a lot of

441
00:25:26.050 --> 00:25:30.010
peace of mind knowing that
if there's a serious issue,

442
00:25:30.010 --> 00:25:32.680
I can actually do that.
People don't have to buy

443
00:25:32.680 --> 00:25:36.130
new hardware in order to,
to get the new fix

444
00:25:36.130 --> 00:25:40.350
or functionality. Interesting. Cause that's
funny that you, you were

445
00:25:40.360 --> 00:25:42.460
that thoughtful ahead of time
because I'm looking at the

446
00:25:42.460 --> 00:25:45.160
display right now and I'm
thinking to myself, you know,

447
00:25:45.160 --> 00:25:47.500
what, if I wrote some
code and crashed the display

448
00:25:47.500 --> 00:25:48.910
or I messed up the
display or if we found

449
00:25:48.910 --> 00:25:51.100
a bug in it and
you just answered that question

450
00:25:51.100 --> 00:25:54.160
that you could give me
a program to update the

451
00:25:54.160 --> 00:25:56.950
little tiny processor on that
little tiny color display. Yeah,

452
00:25:56.950 --> 00:26:01.540
that's right. Yeah. That is
insane. One of the other

453
00:26:01.540 --> 00:26:03.430
things I thought was cool
about it is not just

454
00:26:03.430 --> 00:26:08.560
that there's modular pieces that
are like sensors and buttons

455
00:26:08.560 --> 00:26:10.600
and things like that. But
is it true that the

456
00:26:10.600 --> 00:26:13.810
processor can be pluggable as
well? I can pick the

457
00:26:13.810 --> 00:26:18.580
brain. Yeah. So we have
one processor, the modular controller

458
00:26:19.270 --> 00:26:23.680
that we make and ship,
but you can also use

459
00:26:23.680 --> 00:26:26.620
your mentioning the particle photon,
which is another processor you

460
00:26:26.620 --> 00:26:30.550
can use. So there's a
different type of that. Has

461
00:26:31.660 --> 00:26:35.230
it has the four module
modules, hello, sockets on it.

462
00:26:35.270 --> 00:26:37.750
Then it also has a
seat socket for a particle

463
00:26:37.750 --> 00:26:41.440
photon. So you can use
that. And then of course

464
00:26:41.440 --> 00:26:44.400
other people, you know that,
Oh, everything's open source. Other

465
00:26:44.400 --> 00:26:48.240
people could design other processors
that fit into the system.

466
00:26:48.780 --> 00:26:50.970
And then they would just
slide in like the modular

467
00:26:50.970 --> 00:26:56.970
controller and you can also
control everything over USB. There's

468
00:26:56.970 --> 00:27:00.750
a communication protocol that lets
you control all the devices.

469
00:27:00.750 --> 00:27:05.610
And right now there's a
Python API for that someone

470
00:27:05.610 --> 00:27:10.320
actually put together a.net library
for it too. I saw

471
00:27:10.320 --> 00:27:14.850
someone posted it recently on
the forum. And so other,

472
00:27:14.850 --> 00:27:17.700
you know, other people could
develop other APIs to control

473
00:27:17.700 --> 00:27:21.260
it from other languages. So
when you say it's open

474
00:27:21.260 --> 00:27:23.180
source, how does that work?
Is there you have open

475
00:27:23.180 --> 00:27:25.550
source software? I see your
get hub has lots of

476
00:27:25.550 --> 00:27:27.500
stuff on it, but is
the, is the hardware open

477
00:27:27.500 --> 00:27:29.720
source as well? Yeah, it
is the, all the hardware

478
00:27:29.720 --> 00:27:32.780
designs are also up there
on GitHub. So if you

479
00:27:32.780 --> 00:27:37.190
wanted to, you could download
those, get circuit boards made,

480
00:27:37.760 --> 00:27:40.190
you know, get the part
lists from those and make

481
00:27:40.190 --> 00:27:44.420
your own modules. Was that
something that you had planned

482
00:27:44.420 --> 00:27:46.370
from the beginning and is
that, was that in itself

483
00:27:46.630 --> 00:27:49.310
an intimidating? I mean, if
you, I can see right

484
00:27:49.310 --> 00:27:53.630
now get hub.com/modular labs and
right there under PCBs, there's

485
00:27:53.630 --> 00:27:56.180
all your PCBs there. Doesn't
that mean that a bad

486
00:27:56.180 --> 00:27:59.840
guy could go and I
don't know, make a bigger

487
00:28:00.140 --> 00:28:03.380
version of your company. Well,
you know, to be honest,

488
00:28:03.920 --> 00:28:07.940
they, they can get one
of the boards and look

489
00:28:07.940 --> 00:28:11.180
at it and see how
it's made. So there's not

490
00:28:11.180 --> 00:28:14.300
a lot there that's, you
know, they would be able

491
00:28:14.300 --> 00:28:17.930
to get the information as
far as giving them the

492
00:28:17.930 --> 00:28:20.990
rights to it. I think
if they really wanted to

493
00:28:20.990 --> 00:28:24.440
do that, they could just
work around it. Anyway, you

494
00:28:24.440 --> 00:28:29.090
know, I think people who
are relying on that, that

495
00:28:29.090 --> 00:28:35.870
sort of intellectual property protection
really should think about whether

496
00:28:35.870 --> 00:28:39.440
they have something that's really
being protected or whether it's,

497
00:28:40.550 --> 00:28:43.520
you know, people could just
kind of create something very

498
00:28:43.520 --> 00:28:47.480
similar and enter the market
anyway, in spite of it

499
00:28:48.020 --> 00:28:50.810
being protected by copyright or
patents or whatever it is.

500
00:28:52.460 --> 00:28:54.920
Yeah. It makes me think
about 10 years ago, I

501
00:28:54.920 --> 00:28:58.280
used to try to obfuscate
my dotnet code and run

502
00:28:58.280 --> 00:29:01.280
code office location tools to
prevent people from disassembling things.

503
00:29:01.280 --> 00:29:04.430
And this is the effort
required. It just makes them

504
00:29:04.430 --> 00:29:06.980
want to go and tear
it apart even more. Yeah.

505
00:29:07.490 --> 00:29:11.060
I'm Nate Sydell from SparkFun
I saw a talk, he

506
00:29:11.060 --> 00:29:15.320
gave a while back about
open source and he was

507
00:29:15.320 --> 00:29:19.760
talking about how companies can
kind of get lazy when

508
00:29:19.790 --> 00:29:23.090
they're closed source and kind
of start to think, Oh,

509
00:29:23.090 --> 00:29:27.170
we needed to really focus
on protecting this thing. And

510
00:29:27.860 --> 00:29:30.860
while they're doing that, other
companies are innovating and going

511
00:29:30.860 --> 00:29:35.360
past them. And if you
put those intellectual property concerns

512
00:29:35.360 --> 00:29:39.410
aside and focus on innovating,
creating new products, creating better

513
00:29:39.410 --> 00:29:44.560
products, serving your well, then
you'll have a successful company

514
00:29:45.220 --> 00:29:49.000
regardless of that. So I
thought that was great wisdom

515
00:29:49.000 --> 00:29:52.830
from him. Yeah. And this
also, I just like that

516
00:29:52.900 --> 00:29:55.680
there are more people who
are building companies that can

517
00:29:55.680 --> 00:29:58.200
be open source at their
core and that there can

518
00:29:58.200 --> 00:30:00.360
be some success there, but
then there's also giving back

519
00:30:00.360 --> 00:30:03.570
to the community and the
sense of an open ecosystem.

520
00:30:03.660 --> 00:30:05.910
Like I'm looking and thinking,
maybe I could make a

521
00:30:05.910 --> 00:30:09.360
ma a modular of my
own. It's a little intimidating

522
00:30:09.360 --> 00:30:12.330
to make the whole thing,
but you know, I could

523
00:30:12.330 --> 00:30:15.750
make a blood sugar meter
prototype of some kind because

524
00:30:15.750 --> 00:30:17.850
I'm diabetic and I'm always
looking at how to hack

525
00:30:18.420 --> 00:30:22.320
diabetes from a hardware perspective.
Yeah. Cool. You jumpstart me

526
00:30:22.320 --> 00:30:25.050
80% of the way. Yeah.
And you know, you can

527
00:30:25.050 --> 00:30:27.990
take one of those PCB
designs and just remove the

528
00:30:27.990 --> 00:30:31.020
components you don't need add
in the ones you do.

529
00:30:31.020 --> 00:30:33.510
And you don't even have
to start from a hundred

530
00:30:33.510 --> 00:30:36.600
percent scratch. You don't have
to get the board outline

531
00:30:36.600 --> 00:30:38.790
and all the connector placement
and all of that stuff.

532
00:30:38.790 --> 00:30:43.650
Right. And you also include
a blank slate modular, which

533
00:30:43.650 --> 00:30:48.540
gives you the base and
an API and GPIO pins.

534
00:30:48.750 --> 00:30:50.970
Yeah, that's right. It has
a little perf board area.

535
00:30:51.360 --> 00:30:53.730
So you can solder up
a small circuit and connect

536
00:30:53.730 --> 00:30:58.020
it to the rest of
your modular system without having

537
00:30:58.020 --> 00:31:00.930
to take on the entire,
you know, Oh, I need

538
00:31:00.930 --> 00:31:04.080
to design this whole thing
from scratch. You can focus

539
00:31:04.080 --> 00:31:07.920
on just that one piece
that's interesting or specific to

540
00:31:07.920 --> 00:31:11.940
whatever you're doing. So As
we kind of get towards

541
00:31:11.940 --> 00:31:14.100
the end here, maybe you
could clear something up for

542
00:31:14.100 --> 00:31:18.810
me. Is this a computer
or is it a microcontroller?

543
00:31:18.900 --> 00:31:21.360
And what is the difference
between these tiny computers and

544
00:31:21.360 --> 00:31:25.050
these tiny controllers and when
does controller and then computer

545
00:31:25.050 --> 00:31:27.090
begins? That's a good question.
I think a lot of

546
00:31:27.090 --> 00:31:30.000
people are confused by that,
especially because if you have

547
00:31:30.000 --> 00:31:33.660
a Arduino and a raspberry
PI sitting next to each

548
00:31:33.660 --> 00:31:36.660
other, they look very similar
and your tend to, to

549
00:31:36.660 --> 00:31:40.740
think that's kind of the
same thing. But the difference

550
00:31:40.740 --> 00:31:44.070
is that a microcontroller it's
kind of just running one

551
00:31:44.070 --> 00:31:47.430
program. So whatever Cody right
for it, it's just going

552
00:31:47.430 --> 00:31:50.670
to do that by itself.
And that's all it's going

553
00:31:50.670 --> 00:31:54.300
to do. Whereas a computer
with something like a raspberry

554
00:31:54.300 --> 00:31:57.780
PI is running a whole
operating system. It's like your

555
00:31:57.780 --> 00:32:02.460
desktop computer. So you can
run email programs on it

556
00:32:02.460 --> 00:32:05.490
and web browsers and all
this, you may not necessarily

557
00:32:05.490 --> 00:32:08.430
have a display hooked up,
but even if you don't,

558
00:32:08.430 --> 00:32:11.730
you have background processes, they're
running all of this other

559
00:32:11.730 --> 00:32:15.930
stuff. So it's a much
larger system. So the modular

560
00:32:15.960 --> 00:32:19.320
controller is a microcontroller. And
the particle photon that we

561
00:32:19.320 --> 00:32:22.530
were talking about earlier is
as well. But you can

562
00:32:22.530 --> 00:32:25.680
also connect the system to
a computer, whether that's your

563
00:32:25.680 --> 00:32:29.610
PC, your Mac raspberry pie,
whatever it is and use

564
00:32:29.610 --> 00:32:33.690
it with that too. Ah,
okay. So when I think

565
00:32:33.690 --> 00:32:36.780
about things like node bots,
and we talked to Raquel

566
00:32:37.230 --> 00:32:40.250
about node bots a couple
of a hundred episodes ago,

567
00:32:40.250 --> 00:32:44.390
or so the idea that
where does the brain live,

568
00:32:44.420 --> 00:32:48.050
right? Who's doing the thinking,
is it a PC that's

569
00:32:48.050 --> 00:32:52.040
then connected via USB and
then controlling the, the unique

570
00:32:52.100 --> 00:32:56.360
componentry and the motors and
things, or is it really

571
00:32:56.360 --> 00:32:58.490
independent where you can unplug
it from the PC and

572
00:32:58.490 --> 00:33:00.470
it can, it can be
alone and think on its

573
00:33:00.470 --> 00:33:03.320
own and run, like you
said, one program, right? You

574
00:33:03.320 --> 00:33:05.240
kind of with modular, you
kind of have a choice

575
00:33:05.240 --> 00:33:07.700
there. So you can kind
of use it either by

576
00:33:07.700 --> 00:33:11.030
itself, just program it to
do its own thing. Or

577
00:33:11.030 --> 00:33:14.150
if you have something that's,
you know, kind of serving

578
00:33:14.150 --> 00:33:17.240
as your larger brain, then
you can connect it to

579
00:33:17.240 --> 00:33:20.750
that and it can let
your computer do the thinking

580
00:33:20.750 --> 00:33:24.140
and then it can just
handle whatever commands you send

581
00:33:24.140 --> 00:33:27.110
to it from your computer.
Very cool. Well, I would

582
00:33:27.110 --> 00:33:29.870
really encourage people who are
listening and who are taking

583
00:33:29.870 --> 00:33:33.920
a look@modular.co. If you're involved
in, in STEM or in

584
00:33:33.920 --> 00:33:36.990
education, this would be a
really great thing for, for

585
00:33:37.010 --> 00:33:38.960
schools and for any kind
of a science program or

586
00:33:38.960 --> 00:33:41.360
computing program at a school
to definitely reach out to

587
00:33:41.360 --> 00:33:44.360
Aaron and to the folks
at modular. Thanks so much

588
00:33:44.360 --> 00:33:46.340
for chatting with me today.
This is fantastic. Thank you,

589
00:33:46.340 --> 00:33:50.000
Scott. This was really great.
This has been another episode

590
00:33:50.000 --> 00:33:59.590
of Hansel minutes and I'll
see you again. <inaudible>.

