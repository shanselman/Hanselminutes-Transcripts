WEBVTT FILE

1
00:00:00.240 --> 00:00:03.420
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.420 --> 00:00:06.360
they make the show possible.
Today's show is sponsored by

3
00:00:06.360 --> 00:00:10.560
developer express, become a UI
superhero with dev express controls

4
00:00:10.560 --> 00:00:15.090
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.450 --> 00:00:19.560
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.560 --> 00:00:23.640
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.760 --> 00:00:45.620
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com
<inaudible>. This is Scott Hanselman.

8
00:00:45.620 --> 00:00:48.140
This is another episode of
Hansel minutes today. I'm talking

9
00:00:48.140 --> 00:00:53.870
with Jeff Cross from Norwell technologies.
Jeff is a former Googler

10
00:00:54.200 --> 00:00:56.330
and a core committer on
the angular team. How are

11
00:00:56.330 --> 00:00:59.390
you? I'm great. Thanks for
having me. Thanks for coming

12
00:00:59.390 --> 00:01:03.170
on. So you used to
work for Google. Did you

13
00:01:03.200 --> 00:01:05.420
work on angular while you
worked for Google? Like it

14
00:01:05.420 --> 00:01:07.970
was conceived of and happened
while you were inside Google

15
00:01:08.510 --> 00:01:11.270
while it was conceived of
before I joined Google, I

16
00:01:11.270 --> 00:01:16.040
joined the angular team directly
when I came in 2013,

17
00:01:16.130 --> 00:01:20.060
early 2013, I think, I
think the first commit was

18
00:01:20.060 --> 00:01:25.010
actually by Michiko in 2009,
but it, at some point

19
00:01:25.040 --> 00:01:29.720
between 2009, 2013 became a
project that he and a

20
00:01:29.720 --> 00:01:32.840
couple others started taking seriously
and, and started using it

21
00:01:32.840 --> 00:01:36.170
Google and building into a
real project. And by the

22
00:01:36.170 --> 00:01:38.240
time I joined the team,
the community was already starting

23
00:01:38.240 --> 00:01:41.390
to take notice and, and
get excited about it. So

24
00:01:42.550 --> 00:01:45.230
I think there were, I
joined the team with a

25
00:01:45.230 --> 00:01:49.000
couple other people and there
were only three people on

26
00:01:49.010 --> 00:01:51.530
the team before we joined
was which was Mitch go

27
00:01:51.950 --> 00:01:56.480
Igor and Victor. Wow. Those
are some names I to,

28
00:01:56.990 --> 00:02:00.200
yeah, they're, they're all a
Slovak and Czech folks. So,

29
00:02:01.010 --> 00:02:02.990
so they had to learn
to speak other languages when,

30
00:02:02.990 --> 00:02:05.390
when the rest of us
joined the team. Oh, okay.

31
00:02:05.930 --> 00:02:09.560
So, so now you're outside
of Google and you have

32
00:02:09.560 --> 00:02:14.090
started your own company with
Victor. Sadkin called narwhal and

33
00:02:14.090 --> 00:02:17.840
it's enterprise consulting for angular,
which is an interesting idea.

34
00:02:17.840 --> 00:02:20.570
The idea that there's an
open source project out there,

35
00:02:20.600 --> 00:02:22.640
and I don't know who
to yell at when it

36
00:02:22.640 --> 00:02:25.760
goes wrong. You've given us
a company that we can

37
00:02:25.760 --> 00:02:29.810
then yell at exactly. That's
that's. Our whole marketing strategy

38
00:02:29.810 --> 00:02:32.960
is, is selling to CTOs
saying you can yell at

39
00:02:32.960 --> 00:02:34.370
us when things go bad.
We may not be able

40
00:02:34.370 --> 00:02:36.170
to do anything for you,
but, but you'll feel a

41
00:02:36.170 --> 00:02:39.020
little better and we'll cash
your checks for you. So

42
00:02:40.100 --> 00:02:44.990
it's a pretty good system.
So angular consulting, training support

43
00:02:44.990 --> 00:02:47.660
for, for enterprise teams. So
if an enterprise is concerned

44
00:02:47.660 --> 00:02:51.980
about bringing open source projects
like this into their environment,

45
00:02:52.280 --> 00:02:55.670
no real real professionals to
help them with that. Yeah,

46
00:02:55.670 --> 00:02:59.530
exactly. We saw kind of
this gap in, in the

47
00:02:59.530 --> 00:03:02.590
market, Victor and I both
have consulting backgrounds and we

48
00:03:02.590 --> 00:03:05.260
saw a lot of enterprises
already using angular, but we,

49
00:03:05.280 --> 00:03:07.480
we knew there was an
opportunity to be kind of

50
00:03:07.480 --> 00:03:10.210
this, this backup for these
teams or this kind of

51
00:03:10.210 --> 00:03:12.820
connection between the, the community
and the core contributors of

52
00:03:12.820 --> 00:03:16.390
angular and the teams using
it, who could really have,

53
00:03:17.110 --> 00:03:20.320
could really benefit from some
more people who are more

54
00:03:20.320 --> 00:03:22.930
directly associated with their projects,
have knowledge of their projects

55
00:03:22.930 --> 00:03:25.030
and their teams, and can
be there for them when

56
00:03:25.030 --> 00:03:28.000
they have questions or issues
that they need taken care

57
00:03:28.000 --> 00:03:33.060
of. So there's lots of
Podcasts and resources and YouTube

58
00:03:33.090 --> 00:03:35.580
and stuff out there where
people can learn about angular.

59
00:03:35.880 --> 00:03:38.940
And we're in we're three
minutes into a podcast and

60
00:03:38.940 --> 00:03:41.370
we've been saying angular, angular,
angular. And I'm sure that

61
00:03:41.370 --> 00:03:44.760
there's a bunch of people
who listen to shows and

62
00:03:44.760 --> 00:03:46.680
they hear angular and they
just keep thinking, wow, I

63
00:03:46.680 --> 00:03:49.590
really need to learn this
thing. But when they go

64
00:03:49.590 --> 00:03:55.410
around, they see these mixes
of JavaScript technologies and JavaScript

65
00:03:55.440 --> 00:03:59.520
patterns that they're not familiar
with, mixed with HTML. They

66
00:03:59.520 --> 00:04:01.320
see strings where they look
at a string and they

67
00:04:01.320 --> 00:04:03.570
can't quite tell, am I
looking at JavaScript? Am I

68
00:04:03.570 --> 00:04:07.050
looking at, so maybe we
can kind of back up

69
00:04:07.050 --> 00:04:09.600
a little bit and get
some, some context. Cause I

70
00:04:09.600 --> 00:04:12.150
think there's a class of
developer out there that has

71
00:04:12.150 --> 00:04:17.100
done model view controller on
the server side. And they

72
00:04:17.100 --> 00:04:20.430
have a general sense of
how, you know, models get

73
00:04:20.430 --> 00:04:23.790
populated. The management work that
a controller does and then

74
00:04:23.790 --> 00:04:25.560
how a view gets rendered.
But they do all of

75
00:04:25.560 --> 00:04:29.130
that on the server side,
in the world of angular,

76
00:04:29.970 --> 00:04:33.450
is it model view controller
on the client and it's

77
00:04:33.450 --> 00:04:36.360
there to be a partner
with the server. You know,

78
00:04:37.440 --> 00:04:40.230
it used to be, I
think when angular One was

79
00:04:40.230 --> 00:04:42.450
kind of coming out, it
was called model view controller.

80
00:04:42.450 --> 00:04:46.230
And then I think someone
at one point we were

81
00:04:46.230 --> 00:04:49.050
more calling it. MVVM kind
of similar to Silverlight to

82
00:04:49.050 --> 00:04:52.680
model because of the data
binding, right? I'm not sure

83
00:04:52.680 --> 00:04:54.990
what, what model I would
call it. Now our wet

84
00:04:54.990 --> 00:04:58.560
pattern I would call it.
I mean, it's actually, most

85
00:04:58.560 --> 00:05:02.910
of the, the JavaScript framework
ecosystem has more consolidated on

86
00:05:02.910 --> 00:05:07.470
this idea of components. So
which kind of encapsulate everything.

87
00:05:07.720 --> 00:05:11.250
They encapsulate the view, the,
the model, the controller into,

88
00:05:11.370 --> 00:05:15.330
into a single idea of
components. So they still have

89
00:05:15.480 --> 00:05:18.480
those three parts in them,
but it's, it's less monolithic

90
00:05:18.510 --> 00:05:22.440
than, than I think five
years ago, even how apps

91
00:05:22.440 --> 00:05:24.660
were built in the client
and on the server where,

92
00:05:24.680 --> 00:05:27.300
where you have kind of
your big application and everything

93
00:05:27.300 --> 00:05:30.690
has its place within this
tree of your application. Now

94
00:05:31.440 --> 00:05:34.110
we focused on this component
model, which is more composable,

95
00:05:34.110 --> 00:05:40.530
more encapsulated, more contained, more
explicit contracts. So I've probably

96
00:05:40.530 --> 00:05:43.110
just added more confusion to
what people already have. Well,

97
00:05:43.380 --> 00:05:45.510
let's, let's well, let's tease
it apart. That's kind of,

98
00:05:45.740 --> 00:05:48.270
that's kind of our job.
So when I go in

99
00:05:48.280 --> 00:05:52.290
and make my first component,
that component being the combination

100
00:05:52.290 --> 00:05:55.860
between some HTML and then
some class behind it that

101
00:05:55.890 --> 00:05:59.450
helps kind of manage it
is, is the concept of

102
00:05:59.450 --> 00:06:02.750
component. When I say import
component from angular, is that

103
00:06:02.750 --> 00:06:05.690
an Angularism? Is that word
meaningful? Does it mean something

104
00:06:05.690 --> 00:06:07.970
in JavaScript is the browser
Noah component means? Or is

105
00:06:07.970 --> 00:06:11.170
that a magic word? So
this is this idea of

106
00:06:11.170 --> 00:06:15.190
component. I think angular was,
I'll say is a pioneer

107
00:06:15.190 --> 00:06:17.620
in the idea. We had
the idea of components in

108
00:06:17.620 --> 00:06:21.550
angular. One, we call it
directives then and directives. Weren't

109
00:06:21.550 --> 00:06:24.280
always components that could sometimes
be attached to other elements,

110
00:06:24.790 --> 00:06:28.240
but that's, that's not important
here, but we, we were

111
00:06:28.240 --> 00:06:30.190
one of the first frameworks
to have this idea of

112
00:06:30.190 --> 00:06:32.860
built in where you could
define behavior, that would be

113
00:06:32.860 --> 00:06:36.250
encapsulating component. And then you
could bring this component into

114
00:06:36.490 --> 00:06:39.760
another view or another component
just by using an HTML

115
00:06:39.760 --> 00:06:44.800
tag that you've specified for
that component. We worked with

116
00:06:44.800 --> 00:06:48.550
the Chrome team and, and
have we all always have

117
00:06:48.550 --> 00:06:51.760
talked with some other frameworks
like Amber as well about

118
00:06:52.300 --> 00:06:57.460
this component idea. And so
the Chrome team sometime ago,

119
00:06:57.500 --> 00:06:59.290
I'm not sure when, when
they really start working on

120
00:06:59.290 --> 00:07:01.600
this, but they've been working
on a spec for, for

121
00:07:01.600 --> 00:07:05.800
components in the, in HTML,
in the web platform for

122
00:07:05.800 --> 00:07:08.740
some time. And that it's
comprised of lots of different

123
00:07:08.740 --> 00:07:12.670
technologies, like custom elements, being
a big part of it,

124
00:07:12.670 --> 00:07:14.980
where you can have elements
that you registered for specific

125
00:07:14.980 --> 00:07:17.650
HTML tag, so that when,
when you, after you register

126
00:07:17.650 --> 00:07:19.360
it, you can just put
this tag anywhere in your

127
00:07:19.360 --> 00:07:22.480
document. And that custom element
will appear with all the

128
00:07:22.480 --> 00:07:27.640
behavior that's associated with it.
So, and that's like in

129
00:07:27.640 --> 00:07:30.520
a, even in Safari preview,
I think now they have

130
00:07:30.520 --> 00:07:32.830
custom elements support. They've got
other parts of the web

131
00:07:32.830 --> 00:07:36.760
component spec from the platform
available and other frameworks like

132
00:07:36.790 --> 00:07:42.130
react and Amber Raylea, I
think, view they all, they

133
00:07:42.130 --> 00:07:44.380
all have this idea of
writing your application as a

134
00:07:44.380 --> 00:07:49.150
bunch of components that you've
composed together, that, that encapsulate

135
00:07:49.150 --> 00:07:52.060
the behavior that you can
compose in different ways. Okay.

136
00:07:52.390 --> 00:07:57.790
So teasing that apart. There's
for example, in HTML, no,

137
00:07:57.790 --> 00:08:02.140
Scott hyphen menu tag, you
can't make an element that

138
00:08:02.140 --> 00:08:05.080
is Scott hyphen menu. And
if you do, it'll just

139
00:08:05.320 --> 00:08:07.810
be ignored because that's the
way Chanel has been. Since

140
00:08:07.810 --> 00:08:10.870
the beginning of time, I
can make a component that

141
00:08:10.870 --> 00:08:14.200
is the Scott hyphen menu
element. Describe how it's rendered,

142
00:08:14.260 --> 00:08:17.380
give it behavior and start
using that tag as if

143
00:08:17.380 --> 00:08:20.110
I just created a new
HTML element and it'll start

144
00:08:20.440 --> 00:08:27.430
working immediately. Exactly. That to
old people like myself sounds

145
00:08:27.430 --> 00:08:30.280
a lot like, like, just
as an example, like asp.net

146
00:08:30.280 --> 00:08:33.250
web forms that we were
doing 20 years ago, except

147
00:08:33.250 --> 00:08:35.830
it was on the work
happened on the server. Yep.

148
00:08:35.980 --> 00:08:38.920
Yeah. You would have controls
in the web forms. So

149
00:08:38.920 --> 00:08:41.590
what's up The difference between
a control with behavior and

150
00:08:41.590 --> 00:08:45.680
a component with, with a
template and behavior? Are they,

151
00:08:45.730 --> 00:08:48.400
or are they similar or
is that an offensive analogy?

152
00:08:48.910 --> 00:08:52.870
No, but I had some
experience with, with web forms

153
00:08:52.870 --> 00:08:56.550
and controls as far as
I they're pretty conceptually similar.

154
00:08:56.550 --> 00:08:58.530
I couldn't tell you what,
where the lines are drawn

155
00:08:58.530 --> 00:09:03.290
between, between the difference between
Okay. But it sounds like

156
00:09:03.920 --> 00:09:06.920
we are, we are as
a community as a, as

157
00:09:06.920 --> 00:09:09.710
an industry kind of like
exploring different we're poking at

158
00:09:09.710 --> 00:09:12.800
this thing, trying to figure
out different directions. Exactly. Yeah.

159
00:09:12.800 --> 00:09:14.870
So that's a good point
because I would say it's

160
00:09:14.870 --> 00:09:17.720
based on a lot of
prior art, there's nothing really

161
00:09:17.720 --> 00:09:20.240
original in the idea of
components or web components other

162
00:09:20.240 --> 00:09:22.820
than how it's applied to
the web platform and how

163
00:09:22.820 --> 00:09:25.370
it fits in. So yeah,
it's based on patterns that

164
00:09:25.520 --> 00:09:27.920
have worked well in the
past with, with frameworks, like.net.

165
00:09:29.270 --> 00:09:32.090
So, so then you've got,
you've got two way data

166
00:09:32.090 --> 00:09:35.630
binding, right? You described that,
that template and you get

167
00:09:35.630 --> 00:09:37.370
your two-way data binding, and
you said that that's kind

168
00:09:37.370 --> 00:09:39.860
of like, Silverlight, it's comfortable
to people who are familiar

169
00:09:39.860 --> 00:09:44.000
with, with MVVM and then
you've got dependency injection. Do

170
00:09:44.000 --> 00:09:46.370
you have your own dependency
injection thing or is there,

171
00:09:46.430 --> 00:09:49.490
is there some new, yes.
Six thing that we're doing?

172
00:09:50.510 --> 00:09:52.940
No, I don't think there's
a, I don't think there's

173
00:09:52.940 --> 00:09:56.720
anything in the standards process
right now regarding dependency injection.

174
00:09:56.780 --> 00:10:00.080
Other than you could say
that the module specification that's

175
00:10:00.080 --> 00:10:03.120
being worked out is loosely
related. It depends on injections.

176
00:10:03.130 --> 00:10:08.300
So angular has angular one
and angular two point X

177
00:10:08.300 --> 00:10:10.490
plus. So we try to
call it just angular instead

178
00:10:10.490 --> 00:10:14.300
of calling it angular two,
that they both have different

179
00:10:14.300 --> 00:10:17.630
dependency injection systems that we
wrote specifically for the framework,

180
00:10:18.590 --> 00:10:21.440
the one and two being
more dynamic and more powerful

181
00:10:21.440 --> 00:10:26.150
and supporting features like being
able to modify injectors for

182
00:10:26.210 --> 00:10:29.690
children components and things like
that. But yeah, we've, we

183
00:10:29.870 --> 00:10:33.350
have written our own. Actually
my, my partner, Victor wrote

184
00:10:33.350 --> 00:10:37.520
most of the implementation for,
for angular two and a

185
00:10:37.850 --> 00:10:41.270
D or dependency injection, we
call it D I is

186
00:10:41.270 --> 00:10:45.380
a really powerful tool. It's,
it's powerful for how we

187
00:10:45.380 --> 00:10:48.110
construct a framework and how
we inject things like getting

188
00:10:48.110 --> 00:10:50.870
references to other components and
things like that. And also

189
00:10:50.870 --> 00:10:55.010
being able to write services
that you can easily trust

190
00:10:55.010 --> 00:10:57.830
the framework to go ahead
and instantiate and share between

191
00:10:57.830 --> 00:11:00.290
your components and provide to
you when you need them.

192
00:11:01.460 --> 00:11:03.050
So for using it in
your application is great, but

193
00:11:03.050 --> 00:11:07.250
for testing it, it makes
mocking and that kind of

194
00:11:07.250 --> 00:11:10.400
thing. So much more, so
much more easy, and so

195
00:11:10.400 --> 00:11:13.130
much more of a first-class
philosophy of the framework that

196
00:11:13.670 --> 00:11:15.020
you really have to go
out of your way, not

197
00:11:15.020 --> 00:11:18.470
to do unit testing properly
with, with angular, because dependency

198
00:11:18.470 --> 00:11:21.920
injection is so baked into
everything. Okay. So this is

199
00:11:21.920 --> 00:11:24.170
the kind of framework where
as I run through source

200
00:11:24.170 --> 00:11:25.910
code, if I'm doing it
right, I'm not going to

201
00:11:25.910 --> 00:11:29.480
see me going new here,
new this, and new that

202
00:11:29.510 --> 00:11:31.760
I'm not going to see
people new and stuff up

203
00:11:31.790 --> 00:11:36.310
all the time. Exactly. Yeah.
That's, it's pretty infrequent to,

204
00:11:36.310 --> 00:11:39.410
to see you in stanchion,
in classes, within components and

205
00:11:39.410 --> 00:11:42.050
things like that, unless you're
not yet familiar with dependency

206
00:11:42.050 --> 00:11:44.360
injection. Right. And then presumably
I wouldn't see like a

207
00:11:44.360 --> 00:11:47.030
lot of factories like this
factory now that factory that

208
00:11:47.030 --> 00:11:50.060
makes this objects and that
objects. Yeah. I mean, I

209
00:11:50.060 --> 00:11:52.220
think in maybe in services
you would still have that

210
00:11:52.220 --> 00:11:54.340
kind of pattern. Like you,
if you have a service,

211
00:11:54.340 --> 00:11:56.950
that's interacting with an API
and you want to take

212
00:11:56.950 --> 00:11:59.530
its data and cast it
as some kind of model

213
00:11:59.530 --> 00:12:01.390
locally, then you may see
that kind of thing. But

214
00:12:01.840 --> 00:12:04.360
within components, you probably wouldn't
see that pattern very much.

215
00:12:06.450 --> 00:12:09.660
So where do you think
people get caught in the

216
00:12:09.660 --> 00:12:14.190
weeds on, on angular? I
have my sense of where

217
00:12:14.190 --> 00:12:17.550
I think things go where
things start to get difficult,

218
00:12:17.610 --> 00:12:20.910
but I'm curious what you
think. Well, I think, I

219
00:12:20.910 --> 00:12:24.150
think one of the biggest
things, no, the biggest learning

220
00:12:24.150 --> 00:12:26.340
challenges with angulars is that
there's a lot to it.

221
00:12:27.180 --> 00:12:31.110
We try to make it
a fully baked platform, especially

222
00:12:31.110 --> 00:12:34.290
with angular too. When we
got into it, we wanted

223
00:12:34.290 --> 00:12:37.020
to make it where it
would be easier to do

224
00:12:37.020 --> 00:12:40.410
the right thing by default.
And by, by making that

225
00:12:40.410 --> 00:12:42.870
decision, it meant we had
to take more ownership of,

226
00:12:42.900 --> 00:12:45.690
of making all the different
parts of the framework. Great.

227
00:12:45.690 --> 00:12:48.840
By that, I mean like
the router, the HTP library,

228
00:12:49.740 --> 00:12:54.510
our testing utilities, even, even
getting more into like server,

229
00:12:54.510 --> 00:12:57.030
like we need to be
more involved in how angular

230
00:12:57.060 --> 00:12:59.820
can be pre-rendered so that
people who want fast, first

231
00:12:59.820 --> 00:13:01.980
paints and want to be
able to pre-render something like

232
00:13:01.980 --> 00:13:03.420
if you're a new site
or a blog or something

233
00:13:03.420 --> 00:13:05.370
where you really want content
to be rendered on the

234
00:13:05.370 --> 00:13:08.550
first request, we said, we
need to, we need to

235
00:13:08.550 --> 00:13:10.410
take ours for these things
and make them work together.

236
00:13:11.040 --> 00:13:13.860
And so as a byproduct
of that, there's kind of

237
00:13:13.860 --> 00:13:17.400
this whole big landscape of
things that you can see

238
00:13:17.400 --> 00:13:20.010
when you start to jump
into angular and not know

239
00:13:20.010 --> 00:13:23.880
where to start and maybe
be overwhelmed and just intimidated

240
00:13:23.880 --> 00:13:25.830
and say, I'm going to
go with something simpler, like

241
00:13:25.830 --> 00:13:29.010
a library that I can,
I can build from a,

242
00:13:29.010 --> 00:13:30.600
so we've, we've been trying
to work on that in

243
00:13:30.610 --> 00:13:33.840
how we organize our docs.
And also just how we

244
00:13:33.840 --> 00:13:38.400
communicate things like focusing on
the important core bits in

245
00:13:38.400 --> 00:13:41.040
how we communicate things before
people get into the more

246
00:13:41.040 --> 00:13:44.440
advanced things. But I'd say
just the sheer number of,

247
00:13:44.440 --> 00:13:47.430
of things that are part
of the, you know, the

248
00:13:47.430 --> 00:13:52.290
official angular project are, are
probably the biggest, the biggest

249
00:13:52.290 --> 00:13:54.060
thing against us. And then
some of the concepts like

250
00:13:54.240 --> 00:13:58.890
dependency injection, but they sound
intimidating or they sound complicated.

251
00:13:59.010 --> 00:14:01.950
And you know, the implementation,
once you get into more

252
00:14:01.950 --> 00:14:04.260
advanced things, there are some
things that require a little

253
00:14:04.260 --> 00:14:07.080
bit of learning, but, but
it's actually a pretty simple

254
00:14:07.170 --> 00:14:11.040
concept if you, if it's
taught properly or learned properly,

255
00:14:11.550 --> 00:14:15.510
Right. There does seem to
be that issue around when

256
00:14:15.510 --> 00:14:17.970
you have an opinionated framework
and it has a lot

257
00:14:17.970 --> 00:14:20.730
of stuff. Do you go
and try to learn all

258
00:14:20.740 --> 00:14:23.730
that? A lot of stuff
all at once, you know,

259
00:14:23.730 --> 00:14:26.250
like, or do I just
start with the basics? Like,

260
00:14:26.250 --> 00:14:29.220
so like just here's data
binding, here's the smallest little

261
00:14:29.220 --> 00:14:32.820
bit of hello world. It
just seems like sometimes we

262
00:14:32.820 --> 00:14:36.630
come upon angular examples when
it's like, okay, we've learned

263
00:14:36.630 --> 00:14:40.770
hello world. Now here's an
example with 55 files. And

264
00:14:40.770 --> 00:14:44.280
then I'm off in like
apps slash core Slack and

265
00:14:44.280 --> 00:14:46.620
I'm just components and services
and modules. And I still

266
00:14:46.620 --> 00:14:48.600
don't know what those three
things are, you know? Yeah.

267
00:14:49.320 --> 00:14:52.490
Yeah. And another hard thing
is the web platform is

268
00:14:52.490 --> 00:14:55.550
evolving so quickly too. And
we're trying to always stay

269
00:14:55.550 --> 00:14:59.030
ahead of it, but it
adds some more complexity, the

270
00:14:59.030 --> 00:15:02.150
tier process as well, because
we're, we're using IES modules

271
00:15:02.150 --> 00:15:04.730
for one with we're using
TypeScript, which is based on

272
00:15:04.740 --> 00:15:09.410
S modules and yes, 2015
and, and standards that are

273
00:15:09.410 --> 00:15:13.010
already have already progressed to
a certain stage of the

274
00:15:13.010 --> 00:15:16.490
standardization process. But so that
means you have to have

275
00:15:16.490 --> 00:15:18.770
a build process. If you're
using things the way we

276
00:15:18.770 --> 00:15:22.100
recommend you use them. And
so we've built angular, CLI

277
00:15:22.100 --> 00:15:24.500
there's a whole team of
folks who work on that

278
00:15:24.500 --> 00:15:26.360
in the community and on
the angular core team at

279
00:15:26.360 --> 00:15:29.930
Google to try to get
around this. But even when

280
00:15:29.930 --> 00:15:32.510
you UCLA, you're still generating
a lot of files and

281
00:15:32.510 --> 00:15:36.050
you're trusting that CLI will
keep on built. We'll keep

282
00:15:36.050 --> 00:15:38.360
on building things correctly for
you in serving them correctly.

283
00:15:38.720 --> 00:15:41.090
You're you don't really touch
your build configuration or anything,

284
00:15:41.090 --> 00:15:44.120
which is nice for beginners,
but, but then it's also

285
00:15:44.120 --> 00:15:46.160
intimidating. If you look at
all these files and you

286
00:15:46.160 --> 00:15:48.080
say, I don't know what
half these things do or

287
00:15:48.080 --> 00:15:51.800
why they're here and I'm
afraid to touch anything. So

288
00:15:51.800 --> 00:15:55.370
that's, it's kind of this
awkward phase of growth in

289
00:15:55.400 --> 00:15:58.280
the web platform community that
I hope gets less awkward

290
00:15:58.340 --> 00:16:01.510
as time goes on. You
know, I wrote a blog

291
00:16:01.540 --> 00:16:04.210
post recently that you just
reminded me of that talked

292
00:16:04.210 --> 00:16:07.660
about the different learning styles
of people and proposed an

293
00:16:07.660 --> 00:16:10.570
idea that there are those
who learn from, from the

294
00:16:10.570 --> 00:16:14.020
metal up assembly. And then
those who learned from the

295
00:16:14.020 --> 00:16:18.610
glass on the screen back.
And when you think about

296
00:16:18.610 --> 00:16:22.200
angular, I want to learn
about JavaScript and the child

297
00:16:22.390 --> 00:16:25.270
virtual machine, and what's going
on inside while others want

298
00:16:25.270 --> 00:16:28.930
to go and make hello,
world hit F 12. And

299
00:16:29.230 --> 00:16:33.160
it's difficult to combine those
two learning styles into one

300
00:16:33.160 --> 00:16:38.110
single, you know, here's how
to learn framework a yep.

301
00:16:38.920 --> 00:16:40.600
So like I'm looking at,
you have this thing called

302
00:16:41.110 --> 00:16:46.750
Klinker PLN, K r.co, and
it's like a pin bunker.

303
00:16:47.740 --> 00:16:50.320
So it's, you know, it's
an online ID for, for,

304
00:16:50.710 --> 00:16:53.170
and all of the angular
examples send me off there.

305
00:16:53.170 --> 00:16:55.810
And it's a very much
a like let's learn angular

306
00:16:55.810 --> 00:16:59.350
from inside the browser from
the class back. Sure. Which

307
00:16:59.350 --> 00:17:01.420
makes a lot of sense.
But like then you brought

308
00:17:01.420 --> 00:17:05.320
up an interesting point around
server side rendering of the

309
00:17:05.320 --> 00:17:09.430
first page load. And then,
then I start wondering, well,

310
00:17:09.430 --> 00:17:11.410
how does that happen? And
I want to dig in

311
00:17:11.440 --> 00:17:14.740
underneath, let's talk about that
for a second. What does

312
00:17:14.740 --> 00:17:16.750
that mean? That the server
side rendering of the first

313
00:17:16.750 --> 00:17:19.900
page load and why does
that matter? Sure. So server

314
00:17:19.900 --> 00:17:23.260
side rendering, there's a project
called universal that the community

315
00:17:23.260 --> 00:17:27.130
members, Patrick JS Patrick Stapleton
has a real name. Everyone

316
00:17:27.130 --> 00:17:30.490
calls him Patrick JS. He
and Jeff Wellesley worked on

317
00:17:30.490 --> 00:17:32.950
this, I think starting at
probably over a year ago.

318
00:17:34.180 --> 00:17:37.330
And it's, it's written a
node. And basically what it

319
00:17:37.330 --> 00:17:41.290
is is it will take
your application module and it

320
00:17:41.350 --> 00:17:44.320
will mock some things like
create a mock document in

321
00:17:44.320 --> 00:17:46.720
the backend. I guess I'm
talking a little bit too

322
00:17:46.720 --> 00:17:50.310
low level, but what the
end user experience is is

323
00:17:50.310 --> 00:17:53.610
that I come to your
I've. Maybe somebody shared a

324
00:17:53.610 --> 00:17:55.770
link to your new site
on Facebook or something, and

325
00:17:55.770 --> 00:17:57.690
I click it. And as
soon as I hit your

326
00:17:57.690 --> 00:18:02.220
site, there's content displayed right
away, even before any JavaScript

327
00:18:02.220 --> 00:18:06.090
or anything has loaded. And
the reason why it works

328
00:18:06.090 --> 00:18:09.150
is because we actually run
angular on the server and

329
00:18:09.420 --> 00:18:12.090
we take the route that
you've requested and tell, and

330
00:18:12.420 --> 00:18:15.960
we'll bootstrap your app for
that route on the backend,

331
00:18:15.960 --> 00:18:18.810
and then serve the rendered
page to the client and

332
00:18:18.810 --> 00:18:22.440
then download the rest of
the angular library and whatever

333
00:18:22.440 --> 00:18:25.350
other dependencies you need. So
that as the user interacts

334
00:18:25.350 --> 00:18:28.920
with your page and EULAR
takes over your page and

335
00:18:28.920 --> 00:18:31.650
then can handle the other
user interactions. And from that

336
00:18:31.650 --> 00:18:35.280
point forward, there's no more
requesting documents from the server.

337
00:18:35.280 --> 00:18:37.920
As long as you have
this page open, it's just

338
00:18:37.920 --> 00:18:42.420
you, you interacting with the
angular application as if it

339
00:18:42.420 --> 00:18:44.870
wasn't pre-rendered at all. Okay.
So let me see if

340
00:18:44.870 --> 00:18:48.290
I can parse what you
just said and paraphrase for

341
00:18:48.290 --> 00:18:50.330
those that might, might not
have followed all of that.

342
00:18:50.750 --> 00:18:53.540
That means that the very
first time I visit the

343
00:18:53.540 --> 00:18:57.830
page, if I hit view
source, I'd see real tables

344
00:18:57.830 --> 00:19:02.570
and real lists and real
HTML. Yes. But after that

345
00:19:02.570 --> 00:19:06.350
moment, then it would be
done on the client side.

346
00:19:06.350 --> 00:19:08.900
And I would, if I
clicked, for example, to sort

347
00:19:08.900 --> 00:19:12.590
a table, that second click
would go and render the

348
00:19:12.590 --> 00:19:15.290
table on the client side,
using angular, using templating, and

349
00:19:15.290 --> 00:19:17.510
I'd be off running like
I'm running on Gmail with

350
00:19:17.510 --> 00:19:22.880
a nice clean, fresh JavaScript
powered application. Exactly. And this

351
00:19:22.880 --> 00:19:27.020
is useful for, for different
use cases. One is obviously

352
00:19:27.020 --> 00:19:30.830
having fast renders for, for
everything is great. It's critically

353
00:19:30.830 --> 00:19:33.380
important for things like content
sites like blogs and news,

354
00:19:34.100 --> 00:19:37.880
but it's also useful for
search engine optimization, which sorts

355
00:19:37.880 --> 00:19:40.520
of Google crawler and other
search engine crawlers have gotten

356
00:19:40.520 --> 00:19:44.060
better about rendering JavaScript applications.
I actually started writing a

357
00:19:44.060 --> 00:19:47.630
blog series on the narwhal
blog and gave a, a

358
00:19:47.820 --> 00:19:52.040
meetup talk about this last
week where the, the browsers

359
00:19:52.040 --> 00:19:54.260
now actually, you don't have
to have any pre rendering

360
00:19:54.260 --> 00:19:56.660
and they can actually render
your application pretty well, but

361
00:19:56.660 --> 00:19:58.880
it's not perfect. And you've
got to have a solid

362
00:19:58.880 --> 00:20:03.440
application. It's gotta be fast
and navigate without bugs and

363
00:20:03.440 --> 00:20:06.530
that kind of thing. So
in that case, and even

364
00:20:06.530 --> 00:20:09.800
with other callers, like, like
being, being, I'm not sure

365
00:20:09.800 --> 00:20:12.740
where they're at with how
they render JavaScript pages, but

366
00:20:13.910 --> 00:20:16.130
with pre rendering, it's a
backup. So you can say,

367
00:20:16.130 --> 00:20:19.910
okay, even if they can't
render my application with JavaScript,

368
00:20:20.000 --> 00:20:22.000
they'll have the pre-rendered version
to fall back to, and

369
00:20:22.020 --> 00:20:24.290
they can see the actual
content of the page index

370
00:20:24.290 --> 00:20:26.300
it, and I'll be fine.
And the same is true

371
00:20:26.300 --> 00:20:32.600
for scrapers like social media,
scrapers and readers, offline readers,

372
00:20:32.600 --> 00:20:33.800
that kind of thing. If
you want to save your

373
00:20:33.800 --> 00:20:37.760
page, those have varying abilities
of being able to render

374
00:20:37.850 --> 00:20:41.960
dynamic JavaScript content so they
can see your pre-rendered page

375
00:20:41.960 --> 00:20:44.840
scrap the thumbnails and the
content and that kind of

376
00:20:44.840 --> 00:20:48.240
thing without, without you having
worry about it. So for

377
00:20:48.280 --> 00:20:53.590
content heavy sites, pre rendering
is particularly important. So Is

378
00:20:53.670 --> 00:20:55.980
this something that is done
without me having to think

379
00:20:55.980 --> 00:20:57.600
about it? Or is this
something that I have to

380
00:20:57.600 --> 00:21:02.340
be aware of? It's there
are certain choices you have

381
00:21:02.340 --> 00:21:05.220
to make to support pre
rendering. Also, we have this

382
00:21:05.220 --> 00:21:07.170
other feature, which I don't
want to get off on

383
00:21:07.170 --> 00:21:08.730
a tangent, but we also
have it where you can

384
00:21:08.730 --> 00:21:11.820
run your application on a
web worker. Both of these

385
00:21:11.820 --> 00:21:14.670
have similar constraints because you
don't have access to the

386
00:21:14.670 --> 00:21:19.410
real Dom. So if you're,
if you're doing things like

387
00:21:19.440 --> 00:21:22.230
if you're getting a hold
of actual native elements in

388
00:21:22.230 --> 00:21:25.020
your code or native objects
that are, that are only

389
00:21:25.020 --> 00:21:28.230
in the window and Dom
context and not in node,

390
00:21:28.230 --> 00:21:31.140
for example, are not in
a worker context, then your

391
00:21:31.140 --> 00:21:33.270
code is probably going to
throw an exception when you

392
00:21:33.270 --> 00:21:37.200
run it in universal or
an a worker. So angular

393
00:21:37.200 --> 00:21:41.610
actually discourages you from directly
touching Dom, like a discourages

394
00:21:41.610 --> 00:21:44.010
you from bringing in jQuery
and getting hold of elements

395
00:21:44.010 --> 00:21:47.430
and that kind of thing,
and encourages you to abstract

396
00:21:47.430 --> 00:21:51.660
everything in components and directives.
Sometimes there are legitimate reasons

397
00:21:51.660 --> 00:21:55.800
why you do need to
touch the Dom. So, so

398
00:21:56.370 --> 00:21:57.960
there are ways you can
work around those things and

399
00:21:57.960 --> 00:22:00.270
universal that, but the way
most people would do it,

400
00:22:00.510 --> 00:22:02.910
if you write an app
that works in the front

401
00:22:02.910 --> 00:22:04.860
end and you're touching Dom
lots of places, and then

402
00:22:04.860 --> 00:22:07.350
you bring universal, you're probably
going to break. And so

403
00:22:07.350 --> 00:22:09.330
there are ways around it,
but we do try to

404
00:22:09.390 --> 00:22:12.330
we're, we're always trying to
make it easier. We do

405
00:22:12.330 --> 00:22:16.560
have providers in universal that
will replace the HTTP requests

406
00:22:16.560 --> 00:22:19.290
with some, instead of using
XML, each peer requests that's

407
00:22:19.290 --> 00:22:22.050
in the browser, we'll use
nodes backend to make HTP

408
00:22:22.050 --> 00:22:25.920
requests. Same with a browser.
API is like location. It

409
00:22:26.100 --> 00:22:29.340
creates a node version of
that, so that it just

410
00:22:29.340 --> 00:22:32.340
works automatically. And if you
have a simple enough app

411
00:22:32.340 --> 00:22:36.300
and you're, you're keeping within
the bounds that angular sets

412
00:22:36.300 --> 00:22:38.520
for you, then it might
just work out a box,

413
00:22:38.520 --> 00:22:41.220
but there's a lot, there's
a learning curve to it

414
00:22:41.220 --> 00:22:45.120
right now. So honest, honest
question, not, not a troll,

415
00:22:45.150 --> 00:22:48.420
but how helpful As far
as, too far, like how

416
00:22:48.420 --> 00:22:50.880
far are we, how far
is going to the point

417
00:22:50.880 --> 00:22:53.820
where we're trying to make
a framework work on the

418
00:22:53.820 --> 00:22:55.530
web where the web just
doesn't want it to work

419
00:22:55.530 --> 00:22:58.230
that way? Like how much
of this is a polyfill

420
00:22:58.230 --> 00:23:02.610
for the internet itself versus
like, you know, this is

421
00:23:02.610 --> 00:23:05.040
just a clever thing and
move on, you know, like,

422
00:23:05.040 --> 00:23:06.690
I guess I'm trying to
understand, like, that sounds pretty

423
00:23:06.690 --> 00:23:08.640
intense and maybe the internet
doesn't want to work that

424
00:23:08.640 --> 00:23:11.340
way. And, you know, are
we in a place where

425
00:23:11.340 --> 00:23:13.770
we've had to fight to,
to make that work? Or

426
00:23:13.770 --> 00:23:15.210
is this, am I making
a bigger deal out of

427
00:23:15.210 --> 00:23:20.820
this than it is? I'd
say they're pre rendering, I

428
00:23:20.820 --> 00:23:24.220
think is a, that's a,
that's a tough question. I

429
00:23:24.240 --> 00:23:26.430
mean, so pre-rendered for one,
I don't think every app

430
00:23:26.430 --> 00:23:28.530
needs to do it. I
think it's probably a small

431
00:23:28.530 --> 00:23:30.840
subset of apps that actually
need to worry about this,

432
00:23:31.770 --> 00:23:35.040
like a banking app and
really interactive things, dashboards, CRMs,

433
00:23:35.040 --> 00:23:36.660
those kinds of things, pre
rendering. You don't need to

434
00:23:36.660 --> 00:23:39.120
worry about you'll have good
performance if you do everything

435
00:23:39.120 --> 00:23:41.040
else, right. We're able to
load quickly and the user

436
00:23:41.040 --> 00:23:45.530
will feel, feel, things are
responding nicely when it gets

437
00:23:45.530 --> 00:23:48.110
into other things in the
browser. There's a lot that's

438
00:23:49.640 --> 00:23:51.530
that I think could still
stand to be solved in

439
00:23:51.530 --> 00:23:55.220
the browser itself. Like web
workers are kind of a

440
00:23:55.220 --> 00:23:57.650
difficult thing because they're the
only way to do threading

441
00:23:57.650 --> 00:24:00.530
or multithreading and the browser
right now, or something that

442
00:24:00.530 --> 00:24:04.430
looks like multithreading where you
can, you can unblock the

443
00:24:04.430 --> 00:24:07.640
UI thread. But I think
browsers are always looking at

444
00:24:07.640 --> 00:24:11.360
ways to make it work,
but to improve performance of

445
00:24:11.360 --> 00:24:13.040
the UI thread and find
new ways where they can

446
00:24:13.160 --> 00:24:17.390
in a backwards compatible way,
improve performance, but, but in

447
00:24:17.390 --> 00:24:20.570
those areas, and also in
simplifying how assets and things

448
00:24:20.570 --> 00:24:22.700
get loaded in the browser,
being able to have more

449
00:24:22.700 --> 00:24:25.850
control over priority of loading
of things and, and also

450
00:24:25.850 --> 00:24:28.820
just educating people more on
things as they come about

451
00:24:28.820 --> 00:24:31.130
in the browser. I think
there's, there's still a lot

452
00:24:31.130 --> 00:24:33.860
of work to be done
to, to simplify that and,

453
00:24:33.880 --> 00:24:37.610
and make it more accessible
to developers. So you said

454
00:24:37.630 --> 00:24:40.360
That it's running angular on
the server side, it's using

455
00:24:40.360 --> 00:24:44.680
node to do it. I
know that asp.net core and

456
00:24:44.680 --> 00:24:48.700
Steve Sanderson have integrated angular
into asp.net. So you can

457
00:24:48.700 --> 00:24:51.610
have server side rendering. Does
that imply they could do

458
00:24:51.610 --> 00:24:54.670
it in any language theoretically?
Yeah, so I, I, as

459
00:24:54.670 --> 00:24:58.150
far as I know, Steve's
implementation was proxying over to

460
00:24:58.150 --> 00:25:01.150
a node process that would
serve it and render it,

461
00:25:01.150 --> 00:25:05.590
which is a really good
approach. And that's, that's basically

462
00:25:05.590 --> 00:25:08.290
what, what I recommend to
people who need to support

463
00:25:08.290 --> 00:25:10.780
other languages. A lot of
I've talked with people who've

464
00:25:10.780 --> 00:25:14.020
just rolled it out because
it runs a node, but

465
00:25:14.020 --> 00:25:17.170
I've said, you know, there
are, there are JavaScript implementations

466
00:25:17.170 --> 00:25:19.120
in other languages. You could
try to port it to

467
00:25:19.480 --> 00:25:23.020
NAS horn on Java, for
example. But even if you

468
00:25:23.020 --> 00:25:25.120
can't serve it on the
front end, it's usually possible

469
00:25:25.120 --> 00:25:27.370
that you could have a
node process running that you

470
00:25:27.370 --> 00:25:30.220
could just communicate with, you
know, proxy request to it,

471
00:25:30.220 --> 00:25:33.070
get the render document back
and do something with it.

472
00:25:33.590 --> 00:25:36.730
So, yeah, and there have
been integrations with different, different

473
00:25:36.850 --> 00:25:42.340
libraries and frameworks using that
approach. And also just there

474
00:25:42.340 --> 00:25:44.380
have been some that, that
don't even use the node

475
00:25:44.380 --> 00:25:47.890
process and just tie into
angulars on a compiler and,

476
00:25:48.490 --> 00:25:52.030
and a renderer to take
templates of different languages. Like

477
00:25:52.030 --> 00:25:55.480
some, somebody had it with
Drupal twig templates where you

478
00:25:55.480 --> 00:25:57.310
could, I forget which way
it went, but they had

479
00:25:57.310 --> 00:26:00.370
an integration where you could
write angular components and they

480
00:26:00.370 --> 00:26:04.030
would essentially be output as
Drupal twig templates that Drupal

481
00:26:04.030 --> 00:26:08.680
could render natively without anything
having to intercede. There were

482
00:26:08.690 --> 00:26:10.750
some constraints to make that
kind of thing work, but,

483
00:26:11.000 --> 00:26:13.000
but there's a lot of
possibilities just with the way

484
00:26:13.030 --> 00:26:16.350
angular is abstracted, because it
needs to support pre rendering

485
00:26:16.350 --> 00:26:19.450
and web workers. We have
this nice abstraction between the

486
00:26:19.450 --> 00:26:22.120
application logic and the rendering
logic, where you can basically

487
00:26:22.120 --> 00:26:26.650
swap out the renderer for
anything. It allows a lot

488
00:26:26.650 --> 00:26:28.690
of cool things like native
script as well, where you

489
00:26:28.690 --> 00:26:32.950
can render the app natively,
but run your application, JavaScript

490
00:26:32.950 --> 00:26:36.970
code on, in a native
application. Well, that's a good

491
00:26:37.900 --> 00:26:40.600
Actually not native script, but
thinking about alternative scripts and

492
00:26:40.600 --> 00:26:44.370
that that's actually a good
entree into a TypeScript. So

493
00:26:44.370 --> 00:26:48.540
when I write angular two
or angular, now TypeScript is

494
00:26:48.540 --> 00:26:53.930
just assumed. Correct. It's it's
the default The choice, but

495
00:26:53.930 --> 00:26:56.810
it's not the only choice.
Okay. So it's a default

496
00:26:56.810 --> 00:27:00.560
choice and that's, that's not
that's okay. Right? Like it's

497
00:27:00.560 --> 00:27:03.200
the default choice because you
all like it and you

498
00:27:03.200 --> 00:27:05.360
think it's a good thing
and maybe people should start

499
00:27:05.360 --> 00:27:07.280
using it, but you're not,
you're not requiring it in

500
00:27:07.280 --> 00:27:10.100
any way. Yeah. So you'll
have the best time if

501
00:27:10.100 --> 00:27:13.340
you use TypeScript Pretty much
have the best time. I

502
00:27:13.340 --> 00:27:16.760
like that. Yeah. So all
on the angular.io, the main

503
00:27:16.760 --> 00:27:20.870
site for angular, it almost
all the examples. The default

504
00:27:20.870 --> 00:27:23.840
is TypeScript like the code
samples and the guides and

505
00:27:23.840 --> 00:27:26.840
stuff. But we, I think
we have tabs for <inaudible>

506
00:27:26.930 --> 00:27:31.250
and somebody was working on
S 2015 or six tabs.

507
00:27:31.860 --> 00:27:33.890
I'm not sure if that's
in there right now, but

508
00:27:34.070 --> 00:27:36.260
so we have it where
you can see the different

509
00:27:36.260 --> 00:27:39.320
ones, but once you get
beyond our official docs and

510
00:27:39.320 --> 00:27:42.050
you look more blog articles
and things in the community,

511
00:27:42.050 --> 00:27:45.590
everyone else is just doing
everything in TypeScript. And when

512
00:27:45.590 --> 00:27:47.630
I do things, I just
do it in TypeScript because

513
00:27:47.660 --> 00:27:49.820
it's a little bit more
work for me to, to

514
00:27:49.960 --> 00:27:52.670
support yes. Five. And we've
seen most of the community

515
00:27:52.970 --> 00:27:55.970
happily jump onto TypeScript. So,
so it's kind of just

516
00:27:55.970 --> 00:27:59.150
become the de facto thing.
Even, even though we have

517
00:27:59.210 --> 00:28:01.910
on the official doc, some
other ways, you're going to

518
00:28:01.910 --> 00:28:05.600
see most content around TypeScript,
so better just to embrace

519
00:28:05.600 --> 00:28:08.540
it and love it. Like
we all do, and you'll

520
00:28:08.540 --> 00:28:10.970
be happier for it. Has
it, has it changed your

521
00:28:10.970 --> 00:28:14.030
relationship to JavaScript? Did you
ever like writing TypeScript and

522
00:28:14.030 --> 00:28:16.760
then you find yourself off
and a regular text editor

523
00:28:16.760 --> 00:28:19.820
just doing JavaScript and you're
like, Oh shoot. I'm not

524
00:28:19.820 --> 00:28:24.110
in, yeah, it's a, It
is harder. Like I find

525
00:28:24.110 --> 00:28:27.170
myself making more mistakes if
I have to write without

526
00:28:27.170 --> 00:28:29.600
it, like I use vs
code as my editor. And

527
00:28:29.600 --> 00:28:31.760
it's actually pretty good. Even
when I'm writing Java script

528
00:28:31.760 --> 00:28:34.400
now of, you know, taking
type information that knows about

529
00:28:34.400 --> 00:28:37.460
libraries because they have TypeScript
definitions for that library. So

530
00:28:37.460 --> 00:28:40.040
even if I'm writing a
plain JavaScript, it can also

531
00:28:40.040 --> 00:28:42.560
help me in for types
and use the API properly.

532
00:28:42.560 --> 00:28:44.990
So even when not using
types of your festival get

533
00:28:44.990 --> 00:28:47.270
benefits from TypeScript. But if
I'm, if I don't have

534
00:28:47.300 --> 00:28:49.400
any help at all, then
I find myself just kind

535
00:28:49.400 --> 00:28:51.770
of not knowing what to
do. I've got really spoiled.

536
00:28:52.170 --> 00:28:55.070
Are you a believer that,
that IntelliSense rots your brain

537
00:28:55.160 --> 00:29:01.130
and makes you stupid? No.
Yes. No. Like, yes, but

538
00:29:01.130 --> 00:29:03.860
it's okay. Like, you know,
it's like caffeine, right? It's

539
00:29:03.860 --> 00:29:05.540
a drug, but it's okay.
And we all use it.

540
00:29:05.930 --> 00:29:09.620
Yeah. I mean, I worked
with.net developers in the past

541
00:29:09.620 --> 00:29:11.900
who, you know, they, they
seem sharp even after using

542
00:29:11.900 --> 00:29:16.250
IntelliSense. So I wasn't too
biased against it. Yeah. Thank

543
00:29:16.250 --> 00:29:20.000
you. I respect that. That's
cool. One question. When I

544
00:29:20.000 --> 00:29:24.320
go and Google for angular,
I find angular js.org, and

545
00:29:24.320 --> 00:29:29.270
then I find angular.io. Are
they both? The angular team

546
00:29:29.270 --> 00:29:32.780
is one, 1.01. I don't
understand why there's two and

547
00:29:32.780 --> 00:29:34.910
I don't know which one
to start at. Yeah. Yeah.

548
00:29:34.910 --> 00:29:38.180
It's, it's tricky because when
we started with angular two,

549
00:29:38.570 --> 00:29:41.560
as most of the community
knows we did a full

550
00:29:41.560 --> 00:29:44.260
rewrite of the framework. We
decided to still call it

551
00:29:44.260 --> 00:29:46.870
angular because we were carrying
over the same philosophies, a

552
00:29:46.870 --> 00:29:50.050
lot of the same semantics
of how the framework works.

553
00:29:51.490 --> 00:29:53.650
And so we, instead of
calling it angular JS, we

554
00:29:53.650 --> 00:29:56.500
called it angular. And since
so many people were already

555
00:29:56.500 --> 00:30:00.180
on angular one, you know,
over a million developers, I'm

556
00:30:00.620 --> 00:30:02.620
not sure what the number
is now, but it was

557
00:30:02.740 --> 00:30:05.140
quite a substantial number of
people relying on anchor one.

558
00:30:05.500 --> 00:30:09.120
We wanted to keep it
as its own ecosystem and

559
00:30:09.120 --> 00:30:11.920
let it keep growing. Let
it keep evolving. There's a

560
00:30:11.920 --> 00:30:14.050
team of people behind it
led by Pete Baker and

561
00:30:14.050 --> 00:30:17.920
Darwin. And so we said,
okay, we'll keep this as

562
00:30:17.920 --> 00:30:20.080
annual js.org. We're not going
to try to fit the

563
00:30:20.080 --> 00:30:22.510
new thing we're doing into
what's already there so that

564
00:30:22.690 --> 00:30:25.990
we don't slow it down
and complicate things. You know,

565
00:30:26.680 --> 00:30:30.610
that's debatable whether or not
we complicated things. And so

566
00:30:30.610 --> 00:30:34.330
we decided to create angular.io
as the, the new site

567
00:30:34.570 --> 00:30:37.030
and, and to call it
angular and call the old

568
00:30:37.030 --> 00:30:41.350
thing JS. So angular.io is
the official thing. It's the

569
00:30:41.350 --> 00:30:44.560
thing we're pushing now. It's
only angular angular two point

570
00:30:44.560 --> 00:30:48.880
X plus anger js.org is,
is going to remain is

571
00:30:48.880 --> 00:30:52.720
going to be just focused
on one TEDx. I know

572
00:30:52.720 --> 00:30:54.850
it's confusing and there's probably
some work that could be

573
00:30:54.850 --> 00:30:57.340
done to, to distinguish it
a little bit better. Maybe

574
00:30:57.340 --> 00:30:59.950
some cross-linking on the homepage
of the site or something,

575
00:30:59.950 --> 00:31:02.320
but I don't know, just
a big giant like yeah.

576
00:31:02.380 --> 00:31:04.930
Banner in the corner would
be fine. Is this where

577
00:31:04.930 --> 00:31:07.830
you meant to be? Exactly.
Looks like maybe Clippy could

578
00:31:07.830 --> 00:31:10.650
come out. So, okay. So
if I go to angular

579
00:31:10.650 --> 00:31:14.550
to Ohio though, I've also
got angular material, which gets

580
00:31:14.550 --> 00:31:17.160
you 22 components. And this
is where I think that

581
00:31:17.160 --> 00:31:21.360
productivity really starts happening. Like
it's like bootstrap for angular

582
00:31:21.360 --> 00:31:23.970
and it's, it's gorgeous. And
it's like, it's impossible to

583
00:31:23.970 --> 00:31:27.150
make an ugly app. It's
hard. At least it's hard

584
00:31:27.150 --> 00:31:29.580
to make an ugly app
if you're using the material

585
00:31:29.580 --> 00:31:33.690
components and the style sheets.
Yeah. They, and they do

586
00:31:33.690 --> 00:31:36.420
a really good job. They
they've got a team at,

587
00:31:36.430 --> 00:31:39.780
on the Google team who
just focuses on material. They

588
00:31:39.800 --> 00:31:42.420
they're involved with the framework
as well. Like they, they

589
00:31:42.450 --> 00:31:44.790
contribute different things like Kara
on the material team has

590
00:31:44.790 --> 00:31:47.190
done a lot with forms
and other parts of the

591
00:31:47.190 --> 00:31:50.430
core framework, but they, they
focus a lot on really

592
00:31:50.430 --> 00:31:53.760
high quality code. They do
a lot of pairing and

593
00:31:53.820 --> 00:31:56.460
discussing of how things are
implemented. So people look at

594
00:31:56.460 --> 00:31:58.860
these components and they may
think it's just CSS and

595
00:31:59.340 --> 00:32:01.290
whatever this is. Why is
it taking so long to

596
00:32:01.290 --> 00:32:04.050
make these components? But they
put a lot of thought

597
00:32:04.050 --> 00:32:06.510
and making sure it's true
to the spec, making it

598
00:32:06.510 --> 00:32:09.930
usable, making it flexible enough
for people to do things

599
00:32:09.930 --> 00:32:13.140
with it, how they will.
And yeah, it's really impressive.

600
00:32:13.560 --> 00:32:16.050
What they've been able to
do both on the angular

601
00:32:16.050 --> 00:32:18.210
material one and angular material
too, which a lot of

602
00:32:18.210 --> 00:32:21.900
them contributed on both. Very
cool. Well, thanks for chatting

603
00:32:21.900 --> 00:32:24.090
with me today. Yeah. Thanks
for having me. This is

604
00:32:24.090 --> 00:32:29.220
fun. So folks can check
Jeff out at twitter.com/ Jeff B. Cross

605
00:32:29.250 --> 00:32:33.750
and nor wall is in
our w L a and

606
00:32:33.750 --> 00:32:37.920
that's underscore IO or.io depending.
And a angular of course,

607
00:32:37.920 --> 00:32:40.640
is@angular.io. And you can go
and check out the angular

608
00:32:40.640 --> 00:32:43.610
CLI and then if you're
a.net developer, we just added.net

609
00:32:43.640 --> 00:32:45.800
new angular. So you can
get in on the phone

610
00:32:45.810 --> 00:32:49.880
as well. This has been
another episode of Hanselminutes and

611
00:32:49.880 --> 00:32:58.060
we'll see you again next
week. <inaudible>.

