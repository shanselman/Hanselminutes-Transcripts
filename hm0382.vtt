WEBVTT FILE

1
00:00:12.800 --> 00:00:17.720
Hanselminutes.com. It's Hansel minutes, all
weekly discussion with web developer

2
00:00:17.720 --> 00:00:22.250
and technologist Scott Hanselman. This
is Lawrence Ryan announcing show number

3
00:00:22.250 --> 00:00:29.130
three 82. Recorded live Thursday,
July 25th, 2013. Support for Hanselman it's

4
00:00:29.180 --> 00:00:32.870
provided by Tellerik offering the
best in developer tools and

5
00:00:32.870 --> 00:00:42.440
support online@telerikdotcomandbyfranklins.net makers of gesture
pack a powerful gesture, recording

6
00:00:42.440 --> 00:00:47.180
and recognition system for Microsoft
connect for windows developers details.

7
00:00:47.180 --> 00:00:51.680
Add gesture, PA k.com in
this episode has got talks

8
00:00:51.680 --> 00:00:55.100
with Chris Walker about how
secret labs created the agent

9
00:00:55.160 --> 00:01:00.590
Smartwatch. Hi, this is Scott
Hanselman. This is another episode

10
00:01:00.590 --> 00:01:02.720
of Hansel minutes. You can
hear our ambient noise here.

11
00:01:02.720 --> 00:01:05.780
We're in a hotel in
Chicago. I've got Chris Walker

12
00:01:05.780 --> 00:01:08.450
from secret labs. How's it
going? Yeah. Good, good morning,

13
00:01:08.450 --> 00:01:10.820
Scott. We're going to go
and give a presentation in

14
00:01:10.820 --> 00:01:14.810
a little bit on well,
being able to do.net on,

15
00:01:14.820 --> 00:01:17.450
on your wrist. This is
amazing. You guys just came

16
00:01:17.450 --> 00:01:21.170
off of an incredibly successful
Kickstarter. You raised a million

17
00:01:21.170 --> 00:01:24.170
dollars. Yeah, it was pretty
amazing. We're pretty excited. Did

18
00:01:24.170 --> 00:01:26.450
you think you were going
to raise that much? We

19
00:01:26.450 --> 00:01:28.610
had this vision for what
a smartwatch could be and

20
00:01:28.610 --> 00:01:31.400
should be a part of
that based on what dotnet

21
00:01:31.400 --> 00:01:33.620
did 10 years ago with
the spot watches and part

22
00:01:33.620 --> 00:01:35.150
of that based on what
we believe they do in

23
00:01:35.150 --> 00:01:38.180
the future. And we were
just really excited that so

24
00:01:38.180 --> 00:01:41.180
many people shared that vision
and got excited about it.

25
00:01:41.660 --> 00:01:44.240
And did you think it
was gonna hit a million?

26
00:01:44.240 --> 00:01:46.070
Like I know that you
had like an emotional connection

27
00:01:46.070 --> 00:01:49.790
to the million. You were
texting me at like 950,000.

28
00:01:50.600 --> 00:01:53.000
Yeah. So I think it's
for our community more than

29
00:01:53.000 --> 00:01:54.470
us, you know, for us,
we were happy to hit

30
00:01:54.470 --> 00:01:56.150
the a hundred thousand dollars
goal because that meant we

31
00:01:56.150 --> 00:01:58.730
could put this into production
and see this baby come

32
00:01:58.730 --> 00:02:01.880
to come to life. But
yeah, for our backers, there's,

33
00:02:01.910 --> 00:02:04.400
there's an emotional connection with
having back to project that

34
00:02:04.400 --> 00:02:06.890
it's a billion dollars. There's
only 36 in the history

35
00:02:06.890 --> 00:02:09.200
of Kickstarter we were in.
So yeah, being able to

36
00:02:09.200 --> 00:02:11.540
be involved with a project
that hits that number is

37
00:02:11.870 --> 00:02:13.490
it really means a lot
to the people who backed

38
00:02:13.490 --> 00:02:16.310
the project or for us.
It's great because it's enabled

39
00:02:16.310 --> 00:02:19.010
us to get a lot
of phone calls from retailers

40
00:02:19.010 --> 00:02:21.470
and partners and everyone else
who want to be involved

41
00:02:21.470 --> 00:02:24.320
with dotnet on the wrist.
Now Kickstarter goes out of

42
00:02:24.320 --> 00:02:25.820
their way to make sure
that people understand that they're

43
00:02:25.820 --> 00:02:28.910
not a store and they're
really pushing this idea. And

44
00:02:28.910 --> 00:02:31.280
I've, I've backed a lot
of Kickstarters and I've got,

45
00:02:31.310 --> 00:02:35.510
I had some successful, some
not, you know, there's been

46
00:02:35.510 --> 00:02:37.760
trouble with some Kickstarters where
people aren't feeling that they

47
00:02:37.760 --> 00:02:40.130
get, they get charged and
then a year later their,

48
00:02:40.220 --> 00:02:42.770
their product shows up right.
Or two or three. Right.

49
00:02:44.540 --> 00:02:48.320
Do also you hear in
the comments on Kickstarter, people

50
00:02:48.320 --> 00:02:50.690
saying like, well, you're getting
a whole pile of money.

51
00:02:51.260 --> 00:02:54.050
Isn't it true? That Kickstarter,
isn't a big profit thing

52
00:02:54.050 --> 00:02:56.630
for you. Like you're not
necessarily going to clear a

53
00:02:56.630 --> 00:03:00.490
million bucks. Oh no. It's
a proof of concept. Right?

54
00:03:00.490 --> 00:03:03.010
It proves that people want
the watch. It's not like

55
00:03:03.010 --> 00:03:04.960
you're going to clear 900
grand and then go and

56
00:03:04.960 --> 00:03:06.610
bang out a couple of
watches for a hundred grand.

57
00:03:06.780 --> 00:03:09.390
Yeah. So the, the, the
reality of the situation is

58
00:03:09.390 --> 00:03:11.880
that there was a lot
of investment that went into

59
00:03:12.070 --> 00:03:14.730
building something like the ancient
smartwatch before we even started,

60
00:03:14.760 --> 00:03:16.560
you know, for us, the
a hundred thousand dollars, a

61
00:03:16.570 --> 00:03:19.470
Kickstarter funds that we were
asking for, helped us be

62
00:03:19.470 --> 00:03:21.330
able to do the FCC
certifications and a couple of

63
00:03:21.330 --> 00:03:23.970
things, but even in a
million dollars, you know, after

64
00:03:23.970 --> 00:03:26.220
we build all the watches
and we put all the

65
00:03:26.220 --> 00:03:28.410
extras that we've decided to
put into the watches to

66
00:03:28.410 --> 00:03:31.770
make them better for everyone,
the profit comes from preorders.

67
00:03:31.770 --> 00:03:34.830
It comes from the orders
afterwards. Now we're excited to

68
00:03:34.830 --> 00:03:36.750
be able to make it.
And that's what Kickstarter enabled.

69
00:03:36.780 --> 00:03:39.600
But if you look, you
know, a lot of projects

70
00:03:39.600 --> 00:03:43.110
are trying to sell prototypes
is finished goods, and those

71
00:03:43.110 --> 00:03:45.360
are all moving to Indiegogo
now because Kickstarter is so

72
00:03:45.360 --> 00:03:49.200
big on making sure that
people realize that you're putting

73
00:03:49.200 --> 00:03:52.740
money into making something happen.
You're not buying something that

74
00:03:52.740 --> 00:03:54.600
a lot of projects that
would have been on Kickstarter

75
00:03:54.600 --> 00:03:57.270
in the past in the
hardware category are simply not

76
00:03:57.270 --> 00:04:00.570
qualified to be there anymore.
Mm Hmm. So you guys

77
00:04:00.930 --> 00:04:03.720
had experience in this space
from net Duino. Oh yeah.

78
00:04:03.790 --> 00:04:05.610
I was a fan Pete.
Brown's a fan. We've been

79
00:04:05.610 --> 00:04:08.130
talking about net Duino for
forever. You know, I've supported

80
00:04:08.130 --> 00:04:11.280
you guys from the beginning.
What made you decide to

81
00:04:11.280 --> 00:04:13.740
switch to the watch? Like,
were you just sitting around

82
00:04:13.740 --> 00:04:15.480
and you said it was
time, You know, we've been

83
00:04:15.480 --> 00:04:17.640
wanting to do well, personally,
I'm a big fan of

84
00:04:17.640 --> 00:04:20.790
high tech watches. I had,
you know, the Casio database

85
00:04:20.880 --> 00:04:23.250
and the Timex saddling watches
and like the eighties and

86
00:04:23.250 --> 00:04:26.220
the nineties, I've just, I've
always loved. High-tech watches the

87
00:04:26.220 --> 00:04:29.520
fashion ones, the tech ones.
We want to do this,

88
00:04:29.520 --> 00:04:31.620
but it's just so expensive
to get something like this

89
00:04:31.620 --> 00:04:33.960
off the ground. And about
two years ago, I was

90
00:04:33.960 --> 00:04:37.140
talking to Mark Lovink from
make magazine. He ran maker

91
00:04:37.150 --> 00:04:38.910
shot back at the time,
it was heavily involved their

92
00:04:38.910 --> 00:04:42.210
product curator. And we were
talking and he wanted to

93
00:04:42.210 --> 00:04:43.560
make a watch and I
wanted to make a watch.

94
00:04:43.560 --> 00:04:45.720
And we said, well, let's,
let's do this thing. And

95
00:04:45.720 --> 00:04:48.060
we started doing that together.
And then since that makes,

96
00:04:48.060 --> 00:04:51.000
got spun off as a
separate company and everything else,

97
00:04:51.000 --> 00:04:53.490
and we decided we still
wanted to do it. So

98
00:04:53.550 --> 00:04:56.190
we just made it happen,
but we couldn't completely make

99
00:04:56.190 --> 00:04:58.860
it happen without our Kickstarter
backers. Right. We could, we

100
00:04:58.860 --> 00:05:00.480
could do the proof of
concept. We could build the

101
00:05:00.480 --> 00:05:03.120
prototypes, we could make the
platform work, but it costs

102
00:05:03.120 --> 00:05:04.650
a lot of money to
bring something like this to

103
00:05:04.650 --> 00:05:08.670
market. Talk, talk a little
bit about net Duino and

104
00:05:08.670 --> 00:05:10.320
then let's kind of work
our way up to the

105
00:05:10.400 --> 00:05:12.480
guts of the watch, because
like I'm looking at the

106
00:05:12.480 --> 00:05:15.930
net, Duino two plus here,
you know, and it's, it's

107
00:05:15.930 --> 00:05:18.960
the size of the, the,
the, my Palm. It's a

108
00:05:18.960 --> 00:05:20.670
little bigger than a credit
card, right. There you go.

109
00:05:20.820 --> 00:05:22.740
I've got a deck of
cards, almost a little smaller,

110
00:05:22.980 --> 00:05:26.490
but it's got a, it's
got a micro USB and

111
00:05:26.490 --> 00:05:29.660
it's got a ether net.
It's got the GPIO ports.

112
00:05:29.660 --> 00:05:31.850
You know, it's just, it's
tiny. It's a miracle of

113
00:05:31.890 --> 00:05:34.200
science. It's even got a
little mini. Is this a

114
00:05:34.200 --> 00:05:38.700
micro SD card, micro SD
card? What the capabilities of

115
00:05:38.730 --> 00:05:42.030
this device? So What net
wino is designed to do

116
00:05:42.030 --> 00:05:45.000
is this designed to make
it so the software developers

117
00:05:45.000 --> 00:05:47.280
can not only make apps
for the web and apps

118
00:05:47.280 --> 00:05:49.440
for their phone, but they
can also make apps for

119
00:05:49.440 --> 00:05:53.010
electronics. They can actually build
their own custom electronics. You

120
00:05:53.010 --> 00:05:55.830
know, when I was young,
being into software was a

121
00:05:55.830 --> 00:05:57.920
unique thing. There weren't a
lot of software engineers out

122
00:05:57.920 --> 00:06:00.620
there. And so it wasn't
a very crowded market, but

123
00:06:00.620 --> 00:06:02.570
now it's like anyone can
make an app for a

124
00:06:02.570 --> 00:06:05.150
phone, which is a fantastic
thing, but it also means

125
00:06:05.150 --> 00:06:08.210
that there are very few
new, exciting places. You can

126
00:06:08.210 --> 00:06:10.550
go with skills unless you're
inventing a new category of

127
00:06:10.550 --> 00:06:13.760
something. Well, we made the
transition to electronics and we

128
00:06:13.760 --> 00:06:17.270
wanted to allow other help
enable other dotnet developers to

129
00:06:17.270 --> 00:06:20.270
do the same thing. So
with an Edwina, you can

130
00:06:20.270 --> 00:06:22.790
build a irrigation system for
your home, or you could

131
00:06:22.790 --> 00:06:27.380
build a radiation detecting system
that sits out on the

132
00:06:27.380 --> 00:06:31.220
sea and relays data back
via satellites. You can build

133
00:06:31.460 --> 00:06:34.880
a Halloween costumes, you can
build just kinda anything that

134
00:06:34.880 --> 00:06:38.090
has motors and LEDs and
switches and relays and all

135
00:06:38.090 --> 00:06:40.250
these kinds of things using
dotnet. And this is an

136
00:06:40.250 --> 00:06:42.950
arm processor. It is it's,
it's actually the new cortex

137
00:06:42.950 --> 00:06:45.170
M for AF. So it's
kind of the latest and

138
00:06:45.170 --> 00:06:49.930
greatest and the embedded tiny
microcontroller world. Hmm. And what

139
00:06:49.930 --> 00:06:52.540
is the powers of this
arm processor versus the ones

140
00:06:52.540 --> 00:06:54.490
that we hear about in
things like a surface or

141
00:06:54.490 --> 00:06:57.730
a phone or things like
that Kind of core arm

142
00:06:57.730 --> 00:07:01.750
technology, but this process is
168 megahertz versus like the

143
00:07:01.750 --> 00:07:03.340
one in your surface, which
is going to be, let's

144
00:07:03.340 --> 00:07:06.550
say over a thousand megahertz.
The big difference really though,

145
00:07:06.550 --> 00:07:09.040
is those are microprocessors. And
the one on the net

146
00:07:09.040 --> 00:07:13.000
winos a microcontroller. Now fundamentally,
what that basically means is

147
00:07:13.000 --> 00:07:16.000
that entire kind of computer
on a chip, the flash

148
00:07:16.000 --> 00:07:19.570
storage, that memory, all of
that sitting inside the microcontroller.

149
00:07:19.840 --> 00:07:22.450
And then it also has
the capability to do things

150
00:07:22.450 --> 00:07:28.060
like raise and lower voltage
to encode a digital wave,

151
00:07:28.060 --> 00:07:30.390
to be able to move
motors, things like this, to

152
00:07:30.400 --> 00:07:33.730
read voltages, to measure things.
These are not things you

153
00:07:33.730 --> 00:07:36.520
find in like the processor
on your surface, but you

154
00:07:36.520 --> 00:07:40.050
do find in the microcontroller
that's on an Angeleno, The,

155
00:07:40.050 --> 00:07:42.940
the, the net Duino and
embedded systems like this are

156
00:07:42.940 --> 00:07:45.610
kind of a controller in
a model view controller world.

157
00:07:45.640 --> 00:07:49.390
It, it, it is not
about raw processor power, as

158
00:07:49.390 --> 00:07:51.640
it is about interacting with
the world. Yes. About command

159
00:07:51.640 --> 00:07:53.650
and control. You know, you
do have a lot of

160
00:07:53.650 --> 00:07:57.220
rich capabilities without net on
this microcontroller to be able

161
00:07:57.220 --> 00:07:59.650
to write code the way
you'd normally would. You're not

162
00:07:59.650 --> 00:08:02.590
having to worry, you know,
traditional C programmers who build

163
00:08:02.590 --> 00:08:05.230
things, even people who build
things on like Arduinos and

164
00:08:06.370 --> 00:08:09.760
RA AVR, microcontrollers, that they're
stuck in this world of

165
00:08:09.760 --> 00:08:12.190
a loop, you set up
kind of everything. And then

166
00:08:12.190 --> 00:08:14.320
you have a loop where
you keep on checking conditions

167
00:08:14.320 --> 00:08:16.030
and you have a state
machine, right. You run for

168
00:08:16.050 --> 00:08:17.890
over and over and over
again. It's like video game

169
00:08:17.890 --> 00:08:22.150
programming. It's like, well true.
Right? The little guy checked

170
00:08:22.150 --> 00:08:24.730
for input and then do
it again. So well, but

171
00:08:24.730 --> 00:08:27.130
in the world of.net, you
can say, create a thread

172
00:08:27.190 --> 00:08:29.500
and have it, do this.
You know, I want to

173
00:08:29.500 --> 00:08:32.290
have a auto-reset event when
it gets triggered. Go ahead

174
00:08:32.290 --> 00:08:34.360
and let this code rot.
I want to have new

175
00:08:34.360 --> 00:08:37.210
Texas and I want to
have semaphores and all these

176
00:08:37.210 --> 00:08:41.650
things that you've got yeah.
in.net. So many of them,

177
00:08:41.650 --> 00:08:43.960
now you can program with
that same style on a

178
00:08:43.960 --> 00:08:46.630
microcontroller, you can even share
your code. So I can

179
00:08:46.630 --> 00:08:48.670
have event, like, there's a
button here. I can have

180
00:08:48.670 --> 00:08:51.100
a button click event. Yep.
Yeah. Button was pressed. You

181
00:08:51.100 --> 00:08:54.460
get an event in your
code. If a light sensor

182
00:08:54.460 --> 00:08:56.310
gets above a certain level,
you can have a class

183
00:08:56.310 --> 00:08:59.280
that's continuously checking that level.
And it raises an event.

184
00:08:59.820 --> 00:09:01.740
If you had a GPS
receiver hooked up, these things

185
00:09:01.740 --> 00:09:03.750
have serial ports in them
to talk via NMEA. To

186
00:09:03.750 --> 00:09:06.840
those you can kind of
live in this event, driven

187
00:09:06.840 --> 00:09:09.960
world, just like you would
with a, a desktop or

188
00:09:09.960 --> 00:09:12.890
a phone application. But now
that layer of abstraction reminds

189
00:09:12.890 --> 00:09:14.900
me a little bit of
web forms. The way that

190
00:09:14.900 --> 00:09:19.340
web forms hid HTTP and
put events on top of

191
00:09:19.340 --> 00:09:21.740
a stateless world. And some
people thought that was amazing

192
00:09:21.740 --> 00:09:24.620
and it enabled it enabled
a whole new generation to

193
00:09:25.010 --> 00:09:28.910
program the web. But aren't
you making embedded systems development

194
00:09:28.910 --> 00:09:31.670
too easy? Like couldn't put
it hardcore. People would be

195
00:09:31.670 --> 00:09:33.560
like, this was, this is
not cool. This is web

196
00:09:33.560 --> 00:09:37.160
forms. There, there are some
people who had rather twiddle

197
00:09:37.160 --> 00:09:39.650
bits and registers at a
low level one, actually that

198
00:09:39.650 --> 00:09:41.270
brings up one of the
advantages of the dotnet micro

199
00:09:41.270 --> 00:09:44.360
framework. And then it's the
version of.net by Microsoft, which

200
00:09:44.360 --> 00:09:47.390
is open source. And so
we actively encourage people. If

201
00:09:47.390 --> 00:09:49.370
they want to work at
that low level, they can

202
00:09:49.370 --> 00:09:52.130
actually modify the source of.net
micro framework. And they can

203
00:09:52.130 --> 00:09:55.640
create their own capabilities. They
can twiddle the registers and

204
00:09:55.640 --> 00:09:57.620
their own code, You know,
cause you know how we

205
00:09:57.620 --> 00:10:00.300
always say know, you can
always use, you know, you

206
00:10:00.300 --> 00:10:02.390
can always just fork that
are there companies that are

207
00:10:02.390 --> 00:10:04.490
making their own forks? Yeah.
Yeah. There are companies. In

208
00:10:04.490 --> 00:10:07.820
fact, it's interesting because with
net, we know we ended

209
00:10:07.820 --> 00:10:09.950
up in a world where
we don't know what most

210
00:10:09.950 --> 00:10:11.630
people are doing with net.
We know, you know, we

211
00:10:11.630 --> 00:10:14.720
sell through Mausers. So we
got the big electronics distributors

212
00:10:14.720 --> 00:10:18.470
who sell through amazon.com and
radio shack. So we've got

213
00:10:18.470 --> 00:10:20.450
the places that feel, pick
these up on more of

214
00:10:20.450 --> 00:10:23.750
a hobby side. But you
know, when you're making 250

215
00:10:23.750 --> 00:10:26.210
as something as a company,
you just stick the net

216
00:10:26.210 --> 00:10:29.390
wino inside your box. When
you're making tens of thousands

217
00:10:29.390 --> 00:10:32.060
of something, you take our
open source design files, and

218
00:10:32.060 --> 00:10:34.670
you create your own circuit
boards and you derive from

219
00:10:34.670 --> 00:10:36.800
our firmware source and you
add your own features. And

220
00:10:37.190 --> 00:10:39.200
the funny thing to us
is we only find out

221
00:10:39.200 --> 00:10:40.970
about these things when they're
shipping in the field that

222
00:10:40.970 --> 00:10:42.980
we happened to open one
up or we're talking to

223
00:10:42.980 --> 00:10:45.080
someone who built a seriously
and they let us know

224
00:10:45.990 --> 00:10:48.980
Someone's doing this because you
like, you open up some

225
00:10:48.980 --> 00:10:51.320
fire extinguisher or whatever. Like,
Oh my goodness, you're not

226
00:10:51.320 --> 00:10:52.940
the Reno inside of this.
Yeah. Usually it's like an

227
00:10:52.940 --> 00:10:55.470
engineer who lets us know,
Oh yeah, we use net

228
00:10:55.470 --> 00:10:57.830
Trinos when we prototype this.
And we derive from that

229
00:10:57.830 --> 00:11:00.050
to build our product. So
I can see this as

230
00:11:00.050 --> 00:11:02.000
a prototype board when it's
time to go to market

231
00:11:02.000 --> 00:11:03.680
then, and then what did
they do? So if you're

232
00:11:03.680 --> 00:11:05.960
just making a couple hundred
or something, embedding a net

233
00:11:06.230 --> 00:11:09.050
inside your product and just
building an expansion board for

234
00:11:09.050 --> 00:11:12.200
it, with your sensors or
whatever you have, it makes

235
00:11:12.200 --> 00:11:14.000
a lot of sense. When
you're making thousands or tens

236
00:11:14.000 --> 00:11:16.130
of thousands, you can take
the design files for the

237
00:11:16.130 --> 00:11:18.740
net. We know, download them
off our website, pull them

238
00:11:18.740 --> 00:11:24.530
into your favorite pads, compliant,
design software into Allegro, and

239
00:11:24.530 --> 00:11:27.050
you make it into your
own board. You order the

240
00:11:27.050 --> 00:11:29.030
parts, you assemble them. You
do all those things that

241
00:11:29.030 --> 00:11:30.620
no one wants to do
unless they're building a ton

242
00:11:30.620 --> 00:11:32.650
of units. So I'm not
even going to try to

243
00:11:32.990 --> 00:11:37.070
parse out the last 15
acronyms that you've used, like

244
00:11:37.070 --> 00:11:39.650
Allegro and plaids compliant. But
what I'm hearing you say

245
00:11:39.650 --> 00:11:42.020
is that the hardware itself
is open source. That's right.

246
00:11:42.170 --> 00:11:44.510
And the software now we
know is a hundred percent

247
00:11:44.510 --> 00:11:46.910
open source. Everything that we
put into it, we give

248
00:11:46.910 --> 00:11:48.920
out the source code to,
and we licensed that under

249
00:11:48.920 --> 00:11:52.430
Apache and creative commons. I'm
a technical enough. I can

250
00:11:52.430 --> 00:11:55.540
take the board and say,
Oh yeah, I totally see

251
00:11:55.540 --> 00:11:58.380
what he's doing here. Could
even take our board design,

252
00:11:58.420 --> 00:12:00.360
send it to a manufacturer
in China, take off the

253
00:12:00.360 --> 00:12:02.550
net, Duane a logo and
say, make me a thousand

254
00:12:02.550 --> 00:12:05.430
of these for my X
project. And they would know

255
00:12:05.430 --> 00:12:07.620
what to order and how
to build it. Okay. So

256
00:12:07.620 --> 00:12:10.050
then the net wino, is
it called the mini? We

257
00:12:10.050 --> 00:12:12.930
do have a mini. Yeah.
So the mini and this

258
00:12:12.930 --> 00:12:14.790
is where I'm trying to
kind of work our way

259
00:12:14.790 --> 00:12:18.240
towards the watch. The net
Duino is about the size

260
00:12:18.240 --> 00:12:19.680
of a deck of deck
of cards. A little bit

261
00:12:19.680 --> 00:12:23.730
smaller than that. Do we
know many is gosh, the

262
00:12:23.730 --> 00:12:26.550
size of my path of
my pinky finger. That's really

263
00:12:26.550 --> 00:12:31.920
small 0.72 square inches. That's
small. Yeah. That is a

264
00:12:31.920 --> 00:12:37.110
whole net Duino right on
a tinier tinier pad. I

265
00:12:37.110 --> 00:12:39.570
don't know what the little
circuit board, the circuit board

266
00:12:39.570 --> 00:12:42.690
here. And that is the
guts of the watch. So

267
00:12:42.690 --> 00:12:45.420
that was the guts of
the prototype watch. And again,

268
00:12:45.420 --> 00:12:47.310
the net wino mini is
kind of a scaled down

269
00:12:47.310 --> 00:12:49.350
now, do we know it
doesn't have USB? It doesn't

270
00:12:49.350 --> 00:12:51.780
have a power plug. It's
obvious stuff that it can't

271
00:12:51.780 --> 00:12:53.880
have is too little. There's
no room for that. Yeah.

272
00:12:53.910 --> 00:12:56.700
So when we first prototype
the watches, we actually, this

273
00:12:56.700 --> 00:12:59.640
is an interesting story. We
actually designed what would be

274
00:12:59.640 --> 00:13:02.310
the production circuitry for the
watch. But when you go

275
00:13:02.310 --> 00:13:05.010
somewhere like Kickstarter and you're
sharing your vision with people,

276
00:13:05.070 --> 00:13:08.280
you really want to have
a, a product that you

277
00:13:08.280 --> 00:13:10.710
can show them as far
as the prototype. So we

278
00:13:10.710 --> 00:13:13.410
originally prototype the watching on
it. We know many and

279
00:13:13.410 --> 00:13:16.170
not on our custom circuitry,
but on the regular net,

280
00:13:16.170 --> 00:13:18.450
we know in net we
know applause. So we had

281
00:13:18.450 --> 00:13:20.640
wires hanging out of them
and everything else. So we

282
00:13:20.640 --> 00:13:22.770
actually took a step kind
of backwards where we built

283
00:13:22.770 --> 00:13:25.770
our prototypes because we had
already prototyped with wires. And

284
00:13:25.770 --> 00:13:28.650
then we had designed our
production circuitry, but to put

285
00:13:28.650 --> 00:13:30.750
something inside of a watch
form factor so that we

286
00:13:30.750 --> 00:13:33.120
could share it with people
and show them our vision.

287
00:13:33.330 --> 00:13:35.130
We took the net, we
know mini, which runs the

288
00:13:35.130 --> 00:13:38.630
same technology. It's a product
we created from our net,

289
00:13:38.640 --> 00:13:40.290
we know line. And we
put it inside of a

290
00:13:40.290 --> 00:13:42.060
watch case on a custom
circuit board with all the

291
00:13:42.060 --> 00:13:45.150
parts. Interesting. So the prototypes
you see are true prototypes,

292
00:13:45.180 --> 00:13:48.210
but they're also ones we
actually created that we normally

293
00:13:48.210 --> 00:13:50.250
wouldn't have created. Had we
just done the product in

294
00:13:50.250 --> 00:13:52.500
house. Cause our step we
didn't need to take, but

295
00:13:52.560 --> 00:13:54.930
it is a really easy
way to share with people

296
00:13:55.170 --> 00:13:57.630
how the technology works and
the code that's running on

297
00:13:57.630 --> 00:14:01.590
that prototype also runs on
the production watches because.net is

298
00:14:01.590 --> 00:14:04.980
effectively a virtual machine for
code Trying to visualize this.

299
00:14:05.750 --> 00:14:08.280
Maybe there's pictures, you could
show me some time. Is

300
00:14:08.280 --> 00:14:10.260
there a picture of a
breadboard with the net Duino

301
00:14:10.260 --> 00:14:12.000
on it and wires hanging
all over and you say,

302
00:14:12.000 --> 00:14:15.600
look, there's the prototype. Watch
it takes up a whole

303
00:14:15.600 --> 00:14:18.950
table, you know, and it's,
don't, don't touch it or

304
00:14:19.020 --> 00:14:21.330
won't work. Yeah. In fact,
it's not soldered together. So

305
00:14:21.330 --> 00:14:23.460
please don't pull any wires
out. Yeah. That's how we

306
00:14:23.460 --> 00:14:27.390
started. We actually built little
breakouts for the display that

307
00:14:27.390 --> 00:14:29.610
took all these little tiny
wires that are in this

308
00:14:29.610 --> 00:14:33.030
then cable on the display
and put them into pens

309
00:14:33.030 --> 00:14:35.760
that were spaced 0.1 inches
apart. We stuck that in

310
00:14:35.760 --> 00:14:37.620
a breadboard. We wired it
up to a next wino.

311
00:14:37.620 --> 00:14:40.890
Plus we plugged in sensors
and pull up resistors and

312
00:14:40.890 --> 00:14:43.200
all these things that if
you play with neutrinos, you

313
00:14:43.200 --> 00:14:45.600
come to know and love.
And that's how we prototype

314
00:14:45.600 --> 00:14:48.540
the watches in the first
place, all using.net Microframe or

315
00:14:48.550 --> 00:14:51.620
call using secret labs, nets,
we know products. So just

316
00:14:51.620 --> 00:14:54.740
like you Described, then the
next step would be to

317
00:14:54.740 --> 00:14:59.090
go in and design the
production internals of the watch.

318
00:14:59.120 --> 00:15:01.520
But instead you had a
halfway point where you could

319
00:15:01.520 --> 00:15:05.360
go in hand and investor
or an interested party, a

320
00:15:05.720 --> 00:15:09.550
smaller prototype. Yeah, Yeah. Using
the prototype. Yeah. Using the

321
00:15:09.550 --> 00:15:12.550
same technology that we built
our original prototypes on. But

322
00:15:12.550 --> 00:15:15.760
yeah, funny enough, we actually
built that prototype after we

323
00:15:15.760 --> 00:15:19.720
had already designed our production
circuits And I'm, I'm running

324
00:15:19.750 --> 00:15:24.100
actual C-sharp and an actual
tiny CLR Yep. On the

325
00:15:24.100 --> 00:15:25.870
board and your code is
living on the board. So

326
00:15:25.870 --> 00:15:27.610
it does not be plugged
into a computer for your

327
00:15:27.610 --> 00:15:30.280
code to run. It simply
runs in the chip On

328
00:15:30.280 --> 00:15:32.950
the board. And this is
the same micro framework that,

329
00:15:34.270 --> 00:15:37.900
that enabled the original kind
of smart personal objects technology.

330
00:15:39.280 --> 00:15:43.510
So windows eight is the
same windows end two, three,

331
00:15:43.510 --> 00:15:46.480
five, one the shipped in
1990. Gotcha. What was it?

332
00:15:46.870 --> 00:15:52.870
Four 95, Right? Where's the
heritage. Yeah. It, it shares

333
00:15:52.870 --> 00:15:54.970
the heritage. A lot of
the original code base is

334
00:15:54.970 --> 00:15:57.940
even sticking around. You'll you'll
see that when you use

335
00:15:57.940 --> 00:15:59.890
your drawing primitives to draw
on the screen of the

336
00:15:59.890 --> 00:16:03.070
watch, you're using classes that
say spot in them because

337
00:16:03.070 --> 00:16:05.110
we took the best of
what existed 10 years ago

338
00:16:05.110 --> 00:16:07.240
and the spot watches with
the best of what exists

339
00:16:07.240 --> 00:16:10.390
in dotnet microfiber today. But
it's 10 years newer and

340
00:16:10.390 --> 00:16:13.990
version 4.3, instead of version
zero point beta. It's a

341
00:16:13.990 --> 00:16:16.810
radically different world. No, it's
not. It's not, it's totally

342
00:16:16.810 --> 00:16:19.330
reliable is totally something I
can count on. Proven on

343
00:16:19.330 --> 00:16:21.670
millions of devices in the
field. And actually in the

344
00:16:21.670 --> 00:16:24.460
watch, we took reliability to
an a level. Cause we're

345
00:16:24.460 --> 00:16:27.970
doing things like a dual
recovery mode, boot loaders. We

346
00:16:27.970 --> 00:16:30.940
have watchdogs, we have two
microcontrollers, one of which can

347
00:16:30.940 --> 00:16:33.400
override the other. There's a
lot of technology And this

348
00:16:33.400 --> 00:16:35.350
matters why? Cause I don't
want to break my watch.

349
00:16:35.410 --> 00:16:37.660
Yeah. A watch should be
an amazing time piece that

350
00:16:37.660 --> 00:16:39.820
just always works. You don't
want to start thinking of

351
00:16:39.820 --> 00:16:43.540
watches the computer and because
it's completely wireless as wireless

352
00:16:43.540 --> 00:16:46.930
charging and it has wireless
for Bluetooth, for communications. You

353
00:16:46.930 --> 00:16:48.570
never want to get in
a state where you, you

354
00:16:48.610 --> 00:16:51.460
know, start flashing an update
to it, your phone dies.

355
00:16:51.730 --> 00:16:53.530
And all of a sudden
you've booked your watch. We

356
00:16:53.530 --> 00:16:56.260
wanted to make sure that
fundamentally you couldn't break your

357
00:16:56.260 --> 00:16:59.230
wall. That's scary. Even with
customers, isn't that scary as

358
00:16:59.230 --> 00:17:01.900
a designer, the idea that
you're creating something and at

359
00:17:01.900 --> 00:17:03.820
some point you have to
put it inside the case

360
00:17:03.910 --> 00:17:06.670
and then call it, call
it water resistant. And then

361
00:17:06.910 --> 00:17:08.440
Let me add one more
to that. And then you

362
00:17:08.440 --> 00:17:11.260
enable millions of software developers,
you know, shitty sharp to

363
00:17:11.260 --> 00:17:13.090
write apps for it. And
you have to make sure

364
00:17:13.090 --> 00:17:15.370
that you protect it in
a way so that they

365
00:17:15.370 --> 00:17:17.320
can play around and they
don't have to worry about

366
00:17:17.320 --> 00:17:20.110
damaging their or other people's
watches. You know, I hear

367
00:17:20.110 --> 00:17:21.340
a lot of people that
are like, Oh, I'm so

368
00:17:21.340 --> 00:17:22.960
glad there's an emulator for
the watch. So I don't

369
00:17:22.960 --> 00:17:25.030
have to worry about hurting
my watch and I, I

370
00:17:25.030 --> 00:17:26.560
just kind of smile. And
I'm like, I'm really glad

371
00:17:26.560 --> 00:17:28.360
there's an emulator. So you
can get started on code

372
00:17:28.360 --> 00:17:30.400
right away. But you don't
have to worry about breaking

373
00:17:30.400 --> 00:17:32.920
your watch. Some watches that
are out there that are

374
00:17:32.920 --> 00:17:36.760
smartwatches can be bricked. Well,
it's a whole different ball

375
00:17:36.760 --> 00:17:39.100
game. Yeah. In fact, I
was looking at a, a,

376
00:17:39.100 --> 00:17:41.590
a high tech watch the
other day. We'll, we'll call

377
00:17:41.590 --> 00:17:43.570
it a smart watch for
this conversation. And they had

378
00:17:43.570 --> 00:17:46.120
a disclaimer on there that
said, you know, download the

379
00:17:46.120 --> 00:17:49.090
source code, review it yourself,
compile it yourself before putting

380
00:17:49.380 --> 00:17:52.740
on this watch because it's
very possible to break this

381
00:17:52.740 --> 00:17:55.020
watch. In fact, some of
the smart watches have issued

382
00:17:55.020 --> 00:17:57.270
firmware updates that if you
turn your watch off to

383
00:17:57.270 --> 00:18:00.030
save power after updating the
firmware, you had to send

384
00:18:00.030 --> 00:18:02.610
it back to the factory
to get them to load

385
00:18:02.610 --> 00:18:05.970
the new, new firmware that
wouldn't do that anymore. These

386
00:18:05.970 --> 00:18:10.110
things are built with the
lowest cost materials, the lowest

387
00:18:10.110 --> 00:18:13.020
cost methodologies. When we bought
agent, we wanted to build

388
00:18:13.020 --> 00:18:15.690
something that was really premium,
well thought through and set

389
00:18:15.690 --> 00:18:18.470
a new stage for what
a smart watch. And certainly

390
00:18:18.470 --> 00:18:20.240
we're not trying to be,
you're not trying to, I'm

391
00:18:20.270 --> 00:18:21.740
hearing in your tone. You're
not trying to be mean

392
00:18:21.740 --> 00:18:25.600
or punitive. I love what
other people are doing. I

393
00:18:25.700 --> 00:18:27.890
just wish that we could
take things to a new

394
00:18:27.890 --> 00:18:30.440
level, But it does appear
that there's a fundamentally different

395
00:18:30.440 --> 00:18:34.130
philosophy in that you have
chosen to build on top

396
00:18:34.130 --> 00:18:36.380
of this framework that runs
at a different layer of

397
00:18:36.380 --> 00:18:39.260
abstraction. I mean, there are
a little garbage collectors and

398
00:18:39.260 --> 00:18:41.330
there is, you know, it's
a different way of thinking

399
00:18:41.330 --> 00:18:44.030
about running code on an
embedded device Inside of a

400
00:18:44.060 --> 00:18:48.200
protected virtual machine that makes
code safe. And I can

401
00:18:48.200 --> 00:18:51.680
use an express version of
visual studio, a free version

402
00:18:51.680 --> 00:18:53.630
of visual studio to write
code for my own watch.

403
00:18:53.690 --> 00:18:55.550
Yeah. The demos you'll see
me. Do I use visual

404
00:18:55.550 --> 00:19:00.080
studio 2012 express for windows,
desktop. Don't you think that

405
00:19:00.110 --> 00:19:03.110
it is that lack of
openness? That's why the original

406
00:19:03.110 --> 00:19:07.730
spot watch fail. I think
the original spot watch, which

407
00:19:07.730 --> 00:19:10.070
is still one of the
most advanced, smart watches ever

408
00:19:10.070 --> 00:19:13.580
made. I think I had
three things going against that.

409
00:19:13.580 --> 00:19:16.520
One was the $60 a
year service plan to be

410
00:19:16.520 --> 00:19:18.590
able to get data on
your watch. You know, as

411
00:19:18.590 --> 00:19:21.620
before we had the pervasive
internet connections always flowing through

412
00:19:21.620 --> 00:19:23.450
our, to our cell phones
and this connection to the

413
00:19:23.450 --> 00:19:26.510
cloud. So that, that really
hurt it. Cause people loved

414
00:19:26.510 --> 00:19:28.940
the watches, but they didn't
want another service plan for

415
00:19:29.030 --> 00:19:32.210
a watch or, you know,
three, cause they had members

416
00:19:32.210 --> 00:19:34.460
of their family with watches.
But the SDK, like you

417
00:19:34.460 --> 00:19:38.090
mentioned, there was no SDK.
You couldn't rash for the

418
00:19:38.090 --> 00:19:43.580
thing. There's no system, there's
no watch app store right.

419
00:19:43.670 --> 00:19:46.250
Or capability to write your
own apps. Yeah. Yeah. We

420
00:19:46.250 --> 00:19:47.930
would always, we'd always get
excited like, Oh the weather

421
00:19:47.930 --> 00:19:50.540
app is coming or the
news. Yeah. Just, just like

422
00:19:50.570 --> 00:19:52.640
give us an app. These
apps were delivered over the

423
00:19:52.640 --> 00:19:56.870
subcarrier FM radio signal. That's
like 2,490 600 baud shared

424
00:19:56.870 --> 00:19:59.660
amongst everyone in your town.
So there really was no

425
00:19:59.660 --> 00:20:02.000
way to side load apps.
There was no way to

426
00:20:02.000 --> 00:20:04.250
load custom apps because there
just wasn't the bandwidth for

427
00:20:04.250 --> 00:20:07.190
it. Well, and Bluetooth wasn't
there and that you're basing

428
00:20:07.190 --> 00:20:10.010
your stuff on Bluetooth for
right. So we have Bluetooth

429
00:20:10.370 --> 00:20:13.910
4.0 BDR plus Ellie. What
that means is that we

430
00:20:13.910 --> 00:20:15.980
support you to have to
slow down. Yeah. I said

431
00:20:15.980 --> 00:20:17.960
that fast because it wasn't
gonna be understood no matter

432
00:20:17.960 --> 00:20:21.440
how slow I said it,
Bluetooth four is a very

433
00:20:21.440 --> 00:20:24.170
nebulous thing because a lot
of people think Bluetooth four

434
00:20:24.170 --> 00:20:26.450
means the new low energy
Bluetooth. And a lot of

435
00:20:26.450 --> 00:20:28.640
people think is just the
newest version of Bluetooth, which

436
00:20:28.640 --> 00:20:31.400
is what it is. We
support both classic Bluetooth, which

437
00:20:31.400 --> 00:20:35.150
is what Bluetooth 3.0 was.
And 2.1. But we also

438
00:20:35.150 --> 00:20:38.660
support the no low energy
mode, which lets you talk

439
00:20:38.660 --> 00:20:40.820
to things like the iPhone
for us, from your watch

440
00:20:41.090 --> 00:20:44.390
and also makes it so
that instead of a connection

441
00:20:44.390 --> 00:20:46.220
that you start and then
it takes a lot of

442
00:20:46.220 --> 00:20:48.910
power while you're setting and
then you disconnect and it's,

443
00:20:49.300 --> 00:20:53.080
it's awesome. We're using low
energy, which can wake up

444
00:20:53.140 --> 00:20:55.720
transmits, tiny bits of information
and fall asleep very quickly,

445
00:20:55.900 --> 00:20:59.460
which really helps on battery
life. Heard that with Bluetooth,

446
00:20:59.460 --> 00:21:02.190
low energy, that the theory
is that devices could last

447
00:21:02.190 --> 00:21:04.380
a year. Okay. Or two,
yeah. On a coin cell

448
00:21:04.380 --> 00:21:06.960
battery, you know, for a
watch, you know, we're living

449
00:21:06.960 --> 00:21:08.640
in a world where we
have a microcontroller and a

450
00:21:08.640 --> 00:21:10.830
screen and everything else. So,
you know, we're shooting for

451
00:21:10.830 --> 00:21:12.810
a week, not a year,
well a week You can

452
00:21:12.810 --> 00:21:16.200
certainly reasonable. I have smartwatches
that I charge every day

453
00:21:16.530 --> 00:21:18.360
or every other day. Yeah.
In fact, it's a problem

454
00:21:18.360 --> 00:21:20.370
for us that it lasts
so long in a charge

455
00:21:20.640 --> 00:21:23.430
because people understand charging every
day. They have no metric

456
00:21:23.430 --> 00:21:26.070
for I charged, wait, is
it Friday night or Tuesday

457
00:21:26.070 --> 00:21:28.770
night? Like there's no, there's
no rhythmic cycle. Like you

458
00:21:28.770 --> 00:21:31.140
have what? Just plug it
in every night. So one

459
00:21:31.140 --> 00:21:32.850
of the things we did,
which is a really novel

460
00:21:32.850 --> 00:21:35.280
thing with agent is that
we gave it a Coolum

461
00:21:35.290 --> 00:21:38.250
counter, which is in effect
that gas gauge for your,

462
00:21:38.400 --> 00:21:42.750
for your watch. So it's,
it's a measurement of how

463
00:21:42.750 --> 00:21:45.090
much current is flowing through
a device. So you can

464
00:21:45.090 --> 00:21:46.950
measure how much power you're
using out of the battery

465
00:21:47.820 --> 00:21:50.190
with your smartphone. It has
one inside so that it

466
00:21:50.190 --> 00:21:53.160
knows what state your batteries
at and how fast you're

467
00:21:53.160 --> 00:21:54.930
eating power. There's a lot
of tools. Like if you

468
00:21:54.930 --> 00:21:58.410
saw the demo at bell,
the visual studio, 2013 with

469
00:21:58.410 --> 00:22:00.990
windows phone, it could show
you how much battery you're

470
00:22:00.990 --> 00:22:04.470
networking and different features on
your app are using, which

471
00:22:04.470 --> 00:22:06.270
is really useful because you
could profile your app to

472
00:22:06.270 --> 00:22:08.670
be energy efficient. And we
could live in a world

473
00:22:08.670 --> 00:22:11.670
where smartphones start lasting for
days instead of, you know,

474
00:22:11.730 --> 00:22:14.490
a day. Well with the
watch, our battery is 10

475
00:22:14.490 --> 00:22:16.800
times smaller than your smartphone,
but we have to last

476
00:22:17.010 --> 00:22:19.230
like 10 times longer. So
we live in a world

477
00:22:19.230 --> 00:22:21.210
where we really have to
understand how much power we're

478
00:22:21.210 --> 00:22:23.520
using. This is why we
put that tech in there.

479
00:22:23.520 --> 00:22:26.280
So app developers can profile
apps and give you amazing

480
00:22:26.280 --> 00:22:29.580
battery life with powerful apps.
It also lets you know,

481
00:22:29.610 --> 00:22:32.580
how much battery is left
so that you understand, okay.

482
00:22:32.580 --> 00:22:34.080
In a couple of days
I should throw this on

483
00:22:34.080 --> 00:22:36.480
the chart. Sure. See, that's
really interesting that, that the

484
00:22:36.480 --> 00:22:39.090
expectation you bring up a
point that the expectation is

485
00:22:39.090 --> 00:22:43.020
that I want, you know,
like the Dick Tracy watch

486
00:22:43.020 --> 00:22:45.960
phone, right? And I want
to see like a full

487
00:22:45.960 --> 00:22:48.480
color image of Dick Tracy
and I want to be

488
00:22:48.480 --> 00:22:50.370
on the phone and I
want it to last for

489
00:22:50.370 --> 00:22:53.550
a week or a month.
Like you said, it's 10

490
00:22:53.550 --> 00:22:55.440
times smaller and we want
it to last at all.

491
00:22:55.450 --> 00:22:58.350
And I want it now.
It's totally unrealistic the expectations

492
00:22:58.680 --> 00:23:01.170
We're getting there. And we're,
we're pushing those boundaries. You

493
00:23:01.170 --> 00:23:03.360
know, with agent we're really
trying to help move the

494
00:23:03.360 --> 00:23:06.390
industry forward. And I think
that eventually the color displays

495
00:23:06.390 --> 00:23:08.250
will happen. There's actually some
new tech there, which we

496
00:23:08.250 --> 00:23:10.500
have been looking at and
playing with. But it's just,

497
00:23:10.650 --> 00:23:13.530
it's just not the kind
of quality you want on

498
00:23:13.530 --> 00:23:15.420
a watch today. We'll talk
about the display a little

499
00:23:15.420 --> 00:23:18.930
bit. Everyone thinks everyone keeps
saying E ink, but instead

500
00:23:18.930 --> 00:23:21.600
we're ending up using these
low power. So their memory

501
00:23:21.600 --> 00:23:24.330
displays they're actually memory LCDs.
And what it is is

502
00:23:24.330 --> 00:23:27.210
if you took a LCD
display, that was one bet,

503
00:23:27.210 --> 00:23:29.850
some monochrome and you scale
that way down in power.

504
00:23:30.030 --> 00:23:33.720
And you actually embedded a
bit of memory behind every

505
00:23:33.720 --> 00:23:36.540
pixel, physically in the display,
you'd end up with a

506
00:23:36.540 --> 00:23:39.210
display that takes about as
much power on average as

507
00:23:39.210 --> 00:23:42.420
like an ink display, except
it's fully animatable. So you

508
00:23:42.420 --> 00:23:44.610
get 15, 30 frames a
second on it. So you

509
00:23:44.610 --> 00:23:48.080
get these really smooth, rich
user interfaces. Whereas with the

510
00:23:48.080 --> 00:23:52.370
technology like <inaudible> or other
types of ePaper displays, you

511
00:23:52.370 --> 00:23:54.900
end up in a world
where it refreshes. Like you

512
00:23:54.950 --> 00:23:56.960
could actually see the screen
like reverse and flip, like

513
00:23:56.960 --> 00:23:59.660
it does on your Kindle.
We wanted something that was

514
00:23:59.780 --> 00:24:02.450
the quality of an LCD
display on a, on a

515
00:24:02.450 --> 00:24:06.710
traditional watch, but super high
resolution. We're 141 DPIs, which

516
00:24:06.710 --> 00:24:09.370
for a watch, it was
pretty fantastic. And does this

517
00:24:09.370 --> 00:24:12.220
use power? Like forgive my
ignorance, but that's my job

518
00:24:12.250 --> 00:24:16.060
to be ignorant. Does this,
does this use power to

519
00:24:16.060 --> 00:24:18.400
keep it on? It does
use power to keep it

520
00:24:18.400 --> 00:24:21.190
on, but we don't have
to keep our processor awake

521
00:24:21.190 --> 00:24:23.890
to keep on sending it
the display. So we don't

522
00:24:23.890 --> 00:24:26.200
have to 60 or 30
times a second say, here's

523
00:24:26.200 --> 00:24:28.270
your display? Here's your display?
Here's your display. Here's what

524
00:24:28.270 --> 00:24:30.370
you should be showing. We
simply update it what we

525
00:24:30.370 --> 00:24:32.530
want to, and then we
just give it a tiny

526
00:24:32.530 --> 00:24:35.470
bit of power and an
occasional pulse. And it keeps

527
00:24:35.470 --> 00:24:39.100
that display going. It's ridiculously
low power. So if I,

528
00:24:39.100 --> 00:24:40.660
if I let's say that
I have my watch and

529
00:24:40.660 --> 00:24:42.970
I am using it only
as a watch, it has

530
00:24:42.970 --> 00:24:46.150
some basic screen that is
only updating the seconds. Yep.

531
00:24:46.780 --> 00:24:49.090
Is it, is it asleep
for nine tenths of a

532
00:24:49.090 --> 00:24:52.180
second? So sleep for like
99 hundreds plus a second.

533
00:24:52.210 --> 00:24:54.670
Yeah. Yeah. So the entire
framework, and this is one

534
00:24:54.670 --> 00:24:56.860
big advantage we have with
dotnet micro framework as well

535
00:24:57.160 --> 00:24:59.800
is everything is built to
be asleep unless it's running

536
00:24:59.800 --> 00:25:02.290
code, which means whenever you're
not doing something, whenever there's

537
00:25:02.290 --> 00:25:05.140
not a thread running, whenever
there's not a timer going

538
00:25:05.140 --> 00:25:08.350
off, the processor goes in
this super deep sleep mode

539
00:25:08.350 --> 00:25:10.630
where it uses almost no
power. That's interesting that you

540
00:25:10.630 --> 00:25:12.730
say that because when I
first started playing with your

541
00:25:12.730 --> 00:25:15.130
emulator, which is really nice,
cause I don't have this

542
00:25:15.130 --> 00:25:17.680
watch. Right. But I have
the emulator you'll get, you'll

543
00:25:17.680 --> 00:25:20.050
get yours. I get mine.
I'm looking forward to my

544
00:25:20.050 --> 00:25:22.960
watch. But this is great
because you have an emulator,

545
00:25:23.020 --> 00:25:24.850
it looks just like the
watch and it's got buttons

546
00:25:24.850 --> 00:25:27.370
like the watch. Yep. And
then what was writing this

547
00:25:27.370 --> 00:25:30.520
code and learning how this
watch works. And I noticed

548
00:25:30.520 --> 00:25:32.920
that you set up kind
of these event handlers, these

549
00:25:32.920 --> 00:25:35.860
kinds of Lambdas and then
it just exits. Yep. And

550
00:25:35.860 --> 00:25:37.750
I was like, hang on
a second. And I think,

551
00:25:37.750 --> 00:25:39.610
I remember either emailed you
or called you. I was

552
00:25:39.610 --> 00:25:42.190
like, well where's the wow.
Well, true. Right? You don't

553
00:25:42.190 --> 00:25:43.840
want to do a wild
trip. That'll just eat your

554
00:25:43.840 --> 00:25:47.980
battery by sitting there spinning
forever. The pro help me

555
00:25:47.980 --> 00:25:50.590
understand you. Right. This main
and you set up a

556
00:25:50.590 --> 00:25:54.550
bunch of interrupts and expectations,
An event that every second

557
00:25:54.550 --> 00:25:56.530
or every minute it's going
to call your code to

558
00:25:56.530 --> 00:25:58.630
refresh the display so that
you could show the second

559
00:25:58.630 --> 00:26:00.310
hand moving or you can
update the minute on your

560
00:26:00.310 --> 00:26:03.130
display for right. How does
it not? How does the

561
00:26:03.130 --> 00:26:05.080
process not exit? Like what
is it that makes the

562
00:26:05.080 --> 00:26:08.470
process exit? Well, so for
your process to exit, if

563
00:26:08.470 --> 00:26:11.230
you didn't have any threads
running, if your main routine

564
00:26:11.230 --> 00:26:13.900
doesn't go to sleep, your
code would just run. Your

565
00:26:13.900 --> 00:26:15.940
process would exit. It's the
same as writing a console

566
00:26:15.940 --> 00:26:18.550
application on the desktop. If
you're wrote a console application,

567
00:26:18.730 --> 00:26:21.010
then you did five things
and then you just run

568
00:26:21.010 --> 00:26:23.620
to the end of the
main event. Your, your program

569
00:26:23.620 --> 00:26:25.930
stops, right? But if you
call a couple of threads

570
00:26:25.930 --> 00:26:29.200
in the background and then
you say system threading, threads,

571
00:26:29.200 --> 00:26:31.960
sleep infinite, it's just going
to keep on running forever.

572
00:26:31.960 --> 00:26:33.970
And those threads are running
in the background. It's dot

573
00:26:33.970 --> 00:26:35.830
net. It's the same kind
of dotnet as should use

574
00:26:35.830 --> 00:26:39.700
on the desktop. That's our
model. And what's cool is

575
00:26:39.820 --> 00:26:44.460
internally inside of the aisle
interpreter, it checks constantly to

576
00:26:44.460 --> 00:26:47.010
S I mean, it runs
your code and then it's

577
00:26:47.010 --> 00:26:49.770
always checking after instructions. Am
I done? And if it's

578
00:26:49.770 --> 00:26:52.620
done and there's a thread
that is going to get

579
00:26:52.620 --> 00:26:54.720
called later, based off an
interrupt or there's an event,

580
00:26:55.020 --> 00:26:57.150
it actually sets that up
and says, okay, I'm going

581
00:26:57.150 --> 00:26:59.550
to sleep. When X happens,
I'm going to wake back

582
00:26:59.550 --> 00:27:01.710
up and you don't know
that that's going on your

583
00:27:01.710 --> 00:27:04.830
code. All you know is
you just use event based

584
00:27:04.830 --> 00:27:07.500
programming techniques you've been using
for years. You can have

585
00:27:07.500 --> 00:27:10.650
multiple threads. You have timers
that go off. But literally

586
00:27:10.650 --> 00:27:13.320
when your app is not
doing anything, that processor is

587
00:27:13.320 --> 00:27:15.840
doing everything it can to
be in the deepest sleep

588
00:27:15.840 --> 00:27:17.990
mode possible. So how am
I going to connect this?

589
00:27:17.990 --> 00:27:22.700
There's no USB plug, right?
It's completely water resistant and

590
00:27:22.700 --> 00:27:25.100
there are no wires going
into it. So I w

591
00:27:25.130 --> 00:27:26.270
H how do I, how
am I going to write

592
00:27:26.270 --> 00:27:29.030
my glucose meter? So here's,
what's cool about that Bluetooth.

593
00:27:29.030 --> 00:27:31.340
So we've got both Bluetooth
classic and the new Bluetooth,

594
00:27:31.340 --> 00:27:34.460
low energy inside the device.
So from visual studio, you

595
00:27:34.460 --> 00:27:37.070
simply set up a blow
to Sarah port and your

596
00:27:37.070 --> 00:27:39.860
Bluetooth settings on windows. That's
between your watch and your,

597
00:27:40.310 --> 00:27:44.180
and your computer. And then
you deploy, you hit that

598
00:27:44.180 --> 00:27:45.980
play button, just like you
would to run any other

599
00:27:45.980 --> 00:27:47.990
app and it deploys it.
And you debug in real

600
00:27:47.990 --> 00:27:50.810
time, you can set break
points. You can run to

601
00:27:50.810 --> 00:27:53.120
command, you can hover over
variables. They'll tell you what

602
00:27:53.120 --> 00:27:55.250
they are. It's just like
using a windows phone, eight

603
00:27:55.250 --> 00:27:58.070
device, or if you've used
surface RT, for instance, you

604
00:27:58.070 --> 00:28:00.650
can deploy code and use
a remote debugger on surface

605
00:28:00.650 --> 00:28:03.290
RT. It's the same thing.
You're just doing it. So

606
00:28:03.290 --> 00:28:06.710
the same infrastructure, the same
remote debugging infrastructure To you,

607
00:28:06.720 --> 00:28:09.500
it is behind the scenes
is different, but it is

608
00:28:09.500 --> 00:28:13.340
the same. And do I
go into the watches settings

609
00:28:13.340 --> 00:28:15.710
and say, all right, we're
in debug mode. Now We're

610
00:28:15.710 --> 00:28:17.390
actually trying to figure out
the best way to do

611
00:28:17.390 --> 00:28:19.480
this for developers right now,
every watch set up as

612
00:28:19.490 --> 00:28:21.950
a developer watch, but we're
actually thinking we might ship

613
00:28:21.950 --> 00:28:25.250
them all as kind of
non developer watches. And then

614
00:28:25.250 --> 00:28:28.010
we'll let developers reflash because
you can, reflash without having

615
00:28:28.010 --> 00:28:29.870
to worry about brick, your
watch, they'll actually be able

616
00:28:29.870 --> 00:28:32.210
to reflash they're watching developer
mode, and then it will

617
00:28:32.210 --> 00:28:35.510
let them deploy that code.
Now, any watch, whether it's

618
00:28:35.510 --> 00:28:37.670
in developer mode or not,
you'll be able to not

619
00:28:37.670 --> 00:28:39.470
only use the app sort
of load code, but you'll

620
00:28:39.470 --> 00:28:42.710
also be able to deploy
code from a site loading

621
00:28:42.710 --> 00:28:45.560
mechanism or through a windows
phone app. We've created this

622
00:28:45.560 --> 00:28:48.350
as an open ecosystem so
that you're not tied to

623
00:28:48.350 --> 00:28:51.170
any specific app or process
to get apps onto the

624
00:28:51.170 --> 00:28:54.110
watch. Okay. So that's my,
that was my next question.

625
00:28:54.920 --> 00:28:56.270
You know, I will write
it. I want to write

626
00:28:56.270 --> 00:28:58.850
a glucose meter and figure
out how to have it,

627
00:28:58.850 --> 00:29:00.860
talk to my, my blood
sugar meter. But I also

628
00:29:00.860 --> 00:29:02.420
want to be able to
download whoever that, you know,

629
00:29:02.420 --> 00:29:05.090
like I know Rafael Rivera
and long Jang, and those

630
00:29:05.090 --> 00:29:06.830
guys are going to go
and write some amazing apps.

631
00:29:07.250 --> 00:29:10.010
I want to just download
them off of their, their

632
00:29:10.010 --> 00:29:13.760
website, then acknowledge the something
bad will happen, acknowledgement button.

633
00:29:15.080 --> 00:29:18.320
So the, the watch itself
you're after sandbox. So there's

634
00:29:18.320 --> 00:29:20.060
very few things that will
tell you, you shouldn't run

635
00:29:20.060 --> 00:29:22.490
on your watch. The meantime
that you'll get a flag

636
00:29:22.520 --> 00:29:24.980
telling you that maybe you
shouldn't install something as when

637
00:29:24.980 --> 00:29:27.140
do we know that it's
going to consume vast amounts

638
00:29:27.140 --> 00:29:29.030
of battery power and it
doesn't fit into our battery

639
00:29:29.030 --> 00:29:31.940
power guidelines, best practices for
having apps that last a

640
00:29:31.940 --> 00:29:35.420
long time. Yeah. You can
just go ahead and do

641
00:29:35.420 --> 00:29:37.160
that. In fact, if you
want to we'll leave and

642
00:29:37.160 --> 00:29:40.040
let you write code inside
of your windows phone or

643
00:29:40.040 --> 00:29:42.790
your Android app to an
app directly under the watch

644
00:29:43.000 --> 00:29:47.280
without using our loader app.
So that's another great question

645
00:29:47.280 --> 00:29:51.810
is that let's remove the
computer from the equation. Yup.

646
00:29:51.840 --> 00:29:53.670
Now I have a phone.
Yeah. I have an iPhone.

647
00:29:53.670 --> 00:29:55.620
You have a windows phone
is also an Android on

648
00:29:55.620 --> 00:29:58.770
the table over there. What
if, how do I make

649
00:29:58.770 --> 00:30:01.500
the, my windows phone or
my iPhone talk to the

650
00:30:01.500 --> 00:30:03.840
watch and what kind of
things can it do Also

651
00:30:03.840 --> 00:30:05.970
via Bluetooth? One of the
nice things about the watch

652
00:30:06.030 --> 00:30:08.670
is that we can, we
can either pair to a

653
00:30:08.670 --> 00:30:10.890
PC. You can talk to
your phone, you can talk

654
00:30:10.890 --> 00:30:14.040
to devices that as a
really rich Bluetooth capability, but

655
00:30:14.040 --> 00:30:16.680
we're going to be shipping
a companion app for windows,

656
00:30:16.680 --> 00:30:19.440
phone, Android, and iPhone. Some
of that code, actually, we're

657
00:30:19.440 --> 00:30:22.530
using Xamarin studio and Xamarin
tools to be able to

658
00:30:23.070 --> 00:30:25.680
use one code base that
ensures that we can provide

659
00:30:25.680 --> 00:30:28.260
the same kind of capabilities
to Android developers and iPhone

660
00:30:28.590 --> 00:30:31.500
or Android users and iPhone
users as windows, phone users,

661
00:30:31.500 --> 00:30:34.230
for instance, but you'll actually
be able to download apps

662
00:30:34.230 --> 00:30:36.720
from the web and install
them to your watch through

663
00:30:36.720 --> 00:30:38.820
your smartphone. You don't need
to use a PC to

664
00:30:38.820 --> 00:30:42.000
use those watch. That's pretty
sweet to develop for the

665
00:30:42.000 --> 00:30:45.390
watch. You need a PC.
Sure, sure. So this could

666
00:30:45.390 --> 00:30:48.570
become a companion device for
all sorts of things. Like

667
00:30:48.750 --> 00:30:50.910
if I had a blood
sugar meter on the phone,

668
00:30:51.660 --> 00:30:53.610
it could be running in
the background, processing the phone,

669
00:30:53.610 --> 00:30:57.000
using the process power of
the phone, talking to the

670
00:30:57.000 --> 00:30:59.490
internet. Yeah. So you can
do analytics, use your phone

671
00:30:59.490 --> 00:31:03.000
as a gateway to transmit
information, whatever the app store

672
00:31:03.000 --> 00:31:05.610
policies of your particular brand
of phone allow you to

673
00:31:05.610 --> 00:31:09.270
do. We have no, we
have no policies. You can

674
00:31:09.270 --> 00:31:11.520
do whatever you want on
the watch, right? But as

675
00:31:11.520 --> 00:31:13.290
long as it's on the
phone, you can transfer that

676
00:31:13.290 --> 00:31:15.480
data to the internet. You
can talk to those sensors.

677
00:31:15.900 --> 00:31:18.560
You're set. Very cool. So
where can people go and

678
00:31:18.570 --> 00:31:22.110
preorder this and get the,
an emulator Kickstarter campaigns over.

679
00:31:22.140 --> 00:31:24.540
But if you go to
agent watches.com, you can reserve

680
00:31:24.540 --> 00:31:27.060
a watch today. We'll have
preorders later in the year.

681
00:31:27.060 --> 00:31:28.770
So you'll get to the
front of the line for

682
00:31:28.770 --> 00:31:31.530
that. And then you can
also download the emulator and

683
00:31:31.530 --> 00:31:34.920
the SDK directly off of
that website, agent watches.com. All

684
00:31:34.920 --> 00:31:37.860
right. Very cool. Agent watches.com.
Thanks so much, Chris, for

685
00:31:37.860 --> 00:31:40.050
talking to me today. Thank
you, Scott. This has been

686
00:31:40.050 --> 00:31:42.870
another episode of Hansel minutes.
We'll see you again next

687
00:31:42.870 --> 00:31:43.020
week.

