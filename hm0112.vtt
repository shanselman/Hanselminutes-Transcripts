WEBVTT FILE

1
00:00:12.020 --> 00:00:17.840
From Hanselman is.com. It's Hanselman.
It's a weekly discussion with

2
00:00:17.840 --> 00:00:23.540
web developer and technologist Scott
Hanselman hosted by Carl Franklin business

3
00:00:23.540 --> 00:00:27.470
law. It's Ryan announcing show
number one 12 recorded live

4
00:00:27.500 --> 00:00:33.800
Tuesday, April 22nd, 2008. Support for Hanselman
it's just provided by. Tellerik

5
00:00:33.830 --> 00:00:37.730
already controls the most comprehensive
suite of components for windows

6
00:00:37.730 --> 00:00:47.780
forms and asp.net web applications.
online@wwwdottelerik.com. Support is also provided

7
00:00:47.780 --> 00:00:52.820
by.net developers journal the world's
leading.net developer magazine online at

8
00:00:53.120 --> 00:00:59.420
www dot <inaudible> dot com.
In this episode, Scott discusses

9
00:00:59.420 --> 00:01:03.470
the past present and future
of.net unit testing frameworks with

10
00:01:03.470 --> 00:01:07.910
developers, Charlie pool, Jeff Brown, Brad
Wilson, and Roy Asha road.

11
00:01:11.150 --> 00:01:13.100
Hi, this is Scott Hanselman.
This is another episode of

12
00:01:13.100 --> 00:01:16.160
Hansel minutes, and I'm sitting
here@theall.net conference in Redmond, Washington

13
00:01:16.520 --> 00:01:19.190
with a panel of unit
testing experts. We've got Charlie

14
00:01:19.190 --> 00:01:22.780
Poole maintain our event unit,
got Roy Osher, ova developer

15
00:01:22.820 --> 00:01:25.610
type Mark, and the author
of the upcoming art of

16
00:01:25.610 --> 00:01:30.380
unit testing book. We've got
Jeff Brown, the lead on B

17
00:01:30.380 --> 00:01:33.980
unit, and we've got Brad
Wilson, the cocreator of X

18
00:01:33.980 --> 00:01:37.100
unit.net. This is the first
time I've had this many

19
00:01:37.100 --> 00:01:38.990
people on the show, and
I appreciate your guys as

20
00:01:38.990 --> 00:01:41.990
patients as we have our
very first panel on Hansel

21
00:01:41.990 --> 00:01:43.790
minutes. But I figured when
I get this many people

22
00:01:43.790 --> 00:01:46.550
who know about unit testing
all in one place at

23
00:01:46.550 --> 00:01:48.500
one time, I had to
sit down and sit and

24
00:01:48.500 --> 00:01:51.230
talk to you guys. Now
I've been an end unit

25
00:01:51.230 --> 00:01:53.630
guy from, from way back
and I used end unit

26
00:01:54.060 --> 00:01:56.600
at my last job. And,
and that was always the

27
00:01:56.600 --> 00:02:00.980
canonical example. And sometimes people
say that's the first example

28
00:02:00.980 --> 00:02:03.410
of the beginning of moving
a lot of things over

29
00:02:03.410 --> 00:02:06.530
from, from Java, moving things
from Java in the sense

30
00:02:06.530 --> 00:02:10.910
that J unit in some
respects, begat and unit, would

31
00:02:10.910 --> 00:02:15.470
you agree with that, Charlie?
Well, it's the first example

32
00:02:15.470 --> 00:02:20.300
in the.net world, perhaps not
the first, but the first

33
00:02:20.300 --> 00:02:22.760
a very well known one
of course, a lot of

34
00:02:22.760 --> 00:02:26.690
things got moved from Java
to many different languages and

35
00:02:26.690 --> 00:02:28.340
I should say, you know,
we're very glad to have

36
00:02:28.340 --> 00:02:31.580
you as a user. Yeah,
thank you. But I bet

37
00:02:31.580 --> 00:02:33.200
there's a lot of options
now and we've got these

38
00:02:33.200 --> 00:02:34.790
options assembled in this room
and that's one of the

39
00:02:34.790 --> 00:02:37.130
things we want to talk
about, but is that a

40
00:02:37.130 --> 00:02:39.590
good thing to bring things
over from Java? Are we

41
00:02:39.590 --> 00:02:42.560
being derivative and as being
derivative? I think it's really

42
00:02:42.590 --> 00:02:45.260
not that important where they,
where they came from. We're

43
00:02:45.260 --> 00:02:49.280
all developing software, we're using
different technologies. We can learn

44
00:02:49.280 --> 00:02:53.750
a lot from each other,
even after the stuff has

45
00:02:53.750 --> 00:02:57.170
been brought over. We're continuing
to pick up new ideas

46
00:02:57.170 --> 00:03:01.000
from the Java community, from
the Ruby community, From Python

47
00:03:01.000 --> 00:03:05.710
folks. And it all applies
once we translate it to

48
00:03:05.710 --> 00:03:09.120
our own environment. So there's
no unit testing, blood feud

49
00:03:09.540 --> 00:03:13.920
that's going on. I think
not. Yeah. Now MV unit

50
00:03:13.920 --> 00:03:17.760
is known for its role.
It's wrote test attribute and

51
00:03:17.790 --> 00:03:21.000
road test was considered to
be particularly innovative. And a

52
00:03:21.000 --> 00:03:23.070
lot of people got excited
about ambient when they saw

53
00:03:23.070 --> 00:03:24.690
that. So what is road
test and, and why should

54
00:03:24.690 --> 00:03:27.570
I care? So road test
is a very simple way

55
00:03:27.570 --> 00:03:30.450
to run a parameterized unit
tests with a bunch of

56
00:03:30.450 --> 00:03:35.490
different values. So basically let's
suppose you have a simple

57
00:03:35.490 --> 00:03:40.890
algorithm which manipulate strings and
with certain kinds of strings

58
00:03:40.980 --> 00:03:42.780
will produce a result. And
with certain other kinds of

59
00:03:42.780 --> 00:03:44.790
strings, like maybe an empty
one will produce a different

60
00:03:44.790 --> 00:03:48.030
result, but the structure of
the test itself is all

61
00:03:48.030 --> 00:03:52.620
pretty much the same. So
you can very easily parameterize

62
00:03:52.620 --> 00:03:56.700
your test and, and then
reduce the amount of code

63
00:03:56.700 --> 00:04:00.300
that you have to write
in essentially. But there's, there's

64
00:04:00.300 --> 00:04:02.370
a whole lot more you
can do beyond that. But

65
00:04:02.370 --> 00:04:04.470
the idea that, that you
would slap an attribute on

66
00:04:04.470 --> 00:04:06.390
a test and suddenly that
test became a test of

67
00:04:06.390 --> 00:04:08.790
many, many things. It seems
like a, you know, as

68
00:04:08.790 --> 00:04:10.980
a deceptively simple thing, but
it was very, very powerful

69
00:04:10.980 --> 00:04:12.540
and it got a lot
of people excited about that.

70
00:04:12.900 --> 00:04:14.790
Oh yeah. That's, that's actually
one of our most popular

71
00:04:14.790 --> 00:04:17.880
features and it's been, it's
been duplicated and then a

72
00:04:17.880 --> 00:04:20.220
lot of different testing frameworks,
which is, which was good

73
00:04:20.220 --> 00:04:22.140
to see actually. And, and
I understand that you can

74
00:04:22.140 --> 00:04:24.150
pull that, not just from
data that you can stack

75
00:04:24.150 --> 00:04:25.830
and attributes, but you can
pull it from a database.

76
00:04:25.830 --> 00:04:28.410
Even you can have database
driven tests or integration tests,

77
00:04:28.740 --> 00:04:30.990
row a row tests are
just one special case where

78
00:04:30.990 --> 00:04:33.210
the data is embedded inside
of the inside of the

79
00:04:33.210 --> 00:04:35.580
source code, but we can
be pulling data from files.

80
00:04:35.580 --> 00:04:37.110
We can pull it from
a database. We can pull

81
00:04:37.110 --> 00:04:39.390
it recently. A lot of
people are liking that we

82
00:04:39.390 --> 00:04:44.400
can pull from CSV files.
Hmm. Interesting. Portable databases. Now

83
00:04:44.400 --> 00:04:49.380
Brad, when, when X unit.net
came out, my first impression

84
00:04:49.380 --> 00:04:52.860
was, do we need another
one? But a lot of

85
00:04:52.860 --> 00:04:54.720
pragmatists are saying, well, of
course, you know, of course

86
00:04:54.720 --> 00:04:56.730
we can continue to have
as many as it'll take

87
00:04:56.760 --> 00:04:58.830
and people will use the
one that makes them, makes

88
00:04:58.830 --> 00:05:00.720
them happy. Why did you
feel the need to write

89
00:05:00.720 --> 00:05:04.020
yet another unit testing framework?
So just to be clear

90
00:05:04.140 --> 00:05:07.260
when Jim and I, Jim
Newkirk, he was on one

91
00:05:07.260 --> 00:05:08.640
of the guys who did
any two Oh and work

92
00:05:08.640 --> 00:05:14.340
with Charlie, Jim and I
we're, we're looking to sort

93
00:05:14.340 --> 00:05:17.970
of take our experience writing
unit tests with mostly with

94
00:05:17.970 --> 00:05:20.820
on unit some with ms.
Test instead of visual studio

95
00:05:21.480 --> 00:05:24.090
and which is not represented
here. Interestingly, I guess I'll

96
00:05:24.090 --> 00:05:26.670
play that guy. We were
looking to sort of take

97
00:05:26.670 --> 00:05:29.520
some of our experience and
turn it into a unit

98
00:05:29.520 --> 00:05:33.360
testing framework that was sort
of opinionated in the sense

99
00:05:33.360 --> 00:05:34.950
that we wanted to give
people guidance on the things

100
00:05:34.950 --> 00:05:38.640
that we felt were good
for unit testing. So we

101
00:05:38.640 --> 00:05:41.880
made a lot of changes
that made people uncomfortable. We

102
00:05:41.880 --> 00:05:44.580
renamed attributes, we took a
lot of attributes away and

103
00:05:44.580 --> 00:05:46.890
we sort of scaled down
the core to something really

104
00:05:47.340 --> 00:05:50.880
small in order to sort
of represent the core of

105
00:05:51.240 --> 00:05:54.570
what we felt was important
for TDD style unit testers.

106
00:05:54.630 --> 00:05:56.010
You know, that's a really
interesting the way that you

107
00:05:56.010 --> 00:05:59.570
phrase that in saying you
have a very opinionated And

108
00:05:59.570 --> 00:06:01.430
I would even go so
far as to say unapologetically

109
00:06:01.430 --> 00:06:04.490
opinionated unit testing framework. Well,
yeah, you know, me, so

110
00:06:04.550 --> 00:06:09.320
unapologetic, unapologetically opinionated is me.
And rather than I look

111
00:06:09.320 --> 00:06:13.070
sometimes in the older versions
of an unit juxtaposed with

112
00:06:13.070 --> 00:06:15.380
the newer versions of MB
unit, and I thought that

113
00:06:15.380 --> 00:06:19.490
that was kind of evolutionary
well, X unit.net has removed

114
00:06:19.490 --> 00:06:21.710
a great deal of things.
You've basically given people less

115
00:06:21.710 --> 00:06:25.700
rope with which to hang
themselves. That was, you know,

116
00:06:25.700 --> 00:06:28.220
Jim and I have spent
a lot of time talking

117
00:06:28.220 --> 00:06:31.100
at conferences about, you know,
the things that do work

118
00:06:31.100 --> 00:06:32.750
and the things that can
get you in trouble. And

119
00:06:32.750 --> 00:06:35.150
so we felt like giving
people that guidance by taking

120
00:06:35.150 --> 00:06:38.000
those functionality out of the
testing framework was very important.

121
00:06:38.240 --> 00:06:41.060
So one of the ones
that you removed virtually completely

122
00:06:41.060 --> 00:06:43.870
was the setup and tear
down where people were putting

123
00:06:43.880 --> 00:06:47.090
great deal of code in
there and their setups into

124
00:06:47.210 --> 00:06:50.030
prepare for the test and
that test, that code ultimately

125
00:06:50.030 --> 00:06:53.240
doesn't get tested. Of course,
right. There was, there's actually

126
00:06:53.240 --> 00:06:55.760
two driving factors. One is
Jim and I both believe

127
00:06:55.760 --> 00:06:59.240
that set up and tear
down our men often overused

128
00:06:59.270 --> 00:07:02.480
thing, and it can make
tests very difficult to understand,

129
00:07:02.960 --> 00:07:05.480
but there was another sort
of driving factor as well,

130
00:07:05.480 --> 00:07:07.640
which was set up and
tear down as attributes on

131
00:07:07.640 --> 00:07:11.960
methods had strange behavior associated
with it that wasn't really

132
00:07:11.960 --> 00:07:16.970
consistent with the.net framework. And
so we decided that the

133
00:07:16.970 --> 00:07:19.040
thing that sort of best
describes set up and tear

134
00:07:19.040 --> 00:07:22.160
down to us was a
constructor and dispose. And so

135
00:07:22.160 --> 00:07:23.780
we remove, set up and
tear down in favor of

136
00:07:23.780 --> 00:07:27.020
constructor and disposed to sort
of say, let's make better

137
00:07:27.020 --> 00:07:28.850
use of the framework we've
already got and the rules

138
00:07:28.850 --> 00:07:32.510
we already understand. Hmm. Interesting.
Now, what are some of

139
00:07:32.510 --> 00:07:34.040
the features that you guys
are working on an end

140
00:07:34.040 --> 00:07:36.170
unit that are kind of
innovative for the next version?

141
00:07:36.910 --> 00:07:41.020
Well, one I do have
to interject does something where

142
00:07:41.020 --> 00:07:43.060
you want to take it,
Charlie. I think it's, it's

143
00:07:43.750 --> 00:07:48.460
quite interesting that X unit
these days is the opinionated

144
00:07:48.970 --> 00:07:53.110
framework because Indian, it used
to be the framework we

145
00:07:53.110 --> 00:07:57.100
used to say with attitude,
testing with that. And we

146
00:07:57.100 --> 00:08:00.760
would refuse to add features
that we didn't think people

147
00:08:00.760 --> 00:08:05.080
should be using. And it's
probably no coincidence that a

148
00:08:05.230 --> 00:08:10.210
Jim Newkirk who is involved
in both in both projects

149
00:08:10.570 --> 00:08:13.750
as an unit has moved
along. Some of us have

150
00:08:13.750 --> 00:08:19.420
gotten convinced that we can't
keep refusing features to people

151
00:08:19.420 --> 00:08:23.140
because we think they're not
good for them. That, that

152
00:08:25.420 --> 00:08:29.650
we used to feel like
some of the other frameworks,

153
00:08:29.680 --> 00:08:33.460
perhaps MBA unit would be
an example we're over featured

154
00:08:33.460 --> 00:08:36.790
and we're giving people too
many different choices to make.

155
00:08:37.180 --> 00:08:40.420
And our users would complain
about that. And we would

156
00:08:40.420 --> 00:08:42.970
say, well, no, we think
this is the way TDD

157
00:08:42.970 --> 00:08:46.030
unit testing should be done.
Now we're moving, I think

158
00:08:46.030 --> 00:08:49.900
towards sort of a new
balance, but maybe somewhere with

159
00:08:50.830 --> 00:08:53.530
still some opinions about what's
right, and what should be

160
00:08:53.530 --> 00:08:56.130
in and what should be
out, but a little more

161
00:08:56.130 --> 00:08:59.730
towards giving people more things.
So working now, putting in

162
00:08:59.730 --> 00:09:05.910
the data-driven features like test
case, which works similar to

163
00:09:05.970 --> 00:09:09.120
a road test. And the
reason that wasn't in before

164
00:09:09.120 --> 00:09:12.360
is that people used to
believe that you couldn't do

165
00:09:12.930 --> 00:09:17.640
a test driven development with
those data-driven sort of cases.

166
00:09:18.060 --> 00:09:21.390
And now it looks like
you probably can, now that

167
00:09:21.390 --> 00:09:24.540
we understand a little better,
how debts driven development works

168
00:09:25.220 --> 00:09:27.230
Now, Roy, you, as an
agile practitioner, do you have

169
00:09:27.230 --> 00:09:30.800
some opinions I'm sure about
this is the kitchen sink

170
00:09:30.800 --> 00:09:36.140
approach better is the more
lightweight approach. Well, when X

171
00:09:36.140 --> 00:09:41.030
unit to first came out,
I was really skeptical about

172
00:09:41.390 --> 00:09:44.390
using it. I thought probably
the same as you. Why

173
00:09:44.390 --> 00:09:46.820
do we need another one?
And I didn't like the

174
00:09:46.820 --> 00:09:49.250
fact that it was not
backwards compatible, so it was

175
00:09:49.460 --> 00:09:54.980
almost impossible or virtually impossible
to, to, to move to

176
00:09:54.980 --> 00:09:57.020
it. If you have a
lot of existing tests with

177
00:09:57.020 --> 00:09:59.180
one of the other frameworks,
especially if you had set

178
00:09:59.180 --> 00:10:02.360
up and tear down, it
was hard to maintain that

179
00:10:02.360 --> 00:10:06.260
kind of code and move
it over. But I think

180
00:10:06.260 --> 00:10:11.360
as time moved past, I'm
more comfortable with doing stuff

181
00:10:11.750 --> 00:10:14.090
with X unit for Greenfield
code. I mean, I have

182
00:10:14.090 --> 00:10:16.610
no problem with that. I
think it's actually a very

183
00:10:16.610 --> 00:10:20.090
good thing for people who
try to do minimalist thing

184
00:10:20.120 --> 00:10:23.180
that they believe in the
fact that there are three

185
00:10:23.180 --> 00:10:28.910
frameworks or three big framework
frameworks to choose from is

186
00:10:28.910 --> 00:10:33.290
good because it creates sort
of a virtual competition, not

187
00:10:33.290 --> 00:10:37.310
in terms of features, but
in terms of approaching the

188
00:10:37.310 --> 00:10:41.630
community in different ways. So
N unit and approaches the

189
00:10:41.630 --> 00:10:46.820
community differently than MB unit
in terms of features or

190
00:10:46.820 --> 00:10:50.720
extensibility or API and X,
you need to approach the

191
00:10:50.720 --> 00:10:55.010
community very differently by minimalism
and by being very, very

192
00:10:55.010 --> 00:10:59.870
opinionated and especially having, starting
to work at Tidemark, which

193
00:10:59.870 --> 00:11:02.780
is a very opinionated framework
by itself, a lot of

194
00:11:02.780 --> 00:11:05.390
people would say, I'm starting
to appreciate that kind of

195
00:11:05.390 --> 00:11:09.320
a, that kind of a
worldview. You look at your

196
00:11:09.320 --> 00:11:13.130
head a comment. Oh Sure.
So, so what I find

197
00:11:13.580 --> 00:11:15.800
is great right now is
that we are seeing a

198
00:11:15.800 --> 00:11:19.490
lot of different innovation appearing
in the unit testing space

199
00:11:19.490 --> 00:11:23.210
again. And you know, part
of this actually I think

200
00:11:23.210 --> 00:11:26.540
is somewhat being catalyzed by
the X unit net stuff

201
00:11:26.540 --> 00:11:29.120
coming out. And we're just
looking at all sorts of

202
00:11:29.120 --> 00:11:31.310
different ways that we can
meet the needs of the

203
00:11:31.310 --> 00:11:36.460
community. So, you know, traditionally
Amber unit for example, is,

204
00:11:36.460 --> 00:11:40.250
is taking this approach where
we, we want to meet

205
00:11:40.250 --> 00:11:43.430
as diverse, a set of
needs as possible. And that

206
00:11:43.430 --> 00:11:46.610
has meant there. And there's
been a certain explosion in

207
00:11:46.610 --> 00:11:51.320
the number of features provided.
But now with version three,

208
00:11:51.350 --> 00:11:54.400
coming out, we are actually
the feature set To a

209
00:11:54.400 --> 00:11:58.240
great extent. We're retaining a
very wide scope in that

210
00:11:58.240 --> 00:12:00.610
we want to be able
to do unit testing, but

211
00:12:00.610 --> 00:12:06.100
also integration testing. But each
of these, each of these

212
00:12:06.100 --> 00:12:09.610
features now is more primitive
and more composable. And we're

213
00:12:09.610 --> 00:12:12.070
trying to find ways to
reduce the cognitive weight of

214
00:12:12.070 --> 00:12:15.130
the framework while still allowing
people a lot of flexibility.

215
00:12:15.970 --> 00:12:19.060
Hmm. I've got a question
about, about reuse and I'm

216
00:12:19.060 --> 00:12:20.380
just going to take a
brief moment here to thank

217
00:12:20.380 --> 00:12:24.010
our sponsors and we'll be
right back. Hi, it's Scott

218
00:12:24.010 --> 00:12:26.050
here from another place in
time. I hope you're enjoying

219
00:12:26.050 --> 00:12:28.690
the show so far. I
apologize for interrupting it, but

220
00:12:28.690 --> 00:12:30.610
I wanted to let you
know that assembling a podcast

221
00:12:30.610 --> 00:12:33.550
like this every week, isn't
free. Certainly the bandwidth bill

222
00:12:33.550 --> 00:12:35.110
crushes us every month. So
I want to let you

223
00:12:35.110 --> 00:12:37.870
know that this show is
sponsored by Tellerik. They make

224
00:12:37.870 --> 00:12:39.670
the show possible and they
make some pretty cool products

225
00:12:39.670 --> 00:12:42.070
as well. For example, if
you're trying to build a

226
00:12:42.070 --> 00:12:44.890
web 2.0 age, actually application
trying to use the web

227
00:12:44.890 --> 00:12:47.860
1.0 components, it's kind of
difficult. You gotta get the

228
00:12:47.860 --> 00:12:49.330
next gen stuff. If you
want to build the next

229
00:12:49.330 --> 00:12:51.970
gen websites. And that's exactly
what the folks at Tellerik

230
00:12:51.970 --> 00:12:54.370
of God and their new
upcoming product, which is code

231
00:12:54.370 --> 00:12:58.210
named rad controls. Prometheus's big
pack, a web controls built

232
00:12:58.210 --> 00:13:01.120
entirely on top of the
Microsoft ASP net Ajax stuff

233
00:13:01.120 --> 00:13:03.040
that you already understand. It's
going to give you a

234
00:13:03.040 --> 00:13:06.160
lot of performance interactivity on
your next project. They mirror

235
00:13:06.160 --> 00:13:09.190
the ASP net Ajax API.
So the development's really straightforward

236
00:13:09.670 --> 00:13:13.180
client scripture's shared loading time
is pretty fast. You set

237
00:13:13.180 --> 00:13:14.830
a couple of properties. You
can even bind a web

238
00:13:14.830 --> 00:13:18.400
services for really efficient operation.
The new rad editor for

239
00:13:18.400 --> 00:13:20.560
ASB at Ajax loads up
to four times faster than

240
00:13:20.560 --> 00:13:23.530
before. And the rad grid
will do thousands of records

241
00:13:23.530 --> 00:13:26.230
in milliseconds. But of course
it's better to try these

242
00:13:26.230 --> 00:13:28.720
things for yourself. So you
can visit <inaudible> dot com

243
00:13:28.720 --> 00:13:32.020
slash ESPN at Ajax and
download a trial. Thanks a

244
00:13:32.020 --> 00:13:33.640
lot for listening and we'll
get right back to the

245
00:13:33.640 --> 00:13:37.440
show. So one of the
things that I found in,

246
00:13:37.440 --> 00:13:40.120
in writing unit tests in
each of these frameworks that

247
00:13:40.120 --> 00:13:42.160
we're talking about here today,
as well as ms test

248
00:13:42.160 --> 00:13:44.680
is I find that things
get considerably more and more

249
00:13:44.680 --> 00:13:46.870
complicated. And I find that
of course, that my test

250
00:13:46.870 --> 00:13:49.360
becomes a program in and
of itself. And I want

251
00:13:49.360 --> 00:13:53.290
to start writing classes and
utilities and things. And I'm

252
00:13:53.290 --> 00:13:56.890
seeing in all three frameworks
that there is more focused

253
00:13:56.890 --> 00:14:00.250
on extensibility on ways to
say, I want the framework

254
00:14:00.250 --> 00:14:03.610
to work like, like this,
what are some of the

255
00:14:03.610 --> 00:14:05.860
mechanisms for sensibility in each
of your, in each of

256
00:14:05.860 --> 00:14:08.670
your frameworks? So we felt
it was very important for

257
00:14:08.670 --> 00:14:11.850
us to be able to
have extensibility even our extension

258
00:14:11.850 --> 00:14:13.980
points. In fact, we even
went to the point of

259
00:14:13.980 --> 00:14:17.610
designing the framework. The minimalism
went all the way down

260
00:14:17.610 --> 00:14:19.890
to, you know, as many
things as we could push

261
00:14:19.890 --> 00:14:23.070
out into extensions. We did
because we wanted to ensure

262
00:14:23.070 --> 00:14:27.270
that our extensibility model was
effective by, you know, 90%

263
00:14:27.270 --> 00:14:29.700
of what you get as
an extension. How much can

264
00:14:29.700 --> 00:14:31.650
I hurt myself? If you
have a unit testing framework,

265
00:14:31.650 --> 00:14:33.990
that's that extensible, it sounds
like it really, really hurt

266
00:14:33.990 --> 00:14:36.330
myself. You could hurt yourself,
but you could also do

267
00:14:36.330 --> 00:14:40.800
yourself. Great, good. So there's
always the potential with, with

268
00:14:40.800 --> 00:14:43.470
any, with any tool that
you can shoot yourself in

269
00:14:43.470 --> 00:14:47.040
the foot, you know, just
don't drop the hammer that

270
00:14:47.040 --> 00:14:52.640
said there, there are certain
conventions perhaps That you should

271
00:14:52.640 --> 00:14:56.450
choose to adhere to. And
in order to avoid shooting

272
00:14:56.450 --> 00:14:58.670
yourself in the foot, what
I'm, what I'm trying to

273
00:14:58.670 --> 00:15:00.920
think about is that something
like road testing seems like

274
00:15:00.920 --> 00:15:03.140
a reasonable extension that everyone
should support. And being able

275
00:15:03.140 --> 00:15:05.760
to pull information from an
external database, whether it be

276
00:15:05.760 --> 00:15:08.540
an Excel or an actual
database or CSV, but what

277
00:15:08.540 --> 00:15:10.970
else could I possibly want
to add to a nomadic

278
00:15:10.970 --> 00:15:12.260
show and possibly want to
add to a unit testing

279
00:15:12.260 --> 00:15:17.130
framework, all sorts of stuff.
So MBA unit takes, takes

280
00:15:17.160 --> 00:15:22.250
a very strong approach towards
extensibility wherein you can refine

281
00:15:22.250 --> 00:15:26.150
and vary the semantics of
tests themselves. So the test

282
00:15:26.150 --> 00:15:28.460
framework gives you, it gives
you all of these built

283
00:15:28.460 --> 00:15:30.350
in tests, but you can
add new stuff to them.

284
00:15:31.000 --> 00:15:33.050
For example, one thing people
have wanted to be able

285
00:15:33.050 --> 00:15:36.650
to do is to use
a rollback attribute, to apply

286
00:15:36.650 --> 00:15:39.920
to the entire test fixture.
And that's something that, that

287
00:15:39.920 --> 00:15:43.090
we are capable of. Another
thing people have wanted, and

288
00:15:43.100 --> 00:15:46.190
it appears the next unit
also is a rich support

289
00:15:46.190 --> 00:15:49.460
for metadata. So we want
to be able to annotate

290
00:15:49.520 --> 00:15:52.610
a test with information that
is used for managing it.

291
00:15:52.850 --> 00:15:55.250
What category does it belong
to? Who wrote it? You

292
00:15:55.250 --> 00:15:58.250
know, is it important? And,
and other such things, we

293
00:15:58.250 --> 00:16:02.960
actually go a step further
and we capture, we capture

294
00:16:02.960 --> 00:16:06.470
the XML documentation associated with
the method we capture the

295
00:16:06.470 --> 00:16:10.610
source code location associated with
the tests and, and a

296
00:16:10.610 --> 00:16:12.830
bunch of other things as
well. Now, Charlie, you had

297
00:16:12.830 --> 00:16:14.990
said before that there were
a number of features that

298
00:16:14.990 --> 00:16:17.960
were being requested by your
community. And you're starting to

299
00:16:17.960 --> 00:16:20.900
think that maybe being the
minimalist, a test framework, isn't,

300
00:16:21.080 --> 00:16:22.640
isn't where it's at. What
kind of things are they

301
00:16:22.640 --> 00:16:25.040
asking for? And that you
may have previously turned down?

302
00:16:26.380 --> 00:16:30.490
Well, a classic example is
the ability to run one's

303
00:16:30.490 --> 00:16:35.290
tests in a particular order.
Me a number of times,

304
00:16:35.410 --> 00:16:38.800
yeah. Four test people who
are into test driven development

305
00:16:38.800 --> 00:16:42.550
that raises the specter that
you're trying to run the

306
00:16:42.550 --> 00:16:45.490
tests in a certain order,
because you're going to create

307
00:16:45.490 --> 00:16:50.770
dependencies among your tests. And
if you're a test driven

308
00:16:50.860 --> 00:16:53.650
unit test or you don't
want to see that happen,

309
00:16:54.430 --> 00:16:58.120
however, people do manage to
come up with use cases

310
00:16:58.120 --> 00:17:01.160
where it's reasonable to run,
to run some tests in,

311
00:17:01.160 --> 00:17:03.940
in a certain order. And
it's hard to turn them

312
00:17:03.940 --> 00:17:07.570
down on that basis. So
what we came up with

313
00:17:07.570 --> 00:17:11.320
for N unit in the
2.4 series was the notion

314
00:17:11.320 --> 00:17:15.580
that the core bits that
allow you to write typical

315
00:17:15.580 --> 00:17:19.300
test driven development tests would
be in an unit. And

316
00:17:19.360 --> 00:17:22.510
those kinds of things like
ordering tests would be an

317
00:17:22.510 --> 00:17:28.660
extensions. And we created an
extensibility model. Now our extensibility

318
00:17:28.660 --> 00:17:31.930
model is a little different
from MV in it because

319
00:17:31.930 --> 00:17:37.810
it's aimed at people who
are actually writing extensions to

320
00:17:37.810 --> 00:17:41.440
be distributed to others. That's
not really aimed at the

321
00:17:41.440 --> 00:17:45.970
testers, the programmers, the users,
themselves writing the extension. So

322
00:17:45.970 --> 00:17:49.560
it's a little, a little
more general and more complicated

323
00:17:49.560 --> 00:17:55.110
to use, Harder to use,
I would say. And so

324
00:17:55.110 --> 00:17:58.650
we had the hope of
many people volunteering to write

325
00:17:58.650 --> 00:18:04.140
extensions for these features. It's
been very slow taking off

326
00:18:05.610 --> 00:18:10.560
that people who might write
an extension for anion it

327
00:18:10.560 --> 00:18:14.370
to do something have typically
turned around and written a

328
00:18:14.370 --> 00:18:20.310
framework instead, and just written
their own test framework. Developers

329
00:18:20.310 --> 00:18:23.360
are kind of perverse that
way. Yeah, that definitely is

330
00:18:23.360 --> 00:18:25.100
very challenging. I know that
I've written a number of

331
00:18:25.100 --> 00:18:27.500
things to extend both end
unit and Nat at my

332
00:18:27.500 --> 00:18:30.710
previous job, but they're just
still there. They became internal

333
00:18:30.710 --> 00:18:33.500
for some reason that last
mile, that moment where I'm

334
00:18:33.500 --> 00:18:35.600
leaning at the tape at
the finish line to go

335
00:18:35.600 --> 00:18:37.640
and put it out into
the world, something prevented me

336
00:18:37.640 --> 00:18:39.770
from doing that. There are
a lot of them like

337
00:18:39.770 --> 00:18:43.340
that out there that are
just waiting around in people's

338
00:18:43.340 --> 00:18:46.400
companies for other people to
use. So we have set

339
00:18:46.400 --> 00:18:51.020
up a place where we
can showcase them. And a

340
00:18:51.040 --> 00:18:52.970
I'm going to try to
take it a bit further

341
00:18:52.970 --> 00:18:57.200
and, and start doing some
examples myself and other people

342
00:18:57.200 --> 00:18:59.480
on the end unit team,
writing them to show what

343
00:18:59.480 --> 00:19:02.450
can be done and to
see if that stirs up

344
00:19:02.810 --> 00:19:08.000
the interest a little more.
Right. Yeah. I just wanted

345
00:19:08.000 --> 00:19:09.380
to add that. The, one
of the things that we

346
00:19:09.380 --> 00:19:11.810
talked about here in the
conference, we had a couple

347
00:19:11.810 --> 00:19:15.380
of sessions about where those,
well, at least two of

348
00:19:15.380 --> 00:19:18.260
the three tools here are
going, what's the future of

349
00:19:18.260 --> 00:19:22.100
any unit, whereas the MBO
need going with Jaleo and

350
00:19:22.160 --> 00:19:24.890
we didn't even talk about
Gallio and what I want

351
00:19:24.890 --> 00:19:27.050
to raise Leo, being a
code name for a new

352
00:19:27.050 --> 00:19:30.320
feature or a new product
within the NBA family. I'll

353
00:19:30.320 --> 00:19:32.070
have to talk about that.
I'll I'll, I'll explain to

354
00:19:32.070 --> 00:19:33.980
you two sentences. And then
Jeff will explain it's a

355
00:19:33.980 --> 00:19:38.120
platform for a test automation
where NBME is just a

356
00:19:38.120 --> 00:19:40.610
framework, which with what you
write the tests. Okay. So

357
00:19:40.760 --> 00:19:43.580
Gallia will run basically and
unit tests as well as

358
00:19:43.910 --> 00:19:46.400
M build it and so
on. Okay. But before that,

359
00:19:46.670 --> 00:19:48.740
one of the things that
I wanted to focus on

360
00:19:48.740 --> 00:19:52.790
is not what small improvements
we've made so far, but

361
00:19:53.210 --> 00:19:56.150
where should we be looking
at to the future? What

362
00:19:56.150 --> 00:19:59.450
are the problems developers who
are using these frameworks trying

363
00:19:59.450 --> 00:20:02.180
to solve or trying to
test some of these, we

364
00:20:02.180 --> 00:20:06.110
have no solution so far
such as parallelism. How do

365
00:20:06.110 --> 00:20:10.190
you write tests that are
running parallel testing, concurrency? How

366
00:20:10.190 --> 00:20:12.500
do you test for deadlocks,
for example? Yeah. Yeah. And

367
00:20:12.500 --> 00:20:14.450
is there a difference between
a unit testing framework and

368
00:20:14.450 --> 00:20:17.420
an integration testing, And how
would you want to write

369
00:20:17.420 --> 00:20:19.820
integration tests with the unit
test framework that you want

370
00:20:19.820 --> 00:20:22.580
to have a different framework
for? Certainly there's a need

371
00:20:22.580 --> 00:20:25.250
because I have shoehorned a
number of integration tests into

372
00:20:25.250 --> 00:20:27.830
various unit testing frameworks and
struggled along the way, And

373
00:20:27.830 --> 00:20:30.320
we've all done this. And
the big question is, should

374
00:20:30.320 --> 00:20:32.870
we continue to do this?
Are we being stuck somewhere?

375
00:20:33.150 --> 00:20:35.870
We were not, we don't
even know it should. Is

376
00:20:35.870 --> 00:20:38.780
there something, is there another
dimension that we are supposed

377
00:20:38.780 --> 00:20:41.180
to be going to, and
that we are stuck on

378
00:20:41.180 --> 00:20:44.120
right now and like maybe
a year from now, we

379
00:20:44.120 --> 00:20:46.730
realize, wow, we were, we
were like two years of

380
00:20:48.700 --> 00:20:50.860
in the past when all
along, we should have done

381
00:20:50.860 --> 00:20:53.490
this little thing and everything
would have changed. Certainly we're

382
00:20:53.490 --> 00:20:55.020
going to have the benefit
of hindsight in a year,

383
00:20:55.020 --> 00:20:56.550
but it sounds like you
guys have a plan for

384
00:20:56.550 --> 00:20:59.370
the future with this project
gallium. Well, let's talk About

385
00:20:59.370 --> 00:21:03.700
Gallia for a moment. So
Gallio is, is a neutral

386
00:21:04.230 --> 00:21:08.460
platform for automation tests. And
what that means is, is

387
00:21:08.460 --> 00:21:11.640
we provide, we provide test
runners, we provide integration with

388
00:21:11.640 --> 00:21:16.080
the ID. We provide integration
with the build tools and

389
00:21:16.090 --> 00:21:19.260
we, and, and so on.
And really what it's intended

390
00:21:19.260 --> 00:21:23.640
to be is this sort
of layer on top of

391
00:21:23.640 --> 00:21:27.900
which you can sit any
framework you like currently we

392
00:21:27.900 --> 00:21:30.900
support and be unit version
three and version two, of

393
00:21:30.900 --> 00:21:34.440
course, we also support end
unit X unit.net. We've got

394
00:21:34.440 --> 00:21:37.680
ms. Test on there as
well, and there will be

395
00:21:37.680 --> 00:21:41.190
others. Presumably you support the
various mocking frameworks like tight

396
00:21:41.190 --> 00:21:43.740
Mach represented here today. Of
course We support type mock.

397
00:21:43.740 --> 00:21:47.550
We have a integration with
Anne cover and PacSun ReSharper

398
00:21:47.550 --> 00:21:49.830
and all sorts of great
tools. The whole tool kit

399
00:21:50.580 --> 00:21:54.300
kit, it's a, it's a
gigantic tool chain. And the

400
00:21:54.300 --> 00:21:56.370
really, the reason for that
is that we want to

401
00:21:56.370 --> 00:22:02.580
promote innovation in two different
spaces, especially. So one is

402
00:22:02.580 --> 00:22:05.550
we want to promote innovation
and the test frameworks, Roy

403
00:22:05.550 --> 00:22:07.710
asks a great question. Should
we be using a unit

404
00:22:07.710 --> 00:22:12.090
test framework to do integration
testing? The reason traditionally that

405
00:22:12.090 --> 00:22:14.640
we use a unit testing
framework to do integration testing

406
00:22:14.640 --> 00:22:16.830
is because the unit testing
framework has all the good

407
00:22:16.830 --> 00:22:20.460
tools, right? We, we have
access to all of these

408
00:22:20.460 --> 00:22:25.290
affordances and integration points with
our ID and with our

409
00:22:25.320 --> 00:22:27.900
build tool chain. And so
on that, it just makes

410
00:22:27.900 --> 00:22:30.660
sense to try to use
that, to do integration testing.

411
00:22:31.020 --> 00:22:33.570
Well, maybe we can do
better. So the idea is

412
00:22:33.570 --> 00:22:36.810
that someone can choose to
try to do something better

413
00:22:37.080 --> 00:22:41.820
and build an integration testing
framework, purpose built with natural

414
00:22:41.820 --> 00:22:45.330
constraints in the system for
integration testing purposes on top

415
00:22:45.330 --> 00:22:48.060
of Galileo. And we provide
all sorts of features in

416
00:22:48.060 --> 00:22:50.130
the platform to help make
that possible. No, it might

417
00:22:50.130 --> 00:22:53.340
understand kind of paraphrasing that
you are lowering the bar

418
00:22:53.340 --> 00:22:55.710
for the entry of new
frameworks that have yet to

419
00:22:55.710 --> 00:22:57.810
be thought of such that
if I want to make

420
00:22:58.110 --> 00:23:01.680
a Hansel tests 2000, I
don't have to do test

421
00:23:01.680 --> 00:23:04.800
runners and visual studio integration
and all these other things

422
00:23:04.830 --> 00:23:10.140
that were formerly be administrivia
really to, to my innovation

423
00:23:10.140 --> 00:23:12.090
that are preventing me from
getting jump-started about my new

424
00:23:12.090 --> 00:23:15.870
idea. That's, that's absolutely the
case. And there's a surprising

425
00:23:15.870 --> 00:23:19.260
amount of effort involved in,
in this infrastructure. Actually, when

426
00:23:19.260 --> 00:23:21.240
you start thinking about how
many tools you have to

427
00:23:21.240 --> 00:23:24.120
integrate with, but we're also
lowering the bar for people

428
00:23:24.120 --> 00:23:27.540
who want to innovate in
the test runner space as

429
00:23:27.540 --> 00:23:31.140
well. You know, the gooey
that we provide is, is

430
00:23:31.140 --> 00:23:34.740
great. It's improving. And, you
know, we have integration with

431
00:23:34.740 --> 00:23:38.280
re ReSharper and other things,
but I'm sure someone out

432
00:23:38.280 --> 00:23:42.210
there has some really fantastic
ideas for tools and affordances

433
00:23:42.210 --> 00:23:44.670
that they would love to
provide that would work across

434
00:23:44.670 --> 00:23:48.320
a wide of different frameworks.
So instead of, you know,

435
00:23:48.350 --> 00:23:51.770
having to roll their own
complete tool chain, they can

436
00:23:51.770 --> 00:23:53.660
build on top of ours,
provide some new kind of

437
00:23:53.660 --> 00:23:55.840
runner as well. A couple
of years ago at my

438
00:23:55.840 --> 00:23:59.410
last company, I used a
Adaptive's Zane bug, which was

439
00:23:59.410 --> 00:24:02.380
a, an Uber test runner,
but he had to go

440
00:24:02.380 --> 00:24:04.600
and figure out how to
test, run all of these

441
00:24:04.600 --> 00:24:07.540
different available frameworks. It sounds
like he would be able

442
00:24:07.540 --> 00:24:09.010
to build that on top
of Galileo and he would

443
00:24:09.010 --> 00:24:12.730
get free unit tests running
for, for all Exactly. And

444
00:24:12.730 --> 00:24:15.370
we want to encourage this.
We've got a few, a

445
00:24:15.370 --> 00:24:17.800
few projects that we're looking
to start actually in this

446
00:24:17.800 --> 00:24:23.440
space, one of which being
tentatively named our communities, which

447
00:24:23.440 --> 00:24:26.200
would build on top of
the Galleo platform to provide

448
00:24:26.500 --> 00:24:31.030
a test case management solution
for automation tests. So basically

449
00:24:31.030 --> 00:24:33.610
a place where all of
your test results are kept

450
00:24:33.640 --> 00:24:39.220
and can then be subjected
to analysis and review. What

451
00:24:39.220 --> 00:24:41.950
are some of the extreme
examples of really cool things

452
00:24:41.950 --> 00:24:43.420
that you've seen in the
testing space? One of the

453
00:24:43.420 --> 00:24:45.550
things that I was particularly
proud of at my last

454
00:24:45.550 --> 00:24:48.670
company was that the guys
decided that rather than a

455
00:24:48.700 --> 00:24:51.040
DLLs and a bin folder
popping out at the other

456
00:24:51.040 --> 00:24:54.850
end of a continuous integration
build that the, the result

457
00:24:54.850 --> 00:24:57.730
of a build a daily
build would be a virtual

458
00:24:57.730 --> 00:25:02.920
machine. And we wrote automation
stuff to create machines, bring

459
00:25:02.920 --> 00:25:07.030
them up, totally bare bones,
ex copy our product and

460
00:25:07.030 --> 00:25:10.000
deploy it into the system
and then run integration tests

461
00:25:10.000 --> 00:25:13.300
on a live running machine,
shut it down, freeze, dry

462
00:25:13.300 --> 00:25:16.150
it like a bug in
Amber and have it prepared

463
00:25:16.150 --> 00:25:18.100
every single day for the
sales guy to pick up

464
00:25:18.130 --> 00:25:22.270
that day's virtual machine. And,
and we were patting ourselves

465
00:25:22.270 --> 00:25:23.890
on the back about that
for quite a number of

466
00:25:23.890 --> 00:25:27.550
months. And still, I think
that's pretty, pretty innovative. Yeah.

467
00:25:27.580 --> 00:25:29.560
You know, this is a
tool that we're actually looking

468
00:25:29.560 --> 00:25:33.850
to build internally at, at
my employer in Genio and

469
00:25:34.010 --> 00:25:36.940
would be extraordinarily usefulness. You
know, if someone wants to

470
00:25:36.940 --> 00:25:39.400
build this thing, go ahead,
let me know. I want

471
00:25:39.400 --> 00:25:41.290
it Just the fact that
you said internal, I know

472
00:25:41.290 --> 00:25:44.230
that at Microsoft there's internal
tools like that as well,

473
00:25:44.410 --> 00:25:46.690
but I don't know if
they're, if they are named

474
00:25:46.690 --> 00:25:48.730
and if they will ever
release is that every team

475
00:25:48.730 --> 00:25:51.850
at every company seems to
have built something, some kind

476
00:25:51.850 --> 00:25:54.940
of Rube Goldberg in miracle
that creates exactly what they

477
00:25:54.940 --> 00:25:57.100
needed, but it never gets
generalized and released into the

478
00:25:57.100 --> 00:25:59.740
wild. And now that you've
told everybody we're going to

479
00:25:59.740 --> 00:26:01.960
have to take you out
back and shoot you. Sorry.

480
00:26:03.490 --> 00:26:05.320
Well, of course, if you're
interested in working in that

481
00:26:05.320 --> 00:26:07.150
stuff, you could come work
with me and maybe we'll

482
00:26:07.150 --> 00:26:11.770
build it together. Exactly. What
about you, Roy? I don't

483
00:26:11.770 --> 00:26:15.940
think it's possible to have
such a generalized thing for,

484
00:26:16.000 --> 00:26:19.660
for companies because each project
is so different and it's

485
00:26:19.660 --> 00:26:23.170
so made out of string
and gum just to make

486
00:26:23.170 --> 00:26:26.170
it work. So it just
makes it impossible to, to

487
00:26:26.170 --> 00:26:28.720
make something as generic because
it would just take too

488
00:26:28.720 --> 00:26:31.840
much time and you'll always
have edge cases and build

489
00:26:31.900 --> 00:26:34.470
a bill process is just
a series of edge cases.

490
00:26:35.110 --> 00:26:36.970
Well, you know, interestingly, I
would have agreed with you

491
00:26:36.970 --> 00:26:38.470
a few years ago, but
so I've seen some really

492
00:26:38.470 --> 00:26:40.720
neat innovation in the EMIS
build space. And it just

493
00:26:40.720 --> 00:26:43.560
an obscene amount of ms.
Bill tasks to automate every

494
00:26:43.980 --> 00:26:45.600
thing out of the sun.
So these are tasks, these

495
00:26:45.600 --> 00:26:48.960
are Lego tasks. And I
use final builder to create,

496
00:26:48.960 --> 00:26:51.810
and I've created my own
Rube Goldberg, Murray and machines,

497
00:26:51.810 --> 00:26:57.210
if you call it whatever.
But the thing is, the

498
00:26:57.210 --> 00:27:00.030
things we've created are created
using these small blocks. So

499
00:27:00.030 --> 00:27:02.970
if you use a good
bill tool with good tasks,

500
00:27:03.270 --> 00:27:05.850
you can build anything, but
you cannot build a full

501
00:27:05.850 --> 00:27:10.740
process that is generalized enough
per project. Brad looks like

502
00:27:10.740 --> 00:27:14.540
you disagree. No, I don't
disagree. Actually. I had something

503
00:27:14.540 --> 00:27:18.470
I wanted to add. And
so Microsoft, you know, has

504
00:27:18.500 --> 00:27:21.170
been in the virtualization space
for awhile, but there's a,

505
00:27:21.170 --> 00:27:24.080
there's an interesting product that
most people don't really think

506
00:27:24.080 --> 00:27:27.080
about called soft grid, which
is done by a team

507
00:27:27.080 --> 00:27:32.060
in Boston and soft grid
actually allows you to create

508
00:27:32.060 --> 00:27:36.530
a semi-private semi virtualized environment
inside of an existing copy

509
00:27:36.530 --> 00:27:39.230
of windows. And I can't
help, but wonder if there's

510
00:27:39.230 --> 00:27:42.200
some integration points here where
we can say, you don't

511
00:27:42.200 --> 00:27:43.850
have to go through the
pain of bringing up an

512
00:27:43.850 --> 00:27:46.370
entire virtual machine. You can
just give this self, give

513
00:27:46.370 --> 00:27:48.050
the code that you want
to test its own little

514
00:27:48.050 --> 00:27:50.630
playground. That's isolated from the
rest of the software on

515
00:27:50.630 --> 00:27:53.480
the machine. It's really interesting
at math, my last company,

516
00:27:53.480 --> 00:27:55.520
and I keep apologize for
invoking my last company so

517
00:27:55.520 --> 00:27:57.470
often, but I've only been
at Microsoft a number of

518
00:27:57.470 --> 00:28:00.350
months and I was there
for seven years, but we

519
00:28:01.010 --> 00:28:05.960
needed to deploy large systems.
And number of times where

520
00:28:05.960 --> 00:28:08.330
N was typically a very
large number and we ended

521
00:28:08.330 --> 00:28:11.930
up taking the running system
as it were the binaries,

522
00:28:11.930 --> 00:28:14.480
the incomplete running system, and
checking the entire tree into

523
00:28:14.480 --> 00:28:19.220
subversion and then telling all
of our drone machines to

524
00:28:19.220 --> 00:28:22.130
simultaneously do a checkout. And
they would bring down a

525
00:28:22.130 --> 00:28:25.430
complete running configured system and
bring it down into the

526
00:28:25.430 --> 00:28:27.860
program files folder. But of
course there were those little

527
00:28:27.860 --> 00:28:31.940
edge cases like, Oh, the
registry that needed to be

528
00:28:31.970 --> 00:28:37.280
handled. And if I had
a virtual machine that wasn't

529
00:28:37.280 --> 00:28:40.250
quite so virtual, just a
virtual space, such that my

530
00:28:40.250 --> 00:28:42.560
application had its own registry
and its own GAC and

531
00:28:42.560 --> 00:28:45.680
all those kinds of things,
the deployment would be easier.

532
00:28:45.680 --> 00:28:47.840
The build process would be
easier. The idea of putting

533
00:28:47.840 --> 00:28:51.530
a roll back attribute on
an integration test for an

534
00:28:51.530 --> 00:28:55.040
entire large system is a
very attractive idea. That's a

535
00:28:55.040 --> 00:28:57.410
pretty cool idea. Someone must
be thinking of it. Isn't

536
00:28:57.410 --> 00:28:59.360
that the way with good
ideas. If you've come up

537
00:28:59.360 --> 00:29:02.000
with it, then it's someone
is currently working on it

538
00:29:02.000 --> 00:29:05.670
somewhere in the world. I
think the whole idea of

539
00:29:05.690 --> 00:29:10.490
that, I think we're, we've
passed that, that, that we're

540
00:29:10.490 --> 00:29:12.740
past a point where we
need to worry about how

541
00:29:12.740 --> 00:29:16.280
we're going to undo stuff
to the system. Because the

542
00:29:16.280 --> 00:29:19.400
bill tools that we have
these days, like final builder,

543
00:29:19.610 --> 00:29:22.340
visual build pro and so
on, they're mature enough and

544
00:29:22.340 --> 00:29:25.160
they have enough tasks. We
can pretty much do anything

545
00:29:25.160 --> 00:29:28.970
and automate it. It would
take a considerable amount of

546
00:29:28.970 --> 00:29:32.540
time to do it on
the first run. For example,

547
00:29:32.540 --> 00:29:36.560
I had a solution with
120 projects. I was consolidating

548
00:29:36.590 --> 00:29:42.070
database changes and merging stuff,
automatically pushing stuff out, doing

549
00:29:42.100 --> 00:29:44.440
Testing and all that stuff
took a month to build

550
00:29:44.440 --> 00:29:48.250
that build process on an
existing project. But once we

551
00:29:48.250 --> 00:29:51.910
had that, everything else was
trivial. So this is just

552
00:29:51.930 --> 00:29:58.290
a bureaucracies, The undo. I
mean, the virtualization was on

553
00:29:58.290 --> 00:30:00.540
a virtual machine, so why
do I care? Well, wow.

554
00:30:00.570 --> 00:30:02.370
But see, I felt that
I felt a little bit

555
00:30:02.370 --> 00:30:04.530
there, like you were trivializing
virtualization, but then you said

556
00:30:04.530 --> 00:30:06.450
that the entire process was
running on a virtual machine

557
00:30:06.660 --> 00:30:10.200
<inaudible> to create a virtual
machine, run it, automate it,

558
00:30:10.450 --> 00:30:12.750
install stuff on it. Right.
So it's there it's mature

559
00:30:12.750 --> 00:30:14.970
enough. So you don't have
to worry about it. If

560
00:30:14.970 --> 00:30:17.250
the tool is there, like
replacing stuff in XML files

561
00:30:17.370 --> 00:30:20.160
done, you know, it's not
that big a deal. I

562
00:30:20.160 --> 00:30:22.440
don't think that's our problem.
These are the problems we

563
00:30:22.440 --> 00:30:24.750
need to worry about these
days. Not the bill process

564
00:30:24.900 --> 00:30:30.420
is to test the tools
well. So infrastructure infrastructure is

565
00:30:30.420 --> 00:30:32.070
great and allows you to
do all sorts of things.

566
00:30:32.280 --> 00:30:34.020
Once it's built, it takes
a whole lot of effort

567
00:30:34.020 --> 00:30:37.170
to get there. So anything
we can do to lessen

568
00:30:37.170 --> 00:30:40.680
the amount of effort required
for people to implement more

569
00:30:40.680 --> 00:30:46.410
advanced infrastructure, such as, you
know, such as generating virtual

570
00:30:46.410 --> 00:30:50.130
machine images, as part of
your continuous integration process is

571
00:30:50.130 --> 00:30:54.060
great. And it will benefit
way more people than, than

572
00:30:54.060 --> 00:30:56.370
if we just say, well,
you know, here are the

573
00:30:56.370 --> 00:30:59.760
20 tools that you can
slap together using scripting glue

574
00:31:00.840 --> 00:31:04.920
and some, you know, simple,
well sort of maybe not

575
00:31:04.920 --> 00:31:07.980
so simple explanations as to
how to do Right. If

576
00:31:07.980 --> 00:31:10.320
MacGyver were doing the process,
how that, how would that

577
00:31:10.320 --> 00:31:14.580
look? Well, it would have
to involve a piece of

578
00:31:14.580 --> 00:31:17.850
chewing gum and a car
battery. Exactly. But sometimes it

579
00:31:17.850 --> 00:31:19.560
feels like we're MacGyver. As
we try to get these

580
00:31:19.560 --> 00:31:21.810
things working, you're saying Roy,
that the tools are the

581
00:31:21.810 --> 00:31:26.160
issue, but I'm not seeing,
I'm always lashing together. 20

582
00:31:26.160 --> 00:31:28.470
different tools from 20 different
places. You don't have to

583
00:31:28.470 --> 00:31:30.540
Scott. That's what I'm saying.
I think we are at

584
00:31:30.540 --> 00:31:33.750
that state where most developers,
the only reason, the only

585
00:31:33.750 --> 00:31:38.250
thing that's stopping people today
from doing a real and

586
00:31:38.250 --> 00:31:41.910
a maintainable build process is
knowing the tools that exist

587
00:31:41.910 --> 00:31:44.790
out there. What is this
Holy grail tool that I'm

588
00:31:44.790 --> 00:31:47.610
completely missing? The point on
that is that you keep

589
00:31:47.610 --> 00:31:49.620
speaking of, I don't think
sinal builder is the answer

590
00:31:49.620 --> 00:31:52.950
to the world's bill. To
me, the answer is TeamCity

591
00:31:52.960 --> 00:31:55.890
plus final builder. Okay. So
that's an interesting point of

592
00:31:55.890 --> 00:31:58.080
view. So you would like
TeamCity and final builder. Do

593
00:31:58.080 --> 00:32:00.060
you guys want to weigh
in on what your, I

594
00:32:00.060 --> 00:32:03.240
mean, it's my, as you're
thinking very declaratively or that

595
00:32:03.360 --> 00:32:06.240
are, the problem is solved
for me. So then for

596
00:32:06.240 --> 00:32:08.160
a lot of other developers
that I've seen, the problem

597
00:32:08.160 --> 00:32:11.670
is solved, but they just
don't realize that because they

598
00:32:11.670 --> 00:32:14.550
keep doing their Nan task
and Duramis built ass under

599
00:32:14.550 --> 00:32:18.080
XML configurations when they can
do it visually and in

600
00:32:18.090 --> 00:32:21.120
a maintainable manner. So I
don't get it. I seriously

601
00:32:21.120 --> 00:32:25.800
don't get it personally. I
really liked my ms build

602
00:32:25.800 --> 00:32:29.130
tasks and how they've all
been slapped together. And, and

603
00:32:29.130 --> 00:32:31.710
actually we've managed to do
so quite maintainable. And you'll

604
00:32:31.710 --> 00:32:34.620
see this in the unit
fee source tree, if you

605
00:32:34.620 --> 00:32:39.000
ever check it out. But
I believe that you won't

606
00:32:39.500 --> 00:32:42.680
a single Holy grail tool.
You will still find domain

607
00:32:42.680 --> 00:32:48.080
specific tools to solve various
problems. So, you know, maybe,

608
00:32:48.080 --> 00:32:51.860
maybe you'll find that using,
using something like final builder

609
00:32:51.860 --> 00:32:54.260
will make it easier for
you to set up your

610
00:32:54.260 --> 00:33:00.140
continuous integration build process or,
or perhaps you already have

611
00:33:00.140 --> 00:33:01.880
built scripts that you use
in the command line and

612
00:33:01.880 --> 00:33:04.610
then cruise control.net. Actually, isn't,
isn't so bad if you

613
00:33:04.610 --> 00:33:07.220
already have those scripts, but
for actually running the tests

614
00:33:07.220 --> 00:33:10.100
and distributing them. I want
that to be Gallio, maybe.

615
00:33:10.790 --> 00:33:13.650
So, so let's try to
bring this around to, we

616
00:33:13.700 --> 00:33:15.980
talked about bill, which was
a little indirect. We talked

617
00:33:15.980 --> 00:33:18.890
about testing. I want my
build test build test to

618
00:33:18.890 --> 00:33:21.950
be kind of the same
thing. And then what's beyond

619
00:33:21.950 --> 00:33:24.980
unit testing. We had spoken
briefly before about the idea

620
00:33:24.980 --> 00:33:27.560
that do I want to
write integration tests with my

621
00:33:27.560 --> 00:33:30.710
unit test tools? Or is
there some other, a yet

622
00:33:30.710 --> 00:33:33.350
to be written tool? Would
you, do you guys advocate

623
00:33:33.350 --> 00:33:38.680
using your tools for the
creation of integration tests? I

624
00:33:38.680 --> 00:33:43.900
have shocked many clients by
telling them not to use

625
00:33:43.900 --> 00:33:48.640
N unit for their integration
and high level tests. You

626
00:33:48.640 --> 00:33:51.610
know, it's not what it
was built for. Your, your

627
00:33:51.610 --> 00:33:55.510
end unit tests are basically
running in a little sandbox

628
00:33:56.800 --> 00:34:01.570
that makes it to the
environment, somewhat different from what's

629
00:34:01.570 --> 00:34:05.320
going to happen when you're
running the full application. And

630
00:34:06.550 --> 00:34:11.440
when you're really doing your
final integration tests, your system

631
00:34:11.440 --> 00:34:14.650
tests, you need to be
doing that in an environment

632
00:34:14.650 --> 00:34:19.960
that's suitable for it. You
also want, I believe since

633
00:34:19.960 --> 00:34:26.080
I, I practice various agile
approaches, I believe that you

634
00:34:26.080 --> 00:34:29.770
want your overall tests to
be in a form that

635
00:34:29.770 --> 00:34:35.980
is digestible by a user
by customer. And I don't

636
00:34:35.980 --> 00:34:39.730
think that C sharp code,
even though it's a lot

637
00:34:39.880 --> 00:34:43.720
easier to read than C
plus plus or COBOL is

638
00:34:43.720 --> 00:34:47.230
really what the user or
the customer wants to see.

639
00:34:47.230 --> 00:34:51.280
So I like to use
frameworks like fit or exactor

640
00:34:51.280 --> 00:34:54.040
or a frame, the frameworks
that reduce it all to

641
00:34:54.280 --> 00:34:58.810
simple statements of what you're
going to do. Interesting. Well,

642
00:34:58.810 --> 00:35:01.600
let's, that's how you actually
used a selenium and water

643
00:35:01.600 --> 00:35:03.610
and Watson at my last
job to do my testing.

644
00:35:03.760 --> 00:35:06.220
I of course ran them
within unit, but ultimately they

645
00:35:06.220 --> 00:35:08.050
were doing the work and
they were working against live

646
00:35:08.050 --> 00:35:10.690
machines. Let's each have one,
one last comment from each

647
00:35:10.690 --> 00:35:13.990
of you, as we finish
up our panel here. I

648
00:35:13.990 --> 00:35:18.430
also think that acceptance style
testing tools like fit fitness

649
00:35:18.760 --> 00:35:21.760
are a direction they're not
there yet. They're there. Some

650
00:35:21.760 --> 00:35:25.540
of them are horribly buggy,
but we need to look

651
00:35:25.540 --> 00:35:27.730
at the future of these
tools. For example, storyteller from

652
00:35:27.730 --> 00:35:31.030
Jeremy Miller that's you can look
at that as the beginning

653
00:35:31.030 --> 00:35:33.010
of the future. What we
would like these tools to

654
00:35:33.010 --> 00:35:36.670
look like, look at Gallio
is maybe the basis on

655
00:35:36.670 --> 00:35:39.120
which future tools maybe in
a year or two will

656
00:35:39.120 --> 00:35:43.800
be built on or based
on in thought, that's it

657
00:35:43.800 --> 00:35:48.660
for me? So I'd actually
like to ask, ask your

658
00:35:48.660 --> 00:35:52.560
readers to help us define
what these tools should be.

659
00:35:53.250 --> 00:35:56.640
In many cases, I know
a lot of people have

660
00:35:56.640 --> 00:36:00.240
built things internally to solve
their problems, and it would

661
00:36:00.240 --> 00:36:03.090
be great to get some
insight into what those things

662
00:36:03.270 --> 00:36:07.510
have been and to share
those ideas more widely and,

663
00:36:07.510 --> 00:36:10.230
and publish them and hopefully
get in touch with, with

664
00:36:10.230 --> 00:36:15.180
us and, you know, contribute
that, that experience, that knowledge

665
00:36:15.210 --> 00:36:18.090
and those needs. I think
that's an excellent call to

666
00:36:18.090 --> 00:36:19.470
action. Jeff, do you have
anything that you want to

667
00:36:19.470 --> 00:36:24.360
add Brett, plus three plus
three? I think all their

668
00:36:24.360 --> 00:36:28.580
points are, are valid and
reasonable. The tools are in

669
00:36:28.590 --> 00:36:33.120
mature, the existing TDD tools
are not appropriate, and we're

670
00:36:33.120 --> 00:36:36.720
going to find out what
people are using. I think

671
00:36:36.720 --> 00:36:39.990
that's going to drive the
innovation. I don't think I'm,

672
00:36:40.470 --> 00:36:42.840
I'm personally a TDD tester.
I don't really think I'm

673
00:36:42.840 --> 00:36:45.000
qualified to say what these
things are. I mean, I

674
00:36:45.010 --> 00:36:47.160
got to ask somebody else,
who's doing this job and

675
00:36:47.160 --> 00:36:49.590
it's not me. Yeah. Well,
I definitely think this is

676
00:36:49.590 --> 00:36:51.780
a very exciting time if
you're not involved in test

677
00:36:52.020 --> 00:36:54.690
development, this is the time
to jump in in, in

678
00:36:54.690 --> 00:36:59.970
any final words, Charlie well,
and unit is a continuing,

679
00:37:00.780 --> 00:37:05.160
it's adding more features. It's
a building it's new, a

680
00:37:05.580 --> 00:37:10.260
very large scope platform, which
could pretty much Matt, you

681
00:37:10.260 --> 00:37:16.140
know, be the same promises
that Jeff has been making,

682
00:37:17.430 --> 00:37:19.620
that, you know, that to
be able to run anything

683
00:37:19.620 --> 00:37:23.940
and, and everything. But I
think the really important thing

684
00:37:23.940 --> 00:37:27.330
is that we, we continue
to have this diversity in

685
00:37:27.330 --> 00:37:31.410
this space because I think
that's where the innovation and

686
00:37:31.410 --> 00:37:37.080
the ideas come from. And,
you know, while we want

687
00:37:37.080 --> 00:37:41.340
everything to be interchangeably usable,
I don't think we want

688
00:37:41.340 --> 00:37:46.200
to create one big thing
that everyone will thereafter use,

689
00:37:47.100 --> 00:37:50.430
even though that's, you know,
one thinks of that sometimes

690
00:37:50.430 --> 00:37:54.270
as the definition of success
in the marketplace. Definitely. I

691
00:37:54.270 --> 00:37:56.010
think it's a really exciting
time to be involved in

692
00:37:56.010 --> 00:37:57.510
testing right now. And I
really want to thank you

693
00:37:57.510 --> 00:38:01.050
guys. Charlie Poole, Roy Osher
of Jeff Brown and Brad Wilson.

694
00:38:01.470 --> 00:38:03.810
This has been another episode
of Hanselminutes and we'll see

695
00:38:03.810 --> 00:38:04.590
you again next week.

