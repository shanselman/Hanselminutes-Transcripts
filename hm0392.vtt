WEBVTT FILE

1
00:00:12.090 --> 00:00:17.100
From hanselminutes.com and it's Hansel
minutes, our weekly discussion with

2
00:00:17.100 --> 00:00:21.570
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:21.570 --> 00:00:28.080
show number three 95. Recorded
live Thursday, October 24th, 2013. This episode

4
00:00:28.080 --> 00:00:30.870
of Hansel minutes is brought
to you by Tellerik offering

5
00:00:30.870 --> 00:00:39.870
the best in developer tools
and support online@telerikdotcomandbyfranklins.net makers of

6
00:00:39.870 --> 00:00:43.350
gesture pack a powerful gesture,
recording and recognition system for

7
00:00:43.350 --> 00:00:50.700
Microsoft connect for windows developers
details@gesturepak.com. In this episode, Scott

8
00:00:50.700 --> 00:00:55.050
talks with John Sheehan from
Runscope about rest Jason and

9
00:00:55.050 --> 00:00:59.720
web services. Hi, this is
Scott Hanselman. This is another

10
00:00:59.720 --> 00:01:02.090
episode of Hansel minutes, and
I'm talking to John, she

11
00:01:02.090 --> 00:01:05.600
hands CEO of Runscope. How's
it going, sir? It is

12
00:01:05.600 --> 00:01:08.660
going great. How are you?
Very good. Very good. I

13
00:01:08.660 --> 00:01:12.470
was at a hackathon recently
over in New York and we

14
00:01:12.470 --> 00:01:15.620
were doing a bunch of
restful web service stuff, and

15
00:01:15.620 --> 00:01:19.160
I think we were talking
to Azure web services and

16
00:01:19.160 --> 00:01:21.140
it was really interesting to
see kind of the state

17
00:01:21.230 --> 00:01:24.530
of web service APIs, because
the hackathon was sponsored by

18
00:01:24.530 --> 00:01:28.220
a bunch of different API
providers, which is the first

19
00:01:28.220 --> 00:01:29.780
time I'd been to one
where it was like that.

20
00:01:29.780 --> 00:01:33.140
And it was like, if
you use this API in

21
00:01:33.140 --> 00:01:35.720
our hackathon, you'll you could
win this prize. And you

22
00:01:35.720 --> 00:01:38.690
know, so people would end
up using the API, even

23
00:01:38.690 --> 00:01:41.270
though it didn't make any
sense to their product, just

24
00:01:41.270 --> 00:01:43.970
to optimize for winning the
gift. At the end of

25
00:01:43.970 --> 00:01:48.830
the thing. And the state
of API APIs was really

26
00:01:48.830 --> 00:01:51.560
dodgy. I mean, some of
them were like, like the

27
00:01:51.560 --> 00:01:54.050
barrier to entry. Like this
is a thing from my

28
00:01:54.050 --> 00:01:56.030
perspective, if I've got an
API and I want people

29
00:01:56.030 --> 00:01:58.730
to use it from at
least from a demo perspective,

30
00:01:59.030 --> 00:02:01.880
let me use curl or
let me use a browser

31
00:02:01.880 --> 00:02:05.000
and get some data immediately.
So I feel like I've

32
00:02:05.000 --> 00:02:09.590
achieved something, but we had
one API that required a

33
00:02:09.590 --> 00:02:15.050
whole OAuth handshake just to
get hello world working. If

34
00:02:15.050 --> 00:02:18.740
you seen that happening in
the third party API space,

35
00:02:19.250 --> 00:02:21.290
I mean, this is really
common. So one of the

36
00:02:21.290 --> 00:02:23.480
things that I spent a
couple of years working at

37
00:02:23.480 --> 00:02:25.250
Twilio, if people are unfamiliar,
and one of the things

38
00:02:25.250 --> 00:02:27.860
that we really, really harped
on was that somebody should

39
00:02:27.860 --> 00:02:29.840
be able to get up
and running and send their

40
00:02:29.840 --> 00:02:32.930
first text message within five
minutes of hitting the website,

41
00:02:32.930 --> 00:02:35.810
right? Like you should have
a cut and paste example.

42
00:02:36.140 --> 00:02:37.850
That's should be the first
thing that you run into

43
00:02:37.850 --> 00:02:40.250
on the website is something
that you can just drop

44
00:02:40.250 --> 00:02:43.040
in Ron and prove to
you that it works, right.

45
00:02:43.040 --> 00:02:44.840
It doesn't have to do
anything specific. All it needs

46
00:02:44.840 --> 00:02:47.360
to do is within five
minutes, prove that you can

47
00:02:47.360 --> 00:02:48.920
put your keys in the
right place and that you

48
00:02:48.920 --> 00:02:50.900
can get an SMS generate
within a first couple of

49
00:02:50.900 --> 00:02:53.300
minutes. Yeah, I think that's
something that really made Twilio.

50
00:02:53.300 --> 00:02:55.160
What it is is that
sort of attention to that

51
00:02:55.160 --> 00:02:59.240
first run experience. Now, there
are far more API providers

52
00:02:59.260 --> 00:03:01.480
out there and infrastructure API
providers out there. And I

53
00:03:01.480 --> 00:03:03.610
don't think a lot of
them have put in the

54
00:03:03.640 --> 00:03:05.860
effort, the same amount of
effort on getting, helping people

55
00:03:05.860 --> 00:03:08.680
get up and running as
quickly as like Twilio and

56
00:03:08.680 --> 00:03:11.560
Stripe and SendGrid. And some
of these, you know, better

57
00:03:11.560 --> 00:03:14.830
ones are. So, you know,
that, that whole hackathon model,

58
00:03:14.830 --> 00:03:17.590
that was actually one of
the places where we would

59
00:03:17.590 --> 00:03:19.540
take our product and try
to see how fast can

60
00:03:19.540 --> 00:03:21.580
people get started. And if
they couldn't get started quickly,

61
00:03:21.580 --> 00:03:23.380
then we knew we had
to, you know, areas to

62
00:03:23.380 --> 00:03:25.590
improve on. Yeah, I think
that's definitely the thing that

63
00:03:25.590 --> 00:03:28.950
you want to optimize for
people got really frustrated and

64
00:03:28.950 --> 00:03:31.410
only one of the hundred
people in the room at

65
00:03:31.410 --> 00:03:36.000
this hackathon achieved anything with
the OAuth one, because not

66
00:03:36.000 --> 00:03:37.860
only they, they felt like
they had to go and

67
00:03:37.860 --> 00:03:40.440
learn OAuth and trying to
get that to work like

68
00:03:40.440 --> 00:03:43.950
at the curl command line
level was just so frustrating,

69
00:03:43.950 --> 00:03:45.510
but they desperately needed it.
I think it was like

70
00:03:45.510 --> 00:03:47.880
recipe data. It was food,
nutrition data. It was something

71
00:03:47.880 --> 00:03:51.090
that we, our app won't
work without this data. Right.

72
00:03:52.080 --> 00:03:54.420
And like stuff like even
mapping API, some of them

73
00:03:54.420 --> 00:04:00.570
required so much yak shaving
just to get hello world

74
00:04:00.570 --> 00:04:03.840
working, that it was so
discouraging for the average newbie.

75
00:04:04.140 --> 00:04:06.750
Yeah. And you'll see, smart
API providers do something like

76
00:04:07.080 --> 00:04:10.830
automatically generate you in OAuth
key for your account when

77
00:04:10.830 --> 00:04:12.750
you sign up. Right. So
like Twitter actually was the

78
00:04:12.750 --> 00:04:14.640
first one that I saw
do this with OAuth. One

79
00:04:14.640 --> 00:04:17.040
is when you went into
the Twitter dev console, after

80
00:04:17.040 --> 00:04:20.010
you created an application, it
would generate a set of

81
00:04:20.010 --> 00:04:22.740
keys for you, for you,
your personal account to be

82
00:04:22.740 --> 00:04:25.740
already authorized and against that
application. Well, now all their

83
00:04:25.740 --> 00:04:27.750
examples can just drop those
keys in and you're up

84
00:04:27.750 --> 00:04:28.830
and running and they don't
have to tell you, you

85
00:04:28.830 --> 00:04:30.330
don't have to worry about
the auth flow. You can

86
00:04:30.870 --> 00:04:33.900
defer that until later when
you actually need a third

87
00:04:33.900 --> 00:04:37.170
party or another user to
come along. But again, not

88
00:04:37.170 --> 00:04:39.600
a lot of API providers
are doing this, get hub.

89
00:04:39.630 --> 00:04:41.730
Does it a couple other
really good ones do it?

90
00:04:41.880 --> 00:04:44.790
We actually wrote a tool
because of this, because we

91
00:04:44.790 --> 00:04:48.930
were trying to work with
APIs that didn't auto-generate keys

92
00:04:48.930 --> 00:04:50.730
for you. We wrote an
auth tool where you can

93
00:04:50.730 --> 00:04:53.070
just put in your app
credentials and then it automatically

94
00:04:53.070 --> 00:04:54.930
handles the app flow for
you and then kicks out

95
00:04:54.930 --> 00:04:57.210
the key at the end.
So you can skip the

96
00:04:57.210 --> 00:04:59.940
whole process of setting up
the web web end points

97
00:04:59.940 --> 00:05:02.100
in order to get an
auth key. And, and where,

98
00:05:02.130 --> 00:05:07.050
where do I get that
tool? And that's it, Runscope.com/oauth_tool.

99
00:05:07.140 --> 00:05:09.420
And it works for both
OAuth two and author. That's

100
00:05:09.420 --> 00:05:11.280
cool. Is that link somewhere
from the homepage? That seems

101
00:05:11.280 --> 00:05:14.790
like a very useful thing
to know about Is actually

102
00:05:14.820 --> 00:05:18.360
sadly, not even properly linked
in our diet. Okay. So

103
00:05:18.360 --> 00:05:20.520
you have a secret tool.
So this is not a

104
00:05:20.520 --> 00:05:23.250
tool for the community. This
is John wrote something and

105
00:05:23.250 --> 00:05:25.290
hit it. Well, that was
actually the first tool we

106
00:05:25.290 --> 00:05:27.300
released when we launched the
company earlier this year. One

107
00:05:27.300 --> 00:05:29.520
of the things, again, we
were testing out the product,

108
00:05:29.520 --> 00:05:31.170
we kept running into this
Oh, I've problem. So we

109
00:05:31.170 --> 00:05:33.810
built that it is linked
from within the product. So

110
00:05:33.810 --> 00:05:35.460
if you sign up and
you go to the editor

111
00:05:35.460 --> 00:05:37.710
and you need a key
to make a request, then

112
00:05:37.710 --> 00:05:41.460
you get the, See that's
useful. This is something I

113
00:05:41.460 --> 00:05:42.960
would have liked to have
known a couple of weeks

114
00:05:42.960 --> 00:05:46.080
ago. Cause man, we were
suffering. And the other thing

115
00:05:46.080 --> 00:05:48.840
that we were having trouble
with was that, you know,

116
00:05:49.470 --> 00:05:51.660
in the, in the, in
the soap world kind of

117
00:05:51.660 --> 00:05:56.130
before a lot of the
current folks were maybe when

118
00:05:56.130 --> 00:05:58.700
they were 10 years old,
like years ago there was

119
00:05:58.700 --> 00:06:01.250
soap. And then there was
always this argument between, is

120
00:06:01.250 --> 00:06:04.820
this a web service or
is this just POCs P

121
00:06:04.820 --> 00:06:08.240
O X, plain old XML.
And everyone would say we

122
00:06:08.240 --> 00:06:10.910
built a web services API
and they ended up just,

123
00:06:11.030 --> 00:06:13.430
you do a get, and
I'll give you some structured

124
00:06:13.430 --> 00:06:17.000
text. I used to call
it angle bracket, delimited, text.

125
00:06:17.300 --> 00:06:19.040
Yeah. Yeah. You know what
I mean? Like it looks

126
00:06:19.040 --> 00:06:23.270
like XML, but as soon
as we switched to posting,

127
00:06:23.270 --> 00:06:25.790
though, man curl broke down.
I mean, it was just,

128
00:06:25.790 --> 00:06:28.310
people were really struggling to
put together any kind of

129
00:06:28.310 --> 00:06:32.860
a payload, right? Anytime like
soap, you know, it uses

130
00:06:32.860 --> 00:06:35.470
request bodies to specify what
data you want to get

131
00:06:35.470 --> 00:06:37.390
back. And when you should
start trying to do request

132
00:06:37.390 --> 00:06:39.550
bodies in curl, you either
got a pipe in a

133
00:06:39.550 --> 00:06:43.120
file or you've got to
send in a long string

134
00:06:43.150 --> 00:06:46.990
that if the receiving host
is like new line sensitive,

135
00:06:46.990 --> 00:06:50.020
which is actually does happen,
it's not entirely crazy that,

136
00:06:50.290 --> 00:06:52.720
you know, some receivers treat
XML like texts instead of

137
00:06:52.720 --> 00:06:56.200
like XML, but curl gets
really hairy when you're dealing

138
00:06:56.200 --> 00:07:00.610
with request bodies. For sure.
Yeah, absolutely. And encoding single

139
00:07:00.610 --> 00:07:04.570
quotes versus double quotes, new
lines. It was really a

140
00:07:04.570 --> 00:07:08.650
challenge. So it was great
though in like visual studio

141
00:07:08.650 --> 00:07:10.750
or eclipse, right. Where you
had like this, you know,

142
00:07:11.230 --> 00:07:14.590
enter a service URL, get
a API client library, and

143
00:07:14.590 --> 00:07:16.510
now you're just calling it
like any other code that

144
00:07:16.510 --> 00:07:19.480
was on your system. Right.
And I think there's sort

145
00:07:19.480 --> 00:07:22.990
of that set the sort
of expectations for Java and.net

146
00:07:22.990 --> 00:07:25.570
developers about how web services
should work. Right. I should

147
00:07:25.570 --> 00:07:28.750
get this nice rich API
that is like, feels like

148
00:07:28.750 --> 00:07:30.700
the rest of my code.
And it's just a method

149
00:07:30.700 --> 00:07:32.680
that I'm calling that happens
to go over the wire,

150
00:07:32.680 --> 00:07:35.470
but that's really just an
implementation detail. It could be

151
00:07:35.500 --> 00:07:39.760
code that is running within
my own application. As the

152
00:07:39.970 --> 00:07:43.000
more popular, recent as the
more recent web services have

153
00:07:43.000 --> 00:07:45.790
gotten more popular over the
last five years, the simple,

154
00:07:46.390 --> 00:07:50.590
you know, so-called restful or
Jason over HTTP, a simpler

155
00:07:50.590 --> 00:07:53.620
format, simpler structures where all
you really need is a

156
00:07:53.620 --> 00:07:56.920
simple HB client. Sort of
that that big, heavy soap

157
00:07:56.920 --> 00:07:59.260
style has really gone out
of style, but this is

158
00:07:59.530 --> 00:08:02.590
allowed people, more people it's
made it more accessible for

159
00:08:02.590 --> 00:08:05.680
more people to make more
web service calls. And that's

160
00:08:05.680 --> 00:08:09.790
been actually compounded by the
increase in mobile app development.

161
00:08:09.790 --> 00:08:11.950
The more mobile apps there
are, the more, every mobile

162
00:08:11.950 --> 00:08:14.770
app that is interesting is
talking to some backend service,

163
00:08:14.800 --> 00:08:17.440
typically over some form of
API. And a lot of

164
00:08:17.440 --> 00:08:20.080
people actually don't call those
APIs, even though that's technically

165
00:08:20.080 --> 00:08:23.020
how they're implemented. But back
in services sort of really

166
00:08:23.020 --> 00:08:24.850
started to blossom the last
couple of years as we

167
00:08:24.850 --> 00:08:27.130
needed to power our mobile
apps with, with, you know,

168
00:08:27.130 --> 00:08:30.190
server data. The interesting thing
from that is that a

169
00:08:30.190 --> 00:08:32.830
lot of people took those
mobile service backends. They're like,

170
00:08:32.830 --> 00:08:35.740
well, we're already providing data
to our apps. Why don't

171
00:08:35.740 --> 00:08:37.570
we just use that in
this other thing? Or why

172
00:08:37.570 --> 00:08:39.310
don't we use that to
power our website now? And

173
00:08:39.310 --> 00:08:41.950
so the web services have
really become the core of,

174
00:08:42.280 --> 00:08:44.860
of applications now and really
the heartbeat or even the

175
00:08:44.860 --> 00:08:48.400
nervous system in a way
where all the interesting conversations

176
00:08:48.400 --> 00:08:51.280
are happening in over API
calls. And that's not just

177
00:08:51.280 --> 00:08:53.620
a mobile service anymore. A
big companies are starting to

178
00:08:53.620 --> 00:08:56.460
do more and more of
this in a, in a

179
00:08:56.730 --> 00:09:00.450
less SOA way, but more
service driven. So like, you

180
00:09:00.450 --> 00:09:03.120
know, so it was very
heavy, you know, the sort

181
00:09:03.120 --> 00:09:05.340
of well-defined and he had
the service discovery and these

182
00:09:05.340 --> 00:09:09.090
heavy protocols, and you might
have big monolith apps that

183
00:09:09.090 --> 00:09:11.880
still expose web points. But
now you're getting companies that

184
00:09:11.880 --> 00:09:13.920
are doing a lot of
smaller services and a lot

185
00:09:13.920 --> 00:09:16.320
of little services and then
composing apps out of those

186
00:09:16.320 --> 00:09:21.350
smaller services internally. Yeah. I
have found that in large

187
00:09:21.350 --> 00:09:24.500
industry, in large enterprises that
I still see a lot

188
00:09:24.530 --> 00:09:27.620
of Ws star and I
spent many, many years doing

189
00:09:27.620 --> 00:09:30.320
that. And I think it
makes sense when you have,

190
00:09:30.560 --> 00:09:33.020
you know, the complexities, but
also the security of your

191
00:09:33.020 --> 00:09:36.230
Ws security. When you have
like a mainframe talking to

192
00:09:36.230 --> 00:09:39.530
some backend service that, you
know, we're moving money here.

193
00:09:39.860 --> 00:09:41.360
I don't think I would
want to move money even

194
00:09:41.360 --> 00:09:45.410
over SSL and Jason, there's
going to be some certificates

195
00:09:45.410 --> 00:09:48.350
and some serious note, you
know, some serious negotiations for

196
00:09:48.350 --> 00:09:51.560
lack of another word in
the backend. But when we,

197
00:09:51.590 --> 00:09:54.620
when we tried to present
web services to the public,

198
00:09:54.770 --> 00:09:56.870
that's when I think SOA
fell apart, you know, as

199
00:09:56.870 --> 00:09:59.540
the way it makes sense
when this internal organization wants

200
00:09:59.540 --> 00:10:01.370
to talk to that one,
or I want to talk

201
00:10:01.370 --> 00:10:04.700
to the fed from my
bank, but then we said,

202
00:10:04.730 --> 00:10:07.130
Oh, well, that's great. I'll
just give that same API

203
00:10:07.130 --> 00:10:10.550
and wisdom to John. Who's
one guy in a garage

204
00:10:10.580 --> 00:10:13.310
and suddenly it's like, Whoa,
okay. I need, I need

205
00:10:13.310 --> 00:10:15.440
a certain certificate. I need
a hitters and I need

206
00:10:15.470 --> 00:10:17.960
<inaudible>. And then that's where
I think soap fell apart.

207
00:10:17.960 --> 00:10:22.700
So I like the idea
of formalized difficult to version

208
00:10:22.700 --> 00:10:26.240
strongly type services, way, way,
way in the back office

209
00:10:26.810 --> 00:10:30.440
and lightweight dynamic languages and
dynamic payloads in the front

210
00:10:30.440 --> 00:10:33.260
end. Yeah. I mean, there's
definitely a different set of

211
00:10:33.260 --> 00:10:36.830
requirements for, you know, really
sensitive data. That's only moving

212
00:10:36.830 --> 00:10:39.350
internally, right? Like you need
a more explicit, you know,

213
00:10:39.350 --> 00:10:41.960
security contractor client, you might
use client certificates. You're not

214
00:10:41.960 --> 00:10:45.020
going to probably pass an
API key in a URL.

215
00:10:45.410 --> 00:10:47.150
You know, when you're talking
back and forth within your

216
00:10:47.150 --> 00:10:50.870
company with sensitive financial data,
you can do money over

217
00:10:50.870 --> 00:10:52.760
SSL. And Jason though, I
mean like Stripe will let

218
00:10:52.760 --> 00:10:55.550
you do. I mean, PayPal,
any of these companies will

219
00:10:55.550 --> 00:10:59.120
let you take payment information
and you're essentially sending either

220
00:10:59.120 --> 00:11:01.340
a credit card token or
a credit card number over

221
00:11:01.340 --> 00:11:04.490
SSL on Jason to them.
And they're completely PCI compliant

222
00:11:04.490 --> 00:11:07.610
and there's no problems there.
They don't recommend that. They

223
00:11:07.610 --> 00:11:09.590
give you lots of ways
to not do that, but

224
00:11:09.590 --> 00:11:13.490
they will accept that it
is possible, right. But the

225
00:11:13.520 --> 00:11:16.280
smoothest paths that, you know,
the pit of success is,

226
00:11:16.310 --> 00:11:20.120
is by collecting that credit
card on the client side

227
00:11:20.120 --> 00:11:22.580
and then, you know, just
sending the token back. And

228
00:11:22.580 --> 00:11:24.410
so like when we, when
we take a payment, we

229
00:11:24.410 --> 00:11:26.780
never see someone's credit card
number. We only see a

230
00:11:26.780 --> 00:11:29.120
token. So it, but it
is possible to do that

231
00:11:29.120 --> 00:11:31.700
securely over us. Right? Well,
when I was doing banking,

232
00:11:31.700 --> 00:11:34.970
we did similar things. We
would never actually send the

233
00:11:35.060 --> 00:11:37.190
CR the account number. When
we met with, let's say,

234
00:11:37.190 --> 00:11:39.560
I'm doing a money transfer.
I would never send the

235
00:11:39.560 --> 00:11:42.380
account number over the wire.
I would send an index

236
00:11:42.890 --> 00:11:46.160
cause the server side knows
that the business checking is

237
00:11:46.160 --> 00:11:49.490
the third account. So I
would say from account index

238
00:11:49.490 --> 00:11:51.800
three to account index five,
and then the transfer is

239
00:11:51.800 --> 00:11:55.870
completely relative some knowledge that
the backend found. So even

240
00:11:55.870 --> 00:11:59.290
if I intercepted that on
the wire, I would only

241
00:11:59.290 --> 00:12:05.710
have a vague idea of
what was happening. There's an

242
00:12:05.710 --> 00:12:08.800
article that you pointed me
to at the ACM, the

243
00:12:08.800 --> 00:12:12.640
association for computing machinery that
said that basically we are

244
00:12:12.640 --> 00:12:15.730
all building distributed systems now,
which is funny because I

245
00:12:15.730 --> 00:12:18.940
remember 15, 20 years ago
learning about like there were

246
00:12:18.940 --> 00:12:22.180
distributed systems programmers, you know,
and then there's the rest

247
00:12:22.180 --> 00:12:25.360
of us. And then we
blinked and everyone has to

248
00:12:25.360 --> 00:12:28.720
think about queue length and
asynchrony and API APIs and

249
00:12:28.720 --> 00:12:31.630
all the things. Yeah. All
these things that are, that,

250
00:12:31.630 --> 00:12:34.750
that used to be really
hard, like distributed computing was

251
00:12:34.750 --> 00:12:39.340
a, is a practice. When
did this happen? And this

252
00:12:39.340 --> 00:12:41.400
is, I think, ties in
really big again with that,

253
00:12:41.420 --> 00:12:45.930
that mobile mobile services push
that that happened. So that's

254
00:12:45.930 --> 00:12:48.690
really what the tipping point
was for service consumption, I

255
00:12:48.690 --> 00:12:53.070
think is when, like the
number of APIs just grew

256
00:12:53.280 --> 00:12:56.460
exponentially. Once we started producing
them for mobile services and

257
00:12:56.460 --> 00:12:59.040
you have these, you know,
essentially dumb clients, right. That

258
00:12:59.040 --> 00:13:01.500
have maybe some logic over
the data, but for the

259
00:13:01.500 --> 00:13:03.510
most part are shuttling data
back and forth through a

260
00:13:03.510 --> 00:13:07.140
server in order to even
be functional that need to

261
00:13:07.140 --> 00:13:11.840
understand like, you know, network
reliability or, you know, you

262
00:13:11.840 --> 00:13:13.950
know, consistency of data when
you're sending it in from

263
00:13:13.950 --> 00:13:16.500
all of these, you know,
sometimes disconnected clients, right. And,

264
00:13:16.770 --> 00:13:19.200
you know, sync issues and
that sort of stuff. And

265
00:13:19.320 --> 00:13:21.420
you know, this is something
that previously again, fell into

266
00:13:21.420 --> 00:13:25.620
that distributed systems, you know,
knowledge area and regular Joe

267
00:13:25.620 --> 00:13:28.650
Schmo, web developer like me.
Like I still am pretty

268
00:13:28.650 --> 00:13:31.530
sure. I don't even know
what all three, you know,

269
00:13:31.530 --> 00:13:34.890
terms of cap of, you
know, CAAP stand for consistency

270
00:13:34.890 --> 00:13:38.580
availability and, you know, popcorn
for as long as, as

271
00:13:38.580 --> 00:13:45.420
far as I'm concerned. And
yeah. So, you know, the

272
00:13:45.420 --> 00:13:48.090
services have come down to
a new class of developer,

273
00:13:48.090 --> 00:13:50.100
right. Or you have reached
a new class of developer

274
00:13:50.100 --> 00:13:52.770
that weren't previously working on
these types of problems. Yeah.

275
00:13:52.770 --> 00:13:57.360
It's like, it's become, hello.
World is no longer console

276
00:13:57.360 --> 00:14:03.330
dot Rightline. It's a HTTP
get quiet. Yes. I successfully

277
00:14:03.330 --> 00:14:05.730
spoke to that backend system.
Now I've got my hello

278
00:14:05.730 --> 00:14:09.420
world. Now. Like the concept
has been proven is always

279
00:14:09.420 --> 00:14:13.560
me talking to one or
more distributed systems. I think

280
00:14:13.560 --> 00:14:15.720
though, that people put these
things together. Like I'm writing

281
00:14:15.720 --> 00:14:18.990
a mobile app right now,
myself. I'm making Jason calls,

282
00:14:19.260 --> 00:14:23.340
I'm pulling RSS, I'm downloading
MP3s. One of the things

283
00:14:23.340 --> 00:14:25.680
that I'm not putting in
though to be Frank is

284
00:14:26.010 --> 00:14:29.340
very good testing. I'm not
really thinking about reliability at

285
00:14:29.340 --> 00:14:32.550
all. I mean, 99% of
the time these HTTP gets

286
00:14:32.580 --> 00:14:35.970
just work. So service reliability.
I have no retries in

287
00:14:35.970 --> 00:14:39.180
my code. I haven't thought
about perf monitoring or dependency

288
00:14:39.180 --> 00:14:42.570
management. Right. And like, this
is pretty common. So I

289
00:14:42.570 --> 00:14:44.370
worked at if this, then
that for a while, and

290
00:14:44.400 --> 00:14:48.180
they have 65 API integrations,
they do like more than

291
00:14:48.180 --> 00:14:50.580
anybody that I knew of
at the time. It turns

292
00:14:50.580 --> 00:14:52.160
out actually after I left,
I went and talked to

293
00:14:52.160 --> 00:14:53.810
other customers. They were like,
Oh yeah, we have way

294
00:14:53.810 --> 00:14:56.060
more than that internally, you
know, within our big company

295
00:14:56.060 --> 00:14:58.730
or whatever. But you know,
65 felt like a lot

296
00:14:58.730 --> 00:15:01.580
of integrations at the time.
And so we would start

297
00:15:01.580 --> 00:15:04.640
to see problems with, you
know, service, reliability, right? Like

298
00:15:04.640 --> 00:15:06.770
how do we know that
Twitter is up when we

299
00:15:06.770 --> 00:15:08.030
need to make a call
to it when we got

300
00:15:08.030 --> 00:15:11.990
to execute somebody's recipe. And
so that would for a

301
00:15:11.990 --> 00:15:13.730
long time, that was a
problem for Twitter. Twitter was

302
00:15:13.730 --> 00:15:16.430
down a lot. And so
these recipes would basically fail

303
00:15:16.430 --> 00:15:20.060
and people would get unexpected
results. We actually didn't even

304
00:15:20.060 --> 00:15:22.040
know in a lot of
cases, how many calls were

305
00:15:22.040 --> 00:15:24.500
failing? Like we didn't have
a good system for, for

306
00:15:24.560 --> 00:15:26.960
monitoring that, like we were
just dumping raw logs into

307
00:15:26.960 --> 00:15:29.930
like really rough graphing utilities,
but there wasn't really a

308
00:15:29.930 --> 00:15:32.690
good way to know how
our application was performing based

309
00:15:32.690 --> 00:15:35.180
on all the service calls
it was making. And the

310
00:15:35.180 --> 00:15:37.880
total application experience is the
sum of all of these

311
00:15:37.880 --> 00:15:41.630
service calls across the entire
application that makes it what

312
00:15:41.630 --> 00:15:44.660
it is. The other thing
was is that once something

313
00:15:44.660 --> 00:15:46.970
went wrong, we had to
write more code than we

314
00:15:46.970 --> 00:15:50.240
had to actually handle the
success logic for the error

315
00:15:50.240 --> 00:15:53.540
logic. We spent tons of
time writing error handling and

316
00:15:53.540 --> 00:15:57.380
retry code in like, did
that call happen? You know,

317
00:15:57.410 --> 00:15:59.570
15 minutes ago when it
was on a different machine.

318
00:15:59.570 --> 00:16:01.280
And now that we're retrying
it in a different queue

319
00:16:01.280 --> 00:16:03.350
workers picked up, do we
actually have a result for

320
00:16:03.350 --> 00:16:05.960
that? That's still processing, or
if you get things like

321
00:16:05.990 --> 00:16:09.170
really long network timeout. So
Twitter there used to be

322
00:16:09.170 --> 00:16:11.690
this problem where once a
week at a specific time,

323
00:16:12.590 --> 00:16:16.370
the Twitter API would start
responding very slowly. It wouldn't

324
00:16:16.370 --> 00:16:18.890
break. So apps would still,
everything would still work. It

325
00:16:18.890 --> 00:16:22.430
would just take 15 seconds
before for any given API

326
00:16:22.430 --> 00:16:24.380
called a respondent. Now, when
you're used to like sub

327
00:16:24.420 --> 00:16:27.080
couple hundred milliseconds, going to
15 seconds is a huge

328
00:16:27.080 --> 00:16:29.180
jump and it would lock
up workers and it would

329
00:16:29.180 --> 00:16:31.130
tie up tons of systems.
And like, we had to

330
00:16:31.130 --> 00:16:33.920
write a lot of code
just to handle that one

331
00:16:33.920 --> 00:16:36.200
specific case. And it turned
out to just like, sort

332
00:16:36.200 --> 00:16:39.470
of resolve itself on Twitter's
end, but spending a lot

333
00:16:39.470 --> 00:16:41.690
of time, like even trying
to figure out, like, what

334
00:16:41.690 --> 00:16:44.330
was the pattern there? Or,
you know, seeing what happened

335
00:16:44.360 --> 00:16:47.840
in a traditional like performance
management tool, you'd have, you

336
00:16:47.840 --> 00:16:49.730
know, a tool where you
would pull up a dashboard

337
00:16:49.730 --> 00:16:51.680
and be like, Oh, okay.
We can see every Friday

338
00:16:51.680 --> 00:16:54.650
night at 11:00 PM, we're getting
slowness on the server on

339
00:16:54.650 --> 00:16:57.260
this component within our application,
we must have a race

340
00:16:57.260 --> 00:17:00.160
condition. That's time-based or something
like that. Yeah. That's a

341
00:17:00.160 --> 00:17:01.810
really interesting point that you
make there. I'm going to

342
00:17:01.900 --> 00:17:03.400
stop you. Cause I want
to dig a little bit

343
00:17:03.400 --> 00:17:05.980
more into that. You, you
brought up the idea that,

344
00:17:06.310 --> 00:17:08.530
Hey, it was really fast
before and then suddenly it

345
00:17:08.530 --> 00:17:10.810
became slow. I think that
happens when you treat a

346
00:17:10.810 --> 00:17:13.330
web service like a database.
If you're getting spoiled by

347
00:17:13.330 --> 00:17:16.300
100 millisecond response times, you're
like, Oh yeah, it's a

348
00:17:16.300 --> 00:17:19.600
database returns. Jason just happens
to be thousand miles away.

349
00:17:20.320 --> 00:17:22.810
Right. And more and more
we're, we're not, we're building

350
00:17:22.810 --> 00:17:25.600
apps that don't touch databases.
So like mobile apps, if

351
00:17:25.600 --> 00:17:27.310
they're talking over the web
service, they may only have

352
00:17:27.310 --> 00:17:29.410
a local database as a
cash, but not necessarily as

353
00:17:29.410 --> 00:17:32.590
their primary data store in
our product. You know, I

354
00:17:32.590 --> 00:17:35.680
work on the front end
web interface that everybody interacts

355
00:17:35.680 --> 00:17:39.550
with. And I haven't touched
a database since, I don't

356
00:17:39.550 --> 00:17:42.070
know, January when we first
started building the product. Everything

357
00:17:42.070 --> 00:17:44.470
that I do on that
front end is completely abstracted

358
00:17:44.470 --> 00:17:46.930
away via services. Now we
use three different or four

359
00:17:46.930 --> 00:17:50.850
different types of databases based
on the right type of

360
00:17:50.850 --> 00:17:52.740
data store for the right
type of data in different

361
00:17:52.740 --> 00:17:55.050
parts of the product. But
I don't know a thing

362
00:17:55.050 --> 00:17:58.140
about Postgres. And so I
don't even honestly know if

363
00:17:58.140 --> 00:18:00.840
I could make a call
to PostgreSQL in Python, but

364
00:18:00.870 --> 00:18:02.040
if you want to ask
me how to make an

365
00:18:02.040 --> 00:18:04.770
HTB call and like properly
cash it and retry it

366
00:18:04.770 --> 00:18:06.450
and do all that stuff,
I have that experience now

367
00:18:06.450 --> 00:18:09.570
in that knowledge, because that's
really where, you know, the

368
00:18:09.570 --> 00:18:12.090
highest level of programmers need
to spend their energy now

369
00:18:12.090 --> 00:18:14.890
instead of working or dealing
with database issues and understanding,

370
00:18:15.000 --> 00:18:20.060
you know, database optimization. Well,
I like the rise of,

371
00:18:20.660 --> 00:18:24.920
of databases like parse or
Azure mobile services where I

372
00:18:24.920 --> 00:18:28.160
can run a whole app
store, session, data, user information,

373
00:18:28.160 --> 00:18:30.140
log into Facebook and do
all the kinds of things

374
00:18:30.140 --> 00:18:31.640
I want to do. And
I know that there's a

375
00:18:31.640 --> 00:18:34.400
database out there somewhere, but
database as a service is

376
00:18:34.400 --> 00:18:36.590
cool. I mean, it's just
like, yeah, give me that

377
00:18:36.590 --> 00:18:38.780
name, value pair for this
guy. You know, I don't

378
00:18:38.780 --> 00:18:41.120
really care how you do
it, select star from whatever,

379
00:18:41.450 --> 00:18:44.030
just get it to me.
Right. And yeah, go ahead.

380
00:18:44.630 --> 00:18:46.490
I mean, those are really
great services and I think

381
00:18:46.490 --> 00:18:49.130
those really illustrate the point
of like, you may build

382
00:18:49.130 --> 00:18:51.110
an app now and never
ever, ever see a database

383
00:18:51.110 --> 00:18:54.140
and only see HB calls.
And before you had tools

384
00:18:54.140 --> 00:18:56.750
that would tell you, Hey,
we could profile our apps,

385
00:18:56.750 --> 00:18:58.700
calls to our database and
see where they were slower,

386
00:18:58.700 --> 00:19:01.970
see slow queries or, you
know, see problems before they

387
00:19:01.970 --> 00:19:04.400
really became a problem. And
with web services, we've sort

388
00:19:04.400 --> 00:19:07.100
of lost a lot of
that visibility. I think the

389
00:19:07.100 --> 00:19:10.970
tools have really started lagging
behind, you know, the way

390
00:19:11.000 --> 00:19:14.450
developers are actually building applications
these days, which is why

391
00:19:14.450 --> 00:19:16.250
we started this company. I
mean, we wanted to build

392
00:19:16.250 --> 00:19:20.450
those tools. We wanted to
basically restore visibility into people's

393
00:19:20.450 --> 00:19:23.780
applications from the app developers
perspective and give them the

394
00:19:23.780 --> 00:19:26.960
tools to be able to
spot problems before they became

395
00:19:26.960 --> 00:19:31.130
bigger issues or became, you
know, yeah, that's really it

396
00:19:31.130 --> 00:19:34.400
before they became bigger issues.
Restoring visibility is the bottom

397
00:19:34.400 --> 00:19:37.220
line there. Let's talk about
that. Restoring visibility. And I

398
00:19:37.220 --> 00:19:39.530
was poking around on your
blog and I found a

399
00:19:39.530 --> 00:19:42.520
number of kind of little
community projects that, that, that

400
00:19:42.530 --> 00:19:45.740
Runscope has made. And one
of them is, is particularly

401
00:19:45.740 --> 00:19:49.130
interesting, I think is called
request bin. It's request to

402
00:19:49.130 --> 00:19:52.160
be dot I N talk
to me about this. Yeah.

403
00:19:52.160 --> 00:19:55.070
So request bin was a
project by a guy named

404
00:19:55.070 --> 00:19:58.250
Jeff Lindsey. He goes by program
online. We worked together at

405
00:19:58.250 --> 00:20:00.680
Twilio and he he's the
guy that coined the term

406
00:20:00.680 --> 00:20:04.820
web hooks. Like he really
like formalized that really nebulous

407
00:20:04.820 --> 00:20:08.690
idea into a slightly less
nebulous idea and gave it

408
00:20:08.690 --> 00:20:10.880
a term, which I think
is part of why they

409
00:20:10.880 --> 00:20:13.610
became successful as they, that
term really caught on with

410
00:20:13.610 --> 00:20:15.920
web hooks and what a
web book is. It's essentially

411
00:20:15.920 --> 00:20:19.310
a simple HB based push
notification. So when something happens

412
00:20:19.310 --> 00:20:22.130
on a remote service, make
a request to a URL

413
00:20:22.130 --> 00:20:24.050
that I've told you about
to let me know about

414
00:20:24.050 --> 00:20:26.570
it. So some examples of
this, like Stripe uses this,

415
00:20:26.570 --> 00:20:29.750
anytime something, a charges process,
they will post you back

416
00:20:29.750 --> 00:20:32.300
to your URL and say,
Hey, this customer was charged

417
00:20:32.300 --> 00:20:34.400
this amount of money. Here's
the fee we took from

418
00:20:34.400 --> 00:20:36.740
it. It was successful. It
failed, you can handle different

419
00:20:36.740 --> 00:20:40.370
scenarios. A Twilio uses this
for like incoming text messages

420
00:20:40.370 --> 00:20:43.010
or incoming phone numbers. When
an incoming text message comes

421
00:20:43.010 --> 00:20:45.230
into your number, they will
post your URL and let

422
00:20:45.230 --> 00:20:46.940
you know that something has
happened so that you can

423
00:20:47.350 --> 00:20:51.190
that. So after he coined
the term web hooks and

424
00:20:51.190 --> 00:20:53.920
started sort of evangelizing this
idea, he made a bunch

425
00:20:53.920 --> 00:20:56.350
of small utilities for debugging
them. So one of the

426
00:20:56.350 --> 00:20:59.680
problems with web hooks is
that in most cases, when

427
00:20:59.680 --> 00:21:02.740
you build a public web
end point, you're, you're providing

428
00:21:02.740 --> 00:21:05.230
that to another, to a
user or a human. So

429
00:21:05.230 --> 00:21:07.120
when you go to a
website and you fill in

430
00:21:07.120 --> 00:21:09.910
a form, if there's an
error, you can visually identify

431
00:21:09.910 --> 00:21:11.830
that there was some problem
with that and adjust the

432
00:21:11.830 --> 00:21:15.190
data and send it again.
Well, since Webhooks are machine

433
00:21:15.190 --> 00:21:18.700
to machine, there's really no
verification that the data was

434
00:21:18.700 --> 00:21:21.430
received properly or correctly, or
even what the data was

435
00:21:21.430 --> 00:21:22.750
when it, when it came
in. So you have to

436
00:21:22.750 --> 00:21:24.940
add a lot of logging
to that. And so Jeff

437
00:21:24.940 --> 00:21:27.640
came up with this idea
of basically I called originally

438
00:21:27.640 --> 00:21:30.610
postponed and then later request
bin, which was a URL

439
00:21:30.610 --> 00:21:32.800
that would show you every
request that was made to

440
00:21:32.800 --> 00:21:35.320
it, just the raw request,
input data that was made

441
00:21:35.320 --> 00:21:37.150
to that URL. So when
you're building web books and

442
00:21:37.150 --> 00:21:39.010
you want to know what
the remote provider is sending

443
00:21:39.010 --> 00:21:41.980
you, you can just send
them that URL. They can

444
00:21:41.980 --> 00:21:44.560
make the web book requests,
and then it shows up

445
00:21:44.560 --> 00:21:46.590
on that. So let me
see if I can understand

446
00:21:46.590 --> 00:21:49.440
that. So paraphrasing, I go
to request band and I

447
00:21:49.440 --> 00:21:51.180
say, make a bin. And
then it gives me a

448
00:21:51.180 --> 00:21:54.000
little unique. It says, request
band slash and then some

449
00:21:54.000 --> 00:21:57.570
number. Yep. That's my private
thing. It's almost like Pastebin

450
00:21:57.750 --> 00:22:01.140
or a, just like a
GitHub just, and anything I

451
00:22:01.140 --> 00:22:03.390
post there, you're going to
record for me kind of

452
00:22:03.390 --> 00:22:05.610
like, it's like TiVo, you're
going to let me see

453
00:22:05.610 --> 00:22:07.530
it. I can see it
was three seconds. I could

454
00:22:07.530 --> 00:22:09.540
just pee. I just posted
right now, as we're talking

455
00:22:09.540 --> 00:22:11.970
here, I can see my
forum post parameters. I see

456
00:22:11.970 --> 00:22:15.300
my headers. So I could
go over to get hub

457
00:22:15.300 --> 00:22:18.450
or Azure or anyone that
makes web hooks and force

458
00:22:18.450 --> 00:22:21.420
them to post to me.
They don't care. They're just

459
00:22:21.420 --> 00:22:23.820
posting to an end point,
right. And this is my

460
00:22:23.820 --> 00:22:27.360
way of like injecting myself
into the process. Like, let

461
00:22:27.360 --> 00:22:29.790
me see the data they're
sending me. So I know

462
00:22:29.790 --> 00:22:33.390
how to handle that. When
I receive it, you'll see

463
00:22:33.390 --> 00:22:35.730
sites like GitHub will let
you generate. They, they use,

464
00:22:35.760 --> 00:22:37.530
they call them service hooks
on GitHub and they'll let

465
00:22:37.530 --> 00:22:40.140
you generate like a fake
service hook, right. So you

466
00:22:40.140 --> 00:22:42.480
can put a URL and
you can go test service

467
00:22:42.480 --> 00:22:45.030
hook. And so I've used
that many times to see

468
00:22:45.030 --> 00:22:46.410
what get hub was going
to send me after a

469
00:22:46.410 --> 00:22:50.370
commit. And I wrote my
app and, you know, tested

470
00:22:50.370 --> 00:22:52.560
against that sample data that
they sent. And then I

471
00:22:52.560 --> 00:22:55.140
go switch it to, you
know, my live code and

472
00:22:55.170 --> 00:22:57.030
actually commit code and they
send it and my app

473
00:22:57.030 --> 00:22:59.610
breaks. Right. And it's like,
okay. So there's some difference

474
00:22:59.610 --> 00:23:01.830
between like the test data.
They sent me and like

475
00:23:01.860 --> 00:23:04.620
actual, real production data. So
what I really want to

476
00:23:04.620 --> 00:23:07.800
be able to do is
collect real production data from

477
00:23:07.800 --> 00:23:10.200
my real commits as they
happen. And not this test

478
00:23:10.410 --> 00:23:11.930
test data is so that
I can make sure that

479
00:23:12.120 --> 00:23:14.310
I'm looking for the right
attributes or that I'm not,

480
00:23:14.950 --> 00:23:17.070
you know, parsing it on
an all value or whatever

481
00:23:17.070 --> 00:23:19.290
else. And so request pen
is nice, cause you can

482
00:23:19.290 --> 00:23:21.810
just drop it in and
then watch the actual traffic

483
00:23:21.810 --> 00:23:24.360
that's coming through on your
web books. So usually I

484
00:23:24.360 --> 00:23:27.600
find myself on the, when
I'm doing local development, messing

485
00:23:27.600 --> 00:23:31.530
around with things like post
man for Chrome or using

486
00:23:31.530 --> 00:23:34.470
Fiddler. And, you know, Fiddler
is a really great tool

487
00:23:34.470 --> 00:23:37.380
from a, from a fat
client perspective or chubby client.

488
00:23:37.380 --> 00:23:38.880
As I like to say,
you know, the, my only

489
00:23:38.880 --> 00:23:41.640
problem with Fiddler with all
due respect to my friend,

490
00:23:41.640 --> 00:23:45.060
Eric Lawrence, is it's ugly. Like
a Fiddler would just be

491
00:23:45.080 --> 00:23:47.300
attractive. I would spend more
time there and I'm actually

492
00:23:47.300 --> 00:23:49.340
spending more time in post
men just cause it's pretty,

493
00:23:49.340 --> 00:23:53.390
it's very bootstrapy. But with
both of those, I struggle

494
00:23:53.400 --> 00:23:57.590
to get in between the,
the two hooks, the two

495
00:23:57.590 --> 00:24:00.230
for the two services that
are talking years and years

496
00:24:00.230 --> 00:24:03.170
ago, there was a thing
called soap scope. That was

497
00:24:03.170 --> 00:24:05.450
a proxy. And I would
just set it up as

498
00:24:05.450 --> 00:24:07.430
a local proxy. And then
suddenly I would be able

499
00:24:07.430 --> 00:24:11.060
to see what's going on.
How does Runscope compare? Is

500
00:24:11.060 --> 00:24:15.350
it, is it a capturing
tool? Like, like Wireshark? So

501
00:24:15.740 --> 00:24:19.000
a Postmates Is great product.
And so is Fiddler like

502
00:24:19.000 --> 00:24:23.080
we're, we'd like both of
those things. The thing about

503
00:24:23.110 --> 00:24:26.140
that's different about Runscope is
that we don't, and like

504
00:24:26.140 --> 00:24:28.540
the Fiddler case, you start
have to change like system

505
00:24:28.540 --> 00:24:31.030
proxy sometimes, or it does
a lot of mucking with

506
00:24:31.030 --> 00:24:33.130
system networking stuff, right? It
tries to like get in

507
00:24:33.130 --> 00:24:35.500
there at a really low
level and then, you know,

508
00:24:35.500 --> 00:24:38.050
watch everything that happens. And
what we wanted to do

509
00:24:38.050 --> 00:24:41.260
is we wanted to be
as low touch as possible,

510
00:24:41.260 --> 00:24:46.450
like as minimal configuration. And
don't make you change unrelated

511
00:24:46.450 --> 00:24:48.520
things in order to capture
your traffic, we wanted to

512
00:24:48.550 --> 00:24:50.410
make the minimal amount of
changes and be able to,

513
00:24:50.410 --> 00:24:52.960
in order to see your
traffic. So we came up

514
00:24:52.960 --> 00:24:56.230
with this idea of like
a Runscope URL, where you

515
00:24:56.230 --> 00:24:58.510
would take the API that
you wanted to call, and

516
00:24:58.510 --> 00:25:01.090
you would basically take that
original host name and stuff

517
00:25:01.090 --> 00:25:03.370
it into a sub domain.
You kind of encoded into

518
00:25:03.370 --> 00:25:06.970
the sub domain. So instead
of like api.twilio.com, you'd make

519
00:25:06.970 --> 00:25:10.060
the call to API dash
phileo, dashcam dash, your secret

520
00:25:10.060 --> 00:25:13.570
key.runscope.net. And then what happens
is, is that when you

521
00:25:13.570 --> 00:25:16.180
make that request to us,
it hits us. We can

522
00:25:16.180 --> 00:25:19.240
see the request and response
data. We know what original

523
00:25:19.240 --> 00:25:21.670
API you wanted to hit
because you've encoded it into

524
00:25:21.670 --> 00:25:23.410
the sub domain there. And
so then we pass it

525
00:25:23.410 --> 00:25:26.530
onto that original host name
that you've sent us and

526
00:25:26.530 --> 00:25:29.020
then capture the response and
then send it back to

527
00:25:29.020 --> 00:25:33.580
you. Okay. So rather than
me going to food.com and

528
00:25:33.640 --> 00:25:40.870
posting my data, I say
Fu dashcam. Yup. Dash <inaudible>

529
00:25:41.500 --> 00:25:46.540
dot Runscope I'm tunneling encoded
into the URL itself. So

530
00:25:46.630 --> 00:25:49.360
it's like a proxy without
any of the overhead of

531
00:25:49.360 --> 00:25:52.150
proxies. Like there is no
actual HTTP proxy involved. I'm

532
00:25:52.150 --> 00:25:56.050
just letting you be an
intermediary. Right? I mean, the

533
00:25:56.050 --> 00:25:58.180
technical thing is it is
as a reverse proxy, right?

534
00:25:58.180 --> 00:26:00.130
You're hitting one host name
that gets distributed to another

535
00:26:00.130 --> 00:26:02.290
one. And then it comes
back. We don't like calling

536
00:26:02.290 --> 00:26:05.830
it a proxy because proxy
has a very specific term

537
00:26:06.220 --> 00:26:09.880
receptor, right. And interceptor. But
this method allows us to

538
00:26:09.880 --> 00:26:11.380
do a lot of interesting
things. One, it allows us

539
00:26:11.380 --> 00:26:15.250
to capture SSL traffic without
any issue, right? Because your

540
00:26:15.250 --> 00:26:17.260
SSL, when you do this
terminates against us, we can

541
00:26:17.260 --> 00:26:19.210
decrypt it. We can see
it, we send it again,

542
00:26:19.870 --> 00:26:23.110
upstream over SSL and back
down. So it's, it's SSL

543
00:26:23.110 --> 00:26:24.970
end to end, but we
take that snapshot in the

544
00:26:24.970 --> 00:26:28.060
middle, which is trickier with
proxies. So like if you

545
00:26:28.060 --> 00:26:30.910
use like a, you know,
a traditional proxy, you know,

546
00:26:30.910 --> 00:26:33.970
you have to install a
system level certificate, and it

547
00:26:33.970 --> 00:26:36.400
makes it very hard to
work with SSL traffic. So

548
00:26:37.260 --> 00:26:39.580
As long as I'm not
validating the certificate as being

549
00:26:39.580 --> 00:26:43.090
my own, so even necessarily
will work fine. So you

550
00:26:43.290 --> 00:26:47.100
validate it because It terminates
against us. So, because as

551
00:26:47.100 --> 00:26:49.620
far as your client knows,
you only are ever making

552
00:26:49.620 --> 00:26:52.800
the request to our servers.
And we have a valid

553
00:26:52.800 --> 00:26:57.060
wildcard certificate on runscope.net. So
anything that is a sub

554
00:26:57.060 --> 00:27:00.720
domain of that will is
a valid certificate. And then

555
00:27:00.720 --> 00:27:03.090
on the upstream, we validate
the certificate to make sure

556
00:27:03.090 --> 00:27:05.610
that it's, it's also valid.
So we're not like allowing

557
00:27:05.610 --> 00:27:10.650
you to like make valid
SSL requests against invalid certificates.

558
00:27:10.800 --> 00:27:12.480
You can turn that off.
If for some reason you're

559
00:27:12.480 --> 00:27:14.520
using an API, like a
self sign certificate or whatever,

560
00:27:14.520 --> 00:27:18.750
but by default we validate
SSL certificates upstream. So that's

561
00:27:18.750 --> 00:27:20.940
one really big benefit too.
We don't need to know

562
00:27:20.940 --> 00:27:23.910
anything about the API ahead
of time. Right? So some

563
00:27:23.910 --> 00:27:27.300
other debugging services make you
sort of register URLs so

564
00:27:27.300 --> 00:27:28.890
that you say, okay, when
I want to call it

565
00:27:28.920 --> 00:27:31.950
api.github.com, you go to their
website, you type that in

566
00:27:31.950 --> 00:27:33.960
and it gives you back
like a new URL. And

567
00:27:33.960 --> 00:27:36.240
then you use that instead.
And so now you can

568
00:27:36.240 --> 00:27:39.150
only make requests to, you
know, to URLs that you've

569
00:27:39.180 --> 00:27:41.130
sort of preregistered and we
wanted to make it so

570
00:27:41.130 --> 00:27:43.560
that you didn't have to
come back to the website

571
00:27:43.560 --> 00:27:45.330
where you wanted to use
a new API. If you

572
00:27:45.330 --> 00:27:47.760
know how to make the
special host names, the Runscope

573
00:27:47.760 --> 00:27:50.370
URLs, then you can attach
your bucket key as we

574
00:27:50.370 --> 00:27:54.390
call them to any sub
domain or any domain that

575
00:27:54.390 --> 00:27:57.370
you've stuffed into that sub
domain, and then continue on

576
00:27:57.370 --> 00:27:59.010
and your way and make
those calls. And they'll show

577
00:27:59.010 --> 00:28:01.620
up in your web dashboard
without having to preregister anything.

578
00:28:02.210 --> 00:28:04.640
So this might seem like
a lot of concept cause

579
00:28:04.640 --> 00:28:06.950
we're talking very fast, but
I think it gets back

580
00:28:06.950 --> 00:28:09.800
to the, what I think
the root issue that a

581
00:28:09.800 --> 00:28:12.020
lot of programmers kind of
missed out on. I don't

582
00:28:12.020 --> 00:28:14.720
think that that younger programmers
and I don't mean age.

583
00:28:14.750 --> 00:28:16.820
I mean, experience if you've
been programming the last five

584
00:28:16.820 --> 00:28:19.220
years or so. I think
that the assumption that, you

585
00:28:19.220 --> 00:28:22.490
know, what's going on underneath
HTTP is pretty much handled.

586
00:28:22.490 --> 00:28:26.330
Everyone uses curl or sniffs
headers, but I've found that

587
00:28:26.330 --> 00:28:28.250
people who have been in
the industry 10, 15 years,

588
00:28:28.250 --> 00:28:31.550
sometimes 20 years have taken
that for granted a lot.

589
00:28:31.580 --> 00:28:33.920
And a lot of times
I'll get an email from

590
00:28:33.920 --> 00:28:35.780
someone that says, you know,
I don't really know what's

591
00:28:35.780 --> 00:28:38.600
going on. I posted to
this end point and that

592
00:28:38.630 --> 00:28:41.210
didn't work. That's like, well,
you know, the internet is

593
00:28:41.210 --> 00:28:44.330
not a black box. You
can like, I, I always

594
00:28:44.330 --> 00:28:48.650
like when I'm teaching classes
to Telnet, to cnn.com. Yeah,

595
00:28:48.650 --> 00:28:51.260
yeah. Like forced them to
browse the web from Telnet.

596
00:28:51.470 --> 00:28:53.960
Like that's how my father
did it and that's how

597
00:28:53.960 --> 00:28:56.000
I'm going to do it.
Right. And that's probably the

598
00:28:56.000 --> 00:28:58.340
best way to teach somebody
how HP works. Right. Is

599
00:28:58.340 --> 00:29:01.310
like open that socket connection
on port 80 and be

600
00:29:01.310 --> 00:29:02.780
like, all right, I'm going
to type a version number.

601
00:29:02.780 --> 00:29:04.340
And now I'm going to
say, Hey, I want to

602
00:29:04.350 --> 00:29:06.710
open this URL and like
to see the text come

603
00:29:06.720 --> 00:29:08.630
streaming back. I think that's
a really big light bulb

604
00:29:08.630 --> 00:29:12.290
moment for a lot of
people. And I think what

605
00:29:12.290 --> 00:29:15.110
you were saying about, you
know, more experienced programmers sort

606
00:29:15.110 --> 00:29:17.390
of taking some of this
for granted is that, you

607
00:29:17.390 --> 00:29:21.170
know, we've been really heavy
on abstraction until recently. I

608
00:29:21.170 --> 00:29:23.660
think there's been sort of
a pushback on abstraction recently,

609
00:29:23.660 --> 00:29:26.780
right? Like you see it
in the asp.net area, right.

610
00:29:26.810 --> 00:29:29.090
Where we went to MVC,
which was less abstraction than

611
00:29:29.090 --> 00:29:31.130
the web API, which was
even lower level or the

612
00:29:31.130 --> 00:29:33.770
popularity of frameworks like node,
which were like, you know,

613
00:29:33.770 --> 00:29:36.110
we were doing rails the
five years before that, which

614
00:29:36.110 --> 00:29:39.380
was this really heavy abstraction,
like really opinionated abstraction now,

615
00:29:39.830 --> 00:29:41.530
you know? No, it is
like, all right, you have

616
00:29:41.530 --> 00:29:44.520
a server at return. Right.
Here's a socket, good luck

617
00:29:44.550 --> 00:29:47.430
and a callback. Right. Right.
Exactly. Yeah. I think we've

618
00:29:47.430 --> 00:29:51.510
seen some pushback on that.
And so trying to detach

619
00:29:51.510 --> 00:29:56.790
people's mental weight of like
these abstractions and say, Hey,

620
00:29:56.790 --> 00:29:58.440
you know, let's look at
this at a lower level.

621
00:29:58.440 --> 00:30:00.960
And like, let's get visibility
at our lower lower level

622
00:30:00.960 --> 00:30:03.750
is something that's really gotten
more popular in the, The

623
00:30:03.750 --> 00:30:06.720
past couple of years. Yeah,
definitely. I think it's unapologetically

624
00:30:06.720 --> 00:30:08.850
low level is what I
like to say. And I,

625
00:30:08.860 --> 00:30:11.790
I liked, I liked that
aspect of, of Runscope, you

626
00:30:11.790 --> 00:30:14.010
know, it has that kind
of lightweight feeling of like

627
00:30:14.010 --> 00:30:18.720
a Pastebin or a adjust,
but you're, you're basically watching

628
00:30:18.720 --> 00:30:22.020
these calls happen and you
can share them with friends,

629
00:30:22.020 --> 00:30:24.570
give them unique URLs, comment
on them. So it's, it's

630
00:30:24.570 --> 00:30:26.640
almost the kind of thing
you'd want integrated into GitHub.

631
00:30:26.670 --> 00:30:29.420
If you were doing GitHub
for web services. Right. W

632
00:30:29.420 --> 00:30:30.810
what we wanted to do
is we wanted to make

633
00:30:30.810 --> 00:30:33.420
them as tangible as anything
else that you already are

634
00:30:33.420 --> 00:30:35.730
working with. Right? So if
you are working in visual

635
00:30:35.730 --> 00:30:38.490
studio and you set a
break point and you pull

636
00:30:38.490 --> 00:30:40.290
up an object, you can
like navigate all the way

637
00:30:40.290 --> 00:30:42.510
through that object hierarchy. And
you can see any piece

638
00:30:42.510 --> 00:30:44.940
of data. You can, you
can actually change data in

639
00:30:44.940 --> 00:30:48.480
flight, right? Why shouldn't we
be able to, Right. We

640
00:30:48.480 --> 00:30:51.750
kind of take that for
granted when it's code that

641
00:30:51.810 --> 00:30:53.640
is running on our, within
our apps and on our

642
00:30:53.640 --> 00:30:56.490
own machines. And so we
wanted to bring that same

643
00:30:56.490 --> 00:30:59.430
level of tangibility to HTP
requests since they are essentially

644
00:30:59.430 --> 00:31:01.800
method calls that happened to
go over a wire. Yeah,

645
00:31:01.830 --> 00:31:04.890
definitely. Definitely. And I'm looking
up here, it looks like

646
00:31:05.310 --> 00:31:09.210
pricing. People can have 2,500
requests a month and three

647
00:31:09.210 --> 00:31:11.760
buckets for free, and that
doesn't look like you want

648
00:31:11.760 --> 00:31:13.410
a credit card or anything
to start with. So there's

649
00:31:13.410 --> 00:31:16.230
no reason not to give
it a try. Yeah. Everyone

650
00:31:16.230 --> 00:31:18.390
starts on like the full
team plan for 30 days,

651
00:31:18.390 --> 00:31:21.570
no credit card that like,
lets you exercise the entire

652
00:31:21.570 --> 00:31:23.760
product without restriction and make
sure to see if it's

653
00:31:23.760 --> 00:31:25.110
gonna work for you. If
you don't do anything, you

654
00:31:25.110 --> 00:31:28.470
automatically get downgraded to free.
Again, there's no obligations. And

655
00:31:28.590 --> 00:31:30.030
if you want to cancel,
you can email me and

656
00:31:30.030 --> 00:31:33.960
I'll cancel your account anytime,
but we've tried to make

657
00:31:33.960 --> 00:31:36.510
it again. The barriers really
load it, like help you

658
00:31:36.510 --> 00:31:38.370
get in, solve your problem
and get on your way.

659
00:31:38.370 --> 00:31:40.830
And you don't use Runscope
everyday. I'm okay with that.

660
00:31:40.830 --> 00:31:43.110
What we really want to
do is like help you

661
00:31:43.140 --> 00:31:46.470
solve those one off problems.
Like those really nagging HB

662
00:31:46.470 --> 00:31:48.870
calls that like you couldn't
solve any other way. Like

663
00:31:48.870 --> 00:31:50.730
we had a customer email
and yesterday it was like,

664
00:31:50.970 --> 00:31:52.710
you know, we've been spinning
for a week on this.

665
00:31:52.710 --> 00:31:54.630
I'm going to, before we
found Runscope and we solved

666
00:31:54.630 --> 00:31:56.550
it in three minutes. Right.
And it's like, if you

667
00:31:56.550 --> 00:31:59.280
can't see it, you can't
fix it. So that's really

668
00:31:59.280 --> 00:32:00.900
what we want to do
is let you see stuff

669
00:32:00.900 --> 00:32:04.140
that you couldn't see before.
Last question, how would I

670
00:32:04.140 --> 00:32:06.810
do this with local hosts?
What's what's my, I've got

671
00:32:06.810 --> 00:32:10.920
a local website talking to
a local web service and

672
00:32:10.920 --> 00:32:15.120
I want Runscope to watch.
So That is more tricky,

673
00:32:15.120 --> 00:32:18.090
right? Since we can't obviously
proxy local requests, we can't

674
00:32:18.090 --> 00:32:20.940
see those as well. We
do have one solution that

675
00:32:20.940 --> 00:32:22.980
helps you sort of take
your local host and expose

676
00:32:22.980 --> 00:32:25.470
it publicly. And then along
the way, capture all the

677
00:32:25.470 --> 00:32:29.280
requests to it. So this
is another Jeff Lindsay program project

678
00:32:29.280 --> 00:32:31.170
that you started out a
couple of years ago, he

679
00:32:31.170 --> 00:32:34.320
created something called local tunnel,
which essentially temporarily opens up

680
00:32:34.950 --> 00:32:38.100
your local host on a
public URL and then lets

681
00:32:38.100 --> 00:32:40.310
you make requests to it
externally. So it does all

682
00:32:40.310 --> 00:32:43.880
the tunneling and reverse proxy
to make that possible through

683
00:32:43.880 --> 00:32:47.060
any firewall. This has become
sort of a cottage industry.

684
00:32:47.060 --> 00:32:49.940
Actually there's a bunch of
them. One really good. One

685
00:32:49.940 --> 00:32:53.600
is called N grok and
G R O k.com, which

686
00:32:53.600 --> 00:32:57.170
was made by another former
Twilio engineer, which is essentially

687
00:32:57.170 --> 00:33:00.590
the same thing. It's introspective
local tunnels. We've built this

688
00:33:00.590 --> 00:33:02.510
into the product as well.
So we have, we call

689
00:33:02.510 --> 00:33:05.750
ours passageway. And what it
does is it, you go

690
00:33:05.750 --> 00:33:07.550
into the command line and
you say open up port,

691
00:33:07.610 --> 00:33:10.130
you know, 8,000 and then
it gives you a URL.

692
00:33:10.160 --> 00:33:12.560
Now, every request you make
that URL is forwarded to

693
00:33:12.560 --> 00:33:15.320
your local machine, but is
actually captured along the way.

694
00:33:15.320 --> 00:33:19.880
So this is this solves
part of the local host

695
00:33:19.880 --> 00:33:22.330
problem that doesn't solve for
like I'm running the, an

696
00:33:22.330 --> 00:33:25.070
app in a simulator and
I'm testing my local service.

697
00:33:26.240 --> 00:33:27.800
You know, I don't want
to see what's happening on

698
00:33:27.800 --> 00:33:30.020
my machine. You would have
to go out on the

699
00:33:30.020 --> 00:33:32.360
public internet at some point
for us to be able

700
00:33:32.360 --> 00:33:35.180
to see it down the
road. We'll we'll, we'll address

701
00:33:35.180 --> 00:33:38.000
this problem more sufficiently and
come up with ways so

702
00:33:38.000 --> 00:33:41.060
that you can see your
local traffic in Runscope without

703
00:33:41.060 --> 00:33:43.040
having to go over the
public internet. But that's still

704
00:33:43.040 --> 00:33:44.650
a little ways out. Right,
right, right. I mean, I

705
00:33:44.650 --> 00:33:47.590
could hear people and I
guess it's called passageway is

706
00:33:47.590 --> 00:33:49.330
what the word for this
is. I could, I could

707
00:33:49.330 --> 00:33:51.740
hear people who are into
security saying, Oh my goodness

708
00:33:51.740 --> 00:33:56.080
types. And suddenly my engineer
has used perfectly public normal

709
00:33:56.080 --> 00:33:59.170
things like Nat and you
know, appropriate technologies to completely

710
00:33:59.170 --> 00:34:01.900
bypass the security that my
company has put in. Why

711
00:34:01.900 --> 00:34:05.860
couldn't you have a little
tiny local proxy that just

712
00:34:05.860 --> 00:34:09.370
watches and then kind of
sideways throws up to run

713
00:34:09.370 --> 00:34:12.160
scope for an inspection. So
you're just throwing the traffic

714
00:34:12.160 --> 00:34:15.760
up without doing any fancy
proxy. That is a really

715
00:34:15.760 --> 00:34:18.010
great idea. You like that?
Can you get that written

716
00:34:18.010 --> 00:34:19.570
by the end of the
day? Yeah. End of the

717
00:34:19.570 --> 00:34:22.570
day. Probably not, but I
think that's the, you know,

718
00:34:22.570 --> 00:34:24.460
the exact kind of model
that we're looking at for

719
00:34:24.460 --> 00:34:27.100
the future is, you know,
like let us see. Not

720
00:34:27.100 --> 00:34:30.190
only just like local traffic,
but like intranet traffic, for

721
00:34:30.190 --> 00:34:31.420
lack of a better word.
Like let us see our

722
00:34:31.420 --> 00:34:33.490
internal traffic that never even
goes out over the public

723
00:34:33.490 --> 00:34:35.650
internet. Let us get at
the same level of visibility

724
00:34:35.790 --> 00:34:38.560
on that type of stuff
too. So we're very interested

725
00:34:38.560 --> 00:34:40.900
in pursuing that in the
future. Very cool. All right.

726
00:34:40.900 --> 00:34:42.760
Well thanks so much, John
Shyanne for chatting with me

727
00:34:42.760 --> 00:34:45.550
today. Yeah. Thanks for having
me, Scott. This has been

728
00:34:45.550 --> 00:34:48.190
another episode of Hansel minutes
and I'll see you again

729
00:34:48.190 --> 00:34:48.700
next week.

