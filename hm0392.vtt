WEBVTT FILE

1
00:00:12.030 --> 00:00:17.580
From hanselminutes.com. It's Hanselman Mintz.
Oh, weekly discussion with web

2
00:00:17.610 --> 00:00:21.930
developer and technologists. Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:21.930 --> 00:00:27.960
number three 92 recorded live
Thursday, October 3rd, 2013. This episode of

4
00:00:27.960 --> 00:00:30.720
Hansel minutes is brought to
you by Tellerik offering the

5
00:00:30.720 --> 00:00:39.960
best in developer tools and
support online@telerikdotcomandbyfranklins.net makers of gesture

6
00:00:39.960 --> 00:00:43.770
pack a powerful gesture, recording
and recognition system for Microsoft

7
00:00:43.770 --> 00:00:49.680
connect for windows developers details.
Add gesture, pak.com. In this

8
00:00:49.680 --> 00:00:53.850
episode, Scott talks with clay
McCoy about groovy on grails.

9
00:00:57.840 --> 00:00:59.670
Hi, this is Scott Hanselman.
This is another episode of

10
00:00:59.670 --> 00:01:01.950
Hansel minutes and on the
phone I've got clay McCoy

11
00:01:01.980 --> 00:01:04.580
from Netflix. Hey, how's it
going? That's great. I'm glad

12
00:01:04.580 --> 00:01:07.370
to be here. I wanted
to talk to you because

13
00:01:07.370 --> 00:01:09.920
you work on something that
is just cool to say

14
00:01:10.010 --> 00:01:13.910
groovy on grails and you,
you work on groovy projects

15
00:01:13.940 --> 00:01:17.030
at Netflix and you also
work on grails project. So

16
00:01:17.060 --> 00:01:22.480
let's start with what is
So groovy is a, a

17
00:01:22.490 --> 00:01:27.110
JVM language, a Java virtual
machine, and it runs on

18
00:01:27.110 --> 00:01:30.590
the Java virtual machine. And
basically a lot of people

19
00:01:30.590 --> 00:01:33.620
there are, are tired of
Java. So you're seeing all

20
00:01:33.620 --> 00:01:38.180
these alternative languages popping up
like Scala and closure and

21
00:01:38.180 --> 00:01:42.650
groovy and groovy is probably
the gateway language to get

22
00:01:42.650 --> 00:01:46.640
off of Java dumb the
language, but still stay on

23
00:01:46.640 --> 00:01:49.010
the platform and still get
to make use to most

24
00:01:49.010 --> 00:01:53.060
of the, the ecosystem. And
it looks a lot like

25
00:01:53.060 --> 00:01:56.450
Ruby. In fact, a whole
lot of gravy developers have

26
00:01:56.450 --> 00:02:00.590
seen something like Ruby with
a, with an R and

27
00:02:00.770 --> 00:02:03.590
seeing what you can do
there and kind of got

28
00:02:03.590 --> 00:02:08.210
jealous and greedy is this
nice compromise? One thing that's

29
00:02:08.810 --> 00:02:12.440
one reason I say groovy
is gateway languages, because you

30
00:02:12.440 --> 00:02:16.250
can basically write Java like
you're used to, and over

31
00:02:16.250 --> 00:02:20.390
time, get more and more
idiomatic, you know, start leaving

32
00:02:20.390 --> 00:02:24.140
off the semi colons, start
using closures, which might be

33
00:02:24.140 --> 00:02:28.910
a new concept. Get more
into the meta programming. So

34
00:02:28.910 --> 00:02:33.020
you can really ease, ease
into that cell development. So

35
00:02:33.170 --> 00:02:35.480
groovy, if I'm a Java
developer and I sit down

36
00:02:35.480 --> 00:02:37.670
and start writing groovy, it's
gonna feel really productive. Cause

37
00:02:37.670 --> 00:02:42.620
it's basically just, Yes, you
can write Java just exactly

38
00:02:42.620 --> 00:02:44.420
like you would. And the
file will have a different

39
00:02:44.780 --> 00:02:47.450
suffix. That'll be a dot
groovy file instead of a.java

40
00:02:47.450 --> 00:02:50.210
file. Interesting. That reminds me
of the relationship that the

41
00:02:50.210 --> 00:02:53.180
TypeScript guys talk about, where
you could take a JavaScript

42
00:02:53.180 --> 00:02:56.480
file and just rename the
extension and it still works.

43
00:02:56.810 --> 00:02:59.530
And then you just start
introducing features until next thing

44
00:02:59.530 --> 00:03:03.400
you know, you've moved over
to idiomatic languages. That's exactly

45
00:03:03.400 --> 00:03:06.610
right. Okay. And does it
have a console, like, you

46
00:03:06.610 --> 00:03:09.040
know, like a, like an
like Ruby has like an

47
00:03:09.040 --> 00:03:12.240
interactive Ruby console, is there
an interactive groovy console? Absolutely.

48
00:03:12.240 --> 00:03:15.450
It does. Yeah. And so
it basically gives you that

49
00:03:15.480 --> 00:03:18.750
four for a Java program,
right? Because you can type

50
00:03:18.750 --> 00:03:21.240
in what it looks like,
Java, what is Java, if

51
00:03:21.240 --> 00:03:26.310
you want to, it's a
good place to start. Is

52
00:03:26.310 --> 00:03:28.230
it a scripting language, but
you mean, I know it

53
00:03:28.230 --> 00:03:32.820
can be used as a
scripting language. So in Java,

54
00:03:32.910 --> 00:03:37.640
the language doesn't really lend
itself to writing scripts. You,

55
00:03:37.640 --> 00:03:40.410
you, you have to write
all this boilerplate, the main

56
00:03:40.410 --> 00:03:43.920
method and you can start,
start there. Grieving gets rid

57
00:03:43.920 --> 00:03:47.670
of all of that border
plate. So, so yeah, it's,

58
00:03:47.670 --> 00:03:52.380
it's, it's a good scripting
language. The, the one, the

59
00:03:52.380 --> 00:03:55.470
one reason you might choose
something like Python to write

60
00:03:55.470 --> 00:03:58.890
scripts in is because the
whole JVM has to start

61
00:03:58.890 --> 00:04:03.240
out, right. There's ways around
that. There's, there's various ways

62
00:04:03.240 --> 00:04:05.100
to keep the JVM running
in the background and your

63
00:04:05.100 --> 00:04:07.680
script gets sent to that.
And, and, and that certainly

64
00:04:07.680 --> 00:04:10.320
maps to this sort of
problems, but yeah, but it's

65
00:04:10.320 --> 00:04:13.500
not just a scripting language.
You can definitely use it

66
00:04:13.500 --> 00:04:15.840
for that. It's convenient for
that, but you can do

67
00:04:15.840 --> 00:04:18.480
anything that you would use
before. Like when you write

68
00:04:18.480 --> 00:04:24.390
real applications using groovy, really,
we find that the most

69
00:04:24.390 --> 00:04:26.970
effective way to take advantage
of the JVM and the

70
00:04:26.970 --> 00:04:31.080
whole Java ecosystem. And right
now, if I understand correctly,

71
00:04:31.080 --> 00:04:33.600
groovy is, is kind of
backed by or controlled by

72
00:04:33.630 --> 00:04:38.460
VMware. And that's actually, because,
you know, <inaudible> was a

73
00:04:38.460 --> 00:04:41.970
company that made groovy on
grails, like in 2007 ish

74
00:04:42.000 --> 00:04:43.890
and they got bought by
SpringSource and they got bought

75
00:04:43.890 --> 00:04:46.410
by VMware. So there's big,
big money behind this thing.

76
00:04:47.970 --> 00:04:52.530
Sure, sure. But it's also
open source and free to

77
00:04:52.530 --> 00:04:56.010
use as a developer and
just a fun, fun way

78
00:04:56.010 --> 00:04:57.960
to be productive. So even
though there's a company that

79
00:04:57.960 --> 00:04:59.940
backs that you don't feel
like there's any pressure from

80
00:04:59.970 --> 00:05:01.530
VMware, they're not trying to
do anything with it. It

81
00:05:01.530 --> 00:05:03.660
really has a community feel
to it. Oh yeah. It

82
00:05:03.660 --> 00:05:06.770
feels, and you know, all
the way down to the,

83
00:05:06.770 --> 00:05:09.840
the libraries, the things you
get to, to, to use

84
00:05:10.320 --> 00:05:18.150
the community, they're just way
maybe more advanced stuff than

85
00:05:18.150 --> 00:05:22.650
you'd get in the standard
Java community. I dunno. So

86
00:05:22.650 --> 00:05:23.850
you're saying that kind of
like, I mean, if I

87
00:05:23.850 --> 00:05:25.440
may put words in your
mouth, is it like the

88
00:05:25.440 --> 00:05:28.200
alpha geeks in Java have
said, Ooh, this is cool.

89
00:05:28.200 --> 00:05:30.000
And they've kind of migrated
over there. So you're getting

90
00:05:30.000 --> 00:05:32.910
more advanced thinking in the
groovy space than in the

91
00:05:32.910 --> 00:05:36.390
classic Java space. Maybe you're
definitely getting more Ruby like

92
00:05:36.420 --> 00:05:39.000
thinking, but I wouldn't say
there's one set of alpha

93
00:05:39.000 --> 00:05:42.000
geeks in the Java community,
but I would say that

94
00:05:42.000 --> 00:05:44.790
most of the alpha geeks
have moved past Java, the

95
00:05:44.790 --> 00:05:48.300
language, you know, I don't
want to take anything away

96
00:05:48.300 --> 00:05:51.330
from closure or Scala, or
if you had other languages,

97
00:05:51.700 --> 00:05:55.920
I loved those myself. Yeah.
What Greek is just another

98
00:05:55.920 --> 00:05:58.040
way to go about it.
Why do you think that?

99
00:05:58.040 --> 00:06:01.190
What was it about Java
that somewhere around 2007, people

100
00:06:01.190 --> 00:06:03.770
started getting really excited about
building new languages on the,

101
00:06:03.950 --> 00:06:06.920
on the runtime, where it
went from being Java and

102
00:06:06.920 --> 00:06:09.560
Java byte code to being,
you know, Scala and grooving.

103
00:06:09.560 --> 00:06:11.900
All these other people are
using Java as a language

104
00:06:11.900 --> 00:06:15.870
construction kit. Oh, it was
a leg. What I was

105
00:06:15.880 --> 00:06:17.980
saying, saying earlier, you start
looking around at these other

106
00:06:17.980 --> 00:06:21.970
languages, like Ruby that were
really becoming prevalent about that

107
00:06:21.970 --> 00:06:25.540
time. And I wanted to
write Ruby personally, you know,

108
00:06:25.550 --> 00:06:27.220
and a lot of people
did, but I, you know,

109
00:06:27.220 --> 00:06:29.230
you'd go back and start
writing your job code. And

110
00:06:29.230 --> 00:06:32.920
man, it was, it was
a bummer. You just didn't

111
00:06:32.920 --> 00:06:34.930
have all the cool features
there that as a developer

112
00:06:34.930 --> 00:06:38.890
you wanted and a groovy
was coming around about that

113
00:06:38.890 --> 00:06:41.890
time. And I didn't want
to learn groovy. I wanted

114
00:06:41.890 --> 00:06:43.840
to go further away from
Java. You know, I wanted

115
00:06:43.840 --> 00:06:46.930
to be a list developer,
but over time I realized

116
00:06:46.930 --> 00:06:48.790
that I wasn't really going
to get paid to do

117
00:06:48.790 --> 00:06:54.010
that. And groovy started looking
at this pretty nice copper.

118
00:06:54.050 --> 00:06:55.570
I was actually going to
be able to get it

119
00:06:55.570 --> 00:06:57.130
and get it in the
door where I worked in

120
00:06:57.130 --> 00:06:59.400
Ben and use it, you
know? And it was something

121
00:06:59.430 --> 00:07:02.320
you could say, look, here's
this great thing. Let's try

122
00:07:02.320 --> 00:07:04.690
it out. Let's use it
for unit testing. And that

123
00:07:04.690 --> 00:07:06.010
was a good way to
get it in the door,

124
00:07:06.010 --> 00:07:07.270
you know? And there was
no way I was going

125
00:07:07.270 --> 00:07:09.340
to get even Ruby in
the door at some of

126
00:07:09.340 --> 00:07:11.140
these places that were Java
shops that I was working

127
00:07:11.140 --> 00:07:13.600
out at the time, but
I couldn't get a job

128
00:07:13.660 --> 00:07:16.630
as a Ruby developer. I
probably could now, but you

129
00:07:16.630 --> 00:07:18.820
know, not, not, then it
wasn't as prevalent, so that's

130
00:07:18.820 --> 00:07:23.410
the kind of basis. And
then you invest some time

131
00:07:23.410 --> 00:07:25.660
in that. And then you
end up being able to

132
00:07:25.660 --> 00:07:28.840
go somewhere like Netflix. And
they've got, you know, probably

133
00:07:28.870 --> 00:07:30.910
because a lot of the
same developers from the same

134
00:07:30.910 --> 00:07:35.380
background, no groovy, no grills
and, and start writing applications

135
00:07:35.380 --> 00:07:37.420
and that. So, you know,
at Netflix, a whole lot

136
00:07:37.420 --> 00:07:42.400
of our internal applications are
a groovy and girls, Is

137
00:07:42.400 --> 00:07:45.220
there any regular old kind
of classic Java? Oh yeah.

138
00:07:45.460 --> 00:07:50.980
Yeah. In fact, most of
the, the main services that,

139
00:07:51.030 --> 00:07:54.640
that make up our real
product are just standard Java.

140
00:07:54.700 --> 00:07:58.270
Yeah, absolutely. I heard you
kind of say or imply

141
00:07:58.270 --> 00:08:00.580
that you were thinking about
what your next job would

142
00:08:00.580 --> 00:08:03.700
be an optimized, your search
for the language that you

143
00:08:03.700 --> 00:08:05.740
really wanted to work in.
Do you think that's common

144
00:08:05.740 --> 00:08:07.150
for people to say like,
gosh, I really want to

145
00:08:07.150 --> 00:08:10.210
work in foo and bar
languages and who's going to

146
00:08:10.210 --> 00:08:14.110
hire me in that language.
No, I don't know. I

147
00:08:14.110 --> 00:08:17.100
guess that's kind of resume
driven development. I mean, you,

148
00:08:17.100 --> 00:08:18.940
you, you kind of try
to find a way to,

149
00:08:19.270 --> 00:08:22.900
to, to use the things
that you like. If, if

150
00:08:22.900 --> 00:08:25.870
you're, you know, everybody's kind
of drawn to what they

151
00:08:25.870 --> 00:08:28.540
think getting software is it
makes them more effective. And

152
00:08:28.540 --> 00:08:30.730
when you find those things,
you don't really want to

153
00:08:30.730 --> 00:08:33.580
let them go. You want
to, unless you find something

154
00:08:33.580 --> 00:08:37.840
better, The, the language and
you kept saying, it's kind

155
00:08:37.840 --> 00:08:40.270
of Ruby ish and Ruby
ask. And of course we're

156
00:08:40.270 --> 00:08:42.580
on a podcast, so people
can't see us. But when

157
00:08:42.580 --> 00:08:46.420
I think of Ruby, I
think of, of compact and

158
00:08:46.420 --> 00:08:50.860
expressive and kind of poetic
Ruby people seem to like

159
00:08:50.860 --> 00:08:54.820
to build sentences that are
clear so I can afford

160
00:08:54.820 --> 00:08:56.730
a loop. And I worked
in my last experience in

161
00:08:56.730 --> 00:09:02.340
Java was like around 2000,
maybe 1997 at Nike back

162
00:09:02.340 --> 00:09:05.070
in the, when RMI, when
remote event method invocation first

163
00:09:05.070 --> 00:09:07.020
came out. That's how long
I'll go. It was that

164
00:09:07.020 --> 00:09:08.430
I was doing Java. So,
but when I do a

165
00:09:08.430 --> 00:09:10.710
four loop, you know, it's
pretty much a classic four

166
00:09:10.710 --> 00:09:12.570
loop, a four loop in
Java looks a lot like

167
00:09:12.570 --> 00:09:15.510
one in C or in
C sharp, but in groovy,

168
00:09:15.510 --> 00:09:19.910
it's a lot. Terser, isn't
it, You know, you've got

169
00:09:19.910 --> 00:09:24.530
a whole different set of
methods on collections, for example,

170
00:09:24.710 --> 00:09:27.500
where you're using instead of
a four, you've got an

171
00:09:27.500 --> 00:09:31.400
each method and you send
it a closure. And I,

172
00:09:31.490 --> 00:09:34.310
maybe I should explain closures
like blocks of code that

173
00:09:34.310 --> 00:09:37.370
are, that, you know, aren't
executed when they're defined, but

174
00:09:37.370 --> 00:09:41.510
you just send them around
there, functions that you just

175
00:09:41.690 --> 00:09:46.850
send around and it's, it
feels way more productive. It

176
00:09:46.850 --> 00:09:49.070
gets rid of lots of
boilerplate code. The concept of

177
00:09:49.070 --> 00:09:51.380
closures in general is something
that's been kind of like

178
00:09:51.650 --> 00:09:53.690
coming up now where language
is, want that as a

179
00:09:53.690 --> 00:09:55.520
first class citizen, like I
should be able to pass

180
00:09:55.520 --> 00:09:57.680
a function around as easy
as I pass an integer

181
00:09:57.680 --> 00:10:04.070
around. Absolutely. Yeah. That's embraced
then in, in groovy. Yeah.

182
00:10:04.460 --> 00:10:06.650
And, and you can be
very functional and groovy. You

183
00:10:06.650 --> 00:10:08.750
don't have to be, I
mean, it lends itself to

184
00:10:09.470 --> 00:10:14.210
various styles, but yeah, it's
definitely set up that way.

185
00:10:14.210 --> 00:10:17.570
And the enclosures help, I'm
looking at an example where

186
00:10:17.570 --> 00:10:20.840
they've taken a four loop
with an if clause in

187
00:10:20.840 --> 00:10:23.540
between to go and print
out, like spin through an

188
00:10:23.540 --> 00:10:26.720
array, print out something that's
a certain length and it's,

189
00:10:26.720 --> 00:10:31.280
you know, it's three methods
in Java. You know, if

190
00:10:31.280 --> 00:10:34.040
you don't count the, the
curly it's three lines, rather

191
00:10:34.040 --> 00:10:36.740
if you don't count the
curly braces, but in, in

192
00:10:36.740 --> 00:10:38.120
groovy, it looks a lot
like what I would think

193
00:10:38.120 --> 00:10:41.210
of as is link where
it's just the array dot,

194
00:10:41.210 --> 00:10:44.150
find all the claws that
is kind of your guard

195
00:10:44.150 --> 00:10:47.180
clause and then dot each
and then print all in

196
00:10:47.180 --> 00:10:51.650
one compact sentence. Absolutely. It
gets rid of tons of

197
00:10:51.650 --> 00:10:56.750
boiler plate. Now in, in
the C sharp in the.net

198
00:10:56.750 --> 00:11:00.410
space, we are kind of
caution for these things, particularly

199
00:11:00.410 --> 00:11:02.900
in linked because they can
expand and explode and you

200
00:11:02.900 --> 00:11:05.420
can get yourself into algorithmic
complexity in a single line

201
00:11:05.420 --> 00:11:09.050
without realizing how complicated stuff
is. Do those things exist

202
00:11:09.120 --> 00:11:13.700
as well. Oh yeah. You
so along with, you know,

203
00:11:13.730 --> 00:11:16.670
especially the, the meta programming,
but getting rid of the

204
00:11:16.670 --> 00:11:20.240
boiler plate, I mean, you
can write less code and

205
00:11:20.270 --> 00:11:25.640
do more. Yeah. There's, you're
also adding potential shoot yourself

206
00:11:25.640 --> 00:11:30.080
in the foot, especially because
you can, you know, you

207
00:11:30.080 --> 00:11:34.610
can call methods that aren't
there at compile time, you

208
00:11:34.610 --> 00:11:39.470
know, that, that, that come
about later or change or

209
00:11:39.500 --> 00:11:42.380
drop through to method missing,
like in heaven in Ruby,

210
00:11:43.430 --> 00:11:45.770
there there's all kinds of
ways that you can make

211
00:11:45.770 --> 00:11:50.780
your code unreadable or not
obvious. And so that's why

212
00:11:51.230 --> 00:11:56.470
a unit testing is more
important in groovy than Java.

213
00:11:57.420 --> 00:11:59.550
Well, because Java is really
static, right? I mean, Java's

214
00:11:59.610 --> 00:12:04.830
company Filed in groovy as
too, but not upfront, you

215
00:12:04.830 --> 00:12:09.390
know, it's, it can almost
feel interpreted because it may

216
00:12:09.390 --> 00:12:12.150
not be compiled until later,
especially if you're doing certain

217
00:12:12.840 --> 00:12:16.800
dynamic things or, you know,
using, have you been programming?

218
00:12:17.490 --> 00:12:19.650
Hmm. So some of the
features that groovy has that

219
00:12:19.680 --> 00:12:23.010
aren't in Java is like
dynamic typing. You mentioned closures,

220
00:12:23.850 --> 00:12:26.490
there's also native syntax for
some kinds of arrays and

221
00:12:26.490 --> 00:12:31.440
maps and lists Literal maps.
Yeah. What is that literal

222
00:12:32.010 --> 00:12:36.270
collections? Well, you don't have
to define, you know, a

223
00:12:36.690 --> 00:12:39.300
new array list and add
things to it. And, and

224
00:12:39.360 --> 00:12:41.130
it's just a way to,
to get rid of boiler

225
00:12:41.460 --> 00:12:43.260
code and you just put
some rackets and put stuff

226
00:12:43.260 --> 00:12:47.790
in the middle and it
grieving knows that's a list,

227
00:12:47.880 --> 00:12:50.070
you know, or put some
semi-colons in there, but key

228
00:12:50.070 --> 00:12:52.320
value, sorry Colin's in there.
And it's, you've got key

229
00:12:52.320 --> 00:12:57.660
value pairs and in between
the braces and creepy just

230
00:12:57.660 --> 00:13:00.540
knows that that's a map.
I know that that one

231
00:13:00.540 --> 00:13:03.840
of your bosses, Diane Marsh is
a big fan of Scala,

232
00:13:03.840 --> 00:13:05.310
and I'm going to have
her on the show and

233
00:13:05.310 --> 00:13:08.580
talk about that. But do
you feel that there's maybe

234
00:13:08.580 --> 00:13:11.430
one language to rule them
all that like Java people

235
00:13:11.430 --> 00:13:13.590
should just give up on
Java and use groovy or

236
00:13:13.620 --> 00:13:15.720
maybe goofy people should give
up on groovy and use

237
00:13:15.720 --> 00:13:18.540
Scala? Or is there really
room for multiple languages at

238
00:13:18.570 --> 00:13:23.010
Netflix? Oh, I think there's
definitely room for multiple languages

239
00:13:23.010 --> 00:13:27.270
that Netflix and everywhere. In
fact, a Scala I love

240
00:13:27.270 --> 00:13:30.810
Scala to Scala is a
really interesting, and that it's,

241
00:13:31.140 --> 00:13:34.410
you know, very tight, it's
more tight than Java, whereas

242
00:13:34.410 --> 00:13:36.510
groovy, the typing is kind
of option. You know, it

243
00:13:36.510 --> 00:13:38.970
feels kind of optional in
our projects. We tend to

244
00:13:38.970 --> 00:13:40.950
type more than not, and
it's got really good in

245
00:13:40.950 --> 00:13:44.280
France, but you can do
a whole lot of the

246
00:13:44.400 --> 00:13:47.130
same things in both languages.
You can be very functional

247
00:13:48.180 --> 00:13:51.510
in both and then closure.
There's another, a third one.

248
00:13:51.510 --> 00:13:55.500
That's, that's, that's like a
list dialect. And that's one

249
00:13:55.500 --> 00:13:57.660
that I play with quite
a bit in my free

250
00:13:57.660 --> 00:14:00.420
time. I mean, that's, that's
actually one of the ones

251
00:14:00.420 --> 00:14:02.880
that, ah, you know, I'd
kinda like to work towards

252
00:14:02.940 --> 00:14:05.160
doing more of those points,
but there's lots of good

253
00:14:05.160 --> 00:14:11.280
options, you know, Groovy on
grails. I'm pretty much guessing

254
00:14:11.280 --> 00:14:14.760
it was base it's groovy
on rails previously, but it's,

255
00:14:14.760 --> 00:14:16.890
it's literally that. So it
would be like a business,

256
00:14:17.400 --> 00:14:22.020
more business minded web framework,
like just as rails Ruby

257
00:14:22.020 --> 00:14:24.930
on rails, put Ruby literally
on rails to make you

258
00:14:24.930 --> 00:14:27.630
make web applications quickly. Is
that the exact same parallel?

259
00:14:28.380 --> 00:14:34.800
Yeah, it is. It's a
rails inspired, full stack, you

260
00:14:34.800 --> 00:14:37.710
know, web framework, but, and,
and so, so, so you're

261
00:14:37.710 --> 00:14:42.240
getting into the, the, the
whole community that's around groovy,

262
00:14:42.360 --> 00:14:45.900
right. And grills is probably
the most visible one. But

263
00:14:45.900 --> 00:14:49.260
before we get into that,
there's, you know, there's great

264
00:14:49.260 --> 00:14:52.250
tools for unit testing that
even if you're in the

265
00:14:52.250 --> 00:14:55.250
Java space and you want
to work in unit testing

266
00:14:55.280 --> 00:14:59.000
unit test your Java code,
there's this thing called Spock,

267
00:14:59.030 --> 00:15:02.480
which is like mr. Spock.
Yeah, that's what I mean.

268
00:15:02.510 --> 00:15:09.290
But it's like spec and
mock pushed together. And w

269
00:15:09.290 --> 00:15:11.360
w when I was first
doing this, I would just

270
00:15:11.360 --> 00:15:13.370
use regular J unit, but
use it with groovy. And

271
00:15:13.370 --> 00:15:16.220
that helped a lot. But
now that Spock is here,

272
00:15:16.430 --> 00:15:19.460
it's it? That goes so
far beyond J unit. Like

273
00:15:19.460 --> 00:15:21.920
it gives you some structure
to build your tests in.

274
00:15:22.100 --> 00:15:25.070
It comes out of the
box with a mocking framework.

275
00:15:26.800 --> 00:15:34.280
It's really nice. There's G
pars GP ARS, a concurrency

276
00:15:34.280 --> 00:15:37.820
library. So it's just these
nice DSLs on various types

277
00:15:37.940 --> 00:15:43.910
of concurrency and groovy. And,
and there there's, there's a

278
00:15:43.910 --> 00:15:47.330
project called code Nard and
a lot of the syntactic

279
00:15:48.440 --> 00:15:51.320
code analysis that you do
in gravy with, you know,

280
00:15:51.350 --> 00:15:53.210
check style and find bugs
and that sort of thing

281
00:15:53.210 --> 00:15:54.560
to look at your code
and tell you what's wrong.

282
00:15:54.770 --> 00:15:59.150
It doesn't work on gravy,
but COVID narc duds and

283
00:15:59.500 --> 00:16:02.590
Code narc, N a R
C. That's correct. Okay. Yeah.

284
00:16:03.340 --> 00:16:05.200
And we use that in
our projects to look at

285
00:16:05.200 --> 00:16:06.910
the code and look for
things that would be possible

286
00:16:06.910 --> 00:16:10.450
bugs, or, you know, make
sure there's consistent code formatting,

287
00:16:10.780 --> 00:16:13.390
that sort of stuff. And,
and those are very specific

288
00:16:13.390 --> 00:16:17.200
ones. You're still free to,
you know, pull in Google

289
00:16:17.200 --> 00:16:20.680
guava or standard Java libraries
that make, you know, the

290
00:16:20.680 --> 00:16:22.750
regular Java community great. And
use those and get your

291
00:16:22.750 --> 00:16:25.630
immutable collections and all that.
So there's a lot of

292
00:16:25.630 --> 00:16:27.940
great stuff there, but you
want to talk about grills

293
00:16:27.940 --> 00:16:32.290
specifically and, and that's great.
And that's a, Brillz inspired

294
00:16:32.380 --> 00:16:36.160
web framework. That's really a
bunch of grieving DSLs on

295
00:16:36.160 --> 00:16:42.490
top of a really well
architected Java web application out

296
00:16:42.490 --> 00:16:45.610
of the box, you know,
underneath there's proven mature Java

297
00:16:45.610 --> 00:16:48.520
technology is hibernate and spring
and that sort of stuff.

298
00:16:48.520 --> 00:16:50.500
And you get these booty
DSLs on all of that.

299
00:16:51.490 --> 00:16:53.020
So to make sure that
we're getting all the three

300
00:16:53.020 --> 00:16:56.440
letter acronyms where you're saying,
okay, DSLs right. Domain specific

301
00:16:56.440 --> 00:16:59.830
languages. So these are, these
are domain specific languages for,

302
00:16:59.980 --> 00:17:01.810
that have been written in
groovy that allow you to

303
00:17:01.810 --> 00:17:04.910
express very tersely what you're
doing. So for example, like

304
00:17:05.350 --> 00:17:08.650
Yamhill files in Ruby or
a special format. So it

305
00:17:08.650 --> 00:17:12.010
sounds like grails is very
domain specific. It's a top

306
00:17:12.010 --> 00:17:14.800
down approach where you, if
you have a data, whether

307
00:17:14.800 --> 00:17:17.050
you have a database or
not, you need a clean

308
00:17:17.050 --> 00:17:20.260
domain model that will map
to that database. That's correct.

309
00:17:20.290 --> 00:17:22.480
Yeah. Okay. And then does
it, does it scaffold out

310
00:17:22.480 --> 00:17:26.740
or generate views? Is there
a view engine? Yes, there

311
00:17:26.740 --> 00:17:29.260
is. You can absolutely do
that, but you know, the

312
00:17:29.260 --> 00:17:32.920
more mature Apple your application
gets probably the further away

313
00:17:32.920 --> 00:17:35.680
you move from scaffold building,
but yeah. To get something

314
00:17:35.680 --> 00:17:40.180
going really quick. Yes. There's
definitely a scaffolding then. Okay.

315
00:17:40.420 --> 00:17:43.660
And the, is it the
domain objects? How much do

316
00:17:43.660 --> 00:17:45.820
they know? Are they kind
of like active record and

317
00:17:45.820 --> 00:17:48.520
Ruby where a domain object
magically knows how it maps

318
00:17:48.520 --> 00:17:51.270
to a database? Or do
you have multiple flavors of

319
00:17:51.270 --> 00:17:54.240
domain objects, like view models
and models and model converters

320
00:17:54.240 --> 00:17:57.620
and all that? No, the
domain objects are pretty much

321
00:17:57.620 --> 00:18:00.860
state that, that you know
how to persist themselves. You

322
00:18:00.860 --> 00:18:04.150
can get various plugins if
you're using something that's and,

323
00:18:04.150 --> 00:18:06.200
and the plugin system is
actually something we should talk

324
00:18:06.200 --> 00:18:09.320
about if you're using some
kind of new SQL or

325
00:18:09.320 --> 00:18:11.840
something that there there's a
lot of ways to get

326
00:18:11.840 --> 00:18:15.410
the domain objects, to map
to something other than SQL

327
00:18:16.100 --> 00:18:20.360
and as guard, we actually
don't don't use domain objects

328
00:18:20.600 --> 00:18:24.140
or have any kind of
database, you know, mostly what

329
00:18:24.140 --> 00:18:26.960
we do is talk to
backend services, which, which is

330
00:18:26.960 --> 00:18:29.120
an interesting take on, on,
on grills. There's a whole

331
00:18:29.120 --> 00:18:30.800
side of it that we're
not using, but we still

332
00:18:30.800 --> 00:18:34.160
find that a whole lot
of value. Interesting. So you're

333
00:18:34.160 --> 00:18:38.000
not talking to databases and
using an hybrid using hibernate

334
00:18:38.000 --> 00:18:44.120
and things like that. No,
basically our state is the

335
00:18:44.150 --> 00:18:48.770
configuration of, of objects on
Amazon. So that's kind of,

336
00:18:49.040 --> 00:18:51.050
we kind of think of
that as our database, our

337
00:18:51.110 --> 00:18:54.140
state, and that's stored by
Amazon. Okay. So then when

338
00:18:54.140 --> 00:18:56.600
you talk to a backend
system to ask a question

339
00:18:56.600 --> 00:19:02.030
that a Netflix application needs,
you're getting back Jason or

340
00:19:02.030 --> 00:19:04.640
XML, or what is the
difference That's probably happening underneath,

341
00:19:04.640 --> 00:19:07.040
but we, and now we're
getting kind of into as

342
00:19:07.040 --> 00:19:11.480
guard and, and it's, Amazon
has an SDK and we

343
00:19:11.480 --> 00:19:13.610
have a dependency on that
and we make calls to

344
00:19:13.610 --> 00:19:15.650
that. So we get back,
you know, objects, they look

345
00:19:15.650 --> 00:19:18.740
like beans. Okay. So I
want to translate that, cause

346
00:19:18.740 --> 00:19:20.210
I don't know what beans
are and things like that.

347
00:19:20.210 --> 00:19:21.950
It's been many, many ways.
So I want to understand

348
00:19:21.950 --> 00:19:25.340
that, that in a classic
groovy on grails situation, you

349
00:19:25.340 --> 00:19:29.740
will be talking to some
underlying database and the, the

350
00:19:29.900 --> 00:19:32.720
table data comes out and
then converts into an object

351
00:19:32.810 --> 00:19:35.690
that is a groovy object.
Then you can do something

352
00:19:35.690 --> 00:19:38.330
with, and then you map
that to a view. And

353
00:19:38.330 --> 00:19:40.940
then you look at your
HTML, right. But in a

354
00:19:40.940 --> 00:19:43.700
Netflix world, which isn't isn't
necessarily that world, you're calling

355
00:19:43.700 --> 00:19:47.480
some backend service, that's ultimately
at Amazon somewhere through, like

356
00:19:47.480 --> 00:19:49.100
you said, as a guard
that people can go and

357
00:19:49.100 --> 00:19:51.320
look up on online and
how that works. And that's

358
00:19:51.320 --> 00:19:54.410
beyond the scope of what
we're talking about. But ultimately

359
00:19:54.410 --> 00:19:59.600
you're saying you consume objects,
you consume groovy objects. No,

360
00:19:59.600 --> 00:20:02.540
I was just making well,
yes, but I'm just trying

361
00:20:02.540 --> 00:20:05.480
to make the point that,
you know, grills is designed

362
00:20:05.480 --> 00:20:09.500
for kind of, kind of
having a database and a

363
00:20:09.500 --> 00:20:12.650
view on top of that.
But ultimately this state that's,

364
00:20:13.190 --> 00:20:15.500
you've got domain objects and
state in a database or

365
00:20:15.500 --> 00:20:18.920
something similar. And, but it
doesn't have to be, it's

366
00:20:18.920 --> 00:20:21.290
a whole lot more flexible
than that. And the application

367
00:20:21.500 --> 00:20:24.620
grills application that I work
on specifically, doesn't have domain

368
00:20:24.620 --> 00:20:27.170
objects at all or data.
Okay. So what I then

369
00:20:27.170 --> 00:20:31.280
then paraphrasing your point is
that don't look at grails

370
00:20:31.280 --> 00:20:33.260
and just say, Oh, well
look, it doesn't fit exactly

371
00:20:33.260 --> 00:20:36.260
with my domain objects. Therefore
I can't use it because

372
00:20:36.440 --> 00:20:38.030
it's just working fine and
you don't use it in

373
00:20:38.030 --> 00:20:42.590
the classic or expected way.
Right. In fact, girls can

374
00:20:42.590 --> 00:20:45.560
be really flexible and, and
it's got a plugin system

375
00:20:45.770 --> 00:20:49.540
with, you can write your
own plugins. There's a, but

376
00:20:49.540 --> 00:20:53.470
there's tons of them out
there, hundreds and hundreds. And,

377
00:20:53.470 --> 00:20:56.380
and you can use plugins
to add, you know, like

378
00:20:56.380 --> 00:20:59.770
I was saying, no SQL
backends to your domain objects,

379
00:21:00.250 --> 00:21:06.610
caching security, search, tagging, even
things like Twitter, bootstrap, or

380
00:21:06.610 --> 00:21:09.280
angular or something. You want
to bring that in. Sometimes

381
00:21:10.060 --> 00:21:12.160
you open up the plugins
and see what they're doing

382
00:21:12.160 --> 00:21:14.800
and, and, and kind of
do something similar. Like if

383
00:21:14.800 --> 00:21:17.560
I'm bringing angular into my
grills app, I don't, I

384
00:21:17.560 --> 00:21:20.230
might not use the specific
plugin for that because I

385
00:21:20.230 --> 00:21:22.270
don't want to wait on
somebody to update the library

386
00:21:22.270 --> 00:21:25.330
when I want a new
version of angular or bootstrap,

387
00:21:25.600 --> 00:21:27.760
you know, I want it
then as soon as it

388
00:21:27.760 --> 00:21:29.830
came out and things like
that. So sometimes there's reasons

389
00:21:29.830 --> 00:21:32.680
to circumvent the plugins, but
they can be very helpful

390
00:21:32.680 --> 00:21:36.270
and save a lot. So
you can make views it's

391
00:21:36.270 --> 00:21:38.370
model, view controller, which a
lot of people who listen

392
00:21:38.370 --> 00:21:40.710
to this show are familiar
with, and you can use

393
00:21:41.100 --> 00:21:44.310
a web controllers. You can
make them groovy server pages,

394
00:21:44.310 --> 00:21:46.710
or I presumably plug in
other views if you prefer

395
00:21:46.770 --> 00:21:51.540
other view models. Absolutely. Okay.
What about like web services?

396
00:21:51.540 --> 00:21:54.960
Can groovy produce Jason and
B be a restful endpoint?

397
00:21:55.830 --> 00:21:59.160
Yes, we do a lot
of that. And, and, and

398
00:21:59.610 --> 00:22:04.050
as guard the grills application
I work on because people

399
00:22:04.050 --> 00:22:06.900
don't just use it from
a user interface and more

400
00:22:06.900 --> 00:22:12.210
and more people are scripting
against our application that Jason.

401
00:22:13.230 --> 00:22:15.390
Yeah. And is that pretty
straight forward? Like, are those

402
00:22:15.390 --> 00:22:17.850
things hidden when the object,
when the domain model object

403
00:22:17.850 --> 00:22:20.340
or list of objects turns
into Jason, is that just

404
00:22:20.340 --> 00:22:25.740
a serialization effort? It's not
a big deal. Basically. You

405
00:22:25.740 --> 00:22:29.100
have to do a little
bit in your code and,

406
00:22:29.100 --> 00:22:35.550
and to render Jason or
XML output rather than going

407
00:22:35.550 --> 00:22:38.700
straight to the page, but
you can basically take the

408
00:22:38.700 --> 00:22:42.480
same output and, and, and
wrap it up in a

409
00:22:42.480 --> 00:22:44.550
little bit of code that
sends it. And, you know,

410
00:22:44.580 --> 00:22:47.820
with that specific type of
output, that's actually gotten really

411
00:22:47.820 --> 00:22:50.970
easier, a whole lot easier
in the, the newest version

412
00:22:51.000 --> 00:22:55.380
of, of grills. Two, three,
they put in some really

413
00:22:55.380 --> 00:22:58.320
good rest support. So it
really is actively being developed.

414
00:22:58.320 --> 00:23:00.300
Like people notice like, Oh,
this is a problem. And

415
00:23:00.300 --> 00:23:04.290
then if it gets fixed.
Oh yeah, absolutely. Okay. That's

416
00:23:04.290 --> 00:23:08.550
cool. The, what was I
going to ask you? The

417
00:23:08.550 --> 00:23:11.490
view, the view engines are
pluggable while they come with

418
00:23:11.490 --> 00:23:15.120
a standard one, but what
about the move towards a

419
00:23:15.120 --> 00:23:18.150
single page applications? Like I'm
hearing people who like to

420
00:23:18.150 --> 00:23:21.990
make declarative statements saying MVC
is dead as a model

421
00:23:21.990 --> 00:23:24.270
and everything is going to
be, you know, model view

422
00:23:24.270 --> 00:23:28.050
controller on the client and
these Gmail, Stipe, Stipe angular

423
00:23:28.050 --> 00:23:30.330
apps, where there's really effectively
nothing on the back end,

424
00:23:30.330 --> 00:23:34.020
but services. How, how has
that kind of movement changed

425
00:23:34.020 --> 00:23:37.410
how you use your framework
and as well as grails?

426
00:23:38.460 --> 00:23:41.520
Well, that's one of the
directions that we're wanting to

427
00:23:41.520 --> 00:23:47.990
go with with Asgard specifically,
you, you know, you've basically

428
00:23:47.990 --> 00:23:55.010
got kind of two different
MVC layers that overlap a

429
00:23:55.010 --> 00:23:58.460
little bit, right. But the,
the grills application, you start

430
00:23:58.490 --> 00:24:02.000
to not use the GSPs.
That's the view layer, they're

431
00:24:02.000 --> 00:24:05.120
light JSPs, which is popular
in job. Right. But it's

432
00:24:05.150 --> 00:24:08.240
groovy. And it looks like
a, it's basically a template

433
00:24:08.330 --> 00:24:13.160
with some groovy code in
it. But what you end

434
00:24:13.160 --> 00:24:16.220
up with is a grills
back in that is really

435
00:24:16.220 --> 00:24:21.170
just there to, to, to
make public restful services. Right.

436
00:24:21.680 --> 00:24:24.680
And if that goes to
a page, that's actually an

437
00:24:24.710 --> 00:24:27.440
angular template, you know, and
it's, it's filling in at

438
00:24:27.440 --> 00:24:30.710
state from the restful service,
but, you know, Ajax calls

439
00:24:30.710 --> 00:24:33.710
to this grills, restful service,
right. There's nothing wrong with

440
00:24:33.710 --> 00:24:36.860
that. That's fine. And, and
grill still offers a whole

441
00:24:36.860 --> 00:24:40.250
lot to, to help you
there a built system that

442
00:24:40.250 --> 00:24:44.530
can even manage your static
resources, like, you know, your,

443
00:24:44.540 --> 00:24:47.600
your HTML templates, CSS, and
JavaScript, and that sort of

444
00:24:47.600 --> 00:24:53.330
thing. And, and B your
restful services service end point

445
00:24:53.620 --> 00:24:55.870
That's that's cool. So you
actually answered exactly what I

446
00:24:55.870 --> 00:24:58.000
wanted to hear, which is
that when you, when you,

447
00:24:58.000 --> 00:25:00.400
when you buy into an
environment like this, you're buying

448
00:25:00.400 --> 00:25:02.560
into their, their NVC pattern,
but you're also getting their

449
00:25:02.560 --> 00:25:06.250
build system and their serialization
style and their view models

450
00:25:06.250 --> 00:25:08.530
and their view engine and
all these things. And even

451
00:25:08.530 --> 00:25:10.570
in a world where we
are moving towards a lot

452
00:25:10.570 --> 00:25:12.520
of JavaScript on the front
end and not a lot

453
00:25:12.520 --> 00:25:15.610
going on in the backend,
there's still value in a

454
00:25:15.610 --> 00:25:19.510
framework like this. Sure, sure.
And does it prescribe one

455
00:25:19.510 --> 00:25:21.370
way or the other, or
the other talks about like,

456
00:25:21.370 --> 00:25:24.730
you know, in rails, they're
very opinionated and every version

457
00:25:24.730 --> 00:25:28.210
there'll be some big opinionated
declaration. Like this is the

458
00:25:28.210 --> 00:25:30.310
version where we go out
to coffee script, and this

459
00:25:30.310 --> 00:25:33.370
is the version where we've
introduced immediate pipelines. What's the

460
00:25:33.370 --> 00:25:37.810
sense of opinionated ness in
the grails community? Not like

461
00:25:37.810 --> 00:25:40.960
that. I mean, there's a,
there's an, the fault that's

462
00:25:40.960 --> 00:25:45.160
picked, you know, like the,
the standard database used to

463
00:25:45.160 --> 00:25:50.140
be, I forgot what it
used to do. It, they

464
00:25:50.170 --> 00:25:53.680
change it to H to
they, they, they, they change

465
00:25:53.680 --> 00:25:56.950
out their default, the testing
framework. It used to be

466
00:25:56.960 --> 00:25:58.930
J unit. Now it's Spock,
which I was talking about

467
00:25:58.930 --> 00:26:01.360
earlier as default. So they
provide the faults, but then

468
00:26:01.360 --> 00:26:04.090
very, very often you're going
to have plugins will pop

469
00:26:04.090 --> 00:26:07.060
up that let you plug
in whatever you want for

470
00:26:07.060 --> 00:26:09.280
that. Or, you know, you
can do it yourself. It's

471
00:26:09.280 --> 00:26:12.280
not opinionated to the point
where you can't do your

472
00:26:12.280 --> 00:26:15.420
own thing. Mainly somebody has
got to pick out a

473
00:26:15.430 --> 00:26:17.650
fault, right. To make it
work out of the box.

474
00:26:17.710 --> 00:26:19.330
Right. I guess it's whether
or not they pick a

475
00:26:19.330 --> 00:26:22.900
default or whether they impose
the default upon you. No,

476
00:26:22.900 --> 00:26:26.590
imposing. Now it doesn't feel
like it's imposed. Okay. Well,

477
00:26:26.590 --> 00:26:29.830
that's good to know. Yeah.
I think as someone who

478
00:26:29.830 --> 00:26:32.230
works on the asp.net side
on MVC, there's a lot

479
00:26:32.230 --> 00:26:34.870
of kind of pressure too,
from some parts of the

480
00:26:34.870 --> 00:26:37.390
community to say, you know,
make a decision and make

481
00:26:37.390 --> 00:26:39.310
a default. And then other
people say, well, make it

482
00:26:39.310 --> 00:26:41.890
as plugable as possible so
I can change and swap

483
00:26:41.890 --> 00:26:44.880
out anything and tough. It's
tough to find that happy,

484
00:26:44.880 --> 00:26:50.750
a happy medium. Oh yeah.
But the, the plugin you

485
00:26:50.750 --> 00:26:54.290
give us the plugin, the
community and the plugin ecosystem

486
00:26:54.350 --> 00:26:58.100
really helped that. Yeah. Yeah.
Definitely. And are, is this

487
00:26:58.100 --> 00:27:00.830
something that you think is,
is expanding inside of Netflix

488
00:27:00.830 --> 00:27:02.960
more and more people are
moving to grails? Cause they're

489
00:27:02.960 --> 00:27:08.450
seeing other teams doing well,
It's popular. Yeah. You know,

490
00:27:08.450 --> 00:27:13.670
you have a few applications,
internal applications that, that, that

491
00:27:13.670 --> 00:27:17.150
are popular and people use
every day. And when it's

492
00:27:17.150 --> 00:27:20.810
time to do another one,
people tend to take what

493
00:27:20.810 --> 00:27:22.910
was successful and keep on
going with that. People see

494
00:27:22.910 --> 00:27:25.670
that, you know, grills is
fun and easy to develop

495
00:27:25.670 --> 00:27:29.420
then. And yeah, several more
girls applications pop up. We've

496
00:27:29.420 --> 00:27:34.700
got another one called ice
that has a Netflix open

497
00:27:34.700 --> 00:27:38.060
source girls' application that tells
you how much money you're

498
00:27:38.060 --> 00:27:43.400
spending in the cloud, basically
Ice, ice. Yes. And then

499
00:27:43.640 --> 00:27:46.460
when someone at Netflix starts
a project, they just decide,

500
00:27:46.460 --> 00:27:47.780
just pick a language or
do you have to ask

501
00:27:47.780 --> 00:27:51.590
permission to No, no, you
don't ask any kind of

502
00:27:51.590 --> 00:27:54.350
permission. And that's like, it's
really, you know, they're big

503
00:27:54.350 --> 00:27:57.320
on saying freedom and responsibility.
So you've got the freedom

504
00:27:57.320 --> 00:28:00.560
to do whatever you want,
but you're responsible for making

505
00:28:00.560 --> 00:28:04.820
it work. So ultimately your
decision isn't, it's not one

506
00:28:05.040 --> 00:28:08.030
there's prescribed languages. You have
to pick. But as long

507
00:28:08.030 --> 00:28:09.530
as you pick one of
those, like you couldn't bring

508
00:28:09.530 --> 00:28:12.110
in something completely out of
the out of left field.

509
00:28:12.110 --> 00:28:15.440
Could you, you, could you
cut? Absolutely. Yeah. But then

510
00:28:15.440 --> 00:28:18.710
you'd have to maintain it,
I assume. Yeah. You're putting

511
00:28:18.710 --> 00:28:22.550
a burden in place if
you, if you were to,

512
00:28:22.550 --> 00:28:24.700
you know, make this really
unique thing and then, and

513
00:28:24.710 --> 00:28:27.080
then leave and they'd have
to find somebody else with

514
00:28:27.080 --> 00:28:31.010
a skillset to, you know,
to pick up from there.

515
00:28:31.100 --> 00:28:33.200
But that's, you know, you've
got the freedom to do

516
00:28:33.200 --> 00:28:36.260
that. If it's, if it's
something you think is the

517
00:28:36.260 --> 00:28:38.990
right thing to do, it's
a, it's a great culture

518
00:28:39.200 --> 00:28:42.350
to be a part of
the Netflix culture. Oh, absolutely.

519
00:28:42.440 --> 00:28:44.780
Yeah. It's just wonderful to
get that sort of freedom

520
00:28:44.810 --> 00:28:49.580
and, and be trusted. I
like to, I like to

521
00:28:49.580 --> 00:28:52.310
tell a story about a
Netflix person. I forget his

522
00:28:52.310 --> 00:28:54.260
name. I could go and
search for it, but he's

523
00:28:54.260 --> 00:28:56.300
like the chief architect, he's
a British guy. So like

524
00:28:56.300 --> 00:28:58.850
a PhD in like white
hair. Do you know who

525
00:28:58.850 --> 00:29:02.990
I'm talking about? Let me
look this up. He's like

526
00:29:02.990 --> 00:29:07.920
the chief cloud architect and
he was at a, a

527
00:29:07.930 --> 00:29:13.280
conference and he was talking
about, Oh, Adrian, Adrian Cockcroft

528
00:29:13.280 --> 00:29:15.950
yes. Oh yeah. Okay. So
he was at this conference

529
00:29:16.010 --> 00:29:18.890
and he was talking about,
you know, using Cassandra and

530
00:29:18.890 --> 00:29:22.040
he was talking about moving
Netflix to Europe and you

531
00:29:22.040 --> 00:29:25.280
know, how the relationship with
Amazon works. And he was

532
00:29:25.280 --> 00:29:28.280
talking about how many more
IOPS, how many more, you

533
00:29:28.280 --> 00:29:31.760
know, operations per second. He
was getting using SSDs over

534
00:29:31.940 --> 00:29:35.270
spinning rushed and how he
really preferred those. And he

535
00:29:35.270 --> 00:29:36.920
was saying, well, it's, you
know, it's three times more

536
00:29:36.920 --> 00:29:39.830
expensive. It's 10 times faster.
This is a no brainer.

537
00:29:40.460 --> 00:29:43.180
And he's wise and he's
got chief in his title

538
00:29:43.180 --> 00:29:46.460
and he's English. So everyone
respects him immediately. And then

539
00:29:46.460 --> 00:29:50.200
he, a young person in
the audience started kind of

540
00:29:50.350 --> 00:29:52.090
still stood up and asking
a bunch of questions and

541
00:29:52.090 --> 00:29:56.020
lecturing him about how SSDs
fail. And the guy goes

542
00:29:56.020 --> 00:29:57.820
on and on and on,
and Adrian is letting him

543
00:29:57.820 --> 00:29:59.530
talk. And then he says,
what do you think about

544
00:29:59.530 --> 00:30:03.130
that? And Adrian says, I
don't care. I'm renting them.

545
00:30:03.790 --> 00:30:07.690
That's that's Amazon's problem. You
know, and it was, it

546
00:30:07.690 --> 00:30:09.730
was fantastic, you know, like
he should have just dropped

547
00:30:09.730 --> 00:30:11.890
the mic and just, you
know, or even even throwing

548
00:30:11.890 --> 00:30:14.350
the mic at the kid,
because it was kind of

549
00:30:14.380 --> 00:30:16.990
galling for the kid to
kind of call him out

550
00:30:16.990 --> 00:30:18.430
like that. But at the
same time he handled, it

551
00:30:18.430 --> 00:30:20.800
was such a plum, but
it completely changed my perspective

552
00:30:20.800 --> 00:30:23.710
on the level at which
one operates at Val computing.

553
00:30:24.990 --> 00:30:28.020
Oh yeah. It's totally different.
So, so people, you know,

554
00:30:28.050 --> 00:30:29.970
I would work on that
on the, on girls obligation

555
00:30:29.970 --> 00:30:33.690
that, that, that manages are
people use to self service

556
00:30:33.690 --> 00:30:38.070
and manage their deployments and
their Amazon objects. Right. And

557
00:30:38.100 --> 00:30:42.180
sometimes people get almost offended
of, you know, that you're

558
00:30:42.180 --> 00:30:44.520
just wiping out servers and
creating new ones. I know

559
00:30:44.520 --> 00:30:48.690
how wasteful, but it's a
different mindset. You know, some

560
00:30:48.690 --> 00:30:52.020
people are used to treating
their servers like their puppies

561
00:30:52.650 --> 00:30:55.140
and in the cloud, you
treat your servers like they're

562
00:30:55.140 --> 00:30:59.430
cattle. Wow. That's deep you,
I didn't come up with

563
00:30:59.430 --> 00:31:01.380
that, but it's very true.
Do you know who came

564
00:31:01.380 --> 00:31:05.130
up with that so we
can credit them appropriately? No,

565
00:31:05.130 --> 00:31:07.170
but I can look it
up. It's great. Yeah. Yeah.

566
00:31:07.170 --> 00:31:11.340
You're absolutely right. And the
cloud computing changes your speed

567
00:31:11.340 --> 00:31:13.200
at which you work. It
changes your financial model. It

568
00:31:13.200 --> 00:31:15.570
changes what you choose and
how you choose to deploy

569
00:31:15.930 --> 00:31:19.290
how you treat this, this
cattle. I like that. Yeah.

570
00:31:19.380 --> 00:31:21.150
Well, thanks so much for
chatting with me today. Clay

571
00:31:21.150 --> 00:31:25.230
McCoy from Netflix. Absolutely. Thank
you. This has been another

572
00:31:25.230 --> 00:31:28.080
episode of Hanselminutes and we'll
see you again next week.

