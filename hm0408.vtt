WEBVTT FILE

1
00:00:04.380 --> 00:00:17.240
<inaudible> From hanselminutes.com. It's Hansel
minutes. Oh, weekly discussion with

2
00:00:17.240 --> 00:00:21.770
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:21.770 --> 00:00:28.310
show number four Oh eight.
Recorded live Thursday, January 23rd, 2014. This

4
00:00:28.310 --> 00:00:30.740
episode of Hansel minutes is
brought to you by telephone.

5
00:00:31.280 --> 00:00:40.160
Offering the best in developer
tools and support online@telerikdotcomandbyfranklin.net makers

6
00:00:40.160 --> 00:00:43.550
of gesture pack a powerful
gesture, recording and recognition system

7
00:00:43.550 --> 00:00:48.290
for Microsoft connect for windows
developers details. Add gesture P

8
00:00:48.470 --> 00:00:53.480
k.com. In this episode, Scott
talks with Rodney Aleen about

9
00:00:53.660 --> 00:00:59.330
SAS JS. Hi, this is
Scott Hanselman. This is another

10
00:00:59.330 --> 00:01:02.570
episode of Hansel minutes and
I'm on with Rodney grim

11
00:01:02.720 --> 00:01:05.750
claim. How do you say
your last name, sir? So

12
00:01:05.750 --> 00:01:09.920
that's exactly what I said.
I'm on with Skype and

13
00:01:09.920 --> 00:01:12.860
Skype. You're in Germany right
now and I'm actually going

14
00:01:12.860 --> 00:01:14.510
to be in Germany in
a couple of weeks, so

15
00:01:14.510 --> 00:01:17.180
we'll have to hang out.
Oh, great. Where are you

16
00:01:17.180 --> 00:01:21.980
by your staying? Let me
see the name. It's boston.net.

17
00:01:21.980 --> 00:01:26.540
And the name of the
hotel is the NCA. Here's

18
00:01:26.540 --> 00:01:29.600
another German word. I'm a
lousy German here. Maritime Ryan

19
00:01:29.600 --> 00:01:34.310
main hotel in Darmstadt Marie
team. Mine hotel in line.

20
00:01:35.930 --> 00:01:38.360
Yes. I'm sorry. I have
no, I'm a lousy German

21
00:01:38.360 --> 00:01:40.880
for someone with a German
last name. I have no

22
00:01:40.880 --> 00:01:44.600
German language abilities at all.
You know, what's quite hilarious

23
00:01:44.600 --> 00:01:48.140
about that hotel. What's that?
That's the hotel I live

24
00:01:48.140 --> 00:01:51.110
in you. Okay. First you
live in a hotel. That's

25
00:01:51.110 --> 00:01:56.210
pretty awesome. Well, depends. Yeah,
but yeah, I live in

26
00:01:56.210 --> 00:01:58.670
a hotel five days a
week. Okay. Cause you work

27
00:01:58.670 --> 00:02:02.330
there because you kind of
commute. Exactly. Okay. And you

28
00:02:02.330 --> 00:02:06.650
live in this hotel in
that very hotel. So I'm

29
00:02:06.650 --> 00:02:08.930
getting, I'm going to present
at a conference in your

30
00:02:08.930 --> 00:02:15.440
hotel. That's awesome. That's very
Donald Trump. Quite a coincidence. Okay.

31
00:02:15.440 --> 00:02:17.030
Well then we'll have to
have you come and hang

32
00:02:17.030 --> 00:02:19.040
out and then, then gosh,
you should be speaking at

33
00:02:19.040 --> 00:02:22.130
this conference, frankly. That way
you would just go downstairs

34
00:02:22.760 --> 00:02:26.840
and present. I'm just saying
we can hook that up.

35
00:02:27.470 --> 00:02:29.120
No, you don't want to
go downstairs to present at

36
00:02:29.120 --> 00:02:32.600
the conference. No, that's like
the first floor, you know,

37
00:02:32.600 --> 00:02:34.910
I live on the seventh.
I don't, I don't go

38
00:02:34.910 --> 00:02:39.860
down to the first floor
all that off. Nah, you're

39
00:02:39.860 --> 00:02:41.660
not going to slum with
us on the first floor.

40
00:02:43.730 --> 00:02:46.790
So you work at Deutsche
telecom and you're a front

41
00:02:46.790 --> 00:02:51.020
end web developer and you've
got some really great stuff

42
00:02:51.050 --> 00:02:55.040
on your, on your GitHub.
I, I enjoy wandering around

43
00:02:55.040 --> 00:02:57.800
and kind of like low
key stalking. People's get hub

44
00:02:57.800 --> 00:03:01.660
accounts and checking out what
they, what they're committing on.

45
00:03:02.410 --> 00:03:05.800
And it looks here like
a week or two ago

46
00:03:05.800 --> 00:03:11.740
you did something called SAS
dot JS. You basically compiled

47
00:03:11.740 --> 00:03:14.110
lib SAS to JavaScript the
other week. Is that, is

48
00:03:14.110 --> 00:03:17.860
that correct? Yep. Can we
break this down into a

49
00:03:17.860 --> 00:03:19.990
couple of pieces here? Because
I think that some of

50
00:03:19.990 --> 00:03:22.840
the folks that listen to
my show, focus on windows

51
00:03:22.840 --> 00:03:26.620
a little bit more than
on Linux and JavaScript and,

52
00:03:26.750 --> 00:03:29.650
and kind of Mac tools.
So they may or may

53
00:03:29.650 --> 00:03:31.720
not be familiar with some
of these, these, these different

54
00:03:31.720 --> 00:03:35.050
tools that plug in together
now is this SAS is

55
00:03:35.050 --> 00:03:37.540
an in lesson. SAS. We
think of those things as

56
00:03:37.540 --> 00:03:43.410
like less than SAS. It's
the Jack JavaScript. Sorry. The

57
00:03:43.410 --> 00:03:50.220
CSS pre compiler Zass. Yes.
Okay. And in lessons in

58
00:03:50.220 --> 00:03:52.770
Zass are kind of competitors,
would you say, is that

59
00:03:52.770 --> 00:03:56.550
true? Yes. Why are they
always want that? But why

60
00:03:56.550 --> 00:03:58.890
are they always said like,
as if they're one thing,

61
00:03:58.890 --> 00:04:00.330
why do people always go
with us and SAS less

62
00:04:00.330 --> 00:04:04.620
than SAS? Because it's a,
what, what they really think

63
00:04:04.620 --> 00:04:09.390
about is the idea of
pre processing, the CSS, having

64
00:04:09.390 --> 00:04:14.730
some sort of a secondary
syntax to actually generate the

65
00:04:14.730 --> 00:04:19.200
CSS And the existence of
tools like this, the idea

66
00:04:19.200 --> 00:04:21.420
that you need a pre
compiler for CSS. Do you

67
00:04:21.420 --> 00:04:24.180
think that that's a vote
of no confidence against CSS

68
00:04:24.180 --> 00:04:27.540
itself? Is this a way
of us saying CSS? Doesn't

69
00:04:27.540 --> 00:04:28.770
do what we need it
to do. It's not a

70
00:04:28.770 --> 00:04:32.580
good spec. So we're going
to change it. No, no,

71
00:04:32.820 --> 00:04:38.670
definitely not. It's more a
manifestation of us developers being

72
00:04:38.730 --> 00:04:42.150
lazy. We like to automate
things. We don't like to

73
00:04:42.150 --> 00:04:48.210
repeat ourselves. We like to
write tourers scripts instead of

74
00:04:48.570 --> 00:04:52.980
the verbose stuff, a browse
of wood would need. So

75
00:04:53.100 --> 00:04:56.490
that's, that's the reason we
created those tools. Do you

76
00:04:56.490 --> 00:04:58.890
think that that's something that
people just have to do?

77
00:04:58.890 --> 00:05:01.200
I mean, because it seems
to me that you could

78
00:05:01.200 --> 00:05:04.140
sit down and write front
end web apps with raw

79
00:05:04.170 --> 00:05:07.500
vanilla Java script and regular
old CSS. But, but any

80
00:05:07.500 --> 00:05:11.340
large system inevitably has a
CSS, pre compiler, and very

81
00:05:11.340 --> 00:05:15.300
often has something like coffee,
script TypeScript, or some thing

82
00:05:15.300 --> 00:05:20.220
that compiles or transpiles to
JavaScript. So we no longer

83
00:05:20.400 --> 00:05:23.100
are okay with just using
the stuff that browser gave

84
00:05:23.100 --> 00:05:25.170
us. We feel like we
have to step back a

85
00:05:25.170 --> 00:05:27.780
level. We've done this, not
just with SAS, but also

86
00:05:27.780 --> 00:05:31.560
with JavaScript itself. This is
just all laziness that drives

87
00:05:31.560 --> 00:05:36.720
that. Yeah. In a way.
Yes, I think so. I

88
00:05:36.870 --> 00:05:40.080
liked to write vanilla JavaScript.
So I'm not going to

89
00:05:40.080 --> 00:05:43.980
a pitch about coffee script
and that stuff all too

90
00:05:43.980 --> 00:05:50.340
much. But when, when it
comes to CSS using a

91
00:05:50.370 --> 00:05:55.460
pre compiler, such as Zass
allows me to structure my

92
00:05:55.950 --> 00:06:01.610
code much efficiently, I can
use multiple files and have

93
00:06:01.610 --> 00:06:06.350
that processed at some built
step into one single file.

94
00:06:07.430 --> 00:06:10.010
Now I want to send
a single file to the

95
00:06:10.010 --> 00:06:14.780
browser because of the network
overhead. Right. But I don't

96
00:06:14.780 --> 00:06:19.130
want to develop in one
single file. Also. I would

97
00:06:19.130 --> 00:06:24.980
like to break down structures
like more complex CSS, selectors.

98
00:06:25.580 --> 00:06:29.090
I would like to want
not repeat them all the

99
00:06:29.090 --> 00:06:35.180
time, but reuse stuff, declare
variables and, and use those

100
00:06:35.180 --> 00:06:39.200
values instead of having to
ride the same hex code

101
00:06:39.200 --> 00:06:46.010
for the same color all
over my CSS. So that's

102
00:06:46.040 --> 00:06:49.810
the reason we use these
tools. And do you think

103
00:06:49.810 --> 00:06:52.750
that there, one of them
will win, like in that

104
00:06:52.750 --> 00:06:56.740
way, that jQuery kind of
arguably one, you know, before,

105
00:06:56.950 --> 00:06:59.650
before we had more standards
based internet, when we needed

106
00:06:59.680 --> 00:07:03.910
jQuery to exist, jQuery kind
of one, do you think

107
00:07:03.910 --> 00:07:06.700
that lessons ass will one
of them will become the

108
00:07:06.700 --> 00:07:08.850
de facto one that everyone
will use or will there

109
00:07:08.880 --> 00:07:14.170
always be different pre compilers?
Honestly, I have no idea.

110
00:07:14.230 --> 00:07:18.250
I've never used less. I've
never used stylists or myth

111
00:07:18.280 --> 00:07:21.370
or any of the other
tools. The only thing I've

112
00:07:21.370 --> 00:07:28.750
used is vanilla CSS and
Zass doesn't really matter. Yeah.

113
00:07:28.750 --> 00:07:33.190
That's a good point. Cause
you know, our standards are

114
00:07:33.190 --> 00:07:38.020
evolving. One of the key
reasons to use a pre

115
00:07:38.020 --> 00:07:44.170
compiler is to have variables
like the thing, not to

116
00:07:44.170 --> 00:07:49.810
repeat yourself with the color
definitions over font sizes or

117
00:07:49.870 --> 00:07:53.920
whatever. That's like, I have
one spot where you tweak

118
00:07:53.920 --> 00:07:59.380
a value and it reflects
throughout the whole CSS file.

119
00:08:01.120 --> 00:08:05.410
That is stuff we're going
to get natively in a

120
00:08:05.440 --> 00:08:10.240
CSS as well. That's the
CSS values they're called differently.

121
00:08:10.240 --> 00:08:16.240
They're a, I don't remember.
She has those values. Sure.

122
00:08:16.270 --> 00:08:21.250
Variables, whatever they will come
to the browser and they

123
00:08:21.250 --> 00:08:26.710
will be much more powerful
than what the CSS preprocessor

124
00:08:26.730 --> 00:08:32.740
can offer us today. That's
like, you know, 10 years

125
00:08:32.740 --> 00:08:38.110
away from actually being usable.
Right, right. It's definitely fun

126
00:08:38.110 --> 00:08:40.360
to see the kinds of
exploration that people do. And

127
00:08:40.360 --> 00:08:42.820
the kinds of hacking that
people do that is all

128
00:08:42.820 --> 00:08:46.630
as a response to the
web standards. Body's not moving

129
00:08:46.630 --> 00:08:49.360
fast enough. Basically the internet
is going to make it

130
00:08:49.360 --> 00:08:51.490
happen. Whether the web standards
people will make it happen

131
00:08:51.490 --> 00:08:58.530
or not. Yes. There has
been a shift in thinking

132
00:08:58.530 --> 00:09:01.980
actually it used to be
the way that they write

133
00:09:02.700 --> 00:09:06.540
standards and we use them.
Now we've reached a point

134
00:09:06.540 --> 00:09:12.180
where we can actually create
our own tools and have

135
00:09:12.180 --> 00:09:16.620
the standards bodies copy them.
It's like in, in JavaScript,

136
00:09:16.740 --> 00:09:21.420
you have the query select
nowadays, right? There's this function

137
00:09:21.420 --> 00:09:25.770
where you can pop in
a CSS selector and get

138
00:09:25.770 --> 00:09:29.730
a bunch of dumb nodes
out of it. That is

139
00:09:30.060 --> 00:09:37.260
the standards replication of Jay
Curry's sizzle, the engine that

140
00:09:38.190 --> 00:09:42.150
John Reznik wrote back in
the days. Right? So that's

141
00:09:42.180 --> 00:09:48.900
how things are well working
out nowadays, we create stuff,

142
00:09:48.930 --> 00:09:53.700
we try out stuff and
whatever proves itself will be

143
00:09:54.690 --> 00:09:57.530
embodied in a standard at
some point. Yeah. And it's

144
00:09:57.530 --> 00:09:59.750
a much better way to
do things other than waiting

145
00:09:59.750 --> 00:10:01.700
for a year or two
or three for a standard

146
00:10:01.700 --> 00:10:03.560
to come out. And then
finding that the standard is,

147
00:10:03.880 --> 00:10:07.760
is somehow wanting is unacceptable.
We're trying different things. And

148
00:10:07.760 --> 00:10:09.440
the one that is the
best, the one that rises

149
00:10:09.440 --> 00:10:12.230
to the top presumably then
becomes the de facto standard.

150
00:10:12.230 --> 00:10:14.690
And then in this case,
he comes an actual standard,

151
00:10:14.840 --> 00:10:20.090
which is a good thing.
Exactly. So Zack, you're saying

152
00:10:20.090 --> 00:10:22.400
Zass, like there's a Zed,
a Z in the front.

153
00:10:23.630 --> 00:10:25.160
Is that how we say
this? I've been saying it

154
00:10:25.160 --> 00:10:28.460
wrong all these years. I
have no idea. We call

155
00:10:28.460 --> 00:10:32.300
it Zass. Okay. SAS, SAS
is that. So it was

156
00:10:32.300 --> 00:10:37.670
originally written in Ruby. This
preprocessing language for CSS and

157
00:10:37.670 --> 00:10:41.150
then from people have basically
taken this kind of spec

158
00:10:41.270 --> 00:10:45.290
for, for SAS and ported
it to different things. And

159
00:10:45.500 --> 00:10:47.000
what I think is fun
about the thing that you

160
00:10:47.000 --> 00:10:50.360
did is that so SAS
was written originally in Ruby

161
00:10:50.720 --> 00:10:55.070
and then people are making
other implementations of this and

162
00:10:55.100 --> 00:10:58.280
then live SAS. You can
see it. Lip sas.org is

163
00:10:58.280 --> 00:11:02.330
a C slash C plus
plus port of, of SAS.

164
00:11:02.780 --> 00:11:08.000
And that is that that
implementation is up on, on

165
00:11:08.000 --> 00:11:12.170
GitHub. And I think it's
maintained by Hampton Catlin, then

166
00:11:12.170 --> 00:11:14.900
there's node sass, which allows
you to do things like

167
00:11:15.440 --> 00:11:18.860
tell node to call this
native versions of his bindings

168
00:11:18.860 --> 00:11:22.310
for that. And then what
you've done is you've used

169
00:11:22.310 --> 00:11:26.270
a thing called N scripting
and scripting rather, and you

170
00:11:26.630 --> 00:11:31.190
is this right? You compiled
the lib SAS version to

171
00:11:31.190 --> 00:11:35.810
JavaScript. Exactly. And did you
just do this because I

172
00:11:35.810 --> 00:11:37.490
mean, what, what is the
value of this? Because this

173
00:11:37.490 --> 00:11:39.800
is a fascinating thing because
it's it's, so it's such

174
00:11:39.800 --> 00:11:43.430
a representative thing of all
the little tools that we

175
00:11:43.430 --> 00:11:45.530
can plug in different ways
to see what's good. What's

176
00:11:45.530 --> 00:11:46.980
bad. Why we would want
to do this. Why would

177
00:11:46.980 --> 00:11:51.500
want to do that? Okay.
So We were discussing, running

178
00:11:51.530 --> 00:11:57.490
a Zass, a compiler in
the browser, and to do

179
00:11:57.490 --> 00:12:01.840
that, we would need a
JavaScript implementation of it. Right

180
00:12:01.900 --> 00:12:06.010
now. We didn't want to
actually implement as, as pauses

181
00:12:06.550 --> 00:12:09.640
because others have tried and
they have failed in, in

182
00:12:09.640 --> 00:12:12.760
keeping it up to date.
I mean the, the STSS

183
00:12:12.820 --> 00:12:17.200
J S implementation, hasn't seen
an update in two years,

184
00:12:17.680 --> 00:12:22.990
so that's not really going
to work, especially not for

185
00:12:23.020 --> 00:12:26.530
people like us who are
constantly working on things. And

186
00:12:26.530 --> 00:12:31.180
don't really have the time
to put into maintenance necessary

187
00:12:31.180 --> 00:12:34.270
to, to actually keep those
projects alive. So what we

188
00:12:34.270 --> 00:12:37.720
wanted to do besides checking
out M script and obviously

189
00:12:37.720 --> 00:12:42.340
was make our lives easy.
I was like, I wanted

190
00:12:42.340 --> 00:12:46.750
to just press a button
and get the newest lips

191
00:12:46.750 --> 00:12:49.930
ass compiled, JavaScript then, and
be done with it. It's

192
00:12:49.930 --> 00:12:53.980
like release a new version
in, in five minutes. That

193
00:12:53.980 --> 00:12:58.900
was the goal. Okay. And
that's what we did. M

194
00:12:58.900 --> 00:13:06.640
scripting is a Mozilla project
and it's I a compiler

195
00:13:07.270 --> 00:13:14.860
that translates LLVM to JavaScript.
Okay. LLVM is I have

196
00:13:14.860 --> 00:13:17.590
no idea. I think it's
like lightweight virtual machine. I'll

197
00:13:17.590 --> 00:13:22.450
look it up. So basically
the, the C plus plus

198
00:13:22.450 --> 00:13:28.720
code is translated to a
LLVM and LLVM bite code

199
00:13:28.750 --> 00:13:36.850
is translated to JavaScript. And
M scripting is a Python

200
00:13:36.880 --> 00:13:43.870
tool, I think. And the,
besides like translating the code

201
00:13:43.900 --> 00:13:48.040
Java script, which probably is
quite easy. It has to

202
00:13:48.040 --> 00:13:52.840
do a bunch of things
that aren't that easy, which

203
00:13:52.840 --> 00:13:57.640
is emulating the subsystems. It's
like in, in C plus,

204
00:13:57.640 --> 00:14:01.810
plus you can access the
memory. It's like, you can

205
00:14:01.810 --> 00:14:06.070
allocate, like, I don't know,
three kilobytes of Ram to

206
00:14:06.340 --> 00:14:09.010
do whatever you want to
do with it. Like you

207
00:14:09.010 --> 00:14:11.770
get this address and you
can, you can manipulate the

208
00:14:11.770 --> 00:14:15.490
Ram directly. You can't do
that in JavaScript. We don't,

209
00:14:15.490 --> 00:14:18.550
we don't have access like
that. Right. So M script

210
00:14:18.550 --> 00:14:24.850
and provides a, an, an
environment where it emulates memory.

211
00:14:25.600 --> 00:14:32.350
It does that by defining
a type array, which is

212
00:14:32.350 --> 00:14:38.170
one of the newer additions
to a JavaScript came in

213
00:14:38.170 --> 00:14:44.440
with the canvas, I think,
which is it's, it's simply,

214
00:14:44.950 --> 00:14:50.440
well, a type, the rate
doesn't take any values. It

215
00:14:50.470 --> 00:14:53.860
takes only values of a
certain type. So it's a

216
00:14:53.860 --> 00:14:58.660
constrained array, right? Exactly. You,
you would say Value can

217
00:14:58.660 --> 00:15:05.200
have a, I don't know,
32 bits, that'd be like

218
00:15:07.580 --> 00:15:11.770
a thing you can easily
map to memory, right? So

219
00:15:11.850 --> 00:15:15.700
that that's the idea to
get blazing, fast access. You

220
00:15:15.700 --> 00:15:17.950
need to dumb it down
for the, for the computer

221
00:15:17.950 --> 00:15:21.490
dump, By constraining the types
by, by, by going against

222
00:15:21.490 --> 00:15:25.240
JavaScript, which is very tight,
tight, tight, loose, for lack

223
00:15:25.240 --> 00:15:27.250
of a better way of
phrasing it by constraining it

224
00:15:27.250 --> 00:15:32.320
you're, you're, you're more appropriately
and more performantly simulating the,

225
00:15:32.320 --> 00:15:34.270
the, you know, on an
actual typed array of bytes

226
00:15:34.270 --> 00:15:39.100
or of, or whatever. So
LLI VM, which I guess

227
00:15:39.100 --> 00:15:41.470
doesn't really mean anything now,
but originally meant low level

228
00:15:41.470 --> 00:15:44.380
virtual machine is this compiler
infrastructure, the C plus plus

229
00:15:44.380 --> 00:15:47.620
compiler infrastructure that gives you
the optimization of all of

230
00:15:47.620 --> 00:15:51.670
these different kinds of programs.
And that is what M

231
00:15:51.670 --> 00:15:55.660
script builds on top of.
So then you're, you're literally

232
00:15:55.660 --> 00:15:58.930
taking lib SAS, which is
written in CV, a C

233
00:15:58.930 --> 00:16:01.960
plus plus, and compiling it
into a, is it fair

234
00:16:01.960 --> 00:16:07.930
to say a style of
JavaScript? Well, I would call

235
00:16:07.930 --> 00:16:12.640
it a subset of JavaScript.
It's it's JavaScript. All right.

236
00:16:12.760 --> 00:16:17.080
But it's only using a
very specific part of the

237
00:16:17.080 --> 00:16:23.650
language, right? There is very
much of a bite shifting

238
00:16:23.650 --> 00:16:28.960
by the operations Bitwise operators
in, in use. So you

239
00:16:28.960 --> 00:16:32.410
will, you wouldn't write JavaScript
like that. So it's not

240
00:16:32.410 --> 00:16:35.110
what we call one. It's
not idiomatic JavaScript. You are

241
00:16:35.110 --> 00:16:36.610
not going to look at
this and say, Oh, I

242
00:16:36.610 --> 00:16:38.620
can totally see what they're
doing here. It's probably looks

243
00:16:38.620 --> 00:16:41.500
like it's, Can't not none.
I'll forget it. Forget it.

244
00:16:41.910 --> 00:16:46.300
It's, it's a cryptic stuff.
You can't make sense of

245
00:16:46.300 --> 00:16:52.990
it, but it's JavaScript. And
it's, it's a subset Mozilla

246
00:16:53.020 --> 00:17:00.550
calls, ASM, ASM dot JS.
Exactly. Which they, again, can

247
00:17:01.780 --> 00:17:07.450
compile in a way that
can be run extremely fast.

248
00:17:07.450 --> 00:17:11.110
I think they're getting it
down to a two times

249
00:17:11.110 --> 00:17:14.920
native speed or something. Wow.
So it's extremely fast for

250
00:17:14.950 --> 00:17:23.230
JavaScript. It's it's blowing, blowing
you away. And we just

251
00:17:23.740 --> 00:17:28.270
did with the, this C
plus plus library lips ass,

252
00:17:28.300 --> 00:17:34.060
what Mozilla did with I
picked Citadel. Yeah, I think,

253
00:17:34.180 --> 00:17:39.130
yeah. You can see that@unrealengine.com
slash HTML five, it's basically

254
00:17:39.400 --> 00:17:42.820
the Citadel demo in the
browser. I've seen it running

255
00:17:42.820 --> 00:17:45.850
at 60 frames a second.
It's it's unreal. And literally

256
00:17:45.850 --> 00:17:48.790
is unreal. You're wandering around
in a three D world

257
00:17:48.790 --> 00:17:52.160
and it's done entirely in
JavaScript. Well, Surely it's not

258
00:17:52.160 --> 00:17:55.490
done in JavaScript. It's done
in C plus plus. Well,

259
00:17:55.550 --> 00:17:58.880
yeah, but you're correct. It's,
It's compiled to JavaScript so

260
00:17:58.880 --> 00:18:02.240
it can run in your
browser. And that is the

261
00:18:02.240 --> 00:18:05.570
new black That is the
new black. I love that.

262
00:18:05.930 --> 00:18:11.030
Yeah. I mean like you,
you corrected me appropriately. It's

263
00:18:11.240 --> 00:18:13.850
written in C plus, plus
it is thought about in

264
00:18:13.850 --> 00:18:16.910
C plus plus, but the,
the, the byte code is

265
00:18:16.910 --> 00:18:21.380
this, this low level subset
of JavaScript and, you know,

266
00:18:21.380 --> 00:18:26.420
spider monkey is this engine
inside of, of Mozilla. And

267
00:18:26.420 --> 00:18:29.390
then Odin monkey is this
project name for this optimizing

268
00:18:29.390 --> 00:18:31.460
compiler. So what they do
is they take this as

269
00:18:31.460 --> 00:18:33.200
and dot JS and they
say, all right, if we

270
00:18:33.200 --> 00:18:37.010
know that we're targeting this
subset of JavaScript, then we,

271
00:18:37.160 --> 00:18:39.410
and we know this is
what our goal is. We

272
00:18:39.410 --> 00:18:42.320
can optimize this JavaScript differently
than the JavaScript that you

273
00:18:42.320 --> 00:18:46.340
write idiomatically. And that allows
them to just optimize the

274
00:18:46.370 --> 00:18:50.000
hell out of it. It's
really, really amazing. So then

275
00:18:50.000 --> 00:18:53.660
it makes sense that JavaScript
really is the assembly language

276
00:18:53.690 --> 00:18:55.310
for the web at this
point. I mean, it's the

277
00:18:55.310 --> 00:19:00.080
closest thing we have. It's
been called that quite a

278
00:19:00.080 --> 00:19:03.620
number of times. Yes. Do
you think that that's okay,

279
00:19:03.680 --> 00:19:05.480
like, is this, is, is
this just a bunch of

280
00:19:05.480 --> 00:19:07.880
experiments or do you really
think that this means that

281
00:19:08.600 --> 00:19:12.110
JavaScript and Silverlight and Java
rather, and Silverlight, and flash,

282
00:19:12.140 --> 00:19:15.290
these virtual machine plugins are
just no longer needed. We

283
00:19:15.290 --> 00:19:18.200
have a virtual machine it's
in the browser and it

284
00:19:18.200 --> 00:19:24.320
is JavaScript. Yes. Yeah. Yeah.
I would say that I'll

285
00:19:24.320 --> 00:19:28.730
virtual machine for the web
is JavaScript. Definitely. So then,

286
00:19:28.850 --> 00:19:31.220
so then you went and
you took the N M

287
00:19:31.220 --> 00:19:34.820
script and lib says the
result of compiling lips as

288
00:19:34.820 --> 00:19:37.580
through this and script and
library. And then what did

289
00:19:37.580 --> 00:19:39.020
you, what did you kind
of wrap around it? You

290
00:19:39.020 --> 00:19:42.830
put this on a convenience
API around it. Yes. So

291
00:19:42.830 --> 00:19:47.000
what you get out of
em, scripting is the, the

292
00:19:47.000 --> 00:19:50.390
environment and your C plus
plus code in JavaScript. You

293
00:19:50.420 --> 00:19:57.020
can call it in a
quite ugly way actually. And

294
00:19:57.050 --> 00:20:00.740
I didn't, I didn't want
to, to use that and

295
00:20:00.860 --> 00:20:03.920
I didn't want to distribute
that. So we wrote a

296
00:20:03.950 --> 00:20:11.120
convenience API on top of
it, especially since M script

297
00:20:11.120 --> 00:20:16.970
and the script and environment
also provides the, the a

298
00:20:16.970 --> 00:20:22.520
pile system. So any a
C application, any C plus

299
00:20:22.520 --> 00:20:26.330
plus application that relies on,
on the file system being

300
00:20:26.570 --> 00:20:28.910
present can, can actually run
in the browser as well.

301
00:20:29.630 --> 00:20:36.290
And lips ass or Zass
can access other files. It

302
00:20:36.290 --> 00:20:40.400
can include, or actually import
other files. And I wanted

303
00:20:40.400 --> 00:20:45.620
that feature in the browser
as well. So we used

304
00:20:45.640 --> 00:20:51.940
the simulate fire system I'm
script and gave us, and

305
00:20:51.970 --> 00:20:58.540
just made it usable is
just like one function call,

306
00:20:58.570 --> 00:21:01.360
right file. Give it a
name, give it some content.

307
00:21:01.390 --> 00:21:07.090
And that's it not hassle
with, is that director directory

308
00:21:07.090 --> 00:21:10.900
really available? Do we need
to create it? Other permissions

309
00:21:10.900 --> 00:21:15.370
in, in order is whatever.
No, it's just this very

310
00:21:15.370 --> 00:21:19.440
high level, write it and
be done with it. So,

311
00:21:19.470 --> 00:21:22.530
so in SAS, you can
go and say at import

312
00:21:22.830 --> 00:21:25.890
Fu and that'll do file
system access, and it'll give

313
00:21:25.890 --> 00:21:28.860
you the flexibility, like you
said before to have different

314
00:21:28.860 --> 00:21:30.960
files and, you know, a
nice build system. And then

315
00:21:30.960 --> 00:21:34.560
the result is one, you
know, one CSS file. So

316
00:21:34.560 --> 00:21:37.470
you're saying that you map
that file system access to

317
00:21:37.550 --> 00:21:42.840
two to two URL access
to just HTP access. Not

318
00:21:42.900 --> 00:21:46.560
quite we have a demo
for that, but we didn't

319
00:21:47.160 --> 00:21:50.610
follow through with it. Cause
at some point we actually

320
00:21:50.610 --> 00:21:55.020
had to get back to
our regular day jobs, what

321
00:21:55.020 --> 00:22:00.330
we did an ABL or
we, we created everything necessary

322
00:22:00.330 --> 00:22:06.390
to do just that, that
you could link to one

323
00:22:06.480 --> 00:22:11.190
Zass file and it would
just resolve every import. It,

324
00:22:11.490 --> 00:22:14.640
it finds because of flee,
like it would do on

325
00:22:14.640 --> 00:22:17.430
the, on the file system.
We didn't implement it all

326
00:22:17.430 --> 00:22:22.050
the way through, but it's
definitely possible. And so the

327
00:22:22.050 --> 00:22:25.050
result of this now is
that you've got both the

328
00:22:25.050 --> 00:22:28.080
ability to go and say
jazz dot compile, you know,

329
00:22:28.080 --> 00:22:31.740
in JavaScript in the browser,
either synchronously or asynchronously using

330
00:22:32.160 --> 00:22:35.730
workers too. And what is
the point of this? Like

331
00:22:35.730 --> 00:22:37.740
to what end is this?
Just an example of like

332
00:22:37.740 --> 00:22:39.780
a great example of how
we can plug all the

333
00:22:39.780 --> 00:22:42.270
Lego pieces together that the
world has given us into

334
00:22:42.270 --> 00:22:45.750
something different, or what value
do you think that this

335
00:22:45.750 --> 00:22:48.000
provides? Like, how is this
making your, your day job

336
00:22:48.030 --> 00:22:54.390
better? It doesn't, I mean,
we're not using Zass JS

337
00:22:54.450 --> 00:22:59.670
at, at the office. I
created it to prove a

338
00:22:59.670 --> 00:23:04.320
point. I live on really
crappy internet. I'm a web

339
00:23:04.320 --> 00:23:07.110
developer. I live on the
internet, but my connection usually

340
00:23:07.110 --> 00:23:09.910
is quite bad. I live
in a hotel, you know,

341
00:23:09.910 --> 00:23:14.340
hotel, wifi usually sucks. So
I fall back to my

342
00:23:14.340 --> 00:23:19.650
3g, which usually sucks as
well. And when I'm home,

343
00:23:19.650 --> 00:23:27.120
I have a one ambit
line, which sucks. So I'm

344
00:23:27.120 --> 00:23:30.510
very far away from, from
the internet. Most of my

345
00:23:31.380 --> 00:23:39.060
not working day, which means
I don't like network latency

346
00:23:39.060 --> 00:23:43.470
all that much. I wanted
to use tools like JS

347
00:23:43.470 --> 00:23:47.780
bin or JS fiddle or
dabbler or whatever you, you

348
00:23:47.780 --> 00:23:52.040
name it and not send
everything I do to a

349
00:23:52.040 --> 00:23:54.770
central server. I have it
processed there and send the

350
00:23:54.770 --> 00:23:57.710
results back down to me,
but have it processed in

351
00:23:57.710 --> 00:24:01.580
my browser. Cause you know,
I'm working on a freaking

352
00:24:01.610 --> 00:24:05.900
Mac book pro this thing
has power. Why not use

353
00:24:05.900 --> 00:24:09.400
it? That's interesting. So the
talk that I'm going to

354
00:24:09.400 --> 00:24:12.460
give in your hotel is
going to talk about this

355
00:24:12.460 --> 00:24:15.610
idea that we're really not
pushing the browser as much

356
00:24:15.610 --> 00:24:18.010
as we should. And I
talk a little bit about

357
00:24:18.010 --> 00:24:20.410
this idea that there's a
lot of machines and virtual

358
00:24:20.410 --> 00:24:23.320
machines in the cloud, whether
it be Amazon or Azure

359
00:24:23.320 --> 00:24:25.900
or wherever we're hosting our
stuff at. And we we'd

360
00:24:25.900 --> 00:24:28.360
like to scale those virtual
machines up on the backend,

361
00:24:28.360 --> 00:24:30.250
but we, I think we
forget that we've got either

362
00:24:30.400 --> 00:24:34.270
dual or quad core machines
on the client side. And

363
00:24:34.660 --> 00:24:36.820
if we, if we assume,
like we talked about a

364
00:24:36.820 --> 00:24:39.790
minute ago, that these are
virtual machines, maybe we could

365
00:24:39.820 --> 00:24:42.010
push these machines a little,
a little more. Now you've

366
00:24:42.010 --> 00:24:45.040
got a Mac book pro
I've got an iPhone. How

367
00:24:45.370 --> 00:24:48.340
appropriate are solutions like this
in an iPhone? Can I

368
00:24:48.340 --> 00:24:51.490
run in script and eyes,
JavaScript on an iPhone and,

369
00:24:51.770 --> 00:24:55.690
and, and gain the benefits
of it. It will run.

370
00:24:56.170 --> 00:25:03.340
It just won't run as
fast. It really depends on

371
00:25:03.340 --> 00:25:08.800
what you're trying to achieve.
If you want independence from,

372
00:25:08.810 --> 00:25:12.670
from the network, it's the
only way to actually go.

373
00:25:13.810 --> 00:25:20.110
If you want to reduce
the traffic on your backend,

374
00:25:22.810 --> 00:25:28.090
it's a trade off. Really.
It's like, you know, you

375
00:25:28.090 --> 00:25:34.870
can't reliably figure out what
a system, the browser's running

376
00:25:34.870 --> 00:25:39.370
on that you can, but
how much power it has.

377
00:25:39.880 --> 00:25:42.160
That's an interesting point. I
never thought about that. Like

378
00:25:42.250 --> 00:25:44.530
I might, you know, we
have like responsive design and

379
00:25:44.530 --> 00:25:48.610
adaptive frameworks, but from a
JavaScript perspective, you know, like

380
00:25:48.640 --> 00:25:51.160
for example, if you've got
two megabytes of minified and

381
00:25:51.160 --> 00:25:54.070
script and Java script, you
might want to know ahead

382
00:25:54.070 --> 00:25:55.780
of time, whether this is
going to a Mac book

383
00:25:55.810 --> 00:25:57.670
pro or whether this is
going to an iPhone or

384
00:25:57.670 --> 00:26:01.240
an old Android device, because
it could destroy the device.

385
00:26:01.240 --> 00:26:03.040
You know, it could be
like smoke and fire coming

386
00:26:03.040 --> 00:26:07.360
out of the phone at
this point. Yes. Figuratively. Yes.

387
00:26:09.370 --> 00:26:13.510
A mobile browser can only
take so much data. Cause

388
00:26:13.510 --> 00:26:16.210
it only has so much
Ram. I mean, my MacBook

389
00:26:16.210 --> 00:26:21.250
has 16 gigs of memory.
I can do anything I

390
00:26:21.250 --> 00:26:25.240
want on this machine, but
my, my iPhone, I'm not

391
00:26:25.240 --> 00:26:28.120
sure. Does it have a
gig? Yeah. I think it's

392
00:26:28.120 --> 00:26:30.430
a gig. But even then
what's available to you really?

393
00:26:31.420 --> 00:26:34.150
Exactly. Even if you have
a gig of memory on

394
00:26:34.150 --> 00:26:37.630
the device, how much memory
does your browser have? And

395
00:26:38.020 --> 00:26:41.860
from that memory, the browser
has how much memory is

396
00:26:41.870 --> 00:26:47.400
allowed for your website. It's
like, it's really not that

397
00:26:47.400 --> 00:26:50.790
much. And you also need
to keep in mind that

398
00:26:50.850 --> 00:26:56.250
every image you load is
stored in memory as well.

399
00:26:56.640 --> 00:27:00.830
So there's not that much
stuff to go around, But

400
00:27:00.950 --> 00:27:04.130
at the same time, we
still see websites, big corporate

401
00:27:04.130 --> 00:27:08.480
websites that do sorting of
lists of a couple of

402
00:27:08.480 --> 00:27:11.870
hundred items on the server
side. You know, surely there

403
00:27:11.870 --> 00:27:13.520
must be some line in
the sand that we can

404
00:27:13.520 --> 00:27:15.260
draw that says, yeah, if
you're going to start five

405
00:27:15.260 --> 00:27:18.380
or 600 items, bring that
down as JavaScript and let

406
00:27:18.380 --> 00:27:22.400
them put the phones sorted
rather than send view, state

407
00:27:22.430 --> 00:27:24.650
back to the server and
sorted on a web farm

408
00:27:24.650 --> 00:27:29.150
and then bring the HTML
back. It really depends on

409
00:27:29.180 --> 00:27:32.960
the amount of data you're
talking about. But preferably you

410
00:27:32.960 --> 00:27:37.190
would do sorting on the
device, not on a server

411
00:27:38.000 --> 00:27:45.160
unless you're talking like millions
of records of things. If

412
00:27:45.170 --> 00:27:49.790
you're talking about hundreds, do
it on the problem. Yeah,

413
00:27:49.880 --> 00:27:54.140
absolutely. I always like using
<inaudible> dot JS and I

414
00:27:54.140 --> 00:27:56.300
try to see how far
I can push D three

415
00:27:56.300 --> 00:28:00.590
and things like it on
the, on the phone. Like

416
00:28:00.590 --> 00:28:03.650
I, I keep coming upon
old websites that do reporting

417
00:28:03.650 --> 00:28:05.420
and stuff and they either
do the reporting and the

418
00:28:05.420 --> 00:28:09.110
charts in, in flash, which
of course does me no

419
00:28:09.110 --> 00:28:11.960
good on my, on my
phone. Or they generate the

420
00:28:11.960 --> 00:28:14.030
PNG on the server side
and then send me a

421
00:28:14.030 --> 00:28:18.460
custom PNG. And I think
that using either D three

422
00:28:18.460 --> 00:28:21.530
or some chart or some
SVG based chart engine inside

423
00:28:21.530 --> 00:28:24.890
of the phone is going
to be a much better

424
00:28:24.890 --> 00:28:28.850
than generating some huge PNG
and then sending it across

425
00:28:28.850 --> 00:28:31.400
the wire like that. That's
kind of my go to

426
00:28:31.400 --> 00:28:37.250
example, not only, Only that
consider what you can do

427
00:28:37.250 --> 00:28:42.110
with SVG, it's interactive. You,
you can, you can actually

428
00:28:42.110 --> 00:28:47.150
animate it. You can drill
down into content. You can

429
00:28:47.150 --> 00:28:50.510
do all sorts of amazing
stuff. A PNG, just cats

430
00:28:51.410 --> 00:28:56.540
that at one point you
just can't do that on

431
00:28:56.540 --> 00:28:59.870
your back end. You want
that interactive stuff to happen

432
00:28:59.870 --> 00:29:03.410
in the browser. And if
you've reached that point, there

433
00:29:03.440 --> 00:29:06.650
really isn't a way to
do anything on the backend

434
00:29:06.650 --> 00:29:09.290
anymore. No, I know that
you said that you'd like

435
00:29:09.290 --> 00:29:13.220
to do vanilla JavaScript. Do
you write SVG yourself as

436
00:29:13.220 --> 00:29:17.750
well? Do you write vanilla
SVG? It really depends on

437
00:29:17.750 --> 00:29:26.090
what I'm doing. I would
rather write SVG as a

438
00:29:26.090 --> 00:29:31.490
file. Then use some JavaScript
library if I don't have

439
00:29:31.490 --> 00:29:34.130
to, but it really depends
on am I looking at

440
00:29:34.130 --> 00:29:36.770
an icon or something, or
am I looking at a

441
00:29:36.770 --> 00:29:42.400
very complex structure that needs
animation and stuff, then There

442
00:29:42.400 --> 00:29:46.810
isn't a way around constructing
for stuff in JavaScript. Right?

443
00:29:46.840 --> 00:29:49.780
Right. What people can learn
more about the stuff that

444
00:29:49.780 --> 00:29:53.260
you've built, like your I
dot JS and you know,

445
00:29:53.260 --> 00:29:58.300
smarty template engine awhile back
all up@medializeddotgithub.com. I'm going to

446
00:29:58.300 --> 00:30:01.030
put all of this information
in the show notes, as

447
00:30:01.030 --> 00:30:04.630
well as your really interesting
blog post about why you

448
00:30:04.630 --> 00:30:09.010
did this SAS dot JS
and in response to actually

449
00:30:09.010 --> 00:30:12.280
leave a ruse, a kind
of speculative tweet about, I

450
00:30:12.280 --> 00:30:15.070
wonder if there is a
JavaScript version of SAS and

451
00:30:15.070 --> 00:30:17.650
then you were apparently in
the hotel room with your

452
00:30:17.650 --> 00:30:19.390
buddy and you guys decided
to just make it. And

453
00:30:19.390 --> 00:30:22.180
I thought that the, the
blog post is a really

454
00:30:22.180 --> 00:30:26.680
interesting as you call it
incident report about this exploration

455
00:30:26.680 --> 00:30:29.140
and why you did it.
It's pretty fascinating reading. I'll

456
00:30:29.140 --> 00:30:30.940
put that in the show
notes as well. Thanks for,

457
00:30:31.180 --> 00:30:35.440
for chatting with me today.
My pleasure. This has been

458
00:30:35.440 --> 00:30:38.110
another episode of Hanselminutes and
we'll see you again next

459
00:30:38.160 --> 00:30:45.240
<inaudible>.

