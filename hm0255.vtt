WEBVTT FILE

1
00:00:12.330 --> 00:00:17.970
From hanselminutes.com. It's Hansel minutes,
a weekly discussion with web

2
00:00:17.970 --> 00:00:22.770
developer I'm technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.770 --> 00:00:30.120
number two 55 recorded live
Thursday, February 24th, 2011. Support for Hanselman

4
00:00:30.120 --> 00:00:34.290
it's provided by Tellerik rad
controls, the most comprehensive suite

5
00:00:34.290 --> 00:00:42.990
of components for windows forms
and asp.net web applications online@wwwdottelerik.com.

6
00:00:43.710 --> 00:00:46.980
In this episode, Scott talks
with rune Sorenson from app

7
00:00:46.980 --> 00:00:52.440
Harbor about the state of
the cloud. Hi, this is

8
00:00:52.440 --> 00:00:54.870
Scott Hanselman, and this is
another episode of Hansel minutes.

9
00:00:55.500 --> 00:00:58.410
And today we're talking with
ruins Sorenson from app Harbor.

10
00:00:59.190 --> 00:01:01.920
I want to talk about
these clouds and the mini

11
00:01:01.920 --> 00:01:05.010
clouds that are out there,
particularly ones that are what

12
00:01:05.010 --> 00:01:08.520
I like to call opinionated
clouds and ruin works for

13
00:01:08.910 --> 00:01:12.440
for app Harbor. How are
you, sir? I'm fine. Thank

14
00:01:12.440 --> 00:01:19.430
you, Scott. So you're running
a cloud effectively, right? Yeah,

15
00:01:19.430 --> 00:01:21.650
we are. We are running
up hopper, which is basically

16
00:01:21.650 --> 00:01:26.150
a platform, a service allowing
developers to push their code

17
00:01:26.150 --> 00:01:29.660
up to us and yeah,
they probably the applications in

18
00:01:29.660 --> 00:01:34.010
no time. What is the
difference between in your mind

19
00:01:34.010 --> 00:01:37.070
between a holster where I
can just go up and

20
00:01:37.580 --> 00:01:40.490
find an ISP and a
host and pay $5 a

21
00:01:40.490 --> 00:01:44.390
month and I've got a
effectively, a machine somewhere, I

22
00:01:44.390 --> 00:01:47.300
suppose it could be in
the cloud and something like

23
00:01:47.330 --> 00:01:53.300
Amazon or Azure or, or
app Harbor. Well, basically I

24
00:01:53.300 --> 00:01:57.080
think, I think did the
scalability part is a big

25
00:01:57.110 --> 00:02:00.530
part of it. So you
actually, you know, assure us

26
00:02:01.400 --> 00:02:05.360
assuring that popper you should
too, is more used to

27
00:02:05.360 --> 00:02:10.370
what scaling. And there's a
whole whole experience pod, especially

28
00:02:10.370 --> 00:02:14.840
for tools like app hopper
and to some extent sure.

29
00:02:15.680 --> 00:02:19.820
Where we provide an additional
layer of convenience to people

30
00:02:20.000 --> 00:02:24.830
wanting to, to deploy applications.
So it's the, it's the

31
00:02:24.830 --> 00:02:29.120
elasticity, the idea that I'm
gonna make my little application

32
00:02:30.110 --> 00:02:34.940
available. And if I become
the next Twitter, my holster

33
00:02:34.940 --> 00:02:39.940
will, will expand. Yeah, you'll
be ready for that. W

34
00:02:39.940 --> 00:02:42.490
when they say that, do
they mean literally that it

35
00:02:42.500 --> 00:02:45.260
will just work? It'll just
expand that I could sleep.

36
00:02:45.500 --> 00:02:47.240
I could sleep well at
night and wake up in

37
00:02:47.240 --> 00:02:49.070
the next morning and find
out that I got on

38
00:02:49.070 --> 00:02:51.710
slash dot and a million
hits and I didn't have

39
00:02:51.710 --> 00:02:55.010
to do anything. Or does,
does that kind of scale

40
00:02:55.010 --> 00:02:57.680
and elasticity happens slowly over
a period of weeks or

41
00:02:57.680 --> 00:03:02.350
months. It, it really Depends
on kind of service, you

42
00:03:02.350 --> 00:03:04.720
know, with the UC too,
for instance, you actually have

43
00:03:04.840 --> 00:03:10.210
to purchase additional instances and
make sure your, your platform

44
00:03:10.210 --> 00:03:13.990
can actually, it basically just
has the capability of scaling

45
00:03:14.380 --> 00:03:16.150
it, but you have to
do something for it, for

46
00:03:16.150 --> 00:03:19.390
yourself and set up the
whole system S for assure

47
00:03:19.390 --> 00:03:21.670
you, you actually have to
do a lot of work

48
00:03:21.760 --> 00:03:26.650
in order to scale up
all down. Whereas I guess,

49
00:03:26.650 --> 00:03:29.500
I guess what retrying with
Papa is to make this

50
00:03:29.500 --> 00:03:33.010
a as ECS for people
as possible just to basically

51
00:03:33.370 --> 00:03:37.240
going in and using space
and adding a couple of

52
00:03:37.240 --> 00:03:43.590
positional education. Where do you
think that hosts fit in

53
00:03:43.590 --> 00:03:46.260
this kind of this new
world? I mean, you're saying

54
00:03:46.260 --> 00:03:49.110
platform as a service, you're
saying cloud, but you're not

55
00:03:49.110 --> 00:03:53.460
saying that you're a host.
What about all those hosts

56
00:03:53.460 --> 00:03:56.130
out of those $5 hosts
that GoDaddy's and things like

57
00:03:56.130 --> 00:03:58.800
that, as well as the
expensive hosts where they'll give

58
00:03:58.800 --> 00:04:02.370
you your own virtual machine,
a single virtual machine at

59
00:04:02.370 --> 00:04:05.910
their, at their hosting provider,
where do they go in

60
00:04:05.910 --> 00:04:10.860
this new new world order?
Yeah, well, honestly, I don't

61
00:04:10.860 --> 00:04:15.480
really know it's I think
if, if they can keep

62
00:04:15.480 --> 00:04:19.230
up with the pace and
the basically provide some of

63
00:04:19.230 --> 00:04:22.500
the same kind of experience
to people is they'll be

64
00:04:22.500 --> 00:04:25.200
good. But if, if they,
if they keep on just

65
00:04:25.200 --> 00:04:32.310
offering a $5 hosting plan
with upload, I don't see

66
00:04:32.310 --> 00:04:34.830
much room for them in
this world, if it's because

67
00:04:34.830 --> 00:04:39.720
we're, we're going a lot
towards service and providing people

68
00:04:39.720 --> 00:04:45.870
with exactly the tools and
the services they need. And

69
00:04:46.440 --> 00:04:48.810
I don't, I don't really
think as that host a

70
00:04:48.810 --> 00:04:55.050
host, like GoDaddy provides that
Do what, what is, what

71
00:04:55.050 --> 00:04:57.240
is Heroku and what did
they, what did they do?

72
00:04:57.240 --> 00:05:00.540
What did they introduce to
the development environment, to the

73
00:05:00.840 --> 00:05:04.410
community that got people so
excited that, that others would

74
00:05:04.410 --> 00:05:09.040
emulate them? Yeah, well officially
hope Heroku is still on

75
00:05:09.040 --> 00:05:13.530
that simple deployment mechanism where,
where you push your code

76
00:05:13.830 --> 00:05:16.860
to a Roku with get,
and it was no code

77
00:05:16.860 --> 00:05:23.010
modifications. And, and I wrote
Justin magically deploys your application.

78
00:05:23.850 --> 00:05:29.490
So it's also an open
platform where multiple services are

79
00:05:29.490 --> 00:05:33.510
readily available, available. And you
can just add those, like

80
00:05:34.650 --> 00:05:42.600
within space or using the
Heroku console, which is, I

81
00:05:42.600 --> 00:05:46.050
guess, basically the convenience and
seeing that, that you can

82
00:05:46.500 --> 00:05:52.290
hit your app up and
running within 30 seconds, getting

83
00:05:52.290 --> 00:05:55.740
people really excited, and the
fact that you can go

84
00:05:55.740 --> 00:05:58.390
in and you can see,
all right, if I wanted

85
00:05:58.400 --> 00:06:01.550
to, I could, I could
go up to 20 dinos.

86
00:06:05.750 --> 00:06:07.950
I can, I can save
up to 20. It's an

87
00:06:07.960 --> 00:06:11.390
associate for one, if I
want more redundancy, if I

88
00:06:11.390 --> 00:06:20.900
want more, or I could
go with a server that

89
00:06:21.230 --> 00:06:32.680
will allow me to my
customers. I think primarily the,

90
00:06:32.680 --> 00:06:36.500
the use of fuse and
the open platform, the fact

91
00:06:36.500 --> 00:06:39.220
that you don't have to
change anything to deploys with

92
00:06:39.220 --> 00:06:44.050
the class. It seems to
me like the difference really

93
00:06:44.050 --> 00:06:48.190
is that on a classic
host, you're, you're doing the

94
00:06:48.190 --> 00:06:51.910
build locally. You're doing the
tests locally and you're pushing

95
00:06:51.910 --> 00:06:56.710
the binaries and configuring effectively
a system, but not necessarily

96
00:06:56.710 --> 00:06:59.560
a system that knows about
applications and in a regular

97
00:06:59.560 --> 00:07:02.890
ISP, there's a computer out
there somewhere, but it doesn't

98
00:07:02.890 --> 00:07:06.250
necessarily know I'm going to
deploy an app and I

99
00:07:06.250 --> 00:07:09.310
have to deploy the binary.
But in these, these new

100
00:07:09.310 --> 00:07:13.090
models, I'm deploying the source,
they're doing the bill, they're

101
00:07:13.090 --> 00:07:17.320
running the tests and they
are not thinking about themselves.

102
00:07:17.320 --> 00:07:19.660
Those end points. They're not
thinking about themselves as a,

103
00:07:19.870 --> 00:07:23.630
as a computer. They are
literally an application server. They're,

104
00:07:23.630 --> 00:07:26.860
they're opinionated. They're assuming that
there's, I am here to

105
00:07:26.860 --> 00:07:30.070
receive an app and I
know how your workflow should

106
00:07:30.070 --> 00:07:34.390
be. So then they're kind
of imposing the same convention

107
00:07:34.390 --> 00:07:37.480
over configuration that you see
and, you know, in rails

108
00:07:37.480 --> 00:07:40.930
apps and now an asp.net
MVC applications. So, I mean,

109
00:07:41.110 --> 00:07:43.600
opinionated hosts is kind of
what this feels like to

110
00:07:43.600 --> 00:07:48.100
me. Yeah, it's definitely like,
so basically a popper is

111
00:07:48.550 --> 00:07:52.120
also a convention or configuration.
We make a lot of

112
00:07:52.210 --> 00:07:58.930
assumptions about when we receive
it, because we also build

113
00:07:58.930 --> 00:08:03.310
it and run people. And
basically to make that happen,

114
00:08:03.340 --> 00:08:07.150
you have to tell people
alive, you have to, in

115
00:08:07.150 --> 00:08:12.400
your repository, you only have
a single solution file if

116
00:08:12.400 --> 00:08:15.490
you want to configure it
somehow. So you get the

117
00:08:15.490 --> 00:08:19.480
ability to have multiple solution
files. Well, then you ship

118
00:08:19.510 --> 00:08:22.120
all one of them at
hopper, and this will be

119
00:08:22.120 --> 00:08:27.550
the one we use to
build. And the basic thing

120
00:08:28.240 --> 00:08:31.060
works by a lot in
a single solution file. I

121
00:08:31.060 --> 00:08:33.610
can only have one web
project, but we know which

122
00:08:33.610 --> 00:08:36.880
ones to build, which ones
to publish to our service.

123
00:08:37.810 --> 00:08:40.450
And basically, I think this
is a, I think this

124
00:08:40.470 --> 00:08:43.870
is a logical setup in
a lot of ways. Why

125
00:08:43.950 --> 00:08:48.670
would you want to line
up occasion with multiple websites

126
00:08:50.290 --> 00:08:55.110
or you might have a
good reason to, but it's

127
00:08:55.290 --> 00:09:00.780
really the common case. We're
very application centric as to

128
00:09:00.780 --> 00:09:08.930
a server capacities. And I
thought it was interesting that

129
00:09:08.960 --> 00:09:13.070
even though you're doing, you're
a.net platform as a service,

130
00:09:13.370 --> 00:09:16.370
that you are opinionated enough
that you decided to get

131
00:09:16.880 --> 00:09:20.030
the source control system was
how you were going to

132
00:09:20.030 --> 00:09:23.570
do things you didn't use
mercurial, which tends to be

133
00:09:23.570 --> 00:09:28.160
considered more friendly on windows
platforms or TFS. What was

134
00:09:28.160 --> 00:09:31.790
it about get that was
so compelling that you felt

135
00:09:31.790 --> 00:09:33.830
that it was important to
pick an, a base your

136
00:09:33.830 --> 00:09:36.320
entire platform on it as
a service on, on it

137
00:09:36.320 --> 00:09:40.310
as a source control system?
Oh, well basically for us

138
00:09:40.610 --> 00:09:44.180
get the stuff to stop.
It was a natural thought

139
00:09:44.180 --> 00:09:48.380
for us because we, we
all love it. I appreciate

140
00:09:48.380 --> 00:09:51.770
that. Well, that's the most
important thing for us is

141
00:09:51.830 --> 00:09:57.890
that pusher cook with some
kind of, obviously we want

142
00:09:57.890 --> 00:10:00.080
to make it as convenient
as possible. So we will

143
00:10:00.080 --> 00:10:05.390
ask your support very soon,
actually finish it, putting the

144
00:10:05.390 --> 00:10:08.640
final touches on it. So,
so this is not a,

145
00:10:08.660 --> 00:10:11.900
this is not a Holy
war for forget. It's more

146
00:10:11.900 --> 00:10:18.260
a, it's more just our
preference. And naturally I see,

147
00:10:18.260 --> 00:10:21.350
I see. So it's just,
just the proof of concept,

148
00:10:21.350 --> 00:10:23.720
but the platform itself isn't
dependent on it in some

149
00:10:23.720 --> 00:10:29.720
way. No. And then basically
I think what's also important

150
00:10:29.720 --> 00:10:33.130
to know is that when
we're building a popper or

151
00:10:33.170 --> 00:10:36.980
in the initial phase of
it, we mainly seek to

152
00:10:36.980 --> 00:10:40.580
solve our own problems in
deploying. This was really how

153
00:10:40.580 --> 00:10:45.890
the platform has matured over
time. And honestly, we haven't

154
00:10:45.890 --> 00:10:50.240
used material for this thing.
So it wasn't really a

155
00:10:50.240 --> 00:10:53.750
problem. Obviously now, as we're
seeing a lot of users

156
00:10:54.320 --> 00:10:58.340
wanting material, we want to
implement it and it's our

157
00:10:58.340 --> 00:11:01.430
most requested feature. And we're
really looking forward to providing

158
00:11:01.430 --> 00:11:05.300
it to our users. It
would be interesting if I

159
00:11:05.300 --> 00:11:11.000
could commit to code Plex,
then log into app Harbor

160
00:11:11.000 --> 00:11:14.870
and have you grab from
the trunk automatically. Yeah, actually

161
00:11:14.870 --> 00:11:19.160
we thought about this at
all based approach where you

162
00:11:19.160 --> 00:11:22.730
specify a, some, some retro
somewhere and say a lot

163
00:11:22.730 --> 00:11:25.010
of on a pull from
there I'm deployed right now,

164
00:11:25.700 --> 00:11:31.070
this branch or whatever. Actually,
we, we fought a lot

165
00:11:31.070 --> 00:11:35.390
about that approach and I
think we will in summit

166
00:11:35.490 --> 00:11:39.500
that sometimes also, because it
will actually make it easier

167
00:11:39.500 --> 00:11:44.570
for us many more ways,
ways of getting code in,

168
00:11:44.690 --> 00:11:47.300
because my malware actually doing
an off work in order

169
00:11:47.300 --> 00:11:51.980
for get to work and
to receive people's code. If

170
00:11:51.980 --> 00:11:55.180
we could just pull in
from multiple places, what I

171
00:11:55.180 --> 00:11:58.380
shouldn't make our job easier,
What is underneath it? I

172
00:11:58.380 --> 00:12:01.920
mean, sometimes when companies with
really kind of cool and

173
00:12:01.950 --> 00:12:06.690
minimalist websites come out with
a cool story, we have

174
00:12:06.690 --> 00:12:10.140
no idea what's behind it.
I mean, are you two

175
00:12:10.140 --> 00:12:12.510
guys in a garage or
is this all built on

176
00:12:12.510 --> 00:12:15.480
Amazon anyway? And you're hiding
Amazon from us or what

177
00:12:15.480 --> 00:12:19.980
what's, where is this cloud?
Yeah, actually right now we're

178
00:12:19.980 --> 00:12:25.950
free people in an apartment
office, but we're, we're building

179
00:12:25.950 --> 00:12:31.020
this on Amazon issue too.
And yeah, using that sr

180
00:12:36.140 --> 00:12:41.430
or database stuff like that,
we were entirely built. And

181
00:12:42.990 --> 00:12:47.010
that being said, our, our
design is actually made so

182
00:12:47.010 --> 00:12:51.540
that future could provide people
with hosting on for instance

183
00:12:51.540 --> 00:12:56.600
this year and just, and
just handle the bills on

184
00:12:56.610 --> 00:13:01.620
our own backend. Okay. See
that, that suddenly my mind,

185
00:13:01.810 --> 00:13:03.840
my mind just kind of
opened. I just, I just

186
00:13:03.840 --> 00:13:07.170
bloomed here thinking that, cause
right now, when you go

187
00:13:07.170 --> 00:13:10.200
to app harbor.com, you see
this as you are done,

188
00:13:10.200 --> 00:13:14.670
right. It's a very provocative
statement. I think that's gotten

189
00:13:14.670 --> 00:13:18.540
people excited about app Harbor
because if it comes out

190
00:13:18.540 --> 00:13:21.720
and it says something's wrong
and we fixed it. Yeah.

191
00:13:21.720 --> 00:13:26.220
Well basically you might say
that there are certain kinks

192
00:13:26.430 --> 00:13:40.080
or things that like two,
three minutes to an hour,

193
00:13:43.710 --> 00:13:50.460
basically we want to encourage
developers to deploy this. Shouldn't

194
00:13:50.550 --> 00:13:55.260
be a problem at all.
And the distance for instance,

195
00:13:55.260 --> 00:14:00.330
get or material because you
just commit you committed to

196
00:14:00.330 --> 00:14:06.330
Moscow. Right. Basically what you're,
what I'm hearing you say

197
00:14:06.330 --> 00:14:10.110
is that the cloud offering
for a lot of systems

198
00:14:10.110 --> 00:14:16.650
is not friendly to continuous
deployment. Exactly, exactly. And it's

199
00:14:16.650 --> 00:14:22.080
not friends because it takes
too long time inconvenience in

200
00:14:22.080 --> 00:14:27.360
a lot of ways. When
we, I also think an

201
00:14:27.360 --> 00:14:34.050
important thing about continuous deployment
or continuous integration, that's where

202
00:14:34.050 --> 00:14:42.210
essentially providing them to make
developers create better applications because

203
00:14:42.660 --> 00:14:46.710
will be more durable, they'll
work any place. Actually, we

204
00:14:46.710 --> 00:14:50.040
haven't done anything special. So
our build service, obviously we're

205
00:14:50.040 --> 00:14:57.440
providing some basic library of
like that code, but then

206
00:14:57.440 --> 00:15:00.740
again, people really have to
include whatever references the need

207
00:15:01.190 --> 00:15:06.110
and make a concise app.
That's not referencing local assemblies

208
00:15:06.110 --> 00:15:10.010
or anything. So it basically
makes the applications more portable.

209
00:15:10.760 --> 00:15:13.220
It's just that we're not
trying to lock in users

210
00:15:13.400 --> 00:15:16.910
for instance, by making them
create them as your project,

211
00:15:17.060 --> 00:15:21.110
something like that, which basically
locks them in to the

212
00:15:21.170 --> 00:15:25.640
platform. We're very much about
creating an open platform where

213
00:15:25.640 --> 00:15:29.810
people also can choose services.
For instance, people can choose.

214
00:15:34.610 --> 00:15:41.690
They won't even be dependent
on windows capacity if they

215
00:15:41.690 --> 00:15:46.030
want to move their apps
somewhere else. Hi, this is

216
00:15:46.030 --> 00:15:48.640
Scott coming to you from
another place in time. Are

217
00:15:48.640 --> 00:15:51.940
you using agile practices to
manage your software development? There's

218
00:15:51.940 --> 00:15:53.950
lots of tools in the
market that manage the steps

219
00:15:53.950 --> 00:15:56.170
of a project, but most
of them focus on individual

220
00:15:56.170 --> 00:15:58.990
roles. Get ready for a
solution that caters for the

221
00:15:58.990 --> 00:16:02.110
success of the whole team.
Guys at Tellerik introduced team

222
00:16:02.110 --> 00:16:05.440
pulse to an agile project
management tool. That'll help you

223
00:16:05.440 --> 00:16:09.130
gather ideas, estimate plan, track
progress in a common workspace.

224
00:16:10.120 --> 00:16:12.790
Finally companies, regardless of their
size can use a lightweight

225
00:16:12.790 --> 00:16:14.920
and convenient tool that makes
all the stakeholders work as

226
00:16:14.920 --> 00:16:18.850
a United team. Even if
they're in different countries by

227
00:16:18.850 --> 00:16:21.970
combining intuitive user interface and
the power server light team

228
00:16:21.970 --> 00:16:24.730
poles removes the roadblocks that
you typically face and applying

229
00:16:24.730 --> 00:16:27.820
agile in an effective manner,
no more lost data, no

230
00:16:27.820 --> 00:16:32.020
disparate systems, no lack of
critical analytics regarding the health

231
00:16:32.050 --> 00:16:35.710
philosophy project. See if yourself
get a free copy for

232
00:16:35.710 --> 00:16:42.520
five users in one project
tellerik.com/team pulse. And please do

233
00:16:42.520 --> 00:16:45.310
thank tolerance for supporting Hansel
minutes on their Facebook fan

234
00:16:45.310 --> 00:16:51.730
page, facebook.com/t L E R
I K Keller. We do

235
00:16:51.730 --> 00:16:53.620
appreciate it. They wouldn't be
a handsome minutes if there

236
00:16:53.620 --> 00:16:57.850
wasn't, Tellerik helping us. Yeah.
The, the idea also that

237
00:16:58.090 --> 00:17:00.820
in my mind, somehow I
hit assumed that there was

238
00:17:01.630 --> 00:17:04.750
some app Harbor mini cloud
out there in the world,

239
00:17:05.350 --> 00:17:08.740
but, and I thought that
you were tying yourself to

240
00:17:08.740 --> 00:17:11.080
either the mini cloud or
AC too, and you were

241
00:17:11.080 --> 00:17:14.140
tying yourself to get, but
now I'm realizing that you've

242
00:17:14.140 --> 00:17:19.390
built that, that deployment middleware
that enables continuous integration and

243
00:17:19.390 --> 00:17:24.910
continuous deployment near continuous and
the get part is a

244
00:17:25.060 --> 00:17:28.180
implementation detail. And the ECQ
part is an implementation detail.

245
00:17:28.180 --> 00:17:30.730
So you could, you know,
at some, at some future

246
00:17:30.730 --> 00:17:33.790
point, we could see a
TFS based deployment on app

247
00:17:33.790 --> 00:17:36.910
Harbor on Azure or an
mercurial one on ECE two

248
00:17:36.910 --> 00:17:40.030
or, or whatever is that
how I understand your architecture?

249
00:17:40.810 --> 00:17:45.010
Exactly. Our architecture basically get
far off. It's just a,

250
00:17:45.010 --> 00:17:48.460
it's just a control. And
I embassy yet. That's really

251
00:17:48.460 --> 00:17:52.860
how it is. We were
using some, a good library

252
00:17:53.220 --> 00:17:57.510
locally just to handle this.
But, but basically, yeah, we

253
00:17:57.510 --> 00:18:05.070
could add on another controller
for instance. So this is

254
00:18:05.070 --> 00:18:09.780
one part of the story.
And as you said, that

255
00:18:09.780 --> 00:18:18.030
deployment pod is basically filled
up from pieces can be

256
00:18:18.030 --> 00:18:24.990
a mixed. Yeah. For instance,
this apartment mechanism could be

257
00:18:25.830 --> 00:18:28.440
anywhere in the world, also
on your own server, if

258
00:18:28.440 --> 00:18:33.080
you want it at some
point. And let me ask

259
00:18:33.080 --> 00:18:36.110
you this though, you've, you've
created it. You've created a

260
00:18:36.110 --> 00:18:40.010
company based on the opportunity
that there are some speed

261
00:18:40.010 --> 00:18:43.700
issues with Azure as it
is what happens in four

262
00:18:43.700 --> 00:18:46.700
or five years. When, you
know, as your moves towards

263
00:18:46.970 --> 00:18:50.420
a speedier Heroku style deployment,
where do you, where is

264
00:18:50.420 --> 00:18:55.820
that Harbor at that point?
Yeah. Well, hopefully we'll all

265
00:18:55.820 --> 00:18:59.720
with Microsoft, but I don't
know, four or five years

266
00:18:59.720 --> 00:19:05.150
is a long time. I
guess if were to move.

267
00:19:08.510 --> 00:19:12.290
I wouldn't worry a lot
at all because that would

268
00:19:12.290 --> 00:19:20.000
be extremely slow. I think
we're a quite serious player

269
00:19:20.000 --> 00:19:30.020
in this market already, and
we'll continue to improve basically

270
00:19:30.290 --> 00:19:37.430
how I see y'all future.
This company continue to deliver

271
00:19:37.430 --> 00:19:42.050
excellent service. So you I'm
hearing you say that there's

272
00:19:42.080 --> 00:19:46.880
more than enough room for
another planet. Definitely do the

273
00:19:46.880 --> 00:19:50.840
cloud is your stay. And
it's going to be bigger

274
00:19:50.840 --> 00:19:54.830
and break on break. For
instance, actually we love Microsoft

275
00:19:56.340 --> 00:20:01.490
because basically Microsoft is heavily
pushing cloud services right now,

276
00:20:01.910 --> 00:20:07.370
and pretty much gearing businesses
to Watson applications, which I

277
00:20:07.370 --> 00:20:10.430
think is the benefit of
all of all cloud providers.

278
00:20:12.140 --> 00:20:16.820
They basically, I think a
lot of hosting will be

279
00:20:16.970 --> 00:20:19.130
made in the cloud within
the next couple of years.

280
00:20:19.130 --> 00:20:23.360
And this will allow for
a huge market with several.

281
00:20:24.980 --> 00:20:27.140
One of the things that
I think is really significant

282
00:20:27.140 --> 00:20:29.240
about what you guys are
trying to accomplish and how

283
00:20:29.240 --> 00:20:33.620
you're kind of changing the
conversation is that the realization

284
00:20:33.620 --> 00:20:37.550
that the cloud is more
than just scale. It's also

285
00:20:37.580 --> 00:20:43.220
effortless deployment where deployment isn't
an event. It's not like,

286
00:20:43.810 --> 00:20:47.350
like, like just as continuous
integration, got a lot of

287
00:20:47.350 --> 00:20:51.010
us to stop thinking about
the build. Like we work

288
00:20:51.010 --> 00:20:54.760
all day and now we'll
have the build that. And,

289
00:20:54.760 --> 00:20:56.170
and now at the end
of the week, we're going

290
00:20:56.170 --> 00:21:00.340
to we'll have the deployment
for free for, for you

291
00:21:00.340 --> 00:21:03.430
and for systems like you,
the build is no longer

292
00:21:03.430 --> 00:21:07.510
a problem. It's a nonissue.
And now theoretically, the deployment

293
00:21:07.510 --> 00:21:12.300
is just as trivial of
an artifact. Yeah. Yeah. And

294
00:21:12.300 --> 00:21:14.820
basically what this is allows
people to do is to

295
00:21:14.820 --> 00:21:20.100
introduce smaller changes to their
running by publication, which usually

296
00:21:20.100 --> 00:21:24.870
means more failures. If something
goes wrong, you don't do

297
00:21:24.870 --> 00:21:29.130
down the bills, iteration lingo,
as you say, a week

298
00:21:29.130 --> 00:21:33.600
or a month, you simply
just introduce the change whenever

299
00:21:33.600 --> 00:21:35.820
you made it. And you'll
see how it goes. If

300
00:21:35.820 --> 00:21:41.880
it's a problem, we'll roll
back a or you will

301
00:21:41.880 --> 00:21:47.010
fix it immediately and push
again. Basically I think, I

302
00:21:47.010 --> 00:21:53.640
think this is the essence
of it. What happens when

303
00:21:53.640 --> 00:21:58.080
a deployment fails or a
build fails? What happens to

304
00:21:58.080 --> 00:22:04.800
my application? Nothing happens a
running application. If your bill

305
00:22:04.810 --> 00:22:07.620
fails, you'll be able to
see that in the same

306
00:22:07.620 --> 00:22:10.980
space. As soon as soon
as people push the code,

307
00:22:11.830 --> 00:22:17.310
we give people a link
where they can go and

308
00:22:17.310 --> 00:22:21.030
see, how is this going?
Basically, they can just look

309
00:22:21.030 --> 00:22:24.480
up on their application, patient
page on that popper and

310
00:22:24.480 --> 00:22:30.240
see what's the status of
this. Basically tying it very

311
00:22:30.240 --> 00:22:39.450
much to the commit ID.
So people will see corn

312
00:22:43.290 --> 00:22:53.070
fields and it will apply
that application. Also, if people

313
00:22:53.070 --> 00:23:00.870
ride the unit test, we
basically run those off. And

314
00:23:00.870 --> 00:23:03.840
if any of those fields
we want to apply it,

315
00:23:04.740 --> 00:23:07.590
people will be able to
go into the interface and

316
00:23:07.590 --> 00:23:18.840
see exactly what's us resolve
the problem. If people always

317
00:23:18.840 --> 00:23:25.620
have coats, that's verified and
it's working. Am I able

318
00:23:25.620 --> 00:23:30.960
to, we have like the,
Oh crap button, like the,

319
00:23:31.020 --> 00:23:34.170
Oh no, something's wrong. Maybe
it's functional. Maybe my tests

320
00:23:34.170 --> 00:23:36.210
aren't on. Okay. I can
just go back and roll

321
00:23:36.210 --> 00:23:38.550
back. What? I just did
the big, the big control

322
00:23:38.550 --> 00:23:43.600
Z for the entire site.
Yeah. Well basically there's a,

323
00:23:43.600 --> 00:23:49.070
there's a list. Continue the
last 10 bills for all

324
00:23:49.070 --> 00:23:52.850
the bills. That's where all
the tests fast, you'll be

325
00:23:52.850 --> 00:23:55.730
able to click a diploid
link and it will be

326
00:23:55.850 --> 00:23:59.350
logged within a couple of
seconds. Wow. That's pretty slick.

327
00:24:00.460 --> 00:24:05.170
Yeah. It's great. And people
really love this. This specifically,

328
00:24:05.170 --> 00:24:10.280
this people love the most.
Actually. I'm not really sure

329
00:24:10.280 --> 00:24:14.530
if that many people use
it, eh, but, but, but

330
00:24:14.530 --> 00:24:17.860
I think people like the
convenience or just the safety

331
00:24:18.530 --> 00:24:21.850
that they know that's all
right. I push something. It

332
00:24:21.940 --> 00:24:25.990
went wrong. Well, I can
always roll back within seconds.

333
00:24:26.830 --> 00:24:29.830
That's really interesting because when
I think about things like

334
00:24:29.860 --> 00:24:32.950
testing and I was someone
emailed me recently and said,

335
00:24:33.340 --> 00:24:35.530
why should I bother writing
tests? You know, I'm just

336
00:24:35.530 --> 00:24:38.470
a one person shop. I
don't want to waste time

337
00:24:38.830 --> 00:24:42.130
typing these tests up. I
thought about all the different

338
00:24:42.130 --> 00:24:45.640
reasons. One would argue why
you should do tests. And

339
00:24:45.640 --> 00:24:49.390
I ended up saying that
it's not about the test

340
00:24:49.390 --> 00:24:52.090
or having a number of
tests. It's about the confidence

341
00:24:52.360 --> 00:24:56.350
that the tests give you
to make changes. Totally agree.

342
00:24:56.770 --> 00:25:00.730
Totally agree. Yeah. Right. And
that idea that, that I'm

343
00:25:00.730 --> 00:25:04.390
not afraid of my application
anymore. That's so fundamental. If

344
00:25:04.390 --> 00:25:07.300
you are afraid of your
application, then either your code

345
00:25:07.300 --> 00:25:11.140
is wrong, but more likely
your process is wrong. You

346
00:25:11.140 --> 00:25:14.350
know, I've had that. I've
had that before where I've

347
00:25:14.350 --> 00:25:17.350
got an application working well,
even like my blog, my

348
00:25:17.350 --> 00:25:20.230
blog runs on a dotnet
to application that's, you know,

349
00:25:20.230 --> 00:25:24.430
seven years old. And recently
I was a little afraid.

350
00:25:24.550 --> 00:25:27.190
I didn't want to change
it, you know, because I

351
00:25:27.190 --> 00:25:28.930
didn't want to, I didn't
want to wake the sleeping

352
00:25:28.930 --> 00:25:31.660
lion, but I've got a
lot of tests and I've

353
00:25:31.660 --> 00:25:33.400
got it in source code.
And I know which one

354
00:25:33.400 --> 00:25:36.790
I deployed recently and I
made a pretty fundamental change

355
00:25:36.790 --> 00:25:40.270
and nobody noticed. And that,
that sense of confidence in

356
00:25:40.270 --> 00:25:43.210
your own application is, is
provided to you by tests.

357
00:25:44.170 --> 00:25:48.690
And now we're seeing platforms
extend that sense of, of

358
00:25:48.700 --> 00:25:53.200
confidence with, with deployment where
I can deploy something and

359
00:25:53.200 --> 00:25:55.990
then say, Oh no. And
undo it all the way

360
00:25:55.990 --> 00:26:02.030
back. Like you said, 10,
10 different builds. Yeah. Yeah.

361
00:26:02.530 --> 00:26:06.190
And then basically, yeah, I
think you're totally right about

362
00:26:06.660 --> 00:26:09.400
the reason why I should
write this. Basically. It's the

363
00:26:09.400 --> 00:26:13.270
confidence in it. And basically,
basically, what, what this also

364
00:26:13.270 --> 00:26:15.890
gives you. Actually, I found
myself a couple of times

365
00:26:16.110 --> 00:26:18.820
because I probably was running
on, on our own platform.

366
00:26:19.480 --> 00:26:22.960
I find myself pushing a
code to our, to our

367
00:26:23.140 --> 00:26:28.840
server. I didn't run this
test locally or I failed.

368
00:26:29.140 --> 00:26:33.520
Or even, even sometimes I
use a Mac, I just

369
00:26:33.700 --> 00:26:36.340
changed something in a text
editor and committed it and

370
00:26:36.340 --> 00:26:41.620
pushed it and all that,
all the bill failed. This

371
00:26:41.620 --> 00:26:44.850
is really a it's really,
it really gives you another

372
00:26:44.850 --> 00:26:48.510
kind of flexibility. It makes
you more agile because you

373
00:26:50.190 --> 00:26:54.390
can trust your own code.
You know, how you intended

374
00:26:54.390 --> 00:26:57.000
that this work and you
made sure that it would

375
00:26:57.000 --> 00:27:00.800
always work like that. Right.
I mean, potentially this could

376
00:27:00.800 --> 00:27:05.420
be a, an excuse to
be sloppy and make dangerous

377
00:27:05.570 --> 00:27:08.060
changes. But just like you
said, let's say that, you

378
00:27:08.060 --> 00:27:11.300
know, we, we have all
grabbed a file from FTP,

379
00:27:11.300 --> 00:27:13.550
opened it in notepad, made
a code change and deployed

380
00:27:13.550 --> 00:27:15.500
it to production at some
point in our lives. You

381
00:27:15.500 --> 00:27:18.170
know, we're not proud of
it, but it's happened. But

382
00:27:18.170 --> 00:27:20.510
if you have the right
processes in place, then you

383
00:27:20.510 --> 00:27:25.100
can at least keep yourself
from losing your job. Exactly,

384
00:27:25.310 --> 00:27:30.440
exactly. And they basically I've
personally, I have never found

385
00:27:30.440 --> 00:27:34.340
that writing system on my
projects is a waste of

386
00:27:34.340 --> 00:27:40.130
time. I've also always found
that within a month or

387
00:27:40.130 --> 00:27:43.750
two, after creating a project,
if I didn't write this,

388
00:27:43.970 --> 00:27:46.970
it would really, really slow
me down because I was

389
00:27:46.970 --> 00:27:51.200
so worried about if the
application would work as expected

390
00:27:51.620 --> 00:27:56.210
and, and I didn't respect
her enough, basically what test

391
00:27:56.210 --> 00:28:00.380
gives you is the competence
competency reflects her everything. So

392
00:28:00.430 --> 00:28:07.580
it's, it's always nice. It
just allows you to write

393
00:28:07.580 --> 00:28:12.740
better code. I think. So
how many years do you

394
00:28:12.740 --> 00:28:16.910
think until most holsters offer
these kinds of services and

395
00:28:16.910 --> 00:28:21.350
what do you thinks beyond
this? Well, first of all,

396
00:28:21.350 --> 00:28:24.290
I think, I think the
first step would be that

397
00:28:24.560 --> 00:28:32.450
although provide us rain. People's
UNICEF, <inaudible> even Heroku as

398
00:28:39.260 --> 00:28:43.920
well. I, I think for,
for, for us, it's, it's

399
00:28:44.570 --> 00:28:52.610
connecting people with even more
services whenever, whatever database locking

400
00:28:52.610 --> 00:29:00.980
mechanism, I think, I think
our primary focus right now,

401
00:29:02.690 --> 00:29:06.860
what it comes down, we'll
take our market. I guess

402
00:29:08.550 --> 00:29:13.520
we basically have to team
up convincing people to use

403
00:29:13.520 --> 00:29:19.610
the cloud. Yeah, it definitely
seems like the, the $5

404
00:29:19.610 --> 00:29:24.020
holsters can't can't survive, but
it'll be interesting to see

405
00:29:24.020 --> 00:29:27.680
if the low end goes
away. And what I would

406
00:29:27.680 --> 00:29:29.360
think of as being the
high end in the sense

407
00:29:29.360 --> 00:29:31.970
of not, not that our
Harbor would be expensive at

408
00:29:31.970 --> 00:29:36.080
high end in that currently
the, the knowledge one requires

409
00:29:36.080 --> 00:29:41.290
to get involved is, is
nontrivial, you know, need to

410
00:29:41.290 --> 00:29:44.560
have an understanding of, of
getting source control. And so,

411
00:29:44.560 --> 00:29:46.690
you know, some basic stuff,
I don't think that you'd

412
00:29:46.690 --> 00:29:49.600
have a lot of 12
year olds deploying to power,

413
00:29:49.810 --> 00:29:55.830
unless maybe you do Well.
I think obviously a lot

414
00:29:55.830 --> 00:30:00.090
of users just to, just
to get on our platform,

415
00:30:01.500 --> 00:30:05.310
but most people aren't even
used to using a wishing

416
00:30:05.310 --> 00:30:11.700
control system. And actually I'm
quite happy if a version

417
00:30:11.700 --> 00:30:16.800
control system in order to
use our platform not using

418
00:30:16.800 --> 00:30:20.490
it. But then again, obviously
we want to provide people

419
00:30:20.490 --> 00:30:25.320
with as much convenience as
possible while still somewhat feasible.

420
00:30:26.220 --> 00:30:32.010
But yeah, definitely right now
people have to have a

421
00:30:32.010 --> 00:30:40.770
certain degree of, can I
do this, kind of do

422
00:30:40.770 --> 00:30:46.140
that. Basically we didn't really,
we haven't documented that much.

423
00:30:46.140 --> 00:30:52.350
We have a small, basic
information. We really encourage people

424
00:30:52.350 --> 00:30:57.240
to explore it because this
is also the way that

425
00:30:57.480 --> 00:31:09.660
we are listening to. Very
cool. Well, I wish you

426
00:31:09.660 --> 00:31:11.490
all the best and I
appreciate you taking the time

427
00:31:11.520 --> 00:31:13.950
to come on the show
and explain to us how

428
00:31:13.950 --> 00:31:23.160
things are changing in the
cloud. We'll put links to

429
00:31:23.160 --> 00:31:27.210
app harbor.com and information about
how their, their stuff works

430
00:31:27.210 --> 00:31:29.730
as well as other clouds
up on Hanselman's dot com.

431
00:31:29.970 --> 00:31:32.280
Thanks so much for joining
us. This has been another

432
00:31:32.280 --> 00:31:34.380
episode. We'll see you again
next week.

