WEBVTT FILE

1
00:00:00.210 --> 00:00:03.360
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.360 --> 00:00:06.300
they make the show possible.
Today's show is sponsored by

3
00:00:06.300 --> 00:00:10.500
developer express, become a UI
superhero with dev express controls

4
00:00:10.500 --> 00:00:15.030
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.420 --> 00:00:19.500
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.500 --> 00:00:23.610
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.700 --> 00:00:45.810
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
Hi, this is Scott Hanselman.

8
00:00:45.810 --> 00:00:48.660
This is another episode of
Hansel minutes today. I'm talking

9
00:00:48.660 --> 00:00:52.020
with audio Vivi from hibernating
rhinos. He's a C sharp

10
00:00:52.020 --> 00:00:55.020
developer on the core team
working on a product called

11
00:00:55.020 --> 00:00:58.230
Raven DB. Thanks for coming
on the show. Hi Scott.

12
00:00:58.260 --> 00:01:01.920
Thank you. Yeah. So Raven
DB, what is that product?

13
00:01:03.240 --> 00:01:07.350
Reverend DB is a no
SQL document database, which means

14
00:01:07.650 --> 00:01:12.240
not only SQL database and
it refers to a different

15
00:01:12.240 --> 00:01:15.630
model than we are used
to in tabular relational databases

16
00:01:16.290 --> 00:01:19.950
of for most real problems,
a document that the best

17
00:01:19.950 --> 00:01:25.650
can provide a better and
faster solutions document database is

18
00:01:25.650 --> 00:01:31.290
you store your data in
Reverend DB in particular in

19
00:01:31.290 --> 00:01:37.470
Jason format. And then you
can retrieve the information faster

20
00:01:37.470 --> 00:01:43.800
and you are not restricted
to schema a schema, changes.

21
00:01:45.120 --> 00:01:51.930
The database gives you more
flexibility in changing the information

22
00:01:51.990 --> 00:01:57.660
and updating your data. And
this is a, this is

23
00:01:57.660 --> 00:02:00.420
a full database though. It's
an acid database, right? It's

24
00:02:00.420 --> 00:02:03.270
a fully asset database. So
you have, you know, it's

25
00:02:03.300 --> 00:02:07.290
atomic, it's consistent. It's got
isolates, got durability. This, even

26
00:02:07.290 --> 00:02:09.480
though it's not something that
maybe people are familiar with

27
00:02:09.720 --> 00:02:12.090
a no SQL database, like
this can still be fully

28
00:02:12.090 --> 00:02:22.140
transactional. Yeah. Raven DB is
transactional database and the safety

29
00:02:22.140 --> 00:02:28.950
of the data is in
its highest priority. When we

30
00:02:29.040 --> 00:02:34.890
store information and I'm talking
about each transaction separately, we

31
00:02:34.950 --> 00:02:40.470
really keep the, the asset
properties in each of them.

32
00:02:42.030 --> 00:02:46.800
When you store information, you
want it to, to be

33
00:02:47.790 --> 00:02:51.660
there up to the point
that you, you know, shoot

34
00:02:51.660 --> 00:02:56.040
your computer, unless you do
that, your information should be

35
00:02:56.040 --> 00:02:58.680
there. I hope I don't
have to do that to

36
00:02:58.680 --> 00:03:02.890
my, yeah. So how long
has this been a, been

37
00:03:02.890 --> 00:03:09.090
a project? Well, this project,
eh, started back in 2008

38
00:03:09.280 --> 00:03:17.040
as a windows only server
on.net, eh, and it got

39
00:03:17.190 --> 00:03:24.840
matured. And today with dotnet
coal, we are actually a

40
00:03:24.930 --> 00:03:31.770
cross-platform product. Well, it really,
you know, it, it, it,

41
00:03:31.770 --> 00:03:34.380
wasn't easy to make it
cross platform because we had

42
00:03:34.380 --> 00:03:41.250
to, eh, rewrite, eh, many
paths in this project. But

43
00:03:41.730 --> 00:03:45.990
today we can say that
we are running, you know,

44
00:03:45.990 --> 00:03:52.470
after eight years, more than
eight years, not only on

45
00:03:52.470 --> 00:03:56.430
windows seven, also on Linux
and Mac. Yeah. And not

46
00:03:56.430 --> 00:04:00.690
just Linux, but many, many
different Linuxes many distros. There

47
00:04:00.690 --> 00:04:02.640
were a number of reasons
that you wanted to move

48
00:04:02.640 --> 00:04:05.850
this over to dotnet core.
Weren't there. Yeah. We had

49
00:04:06.210 --> 00:04:11.970
many driving reasons to do
that first, as we said,

50
00:04:11.970 --> 00:04:18.300
the supporting various distros. And
now that we can say

51
00:04:18.300 --> 00:04:20.940
that we are running a,
you know, also on Mac

52
00:04:20.940 --> 00:04:28.770
and other devices and other
architectures, many architectures, eh, so

53
00:04:29.430 --> 00:04:34.530
Raven DB can run on
any operating system supported by

54
00:04:34.530 --> 00:04:40.380
darknet coal. Eh, this is
something great because the, the

55
00:04:40.410 --> 00:04:44.190
development efforts that you, you
need to give for each

56
00:04:46.350 --> 00:04:52.140
architecture and each new distro
is a lower than you

57
00:04:52.140 --> 00:04:58.200
had to do previously Was,
was the hardest part moving

58
00:04:58.200 --> 00:05:01.200
into dotnet core or was
there a bigger problem with

59
00:05:01.200 --> 00:05:04.050
the different CPU architectures like
you had, you also wanted

60
00:05:04.050 --> 00:05:10.650
to work to arm, You
know, walking in with the.net

61
00:05:10.650 --> 00:05:18.480
core community gives you a
lot of benefits. You can,

62
00:05:18.690 --> 00:05:21.420
you can get help on
the community when you have

63
00:05:21.420 --> 00:05:29.430
problems, eh, especially, especially with
walking, you know, on different

64
00:05:29.490 --> 00:05:34.410
architectures. And now when we
talking about the arm 32,

65
00:05:35.160 --> 00:05:41.130
eh, which specifically the raspberry
PI is running on, yes,

66
00:05:41.130 --> 00:05:44.670
we had a lot of
stability problems at first. And

67
00:05:45.150 --> 00:05:48.960
I mean, you know, dotnet
coal was just released in

68
00:05:48.960 --> 00:05:54.090
its better versions, but we
got a lot of help

69
00:05:54.090 --> 00:05:59.360
on the community and we
followed follow the, the, the

70
00:05:59.360 --> 00:06:06.920
progress. And, and we, you
know, w w we saw,

71
00:06:06.950 --> 00:06:11.600
we saw, we saw ourselves
getting there one step at

72
00:06:11.600 --> 00:06:16.900
a time. And finally, we
are there. The you've been

73
00:06:16.900 --> 00:06:19.480
running on it on Linux
and done a core for

74
00:06:19.480 --> 00:06:22.240
a year. And you said
that initially, when you were

75
00:06:22.240 --> 00:06:25.120
working on beta versions of
the framework, you had some

76
00:06:25.120 --> 00:06:33.760
stability issues. Yeah. At first,
the CLL, the host of.net,

77
00:06:35.290 --> 00:06:39.910
the host process of.net, eh,
was not, eh, mature yet.

78
00:06:40.530 --> 00:06:47.860
So we, we suffered the
stability issues and we, we,

79
00:06:49.510 --> 00:06:51.820
you know, w we, we
didn't give up who we

80
00:06:51.820 --> 00:06:55.660
tracked the, the announcement from
the core CLL team. And

81
00:06:55.660 --> 00:06:59.770
when the declared the zero
failing test state on the

82
00:06:59.770 --> 00:07:04.450
arm, 32 architecture, for example,
that was a, a signal,

83
00:07:04.840 --> 00:07:09.490
you know, signal to us
to cross compile the CLR

84
00:07:09.730 --> 00:07:14.350
and try Reverend DB on
the pie with few adjustments

85
00:07:14.380 --> 00:07:20.170
and the correct, you know,
buys the system calls, modifications.

86
00:07:20.230 --> 00:07:25.600
It worked. I remember, you
know, trying to do to

87
00:07:25.600 --> 00:07:28.030
do that in a hot
summer day on the PI

88
00:07:28.660 --> 00:07:31.840
and the officer condition got
broken in that very same

89
00:07:31.840 --> 00:07:35.110
day. And I ended up
with two burned raspberry pies

90
00:07:35.110 --> 00:07:38.860
in the end. So yeah,
we had, we had the

91
00:07:38.860 --> 00:07:42.760
problems along the way, eh,
but we managed to fix

92
00:07:42.760 --> 00:07:49.840
everything. And today, today we
ended up with a full

93
00:07:49.840 --> 00:07:54.760
scale transactional database on 35
bucks, a raspberry pie, serving

94
00:07:54.760 --> 00:07:58.780
thousands of requests per seconds,
and writing currently up to

95
00:07:59.170 --> 00:08:05.470
2,500 documents per second, transactionally
on the pie that they

96
00:08:05.470 --> 00:08:08.650
would say, w you know,
wouldn't shame an average production

97
00:08:08.650 --> 00:08:12.790
server. How so, how, how
do you, What did you

98
00:08:12.790 --> 00:08:14.200
want to put on the
pilot? Like, I think the

99
00:08:14.200 --> 00:08:16.840
most amazing part about this
is it's, there's so many

100
00:08:16.840 --> 00:08:20.170
amazing aspects of this from
a story perspective, right? This

101
00:08:20.170 --> 00:08:22.540
is a, you know, an
eight year old or nine

102
00:08:22.540 --> 00:08:24.670
year old product. It was
a leg it's a it's,

103
00:08:24.850 --> 00:08:26.710
you could call it a
legacy code simply because it's

104
00:08:26.710 --> 00:08:29.620
older, but it ran only
on windows, but it was

105
00:08:29.620 --> 00:08:32.260
very well factored was very
well written. You moved it

106
00:08:32.260 --> 00:08:35.080
to.net core that allowed you
to move it, to run

107
00:08:35.080 --> 00:08:38.020
it on multiple distros. But
I think of a Raven

108
00:08:38.020 --> 00:08:40.420
AB being more as a
cloud, kind of a database

109
00:08:40.420 --> 00:08:42.070
or a big database that
would use on a big

110
00:08:42.070 --> 00:08:44.350
company. Why was it important
for you to run it

111
00:08:44.350 --> 00:08:48.130
on a pie? Just because
you could, Oh, well, we

112
00:08:48.130 --> 00:08:51.460
first want to say yes,
we can, we can, you

113
00:08:51.460 --> 00:08:54.730
know, run on any CPU
on any iOS on any

114
00:08:54.730 --> 00:08:59.850
business, but also supporting customers,
customers with the low end

115
00:08:59.850 --> 00:09:03.930
machines. It was on our
mind. There are a lot

116
00:09:03.930 --> 00:09:10.140
of customers that are running
old machines and to upgrade,

117
00:09:10.290 --> 00:09:16.470
you know, then tire system
could be costly and running

118
00:09:16.470 --> 00:09:20.010
on 32 beats is something
that can be in their

119
00:09:20.010 --> 00:09:28.080
interests. So this was a
real big motive to make

120
00:09:28.080 --> 00:09:31.260
it work on a, on
a pie or on any

121
00:09:31.260 --> 00:09:39.150
32 beat machine. And when
you did this though, because

122
00:09:39.210 --> 00:09:43.320
gotten it core, didn't have
an official arm supported much

123
00:09:43.320 --> 00:09:46.860
less an raspberry PI supported.
How much did this mean

124
00:09:46.860 --> 00:09:49.830
that it was suddenly your
job to get dotnet core

125
00:09:49.830 --> 00:09:56.970
running on arm? Well, actually
I was developing a and

126
00:09:56.970 --> 00:10:02.550
C plus plus on Linux,
on Linux for about 10

127
00:10:02.550 --> 00:10:07.140
years. And then I got
here and, you know, everything

128
00:10:07.140 --> 00:10:12.750
was running on windows. It
was like, you know, moving

129
00:10:12.750 --> 00:10:20.400
to another country for me.
And that I was brought

130
00:10:20.400 --> 00:10:22.500
to you to, to make
it work on, on, on

131
00:10:22.500 --> 00:10:27.220
Linux in general, and later
on, on the, the Paya

132
00:10:27.220 --> 00:10:31.830
in particular. And, and I
can tell you that at

133
00:10:31.830 --> 00:10:36.960
first, eh, when you looking
on this tiny card on

134
00:10:36.960 --> 00:10:43.320
this tiny, eh, eh, credit
card size, the computer, you,

135
00:10:43.320 --> 00:10:47.370
you say to yourself, it
will never, will never be

136
00:10:47.370 --> 00:10:51.570
something that can be, you
know, in production. It's like

137
00:10:51.570 --> 00:10:55.800
more like a hobby to
make it work, to make

138
00:10:55.800 --> 00:11:01.710
revenue, to be walk on
it. And the huge scale

139
00:11:01.710 --> 00:11:07.470
of Freeman DB was a
little bit, you know, frightened

140
00:11:07.530 --> 00:11:12.810
at first. But, you know,
I started, I started to

141
00:11:12.870 --> 00:11:19.650
try the, the, the simple
things at first am. And

142
00:11:19.680 --> 00:11:23.760
as I said, when, when
the, the dotnet core team,

143
00:11:25.260 --> 00:11:27.840
the, you know, they did
a great job with the

144
00:11:27.840 --> 00:11:32.130
I'm 32, one day, they
said, okay, it can walk,

145
00:11:32.160 --> 00:11:35.970
you know, the hello world
world a program can walk

146
00:11:35.970 --> 00:11:43.500
on it. And I immediately
was pushing to, to see

147
00:11:43.590 --> 00:11:49.980
if we can do the
more sophisticated stuff like writing,

148
00:11:49.980 --> 00:11:57.790
writing the transactional writing transactions
in, in keeping the asset

149
00:11:57.790 --> 00:12:03.010
properties. Now, in an example,
the FC FC call sinking

150
00:12:03.010 --> 00:12:06.670
the data to the disk
is something very important in

151
00:12:06.670 --> 00:12:13.000
transactional databases and overcoming that,
you know, to get a

152
00:12:13.000 --> 00:12:19.030
better performance, we need to
make a few optimizations. The

153
00:12:19.030 --> 00:12:22.960
optimization we did on the
raspberry PI eventually gives us

154
00:12:22.960 --> 00:12:27.550
a more performance on Linux
in general, and also in

155
00:12:27.550 --> 00:12:32.560
windows. By the way, I
can give you an example

156
00:12:32.860 --> 00:12:42.220
of such an optimization, the
transaction merging, okay. When you

157
00:12:42.580 --> 00:12:47.710
committed transaction, okay, you, you
would expect the client to

158
00:12:47.710 --> 00:12:51.850
get a success, a response
in a reasonable short time

159
00:12:53.320 --> 00:12:56.880
when the database is in
pressure of many requests, writing

160
00:12:56.890 --> 00:13:00.280
a transaction on the disc
may take more time than

161
00:13:00.280 --> 00:13:04.450
writing all of them in
merge in a sequential weight.

162
00:13:05.380 --> 00:13:09.640
However, it might increase the
client response time latency. So

163
00:13:09.670 --> 00:13:14.470
what we did is thinking
about this old process, like

164
00:13:14.530 --> 00:13:18.700
a bus station where each
person stating sending in the

165
00:13:18.730 --> 00:13:22.810
Bastow is a transaction. And
the arriving to the destination

166
00:13:22.810 --> 00:13:28.840
is like a successful asset
transaction. So if let's say,

167
00:13:28.840 --> 00:13:31.870
if there aren't many people
in the bus stop, it

168
00:13:31.870 --> 00:13:34.090
will be better for the
bus to take only one

169
00:13:34.090 --> 00:13:37.270
person and let the other
bus behind him take the

170
00:13:37.270 --> 00:13:41.080
next one. However, if there
are a lot of people

171
00:13:41.920 --> 00:13:45.220
let's feel the bus as
much as we can, but

172
00:13:45.520 --> 00:13:48.940
one can ask, you know,
question like the first person

173
00:13:48.940 --> 00:13:51.610
might wait for the bus
to be field more than

174
00:13:51.610 --> 00:13:54.100
he would wait is the
first one, you know, who

175
00:13:54.100 --> 00:13:58.390
got there. But the answer
is that he will get

176
00:13:58.390 --> 00:14:02.170
to the destination faster because
he's field bus will not

177
00:14:02.170 --> 00:14:05.230
have to wait in the
traffic jam of many buses

178
00:14:05.260 --> 00:14:08.680
before him, where, you know,
with a single person in

179
00:14:08.680 --> 00:14:10.990
each of them. So he
can enjoy a better football

180
00:14:11.020 --> 00:14:15.280
performance by participating in this
merger as a whole and

181
00:14:15.280 --> 00:14:18.960
gain a lower response latency
eventually. So I hope this

182
00:14:18.970 --> 00:14:23.620
a bus example, a bus
stop example, eh, gives us

183
00:14:23.620 --> 00:14:29.590
an idea about how we
made an optimization on the

184
00:14:29.590 --> 00:14:36.700
pie and by that serving
more requests, more writings per

185
00:14:36.700 --> 00:14:45.250
second, but keeping the transactional,
eh, manner intact. It's, it's

186
00:14:45.250 --> 00:14:47.500
so interesting. It almost makes
you wonder if this is

187
00:14:47.500 --> 00:14:50.590
like a best practice for
software in general, that we

188
00:14:50.590 --> 00:14:53.900
should be testing on low
end Machines to make sure

189
00:14:53.900 --> 00:14:56.390
we, we, we, we feel
what that mean. We really

190
00:14:56.390 --> 00:14:59.900
feel what low end is
like for our software. And

191
00:14:59.900 --> 00:15:01.880
then we used, you know,
if you make an optimization

192
00:15:01.880 --> 00:15:03.560
on the low end machine,
you're, you know, you'll have

193
00:15:03.560 --> 00:15:06.440
a great experience on a
high end machine. You just

194
00:15:06.440 --> 00:15:10.230
happen to go really low
to a $35 computer. Yeah.

195
00:15:10.230 --> 00:15:13.900
Yeah. And when we say
low end the machine, we

196
00:15:13.900 --> 00:15:17.890
are not talking only about
the processing power. We're also

197
00:15:17.920 --> 00:15:28.240
talking about a memory, an
example, it's using a much,

198
00:15:28.240 --> 00:15:32.170
a, it gives you to
use a much less memory

199
00:15:32.230 --> 00:15:39.310
in, on the PI. And
by trying to, eh, operate

200
00:15:40.690 --> 00:15:46.480
with the, you know, max
performance on, eh, low memory,

201
00:15:46.600 --> 00:15:53.470
eh, hardware, eh, gives you
later on, on, on windows

202
00:15:53.470 --> 00:15:58.690
and on Linux, better performance
because of the way that

203
00:15:58.900 --> 00:16:04.390
you handle your memory. In
example, at the points at

204
00:16:04.390 --> 00:16:07.810
the, at the points that
matter and aspect of performance,

205
00:16:08.080 --> 00:16:12.880
eh, we allocated native memory
and carefully reusing it and

206
00:16:12.880 --> 00:16:15.520
freeing it like you would
do in C plus plus.

207
00:16:16.270 --> 00:16:18.910
And, and in other places
where you can use the

208
00:16:18.910 --> 00:16:22.180
garbage collector and save code,
we are enjoying these of

209
00:16:22.210 --> 00:16:26.890
coding in C shop. So
if you look today on,

210
00:16:27.400 --> 00:16:34.600
on Reverend DB project open,
you can see many parts

211
00:16:34.870 --> 00:16:40.030
that handle the memory in
the code itself in the

212
00:16:40.030 --> 00:16:44.170
code itself. And doesn't let
the framework do that for

213
00:16:44.170 --> 00:16:50.770
you. So you can control
the, the, the, the amount

214
00:16:50.770 --> 00:16:55.810
of memory that you use
each second. And you benefit

215
00:16:55.810 --> 00:16:59.770
from eight 20. You run
on a big machine because

216
00:16:59.800 --> 00:17:03.430
when you, when you have
to deal to deal with

217
00:17:03.430 --> 00:17:09.010
memory garbage collecting all the
time, you can lose performance

218
00:17:09.820 --> 00:17:13.450
on any machine. How does
a Raven DB, does it

219
00:17:13.480 --> 00:17:15.580
put everything in memory, or
does it have a balance?

220
00:17:15.580 --> 00:17:17.680
Like how does it tune?
Because not only, like you

221
00:17:17.680 --> 00:17:20.440
say, there's slow CPU, there's
slow memory, there's also slow

222
00:17:20.440 --> 00:17:25.840
disk access. You're managing memory
in some ways, yourself, native

223
00:17:25.840 --> 00:17:30.790
memory. In some instances, you're
letting, letting the, the CA

224
00:17:30.820 --> 00:17:34.510
the CLR manage the memory
for you, but then you

225
00:17:34.510 --> 00:17:37.480
also have the disc access.
I assume that your databases

226
00:17:37.480 --> 00:17:41.170
can be larger than the
size of available memory, right?

227
00:17:41.410 --> 00:17:44.440
Much larger. So if you
have like a, can you

228
00:17:44.440 --> 00:17:47.230
have a four gigabyte database
on a pie, and then

229
00:17:47.230 --> 00:17:50.640
you'll do the right thing.
You, you write a More

230
00:17:50.640 --> 00:17:54.720
than four gigabytes, a database
on 32 beats a system.

231
00:17:58.590 --> 00:18:02.430
This is a very good
example of a challenge. We

232
00:18:02.430 --> 00:18:09.840
faced on the pie. We
used to map memory mapped

233
00:18:09.840 --> 00:18:16.260
files on 64 beats operating
systems. And now when you

234
00:18:16.260 --> 00:18:20.640
deal with 32 beats, you
need to use different techniques

235
00:18:22.170 --> 00:18:29.870
and to map, eh, only
Windows in the memory and

236
00:18:29.870 --> 00:18:36.440
freed immediately and manage your,
your, your map windows and

237
00:18:37.070 --> 00:18:43.760
in general, your memory. And
we, we, we could, we

238
00:18:43.760 --> 00:18:47.960
could actually, w what we
did on the pie in

239
00:18:47.960 --> 00:18:52.610
the end was importing the
entire stack overflow site that

240
00:18:52.610 --> 00:18:56.640
has set into the pie.
Oh my God. Yeah. Index

241
00:18:56.640 --> 00:19:01.670
seed. And also querying, you
know, the, the question and

242
00:19:01.670 --> 00:19:06.350
answers and everything was done
on the pie on biggest

243
00:19:06.350 --> 00:19:12.470
Deckard, but the, the, the
results were amazing. And it

244
00:19:12.470 --> 00:19:16.610
was done in a reasonable
time. You would expect something

245
00:19:16.610 --> 00:19:19.730
like that, you know, can,
can take a few days.

246
00:19:19.730 --> 00:19:24.950
But it also, it was
a really, really fast, really.

247
00:19:25.520 --> 00:19:28.460
I really enjoyed the spot.
It was like, you know,

248
00:19:28.460 --> 00:19:34.070
the, the price in the
end of a walk Is

249
00:19:34.070 --> 00:19:36.680
this, let me ask you
this. Do you have a,

250
00:19:36.680 --> 00:19:39.320
how do you, how do
you target the pie? Do

251
00:19:39.320 --> 00:19:42.470
you have cross cross compilation?
Do you have if deaths,

252
00:19:42.500 --> 00:19:46.730
or are you actually using
the same DLLs you use

253
00:19:46.730 --> 00:19:50.720
on windows and on Mac?
We, we are using the

254
00:19:50.720 --> 00:19:56.480
same DLLs for our managed
manage the code. We have

255
00:19:56.480 --> 00:20:03.290
also a native code, and
basically most of the, the,

256
00:20:03.890 --> 00:20:08.150
the API APIs used for
Linux works on the pie.

257
00:20:08.720 --> 00:20:13.220
Eh, of course there are
32 beats APS that we

258
00:20:13.220 --> 00:20:18.650
need, the system calls that
we need to use, but

259
00:20:19.400 --> 00:20:24.710
it starts, we had to
cross compile the.net and make

260
00:20:24.710 --> 00:20:28.430
some adjustments, like you said,
with, if they've said to

261
00:20:28.430 --> 00:20:33.860
the PI, but later on,
when we could ditch the,

262
00:20:33.860 --> 00:20:42.140
if depths and the predecessor
defines, and I can say

263
00:20:42.350 --> 00:20:49.480
really, really simple and short
modifications to the code, most

264
00:20:49.480 --> 00:20:54.790
of, most of it is
now running, eh, eh, as

265
00:20:54.790 --> 00:21:02.200
you would expect, cross-platform language
to run on different devices

266
00:21:02.200 --> 00:21:06.310
and different business. This is
something in the us in

267
00:21:06.310 --> 00:21:13.210
the point of view for
alpha developer and maintainer, a

268
00:21:13.210 --> 00:21:19.140
great thing. Really great, really
easy. If you have continuous

269
00:21:19.140 --> 00:21:23.280
integration and continuous deployment, do
you have a raspberry PI

270
00:21:23.280 --> 00:21:26.160
that is involved in that
build process? So when someone

271
00:21:27.330 --> 00:21:30.630
puts their code into Raven,
when they're one of the

272
00:21:30.630 --> 00:21:34.290
core developers like you, is
that updating and being tested

273
00:21:34.290 --> 00:21:35.940
on the raspberry PI as
well as all the other

274
00:21:35.940 --> 00:21:42.480
distributions. Yeah. We have a
testing environment, automatic testing environment,

275
00:21:42.510 --> 00:21:51.750
and we test windows 64
and 32 beats and Linux,

276
00:21:52.170 --> 00:21:56.280
60 64 beats. And the
raspberry PI we have in

277
00:21:56.280 --> 00:22:02.640
our server room, in a
cooled server room, in a

278
00:22:02.640 --> 00:22:08.160
cooled room. It's important to,
to keep the pie. Cool.

279
00:22:09.720 --> 00:22:14.520
I already ended up with
two burnt pies on a

280
00:22:14.520 --> 00:22:21.210
hot August day. So yes,
we, we do test it.

281
00:22:21.270 --> 00:22:26.280
We can find many problems
that you wouldn't find in

282
00:22:26.280 --> 00:22:31.440
a faster machines. And I
really recommend to do that

283
00:22:31.620 --> 00:22:35.400
in any project, you know,
trying to, to run your

284
00:22:35.400 --> 00:22:39.720
tests and running your were
real world scenarios on a

285
00:22:39.720 --> 00:22:43.380
low end machines. I want
to back up a little

286
00:22:43.380 --> 00:22:47.670
bit and understand the core
CLR arm process, because at

287
00:22:47.670 --> 00:22:50.850
the time that we're recording
this, we're recording this at

288
00:22:50.850 --> 00:22:53.160
the end of March. And
then in April, this show

289
00:22:53.160 --> 00:22:57.030
will come out. The, if
you want to get core

290
00:22:57.030 --> 00:22:59.490
CLR running on a raspberry
PI, too, this is something

291
00:22:59.490 --> 00:23:01.500
you have to kind of
do manually. There's no official

292
00:23:01.500 --> 00:23:07.560
supported a thing. Are you
using public supported instructions, or

293
00:23:07.560 --> 00:23:10.320
are you, is this because
of your expertise doing Solares

294
00:23:10.320 --> 00:23:13.740
work, that's allowing you to
do this. At first, I

295
00:23:13.740 --> 00:23:20.730
had to myself, I had
to do, to use different

296
00:23:20.730 --> 00:23:27.090
skills, eh, to come cross
compile and, and make it

297
00:23:27.090 --> 00:23:36.750
work with on a different
distros on Linux. But today

298
00:23:36.750 --> 00:23:42.240
we're talking at the end
of March and the cl

299
00:23:42.270 --> 00:23:48.350
the core CLR team managed
give, eh, a nightly built

300
00:23:48.830 --> 00:23:54.620
of dotnet code on the
raspberry PI. So I think

301
00:23:54.650 --> 00:23:58.760
in the near future, people
will be able just, you

302
00:23:58.760 --> 00:24:03.710
know, to download a darknet
call on the PI and

303
00:24:03.800 --> 00:24:09.020
run the, the programs. You
know, it's, it's, it's getting

304
00:24:09.050 --> 00:24:14.240
easier and easier in each
day. You can feel from

305
00:24:14.240 --> 00:24:17.840
a developer point of view,
you can feel that, eh,

306
00:24:17.900 --> 00:24:23.690
with, eh, each day passing
the ease of use, eh,

307
00:24:23.720 --> 00:24:29.540
of dotnet call, eh, you
know, almost, eh, is, is

308
00:24:29.630 --> 00:24:36.470
easy as a running, you
know, on windows, previous.net 4.5.

309
00:24:37.820 --> 00:24:40.310
So it almost seems impossible.
Doesn't it? They knew that

310
00:24:40.310 --> 00:24:46.870
you all pulled this off.
Yeah. I must say the,

311
00:24:46.870 --> 00:24:51.160
the day that We served
the first request on the

312
00:24:51.160 --> 00:24:55.690
pie and we raised a
toast and we were very

313
00:24:55.690 --> 00:25:03.040
happy because it was involving
a, a lot of challenges

314
00:25:03.670 --> 00:25:10.180
along the way. I, I
think, but I can say,

315
00:25:10.210 --> 00:25:15.430
I can say that you
don't have to today, you

316
00:25:15.430 --> 00:25:18.880
don't have to dive into
the bits and bites of

317
00:25:18.880 --> 00:25:23.380
Linux as you had to
do in previous years in

318
00:25:23.380 --> 00:25:28.570
order to have your web,
your application walk in.net call.

319
00:25:29.170 --> 00:25:31.270
This is something that actually
brings up a good question,

320
00:25:31.270 --> 00:25:36.580
though. How do you debug
this? Yeah. In this part?

321
00:25:37.000 --> 00:25:43.060
Well, I would want a
better debugging experience experience. So

322
00:25:43.080 --> 00:25:49.210
Linux, as we have a
no in a windows today

323
00:25:49.210 --> 00:25:55.240
with the visual studio, 2000,
2017, we can remotely debug

324
00:25:55.270 --> 00:26:06.010
the Linux machine through SSH.
Also profiling is a, not

325
00:26:06.010 --> 00:26:11.440
so easy as it on
windows. And this is a

326
00:26:11.470 --> 00:26:16.330
challenge for the, for the
community in the near future

327
00:26:17.620 --> 00:26:23.350
to achieve, eh, on the
pie. There is no real

328
00:26:23.350 --> 00:26:30.520
way to, to debug and
profile, eh, your application to

329
00:26:30.520 --> 00:26:37.930
date, eh, on, on the
32 beats currently, you need

330
00:26:37.930 --> 00:26:45.780
to, to use different and
most sophisticated techniques in order

331
00:26:45.780 --> 00:26:54.150
to solve programming problems, but
I'm sure it will be

332
00:26:54.150 --> 00:27:00.150
changing in the near future
because the people, the people

333
00:27:00.150 --> 00:27:03.990
in the different teams working
all the time in very

334
00:27:03.990 --> 00:27:11.520
serious manner, and we're really
looking forward to the debug

335
00:27:11.910 --> 00:27:16.580
options that will be open
to us on Linux. Do

336
00:27:16.580 --> 00:27:19.790
you, are you able to
debug this from visual studio

337
00:27:19.790 --> 00:27:25.180
remotely? You said? Yeah. Yeah.
On visual studio, 2017, the

338
00:27:25.190 --> 00:27:30.260
new visual studio gives us,
said a possibility to debug

339
00:27:30.920 --> 00:27:36.140
Linux on dotnet call remotely.
So you are sitting behind

340
00:27:36.140 --> 00:27:41.480
your windows machine debugging, a
Linux machine dotnet core Linux

341
00:27:41.480 --> 00:27:45.020
machine. And you're feeling, you
know, at home you're feeling,

342
00:27:46.190 --> 00:27:50.180
you feel that there is
that you would when debugging

343
00:27:50.210 --> 00:27:55.430
a windows application. Wow. So
it feels like any, any

344
00:27:55.430 --> 00:27:57.860
headless machine that just happens
to be tiny and in

345
00:27:57.860 --> 00:28:03.650
your pocket. Yeah. Yeah. Just
like that. Yes. So can

346
00:28:03.650 --> 00:28:06.560
you explain just a little
bit briefly as we end

347
00:28:06.560 --> 00:28:11.000
here, the relationship between the
Raven DB open source project

348
00:28:11.000 --> 00:28:14.600
and the hibernating rhinos company,
I can use Raven BB

349
00:28:14.600 --> 00:28:16.340
on my projects if I
want to. And then I

350
00:28:16.340 --> 00:28:24.410
pay for support, right? He's
a, an open source project.

351
00:28:25.760 --> 00:28:35.390
Currently we have on windows,
we have a, An option

352
00:28:35.390 --> 00:28:38.990
to develop a developer for
free, and then you can

353
00:28:38.990 --> 00:28:42.590
get their license and support.
May I, I think, eh,

354
00:28:42.620 --> 00:28:46.730
when moving to the next
version, eh, on dotnet net,

355
00:28:48.010 --> 00:28:54.410
this will be changed and
we'll be, we'll be more

356
00:28:54.410 --> 00:28:58.370
like you, you will be
able to run a free

357
00:28:58.370 --> 00:29:01.970
version of Previn DB. This
is something that, you know,

358
00:29:01.970 --> 00:29:09.200
I, I leave to our
marketing department. I usually like

359
00:29:09.890 --> 00:29:13.700
yeah. To, to touch the
bits and bytes under the

360
00:29:13.700 --> 00:29:16.580
hood, Of course. Well, and
that's actually a good opportunity

361
00:29:16.580 --> 00:29:18.380
for people to look at
the bits and bytes. You

362
00:29:18.380 --> 00:29:23.510
can go to demo dot
Raven, db.net. It's a really,

363
00:29:23.510 --> 00:29:26.480
really impressive online demo where
you can go and see

364
00:29:26.480 --> 00:29:30.260
the C-sharp code. You can
put in the queries, hit,

365
00:29:30.260 --> 00:29:33.020
run demo, and then see
the output directly from a

366
00:29:33.020 --> 00:29:36.530
real, a real server. So
you can go to Raven

367
00:29:36.530 --> 00:29:41.350
db.net or demo dot Raven
to.net. And again is not

368
00:29:41.350 --> 00:29:43.690
an advertisement. This is not
something that they've paid for.

369
00:29:43.960 --> 00:29:46.360
It's just a really great
open source project. That's turned

370
00:29:46.360 --> 00:29:48.970
into a really great company.
So I was excited to

371
00:29:48.970 --> 00:29:52.450
have ADI on the show
to talk to us. Thanks

372
00:29:52.450 --> 00:29:55.150
so much for, for coming
on today. Thank you. Thank

373
00:29:55.150 --> 00:29:58.570
you, Scott. This has been
another episode of Hansel minutes.

374
00:29:58.630 --> 00:30:00.190
We'll see you again next
week.

