WEBVTT FILE

1
00:00:00.210 --> 00:00:03.360
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.360 --> 00:00:06.300
they make the show possible.
Today's show is sponsored by

3
00:00:06.300 --> 00:00:10.500
developer express, become a UI
superhero with dev express controls

4
00:00:10.500 --> 00:00:15.030
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.420 --> 00:00:19.500
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.500 --> 00:00:23.610
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.700 --> 00:00:45.870
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
Hi, this is Scott Hanselman.

8
00:00:45.870 --> 00:00:48.060
This is another episode of
Hansel minutes, and I am

9
00:00:48.060 --> 00:00:51.420
thrilled today to be talking
with Guillermo Rouch. He is

10
00:00:51.630 --> 00:00:53.730
one of the co founders
of Zeit, which is a

11
00:00:53.730 --> 00:00:56.100
product that I've just been
exploring. And I'm very excited

12
00:00:56.100 --> 00:00:59.940
to be talking to him
about along with his cofounders

13
00:00:59.940 --> 00:01:03.240
who work on the product
with who's Naoki Kanazawa and

14
00:01:03.240 --> 00:01:05.730
Tony COVID. And thank you
Guillermo for talking to me

15
00:01:05.730 --> 00:01:08.910
today. Thank you. Glad to
be here. Yeah, so people

16
00:01:08.910 --> 00:01:12.450
will maybe not necessarily know
your name, but know things

17
00:01:12.450 --> 00:01:14.790
you've worked on. And I
think maybe still the thing

18
00:01:14.790 --> 00:01:17.280
you're most famous for is
working on socket IO and

19
00:01:17.280 --> 00:01:20.760
getting people excited about web
sockets. Correct. That was sort

20
00:01:20.760 --> 00:01:24.570
of my, my main open
source project that became really

21
00:01:24.570 --> 00:01:28.440
big, closely followed by another
one called mongoose that some

22
00:01:28.440 --> 00:01:32.010
of our listeners might be
familiar with, which is a

23
00:01:32.010 --> 00:01:35.460
ORM for a Mongo DB
for no JS. Yeah. And

24
00:01:35.460 --> 00:01:38.550
then since then, you've also
worked on hyper, which is

25
00:01:38.550 --> 00:01:42.330
a really turning the console
world on its head. And

26
00:01:42.480 --> 00:01:44.430
it's becoming the console of
choice for a lot of

27
00:01:44.430 --> 00:01:48.420
people. Yeah. Especially for a
multi-platform users that are looking

28
00:01:48.420 --> 00:01:52.500
for a consistent experience. You
know, you have your terminal

29
00:01:52.500 --> 00:01:54.420
in the back and then
you would go to windows

30
00:01:54.420 --> 00:01:57.440
and they had to pick
another terminal. So with hybrid

31
00:01:57.450 --> 00:02:00.810
space on electron and it's
a built in web technologies,

32
00:02:00.840 --> 00:02:04.890
which means you can extend
the terminal experience, the command

33
00:02:04.890 --> 00:02:08.940
line experience with, you know,
plugins written CSS, HTML, and

34
00:02:08.940 --> 00:02:13.260
Java script. So what's cool
about that. Terminal is, you

35
00:02:13.260 --> 00:02:15.150
know, out of the box,
it looks really neat, but

36
00:02:15.270 --> 00:02:18.450
it's what you can do
with X sensibility, with themes

37
00:02:18.450 --> 00:02:23.280
and plugins. Historically, when people
have tried at least on

38
00:02:23.280 --> 00:02:27.060
windows to make alternative terminals,
it's become these weird hacks

39
00:02:27.060 --> 00:02:30.150
where they shell off into
many hidden windows and then

40
00:02:30.150 --> 00:02:34.290
scrape the screen. But somehow
hypers works. I can run

41
00:02:34.290 --> 00:02:37.240
VI, I can run bash.
I can run PowerShell. How,

42
00:02:37.240 --> 00:02:39.360
how, what has changed that,
that is not a hack

43
00:02:39.360 --> 00:02:42.330
so much. So it's a
couple of things. Really. One

44
00:02:42.330 --> 00:02:46.260
is I've been working on
writing terminals in no JS

45
00:02:46.260 --> 00:02:48.210
for a while. So since
we were talking about socket

46
00:02:48.210 --> 00:02:51.510
IO, one of my first
projects with it was at

47
00:02:51.510 --> 00:02:54.030
what's it called code stream.
And what did, what it

48
00:02:54.030 --> 00:02:57.630
did was you would write
a command on any terminal

49
00:02:58.140 --> 00:03:00.520
to start streaming terminal in
real time. And then it

50
00:03:00.520 --> 00:03:03.640
would give you a URL
that was unique to that

51
00:03:03.640 --> 00:03:06.340
screencast that you could share
with anyone. And then they

52
00:03:06.340 --> 00:03:08.860
would see a typing in
real time and what it

53
00:03:08.860 --> 00:03:11.980
was doing is it wasn't
recording a video. It was

54
00:03:11.980 --> 00:03:16.240
actually getting the data from
the terminal, which is basically

55
00:03:16.240 --> 00:03:21.490
a sequence of basically just
texts combined with escape coats,

56
00:03:21.520 --> 00:03:26.380
like typically called ANSI escape
codes. So we would take

57
00:03:26.380 --> 00:03:28.600
those with trimmed into the
browser and in the browser,

58
00:03:28.600 --> 00:03:32.410
I was sort of reinventing
a terminal from scratch. So

59
00:03:32.410 --> 00:03:34.870
I learned a lot about
how terminals worked. I learned

60
00:03:34.870 --> 00:03:36.940
a lot about how to
make them work with no

61
00:03:36.940 --> 00:03:39.940
JS on the, you know,
in this case was a

62
00:03:39.940 --> 00:03:44.680
server part let's say so
to speak. And I was,

63
00:03:44.680 --> 00:03:48.670
every time I was recreating
a full blown terminal application,

64
00:03:48.940 --> 00:03:51.430
the only difference in that
case was that you couldn't

65
00:03:51.430 --> 00:03:55.270
actually input data from the
browser, but that's actually super

66
00:03:55.270 --> 00:03:56.950
easy to do in a
terminal because all you do

67
00:03:56.950 --> 00:04:00.970
is you give the underlying
terminal instance. In this case,

68
00:04:00.970 --> 00:04:03.430
it's called a pseudo terminal.
You can get the data

69
00:04:03.430 --> 00:04:05.590
that is coming through the
keyboard, and then you get

70
00:04:05.590 --> 00:04:09.310
data out. It's like a
symbol, a transformation function. Let's

71
00:04:09.310 --> 00:04:12.010
say you get data out
in the form of strings

72
00:04:12.010 --> 00:04:14.380
and ANSYS scapes, and then
you render it. So I

73
00:04:14.380 --> 00:04:16.630
basically learned how to build
a terminal from scratch with

74
00:04:16.630 --> 00:04:19.990
that experiment. And I've always
been a fan of the

75
00:04:19.990 --> 00:04:26.050
terminal ASA user interface because
it's, so once you learn

76
00:04:26.050 --> 00:04:28.870
it, it's so productive. You
know, a lot of people

77
00:04:28.870 --> 00:04:32.200
get excited about chat bots
and doing things really easily

78
00:04:32.200 --> 00:04:36.250
through simple questions or entering
some sort of command into

79
00:04:36.250 --> 00:04:38.650
Slack. But if you really
think about it, that's what

80
00:04:38.650 --> 00:04:42.220
the terminal has been doing
since the fifties, right? So

81
00:04:42.280 --> 00:04:45.400
it's a great interface for
productivity and it's been a

82
00:04:45.400 --> 00:04:48.880
recurring theme for me to
try to make it easier

83
00:04:48.880 --> 00:04:51.580
to use, make it more
accessible to more people. And

84
00:04:51.580 --> 00:04:54.130
I think with hybrid with
finally reached this point where

85
00:04:54.400 --> 00:04:57.130
now we can make it
work really well across different

86
00:04:57.130 --> 00:04:59.920
platforms. We're still ironing out
bugs that have to do

87
00:04:59.920 --> 00:05:02.770
with, for example, now we
have Bashan windows, right? So

88
00:05:02.980 --> 00:05:06.310
even simple checks to determine
what environment you're running on

89
00:05:06.550 --> 00:05:09.520
are difficult to ride because
now we have the platform

90
00:05:09.520 --> 00:05:12.310
is technically, you know, Linux,
if you look at it

91
00:05:12.310 --> 00:05:15.730
from the runtime, because it's
running on a Linux subsystem,

92
00:05:15.730 --> 00:05:18.790
but then there are certain
implementation details that we want

93
00:05:18.790 --> 00:05:21.790
to do specifically for windows.
Like what happens when you

94
00:05:21.790 --> 00:05:24.970
want to edit the configuration
or, you know, parse it.

95
00:05:24.970 --> 00:05:27.340
And it's a slightly different
because it's a windows and

96
00:05:27.340 --> 00:05:30.670
codings and so on. So,
and thinks of the community

97
00:05:30.670 --> 00:05:33.640
because we've had so many
pull requests and contributors and

98
00:05:33.820 --> 00:05:36.220
they're, I think it has
like 10,000 stars on GitHub.

99
00:05:36.640 --> 00:05:39.370
We've finally been able to
get all this people contributing.

100
00:05:39.400 --> 00:05:42.880
There are slight little tweaks
for every platform. So think

101
00:05:42.880 --> 00:05:48.730
about, you know, shortcuts and
think about what's the best

102
00:05:48.730 --> 00:05:51.850
font to give a terminal
users and windows out of

103
00:05:51.850 --> 00:05:53.920
the box was the best
one for Linux or the

104
00:05:53.920 --> 00:05:56.800
best one for Mac. So
we thought about all of

105
00:05:56.800 --> 00:05:58.940
that and we've been able
to package that as a

106
00:05:58.940 --> 00:06:01.220
really great experience. So if
you want to try it

107
00:06:01.220 --> 00:06:05.000
out, you can go to
hyper dot S, which is

108
00:06:05.720 --> 00:06:09.800
Iceland's TLD, but the hybrid
itis will, will allow you

109
00:06:09.800 --> 00:06:12.680
to want to click download.
And, and then it auto

110
00:06:12.680 --> 00:06:15.980
updates, which is a really
awesome thing as well. The

111
00:06:16.040 --> 00:06:20.660
we're constantly submitting patches and
you'll see a little green

112
00:06:20.660 --> 00:06:23.480
message on the terminal that
tells you if you want

113
00:06:23.480 --> 00:06:26.180
to restart it now or
later, there's a new version

114
00:06:26.180 --> 00:06:29.720
with a bunch of bug
fixes. And yeah, it's been

115
00:06:29.720 --> 00:06:33.230
a really successful project. And,
and it allows me to

116
00:06:33.230 --> 00:06:36.490
share this love for the
command line. Yeah, I've got

117
00:06:36.490 --> 00:06:39.190
it installed. And I added
a couple of plugins using

118
00:06:39.190 --> 00:06:43.120
the HPM, the hyper package
manager, NPM for hyper, right.

119
00:06:43.480 --> 00:06:46.330
And I added a hyper
line and hyper status line

120
00:06:46.360 --> 00:06:51.130
things, but I added HyperTerm
tab icons. Cool. What that

121
00:06:51.130 --> 00:06:53.050
has allowed me to do
now is I have one

122
00:06:53.050 --> 00:06:56.860
window open, which is hyper,
and I've got a PowerShell

123
00:06:56.860 --> 00:07:00.970
tab, abashed tab and the
dos tab or a command

124
00:07:01.000 --> 00:07:04.090
tab. And each one with
the hyper shell tab icons

125
00:07:04.090 --> 00:07:06.880
has an, an icon at
the top. It is specific

126
00:07:06.880 --> 00:07:10.000
to that thing. So I
can immediately see what's PowerShell.

127
00:07:10.000 --> 00:07:13.540
What's not. Cause I think
windows in the past has

128
00:07:13.570 --> 00:07:16.630
kind of historically sucked for
command line people. And then

129
00:07:16.630 --> 00:07:19.540
windows 10, there's been like
a resurgence of enthusiasm around

130
00:07:19.540 --> 00:07:23.620
getting the console, right? And
now I've got bash, I've

131
00:07:23.620 --> 00:07:27.640
got PowerShell, I've got dos
all available to me and

132
00:07:27.640 --> 00:07:29.230
being able to run that
in a single window is

133
00:07:29.230 --> 00:07:32.410
really powerful stuff. So I
appreciate that. That's awesome to

134
00:07:32.410 --> 00:07:34.840
hear, because at this point
there are so many plugins

135
00:07:34.840 --> 00:07:38.710
that I learned myself everyday
of installing neat new things.

136
00:07:38.830 --> 00:07:42.400
One of my favorites is
I like to code outside

137
00:07:42.430 --> 00:07:46.120
is kind of like my
thing, where to avoid being

138
00:07:46.120 --> 00:07:48.100
in a dark room all
day long, I try to

139
00:07:48.100 --> 00:07:52.030
always catch the sun. So
I have to always switch

140
00:07:52.060 --> 00:07:55.750
my themes and I have
to switch the syntax and

141
00:07:55.750 --> 00:07:57.760
I have to do all
of that. So there's a

142
00:07:57.760 --> 00:08:03.010
plugging that actually detects the
ambient lighting and automatically all

143
00:08:03.010 --> 00:08:07.780
your themes I've been looking
into even taking it once

144
00:08:07.810 --> 00:08:10.120
one step further. So when
it switches to a lighter

145
00:08:10.120 --> 00:08:15.280
theme, also synchronize vis theme
automatically. So there are all

146
00:08:15.280 --> 00:08:18.790
these neat things that you
can do. And I guess

147
00:08:18.790 --> 00:08:23.560
another interesting theme here is
this idea of reactivity that

148
00:08:23.560 --> 00:08:26.440
is started with socket at,
which is, for example, when

149
00:08:26.440 --> 00:08:29.050
you edit the configuration file
for the terminal, you save

150
00:08:29.050 --> 00:08:32.860
a change and the terminal
reacts immediately. Actually you can

151
00:08:32.860 --> 00:08:36.070
also go to the, you
know, plugins list in that

152
00:08:36.070 --> 00:08:38.170
configuration file. And if you
type in a new one

153
00:08:38.500 --> 00:08:41.080
where on the background and
the monitoring, that file for

154
00:08:41.080 --> 00:08:45.430
changes, and then we run
NPM install automatically. So you

155
00:08:45.430 --> 00:08:49.090
actually see a lot of
this plugins kick in, which

156
00:08:49.090 --> 00:08:53.800
is a technique that we
call hot code loading. So

157
00:08:53.800 --> 00:08:57.330
they kick in automatically. So
this is really cool because

158
00:08:57.750 --> 00:09:01.800
it's something that has typically
been really difficult to do

159
00:09:02.370 --> 00:09:05.400
at a large scale. And
in fact, I think JavaScript

160
00:09:05.400 --> 00:09:08.790
is the best language nowadays
for pulling this off in

161
00:09:08.790 --> 00:09:12.750
a production environment where if
things are changing, like plugins

162
00:09:12.770 --> 00:09:16.140
are being updated or themes
change or new things get

163
00:09:16.170 --> 00:09:20.400
patched, we can do that
without dropping any sort of

164
00:09:20.490 --> 00:09:24.000
uptime, so to speak. And
this is a really powerful

165
00:09:24.000 --> 00:09:26.940
thing because if you, if
we think about, you know,

166
00:09:26.940 --> 00:09:29.740
the modern day computer user,
think about how many times

167
00:09:29.760 --> 00:09:32.700
you actually have to restart
your entire application. Sometimes I

168
00:09:32.700 --> 00:09:38.850
actually just installed a update
for the firmware of my

169
00:09:38.880 --> 00:09:42.690
USBC dongle and it made
me reboot my entire computer.

170
00:09:43.530 --> 00:09:46.410
So not only did they
have to upgrade the software

171
00:09:46.440 --> 00:09:50.250
of a adapter, it also
made me rebuild my entire

172
00:09:50.250 --> 00:09:54.150
computer. So, you know, it,
this gets you thinking, right?

173
00:09:54.150 --> 00:09:58.800
Because we haven't really thought
about not making the user

174
00:09:58.830 --> 00:10:01.680
waste time in that way.
Like you have to restart

175
00:10:01.680 --> 00:10:05.250
everything to be productive. So
with hybrid, that's another interesting

176
00:10:05.250 --> 00:10:10.380
thread because we're now able
to sort of, it's sort

177
00:10:10.380 --> 00:10:12.900
of like, it starts to
have some operating system type

178
00:10:12.900 --> 00:10:15.480
of features, right? So when
a feature that also comes

179
00:10:15.480 --> 00:10:19.860
built in is you can
type in a URL. And

180
00:10:19.890 --> 00:10:22.170
what we do is if
you type in a URL

181
00:10:22.170 --> 00:10:25.860
into bash or PowerShell or
whatever you would get, you

182
00:10:25.860 --> 00:10:29.160
know, Oh, google.com command to
not found. So what we

183
00:10:29.160 --> 00:10:32.790
did is we wrote a
plugin that before the text

184
00:10:32.820 --> 00:10:35.880
makes it to the screen
that says google.com command not

185
00:10:35.880 --> 00:10:40.020
found we intercepted. And because
this is built on electron

186
00:10:40.770 --> 00:10:45.270
and it's all based on
web technologies, we're able to

187
00:10:46.080 --> 00:10:48.570
inject what it would be
the equivalent of a, of

188
00:10:48.590 --> 00:10:51.930
a browser tab that loads
up that website in a

189
00:10:51.930 --> 00:10:55.290
secure and sandbox way. So
this is really cool for

190
00:10:55.290 --> 00:10:57.930
when you're, for example, like,
you know, you launch a

191
00:10:57.930 --> 00:11:01.380
server on local host port
3000, and you want to

192
00:11:01.380 --> 00:11:04.260
test it really quickly. You
can introduce a year directly

193
00:11:04.260 --> 00:11:06.870
into the terminal, so you
can see how, like, this

194
00:11:06.870 --> 00:11:09.930
is blurring the lines of
what a window manager is,

195
00:11:09.930 --> 00:11:13.260
or, you know, what your
operating system interface, even if

196
00:11:13.260 --> 00:11:14.760
it's, you know, there are
a lot of people that

197
00:11:14.850 --> 00:11:19.830
nowadays primarily use their terminal
Chrome, perhaps Adam, and that's

198
00:11:19.830 --> 00:11:23.790
sort of their entire experience
or a vs code. So

199
00:11:23.850 --> 00:11:26.070
we're looking at a future
where with a lot of

200
00:11:26.070 --> 00:11:29.280
electron apps becoming a part
of your day to day

201
00:11:29.280 --> 00:11:32.460
workflow, I think there are
exciting opportunities for even rethinking

202
00:11:32.460 --> 00:11:37.110
how window management works or
how applications are laid out

203
00:11:37.110 --> 00:11:39.120
on a screen. And, you
know, this allows us to

204
00:11:39.120 --> 00:11:42.180
iterate really fast. And like
I said earlier, it allows

205
00:11:42.180 --> 00:11:45.150
us to reload code and
in a much more efficient

206
00:11:45.150 --> 00:11:49.260
way than sort of like
the web itself, then you

207
00:11:49.260 --> 00:11:53.950
could do with a lot
of native applications. And do

208
00:11:53.950 --> 00:11:56.050
I Know I've got hyper
open right now? Do I

209
00:11:56.050 --> 00:11:58.200
just type google.com and it'll
notice, yeah, You have to

210
00:11:58.530 --> 00:12:00.810
do a fully qualified URL.
So you have to do

211
00:12:00.810 --> 00:12:05.190
like HTTP colon slash slash
google.com and then you'll see

212
00:12:05.190 --> 00:12:08.610
it pop in directly into
the, into the tab. And

213
00:12:08.610 --> 00:12:12.270
then, and then we're simulating
the experience of, you know,

214
00:12:12.270 --> 00:12:14.760
if it was like a
man. So if you're not

215
00:12:14.760 --> 00:12:17.340
focusing on input later on,
you press control C and

216
00:12:17.340 --> 00:12:19.680
it brings it back to
the prompt That just says,

217
00:12:19.680 --> 00:12:21.900
HTTP is not a command.
There's just not work on

218
00:12:21.900 --> 00:12:25.140
windows. And let me show
you, well, it's a podcast.

219
00:12:25.140 --> 00:12:29.910
So, So yeah, I just,
I just, it has to

220
00:12:29.910 --> 00:12:32.370
be the entire year. It's
possible that there might be

221
00:12:33.030 --> 00:12:35.390
a glitch in the wind
or there might sometimes what

222
00:12:35.390 --> 00:12:37.020
we are dealing with is
people use a lot of

223
00:12:37.020 --> 00:12:40.590
different shells. So depending on
what shell you're running, it

224
00:12:40.590 --> 00:12:42.570
might not be fully supported.
So if you're running bash,

225
00:12:42.600 --> 00:12:45.510
it should work out of
the box. For sure. And

226
00:12:45.510 --> 00:12:47.520
yeah, I tried, I tried
bash on windows. It sounds

227
00:12:47.520 --> 00:12:50.250
like a windows, a windows
thing Totally be a windows

228
00:12:50.940 --> 00:12:54.060
output parsing issue. The bottom
line is we just run

229
00:12:54.060 --> 00:12:56.370
a regular expression on the
output that says, you know,

230
00:12:56.580 --> 00:12:59.460
google.com command the found. And
then if it's a valid

231
00:12:59.460 --> 00:13:03.210
irrel, we, and this has
been really interesting as an

232
00:13:03.210 --> 00:13:05.280
experiment. And what are we
going to do is we're

233
00:13:05.280 --> 00:13:08.850
gonna take this into what
do we call that quarter

234
00:13:08.850 --> 00:13:14.610
plugin? And we'll allow people
to actually create the best

235
00:13:14.610 --> 00:13:18.750
possible browsing experience for different
use cases. So instead of

236
00:13:18.750 --> 00:13:21.780
being a core feature, we're
gonna make it a user

237
00:13:21.780 --> 00:13:24.900
land thing so that people
can experiment with, for example,

238
00:13:25.050 --> 00:13:29.670
what's the best UI for
our browser ID load on

239
00:13:29.700 --> 00:13:33.960
the terminal. And another really
interesting thing is you could

240
00:13:33.960 --> 00:13:39.120
actually ride command line programs
that give Hybris some sort

241
00:13:39.120 --> 00:13:44.100
of signal, and you could
start embedding inline controls that

242
00:13:44.100 --> 00:13:46.980
are more powerful than you
would you would, would you

243
00:13:46.980 --> 00:13:50.430
be able to do with
the terminal itself? So imagine,

244
00:13:50.760 --> 00:13:53.550
you know, you run LS
and if you're running a

245
00:13:53.550 --> 00:13:56.730
less, in the context of
hyper, we could actually show

246
00:13:56.910 --> 00:14:01.050
a list of folders that
have icons, and then you

247
00:14:01.050 --> 00:14:04.170
can actually double click. So
with plugins, people are going

248
00:14:04.170 --> 00:14:08.790
to be able to extend
this experience of the terminal

249
00:14:09.150 --> 00:14:12.630
and be really creative with
how they want the data

250
00:14:12.630 --> 00:14:16.590
to be represented on the
screen. It's a really interesting

251
00:14:16.860 --> 00:14:19.770
it's, it's blurring the line
between, like we hear about

252
00:14:19.770 --> 00:14:22.800
people doing work on like
Chromebooks and doing like real

253
00:14:22.800 --> 00:14:25.830
work on Chromebooks, which I
correct is questionable, but at

254
00:14:25.830 --> 00:14:29.160
the same time it does
ask it begs the question,

255
00:14:29.160 --> 00:14:31.260
like, what is the shell?
You know, it's, if you

256
00:14:31.260 --> 00:14:33.960
think about in the context
of windows, one could, could

257
00:14:33.990 --> 00:14:37.680
potentially just go full screen
and use hyper for everything

258
00:14:37.680 --> 00:14:39.480
is there. And as long
as they have smart window

259
00:14:39.480 --> 00:14:42.000
management, they could certainly do
that For sure. And, you

260
00:14:42.000 --> 00:14:45.090
know, that's not the intent
of course, because the intent

261
00:14:45.090 --> 00:14:48.150
is that out of the
box, it's a really high

262
00:14:48.150 --> 00:14:51.770
performance, really beautiful terminal that
it works really, but then

263
00:14:51.770 --> 00:14:54.260
with plug, so you can
sort of take it anywhere.

264
00:14:54.260 --> 00:14:58.430
And I've seen people that,
you know, launch the browser

265
00:14:58.940 --> 00:15:01.550
to, for example, get documentation
and then exit out of

266
00:15:01.550 --> 00:15:03.230
it, and then they resume
their, or come in late

267
00:15:03.230 --> 00:15:06.350
to work. So it's really
interesting. You could imagine, you

268
00:15:06.350 --> 00:15:10.460
know, the man pages, so
instead of re writing man

269
00:15:11.090 --> 00:15:14.420
something, and you get, you
know, text, you could actually

270
00:15:14.420 --> 00:15:16.970
get a web version of
it. So it's going to

271
00:15:16.970 --> 00:15:19.190
be interesting and interesting couple
of years coming up. I

272
00:15:19.190 --> 00:15:22.760
think in that once people
get into the groove of

273
00:15:22.760 --> 00:15:26.270
writing plugins for this, you
can come up with really,

274
00:15:26.270 --> 00:15:31.930
really creative ways of, you
know, human computer interaction. Hm.

275
00:15:31.990 --> 00:15:34.840
Interesting. Well, that's actually a
good opportunity to pivot to

276
00:15:34.840 --> 00:15:36.880
the original thing that I
wanted to chat with you

277
00:15:36.880 --> 00:15:41.320
about, which is your new
company's site. And specifically the

278
00:15:41.320 --> 00:15:46.120
now insight, insight world stuff
that you're working on. I

279
00:15:46.120 --> 00:15:48.670
bumped into now a couple
of months ago and I

280
00:15:48.670 --> 00:15:52.600
saw, you know, real time
global deployments. That's cool. And

281
00:15:52.600 --> 00:15:55.360
then I looked at it
and I saw, cause you

282
00:15:55.360 --> 00:15:58.120
go to you go to
<inaudible> dot com slash now,

283
00:15:58.120 --> 00:16:01.660
and there's a cool animated
gift that shows you deploying

284
00:16:01.660 --> 00:16:04.420
a node app. And then
you just hit you type

285
00:16:04.430 --> 00:16:06.250
the word now and hit
enter, and then boom, you're

286
00:16:06.250 --> 00:16:09.430
on the web. But I
have to admit as a

287
00:16:09.430 --> 00:16:11.620
person that does his work
in open source C sharp,

288
00:16:11.800 --> 00:16:14.260
I was like, Oh, that's
really cool yet. Another thing

289
00:16:14.260 --> 00:16:16.900
that's not for me. You
know what I mean? So

290
00:16:16.900 --> 00:16:19.810
I felt a little excluded,
but then I saw that

291
00:16:19.810 --> 00:16:23.650
you support Docker, correct? Yeah.
And then I took, I

292
00:16:23.650 --> 00:16:26.260
dunno, what did I take
15 minutes yesterday? I mean,

293
00:16:26.260 --> 00:16:29.410
it was not long. I
DMD you one question and

294
00:16:29.440 --> 00:16:32.320
I in 15 minutes from
sign up to give you

295
00:16:32.320 --> 00:16:34.540
my credit card, which I
don't even think was required.

296
00:16:34.540 --> 00:16:39.040
And I had a.net application
running in insight. So let's

297
00:16:39.040 --> 00:16:43.120
back up and help me
understand how did you, you

298
00:16:43.120 --> 00:16:45.280
completely changed how I interact
with what I would think

299
00:16:45.280 --> 00:16:48.700
of as a cloud. It
was just almost impossibly simple.

300
00:16:49.150 --> 00:16:53.290
Yeah. And this is, you
know, how, why did hyper

301
00:16:53.290 --> 00:16:56.530
come about? And it came
about because we think that

302
00:16:56.530 --> 00:17:01.000
the deployment experience, which is
taking an application and hosting

303
00:17:01.000 --> 00:17:03.400
it in the cloud should
not be more than one

304
00:17:03.400 --> 00:17:06.880
command, right? So you write
your source code in a

305
00:17:06.880 --> 00:17:10.930
folder and you have a
manifest file typically by manifest

306
00:17:10.930 --> 00:17:14.020
file that could be packaged
adjacent for NPM, or it

307
00:17:14.020 --> 00:17:16.990
could be Docker file. And
those files already contain the

308
00:17:16.990 --> 00:17:20.440
instructions of how to boot
up the application. So in

309
00:17:20.440 --> 00:17:24.790
the case of JavaScript, you
can run NPM start. And

310
00:17:24.790 --> 00:17:26.500
what that does is it
looks at the package of

311
00:17:26.500 --> 00:17:30.700
Jason file. It goes through
the scripts list and says

312
00:17:30.730 --> 00:17:33.480
start. And you know, it
might be node server dot

313
00:17:33.490 --> 00:17:36.970
JS or something like that.
In the Docker world, you

314
00:17:37.390 --> 00:17:42.460
have something very similar, which
is the CMD instruction. So

315
00:17:43.270 --> 00:17:46.810
the CMD instruction for a
Docker file is what's the

316
00:17:46.810 --> 00:17:50.460
command that has to run
once, decide to boot up

317
00:17:50.460 --> 00:17:53.670
the container. So there is
a distinction here to be

318
00:17:53.670 --> 00:17:58.680
made between building your project
and booting up or running

319
00:17:58.710 --> 00:18:04.290
your project. So this two
phases exist with different degrees

320
00:18:04.350 --> 00:18:10.050
of, you know, clarity in
pretty much all projects. For

321
00:18:10.050 --> 00:18:13.380
example, in JavaScript, we're typically
not so used to having

322
00:18:13.380 --> 00:18:16.290
a built face because you
can actually run your entire

323
00:18:16.290 --> 00:18:20.610
application doing, you know, node
in the <inaudible>. So there

324
00:18:20.610 --> 00:18:24.210
is no build face, but
increasingly what we found is

325
00:18:24.360 --> 00:18:27.480
a lot of no JS
projects, especially front end code

326
00:18:27.690 --> 00:18:33.260
has actually very steep build
steps because they do translation.

327
00:18:33.290 --> 00:18:36.560
For example, because we want
to newer JavaScript features is

328
00:18:36.560 --> 00:18:40.940
on cases for performance reasons.
You know, when you do

329
00:18:40.940 --> 00:18:43.490
note in the <inaudible> and
then can go and like

330
00:18:43.520 --> 00:18:46.280
ask the file system for
other files and other files

331
00:18:46.280 --> 00:18:48.770
and other files. So some
people as an optimization, they

332
00:18:48.770 --> 00:18:53.750
package everything into one file,
for example. So with now

333
00:18:53.780 --> 00:18:57.170
that built step and that
boot up step happens seamlessly

334
00:18:57.350 --> 00:18:59.870
after you run now. So
all we do is we

335
00:18:59.870 --> 00:19:02.810
actually take your code to
the cloud and then we

336
00:19:02.810 --> 00:19:05.630
build it. And then we
started up in the case

337
00:19:05.630 --> 00:19:07.700
of the Docker file that
allows you to, you know,

338
00:19:07.790 --> 00:19:12.350
boot up any sort of
technology. so.net, we've done examples.

339
00:19:12.380 --> 00:19:14.570
So to really make our
point across that this is

340
00:19:14.570 --> 00:19:20.630
a universal deployment. What we
did was launch at Cobal

341
00:19:20.810 --> 00:19:24.800
microservice and cobalt is I
think one of the oldest

342
00:19:24.800 --> 00:19:28.640
languages that are still around
and that I think people

343
00:19:28.640 --> 00:19:33.800
have actually written a small
web framework for no, we

344
00:19:33.810 --> 00:19:36.350
wrote a little Docker file
that fetches, you know, the

345
00:19:36.350 --> 00:19:40.280
cobalt or runtime. And, you
know, we wrote at Jace,

346
00:19:40.550 --> 00:19:43.700
so microservice that outputs some,
I think Jason or some

347
00:19:43.700 --> 00:19:48.020
texts. And then we did
that for rust and that

348
00:19:48.020 --> 00:19:51.650
we did that for Swift.
And then yesterday, you know,

349
00:19:51.650 --> 00:19:55.680
without any further instructions, you
did that for.net. And, and

350
00:19:55.810 --> 00:19:59.210
the key idea here is
that we're taking Docker file

351
00:19:59.720 --> 00:20:03.380
as a recipe, we're not
taking the idea of you

352
00:20:03.380 --> 00:20:05.180
have to build an image
and then you have to

353
00:20:05.180 --> 00:20:07.160
push the image and then
you have to deal with

354
00:20:07.160 --> 00:20:11.150
registries. The key notion here
is that we're just taking

355
00:20:11.150 --> 00:20:15.110
the definition of your code
and then we can be,

356
00:20:16.040 --> 00:20:18.410
we can do a lot
of optimizations in the cloud

357
00:20:18.440 --> 00:20:23.000
for making that build really
fast for I'm giving you

358
00:20:23.000 --> 00:20:26.090
feedback in real time. So
for example, as assets building,

359
00:20:26.630 --> 00:20:30.050
we stream the terminal. So
you can actually see what's

360
00:20:30.050 --> 00:20:34.400
happening. Asset is being built.
So that's the main ideas,

361
00:20:34.430 --> 00:20:37.220
you know, with one command
and the definition of your

362
00:20:37.220 --> 00:20:39.740
project that you already have,
and the code that you

363
00:20:39.740 --> 00:20:43.310
already have, we take it
to the cloud. We give

364
00:20:43.310 --> 00:20:46.550
you a URL for you
to access it. That's unique

365
00:20:46.640 --> 00:20:51.000
and new every time. And
that's all you do. You

366
00:20:51.000 --> 00:20:53.040
know, I, I gave a,
I gave a talk at

367
00:20:53.040 --> 00:20:55.830
all things open. I think
you were, you may have

368
00:20:55.830 --> 00:20:58.230
been there. And one of
the things that I commented

369
00:20:58.230 --> 00:21:02.250
on was that in the
nineties, I spent almost that

370
00:21:02.250 --> 00:21:06.300
whole decade learning how to
do a web farm. So

371
00:21:06.330 --> 00:21:09.000
if you look at my
resume, there's 10 years where

372
00:21:09.000 --> 00:21:12.300
I am doing load balancing
and round Robin DNS. And

373
00:21:12.510 --> 00:21:15.150
like we were learning how
to do that. Like the

374
00:21:15.150 --> 00:21:17.670
idea of a website was
turning into the idea of

375
00:21:17.670 --> 00:21:20.850
many websites that work as
one. And now that has

376
00:21:20.850 --> 00:21:24.660
become a check box. Absolutely.
So, so that has become

377
00:21:24.660 --> 00:21:26.580
commoditized. And I mean that
in the best way, not

378
00:21:26.580 --> 00:21:28.800
in the negative way of
commoditized, but in the, that

379
00:21:28.800 --> 00:21:31.260
checkbox now stands on the
work of the previous 10

380
00:21:31.260 --> 00:21:34.860
years. It seems like you're
doing the same thing. And

381
00:21:34.860 --> 00:21:37.140
that you're, you're take, you're
saying, you know, this is

382
00:21:37.140 --> 00:21:39.120
a solved problem and that's
a soft problem and why

383
00:21:39.120 --> 00:21:41.040
does it need to be
so hard? So you're challenging

384
00:21:41.430 --> 00:21:44.580
every assumption and saying, why
do I even need to

385
00:21:44.580 --> 00:21:46.860
know that there's a virtual
machine underneath this? Why do

386
00:21:46.860 --> 00:21:49.770
I need to think about
multiple IP addresses? I just

387
00:21:49.770 --> 00:21:52.650
want a website. And then
I want that website to

388
00:21:52.650 --> 00:21:56.280
scale. That is, that is
now a best practice. So

389
00:21:56.490 --> 00:22:00.150
let's encapsulate that best practice
and make it right. And

390
00:22:00.180 --> 00:22:02.730
the way you put it
is this are all best

391
00:22:02.730 --> 00:22:07.050
practices. That would be repeated
every time. Because with every

392
00:22:07.050 --> 00:22:11.820
software project, there is a
space for creativity and there's

393
00:22:11.820 --> 00:22:15.420
a space for you always
repeat some well understood patterns.

394
00:22:15.810 --> 00:22:20.440
So now itself limits itself
to HTTP servers. So when,

395
00:22:20.440 --> 00:22:23.370
when we talk about executing
now on your terminal, what

396
00:22:23.370 --> 00:22:25.170
is it that you're booting
up in the cloud? Well,

397
00:22:25.500 --> 00:22:32.730
we're constraining our space to
deployments. Then when they boot

398
00:22:32.730 --> 00:22:36.210
up, they expose an HTTP
server. So what does this

399
00:22:36.210 --> 00:22:39.360
mean? You can deploy websites.
In fact, if it's a

400
00:22:39.360 --> 00:22:41.160
static website, like let's say
you have a bunch of

401
00:22:41.160 --> 00:22:44.250
HTML files in a folder,
we automatically treat that as

402
00:22:44.250 --> 00:22:47.340
a static website and you
don't have to define anything,

403
00:22:48.390 --> 00:22:50.460
or you can have a
Docker file or package adjacent

404
00:22:50.460 --> 00:22:54.330
that define an HTTP server.
And what's cool about this

405
00:22:54.330 --> 00:22:58.020
is we know how to
scale web servers. We know

406
00:22:58.050 --> 00:23:02.280
that one of those best
practices is horizontal scalability. So

407
00:23:02.280 --> 00:23:04.830
what that means is you
want to boot up multiple

408
00:23:04.830 --> 00:23:09.750
copies if needed of that
deployment. So another best practices,

409
00:23:09.750 --> 00:23:13.680
you know, we understand how
to put load balancers in

410
00:23:13.680 --> 00:23:17.070
front of your deployments. So
typically if you want it

411
00:23:17.070 --> 00:23:20.190
to do a deployment that
is production grade, you would

412
00:23:20.190 --> 00:23:22.770
have to boot up your
load balancer separately from your

413
00:23:22.770 --> 00:23:26.970
application servers and then configure
and maintain and monitor both.

414
00:23:27.480 --> 00:23:31.680
But in our case, because
with again, constraint ourselves to

415
00:23:31.680 --> 00:23:35.610
HTTP, we understand how to
load balance traffic. We understand

416
00:23:35.610 --> 00:23:38.640
how to scale that. And
we do that all all

417
00:23:38.640 --> 00:23:42.630
on your behalf. And again,
these are not things where

418
00:23:42.630 --> 00:23:44.250
you want to be creative.
Where do you want to

419
00:23:44.250 --> 00:23:47.540
be creative? You know, the
UI of your obligation. You

420
00:23:47.540 --> 00:23:50.410
want to be creative with
the responsiveness. Well, you know,

421
00:23:50.530 --> 00:23:52.660
hang on, I want to
interrupt you and just let's

422
00:23:52.990 --> 00:23:55.270
focus in on that for
a second. That's not where

423
00:23:55.270 --> 00:23:57.640
we need to be creative.
Like that's the thing it's

424
00:23:57.970 --> 00:24:01.540
deployment. It's CIC D it's,
you know, we, we are

425
00:24:01.540 --> 00:24:04.000
not a unique snowflake. You
may be creating a new

426
00:24:04.000 --> 00:24:09.100
startup. That's going to revolutionize
the blank industry. You don't

427
00:24:09.100 --> 00:24:11.080
say well, before we do
that, let's write a new

428
00:24:11.080 --> 00:24:13.750
JavaScript framework or let's go
with a brand new way

429
00:24:13.750 --> 00:24:16.330
to deploy. Let's sit on
the best practices of the

430
00:24:16.330 --> 00:24:19.810
last, last 30 years. So
at the end, you know,

431
00:24:19.930 --> 00:24:23.200
I'm glad to say that,
you know, our innovation is

432
00:24:23.200 --> 00:24:26.470
in the UI. And obviously
there are some innovations that

433
00:24:26.650 --> 00:24:29.410
we're making in terms of
how are we scaling so

434
00:24:29.410 --> 00:24:31.570
many deployments, because like I
said earlier, every time we

435
00:24:31.570 --> 00:24:34.750
would, right now, we give
you a new server. So

436
00:24:34.750 --> 00:24:37.180
there's a lot of interesting
challenges behind this that are

437
00:24:37.420 --> 00:24:40.720
absolutely novel, but I'm also,
you know, very proud to

438
00:24:40.720 --> 00:24:41.830
say that there are a
lot of things that are

439
00:24:41.830 --> 00:24:44.770
not novel, like the way
that our load balancers work

440
00:24:44.770 --> 00:24:48.010
is, you know, very, very
typical. The way that we

441
00:24:48.010 --> 00:24:50.800
scale in terms of booting
up many versions of a

442
00:24:50.800 --> 00:24:53.980
deployment is not, it's very,
very typical. So in a

443
00:24:53.980 --> 00:24:57.340
way, it's, you have to
find that balance between I

444
00:24:57.340 --> 00:25:00.580
focused on the UI in
this case, we've made a,

445
00:25:00.640 --> 00:25:03.040
I think of revolutionary UI
with now in that, you

446
00:25:03.040 --> 00:25:06.400
know, it's very simple to
use, very easy to use.

447
00:25:07.240 --> 00:25:10.510
And at the same time
for you, that also is

448
00:25:10.510 --> 00:25:13.270
true for your own project
or company, because you want

449
00:25:13.270 --> 00:25:16.600
to focus really on that
interaction with the user and

450
00:25:16.630 --> 00:25:19.930
the user's not interacting with
load balancers or the user's

451
00:25:19.930 --> 00:25:25.180
not interacting with, you know,
the Plymouth strategies. So this

452
00:25:25.180 --> 00:25:26.680
is kind of like that
idea that, you know, you

453
00:25:26.680 --> 00:25:29.410
have to go to production
as fast as possible, right?

454
00:25:29.440 --> 00:25:31.930
And need weight as fast
as possible. Let me ask

455
00:25:31.930 --> 00:25:35.080
a couple of short kind
of precise questions to kind

456
00:25:35.080 --> 00:25:36.850
of rapid fire through a
couple of things that I

457
00:25:36.850 --> 00:25:39.700
think people might wonder when
they start using something like

458
00:25:39.730 --> 00:25:42.820
now for it, you can
do static sites. You can

459
00:25:42.820 --> 00:25:45.100
do Docker based sites. You
can do node sites. What

460
00:25:45.100 --> 00:25:47.740
is the expectation for the
data? Certainly these are immutable.

461
00:25:47.740 --> 00:25:49.780
You don't want to be
writing inside the container, but

462
00:25:49.780 --> 00:25:52.390
you also don't necessarily want
to punch a hole in

463
00:25:52.390 --> 00:25:55.150
a container with volume mounting.
Would you use some other

464
00:25:55.150 --> 00:25:59.560
cloud based database? And where
would that live? Yeah, absolutely.

465
00:25:59.800 --> 00:26:02.650
So that's a great observation
because the way that we

466
00:26:02.650 --> 00:26:05.680
look at this as they
were building a computer, okay,

467
00:26:06.130 --> 00:26:11.410
and this computer computer say,
even your laptop or your

468
00:26:11.410 --> 00:26:15.820
mobile phone have very distinct
devices or pieces. In fact

469
00:26:16.000 --> 00:26:21.010
devices, their name that Unix
gives to everything. That's when

470
00:26:21.010 --> 00:26:24.850
you talk to the hardware,
right? So the device that

471
00:26:24.880 --> 00:26:30.520
now is working on is
the CPU. So we, we

472
00:26:30.520 --> 00:26:33.100
take care of taking your
code, building it, running it,

473
00:26:33.160 --> 00:26:36.310
making sure it stays up,
scaling it for this type

474
00:26:36.310 --> 00:26:39.190
of application and it's a
web application, but then there

475
00:26:39.190 --> 00:26:41.680
are all these other pieces
that there are a lot

476
00:26:41.680 --> 00:26:45.330
of amazing in the cloud
already. So for the hard

477
00:26:45.330 --> 00:26:49.530
drive, you know, we use
us three ourselves. Why, why

478
00:26:49.530 --> 00:26:52.260
would we want to boot
up a container that is

479
00:26:52.260 --> 00:26:55.620
also a file server that
has all these volumes that

480
00:26:55.620 --> 00:26:58.200
I have to maintain. And
I have to scale. I

481
00:26:58.200 --> 00:27:00.870
don't want to do that
because Amazon has a company

482
00:27:00.870 --> 00:27:04.440
built a great hard drive
for this global computer. And

483
00:27:04.440 --> 00:27:08.880
that's S3. Now, what we
are uniquely positioned to do

484
00:27:08.880 --> 00:27:14.070
with now is we actually
straddle across cloud providers. So

485
00:27:14.100 --> 00:27:17.040
recently there was an outage
with S three. And what

486
00:27:17.040 --> 00:27:19.290
we did is our customers
who were like, but I

487
00:27:19.290 --> 00:27:21.600
thought, you know, you were
able to straddle across why,

488
00:27:21.660 --> 00:27:24.780
you know, why were new
deployments failing? Because we'd had

489
00:27:24.780 --> 00:27:27.450
no downtime for existing employees,
but new ones were failing.

490
00:27:27.870 --> 00:27:30.900
And what do we told
them is let us work

491
00:27:30.900 --> 00:27:33.480
on this. And a week
later we announced that all

492
00:27:33.480 --> 00:27:36.630
your files, all your source
code was being securely replicated

493
00:27:36.870 --> 00:27:41.190
to Google cloud and Amazon.
So now if S3 experiences

494
00:27:41.190 --> 00:27:45.690
some downtime, you will see
your applications won't. So that

495
00:27:45.690 --> 00:27:49.110
going back to your question,
when you're thinking about persisting

496
00:27:49.110 --> 00:27:52.080
state, you don't want to
persist that state in the

497
00:27:52.080 --> 00:27:55.710
cache of the CPU, right?
All CPMs have a cache,

498
00:27:56.100 --> 00:27:59.250
and you could, you could
think of storing data there.

499
00:27:59.250 --> 00:28:01.950
And that's how I tell
people to think about the

500
00:28:02.280 --> 00:28:05.310
hard drive space in their
container, or when node can

501
00:28:05.310 --> 00:28:08.550
ride or the file system.
You could certainly do that,

502
00:28:08.700 --> 00:28:11.100
but treat that as the
CPU cache and, you know,

503
00:28:11.100 --> 00:28:13.230
we allow for no deployments,
we allow them to write

504
00:28:13.230 --> 00:28:18.060
to like slash TMP so
they can use that as

505
00:28:18.060 --> 00:28:21.690
a cash. But in order
to scale this, in order

506
00:28:21.690 --> 00:28:24.570
to fit the model of
scalability that we're proposing, you

507
00:28:24.570 --> 00:28:27.750
know, you have to think
that at any given time,

508
00:28:28.410 --> 00:28:31.740
you might have zero or
infinite copies of your application

509
00:28:31.740 --> 00:28:35.850
running in order to scale
that also for the data

510
00:28:35.850 --> 00:28:39.390
storage side of things, you
have to think about, you

511
00:28:39.390 --> 00:28:45.510
know, independently scaling the storage
from the actual deployments. And

512
00:28:45.510 --> 00:28:48.390
that's how we we've been
very successful in solving the

513
00:28:48.390 --> 00:28:50.940
problem so far, because some
of our customers, they have

514
00:28:51.030 --> 00:28:53.760
a specific, for example, their
you're building a real time

515
00:28:53.760 --> 00:28:56.610
game. You host your code
with now and you talk

516
00:28:56.610 --> 00:29:00.750
to Firebase, for example, or
you talk to Google cloud

517
00:29:00.750 --> 00:29:04.530
SQL or, or talk to
Amazon RDS. And each database

518
00:29:04.530 --> 00:29:06.780
has different trade offs. And
this is also something that's

519
00:29:06.810 --> 00:29:10.350
become an immersed as a
best practice, right? Like every

520
00:29:10.350 --> 00:29:13.260
time we've tried to treat
a database as a general

521
00:29:13.260 --> 00:29:17.880
purpose of storage system, it's
fell short of its, you

522
00:29:17.880 --> 00:29:20.370
know, intent. So for example,
when we tried to put

523
00:29:20.370 --> 00:29:23.580
all our file system into
my SQL blob, that didn't

524
00:29:23.580 --> 00:29:28.290
work out. When we try
to put all our financial

525
00:29:28.290 --> 00:29:31.920
data that had to be
persisted to the drive, before

526
00:29:31.920 --> 00:29:34.770
we acknowledge it back to
their network with Mongo DB,

527
00:29:34.770 --> 00:29:38.040
we failed. So each database
has a particular set of

528
00:29:38.040 --> 00:29:42.490
defaults. Each database has a
particular strength. Each data database

529
00:29:42.490 --> 00:29:46.930
has a particular location in
the world. So we give

530
00:29:46.930 --> 00:29:49.630
you that freedom to make
the best possible decision for

531
00:29:49.630 --> 00:29:53.400
your business use case. That
was a lot of information

532
00:29:53.400 --> 00:29:56.820
that was all valuable information
in the simplest possible terms.

533
00:29:57.210 --> 00:30:01.470
Should I use a cloud
database that has, that is

534
00:30:01.470 --> 00:30:05.370
the backend. Absolutely. So as
for your files, for example,

535
00:30:06.840 --> 00:30:11.730
you know, find your document
To be Firebase. What exactly,

536
00:30:11.880 --> 00:30:13.680
That's the beauty of it
too. It's like, you're getting

537
00:30:13.680 --> 00:30:16.410
to choose the best data
model you're getting to choose

538
00:30:16.410 --> 00:30:23.370
the best ABI. Exactly. Excellent.
And when we say scalable,

539
00:30:23.520 --> 00:30:26.100
how big could this go?
Because I think that there's

540
00:30:26.100 --> 00:30:28.680
two optimizations that you're having
to do here. You're optimizing

541
00:30:28.680 --> 00:30:31.320
for what I call zero
to 10 miles an hour.

542
00:30:31.530 --> 00:30:34.530
I mean, it's, it's falling
off a log, easy to

543
00:30:34.530 --> 00:30:38.430
get my, my, this is
probably the only system where

544
00:30:38.430 --> 00:30:40.890
I could say to my
eight year old, can you

545
00:30:40.890 --> 00:30:42.750
make a website? And they
could do it once they

546
00:30:42.750 --> 00:30:45.750
were authenticated as a user.
I don't, I don't think

547
00:30:45.750 --> 00:30:47.610
it's reasonable for an eight
year old to go and

548
00:30:47.610 --> 00:30:50.820
get push Azure master and
then do a, you know,

549
00:30:50.820 --> 00:30:53.640
a Heroku or Azure base
get deployment. So that's amazing.

550
00:30:53.790 --> 00:30:57.420
But could I run, you
know, Twitter on this? Or

551
00:30:57.420 --> 00:31:00.150
how big could we go
At some point? So just

552
00:31:00.150 --> 00:31:03.480
to give you a perspective
on our current scale, because

553
00:31:03.480 --> 00:31:09.930
maybe for your deployment, which
I think was a xy.net.hanselman.com

554
00:31:10.200 --> 00:31:13.710
for that's just one instance
writing right now. But if

555
00:31:13.710 --> 00:31:15.810
you think about the aggregate
of our system right now,

556
00:31:16.050 --> 00:31:20.490
we're at any given time
running thousands of concurrent applications

557
00:31:20.760 --> 00:31:24.600
at different levels of scale.
And what's really exciting as

558
00:31:24.600 --> 00:31:28.440
well is because we know
how to scale HTTP. In

559
00:31:28.440 --> 00:31:31.470
most cases, we can automate
the scalability part of your

560
00:31:31.470 --> 00:31:36.510
application because we can detect
the growth in traffic or

561
00:31:36.510 --> 00:31:38.820
to growth in resource usage,
and we can scale it

562
00:31:38.820 --> 00:31:41.790
on your behalf. So one
of the API that we're

563
00:31:41.790 --> 00:31:46.350
exposing very soon is when
you run now LS, you're

564
00:31:46.350 --> 00:31:49.290
going to be able to
see for each deployment, how

565
00:31:49.290 --> 00:31:52.830
many instances of that deployment
that are actually running. So

566
00:31:52.830 --> 00:31:55.830
the deployment URL will always
be the same. So for

567
00:31:55.830 --> 00:32:00.120
our listeners, the deployment URL
is for example, my dash

568
00:32:00.120 --> 00:32:04.290
project dash, our unique ID
dot. Now that is age,

569
00:32:04.650 --> 00:32:07.470
Right? So I just did
now LS, and I've got

570
00:32:07.980 --> 00:32:11.850
six deployments of the zeit.net
sample I did and you

571
00:32:11.850 --> 00:32:14.460
know, a half dozen other
ones. And honestly, I'm looking

572
00:32:14.460 --> 00:32:16.290
at that now the same
way I look at running

573
00:32:16.290 --> 00:32:18.780
Docker containers on my local
machine with Docker PS. And

574
00:32:18.780 --> 00:32:21.960
I'm wondering, gosh, I should
probably cut it up. And

575
00:32:21.960 --> 00:32:23.870
I'd like to know which
one of these is, is

576
00:32:23.910 --> 00:32:26.550
in production. So I don't
want to delete them all.

577
00:32:26.550 --> 00:32:28.650
I want to trim my
tree here and delete everything.

578
00:32:28.650 --> 00:32:31.290
That's not currently in production.
So the way we do

579
00:32:31.290 --> 00:32:34.110
that is we call the
alias system. So if you

580
00:32:34.110 --> 00:32:37.170
go ahead and right now,
alias LS, you're going to

581
00:32:37.170 --> 00:32:40.580
see what each of those
deployments is currently being Eylea

582
00:32:41.140 --> 00:32:44.590
Two. Okay. Just one of
them is exactly Right now,

583
00:32:44.620 --> 00:32:49.210
zeit.net dot <inaudible> dot com
is aliased to a particular

584
00:32:49.210 --> 00:32:52.840
deployment. So notice that I'm
saying alias and you never

585
00:32:53.170 --> 00:32:56.500
in our system dealing with
editing DNS records, you never

586
00:32:56.500 --> 00:32:59.920
deal with emitting certificates. Even
all you do is you

587
00:32:59.920 --> 00:33:02.980
run now alias and the
deployment URL, and then the

588
00:33:02.980 --> 00:33:05.590
target. So that target could
be a sub domain like

589
00:33:05.590 --> 00:33:09.100
you did i.net dot <inaudible>.
The eCom could be a

590
00:33:09.100 --> 00:33:12.490
top level domain. It could
be google.com, et cetera, et

591
00:33:12.490 --> 00:33:14.980
cetera. So going back to
your question of like, how

592
00:33:14.980 --> 00:33:17.470
do I scale this to
the Twitter scale? So the

593
00:33:17.470 --> 00:33:21.610
bottom line is twitter.com is
simply one version of a

594
00:33:21.610 --> 00:33:27.700
deployment. That's been scaled horizontally
to multiple, multiple copies. So

595
00:33:28.060 --> 00:33:31.120
what we're going to introduce
is for our customers to

596
00:33:31.120 --> 00:33:34.000
be able to see with
now Elliot to lists each

597
00:33:34.000 --> 00:33:37.600
particular instance, that's underlying a
deployment. And what's really interesting

598
00:33:37.600 --> 00:33:39.640
is each of those is
also going to have its

599
00:33:39.640 --> 00:33:44.590
own unique URL. Why is
this interesting when failure occurs?

600
00:33:44.830 --> 00:33:47.890
Failure is not necessarily something
that's going to be widespread.

601
00:33:47.890 --> 00:33:52.390
So let's say a particular
user called was signing up.

602
00:33:52.720 --> 00:33:55.150
Okay. So they went to
handle my, that comment and

603
00:33:55.150 --> 00:33:58.630
slash sign up. And by
the way, we recently introduced

604
00:33:58.630 --> 00:34:01.090
the ability for the alias
assistant to actually target a

605
00:34:01.090 --> 00:34:04.990
specific path. So this, for
a lot of people, microservices

606
00:34:04.990 --> 00:34:08.230
are unapproachable. Why? Because they
don't really know what that

607
00:34:08.230 --> 00:34:12.220
even means. What we're giving
people is a recipe for

608
00:34:12.220 --> 00:34:15.400
being successful with microservices. And
what that is is you

609
00:34:15.400 --> 00:34:21.340
can point hanselman.com/signup to a
specific deployment so that a

610
00:34:21.350 --> 00:34:26.440
specific supplements job will be
to only perform the signup

611
00:34:26.470 --> 00:34:29.740
task. Okay. I see. So
let's say I make a

612
00:34:29.770 --> 00:34:32.980
Hanselman swag store. I can
have the shopping cart be

613
00:34:32.980 --> 00:34:37.060
a micro service and an
alias and alias series of

614
00:34:37.060 --> 00:34:41.200
end containers. I can have
the user authentication and account

615
00:34:41.200 --> 00:34:44.770
page, the product catalog, et
cetera. Absolutely. And even further,

616
00:34:45.040 --> 00:34:47.830
let's say you have API
that handled my outcome and

617
00:34:47.830 --> 00:34:50.590
you have 20 different end
points there. Each of those

618
00:34:50.590 --> 00:34:53.470
can be a container and
even more interesting, each of

619
00:34:53.470 --> 00:34:55.720
those can be in a
written, a different programming language.

620
00:34:55.960 --> 00:34:58.300
So you can sort of
like have a very diverse

621
00:34:58.300 --> 00:35:01.510
team of people that with
different capabilities that are using

622
00:35:01.510 --> 00:35:05.410
this beautiful contract that is
HDP to sort of coordinate

623
00:35:05.410 --> 00:35:08.680
their work. Right? So like
you, if you're a project

624
00:35:08.680 --> 00:35:11.080
manager, you have to say
to one of the developers,

625
00:35:11.080 --> 00:35:14.020
Hey, what do you think
about making API that handsome

626
00:35:14.020 --> 00:35:18.070
on that comma slash users
return, you know, this type

627
00:35:18.070 --> 00:35:21.220
of Jason shape, for example,
and the level can go

628
00:35:21.220 --> 00:35:25.270
ahead and write that in
COBOL. And it's probably not

629
00:35:25.510 --> 00:35:27.550
going to perform really well
in that programming language. But,

630
00:35:27.670 --> 00:35:29.710
you know, as the project
evolves, you can rewrite again,

631
00:35:29.710 --> 00:35:33.880
experiment with new technologies. So
going back to the failure,

632
00:35:34.000 --> 00:35:38.550
isolation idea, imagine that an
API end point that you

633
00:35:38.550 --> 00:35:42.420
have is running a thousand
copies of that deployment. And

634
00:35:42.450 --> 00:35:44.910
I went to sign up
and I introduced as a

635
00:35:44.910 --> 00:35:48.870
user. I said, Bobby tables.
And let's say you didn't

636
00:35:48.870 --> 00:35:54.990
handle that case gracefully. So
your container actually gets destroyed

637
00:35:55.020 --> 00:35:58.410
like it, you know, it
crashes completely. And that's why

638
00:35:58.410 --> 00:36:01.590
it's going to be interesting
that we expose what I

639
00:36:01.590 --> 00:36:05.310
call the instance URLs. So
each deployment will have a

640
00:36:05.310 --> 00:36:08.760
thousand copies and those thousand
copies will have a unique

641
00:36:08.760 --> 00:36:12.090
URL as well. So when
it comes down to debugging,

642
00:36:12.300 --> 00:36:15.180
you're going to be able
to inspect that a specific

643
00:36:15.180 --> 00:36:18.540
copy and ask a questions
like, okay, what are the

644
00:36:18.540 --> 00:36:22.410
logs for this specific copy?
How much traffic was there?

645
00:36:22.410 --> 00:36:26.040
And this is specific copy
when that happened. So the

646
00:36:26.040 --> 00:36:30.000
entire system has been built
upon this idea of immutability

647
00:36:30.300 --> 00:36:33.690
that every deployment that each
is instance is brand new

648
00:36:33.930 --> 00:36:37.620
and it has a universal
resource locator. And that is

649
00:36:37.620 --> 00:36:41.940
going to be able to
let you scale very effectively.

650
00:36:41.940 --> 00:36:44.670
And for example, deal with
failure at scale, in a

651
00:36:44.670 --> 00:36:46.800
way that, you know, it's
not a nightmare to debug,

652
00:36:46.830 --> 00:36:50.760
for example, very cool. Well,
I feel like I could

653
00:36:50.760 --> 00:36:53.070
talk to you all day,
but I'm afraid we're already

654
00:36:53.130 --> 00:36:55.560
well over how long a
one of these shows usually

655
00:36:55.560 --> 00:37:00.900
is. People can, can learn
about this@design.co and you can

656
00:37:00.900 --> 00:37:04.020
learn about now, which is
the deployment tool, or now

657
00:37:04.020 --> 00:37:07.770
that it's H also as
a shortcut now dot S

658
00:37:07.770 --> 00:37:09.930
H very cool. You have
all the great URLs you're

659
00:37:09.930 --> 00:37:12.570
going to find job. Thank
you. I appreciate it. Well,

660
00:37:12.570 --> 00:37:15.180
thanks for chatting with me
today. Yeah, it's been awesome.

661
00:37:15.510 --> 00:37:18.270
And if any of the
listeners also have any questions,

662
00:37:18.270 --> 00:37:23.310
they can join a Zeit
chat, which is our Slack

663
00:37:23.340 --> 00:37:28.440
community or public Slack community.
And also reach out to

664
00:37:28.440 --> 00:37:33.090
me on Twitter. My Twitter
is at Rouch G and

665
00:37:33.090 --> 00:37:36.840
a welcome all questions and
comments. Very cool. I'll put

666
00:37:36.840 --> 00:37:39.210
links to all of that
in the show notes. Thank

667
00:37:39.210 --> 00:37:42.510
you. This has been another
episode of Hanselminutes and we'll

668
00:37:42.510 --> 00:37:43.740
see you again next week.

