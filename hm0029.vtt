WEBVTT FILE

1
00:00:12.630 --> 00:00:18.060
From Hansel minutes.com. It's Hanselman.
It's a weekly discussion with

2
00:00:18.060 --> 00:00:24.270
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:24.270 --> 00:00:31.560
is Jeff May like announcing show
number 29. Recorded Tuesday, August 15th, 2006.

4
00:00:32.070 --> 00:00:35.280
Support for Hansel minutes is
provided by code Smith tools,

5
00:00:35.490 --> 00:00:39.360
makers of code Smith, an
extensible template based code generator

6
00:00:39.360 --> 00:00:44.250
for.net Hansel minutes. Listeners get
$100 off COVID Smith professional

7
00:00:44.250 --> 00:00:51.900
with coupon code H M
100. online@covidsmithtools.com. Support is also

8
00:00:51.900 --> 00:00:56.670
provided by dotnet developers journal.
The world's leading.net developer magazine

9
00:00:57.000 --> 00:01:03.240
online at www dot <inaudible>
dot com. In this episode,

10
00:01:03.240 --> 00:01:10.050
the topic is dynamic versus
compiled languages. Hi, this is

11
00:01:10.050 --> 00:01:12.750
Carl Franklin and you're listening to
Hansel minutes from Hanselman it's

12
00:01:12.750 --> 00:01:15.450
dot com. I'm here with
Scott Hanselman as I am

13
00:01:15.450 --> 00:01:18.660
every week. Hi Scott, how
are you, sir? Good to

14
00:01:18.660 --> 00:01:22.110
talk to you again and
today we're doing a show

15
00:01:22.140 --> 00:01:25.920
on disruptive technologies. What do
you mean by that? Exactly.

16
00:01:26.790 --> 00:01:29.670
Well, I think that disruptive
technologies that are the ones

17
00:01:29.670 --> 00:01:31.920
that come along every few
years and remind us that

18
00:01:31.920 --> 00:01:34.500
maybe we're doing things a
little more, more and more

19
00:01:34.500 --> 00:01:36.690
hard than we need to
be spending a little bit

20
00:01:36.690 --> 00:01:39.330
more time on things that
aren't as important. I think

21
00:01:39.330 --> 00:01:42.270
that the, that Ruby is
a good example in particularly

22
00:01:42.270 --> 00:01:44.220
Ruby on rails is a
good example of something that's

23
00:01:44.220 --> 00:01:47.100
come along and reminded us
that no development on the

24
00:01:47.100 --> 00:01:51.000
web really doesn't need to
be this complicated. And we

25
00:01:51.000 --> 00:01:54.060
spent a lot of time
as.net developers suffering in the

26
00:01:54.060 --> 00:01:58.020
ASP ASP early, early, early
asp.net years. And you know,

27
00:01:58.020 --> 00:02:00.960
things are coming along that
are disrupting kind of the

28
00:02:00.960 --> 00:02:04.380
way we think, you know,
people are moving away from

29
00:02:04.380 --> 00:02:08.730
complex web applications to, to
simpler patterns. And I think

30
00:02:08.730 --> 00:02:11.550
that a Ruby and Ruby
on rails and the success

31
00:02:11.550 --> 00:02:15.390
of those technologies are worth
exploring, but not just because

32
00:02:15.390 --> 00:02:18.720
it's something interesting. It's not
Microsoft, but because most of

33
00:02:18.720 --> 00:02:20.340
the people, I think that
listen to this show or

34
00:02:20.340 --> 00:02:24.000
Microsoft E's in some way,
Microsoft and.net pay our mortgages,

35
00:02:24.450 --> 00:02:28.230
but that what can we,
as dotnet developers learn from

36
00:02:28.230 --> 00:02:31.710
Ruby and Ruby on rails
to apply to our lives

37
00:02:31.710 --> 00:02:34.650
as.net developers, right? This doesn't
mean we should necessarily jump

38
00:02:34.650 --> 00:02:37.020
ship, but you know, you're
writing code, like just for

39
00:02:37.020 --> 00:02:39.450
example, the code that you
use to manage Hansel minutes

40
00:02:39.780 --> 00:02:42.270
and the shows that, that,
that you work on, right?

41
00:02:42.270 --> 00:02:45.210
It's all written asp.net, right?
You can an administrative console.

42
00:02:45.570 --> 00:02:49.650
Yeah. It's mostly using what
we call crud. Right? Create,

43
00:02:49.650 --> 00:02:53.700
read, update, delete. Sure. There's
a lot of code there.

44
00:02:53.700 --> 00:02:55.170
I mean, how much code
are we talking about for

45
00:02:55.170 --> 00:02:57.330
the Hansel minutes? Admin? No,
not a lot of code.

46
00:02:57.630 --> 00:02:59.290
A couple of thousand lines,
couple hundred lines. Do you

47
00:02:59.290 --> 00:03:02.940
think? Oh, Oh, Couple hundred
lines. Really? Not a lot

48
00:03:02.940 --> 00:03:04.980
of cut at all. Okay.
So you use a lot

49
00:03:04.980 --> 00:03:08.130
of data grids, data binding
things like exactly. Did you

50
00:03:08.130 --> 00:03:12.000
write a lot of story
procedures? Just a few. Yeah.

51
00:03:12.960 --> 00:03:17.910
Did you do any cogeneration?
No. So there's an example

52
00:03:17.910 --> 00:03:21.570
kind of, of a middle,
middle of the road.net application

53
00:03:21.570 --> 00:03:24.630
does some creates reads updates
and deletes. You probably use

54
00:03:24.640 --> 00:03:26.340
a lot of the wizards
you took advantage of as

55
00:03:26.340 --> 00:03:28.770
much as.net as possible. And
you know, being that you

56
00:03:28.770 --> 00:03:31.350
are a trainer on this
kind of stuff, you're not

57
00:03:31.350 --> 00:03:34.350
going to waste your time
writing code that already exists.

58
00:03:34.740 --> 00:03:37.470
Exactly. And for, and for
us, you know, the only

59
00:03:37.470 --> 00:03:40.260
people who have to use
it are in inside, you

60
00:03:40.260 --> 00:03:43.620
know, in house maybe three
or four people and usually

61
00:03:43.620 --> 00:03:46.410
only one at a time.
Sure. So it doesn't need

62
00:03:46.410 --> 00:03:48.510
to necessarily be pretty, but
it's very functional. I mean,

63
00:03:48.510 --> 00:03:50.700
I've used it and I've
worked, I've done administration on

64
00:03:50.700 --> 00:03:52.000
the show. So it's not
that big of a, a,

65
00:03:52.380 --> 00:03:53.730
not a big of a
deal, but it's a good

66
00:03:53.730 --> 00:03:57.360
example of what we call
kind of the 80% example.

67
00:03:57.360 --> 00:04:01.830
It's the adding of information
to assist them, retrieving it,

68
00:04:01.860 --> 00:04:05.670
looking at it, sorting it,
adding details. If you were

69
00:04:05.670 --> 00:04:07.410
going to do something like
an upgrade to it, you'd

70
00:04:07.410 --> 00:04:09.600
probably kind of do it
manually. You change the schema

71
00:04:09.600 --> 00:04:11.190
and then you change the
code and it would be,

72
00:04:11.190 --> 00:04:15.630
would work just fine. Right
now, I'm in the.net world.

73
00:04:16.410 --> 00:04:20.430
When you go file new
web application, you pretty much

74
00:04:20.460 --> 00:04:23.010
get a blank page. You
know, hello world is really

75
00:04:23.010 --> 00:04:27.060
the start. When you go
file new asp.net application in

76
00:04:27.060 --> 00:04:29.910
the Ruby on rails world,
there's you get a little

77
00:04:29.910 --> 00:04:33.330
bit more rails assumes that
you're probably going to be

78
00:04:33.330 --> 00:04:36.450
talking to a database and
it has a thing called

79
00:04:36.450 --> 00:04:40.320
scaffolding. You basically say, I
want to scaffold out a,

80
00:04:40.590 --> 00:04:45.390
an application. And when you
run scaffolding after installing Ruby

81
00:04:45.390 --> 00:04:49.230
and rails, and maybe something
like, like my sequel, you

82
00:04:49.230 --> 00:04:53.010
sit down and you basically
go and say rails space.

83
00:04:53.040 --> 00:04:55.500
And then if I wanted
an application called foo, I'd

84
00:04:55.500 --> 00:04:59.130
say rail space Fu and
I would get a whole

85
00:04:59.130 --> 00:05:02.490
application created for me, an
empty web application that would

86
00:05:02.490 --> 00:05:05.340
run under really any web
server. But, you know, typically

87
00:05:05.340 --> 00:05:08.130
you can run it under
either their, their built in

88
00:05:08.130 --> 00:05:11.940
web server or under something
like Apache and you get

89
00:05:11.940 --> 00:05:14.400
started up. You're basically, you
hit a hello world page

90
00:05:14.400 --> 00:05:17.190
that says, congratulations, you're on
rails. It reminds me of

91
00:05:17.190 --> 00:05:20.880
the visual basic application wizard
or something like that. Right.

92
00:05:20.880 --> 00:05:23.040
It gives you a lot
more, I think, than, than

93
00:05:23.040 --> 00:05:25.590
we're really used to getting.
I think that, Is it

94
00:05:25.590 --> 00:05:27.900
good? Is it good code?
Is it something, is it

95
00:05:27.900 --> 00:05:32.160
typical wizard output or is
it something that actually is

96
00:05:32.160 --> 00:05:35.460
sustainable? Well, so here's the
thing that's so interesting about,

97
00:05:35.700 --> 00:05:39.300
about rails is that they
have a philosophy which they

98
00:05:39.300 --> 00:05:43.410
call a convention over configuration.
We talked about this a

99
00:05:43.410 --> 00:05:45.690
little bit in a previous
show as a philosophy that

100
00:05:45.690 --> 00:05:48.510
we like to apply to.net
code, but they have a

101
00:05:48.510 --> 00:05:50.670
lot of conventions. You know,
they say that, you know,

102
00:05:50.670 --> 00:05:53.250
stuff, stuff goes in the
config folder and we have

103
00:05:53.250 --> 00:05:55.650
a folder called test and
we have a folder called

104
00:05:55.650 --> 00:05:59.000
app and you can't those
right? That's what the folders

105
00:05:59.000 --> 00:06:01.010
name is. Right, right. And
a dot. And this is

106
00:06:01.010 --> 00:06:03.830
a generalization, but in a.net
application, you'd typically have some

107
00:06:04.280 --> 00:06:07.130
app, you know, config file
where you could override that

108
00:06:07.160 --> 00:06:09.470
the name of that directory
is this. Or I, you

109
00:06:09.470 --> 00:06:11.990
know, I want this file
to be over there. They

110
00:06:11.990 --> 00:06:15.730
say, no, we're going to
really focus on convention. Standardized

111
00:06:15.730 --> 00:06:19.490
that stuff. Exactly. One less
thing to worry about. Now,

112
00:06:19.880 --> 00:06:22.520
the, the, the code that
gets generated. What's interesting about

113
00:06:22.520 --> 00:06:25.400
it. Is it? So there's
so nothing there it's incredibly

114
00:06:25.400 --> 00:06:30.230
simple. And what, what really
makes rails work is that

115
00:06:30.230 --> 00:06:34.430
it understands how the software
development process should work. For

116
00:06:34.430 --> 00:06:38.990
example, when you're dealing with
a database, you typically have

117
00:06:38.990 --> 00:06:41.750
a development database, maybe a
test, one for running your

118
00:06:41.750 --> 00:06:45.980
unit test and a production,
one with.net. There's really no

119
00:06:46.040 --> 00:06:48.710
built in way that knows
that this is the case,

120
00:06:48.890 --> 00:06:52.130
right? You typically will have
different connection strings, right? If

121
00:06:52.130 --> 00:06:54.800
a connection string that you
would modify on a web

122
00:06:54.800 --> 00:06:58.070
dot config in rails, they
have a thing called a

123
00:06:58.310 --> 00:07:02.540
database dot YML file. It's
basically like in any file.

124
00:07:02.900 --> 00:07:05.840
And within that, you indicate
different environments. You can say,

125
00:07:05.840 --> 00:07:08.570
well, I'm going to use
the, the, my SQL adapter

126
00:07:08.570 --> 00:07:11.150
during development to talk to
this database on the local

127
00:07:11.150 --> 00:07:13.700
host with this name and
password. But when I go

128
00:07:13.700 --> 00:07:15.380
to test, I'll run over
here. And when I go

129
00:07:15.380 --> 00:07:17.990
to production, I'll be using
this different adapter. So it

130
00:07:17.990 --> 00:07:21.200
actually knows that there are
different modes. It's built that

131
00:07:21.440 --> 00:07:25.160
it's built that in. So
there's just an example where

132
00:07:25.460 --> 00:07:30.590
the, the way that development
is done in software is

133
00:07:30.590 --> 00:07:34.220
built into the application itself.
The whole framework knows that

134
00:07:34.220 --> 00:07:36.250
this is how things happen.
Well, there's plenty of that

135
00:07:36.250 --> 00:07:40.240
stuff in ASP net, I
would argue, Hey, we're an

136
00:07:40.240 --> 00:07:43.450
asp.net other than saying debug
equals false. Do you indicate

137
00:07:43.720 --> 00:07:46.390
that now I am developing.
Now I am testing now.

138
00:07:46.870 --> 00:07:48.490
No, no, no. That's not
what I meant. That's not

139
00:07:48.490 --> 00:07:49.960
what I meant. I meant,
you know, the kind of

140
00:07:49.960 --> 00:07:53.890
nice extra things such as
the ability to just drag

141
00:07:53.890 --> 00:07:57.700
a table from data and
have an editable grid. You

142
00:07:57.700 --> 00:08:01.150
know, that's a nice high
level feature. The connection strings

143
00:08:01.660 --> 00:08:05.440
in the config file, you
know, as a standardized way,

144
00:08:05.740 --> 00:08:08.740
the personalization, I mean, there's
a lot of high level

145
00:08:08.740 --> 00:08:13.000
features in asp.net, especially to
O that you could consider

146
00:08:13.000 --> 00:08:16.690
falling into that same camp
of extra stuff. Okay, let

147
00:08:16.690 --> 00:08:19.180
me, let me rephrase. Then.
That's a good point. But

148
00:08:19.420 --> 00:08:21.670
so there are lots of
things in asp.net that make

149
00:08:21.700 --> 00:08:24.730
development easy, but I think
that there's not necessarily a

150
00:08:24.730 --> 00:08:28.300
whole lot of things that
make the development process easy

151
00:08:29.290 --> 00:08:33.070
migrations. For example, when you
migrate from one version of

152
00:08:33.070 --> 00:08:35.440
an app to another version
of an app, right? Let's

153
00:08:35.440 --> 00:08:37.600
say I build an application,
I make a table with

154
00:08:37.630 --> 00:08:39.760
people and I've got a
first name, column, and a

155
00:08:39.760 --> 00:08:43.600
last name column, and I've
got an object that I'm

156
00:08:43.600 --> 00:08:47.860
going to be storing in
that column within asp.net. I

157
00:08:47.860 --> 00:08:51.100
might create a, a class
person and he has a

158
00:08:51.100 --> 00:08:53.170
first name and last name.
And then I might take

159
00:08:53.170 --> 00:08:56.010
that user and maybe I'll
use something like N hibernate,

160
00:08:56.130 --> 00:08:58.860
but you know, not a
lot of average, Joe developers

161
00:08:58.860 --> 00:09:01.950
use tools like that, that
are object relational mappers. Typically

162
00:09:01.950 --> 00:09:04.770
they'll write the data, access
layer themselves, right? And they'll

163
00:09:04.770 --> 00:09:07.560
take that object apart and
make sure that that object

164
00:09:07.560 --> 00:09:11.730
gets put into the, the
table appropriately. So then the

165
00:09:11.730 --> 00:09:15.240
application changes, I have to
modify the schema, right? So

166
00:09:15.240 --> 00:09:17.460
I'll go into SQL, modify
the schema and then generate

167
00:09:17.460 --> 00:09:19.740
a SQL file that I
have to remember to run

168
00:09:19.740 --> 00:09:23.280
on the production database, to
alter that table and add

169
00:09:23.280 --> 00:09:25.260
a new column. And then
I have to go into

170
00:09:25.260 --> 00:09:27.690
my code and then tell
it that there's this new,

171
00:09:29.010 --> 00:09:31.530
new, middle name field that's
going to be added to

172
00:09:31.530 --> 00:09:35.520
our person table and then
update my data access code

173
00:09:35.520 --> 00:09:38.010
to put that middle name
in there. So it's not

174
00:09:38.010 --> 00:09:40.770
hard. It's just detail oriented.
There's a lot of stuff

175
00:09:40.770 --> 00:09:45.990
there within rails. There's this
notion of migrations where you

176
00:09:46.410 --> 00:09:50.040
make a change and it
keeps track of what is

177
00:09:50.040 --> 00:09:52.320
going to be required to
get you from this state,

178
00:09:52.320 --> 00:09:56.310
like version one to this
date version one.one. Okay. So

179
00:09:56.460 --> 00:09:58.230
all of this is being
handled by a thing called

180
00:09:58.260 --> 00:10:01.380
active record. An active record
would let you do things

181
00:10:01.380 --> 00:10:06.390
like class project. And then
you could say something like

182
00:10:06.390 --> 00:10:11.250
derives from active wrecker and
a project belongs to a

183
00:10:11.280 --> 00:10:15.690
portfolio. And a project has
one project manager, a project

184
00:10:15.690 --> 00:10:19.020
has many milestones. It sounds
like I'm just reading English.

185
00:10:19.050 --> 00:10:21.150
That's kind of what, what
Ruby looks like when you're

186
00:10:21.150 --> 00:10:23.910
using active record, you might
have in the database, the

187
00:10:23.910 --> 00:10:26.400
description of what a project
looks like, and you just

188
00:10:26.400 --> 00:10:28.920
write your class like that.
I mean, the class project

189
00:10:28.920 --> 00:10:31.560
might be five lines, just
exactly. As I described it,

190
00:10:31.560 --> 00:10:35.460
you would literally write down
class project has one project

191
00:10:35.460 --> 00:10:39.990
manager and those relationships then
get managed by this active

192
00:10:39.990 --> 00:10:44.520
record system. And it handles
the persistence of that to,

193
00:10:44.520 --> 00:10:46.470
and from the database because
Ruby is such a dynamic

194
00:10:46.470 --> 00:10:48.510
language, it handles it. So
then if I wanted to

195
00:10:48.510 --> 00:10:52.800
migrate from one version of
my application to another, I

196
00:10:52.800 --> 00:10:58.770
can automatically just generate the
migration by describing what's changed

197
00:10:59.340 --> 00:11:00.990
by making a change in
saying, all right, I'm gonna

198
00:11:00.990 --> 00:11:02.550
go from this version and
that version, and it'll handle

199
00:11:02.550 --> 00:11:06.600
it for you. It also
keeps track of irreversible migrations

200
00:11:06.750 --> 00:11:09.120
when I move forward, but
I can't back up because

201
00:11:09.120 --> 00:11:10.410
one of the other things
that rails allows you to

202
00:11:10.410 --> 00:11:12.090
do is say, I want
to roll back. I just

203
00:11:12.090 --> 00:11:15.600
made a goof. I added
something to my database. I've

204
00:11:15.600 --> 00:11:17.790
changed my application, but it
was a bad idea. I

205
00:11:17.790 --> 00:11:19.890
need to push the easy
button and roll back everything

206
00:11:19.890 --> 00:11:22.640
automatically. So Scott, the question,
next question that comes to

207
00:11:22.640 --> 00:11:27.200
my mind is, are, are
these features that Microsoft, if

208
00:11:27.200 --> 00:11:29.240
they were listening could say,
Hey, that's a good feature.

209
00:11:29.240 --> 00:11:32.030
We'll add that to in
the next ASP net, or

210
00:11:32.030 --> 00:11:36.530
is it more indicative of
the dynamic language nature of

211
00:11:36.560 --> 00:11:40.780
Ruby that these features become
possible? And which is you've,

212
00:11:40.820 --> 00:11:43.190
you've absolutely nailed it right
there. You've asked, you've asked

213
00:11:43.190 --> 00:11:46.880
both the right questions. One
is Microsoft gonna move towards

214
00:11:46.880 --> 00:11:48.800
this. And definitely, I think
that this is a computer

215
00:11:48.800 --> 00:11:53.090
science thing that's happening, not
necessarily a Microsoft thing, everyone's

216
00:11:53.410 --> 00:11:56.320
in this direction where we
are, we've had this schizophrenia,

217
00:11:56.320 --> 00:12:00.910
right? You know, 30 years
ago, you have your, your

218
00:12:00.910 --> 00:12:04.240
small talk folks that have
got this very dynamic world

219
00:12:04.240 --> 00:12:06.250
and then C plus plus,
and C start getting more

220
00:12:06.250 --> 00:12:09.940
static typing C plus plus
starts making decisions about how

221
00:12:09.940 --> 00:12:13.120
inheritance works. C sharp says,
all right, we don't allow

222
00:12:13.150 --> 00:12:16.330
multiple inheritance things get stronger
and stronger typed. So in

223
00:12:16.330 --> 00:12:17.830
the, in the windows world,
we're kind of having the

224
00:12:17.830 --> 00:12:21.970
screws tightened on us. So
over the last 15, 20

225
00:12:21.970 --> 00:12:24.160
years, the screws have been
tightened and the developers are

226
00:12:24.760 --> 00:12:27.730
dealing with it right. To
mix my metaphors. Right. You

227
00:12:27.730 --> 00:12:31.110
know how to boil a
frog, right? Yeah. Oil boils

228
00:12:31.150 --> 00:12:34.690
water and turn up the
heat slowly. Right. So why

229
00:12:34.690 --> 00:12:37.000
do you think that people
are so excited about JavaScript

230
00:12:37.000 --> 00:12:40.960
and Ajax and about PowerShell
because suddenly this, all the

231
00:12:40.960 --> 00:12:45.070
power of.net and all the
freedom of a dynamic language

232
00:12:45.280 --> 00:12:48.910
is kind of coming out.
So I think that yes,

233
00:12:48.940 --> 00:12:50.740
part of it is that
Ruby is such a dynamic

234
00:12:50.740 --> 00:12:52.480
language. But I think that
if you take a look

235
00:12:52.480 --> 00:12:55.360
at C sharp three O
like at shrink stir slash

236
00:12:55.480 --> 00:12:58.300
H E I you're going
to see that Anders in

237
00:12:58.300 --> 00:13:00.580
the field, folks that are
designing C-sharp Theo are adding

238
00:13:00.580 --> 00:13:05.530
this, this dynamicism then Nam,
then dynamism that too. They're

239
00:13:05.530 --> 00:13:09.490
adding that to C-sharp three.
Oh. And they're making that

240
00:13:09.490 --> 00:13:12.670
happen. And it's technologies like
link L I N Q

241
00:13:12.670 --> 00:13:16.570
at shrinker slash H E
H. And that are making

242
00:13:16.570 --> 00:13:19.420
that possible right. Where you
can have all of the

243
00:13:19.420 --> 00:13:22.830
benefits of a compiler, but
also some of that, that

244
00:13:22.840 --> 00:13:25.240
dynamic behavior that you see
in a, in an interpreted

245
00:13:25.240 --> 00:13:28.810
language. And this is a
really interesting question. What is

246
00:13:28.810 --> 00:13:31.450
limiting this technology in the
Microsoft world right now? And

247
00:13:31.450 --> 00:13:33.670
I think it's the fact
that we're a strongly typed

248
00:13:34.120 --> 00:13:37.840
language that underneath VB and
underneath C-sharp there's that aisle.

249
00:13:37.840 --> 00:13:41.800
Right? Right. There's that compiler?
What do we lean on?

250
00:13:41.800 --> 00:13:44.200
What do we count on?
Well, C, C plus plus

251
00:13:44.200 --> 00:13:47.200
programmers. They really count on
the compiler. You know, I

252
00:13:47.200 --> 00:13:48.970
don't have a lot of
bugs or I know that

253
00:13:48.970 --> 00:13:51.370
nothing horrible is going to
happen because the really, really

254
00:13:51.370 --> 00:13:55.630
strict compiler told me it
was cool. Right, right. They

255
00:13:55.630 --> 00:13:59.140
know that something horrible is
wrong before they run, because

256
00:13:59.140 --> 00:14:04.570
the compiler catches it. But
VB like VB six people,

257
00:14:05.350 --> 00:14:08.170
there were some dynamic language
aspects of VB six with

258
00:14:08.170 --> 00:14:10.510
variants that you really didn't
know the behavior until you

259
00:14:10.510 --> 00:14:15.010
actually run it. So they
moved the, the, that responsibility

260
00:14:15.040 --> 00:14:18.010
out of the compiler a
bit. But where did that,

261
00:14:18.070 --> 00:14:20.110
where did that go? Where
the responsibility go, they took

262
00:14:20.110 --> 00:14:23.350
20% of the responsibility out
of the compiler. There weren't

263
00:14:23.350 --> 00:14:24.550
a lot of unit tests.
I didn't want to use

264
00:14:24.550 --> 00:14:26.260
a lot of unit tests
and VB six, did you

265
00:14:27.040 --> 00:14:30.010
know, there wasn't even such
a thing. Really. Exactly. So

266
00:14:30.010 --> 00:14:33.250
then by 20% of the
quote, unquote responsibility, this, this

267
00:14:33.280 --> 00:14:36.760
theoretical responsibility there of, you
know, who's going to check

268
00:14:36.760 --> 00:14:39.640
stuff, kind of fell on
the floor that got picked

269
00:14:39.640 --> 00:14:41.800
up. We moved into the.net
world where we had really

270
00:14:41.800 --> 00:14:44.950
strong compilers, but also some
dynamic aspects of things with

271
00:14:44.950 --> 00:14:52.130
reflection and with late binding
that allowed us to do

272
00:14:52.130 --> 00:14:54.230
things that could get us
in trouble. But we pick

273
00:14:54.230 --> 00:14:57.320
that ball up with test
driven development. So now we

274
00:14:57.320 --> 00:15:01.600
lean on the compiler halfway
and on the test. So

275
00:15:01.600 --> 00:15:05.470
you're saying with tests, with
test driven development, or even

276
00:15:05.470 --> 00:15:08.380
just you running in unit
for crying out loud, we

277
00:15:08.380 --> 00:15:12.580
are, we, we can now
variants aren't evil anymore. Is

278
00:15:12.580 --> 00:15:15.370
this what you're saying? Not
Well that that's, that's a

279
00:15:15.430 --> 00:15:17.440
kind of a, that's a
good way to put it

280
00:15:17.440 --> 00:15:19.090
to the, on an inflammatory
way to put it. But

281
00:15:19.090 --> 00:15:20.950
you're, you're right. I'm trying
to eat up the, you

282
00:15:20.950 --> 00:15:23.410
know, the no, You're right.
Because what I'm saying is

283
00:15:23.410 --> 00:15:27.070
that dynamic languages are less
evil if you have a

284
00:15:27.070 --> 00:15:30.700
parachute. Right? So our parachute
and C plus plus was

285
00:15:30.730 --> 00:15:32.920
a really hardcore compiler that
wouldn't let us get away

286
00:15:32.920 --> 00:15:36.380
with anything. And we had
less of a parachuting in

287
00:15:36.400 --> 00:15:38.560
VB six, and this is
why you get object reference,

288
00:15:38.560 --> 00:15:41.740
not set all the time
with old VB applications. Right.

289
00:15:42.160 --> 00:15:44.200
This is the cause. What,
what does that really mean?

290
00:15:44.200 --> 00:15:46.480
Right. What does an exception
mean? If you get an

291
00:15:46.480 --> 00:15:50.380
unhandled exception in your application,
it means something happened that

292
00:15:50.380 --> 00:15:53.320
you weren't ready for something
exceptional happens. Something you didn't

293
00:15:53.320 --> 00:15:55.900
expect occurred. Now in a
dynamic language, I can write

294
00:15:55.900 --> 00:15:59.020
a Rubia application. I can
hit save and no one's

295
00:15:59.020 --> 00:16:01.090
going to do anything. No
one cares that I haven't,

296
00:16:01.150 --> 00:16:04.000
that I have syntax errors
all through it. So it's

297
00:16:04.000 --> 00:16:07.270
on me to then fill
it up with a better

298
00:16:07.330 --> 00:16:11.500
testing. So what I'm saying
is that really awesome tests

299
00:16:11.590 --> 00:16:14.860
within an interpreted dynamic environment
can actually take the place

300
00:16:14.860 --> 00:16:17.200
of the compiler. They are
taking the place of the

301
00:16:17.200 --> 00:16:21.100
compiler, because all that the
compiler does is it syntax

302
00:16:21.130 --> 00:16:25.330
checks your intent, right. But
a test is a really

303
00:16:25.330 --> 00:16:28.630
great way of expressing your
intent. Yeah. It goes beyond

304
00:16:28.630 --> 00:16:33.100
the compiling stage. It actually
looks for results. Exactly. Yeah.

305
00:16:33.130 --> 00:16:36.370
Then someone could really get
some real good work done.

306
00:16:37.090 --> 00:16:39.130
If they had a language
that had a really great

307
00:16:39.130 --> 00:16:42.310
compiler, but also a flexible
enough syntax that would let

308
00:16:42.310 --> 00:16:44.860
them do the kinds of
things like active record that

309
00:16:44.860 --> 00:16:47.860
one would want to do
in a performant way. And

310
00:16:47.860 --> 00:16:49.840
then they could build tests
around it. And they have

311
00:16:49.840 --> 00:16:52.690
the best of both worlds.
And I think that five

312
00:16:52.690 --> 00:16:55.510
years from now, we're going
to see a very Ruby

313
00:16:55.510 --> 00:17:01.990
ask C-sharp and a very
Ruby ask VB, as people

314
00:17:02.020 --> 00:17:04.450
start to realize that small
talk has had these kinds

315
00:17:04.450 --> 00:17:07.000
of features for 30 years,
and we've been off kind

316
00:17:07.000 --> 00:17:10.300
of in the desert, in
our strongly typed hardcore compiler

317
00:17:10.300 --> 00:17:12.880
languages. And we're going to
find a very dynamic middle

318
00:17:12.880 --> 00:17:15.760
ground. That's going to involve
very few lines of code.

319
00:17:16.210 --> 00:17:20.170
So what are some examples
of active record and or

320
00:17:20.380 --> 00:17:24.430
rails in the, in the
Microsoft world? Well, Before you

321
00:17:24.430 --> 00:17:27.760
answer that question, let me
ask this, which may be

322
00:17:27.760 --> 00:17:31.810
on the listeners mind also,
what if you're not embracing

323
00:17:31.810 --> 00:17:38.260
test driven development. Wow. Be
afraid. Let me, let me,

324
00:17:38.260 --> 00:17:40.990
let me put it this
way. Not everybody does well

325
00:17:41.080 --> 00:17:43.510
and you know, and everybody
should, this is the thing

326
00:17:43.510 --> 00:17:48.340
I just, That's what I
mean. And I mean more

327
00:17:48.340 --> 00:17:52.100
work for you. Well, Yeah,
Not for you, but you

328
00:17:52.100 --> 00:17:53.510
know what I'm saying? That,
let me, let me give

329
00:17:53.510 --> 00:17:56.720
you an example. I had
an intern this summer. I

330
00:17:56.720 --> 00:17:58.160
wanted to actually get him
on the show, but it

331
00:17:58.160 --> 00:17:59.960
didn't work out, but I
had an intern and he

332
00:17:59.960 --> 00:18:02.510
just finished up yesterday. We
gave our presentation everybody, and

333
00:18:02.510 --> 00:18:06.170
he worked on an asp.net
application that did some online

334
00:18:06.170 --> 00:18:09.080
banking stuff. For some things
that I'm working on. I

335
00:18:09.080 --> 00:18:12.440
can't talk about, this is
a 16 year old sophomore

336
00:18:12.530 --> 00:18:18.050
in high school. Okay. Guys
never coded C-sharp before. He's

337
00:18:18.050 --> 00:18:19.970
at a little bit of
Java in high school. He

338
00:18:19.970 --> 00:18:21.980
did a little VB six
and he played with Ruby

339
00:18:21.980 --> 00:18:26.000
once or twice. And in
30 working days put together

340
00:18:26.000 --> 00:18:29.540
a nice clean online banking
site where someone could log

341
00:18:29.540 --> 00:18:33.110
in and pay their bills.
And how did he accomplish

342
00:18:33.110 --> 00:18:36.770
this? We use test driven
development. We used water, right?

343
00:18:36.770 --> 00:18:39.920
The web application testing in
Ruby for all of our

344
00:18:39.920 --> 00:18:45.140
tests. And we used test
driven development. He wrote 168

345
00:18:45.200 --> 00:18:48.230
tests in water that would
just beat on this thing.

346
00:18:48.410 --> 00:18:51.020
Most of it with negative
testing, because this is a

347
00:18:51.020 --> 00:18:53.090
guy who has no computer
science background. He's a 16

348
00:18:53.090 --> 00:18:56.240
year old kid. And he
just thought about, well, what

349
00:18:56.240 --> 00:18:59.030
would someone evil do to
try to break my application?

350
00:18:59.360 --> 00:19:01.700
So he had hundreds of
tests that would just put

351
00:19:01.700 --> 00:19:04.220
in garbage in text boxes
and try to do, try

352
00:19:04.220 --> 00:19:06.350
to transfer too much money
and just fight with this

353
00:19:06.350 --> 00:19:09.470
application. He pounded on it
like only a 16 year

354
00:19:09.470 --> 00:19:12.050
old could. And we ended
up with more code in

355
00:19:12.050 --> 00:19:14.690
our tests than we did
in our application because the

356
00:19:14.690 --> 00:19:16.880
goal was for the application
to do exactly what it

357
00:19:16.880 --> 00:19:19.760
needed to do and know
more and allow only the

358
00:19:19.760 --> 00:19:23.420
correct input. And when he
coded in this style, he

359
00:19:23.420 --> 00:19:25.310
ended up with a lot
of work in the tests,

360
00:19:25.820 --> 00:19:30.050
but then that test became
his parachute. We had to

361
00:19:30.050 --> 00:19:32.300
go and do some refactoring.
After we gave the presentation,

362
00:19:32.300 --> 00:19:34.070
he had a few hours
before the end of his,

363
00:19:34.400 --> 00:19:36.830
his summer. And we had
a bunch of requirements. They

364
00:19:36.830 --> 00:19:38.750
said, we need these things
changed. He's like, Oh man,

365
00:19:38.750 --> 00:19:40.940
I don't want to change
this application. It's gonna, it's

366
00:19:40.940 --> 00:19:42.830
gonna break everything. And I
said, no, it's not. You

367
00:19:42.840 --> 00:19:46.550
got 168 tests. That'll prove
if anything is broken you'll

368
00:19:46.550 --> 00:19:49.430
know immediately. And we were
right. And that sense of

369
00:19:49.430 --> 00:19:53.150
confidence of, wow, I can
refactor this. We cut another

370
00:19:53.150 --> 00:19:56.600
hundred lines out of the
application and the 168 tests

371
00:19:56.600 --> 00:20:01.280
passing, where are our confidence
that this thing works? Not

372
00:20:01.280 --> 00:20:04.070
just that it compiles cause
compiling just says the syntax

373
00:20:04.070 --> 00:20:07.700
is right, but the intent,
the semantics, Well, Scott, that's

374
00:20:07.700 --> 00:20:11.900
a very good argument why
people should, should use and

375
00:20:11.900 --> 00:20:16.880
embrace test driven development. However,
there are those people that

376
00:20:16.880 --> 00:20:20.570
won't simply because it's not
a requirement. It's not. Yeah.

377
00:20:20.690 --> 00:20:24.470
It's actually, And they will
have buggy code and I

378
00:20:24.530 --> 00:20:27.170
will. What's your other question
is will it be buggier

379
00:20:27.230 --> 00:20:31.820
with a dynamic C-sharp and
a dynamic Phoebe? That's a

380
00:20:31.820 --> 00:20:35.420
very good point then If
you, yeah, here's an example.

381
00:20:35.420 --> 00:20:36.560
Let me give you, let
me say this. Let's say

382
00:20:36.560 --> 00:20:40.130
I wrote some test scripts.
Okay. And I wrote them

383
00:20:40.130 --> 00:20:42.950
to work on an application
and let's say that you're

384
00:20:42.950 --> 00:20:44.720
going to write it in
an application that has only

385
00:20:44.720 --> 00:20:48.700
object, totally dynamic, right? No
strongly typing. And then I'll

386
00:20:48.700 --> 00:20:51.280
write it in C sharp
and our tests will run

387
00:20:51.280 --> 00:20:54.940
against both applications. Yes. Right?
So the exact same test

388
00:20:54.940 --> 00:20:57.730
will do the exact same
stuff to a browser. And

389
00:20:57.730 --> 00:20:59.290
the app just happens to
be written in two different,

390
00:20:59.290 --> 00:21:01.960
totally different languages, as long
as all a hundred and

391
00:21:01.960 --> 00:21:05.500
some odd test pass, does
it really matter what language

392
00:21:05.500 --> 00:21:08.730
it was written? Okay. Now
take away the tests. There

393
00:21:08.730 --> 00:21:10.860
you go. Go. If the
tests weren't there, we can't

394
00:21:10.860 --> 00:21:13.980
know. Right. So, so the
question is if you have

395
00:21:13.980 --> 00:21:17.490
a dynamic language, that's set
up to allow this kind

396
00:21:17.490 --> 00:21:21.280
of variant, you know, behavior.
Exactly. Yeah. That's does it,

397
00:21:21.280 --> 00:21:24.300
does it put, does it
make it a liability not

398
00:21:24.300 --> 00:21:27.120
to use test driven development?
I think it does. That's

399
00:21:27.120 --> 00:21:30.630
a good point. So you
doing dynamic development, doing semi

400
00:21:30.630 --> 00:21:33.780
doing development in a dynamic
language without a lot of

401
00:21:33.780 --> 00:21:36.870
tests could potentially open you
up to a lot of

402
00:21:37.110 --> 00:21:41.010
weird data, typing conversion type
of errors. That's why I

403
00:21:41.010 --> 00:21:44.700
think that negative testing is
so, So then that brings

404
00:21:44.700 --> 00:21:47.100
us to the other conclusion,
which is if you do

405
00:21:47.100 --> 00:21:51.150
not, if there are more
people not doing test driven

406
00:21:51.150 --> 00:21:55.020
development than doing test driven
development, they are not going

407
00:21:55.020 --> 00:21:57.210
to move to the new
dynamic languages. And they going

408
00:21:57.210 --> 00:22:00.570
to stay with the old
version of.net. That was too

409
00:22:00.570 --> 00:22:02.700
many knots there. I got
confused somewhere in the trip.

410
00:22:03.300 --> 00:22:05.460
There are other words. In
other words, let's say, let's

411
00:22:05.460 --> 00:22:10.500
say 65% of the development
going on is non does

412
00:22:10.500 --> 00:22:13.440
not use test driven development,
which it's even more than

413
00:22:13.440 --> 00:22:16.500
that. Oh, I'm sure it's
lots. Right. So C sharp

414
00:22:16.530 --> 00:22:20.460
three O comes out VB,
net 17, whatever it is,

415
00:22:20.460 --> 00:22:24.360
comes out. And they're both
dynamic languages. Is that going

416
00:22:24.360 --> 00:22:27.750
to keep people from upgrading
to the new version, possibly

417
00:22:27.750 --> 00:22:31.110
of a new framework of
a new language? Good question.

418
00:22:31.140 --> 00:22:34.230
I think that the beat
marches on right. Or whatever,

419
00:22:34.230 --> 00:22:37.590
the things, things continue to
move forward. The issue is

420
00:22:37.590 --> 00:22:40.470
that the, when you go
to a Microsoft presentation, every

421
00:22:40.470 --> 00:22:42.510
three or four years, they
sit down with the Northwind

422
00:22:42.510 --> 00:22:45.930
database, they drag a data
grid over and they say,

423
00:22:45.930 --> 00:22:47.700
and look what I did
without writing a single line

424
00:22:47.700 --> 00:22:49.770
of code, right. They've been
doing this for 15 years.

425
00:22:50.100 --> 00:22:51.720
Right. We, every few years
we go and we see

426
00:22:51.720 --> 00:22:55.830
the big data grid presentation,
right? Except this year, it

427
00:22:55.830 --> 00:22:59.070
did. We, we drug the
data grid over and it

428
00:22:59.070 --> 00:23:03.270
did Ajax. Okay. With things
like blink B L I

429
00:23:03.270 --> 00:23:06.270
N Q at shrinker slash
H E G, which is

430
00:23:06.270 --> 00:23:09.720
the closest thing to rails
on asp.net that Microsoft has

431
00:23:09.720 --> 00:23:13.590
come out with, lets you
basically dynamically generate an entire

432
00:23:13.590 --> 00:23:18.240
asp.net website for displaying creating
data, doing all crud type

433
00:23:18.240 --> 00:23:21.750
data based on a database
schema without writing any code

434
00:23:21.750 --> 00:23:23.820
at all. So there's not
even any dragging around. I

435
00:23:23.820 --> 00:23:25.350
mean, they don't even go
into you. Don't going to

436
00:23:25.350 --> 00:23:27.630
visual studio. You just say
do it. And it happens.

437
00:23:27.990 --> 00:23:31.350
So I think when people
see that you, we could

438
00:23:31.350 --> 00:23:33.840
go and rewrite the handsome
and it's ad man with

439
00:23:33.840 --> 00:23:38.370
a tool like this blink
prototype by Polita Paulus. And

440
00:23:39.210 --> 00:23:42.120
once people see that there's,
if they don't move, then

441
00:23:42.120 --> 00:23:44.400
if they don't move forward,
then maybe that's not what

442
00:23:44.400 --> 00:23:47.150
they wanted. Right. I mean,
Microsoft's trying to make products

443
00:23:47.150 --> 00:23:50.510
to make life easier if
Microsoft doesn't do it, somebody

444
00:23:50.510 --> 00:23:52.810
else will. And people to
see that. Ooh, I dunno.

445
00:23:53.200 --> 00:23:55.450
I don't know if that's
a strong enough argument for

446
00:23:55.450 --> 00:23:59.050
me, but we'll see. I
mean basically basically what it

447
00:23:59.050 --> 00:24:02.260
means is that people are
being forced into test driven

448
00:24:02.260 --> 00:24:05.140
development and will they go?
So it'll be interesting to

449
00:24:05.140 --> 00:24:06.820
see. Well, let me ask
you this, then here's a

450
00:24:06.820 --> 00:24:10.840
better argument where people forced
into using source control when

451
00:24:10.840 --> 00:24:16.240
Microsoft started giving away visual
source safe, right before people,

452
00:24:16.270 --> 00:24:18.430
people in the windows world
weren't using source control. Everyone

453
00:24:18.430 --> 00:24:21.970
was using source control in
the Unix world, but Microsoft

454
00:24:21.970 --> 00:24:23.980
people would just zip up
their files and say, well,

455
00:24:23.980 --> 00:24:25.870
there you go. That's version
for today. I'll zip it

456
00:24:25.870 --> 00:24:28.270
up and put it over
on a share. You know,

457
00:24:28.300 --> 00:24:31.270
we're, we're people are gonna
use test driven development because

458
00:24:31.330 --> 00:24:36.040
a it's free and B
it, it works. So you,

459
00:24:36.130 --> 00:24:38.590
I think there will be
a competitive advantage to being

460
00:24:38.590 --> 00:24:40.930
test driven. Yeah. You know
what, let me give you

461
00:24:40.930 --> 00:24:43.780
an example. There's a shareware
developer who had some applications

462
00:24:43.780 --> 00:24:46.210
that I installed. Cause you
know, if it hasn't, if

463
00:24:46.210 --> 00:24:47.890
it exists, I've run it
and installed it on my

464
00:24:47.890 --> 00:24:50.170
machine at least once. And
I went to, I had

465
00:24:50.170 --> 00:24:52.240
some trouble with it. So
I emailed him and you

466
00:24:52.240 --> 00:24:54.640
already said, it's amazing. He
says, go to the help

467
00:24:54.640 --> 00:24:57.370
about I'm like, okay help
about, and he says, you

468
00:24:57.370 --> 00:25:00.070
see a button there that
says run tests. He actually

469
00:25:00.070 --> 00:25:03.640
ships his end unit tests.
And in the help about

470
00:25:03.640 --> 00:25:08.440
menu hid an end unit
runner. So he actually shipped

471
00:25:08.440 --> 00:25:10.990
him and I ran his
entire test suite on my

472
00:25:10.990 --> 00:25:13.750
machine, which let him see
if the environment that I

473
00:25:13.750 --> 00:25:16.270
was running on would pass
his test. And one of

474
00:25:16.270 --> 00:25:18.130
the tests didn't pass. Cause
he had made an assumption

475
00:25:18.130 --> 00:25:22.420
about a path, Nate, what
a brilliant way to do

476
00:25:23.140 --> 00:25:26.860
production time developing to production
time debugging rather. Yeah. There's

477
00:25:26.860 --> 00:25:28.840
no doubt about it. That
when you reach the end

478
00:25:28.900 --> 00:25:31.840
of a life cycle of
an application built with test

479
00:25:31.840 --> 00:25:34.780
driven development, you've got a
superior product. I guess the

480
00:25:34.780 --> 00:25:36.520
people on the other side
of the camp and I'm

481
00:25:36.520 --> 00:25:38.920
not taking a position either
way. I'm saying the people

482
00:25:38.920 --> 00:25:40.840
on the other side of
the camp say, well, you

483
00:25:40.840 --> 00:25:43.030
know, if you live in
a, in an ivory tower

484
00:25:43.030 --> 00:25:45.790
world where, you know, there,
there's an infinite amount of

485
00:25:45.790 --> 00:25:49.090
time and money to develop
great. But you know, for

486
00:25:49.090 --> 00:25:51.010
the, for the rest of
the real world, people out

487
00:25:51.010 --> 00:25:53.170
here, we're trying to build
apps as fast as we

488
00:25:53.170 --> 00:25:56.050
can as most stable as
we possibly can. All right.

489
00:25:56.050 --> 00:25:57.430
Well, let me give you
one more argument and then

490
00:25:57.430 --> 00:25:59.710
we'll do a couple of
links and we'll move on.

491
00:25:59.890 --> 00:26:04.270
Okay. So if you can
express the requirement, the business

492
00:26:04.270 --> 00:26:08.650
requirement in a, in a
simple test, right, they requirement

493
00:26:08.650 --> 00:26:11.800
is they must be able
to read a record, change

494
00:26:11.800 --> 00:26:14.350
it and save it. And
you know, these conditions will

495
00:26:14.350 --> 00:26:16.960
be met. You can say
that in English, you can,

496
00:26:17.140 --> 00:26:18.970
or any language for that
matter. You can say it

497
00:26:18.970 --> 00:26:22.480
in prose and write it
in a word document. But

498
00:26:22.480 --> 00:26:25.630
I've, as I've said before,
a word document, hasn't had

499
00:26:25.630 --> 00:26:30.220
any teeth, right? Word documents,
don't break, builds, exceptions, stop

500
00:26:30.220 --> 00:26:33.370
applications, but word documents don't
actually do anything. But if

501
00:26:33.370 --> 00:26:36.640
I can write a test
in a very simple, straightforward

502
00:26:36.640 --> 00:26:41.320
way that says, this is
my intent, right? We spent

503
00:26:41.320 --> 00:26:45.660
so much time writing code
to our intent, but we're

504
00:26:45.660 --> 00:26:47.970
expressing that intent to the
computer, right? But will the,

505
00:26:47.970 --> 00:26:51.510
computer's not the, the customer
here. The customer is whoever

506
00:26:51.510 --> 00:26:54.840
is hired me to write
this application. So my, my

507
00:26:54.840 --> 00:26:58.140
tests are the best description
in computer language of what

508
00:26:58.140 --> 00:27:00.870
that person's intent are. So
if you look at test

509
00:27:00.870 --> 00:27:04.080
driven development, as a way
of translating that person's intent

510
00:27:04.530 --> 00:27:07.320
into something, the computer understands.
And then also proving that

511
00:27:07.320 --> 00:27:09.900
the requirement is met. You
can look at all of

512
00:27:09.900 --> 00:27:12.720
those green bars that light
up in end unit telling

513
00:27:12.720 --> 00:27:16.770
you that your application works
well as Jew, as basically

514
00:27:16.770 --> 00:27:21.120
saying my requirement was met
for this application. And if

515
00:27:21.120 --> 00:27:22.560
you look at it that
way, you'll spend less time

516
00:27:22.560 --> 00:27:26.550
writing specs because specs aren't
useful, right? Specs can't test

517
00:27:26.550 --> 00:27:30.090
my application, but test scan.
So that might be a

518
00:27:30.090 --> 00:27:32.430
better argument. Okay. One of
the, one of the things

519
00:27:32.430 --> 00:27:34.290
I wanted to mention was
that we were talking about

520
00:27:34.290 --> 00:27:36.900
Ray, what it was like
to have rails and or

521
00:27:37.110 --> 00:27:40.740
active record on, on windows,
right? There's something worth checking

522
00:27:40.740 --> 00:27:42.960
out called the castle project.
You can take a look

523
00:27:42.960 --> 00:27:48.000
at shrink, stir.com/h E N
and a Castle's a set

524
00:27:48.000 --> 00:27:50.520
of tools that you can
work, work with them together.

525
00:27:50.520 --> 00:27:54.450
Or you can use them
independently that lets you integrate

526
00:27:54.450 --> 00:27:58.590
better your applications. And the
really interesting ones are monorail.

527
00:27:58.920 --> 00:28:01.860
Monorail is basically a, they
used to call it castle

528
00:28:01.860 --> 00:28:06.660
on rails, but it's basically
rails for asp.net. It's a

529
00:28:06.660 --> 00:28:10.470
different style. It's more of
a model view controller where

530
00:28:10.470 --> 00:28:13.140
they call MVC or action
pack way of doing things.

531
00:28:13.680 --> 00:28:18.360
There's an interesting explanation about
how it works, why you

532
00:28:18.360 --> 00:28:19.980
might want to do it.
Why would it be useful

533
00:28:19.980 --> 00:28:21.810
if you like rails might
check that out. But the

534
00:28:21.810 --> 00:28:23.910
most interesting thing I think
is a layer that sits

535
00:28:23.910 --> 00:28:27.540
on top of an hibernate,
right? And hibernate is the,

536
00:28:28.470 --> 00:28:32.070
the object relational mapper that
lets you take objects and

537
00:28:32.070 --> 00:28:36.360
map them with XML relationship
files into the database. This

538
00:28:36.360 --> 00:28:39.360
is a version of active
record and the active record

539
00:28:39.360 --> 00:28:43.350
pattern for.net. It's built on
top of an hibernate, but

540
00:28:43.350 --> 00:28:46.590
it, it frees you of
all of that XML TD

541
00:28:46.620 --> 00:28:49.710
tediousness. Alright, so a couple
more, we got time for

542
00:28:49.710 --> 00:28:52.140
a couple more links. Sure.
Yeah. If you want to

543
00:28:52.140 --> 00:28:55.110
check out blink, which is
B L I N Q

544
00:28:55.170 --> 00:28:58.770
blink a there's a really
good tutorial at ARS Technica

545
00:28:58.830 --> 00:29:02.750
at shrinker slash H E
J and then FTP online

546
00:29:02.760 --> 00:29:06.060
is a great tutorial from
last last month before last

547
00:29:06.450 --> 00:29:09.090
on how to use blink
it's shrinks there slash H

548
00:29:09.120 --> 00:29:11.760
E K. And again, you
can download blink at shrinks

549
00:29:11.760 --> 00:29:15.390
or slash H E G
and then D do check

550
00:29:15.390 --> 00:29:17.850
out the castle project. It's
a really interesting way to

551
00:29:17.850 --> 00:29:21.960
think about things it's different
from asp.net. It's not, not

552
00:29:21.960 --> 00:29:23.910
how you're used to doing
web applications. And that might

553
00:29:23.910 --> 00:29:26.850
be a good thing. It
shrinked or slash H E

554
00:29:26.910 --> 00:29:30.330
N hen. Excellent. Well, Scott,
it sounds like you got

555
00:29:30.330 --> 00:29:32.430
to go there. I ends
up crying in the background,

556
00:29:32.430 --> 00:29:34.290
so we'll let you go
think I've got a poopy

557
00:29:34.290 --> 00:29:36.480
baby on my hands. I
got a jet and we'll

558
00:29:36.480 --> 00:29:45.930
see you next week on
<inaudible>.

