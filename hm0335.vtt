WEBVTT FILE

1
00:00:04.380 --> 00:00:17.180
<inaudible> From hanselminutes.com. It's Hansel
minutes, but weekly discussion with

2
00:00:17.180 --> 00:00:22.070
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:22.070 --> 00:00:28.790
show number three 35 recorded
live Thursday, August 30th, 2012. This episode

4
00:00:28.790 --> 00:00:31.490
is brought to you by
Tellerik offering the best in

5
00:00:31.490 --> 00:00:38.930
developer tools and support online@telerik.com
and by Franklin Stott net

6
00:00:39.170 --> 00:00:42.770
training developers to work smarter
and now offering gesture pack

7
00:00:42.860 --> 00:00:46.400
a powerful gesture, recording and
recognition system for Microsoft connect

8
00:00:46.460 --> 00:00:53.540
for windows developers details@gesturepak.com. In
this episode, Scott Hunter talks with

9
00:00:53.570 --> 00:00:57.020
Rowan Miller from the entity
framework team about the recent

10
00:00:57.050 --> 00:01:02.810
EFV five release. Hi, this
is Scott Hunter. This is another

11
00:01:02.810 --> 00:01:05.840
episode. So minutes, a Hanselman
is still lost out in

12
00:01:05.840 --> 00:01:09.290
the world on vacation somewhere.
And so I'm still filling

13
00:01:09.290 --> 00:01:12.050
in for him today and
today I have with me

14
00:01:12.050 --> 00:01:14.870
Rowan Miller from the interview
framework team. Hi, so as

15
00:01:14.870 --> 00:01:17.540
Scott said, my name is
Rowan Miller. I'm a program

16
00:01:17.540 --> 00:01:20.870
manager on the entity framework
team here at Microsoft being

17
00:01:20.870 --> 00:01:23.690
on entity framework team for
about four years now, moved

18
00:01:23.690 --> 00:01:25.310
from Australia to the U
S to work on the

19
00:01:25.310 --> 00:01:28.280
team, started off as a
tester on the team. And

20
00:01:28.280 --> 00:01:30.380
I've been a program manager
for about two and a

21
00:01:30.380 --> 00:01:35.540
half years now. So Rowan,
we just shipped a.net 4.5

22
00:01:35.570 --> 00:01:39.080
visual studio of 2012. Can
you kinda tell us what

23
00:01:39.530 --> 00:01:43.460
if I'm a developer running
database applications what's new in

24
00:01:43.460 --> 00:01:46.760
any framework this time around?
So this release is entity

25
00:01:46.760 --> 00:01:50.000
framework bond, which introduces quite
a few cool new features.

26
00:01:50.000 --> 00:01:53.600
If you're a developer first
up, we have support for

27
00:01:53.610 --> 00:01:56.450
ANUMs. Now you could use
it in your model before,

28
00:01:56.480 --> 00:01:58.760
but it was quite hacky.
So we now have native

29
00:01:58.760 --> 00:02:02.060
support that, you know, within
the entity framework, we also

30
00:02:02.060 --> 00:02:05.540
introduced the spatial data types.
Now these are into to

31
00:02:05.540 --> 00:02:09.470
like the geography and geometry
data types inside SQL server,

32
00:02:10.190 --> 00:02:12.110
but they're also part of
our providing model so they

33
00:02:12.110 --> 00:02:15.830
can work on all the
database providers as well. In

34
00:02:15.830 --> 00:02:19.100
addition to that, we have
some awesome performance improvements coming.

35
00:02:19.550 --> 00:02:22.730
We saw up to a
67% performance improvement in an

36
00:02:22.730 --> 00:02:25.190
end to end application that
we run here at Microsoft.

37
00:02:25.700 --> 00:02:27.500
Obviously the stats that you
get are going to be

38
00:02:27.500 --> 00:02:30.500
different depending on your application.
So that's some pretty serious

39
00:02:30.500 --> 00:02:35.000
performance improvements. The EDF designer
also has some cool new

40
00:02:35.000 --> 00:02:37.910
features in it. You can
map to table value functions

41
00:02:37.910 --> 00:02:41.180
and you have a database
also known as TVs. We

42
00:02:41.180 --> 00:02:44.330
have support from multiple diagrams,
had a whole new UI

43
00:02:44.390 --> 00:02:47.150
to match the look and
feel of visual studio. And

44
00:02:47.150 --> 00:02:50.720
we also introduced some performance
improvements to help not to

45
00:02:50.720 --> 00:02:54.890
store procedures from the designer.
So I've been using it

46
00:02:54.890 --> 00:02:56.810
for a couple of years
now and I, I used

47
00:02:56.810 --> 00:02:59.140
to pack all the way
back in at 3.5 when

48
00:02:59.140 --> 00:03:02.260
it was actually pretty hard
to use. Has it gotten

49
00:03:02.260 --> 00:03:04.030
easier to use over the
last couple of years? I

50
00:03:04.030 --> 00:03:06.700
mean, it was. I remember
back when I last first

51
00:03:06.700 --> 00:03:09.070
started playing within the framework,
trying to get access to

52
00:03:09.070 --> 00:03:11.680
things like foreign keys and
stuff was pretty complicated. So

53
00:03:12.340 --> 00:03:15.520
for people out there that
not tried yet before or

54
00:03:15.520 --> 00:03:18.370
credit at one point a
little too complicated, can you

55
00:03:18.370 --> 00:03:21.100
tell us about, you know,
it's easy to use now?

56
00:03:21.610 --> 00:03:24.610
Yeah, absolutely. So it's quite
interesting seeing what's happened with

57
00:03:24.700 --> 00:03:26.830
you have the same RPDs
at the moment. We actually

58
00:03:26.830 --> 00:03:29.050
have a lot of people
who were developers outside of

59
00:03:29.050 --> 00:03:32.950
Microsoft and then joined Microsoft
from backgrounds where they were

60
00:03:32.950 --> 00:03:36.790
using our ins access data
in real world applications. And

61
00:03:36.790 --> 00:03:39.610
that seemed quite a significant
change in entity framework. We've

62
00:03:39.610 --> 00:03:43.000
focused very much on providing
API as a simple and

63
00:03:43.000 --> 00:03:46.810
intuitive to use way focused
on real world scenarios, looking

64
00:03:46.810 --> 00:03:49.360
at what our customers are
doing. So you'll see quite

65
00:03:49.360 --> 00:03:51.830
a remarkable difference, particularly in
the last few releases of

66
00:03:51.830 --> 00:03:56.350
VF, a lot of improvements
in usability of the positive

67
00:03:56.350 --> 00:03:59.710
framework. In addition to that,
I, I guess some of

68
00:03:59.710 --> 00:04:02.080
the pain points we've seen,
you mentioned foreign keys. So

69
00:04:02.170 --> 00:04:05.020
we now of course, he's
in the model, which allows

70
00:04:05.020 --> 00:04:07.930
you to manipulate them. We
saw a lot of folks

71
00:04:08.200 --> 00:04:10.870
like the designer. They like
working over an XML file

72
00:04:10.870 --> 00:04:13.450
using boxes and lines, but
a lot of folks want

73
00:04:13.450 --> 00:04:15.700
to just write code with
developers. We know how to

74
00:04:15.700 --> 00:04:18.280
write code, and we know
how to review, not code

75
00:04:18.280 --> 00:04:21.610
reviews. We know how to
resolve merge conflicts with code

76
00:04:21.610 --> 00:04:24.550
and our source control systems.
And so we introduced the

77
00:04:24.550 --> 00:04:27.250
alternative of code first, where
the model isn't stored in

78
00:04:27.250 --> 00:04:30.220
XML, but it calculated runtime
based on the code that

79
00:04:30.220 --> 00:04:34.180
you write. <inaudible>. So you're
saying that when I, when

80
00:04:34.180 --> 00:04:36.720
I write an application with
ETF, now I don't have

81
00:04:36.720 --> 00:04:40.380
to drag a database into
like a visual designer or

82
00:04:40.380 --> 00:04:42.240
draw a bunch of boxes
and stuff. And the designer,

83
00:04:42.240 --> 00:04:45.390
I can actually just write
my own classes and start

84
00:04:45.390 --> 00:04:47.730
using my classes, my classes,
and I become my database.

85
00:04:49.560 --> 00:04:52.350
Yeah. So with code first,
you basically have two options.

86
00:04:52.500 --> 00:04:54.780
If you know someone who
has an existing database, or

87
00:04:54.780 --> 00:04:57.690
you're a developer who wants
to start by hand cutting

88
00:04:57.690 --> 00:05:00.090
the database, that's fine. And
you can write code. And

89
00:05:00.090 --> 00:05:02.760
that's what this is kind
of akin to the database

90
00:05:02.790 --> 00:05:05.520
first workload that we had
in the designer where you

91
00:05:05.700 --> 00:05:07.800
have your database, and then
you reverse engineer a model

92
00:05:07.800 --> 00:05:10.230
often, and we have some
tools to help you reverse

93
00:05:10.230 --> 00:05:12.930
engineer, some code that will
map to that database. Or

94
00:05:12.930 --> 00:05:16.620
you can hand write it.
Alternatively, if you just want

95
00:05:16.620 --> 00:05:18.930
to write your model, then
we can actually generate the

96
00:05:18.930 --> 00:05:21.780
database for you. And this
is why code really comes

97
00:05:21.780 --> 00:05:25.500
powerful. Now that scares a
lot of folks that like,

98
00:05:25.980 --> 00:05:27.960
I'm just going to watch
some classes, some classes, and

99
00:05:27.960 --> 00:05:30.930
it's going to magically calculate
my database. Is that something

100
00:05:30.930 --> 00:05:33.420
my GVI is going to
lie? Am I going to

101
00:05:33.420 --> 00:05:35.700
have the control I need?
And I get the performance

102
00:05:35.700 --> 00:05:38.010
that I need. And the
answer is actually yes, with

103
00:05:38.010 --> 00:05:40.110
code first, you have a
lot of control over the

104
00:05:40.110 --> 00:05:43.740
shape of the database. And
especially with code first migrations,

105
00:05:44.130 --> 00:05:46.470
we give you even more
control and the ability even

106
00:05:46.470 --> 00:05:48.450
to drop down to the
raw sequel, to define the

107
00:05:48.450 --> 00:05:53.310
shape of the database when
you needed. So if I'm,

108
00:05:53.330 --> 00:05:55.920
if I'm in this host
first model and I'm running

109
00:05:55.920 --> 00:05:59.420
my own, my own classes,
how does let's say I've

110
00:05:59.420 --> 00:06:02.180
got a product table and
I want to have categories

111
00:06:02.180 --> 00:06:06.200
and suppliers, which are four
and tables that actually relate

112
00:06:06.200 --> 00:06:08.960
to my, my product labs.
How do I model that?

113
00:06:08.960 --> 00:06:12.770
How, how does, how does
code first, no relationships like

114
00:06:12.770 --> 00:06:15.020
that? How does it know
how to like generate my

115
00:06:15.020 --> 00:06:17.570
primary key? How do you
do those kinds of things?

116
00:06:19.460 --> 00:06:22.040
So COVID first, we're trying
to follow this pattern called

117
00:06:22.040 --> 00:06:25.490
convention configuration. So we have
a whole bunch of conventions

118
00:06:25.490 --> 00:06:27.320
that will try and interpret
the shape of your model

119
00:06:27.320 --> 00:06:30.590
based on the classes. So
one example is you mentioned

120
00:06:30.590 --> 00:06:33.380
primary keys. So if I
have a product class, if

121
00:06:33.380 --> 00:06:36.140
I have a property in
there called product ID, it

122
00:06:36.140 --> 00:06:39.500
will automatically detect that that's
the primary key. If it's

123
00:06:39.500 --> 00:06:42.320
a talking to Joe, then
we'll automatically configure it to

124
00:06:42.320 --> 00:06:44.690
be an identity. Don't want
me to database to any

125
00:06:44.690 --> 00:06:48.530
of the database. Valleys will
be generated on insert. When

126
00:06:48.530 --> 00:06:51.140
we get to relationships, say
a product belongs to a

127
00:06:51.140 --> 00:06:54.710
category where you simply define
your category class and then

128
00:06:54.710 --> 00:06:58.550
add a property to your
product category class. And we'll

129
00:06:58.550 --> 00:07:00.710
calculate that there must be
a relationship and we'll create

130
00:07:00.710 --> 00:07:04.400
the foreign key constraint in
the database for you. Now,

131
00:07:04.400 --> 00:07:07.400
like I said, it's convention
over configuration. So of course,

132
00:07:07.490 --> 00:07:10.070
if the conventions don't work
for you, so you might

133
00:07:10.070 --> 00:07:12.410
have a person class and
it has a primary key

134
00:07:12.410 --> 00:07:15.620
code, social security number. We're
not going to pick that

135
00:07:15.620 --> 00:07:18.620
up by convention, but you
have some options for configuring

136
00:07:18.620 --> 00:07:21.050
that, the easiest one, just
being put a date or

137
00:07:21.060 --> 00:07:26.060
annotation on there. That's the
key data annotation. Interesting. So,

138
00:07:27.620 --> 00:07:29.360
you know another question, you
know, I, I know that

139
00:07:29.390 --> 00:07:31.970
when I write programs and
stuff, I, I start off

140
00:07:32.000 --> 00:07:35.570
with some classes and my
application a little bit, but

141
00:07:35.570 --> 00:07:38.420
I always don't know what
all the fields are going

142
00:07:38.420 --> 00:07:40.400
to be in my class,
know my application, you know,

143
00:07:40.400 --> 00:07:42.380
kind of first coming to
shape. So, you know, for

144
00:07:42.380 --> 00:07:45.230
example, I might start with
some object that has like

145
00:07:45.230 --> 00:07:47.660
four or five fields in
it. And then I decided

146
00:07:47.660 --> 00:07:49.910
to add two more fields
of this. This sounds kind

147
00:07:49.910 --> 00:07:52.520
of scary to me because
I ha how are you

148
00:07:52.520 --> 00:07:54.740
going to keep the database?
And my class in sync,

149
00:07:54.740 --> 00:07:56.480
my fear would be, if
I went down this model,

150
00:07:56.480 --> 00:07:58.640
I'm going to add a
couple fields in my database.

151
00:07:58.640 --> 00:08:00.590
Do I have to like
delete my database every single

152
00:08:00.590 --> 00:08:04.310
time I run my application?
If I, you know, how

153
00:08:04.310 --> 00:08:05.990
do I, how do I
solve those problems? It's a

154
00:08:05.990 --> 00:08:08.870
great question to start with,
with code first. We didn't

155
00:08:08.870 --> 00:08:12.770
have a great answer to
in year 4.1, the answer

156
00:08:12.800 --> 00:08:15.770
was you either had to
manually update the database. At

157
00:08:15.770 --> 00:08:18.200
which point you lose a
lot of the benefits first,

158
00:08:18.740 --> 00:08:20.960
or you had to use
this thing called a database

159
00:08:20.960 --> 00:08:24.050
initializer, which would drop and
recreate the database. Every time

160
00:08:24.050 --> 00:08:27.020
you changed the model. Now,
obviously that's not ideal but

161
00:08:27.050 --> 00:08:29.390
feasible when you have a
development environment, but when it

162
00:08:29.390 --> 00:08:32.240
comes time to deploy your
application as a horrible option.

163
00:08:33.710 --> 00:08:36.850
So in 4.3, we introduced
this thing called code first

164
00:08:36.880 --> 00:08:40.730
migrations. Now, migrations isn't anything
new, it's not earth shattering.

165
00:08:40.730 --> 00:08:44.360
And something else came up
and migrations gives away of

166
00:08:44.420 --> 00:08:47.870
writing some code that expresses
how to upgrade and downgrade

167
00:08:47.870 --> 00:08:50.570
your database. So you have
a set of ordered, well,

168
00:08:50.570 --> 00:08:54.650
nine steps that expressing code,
how to add properties to

169
00:08:54.650 --> 00:08:56.850
the model or in turn,
how to add columns into

170
00:08:56.850 --> 00:08:59.520
the tables in the database,
and then to downgrade as

171
00:08:59.520 --> 00:09:00.930
well. And I just had
to drop those on the

172
00:09:00.930 --> 00:09:04.200
way back down. One thing,
that's a bit different with

173
00:09:04.200 --> 00:09:07.490
my Gretchen's or COVID first,
we can actually scaffold out

174
00:09:07.510 --> 00:09:10.800
contents of the migration because
we know what the model

175
00:09:10.800 --> 00:09:13.020
looks like. We know what
it looked like. Last time

176
00:09:13.020 --> 00:09:15.930
you updated the database, we
can detect anything that you've

177
00:09:15.930 --> 00:09:18.990
added or removed or changed
in the model. And then

178
00:09:18.990 --> 00:09:21.540
we can scaffold some code
for you that you can

179
00:09:21.540 --> 00:09:23.790
then look at and run,
or you can edit if

180
00:09:23.790 --> 00:09:27.000
you want to. Interesting. So
you're basically saying I can

181
00:09:27.480 --> 00:09:30.570
start with my class. I
run my application and my

182
00:09:30.570 --> 00:09:34.110
database gets automatically generated by
energy framework with my class.

183
00:09:34.680 --> 00:09:36.060
And then I have a
mechanism where I can go

184
00:09:36.060 --> 00:09:39.090
back and add a few
more fields and run a

185
00:09:39.090 --> 00:09:43.230
step. And you're going to
take a field that I

186
00:09:43.230 --> 00:09:46.950
added and automatically generate a
C-sharp class or any class

187
00:09:46.950 --> 00:09:50.490
that contains the code. They
would take my database up

188
00:09:50.490 --> 00:09:54.720
to that stuff. That, that
sounds great. Let's me keep

189
00:09:54.720 --> 00:09:58.050
in sync with my local
database. But what about the

190
00:09:58.050 --> 00:10:02.010
scenario where I have version
one of my products, I

191
00:10:02.010 --> 00:10:04.710
handle my customers. They buy
it, they're running in their

192
00:10:04.710 --> 00:10:07.860
data centers. And then I
start working on version two

193
00:10:07.860 --> 00:10:11.550
and I had a bunch
of more fields and we

194
00:10:11.550 --> 00:10:14.550
can version two. How do
they IVIG their remote servers?

195
00:10:14.550 --> 00:10:16.620
I mean, I understand the
development story where I can

196
00:10:16.620 --> 00:10:19.290
keep my local database in
sync, but we have a

197
00:10:19.290 --> 00:10:22.680
mechanism to, how do you
use remote servers? How do

198
00:10:22.680 --> 00:10:27.300
you do this with on
team development, for example? So

199
00:10:27.330 --> 00:10:29.880
the great thing about having
a well known ordered set

200
00:10:29.880 --> 00:10:32.310
of migrations is we actually
record in the database when

201
00:10:32.310 --> 00:10:35.070
these were applied. So this
is similar to other migration

202
00:10:35.070 --> 00:10:37.710
frameworks out there. We have
a table that records, which

203
00:10:37.710 --> 00:10:40.680
migrations have been applied to
the database. So in a

204
00:10:40.680 --> 00:10:44.190
team environment, I might find
that one of my fellow

205
00:10:44.220 --> 00:10:47.340
coworkers has gone and added
three or four new migrations.

206
00:10:47.490 --> 00:10:50.850
Now I have cite 20
previous ones already applies my

207
00:10:50.850 --> 00:10:54.180
database. When I pull down
his changes from source control,

208
00:10:54.570 --> 00:10:57.510
I run migrations and migration
sees that I already have

209
00:10:57.810 --> 00:10:59.910
a whole bunch of migrations
applied, but I'm missing the

210
00:10:59.910 --> 00:11:03.150
six latest ones. So we'll
take the light six latest

211
00:11:03.150 --> 00:11:06.600
ones and apply them to
my database. Now the same

212
00:11:06.600 --> 00:11:09.330
mechanism can be used when
you get to deployment and

213
00:11:09.330 --> 00:11:13.320
it's what we'd recommend. But
in some situations, having that

214
00:11:13.320 --> 00:11:15.600
extra title in the database,
isn't going to be okay,

215
00:11:15.720 --> 00:11:19.770
or having an application wasn't
coping the local machine, update

216
00:11:19.770 --> 00:11:22.380
the database. Isn't going to
be okay either. This is

217
00:11:22.380 --> 00:11:24.360
obviously true when you have
a DVI in the mix.

218
00:11:24.930 --> 00:11:27.120
So one of the things
that we have in migrations

219
00:11:27.120 --> 00:11:29.910
is the ability to create
preferable SQL script, which can

220
00:11:29.910 --> 00:11:32.700
be used to apply the
migrations. So you just tell

221
00:11:32.700 --> 00:11:34.800
us what migrations you want
to script for. So you

222
00:11:34.800 --> 00:11:38.040
might say, go from version
two to four and we'll

223
00:11:38.040 --> 00:11:40.830
generate a script to do
that migration for you. The

224
00:11:40.830 --> 00:11:42.930
script can then be handed
off to a DVA to

225
00:11:42.930 --> 00:11:46.110
be running test environments, to
be verified, and then eventually

226
00:11:46.110 --> 00:11:50.010
running production. Interesting. So that's
that this, this kind of

227
00:11:50.010 --> 00:11:53.680
reminds me of active, active
record on a Ruby. So

228
00:11:54.340 --> 00:11:56.680
how does this compare or
contrast to that? Did you

229
00:11:56.680 --> 00:11:59.920
guys take inspiration from that?
Or did we copy that?

230
00:12:01.510 --> 00:12:05.250
I'm just curious. Yeah. So
I, like I said, migrations,

231
00:12:05.250 --> 00:12:08.370
isn't anything you are Ruby
on rails is one example

232
00:12:08.370 --> 00:12:10.380
of a, of a product
that's done in code by

233
00:12:10.380 --> 00:12:13.950
some migrations that is like
fluid Migrator and a whole

234
00:12:13.950 --> 00:12:15.810
bunch of other ones out
there that take a pretty

235
00:12:15.810 --> 00:12:18.660
similar approach. So when we
go out to this problem,

236
00:12:19.410 --> 00:12:20.850
we looked it up, we
looked at a whole bunch

237
00:12:20.850 --> 00:12:23.880
of options and decided that
the way the community's already

238
00:12:23.880 --> 00:12:25.680
approaching the problem is the
right way to do it

239
00:12:25.680 --> 00:12:28.050
at the moment that having
code to go up and

240
00:12:28.050 --> 00:12:32.160
down is sensible. It's easy
or what's willing team environments.

241
00:12:32.640 --> 00:12:34.890
And it's easy for these
deployments scenarios that we talked

242
00:12:34.890 --> 00:12:38.400
about. So to that extent,
we didn't want to reinvent

243
00:12:38.400 --> 00:12:41.370
the wheel, but we did
add some value in that

244
00:12:41.460 --> 00:12:44.070
when you're using entity framework,
you have this model that

245
00:12:44.070 --> 00:12:45.960
you're aware of. So it
doesn't make sense to make

246
00:12:45.960 --> 00:12:48.110
some changes in your model
and then have to go

247
00:12:48.120 --> 00:12:51.300
and hand code. Those changes
in migration as well, which

248
00:12:51.300 --> 00:12:55.470
is where this had migration
scaffold my changes for me.

249
00:12:55.890 --> 00:12:58.980
And then let me review
and or edit those before

250
00:12:58.980 --> 00:13:01.440
I actually run them. Interesting.
That brings up another point

251
00:13:01.440 --> 00:13:03.090
that I think is interesting
in the, in the whole

252
00:13:03.090 --> 00:13:07.680
migration standpoint. I remember you
guys released to preview almost

253
00:13:07.680 --> 00:13:10.500
like a year ago of
migrations. It was very different

254
00:13:10.500 --> 00:13:13.680
than migrations today. I think
it was actually, I think

255
00:13:13.680 --> 00:13:15.390
my reaction to was it
was like automatic. It was

256
00:13:15.390 --> 00:13:17.610
too automatic. It was like
every time I ran my

257
00:13:17.610 --> 00:13:22.950
application, the database is automatically
synchronized with my database. And

258
00:13:24.090 --> 00:13:26.730
can you tell us how
you started down that path

259
00:13:26.760 --> 00:13:29.070
and how you ended up
with the more code based

260
00:13:29.070 --> 00:13:31.890
model? What, what drove that?
Was it customers? Was it

261
00:13:33.000 --> 00:13:38.160
what feedback? So that first
prototype that we released kind

262
00:13:38.160 --> 00:13:41.010
of came from this. We
were playing around inside Microsoft

263
00:13:41.010 --> 00:13:44.040
trying to work out, you
know, should we do something

264
00:13:44.040 --> 00:13:46.260
similar to, what's been done
many times before in the

265
00:13:46.260 --> 00:13:49.350
community. Should we look at
some of the things we

266
00:13:49.350 --> 00:13:52.650
already have inside Microsoft that
can do this database migration?

267
00:13:52.710 --> 00:13:55.980
Can we reuse some of
that? And so start with,

268
00:13:55.980 --> 00:13:58.470
we started going down that
path and like, we have

269
00:13:58.470 --> 00:14:01.680
some components here that can
do database migration already. So

270
00:14:01.680 --> 00:14:05.250
we looked at using those.
It became very clear from

271
00:14:05.250 --> 00:14:08.640
the feedback in that first
preview that customers didn't like

272
00:14:08.760 --> 00:14:11.550
it after we were going
down. And one thing we've

273
00:14:11.550 --> 00:14:14.040
been very careful to do
an entity framework, or we

274
00:14:14.040 --> 00:14:17.520
use this slide in release
early release often. And that

275
00:14:17.520 --> 00:14:20.280
allows us to basically in
this instance, we threw away

276
00:14:20.280 --> 00:14:23.010
all the work we did
started again from scratch. We

277
00:14:23.010 --> 00:14:26.460
building what our customers were
asking for. Plus obviously we

278
00:14:26.460 --> 00:14:29.100
don't want to just do,
what's already been done before.

279
00:14:29.280 --> 00:14:31.500
We want it to take
the power of editing framework,

280
00:14:32.250 --> 00:14:34.800
the learnings that our team
have, the extra things that

281
00:14:34.800 --> 00:14:36.990
are possible when you have
a model and apply those

282
00:14:36.990 --> 00:14:40.260
to other problems, space as
well. So this must be

283
00:14:40.260 --> 00:14:42.930
an ETF has, must be
working a lot differently than

284
00:14:42.930 --> 00:14:44.850
it did back in the
past. I remember back in

285
00:14:44.850 --> 00:14:48.570
the 3.5 framework days when
there was a lot of

286
00:14:48.570 --> 00:14:53.000
disgruntlement in the community that
we were not to what

287
00:14:53.000 --> 00:14:54.800
the customers want and what
the community wanted. So it

288
00:14:54.800 --> 00:14:57.710
sounds like you guys are
working completely different than you

289
00:14:57.710 --> 00:15:02.210
worked five years ago. Yeah,
absolutely. So starting with the

290
00:15:02.240 --> 00:15:06.290
EFA 4.1 release, we started
doing previews very early. We

291
00:15:06.290 --> 00:15:09.830
were releasing in the light
stages of releasing migrations. We

292
00:15:09.830 --> 00:15:12.470
were actually releasing a preview
every four weeks and these

293
00:15:12.470 --> 00:15:15.350
are very lightweight. These, we
were literally just taking a

294
00:15:15.350 --> 00:15:17.810
build of what was checked
into our source system and

295
00:15:17.810 --> 00:15:20.450
publishing. And when you get
so a few things have

296
00:15:20.450 --> 00:15:23.780
made that possible. One is
having a nice, easy deployment

297
00:15:23.810 --> 00:15:27.650
mechanism where we can quickly
and easily ship, not just

298
00:15:27.650 --> 00:15:30.980
previews, but actual releases in
between releases of the domain

299
00:15:30.980 --> 00:15:34.460
framework and visual studio. Interestingly
too, in those early stages

300
00:15:34.460 --> 00:15:36.830
of VF, obviously at the
start of a project, there's

301
00:15:36.830 --> 00:15:38.870
a lot of leg work
done to get the core

302
00:15:38.870 --> 00:15:42.140
framework up and running. So
our team is executing very

303
00:15:42.140 --> 00:15:45.440
agilely. Now we are listening
to our customers. We're able

304
00:15:45.440 --> 00:15:49.370
to deliver new features very
quickly, but that all builds

305
00:15:49.370 --> 00:15:51.680
on the foundation that was
laid on the stop. So

306
00:15:51.740 --> 00:15:53.840
while we definitely could have
done a much better job

307
00:15:53.840 --> 00:15:56.680
of listening to costumers of
the stock, that time spent

308
00:15:56.690 --> 00:15:59.180
building a solid framework that
can handle a whole bunch

309
00:15:59.180 --> 00:16:02.150
of queries. And it's really
complex mapping is paying off

310
00:16:02.150 --> 00:16:04.640
today because it allows us
to live up pages quickly

311
00:16:04.640 --> 00:16:07.880
and easily. I think it's
great to hear that, you

312
00:16:07.880 --> 00:16:09.920
know, more and more teams
at Microsoft are being more

313
00:16:09.920 --> 00:16:13.190
transparent and more open and
moving to that model. I

314
00:16:13.190 --> 00:16:15.080
know the eighth tenant team,
which I work on is,

315
00:16:15.590 --> 00:16:17.600
you know, spends a lot
of time doing the same

316
00:16:17.600 --> 00:16:20.330
thing. When I think of
you have, I think it's

317
00:16:20.330 --> 00:16:22.460
something else too, which is,
which is interesting. If I'm

318
00:16:22.460 --> 00:16:24.620
a new customer, this is,
this is kind of a

319
00:16:24.620 --> 00:16:28.340
common Microsoft problem, and I'm
probably guilty of hurting some

320
00:16:28.340 --> 00:16:31.610
of this myself, but I
don't really curious what your

321
00:16:31.610 --> 00:16:34.400
guys' thoughts are on this.
I'm a brand new customer.

322
00:16:34.460 --> 00:16:37.790
I installed visual studio 2012
and I built a new

323
00:16:37.790 --> 00:16:41.180
project, man. There's a lot
of ways to create a

324
00:16:41.180 --> 00:16:43.730
database. One of the ways
I can right click on

325
00:16:43.730 --> 00:16:46.310
my project and, and I
can add in any of

326
00:16:46.310 --> 00:16:50.360
your framework model, and it
lets me design from a

327
00:16:50.360 --> 00:16:55.490
designer or, I mean like
dragging existing database in, or

328
00:16:55.490 --> 00:16:59.590
I've got this code first
model, is there, is, is

329
00:16:59.590 --> 00:17:02.810
there any guidance from Microsoft
on what should I be

330
00:17:02.810 --> 00:17:05.930
doing if I'm a new
customer, which of these models

331
00:17:05.930 --> 00:17:09.380
should I be using to
develop? And what choices should

332
00:17:09.380 --> 00:17:11.600
I make? What, what, why
would I choose one over

333
00:17:11.600 --> 00:17:14.090
the other? What's what's the
pros and cons who's is

334
00:17:14.090 --> 00:17:16.550
there, is the designer going
to go away? For example?

335
00:17:16.550 --> 00:17:18.980
I mean, it sounds like
all I'm hearing is, you

336
00:17:18.980 --> 00:17:20.720
know, we're doing all this
great code first work, we've

337
00:17:20.720 --> 00:17:24.710
got this great migration work
and I'll ask even harder

338
00:17:24.710 --> 00:17:27.200
question if I'm in the
designer and I add something,

339
00:17:27.320 --> 00:17:29.000
is there a way to
have it do a migration?

340
00:17:29.030 --> 00:17:31.460
So just curious to hear
what you, what your thoughts

341
00:17:31.460 --> 00:17:35.990
are around these areas. Yeah,
absolutely. So in the past,

342
00:17:35.990 --> 00:17:37.940
we, haven't done a very
good job of communicating this

343
00:17:37.940 --> 00:17:40.100
and it's something we've tried
to really, I guess, be

344
00:17:40.100 --> 00:17:43.620
very clear about in the
EFY release and the style

345
00:17:43.620 --> 00:17:46.550
with no, the design is
not going anywhere. So funding

346
00:17:46.550 --> 00:17:48.440
is not going anywhere as,
and we're not working on

347
00:17:48.440 --> 00:17:50.880
it anymore. Not, not going
anywhere. And we're not going

348
00:17:50.880 --> 00:17:53.070
to remove it, not going
anywhere as in, we're not

349
00:17:53.070 --> 00:17:54.960
going to remove it. It's,
it's here to stay. It's

350
00:17:54.960 --> 00:17:57.870
a very valid workflow. So
are we going to, are

351
00:17:57.870 --> 00:17:59.760
we going to add new
features to it? Yeah. So

352
00:17:59.760 --> 00:18:01.530
I was just going to
say at five, we actually

353
00:18:01.530 --> 00:18:03.600
added a bunch of new
features to it. In fact,

354
00:18:03.600 --> 00:18:05.130
if you look at the
facial list that you have

355
00:18:05.130 --> 00:18:08.190
five, we added email and
some spatial. Now they work

356
00:18:08.190 --> 00:18:11.220
in both the designer and
code first, apart from that,

357
00:18:11.220 --> 00:18:13.320
most of the new features
were actually for the designer.

358
00:18:13.350 --> 00:18:17.700
So multiple diagrams, table value
functions are only available through

359
00:18:17.700 --> 00:18:22.170
the designer. They haven't been
added to code yet. Okay.

360
00:18:22.170 --> 00:18:24.840
So I'm, I'm still confused
on, on when I should

361
00:18:24.840 --> 00:18:29.090
use a designer when I
should use codes. Is there

362
00:18:29.090 --> 00:18:33.710
any guidance from Microsoft on
What, what choices should I

363
00:18:33.710 --> 00:18:35.480
make and when should I
make those choices? Cause that's,

364
00:18:35.480 --> 00:18:38.060
that's, that's the hardest part
about Microsoft products is we

365
00:18:38.060 --> 00:18:40.430
release new stuff every couple
of years and all the

366
00:18:40.430 --> 00:18:43.010
old stuff is still there
and there's always five ways

367
00:18:43.010 --> 00:18:45.320
to do something. And I
think, I know, I always

368
00:18:45.320 --> 00:18:47.810
hear from our community that
God, there's five ways to

369
00:18:47.810 --> 00:18:49.610
do this, and nobody wants
to tell me which one

370
00:18:49.610 --> 00:18:52.670
is the right way to
do it. So I've got

371
00:18:52.670 --> 00:18:55.700
you the subject matter expert.
What should I do? All

372
00:18:55.700 --> 00:18:57.590
right. So two questions are
going to help you work

373
00:18:57.590 --> 00:19:01.550
out the right one. So
first question something totally outside

374
00:19:01.550 --> 00:19:05.330
of your control existing database
that a DVA has created,

375
00:19:05.330 --> 00:19:07.730
or I created in the
past, or do I have

376
00:19:07.730 --> 00:19:11.270
it you database by you?
My Greenfield empty database. I

377
00:19:11.270 --> 00:19:13.010
want to add titles to,
or do I not even

378
00:19:13.010 --> 00:19:15.230
have a database yet? Am
I happy for something to

379
00:19:15.230 --> 00:19:19.520
create the database for me?
The next question, totally up

380
00:19:19.520 --> 00:19:22.730
to you, totally inside your
control. And it's really simply

381
00:19:22.730 --> 00:19:24.860
boils down to, do you
want to use boxes in

382
00:19:24.860 --> 00:19:27.380
London or designer or do
you want to just write

383
00:19:27.380 --> 00:19:32.120
code? And then that basically
leaves us with full boxes

384
00:19:32.120 --> 00:19:33.800
that fill in and we
pulled those things and agree

385
00:19:34.790 --> 00:19:36.890
if I want to use
the designer and target an

386
00:19:36.890 --> 00:19:40.850
existing device, that's called database
first. If I want to

387
00:19:40.850 --> 00:19:43.310
use a designer and target
and use a device, that's

388
00:19:43.310 --> 00:19:46.760
called model first, the second
column is a bit confusing

389
00:19:46.760 --> 00:19:49.670
and this is code first
code first, although it sounds

390
00:19:49.670 --> 00:19:52.130
like it's all about new
databases. It can actually either

391
00:19:52.160 --> 00:19:54.920
target any existing debt advice
or create a new database

392
00:19:54.920 --> 00:19:57.560
for you. So we kind
of talked about you that

393
00:19:57.560 --> 00:20:00.740
advice already, and that side
of mind, some classes I

394
00:20:00.920 --> 00:20:04.280
possibly add some configuration and
then it generates a database

395
00:20:04.280 --> 00:20:07.640
for me. The other option
is to not to an

396
00:20:07.640 --> 00:20:11.750
existing device, either by handwriting
the code or by downloading

397
00:20:11.750 --> 00:20:15.020
the engineer framework, pallet souls
and using those to reverse

398
00:20:15.020 --> 00:20:18.890
engineer a code first model
for me. Now that brings

399
00:20:18.890 --> 00:20:21.290
out one set of questions.
That's four different options and

400
00:20:21.290 --> 00:20:24.380
there's no like single entry
point for those. So one

401
00:20:24.380 --> 00:20:26.480
thing we're looking at for
the next release of entity

402
00:20:26.520 --> 00:20:29.990
framework is when I right
click add new entity data

403
00:20:29.990 --> 00:20:33.140
model inside my application, which
has traditionally been an entry

404
00:20:33.140 --> 00:20:35.270
point for any of the
print work is turning to

405
00:20:35.270 --> 00:20:38.630
include pole advice or options
in that single dialogue so

406
00:20:38.630 --> 00:20:40.850
that we're giving out uses
one single place. You go

407
00:20:41.450 --> 00:20:45.620
to help make the right
decision for their application. Now

408
00:20:45.650 --> 00:20:48.100
we actually have that or
a, of this page up

409
00:20:48.100 --> 00:20:50.860
on our site. So if
you go to Angela prime,

410
00:20:50.860 --> 00:20:55.510
work.covid.com and you look under
the documentation tab, you'll find

411
00:20:55.510 --> 00:20:58.210
a LinkedIn or a bunch
of pages specifications. And in

412
00:20:58.210 --> 00:21:01.240
there, you'll see the pooling
consolidations spec, which is where

413
00:21:01.240 --> 00:21:03.700
we start talking about what
that dialogue is going to

414
00:21:03.700 --> 00:21:06.280
look like and how it
helps customers make the right

415
00:21:06.280 --> 00:21:11.070
decision. So any of the
frameworks@covid.com, that's, that's kind of

416
00:21:11.070 --> 00:21:15.390
interesting isn't code flex where
like source code releases and

417
00:21:15.390 --> 00:21:17.070
stuff like that are supposed
to be up there. And

418
00:21:17.070 --> 00:21:18.780
also, it's kinda interesting to
hear that you guys are,

419
00:21:20.010 --> 00:21:23.130
you're putting your specs online
before you even shipped something.

420
00:21:23.430 --> 00:21:26.490
This seems like, yeah. So
this is just one more

421
00:21:26.490 --> 00:21:29.190
step along the continuum of
being more open as a

422
00:21:29.190 --> 00:21:32.610
development team. So this isn't
just vex before we release

423
00:21:32.610 --> 00:21:34.950
features. This is actually specs
before we even start working

424
00:21:34.950 --> 00:21:38.100
on features. So we literally
haven't even started working on

425
00:21:38.100 --> 00:21:39.720
this though. I loved yet,
but this bank is up

426
00:21:39.720 --> 00:21:41.820
there in public and we'd
love your feedback on it.

427
00:21:42.270 --> 00:21:44.160
And we don't just want
your feedback as a token

428
00:21:44.160 --> 00:21:47.640
gesture, we're seeing an older
releases of entity framework, like

429
00:21:47.910 --> 00:21:51.210
customer feedback is having huge
impact on the actual product

430
00:21:51.210 --> 00:21:53.790
that we ship. We saw
this in code first where

431
00:21:53.790 --> 00:21:57.510
the API looks nothing like
it is pending migrations. Again,

432
00:21:57.510 --> 00:22:01.170
like you said, the whole
paradigm for migrations change lately

433
00:22:01.170 --> 00:22:04.830
from the first release now
complex is where I can

434
00:22:04.830 --> 00:22:07.260
source code goes and entity
prime where he's open source.

435
00:22:07.260 --> 00:22:11.070
These days, that's a hundred
Apache, two licensed, and we

436
00:22:11.070 --> 00:22:13.710
are actively working on pages
there. It's not just a

437
00:22:13.710 --> 00:22:16.500
toss over the wall. Here's
the code that we shipped.

438
00:22:16.530 --> 00:22:18.660
This is we are actually
working on the next version

439
00:22:18.660 --> 00:22:21.420
of ND framework in the
open source code based on

440
00:22:21.420 --> 00:22:23.970
code Plex. So you're saying
that I can go to

441
00:22:23.970 --> 00:22:27.660
any of your frameworks@covid.com right
now, download the source code

442
00:22:27.660 --> 00:22:30.750
for any new framework version.
I I'll have to ask

443
00:22:30.750 --> 00:22:33.150
you what version and I
can build and use that

444
00:22:33.150 --> 00:22:36.960
today. Yeah, absolutely. So our
team is currently working on

445
00:22:36.960 --> 00:22:39.420
entity framework six. So we
shipped the F five, a

446
00:22:39.420 --> 00:22:41.880
couple of weeks back. And
so now our focus is

447
00:22:41.880 --> 00:22:46.140
shifting was the features that
<inaudible>, and you can go

448
00:22:46.230 --> 00:22:49.110
download the source code, build
it, test it out, and

449
00:22:49.110 --> 00:22:51.090
you can actually test out
some of the new features.

450
00:22:51.270 --> 00:22:54.420
So some that are already
checked in, in EFC for

451
00:22:54.420 --> 00:22:59.010
introducing asynchronous support. So you
can voice query and save

452
00:22:59.020 --> 00:23:02.580
changes. Asynchronously using entity PrimeWay
that feature is checked in.

453
00:23:02.670 --> 00:23:04.290
You can go look at
our unit tests and see

454
00:23:04.290 --> 00:23:08.190
how it works. We're introducing
some new patterns for dependency

455
00:23:08.190 --> 00:23:11.340
injection. Again, you can go
look at unit tests, download

456
00:23:11.340 --> 00:23:14.520
the code, try it out.
We've done some work so

457
00:23:14.520 --> 00:23:19.650
that you can store models
on two co-first models in

458
00:23:19.650 --> 00:23:22.500
a single database. That's something
that didn't work in AFI,

459
00:23:22.530 --> 00:23:27.750
but we've already enabled it
in ASX. Interesting. So ESX,

460
00:23:27.780 --> 00:23:30.180
what is that all about?
Is, is there, is there

461
00:23:30.180 --> 00:23:32.580
a roadmap somewhere? Is there
a list of features? What

462
00:23:32.580 --> 00:23:34.650
if, what if I want
to have my feature? I

463
00:23:34.650 --> 00:23:36.780
want to, you know, have
some crazy teacher that I

464
00:23:36.780 --> 00:23:38.990
think should be NSX. Where
would I go and, and

465
00:23:39.110 --> 00:23:41.700
give the feedback that I
want my feature to be

466
00:23:41.700 --> 00:23:44.790
in ESX. And also what's
what time do you guys

467
00:23:44.790 --> 00:23:48.290
have a timeframe? Yeah. So,
all right. Questions. So entity

468
00:23:48.290 --> 00:23:51.920
framework.co flex.com is the place
to go. If you want

469
00:23:51.920 --> 00:23:54.650
to log a feature request,
if you hit a bug

470
00:23:54.650 --> 00:23:56.000
that you want us to
fix, go in and log

471
00:23:56.000 --> 00:24:01.240
up there. Alternatively, if you
have a bug that you've

472
00:24:01.240 --> 00:24:03.470
hit or you want to
feature, that is something that

473
00:24:03.470 --> 00:24:07.040
our team isn't planning to
implement. Then we're actually accepting

474
00:24:07.040 --> 00:24:10.370
contributions and we've taken three
contributions already from the community.

475
00:24:10.970 --> 00:24:13.640
So one example, someone wanted
an interface, but on object

476
00:24:13.640 --> 00:24:16.520
context, which our team wasn't
really planning to do it

477
00:24:16.520 --> 00:24:19.280
wasn't super high priority, but
we actually checked in the

478
00:24:19.280 --> 00:24:23.180
contribution, the paleo this week
for that change, there is

479
00:24:23.180 --> 00:24:24.740
a road map on there
too. So if you want

480
00:24:24.740 --> 00:24:26.810
to see what our team
is planning to do again,

481
00:24:26.810 --> 00:24:29.510
if you go to the
documentation tab on the Koch

482
00:24:29.510 --> 00:24:31.880
flex site, you'll see a
road map link there, which

483
00:24:31.880 --> 00:24:33.770
will tell you all the
features we're planning to do.

484
00:24:34.670 --> 00:24:37.160
And I'll plug a couple
while we're here. Things that

485
00:24:37.160 --> 00:24:40.600
people ask all the time,
still procedures, support, and hope

486
00:24:40.600 --> 00:24:44.950
first it's coming. And the
ability to customize the conventions

487
00:24:44.960 --> 00:24:50.450
of code first users that's
coming. Also, this is interesting,

488
00:24:50.450 --> 00:24:53.360
you know, once again, I
know that my team open

489
00:24:53.360 --> 00:24:56.630
sourced our libraries, some of
our libraries earlier this year,

490
00:24:57.050 --> 00:25:00.470
I'm a, I'm curious if
I'm, if I'm a corporate

491
00:25:00.470 --> 00:25:05.900
customer listening on the podcast
today, now that you're open

492
00:25:05.900 --> 00:25:09.380
source, does that mean that,
do I get the same

493
00:25:09.380 --> 00:25:12.410
support? How does, how does
that work? Can you kinda

494
00:25:12.410 --> 00:25:16.100
explain to everybody and how
does this change the world

495
00:25:16.100 --> 00:25:19.400
for our customers need framework
only gonna be released on

496
00:25:19.400 --> 00:25:21.920
code Plex in the future?
Or is it still gonna

497
00:25:21.930 --> 00:25:24.980
be like a Microsoft release?
So that's a great question

498
00:25:24.980 --> 00:25:27.080
and something, we spend a
lot of time working out

499
00:25:27.110 --> 00:25:31.250
inside Microsoft before we made
this move. So he doesn't

500
00:25:31.250 --> 00:25:34.220
change anything to the way
entity framework is released. Entity

501
00:25:34.220 --> 00:25:39.500
framework is a fully supported,
fully tested, signed by Microsoft,

502
00:25:39.770 --> 00:25:43.460
released by Microsoft with a
Microsoft license and full Microsoft

503
00:25:43.460 --> 00:25:46.580
support. The only thing that
changes is the way that

504
00:25:46.580 --> 00:25:50.480
we develop. So when now
open source, you can see

505
00:25:50.480 --> 00:25:53.240
what we're doing. You can
test it out. You can

506
00:25:53.240 --> 00:25:55.430
even jump in and get
on board with the development

507
00:25:55.430 --> 00:25:58.370
process. Bear in mind, if
you want to submit code

508
00:25:58.400 --> 00:26:00.440
into the framework, you're going
to be held to exactly

509
00:26:00.440 --> 00:26:03.710
the same guidelines, hustings handles
and everything that we use

510
00:26:03.710 --> 00:26:09.650
internally. So same high quality
bop for development, but you

511
00:26:09.650 --> 00:26:11.990
can get involved in the
development process when it comes

512
00:26:11.990 --> 00:26:16.040
time to ship. No changes
to the white was interesting.

513
00:26:16.040 --> 00:26:21.170
So basically it sounds like
Microsoft is still the gate

514
00:26:22.130 --> 00:26:24.050
for all changes that occur
in a new framework. It's

515
00:26:24.050 --> 00:26:26.990
not just a free for
all. Yeah, that's correct. That

516
00:26:26.990 --> 00:26:30.440
is one difference in some
open source projects, as far

517
00:26:30.440 --> 00:26:33.920
as like the administrators of
the project and people who

518
00:26:34.070 --> 00:26:36.710
can submit to the core
code base, that people who

519
00:26:36.710 --> 00:26:38.870
can do the final code
reviews. And that is still

520
00:26:38.870 --> 00:26:43.380
the Indian frameworks in here
at Microsoft. Another interesting question,

521
00:26:43.380 --> 00:26:46.170
now that you guys are
open-sourcing this entity framework, six

522
00:26:46.650 --> 00:26:49.440
of the.net framework ships with
you need to create more

523
00:26:49.500 --> 00:26:53.010
4.5. And if today, how
is the CF six going

524
00:26:53.010 --> 00:26:56.910
to work with any new
framework and the framework 4.5.

525
00:26:57.690 --> 00:26:59.670
When I, when I downloaded
the framework six, is it

526
00:26:59.670 --> 00:27:03.900
replaced the one in my
framework? How do I, how

527
00:27:03.900 --> 00:27:05.670
do I, how do I,
and also how would I

528
00:27:05.670 --> 00:27:08.190
migrate as well? I mean,
if it doesn't replace it,

529
00:27:08.250 --> 00:27:09.540
how do I, how would
I migrate to the new

530
00:27:09.540 --> 00:27:13.460
one? So can you help
us out with that? Yeah,

531
00:27:13.460 --> 00:27:15.710
it's a great question. Entity
framework is definitely in a

532
00:27:15.710 --> 00:27:19.810
slightly confusing site at the
moment. So not 0.5, that's

533
00:27:19.810 --> 00:27:22.790
slightly confusing state. I love
the love, the competence there.

534
00:27:23.090 --> 00:27:26.510
Yeah. So we tried to
make it less confusing just

535
00:27:26.510 --> 00:27:28.280
by being very clear about
the way we talk about

536
00:27:28.280 --> 00:27:31.400
things. So when we talk
about entity framework five, we're

537
00:27:31.400 --> 00:27:33.680
talking about that you get
package that ships on UGA.

538
00:27:34.580 --> 00:27:36.890
Now that's not quite true
because then it'd be point

539
00:27:36.890 --> 00:27:40.730
where five is actually basically
three pieces, one it's the

540
00:27:40.730 --> 00:27:42.380
new get packaged the chips
on it. You get the

541
00:27:42.430 --> 00:27:46.280
older, it's also some components
that are still in the.net

542
00:27:46.280 --> 00:27:49.280
framework from the earlier days
when entity framework was part

543
00:27:49.280 --> 00:27:52.970
of the.net framework. In addition
to that, we also have

544
00:27:52.970 --> 00:27:57.200
the tooling, which is part
of visual studio. So moving

545
00:27:57.200 --> 00:27:59.120
forward, it's the way it's
going to work. Then you

546
00:27:59.120 --> 00:28:02.930
get packaged still primarily entity
framework. But what we're actually

547
00:28:02.930 --> 00:28:05.780
doing is taking the components
out of the framework and

548
00:28:05.780 --> 00:28:08.420
putting them into the new
get package. Now, just to

549
00:28:08.420 --> 00:28:11.030
clarify that the components are
still going to be in

550
00:28:11.030 --> 00:28:13.190
the.net framework, cause I have
to be there for backwards

551
00:28:13.190 --> 00:28:18.140
compatibility. I still need those
classes inside.net so that if

552
00:28:18.140 --> 00:28:22.250
the application depends on them,
they're still there. But if

553
00:28:22.250 --> 00:28:25.160
you're just using the nugget
package and then with these

554
00:28:25.160 --> 00:28:28.730
components moved out, we can
do newer Vigo features without

555
00:28:28.730 --> 00:28:31.550
having to update them anyway.
So I, for example, in

556
00:28:31.550 --> 00:28:34.100
EFI, have to do the
emails feature. We had to

557
00:28:34.100 --> 00:28:38.090
update components in the Hugo
package, but our query pipeline

558
00:28:38.300 --> 00:28:41.600
mapping a metadata sections, they're
all inside the net. So

559
00:28:41.600 --> 00:28:44.270
we had to release.net four
or five to be able

560
00:28:44.270 --> 00:28:46.910
to support emails, which also
means if you downloaded have

561
00:28:46.940 --> 00:28:49.880
five and you're talking to,
and go ahead, you can

562
00:28:49.880 --> 00:28:51.770
still use the at five,
you don't get the email

563
00:28:51.770 --> 00:28:55.190
feature in, you know, six
that restriction goes away. We

564
00:28:55.190 --> 00:28:58.580
can do all these features
without revving the.net framework. And

565
00:28:58.580 --> 00:29:01.280
in fact, things like emails
and the spatial data, we'll

566
00:29:01.280 --> 00:29:05.600
actually start working on it
for so interesting. So as

567
00:29:05.600 --> 00:29:08.960
we move to <inaudible>, you're
going to basically give people

568
00:29:08.960 --> 00:29:11.540
using, it sounds like you're
going to target both dotnet

569
00:29:11.540 --> 00:29:15.480
four and on it, four
or five for ESX. Is

570
00:29:15.480 --> 00:29:18.590
that, is that right? That's
correct. And our aim is

571
00:29:18.590 --> 00:29:22.550
to make every possible feature
work on vice.net four or

572
00:29:22.550 --> 00:29:25.640
five. And that for now
we're still looking into things

573
00:29:25.640 --> 00:29:29.240
like hazing, which is largely
about night four or five

574
00:29:29.240 --> 00:29:31.850
feature, whether we can actually
enable that on Danette for

575
00:29:31.850 --> 00:29:34.670
or not, but where possible
everything would work back the

576
00:29:34.670 --> 00:29:38.150
doll head for. Okay. So
I've, I've got ESX on

577
00:29:38.150 --> 00:29:42.460
my machine and I've already
got my application written 4.5

578
00:29:42.460 --> 00:29:45.310
in the box or out,
how do I make the

579
00:29:45.320 --> 00:29:48.760
switch? What do I, how
do I convert over? So

580
00:29:49.420 --> 00:29:52.510
back in the year 4.1
release, we introduced a simplified

581
00:29:52.510 --> 00:29:56.410
idealized. That is DB context.
Now this was like a

582
00:29:56.410 --> 00:29:59.860
stripped down more efficient version
of object context, which has

583
00:29:59.860 --> 00:30:03.700
been around since the start
of entity framework, David context

584
00:30:04.060 --> 00:30:06.430
and the code first components
as well. Now I want

585
00:30:06.430 --> 00:30:08.440
to be clear to be
context. Isn't just the code

586
00:30:08.440 --> 00:30:11.680
first. And in fact, in
visual studio, 2012, if you

587
00:30:11.680 --> 00:30:13.450
create a new model with
a designer, you will get

588
00:30:13.450 --> 00:30:18.370
the DB context, but DB
context and code first have

589
00:30:18.370 --> 00:30:21.010
always been in the new
package and I've never been

590
00:30:21.010 --> 00:30:24.370
included in my work. So
if you are only using

591
00:30:24.370 --> 00:30:28.510
the DB context API, then
you can seamlessly operate just

592
00:30:28.510 --> 00:30:30.370
by installing that you have
six and you got packaged

593
00:30:30.370 --> 00:30:33.340
and everything will just work.
Now, if you happen to

594
00:30:33.340 --> 00:30:36.070
be using object context, or
if you're using the DB

595
00:30:36.070 --> 00:30:39.370
context IPI, but dropping down
to the object context API

596
00:30:39.370 --> 00:30:42.310
at times, then you'll need
to change some names spaces.

597
00:30:42.790 --> 00:30:45.400
We've kept the IPO surface
looking the same, but to

598
00:30:45.400 --> 00:30:48.850
avoid conflicts with the toxin
in the.net framework, we've put

599
00:30:48.850 --> 00:30:53.020
them in, in United States. So
basically to operate in 99%

600
00:30:53.020 --> 00:30:56.020
of cases, if you're using
DB context, nothing to do,

601
00:30:56.800 --> 00:30:58.870
if you are using object
context, you would probably have

602
00:30:58.870 --> 00:31:01.090
to go and change some
using. Awesome. So it sounds

603
00:31:01.090 --> 00:31:03.310
like it's the upgrade. Model's
not too bad and I

604
00:31:03.310 --> 00:31:06.340
can run a whole side
by side in some cases,

605
00:31:06.340 --> 00:31:09.070
I guess. Yeah. That's actually
one great thing about not

606
00:31:09.070 --> 00:31:11.470
being in the framework. Not
only, we're not the framework,

607
00:31:11.470 --> 00:31:13.510
we're also not in the
gap, which means we're being

608
00:31:13.510 --> 00:31:17.920
deployed everywhere. So you can
have open one solution that's

609
00:31:17.920 --> 00:31:21.820
using AFI. You can open
another solution using <inaudible> because

610
00:31:21.820 --> 00:31:24.310
there's no central tool on
the box. Let's do apps

611
00:31:24.310 --> 00:31:27.550
and happily run side by
side. Awesome. Well, I want

612
00:31:27.550 --> 00:31:29.950
to thank you for joining
us today and talking to

613
00:31:29.950 --> 00:31:31.510
us about all the great
new features of some of

614
00:31:31.510 --> 00:31:35.350
the community of six and
some of the teachers Scott.

615
00:31:35.350 --> 00:31:37.090
That's great. Then I just
want to give you one

616
00:31:37.090 --> 00:31:39.700
resource. If you want to
know anything about entity framework,

617
00:31:39.880 --> 00:31:44.950
then you want to hit
the msdn.com/ <inaudible> done a

618
00:31:44.950 --> 00:31:46.810
lot of work to the
site, including a bunch of

619
00:31:46.810 --> 00:31:51.010
videos to help you get
started. Thanks. Thanks for listening

620
00:31:51.010 --> 00:31:53.560
to this episode of Hansel
minutes next week, Scott Hanselman

621
00:31:53.560 --> 00:32:01.500
should <inaudible>.

