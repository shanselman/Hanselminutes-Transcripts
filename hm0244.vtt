WEBVTT FILE

1
00:00:12.150 --> 00:00:17.820
From hanselminutes.com. It's Hanselman. It's
a weekly discussion with web

2
00:00:17.820 --> 00:00:22.470
developer and technologists. Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.470 --> 00:00:28.560
number two 44. Recorded live
Thursday, December 9th, 2010. Support for Hansel

4
00:00:28.560 --> 00:00:32.400
minutes is provided by Telerik
rad controls, the most comprehensive

5
00:00:32.400 --> 00:00:36.270
suite of components for windows
forms and asp.net web applications

6
00:00:36.570 --> 00:00:44.910
online@wwwdottelerik.com. In this episode, Scott
talks with Benjamin Vanderveen about

7
00:00:44.910 --> 00:00:51.020
his C-sharp web server kayak.
Hi, this is Scott Hansen. This

8
00:00:51.020 --> 00:00:53.270
is another episode of Hansel
minutes, and I am here

9
00:00:53.270 --> 00:00:55.520
today in the rain in
Portland, Oregon sitting in the

10
00:00:55.520 --> 00:00:59.930
home of Benjamin Vanderveen. How's
it going, sir? Very well.

11
00:00:59.990 --> 00:01:02.510
How are you? I am
very wet. I say it's

12
00:01:02.510 --> 00:01:06.680
flooding outside with rain, but
we're surviving today. I wanted

13
00:01:06.680 --> 00:01:09.020
to talk about some cool
open source stuff that's going

14
00:01:09.020 --> 00:01:11.240
on because I think that
there is a kind of

15
00:01:11.240 --> 00:01:13.940
multiple levels of open source
that happened in the dotnet

16
00:01:13.940 --> 00:01:16.850
universe. You know, there's like
your conventional standard stuff, like

17
00:01:16.850 --> 00:01:18.860
your log for nets and
your end units and things

18
00:01:18.860 --> 00:01:22.460
like that. And then there's,
you know, more kind of

19
00:01:22.490 --> 00:01:25.760
emerging kind of cool stuff
happening in open source and

20
00:01:25.760 --> 00:01:28.820
you're involved in some of
that. That's correct. So talk

21
00:01:28.820 --> 00:01:33.380
to me about what kayak
is. So kayak is it's

22
00:01:33.380 --> 00:01:36.980
a web server written in
C sharp. The whole thing

23
00:01:36.980 --> 00:01:41.840
is implemented in C sharp.
And basically it's, it's kind

24
00:01:41.840 --> 00:01:43.880
of cool because you can
just fire up a server

25
00:01:44.060 --> 00:01:46.430
with like one line of
code started up and it's

26
00:01:46.430 --> 00:01:50.930
all within your process and
there's no crazy hosting containers

27
00:01:50.930 --> 00:01:53.180
or anything complicated to set
up. You just instantiate a

28
00:01:53.180 --> 00:01:57.770
server and you're off, off
to go. And it's, it's

29
00:01:57.770 --> 00:02:01.520
pretty cool because, or at
least for me, it's been

30
00:02:01.580 --> 00:02:04.700
a really fun kind of
architectural experiment, learning a lot

31
00:02:04.700 --> 00:02:09.170
about server architecture. And honestly,
I've probably rewritten it a

32
00:02:09.170 --> 00:02:13.580
good six times since I
started. And it's just been

33
00:02:13.610 --> 00:02:16.130
a really great learning experience
for me and a great

34
00:02:16.130 --> 00:02:19.340
way to kind of get
out in the community a

35
00:02:19.340 --> 00:02:22.160
little bit more and get
some feedback on, on my,

36
00:02:22.760 --> 00:02:25.850
on my designs. So you
say it's entirely written in

37
00:02:25.850 --> 00:02:27.770
C sharp. So at, at
what level do you hit

38
00:02:28.010 --> 00:02:31.070
like unmanaged code? Do you,
do you use something else

39
00:02:31.070 --> 00:02:33.440
for HTTP or do you
use something else for sockets?

40
00:02:33.440 --> 00:02:35.720
Like at what point do
we hit metal? So in

41
00:02:35.720 --> 00:02:39.920
the current version, there's, there's
actually the network layer is

42
00:02:40.070 --> 00:02:43.670
swappable. I have an interface
called eye socket and I

43
00:02:43.670 --> 00:02:47.540
have a basic implementation using
system.net dot sockets dot socket.

44
00:02:47.600 --> 00:02:52.670
And I also wrote a,
a live event to library

45
00:02:52.730 --> 00:02:56.660
or wrapper library, I should
say, which is called oars.

46
00:02:57.380 --> 00:03:01.240
And that actually makes P
vote calls into live event

47
00:03:01.240 --> 00:03:04.390
too. What is live event
to a, it's a, it's

48
00:03:04.390 --> 00:03:09.040
a C library written in
C that sort of wraps

49
00:03:09.040 --> 00:03:12.940
up your ear, poll, your
select and all these different

50
00:03:13.540 --> 00:03:19.390
nonblocking abstractions that are available
on different operating systems. It

51
00:03:19.390 --> 00:03:24.280
also has supports I OCP
on windows as well. So

52
00:03:24.310 --> 00:03:26.680
that, that I chose to
do to go that route

53
00:03:26.680 --> 00:03:31.960
rather than, you know, calling
a particular operating systems API

54
00:03:31.960 --> 00:03:36.130
is directly just to get
that built in platform independence

55
00:03:36.130 --> 00:03:38.320
that live event to gives.
And, you know, I've seen

56
00:03:38.320 --> 00:03:41.200
really good performance statistics about
it. So it seemed like

57
00:03:41.200 --> 00:03:44.040
a good, good choice at
the time. So is this

58
00:03:44.040 --> 00:03:47.010
a replacement for like IAS
and Apache or is this,

59
00:03:47.100 --> 00:03:49.140
is this live in another
world or are there reasons

60
00:03:49.140 --> 00:03:51.000
I would want to continue
to use IAS and also

61
00:03:51.000 --> 00:03:53.550
use kayak? Or do you
have like great aspirations to

62
00:03:53.550 --> 00:03:58.230
like topple these other web
servers? So maybe I started

63
00:03:58.230 --> 00:04:02.040
out like that, but a
few years down the down

64
00:04:02.040 --> 00:04:06.120
the road, growing older, it's,
you know, evident that those

65
00:04:06.120 --> 00:04:09.270
things are pretty well entrenched,
but I think there's definitely

66
00:04:09.330 --> 00:04:14.730
an opportunity here. And particularly
with this, this new specification

67
00:04:14.730 --> 00:04:18.870
that I'm offering called Owen
Owen is going to be

68
00:04:19.230 --> 00:04:21.780
Owen. Is that an accurate
way? And yes. Oh, w

69
00:04:21.780 --> 00:04:25.170
I N okay. You can
see this. If you go

70
00:04:25.170 --> 00:04:32.160
to owen.github.com, you can check
out the specification. And basically

71
00:04:32.160 --> 00:04:34.410
the goal here is so
there's, there's lots of people

72
00:04:34.410 --> 00:04:38.940
writing, you know, different servers,
different frameworks, and you know,

73
00:04:38.940 --> 00:04:42.150
of course all the Microsoft
stuff that's already there. And

74
00:04:43.830 --> 00:04:47.490
what, what, what we're lacking
is some sort of common

75
00:04:47.490 --> 00:04:50.940
interface where servers can, and
frameworks can talk to each

76
00:04:50.940 --> 00:04:55.650
other. So now my thinking
of kayak is, you know,

77
00:04:55.710 --> 00:04:59.940
I've, I've learned so much
through the process of, you

78
00:04:59.940 --> 00:05:02.310
know, just iterating on kayak
and I've come to the

79
00:05:02.310 --> 00:05:05.430
conclusion that we needed an
interface like this. And there's

80
00:05:05.430 --> 00:05:08.190
kind of a critical mass
in the community now where

81
00:05:08.190 --> 00:05:12.540
the people who are on
board with this interface. And

82
00:05:13.530 --> 00:05:16.650
so I, the way my
goal for kayak now is

83
00:05:16.650 --> 00:05:20.130
just to be a really
fast, simple Owen server that

84
00:05:20.130 --> 00:05:23.630
runs on mano and on
windows. And, you know, is

85
00:05:23.630 --> 00:05:27.150
just a, just a simple,
solid Owen host Owen stands

86
00:05:27.150 --> 00:05:30.720
for, Oh, I'm sorry. Owen
stands for open web interface

87
00:05:30.720 --> 00:05:33.360
for.net. Okay, cool. So let
me see if I understand.

88
00:05:33.960 --> 00:05:37.980
So we know already that
we've got like a, you

89
00:05:37.980 --> 00:05:41.220
know, visual web server, which
old web developer server, this

90
00:05:41.220 --> 00:05:43.500
is the tiny web server
that comes with visual studio.

91
00:05:43.500 --> 00:05:46.050
It used to be called
Cassini. And that was a

92
00:05:46.050 --> 00:05:49.710
tiny little C-sharp HTTP server
was very, very, very, very

93
00:05:49.710 --> 00:05:53.520
basic. That was years and
years ago, we've got IIS,

94
00:05:53.530 --> 00:05:58.340
which is our kind of
industrial web server on windows.

95
00:05:58.910 --> 00:06:01.640
We've got a patchy, which
is our web industrial web

96
00:06:01.640 --> 00:06:07.070
server on Nick's. And now
kayak is an a she

97
00:06:07.070 --> 00:06:09.230
sharp web server and a
web server into an entirely

98
00:06:09.230 --> 00:06:11.630
and C-sharp, but it seems
to me like its niche

99
00:06:11.660 --> 00:06:13.880
is that it runs in
process that I could host

100
00:06:13.880 --> 00:06:16.640
that inside of anything. If
I had some app that

101
00:06:16.640 --> 00:06:19.250
I was running. And by
the way, that app needs

102
00:06:19.250 --> 00:06:20.660
a web server that I
need to run on a

103
00:06:20.660 --> 00:06:24.110
user's machine or something lightweight.
Yeah. I bring kayak in

104
00:06:24.370 --> 00:06:27.430
Totally. That's another use case
that people have kind of

105
00:06:27.430 --> 00:06:29.980
found for kayak. Wasn't one
of my original goals, but

106
00:06:30.340 --> 00:06:33.550
in a lot of cases,
they've, I've had people come

107
00:06:33.580 --> 00:06:34.930
to me like, this is
great. You know, I just

108
00:06:34.930 --> 00:06:36.850
needed a little web server
to do a little thing

109
00:06:36.850 --> 00:06:38.980
real quick and kayak, you
know, did what it said

110
00:06:38.980 --> 00:06:40.990
on the 10. And it's
just awesome. Thank you so

111
00:06:40.990 --> 00:06:44.350
much. That's cool. And that's,
that was really nice and

112
00:06:44.920 --> 00:06:47.320
I'm not sure, but it
might not be difficult to

113
00:06:47.320 --> 00:06:50.140
port to the iPhone under
mano touch. Haven't tried it

114
00:06:50.140 --> 00:06:52.390
myself yet, but I don't
think there's any reason why

115
00:06:52.390 --> 00:06:54.660
that wouldn't be possible. That'd
be very interesting. Cause on,

116
00:06:54.660 --> 00:06:59.680
on phones, you've got things
like, like Dropbox and docs

117
00:06:59.680 --> 00:07:01.840
to go and things like
that, that when you fire

118
00:07:01.840 --> 00:07:04.300
up the application, they host
a web server so that

119
00:07:04.300 --> 00:07:06.820
other people on the same
wireless network can talk to

120
00:07:06.820 --> 00:07:09.610
your phone and you can
share documents and stuff. Totally.

121
00:07:09.610 --> 00:07:11.530
That would be a great
application for it. Yeah. So

122
00:07:11.530 --> 00:07:13.330
the idea of a, of
a, of a tiny managed

123
00:07:13.330 --> 00:07:16.060
web server is really useful.
I mean, we could certainly

124
00:07:16.060 --> 00:07:17.980
try to get this running
on windows phone as well.

125
00:07:18.280 --> 00:07:22.900
Definitely, definitely. Okay. So we've
got this kind of, this,

126
00:07:22.900 --> 00:07:26.620
this gradient of different web
server implementations, kayak being one

127
00:07:26.620 --> 00:07:29.500
of them. And then you
started, I started asking you

128
00:07:29.500 --> 00:07:31.960
about interfaces and it kind
of, at what point do

129
00:07:31.960 --> 00:07:33.730
you hit the metal and
there's lots of different ways

130
00:07:33.730 --> 00:07:36.430
to talk to sockets, right?
Not just the windows way,

131
00:07:37.000 --> 00:07:39.460
also things like live event
to like you pointed out

132
00:07:40.000 --> 00:07:42.430
there's other implementations of ways
to talk to sockets as

133
00:07:42.430 --> 00:07:46.360
well, then there's HTTP dot
SIS HTTP listener and things

134
00:07:46.360 --> 00:07:49.210
like that that are kind
of built in, in, in

135
00:07:49.210 --> 00:07:54.910
windows. Are you saying that
this Owen open web implementation

136
00:07:54.910 --> 00:07:58.780
for dotnet interface interface, excuse
me, open web interface for.net

137
00:07:59.650 --> 00:08:03.340
is kind of an intermediate
abstraction for all of those

138
00:08:03.340 --> 00:08:05.830
different implementations of sockets and
things like that on, on

139
00:08:05.830 --> 00:08:09.040
multiple operating systems, Right? Yeah.
It's going to be, it's

140
00:08:09.040 --> 00:08:11.440
going to target mano and
of course monitor targets all

141
00:08:11.440 --> 00:08:15.100
different operating systems. It will
work on regular.net as well.

142
00:08:16.000 --> 00:08:18.820
So the idea is basically,
you know, it's, it's this

143
00:08:18.820 --> 00:08:23.080
interface between like something which
can provide HTTP requests and

144
00:08:23.590 --> 00:08:28.090
send HTTP responses to a
thing which needs to handle

145
00:08:28.110 --> 00:08:32.530
requests and generate responses. So
servers and frameworks, if you

146
00:08:32.530 --> 00:08:35.440
will. And the cool thing
is once you get an

147
00:08:35.440 --> 00:08:39.940
interface like this, you can
then compose it, you know,

148
00:08:39.940 --> 00:08:43.390
kind of at arbitrary depth.
And you know, of course

149
00:08:43.390 --> 00:08:45.910
it enables the creation of
middlewares another way to put

150
00:08:45.910 --> 00:08:51.220
that. And in, in Python,
you know, we have whisky

151
00:08:51.220 --> 00:08:55.590
and, and Ruby, we have
rack and these guys really

152
00:08:55.590 --> 00:08:58.820
big into their middleware. Well
rack was that, that, that

153
00:08:58.820 --> 00:09:01.880
last, my next question, actually,
and this isn't middleware in

154
00:09:01.880 --> 00:09:05.150
the classic enterprise sense of
the word, this is just

155
00:09:05.150 --> 00:09:07.280
the middle part of the
hourglass. You know, you've got

156
00:09:07.280 --> 00:09:09.830
this hourglass and you've got
all your web app above

157
00:09:09.830 --> 00:09:11.930
the middle part, you know,
the, the, the, the tights

158
00:09:11.930 --> 00:09:14.090
kind of interface at the,
in between. And then you've

159
00:09:14.090 --> 00:09:17.000
got all of your threading
models and your, how do

160
00:09:17.000 --> 00:09:20.030
you talk to sockets at
the bottom? Correct. And then

161
00:09:20.030 --> 00:09:22.370
these components can sit in
between that and, you know,

162
00:09:22.400 --> 00:09:25.790
do things like, you know,
Jesus, the output from your

163
00:09:25.790 --> 00:09:33.260
web application, or, you know,
add, add header, the headers,

164
00:09:33.270 --> 00:09:35.600
things like that. Yeah. So
are you saying that Owen

165
00:09:35.600 --> 00:09:38.990
has the potential to be
rack for.net? That is absolutely

166
00:09:38.990 --> 00:09:41.330
what Owen is. Okay. So
if you're not familiar with

167
00:09:41.330 --> 00:09:44.930
rack, this is a, a
Ruby thing, rails thing, right.

168
00:09:45.020 --> 00:09:47.570
That allows you to sit
on top of really any

169
00:09:47.570 --> 00:09:51.800
implementation of, of anything on
the bottom. Any, any web

170
00:09:51.800 --> 00:09:54.650
server, any socket amputation, as
well as put things on

171
00:09:54.650 --> 00:09:59.150
top of, right? Correct. Yeah.
Now whiskey and rack or

172
00:09:59.150 --> 00:10:01.160
whiskey is like the Python
version of the same thing

173
00:10:01.160 --> 00:10:06.110
you just described. Whiskey takes
a sort of a more

174
00:10:06.110 --> 00:10:08.570
minimal approach and Python, you
know, with their PEPs and

175
00:10:08.570 --> 00:10:13.910
everything. It's actually codified in
this like nicely, well, well,

176
00:10:14.090 --> 00:10:18.860
articulated specification, whereas rack is,
I think there might be

177
00:10:18.860 --> 00:10:22.580
a specification it's not as
well articulated and precise, but

178
00:10:23.620 --> 00:10:26.570
factor specification. Right? Exactly. But
it racks the thing, the

179
00:10:26.570 --> 00:10:28.910
difference there is that rack
is a, it's also a

180
00:10:28.910 --> 00:10:31.520
library that includes lots of
middleware and does lots of

181
00:10:31.520 --> 00:10:35.930
stuff. Now, Owen, so far
on the discussion list has

182
00:10:35.930 --> 00:10:39.560
been taking, taking the more
of the whiskey tack where

183
00:10:39.560 --> 00:10:41.660
it's just kind of a
minimal set of interfaces. We're

184
00:10:41.660 --> 00:10:45.410
just looking to ship a
single DLL with three interfaces.

185
00:10:45.470 --> 00:10:50.180
I application I request and
I response and that, that

186
00:10:50.180 --> 00:10:53.090
will be all. And then
after we kind of get

187
00:10:53.150 --> 00:10:55.130
all of that nailed down
and all the language and,

188
00:10:55.130 --> 00:10:58.910
and specification testing and stuff
revolving around that, I think

189
00:10:59.810 --> 00:11:02.780
through that process, we're gonna
probably see the creation of

190
00:11:02.780 --> 00:11:06.650
like O N dot extensions
library, where.com trip or something.

191
00:11:06.680 --> 00:11:08.720
Yeah. Something like that, where
we have a lot of,

192
00:11:09.260 --> 00:11:11.720
you know, methods that make
it easier to work with

193
00:11:12.110 --> 00:11:14.660
the base. Oh. And interfaces
and implement a lot of

194
00:11:14.660 --> 00:11:17.870
patterns that framework developers are
gonna have to use A

195
00:11:17.870 --> 00:11:20.210
while back. I gave, I
gave a talk and I

196
00:11:20.210 --> 00:11:22.370
made the comment that I
felt that the pieces of

197
00:11:22.370 --> 00:11:24.590
software that were coming out
of Microsoft lately, you know,

198
00:11:24.590 --> 00:11:27.230
kind of all that pile
of beta that we've been

199
00:11:27.230 --> 00:11:29.330
releasing over the last kind
of nine months that we're

200
00:11:29.330 --> 00:11:33.650
going to kind of finalize
next spring is I started

201
00:11:33.650 --> 00:11:35.690
referring to them as Lego
pieces. I was like, you

202
00:11:35.690 --> 00:11:38.750
know, finally, we're getting the
right size Lego pieces. It

203
00:11:38.750 --> 00:11:41.810
feels like what you're trying
to do with this Owen

204
00:11:41.870 --> 00:11:45.820
is to put it in
Lego terms. You're S you're

205
00:11:45.830 --> 00:11:49.340
basically deciding on the size
of the little, what are

206
00:11:49.340 --> 00:11:50.690
the little things on top
of the bricks? You know

207
00:11:50.690 --> 00:11:54.280
what I mean? That'd be,
it's the middle nubbies on

208
00:11:54.280 --> 00:11:57.100
your ear. You're describing the
size and depth and specification

209
00:11:57.100 --> 00:11:59.530
of the nubbies so that
you've got some Legos and

210
00:11:59.530 --> 00:12:02.110
I've got some Legos and
WCF has some Legos and

211
00:12:02.110 --> 00:12:04.810
open Rosta has some Legos
and, Oh, I want to

212
00:12:04.810 --> 00:12:06.850
put it on, on Linux
for a second. And I

213
00:12:06.860 --> 00:12:08.300
want to run it on
an iPhone, or when I

214
00:12:08.300 --> 00:12:11.170
want a windows phone, once
you agree on nubbies, we

215
00:12:11.170 --> 00:12:14.680
can all start building Legos
together. And suddenly things become

216
00:12:14.980 --> 00:12:19.230
combinable in almost an exponential
way. Yeah. And I think

217
00:12:19.230 --> 00:12:24.210
that's really one of the
huge powers of the Python

218
00:12:24.210 --> 00:12:26.880
and Ruby communities with their
whiskey and their rack. There's

219
00:12:26.880 --> 00:12:29.400
so much stuff. What does
that stand for? Oh, I'm

220
00:12:29.400 --> 00:12:35.160
sorry. Whiskey is Ws GI
it's web server gateway interface.

221
00:12:35.160 --> 00:12:38.970
It's pet three, three, three,
and Python. Python is the,

222
00:12:39.090 --> 00:12:42.450
or pep is the Python
proposal for the enhancement of

223
00:12:42.450 --> 00:12:45.570
Python. Okay. Because you know,
a lot of the people

224
00:12:45.570 --> 00:12:47.700
who are listening won't know
a lot of those acronyms.

225
00:12:47.700 --> 00:12:51.330
And then of course our
non English speaking listeners often

226
00:12:51.330 --> 00:12:53.640
don't understand when we take
up an acronym and we

227
00:12:53.640 --> 00:12:56.970
pronounce it. So that's why
I bring that up. So

228
00:12:56.970 --> 00:13:01.380
interesting. And do you see
that, what kind of interest

229
00:13:01.380 --> 00:13:03.240
are you seeing? Like, are
you talking to people like

230
00:13:03.330 --> 00:13:06.360
Glenn block from WCF and
you're talking to Sebastian from

231
00:13:06.360 --> 00:13:08.250
open Rosta and the different
folks that are interested in

232
00:13:08.250 --> 00:13:10.350
this space? Yeah. It's been
great. We've got a lot

233
00:13:10.350 --> 00:13:14.040
of interest. Glen has been
on the mailing list and

234
00:13:14.040 --> 00:13:18.780
he's been contributing Sebastian also
in particular, his he's just

235
00:13:19.260 --> 00:13:22.860
incredibly intelligent noses. RFCs like
the back of his hand

236
00:13:23.310 --> 00:13:29.670
and his input has been
extremely valuable. Also Ryan Riley, who's

237
00:13:29.670 --> 00:13:34.380
putting together a he's his
implementation of the host site

238
00:13:34.380 --> 00:13:37.020
is written in F sharp
and it's called frack. And

239
00:13:37.020 --> 00:13:39.090
he's got a framework he's
working on. It's the Sinatra

240
00:13:39.090 --> 00:13:42.330
clone called Frank. And there's
gonna be like those names.

241
00:13:42.360 --> 00:13:46.950
And then also Andrea is
Hockinson, who's get as Nancy

242
00:13:46.950 --> 00:13:51.300
framework, Jackson, Harper, Monistat, mano,
Jeff Hardy in w in, in

243
00:13:51.300 --> 00:13:54.090
whiskey, all these guys are
contributing. It's been a great

244
00:13:54.090 --> 00:13:59.610
discussion. Really appreciate everything that
they've had. Hi, this is

245
00:13:59.610 --> 00:14:02.220
Scott coming to you from
another place in time. Are

246
00:14:02.220 --> 00:14:05.550
you using agile practices to
manage your software development? There's

247
00:14:05.550 --> 00:14:07.530
lots of tools in the
market that manage the steps

248
00:14:07.530 --> 00:14:09.750
of a project, but most
of them focus on individual

249
00:14:09.750 --> 00:14:12.600
roles. Get ready for a
solution that caters for the

250
00:14:12.600 --> 00:14:15.690
success of the whole team.
Guys at Tellerik introduced team

251
00:14:15.690 --> 00:14:19.050
pulse. It's an agile project
management tool. That'll help you

252
00:14:19.050 --> 00:14:22.710
gather ideas, estimate plan, track
progress in a common workspace.

253
00:14:23.700 --> 00:14:26.370
Finally, companies, regardless of their
size can use a lightweight

254
00:14:26.370 --> 00:14:28.530
and convenient tool. It makes
all the stakeholders work as

255
00:14:28.530 --> 00:14:32.460
a United team, even if
they're in different countries by

256
00:14:32.460 --> 00:14:35.550
combining intuitive user interface and
the power server light team

257
00:14:35.550 --> 00:14:38.340
poles removes the roadblocks that
you typically face and applying

258
00:14:38.340 --> 00:14:41.400
agile in an effective manner,
no more lost data, no

259
00:14:41.410 --> 00:14:45.620
disparate systems, no lack of
critical analytics regarding the health

260
00:14:45.630 --> 00:14:49.050
and philosophy project. See if
yourself get a free copy

261
00:14:49.140 --> 00:14:55.430
for five users in one
project at.com/team pulse. And please

262
00:14:55.730 --> 00:14:58.670
do thank tolerant for supporting
Hansel minutes on their Facebook

263
00:14:58.670 --> 00:15:05.180
fan page, facebook.com/t L E
R I K. Coloring. We

264
00:15:05.180 --> 00:15:07.070
do appreciate it. There wouldn't
be a Hansel minutes. If

265
00:15:07.070 --> 00:15:09.860
there wasn't, Tellerik helping us.
Now, you just brought up

266
00:15:09.860 --> 00:15:12.950
something interesting. Now I realized
that for the, the folks

267
00:15:12.950 --> 00:15:15.140
that are listening, they're, they're
hearing a whole lot of

268
00:15:15.140 --> 00:15:18.890
terms that they've never heard
about before, but the terms

269
00:15:18.890 --> 00:15:21.950
are usually referring to, like
we said, the middleware things,

270
00:15:22.100 --> 00:15:24.830
just that all of which
have a corollary in the.net

271
00:15:24.830 --> 00:15:28.850
world. So like, but you
mentioned Frank and Nancy Sinatra.

272
00:15:29.090 --> 00:15:30.980
And I think that there's
something interesting about that because

273
00:15:30.980 --> 00:15:33.710
Sinatra is a, a way
to write some, you know,

274
00:15:33.740 --> 00:15:38.620
rest like services in a
Right. Yeah. It's originally a

275
00:15:38.620 --> 00:15:43.810
Ruby rested DSL, Frank and
Nancy. What are Frank and

276
00:15:43.810 --> 00:15:46.150
Nancy other than being a
father and daughter of the

277
00:15:46.150 --> 00:15:50.380
Sinatra. Yeah. And clever names
for frameworks. So Frank is

278
00:15:50.380 --> 00:15:54.640
Ryan Riley's F sharp web
framework. That is a, basically

279
00:15:54.640 --> 00:15:58.960
a Sinatra clone. And it
basically allows you to, you

280
00:15:58.960 --> 00:16:02.230
know, say something like write
code that looks almost like

281
00:16:02.230 --> 00:16:04.840
an HTTP request that says,
like get, and then some

282
00:16:04.840 --> 00:16:07.510
path, and then you write
a little bit of code

283
00:16:07.510 --> 00:16:10.180
and it returns like a
response object. And that's basically

284
00:16:10.180 --> 00:16:18.430
the pattern with Sinatra and
Nancy is a C-sharp Sinatra

285
00:16:18.430 --> 00:16:21.240
clone as well. Yeah. When
I saw these, they looked

286
00:16:21.240 --> 00:16:26.920
to me like really, really
terse kind of DSLs domain,

287
00:16:26.920 --> 00:16:31.270
specific languages for asp.net MVC,
except the routing and the

288
00:16:31.270 --> 00:16:35.020
controller are together, like in,
in answer to net MVC.

289
00:16:35.020 --> 00:16:38.890
If I wanted to make
a very basic get service

290
00:16:38.890 --> 00:16:40.840
that returns Jason, let's say
that that's cause you know,

291
00:16:40.840 --> 00:16:42.820
with all of these, that's
kind of your hello world.

292
00:16:42.820 --> 00:16:45.880
It's, you know, hello, Jason,
hello, JavaScript object notation. Right?

293
00:16:46.240 --> 00:16:48.460
You can say in an
MVC, you'd say something like

294
00:16:48.730 --> 00:16:53.740
have a home controller and
have a books method. And

295
00:16:53.740 --> 00:16:56.530
that returns action result, but
you need a routing table,

296
00:16:56.530 --> 00:16:59.110
often this other, this other
place. And then you would

297
00:16:59.110 --> 00:17:00.990
go and get your database
stuff and you pretend your

298
00:17:00.990 --> 00:17:03.670
Jason, but you need two
files and you need, you

299
00:17:03.670 --> 00:17:06.160
know, you need infrastructure, but
for a quick and dirty

300
00:17:06.160 --> 00:17:09.910
Jason thing with Sinatra, you
basically write one code block

301
00:17:10.300 --> 00:17:13.330
by which you say here's
a get. And when then

302
00:17:13.330 --> 00:17:15.760
when the, when the URL
looks like this, go do

303
00:17:15.760 --> 00:17:17.710
some stuff. So it's almost
as if they tack the

304
00:17:17.710 --> 00:17:19.420
routing on top of what
I think of as an

305
00:17:19.420 --> 00:17:22.450
action method in NBC. And
it's all in one place.

306
00:17:22.960 --> 00:17:26.230
So in the.net corollary, you've
got like a S H

307
00:17:26.260 --> 00:17:29.200
X files. It's like a,
it's like one page and

308
00:17:29.200 --> 00:17:32.290
this is an HTP handler,
but HTB handles are very

309
00:17:32.290 --> 00:17:36.340
low level HTTP handlers have
process requests. So this is

310
00:17:36.340 --> 00:17:39.520
almost like the Sinatra stuff
for.net would be one level

311
00:17:39.520 --> 00:17:43.270
above and HTP handler, but
a level below like a

312
00:17:43.270 --> 00:17:47.740
full MVC framework. Right? Yeah,
definitely. Do you think that's

313
00:17:47.740 --> 00:17:49.740
a way to be writing?
I mean, I think there's

314
00:17:49.740 --> 00:17:51.780
a lot of what I'm
hearing here is that people

315
00:17:51.780 --> 00:17:57.120
want lightweight quick, fast ways
to write basic web services.

316
00:17:57.180 --> 00:17:59.760
And then that web services
in the soap sense. And

317
00:17:59.760 --> 00:18:02.220
sometimes not even in the,
in the Jason sense, like,

318
00:18:02.250 --> 00:18:05.010
you know, POCs, right. Plain
old XML, they just want

319
00:18:05.010 --> 00:18:06.630
to get something out of
the database as quickly as

320
00:18:06.630 --> 00:18:08.730
they can and get it
out because they're going to

321
00:18:08.730 --> 00:18:11.310
manipulate it on the client
side. They want very, very

322
00:18:11.310 --> 00:18:16.550
lightweight servers. Yeah, definitely. And
I think, you know, now

323
00:18:16.550 --> 00:18:19.550
is the time I think
for the past five years,

324
00:18:19.550 --> 00:18:22.700
or maybe a little before
that we have seen a

325
00:18:22.700 --> 00:18:26.120
lot of people kind of
fumbling around with rest architecture

326
00:18:26.120 --> 00:18:29.000
and stuff, but it's really
gone mainstream now with Twitter,

327
00:18:29.030 --> 00:18:32.120
Facebook, and all these other
API is out there now.

328
00:18:33.140 --> 00:18:36.290
And I think that that's
something that, you know, I

329
00:18:36.290 --> 00:18:38.540
would love to see and,
you know, to, to that

330
00:18:38.540 --> 00:18:40.910
end, I'm doing all of
these, you know, interested in

331
00:18:40.910 --> 00:18:43.430
all these technologies. I would
like to be able to

332
00:18:43.430 --> 00:18:46.940
see like these really kind
of minimalist, simple Jason API

333
00:18:46.940 --> 00:18:52.130
APIs coming out of.net services.
And that originally my original

334
00:18:52.130 --> 00:18:55.310
use case for kayak was
exactly that, you know, we

335
00:18:55.310 --> 00:18:59.390
didn't need templating, we didn't
need sessions or any crazy

336
00:18:59.390 --> 00:19:02.330
things like that. And so,
you know, really, we just

337
00:19:02.330 --> 00:19:03.800
wanted to be able to
like pull an object out

338
00:19:03.800 --> 00:19:07.580
of the database, send it
as Jason and, you know,

339
00:19:07.730 --> 00:19:11.210
get on with our lives.
And I think that, you

340
00:19:11.210 --> 00:19:15.590
know, the syntax of, of
Sinatra and, and clones of

341
00:19:15.590 --> 00:19:18.860
that are really, really enables
that sort of thing to,

342
00:19:18.870 --> 00:19:21.200
to be done very quickly
and easily. And I think

343
00:19:21.200 --> 00:19:23.690
it's kind of the no
nonsense approach. That's been very

344
00:19:23.690 --> 00:19:28.880
successful in the dynamic languages
community. And I think that.net

345
00:19:28.880 --> 00:19:31.130
has a lot to learn
from that if you will.

346
00:19:31.130 --> 00:19:32.960
And that there's a lot
of potential here and in

347
00:19:32.960 --> 00:19:37.520
particular, because I mean.net and
we all know is gonna

348
00:19:37.520 --> 00:19:40.340
perform a lot better under
a lot of circumstances than

349
00:19:40.340 --> 00:19:42.710
some of these, you know,
Python and Ruby and things.

350
00:19:44.240 --> 00:19:46.160
That's an interesting point you
bring up though, because you're,

351
00:19:46.160 --> 00:19:48.530
you're someone who lives in
both worlds, right? You've got

352
00:19:48.530 --> 00:19:50.810
a head and dotnet, and
hadn't the dynamic world. And

353
00:19:50.810 --> 00:19:53.990
here in Portland, Oregon, this
is a real dynamic town,

354
00:19:55.190 --> 00:19:58.010
you know, in quotes with
tongue in cheek, but they

355
00:19:58.010 --> 00:20:01.280
don't like.net in areas of
Portland. They hate it around

356
00:20:01.280 --> 00:20:04.880
here, close in Southeast and
downtown. Let me tell you,

357
00:20:04.880 --> 00:20:07.310
I get funny. It looks
on the street, but The

358
00:20:07.310 --> 00:20:09.860
thing that I think that
people forget, and I say

359
00:20:09.860 --> 00:20:11.840
this not as a dotnet
apologist, but as someone who's

360
00:20:11.840 --> 00:20:13.880
been working in it for
darn near 10 years, is

361
00:20:13.880 --> 00:20:16.910
that it's fast as heck.
And sometimes I see a

362
00:20:16.910 --> 00:20:19.760
lot of these younger guys
talk about their performance in,

363
00:20:20.060 --> 00:20:23.330
in Python and rails, and
they just don't realize the

364
00:20:23.330 --> 00:20:25.490
scale that you can either
with the amount of throughput

365
00:20:25.490 --> 00:20:28.490
you can get with.net is,
is bananas. And I've always

366
00:20:28.490 --> 00:20:32.330
felt that if I could
have the syntactic aesthetic of

367
00:20:32.330 --> 00:20:36.020
a dynamic language and Jason
and the cleanliness of a

368
00:20:36.020 --> 00:20:39.350
DSL to describe some of
my services and the speed

369
00:20:39.350 --> 00:20:42.110
of the CLR, then now
we're talking. Yeah. Yeah. It's,

370
00:20:42.140 --> 00:20:46.760
it's a, it's a great
sort of crossroads between all

371
00:20:46.760 --> 00:20:48.760
of those things that you
just mentioned. And I think

372
00:20:48.850 --> 00:20:51.580
for that reason, there's a
lot of potential here and

373
00:20:51.580 --> 00:20:53.170
it's, it's kind of, it's
kind of amazing to me

374
00:20:53.170 --> 00:20:55.060
actually that it's taken this
long, but now that it's

375
00:20:55.060 --> 00:20:57.340
happening, it's really happening quickly.
There's a lot of people

376
00:20:57.340 --> 00:20:59.230
who are really big in
the community who are behind

377
00:20:59.230 --> 00:21:01.690
it, who have had these
ideas, but just, it hasn't

378
00:21:01.690 --> 00:21:05.350
coalesced until now. And it's
a, it's just really exciting.

379
00:21:05.890 --> 00:21:07.560
One of the things that
I've been really interested in

380
00:21:07.560 --> 00:21:09.900
is how quickly it took
us to go from angle

381
00:21:09.900 --> 00:21:13.470
bracket, delimited files, to curly
braced, unlimited files. You know,

382
00:21:13.470 --> 00:21:16.290
we're pushing Jason around more
than X amount, faster than

383
00:21:16.290 --> 00:21:19.770
ever. I noticed. And I
think it was a Forrester

384
00:21:19.830 --> 00:21:23.400
article just two days ago
that said that in, I

385
00:21:23.400 --> 00:21:28.710
think it was in 2009,
50, 40% of API APIs.

386
00:21:28.740 --> 00:21:31.200
And what I mean, APIs
means social API APIs, public

387
00:21:31.200 --> 00:21:33.630
APIs, like Twitter and Facebook.
And I'm like 40% of

388
00:21:33.630 --> 00:21:37.620
them were Jason today. 75%
of API is, or Jason,

389
00:21:38.550 --> 00:21:42.600
like Jason has one. Yeah.
And for good reason, it's

390
00:21:42.600 --> 00:21:46.410
much, much less verbose than
XML. Easier to write, easier

391
00:21:46.410 --> 00:21:52.650
to read, easier to parse
XML just has no analog

392
00:21:52.650 --> 00:21:55.890
and like common data structures
in most programming languages. Whereas

393
00:21:55.890 --> 00:21:59.400
Jason, like you have a
raise in dictionaries strings numbers

394
00:21:59.400 --> 00:22:02.850
and booleans like every programming
language. Yeah. It's funny. I

395
00:22:02.850 --> 00:22:07.650
actually, I used to work
at Nike in 1997 and

396
00:22:07.920 --> 00:22:10.260
my buddy Sean McElravy and
I were at Nike building

397
00:22:10.260 --> 00:22:14.760
their order. It was called
OMA order management application. It

398
00:22:14.760 --> 00:22:17.850
was an internal application written
entirely in Java, used hot

399
00:22:17.850 --> 00:22:20.310
Java and old Unix machines.
And it was done in

400
00:22:20.310 --> 00:22:23.370
Netscape timeframe. And we created
this thing called a field

401
00:22:23.370 --> 00:22:27.120
dictionary and field dictionaries, that
names, names, and values and

402
00:22:27.120 --> 00:22:30.810
links to other field dictionaries.
It was Jason. We just

403
00:22:30.810 --> 00:22:34.890
didn't know it until 13,
13 years later. And we

404
00:22:34.890 --> 00:22:36.930
go, Oh, you know, we,
we kind of, you know,

405
00:22:36.930 --> 00:22:39.150
and when I say we
invented Jason, I mean that

406
00:22:39.150 --> 00:22:44.250
like jokingly, because everyone invented
Jason, everyone who used to

407
00:22:44.250 --> 00:22:47.880
pass hash tables of hash
tables around invented Jason, everybody.

408
00:22:47.880 --> 00:22:48.960
No, it was just one
of those things that just

409
00:22:48.960 --> 00:22:51.510
kind of came together. But
the brilliant thing about Jason

410
00:22:51.510 --> 00:22:56.190
was that there was no,
there is no marshaling of

411
00:22:56.190 --> 00:22:59.730
data from one format to
another, right? Because there's so

412
00:22:59.730 --> 00:23:02.010
many systems where you pull
something out of the database

413
00:23:02.010 --> 00:23:03.900
and you think about tables
and then you put it

414
00:23:03.900 --> 00:23:05.790
in an XML and then
you shove it across the

415
00:23:05.790 --> 00:23:08.070
wire and then you turn
it into JavaScript and then

416
00:23:08.070 --> 00:23:10.050
you mess around with it.
Then you reverse the process.

417
00:23:10.050 --> 00:23:14.460
And these multiple transitions are
such an uncomfortable thing. So

418
00:23:14.460 --> 00:23:17.100
now if we can figure
out what the quickest way

419
00:23:17.100 --> 00:23:19.710
to get data out of
a data story, whether it

420
00:23:19.710 --> 00:23:24.210
be Mongo or Raven or
SQL server or whatever, get

421
00:23:24.210 --> 00:23:27.300
it into Jason and a
format projected. Cause I mean,

422
00:23:27.300 --> 00:23:29.070
all of these things like
Sinatra, these are all just

423
00:23:29.070 --> 00:23:33.210
projections of Jason out onto
the wire, do some stuff

424
00:23:33.210 --> 00:23:36.480
on the client with something
like knockout JS or jQuery

425
00:23:36.480 --> 00:23:38.970
plus templates, and then bring
it back. You've got a

426
00:23:38.970 --> 00:23:42.690
really lightweight, a three tier
application right there. Yeah. And

427
00:23:42.720 --> 00:23:46.670
definitely, and even beyond just
going JavaScript, it does great

428
00:23:46.670 --> 00:23:50.750
with mobile. And you know,
for me, that's, that's the

429
00:23:50.750 --> 00:23:52.910
big, the biggest thing. Like
I kind of pride myself

430
00:23:52.910 --> 00:23:57.020
on being a full stack.
If you will programmer kind

431
00:23:57.020 --> 00:24:00.860
of having an understanding of
the database, the web services

432
00:24:00.860 --> 00:24:02.600
layer all the way to
the UI. And for me,

433
00:24:02.600 --> 00:24:05.030
that's mobile and chase on
is definitely the way to

434
00:24:05.030 --> 00:24:09.710
go over XML, particularly on
the iPhone. It's much easier

435
00:24:09.710 --> 00:24:12.970
to parse. What do you
use for parsing Jason on

436
00:24:12.970 --> 00:24:16.090
a jason.net in the dotnet
space? Or what do you

437
00:24:16.090 --> 00:24:17.620
use for parsing your days?
Cause this is about four

438
00:24:17.620 --> 00:24:21.550
or five. Jason, sir. Yeah.
I've actually had pretty good,

439
00:24:22.870 --> 00:24:27.010
pretty good mileage with a
library called lit Jason. It's

440
00:24:27.010 --> 00:24:30.160
pretty, pretty simple. And it's
kind of has like a

441
00:24:30.160 --> 00:24:37.150
whole Lexar and all this
complicated linguistical Parsi stuff. Yeah.

442
00:24:37.150 --> 00:24:39.460
This isn't, it's written in
C sharp. Yeah. Pure C

443
00:24:39.490 --> 00:24:42.670
sharp. Cool. And it's pretty
cool. My one beef with

444
00:24:42.670 --> 00:24:48.100
it is that it's not
evented so I couldn't, you

445
00:24:48.100 --> 00:24:49.870
know, kind of do it
in a, in an unbuffered

446
00:24:49.870 --> 00:24:52.420
way. I have to buffer
the entire Jason, you know,

447
00:24:52.420 --> 00:24:55.570
request or response in memory,
you know, before I can

448
00:24:55.570 --> 00:24:58.390
parse it or output it,
it's all gonna be hanging

449
00:24:58.390 --> 00:25:00.190
around in memory. So it's
kind of a Dom, it's

450
00:25:00.190 --> 00:25:01.510
got to hold it there
for a second before it

451
00:25:01.510 --> 00:25:05.140
does. Right. Exactly. And there's
this, there's the C library

452
00:25:05.140 --> 00:25:08.240
called the agile yet another
Jason library. And it's actually

453
00:25:08.240 --> 00:25:10.960
an vented Jason parser. And
one of these days I'm

454
00:25:10.960 --> 00:25:13.420
hoping me or somebody is
going to get around to

455
00:25:13.450 --> 00:25:16.600
writing P invoke bindings for
that and getting it on.net.

456
00:25:16.600 --> 00:25:18.790
Cause I would just be
awesome. So let me ask

457
00:25:18.790 --> 00:25:21.430
you this as an open
source developer, as someone who

458
00:25:21.430 --> 00:25:24.430
is got your fingers in
a lot of different pies,

459
00:25:25.750 --> 00:25:29.920
there's something like 3 million C
sharp developers untold millions of

460
00:25:29.920 --> 00:25:33.880
visual, basic developers, right. We're
talking about millions, but for

461
00:25:33.880 --> 00:25:37.360
libraries like, like kayak and
all these different libraries, it

462
00:25:37.360 --> 00:25:40.840
seems like there's always just
thousands. What is it going

463
00:25:40.840 --> 00:25:44.380
to take for the.net community
to embrace some of these

464
00:25:44.380 --> 00:25:47.530
libraries in the hundreds of
thousands or millions and you

465
00:25:47.530 --> 00:25:49.330
know, what can Microsoft do
to make sure that that

466
00:25:49.810 --> 00:25:51.220
kind of happens? You know
what I'm saying? Kind of

467
00:25:51.220 --> 00:25:54.160
take it to the next
level. Is it just awareness

468
00:25:54.190 --> 00:25:56.110
or do we, do we
have to build this stuff

469
00:25:56.140 --> 00:25:59.230
in before people get it?
Because you know, sometimes Microsoft

470
00:25:59.590 --> 00:26:02.170
gets people mad because of
the, you know, they'll take

471
00:26:02.170 --> 00:26:04.970
an idea they'll, you know,
they embrace and extend or

472
00:26:04.970 --> 00:26:07.980
embrace and ship or whatever.
Right. But like as a,

473
00:26:07.980 --> 00:26:09.970
as a developer of kayak,
let's give that example. Right.

474
00:26:10.000 --> 00:26:12.160
What's success look like to
you, is it just that,

475
00:26:12.190 --> 00:26:14.080
Hey, I use it or
do you want like a

476
00:26:14.080 --> 00:26:18.010
jQuery level of success where
everyone uses it? I mean,

477
00:26:18.010 --> 00:26:21.430
that would certainly be nice.
I think kayak is, is

478
00:26:21.430 --> 00:26:25.730
going to be a little
bit more kind of obscure

479
00:26:25.750 --> 00:26:28.510
up to, so if you
will then say jQuery, but

480
00:26:28.510 --> 00:26:32.710
certainly I think that there
is, there is there's a

481
00:26:32.710 --> 00:26:34.360
land grab here to be
had. I mean, there's a

482
00:26:34.360 --> 00:26:36.190
lot, there's a couple other
guys on the list here

483
00:26:36.190 --> 00:26:38.950
that have, you know, sort
of competing if you will

484
00:26:38.950 --> 00:26:43.650
implementations. So I think that
it would really be, if,

485
00:26:44.280 --> 00:26:46.440
you know, there's just like
a community of, you know,

486
00:26:46.470 --> 00:26:50.220
maybe a few, few thousand
users who are sort of

487
00:26:50.220 --> 00:26:52.530
have the more technical bent
and can get in there

488
00:26:52.710 --> 00:26:56.550
and, you know, build stacks
up for themselves based on

489
00:26:56.550 --> 00:27:00.180
kayak and, you know, really
make it make the custom

490
00:27:00.390 --> 00:27:04.110
web stack that they really
want out of life. That

491
00:27:04.110 --> 00:27:06.560
I think is, is the
ultimate goal for me. Is

492
00:27:06.560 --> 00:27:08.360
that the, is that the
split though? Because I mean,

493
00:27:08.360 --> 00:27:10.010
I think there may be
people who are listening to

494
00:27:10.010 --> 00:27:12.410
the show who might say,
well, I just want to

495
00:27:12.410 --> 00:27:14.390
use the stuff that's going
to be supported, or I

496
00:27:14.390 --> 00:27:16.070
just want to kind of
get her done. You know,

497
00:27:16.070 --> 00:27:19.070
they, they want to use
the stuff that Microsoft ships,

498
00:27:19.580 --> 00:27:22.580
how do we get those
people excited and feel just

499
00:27:22.580 --> 00:27:26.150
excited. I think a better
word would be empowered unafraid

500
00:27:26.150 --> 00:27:27.620
to go out and say,
you know, I am going

501
00:27:27.620 --> 00:27:29.840
to own my own stack
because the issue is that

502
00:27:29.840 --> 00:27:32.210
some developers might have some
business problem that they want

503
00:27:32.210 --> 00:27:34.610
to solve, like insurance or
healthcare or whatever they're in.

504
00:27:34.610 --> 00:27:37.340
Right. And like he might
say, Hey, I do health

505
00:27:37.340 --> 00:27:41.240
insurance. I don't care about
an HTTP parser in C-sharp,

506
00:27:42.470 --> 00:27:44.570
but they may find that
they may have more fun

507
00:27:44.570 --> 00:27:46.460
and be more productive if
they in fact kind of

508
00:27:46.460 --> 00:27:48.140
get off the beaten path
a little bit and try

509
00:27:48.140 --> 00:27:50.300
something different. Where do you
think this will always be

510
00:27:50.300 --> 00:27:54.260
niche? And the bright line
is someone who wants to

511
00:27:54.290 --> 00:27:56.780
work on his own car
in his garage versus someone

512
00:27:56.780 --> 00:27:59.570
who just takes this car
into the shop. Right? Yeah.

513
00:27:59.960 --> 00:28:02.780
Well, for me, it's definitely
been, and like I said

514
00:28:02.900 --> 00:28:06.260
earlier in architectural playground and
I definitely need to clean

515
00:28:06.260 --> 00:28:09.650
it up a little bit,
but I think really the

516
00:28:09.650 --> 00:28:12.320
power here in this, in
this space, it's not so

517
00:28:12.320 --> 00:28:17.480
much kayak specifically, but the
Owen specification itself. So with

518
00:28:17.480 --> 00:28:19.820
that, you know, it doesn't
matter if you want to

519
00:28:19.820 --> 00:28:22.340
use kayak or if somebody
else comes along and writes

520
00:28:22.460 --> 00:28:25.430
something that's way better and
way faster than kayak. Or

521
00:28:25.490 --> 00:28:28.250
if someone wants to get,
you know, a wrapper around

522
00:28:28.280 --> 00:28:30.350
IIS or whatever, they can
do that. Or if they

523
00:28:30.350 --> 00:28:33.620
want to make their own
framework that Karen run on

524
00:28:33.620 --> 00:28:35.420
any of those servers, then
all they have to do

525
00:28:35.420 --> 00:28:40.370
is implement against Owen. And,
and there, there you have

526
00:28:40.370 --> 00:28:43.850
it, you know, that enables
you portability of your applications,

527
00:28:43.850 --> 00:28:48.920
composability of your middleware, just
this whole, this whole smattering

528
00:28:48.920 --> 00:28:51.020
of great of great new
things, which I feel like

529
00:28:51.050 --> 00:28:54.350
we just haven't seen in
dot.net yet. Yeah. I think

530
00:28:54.350 --> 00:28:57.080
it would be nice if
we get some kind of

531
00:28:57.080 --> 00:28:59.540
a specification like this that
describes, like we said, the,

532
00:28:59.570 --> 00:29:03.200
the size of the Lego,
nubbins such that we can

533
00:29:03.200 --> 00:29:07.940
kind of stop copying from
other frameworks. And rather than

534
00:29:07.940 --> 00:29:10.760
us having Frank and Nancy
Sinatra, we come up with

535
00:29:10.760 --> 00:29:12.620
something of our own and
then we watch the other

536
00:29:12.620 --> 00:29:15.080
guys go and implement it,
you know? Yeah. That would

537
00:29:15.080 --> 00:29:18.410
be great. I would love
to see that. Yeah. Well,

538
00:29:18.410 --> 00:29:20.390
cool. Well, I'm glad that
you're putting together pieces like

539
00:29:20.390 --> 00:29:23.300
this with your, with your
group. And then we'll put

540
00:29:23.300 --> 00:29:25.550
links on the show notes
to all of these things.

541
00:29:25.550 --> 00:29:27.500
So that folks who are
listening, who may be interested

542
00:29:27.500 --> 00:29:30.680
in this level of specification
creation, get involved in Owen

543
00:29:30.680 --> 00:29:33.890
and join in the discussion.
Great. Yeah, we're actually that,

544
00:29:33.950 --> 00:29:35.660
that would be really great.
We're looking for your as

545
00:29:35.660 --> 00:29:39.440
much input from as many
different use cases, users as

546
00:29:39.440 --> 00:29:43.900
possible. And I'm hoping To
get this specification pretty much

547
00:29:43.930 --> 00:29:45.910
nailed down here in the
next week or so, and

548
00:29:45.910 --> 00:29:49.300
then just start testing and
start implementing and start getting

549
00:29:49.300 --> 00:29:52.120
some buzz around it and
getting people using it more

550
00:29:52.350 --> 00:29:56.890
in the real, real world.
Very exciting. All right. Well,

551
00:29:56.890 --> 00:29:59.710
this has been another episode
of Hansel minutes. We'll see

552
00:29:59.710 --> 00:30:00.760
you again next week.

