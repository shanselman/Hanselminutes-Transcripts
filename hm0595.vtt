WEBVTT FILE

1
00:00:00.330 --> 00:00:03.480
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.480 --> 00:00:06.450
they make the show possible.
Today's show is sponsored by

3
00:00:06.450 --> 00:00:10.620
developer express, become a UI
superhero with dev express controls

4
00:00:10.620 --> 00:00:15.150
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.540 --> 00:00:19.620
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.650 --> 00:00:23.730
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.850 --> 00:00:45.500
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
<inaudible>. Hi, this is Scott

8
00:00:45.500 --> 00:00:47.960
Hanselman. This is another episode
of Hansel minutes today. I'm

9
00:00:47.960 --> 00:00:51.140
talking with Jeremy Miller. How are
you sir? Doing well? How

10
00:00:51.140 --> 00:00:54.650
about yourself? I am lovely.
We've known each other for

11
00:00:55.280 --> 00:01:00.920
many years. I want to
say 15, at least 10,

12
00:01:01.070 --> 00:01:04.520
10 a long time. You've
been in the dotnet community

13
00:01:04.520 --> 00:01:06.560
for a long time. You've
been in other open source

14
00:01:06.560 --> 00:01:09.920
communities. You've been creating open
source. Gosh, as long as

15
00:01:09.920 --> 00:01:14.300
anybody I know in our
community. And I know recently

16
00:01:14.300 --> 00:01:19.970
you released storyteller 4.0, which
was a long running project

17
00:01:19.970 --> 00:01:23.420
that you had for doing
human readable executable specifications in

18
00:01:23.420 --> 00:01:26.810
dotnet. So congratulations on storyteller
four point. Oh, thank you.

19
00:01:28.130 --> 00:01:30.800
I understand though, that you
are trying something else out.

20
00:01:30.800 --> 00:01:33.440
You've got another new open
source project that you're helping

21
00:01:33.440 --> 00:01:36.560
out with. Well, so it's
a couple of years in,

22
00:01:37.250 --> 00:01:40.880
but we have, and we
have a pretty nice community

23
00:01:40.880 --> 00:01:44.510
around it. Working on a
project called Martin with a,

24
00:01:44.510 --> 00:01:47.690
with an E named after
the little weasel, like animal

25
00:01:48.080 --> 00:01:53.630
that allows dotnet developers to
treat the Postgres QL database

26
00:01:53.630 --> 00:01:57.200
as a document data store
and an event store as

27
00:01:57.200 --> 00:02:00.140
well. Interesting. Okay. So let's
parse that out a little

28
00:02:00.140 --> 00:02:03.950
bit. Postgres right now has
a lot of people excited.

29
00:02:03.950 --> 00:02:06.170
Why, what is it about
Postgres SQL that has people

30
00:02:06.170 --> 00:02:10.220
talking well? So it was
hard to beat the it's

31
00:02:10.220 --> 00:02:13.130
hard to beat the free
and open source model, but

32
00:02:13.130 --> 00:02:16.970
a Postgres comes with a
lot of, I would say,

33
00:02:16.970 --> 00:02:22.100
unusual features that you don't
necessarily see. And a lot

34
00:02:22.100 --> 00:02:26.150
of other databases for us,
it was the very strong

35
00:02:26.210 --> 00:02:30.200
Jason and, and the binary,
Jason data types and data

36
00:02:30.200 --> 00:02:35.420
operators being able to run
JavaScript inside the database. Other

37
00:02:35.420 --> 00:02:39.740
people like it for the,
for the geo API guys

38
00:02:39.800 --> 00:02:44.150
and a lot of other
strange things. So with one

39
00:02:44.150 --> 00:02:49.400
database engine, you can be
using PostgreSQL as, you know,

40
00:02:49.460 --> 00:02:52.160
regular relational database. You can
be using as a key

41
00:02:52.160 --> 00:02:55.760
value store. You can be
doing Jason, making a document

42
00:02:55.760 --> 00:03:01.060
database all with one installation.
Yeah, It's a, it feels

43
00:03:01.060 --> 00:03:04.220
like even it's like the,
a overnight success in, in,

44
00:03:04.220 --> 00:03:07.000
in 10 or 20 years.
Like I remember a couple

45
00:03:07.000 --> 00:03:09.490
of years back looking at
Postgres and maybe finding it

46
00:03:09.490 --> 00:03:11.440
a little bit wanting. And
I know a lot of

47
00:03:11.440 --> 00:03:14.500
people have looked at Postgres
and compared it to SQL

48
00:03:14.500 --> 00:03:16.930
server, and you've got, you
know, SQL server, this kind

49
00:03:16.930 --> 00:03:20.560
of big, a closed source
product that people pay money

50
00:03:20.560 --> 00:03:24.050
for. And, and the Postgres
is just chugging along. And

51
00:03:24.110 --> 00:03:26.020
I feel like in the
last year or two people

52
00:03:26.020 --> 00:03:29.740
have been like, wow, you
can really possibly replace SQL

53
00:03:29.740 --> 00:03:33.580
servers with Postgres and tickets
in directions, SQL server. Won't

54
00:03:33.580 --> 00:03:37.200
go. I, and that's what
it was for us. We're

55
00:03:37.230 --> 00:03:40.800
traditionally a SQL server shop
and people use it more

56
00:03:40.800 --> 00:03:43.680
than not, but any place
where we want to go,

57
00:03:43.950 --> 00:03:46.890
we'd rather use a document
database where we're going down

58
00:03:46.890 --> 00:03:50.700
the path of using Postgres
now. So you're totally happy

59
00:03:50.700 --> 00:03:54.360
with Postgres, but what is
Martin on top of that?

60
00:03:54.360 --> 00:03:56.910
Why can't I just use
any RM and throw it

61
00:03:56.910 --> 00:04:00.210
on top of Postgres and
keep going? Well, you absolutely

62
00:04:00.210 --> 00:04:05.340
can. Entity framework targets Postgres.
So you're, you're off and

63
00:04:05.340 --> 00:04:09.120
running with that. What a
document database does is it

64
00:04:09.120 --> 00:04:12.060
allows you to just take
an object and really in

65
00:04:12.060 --> 00:04:15.900
this case, we're just serializing
it to Jason and sticking

66
00:04:15.900 --> 00:04:19.860
it directly into the database.
So it gives you the

67
00:04:19.860 --> 00:04:23.640
ability to almost be schemeless
except your schema just reflects

68
00:04:23.640 --> 00:04:28.170
whatever your objects are. So
you don't spend a lot

69
00:04:28.170 --> 00:04:31.500
of time working on ORM
mappings. You don't have to

70
00:04:31.500 --> 00:04:36.930
wrestle with stuff like table
per table, per subclass, or

71
00:04:36.960 --> 00:04:42.450
polymorphism, or a whole, any
other issue you hit trying

72
00:04:42.450 --> 00:04:45.450
to use a heavy RM
like Eddy framework and hibernate

73
00:04:45.810 --> 00:04:49.860
with Martin, change your object.
And it just works as

74
00:04:49.860 --> 00:04:52.710
long as it's Sarah analyzable.
So let me try to

75
00:04:52.710 --> 00:04:54.660
understand this a little bit,
and I'll ask a couple

76
00:04:54.660 --> 00:04:58.380
of ignorant questions. So Postgres,
and again, I might be

77
00:04:58.380 --> 00:05:01.230
wrong, but so correct me.
It's not an object database,

78
00:05:01.230 --> 00:05:03.150
is it, is it intended
to be it's an it's

79
00:05:03.150 --> 00:05:08.220
a relationship? No, it's not.
We're, we're very heavily utilizing

80
00:05:08.220 --> 00:05:13.170
and kind of hijacking their
Jaison support. So they have

81
00:05:13.170 --> 00:05:17.700
a slightly different type of
Jason type called Jason B

82
00:05:17.700 --> 00:05:22.290
for binary, Jason. So you're
storing an already parsed out

83
00:05:23.520 --> 00:05:29.370
document structure in the database.
So it's pretty, pretty efficient

84
00:05:29.370 --> 00:05:33.060
to query against that and
even pull out and do

85
00:05:33.060 --> 00:05:38.160
things like, like select transforms.
So that that's what enables

86
00:05:38.160 --> 00:05:42.120
us to even put a
link provider on top of

87
00:05:42.150 --> 00:05:45.270
Postgres, where all your data
is really being stored as

88
00:05:45.270 --> 00:05:52.650
Jason blobs. If you are
taking Postgres and hijacking or

89
00:05:53.070 --> 00:05:56.760
piggybacking on top of some
feature that they have in

90
00:05:56.760 --> 00:06:00.320
order to it into a
document database, at what point

91
00:06:00.500 --> 00:06:04.280
during this development of this,
this a product, are you

92
00:06:04.280 --> 00:06:06.620
thinking maybe I'm pushing this
database in a way that

93
00:06:06.620 --> 00:06:08.750
it's not meant to be
used or just generally using

94
00:06:08.750 --> 00:06:10.100
it in a way it's
not meant to be used.

95
00:06:10.490 --> 00:06:12.710
And when does it go
from proof of concept to

96
00:06:12.710 --> 00:06:16.480
like, wow, we can actually
do this. Well, I would,

97
00:06:16.870 --> 00:06:18.850
I would argue that we're
there and we'd better be

98
00:06:18.850 --> 00:06:22.060
there because my shop has
Martin in production and in

99
00:06:22.120 --> 00:06:27.250
our biggest applications so Long
to figure that out or

100
00:06:27.250 --> 00:06:29.230
do we, like, it seems,
it almost seems like, let's

101
00:06:29.230 --> 00:06:30.850
see if this works. I'm
like, wow, this actually, yeah.

102
00:06:31.480 --> 00:06:37.180
So it took about nine
months from inception to starting

103
00:06:37.180 --> 00:06:40.210
to use it on our
projects. And I think, I

104
00:06:40.210 --> 00:06:42.970
think some other people in
the Martin community were using

105
00:06:42.970 --> 00:06:47.320
it in production. Well, before
we were. So it took

106
00:06:47.380 --> 00:06:50.290
just a couple months to
get the proof of concept,

107
00:06:50.290 --> 00:06:55.630
being able to load and
load and save document types.

108
00:06:55.810 --> 00:06:59.530
It's taking two years and
counting to build up a

109
00:06:59.530 --> 00:07:03.610
kind of a Crete enough
link support to be useful.

110
00:07:03.670 --> 00:07:09.190
And I'm really some of
our biggest challenges haven't necessarily

111
00:07:09.190 --> 00:07:12.160
been the link or the
basic documents. It's things you

112
00:07:12.160 --> 00:07:20.620
wouldn't necessarily expect. Schema migrations,
just places where Jason versus

113
00:07:20.620 --> 00:07:27.400
the.net type system doesn't play
too nice. Okay. So let's,

114
00:07:27.670 --> 00:07:30.250
let's reset to zero and
think about this for people

115
00:07:30.250 --> 00:07:33.310
who maybe haven't even worked
with a document database before,

116
00:07:33.670 --> 00:07:36.880
if I've got a customer
object and it's got all

117
00:07:36.880 --> 00:07:38.620
kinds of things like first
name and last name and

118
00:07:38.620 --> 00:07:42.160
address and whatnot. Typically I'm
going to spread that across

119
00:07:42.160 --> 00:07:43.900
a bunch of different tables,
and I'm going to have

120
00:07:43.900 --> 00:07:49.390
to maintain that fidelity or
lack of fidelity between how

121
00:07:49.390 --> 00:07:52.270
the database decides to store
that object as it gets

122
00:07:52.270 --> 00:07:54.040
broken apart. And how I
like to think about it

123
00:07:54.040 --> 00:07:59.380
as a.net person and the
document database world. The ideal

124
00:07:59.380 --> 00:08:00.940
is just that I have
a customer database and I

125
00:08:00.940 --> 00:08:03.850
throw it at an end
point and it serializes. And

126
00:08:03.850 --> 00:08:07.360
I bring it back. If
I'm serializing it as Jason,

127
00:08:07.450 --> 00:08:09.370
then I have to deal
with, like you just said,

128
00:08:09.430 --> 00:08:12.640
the, the fidelity or lack
of fidelity as you serialize

129
00:08:12.670 --> 00:08:15.490
C-sharp to Jason, isn't that
a solved problem? Don't don't

130
00:08:15.490 --> 00:08:18.370
we aren't, we able to
have full fidelity back and

131
00:08:18.370 --> 00:08:21.970
forth between Jason and poco
or plain old CLR objects.

132
00:08:22.630 --> 00:08:26.500
You, it, and some of
it depends on how far

133
00:08:26.500 --> 00:08:30.760
you really want to customize
your Newton's off settings. But

134
00:08:31.420 --> 00:08:36.100
yeah, as long as your
object is completely serialized, double

135
00:08:36.280 --> 00:08:41.320
it, that might make you,
cause you to relax some

136
00:08:41.320 --> 00:08:47.170
of the, the scoping rules,
but maybe not. So yes,

137
00:08:47.410 --> 00:08:50.560
the, the database, what store
do the database just reflects

138
00:08:50.560 --> 00:08:56.130
your objects? Okay. So if
I'm oversimplifying this, someone says

139
00:08:56.340 --> 00:08:59.100
I'm going to go from
a table called customer with

140
00:08:59.730 --> 00:09:03.570
10 columns, and now I'm
going to have a table

141
00:09:03.570 --> 00:09:05.520
called customer, and I'm just
going to have a blob

142
00:09:05.520 --> 00:09:08.130
and I'm going to throw
Jason in there. They're going

143
00:09:08.130 --> 00:09:11.490
to think, well, now the
database can't introspect into that,

144
00:09:11.490 --> 00:09:15.990
can't see into that can't
index last name. How does

145
00:09:15.990 --> 00:09:19.370
that work? Okay, so let's,
let's talk about that one.

146
00:09:19.610 --> 00:09:23.300
So all of that is
actually possible. It is possible

147
00:09:23.300 --> 00:09:27.350
to search within the, the
Jaison blob, but especially if

148
00:09:27.350 --> 00:09:30.800
you're using the Jason B
type in Postgres, it's quite

149
00:09:30.800 --> 00:09:34.520
a bit more efficient beyond
that. So Martin gives you

150
00:09:34.520 --> 00:09:39.200
a couple, couple of capabilities
for indexing. If you really

151
00:09:39.200 --> 00:09:42.860
want to, the older option
we did originally is you

152
00:09:42.860 --> 00:09:45.890
can have something called, we
call it duplicated field. So

153
00:09:45.890 --> 00:09:49.910
you can designate a property
or field as I want

154
00:09:49.910 --> 00:09:52.580
a separate column for this,
that duplicates the data of

155
00:09:52.580 --> 00:09:55.520
the Jason B. And then
I'm going to index that.

156
00:09:55.820 --> 00:09:59.120
And the link support is
smart enough to opt into

157
00:09:59.120 --> 00:10:02.840
that as it needs, needs
to. But one of the

158
00:10:02.870 --> 00:10:07.520
cool Postgres specific features, I
don't know of existing in

159
00:10:07.520 --> 00:10:12.770
any other database, we can
create a calculated indexes on

160
00:10:12.800 --> 00:10:17.210
Jason B expressions. So we
have a syntax in Martin

161
00:10:17.210 --> 00:10:19.400
when you're configuring, this is,
this is what are my

162
00:10:19.400 --> 00:10:24.690
storage to be. So say
it's a, it's a customer,

163
00:10:24.710 --> 00:10:28.730
a customer class, and it
has a blast name property.

164
00:10:29.300 --> 00:10:33.650
So you could use a
little link expression to say,

165
00:10:34.640 --> 00:10:39.320
I want to index on
X dot last name and

166
00:10:39.320 --> 00:10:43.910
have a type safe way
of expressing. I want an

167
00:10:43.910 --> 00:10:47.690
index on this because that's
what I'm searching, searching for

168
00:10:48.260 --> 00:10:52.940
behind the scenes, Martins tackling
the Postgres specific syntax and

169
00:10:52.940 --> 00:10:58.220
creating a database, a index
for you. Oh, okay. So

170
00:10:58.340 --> 00:11:01.670
Postgres had the ability to
put Jason in it for

171
00:11:01.670 --> 00:11:04.790
a while. And then with,
with 9.2, they kind of

172
00:11:04.790 --> 00:11:07.790
made it more native and
then 9.4 allowed you to

173
00:11:07.790 --> 00:11:10.520
put binary Jason. So just
to be clear, it's what

174
00:11:10.520 --> 00:11:14.240
people understand. You're not just
sticking a string of Jason

175
00:11:14.240 --> 00:11:17.000
in there. You're you may
be sending that to Postgres,

176
00:11:17.000 --> 00:11:19.310
but it is storing it
in a Jason B or

177
00:11:19.310 --> 00:11:22.880
binary format, which, you know,
strips out the white space

178
00:11:22.880 --> 00:11:28.400
and packs it up. Right,
Exactly. And on top of

179
00:11:28.400 --> 00:11:31.430
that, if you, if you
get in a situation where

180
00:11:31.430 --> 00:11:33.440
you need to do a
lot of ad hoc, querying

181
00:11:33.770 --> 00:11:37.430
like user, user supplied, querying,
or something, where you have

182
00:11:37.430 --> 00:11:42.380
a lot of options, there's
another index type that some

183
00:11:42.380 --> 00:11:46.010
of our users use gin
index. And I don't remember

184
00:11:46.010 --> 00:11:49.550
what it stands for, but
it creates a more generic

185
00:11:49.940 --> 00:11:53.770
index all the way across
the Jason document. They'll slow

186
00:11:53.770 --> 00:11:57.370
down your inserts and your
rights, but it'll speed up

187
00:11:57.370 --> 00:12:01.680
your reads if you're doing
a lot of querying. And

188
00:12:01.680 --> 00:12:07.020
that, that is G I
N yes. Okay. So these,

189
00:12:07.040 --> 00:12:11.100
these gin index and this,
the ability to do this

190
00:12:11.130 --> 00:12:13.890
makes that a little bit
slow, like you said, because

191
00:12:13.890 --> 00:12:16.590
it's an inverted index, but
it makes things faster to

192
00:12:16.590 --> 00:12:21.060
query. Yeah. Slow writes, but
faster reads so that you've

193
00:12:21.060 --> 00:12:25.290
got some tools, you've got
some traditional database like tools

194
00:12:25.290 --> 00:12:30.510
to optimize your storage to
what you need. Okay. So

195
00:12:30.510 --> 00:12:34.770
once you've used these, these
gin indexes, and you can

196
00:12:34.770 --> 00:12:40.500
start a gen means generalized
inverted index turns out, then

197
00:12:40.500 --> 00:12:44.460
you can query within that
data. So typically in you're

198
00:12:44.460 --> 00:12:47.220
writing the SQL manually, if
you're talking directly to the

199
00:12:47.220 --> 00:12:50.280
database, so you'll do, you
know, select star from and

200
00:12:50.280 --> 00:12:53.340
all that kind of stuff,
except you can use Jason

201
00:12:53.370 --> 00:12:58.350
operators to dig into that.
How does Martin express or

202
00:12:58.350 --> 00:13:04.200
project into those more Jason
specific queries? Okay. So this,

203
00:13:04.200 --> 00:13:08.040
this was a little bit
unpleasant. So you do have

204
00:13:08.040 --> 00:13:11.460
an option. You can just
feed it, feed it, basically

205
00:13:11.460 --> 00:13:15.480
a where clause yourself, if,
if you need to do

206
00:13:15.480 --> 00:13:19.470
something special, but otherwise we
have a custom link link

207
00:13:19.470 --> 00:13:23.640
provider as part of Martin
that doesn't cover every possible

208
00:13:23.640 --> 00:13:27.830
use case because you never
do, but it reads your,

209
00:13:27.830 --> 00:13:32.400
your normal link where expressions
and select expressions and order

210
00:13:32.400 --> 00:13:37.380
by and all that goodness.
And behind the scenes that

211
00:13:37.620 --> 00:13:42.480
turns into the Postgres Jason
operators. And that's, if you're,

212
00:13:42.480 --> 00:13:46.650
if you're dear listener, if
you're listening to this and

213
00:13:46.650 --> 00:13:49.530
you think I, I want
to do a library like

214
00:13:49.530 --> 00:13:53.460
this for myself. That's, that's
one of the hardest parts

215
00:13:53.460 --> 00:13:58.080
of doing something like Martin
was translating from dotnet expressions

216
00:13:58.080 --> 00:14:03.210
to the Postgres operators. Well,
there is a.net project called

217
00:14:03.330 --> 00:14:08.430
NPG sql.net access to Postgres.
What does Martin sit on

218
00:14:08.430 --> 00:14:11.580
top of and, and how
many layers are there? So

219
00:14:11.580 --> 00:14:14.610
Martin sits on just like
you said, Martin sits on

220
00:14:14.610 --> 00:14:20.160
MPG SQL. So that's your
ado.net provider for.net. So we

221
00:14:20.160 --> 00:14:24.450
sit on top of that.
There's a small utility library

222
00:14:25.200 --> 00:14:30.330
called baseline to the normal
junk drawer of extension methods

223
00:14:30.960 --> 00:14:35.280
and not many other things.
Does he use a TPL

224
00:14:35.280 --> 00:14:39.510
data flow for some of
the events store? So this

225
00:14:39.510 --> 00:14:42.150
isn't a massive stack that
someone is going to necessarily

226
00:14:42.150 --> 00:14:44.760
have to feel like they're
buying into. It's really a

227
00:14:44.760 --> 00:14:48.780
very tight, a tight layer.
It's almost meant to be

228
00:14:48.780 --> 00:14:51.500
all one thing. You're going
to think about post. You're

229
00:14:51.500 --> 00:14:53.690
going to start to think
about Postgres as a real

230
00:14:53.690 --> 00:14:59.200
document database and maybe even
an event store. Yes. So

231
00:15:00.280 --> 00:15:03.400
we felt originally while my
shop thought that we had

232
00:15:03.400 --> 00:15:06.910
a usage for the event
store and we had several

233
00:15:06.910 --> 00:15:10.150
years ago, we'd done a
spike on using Postgres to

234
00:15:10.150 --> 00:15:14.230
the event store. So we
threw it in there and

235
00:15:14.680 --> 00:15:17.170
other people from the Martin
community have picked it up

236
00:15:17.170 --> 00:15:20.530
and used it much more
than I have. But so

237
00:15:20.530 --> 00:15:23.230
we have an event store
the Jason B type. Again,

238
00:15:23.290 --> 00:15:26.140
it's a very convenient way
to store the events, but

239
00:15:26.140 --> 00:15:31.120
pinned only the big thing,
Martin ads there on top

240
00:15:31.120 --> 00:15:34.660
of that is we have
built in projections. So you

241
00:15:34.660 --> 00:15:37.660
can define how, how I
take in events. And then

242
00:15:37.660 --> 00:15:41.950
how that turns into a
REIT side read side views,

243
00:15:42.280 --> 00:15:46.210
where the read side views
are just Martin documents. So

244
00:15:46.540 --> 00:15:49.720
say you have a, some
kind of invoicing event store,

245
00:15:49.930 --> 00:15:54.640
you know, getting things like
invoice created, invoice, approved, whatever

246
00:15:54.640 --> 00:15:57.580
it's going to be. The
events come streaming in. And

247
00:15:57.580 --> 00:15:59.950
as the events are coming,
coming in, you've got a

248
00:15:59.950 --> 00:16:06.220
couple different hooks. You can
create projections that will store

249
00:16:06.520 --> 00:16:10.810
either synchronously or, or off
to the side. A read

250
00:16:10.810 --> 00:16:14.560
side view of this is
exactly what the invoice is

251
00:16:14.620 --> 00:16:19.390
by kind of compiling all,
all the events. Maybe you

252
00:16:19.390 --> 00:16:21.910
could say a little something
about event sourcing for people

253
00:16:21.910 --> 00:16:25.420
who aren't familiar with it.
Sure, sure, sure. Sorry. So

254
00:16:26.350 --> 00:16:28.480
at least, at least as
I was growing up doing

255
00:16:28.480 --> 00:16:33.040
software development, you had a
single model where you wrote

256
00:16:33.040 --> 00:16:35.320
to the database, maybe it's
this domain model in your

257
00:16:35.320 --> 00:16:39.310
system where you might've had
an invoice class and as

258
00:16:39.310 --> 00:16:43.930
operations come in, you would
modify that invoice object and

259
00:16:43.960 --> 00:16:48.010
persist it back down. So
you always had the current

260
00:16:48.010 --> 00:16:51.190
view and that's really all
you had. Maybe you had

261
00:16:51.190 --> 00:16:55.390
some, some extra auditing stuff
behind the scenes with event

262
00:16:55.390 --> 00:16:59.740
store. The first class citizen
on rights is you bring

263
00:16:59.740 --> 00:17:03.430
in the events themselves. So
instead of modeling a big

264
00:17:03.460 --> 00:17:08.080
invoice domain model object, you
take in a little, little

265
00:17:08.080 --> 00:17:11.170
events that model things like
the invoice was created on

266
00:17:11.170 --> 00:17:14.680
this date. We added a
line item at this time.

267
00:17:15.940 --> 00:17:18.790
So it comes in sequentially
and it also comes in

268
00:17:18.790 --> 00:17:23.140
with probably some kind of
timestamp. So the challenge from

269
00:17:23.140 --> 00:17:28.240
doing that is how do
I through the application, how

270
00:17:28.240 --> 00:17:32.050
do I present to users
or make judgements on what

271
00:17:32.050 --> 00:17:35.320
is the current state of
the whole workflow? That's where

272
00:17:35.320 --> 00:17:39.880
the projection side comes in.
And with Martin the, on

273
00:17:39.880 --> 00:17:42.670
the positive note, the kinds
of things you can do,

274
00:17:42.670 --> 00:17:46.090
and Martin does support some
of this too, by having

275
00:17:46.300 --> 00:17:49.920
the timestamped events, you can
start to do things. See

276
00:17:49.920 --> 00:17:53.340
what was the state of
the world at five days

277
00:17:53.340 --> 00:17:57.030
ago? So you can replay
the events from the beginning

278
00:17:57.030 --> 00:18:01.980
to five days ago. So
the first, the first project

279
00:18:01.980 --> 00:18:05.070
I used event sourcing on
it was a system where

280
00:18:05.070 --> 00:18:10.710
we were trying to optimize
the workflow of anesthesiologists in

281
00:18:10.710 --> 00:18:15.840
a, in an operating room.
So tracking events of, you

282
00:18:15.840 --> 00:18:18.300
know, when was the doctor
present? When was the room

283
00:18:18.330 --> 00:18:21.570
open? When did the patient
get there? We could do

284
00:18:21.570 --> 00:18:26.070
some temporal acquiring and say,
what did the, the status

285
00:18:26.070 --> 00:18:29.550
of the operating room look
like at, at noon and

286
00:18:29.550 --> 00:18:33.810
then 1:00 PM and play that
forward and backwards to try

287
00:18:33.810 --> 00:18:37.050
to find out where did
things go wrong? Where did

288
00:18:37.050 --> 00:18:41.150
things go off? Okay. So
the, the idea, if I

289
00:18:41.150 --> 00:18:43.880
understand correctly, then that the
idea of event sourcing is

290
00:18:43.880 --> 00:18:48.950
that when some change of
state happens, that changes States

291
00:18:48.950 --> 00:18:52.010
captured in an event object,
and then you store those

292
00:18:52.010 --> 00:18:55.250
objects and then you can
store them in, in sequence

293
00:18:55.580 --> 00:18:57.770
so that you can, as
you just said, go back

294
00:18:57.770 --> 00:19:00.770
and forward in time and,
and capture the, the state

295
00:19:00.770 --> 00:19:05.450
of the system at any
moment. Exactly. So, I mean,

296
00:19:05.450 --> 00:19:08.150
one of the ways I
think about it, I, for

297
00:19:08.150 --> 00:19:11.450
our shop, I would try
to recommend event sourcing anywhere

298
00:19:11.450 --> 00:19:16.160
where you have a complicated
workflow, but any place where

299
00:19:16.160 --> 00:19:20.780
you need to have historical
query or maybe auditing of,

300
00:19:20.840 --> 00:19:22.820
you know, how long did
it, did we go from

301
00:19:22.820 --> 00:19:27.110
an invoice being created to
being approved? That's a very

302
00:19:27.110 --> 00:19:31.850
good fit for event sourcing.
Okay. So can I use

303
00:19:31.850 --> 00:19:35.120
event sourcing features of Martin
and Postgres at the same

304
00:19:35.120 --> 00:19:39.320
time as I'm doing the
object and document database? Yes,

305
00:19:39.680 --> 00:19:45.470
they, it's pretty seamless. So
when you're doing event capture,

306
00:19:45.800 --> 00:19:50.540
the, you can be at
the same time, you can

307
00:19:50.540 --> 00:19:55.340
be modifying or creating all
new documents while you're capturing

308
00:19:55.340 --> 00:19:57.800
events and do that all
within the same unit of

309
00:19:57.800 --> 00:20:00.920
work. So it all comes
in in the same transaction.

310
00:20:01.400 --> 00:20:06.110
The projected views that Martin
creates from your events can

311
00:20:06.110 --> 00:20:10.640
be stored as just plain
Martin documents. So your read

312
00:20:10.640 --> 00:20:15.050
side view and your, your
events store would come with

313
00:20:15.050 --> 00:20:18.980
all the same querying and
link querying support that any

314
00:20:18.980 --> 00:20:23.810
other Martin document has. So
you've mentioned at the beginning

315
00:20:23.810 --> 00:20:27.800
and throughout that, there's this
there's linked support. And I

316
00:20:27.800 --> 00:20:31.400
commented that there's Jason and
Jason B operators that are

317
00:20:31.640 --> 00:20:37.760
very Jason specific for pulling
Jason out, or introspecting into

318
00:20:37.760 --> 00:20:41.270
Jason. That's living in a
column. Is, is there, are

319
00:20:41.270 --> 00:20:44.420
there link extensions that you've
made that are very Jason

320
00:20:44.420 --> 00:20:48.190
specific or are you forced
to pass in? Like you,

321
00:20:48.340 --> 00:20:51.280
you're going link, link, link,
link link until you finally

322
00:20:51.280 --> 00:20:54.040
like run out of the
link, the link minus of

323
00:20:54.040 --> 00:20:55.240
it. And then you have
to like pass in a

324
00:20:55.240 --> 00:20:59.760
string and you have to
know Postgres stuff. And unfortunately

325
00:20:59.760 --> 00:21:05.490
that's, that's pretty well exactly
it, the link support it.

326
00:21:05.490 --> 00:21:08.790
So if using a data
access tool today, and you

327
00:21:08.790 --> 00:21:11.670
really like the link support
in it, just send a

328
00:21:11.670 --> 00:21:14.910
silent thanks to whatever team
that wrote that because it's,

329
00:21:14.970 --> 00:21:20.700
it's absurdly laborious, isn't it?
So when you hit limits,

330
00:21:21.270 --> 00:21:24.240
we've got a couple options.
You can go down to

331
00:21:24.240 --> 00:21:28.260
straight sequel, which, which is,
it's not a super friendly

332
00:21:28.260 --> 00:21:35.310
place. I think the Postgres,
Jason operators are walking, going

333
00:21:35.310 --> 00:21:38.840
farther. We haven't done this
yet, but there's a couple

334
00:21:38.860 --> 00:21:44.100
other options. So because it
is just Newton soft, what

335
00:21:44.100 --> 00:21:47.550
you can do is have
a read only a property,

336
00:21:47.700 --> 00:21:52.890
a calculated property on your,
your document object that evaluates

337
00:21:52.890 --> 00:21:56.310
whatever crazy expression it is
that you want to check.

338
00:21:56.340 --> 00:22:00.630
Like I want to re
reach into property a property

339
00:22:00.630 --> 00:22:03.660
B and then check a
list on that and make

340
00:22:03.660 --> 00:22:08.730
sure that the first value
is this. So an option

341
00:22:08.790 --> 00:22:13.050
is to make a calculated
field on your, on your

342
00:22:13.050 --> 00:22:16.500
document class, specifically to just
to make it easier for

343
00:22:16.500 --> 00:22:22.050
Martin to search by. And
then in future future, it's

344
00:22:22.050 --> 00:22:25.680
been a planned, a feature
forever that nobody's gotten around

345
00:22:25.680 --> 00:22:29.880
to is we do have
some ability to run JavaScript

346
00:22:30.150 --> 00:22:34.170
in, in Postgres. So what
I'd like to do is

347
00:22:34.170 --> 00:22:40.050
add an extension where you
can basically use JavaScript functions

348
00:22:40.050 --> 00:22:44.670
to do the Boolean test.
And it's even, even again,

349
00:22:44.670 --> 00:22:46.380
going a little bit farther,
it would be possible to

350
00:22:46.380 --> 00:22:52.680
put indexes Postgres indexes against
that, that JavaScript, so that

351
00:22:52.680 --> 00:22:56.220
I'm hoping kind of becomes
the end around of if

352
00:22:56.220 --> 00:23:00.510
you have something that's just
too weird for the link

353
00:23:00.510 --> 00:23:05.190
support like it or not.
Everybody pretty well knows Java

354
00:23:05.190 --> 00:23:09.300
script. So let's just write
Java, a JavaScript function that

355
00:23:09.300 --> 00:23:14.370
can interrogate the Jason document
and do it in a

356
00:23:14.370 --> 00:23:16.770
way where all you have
to do is write a

357
00:23:16.770 --> 00:23:21.300
single file that just has
the Jaison function that takes

358
00:23:21.300 --> 00:23:23.820
in a takes in an
object and returns or a

359
00:23:23.820 --> 00:23:26.970
couple of arguments and returns
of bullying. So Martin will

360
00:23:26.970 --> 00:23:29.910
do the extra work of
wrapping it up in puss

361
00:23:29.920 --> 00:23:35.190
crests, the eight, a store
procedure support, and all the

362
00:23:35.190 --> 00:23:40.140
ugly stuff for you At
a simplistic level, there was

363
00:23:40.140 --> 00:23:42.390
a time and a lot
of people move and recognize

364
00:23:42.390 --> 00:23:47.660
this when you're working with
a relational and you ask

365
00:23:47.660 --> 00:23:50.210
it some question that went
from being a really fast

366
00:23:50.210 --> 00:23:53.690
and easy question to ask,
to being a table scan,

367
00:23:54.290 --> 00:23:57.560
and then, you know, doing
something a million times becomes

368
00:23:57.560 --> 00:24:01.850
a problem in the process
of using Martin against Postgres.

369
00:24:02.870 --> 00:24:05.750
How do I prevent asking
it, how do I prevent

370
00:24:05.750 --> 00:24:08.300
from keep myself from asking
it a question that would

371
00:24:08.300 --> 00:24:11.090
cause it to have to
run through and look at

372
00:24:11.090 --> 00:24:13.460
all of the Jason and
calculated in decent, realize it

373
00:24:13.460 --> 00:24:16.280
and think about it kind
of suddenly become CPU bound

374
00:24:16.280 --> 00:24:21.020
and not really utilize the
database. Sure. So that, that

375
00:24:21.040 --> 00:24:24.550
is a good question. So
you have, it is a

376
00:24:24.550 --> 00:24:27.160
full database and you can
do things like use the

377
00:24:27.160 --> 00:24:30.280
explained plan tooling. What I
would really say is at

378
00:24:30.280 --> 00:24:33.220
that point, you need to,
you just need to be

379
00:24:33.220 --> 00:24:37.690
testing your app and see
how it performs. But with

380
00:24:37.690 --> 00:24:41.170
Martin, we have a little
utility in Martin to, you

381
00:24:41.170 --> 00:24:46.150
know, test out whatever link
link expression you're using. And

382
00:24:46.150 --> 00:24:48.520
there's an extension method. That'll
get you to the database

383
00:24:48.520 --> 00:24:53.140
explained plan. So if you're
good enough for familiar with

384
00:24:53.170 --> 00:24:56.200
that kind of verbiage, that
can tell you, Hey, you

385
00:24:56.200 --> 00:25:00.730
got a table scan going
on here and probably wouldn't

386
00:25:00.730 --> 00:25:07.870
be that different than normal
normal database usage. Okay. So

387
00:25:07.870 --> 00:25:10.180
then that means that as
someone who might not be

388
00:25:10.180 --> 00:25:12.340
familiar with Postgres, or might
not be familiar with document

389
00:25:12.340 --> 00:25:16.300
databases, but I am familiar
with regular kind of traditional

390
00:25:16.300 --> 00:25:20.230
databases, it should feel pretty
comfortable in my intuition about

391
00:25:20.230 --> 00:25:24.070
how things work isn't completely
off. Yeah. Even still have

392
00:25:24.070 --> 00:25:26.770
the traditional tools that would
be, that would be telling

393
00:25:26.770 --> 00:25:29.050
you, Hey, you're doing a
table scan here on a

394
00:25:29.050 --> 00:25:34.930
big set of data Right
now, Martin, on the, on

395
00:25:34.930 --> 00:25:40.750
the website, the main website
for it says a polyglot

396
00:25:40.780 --> 00:25:44.830
persistence for dotnet systems. What
is the, what do you

397
00:25:44.830 --> 00:25:46.750
mean by polyglot in the
context of you're saying it's

398
00:25:46.750 --> 00:25:51.100
a.net system? What does that
mean? Polyglot persistence. Well, just

399
00:25:51.100 --> 00:25:54.370
from the standpoint of what,
what persistent strategies do you

400
00:25:54.370 --> 00:25:59.410
want to use? So I
can use Martin Martin for

401
00:25:59.410 --> 00:26:02.470
the document database side. I
can use Martin for events

402
00:26:02.470 --> 00:26:07.000
sourcing. So there's, there's already
two patterns of persistence. It's

403
00:26:07.360 --> 00:26:12.070
perfectly possible to use dapper
with Martin, even to some

404
00:26:12.070 --> 00:26:15.130
degree to use used dapper
writes in the same unit

405
00:26:15.130 --> 00:26:17.320
of work as Martin. So
now you have a micro

406
00:26:17.320 --> 00:26:21.160
ORM as well. And at
the same token, you can

407
00:26:21.160 --> 00:26:24.760
use it as a pure
relational database, so that that's

408
00:26:24.760 --> 00:26:29.410
got a lot of things
covered. I haven't used it,

409
00:26:29.410 --> 00:26:32.320
but there's, there's also a
capability of using Postgres as

410
00:26:32.320 --> 00:26:36.550
a key value store. So
one database with, or without

411
00:26:36.550 --> 00:26:41.800
the Martin Martin library, and
you have several different, very

412
00:26:41.800 --> 00:26:47.630
different patterns of, of application
persistence at your fingertips. Very

413
00:26:47.630 --> 00:26:51.920
cool. If I'm, if I'm
not comfortable, I'm comfortable with.net.

414
00:26:52.010 --> 00:26:53.660
And I like the idea
of a document database, but

415
00:26:53.660 --> 00:26:57.770
maybe I'm not comfortable with
Postgres Postgres, something that I

416
00:26:57.770 --> 00:27:00.140
can just install and not
think about. Or can I

417
00:27:00.140 --> 00:27:03.860
use Postgres as a service
in Azure and sit, you

418
00:27:03.860 --> 00:27:08.000
know, Martin on top? So
both. So what I would

419
00:27:08.000 --> 00:27:11.960
say is Postgres is Postgres
is very easy to install.

420
00:27:12.290 --> 00:27:17.360
It's if you're on, if
you're on Mac brew, we'll

421
00:27:17.390 --> 00:27:21.440
brew, install Postgres, we'll put
it on fast. The windows

422
00:27:21.440 --> 00:27:24.470
installation's pretty easy. I haven't
tried it with chocolatey, but

423
00:27:24.770 --> 00:27:28.640
it's gotta be there as
you're just added official Postgres

424
00:27:28.640 --> 00:27:32.420
support there with, I gotta
throw a little caveat out

425
00:27:32.510 --> 00:27:37.670
that if you use the
Azure Azure Postgres support, some

426
00:27:37.670 --> 00:27:41.120
Martin has an a, the
two O version. Very recently,

427
00:27:41.120 --> 00:27:45.950
we have a way to
disable the requirement for JavaScript

428
00:27:45.950 --> 00:27:49.460
on the database and you'll
need that temporarily until Azure

429
00:27:49.490 --> 00:27:55.850
adds JavaScript support to Postgres,
but excellent. Some, I think

430
00:27:55.850 --> 00:27:59.030
a good chunk of our
community, quite a few of

431
00:27:59.030 --> 00:28:03.920
them seem to run Martin
applications on AWS and then

432
00:28:03.920 --> 00:28:06.890
a lot our, our and
my own shop are interested

433
00:28:06.890 --> 00:28:12.130
on in hosting modernized applications
in Azure. Okay. So it's

434
00:28:12.170 --> 00:28:17.000
nondenominational works everywhere. Well, anywhere
where you have Postgres. Yeah,

435
00:28:17.030 --> 00:28:20.840
indeed. And it's pretty mature.
Now you've been thinking about

436
00:28:20.840 --> 00:28:24.170
this since kind of 2005,
and you're on Martin 2.0

437
00:28:24.170 --> 00:28:29.030
right now, how big is
the team? Well, I would

438
00:28:29.030 --> 00:28:33.770
say, I mean, I'm still
the primary contributor. We have

439
00:28:34.280 --> 00:28:38.450
probably four or five people
that are, that are handling

440
00:28:38.450 --> 00:28:43.490
questions and, and bug fixes
and little features. And then

441
00:28:43.850 --> 00:28:46.940
beyond that, probably another 20
that provide a lot of

442
00:28:46.940 --> 00:28:52.040
feedback. And I mean, we'll
say from a community standpoint,

443
00:28:52.520 --> 00:28:55.580
this is probably the best
OSS experience I've ever had

444
00:28:55.580 --> 00:28:58.910
for people jumping in and
contributing. We get people that

445
00:28:58.910 --> 00:29:04.190
help with documentation we've had
help with. And this is

446
00:29:04.190 --> 00:29:07.520
actually a big deal. People
when they have problems with

447
00:29:07.520 --> 00:29:12.170
Martin are they'll send a
pull request with a, with

448
00:29:12.170 --> 00:29:16.700
a failing test that demonstrates
the problem. And that that's

449
00:29:16.700 --> 00:29:19.580
been huge. I know for
myself being able to, to

450
00:29:19.620 --> 00:29:24.530
keep up with things. So
it's been a great community

451
00:29:24.530 --> 00:29:27.770
for that. It's probably the
best, like I said, it's

452
00:29:27.770 --> 00:29:32.630
probably the best OSS experience
I've ever had. How big

453
00:29:32.630 --> 00:29:35.870
is it? What is the
biggest, most like intense usage

454
00:29:35.870 --> 00:29:37.970
of Martin? Is it yours?
Or some of you found

455
00:29:37.970 --> 00:29:40.490
someone in the wild that's
going, going beyond what you

456
00:29:40.490 --> 00:29:45.820
expected. So We don't necessarily,
we don't necessarily push a

457
00:29:45.820 --> 00:29:49.510
lot of the advanced features
or self it's, something that

458
00:29:49.510 --> 00:29:54.400
we want to want to
get to. There, there are

459
00:29:54.400 --> 00:29:56.980
plenty of other shops that
use special use the event

460
00:29:56.980 --> 00:30:01.390
store pretty hard, even doing
some event processing off of

461
00:30:01.390 --> 00:30:07.990
that. Yeah. Pushing features. So
we have a compiled query

462
00:30:07.990 --> 00:30:13.240
feature. So hopefully everybody who
uses link should probably know

463
00:30:13.240 --> 00:30:17.170
that the exercise of parsing
a link query is actually

464
00:30:17.170 --> 00:30:21.370
pretty expensive before you even
get near the database. Just

465
00:30:21.370 --> 00:30:24.190
the act of going from
here's a link expression turned

466
00:30:24.190 --> 00:30:27.910
into a SQL command. So
we have what we call

467
00:30:27.940 --> 00:30:33.190
a compiled query that kind
of lets you stash off

468
00:30:33.280 --> 00:30:35.770
and only express a link
expression that you're using the

469
00:30:35.770 --> 00:30:40.660
lot only parse at once
and completely remember everything there

470
00:30:40.660 --> 00:30:45.910
is to do to get
it there. So that's been

471
00:30:45.910 --> 00:30:49.120
a huge challenge. People using
a lot of combinations of

472
00:30:49.120 --> 00:30:56.260
things like soft delete, or
we have, multitenancy now hierarchical

473
00:30:56.260 --> 00:31:00.190
storage using that in combination
with that compiled query feature,

474
00:31:00.640 --> 00:31:04.210
that's where the link supports
a little bit different. That's

475
00:31:04.210 --> 00:31:09.820
the part where people really
pushed on it. Very cool.

476
00:31:10.150 --> 00:31:14.710
So people can go and
Google for Martin, M a

477
00:31:14.710 --> 00:31:17.560
R T E N. And
this is part of the

478
00:31:17.560 --> 00:31:21.310
Jasper FX or the Jasper
framework on, on get hub.

479
00:31:21.610 --> 00:31:25.330
It's got as with all
of your projects, really impressive

480
00:31:25.330 --> 00:31:28.390
documentation. It's really well organized.
It's really easy to get

481
00:31:28.390 --> 00:31:33.060
started and people should check
that out right away. It's

482
00:31:33.070 --> 00:31:37.930
a, it's surprisingly easy to
set up call. So fantastic.

483
00:31:37.930 --> 00:31:40.420
Thanks so much for spending
time with me today. Thanks

484
00:31:40.420 --> 00:31:44.020
for having me on this
has been another episode of

485
00:31:44.020 --> 00:31:46.450
Hanselminutes and we'll see you
again next week.

