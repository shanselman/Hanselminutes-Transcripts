WEBVTT FILE

1
00:00:04.470 --> 00:00:17.120
<inaudible> From hanselminutes.com. It's Hanselman.
It's a weekly discussion with

2
00:00:17.120 --> 00:00:21.920
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:21.920 --> 00:00:27.650
show number two 64. Recorded
live Thursday, April 28th, 2011. Support for

4
00:00:27.650 --> 00:00:31.220
Hansel minutes is provided by
Tellerik rad controls, the most

5
00:00:31.220 --> 00:00:34.880
comprehensive suite of components for
windows forms and asp.net web

6
00:00:34.880 --> 00:00:44.270
applications online@wwwdottelerik.com. In this episode,
Scott talks with Glenn block

7
00:00:44.330 --> 00:00:50.600
about the new WCF. Hi,
this is Hanselman. This is

8
00:00:50.600 --> 00:00:54.050
another episode of Hansel minutes.
This episode of Hansel minutes

9
00:00:54.050 --> 00:00:57.770
is actually being recorded in
the Netherlands. We are here

10
00:00:57.770 --> 00:01:00.590
at the tech days, dev
days events in Belgium and

11
00:01:00.590 --> 00:01:03.080
the Netherlands. And I'm sitting
here with Glenn block. How

12
00:01:03.080 --> 00:01:04.790
are you, sir? I'm doing
great. How are you doing,

13
00:01:04.790 --> 00:01:08.030
man? I am exhausted. I've
given three talks today and

14
00:01:08.030 --> 00:01:09.980
I've got another one in
an hour. So yes, we're

15
00:01:09.980 --> 00:01:13.370
having a blast out here.
Good times. Good times. Definitely.

16
00:01:13.640 --> 00:01:18.170
Now folks know you from
a meth, the managing sensibility

17
00:01:18.170 --> 00:01:21.350
framework, but about a year
ago you moved into another

18
00:01:21.350 --> 00:01:24.650
group, another three letter acronym.
Where are you now that

19
00:01:24.650 --> 00:01:29.180
you see? Okay. So in
math you were all about

20
00:01:29.270 --> 00:01:32.720
plugging components together and you
know, this kind of Lego

21
00:01:32.720 --> 00:01:35.510
way that has been that
metaphor I've been pushing. I

22
00:01:35.510 --> 00:01:37.700
just used that in my
talk yesterday. I said handsome.

23
00:01:37.730 --> 00:01:39.710
I had a meth talk.
So yes, I'm still very

24
00:01:39.710 --> 00:01:42.770
much attached to it, passionately
and somebody, you know, and

25
00:01:42.770 --> 00:01:44.690
I was talking about Legos
and I was saying how

26
00:01:44.690 --> 00:01:47.210
I've always loved the whole
Lego metaphor. So I'm all

27
00:01:47.210 --> 00:01:50.270
over what Scott's talking about.
Very cool. And now you're

28
00:01:50.270 --> 00:01:54.320
plugging stuff together using, using
Jason and XML and we're

29
00:01:54.320 --> 00:01:57.470
plugging services rather than plugging
in process components. Yes. So

30
00:01:57.800 --> 00:02:00.230
you're a program manager at
Microsoft. What is, what is

31
00:02:00.230 --> 00:02:04.070
your current thing that you're
pimping right now? Something new

32
00:02:04.070 --> 00:02:06.470
that we announced at PDC,
which is called the web

33
00:02:06.500 --> 00:02:11.960
API. And it's basically an
evolution of taking WCF forward

34
00:02:11.960 --> 00:02:15.440
for offering a better experience
for folks that want to

35
00:02:15.440 --> 00:02:19.820
expose their capabilities over HDP
to a range of devices.

36
00:02:20.930 --> 00:02:22.970
Some could be browsers, but
usually if it was a

37
00:02:22.970 --> 00:02:26.930
browser, it might be some
J query that's running. But

38
00:02:26.930 --> 00:02:29.930
at the same time, there
might be other clients which

39
00:02:29.930 --> 00:02:32.540
could even be other servers
that are not browsers that

40
00:02:32.540 --> 00:02:36.620
are talking. And it really
is about leveraging HTTP to

41
00:02:36.620 --> 00:02:42.800
its full extent. And also
it's not about transport independence,

42
00:02:42.860 --> 00:02:45.920
which is really what WCF
has traditionally been about. It's

43
00:02:46.250 --> 00:02:49.670
completely focused on what do
I need to do? Give

44
00:02:49.670 --> 00:02:53.540
me an ideal experience for
building things over HDP, which

45
00:02:53.540 --> 00:02:57.230
includes things like rest. Okay.
So that was a long

46
00:02:57.230 --> 00:02:59.350
elevator speech. You know how
they always tell you, if

47
00:02:59.350 --> 00:03:01.180
you want to sell something,
You sell it as if

48
00:03:01.180 --> 00:03:03.160
you're on an elevator trip.
And I was talking to

49
00:03:03.160 --> 00:03:04.390
a guy a couple of
days ago, he was giving

50
00:03:04.390 --> 00:03:06.610
me his elevator speech was
about 20 minutes long. And

51
00:03:06.610 --> 00:03:08.800
I said, I've long, got
off the elevator here. So

52
00:03:08.800 --> 00:03:10.480
let me back down, back
up and then break up

53
00:03:10.480 --> 00:03:12.430
what you said. Cause there's
actually a lot of information

54
00:03:12.430 --> 00:03:19.060
there. So WCF windows, communication
foundation, that's the services like

55
00:03:19.090 --> 00:03:26.160
soap and Ws, Ws, star
Ws. MSMQ Right. And all

56
00:03:26.160 --> 00:03:28.800
those kind of enterprisey things
that I worked on for

57
00:03:28.800 --> 00:03:33.150
many, many, many years. Yes.
That's all over in that

58
00:03:33.150 --> 00:03:36.060
organization. And they do big
corporate stuff. Like if you're

59
00:03:36.420 --> 00:03:39.390
talking to Java and things,
you'll use SAML tokens and

60
00:03:39.390 --> 00:03:42.120
all those kinds of services
and people may turn their

61
00:03:42.120 --> 00:03:44.520
nose up at them, but
they run like all the

62
00:03:44.520 --> 00:03:48.780
world's financial services and insurance
companies. So that's WCF kind

63
00:03:48.780 --> 00:03:53.940
of traditional on the MVC
side and the group that

64
00:03:53.940 --> 00:03:57.060
I work in web platform
and tools, I can make

65
00:03:57.360 --> 00:04:02.010
a MVC application in returns
from Jason. That's kind of

66
00:04:02.010 --> 00:04:04.800
a little service. It's a,
maybe a poor man's service.

67
00:04:04.830 --> 00:04:09.870
Yes. What you're describing it's
when you say WCF there's

68
00:04:09.870 --> 00:04:12.990
baggage, that goes along with
the name. W I was

69
00:04:12.990 --> 00:04:16.350
aware of that when I
joined the team. So WCF

70
00:04:16.350 --> 00:04:18.780
kind of seems like a,
Let's just say that there've

71
00:04:18.780 --> 00:04:23.490
been perceptions. There've been slides
with WCF where Darth Vader

72
00:04:23.490 --> 00:04:27.870
was used to represent that
WSU. Was that one of

73
00:04:27.870 --> 00:04:31.500
your, I can't say, I
can't say who would have

74
00:04:31.500 --> 00:04:37.350
done such a thing, but,
well, there were also Rastafarian's

75
00:04:37.350 --> 00:04:43.200
slides as well. I don't
think of like web 2.0

76
00:04:43.200 --> 00:04:46.620
and lightweight API and rest,
and then WCF in the

77
00:04:46.620 --> 00:04:51.210
same breath. Is this like
a kinder, gentler WCF? I

78
00:04:51.210 --> 00:04:53.820
would say yes. And I
think you need to shift

79
00:04:53.820 --> 00:04:56.280
your thinking cause it's definitely
a foe and of course

80
00:04:56.730 --> 00:04:58.770
I need to make, you
know, we need to convince

81
00:04:58.770 --> 00:05:00.480
you that you should shift
your thinking. You shouldn't just

82
00:05:00.480 --> 00:05:05.610
shift your thinking because I
say that, but we've, you

83
00:05:05.610 --> 00:05:09.570
know, we've looked at the
industry. I think that we've

84
00:05:09.570 --> 00:05:12.000
seen a shift. We've seen
a lot of customers coming

85
00:05:12.000 --> 00:05:15.210
and saying, look, fundamentally, I
do care about services as

86
00:05:15.210 --> 00:05:17.340
you mentioned, but I don't
care about services that are

87
00:05:17.340 --> 00:05:20.910
so based. I care about,
I want devices. I want

88
00:05:20.910 --> 00:05:24.720
my iOS and my Android,
for example, or the windows

89
00:05:24.720 --> 00:05:28.170
phone or other types of
devices to be able to

90
00:05:28.230 --> 00:05:31.770
consume my functionality. Because that's
really all about creating more

91
00:05:31.770 --> 00:05:35.220
customer value. You know, we're
in this world now where

92
00:05:35.220 --> 00:05:38.130
it's no longer about your
PC, that's beyond the, behind

93
00:05:38.130 --> 00:05:40.650
the firewall and you run
my software and you install

94
00:05:40.650 --> 00:05:43.020
it. It's like, look, if
you don't meet my needs,

95
00:05:43.050 --> 00:05:44.790
I'm not going to use
it. If you don't give

96
00:05:44.790 --> 00:05:47.670
me a Yelp app on
the windows phone. I mean,

97
00:05:47.670 --> 00:05:50.160
for me, like when y'all,
until Yelp came to the

98
00:05:50.160 --> 00:05:53.310
windows phone and it's still
don't know why Groupon's not

99
00:05:53.310 --> 00:05:56.970
there, I was, you know,
it really impacts my do

100
00:05:57.080 --> 00:05:59.450
want to keep this device
or not. I don't say

101
00:05:59.600 --> 00:06:02.840
I might not keep my
computer because you're making me

102
00:06:02.840 --> 00:06:08.200
install this software. So WCF
before, when, when people would

103
00:06:08.200 --> 00:06:10.300
give presentations years ago, when
it came out, they would

104
00:06:10.300 --> 00:06:16.480
say the ABCs of WC
contract address, binding and contract,

105
00:06:16.510 --> 00:06:19.780
and they basically made services
over anything. And they would

106
00:06:19.780 --> 00:06:22.600
always give presentations like, look,
I can do soap via

107
00:06:22.630 --> 00:06:26.500
email, or I can do
this contract over that binding

108
00:06:26.500 --> 00:06:33.010
and this TP, but HTTP
one 99% of the time.

109
00:06:34.060 --> 00:06:37.000
And people say that WCF
brings along a lot of

110
00:06:37.000 --> 00:06:41.530
baggage when I just want
HTTP. Yes. So we've, and

111
00:06:41.530 --> 00:06:44.470
I agree with that statement
a hundred percent. So you're

112
00:06:44.470 --> 00:06:48.130
preaching to the choir here.
We've spent the last year.

113
00:06:48.190 --> 00:06:52.510
You're investing To have an
experience in WCF that is

114
00:06:52.510 --> 00:06:56.380
completely targeting HDP, and that
is addressing many of those

115
00:06:56.380 --> 00:06:58.480
concerns we've heard. And the
way I look at it

116
00:06:58.480 --> 00:07:00.190
as like this, you say
baggage and I use the

117
00:07:00.190 --> 00:07:03.190
exact same thing. I say,
if you're giving me an

118
00:07:03.190 --> 00:07:06.070
API, who's strong point is
it can talk over multi

119
00:07:06.070 --> 00:07:09.400
transport and it's abstracting me
away from the details I

120
00:07:09.400 --> 00:07:12.940
actually need in the name
of flexibility that I'm not

121
00:07:12.940 --> 00:07:16.810
going to use. That's just
baggage. Okay. That was, you

122
00:07:16.810 --> 00:07:19.990
just did a great job
of kind of describing my

123
00:07:19.990 --> 00:07:25.030
experience with WCF, the idea
that you've hidden, what I

124
00:07:25.030 --> 00:07:28.390
care about and taking the
things that I need to

125
00:07:28.390 --> 00:07:31.150
get done and made them
obscure and you know, off

126
00:07:31.150 --> 00:07:33.730
in a corner somewhere. And
I think if you look

127
00:07:33.730 --> 00:07:36.040
at what people have liked
about what we've been doing,

128
00:07:36.040 --> 00:07:40.570
and I have to say
that so far 99.9% of

129
00:07:40.570 --> 00:07:43.390
the response that we've received
since PDC, as people really

130
00:07:43.390 --> 00:07:46.420
like the direction you hear
things like it's about time.

131
00:07:46.450 --> 00:07:49.090
Thank God. And just to
give it some context, it's

132
00:07:49.090 --> 00:07:53.290
not just about HTTP. It's
also about simplifying the developer

133
00:07:53.290 --> 00:07:56.140
experience. And I think we've
taken a lot of inspiration

134
00:07:56.140 --> 00:08:01.000
from your org, caring about
things like conventions and IOC

135
00:08:01.000 --> 00:08:05.410
containers and testability and simplifying
configuration, where you can do

136
00:08:05.410 --> 00:08:07.120
stuff in code, like the
way you can do it

137
00:08:07.120 --> 00:08:10.420
in routing. And also I
used to describe WCF as

138
00:08:10.420 --> 00:08:12.850
kind of like the cockpit
of a plane. You know,

139
00:08:12.850 --> 00:08:14.620
you walk in and it
can do a million different

140
00:08:14.620 --> 00:08:16.900
things, but you've got 800
switches in front of you.

141
00:08:17.140 --> 00:08:19.150
And you've got to learn
about those 800 switches. So

142
00:08:19.150 --> 00:08:22.360
you know which ones you
need to turn. Well, when

143
00:08:22.360 --> 00:08:23.650
all I want to do
is just go forward and

144
00:08:23.650 --> 00:08:27.220
then up exactly The model
we have now is a

145
00:08:27.220 --> 00:08:30.580
default experience that works in
the most common ways that

146
00:08:30.580 --> 00:08:33.490
people expect it to work.
And the way that we're

147
00:08:33.510 --> 00:08:36.370
addressed, the way that we're
achieving that is we're working

148
00:08:36.370 --> 00:08:38.500
with customers to tell us
what that needs to be.

149
00:08:38.920 --> 00:08:42.520
We're not sitting there in
a lab somewhere where we're,

150
00:08:42.580 --> 00:08:44.920
you know, we've been working
tightly with customers from day

151
00:08:44.920 --> 00:08:47.680
one before any, before the
first lines of code were

152
00:08:47.680 --> 00:08:56.160
written. Okay. But where does
it intersect? Because with, well,

153
00:08:56.160 --> 00:08:59.940
not just with MVC, but
I mean, there's, there's, there's,

154
00:08:59.940 --> 00:09:02.820
there's IAS the web server,
you know, there's windows at

155
00:09:02.820 --> 00:09:05.130
the bottom level, there's S
and as you move up,

156
00:09:05.610 --> 00:09:07.770
there's you get into from
IAS, you get into manage

157
00:09:07.800 --> 00:09:11.730
code from medics code over
in, in, in asp.net. We

158
00:09:11.730 --> 00:09:15.840
talk about how asp.net is
the core. It's the fundamental

159
00:09:16.560 --> 00:09:20.640
and NVC web forms and
web pages are just three

160
00:09:20.640 --> 00:09:22.950
different kind of sides of
the same coin. If I

161
00:09:22.950 --> 00:09:26.670
can mix my metaphors. Sure.
But ultimately they're just making

162
00:09:26.670 --> 00:09:30.990
angle brackets. 99% of the
things that we make in

163
00:09:30.990 --> 00:09:36.150
asp.net are angle brackets. Why
couldn't I also make Jason

164
00:09:36.150 --> 00:09:38.790
and all sorts of other
services and things. Why wouldn't

165
00:09:38.790 --> 00:09:43.080
I design the new, you
know, Twitter API with NVC.

166
00:09:43.910 --> 00:09:47.630
So I think there's a
question of, so first off

167
00:09:47.630 --> 00:09:50.480
you had a question before
about what's the difference between

168
00:09:50.480 --> 00:09:52.940
this baby service? I think
baby services, a nice way

169
00:09:52.940 --> 00:09:55.490
to describe it. The biggest
thing I would say is,

170
00:09:55.760 --> 00:09:57.830
and from what we've seen,
the majority of folks that

171
00:09:57.830 --> 00:10:02.210
are returning a Jason result
from MVC really are, it's

172
00:10:02.210 --> 00:10:05.060
an API, but it's an
API that is a more

173
00:10:05.060 --> 00:10:09.980
of a direct communication between
my page to my service.

174
00:10:10.430 --> 00:10:14.330
I want to have a
more responsive UI experience and

175
00:10:14.330 --> 00:10:16.970
I want to use jQuery.
And in order to do

176
00:10:16.970 --> 00:10:19.520
that, I've got to be
able to return Jason. So

177
00:10:19.520 --> 00:10:22.250
it makes sense. Okay. So
let's, let's break that down.

178
00:10:22.250 --> 00:10:23.660
Cause I think that that
may have gone over a

179
00:10:23.660 --> 00:10:26.990
few people's heads. Okay. This
scenario that you're describing an

180
00:10:26.990 --> 00:10:30.440
NVC is such that I
have a page that's an

181
00:10:30.440 --> 00:10:32.660
HTML and it's, it is
guaranteed that it will be

182
00:10:32.660 --> 00:10:35.840
viewed in a browser by
a human. And they're going

183
00:10:35.840 --> 00:10:38.270
to use the client side
jQuery to make a call

184
00:10:38.600 --> 00:10:43.340
almost always back to myself
or another similar page with

185
00:10:43.370 --> 00:10:46.640
Jason and then retrieved from
Jason. It's. Usually I do

186
00:10:46.640 --> 00:10:49.820
a small post with a
small payload and I retrieved

187
00:10:49.820 --> 00:10:52.400
back a bunch of stuff.
And then I do something

188
00:10:52.400 --> 00:10:54.350
with it in a, you
made, you made that the

189
00:10:54.350 --> 00:10:57.200
term baby service. It's a,
it's a simple service. There's

190
00:10:57.200 --> 00:11:00.950
nothing protecting. If it's not
focused on third party consumption,

191
00:11:01.160 --> 00:11:04.880
it's folk, it's an implementation
detail of providing a better

192
00:11:04.880 --> 00:11:09.080
experience to my website. The
way I would argue Different

193
00:11:09.080 --> 00:11:11.630
you you're, you're, you're kind
of drawing a distinction between

194
00:11:12.260 --> 00:11:18.200
api.twitter.com that a third party
might use. And perhaps some

195
00:11:18.200 --> 00:11:22.220
services that twitter.com is using
to, to give itself what

196
00:11:22.220 --> 00:11:25.670
it needs. I honestly don't
know, actually, if twitter.com calls

197
00:11:25.670 --> 00:11:29.330
back into its own API,
wouldn't I want, and in

198
00:11:29.330 --> 00:11:32.960
a perfect world to consume
my own service, eat my

199
00:11:32.960 --> 00:11:35.960
own dog food. As they
say, You think people will.

200
00:11:37.190 --> 00:11:40.280
The difference I would say
is, well, first off one

201
00:11:40.280 --> 00:11:42.860
of the tenants, well, you
said a couple of things.

202
00:11:42.860 --> 00:11:44.810
I want to step back
a second. If I can.

203
00:11:45.230 --> 00:11:47.480
One of the things that
you said was how we're

204
00:11:47.480 --> 00:11:50.180
just looking at different angle
brackets, as you know, the

205
00:11:50.180 --> 00:11:52.550
different models we have, whether
it's web pages or this

206
00:11:52.550 --> 00:11:56.770
or that, it's over ASP
dinette. Fundamentally what we're doing

207
00:11:56.770 --> 00:12:00.280
is still over WCF WCF.
One of the things you

208
00:12:00.280 --> 00:12:04.570
could never criticize WCF about
was being too extensible. It

209
00:12:04.570 --> 00:12:08.050
turns out it's so extensible
that using the existing pieces,

210
00:12:08.260 --> 00:12:11.140
we were able to swap
from top to bottom the

211
00:12:11.140 --> 00:12:14.590
implementations of some of those
core pieces to offer a

212
00:12:14.590 --> 00:12:18.070
very pure HTP story. So
it may have gone deeper.

213
00:12:18.250 --> 00:12:20.170
Like I think with IAS,
there's a lot of places

214
00:12:20.170 --> 00:12:22.870
where you just don't touch
and then it's just layered

215
00:12:22.870 --> 00:12:25.240
on top. We probably went
deeper than that, but it's

216
00:12:25.240 --> 00:12:28.150
still fundamentally like we have
a channel stack. We do

217
00:12:28.150 --> 00:12:30.550
have a contract. The contract
though is not in your

218
00:12:30.550 --> 00:12:33.220
face anymore. It's more implicit.
It doesn't get in your

219
00:12:33.220 --> 00:12:36.160
way. And why that's important
is in the soap world,

220
00:12:36.160 --> 00:12:39.340
your contract has to be
very explicit because you're sharing

221
00:12:39.340 --> 00:12:42.280
this custom thing to the
world and you want them

222
00:12:42.280 --> 00:12:44.230
to be able to generate
code off of it, like

223
00:12:44.230 --> 00:12:48.430
creating a proxy. None of
those are key drivers for

224
00:12:48.430 --> 00:12:52.210
what we're doing now. So,
and the other go ahead.

225
00:12:52.380 --> 00:12:53.910
Well, I will stop there.
I understand. I know that

226
00:12:53.910 --> 00:12:55.620
you can talk about this
at length because here at

227
00:12:55.620 --> 00:12:58.500
the, at the, the conference
here in the Netherlands and

228
00:12:58.500 --> 00:13:01.350
in Belgium, you've actually already
done three talks and have,

229
00:13:01.530 --> 00:13:03.210
have even more to go.
So I know you can

230
00:13:03.210 --> 00:13:05.400
speak at length. It's fine.
Stop me. But no, it's

231
00:13:05.400 --> 00:13:10.230
Hansel minutes though. It's not
Hansel hour. So here, here's

232
00:13:10.230 --> 00:13:11.760
something I'm trying to, I'm
trying to kind of put

233
00:13:11.760 --> 00:13:13.670
together in my head, as
I, as I listened to

234
00:13:13.670 --> 00:13:17.040
you here, would you say
that, you know, for web

235
00:13:17.040 --> 00:13:22.110
pages for interactions, asp.net is
good at that? Yes. And

236
00:13:22.110 --> 00:13:24.810
then baby services. And then
of course the old, what

237
00:13:24.810 --> 00:13:28.080
they call the ASM mix
stack. Yes. An X for

238
00:13:28.950 --> 00:13:35.430
webpages, sophisticated interactions and basic
services, asp.net as appropriate. Absolutely.

239
00:13:35.430 --> 00:13:39.270
But when you outgrow those
basic services, then you move

240
00:13:39.270 --> 00:13:41.340
to WCF. And let me
give you a call, hang

241
00:13:41.340 --> 00:13:43.380
on. I'm almost done. I
would say yes, that's correct.

242
00:13:43.710 --> 00:13:47.040
And well, it might be
conceivable on the other side

243
00:13:47.040 --> 00:13:50.700
of that, I could maybe
design something with WCF that

244
00:13:50.700 --> 00:13:54.540
would make it serve HTML.
I could, you could and

245
00:13:54.570 --> 00:13:57.000
even have interactions and it
would actually be its own

246
00:13:57.480 --> 00:14:00.690
thing that is not asp.net.
I would quickly outgrow that

247
00:14:00.690 --> 00:14:02.550
and I would want to
use asp.net. Let me give

248
00:14:02.550 --> 00:14:05.250
you an example of that.
Somebody has taken razor. So

249
00:14:05.250 --> 00:14:07.290
one of the things we've
done in our new stack

250
00:14:07.560 --> 00:14:10.410
is make it really easy
to plug in whatever representations

251
00:14:10.410 --> 00:14:13.830
you want. It's not just
about XML and Jason anymore.

252
00:14:14.190 --> 00:14:16.530
And if you watch, I
recommend you watch my mixed

253
00:14:16.530 --> 00:14:19.830
talk, where I show how
you can integrate with Google

254
00:14:19.830 --> 00:14:23.310
contacts in a very rich
way. By returning this thing

255
00:14:23.310 --> 00:14:26.070
called V card, which is
not texts. I mean, it's

256
00:14:26.070 --> 00:14:28.830
not XML, it's not Jason.
It's a completely different type

257
00:14:28.830 --> 00:14:32.220
of markup, but it highlights
the power that HDB has.

258
00:14:32.730 --> 00:14:35.550
And why that's really interesting
is soap was a myth

259
00:14:35.670 --> 00:14:39.180
soap. I wouldn't say soap
was a myth. So pad,

260
00:14:39.180 --> 00:14:41.880
the idea that all these
systems will integrate through one

261
00:14:41.880 --> 00:14:44.760
format. What you find when
you go to HTP is

262
00:14:44.760 --> 00:14:48.180
there are thousands of formats
and those formats are all

263
00:14:48.180 --> 00:14:52.790
tailored very specifically like the
card, a very specific way

264
00:14:52.970 --> 00:14:56.570
to express an electronic business
card. So where we become

265
00:14:56.570 --> 00:14:59.000
interesting is when Jason is
not the only thing that

266
00:14:59.000 --> 00:15:01.430
you're interested in, you want
to talk to systems that

267
00:15:01.430 --> 00:15:06.440
have proprietary formats that are
industry-wide accepted and have a

268
00:15:06.440 --> 00:15:09.320
good, you know, a good
experience for doing it. The

269
00:15:09.320 --> 00:15:11.150
other thing you find out
is when you're in the

270
00:15:11.150 --> 00:15:14.480
browser, all the concerns of
HTP are taken care of

271
00:15:14.480 --> 00:15:17.180
for you. Once you get
outside of the browser and

272
00:15:17.180 --> 00:15:19.760
to non browser clients, if
you want to leverage the

273
00:15:19.760 --> 00:15:22.550
benefits that the web has
to provide for you, you

274
00:15:22.550 --> 00:15:25.610
have to be a lot
more proactive in doing things

275
00:15:25.610 --> 00:15:28.090
that the browser just took
care of for you. You're

276
00:15:28.090 --> 00:15:30.790
talking about things like caching
in each side, Eggs, all

277
00:15:30.790 --> 00:15:35.800
that stuff. Yes. Hi, this
is Scott coming to you

278
00:15:35.800 --> 00:15:39.040
from another place in time.
Are you using agile practices

279
00:15:39.070 --> 00:15:41.350
to manage your software development?
There's lots of tools in

280
00:15:41.350 --> 00:15:43.480
the market that manage the
steps of a project, but

281
00:15:43.480 --> 00:15:46.600
most of them focus on
individual roles. Get ready for

282
00:15:46.600 --> 00:15:48.610
a solution that caters for
the success of the whole

283
00:15:48.610 --> 00:15:52.480
team. Guys at Tellerik introduced
team pulse to an agile

284
00:15:52.480 --> 00:15:55.720
project management tool that will
help you gather ideas, estimate

285
00:15:55.750 --> 00:16:00.190
plan, track progress in a
common workspace. Finally companies, regardless

286
00:16:00.190 --> 00:16:02.260
of their size can use
a lightweight and convenient tool

287
00:16:02.260 --> 00:16:04.690
that makes all the stakeholders
work as a United team.

288
00:16:05.620 --> 00:16:08.830
Even if they're in different
countries by combining intuitive user

289
00:16:08.830 --> 00:16:11.530
interface and the power server
light team poles removes the

290
00:16:11.530 --> 00:16:14.140
roadblocks that you typically face
and applying agile in an

291
00:16:14.140 --> 00:16:18.250
effective manner, no more lost
data, no disparate systems, no

292
00:16:18.250 --> 00:16:21.730
lack of critical analytics regarding
the health and philosophy project.

293
00:16:22.240 --> 00:16:25.210
See if yourself get a
free copy for five users

294
00:16:25.210 --> 00:16:31.630
in one project at tellerik.com/team
pulse. And please do thank

295
00:16:31.630 --> 00:16:34.420
tolerance for supporting Hansel minutes
on their Facebook fan page,

296
00:16:34.900 --> 00:16:40.930
facebook.com/t L E R I
K Keller. We do appreciate

297
00:16:40.930 --> 00:16:42.640
it. It wouldn't be a
handsome it's if there wasn't,

298
00:16:42.640 --> 00:16:46.600
Tellerik helping us. Yeah. A
lot of people just think

299
00:16:46.600 --> 00:16:49.450
that HDP is just a
matter of saying get, but

300
00:16:49.630 --> 00:16:53.200
honestly spend some time and
I've done this in banking

301
00:16:53.200 --> 00:16:55.120
for things like caching, which
is a huge deal in

302
00:16:55.120 --> 00:16:57.550
banking. Not only do you
have security and things, but

303
00:16:57.550 --> 00:17:00.580
you have ear tags, if
not modified since how to

304
00:17:00.580 --> 00:17:03.460
manage all those things, private
cash, public clash, no cash,

305
00:17:03.880 --> 00:17:07.390
and how all those things
behave. Those are some, some

306
00:17:07.390 --> 00:17:11.320
really nice functionality is involved.
HTTP is a lot more

307
00:17:11.320 --> 00:17:14.290
than just a couple of
verbs. It is. And the

308
00:17:14.290 --> 00:17:16.990
way I look@asp.net is not
that you can't do it

309
00:17:16.990 --> 00:17:19.420
there. You can do it
in MVC. Some people are

310
00:17:19.420 --> 00:17:22.390
doing it. What I would
say is that we're being

311
00:17:22.390 --> 00:17:26.530
more specific and intentional as
opposed to Hey, asp.net does

312
00:17:26.530 --> 00:17:28.810
a lot of things. And
here's how you could do

313
00:17:28.810 --> 00:17:33.070
this. We're saying our whole
mission is to provide a

314
00:17:33.070 --> 00:17:36.010
really good experience for doing
this. So, you know, we're

315
00:17:36.010 --> 00:17:39.100
studying the HTP spec, we're
working with people that are

316
00:17:39.100 --> 00:17:42.670
experts around HDP and saying,
you know, once you get

317
00:17:42.670 --> 00:17:45.610
beyond pages, what are the
things that you need? So

318
00:17:45.610 --> 00:17:48.310
I'd say that's one big
difference. The other difference is

319
00:17:48.310 --> 00:17:52.950
that WCF has always offered
multiple hosting options. There are

320
00:17:52.950 --> 00:17:55.560
people that are hosting WCF,
where there was no IIS,

321
00:17:55.590 --> 00:17:59.310
it's a desktop application or
some just console service that

322
00:17:59.310 --> 00:18:02.130
I spin up. And that
has always been one of

323
00:18:02.130 --> 00:18:05.340
the values of WCF that
it supports these multiple hosts,

324
00:18:05.550 --> 00:18:08.760
which is not interesting to
everybody, but there are customers

325
00:18:08.760 --> 00:18:11.040
that are interested that say,
look, I just got this

326
00:18:11.040 --> 00:18:13.380
backend server that needs to
just talk to some data

327
00:18:13.440 --> 00:18:15.530
or maybe it's internal. Okay.
So let me see if

328
00:18:15.530 --> 00:18:17.870
I understand then if we
kind of use this Lego

329
00:18:17.870 --> 00:18:22.910
metaphor in, in my example,
MVC snaps on top of

330
00:18:22.910 --> 00:18:25.310
asp.net, which snaps on top
of IAS. And I can

331
00:18:25.310 --> 00:18:28.070
snap additional layers on top
of MVC to, as I

332
00:18:28.070 --> 00:18:32.780
have, make an eye Cal
for like nerdina.com or make

333
00:18:32.780 --> 00:18:37.250
an RSS feed. You're saying
that WCF is Snapple such

334
00:18:37.250 --> 00:18:40.370
that it can even be
snapped together outside of ISDN

335
00:18:40.370 --> 00:18:43.970
entirely. Oh yeah. I could
write the Scott service host

336
00:18:43.970 --> 00:18:48.380
something internally that would return,
you know, I Cal calendar

337
00:18:48.380 --> 00:18:51.980
requests over HTTP And we
have customers that are interested

338
00:18:51.980 --> 00:18:54.920
in that. Yes, you can
take today. If you go

339
00:18:54.920 --> 00:18:56.990
to our bits on code
flex new, up in HTTP

340
00:18:56.990 --> 00:19:01.130
service hosts, give it a
URI, call the call, the

341
00:19:01.160 --> 00:19:05.150
open method. You've got a
lightweight server. Okay. But it's

342
00:19:05.150 --> 00:19:07.550
like you said, it's not
going to solve. It's not

343
00:19:07.550 --> 00:19:10.190
going to give me model
binding and validation and all

344
00:19:10.190 --> 00:19:13.640
this other stuff. It's not
designed for that. But it

345
00:19:13.640 --> 00:19:15.440
is designed to say, if
this is the kind of

346
00:19:15.440 --> 00:19:18.710
thing that's important to you,
like talking to iOS and

347
00:19:18.710 --> 00:19:22.670
Android and all these other
devices natively that understand different

348
00:19:22.670 --> 00:19:26.180
formats, as well as maybe
talking to an atom feed

349
00:19:26.180 --> 00:19:31.250
viewer, or like you mentioned
ICAP, great example, then it's

350
00:19:31.250 --> 00:19:33.780
more targeted for those kinds
of scenarios. Excuse me. I

351
00:19:33.780 --> 00:19:37.550
have two questions here. One
is, do you think that

352
00:19:37.550 --> 00:19:39.890
customers are going to be
able to kind of deal

353
00:19:39.890 --> 00:19:42.140
with the idea that there
is this Venn diagram, these

354
00:19:42.140 --> 00:19:45.890
two circles that intersect just
a little bit asp.net and

355
00:19:45.890 --> 00:19:49.970
WCF, where there, there are
some, some scenarios, some basic

356
00:19:49.970 --> 00:19:52.940
scenarios where you can do
it in both. Yep. And

357
00:19:53.330 --> 00:19:57.110
what about those customers that
like that kind of lightweight,

358
00:19:57.140 --> 00:20:02.900
fresh, clean Snapple way that
asp.net MVC does who don't

359
00:20:02.900 --> 00:20:07.400
trust WCF because of the
sins of the father? So

360
00:20:07.400 --> 00:20:10.250
I think a, one of
the reasons why we've been

361
00:20:10.250 --> 00:20:13.940
working vehemently with the community
since this effort started is

362
00:20:13.940 --> 00:20:16.400
we know that that exists
and the best way to

363
00:20:16.400 --> 00:20:18.350
change that is to pull
the people in, to work

364
00:20:18.350 --> 00:20:20.720
with us. I never liked
to stand there on any

365
00:20:20.720 --> 00:20:23.600
of the platform technologies I've
worked on. I never liked

366
00:20:23.600 --> 00:20:24.830
to stand there and tell
you what's going to make

367
00:20:24.830 --> 00:20:27.140
your life better. I want
some other guy who's using

368
00:20:27.140 --> 00:20:30.320
it to say it made
his life better. That gives

369
00:20:30.320 --> 00:20:33.350
us credibility. And so we've
been working with a large

370
00:20:33.380 --> 00:20:36.890
number of people to, to,
and been very visible out

371
00:20:36.890 --> 00:20:39.590
front to make sure that
we can and, and everybody

372
00:20:39.590 --> 00:20:41.600
who has seen it has
actually said, Oh my God,

373
00:20:41.600 --> 00:20:44.930
I had written off WCF.
And this is looking interesting

374
00:20:44.930 --> 00:20:47.530
or, Oh, this is looking
great. So I, that's a

375
00:20:47.530 --> 00:20:50.230
positive. We do have work
to do. One thing we

376
00:20:50.230 --> 00:20:52.840
have to do is give
guidance that says, look, if

377
00:20:52.840 --> 00:20:56.170
MVC is working for you,
you don't have to change

378
00:20:56.680 --> 00:21:00.310
like use, use what works.
I'm a big proponent of

379
00:21:00.310 --> 00:21:01.890
that, That this is part
of the whole kind of

380
00:21:01.890 --> 00:21:05.010
open source Lego philosophy is
that, Hey man, use what

381
00:21:05.010 --> 00:21:07.110
makes you happy if the
shoe doesn't fit, buy different

382
00:21:07.110 --> 00:21:09.770
shoes. Exactly. You and I
have to think, you know,

383
00:21:09.770 --> 00:21:13.470
you, me, Phil, Steve Sanderson,
Damien Edwards, we're all have

384
00:21:13.470 --> 00:21:16.590
the same kind of mind
where ultimately just do what

385
00:21:16.590 --> 00:21:19.470
makes you happy? Do what
makes you feel productive? And

386
00:21:19.470 --> 00:21:21.990
that's, that's cool. So I
recognize that you're not, you

387
00:21:21.990 --> 00:21:24.210
don't want to push this
on anybody on anybody. You

388
00:21:24.210 --> 00:21:27.150
want them to try it.
And if they like it,

389
00:21:27.150 --> 00:21:30.060
then maybe they'll tell their
friends. Exactly. And you know,

390
00:21:30.060 --> 00:21:32.520
I think that's orthogonal. Like
if the community came to

391
00:21:32.520 --> 00:21:35.220
us and said, Hey, you
know, could we do more

392
00:21:35.220 --> 00:21:38.070
to make a more seamless
experience on MVC? I know

393
00:21:38.070 --> 00:21:41.220
personally I'd be a huge
fan of doing that so

394
00:21:41.220 --> 00:21:43.170
far. I think what we've
seen, and I think it's

395
00:21:43.170 --> 00:21:46.530
a product of where we're
at rest is not young,

396
00:21:46.800 --> 00:21:49.050
but rest in the way
we're starting to use it

397
00:21:49.110 --> 00:21:51.750
is. And because of that,
I think there's a lot

398
00:21:51.750 --> 00:21:54.240
of people in NBC land
today that are just thinking

399
00:21:54.240 --> 00:21:57.330
about, say jQuery to a
front, end, that over time

400
00:21:57.330 --> 00:22:00.780
with the proliferation of devices
and things, this may start

401
00:22:00.780 --> 00:22:02.820
to become more important to
them. But right now it's

402
00:22:02.820 --> 00:22:05.070
not. So people have seen
what we're doing. And even

403
00:22:05.070 --> 00:22:06.870
a lot of folks from
the MVC credit said, that's

404
00:22:06.870 --> 00:22:09.810
great. Awesome. I love the
direction that you're going. It's

405
00:22:09.810 --> 00:22:12.540
much better than what was
there before. We're not seeing

406
00:22:12.540 --> 00:22:15.300
a lot of people that
are struggling and saying, Oh,

407
00:22:15.300 --> 00:22:17.550
why would I use this
over NBC? It does come

408
00:22:17.550 --> 00:22:21.150
up. The positioning that I
like to take is it's

409
00:22:21.150 --> 00:22:24.630
about motivations. I think when
I come to asp.net, I

410
00:22:24.630 --> 00:22:28.620
start with the idea of
building a site over time.

411
00:22:28.650 --> 00:22:31.350
As I start to move
towards more rich UI, or

412
00:22:31.350 --> 00:22:35.100
maybe suddenly new devices do
show up, I may say,

413
00:22:35.100 --> 00:22:37.290
well, I'm over an MVC
already. It's easy enough for

414
00:22:37.290 --> 00:22:40.290
me to do it myself,
depending on what I'm doing.

415
00:22:40.290 --> 00:22:42.810
As you mentioned, like ear
tags and other stuff that

416
00:22:42.810 --> 00:22:46.800
may be easy or not.
I think that fundamentally MVC

417
00:22:46.800 --> 00:22:49.140
is a really good architecture.
So there's lots of things

418
00:22:49.140 --> 00:22:51.360
you can plug in, but
is it something that the

419
00:22:51.360 --> 00:22:53.880
team is going to be
focused on building or is

420
00:22:53.880 --> 00:22:54.930
it going to be something
that you're going to be

421
00:22:54.930 --> 00:22:58.620
doing yourself or using from,
from the community? But again,

422
00:22:58.620 --> 00:23:01.440
I still think it starts
with the site and over

423
00:23:01.440 --> 00:23:04.080
time, there's a bit of
bleed. On the other side

424
00:23:04.080 --> 00:23:06.900
are companies where they were
just building soap services. They

425
00:23:06.900 --> 00:23:10.890
don't even know anything about
websites. They've used WCF. And

426
00:23:10.890 --> 00:23:13.740
now they see that what
they thought was going to

427
00:23:13.740 --> 00:23:16.650
be the answer for everything
is not, but they want

428
00:23:16.650 --> 00:23:20.100
to still offer that same
functionality to other kinds of

429
00:23:20.100 --> 00:23:23.460
devices. And so they will
look at web API and

430
00:23:23.460 --> 00:23:26.910
they'll get into jQuery because
they'll say one of the

431
00:23:26.910 --> 00:23:30.780
consumers is going to be
jQuery. Front ends Keep mentioning

432
00:23:30.870 --> 00:23:33.030
other devices. And you can,
you said iOS a couple

433
00:23:33.030 --> 00:23:36.060
of times and Android help
me understand if I'm going

434
00:23:36.060 --> 00:23:40.680
to go into liver, a
website to iOS, then I,

435
00:23:40.680 --> 00:23:42.870
you know, I'll use different
markup. I'll use different CSS

436
00:23:42.870 --> 00:23:46.520
rules and different JavaScript. But
are you talking about delivering

437
00:23:46.550 --> 00:23:49.610
services in a format that
a particular device would really

438
00:23:50.770 --> 00:23:54.490
Absolutely. Let's let's use your
ICL example. Let's say I

439
00:23:54.490 --> 00:23:56.830
want to offer up data
that can push right into

440
00:23:56.830 --> 00:24:00.700
my iPads calendar. Right? I
can't wait for Apple to

441
00:24:00.700 --> 00:24:03.820
set in. I could decide
to wait until Apple, you

442
00:24:03.820 --> 00:24:06.940
know, adopts the Microsoft format.
Even something like Oh, data,

443
00:24:07.270 --> 00:24:09.730
which may be a great
Hi Kelly. Kelly will always

444
00:24:09.730 --> 00:24:12.880
be ICL. Exactly. So if
I can talk that format,

445
00:24:12.880 --> 00:24:14.920
I'm going to have a
much richer interaction with that

446
00:24:14.920 --> 00:24:17.580
device. So I would say
that is the example one

447
00:24:17.620 --> 00:24:20.350
great example. And there's, you
know, as I said in

448
00:24:20.350 --> 00:24:23.290
my talk, there's thousands of
different media types. I might

449
00:24:23.290 --> 00:24:26.620
even building an application that's
really specific. It's not something

450
00:24:26.620 --> 00:24:28.660
that every customer is going
to use. It's something to

451
00:24:28.660 --> 00:24:31.900
deal with my company, but
we like, for example, there

452
00:24:31.900 --> 00:24:35.650
are media types for scientific
data, but for our business

453
00:24:35.650 --> 00:24:39.130
need, we want to be
able to richly interact with

454
00:24:39.130 --> 00:24:44.170
applications that understand that format.
There's coded Jason, it's Jason,

455
00:24:44.290 --> 00:24:47.290
but it's a specialized type
of Jason. So it's the

456
00:24:47.290 --> 00:24:49.750
same type of thing. I
think it's where the interactions

457
00:24:49.750 --> 00:24:52.750
go beyond the browser would
be one of the pivotal

458
00:24:52.750 --> 00:24:56.890
points. Okay. Do you think
that these are interactions that

459
00:24:56.890 --> 00:25:01.630
we don't see, like perhaps
MVC and asp.net get kind

460
00:25:01.630 --> 00:25:04.990
of more press because public
websites are coated in this

461
00:25:04.990 --> 00:25:07.840
way and jQuery and Jason
are something that you can

462
00:25:07.840 --> 00:25:11.110
see when you just say
view source, but this kind

463
00:25:11.110 --> 00:25:15.100
of things like scientific usage
or KML or a Google

464
00:25:15.100 --> 00:25:16.990
earth type stuff, or all
these other kinds of things,

465
00:25:17.110 --> 00:25:19.510
we don't really look at
that traffic it's traffic. You

466
00:25:19.510 --> 00:25:23.050
don't see because you can't
go view. That's probably, that's

467
00:25:23.050 --> 00:25:24.760
a great way to look
at it. I think that's

468
00:25:24.760 --> 00:25:26.710
part of it. I think
part of it is a

469
00:25:26.710 --> 00:25:29.350
product of where we are
in the industry as well.

470
00:25:29.590 --> 00:25:31.720
Like I said, rest in
the way that we're starting

471
00:25:31.720 --> 00:25:34.900
to use it now is
still very new. One of

472
00:25:34.900 --> 00:25:37.990
the showcases I've talked about
in terms of customers is

473
00:25:37.990 --> 00:25:40.930
best buy in Comcast as
two recent examples in the

474
00:25:40.930 --> 00:25:45.520
enterprise, which was the traditional
WCF playground that are saying,

475
00:25:45.550 --> 00:25:48.280
we want to take advantage
of HDP for the promises

476
00:25:48.280 --> 00:25:51.490
that offers us. And, you
know, you mentioned how caching,

477
00:25:51.760 --> 00:25:54.490
but it's even more than
that. It's evolve ability. It's

478
00:25:54.500 --> 00:25:57.130
version into, you know, it's
being building systems that are

479
00:25:57.130 --> 00:26:01.120
version tolerant, where I'm exposing
API APIs, but those APRs

480
00:26:01.120 --> 00:26:03.580
are designed in such a
way that I can actually

481
00:26:03.580 --> 00:26:07.810
evolve them and change them
without breaking existing clients. That's

482
00:26:07.810 --> 00:26:09.940
an interesting point. One of
the things that came up

483
00:26:09.940 --> 00:26:11.890
with soap very, very early
on was the notion of

484
00:26:11.890 --> 00:26:15.730
versioning and ultimately a lot
of freaking out happen, but

485
00:26:15.730 --> 00:26:23.350
people just ended up putting
different end points@differentendpointslikeversiononewasatwhatever.com slash <inaudible>.

486
00:26:23.860 --> 00:26:25.570
And that seems to be
the way people are doing

487
00:26:25.570 --> 00:26:29.440
things with services now. And
Jason, yes. Is there something

488
00:26:29.440 --> 00:26:31.900
special that you guys do
around versioning that we should

489
00:26:31.900 --> 00:26:35.560
know about? There's a very
interesting topic, which I think

490
00:26:35.560 --> 00:26:38.290
you covered with Mike Edmonson
on your podcast, which is

491
00:26:38.290 --> 00:26:41.650
known as hypermedia and it's
a scary term, but it

492
00:26:41.650 --> 00:26:47.310
basically means systems drive navigation
through the system through linking

493
00:26:47.970 --> 00:26:52.230
and where it's not UI
navigation. I'm navigating a process,

494
00:26:52.260 --> 00:26:54.390
which is very different than
the way we think about

495
00:26:54.390 --> 00:26:56.850
things. We think about things
where I send a message

496
00:26:56.850 --> 00:26:59.730
and some server decides where
I go next. This is

497
00:26:59.730 --> 00:27:03.090
more like the browser experience,
but for non UI where

498
00:27:03.090 --> 00:27:05.610
the server offers me up
a list of options of

499
00:27:05.610 --> 00:27:07.890
where you can go next.
And at the end of

500
00:27:07.890 --> 00:27:10.290
the day, doing those types
of things requires you to

501
00:27:10.290 --> 00:27:13.110
have a lot of control
over the media type, the

502
00:27:13.110 --> 00:27:17.670
format that is the coupling
in rest. And so we're

503
00:27:17.670 --> 00:27:20.640
making it really easy to
write those types of formats.

504
00:27:20.730 --> 00:27:23.220
And I've just done a
talk on that actually, which,

505
00:27:23.280 --> 00:27:26.550
which got a pretty good
reaction on how you can

506
00:27:26.550 --> 00:27:31.980
build distributed systems that do
complex logic, but that are

507
00:27:31.980 --> 00:27:35.820
version tolerant because they use
hypermedia. So an answer short

508
00:27:35.820 --> 00:27:39.300
answer to your question, it's
not something that Microsoft owns

509
00:27:39.300 --> 00:27:42.090
specifically. It's something that is
inherent in the design of

510
00:27:42.090 --> 00:27:45.780
HTTP. You need a good
platform that enables you to

511
00:27:45.780 --> 00:27:50.570
leverage it. Now, one question
that I think I like

512
00:27:50.570 --> 00:27:52.220
to, I kind of liked
to pick on Microsoft a

513
00:27:52.220 --> 00:27:54.230
little bit. I like to
juxtapose old Microsoft and new

514
00:27:54.240 --> 00:27:58.820
Microsoft old Microsoft would say,
all right, Glenn, who's your

515
00:27:58.820 --> 00:28:02.360
competition in this space, right?
And that gets into the

516
00:28:02.360 --> 00:28:05.600
whole kind of like embrace
and crush style of old

517
00:28:05.600 --> 00:28:07.700
Microsoft. But, you know, we,
we, at least in dev

518
00:28:07.700 --> 00:28:09.530
div are really doing the
best. He's the new, the

519
00:28:09.530 --> 00:28:13.130
new guys and gals to
do things a little differently.

520
00:28:14.000 --> 00:28:16.610
I know that there are
other services out there there's

521
00:28:16.610 --> 00:28:20.180
Nancy, which is a Sinatra,
cologne. Sinatra is a services

522
00:28:20.180 --> 00:28:23.780
system for rails and Ruby
and Nancy is a taught

523
00:28:23.780 --> 00:28:27.440
net reimagination of that. And
Nancy Sinatra kind of a

524
00:28:27.440 --> 00:28:31.970
joke there. There's also Owen
O w I N. And

525
00:28:31.970 --> 00:28:39.590
I had Benjamin Andrew over
from, from kayak. Are those

526
00:28:40.010 --> 00:28:43.220
parallel or <inaudible> where do
those fit into this larger

527
00:28:43.220 --> 00:28:46.280
ecosystem? I would say that
the work that's being done

528
00:28:46.280 --> 00:28:48.890
with Owen and the works
that's being done, and I'm

529
00:28:48.890 --> 00:28:50.690
involved with Owen, by the
way, I've been involved with

530
00:28:51.290 --> 00:28:55.310
stand for open web interfaces
for.net, I think is the

531
00:28:55.310 --> 00:28:58.790
actual term. It's based on
things that appeared in, in

532
00:28:58.790 --> 00:29:02.240
Ruby and Python and probably
discuss this, you know, in

533
00:29:02.240 --> 00:29:05.930
Ruby there's RAC and in
Python there's whiskey. And it's

534
00:29:05.930 --> 00:29:08.780
a standard set of interfaces
for building a web server.

535
00:29:09.260 --> 00:29:13.790
What I would say is
different is that we're more

536
00:29:13.790 --> 00:29:18.260
specific to the idea of
application functionality being exposed over

537
00:29:18.260 --> 00:29:21.800
API APIs, the work that's
going on with Nancy and

538
00:29:21.800 --> 00:29:23.990
the work that's going on
with kayak and Owen is

539
00:29:23.990 --> 00:29:27.560
all about a lightweight web
server of which yes, you

540
00:29:27.560 --> 00:29:29.990
could layer on top of
it. And to give you

541
00:29:29.990 --> 00:29:32.810
an example of where we're
working with them. One of

542
00:29:32.810 --> 00:29:35.750
our new extensibility points in
WCF and our new web

543
00:29:35.780 --> 00:29:39.860
API is perfect for Owen
because Owen wants to be

544
00:29:39.860 --> 00:29:43.270
able to put, which is
the idea of like reusable

545
00:29:43.270 --> 00:29:45.760
things that I could use
on web server of my

546
00:29:45.760 --> 00:29:49.630
choice. That's what Ruby and
rails and rack brings you.

547
00:29:50.500 --> 00:29:53.860
And we're enabling that. And
we're working with the community

548
00:29:53.860 --> 00:29:55.750
as a matter of fact,
Jason Serota, who's one of

549
00:29:55.750 --> 00:29:57.820
the core people on Owen.
He and I are pairing

550
00:29:57.820 --> 00:30:01.750
up to show how you
will do that with WCF.

551
00:30:02.310 --> 00:30:05.160
Great. So you're saying that
at Owen and Nancy, those

552
00:30:05.160 --> 00:30:08.640
things are a little bit
lower level. Nancy Actually also

553
00:30:08.640 --> 00:30:11.400
is agnostic to host. I
worked with Andreas and they

554
00:30:11.400 --> 00:30:14.910
built a WCF host for
Nancy. So Nancy is higher

555
00:30:14.910 --> 00:30:18.270
up, actually Nancy is Sinatra
is more of like a

556
00:30:18.270 --> 00:30:21.750
programming model. And so now,
and Nancy is saying, Hey,

557
00:30:21.750 --> 00:30:24.240
you could run us on
asp.net. You could run us

558
00:30:24.240 --> 00:30:27.810
on WCF, or you could
run us on kayak and

559
00:30:27.810 --> 00:30:31.740
Owen, ideally Nancy will build
on top of Owen because

560
00:30:31.770 --> 00:30:33.810
Owen will be the standard.
You know, if we think

561
00:30:33.810 --> 00:30:36.360
about common service locator, the
best way I like to

562
00:30:36.360 --> 00:30:39.780
describe Owen, it's almost like
the common service locator of

563
00:30:39.780 --> 00:30:43.770
web servers. Okay. I see
it's mentally attached to it,

564
00:30:43.830 --> 00:30:45.780
right? Yeah. I think another
way to think about it

565
00:30:45.780 --> 00:30:47.820
as in terms of like
an hour glass and hourglass

566
00:30:47.820 --> 00:30:49.470
fans out at the top
and it fans out at

567
00:30:49.470 --> 00:30:52.590
the bottom, but there is
a central thing, a router

568
00:30:52.950 --> 00:30:56.850
that manages that many to
many relationship between things above

569
00:30:56.850 --> 00:30:59.790
it and things below it.
And Owen is that linchpin

570
00:30:59.850 --> 00:31:02.760
that makes it all work
together. Now, one thing that

571
00:31:02.880 --> 00:31:05.100
the people who were listening,
at least for the few

572
00:31:05.100 --> 00:31:07.500
people who have made it
this far into this episode

573
00:31:07.500 --> 00:31:10.050
of Hansel minutes, they may
have just heard a flood

574
00:31:10.080 --> 00:31:13.530
of not just three letter
acronyms, but a flood of

575
00:31:13.530 --> 00:31:16.980
code names that are creative
and fun and interesting, but

576
00:31:16.980 --> 00:31:20.160
ultimately meaningless. I mean, in
terms of Nancy and ONC

577
00:31:20.160 --> 00:31:22.350
and kayak and Owen and
this and that, and frankly,

578
00:31:22.420 --> 00:31:25.410
All about enabling the community,
I think that's the highest

579
00:31:25.410 --> 00:31:27.150
level you can say is
there's a lot of efforts

580
00:31:27.150 --> 00:31:30.780
in the community around building
web servers and you don't,

581
00:31:30.810 --> 00:31:34.290
you can still use those
efforts and use the Microsoft

582
00:31:34.770 --> 00:31:38.250
bits as well. Listener go
to get an understanding of

583
00:31:38.250 --> 00:31:40.860
this. I mean, I know
that I've learned these names

584
00:31:40.860 --> 00:31:44.580
and what they mean, and
I can translate for, you

585
00:31:44.580 --> 00:31:46.590
know, there's like the English
language and then there's what

586
00:31:46.590 --> 00:31:49.050
you and I were just
speaking, which is code name

587
00:31:49.050 --> 00:31:52.020
of technology. Right? Where do
you read? Is there, are

588
00:31:52.020 --> 00:31:54.750
there other websites dedicated to
this kind of work or

589
00:31:54.750 --> 00:31:56.880
do you troll around on
Twitter or do you spend

590
00:31:56.880 --> 00:31:59.460
time in Google groups? Where
do you learn these things?

591
00:31:59.460 --> 00:32:02.940
So that folks who are
listening can either either learn

592
00:32:03.090 --> 00:32:07.380
or get involved? Well, Nancy
and Owen both have the

593
00:32:07.380 --> 00:32:10.530
Google groups, discussion groups. I
don't know exactly which ones,

594
00:32:10.590 --> 00:32:12.440
what the names are, but
we'll go ahead and put

595
00:32:12.600 --> 00:32:15.480
in that's one place to
go. I think Twitter is

596
00:32:15.480 --> 00:32:17.160
a great place to get
aware of a lot of

597
00:32:17.160 --> 00:32:20.310
these things. As a matter
of fact, Owen was born

598
00:32:20.310 --> 00:32:22.380
on Twitter. I mean, it
was born a bunch of

599
00:32:22.380 --> 00:32:26.820
conversations. Nancy was the catalyst
actually for Owen, Nancy came

600
00:32:26.820 --> 00:32:29.040
out and there were a
bunch of other Sinatra clones

601
00:32:29.040 --> 00:32:32.940
out there. And then Scott
Kuhn, a lazy coder on

602
00:32:32.940 --> 00:32:35.760
Twitter came and said, Hey,
this is not the first

603
00:32:36.330 --> 00:32:38.520
Nancy. You know, this is
not the first Sinatra clone.

604
00:32:38.520 --> 00:32:41.330
There's about eight them. Why
don't we all get together

605
00:32:41.330 --> 00:32:44.060
and just come up with
an idea of, you know,

606
00:32:44.060 --> 00:32:46.670
a common way to do
web servers as a community

607
00:32:47.000 --> 00:32:50.930
and work on it together.
And thus Owen was born

608
00:32:51.410 --> 00:32:54.860
and Nancy had also created
its group, but Nancy really

609
00:32:54.860 --> 00:32:57.800
was the catalyst from, from
my perspective that caused all

610
00:32:57.800 --> 00:33:01.100
this flurry. But yeah, it's,
it's just out there. There's

611
00:33:01.100 --> 00:33:03.980
no one, I mean, there
are sites there's like GitHub

612
00:33:03.980 --> 00:33:06.590
and things like that. So
where do I go to

613
00:33:06.590 --> 00:33:09.890
get your new stuff? The
WCF rest API ours is

614
00:33:09.890 --> 00:33:12.500
pretty easy. So first I
would say, it's not a

615
00:33:12.500 --> 00:33:15.290
rest API. We've been very
careful, Oh, I'm sorry. You

616
00:33:15.290 --> 00:33:17.270
can use it. But I
think it's important to mention

617
00:33:17.300 --> 00:33:20.120
that what is it called?
It's called WCF web API,

618
00:33:20.180 --> 00:33:24.080
web API, not specific to
rest because rest is a

619
00:33:24.080 --> 00:33:26.840
very, we've learned a lot.
Rest. What we thought was

620
00:33:26.840 --> 00:33:29.630
rest was not rest. Rest
is a very specific way

621
00:33:29.630 --> 00:33:32.030
of doing things. We want
to enable it, but we're

622
00:33:32.030 --> 00:33:33.860
not forcing it. And we
don't want to imply that

623
00:33:33.860 --> 00:33:37.730
everything you do with our
API is restful WCF dot

624
00:33:37.730 --> 00:33:40.220
code plex.com is where you
can get it. You just

625
00:33:40.220 --> 00:33:43.640
did a big release at
mix of our latest pits

626
00:33:43.670 --> 00:33:45.080
and it, can I get
it in new, get as

627
00:33:45.080 --> 00:33:48.440
well? You can. We actually
launched and we get packages.

628
00:33:48.440 --> 00:33:50.750
If you go to web
API dot all as your

629
00:33:50.750 --> 00:33:54.290
new get package, you will
get all the packages, but

630
00:33:54.290 --> 00:33:56.720
there are individual packages that
they can choose from. There's

631
00:33:56.720 --> 00:33:59.960
about five of them. Okay.
So the, what was it?

632
00:34:00.020 --> 00:34:02.480
Web web, API dot. So
whether it be on a

633
00:34:02.480 --> 00:34:05.180
call, Paul is a Metta
package, a package. That's what

634
00:34:05.180 --> 00:34:07.640
it is. Yes. All right.
Very cool. We'll check that

635
00:34:07.640 --> 00:34:09.770
out. Thank you so much,
Glenn blot for chatting with

636
00:34:09.770 --> 00:34:12.170
me today. Thank you, Scott.
It was wonderful. This has

637
00:34:12.170 --> 00:34:15.770
been another episode of Hansel
minutes. See you again next

638
00:34:15.770 --> 00:34:23.200
week. <inaudible>.

