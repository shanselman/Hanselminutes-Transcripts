WEBVTT FILE

1
00:00:12.090 --> 00:00:17.490
From hanselminutes.com. It's Hanselman. It's
a weekly discussion with web

2
00:00:17.490 --> 00:00:22.230
developer and technologist Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.230 --> 00:00:28.560
number three 51 recorded live
Thursday, December 20th, 2012. This episode is

4
00:00:28.560 --> 00:00:31.530
brought to you by Tellerik
offering the best in developer

5
00:00:31.530 --> 00:00:35.070
tools and support online app
T E L E R

6
00:00:35.070 --> 00:00:40.500
I k.com and by franklins.net
training developers to work smarter

7
00:00:40.890 --> 00:00:43.980
and now offering gesture pack
a powerful gesture, recording and

8
00:00:43.980 --> 00:00:50.850
recognition system for Microsoft connect
for windows developers details@gesturepak.com. In

9
00:00:50.850 --> 00:00:54.480
this episode, Scott talks with
Richard CRL about the Nancy

10
00:00:54.480 --> 00:00:59.930
wet framework. Hi, this is
Scott Hanselman. This is another

11
00:00:59.930 --> 00:01:02.960
episode of Hansel minutes, a
holiday episode, and I'm talking

12
00:01:02.960 --> 00:01:06.440
to Richard CRL and how
are you, sir? I'm doing

13
00:01:06.440 --> 00:01:08.690
very well. Thank you. Thanks
for taking the time. I

14
00:01:08.690 --> 00:01:13.460
realized that it's the 27th of December
and we've all recovering from

15
00:01:13.460 --> 00:01:16.400
our Christmas comas. And having
you take the time on

16
00:01:16.400 --> 00:01:19.700
this kind of quasi holiday
week is a appreciated no

17
00:01:19.700 --> 00:01:22.700
problem. I wanted to, to
come back and talk about

18
00:01:23.330 --> 00:01:27.230
Nancy. We had talked about
Nancy, which was a, a

19
00:01:27.260 --> 00:01:32.540
dotnet micro web framework in
June of 2011. So it's

20
00:01:32.540 --> 00:01:35.780
been about 18 months and
I think that enough stuff

21
00:01:35.780 --> 00:01:39.350
has happened in the kind
of alternative dotnet framework space

22
00:01:39.740 --> 00:01:44.540
and also some of the
modularization of asp.net that it's

23
00:01:44.540 --> 00:01:47.390
time to come back and
talk about it again. And

24
00:01:47.390 --> 00:01:50.330
you do work for Pluralsight
and have recently done a

25
00:01:50.330 --> 00:01:54.650
Nancy course. Is that something
that Pluralsight subscribers can watch

26
00:01:54.680 --> 00:02:00.350
now? Yes, it is. Okay.
So Nancy fits into the

27
00:02:00.350 --> 00:02:08.450
dotnet ecosystem, how Nancy would
be built and.net. You use.net

28
00:02:08.450 --> 00:02:12.710
to use it right to,
to build your websites, but

29
00:02:13.160 --> 00:02:20.090
it has no dependency on
asp.net at all, unless you

30
00:02:20.120 --> 00:02:23.240
actually make it, which would
be using the ASP, not

31
00:02:23.240 --> 00:02:26.510
that hosting provider, which would
allow you to host it

32
00:02:26.510 --> 00:02:29.630
on. I spit it's it's
independent of system dot web,

33
00:02:30.890 --> 00:02:33.470
which is kind of interesting.
So it has its own

34
00:02:33.470 --> 00:02:37.790
HTTP listener and all that
created for it. Oh, that's

35
00:02:37.790 --> 00:02:40.610
it Interesting. So I had
assumed that if you were

36
00:02:40.610 --> 00:02:43.070
going to make a web
framework, you would kind of

37
00:02:43.070 --> 00:02:45.200
sit on top of, at
the very least system dot

38
00:02:45.200 --> 00:02:48.890
web. That's it that's an
interesting design decision. I think

39
00:02:48.890 --> 00:02:52.190
they did that too, so
that they being Andrea and

40
00:02:52.400 --> 00:02:56.480
Steven. So the code junkie
and grumpy to do that,

41
00:02:56.690 --> 00:02:59.890
to basically make sure that
they weren't dependent the changes

42
00:02:59.890 --> 00:03:03.190
that would come across via,
you know, what system that

43
00:03:03.190 --> 00:03:07.810
web is, is making you
do to handling it their

44
00:03:07.810 --> 00:03:09.790
own way. And I think
we'll probably get into that

45
00:03:09.790 --> 00:03:13.710
their own way a little
bit later here. Right? Understand

46
00:03:13.710 --> 00:03:16.680
that Nancy also works on
mano, a mano being the

47
00:03:17.100 --> 00:03:21.960
clean room implementation of.net on
Linux and other alternative operating

48
00:03:21.960 --> 00:03:24.420
systems. And one of the
goals that they have is

49
00:03:24.420 --> 00:03:27.240
to make Nancy work smoothly
on motto and be able

50
00:03:27.280 --> 00:03:30.840
use model develop. Right. So
being able to, to sit

51
00:03:30.870 --> 00:03:33.210
just, just on the CLR
is a way for them

52
00:03:34.050 --> 00:03:39.660
to do Correct. Okay. Right.
So it's a micro framework

53
00:03:39.690 --> 00:03:44.040
and it is just for.net.
It sits on top of.net,

54
00:03:44.040 --> 00:03:47.070
but not on top of
asp.net. Does it, does it

55
00:03:47.070 --> 00:03:50.760
have any relationship to other
frameworks? Is it like, is

56
00:03:50.760 --> 00:03:53.850
it inspired by Ruby or
inspired by something on rails?

57
00:03:54.090 --> 00:03:56.130
Yeah, I would say that
the inspiration for it was

58
00:03:56.130 --> 00:04:01.500
Sinatra. So building a, not
quite a port, but an

59
00:04:01.500 --> 00:04:07.560
inspiration of, of Sinatra on.net
was where Andreas originally, when

60
00:04:07.560 --> 00:04:11.430
he originally put this out,
was talking about in his

61
00:04:12.060 --> 00:04:16.530
particular work he's, he's using.net.
They don't get to use

62
00:04:16.530 --> 00:04:20.610
Ruby. And Sinatra is a
very compelling framework to use.

63
00:04:21.000 --> 00:04:22.890
I've used it myself a
couple of times and it's

64
00:04:22.920 --> 00:04:26.880
actually pretty fun to write
in. So to be able

65
00:04:26.880 --> 00:04:30.420
to do that on.net would
be a kind of an

66
00:04:30.420 --> 00:04:32.460
interesting thing to pull off.
And I think they did

67
00:04:32.460 --> 00:04:35.490
that very well, actually. Right.
And this is something that

68
00:04:35.490 --> 00:04:38.010
happens a lot in.net where
it's like, Hey, we have

69
00:04:38.010 --> 00:04:40.860
this language, we have this
great CLR. We have this

70
00:04:41.160 --> 00:04:44.760
experience that we're very familiar
with. We want the fun

71
00:04:44.790 --> 00:04:49.470
and the flexibility of framework
X written on whatever on

72
00:04:49.470 --> 00:04:52.530
Python or on Ruby or
whatever, except we have Dutton

73
00:04:52.530 --> 00:04:54.720
available to us. And that's
what we're excited about. So

74
00:04:55.230 --> 00:05:00.090
hands Nancy Sinatra. Yes. Very
cool. Yes, you got it.

75
00:05:00.660 --> 00:05:02.430
Okay. So where do I
start if I'm going to

76
00:05:02.430 --> 00:05:06.420
make a Nancy application and
where am I making apps

77
00:05:06.420 --> 00:05:08.700
that return HTML or am
I making apps at fraternal

78
00:05:08.710 --> 00:05:12.750
Jason? You're making apps that
return pretty much whatever you

79
00:05:12.750 --> 00:05:16.410
want. So HTML is the
default. You can return Jason.

80
00:05:16.520 --> 00:05:21.240
They recently put in content
negotiation. So depending on what

81
00:05:21.240 --> 00:05:24.720
you asked for, you can
get back either Jason or

82
00:05:24.750 --> 00:05:28.440
XML or HTML or whatever
you've asked for as far

83
00:05:28.440 --> 00:05:32.880
as a content type, it's,
it's fairly easy to get

84
00:05:32.880 --> 00:05:38.130
started, especially if you're used
to doing the, the particular

85
00:05:38.130 --> 00:05:42.090
ASP net type style in
visual studio, you can go

86
00:05:42.090 --> 00:05:45.360
grab the ASP net hosting.
So Nancy dot, hosting dot

87
00:05:45.360 --> 00:05:49.110
ASP net, and it will
pull down the, the Nancy

88
00:05:49.110 --> 00:05:51.210
core and the hosting provider.
And you can run it

89
00:05:51.210 --> 00:05:54.540
right on ISDN. It's actually
fairly easy in the course

90
00:05:54.540 --> 00:05:57.710
that I did. I show
that and you a up

91
00:05:57.710 --> 00:06:01.630
and running site in just
a few minutes. Okay. Okay.

92
00:06:01.690 --> 00:06:04.360
So let's, let's break that
down a little bit. When

93
00:06:04.360 --> 00:06:06.910
I make a new Nancy
application, do I say file

94
00:06:06.910 --> 00:06:09.220
new Nancy application and it's
in there somewhere? Or do

95
00:06:09.220 --> 00:06:14.270
I make a class library?
You do file new. The,

96
00:06:14.270 --> 00:06:17.290
the easiest way would be
to do the empty ASP

97
00:06:17.290 --> 00:06:22.000
net project. So you get
basically no folders, just the

98
00:06:22.000 --> 00:06:27.790
basic basic site. And then
you pull in those packages,

99
00:06:27.790 --> 00:06:31.000
the ASP net hosting package
and Nancy package, and you

100
00:06:31.000 --> 00:06:35.740
have a one class and
you can basically have an

101
00:06:35.740 --> 00:06:38.860
end point that returns so
that I think on the

102
00:06:39.850 --> 00:06:43.030
Nancy effects.org, if you go
to that site, you can

103
00:06:43.030 --> 00:06:46.900
see the smallest Nancy application
is, you know, like six

104
00:06:46.900 --> 00:06:50.650
lines of code that will
return you back an HTML

105
00:06:50.650 --> 00:06:56.770
response. Okay. And you typically
will derive from Nancy module,

106
00:06:56.890 --> 00:06:59.410
correct? That is not an
HDP module. Again, there is

107
00:06:59.410 --> 00:07:05.230
no asp.net. Right? Right. So
Nancy module is, is just

108
00:07:05.230 --> 00:07:09.740
kind of a wrapper class
for it. It hosts the

109
00:07:09.760 --> 00:07:14.070
Nancy context, which has a
request object to response objects,

110
00:07:14.070 --> 00:07:17.740
some collection type things for
you to work with. But

111
00:07:17.740 --> 00:07:22.240
the request is basically the
HTTP requests that you've received

112
00:07:22.450 --> 00:07:26.050
from your browser and responses,
what you're sending back. And

113
00:07:26.050 --> 00:07:29.140
so you, you kind of
get into the pipeline. So

114
00:07:29.140 --> 00:07:31.120
like you have the ESPN
that pipeline, there is a

115
00:07:31.130 --> 00:07:35.380
Nancy pipeline. And so there's
things that happen before you

116
00:07:35.380 --> 00:07:37.540
handle the request. And there
are things that happen after

117
00:07:37.540 --> 00:07:39.850
you handle the requests and
you handle the request as

118
00:07:39.850 --> 00:07:43.210
well. No, you're using the
very simple example is public

119
00:07:43.210 --> 00:07:47.260
class, some module derives from
Nancy module. Then in the

120
00:07:47.260 --> 00:07:51.490
constructor, it uses an X,
I think an extremely unusual

121
00:07:51.520 --> 00:07:57.220
syntax that, that likes some
aspects of C-sharp, but also

122
00:07:57.220 --> 00:08:00.340
doesn't really look like C-sharp
at least because it's so

123
00:08:00.340 --> 00:08:03.760
unusual there basically he's saying,
get, then he uses an

124
00:08:03.760 --> 00:08:07.090
array indexer with a strings,
you'll say, get a Ray

125
00:08:07.090 --> 00:08:12.640
indexer slash so he's putting
into an array index, not

126
00:08:12.640 --> 00:08:15.970
an array rather, but a
is a hash table. It's

127
00:08:15.970 --> 00:08:20.620
a dictionary. Yes. A dictionary
indexed on, on a slash.

128
00:08:21.010 --> 00:08:24.700
And then he uses the,
the anonymous underscore and then

129
00:08:24.700 --> 00:08:28.540
passes in a Lambda. So
it, the, the effect of

130
00:08:28.540 --> 00:08:33.100
it is like, is this
really.net? Is this really a

131
00:08:33.100 --> 00:08:36.460
C-sharp, it's kind of a
visually an unusual effect. Cause

132
00:08:36.730 --> 00:08:39.850
we don't find ourselves writing
lines like that very often.

133
00:08:40.570 --> 00:08:43.270
Well, yeah, normally we don't
write that much code into

134
00:08:43.270 --> 00:08:46.150
a constructor as far as
doing actual things. I think

135
00:08:46.150 --> 00:08:48.940
that's probably the first thing
that throws people is what

136
00:08:48.940 --> 00:08:51.790
am I doing in here?
And the underscore is as

137
00:08:51.790 --> 00:08:59.160
throwing people as, as having
that, that particular anonymous parameter

138
00:08:59.190 --> 00:09:02.720
in there, right. Normally we
name our parameters, but that,

139
00:09:02.720 --> 00:09:06.600
that really is something that
helps you pull things off

140
00:09:06.630 --> 00:09:10.770
what you're putting in that
indexer. So, and really it's

141
00:09:10.770 --> 00:09:14.100
a route. So that particular
thing you're just defining a

142
00:09:14.100 --> 00:09:16.830
route. So the route has
a method of get, it

143
00:09:16.830 --> 00:09:19.860
has a path of slash
and we're going to do

144
00:09:19.860 --> 00:09:23.910
something with that. So you
can put post and put

145
00:09:23.910 --> 00:09:27.480
and delete in there and
have your particular pathing in

146
00:09:27.480 --> 00:09:31.400
there. Okay. So then the,
the name, the named dictionary

147
00:09:31.400 --> 00:09:35.750
get is representing the HDP
verb that I want. So

148
00:09:35.750 --> 00:09:38.270
all I presume that all
the verbs that one would

149
00:09:38.270 --> 00:09:41.720
want are available, like get
post put delete, and probably

150
00:09:41.720 --> 00:09:46.310
the obscure ones as well.
Then the array indexer is

151
00:09:46.730 --> 00:09:48.720
I keep saying array, but
I think of those as

152
00:09:48.720 --> 00:09:52.670
arrays, the, the dictionary indexer,
there is a, The, the

153
00:09:52.670 --> 00:09:57.560
route right. Underscore is just,
I suppose I could name

154
00:09:57.560 --> 00:10:00.440
it if I want it.
Right. So what that is

155
00:10:00.440 --> 00:10:04.460
is if you create a
parameter in your route. So

156
00:10:04.460 --> 00:10:08.660
for instance, if I say
slash name slash something, and

157
00:10:08.660 --> 00:10:11.000
I put it in, in
curly braces in my route,

158
00:10:11.270 --> 00:10:14.480
it will pull off that
particular parameter and give you

159
00:10:14.480 --> 00:10:18.740
access to it. So I'm
trying to think of a

160
00:10:18.740 --> 00:10:21.020
good example of doing that.
I use it all the

161
00:10:21.020 --> 00:10:24.620
time. So you said, get
greet, And then we're going

162
00:10:24.620 --> 00:10:27.590
to pass in the person's
name, Right. Or passing an

163
00:10:27.590 --> 00:10:30.260
ID. So if I say,
I want to get customer

164
00:10:30.530 --> 00:10:34.880
number, whatever. So customer slash
and our parameter would be

165
00:10:34.880 --> 00:10:39.770
ID. I could then in
the function there have access

166
00:10:39.770 --> 00:10:44.540
to underscore.id. And, you know,
so if I passed in

167
00:10:44.540 --> 00:10:46.790
a one or a two
or whatever, that would be

168
00:10:46.790 --> 00:10:49.730
available to me as a
parameter. Okay. And presumably if

169
00:10:49.730 --> 00:10:52.580
you pass in multiple ones,
you would have variable, common

170
00:10:52.580 --> 00:10:56.150
variable. Right, right, right. The
name is up to you.

171
00:10:56.150 --> 00:11:00.800
And how does it map
them to each other? Like,

172
00:11:00.800 --> 00:11:03.350
I don't have to name
it ID. No, you don't

173
00:11:03.350 --> 00:11:04.820
have to name an ID.
You name it, whatever you

174
00:11:04.820 --> 00:11:08.600
want. No. Where name comes
from. Like, if I say,

175
00:11:08.780 --> 00:11:10.580
well, the customer an ID
let's for example, if I

176
00:11:10.580 --> 00:11:15.620
say slash customer slash curly
brace ID, right. Do I

177
00:11:15.620 --> 00:11:18.860
have to name that next
variable ID? Or do I

178
00:11:18.860 --> 00:11:21.380
dig that out some other
way? So you'd be slash

179
00:11:21.440 --> 00:11:25.670
curly base slash ID slash
closed curly brace slash something,

180
00:11:25.880 --> 00:11:28.220
you know, I, if I
wanted to get their orders,

181
00:11:28.220 --> 00:11:32.570
so I got that particular
customer slash orders slash order

182
00:11:32.570 --> 00:11:37.850
ID. Right. So I just
get access to those from

183
00:11:37.850 --> 00:11:41.150
that particular Lambda. I see.
So it isn't that it's

184
00:11:41.150 --> 00:11:43.220
not the name of the
variable, it's the digging around

185
00:11:43.220 --> 00:11:46.610
in it. I would say
a customer slash ID. And

186
00:11:46.610 --> 00:11:50.030
then later on, I could
say X dot. Right, right.

187
00:11:50.330 --> 00:11:52.820
Okay. Okay. And is that
a dynamic that then gets

188
00:11:52.820 --> 00:11:54.610
passed in that seems like
a lot of dynamic stuff.

189
00:11:55.350 --> 00:11:57.270
Oh, there's always a whole
ton of dynamic stuff going

190
00:11:57.270 --> 00:12:01.170
on. They actually have a
class called the dynamic dictionary.

191
00:12:01.170 --> 00:12:04.950
So it, it does, it
does some fun stuff where

192
00:12:04.950 --> 00:12:07.590
you get access to it.
It's it's case insensitive by

193
00:12:07.590 --> 00:12:12.210
default. So I can do,
you know, I can have

194
00:12:12.510 --> 00:12:15.150
lowercase in my path there
and I can grab it

195
00:12:15.150 --> 00:12:18.930
using uppercase if I want
in the function. So, you

196
00:12:18.930 --> 00:12:21.000
know, they're doing some fun
stuff with dynamics that can

197
00:12:21.000 --> 00:12:23.790
get you in trouble sometimes,
but for the most part,

198
00:12:23.790 --> 00:12:27.630
it's pretty smart. Yeah. And
I think that there's a,

199
00:12:27.720 --> 00:12:31.530
an interesting back and forth
right now with the dotnet

200
00:12:31.530 --> 00:12:35.130
community, with some groups inside
of Microsoft, that, that aren't

201
00:12:35.430 --> 00:12:39.360
the asp.net team, as well
as the asp.net team itself.

202
00:12:39.390 --> 00:12:42.690
As we kind of come
to terms with what modern

203
00:12:42.690 --> 00:12:45.720
C-sharp looks like, you know,
it doesn't all have to

204
00:12:45.720 --> 00:12:49.500
be statically typed. It can
have this, this nice middle

205
00:12:49.500 --> 00:12:52.980
ground, you know, dynamic is,
is effectively turning on a

206
00:12:52.980 --> 00:12:57.570
switch that says unsafe. But
for some people it's a

207
00:12:57.570 --> 00:12:59.550
way of turning on a
switch that just says, and

208
00:12:59.550 --> 00:13:02.400
now the fun happens, right?
If you look at folks

209
00:13:02.400 --> 00:13:05.440
like Rob, like my friend,
Rob Connery, when you're doing,

210
00:13:05.730 --> 00:13:09.510
you're doing things like massive,
his is RM or things

211
00:13:09.510 --> 00:13:11.970
like simple data or many
of the, any of the

212
00:13:11.970 --> 00:13:16.470
other micro ORMs, those guys
are saying, how much fun

213
00:13:16.470 --> 00:13:19.800
can we have with dynamics
and how little code can

214
00:13:19.800 --> 00:13:22.770
we, can. We do like
a lot of work with

215
00:13:23.160 --> 00:13:26.310
and things are becoming very
interesting. The question is then

216
00:13:26.490 --> 00:13:29.730
how much ceremony is appropriate?
You know, I mean, IntelliSense

217
00:13:29.760 --> 00:13:31.890
is useful how much it
tells us it's am I

218
00:13:31.890 --> 00:13:37.500
losing here with Nancy? You're
actually not losing too much.

219
00:13:39.390 --> 00:13:42.150
The dynamic just makes it
easier. Yes. You use a

220
00:13:42.150 --> 00:13:45.180
whole lot less code to
deal with those things. Because

221
00:13:45.630 --> 00:13:49.140
when I pass ID into
another function, if that function

222
00:13:49.140 --> 00:13:52.800
is statically typed, it's going
to go ahead and, and

223
00:13:52.830 --> 00:13:55.950
cast that over into that
function. Right? You're you're going

224
00:13:55.950 --> 00:13:58.380
to get what you need
when you throw that in

225
00:13:58.380 --> 00:14:02.610
there. Sometimes though when you
return back, if you here's

226
00:14:02.610 --> 00:14:06.300
the part about C-sharp that's
that real R or dotnet

227
00:14:06.300 --> 00:14:09.960
that that gets us in
trouble is if I return

228
00:14:09.960 --> 00:14:13.290
from a function that it
passed the dynamic in, even

229
00:14:13.290 --> 00:14:16.770
if the function is statically
typed, I get a dynamic

230
00:14:16.770 --> 00:14:21.150
back and that causes problems
sometimes down the line for

231
00:14:21.150 --> 00:14:23.750
us. Okay. Well, what might
be an example of something

232
00:14:23.750 --> 00:14:26.790
like this? So if I,
if I were to do

233
00:14:26.790 --> 00:14:31.110
that, a customer order or
customer ID or whatever, you

234
00:14:31.110 --> 00:14:33.960
know, I pass in this
dynamic of an ID, but

235
00:14:33.960 --> 00:14:37.110
I'm returning back a customer.
What I actually get back

236
00:14:37.110 --> 00:14:40.410
is that dynamic. And if
I may or may not

237
00:14:41.100 --> 00:14:44.100
be able to work without,
unless I cast it into

238
00:14:44.160 --> 00:14:50.310
the customer, does that make
sense? I think so. Try,

239
00:14:50.730 --> 00:14:57.860
try again. Let's see. So
sometimes like, if, if you

240
00:14:57.860 --> 00:14:59.630
have a list I'm going
to have to turn back

241
00:14:59.660 --> 00:15:01.970
a list of orders, right.
And I'm going to send

242
00:15:01.970 --> 00:15:05.870
that through an iterator. Sometimes
the iterator won't know what

243
00:15:05.870 --> 00:15:08.060
to do with that. Right?
If you do a VAR

244
00:15:08.300 --> 00:15:11.690
order in orders, if that
orders is dynamic, I might

245
00:15:11.690 --> 00:15:13.850
not. It might not realize
that that's a list and

246
00:15:13.850 --> 00:15:16.840
it starts complaining about it.
So they don't have to

247
00:15:16.840 --> 00:15:19.090
give it some hint. Right.
I have to, I have

248
00:15:19.090 --> 00:15:20.740
to hint the framework or
I have to hit my

249
00:15:20.740 --> 00:15:23.920
code to say that this
is actually not a dynamic.

250
00:15:23.920 --> 00:15:27.700
It's a, it's a list
of orders. Okay. Yeah. That

251
00:15:27.700 --> 00:15:30.130
makes sense. So basically if
it gets a little confused,

252
00:15:30.130 --> 00:15:32.440
if it can't glean something,
I give it a little

253
00:15:32.440 --> 00:15:35.380
hand. Right, Right. And I
think that's a problem with

254
00:15:35.740 --> 00:15:38.260
C sharp maybe and not.net.
Cause I know F sharp

255
00:15:38.260 --> 00:15:41.530
is really good at, at,
at figuring out what types

256
00:15:41.530 --> 00:15:45.190
you're working with. Right. And
this is where, you know,

257
00:15:45.190 --> 00:15:49.120
the, the whole static versus
dynamic thing gets a little

258
00:15:49.120 --> 00:15:52.390
confusing, but it's a tiny
price to pay for a

259
00:15:52.390 --> 00:15:56.080
very, very powerful concept. Yeah.
So I've noticed that, you

260
00:15:56.080 --> 00:15:59.380
know, there, there are times
when I've used dynamic to

261
00:16:00.280 --> 00:16:02.380
deal with things that were,
I'd have to cast things

262
00:16:02.380 --> 00:16:06.340
around and create multiple methods
to handle something where they

263
00:16:06.340 --> 00:16:09.130
have very similar signatures. So
my classes have very similar

264
00:16:09.130 --> 00:16:11.290
signatures and if I cast
it the dynamic and I

265
00:16:11.290 --> 00:16:14.380
handle it in the same
way, it just works. Exactly.

266
00:16:14.380 --> 00:16:17.590
Exactly. And I think that
the Nancy guys have done

267
00:16:17.590 --> 00:16:19.900
a good job of finding
the right amount of balance

268
00:16:20.200 --> 00:16:24.490
because there's clearly a sense
of fun to the framework

269
00:16:24.850 --> 00:16:27.610
and a sense of, of,
of cleanliness and a sense

270
00:16:27.610 --> 00:16:32.260
of haiku almost, you know,
they're, they're trying to do

271
00:16:32.500 --> 00:16:35.830
as much as possible for
as little as possible. Right.

272
00:16:36.070 --> 00:16:39.340
Right. Yeah. And in order
to do that dynamic, I

273
00:16:39.340 --> 00:16:41.110
think is the way to
go. And I'd like to

274
00:16:41.110 --> 00:16:45.130
see more people like the,
like the asp.net team ourselves

275
00:16:45.640 --> 00:16:47.470
and embrace that. I think
we saw a little bit

276
00:16:47.470 --> 00:16:51.580
of that with the orchard
project, but I think it's

277
00:16:51.580 --> 00:16:56.230
an ongoing, confusing thing for,
for.net developers. Yeah. It's hard

278
00:16:56.230 --> 00:16:58.450
to get used to, but
you know, once you start

279
00:16:58.450 --> 00:17:00.580
using dynamic and you see
how powerful it can be,

280
00:17:00.580 --> 00:17:03.610
I think you kind of
get addicted. Of course, I

281
00:17:03.610 --> 00:17:05.740
were one of the guys
that I work with actually

282
00:17:05.740 --> 00:17:09.470
hates dynamics because of this,
you know, casting problem. It,

283
00:17:09.470 --> 00:17:13.030
it just causes him problems
all the time. And so

284
00:17:13.120 --> 00:17:14.680
yeah, you can be on
either side of the fence

285
00:17:14.680 --> 00:17:16.480
without again. Well, I think
it gets to ease of

286
00:17:16.480 --> 00:17:19.570
debugging. People like IntelliSense it
like debugging. So let's talk

287
00:17:19.570 --> 00:17:21.130
a little bit more about
the fact that all of

288
00:17:21.130 --> 00:17:25.090
this is in the constructor,
you're going to fill up

289
00:17:25.120 --> 00:17:27.190
almost where the constructor becomes.
It's it's, you know, the

290
00:17:27.190 --> 00:17:31.000
whole program. Can I still
hit break points? And when

291
00:17:31.000 --> 00:17:32.980
I hit them, am I
really in the constructor? Or

292
00:17:32.980 --> 00:17:35.140
am I getting those break
points when the action occurs?

293
00:17:35.440 --> 00:17:38.410
So just like anything, you
know, you can refactor out

294
00:17:38.410 --> 00:17:40.720
of that. So you may
start with a very small

295
00:17:40.720 --> 00:17:43.540
class where you're returning right
out of the function, but

296
00:17:43.540 --> 00:17:46.990
that function is actually a
type it's returning. It's returning

297
00:17:47.020 --> 00:17:50.100
a response. So it's a
function that takes a string

298
00:17:50.100 --> 00:17:53.610
and maybe some conditional logic
and then returning a response.

299
00:17:54.150 --> 00:17:56.610
So really I can just
pass that to a method.

300
00:17:57.180 --> 00:18:00.210
And once your classes get
a little larger, you may

301
00:18:00.210 --> 00:18:04.400
want to, to pull that
out. But even then you,

302
00:18:04.400 --> 00:18:07.770
you're probably putting handlers inside.
You know, you're not really

303
00:18:07.800 --> 00:18:10.170
doing all of your work
inside that constructor. You're going

304
00:18:10.170 --> 00:18:12.360
to pass that out to
another handler class or something.

305
00:18:12.530 --> 00:18:15.260
Right. And it's also important
to remember that we aren't

306
00:18:15.260 --> 00:18:19.280
actually putting code in the
constructor. It's kind of funny.

307
00:18:19.280 --> 00:18:20.840
You're like, well, wait a
second. All the code is,

308
00:18:20.840 --> 00:18:24.980
and the instructor, well, you're
setting up actions that will

309
00:18:24.980 --> 00:18:28.490
occur later. You're hooking up
event handlers in the constructor.

310
00:18:29.180 --> 00:18:31.640
They're not, you know, nothing's
running in the constructor. That

311
00:18:31.670 --> 00:18:34.100
is anything you need to
worry about. And I'm sure

312
00:18:34.100 --> 00:18:36.740
that one could argue, well,
this is where we needed

313
00:18:36.740 --> 00:18:38.450
an, a knit and there
needed to be an, a

314
00:18:38.450 --> 00:18:40.040
knit and it before Nitten
and all this kind of

315
00:18:40.040 --> 00:18:44.720
stuff. I bet if we
were speaking for Andreas and

316
00:18:44.720 --> 00:18:47.570
the other folks on Nancy,
they would say, but that

317
00:18:47.570 --> 00:18:50.690
would be more complicated than
it needs to be. Yeah.

318
00:18:50.690 --> 00:18:52.850
If you want to have
a real simple program, you

319
00:18:52.850 --> 00:18:56.150
don't need all of that.
Right. A function will do

320
00:18:56.150 --> 00:18:58.940
fine. Exactly. And there's something
to be said for making

321
00:18:58.940 --> 00:19:04.880
hello world. Super easy, super
simple. Yeah. It's, it's really

322
00:19:04.880 --> 00:19:07.790
an easy framework to get
people excited about because you

323
00:19:07.790 --> 00:19:11.070
look at how easy it
is to get started. You

324
00:19:11.090 --> 00:19:13.610
can do complex things in
this framework. I mean, we

325
00:19:13.610 --> 00:19:15.410
call it a micro framework.
And I think when it

326
00:19:15.410 --> 00:19:18.440
started, it was very much
a micro framework, but it,

327
00:19:18.480 --> 00:19:22.730
it scales pretty well to
larger projects. Yeah. Well, and

328
00:19:22.730 --> 00:19:24.920
it's got a lot of
really interesting helpers that I,

329
00:19:24.980 --> 00:19:26.750
that I like. And one
of the things that made

330
00:19:26.750 --> 00:19:31.550
me happy about rails was
the action pack. You know,

331
00:19:31.550 --> 00:19:34.910
all that kind of cool
convenience stuff that you add

332
00:19:34.910 --> 00:19:39.170
on to Ruby that blurs
the line between, well, what's

333
00:19:39.170 --> 00:19:41.210
Ruby and what's rails and
what's built in, and what's

334
00:19:41.210 --> 00:19:43.940
not, there's some cool stuff
in Nancy that I feel

335
00:19:43.940 --> 00:19:47.150
like should be just done
that way everywhere. Like you

336
00:19:47.150 --> 00:19:52.730
can say response.as J S
to return JavaScript and response.as

337
00:19:52.740 --> 00:19:56.810
image. It's so much nicer
than, than the way things

338
00:19:56.810 --> 00:20:00.260
are done in other frameworks.
And since I've been using

339
00:20:00.260 --> 00:20:04.070
Nancy, I'm seeing some of
those patterns you might code

340
00:20:04.070 --> 00:20:06.110
has a bunch of that
in it as well. I

341
00:20:06.110 --> 00:20:08.270
create extension methods all the
time to handle that kind

342
00:20:08.270 --> 00:20:12.260
of thing. It's just clean
our code. Right. If I'm

343
00:20:12.260 --> 00:20:17.880
not calling out a new
something to, to call a

344
00:20:17.910 --> 00:20:20.450
method, right. I just create
this extension method and it

345
00:20:20.450 --> 00:20:24.020
works. Yeah. Yeah, absolutely. And
it makes for, for very,

346
00:20:24.170 --> 00:20:26.780
very fluent without over trying
not to overuse that word,

347
00:20:26.780 --> 00:20:30.350
fluent kind of code. I'm
not a huge fan of

348
00:20:30.410 --> 00:20:33.980
trying to build fake sentences
in.net. Right. I think that

349
00:20:33.980 --> 00:20:36.200
there are some frameworks that
over overdo it, but I

350
00:20:36.200 --> 00:20:38.900
don't get that impression with
Nancy. No. One of the

351
00:20:38.900 --> 00:20:41.480
things that I've found interesting
about it, because I'm a,

352
00:20:41.900 --> 00:20:44.840
you know, I'm an asp.net
guy from, from day zero.

353
00:20:45.050 --> 00:20:47.620
So it's been a little
confusing when I start poking

354
00:20:47.620 --> 00:20:51.940
around in things like request
dot form. I expect it

355
00:20:51.940 --> 00:20:55.390
to work the way I
would think request that form

356
00:20:55.630 --> 00:20:58.960
works currently. But when I
say request dot form, it's

357
00:20:58.960 --> 00:21:02.200
not quote unquote my request
form. It's not the one

358
00:21:02.200 --> 00:21:05.230
that I'm used to it.
And asp.net. It's more dynamic

359
00:21:05.230 --> 00:21:08.980
dictionary. It's a dynamic dictionary.
Yeah. But that's cool. Which

360
00:21:08.980 --> 00:21:13.840
means I get to say
request.form.email. Yes. And it'll automatically

361
00:21:13.840 --> 00:21:15.190
pull it out there and
I don't have to look

362
00:21:15.190 --> 00:21:20.850
at the ugly dictionary indexer.
Yeah. It's I love dynamic

363
00:21:20.850 --> 00:21:23.100
externa. I actually wished that
was actually part of the

364
00:21:23.100 --> 00:21:26.820
framework. You know, the, the
BCO. That would be awesome.

365
00:21:27.630 --> 00:21:29.310
Yeah. You know, it's, I
don't know why I think,

366
00:21:29.610 --> 00:21:31.110
I think there's, and this
is what I was saying

367
00:21:31.110 --> 00:21:33.210
before. There's still a fear
that we're giving people too

368
00:21:33.210 --> 00:21:38.550
much. Yeah. You can, but
you know, you have to

369
00:21:38.550 --> 00:21:41.280
learn these things and you
have to, to make sure

370
00:21:41.280 --> 00:21:43.680
that you're doing things in
a proper way. And if

371
00:21:43.680 --> 00:21:45.930
you write tests around it,
especially, you're going to be

372
00:21:46.440 --> 00:21:50.100
very, very much in a
good place. Now, do you

373
00:21:50.100 --> 00:21:55.350
make a distinction between having
a, a web services application

374
00:21:55.380 --> 00:21:59.220
and a, an actual web
app that returns HTTP, like

375
00:21:59.220 --> 00:22:04.110
right now there's asp.net MVC.
There's kind of asp.net proper,

376
00:22:04.590 --> 00:22:07.560
and there's a web API
and it's kind of a

377
00:22:07.560 --> 00:22:11.010
little balkanized and we're currently
kind of bringing that together

378
00:22:11.010 --> 00:22:14.580
into this one asp.net concept.
Right. And initially I thought

379
00:22:14.580 --> 00:22:17.940
that Nancy was just about
returning JavaScript and doing web

380
00:22:17.940 --> 00:22:21.180
services, but now I'm seeing
apps that'll do everything. So

381
00:22:21.450 --> 00:22:23.970
an entire web app can
be made in this. Yes.

382
00:22:24.210 --> 00:22:27.300
Yes. And actually when I
started using it, I think

383
00:22:27.300 --> 00:22:29.640
I started using it when
it was at dot eight.

384
00:22:30.990 --> 00:22:32.910
I started looking at it
at dot six, but at

385
00:22:32.910 --> 00:22:36.120
dot eight, I started using
it. It's at dot 14

386
00:22:36.120 --> 00:22:40.530
one right now, very close
to 15. So probably year

387
00:22:40.530 --> 00:22:42.590
and a half, two years
ago, that's all I used

388
00:22:42.590 --> 00:22:45.120
it for. It was for
an API end point, a

389
00:22:45.120 --> 00:22:51.630
web API end point, returning
Jason. And it wasn't until

390
00:22:51.630 --> 00:22:53.760
a little bit later that
I started looking at how

391
00:22:53.760 --> 00:22:56.340
can we use this as,
as you know, a full

392
00:22:56.340 --> 00:23:01.710
on web app and with
continental content negotiation, which came

393
00:23:01.710 --> 00:23:04.980
out with 12. Now, you
don't have to decide, right.

394
00:23:05.030 --> 00:23:08.400
Your, your end points can
be an API end point

395
00:23:08.400 --> 00:23:11.940
or of you end point.
And it's, it's really, it's

396
00:23:11.940 --> 00:23:14.370
really wild. So we, you
can change how you think

397
00:23:14.370 --> 00:23:16.320
of something. So a lot
of the times when you

398
00:23:16.320 --> 00:23:17.820
think of I'm going to
go out and look at

399
00:23:17.820 --> 00:23:21.600
an API documentation site, right?
So you can go out

400
00:23:21.600 --> 00:23:23.820
to stack overflow and you
can look at their API

401
00:23:23.820 --> 00:23:26.280
and how you want to
interact with it. Well, that

402
00:23:26.280 --> 00:23:30.840
API interaction point can also
be your documentation point, right.

403
00:23:30.960 --> 00:23:32.850
Depending on how I come
to it. So if I

404
00:23:32.850 --> 00:23:36.180
come to it with a
browser, I can see how

405
00:23:36.180 --> 00:23:38.100
to interact with it because
I'm going to return one

406
00:23:38.100 --> 00:23:40.080
type of view. But if
I actually come to it

407
00:23:40.290 --> 00:23:47.480
using a XHR request, right,
I I'm actually interacting and

408
00:23:47.480 --> 00:23:50.900
saying, except Jason or <inaudible>,
I'm going to get a

409
00:23:50.900 --> 00:23:53.840
different response back, which probably
just the API end point.

410
00:23:54.530 --> 00:23:56.930
So it's kind of interesting
to see that mesh and

411
00:23:56.930 --> 00:23:58.880
that I'm really excited. I
haven't been able to work

412
00:23:58.880 --> 00:24:01.760
with that too much yet,
but I'm really excited to,

413
00:24:01.910 --> 00:24:03.980
to be able to have
one end point that acts

414
00:24:03.980 --> 00:24:07.690
as my documentation and as
my API endpoint. Right. Right.

415
00:24:07.690 --> 00:24:10.990
It's a, it's almost like
a formalization that the URL

416
00:24:11.050 --> 00:24:14.380
is an important user interface
element And it is right.

417
00:24:14.380 --> 00:24:16.720
That's what HTT was supposed
to be. It's just a

418
00:24:16.720 --> 00:24:19.720
resource end point. And I
know that you've probably heard

419
00:24:19.720 --> 00:24:22.810
Glenn block go off on,
on resources, right. This isn't

420
00:24:22.930 --> 00:24:26.020
a URI that points to
a resource and your representation

421
00:24:26.020 --> 00:24:28.750
that comes back depends on
what you're asking for. Right.

422
00:24:28.840 --> 00:24:31.090
And this is a perfect
example. I'm just, just to

423
00:24:31.090 --> 00:24:36.430
URI to a resource. I
think that that web API

424
00:24:36.430 --> 00:24:38.920
has been a net web
API begins to do that

425
00:24:39.010 --> 00:24:42.160
as well. But I don't
think any framework really does

426
00:24:42.160 --> 00:24:45.850
it with minimal ceremony. And
I think that's what the

427
00:24:45.850 --> 00:24:50.290
goal ultimately is. It should
be effortless, Right? Nancy is

428
00:24:50.290 --> 00:24:53.500
super duper happy path. That's
their mantra. It should be

429
00:24:53.500 --> 00:24:57.100
easy to do anything very
quick and it should also

430
00:24:57.100 --> 00:25:02.050
be easy to override the
native conventions. One of the

431
00:25:02.050 --> 00:25:04.330
other things that Nancy does
really well is it integrates

432
00:25:04.330 --> 00:25:08.410
with other projects. It has
a lot of, of extension

433
00:25:08.410 --> 00:25:12.130
points. So there's other existing
vendors like new Relic or

434
00:25:12.130 --> 00:25:16.020
there's existing projects like Elma.
So you can get like

435
00:25:16.030 --> 00:25:19.660
exception logging for Nancy using
Elma E L M H

436
00:25:20.860 --> 00:25:25.300
there's the lightning cash, the
Nancy lightning cash. Right. And

437
00:25:25.300 --> 00:25:30.130
then also razor cause razor
is open source. So there's

438
00:25:30.130 --> 00:25:31.660
a, I saw this one
thing that was kind of

439
00:25:31.660 --> 00:25:37.090
cool, asp.net Sprite and image
optimization for Nancy built on

440
00:25:37.090 --> 00:25:40.510
top of a Microsoft Sprite
and image optimization system. So

441
00:25:40.510 --> 00:25:43.480
people are plugging these things
together in, in really, really

442
00:25:43.480 --> 00:25:46.930
interesting ways. And it's funny
when you, if you look

443
00:25:46.930 --> 00:25:50.650
at that one, example that
from Jeff Clay's about implementing

444
00:25:50.650 --> 00:25:52.960
sprites and Nancy and razor
all on top of each

445
00:25:52.960 --> 00:25:57.280
other, you can tell which
part is very Nancy like,

446
00:25:57.400 --> 00:26:00.970
and which part is very
kind of classic asp.net because

447
00:26:01.090 --> 00:26:04.510
in the, in the convention,
there's a lot of list

448
00:26:04.510 --> 00:26:07.840
of funk of this, of
that and static convention builder.

449
00:26:07.840 --> 00:26:11.050
And it's kind of, it's
very old school.net. It's almost

450
00:26:11.050 --> 00:26:15.460
very, it's very noisy. It's
very visually from a code

451
00:26:15.460 --> 00:26:18.940
perspective, just a little verbose.
And then you set that

452
00:26:18.940 --> 00:26:21.700
up and you forget about
it. Okay. Then you go

453
00:26:21.700 --> 00:26:24.220
off into Nancy land and
you say, just Sprite down

454
00:26:24.220 --> 00:26:28.690
image and things just work.
So it was, it's kind

455
00:26:28.690 --> 00:26:32.860
of a funny example in
my mind of that, that,

456
00:26:32.860 --> 00:26:36.580
that tension between kind of
asp.net, which has some parts

457
00:26:36.580 --> 00:26:39.550
of it that are very
old and, and Nancy, which

458
00:26:39.550 --> 00:26:44.310
has a very fresh perspective.
And you see that, I

459
00:26:44.310 --> 00:26:46.380
Think once you start working
with it, you, like I

460
00:26:46.380 --> 00:26:51.150
said, you see your style
changing. You go from being

461
00:26:51.150 --> 00:26:55.680
verbose. You go from being
very specific to, I don't

462
00:26:55.680 --> 00:26:58.080
need to be that specific
anymore. I can make this

463
00:26:58.080 --> 00:27:01.260
easy for the consumer of
my app. And I think

464
00:27:01.260 --> 00:27:03.960
that's the big thing is,
is once you start looking

465
00:27:03.960 --> 00:27:06.300
at it, as somebody else
might have to consume this,

466
00:27:06.330 --> 00:27:09.870
you want it to look
pretty, you want it to

467
00:27:09.870 --> 00:27:14.790
be easy to use. And,
and that's, that's kind of

468
00:27:15.210 --> 00:27:18.480
cool thing about, about Nancy.
Yeah. The response as Jason,

469
00:27:18.480 --> 00:27:22.920
or, you know, all these
extension methods and making your

470
00:27:22.920 --> 00:27:27.900
API very visually appealing as
well as technically appealing. Right.

471
00:27:28.320 --> 00:27:31.070
Is, is nice too, to
be a part of. I

472
00:27:31.070 --> 00:27:33.860
think that that's something that
I've learned from, from open

473
00:27:33.860 --> 00:27:35.990
source. And I feel that
people who have been working

474
00:27:35.990 --> 00:27:38.990
in the asp.net or.net for
the last 10 years and

475
00:27:38.990 --> 00:27:42.260
haven't played with open source
may have lost their sense

476
00:27:42.260 --> 00:27:46.040
of fun. You know, I,
I think that when folks

477
00:27:46.040 --> 00:27:48.380
do stuff like this and
also like the guys on

478
00:27:48.380 --> 00:27:53.150
the code 52 project, and,
you know, I, I tend

479
00:27:53.150 --> 00:27:57.620
to gravitate towards open source
teams and projects that have

480
00:27:57.620 --> 00:28:00.320
a sense of fun and
a sense of code is

481
00:28:00.320 --> 00:28:05.300
poetry. Yes. And if you
ever do a pull request

482
00:28:05.300 --> 00:28:10.970
into Nancy, you'll actually encounter,
I talked to through a

483
00:28:10.980 --> 00:28:14.000
Twitter and, you know, get
up this morning on a

484
00:28:14.000 --> 00:28:19.730
poll request I made. And
Andrea sent back basically his,

485
00:28:20.300 --> 00:28:23.500
his style cop issues that
he had with my, my

486
00:28:23.580 --> 00:28:25.790
thing. And he said that
a grumpy dev calls him

487
00:28:25.790 --> 00:28:28.460
the human style cop. You
know, you, you have to

488
00:28:28.460 --> 00:28:31.310
do it his way. And
it has to be that

489
00:28:31.310 --> 00:28:35.150
way. And it's not, you
know, it's, it's not bad.

490
00:28:35.150 --> 00:28:38.690
It's, it's great. Because then
you're, you're always dealing with

491
00:28:38.690 --> 00:28:40.190
the same thing. So if
I go in and look

492
00:28:40.190 --> 00:28:41.630
at the code, I know
what it's gonna look like.

493
00:28:41.990 --> 00:28:45.590
Yeah, exactly. Also it is,
there is a main author

494
00:28:45.860 --> 00:28:48.170
and that author has a
style. And it's like, when

495
00:28:48.170 --> 00:28:50.240
you buy a book written
by Stephen King, and then you

496
00:28:50.240 --> 00:28:52.730
realize halfway through the book
that there's like another author,

497
00:28:53.570 --> 00:28:55.280
I'm like, Oh wow. You
know, he did a really

498
00:28:55.280 --> 00:28:58.300
good job of writing, like
Stephen King, you know, it's six

499
00:28:58.300 --> 00:29:01.720
Stephen, Stephen King with Richard CRL.
And if you're a very,

500
00:29:01.720 --> 00:29:05.770
very small font at the
bottom, you know, but there's

501
00:29:05.780 --> 00:29:08.630
a style and the style
works. So let's all do

502
00:29:08.630 --> 00:29:10.970
it. I think, I think
Linus on the Linux project

503
00:29:10.970 --> 00:29:15.110
has the same kind of
thing. Yeah. There's nothing wrong

504
00:29:15.110 --> 00:29:17.750
with being opinionated. No, and
I think it's very, it's

505
00:29:17.750 --> 00:29:22.340
very good to be opinion.
Yeah. I like this idea

506
00:29:22.340 --> 00:29:25.670
of frictionless. The other thing
that's fun about Nancy is

507
00:29:25.670 --> 00:29:28.790
that, like you said before,
at the very beginning, it's

508
00:29:28.790 --> 00:29:31.700
extremely relaxed about what you
hosted under. So you can

509
00:29:31.700 --> 00:29:34.100
host it under asp.net. If
you want to, you can

510
00:29:34.100 --> 00:29:37.820
host it self hosting. So
from the command line, you

511
00:29:37.820 --> 00:29:42.010
can host it on mano
on Linux. And then there's

512
00:29:42.010 --> 00:29:43.750
this thing called Owen that
I'm going to have to

513
00:29:43.750 --> 00:29:48.710
do some shows on O
w Yes, they should open

514
00:29:48.720 --> 00:29:51.540
web. I can't remember the
entire acronym, open web interface

515
00:29:51.540 --> 00:29:57.360
for.net. Yes. And if you've
been on the posts or

516
00:29:57.390 --> 00:30:02.250
forum forum or chat lately,
there's, there's this push to

517
00:30:02.310 --> 00:30:08.700
actually make everything that it's
hosting under basically implement Owen.

518
00:30:09.060 --> 00:30:13.320
So even the ASP net
hosting would implement Owen. So

519
00:30:13.320 --> 00:30:15.450
they're going to put a
little shim in there to

520
00:30:15.450 --> 00:30:20.490
do that. I believe grumpy
dev or Steven, and is

521
00:30:20.490 --> 00:30:23.580
a Dave Fowler. We're talking
about that just the other

522
00:30:23.580 --> 00:30:27.240
day about changing the implementation
so that everything has this

523
00:30:27.240 --> 00:30:30.750
one interface, which is very,
you know, Ruby rock, like,

524
00:30:31.050 --> 00:30:33.930
you know exactly what it
is. That's exactly what is,

525
00:30:33.930 --> 00:30:35.550
and I think we are
going to do that and

526
00:30:35.550 --> 00:30:37.860
we're going to do it
for, you know, all of

527
00:30:37.860 --> 00:30:41.340
asp.net. There's, there's no reason
that everything shouldn't be plugable.

528
00:30:41.730 --> 00:30:44.790
Yes. So I, I think
that a few, a future

529
00:30:44.790 --> 00:30:47.790
are coming version of, of
asp.net. We'll have that. And

530
00:30:47.790 --> 00:30:51.390
I think Louie does our
Dan and her Louis de

531
00:30:51.390 --> 00:30:54.090
Jarden, depending on how you
want to pronounce it are,

532
00:30:54.420 --> 00:30:56.450
are working on that actively.
And I know that, and

533
00:30:56.450 --> 00:31:00.120
I have Damien Edwards and
David come on the show

534
00:31:00.120 --> 00:31:01.620
and we're going to get
into more detail about why

535
00:31:01.620 --> 00:31:06.030
Owen matters. Cause I think
open is the goal, right?

536
00:31:06.090 --> 00:31:09.210
And we've talked about this
before that the asp.net team

537
00:31:09.210 --> 00:31:12.540
wants to kind of compete
on a level playing field.

538
00:31:12.990 --> 00:31:14.430
So one of the other
things that we're hoping to

539
00:31:14.430 --> 00:31:16.230
do, and I've talked a
little bit to Andreas about

540
00:31:16.230 --> 00:31:19.770
this, but probably in the
spring is I want people

541
00:31:19.770 --> 00:31:23.850
to be able to say
file new Nancy application. And

542
00:31:23.910 --> 00:31:27.030
I realized that that the
team could go and do

543
00:31:27.030 --> 00:31:31.440
all the work of making
a project template today. But

544
00:31:31.440 --> 00:31:34.620
it's just too complicated. The
amount of work required to

545
00:31:34.620 --> 00:31:38.450
install a new project template
in an organized way is

546
00:31:38.490 --> 00:31:41.340
just, it's a hassle. So
what if we could make

547
00:31:41.340 --> 00:31:46.680
project templates, exchangeable like nougat
packages. So I could just

548
00:31:46.680 --> 00:31:50.370
say, you know, install, package,
Nancy dot project template, and

549
00:31:50.370 --> 00:31:53.400
then go file new project.
Right. You know, then things

550
00:31:53.400 --> 00:31:56.220
start getting more interesting. And
I think it'll introduce more

551
00:31:56.220 --> 00:32:00.750
people to projects like Nancy.
And again, give that idea

552
00:32:00.750 --> 00:32:04.950
of the level, the level
playing field, Right? You, you

553
00:32:04.950 --> 00:32:07.500
have all of these different
frameworks that have different opinions

554
00:32:07.500 --> 00:32:09.120
and you know, you need
to find the one that

555
00:32:09.120 --> 00:32:13.230
you're you're aligned with. Exactly.
And it's totally, and again,

556
00:32:14.130 --> 00:32:16.380
some people believe it, some
people don't, but there's no

557
00:32:16.380 --> 00:32:20.010
reason for the asp.net team
to say, Oh, you really

558
00:32:20.010 --> 00:32:24.660
gotta use asp.net. You know,
all, ultimately I don't care

559
00:32:24.660 --> 00:32:26.250
what you use. I want
you to use whatever makes

560
00:32:26.250 --> 00:32:30.060
you happy. It doesn't keep
us working or not working.

561
00:32:30.060 --> 00:32:32.520
If you use one project
or another project, you know,

562
00:32:32.580 --> 00:32:36.360
ultimately you have fun build
stuff that makes you happy.

563
00:32:36.360 --> 00:32:39.000
And I guess the bosses
care if you use windows,

564
00:32:39.050 --> 00:32:44.000
but otherwise I'm not too
worried about it. So where

565
00:32:44.010 --> 00:32:45.830
do you think people should
start for Nancy? I think

566
00:32:45.830 --> 00:32:50.560
probably the Pluralsight Nancy chorus.
Oh, there's site course. There's

567
00:32:50.560 --> 00:32:54.730
a bunch of, there was
one recently. Why Nancy, Jonathan,

568
00:32:55.330 --> 00:33:00.340
Jonathan, Shannon put out on
his, his, his site and

569
00:33:01.520 --> 00:33:04.330
there's several, you know, free
videos as well. Not just

570
00:33:04.330 --> 00:33:08.980
Pluralsight that people have put
out to, to say, Hey,

571
00:33:08.980 --> 00:33:13.180
you know, this is how,
how you get started, but

572
00:33:13.310 --> 00:33:15.880
it's, it's fairly simple to
use. You can jump out

573
00:33:15.880 --> 00:33:18.280
on the forum on the
chat and the Jabber room.

574
00:33:18.370 --> 00:33:22.960
And there's always somebody willing
to help. If you have

575
00:33:22.960 --> 00:33:28.480
questions, I'm there very often,
but yeah. Cool. Well, people

576
00:33:28.480 --> 00:33:32.350
can check it out@nancyeffects.org. I'll
have links in the show

577
00:33:32.350 --> 00:33:35.440
notes for your course, and
also a link to the

578
00:33:35.440 --> 00:33:37.840
Jabber room so people can
interact with the team and

579
00:33:37.840 --> 00:33:40.510
the folks that are excited
about using Nancy. That'd be

580
00:33:40.510 --> 00:33:42.940
cool. Thanks so much for
chatting with me. Okay. No

581
00:33:42.940 --> 00:33:46.380
problem. This has been another
episode of Hansel minutes and

582
00:33:46.380 --> 00:33:47.440
we'll see you again next
week. Yeah.

