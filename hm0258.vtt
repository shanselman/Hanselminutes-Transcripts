WEBVTT FILE

1
00:00:12.120 --> 00:00:17.850
From hanselminutes.com. It's Hansel minutes.
Oh, weekly discussion with web

2
00:00:17.850 --> 00:00:22.890
developer and technologists. Scott Hanselman.
This is Lawrence Ryan announcing show

3
00:00:22.890 --> 00:00:29.640
number two 58. Recorded live
Wednesday, March 23rd, 2011. Support for Hanselman

4
00:00:29.640 --> 00:00:33.320
it's. This provided by Tellerik
Brady controls. The most comprehensive

5
00:00:33.320 --> 00:00:42.290
suite of components for windows
forms, P.net web applications. online@wwwdottelerik.com.

6
00:00:43.010 --> 00:00:45.980
In this episode, Scott gets
the latest on entity framework

7
00:00:46.130 --> 00:00:52.100
with Jeff <inaudible> and Tom
Laverty. Hi, this is Scott

8
00:00:52.100 --> 00:00:54.350
Hanselman, and this is another
episode of Hansel minutes. And

9
00:00:54.350 --> 00:00:56.510
today I'm talking with Jeff
<inaudible>, who is the devil

10
00:00:56.510 --> 00:01:00.830
lead on entity framework? 4.1
and the guy who makes

11
00:01:00.830 --> 00:01:03.890
coffee for him, Tim Laverty
who is the lead PM.

12
00:01:03.890 --> 00:01:08.780
How's it going guys? Great.
Good. Hi Scott. Have you

13
00:01:08.780 --> 00:01:11.750
had your coffee made by
your boss today? Jeff. And

14
00:01:11.750 --> 00:01:14.330
he actually made me hot
chocolate this morning. That was

15
00:01:14.330 --> 00:01:19.250
pretty cool. Nice. Okay. So
you guys, you guys work

16
00:01:19.250 --> 00:01:22.190
on the team that makes
the entity framework and the

17
00:01:22.190 --> 00:01:25.070
entity framework is, is I
think, is, is it fair

18
00:01:25.070 --> 00:01:27.590
to say it's the way
that we, the recommended way

19
00:01:27.590 --> 00:01:30.860
to do data access in,
in dotnet today? Yep, absolutely.

20
00:01:30.860 --> 00:01:33.320
That's the way we see
it too. If you're doing

21
00:01:33.320 --> 00:01:35.960
data access and.net, you should
be using the entity framework.

22
00:01:37.400 --> 00:01:39.920
Now a couple years ago,
I would say maybe like

23
00:01:39.930 --> 00:01:42.770
two or three years ago,
there were maybe more options

24
00:01:42.770 --> 00:01:44.870
and some of these options
still exist. Like for example,

25
00:01:44.870 --> 00:01:47.600
LinkedIn SQL is still out
there. It's not being actively

26
00:01:47.600 --> 00:01:50.240
worked on, but it's, it's
shipped, you know, it's supported

27
00:01:50.240 --> 00:01:54.380
it's there. And then there's
ado.net kind of classic record

28
00:01:54.380 --> 00:01:56.960
sets and data sets and
data readers and things like

29
00:01:56.960 --> 00:02:01.280
that. And then entity framework,
w how did it, how

30
00:02:01.280 --> 00:02:03.710
did it shake out that
entity framework is the recommended

31
00:02:03.710 --> 00:02:07.190
way and why were there
so many ways before? So

32
00:02:07.190 --> 00:02:10.460
this is Tim. I would
say that well for one,

33
00:02:10.550 --> 00:02:12.830
the first thing I start
with is Jeff and my

34
00:02:12.830 --> 00:02:16.970
team, we own LinkedIn SQL,
and I think really how

35
00:02:16.970 --> 00:02:19.310
it shakes out is we
still see a world where

36
00:02:19.400 --> 00:02:23.570
you would use core radio.net.
If you're looking at very,

37
00:02:23.570 --> 00:02:26.270
very tight control of SQL
statements that execute against your

38
00:02:26.270 --> 00:02:30.530
database, then we oftentimes will
push people down to Cory

39
00:02:30.530 --> 00:02:34.940
deo.net with LinkedIn SQL. Really,
it was a matter of

40
00:02:35.090 --> 00:02:39.650
us looking at the EDM
vision and looking at the

41
00:02:40.010 --> 00:02:43.520
mapping capabilities CF offered and
sort of a balance of

42
00:02:43.930 --> 00:02:46.070
which of these are we
going to bet on and

43
00:02:46.130 --> 00:02:48.590
add to, or add, add
a large feature set to

44
00:02:48.590 --> 00:02:51.380
going forward. And we felt
like that ETF had a

45
00:02:51.380 --> 00:02:53.720
better path in terms of
where we wanted to go

46
00:02:53.720 --> 00:02:57.650
with data, access and modeling,
and what was the more

47
00:02:57.650 --> 00:03:02.680
effective and cheaper solution Microsoft.
And you said, EDM vision,

48
00:03:02.680 --> 00:03:05.830
what is EDM? So EDM
is the entity data model.

49
00:03:06.670 --> 00:03:11.770
And it's a, basically a
way that are a, a,

50
00:03:13.420 --> 00:03:18.010
a standard that you can
design your entities and relationships

51
00:03:18.010 --> 00:03:21.610
between those entities and offers
a good way of mapping

52
00:03:21.610 --> 00:03:25.720
those two relational schemas. Okay.
So then everything that you're

53
00:03:25.720 --> 00:03:29.140
doing in the entity framework,
whether it's from an entity,

54
00:03:29.200 --> 00:03:31.660
a model that's done in
a visual designer, or whether

55
00:03:31.660 --> 00:03:35.050
it's done in code, it's
all, there's an underlying EDM

56
00:03:35.050 --> 00:03:37.270
and indeed data model, is
that right? Yeah, there is.

57
00:03:37.270 --> 00:03:39.670
And what it allows us
to do is, is I

58
00:03:39.670 --> 00:03:43.360
can create a, I'll build
an eff and I'll get

59
00:03:43.360 --> 00:03:46.900
an entity data model underneath
that because it's a entity

60
00:03:46.900 --> 00:03:48.940
data model that makes it
really, really easy for me

61
00:03:48.940 --> 00:03:52.270
to use other services. For
example, I can build or

62
00:03:52.270 --> 00:03:54.610
very easily build an old
data service on top of

63
00:03:54.610 --> 00:03:58.390
that because the F model
is EDM based and what

64
00:03:58.390 --> 00:04:01.330
we picture is going forward,
we we'll add other services

65
00:04:01.330 --> 00:04:03.970
across Microsoft that are IOM
based as well, so that

66
00:04:03.970 --> 00:04:06.340
you can build this EDM
model and get a first

67
00:04:06.340 --> 00:04:10.900
class RM through EDF, get
a data service very easily

68
00:04:11.230 --> 00:04:14.880
and et cetera. Yeah. So
this is Jeff, just to

69
00:04:14.880 --> 00:04:17.100
add onto that. So what
this means is, you know,

70
00:04:17.100 --> 00:04:20.340
anybody who's using code first
or using the designer to

71
00:04:20.340 --> 00:04:24.000
build a data access stack
with the entity framework today,

72
00:04:24.210 --> 00:04:26.910
you know, down the road,
they'll be able to leverage

73
00:04:26.910 --> 00:04:29.340
that existing work that they've
done to build that model,

74
00:04:29.340 --> 00:04:32.040
whether they've built the model
using code, or, you know,

75
00:04:32.040 --> 00:04:35.040
with the drag and drop
stuff, and the designer you'll

76
00:04:35.040 --> 00:04:37.530
be able to do reporting
over that analytics, all kinds

77
00:04:37.530 --> 00:04:41.190
of cool services for free.
I see. So it's not

78
00:04:41.190 --> 00:04:44.670
like it's, it's not three
different things, like three different,

79
00:04:44.730 --> 00:04:47.730
totally different code paths. I
mean, model first database first

80
00:04:47.730 --> 00:04:50.880
and in code first, they
all sit on top of

81
00:04:50.910 --> 00:04:54.960
the core entity framework thing.
It's not like three separate.

82
00:04:55.440 --> 00:04:59.280
Yep. That's right. If you
look at inside visual studio,

83
00:04:59.280 --> 00:05:04.050
the designer produces these XML
format and EDM X, and

84
00:05:04.050 --> 00:05:06.390
you can open that file
up and see all the

85
00:05:06.390 --> 00:05:10.770
XML. And that kind of
represents this EDM model. Now

86
00:05:10.770 --> 00:05:15.000
that EDS, that XML then
gets interpreted by the entity

87
00:05:15.000 --> 00:05:17.190
framework. And we use that
as kind of our internal

88
00:05:17.190 --> 00:05:20.670
model. Now, what code first
does is it basically generates

89
00:05:20.670 --> 00:05:23.010
the equivalent of that XML,
but it does it at

90
00:05:23.010 --> 00:05:26.640
runtime. So no matter what
you're using, same code path,

91
00:05:26.640 --> 00:05:30.390
same kind of model. Okay.
So the XML is just

92
00:05:30.480 --> 00:05:32.970
a serialized form that represents
what you want to do

93
00:05:33.330 --> 00:05:35.670
it in memory. It's some
kind of, of an object

94
00:05:35.670 --> 00:05:40.530
model that represents your entity
model. No, that's right. Like

95
00:05:40.530 --> 00:05:42.660
XML, I guess I'm just
saying is X the XML

96
00:05:42.660 --> 00:05:45.660
file is an artifact of
the larger and memory model,

97
00:05:45.660 --> 00:05:48.510
right. It's not a based
on XML or anything. Right.

98
00:05:48.510 --> 00:05:51.390
Exactly. You can think of
it as it's serializing that

99
00:05:51.390 --> 00:05:56.040
EDM model out to XML.
Okay. Now a couple of

100
00:05:56.040 --> 00:05:59.330
years ago, though, when were
these choices? The, the original

101
00:05:59.330 --> 00:06:01.310
entity framework? I think it
did come out in, in,

102
00:06:01.310 --> 00:06:07.340
in, in Dutton at three,
five or <inaudible>. So some

103
00:06:07.340 --> 00:06:09.350
people really embraced it and
there were some cool books

104
00:06:09.350 --> 00:06:12.590
and stuff like by Julie,
Julie Lerman, but amongst folks

105
00:06:12.590 --> 00:06:16.190
that were already using features
like open source projects, rather

106
00:06:16.190 --> 00:06:19.830
like an hibernate, there was
a lack of confidence in

107
00:06:19.910 --> 00:06:22.340
entity framework. And there were
some initial features that they

108
00:06:22.340 --> 00:06:25.400
didn't feel that it had,
what did they not? What

109
00:06:25.400 --> 00:06:27.920
did the, the, the public
like, and not like about

110
00:06:27.920 --> 00:06:31.660
three, five, and what is
different in 4.1? I think

111
00:06:31.660 --> 00:06:34.450
what the public liked about
three five was really that

112
00:06:34.510 --> 00:06:37.750
you could do some of
the modeling that wasn't possible

113
00:06:37.750 --> 00:06:40.360
with some of these other
technologies. So you could do,

114
00:06:40.690 --> 00:06:43.870
you know, different kinds of
inheritance mappings, you know, different

115
00:06:43.870 --> 00:06:46.810
kinds of like splitting tables
or joining tables together to

116
00:06:46.810 --> 00:06:51.280
represent entities in a very
kind of seamless way, the

117
00:06:51.280 --> 00:06:53.530
original version of entity framework.
We also made a really

118
00:06:53.530 --> 00:06:56.830
big investment in the designer
experience so that, you know,

119
00:06:57.010 --> 00:07:00.400
tools like and hibernate, you
know, which is, which is

120
00:07:00.400 --> 00:07:03.550
a great tool, has tons
of functionality, but it didn't

121
00:07:03.550 --> 00:07:06.190
at that time have the
designer support that was in,

122
00:07:06.190 --> 00:07:08.320
in visual studio. And so
that was kind of an

123
00:07:08.320 --> 00:07:12.880
advantage of using the entity
framework linked to sequel. On

124
00:07:12.880 --> 00:07:15.250
the other hand, had the
advantage of simplicity. It went

125
00:07:15.250 --> 00:07:19.450
to one backend SQL server,
family of technologies had a

126
00:07:19.450 --> 00:07:23.140
really simple programming experience and
really just hit that. Like

127
00:07:23.470 --> 00:07:26.200
I'm a developer writing code
and I'm trying to get,

128
00:07:26.650 --> 00:07:29.230
you know, an Oren based
data access stack up and

129
00:07:29.230 --> 00:07:31.480
running and linked to sequel
offered the fastest path to

130
00:07:31.480 --> 00:07:35.140
do that over the entity
framework. It also offered, you

131
00:07:35.140 --> 00:07:37.120
know, a form of what
we call poco support. So

132
00:07:37.120 --> 00:07:41.500
you could write your classes
and they would not have

133
00:07:41.500 --> 00:07:44.920
any dependency on that data
access stack. And that was

134
00:07:44.920 --> 00:07:46.900
something I did that first
version of entity framework didn't

135
00:07:46.900 --> 00:07:49.090
have. And I think that
was one of the most

136
00:07:49.090 --> 00:07:52.900
significant feature gaps between entity
framework and the other solutions

137
00:07:52.900 --> 00:07:55.390
that really kind of held
it back. And so when

138
00:07:55.390 --> 00:07:57.910
we released the second version
of the entity framework and.net

139
00:07:57.910 --> 00:08:01.960
for O we added the
poco support back, well, we

140
00:08:01.960 --> 00:08:04.840
added support for support for
the first time. And then

141
00:08:04.840 --> 00:08:07.630
coupled with the designer support
really made a really nice

142
00:08:07.630 --> 00:08:13.090
solution for people. For, for
me when entity framework three,

143
00:08:13.090 --> 00:08:15.730
five came out, I was
kind of a hardcore link

144
00:08:15.740 --> 00:08:18.880
to SQL person, and I
would use linked to SQL

145
00:08:18.880 --> 00:08:21.520
and all my demos. And
I would just link to

146
00:08:21.520 --> 00:08:24.820
SQL felt faster. It felt
like it, the designer was

147
00:08:24.820 --> 00:08:27.280
faster and it felt like
it started up faster in

148
00:08:27.280 --> 00:08:31.690
three, five and in four.
Oh, it seemed like I

149
00:08:31.690 --> 00:08:33.400
could pretty much do everything
I did with linked to

150
00:08:33.400 --> 00:08:36.160
SQL in, in four. Oh.
And I can't really tell

151
00:08:36.160 --> 00:08:38.830
a difference between the designer
and the startup. It felt

152
00:08:38.830 --> 00:08:41.380
like it started up slowly
in three five. Is that

153
00:08:41.380 --> 00:08:43.390
just in my mind, did
I get a faster machine

154
00:08:43.420 --> 00:08:46.300
or was there something done
between three, five and four

155
00:08:46.300 --> 00:08:49.300
to get that kind of
out of the box? You

156
00:08:49.300 --> 00:08:51.670
know, I was like file
new model, boom, boom, boom.

157
00:08:51.760 --> 00:08:53.800
Hit at five and I'm
running. I mean, it felt

158
00:08:54.070 --> 00:08:57.770
more S more, I don't
know, crisp, I guess. I

159
00:08:57.770 --> 00:08:59.930
mean, we definitely between three,
five and four. Oh, that

160
00:08:59.930 --> 00:09:02.150
was kind of when we
started making that transition to

161
00:09:02.150 --> 00:09:05.780
investing, you know, primarily in
the entity framework. So, you

162
00:09:05.780 --> 00:09:07.850
know, we, we did do,
you know, work on, on

163
00:09:07.850 --> 00:09:10.580
that experience of, you know,
I want to get started

164
00:09:10.580 --> 00:09:13.940
using entity framework and I
want it to be fast

165
00:09:13.940 --> 00:09:16.340
and, you know, as well
as feature rich. And so

166
00:09:16.800 --> 00:09:19.460
it's likely that, you know,
you're seeing some of those,

167
00:09:19.520 --> 00:09:22.940
those improvements that we made
there, whereas we didn't make

168
00:09:22.940 --> 00:09:26.450
improvements to, you know, SQL
metal and the, the link

169
00:09:26.450 --> 00:09:31.280
to SQL designer. But I
think also like, you know,

170
00:09:31.280 --> 00:09:33.470
the, the other thing that
people liked about linked to

171
00:09:33.470 --> 00:09:36.230
sequel was you said it
kind of like felt faster

172
00:09:36.230 --> 00:09:38.120
and stuff like that. I
think even like the development

173
00:09:38.120 --> 00:09:41.180
workflow felt faster with linked
to SQL because the concepts

174
00:09:41.180 --> 00:09:43.430
that you were using or
a lot simpler, there were

175
00:09:43.430 --> 00:09:46.120
a lot fewer of them.
You didn't have this, this

176
00:09:46.160 --> 00:09:49.610
extra layer of, of mapping
and modeling in there. You

177
00:09:49.610 --> 00:09:52.370
could use attributes on your
classes and things like that.

178
00:09:52.370 --> 00:09:55.520
So there, there definitely was
a, a simpler feel to

179
00:09:55.520 --> 00:09:57.470
link to SQL, even though
it kind of seemed like

180
00:09:57.470 --> 00:10:00.470
it could do similar things
in a lot of cases.

181
00:10:01.160 --> 00:10:02.630
But the truth of the
matter is that the entity

182
00:10:02.630 --> 00:10:06.230
framework, you know, definitely offers
more in terms of object,

183
00:10:06.230 --> 00:10:10.130
relational mapping technology, and the
different layers that are in

184
00:10:10.130 --> 00:10:12.770
the entity framework is a,
is a much more robust,

185
00:10:12.770 --> 00:10:17.630
richer experience or a piece
of technology. And, and so

186
00:10:17.630 --> 00:10:21.560
that's where, when we started
working on <inaudible>, we said,

187
00:10:21.560 --> 00:10:23.330
well, one of the things
people liked about these other

188
00:10:23.330 --> 00:10:27.050
technologies is they're simple and
few concepts. So let's target

189
00:10:27.050 --> 00:10:29.690
that kind of experience. When
we start thinking about the

190
00:10:29.690 --> 00:10:32.900
next versions of the entity
framework, The only other thing

191
00:10:32.900 --> 00:10:36.050
I was going to say,
<inaudible> that we do with

192
00:10:36.050 --> 00:10:38.450
every release we set aside,
or we block off specific

193
00:10:38.450 --> 00:10:41.900
time to look at perf
in terms of our startup

194
00:10:41.930 --> 00:10:44.090
also in terms of the
SQL that we generate, that

195
00:10:44.090 --> 00:10:46.730
we execute into database both.
And we definitely did that

196
00:10:46.730 --> 00:10:50.360
with the <inaudible> plan to
do it going forward. One

197
00:10:50.360 --> 00:10:53.450
of the things that, that
I've found that, that, because

198
00:10:53.450 --> 00:10:56.630
it's, so, COVID so simple,
I ended up using entity

199
00:10:56.630 --> 00:10:59.180
framework like I did with
LinkedIn SQL in a one

200
00:10:59.180 --> 00:11:02.720
to one relationship. So, you
know, my, when I do

201
00:11:02.720 --> 00:11:04.940
database first where I designed
my database, and then I

202
00:11:04.940 --> 00:11:08.210
drag my tables in and
automatically get my model, or

203
00:11:08.210 --> 00:11:12.140
if I do code first,
I'm finding that my model

204
00:11:12.170 --> 00:11:15.860
to database kind of mapping
is one to one. And

205
00:11:15.860 --> 00:11:17.840
I'm, I'm one, I mean,
I'm feeling a little bit

206
00:11:17.840 --> 00:11:21.260
guilty about that. I'm wondering
if I'm really only scratching

207
00:11:21.860 --> 00:11:27.740
the surface of what's possible.
And usually it's because of

208
00:11:28.250 --> 00:11:33.050
a confusion, maybe perhaps on
my part about if I

209
00:11:33.140 --> 00:11:36.020
let's say I have like
a customer model, but the

210
00:11:36.020 --> 00:11:40.010
customer model actually has two
or three tables, customer, customer

211
00:11:40.010 --> 00:11:44.210
info customer address. I'm not
really clear how that, how

212
00:11:44.210 --> 00:11:48.290
that mapping works from an
insert perspective. Like I can

213
00:11:48.290 --> 00:11:51.800
visualize from a reading perspective
that I've got this customer

214
00:11:51.800 --> 00:11:53.860
object and I'm going to
go and get, and the

215
00:11:53.860 --> 00:11:58.870
entity framework will go and
map how these three tables

216
00:11:58.870 --> 00:12:02.620
are in fact one object.
And that's nice, but on

217
00:12:02.620 --> 00:12:04.690
the insert, how does it
know and how do I

218
00:12:04.690 --> 00:12:09.640
write code to have one
customer object fan out to

219
00:12:09.640 --> 00:12:11.590
multiple tables? I think that's
a question a lot of

220
00:12:11.590 --> 00:12:15.450
people have. So it probably
depends on this is really

221
00:12:15.450 --> 00:12:18.540
about initial model creation. If
I want to have one

222
00:12:18.570 --> 00:12:22.680
entity or one class that's
mapping to multiple tables, then

223
00:12:22.740 --> 00:12:26.580
when you create your model,
you specify to ETF what

224
00:12:26.580 --> 00:12:30.930
properties map to what specific
columns and what specific tables.

225
00:12:31.380 --> 00:12:34.920
And in terms of generation
of cut statements or generation

226
00:12:34.920 --> 00:12:38.190
of read statements, you're basically
using the same logic like

227
00:12:38.220 --> 00:12:40.950
EIF is looking at that
entity. It's looking at its

228
00:12:40.950 --> 00:12:43.380
mapping layer and saying, okay,
well, how do the properties

229
00:12:43.380 --> 00:12:46.230
in this entity map to
which tables in which columns

230
00:12:46.230 --> 00:12:51.210
in those tables and it's
generating the crud statements based

231
00:12:51.210 --> 00:12:55.350
off of that. And it
has the intelligence to walk

232
00:12:55.350 --> 00:12:58.110
through what the dependencies are
and so on, so that

233
00:12:58.110 --> 00:13:03.040
it executes the statements in
terms of order. So I

234
00:13:03.120 --> 00:13:06.060
guess what I'm after is,
is like the, the bonus

235
00:13:06.060 --> 00:13:08.790
with ETF is that you
can actually create that kind

236
00:13:08.790 --> 00:13:11.010
of mapping. If you want
to take those three tables

237
00:13:11.040 --> 00:13:13.680
and map them to a
single entity where with some

238
00:13:13.680 --> 00:13:19.170
of the other technologies you
can, As I've presented ETF

239
00:13:19.650 --> 00:13:22.800
entity framework related talks at
small user groups and stuff

240
00:13:22.800 --> 00:13:26.220
that some of the database
folks out there are uncomfortable.

241
00:13:26.490 --> 00:13:30.360
The, you know, the, these,
these database guys that kind

242
00:13:30.360 --> 00:13:32.910
of grew up in that
space. You know, when, when

243
00:13:32.910 --> 00:13:35.520
I was programming in the,
in the early and mid

244
00:13:35.520 --> 00:13:38.100
nineties and doing stuff on
like SQL four to one,

245
00:13:38.610 --> 00:13:41.970
it was a very clear
delineation between the three tiers

246
00:13:42.060 --> 00:13:45.660
and the three job titles,
right. There was like old

247
00:13:45.660 --> 00:13:48.780
database guy with a beard
or, or lady with a

248
00:13:48.780 --> 00:13:52.290
beard. There was, there was
like UI guy who was

249
00:13:52.290 --> 00:13:55.200
the button dragger. That was
me. And then there was

250
00:13:55.230 --> 00:13:57.360
the, I don't know how
to do the UI guy.

251
00:13:57.390 --> 00:13:59.040
And he wrote the services
in the middle of the

252
00:13:59.040 --> 00:14:03.030
common objects in the middle
and the database guy, you

253
00:14:03.030 --> 00:14:08.160
know, his, his job security
was based on, you know,

254
00:14:08.160 --> 00:14:10.380
he knew everything. There was
no other database. He added

255
00:14:10.770 --> 00:14:14.010
a special index columns and
he wrote custom Sprockets and

256
00:14:14.010 --> 00:14:17.550
everything like that. And then
I hear now that, you

257
00:14:17.550 --> 00:14:20.510
know, maybe that guy's not
needed, do you, what do

258
00:14:20.510 --> 00:14:22.200
you, where do you think
those roles evolve to? Should

259
00:14:22.200 --> 00:14:25.560
the database guys start learning
eff and move, move up

260
00:14:25.590 --> 00:14:29.250
or should the coder move
down into the database? Huh?

261
00:14:29.670 --> 00:14:31.830
It's this is funny. So
I have a, I have

262
00:14:31.830 --> 00:14:34.770
a year for DBA talk
in Orlando next week that

263
00:14:34.770 --> 00:14:37.290
I'm doing. So I've been
thinking a lot about this.

264
00:14:37.530 --> 00:14:39.540
And I, I come from
a, I was the, well,

265
00:14:39.560 --> 00:14:41.250
I didn't have a beard,
but I was a database

266
00:14:41.250 --> 00:14:44.910
guy before coming to Microsoft.
So we don't, we, we

267
00:14:44.910 --> 00:14:48.540
actually don't see the database
guy becoming irrelevant if you

268
00:14:48.540 --> 00:14:53.390
will. EOF works great in
DVA centric Workflow as well.

269
00:14:53.450 --> 00:14:55.610
Like it works well with
store procedures. It works well

270
00:14:55.610 --> 00:14:58.280
with views. If you're in
a shop where you're store

271
00:14:58.280 --> 00:15:01.580
procedure oriented, and you want
that abstraction layer, you want

272
00:15:01.580 --> 00:15:05.210
to have a buffer from
the developer in terms of

273
00:15:05.210 --> 00:15:08.180
to set, to handle security,
or you want to specifically

274
00:15:08.180 --> 00:15:12.080
tune queries. Then we definitely
recommend that you continue to

275
00:15:12.080 --> 00:15:14.450
use stored proxy, right? Your
stored procs in those specific

276
00:15:14.450 --> 00:15:17.810
cases, or you write your
views and they'll map through

277
00:15:17.810 --> 00:15:20.960
EOF just fine. So we,
we, I guess we think

278
00:15:20.960 --> 00:15:27.170
of it as EMF works
well for your shop. And

279
00:15:27.170 --> 00:15:31.130
it's sort of independent of
what your shop workflow is

280
00:15:31.160 --> 00:15:34.100
like. It it'll basically be
able to click in and

281
00:15:34.100 --> 00:15:37.280
offer you benefit whether you're
a, where you have very

282
00:15:37.280 --> 00:15:40.310
segmented roles, the database guy
with the beard, your military,

283
00:15:40.310 --> 00:15:43.550
and your front end guy,
or whether you're a guy

284
00:15:43.550 --> 00:15:48.350
that wraps all of that
up. Hi, this is Scott

285
00:15:48.380 --> 00:15:50.750
coming to you from another
place in time. Are you

286
00:15:50.750 --> 00:15:54.140
using agile practices to manage
your software development? There's lots

287
00:15:54.140 --> 00:15:56.000
of tools in the market
that manage the steps of

288
00:15:56.000 --> 00:15:58.520
a project, but most of
them focus on individual roles,

289
00:15:59.360 --> 00:16:01.430
get ready for a solution
that caters for the success

290
00:16:01.430 --> 00:16:04.490
of the whole team. Guys
at Tellerik introduced team pulse

291
00:16:05.060 --> 00:16:07.760
to an agile project management
tool. That'll help you gather

292
00:16:07.760 --> 00:16:12.530
ideas, estimate plan, track progress
in a common workspace. Finally,

293
00:16:12.590 --> 00:16:14.840
companies, regardless of their size
can use a lightweight and

294
00:16:14.840 --> 00:16:16.940
convenient tool that makes all
the stakeholders work as a

295
00:16:16.940 --> 00:16:21.320
United team. Even if they're
in different countries by combining

296
00:16:21.320 --> 00:16:24.260
intuitive user interface and the
power server light team poles

297
00:16:24.260 --> 00:16:27.170
removes the roadblocks that you
typically face and applying agile

298
00:16:27.170 --> 00:16:30.200
in an effective manner, no
more lost data, no disparate

299
00:16:30.200 --> 00:16:34.520
systems, no lack of critical
analytics regarding the health philosophy

300
00:16:34.520 --> 00:16:37.670
project. See if yourself, you
get a free copy for

301
00:16:37.670 --> 00:16:43.790
five users in one project
at tellerik.com/team pulse. And please

302
00:16:44.090 --> 00:16:47.030
do thank Tellerik for supporting
Hansel minutes on their Facebook

303
00:16:47.030 --> 00:16:53.540
fan page, facebook.com/t L E
R I K Keller. We

304
00:16:53.540 --> 00:16:55.460
do appreciate it. It wouldn't
be a Hansel minutes if

305
00:16:55.460 --> 00:16:58.190
there wasn't, Tellerik helping us.
Yeah, I guess that when

306
00:16:58.190 --> 00:17:00.230
I think about the database
guy with the beard and

307
00:17:00.230 --> 00:17:04.550
again, or gal in an
enterprise, it seems like the

308
00:17:04.550 --> 00:17:06.410
bigger the company, the more
likely there is to have

309
00:17:06.410 --> 00:17:10.880
a dedicated person that does
that. And I've heard from

310
00:17:10.880 --> 00:17:14.390
the community, from the public
kind of these, these two

311
00:17:14.390 --> 00:17:18.080
conflicting statements. One is that
entity framework is only for

312
00:17:18.080 --> 00:17:21.710
big enterprises and that's one
statement. And then the conflicting

313
00:17:21.710 --> 00:17:23.630
one is no, no we're
way too big for entity

314
00:17:23.630 --> 00:17:26.360
framework. You know, our database
is so big or it's

315
00:17:26.360 --> 00:17:28.550
so important or work. Our
company is so big that,

316
00:17:28.910 --> 00:17:31.580
you know, we can't use
it because we have a

317
00:17:31.580 --> 00:17:35.300
good Jillian tables and all
custom, you know, customs, Brocks,

318
00:17:36.260 --> 00:17:39.120
how do we, how do
I reconcile those? I, I

319
00:17:39.120 --> 00:17:41.950
think the way that you
reconcile them is they're both

320
00:17:41.980 --> 00:17:46.210
not true. So entity framework
can be used for, you

321
00:17:46.210 --> 00:17:48.430
know, if you're not an
enterprise you're just getting started

322
00:17:48.430 --> 00:17:51.660
with a Greenfield. You want
to build a model using

323
00:17:51.660 --> 00:17:54.570
code or with the designer,
have us generate a database

324
00:17:54.570 --> 00:17:56.520
for you, just so you
can start writing your actual

325
00:17:56.520 --> 00:17:59.940
application. And there's no that
entity framework is going to

326
00:17:59.940 --> 00:18:02.700
help facilitate getting all your
data stored in a database

327
00:18:02.700 --> 00:18:05.040
for you. So we work
kind of on that end

328
00:18:05.040 --> 00:18:07.880
of things. And on the
enterprise side, you know, we,

329
00:18:07.880 --> 00:18:10.770
we do scale up to,
to, to fairly large models

330
00:18:10.800 --> 00:18:14.760
and we have the flexibility
to do complex mappings that

331
00:18:14.760 --> 00:18:18.600
you often see and shops
that have, you know, pretty

332
00:18:18.690 --> 00:18:23.250
large complicated database schemas. And
that's where kind of some

333
00:18:23.250 --> 00:18:25.890
of that extra power and
flexibility of the entity frameworks

334
00:18:25.890 --> 00:18:30.300
mapping comes into play. I
think we have, you know,

335
00:18:30.300 --> 00:18:34.050
we have definitely have like,
you know, release after release.

336
00:18:34.050 --> 00:18:37.170
We're getting better on our
SQL generation. And from what

337
00:18:37.170 --> 00:18:39.990
I've seen about, you know,
DBA is being like the

338
00:18:39.990 --> 00:18:43.410
gatekeeper of no SQL shall
enter, you know, my database,

339
00:18:43.680 --> 00:18:46.740
you know, without my express
written, you know, TPH report

340
00:18:46.740 --> 00:18:51.690
kind of thing. You know,
I think in those cases

341
00:18:51.840 --> 00:18:53.910
I've seen the developers be
like, all right, well, I've

342
00:18:53.910 --> 00:18:56.220
used any framework. Here's some
of the SQL at generates.

343
00:18:56.250 --> 00:18:57.900
They show it to the
DBA and the DBA is

344
00:18:57.900 --> 00:19:00.180
like, Hey, this isn't bad.
This is, this is pretty

345
00:19:00.180 --> 00:19:02.730
good sequel on, you know,
in fact it's probably just

346
00:19:02.730 --> 00:19:05.850
as good as, you know,
a person could write, you

347
00:19:05.850 --> 00:19:08.640
know, in a reasonable amount
of time and, you know,

348
00:19:08.640 --> 00:19:10.890
entity framework even offers the
ability. You know, if you

349
00:19:10.890 --> 00:19:14.520
don't like the SQL that's
generated for a link statement,

350
00:19:14.520 --> 00:19:16.800
you could always kind of
have the option of dropping

351
00:19:16.800 --> 00:19:19.980
down and having entity framework
execute your own SQL for

352
00:19:19.980 --> 00:19:24.570
you. So in that regard,
you know, entity framework is,

353
00:19:24.580 --> 00:19:29.130
is pretty well used in
enterprise scenarios and by enterprise

354
00:19:29.130 --> 00:19:36.380
customers. One of the things
that I've heard as a

355
00:19:36.380 --> 00:19:39.260
negative about entity framework is
that it's unclear how to

356
00:19:39.260 --> 00:19:43.820
do things like caching and,
you know, second level caching.

357
00:19:44.000 --> 00:19:48.050
I've heard that, that as
it relates to an hibernate,

358
00:19:48.080 --> 00:19:52.340
which has kind of caching
baked in, is that, I

359
00:19:52.340 --> 00:19:53.600
mean, what do you, what
do you think about that?

360
00:19:53.990 --> 00:19:56.720
No, that's good criticism. I
mean, we still have, we

361
00:19:56.720 --> 00:19:58.820
still have a number of
features that are on our

362
00:19:58.820 --> 00:20:02.180
backlog, that aren't in the
product yet. We don't have

363
00:20:02.180 --> 00:20:04.970
a first class, second level
cash, or like a caching

364
00:20:04.970 --> 00:20:07.790
provider model. We'd look at,
we look at it and

365
00:20:07.790 --> 00:20:10.100
hibernates and admire it, something
that we want to build

366
00:20:10.100 --> 00:20:12.230
and plan to have in
a, in a future release

367
00:20:12.230 --> 00:20:15.650
for sure. Tim, when people
say, why doesn't Microsoft just

368
00:20:15.650 --> 00:20:19.400
use this existing open source
project. And I don't mean

369
00:20:19.400 --> 00:20:21.710
that just in the context
of entity framework, but kind

370
00:20:21.710 --> 00:20:25.220
of anything that we do.
Why do we, as a

371
00:20:25.220 --> 00:20:28.640
company, you know, build something
versus, you know, pick something

372
00:20:28.640 --> 00:20:32.870
in the, in the community.
I know that sometimes we,

373
00:20:32.930 --> 00:20:35.810
we, sometimes we do in
the case of like jQuery

374
00:20:35.840 --> 00:20:40.240
and jQuery UI on the,
on the website, but how,

375
00:20:40.240 --> 00:20:43.760
how are those decisions decisions
made, but let's, you know,

376
00:20:43.760 --> 00:20:46.380
build versus buy or build
versus support in the, in

377
00:20:46.380 --> 00:20:49.000
the, in the community. All
Right. I think that it,

378
00:20:49.270 --> 00:20:55.120
it varies on from technology
to technology, that it depends

379
00:20:55.120 --> 00:20:58.240
on licensing and how much
IP we have in the

380
00:20:58.240 --> 00:21:00.940
space already and how much
we want, how much, how

381
00:21:00.940 --> 00:21:03.580
much we want to innovate
there. Like, do we think

382
00:21:03.580 --> 00:21:06.700
that we could build something
that's significantly better than what's

383
00:21:06.700 --> 00:21:13.650
there? And so, And entity
framework is going to be,

384
00:21:13.740 --> 00:21:16.440
I mean, supported for forever
in sense of this is

385
00:21:16.440 --> 00:21:18.840
the, this is the way
we're doing things going forward.

386
00:21:20.370 --> 00:21:22.530
So you're gonna, you're planning
on moving forward and, you

387
00:21:22.530 --> 00:21:24.990
know, F 4.1 just came
out and there'll be like

388
00:21:24.990 --> 00:21:26.790
a five and a six.
We're not going to switch

389
00:21:27.120 --> 00:21:30.480
database models. Again, We have
absolutely no plans to switch

390
00:21:30.510 --> 00:21:34.020
database models or switch data
access. API is, again, we

391
00:21:34.020 --> 00:21:36.870
have a funny, funny acronym
called Jada yet another data

392
00:21:36.870 --> 00:21:40.080
access layer. We don't plan
on having a fully different

393
00:21:40.080 --> 00:21:43.080
data access layer. ETF should
be it. I mean, with

394
00:21:43.110 --> 00:21:46.050
EMF, it's, it's a, it's
just, it's a strategic bet

395
00:21:46.050 --> 00:21:49.260
for Microsoft. It's based off
of the EDM model, we're

396
00:21:49.260 --> 00:21:51.600
building a number of services
on top of it, you

397
00:21:51.600 --> 00:21:54.990
know, ETFs, your RM, you
have data services or data

398
00:21:54.990 --> 00:21:57.630
built on top of it.
We plan on shipping others

399
00:21:57.840 --> 00:22:02.100
as well. And you guys,
when, when you're supportive of

400
00:22:02.100 --> 00:22:05.610
people using whatever they like,
right? I mean, entity framework

401
00:22:05.640 --> 00:22:10.950
uses ado.net underneath and hibernate
will end up using, you

402
00:22:10.950 --> 00:22:13.260
know, going direct to SQL
depending on what providers they're

403
00:22:13.260 --> 00:22:16.380
using underneath. Do you, do
you, do you care? I

404
00:22:16.380 --> 00:22:18.510
mean, ultimately we're trying to
sell windows. So does it

405
00:22:18.510 --> 00:22:21.210
matter to you whether someone
uses ETF versus, and hibernate

406
00:22:21.210 --> 00:22:26.010
versus whatever LLB, Elgin? I
mean, not, not particularly like

407
00:22:26.070 --> 00:22:29.300
I it's a, it is
the dotnet ecosystem and that's,

408
00:22:29.300 --> 00:22:33.300
that's what we're about. I
mean, what we have ETF,

409
00:22:33.320 --> 00:22:36.060
because we think that it,
it's a, it's a great

410
00:22:36.060 --> 00:22:39.930
RM and it feeds this
EDM ecosystem nicely and makes

411
00:22:39.930 --> 00:22:42.930
it really easy for you
to build a data services

412
00:22:42.930 --> 00:22:45.180
and other services on top
of it. It's got great

413
00:22:45.180 --> 00:22:48.000
vs integration and so on.
We've got a lot of

414
00:22:48.000 --> 00:22:50.580
chips on it. We're betting
a lot on it, but

415
00:22:50.670 --> 00:22:53.580
yeah, I mean, in reality,
it's like we're, we're here

416
00:22:53.580 --> 00:22:57.570
to enhance and build on
the EDM ecosystem or sorry,

417
00:22:57.570 --> 00:23:01.920
on the.net ecosystem. And you
know, these, these other technologies

418
00:23:01.920 --> 00:23:08.220
are great as well. So
in, in 4.1, is it

419
00:23:08.340 --> 00:23:11.280
correct to say that IA
4.0 ship with Dutton at

420
00:23:11.280 --> 00:23:14.340
four, but EFI 4.1 is
its own thing. It's an

421
00:23:14.340 --> 00:23:16.980
add on, does it, is
it a replacement or does

422
00:23:16.980 --> 00:23:19.380
it sit on top of
the, the stuff that shipped

423
00:23:19.380 --> 00:23:24.030
and FORO, It is an
add on, on top. So

424
00:23:24.060 --> 00:23:26.550
yeah, four Oh one is
our first out of box

425
00:23:26.550 --> 00:23:28.950
release. It's the first time
we've shipped outside of the.net

426
00:23:28.950 --> 00:23:32.340
framework, which we're super excited
about. Cause it we're our

427
00:23:32.340 --> 00:23:34.560
thinking is it's gonna allow
us to iterate quicker. So

428
00:23:34.560 --> 00:23:37.290
we've got a huge backlog
of ass. You referenced second

429
00:23:37.290 --> 00:23:40.110
level cash, just one earlier.
And what we feel like

430
00:23:40.110 --> 00:23:41.430
is that what this is
going to let us do

431
00:23:41.430 --> 00:23:43.170
is going to let us
iterate and ship out of

432
00:23:43.170 --> 00:23:47.510
box on a more consistent
rapid cadence. Yeah. Four, one

433
00:23:47.510 --> 00:23:50.600
doesn't replace EFI for it's
a layer on top of

434
00:23:50.600 --> 00:23:53.630
it. It adds code first
and the DB context, API

435
00:23:53.630 --> 00:24:00.590
surface, will you guys influenced
by the asp.net team and

436
00:24:00.590 --> 00:24:02.900
NBC shipping out of band
or was it, you know,

437
00:24:02.900 --> 00:24:05.720
like I kind of felt
like at Microsoft, the culture,

438
00:24:05.720 --> 00:24:09.050
wasn't really supportive of doing
things, as we say, out

439
00:24:09.050 --> 00:24:12.560
of band, meaning wait, doing
things now and shipping things

440
00:24:12.560 --> 00:24:14.480
now, as opposed to waiting
for the next version of

441
00:24:14.480 --> 00:24:16.940
visual studio. And I feel
like, you know, the guys

442
00:24:16.940 --> 00:24:20.150
on the NBC team really
started, I don't know, innovating

443
00:24:20.150 --> 00:24:21.800
in the sense of we
can do something. We don't

444
00:24:21.800 --> 00:24:24.320
have to wait for you
visual studio, or does that

445
00:24:24.320 --> 00:24:27.610
something that kind of was
invented on both sides? No,

446
00:24:27.610 --> 00:24:29.680
I, I think that they
were definitely a model for

447
00:24:29.680 --> 00:24:32.800
us and you know, exactly
around like, Hey, we want

448
00:24:32.800 --> 00:24:34.900
to be able to ship
more frequently, get the features

449
00:24:34.900 --> 00:24:37.300
to the customers more, you
know, as quick as we

450
00:24:37.300 --> 00:24:40.390
can, we're all goals of
ours. And we saw what

451
00:24:40.390 --> 00:24:41.950
they were doing and said,
Hey, we should do that

452
00:24:41.950 --> 00:24:45.400
too. You know, to give
the MVC and, you know,

453
00:24:45.430 --> 00:24:47.920
asp.net team credit and, and
you, Scott, you know, we,

454
00:24:48.490 --> 00:24:50.050
we got a lot of
feedback from them, not just

455
00:24:50.050 --> 00:24:52.270
about how to ship the
bits, but about the content

456
00:24:52.270 --> 00:24:55.930
of the bits and the
functionality. So we actually PR

457
00:24:56.170 --> 00:24:59.170
you know, think of our
relationship with MVC and ASP

458
00:24:59.170 --> 00:25:01.270
down at, as a, a
pretty successful one in terms

459
00:25:01.270 --> 00:25:04.030
of getting out, you know,
a pretty good product that

460
00:25:04.030 --> 00:25:07.150
people seem to be pretty
happy with. Yeah. I mean,

461
00:25:07.150 --> 00:25:09.520
I'd just add to that.
We've got a good tight

462
00:25:09.520 --> 00:25:12.220
partnership with the ASP net
guys. Like they, you know,

463
00:25:12.220 --> 00:25:15.190
they like, they look at
our code, they critique us.

464
00:25:15.220 --> 00:25:18.460
They've brought a lot of
new ideas to us saying,

465
00:25:18.460 --> 00:25:20.530
Hey, we think you guys
should do this. Or like,

466
00:25:20.560 --> 00:25:23.320
they've looked at our stuff
and given us a fair

467
00:25:23.320 --> 00:25:26.050
bit of feedback and criticism
about making it simpler, making

468
00:25:26.050 --> 00:25:30.040
it easier. And certainly from
a ship perspective, we've learned

469
00:25:30.040 --> 00:25:32.350
a lot from them. And
they're, they're, they're a good

470
00:25:32.350 --> 00:25:34.330
model for us of what
we're doing things a little

471
00:25:34.330 --> 00:25:36.820
bit different than they are
naturally, but they've been a

472
00:25:36.820 --> 00:25:39.070
good model for us to
learn from, you know, shipping

473
00:25:39.070 --> 00:25:41.320
stuff out of band and
on a quicker cadence. So,

474
00:25:41.320 --> 00:25:44.920
yeah. Yeah. I actually, whenever
we ship a new, like

475
00:25:44.920 --> 00:25:48.070
CTP of, especially the code,
first stuff I always look

476
00:25:48.070 --> 00:25:49.900
forward to in the next
couple of days, getting a

477
00:25:49.900 --> 00:25:52.750
mail from you, Scott or
David Ebo, or Phil hack

478
00:25:52.750 --> 00:25:55.300
about, you know, why the
heck did you do it

479
00:25:55.300 --> 00:25:57.520
this way? You know, this
is ridiculous. Like you got

480
00:25:57.520 --> 00:26:01.600
to change this. So that
always kind of gives me

481
00:26:01.600 --> 00:26:03.520
a little smile and I
get good feedback from you

482
00:26:03.520 --> 00:26:05.890
guys. And I call it
the mocking feedback. Cause you

483
00:26:05.890 --> 00:26:08.170
like to make fun of
the silly choices we make

484
00:26:08.170 --> 00:26:12.100
in our CGPs. It's so
funny that micro Microsoft people,

485
00:26:12.100 --> 00:26:13.900
I don't know if it's
like a Microsoft culture thing

486
00:26:13.900 --> 00:26:16.420
or if, if we're like
trained or maybe it's the

487
00:26:16.420 --> 00:26:21.760
Koolaid to take our, take
our criticism, like, please, sir,

488
00:26:21.760 --> 00:26:23.470
can I have another, you
know, it's just like you

489
00:26:23.470 --> 00:26:27.070
suck. Why don't you DB
DB database? What kind of,

490
00:26:27.170 --> 00:26:29.710
what kind of freakish class
name is that you guys

491
00:26:29.710 --> 00:26:32.950
are smoking over there? Oh,
thanks. I'll take that. Ask

492
00:26:32.950 --> 00:26:35.500
to the team. I'm super
excited about your feedback, you

493
00:26:35.500 --> 00:26:41.980
know, exactly. Take, take your
licks and keep going. Right.

494
00:26:42.490 --> 00:26:44.820
When the, when, when I
think it was CTP for

495
00:26:44.820 --> 00:26:48.270
CDB five came out, it
was like, I mean, it

496
00:26:48.270 --> 00:26:52.170
wasn't literally, it was like
Microsoft database access, entity framework,

497
00:26:52.360 --> 00:26:55.110
community technology preview for whatever.
And it was just such

498
00:26:55.110 --> 00:26:58.350
a ridiculously long name. And
I, so on my blog,

499
00:26:58.380 --> 00:26:59.640
I think it was like
three in the morning and

500
00:26:59.640 --> 00:27:01.170
I was in a weird
mood or whatever. And I

501
00:27:01.170 --> 00:27:04.470
was like, I reject this
name. I reject it. And

502
00:27:04.470 --> 00:27:07.110
I will. I now declare
that the entity framework is

503
00:27:07.110 --> 00:27:11.160
the magic unicorn edition. When
you guys woke up the

504
00:27:11.160 --> 00:27:13.140
next morning where you like,
were you mad? Cause I

505
00:27:13.140 --> 00:27:14.730
was just being silly, but
I didn't know. It would

506
00:27:14.730 --> 00:27:17.030
become like a thing. I
think we thought it was

507
00:27:17.030 --> 00:27:20.570
hilarious. And it's to the
point where we filled a

508
00:27:20.570 --> 00:27:24.170
guy's office full of inflatable
unicorns when he went on

509
00:27:24.170 --> 00:27:27.320
vacation once and we've got
little unicorn crossing signs in

510
00:27:27.320 --> 00:27:30.830
our hallways now. And when
the <inaudible> t-shirt comes out,

511
00:27:31.850 --> 00:27:38.140
it's called the magic unicorn
edition. That's awesome. That's awesome.

512
00:27:38.140 --> 00:27:39.710
I was making sure that
I was still cool with

513
00:27:39.710 --> 00:27:43.460
you guys. Yeah, no, it
was, it was pretty good.

514
00:27:43.460 --> 00:27:46.400
People really liked that and
it's actually a rallying point

515
00:27:46.460 --> 00:27:51.500
in a way. Oh, that's
cool. That's cool. Back to

516
00:27:51.500 --> 00:27:54.350
the thing about chipping out
of band, it seems like

517
00:27:54.980 --> 00:27:59.180
there's more and more stuff
coming out. You thinking of

518
00:27:59.180 --> 00:28:02.840
you guys, entity framework and
NPC, and also SQL compact

519
00:28:03.290 --> 00:28:06.350
where we're not necessarily having
to install stuff like you

520
00:28:06.350 --> 00:28:10.760
could, but with new get
in the package management, I

521
00:28:10.760 --> 00:28:14.990
can go and get SQL
compact vision, ear 4.1, NVC

522
00:28:14.990 --> 00:28:17.480
scaffolding and things like that.
And I'm bringing them down

523
00:28:17.480 --> 00:28:21.200
on a, at a project
level where I, I use

524
00:28:21.210 --> 00:28:23.270
the term Lego pieces. I've
I've been talking about this

525
00:28:23.270 --> 00:28:25.700
for a couple of months.
Now, the idea that suddenly

526
00:28:25.700 --> 00:28:29.300
the, the Legos are the
right size, you know, like

527
00:28:29.330 --> 00:28:31.100
a Lego that I have
to run an MSI on

528
00:28:31.100 --> 00:28:32.600
is not a good Lego.
You know what I mean?

529
00:28:33.110 --> 00:28:35.990
Yeah. But yeah, we'd love
new. Was it a design

530
00:28:36.500 --> 00:28:41.210
conscious decision to make things
so plugable like that certainly

531
00:28:41.330 --> 00:28:44.120
like I, you know, we,
we, when we saw new,

532
00:28:44.120 --> 00:28:47.750
get, it made us really
excited just because we build

533
00:28:47.750 --> 00:28:51.530
this, we built this piece.
<inaudible> that sat very nicely

534
00:28:51.530 --> 00:28:54.320
on top of via FORO
and we saw new get

535
00:28:54.320 --> 00:28:57.350
is a really great way
of delivering it. Not only

536
00:28:57.350 --> 00:28:59.540
it's like you walk into
a project it's really, really

537
00:28:59.540 --> 00:29:03.020
simple just to drop your
Lego piece if you will,

538
00:29:03.560 --> 00:29:06.500
into that project. So yeah.
I mean, we, when we

539
00:29:06.500 --> 00:29:09.350
saw it, we, we were
super excited just cause we

540
00:29:09.350 --> 00:29:10.940
thought it fit so well
with what we were doing.

541
00:29:12.950 --> 00:29:18.260
The fact that NBC and
you guys both use T4

542
00:29:18.260 --> 00:29:21.080
templates for co-generation stuff. And
I guess, is it true

543
00:29:21.080 --> 00:29:24.410
that you guys support plugging
in your own T4 templates

544
00:29:24.410 --> 00:29:27.330
to generate classes pretty much
any way you want? Yeah.

545
00:29:27.590 --> 00:29:29.570
Is that a coincidence or
you can add, how did

546
00:29:29.570 --> 00:29:33.470
you guys get into the
whole T4 thing? A key

547
00:29:33.470 --> 00:29:35.930
force. This was one of
our, this was one of

548
00:29:35.930 --> 00:29:39.500
the big criticisms of what
we did in our initial

549
00:29:39.500 --> 00:29:41.710
release in three, five SD
one was that the code

550
00:29:41.710 --> 00:29:44.830
that we generated, not only
couldn't, you couldn't write poco

551
00:29:44.830 --> 00:29:47.590
classes, but you couldn't really
change what we were generating

552
00:29:47.590 --> 00:29:49.480
for you from a code
gen perspective. So this is

553
00:29:49.480 --> 00:29:52.720
one of our big ads
and yeah, four actually was,

554
00:29:52.870 --> 00:29:55.300
Hey, you know, you can
you write your poker classes,

555
00:29:55.300 --> 00:29:57.850
but you can also just
completely take over and do

556
00:29:57.850 --> 00:30:02.290
whatever code genuine. We ship
a few cogeneration strategies in

557
00:30:02.290 --> 00:30:05.470
the box. And then we
also use extension manager to

558
00:30:05.470 --> 00:30:07.630
ship a few other psych
our, I think our polka

559
00:30:07.630 --> 00:30:10.330
template is on extension manager
as well. And we've pretty

560
00:30:10.330 --> 00:30:14.320
consistently seen people take our
templates and tweak them for

561
00:30:14.320 --> 00:30:17.350
their domain, for whatever naming
convention, their hat they have.

562
00:30:17.350 --> 00:30:20.560
Or in some cases I've
seen shops where they've got

563
00:30:20.560 --> 00:30:23.680
a business object layer already.
So they have specific base

564
00:30:23.680 --> 00:30:26.830
classes and the interfaces that
they're using and they'll change

565
00:30:26.830 --> 00:30:29.200
our key four templates to
ax to use their stuff.

566
00:30:29.200 --> 00:30:30.970
So they'll take ours and
alternate and we think it's

567
00:30:30.970 --> 00:30:34.300
great. So just key for
in general, we're, we're super

568
00:30:34.300 --> 00:30:36.880
excited about it. We think
it's great. And you know,

569
00:30:36.880 --> 00:30:41.200
we, we, we see people
consistently using it to alter

570
00:30:41.200 --> 00:30:45.520
our code gen and takeover,
which is awesome. Yeah. I'm

571
00:30:45.520 --> 00:30:48.610
trying to get the T
for guys to realize that

572
00:30:48.700 --> 00:30:52.420
this is a big deal
and that T4 needs to

573
00:30:52.420 --> 00:30:56.290
have syntax highlighting. And you
know, I think people, some

574
00:30:56.290 --> 00:30:59.230
people are a little bit
afraid to bet the farm

575
00:30:59.230 --> 00:31:02.440
on, on T4 because when
you, I mean, it seems

576
00:31:02.440 --> 00:31:03.760
like a small thing, but
when you, you know, when

577
00:31:03.760 --> 00:31:06.370
you open the file up
to visual studio, it gives

578
00:31:06.370 --> 00:31:08.290
you a sense of like,
should I be here? This

579
00:31:08.290 --> 00:31:14.170
is I supposed to be
the world. And yeah, it's

580
00:31:14.170 --> 00:31:16.480
just a little bit scary,
you know, I mean, maybe

581
00:31:16.480 --> 00:31:19.330
that just kind of underlies
the whole kind of a

582
00:31:19.420 --> 00:31:22.690
joke about how, if you
know, my.net programmers are useless

583
00:31:22.690 --> 00:31:25.180
unless they've got, you know,
drag and drop support inside

584
00:31:25.180 --> 00:31:28.060
of, inside of visual studio.
But every time I opened

585
00:31:28.060 --> 00:31:30.850
a T for a template
and I don't get like

586
00:31:30.880 --> 00:31:32.800
someone doesn't hold my hand,
I'm a little bit like,

587
00:31:32.830 --> 00:31:35.650
Oh, yikes, Oh, am I
supposed to, you know, I've

588
00:31:35.650 --> 00:31:37.860
opened the door and I
shouldn't have done that. There's

589
00:31:37.860 --> 00:31:41.520
actually a pretty nice little
visual studio add in from

590
00:31:41.520 --> 00:31:44.490
a company called tangible, the
tangible T4 editor, which gives

591
00:31:44.490 --> 00:31:47.610
you the syntax highlighting. And
you can tell like, what's

592
00:31:47.670 --> 00:31:50.340
code, that's going to be
output versus what's code. That's

593
00:31:50.340 --> 00:31:54.150
running to help run the
template. That helps a lot.

594
00:31:54.150 --> 00:31:58.260
It avoids the, a bottle
of Advil syndrome that you

595
00:31:58.260 --> 00:32:02.490
get from working on templates.
Yeah. Yeah. We should, we

596
00:32:02.490 --> 00:32:04.260
should buy them or something.
I don't know. I guess

597
00:32:04.260 --> 00:32:05.550
this would be a good
example of the kind of

598
00:32:05.550 --> 00:32:08.370
thing where we could solve
a problem by, you know,

599
00:32:08.370 --> 00:32:12.150
going out there in the
community and, and, and bringing

600
00:32:12.150 --> 00:32:14.640
something in. But yeah, we
should all, we should all

601
00:32:14.640 --> 00:32:16.860
keep putting pressure on them
because it's all because we

602
00:32:16.860 --> 00:32:22.080
love T4 cause we're picking
on the team. Yeah, definitely.

603
00:32:22.110 --> 00:32:26.220
Yeah. So how do we,
how do we get enough?

604
00:32:26.400 --> 00:32:28.600
We can go into new
get, and it's it's called

605
00:32:28.850 --> 00:32:31.200
entity framework is the package.
You guys changed the name

606
00:32:31.200 --> 00:32:33.990
a little bit. So I
just say install, package, entity

607
00:32:33.990 --> 00:32:36.390
framework. Is there also an
MSI or something I should

608
00:32:36.390 --> 00:32:38.640
install on my system? Yeah,
you can get an M

609
00:32:38.700 --> 00:32:41.450
well, you don't have to,
like, you can use new

610
00:32:41.450 --> 00:32:43.430
get, and you'll get what
you need. Like it builds

611
00:32:43.430 --> 00:32:45.980
on top of the <inaudible>
you have net effects for

612
00:32:45.980 --> 00:32:48.590
installed, then you can use
new get, and you've got

613
00:32:48.590 --> 00:32:52.610
what you need. You just
go to town, you can

614
00:32:52.610 --> 00:32:55.250
go get our MSI, if
you want to GAC it.

615
00:32:55.370 --> 00:32:58.580
And that's off of the
MSDN download center. That'll also

616
00:32:58.580 --> 00:33:04.010
give you our DB context
generation for model first and

617
00:33:04.040 --> 00:33:07.730
database first workflows. Cool. So
I don't have to put

618
00:33:07.730 --> 00:33:09.470
anything in the gag or
running MSI if I don't

619
00:33:09.470 --> 00:33:11.990
want to, but if I
do, then I can go

620
00:33:11.990 --> 00:33:17.150
and get the installer. That's
right. All right. Very cool.

621
00:33:17.420 --> 00:33:19.700
And we just published. We're
actually, I think we're in

622
00:33:19.700 --> 00:33:23.060
the process of publishing and
entity framework code first, a

623
00:33:23.360 --> 00:33:26.180
tutorial on the asp.net website.
And I'll add a link

624
00:33:26.180 --> 00:33:29.180
to that on the show.
And there's lots of different

625
00:33:29.180 --> 00:33:31.160
code first tutorials that are
out there so people can

626
00:33:31.160 --> 00:33:35.630
try each of the different
modeling styles, database, first model

627
00:33:35.630 --> 00:33:38.750
first, or code first. And
I guess we're going to

628
00:33:38.750 --> 00:33:40.520
be doing some demos of
this at mix too. So

629
00:33:40.790 --> 00:33:42.230
people will be able to
get as much of this

630
00:33:42.260 --> 00:33:47.420
as they, as they can
handle. Awesome. Yeah. Awesome. Thanks

631
00:33:47.420 --> 00:33:50.300
guys. I really appreciate your
time. This has been another

632
00:33:50.300 --> 00:33:52.940
episode of Hansel minutes. We'll
see you again next week.

