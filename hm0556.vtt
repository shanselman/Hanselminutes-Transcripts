WEBVTT FILE

1
00:00:00.330 --> 00:00:03.480
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.480 --> 00:00:06.450
they make the show possible.
Today's show is sponsored by

3
00:00:06.450 --> 00:00:10.620
developer express, become a UI
superhero with dev express controls

4
00:00:10.620 --> 00:00:15.150
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.540 --> 00:00:19.620
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.650 --> 00:00:23.730
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.850 --> 00:00:48.770
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com
From hanselminutes.com. It's Hansel minutes,

8
00:00:49.220 --> 00:00:53.480
our weekly discussion with web
developer and technologist Scott Hanselman.

9
00:00:53.900 --> 00:00:58.100
This is Lawrence Ryan announcing the
show number 560. In this

10
00:00:58.100 --> 00:01:01.910
episode, Scott talks with Nolan
Lawson about the concept of

11
00:01:01.910 --> 00:01:04.910
progressive enhancement and how it
applies to web apps today.

12
00:01:09.770 --> 00:01:11.810
Hi, this is Scott Hanselman.
This is another episode of

13
00:01:11.810 --> 00:01:14.750
Hansel minutes today. I'm talking
with Nolan Lawson. He's a

14
00:01:14.750 --> 00:01:18.500
program manager on the edge
team, but I'm actually not

15
00:01:18.500 --> 00:01:19.940
talking to you about edge.
I want to talk to

16
00:01:19.940 --> 00:01:22.880
you about something different. You
put a pro blog post

17
00:01:22.880 --> 00:01:26.330
out recently, and it started
kind of an interesting debate.

18
00:01:27.410 --> 00:01:29.540
Yeah, I guess you could
call it that. It was

19
00:01:29.540 --> 00:01:32.930
definitely interesting. What was the
controversy? Well, I wrote a

20
00:01:32.930 --> 00:01:36.050
blog post called progressive enhancement.
Isn't dead, but it smells

21
00:01:36.050 --> 00:01:38.390
funny. And this was kind
of a response to a

22
00:01:38.420 --> 00:01:42.170
talk that I gave recently
at frontiers cough in Amsterdam,

23
00:01:42.680 --> 00:01:47.270
where I made some sort
of controversial statements about progressive

24
00:01:47.270 --> 00:01:50.540
enhancement and with some folks
that went over pretty well

25
00:01:50.570 --> 00:01:52.850
with other folks, it did
not go over well. And

26
00:01:53.240 --> 00:01:55.610
so this blog post was
my attempt to sort of

27
00:01:56.090 --> 00:01:59.330
clear up my position on
the issue and to continue

28
00:01:59.330 --> 00:02:02.240
the debate. Okay. So let's,
let's back up and let's

29
00:02:02.240 --> 00:02:06.500
talk to the audience about
what is progressive enhancement for,

30
00:02:06.740 --> 00:02:08.300
you know, for the developer
who's on their way to

31
00:02:08.300 --> 00:02:10.130
work right now and their
boss wants them to make

32
00:02:10.130 --> 00:02:14.180
it work on all browsers.
Yeah, so progressive enhancement is

33
00:02:14.180 --> 00:02:16.430
kind of a loaded term.
A lot of people use

34
00:02:16.430 --> 00:02:19.850
it for a lot of
different meetings, but in my

35
00:02:19.850 --> 00:02:23.000
mind there are sort of
two different major interpretations of

36
00:02:23.000 --> 00:02:25.880
it. There's the sort of
broad version that says the

37
00:02:25.880 --> 00:02:27.920
way that you should build
websites is you should start

38
00:02:27.920 --> 00:02:32.600
with a, a basis of
functionality. You know, what is

39
00:02:32.600 --> 00:02:35.480
the core value proposition of
this website? And they make

40
00:02:35.480 --> 00:02:38.690
sure that that works using
the simplest possible technology and

41
00:02:38.690 --> 00:02:41.390
then enhance upward based on
that. So this is kind

42
00:02:41.390 --> 00:02:45.200
of in contrast to a
graceful degree degradation where you

43
00:02:45.200 --> 00:02:49.670
would build your whizzy snappy
feature complete, you know, has

44
00:02:49.670 --> 00:02:52.700
all the bells and whistles
website. And then for browsers

45
00:02:52.700 --> 00:02:56.480
that don't support X, Y,
Z feature, you just kind

46
00:02:56.480 --> 00:03:00.280
of peel those, those features
back. And argument goes that

47
00:03:00.490 --> 00:03:04.180
the progressive enhancement approach is
kind of more battle-tested, it's

48
00:03:04.180 --> 00:03:09.940
more foolproof. So there's that,
that definition of progressive enhancement,

49
00:03:09.940 --> 00:03:11.830
which, which I think is
actually a very sensible way

50
00:03:11.830 --> 00:03:14.230
to build websites. And then
there's also a sort of

51
00:03:14.230 --> 00:03:17.920
more narrow definition, a more
classical definition of progressive enhancement,

52
00:03:18.280 --> 00:03:21.550
which is that you should
start with HTML as your

53
00:03:21.550 --> 00:03:25.150
baseline functionality and then layer
CSS on top of that

54
00:03:25.150 --> 00:03:27.760
as another layer, and then
JavaScript as another layer. And

55
00:03:27.760 --> 00:03:31.420
this is commonly interpreted as
you should make your websites

56
00:03:31.420 --> 00:03:36.600
work without JavaScript. So if
you say you should make

57
00:03:36.600 --> 00:03:39.480
your websites work without JavaScript,
that seems like a reasonable

58
00:03:39.540 --> 00:03:43.140
statement. It doesn't seem controversial
for someone who's got many

59
00:03:43.140 --> 00:03:46.320
years of history on the
web, you know, make it

60
00:03:46.320 --> 00:03:50.340
work with HTML, text boxes
forms like we did just

61
00:03:50.340 --> 00:03:54.750
fine without JavaScript for many,
many years. And now that

62
00:03:54.880 --> 00:03:58.830
that, you know, very, very
inexpensive, very, very low end,

63
00:03:59.070 --> 00:04:02.730
you know, devices can, can
work great with just HTML.

64
00:04:02.730 --> 00:04:07.260
That seems like a totally
non-controversial statement. Well, it ends

65
00:04:07.260 --> 00:04:10.080
up being a very controversial
statement because as it turns

66
00:04:10.080 --> 00:04:12.420
out, this is largely not
the way that people are

67
00:04:12.420 --> 00:04:15.480
building websites today. So I
mentioned my blog posts that

68
00:04:15.480 --> 00:04:18.570
there's, there's lots of examples
of major websites that just

69
00:04:18.570 --> 00:04:22.260
do not work at all
without JavaScript, Facebook, Instagram. These

70
00:04:22.260 --> 00:04:23.910
are sites that if you
go to them, you'll either

71
00:04:23.910 --> 00:04:27.390
be greeted with a totally
blank page or maybe some

72
00:04:27.390 --> 00:04:32.370
nice little a notice saying,
Hey, we require JavaScript and

73
00:04:32.370 --> 00:04:35.340
you should enable JavaScript in
order to, to surf surf

74
00:04:35.340 --> 00:04:38.220
the web on our page.
Interesting. So I have a

75
00:04:38.220 --> 00:04:41.760
talk about JavaScript where I
tease, I tease people about

76
00:04:42.000 --> 00:04:44.880
not working with JavaScript because
ultimately we do recognize that

77
00:04:44.910 --> 00:04:48.450
JavaScript makes things better, but
it doesn't it come down

78
00:04:48.450 --> 00:04:50.520
to whether or not you
want your audience to be

79
00:04:50.790 --> 00:04:54.870
bigger or not. Right. Is
this about like the vegan

80
00:04:54.870 --> 00:04:57.930
CrossFitters that also don't run
with JavaScript? You know what

81
00:04:57.930 --> 00:04:59.340
I mean? Like they're just
like, yeah. You know, I

82
00:04:59.340 --> 00:05:01.740
don't have a television and
I run with JavaScript disabled.

83
00:05:02.100 --> 00:05:04.080
Is this about making them
happy or is this about

84
00:05:04.110 --> 00:05:08.100
making the millions and millions
of people with smaller, low

85
00:05:08.100 --> 00:05:11.550
end devices that don't have
the, the, the power to

86
00:05:11.760 --> 00:05:15.600
run JavaScript on a mobile
device? Well, that's actually exactly

87
00:05:15.600 --> 00:05:17.790
the point where I kind
of take exception with the

88
00:05:17.850 --> 00:05:20.880
narrow version of JavaScript is
that I actually don't think

89
00:05:20.880 --> 00:05:24.000
that it enhances your target
audience by quite so much,

90
00:05:24.210 --> 00:05:27.390
maybe as it used to.
So I think maybe back

91
00:05:27.390 --> 00:05:30.600
when the basis of functionality
was something like <inaudible> where

92
00:05:30.600 --> 00:05:33.030
you really couldn't be sure
whether this thing was going

93
00:05:33.030 --> 00:05:36.000
to reliably run your JavaScript
or not, because it didn't

94
00:05:36.000 --> 00:05:38.100
have it, wasn't very feature
rich. And a lot of

95
00:05:38.100 --> 00:05:40.470
the features were very buggy
or slow. So it made

96
00:05:40.470 --> 00:05:43.110
a lot of sense to
just cut off JavaScript for

97
00:05:43.110 --> 00:05:45.360
such browsers. I think it's
a technique that I believe

98
00:05:45.360 --> 00:05:48.540
the BBC called cutting the
mustard. But what I pointed

99
00:05:48.540 --> 00:05:50.580
out in this blog post
is that, Hey, when I

100
00:05:50.580 --> 00:05:55.080
build web applications myself nowadays,
especially progressive web applications, I

101
00:05:55.080 --> 00:05:59.210
find that my basis of
functionality is say a three

102
00:05:59.210 --> 00:06:02.300
or four year old Android
phone, you know, a very

103
00:06:02.300 --> 00:06:04.790
low end kind of Android
phone that might be popular

104
00:06:04.790 --> 00:06:08.180
in a place like India
or Southeast Asia or, or

105
00:06:08.180 --> 00:06:12.650
Nigeria. And these devices, they
have auto updating browsers. They

106
00:06:12.650 --> 00:06:17.240
can run the latest, latest
JavaScript features available for the

107
00:06:17.240 --> 00:06:19.760
web platform. And so it
doesn't make a whole lot

108
00:06:19.760 --> 00:06:21.980
of sense to me to
constrain myself to this know

109
00:06:21.980 --> 00:06:25.640
JavaScript world, like who exactly
am I making my websites

110
00:06:25.640 --> 00:06:29.030
more accessible to when I
do that? Interesting. Okay. With,

111
00:06:29.030 --> 00:06:32.290
does it, is it then
maybe not a no JavaScript

112
00:06:32.290 --> 00:06:35.590
or like full angular Gmail
kind of an application, or

113
00:06:35.590 --> 00:06:38.140
is this just a matter
of, of, you know, light

114
00:06:38.230 --> 00:06:40.630
JavaScript? I mean, if you
go to a website like

115
00:06:40.630 --> 00:06:43.330
the verge, you know, it's
like the homepage of several

116
00:06:43.330 --> 00:06:46.900
megs and Lord knows how
many different half dozen or

117
00:06:46.900 --> 00:06:50.500
a dozen asynchronous JavaScript libraries
all coming in and jabbering

118
00:06:50.500 --> 00:06:53.050
at each other all at
the same time, it doesn't

119
00:06:53.050 --> 00:06:56.020
have to be either or
does it, No, it absolutely

120
00:06:56.020 --> 00:06:59.770
doesn't need to. So this
is a very complex issue

121
00:06:59.770 --> 00:07:01.810
and there's a lot of
subtleties here and the arguments

122
00:07:01.810 --> 00:07:04.990
against a website like the
verge or any website that

123
00:07:04.990 --> 00:07:08.050
overuses JavaScript, which, I mean,
arguably is a lot of

124
00:07:08.050 --> 00:07:10.030
the web right now. This
is actually, I would argue

125
00:07:10.030 --> 00:07:12.670
as someone who works on
the performance team on, on,

126
00:07:12.880 --> 00:07:15.580
on Microsoft edge, that that
is the number one performance

127
00:07:15.580 --> 00:07:18.070
problem on the web. These
days is overuse of JavaScript.

128
00:07:18.220 --> 00:07:20.950
Really. So it's not, it's
not slow internet or slow

129
00:07:20.950 --> 00:07:24.850
CPU. It's just JavaScript doing
things in the background and

130
00:07:24.970 --> 00:07:27.610
that just not Oh yeah.
And you, you don't have

131
00:07:27.610 --> 00:07:28.930
to ask me, all you
have to do is ask

132
00:07:28.930 --> 00:07:31.720
you're a CPU fan. I
mean, you go to the

133
00:07:31.720 --> 00:07:34.210
average website these days and
you hear your fans slowly

134
00:07:34.210 --> 00:07:37.470
start to we're as like
wind up as it is.

135
00:07:37.470 --> 00:07:40.240
It's running all these, you
know, a lot of his

136
00:07:40.240 --> 00:07:42.040
ads and trackers, but also
a lot of it is

137
00:07:42.040 --> 00:07:44.590
just kind of a sloppiness
sloppy use of JavaScript. So

138
00:07:45.390 --> 00:07:47.590
that being said, like, I,
I feel like it's possible

139
00:07:47.590 --> 00:07:50.320
to hold that opinion, hold
the opinion that JavaScript is

140
00:07:50.320 --> 00:07:52.150
overused, and we should learn
how to use it more

141
00:07:52.150 --> 00:07:55.540
judiciously and to use features
like code splitting and server

142
00:07:55.540 --> 00:08:00.160
side rendering to, to limit
our JavaScript. While also saying

143
00:08:00.160 --> 00:08:03.070
that I don't think it's
extremely valuable to make a

144
00:08:03.070 --> 00:08:06.520
website work, even making it
in the core value proposition

145
00:08:06.520 --> 00:08:11.170
of website work without JavaScript.
How does this mean that

146
00:08:11.170 --> 00:08:16.120
we don't end up writing
two websites, completely two entirely

147
00:08:16.120 --> 00:08:20.080
different website? Well, and that's
kind of the challenge, right?

148
00:08:20.170 --> 00:08:22.630
And, and that's the challenge
that I would pose to

149
00:08:22.930 --> 00:08:25.840
classical progressive enhancement advocates who
would look at a site

150
00:08:25.870 --> 00:08:28.360
like Instagram and say, Hey,
this is silly. Like, why

151
00:08:28.360 --> 00:08:30.970
is it showing me a
blank screen without JavaScript? It,

152
00:08:31.060 --> 00:08:34.480
it could, and you could
build Instagram with, with an

153
00:08:34.510 --> 00:08:38.080
input field to upload a
file and a, and an

154
00:08:38.080 --> 00:08:40.900
image tag, right? That's what
they say. And, but you're

155
00:08:40.900 --> 00:08:42.760
right. I mean, you would
effectively then have to build

156
00:08:42.760 --> 00:08:45.190
two different versions of Instagram
because it is a very

157
00:08:45.190 --> 00:08:49.660
rich client side, JavaScript application
as written. And so my

158
00:08:49.660 --> 00:08:53.140
response to that is that
JavaScript frameworks have largely kind

159
00:08:53.140 --> 00:08:56.520
of risen to the occasion
on this and the, the

160
00:08:56.540 --> 00:09:00.300
modern JavaScript frameworks like react
and angular two and Ember

161
00:09:00.300 --> 00:09:02.370
and Vue JS. They all
have features where you can

162
00:09:02.370 --> 00:09:04.920
take you, you can write
your app as a purely

163
00:09:04.950 --> 00:09:08.340
pure client side, JavaScript application,
full JavaScript code base. You

164
00:09:08.340 --> 00:09:10.320
don't even have to have
any HTML or CSS in

165
00:09:10.320 --> 00:09:12.330
there at all. And then
you can use features like

166
00:09:12.330 --> 00:09:14.940
server side rendering to do
Intel and code splitting, to

167
00:09:14.940 --> 00:09:18.090
do intelligent splitting of this
JavaScript, to render on the

168
00:09:18.090 --> 00:09:22.350
service side or to render
at build time into HTML,

169
00:09:22.350 --> 00:09:26.520
CSS, JavaScript as your build
target. And, and that is

170
00:09:26.520 --> 00:09:29.610
a good practice to do
because the classical progressive enhancement

171
00:09:29.610 --> 00:09:33.330
advocates are 100%, right? That
it tends to be a

172
00:09:33.480 --> 00:09:36.660
better for first load performance
to send down HTML and

173
00:09:36.660 --> 00:09:40.140
CSS, and then have minimal
JavaScript after that for first

174
00:09:40.140 --> 00:09:43.260
load performance, that is way
faster than sending down empty

175
00:09:43.260 --> 00:09:46.440
markup, like an empty body
tag say, and then a

176
00:09:46.440 --> 00:09:48.930
script tag, a gigantic script
tag that just renders everything.

177
00:09:49.490 --> 00:09:51.650
So, okay. Let me see
if I can peel this

178
00:09:51.650 --> 00:09:55.070
away. Cause like you said,
it is complicated. So you're

179
00:09:55.070 --> 00:09:58.220
saying that if you don't
have JavaScript, you certainly it's

180
00:09:58.220 --> 00:10:00.050
unacceptable to just show up
and just get like an

181
00:10:00.050 --> 00:10:02.030
empty white screen. You know,
if you go to one

182
00:10:02.030 --> 00:10:05.030
of the tumblers, like side
Java script, you can see

183
00:10:05.030 --> 00:10:07.580
examples where it's like, the
site looks great with JavaScript,

184
00:10:07.580 --> 00:10:10.280
you turn it off and
it just either breaks like

185
00:10:10.310 --> 00:10:13.880
no one even thought to
do that or you get

186
00:10:13.940 --> 00:10:16.430
just chunks of stuff, but
you keep using this term

187
00:10:16.430 --> 00:10:20.320
splitting. Can you parse that
out for me? Yes. I'd

188
00:10:20.330 --> 00:10:23.480
love to do define that,
but real quick, I want

189
00:10:23.480 --> 00:10:26.870
to, to assert that I
actually don't think it's unacceptable

190
00:10:27.080 --> 00:10:29.000
to have a page that
gives a white screen without

191
00:10:29.000 --> 00:10:30.950
JavaScript. I mean, this is
the way that many people

192
00:10:30.950 --> 00:10:33.500
are building websites today. However,
I think that it's a

193
00:10:33.500 --> 00:10:39.860
performance boost to apply server
side rendering, AKA progressive enhancement

194
00:10:40.250 --> 00:10:46.820
through techniques like server-side react.
Server-side angular now as for

195
00:10:46.820 --> 00:10:49.670
code splitting. That's the idea
that instead of shipping down

196
00:10:49.670 --> 00:10:53.960
one gigantic monolithic JavaScript bundle
on first load that does

197
00:10:53.960 --> 00:10:57.470
everything and anything that your
entire website might do your

198
00:10:57.470 --> 00:11:00.350
entire, let's say single page
app might do you split

199
00:11:00.350 --> 00:11:02.540
it up based on functionality
so that when I go

200
00:11:02.540 --> 00:11:04.550
to the homepage, like, do
I really need a bunch

201
00:11:04.550 --> 00:11:08.240
of JavaScript that tells me
that renders the about page

202
00:11:08.270 --> 00:11:10.700
or renders the credits page
or renters the contact us

203
00:11:10.700 --> 00:11:13.010
page? No, I'm probably never
even going to click on

204
00:11:13.010 --> 00:11:14.930
those. So it's really silly
to ship down all that

205
00:11:14.930 --> 00:11:20.720
JavaScript on, on first load.
I see. So that again,

206
00:11:20.750 --> 00:11:23.150
that's funny that that it's
just such a different perspective

207
00:11:23.150 --> 00:11:26.030
from the front end and
the back end. You're simply

208
00:11:26.030 --> 00:11:30.260
saying that JavaScript folks in
front end folks should apply

209
00:11:30.260 --> 00:11:33.740
single responsibility principles and have
those go all the way

210
00:11:33.740 --> 00:11:38.820
out to their deployment, their,
their deployment process and the

211
00:11:38.820 --> 00:11:41.930
D the unit of measurement
that the, the unit of

212
00:11:41.930 --> 00:11:45.500
work, rather the modules should
reflect the work that's being

213
00:11:45.500 --> 00:11:48.650
done. And you shouldn't be
bringing down, you know, system

214
00:11:48.650 --> 00:11:51.650
dot JS that represents everything
that the site could ever

215
00:11:51.650 --> 00:11:54.700
potentially do. It should be
broken into pieces, but it's

216
00:11:54.700 --> 00:11:57.760
easy because we have, we
all have, you know, 30

217
00:11:57.760 --> 00:12:01.840
megabit connections and fast computers.
So we, we, we designed

218
00:12:01.840 --> 00:12:03.820
for a user that we
think is us when it

219
00:12:03.820 --> 00:12:07.590
turns out they never really
are us. Yeah. And this

220
00:12:07.590 --> 00:12:09.540
is the real challenge that
I see the challenge is

221
00:12:09.540 --> 00:12:12.150
to, is to fix our
toolings, to fix our build

222
00:12:12.150 --> 00:12:15.720
systems so that it's very
easy. It's very ergonomic to

223
00:12:16.350 --> 00:12:19.410
build using whatever methods you
want, which more and more

224
00:12:19.410 --> 00:12:23.160
is just almost purely JavaScript.
And then have that output

225
00:12:23.160 --> 00:12:26.130
as a bill target some
very optimized format for your

226
00:12:26.130 --> 00:12:29.490
website. And I think the,
the JavaScript frameworks of 2016

227
00:12:29.490 --> 00:12:32.280
all do this like server
side rendering is now a

228
00:12:32.280 --> 00:12:37.920
table stakes for any respectable
JavaScript framework. So You said

229
00:12:37.920 --> 00:12:40.590
in your, at your talk
at frontiers and Amsterdam, you

230
00:12:40.590 --> 00:12:43.710
had a slide that said
in 2016, it's okay to

231
00:12:43.710 --> 00:12:46.800
build a website that doesn't
work without JavaScript. And that

232
00:12:46.800 --> 00:12:50.010
was where it went South.
Yes. That, that is where

233
00:12:50.580 --> 00:12:52.290
someone took a picture of
me. And then it got

234
00:12:52.290 --> 00:12:56.640
retweeted hundreds of times. And
there were lots of notables

235
00:12:56.640 --> 00:12:59.850
in the web community who
had some choice words for

236
00:12:59.850 --> 00:13:03.480
me in that slide. They
variable <inaudible> for slate disagreed

237
00:13:03.480 --> 00:13:07.260
with it. They're saying to
be clear, let's just reverse

238
00:13:07.260 --> 00:13:11.490
that in 2016, it is
not okay to build a

239
00:13:11.490 --> 00:13:14.130
website that doesn't work with
that JavaScript. They want JavaScript

240
00:13:14.340 --> 00:13:18.540
to be bread and butter
of the web. Yeah. The,

241
00:13:18.540 --> 00:13:20.880
the arguments that I saw
were things like, Hey, just

242
00:13:20.880 --> 00:13:24.450
because Gmail and Facebook and
Instagram and other big sites

243
00:13:24.450 --> 00:13:28.380
do this doesn't mean you
should too. And Hey, this,

244
00:13:29.070 --> 00:13:30.960
you should be doing this
because of accessibility. You should

245
00:13:30.960 --> 00:13:35.430
be doing this because of
feature phones, running proxy browsers,

246
00:13:35.430 --> 00:13:39.120
Hey, you should be doing
this because, because of performance,

247
00:13:39.120 --> 00:13:41.040
which is the thing that
I actually really agree with.

248
00:13:42.720 --> 00:13:48.540
It's, it's kind of a,
it's a, it's a very

249
00:13:48.540 --> 00:13:54.090
longstanding, accepted wisdom it's approach.
And I think that when

250
00:13:54.090 --> 00:13:56.040
I said that it kind
of hit a nerve because

251
00:13:56.310 --> 00:13:57.960
I think what I, what
I showed is that there's

252
00:13:57.960 --> 00:14:00.690
actually a very big divide
between what is the traditional

253
00:14:00.690 --> 00:14:02.790
accepted wisdom. Like you go
and buy an O'Reilly book

254
00:14:02.790 --> 00:14:04.470
and it tells you to
do this. And then the

255
00:14:04.470 --> 00:14:06.900
way people are actually building
websites and the way that

256
00:14:06.900 --> 00:14:08.760
I approach it is that
the way I see people

257
00:14:08.760 --> 00:14:11.160
building websites is that they
don't even think to go

258
00:14:11.160 --> 00:14:13.290
into their settings and turn
off JavaScript and see what

259
00:14:13.290 --> 00:14:15.570
the page looks like. Like
it has never even crossed

260
00:14:15.570 --> 00:14:17.730
their mind that it's just
not how people build websites

261
00:14:17.730 --> 00:14:21.180
nowadays. And I'm happy to
just kind of accept that

262
00:14:21.180 --> 00:14:23.670
reality and then to work
with developers from there and

263
00:14:23.670 --> 00:14:26.340
say, Hey, but have you
tried turning off JavaScript? Because

264
00:14:26.340 --> 00:14:28.440
if you do, you know,
you get a different view

265
00:14:28.440 --> 00:14:29.910
of your website and you
get a view of your

266
00:14:29.910 --> 00:14:32.760
website that might give you
an idea of how you

267
00:14:32.760 --> 00:14:37.110
can improve the loading performance,
how you can show the

268
00:14:37.110 --> 00:14:39.630
user an initial view of
your page using HTML and

269
00:14:39.630 --> 00:14:42.810
CSS, even before the JavaScript
loads. You know, I prefer

270
00:14:42.810 --> 00:14:45.360
to have that conversation rather
than sort of dogmatic, like,

271
00:14:45.360 --> 00:14:48.570
no, you're doing it wrong.
Stop doing it wrong. Yeah.

272
00:14:48.640 --> 00:14:52.100
See, that seems very reasonable
from my perspective, that seems

273
00:14:52.100 --> 00:14:56.210
like a user empathy. It
seems like a no different

274
00:14:56.210 --> 00:14:59.240
than saying we should put
Ault tags on our images

275
00:14:59.390 --> 00:15:02.060
because we should think about
the low vision people. Like

276
00:15:02.060 --> 00:15:05.870
there's just there's, you should
look at the various angles

277
00:15:06.290 --> 00:15:09.620
that someone comes into your
site and looks at it

278
00:15:09.620 --> 00:15:13.550
with different perspectives and, you
know, understood, understand what it

279
00:15:13.550 --> 00:15:16.400
looks like. And you're saying
that there is a class

280
00:15:16.400 --> 00:15:19.550
of people out there who
don't have JavaScript. So let's

281
00:15:19.610 --> 00:15:23.240
take a look a, that
sounds like that. Simply saying

282
00:15:23.240 --> 00:15:25.580
that it's okay to build
a website that doesn't work

283
00:15:25.580 --> 00:15:30.350
with that JavaScript is the
there's missing too much context.

284
00:15:31.570 --> 00:15:33.640
Yeah. And there's different degrees
to all of this. Like

285
00:15:33.640 --> 00:15:36.070
in fact, I think one
place where developers get hung

286
00:15:36.070 --> 00:15:37.750
up on this is they
think, you know, who has

287
00:15:37.750 --> 00:15:41.260
JavaScript disabled, like nobody has
JavaScript disabled, but it's not

288
00:15:41.260 --> 00:15:43.690
even so much about that.
This, the strongest argument for

289
00:15:43.750 --> 00:15:47.410
progressive enhancement, this traditional progressive
enhancement approach is just that

290
00:15:47.860 --> 00:15:50.470
the JavaScript takes a while
to come down and your

291
00:15:50.530 --> 00:15:54.400
users don't have JavaScript when
the JavaScript hasn't loaded yet.

292
00:15:54.760 --> 00:15:57.100
And so it's a missed
opportunity if you send down

293
00:15:57.100 --> 00:16:00.610
empty markup and then wait
for your gigantic JavaScript bundle

294
00:16:00.610 --> 00:16:04.480
to, to download, to parse,
to execute before you render

295
00:16:04.480 --> 00:16:06.670
anything, like that's a missed
opportunity. You could show the

296
00:16:06.670 --> 00:16:09.220
user some initial view of
your page, at least the

297
00:16:09.220 --> 00:16:12.520
background color or something, you
know, which increases the perceived

298
00:16:12.520 --> 00:16:15.040
performance of the page. And
this is the way that

299
00:16:15.040 --> 00:16:16.840
I always like to talk
about it as a performance

300
00:16:16.870 --> 00:16:20.410
boost. You know, not as
like a moral imperative or

301
00:16:20.410 --> 00:16:24.040
something, because I think the
actual number of users who

302
00:16:24.040 --> 00:16:27.220
are without JavaScript is becoming
vanishingly small every year. And

303
00:16:27.220 --> 00:16:29.440
so that's, that's not the
right way to argue it,

304
00:16:29.440 --> 00:16:32.920
I believe. Okay. So then
this is about responsible use

305
00:16:32.950 --> 00:16:38.140
of JavaScript appropriate use of
JavaScript to your point there,

306
00:16:38.200 --> 00:16:41.020
they might have Android devices,
the next billion people who

307
00:16:41.020 --> 00:16:43.780
come online will be on
smartphones. You know, they will

308
00:16:43.780 --> 00:16:46.990
have a browser that gets
updated, and it's probably less

309
00:16:46.990 --> 00:16:49.630
important that we worry about
JavaScript and more important that

310
00:16:49.630 --> 00:16:53.320
we worry about the reliability
of their internet connection. Yeah.

311
00:16:53.320 --> 00:16:55.180
And that's actually the, the
big point that I was

312
00:16:55.180 --> 00:16:57.220
trying to get across in
my blog post is that,

313
00:16:57.640 --> 00:16:59.740
Hey, we're living in a
world now where people have

314
00:16:59.740 --> 00:17:04.120
very capable smartphones, very capable
browsers, and what's not reliable

315
00:17:04.120 --> 00:17:06.040
at all. Is the network.
Like if you look at

316
00:17:06.040 --> 00:17:08.860
the, the quality of network
connections around the world, it's

317
00:17:08.860 --> 00:17:11.200
quite poor. And in some
places it's even getting poorer,

318
00:17:11.260 --> 00:17:14.440
like I read a report
by twin prime that said

319
00:17:14.440 --> 00:17:16.870
that even in the U
S a LTE speeds have

320
00:17:16.870 --> 00:17:20.230
slowed by 50% in the
last year, just because so

321
00:17:20.230 --> 00:17:22.210
many more people are coming
onto these networks and they're

322
00:17:22.210 --> 00:17:25.930
getting saturated. And the solution
that I propose to that

323
00:17:25.990 --> 00:17:31.030
is to use API APIs
in, in the browser available

324
00:17:31.030 --> 00:17:33.940
on the client side that
allow you to cache data

325
00:17:33.940 --> 00:17:36.640
locally and to prefer the
local network or for the

326
00:17:36.640 --> 00:17:39.100
local cash at all times,
instead of going to the

327
00:17:39.100 --> 00:17:43.750
network, which is slow unreliable,
unresponsive. And this is kind

328
00:17:43.750 --> 00:17:46.780
of th this is usually
put under the umbrella of

329
00:17:46.810 --> 00:17:50.010
offline first, this idea of
preferring the local, you know,

330
00:17:50.010 --> 00:17:52.800
It's so interesting that we've
been talking about that it

331
00:17:52.800 --> 00:17:57.600
feels like since 2011, 2012,
and here we are with

332
00:17:57.630 --> 00:18:01.110
doing all kinds of amazing
3d things with, with Theano

333
00:18:01.110 --> 00:18:06.000
CSS and pushing JavaScript to
amazing levels. But we also

334
00:18:06.000 --> 00:18:09.360
have this nice kind of
basically SQL server database and

335
00:18:09.360 --> 00:18:13.650
file system inside of JavaScript.
And we would rather download,

336
00:18:13.740 --> 00:18:17.190
you know, a 40 K
or even a 400 K

337
00:18:17.190 --> 00:18:21.210
PNG, then put the effort
into downloading. For example, the

338
00:18:21.210 --> 00:18:24.690
product catalog for our website
is Jason. And then doing

339
00:18:24.690 --> 00:18:27.570
all of our work locally
on that product catalog, as

340
00:18:27.570 --> 00:18:30.660
opposed to constantly paging through
stuff. Why, why are we

341
00:18:30.660 --> 00:18:35.160
spending time bringing down hero
images and not the database,

342
00:18:35.280 --> 00:18:36.990
and then doing all the
work on the client side?

343
00:18:38.390 --> 00:18:39.920
I think the answer to
that is that it's just

344
00:18:39.920 --> 00:18:42.440
really hard. Like, ah, this
is actually kind of my

345
00:18:42.530 --> 00:18:44.750
area of expertise. I work
on an open source project

346
00:18:44.750 --> 00:18:47.840
called pouch DB, which is
a, an instructionally over index

347
00:18:47.840 --> 00:18:50.450
DV. And so I'm very
familiar with all these browser

348
00:18:50.450 --> 00:18:54.020
storage mechanisms with a P
it's a pun on couch

349
00:18:54.020 --> 00:18:56.540
DB. Yeah. It's essentially a
couch DB that runs in

350
00:18:56.540 --> 00:18:59.780
your browser. And to be
honest, like a lot of

351
00:18:59.780 --> 00:19:03.110
these technologies didn't really meet,
reach maturity until recently. I

352
00:19:03.110 --> 00:19:05.600
mean, as little as three
years ago, you know, you

353
00:19:05.600 --> 00:19:09.020
didn't have index DB in,
in browsers like Safari or

354
00:19:09.020 --> 00:19:11.870
an older versions of Android.
You didn't have service workers,

355
00:19:11.870 --> 00:19:14.690
service workers quite new before
that you had application cash,

356
00:19:14.720 --> 00:19:17.630
which is now deprecated, but
was really, really hard to

357
00:19:17.630 --> 00:19:19.460
work with, but it was
basically the only way to

358
00:19:19.460 --> 00:19:24.740
get reliable, offline support in
your site. And so I

359
00:19:24.740 --> 00:19:27.590
think that there's increasing interest
now, this especially increasing interest

360
00:19:27.590 --> 00:19:30.620
because Google particularly I've been
pushing very hard on this

361
00:19:30.650 --> 00:19:34.370
with their progressive web apps
idea, which the other browser

362
00:19:34.370 --> 00:19:37.790
vendors like, like edge and,
and Firefox are very much

363
00:19:37.790 --> 00:19:41.300
behind now. And, and they've
been pushing ideas of offline

364
00:19:41.300 --> 00:19:46.130
first because they recognize this
reality of the network being

365
00:19:46.160 --> 00:19:48.950
very, very poor, but browsers
being quite capable these days.

366
00:19:50.180 --> 00:19:53.540
And there's also more and
more recognition about what the

367
00:19:53.540 --> 00:19:57.200
server's good at and what
the client's good at. And

368
00:19:57.410 --> 00:19:59.900
I like that you're pointing
out that these, these devices,

369
00:19:59.900 --> 00:20:02.510
these, these, what we think
of as low end devices

370
00:20:02.600 --> 00:20:05.690
are certainly more powerful than
the desktops we had 10

371
00:20:05.690 --> 00:20:07.790
years ago. So let's get
them doing a little bit

372
00:20:07.790 --> 00:20:10.700
of work, but let's be
responsible about what, what their

373
00:20:10.700 --> 00:20:14.480
job is and what the
service job is. Yes, absolutely.

374
00:20:14.480 --> 00:20:16.520
It's, it's, it's critical to
just be aware of the

375
00:20:16.520 --> 00:20:19.040
trade offs, like the trade
offs in things like, you

376
00:20:19.040 --> 00:20:21.890
know, do you value first
page load versus subsequent page

377
00:20:21.890 --> 00:20:25.850
load? Is your site mostly
about consumption or is it

378
00:20:25.850 --> 00:20:28.700
about interaction and synchronization? I
mean, if you're building a

379
00:20:28.700 --> 00:20:31.940
static site, like I think
that building it as HTML

380
00:20:31.940 --> 00:20:34.700
first is perfectly valid. That's
a really good way to

381
00:20:34.700 --> 00:20:36.800
do it. And you can
still get the best of

382
00:20:36.800 --> 00:20:41.630
both worlds. There's emerging, there's
emerging frameworks like Gatsby and

383
00:20:41.630 --> 00:20:44.000
next JS that allow you
to essentially build a static

384
00:20:44.000 --> 00:20:47.860
site that then has a
service worker that at, and

385
00:20:47.860 --> 00:20:50.860
a client's side library that
handles client side rendering, a

386
00:20:51.070 --> 00:20:53.560
service worker rendering, and then
service side rendering when it

387
00:20:53.560 --> 00:20:55.990
needs to. So I think
the tooling is getting better

388
00:20:55.990 --> 00:20:58.930
and better to the point
where this whole issue of

389
00:20:59.080 --> 00:21:01.570
do write HTML first, or
do you write JavaScript first?

390
00:21:01.570 --> 00:21:03.160
I think it's going to
matter less and less. It's

391
00:21:03.160 --> 00:21:04.480
going to be a question
of how good are our

392
00:21:04.480 --> 00:21:06.970
tools and what, what are
they out putting as a

393
00:21:06.970 --> 00:21:14.190
build target, Parse out this
idea of isomorphic JavaScript a

394
00:21:14.190 --> 00:21:15.900
little bit. That might be
a term that people who

395
00:21:15.900 --> 00:21:18.180
are listening are not a
hundred percent familiar with. Oh,

396
00:21:18.210 --> 00:21:19.980
sure. That's a good, that's
a good point. Yeah. So

397
00:21:19.980 --> 00:21:23.910
isomorphic JavaScript is this idea
that kind of, it kind

398
00:21:23.910 --> 00:21:25.890
of started to gain popularity,
I think a couple of

399
00:21:25.890 --> 00:21:28.770
years ago because of a
blog post from Airbnb, where

400
00:21:28.770 --> 00:21:31.800
the idea is essentially that
you write JavaScript such that

401
00:21:32.010 --> 00:21:34.170
you can easily run it
either on the server side

402
00:21:34.170 --> 00:21:36.450
or on the client side.
And when you wrote it

403
00:21:36.450 --> 00:21:38.130
on the service side, you
typically would run it in

404
00:21:38.130 --> 00:21:41.280
something like no JS. And
this doesn't necessarily mean that

405
00:21:41.280 --> 00:21:43.500
you have to rewrite your
entire server and node. You

406
00:21:43.500 --> 00:21:45.660
might just have a little
child process or something, or

407
00:21:45.660 --> 00:21:47.550
it might just be a
part of your build process

408
00:21:47.550 --> 00:21:51.960
for your JavaScript, but you
want to have this flexibility

409
00:21:52.200 --> 00:21:53.850
of, you know, say when
you want to do a

410
00:21:53.850 --> 00:21:55.890
form validation, you know, you
need to do that on

411
00:21:55.890 --> 00:21:57.900
both the service side and
the client side. And it's

412
00:21:57.900 --> 00:22:00.030
very efficient. If you can
just write that code once,

413
00:22:00.210 --> 00:22:02.160
run it on the client
and then also run it

414
00:22:02.160 --> 00:22:04.140
on the server and not
have to have two separate

415
00:22:04.140 --> 00:22:08.970
code bases that you keep
in sync. Interesting. Okay. And

416
00:22:09.840 --> 00:22:13.680
is it even now popular
to have people do service

417
00:22:13.680 --> 00:22:15.810
side initial, like initial what
they call it, initial load

418
00:22:15.810 --> 00:22:19.110
rendering, initial page rendering. Like
I see, I think that

419
00:22:19.110 --> 00:22:20.910
people talk about that, but
I don't necessarily see it

420
00:22:20.910 --> 00:22:24.570
in the wild. Yeah. It's
becoming easier and easier. I

421
00:22:24.570 --> 00:22:27.990
mean, like I said, I
think it's table stakes now

422
00:22:27.990 --> 00:22:30.720
for a modern JavaScript framework,
but it was definitely not

423
00:22:30.930 --> 00:22:32.850
the, it was not the
standard, you know, even just

424
00:22:32.850 --> 00:22:35.580
a few years ago, like
angular one didn't really have

425
00:22:35.580 --> 00:22:37.590
any way of doing this.
And so people writing angular

426
00:22:37.590 --> 00:22:40.950
applications who ran up against
these performance problems or these

427
00:22:40.950 --> 00:22:44.640
problems of SEO, and they
realized they needed some kind

428
00:22:44.640 --> 00:22:47.280
of static version of their
website, they were doing things

429
00:22:47.280 --> 00:22:49.500
like, you know, loading it
in a Phantom in Phantom

430
00:22:49.500 --> 00:22:52.740
JS, which is a headless
browser. So you actually load

431
00:22:52.740 --> 00:22:55.950
the site in Phantom, JS,
run all the JavaScript and

432
00:22:55.950 --> 00:22:58.830
then like spit that out
to a string essentially to

433
00:22:58.830 --> 00:23:01.530
an HTML file, all these
hoops to jump through, to,

434
00:23:01.530 --> 00:23:05.580
to get this isomorphic JavaScript
experience. And nowadays, like any

435
00:23:05.610 --> 00:23:09.060
framework worth its salt has
some kind of some kind

436
00:23:09.060 --> 00:23:12.510
of isomorphic offering. Yeah, I
though there was some cool

437
00:23:12.510 --> 00:23:16.890
work happening on, on asp.net,
the aspect, and a team,

438
00:23:16.890 --> 00:23:21.030
specifically guy named Steve Sanderson
who wrote knockout JS, you

439
00:23:21.030 --> 00:23:24.270
know, when asp.net people do
angular apps, they'll have like

440
00:23:24.270 --> 00:23:28.020
their backend, you know, producing
Jason or whatever, and then

441
00:23:28.020 --> 00:23:30.390
their front end might be,
might be angular or something

442
00:23:30.390 --> 00:23:35.250
else. We'll actually asp.net. We'll
use node to go and

443
00:23:35.250 --> 00:23:38.610
do that, that first page
render on the server side.

444
00:23:39.090 --> 00:23:41.220
So it's a kind of
a, it shells out to

445
00:23:41.220 --> 00:23:44.670
node and then does whatever
the templating engine needs to

446
00:23:44.670 --> 00:23:48.200
be to be rendered at
that time. So you're right.

447
00:23:48.200 --> 00:23:50.330
That needs to be effortless.
It needs to just know

448
00:23:50.330 --> 00:23:53.120
and be part of the
part of the system. It

449
00:23:53.120 --> 00:23:57.400
shouldn't, you shouldn't have to
write that code yourself. Right.

450
00:23:57.400 --> 00:23:59.320
And more and more, it's
becoming a kind of turnkey

451
00:23:59.320 --> 00:24:01.600
solution. I mean, if it,
if it's a lot of

452
00:24:01.600 --> 00:24:03.310
work, then people aren't going
to do it as we,

453
00:24:03.670 --> 00:24:05.920
as we learn over and
over again with everything related

454
00:24:05.920 --> 00:24:08.380
to performance, you know, which
is why, again, I think

455
00:24:08.500 --> 00:24:10.360
this is not so much
an issue of how you

456
00:24:10.360 --> 00:24:13.660
offer your websites, whether you
prefer to start with HTML

457
00:24:13.660 --> 00:24:16.030
or whether you are a
react developer who wants to

458
00:24:16.030 --> 00:24:18.390
do everything in JSX and
you want to have a

459
00:24:19.120 --> 00:24:21.460
CSS in JavaScript and you
just want to live in

460
00:24:21.460 --> 00:24:24.610
a JavaScript world. I think
that matters less nowadays. And

461
00:24:24.610 --> 00:24:27.970
it matters more how sophisticated
our tools and do they

462
00:24:28.360 --> 00:24:32.140
easily allow us to output
the most performance websites. Yeah.

463
00:24:32.740 --> 00:24:36.610
So there's there's websites that
are performance focused there's websites

464
00:24:36.610 --> 00:24:40.150
that can work on JavaScript
or not. But you also

465
00:24:41.290 --> 00:24:43.810
had this, this comment around
the idea of a robust

466
00:24:43.900 --> 00:24:45.970
web app, like what does
it mean for a, an

467
00:24:45.970 --> 00:24:49.210
app to be robust? It
has to handle a number

468
00:24:49.210 --> 00:24:53.860
of different suboptimal scenarios, right?
Yeah. And this is a

469
00:24:53.860 --> 00:24:57.280
point that's often argued in
favor of the classical progressive

470
00:24:57.280 --> 00:25:01.390
enhancement model. They'll say things
like, you know, what, if

471
00:25:01.840 --> 00:25:04.450
the user starts receiving the
HTML and the CSS and

472
00:25:04.450 --> 00:25:07.060
then the user goes into
a tunnel and the JavaScript

473
00:25:07.060 --> 00:25:09.670
doesn't load. And so it
sounds funny, but it does

474
00:25:09.670 --> 00:25:13.360
happen. It definitely does happen.
Yeah. But then I wouldn't

475
00:25:13.360 --> 00:25:17.050
necessarily extrapolate from there that
okay. That is a reason

476
00:25:17.050 --> 00:25:19.870
for me to make my
site work, like actually be

477
00:25:19.870 --> 00:25:23.260
functional without JavaScript like a
hundred feet, the tunnel scenario.

478
00:25:23.560 --> 00:25:25.960
Yes. The tunnel scenario. And
my argument against that, that

479
00:25:25.960 --> 00:25:28.480
I gave my talk was,
well, you know, I've seen

480
00:25:28.480 --> 00:25:30.340
that happen plenty of times.
I've also seen it happen

481
00:25:30.340 --> 00:25:33.250
on say GitHub where the
CSS didn't load. And if

482
00:25:33.250 --> 00:25:35.560
you see what it looks
like without the CSS, it's

483
00:25:35.560 --> 00:25:38.620
actually almost totally unusable like
it is. I got it.

484
00:25:38.680 --> 00:25:40.630
It doesn't look like anything
you see, you can barely

485
00:25:40.630 --> 00:25:42.850
interact with it. So at
which point, I wouldn't really

486
00:25:42.850 --> 00:25:46.690
attempt to interact with the
page at all to put

487
00:25:46.690 --> 00:25:49.630
it in another way. I
think Laurie Voss from NPM

488
00:25:49.630 --> 00:25:51.970
had a response to my
blog post, where he said

489
00:25:51.970 --> 00:25:54.490
that if you were building
a website, that is, it

490
00:25:54.490 --> 00:25:57.370
is primarily focused on interaction
and you need JavaScript for

491
00:25:57.370 --> 00:26:01.060
your interaction. Then if the
JavaScript doesn't load on the

492
00:26:01.060 --> 00:26:04.870
first load, then it's just
broken. Like there's no two

493
00:26:04.870 --> 00:26:09.370
ways around it. And so
my belief is that for

494
00:26:09.520 --> 00:26:14.650
rich immersive client side applications,
focusing less on that initial

495
00:26:14.650 --> 00:26:18.940
load and more and more
on the offline scenario, we'll

496
00:26:18.940 --> 00:26:20.590
get you a bigger wins.
Like what happens on the

497
00:26:20.590 --> 00:26:22.840
subsequent loads? How do you,
how do you deal with

498
00:26:22.870 --> 00:26:26.380
the case where the application
is loaded? JavaScript is activated,

499
00:26:26.770 --> 00:26:29.530
but the network goes in
and out, you know, or,

500
00:26:29.590 --> 00:26:31.150
or it doesn't just go
in and out. Maybe the

501
00:26:31.150 --> 00:26:32.860
network appears to be there,
but then when you make

502
00:26:32.860 --> 00:26:35.860
a request, you don't get
a response. Jake Archibald is

503
00:26:35.860 --> 00:26:38.530
called this life. I, and
I think we've all experienced

504
00:26:38.530 --> 00:26:42.040
it. And thinking about those
scenarios, I think leads to

505
00:26:42.040 --> 00:26:46.670
better, to better web applications.
Yeah. I'm getting to the

506
00:26:46.670 --> 00:26:50.670
point where they're you're right.
The LTE is slower. D

507
00:26:50.670 --> 00:26:53.150
you know, you have a
page with 15 different external

508
00:26:53.150 --> 00:26:55.790
dependencies. Maybe there are other
JavaScripts that are blocking the

509
00:26:55.790 --> 00:26:58.940
page. It could be DNS,
you know, every time you

510
00:26:58.940 --> 00:27:01.580
add a new thing to
your page, it potentially could

511
00:27:01.580 --> 00:27:03.860
go down and then potentially
cause your page to just

512
00:27:03.860 --> 00:27:07.610
hang in a strange state.
Yeah. At which point, I

513
00:27:07.610 --> 00:27:10.100
mean, I think most people
would just reasonably refresh or

514
00:27:10.110 --> 00:27:14.300
come back later. I mean,
and that's acceptable for some

515
00:27:14.300 --> 00:27:16.550
websites. It's not acceptable for
other ones. If you're making

516
00:27:16.550 --> 00:27:19.820
a content site like a
blog and your primary goal

517
00:27:19.820 --> 00:27:23.840
is to deliver words to
your user like that. I

518
00:27:23.840 --> 00:27:26.720
think that that should work
without JavaScript. That should maybe

519
00:27:26.720 --> 00:27:29.150
even work without CSS. Like
your primary goal is to

520
00:27:29.150 --> 00:27:33.200
deliver content from the server
to the client, but for

521
00:27:33.200 --> 00:27:36.110
what applications that are interactive
and that, you know, synchronized

522
00:27:36.110 --> 00:27:38.360
data, maybe you store data
locally. And then when the

523
00:27:38.360 --> 00:27:41.750
network goes offline, you continue
allowing the user to work

524
00:27:41.750 --> 00:27:43.550
with the data. And then
when they come back online,

525
00:27:43.910 --> 00:27:46.070
the, you know, you, you
sync that data back. I

526
00:27:46.070 --> 00:27:49.340
think the trying to make
that work without JavaScript is

527
00:27:49.340 --> 00:27:52.610
a fool's errand. That makes
total sense to me. Like

528
00:27:52.640 --> 00:27:56.510
if you want the customer
got on a plane, worked

529
00:27:56.510 --> 00:27:59.720
for three hours on your
website and then landed scenario,

530
00:28:00.020 --> 00:28:02.180
or they just went through
a tunnel scenario to work.

531
00:28:02.350 --> 00:28:05.480
Of course it's folly to
do that without JavaScript, but

532
00:28:05.660 --> 00:28:08.900
that gets to the progressive
part of enhancement. Right? If

533
00:28:08.900 --> 00:28:10.940
you have this, then good
things happen. If you have

534
00:28:10.940 --> 00:28:13.040
that, then even better things
happen and on and on.

535
00:28:13.460 --> 00:28:15.050
Yeah. Which, which is a
very good way to think

536
00:28:15.050 --> 00:28:17.870
about things. I am totally
pro progressive enhancement in the

537
00:28:17.870 --> 00:28:20.870
broad sense I'm using features
like, like for instance, service

538
00:28:20.870 --> 00:28:24.230
worker is a great example
of this. It's designed from

539
00:28:24.230 --> 00:28:27.350
the ground up to work
with progressive enhancement for browsers

540
00:28:27.350 --> 00:28:30.440
that don't support service worker,
you just get a normal

541
00:28:30.440 --> 00:28:33.110
webpage. And then for browsers
that do you get this

542
00:28:33.110 --> 00:28:36.920
really, really snappy, offline experience
where you can do lots

543
00:28:36.920 --> 00:28:40.040
of fancy stuff inside of
the service worker. And that's,

544
00:28:40.110 --> 00:28:43.400
that's totally a valid way
of building web applications. I

545
00:28:43.400 --> 00:28:46.160
think it's a very sensible
way to do it. Yeah.

546
00:28:46.970 --> 00:28:48.650
This might, this is a
little bit of a left

547
00:28:48.650 --> 00:28:51.140
turn, but I was thinking
about looking at your blog

548
00:28:51.170 --> 00:28:53.630
posts, you had a discussion
around module bloat and how

549
00:28:53.630 --> 00:28:56.900
many different JavaScript modules get
loaded. And, you know, some

550
00:28:56.900 --> 00:28:59.660
might be a hundred and
other websites like Apple might

551
00:28:59.660 --> 00:29:03.110
have a thousand modules. How
much of that JavaScript is

552
00:29:03.140 --> 00:29:05.240
actually being used versus how
much it was just being

553
00:29:05.240 --> 00:29:07.970
handed to me and then
never run. Like, shouldn't there

554
00:29:07.970 --> 00:29:10.310
be some kind of, you
know, they call it tree

555
00:29:10.310 --> 00:29:13.670
trimming or tree shaking where
only the JavaScript that's being

556
00:29:13.670 --> 00:29:16.820
run is shipped to me.
Yeah. That's, that's another blog

557
00:29:16.820 --> 00:29:19.310
post I wrote recently called
the cost of small modules

558
00:29:19.550 --> 00:29:22.550
where I kind of showed
that we're using these tools

559
00:29:22.550 --> 00:29:26.180
like BrowserFind and Webpack to
turn our JavaScript code base,

560
00:29:26.180 --> 00:29:29.150
which frequently has lots of
tiny little modules into one

561
00:29:29.150 --> 00:29:32.180
big bundle. And just the
cost of those modules themselves,

562
00:29:32.180 --> 00:29:35.000
just the overhead of the
sheer number of modules really

563
00:29:35.000 --> 00:29:38.270
slows down the performance of
a page. And actually, I

564
00:29:38.270 --> 00:29:42.430
mean, to my previous point,
if those modules are unused,

565
00:29:42.460 --> 00:29:44.230
then code splitting will help
you out quite a bit

566
00:29:44.230 --> 00:29:46.660
there. And most of the
bundlers support some kind of

567
00:29:46.660 --> 00:29:49.510
code splitting. But what I
was trying to raise the

568
00:29:49.510 --> 00:29:52.420
alarm about in that blog
post was, Hey, you know,

569
00:29:52.990 --> 00:29:56.230
the JavaScript ecosystem because of
the way that node and

570
00:29:56.230 --> 00:29:59.440
NPM work has gotten very
fond of kind of hyper

571
00:29:59.440 --> 00:30:02.650
modularity. Like everyone loves these
like one, three line modules,

572
00:30:03.250 --> 00:30:04.930
or even if you don't,
even, if you think you're

573
00:30:04.930 --> 00:30:07.270
using one quote unquote module,
you know, under the hood,

574
00:30:07.270 --> 00:30:10.000
you could have many, many
small files. And those actually

575
00:30:10.000 --> 00:30:12.610
add up because of the
way that our tools work

576
00:30:12.610 --> 00:30:14.890
because of the way our
bundlers work and to their

577
00:30:14.890 --> 00:30:17.560
credit, the bundler authors that
I've spoken with have said,

578
00:30:17.560 --> 00:30:19.300
yes, this is a real
problem. And yes, they're working

579
00:30:19.300 --> 00:30:21.760
on fixing it. So what
pack two is actually in

580
00:30:21.760 --> 00:30:24.790
the process of fixing this
and to your point about

581
00:30:24.820 --> 00:30:27.130
tree shaking, that that is
something they've already implemented in

582
00:30:27.130 --> 00:30:31.480
Webpack to beta now, where
the idea is that if

583
00:30:31.480 --> 00:30:34.240
something is unused in your
JavaScript code base, it should

584
00:30:34.240 --> 00:30:36.880
just be shaken out. It
should just be removed. Right?

585
00:30:37.190 --> 00:30:40.150
Right. We should not be
zipping up the complete tree

586
00:30:40.150 --> 00:30:42.820
of all dependencies of everything
that I could ever potentially

587
00:30:42.820 --> 00:30:45.400
use and then shipping it
over. And then 10% of

588
00:30:45.400 --> 00:30:48.940
it gets run. Yeah. And
this is the kind of

589
00:30:48.940 --> 00:30:51.310
thing that would be solved
by tree shaking and coats

590
00:30:51.310 --> 00:30:54.220
flooding. But again, this kinda
goes back to what I

591
00:30:54.220 --> 00:30:58.210
was saying earlier about how
I think the primary thing

592
00:30:58.210 --> 00:30:59.920
we should target and try
to fix these sorts of

593
00:30:59.920 --> 00:31:03.610
issues is with tooling. We
shouldn't admonish web developers for

594
00:31:03.610 --> 00:31:06.400
building in a particular way.
The reason that people build

595
00:31:06.430 --> 00:31:08.830
JavaScript first is because it's
so easy. It's so fast.

596
00:31:08.830 --> 00:31:11.590
They can get started in
five minutes, building a really

597
00:31:11.590 --> 00:31:14.080
rich client side web application.
And that's great. And we

598
00:31:14.080 --> 00:31:17.320
should enable that, that developer
productivity, but our tools should

599
00:31:17.320 --> 00:31:19.960
be smart enough to do
these kinds of things by

600
00:31:19.960 --> 00:31:23.890
default, do things like tree
shaking and module inlining, which

601
00:31:23.890 --> 00:31:26.740
I talk about in this
post to deliver the most

602
00:31:26.740 --> 00:31:32.020
compact, smallest bundle of JavaScript
possible, and also HTML and

603
00:31:32.020 --> 00:31:35.950
CSS when appropriate. Okay. So
as we, as we close

604
00:31:35.950 --> 00:31:39.430
out, where can people go
and learn about this? Like

605
00:31:39.430 --> 00:31:42.580
you are, you know, these
cause you're in the community,

606
00:31:42.580 --> 00:31:45.400
people who are listening might
find this to be all

607
00:31:45.400 --> 00:31:48.160
very overwhelming. And now they're
realizing they have to read

608
00:31:48.400 --> 00:31:51.790
16 different blog posts in
order to figure this stuff

609
00:31:51.790 --> 00:31:55.780
out. I've probably dropped a
lot of buzzwords. I don't

610
00:31:55.780 --> 00:31:57.130
know. I'm not sure what
my buzz words per minute

611
00:31:57.130 --> 00:31:59.380
was. And then I try
to, I try to stop

612
00:31:59.380 --> 00:32:02.380
people when the buzzword comes
up. That's fair. Well, you

613
00:32:02.380 --> 00:32:05.770
can go to my blog@nolanlawson.com.
These are the two most

614
00:32:05.770 --> 00:32:08.770
recent blog posts that I
wrote, the progressive enhancement one

615
00:32:08.770 --> 00:32:12.040
and the small modules. One,
I also have my talks

616
00:32:12.040 --> 00:32:14.440
listed. So you can go
and watch me rant about

617
00:32:14.440 --> 00:32:17.290
this stuff in video format.
If that's what you prefer.

618
00:32:17.710 --> 00:32:20.530
I also have links in
those posts to follow up

619
00:32:20.530 --> 00:32:23.950
posts, where you can follow
the discussion and see how

620
00:32:23.950 --> 00:32:29.230
the, how the debate progressed
back and forth. Very cool.

621
00:32:29.230 --> 00:32:31.270
Well, thanks so much for
spending time with us today.

622
00:32:31.660 --> 00:32:34.090
Yeah, it was a lot
of fun. Thanks, Scott. This

623
00:32:34.090 --> 00:32:36.850
has been another episode of
Hansel minutes. We'll see you

624
00:32:36.850 --> 00:32:37.780
again next week.

