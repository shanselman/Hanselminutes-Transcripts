WEBVTT FILE

1
00:00:13.020 --> 00:00:18.540
Hansel minutes.com Hansel minutes, a
weekly discussion with web developer

2
00:00:18.540 --> 00:00:24.060
and technologists. Scott Hanselman hosted
by Carl Franklin. This is Lawrence Ryan

3
00:00:24.060 --> 00:00:30.510
announcing show number one 67.
Recorded live Friday, June 19th, 2009. Support

4
00:00:30.510 --> 00:00:34.200
for Hansel minutes is provided
by teller rad controls, the

5
00:00:34.200 --> 00:00:37.980
most comprehensive suite of components
for windows forms and asp.net

6
00:00:37.980 --> 00:00:45.000
web applications online at www
dot <inaudible> dot com and

7
00:00:45.000 --> 00:00:50.010
by.net developers journal, the world's
leading that developer magazine online

8
00:00:50.010 --> 00:00:55.740
at www dot <inaudible> dot
com. You miss episode, Scott

9
00:00:55.740 --> 00:01:01.680
talks convention over configuration with
Jeremy Miller. Hi, this is Scott

10
00:01:01.680 --> 00:01:03.630
Hanselman and this is another
episode of Hansel minutes and

11
00:01:03.630 --> 00:01:05.670
I'm here in Norway still.
And I'm hanging out with

12
00:01:05.670 --> 00:01:08.310
Jeremy Miller, the shade tree developer,
and also the author of

13
00:01:08.310 --> 00:01:11.100
structure map. Thanks for coming
up here and talking to

14
00:01:11.100 --> 00:01:13.890
me today. Thanks for having
me. So we've got a

15
00:01:13.890 --> 00:01:16.320
lot of really cool talks
here in Norway, and you

16
00:01:16.320 --> 00:01:19.290
had a talk on convention
over configuration, and I knew

17
00:01:19.290 --> 00:01:21.930
we needed to talk about
that. So we hear convention

18
00:01:21.930 --> 00:01:26.400
over configuration basically everywhere. That's
not in the.net space. And

19
00:01:26.400 --> 00:01:28.650
we've only recently started hearing
about it within the context

20
00:01:28.650 --> 00:01:31.800
of asp.net MVC, which in
fact borrows from a lot

21
00:01:31.800 --> 00:01:35.250
of places that aren't in
the typical.net space.net developers are

22
00:01:35.250 --> 00:01:37.860
used to a lot of
angle brackets and config files

23
00:01:37.860 --> 00:01:39.870
that go on for days.
I know that for a

24
00:01:39.870 --> 00:01:42.250
while, structure map had a
lot of configuration involved in

25
00:01:42.250 --> 00:01:45.570
it recently that's changed. So
you're getting into this convention

26
00:01:45.570 --> 00:01:48.750
thing as well. Oh, absolutely.
And it's definitely, it is

27
00:01:48.750 --> 00:01:51.780
definitely a case of Ruby
on rails MV, really. I

28
00:01:51.780 --> 00:01:54.240
think it just took us
a couple years to realize

29
00:01:54.270 --> 00:01:57.240
that we could do it
ourselves. It's just that it

30
00:01:57.240 --> 00:02:01.980
manifests itself very differently when
we do it in.net development.

31
00:02:02.220 --> 00:02:05.730
Okay. And why is that?
Well, we're statically typed. We

32
00:02:05.730 --> 00:02:09.540
can't do a lot of
this dynamic property generation with

33
00:02:09.540 --> 00:02:12.360
meta programming. They can in
Ruby, but we have all

34
00:02:12.360 --> 00:02:14.730
these other tools. We have
the typing system we can

35
00:02:14.730 --> 00:02:19.860
take advantage of, of open
generic, generic declarations. There's there's

36
00:02:19.860 --> 00:02:22.260
a lot of rich type
metadata we can get at

37
00:02:22.290 --> 00:02:26.520
that we're already doing. That's
creating information about our system,

38
00:02:26.820 --> 00:02:31.620
that we were then recreating
inside of explicit configuration, whether

39
00:02:31.620 --> 00:02:35.010
it be an angle bracket
hell or just through programmatic

40
00:02:35.010 --> 00:02:39.450
configuration instead, why not just
scan the information that's already

41
00:02:39.450 --> 00:02:42.060
in the type system and
use that to wire things

42
00:02:42.060 --> 00:02:44.550
up. Okay. Now, is this
just a, when I think

43
00:02:44.550 --> 00:02:48.000
of configuration, I think of
what assembly type I should

44
00:02:48.000 --> 00:02:52.910
load my connection strings, maybe
a directory location for something.

45
00:02:52.980 --> 00:02:56.160
Know what kinds of things
that were typically configuration can

46
00:02:56.160 --> 00:03:00.130
be replaced with convention? How,
how pieces wire up, I

47
00:03:00.130 --> 00:03:04.330
think the best, the easiest
example to go at is

48
00:03:04.330 --> 00:03:08.860
thinking about configuring object, relational
mapping. Okay. In version of

49
00:03:08.860 --> 00:03:11.740
controls. Good to, well, let's
talk, talk about ORM mapping.

50
00:03:11.860 --> 00:03:15.220
Alright. Three years ago, when
we were using in hibernate,

51
00:03:15.280 --> 00:03:18.340
you might've been using the
active record attributes for us.

52
00:03:18.340 --> 00:03:21.250
We were using an XML
file. We were specifying a

53
00:03:21.250 --> 00:03:25.300
lot of facts, a class
maps to a table that

54
00:03:25.300 --> 00:03:27.940
probably has the same name,
but I still have to

55
00:03:27.940 --> 00:03:33.610
say class name and table
name I'm mapping columns. I'm

56
00:03:33.610 --> 00:03:37.720
specifying what the primary key
of the object is. Even

57
00:03:37.720 --> 00:03:40.360
though it's, you can find
this information in the database,

58
00:03:40.360 --> 00:03:43.090
but I still had to
specify it in, in hibernate

59
00:03:43.090 --> 00:03:47.680
mappings, how the identifier was
created. Is it controlled by

60
00:03:47.680 --> 00:03:50.380
the database? Is it controlled
by classes? That's a lot

61
00:03:50.380 --> 00:03:52.830
of explicit stuff that I
have to do. So you're

62
00:03:52.840 --> 00:03:56.220
saying something simple, like, you
know, public class customer is

63
00:03:56.220 --> 00:03:58.830
from the customer's table. That
was still being, that was

64
00:03:58.830 --> 00:04:02.250
being repeated in some configuration.
And there's also the pluralization

65
00:04:02.250 --> 00:04:05.220
of that. Yes. If you
want to do the pluralization,

66
00:04:05.440 --> 00:04:06.810
I don't know if you
do that. Is that a

67
00:04:06.810 --> 00:04:10.500
religious argument? I don't know.
I don't bother with, I

68
00:04:10.500 --> 00:04:14.580
remember seeing a David Heinemeier,
Hansson give a talk about

69
00:04:14.670 --> 00:04:17.040
how awesome, you know, Ruby
and rails was and how

70
00:04:17.040 --> 00:04:20.370
the pluralization actually had a
specific thing in case you

71
00:04:20.370 --> 00:04:24.210
had a table called octopus
and a collection that would

72
00:04:24.210 --> 00:04:27.270
be octopi. And he was
really proud of that. I

73
00:04:27.270 --> 00:04:28.980
think because you never know
when you might have a

74
00:04:28.980 --> 00:04:31.530
table called octopus. I think
that's really cool, But I

75
00:04:31.530 --> 00:04:33.300
think that's a lot like
going back to the VB

76
00:04:33.300 --> 00:04:36.030
days when we argued about
two spaces or four spaces

77
00:04:36.030 --> 00:04:40.230
for invention, but, but a
consistent convention and we have

78
00:04:40.230 --> 00:04:43.080
these conventions in our code
all the time, or we

79
00:04:43.080 --> 00:04:46.980
just do things the default
way. So why not instead

80
00:04:47.400 --> 00:04:52.410
let the, let the, or
Mim mapper infer from the

81
00:04:52.410 --> 00:04:55.110
shape of the object, the
way the mappings work by

82
00:04:55.110 --> 00:04:57.960
default. And I should, at
this point, I should only

83
00:04:57.960 --> 00:05:01.980
have to override the things
that deviate from this, this

84
00:05:01.980 --> 00:05:05.160
convention. Okay. Okay. So only
exceptional cases would get any

85
00:05:05.160 --> 00:05:07.620
configuration information at all. Does
that mean that in the,

86
00:05:07.800 --> 00:05:10.140
in a typical case and
the 80% case you wouldn't

87
00:05:10.140 --> 00:05:13.580
require any configuration at all,
If you're following your, your

88
00:05:13.590 --> 00:05:17.910
standards and your conventions? Yes.
Okay. So is this something

89
00:05:17.910 --> 00:05:20.130
that is only in an
hibernate in ORMs or is

90
00:05:20.130 --> 00:05:21.990
this something that, how would
I start applying these to

91
00:05:21.990 --> 00:05:25.050
my applications? Well, so the
RM is a big deal,

92
00:05:25.920 --> 00:05:29.580
even in that's a big
deal by itself in version

93
00:05:29.580 --> 00:05:32.310
of control containers, we do
the same thing. You mentioned

94
00:05:32.310 --> 00:05:38.220
MVC development, right? MVC out
of the box, your URLs

95
00:05:38.370 --> 00:05:40.710
that you have the application
route. And then the next

96
00:05:40.710 --> 00:05:45.540
argument is a controller name.
That's fine. The controllers by

97
00:05:45.600 --> 00:05:48.000
just a convention or an
idiom, we would name them

98
00:05:48.000 --> 00:05:53.010
home controller, report controllers, something
controller the URL would be

99
00:05:53.040 --> 00:05:57.770
report home slash something to
the action, right? So a

100
00:05:57.770 --> 00:05:59.900
lot of us are using
inversion of control tools to

101
00:05:59.900 --> 00:06:02.720
host the controllers. And you
just go to the IOC

102
00:06:02.720 --> 00:06:04.820
tool and say, give me
the controller for this name.

103
00:06:06.500 --> 00:06:08.900
We have that naming convention.
Let's just let the controller

104
00:06:08.900 --> 00:06:11.840
scan over the type center
assembly and know that home

105
00:06:11.840 --> 00:06:15.680
controller is registered as lowercase
home. That's a convention, it's

106
00:06:15.680 --> 00:06:18.950
a naming convention we can
take advantage of. So as

107
00:06:18.950 --> 00:06:21.860
I start to add new
things to the system, I

108
00:06:21.860 --> 00:06:24.500
can add a new controller,
code it up, unit, test

109
00:06:24.500 --> 00:06:27.590
it, but I don't have
to worry about telling the

110
00:06:27.590 --> 00:06:30.890
container or, or the MVC
that, Hey, this new thing

111
00:06:30.890 --> 00:06:35.060
exists. It's already there and
available and accessible through a

112
00:06:35.060 --> 00:06:38.110
URL. Okay. I'm trying to
think of what else we

113
00:06:38.110 --> 00:06:39.910
could expand this to. I
mean, I've got, trying to

114
00:06:39.910 --> 00:06:42.610
think of other kinds of
configuration information that I've got.

115
00:06:43.030 --> 00:06:45.340
I know that you could
probably take it to a

116
00:06:45.340 --> 00:06:48.940
really dramatic lengths. Like I
know that I've had configuration

117
00:06:48.940 --> 00:06:52.360
for development for staging and
production. I suppose if I

118
00:06:52.360 --> 00:06:55.450
wanted to take convention over
configuration to do, as far

119
00:06:55.450 --> 00:06:58.000
as I could, I could
even name my systems, my

120
00:06:58.000 --> 00:07:01.450
computer names a certain way.
Well, I mean, that's supposed

121
00:07:01.450 --> 00:07:03.580
to be a bad, bad
practice, right? Isn't that supposed

122
00:07:03.580 --> 00:07:05.680
to make it your system
easy to hack? I don't

123
00:07:05.680 --> 00:07:11.830
know. Well, so maybe, maybe
some of the other things

124
00:07:11.830 --> 00:07:13.510
I can think of. I
know there are people that

125
00:07:13.510 --> 00:07:18.340
are experimenting with the creation
of UIs. I think one

126
00:07:18.340 --> 00:07:20.260
of the, as we build
a lot of these credit

127
00:07:20.260 --> 00:07:24.700
screens, we're using text boxes.
We're using drop-downs the drop

128
00:07:24.700 --> 00:07:27.730
downs have to be filled
from somehow, but probably doing

129
00:07:27.730 --> 00:07:30.580
these things very consistently. For
sure. Anytime I have a

130
00:07:30.580 --> 00:07:33.010
date field that's editable on
the screen, I want it

131
00:07:33.010 --> 00:07:37.480
to show up with this
particular day control. So something

132
00:07:37.480 --> 00:07:39.490
I'm seeing, a lot of
people experiment with is just

133
00:07:39.490 --> 00:07:43.060
simply expressing. I want the
input element for this object

134
00:07:43.840 --> 00:07:47.680
or this property, right? And
the conventions will take over

135
00:07:47.680 --> 00:07:50.860
and say, well, look, it's
a string field. I'm going

136
00:07:50.860 --> 00:07:53.200
to use the text box,
but it's also decorated with

137
00:07:53.200 --> 00:07:55.960
some kind of validation attribute
that says it can only

138
00:07:55.960 --> 00:07:58.090
be a hundred long. So
I'm going to set, I'm

139
00:07:58.090 --> 00:07:59.830
also going to come back
and set the maximum length

140
00:07:59.830 --> 00:08:02.860
of the text box. And
look, it says that it's

141
00:08:02.860 --> 00:08:05.710
a required field. Somehow I
can tie into validation and

142
00:08:05.710 --> 00:08:08.740
I know it's a required
field. So maybe my designers

143
00:08:08.740 --> 00:08:12.460
want all required input elements
to be colored pale blue

144
00:08:12.940 --> 00:08:16.780
or no, what if they
want a red asterisk? That's

145
00:08:16.780 --> 00:08:19.000
the kind of coding that
I don't really want to

146
00:08:19.000 --> 00:08:20.500
have to spend a lot
of time on. I just

147
00:08:20.500 --> 00:08:23.470
want it to happen. Right?
We can set up convention

148
00:08:23.470 --> 00:08:25.600
or really just setting up,
not necessarily a convention, but

149
00:08:25.600 --> 00:08:28.300
a policy that this is
the way it always is.

150
00:08:28.780 --> 00:08:31.840
I like that the convention
is one as is, is

151
00:08:31.840 --> 00:08:34.180
a good word. But policy,
I think is a really,

152
00:08:34.510 --> 00:08:35.650
you know, all we need
to do is get the

153
00:08:35.650 --> 00:08:37.330
team of us, whether it
be five of us or

154
00:08:37.330 --> 00:08:39.760
a hundred of us to
just agree. And I think

155
00:08:39.760 --> 00:08:43.570
that in my experience on
developing for the web CSS,

156
00:08:43.690 --> 00:08:46.090
people and designers are like
the first people to get

157
00:08:46.090 --> 00:08:49.540
this convention over configuration, right?
To just say, you know,

158
00:08:49.610 --> 00:08:52.170
this text box has a
class of date. Then all

159
00:08:52.190 --> 00:08:54.040
these validators happen for free.
And all of this look

160
00:08:54.040 --> 00:08:57.390
and feel happens for free.
It just, just works. That

161
00:08:57.390 --> 00:09:00.060
can be pushed down farther
and farther and farther. Actually

162
00:09:00.060 --> 00:09:02.910
one of the other applications,
not just asp.net MVC, but

163
00:09:02.910 --> 00:09:07.200
asp.net dynamic data was another
app that no configuration at

164
00:09:07.200 --> 00:09:09.540
all. You know, one line
to say the database is

165
00:09:09.540 --> 00:09:13.230
over there and everything else
was completely conventional. If there

166
00:09:13.230 --> 00:09:16.350
was a Boolean type and
you use Boolean dot ASC

167
00:09:16.350 --> 00:09:20.730
X, and it's interesting, cause
it freaks it freaks.net developers

168
00:09:20.730 --> 00:09:27.390
out because since 2002, everything
has been configurable. The location

169
00:09:27.390 --> 00:09:29.520
of a file, the name
of a file, the extension,

170
00:09:29.550 --> 00:09:32.610
all of it has had
some angle brackets, somewhere buried

171
00:09:32.610 --> 00:09:35.250
that could be overridden and
how to tell them that

172
00:09:35.850 --> 00:09:38.370
we'll know just by the
virtue that this thing was

173
00:09:38.370 --> 00:09:42.150
named this way, it's just
going to work there. Well,

174
00:09:42.380 --> 00:09:44.270
You bring up a really
good point. It is the

175
00:09:44.270 --> 00:09:47.510
potential problem with it is,
is it's black magic. There's

176
00:09:47.510 --> 00:09:49.550
no explicit code that you
can look at. That's going

177
00:09:49.550 --> 00:09:52.790
to tell you exactly what's
going to happen. So there's

178
00:09:52.790 --> 00:09:54.860
a couple ways you can
beat the problem. And the

179
00:09:54.860 --> 00:09:58.760
first is kind of a
team-wide social contract. These are

180
00:09:58.760 --> 00:10:03.650
our conventions. You have to
have the entire team understanding

181
00:10:03.860 --> 00:10:07.070
and agreeing to follow these
conventions. That's step number one,

182
00:10:07.400 --> 00:10:10.640
step. Number two is you
probably need to think about

183
00:10:10.640 --> 00:10:15.920
some, some diagnostics take the,
take the IOC example. What's

184
00:10:15.920 --> 00:10:20.180
in my container. I make
up these conventions, the controller

185
00:10:20.180 --> 00:10:24.350
configuration. I use the, I,
I, something I, something is

186
00:10:24.350 --> 00:10:27.920
implemented by something to automatically
wire something to ice, something

187
00:10:28.250 --> 00:10:30.470
For those listeners that don't
speak English. That, that whole

188
00:10:30.470 --> 00:10:32.240
sentence may have been a
little bit confusing, but you're

189
00:10:32.240 --> 00:10:34.430
saying that by virtue of
the fact that I have

190
00:10:34.430 --> 00:10:37.760
an I person interface and
I, I might have a

191
00:10:37.760 --> 00:10:40.430
person class, I can glean
that just because I'm putting

192
00:10:40.430 --> 00:10:43.270
I in front of my
interface. Yeah. So that's Be

193
00:10:43.270 --> 00:10:45.830
a little bit scary. Now
you're in, you're letting the

194
00:10:45.830 --> 00:10:48.710
program itself in for what
it's supposed to do, right.

195
00:10:48.740 --> 00:10:51.620
You're going to need to
troubleshoot and understand what what's

196
00:10:51.620 --> 00:10:54.110
my convention coming up with.
You can beat that by

197
00:10:54.110 --> 00:10:59.120
creating some diagnostics in our
case, like the controller example,

198
00:10:59.360 --> 00:11:02.090
let's make sure we have
an easy report that can

199
00:11:02.090 --> 00:11:06.080
tell us what controllers does
the IOC container think it

200
00:11:06.080 --> 00:11:10.490
has and under what name
as a beginning to, Okay.

201
00:11:10.490 --> 00:11:12.170
So I could check disk
for your app to just

202
00:11:12.170 --> 00:11:13.400
go and say, all right,
well just let me know

203
00:11:13.400 --> 00:11:16.340
all the different possibilities and
dump it out and look

204
00:11:16.340 --> 00:11:19.190
at it and say, does
this look correct? Exactly. Okay.

205
00:11:19.730 --> 00:11:21.500
You know, there's other things
I've seen that this may

206
00:11:21.500 --> 00:11:23.420
be a silly example, but
it actually was useful to

207
00:11:23.420 --> 00:11:26.180
me. I was working at
a large company recently as

208
00:11:26.180 --> 00:11:28.850
a, kind of, as a
consultant. I can't say what

209
00:11:28.850 --> 00:11:30.260
it is, but let's just
say that they were doing

210
00:11:31.010 --> 00:11:33.950
cars and we needed some
graphics and there's all these

211
00:11:33.950 --> 00:11:37.040
different car manufacturers out there.
And we, we figured out

212
00:11:37.040 --> 00:11:38.870
just by poking around on
their website, that they had

213
00:11:38.870 --> 00:11:44.090
like images.fool.com/, and I could
say Ford dot PNG, and

214
00:11:44.090 --> 00:11:46.160
I get the Ford logo.
And we were doing this

215
00:11:46.160 --> 00:11:47.900
demo for the vice president.
So it was really just

216
00:11:47.900 --> 00:11:49.880
proof of concept code, but
we knew that putting some

217
00:11:49.880 --> 00:11:52.190
graphics in would kind of,
you know, sex it up

218
00:11:52.190 --> 00:11:54.250
a little bit. And they
said, Oh, put the logo

219
00:11:54.250 --> 00:11:56.080
for the car company here.
And we said, Oh, wait

220
00:11:56.080 --> 00:11:58.390
a second. They have an
image server. Right. Let's see

221
00:11:58.390 --> 00:12:01.510
what happens to be put
in forward Chevy, Audi, Fiat.

222
00:12:02.110 --> 00:12:04.270
And, Oh look, they do
have they've come up with

223
00:12:04.270 --> 00:12:07.660
a very basic invention. It
was simple, but I was

224
00:12:07.660 --> 00:12:10.690
worried legitimately worried because I've
had this happen before that

225
00:12:10.690 --> 00:12:12.070
I was going to have
to go to a database

226
00:12:12.070 --> 00:12:16.120
somewhere and get the actual
URL for this image. And

227
00:12:16.120 --> 00:12:17.830
by virtue of the fact
that this company had done

228
00:12:17.830 --> 00:12:21.760
this very simple and common
sense, although that's the thing

229
00:12:21.760 --> 00:12:25.540
about common sense. It's not
that common a thing we

230
00:12:25.540 --> 00:12:28.000
were able to just in
a, in a 30 seconds

231
00:12:28.150 --> 00:12:30.400
of a little bit of
extra coding put in some

232
00:12:30.400 --> 00:12:32.890
graphics that made the demo
just a little fraction of

233
00:12:32.890 --> 00:12:37.780
a percent easier. So image
past CSS, naming scripts, all

234
00:12:37.780 --> 00:12:41.460
these things can make life
a lot easier. Definitely. And

235
00:12:41.520 --> 00:12:43.530
that's, that's a great example
of the value of this

236
00:12:43.530 --> 00:12:46.500
kind of thing. A lot
of these things we're talking

237
00:12:46.500 --> 00:12:48.810
about, they're small things, but
they're the small things that

238
00:12:48.810 --> 00:12:52.440
we do over and over
and over again, by making

239
00:12:52.440 --> 00:12:55.950
it the less friction to
make a change or an

240
00:12:55.950 --> 00:12:58.860
addition to the system, it
makes us easier of course,

241
00:12:58.860 --> 00:13:00.960
to extend the system. But
it also makes it easier

242
00:13:00.960 --> 00:13:03.660
for us to iterate to
the system and take the

243
00:13:03.660 --> 00:13:07.140
example of a user interface.
You come up with an

244
00:13:07.140 --> 00:13:08.940
idea of how you think
it should work. You show

245
00:13:08.940 --> 00:13:11.070
it to the user and
you find out that you

246
00:13:11.070 --> 00:13:14.280
were completely wrong, right? You
need to change it by

247
00:13:14.370 --> 00:13:17.700
having less machinery to change
those images on those page

248
00:13:17.730 --> 00:13:21.480
pages. Maybe you could iterate
faster and take advantage of

249
00:13:21.480 --> 00:13:23.280
the feedback that you got
and come out with a

250
00:13:23.280 --> 00:13:28.230
better product. Yeah, absolutely. Hi,
this is Scott Hanselman with

251
00:13:28.230 --> 00:13:30.210
a word from our sponsor.
Do you know how to

252
00:13:30.210 --> 00:13:34.380
build web 2.0 Ajax applications
with web 1.0 components? You

253
00:13:34.380 --> 00:13:36.120
really can't. If you want
to do the next generation

254
00:13:36.120 --> 00:13:39.630
web applications you'll need next
generation components. Just like the

255
00:13:39.630 --> 00:13:41.820
ones that our friends at
Telerik have got their rad

256
00:13:41.820 --> 00:13:44.820
controls for ESPN at Ajax.
It's a huge pack of

257
00:13:44.820 --> 00:13:48.720
web controls built on top
of asp.net, Ajax, that lab

258
00:13:48.750 --> 00:13:52.770
previously impossible performance interactivity to
your next project. The new

259
00:13:52.770 --> 00:13:56.970
controls mirror, the Ajax API
from asp.net. So development is

260
00:13:56.970 --> 00:14:00.390
really straightforward. The client scripts
are shared. So loading time

261
00:14:00.390 --> 00:14:02.550
is not a problem. If
you just set a couple

262
00:14:02.550 --> 00:14:04.590
of properties and you'll be
able to automatically bind a

263
00:14:04.590 --> 00:14:08.340
web services for a really
efficient operation, the new rad

264
00:14:08.340 --> 00:14:12.000
editor from ESPN Ajax, Telerik
loads up to four times

265
00:14:12.000 --> 00:14:15.090
faster than before. And the
new rad grid handles thousands

266
00:14:15.090 --> 00:14:18.030
of records and just milliseconds,
but as always, it's best

267
00:14:18.030 --> 00:14:21.000
to try for yourself. So
you can visit <inaudible> dot

268
00:14:21.000 --> 00:14:24.480
com slash ASP, net Ajax,
and download a trial. Thanks

269
00:14:24.480 --> 00:14:28.410
a lot. What are some
other examples that you gave

270
00:14:28.410 --> 00:14:31.170
in your talk about convention
over configuration and what was

271
00:14:31.170 --> 00:14:32.730
the general gist of what
you're trying to get across

272
00:14:32.730 --> 00:14:36.180
to the attendees? The general
just it's it's a meme.

273
00:14:36.180 --> 00:14:38.940
I see a lot more
often. Now, the idea of

274
00:14:38.940 --> 00:14:44.310
essence versus ceremony, essence being
what your business partners want

275
00:14:44.310 --> 00:14:47.400
you to deliver and ceremony
being all the hoops, the

276
00:14:47.400 --> 00:14:50.760
developer type hoops. We have
to jump through type declarations,

277
00:14:51.260 --> 00:14:56.510
XML files, configuration registry, settings,
stuff. That's pure overhead. All

278
00:14:56.510 --> 00:15:00.980
we're trying to do is
to create more essence with

279
00:15:00.980 --> 00:15:05.540
less ceremony in the talk.
I talked about inversion of

280
00:15:05.540 --> 00:15:10.130
control container configuration. We talked
a lot about sensible defaults,

281
00:15:11.120 --> 00:15:16.820
sensible defaults. Sure. So when
I'm building a database and

282
00:15:16.820 --> 00:15:19.850
the object model that is
persistent, this database, I can

283
00:15:19.850 --> 00:15:23.660
identify things in several different
ways. I can create ID

284
00:15:23.660 --> 00:15:26.630
so I can use quids.
I could use composite keys.

285
00:15:26.630 --> 00:15:30.650
I could use natural keys,
but instead let's say that

286
00:15:30.650 --> 00:15:33.440
we start a sensible default
that every single entity is

287
00:15:33.440 --> 00:15:38.560
simply identified by a numeric
ID field. Okay? Sure. Now

288
00:15:38.560 --> 00:15:42.250
that I say that every
single object, every domain entity

289
00:15:42.250 --> 00:15:46.120
is created this way, I
can start to share policies

290
00:15:46.150 --> 00:15:50.380
about the way that it's
persisted, which also allows me

291
00:15:50.380 --> 00:15:53.950
to make some assumptions in
the, my infrastructure. The assuming

292
00:15:53.950 --> 00:15:56.440
that every entity can be
treated the same way as

293
00:15:56.440 --> 00:16:01.540
far as locating it, saving
it, validating it, that enables

294
00:16:01.540 --> 00:16:04.450
to us to share and
reuse a lot of infrastructure

295
00:16:04.450 --> 00:16:10.180
between things like crud screens
and reporting screens. And it's

296
00:16:10.180 --> 00:16:13.180
a great kind of opportunity
to shrink down the size

297
00:16:13.180 --> 00:16:15.910
of your code base, looking
at it from another way,

298
00:16:15.910 --> 00:16:17.950
something you'll hear a lot
from the Ruby guys. They

299
00:16:17.950 --> 00:16:21.670
talk about the idea of
opinionated software and this, this

300
00:16:21.670 --> 00:16:24.340
kind of frustrates some people,
but it's the idea that

301
00:16:24.340 --> 00:16:27.010
we can make things easier
by taking away choice from

302
00:16:27.010 --> 00:16:30.940
the developers, that the system
really expects things to be

303
00:16:30.940 --> 00:16:33.430
in a certain way. And
if you'll just do them

304
00:16:33.430 --> 00:16:38.110
this way, the infrastructure will
let it flow easier. So

305
00:16:38.110 --> 00:16:40.900
you're going to increase productivity
if you can release a

306
00:16:40.900 --> 00:16:45.310
little bit of control. Exactly.
Okay. No, the problem and

307
00:16:45.310 --> 00:16:48.010
the downside, I know I've
heard from heard from the

308
00:16:48.010 --> 00:16:52.540
NVC team. The feedback on
rails is that the, the

309
00:16:52.540 --> 00:16:57.010
conventions are baked in and
heal and unflexible. I think

310
00:16:57.070 --> 00:16:59.350
the lesson that we've, we've
learned from it, and I've

311
00:16:59.350 --> 00:17:02.500
seen it in projects like
fluid and hibernate and FUBU,

312
00:17:02.500 --> 00:17:06.580
NBC is actually giving you
the ability to create your

313
00:17:06.580 --> 00:17:10.600
own conventions and policies so
that a team can customize

314
00:17:10.930 --> 00:17:15.340
the naming conventions for, for
their database mappings or how

315
00:17:15.370 --> 00:17:18.160
controls are rendered on the
screen. So you're not locked

316
00:17:18.160 --> 00:17:22.630
into whatever convention I happen
to like, But if we

317
00:17:22.630 --> 00:17:25.120
take it, so we take
this idea forward five years,

318
00:17:25.120 --> 00:17:28.270
10 years, where every piece
of software has opinionated software,

319
00:17:29.110 --> 00:17:32.110
does that mean that there's
even more syntax and more

320
00:17:32.110 --> 00:17:35.650
obscurity to the point where
every single framework is its

321
00:17:35.650 --> 00:17:37.990
own little DSL that I'm
going to have to understand?

322
00:17:37.990 --> 00:17:41.290
Cause I I've written rails
code and I'm finding it.

323
00:17:42.040 --> 00:17:44.820
I always, I always have
found it difficult to, to

324
00:17:44.830 --> 00:17:46.990
be an expert because to
be an expert is also

325
00:17:46.990 --> 00:17:49.590
to be an expert in
trivia maybe is not the

326
00:17:49.590 --> 00:17:52.650
right word, but in, in
the tricks is, you know,

327
00:17:52.650 --> 00:17:54.780
is that really the case
in every system or, I

328
00:17:54.780 --> 00:17:59.000
mean, What you described as
a definite downside to the

329
00:17:59.000 --> 00:18:02.510
technique, but so taking the
example of all these DSLs,

330
00:18:02.510 --> 00:18:04.790
these little languages I have
to learn DSLs or domain

331
00:18:04.790 --> 00:18:07.520
specific languages for the listeners.
Yeah. I think that's, I

332
00:18:07.520 --> 00:18:09.440
think that concern is a
little bit of a red

333
00:18:09.440 --> 00:18:12.230
herring because every time I
pick up a framework or

334
00:18:12.230 --> 00:18:14.480
a new tool, I have
to learn a completely new

335
00:18:14.480 --> 00:18:17.690
kind of API, which even
though it's in C sharp

336
00:18:17.690 --> 00:18:22.430
or vb.net, it's it may
be speaking Greek. Okay. The

337
00:18:22.430 --> 00:18:26.840
DSL idea is an attempt
at creating a better API,

338
00:18:26.900 --> 00:18:29.900
a more, an API that
allows you to express the

339
00:18:29.900 --> 00:18:32.780
essence of what you're trying
to do without jumping through

340
00:18:32.780 --> 00:18:36.680
quite so many XML angle
bracket hoops to get there,

341
00:18:37.550 --> 00:18:41.840
whether you succeed or not
in that DSL depends on

342
00:18:41.840 --> 00:18:45.080
a lot of factors, but
that's the definite goal. I

343
00:18:45.080 --> 00:18:47.330
know that you've been experimenting
a lot lately taking what

344
00:18:47.330 --> 00:18:49.760
would have been, you know,
10, 20, 30 lines of

345
00:18:49.760 --> 00:18:51.860
angle brackets inside of an
XML file and turning it

346
00:18:51.860 --> 00:18:53.930
into a, what they call
a, what they're calling a

347
00:18:53.930 --> 00:18:59.570
fluent interface, which almost is
a, an English sentence, which

348
00:18:59.570 --> 00:19:02.960
is, you know, methods and
objects strung together all into

349
00:19:02.960 --> 00:19:05.180
one long kind of line.
And you've done this recently,

350
00:19:05.180 --> 00:19:07.130
I think with both structure
map and you've been using

351
00:19:07.130 --> 00:19:09.920
fluent and hibernate, is that
right? Both fluid and hybrid

352
00:19:09.920 --> 00:19:13.130
instruction map, maybe a quick
example I can give you

353
00:19:14.240 --> 00:19:16.610
are, I should say the
purpose of what I'm trying

354
00:19:16.610 --> 00:19:20.960
to do is to gather
things that today, maybe a

355
00:19:20.960 --> 00:19:23.720
lot of related pieces, but
they're spread out over either

356
00:19:23.870 --> 00:19:26.630
the code base, big XML
files. And I'm trying to

357
00:19:26.630 --> 00:19:30.770
compress that content and the
declaration of intent in a,

358
00:19:30.770 --> 00:19:33.710
in a smaller area, reducing
the surface area, take the

359
00:19:33.710 --> 00:19:38.420
example in WPF of creating
a keyboard shortcuts, right? You

360
00:19:38.420 --> 00:19:42.290
have a XAML node somewhere
that defines a bunch of

361
00:19:42.290 --> 00:19:45.620
commands and you give the
command a key name. It's

362
00:19:45.620 --> 00:19:48.230
pointed to a class who,
who knows where it's at

363
00:19:49.220 --> 00:19:51.950
at another place, maybe in
the same XAML file. Maybe

364
00:19:51.950 --> 00:19:55.850
not. You're creating an entirely
different set of XAML nodes

365
00:19:55.850 --> 00:19:59.480
to define that as a
key stroke control one control,

366
00:19:59.480 --> 00:20:03.380
two calls this command by
name, right? It's all kind

367
00:20:03.380 --> 00:20:08.720
of normalized. Yeah. It's it's
data centric programming. We're coding

368
00:20:08.720 --> 00:20:13.490
directly to the low levels
of WPF. Instead coming up

369
00:20:13.490 --> 00:20:16.940
with a very small fluent
interface where I can say

370
00:20:18.020 --> 00:20:21.530
these keys, call this command
and just pass in the

371
00:20:21.530 --> 00:20:25.640
command type in a generic
behind the scenes. It's going

372
00:20:25.640 --> 00:20:28.100
to container and getting the
object model. It's doing a

373
00:20:28.100 --> 00:20:30.860
lot of stuff behind the
scenes. It's creating the same

374
00:20:31.670 --> 00:20:34.890
input, binding command object, all
the stuff that was happening

375
00:20:34.890 --> 00:20:37.550
in the XAML before the
difference is you have a

376
00:20:37.550 --> 00:20:40.430
small place in the code
where you can see what

377
00:20:40.430 --> 00:20:42.590
all of these things are
and see how they connect

378
00:20:42.590 --> 00:20:47.440
directly to one another, taking
it farther, this small expression,

379
00:20:47.470 --> 00:20:50.320
I can be a keyboard
shortcut. I can have it

380
00:20:50.320 --> 00:20:52.960
show up in a dynamically
created menu and maybe even

381
00:20:52.960 --> 00:20:56.440
a button bar across the
top, but expressed one place

382
00:20:56.920 --> 00:20:59.260
and one small area of
the code. Is there something

383
00:20:59.260 --> 00:21:00.970
that just now, or is
this a theory that you've

384
00:21:00.970 --> 00:21:04.020
come, this is in the
storyteller code base. Oh, really?

385
00:21:04.140 --> 00:21:05.700
So the story to our
code base that I can

386
00:21:05.700 --> 00:21:08.280
poke around and it's a
version right now That will

387
00:21:08.280 --> 00:21:11.280
be checked in by the
time you dear listeners receive

388
00:21:11.280 --> 00:21:13.770
this podcast. Very cool. So
that's cool. Cause I actually

389
00:21:13.770 --> 00:21:16.230
did a podcast earlier with
Ian Griffith about WPF and

390
00:21:16.230 --> 00:21:18.090
we were talking about stuff.
So now I've got a

391
00:21:18.090 --> 00:21:20.940
little thing there that I
can use, but talk to

392
00:21:20.940 --> 00:21:22.920
me about what a fluent
interface would look like. I

393
00:21:22.920 --> 00:21:24.600
know that we're doing this
in audio, so people can't

394
00:21:24.600 --> 00:21:26.760
see the code, but this
really is almost a sentence.

395
00:21:27.180 --> 00:21:30.090
Maybe explain like a structure
map, example, like one line

396
00:21:30.090 --> 00:21:34.110
of code and walk me
through what a typical fluent

397
00:21:34.110 --> 00:21:36.630
structure map conventional thing would
look like and what that

398
00:21:36.630 --> 00:21:38.580
would really expand out to
if I had to do

399
00:21:38.580 --> 00:21:41.430
it again. So actually can
I start from the XML

400
00:21:41.430 --> 00:21:44.880
first? Okay. Whatever makes you
happy. So Scott inferred earlier

401
00:21:44.880 --> 00:21:48.390
that the XML configuration or
structure map early on was

402
00:21:48.390 --> 00:21:52.020
terrible, except he said it
politely, politely. It was terrible.

403
00:21:52.050 --> 00:21:56.100
Okay. You would have to
express that it's okay to

404
00:21:56.100 --> 00:21:58.650
pull types from this assembly.
So there's a note that

405
00:21:58.650 --> 00:22:02.820
says assembly this name. Then
I would say, I have

406
00:22:02.820 --> 00:22:05.850
a plugin family of classes
that plug into this interface.

407
00:22:06.150 --> 00:22:09.870
There's another XML node. Then
I might say this concrete

408
00:22:09.870 --> 00:22:13.230
class can be plugged into
this interface at this point.

409
00:22:13.230 --> 00:22:15.840
You've already lost me. Yeah.
We're four or five deep

410
00:22:15.870 --> 00:22:19.980
into an arrow of an
arrow shaped XML file. Okay.

411
00:22:20.130 --> 00:22:23.220
Now that you're, you're, you're
horrified. We'll move on to

412
00:22:23.280 --> 00:22:27.090
VFI approach today to do
that same kind of thing

413
00:22:27.780 --> 00:22:30.150
in the trunk of storyteller.
I always say if I

414
00:22:30.150 --> 00:22:35.430
approach the fluent phone interface,
so in the fluent interface

415
00:22:35.430 --> 00:22:39.210
approach, I would simply say
if I have an <inaudible>

416
00:22:39.220 --> 00:22:42.750
interface and it has one
class that I want to

417
00:22:42.750 --> 00:22:45.120
be plugged in as the
default, I Fu that's Fu

418
00:22:45.390 --> 00:22:50.100
classic food food example. Okay.
I would say four and

419
00:22:50.100 --> 00:22:54.240
use generic angle brackets. The
word for, for angle brackets.

420
00:22:54.330 --> 00:22:57.480
I Fu okay. Close your
print. Open and close parentheses

421
00:22:57.510 --> 00:23:04.830
dot use angle brackets, foo
foo use Fu. Yeah. And

422
00:23:04.830 --> 00:23:07.890
instead of spaces in your
English there, you're using angle

423
00:23:07.890 --> 00:23:10.110
brackets and parentheses, but for
all intents, it's an English

424
00:23:10.410 --> 00:23:13.920
sentence. It's a declaration. Yes.
The classic Martin Fowler described

425
00:23:13.950 --> 00:23:17.970
fluid interface. Yes. Now do
do be careful. We have

426
00:23:17.970 --> 00:23:21.180
experimented and I was guilty
with this trying too hard

427
00:23:21.180 --> 00:23:23.610
to make it look like
a sentence. So it reads

428
00:23:24.060 --> 00:23:29.310
for requested type. I Fu
the default co.is dot of

429
00:23:29.310 --> 00:23:31.260
concrete. Yeah. That's it, it's
interesting that you say that

430
00:23:31.260 --> 00:23:35.250
because talking about being polite
versus being real, some of

431
00:23:35.250 --> 00:23:37.560
the initial examples that I'd
seen your blog when you

432
00:23:37.560 --> 00:23:41.400
were just kind of exploring
that and, and others who

433
00:23:41.400 --> 00:23:47.180
have made similar interfaces, when
I see, you know, for.is.dot,

434
00:23:47.770 --> 00:23:51.110
I'm like, okay, come on.
He is really even his

435
00:23:51.110 --> 00:23:55.390
object, It's his expression interface.
So you know what I'm

436
00:23:55.390 --> 00:24:00.100
saying? Yeah. We tried this
experiment first. I would say

437
00:24:00.100 --> 00:24:03.430
that we have some internal
DSLs that I can show

438
00:24:03.430 --> 00:24:06.220
to my product manager and
he can actually say, yeah,

439
00:24:06.220 --> 00:24:09.850
that's right. That's wrong. And
your non technical, non programmer,

440
00:24:09.880 --> 00:24:13.960
non technical people, but we're
developers. We, we can read

441
00:24:13.960 --> 00:24:19.480
code instead. I found really
adopting it from jQuery, January

442
00:24:19.480 --> 00:24:24.410
style code going for a
much more terse infrastructure. And

443
00:24:24.430 --> 00:24:27.370
that means I'm ditching the,
for and with and the

444
00:24:27.370 --> 00:24:29.770
ans and trying to make
it as tight as possible

445
00:24:30.820 --> 00:24:34.030
so far. I think I'm
liking that approach, but it

446
00:24:34.030 --> 00:24:36.370
may be just because we
use so much jQuery now

447
00:24:36.880 --> 00:24:38.260
That is really interesting. Let's
get a bit of a

448
00:24:38.260 --> 00:24:40.870
tangent, but the idea that
looking at jQuery in the

449
00:24:40.870 --> 00:24:43.720
way of jQuery expresses itself
is just somehow UN you

450
00:24:43.720 --> 00:24:48.760
know, not really quantifiably, but,
but you know, clearly such

451
00:24:48.760 --> 00:24:52.420
a comfortable least comfortable to
right. Thing that we would

452
00:24:52.420 --> 00:24:54.670
look to the JavaScript library
that we use a lot

453
00:24:55.030 --> 00:24:57.730
and apply that to code
that we're writing somewhere else

454
00:24:57.760 --> 00:25:01.090
and C sharp versus good.
And it's, it's, it's interesting.

455
00:25:02.200 --> 00:25:06.700
Cause it's funny. Cause jQuery
still has that magic language,

456
00:25:06.730 --> 00:25:10.480
the selector language inside of
its string where, you know,

457
00:25:10.510 --> 00:25:12.490
part of it's fluent until
you get into a string

458
00:25:12.490 --> 00:25:14.620
and then you pass stuff
in, when you're creating a

459
00:25:14.620 --> 00:25:17.740
fluent interface for, for structure
map. Have you found times

460
00:25:17.740 --> 00:25:20.410
when you, rather than trying
to string objects together, you

461
00:25:20.410 --> 00:25:23.350
really just end up with
some tiny DSL on a

462
00:25:23.350 --> 00:25:26.350
string or if you don't
Got that far yet. So

463
00:25:27.590 --> 00:25:30.550
that's, that's a good, that's
a, that's something to think

464
00:25:30.550 --> 00:25:33.940
about. I would say I
have not done any kind

465
00:25:33.940 --> 00:25:38.080
of interpretation. There are some
places I do that a

466
00:25:38.080 --> 00:25:42.040
lot for setting up test
data. Yeah. There are other

467
00:25:42.040 --> 00:25:45.400
tricks besides method training and
she can find all of

468
00:25:45.400 --> 00:25:49.300
this on Martin Fowler's website.
There is a book there's

469
00:25:49.300 --> 00:25:52.660
a section called the DSL
work in progress. And he

470
00:25:52.660 --> 00:25:56.830
talks a lot about different
design patterns for creating internal

471
00:25:57.040 --> 00:25:59.890
domain specific languages. The book
that Martin has been writing

472
00:25:59.890 --> 00:26:02.350
for going on three years
now, and he's been doing

473
00:26:02.350 --> 00:26:05.290
it in progress. He's basically
writing this book and putting

474
00:26:05.290 --> 00:26:07.810
it up his notes really,
as he writes it and

475
00:26:07.810 --> 00:26:10.230
you can watch it. Yeah.
Right. The book. But the

476
00:26:10.240 --> 00:26:13.630
point is there are other
tricks, very useful tricks. Besides

477
00:26:13.630 --> 00:26:17.200
method chaining method, chaining gets
kind of nasty to implement.

478
00:26:17.200 --> 00:26:20.280
When you get past a
few things you can use

479
00:26:20.290 --> 00:26:24.160
'em you can use object.
Initializers much like the way

480
00:26:24.160 --> 00:26:27.880
the Ruby guys kind of
idiomatically pass around dictionaries as

481
00:26:27.940 --> 00:26:30.970
a way to kind of
create more readable. Do you

482
00:26:30.970 --> 00:26:32.980
think that this is a
little bit of a tangent?

483
00:26:32.980 --> 00:26:34.780
Do you think that C
sharp four and the dynamic

484
00:26:34.780 --> 00:26:37.780
and the IVD, the diamond
dynamic keyword and the ability

485
00:26:38.140 --> 00:26:43.060
to not use IntelliSense and
instead figure out a method

486
00:26:43.260 --> 00:26:45.840
at runtime would make a
fluid interface, easier to write,

487
00:26:47.450 --> 00:26:50.690
Maybe easier to read and
consume. Yeah, probably not usually.

488
00:26:50.690 --> 00:26:53.900
Right. Since you wouldn't have
IntelliSense, But that's, that's the

489
00:26:53.900 --> 00:26:57.320
point to me, this is
a tangent, but at that

490
00:26:57.320 --> 00:26:58.940
point, I think you just
need to reach for iron

491
00:26:58.940 --> 00:27:02.570
Ruby or iron Python Really
rather than using, C-sharp kind

492
00:27:02.570 --> 00:27:06.860
of attempt to get denim
dynamicism Yes. Ruby, if you're

493
00:27:06.860 --> 00:27:10.430
trying to create a DSL,
an internal DSL Ruby is,

494
00:27:10.490 --> 00:27:12.950
is going to be far
more readable because that's one

495
00:27:12.950 --> 00:27:15.770
of the interesting stuff in
the code. So Somebody who

496
00:27:15.770 --> 00:27:18.800
writes C-sharp for a living
myself and yourself, it'll be

497
00:27:18.800 --> 00:27:21.530
interesting to see if we
start doing convention over configuration

498
00:27:21.530 --> 00:27:25.220
and fluid interfaces and DSLs
to drive our C-sharp applications.

499
00:27:25.220 --> 00:27:29.210
If, if, if Ruby iron
Ruby in this case becomes

500
00:27:29.210 --> 00:27:30.800
the defacto way to do
it. I know that that

501
00:27:30.800 --> 00:27:34.820
Orrin, that I end day
uses a BU as his

502
00:27:34.820 --> 00:27:37.670
kind of primary DSL. And
he's been pushing it for

503
00:27:37.670 --> 00:27:41.330
years. And has that caught
on beyond just Warren himself?

504
00:27:42.530 --> 00:27:44.600
Maybe not so much in
the dotnet camp. I think

505
00:27:44.600 --> 00:27:47.690
it's much more common maybe
in, in the Java camp

506
00:27:47.690 --> 00:27:51.320
where they've had alternative languages
longer than us. Right? So

507
00:27:51.380 --> 00:27:53.300
the same kind of things
we see the Java guys

508
00:27:53.300 --> 00:27:57.680
doing have maybe the hardcore
domain and anything that's performance

509
00:27:57.680 --> 00:28:02.540
intensive or infrastructure being in
Java and the business rules

510
00:28:02.540 --> 00:28:06.680
and the glue code moving
up into more dynamic languages

511
00:28:06.710 --> 00:28:10.070
like groovy or Jay Ruby,
where, where there's much more

512
00:28:10.130 --> 00:28:13.370
terse syntax, and you can
create more readable code. We

513
00:28:13.370 --> 00:28:16.400
may be doing the same
kind of things. You and

514
00:28:16.400 --> 00:28:19.160
I were having an interesting
discussion earlier about doing a

515
00:28:19.160 --> 00:28:22.970
doing except as testing. And
you had mentioned a tool

516
00:28:22.970 --> 00:28:25.280
that a lot of Ruby
guys use called cucumber. And

517
00:28:25.280 --> 00:28:28.010
I had seen, we talked
about fit and fitness and

518
00:28:28.010 --> 00:28:30.260
uncle Bob Martin is here
at the, at the top,

519
00:28:30.270 --> 00:28:32.120
trying to figure out how
to do this. And a

520
00:28:32.120 --> 00:28:34.070
guy had given him one
of my old bosses actually

521
00:28:34.070 --> 00:28:36.500
had given me a demo
of cucumber and he showed

522
00:28:36.500 --> 00:28:39.590
how he could write what
looked like English. And that

523
00:28:39.590 --> 00:28:41.810
was the convention that he
passed onto the suits that

524
00:28:41.810 --> 00:28:44.090
lived in his company. And
then he showed me the

525
00:28:44.090 --> 00:28:46.670
other side, which were the
tests. And then after he

526
00:28:46.680 --> 00:28:49.260
showed me kind of the,
the wonderful English he'd written,

527
00:28:49.260 --> 00:28:51.890
then that his suits worked
on and the wonderful test

528
00:28:51.890 --> 00:28:53.540
he'd written. And I was
like, wow, this is amazing.

529
00:28:53.540 --> 00:28:56.090
This is wait a second.
How does this fit together?

530
00:28:56.630 --> 00:28:58.580
And then he like, well
here, let me open this

531
00:28:58.580 --> 00:29:02.390
text file full of regular
expressions. And then suddenly things

532
00:29:02.390 --> 00:29:05.330
stopped being so magical and
stop being kind of disgusting.

533
00:29:06.170 --> 00:29:08.060
And he's like, well, yeah,
we really haven't got an

534
00:29:08.060 --> 00:29:11.710
answer for that. This file
uses regular expressions to read

535
00:29:11.730 --> 00:29:16.400
English and map it to
these tests right here. Do

536
00:29:16.400 --> 00:29:20.390
convention over configuration systems necessarily
have to have something disgusting

537
00:29:20.390 --> 00:29:22.340
in the middle or is
it just really, it can,

538
00:29:22.340 --> 00:29:24.140
it, can it be very,
very basic? Like the example

539
00:29:24.140 --> 00:29:26.420
I said of, if you
name your gifts this way,

540
00:29:26.420 --> 00:29:28.700
it'll just work. Or if
you name your interfaces, that

541
00:29:28.700 --> 00:29:31.730
will just work. How often
is there black magic, like

542
00:29:31.760 --> 00:29:33.620
buried somewhere that we don't
want to talk about, I

543
00:29:33.620 --> 00:29:36.530
guess is my question. I
think it's all black magic,

544
00:29:36.680 --> 00:29:41.560
right? It may be simpler
some regular expressions. If you're

545
00:29:41.560 --> 00:29:44.710
going to build this yourself,
or I think for you

546
00:29:44.710 --> 00:29:49.480
to understand how these are
usually implemented, there's usually something

547
00:29:49.480 --> 00:29:53.590
where the Fowler calls the
semantic model directly underneath say,

548
00:29:53.590 --> 00:29:56.050
we're working on fluent in
hibernate and we're building our

549
00:29:56.050 --> 00:30:00.730
own conventions. Say for us,
we have a convention that

550
00:30:00.730 --> 00:30:04.060
determines the mini to mini
table mappings names, many to

551
00:30:04.060 --> 00:30:07.540
many relationships, right? It's very
important. You always want the

552
00:30:07.540 --> 00:30:12.040
names, the exact same way
under the hood. It's altering

553
00:30:12.040 --> 00:30:16.690
a property on a many
to many table map property.

554
00:30:16.690 --> 00:30:19.110
There's actually a class. You
are. Can you give me

555
00:30:19.110 --> 00:30:23.280
a concrete example Called the
mini mini table map? I

556
00:30:23.280 --> 00:30:27.180
believe, but say our convention
is you take, if you're

557
00:30:27.180 --> 00:30:30.060
relating one class to another
class and take the two

558
00:30:30.060 --> 00:30:32.040
class names, you make sure
that you put it in

559
00:30:32.040 --> 00:30:35.610
alphabetical order so that the
name would be identical going

560
00:30:35.610 --> 00:30:38.610
from a to B or
B to a okay. And

561
00:30:38.910 --> 00:30:43.050
that first name to second
name is how we determine

562
00:30:43.050 --> 00:30:47.370
our mini mini table mapping.
That's setting a property of

563
00:30:47.640 --> 00:30:50.610
a class inside of fluent
and hibernate. And that's the

564
00:30:50.610 --> 00:30:54.090
very last minute, this semantic
model, this, this whole object

565
00:30:54.090 --> 00:30:56.700
graph of how things are
mapped from class to table

566
00:30:56.730 --> 00:30:59.850
property. The column name that
at the last minute is

567
00:30:59.850 --> 00:31:05.280
used to configure and hibernate
itself. Internally. If you ever

568
00:31:05.280 --> 00:31:08.670
decide to build one of
these things yourself, you build

569
00:31:08.670 --> 00:31:12.390
a semantic model that actually
performs the runtime activity. You

570
00:31:12.450 --> 00:31:17.040
test that very well. You
layer conventions or a DSL

571
00:31:17.250 --> 00:31:21.420
on top of the semantic
model, your conventions are altering

572
00:31:21.660 --> 00:31:25.710
this, this runtime object graph
or your DSL is writing

573
00:31:25.710 --> 00:31:28.260
to this semantic model. Okay,
this might be a stretch,

574
00:31:28.290 --> 00:31:30.870
but because I'm doing multiple
podcasts in a day here,

575
00:31:30.870 --> 00:31:32.610
I'm starting to attach things
that I've talked to. In

576
00:31:32.610 --> 00:31:36.510
previous shows, we talked to
Ian about why I was

577
00:31:36.510 --> 00:31:39.390
running into problems with my
application. I had my view

578
00:31:39.930 --> 00:31:42.210
and I thought I had
a view model, but it

579
00:31:42.210 --> 00:31:43.920
was really just a bunch
of sloppy code that was

580
00:31:43.920 --> 00:31:46.260
talking to my view. I
needed multiple layers and I

581
00:31:46.260 --> 00:31:49.560
really just had one big
ball of a mess. I

582
00:31:49.560 --> 00:31:53.310
didn't really have a view
model. You're describing the semantic

583
00:31:53.310 --> 00:31:55.290
model I started when you
were saying semantic model, I

584
00:31:55.290 --> 00:31:59.310
started thinking about view models
versus models. You're saying to,

585
00:31:59.790 --> 00:32:02.460
to really have that layer,
that is that, that object

586
00:32:02.460 --> 00:32:08.010
graph that shows your intent
effectively and separating that out

587
00:32:08.010 --> 00:32:10.800
from where that intent was
sourced from where it came

588
00:32:10.800 --> 00:32:12.690
from, came out of configuration,
or it came out of

589
00:32:12.690 --> 00:32:15.360
a fluent model or it
came out of convention. Yes.

590
00:32:15.840 --> 00:32:18.180
It's just interesting that, you
know, all his problems in

591
00:32:18.180 --> 00:32:20.700
computer science can be solved
by one additional layer of

592
00:32:20.700 --> 00:32:23.610
abstraction, whether it be adding
a view model to a

593
00:32:23.640 --> 00:32:27.570
previously cluttered view or adding
a semantic model to your

594
00:32:27.570 --> 00:32:32.430
semantics. So that's absolutely true.
If you want to think

595
00:32:32.430 --> 00:32:35.640
of it this way, the
Symantec model, you can build

596
00:32:35.700 --> 00:32:39.800
any way that's easiest for
you to make it in

597
00:32:39.800 --> 00:32:43.490
WPF WPF. We don't really
have much of a separation.

598
00:32:43.790 --> 00:32:46.430
What you see in XAML
is pretty well, a serialized

599
00:32:46.430 --> 00:32:50.750
copy of the raw semantic
model that the controls, the

600
00:32:50.750 --> 00:32:56.330
tree, the DSL or conventions,
it's just putting icing on

601
00:32:56.330 --> 00:32:58.340
the cake. Or if you
have to say it it's

602
00:32:58.340 --> 00:33:01.340
lipstick on the pig, it's
trying to create an API

603
00:33:01.340 --> 00:33:04.580
that's friendly for the user
where I can be very

604
00:33:04.580 --> 00:33:08.510
concerned about what's best for
the user. That just simply

605
00:33:08.510 --> 00:33:12.320
helps configure the things that
work it's isolating the user

606
00:33:12.320 --> 00:33:15.500
from the mechanics, so that
I can use to build

607
00:33:15.500 --> 00:33:17.060
the mechanics in a way
that's easy for me as

608
00:33:17.060 --> 00:33:20.960
a developer and still provide
a good experience for the

609
00:33:20.960 --> 00:33:23.540
developers using it. And that
might be the essence of

610
00:33:23.540 --> 00:33:26.420
why this isn't obvious to
the average Joe is using

611
00:33:26.480 --> 00:33:28.460
either whether it be WPF
as the example, or using

612
00:33:28.460 --> 00:33:30.530
a system. And she's sharp
is that there's nothing in

613
00:33:30.530 --> 00:33:34.100
the tooling. There's nothing in
the language that enforces this.

614
00:33:34.520 --> 00:33:36.530
There's nothing in WPF. When
I go file new WPF

615
00:33:36.530 --> 00:33:39.200
application, that forces me to
have a view model. And

616
00:33:39.230 --> 00:33:42.290
you know, there's even now
in, in, in fluent, in

617
00:33:42.290 --> 00:33:44.930
hibernate, I'm an instructor. I'm
sure I could probably shoot

618
00:33:44.930 --> 00:33:47.870
myself in the foot if
I wasn't using these fluid

619
00:33:47.870 --> 00:33:50.420
interfaces correctly. Right? I mean,
do they prevent, they don't

620
00:33:50.420 --> 00:33:55.310
prevent me from expressing myself
incorrectly. That's absolutely right. If

621
00:33:55.310 --> 00:33:58.850
I do my job well
as an API designer and

622
00:33:58.880 --> 00:34:02.630
things are consistent and I
fail fast, if I can,

623
00:34:02.660 --> 00:34:04.580
I have to try to
detect when you do something

624
00:34:04.580 --> 00:34:07.850
wrong and fail fast and
tell you where and why

625
00:34:07.850 --> 00:34:10.670
you did something wrong. And
I have to be consistent

626
00:34:10.670 --> 00:34:13.460
all the way through. That
was a part of another

627
00:34:13.460 --> 00:34:16.040
one of my talks. I
did a lessons learned, talk

628
00:34:16.040 --> 00:34:19.880
from structure, map development, and
I outlined where I've gotten

629
00:34:19.880 --> 00:34:25.130
in trouble and my structure
map API from inconsistencies or

630
00:34:25.970 --> 00:34:29.570
making a developer do what
seems like the exact same

631
00:34:29.570 --> 00:34:34.820
task instruction map configuring. When
you try to override construct

632
00:34:34.820 --> 00:34:39.470
your arguments explicitly, you do
strings and numbers and primitive

633
00:34:39.470 --> 00:34:44.630
types one way, but for
dependencies, non primitive types, you

634
00:34:44.630 --> 00:34:48.620
do it another way. And
that confuses structure, map users.

635
00:34:48.650 --> 00:34:51.740
It's something I get in
trouble with right now. I

636
00:34:51.740 --> 00:34:54.590
know as the developer of
this tool, that a structure,

637
00:34:54.600 --> 00:34:58.040
my handles primitives and non
primitives differently. So I made

638
00:34:58.040 --> 00:35:01.580
the API reflect that, but
the user shouldn't have to

639
00:35:01.580 --> 00:35:06.800
know that I should make
the API. Exactly. That's the

640
00:35:06.800 --> 00:35:12.440
kind of mistake you can
make with ESL KPIs. Interesting.

641
00:35:13.310 --> 00:35:15.140
Well, cool. Well, thank you
so much for sitting down

642
00:35:15.140 --> 00:35:17.090
with me today and explaining
this stuff to me. And

643
00:35:17.090 --> 00:35:18.530
I suppose the people will
be able to shoot your

644
00:35:18.530 --> 00:35:20.690
talk online at some point.
So I'll put links up

645
00:35:20.690 --> 00:35:24.800
to the NDC conference talk
as well as your blogging.

646
00:35:24.800 --> 00:35:27.890
And you're also on Twitter.
Yes. All right. Well, this

647
00:35:27.890 --> 00:35:29.990
has been another episode of
Hansel minutes this week talking

648
00:35:29.990 --> 00:35:32.750
with Jeremy Miller and I'll see
you again next week.

