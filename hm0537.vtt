WEBVTT FILE

1
00:00:00.330 --> 00:00:03.480
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.480 --> 00:00:06.450
they make the show possible.
Today's show is sponsored by

3
00:00:06.450 --> 00:00:10.620
developer express, become a UI
superhero with dev express controls

4
00:00:10.620 --> 00:00:15.150
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.540 --> 00:00:19.620
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.650 --> 00:00:23.730
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.850 --> 00:00:48.570
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com
from hanselminutes.com. It's Hansel minutes,

8
00:00:48.900 --> 00:00:53.010
all weekly discussion with web
developer and technologist Scott Hanselman.

9
00:00:53.460 --> 00:00:58.440
This is Lawrence Ryan announcing show
number 537. In this episode,

10
00:00:58.440 --> 00:01:02.280
Scott talks with Rachel Simone
Weil about programming for the

11
00:01:02.280 --> 00:01:10.770
Nintendo entertainment system in 2016.
Hi, this is Scott Hanselman.

12
00:01:10.770 --> 00:01:13.590
This is another episode of
Hansel minutes today. I'm talking

13
00:01:13.590 --> 00:01:17.070
with Rachel Simone Weil, who
is a, an NES or

14
00:01:17.070 --> 00:01:20.490
a Nintendo entertainment system, rom
artists. Is that a fair

15
00:01:20.490 --> 00:01:23.570
description? That sounds good. Hi,
and thanks for having me.

16
00:01:23.960 --> 00:01:26.450
Okay. This is really, this
is really cool. I'm trying

17
00:01:26.450 --> 00:01:29.840
to get my head around
this. So you make new,

18
00:01:29.900 --> 00:01:36.440
fresh Nintendo games in 2016
For the NES, which came

19
00:01:36.440 --> 00:01:39.890
out here in the U
S in 1985. So that's

20
00:01:40.160 --> 00:01:45.950
31 year. And is this
something you started 31 years

21
00:01:45.950 --> 00:01:47.660
ago, or when did you
decide that this was something

22
00:01:47.660 --> 00:01:49.340
you wanted to get into
when I was a baby?

23
00:01:49.900 --> 00:01:53.600
Exactly. Yeah, no, I, I
became interested in the NES,

24
00:01:54.920 --> 00:01:59.840
probably in the mid nineties.
So after, after its heyday,

25
00:01:59.870 --> 00:02:02.330
after that, that console had
kind of come and gone

26
00:02:02.930 --> 00:02:06.920
and I never had one
as a kid, but when

27
00:02:06.920 --> 00:02:10.190
I was a young teenager,
I started seeing them pop

28
00:02:10.190 --> 00:02:13.130
up at garage sales and
things like that. And so

29
00:02:13.190 --> 00:02:15.470
now it was pretty affordable
for me and I, I

30
00:02:15.470 --> 00:02:18.500
got my first game consoles
all through garage sales and

31
00:02:18.500 --> 00:02:20.750
things like that. And I
think at the time there

32
00:02:20.750 --> 00:02:24.200
was really no concept of
retro gaming. You know, like

33
00:02:24.230 --> 00:02:27.110
people didn't think that there
was any reason to keep

34
00:02:27.110 --> 00:02:30.350
an old game console. It
was like, Hey, you know,

35
00:02:30.350 --> 00:02:33.680
the PlayStation's out. Why would
I want this, you know,

36
00:02:33.710 --> 00:02:37.430
this old eight bit system
or old 16 bit system.

37
00:02:37.430 --> 00:02:41.270
So, so that's kinda how
I got interested in games.

38
00:02:41.270 --> 00:02:43.220
They were kind of old
when I, when I started

39
00:02:43.220 --> 00:02:46.430
and pretty much as soon
as I started playing these

40
00:02:46.430 --> 00:02:50.780
games, I was thinking about
ways to modify them and

41
00:02:50.780 --> 00:02:54.440
ways to hack them ways
to change them. And once

42
00:02:54.440 --> 00:02:56.540
I started playing around with
that and saw how fun

43
00:02:56.540 --> 00:02:59.440
it was, I had to
know how these games made

44
00:02:59.440 --> 00:03:03.340
from scratch. And so I,
I taught myself assembly and

45
00:03:04.000 --> 00:03:07.810
started the journey that's been
going for about five or

46
00:03:07.810 --> 00:03:12.960
six years. Oh, wow. So
this, these were old when

47
00:03:12.960 --> 00:03:15.270
you started, which I think
is awesome. It seems like

48
00:03:15.270 --> 00:03:19.830
there's a Renaissance now, a
real appreciation of old systems

49
00:03:20.070 --> 00:03:24.570
of all kinds. Yes, exactly.
I don't know when the

50
00:03:24.570 --> 00:03:29.790
retro craze started. I feel
like maybe it was in

51
00:03:29.790 --> 00:03:35.220
the late 1990s, early two
thousands when people wanted to

52
00:03:35.220 --> 00:03:39.510
go back and play those
games. And I think it's

53
00:03:39.510 --> 00:03:42.180
really interesting, not only like
wanting to go back and

54
00:03:42.180 --> 00:03:45.180
play games from your childhood,
but also like thinking about

55
00:03:45.180 --> 00:03:49.170
ways to change your childhood
or, you know, I think

56
00:03:49.170 --> 00:03:51.870
a lot of people who
are interested in hacking old

57
00:03:51.870 --> 00:03:56.940
games or making, making new
games for old consoles, thinking

58
00:03:56.940 --> 00:04:00.690
about how could I take
my childhood memories and kinda

59
00:04:01.020 --> 00:04:03.210
play with them, or, you
know, make the game that

60
00:04:03.210 --> 00:04:04.920
I wanted to play when
I was a kid or

61
00:04:04.920 --> 00:04:08.220
something like that. I think
there's a motivation like that

62
00:04:08.220 --> 00:04:11.130
behind a lot of, you
know, what I do and

63
00:04:11.130 --> 00:04:16.500
what other folks in the
Homebrew community are doing. I

64
00:04:16.500 --> 00:04:20.970
will say though, that as
a cartridge based system, both

65
00:04:21.000 --> 00:04:23.280
now as an adult and
as a kid, it seemed

66
00:04:23.280 --> 00:04:27.600
more closed. It seemed impossible.
Like there was something required

67
00:04:27.930 --> 00:04:30.270
that I didn't have some
magic part of the thing

68
00:04:30.270 --> 00:04:33.990
that makes the cartridges. It
somehow seems more closed than

69
00:04:34.320 --> 00:04:36.270
like, even like an Xbox
where I feel like I

70
00:04:36.270 --> 00:04:37.890
could talk to it with
a network or I could

71
00:04:37.890 --> 00:04:41.340
burn a CD, making a
cartridge or getting my own

72
00:04:41.460 --> 00:04:46.200
code onto it seems impossible.
Absolutely. And that was definitely

73
00:04:46.200 --> 00:04:50.760
by design in some respects.
So, you know, I think

74
00:04:51.270 --> 00:04:56.640
Nintendo in particular, when they
released the, the Famicom, which,

75
00:04:56.820 --> 00:04:59.340
you know, Famicom was sort
of the NAS in Japan

76
00:04:59.370 --> 00:05:01.860
came out a few years
earlier when they brought that

77
00:05:01.920 --> 00:05:06.390
console to the American market,
they were concerned about things

78
00:05:06.390 --> 00:05:13.470
like piracy and low quality
games from sort of questionable

79
00:05:13.470 --> 00:05:17.640
developers. And that had happened
with the Atari 2,600, you

80
00:05:17.640 --> 00:05:21.330
know, it was much easier
for small studios to make

81
00:05:21.360 --> 00:05:24.810
games for the Atari. And
so you ended up seeing

82
00:05:24.810 --> 00:05:27.930
a market that was flooded
with games that maybe weren't

83
00:05:27.930 --> 00:05:33.030
quite that good. And so
Nintendo was, I think, very

84
00:05:33.030 --> 00:05:36.510
smart in wanting to sort
of close that system off.

85
00:05:37.860 --> 00:05:41.430
And so you do see
like, of course the cartridge,

86
00:05:42.330 --> 00:05:45.390
right? It's a tool that,
or it's a sort of

87
00:05:45.390 --> 00:05:50.370
medium, that's not, it's not
easily accessible, but I think

88
00:05:50.370 --> 00:05:52.260
there are, there were other
things too, like not even

89
00:05:52.260 --> 00:05:56.280
small studios were really able
to develop for that system.

90
00:05:57.050 --> 00:05:59.990
You had to get permission
from Nintendo, right? You had

91
00:05:59.990 --> 00:06:03.410
to be an officially licensed
developer. You had to pay

92
00:06:03.410 --> 00:06:07.280
money to have the privilege
to develop for the NES

93
00:06:07.280 --> 00:06:11.210
console. So it was, I
mean, of those cartridge based

94
00:06:11.240 --> 00:06:14.420
systems, it was one of
the most closed off. And

95
00:06:14.420 --> 00:06:16.970
it's also a reason, you
know, one of the reasons

96
00:06:16.970 --> 00:06:20.630
that Nintendo continued to have
cartridge consoles up through the

97
00:06:20.630 --> 00:06:24.800
end 64 when the PlayStation
had moved to, you know,

98
00:06:24.920 --> 00:06:28.330
disc media. Yeah. And there's
rumor that they may go

99
00:06:28.330 --> 00:06:32.650
back to cartridges even though
Yeah. I can't speculate on

100
00:06:32.650 --> 00:06:35.220
that, but it would be
interesting, you know, there are

101
00:06:35.230 --> 00:06:40.390
definitely some benefits in terms
of, you know, performance, there's

102
00:06:40.510 --> 00:06:43.270
trade offs with size, what
you can, what you can

103
00:06:43.270 --> 00:06:46.300
fit on a cartridge, but
So you have to be

104
00:06:46.300 --> 00:06:49.000
a licensed developer, but what
does that mean? You get

105
00:06:49.000 --> 00:06:51.970
a fancy cartridge burner thing
or a ribbon cable that

106
00:06:51.970 --> 00:06:54.910
shoves into the NES, and
then you write your code

107
00:06:54.910 --> 00:06:58.120
on the computer. And then
it feeds into the ribbon

108
00:06:58.120 --> 00:07:01.450
cable that feeds into like
a pretend cartridge. Well, you

109
00:07:01.450 --> 00:07:04.960
know, back in the day,
Nintendo actually produced every single

110
00:07:04.960 --> 00:07:11.080
cartridge in their Japanese facility.
So it wasn't like, you

111
00:07:11.080 --> 00:07:13.960
know, they, they really had
a lot of control over

112
00:07:13.960 --> 00:07:18.130
the manufacturer of the cartridges.
So it was very, very

113
00:07:18.130 --> 00:07:21.700
difficult for anyone who did
not have Nintendo sort of

114
00:07:21.700 --> 00:07:25.240
blessing to go make a
cartridge. Now it did happen.

115
00:07:25.870 --> 00:07:29.320
There were a couple of
companies that did, that did

116
00:07:29.320 --> 00:07:33.460
make unlicensed cartridges, not only
was the manufacturing an issue,

117
00:07:33.460 --> 00:07:37.630
but Nintendo had also put
us a security device in

118
00:07:37.630 --> 00:07:41.290
the NAS and it needed
sort of a, it was

119
00:07:41.290 --> 00:07:44.440
kind of a lock and
key system. So there was

120
00:07:44.470 --> 00:07:47.290
the security device in the
console. And then there was

121
00:07:47.290 --> 00:07:50.020
one in the cartridge. And
since Nintendo controlled the manufacturer

122
00:07:50.020 --> 00:07:52.510
of the cartridges, they put
that security device in the

123
00:07:52.510 --> 00:07:55.270
cart and a couple of
companies figured out ways to

124
00:07:55.270 --> 00:07:57.310
get around it. Some of
them would send a little,

125
00:07:58.630 --> 00:08:02.680
you know, a little voltage
to that security device to

126
00:08:03.250 --> 00:08:08.860
temporarily disable it. And then
another company actually reverse engineered

127
00:08:08.860 --> 00:08:14.170
it and, and sort of
made their own keys to

128
00:08:14.170 --> 00:08:16.630
put in the cartridge. That
company, as it turns out

129
00:08:16.630 --> 00:08:21.190
was a tare. And they
got sued for, I believe

130
00:08:21.190 --> 00:08:27.070
for, for taking patent, taking
patent information and using it

131
00:08:27.070 --> 00:08:31.150
to reverse engineer this security
device. So what did people

132
00:08:31.150 --> 00:08:34.060
write their code on though?
What did they write their

133
00:08:34.060 --> 00:08:36.580
code on there? Back in
the day? Like you said,

134
00:08:36.580 --> 00:08:38.890
that, you know, when you
wanted to make it, like

135
00:08:38.890 --> 00:08:42.340
you said that the, the
cartridges are, are locked down

136
00:08:42.340 --> 00:08:45.640
and there's security keys and
they they've manufactured them themselves,

137
00:08:45.850 --> 00:08:48.790
what were people doing that
were they writing them on

138
00:08:48.790 --> 00:08:52.720
emulators? Or how are you
testing if you can't like,

139
00:08:52.720 --> 00:08:54.430
you can't just make a
cartridge every time you want

140
00:08:54.430 --> 00:08:57.990
to test. Yeah. You know,
I'm not certain, there's not

141
00:08:57.990 --> 00:09:02.430
a lot known about the,
the development process. I think

142
00:09:02.430 --> 00:09:07.260
it was a lot less
sort of public knowledge. There

143
00:09:07.260 --> 00:09:10.470
were certainly, you know, I've
seen for some consoles, they

144
00:09:10.470 --> 00:09:16.200
had developer kits, like special
hardware that, that had, you

145
00:09:16.200 --> 00:09:22.830
know, sort of special feedback
or inputs. I know there

146
00:09:22.830 --> 00:09:26.760
were also development cartridges. It
could be that they were,

147
00:09:26.790 --> 00:09:30.510
that the developers were burning
their own cartridges, you know,

148
00:09:30.510 --> 00:09:34.620
just using basically an EEPROM
burner. And, but I don't

149
00:09:34.620 --> 00:09:36.690
know too much about the
development, you know, in terms

150
00:09:36.690 --> 00:09:39.300
of like the hardware, what,
what computers were they using

151
00:09:41.070 --> 00:09:43.340
that that would be really
interesting to find out, Well,

152
00:09:43.340 --> 00:09:45.710
how do you do it
then? Like, do you program

153
00:09:45.710 --> 00:09:47.660
on an emulator? And then
when does it move from

154
00:09:47.660 --> 00:09:52.280
an emulator to the real
device? So the process is

155
00:09:52.280 --> 00:09:56.930
essentially I start out in
a simple like code editor,

156
00:09:58.070 --> 00:10:01.040
you know, I mean, notepad
is totally fine. I actually

157
00:10:01.040 --> 00:10:04.760
use vs code because it
has an assembly language, syntax,

158
00:10:04.760 --> 00:10:08.480
highlighter, which is pretty handy.
So I just start kind

159
00:10:08.480 --> 00:10:13.910
of writing code from scratch
in there. And when I

160
00:10:13.910 --> 00:10:17.360
feel like I've, I've got
something that will turn the

161
00:10:17.360 --> 00:10:21.020
screen on, basically I can
start testing in the emulator.

162
00:10:21.080 --> 00:10:25.760
So there's a really simple,
there are a couple NES

163
00:10:25.760 --> 00:10:31.190
compilers that ha they're all
community created. So none of

164
00:10:31.190 --> 00:10:34.800
Nintendo's original tools are out
there. So, so everything that

165
00:10:34.820 --> 00:10:38.300
homebrewers use to make any
S games today was made

166
00:10:38.300 --> 00:10:42.620
by the community. So there's
of course, a compiler that

167
00:10:42.620 --> 00:10:46.940
compiles any S code. There's
also things like graphics, editors,

168
00:10:46.940 --> 00:10:50.750
and sound editors and things
like that. Again, I imagine

169
00:10:50.750 --> 00:10:54.020
that they're similar to what
real developers were using, but,

170
00:10:54.530 --> 00:10:57.410
but I'm not certain. So
yeah, I can actually test

171
00:10:57.410 --> 00:11:01.730
that code in the emulator
debugging. They they've actually written

172
00:11:01.730 --> 00:11:06.260
emulators with debugging tools and
life hex editor. I actually

173
00:11:06.500 --> 00:11:08.750
usually do most of my
debugging with the live hex

174
00:11:08.750 --> 00:11:12.560
editor. So I know what's
kind of cool about assembly

175
00:11:12.560 --> 00:11:15.350
language. And once you're really
familiar with the architecture of

176
00:11:15.350 --> 00:11:17.930
a system, you know, I
can actually open up the

177
00:11:17.930 --> 00:11:20.150
hex editor and look at
the values and Ram and

178
00:11:20.150 --> 00:11:23.630
go, Oh, there's my Sprite.
You know, it's not incrementing.

179
00:11:23.630 --> 00:11:27.080
Right. You know, I know
exactly what addresses that. And

180
00:11:27.080 --> 00:11:30.290
that's, that's pretty much how
I debug. There are kind

181
00:11:30.290 --> 00:11:34.190
of, people have built more
contemporary debuggers where you can

182
00:11:34.190 --> 00:11:36.710
set break points and things
like that. But, you know,

183
00:11:36.710 --> 00:11:40.370
once, once you've written into
assembly, you kinda know where

184
00:11:40.370 --> 00:11:45.500
everything's at. Well, because it's
finite, right? It's not gigabytes

185
00:11:45.500 --> 00:11:47.810
of memory that you, there
is a limited amount of

186
00:11:47.810 --> 00:11:49.310
space for you to look
in. Isn't there, you could

187
00:11:49.310 --> 00:11:51.920
almost with a really big
monitors, see all of memory,

188
00:11:53.170 --> 00:11:55.330
you'd have to have a
pretty Big monitor or pretty

189
00:11:55.330 --> 00:11:58.240
small font. But, but yeah,
I mean, you know, most

190
00:11:58.240 --> 00:12:03.130
of my games are right
around 32 kilobytes. I think

191
00:12:03.130 --> 00:12:06.190
the biggest one I've done
was maybe two 56 and

192
00:12:06.220 --> 00:12:10.410
all of that was because
of music. So the there's

193
00:12:10.410 --> 00:12:13.260
an addressable limit of the
CPU then on a, on

194
00:12:13.260 --> 00:12:15.810
a, on a, on an,
on any ass. Right. Which

195
00:12:15.810 --> 00:12:20.160
is like 64 K. Well,
it, it kind of depends.

196
00:12:20.160 --> 00:12:25.440
So, you know, you've got,
it's complicated formula, right? You've

197
00:12:25.440 --> 00:12:30.120
got the console, which it's,
you know, eight bit, it

198
00:12:30.120 --> 00:12:34.560
has 16 bit addressing, and
it's got a certain so

199
00:12:34.560 --> 00:12:37.290
that the console itself has
a certain amount of onboard

200
00:12:37.290 --> 00:12:40.020
Ram. And then you've got
the cartridge, which can sort

201
00:12:40.020 --> 00:12:44.370
of vary. Typically you have,
so you have your graphics

202
00:12:44.370 --> 00:12:47.820
and, and your game code,
your logic sort of separated

203
00:12:47.820 --> 00:12:51.150
into two different ships. And
those typically come in sort

204
00:12:51.150 --> 00:12:54.300
of eight kilobyte chunks. And
so what you see is

205
00:12:54.300 --> 00:12:58.680
a lot of, you know,
eventually over time, those cartridges

206
00:12:58.710 --> 00:13:03.360
had greater capacity and they
also had special mappers, which

207
00:13:03.360 --> 00:13:07.170
would allow things like bank
switching. So maybe you had,

208
00:13:07.740 --> 00:13:11.640
you know, 64 kilobytes of
graphics data that you could

209
00:13:11.640 --> 00:13:14.430
swap in, you know, four
kilobytes at a time. So

210
00:13:14.430 --> 00:13:17.640
you'd like kind of shuttle
some stuff over into Ram

211
00:13:18.090 --> 00:13:21.750
and on the console. And
you could work with that

212
00:13:21.750 --> 00:13:23.970
for awhile. And then you
might bank switch and shuttle

213
00:13:23.970 --> 00:13:27.330
some new stuff in. So
there were a couple of

214
00:13:27.330 --> 00:13:32.250
different limitations, you know, both
on the console side and

215
00:13:32.250 --> 00:13:34.890
the cartridge side and the
mappers and things like that

216
00:13:34.890 --> 00:13:38.580
that were sort of developed
and made more cost effective

217
00:13:38.820 --> 00:13:42.720
over the life span of
the NES. So let me

218
00:13:42.720 --> 00:13:45.650
see if I, if I
understand this, so the, the

219
00:13:45.720 --> 00:13:51.780
CPU inside of the NES
you program 65 Oh two

220
00:13:51.780 --> 00:13:55.980
assembler, that's the, the processor
flavor of assembly that you're

221
00:13:55.980 --> 00:14:00.810
writing and the CPU has
an addressable range. Like, you

222
00:14:00.810 --> 00:14:03.360
know, some processors, you know,
like some machines had a

223
00:14:03.360 --> 00:14:06.720
four gigabyte addressable range. That's
how much, you know, address

224
00:14:06.720 --> 00:14:10.560
space. They have 32 K
of it can be mapped

225
00:14:10.650 --> 00:14:13.140
into a rom, which is
the cartridge and the rom

226
00:14:13.140 --> 00:14:16.710
could be arbitrarily large. And
then you swap in chunks,

227
00:14:16.920 --> 00:14:20.250
you bank switch in chunks
into that higher address space

228
00:14:20.280 --> 00:14:25.350
that 32 K address space.
Is it 32 K that's

229
00:14:25.350 --> 00:14:28.710
the only, that's the only
number I'm not certain of,

230
00:14:29.820 --> 00:14:33.330
but, but I mean, the
basic outline, There's like a

231
00:14:33.330 --> 00:14:38.100
lower half upper half the
upper half, you swap page

232
00:14:38.130 --> 00:14:42.150
views onto this larger pile
of data that you have

233
00:14:42.150 --> 00:14:43.800
available to you in the
cartridges. Like it could be

234
00:14:43.800 --> 00:14:46.890
other levels, right. Or other
music or other stuff. Right.

235
00:14:46.890 --> 00:14:52.520
Right. Exactly. And typically, so
the NES tile based, so

236
00:14:52.520 --> 00:14:56.690
you're bringing in graphic tiles,
it's pretty interesting the way

237
00:14:56.690 --> 00:15:01.400
that the NES separates out
graphics code from the rest

238
00:15:01.640 --> 00:15:06.590
of the sort of game
logic, one really cool thing

239
00:15:06.600 --> 00:15:09.830
you can do as a,
like a really S if

240
00:15:09.830 --> 00:15:12.230
you want, if you wanted
to get a simple rom

241
00:15:12.230 --> 00:15:17.120
hack in, you can open
up a cartridge and get

242
00:15:17.120 --> 00:15:20.420
your soldering iron and a
D soldering braid and take

243
00:15:20.420 --> 00:15:25.460
out the graphics chip on
one cart and swap it

244
00:15:25.460 --> 00:15:28.940
with another one. And so,
because the graphics and logic

245
00:15:28.940 --> 00:15:34.160
are completely discreet. You can
have, you know, excite bike,

246
00:15:34.190 --> 00:15:37.010
but, you know, with the
graphics, from a Ninja turtles,

247
00:15:37.010 --> 00:15:41.570
NES game or something. Right.
So, so the logic will

248
00:15:41.570 --> 00:15:44.240
still operate exactly the same.
It does not care what

249
00:15:44.240 --> 00:15:47.560
those tiles are really made
of Miss that you messed

250
00:15:47.560 --> 00:15:49.420
with it. Like you pulled
his brain out and put

251
00:15:49.420 --> 00:15:54.340
it into a Mikey. Right.
You know, I think there

252
00:15:54.340 --> 00:15:59.620
are some limitations. Like typically
you want those, I haven't

253
00:15:59.620 --> 00:16:01.570
experimented to see what happens
if you don't do it

254
00:16:01.570 --> 00:16:03.550
this way, but, but typically
you want those banks to

255
00:16:03.550 --> 00:16:06.730
be the same size and
have the same kind of

256
00:16:06.730 --> 00:16:09.520
board, right? Like if this
one has such and such

257
00:16:09.520 --> 00:16:11.950
mapper, you probably want the
one you're grabbing it from

258
00:16:11.950 --> 00:16:14.110
to also have the same
mapper and things like that.

259
00:16:14.110 --> 00:16:17.290
But, but yeah, I've actually,
I did a hack called

260
00:16:17.830 --> 00:16:21.700
excite ball where I just
took the excite bike cartridge

261
00:16:21.730 --> 00:16:24.550
and replaced it with the
graphics from baseball. And so

262
00:16:24.550 --> 00:16:27.700
you see these bikes going
by on the track and

263
00:16:27.700 --> 00:16:31.690
they're all made out of
baseball players and that's awesome.

264
00:16:31.750 --> 00:16:34.660
You know, the, the bike
animation, it works by tiles

265
00:16:34.660 --> 00:16:37.180
that swap out, you know,
a couple of times a

266
00:16:37.180 --> 00:16:41.380
second, let's say, so instead
of seeing a bike wheel

267
00:16:41.380 --> 00:16:45.310
spinning, you don't really see
a baseball player spinning because

268
00:16:45.310 --> 00:16:48.430
it's just, it's not the
tile itself isn't spinning. It's

269
00:16:48.430 --> 00:16:52.390
just flipping between, you know,
one Sprite of the wheel

270
00:16:52.390 --> 00:16:54.250
and another spread of the
wheel. So now what you

271
00:16:54.250 --> 00:16:57.850
get is, you know, just
flashing sprites all over the

272
00:16:57.850 --> 00:17:01.720
place where it was once
animation. It's pretty fun. It

273
00:17:01.720 --> 00:17:03.580
says that. Yeah. Does that
mean that they're in the

274
00:17:03.580 --> 00:17:07.360
same location, right? Like exactly.
Like if I swapped out

275
00:17:07.540 --> 00:17:11.320
and forgive my Nintendo ignorance,
like Mario cartridge for mega

276
00:17:11.320 --> 00:17:13.720
man or whatever, like, does
that mean Mario's body and

277
00:17:13.720 --> 00:17:17.320
mega man's body were in
the same place Only if

278
00:17:17.350 --> 00:17:21.070
right. Only if mega man's
body actually replaces Mario's body.

279
00:17:21.760 --> 00:17:24.940
So the tiles are, are
kind of picked, let's say

280
00:17:24.940 --> 00:17:28.660
between zero, zero, and FF
and the game doesn't really

281
00:17:28.660 --> 00:17:31.720
care. What's where it just,
it's just saying, Hey, I

282
00:17:31.720 --> 00:17:35.170
want tile 10 and I
want tile, you know, D

283
00:17:35.170 --> 00:17:38.950
team and whatever whatever's in
there, I'm going to grab

284
00:17:38.950 --> 00:17:40.990
and stack it together and
that's going to be my

285
00:17:41.020 --> 00:17:46.710
playable character. So did you
just say T D and

286
00:17:46.710 --> 00:17:53.700
yeah, so it's, that's awesome.
I Like I've been, I,

287
00:17:53.780 --> 00:17:55.730
I, I've never, that's so
much better than what I've

288
00:17:55.730 --> 00:17:58.190
been calling it for the
last 30 years. What have

289
00:17:58.190 --> 00:18:03.110
you been calling it? <inaudible>
Oh, no. So for me,

290
00:18:03.110 --> 00:18:08.150
D teen is, is one
D right? So it's like

291
00:18:08.270 --> 00:18:21.950
<inaudible>, but then when you
get a house that's, that's

292
00:18:22.040 --> 00:18:26.630
eight 87, which sounds a
lot like 87. So it's

293
00:18:26.630 --> 00:18:29.450
kind of confusing, but you
have, you know, 80 BD

294
00:18:29.480 --> 00:18:32.480
CD, D D E B
and F D. Right. So

295
00:18:32.480 --> 00:18:39.230
FDF for like ft, fi
I, I learned assembly on

296
00:18:39.230 --> 00:18:44.360
the streets. Like I hate
it. And so, and it

297
00:18:44.360 --> 00:18:47.150
was my first programming language
actually. And so I, I

298
00:18:47.150 --> 00:18:49.610
think I developed a lot
of idioms kind of in

299
00:18:49.610 --> 00:18:52.760
my head. And I, I,
you know, I, But now

300
00:18:52.760 --> 00:18:54.920
they're going to be things
like, is detain a thing,

301
00:18:54.920 --> 00:18:57.230
or is that a, is
that a ritualism? I don't

302
00:18:57.230 --> 00:18:59.510
know. It's a thing now
we're going to make it

303
00:18:59.510 --> 00:19:01.280
a thing. If it's, we're
going to hear from some

304
00:19:01.280 --> 00:19:02.840
assembly of people that are
like, yeah. Back in the

305
00:19:02.840 --> 00:19:09.050
fifties, back in the fifties,
I don't know. So I

306
00:19:09.050 --> 00:19:10.670
just went and I think
people who are listening should

307
00:19:10.670 --> 00:19:12.470
do this as well. And
I'll put the links on

308
00:19:12.470 --> 00:19:16.490
the show notes. I went
and I downloaded F C

309
00:19:16.640 --> 00:19:20.870
E U X FCU X
took me two seconds. It

310
00:19:20.870 --> 00:19:23.990
was a nothing little knit.
It's a, it's a Famicom

311
00:19:23.990 --> 00:19:27.980
slash Nintendo emulator. It looks
like it's, hasn't been touched

312
00:19:27.980 --> 00:19:30.620
in like three years. And
then I went to your

313
00:19:30.650 --> 00:19:35.570
get hub, which is excellent.
H X, L N T

314
00:19:35.720 --> 00:19:38.540
it's good hub slash HX,
L and T. And I

315
00:19:38.540 --> 00:19:41.030
went to your computers are
easy, which is funny. Cause

316
00:19:41.030 --> 00:19:42.590
I just did a blog
post about how they're not.

317
00:19:43.550 --> 00:19:46.430
And you did a program
written in assembler showing that

318
00:19:46.430 --> 00:19:49.610
they are quite simple and
you've got all the source

319
00:19:49.610 --> 00:19:52.760
code for a great kind
of hello world on steroids.

320
00:19:52.760 --> 00:19:55.070
It's got music and sprites
and user input and color

321
00:19:55.080 --> 00:19:59.390
cycling. I downloaded the raw
version of your love is

322
00:19:59.390 --> 00:20:03.080
kind dot NES. I went
file open and I'm running

323
00:20:03.080 --> 00:20:06.410
a Nintendo app. This was
four minutes from start to

324
00:20:06.410 --> 00:20:09.380
finish. But the part that's
amazing to me is that

325
00:20:09.800 --> 00:20:14.060
you go to the debug
menu and you say, hex

326
00:20:14.060 --> 00:20:18.020
editor, and what am I
looking at? Yeah. So this

327
00:20:18.020 --> 00:20:22.640
is really cool. So this
emulator, FCU X has debugging

328
00:20:22.640 --> 00:20:26.030
tools built in, again, these
are all community made and

329
00:20:26.030 --> 00:20:28.400
you've opened up the hex
editor. So they're actually a

330
00:20:28.400 --> 00:20:30.440
couple different views you can
see in the hex editor

331
00:20:30.470 --> 00:20:32.090
and I don't have it
in front of me. So

332
00:20:32.090 --> 00:20:34.130
I'm going by memory. I
think, I think it's like

333
00:20:34.130 --> 00:20:39.650
file, or maybe you can
switch between PPU and you

334
00:20:39.650 --> 00:20:41.960
know, looking at, Oh, I
see. I see any S

335
00:20:41.960 --> 00:20:44.600
memory as he PPU memory.
And I see rum file.

336
00:20:44.630 --> 00:20:46.850
Yep. And you're looking at
any S memory right now

337
00:20:47.390 --> 00:20:50.170
and it's, and it's Changing.
It's turning color as I

338
00:20:50.380 --> 00:20:52.960
like the app is running
and things are flashing on

339
00:20:52.960 --> 00:20:58.090
the screen and some values
are just staying all zero

340
00:20:58.090 --> 00:21:01.330
or Effie and other ones
are spinning in red. Yeah.

341
00:21:01.900 --> 00:21:04.800
Things are moving. I'm looking
at the matrix Are looking

342
00:21:04.800 --> 00:21:07.680
at the matrix and this
is actually how I debug

343
00:21:07.680 --> 00:21:10.020
my code, looking at the
matrix also. It's pretty cool.

344
00:21:10.530 --> 00:21:13.800
So what you're seeing is
actually the values in, in

345
00:21:13.800 --> 00:21:16.650
the memory being updated live
as the game is running.

346
00:21:17.070 --> 00:21:22.640
So I just happened to
know that the first couple

347
00:21:22.650 --> 00:21:29.700
rows of, of memory there
are, are handling music. So

348
00:21:29.700 --> 00:21:33.510
there's some, there's some about
16 bytes or so that

349
00:21:33.510 --> 00:21:36.690
hold music data. So what
you shouldn't see if you've

350
00:21:36.690 --> 00:21:39.210
got the game running next
to the live hex editor,

351
00:21:39.420 --> 00:21:42.660
you should actually see those
values changing with the beat

352
00:21:42.660 --> 00:21:46.350
of the song. They are,
there's two specific ones that

353
00:21:46.350 --> 00:21:51.210
are the one, two, three,
four, five. So what does

354
00:21:51.210 --> 00:21:55.800
that five it's five bites
over and seven. And they

355
00:21:55.800 --> 00:21:59.610
seem to be together like
a drum beat, boom, boom,

356
00:21:59.700 --> 00:22:03.660
boom. And then there's a
whole lot of zeros. And

357
00:22:03.660 --> 00:22:06.120
then there's like a whole
bunch of stuff that's changing

358
00:22:06.390 --> 00:22:09.210
in a, you know, in
one section from 200 to

359
00:22:09.210 --> 00:22:14.160
300. Right? Right. So, so
the couple of things that

360
00:22:14.160 --> 00:22:16.680
are happening there, so you've
got your, your music values,

361
00:22:16.680 --> 00:22:21.090
which are changing NES does
music with a two square

362
00:22:21.090 --> 00:22:24.330
wave channels and always channel
drum channel, which is noise

363
00:22:24.330 --> 00:22:29.430
channel. And then there's an
optional sort of wave like

364
00:22:29.430 --> 00:22:32.370
channel, which I didn't use
for this one. But, but

365
00:22:32.370 --> 00:22:35.310
those first 16 bytes or
so are my, my music

366
00:22:35.310 --> 00:22:37.110
Ram. And then I've got
after that, a couple of

367
00:22:37.110 --> 00:22:41.310
variables that I created myself
and one really important one

368
00:22:41.340 --> 00:22:44.280
is a, is a timer.
Right? So this is a

369
00:22:44.280 --> 00:22:46.980
really interesting thing. I, I
always like quiz my friends

370
00:22:46.980 --> 00:22:50.940
who are, you know, like
normal programmers, you know, game

371
00:22:50.940 --> 00:22:54.270
developers and people working on
systems that are like not

372
00:22:54.660 --> 00:22:57.510
30 years old. And I
asked them, you know, how

373
00:22:57.510 --> 00:23:00.570
do you get a random
number in, in an NPS?

374
00:23:00.930 --> 00:23:03.750
Or, you know, how do
you, how do you know,

375
00:23:03.780 --> 00:23:06.690
like how many, how much
time has elapsed in, in

376
00:23:06.690 --> 00:23:09.480
NES game and were like,
well, you just call the

377
00:23:09.480 --> 00:23:13.350
clock. And it's like, well,
there's no clock. Right? So

378
00:23:13.350 --> 00:23:15.450
one of the most important
things I do in, in

379
00:23:15.450 --> 00:23:18.750
every NES rom is I
set up a counter and

380
00:23:19.410 --> 00:23:22.740
you know, the game may
not necessarily know where it

381
00:23:22.740 --> 00:23:28.500
is in its cycles. You
may not know if you're

382
00:23:28.500 --> 00:23:32.460
running out of cycles before
the next screen refresh, which

383
00:23:32.460 --> 00:23:35.400
if you're trying to update
graphics while the screen refreshes,

384
00:23:35.430 --> 00:23:40.200
you'll get corrupted graphics. So
that's bad. So yeah, I

385
00:23:40.200 --> 00:23:42.720
keep a, I keep a
counter going and it helps

386
00:23:42.720 --> 00:23:47.240
me keep time in the,
so I basically have a

387
00:23:47.240 --> 00:23:51.260
variable called I dunno, NMI
counter or something. And it

388
00:23:51.260 --> 00:23:58.460
increments once every time the,
the console hits NMI. So

389
00:23:58.460 --> 00:24:03.440
I know essentially it's going
to be running. I'm gonna,

390
00:24:03.440 --> 00:24:07.220
I'm gonna have that value
get up to 60 in

391
00:24:07.220 --> 00:24:10.790
one second, right. 60 times
a second. So the sort

392
00:24:10.790 --> 00:24:13.550
of, if you think about
60 Hertz, right. Refresh rate.

393
00:24:14.630 --> 00:24:16.940
And so I could extrapolate
from that and figure out,

394
00:24:16.940 --> 00:24:18.890
okay, well, if it updates,
if it gets up to

395
00:24:18.890 --> 00:24:21.530
60 in one second, then
I can figure out what

396
00:24:21.530 --> 00:24:23.540
it's going to get up
to when it hits one

397
00:24:23.540 --> 00:24:25.910
second and I can create
sort of a second timer

398
00:24:25.910 --> 00:24:28.580
and things like that. So
when I want my animations

399
00:24:28.580 --> 00:24:31.400
to look really pretty, I
don't want them to flip

400
00:24:31.400 --> 00:24:34.490
around 60 times a second.
Cause you couldn't see that.

401
00:24:34.490 --> 00:24:38.300
Right. So I need to
create timers. So my sprites

402
00:24:38.350 --> 00:24:40.430
say, I have someone walking
or in the case of

403
00:24:40.430 --> 00:24:43.430
this rom I have some
hearts that kind of bounce

404
00:24:43.440 --> 00:24:45.830
to the rhythm of music.
And I want those to

405
00:24:45.830 --> 00:24:49.910
be animated, but also animated
slowly enough that they're visible

406
00:24:49.910 --> 00:24:52.760
to the human eye. So
I use those counters to

407
00:24:52.760 --> 00:24:54.620
keep track. So what you'll
see in the hex editor

408
00:24:55.070 --> 00:24:57.620
is there some numbers that
are just going from zero

409
00:24:57.620 --> 00:25:02.360
to FF incredibly quickly, and
that that's at NMI counter,

410
00:25:02.360 --> 00:25:06.250
that, that I've created to
keep time. When I look

411
00:25:06.250 --> 00:25:09.670
at the source code here,
you have sections where you

412
00:25:09.670 --> 00:25:12.400
have like, it looks like
usually you're saying 1.0 and

413
00:25:12.400 --> 00:25:16.180
2.0 and 3.0, and you're
basically chunking off little sections

414
00:25:16.180 --> 00:25:19.450
of stuff. There's a couple
of starter bits of things.

415
00:25:19.450 --> 00:25:21.580
We, you say, you know,
here's how big the cartridges.

416
00:25:21.580 --> 00:25:25.030
And, and then you've got
music. You say here's 16

417
00:25:25.030 --> 00:25:28.390
bytes for music. And then
I'm struck for some reason,

418
00:25:28.390 --> 00:25:32.350
by right next to it,
it says buttons, you know,

419
00:25:32.350 --> 00:25:35.950
dot RS one. So you
have the, whether or not

420
00:25:35.950 --> 00:25:39.700
the button is pressed, literally
sitting next to the music.

421
00:25:39.700 --> 00:25:42.820
Like it couldn't be any
closer. It's the next, it's

422
00:25:42.820 --> 00:25:45.640
the next bite. Right. And
what's interesting too, about the

423
00:25:45.640 --> 00:25:48.640
button reading on the NES
is of course you don't

424
00:25:48.640 --> 00:25:52.270
want to read every button
press. You want to read

425
00:25:52.270 --> 00:25:53.890
the first one and then
you want to hit a

426
00:25:53.890 --> 00:25:56.500
flag and then you want
to wait for that button

427
00:25:56.500 --> 00:25:58.600
to be released. These are
things I think a lot

428
00:25:58.600 --> 00:26:02.140
of game developers are really
spoiled with now is like,

429
00:26:02.170 --> 00:26:05.630
Oh, just let's see if
X is pressed, but you've,

430
00:26:05.630 --> 00:26:07.990
if you think about it,
you don't want to type

431
00:26:08.020 --> 00:26:10.690
the letter. X every time
a button is pressed, you

432
00:26:10.690 --> 00:26:13.570
want to type the letter
once and then maybe wait

433
00:26:13.570 --> 00:26:16.600
a few seconds or a
few milliseconds, and then maybe

434
00:26:16.600 --> 00:26:18.790
you want it to make
another extra. Maybe you don't.

435
00:26:18.790 --> 00:26:22.030
Right. And so you, I
don't have the source code

436
00:26:22.030 --> 00:26:23.710
in front of me, so
I'm going by memory. But

437
00:26:23.710 --> 00:26:26.770
I think I actually might
have a couple of variables

438
00:26:26.770 --> 00:26:31.000
related to buttons because I
need to store previous, you

439
00:26:31.000 --> 00:26:34.090
know, the values from the
last CPU cycle and the

440
00:26:34.090 --> 00:26:37.060
values from the current CPU
cycle and compare them. And

441
00:26:37.060 --> 00:26:39.100
I'm doing, you know, sort
of bit shifting and things

442
00:26:39.100 --> 00:26:44.610
like that. So, so yeah,
it's, you know, no, no

443
00:26:44.640 --> 00:26:48.330
handy functions, unless you write
them all yourself and button

444
00:26:48.330 --> 00:26:52.910
presses or One's pressed, then
you've got buttons pressed, but

445
00:26:52.910 --> 00:26:55.730
not red. And then buttons
pressed that need to be

446
00:26:55.730 --> 00:26:58.490
red. Right. And a whole,
and there's like five or

447
00:26:58.490 --> 00:27:01.940
six lines of assembler that
dance around the, I want

448
00:27:01.940 --> 00:27:03.770
to make sure that you're,
are you holding the button

449
00:27:03.770 --> 00:27:06.500
down? Are you just tapping
the button? You're you're right.

450
00:27:06.560 --> 00:27:08.810
Like we, when I learned
this stuff a long time

451
00:27:08.810 --> 00:27:12.020
ago, we always talked about
the bouncing, you know, and

452
00:27:12.050 --> 00:27:13.940
keeping track of whether you
push the button too many

453
00:27:13.940 --> 00:27:18.950
times or holding the button
down and making weird stuff

454
00:27:18.950 --> 00:27:22.580
happen or filling up prefers
full of button presses, and

455
00:27:22.580 --> 00:27:25.520
then not being able to
control it. You're really on

456
00:27:25.520 --> 00:27:27.680
the metal here. Like there's
nothing underneath there. There's no

457
00:27:27.680 --> 00:27:30.650
layer of abstraction. There's no
libraries. It's just you and

458
00:27:30.650 --> 00:27:34.700
some hardware that is absolutely
correct. Is that why you

459
00:27:34.700 --> 00:27:38.420
like it so much? I
do like it a lot.

460
00:27:38.420 --> 00:27:40.040
You know, it, it makes
a lot of sense to

461
00:27:40.040 --> 00:27:43.250
me. And I find there's
an analog with something that

462
00:27:43.250 --> 00:27:46.310
happened to me when I
was an undergraduate. So I,

463
00:27:46.790 --> 00:27:50.120
I started out as a
biochemistry and genetics double major

464
00:27:50.510 --> 00:27:55.130
and started taking, you know,
freshmen genetics and got into

465
00:27:55.160 --> 00:27:59.780
sophomore level. And they would
always draw genes as these

466
00:27:59.780 --> 00:28:03.470
boxes with connected by string.
And I would say, well,

467
00:28:03.470 --> 00:28:05.840
what is this box? You
know, and the professor would

468
00:28:05.840 --> 00:28:08.540
say, well, it's a gene,
you know, and then this

469
00:28:08.540 --> 00:28:10.340
gene moves over here and
this one goes over there

470
00:28:10.640 --> 00:28:13.070
and it was well what's
inside the box. And they

471
00:28:13.070 --> 00:28:15.710
would say, well, I don't
know, that's chemistry. That's not

472
00:28:15.710 --> 00:28:19.490
my problem. And so I
switched majors, I became a

473
00:28:19.490 --> 00:28:22.100
chemistry major and I found
out what all, what all

474
00:28:22.100 --> 00:28:25.370
was in the box. And
I was course really interested

475
00:28:25.370 --> 00:28:29.450
in genetics still, but I,
I guess my kind of

476
00:28:29.480 --> 00:28:32.270
motive thinking can be a
little bit all or nothing,

477
00:28:32.570 --> 00:28:35.000
which is a good thing.
Sometimes a bad thing other

478
00:28:35.000 --> 00:28:38.270
times. But, but for me,
you know, I find with

479
00:28:38.270 --> 00:28:41.780
other programming languages that, you
know, I have since learned

480
00:28:41.780 --> 00:28:44.150
other languages, but I always
want to know what's in

481
00:28:44.150 --> 00:28:46.940
the box. You know, when
you, when you write console

482
00:28:46.940 --> 00:28:50.390
dot log, like what's, what's
actually happening, you know, what

483
00:28:50.390 --> 00:28:53.990
does that mean? What's what
are the ones and zeros

484
00:28:53.990 --> 00:28:57.560
behind that? I know it
in assembly, but JavaScript, there's

485
00:28:57.560 --> 00:28:59.420
a lot of layers, a
lot of, a lot of

486
00:28:59.510 --> 00:29:04.250
black boxes. And it's, it's
easy when I think about

487
00:29:04.490 --> 00:29:08.660
the various kind of generations
that, you know, generations of,

488
00:29:08.660 --> 00:29:12.260
of programming languages, generations of
computers, but also generations of

489
00:29:12.260 --> 00:29:15.740
programmers. It's interesting to see
who is interested in what

490
00:29:15.740 --> 00:29:17.870
they think the metal is
and how far down it

491
00:29:17.870 --> 00:29:21.380
goes, because there's a whole
new world now with like,

492
00:29:22.130 --> 00:29:26.840
you know, ASM dot JS,
where there are programmers who

493
00:29:26.840 --> 00:29:29.150
are coming out of school
now who think that JavaScript

494
00:29:29.150 --> 00:29:32.450
is the metal, and they're
going to write to ASM

495
00:29:32.450 --> 00:29:35.810
dot JS and believe that
they're on the metal. And

496
00:29:35.810 --> 00:29:38.090
then the question is from
a matrix perspective is, well,

497
00:29:38.090 --> 00:29:41.530
maybe they are on the
metal. I mean, know, maybe

498
00:29:41.530 --> 00:29:43.810
it's just their metal. And
I don't know what I

499
00:29:43.810 --> 00:29:45.940
feel about that. I think
I'm always going to want

500
00:29:45.940 --> 00:29:49.500
to know what's underneath <inaudible>.
Yeah. And it was super

501
00:29:49.500 --> 00:29:52.830
fun. You know, when I
used to teach at, at

502
00:29:52.830 --> 00:29:55.830
the university of Texas, a
course on video game history,

503
00:29:56.280 --> 00:29:58.800
and we would open up
in NES and we would

504
00:29:58.800 --> 00:30:00.780
look at, you know, we
would open it we'd I

505
00:30:00.780 --> 00:30:04.140
brought screwdrivers into class. Right.
It's all right. Let's sit

506
00:30:04.140 --> 00:30:07.020
down and like take this
apart. And a room of

507
00:30:07.130 --> 00:30:10.500
a number of computer science
majors and electrical engineering majors

508
00:30:10.500 --> 00:30:12.810
who had never seen like,
Oh, like we could actually

509
00:30:12.810 --> 00:30:16.590
point to, you know, this
is the place where Mario

510
00:30:16.590 --> 00:30:21.750
gets stored, and this is
the watch battery that keeps

511
00:30:21.750 --> 00:30:26.220
the failures and Ram for
your save game, you know,

512
00:30:26.250 --> 00:30:29.340
little, like you can point
to the actual coin cell

513
00:30:29.340 --> 00:30:32.790
battery, you can point to
like, here's the CPU. And

514
00:30:32.820 --> 00:30:35.460
it's really cool when you
see it like that. Something

515
00:30:35.460 --> 00:30:38.400
that I think a lot
of them hadn't really ever

516
00:30:38.400 --> 00:30:43.260
seen before. Yeah. The being
able to point on the

517
00:30:43.260 --> 00:30:47.730
board and say this memory
is that chip is really

518
00:30:47.730 --> 00:30:52.830
significant. I remember putting buying
memory for a three 86

519
00:30:53.460 --> 00:30:55.740
and a two 86 before
it, and we would, we

520
00:30:55.740 --> 00:30:59.580
would buy it in, we
buy the actual dips and

521
00:30:59.580 --> 00:31:02.460
you would like say, okay,
well here's 16 K of

522
00:31:02.460 --> 00:31:04.860
my four megs. You know,
I'm putting four megabytes in

523
00:31:04.860 --> 00:31:07.530
this computer and here's 16
K at a time and

524
00:31:07.530 --> 00:31:09.450
I would put each chip
down and you would go

525
00:31:09.450 --> 00:31:11.640
and run a bank test.
And I think you see

526
00:31:11.640 --> 00:31:13.590
those when you boot up
some arcade games, some older

527
00:31:13.590 --> 00:31:16.710
arcade games it'll show you
like, I am physically testing

528
00:31:16.710 --> 00:31:18.630
that chip on that part
of the board. And it

529
00:31:18.630 --> 00:31:20.460
would light up a square
and say, if that one

530
00:31:20.460 --> 00:31:24.300
goes bad, swap that one
out. It gives you a

531
00:31:24.300 --> 00:31:27.720
whole kind of whole perspective
on how this, you know,

532
00:31:27.780 --> 00:31:30.930
<inaudible> 16 gigs of Ram
machine that we're talking on

533
00:31:30.930 --> 00:31:35.100
right now actually works. Right.
Right. Is this something people

534
00:31:35.100 --> 00:31:37.080
should start? Like, do you
think that you need new,

535
00:31:37.080 --> 00:31:41.730
fresh voices in the NAS
Homebrew community? I would always

536
00:31:41.730 --> 00:31:44.040
say, Yeah. I, I would
always say yes. You know,

537
00:31:44.040 --> 00:31:50.010
I think, you know, people
have different reasons for getting

538
00:31:50.010 --> 00:31:51.960
into home brew. And I
think a lot of them

539
00:31:51.990 --> 00:31:55.950
are nostalgic. Not all of
them, you know, there are

540
00:31:55.960 --> 00:31:59.040
certainly home brewers that are,
you know, working on consoles

541
00:31:59.040 --> 00:32:02.850
that were before their time.
The NES is kind of

542
00:32:02.850 --> 00:32:07.290
that way for me. I
think what's really interesting to

543
00:32:07.290 --> 00:32:11.940
me about home brew is
when people take their childhoods

544
00:32:11.940 --> 00:32:14.220
and people take history and
they sort of play with

545
00:32:14.220 --> 00:32:16.920
it and they sort of
rewrite, it's kind of like

546
00:32:16.920 --> 00:32:20.670
the Saifai of Homebrew, you
know, when people say, well,

547
00:32:20.670 --> 00:32:22.860
what if we went back
to this era and we

548
00:32:22.860 --> 00:32:26.850
just made something completely different
than anything that ever existed.

549
00:32:27.720 --> 00:32:31.650
You know, like let's put
aside platformers, let's put aside

550
00:32:31.650 --> 00:32:34.770
action games. You know, one
of the games that I

551
00:32:34.770 --> 00:32:40.520
made was a horoscope game,
a fortune teller love tests.

552
00:32:40.640 --> 00:32:45.260
I'm really super girly and
pastel, and it's pretty different

553
00:32:45.260 --> 00:32:48.500
than what, you know, what
the NES library looked like.

554
00:32:49.340 --> 00:32:53.000
There was like one sort
of obscure taro card, a

555
00:32:53.000 --> 00:32:54.380
game that came out in
the U S for the

556
00:32:54.380 --> 00:32:56.630
NES. But for the most
part, it's pretty kind of

557
00:32:56.630 --> 00:33:00.260
an unusual genre. One that
didn't really appear otherwise on

558
00:33:00.260 --> 00:33:03.020
the NES. And I, I
love that kind of thing

559
00:33:03.020 --> 00:33:07.430
where you sort of re-imagine
history and maybe you make

560
00:33:07.430 --> 00:33:11.360
your own sort of utopia
or your own sort of

561
00:33:11.870 --> 00:33:14.990
new and improved version of
history. That's I think for

562
00:33:14.990 --> 00:33:18.350
me, the great power of
things like Saifai and, and

563
00:33:18.440 --> 00:33:20.930
movies and film, and why
not do that with games

564
00:33:20.930 --> 00:33:25.000
too? Didn't you do a
hack where you swapped the

565
00:33:25.000 --> 00:33:27.340
gender of a character out
in a, in a cartridge?

566
00:33:28.630 --> 00:33:34.510
Well, I did do mega
ma'am, which was a gender

567
00:33:34.510 --> 00:33:39.160
bet thing, mega man, certainly
not. The first people have

568
00:33:39.160 --> 00:33:42.850
been doing gender swaps in
any S ROMs for, for

569
00:33:42.850 --> 00:33:47.820
years. I've actually done some
research on that and, and

570
00:33:47.830 --> 00:33:51.520
published a paper about it.
The other one that I

571
00:33:51.520 --> 00:33:55.630
did, which was quite silly,
was I, alright, I guess

572
00:33:55.630 --> 00:33:58.660
I did a couple. I
used the Barbie font, the

573
00:33:58.660 --> 00:34:00.730
font from the NES Barbie
game and put it in

574
00:34:00.730 --> 00:34:03.370
mega man. And it's, it's
one of those things where

575
00:34:03.370 --> 00:34:05.890
it's a little tiny change.
You know, the type is,

576
00:34:05.940 --> 00:34:08.950
is seven pixels high and
seven pixels across more or

577
00:34:08.950 --> 00:34:13.300
less, but it's very disconcerting
because mega man, it's one

578
00:34:13.300 --> 00:34:15.760
of those iconic games and
you have an idea of

579
00:34:15.760 --> 00:34:18.790
what it looks like, and
you see this slightly italic

580
00:34:19.480 --> 00:34:23.140
typeface and you go like
this mega man's broken, there's

581
00:34:23.140 --> 00:34:26.290
something wrong. And I was
kind of interested in, in

582
00:34:26.290 --> 00:34:28.300
sort of this idea of
like, what's the minimum change

583
00:34:28.300 --> 00:34:31.180
you could make to mega
man where it's almost like

584
00:34:31.510 --> 00:34:37.150
just Erie subliminal. Like it
just, there's something really wrong

585
00:34:37.150 --> 00:34:40.660
with it. And that, that
typeface, it was pretty effective.

586
00:34:41.890 --> 00:34:44.230
I doing that. So, yeah,
I dunno. I kinda like

587
00:34:44.240 --> 00:34:48.430
to play with stuff like
that. I was incredibly girly

588
00:34:48.460 --> 00:34:52.390
as a kid, like always
wore frilly dresses and stuff

589
00:34:52.390 --> 00:34:56.260
like that, but I was
also tomboy and collected baseball

590
00:34:56.260 --> 00:34:57.850
cards and things like that.
But I always like to

591
00:34:57.850 --> 00:35:01.090
play with that aspect of
my childhood, where kind of

592
00:35:01.120 --> 00:35:05.170
mix and matching the really
girly stuff and the sort

593
00:35:05.170 --> 00:35:09.280
of more boyish stuff. And
I'm a big fan of

594
00:35:09.280 --> 00:35:12.100
Barbie and hello, kitty and
all of that stuff. So

595
00:35:12.100 --> 00:35:14.860
I like to play with
that a lot. I guess

596
00:35:14.860 --> 00:35:18.820
one of my famous hacks
was putting hello kitty into

597
00:35:18.820 --> 00:35:25.510
super Mario brothers and, and
making the whole world what's

598
00:35:25.510 --> 00:35:29.800
that yet replacing Mario with,
with hello, kitty and, you

599
00:35:29.800 --> 00:35:34.270
know, just making everything really
cute. I also made kitty

600
00:35:34.270 --> 00:35:39.960
jump really high. I did
this one in high school.

601
00:35:39.960 --> 00:35:44.100
It was my first rom
hack and she, she can

602
00:35:44.100 --> 00:35:47.220
jump very, very high, so
she can actually jump over

603
00:35:47.610 --> 00:35:51.180
the flagpole at the end
of the level, which if

604
00:35:51.180 --> 00:35:55.800
you do that and you
walk past the flagpole, you

605
00:35:55.800 --> 00:35:59.340
can't walk backwards in that
game. So you're just eternally

606
00:35:59.340 --> 00:36:02.760
stuck in the screen until
time runs out and you

607
00:36:02.760 --> 00:36:07.550
die. Cool. Well, one thing
we didn't get a chance

608
00:36:07.550 --> 00:36:10.430
to talk about, but people
can go and explore is

609
00:36:10.430 --> 00:36:15.440
your kind of now legendary
connected NES a hack where

610
00:36:15.440 --> 00:36:18.950
you basically built a Twitter
client for NES. And it

611
00:36:18.950 --> 00:36:21.500
was a, a wireless modem
that connected in any S

612
00:36:21.500 --> 00:36:24.140
to the internet. It was
really, really clever. And it

613
00:36:24.140 --> 00:36:26.450
was also a talk that
you gave at Oz con

614
00:36:26.450 --> 00:36:29.300
the opensource conference. That's right?
Yes. Please check it out.

615
00:36:29.300 --> 00:36:31.880
It's all on GitHub. Yeah.
So I'm going to go

616
00:36:31.880 --> 00:36:34.400
ahead and put links in
the show notes to your

617
00:36:34.400 --> 00:36:38.150
get hub, which is H
X, L N T. And

618
00:36:38.390 --> 00:36:41.000
people can explore that. And
some of your videos on,

619
00:36:41.270 --> 00:36:44.000
on channel nine and check
out your coat and hopefully

620
00:36:44.030 --> 00:36:48.740
become new any S rom
hackers and developers. Thanks so

621
00:36:48.740 --> 00:36:50.750
much for chatting with me
today. Thank you for having

622
00:36:50.750 --> 00:36:53.930
me. This has been another
episode of Hanselminutes and we'll

623
00:36:53.930 --> 00:36:55.100
see you again next week.

