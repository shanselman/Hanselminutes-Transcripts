WEBVTT FILE

1
00:00:12.180 --> 00:00:16.410
From Hanselman is.com. It's Hansel
minutes. Oh, look the discussion

2
00:00:16.410 --> 00:00:19.830
with web developer and technologists,
Scott Hanselman hosted by call

3
00:00:19.830 --> 00:00:24.390
Franklin. This is Lawrence Ryan announcement
show number 11, quoted Sunday,

4
00:00:24.420 --> 00:00:29.760
March 19th, 2006 sport for Hanselman it's
just provided by automated QA

5
00:00:29.850 --> 00:00:34.740
makers of TestComplete providing automated
testing of windows.net framework, Java

6
00:00:35.010 --> 00:00:43.350
and web application online@wwwdotautomatedqa.com. And
by Peter bloom.com start with

7
00:00:43.350 --> 00:00:53.040
better controls. Finish with better
sites online@wwwdotpeterblum.com. Support is also

8
00:00:53.040 --> 00:00:56.430
provided by dotnet developers journal.
The world's leading dotnet developer

9
00:00:56.430 --> 00:01:02.580
magazine online at www dot
<inaudible> dot com. In this

10
00:01:02.580 --> 00:01:07.140
episode, Scott explores the Microsoft
command shell code name. Monad.

11
00:01:09.810 --> 00:01:12.750
Hi, this is Carl Franklin and
you're listening to Hansel minutes.

12
00:01:12.780 --> 00:01:16.020
Show number 11 as always.
I'm here with Scott Hanselman

13
00:01:16.020 --> 00:01:20.100
and this week, Scott, we're
talking about the monad shell,

14
00:01:20.250 --> 00:01:24.570
right? The Microsoft command shell
code named monad. I like

15
00:01:24.570 --> 00:01:27.540
to call it mush, but
apparently no one else does.

16
00:01:27.540 --> 00:01:30.450
So, but it's MSH. It's
the Microsoft command show. I

17
00:01:30.450 --> 00:01:32.760
find it kind of strange
that we're talking about a

18
00:01:32.880 --> 00:01:38.220
cryptic and terse UI on
a podcast. Sorta. Definitely think

19
00:01:38.220 --> 00:01:41.160
the podcast medium is not
lending itself to describing command

20
00:01:41.160 --> 00:01:43.440
lines, but we're going to
take it to the next

21
00:01:43.440 --> 00:01:45.270
level though. We're gonna, yeah,
we're going to do a

22
00:01:45.270 --> 00:01:48.120
show on this on DNR
TV. Definitely. So what is

23
00:01:48.120 --> 00:01:51.450
the Microsoft command shell? So,
so the Microsoft command shell

24
00:01:51.570 --> 00:01:55.890
again, Kona, codenamed monad is
a command line interface. It's

25
00:01:55.890 --> 00:01:58.230
the new command line interface.
You know, if you go

26
00:01:58.230 --> 00:02:01.170
out to windows now and
type the Vista, well, no,

27
00:02:01.170 --> 00:02:05.430
not for Vista for windows,
XP windows 2003 Vista and

28
00:02:05.430 --> 00:02:09.420
Longhorn shirt. I see. So
I'm running MSH right now

29
00:02:09.420 --> 00:02:12.030
on my machine. It's like
a very small download. All

30
00:02:12.030 --> 00:02:14.880
you need is.net framework to
Oh, okay. It doesn't take

31
00:02:14.880 --> 00:02:17.280
over anything on your system.
It doesn't mess up your

32
00:02:17.280 --> 00:02:23.490
dos prompt. They just released
on February 27th, beta 3.1 of

33
00:02:24.780 --> 00:02:27.180
of monad. You can, if
you, if you're running gun

34
00:02:27.180 --> 00:02:29.100
and framework, you can run
this right now. That's good

35
00:02:29.100 --> 00:02:31.260
to know because I was
under the impression that it

36
00:02:31.260 --> 00:02:35.280
was a Vista only thing
know that the show will

37
00:02:35.280 --> 00:02:39.630
run on XP 2003 Vista,
which is the client Longhorn

38
00:02:39.630 --> 00:02:42.990
and then the coming Longhorn
server, but a windows XP

39
00:02:42.990 --> 00:02:44.850
and windows 2003 is all,
all the, you need to

40
00:02:44.850 --> 00:02:46.650
know right now, if you're
running Dutton at two O

41
00:02:46.680 --> 00:02:48.930
you can just install mush
on top of it or

42
00:02:48.930 --> 00:02:52.350
MSH on top of it.
Excellent. So, so let's get

43
00:02:52.350 --> 00:02:55.380
started with the, with the
links and in the discussion.

44
00:02:56.190 --> 00:02:59.710
So I, I had seen
this myself at PDC. I

45
00:02:59.710 --> 00:03:01.840
think we all had, we
kind of went to the

46
00:03:01.840 --> 00:03:06.220
talks. We saw this cryptic
and confusing thing. It says,

47
00:03:06.250 --> 00:03:09.790
Oh, it's the new dos
prompt, which is really in

48
00:03:09.790 --> 00:03:12.760
a way, way over simplification.
And, and I kind of

49
00:03:12.760 --> 00:03:15.460
said, okay, yeah, this is
silly. You know, I was

50
00:03:15.460 --> 00:03:18.250
talking to storage Solaria at
my, at my company currently.

51
00:03:18.250 --> 00:03:21.280
And a couple of actually
almost a year ago when

52
00:03:21.280 --> 00:03:22.900
I first saw this and
he was like, Oh, this

53
00:03:22.900 --> 00:03:24.310
is it. This is where
it's going. And I was

54
00:03:24.310 --> 00:03:26.830
like, no, I'm just totally
not impressed. Yeah. And then

55
00:03:27.010 --> 00:03:32.740
I posted something on my
blog about getting actually enclosures

56
00:03:33.010 --> 00:03:35.830
for you, Carl. We want
it to go up and

57
00:03:35.830 --> 00:03:38.050
make a little script that
would, that would pick up

58
00:03:38.050 --> 00:03:41.980
an enclosure from an RSS
feed. And I banged it

59
00:03:41.980 --> 00:03:45.310
out in C sharp, and
you converted it to a

60
00:03:46.120 --> 00:03:49.270
vb.net. And it was maybe
what 12 lines of code

61
00:03:49.330 --> 00:03:51.580
and not too long, not
too big, not too long,

62
00:03:51.610 --> 00:03:55.510
12 lines of code. And
then out of nowhere, Keith Hill

63
00:03:55.540 --> 00:03:58.210
who's got, who was actually
the MVP for the command

64
00:03:58.210 --> 00:04:01.210
shell. So command shells have
MVPs. Now this guy, is

65
00:04:01.210 --> 00:04:03.340
that very cool, good at
what he does. It's pretty

66
00:04:03.340 --> 00:04:08.590
awesome. Keith Hill at a shrinker.com/d
five eight says, well, you

67
00:04:08.590 --> 00:04:09.970
know, you could have just
done that at the command

68
00:04:09.970 --> 00:04:12.910
line, rather than writing a
throwaway program. You could have

69
00:04:12.910 --> 00:04:15.400
just bang this out. And
he did it in three

70
00:04:15.400 --> 00:04:18.340
lines. Wow. And he probably
could have done it in

71
00:04:18.340 --> 00:04:22.870
two pretty cool stuff. So
from the command line, he

72
00:04:22.870 --> 00:04:26.950
just fires up MSH and
he types in dollar sign

73
00:04:27.010 --> 00:04:30.520
Earl. That's how you declare
a variable within the command

74
00:04:30.520 --> 00:04:32.380
line. So you're out there
at the command line. You're

75
00:04:32.380 --> 00:04:36.070
just creating a variable. It's
almost like an interactive dotnet

76
00:04:36.070 --> 00:04:39.850
shell, just like Ruby. People
are familiar with the IRB,

77
00:04:39.850 --> 00:04:43.060
the interactive Ruby shell. You
can just sit down, fire

78
00:04:43.060 --> 00:04:45.580
it up. You just type
dollar sign, Earl equals quote.

79
00:04:45.580 --> 00:04:47.140
And they typed in, I
typed in the Earl to

80
00:04:47.140 --> 00:04:52.150
my blog enter. So now
that dollar sign Earl variable

81
00:04:52.150 --> 00:04:55.540
exists out there. And then
monad MSH is going to

82
00:04:55.540 --> 00:04:58.720
know that that's a string.
It just gleans it. Right.

83
00:04:58.840 --> 00:05:01.120
It uses, it looks like
a duck it's duck typing.

84
00:05:01.930 --> 00:05:04.570
So it figures out that
Earl has a string and

85
00:05:04.570 --> 00:05:07.300
that's in the environment now
it's available to us to

86
00:05:07.300 --> 00:05:10.510
be used. So then he
says, dollar sign feed. So

87
00:05:10.510 --> 00:05:13.210
he's going to actually get
the feed from my RSS.

88
00:05:13.870 --> 00:05:17.200
And he says, new hyphen
object. So that's a called

89
00:05:17.200 --> 00:05:21.550
a commandlet and they're always
verb noun, like, get hyphen

90
00:05:21.560 --> 00:05:24.460
this, or add hyphen that
in this case, he's saying

91
00:05:24.460 --> 00:05:27.160
new hyphen or that you
know that these two things

92
00:05:27.160 --> 00:05:31.060
are associated. Right. And they're
very picky about that within

93
00:05:31.060 --> 00:05:33.460
the shell. If you're going
to create these new commandlets

94
00:05:33.460 --> 00:05:37.270
and commandlets is spelled CMD,
L E T S commandlet

95
00:05:37.300 --> 00:05:40.960
CMD lit. Okay. You could
create them with this verb

96
00:05:40.990 --> 00:05:45.880
noun construct. So he says
new object system.net dot web

97
00:05:45.880 --> 00:05:47.950
client, which we've created before.
Right. You just make a

98
00:05:47.950 --> 00:05:53.020
new web client, right. And
then says, download string.download string.

99
00:05:53.050 --> 00:05:56.470
Now he doesn't have any
IntelliSense inside of a NSH

100
00:05:56.710 --> 00:05:58.400
right now. It's just a
command line. So you do

101
00:05:58.400 --> 00:06:00.290
have to know what you're
doing a little bit more

102
00:06:00.290 --> 00:06:03.140
than visual studio. This is
not visual studio. It's an

103
00:06:03.140 --> 00:06:07.880
interactive shell. And then he
says, dot download string passes

104
00:06:07.880 --> 00:06:10.520
in Earl. That RSSV, that
he mentioned before. And this

105
00:06:10.520 --> 00:06:13.550
is the cool part. Then
he says in brackets and

106
00:06:13.550 --> 00:06:17.900
square brackets at the beginning
of the string bracket XML.

107
00:06:17.900 --> 00:06:20.120
So he's basically doing like
a cast, like a cast,

108
00:06:20.120 --> 00:06:22.220
the XML. Yeah. Yeah. But
not quite a cast. It's

109
00:06:22.220 --> 00:06:24.470
something more than that. It's
almost like he's saying treat

110
00:06:24.470 --> 00:06:27.770
this like XML. He could
have just left it and

111
00:06:27.770 --> 00:06:30.170
it would have been a
string. Okay. So now he's

112
00:06:30.170 --> 00:06:32.450
done two lines. He's set
in a row. He set

113
00:06:32.450 --> 00:06:37.520
a feed and he's automatically
downloaded my entire RSS feed.

114
00:06:38.000 --> 00:06:39.770
And then he just goes,
and he says, feed dot

115
00:06:39.800 --> 00:06:42.890
gala, get elements by tag
name. We've done that before,

116
00:06:42.890 --> 00:06:45.320
right? Yeah. Cause feed at
this point is an XML

117
00:06:45.320 --> 00:06:48.650
document by casting it to
XML, he's getting all of

118
00:06:48.650 --> 00:06:51.170
the XML document methods available
to him. He says, get,

119
00:06:51.290 --> 00:06:54.110
get elements by tag name
enclosure. And this is the

120
00:06:54.110 --> 00:06:58.010
powerful part. Then he does
a pipe. You've done pipes

121
00:06:58.010 --> 00:07:01.700
before. Right. Dos. You could
say like, if you wanted

122
00:07:01.700 --> 00:07:03.740
to find out all of
the things in the GAC

123
00:07:04.040 --> 00:07:05.690
that have your name in
them, right. I'm sure you

124
00:07:05.690 --> 00:07:07.940
put things in the gag.
When you write a.net application,

125
00:07:08.300 --> 00:07:12.890
you might say GAC utill
slash L for list. And

126
00:07:12.890 --> 00:07:15.380
then you'd pipe it through
find and say, find all

127
00:07:15.380 --> 00:07:17.540
the things that have the
word. Carl use the output

128
00:07:17.540 --> 00:07:21.020
of that as the input
to find exactly. Cause the,

129
00:07:21.080 --> 00:07:22.760
and what is the output
of GAC Utila in that

130
00:07:22.760 --> 00:07:25.910
context, it's just a string,
right? It's a, it's just

131
00:07:25.910 --> 00:07:28.160
a big it's whatever was
going out to the screen

132
00:07:28.580 --> 00:07:30.410
and then find us kind
of a filter on that.

133
00:07:31.010 --> 00:07:33.800
Wow. Well, in monad you're
not passing strings around you're

134
00:07:33.800 --> 00:07:38.420
passing objects around, and this
is where the complete explosion

135
00:07:38.420 --> 00:07:41.960
of the brain happens. Get
elements by tag name returns

136
00:07:41.960 --> 00:07:47.180
on node list, right? It
doesn't return strings. And then

137
00:07:47.180 --> 00:07:49.700
he pipes it through a
thing called format list. This

138
00:07:49.700 --> 00:07:51.230
is a thing that knows
how to take objects and

139
00:07:51.230 --> 00:07:53.300
format them. So he says,
get out of mounts by

140
00:07:53.300 --> 00:07:57.440
tag name, pipe format list.
He could say format table.

141
00:07:57.980 --> 00:08:01.910
I've seen those format, HTML
format, XML, he's passing objects

142
00:08:01.910 --> 00:08:05.180
out of the backside of
get elements by tag name.

143
00:08:05.240 --> 00:08:07.280
And he could pipe the
HTML to a, to an

144
00:08:07.280 --> 00:08:10.550
HTML file and he'd have
the results. Exactly. And you

145
00:08:10.550 --> 00:08:12.260
could redirect it to a
file and you've written stuff

146
00:08:12.290 --> 00:08:15.440
out. And the interesting thing
here is that format list

147
00:08:15.500 --> 00:08:19.340
in this context is just
receiving the pipe content format

148
00:08:19.340 --> 00:08:21.890
list. Doesn't care that it's
XML doesn't know anything. It

149
00:08:21.890 --> 00:08:24.140
can handle any kind of
object. Right. So I could

150
00:08:24.140 --> 00:08:29.090
have said DIR pipe format
list, and I would be

151
00:08:29.090 --> 00:08:31.700
able to see the directory
as a format formatted list.

152
00:08:31.880 --> 00:08:34.160
We'll talk about that in
a second. So three lines

153
00:08:34.160 --> 00:08:36.320
of code and he could
have done it in two.

154
00:08:36.320 --> 00:08:38.030
If he wanted to be
really terse and he probably

155
00:08:38.030 --> 00:08:40.850
could have strung it all
together into one big, giant

156
00:08:40.880 --> 00:08:43.520
single line of code. Wow.
This is really powerful. It

157
00:08:43.520 --> 00:08:46.430
takes a second. And then
once your brain explodes, it's

158
00:08:46.430 --> 00:08:48.260
like, Oh my God, I
could do so much with

159
00:08:48.260 --> 00:08:52.130
this. Let's just pause for
the mental imprint. And then

160
00:08:52.130 --> 00:08:53.690
wait a second. We're not
supposed to waste people's time

161
00:08:53.690 --> 00:08:56.340
on this podcast to very
bright. So you'll Have to

162
00:08:56.340 --> 00:08:58.650
pause it yourself and then
come back. Well, the annual

163
00:08:58.650 --> 00:09:01.400
fund Pause that way. It's
your time. Not ours. Pretty

164
00:09:01.400 --> 00:09:03.710
amazing. I mean, what I'm
thinking of now is of

165
00:09:03.710 --> 00:09:07.010
course, you know, scripts, you
know, writing scripts to do

166
00:09:07.010 --> 00:09:09.710
things that you would normally
do to write little programs

167
00:09:09.710 --> 00:09:13.460
for, of course, you know,
that it begs the question.

168
00:09:14.300 --> 00:09:17.690
How much do you do
with this versus, you know,

169
00:09:17.900 --> 00:09:19.460
at what point do you
say, I'm just going to

170
00:09:19.460 --> 00:09:21.290
write it out. So that's
a very good question. What

171
00:09:21.290 --> 00:09:23.150
is an app and what
is a script and what

172
00:09:23.160 --> 00:09:25.670
I, what I'm thinking is
let's ask the hard question

173
00:09:25.670 --> 00:09:28.280
that many people are asking
already, why isn't VB script

174
00:09:28.280 --> 00:09:31.340
enough. Right. Right. Sure. Why
can't I just type a

175
00:09:31.340 --> 00:09:35.540
dot VBS file and beyond
with it, right? Yeah. So

176
00:09:35.660 --> 00:09:38.480
with, with VB script, you're,
you're looking at a comm

177
00:09:38.600 --> 00:09:42.950
style language. You've got all
of the, the frustrations of

178
00:09:42.950 --> 00:09:47.990
comm calling.net applications. And dotnet
componentry is pretty tricky. I

179
00:09:47.990 --> 00:09:51.230
would think from within C
script or w script dot

180
00:09:51.230 --> 00:09:56.510
exe, you don't have a
lot of rich error handling

181
00:09:56.510 --> 00:10:00.230
all the great things that
there are about.net, very limited

182
00:10:00.230 --> 00:10:02.210
memory management. You still have
to set things equal to

183
00:10:02.210 --> 00:10:05.210
nothing you're poking around in
calm a lot. You don't

184
00:10:05.210 --> 00:10:09.140
have any security model around
dot VBS is right. It's

185
00:10:09.140 --> 00:10:11.660
pretty much I can run
them or I can't. I

186
00:10:11.660 --> 00:10:14.420
know I can't email them.
And, but I can pretty

187
00:10:14.420 --> 00:10:16.280
much double click on them
anytime I want to. So

188
00:10:16.280 --> 00:10:18.590
you're saying that there's a
security model we haven't even

189
00:10:19.370 --> 00:10:22.100
talked about. Yeah. This is
the fantastic thing. So the

190
00:10:22.100 --> 00:10:23.870
first thing I did when
I sat down with monad

191
00:10:23.870 --> 00:10:26.930
is I looked at Keith's
a little three lines of

192
00:10:26.930 --> 00:10:30.440
code, and I put them
into a file called food

193
00:10:30.440 --> 00:10:33.110
dot MSH. And I tried
to run it. And by

194
00:10:33.110 --> 00:10:37.700
the way, the, this Keith
Hill's blog page is filled

195
00:10:37.700 --> 00:10:40.460
with code. It's not just
one point or two, a

196
00:10:40.460 --> 00:10:42.890
three line code thing that
Scott is bringing here to

197
00:10:43.250 --> 00:10:46.010
this guy is a, he
spends a lot of time

198
00:10:46.010 --> 00:10:48.800
with monad it's obvious. Yeah.
I would like to find

199
00:10:48.800 --> 00:10:50.120
out how he has a
job that lets him do

200
00:10:50.120 --> 00:10:52.520
all this great stuff. Cause
he just has it. His

201
00:10:52.520 --> 00:10:55.730
site, his site is basically
50 pages of sample code

202
00:10:55.730 --> 00:10:58.460
with a sentence here and
there. It's really amazing what

203
00:10:58.460 --> 00:11:03.050
he's doing. You get to
know this guy. So there's

204
00:11:03.050 --> 00:11:05.090
a security model. When I
tried to run my own

205
00:11:05.090 --> 00:11:07.940
first time MSH script, I
was told, well, you're not

206
00:11:07.940 --> 00:11:12.200
allowed to run scripts. Monad
comes, locked down. So you

207
00:11:12.200 --> 00:11:15.050
have to go into the
registry or do make some

208
00:11:15.050 --> 00:11:17.540
settings from within Mona and
actually decide, what is your

209
00:11:17.540 --> 00:11:22.040
execution policy? I set mine
to what's called remote signed,

210
00:11:22.040 --> 00:11:25.760
basically saying that I can
only run remote files, files

211
00:11:25.760 --> 00:11:28.130
that came down from the
internet if they have been

212
00:11:28.130 --> 00:11:33.200
signed. So you can actually
digitally sign your scripts and

213
00:11:33.200 --> 00:11:37.880
plug them into a MSH.
Okay. That kind of flexibility.

214
00:11:37.880 --> 00:11:41.450
Doesn't it doesn't really exist
in the VB script world.

215
00:11:41.630 --> 00:11:45.140
Yeah, exactly. And, and what's,
you know, you've always had

216
00:11:45.140 --> 00:11:48.650
the question of whether I
should make a script or

217
00:11:48.650 --> 00:11:52.280
whether I should make a,
you know, a console application.

218
00:11:52.870 --> 00:11:55.720
So that's nothing new, but
I guess what is new

219
00:11:55.720 --> 00:11:58.090
is that man, there's so
much, there's so much more

220
00:11:58.090 --> 00:12:02.430
available now at the script
level with monad That's it.

221
00:12:02.430 --> 00:12:05.280
If you think about what
you just said, you said,

222
00:12:05.640 --> 00:12:07.260
do I make a script
that's kind of in your

223
00:12:07.260 --> 00:12:09.750
left hand? Or do I
write a program in my

224
00:12:09.780 --> 00:12:13.110
right hand? And there's really
no formalization. It's either <inaudible>

225
00:12:13.140 --> 00:12:16.530
thingy or dot VBS thingy
and there's really no middle

226
00:12:16.530 --> 00:12:18.480
place or you divide divided
up. So what would you

227
00:12:18.480 --> 00:12:20.880
divide it up into? Well,
you'd make a console app

228
00:12:20.880 --> 00:12:22.830
that does the real work.
And then you would call

229
00:12:22.830 --> 00:12:26.130
that with a script, just
passing parameters in Exactly. And

230
00:12:26.130 --> 00:12:28.380
you pass the parameters on
the command line via some

231
00:12:28.380 --> 00:12:31.980
strings, right? So there's a
certain kind of MacGyver ESC

232
00:12:33.060 --> 00:12:37.140
operation strategy between these scripts.
And these executable is you

233
00:12:37.140 --> 00:12:39.450
kind of have this kind
of Rube Goldberg and thing.

234
00:12:39.450 --> 00:12:42.480
You string together where this
guy writes to attempt file

235
00:12:42.480 --> 00:12:45.930
and that guy opens the
file and the integration is

236
00:12:45.930 --> 00:12:51.060
always strings. So extending monad
is there's actually four ways

237
00:12:51.060 --> 00:12:53.400
instead of just the two
we've described in the old

238
00:12:53.400 --> 00:12:55.650
and the old guard and
the old world where you

239
00:12:55.650 --> 00:12:58.410
have scripts or you have
executable with monad, you can

240
00:12:58.410 --> 00:13:01.080
make scripts. So you can
just make a text file

241
00:13:01.650 --> 00:13:05.430
string together, a bunch of
commands allow execution of those

242
00:13:05.430 --> 00:13:08.160
commands and then run it
that's number one. Number two

243
00:13:08.160 --> 00:13:10.980
is a thing called the
commandlet CMD. Let's these are

244
00:13:10.980 --> 00:13:15.150
tiny dotnet classes. So you
can write these in.net. You

245
00:13:15.150 --> 00:13:20.010
could write in VB a
commandlet that says, I don't

246
00:13:20.010 --> 00:13:23.160
know, add hyphen podcast. And
that would go up and

247
00:13:23.490 --> 00:13:26.190
do whatever it needed to
do and update podcasts to

248
00:13:26.190 --> 00:13:29.810
the, the car Franklin site,
right? So that's a command

249
00:13:29.870 --> 00:13:33.270
tiny.net class that becomes a
command. Then you can have

250
00:13:33.270 --> 00:13:37.500
a snap in a MSH
snap, and these are assemblies

251
00:13:37.530 --> 00:13:40.740
containing a whole series of
commandlets and then you can

252
00:13:40.740 --> 00:13:43.710
load them at startup time.
So you could have a

253
00:13:44.130 --> 00:13:48.360
Carl Franklin podcast console where you
load up the, the command

254
00:13:48.360 --> 00:13:51.180
console for what you do.
And you might have three,

255
00:13:51.180 --> 00:13:54.270
four or five different command
consoles, one for this and

256
00:13:54.270 --> 00:13:57.420
one for that. And then
the third one, which we

257
00:13:57.420 --> 00:14:00.180
haven't talked about yet are
providers. And these are dotnet

258
00:14:00.180 --> 00:14:05.790
classes that expose data as
almost as a drive. So

259
00:14:05.910 --> 00:14:07.680
from the command line, you
know, you, you launch it

260
00:14:07.680 --> 00:14:09.570
up and it looks just
like you're at a dos

261
00:14:09.600 --> 00:14:11.520
prompt and you can type
DIR and you can type

262
00:14:11.520 --> 00:14:14.250
CD and move around. But
I'm sitting at the command

263
00:14:14.250 --> 00:14:17.040
line here and I can
see, see colon, whatnot. I'm

264
00:14:17.040 --> 00:14:21.060
going to type CD H
K L M colon. So

265
00:14:21.060 --> 00:14:25.350
now instead of C colon
backslash, my prompt says, HK,

266
00:14:25.350 --> 00:14:29.280
LM, colon backslash, what do
you think? H KLM The

267
00:14:29.280 --> 00:14:33.060
local machine key and the
registry I've just changed dirt

268
00:14:33.630 --> 00:14:36.840
into the registry. Wow. And
I type DIR, and I'm

269
00:14:36.840 --> 00:14:43.230
looking at hardware, software system,
CD software slash Microsoft slash

270
00:14:43.230 --> 00:14:47.040
windows. Now I'm actually inside
the registry because what is

271
00:14:47.040 --> 00:14:49.590
the command prompt? Right. It's
just a lie. It's just

272
00:14:49.590 --> 00:14:53.750
as sure facia on top
of stuff. So these providers,

273
00:14:53.750 --> 00:14:58.040
these MSH providers let you
change her into the file

274
00:14:58.040 --> 00:15:01.100
system. Of course. So it
looks like dos, but also

275
00:15:01.100 --> 00:15:04.670
into the registry, into the
environment. So I can actually

276
00:15:04.670 --> 00:15:06.650
say C, D E N
V. Colon. And I can

277
00:15:06.650 --> 00:15:10.460
look at my environment variables
and manipulate them. Huh? There

278
00:15:10.460 --> 00:15:15.200
are, I think, eight different
providers that come with MSH,

279
00:15:16.490 --> 00:15:19.760
but you can go and
get code for one that

280
00:15:19.760 --> 00:15:23.900
is a visual source, safe
provider. It's a, it's very

281
00:15:23.900 --> 00:15:26.450
much sample code. It's just
an example. It's not quite

282
00:15:26.450 --> 00:15:32.600
ready yet. It's at a
shrink, stir.com/ <inaudible>. It's not

283
00:15:32.900 --> 00:15:36.260
as complicated as you would
think. It's actually, it's pretty

284
00:15:36.260 --> 00:15:37.550
scary because it looks like
it's got a lot of

285
00:15:37.550 --> 00:15:41.990
pages, but a lot of
it is a comments. This

286
00:15:41.990 --> 00:15:45.050
is a really interesting thing.
This is a provider again,

287
00:15:45.050 --> 00:15:49.970
not updated for the newest
release, but you could type

288
00:15:49.970 --> 00:15:54.050
CD VSS colon, and then
you'd be floating around inside

289
00:15:54.050 --> 00:15:57.620
a visual source safe. Wow.
So think of the other

290
00:15:57.620 --> 00:16:01.340
thing you might want to
CD into a outlook email

291
00:16:01.340 --> 00:16:05.540
file, right? What are all
these different places you might

292
00:16:05.540 --> 00:16:10.460
want to explore as data
in that familiar, hierarchical way

293
00:16:10.460 --> 00:16:13.010
that the Dodge prompt gives
you? And then when you

294
00:16:13.010 --> 00:16:15.890
write your scripts that act
on this data, they can

295
00:16:15.890 --> 00:16:19.370
act on it using these
same commands that we're used

296
00:16:19.370 --> 00:16:21.500
to using. And Scott, I
just want to remind the

297
00:16:21.500 --> 00:16:24.470
listeners at this time that
a Hanselman it's would not

298
00:16:24.470 --> 00:16:28.160
be possible without the generous
support from our sponsors. And

299
00:16:28.160 --> 00:16:31.460
one of those sponsors is
automated QA, and they make

300
00:16:31.460 --> 00:16:35.090
a product called TestComplete, which
is just a complete solution

301
00:16:35.090 --> 00:16:39.380
for testing in.net. And it's
great stuff. We love it.

302
00:16:39.410 --> 00:16:42.050
And that's why they're a
sponsor. And so if you

303
00:16:42.060 --> 00:16:46.700
please do us a favor
and check out their site@automatedqa.com

304
00:16:46.970 --> 00:16:48.950
and also let them know
that you heard about them

305
00:16:48.950 --> 00:16:51.770
on Hansel minutes, that will
help believe it or not

306
00:16:51.830 --> 00:17:08.470
keep this show on the
air. Hey, let's get back

307
00:17:08.470 --> 00:17:12.940
to this object being the,
you know, the basic thing

308
00:17:12.940 --> 00:17:15.580
that you pass around because,
you know, when you said

309
00:17:15.580 --> 00:17:17.410
that and you said, this
is where the brain thing

310
00:17:17.410 --> 00:17:20.170
happens, I think it's just
beginning to happen with me.

311
00:17:20.170 --> 00:17:21.910
And so I want to
revisit it to make sure

312
00:17:21.910 --> 00:17:25.900
that, that everybody understands this,
you know, you said is

313
00:17:25.900 --> 00:17:29.650
that when you have scripts
and command line programs, console

314
00:17:29.650 --> 00:17:32.980
applications, now the string is
sort of the defacto standard

315
00:17:32.980 --> 00:17:35.230
piece of data that you
pass in and out, and

316
00:17:35.230 --> 00:17:38.860
now you can use objects.
So you know, that it

317
00:17:38.860 --> 00:17:42.520
just is mind blowing. It
really, it really is because

318
00:17:42.520 --> 00:17:44.650
what you can do is
at any point in your

319
00:17:44.770 --> 00:17:47.890
application where you have an
object, you can just drop

320
00:17:47.890 --> 00:17:51.180
into a, you know, a
console App that you've written

321
00:17:51.180 --> 00:17:56.310
with. Monad a script pass
that object in already completely

322
00:17:56.310 --> 00:18:01.350
jelled without having to do
any serialization, blah, blah, blah.

323
00:18:01.650 --> 00:18:04.530
And now your console app
in monad has access to

324
00:18:04.530 --> 00:18:08.100
that object and it can
pass it to other things.

325
00:18:08.340 --> 00:18:11.460
I mean, that's just, that's
just that's that is mind

326
00:18:11.460 --> 00:18:14.720
blowing. Yeah, there are, there
are some certain <inaudible> about

327
00:18:14.720 --> 00:18:18.230
making your objects and assemblies
available, but all the different

328
00:18:18.230 --> 00:18:21.170
objects, whether they be.net or
comm that you have available

329
00:18:21.170 --> 00:18:23.570
in the system already can
be used. Like if you

330
00:18:23.570 --> 00:18:28.130
look at shrink, stir.com/ <inaudible>,
a guy says from the

331
00:18:28.130 --> 00:18:30.740
command line in one line,
he says new object, new

332
00:18:30.740 --> 00:18:33.650
hyphen object. And he says,
hyphen comms, he has to

333
00:18:33.650 --> 00:18:35.690
let, let monad know that
he's going to be using

334
00:18:35.690 --> 00:18:39.710
a calm object. She says,
new object, calm quote, shell

335
00:18:39.710 --> 00:18:44.930
dot application. That's a calm
Prague ID. Then he says.windows

336
00:18:45.980 --> 00:18:49.340
and pulls out the windows
collection of shell, that application,

337
00:18:49.850 --> 00:18:53.420
and then hits enter and
gets a list of all

338
00:18:53.420 --> 00:18:58.790
of the currently open internet
Explorer windows. Wow. Right? So

339
00:18:58.790 --> 00:19:00.710
this is just an object
out there. That's always had

340
00:19:00.710 --> 00:19:04.130
that information. You could do
this in visual studio. You

341
00:19:04.130 --> 00:19:07.730
could do this in VB
script, but he's just being

342
00:19:08.000 --> 00:19:11.420
able to access that information
in a very terse, but

343
00:19:11.420 --> 00:19:15.590
very clear format within monad
in a single line. Then

344
00:19:15.590 --> 00:19:18.200
here's the powerful part. Then
he says pipe and he

345
00:19:18.200 --> 00:19:20.600
pipes it through select select
is another one of those

346
00:19:20.600 --> 00:19:22.880
commands. It's just out there
floating around one of the

347
00:19:22.880 --> 00:19:26.900
builtin commandlets and he says,
select new location, name, location,

348
00:19:26.930 --> 00:19:30.290
Earl. So select doesn't know
anything about this comm object.

349
00:19:30.290 --> 00:19:33.050
It just knows that data's
coming in kind of like

350
00:19:33.050 --> 00:19:35.630
a, like a hash table
almost right. And it's going

351
00:19:35.630 --> 00:19:38.750
to use basically reflection to
show just the location and

352
00:19:38.750 --> 00:19:41.000
the location. And he did
this all in one line.

353
00:19:43.160 --> 00:19:46.130
It's fantastic. Now, getting, getting
back to this office, you

354
00:19:46.130 --> 00:19:47.930
brought up a fantastic point.
When I go out to

355
00:19:47.930 --> 00:19:50.330
the command line in MSH
for the first time and

356
00:19:50.330 --> 00:19:54.110
I type DIR, and I
see a directory, that's there

357
00:19:54.110 --> 00:19:58.400
to make you feel comfortable.
DIR doesn't really exist. If

358
00:19:58.400 --> 00:20:02.240
I type alias space DIR
and hit enter. I see

359
00:20:02.240 --> 00:20:05.660
that DIR is a lie.
It's an alias. It really

360
00:20:05.660 --> 00:20:09.910
is get child item, get
hyphen child items. So DIR

361
00:20:09.930 --> 00:20:12.560
doesn't really do what I
thought it was. So if

362
00:20:12.560 --> 00:20:15.290
DIR was a lie, what
else is a lie? Well,

363
00:20:15.380 --> 00:20:18.980
see, CD, if I type
alias space CD changed her,

364
00:20:19.280 --> 00:20:23.270
it's actually set hyphen location.
All the commands that we're

365
00:20:23.270 --> 00:20:26.930
used to using in the
dos prompt are there, but

366
00:20:27.140 --> 00:20:34.040
they're being exposed and redirected
to existing commandlets. So when

367
00:20:34.040 --> 00:20:37.130
I'm typing, DIR, I'm really
saying get child item when

368
00:20:37.130 --> 00:20:41.480
I type like type or,
or cat that you would

369
00:20:41.480 --> 00:20:43.670
type in Unix to say
type this file to the

370
00:20:43.670 --> 00:20:49.960
screen, that's actually calling the
commandlet called get. Now that

371
00:20:49.960 --> 00:20:53.230
means that DIR just calls
get child items. So then

372
00:20:53.230 --> 00:20:55.390
when you write a provider
like a visual short save

373
00:20:55.400 --> 00:20:57.670
provider, or maybe I might
want to write a dos

374
00:20:57.670 --> 00:21:01.510
blog provider where I could
CD into DAS blog files.

375
00:21:01.510 --> 00:21:05.350
I don't know that it's
so overwhelming. How many things

376
00:21:05.350 --> 00:21:07.630
you could do with this?
When I type DIR, I

377
00:21:07.630 --> 00:21:09.940
know it's going to work
because my provider has implemented

378
00:21:09.940 --> 00:21:13.870
the things that make, get
child item work correctly. Yeah.

379
00:21:14.680 --> 00:21:18.670
So they've actually built that
facia on Titan of making

380
00:21:19.030 --> 00:21:22.180
MSH look and act for
the most part when appropriate

381
00:21:22.180 --> 00:21:26.110
like dos, like the windows
command line, just using aliases.

382
00:21:27.310 --> 00:21:29.710
But you can use all
of these same things with

383
00:21:29.710 --> 00:21:31.840
the power of like the
new object and the select

384
00:21:31.840 --> 00:21:35.740
and whatnot. Wow. Yeah. It's,
it's pretty amazing stuff. I

385
00:21:35.740 --> 00:21:40.600
am absolutely absolutely overwhelmed. So
you're, you're a SQL guy.

386
00:21:40.600 --> 00:21:42.370
Let's, let's talk about how
you could use this to

387
00:21:42.370 --> 00:21:47.760
administer other stuff. Okay. I
wouldn't say I'm a SQL

388
00:21:47.760 --> 00:21:50.190
guy, but I use it
quite a lot. I'm no

389
00:21:50.190 --> 00:21:53.850
Kim trip though. Well, since
you know, Kim trip that

390
00:21:53.850 --> 00:21:59.400
makes you a very practical
guy, shrinks.com/d for w this

391
00:21:59.400 --> 00:22:03.300
guy has a Dan Sullivan
up at plural. Pluralsight has

392
00:22:03.330 --> 00:22:05.430
got a really great article
on how you can use

393
00:22:05.430 --> 00:22:10.350
the existing SQL management objects
or the SMO. These are

394
00:22:10.380 --> 00:22:15.300
objects that are available within
SQL server that are a

395
00:22:15.300 --> 00:22:19.920
little smarter than the SQL
command exe, where he says,

396
00:22:20.310 --> 00:22:22.440
like, say, you've got a
server called Carl. You could

397
00:22:22.440 --> 00:22:26.220
say percent Karl equals new
object. And then you're going

398
00:22:26.220 --> 00:22:27.930
to launch, you're going to
make new object and you're

399
00:22:27.930 --> 00:22:30.510
gonna make one of these
SMO objects, these SQL management

400
00:22:30.510 --> 00:22:34.080
objects. So now I've got
this variable called dollar sign.

401
00:22:34.110 --> 00:22:39.780
Carl, that actually is for
the most part, your database,

402
00:22:40.020 --> 00:22:43.920
it's really a reference to
the SMO object, but I

403
00:22:43.920 --> 00:22:46.230
can start thinking about it
as dollar sign, Carlos Carlos

404
00:22:46.230 --> 00:22:48.870
database. So then I can
say dollar sign, Carl dot

405
00:22:49.080 --> 00:22:51.660
databases and get a list
of all the databases on

406
00:22:51.660 --> 00:22:55.290
there. I can start managing
your databases from the command

407
00:22:55.290 --> 00:22:58.650
line. Wow. Now all the
same security things. And I

408
00:22:58.650 --> 00:23:00.330
need to know the password.
I mean, there's nothing about

409
00:23:00.330 --> 00:23:02.760
monad, that's going to allow
you to share your knotty

410
00:23:02.760 --> 00:23:05.460
things anymore than you already
could. Yeah. You know, that

411
00:23:05.460 --> 00:23:08.580
thought did cross my mind
before when, you know, when

412
00:23:08.580 --> 00:23:10.920
I was thinking about how
rich this is, that it

413
00:23:10.920 --> 00:23:13.080
could be a potential security
hole. And I'm very glad

414
00:23:13.080 --> 00:23:16.560
to hear that they've addressed
that. Yeah. Very, very much.

415
00:23:16.560 --> 00:23:20.370
So now, you know, you
use query analyzer, right? Yeah.

416
00:23:21.180 --> 00:23:23.670
So you go in, you
type in select star from

417
00:23:23.670 --> 00:23:26.250
authors, you hit F five
and you get kind of

418
00:23:26.250 --> 00:23:30.030
a, an interactive shell that
allows you to write sequel

419
00:23:30.030 --> 00:23:32.880
and a little bit more
flexible way. Monad is not

420
00:23:32.880 --> 00:23:35.700
very friendly for someone to
sit down and just start

421
00:23:35.700 --> 00:23:40.470
writing. It's kind of like
code rush. It's unspeakably powerful.

422
00:23:41.070 --> 00:23:44.250
But if you give up
before you make that, make

423
00:23:44.250 --> 00:23:46.370
it over that hump. Yeah.
Then you're Not going to

424
00:23:46.370 --> 00:23:48.680
get the full benefit, right.
Spend some time with it.

425
00:23:48.950 --> 00:23:54.670
Exactly. Carl prosser@trickster.com slash <inaudible>
has created a thing called

426
00:23:54.670 --> 00:23:58.270
the MSH analyzer. It is
a, he calls it a

427
00:23:58.270 --> 00:24:03.280
0.0 0.1 release, but it
is still stunningly. Fantastic. It

428
00:24:03.280 --> 00:24:06.130
is a, basically a like
query analyzer, but it's a

429
00:24:06.190 --> 00:24:10.780
query analyzer for MSH shells
when he automatically populates a

430
00:24:10.780 --> 00:24:14.770
property list to the same
kind of property toolbox that

431
00:24:14.770 --> 00:24:17.620
you see in visual studio
with the actual objects that

432
00:24:17.620 --> 00:24:19.660
get returned. Because one of
the things about monad is

433
00:24:19.660 --> 00:24:22.360
when you say DIR, you
just see what comes out

434
00:24:22.360 --> 00:24:25.360
on the screen. You don't
see what could have come

435
00:24:25.360 --> 00:24:30.070
out because DIR get child
item returns objects. Right. But

436
00:24:30.070 --> 00:24:31.770
what comes out on the
screen is what's the F

437
00:24:31.770 --> 00:24:35.410
the default formatting. Yeah. There's
all sorts of stuff I

438
00:24:35.410 --> 00:24:38.530
could've asked for. Do you
get like the two string,

439
00:24:38.800 --> 00:24:42.580
basically? You're saying Exactly, you're
getting the equivalent of two

440
00:24:42.580 --> 00:24:46.690
string. You're actually getting format
list, format, table, but there's

441
00:24:46.690 --> 00:24:49.000
all that other stuff. But
the funny you find out

442
00:24:49.270 --> 00:24:52.090
what else I can do.
Yeah. So Carl's got this

443
00:24:52.090 --> 00:24:56.800
fantastic analyzer and it's actually
a showcase for hosting these

444
00:24:56.800 --> 00:24:58.960
shells. So check this out
and it'll blow your mind.

445
00:24:59.320 --> 00:25:01.600
If you want to build
an administrative console for your

446
00:25:01.600 --> 00:25:06.580
application, you would build it
entirely with commandlets and MSH,

447
00:25:06.760 --> 00:25:10.330
get it working from the
command line. And then when

448
00:25:10.330 --> 00:25:14.260
you write your, your WinForms
application, because everyone would love

449
00:25:14.260 --> 00:25:17.590
to have both a command
line and a WinForms application,

450
00:25:17.890 --> 00:25:21.310
your wind farms application would
call the underlying stuff. So

451
00:25:21.320 --> 00:25:24.700
monad becomes your data access
layer. It's your Dao. Hm.

452
00:25:24.730 --> 00:25:28.780
For your admin. Wow. Wow.
This is why The exchange

453
00:25:28.780 --> 00:25:32.770
team is writing all this
stuff entirely in MSH. The

454
00:25:32.770 --> 00:25:36.160
next version of exchange apparently
is going to be hardcore

455
00:25:36.670 --> 00:25:41.620
into, into Mona. I'm not
a Unix guy by any

456
00:25:41.620 --> 00:25:44.050
stretch of the imagination, but
it appears to me that

457
00:25:44.050 --> 00:25:47.920
this is a unique, see
kind of a tool. Don't

458
00:25:47.920 --> 00:25:51.520
your thing. It's, it's unique.
See if one would say

459
00:25:51.520 --> 00:25:53.830
that a command line is
unit C, but using one

460
00:25:53.830 --> 00:25:57.670
of my favorite analogies, comparing
monad to like bash or

461
00:25:57.670 --> 00:26:01.090
any of the Unix shells
is the difference between shooting

462
00:26:01.090 --> 00:26:04.810
a bullet and throwing it.
Yeah. That's how much more

463
00:26:04.930 --> 00:26:07.870
advanced and thoughtful this is
now to be clear monad

464
00:26:07.870 --> 00:26:10.690
is standing on the shoulders
of giants, right? Yes it

465
00:26:10.690 --> 00:26:13.870
is. And you couldn't have
had monad without deep historical

466
00:26:13.870 --> 00:26:17.350
thought around. Well, what happened
in the past, Right? And

467
00:26:17.350 --> 00:26:20.770
it's got done now, Flection
and calm. I mean, it

468
00:26:20.770 --> 00:26:24.040
is, it is definitely putting
a layer of abstraction on

469
00:26:24.040 --> 00:26:27.970
top of the entire OSPF.
Sure. Take a look@shrinks.com slash

470
00:26:28.000 --> 00:26:32.230
<inaudible> Vivek Sharma his blog.
He is another moment monad

471
00:26:32.230 --> 00:26:35.440
expert who has got a
really interesting article called it's

472
00:26:35.440 --> 00:26:38.200
a one line world. And
he shows all the different

473
00:26:38.200 --> 00:26:42.850
things you might want to
do in one line, showing

474
00:26:42.850 --> 00:26:46.890
things, get hyphen mailbox from
a server and then move

475
00:26:46.890 --> 00:26:50.880
mailbox. That kind of flexibility
that one would get when

476
00:26:50.880 --> 00:26:54.060
they design their stuff from
the very start using something

477
00:26:54.060 --> 00:26:59.550
like monad, it's really, really
fantastic stuff. Wow. Also check

478
00:26:59.550 --> 00:27:05.030
out Jeffrey snobbery presentation on
a webcast it's shrinks.com/ <inaudible>.

479
00:27:06.230 --> 00:27:12.120
There's a Wiki up@channelnineatshrinks.com slash
<inaudible> piles and piles of

480
00:27:12.120 --> 00:27:19.380
sample scripts@trickster.com slash <inaudible>. And
just start, start thinking about

481
00:27:19.380 --> 00:27:22.260
this because the power and
the flexibility of this is

482
00:27:22.350 --> 00:27:25.140
much more than I could
ever talk about in a,

483
00:27:25.140 --> 00:27:27.890
in a 20 minute podcast.
Scott. So Just the like

484
00:27:27.890 --> 00:27:31.730
official central place for mode
information at Microsoft in your

485
00:27:31.730 --> 00:27:36.110
eyes. There's the Microsoft tech
net scripting center at <inaudible>

486
00:27:36.110 --> 00:27:40.790
dot com slash <inaudible>. And
this has got articles and

487
00:27:40.820 --> 00:27:45.410
repositories and sample code and
interviews with Jeffrey Schneider, the architect

488
00:27:45.410 --> 00:27:50.690
responsible for monad piles of
information up there. There's the

489
00:27:50.690 --> 00:27:55.100
monad team's technology blog at
<inaudible> dot com slash D

490
00:27:55.100 --> 00:27:58.550
for Y. This is their
kind of monad team blog.

491
00:27:58.580 --> 00:28:03.410
They throw up thoughts, ideas,
you know, little tips and

492
00:28:03.410 --> 00:28:07.430
facts, how to modify startup
items in the registry, how

493
00:28:07.430 --> 00:28:10.910
to make snap ins you
know, all those different things

494
00:28:10.910 --> 00:28:14.000
that one might want to.
Okay. So we got just

495
00:28:14.000 --> 00:28:17.120
enough time for a few
more, a few more links.

496
00:28:17.120 --> 00:28:19.580
If you got it. There's
a, there's a really interesting

497
00:28:19.580 --> 00:28:27.080
example from a multicultural standpoint,
at shrinks.com/ <inaudible>. It shows

498
00:28:27.080 --> 00:28:32.330
you how to make blocks
of reusable script that calls

499
00:28:32.330 --> 00:28:35.270
other scripts. So you can
actually change scripts together where

500
00:28:35.270 --> 00:28:37.400
you could pass in a
block of script to another

501
00:28:37.400 --> 00:28:42.380
script. And wow, cool. Yeah,
you can do, you can

502
00:28:42.380 --> 00:28:48.890
extend existing commands within monad
and add new properties. This

503
00:28:48.890 --> 00:28:52.970
is a very Ruby S
kind of thing, shrinks.com/d for

504
00:28:52.970 --> 00:28:58.220
Z as an interesting example,
where you can add new

505
00:28:58.220 --> 00:29:03.590
properties via script to existing
objects. Wow. So for example,

506
00:29:03.920 --> 00:29:07.850
if you wanted to add
a property to the system

507
00:29:07.850 --> 00:29:13.190
dot diagnostics dot process, so
you could create a, a

508
00:29:13.220 --> 00:29:16.130
XML file that says, I
want a new property called

509
00:29:16.130 --> 00:29:19.670
help link on all of
my different objects. So then

510
00:29:19.670 --> 00:29:23.090
I can call my help
link property on objects that

511
00:29:23.090 --> 00:29:26.060
did not previously have this.
So I'm basically tacking on

512
00:29:26.060 --> 00:29:30.080
new functionality to objects that
never expected it. The sample

513
00:29:30.080 --> 00:29:35.660
up there@thinxtra.com slash <inaudible> adds
an MSDN help link to

514
00:29:35.960 --> 00:29:41.320
existing objects within, within monad.
I imagine that's going have

515
00:29:41.320 --> 00:29:45.250
to be codex. Is security
aware? Oh yeah. There's all

516
00:29:45.250 --> 00:29:50.290
sorts of different plugins and
ways to make this appropriately

517
00:29:50.290 --> 00:29:53.230
secure, but that's way advanced
and beyond what we're doing

518
00:29:53.230 --> 00:29:57.430
here. Yeah. Now the 3.1
version is out. It came

519
00:29:57.430 --> 00:29:59.680
out at the end of
February. There is an older

520
00:29:59.680 --> 00:30:04.930
article@arstechnicaatshrinks.com slash <inaudible>. That's a
guided tour of the command

521
00:30:04.930 --> 00:30:08.410
shell. It's a guided tour
as of last October though,

522
00:30:08.860 --> 00:30:12.940
but it is still conceptually
correct. And some pretty interesting

523
00:30:12.940 --> 00:30:16.030
stuff and worth taking a
look at. Very cool. All

524
00:30:16.030 --> 00:30:18.520
right. Well, go get monad
and play with it. That's

525
00:30:18.520 --> 00:30:22.480
the call to action this
week? No question. Absolutely. All

526
00:30:22.480 --> 00:30:24.730
right, Scott, we will see
you next week on Hansel

527
00:30:24.730 --> 00:30:26.680
minutes. Thanks a lot. Bye
bye.

