WEBVTT FILE

1
00:00:00.330 --> 00:00:03.480
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.480 --> 00:00:06.450
they make the show possible.
Today's show is sponsored by

3
00:00:06.450 --> 00:00:10.620
developer express, become a UI
superhero with dev express controls

4
00:00:10.620 --> 00:00:15.150
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.540 --> 00:00:19.620
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.650 --> 00:00:23.730
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.820 --> 00:00:45.500
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
<inaudible>. Hi, this is Scott

8
00:00:45.500 --> 00:00:47.930
Hanselman. This is another episode
of Hansel minutes. And today

9
00:00:47.930 --> 00:00:51.440
I'm talking with Mike Brockie.
He is a Google developer

10
00:00:51.440 --> 00:00:54.830
expert and it contributed to
the angular CLI and he

11
00:00:54.830 --> 00:01:02.750
and I are both going
to be speaking@ngatlandghyphenatlandatlanta.org, which is

12
00:01:02.750 --> 00:01:05.600
an angular conference. How are
you, sir? I'm not too

13
00:01:05.600 --> 00:01:08.420
bad. I appreciate you having
me on. Yeah. How long

14
00:01:08.420 --> 00:01:11.810
have you been doing JavaScript
and angular? Well, that's two

15
00:01:11.810 --> 00:01:14.780
questions, I guess. Yeah, I
guess that's two separate questions.

16
00:01:15.020 --> 00:01:19.880
A Java script. I probably
started maybe about five years

17
00:01:19.880 --> 00:01:23.600
ago and angular probably about
three or four years. So

18
00:01:23.600 --> 00:01:26.270
most of my experience with
JavaScript has been with angular,

19
00:01:26.750 --> 00:01:29.030
but you've been in dev
for, for many, many years.

20
00:01:29.030 --> 00:01:33.230
What, what led you to
JavaScript? I think it was

21
00:01:33.230 --> 00:01:37.880
the proliferation of client side
tooling, namely jQuery, that kind

22
00:01:37.880 --> 00:01:40.100
of fostered in the idea
of being able to do

23
00:01:40.100 --> 00:01:43.250
more on the client and
that's what users wanted. Yeah.

24
00:01:43.520 --> 00:01:47.600
Cause I feel like I've
been using JavaScript for, I

25
00:01:47.600 --> 00:01:51.020
don't know, 12 or 13
years, but that JavaScript is

26
00:01:51.020 --> 00:01:53.600
not today's JavaScript. You know
what I mean? So I

27
00:01:53.600 --> 00:01:55.460
feel like it's like a
totally different language. Like I

28
00:01:55.460 --> 00:01:58.280
shouldn't even say that out
loud. You know what I

29
00:01:58.280 --> 00:02:00.770
mean? Cause I'm wondering if
someone might listen and say,

30
00:02:01.100 --> 00:02:03.230
Oh, well he's only been
working for five years. That's

31
00:02:03.230 --> 00:02:06.950
basically no time at all.
Absolutely. And I think that

32
00:02:07.070 --> 00:02:10.790
speaks to like other information
that I did do some

33
00:02:10.790 --> 00:02:12.530
JavaScript to way back when,
but I didn't really think

34
00:02:12.530 --> 00:02:15.560
of it as being a
JavaScript developer back then just

35
00:02:15.560 --> 00:02:18.980
doing some validation or small
things on the client side.

36
00:02:19.610 --> 00:02:21.500
Okay. So you kind of
feel the same way it

37
00:02:21.500 --> 00:02:23.870
does. It does seem like
it's a new language every

38
00:02:23.870 --> 00:02:26.090
few years. I feel like
even the JavaScript of today.

39
00:02:26.300 --> 00:02:28.430
And of course it is,
if you think about ESX

40
00:02:28.430 --> 00:02:30.260
and all that kind of
stuff, it, it re and

41
00:02:30.260 --> 00:02:34.220
the entire community reinvents itself
every few years, of course,

42
00:02:34.520 --> 00:02:37.490
with anything that's rapidly changing
as new technology comes out,

43
00:02:37.490 --> 00:02:41.420
especially with front end web,
there's a lot of change

44
00:02:41.420 --> 00:02:42.950
and a lot of fluctuation
has takes a lot of

45
00:02:42.950 --> 00:02:46.220
effort to keep up with
it. Now you have contributed

46
00:02:46.250 --> 00:02:50.180
to angular and specifically to
the CLI or the command

47
00:02:50.180 --> 00:02:53.630
line interface tool for angular.
Is that something that is

48
00:02:53.630 --> 00:02:56.330
required to use? If one
is going to use angular,

49
00:02:57.770 --> 00:03:02.860
it's not required, But with
any type of tooling, it

50
00:03:02.860 --> 00:03:06.280
provides you a level of
assistance to get you started

51
00:03:06.280 --> 00:03:09.760
faster and take care of
some menial tasks and other

52
00:03:09.760 --> 00:03:12.820
things that you would otherwise
have to do by hand

53
00:03:12.910 --> 00:03:16.350
or yourself and learn on
your own. So I use

54
00:03:16.350 --> 00:03:20.520
NPM and I install it
as a global tool. And

55
00:03:20.520 --> 00:03:24.450
then I get N G
a, which is a N

56
00:03:24.450 --> 00:03:26.250
G. So I just, actually,
I just realized where the

57
00:03:26.250 --> 00:03:29.280
N G came from an
angular and you type N

58
00:03:29.280 --> 00:03:32.160
G new and then Fu
and then you get an

59
00:03:32.160 --> 00:03:35.970
app. Is it generating an
app that's entirely out of

60
00:03:35.970 --> 00:03:37.740
the box? Like it is
a complete app when you

61
00:03:37.740 --> 00:03:41.700
say NG new. Absolutely. So
Yeah, you globally install it.

62
00:03:42.510 --> 00:03:44.670
And then with NG new,
you get a new project

63
00:03:45.140 --> 00:03:47.310
that you can run. You
can test, run end to

64
00:03:47.310 --> 00:03:50.220
end tests, lint. There's a
whole bunch of different tooling

65
00:03:50.220 --> 00:03:53.130
associated, more than just a
scaffolding tool like us. Something

66
00:03:53.130 --> 00:03:56.670
like yeoman would give you.
And is it a best

67
00:03:56.670 --> 00:03:58.620
practice? I mean, when you
say NG new is that

68
00:03:58.620 --> 00:04:01.020
the only angular app you'll
ever need, what if you

69
00:04:01.020 --> 00:04:05.490
already have an existing app?
There's some documentation about getting

70
00:04:05.490 --> 00:04:08.190
an app that was created
by hand, or maybe through

71
00:04:08.190 --> 00:04:11.040
some other tool and maybe
a C project to get

72
00:04:11.040 --> 00:04:12.660
it integrated with the rest
of the tooling of the

73
00:04:12.660 --> 00:04:17.700
CLI. But predominantly we strive
to get people to use

74
00:04:17.700 --> 00:04:20.520
NG new, to create a
new project because best practices

75
00:04:20.520 --> 00:04:23.310
change over time. And we
try to keep up with

76
00:04:23.310 --> 00:04:28.650
the latest, best practices. A
lot of people that I

77
00:04:28.650 --> 00:04:32.970
work with use IDs. So
when they think about making

78
00:04:32.970 --> 00:04:36.120
new stuff, they go like
file new project, right? The

79
00:04:36.120 --> 00:04:39.480
file menu, new menu project.
And then after the fact

80
00:04:39.480 --> 00:04:43.800
they go file new item.
And we're where, where an

81
00:04:43.800 --> 00:04:47.550
item is. Any number of
things is the angular CLI

82
00:04:47.580 --> 00:04:50.190
the file, new project of
the command line for angular

83
00:04:50.190 --> 00:04:55.530
apps. For right now, it
is we're looking into doing

84
00:04:55.680 --> 00:04:58.770
some refactorings so that it's
more of a library and

85
00:04:58.770 --> 00:05:01.320
not just a command line
interface, but the command line

86
00:05:01.320 --> 00:05:03.840
interface will still remain. So
you can still do everything

87
00:05:03.840 --> 00:05:06.060
you do from the command
line, but it would foster

88
00:05:06.060 --> 00:05:08.820
in the ability to do
things like a file new

89
00:05:08.820 --> 00:05:12.990
from an IDE and get
this result. Is it a

90
00:05:12.990 --> 00:05:16.440
generalized scaffolder like, can I
add other templates when I,

91
00:05:16.600 --> 00:05:18.870
I guess you say N
G after you've said new,

92
00:05:18.870 --> 00:05:21.540
you say NG generate, and
then the name of the

93
00:05:21.540 --> 00:05:25.800
thing you want to generate.
Correct. So you can generate

94
00:05:25.910 --> 00:05:28.740
a number of different items
that make sense with inside

95
00:05:28.740 --> 00:05:32.430
an angular application. But the
scaffolding logic is something that

96
00:05:32.430 --> 00:05:36.570
has been recently redone, and
you can do your own

97
00:05:36.570 --> 00:05:42.120
custom scaffolds. They're called schematics
within their, to be able

98
00:05:42.120 --> 00:05:45.990
to generate your own different
items, whether or not the,

99
00:05:46.010 --> 00:05:49.200
the file format is different
or tabs versus spaces or

100
00:05:49.200 --> 00:05:51.330
any other tweaks that you
want to make based off

101
00:05:51.330 --> 00:05:55.320
of your own organization. Oh,
okay. That's cool. So that

102
00:05:55.350 --> 00:05:58.700
schematic concept is generic idea
of a tale of a

103
00:05:58.700 --> 00:06:02.090
template, for lack of a
better word that lets you

104
00:06:02.090 --> 00:06:08.000
go NG, generate Fu where
Fu is components or services

105
00:06:08.000 --> 00:06:11.200
or classes or whatever. Exactly.
And we give a bunch

106
00:06:11.200 --> 00:06:13.840
of those by default. But
like I said, if your

107
00:06:13.840 --> 00:06:15.790
organization, or if you're a
project, do you want to

108
00:06:15.790 --> 00:06:20.020
use some other different scaffolds
or create some things on

109
00:06:20.020 --> 00:06:22.360
your own, then you can
do that through our schematics.

110
00:06:22.930 --> 00:06:25.840
Although schematics is a very
generic library that it's not

111
00:06:25.870 --> 00:06:29.170
just specific to the angular
scale. Oh, okay. It's used

112
00:06:29.170 --> 00:06:31.930
for other things. It was
designed that it could be

113
00:06:32.200 --> 00:06:34.990
for right now, the only
application I know of it

114
00:06:34.990 --> 00:06:37.120
is with the angular CLI,
but it's designed so that

115
00:06:37.120 --> 00:06:42.040
it can be used Elsewhere.
Okay. And these do most

116
00:06:42.040 --> 00:06:44.860
companies that are like heavy
angular people or heavy angular

117
00:06:44.860 --> 00:06:47.770
companies go and make new
schematics. Like, would I make

118
00:06:47.770 --> 00:06:50.410
a new scaffold? If I,
in, in the, in the

119
00:06:50.410 --> 00:06:53.110
course of making a regular
app, would I find myself

120
00:06:53.110 --> 00:06:54.760
saying, Oh yeah, I need
to make a new custom

121
00:06:54.760 --> 00:06:59.710
module or a new custom
scaffold. The answer right now

122
00:06:59.710 --> 00:07:03.700
is no, but it's only
because they're pretty new as

123
00:07:03.700 --> 00:07:05.820
far as I know, only
about a handful of people

124
00:07:05.840 --> 00:07:08.320
are using it, but it
would, it was just reintroduced

125
00:07:08.320 --> 00:07:11.110
in a recent version. So
it's a new thing, but

126
00:07:11.110 --> 00:07:13.180
I envision a lot of
people taking advantage of that

127
00:07:13.180 --> 00:07:15.940
to be able to create
their own different thing, their

128
00:07:15.940 --> 00:07:19.480
own scaffolds. So whether or
not you have the use

129
00:07:19.480 --> 00:07:22.870
of something, say like a
bootstrap that one may have

130
00:07:22.870 --> 00:07:25.930
its own constructs that you
could add on your own

131
00:07:26.680 --> 00:07:31.330
schematics into a particular collection.
And what specifically was just

132
00:07:31.330 --> 00:07:34.450
introduced. You said that people
are not using scaffolds, not

133
00:07:34.450 --> 00:07:39.280
making custom custom schematics the
idea of custom scaffolds. Okay.

134
00:07:39.400 --> 00:07:41.500
So where I'm looking at
the docs and the docs

135
00:07:41.500 --> 00:07:43.750
uses the term scaffold. And
then we, I feel like

136
00:07:43.750 --> 00:07:46.750
we are interchanging scaffold and
schematic. Is that the same

137
00:07:46.750 --> 00:07:51.250
idea? The same idea. So
the docs are, are lagging

138
00:07:51.250 --> 00:07:53.620
behind with the development and
the introduction of the concept.

139
00:07:54.010 --> 00:07:56.230
So that's kind of like
the effort that's going on

140
00:07:56.230 --> 00:07:59.500
right now is to update
the docs. Well, that brings

141
00:07:59.500 --> 00:08:01.930
up an interesting, an interesting
question kind of, and this

142
00:08:01.930 --> 00:08:04.210
is a little bit of
a loaded question, so I

143
00:08:04.210 --> 00:08:07.240
hope you understand no disrespect
intended, but it seems like,

144
00:08:07.290 --> 00:08:10.840
like JavaScript is moving so
fast that if I were

145
00:08:10.840 --> 00:08:13.330
going to bet my entire
company on it, I'm betting

146
00:08:13.330 --> 00:08:15.820
my company on a bunch
of stuff that has, you

147
00:08:15.820 --> 00:08:19.300
know, zero dot whatever as
their version number. And that

148
00:08:19.300 --> 00:08:21.760
can make me use sometimes
a little bit afraid. Like,

149
00:08:21.880 --> 00:08:24.280
should I count on this?
How mature and we know

150
00:08:24.280 --> 00:08:27.610
angular is pretty mature. How
mature is the CLI The

151
00:08:27.610 --> 00:08:32.890
CLI itself is pretty mature.
We've went beta, think about

152
00:08:32.890 --> 00:08:37.660
a year and a half
ago and live Least a

153
00:08:37.660 --> 00:08:41.470
year ago. I think it
was about when it went

154
00:08:41.470 --> 00:08:43.990
live. So it's very stable.
We have a lot, a

155
00:08:43.990 --> 00:08:46.270
large series of tests that
we've run, not only testing

156
00:08:46.270 --> 00:08:48.670
the CLI, but also the
projects that generates as well

157
00:08:49.150 --> 00:08:53.260
for, and then, so the
CLI itself is pretty stable.

158
00:08:54.280 --> 00:08:57.480
Schematics as is, has been
live in. People are using

159
00:08:57.480 --> 00:09:00.540
schematics as of the previous
version, a one dot four

160
00:09:00.540 --> 00:09:04.610
it's already baked in. But
when I go, when I

161
00:09:04.610 --> 00:09:07.340
go looking though, like, for
example, I find if I

162
00:09:07.340 --> 00:09:09.530
go look for angular, sea
life, I go and Google

163
00:09:09.530 --> 00:09:12.530
with being, for racing. It
was July I'll find like

164
00:09:12.890 --> 00:09:17.890
stuff that looks suspicious, like
NG CLI dot GitHub. It

165
00:09:17.890 --> 00:09:21.650
had like the logo and
it says command line interface

166
00:09:21.650 --> 00:09:24.260
for angular apps. But then
it says 0.0 0.7. So

167
00:09:24.260 --> 00:09:26.270
then I think to myself,
well, that's probably not real.

168
00:09:26.570 --> 00:09:29.330
So then I started angular.io
and go from there. Are

169
00:09:29.330 --> 00:09:32.090
there other competing CLRs or
just people who've decided that

170
00:09:32.090 --> 00:09:35.270
there's is a CLI? I
think the one that you're

171
00:09:35.270 --> 00:09:40.310
mentioning was a project that
was started independently for angular

172
00:09:40.310 --> 00:09:43.970
JS, which would be anything
angular related with a version

173
00:09:43.970 --> 00:09:48.650
of one.star, a whereas the
angular CLI the official one

174
00:09:48.650 --> 00:09:52.460
that we work on is
for angular projects for version

175
00:09:52.460 --> 00:09:55.340
two and later. So that's
really interesting. Maybe you could

176
00:09:55.340 --> 00:09:57.620
take a moment and explain
that because you just said

177
00:09:57.620 --> 00:10:00.950
angular JS and I felt
like there was an implied

178
00:10:00.950 --> 00:10:05.420
version number. And then you
said angular and that implied

179
00:10:05.450 --> 00:10:08.750
that that was a different
version number. Yes. So that's

180
00:10:08.750 --> 00:10:13.190
the messaging and the nomenclature
that the team is trying

181
00:10:13.190 --> 00:10:15.980
to use that is the
team is using that. We're

182
00:10:15.980 --> 00:10:19.070
trying to get community adoption
with that angular JS is

183
00:10:19.070 --> 00:10:24.530
anything with angular, one or
version one dot X and

184
00:10:24.530 --> 00:10:27.290
angular is the name to
be used with anything angular

185
00:10:27.290 --> 00:10:31.790
two or greater. Whereas the
version numbers with anything beyond

186
00:10:31.790 --> 00:10:35.750
two is almost irrelevant or
trying to become irrelevant and

187
00:10:35.750 --> 00:10:42.980
is just, Okay, so then
the angular CLI, which is@clidotangular.io

188
00:10:43.370 --> 00:10:49.130
it's version 1.0, but it
generates angular two or angular

189
00:10:49.190 --> 00:10:53.720
stuff, Correct. Being the tool
intends to lag a little

190
00:10:53.720 --> 00:10:57.500
bit behind the main products
with just about anything. Sure.

191
00:10:58.670 --> 00:11:01.550
The, our version numbers haven't
been aligned at least as

192
00:11:01.550 --> 00:11:04.910
not as of yet. I
see that possibly happen in

193
00:11:04.910 --> 00:11:08.690
the future, but it's not
a priority. Okay. When I

194
00:11:08.690 --> 00:11:13.970
go and, and have multiple
angular projects on my system,

195
00:11:13.970 --> 00:11:15.530
let's say I'm working on
two or three projects for

196
00:11:15.530 --> 00:11:19.820
two or three different companies.
Might I have different versions

197
00:11:19.820 --> 00:11:23.030
of the angular CLI? And
do I tie that to

198
00:11:23.030 --> 00:11:27.320
the project or do I
have one global version? Aye.

199
00:11:27.380 --> 00:11:31.490
So as each project is
generated, there's a local version,

200
00:11:31.490 --> 00:11:35.180
a local dependency of the
angular CLI Vic it's generated

201
00:11:35.210 --> 00:11:38.990
and installed. And what the
global version will do is

202
00:11:39.140 --> 00:11:42.500
by itself, it wouldn't be
needed for creating new projects,

203
00:11:43.280 --> 00:11:45.680
but at the same time,
if you run the global

204
00:11:45.740 --> 00:11:47.870
by just type in N
G it will defer the

205
00:11:47.870 --> 00:11:51.350
execution to the local. So
it will work with multiple

206
00:11:51.350 --> 00:11:54.280
versions. Oh, that's clever. Okay.
So that it's scoped. So

207
00:11:54.280 --> 00:11:56.350
if I have a local
angular CLI, or maybe I'm

208
00:11:56.350 --> 00:11:58.780
even working in the CLI
myself, is that the same

209
00:11:58.780 --> 00:12:01.150
as NPM link where I
type in G and I

210
00:12:01.150 --> 00:12:03.910
make sure that I'm, even
though if I might accidentally

211
00:12:03.910 --> 00:12:06.570
call the global one, it
will find the local one

212
00:12:06.580 --> 00:12:10.710
and use that It's a
similar concept. Yes. That it

213
00:12:10.710 --> 00:12:14.310
will defer to the local.
Okay, cool. So it doesn't

214
00:12:14.310 --> 00:12:15.960
sound like it's too hard
to use and it does

215
00:12:15.960 --> 00:12:19.320
the right thing and it's
quite smart. We aim to

216
00:12:19.320 --> 00:12:22.560
make it as smart as
we can. You're quite modest.

217
00:12:24.660 --> 00:12:27.630
What do you think about
CLS in general? Because I

218
00:12:27.630 --> 00:12:30.690
feel like the first time,
like I was an old

219
00:12:30.690 --> 00:12:33.930
Linux person 20 plus years
ago, but I feel like

220
00:12:34.320 --> 00:12:38.310
when development tools that did
stuff like the angular, she

221
00:12:38.310 --> 00:12:40.290
like kind of started the
first time. I really saw

222
00:12:40.290 --> 00:12:44.220
that with, with rails where
rails came out and then

223
00:12:44.220 --> 00:12:47.970
there was this suddenly an
opinionated command line, right? Not

224
00:12:47.970 --> 00:12:52.020
a tool like arc and
said, not a command line,

225
00:12:52.020 --> 00:12:54.030
like the Unix, you know,
new tools that we're used

226
00:12:54.030 --> 00:12:57.480
to using. But the first
time an opinionated generator came

227
00:12:57.480 --> 00:13:00.870
out, I thought was rails.
And then angular CLI is

228
00:13:00.870 --> 00:13:04.350
kind of inspired by the
Ember CLI. And now it

229
00:13:04.350 --> 00:13:09.210
seems like everybody has a
CLI. I think that, like

230
00:13:09.210 --> 00:13:13.230
I said, tooling tends to
lag behind the actual development

231
00:13:13.230 --> 00:13:16.650
of whatever tooling or the
tool is supporting. But by

232
00:13:16.650 --> 00:13:20.520
making something with a command
line, there's no gooey, less

233
00:13:21.390 --> 00:13:24.300
user experience to worry about
other, other still user experience

234
00:13:24.300 --> 00:13:27.660
with commands and shortcuts and
what have you within there.

235
00:13:28.020 --> 00:13:30.990
But it allows for, I
think it allows for more

236
00:13:30.990 --> 00:13:34.620
rapid development, especially with environments
where you're using the command

237
00:13:34.620 --> 00:13:38.790
line. Anyway, people who are
doing JavaScript are on the

238
00:13:38.790 --> 00:13:44.100
command line anyway, do NPM
installs and update dependencies and

239
00:13:44.100 --> 00:13:46.050
run their tests and do
a bunch of other things

240
00:13:46.050 --> 00:13:49.320
as well. So to have
a command line there, or

241
00:13:49.320 --> 00:13:51.570
a command line tool in
right there at your fingertips

242
00:13:51.600 --> 00:13:53.340
and the tools you're already
using makes a lot of

243
00:13:53.340 --> 00:13:56.760
sense. Yeah. And do, do
you ever get in trouble

244
00:13:56.760 --> 00:13:59.480
with the opinionated newness of
them? The fact that they,

245
00:13:59.480 --> 00:14:01.500
they, they want things to
look a certain way or

246
00:14:01.500 --> 00:14:04.080
is it the fact that
I can modify those, those

247
00:14:04.080 --> 00:14:07.890
scaffolds or those schematics? That
means that there's really no

248
00:14:07.890 --> 00:14:12.330
issue. So prior to schematics,
there was really no good

249
00:14:12.330 --> 00:14:16.440
way to customize what was
being output from the scaffolding

250
00:14:16.440 --> 00:14:20.100
or the generator. And that
was one of the highly

251
00:14:20.100 --> 00:14:26.580
requested features. So hence schematics
was born, whatever's being generated.

252
00:14:26.610 --> 00:14:30.780
There was a lot of
feedback, some positive, some negative,

253
00:14:31.770 --> 00:14:34.590
but yeah, everybody wants their
own different flavor within there.

254
00:14:34.980 --> 00:14:37.410
And a lot of the
previous command line interfaces that

255
00:14:37.410 --> 00:14:40.530
came out and you mentioned
rails and member both work

256
00:14:40.530 --> 00:14:44.400
off of convention based libraries,
right? Both rails. I ended

257
00:14:44.400 --> 00:14:49.140
up where the angular ecosystem
is not really convention based.

258
00:14:49.140 --> 00:14:53.300
It's configuration based. So the
mentality that I took with

259
00:14:54.170 --> 00:14:57.290
one when I got involved
with the project was to

260
00:14:57.290 --> 00:15:00.650
say, all right, the convention
will be the style guide.

261
00:15:01.820 --> 00:15:04.640
And that's what most people
will develop their applications towards.

262
00:15:04.640 --> 00:15:05.990
And that's what we will
try to follow with the

263
00:15:05.990 --> 00:15:10.240
CLI. Okay. That makes sense.
But there is a config

264
00:15:10.570 --> 00:15:14.140
schema though, right? You can
express the things that matter

265
00:15:14.140 --> 00:15:17.470
to you as an angler.
Yes. We started to provide

266
00:15:17.470 --> 00:15:21.760
some customization. So with an
angular component, if you wanted

267
00:15:21.760 --> 00:15:25.390
to say, have your styles
or your templates in line

268
00:15:25.390 --> 00:15:29.560
in this single TypeScript file,
then you can specify that

269
00:15:29.590 --> 00:15:34.030
either at the command line
or via configuration file. Okay.

270
00:15:34.030 --> 00:15:36.220
And is that something that
has smart defaults? Like I

271
00:15:36.220 --> 00:15:37.960
don't have to, I wondering
how much I have to

272
00:15:37.960 --> 00:15:41.530
worry about that kind of
stuff. Yeah. Everything has it's

273
00:15:41.530 --> 00:15:43.270
on defaults at all. I'll
work out of the box,

274
00:15:43.270 --> 00:15:45.820
but then you can customize
and tweak your configuration file

275
00:15:45.820 --> 00:15:49.420
as you see fit. When,
when I go, let me

276
00:15:49.420 --> 00:15:51.580
back up then. So popping
off the stack when I

277
00:15:51.580 --> 00:15:53.920
start out and I decided
I've, I'm going to do

278
00:15:53.920 --> 00:15:57.670
an angular application, this is
the recommended way. And I

279
00:15:57.670 --> 00:16:01.450
go and say, NG new
and start making my project.

280
00:16:02.050 --> 00:16:05.530
When I type NG serve.
That's being served by node

281
00:16:06.550 --> 00:16:08.890
<inaudible>. Is it the same
as am I, is anything

282
00:16:08.890 --> 00:16:12.310
special happening when I type
NG serve? Oh, of course.

283
00:16:12.310 --> 00:16:14.260
A lot of things are
happening in order to get

284
00:16:14.290 --> 00:16:20.710
modern tooling, to run in
current browsers. So projects created

285
00:16:20.710 --> 00:16:23.740
with the angular CLI are
built off of TypeScript and

286
00:16:23.740 --> 00:16:27.040
TypeScript doesn't run in browsers.
So the compilation steps needed

287
00:16:27.040 --> 00:16:31.000
for that. And also if
you're using a CSS, preprocessor

288
00:16:31.180 --> 00:16:32.830
that logic needs to be
run as part of the

289
00:16:32.830 --> 00:16:36.820
build process prior to the
application being served. Ah, okay.

290
00:16:36.820 --> 00:16:44.380
So then NG serve implies,
Correct. There is an NG

291
00:16:44.380 --> 00:16:46.930
build command as well, which
is more so, Hey, prepare

292
00:16:46.930 --> 00:16:51.730
what I've developed for release.
Whereas NG serve spins up

293
00:16:51.760 --> 00:16:54.280
a local development server to
allow you to do like

294
00:16:54.310 --> 00:16:58.060
a live reload Code, see
some code, write some code,

295
00:16:58.060 --> 00:17:01.600
see some code iterations. That's
cool. And I understand that

296
00:17:01.600 --> 00:17:05.980
there's testing and also end
to end testing E E

297
00:17:06.760 --> 00:17:09.970
correct. So obviously you can
run your through your unit

298
00:17:09.970 --> 00:17:13.180
tests, which is what NG
tests will execute for you

299
00:17:13.180 --> 00:17:16.060
as well as the end.
Denta so basically grab a

300
00:17:16.060 --> 00:17:21.040
serum wheel from the browser
and drive your application from

301
00:17:21.040 --> 00:17:23.620
beginning to end or whatever
processes you want to run

302
00:17:23.620 --> 00:17:26.740
through to test live in
the browser or multiple browsers.

303
00:17:27.490 --> 00:17:29.890
When, when I say NG
serve, is that a pipeline

304
00:17:29.890 --> 00:17:32.620
like a build pipeline, and
I can modify and add,

305
00:17:32.710 --> 00:17:34.630
I could do testing before
I served, or I can

306
00:17:34.630 --> 00:17:37.300
do whatever I want to
do. Those would be separate

307
00:17:37.300 --> 00:17:41.080
commands. So you can serve
the application to do your

308
00:17:41.080 --> 00:17:45.610
own execution of it or
running your test separately. What

309
00:17:45.610 --> 00:17:49.530
if I wanted something that
wasn't node in the, if

310
00:17:49.530 --> 00:17:51.360
I said NG serve and
I was going to have,

311
00:17:51.810 --> 00:17:54.240
I dunno, dot net or
groovy on grails or some

312
00:17:54.240 --> 00:17:56.400
other things. So I'm using
angular on the front end,

313
00:17:56.400 --> 00:18:01.800
but not making an opinion
about the backend. Now the,

314
00:18:01.970 --> 00:18:03.770
Do you have running note
on the backend? When you

315
00:18:03.770 --> 00:18:07.400
say that to clarify, it's
not necessarily running a node

316
00:18:07.400 --> 00:18:10.940
or express application, it's actually
a Webpack server that's currently

317
00:18:10.940 --> 00:18:16.670
running. Ah, yeah. But if
you wanted to customize to

318
00:18:16.670 --> 00:18:19.730
run them within different environment,
what I've seen people doing

319
00:18:19.760 --> 00:18:22.100
is rather than Jew, or
to jump out of the

320
00:18:22.100 --> 00:18:26.030
box of what's currently there
is to run your build

321
00:18:26.030 --> 00:18:28.580
in a watch mode. So
it'll dump those files to

322
00:18:28.580 --> 00:18:31.100
disk and you can serve
your application as you currently

323
00:18:31.100 --> 00:18:36.260
do with your existing backend
or potentially set up a

324
00:18:36.260 --> 00:18:40.520
proxy configuration to be able
to pass that traffic to

325
00:18:40.520 --> 00:18:43.580
another server. Okay. So I'm
trying to, I'm trying to

326
00:18:43.610 --> 00:18:48.590
parse this. You said it's
running a Webpack server. So

327
00:18:48.830 --> 00:18:52.010
Webpack is a, is a
bundler. It's a dependency management

328
00:18:52.010 --> 00:18:55.310
it's modules. It's all that
stuff. It it's a client

329
00:18:55.310 --> 00:18:57.530
side builder that preps what
you're going to put into

330
00:18:57.530 --> 00:19:01.430
production. Is that correct? That
is correct. But does Webpack

331
00:19:01.430 --> 00:19:04.760
also serve CSS files when
asked? Is it a web

332
00:19:04.760 --> 00:19:09.770
server? Does it run lib,
lib, UV? I'm not familiar

333
00:19:09.770 --> 00:19:12.590
with lib UV. The thing
under no. Does it like

334
00:19:12.590 --> 00:19:16.550
is, is Webpack listening on
HTTP? Because when I'm saying,

335
00:19:17.150 --> 00:19:20.540
when you type NG serve,
is it firing up node

336
00:19:20.600 --> 00:19:25.760
server dot JS, and then
listening? No, a Webpack dev

337
00:19:25.760 --> 00:19:30.140
server may inside the, under
the hood be doing that.

338
00:19:30.140 --> 00:19:32.780
I've never looked into that
code. Okay. I'm asking all

339
00:19:32.790 --> 00:19:36.500
the questions I have. No,
you're fine. The Webpack dev

340
00:19:36.500 --> 00:19:40.460
server is a development web
server provided by Webpack that

341
00:19:40.460 --> 00:19:43.970
will run all of its
bundling and everything within there

342
00:19:43.970 --> 00:19:47.240
in a watch mode to
be able to run essentially

343
00:19:47.240 --> 00:19:50.690
file watches on your source
code, compile it or transpile

344
00:19:50.690 --> 00:19:53.590
it in memory and serve
it out of memory. All

345
00:19:53.600 --> 00:19:57.920
right. That is my confusion.
So, so Webpack Webpack is

346
00:19:57.920 --> 00:20:04.070
the bundler Webpack dev server
is a separate project. It's

347
00:20:04.070 --> 00:20:06.950
a, it's a, it's a
thing that supports Webpack and

348
00:20:06.950 --> 00:20:10.550
the Webpack middleware. Correct. And
that allows it to then

349
00:20:10.550 --> 00:20:14.540
for the purposes of just
development, serves them from memory,

350
00:20:14.720 --> 00:20:19.340
serves all the Webpack assets
from memory. Correct. Okay. That

351
00:20:19.340 --> 00:20:22.880
was my confusion. So I,
I conflated Webpack and the

352
00:20:22.880 --> 00:20:26.660
Webpack dev server and perhaps
the web server Webpack dev

353
00:20:26.660 --> 00:20:29.480
server uses node and love
UV underneath. It doesn't matter.

354
00:20:29.690 --> 00:20:32.030
But it says like, what
I'm hearing you say is

355
00:20:32.030 --> 00:20:35.660
that if you have a
web Webpack, a focused development

356
00:20:35.990 --> 00:20:40.970
pipeline, angular, CLI Webpack, and
the Webpack dev server all

357
00:20:40.970 --> 00:20:45.170
work great together and they
are best practices For right

358
00:20:45.170 --> 00:20:48.880
now. Yes, still right now,
it's going To change tomorrow.

359
00:20:50.400 --> 00:20:55.140
JavaScript changes and six months
a year, two years, five

360
00:20:55.140 --> 00:21:00.420
years at the time. Cause
you're being you're you're I

361
00:21:00.420 --> 00:21:01.920
don't know if you're being
cagey or if you're just

362
00:21:01.920 --> 00:21:04.230
being, you know, correct. In
the sense of like, yes.

363
00:21:04.230 --> 00:21:05.940
At the time that Mike
and I recorded this, it

364
00:21:05.940 --> 00:21:08.790
is correct. But this is,
yeah. Things may have changed

365
00:21:08.790 --> 00:21:12.180
by the time you heard
this podcast, but things always

366
00:21:12.180 --> 00:21:15.210
change things always. But that's
the nice thing about the

367
00:21:15.210 --> 00:21:18.210
way the CLI is put
together right now is that

368
00:21:19.410 --> 00:21:22.470
you don't need to worry
about it running the command

369
00:21:22.470 --> 00:21:25.650
NG serve and all of
that logic of all right.

370
00:21:25.650 --> 00:21:29.280
Yes. It will run a
Webpack configuration through Webpack and

371
00:21:29.280 --> 00:21:32.370
start the Webpack dev server
for you is all transparent

372
00:21:32.370 --> 00:21:34.200
to you. You just run
it into serv and your

373
00:21:34.200 --> 00:21:37.590
application is automatically running. Okay.
So there you go. So,

374
00:21:37.740 --> 00:21:40.230
so let's again, let's pop
back on the stack. Once

375
00:21:40.230 --> 00:21:43.560
I've installed the angular CLI
are you getting Webpack for

376
00:21:43.570 --> 00:21:45.840
me in the webcast dev
server, are you how much

377
00:21:45.840 --> 00:21:48.000
work is being done for
me? Are you really hiding

378
00:21:48.000 --> 00:21:49.800
all the yucky bits that
I don't want to worry

379
00:21:49.800 --> 00:21:53.730
about? Of course that's awesome.
Main reason I got involved

380
00:21:53.730 --> 00:21:57.300
with this project is that
modern web development is very

381
00:21:57.300 --> 00:21:59.670
complicated and that there's a
lot of different things you

382
00:21:59.670 --> 00:22:03.360
need to learn. And if
you can take those, that

383
00:22:03.360 --> 00:22:07.200
scary list of say 15,
20 different things that somebody

384
00:22:07.200 --> 00:22:09.480
needs to learn and whittle
it down to four or

385
00:22:09.480 --> 00:22:13.140
five, yeah. It makes them
more accessible and more consumable

386
00:22:13.140 --> 00:22:16.020
to people who may not
be fully invested into front

387
00:22:16.020 --> 00:22:18.780
end web development. That's cool.
So that, that is the

388
00:22:18.780 --> 00:22:21.690
essence of what angular CLI
and what you yourself are

389
00:22:21.700 --> 00:22:26.640
trying to do. Absolutely cool.
And you've actually got webinars

390
00:22:26.640 --> 00:22:29.610
online. If people go and
search for, for Mike, last

391
00:22:29.610 --> 00:22:32.460
name is B R O
C C H I, not

392
00:22:32.460 --> 00:22:37.470
broccoli, but Brockie. You've got
a webinars and you've got

393
00:22:37.470 --> 00:22:40.170
talks that you've given on
using the CLI, but one

394
00:22:40.170 --> 00:22:42.090
of your particular ones that
I like is your, you

395
00:22:42.090 --> 00:22:46.170
did a live webinar on
YouTube, on angular CLI and

396
00:22:46.170 --> 00:22:49.350
the basically in 35 minutes,
you break it all down.

397
00:22:50.010 --> 00:22:52.830
I've, I've done a few,
I've done a few talks

398
00:22:52.830 --> 00:22:55.230
at conferences, but that's the
nice thing, like I said

399
00:22:55.230 --> 00:22:57.510
about the tool is that
a kind of sells itself

400
00:22:57.600 --> 00:23:00.690
and I've been fortunate enough
at some conferences and some

401
00:23:00.690 --> 00:23:03.570
webinars to be able to
just show it and kind

402
00:23:03.570 --> 00:23:05.550
of open people's eyes to
other ways of doing their

403
00:23:06.030 --> 00:23:11.610
tooling And is, is angular
and angular CLI supportive of

404
00:23:11.610 --> 00:23:14.520
other things like are like,
again, again, if I'm saying

405
00:23:14.520 --> 00:23:16.650
the wrong thing, I apologize.
Like when you say a

406
00:23:16.650 --> 00:23:19.750
component or is that a
web component or is it

407
00:23:19.750 --> 00:23:21.690
an angular component? And what
if I want to use

408
00:23:21.690 --> 00:23:28.080
web components Again, at the
time of this recording, they

409
00:23:28.080 --> 00:23:34.650
are separate things, but conceptually
they're very similar and that

410
00:23:35.370 --> 00:23:39.300
and angular component right now,
it works in the angular

411
00:23:39.300 --> 00:23:46.070
ecosystem, but actually less week
at angular mix, there was

412
00:23:46.070 --> 00:23:48.620
an announcement about angular elements,
which is a way of

413
00:23:48.620 --> 00:23:51.950
taking an angular component and
to compile it out into

414
00:23:51.950 --> 00:23:56.420
a raw web component. And
that's still experimental at this

415
00:23:56.420 --> 00:24:02.120
time. So the idea would
be that you are, you

416
00:24:02.120 --> 00:24:05.330
would create something, whether or
not say you created a

417
00:24:05.360 --> 00:24:11.180
calendar component that works within
your angle application, but you

418
00:24:11.180 --> 00:24:13.940
could compile it in a
way and render it out

419
00:24:13.940 --> 00:24:16.970
to be a raw web
component that could be consumable

420
00:24:17.030 --> 00:24:21.500
through raw JavaScript without having
the full angular runtime, or

421
00:24:21.530 --> 00:24:25.130
potentially use it in other
ecosystems, whether or not is

422
00:24:25.130 --> 00:24:30.860
react view, Ember polymer, any
of the other web frameworks

423
00:24:30.860 --> 00:24:35.050
out there. Okay. Okay. If
you say without the angular

424
00:24:35.050 --> 00:24:37.870
one time, what if can,
I guess I can mix

425
00:24:37.870 --> 00:24:42.370
and match, right. If, if
Wondering if I want that

426
00:24:42.370 --> 00:24:44.470
or not, it's hard to
make those kinds of decisions.

427
00:24:45.940 --> 00:24:48.550
Of course it is. But
if you're in an environment

428
00:24:48.880 --> 00:24:53.110
or an organization that is
using multiple technologies and you

429
00:24:53.110 --> 00:24:57.040
create a widget that is
useful within your application, but

430
00:24:57.040 --> 00:24:58.990
then you can share it
to another part of your

431
00:24:58.990 --> 00:25:02.770
organization that is using a
different technology that gives you

432
00:25:02.770 --> 00:25:04.360
a lot of power to
be able to do a

433
00:25:04.360 --> 00:25:09.340
lot of different things. Okay.
Do, is there a way

434
00:25:09.340 --> 00:25:13.120
to tell the angular CLI
the different, like things that

435
00:25:13.120 --> 00:25:15.790
I have already picked or
the different versions of stuff

436
00:25:15.790 --> 00:25:18.160
I've already picked? So it
doesn't generate something that would

437
00:25:18.160 --> 00:25:20.110
be incompatible or do I
not need to worry about

438
00:25:20.110 --> 00:25:22.510
that? It should all be
it's all, as of right

439
00:25:22.510 --> 00:25:25.990
now, based off of the
project that gets generated initially,

440
00:25:26.380 --> 00:25:29.830
ah, right. I'll be compatible,
but as you'll continue to

441
00:25:29.830 --> 00:25:33.730
upgrade, but that brings up
an idea that is in

442
00:25:33.730 --> 00:25:38.170
our future plans that have
a command of say, I

443
00:25:38.170 --> 00:25:40.390
don't know the exact naming,
but if say you run

444
00:25:40.390 --> 00:25:43.270
NG upgrade or NG update
that would update some of

445
00:25:43.270 --> 00:25:47.440
the dependencies upon within your
application, but also be able

446
00:25:47.440 --> 00:25:51.130
to apply scripts to your
application, to up to manage

447
00:25:51.130 --> 00:25:53.740
any breaking changes that were
there to make those changes

448
00:25:53.740 --> 00:25:56.860
automatically for you. That would
be a really cool feature.

449
00:25:57.220 --> 00:26:00.610
I think that that when
one makes a generator, the

450
00:26:00.610 --> 00:26:02.740
first version is like, Hey,
I made this thing. I

451
00:26:02.740 --> 00:26:05.740
generated some stuff that's cool.
The next step is to

452
00:26:05.740 --> 00:26:09.340
make that generator maybe for
lack of a better word

453
00:26:09.340 --> 00:26:13.690
re entrant, where I could
modify code that has already

454
00:26:13.690 --> 00:26:15.760
been generated. I could give
it an understanding of what

455
00:26:15.760 --> 00:26:18.370
has already been generated. And
it would then be contextually

456
00:26:18.370 --> 00:26:21.880
re entrant and, and do
the right thing based on

457
00:26:21.880 --> 00:26:23.890
things that it's seen that
I have already done. And

458
00:26:23.890 --> 00:26:29.200
it wouldn't necessarily torch my
generated code. Very true. And

459
00:26:29.200 --> 00:26:31.570
I think that a lot
of those types of toolings

460
00:26:31.570 --> 00:26:34.120
will be coming in the
future. Thanks to the power

461
00:26:34.120 --> 00:26:38.680
of TypeScript, by being able
to look into an application

462
00:26:38.980 --> 00:26:42.970
and get metadata out of
your application to see exactly

463
00:26:43.200 --> 00:26:47.210
there and where to make
those specific changes. Hmm. Would

464
00:26:47.210 --> 00:26:50.390
you say that is angular
CLI something that has a

465
00:26:50.390 --> 00:26:54.050
first timers friendly issues? Could
I go in there as

466
00:26:54.050 --> 00:26:57.170
a new, I knew new
person and open source and

467
00:26:57.170 --> 00:27:00.860
maybe find issues that are
help wanted, or set aside

468
00:27:00.860 --> 00:27:03.710
for, for people who might
be a good first issue

469
00:27:03.710 --> 00:27:06.260
for them to get involved
in open source? Absolutely. We

470
00:27:06.260 --> 00:27:08.780
have a label that we
put on those types of

471
00:27:08.780 --> 00:27:14.390
issues. Some are easy earlier
than others. Some as simple

472
00:27:14.390 --> 00:27:17.330
as like a single character
typo, even at times, I'll

473
00:27:17.330 --> 00:27:21.200
end up tweeting out about,
Oh, just to kind of

474
00:27:21.200 --> 00:27:23.600
gain some exposure and, and
help people walk through, getting

475
00:27:23.600 --> 00:27:26.240
the first commit in, or
what have you, and try

476
00:27:26.240 --> 00:27:29.600
to favor people who don't
have any commits or contributions

477
00:27:29.600 --> 00:27:31.760
yet to kind of get
them involved in the ecosystem.

478
00:27:32.240 --> 00:27:35.180
That's cool. It looks like
you've got a not only

479
00:27:35.180 --> 00:27:38.660
help wanted as a label,
but you also have effort,

480
00:27:38.720 --> 00:27:41.240
which I think is pretty
cool where you have easy

481
00:27:41.300 --> 00:27:44.960
like hours or medium, like
days or hard, like weeks

482
00:27:44.960 --> 00:27:46.490
or months, which I think
is a clever way to

483
00:27:46.490 --> 00:27:50.240
express it Effort. I think
that's helpful for anybody who's

484
00:27:50.240 --> 00:27:53.570
looking to get involved as
well as from a management

485
00:27:53.600 --> 00:27:55.340
of our, what do we
want to try and tackle

486
00:27:55.340 --> 00:27:57.500
for our future release and
how much effort is required

487
00:27:57.500 --> 00:28:00.530
on any particular issue? Yeah.
Yeah. Like I just went,

488
00:28:01.070 --> 00:28:03.140
ah, this is actually quite
a lovely labeling system you

489
00:28:03.140 --> 00:28:05.270
have here. I just went
over to the, to angular

490
00:28:05.270 --> 00:28:07.370
CLI and I went to
the labels and I said,

491
00:28:07.400 --> 00:28:11.060
I want issues that are
easy, where there's help wanted.

492
00:28:11.480 --> 00:28:15.620
And then additionally, I'm seeing
priority like, and severity. So

493
00:28:15.620 --> 00:28:18.740
here's one that is easy
and hours. People can jump

494
00:28:18.740 --> 00:28:22.730
in any time. It's definitely
required. Like people want it,

495
00:28:23.270 --> 00:28:26.390
but it has severity one,
which makes it confusing, but

496
00:28:26.390 --> 00:28:30.500
not blocking versus severity two,
which is inconvenient. That's a

497
00:28:30.500 --> 00:28:33.770
quite a nice way to,
to express things. Yeah. We

498
00:28:33.770 --> 00:28:36.830
try to triage our issue
Regularly so that we know

499
00:28:36.830 --> 00:28:40.370
what the community needs, but
if you're out there searching,

500
00:28:40.370 --> 00:28:42.170
does, I mean, we may
see a pull request from

501
00:28:42.170 --> 00:28:45.560
you in the future. You
know, I, I might just

502
00:28:45.560 --> 00:28:48.470
change the spelling error and
then declare that I'm an

503
00:28:48.470 --> 00:28:54.140
angular CLI developer, but no,
I'm still learning. I'm still

504
00:28:54.140 --> 00:28:57.380
learning just like our listeners
are learning and I want

505
00:28:57.380 --> 00:28:59.990
to be able to explore
and encourage people to do

506
00:28:59.990 --> 00:29:02.600
their first pull requests. So
I like that you have

507
00:29:02.600 --> 00:29:06.260
a friendly project for that.
I think GitHub recently in

508
00:29:06.260 --> 00:29:09.770
there Something where it's actually
integrated into the GitHub platform

509
00:29:10.010 --> 00:29:12.410
of a specific label that
we may be switching to

510
00:29:12.410 --> 00:29:15.260
for those They did. There's
been lots of talk in

511
00:29:15.260 --> 00:29:19.190
this space and Kent gods
and I did first timers

512
00:29:19.200 --> 00:29:24.680
only. And then Charlotte did
your first PR and then

513
00:29:24.680 --> 00:29:26.630
now I'll get hub. It
looks like they are standardizing

514
00:29:26.630 --> 00:29:29.090
on one. And I think
that anything that gets people

515
00:29:29.090 --> 00:29:31.820
excited about open source and
makes a standard and easy

516
00:29:31.820 --> 00:29:37.250
way for someone to find,
you know, new and, you

517
00:29:37.250 --> 00:29:40.610
know, reasonably chunked bits of
work to go and get

518
00:29:40.610 --> 00:29:42.610
involved and do their first
poll requests, I think is

519
00:29:42.620 --> 00:29:47.650
positive thing. Absolutely. That's how
I got first involved with

520
00:29:47.650 --> 00:29:51.040
the project was just going
and grabbing an issue was

521
00:29:51.040 --> 00:29:53.620
not tagged at the time
because the project was relatively

522
00:29:53.620 --> 00:29:57.130
new, but yeah, I grabbed
the issue and started working

523
00:29:57.130 --> 00:29:59.910
on it and it grew
into what is now, what

524
00:29:59.910 --> 00:30:03.160
job was it hard to?
Oh, actually like a job

525
00:30:03.160 --> 00:30:07.330
job, like paid job. Yes.
So that's how I'm currently

526
00:30:07.330 --> 00:30:09.940
working on the angular team
as a contractor right now.

527
00:30:10.570 --> 00:30:13.450
Nice. So it actually can
turn in open source can

528
00:30:13.450 --> 00:30:17.710
turn into a full time
gig. Absolutely. That is pretty

529
00:30:17.710 --> 00:30:20.470
slick. That seems like that's
almost another show right there

530
00:30:20.470 --> 00:30:22.930
to explain to people how
to make opensource your first

531
00:30:22.930 --> 00:30:26.350
time, your first big contract.
Is that something that you,

532
00:30:27.850 --> 00:30:31.300
that it was luck based
or sticking to it based

533
00:30:31.300 --> 00:30:33.150
or like, what was the
essence of the thing that,

534
00:30:33.150 --> 00:30:36.400
that turned it into a,
from a hobby to a,

535
00:30:36.620 --> 00:30:40.390
a full time contract? Like,
you know what I mean?

536
00:30:40.450 --> 00:30:43.240
Like right. Time, right place.
I think it was a

537
00:30:43.240 --> 00:30:47.470
combination of the two the
right time, right place, right.

538
00:30:47.470 --> 00:30:54.040
Project, community desire. And yeah,
I think it was just

539
00:30:54.040 --> 00:30:57.910
like a perfect storm of
situations that has led to

540
00:30:57.910 --> 00:31:01.540
where I am now. That's
fantastic. Congratulations to you. And

541
00:31:01.660 --> 00:31:04.510
where can people go and
see your videos and learn

542
00:31:04.510 --> 00:31:08.020
about the stuff that you're
working on? I have yet

543
00:31:08.020 --> 00:31:10.420
to put together a blog
or any type of site

544
00:31:10.450 --> 00:31:14.140
about me. I've typically just
communicate mostly online through Twitter.

545
00:31:14.950 --> 00:31:17.800
My Twitter handle is Brocco
B R O C C

546
00:31:17.800 --> 00:31:20.980
O a nickname that I
gained in college. And you've

547
00:31:20.980 --> 00:31:24.040
kind of stuck with since
then. Yeah. All right. Well,

548
00:31:24.040 --> 00:31:28.420
you can talk to Mike
at, at Bronco and talk

549
00:31:28.420 --> 00:31:30.490
about angular and he'll point
you to some of his

550
00:31:30.490 --> 00:31:32.350
great videos and the work
that they're doing on the

551
00:31:32.350 --> 00:31:34.840
angular. CLI thanks so much
for chatting with me today.

552
00:31:35.770 --> 00:31:37.450
I appreciate you taking the
time to chat with me.

553
00:31:38.200 --> 00:31:41.290
This has been another episode
of Hanselminutes and we'll see

554
00:31:41.290 --> 00:31:49.740
you again next week. <inaudible>.

