WEBVTT FILE

1
00:00:00.270 --> 00:00:03.420
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.420 --> 00:00:06.390
they make the show possible.
Today's show is sponsored by

3
00:00:06.390 --> 00:00:10.590
developer express, become a UI
superhero with dev express controls

4
00:00:10.590 --> 00:00:15.090
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.480 --> 00:00:19.590
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.590 --> 00:00:23.670
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.790 --> 00:00:45.230
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
<inaudible>. Hi, this is Scott

8
00:00:45.230 --> 00:00:48.200
Hanselman. This is another episode
of Hansel minutes today. I'm

9
00:00:48.200 --> 00:00:52.430
talking with Alfonzo Garcia Karo.
He works on fable. How

10
00:00:52.430 --> 00:00:54.710
are you, sir? I am
fine. Thanks. Thanks a lot

11
00:00:54.710 --> 00:00:57.200
for him. My demons, Scott.
Yeah. So you are a

12
00:00:57.200 --> 00:01:00.050
part of the F sharp
ecosystem, but also part of

13
00:01:00.050 --> 00:01:04.400
the JavaScript ecosystem and you
work on something called fable

14
00:01:04.670 --> 00:01:08.300
an F sharp to JavaScript
compiler. That's pretty a, that

15
00:01:08.300 --> 00:01:13.130
sounds amazing. Yeah, it's actually,
it's not that it's quite

16
00:01:13.130 --> 00:01:16.520
simple, but yeah, it's, it's
a way I was trying

17
00:01:16.730 --> 00:01:19.730
to find a way to,
to combine these two ecosystems

18
00:01:19.730 --> 00:01:23.450
so that I really liked
the.net and sr and JavaScript.

19
00:01:23.510 --> 00:01:27.410
So I just saw it
started this break and then

20
00:01:27.410 --> 00:01:29.780
the community had a very
good response and a lot

21
00:01:29.780 --> 00:01:33.380
of people were helping. So
we got to this point,

22
00:01:34.610 --> 00:01:37.010
so you see, it sounds
amazing to me just because

23
00:01:37.010 --> 00:01:40.190
I think that even after
all these years of developing

24
00:01:40.400 --> 00:01:44.780
software, when I see a
compiler or a trans Pilar

25
00:01:44.780 --> 00:01:49.580
or any kind of transformative
technology, it seems impossible and

26
00:01:49.580 --> 00:01:51.470
amazing to me that you
could take something like F

27
00:01:51.470 --> 00:01:54.800
sharp and turn it into
JavaScript, but you were saying

28
00:01:55.070 --> 00:01:58.970
no problem, not a big
deal. Of course, it's requires

29
00:01:58.970 --> 00:02:02.720
a lot of work and
a specialist, not a the,

30
00:02:02.720 --> 00:02:05.510
the, you, if you will
have a look at the

31
00:02:05.510 --> 00:02:09.110
source code in a fable
is actually not so many

32
00:02:09.110 --> 00:02:11.930
files is the core. It's
like less than 10 files.

33
00:02:12.320 --> 00:02:16.070
There are big files around
1000 lines, but there are

34
00:02:16.070 --> 00:02:19.640
not that many. And we
can do that because thanks

35
00:02:19.640 --> 00:02:22.550
to all their breaks, like
the FCR compiler itself, which

36
00:02:22.550 --> 00:02:26.540
is supposed to solve the
<inaudible> scan of similar to

37
00:02:26.540 --> 00:02:31.580
Rosalyn. So it's really easy
to manipulate the ASC. I

38
00:02:31.580 --> 00:02:34.430
don't need to worry about
parsing the day, so, or

39
00:02:34.460 --> 00:02:37.550
type checking anything. And also
we have this other pregnant

40
00:02:37.550 --> 00:02:43.490
JavaScript that this currently used,
but most of the JavaScript

41
00:02:43.490 --> 00:02:45.890
developers, so they can use
a modern JavaScript, but they're

42
00:02:45.890 --> 00:02:51.140
still compile to all JavaScript.
It's compatible with a arthrosis

43
00:02:51.140 --> 00:02:55.010
like I transport or something
like that. And, and I'm

44
00:02:56.360 --> 00:02:59.620
kind of a bridge between
the FCR, compiler and pebble.

45
00:02:59.620 --> 00:03:03.190
So I can, I don't
have to worry about either

46
00:03:04.210 --> 00:03:08.410
partying the SRTs or <inaudible>
JavaScript decks. I can just

47
00:03:08.590 --> 00:03:12.820
generate the ESE that's abstract
index street, sorry for people

48
00:03:13.090 --> 00:03:17.590
who don't know their crime
and be able, we'll take

49
00:03:17.590 --> 00:03:19.780
care of our Jesse right
in the JavaScript for me.

50
00:03:20.140 --> 00:03:24.490
So that's, that's the, all
the magic that is in

51
00:03:24.490 --> 00:03:27.570
it. So let me parse
what you said a little

52
00:03:27.570 --> 00:03:29.700
bit, because there was a
lot of good information there,

53
00:03:29.700 --> 00:03:31.260
but it was a little
bit dense. There was a

54
00:03:31.260 --> 00:03:34.860
lot of stuff there. You
said a S T an

55
00:03:34.860 --> 00:03:40.530
abstract syntax tree. And I
think when people naively think

56
00:03:40.530 --> 00:03:43.980
about compilation, they think about,
like you said, parsing text.

57
00:03:44.520 --> 00:03:48.090
So fable doesn't have to
do any manual text parsing

58
00:03:48.090 --> 00:03:50.970
at all. Is that correct?
Yes, that's correct. Because all

59
00:03:50.970 --> 00:03:54.450
the works are read on
by the FCR compiler. Okay.

60
00:03:54.630 --> 00:03:58.740
So then the input into
fable is that abstract syntax

61
00:03:58.740 --> 00:04:02.100
tree. And that's just like
a Dom for your code.

62
00:04:02.650 --> 00:04:06.210
Yeah. Something similar. Yeah. Pretty
a very good analogy. Yeah.

63
00:04:07.080 --> 00:04:10.500
Okay. So you've got this,
the syntax tree that represents

64
00:04:10.500 --> 00:04:12.990
the intent of your code.
I say a Dom doctor

65
00:04:13.020 --> 00:04:15.030
document object model. Cause we
used to have a thing

66
00:04:15.420 --> 00:04:18.630
called the covid.com. But the
idea is it's an, it's

67
00:04:18.630 --> 00:04:22.530
a data structure in memory
that represents the code, like

68
00:04:22.890 --> 00:04:25.380
all the way compiled or
on its way to being

69
00:04:25.380 --> 00:04:31.920
compiled. Eh, yeah. Basically the
circumpolar takes this, this ESD

70
00:04:31.920 --> 00:04:37.230
or <inaudible> and <inaudible> convert
to a IUL. So intermediate

71
00:04:37.230 --> 00:04:40.650
language for the company to
the net white coat. But

72
00:04:40.660 --> 00:04:43.950
I can sneak in, in
this, this step and now,

73
00:04:43.980 --> 00:04:47.580
instead of trying to combine
to IUL, I just cannot

74
00:04:48.450 --> 00:04:53.070
actually convert these ASC to,
I know that people can

75
00:04:53.070 --> 00:04:55.500
understand. And R and B
will, we'll take care of

76
00:04:56.190 --> 00:05:01.230
converting these ASC to actual
JavaScript code. Because as for

77
00:05:01.230 --> 00:05:03.870
people that don't know a
of the JavaScript, because he's

78
00:05:03.870 --> 00:05:07.050
not, there are actually many
targets for JavaScript. So you

79
00:05:07.050 --> 00:05:10.200
can target to a modern
JavaScript. You can target to

80
00:05:10.230 --> 00:05:15.840
JavaScript compatible with ECMAScript five
and not trying to cover

81
00:05:15.840 --> 00:05:19.380
everything. It's very difficult, but
if be able all does

82
00:05:19.590 --> 00:05:22.350
all this work for us,
that's a really, really useful.

83
00:05:23.610 --> 00:05:30.150
So bagel is at <inaudible>
dot IO. And this is

84
00:05:30.150 --> 00:05:32.490
basically a thing that lets
you take kind of like

85
00:05:32.490 --> 00:05:36.630
next generation or modern JavaScript
and compile it to whatever

86
00:05:37.230 --> 00:05:41.430
your browser supports. So you
say something like, let food

87
00:05:41.440 --> 00:05:44.370
equals zero and it will
go and it'll write whatever

88
00:05:44.370 --> 00:05:47.640
far equals or whatever the
appropriate JavaScript is. And you

89
00:05:47.640 --> 00:05:51.000
say there's multiple targets. Yeah.
Because for example, you can

90
00:05:51.000 --> 00:05:54.630
decide if you are mother
up on, on, you only

91
00:05:54.630 --> 00:05:59.450
want to, to target modern
browsers like Chrome or Firefox

92
00:05:59.450 --> 00:06:05.180
or Microsoft edge, you can
decide to, to, to target,

93
00:06:05.180 --> 00:06:07.280
to monitor our scripts. So
you can have the, for

94
00:06:07.280 --> 00:06:11.330
example, classes that are now
modern JavaScript glasses. And if

95
00:06:11.330 --> 00:06:13.280
you want to have them
into your funnel code, you

96
00:06:13.280 --> 00:06:15.590
can have them that are,
if you want to be

97
00:06:15.590 --> 00:06:19.100
compatible with as many processes
as possible, do you can

98
00:06:19.100 --> 00:06:23.390
just compile these classes to
all JavaScript that are using

99
00:06:23.390 --> 00:06:27.770
just a functional standard prototype
inheritance. So these sorts of

100
00:06:27.770 --> 00:06:34.330
possible, Where does babble sit
as it relates to TypeScript?

101
00:06:34.360 --> 00:06:38.320
Because Abel is a tr
trans Pilar and TypeScript is

102
00:06:38.320 --> 00:06:42.040
a trans Pilar and a
type checker. Yeah, actually it's

103
00:06:42.040 --> 00:06:45.760
very similar. It's a, you
say periphery. So basically thinner,

104
00:06:46.690 --> 00:06:51.040
mostly difference. Bible is just
manipulating their syntax and the

105
00:06:51.040 --> 00:06:54.640
language, but our typist group
also adds the type chicken.

106
00:06:55.030 --> 00:06:59.170
So it's a really nice
experience for, especially for C

107
00:06:59.170 --> 00:07:03.490
sharp developers that are trying
to do some JavaScript, but,

108
00:07:04.270 --> 00:07:07.390
and I thin actually the
last version of Babel is

109
00:07:07.390 --> 00:07:09.670
going to be compatible with
a type of strip. So

110
00:07:09.670 --> 00:07:13.150
you will be able to,
to, I don't know about

111
00:07:13.150 --> 00:07:15.280
the type ticket bar. I
don't know how they're going

112
00:07:15.280 --> 00:07:17.830
to do it, but I
feel with the Bible seven,

113
00:07:18.280 --> 00:07:21.610
it's going to impossible to,
to compile this group directly

114
00:07:21.610 --> 00:07:25.660
to JavaScript. That's nice. So
that means that you choosing

115
00:07:25.660 --> 00:07:28.600
to build fable on top
of Babel was a smart

116
00:07:28.600 --> 00:07:31.150
decision and you are set
up for the future. Sure.

117
00:07:31.570 --> 00:07:37.510
Yeah, actually was I wasn't
actually a star at the

118
00:07:37.510 --> 00:07:41.450
beginning. I was trying to
decide between baseball and tapestry

119
00:07:41.450 --> 00:07:45.040
of, but at the time
type of script, do you

120
00:07:45.040 --> 00:07:49.480
then allow to generate JavaScript
directly from an ASC? So

121
00:07:49.480 --> 00:07:53.290
I had to first print
type of script gold and

122
00:07:53.290 --> 00:07:58.000
then generating, and also the
ESC offer be able is

123
00:07:58.360 --> 00:08:01.390
really simple. You can go
to the specs and not,

124
00:08:01.720 --> 00:08:04.840
and it's really easy to
model from, from F sharp.

125
00:08:04.840 --> 00:08:08.200
So that's, it was breeding
approach time and it was

126
00:08:08.200 --> 00:08:11.740
working fine. And also the
baseball team was a really

127
00:08:11.740 --> 00:08:15.010
good and not really responsive.
And every time that we

128
00:08:15.010 --> 00:08:17.650
went with, we needed some
help. So I think it

129
00:08:17.650 --> 00:08:21.760
was a very good decision
and not one of the

130
00:08:21.760 --> 00:08:25.170
guidelines for fable is just
trying to, eh, be average

131
00:08:25.170 --> 00:08:28.990
to be doing these two
ecosystems. And don't try to

132
00:08:29.320 --> 00:08:32.620
hide JavaScript because sometimes there
are some tools that are

133
00:08:32.650 --> 00:08:34.780
trying to combat to JavaScript,
but that they try to

134
00:08:35.080 --> 00:08:39.090
hide all of JavaScript to
the developers because sometimes there'd

135
00:08:39.090 --> 00:08:41.560
be the scale for them,
but in our case, we

136
00:08:41.560 --> 00:08:44.420
don't want to hide anything.
And I think that there,

137
00:08:44.470 --> 00:08:48.010
there are actually very good
development tools for Java script,

138
00:08:48.010 --> 00:08:51.430
like a baseball or wetback,
and we try to integrate

139
00:08:51.430 --> 00:08:54.880
with them. So to take
all the benefits of JavaScript

140
00:08:55.560 --> 00:09:00.110
right now. So Bible is
written itself in with node,

141
00:09:00.110 --> 00:09:04.880
right? And, and fable is
written in, in what in

142
00:09:04.970 --> 00:09:08.630
S and F sharp Pastor.
I'm a Federalist in the

143
00:09:08.630 --> 00:09:12.080
FCR, but he also has
a, when you are running

144
00:09:12.080 --> 00:09:16.220
the F fable compiler, usually
you run two to process

145
00:09:16.230 --> 00:09:18.620
at the same time to
process it. So you run

146
00:09:18.620 --> 00:09:22.310
the net core process that
is running a fable, and

147
00:09:22.550 --> 00:09:27.440
you also run on a
JavaScript versus not usually the

148
00:09:27.450 --> 00:09:29.930
runs, the people part are
these going to convert the,

149
00:09:30.090 --> 00:09:33.470
the ASC to JavaScript or
not. So usually your you're

150
00:09:33.470 --> 00:09:36.380
running web, which is the
blender band all the time

151
00:09:36.380 --> 00:09:39.050
is going to take all
the gold and put in

152
00:09:39.050 --> 00:09:42.110
a single file and no
other kind of stuff. And

153
00:09:42.110 --> 00:09:45.320
now, especially sort of, for
example, we can do a

154
00:09:45.320 --> 00:09:50.210
hot model replacement, which is
basically a hot reloading your

155
00:09:50.210 --> 00:09:53.900
web base, or when you're
working, just modify something in

156
00:09:53.900 --> 00:09:55.970
your code that you don't
have to do anything that

157
00:09:55.970 --> 00:09:59.210
federal compile is waiting there
and detects the change. And

158
00:09:59.540 --> 00:10:04.610
it can refresh that their
webpage for you. It's actually

159
00:10:04.610 --> 00:10:07.880
don't buy web Webpack, but
thanks to the integration, we

160
00:10:07.880 --> 00:10:10.340
can do this. We can
get very, very close to

161
00:10:10.340 --> 00:10:16.010
the same experiences, JavaScript level
upper house nowadays. Wow. I

162
00:10:16.010 --> 00:10:18.530
want to come back to
that. So I'm not going

163
00:10:18.530 --> 00:10:21.110
to forget that, but I
want to understand what is,

164
00:10:21.320 --> 00:10:24.110
how is fable passing data
around? Is this going just

165
00:10:24.110 --> 00:10:29.240
different? Is his text files,
the integration point? It's not

166
00:10:29.300 --> 00:10:33.110
a very advanced thing. It's
just a Jason file. So

167
00:10:33.950 --> 00:10:37.550
I have just, if you
were to the film will

168
00:10:37.550 --> 00:10:41.870
rip or you'll see that
the <inaudible> model with, with

169
00:10:41.870 --> 00:10:46.160
glasses and then these glasses
are converted to Jason and

170
00:10:46.160 --> 00:10:49.460
these, we are using on
TC per server at the

171
00:10:49.460 --> 00:10:51.950
moment because they thought that
maybe this could be very

172
00:10:51.950 --> 00:10:57.440
laid away, done fast and,
and this communicating with, with

173
00:10:57.480 --> 00:11:01.370
a fever Lauder, which is
kind of the weapon plugging

174
00:11:01.370 --> 00:11:06.680
to communicate with a fable
server. And, and then, yeah,

175
00:11:07.310 --> 00:11:10.730
yes. Do some fives that
are been passed through the

176
00:11:10.790 --> 00:11:19.520
two processes. So I'm looking@fablefable.io
slash ripple, a R E

177
00:11:19.550 --> 00:11:21.680
P L. And I've got
up here and I'm looking

178
00:11:21.680 --> 00:11:25.640
at, for example, basic canvas,
and here you're basically writing

179
00:11:25.640 --> 00:11:31.340
C-sharp to draw something in
a HTML five canvas. And

180
00:11:31.370 --> 00:11:33.290
one of the things that
is kind of, I dunno,

181
00:11:33.290 --> 00:11:36.440
surprising or interesting is all
of the lines where you

182
00:11:36.440 --> 00:11:41.300
say fill style and fill
rectangle. They're really close to,

183
00:11:41.990 --> 00:11:45.050
to JavaScript already. I guess
it's, there's only so many

184
00:11:45.050 --> 00:11:48.230
ways that an object with
a method with parameters can

185
00:11:48.230 --> 00:11:51.410
be passed in. Yeah. Yeah.
That's thanks to the, we

186
00:11:51.410 --> 00:11:55.150
have the also biding. So
they're one of the things

187
00:11:55.150 --> 00:11:59.050
I was, for example, a
tapestry was sort of really

188
00:11:59.050 --> 00:12:02.950
a bigger inspiration for me
when, when designing fiber and

189
00:12:03.130 --> 00:12:05.850
I wanted to have something
similar. That is, that is

190
00:12:05.860 --> 00:12:09.130
a, you have all the
border of the FCR language,

191
00:12:09.640 --> 00:12:12.130
but at the same time,
you're a, wanted the developer

192
00:12:12.130 --> 00:12:15.070
to be very close to
Java script and the native

193
00:12:15.490 --> 00:12:18.250
browser API, or even not
nor the BAS, if you're

194
00:12:18.250 --> 00:12:22.630
writing a note application. And
in this case, we are,

195
00:12:22.810 --> 00:12:29.950
we just took them the
browser EPA, the Glazer from

196
00:12:30.100 --> 00:12:32.680
Tabish group. And we have
a tool which is called

197
00:12:32.740 --> 00:12:36.100
Ts to fable that you
can now find the MPM

198
00:12:36.880 --> 00:12:41.260
and these tool can convert
a tapestry, declaration files into

199
00:12:43.210 --> 00:12:47.020
F sharp compiler, a fable
compile if our files, and

200
00:12:47.350 --> 00:12:50.470
this is what you are
going to use to, to,

201
00:12:51.250 --> 00:12:56.080
to interact in a very,
in a very similar way

202
00:12:56.080 --> 00:13:01.680
to what you will be
doing with normal JavaScript. How

203
00:13:01.710 --> 00:13:05.250
compatible is this? Does this
mean that I can take

204
00:13:05.280 --> 00:13:08.730
a huge code base of
existing F sharp code and

205
00:13:08.730 --> 00:13:11.100
convert it to Java script?
Or does this just mean

206
00:13:11.520 --> 00:13:16.080
that I can express JavaScript
constructs in F sharp alight

207
00:13:16.080 --> 00:13:18.960
in my language of choice?
Yeah, it depends. It's not,

208
00:13:19.650 --> 00:13:23.820
not everything is supported. So
because for example, the BCLS

209
00:13:24.060 --> 00:13:26.790
is really, really big. So
it's very difficult to support

210
00:13:26.790 --> 00:13:31.050
everything. And you can go
to the, if you go

211
00:13:31.050 --> 00:13:36.750
to covid.io again to the,
actually we forgot to, to

212
00:13:36.750 --> 00:13:39.090
add a link from the
variable to the home site.

213
00:13:39.540 --> 00:13:41.520
But if you are there
you go to, you can

214
00:13:41.520 --> 00:13:46.170
go to a docs. And
then in the docs, you'll

215
00:13:46.170 --> 00:13:49.050
see there not many docs
I wanted to have very

216
00:13:49.050 --> 00:13:51.900
few, I'm not a really
big, so I had to

217
00:13:51.900 --> 00:13:55.620
make sure that people will
read them. But if you're

218
00:13:55.620 --> 00:13:59.130
to the section goal, if
SAR language level and compatibility,

219
00:14:00.030 --> 00:14:02.700
you can see there, but
what is supported from the

220
00:14:02.700 --> 00:14:06.210
sr language, from the FCR
core library and also from

221
00:14:06.240 --> 00:14:11.520
the.net, the BCL, the base
class library. So you see

222
00:14:11.520 --> 00:14:16.320
that some of the basic
collections or primitive types are

223
00:14:16.320 --> 00:14:21.000
supported. And when possible, we
try to compare them directly

224
00:14:21.000 --> 00:14:28.760
to native JavaScript system types.
Or for example, they're either

225
00:14:28.760 --> 00:14:33.330
into us or floats, they
convert directly to JavaScript number.

226
00:14:33.990 --> 00:14:39.180
Hm. Yeah. So it demands
this good vase. FDR got

227
00:14:39.180 --> 00:14:43.920
base only uses things that
are really compatible with fable.

228
00:14:43.950 --> 00:14:46.110
You will be able to
combine it with two JavaScript,

229
00:14:46.500 --> 00:14:48.720
but if it uses something
that is not for example,

230
00:14:49.140 --> 00:14:53.420
eh, system, your like this
that is not compatible with

231
00:14:53.420 --> 00:14:56.810
fable, it will fail because
the favor doesn't know how

232
00:14:56.810 --> 00:15:00.940
to certainly these two JavaScript.
Okay. That makes sense. So

233
00:15:00.940 --> 00:15:02.500
let me see if I
can paraphrase so that I

234
00:15:02.500 --> 00:15:05.680
understand. So if I'm using,
you know, system not date

235
00:15:05.680 --> 00:15:08.410
time, it'll end up being
a JavaScript date. And if

236
00:15:08.410 --> 00:15:11.740
I'm using chars and strings
and ants, it'll map to

237
00:15:11.740 --> 00:15:15.070
the appropriate JavaScript thing. But
if I go and do

238
00:15:15.070 --> 00:15:18.310
something like system dot drawing,
certainly that's not going to

239
00:15:18.310 --> 00:15:20.620
work. It's not going to
magically turn into a canvas.

240
00:15:21.160 --> 00:15:24.610
No, there's actually this that
I wrote down when I

241
00:15:24.610 --> 00:15:27.370
was working before fable, there
was a, an very cool

242
00:15:27.400 --> 00:15:30.620
break that was called a
final script. And I was

243
00:15:30.850 --> 00:15:33.730
contributing for, to that period
as well. And one of

244
00:15:33.730 --> 00:15:36.580
the things that I tried
to do was some kind

245
00:15:36.580 --> 00:15:39.220
of a replacement also for
the system we'll throw in.

246
00:15:39.220 --> 00:15:43.360
But, eh, but yeah, I
tried yet for, for favor

247
00:15:43.360 --> 00:15:49.090
while I seen something, a
library F sharp oriented for

248
00:15:49.090 --> 00:15:51.130
a gamblers will be very
nice, but we don't have

249
00:15:51.130 --> 00:15:54.700
the, although we have something
for a big C, which

250
00:15:54.700 --> 00:15:58.500
is also elaborate to, to
render with the Cambus or

251
00:15:58.510 --> 00:16:02.620
using also a web GL.
And I think if you

252
00:16:02.620 --> 00:16:11.470
go to fable.io/is samples, hyphen,
you can see some of

253
00:16:11.470 --> 00:16:14.620
the examples we have. So
when you go down to

254
00:16:14.620 --> 00:16:17.920
fable slash samples, there's a
thing called the samples, browser

255
00:16:18.520 --> 00:16:22.720
and pixie. What you're saying
pixie is I X I

256
00:16:23.140 --> 00:16:25.960
Pixi JS, that's a to
G a, to D a

257
00:16:25.960 --> 00:16:30.490
web GL application. So you
can see like moving things

258
00:16:30.490 --> 00:16:34.210
around. And there's even a
great example of Mario super

259
00:16:34.210 --> 00:16:37.900
Mario running around and jumping
up and down. And there's

260
00:16:37.900 --> 00:16:42.790
an example that gets into
an interesting question about a

261
00:16:42.790 --> 00:16:46.810
thing called Elm and the
El mish for people who

262
00:16:46.810 --> 00:16:48.730
are not familiar with all
of these different words, it

263
00:16:48.730 --> 00:16:51.160
can be a little overwhelming
because here we are a

264
00:16:51.160 --> 00:16:53.530
few minutes into a podcast,
and now we're talking about

265
00:16:53.920 --> 00:16:56.320
fable and pixie and ELAM
and Misha, et cetera, et

266
00:16:56.320 --> 00:16:59.890
cetera. So, yeah, there are
many things, there are many

267
00:16:59.890 --> 00:17:02.890
things. So, so F F
sharp code goes into fable.

268
00:17:03.430 --> 00:17:06.880
Fable uses a Bible. I
keep wanting to say babble,

269
00:17:06.890 --> 00:17:11.950
but using Bible to turn
that into modern JavaScript. And

270
00:17:11.950 --> 00:17:14.770
then how does, how is
Elm or El mesh? What

271
00:17:14.770 --> 00:17:17.620
is that? And why is
that so inspirational to the

272
00:17:17.620 --> 00:17:21.790
F sharp community? So Elmisa
different languages. Also, our language

273
00:17:21.790 --> 00:17:25.330
is a component to a
Java strip. It's similar to

274
00:17:25.390 --> 00:17:30.160
a sharp, it's a, a
completely different language because it's

275
00:17:30.160 --> 00:17:33.280
not ours. Obviously it's not,
it's not a dotnet language.

276
00:17:33.280 --> 00:17:37.450
And that it's only a,
it's only compiling to JavaScript

277
00:17:37.450 --> 00:17:40.720
at the moment. And one
of the interesting thing of

278
00:17:40.720 --> 00:17:44.710
Elm is that it comes
with an architecture built in

279
00:17:44.710 --> 00:17:48.820
which is called also the
own architecture. And it's really

280
00:17:48.840 --> 00:17:55.140
nice. And, and AVN AVN
discovered the architectural myself. It

281
00:17:55.140 --> 00:18:01.710
was the, it's not XIV
star model updates, not exactly

282
00:18:03.240 --> 00:18:07.460
the only Allen, but, but
it's Elma helped popularize the,

283
00:18:08.260 --> 00:18:13.020
the, the architecture in, and
now another author, Eugene, he

284
00:18:13.020 --> 00:18:18.480
created fable elements, which is
basically taking this architecture on

285
00:18:18.510 --> 00:18:23.160
all the advantages to fable.
So it's, I think it's

286
00:18:23.280 --> 00:18:26.040
really good that we can
use a F sharp and,

287
00:18:26.250 --> 00:18:29.220
and we can take 'em,
I don't want to reinvent

288
00:18:29.220 --> 00:18:31.830
the wheel. And I want
to, to make a, everything

289
00:18:31.830 --> 00:18:33.810
that the firewall way or
something like that, and know

290
00:18:33.870 --> 00:18:36.020
if something is working like
in this case, they own

291
00:18:36.030 --> 00:18:40.320
architecture and really happy to
take it. And if you

292
00:18:40.320 --> 00:18:44.220
may, and, and you'll see
that, I don't know. I,

293
00:18:44.220 --> 00:18:50.070
I try to spin very
quickly. What's the, the architectural

294
00:18:50.070 --> 00:18:53.100
boat. If you want to
know more about it, we

295
00:18:53.100 --> 00:18:58.110
have a fable Elemis, you
can, from the samples browser,

296
00:18:58.110 --> 00:19:00.990
you can see, Oh, maybe
from the, I assume from

297
00:19:00.990 --> 00:19:05.780
the heartbeats, I will go
ahead and put links to

298
00:19:05.780 --> 00:19:07.700
all of the things we've
talked about in the show

299
00:19:07.700 --> 00:19:11.220
notes. So yeah, you can
just make a grocer for

300
00:19:11.240 --> 00:19:16.790
a flavor, or just go
directly to the Elmo. What

301
00:19:16.790 --> 00:19:18.350
I was going to say
was I find so interesting

302
00:19:18.350 --> 00:19:22.700
about this is your to
use an analogy. I use

303
00:19:22.700 --> 00:19:27.170
a lot you're, you're snapping
Lego pieces together very nicely

304
00:19:27.350 --> 00:19:31.880
because you're trying to avoid
reinventing or rewriting the wheel,

305
00:19:32.330 --> 00:19:34.430
which I think is really,
I think it's nice. I

306
00:19:34.430 --> 00:19:37.460
mean, there's so many projects,
try to write stuff over

307
00:19:37.460 --> 00:19:40.280
again from scratch and here
you're saying it's just not

308
00:19:40.280 --> 00:19:43.310
necessary. No, no, I not.
And not that I don't

309
00:19:43.310 --> 00:19:45.830
want to, to, to be
the inventor or anything. And,

310
00:19:46.140 --> 00:19:50.240
and yeah, I, it just,
just starting this spread because

311
00:19:50.670 --> 00:19:53.930
I liked the SRV Martin
that I wanted to, eh,

312
00:19:53.990 --> 00:19:56.620
to see how they could
be applied to JavaScript because

313
00:19:56.630 --> 00:19:59.540
system, and if you also,
if Charlotte's are very nice

314
00:19:59.540 --> 00:20:02.540
feed, because it has the
speed of, of a script

315
00:20:02.540 --> 00:20:06.470
and language. So also he
has this module system, which

316
00:20:06.470 --> 00:20:11.000
is a, it fits very
well with the modern JavaScript

317
00:20:11.000 --> 00:20:15.830
models. So I just went
to, to apply, but I

318
00:20:15.830 --> 00:20:20.000
don't want to, to say
that I know everything, and

319
00:20:20.000 --> 00:20:22.670
now that I know how
to write the perfect way

320
00:20:22.670 --> 00:20:27.020
obligation. So I'm also learning
on the waist on when

321
00:20:27.020 --> 00:20:30.470
the people start to contribute
or not. And I also

322
00:20:30.590 --> 00:20:34.850
learning a lot from the
community that are, are contributing

323
00:20:34.850 --> 00:20:36.860
in this thing, like Elemis,
and, and now we have

324
00:20:36.990 --> 00:20:42.920
also a full mouth, which
is rubber or billions to

325
00:20:43.310 --> 00:20:45.860
a bull Mount, which is
our CS framework. Very similar

326
00:20:45.860 --> 00:20:50.080
to what disrupt, sorry, I'm
just reading out the names,

327
00:20:50.110 --> 00:21:02.260
but Meister, you own a
Walmart framework for a Flexbox.

328
00:21:02.470 --> 00:21:05.470
Yes. And it's, it's similar
to put the syrup out

329
00:21:05.470 --> 00:21:08.500
there either. It has no
JavaScript. So it's, it's very

330
00:21:08.500 --> 00:21:12.170
easy to combine it with
other JavaScript frameworks and a

331
00:21:12.460 --> 00:21:14.740
full map, which is the
same justice starting with F

332
00:21:15.970 --> 00:21:20.470
it's an elaborate greeted with,
by a maximum module. And

333
00:21:21.100 --> 00:21:27.700
here's some it's, it's, it's
really, it's really fitting very

334
00:21:27.700 --> 00:21:32.020
well when you're writing out
a fable application with using

335
00:21:32.020 --> 00:21:36.340
the farewell enemies and also
react. And yeah, it's a

336
00:21:36.340 --> 00:21:39.760
very difficult to see with
a display without the gold.

337
00:21:39.760 --> 00:21:43.420
And I, it just recommended
everybody to, to have a

338
00:21:43.420 --> 00:21:46.600
look at the samples and
give you that today, we

339
00:21:46.600 --> 00:21:50.080
have the rebel, unfortunately at
the moment the rebel, eh,

340
00:21:50.110 --> 00:21:53.380
cannot grow library. So, eh,
the only examples we have

341
00:21:53.380 --> 00:21:56.560
in the rebel is about
like a drawing, the Cambus

342
00:21:56.580 --> 00:22:00.820
or things like this, but
we are trying to implement

343
00:22:00.820 --> 00:22:05.200
this a library loading feature.
So, so people can try

344
00:22:05.200 --> 00:22:10.540
them out. And, and also
we are working this, we

345
00:22:10.540 --> 00:22:14.260
are entering the third year
for a favor, and we

346
00:22:14.260 --> 00:22:16.990
are, I'm hoping that this
the constellation year for fail.

347
00:22:16.990 --> 00:22:20.080
And now we are just
focusing more on the developer

348
00:22:20.080 --> 00:22:23.290
experience because it's true that
I got some feedback from

349
00:22:23.290 --> 00:22:26.830
people that are, as it's
happening. Now that I'm talking,

350
00:22:27.790 --> 00:22:31.690
I'm saying many words that
it can be, can sound

351
00:22:33.280 --> 00:22:36.380
foreign for people that are
not used to JavaScript because

352
00:22:36.480 --> 00:22:40.030
some, so it's a, it's
a bit difficult, some extra

353
00:22:40.030 --> 00:22:42.100
with the rubbish. They told
me that it's a bit

354
00:22:42.100 --> 00:22:45.280
difficult because fable requires at
the beginning a bit of

355
00:22:45.280 --> 00:22:48.580
knowledge of the JavaScript cause
systems. So, eh, we want

356
00:22:48.580 --> 00:22:54.250
to automatize things. We have
a rate this, a good

357
00:22:54.250 --> 00:22:57.790
estate because we are using
the.net SDK templates. So if

358
00:22:57.790 --> 00:23:01.150
you go to federal.io and
you go to the get

359
00:23:01.180 --> 00:23:06.610
started session section, you can,
you know, very fewer steps.

360
00:23:06.930 --> 00:23:09.700
And in a couple of
minutes you can have a

361
00:23:09.700 --> 00:23:13.660
febrile app running. So we
can, we want to still

362
00:23:13.660 --> 00:23:18.140
improve this experience. So it's,
it's easier for developers to

363
00:23:18.180 --> 00:23:21.610
start, without having to know
about a wetback, for example,

364
00:23:21.610 --> 00:23:24.100
which can be a bit
daunting at the beginning, because

365
00:23:24.100 --> 00:23:28.360
it has some complicated configuration
files, but, but yeah, we

366
00:23:28.360 --> 00:23:31.780
are building a nicest stack.
And also on the server

367
00:23:31.790 --> 00:23:36.460
side, of course we have
these suave or a giraffe

368
00:23:36.910 --> 00:23:40.270
server that is using the
sp.net core in the background.

369
00:23:40.870 --> 00:23:45.770
So I think we are,
we are getting a very

370
00:23:45.770 --> 00:23:48.530
nice stack to, to greet
up, to get some I'm

371
00:23:48.530 --> 00:23:51.170
doing, I'm a certain to,
to, to use this stack

372
00:23:51.170 --> 00:23:56.330
myself for professional operates. And,
and it's a, it feels

373
00:23:56.330 --> 00:23:59.810
really nice. So I want
to read more about this,

374
00:24:00.290 --> 00:24:03.080
the experience. I want the
other developers to be able

375
00:24:03.080 --> 00:24:06.310
to serve this Well, as
soon as it's a huge

376
00:24:06.310 --> 00:24:09.070
amount of work. And I
think your point that you

377
00:24:09.070 --> 00:24:11.170
do have to know a
little bit about the JavaScript

378
00:24:11.200 --> 00:24:15.670
ecosystem is true, but you've,
you've made it very clean

379
00:24:15.670 --> 00:24:19.930
because all you need really
is.net SDK. You need node,

380
00:24:20.590 --> 00:24:23.830
you need some package manager
like yarn or NPM for

381
00:24:23.830 --> 00:24:27.280
your JavaScript. And then F
sharp has a really nice

382
00:24:27.280 --> 00:24:31.660
experience inside a vs code
with a thing called ionize,

383
00:24:33.010 --> 00:24:35.620
right? So you get a
really nice experience. And that

384
00:24:35.620 --> 00:24:38.560
brings me back to a
thing that you mentioned about

385
00:24:38.560 --> 00:24:42.520
hot swapping. One of the
nice things about JavaScript is

386
00:24:42.520 --> 00:24:45.340
that feeling that you make
a change and you hit

387
00:24:45.820 --> 00:24:50.260
F five and things just
update. And I understand that

388
00:24:50.260 --> 00:24:53.410
a F sharp can do
something like that as well,

389
00:24:53.500 --> 00:24:56.160
but this hot module is
robbing. Yeah. And not even

390
00:24:56.170 --> 00:24:58.210
a, you don't even need
to, to hit the F

391
00:24:58.210 --> 00:25:03.070
five. So just hit the
control. S so do you

392
00:25:03.070 --> 00:25:05.800
just save the file? And
the Bates will reload and

393
00:25:05.800 --> 00:25:08.770
not, not even reloading because
when you're using this, a

394
00:25:08.830 --> 00:25:14.410
HeartModel replacement feature is just
injecting something. This is something

395
00:25:14.410 --> 00:25:18.760
done by Webpack. So we
had to do, I didn't

396
00:25:18.760 --> 00:25:23.930
do it myself. It was
my team. Again, if this

397
00:25:23.930 --> 00:25:27.850
female compatible with hot model
replacement, and now we're back,

398
00:25:27.850 --> 00:25:31.090
we'll inject the new code.
So these very good, because

399
00:25:31.870 --> 00:25:33.970
especially when you have an
application that you have some

400
00:25:33.970 --> 00:25:37.420
estate and you don't want
to restart a fence again.

401
00:25:38.140 --> 00:25:41.650
And so you just inject
the cord and you can

402
00:25:41.650 --> 00:25:44.470
see the changes. And, but
you don't have to, for

403
00:25:44.470 --> 00:25:48.160
example, you have a yard
testing, a formal formulary or

404
00:25:48.160 --> 00:25:52.180
something, and you don't want
to type everything again. So

405
00:25:52.180 --> 00:25:55.030
the changes will be seen
without altering the state of

406
00:25:55.030 --> 00:25:58.840
the apana. And it's really,
really a very nice experience.

407
00:25:58.840 --> 00:26:01.630
So for example, in working
with a couple of monitors

408
00:26:01.630 --> 00:26:03.760
or not, and I can
just type, and I see

409
00:26:03.760 --> 00:26:07.090
the changes happening life on
the other monitor, and now

410
00:26:07.120 --> 00:26:10.060
I don't have even need
to worry about changing the

411
00:26:10.060 --> 00:26:13.360
environment. So it's a, it's
really nice. And now I'm

412
00:26:13.360 --> 00:26:18.070
also, there are other tools
for debugging, like without the

413
00:26:18.070 --> 00:26:21.850
patrols, even in spite of
the name is they are

414
00:26:21.850 --> 00:26:24.910
compatible with our frameworks. And
now also with the Elemis

415
00:26:24.910 --> 00:26:28.570
framework, and you can just
recall all the States that

416
00:26:30.880 --> 00:26:33.360
you can just have, ah,
he saw you off all

417
00:26:33.380 --> 00:26:36.880
this snapshot of this CTO.
You've been doing it, your

418
00:26:36.880 --> 00:26:40.990
obligation, and go back time,
traveling in Europe. And, and,

419
00:26:41.650 --> 00:26:44.010
yeah, sorry that, that it's
it's to explain the, the

420
00:26:44.700 --> 00:26:48.660
very quickly, but you can
go to the examples and

421
00:26:48.660 --> 00:26:51.570
the, on the, on the
blog post, you can have

422
00:26:51.720 --> 00:26:55.430
a feeling of, ah, experience
using these tools. Yeah, I,

423
00:26:55.430 --> 00:26:58.610
yeah, I would not. Don't
sell yourself short. It's always

424
00:26:58.610 --> 00:27:01.010
hard to explain such things
on a podcast, and I

425
00:27:01.010 --> 00:27:05.690
think you're doing a fine
job. So when people plug

426
00:27:05.690 --> 00:27:08.030
all these things in, it's
a, it's a number of

427
00:27:08.030 --> 00:27:13.640
small, you know, kind of
single tasked components. And, you

428
00:27:13.640 --> 00:27:16.700
know, you've, you've talked about
how you leverage yarn and

429
00:27:16.700 --> 00:27:20.660
you leverage Babel and you
leverage these different tools. So

430
00:27:20.660 --> 00:27:24.230
that, that fable doesn't have
to do more than it's

431
00:27:24.230 --> 00:27:28.100
kind of single responsibility, which
is a very unique perspective

432
00:27:28.100 --> 00:27:30.770
and a very clean way
to do things. Let me

433
00:27:30.770 --> 00:27:33.260
ask you this. If someone
who is a new developer

434
00:27:33.260 --> 00:27:35.630
comes to this and they
see all of these different

435
00:27:35.630 --> 00:27:39.860
dependencies, are there any risks?
Is there anything that they

436
00:27:39.860 --> 00:27:44.330
could, could run into or
have trouble with if, because

437
00:27:44.330 --> 00:27:47.780
everything seems to be kind
of zero point something version,

438
00:27:47.780 --> 00:27:50.330
you know, and I wonder
if people might wonder if

439
00:27:50.330 --> 00:27:54.830
this is really something ready
for production A yeah, I

440
00:27:54.830 --> 00:27:57.770
think definitely a failure spread
for production. They are. If

441
00:27:57.770 --> 00:27:59.970
you were to decide the,
you'll see on the bottom

442
00:28:00.110 --> 00:28:04.250
page, is there a symbol
of companies that are really

443
00:28:04.250 --> 00:28:08.420
using fable in production? I
use fable myself in my

444
00:28:08.420 --> 00:28:12.740
professional breaks and, and I,
that we use things that

445
00:28:12.740 --> 00:28:17.150
are, are really well supported.
And for example, we, we

446
00:28:17.150 --> 00:28:21.410
use the Army's architecture that
has to be improved by

447
00:28:21.410 --> 00:28:25.270
all the users. And now
also has inspired the frameworks,

448
00:28:25.480 --> 00:28:29.300
JavaScript frameworks that are very
widely used now nowadays like

449
00:28:29.480 --> 00:28:33.860
Redux, for example, and we
are using for the rendering

450
00:28:33.860 --> 00:28:38.330
we are using mainly react
that I probably don't have

451
00:28:38.330 --> 00:28:41.510
to, to, to talk about
it because he's very famous

452
00:28:41.510 --> 00:28:46.220
this Facebook library now. So,
so yeah, w we don't,

453
00:28:46.250 --> 00:28:50.330
we don't take so many
dependencies is through that. When

454
00:28:50.330 --> 00:28:53.390
you see NPM and you
open the node modules folder,

455
00:28:53.680 --> 00:28:56.600
it looks like a, like
a lot of dependencies, but

456
00:28:56.600 --> 00:29:00.680
are, but it's actually, it's
a solid tools that are

457
00:29:00.680 --> 00:29:06.500
really used by thousands of
JavaScript developers. And they are

458
00:29:06.500 --> 00:29:09.830
really well supported and are
very well adjusted. So, eh,

459
00:29:09.860 --> 00:29:12.620
we are just, as they
say, a standing on the

460
00:29:12.620 --> 00:29:15.770
solar software giant. So I
don't think you need to

461
00:29:15.770 --> 00:29:19.040
worry about that. And, and
we have also this, because

462
00:29:19.220 --> 00:29:23.330
one of the contributors to
farewell and ecosystem is stepping

463
00:29:23.330 --> 00:29:27.320
forward, which the author of
the bucket, which is there's

464
00:29:27.330 --> 00:29:30.710
a big, big kitchen manager,
which is actually something that

465
00:29:30.710 --> 00:29:35.570
we use for fable. We
use packet for the.net. You

466
00:29:35.630 --> 00:29:39.740
get the dependencies and a
jar or NBN, but the

467
00:29:39.770 --> 00:29:44.080
community usually use usage yarn
for the NPM dependencies. And

468
00:29:44.080 --> 00:29:46.360
now they brought up things
that are, we use this

469
00:29:46.810 --> 00:29:50.560
look file that will, we
looked at the first year

470
00:29:50.620 --> 00:29:54.220
of all the businesses. So
it means that that if

471
00:29:54.580 --> 00:29:58.120
you come back to an
application, six months later, you

472
00:29:58.120 --> 00:30:01.570
just install everything and the
look fine. We'll install exactly

473
00:30:01.570 --> 00:30:04.030
the same versions that you're
using. So even if the

474
00:30:05.110 --> 00:30:08.230
packages have been updated, you
are sure that this one

475
00:30:08.230 --> 00:30:11.730
break your obligation It's in.
It is really, I can

476
00:30:11.730 --> 00:30:14.340
say it is really easy
to get started once you

477
00:30:14.340 --> 00:30:18.090
have dotnet core. And I
used, I just installed yarn.

478
00:30:18.750 --> 00:30:20.850
All I had to do
was say dotnet new and

479
00:30:20.850 --> 00:30:24.150
installed a fable dot template.
I did a dotnet new

480
00:30:24.150 --> 00:30:27.990
fables, et cetera, et cetera.
And I'm actually sitting here

481
00:30:27.990 --> 00:30:30.390
talking to you, and while
we're chatting, I've got local

482
00:30:30.390 --> 00:30:33.180
host, 80, 80 up, and
I can see my modules

483
00:30:33.180 --> 00:30:36.120
getting built in the background
and I can update them.

484
00:30:36.150 --> 00:30:39.690
And they're getting compiled and
I'm already running this. And

485
00:30:39.690 --> 00:30:42.720
it took me, I would
say, three minutes to do

486
00:30:43.830 --> 00:30:45.930
so. I would, I would
definitely encourage people to check

487
00:30:45.930 --> 00:30:48.960
it out. This is just
going to fable.io and going

488
00:30:48.960 --> 00:30:52.590
to getting started. It's a
pretty great example of the.net

489
00:30:52.620 --> 00:30:57.030
community, making something, you know,
completely on their own, that

490
00:30:57.030 --> 00:31:00.660
is really exceptional. And, and
it fits nicely with the

491
00:31:00.660 --> 00:31:03.510
JavaScript community. So this could
be the bridge that, that

492
00:31:03.510 --> 00:31:05.940
the listeners are looking for
to bridge their, their love

493
00:31:05.940 --> 00:31:09.030
of.net and their love of
job. Yeah, yeah, absolutely. I

494
00:31:09.030 --> 00:31:13.590
think sometimes, sometimes there is
slicker this, some people there,

495
00:31:13.590 --> 00:31:17.880
they, they, they mock JavaScript
and, and sometimes it seems

496
00:31:17.880 --> 00:31:20.190
that the reason I have
at least compared to JavaScript

497
00:31:20.190 --> 00:31:23.700
is because people say that
the JavaScript is really bad

498
00:31:23.700 --> 00:31:26.070
and, and I didn't want
to use their rescue, but

499
00:31:27.150 --> 00:31:29.670
at some point they have
to do somewhere web, front

500
00:31:29.670 --> 00:31:33.930
end development, but I don't
want to fail to be

501
00:31:34.260 --> 00:31:37.740
out of these spirits. I,
I just, I liked JavaScript.

502
00:31:37.770 --> 00:31:40.620
I liked Tabish grip and
I seen, of course, you

503
00:31:40.620 --> 00:31:45.510
need to know the, the,
the weak points, also the

504
00:31:45.510 --> 00:31:48.030
strong points. But I, I
like very much to this

505
00:31:49.020 --> 00:31:53.730
development experience where you see
the changes that are happening

506
00:31:54.150 --> 00:31:57.450
in real time in your,
your code and your obligation.

507
00:31:57.840 --> 00:32:00.870
So I want to have
the experience and they want

508
00:32:00.870 --> 00:32:04.470
to federal users to have
the same experience. So, and

509
00:32:04.470 --> 00:32:06.150
I need to really easy.
We have the, if you

510
00:32:06.150 --> 00:32:10.620
also to the documentation, UT
there's a documentation, there's a

511
00:32:10.620 --> 00:32:14.370
beta about the interaction, whichever
group. And also one of

512
00:32:14.370 --> 00:32:19.380
the gallons of fibula design
was to make really, really

513
00:32:19.380 --> 00:32:23.400
easy to, to interact with
the JavaScript. I can say

514
00:32:23.400 --> 00:32:27.240
that right now, it's even
easier interacting from a FCR

515
00:32:27.360 --> 00:32:29.820
with a JavaScript, with a
farewell that sometimes some things

516
00:32:29.820 --> 00:32:34.530
from F sharp with C
sharp, even if they are

517
00:32:34.530 --> 00:32:38.310
both in the same.net platform,
because we, we are using

518
00:32:38.310 --> 00:32:44.090
this mother JavaScript model. So
we can import anything, eh,

519
00:32:44.140 --> 00:32:48.320
any function for JavaScript. And
we can also export code

520
00:32:48.320 --> 00:32:53.480
from, eh, from FCR. So
we have some example in

521
00:32:53.480 --> 00:32:56.780
this channel nine interview that
you can go from the

522
00:32:56.810 --> 00:33:01.770
federal.io site. We show an
example of an application that

523
00:33:02.270 --> 00:33:05.180
we are importing, JavaScript gold,
and then we're exposing this

524
00:33:05.250 --> 00:33:08.270
FCR go to the JavaScript,
and then we are sending

525
00:33:08.270 --> 00:33:11.150
the back. Yeah. So it's
a very easy to see

526
00:33:11.480 --> 00:33:13.880
how easy is to interact
with the demo script. So

527
00:33:14.270 --> 00:33:17.450
if you need to use
any library of, if you

528
00:33:17.450 --> 00:33:21.020
can get some gold from
stack overflow in JavaScript, something

529
00:33:21.020 --> 00:33:24.440
like that. So it's really
a matter of seconds to

530
00:33:24.770 --> 00:33:29.390
Jack's important to your FSR
produce and favor. Fantastic. Well,

531
00:33:29.390 --> 00:33:32.060
thank you so much. Alfonso
Garcia, Karo for chatting with

532
00:33:32.060 --> 00:33:35.570
me today about fable and
the, the growing F sharp

533
00:33:35.570 --> 00:33:39.950
and JavaScript community. Thank you.
So thanks, Scott. This has

534
00:33:39.950 --> 00:33:43.070
been another episode of Hanselminutes
and we'll see you again

535
00:33:43.070 --> 00:33:43.580
next week.

