WEBVTT FILE

1
00:00:00.180 --> 00:00:03.360
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.360 --> 00:00:06.300
they make the show possible.
Today's show is sponsored by

3
00:00:06.300 --> 00:00:10.500
developer express, become a UI
superhero with dev express controls

4
00:00:10.500 --> 00:00:15.030
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.420 --> 00:00:19.500
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.500 --> 00:00:23.610
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.700 --> 00:00:45.170
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
<inaudible>. Hi, this is Scott

8
00:00:45.170 --> 00:00:47.720
Hanselman. This is another episode
of Hansel minutes. And today

9
00:00:47.720 --> 00:00:51.080
I'm talking with Alex Ellis. He's
the founder of the open

10
00:00:51.080 --> 00:00:53.990
fast project and a Docker
captain. And I'm a big

11
00:00:53.990 --> 00:00:59.120
fan of his blog@alexellis.io. How
are you, sir? I'm good.

12
00:00:59.150 --> 00:01:03.500
Thanks for having me, Scott.
Yeah, I started at your

13
00:01:03.500 --> 00:01:07.070
blog, which has grown into
just a huge resource for

14
00:01:07.310 --> 00:01:11.180
technical articles and tutorials on
Docker and Linux and raspberry

15
00:01:11.180 --> 00:01:14.510
pie and all kinds of
stuff. I found you originally

16
00:01:14.510 --> 00:01:17.840
on hacker news a long,
long time ago, and just

17
00:01:17.840 --> 00:01:20.360
every week, there's something great
on your blog. And then

18
00:01:20.360 --> 00:01:24.170
I saw that you had
built a wonderful project, which

19
00:01:24.170 --> 00:01:27.530
was a big raspberry PI
cluster that ran Kubernetes. And

20
00:01:27.530 --> 00:01:29.510
I knew that I needed
to do that as well.

21
00:01:30.980 --> 00:01:33.500
Can you maybe back me
up and tell me how

22
00:01:33.500 --> 00:01:36.500
you got that idea and
why are people building these

23
00:01:36.500 --> 00:01:41.270
things on, on raspberry PI?
Yeah, so I actually started

24
00:01:41.450 --> 00:01:44.120
a technical blog about two,
two and a half years

25
00:01:44.120 --> 00:01:47.600
ago, and I think I
easily hit a hundred or

26
00:01:47.600 --> 00:01:51.560
a few hundred posts already,
and there's at least a

27
00:01:51.740 --> 00:01:54.710
80 on DACA and most
of the Docker ones about

28
00:01:55.340 --> 00:01:59.060
containers and the raspberry pie
combined, not just seems like

29
00:02:00.590 --> 00:02:05.030
the recipe PI's really aimed
at all people. It really

30
00:02:05.030 --> 00:02:07.400
brings people together. So kids
will use it to learn

31
00:02:07.400 --> 00:02:10.190
how to code or to
play games. And then adults

32
00:02:10.250 --> 00:02:15.410
at home will just get
absolutely fascinated by this ability

33
00:02:15.410 --> 00:02:19.550
to control hardware or to
build a cluster. And, you

34
00:02:19.550 --> 00:02:24.140
know, I was no different.
And after initial, initially playing

35
00:02:24.140 --> 00:02:25.850
with it and thinking, well,
I can't really use this

36
00:02:25.850 --> 00:02:28.730
as a desktop. I started
looking at what else could

37
00:02:28.730 --> 00:02:34.970
I do, which involve controlling
hardware and building clusters? Yeah.

38
00:02:35.030 --> 00:02:38.180
I had been thinking about
Kubernetes for a long, long

39
00:02:38.180 --> 00:02:40.400
time and I thought to
myself, Oh, I'll just do,

40
00:02:41.090 --> 00:02:43.040
I'll do this online. I'll
do it at Google cloud.

41
00:02:43.040 --> 00:02:44.510
I'll do it at Azure.
I'll do it at whatever.

42
00:02:45.140 --> 00:02:48.620
And somehow it didn't capture
my imagination. But sitting here

43
00:02:48.620 --> 00:02:51.440
talking to you and looking
at my six raspberry PI

44
00:02:51.470 --> 00:02:55.190
cluster running on the metal,
I felt like I learned

45
00:02:55.370 --> 00:02:59.090
more about Kubernetes. It wasn't
this abstract thing that ran

46
00:02:59.170 --> 00:03:02.170
the cloud somewhere that I
couldn't see it was, it

47
00:03:02.170 --> 00:03:05.980
was real. And, and building
it using, using your instructions

48
00:03:06.010 --> 00:03:09.340
just made it more fun
and more, more, more physical

49
00:03:09.340 --> 00:03:12.270
to me. Yeah, I think
that stuff For me, one

50
00:03:12.270 --> 00:03:15.330
of the things people absolutely
love is that satisfaction of,

51
00:03:15.870 --> 00:03:19.380
of being able to watch
the Blinken lights, see all

52
00:03:19.380 --> 00:03:22.980
of those packets going backwards
and forwards and having something

53
00:03:22.980 --> 00:03:26.760
that's just real and tangible.
Now, one of my colleagues,

54
00:03:26.760 --> 00:03:28.350
when I told him I
was going to buy an

55
00:03:28.350 --> 00:03:30.330
Intel NERC and have it
at home as a home

56
00:03:30.330 --> 00:03:33.450
lab. And he said, well,
you know, why waste 400

57
00:03:33.450 --> 00:03:37.350
pounds, $600 when you can
just run a VM on

58
00:03:37.350 --> 00:03:40.650
your laptop. And, you know,
I knew that he was

59
00:03:40.650 --> 00:03:42.090
kind of one of the
guys who just didn't get

60
00:03:42.090 --> 00:03:46.020
it. And I've had just
as much satisfaction of running

61
00:03:46.020 --> 00:03:49.410
a, you know, a small
low-powered server, 24 seven as

62
00:03:49.410 --> 00:03:52.080
I have with my raspberry
pies. And you know, my

63
00:03:52.080 --> 00:03:55.200
house subsequently follow them. Occasionally
I have to just shut

64
00:03:55.260 --> 00:03:57.000
a whole load of them
down so I can stop

65
00:03:57.000 --> 00:04:03.900
worrying about the IP address
conflicts. That's fantastic. After I

66
00:04:03.900 --> 00:04:06.540
built mine from your instructions.
And then I wrote up

67
00:04:06.570 --> 00:04:09.660
instructions on how I bumped
into things. I did notice

68
00:04:09.660 --> 00:04:11.760
that a lot of things
change. I've had people say

69
00:04:11.760 --> 00:04:13.710
that they've read my blog,
read your blog. And then

70
00:04:13.710 --> 00:04:15.750
they found that a version
that had changed or that

71
00:04:15.990 --> 00:04:19.410
instructions worked and then they
don't work anymore. Why is

72
00:04:19.410 --> 00:04:22.350
that? Is the community moving
faster than our blogs can,

73
00:04:22.730 --> 00:04:26.730
can, can write it down.
So there's two main ways

74
00:04:26.730 --> 00:04:29.250
of doing clustering. You've hit,
I guess you've hit on

75
00:04:29.250 --> 00:04:32.550
the Coobernetti's, which is probably
from about midway this year

76
00:04:32.550 --> 00:04:34.740
onwards is what I've been
writing about. But before that,

77
00:04:34.800 --> 00:04:37.320
I was writing very much
about Docker swarm. Now there

78
00:04:37.320 --> 00:04:41.010
was the old incarnation of
that and the more modern

79
00:04:41.010 --> 00:04:45.060
one launched about a year
ago now, I find that

80
00:04:45.540 --> 00:04:49.260
generally the Docker swarm doesn't
break the instructions for installing

81
00:04:49.260 --> 00:04:51.750
Docker a pretty much a
one line install. They they're

82
00:04:51.750 --> 00:04:57.210
kind of static. However, even
with regular Coobernetti's installation, I

83
00:04:57.210 --> 00:04:59.400
did keep an auntie's in
10 minutes on bare metal.

84
00:04:59.970 --> 00:05:03.870
I find every other week
it's completely broken and I've

85
00:05:03.870 --> 00:05:06.420
not changed anything. And it
will be because we've gone

86
00:05:06.420 --> 00:05:12.570
from 1.6 to 1.7 or
1.7 to 1.8. And it

87
00:05:12.570 --> 00:05:15.270
may be that the networking
driver you were using as

88
00:05:15.270 --> 00:05:17.790
now on a different URL
to where it was and

89
00:05:17.790 --> 00:05:20.850
they've broken their redirect. And
you're right. It just seems

90
00:05:20.850 --> 00:05:26.610
like keeping up with Coobernetti's
is a very time consuming

91
00:05:26.610 --> 00:05:30.000
exercise and folks like us
who are trying to condense

92
00:05:30.000 --> 00:05:32.820
it down and provide solutions
for other folks to get

93
00:05:32.820 --> 00:05:37.230
up to speed quickly is
really hard. So I think

94
00:05:37.470 --> 00:05:40.170
one of the things that
we do do is we

95
00:05:40.170 --> 00:05:45.000
condense down the concepts as
well as the individual steps.

96
00:05:45.390 --> 00:05:47.250
And so it helps when
people come and they say,

97
00:05:47.250 --> 00:05:49.890
well, actually it all works
apart from that one, networking,

98
00:05:49.890 --> 00:05:52.350
LinkedIn work I'll Google it
and they can pretty much

99
00:05:52.350 --> 00:05:55.860
get going again, but it
is a shame. And I,

100
00:05:55.860 --> 00:05:57.500
you know, I kind of
wished that there was a

101
00:05:57.500 --> 00:06:02.770
little bit more cohesion with
that. Yeah. I used the

102
00:06:02.770 --> 00:06:07.300
example of many, many, many
years ago, 1986, 1987. There

103
00:06:07.300 --> 00:06:08.860
was a version of gift
that came out. It was

104
00:06:08.860 --> 00:06:11.650
gift 87 and then gift
89 came out and then

105
00:06:11.650 --> 00:06:14.170
gift 89 a and it
was a time where it

106
00:06:14.170 --> 00:06:17.140
was like, can we just
pick a format and not

107
00:06:17.140 --> 00:06:20.200
break it? And that sounds
silly that because now we

108
00:06:20.200 --> 00:06:22.450
take all of those things
for granted, the same thing

109
00:06:22.450 --> 00:06:27.100
happened with <inaudible> and videos
and compression. It seems like

110
00:06:27.700 --> 00:06:29.920
we're trying to figure out
what the best solutions are

111
00:06:29.920 --> 00:06:32.260
for all of these things.
And maybe in the future,

112
00:06:32.260 --> 00:06:33.970
we'll be able to do
a one liner that sets

113
00:06:33.970 --> 00:06:37.240
up a swarm or sets
up a cluster. But today

114
00:06:37.240 --> 00:06:39.820
maybe it doesn't feel like
it's ready. Yeah. I mean,

115
00:06:39.930 --> 00:06:43.180
people run the stuff in
production. You can do it.

116
00:06:43.450 --> 00:06:46.240
You just have to be
aware that the ecosystem is

117
00:06:46.240 --> 00:06:49.960
changing. And much of keeping
NetEase is still in an

118
00:06:49.960 --> 00:06:52.930
alpha beta state, which means
it's not ready for production.

119
00:06:54.070 --> 00:06:57.130
The D the concept of
a deployment, which is how

120
00:06:57.130 --> 00:06:59.200
you say, this is my
app. This is how many

121
00:06:59.200 --> 00:07:03.250
replicas I want you please
do the magic. I need

122
00:07:03.250 --> 00:07:06.790
just became stable, Germany available.
And yet that's something people

123
00:07:06.790 --> 00:07:11.560
have been using in production
for quite some time. Yeah.

124
00:07:12.730 --> 00:07:15.430
So on copper of all
of this, after I built

125
00:07:15.430 --> 00:07:18.850
my hello world, you know,
I use.net and I know

126
00:07:18.850 --> 00:07:22.480
that you've transitioned to go
there's Python examples. I went

127
00:07:22.480 --> 00:07:25.360
and I did a basically
put up a hello world.net

128
00:07:25.360 --> 00:07:29.320
website. But then on top
of that, there's open fast,

129
00:07:29.320 --> 00:07:33.640
the idea of a serverless
infrastructure. Maybe you could juxtapose

130
00:07:33.700 --> 00:07:36.070
the, kind of the interest
in the irony of a

131
00:07:36.070 --> 00:07:39.190
serverless infrastructure where you don't
think about the servers and

132
00:07:39.190 --> 00:07:41.470
how fun it is to
build a project like a

133
00:07:41.470 --> 00:07:44.140
raspberry PI cluster, where all
you think about is the

134
00:07:44.140 --> 00:07:48.220
servers in the metal. Yeah.
So when You know, when

135
00:07:48.220 --> 00:07:51.640
I go and I speak
about, about serverless and open

136
00:07:51.640 --> 00:07:54.730
fast, what I really start
to try to do is

137
00:07:54.730 --> 00:07:58.870
explain what we have is
a new architectural pattern under

138
00:07:58.870 --> 00:08:02.110
our belt, which is serverless
functions. The functions are small

139
00:08:02.110 --> 00:08:08.470
reusable, discrete pieces of code
that you deploy once and

140
00:08:08.470 --> 00:08:10.780
pretty much forget about the
system manages it for you.

141
00:08:11.800 --> 00:08:14.410
Now, when you pick open
FAS, what happens is you

142
00:08:14.410 --> 00:08:20.710
actually get a handler that
you write and define you,

143
00:08:20.710 --> 00:08:24.520
say what dependencies you want,
and everything else is kind

144
00:08:24.520 --> 00:08:26.830
of like magic for you.
You don't have to learn

145
00:08:28.190 --> 00:08:30.670
DACA in great detail. You
don't have to learn keeping

146
00:08:30.670 --> 00:08:33.040
it is in great detail.
In fact, you can swap

147
00:08:33.070 --> 00:08:37.090
out Coobernetti's for nomad from
Hashi Corp or even Docker

148
00:08:37.090 --> 00:08:39.430
swarm, and everything will pretty
much work exactly the same.

149
00:08:39.850 --> 00:08:42.490
And so really we're looking
at a pattern that just

150
00:08:42.760 --> 00:08:46.090
is just as disruptive as
microservices, where in fact, it's

151
00:08:46.090 --> 00:08:51.100
almost like nano services. These
pieces of code really help

152
00:08:51.100 --> 00:08:54.520
you focus on the task
at hand, rather than managing

153
00:08:55.140 --> 00:08:57.990
everything yourself. That's really what
we're focusing on. So we'll

154
00:08:57.990 --> 00:09:02.040
include batteries, included ways of
doing stuff, and that's why

155
00:09:02.130 --> 00:09:06.680
it's kind of closer to
that serverless model. That's a

156
00:09:06.680 --> 00:09:10.010
great, that's a great point.
I remember many years ago,

157
00:09:10.010 --> 00:09:12.950
when we used to build
web farms, we'd go and

158
00:09:12.950 --> 00:09:18.080
buy load balancers as dedicated
devices. And that the idea

159
00:09:18.080 --> 00:09:20.420
of making a load balancer
and making a web form

160
00:09:20.420 --> 00:09:24.620
was like a foreign language.
It was an amazing miracle

161
00:09:24.620 --> 00:09:26.570
and you needed to go
and hire a company and

162
00:09:26.570 --> 00:09:29.690
a consultant to do it.
And now, and then it

163
00:09:29.690 --> 00:09:32.270
became a check box and
a slider bar, somewhere in

164
00:09:32.270 --> 00:09:35.390
the cloud. And now with
things like, you know, zits

165
00:09:35.400 --> 00:09:38.030
now you just press enter.
And the web farm is

166
00:09:38.030 --> 00:09:42.080
implied with serverless. It's just
hidden from you entirely. You

167
00:09:42.080 --> 00:09:45.680
don't even think about it.
You just write functionality. That's

168
00:09:45.680 --> 00:09:48.950
right. And I think when
you get to that experience,

169
00:09:50.540 --> 00:09:53.870
you, you, you've kind of
hit serverless on the head.

170
00:09:53.900 --> 00:09:56.930
That's exactly where we want
to be. Now, whether your

171
00:09:56.930 --> 00:10:00.230
ops guys have actually provisioned
a cluster that you don't

172
00:10:00.230 --> 00:10:03.500
see, or whether a cloud
provider has provisioned a cluster

173
00:10:03.530 --> 00:10:05.630
that you don't see and
don't understand the bidding of

174
00:10:06.110 --> 00:10:10.040
it's kind of the same.
I thought it was interesting

175
00:10:10.040 --> 00:10:12.380
when I was learning about
open, fast. And again, this

176
00:10:12.380 --> 00:10:15.980
is open F a S
a that people can go

177
00:10:15.980 --> 00:10:18.350
and Google for. And when
I was learning about this

178
00:10:18.350 --> 00:10:20.510
and trying it out, the
first thing I was struck

179
00:10:20.510 --> 00:10:23.660
by was that I wasn't
talking HDDP I was doing

180
00:10:23.660 --> 00:10:28.250
console output. And I was
like, that's weird. Like, I'm

181
00:10:28.250 --> 00:10:30.560
doing a website. I was
doing a web function. I

182
00:10:30.560 --> 00:10:35.270
should talk to HTTP somehow,
but it didn't, it didn't

183
00:10:35.270 --> 00:10:37.700
prevent me from really doing
anything. Talk to me about

184
00:10:37.700 --> 00:10:41.930
that architectural decision and why
that's interesting. So the thing

185
00:10:41.930 --> 00:10:46.610
about HTTP is that it's
a, it's a demon for

186
00:10:46.640 --> 00:10:50.920
running long running processes, and
it's a, it's a text

187
00:10:50.920 --> 00:10:55.310
protocol, really, when you come
to open files, you're, you're

188
00:10:55.310 --> 00:10:59.510
effectively writing to them to
most intents and purposes, a

189
00:10:59.510 --> 00:11:02.990
console application, or handle it
that belongs in a console

190
00:11:02.990 --> 00:11:06.410
application. And it goes back
even further in time to

191
00:11:06.410 --> 00:11:10.790
CGI and fast CGI, which
were two technologies that came

192
00:11:10.790 --> 00:11:13.820
out around the nineties and
they were how the web

193
00:11:14.060 --> 00:11:17.900
originally scaled. Now, they, they
kind of lost out to

194
00:11:17.960 --> 00:11:23.780
HTTP and these long running
demons like Apache. And so

195
00:11:24.500 --> 00:11:27.500
you will still see some
parts of CGI modifications, but

196
00:11:27.500 --> 00:11:31.490
they'll tend to run nice,
highly optimized service. Instead. Now

197
00:11:31.490 --> 00:11:33.590
that means that we're just
kind of used to that

198
00:11:34.730 --> 00:11:37.160
just like we are with,
with smartphones now. Like we

199
00:11:37.160 --> 00:11:40.850
wouldn't, we wouldn't know how
to go back. However, there

200
00:11:40.850 --> 00:11:43.970
are several things that make
it really super well suited

201
00:11:43.970 --> 00:11:47.420
to a serverless architecture, particularly
that concept of a short

202
00:11:47.420 --> 00:11:51.020
running task that has an
input and an a, Okay.

203
00:11:51.380 --> 00:11:55.420
And when you are shelling
out to these processes, are

204
00:11:55.420 --> 00:11:59.320
you making new ones? Are
you reusing things? There's, they're

205
00:11:59.320 --> 00:12:01.480
pooling, are you talking over
a socket or a pipe

206
00:12:01.480 --> 00:12:06.420
or So there's actually two
main modes. The first one

207
00:12:06.780 --> 00:12:11.100
is basically compatible with anything
under the sun, and that

208
00:12:11.100 --> 00:12:13.830
will be the forking mode.
So you can, you can

209
00:12:13.830 --> 00:12:16.500
look up a serverless guide
for how to resize an

210
00:12:16.500 --> 00:12:19.050
image, and everyone will tell
you you're right. You need

211
00:12:19.050 --> 00:12:22.590
to note template. You need
to install this library that

212
00:12:22.590 --> 00:12:24.960
needs native compilation. And you
end up with this massive

213
00:12:24.960 --> 00:12:28.020
Docker image and this no
JS code and all it

214
00:12:28.020 --> 00:12:30.090
does. It just calls a
module and says, resize my

215
00:12:30.090 --> 00:12:32.940
photo. Well, actually we've opened
fast. You can make image

216
00:12:32.940 --> 00:12:37.410
magic, the actual binary that
runs as your function. And

217
00:12:37.560 --> 00:12:39.330
the reason we can do
that is because of this

218
00:12:39.330 --> 00:12:43.530
forking mode. Now that's great.
And so you can take

219
00:12:43.530 --> 00:12:46.020
your C plus plus binary
who VB six code from

220
00:12:46.020 --> 00:12:48.900
25 years ago, and you
can run it as a

221
00:12:48.900 --> 00:12:51.750
function if that makes sense
for your business. And then

222
00:12:51.780 --> 00:12:54.360
so some of the time
people will actually say, well,

223
00:12:54.360 --> 00:12:58.020
look, I need really high
throughput. This thing needs absolutely

224
00:12:58.020 --> 00:13:01.170
get hammered from every angle.
Let's make it more efficient.

225
00:13:01.890 --> 00:13:04.410
In that instance, you can
pick up what I have

226
00:13:04.410 --> 00:13:08.970
coined afterburn, which is much
more similar to fast CGI,

227
00:13:09.000 --> 00:13:12.210
where we'll create a process
or a pool of processes

228
00:13:12.270 --> 00:13:15.660
and reuse them over and
over again, to do that,

229
00:13:16.200 --> 00:13:19.710
to run that piece of
code for you. Oh, okay.

230
00:13:19.950 --> 00:13:22.080
So this, like you say,
it's not a new technique,

231
00:13:22.230 --> 00:13:26.310
but it's a smarter technique
in that that function watchdog

232
00:13:26.340 --> 00:13:29.820
that is part of open
fast keeps that PR you

233
00:13:29.820 --> 00:13:31.740
know, forks the process and
then keeps it around for

234
00:13:31.740 --> 00:13:35.760
other requests. So then if
you take something with a

235
00:13:35.760 --> 00:13:40.350
slow startup time, like.net core
or Python, this speeds it

236
00:13:40.350 --> 00:13:44.580
up dramatically. Like, Yeah, like
at least at least 10

237
00:13:44.580 --> 00:13:47.100
X, probably more. And it
isn't, those languages are actually

238
00:13:47.100 --> 00:13:49.380
really fast. The ones that
are kind of a bit

239
00:13:49.380 --> 00:13:53.160
slower or no JS and
particularly Java. I mean, the

240
00:13:53.160 --> 00:13:56.400
JVM is designed to be
started and run for like

241
00:13:57.570 --> 00:14:00.660
40 weeks. It's not designed
to run for four milliseconds.

242
00:14:01.140 --> 00:14:04.890
So there's some really good
use cases for, for what

243
00:14:04.890 --> 00:14:09.030
we're calling afterburn. Wow. Wow.
Okay. And this is all

244
00:14:09.090 --> 00:14:12.000
in kind of included in
and within the open fast

245
00:14:12.150 --> 00:14:14.760
project, this is a feature
of open path. Yeah. It's

246
00:14:14.760 --> 00:14:19.200
all within the wider ecosystem.
Another thing that I thought

247
00:14:19.200 --> 00:14:21.360
was really fun that you
all did, and it looked

248
00:14:21.360 --> 00:14:27.240
like it was colorized. Who
did that? Yeah. So colorize

249
00:14:27.360 --> 00:14:31.440
colorize bot is it's quite
a long story, but to

250
00:14:31.440 --> 00:14:34.710
cut it short, I got,
and this was actually through

251
00:14:34.740 --> 00:14:37.710
clustering as well, got in
touch with a young guy

252
00:14:37.710 --> 00:14:40.290
in the UK called Finian.
He was 17 at the

253
00:14:40.290 --> 00:14:44.910
time, and he'd known the
raspberry PI cluster about seven

254
00:14:44.910 --> 00:14:48.810
nodes and blocked about it
using my tutorial. I thought,

255
00:14:48.810 --> 00:14:50.940
well, this is really great.
I'd love to get in

256
00:14:51.140 --> 00:14:53.570
with him and pay, pay
forward some of what I've

257
00:14:53.570 --> 00:14:56.540
received from the community and
from DACA as a, as

258
00:14:56.540 --> 00:14:59.180
a captain. And so I
got him connected to DACA

259
00:14:59.270 --> 00:15:02.930
and we managed to get
him his trip sponsored out

260
00:15:02.930 --> 00:15:07.640
to Austin, and he spoke
that and we kind of

261
00:15:07.700 --> 00:15:13.580
kept that relationship going and
Copenhagen came around for DockerCon.

262
00:15:14.030 --> 00:15:16.760
And so he had thought,
right, I want to use,

263
00:15:16.790 --> 00:15:19.880
Alex's open fast with my
friend Ali. And we want

264
00:15:19.880 --> 00:15:21.940
to come up with something
that, you know, use some

265
00:15:21.940 --> 00:15:24.980
machine learning. And their idea
was to take a black

266
00:15:24.980 --> 00:15:28.670
and white video and turn
it to color as they

267
00:15:28.670 --> 00:15:32.660
did that. They went through
all these different mechanisms and

268
00:15:32.690 --> 00:15:36.560
ways of doing convergent neural
networks, but they found it

269
00:15:36.560 --> 00:15:39.260
just way too hard and
they didn't have compute power.

270
00:15:39.770 --> 00:15:43.310
So they took something off
the shelf called Khafre from,

271
00:15:43.340 --> 00:15:45.740
I believe it was from
MIT and that will take

272
00:15:45.740 --> 00:15:48.050
any black and white photo
and restore it to color.

273
00:15:49.130 --> 00:15:53.150
Then off the back of
the conference, we sat down

274
00:15:53.150 --> 00:15:56.540
and architected colorized bot, and
this is an open, fast

275
00:15:56.540 --> 00:16:00.830
project. And it has some
long running stuff because not

276
00:16:00.830 --> 00:16:03.830
everything needs to be serverless.
And it also has some

277
00:16:03.830 --> 00:16:07.970
functions, the main function that
is one that goes from

278
00:16:07.970 --> 00:16:11.030
black and white to color
using binary bytes and the

279
00:16:11.030 --> 00:16:15.800
other one tweets a photo.
Now it's been shared all

280
00:16:15.800 --> 00:16:17.840
around the world. It's had
a lot of interest from

281
00:16:18.140 --> 00:16:20.510
all sorts of people like
dr. Who fans and folks

282
00:16:20.510 --> 00:16:24.470
who have their family photos.
And it's really a great

283
00:16:24.830 --> 00:16:31.870
story of collaboration and working
together. Hmm. You know, one

284
00:16:31.870 --> 00:16:33.640
of the things I think
is so interesting about that

285
00:16:33.640 --> 00:16:38.770
story is that Finian and
Ali were 17 at the

286
00:16:38.770 --> 00:16:42.070
time. And, you know, we
talk, talked a little bit

287
00:16:42.070 --> 00:16:45.730
in this podcast about age
and you referenced things in

288
00:16:45.730 --> 00:16:48.640
the nineties and I referenced
things in the nineties. And

289
00:16:48.820 --> 00:16:53.770
that means possibly that the
next generation of developer will

290
00:16:53.770 --> 00:16:58.150
be able to consciously or
not choose not to worry

291
00:16:58.150 --> 00:17:01.120
about stuff that we worried
about. They made a big

292
00:17:01.420 --> 00:17:06.130
global scale application that did
cool stuff. And what kind

293
00:17:06.130 --> 00:17:08.350
of stuff did they not
have to worry about that

294
00:17:08.350 --> 00:17:10.120
you and I would have
10 or 20 years ago?

295
00:17:11.530 --> 00:17:16.840
Yeah. I mean, that's a
great theoretical question, but there

296
00:17:16.840 --> 00:17:19.750
are a few practical things
I can say. They didn't

297
00:17:19.750 --> 00:17:25.000
have to worry about installing
a lamp stack. I have

298
00:17:25.000 --> 00:17:29.920
to worry about tuning a
web server. They, they basically

299
00:17:29.950 --> 00:17:32.560
had a Docker swarm cluster.
And when they said to

300
00:17:32.560 --> 00:17:35.860
create this service, everything was
just done for them when

301
00:17:35.860 --> 00:17:38.320
they said, great, get me
the logs for that service,

302
00:17:38.350 --> 00:17:41.260
because it's a distributed system.
They would just fetch from

303
00:17:41.260 --> 00:17:43.480
whichever server they were running
on and brought up on

304
00:17:43.480 --> 00:17:46.360
the console. Some of the
things they had to worry

305
00:17:46.360 --> 00:17:50.400
about Mariah particularly helped with
them was the architecture, the

306
00:17:50.400 --> 00:17:54.000
durability thinking about error handling.
And there's this great photo

307
00:17:54.000 --> 00:17:55.770
of the three of us
sat up in, in the

308
00:17:55.770 --> 00:17:59.460
hotel lobby late at night,
looking at their slides and

309
00:18:00.240 --> 00:18:04.140
we were adding error handling.
So if we can tweet

310
00:18:04.350 --> 00:18:06.390
the whole thing, didn't just
fall over in a heap.

311
00:18:06.750 --> 00:18:08.460
And I think it's great
to be able to focus

312
00:18:08.460 --> 00:18:12.450
on those high level discussions
and pieces of code without

313
00:18:12.450 --> 00:18:15.660
worrying so much about the
real low level. How do

314
00:18:15.660 --> 00:18:17.880
we keep this demon alive?
How do we do this

315
00:18:18.180 --> 00:18:21.890
and the other, And how
much time was put into

316
00:18:21.890 --> 00:18:26.510
this from kind of concept
to success? Like it was,

317
00:18:26.570 --> 00:18:30.320
it was a multi week
project and it has not

318
00:18:30.320 --> 00:18:34.700
stopped needing our time since
then. In fact, it's being

319
00:18:34.700 --> 00:18:37.610
ported over to keep an
auntie's now, and he's running

320
00:18:37.610 --> 00:18:43.430
on giggle Cuban Nettie's engine.
And that was actually part

321
00:18:43.430 --> 00:18:46.700
of the keynote from elected
rich Richardson at weave works

322
00:18:46.850 --> 00:18:51.920
during CubeCon. And it was
just say, great to see

323
00:18:52.490 --> 00:18:54.980
open FAS up there and
the story of what we'd

324
00:18:54.980 --> 00:18:59.510
done and his, his kind
of angle there was. Could

325
00:18:59.540 --> 00:19:02.510
you have what? I think
it was 10 million developers on

326
00:19:02.510 --> 00:19:07.130
Cubanetis in the next few
years. And what was, what

327
00:19:07.130 --> 00:19:10.370
was really great was the
more you build with components,

328
00:19:10.910 --> 00:19:13.940
the easier it is to
iterate and to get the

329
00:19:13.940 --> 00:19:18.710
traction. Do you think that
Kubernetes, at some point will

330
00:19:18.710 --> 00:19:23.120
become like a part of
the fabric of the internet

331
00:19:23.120 --> 00:19:25.100
itself, and it'll just become
a thing that fades away

332
00:19:25.100 --> 00:19:28.370
in the background, or, you
know, in the sense of

333
00:19:28.670 --> 00:19:30.560
it will become a part
of the operating system, The

334
00:19:30.560 --> 00:19:32.720
internet itself, or do you
think that there'll always be

335
00:19:32.900 --> 00:19:37.640
competition for swarms and cluster
managers and orchestrators? Well, competition

336
00:19:37.640 --> 00:19:41.660
is always, always useful is
helpful, right? We've seen that

337
00:19:41.660 --> 00:19:44.960
with sort of getting real
close to home with, with

338
00:19:45.200 --> 00:19:49.100
web browsers indeed. Right. And
so I think the way

339
00:19:49.100 --> 00:19:52.910
the web browser is so
integrated into operating systems now

340
00:19:53.270 --> 00:19:57.980
was controversial originally, wasn't it.
But now we just take

341
00:19:57.980 --> 00:20:02.000
it for granted touch screens
were controversial and now we

342
00:20:02.030 --> 00:20:04.340
couldn't work without them. And
I think in the same

343
00:20:04.340 --> 00:20:07.760
way, DACA is becoming a,
a tool that you just

344
00:20:07.760 --> 00:20:10.880
expect to be installed or
installable on a Linux system

345
00:20:10.910 --> 00:20:15.170
or windows or Mac. I
think we will get there

346
00:20:15.170 --> 00:20:20.930
with orchestrators. They are very
large complex pieces of application.

347
00:20:21.410 --> 00:20:23.540
And just like we said,
at the beginning of the

348
00:20:23.540 --> 00:20:25.910
podcast, they're changing the whole
time and they're breaking the

349
00:20:25.910 --> 00:20:29.060
whole time. I want to
get to the point where

350
00:20:29.420 --> 00:20:33.260
we get to this boring
components that just work and

351
00:20:33.260 --> 00:20:37.910
aren't changing and easily extensible.
Hmm. Well, let me, let

352
00:20:37.910 --> 00:20:39.710
me then push a little
bit on what's something that

353
00:20:39.710 --> 00:20:42.650
you said before in an
effort to a better understand,

354
00:20:42.980 --> 00:20:46.880
you said that the colorize
bot took a couple of,

355
00:20:47.740 --> 00:20:52.930
and it also sometimes still
requires your, your attention. What

356
00:20:52.930 --> 00:20:56.710
kinds of things do require
your attention? Why aren't we

357
00:20:56.710 --> 00:20:58.330
at the point where I
can just have a slider

358
00:20:58.330 --> 00:21:01.210
bar and a credit card
attached to it and, Oh,

359
00:21:01.210 --> 00:21:03.310
it's scales. I need to
move this slider bar to

360
00:21:03.310 --> 00:21:06.550
the right and pay more
money. What kind of administrivia

361
00:21:06.690 --> 00:21:08.940
Are you spending your time
on when you look at

362
00:21:08.940 --> 00:21:13.380
colorize bot in particular like,
no, I, I don't have

363
00:21:13.380 --> 00:21:16.590
this, I don't know this
on record, but my impression

364
00:21:16.590 --> 00:21:20.640
is that Twitter don't want
you to run bots. It's

365
00:21:20.650 --> 00:21:23.970
kind of causes because then
problems. That's my impression. And

366
00:21:23.970 --> 00:21:28.230
so every few days, Weeks
we'll find that the bot

367
00:21:28.230 --> 00:21:31.620
is getting news, triggering some
kind of spam alert or

368
00:21:31.620 --> 00:21:35.700
filter. And we have to
regenerate the keys for that

369
00:21:35.700 --> 00:21:39.120
by getting Finney and who
holds, holds the account to

370
00:21:39.120 --> 00:21:43.110
log in. And he has
to message me over Slack.

371
00:21:43.560 --> 00:21:47.370
I have to find 30
minutes to log into the

372
00:21:47.370 --> 00:21:51.570
GKE cluster, update all of
the, the Yammer files and

373
00:21:51.570 --> 00:21:55.980
redeploy it. And so to
some extent, it's, it's just

374
00:21:55.980 --> 00:21:58.890
an artifact of, you know,
we're relying on a third

375
00:21:58.890 --> 00:22:02.370
party here, but really there's
nothing that we needed to

376
00:22:02.370 --> 00:22:06.900
change in the code. The
functions are self contained, they're

377
00:22:07.350 --> 00:22:10.320
immutable. And then we, we
actually use for storage. We're

378
00:22:10.320 --> 00:22:13.770
using Mineo, which is kind
of a, an S three

379
00:22:13.770 --> 00:22:17.460
alternative. You can host yourself.
So when tweet is picked

380
00:22:17.460 --> 00:22:20.130
up from the internet, using
this long running service tweet

381
00:22:20.130 --> 00:22:23.850
listener, it will store their
photo in menu, invoke the

382
00:22:23.850 --> 00:22:28.620
function on the gateway asynchronously.
So asynchronous queuing is built

383
00:22:28.620 --> 00:22:32.520
into open fans, and then
that event will trigger the

384
00:22:32.550 --> 00:22:36.630
colorize and the tweet of
the pack. We also have

385
00:22:36.660 --> 00:22:40.020
dashboards that we have developed
using the metrics that are

386
00:22:40.020 --> 00:22:42.870
built in. So we can
use something like refiner of

387
00:22:42.870 --> 00:22:45.330
a very pretty dashboard to
see what the statistics are,

388
00:22:45.600 --> 00:22:48.150
but also what the rerun
or the failure rate is.

389
00:22:48.480 --> 00:22:50.400
And that's a clue that
we need to go off

390
00:22:50.400 --> 00:22:55.920
and do something. Hmm. Okay.
So the problems of scale

391
00:22:56.190 --> 00:22:59.810
are less of an issue
and the problems of the,

392
00:22:59.810 --> 00:23:04.020
the external dependencies or what
your kind of administration. And

393
00:23:04.020 --> 00:23:07.170
so, Yeah. So when you,
when you're pushing the boundaries

394
00:23:07.470 --> 00:23:09.540
and you're getting more and
more third parties involved with

395
00:23:09.540 --> 00:23:11.700
this, just generally the kind
of stuff you end up

396
00:23:11.760 --> 00:23:16.000
having to deal with. Also
moving to, to keep an

397
00:23:16.000 --> 00:23:20.700
NetEase was not as, as
easy as we'd hoped, because

398
00:23:21.150 --> 00:23:24.780
while I can fast moves
really fast, really quickly, we

399
00:23:24.780 --> 00:23:27.240
had other services, like we
had many a, we had

400
00:23:27.330 --> 00:23:29.640
this tweet listener, which was
a long running process. They

401
00:23:29.640 --> 00:23:33.240
needed their own kind of
configuration their own specific or

402
00:23:33.240 --> 00:23:36.370
files. And then there were
things specific to GKE that,

403
00:23:36.370 --> 00:23:39.450
that were like, how do
we pick an instance that's

404
00:23:39.450 --> 00:23:41.700
as fast as the one
that we've been using on

405
00:23:41.700 --> 00:23:45.620
another cloud provider. And so,
you know, it's, it's great

406
00:23:45.620 --> 00:23:47.600
to see this because I
think this is what people

407
00:23:47.600 --> 00:23:50.660
are going to be going
through when they actually are

408
00:23:50.660 --> 00:23:52.550
saying, right. Well, you know,
we're running open, fast and

409
00:23:52.550 --> 00:23:55.550
production, we're using it for
business. How do we go

410
00:23:55.550 --> 00:24:00.770
from GK to Azure or
vice versa or to bare

411
00:24:00.770 --> 00:24:04.450
metal? What are the pros
and cons? Right. Right. I

412
00:24:04.450 --> 00:24:06.880
think the fact that you
brought up many O M

413
00:24:06.880 --> 00:24:10.750
I N I o.io is
a really interesting point because

414
00:24:10.750 --> 00:24:13.930
I think that many O
has a similar philosophy to

415
00:24:13.930 --> 00:24:16.570
open FAS in the sense
of it's an open source

416
00:24:16.580 --> 00:24:20.650
thing that has a, a
clean API, but it works

417
00:24:20.650 --> 00:24:23.230
across all major clouds. So
just to give a little

418
00:24:23.230 --> 00:24:26.980
context, Mineo gives you an
Amazon S three compatible API.

419
00:24:27.400 --> 00:24:29.980
Even if you're a storage
is an Amazon, it might

420
00:24:29.980 --> 00:24:32.290
be Azure might be cloud
Foundry might be Docker or

421
00:24:32.490 --> 00:24:36.970
NAS. Open FAS also works
anywhere. I can run it

422
00:24:37.330 --> 00:24:40.300
anywhere that I want to,
it doesn't have to run

423
00:24:40.300 --> 00:24:43.570
on Amazon or have to
run on, on Azure. I

424
00:24:43.570 --> 00:24:46.240
assume that's why you picked
O or they would, they

425
00:24:46.240 --> 00:24:49.330
would pick it. And then
you would probably prefer projects

426
00:24:49.330 --> 00:24:56.020
that are cloud agnostic. Funny
story. I had the, I

427
00:24:56.020 --> 00:24:58.870
was looking at the DockerCon
call hacks contest, and that's

428
00:24:58.870 --> 00:25:00.850
kind of why I started
open part of why I

429
00:25:00.850 --> 00:25:03.280
started open fast, and I
was doing everything my kit

430
00:25:03.310 --> 00:25:07.240
to make open fires, you
know, just as simple as

431
00:25:07.240 --> 00:25:11.170
possible. I now have this
tagline serverless functions made simple,

432
00:25:11.530 --> 00:25:15.460
and there was this remit
push Docker beyond what it

433
00:25:15.460 --> 00:25:18.790
was designed to do. And
for, for weeks at a

434
00:25:18.790 --> 00:25:22.720
time, I was really struggling
to convince the paneling committee

435
00:25:22.720 --> 00:25:25.180
about the project. And eventually
it kind of clicked for

436
00:25:25.180 --> 00:25:28.840
them. And so I went
over to Austin and was

437
00:25:28.840 --> 00:25:31.360
able to present that in
closing keynote in front of

438
00:25:31.360 --> 00:25:34.390
5,000 people. But one of
the changes that I made

439
00:25:35.020 --> 00:25:37.960
to the wide open source
community was to commit web

440
00:25:37.960 --> 00:25:41.410
hook support to Mineo because
it didn't have it. And

441
00:25:41.410 --> 00:25:44.530
I knew for open fires
to keep things simple, the

442
00:25:44.530 --> 00:25:49.090
simplest communication mechanism for the
web, the lingua franca is

443
00:25:49.120 --> 00:25:52.960
the weapon web hook is
where you say to get

444
00:25:52.960 --> 00:25:57.220
help. For instance, anytime X
happens, send the HTTP post

445
00:25:57.280 --> 00:26:02.320
to this URL. And so
that's another reason why I

446
00:26:02.320 --> 00:26:04.780
went with Mineo at the
time, because I knew it.

447
00:26:05.410 --> 00:26:08.170
I knew the team, they
were great people, and I

448
00:26:08.170 --> 00:26:11.110
was able to contribute the
changes I needed that now

449
00:26:11.140 --> 00:26:13.480
all the other service projects
are using in their demos,

450
00:26:13.540 --> 00:26:18.100
the change I, I added
to trigger their functions. And

451
00:26:18.550 --> 00:26:22.090
Okay, so it's right in
line with your philosophy and

452
00:26:22.270 --> 00:26:24.430
would allow me to run
my own colorize bot at

453
00:26:24.430 --> 00:26:28.330
whatever cloud or whatever infrastructure.
Yeah. I mean, there's something

454
00:26:28.330 --> 00:26:30.910
that I, I want to
say really is that open

455
00:26:30.910 --> 00:26:34.840
Pfizer project that I started
last December. So we're probably

456
00:26:34.930 --> 00:26:39.010
12 months from my first
commit now, but that journey

457
00:26:39.340 --> 00:26:42.850
has been, has been a
long and hard journey. And

458
00:26:43.680 --> 00:26:46.740
a lot of people have
come along the way. We

459
00:26:46.740 --> 00:26:52.830
now have around 69 external
code contributions or contributors, let's

460
00:26:52.830 --> 00:26:59.430
say 1500 commits, almost eight
point 8,000 GitHub stars. And

461
00:26:59.430 --> 00:27:03.090
actually have this goal of
getting to 10 K by

462
00:27:03.090 --> 00:27:04.980
the end of the year,
we might have to push

463
00:27:04.980 --> 00:27:08.220
that out a couple of
months, but each kind of

464
00:27:08.220 --> 00:27:12.090
milestone of X thousand stars
has been tied to something

465
00:27:12.090 --> 00:27:15.540
really significant for the project.
But the one thing that

466
00:27:15.540 --> 00:27:17.400
I think has really been
a catalyst and it's really

467
00:27:17.400 --> 00:27:22.950
important to me is the
community and how much of

468
00:27:22.950 --> 00:27:26.760
a investor in people I've
become by seeing people come

469
00:27:26.760 --> 00:27:30.090
to the project and being
able to spend time mentoring

470
00:27:30.090 --> 00:27:34.950
them or teaching them go,
or just promoting them and

471
00:27:34.980 --> 00:27:39.600
being kind of outreach mystic
and seeing them collaborate together

472
00:27:39.610 --> 00:27:43.370
so rewarding for me. Yeah.
It really is. The point,

473
00:27:43.610 --> 00:27:46.760
right. Is to, to, to
lift everyone up and have,

474
00:27:46.760 --> 00:27:48.920
you know, a rising tide
lifts all boats. And in

475
00:27:48.920 --> 00:27:51.980
this context, people will probably
start building things on top

476
00:27:51.980 --> 00:27:54.830
of open fast, and that
will lift them up. Yeah.

477
00:27:54.860 --> 00:27:56.840
So that's something that I've,
that I've seen because it's

478
00:27:56.840 --> 00:28:00.740
an open source project there.
And you'll see this in

479
00:28:00.740 --> 00:28:03.320
the new year. There are
several big brands that have

480
00:28:03.320 --> 00:28:07.280
taken it and built cool
stuff with it on top.

481
00:28:08.000 --> 00:28:11.120
And there are also people
that are taking it to

482
00:28:11.120 --> 00:28:14.780
production and building their core
stuff of it too. So

483
00:28:15.410 --> 00:28:18.860
this is definitely an ecosystem
that's really picking up. And

484
00:28:18.860 --> 00:28:22.760
there was a tweet from
the new stack and it

485
00:28:22.880 --> 00:28:26.660
basically showed from a survey
that in the open source

486
00:28:26.660 --> 00:28:32.060
world open fast was tied
with OpenWhisk for second place,

487
00:28:32.060 --> 00:28:35.870
for mind, share people using
or planning to use serverless

488
00:28:35.880 --> 00:28:40.370
and open source next year.
That's Cool. And this is

489
00:28:40.370 --> 00:28:42.170
all again, all in a
year, which shows you how

490
00:28:42.170 --> 00:28:44.840
fast the open source community
and the internet goes when

491
00:28:44.840 --> 00:28:47.810
they, when they look, when
they find something cool, and

492
00:28:47.810 --> 00:28:53.060
then they move. Yeah, absolutely.
Yeah. So people can check

493
00:28:53.060 --> 00:28:58.790
out open fast@openfas.com. And from
there you can go to

494
00:28:58.790 --> 00:29:00.650
GitHub and I would encourage
you if you're listening to

495
00:29:00.650 --> 00:29:03.980
this podcast to go and
start, give them, give them

496
00:29:04.040 --> 00:29:06.050
your star and see if
we can push them to

497
00:29:06.050 --> 00:29:09.080
10,000. By the end of
the, of the year, I'll

498
00:29:09.080 --> 00:29:11.360
try to give you my
small contribution. If I could

499
00:29:11.540 --> 00:29:14.510
OnStar it and start again,
I would, I would do

500
00:29:14.510 --> 00:29:17.300
that. Well, look, there are
multiple repos across the organization

501
00:29:17.300 --> 00:29:20.720
because open FAS isn't a
single repo project anymore. There's

502
00:29:21.170 --> 00:29:24.680
all sorts of components that
are really important. And people

503
00:29:24.680 --> 00:29:27.710
contribute to different areas, which
just reflects like the interest

504
00:29:27.710 --> 00:29:30.350
level that we have here.
And that brings up a

505
00:29:30.350 --> 00:29:32.630
good point because it's not
just a project sitting in

506
00:29:32.630 --> 00:29:36.140
one place. There's the CLI
there's the fast NetEase stuff.

507
00:29:36.170 --> 00:29:38.720
There's the fast swarm. When
you start to make something

508
00:29:38.720 --> 00:29:41.500
like this and remembering that
you're not paid to do

509
00:29:41.500 --> 00:29:44.590
this, Right? This is an
opensource project that you poured

510
00:29:44.590 --> 00:29:47.170
your soul into. And there's
lots of people that are

511
00:29:47.170 --> 00:29:49.960
involved, but it's got a
nice brand. It's got a

512
00:29:49.960 --> 00:29:53.320
great logo. It's very professional.
The docs are fantastic. Your

513
00:29:53.320 --> 00:29:56.230
blog is a great resource.
I spend a lot of

514
00:29:56.230 --> 00:29:58.330
time there, but if you
go and look at like,

515
00:29:58.360 --> 00:30:02.170
you have a Patrion, you're
not getting rich on this.

516
00:30:02.620 --> 00:30:04.450
How do people get involved
and help you out and

517
00:30:04.450 --> 00:30:07.930
help the community out with
this project? Yeah. So it's,

518
00:30:08.350 --> 00:30:13.120
it's incredibly time consuming to,
to, to run a project

519
00:30:13.630 --> 00:30:15.880
it's even more time consuming.
When you're, you're trying to

520
00:30:15.880 --> 00:30:19.840
lead a team of contributors
from all over the world.

521
00:30:20.110 --> 00:30:22.900
Most of my time, isn't
coding. It's actually just supporting

522
00:30:22.900 --> 00:30:29.050
people and coordinating. So if
you want to get involved,

523
00:30:29.140 --> 00:30:31.990
I'd encourage you to just
start using it. It takes

524
00:30:31.990 --> 00:30:34.150
60 seconds to get up
and running on your laptop

525
00:30:34.150 --> 00:30:37.090
with DACA. You don't even
have to learn Cubanetis if

526
00:30:37.090 --> 00:30:39.550
you don't want to, you
can join our Slack channel

527
00:30:39.550 --> 00:30:42.940
by emailing Alex at open,
fast.com or hit me up

528
00:30:42.940 --> 00:30:45.850
on Twitter. And then one
of the other key ways

529
00:30:46.000 --> 00:30:48.400
like Scott said is you
could just become a backer

530
00:30:48.790 --> 00:30:52.480
of the project on Patreon.
And there's also opportunities to

531
00:30:52.480 --> 00:30:55.780
become a sponsor. If, if
that makes sense to you.

532
00:30:56.470 --> 00:30:59.080
Fantastic. Well, thanks so much
for spending time with me

533
00:30:59.080 --> 00:31:01.030
today, and I wish you
all the best with the

534
00:31:01.030 --> 00:31:04.480
future of open, fast and
serverless functions made simple. Thank

535
00:31:04.480 --> 00:31:06.700
you. It's been great to
talk to you. This has

536
00:31:06.700 --> 00:31:09.640
been another episode of Hanselminutes
and we'll see you again

537
00:31:09.640 --> 00:31:17.550
next week. <inaudible>.

