WEBVTT FILE

1
00:00:12.060 --> 00:00:17.130
From Hansel minutes.com. It's Hanselman.
It's a weekly discussion with

2
00:00:17.130 --> 00:00:21.840
web developer and technologists. Scott
Hanselman hosted by Carl Franklin. This

3
00:00:21.840 --> 00:00:27.990
is Laura's Ryan announcing show
number 41 recorded Wednesday, November 15th, 2006.

4
00:00:29.010 --> 00:00:32.730
Support for Hanselman. This is
provided by COVID Smith tools,

5
00:00:32.730 --> 00:00:36.780
makers of code Smith, an
extensible template base code generator

6
00:00:36.780 --> 00:00:41.640
for.net Hansel minutes. Listeners get
$100 off COVID Smith professional

7
00:00:41.640 --> 00:00:49.260
with coupon code H M
100. online@covidsmithtools.com and buy slash

8
00:00:49.290 --> 00:00:53.910
end software red carpet subscriptions.
The most comprehensive solution for

9
00:00:53.910 --> 00:00:58.860
adding connectivity to your.net and
asp.net application with components for

10
00:00:58.860 --> 00:01:07.950
every major internet protocol online@wwwdotandsoftware.com.
Support is also provided by.net

11
00:01:07.950 --> 00:01:12.270
developers journal. The world's leading
dotnet developer magazine online at

12
00:01:12.660 --> 00:01:17.880
www dot <inaudible> dot com.
In this episode, Scott and

13
00:01:17.880 --> 00:01:26.310
Carl discussed the specifications of
Ws stock. Hi, this is

14
00:01:26.310 --> 00:01:29.640
Carl Franklin and you're listening to
Hansel minutes from Hanselman it's

15
00:01:29.640 --> 00:01:32.310
dot com. I'm here with
Scott as we try to

16
00:01:32.310 --> 00:01:35.220
be every week we try,
we do try. In fact,

17
00:01:35.490 --> 00:01:38.280
sometimes it go away. It's
hard, but know we're here

18
00:01:38.280 --> 00:01:41.160
now. It's hard producing a
show. You you're working this

19
00:01:41.490 --> 00:01:45.300
it's true. We do. Speaking
of, I don't mean to,

20
00:01:45.450 --> 00:01:49.650
you know, waste the listener's
time, but Rory has sent

21
00:01:49.650 --> 00:01:52.500
me some emails lately. He
went looking through iTunes for

22
00:01:52.500 --> 00:01:54.990
the first time at all
the other podcasts out there.

23
00:01:55.170 --> 00:02:02.580
Okay. He says they basically
suck. Huh? Huh. Okay. So

24
00:02:02.580 --> 00:02:05.520
what's the topic today. I
wanted to talk a little

25
00:02:05.520 --> 00:02:10.410
bit about the Ws star
specifications. I think a lot

26
00:02:10.410 --> 00:02:14.460
of people have worked with
web services, but most people

27
00:02:14.460 --> 00:02:18.120
are doing web services in
a file, new web service,

28
00:02:18.300 --> 00:02:22.080
kind of a way from
visual studio and well, a

29
00:02:22.080 --> 00:02:25.170
number of people have messed
with wizzy WSC, the web

30
00:02:25.170 --> 00:02:28.110
services enhancements, right? And more
and more people are getting

31
00:02:28.110 --> 00:02:30.900
into WCF. I thought that
it would be an interesting

32
00:02:30.900 --> 00:02:35.700
thing to spend a few
double speed, 20 minutes of

33
00:02:36.300 --> 00:02:39.990
the listeners, time to talk
about these different specifications that

34
00:02:39.990 --> 00:02:44.970
people keep referring to as
Ws dash star Aina Scott.

35
00:02:45.000 --> 00:02:48.210
The first thing that I
hear from people when we're

36
00:02:48.210 --> 00:02:53.070
talking about Indigo and all
of this stuff is isn't

37
00:02:53.070 --> 00:02:56.370
Ws star like old technology.
And I think there's a

38
00:02:56.370 --> 00:03:00.340
misconception out there that just
because we had toolkits For

39
00:03:00.340 --> 00:03:03.850
Ws star before and now
we have Indigo that somehow

40
00:03:03.850 --> 00:03:06.460
we don't need to pay
attention to these. So let's

41
00:03:06.460 --> 00:03:11.520
clarify that point. So W
has star refers to all

42
00:03:11.520 --> 00:03:14.880
of the Ws, hyphen drafts
specifications, most of which are

43
00:03:14.880 --> 00:03:20.130
refer associated with Ws security.
And these are all things

44
00:03:20.130 --> 00:03:24.030
that make soap work better,
but you kind of have

45
00:03:24.030 --> 00:03:26.580
to back up quite a
bit to the, the, the,

46
00:03:26.730 --> 00:03:31.290
some of the fundamentals. So,
you know, there's XML, but

47
00:03:31.290 --> 00:03:35.160
more specifically there's, what's called
the post scheme of validated

48
00:03:35.160 --> 00:03:39.990
infoset or the PSV. I,
we all know that with

49
00:03:39.990 --> 00:03:42.270
extra melon angle brackets, if
you decide to go and

50
00:03:42.270 --> 00:03:46.860
say left angle bracket Fu
forward slash right angle bracket,

51
00:03:46.890 --> 00:03:50.040
what does that mean? Right.
That means a, a, an

52
00:03:50.040 --> 00:03:54.960
empty element called Fu and
that is semantically equivalent to

53
00:03:56.340 --> 00:03:59.790
having a food element and
then an end food element.

54
00:04:00.000 --> 00:04:02.880
Right? That's the, kind of
the, the obvious example of

55
00:04:02.880 --> 00:04:05.940
these two things mean the
same, right? If you did

56
00:04:05.940 --> 00:04:10.830
a diff between two documents
that each had these cool

57
00:04:10.840 --> 00:04:12.420
kind of two kinds of
elements, if you did a

58
00:04:12.450 --> 00:04:14.460
bite by bite diff, you
would see that they are

59
00:04:14.460 --> 00:04:17.700
different, but if you did
a semantic dif within, I

60
00:04:17.700 --> 00:04:20.100
can ask smart XML, diff
you'd see that they are

61
00:04:20.100 --> 00:04:25.200
semantically the same when you
apply schema to an XML

62
00:04:25.200 --> 00:04:28.290
document and stop thinking about
angle brackets. And think about

63
00:04:28.290 --> 00:04:33.330
the after it's been schema
validated the PSVR, the post

64
00:04:33.330 --> 00:04:37.620
schema validated infoset the information
set that is associated with

65
00:04:37.620 --> 00:04:40.890
that XML, regardless of the
angle brackets and the serialization

66
00:04:40.890 --> 00:04:44.520
format and how it actually
hits the wire, then you

67
00:04:44.520 --> 00:04:49.410
start having something interesting. Hmm.
Now that's XML and that's

68
00:04:49.410 --> 00:04:51.450
the, you know, the Dom
and some of the basics

69
00:04:51.450 --> 00:04:56.250
of XML, but what, what
had to happen before we

70
00:04:56.250 --> 00:05:00.060
got into the Ws star
specifications was of course soap.

71
00:05:00.660 --> 00:05:06.000
But before that we've got
XML, signature, XML, signature, or

72
00:05:06.030 --> 00:05:11.490
XML D SIG digital signature
was a specification that described

73
00:05:11.490 --> 00:05:16.410
how one could Mark an
element within XML with a

74
00:05:17.160 --> 00:05:21.270
cryptographically significant digital signature to
prevent the tampering of that

75
00:05:21.270 --> 00:05:24.720
particular element. So I could
give you an XML document

76
00:05:25.590 --> 00:05:28.920
that maybe had a person
element and underneath person, we

77
00:05:28.920 --> 00:05:31.920
had first name and we
had last name and I

78
00:05:31.920 --> 00:05:36.120
could then apply an ID
to like maybe an ID

79
00:05:36.120 --> 00:05:38.820
with a goo to the
person element. And then later

80
00:05:38.820 --> 00:05:41.730
on somewhere else in the
document, I could have a

81
00:05:41.760 --> 00:05:45.810
digital signature that refers back
via what's called an ID

82
00:05:45.810 --> 00:05:47.910
ref an ID and an
ID RAF are kind of

83
00:05:47.910 --> 00:05:51.990
the primary key and key
reference of the XML set,

84
00:05:52.170 --> 00:05:56.400
right? And I could say
here is a digital signature

85
00:05:56.840 --> 00:06:01.070
associated with the information set,
represented by person so that

86
00:06:01.070 --> 00:06:03.680
if somebody tampered with person,
I could, I could tell

87
00:06:03.680 --> 00:06:06.290
because it was signed, I
could see that someone had

88
00:06:06.290 --> 00:06:10.420
messed around Sorta like a,
a hash or equivalent, right

89
00:06:11.170 --> 00:06:14.260
Then on top of XML
signature, and the techniques for

90
00:06:14.260 --> 00:06:19.210
applying signatures to elements within
documents was XML encryption, which

91
00:06:19.210 --> 00:06:23.110
would let you apply a
cipher value and say, this

92
00:06:23.110 --> 00:06:26.350
information set contained in this
element. And from this element,

93
00:06:26.350 --> 00:06:30.670
then down is now represented
by this XML block. And

94
00:06:30.670 --> 00:06:34.990
this is all way before
soap, right? Right. So Ws

95
00:06:34.990 --> 00:06:40.600
security among other things takes
things like XML signature and

96
00:06:40.600 --> 00:06:45.490
XML encryption, and that integrates
it with soap. So when

97
00:06:45.490 --> 00:06:49.450
I was talking about a
moment ago about I signing

98
00:06:49.450 --> 00:06:52.150
an ID, that ID would
be in a different namespace,

99
00:06:52.180 --> 00:06:54.550
right? Cause you don't want
to actually change the information,

100
00:06:54.760 --> 00:06:58.030
be represented by the person
element. Right? One of the

101
00:06:58.030 --> 00:07:01.150
things that Ws security would
do is, would say, I'm

102
00:07:01.150 --> 00:07:03.880
going to put this information
about the digital signature up

103
00:07:03.880 --> 00:07:06.880
in the header. So it
calls out the difference between

104
00:07:06.880 --> 00:07:08.410
the body of the message
and the header of the

105
00:07:08.410 --> 00:07:15.310
message and co indicates a
way to potentially encrypt or

106
00:07:15.310 --> 00:07:20.230
sign chunks of a document
arbitrarily. So this means that

107
00:07:20.230 --> 00:07:23.350
I could potentially re create,
let's say a, a document

108
00:07:23.350 --> 00:07:27.940
that represents an invoice or
purchase order. And let's say

109
00:07:27.940 --> 00:07:32.200
that it included payment information
right now, you know, most

110
00:07:32.200 --> 00:07:33.730
of our listeners could sit
down on a note pad

111
00:07:33.730 --> 00:07:35.590
and kind of, you know,
bang out a document like

112
00:07:35.590 --> 00:07:37.720
that and come up with
a general sense of what

113
00:07:37.720 --> 00:07:39.220
they think that ought to
look like. Or maybe they

114
00:07:39.220 --> 00:07:42.070
are companies already have an
XML schemer to do that.

115
00:07:42.610 --> 00:07:45.100
But what something like Ws
security allows you to do

116
00:07:45.100 --> 00:07:48.640
is that if you were
passing that combination payment information

117
00:07:48.640 --> 00:07:53.500
and invoice via soap, you
might want to route that

118
00:07:53.500 --> 00:07:58.960
document such that the invoice
was digitally signed to prevent

119
00:07:58.960 --> 00:08:02.950
it from being, being tampered
with. And then you might

120
00:08:02.950 --> 00:08:08.290
want to actually encrypt the
payment information with a different,

121
00:08:08.470 --> 00:08:11.650
a different key, and this
information about what was going

122
00:08:11.650 --> 00:08:13.840
on would go in the
header. And then you might

123
00:08:13.870 --> 00:08:18.070
in the, of the encryption
aspect, remove that whole payment

124
00:08:18.130 --> 00:08:20.320
bit, and you'd insert in
a cipher value so that

125
00:08:20.560 --> 00:08:25.030
the information sets still there,
it's just been encrypted. What

126
00:08:25.030 --> 00:08:27.040
this would mean is that
I could route that document

127
00:08:27.040 --> 00:08:31.210
through multiple departments and wouldn't
have to be concerned about

128
00:08:31.800 --> 00:08:34.450
information that one department might
not want to see. Sure.

129
00:08:34.480 --> 00:08:36.130
I don't want to certainly
want to allow the payment

130
00:08:36.130 --> 00:08:38.830
information to be seen by
the department that manages the,

131
00:08:39.970 --> 00:08:44.530
the inventory Encryption is all
about protection and trends. Exactly.

132
00:08:44.530 --> 00:08:49.600
Right, exactly. Right. So these
XML, digital signature XML, encryption

133
00:08:50.320 --> 00:08:56.130
techniques, and drafts specifications when
applied the way that Ws

134
00:08:56.130 --> 00:08:59.730
security describes them, allows you
to pass these documents around

135
00:08:59.730 --> 00:09:03.780
these kinds of composite documents
and use them in very,

136
00:09:03.780 --> 00:09:06.840
very flexible ways that that
really matched the way your

137
00:09:06.840 --> 00:09:10.740
business works. A good physical
analogy to this would be

138
00:09:10.740 --> 00:09:14.010
like in, in, in Oregon,
we do vote by mail.

139
00:09:14.520 --> 00:09:16.470
So like we just had
our big midterm elections in

140
00:09:16.470 --> 00:09:19.200
the States and everyone said,
well, you know, when did

141
00:09:19.200 --> 00:09:20.820
you vote? You were out
of town. How did you

142
00:09:20.820 --> 00:09:23.370
do that? One in Oregon?
We can vote by mail,

143
00:09:23.460 --> 00:09:27.240
absentee ballot, absentee ballot, everyone
votes by mail. You don't

144
00:09:27.240 --> 00:09:30.030
actually go to the, Oh,
that's cool. Yeah. So they

145
00:09:30.030 --> 00:09:32.400
send us a ballot ahead
of time and you fill

146
00:09:32.400 --> 00:09:35.490
it out and you send
in your information and there's

147
00:09:35.490 --> 00:09:38.250
a secrecy envelope. So there's
an envelope and there's also

148
00:09:38.250 --> 00:09:41.790
another envelope. So I can
have multiple things in that

149
00:09:41.790 --> 00:09:44.880
envelope. And, you know, if
you tamper with one, you

150
00:09:44.880 --> 00:09:48.420
can tell, so there's actually
a separate envelope inside the

151
00:09:48.420 --> 00:09:51.300
main envelope. I mean, envelope
is addressed. The one inside

152
00:09:51.300 --> 00:09:53.910
is done for secrecy purposes.
So in case someone opens

153
00:09:53.910 --> 00:09:59.160
the outer envelope, they won't
accidentally open up the, the

154
00:09:59.160 --> 00:10:02.220
inner envelope. Right? So what
someone can do with things

155
00:10:02.220 --> 00:10:05.310
like Ws security is create
a large envelope full of

156
00:10:05.310 --> 00:10:08.370
other tiny envelope. Some of
which have like a, you

157
00:10:08.370 --> 00:10:13.320
know, a wax stamp, remember
when people used sure. A

158
00:10:13.320 --> 00:10:16.350
messenger and they'd have like
a stamp done in a

159
00:10:16.350 --> 00:10:20.460
wax symbol from the King.
And they would indicate that

160
00:10:20.460 --> 00:10:24.920
this particular envelope had been
tampered with Ceiling wax. They

161
00:10:24.920 --> 00:10:27.560
call it ceiling. That's exactly
right. Thank you for that.

162
00:10:28.640 --> 00:10:33.200
So, Ws security is the
how to do sealed wax

163
00:10:33.200 --> 00:10:37.700
envelopes and documents within the
context of soap using XML

164
00:10:37.700 --> 00:10:42.590
signature and XML encryption. So
we we've all seen wisdom.

165
00:10:42.620 --> 00:10:45.200
Wisdom of course, is the
web services description language that

166
00:10:45.200 --> 00:10:51.380
describes what a particular service
can do. Ws policy as

167
00:10:51.380 --> 00:10:55.670
a specification that is kind
of like wisdom, but it

168
00:10:55.670 --> 00:11:01.580
describes a policy of a
particular web services end point.

169
00:11:02.180 --> 00:11:03.980
So it would say, well,
if you're going to be

170
00:11:03.980 --> 00:11:06.350
doing, if you're gonna be
talking to us, our security

171
00:11:06.350 --> 00:11:08.690
policy is going to indicate
that you need to use

172
00:11:08.690 --> 00:11:12.410
triple Dez and you require
a client certificate if you're

173
00:11:12.410 --> 00:11:15.440
using HTTPS. So the transport
has to be a certain

174
00:11:15.440 --> 00:11:21.020
way. It's kind of wisdom
policy. Yeah. So wisdom is

175
00:11:21.020 --> 00:11:24.650
the here's how to call
it. And the Ws policy

176
00:11:24.650 --> 00:11:27.980
document as a separate document
that I suppose could come

177
00:11:27.980 --> 00:11:31.820
along for the ride inside
of wisdom, that describes all

178
00:11:31.820 --> 00:11:35.000
of the different policies around
how we want things handled.

179
00:11:35.000 --> 00:11:36.950
If you're going to be
doing this, all the security

180
00:11:36.950 --> 00:11:40.670
policies Now in the speeches,
when, you know, I hear

181
00:11:40.670 --> 00:11:43.940
people clicking the stop button
on their iPods and saying

182
00:11:45.470 --> 00:11:49.730
like lurch on the Adams
family, right. Because you know,

183
00:11:49.730 --> 00:11:53.030
when we think of wisdom
and Ws policy, we've all

184
00:11:53.350 --> 00:11:57.190
those files and they're cryptic
and difficult to understand at

185
00:11:57.190 --> 00:12:00.520
first glance. And, you know,
w we might want to

186
00:12:00.580 --> 00:12:05.050
just, just reassure the listener
that, you know, nobody expects

187
00:12:05.050 --> 00:12:07.860
you to write this stuff
by hand, You know? Yeah.

188
00:12:07.890 --> 00:12:09.720
For the, for the most
part, if you're using a

189
00:12:09.720 --> 00:12:12.870
decent toolkit, just like a
good web services toolkit, we'll,

190
00:12:13.200 --> 00:12:16.710
we'll hide the wisdom from
you. Indigo is doing its

191
00:12:16.710 --> 00:12:19.740
best. Now WCF is doing
its best to hide these

192
00:12:19.740 --> 00:12:21.900
things from you. And it
does a really good job.

193
00:12:21.930 --> 00:12:25.890
I mean, awareness of this
is important. And I know

194
00:12:25.890 --> 00:12:29.040
that people will probably disagree
with me, but I just

195
00:12:29.040 --> 00:12:31.710
think it's so important for
someone to go up to

196
00:12:31.710 --> 00:12:36.880
w3c.org and actually read the,
the submissions. I mean, there

197
00:12:36.900 --> 00:12:41.820
are submissions and draft specifications.
Lot of people put a

198
00:12:41.820 --> 00:12:44.400
lot of good work into
these things. This is, these

199
00:12:44.400 --> 00:12:48.600
are joint specifications written by,
you know, like Microsoft IBM

200
00:12:48.600 --> 00:12:52.980
SAP, Bea. This is not
just Microsoft saying how things

201
00:12:52.980 --> 00:12:56.400
ought to be. They, they
wrestle and they're not particularly

202
00:12:56.400 --> 00:12:59.910
hard to read. They really
aren't. Yeah. I mean, like

203
00:12:59.910 --> 00:13:01.950
I'm looking at the Ws
policy one right now, and

204
00:13:01.970 --> 00:13:06.150
it's, it's fairly well organized.
It's got examples. It explains

205
00:13:06.150 --> 00:13:09.510
what we're trying to accomplish.
Yeah. There are people like

206
00:13:09.630 --> 00:13:12.090
Tim Bray who kind of
amended XML who say that

207
00:13:12.090 --> 00:13:17.490
this is way too complicated
and people complain, but it's

208
00:13:17.490 --> 00:13:21.690
not that complicated. Right. There's
a difference between being difficult

209
00:13:21.690 --> 00:13:24.540
and being cool. Hopefully that's
why you're listening to the

210
00:13:24.540 --> 00:13:27.000
show so that, you know,
you can explain it to

211
00:13:27.000 --> 00:13:29.670
us. And not just because,
I mean, I can't explain,

212
00:13:29.700 --> 00:13:32.490
you know, all the Ws
start things in one 20

213
00:13:32.490 --> 00:13:34.740
minute podcasts that's being played
in double speed while someone

214
00:13:34.740 --> 00:13:37.050
races down the Audubon or
whatever, they're listening to this.

215
00:13:37.380 --> 00:13:41.070
Right. Rather than what I'm
trying to accomplish by talking

216
00:13:41.070 --> 00:13:43.620
about it in this particular
podcast is rather than just

217
00:13:43.620 --> 00:13:46.680
saying Ws star. Yeah. And
not really knowing what that

218
00:13:46.680 --> 00:13:50.730
means, understanding that these are
leisure layers, right. There are

219
00:13:50.730 --> 00:13:52.650
layers that came very quickly
though. And I think that's,

220
00:13:52.650 --> 00:13:54.810
what's confusing because we, you
know, for the longest time

221
00:13:54.810 --> 00:13:57.630
there was XML, and then
there were schema that built

222
00:13:57.630 --> 00:14:00.450
on top of things like
DVDs and DCDs, and then

223
00:14:00.630 --> 00:14:03.150
everyone pretty much understood that.
And then we started talking

224
00:14:03.150 --> 00:14:07.560
about document literal, right, passing
around documents. Then you start

225
00:14:07.560 --> 00:14:12.390
thinking about message, passing, request,
response messages, and that in

226
00:14:12.390 --> 00:14:15.960
the context of soap, soap,
being just a, an envelope

227
00:14:16.080 --> 00:14:19.200
technology in a way to
define headers, that's pretty much

228
00:14:19.200 --> 00:14:20.820
all soap is. It's just
like, Oh, here's what an

229
00:14:20.820 --> 00:14:24.660
envelope looks like. And then
suddenly we started getting Ws

230
00:14:24.660 --> 00:14:27.050
security, Ws, secure conversation that
dah, dah, dah, dah, dah,

231
00:14:27.050 --> 00:14:30.300
dah. And it got very
confusing. Yeah. There are things

232
00:14:30.300 --> 00:14:33.300
you probably won't use for
a while, like Ws, atomic

233
00:14:33.300 --> 00:14:37.950
transaction, and you know, things
like that. But the things

234
00:14:37.950 --> 00:14:39.690
that you're are gonna wanna
understand are things like w

235
00:14:39.690 --> 00:14:43.590
security you're gonna want to
understand what's called Ws metadata

236
00:14:43.590 --> 00:14:46.650
exchange. Let's talk about that
one for a sec. So

237
00:14:46.650 --> 00:14:50.610
Ws metadata exchange is what
they call a Ws mix.

238
00:14:52.130 --> 00:14:56.570
And this is a way
to describe what end points

239
00:14:56.580 --> 00:15:01.100
need to know when you
want to interact. So Ws

240
00:15:01.370 --> 00:15:03.860
policy that we just talked
about is the describing a

241
00:15:03.860 --> 00:15:06.290
characteristic of a web service,
like what that web service,

242
00:15:07.190 --> 00:15:11.240
what its capabilities are, what
its requirements are. Well, wisdom

243
00:15:11.270 --> 00:15:15.320
describes things like the end
point address, like where you

244
00:15:15.320 --> 00:15:18.260
can find that web service
describes the messages and the

245
00:15:18.260 --> 00:15:21.230
operations that are supported. And
some of the, like the

246
00:15:21.230 --> 00:15:23.840
network protocols that you would
potentially want to use, you

247
00:15:23.840 --> 00:15:26.950
know, this web service use
<inaudible> That would go on

248
00:15:26.950 --> 00:15:30.580
wisdom. Yeah. Ws Paul, You
might say, and you really

249
00:15:30.580 --> 00:15:32.530
need to be using this
kind of security and these

250
00:15:32.530 --> 00:15:37.480
clients' certificates when you do
that. So Ws policy is

251
00:15:37.510 --> 00:15:41.010
this isn't really about business
rules, is it? Well, it,

252
00:15:41.010 --> 00:15:43.990
it, it's a good question.
It kind of depends. If

253
00:15:43.990 --> 00:15:46.450
the business rule says this
ought to be encrypted and

254
00:15:46.450 --> 00:15:49.840
here's how w policy is
a decent way to describe

255
00:15:49.840 --> 00:15:51.910
that in a programmatic sense.
So where does it tell

256
00:15:51.910 --> 00:15:53.680
about discovery? Right. I want
to be able to ask

257
00:15:53.680 --> 00:15:55.300
the web service, so what
exactly is going to, to,

258
00:15:55.310 --> 00:15:58.510
is it gonna take for
me to talk? Okay. So

259
00:15:58.510 --> 00:16:01.330
the policy says you must
be using this certificate and

260
00:16:01.330 --> 00:16:04.330
that certificate, and you must
encrypt this payload in that

261
00:16:04.330 --> 00:16:11.860
payload. Right, right, right. Yeah.
So Ws, metadata exchange is

262
00:16:11.890 --> 00:16:17.260
a specification that describes how
we're going to work these

263
00:16:17.260 --> 00:16:19.750
kinds of these dialects out,
how we're going to say,

264
00:16:20.110 --> 00:16:23.020
well, I speak Ws policy,
the one that came out

265
00:16:23.020 --> 00:16:27.460
in September of 2004. And
here's how I want to

266
00:16:27.460 --> 00:16:31.360
express that, that bit of
metadata. It's not something you

267
00:16:31.360 --> 00:16:33.520
ordinarily need to worry about
now that, you know, w

268
00:16:33.550 --> 00:16:39.130
WCF kind of handles this
for you, but it's a

269
00:16:39.130 --> 00:16:42.190
way of describing a bit
of metadata. It's a bit,

270
00:16:42.190 --> 00:16:46.420
a way of collecting units
of metadata. Okay. Like wisdom,

271
00:16:46.450 --> 00:16:50.950
policy, schema, and saying all
of this applies to my,

272
00:16:50.980 --> 00:16:54.880
my end point. Okay. So
you've got signatures, you've got

273
00:16:54.880 --> 00:16:58.090
encryption, you've got things like
metadata exchange to describe things

274
00:16:58.090 --> 00:17:01.150
like policy and kind of
tie it all together. So

275
00:17:01.150 --> 00:17:03.550
I have some end point
out there that is going

276
00:17:03.550 --> 00:17:09.280
to speak web services. And
now I want to communicate

277
00:17:09.280 --> 00:17:13.150
back and forth using private
keys. Right. Public private keys.

278
00:17:13.300 --> 00:17:17.830
Yeah. So Carl Franklin has a
service and I will, and

279
00:17:17.930 --> 00:17:19.960
then I'm Scott, I'm going
to talk to the Carl Franklin

280
00:17:19.960 --> 00:17:22.990
service. I'm going to take
my message. And I'll encrypt

281
00:17:22.990 --> 00:17:27.940
it using your public key.
Right. And my private key.

282
00:17:28.300 --> 00:17:30.550
Yep. Right. So we're going
to maintain whether or not

283
00:17:30.550 --> 00:17:34.720
it's been tampered with, and
I'm using information about you

284
00:17:34.720 --> 00:17:38.800
to make sure that things
are decryptable by you. Now,

285
00:17:38.830 --> 00:17:46.480
Ws trust is a specification
that describes the interfaced for

286
00:17:46.480 --> 00:17:50.850
a security token service. Okay.
We talked about STS is

287
00:17:50.850 --> 00:17:55.890
in our talk about info
card. So info card, Microsoft

288
00:17:55.890 --> 00:17:59.640
info card or card spaces
is the client side of

289
00:17:59.880 --> 00:18:03.660
a Ws trust relationship. Okay.
And the trust that you

290
00:18:03.660 --> 00:18:08.130
have between yourself and another
service is represented by that

291
00:18:08.130 --> 00:18:11.640
exchange of tokens. So I'm
going to go and say,

292
00:18:12.840 --> 00:18:15.840
I have some claims about
myself. I claim that my

293
00:18:15.840 --> 00:18:18.510
first name is Scott and
my last name is Hanselman.

294
00:18:18.870 --> 00:18:22.680
And I have a website
here that claim can be

295
00:18:22.680 --> 00:18:27.330
represented by a URI, like
a unique identifier. Most people

296
00:18:27.330 --> 00:18:29.190
are using URLs for this,
but it can be, it's

297
00:18:29.190 --> 00:18:36.120
just a universal uniform resource
indicator or identifier yet. And

298
00:18:37.110 --> 00:18:40.710
I'm going to talk to
a particular security token service

299
00:18:41.010 --> 00:18:44.280
that we might share. So
like, let's say Scott calls

300
00:18:44.280 --> 00:18:48.870
the Carl Franklin service and we,
the trust relationship has to

301
00:18:48.870 --> 00:18:51.960
be set up ahead of
time. What a security token

302
00:18:51.960 --> 00:18:55.350
services is. It's a third
party trusted thing with a

303
00:18:55.350 --> 00:18:58.560
known interface that we can
use. You trust him. I

304
00:18:58.560 --> 00:19:01.110
trust him, we trust each
other. So then I could

305
00:19:01.110 --> 00:19:06.450
also call the Richard Campbell service.
You know, so there's the

306
00:19:06.450 --> 00:19:09.090
Carl service and the Richard Campbell
service. And there's some security

307
00:19:09.090 --> 00:19:11.250
token service that is going
to be handing out tokens.

308
00:19:11.820 --> 00:19:14.070
So what Ws trust is,
is it is the thing

309
00:19:14.070 --> 00:19:17.220
that lets the applications, construct
these message exchanges in a

310
00:19:17.220 --> 00:19:21.630
trusted way. So I can
go and say, Hey, a

311
00:19:22.200 --> 00:19:24.690
security token service. You know,
I have this claim I

312
00:19:24.690 --> 00:19:26.670
want to make about my
name, or maybe I want

313
00:19:26.670 --> 00:19:29.550
to ordinarily you make a
claim about either your identity

314
00:19:30.270 --> 00:19:32.400
or that there's an aspect
about yourself that you, you

315
00:19:32.400 --> 00:19:35.790
feel is important. And it
will return back a token.

316
00:19:35.880 --> 00:19:39.510
That token is a collection
of those claims. And if

317
00:19:39.510 --> 00:19:43.560
you sign that token, then
you've got some authority that

318
00:19:43.560 --> 00:19:46.770
is going to cryptographically, endorse
that token and say, well,

319
00:19:46.770 --> 00:19:49.920
this certificate has been applied
to this token. So now

320
00:19:49.920 --> 00:19:51.960
I've got a security token
that I can make sure

321
00:19:51.960 --> 00:19:56.820
is trusted. And it's, it's
not been tampered with. And

322
00:19:57.270 --> 00:20:01.200
the security token service that
third party service there might

323
00:20:01.200 --> 00:20:03.210
be handled by. You doesn't
necessarily mean to need to

324
00:20:03.210 --> 00:20:05.760
be a third party. It's
that web service that gives

325
00:20:05.760 --> 00:20:10.530
tokens. Okay. So it is
the thing that will, based

326
00:20:10.530 --> 00:20:14.820
on evidence that it has
about trust. You provide it

327
00:20:14.820 --> 00:20:17.130
with some proof, like I
might give it a username

328
00:20:17.130 --> 00:20:19.920
and a password or username
and a password and something

329
00:20:19.920 --> 00:20:21.960
from a smart card. And
then it will return a

330
00:20:21.960 --> 00:20:26.010
token and will generate those
tokens. So in the context

331
00:20:26.010 --> 00:20:28.050
of card space is like
we were talking about last

332
00:20:28.050 --> 00:20:33.030
week or a couple weeks
ago, when you self issue

333
00:20:33.180 --> 00:20:36.210
a card space card, there
is a security token service.

334
00:20:36.690 --> 00:20:40.170
It's just on your machine.
You're basically telling yourself you

335
00:20:40.170 --> 00:20:44.460
trust yourself. And that's where
a self issued token comes

336
00:20:44.460 --> 00:20:47.680
from. There's a little tiny,
local security token service. That's

337
00:20:47.680 --> 00:20:50.770
fine For, for you. But
you know, if somebody's out

338
00:20:50.770 --> 00:20:52.960
in the big wide world
gets that, they're not going

339
00:20:52.960 --> 00:20:55.030
to know if they're going
to trust it or not.

340
00:20:55.380 --> 00:20:58.050
We're hoping that like an
Amazon or visa will start

341
00:20:58.050 --> 00:21:01.530
being a security token service.
So a security token services,

342
00:21:01.530 --> 00:21:06.060
a web service that speaks
Ws trust Have any have

343
00:21:06.120 --> 00:21:09.990
Verisign or any of these
certificate vendors gotten on board

344
00:21:09.990 --> 00:21:14.580
with web service based tokens.
Everyone's on board, but I

345
00:21:14.580 --> 00:21:17.760
don't see, no one has
made a public security token

346
00:21:17.760 --> 00:21:21.000
service out there For the
world. Yet, dude, Scott security,

347
00:21:21.000 --> 00:21:23.280
token service. I can see
it now, do your own

348
00:21:23.280 --> 00:21:28.230
business SSTs. I trust everybody.
So there are these different

349
00:21:28.230 --> 00:21:31.200
ways that one could say,
I'm going a broker trust.

350
00:21:31.590 --> 00:21:34.590
You could have like direct
trust where I'm going to

351
00:21:34.590 --> 00:21:36.900
be the relaying party. And
I'm going to accept all

352
00:21:36.900 --> 00:21:41.040
of your claims or maybe
I'll only accept some of

353
00:21:41.040 --> 00:21:44.850
the claims or maybe I'll
be vouching for someone, right?

354
00:21:45.960 --> 00:21:48.180
I could you trust me?
And then we could kind

355
00:21:48.180 --> 00:21:51.900
of apply the transitive property
of trust. You know, you

356
00:21:51.900 --> 00:21:56.640
trust me, I trust Richard Campbell
and he trusts you buy

357
00:21:56.640 --> 00:22:01.500
a direct broker trust, right?
This also the Ws trust

358
00:22:01.500 --> 00:22:05.430
also indicates the, the concept
of message freshness, the idea

359
00:22:05.430 --> 00:22:07.170
that you want to make
sure that a message doesn't

360
00:22:07.170 --> 00:22:09.480
get replayed. So there's a
thing called a nonce that

361
00:22:09.480 --> 00:22:13.170
prevents someone from T VOing
your web services. Right? Right.

362
00:22:13.170 --> 00:22:14.880
You only want to make
sure that only one shows

363
00:22:14.880 --> 00:22:19.560
up. So the requester that
would be like me, who

364
00:22:19.560 --> 00:22:21.300
is going to call the
car, finding the web service

365
00:22:21.570 --> 00:22:24.300
would go to the security
token web service and make

366
00:22:24.300 --> 00:22:27.360
some claims and say, I
claim these things and you

367
00:22:27.390 --> 00:22:30.750
do you trust me? And
based on their policy and

368
00:22:30.750 --> 00:22:33.420
their tokens, they'll return back
a token to me that

369
00:22:33.420 --> 00:22:36.600
then I could hand to
you, right? And then you

370
00:22:36.600 --> 00:22:39.180
could then talk to the
security token web service and

371
00:22:39.180 --> 00:22:41.010
find out whether or not
you, you buy it, whether

372
00:22:41.010 --> 00:22:44.250
you believe this is the
case. Okay. And then these

373
00:22:44.250 --> 00:22:46.170
trust relationships can be set
up ahead of time. Or

374
00:22:46.170 --> 00:22:47.980
we could have kind of
dynamic trust where you would

375
00:22:48.960 --> 00:22:52.140
trust me because of information
that you received from that

376
00:22:52.200 --> 00:22:57.900
token service. So Indigo WCF
understands these things right in

377
00:22:57.900 --> 00:23:00.630
the box. Ordinarily, you want
it to see any of

378
00:23:00.630 --> 00:23:03.120
these, these angle brackets, but
you will spend a lot

379
00:23:03.120 --> 00:23:05.640
of time, not in the
DLL hell, but you'll spend

380
00:23:05.640 --> 00:23:10.740
it in a config file
Hill. So In WCF, do

381
00:23:10.740 --> 00:23:13.920
we have configurators? Do we
have wizards? Do we have

382
00:23:14.310 --> 00:23:16.350
tools to make it so
that we don't have to

383
00:23:16.350 --> 00:23:19.650
touch the goo? Or do
you actually have to get

384
00:23:19.650 --> 00:23:21.870
in there and do it?
Yeah. So yes and no,

385
00:23:21.870 --> 00:23:24.660
that's a great question. There
were some 99% of things.

386
00:23:24.660 --> 00:23:27.570
There's a config file for
a, we bumped into a

387
00:23:27.570 --> 00:23:30.090
few things where we have
to use the object model

388
00:23:30.090 --> 00:23:32.520
that comes with Indigo in
order to make some changes

389
00:23:32.850 --> 00:23:34.530
and you know, nine, nine
times out of a hundred,

390
00:23:34.530 --> 00:23:37.740
there's some aspect of things
in Indigo and WCF that

391
00:23:37.740 --> 00:23:40.620
you can, you can get
to the config file. You

392
00:23:40.620 --> 00:23:42.900
can replace everything. You know,
if you don't like the

393
00:23:42.900 --> 00:23:44.640
way it does something, you
just yank it out and

394
00:23:44.640 --> 00:23:46.910
say, I'll do that. Yeah.
I do like that about

395
00:23:46.910 --> 00:23:49.280
WCF it's modular. And if
you want to do something

396
00:23:49.280 --> 00:23:50.750
better, you can just plug
it in. But you do

397
00:23:50.750 --> 00:23:52.370
have to spend a lot
of time in the config

398
00:23:52.400 --> 00:23:56.150
files. There are some WinForms
applications that'll do that. I've

399
00:23:56.150 --> 00:23:59.000
seen a couple shy. Koans
showing me some, I think,

400
00:24:00.410 --> 00:24:02.570
more and more, you'll see
tools to do that. When

401
00:24:02.570 --> 00:24:04.160
you pull it, when you
plug in some tools into

402
00:24:04.160 --> 00:24:06.140
visual studio, that will let
you get to those things.

403
00:24:06.440 --> 00:24:09.020
Yeah. I haven't seen kind
of the Uber configurator for

404
00:24:09.020 --> 00:24:11.150
all things, Indigo that lets
me never touch an angle

405
00:24:11.150 --> 00:24:14.270
bracket inside of a config
file yet. But maybe, maybe

406
00:24:14.270 --> 00:24:16.280
a listener will educate us
to that. Yeah. That's what

407
00:24:16.280 --> 00:24:18.800
we need. Alright. Tool vendors.
Are you listening out there?

408
00:24:19.370 --> 00:24:24.410
That's it? Yeah. So that's
basically the Ws star stuff

409
00:24:24.410 --> 00:24:27.110
that you need to know
about in, in, in 20

410
00:24:27.110 --> 00:24:29.180
short minutes. Yeah, that was
good. I think there's a

411
00:24:29.180 --> 00:24:33.410
lot more, but don't be
afraid to read the specs

412
00:24:34.220 --> 00:24:37.970
and it is sometimes hard
to get the, the big

413
00:24:37.970 --> 00:24:41.630
picture. But if you look
at like, like Michelle Bustamante,

414
00:24:41.630 --> 00:24:44.960
his blog, right. Indigo girl,
I look at her blog,

415
00:24:44.960 --> 00:24:48.020
look at the guys like
Indigo Ingo, rammer. Watch the

416
00:24:48.020 --> 00:24:52.460
videos on, on channel nine
about WCF. They're they're really

417
00:24:52.460 --> 00:24:55.670
good. Yeah. And get to
a, one of the, I

418
00:24:55.670 --> 00:25:00.410
design training sessions to those
are actually, he just released.

419
00:25:00.410 --> 00:25:04.220
That's great point. You've all
Lowery at. I design just

420
00:25:04.250 --> 00:25:08.920
a, I designed.net just released
his WCF coding standard. Just

421
00:25:08.920 --> 00:25:11.510
go to the homepage. It's
right there. It's very good.

422
00:25:11.510 --> 00:25:14.720
It's a description of how
he says you should write

423
00:25:14.720 --> 00:25:19.460
your WCF services for simplicity,
ease of calling ease of

424
00:25:19.460 --> 00:25:22.250
configuration. Ease of use. I
spent a long time thinking

425
00:25:22.250 --> 00:25:26.300
about this and working with
the team to also, he's

426
00:25:26.570 --> 00:25:33.830
got his big mammoth example,
WCF sample code. There's so

427
00:25:33.830 --> 00:25:35.180
much stuff up there. If
you go up to the,

428
00:25:35.190 --> 00:25:38.540
just go to idesign.net and
click on downloads, he's got

429
00:25:38.540 --> 00:25:44.030
whole huge sections on WCF
example. After example, after example,

430
00:25:44.030 --> 00:25:45.890
there's will be more examples
there. Then there are really

431
00:25:45.890 --> 00:25:49.160
anywhere else, including Microsoft's own
site. And you've always so

432
00:25:49.160 --> 00:25:52.730
modest too. Yeah. And he'll
tell you that. Yeah. All

433
00:25:52.730 --> 00:25:56.090
right, Scott, that's a show.
Fantastic. Thanks a lot. I

434
00:25:56.090 --> 00:25:58.250
know you're not feeling all
that great today. I'm sort

435
00:25:58.250 --> 00:26:00.560
of coming down with a
cold too, and we apologize

436
00:26:00.560 --> 00:26:02.120
for the lack of links,
but I think it was

437
00:26:02.120 --> 00:26:05.180
a good primer. Anyway, I
think so. Thank you, Scott.

438
00:26:05.240 --> 00:26:19.430
And we'll see you next
week on Hansel minutes. <inaudible>.

