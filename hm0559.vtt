WEBVTT FILE

1
00:00:12.270 --> 00:00:17.010
From Hanselman it's dot com.
It's Hansel minutes, a weekly

2
00:00:17.010 --> 00:00:21.480
discussion with web developer and
technologist Scott Hanselman. This is

3
00:00:21.480 --> 00:00:26.880
Lawrence Ryan announcing show number 559.
In this episode, Scott talks

4
00:00:26.880 --> 00:00:31.230
with Angie Jones about including
automation in the software development

5
00:00:31.230 --> 00:00:39.150
cycle. Hi, this is Scott
Hanselman. This is another episode

6
00:00:39.150 --> 00:00:42.210
of Hansel minutes today. I'm
talking with Angie Jones. She's

7
00:00:42.210 --> 00:00:45.480
a consulting automation engineer. She
works at Lexus nexus and

8
00:00:45.630 --> 00:00:49.050
also has been an adjunct
professor of computer programming at

9
00:00:49.050 --> 00:00:51.840
a community college. How are
you? I'm great. How are

10
00:00:51.840 --> 00:00:54.450
you, Scott? I am very
happy to be talking to

11
00:00:54.450 --> 00:00:58.170
you because you are about
all things automation. I know

12
00:00:58.170 --> 00:01:02.400
that you, you spoke at
a tech test bash recently,

13
00:01:02.630 --> 00:01:08.750
Right? I did. In Philadelphia.
Yeah. And the, the title,

14
00:01:08.750 --> 00:01:10.460
I thought it was pretty
cool. And I noticed the

15
00:01:10.470 --> 00:01:12.800
Twitter kind of lit up
when you started giving this

16
00:01:12.800 --> 00:01:17.810
talk, you basically said, how
do you get automation included

17
00:01:17.810 --> 00:01:20.780
in the definition of done
that makes me think that

18
00:01:20.930 --> 00:01:23.990
you believe that people do
not respect automation enough and

19
00:01:23.990 --> 00:01:26.570
maybe they need to expand
their sense of what done

20
00:01:26.900 --> 00:01:31.160
means. Right. And not so
much respect. I think they

21
00:01:31.160 --> 00:01:35.360
just don't think that it's
feasible or achievable to get

22
00:01:35.360 --> 00:01:39.950
done in a typical agile
sprint cycle. So for most

23
00:01:39.950 --> 00:01:43.910
people, it's this black box
and all that they really

24
00:01:43.910 --> 00:01:46.220
know is that it takes
a lot of time, right?

25
00:01:46.580 --> 00:01:52.250
And even automation, engineers, themselves,
and trying to automate all

26
00:01:52.250 --> 00:01:56.390
the things or even some
of the things they struggle

27
00:01:56.390 --> 00:02:00.290
with being able to do
this in a fast, efficient

28
00:02:00.290 --> 00:02:03.320
way. So the talk was
pretty much on how do

29
00:02:03.320 --> 00:02:06.290
you get it in your
definition of done? What are

30
00:02:06.290 --> 00:02:09.260
some tips and tricks and
techniques that you can use

31
00:02:09.560 --> 00:02:14.330
to be able to make
your automation agile friendly? Okay.

32
00:02:14.570 --> 00:02:18.470
So when an application is
agile friendly, I think we,

33
00:02:18.470 --> 00:02:21.050
in our minds, I think
about things like, I mean,

34
00:02:21.050 --> 00:02:28.370
I dunno maybe continuous integration,
continuous deployment. Exactly. What, when

35
00:02:28.370 --> 00:02:31.970
we think about automation, are
you talking about basically anything

36
00:02:31.970 --> 00:02:35.300
that isn't, that isn't manual?
Like, do I want to

37
00:02:35.300 --> 00:02:37.520
just take anything I do
twice? Like if I could

38
00:02:37.520 --> 00:02:39.290
do something twice, it's like
all that should be automated.

39
00:02:39.410 --> 00:02:42.650
Yeah, yeah. Yeah. Typically what
I'm talking about is test

40
00:02:42.650 --> 00:02:47.030
automation, but that definitely can
be extended to other processes

41
00:02:47.030 --> 00:02:50.570
that we use within our
teams. So that's where we're

42
00:02:50.570 --> 00:02:53.300
trying to push automation. And
when I say we, I

43
00:02:53.300 --> 00:02:56.300
may just kind of other
thought leaders in the automation

44
00:02:56.300 --> 00:03:00.820
space is that just limited
ourselves the test, but as

45
00:03:00.820 --> 00:03:05.500
we're all trying to be
more agile and move quicker,

46
00:03:05.770 --> 00:03:08.260
we need to automate some
of these repetitive tasks that

47
00:03:08.260 --> 00:03:11.430
we do as well. Why
do you think people get

48
00:03:11.430 --> 00:03:15.540
caught up in doing things
manually? Like I've always felt

49
00:03:15.540 --> 00:03:18.060
like we should have a
sense of smell. And if

50
00:03:18.060 --> 00:03:22.950
you feel yourself doing something
twice and it's manual, you

51
00:03:22.950 --> 00:03:25.530
should like smell that and
you should go. Maybe I

52
00:03:25.530 --> 00:03:29.430
need to run a batch
file or maybe we just

53
00:03:29.430 --> 00:03:32.220
continue to do things and
people will, for years have

54
00:03:32.460 --> 00:03:35.460
a manual deployment or a
manual test that they do.

55
00:03:35.880 --> 00:03:38.340
Exactly. One. I just think,
I don't know. It's just

56
00:03:38.340 --> 00:03:41.130
not in the front of
people's brains to think, Oh,

57
00:03:41.130 --> 00:03:43.620
maybe I should automate this.
Or maybe even if you

58
00:03:43.620 --> 00:03:46.200
don't have the skillset, maybe
I should get someone else

59
00:03:46.260 --> 00:03:48.360
to automate this one. I
don't think they think about

60
00:03:48.360 --> 00:03:50.970
it. So too, when I
point these types of things

61
00:03:50.970 --> 00:03:54.090
out like, Oh, we can
automate that. It's almost like

62
00:03:54.090 --> 00:03:58.280
a resistance from people. Like,
no, no, no. I want,

63
00:03:58.280 --> 00:04:01.590
I think they don't trust
automating, like, no, it won't

64
00:04:01.590 --> 00:04:03.570
be able to do it.
How I do it, you

65
00:04:03.570 --> 00:04:07.620
know? And then too, there's
this fear of, well, if

66
00:04:07.620 --> 00:04:09.870
we have that automated than
what about me? Is there

67
00:04:09.870 --> 00:04:13.980
still a need for me?
The human? Hmm. You know,

68
00:04:13.980 --> 00:04:16.140
that is an actually an
interesting point. I think that

69
00:04:16.170 --> 00:04:18.540
we may not say that
out loud, but I know

70
00:04:18.540 --> 00:04:23.760
that people feel that. Yep,
exactly. So when we say

71
00:04:23.760 --> 00:04:28.320
that a feature is, is,
is finished, does being automatically

72
00:04:28.320 --> 00:04:31.740
testable or automated a part
of that definition by default,

73
00:04:31.740 --> 00:04:33.360
do you think, or does
that need to be, do

74
00:04:33.360 --> 00:04:37.980
people need to be reminded
of that testable? Yes. Yes.

75
00:04:38.280 --> 00:04:42.570
Automated not so much. So
that's the purpose of the

76
00:04:42.570 --> 00:04:45.480
talk? Like one of the
points that I bring out

77
00:04:45.480 --> 00:04:48.150
is, okay, so we say
that it's tested and we

78
00:04:48.150 --> 00:04:50.970
feel good about that. And
we go ahead and close

79
00:04:50.970 --> 00:04:54.330
this out, but we're bringing
like this technical debt along

80
00:04:54.330 --> 00:04:57.450
with us, right? So it's
not automated. No, one's testing

81
00:04:57.450 --> 00:05:03.180
this again until some period
of time deemed as regression

82
00:05:03.180 --> 00:05:07.860
testing. Right? So we're bringing
the technical debt of having

83
00:05:07.860 --> 00:05:09.720
to automate, like we know
we want to automate it

84
00:05:09.720 --> 00:05:12.060
at some point and it's
probably being thrown on some

85
00:05:12.060 --> 00:05:16.380
backlog and we have automation
engineers who are focused on

86
00:05:16.380 --> 00:05:19.470
automating this at some point
in life that could be

87
00:05:19.860 --> 00:05:23.580
months from now, if it's
a low priority test could

88
00:05:23.580 --> 00:05:27.210
be a year from now.
Right. So the, my, my

89
00:05:27.210 --> 00:05:31.470
whole message is how do
we get this incorporated? And

90
00:05:31.470 --> 00:05:34.650
so our mindset so that
we finish all the things

91
00:05:34.650 --> 00:05:37.980
that we need to do
before we actually consider this

92
00:05:37.980 --> 00:05:43.300
done no tech debt. So
then I think that the

93
00:05:43.350 --> 00:05:48.360
subtext there, if I may,
is that it's not important.

94
00:05:48.450 --> 00:05:51.150
And that's why it's not
in the definition. People are

95
00:05:51.150 --> 00:05:54.990
saying, well, you know, when
you get time, when you

96
00:05:54.990 --> 00:05:57.620
have time, go ahead and
automate that test. But you

97
00:05:57.620 --> 00:06:00.440
know, it works. And like
you said, when it gets

98
00:06:00.440 --> 00:06:03.860
done right. But in the
future, that might be never,

99
00:06:03.920 --> 00:06:06.320
it might literally never get
done. So then if it

100
00:06:06.320 --> 00:06:10.320
doesn't get done, then it
didn't matter. Right. Exactly. And

101
00:06:10.330 --> 00:06:13.120
so I think people are
missing like the importance of

102
00:06:13.120 --> 00:06:15.610
this. And we, we think
is important, which is why

103
00:06:15.610 --> 00:06:20.590
we have these long extended
regression cycles. Right. So yeah,

104
00:06:20.590 --> 00:06:22.720
we do want to test
it again. At some point

105
00:06:22.720 --> 00:06:26.620
before we release this to
a customer or we've added

106
00:06:26.620 --> 00:06:30.010
so much functionality, I think
is a good point to

107
00:06:30.010 --> 00:06:32.320
go ahead and regress all
of this with all the

108
00:06:32.320 --> 00:06:35.560
tests that we have. So
we think is important. It's

109
00:06:35.560 --> 00:06:42.010
just a matter of, do
we want to go through

110
00:06:42.010 --> 00:06:46.660
the pain of actually doing
it now or push that

111
00:06:46.660 --> 00:06:48.940
pain out. And so when
you're trying to move fast

112
00:06:48.940 --> 00:06:52.420
and you're doing these continuous
integrations and things like that,

113
00:06:53.320 --> 00:06:56.320
that's where the focus is
on. We have to create

114
00:06:56.320 --> 00:07:00.460
new development and I'll test
there's to test this. And

115
00:07:00.460 --> 00:07:03.970
we'll just pretend that everything
is good until the end,

116
00:07:03.970 --> 00:07:06.250
when we get to this
long regression phase and come

117
00:07:06.250 --> 00:07:09.670
up with like all of
these different issues that could

118
00:07:09.670 --> 00:07:11.860
have been caught a lot
sooner. So I think it's

119
00:07:11.860 --> 00:07:16.600
like a transformation to have
the mindset from waterfall to

120
00:07:16.600 --> 00:07:20.860
agile. So in your talk,
you, you not only just

121
00:07:20.920 --> 00:07:24.940
advocate for automation, which is,
I would say not controversial,

122
00:07:25.330 --> 00:07:27.580
but you also are a
little more controversial in that

123
00:07:27.580 --> 00:07:30.640
you say that we should
get the automation engineer, what

124
00:07:30.640 --> 00:07:34.780
they need before the developer
even starts writing code. What

125
00:07:34.780 --> 00:07:38.230
do you mean by that?
What I mean by this?

126
00:07:38.290 --> 00:07:42.370
So the automation, engineers, and
teams that I've worked on

127
00:07:42.370 --> 00:07:46.420
before, they have been isolated
in their working in this

128
00:07:46.420 --> 00:07:50.650
silo with these backlog of
test cases that they need

129
00:07:50.650 --> 00:07:53.080
to automate. Right? So no
one's even aware of what's

130
00:07:53.080 --> 00:07:56.470
being automated. And when, so
one of the ways I

131
00:07:56.470 --> 00:07:58.750
say that you can get
automation and definition of done

132
00:07:58.750 --> 00:08:03.220
is by embedding that automation
engineer into the sprint teams.

133
00:08:03.220 --> 00:08:05.560
Right? And so when you
do that, I try to

134
00:08:05.560 --> 00:08:07.750
paint the picture of what
it's, what does that look

135
00:08:07.750 --> 00:08:12.610
like? How do they interact
with other team members? How

136
00:08:12.610 --> 00:08:14.590
do they educate them? How
do they get what they

137
00:08:14.590 --> 00:08:16.810
need from them to be
able to do this? Because

138
00:08:16.810 --> 00:08:21.100
it is a shift left
in the process. And so

139
00:08:21.640 --> 00:08:23.890
being able to achieve this,
you have to get other

140
00:08:23.890 --> 00:08:26.950
people involved. And one of
those people would be the

141
00:08:26.950 --> 00:08:33.160
developer, right? And so I
talk about techniques of working

142
00:08:33.160 --> 00:08:36.370
with a developer in kind
of doing like a sketch

143
00:08:36.370 --> 00:08:42.220
session before any coding begins.
So let's go ahead and

144
00:08:42.610 --> 00:08:45.370
both agree on if this
is a UI, what's this

145
00:08:45.370 --> 00:08:48.580
UI gonna look like if
it's a web service, what's

146
00:08:48.580 --> 00:08:52.090
that gonna look like? And
go ahead and conceptualize that

147
00:08:52.750 --> 00:08:55.890
in the beginning, before we
write any code. So fleshes

148
00:08:55.890 --> 00:08:57.780
out a lot of the
detail and a lot of

149
00:08:57.780 --> 00:09:01.200
the misconceptions. And then once
you already, once you have

150
00:09:01.230 --> 00:09:04.110
that part done, go ahead
and take it a step

151
00:09:04.110 --> 00:09:08.970
further and start identifying the
elements that's going to be

152
00:09:08.970 --> 00:09:12.630
used in putting identifiers on
those and making that basically

153
00:09:12.630 --> 00:09:15.810
a contract with the developer.
So let them know, okay,

154
00:09:15.840 --> 00:09:19.200
for me to automate this,
this is what I need

155
00:09:19.200 --> 00:09:21.240
from you. So this is
how we're going to make

156
00:09:21.240 --> 00:09:25.620
this automateable and kind of
just having that conversation, because

157
00:09:25.620 --> 00:09:31.320
as many times, as I
asked for IDs on elements

158
00:09:31.320 --> 00:09:33.720
and, and for them to
be created a certain type

159
00:09:33.720 --> 00:09:37.230
of way, the developer just
doesn't remember to do that.

160
00:09:37.440 --> 00:09:39.810
So in having this conversation
and having them be a

161
00:09:39.810 --> 00:09:43.920
part of that exercise kind
of reinforces that. And then

162
00:09:43.920 --> 00:09:48.200
they remember it works beautifully.
What was it? Someone said

163
00:09:48.200 --> 00:09:50.390
that if it's not someone's
job, it just won't get

164
00:09:50.390 --> 00:09:53.270
done. Right? So like, if
you just count on the

165
00:09:53.270 --> 00:09:55.580
good nature of the developer
to make sure that you

166
00:09:55.580 --> 00:09:59.150
get your automation, IDs on
elements is never going to

167
00:09:59.150 --> 00:10:01.400
happen. And then you're going
to feel like a second

168
00:10:01.400 --> 00:10:04.190
class citizen on your team
and they're not setting you

169
00:10:04.190 --> 00:10:06.950
up for success. Exactly. And
then I have to go

170
00:10:06.950 --> 00:10:09.860
back and kind of nag
and whine and ask them

171
00:10:09.860 --> 00:10:12.950
for it. Now who's going
to stop doing their development

172
00:10:12.950 --> 00:10:15.740
work to go and put
some ideas on old things

173
00:10:15.740 --> 00:10:18.320
that they've already done. Right.
Nobody wants to do that.

174
00:10:18.650 --> 00:10:23.210
So doing this in advance
of writing any code, having

175
00:10:23.210 --> 00:10:25.850
it specked out, giving them
a copy of it, letting

176
00:10:25.850 --> 00:10:29.180
them go back to their
desk with that copy and,

177
00:10:29.300 --> 00:10:33.020
and develop right. That, that
kind of sets it up

178
00:10:33.020 --> 00:10:35.840
for success. And it is
gives a sense of empathy.

179
00:10:35.840 --> 00:10:39.770
So they realize now, Oh,
okay, I see why she

180
00:10:39.770 --> 00:10:43.790
needed this. And so they
understand the pain points now

181
00:10:43.790 --> 00:10:48.140
in a little bit more
empathetic to that. Okay. But

182
00:10:49.160 --> 00:10:53.150
if I try to go
and automate everything that that's

183
00:10:53.150 --> 00:10:56.330
not going to fit in
a sprint. Exactly. It's not,

184
00:10:56.990 --> 00:10:58.700
How do I decide what
to automate and what not

185
00:10:58.700 --> 00:11:01.910
to suddenly, I feel like
this is a good podcast,

186
00:11:01.910 --> 00:11:03.230
but now I have a
lot more work to do.

187
00:11:04.640 --> 00:11:07.940
Right? So I, I tell,
I tell teams like don't

188
00:11:07.940 --> 00:11:10.610
try to automate everything. And
that typically comes from the

189
00:11:10.610 --> 00:11:14.120
top down where you have
an executive or a manager,

190
00:11:14.120 --> 00:11:17.180
who's saying, yes, we need
to automate everything, automate all

191
00:11:17.180 --> 00:11:20.060
the tests. Right? My issue
with that is one, not

192
00:11:20.060 --> 00:11:24.170
only will it not fit
in a sprint two, this

193
00:11:24.170 --> 00:11:27.620
is living breathing code that
we have to maintain, right?

194
00:11:27.800 --> 00:11:32.720
So maintaining these low value
tests is not the best

195
00:11:32.780 --> 00:11:38.360
idea. Having these low value
tests run in a continuous

196
00:11:38.360 --> 00:11:44.570
integration or continuous deployment pipeline
and waning making developers wait

197
00:11:44.600 --> 00:11:48.410
for the feedback from these
low value tests is not

198
00:11:48.410 --> 00:11:52.880
a good idea in my
opinion, either. So I advise

199
00:11:53.380 --> 00:11:58.000
to look at what your
tests are and pick the

200
00:11:58.000 --> 00:12:01.630
ones that you think are
best candidates for automation. And

201
00:12:01.630 --> 00:12:05.410
that could be based on,
on risk talk with your

202
00:12:05.410 --> 00:12:09.760
business folks, your, your business
analysts, your product owners, talk

203
00:12:09.760 --> 00:12:12.700
with them and see, what
are we building? Why are

204
00:12:12.700 --> 00:12:15.910
we building it? Who are
we building it for? How

205
00:12:15.910 --> 00:12:17.980
are they going to use
this? Do you have any

206
00:12:18.310 --> 00:12:22.570
data, any analytics on how
our customers are using these

207
00:12:22.570 --> 00:12:27.280
features are the, you know,
kind of similar features to

208
00:12:27.280 --> 00:12:30.610
the ones that we're developing.
So let's see what people

209
00:12:30.610 --> 00:12:33.970
are doing with this product,
and then automate the most

210
00:12:33.970 --> 00:12:41.040
important risk based scenarios out
of that bag. And you

211
00:12:41.040 --> 00:12:43.590
actually have a part and
we'll put your slides online

212
00:12:43.590 --> 00:12:45.180
and your slides are online.
I'll link to them from

213
00:12:45.180 --> 00:12:48.420
the show notes, but you
have this interesting mapping between

214
00:12:48.420 --> 00:12:51.600
you say, like, here's the
user story? Here's the feature.

215
00:12:52.080 --> 00:12:54.780
And then out of that
are these eight, nine, 10

216
00:12:54.930 --> 00:12:58.860
tests, which seems intuitive and
obvious after you've said it

217
00:12:58.860 --> 00:13:00.990
out loud. But I know
I've worked on teams that

218
00:13:00.990 --> 00:13:02.610
haven't done that before. So
I thought that was really

219
00:13:02.610 --> 00:13:04.830
cool to say, all right,
well, here's, here's a user

220
00:13:04.830 --> 00:13:08.070
story. Here are the eight
tests or the eight ideas

221
00:13:08.070 --> 00:13:10.230
for tests that pop out
of that. And then that

222
00:13:10.230 --> 00:13:12.720
tells you the developer, what
you're going to need to

223
00:13:12.720 --> 00:13:14.940
do to set up the
engineer or the automation engineer

224
00:13:14.940 --> 00:13:18.030
for success. Yeah. Yeah. And
even from this, so here

225
00:13:18.030 --> 00:13:21.120
are the 10 tests, right?
Do we want to automate

226
00:13:21.120 --> 00:13:24.330
all of them? Let's look
at which ones are the

227
00:13:24.330 --> 00:13:27.570
higher risk ones and which
ones are, are we okay

228
00:13:27.570 --> 00:13:30.780
with testing it manually and
then kind of leaving it

229
00:13:30.780 --> 00:13:34.200
alone? Oh, interesting. So then
you would sort them basically

230
00:13:34.200 --> 00:13:37.200
for like, you know, automate
ability or like what is

231
00:13:37.200 --> 00:13:41.640
the most attractive one to
be automated. And then you

232
00:13:41.640 --> 00:13:44.580
show, when you are drawing
out your kind of your

233
00:13:44.580 --> 00:13:49.080
pencil layouts or your, your
balsamic kind of like layouts

234
00:13:49.080 --> 00:13:52.710
of what a page looks
like, you actually show the,

235
00:13:52.860 --> 00:13:58.230
the path, the automation path
to that particular item. That

236
00:13:58.230 --> 00:14:00.210
seemed, I thought that was
a really, really useful tip.

237
00:14:00.240 --> 00:14:02.460
So like, I'm looking at
this Paul samak picture here

238
00:14:02.460 --> 00:14:05.550
that says like, you know,
div ID equals product, blah,

239
00:14:05.550 --> 00:14:09.600
blah, blah, this class you're,
you're pointing the automation engineer,

240
00:14:09.600 --> 00:14:12.660
right. To where the, where,
where, what they need is,

241
00:14:12.660 --> 00:14:14.100
and they don't have to
go digging for it. Right.

242
00:14:14.400 --> 00:14:16.920
Right. And I'm showing the
developer that path too, so

243
00:14:16.920 --> 00:14:19.920
that they understand this is
how I'm going to automate

244
00:14:19.920 --> 00:14:22.260
this. And so I need
you to do your part

245
00:14:22.500 --> 00:14:27.150
to make sure this goes
smoothly. So you introduce in

246
00:14:27.180 --> 00:14:30.290
order to make this possible,
this, this ranking, you introduced

247
00:14:30.290 --> 00:14:33.300
this concept called the automation
pyramid. Could you talk about

248
00:14:33.300 --> 00:14:36.990
that a little bit? Yeah.
So it's a concept from

249
00:14:36.990 --> 00:14:42.360
my coin and it talks
about basically like three layers

250
00:14:42.510 --> 00:14:47.880
where the UI layer is
the smallest layer, meaning that

251
00:14:47.880 --> 00:14:51.980
you should have the smallest
amount of your automation in

252
00:14:51.980 --> 00:14:56.810
that layer. The next one
is the service layer. And

253
00:14:56.810 --> 00:15:00.320
then your biggest layer is
your unit's Hess layer. So

254
00:15:00.320 --> 00:15:04.040
basically he's saying that if
you look at all of

255
00:15:04.040 --> 00:15:07.340
your automation, most of it
should be at the unit

256
00:15:07.340 --> 00:15:11.240
test layer. And then the
next largest amount should be

257
00:15:11.240 --> 00:15:14.390
at the service layer. And
then the very smallest amount

258
00:15:14.630 --> 00:15:17.120
should be at the UI
layer. And so a lot

259
00:15:17.120 --> 00:15:22.730
of teams struggle with this
because if you're delivering new

260
00:15:22.730 --> 00:15:26.570
UI code is just, it's
intuitive to want to test

261
00:15:26.570 --> 00:15:29.420
it at the UI layer.
Right. And when you automated

262
00:15:29.420 --> 00:15:31.610
the same kind of thing,
you just automated at the

263
00:15:31.610 --> 00:15:34.310
UI layer because this is
a new UI. And so

264
00:15:34.310 --> 00:15:36.560
I feel like I have
to. And so I can

265
00:15:36.560 --> 00:15:39.530
understand that pain point. And
so what I talk about

266
00:15:39.530 --> 00:15:43.040
is not restricting yourself to
just one of those layers.

267
00:15:43.040 --> 00:15:45.080
Your test doesn't have to
live in one of those

268
00:15:45.080 --> 00:15:48.170
layers, if it's a new
UI piece and you want

269
00:15:48.170 --> 00:15:50.990
to test the UI of
that, go for it. But

270
00:15:50.990 --> 00:15:53.840
there's a lot of steps
involved in that test case

271
00:15:53.840 --> 00:15:57.920
that doesn't involve that new
UI piece. And so for

272
00:15:57.920 --> 00:16:02.390
those steps, forget the UI,
use the service layer. For

273
00:16:02.390 --> 00:16:07.520
example, are you some other
cheats that you might come

274
00:16:07.520 --> 00:16:10.940
up with, like navigating directly
to a certain page that

275
00:16:10.940 --> 00:16:13.640
you need to, as opposed
to going through the menu

276
00:16:13.640 --> 00:16:19.870
items and traversing through that?
So you could, you, could

277
00:16:19.870 --> 00:16:22.630
you, you could unit test
a service. You could unit

278
00:16:22.630 --> 00:16:25.630
test a UI. You could
consider a UI test, a

279
00:16:25.630 --> 00:16:28.300
full integration test, depending on
how you set up your

280
00:16:28.750 --> 00:16:33.280
environment, but it sounds like
understanding your stack and how

281
00:16:33.370 --> 00:16:36.760
data moves through your stack
is, is kind of fundamental

282
00:16:36.760 --> 00:16:38.710
to knowing what you need
to automate and what you

283
00:16:38.710 --> 00:16:41.410
should focus on automating. Yeah,
definitely. So it's kind of

284
00:16:41.410 --> 00:16:44.020
getting under the covers a
little bit because as a

285
00:16:44.020 --> 00:16:48.250
test engineer, I think they
understand how do I get

286
00:16:48.250 --> 00:16:53.140
to this pretty well. Right.
But from the UI is

287
00:16:53.140 --> 00:16:55.960
where they understand it. So
I do a lot of

288
00:16:55.960 --> 00:16:59.800
training with test engineers who
are getting into automation on

289
00:16:59.830 --> 00:17:03.400
understanding what's going on under
the covers, right? So looking

290
00:17:03.400 --> 00:17:09.010
into log files and Splunk
logs and things like that

291
00:17:09.010 --> 00:17:11.560
to see when you do
this on a UI, what's

292
00:17:11.650 --> 00:17:14.740
actually going on on the
backend and let's see how

293
00:17:14.740 --> 00:17:18.400
we can utilize that backend
code within our automation code,

294
00:17:18.640 --> 00:17:24.190
as opposed to going on,
on the UI. Okay. And

295
00:17:24.220 --> 00:17:26.230
you, I want to dig
a little bit into some

296
00:17:26.230 --> 00:17:30.340
of the tools that you,
you use, you teach, you

297
00:17:30.340 --> 00:17:35.320
do like workshops and full
day workshops. We talk mostly

298
00:17:35.320 --> 00:17:39.100
about doing work on, on
the web. Right. I assume

299
00:17:39.100 --> 00:17:42.910
that most of your work
is on web automation. I

300
00:17:42.910 --> 00:17:45.520
do a lot in a
web service and stuff as

301
00:17:45.520 --> 00:17:48.250
well. Yeah. Yeah. But are
you autumn? You're not automating

302
00:17:48.250 --> 00:17:55.500
like, like windows apps, mostly
selenium. So when you're doing

303
00:17:55.500 --> 00:18:00.690
selenium work, w you're you're
are you doing automation of,

304
00:18:00.790 --> 00:18:03.720
of web applications and using
specific web drivers? Do you

305
00:18:03.720 --> 00:18:05.790
automate, how does that work?
Let me introduce us to

306
00:18:05.790 --> 00:18:09.510
selenium and help me understand
whether I'm automating a specific

307
00:18:09.780 --> 00:18:12.210
browser or I'm using the
shadow Dom, or can I

308
00:18:12.210 --> 00:18:16.340
automate any browser? Yeah. So
selenium will allow you to

309
00:18:17.300 --> 00:18:20.450
automate most of the popular
browser. So there their web

310
00:18:20.450 --> 00:18:25.160
drivers available for each of
these and a lot of

311
00:18:25.160 --> 00:18:28.390
teams they'll focus on the
ones that their application supports.

312
00:18:28.400 --> 00:18:32.600
So, Hey, my application supports
Chrome Firefox and I E

313
00:18:32.900 --> 00:18:37.040
okay, cool. I'll use those
web drivers within my automation

314
00:18:37.040 --> 00:18:44.390
framework to support that testing.
Okay. And do you, do

315
00:18:44.390 --> 00:18:47.150
you use like Chrome primarily,
or the web driver, does

316
00:18:47.150 --> 00:18:49.250
a web driver work with
any browser or do you

317
00:18:49.400 --> 00:18:52.820
focus on a particular one?
So I personally focused on

318
00:18:52.820 --> 00:18:57.410
Chrome. And so there are
separate web drivers for each

319
00:18:57.410 --> 00:19:00.680
of these browsers. Right. And
so this just kind of

320
00:19:02.330 --> 00:19:05.780
in, in selenium three, there's
been work done around that

321
00:19:05.780 --> 00:19:08.990
to kind of get these
drivers more consistent because they're

322
00:19:08.990 --> 00:19:13.490
all developed by different entities.
And so there's some differences

323
00:19:13.490 --> 00:19:17.500
between them. And so selenium
three is promising us, which

324
00:19:17.510 --> 00:19:19.670
w it was just released
like maybe a month or

325
00:19:19.670 --> 00:19:22.820
two ago. So it was
promising us a bit more

326
00:19:22.820 --> 00:19:27.680
consistency between these drivers, but
yeah, they're different, different executable.

327
00:19:28.430 --> 00:19:32.060
Okay. Is the intent that
I write a test once

328
00:19:32.060 --> 00:19:33.980
or at least a web
test once, and it be

329
00:19:33.980 --> 00:19:37.250
able to be run multiple
times on Firefox and Chrome

330
00:19:37.250 --> 00:19:38.870
and edge. I should be
able to run it or

331
00:19:38.870 --> 00:19:41.780
do I have to make
separate tests? No, no, no,

332
00:19:41.780 --> 00:19:44.270
no. So you would do
it once and wouldn't you,

333
00:19:44.330 --> 00:19:48.560
what people typically do is
set up like a properties

334
00:19:48.560 --> 00:19:51.380
file or like a Maven
switch or something like that,

335
00:19:51.770 --> 00:19:54.890
that your code will use.
It's just a parameter. Okay.

336
00:19:54.890 --> 00:19:57.470
Like, which one of these
am I using now? And

337
00:19:57.470 --> 00:19:59.960
so at that very set
up point can say, okay,

338
00:19:59.960 --> 00:20:01.640
I'm going to run this
on Chrome. So let me

339
00:20:01.640 --> 00:20:04.100
use the Chrome driver, but
your tests, all of that

340
00:20:04.100 --> 00:20:07.490
should be extracted out of
the test itself. So that's

341
00:20:07.490 --> 00:20:11.090
done in some higher level
before we begin type of

342
00:20:11.090 --> 00:20:15.350
thing, like the setup of
the properties and stuff. And

343
00:20:15.350 --> 00:20:17.960
I understand that, you know,
selenium's been around forever. I've

344
00:20:17.960 --> 00:20:21.080
used selenium, gosh, I want
to say 10, 12 years

345
00:20:21.080 --> 00:20:25.880
ago. But with selenium three,
it's going from being what

346
00:20:25.880 --> 00:20:27.590
it was in the past,
which was, you know, a

347
00:20:27.590 --> 00:20:31.910
very complicated JavaScript framework. But
it was just JavaScript when

348
00:20:31.910 --> 00:20:34.610
I started with selenium, it
was, you would write tables

349
00:20:34.610 --> 00:20:37.970
and HTML, and that you
remember, did you do that

350
00:20:37.970 --> 00:20:43.250
table based tests sometimes. Yeah.
And now it's really moving

351
00:20:43.250 --> 00:20:46.070
forward to being almost like
a standard it's it feels

352
00:20:46.070 --> 00:20:50.620
kind of like WebDriver becoming
the way that the web

353
00:20:50.620 --> 00:20:53.320
is going. It's almost like
selenium's becoming a standard that

354
00:20:53.320 --> 00:20:57.270
everyone should learn. Yeah, definitely.
They're definitely making strides hats

355
00:20:57.270 --> 00:21:01.020
off to those guys, the
open source product. And I

356
00:21:01.020 --> 00:21:03.630
met a lot of them
at the selenium conference in

357
00:21:03.630 --> 00:21:06.690
London last month, this month,
actually a couple of weeks

358
00:21:06.690 --> 00:21:10.830
ago. And they are doing
an excellent job with that

359
00:21:10.830 --> 00:21:15.840
project. Yeah. So I understand
that that web driver, which

360
00:21:15.840 --> 00:21:19.380
is this, this testing tool
is, is it's might become

361
00:21:19.620 --> 00:21:22.530
a standard, like it's going
through the W3C. Did they

362
00:21:22.530 --> 00:21:25.890
talk about that at the
conference? No, they didn't. But

363
00:21:26.040 --> 00:21:28.470
they talked about like over
beer and stuff, but not

364
00:21:28.470 --> 00:21:31.890
like, not like an official
talk, but yeah. Yes. I

365
00:21:31.890 --> 00:21:36.840
think that's really cool. Yeah,
absolutely. So do you, do

366
00:21:36.840 --> 00:21:39.540
you think that there are
any other tools people should

367
00:21:39.540 --> 00:21:41.250
use when it comes to
web development on the, on

368
00:21:41.250 --> 00:21:43.740
the UI side? Or would
you say that it is

369
00:21:43.740 --> 00:21:46.890
safe to think about using
selenium if someone's listening to

370
00:21:46.890 --> 00:21:50.730
this podcast and they, they're
not really using anything on

371
00:21:50.730 --> 00:21:55.470
the web for testing? Yeah.
So I use, I strictly

372
00:21:55.470 --> 00:21:58.350
use selenium for the UI.
Now. I know a lot

373
00:21:58.350 --> 00:22:01.680
of people who use some
other tools that are kind

374
00:22:01.680 --> 00:22:05.070
of wrappers around selenium. Everybody's
using selenium for their base

375
00:22:05.100 --> 00:22:09.870
pretty much though, but they
might use like protractor or

376
00:22:10.250 --> 00:22:13.290
different things like this that
kind of helped with more

377
00:22:13.290 --> 00:22:17.730
of those JavaScripts of front
end. So as you know,

378
00:22:17.730 --> 00:22:21.900
like the web, we're going
crazy with JavaScript right now.

379
00:22:21.900 --> 00:22:24.780
And so we have a
lot of kind of fancy

380
00:22:25.140 --> 00:22:29.460
libraries and things that are
being incorporated in our UIs.

381
00:22:29.490 --> 00:22:33.330
And so it's taking me,
I like it, it actually,

382
00:22:33.330 --> 00:22:37.350
from a programming standpoint, it
makes it interesting, the development

383
00:22:37.890 --> 00:22:42.420
of the automation for things
like that. But there are

384
00:22:42.420 --> 00:22:45.510
tools available where you can
do a lot of the

385
00:22:45.750 --> 00:22:49.410
coding and JavaScript, as opposed
to like, say for example,

386
00:22:49.410 --> 00:22:54.300
Java. And so like protractor
being one of those, but

387
00:22:54.300 --> 00:22:57.870
you can definitely do everything
with like just straight selenium.

388
00:22:57.870 --> 00:23:01.680
That's what I do. So
protractor, just to make sure

389
00:23:01.680 --> 00:23:03.810
that folks are up to
date is a, is a

390
00:23:03.810 --> 00:23:09.120
protractor test.org. It's an angular
JS end to end testing.

391
00:23:10.770 --> 00:23:14.760
Does it sit on top
of selenium? Does it's kinda

392
00:23:14.760 --> 00:23:17.100
like a, it's a, it's
like a rapper, so you

393
00:23:17.100 --> 00:23:19.980
would get that. And he
would have like the selenium,

394
00:23:20.820 --> 00:23:24.810
API APIs embedded in it.
Okay. And then you described

395
00:23:24.810 --> 00:23:26.610
your tests in a, in
a, in a, in a

396
00:23:26.610 --> 00:23:30.120
form that makes people feel
more comfortable. Cause sometimes people

397
00:23:30.120 --> 00:23:34.320
don't like those lower level.
Have you looked at any

398
00:23:34.320 --> 00:23:38.130
of the things like Appium
that basically means selenium for

399
00:23:38.130 --> 00:23:41.700
apps? Yeah. Yeah. So a
lot of people who are

400
00:23:41.700 --> 00:23:47.660
doing like mobile automation, mobile
testing are using Appium. I

401
00:23:47.660 --> 00:23:50.540
haven't used it at all.
I don't do mobile testing

402
00:23:50.750 --> 00:23:55.670
much or yet, but yeah.
So I hear this pretty

403
00:23:55.670 --> 00:23:59.860
good as well. Yeah. It
seems like if I understand

404
00:23:59.860 --> 00:24:02.770
it correctly, because I I've
been working on the windows

405
00:24:03.160 --> 00:24:07.210
implementation stuff for Appium that
basically, if you are a

406
00:24:07.210 --> 00:24:11.440
selenium engineer, then instantly you
become a, an iOS, Android

407
00:24:11.440 --> 00:24:14.680
windows, automation engine, like, you
know, that it's like, you

408
00:24:14.680 --> 00:24:18.580
just added like two pages
to your resume. Right. And

409
00:24:18.790 --> 00:24:23.270
you don't even know native
app automation apparently with slams.

410
00:24:23.270 --> 00:24:28.210
So it's using WebDriver, but
it's, but it's driving. Right.

411
00:24:28.240 --> 00:24:30.730
Right. And that's what I
mean, like there's all these

412
00:24:30.730 --> 00:24:34.210
cool tools that are coming
out, but at the core

413
00:24:34.210 --> 00:24:37.540
is selenium and all of
them. So it's definitely, definitely

414
00:24:37.540 --> 00:24:40.900
the GoTo right now. Okay.
So then what would you

415
00:24:40.900 --> 00:24:43.330
say to people who are
listening, who need or think

416
00:24:43.360 --> 00:24:47.440
that automation needs to be
added to their, their environment

417
00:24:47.440 --> 00:24:48.820
at their job? How do
they go? Do they just

418
00:24:48.910 --> 00:24:50.530
introduce it or they have
to go to their boss

419
00:24:50.530 --> 00:24:54.130
and convince them? It's a
useful thing. Say right off

420
00:24:54.130 --> 00:24:56.500
the bat is to hire
an automation engineer. So I've

421
00:24:56.500 --> 00:25:01.510
seen so many teams that
feel at trying to incorporate

422
00:25:01.510 --> 00:25:06.760
automation because the managers are
leading this and they don't

423
00:25:06.760 --> 00:25:11.800
really understand automation or they'll
task a developer to do

424
00:25:11.800 --> 00:25:16.060
this. And the developer might
not understand automation. They understand

425
00:25:16.060 --> 00:25:18.820
how to code, but there's
a lot of other things

426
00:25:18.820 --> 00:25:23.260
that go into automation development
besides coding. I actually wrote

427
00:25:23.290 --> 00:25:25.210
a blog post on this
and got a lot of

428
00:25:25.210 --> 00:25:30.700
feedback and differing opinions on
it. But yeah, developers, I

429
00:25:30.700 --> 00:25:34.060
think there's a lot more
to it than just coding

430
00:25:34.660 --> 00:25:38.230
in order for it to
be successful. And then some

431
00:25:38.380 --> 00:25:41.680
managers might even task the
testers to do it right.

432
00:25:41.680 --> 00:25:44.980
And so I get a
lot of testers who contact

433
00:25:44.980 --> 00:25:48.100
me and say, okay, I've
been tasked with starting this

434
00:25:48.100 --> 00:25:50.920
automation initiative. And I have
no idea where to begin.

435
00:25:50.920 --> 00:25:54.490
Like I have no coding
background. I don't understand a

436
00:25:54.490 --> 00:25:58.060
lot of these things. So
what I advise teams to

437
00:25:58.060 --> 00:26:00.790
do is to, Hey, why
not just hire an automation

438
00:26:00.790 --> 00:26:05.140
engineer to lead your effort?
And everyone can still be

439
00:26:05.140 --> 00:26:07.720
involved in development, can still
be involved. The testers can

440
00:26:07.720 --> 00:26:10.510
still be involved, but get
someone who kind of has

441
00:26:10.510 --> 00:26:13.990
a clue about automation and
how to set that up

442
00:26:13.990 --> 00:26:17.050
and how not to feel
like we've already failed plenty

443
00:26:17.050 --> 00:26:19.720
of times. And so we
have these lessons learned and

444
00:26:19.720 --> 00:26:23.680
we know how to do
this. So hire us. Yeah.

445
00:26:23.980 --> 00:26:26.110
You know, it's, it's interesting.
We, we, we, we tend

446
00:26:26.110 --> 00:26:28.930
to simplify things. We say
that there's architects and there's

447
00:26:28.930 --> 00:26:33.160
developers and there's testers. But
when, when you said people

448
00:26:33.160 --> 00:26:36.040
should just hire an automation
engineer, I would suspect that

449
00:26:36.040 --> 00:26:39.400
I'd be interested in hearing
from the listeners, put it

450
00:26:39.400 --> 00:26:42.730
in the comments. Do you
have an automation engineer at

451
00:26:42.730 --> 00:26:45.030
your job? Some of them
may be thinking, I didn't

452
00:26:45.030 --> 00:26:48.300
even know that was a
thing. Yeah. I mean, they

453
00:26:48.300 --> 00:26:51.090
might think that they have
QA in the general sense

454
00:26:51.120 --> 00:26:55.500
or maybe even a build
engineer, but the idea that

455
00:26:55.540 --> 00:26:59.580
to formalize automation is to
declare that it matters to

456
00:26:59.580 --> 00:27:02.340
us as a company and
to us as a, as

457
00:27:02.340 --> 00:27:04.940
a process. Yeah. Yeah. And
most of the roles that

458
00:27:04.940 --> 00:27:08.110
I work in are teams
who have kind of tried

459
00:27:08.110 --> 00:27:12.470
that path where yeah, we,
we decided that it is

460
00:27:12.470 --> 00:27:15.680
important. We try to get
it going on our own.

461
00:27:15.680 --> 00:27:19.520
We failed miserably. Angie, please
help us is kind of

462
00:27:19.520 --> 00:27:22.940
when I'm brought in. And
so by then, they kind

463
00:27:22.940 --> 00:27:26.750
of respect that, okay, this
is a craft and maybe

464
00:27:26.750 --> 00:27:30.020
we should let her kind
of lead us with this.

465
00:27:32.630 --> 00:27:36.410
Well, it's also is recognizing
the difference between what, what

466
00:27:36.410 --> 00:27:40.340
value a human tester provides
and what value automated testing

467
00:27:40.370 --> 00:27:43.610
provides. You know, this really
is a human problem and

468
00:27:44.870 --> 00:27:48.020
we need to have the
automation validate what we already

469
00:27:48.020 --> 00:27:51.590
know. Right. Exactly. Exactly. It
seems like people are going

470
00:27:51.590 --> 00:27:54.080
to find bugs more than
automated testing. Do you think

471
00:27:54.380 --> 00:27:58.490
Exactly? I, 100% agree with
that. And that's another thing

472
00:27:58.490 --> 00:28:00.680
that I try to advise
teams is don't try to

473
00:28:00.680 --> 00:28:05.360
replace your testers with automation.
Like you want these tests

474
00:28:05.360 --> 00:28:08.990
or they are subject matter
experts. They know this application

475
00:28:09.020 --> 00:28:13.010
in an hour. You want
them exploring your application and

476
00:28:13.010 --> 00:28:16.700
providing the information and finding
the books, right? And then

477
00:28:16.700 --> 00:28:19.250
your automation you want to
use for those repetitive things.

478
00:28:19.250 --> 00:28:21.020
You don't want them to
spend their time doing the

479
00:28:21.020 --> 00:28:23.570
same things over and over.
Let them go explore the

480
00:28:23.570 --> 00:28:26.870
new areas, but have someone
automating the things that we

481
00:28:26.870 --> 00:28:29.420
already know so that you
have a sanity check that

482
00:28:29.420 --> 00:28:32.840
you haven't broken anything. Right.
So then that gets kind

483
00:28:32.840 --> 00:28:34.670
of brings us all the
way back to the beginning,

484
00:28:35.000 --> 00:28:39.080
which is if you find
yourself doing something twice, think

485
00:28:39.080 --> 00:28:42.890
about automating that, you know,
and that really makes, I

486
00:28:42.890 --> 00:28:45.410
think that would make the
QA person's job a lot

487
00:28:45.410 --> 00:28:47.540
more fun. You just said,
make them do the fun

488
00:28:47.540 --> 00:28:49.460
stuff, make them do the
new stuff and automate all

489
00:28:49.460 --> 00:28:53.630
the boring stuff. That's exactly
right. Yeah. So people can

490
00:28:53.630 --> 00:28:57.710
check you out at Angie
Jones. Got heck, that's a

491
00:28:57.710 --> 00:29:04.430
great compliment. Thank you. And
you've got workshops, conference talks,

492
00:29:04.700 --> 00:29:08.090
presentations. There's videos of your
talks up there and your

493
00:29:08.090 --> 00:29:12.470
automation blocks. Yup. So lots
of good techniques and things

494
00:29:12.470 --> 00:29:17.750
on automation. So people find
that pretty helpful. And you've

495
00:29:17.750 --> 00:29:21.170
got a great sample on
your GitHub, your automation bookstore,

496
00:29:21.770 --> 00:29:24.350
where you show how to
use selenium and Chrome driver

497
00:29:24.350 --> 00:29:28.130
to go and drive a,
a, a website. Yep. Very

498
00:29:28.130 --> 00:29:30.110
cool. Thanks so much for
chatting with me today. Thanks

499
00:29:30.110 --> 00:29:33.380
for having me, Scott enjoyed
it. This has been another

500
00:29:33.380 --> 00:29:36.290
episode of Hansel minutes. We'll
see you again next week.

