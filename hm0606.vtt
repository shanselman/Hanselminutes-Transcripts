WEBVTT FILE

1
00:00:00.180 --> 00:00:03.360
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.360 --> 00:00:06.300
they make the show possible.
Today's show is sponsored by

3
00:00:06.300 --> 00:00:10.500
developer express, become a UI
superhero with dev express controls

4
00:00:10.500 --> 00:00:15.030
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.420 --> 00:00:19.500
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.500 --> 00:00:23.610
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.700 --> 00:00:45.450
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
Hi, this is Scott Hanselman.

8
00:00:45.450 --> 00:00:47.430
This is another episode of
Hansel minutes. And today I'm

9
00:00:47.430 --> 00:00:50.310
talking with Amanda silver. She's
a partner director of program

10
00:00:50.310 --> 00:00:52.440
management at Microsoft. Yo, how
long have you been at

11
00:00:52.440 --> 00:00:56.580
Microsoft? Since 2001 to me,
my quick math I 16

12
00:00:56.580 --> 00:00:59.520
years. That's cool. That's a
long time. You and I

13
00:00:59.520 --> 00:01:02.850
got to work on a,
a demo together at the

14
00:01:02.850 --> 00:01:05.610
connect conference. It's this conference
that we do every year

15
00:01:05.610 --> 00:01:08.190
in New York and we demo
this thing called visual studio

16
00:01:08.220 --> 00:01:11.040
live share. What is it
and why is it cool?

17
00:01:11.900 --> 00:01:14.660
Well, I mean, so the
idea behind live share is

18
00:01:14.660 --> 00:01:17.240
that you might want to
collaborate with another developer in

19
00:01:17.240 --> 00:01:19.430
real time, but you want
to use your tools to

20
00:01:19.430 --> 00:01:22.910
do it. So rather than
using screen sharing or some

21
00:01:22.910 --> 00:01:27.500
other kind of mechanism, you
can basically take your familiar

22
00:01:27.500 --> 00:01:32.000
tools, visual studio, or vs
code and connect to the

23
00:01:32.000 --> 00:01:36.200
other person's workspace remotely. And
you can actually look at

24
00:01:36.200 --> 00:01:38.810
all of their, all of
their files and make some

25
00:01:38.810 --> 00:01:44.030
edits and make some, you
know, possibly debug together. So

26
00:01:44.030 --> 00:01:46.280
you can work on bugs
and, and collaborate in real

27
00:01:46.280 --> 00:01:49.520
time. Now that, that on
its face, that sounds like

28
00:01:49.520 --> 00:01:52.790
Google docs for code. Yeah.
And a lot of people

29
00:01:52.790 --> 00:01:56.180
try to make that analogy
and, and in a way

30
00:01:56.180 --> 00:01:59.660
it is from an experience
perspective, but from an implementation

31
00:01:59.660 --> 00:02:03.530
perspective, it's actually the wrong
analogy. More like a Skype

32
00:02:03.530 --> 00:02:07.490
is actually more kind of
appropriate and kind of, but

33
00:02:07.490 --> 00:02:10.100
it's not screen sharing though.
It's not screen sharing. That's

34
00:02:10.100 --> 00:02:14.840
right. It's it's so in
a, in a Google docs

35
00:02:14.840 --> 00:02:18.890
kind of a model, basically,
that's like, there's a common

36
00:02:18.890 --> 00:02:21.080
document that both of you
guys are working on. That's

37
00:02:21.080 --> 00:02:23.330
hosted in the cloud. Oh,
so neither of you have

38
00:02:23.330 --> 00:02:26.540
the document locally in that
scenario, Julie, I mean, it

39
00:02:26.540 --> 00:02:28.970
might be that you have
a local copy, but that

40
00:02:29.000 --> 00:02:32.420
there's basically the master lives
in the cloud. Right. And

41
00:02:32.420 --> 00:02:35.210
so both of you are
operating on the master, that's

42
00:02:35.210 --> 00:02:39.170
in the cloud. Okay. In,
in this model with live

43
00:02:39.170 --> 00:02:42.050
share, you know, we could
have hosted the source code

44
00:02:42.050 --> 00:02:45.500
in the cloud, but that
actually comes with some, you

45
00:02:45.500 --> 00:02:48.110
know, burden because you have
to take your source code

46
00:02:48.110 --> 00:02:49.790
and you have to replicate
it in the cloud. You

47
00:02:49.790 --> 00:02:52.850
might not want to do
that. Also, if you wanted

48
00:02:52.850 --> 00:02:56.150
to get the rich experience
of, of code editing, then

49
00:02:56.150 --> 00:02:58.670
you also have to replicate
your build environment and basically

50
00:02:58.670 --> 00:03:03.100
everything it takes to compile
those files. And, and while

51
00:03:03.100 --> 00:03:06.010
you might want to do
that, for other reasons, you,

52
00:03:06.010 --> 00:03:09.370
you know, doing it to
be able to share should

53
00:03:09.370 --> 00:03:11.860
be kind of an independent
decision. And so what we

54
00:03:11.860 --> 00:03:14.170
wanted to do was to
make it so that you

55
00:03:14.170 --> 00:03:18.100
could just take the code
that you're working on locally

56
00:03:18.310 --> 00:03:20.530
and share it with another
developer and what's the best

57
00:03:20.530 --> 00:03:23.470
way for that to happen.
Well, it's actually more like

58
00:03:23.470 --> 00:03:28.510
a remote connection from your
visual studio instance to your

59
00:03:28.630 --> 00:03:32.670
teammates. Okay. So then, then
the person that initiated the,

60
00:03:33.300 --> 00:03:37.350
the, the remote sharing session
is the authoritative source. Yeah.

61
00:03:37.380 --> 00:03:41.160
Yes. Yes. I mean, basically
the instance of the file

62
00:03:41.160 --> 00:03:44.910
that's on the machine, on
their machine is the, you

63
00:03:44.910 --> 00:03:49.650
know, the authoritative version. Right.
Okay. So if I have,

64
00:03:49.680 --> 00:03:53.190
I have visual studio 2017
in my machine, I have

65
00:03:53.190 --> 00:03:57.270
dotnet core two. Oh, I've
installed all this stuff in

66
00:03:57.270 --> 00:04:00.660
order to do a hello
world. And then you are

67
00:04:00.660 --> 00:04:03.210
elsewhere. You have visual studio
as well, but you don't

68
00:04:03.210 --> 00:04:06.420
have.net even. Yeah. I'll I'll
I could have is just

69
00:04:06.420 --> 00:04:09.120
like the most minimal install,
a visual studio, which has

70
00:04:09.120 --> 00:04:11.970
no workloads on it. Like
the 10 minute install, the

71
00:04:12.180 --> 00:04:17.220
two minutes, Two minute install,
the base thing, The totally

72
00:04:17.220 --> 00:04:19.680
core base thing is all,
I need to be able

73
00:04:19.680 --> 00:04:23.790
to connect my instance of
visual studio to your workspace

74
00:04:23.790 --> 00:04:27.360
or project, and to be
able to start doing co-authoring

75
00:04:27.360 --> 00:04:31.380
and co-editing and, and, and
co debugging. Then I make

76
00:04:31.410 --> 00:04:34.920
a, I, I in instantiate
or I initiate a sharing

77
00:04:34.920 --> 00:04:39.710
session, which creates this, this,
you know, cryptographic leaks, significant

78
00:04:39.730 --> 00:04:42.270
URL. And I give that
to you via something, Twitter,

79
00:04:42.450 --> 00:04:46.680
Slack teams, whatever you click
on it, and what happens.

80
00:04:47.640 --> 00:04:51.060
I click on it. And
if I have a visual

81
00:04:51.060 --> 00:04:54.060
studio or vs code installed,
then it will open that

82
00:04:54.060 --> 00:04:57.000
session in vs code or
visual studio. If I don't,

83
00:04:57.030 --> 00:04:59.310
then it'll prompt me to
download one of those tools

84
00:04:59.430 --> 00:05:02.370
via a web handler. Yeah,
exactly. So a webpage comes

85
00:05:02.370 --> 00:05:05.370
up and it basically, so
it does the, it's a

86
00:05:05.370 --> 00:05:07.710
web handler. It looks to
see if you have one

87
00:05:07.710 --> 00:05:09.990
of these things on your
machine and if you do,

88
00:05:09.990 --> 00:05:12.660
then it opens it up,
right. And remotely connects to

89
00:05:12.660 --> 00:05:17.520
your, to your workspace. Okay.
And I've done like remote

90
00:05:17.520 --> 00:05:20.880
debugging before where like I've
installed, like back in the

91
00:05:20.880 --> 00:05:23.190
day, like a long time
ago, years ago, I would

92
00:05:23.190 --> 00:05:25.560
go onto a windows server
that did not have visual

93
00:05:25.560 --> 00:05:28.580
studio. And I would install
the Microsoft debugger. And we

94
00:05:28.600 --> 00:05:31.200
usually have like a, like
a slash slash debug share

95
00:05:31.200 --> 00:05:32.910
or whatever. You'd copy the
debugger over there. You'd run

96
00:05:32.910 --> 00:05:36.270
it. And it was just
there to hook into visual

97
00:05:36.270 --> 00:05:38.910
studios, remote debugging and visual
studio. Remote debugging has been

98
00:05:38.910 --> 00:05:42.150
a thing for years, right?
Yeah. The whole time. Yeah.

99
00:05:42.450 --> 00:05:45.210
I mean, very long time,
like, Right. Like when you

100
00:05:45.210 --> 00:05:49.170
go debug attach, you can
attach to a running process,

101
00:05:49.380 --> 00:05:52.350
Your local machine, but you
can also, you can also,

102
00:05:52.350 --> 00:05:57.350
in some cases attached to
a remotely executing process, well,

103
00:05:57.500 --> 00:06:00.740
is this like that it
is very much like that.

104
00:06:00.740 --> 00:06:03.530
And it's actually built on
top of that. So one

105
00:06:03.530 --> 00:06:06.350
of the reasons why, how
we can enable the remote

106
00:06:06.350 --> 00:06:09.530
debugging capability is because of
the remote debugging capability that

107
00:06:09.530 --> 00:06:11.900
we already had in visual
studio. And one of the

108
00:06:12.140 --> 00:06:14.840
kind of coolest things about,
about this whole thing is,

109
00:06:15.170 --> 00:06:19.220
you know, the, the co-authoring
capability, which allows both of

110
00:06:19.220 --> 00:06:23.360
us to type in the
workspace simultaneously. That's one set

111
00:06:23.360 --> 00:06:27.920
of technology. And that's super
interesting topic that we could

112
00:06:27.920 --> 00:06:30.890
talk about it in a
second, but the remote, the

113
00:06:30.890 --> 00:06:35.690
code debugging is yet another
technology they actually have little

114
00:06:35.690 --> 00:06:40.280
to do with each other.
And the code debugging is

115
00:06:40.280 --> 00:06:42.830
basically just based on top
of our remote debugger that

116
00:06:42.830 --> 00:06:45.920
we already have. And so
one of the coolest parts

117
00:06:45.920 --> 00:06:48.560
about kind of getting to
this point, as we built

118
00:06:48.560 --> 00:06:52.130
up both of these capabilities
in visual studio and vs

119
00:06:52.130 --> 00:06:57.890
code is that we enabled
the remote code debugging, and

120
00:06:57.890 --> 00:07:00.470
we did it for C
sharp. And then all of

121
00:07:00.470 --> 00:07:01.940
a sudden it worked for
a whole bunch of different

122
00:07:01.940 --> 00:07:03.920
languages. So we actually have
a version that like works

123
00:07:03.920 --> 00:07:06.440
for Python, for example, I
mean, we didn't show it,

124
00:07:06.440 --> 00:07:09.260
we didn't devil it just
because like, that's how our

125
00:07:09.260 --> 00:07:12.910
remote debugger works. And, and
it just, it worked, Did

126
00:07:12.910 --> 00:07:15.970
people know that visual studio
was that nicely factored that

127
00:07:15.970 --> 00:07:17.380
this was going to be
a thing like the side

128
00:07:17.380 --> 00:07:19.330
effect would be like, Oh,
wow, that is nicely. Like

129
00:07:19.360 --> 00:07:22.360
the responsibilities of these components
were so discreet and clean.

130
00:07:22.990 --> 00:07:26.080
This was a very pleasant
surprise with regard to the,

131
00:07:26.440 --> 00:07:30.520
to the debugger, you know,
for co-authoring it's a little

132
00:07:30.520 --> 00:07:33.880
bit more complex and that,
that involved a lot more

133
00:07:33.880 --> 00:07:36.790
refactoring of. Okay. So that's
interesting. So there's two, this

134
00:07:36.790 --> 00:07:40.450
is really important to just
like it's, it is holistically

135
00:07:40.810 --> 00:07:45.760
visual studio live share, but
the debugging, the is one

136
00:07:45.820 --> 00:07:48.520
discrete thing that is very
unique and very, not the

137
00:07:48.520 --> 00:07:51.490
same as like, if you
remember ether pad from like

138
00:07:51.700 --> 00:07:53.470
15 years ago, 10 years
ago, it was like the

139
00:07:53.470 --> 00:07:56.110
first time we ever saw
two cursors within a single,

140
00:07:56.710 --> 00:07:59.440
a single, Oh my God,
you can see your, I

141
00:07:59.440 --> 00:08:01.390
can see your carrot, you
know? And that we take

142
00:08:01.390 --> 00:08:03.100
that for granted. Like if
an app doesn't have that,

143
00:08:03.110 --> 00:08:05.620
that the typing in the
same text file on the

144
00:08:05.620 --> 00:08:10.000
web is almost become a
Right or even typing in

145
00:08:10.000 --> 00:08:12.430
the same text file in
a file, in a file

146
00:08:12.430 --> 00:08:16.450
share location is Yeah. You
know, that's actually interesting that

147
00:08:16.450 --> 00:08:19.840
you say that because I
remember the idea of locked

148
00:08:19.840 --> 00:08:23.050
files. I haven't actually thought
about a file being locked

149
00:08:23.050 --> 00:08:26.290
on a share in years.
Like it used to be

150
00:08:26.290 --> 00:08:28.840
a thing like, Oh, Hey,
yeah, Amanda, you've got that

151
00:08:28.840 --> 00:08:30.880
file locked. Can you close
that? So I can open

152
00:08:30.880 --> 00:08:33.670
it. That still happens sometimes.
Yeah. But like, not that

153
00:08:33.670 --> 00:08:36.700
much, like I was actually
on my iPhone recently, I

154
00:08:36.700 --> 00:08:40.390
opened up word, which, which
apparently no, no, no longer

155
00:08:40.390 --> 00:08:42.790
impresses me, although I should
be amazed every time I

156
00:08:42.790 --> 00:08:45.010
do it. And they share
like a huge amount of

157
00:08:45.010 --> 00:08:47.200
the C plus plus code
with the actual words. So

158
00:08:47.200 --> 00:08:49.080
when you run word in
the iPhone, it's effectively at

159
00:08:49.080 --> 00:08:50.830
the same word that you
run on your windows machine.

160
00:08:51.820 --> 00:08:54.490
And it was like, Oh,
Amanda's also in this file.

161
00:08:55.260 --> 00:08:56.940
And then I'm like, Oh,
weird. Okay. And I scroll

162
00:08:56.940 --> 00:08:59.340
down and there you are,
I'm on my iPhone and

163
00:08:59.340 --> 00:09:02.400
I'm watching you type. Yeah.
Same thing for code now.

164
00:09:02.460 --> 00:09:05.550
So same thing now for
code for visual studio. Okay.

165
00:09:05.730 --> 00:09:09.180
So let's go back to
the, the remote person in

166
00:09:09.180 --> 00:09:11.580
the example that we're giving
has no additional kind of

167
00:09:11.580 --> 00:09:14.490
workloads. We say workloads, that
means they don't have Python.

168
00:09:14.520 --> 00:09:16.140
They don't have all that.
They don't, even if I

169
00:09:16.140 --> 00:09:18.810
went to the dot the
command line and type.net, nothing

170
00:09:18.810 --> 00:09:22.080
happens because it's not installed.
How would you then get

171
00:09:22.380 --> 00:09:25.380
IntelliSense? How would you get
refactoring? How would you get

172
00:09:25.380 --> 00:09:27.840
right. Click go to definition?
Like those are things that

173
00:09:27.870 --> 00:09:30.790
would have to work. Yeah,
Totally. So, I mean, in,

174
00:09:30.790 --> 00:09:33.680
in some ways you might
think that you could take

175
00:09:33.680 --> 00:09:37.700
a technology, like, you know,
office three, six, five, and

176
00:09:37.700 --> 00:09:40.370
Hey, that looks like text
editing and Hey code is

177
00:09:40.370 --> 00:09:44.960
texts. Like, can't, we just
take the word collaborative editing

178
00:09:44.960 --> 00:09:48.050
experience and say, that's now
the basis for the code

179
00:09:48.050 --> 00:09:50.480
editor for visual studio. Right.
And all of a sudden

180
00:09:50.480 --> 00:09:54.080
you enable a collaboration. Right.
And we've seen other text

181
00:09:54.080 --> 00:09:57.080
editors and IDs do similar
type things, but just typing

182
00:09:57.080 --> 00:09:59.270
in the same sheet. Yeah.
But you can't really do

183
00:09:59.270 --> 00:10:02.900
that with code. And the
reason for that is that,

184
00:10:02.930 --> 00:10:05.690
you know, while you could
do that, if all you

185
00:10:05.690 --> 00:10:09.920
were looking for was like
basic, basic, basic colorization. Right.

186
00:10:10.310 --> 00:10:14.900
But what you really want
is a semantic understanding of

187
00:10:14.900 --> 00:10:16.670
all of the code and
how it relates to each

188
00:10:16.670 --> 00:10:20.780
other. Right. And to do
that, you actually need to

189
00:10:20.780 --> 00:10:24.980
have an understanding of multiple
files that your code has

190
00:10:24.980 --> 00:10:28.310
a dependency on so that
you can do the build

191
00:10:28.310 --> 00:10:31.160
so that you can do
the semantic based, you know,

192
00:10:31.160 --> 00:10:34.460
navigation like peak definition or
go to definition or something

193
00:10:34.460 --> 00:10:38.180
like that, or refactoring things
like that. And also IntelliSense

194
00:10:38.180 --> 00:10:43.070
depends on this. So, so
yeah, you need the multi

195
00:10:43.070 --> 00:10:46.400
file understanding. And so one
of the things that makes

196
00:10:46.400 --> 00:10:51.050
visual studio and vs code,
so, so good is that

197
00:10:51.050 --> 00:10:53.570
we've been working on the,
the compilers and kind of

198
00:10:53.570 --> 00:10:57.440
having a, a very, very,
and Roslyn, like an Omni

199
00:10:57.440 --> 00:11:00.920
sharp as, you know, The
opensource C sharp compiler and

200
00:11:00.920 --> 00:11:04.160
Omni sharp being the ability
to use any editor to

201
00:11:04.160 --> 00:11:07.940
get IntelliSense on. Right, Right.
Right. So, so I mean,

202
00:11:07.940 --> 00:11:10.310
part of the basis for
our compilers is that they

203
00:11:10.310 --> 00:11:13.580
have this notion of D
compilation and recompilation right. So

204
00:11:13.580 --> 00:11:16.730
that if somebody has a
program that they're writing, that,

205
00:11:16.760 --> 00:11:19.040
that it's always, we try
to be as in a

206
00:11:19.040 --> 00:11:21.590
high of a compiled state
as possible, so that we

207
00:11:21.590 --> 00:11:24.740
can give the best tooling
experience to the, to the

208
00:11:24.740 --> 00:11:29.810
user. If you make an
edit, then it basically decompile

209
00:11:30.470 --> 00:11:34.010
that, you know, method, body,
or basically that kind of

210
00:11:34.280 --> 00:11:37.100
block of code that, that
you're writing. And then it

211
00:11:37.100 --> 00:11:42.740
recompiled, it, it, it basically
it's in, you know, compilers,

212
00:11:42.740 --> 00:11:45.830
there's this notion of ASTs,
but basically it, it devolves

213
00:11:45.830 --> 00:11:48.560
the AST into a lower
state. And then it has

214
00:11:48.560 --> 00:11:51.950
to recompile and look at
all of the dependencies. So

215
00:11:51.950 --> 00:11:54.790
an AST is an abstract
tree. And if I've got

216
00:11:54.820 --> 00:11:58.060
a file with five or
six functions and I'm editing

217
00:11:58.060 --> 00:12:00.430
function, number three, and I
type, you said that it

218
00:12:00.430 --> 00:12:02.980
decompose and then recompile, why
doesn't it just throw away

219
00:12:02.980 --> 00:12:05.640
that one? And then Because
the perf would not be

220
00:12:05.640 --> 00:12:08.880
very good. So for us
to get really great perf

221
00:12:08.910 --> 00:12:12.300
in, in our code editors,
we need to have everything

222
00:12:12.570 --> 00:12:15.210
as high, a compiled state
as possible, so that we

223
00:12:15.210 --> 00:12:17.910
can give you good IntelliSense.
And as you type squiggles

224
00:12:17.940 --> 00:12:20.010
and stuff like that. So
the idea that when people

225
00:12:20.580 --> 00:12:24.600
explain naively, for lack of
a better word, how visual

226
00:12:24.600 --> 00:12:26.850
studio does its thing, they
think, Oh, well, as you're

227
00:12:26.850 --> 00:12:31.080
typing, it's compiling everything. That
is a simplistic, It's kind

228
00:12:31.080 --> 00:12:35.100
of decompiling and recompiling, just
the part that you're editing

229
00:12:35.160 --> 00:12:38.850
and the dependencies that the
part that you're editing sophisticated

230
00:12:38.850 --> 00:12:43.560
Delta. Yes. Yeah. And, and
we've been working on refining

231
00:12:43.560 --> 00:12:45.120
it for years and years
and years, but here's the

232
00:12:45.120 --> 00:12:49.140
thing that's really interesting about
what live share does is

233
00:12:50.040 --> 00:12:52.680
it makes it now so
that you could have multiple

234
00:12:52.680 --> 00:12:55.260
cursors, right? So you could
be in one part of

235
00:12:55.260 --> 00:12:58.080
the file, or even in
a different file that has

236
00:12:58.320 --> 00:13:00.750
a relationship you could be,
but you could be in

237
00:13:00.750 --> 00:13:03.480
the same file in a
different function. I could be

238
00:13:03.480 --> 00:13:06.420
in that same file in
a different function. We can

239
00:13:06.420 --> 00:13:09.360
both make edits at the
same time and both of

240
00:13:09.360 --> 00:13:12.810
our dependencies end up decompiling
to that earlier state and

241
00:13:12.810 --> 00:13:15.600
then recombining. Okay. So that
gets interesting. So if Roslyn

242
00:13:15.600 --> 00:13:18.960
and the way that the
system worked was fairly synchronous

243
00:13:18.960 --> 00:13:21.720
and not reentrant, you could
get into some trouble, but

244
00:13:21.720 --> 00:13:24.120
you're saying that it works.
I could have two, or

245
00:13:24.120 --> 00:13:27.030
maybe even three, four people
in there doing this, and

246
00:13:27.060 --> 00:13:29.460
it's smart enough to handle
it, but who's doing the

247
00:13:29.460 --> 00:13:31.650
work, the machine that initiated
the session does all the

248
00:13:31.650 --> 00:13:35.340
work. Yes. So what happens
is basically you are making

249
00:13:35.340 --> 00:13:40.530
an edit and that edit
is being remoted to the

250
00:13:40.740 --> 00:13:47.040
hosts machine. And the hosts
machine is doing all the

251
00:13:47.040 --> 00:13:51.270
competition locally, but we had
to augment and enhance the

252
00:13:51.270 --> 00:13:54.870
language service, which is another
word for the compiler, the,

253
00:13:54.960 --> 00:13:59.430
as you type compiler. Right.
And make it so that

254
00:13:59.430 --> 00:14:01.320
you could have two cursors
that could make an edit.

255
00:14:01.320 --> 00:14:06.510
Simultaneously. You mentioned something in
kind of a throwaway comment.

256
00:14:06.510 --> 00:14:08.130
I want to back up
to where you said the,

257
00:14:08.430 --> 00:14:11.610
to get things like syntax
highlighting. Yeah. If the, if

258
00:14:11.610 --> 00:14:16.290
the guest machine doesn't know
about C-sharp, who did the

259
00:14:16.290 --> 00:14:20.670
syntax highlighting? How did the
text get colored? The, the,

260
00:14:21.450 --> 00:14:25.440
the syntax highlighting specifically? Yeah.
Making things bold and making

261
00:14:25.440 --> 00:14:27.920
things the right color. And
then, So there are, there

262
00:14:27.930 --> 00:14:30.930
are different now you're really
getting like, I'm going to

263
00:14:30.930 --> 00:14:37.410
get super compiler, geeky. I
need. Okay. For the, for

264
00:14:37.410 --> 00:14:41.790
syntax coloring, there are basically
different levels of syntax colorization,

265
00:14:41.790 --> 00:14:46.590
then that have different levels
of understanding of the semantic

266
00:14:46.620 --> 00:14:49.140
basis of the code. So
one of the things that

267
00:14:49.140 --> 00:14:51.920
you might see at some
point is you get basic

268
00:14:51.950 --> 00:14:56.810
colorization for a language like
C-sharp, but there might be

269
00:14:56.810 --> 00:15:02.450
some things like class names.
Okay. That might not be

270
00:15:02.450 --> 00:15:07.760
colorized immediately. Right. And so,
so you can have a

271
00:15:07.760 --> 00:15:11.840
basic colorization for a language
that understands the grammar, which

272
00:15:11.840 --> 00:15:15.340
is basically this. Okay. No,
this is perfect. Let me,

273
00:15:15.350 --> 00:15:16.780
I want to make sure
that I understand. So let

274
00:15:16.780 --> 00:15:18.600
me stop for a second.
If I were going to

275
00:15:18.610 --> 00:15:22.880
go into another text editor,
let's just say sublime and,

276
00:15:23.290 --> 00:15:26.020
and someone opens up a
C-sharp file and they look

277
00:15:26.020 --> 00:15:28.480
at it and like, everything's
a nice, attractive color, and

278
00:15:28.480 --> 00:15:31.060
it's in a theme and
they might look at that

279
00:15:31.060 --> 00:15:34.840
and go, ah, I got
syntax highlighting. I got colorization.

280
00:15:34.960 --> 00:15:38.050
Yeah. That might be just
a series of regular expressions

281
00:15:38.050 --> 00:15:40.870
and yeah. Underneath. Yeah. But
then they open it up

282
00:15:40.870 --> 00:15:43.090
in visual studio and they
also get coloring and they

283
00:15:43.090 --> 00:15:45.310
go look, it's the same.
Yeah. But to be able,

284
00:15:45.370 --> 00:15:47.920
but, but see, this is
where as compiler geeks get

285
00:15:47.920 --> 00:15:55.480
super nerdy is, is like,
you might get syntax coloring

286
00:15:55.960 --> 00:15:58.780
and you might get grammar
checking like for the formal

287
00:15:58.780 --> 00:16:03.040
language, but you won't get
semantic analysis. Which means that

288
00:16:03.040 --> 00:16:05.740
you might, like, if you
think about a language could

289
00:16:05.740 --> 00:16:10.120
have, I don't know, six
different colors in your code

290
00:16:10.120 --> 00:16:13.030
editor based on the different
parts of the program that

291
00:16:13.030 --> 00:16:17.500
you're writing it. That six
is the maximum. Okay. If

292
00:16:17.500 --> 00:16:20.440
you had a not very
good understanding, because it was

293
00:16:20.440 --> 00:16:25.240
just based on regular expressions
and, and syntax analysis, then

294
00:16:25.240 --> 00:16:28.750
you might only see three
of those colors. Right. But

295
00:16:28.750 --> 00:16:33.070
then as your understanding progresses,
then you could see four

296
00:16:33.070 --> 00:16:36.190
colors in five colors in
six colors. Right. And so

297
00:16:36.220 --> 00:16:40.990
each of those different levels
of analysis represent kind of

298
00:16:40.990 --> 00:16:44.800
a, a more sophisticated type
of language service, Would you

299
00:16:44.800 --> 00:16:48.430
say without necessarily insulting our
listeners? Would you say that

300
00:16:48.730 --> 00:16:52.780
we, the users of these
things might make things, we

301
00:16:52.780 --> 00:16:55.630
might oversimplify things. We like
that, like, you know, we've

302
00:16:55.630 --> 00:16:57.910
all who everyone who's listening
is open to file, like

303
00:16:57.910 --> 00:16:59.710
a JavaScript file up into
the sublime and they go,

304
00:16:59.740 --> 00:17:01.780
Oh, look, it's got syntax
highlighting. And that's enough to

305
00:17:01.780 --> 00:17:04.720
impress it's enough for me
to go, Oh, wow, cool.

306
00:17:04.870 --> 00:17:08.470
Well, they didn't understand. Especially
when you're, you're looking at

307
00:17:08.470 --> 00:17:11.410
stuff from a demo perspective,
like, you know, you see

308
00:17:11.410 --> 00:17:13.930
it on a screen and
you're like, Whoa, okay, that's

309
00:17:13.930 --> 00:17:18.610
blue. And that's, you know,
light green, like, yeah. Like

310
00:17:18.760 --> 00:17:22.150
this is awesome. Right? Like
we have color check, colorization

311
00:17:22.150 --> 00:17:25.690
check. But, but one of
the reasons why I love

312
00:17:25.690 --> 00:17:28.750
working on developer tools is
that like developer tools are

313
00:17:28.750 --> 00:17:32.170
an eight hour day product.
Right? Like our users use

314
00:17:32.170 --> 00:17:35.800
them all the time, day
in, day out. Right. And

315
00:17:36.670 --> 00:17:40.450
in that mode of use
it's those little things that

316
00:17:40.450 --> 00:17:44.170
really really matter in terms
of your satisfaction with the

317
00:17:44.170 --> 00:17:47.890
product. And so while a
demo might end up, you

318
00:17:47.890 --> 00:17:54.120
know, giving you the, that
something has colorization, you know,

319
00:17:54.180 --> 00:17:56.790
you won't know until you
actually use it, that it's

320
00:17:56.790 --> 00:18:00.860
missing a whole host of
features that you have. It's

321
00:18:00.860 --> 00:18:03.020
interesting that you say that
because there was someone I

322
00:18:03.020 --> 00:18:04.730
got in an argument once
recently at an open source

323
00:18:04.730 --> 00:18:10.370
conference where someone told me
that sublime invented IntelliSense and

324
00:18:10.370 --> 00:18:12.920
Microsoft stole it. And then
we had this big, long

325
00:18:12.920 --> 00:18:16.730
conversation and basically they had
misunderstood what IntelliSense meant and

326
00:18:16.730 --> 00:18:19.460
they were confusing it with
auto-complete. So I went into

327
00:18:19.460 --> 00:18:24.050
sublime and I typed a
big, long word, like supercalifragilisticexpialidocious

328
00:18:24.410 --> 00:18:28.010
and I misspelled it. And
then I started typing super

329
00:18:28.550 --> 00:18:31.700
and sublime was like, Oh,
I know that I've seen

330
00:18:31.700 --> 00:18:34.130
that before. And I will
type it again for you.

331
00:18:35.120 --> 00:18:39.680
That's not IntelliSense. Right. IntelliSense
is typing this and hitting

332
00:18:39.680 --> 00:18:44.870
period. Yeah. And then a
magic happens, Basically the, the,

333
00:18:45.590 --> 00:18:52.640
as you type the completion
is being pre-validated for acceptable

334
00:18:52.700 --> 00:18:56.960
things so that you don't,
you don't type something that's

335
00:18:56.960 --> 00:19:02.090
incorrect. Right. Exactly. And that's
why people who use TypeScript,

336
00:19:02.330 --> 00:19:05.930
like it is, it makes
JavaScript more fun and less

337
00:19:06.320 --> 00:19:11.300
dangerous. Yeah. Because of that,
that, that operatory Less of

338
00:19:11.300 --> 00:19:14.270
a foot gun. Right? Yeah,
Exactly. So then back to

339
00:19:14.270 --> 00:19:17.420
visual studio live, share I'm
on the host, I'm on

340
00:19:17.420 --> 00:19:21.380
the guest machine. I don't
have C-sharp I type VAR.

341
00:19:21.380 --> 00:19:26.210
I equals whatever I dot.
Yeah. How could you possibly

342
00:19:26.210 --> 00:19:29.840
give me a list of
autocompletes on the VAR? You

343
00:19:29.840 --> 00:19:32.000
don't know the type of
I yet, because you don't

344
00:19:32.000 --> 00:19:34.460
have that compiler locally. You
couldn't give me the list.

345
00:19:34.580 --> 00:19:38.150
Who does that work? So
what happens is your edits

346
00:19:38.240 --> 00:19:41.630
get remoted to my machine
and then the language service

347
00:19:41.660 --> 00:19:45.440
on my machine that has
all the context of what

348
00:19:45.470 --> 00:19:51.410
that program needs to compile.
Basically power gives there's an

349
00:19:51.410 --> 00:19:54.680
API call that happens that
will, would populate the statement

350
00:19:54.680 --> 00:19:58.820
completion or the IntelliSense, and
give that back to your

351
00:19:58.820 --> 00:20:01.520
machine and show it in
As I'm typing, as you're

352
00:20:01.520 --> 00:20:06.170
typing. Yeah. That's crazy. It's
pretty cool. Okay. So that,

353
00:20:06.230 --> 00:20:08.540
that gets me thinking about
like the levels then more,

354
00:20:08.540 --> 00:20:11.690
because I was thinking, all
right, well, it's got syntax

355
00:20:11.690 --> 00:20:15.470
highlighting, coloring check, and then
I'm thinking, Oh, well, I

356
00:20:15.470 --> 00:20:19.010
can edit. And co-edit in
the same file check. Yeah.

357
00:20:19.070 --> 00:20:22.340
But I, when you take
it to a more, like

358
00:20:22.340 --> 00:20:24.320
you say, an eight hour
a day job, I need

359
00:20:24.320 --> 00:20:26.960
to be able to explore
anyone's files. I want to

360
00:20:26.960 --> 00:20:30.260
see the files view the
solution. I think that the

361
00:20:30.260 --> 00:20:32.750
code that you're writing might
have a dependence. Right. Not

362
00:20:32.750 --> 00:20:36.710
necessarily just what the person's
looking at. Yeah. And then

363
00:20:36.710 --> 00:20:40.460
IntelliSense. So then beyond IntelliSense
or statement completion, there's things

364
00:20:40.460 --> 00:20:42.860
like go to definition or
even like a refactoring, like

365
00:20:42.860 --> 00:20:44.360
if I want to select
a bunch of texts and

366
00:20:44.360 --> 00:20:48.040
then right. Click and say
extract method. Yeah. Who does

367
00:20:48.070 --> 00:20:50.580
the host also? Does that
work? Yeah. So basically what

368
00:20:50.580 --> 00:20:54.120
would happen is as you
type, we will be able

369
00:20:54.120 --> 00:20:57.870
to, we, I shouldn't say
we as, cause I think

370
00:20:57.900 --> 00:21:01.320
I oftentimes think of visual
studio, is we, like, I

371
00:21:01.320 --> 00:21:07.380
am visual studio. I am
not visual studio, but I

372
00:21:07.380 --> 00:21:10.620
sometimes need to remind myself
of that. So as you

373
00:21:10.620 --> 00:21:15.900
type visual studio, basically remotes
all of that to the

374
00:21:15.900 --> 00:21:19.920
host's machine so that you
can get, you know, light

375
00:21:19.920 --> 00:21:25.770
bulbs and squiggles and IntelliSense
that's grammatically correct. And semantically.

376
00:21:25.770 --> 00:21:29.130
Correct. So that you really
don't have to make a

377
00:21:29.130 --> 00:21:32.700
miss mistype Direct connection. Like
if you or I are

378
00:21:32.700 --> 00:21:34.860
in this, like I'm VPN
to the same company, are

379
00:21:34.860 --> 00:21:37.440
you talking to some port
that I have to like

380
00:21:37.860 --> 00:21:40.170
prompt the firewall to open
up? And then if I'm

381
00:21:40.170 --> 00:21:42.270
at my house and we're
not on VPN, are you

382
00:21:42.270 --> 00:21:45.900
routing it through some Nat
traversal technique? Yeah. So basically

383
00:21:45.900 --> 00:21:52.260
if, if the initial, the
initiation has to go through

384
00:21:52.350 --> 00:21:55.590
a service that we host,
but then after that, then

385
00:21:55.620 --> 00:21:58.530
we do have the capability
for it to go via

386
00:21:58.590 --> 00:22:04.890
a relay kind of thing.
And you know, there is

387
00:22:04.950 --> 00:22:07.020
like, you need to, you
do need to open that

388
00:22:07.020 --> 00:22:09.360
up so that the, so
that, you know, you can

389
00:22:09.360 --> 00:22:11.850
have that direct communication. Yeah.
Like when I did remote

390
00:22:11.850 --> 00:22:14.340
debugging, I had to open
the port to initiate the

391
00:22:14.340 --> 00:22:17.550
remote. Yeah. You don't have
to go like open a

392
00:22:17.550 --> 00:22:21.270
port specifically, but basically you'd
get a prompt, like visual

393
00:22:21.270 --> 00:22:24.510
studio wants to access this
thing. Are you okay with

394
00:22:24.510 --> 00:22:27.930
that? And is this like
HTTP or is it magic

395
00:22:27.930 --> 00:22:31.230
binary thing or is it
like web RTC or web

396
00:22:31.230 --> 00:22:35.430
sockets? It doesn't matter so
much. Right. My firewall is

397
00:22:35.430 --> 00:22:37.230
not going to like find
it suspicious. It's just like,

398
00:22:37.260 --> 00:22:40.140
just like Scott doesn't find
Skype suspicious or yeah. Right.

399
00:22:40.140 --> 00:22:44.870
It's basically just the implementation,
you know, channel for, for

400
00:22:44.870 --> 00:22:46.740
the two remote sites. But
then how does it work

401
00:22:46.740 --> 00:22:49.530
on visual studio code, which
is written in Java script

402
00:22:49.530 --> 00:22:52.350
and runs on Linux and
Mac and whatever. And it

403
00:22:52.350 --> 00:22:55.860
works on visual studio, which
is a big giant windows

404
00:22:55.860 --> 00:23:01.620
applicator. Yeah. It's, it's basically
a service that, that runs

405
00:23:01.620 --> 00:23:05.490
alongside your visual studio or
vs code and the client

406
00:23:05.550 --> 00:23:09.870
invokes that, that service. Okay.
And the service is running

407
00:23:09.870 --> 00:23:12.990
right now in Azure, somewhere
like, I guess people are

408
00:23:12.990 --> 00:23:14.760
signing up for previews and
you're going to get their

409
00:23:14.760 --> 00:23:16.680
name on a list. And
then you'll use the number

410
00:23:16.680 --> 00:23:18.510
of signups to get a
sense of how to scale

411
00:23:18.510 --> 00:23:21.060
this thing out. So that
millions of What we're really

412
00:23:21.060 --> 00:23:25.140
trying to do, we, so
anybody can go to aka.ms.

413
00:23:25.470 --> 00:23:30.060
Forward slash vs. Live share,
and give us their email

414
00:23:30.060 --> 00:23:33.210
address. And a little bit
of information. What we're hoping

415
00:23:33.210 --> 00:23:35.550
to do is to open
up a preview in the

416
00:23:35.580 --> 00:23:39.420
early part of next year,
very early part of next

417
00:23:39.420 --> 00:23:44.610
year, and get a diverse
set of early alpha testers,

418
00:23:44.610 --> 00:23:47.930
essentially need people with different
network conditions. We need people

419
00:23:47.930 --> 00:23:53.150
with different languages and tools,
combinations. We need people with

420
00:23:53.150 --> 00:23:57.800
different scale of their project
sizes so that we can

421
00:23:57.830 --> 00:24:00.680
make sure that we're building
an experience that developers really

422
00:24:00.680 --> 00:24:03.620
love. And so what we're
hoping to do is to

423
00:24:03.620 --> 00:24:06.470
kind of get a small
group to start and we'll

424
00:24:06.500 --> 00:24:09.740
ratchet it up over time
and it will, you know,

425
00:24:09.740 --> 00:24:13.250
the selection will be based
on the diversity of, of,

426
00:24:13.280 --> 00:24:15.500
you know, the set of
people that we need. We

427
00:24:15.500 --> 00:24:18.410
need more know developers, we
need more C sharp developers.

428
00:24:18.410 --> 00:24:20.870
We need more people with
this kind of network condition.

429
00:24:21.170 --> 00:24:26.240
We need people in, you
know, in this region or

430
00:24:26.240 --> 00:24:29.020
we need remote teams that
are, Yeah. The remote team

431
00:24:29.020 --> 00:24:30.790
thing is huge. Cause you
know, my team is remote,

432
00:24:30.790 --> 00:24:33.730
right? Yeah. You know, I'm
in Portland, Maria's in New York,

433
00:24:33.940 --> 00:24:36.130
John's in San Diego, we're
all over the place. And

434
00:24:36.130 --> 00:24:39.370
sometimes, you know, I'm at
a cafe and I've tethered

435
00:24:39.370 --> 00:24:42.410
my phone. Right. And it
might be LTE, but it

436
00:24:42.670 --> 00:24:45.850
might have some latency or
whatever. It'd be super awesome

437
00:24:45.850 --> 00:24:48.250
if I could do that.
And like John calls me

438
00:24:48.250 --> 00:24:49.870
and say, Hey, can you
connect in? And I just

439
00:24:49.870 --> 00:24:51.820
pick it up. Yeah. And
one of the things that

440
00:24:51.820 --> 00:24:54.040
we really need to make
sure to get this right,

441
00:24:54.520 --> 00:24:57.070
is that it has to
be more reliable and robust

442
00:24:57.070 --> 00:25:00.880
then screen-sharing right. Because, because
if you're going to go

443
00:25:00.910 --> 00:25:03.760
and you know, screen-sharing is
your D it has to

444
00:25:03.760 --> 00:25:06.460
be better than screen-sharing so
you don't do screen-sharing. Right.

445
00:25:07.180 --> 00:25:09.760
And so part of that
is screen-sharing has a lot

446
00:25:09.760 --> 00:25:14.260
of high bandwidth requirements. Right?
And like, if you're in

447
00:25:14.260 --> 00:25:17.020
a cafe tethered to your
phone, sometimes you might be

448
00:25:17.020 --> 00:25:20.020
able to screen share, but
sometimes you really aren't. And

449
00:25:20.020 --> 00:25:23.770
honestly, even within Microsoft, like
even when we're entirely plugged

450
00:25:23.770 --> 00:25:25.480
in and we have one
of the best networks in

451
00:25:25.480 --> 00:25:28.600
the world, probably even that
in sometimes we have some

452
00:25:28.600 --> 00:25:31.600
challenges with screen sharing. It's
funny that you mentioned that

453
00:25:31.600 --> 00:25:35.560
because my surface book is
like 3000 by 2000 or

454
00:25:35.560 --> 00:25:40.120
some stupid high resolution. And
when I screen share from

455
00:25:40.120 --> 00:25:42.160
the cafe that I sit
at with my phone tethered,

456
00:25:42.400 --> 00:25:46.420
I lower the resolution to
like 1366 by seven 68,

457
00:25:46.450 --> 00:25:49.150
because I can't screen-share doesn't
that suck? No, it totally

458
00:25:49.150 --> 00:25:51.790
sucks. But then, then they'll
go and say, Oh, can

459
00:25:51.790 --> 00:25:54.160
I take over control? Right.
When they push that request

460
00:25:54.160 --> 00:25:56.800
control button or whatever. And
then they always like, Oh,

461
00:25:56.800 --> 00:25:59.740
the mouse isn't moving or
I've typed. And the thing

462
00:25:59.740 --> 00:26:03.760
hasn't updated yet, it's because
you're pushing pixels around and

463
00:26:03.760 --> 00:26:07.120
they J Peggy pixels. Right.
And with this, it really

464
00:26:07.120 --> 00:26:10.300
is like one advantage just
from the pure bandwidth and

465
00:26:10.300 --> 00:26:13.300
latency perspective. One advantage to
this approach is that we're

466
00:26:13.300 --> 00:26:16.810
really sending only the minimum
information that we need to

467
00:26:16.810 --> 00:26:21.640
power your code, editing experience
in the collaboration expense. What

468
00:26:21.640 --> 00:26:24.490
am I typing? Where's my
cursor. So that's one major

469
00:26:24.490 --> 00:26:27.070
advantage. But the other one
is that both of us

470
00:26:27.070 --> 00:26:33.430
can use the editor that
I've personalized for my use.

471
00:26:33.430 --> 00:26:36.280
And you can use the
editor that you've personalized, don't

472
00:26:36.280 --> 00:26:39.070
change your hotkeys. Don't change.
Your windows are all in

473
00:26:39.070 --> 00:26:41.950
the same places. If I
go into debug mode and

474
00:26:41.950 --> 00:26:45.000
I have like, you know,
my favorite debug windows at

475
00:26:45.000 --> 00:26:47.730
the bottom, like you don't
have to suffer through that

476
00:26:47.730 --> 00:26:50.180
as we try to debug
a problem. Okay. Right. So

477
00:26:50.180 --> 00:26:52.400
that means my solution Explorer
is docked where I want

478
00:26:52.400 --> 00:26:54.470
it to be, my, my
fonts are my way, nothing

479
00:26:54.470 --> 00:26:58.580
changes, Nothing changes. It's it's
your, your user expense. Has

480
00:26:58.580 --> 00:27:01.460
there been any thought to
the specification of the protocol

481
00:27:01.460 --> 00:27:02.930
and like making it a
thing that we put out

482
00:27:02.930 --> 00:27:04.850
there in the world and
publish it and then maybe

483
00:27:05.090 --> 00:27:07.850
some Emacs person might go
and implement that so that

484
00:27:07.850 --> 00:27:11.210
an Emacs person Possibly, I
mean, basically the, there to,

485
00:27:11.360 --> 00:27:13.910
you know, two different pieces
of technology that we're talking

486
00:27:13.910 --> 00:27:16.340
about here. So there's the
co-authoring portion of it. And

487
00:27:16.340 --> 00:27:19.970
then there's the code debugging
portion of it. Okay. The

488
00:27:19.970 --> 00:27:22.460
code debugging portion of it
is based on the visual

489
00:27:22.460 --> 00:27:26.420
studio, remote debugger, which we
don't, it's not currently an

490
00:27:26.420 --> 00:27:31.250
open protocol. The co-authoring portion
of it is basically an

491
00:27:31.250 --> 00:27:34.580
extension of the language service
protocol that vs code is

492
00:27:34.580 --> 00:27:38.480
kind of based on top
of. And so, you know,

493
00:27:38.870 --> 00:27:42.950
it's, it's, it would be
extending that. Okay. So then

494
00:27:42.950 --> 00:27:45.080
theoretically, maybe the internet could
get together and make at

495
00:27:45.080 --> 00:27:48.080
least the basics, like a
thing that we all standardize

496
00:27:48.080 --> 00:27:51.170
on. And then the more
advanced things would be, like

497
00:27:51.170 --> 00:27:56.130
I said, a separate thing.
Yeah. So it's aka.ms. Dot

498
00:27:56.630 --> 00:28:01.760
also known as Dot M
S forward slash V S

499
00:28:01.850 --> 00:28:06.230
live show. All right. Cool.
And theoretically, you know, after

500
00:28:06.230 --> 00:28:08.780
the holidays, shortly, shortly after
the hall, basically when you

501
00:28:08.780 --> 00:28:10.970
get back. Yeah. Essentially, we
didn't want to do it

502
00:28:10.970 --> 00:28:13.940
over Christmas because our team
wouldn't be there to support

503
00:28:13.940 --> 00:28:17.510
everybody through. Okay, cool. Yeah.
That's great. Well, thanks so

504
00:28:17.510 --> 00:28:19.850
much for chatting with me
today. All right. It's fun.

505
00:28:20.150 --> 00:28:22.880
This has been another episode
of Hanselminutes and we'll see

506
00:28:22.880 --> 00:28:23.960
you again next week.

