WEBVTT FILE

1
00:00:00.330 --> 00:00:03.480
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.480 --> 00:00:06.450
they make the show possible.
Today's show is sponsored by

3
00:00:06.450 --> 00:00:10.620
developer express, become a UI
superhero with dev express controls

4
00:00:10.620 --> 00:00:15.150
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.540 --> 00:00:19.620
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.650 --> 00:00:23.730
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.850 --> 00:00:45.630
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
Hi, this is Scott Hanselman.

8
00:00:45.630 --> 00:00:48.570
This is another episode of
Hansel minutes today. I'm talking

9
00:00:48.570 --> 00:00:51.780
with Lynn Clark. She works
in the emerging technologies group

10
00:00:51.780 --> 00:00:55.320
at Mozilla. She also draws
code cartoons, and this is

11
00:00:55.320 --> 00:01:00.900
actually how I started to
get to know you@codehyphencartoons.com. Thanks

12
00:01:00.900 --> 00:01:02.870
for hanging out with me
today. Well, thanks for having

13
00:01:02.870 --> 00:01:04.550
me on the show. I'm
really happy to come and

14
00:01:04.550 --> 00:01:07.580
chat with you about this
stuff. Yeah, I appreciate what

15
00:01:07.580 --> 00:01:11.510
you're doing. When I go
to code cartoons, it looks

16
00:01:11.510 --> 00:01:15.380
almost like a kind of
an XKCD style. The, I

17
00:01:15.380 --> 00:01:20.060
think that XKCD basically gets
to a claim stick figures.

18
00:01:20.630 --> 00:01:25.160
Yeah, that's true. I've looked
actually I collected a bunch

19
00:01:25.160 --> 00:01:29.180
of different stick-figure comics when
I was first starting out

20
00:01:29.240 --> 00:01:32.030
and I've never put them
chronologically, so I'm not sure

21
00:01:32.030 --> 00:01:35.780
if XKCD was actually the
original one, but yeah, that

22
00:01:35.780 --> 00:01:38.810
was definitely a big influence
on code cartoons. Wow. That

23
00:01:38.810 --> 00:01:41.090
might mean that if we
go back and like do

24
00:01:41.090 --> 00:01:44.150
the math, maybe you were
first there. I can assure

25
00:01:44.150 --> 00:01:47.540
you. That's not true. Yeah.
I really liked the detail

26
00:01:47.540 --> 00:01:49.490
on the, in the, the,
the level of effort. These

27
00:01:49.490 --> 00:01:53.270
are not like these are
artistically done. I think I'm

28
00:01:53.270 --> 00:01:57.890
looking at one on a
cartoon intro to Facebook's relay.

29
00:01:58.580 --> 00:02:02.360
And is that the guy
from the it crowd buried

30
00:02:02.360 --> 00:02:04.520
in the back there? Yeah,
I like to put little

31
00:02:04.520 --> 00:02:07.040
Easter eggs in there, so
that is Moss Maurice Moss.

32
00:02:07.550 --> 00:02:12.200
That's so awesome. I definitely
recognized his hair. These cartoons

33
00:02:12.200 --> 00:02:15.800
are, they're not just cute,
but they're extremely accessible. They

34
00:02:15.800 --> 00:02:20.840
make complex concepts like available
to the masses where, where

35
00:02:20.840 --> 00:02:24.920
the masses are me. I
really find specs really overwhelming.

36
00:02:24.950 --> 00:02:28.130
And somehow you just have
the right amount of code,

37
00:02:28.160 --> 00:02:29.960
the right amount of cartoon
and the right amount of

38
00:02:29.960 --> 00:02:34.970
pros you should do more.
Well. That's actually, I'm very

39
00:02:34.970 --> 00:02:39.590
excited. I started code cartoons
before I joined Mozilla and

40
00:02:39.590 --> 00:02:43.130
then I joined Mozilla and
it was my side thing.

41
00:02:44.210 --> 00:02:47.810
And then I realized I
could probably actually turn this

42
00:02:47.810 --> 00:02:50.480
into my full time job
at Mozilla. So I talked

43
00:02:50.480 --> 00:02:52.250
to my current boss about
that idea and he was

44
00:02:52.250 --> 00:02:54.710
thrilled about it. So I'm
very lucky that now it

45
00:02:54.710 --> 00:02:56.150
is my full time job
and I'm beginning to do

46
00:02:56.150 --> 00:03:00.220
more and more of them.
Really? Yes, I did Not

47
00:03:00.220 --> 00:03:05.640
realize that. That's cool. Yeah.
So I unfortunately code cartoons.com.

48
00:03:05.640 --> 00:03:07.680
I'm not doing a great
job of keeping it updated.

49
00:03:07.680 --> 00:03:10.380
I need to go in
and revise it so that

50
00:03:10.380 --> 00:03:13.770
it's no longer just a
medium blog, but I have

51
00:03:13.770 --> 00:03:16.950
a lot of code cartoons
now on the hacks blog

52
00:03:16.980 --> 00:03:23.040
for Mozilla things about memory
management and shared array, buffer

53
00:03:23.040 --> 00:03:27.060
and Atomics and WebAssembly, and
I'll also be working, releasing

54
00:03:27.060 --> 00:03:30.360
one next week about a
new project that we're working

55
00:03:30.360 --> 00:03:35.400
on at Mozilla called project
quantum and particularly Stylo. Oh,

56
00:03:35.400 --> 00:03:39.360
okay. So that's at hacks.mozilla.org.
Yeah. It'd be great if

57
00:03:39.360 --> 00:03:42.000
we could get, get all
the cartoons in both locations.

58
00:03:42.240 --> 00:03:47.670
Yeah. So project quantum and
Stylo, or those two things

59
00:03:47.670 --> 00:03:50.400
are the same thing. Well,
so it was a little

60
00:03:50.400 --> 00:03:54.510
bit complex project. Quantum is
something that we're doing at

61
00:03:54.520 --> 00:03:57.120
Mozilla. We've been doing it
for the past nine months

62
00:03:57.120 --> 00:03:59.430
or so, and it's going
to keep going for a

63
00:03:59.430 --> 00:04:05.010
while yet. We're making Firefox
faster and we're doing that

64
00:04:05.010 --> 00:04:07.860
by bringing in technology that
we've been researching over the

65
00:04:07.860 --> 00:04:11.940
past four or five years
and bringing it in and

66
00:04:11.940 --> 00:04:18.630
swapping out components as we
go in Firefox. So for

67
00:04:18.630 --> 00:04:21.840
example, Stylo, which is the
first of these components to

68
00:04:21.840 --> 00:04:25.230
land in Firefox is the
CSS style engine. We're basically

69
00:04:25.230 --> 00:04:29.850
completely rewriting the way that
we do CSS styling to

70
00:04:29.850 --> 00:04:34.020
make it much, much faster.
Okay. So project quantum is

71
00:04:34.020 --> 00:04:36.720
the let's make it fast.
And then there's code names

72
00:04:36.720 --> 00:04:39.840
for each individual, you know,
Oregon, for lack of a

73
00:04:39.840 --> 00:04:42.180
better word that you're swapping
it to the larger body.

74
00:04:42.450 --> 00:04:46.770
Exactly. You know, I hear
each year as the browser,

75
00:04:46.770 --> 00:04:49.020
kind of the browser Wars,
the long tail of the

76
00:04:49.020 --> 00:04:52.920
browser Wars continues that, you
know, this thing is 30%

77
00:04:52.920 --> 00:04:56.190
faster. That thing is 30%
faster. And it, whenever I

78
00:04:56.190 --> 00:04:58.590
hear someone come out, like
I think edge came out

79
00:04:58.590 --> 00:05:00.840
with something that was like,
Oh, we're 200% faster. And

80
00:05:00.840 --> 00:05:02.640
I'm thinking to myself, but
doesn't that mean you were

81
00:05:02.640 --> 00:05:06.420
slow before and it's year
after year after year. If

82
00:05:06.420 --> 00:05:08.280
we look at this over
the last 10 years, it

83
00:05:08.280 --> 00:05:11.820
must be thousands of times
faster. How is that possible?

84
00:05:11.820 --> 00:05:14.280
Is that a computer science
thing? Or did we just

85
00:05:14.280 --> 00:05:18.810
really all suck before? Well,
yeah. You know, the different

86
00:05:18.810 --> 00:05:23.310
parts are getting diff faster
in different ways. So one

87
00:05:23.310 --> 00:05:25.830
of the parts that has
gotten faster in the past

88
00:05:25.830 --> 00:05:29.070
that really blew people's minds
was JavaScript got a lot

89
00:05:29.070 --> 00:05:32.940
faster, about 10 years ago,
that was the original performance

90
00:05:32.940 --> 00:05:36.390
Wars that people were talking
about. And that was because

91
00:05:36.420 --> 00:05:40.920
of changes in the ways
that we compile JavaScript in

92
00:05:40.920 --> 00:05:45.360
the browser. And we're actually
in that space and you

93
00:05:45.360 --> 00:05:49.560
know, that kind of the
JavaScript space, we're actually seeing

94
00:05:49.560 --> 00:05:56.580
another huge performance boost now
from WebAssembly, but there's also

95
00:05:56.580 --> 00:06:00.830
another part of the browser,
the rendering engine. And that's

96
00:06:00.830 --> 00:06:04.910
what takes your HTML and
CSS and turns it into

97
00:06:04.910 --> 00:06:08.780
the pixels on the page.
And so that is what

98
00:06:08.780 --> 00:06:12.020
a lot of the work
in quantum project quantum is

99
00:06:12.020 --> 00:06:14.210
about. Not all of it,
but a lot of it

100
00:06:14.210 --> 00:06:19.630
is about making that rendering
engine faster, The Indian I'm

101
00:06:19.630 --> 00:06:21.970
familiar with, or at least
I've been familiar with for

102
00:06:21.970 --> 00:06:23.620
the last several years. And
I think of when I

103
00:06:23.620 --> 00:06:27.840
think of Mozilla is I
think of gecko, there's a

104
00:06:27.840 --> 00:06:31.360
swapping out of gecko or
is this a generational improvement

105
00:06:31.360 --> 00:06:35.200
to the original gecko? It's
a swapping out parts of

106
00:06:35.200 --> 00:06:38.200
gecko Fu with another project
we've been working on called

107
00:06:38.200 --> 00:06:42.730
servo, which is another web
engine. And so I'm going

108
00:06:42.730 --> 00:06:45.280
to give a little bit
of background about surfer. Cause

109
00:06:45.280 --> 00:06:48.070
I think that that'll help
inform why we think that

110
00:06:48.070 --> 00:06:52.120
there's such performing schemes to
be had here. So to

111
00:06:52.120 --> 00:06:54.940
talk about how you make
the browser, the rendering engine

112
00:06:54.940 --> 00:06:58.210
faster, I need to talk
a little bit about the

113
00:06:58.360 --> 00:07:01.420
hardware that these browsers are
running on and the hardware

114
00:07:01.420 --> 00:07:03.730
that's likely to come in
the near future. And to

115
00:07:03.730 --> 00:07:04.960
do that, I'm going to
need to talk a little

116
00:07:04.960 --> 00:07:07.540
bit about Moore's law and
the end of Moore's law.

117
00:07:07.540 --> 00:07:12.940
So Moore's law is basically
why computers have gotten faster

118
00:07:13.300 --> 00:07:17.590
so quickly over the last
60 years. And it's basically

119
00:07:17.620 --> 00:07:21.130
this observation that was made
by Gordon Moore, who was

120
00:07:21.130 --> 00:07:23.620
the co founder of Intel
that you could fit more

121
00:07:23.620 --> 00:07:28.210
transistors about twice as many
transistors on a chip every

122
00:07:28.210 --> 00:07:33.190
18 months. And so that
is, it's a confusing way

123
00:07:33.190 --> 00:07:36.520
to put it, but basically
there's a correlation between the

124
00:07:36.520 --> 00:07:38.170
number of transistors you can
put on a chip and

125
00:07:38.170 --> 00:07:44.470
how fast the computer goes.
And so Gordon Moore said,

126
00:07:44.470 --> 00:07:47.140
this is probably going to
continue into the foreseeable future.

127
00:07:48.610 --> 00:07:52.660
So we were getting, you
know, basically two times performance

128
00:07:52.660 --> 00:07:56.530
increases in how fast the
computer is going every 18

129
00:07:56.530 --> 00:08:00.130
months to two years for
the last 60 years. And

130
00:08:00.130 --> 00:08:03.430
then about in 2005 people
started seeing that we were

131
00:08:03.430 --> 00:08:08.140
reaching physical and economic limits
to this, to Moore's law.

132
00:08:08.620 --> 00:08:11.680
Basically we weren't going to
see these continued performance increases

133
00:08:11.680 --> 00:08:14.380
from being able to fit
more transistors on a chip

134
00:08:14.380 --> 00:08:17.020
and being able to run
what's called the clock faster

135
00:08:17.080 --> 00:08:21.040
to increase clock speeds, but
we still want to have

136
00:08:21.430 --> 00:08:24.310
that increase in computing performance
that we've seen with Moore's

137
00:08:24.310 --> 00:08:25.960
law over the past 60
years, we still want the

138
00:08:25.960 --> 00:08:31.120
computers get faster. So chip
manufacturers started to design chips

139
00:08:31.120 --> 00:08:34.060
in a different way. If
you think of a CPU

140
00:08:34.060 --> 00:08:37.810
is basically a brain, you
know, it, it can think

141
00:08:37.810 --> 00:08:44.170
things, these new chips, they
were called multi-core architectures. It

142
00:08:44.170 --> 00:08:47.290
was basically like having multiple
brains on the chip. So

143
00:08:47.290 --> 00:08:50.920
you can think of multiple
things at once, but in

144
00:08:50.920 --> 00:08:53.170
order to make use of
that, you need to change

145
00:08:53.170 --> 00:08:55.060
the way that you code.
You actually need to start

146
00:08:55.440 --> 00:09:00.120
in parallel. And so browsers
started taking advantage of this

147
00:09:00.120 --> 00:09:03.930
in 2007, in 2008, that's
actually, Chrome was one of

148
00:09:03.930 --> 00:09:05.880
the big innovators here. That's
one of the reasons why

149
00:09:05.880 --> 00:09:08.160
Chrome was faster than Firefox
when it first came out,

150
00:09:08.160 --> 00:09:12.150
was it was taking advantage
of these multi-core architectures with

151
00:09:12.150 --> 00:09:17.070
this multi-process architecture. And so
what that means is that

152
00:09:17.400 --> 00:09:20.730
it would have the, you
know, the URL bar, the

153
00:09:20.730 --> 00:09:23.490
stuff that you use to
navigate the page, that's called

154
00:09:23.490 --> 00:09:26.910
the browser Chrome. It would
have that running in one

155
00:09:26.910 --> 00:09:29.400
process, which could be running
in one core. So it

156
00:09:29.400 --> 00:09:32.250
could be running in one
of these brains and then

157
00:09:32.250 --> 00:09:36.210
the actual web contents, the
page. So the HTML and

158
00:09:36.210 --> 00:09:40.140
CSS stuff that could be
running in a different process

159
00:09:40.380 --> 00:09:42.960
that was running in a
different on different core potentially.

160
00:09:43.680 --> 00:09:45.710
And each one of these
tabs could be running at

161
00:09:45.710 --> 00:09:49.290
a different process up to
about 10 tabs if I

162
00:09:49.290 --> 00:09:54.720
recall correctly. So they actually
started making use of this

163
00:09:54.720 --> 00:09:59.100
parallelism and in 2008, but
that's a pretty core screamed

164
00:09:59.100 --> 00:10:03.660
kind of parallelism, you know,
having just each page of

165
00:10:03.660 --> 00:10:07.410
the, of each tab, be
run running in a different

166
00:10:07.410 --> 00:10:11.280
process and it doesn't buy
you much in certain circumstances

167
00:10:11.280 --> 00:10:13.680
like on phones where you
really only want to have

168
00:10:13.680 --> 00:10:18.750
one tab that's active at
a time. So, you know,

169
00:10:18.750 --> 00:10:20.790
we started on that same
kind of multi-process that same

170
00:10:20.790 --> 00:10:24.990
kind of core screen parallelism
and Firefox. We, I think

171
00:10:24.990 --> 00:10:29.370
we started around 2013 on
implementing that, but we also

172
00:10:29.370 --> 00:10:32.880
started at the same time
looking at finer grained parallelism.

173
00:10:33.360 --> 00:10:35.970
So looking at how you
could break up the page

174
00:10:36.060 --> 00:10:40.020
itself, the contents, the actual
web contents, and run that

175
00:10:40.020 --> 00:10:43.530
in parallel as well. And
so that was what the

176
00:10:43.530 --> 00:10:48.840
servo project was researching is
how can you parallelize all

177
00:10:48.840 --> 00:10:51.870
of the things in a
webpage? So we don't just

178
00:10:51.870 --> 00:10:56.520
parallelize the tabs to different
processes, but we parallelize, you

179
00:10:56.520 --> 00:10:59.790
know, if you have something
like Facebook or something like

180
00:10:59.820 --> 00:11:04.770
Pinterest, those individual cards could
be processed in parallel. And

181
00:11:04.770 --> 00:11:06.600
so once we saw that
this was possible in the

182
00:11:06.600 --> 00:11:09.960
server project, that's when we
started swapping out the parts

183
00:11:09.960 --> 00:11:14.820
of Firefox engine with the
parts of gecko with these

184
00:11:14.820 --> 00:11:18.360
components from servo. And so
the first one that I

185
00:11:18.360 --> 00:11:22.380
was talking about for Stylo
that landed in our nightly

186
00:11:22.380 --> 00:11:24.900
released, which is a kind
of a release that you

187
00:11:24.900 --> 00:11:26.700
can use if you're on
the bleeding edge. And you

188
00:11:26.700 --> 00:11:32.400
don't mind your browser breaking
occasionally, that, that landed a

189
00:11:32.400 --> 00:11:35.570
couple of weeks ago in
nightly. Okay. Can I run

190
00:11:35.570 --> 00:11:38.690
nightly side by side with
my stable and not be

191
00:11:38.930 --> 00:11:45.080
fearful If you run it
with different profiles? You yeah.

192
00:11:45.080 --> 00:11:47.000
You have to run it
with a different profile, but

193
00:11:47.000 --> 00:11:49.760
other than that, yeah. Okay.
That's cool. That seems, that

194
00:11:49.760 --> 00:11:53.300
seems really reasonable. So it
seems like in order to

195
00:11:53.320 --> 00:11:58.360
make it feel like the
Moore's law curve continues in

196
00:11:58.360 --> 00:12:02.380
its kind of dramatic, dramatic
fashion, we're doing anything we

197
00:12:02.380 --> 00:12:05.110
can to keep with that
curve. And it's parallelism in

198
00:12:05.110 --> 00:12:07.600
the last 10 years that
had become the big issue.

199
00:12:07.960 --> 00:12:10.450
It seems though that at
least the C and C

200
00:12:10.450 --> 00:12:14.200
plus plus language that I
learned in college 20 years

201
00:12:14.200 --> 00:12:17.740
ago, they didn't tell us
much about, you know, asynchrony.

202
00:12:17.740 --> 00:12:19.660
And it didn't tell us
much about parallelism. It doesn't

203
00:12:19.660 --> 00:12:21.700
feel like C plus plus
is really good at that.

204
00:12:22.770 --> 00:12:27.900
Well, C plus plus can
do things in parallel and

205
00:12:27.900 --> 00:12:31.170
a lot of people who
write C plus plus will

206
00:12:31.170 --> 00:12:35.280
contest that it's just fine
for that, but you kind

207
00:12:35.280 --> 00:12:39.960
of need to have a
wizard level understanding of safety

208
00:12:39.990 --> 00:12:42.660
and, you know, making you
basically have to not make

209
00:12:42.660 --> 00:12:45.900
mistakes at all when you're
working in parallel with C

210
00:12:45.900 --> 00:12:50.100
plus plus, because there's no
guardrails. And when you have

211
00:12:50.100 --> 00:12:53.700
a project that has hundreds
or thousands of engineers working

212
00:12:53.700 --> 00:13:00.000
on it, you can't really,
you can't take that risk.

213
00:13:00.480 --> 00:13:02.640
So one of the things
that we did as a

214
00:13:02.640 --> 00:13:06.810
precursor to working on servo
was actually we sponsored development

215
00:13:06.810 --> 00:13:10.110
on this language called rust,
which is a programming language

216
00:13:11.100 --> 00:13:14.940
that gives you what's called
fearless concurrency. Basically it takes

217
00:13:14.940 --> 00:13:17.400
care of making sure that
you don't have these kinds

218
00:13:17.400 --> 00:13:20.760
of bugs that you can
have in parallel code and

219
00:13:20.940 --> 00:13:23.160
make sure that your code
doesn't compile. If you do

220
00:13:23.160 --> 00:13:25.950
something that might lead to
one of those bugs. And

221
00:13:25.950 --> 00:13:29.460
so that's the way that
we can really be confident

222
00:13:29.850 --> 00:13:33.690
in the parallel code that
we're writing. I see. So

223
00:13:34.350 --> 00:13:36.390
no disrespect to see people.
I don't want to get

224
00:13:36.390 --> 00:13:39.570
letters from the, I don't
know the C mafia, but

225
00:13:39.690 --> 00:13:41.940
certainly it's C and C
plus plus have grown over

226
00:13:41.940 --> 00:13:44.280
the years. But it sounds
like I'm hearing you say

227
00:13:44.280 --> 00:13:48.210
that there's new languages rust
being of course the primary

228
00:13:48.210 --> 00:13:50.760
one that are coming along
in a world where we

229
00:13:50.760 --> 00:13:54.950
went from not one processor,
but like hyper threaded multiprocessors

230
00:13:54.950 --> 00:13:56.910
systems with, you know, even
though you might have a

231
00:13:56.910 --> 00:14:00.300
dozen or more potential processors
that you could run code

232
00:14:00.300 --> 00:14:03.030
on, it might be asking
a lot of CNC plus,

233
00:14:03.030 --> 00:14:05.340
plus to do that. So
why not just bake it

234
00:14:05.340 --> 00:14:09.210
in from the very beginning,
at the language level? Yeah.

235
00:14:09.210 --> 00:14:12.450
And make sure that it's
safe enough for your average

236
00:14:12.450 --> 00:14:15.270
developer to do, without having
to learn all of the

237
00:14:15.270 --> 00:14:18.630
nitty gritty memory stuff. Right.
Well, what's is great for

238
00:14:18.630 --> 00:14:21.060
an open source project because
you don't want to come

239
00:14:21.060 --> 00:14:24.240
into a C plus plus
w workflow that a hundred

240
00:14:24.240 --> 00:14:26.850
people are working on before
you and introduce some subtle

241
00:14:26.850 --> 00:14:30.210
bug that ruins it for
everybody. Yeah. One of our

242
00:14:30.210 --> 00:14:32.580
gecko engineers actually has a
sign that I think is

243
00:14:32.610 --> 00:14:35.490
like seven feet high that's
you must be this tall

244
00:14:35.490 --> 00:14:39.030
to write multi-threaded code. That
was of course before rust.

245
00:14:39.060 --> 00:14:42.540
But Yeah, thanks. I don't
know. I think people of

246
00:14:42.540 --> 00:14:44.490
all Heights should be able
to write multi-threaded code. So

247
00:14:44.490 --> 00:14:45.930
it's good to know that
you've done that. So it

248
00:14:45.930 --> 00:14:48.630
sounds like one of the
main aspects of quantum to

249
00:14:48.630 --> 00:14:53.090
get this, this high performance
is the parallelization at a

250
00:14:53.090 --> 00:14:56.450
level of parallelization. Maybe we
haven't seen before. And then

251
00:14:56.480 --> 00:14:58.640
one of the things I
was realizing, I saw a

252
00:14:58.640 --> 00:15:01.790
tweet recently when someone was
talking about their first video

253
00:15:01.790 --> 00:15:05.120
card and they talked to
me about their Vudu FX

254
00:15:05.540 --> 00:15:09.290
video. Carter was the first
3d accelerated video card. And

255
00:15:09.290 --> 00:15:13.520
it made me realize that
even my nontechnical parents have

256
00:15:13.670 --> 00:15:16.820
3d accelerated video cards that
they didn't even know, like

257
00:15:16.850 --> 00:15:20.660
the idea of even having
a GPU went from being

258
00:15:20.930 --> 00:15:24.950
an elite gamer thing to
being like anyone who has

259
00:15:24.950 --> 00:15:29.650
a pocket supercomputer. Totally. Yeah.
So that's another big project

260
00:15:29.650 --> 00:15:32.860
that we're going to be
working on. One of the

261
00:15:32.860 --> 00:15:35.740
things that we worked on
in servo is called web

262
00:15:35.740 --> 00:15:39.340
render. That's making better use
of the GPU because if

263
00:15:39.340 --> 00:15:42.040
you look at the way
that chips have been developing

264
00:15:42.310 --> 00:15:47.110
over the past few years,
they're not adding new CPU

265
00:15:47.110 --> 00:15:49.360
cores a lot of the
time as they get more

266
00:15:49.360 --> 00:15:53.050
space available on the chip,
they're expanding the GPU. So

267
00:15:53.050 --> 00:15:55.090
we need to make sure
that we're making the best

268
00:15:55.090 --> 00:15:58.480
of use of that GPU
in addition to parallelizing things

269
00:15:58.480 --> 00:16:03.850
across the CPU cores. So
that is going to take

270
00:16:03.850 --> 00:16:07.570
care of part of the
pipeline, the rendering engine pipeline.

271
00:16:08.110 --> 00:16:11.650
Basically when you, when you're
using the GPU, a lot

272
00:16:11.650 --> 00:16:14.740
of browsers actually do have
some stuff that they run

273
00:16:15.130 --> 00:16:18.040
on the GPU at this
point, there's GPU acceleration for

274
00:16:18.040 --> 00:16:20.650
things like composite. And that's
been in browsers for years,

275
00:16:21.640 --> 00:16:25.540
but Nvidia, who is one
of the major players in

276
00:16:25.540 --> 00:16:27.730
the GPU business. They actually
came out with a paper

277
00:16:27.730 --> 00:16:32.680
in 2012 saying that that's
not actually GPU. Acceleration is

278
00:16:33.070 --> 00:16:37.240
GPU assisted, not GPU accelerated
because browsers are not actually

279
00:16:37.240 --> 00:16:41.260
making the best use of
the GPU. A lot of

280
00:16:41.260 --> 00:16:44.380
times these browsers, what they're
using is called immediate mode.

281
00:16:44.860 --> 00:16:48.970
And so basically they're sending
commands. They're figuring out how

282
00:16:48.970 --> 00:16:51.490
the GPU should do things
and sending off commands to

283
00:16:51.490 --> 00:16:53.530
the GPU to tell the
GPU to do it. And

284
00:16:53.530 --> 00:16:56.950
the GPU is doing it
immediately. It's actually better. If

285
00:16:56.950 --> 00:16:59.980
you can just tell the
GPU what it should display,

286
00:17:00.010 --> 00:17:02.800
if you can just declare
that and ship off a

287
00:17:02.800 --> 00:17:05.290
graph of that to the
GPU and then let the

288
00:17:05.290 --> 00:17:08.710
GPU figure it out its
own work for itself. And

289
00:17:08.740 --> 00:17:11.230
to me as somebody who's
been involved in react, this

290
00:17:11.230 --> 00:17:13.840
actually reminds me a lot
of react. You know, it's

291
00:17:13.840 --> 00:17:17.950
the difference between when you
have a framework where you're

292
00:17:18.580 --> 00:17:21.280
telling you're interacting with these
dominoes and telling them what

293
00:17:21.280 --> 00:17:24.760
to do versus giving react
to this virtual Dom and

294
00:17:24.940 --> 00:17:26.950
react, figure out the most
efficient way to do the

295
00:17:26.950 --> 00:17:31.210
thing. Okay. That makes sense.
So then immediate mode is

296
00:17:31.210 --> 00:17:33.640
the, I thought about it,
put it in order and

297
00:17:33.640 --> 00:17:36.940
I gave you the GPU,
the procedures, and then the

298
00:17:36.940 --> 00:17:40.690
opposite of that is retained
mode where you give the

299
00:17:40.690 --> 00:17:44.560
GPO, you more responsibility. You
say here's a scene, figure

300
00:17:44.560 --> 00:17:48.580
it out. I know you're
good at that. Yeah. And

301
00:17:48.580 --> 00:17:53.400
so like, react, this actually
really simplifies things for us

302
00:17:53.400 --> 00:17:58.050
as browser developers. Basically it
means that, you know, one

303
00:17:58.050 --> 00:18:00.300
of the things that we've
worked on is basically just

304
00:18:00.300 --> 00:18:03.750
re rendering the whole thing
on each frame. And instead

305
00:18:03.750 --> 00:18:05.310
of, and that means that
you don't need to have

306
00:18:05.940 --> 00:18:07.530
currently in a lot of
browsers, there are these things

307
00:18:07.530 --> 00:18:10.920
called layers that try and
reduce the amount of things

308
00:18:10.920 --> 00:18:14.940
that need to change. But
with something like web render,

309
00:18:14.940 --> 00:18:18.930
you can just send off
the new scene graph to

310
00:18:18.930 --> 00:18:23.730
the GPU and then just
have it rerender. And we

311
00:18:23.730 --> 00:18:26.760
found with this, that, you
know, something that will run

312
00:18:26.760 --> 00:18:30.720
in Firefox or Chrome currently
at 15 frames per second,

313
00:18:31.080 --> 00:18:33.240
can run in web render
at 60 frames per second.

314
00:18:33.240 --> 00:18:38.360
No problem. Wow. It's very
interesting because I I've always

315
00:18:38.360 --> 00:18:40.460
felt even like, I'm on,
I'm on windows, you're on

316
00:18:40.460 --> 00:18:44.000
a Mac right now. If
I go and move my,

317
00:18:44.030 --> 00:18:46.880
you know, a couple of
windows around or minimize stuff,

318
00:18:47.480 --> 00:18:49.760
sometimes I've said to myself,
no, that doesn't really feel

319
00:18:49.760 --> 00:18:52.850
as smooth as like playing
a full on three D

320
00:18:52.850 --> 00:18:56.120
video game. I thought we
were supposed to have solved

321
00:18:56.120 --> 00:18:59.090
this problem. And it seems
like we still haven't treated

322
00:18:59.330 --> 00:19:03.500
can at that 2d environment
with the same care that

323
00:19:03.500 --> 00:19:06.140
we have as we're chasing
frames per second in the

324
00:19:06.140 --> 00:19:09.500
three D environment. Right. You
know, the, one of the

325
00:19:09.500 --> 00:19:12.890
main developers on web render
has actually said, we're basically

326
00:19:12.890 --> 00:19:16.430
creating a game engine here,
Which makes me wonder why

327
00:19:16.430 --> 00:19:20.210
we didn't do it before.
Yeah. Yeah. It's the folks

328
00:19:20.210 --> 00:19:21.770
on the servo team have
had a lot of really

329
00:19:21.770 --> 00:19:25.460
interesting insights. They've really been
looking at these trends and

330
00:19:25.460 --> 00:19:29.000
hardware, which I think is
what's, you know, you asked

331
00:19:29.000 --> 00:19:33.680
before about why we didn't
do this before. We weren't

332
00:19:33.680 --> 00:19:37.580
really looking at the capabilities
of the hardware as closely

333
00:19:37.580 --> 00:19:41.180
as we have been with
servo. That makes sense. So

334
00:19:41.180 --> 00:19:44.210
now we have everyone with
a, with a GPU of

335
00:19:44.210 --> 00:19:48.350
some kind, we have smarter
layers that we're sitting on

336
00:19:48.350 --> 00:19:51.110
top of, we have things
like open GL and we

337
00:19:51.110 --> 00:19:55.640
have Invidia and, and other
partners that, that know more.

338
00:19:55.640 --> 00:19:57.800
And we really are standing
on the shoulders of giants.

339
00:19:58.400 --> 00:20:02.960
Exactly. So people who are
working on Mozilla are these

340
00:20:02.960 --> 00:20:06.110
volunteers or these employees, or
what's your ratio of like

341
00:20:06.410 --> 00:20:10.190
random people like me to
employees, It's different for the,

342
00:20:10.200 --> 00:20:14.210
so servo really is still
its own project in emerging

343
00:20:14.210 --> 00:20:19.490
technologies. And then Firefox engineering
are the folks that are

344
00:20:19.760 --> 00:20:23.360
bringing the technology from servo
and putting it into Firefox.

345
00:20:24.230 --> 00:20:29.570
So servo itself, I think
that there's maybe 12 paid

346
00:20:29.570 --> 00:20:34.220
team members for servo and
then hundreds of contributors. And

347
00:20:34.220 --> 00:20:36.200
that really is meant to
be more of a community

348
00:20:36.200 --> 00:20:41.780
project, Firefox engineering. To be
honest, I actually don't know

349
00:20:41.780 --> 00:20:46.400
the ratio of paid engineers
to contributors on, on Firefox

350
00:20:46.400 --> 00:20:50.350
itself. The reason I ask
is that, you know, when

351
00:20:50.350 --> 00:20:54.340
you go to the Mozilla
Wiki, wiki.mozilla.com, you know, it's

352
00:20:54.340 --> 00:20:57.430
very welcoming in the sense
of, even though it's technical,

353
00:20:57.430 --> 00:21:01.180
it's like, Hey, look, we
have 13,000 plus, you know,

354
00:21:01.180 --> 00:21:03.730
unit tests or what they
call ref tests for the

355
00:21:03.730 --> 00:21:06.820
renderer. And there's 150 that
we're still working on. Why

356
00:21:06.820 --> 00:21:08.860
don't you go over to
this Google sheet and pick

357
00:21:08.860 --> 00:21:11.830
one? And it's like, wow,
that's like, I could do

358
00:21:11.830 --> 00:21:13.480
this. I could maybe go
and try to fix one

359
00:21:13.480 --> 00:21:16.660
of these, these issues. And
it's quite organized. And you

360
00:21:16.660 --> 00:21:19.030
go over to bug Zilla
and look at the dependency

361
00:21:19.030 --> 00:21:23.320
graph, and you can see
that there's, you know, three

362
00:21:23.320 --> 00:21:26.890
bugs that are blocking this
graph of other bugs. And

363
00:21:26.890 --> 00:21:29.650
you start to get a
sense of the organism that,

364
00:21:29.770 --> 00:21:33.000
that makes it all possible.
Yeah, definitely. That is one

365
00:21:33.000 --> 00:21:36.120
of the big focuses at
Mozilla is trying to make

366
00:21:36.120 --> 00:21:39.360
sure that contributors can take
a really active outside of,

367
00:21:39.750 --> 00:21:44.340
you know, non-paid contributors can
take an active role in

368
00:21:44.940 --> 00:21:49.530
defining how these different parts
work. And a lot of

369
00:21:49.530 --> 00:21:53.160
our employees actually do come
through basically start off with

370
00:21:53.160 --> 00:21:55.650
a bugger, to as contributors
and then get more and

371
00:21:55.650 --> 00:21:59.130
more involved that way. And
I guess that would be

372
00:21:59.130 --> 00:22:00.720
a, probably a good way
to eventually get a job

373
00:22:00.750 --> 00:22:04.380
if someone notices you. Yeah.
Yeah. So how do you,

374
00:22:05.370 --> 00:22:08.370
how do you deal with
this level of complexity and

375
00:22:08.370 --> 00:22:10.230
then trying to kind of
bubble it all the way

376
00:22:10.230 --> 00:22:13.530
back up to explaining it
in something like a cartoon,

377
00:22:13.800 --> 00:22:16.680
or I know that you're
an accomplished speaker, if it

378
00:22:16.680 --> 00:22:19.110
seems like you really have
one foot in the silicone

379
00:22:19.110 --> 00:22:22.260
and one foot in the,
you know, in the paint

380
00:22:22.260 --> 00:22:25.380
brush for lack of a
better word. Yeah, that's true.

381
00:22:25.860 --> 00:22:27.930
That's kind of the way
it's always been for me.

382
00:22:28.860 --> 00:22:30.600
My mom was the one
that first noticed that she

383
00:22:30.600 --> 00:22:33.240
was actually, so she was
a programmer on Apollo 11,

384
00:22:33.240 --> 00:22:38.730
so she understood code and
she noticed that I was

385
00:22:38.730 --> 00:22:42.570
really good at working with
basically visual language, although neither

386
00:22:42.570 --> 00:22:44.940
she, nor I understood what
that was at the time.

387
00:22:46.620 --> 00:22:49.860
And so she actually pushed
me to pursue both of

388
00:22:49.860 --> 00:22:53.160
those and actually picked out
my school for me. She,

389
00:22:53.220 --> 00:22:54.930
she said, you should go
to Carnegie Mellon. And I

390
00:22:54.930 --> 00:22:58.320
was like, okay, decision made.
So that made things really

391
00:22:58.320 --> 00:23:04.410
easy. And so that's that
school actually really focuses a

392
00:23:04.410 --> 00:23:07.530
lot on both tech, you
know, they have a great

393
00:23:07.530 --> 00:23:09.900
CS program and also they
have a world renowned design

394
00:23:09.900 --> 00:23:12.600
program. And so I took
classes in both of those.

395
00:23:12.600 --> 00:23:14.040
So I really have had
a foot in both of

396
00:23:14.040 --> 00:23:20.340
those worlds since, for a
long time. And I, you

397
00:23:20.340 --> 00:23:23.820
know, it's actually the most
fun thing for me is

398
00:23:24.150 --> 00:23:28.740
diving into the internals of
how something works and pulling

399
00:23:28.740 --> 00:23:31.470
it apart and figuring out
like how these different parts

400
00:23:31.470 --> 00:23:33.480
of the system work together
and is this the most

401
00:23:33.480 --> 00:23:36.810
optimal way for them to
fit together? And so with

402
00:23:36.810 --> 00:23:39.720
Coker tunes, that's the entire
thing. That's the whole deliverable,

403
00:23:39.720 --> 00:23:41.670
you know, when I'm working
as a developer, I have

404
00:23:41.670 --> 00:23:43.650
to do feature work and
all of that other kind

405
00:23:43.650 --> 00:23:46.310
of stuff. And I only
get to do analysis part

406
00:23:46.310 --> 00:23:48.170
of the time, but with
code cartoons, I really just

407
00:23:48.170 --> 00:23:52.040
get to make it all
figuring out how things work

408
00:23:52.040 --> 00:23:56.420
and how they could work
best together. So it's really

409
00:23:56.420 --> 00:23:58.750
a pleasure to be able
to do that all at

410
00:23:58.750 --> 00:24:01.450
the time. Yeah. And when
you're doing that, there's not

411
00:24:01.450 --> 00:24:04.420
just the bridging of the
artistic and the technical, but

412
00:24:04.420 --> 00:24:06.910
there's also the, kind of
the empathetic aspect of it

413
00:24:06.910 --> 00:24:09.220
because you have to put
yourself in the mind of

414
00:24:09.220 --> 00:24:12.100
the beginner and as you
go and explain something like,

415
00:24:12.550 --> 00:24:14.950
ah, here's an action call
back in Redux with bind

416
00:24:14.950 --> 00:24:17.800
action creators, and that's pretty
dry. You have to present

417
00:24:17.910 --> 00:24:19.750
it in such a way
that you keep their attention

418
00:24:19.750 --> 00:24:21.700
and that you think about
where they came from and

419
00:24:21.700 --> 00:24:24.760
where they're going. Yeah. One
way that I actually do

420
00:24:24.760 --> 00:24:28.030
that is by when I'm
drafting, I actually do it

421
00:24:28.030 --> 00:24:31.870
all in audio. I record
myself telling it to as

422
00:24:31.870 --> 00:24:34.000
if I were telling it
to someone instead of writing.

423
00:24:34.810 --> 00:24:38.440
And I find that just
like speaking aloud and envisioning

424
00:24:38.440 --> 00:24:41.770
the person that I'm talking
to helps me humanize it

425
00:24:41.770 --> 00:24:45.460
more. Really. Do you ever
do anything with the audio

426
00:24:45.460 --> 00:24:47.830
or do you just like
you listen to yourself, explain

427
00:24:47.830 --> 00:24:51.820
it to yourself? Well, I,
I have a transcription program

428
00:24:51.820 --> 00:24:53.950
that I can then transcribe
it and it does a

429
00:24:53.950 --> 00:24:56.980
pretty good job sometimes when
I'm saying really weird technical

430
00:24:56.980 --> 00:24:59.740
words, it comes up with
very bizarre interpretations of them.

431
00:25:00.010 --> 00:25:05.440
Yeah. I call those speechos
So yeah. Then from there

432
00:25:05.440 --> 00:25:08.560
I can, you know, block
it out into short paragraphs

433
00:25:08.560 --> 00:25:09.730
and then figure out where
I'm going to put the

434
00:25:09.730 --> 00:25:12.640
images. I actually will listen
to it back and then

435
00:25:12.640 --> 00:25:16.120
draw on PostIt notes, a
sketch of each image as

436
00:25:16.120 --> 00:25:18.640
I go through. And then
I can just take those

437
00:25:18.640 --> 00:25:21.010
off the wall when I
finished them and insert them

438
00:25:21.010 --> 00:25:23.860
into the written post. Hmm.
What do you ultimately do

439
00:25:23.860 --> 00:25:26.020
the cartoons in then? Do
you just copy the, you

440
00:25:26.020 --> 00:25:31.060
scan or copy the posted?
No, I, I use a

441
00:25:31.060 --> 00:25:36.310
Wacom Cintiq, which is really
key having a really good

442
00:25:36.670 --> 00:25:39.880
monitor that I can draw
on and get that immediate

443
00:25:39.880 --> 00:25:42.430
feedback as to whether or
not what I'm drawing. Cause

444
00:25:42.430 --> 00:25:45.040
I've, I used to have
a walk on bamboo where

445
00:25:45.040 --> 00:25:46.810
you have to look at
a screen, but you're drawing

446
00:25:46.810 --> 00:25:49.720
off to the side. That's
it? That's bad for you.

447
00:25:49.720 --> 00:25:52.600
Exactly. I have a cheap
Wacom as well, and it

448
00:25:52.600 --> 00:25:56.110
just, it's not, it's weird
to have your hand out

449
00:25:56.110 --> 00:25:57.640
of sight while you look
at a screen and then

450
00:25:57.640 --> 00:26:00.970
try to do all the
translation pixel by pixel. Interesting.

451
00:26:01.000 --> 00:26:04.810
Okay. So you, you're doing
the dev, you're doing the

452
00:26:04.810 --> 00:26:07.480
coding, you're doing the cartooning
all at the same time.

453
00:26:07.480 --> 00:26:10.150
It does that, that seems
like quite the context switch

454
00:26:10.600 --> 00:26:14.410
or do you, are you
multiprocessors yourself? Well, you know

455
00:26:14.410 --> 00:26:18.820
what? I'm actually very, very
single threaded myself. Fortunately, I

456
00:26:19.180 --> 00:26:21.310
am able to work from
home. I work remotely because

457
00:26:21.310 --> 00:26:24.760
Mozilla is a really that's
part of the culture there.

458
00:26:25.300 --> 00:26:28.780
And so I can really
focus and basically not have

459
00:26:28.780 --> 00:26:31.180
the context switching of having
people come and ask me

460
00:26:31.570 --> 00:26:34.780
questions and for meetings and
stuff like that. So it

461
00:26:34.780 --> 00:26:38.920
makes the context switching between,
you know, drawing things out

462
00:26:38.920 --> 00:26:41.890
and stepping through code and
all of that, a lot

463
00:26:41.890 --> 00:26:45.510
easier to handle. But yeah,
there is sometimes context switching

464
00:26:46.170 --> 00:26:48.630
problems, you know, cause it
is, it is very different

465
00:26:48.630 --> 00:26:51.600
when you're thinking about how
to explain it versus trying

466
00:26:51.600 --> 00:26:56.030
to integrate it into your
own understanding yourself. So when

467
00:26:56.030 --> 00:26:58.010
do you think that we
will be able to see

468
00:26:58.010 --> 00:27:00.230
quantum? Should we just get
the nightlys and kind of

469
00:27:00.230 --> 00:27:01.730
sit on it? Is this
something that's going to be

470
00:27:01.730 --> 00:27:04.100
like done when it's done
or is there a particular

471
00:27:04.100 --> 00:27:08.210
date where it will, we'll
all celebrate? Well, Firefox 57

472
00:27:08.210 --> 00:27:11.750
release is the one where
we were really pushing to

473
00:27:11.750 --> 00:27:15.080
make that be a very
noticeable performance difference. And that's,

474
00:27:16.580 --> 00:27:19.850
you're going to see that
as Firefox official release in

475
00:27:19.850 --> 00:27:22.610
November, but there are still
going to be other things

476
00:27:22.610 --> 00:27:24.980
that come after that release.
So web render, that's not

477
00:27:24.980 --> 00:27:27.860
going to be that, that
use of the GPO. That's

478
00:27:27.860 --> 00:27:30.410
not going to be there
in 57, that's going to

479
00:27:30.410 --> 00:27:33.380
come later. So we expect
that people are going to

480
00:27:33.380 --> 00:27:35.480
see a big difference in
November, but they're going to

481
00:27:35.480 --> 00:27:38.000
continue to see more and
more performance improvements. Even after

482
00:27:38.000 --> 00:27:42.830
that. Very cool. I saw
a really interesting article in

483
00:27:42.830 --> 00:27:45.020
a, in ZD net that
said why you should root

484
00:27:45.020 --> 00:27:47.990
for Mozilla's Firefox. And there's
a lot of people talking

485
00:27:47.990 --> 00:27:52.190
about what they call browser
monoculture and how we may

486
00:27:52.190 --> 00:27:54.500
have felt weird during kind
of the quote unquote browser

487
00:27:54.500 --> 00:27:57.680
Wars, but it made the
web better. Do you think

488
00:27:57.680 --> 00:27:59.810
that we should just have
one browser to rule them

489
00:27:59.810 --> 00:28:01.100
all? Or do you think
that there's something to be

490
00:28:01.100 --> 00:28:03.230
said for us to all
push on each other in

491
00:28:03.230 --> 00:28:06.320
a friendly way? Oh, I
definitely think that having the

492
00:28:06.320 --> 00:28:10.370
browser competition, having a browser
landscape that has multiple browsers

493
00:28:10.400 --> 00:28:14.390
is very important to making
sure that we keep the

494
00:28:14.390 --> 00:28:18.110
web as a platform that's
not owned by any one

495
00:28:18.110 --> 00:28:22.160
corporation, because I think we've
seen what happens when you

496
00:28:22.160 --> 00:28:26.900
allow information to be owned
by a single corporation. And

497
00:28:26.900 --> 00:28:29.870
we're seeing it more and
more. I don't think that's

498
00:28:29.870 --> 00:28:32.060
the future that we want
for the web. And so

499
00:28:32.840 --> 00:28:36.440
I'm really glad that we
have had this focus on

500
00:28:37.310 --> 00:28:40.760
improving Mozilla's performance and making
sure that it's still a

501
00:28:40.760 --> 00:28:43.910
browser that is, you know,
that people really, really want

502
00:28:43.910 --> 00:28:48.110
to use because it's important
for Firefox to be there,

503
00:28:48.920 --> 00:28:54.110
to keep that browser competition
going. Yeah, I definitely agree.

504
00:28:54.110 --> 00:28:56.300
I mean, even though I
could say in my day

505
00:28:56.300 --> 00:28:58.880
job I work at, at
Microsoft, I've got all the

506
00:28:58.880 --> 00:29:01.820
browsers pinned and I want
to bounce between them. And

507
00:29:01.820 --> 00:29:04.070
sometimes I'll just use a
browser and spend some time

508
00:29:04.070 --> 00:29:07.310
there and ultimately, you know,
you've got a good browser

509
00:29:07.310 --> 00:29:10.460
if the browser itself disappears
and you just forget what

510
00:29:10.460 --> 00:29:12.230
you're running and you're just
on the web and you're

511
00:29:12.230 --> 00:29:17.030
having a good experience. Do
you think that Mozilla would

512
00:29:17.030 --> 00:29:19.700
be a project that people
could get involved in? Are

513
00:29:19.700 --> 00:29:23.210
there particular things that from
an open source contributor perspective,

514
00:29:23.210 --> 00:29:25.670
you're looking for, like you
need experts in 3d or

515
00:29:25.670 --> 00:29:30.380
in gaming or testers or
documenters? Well, there's really, there's

516
00:29:30.380 --> 00:29:36.410
definitely needs across all of
those and different parts of

517
00:29:36.410 --> 00:29:39.530
the project, you know, or
working with different tools. So

518
00:29:39.530 --> 00:29:43.030
if you like get, you
might want to work on

519
00:29:43.030 --> 00:29:48.070
the server side of things,
if you're familiar with material

520
00:29:48.430 --> 00:29:51.040
and you know, if you
want to work in C

521
00:29:51.040 --> 00:29:53.050
plus, plus you might want
to work on the gecko

522
00:29:53.050 --> 00:29:58.450
side of things. So different
parts of the project are

523
00:29:58.480 --> 00:30:01.120
good for people who have
different skill sets. But yeah,

524
00:30:01.120 --> 00:30:03.970
we're definitely looking for people
who are wanting to contribute

525
00:30:04.240 --> 00:30:06.840
in a whole different variety
of ways. So I went

526
00:30:06.840 --> 00:30:10.050
to wiki.mozilla.org and just scroll
to the bottom. And there's

527
00:30:10.050 --> 00:30:12.750
a whole section that it
says contributing to Mozilla. And

528
00:30:12.750 --> 00:30:16.290
you even have a student
ambassadors program that people could

529
00:30:16.290 --> 00:30:19.440
probably communicate with you or
other Mozilla employees on Twitter

530
00:30:19.440 --> 00:30:22.680
and learn more about that
for sure. So we can

531
00:30:22.680 --> 00:30:27.030
find you@hacksdotmozilla.org. We can learn
more about Mozilla and the

532
00:30:27.030 --> 00:30:32.880
project itself at, at wiki.mozilla.org.
Of course, download Firefox and

533
00:30:32.880 --> 00:30:37.500
get ready for Firefox 57
coming later this year. Great.

534
00:30:37.530 --> 00:30:40.260
Thank you for having me,
Scott. Thanks for hanging out

535
00:30:40.260 --> 00:30:43.500
with me today. This has
been another episode of Hansel

536
00:30:43.500 --> 00:30:45.480
minutes. We'll see you again
next week.

