WEBVTT FILE

1
00:00:00.510 --> 00:00:04.260
Hey folks. Today's episode was
sponsored by Datadog it's. A

2
00:00:04.260 --> 00:00:08.460
cloud scale monitoring and analytics
platform. Datadog was built to

3
00:00:08.460 --> 00:00:12.540
bring clarity to complex dynamic
applications in the cloud, on

4
00:00:12.540 --> 00:00:16.890
premises in containers or wherever
they run with beautiful dashboards,

5
00:00:17.040 --> 00:00:21.360
distributed tracing, and seamless integrations
with more than 200 technologies,

6
00:00:21.810 --> 00:00:26.220
including Azure and Docker and
PagerDuty Datadog provides deep end

7
00:00:26.220 --> 00:00:28.890
to end visibility into the
health and performance of modern

8
00:00:28.890 --> 00:00:33.330
apps. Visualize key metrics, set
alerts to identify anomalies and

9
00:00:33.330 --> 00:00:36.600
collaborate with your team to
troubleshoot and fix issues fast.

10
00:00:37.110 --> 00:00:39.360
I'd like you to try
it yourself by starting a

11
00:00:39.360 --> 00:00:43.320
free 14 day trial today,
listeners of this podcast will

12
00:00:43.320 --> 00:00:49.560
also get a free Datadog
t-shirt get started at bitly.com/data

13
00:00:49.560 --> 00:01:09.110
dog shirt. That's bitly.com/datadog shirt,
Friends. This is Scott Hanselman.

14
00:01:09.110 --> 00:01:12.050
This is another episode of
Hansel minutes today. I'm talking

15
00:01:12.050 --> 00:01:16.070
with Christoph Cieslak who works
on the safe stack. S

16
00:01:16.070 --> 00:01:20.020
a F E. How are
you? I'm fine. Thanks. Thanks

17
00:01:20.210 --> 00:01:23.360
for having me. Yeah, no
worries. So the S we've

18
00:01:23.360 --> 00:01:29.000
heard about the lamp stack
Linux and Apache, and what

19
00:01:29.000 --> 00:01:33.950
is the safe stack? So
safe stack is similar technology

20
00:01:33.950 --> 00:01:40.490
stack, just built from the
F sharp technologies and F

21
00:01:40.490 --> 00:01:45.740
sharp.net functional first programming language.
And on our webpage, we

22
00:01:45.740 --> 00:01:50.750
have this soft speech, which
says basically SciFest and functional

23
00:01:50.750 --> 00:01:55.310
first stock for cloud ready
web development, that focus on

24
00:01:55.310 --> 00:01:58.160
type safe programming. And that's
like a lot of buzzwords.

25
00:01:58.160 --> 00:02:01.820
And I guess we can
go deeper into that in

26
00:02:01.820 --> 00:02:06.560
a moment. Well, the, the,
if someone is listening to

27
00:02:06.560 --> 00:02:10.130
this show, they may be
a C sharp programmer, and

28
00:02:10.130 --> 00:02:12.680
they probably just load up
visual studio, go file new

29
00:02:12.680 --> 00:02:17.630
project. And they probably use
asp.net MVC. So they're familiar

30
00:02:17.630 --> 00:02:21.860
with the model view controller,
but, you know, there's, some

31
00:02:21.860 --> 00:02:25.220
people will change that they'll
use open source software and

32
00:02:25.220 --> 00:02:27.260
add to it. But I
think there are a group

33
00:02:27.260 --> 00:02:31.520
of people that accept the
defaults. And I think that

34
00:02:31.700 --> 00:02:34.670
the safe stack is great
because it's none of the

35
00:02:34.670 --> 00:02:38.360
defaults, isn't it? Yeah. It's
like, it's all the parts.

36
00:02:38.360 --> 00:02:41.840
Well, all the parts of
Asia, which is a, in

37
00:02:41.840 --> 00:02:47.330
our safe acronym, it's like
open source technology built by

38
00:02:47.420 --> 00:02:51.290
an affluent community. So maybe
I will go like letter

39
00:02:51.290 --> 00:02:54.020
by letter and say, what
are the technologies we use?

40
00:02:54.890 --> 00:03:02.220
So S S suave it's
Web library, backend web library

41
00:03:02.230 --> 00:03:06.280
and implementation of web server,
which is basically what, or

42
00:03:06.310 --> 00:03:08.800
whatever, everything that you need
to put on the backend

43
00:03:09.100 --> 00:03:12.760
then a, is Asia for
the hosting, because like we

44
00:03:12.760 --> 00:03:16.060
live in the.net world and
Asia is great fit for

45
00:03:16.060 --> 00:03:20.800
the hosting.net applications. Then we
have F F S N

46
00:03:21.130 --> 00:03:25.660
fable fable is F set
up to JavaScript compiler. And

47
00:03:25.690 --> 00:03:28.420
I know that you had
episode with Alfonzo couple of

48
00:03:28.420 --> 00:03:33.550
weeks ago who created fiber.
So that's great technology that

49
00:03:33.640 --> 00:03:37.540
enables us to write extra
code and Tran this extra

50
00:03:37.570 --> 00:03:42.100
code in the browser. And
then he is a L

51
00:03:42.100 --> 00:03:46.690
Mitch Elvis is a F
sharp implement fable F sharp

52
00:03:46.690 --> 00:03:51.640
implementation of so-called Elm architecture.
And that's like, just not

53
00:03:51.640 --> 00:03:54.730
going too deep into details,
but that's just UI library.

54
00:03:54.730 --> 00:03:58.450
We, we use and we
recommend for everyone because we

55
00:03:58.450 --> 00:04:02.080
think that it's good UI
way to build UI in

56
00:04:02.080 --> 00:04:05.460
the browser. Okay. So let's
dig into these a little

57
00:04:05.460 --> 00:04:09.660
bit at a time. So
suave is a lightweight nonblocking

58
00:04:09.660 --> 00:04:15.150
web server. Isn't Kestrel, a
web server. Ah, yes, indeed.

59
00:04:15.330 --> 00:04:20.430
Castro is also lightweight nonblocking
<inaudible>, which is really good.

60
00:04:21.440 --> 00:04:24.060
The difference is that swath
was created before the, there

61
00:04:24.060 --> 00:04:29.090
was even an idea for
the Castro, or maybe, I

62
00:04:29.090 --> 00:04:31.950
don't know the dates, it's
like older technology than, than,

63
00:04:31.950 --> 00:04:36.240
than the.net Corey and the
Castro. So it's been around

64
00:04:36.240 --> 00:04:40.170
for a couple of years
right now. So, so that's

65
00:04:40.170 --> 00:04:45.690
why we use that, but
also after community created another

66
00:04:45.690 --> 00:04:51.090
great project called giraffe, which
is implementation of same programming

67
00:04:51.150 --> 00:04:55.480
model as in suave, just
on top of Castro and

68
00:04:55.500 --> 00:05:02.220
isp.net code. So you can
take your basically similar helper

69
00:05:02.220 --> 00:05:05.970
functions and similar building blocks
that you use in suave

70
00:05:05.970 --> 00:05:08.700
and put them on top
of the, of the asp.net

71
00:05:08.730 --> 00:05:14.780
core, if you prefer doing
Oh, okay. Now suave, does

72
00:05:14.780 --> 00:05:18.450
suave use a live UV
underneath it? Or what is

73
00:05:18.450 --> 00:05:22.170
the socket library? Yeah, I
believe that for Dalenex it

74
00:05:22.170 --> 00:05:29.580
your sleep UV? Okay. So
giraffe is a again, functional

75
00:05:29.580 --> 00:05:32.340
web framework for F sharp
developer built on top of

76
00:05:32.340 --> 00:05:36.540
Kestrel. Could I have the
safe stack or the, I

77
00:05:36.540 --> 00:05:39.300
don't know what it would
be GAF E GAF stack.

78
00:05:39.330 --> 00:05:41.070
Could I swap them out
or is it not quite

79
00:05:41.070 --> 00:05:45.030
as easy as swapping? Yeah,
you totally could swap those

80
00:05:45.030 --> 00:05:49.050
things out. Actually you can
swap probably every part of

81
00:05:49.050 --> 00:05:51.270
safe stack. If you, if
you want, just like with

82
00:05:51.270 --> 00:05:56.570
lamp stack, people were swapping
like B man, like ADA

83
00:05:56.570 --> 00:06:01.520
or PHP, Python, or battle,
whatever people wanted to use.

84
00:06:01.850 --> 00:06:04.670
We've saved stock. You can,
you can do for the

85
00:06:04.670 --> 00:06:08.090
first letter, you can do
SWAT for the giraffe, for

86
00:06:08.090 --> 00:06:11.480
the AE. You can do
Asia, or maybe you want

87
00:06:11.480 --> 00:06:16.370
to do hosting on AWS.
And then for the front

88
00:06:16.370 --> 00:06:21.320
end things, we recommend using
fable as an F sort

89
00:06:21.320 --> 00:06:25.250
of way. But as well,
you can use something else.

90
00:06:25.250 --> 00:06:29.170
If you prefer to write
normal JavaScript, What, what do

91
00:06:29.170 --> 00:06:31.030
you think is going on
in the community? That's so

92
00:06:31.030 --> 00:06:34.330
exciting that gives us so
many choices. Like, I think

93
00:06:34.330 --> 00:06:37.450
it's great now. Like we
went from having only IIS

94
00:06:37.450 --> 00:06:41.110
to choose from, and now
we've got all these different

95
00:06:41.110 --> 00:06:43.150
things. Like it doesn't have
to be just Kestrel or

96
00:06:43.150 --> 00:06:46.600
just suave or just draft,
like, it's so cool that

97
00:06:46.600 --> 00:06:50.380
we have choices now. And
I want, like, I want

98
00:06:50.380 --> 00:06:52.720
like the corporate developer to
know that it's good to

99
00:06:52.720 --> 00:06:55.000
have choices. Like there has,
doesn't have to be a

100
00:06:55.000 --> 00:06:59.620
winner. I think that, well,
there are two, two sides

101
00:06:59.630 --> 00:07:02.260
of this question. First of
all, the, if we talk

102
00:07:02.290 --> 00:07:05.800
just about F sort of
community after community was always

103
00:07:06.190 --> 00:07:09.640
focused, bit more on the
open sort of side of

104
00:07:09.640 --> 00:07:14.470
things. And like sub competitor
was open source before the,

105
00:07:14.750 --> 00:07:19.740
the C-sharp competitor was open
source. There was excerpts after

106
00:07:19.740 --> 00:07:23.200
the foundation was created before
the dotnet software, the foundation.

107
00:07:23.620 --> 00:07:28.120
So I've of always was
this pushing forward boundary of

108
00:07:28.120 --> 00:07:32.950
open source in dotnet ecosystem,
answering the other part about

109
00:07:32.950 --> 00:07:37.120
general.net ecosystem and some model
choices in, in that I

110
00:07:37.120 --> 00:07:40.930
think that with this whole
change of Microsoft being more

111
00:07:40.930 --> 00:07:44.260
friendly to open source in
general, it just encourages people

112
00:07:44.260 --> 00:07:48.340
to, to build cool stuff
on.net. And if people build

113
00:07:48.340 --> 00:07:51.040
cool, cool stuff on the
internet, other people are starting

114
00:07:51.040 --> 00:07:55.270
to use it. And we
have this nice raving ecosystem.

115
00:07:56.740 --> 00:07:59.530
Why do you think that
the F sharp community was

116
00:07:59.530 --> 00:08:02.320
so open source? Like from
the beginning, because it was

117
00:08:02.380 --> 00:08:05.680
like in the early 2000
tens it's it's been years

118
00:08:05.680 --> 00:08:07.900
and years and years, they
have shop communities being been

119
00:08:07.900 --> 00:08:11.530
pushing open source. Right. 2005
was when F sharp came

120
00:08:11.530 --> 00:08:16.360
out. Yes. And even back
then in 2005, when AFTRA

121
00:08:16.390 --> 00:08:20.020
came out, the F set
up compiler was released together

122
00:08:20.020 --> 00:08:22.510
with its sort of scout.
So that was like in

123
00:08:22.510 --> 00:08:26.680
2005, you could download the
source code of f-stop compiler

124
00:08:26.680 --> 00:08:31.240
and compile that. And that
was like something that no

125
00:08:31.240 --> 00:08:36.370
other Microsoft product did back
then. I think that's lot

126
00:08:36.460 --> 00:08:40.480
of, lot of this push
towards open source was cost.

127
00:08:40.480 --> 00:08:44.950
First of all, thanks to
Don Syme, who was designer

128
00:08:44.950 --> 00:08:48.010
of the, of the language
and who really understood how,

129
00:08:48.730 --> 00:08:53.110
how much importance community can
have. And, and because he

130
00:08:53.110 --> 00:08:56.700
had also some different backgrounds
than only dotnet, he has

131
00:08:56.700 --> 00:09:00.510
seen how, how it works
out in other ecosystems. Other

132
00:09:00.510 --> 00:09:04.860
thing is the lot of
people were really excited about

133
00:09:05.070 --> 00:09:11.880
Chabad. Microsoft support for EFSF
was not always so good

134
00:09:11.940 --> 00:09:14.550
as for the C sharp
visual basic, and people were

135
00:09:14.550 --> 00:09:18.210
kind of forced into building
their own tools, their own

136
00:09:18.240 --> 00:09:22.900
ecosystem. And that's why that's
how, how it started. And

137
00:09:24.150 --> 00:09:26.490
I joined, I joined AFTRA
community a bit later than

138
00:09:26.490 --> 00:09:29.880
that. And that was like
doing open source was just

139
00:09:29.880 --> 00:09:34.050
default default behavior when I
started doing F sharp. So

140
00:09:34.890 --> 00:09:38.100
people I knew from the
internet and people who I've

141
00:09:38.100 --> 00:09:41.160
seen under conferences, and I've
met them personally, they were

142
00:09:41.160 --> 00:09:44.280
just doing open source. So
when I've joined the community,

143
00:09:44.280 --> 00:09:48.090
it was like, Oh, I
guess that's how I've sort

144
00:09:48.090 --> 00:09:51.330
of people at all. So
that's what we do. Yeah.

145
00:09:51.440 --> 00:09:53.120
That's a really good point.
I think that there's a

146
00:09:53.120 --> 00:09:56.900
couple of things there to
parse first that Don Syme

147
00:09:56.990 --> 00:10:00.770
was out of Microsoft research.
So kind of F sharp

148
00:10:00.770 --> 00:10:03.230
kind of like snuck out
of research because it's like,

149
00:10:03.230 --> 00:10:05.150
Hey, look at this cool
research thing that we're doing

150
00:10:05.660 --> 00:10:09.500
while the P the product
people at Microsoft were off

151
00:10:09.500 --> 00:10:13.280
trying to focus on products
while Don was just making

152
00:10:13.280 --> 00:10:15.590
something, you know, that was
cool and amazing. And like

153
00:10:15.590 --> 00:10:20.600
you said, open source by
default. And while dotnet core

154
00:10:20.600 --> 00:10:24.170
is open source by default
now you've got a tenure

155
00:10:25.730 --> 00:10:28.760
tenure jumpstart with F sharp,
right. Everything's been opened by

156
00:10:28.760 --> 00:10:32.990
default as a community for
a decade or longer. Yes,

157
00:10:33.020 --> 00:10:36.140
indeed. And I really believe
that's, that's like one of

158
00:10:36.140 --> 00:10:42.110
the huge parts of success
in comparison to some other

159
00:10:42.110 --> 00:10:45.170
languages that we have. On
the one hand, we have

160
00:10:45.170 --> 00:10:50.990
this strong induced, industrial already
ecosystem of dotnet net and,

161
00:10:51.230 --> 00:10:54.980
and in general Microsoft stack.
But, but then at the

162
00:10:54.980 --> 00:10:58.790
same time, we have all
many great people doing, doing

163
00:10:59.030 --> 00:11:02.450
their own things, open source
things, and then community supporting

164
00:11:02.480 --> 00:11:05.150
this open source things. And
I think that's, that's really

165
00:11:05.150 --> 00:11:09.170
great and helpful for just
creating courage ecosystem one where

166
00:11:09.170 --> 00:11:14.480
people can choose whatever fits
they need. Yeah, exactly. And

167
00:11:14.480 --> 00:11:16.820
that's a really good point,
I would say. And maybe

168
00:11:16.820 --> 00:11:19.790
you would agree F sharp
really was about choice from

169
00:11:19.790 --> 00:11:22.820
the beginning, because, you know,
in 2005, you didn't have

170
00:11:22.820 --> 00:11:25.070
to use visual studio use
Emacs if it makes you

171
00:11:25.070 --> 00:11:28.760
happy. Right? Like they had
support for editors years and

172
00:11:28.760 --> 00:11:33.590
years before other, you know,
before C sharp and Omni

173
00:11:33.590 --> 00:11:36.350
sharp happen. You've got support
for VIM and Emacs and

174
00:11:36.350 --> 00:11:38.990
sublime. And, you know, I,
and I had for Adam

175
00:11:38.990 --> 00:11:41.420
and visual studio code, like
any editor anywhere at all,

176
00:11:41.420 --> 00:11:45.380
you can do do this.
And also didn't have sharp

177
00:11:45.380 --> 00:11:50.200
starts supporting mano very early.
Yes. I think that, that,

178
00:11:50.210 --> 00:11:54.250
like back home just a
couple years after the first

179
00:11:54.460 --> 00:11:57.640
release of F shrub, there
was huge effort also from

180
00:11:57.640 --> 00:12:02.170
community to, to port F
sharp, to mano, and like

181
00:12:02.200 --> 00:12:04.870
Dave Thomas, who is like,
I've set up an NVP

182
00:12:04.870 --> 00:12:09.280
and worked for Zamani studio
for Xamarin for awhile, did

183
00:12:09.460 --> 00:12:13.300
great, great job of product
piloting F sharp to the,

184
00:12:13.360 --> 00:12:17.320
to the mono and also
to the iOS and, and

185
00:12:17.500 --> 00:12:20.770
all these different devices that,
that with some money and

186
00:12:20.770 --> 00:12:24.990
supports, Let's pivot a little
bit. And explain to me

187
00:12:24.990 --> 00:12:28.530
the relationship between suave and
<inaudible> like, what is the

188
00:12:28.530 --> 00:12:33.930
responsibility of each of those
two pieces? So Esther challis

189
00:12:33.930 --> 00:12:40.050
swath is our backend. Usually
we suggest people try to

190
00:12:40.050 --> 00:12:44.730
just some kind of API,
like crest, API APIs with

191
00:12:44.730 --> 00:12:50.610
it, and then fable and
El Mitch are the part

192
00:12:50.610 --> 00:12:54.450
that's responsible for doing the
UI in the browser. So

193
00:12:54.480 --> 00:12:58.500
they are responsible for creating
single page applications that looks

194
00:12:58.500 --> 00:13:00.630
nice and tend to have
like all the form of

195
00:13:00.630 --> 00:13:04.470
Santa and, and all the
stuff. So basically swath is

196
00:13:04.470 --> 00:13:08.160
a backend and then fable
and omission is a front

197
00:13:08.160 --> 00:13:11.580
end off of our stack.
I see. Would you say

198
00:13:11.600 --> 00:13:15.240
suave, something that has views
like MVC, or is swab

199
00:13:15.270 --> 00:13:20.460
primarily about web APIs? A
suave can do views like

200
00:13:20.460 --> 00:13:24.540
MVC, but from what I've
noticed in both like my

201
00:13:24.570 --> 00:13:28.020
open source journey and, and
like Mark my commercial projects,

202
00:13:28.350 --> 00:13:33.300
people usually use suave as
just API as a way

203
00:13:33.300 --> 00:13:37.320
to, to just cost and
API and points. So just

204
00:13:37.320 --> 00:13:40.650
set up some data in
Jason or XML, and then

205
00:13:40.650 --> 00:13:44.700
build client side views, client
side applications on top of

206
00:13:44.700 --> 00:13:49.230
that. Okay. So then LMS
is the, is the pattern,

207
00:13:49.230 --> 00:13:52.170
it's the abstractions that you
need to do? You're, you're

208
00:13:52.170 --> 00:13:55.200
not model view controller, but
model view, updates style, the

209
00:13:55.200 --> 00:13:59.670
way that the Elm people
do it. Yes, indeed. The,

210
00:14:00.420 --> 00:14:02.850
I guess the, the call
pattern was known for a

211
00:14:02.850 --> 00:14:06.660
while. And like, as you
said, it's model view update,

212
00:14:07.890 --> 00:14:12.960
but everyone calls it is
because probably the most, one

213
00:14:12.990 --> 00:14:19.050
of the first really successful
implementations of this pattern. I

214
00:14:19.050 --> 00:14:23.550
know that nowadays, if you
do modern JavaScript with react

215
00:14:23.550 --> 00:14:28.200
to JS and reduced JS,
you basically implement the same

216
00:14:28.260 --> 00:14:31.590
model view, update pattern just
in bit more complex way.

217
00:14:31.920 --> 00:14:36.480
But also if you do
some maybe desktop applications using

218
00:14:37.950 --> 00:14:42.480
reactive extensions, the resulted code
can look really similar to

219
00:14:42.480 --> 00:14:47.670
the, to the model view,
update pattern. So maybe going

220
00:14:47.730 --> 00:14:50.790
a bit more into this
model view update, the pattern

221
00:14:50.790 --> 00:14:55.880
is simple. Model is just
a simple, plain type that

222
00:14:56.270 --> 00:15:01.100
class that represents the, the
state of your application, then

223
00:15:01.400 --> 00:15:06.840
view is an function that
takes existing model. That takes

224
00:15:06.840 --> 00:15:10.820
some message, some, something that
happens in your application and

225
00:15:10.820 --> 00:15:16.970
produces new model representing new
state of your application. And

226
00:15:17.390 --> 00:15:20.750
that was update. And the
view view is basically also

227
00:15:20.750 --> 00:15:25.790
simple function that takes model
current state of your application

228
00:15:26.270 --> 00:15:31.130
and prints out some HTML
or whatever or whatever. And

229
00:15:31.130 --> 00:15:34.550
during QS, in case of
El Mitch in Fibo, we

230
00:15:34.550 --> 00:15:38.780
use a usual year react,
a surrendering engine. So we

231
00:15:38.780 --> 00:15:44.810
built also on the industry
ready and battle-tested solution from

232
00:15:44.840 --> 00:15:50.860
Facebook. Hey friends, a quick
word from our sponsor progress.

233
00:15:50.860 --> 00:15:53.860
Telerik wants to send someone
to the build conference. So

234
00:15:53.860 --> 00:15:56.770
they're having a contest. Step
one is to sign up,

235
00:15:56.770 --> 00:15:59.800
to learn about the new,
innovative, modern UI tools that

236
00:15:59.800 --> 00:16:02.680
there'll be announcing at build.
And by registering, you'll be

237
00:16:02.680 --> 00:16:05.920
entered to win a full
conference pass to Microsoft build,

238
00:16:06.130 --> 00:16:10.510
plus a $500 travel stipend.
They're also giving away three

239
00:16:10.510 --> 00:16:13.960
Tellerik dev craft UI licenses.
All you have to do

240
00:16:13.960 --> 00:16:19.450
is register at build contest
dot plop that's PW, Oop,

241
00:16:19.540 --> 00:16:25.270
dot me. That's built contest
dot <inaudible> dot me progress

242
00:16:25.270 --> 00:16:28.420
offers the leading platform for
developing and deploying mission, critical

243
00:16:28.420 --> 00:16:31.600
business applications, and that they
are the creator of the

244
00:16:31.600 --> 00:16:36.010
award winning tellerik.net and Kendo,
UI JavaScript, user interface controls.

245
00:16:36.400 --> 00:16:39.100
They have reporting solutions and
productivity tools and all the

246
00:16:39.100 --> 00:16:42.700
tools that developers need to
build high performance, modern apps

247
00:16:42.700 --> 00:16:47.170
without standing UI go now
to build contest dot <inaudible>

248
00:16:47.290 --> 00:16:50.830
dot me that's PW, Oop,
dot me, and sign up

249
00:16:50.830 --> 00:16:54.820
to win. Okay. So let
me see if I understand

250
00:16:54.820 --> 00:17:01.810
this because, because web applications
that interact with humans go

251
00:17:01.810 --> 00:17:04.720
through state, they have to
go through multiple States like

252
00:17:04.720 --> 00:17:07.750
you're in the login state,
or you're in the creating

253
00:17:07.750 --> 00:17:10.330
objects state. You know, that
that state is a part

254
00:17:10.330 --> 00:17:14.650
of human's life, but in
F sharp, you know, you're

255
00:17:14.650 --> 00:17:18.640
not just assigning variables and
changing state you're, you have

256
00:17:18.640 --> 00:17:21.310
to create these immutable things,
right? So you're moving through

257
00:17:21.310 --> 00:17:24.880
these different States. You're finding
a balance between the state

258
00:17:24.880 --> 00:17:27.610
of the UI and state,
as it is represented in

259
00:17:27.610 --> 00:17:31.330
F sharp and model view
update means that the model

260
00:17:31.330 --> 00:17:33.940
keeps changing and new instances
of the model kind of

261
00:17:33.940 --> 00:17:39.490
March forward. Is that correct?
Yes. That's basically the, the

262
00:17:39.490 --> 00:17:43.300
really good description of the
pattern. What's really nice about,

263
00:17:43.300 --> 00:17:47.410
about the El Misha implementation
in Fibo. And what's really

264
00:17:47.410 --> 00:17:52.260
nice also about Elm implement
original element implementation is that

265
00:17:52.890 --> 00:17:56.220
both of those implementations basically
hide the fact that you

266
00:17:56.220 --> 00:17:59.760
have some mutable state under
the hood, because, well, as

267
00:17:59.760 --> 00:18:03.270
you've said, the applications are
mutable that the bros are

268
00:18:03.960 --> 00:18:09.000
like dumb. The model is
mutable. So web applications are

269
00:18:09.000 --> 00:18:13.620
just immutable applications, and we
kinda cannot work around that,

270
00:18:14.220 --> 00:18:18.200
but we can hide this
mutable state under the there's

271
00:18:18.200 --> 00:18:21.150
some framework that we built.
And El Mitch is this,

272
00:18:21.360 --> 00:18:24.510
this framework, that two that
we used it from point

273
00:18:24.510 --> 00:18:30.210
of view of F sharp
developer, both view and update

274
00:18:30.210 --> 00:18:34.110
functions are just pure functions
that just takes one, one

275
00:18:34.110 --> 00:18:39.330
data and outputs. Some other
data don't perform really side-effects.

276
00:18:40.110 --> 00:18:44.640
And so don't do some
magical stuff and don't mutate

277
00:18:44.850 --> 00:18:48.750
new some global variables or
anything like that. And the

278
00:18:48.750 --> 00:18:55.830
whole rendering views and changing
your real state of application.

279
00:18:55.830 --> 00:18:59.910
That's saved. Someone is handled
by, by both Elemis and

280
00:19:00.000 --> 00:19:03.140
react to JS. I see.
Okay. So if you, if

281
00:19:03.140 --> 00:19:05.990
you want to hurt yourself,
you could potentially hurt yourself

282
00:19:05.990 --> 00:19:08.930
by writing your own JavaScript,
but can you write a

283
00:19:08.930 --> 00:19:12.830
safe application and an Elvish
application only with F sharp,

284
00:19:12.860 --> 00:19:17.540
never writing any custom JavaScript
of your own? Yes, yes.

285
00:19:17.570 --> 00:19:22.160
Basically from point of view
of normal user that just

286
00:19:22.190 --> 00:19:27.680
do an, a simple single
page application. You just create

287
00:19:27.690 --> 00:19:31.580
new new application from dotnet
new template, and then you

288
00:19:31.600 --> 00:19:35.450
write plain functions and that's
all, that's all you need.

289
00:19:36.290 --> 00:19:39.980
Wow. When I hear as
a, you know, maybe I'm

290
00:19:39.980 --> 00:19:42.560
not an F sharp developer,
I'm just learning, but when

291
00:19:42.560 --> 00:19:46.130
I hear about things that
compile to JavaScript, and I

292
00:19:46.130 --> 00:19:50.450
think I'm also speaking for
the listener, I think, do

293
00:19:50.450 --> 00:19:52.670
I want to bet my
company on a thing that

294
00:19:52.670 --> 00:19:55.490
compiles a JavaScript? Because I
think we have an image

295
00:19:55.490 --> 00:19:59.540
in our mind that it's
going to compile to weird

296
00:19:59.810 --> 00:20:07.100
JavaScript, you know, like unreadable,
JavaScript. I mean, first of

297
00:20:07.100 --> 00:20:11.210
all, you are to give,
you probably are using TypeScript

298
00:20:11.210 --> 00:20:13.730
or something like that. So
you are already using some

299
00:20:13.730 --> 00:20:19.730
compilation to JavaScript, even, even
if you write Java script,

300
00:20:19.730 --> 00:20:23.540
you really often do some
JavaScript to JavaScript compilation with

301
00:20:23.550 --> 00:20:26.840
Bible. And the Bible is
a tool that enables you

302
00:20:26.840 --> 00:20:32.510
to write new modern ish
JavaScript and compile it to

303
00:20:33.050 --> 00:20:37.070
play in all the birding
JavaScript that's supported by all

304
00:20:37.070 --> 00:20:42.290
our browsers. That's that's second
thing. And the first thing

305
00:20:42.470 --> 00:20:45.950
fable actually uses Bible under
the hood. I think that

306
00:20:45.950 --> 00:20:47.980
our funds are talked a
bit that on the other

307
00:20:47.980 --> 00:20:52.660
podcast, but basically what fireball
does is it doesn't manually

308
00:20:52.690 --> 00:20:57.550
outputs, JavaScript code as a
text, but instead it takes

309
00:20:58.000 --> 00:21:02.830
F sharp abstract syntax tree
transforms this abstract abstract syntax

310
00:21:02.830 --> 00:21:07.030
tree into the abstract syntax
tree that Bible understands and

311
00:21:07.600 --> 00:21:10.620
feeds it to Bible. And
then Bible is responsible for

312
00:21:11.080 --> 00:21:15.610
outputting JavaScript. And the Bible
is really popular tool in

313
00:21:15.640 --> 00:21:19.390
JavaScript ecosystem. So it's really
battle tested and tend to

314
00:21:19.450 --> 00:21:22.900
be really powerful. And one
of the, of the things

315
00:21:22.900 --> 00:21:27.220
they focus on as a
Bible project and Bible communities

316
00:21:27.310 --> 00:21:31.150
outputting nice readable, JavaScript code,
that can be, is it

317
00:21:31.150 --> 00:21:33.850
in the, in, inside the
browser and to end with

318
00:21:33.910 --> 00:21:40.330
all tools that JavaScript ecosystem
has. So in a case

319
00:21:40.330 --> 00:21:43.000
of, of, of this stock,
I don't think that's really

320
00:21:43.000 --> 00:21:45.340
a problem just like it's
not a problem in case

321
00:21:45.340 --> 00:21:49.230
of That is a very,
very good explanation. And it's

322
00:21:49.230 --> 00:21:51.930
really great. People should check
out that show and they

323
00:21:51.930 --> 00:21:55.410
should also check out fable
F a B L e.io.

324
00:21:55.740 --> 00:21:57.630
What's nice is that you
can go up there and

325
00:21:57.630 --> 00:21:59.940
compile in the browser. So
I'm actually, I've got F

326
00:21:59.940 --> 00:22:02.670
sharp on the left here,
and I can hit all

327
00:22:02.670 --> 00:22:04.830
the enter. It will show
me the code on the

328
00:22:04.830 --> 00:22:08.610
right. And if you line
it up, like it's really

329
00:22:08.610 --> 00:22:11.910
close, like it's, you can
see it. It's not like

330
00:22:11.910 --> 00:22:15.660
it's compiling into unreadable assembly
language. You know, it's really

331
00:22:16.050 --> 00:22:18.270
quite amazing. You get to
write the language that makes

332
00:22:18.270 --> 00:22:21.600
you happy and then create
the language that runs in

333
00:22:21.600 --> 00:22:25.680
the browser. It's pretty extraordinary.
Yes. And it's really an

334
00:22:25.700 --> 00:22:29.940
important advantage of fable in
general, in comparison to some

335
00:22:29.940 --> 00:22:36.840
other choices in compile to
JavaScript ecosystem, because it enables

336
00:22:36.900 --> 00:22:40.800
us to do really deep
integration with existing JavaScript tooling,

337
00:22:40.800 --> 00:22:45.540
because we output JavaScript. That's
understood by, by normal JavaScript

338
00:22:45.570 --> 00:22:50.490
tools like Webpack and stuff
like that. Oh, that's a

339
00:22:50.490 --> 00:22:52.320
very good point. So if
I let them be, let

340
00:22:52.320 --> 00:22:54.930
me ask you this, then
let's talk about integration. If

341
00:22:54.930 --> 00:22:58.740
I'm a company that has
some existing intellectual property in

342
00:22:58.740 --> 00:23:02.490
JavaScript, and maybe I have
some existing.net DLLs that are

343
00:23:02.490 --> 00:23:05.820
in C-sharp or VB, and
I'm looking at the safe

344
00:23:05.820 --> 00:23:09.250
stack, I can combine my
F sharp libraries with my

345
00:23:09.260 --> 00:23:13.950
sharp libraries and my fable
with existing JavaScript that I

346
00:23:13.950 --> 00:23:19.410
have Indeed combining F sharp
and C sharp is pretty

347
00:23:19.410 --> 00:23:23.610
straightforward. It's just normal DLL
that reference or normal product

348
00:23:23.610 --> 00:23:28.140
reference normal nuggets package, depending
on how you, how you

349
00:23:28.170 --> 00:23:33.480
do it in your company
for the integration between a

350
00:23:34.140 --> 00:23:38.370
fable. So F running in
the browser and JavaScript because

351
00:23:38.400 --> 00:23:43.230
modern JavaScript has this functionality
of modules. And, and like

352
00:23:43.770 --> 00:23:48.170
all NPM and stuff are
following one convention, how to

353
00:23:48.290 --> 00:23:51.680
do things and how to
pack things. You can say

354
00:23:51.680 --> 00:23:55.160
something like, I want to
import just one function from

355
00:23:55.160 --> 00:23:59.540
this file and say, it's
like in f-stop file, say,

356
00:23:59.780 --> 00:24:05.270
I require a function called,
do something from file. A

357
00:24:05.270 --> 00:24:12.530
BC dot JS, and Webpack
will put it together. And

358
00:24:13.190 --> 00:24:16.180
you will just use your
JavaScript in dis from F

359
00:24:16.190 --> 00:24:20.150
sharp, because under the hood,
it's actually just compared to

360
00:24:20.150 --> 00:24:23.540
normal Java scripts that required
a statement. And it's normal.

361
00:24:23.540 --> 00:24:28.040
JavaScript had quite a segment.
I compiled by, by Webpack

362
00:24:28.040 --> 00:24:31.850
and bundled together, and all
magic is done. So yes,

363
00:24:31.850 --> 00:24:35.960
you can easily adjust, use
both. So you start up

364
00:24:35.960 --> 00:24:39.980
from F up on the
backend and JavaScript on the

365
00:24:40.160 --> 00:24:42.980
weave from F sharp on
the front end, which is

366
00:24:42.980 --> 00:24:44.990
really nice in one, in
one of the demos we

367
00:24:44.990 --> 00:24:50.490
have somewhere, we are building
application using both TypeScript and

368
00:24:50.660 --> 00:24:54.560
abstract in one file, and
all the link is working

369
00:24:54.560 --> 00:24:57.680
together. So the watch mode
we have, so this automatic

370
00:24:57.680 --> 00:25:01.010
recompilation, we do change in
the, in the type through

371
00:25:01.070 --> 00:25:04.910
file. We save types of
TypeScript file. Everything gets recompiled,

372
00:25:04.920 --> 00:25:08.600
and ultimately the refresh in
the browser, we do change

373
00:25:08.600 --> 00:25:11.870
in file and the same
happen, the sentence you can

374
00:25:11.870 --> 00:25:17.300
edit both TypeScript, JavaScript, and
F sharp fiber code at

375
00:25:17.300 --> 00:25:21.010
the same time and have
this nice developer experience. Yeah,

376
00:25:21.310 --> 00:25:23.050
I do want to point
out also, if you looked

377
00:25:23.050 --> 00:25:26.590
at the safe stack homepage
about halfway down, it says,

378
00:25:26.590 --> 00:25:29.470
retrofit your existing stack. It's
got some really good examples

379
00:25:29.470 --> 00:25:32.020
that I was impressed with
where it says, Oh, already

380
00:25:32.020 --> 00:25:35.560
using web API. That's cool.
Use, use the safe, you

381
00:25:35.560 --> 00:25:37.810
know, use these parts of
the safe stack. Or if

382
00:25:37.810 --> 00:25:40.390
you want to write your
own sequel, that's cool. You

383
00:25:40.390 --> 00:25:42.220
don't have to, you know,
you don't have to pick

384
00:25:42.220 --> 00:25:45.160
the whole stack. You pick
the piece that you already,

385
00:25:45.490 --> 00:25:46.990
you want to, and then
you plug it into the

386
00:25:46.990 --> 00:25:50.350
code you already have, which
is pretty sweet. Yes. And

387
00:25:50.740 --> 00:25:53.170
again, I think that that's
something really important for us

388
00:25:53.170 --> 00:25:57.430
because not every product is
Greenfield project. Not, not every

389
00:25:57.670 --> 00:26:02.020
company is willing to bet
on four different technologies that

390
00:26:02.020 --> 00:26:05.890
they don't know, maybe they
want to risk unjust front-end

391
00:26:05.890 --> 00:26:10.390
or something. So it's not
like that. We try to

392
00:26:10.390 --> 00:26:15.580
sell safe as a do
safe. Don't do anything else

393
00:26:15.610 --> 00:26:19.720
and just use the technologies.
We suggest we really believe

394
00:26:19.720 --> 00:26:24.760
into this integration with existing
ecosystems. Yeah. And people can

395
00:26:24.790 --> 00:26:29.050
set this up on their
machines really easily without like,

396
00:26:29.080 --> 00:26:31.960
it won't hurt your machine.
Like I went and hooked

397
00:26:31.960 --> 00:26:36.430
up the dotnet CLI safe
template. So now I can

398
00:26:36.430 --> 00:26:40.600
say dotnet new safe. And
it just kind of, it's

399
00:26:40.600 --> 00:26:43.140
just another template that sits
alongside the other things I

400
00:26:43.140 --> 00:26:46.680
can be playing with the
safe stack while I'm doing

401
00:26:46.680 --> 00:26:49.650
my C sharp in my
regular job. So safe can

402
00:26:49.650 --> 00:26:52.650
kind of sneak into my
life. And until maybe I'm

403
00:26:52.650 --> 00:26:56.750
using it completely. Yes. I'm
obviously for the, for the

404
00:26:56.780 --> 00:26:59.810
front end part, you need
also to have some other

405
00:26:59.810 --> 00:27:04.610
dependencies like node and PM
or yarn. But I think

406
00:27:04.610 --> 00:27:07.700
nowadays that's not really like
dangerous dependency and a lot

407
00:27:07.700 --> 00:27:12.660
of people have it installed
under machines. So For the

408
00:27:12.740 --> 00:27:16.730
JavaScript and the, and the
ultimately the table underneath. Yes,

409
00:27:17.030 --> 00:27:19.100
indeed. Hmm. One of the
things that I think is

410
00:27:19.100 --> 00:27:21.050
worth pointing out that I
was really surprised about is

411
00:27:21.050 --> 00:27:24.740
the, the demo that you've
got of the safe stack

412
00:27:24.770 --> 00:27:27.530
as it applies to react
native. So now you're using

413
00:27:27.530 --> 00:27:32.600
F sharp to write a
mobile application. Yes, that's really

414
00:27:32.600 --> 00:27:39.200
great. Yeah. And, and that's
works just fine. It's using

415
00:27:39.230 --> 00:27:42.620
react native, as you've said.
So we again has this

416
00:27:43.670 --> 00:27:48.950
battle tested technology from Facebook,
and we just simply compiled

417
00:27:48.950 --> 00:27:51.500
to the, to the react
native and then react native

418
00:27:51.500 --> 00:27:55.430
tooling does its magic to
compile for the Android and

419
00:27:55.430 --> 00:28:01.100
iOS devices. So this is
really great. What's also really

420
00:28:01.100 --> 00:28:04.940
important when, when we talk
about these different compilation targets

421
00:28:04.970 --> 00:28:10.490
is that you can set
your domain of your, your

422
00:28:10.490 --> 00:28:14.420
code between all those targets.
So I know companies that

423
00:28:14.420 --> 00:28:20.120
have basically same code, same
domain browser on the mobile

424
00:28:20.120 --> 00:28:23.840
applications on the backend, and
also on the Azure functions,

425
00:28:23.840 --> 00:28:29.690
for example. So this enables
people to be highly productive,

426
00:28:29.720 --> 00:28:33.500
because really often, when you
do those different, different applications,

427
00:28:33.530 --> 00:28:38.420
different client, client applications, you
need to repeat some code

428
00:28:38.450 --> 00:28:43.680
because, Oh, the browser is
written in JavaScript and the

429
00:28:44.120 --> 00:28:48.320
publication is written in C
sharp in XAML. And we

430
00:28:48.320 --> 00:28:51.740
fable, and we've saved stuck
in general. You can easily

431
00:28:51.740 --> 00:28:56.330
share your code across the
domain, across the different clients

432
00:28:56.330 --> 00:29:00.560
and different parts of the
stack. The, the most impressive

433
00:29:00.560 --> 00:29:03.650
thing that, of all of
this, that I think is

434
00:29:03.650 --> 00:29:08.120
how clean the, the hot
module replacement is. I know

435
00:29:08.120 --> 00:29:10.850
that you use Webpack for
that, but I think it's

436
00:29:10.850 --> 00:29:13.970
worth giving the people who
are listening a task. You

437
00:29:13.970 --> 00:29:17.030
should go and check out
the safe bookstore. Maybe you

438
00:29:17.030 --> 00:29:20.120
can explain how this works,
because I'm looking at this

439
00:29:20.120 --> 00:29:24.050
animation where, you know, someone
has local host, 80, 80

440
00:29:24.050 --> 00:29:27.350
up, and they make a
change to some F sharp

441
00:29:27.350 --> 00:29:31.340
code, not a, not a
CSS, HTML, not some HTML.

442
00:29:31.340 --> 00:29:34.580
And they hit refresh, but
they literally change F sharp

443
00:29:34.730 --> 00:29:38.450
hits save. And the webpage
changes, but doesn't lose state.

444
00:29:38.570 --> 00:29:43.990
How is that possible? That's
basically Is some Webpack magic,

445
00:29:45.250 --> 00:29:50.950
but because the client code
using El Mitch is really

446
00:29:50.950 --> 00:29:57.490
structured and works with these
messages that just change state.

447
00:29:57.940 --> 00:30:01.810
It's really easy to basically
the current current state of

448
00:30:01.810 --> 00:30:05.230
your application is just set
of messages that mutates the

449
00:30:05.230 --> 00:30:08.920
state. So it's really easy
for Webpack to just, Oh,

450
00:30:08.920 --> 00:30:11.230
this is, this is this
list of the messages that

451
00:30:11.230 --> 00:30:14.470
happen. This actions that modify
the state, we shouldn't touch

452
00:30:14.470 --> 00:30:17.340
that. And then, Oh, we
can refer to the rest,

453
00:30:17.350 --> 00:30:21.040
the rest of the code.
So that's really nice. It's

454
00:30:21.040 --> 00:30:24.370
actually from what I've heard,
and I'm not super experienced,

455
00:30:24.370 --> 00:30:26.800
like react and to the
Duke's developer, but from what

456
00:30:26.800 --> 00:30:31.480
I've heard, these hot module
replacement is actually working better

457
00:30:31.540 --> 00:30:34.990
in El Mitch than it
works originally in reactor, Dukes,

458
00:30:36.300 --> 00:30:40.990
even, even Facebook, Facebook on
through webpage has this information

459
00:30:40.990 --> 00:30:44.080
that, Oh, we have this
hot module replacement, but it

460
00:30:44.080 --> 00:30:47.290
usually causes some problems and
it might not be super

461
00:30:47.290 --> 00:30:50.890
perfect in case of Amish
applications. It just works. And

462
00:30:50.890 --> 00:30:55.090
it's like amazing. And it
gives really, really nice and

463
00:30:55.330 --> 00:31:00.340
totally different experience of editing
care applications, because you don't

464
00:31:00.340 --> 00:31:03.580
need to repeat all actions
to bring you to Allstate.

465
00:31:03.900 --> 00:31:06.570
Yeah. It's really interesting. It
took me a moment to

466
00:31:06.570 --> 00:31:08.880
figure out what was going
on, but you're actually running

467
00:31:08.910 --> 00:31:12.420
two different web servers at
the same time. Right? You're

468
00:31:12.420 --> 00:31:17.100
running the.net, watch on your
application for things like your

469
00:31:17.100 --> 00:31:20.160
unit test, which then launches
your server. But then you've

470
00:31:20.160 --> 00:31:24.690
got a Webpack dev server
that fable supports on another

471
00:31:24.690 --> 00:31:27.420
port and these things happen
automatically. So you're running two

472
00:31:27.420 --> 00:31:30.030
things at the same time,
one to run your app

473
00:31:30.060 --> 00:31:35.700
and one to support your
development. Yes, indeed. Most of

474
00:31:35.700 --> 00:31:38.970
the configure, of course it
requires some configuration, but most

475
00:31:38.970 --> 00:31:43.080
of the configuration is done
automatically when you create the

476
00:31:43.080 --> 00:31:49.110
application with DotNetNuke save template.
So basically when you create

477
00:31:49.380 --> 00:31:52.350
the new safe, you should
have all these things ready

478
00:31:52.350 --> 00:31:55.560
to work and just press
a five in visual studio

479
00:31:55.560 --> 00:31:59.370
code and it will start
everything and it will just

480
00:31:59.370 --> 00:32:03.990
work. Yeah. Once I had
yarn and node installed, yarn

481
00:32:03.990 --> 00:32:08.850
is an NPM package manager.
I installed, I saw node,

482
00:32:08.880 --> 00:32:12.300
I installed yarn. I put
on dotnet SDK. I ended

483
00:32:12.300 --> 00:32:16.850
up using packet and, and
it just worked any, and

484
00:32:16.850 --> 00:32:18.900
of course I could even
use Docker for my deployment

485
00:32:18.900 --> 00:32:21.240
at the end. I think
it took me 15 minutes

486
00:32:21.780 --> 00:32:25.170
to get that working. And
it was really amazing. Yeah.

487
00:32:25.200 --> 00:32:27.360
So I'm just happy to
hear that, that you had

488
00:32:27.450 --> 00:32:30.660
really good experience with that.
And I really think that

489
00:32:31.170 --> 00:32:34.910
there are actually still some
places in the, in the

490
00:32:34.920 --> 00:32:39.030
hall, especially on the Fibo
site where the developer experience

491
00:32:39.050 --> 00:32:42.920
can be made better and
does like huge, huge, huge

492
00:32:42.980 --> 00:32:47.330
effort right now right now
is made to make some

493
00:32:47.330 --> 00:32:51.230
things a bit better. Because
as we, as we are

494
00:32:51.230 --> 00:32:54.560
talking here, you need to
have some knowledge about this

495
00:32:54.560 --> 00:32:58.170
weird JavaScript things I'm talking
about. So you need to

496
00:32:58.190 --> 00:33:02.150
understand that, Oh, you are
using react for the rendering

497
00:33:02.210 --> 00:33:06.710
engine and it has some,
some features and send some

498
00:33:06.710 --> 00:33:09.560
stuff happens because of that.
And then you have to

499
00:33:09.560 --> 00:33:13.700
use this web thing for
this hot module replacement. And

500
00:33:13.740 --> 00:33:17.960
while it is configured, when
it stops working probably as

501
00:33:18.140 --> 00:33:22.730
normal.net developer or someone who
haven't played with the, with

502
00:33:22.730 --> 00:33:27.530
the fountain stuck so far,
you don't know what's going

503
00:33:27.530 --> 00:33:31.820
on. So we kinda like,
especially Alfonzo is working on

504
00:33:31.820 --> 00:33:35.770
the, on making all this
stuff it's nicer. Well, it

505
00:33:35.770 --> 00:33:38.050
was, there was some magic,
but the nice thing about

506
00:33:38.050 --> 00:33:40.000
it is that it's magic,
open source all the way

507
00:33:40.000 --> 00:33:43.270
down. So as long as
you understand the stack you'll

508
00:33:43.270 --> 00:33:47.620
have a good experience. Yes,
indeed. Fantastic. Also one more

509
00:33:47.620 --> 00:33:50.560
thing. Probably another important thing
I want to mention is

510
00:33:50.560 --> 00:33:54.520
that the safe stack has,
it's not only like those

511
00:33:54.520 --> 00:33:59.140
couple of libraries put together
about, we actually provide a

512
00:33:59.170 --> 00:34:02.590
couple of companies, provide commercial
support for this stock. So

513
00:34:02.590 --> 00:34:06.580
if an a company is
interested in having some commercial

514
00:34:06.580 --> 00:34:10.780
support, because I totally understand
that not everyone wants to

515
00:34:10.780 --> 00:34:14.170
just buy into this open
source stack, not having an

516
00:34:14.170 --> 00:34:17.350
inquire aunties and not having
any help other than dinner,

517
00:34:18.850 --> 00:34:23.620
asking questions on GitHub. So
if any company and <inaudible>

518
00:34:23.980 --> 00:34:29.650
has this need to have
formal commercial support for, for

519
00:34:29.740 --> 00:34:33.280
such applications that are a
couple of companies that, that

520
00:34:33.460 --> 00:34:36.100
provides that. And I think
that's also really important from

521
00:34:36.100 --> 00:34:39.100
just F sort of community
point of view because after

522
00:34:39.100 --> 00:34:42.550
community, for a lot of
time had this, there was

523
00:34:42.580 --> 00:34:46.030
this opinion about deaf community.
Oh, it's just bunch of

524
00:34:46.030 --> 00:34:49.270
those crazy open sort of
skips that are, they just

525
00:34:49.270 --> 00:34:52.480
do those stuff for fun.
And no one is using

526
00:34:52.510 --> 00:34:57.550
this commercially and tent safe,
stuck also showing that, that

527
00:34:57.610 --> 00:35:00.700
there are some companies that
work on that and provide

528
00:35:01.030 --> 00:35:05.590
support with F serpent. This
stuck in particular, That is

529
00:35:05.590 --> 00:35:07.630
a very good point. And
if you go to safe,

530
00:35:07.660 --> 00:35:12.280
hyphen stack.github.io, you can see
that there's not only a

531
00:35:12.280 --> 00:35:15.580
rich community, but there's companies
like Lambda factory in compensational

532
00:35:15.580 --> 00:35:18.040
it and others and others.
So just like when you

533
00:35:18.040 --> 00:35:21.190
use open source, like node,
you call node source with

534
00:35:21.190 --> 00:35:23.770
the safe stack, there is
a community of people putting

535
00:35:23.770 --> 00:35:26.740
this stuff into production who
can help you commercially and,

536
00:35:27.250 --> 00:35:30.070
and make you successful. I
really appreciate you chatting with

537
00:35:30.070 --> 00:35:33.670
me today. Thanks. It was
great experience for me and

538
00:35:34.600 --> 00:35:41.310
happy, happy, happy, too. Happy
to share Stuff. Fantastic. This

539
00:35:41.310 --> 00:35:44.250
has been another episode of
Hanselminutes and we'll see you

540
00:35:44.250 --> 00:35:45.150
again next week.

