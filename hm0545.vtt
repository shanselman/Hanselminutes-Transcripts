WEBVTT FILE

1
00:00:04.620 --> 00:00:17.810
<inaudible> From hanselminutes.com. It's Hansel
minutes, our weekly discussion with

2
00:00:17.810 --> 00:00:22.790
web developer and technologist Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:22.790 --> 00:00:27.140
the show number 549. In
this episode, Scott talks with

4
00:00:27.230 --> 00:00:32.120
Damien Brady about orchestrating and
automating deployments with octopus deploy.

5
00:00:35.660 --> 00:00:37.970
Hi, this is Scott Hanselman.
This is another episode of

6
00:00:37.970 --> 00:00:41.240
Hansel minutes today. I'm talking
with Damien Brady. Who's a

7
00:00:41.240 --> 00:00:45.890
software engineer and community person
over at octopus deploy. And

8
00:00:46.220 --> 00:00:49.310
actually I'm realizing kind of
just as we start talking

9
00:00:49.310 --> 00:00:53.870
that I had octopus deploy
on the show five years

10
00:00:53.870 --> 00:00:57.560
ago, almost to the day.
Do you remember who I

11
00:00:57.560 --> 00:01:00.380
had on or why? I
do. And hi Scott, thanks

12
00:01:00.380 --> 00:01:03.950
for having me. You had
post devel and I think

13
00:01:03.950 --> 00:01:07.790
it was during the startup
series in September, 2011. Yeah. It

14
00:01:07.790 --> 00:01:09.980
was a whole series of
shows week after week, where

15
00:01:09.980 --> 00:01:12.590
we were talking to people
who had ideas for startups

16
00:01:13.190 --> 00:01:16.250
and Paul was just kind
of coming up with a

17
00:01:16.250 --> 00:01:19.820
startup. He was, yeah, it
was really interesting. I listened

18
00:01:19.820 --> 00:01:22.040
to it again to see
other day, just to refresh

19
00:01:22.040 --> 00:01:25.400
my memory. I'm really interested
how much it's changed since

20
00:01:25.400 --> 00:01:27.680
then. He's talking about some
of the ideas he had

21
00:01:27.680 --> 00:01:30.530
that octopus might do in
the future. And you know,

22
00:01:30.560 --> 00:01:33.320
all those things are in
the past now. So yeah,

23
00:01:33.350 --> 00:01:35.600
fascinating to get a bit
of an insight into what

24
00:01:35.600 --> 00:01:38.090
he was thinking at the
time. So when he started

25
00:01:38.120 --> 00:01:39.950
his company, it was just
him, wasn't it? He had,

26
00:01:40.070 --> 00:01:42.770
I think he'd moved to
London or something. Yeah. It

27
00:01:42.770 --> 00:01:46.280
was just him. It was
him with an idea. And

28
00:01:46.280 --> 00:01:48.410
he started getting that running.
And I think towards the

29
00:01:48.410 --> 00:01:51.620
end of version two, which
was several years later was

30
00:01:51.620 --> 00:01:53.420
the first time he pulled
somebody else on. And that

31
00:01:53.420 --> 00:01:57.260
was, I believe Nick bloom
heart was involved. So he

32
00:01:57.260 --> 00:02:00.680
does Siri, Logan seek and
things now, but he got

33
00:02:00.680 --> 00:02:04.010
involved around version two, but
now we're up to 20

34
00:02:04.010 --> 00:02:06.770
odd people, I think. Wow.
So yeah, much bigger than

35
00:02:06.770 --> 00:02:09.200
it was because I'm looking
here at the description and

36
00:02:09.200 --> 00:02:13.220
we referred to it as
a micro ISV. You know,

37
00:02:13.220 --> 00:02:14.870
it was one of those,
just a little company. Like

38
00:02:14.870 --> 00:02:17.990
I I'm a micro startup,
myself and Greg shackles have

39
00:02:17.990 --> 00:02:20.270
our little thing that we're
waiting to make us a

40
00:02:20.270 --> 00:02:24.020
million dollars, but it also
points out the idea of

41
00:02:24.020 --> 00:02:27.590
being an overnight success in
five years. You know, I

42
00:02:27.590 --> 00:02:31.160
had a friend on the
show, lovey awhile back who

43
00:02:31.460 --> 00:02:35.240
was becoming an overnight success.
And when I pushed her

44
00:02:35.240 --> 00:02:36.980
on that, she said it
took 13 years to do

45
00:02:36.980 --> 00:02:40.610
it. I listened to that
show actually. Yeah, really interesting

46
00:02:41.570 --> 00:02:44.390
that people only notice in
one in one big hit.

47
00:02:44.510 --> 00:02:47.360
And I think octopus is
a little bit unique in

48
00:02:47.360 --> 00:02:50.360
that over the last two
or three years, we've had

49
00:02:50.360 --> 00:02:54.080
pretty steady growth, but yeah,
the first, first year or

50
00:02:54.080 --> 00:02:56.120
two that Paul was at
it, you know, the occasional

51
00:02:56.120 --> 00:03:00.100
sale, I think so micro
ISB and then suddenly became,

52
00:03:00.310 --> 00:03:03.370
I guess, an ISV and
then macro is in the

53
00:03:03.370 --> 00:03:07.470
future. So, so what is
it that, what is the

54
00:03:07.470 --> 00:03:10.440
problem that octopus solves and
what is, what, why is

55
00:03:10.440 --> 00:03:12.810
it interesting? And I would
also point out just in

56
00:03:12.810 --> 00:03:17.160
the interest of full disclosure
that a couple of times

57
00:03:17.160 --> 00:03:21.600
octopus has sponsored a feed
on my blog. That's not

58
00:03:21.600 --> 00:03:24.930
related to why we're having
a chat today. No octopus

59
00:03:24.930 --> 00:03:29.250
was basically written to help
deployment automation. So it's a

60
00:03:29.250 --> 00:03:33.450
deployment or automation tool primarily
for dotnet developers, although that

61
00:03:33.450 --> 00:03:37.260
becomes less true as we
go on and it's designed

62
00:03:37.260 --> 00:03:41.370
to basically make sure that
your deployments are trustworthy, repeatable,

63
00:03:41.460 --> 00:03:44.490
scalable, and all those good
things that you, that you

64
00:03:44.490 --> 00:03:46.800
want to happen when you're
deploying your application all the

65
00:03:46.800 --> 00:03:50.310
way through to production. So
when you think about like

66
00:03:50.310 --> 00:03:54.870
the application development life cycle,
there's, you know, continuous integration

67
00:03:54.870 --> 00:03:56.700
that we pushed a lot
kind of in the late

68
00:03:56.700 --> 00:03:59.790
nineties and early two thousands,
then that turned into continuous

69
00:03:59.850 --> 00:04:04.260
deployment. Is this a build
server and a deployment server?

70
00:04:04.290 --> 00:04:06.790
Does it, where does it
fit into the, of the

71
00:04:06.840 --> 00:04:10.260
chain? Yeah, so we come
in after the build. So

72
00:04:10.260 --> 00:04:13.560
if you're using a build
server at the moment, usually

73
00:04:13.560 --> 00:04:17.940
TeamCity or team build Tim
foundation built, those are the

74
00:04:17.940 --> 00:04:20.310
really common ones, but it
could be bamboo or Jenkins

75
00:04:20.310 --> 00:04:23.130
or anything like that. The
build occurs. So it takes

76
00:04:23.130 --> 00:04:25.560
all your code compiles, it
runs your tests, does all

77
00:04:25.560 --> 00:04:28.200
that kind of stuff and
then produces a package or

78
00:04:28.200 --> 00:04:31.830
a series of packages. And
I think when, when you

79
00:04:31.830 --> 00:04:35.160
were talking to Paul back
in 2011, and even until

80
00:04:35.160 --> 00:04:38.760
fairly recently, those packages when
you get packages. So basically

81
00:04:38.810 --> 00:04:41.400
a zip with a manifest
with some version information and

82
00:04:41.400 --> 00:04:44.370
things like that. But once
that package has been created,

83
00:04:44.760 --> 00:04:47.970
octopus takes that package and
we'll deploy it through your

84
00:04:47.970 --> 00:04:52.680
environment. So through dev staging,
test QA production and so

85
00:04:52.680 --> 00:04:55.830
on, in a consistent way.
And the idea really is

86
00:04:55.830 --> 00:04:59.250
that once you have that
package, that's the one package

87
00:04:59.250 --> 00:05:01.320
you want to deploy. So
the idea of build wants

88
00:05:01.330 --> 00:05:05.220
deploy many and making sure
that that process occurs the

89
00:05:05.220 --> 00:05:08.220
same way every single time.
So there's no surprises when

90
00:05:08.220 --> 00:05:10.560
you get to production. When
I am looking at my

91
00:05:10.560 --> 00:05:16.380
blog here and in March
of 2011, so a little

92
00:05:16.380 --> 00:05:19.800
more than a year before
I talked to a DePaul,

93
00:05:19.860 --> 00:05:23.040
I said, if you're using
X copy, you're doing it

94
00:05:23.040 --> 00:05:25.950
wrong. And I remember giving
a talk where I kind

95
00:05:25.950 --> 00:05:29.970
of described, you know, if
you open up to explore

96
00:05:29.970 --> 00:05:33.000
windows and then drag your
stuff into production, right? Or

97
00:05:33.000 --> 00:05:36.300
if you're using files Zilla
to go into production, if

98
00:05:36.300 --> 00:05:39.840
you remote desktop into production
and then copy paste from

99
00:05:39.840 --> 00:05:44.670
the remoting system, you might
be deploying wrong. And people

100
00:05:44.670 --> 00:05:47.370
always laugh in this kind
of uncomfortable and nervous way.

101
00:05:48.930 --> 00:05:52.350
Yeah. Yep. They, they laugh
and then go back to

102
00:05:52.350 --> 00:05:55.830
their offices and do exactly
that, which, you know, it,

103
00:05:56.130 --> 00:05:57.950
it's one of these things
that really falls into that

104
00:05:57.950 --> 00:06:00.350
bucket of the thing that
you don't know that you

105
00:06:00.350 --> 00:06:02.720
don't know. It's really hard
to tell that that's a

106
00:06:02.720 --> 00:06:05.060
bad thing. If that's just
your reality day to day,

107
00:06:06.440 --> 00:06:09.740
you know, copying files to
production and, you know, copying

108
00:06:09.740 --> 00:06:13.340
the, this is the real
production web config file over

109
00:06:13.340 --> 00:06:15.110
the top of web config,
just to make sure that,

110
00:06:15.320 --> 00:06:18.470
you know, you've got the
right configuration settings, you know,

111
00:06:18.470 --> 00:06:21.950
that's, that's just something that
people do. And in a

112
00:06:21.950 --> 00:06:24.440
lot of places, they don't
realize that that's not a

113
00:06:24.440 --> 00:06:26.750
great way of doing things.
It's not repeatable. It's not

114
00:06:26.750 --> 00:06:31.160
very scalable. It takes time
and you know, is basically

115
00:06:31.160 --> 00:06:34.990
dangerous. Is that, is that
fair? Is that, I mean,

116
00:06:34.990 --> 00:06:36.730
some people might say, well,
you know, it's no big

117
00:06:36.730 --> 00:06:38.980
deal. I mean, I'll be
totally honest with you. I

118
00:06:38.980 --> 00:06:42.100
have worked in large systems
on large systems and make

119
00:06:42.100 --> 00:06:46.350
continuous reliable deployments. But my
blog, I manage with files

120
00:06:46.350 --> 00:06:49.300
Zillow. Yeah. Every time I
do it, I feel kind

121
00:06:49.300 --> 00:06:51.940
of gross about it. But
at the same time, you

122
00:06:51.940 --> 00:06:56.230
know, I deploy twice a
year. Yep. And that's absolutely

123
00:06:56.230 --> 00:06:58.900
the case. It's one of
these things. If you, I

124
00:06:58.900 --> 00:07:01.420
mean, if you are a
team of one person, you're

125
00:07:01.420 --> 00:07:04.630
probably not going to implement
an entire scrum, you know,

126
00:07:05.260 --> 00:07:07.570
daily stand ups with the
person sitting across from you

127
00:07:07.570 --> 00:07:11.410
and then continuous integration with
full code coverage, over test

128
00:07:11.410 --> 00:07:14.440
suites and deployment pipelines and
all that sort of stuff.

129
00:07:14.770 --> 00:07:16.810
If you're deploying once or
twice a year. I mean,

130
00:07:17.080 --> 00:07:19.660
I have a blog which
I just ported to ghost

131
00:07:19.660 --> 00:07:24.160
actually on running on a
Azure, running on Azure websites,

132
00:07:24.160 --> 00:07:27.430
I think. And I just
use kudu straight from get

133
00:07:27.430 --> 00:07:29.900
up inside, check in or
I commit and push and

134
00:07:29.900 --> 00:07:35.170
it's live. Okay. So you
deploy, you let Azure do

135
00:07:35.170 --> 00:07:37.390
the deployment. So basically you
have a web hook, you

136
00:07:37.390 --> 00:07:40.060
check it in to get,
and then it gets deployed

137
00:07:40.060 --> 00:07:43.570
from get. Yeah, absolutely. And
for my blog, that's perfectly

138
00:07:43.570 --> 00:07:45.700
fine. I mean, if I,
and I did this the

139
00:07:45.700 --> 00:07:48.730
other day, actually I upgraded
it and the whole thing

140
00:07:48.730 --> 00:07:51.820
just collapsed. And so I
rolled back, but there, the

141
00:07:51.820 --> 00:07:54.220
outcome of that was that
nobody could visit my blog

142
00:07:54.250 --> 00:07:56.740
for an hour. And you
know, if somebody was visiting

143
00:07:56.740 --> 00:07:59.770
my blog during that hour,
that's probably fairly unlikely anyway.

144
00:08:00.310 --> 00:08:02.650
So that's not a big
deal, but if you're talking

145
00:08:02.650 --> 00:08:05.320
about a deployment in a
bank or in a large

146
00:08:05.320 --> 00:08:09.700
organization where people are using
your application constantly, then that's

147
00:08:09.700 --> 00:08:13.480
a different story. You don't
really want to have this,

148
00:08:14.260 --> 00:08:17.320
the system of word documents
and trying to remember everything

149
00:08:17.320 --> 00:08:19.060
that you need to do
and do it the same

150
00:08:19.060 --> 00:08:23.770
way each time. That's, that's
the idea behind tools like

151
00:08:23.770 --> 00:08:26.860
octopus really is to, to
automate that and make sure

152
00:08:26.860 --> 00:08:29.320
that it's trustworthy. You know,
that when you check in

153
00:08:29.320 --> 00:08:31.900
your code, eventually it's going
to get to production in

154
00:08:31.900 --> 00:08:33.880
the Safeway, or it's not
going to get to production.

155
00:08:33.880 --> 00:08:36.670
If it's going to break
things. When I was working

156
00:08:36.670 --> 00:08:40.510
in, in banks, we would
have, you know, seven, 10,

157
00:08:40.510 --> 00:08:44.920
15 web servers, all kind
of working in tandem. And

158
00:08:44.920 --> 00:08:49.550
we get weird little flaky
bugs where, you know, a

159
00:08:49.570 --> 00:08:51.610
page would look one way
and then you'd click and

160
00:08:51.610 --> 00:08:53.140
then you'd come back and
it would look fine and

161
00:08:53.140 --> 00:08:54.730
you go in and the
heck's going on. And you

162
00:08:54.730 --> 00:08:59.820
realize like web seven is
out of sync. Yeah. Yup.

163
00:09:00.030 --> 00:09:01.920
And then what do you
do or such and such

164
00:09:01.920 --> 00:09:04.980
a version of a DLL
is wrong. And then inevitably

165
00:09:04.980 --> 00:09:08.760
someone would go and remote
desktop in run, DIR check

166
00:09:08.760 --> 00:09:11.790
version numbers. And we'd, we'd
kind of run around, figuring

167
00:09:11.790 --> 00:09:15.720
out which DLL is out
of sync is our deployment

168
00:09:15.720 --> 00:09:17.910
systems like this meant to
fix that or isn't that

169
00:09:17.910 --> 00:09:20.960
what containers are meaning to
fix. Yeah. And that is

170
00:09:20.990 --> 00:09:23.330
kind of the way that
the containers are entering the

171
00:09:23.330 --> 00:09:26.090
picture as well. So one
of the, I mean, one

172
00:09:26.090 --> 00:09:29.720
of the core principles behind
deployment automation and things like

173
00:09:29.720 --> 00:09:32.330
that is making sure that,
you know, you can build

174
00:09:32.330 --> 00:09:35.690
from at least a known,
starting point. So it may

175
00:09:35.690 --> 00:09:38.000
not be bare metal, but
it might be, you know,

176
00:09:38.360 --> 00:09:41.180
an iOS with containers running
on it. So rather than

177
00:09:41.180 --> 00:09:44.570
just deploying, Oh, here's a
little update to the application,

178
00:09:44.570 --> 00:09:47.600
which should be in this
state in production to bring

179
00:09:47.600 --> 00:09:49.910
it up to speed, you
deploy the whole thing again

180
00:09:50.450 --> 00:09:53.450
and containers, you know, you
can't get, can't get closer

181
00:09:53.450 --> 00:09:56.570
to deploying the whole thing
again, then deploying the entire,

182
00:09:56.780 --> 00:09:59.750
you know, the entire container
with everything and all its

183
00:10:00.170 --> 00:10:03.560
resources on it. You know,
you can't, you can't do

184
00:10:03.560 --> 00:10:06.380
that quite the way you
can with containers. So that

185
00:10:06.410 --> 00:10:10.430
repeatability of deploying everything is,
is kind of where containers

186
00:10:10.760 --> 00:10:13.790
is going to solve that
problem. I think. So then

187
00:10:13.790 --> 00:10:16.910
let's say the containers takes
over the world and tomorrow

188
00:10:16.970 --> 00:10:21.110
everyone's doing containers. Yep. Where
does a continuous deployment tool

189
00:10:21.110 --> 00:10:25.130
like octopus or whatever fit
into that world then? Yeah,

190
00:10:25.130 --> 00:10:27.980
that's interesting. And actually something
we're trying to work out

191
00:10:28.250 --> 00:10:31.340
now, we think there's still
a place for octopus. So

192
00:10:31.880 --> 00:10:36.110
the difference between something like
building your package into a

193
00:10:36.110 --> 00:10:39.380
Docker image, and then pushing
that out into a container

194
00:10:39.380 --> 00:10:42.470
service, that's kind of a
one step, you know, take

195
00:10:42.470 --> 00:10:44.420
this version of the image
and then run it. And

196
00:10:44.420 --> 00:10:47.810
that's it in a real
environment, you might have a

197
00:10:47.810 --> 00:10:50.900
number of those containers. And
then you might also have

198
00:10:51.140 --> 00:10:54.350
a database that's sitting in
the background, a few network,

199
00:10:54.380 --> 00:10:57.260
things that need to happen,
maybe some notifications that need

200
00:10:57.260 --> 00:11:00.920
to occur when a new
version comes out. So those

201
00:11:00.920 --> 00:11:03.800
additional steps is where we
think octopus is probably going

202
00:11:03.800 --> 00:11:05.990
to provide the value. I
sat at the same time.

203
00:11:06.020 --> 00:11:08.330
I mean, we don't want
to repeat, we don't want

204
00:11:08.330 --> 00:11:12.800
to reinvent the wheel. So
things like Kubernetes and so

205
00:11:12.800 --> 00:11:17.270
on that orchestrate, you know,
spinning up new containers and

206
00:11:17.720 --> 00:11:20.060
balancing and all that kind
of stuff. If that's already

207
00:11:20.300 --> 00:11:22.280
being used by the community,
we don't want to write

208
00:11:22.280 --> 00:11:25.070
our own version of that.
We'd prefer to integrate with

209
00:11:25.070 --> 00:11:27.440
that, but it's interesting. You
bring that up because we

210
00:11:27.440 --> 00:11:31.730
just released an RFC for
our DACA support. It's on

211
00:11:31.730 --> 00:11:35.420
our blog. And basically we're
asking people how they see

212
00:11:36.230 --> 00:11:39.500
octopus and DACA working together.
Yeah. We don't want to

213
00:11:39.500 --> 00:11:42.230
trade on the toes of,
you know, something that's already

214
00:11:42.230 --> 00:11:45.500
being used in the industry.
We want to add value

215
00:11:45.500 --> 00:11:48.320
where we can. Well, and
it brings up the question

216
00:11:48.320 --> 00:11:54.280
I think of when, when,
when a prescription becomes best

217
00:11:54.280 --> 00:11:58.000
practices and then just becomes
how people do things. You

218
00:11:58.000 --> 00:12:02.230
know, we, we, we are
right now, I think learning

219
00:12:02.230 --> 00:12:05.170
how containers ought to work.
And we're kind of on

220
00:12:05.170 --> 00:12:07.660
the tail end of learning
how continuous deployment auto work

221
00:12:08.110 --> 00:12:11.200
and people are writing prescription
blog posts and talks and

222
00:12:11.200 --> 00:12:13.030
books about, you know, this
is how we do it

223
00:12:13.030 --> 00:12:14.500
at Twitter. This is how
we do it at whatever.

224
00:12:14.500 --> 00:12:17.050
This is the way it's
done. It's very prescriptive. And

225
00:12:17.050 --> 00:12:18.970
then in a couple of
years, that'll simply become the

226
00:12:18.970 --> 00:12:21.580
way it's done. You know
what I mean? Like every

227
00:12:21.970 --> 00:12:26.010
everything goes through those phases.
Yeah, that's right. And that

228
00:12:26.130 --> 00:12:29.430
that's kind of happened with
agile software development. You don't

229
00:12:29.430 --> 00:12:32.010
really need to. Exactly. Yeah.
You don't really need to

230
00:12:32.010 --> 00:12:34.650
talk about whether somebody is
doing their software development in

231
00:12:34.650 --> 00:12:36.420
an agile way. That's just
the way you do software

232
00:12:36.420 --> 00:12:41.910
development. Now. Hopefully even like,
hopefully everybody does that. Right.

233
00:12:42.990 --> 00:12:45.280
And hopefully the same thing
with CGI to us. And

234
00:12:45.290 --> 00:12:48.540
to a lesser extent, I
suppose, where, you know, you

235
00:12:48.540 --> 00:12:50.910
don't have to worry about
the main version of the

236
00:12:50.910 --> 00:12:54.240
code being on Steve's machine.
You know, that that's not

237
00:12:54.240 --> 00:12:56.490
a thing that you tend
to worry about. You integrate

238
00:12:56.490 --> 00:12:59.640
your code by committing it
to, to a source control

239
00:12:59.640 --> 00:13:02.100
repo. That's the shared one
in the master branch or

240
00:13:02.100 --> 00:13:05.520
trunk. And that's, it's something
we used to talk about.

241
00:13:05.520 --> 00:13:07.530
And now it's kind of
a, you know, in most

242
00:13:07.530 --> 00:13:09.960
places they'll probably do that.
It's just a way of

243
00:13:09.960 --> 00:13:12.300
doing business. Well, it does,
but you actually, you do

244
00:13:12.300 --> 00:13:14.610
bring up an issue though,
because I'm sure that there

245
00:13:14.610 --> 00:13:18.960
are people listening, who we
just lost because they were

246
00:13:18.960 --> 00:13:22.710
like, well, no, we're still
on CVS or, Oh, we

247
00:13:22.710 --> 00:13:24.960
just got on SVN or,
you know, we work for

248
00:13:24.960 --> 00:13:28.680
the government and, you know,
gosh, it is, you know,

249
00:13:28.680 --> 00:13:31.080
the server is under Anna's
desk and then it gets

250
00:13:31.080 --> 00:13:32.910
copied onto Steve's. You know
what I mean? Like that

251
00:13:33.750 --> 00:13:37.020
those things still exist. There's
a software maturity, but I

252
00:13:37.020 --> 00:13:39.780
think we do agree that
once you learn about continuous

253
00:13:40.290 --> 00:13:43.950
integration and then continuous deployment,
you realize, wow, that is

254
00:13:43.980 --> 00:13:48.510
exactly what we need. Inevitably
though, people say our systems,

255
00:13:48.510 --> 00:13:52.770
our bosses, our paperwork doesn't
allow that. Yeah. And, and

256
00:13:52.770 --> 00:13:55.350
you're right. I've, I've basically
been lucky enough to be

257
00:13:55.350 --> 00:13:58.020
in an echo chamber of
this kind of talk for,

258
00:13:58.650 --> 00:14:03.120
you know, for 10 years,
ish now where continuous improvement

259
00:14:03.120 --> 00:14:06.300
and continuous integration and deployment
and stuff. Those are things

260
00:14:06.300 --> 00:14:08.910
that you do think about.
And the organization you work

261
00:14:08.910 --> 00:14:11.790
for has some investment in,
you know, in trying to

262
00:14:11.790 --> 00:14:15.150
make this process or trying
to keep up with these

263
00:14:15.150 --> 00:14:18.510
processes. But that's not the
case in every environment. And

264
00:14:18.510 --> 00:14:21.990
I have been, I've worked
in government departments where you

265
00:14:21.990 --> 00:14:24.990
have that typical kind of
big bang, you know, this

266
00:14:24.990 --> 00:14:27.180
is a six month project.
And then at the end

267
00:14:27.180 --> 00:14:29.850
you deploy the project and
then there's two months of

268
00:14:29.910 --> 00:14:32.250
trying to work out what
went wrong and then you

269
00:14:32.250 --> 00:14:35.610
walk onto a new project.
So, you know, before agile

270
00:14:35.610 --> 00:14:38.310
was a thing, at least
in, at least in the.net

271
00:14:38.520 --> 00:14:46.290
world, you know, that kind
of one deployment cycle, was

272
00:14:47.250 --> 00:14:50.760
it kind of prevents this,
this thought about how the

273
00:14:52.070 --> 00:14:55.190
can occur nicely and how
everything fits together from a

274
00:14:55.190 --> 00:14:58.810
process perspective. How important do
you think it is that,

275
00:14:58.920 --> 00:15:03.580
that, that, that the deployment
be continuous versus the deployment

276
00:15:03.580 --> 00:15:08.260
simply be reliable and repeatable?
I think quite a while

277
00:15:08.260 --> 00:15:11.680
ago, you spoke to Jess
humble and Martin Fowler at

278
00:15:11.680 --> 00:15:15.280
the GoTo conference. I think
it was in 2012. Yeah.

279
00:15:15.520 --> 00:15:19.870
And that they've got that
canonical book, obviously the continuous

280
00:15:19.870 --> 00:15:23.050
delivery book. And so that's
really the difference between continuous

281
00:15:23.050 --> 00:15:27.610
delivery and continuous deployment. So
continuous deployment itself, I don't

282
00:15:27.610 --> 00:15:31.120
think is really that important,
but continuous delivery is much

283
00:15:31.150 --> 00:15:34.720
more important. So the difference
between those two as explained

284
00:15:34.720 --> 00:15:38.590
by, by those guys, it
was really that continuous deployment

285
00:15:38.590 --> 00:15:43.210
is actually deploying your software
to production or whatever environment

286
00:15:43.510 --> 00:15:47.080
on a continuous basis. But
continuous delivery is being able

287
00:15:47.080 --> 00:15:49.870
to deploy that whenever you
want. So being in a

288
00:15:49.870 --> 00:15:52.420
situation where you can decide,
you want to deploy to

289
00:15:52.420 --> 00:15:54.850
production now, and you can
do it, it's not going

290
00:15:54.850 --> 00:15:57.310
to take a three month
process of signatures and things

291
00:15:57.310 --> 00:16:00.640
like that. So I think
it's much more important to

292
00:16:00.640 --> 00:16:04.720
be able to deploy rather
than actually deploying it continuously.

293
00:16:05.440 --> 00:16:08.560
Okay. So if someone's listening
and thinking, well, you know,

294
00:16:08.560 --> 00:16:10.960
we just got our continuous
integration system set up. Maybe

295
00:16:10.960 --> 00:16:14.140
it's time to start thinking
about continuous deployment. Maybe they

296
00:16:14.140 --> 00:16:16.240
can just take it back
a notch and say, well,

297
00:16:16.240 --> 00:16:19.990
let's just get a reliable
push button deployment. Yeah. And

298
00:16:20.330 --> 00:16:22.600
that's kind of the first
point. And even in some

299
00:16:22.600 --> 00:16:25.960
really, really like cutting edge,
move fast and break stuff,

300
00:16:25.990 --> 00:16:29.410
kind of environments, they still
don't push the production continuously.

301
00:16:29.950 --> 00:16:32.410
They still might want, you
know, one person in charge

302
00:16:32.410 --> 00:16:34.420
to be able to push
the button. But if that's

303
00:16:34.420 --> 00:16:36.580
all it takes pushing a
button, then that's a fantastic

304
00:16:36.580 --> 00:16:39.220
position to be in. Right.
It sure does make us

305
00:16:39.220 --> 00:16:41.160
feel bad though. Don't you
like, you know, we're oppressed

306
00:16:41.170 --> 00:16:45.190
deploys 68,000 times a day.
It's just like, really we

307
00:16:45.190 --> 00:16:47.020
do a twice a year,
you know, it's just, it's

308
00:16:47.020 --> 00:16:49.480
kind of set up to
continuous deployment, like how much

309
00:16:49.480 --> 00:16:52.600
is too much. Yeah. Yeah.
And it depends a little

310
00:16:52.600 --> 00:16:55.410
bit how your customers get
your product to, so in

311
00:16:55.420 --> 00:16:59.920
our case with octopus, we,
we will, we will deploy

312
00:16:59.920 --> 00:17:02.620
whenever we think it makes
sense to deploy to production.

313
00:17:02.800 --> 00:17:06.490
We could probably do it
continuously, but that doesn't make

314
00:17:06.490 --> 00:17:09.040
for a really good experience
with people going to download

315
00:17:09.040 --> 00:17:12.700
the latest version, even as
it stands. Usually when we

316
00:17:12.700 --> 00:17:15.970
release a major or a
minor version, the next few

317
00:17:15.970 --> 00:17:18.610
days we'll have a few
updates to fix some small

318
00:17:18.610 --> 00:17:21.610
bugs that we found. And
we get complaints about that.

319
00:17:21.940 --> 00:17:24.970
People saying, you know, you
just released 3.4 and now

320
00:17:24.970 --> 00:17:26.980
it's four days later and
you're up to 3.4 dot

321
00:17:26.980 --> 00:17:29.290
four, you know, can you
tell me when it's stable?

322
00:17:29.500 --> 00:17:32.680
So well, well, it feels,
it feels sloppy. Yeah. But

323
00:17:32.680 --> 00:17:36.760
I mean, the alternative really
is sitting on those little

324
00:17:36.760 --> 00:17:39.820
bugs. Yeah. Yeah. And I
think that, you know, dot

325
00:17:39.820 --> 00:17:42.130
net core is going to
start seeing that too. You

326
00:17:42.130 --> 00:17:43.810
know, we put out we'll,
we'll put out one Oh

327
00:17:43.810 --> 00:17:47.200
and one Oh one and
things like that. And for

328
00:17:47.200 --> 00:17:49.830
some people they're gonna be
like, awesome. Look really actively

329
00:17:49.830 --> 00:17:52.530
working on this. And other
people are going to say,

330
00:17:52.560 --> 00:17:55.230
wow, this is not okay,
wait two years and make

331
00:17:55.230 --> 00:17:57.030
it really stable. And then
talk to me when it's

332
00:17:57.030 --> 00:17:59.630
done. Yeah. That's true. That's
definitely the case. It makes

333
00:17:59.630 --> 00:18:02.060
things, yeah. Things are a
lot easier if you're deploying

334
00:18:02.060 --> 00:18:04.460
to the web, of course,
because then you can deploy

335
00:18:04.460 --> 00:18:07.190
these things and they just
happen. And, you know, nobody

336
00:18:07.190 --> 00:18:09.470
has to download a new
version or update their packages

337
00:18:09.470 --> 00:18:11.600
or anything like that. It
just, you know, Oh, this

338
00:18:11.600 --> 00:18:16.340
new features just lit up,
which is great. So it

339
00:18:16.340 --> 00:18:19.010
sounds like when I, when
I think the word octopus,

340
00:18:19.040 --> 00:18:21.620
it's not just deploying to
one place it's to point

341
00:18:21.650 --> 00:18:25.340
to farms of places. And
it's the orchestration of not

342
00:18:25.340 --> 00:18:27.260
just a bunch of websites
and a bunch of places,

343
00:18:27.770 --> 00:18:32.270
but if you had a
large multi-tiered multilayered application, like

344
00:18:32.270 --> 00:18:34.940
a, like a SharePoint installation
or something big that required

345
00:18:34.940 --> 00:18:37.760
five, 10, 15 machines, and
they're all had different roles

346
00:18:38.150 --> 00:18:39.860
that, that could get pretty
hairy. If I was going

347
00:18:39.860 --> 00:18:42.170
to try to write that
in a PowerShell script. Yeah,

348
00:18:42.200 --> 00:18:45.200
definitely. And so, I mean,
you could, you could still

349
00:18:45.200 --> 00:18:47.480
write that in a PowerShell
script, I'd probably recommend writing

350
00:18:47.480 --> 00:18:50.030
it in a few PowerShell
script or at least having

351
00:18:50.030 --> 00:18:52.490
some decent logging. So if
something goes wrong, you know,

352
00:18:52.490 --> 00:18:56.420
roughly where you're up to,
but something like octopus will

353
00:18:56.420 --> 00:19:00.650
have individual steps for each
of those tasks. And by

354
00:19:00.650 --> 00:19:04.010
treating the targets as kind
of a, a first class

355
00:19:04.010 --> 00:19:06.800
citizen, you can say, well,
on my web role, I

356
00:19:06.800 --> 00:19:10.220
want you to deploy this,
you this ISP net website

357
00:19:10.220 --> 00:19:14.240
and set up IIS. And
if you add another, add

358
00:19:14.240 --> 00:19:17.660
another machine to that web
farm, then you know that

359
00:19:17.930 --> 00:19:20.450
that machine will then get
those, those steps run as

360
00:19:20.450 --> 00:19:23.420
well. Let me, let me
describe something to you. And

361
00:19:23.420 --> 00:19:25.880
you can maybe tease me
if this was dumb, because

362
00:19:26.200 --> 00:19:28.370
if you go out and
you go in and Google

363
00:19:28.370 --> 00:19:33.680
for large scale PowerShell deployment,
you'll find a paper that

364
00:19:33.680 --> 00:19:37.430
I wrote in July of
2007. So, you know, it's,

365
00:19:37.700 --> 00:19:40.730
what is that nine years
ago? So I apologize. And

366
00:19:40.730 --> 00:19:45.650
I actually wrote it in
2000, November, 2006. It's a PDF

367
00:19:45.650 --> 00:19:47.930
I wrote for my CTO
that was called managing large

368
00:19:47.930 --> 00:19:52.250
scale deployment with PowerShell. And,
you know, you have to

369
00:19:52.250 --> 00:19:55.220
remember, people have to remember
when this happened, right. PowerShell

370
00:19:55.400 --> 00:20:01.160
1.0, you know, visual studio,
2003, 2005 windows server, 2003,

371
00:20:01.310 --> 00:20:03.770
you know, we still had
Nant for builds and stuff.

372
00:20:03.800 --> 00:20:08.600
Okay. And what we ended
up doing was putting custom

373
00:20:08.600 --> 00:20:12.320
services on all of our
windows machines. So you'd boot

374
00:20:12.320 --> 00:20:14.150
up a brand new windows
machine. You'd put a service

375
00:20:14.150 --> 00:20:17.630
on it and then we'd
have a we'd would basically

376
00:20:17.630 --> 00:20:20.060
we would, it was bad.
But again, I feel bad

377
00:20:20.150 --> 00:20:24.020
even explaining it. We checked
in the binaries into source

378
00:20:24.020 --> 00:20:27.860
control, like subversion and then
labeled them and said, here's

379
00:20:27.860 --> 00:20:32.270
the binaries. Then I would
call out to 15 different

380
00:20:32.720 --> 00:20:37.070
windows services and say, go
get that label. They would

381
00:20:37.070 --> 00:20:41.870
then check it out, read
only into the location, into

382
00:20:41.870 --> 00:20:46.610
AIS www route or whatever,
run some scripts. And you

383
00:20:46.610 --> 00:20:50.620
would have giant distributed data
center solution completely distributed. And

384
00:20:50.620 --> 00:20:53.520
then you would call out
to those things. And so

385
00:20:53.530 --> 00:20:56.500
this was, you know, bailing
wire and miracles. If people

386
00:20:56.500 --> 00:21:00.550
know who MacGyver was. Yeah.
This is the MacGyver scripting

387
00:21:00.610 --> 00:21:05.670
thing. But I mean, we
insane From a conceptual point

388
00:21:05.670 --> 00:21:08.190
of view. I don't mind
that that's quite good. I

389
00:21:08.190 --> 00:21:12.450
mean, you're, you're, you're meeting
the, the requirements of, you

390
00:21:12.450 --> 00:21:14.970
know, you've got this one
bill, there's one set of

391
00:21:14.970 --> 00:21:17.520
packages that you're deploying and
you're deploying them in a

392
00:21:17.520 --> 00:21:20.700
consistent way. Right. That's the
same scripts that run on

393
00:21:20.700 --> 00:21:23.130
every mill, those machines. Okay.
So to add a new

394
00:21:23.130 --> 00:21:25.860
machine to a web farm,
for example, you would spin

395
00:21:25.860 --> 00:21:29.700
that machine up, install the
agent on that machine and

396
00:21:29.700 --> 00:21:33.030
then yeah. And it wasn't
exactly. It would just join

397
00:21:33.030 --> 00:21:37.740
in. So join in and
presuming everything is completely scripted.

398
00:21:37.740 --> 00:21:41.640
Right? There's nobody ID paying
into a thing and file

399
00:21:41.640 --> 00:21:44.340
copy. No, that was, that
was the point was to

400
00:21:44.340 --> 00:21:47.460
keep us on. Yeah. Yeah.
I mean, that's actually not

401
00:21:47.460 --> 00:21:52.890
too far away from what
octopus does. We, we keep

402
00:21:52.890 --> 00:21:56.100
the packages in a different
way, but we run those

403
00:21:56.100 --> 00:21:58.980
same tasks on those target
machines to pull down the

404
00:21:59.340 --> 00:22:01.590
package that needs to be
deployed and run the scripts

405
00:22:01.590 --> 00:22:04.650
that need to need to
be run. How do you

406
00:22:04.650 --> 00:22:07.950
ensure though, that the files
are like, you know, unchanged,

407
00:22:07.950 --> 00:22:09.960
because what we would do
is we would have, because

408
00:22:09.960 --> 00:22:11.820
the files were in source
control, we could tell if

409
00:22:11.820 --> 00:22:14.430
they were dirty, if they'd
been modified and then we

410
00:22:14.430 --> 00:22:17.160
could revert to a label,
how do you, how does

411
00:22:17.160 --> 00:22:19.560
the does? So it was
a little bit weird, but

412
00:22:19.620 --> 00:22:23.220
it does there's octopus and
systems like it check and

413
00:22:23.220 --> 00:22:24.840
make sure the system doesn't
get changed or do you

414
00:22:24.840 --> 00:22:28.890
just redeploy? So octopus has
a concept of a release

415
00:22:28.920 --> 00:22:31.800
as a noun, which is
kind of a definition of

416
00:22:31.890 --> 00:22:34.110
everything that needs to happen
to get version of the

417
00:22:34.110 --> 00:22:38.280
application running. And so that
will include the versions of

418
00:22:38.280 --> 00:22:40.320
the packages that you're deploying.
So let's say you have

419
00:22:40.320 --> 00:22:45.330
a, have a web application
and a web API and

420
00:22:45.330 --> 00:22:49.020
some database scripts or something
like that. Those, those packages

421
00:22:49.020 --> 00:22:52.590
will be versioned. And then
in octopus you would say,

422
00:22:52.590 --> 00:22:54.750
right, I'm going to create
a release. And this release

423
00:22:54.750 --> 00:23:01.050
is 1.2, for example. And
it includes the web package

424
00:23:01.380 --> 00:23:05.730
1.2 and maybe the API
package 1.0, cause that one

425
00:23:05.730 --> 00:23:09.270
hasn't changed and the database
scripts 1.0, cause they haven't

426
00:23:09.270 --> 00:23:12.720
changed. And so that's your
release. And then when you

427
00:23:12.720 --> 00:23:15.030
deploy that release, it will
use that version of the

428
00:23:15.030 --> 00:23:18.810
packages in your dev environment.
And then if you deployed

429
00:23:18.810 --> 00:23:21.360
a test, for example, that
we use that same, those

430
00:23:21.360 --> 00:23:24.930
same versions of the packages.
So you, the V the

431
00:23:24.990 --> 00:23:27.360
packages that actually get pushed
out to the machines are

432
00:23:27.360 --> 00:23:30.150
the ones that are defined
in that release that you're

433
00:23:30.150 --> 00:23:33.720
pushing out. Okay. And do
you ever have to worry

434
00:23:33.720 --> 00:23:35.790
about, like, what if something
gets changed? Do you start

435
00:23:35.790 --> 00:23:37.860
seeing a flaky, like we
talked about at the beginning,

436
00:23:38.430 --> 00:23:42.090
Oh, sorry. If something changes
on a target machine, You

437
00:23:42.090 --> 00:23:45.090
know, someone does remote in,
or a file gets uploaded

438
00:23:45.170 --> 00:23:49.460
corrupted, or, you know, something
bad happens and www seven

439
00:23:50.030 --> 00:23:54.220
is different than one through
eight. Yeah. That that's. So

440
00:23:54.220 --> 00:23:57.340
at the moment, octopus is
very prescriptive in what you

441
00:23:57.340 --> 00:23:59.260
tell it to do. So
it will, it will do

442
00:23:59.260 --> 00:24:01.870
the steps that you perform.
And then beyond that, it'll

443
00:24:01.870 --> 00:24:05.320
keep your, keep an eye
on that machine to make

444
00:24:05.320 --> 00:24:07.210
sure it can still talk
to it. But beyond that,

445
00:24:07.270 --> 00:24:10.750
it doesn't really, you know,
check that the right versions

446
00:24:10.750 --> 00:24:14.950
of, of system resources and
things are running that said

447
00:24:14.950 --> 00:24:19.690
we've recently released in 3.4
machine policies. So when it

448
00:24:19.690 --> 00:24:23.320
does a health check, you
can run arbitrary PowerShell as

449
00:24:23.320 --> 00:24:26.470
part of that health check.
So you could write PowerShell

450
00:24:26.470 --> 00:24:28.870
to say, look, I need
to make sure these things

451
00:24:28.870 --> 00:24:31.210
are on these versions. Otherwise
the machine is not healthy.

452
00:24:31.720 --> 00:24:34.000
Check the Shaws of the,
you know, the shower hashes

453
00:24:34.000 --> 00:24:38.020
or whatever. Yeah. But I
mean, ultimately they're your machines.

454
00:24:38.020 --> 00:24:40.330
If you want to go
in and copy some files

455
00:24:40.330 --> 00:24:43.970
around, you know, you probably
can, if you have, you

456
00:24:43.980 --> 00:24:47.650
have the permissions, but it's
yeah. It all depends. We

457
00:24:47.650 --> 00:24:50.770
were worried from a banking
perspective that, you know, evil,

458
00:24:51.010 --> 00:24:53.650
thanking evil software that we
didn't intend got out there,

459
00:24:53.830 --> 00:24:55.390
but it sounds like what
I was doing at the

460
00:24:55.390 --> 00:24:57.460
file level. You're already doing
it, the package level, you

461
00:24:57.460 --> 00:25:00.610
know, what packages should you
put up? Yeah. Yeah. That's

462
00:25:00.610 --> 00:25:03.490
all right. So then I
hear a lot when I

463
00:25:03.490 --> 00:25:08.680
hear about deployment about this
idea of DSC desired state

464
00:25:08.680 --> 00:25:13.660
configuration. And it seems to
me like it's, and this

465
00:25:13.660 --> 00:25:16.120
is really oversimplifying and I'll
probably get in trouble for

466
00:25:16.120 --> 00:25:18.730
this, but it feels like
it's the difference between being

467
00:25:18.730 --> 00:25:22.360
very declarative and saying, I
wish the machine looked like

468
00:25:22.420 --> 00:25:26.230
this versus being very programmatic
where it's like, here's some

469
00:25:26.230 --> 00:25:28.750
scripts that will make it
look like that. Yep. Yeah.

470
00:25:29.950 --> 00:25:35.860
We, so in that respect,
octopus is very programmatic, like

471
00:25:35.860 --> 00:25:38.560
very prescriptive and you do
this, then do this, then

472
00:25:38.560 --> 00:25:42.190
do this. If you look
at something like chef or

473
00:25:42.190 --> 00:25:46.330
puppet, I believe they're more
declarative. Let's say this machine

474
00:25:46.330 --> 00:25:49.450
is an NDRC. Obviously this
is what the machine should

475
00:25:49.450 --> 00:25:53.590
look. Yeah, yeah. What they
compile into, like, because ultimately

476
00:25:53.590 --> 00:25:55.840
everything becomes instructions, right. Someone
has to go and do

477
00:25:55.840 --> 00:26:00.190
this, if that, if that
Yeah. Yeah, they do. And

478
00:26:00.220 --> 00:26:02.140
I guess this is where,
and this is probably just

479
00:26:02.140 --> 00:26:05.080
me being uncomfortable with it,
but I'm kind of uncomfortable

480
00:26:05.080 --> 00:26:07.030
with the idea of how
you have a look at

481
00:26:07.030 --> 00:26:09.730
this machine, you know, telling
an automated process, have a

482
00:26:09.730 --> 00:26:11.800
look at this machine and
then make it look like

483
00:26:11.800 --> 00:26:15.670
this. Have you what, the
questions that arise in my

484
00:26:15.670 --> 00:26:18.070
mind, I, you know, have
you covered everything? You know,

485
00:26:18.460 --> 00:26:20.830
if you're saying, I want
to be this version and

486
00:26:20.830 --> 00:26:23.680
PowerShell this version to be
on the machine, what about

487
00:26:23.680 --> 00:26:26.470
the other stuff? That's that
you haven't checked that you're

488
00:26:26.470 --> 00:26:29.290
not, you're not verifying now.
That's probably not going to

489
00:26:29.290 --> 00:26:33.630
be solved by being prescriptive
rather than declarative, but it's

490
00:26:33.630 --> 00:26:36.400
it's problems that kind of
get brushed under the rug.

491
00:26:36.430 --> 00:26:40.630
I think that said, I
don't think that's a reason

492
00:26:40.630 --> 00:26:43.980
not to use PowerShell DSC
or, or things like that,

493
00:26:44.520 --> 00:26:46.350
But it doesn't that mean
that I could use PowerShell

494
00:26:46.350 --> 00:26:50.430
DSC with something like yeah.
Octopus and use them together.

495
00:26:50.430 --> 00:26:52.790
And then I get the
best of both worlds. Yeah,

496
00:26:52.820 --> 00:26:54.980
absolutely. And that's what a
lot of people will do.

497
00:26:55.550 --> 00:26:58.880
And that comes back to
the treating servers, like cattle,

498
00:26:58.880 --> 00:27:02.510
not pets or whatever, the
new, I think that one's

499
00:27:02.780 --> 00:27:05.130
not terribly politically correct anymore.
So yeah. I don't think

500
00:27:05.130 --> 00:27:06.500
that it is politically correct,
but I think the point

501
00:27:06.500 --> 00:27:09.410
is that you love your
pets. Yes. And you do

502
00:27:09.410 --> 00:27:11.630
not care at all about
your servers and you should

503
00:27:11.630 --> 00:27:14.060
not get attached to them
and name them after like

504
00:27:14.870 --> 00:27:17.180
all the people in the
Lord of the rings. Just

505
00:27:17.180 --> 00:27:19.490
exactly right. It really shouldn't
be web one and web

506
00:27:19.490 --> 00:27:21.770
seven and, you know, Hey
web seven goes down, you

507
00:27:21.770 --> 00:27:23.450
shut it off and you
can another way. Yeah. Yeah,

508
00:27:23.480 --> 00:27:26.390
exactly. Right. And, and by
using something like doc, you

509
00:27:26.390 --> 00:27:28.610
can say, well, this machine
is just not behaving very

510
00:27:28.610 --> 00:27:31.370
well anymore. So let's just
tear it down and spin

511
00:27:31.370 --> 00:27:34.340
up a new one and
you spin up a new

512
00:27:34.340 --> 00:27:38.210
one. And we actually have
DSE. And I think in

513
00:27:38.210 --> 00:27:42.680
Azure machine extensions as well
for the technical agent, which

514
00:27:42.680 --> 00:27:44.930
is what octopus uses to
do the work on the

515
00:27:44.930 --> 00:27:48.740
target machine. So we have
integration with DSE. So you

516
00:27:48.740 --> 00:27:51.110
can say, I spin up
a new machine and I

517
00:27:51.110 --> 00:27:53.840
want an octopus tentacle to
be on it. And also

518
00:27:53.840 --> 00:27:56.660
run these scripts to register
myself as a new web

519
00:27:56.660 --> 00:28:00.920
server with octopus and in
the latest versions of octopus

520
00:28:00.920 --> 00:28:03.890
as well, octopus can respond
to those events of a

521
00:28:03.890 --> 00:28:07.310
new machine being made available
and can deploy the versions

522
00:28:07.310 --> 00:28:11.000
of the application that should
be running. So really good

523
00:28:11.000 --> 00:28:13.910
for kind of auto scaling.
And this is something, a

524
00:28:13.910 --> 00:28:16.220
lot of customers did themselves
with a whole bunch of

525
00:28:16.310 --> 00:28:18.980
scripts, but now it's kind
of out of the box.

526
00:28:20.030 --> 00:28:23.240
Interesting. Okay. And then if
I've got, you know, dev

527
00:28:23.240 --> 00:28:25.820
tests, staging and things like
that, and you know, almost

528
00:28:25.820 --> 00:28:27.950
my own little personal cloud
and things that have got

529
00:28:27.950 --> 00:28:33.080
internally do, does octopus understand
not just the deployment pipeline,

530
00:28:33.080 --> 00:28:35.180
but the run up to,
you know, get it into

531
00:28:35.180 --> 00:28:37.700
development first and get into
smoke testing, and then have

532
00:28:37.700 --> 00:28:40.610
it promote builds, get promoted
basically all the way out

533
00:28:40.610 --> 00:28:43.430
the door. Yeah. So you
can define the life cycle

534
00:28:43.610 --> 00:28:46.940
of, of what goes, where,
and even who can deploy

535
00:28:47.360 --> 00:28:50.540
to the different environments. So
the typical one is, you

536
00:28:50.540 --> 00:28:53.390
know, you might have your
dev, which everybody can access

537
00:28:53.420 --> 00:28:56.690
and then test which most
people can access. Maybe just

538
00:28:56.690 --> 00:28:58.490
the testers are allowed to
click the button to go

539
00:28:58.490 --> 00:29:01.520
to that test environment. But
beyond that, you know, your

540
00:29:01.520 --> 00:29:05.210
developers, you probably don't necessarily
in an organization in a

541
00:29:05.210 --> 00:29:07.970
large organization, want to give
them the ability to pull

542
00:29:07.970 --> 00:29:10.790
it, to deploy, to production
by clicking a button. So

543
00:29:10.790 --> 00:29:13.280
maybe they can see what's
running in production, but it's

544
00:29:13.280 --> 00:29:17.690
the CEO who clicks the
button, but you can define.

545
00:29:17.690 --> 00:29:19.760
Yeah. So you can define
that life cycle of, well,

546
00:29:19.760 --> 00:29:21.680
we need to go to
here and then we need

547
00:29:21.680 --> 00:29:25.820
to go to at least
two test environments first, and

548
00:29:25.820 --> 00:29:27.800
then we can go to
QA and then we can

549
00:29:27.800 --> 00:29:31.640
go to production, for example.
So you're pretty chill. You're

550
00:29:31.640 --> 00:29:35.510
pretty relaxed person. How important
do you think it is

551
00:29:35.510 --> 00:29:39.020
for people who are listening
to this podcast to think

552
00:29:39.020 --> 00:29:40.970
hard when they get to
work? Cause they may be

553
00:29:41.320 --> 00:29:43.510
to us on the way
to work Right now about

554
00:29:43.510 --> 00:29:46.600
their deployment. And if they
haven't got at least push

555
00:29:46.600 --> 00:29:49.300
button deployment, if not continuous
deployment that they need to

556
00:29:49.300 --> 00:29:51.310
like really make this the
year that they make that

557
00:29:51.310 --> 00:29:54.760
happen. I think it's a
really important thing to do

558
00:29:55.300 --> 00:29:57.820
if you're in an environment
now though, where you have

559
00:29:57.820 --> 00:30:01.150
a team of 20 developers
and when you get to

560
00:30:01.150 --> 00:30:04.000
production, that's the first time
you do a compilation of

561
00:30:04.000 --> 00:30:06.820
everybody's code, then those are
problem probably problems you have

562
00:30:06.820 --> 00:30:10.360
to sort out first. Okay,
good point. I'd say. Yeah.

563
00:30:10.390 --> 00:30:14.020
Continuous integration first. And then
once, once you've got that

564
00:30:14.020 --> 00:30:16.090
down, once you can commit
your code and know that,

565
00:30:16.330 --> 00:30:19.660
you know, you haven't broken
anything hideous, then it's definitely

566
00:30:19.660 --> 00:30:22.660
time to start looking at
continuous delivery or continuous deployment.

567
00:30:23.290 --> 00:30:28.000
Okay. So it really is
a formal, you've got to

568
00:30:28.000 --> 00:30:31.270
take a hard look at
your application development life cycle

569
00:30:31.600 --> 00:30:33.970
and how you're going to
treat that. I think so.

570
00:30:33.970 --> 00:30:37.270
Yeah. Yeah. I mean, there's
no point having everything automated

571
00:30:37.270 --> 00:30:38.980
to go all the way
through to production if you're

572
00:30:38.980 --> 00:30:42.010
not really sure what the
code looks like before you

573
00:30:42.010 --> 00:30:47.500
do that. Yeah. That's a
very valid point. Cool. Well,

574
00:30:47.500 --> 00:30:50.230
thanks so much for chatting
with me today. No problem.

575
00:30:51.010 --> 00:30:54.130
It's Damien Brady from octopus
deploy, you can find of

576
00:30:54.130 --> 00:30:57.940
course, Damien online on Twitter
and do check out octopus

577
00:30:57.940 --> 00:31:00.280
deploy like a, like I
said, they have sponsored the

578
00:31:00.280 --> 00:31:03.790
blog before, but I also
really respect the work that

579
00:31:03.880 --> 00:31:05.830
Paul and his team have
done down there. And it's

580
00:31:05.830 --> 00:31:09.670
worth checking out. This has
been another episode of Hanselminutes

581
00:31:09.760 --> 00:31:18.450
and we'll see you again
next week. <inaudible>.

