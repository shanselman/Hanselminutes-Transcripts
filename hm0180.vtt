WEBVTT FILE

1
00:00:12.030 --> 00:00:17.040
From Hansel minutes.com. It's Hanselman.
It's a weekly discussion with

2
00:00:17.040 --> 00:00:21.480
web developer and technologists. Scott
Hanselman. This is Lawrence Ryan announcing

3
00:00:21.480 --> 00:00:27.060
show number one 80 recorded
live Thursday, September 17th, 2009. Support for

4
00:00:27.060 --> 00:00:30.930
Hanselman it's just provided by
Tellerik rad controls, the most

5
00:00:30.930 --> 00:00:34.380
comprehensive suite of components for
windows forms and asp.net web

6
00:00:34.380 --> 00:00:43.620
applications online@wwwdottelerik.com. In this episode,
Scott talks about rich internet

7
00:00:43.650 --> 00:00:49.680
application services with Brad Abrams.
Hi, this is Scott Hanselman

8
00:00:49.680 --> 00:00:51.570
and this is another episode
of Hansel minutes. And I'm

9
00:00:51.570 --> 00:00:54.090
sitting down today with Brad
Abrams. Brad runs a team

10
00:00:54.090 --> 00:00:56.280
and the.net framework for Microsoft.
And you may have heard

11
00:00:56.280 --> 00:00:58.740
his name over the years
in reference to the base

12
00:00:58.740 --> 00:01:01.370
class libraries. What are you
working on now, Brad? Oh,

13
00:01:01.370 --> 00:01:04.430
Hey Scott. So I'm working
on a two very fun

14
00:01:04.430 --> 00:01:08.240
project. I love working on
one project. So one is

15
00:01:08.240 --> 00:01:15.320
the manage, the sensibility framework
and the other is.net reassert.net

16
00:01:15.440 --> 00:01:20.540
Rhea services. So RIA is
rich internet application. I love

17
00:01:20.540 --> 00:01:23.870
these names. We have these
extensive marketing guys at Microsoft.

18
00:01:23.870 --> 00:01:28.680
We come up with a
beautiful name. So really what

19
00:01:28.700 --> 00:01:31.730
we're trying to do with,
with relay services is make

20
00:01:31.730 --> 00:01:37.940
it way easier to bill
into your application in here.

21
00:01:37.940 --> 00:01:42.470
So if you look at
the vast majority of developers

22
00:01:42.560 --> 00:01:46.280
on the platform today, and
maybe this is true outside

23
00:01:46.280 --> 00:01:49.580
the.net platform too, they're mostly
building sees here app. They

24
00:01:49.580 --> 00:01:52.610
have a database somewhere and
they have some UI. Maybe

25
00:01:52.610 --> 00:01:58.010
the UI is in PHP
or asp.net, and maybe it's

26
00:01:58.010 --> 00:02:00.110
not the best practice in
the world, but a lot

27
00:02:00.110 --> 00:02:02.600
of the times that UI
connects directly to that database

28
00:02:02.750 --> 00:02:06.380
pulls data out. And we
often see that's true in

29
00:02:06.410 --> 00:02:10.310
client app and WinForms app
and VPF. A lot of

30
00:02:10.310 --> 00:02:14.330
those VVCS apps have mindsight
directly through the data. And

31
00:02:14.420 --> 00:02:16.530
as we move this, does
that resonate with you? You

32
00:02:16.550 --> 00:02:19.910
can get, I've always made
a big differentiation in my

33
00:02:19.910 --> 00:02:23.000
mind between tiers and layers.
Is that an agreed upon

34
00:02:23.660 --> 00:02:26.420
taxonomy or is that just
me? You know, that's a

35
00:02:26.420 --> 00:02:29.420
great question. So we argue
about that a lot internally,

36
00:02:30.860 --> 00:02:34.400
so no, I don't think
there's any great standard on

37
00:02:34.400 --> 00:02:37.940
that. What do you mean
by like, by layer? For

38
00:02:37.940 --> 00:02:41.060
me, I've always said in
architecture probably over the last

39
00:02:41.600 --> 00:02:44.270
five or six years that
a layer is a logical

40
00:02:44.270 --> 00:02:46.730
thing and a tear is
a physical thing. So you

41
00:02:46.730 --> 00:02:50.900
might have a multilayered thing.
It may be three layers,

42
00:02:51.140 --> 00:02:54.410
but it's really only two
tears, tears being physical. Yeah.

43
00:02:54.860 --> 00:02:57.830
Yeah. I agree. I agree.
So, yeah. So I guess

44
00:02:57.830 --> 00:03:00.610
we're talking about late, we're
talking layers here and I

45
00:03:00.610 --> 00:03:05.470
would venture to say most
developers, you know, the distinction

46
00:03:05.740 --> 00:03:08.050
would be lost on them
and they're not putting layers

47
00:03:08.050 --> 00:03:13.000
in their, in their products
either. It's some extent, you

48
00:03:13.000 --> 00:03:15.550
know, Microsoft to blame for
some of that. I mean,

49
00:03:15.790 --> 00:03:17.560
if you could take a
look at a lot of

50
00:03:17.560 --> 00:03:23.230
the demos and examples that
we've done for <inaudible>, you

51
00:03:23.230 --> 00:03:26.620
know, a lot of them
do show, Oh, ESPN app

52
00:03:26.630 --> 00:03:29.040
connecting directly to the database.
So this is a, like

53
00:03:29.040 --> 00:03:33.060
a website talking directly to
SQL server using the SQL

54
00:03:33.060 --> 00:03:37.380
server protocol. Yeah. So we
have like, you know, back

55
00:03:37.380 --> 00:03:40.710
in the day we introduced
the data sources and we

56
00:03:40.710 --> 00:03:44.940
have 80 on that data
source and all that jazz.

57
00:03:45.750 --> 00:03:47.540
And now we have it
linked to see people in

58
00:03:47.560 --> 00:03:51.270
entity framework, but that's effectively
still going directly against the

59
00:03:51.270 --> 00:03:55.260
database. And this is bad.
Why, why is that bad?

60
00:03:55.680 --> 00:03:57.300
Well, I know, but I
have to play the, I

61
00:03:57.300 --> 00:03:59.820
have to play the interviewer.
Well, I think a lot

62
00:03:59.820 --> 00:04:04.290
of architects could complain about
that, but to be honest

63
00:04:04.290 --> 00:04:07.530
with you, no, because of
things like Gail and flexibility

64
00:04:07.530 --> 00:04:11.490
and maintenance of the code,
but I think it really

65
00:04:11.490 --> 00:04:14.280
becomes a problem. When you
start moving into these, what

66
00:04:14.280 --> 00:04:19.290
are called Rhea application patterns
with Ajax and with a

67
00:04:19.350 --> 00:04:21.960
silver light, it's not really
possible to do that direct

68
00:04:21.960 --> 00:04:25.740
line size of the database
and Google, right? You have

69
00:04:25.740 --> 00:04:27.810
to go through a web
view. And all of a

70
00:04:27.810 --> 00:04:30.120
sudden we take taken this
huge mass of developers that

71
00:04:30.120 --> 00:04:32.340
know how to do the
two tier app. And you've

72
00:04:32.340 --> 00:04:36.330
moved them into a fundamentally
three here world, where now

73
00:04:36.330 --> 00:04:39.690
there's the database, there's the
middle tier. And there's where

74
00:04:39.990 --> 00:04:43.680
the client's running either in
Ajax or flash for that.

75
00:04:45.390 --> 00:04:50.940
Okay. Is it primarily a
Rhea originally an application problem

76
00:04:51.270 --> 00:04:53.310
or is it a problem
with scale? Cause we always

77
00:04:53.310 --> 00:04:55.290
used to think when we
were building large systems, that

78
00:04:55.290 --> 00:04:58.320
the issue was going to
be that we'd need some

79
00:04:58.320 --> 00:05:01.770
intermediate machine, we'd have a
web server that would talk

80
00:05:01.770 --> 00:05:03.510
to a business layer server
that would talk to a

81
00:05:03.510 --> 00:05:06.240
database and that would provide
us more scale because we

82
00:05:06.240 --> 00:05:09.450
could say, well, I need
more web servers. They're working

83
00:05:09.450 --> 00:05:11.700
hard. Or I could say,
I need more business servers.

84
00:05:11.730 --> 00:05:15.360
They're working hard. Is this
an issue of protocol in

85
00:05:15.360 --> 00:05:18.630
that? I don't want my
browser talking directly to my,

86
00:05:19.710 --> 00:05:21.990
my database or is this
an issue of scale or

87
00:05:21.990 --> 00:05:24.990
is it both? Yeah. In
some ways I think it's

88
00:05:24.990 --> 00:05:29.010
both, I think it's first,
there's kind of a security

89
00:05:29.010 --> 00:05:34.650
issue with the database kind
of on a, on a

90
00:05:34.650 --> 00:05:38.610
web that has the people.
It's more obvious that you're

91
00:05:38.610 --> 00:05:41.970
doing that. And so it
makes people nervous to go

92
00:05:41.970 --> 00:05:45.150
do that. We don't see
a lot of Ajax app

93
00:05:45.750 --> 00:05:50.400
occupying TDS, for example, that's
the protocol that sequel server

94
00:05:50.400 --> 00:05:55.440
talks directly. So, and then
I think it is also

95
00:05:55.590 --> 00:05:59.930
a scale issue. One of
the ways I think about

96
00:05:59.930 --> 00:06:02.960
it, this may sound a
little bit pejorative, a little

97
00:06:02.960 --> 00:06:06.830
bit kind of fatherly, but
I think whenever there's an

98
00:06:06.830 --> 00:06:11.330
inflection point in the industry,
it's Microsoft responsibility to move

99
00:06:11.330 --> 00:06:14.000
customers through that inflection point
in a way that leads

100
00:06:14.000 --> 00:06:19.580
to a better architecture. So
for example, I do think

101
00:06:19.580 --> 00:06:22.070
we're in a big inflection
point now where we're moving

102
00:06:22.190 --> 00:06:26.410
into a, more of a
REIA application pattern and, and

103
00:06:26.510 --> 00:06:31.340
to help developers move there
better, we're gonna make building

104
00:06:32.090 --> 00:06:35.030
kind of correct architecture with
an into your pattern, a

105
00:06:35.030 --> 00:06:37.450
lot easier for them to
get. And when you say

106
00:06:37.450 --> 00:06:39.520
that we're, we're moving into
a, more of a REIA

107
00:06:39.580 --> 00:06:42.780
pattern, is that mean, does
that mean flash in several

108
00:06:42.790 --> 00:06:44.950
light or does that mean
that we have a lot

109
00:06:44.950 --> 00:06:47.620
more capabilities on the client
and that does that include

110
00:06:48.070 --> 00:06:52.690
a JavaScript itself? Yeah, I
think, you know, some of

111
00:06:52.690 --> 00:06:55.300
the official Microsoft folks may
know what Rhea is, but

112
00:06:55.300 --> 00:06:58.270
certainly as I look at
the industry, I think Rhea

113
00:06:58.270 --> 00:07:06.520
includes things like AJAG silver
life flash. And essentially the,

114
00:07:06.580 --> 00:07:10.450
I think the key element
of, of Ajax in the

115
00:07:10.450 --> 00:07:14.110
path of is in the
past, we have done a

116
00:07:14.110 --> 00:07:17.320
lot of arguing about, you
know, should our client app

117
00:07:17.720 --> 00:07:21.490
or web app and, and
client have a lot of

118
00:07:21.490 --> 00:07:23.560
benefits. They can take advantage
of the hardware that can

119
00:07:23.560 --> 00:07:25.600
have a rich user experience.
And when I've asked the

120
00:07:25.600 --> 00:07:30.820
better, because they're easier to
deploy and, and fundamentally deep

121
00:07:30.850 --> 00:07:34.540
question, you know, they're kinda,
there's no great answer to

122
00:07:34.540 --> 00:07:37.330
that. So what I think
the REIA pattern is doing,

123
00:07:37.660 --> 00:07:40.750
we're approaching it from both
sides saying how does the

124
00:07:41.230 --> 00:07:43.780
web to get richer? And
you're seeing that with Ajax

125
00:07:43.870 --> 00:07:49.090
today, there's some very rich
Ajax applications that are every

126
00:07:49.090 --> 00:07:52.960
bit as rich as many
desktop app. And then you're

127
00:07:52.960 --> 00:07:58.060
seeing on a desktop side,
us making the deployment mistakenly

128
00:07:58.060 --> 00:08:03.700
easier. And now with Silverlight,
we're, we're getting there with

129
00:08:03.700 --> 00:08:07.810
the ubiquity thing. We're very
close to the same ease

130
00:08:07.810 --> 00:08:10.300
of deployment as you see
with, with standard web app,

131
00:08:10.600 --> 00:08:16.180
but you have musically more
original. Okay. So let's, let's

132
00:08:16.180 --> 00:08:19.360
take it down to more
of a wire protocol minute

133
00:08:19.700 --> 00:08:23.290
for a four minute here.
So when I've done, and

134
00:08:23.290 --> 00:08:24.730
again, this was, you know,
a couple of years ago

135
00:08:24.760 --> 00:08:28.810
in banking, we had messaging
over the wire, which was,

136
00:08:28.810 --> 00:08:30.640
you know, we used to
call it as a mix,

137
00:08:30.640 --> 00:08:34.030
right web services, and then
it became Ws star and

138
00:08:34.060 --> 00:08:37.450
the web services interoperability stack.
So whether it be as

139
00:08:37.450 --> 00:08:40.990
a max or WCF kind
of classic Indigo was the

140
00:08:40.990 --> 00:08:43.270
code name. At the time
we were talking about passing

141
00:08:44.020 --> 00:08:49.330
angle brackets around via HTTP,
that described messages that were,

142
00:08:49.330 --> 00:08:50.560
and we always used to
be, you know, we had

143
00:08:50.560 --> 00:08:52.960
a post office kind of
a metaphor. We had envelopes

144
00:08:52.960 --> 00:08:56.550
and we had a dressing
and we had messaged bodies.

145
00:08:57.270 --> 00:08:59.340
And then, and that was,
and that is good. And

146
00:08:59.340 --> 00:09:02.370
then that, that works fine
when you are sending messages.

147
00:09:03.030 --> 00:09:06.660
And then there was rest,
the representational state transfer and

148
00:09:06.720 --> 00:09:12.090
rest was a, an acceptance
that HTTP has enough verbs

149
00:09:12.090 --> 00:09:16.440
that one could do crud
create, read, update, delete over

150
00:09:16.440 --> 00:09:20.640
HTTP in a fairly robust
way. And then there was

151
00:09:20.730 --> 00:09:25.080
Jason, which was basically like
XML, except instead of angled

152
00:09:25.080 --> 00:09:27.090
brackets, you got curly braces
and it was a lot

153
00:09:27.090 --> 00:09:32.370
smaller and JavaScript gobbled it
up nicely. That's a lot

154
00:09:32.370 --> 00:09:34.980
of different choices for someone
to make. As far as

155
00:09:35.220 --> 00:09:38.460
things I can talk over
port 80 and HTTP to

156
00:09:38.460 --> 00:09:43.020
my back end, what is
RIAs services as it relates

157
00:09:43.020 --> 00:09:47.600
to those existing protocols? So
the ways you think about

158
00:09:47.600 --> 00:09:50.000
Rhea services is it supports
all of that. If it's

159
00:09:50.000 --> 00:09:55.130
just a higher level programming
model buildings, WPF service, we've

160
00:09:55.130 --> 00:09:58.310
done a lot of work
with WDTF to support the

161
00:09:58.310 --> 00:10:02.480
angle brackets. That's the historical.
And we've also done work

162
00:10:02.540 --> 00:10:06.430
recently is the support rep
more of a rep of

163
00:10:06.800 --> 00:10:12.050
programming interface as well as
Jason directly from within w

164
00:10:13.100 --> 00:10:18.830
so, and what we think
is a personality I want

165
00:10:18.830 --> 00:10:22.280
to make is my first
programming assignment ever. I actually

166
00:10:22.280 --> 00:10:26.660
got paid to write CA
I was, I was dealing

167
00:10:26.660 --> 00:10:30.050
with long and far. It
kind of far in short.

168
00:10:30.920 --> 00:10:33.620
I do remember long before
runners in the wind, 33

169
00:10:33.620 --> 00:10:39.300
last day have to go
think about that. And it

170
00:10:39.380 --> 00:10:44.840
made a lot, a lot
of life, right? And I

171
00:10:44.840 --> 00:10:48.650
think this question of, do
you rest or do Jake,

172
00:10:48.830 --> 00:10:52.760
if it's the same thing,
just five years from now,

173
00:10:52.970 --> 00:10:55.310
I hope we will have
be having to spend a

174
00:10:55.310 --> 00:10:58.820
bunch of time talking about
that. And the conversation will,

175
00:10:58.840 --> 00:11:01.070
we'll be moving up to
the back. Like, it'll just

176
00:11:01.070 --> 00:11:03.800
be a given that if
you're writing a modern Rhea

177
00:11:03.800 --> 00:11:06.740
service, that it supports all
of it. Yeah, it's fine.

178
00:11:06.800 --> 00:11:10.880
If you, if it turns
out they're each good for,

179
00:11:11.000 --> 00:11:15.350
or one scenario, for example,
Jason is by far the

180
00:11:15.350 --> 00:11:17.720
best thing to do. If
you have an Ajax point,

181
00:11:17.840 --> 00:11:19.220
you have an apex client,
you know what he'd be

182
00:11:19.220 --> 00:11:22.130
parking that is so the
envelope like that makes no

183
00:11:22.130 --> 00:11:27.080
sense whatsoever. But if you
talk to me.net.net, which is

184
00:11:27.080 --> 00:11:29.000
in the case in many
of these silver light apps,

185
00:11:29.240 --> 00:11:32.780
I am running this server.
And when did it Dawn

186
00:11:32.780 --> 00:11:34.670
that framework on the server
and on the client, I'm

187
00:11:34.670 --> 00:11:38.600
running silver life, that's dot
net. Is there something we

188
00:11:38.600 --> 00:11:41.930
can do to have a
super efficient protocol for that

189
00:11:42.500 --> 00:11:48.980
binary, blah, blah, blah. You
see what I'm saying? Yeah.

190
00:11:49.010 --> 00:11:51.570
So remoting back in the
day did it did a

191
00:11:51.760 --> 00:11:57.730
very nice kind of efficient
model, but the way we

192
00:11:57.730 --> 00:12:01.810
think about it today is
actually in Silverlight three WTF

193
00:12:01.830 --> 00:12:09.240
introduced essentially binary. So he's
still, but So it's the,

194
00:12:09.240 --> 00:12:11.370
so it's yeah, this is,
this is the binary XML.

195
00:12:11.370 --> 00:12:15.240
It's the soap object model
squished and made efficient. Yeah,

196
00:12:15.880 --> 00:12:18.870
I think we need to
think about as developers, as

197
00:12:19.440 --> 00:12:23.190
optical engineers is what is
the programming surface that we're

198
00:12:23.190 --> 00:12:26.190
writing again? What's it look
like to write this and

199
00:12:26.190 --> 00:12:30.420
do is the way I
structured my server client logic

200
00:12:30.450 --> 00:12:33.900
different because I had a
Jason Head on the thing or

201
00:12:33.960 --> 00:12:36.510
I have a rep head
or, or I have this

202
00:12:36.540 --> 00:12:40.560
binary hip in our assertion
is, is not, not that

203
00:12:40.560 --> 00:12:43.470
different. Okay. So I want
to just make clear for

204
00:12:43.470 --> 00:12:47.130
listeners because I want to
understand from the top down

205
00:12:47.130 --> 00:12:49.680
from the bottom up, is
there a change to the

206
00:12:49.680 --> 00:12:51.780
protocols that I'm, I know
how to use as the

207
00:12:51.780 --> 00:12:55.890
wire format look different when
I'm using Rhea services? Yeah.

208
00:12:55.920 --> 00:13:00.990
The wire format is exactly
w yeah. With WPF offices.

209
00:13:01.980 --> 00:13:04.680
The, literally when you build
a Reyes service, it is

210
00:13:04.680 --> 00:13:08.280
a WCF service. So there's
not something funny or fancy

211
00:13:08.280 --> 00:13:10.590
going on. There's not, is
there any kind of Microsoft

212
00:13:10.590 --> 00:13:13.560
specific namespace type stuff happening?
Like what if I wanted

213
00:13:13.560 --> 00:13:16.200
to call this with something
else? Yeah. Okay. So that's

214
00:13:16.200 --> 00:13:20.520
a, that's a great question.
So yeah, if you wanted

215
00:13:20.520 --> 00:13:24.510
to call, so our, our
bread and butter scenario, you

216
00:13:24.520 --> 00:13:26.220
got to start with a
V one. So R V

217
00:13:26.220 --> 00:13:30.840
one bread and butter scenario
is definitely Silverlight client dominant

218
00:13:30.840 --> 00:13:34.590
on service silver line. And
there we have a really

219
00:13:34.590 --> 00:13:39.210
great kind of have a
very high fidelity story going

220
00:13:39.210 --> 00:13:42.450
on. And in fact, we
do things like shared code.

221
00:13:42.620 --> 00:13:45.630
You can write code on
the server on the client

222
00:13:45.630 --> 00:13:48.780
as well. We send a
lot of really rich metadata

223
00:13:48.780 --> 00:13:53.580
to do things like validation.
We send original values so

224
00:13:53.700 --> 00:13:57.390
we can do change tracking
and things like that. And

225
00:13:57.390 --> 00:14:00.870
then, so then you're in
the line. The question is,

226
00:14:00.870 --> 00:14:04.560
what does it look like
to non silver light client?

227
00:14:04.890 --> 00:14:08.010
Well, what you will see,
you will be able to

228
00:14:08.010 --> 00:14:11.950
walk up to re domains
or are kind of a

229
00:14:12.010 --> 00:14:15.120
class or WTF and act
it for wisdom. And it'll

230
00:14:15.120 --> 00:14:17.250
give you the wisdom for
all the operations that are

231
00:14:17.250 --> 00:14:20.220
on there, and you'll get
what I would consider sort

232
00:14:20.220 --> 00:14:24.900
of base level axes. We're
working with the various parties

233
00:14:24.900 --> 00:14:27.360
to go figure out how
to get things like shared

234
00:14:27.360 --> 00:14:34.500
code, the metadata enhancement. We
need to the wisdom, I

235
00:14:34.500 --> 00:14:36.450
don't know yet if that's
going to make it into

236
00:14:36.450 --> 00:14:39.810
the V one or not.
So what you'll see is

237
00:14:40.440 --> 00:14:42.330
a good amount of stuff,
kind of the base level

238
00:14:42.330 --> 00:14:44.790
stuff and the wisdom, and
then over time as we

239
00:14:44.790 --> 00:14:47.090
can evolve within with bill,
you'll see more and more.

240
00:14:47.400 --> 00:14:51.750
Okay, cool. So then talk
about this programming model. Yeah.

241
00:14:51.750 --> 00:14:55.040
Yeah. I think that is
a really the interesting part

242
00:14:55.040 --> 00:14:56.810
of the thing. And I
think we can break it

243
00:14:56.810 --> 00:15:00.320
down into two parts and
the client and the server.

244
00:15:01.310 --> 00:15:03.560
So on the server, if
you think about a lot

245
00:15:03.560 --> 00:15:09.910
of the services people, right,
they're, they're essentially kind of

246
00:15:09.920 --> 00:15:15.680
crowd based service, create, update,
delete, re record. And so

247
00:15:15.680 --> 00:15:18.410
we kind of noodle around
that pattern a good bit.

248
00:15:19.190 --> 00:15:22.220
And on the read side,
one of the big things

249
00:15:22.220 --> 00:15:24.620
that we've done is we've
made it so you could

250
00:15:24.620 --> 00:15:28.940
write a service that returns
an I query. So, and

251
00:15:28.940 --> 00:15:32.630
you can implement the, I
query of Ohio, everyone maybe

252
00:15:32.630 --> 00:15:36.110
calling LinkedIn SQL or any
framework or in hibernate new

253
00:15:36.830 --> 00:15:41.240
linked support to, to create
my query eval. And the

254
00:15:41.240 --> 00:15:44.120
advantage of the I query
will, even from the client,

255
00:15:44.360 --> 00:15:48.350
you're able to do things
like a give and take

256
00:15:48.350 --> 00:15:53.060
for paging or do filtering
and with some natural link

257
00:15:53.180 --> 00:15:56.930
impact on the client, you
realize that link to the

258
00:15:56.930 --> 00:15:59.960
server and then run it
again, query bill that you

259
00:15:59.960 --> 00:16:03.080
returned from your methods. So
that means you can write

260
00:16:03.320 --> 00:16:08.870
kind of very familiar link
sort of on the server

261
00:16:09.080 --> 00:16:13.250
and have that be highly
efficient in terms of how

262
00:16:13.250 --> 00:16:17.380
it does that. Does that
make sense? Okay. So does

263
00:16:17.380 --> 00:16:21.730
that mean that I am
unaware? I was going to

264
00:16:21.730 --> 00:16:24.430
say ignorant, but am I
unaware of what's happening on

265
00:16:24.430 --> 00:16:26.890
the wire? Is this a
matter of you promise to

266
00:16:26.890 --> 00:16:31.990
return? Well, behaved, I query
will things and we'll handle

267
00:16:31.990 --> 00:16:37.510
the rest cause sometimes no
pun intended because there was

268
00:16:37.510 --> 00:16:42.640
a scent remoting. And before
it deacon was the beginning

269
00:16:42.640 --> 00:16:47.320
of moving object orientation to
the web and the mistake

270
00:16:47.320 --> 00:16:50.260
that object orientation when moved
into a distributed system made

271
00:16:50.260 --> 00:16:54.280
was the lack of recognition
of costs of moving across

272
00:16:54.280 --> 00:16:57.190
object boundaries. And the idea
that, Oh yeah, you just

273
00:16:57.190 --> 00:16:59.860
do this and look, you
can call your object from

274
00:16:59.860 --> 00:17:02.650
New Zealand. Look at that. Your
object doesn't even know that

275
00:17:02.650 --> 00:17:06.100
it's a remoted and the,
the lack of recognition of

276
00:17:06.100 --> 00:17:09.580
that cost was a problem.
And then service orientation was

277
00:17:09.580 --> 00:17:12.580
more of a, an acknowledgement
that there is a service

278
00:17:12.580 --> 00:17:16.450
boundary. How much is this
hiding from me? The fact

279
00:17:16.450 --> 00:17:20.740
that I'm going across about
I boundary. So I think

280
00:17:20.740 --> 00:17:22.540
you'll see, as I talk
more about it, there is

281
00:17:22.660 --> 00:17:25.300
still an explicit boundary because
I, I usually say, I

282
00:17:25.300 --> 00:17:29.200
don't think we can. I
don't think it makes sense

283
00:17:29.320 --> 00:17:32.440
to completely hide the boundary
from the user. But what

284
00:17:32.440 --> 00:17:35.090
I think we can do
is make it easier to

285
00:17:35.090 --> 00:17:38.560
take, to think about what
is the plum stuff I

286
00:17:38.560 --> 00:17:41.080
have to do because of
that balance. And if there's

287
00:17:41.140 --> 00:17:43.960
plumbing stuff in there that
doesn't help me understand the

288
00:17:43.960 --> 00:17:46.990
boundaries, it's just kind of
viewed after. Right? Let's get

289
00:17:46.990 --> 00:17:49.770
rid of that. So for
example, I don't know how

290
00:17:49.770 --> 00:17:53.130
many times I got a
few of your listeners have

291
00:17:53.370 --> 00:17:58.260
written a web service that
support pages that, Hey, a

292
00:17:58.260 --> 00:18:02.970
page count and a current
page, you know, from the

293
00:18:03.030 --> 00:18:06.570
pages parameters and applies the
page logic and return to

294
00:18:06.570 --> 00:18:09.150
the data. That way I
certainly have seen a lot

295
00:18:09.150 --> 00:18:11.700
of customers go and do
that. Why do we have

296
00:18:11.700 --> 00:18:15.090
to have everybody go do
that? Can we just model

297
00:18:15.090 --> 00:18:17.160
the thing as an I
clear evil and then to

298
00:18:17.160 --> 00:18:21.630
support aging, sorting, filtering via
the normal I query double

299
00:18:21.640 --> 00:18:26.150
negative. Okay. And what I
want to use that layer

300
00:18:26.150 --> 00:18:28.340
from anything else or is
that, is this one of

301
00:18:28.340 --> 00:18:30.350
his things we have to
derive from a certain object

302
00:18:30.350 --> 00:18:32.600
and then I can only
use it for this purpose?

303
00:18:32.840 --> 00:18:35.300
Well, I do think that
that's a gym. If you

304
00:18:35.300 --> 00:18:40.150
think about it longterm, there's
nothing specific about Silverlight in,

305
00:18:40.150 --> 00:18:44.180
in the meeting that scenario.
So I do back then

306
00:18:44.210 --> 00:18:47.390
working super closely with the
WCF guys. I do suspect

307
00:18:47.390 --> 00:18:49.790
that over time. Now, a
lot of the concepts that

308
00:18:49.790 --> 00:18:52.760
we're talking about with Rhea
services today, she has baked

309
00:18:52.760 --> 00:18:56.690
into any WPF. Certainly when
we talk about validation in

310
00:18:56.690 --> 00:18:58.820
a minute, that that is
definitely another one that I

311
00:18:58.820 --> 00:19:02.390
think we should do right
into them. That's queriable the

312
00:19:02.390 --> 00:19:04.440
other one I wanted to
talk about. What's changed that.

313
00:19:04.440 --> 00:19:07.940
And I think that another
kind of big issue concept,

314
00:19:09.020 --> 00:19:12.260
as you mentioned, one of
the things we learned from

315
00:19:12.260 --> 00:19:15.050
remoting is if you can't
have a really chatty interface,

316
00:19:15.110 --> 00:19:18.120
you can, every time I
set a property on, on

317
00:19:18.140 --> 00:19:20.240
a, on a <inaudible>, I
don't want to go back

318
00:19:20.240 --> 00:19:23.510
to the server and change
that problem. Essentially, the model

319
00:19:23.510 --> 00:19:26.150
why we want to be
with the area is I

320
00:19:26.150 --> 00:19:28.220
want to bring down a
bunch of data. I want

321
00:19:28.220 --> 00:19:30.620
to perform a bunch of
local operations on the data,

322
00:19:30.920 --> 00:19:35.720
create new instances, updated instances,
delete them. And, and the

323
00:19:35.730 --> 00:19:37.910
back pack is set up
as a change that and

324
00:19:37.910 --> 00:19:40.250
send it as a batch
up to the server in

325
00:19:40.250 --> 00:19:44.030
one, one network. And then
on the server. What I,

326
00:19:44.570 --> 00:19:46.850
what I want to do
is kind of run through

327
00:19:46.850 --> 00:19:49.700
that change set and apply
each one of the, of

328
00:19:49.700 --> 00:19:54.680
the chains in a natural
program. Hey everybody, this is

329
00:19:54.680 --> 00:19:57.350
Scott coming at you from
another place in time. No

330
00:19:57.350 --> 00:19:59.900
doubt. You'll probably bump into
testing tasks now, and then,

331
00:19:59.900 --> 00:20:02.630
and your work and, you
know, writing functional tests is

332
00:20:02.630 --> 00:20:04.610
probably not your favorite thing.
It's kind of difficult. It

333
00:20:04.610 --> 00:20:07.460
takes time and the results
can be dubious. Well, get

334
00:20:07.460 --> 00:20:10.300
ready to start liking tests.
Thanks to Tellerik with the,

335
00:20:10.320 --> 00:20:14.300
the new web testing framework.
Building web automation test is

336
00:20:14.300 --> 00:20:18.170
a breeze. You've got code
automation with advanced asp.net Ajax,

337
00:20:18.170 --> 00:20:20.360
and several other applications. You
can write a single test,

338
00:20:20.750 --> 00:20:24.320
have it executed against multiple
browsers at once. You'd benefit

339
00:20:24.320 --> 00:20:27.350
from a rich API there's
link support integration with visual

340
00:20:27.350 --> 00:20:30.710
studio unit testing, also in
unit X unit and NBA

341
00:20:30.710 --> 00:20:33.950
unit, not to mention the
free rappers for Telerik rad

342
00:20:33.950 --> 00:20:37.220
controls for ESPN and Ajax,
and several light, all shipping

343
00:20:37.220 --> 00:20:40.640
with Telerik's new testing tool.
One of the best features,

344
00:20:40.640 --> 00:20:43.340
the webinar testing framework, which
is developed by art of

345
00:20:43.340 --> 00:20:47.800
test is it's absolutely free
Friday got hooked on web

346
00:20:47.830 --> 00:20:51.250
testing framework, start using it
right away, go to tellerik.com

347
00:20:51.250 --> 00:20:54.670
for more info. Thanks a
lot. Is the user aware

348
00:20:54.670 --> 00:20:56.410
of this? I mean, they
make a change, make a

349
00:20:56.410 --> 00:20:58.870
change and then click save,
and then you're handling change

350
00:20:58.870 --> 00:21:00.610
tracking in the client, and
then you batch it up.

351
00:21:00.810 --> 00:21:04.560
That's right. Well, I think
we can leave it as

352
00:21:04.560 --> 00:21:06.750
a separate discussion of what
do we think the right

353
00:21:06.780 --> 00:21:10.040
actual end user experience for
that is. But yeah, the

354
00:21:10.050 --> 00:21:12.520
demo is we do have
like a submit button on

355
00:21:12.780 --> 00:21:14.990
and you make change, make
a change. We like to

356
00:21:14.990 --> 00:21:19.110
submit, but you're right. So
what we do on the

357
00:21:19.170 --> 00:21:22.620
client is some change tracking.
So we know what's changed.

358
00:21:23.460 --> 00:21:27.120
And then the mid that
batch server, then what's nice

359
00:21:27.120 --> 00:21:30.000
is on the server is
you just write a method

360
00:21:30.000 --> 00:21:36.450
called update employee, delete employee
and create new employee. And

361
00:21:36.450 --> 00:21:39.720
whenever a change that comes
in that has an update

362
00:21:39.720 --> 00:21:43.620
employee on it, we'll code
and create dotnet objects associated

363
00:21:43.620 --> 00:21:45.990
with that, give you the
original value, give you the

364
00:21:45.990 --> 00:21:49.260
value out of the database
and let you handle what

365
00:21:49.260 --> 00:21:52.800
you want to do to
actually update them. Okay. And

366
00:21:52.800 --> 00:21:55.050
would you think about that
in the context of, of

367
00:21:55.050 --> 00:21:59.340
being atomic? Yeah, so we
think we do think of

368
00:21:59.340 --> 00:22:02.940
change as being atomic. So
when you send a chain

369
00:22:02.950 --> 00:22:07.110
set in either all the
operations path or, or none

370
00:22:07.110 --> 00:22:12.210
of them, and the transactional
kind of capability in there

371
00:22:12.210 --> 00:22:15.480
is really up to whatever
the data access layer you're

372
00:22:15.480 --> 00:22:20.810
using is. But yeah, we
certainly think with something like

373
00:22:20.820 --> 00:22:23.970
LinkedIn equal or in a
hybrid aid or entity framework

374
00:22:23.970 --> 00:22:27.600
that changes would get rolled
back and you would get

375
00:22:27.600 --> 00:22:30.480
them back on the server
here is the one that

376
00:22:30.480 --> 00:22:33.270
had an issue, give you
a chance to fix that

377
00:22:33.270 --> 00:22:35.280
and you can resubmit the
to Okay. And that actually

378
00:22:35.310 --> 00:22:37.140
you brought up in hibernate
and you brought up some

379
00:22:37.140 --> 00:22:40.590
other things, is, is Rhea
services specific to a backend

380
00:22:40.590 --> 00:22:43.500
or is it only specific
to the BI queryable? Yeah,

381
00:22:43.530 --> 00:22:48.540
so basically in somethings, it's
about even the specific to

382
00:22:48.540 --> 00:22:51.150
I query bowl. You can
use, if you can return

383
00:22:51.150 --> 00:22:54.510
an I innumerable you can
work in the system. Of

384
00:22:54.510 --> 00:22:56.790
course, if you turn an
eye numerable, you're sucking all

385
00:22:56.790 --> 00:23:00.360
that data into memory, but
you can probably do that.

386
00:23:00.750 --> 00:23:04.380
So no one of the
design points for Rhea services

387
00:23:04.770 --> 00:23:09.270
with essentially provide a adaption
layer that kind of help

388
00:23:09.270 --> 00:23:11.460
you work with any back
ends that you want to

389
00:23:11.460 --> 00:23:13.680
work in. When we think
there's a diversity of those,

390
00:23:13.690 --> 00:23:16.710
and we think that will
continue for the foreseeable future.

391
00:23:18.150 --> 00:23:19.920
But what we wanted you
to be able to do

392
00:23:19.920 --> 00:23:24.270
is for example, move from
an on premises, SQL server

393
00:23:24.270 --> 00:23:30.630
running entity framework to FSDs
do they SQL what they

394
00:23:30.630 --> 00:23:35.040
call them out the cloud
hosted SQL server SQL Azure

395
00:23:37.020 --> 00:23:41.700
as your yeah. W without,
without having to replumb the

396
00:23:41.700 --> 00:23:45.000
UI. I mean, you could
imagine in the, in, in

397
00:23:45.290 --> 00:23:47.750
two tier world, we talked
about at the top, if

398
00:23:47.750 --> 00:23:51.260
you wanted to move from
SQL server to Azure, that

399
00:23:51.260 --> 00:23:54.800
would be any significant change
is the UI layer. I

400
00:23:54.800 --> 00:23:57.710
mean, the different kind of
model for working with the

401
00:23:57.710 --> 00:24:04.910
data completely with Rhea services,
you may have to change

402
00:24:04.910 --> 00:24:07.730
your implementations of some of
the query methods, for example,

403
00:24:07.730 --> 00:24:10.940
or some of the create
update, delete methods, but you

404
00:24:10.940 --> 00:24:14.920
wouldn't have to change the
Silverlight client at all. I

405
00:24:14.920 --> 00:24:19.330
see. Okay. So there's an,
it's a, there's an adapter

406
00:24:19.330 --> 00:24:24.160
that you really, you speak
one thing between, because what

407
00:24:24.170 --> 00:24:28.360
formalizes the conversation between Silverlight
and the backend, and then

408
00:24:28.360 --> 00:24:30.850
from there, and, and that,
and that is over the,

409
00:24:30.850 --> 00:24:33.190
I query will interface as
well as others. And then

410
00:24:33.520 --> 00:24:35.830
from there, it's up to
you to pull the data

411
00:24:35.830 --> 00:24:38.560
from wherever. So I could
do Rhea services and pull

412
00:24:38.560 --> 00:24:40.720
data from an ASMR 400
or a mainframe if I

413
00:24:40.720 --> 00:24:43.900
felt like it. Absolutely. Absolutely.
Yeah. So I did this,

414
00:24:45.070 --> 00:24:48.580
you know, customers ask me
if you kind of <inaudible>,

415
00:24:48.640 --> 00:24:51.910
but not in be framework
and LinkedIn equal. And so

416
00:24:51.910 --> 00:24:58.180
I've worked on a few,
I did a ado.net with

417
00:24:58.300 --> 00:25:01.090
a dataset that we have
a ton of people with

418
00:25:01.150 --> 00:25:03.970
data models, dataset. And that
turns out that works just

419
00:25:03.970 --> 00:25:06.580
fine with our system. We
have one with data reader

420
00:25:06.580 --> 00:25:10.120
and data writer. I did
one in hibernate. I did

421
00:25:10.120 --> 00:25:14.020
one, this was an interesting
one. I did one with

422
00:25:14.020 --> 00:25:19.480
the data source being a
WCF service. So you get

423
00:25:19.480 --> 00:25:23.070
the data, you call another
service, and then that handles

424
00:25:23.070 --> 00:25:25.510
the data active. So we
think of it as like

425
00:25:25.510 --> 00:25:28.930
a four tier scenario. And
there are definitely people who

426
00:25:29.500 --> 00:25:32.170
have that mom. And because
this is WCF service, does

427
00:25:32.170 --> 00:25:34.630
this mean that I have
a lot of flexibility about

428
00:25:34.630 --> 00:25:36.850
what I can, how I
can protect it as far

429
00:25:36.850 --> 00:25:40.150
as authentication. And can I
use, you know, I can

430
00:25:40.150 --> 00:25:42.450
use just to sell, I
can use authentication. I can

431
00:25:42.460 --> 00:25:44.440
use IP sec. I mean,
what kind of things can

432
00:25:44.440 --> 00:25:45.880
I do? Like if I
were gonna write a banking

433
00:25:45.880 --> 00:25:49.090
application in silver light, would
this still be a way

434
00:25:49.090 --> 00:25:51.070
to do it? Yeah. Like
I said, it's a regular

435
00:25:51.070 --> 00:25:53.940
WPF serve. That is by
default, it starts with a

436
00:25:53.940 --> 00:25:58.210
config. So there's no nothing
in web thing, no stuff

437
00:25:58.210 --> 00:26:01.050
to keep in sync and
blah, blah, blah. And we

438
00:26:01.060 --> 00:26:04.030
hope that a lot of
customers will be able to

439
00:26:04.030 --> 00:26:06.040
use that model and don't
have to go and do

440
00:26:06.040 --> 00:26:08.560
a bunch of customization, but
it's nice to know that

441
00:26:08.740 --> 00:26:11.170
there he needed. The, what
you can do is you

442
00:26:11.170 --> 00:26:16.180
can, there's a well known
name for the WCF employment

443
00:26:16.180 --> 00:26:18.160
that there is that you
can go into web config

444
00:26:18.160 --> 00:26:21.310
and you can customize that
literally like any other WCF

445
00:26:21.330 --> 00:26:24.790
server. So you can manage
the thing you can add

446
00:26:24.790 --> 00:26:29.860
additional influence. We think it'd
be super common, add additional

447
00:26:29.860 --> 00:26:32.050
employment, and then you can
go and even change the

448
00:26:32.050 --> 00:26:34.450
influence that we put in
there by default, to talk

449
00:26:34.450 --> 00:26:38.350
to the Silverlight client. When
you start doing that, when

450
00:26:38.350 --> 00:26:40.690
we start changing the default
end points that are there,

451
00:26:40.840 --> 00:26:42.520
chances are, you might have
to go to the silver

452
00:26:42.520 --> 00:26:45.000
light client and change the
defaults that are there too.

453
00:26:45.000 --> 00:26:48.770
So those kind of ones,
but it's factored wealthy Is,

454
00:26:48.770 --> 00:26:52.100
is this, then now this
is currently I separate thing.

455
00:26:52.100 --> 00:26:53.810
It's a separate download. When
is this going to be

456
00:26:53.810 --> 00:26:56.270
baked into server light such
that this is the way

457
00:26:56.270 --> 00:26:59.150
to do things? Yeah. So
it's a separate download and

458
00:26:59.540 --> 00:27:03.200
I love it because you
know, it is both a

459
00:27:03.200 --> 00:27:06.620
server and client component. It's
like, we're literally live in

460
00:27:06.620 --> 00:27:12.320
the dotnet dream of, of
server and client. So we're,

461
00:27:12.320 --> 00:27:16.730
we're actually right now today,
having conversations about, do we

462
00:27:17.480 --> 00:27:20.030
put all this stuff in
the silver line, STK and

463
00:27:20.090 --> 00:27:23.060
have Silverlight FTK, now it
can be installed on servers

464
00:27:23.450 --> 00:27:27.140
or do we have a
separate install that is like

465
00:27:27.140 --> 00:27:30.490
ASP and VC that all
on the server. So I,

466
00:27:30.490 --> 00:27:32.360
I, you know, I think
that we'll work that out

467
00:27:32.360 --> 00:27:35.930
pretty soon, but I think
what you should see is

468
00:27:36.350 --> 00:27:40.790
the tooling experience that we're
gonna have in dev hin

469
00:27:42.080 --> 00:27:45.410
will really make it feel
like this is a great

470
00:27:45.410 --> 00:27:50.030
option for data from your
server instead of silver, like

471
00:27:50.990 --> 00:27:53.840
yeah, of course, there's still
going to be WCF, generic

472
00:27:53.840 --> 00:27:59.840
WTCS support and still rely
to call it The declarative

473
00:27:59.840 --> 00:28:01.310
statement. I'm trying to pin
you down a little bit

474
00:28:01.310 --> 00:28:03.740
that if you're going to
move data back and forth,

475
00:28:04.130 --> 00:28:06.500
and you're going to use
silver, like this is the

476
00:28:06.500 --> 00:28:09.430
preferred way. Not, not the
only way there's certainly people

477
00:28:09.440 --> 00:28:11.960
have been doing it other
ways before, but this is

478
00:28:11.960 --> 00:28:14.850
how you do it. Here's
what I would say in

479
00:28:14.870 --> 00:28:18.980
our movie one, I forgot
everything. So the timeframe and

480
00:28:19.930 --> 00:28:22.940
one, I would think this
is the best model. If

481
00:28:22.970 --> 00:28:26.690
you're talking to your server,
you see what I mean

482
00:28:28.100 --> 00:28:30.410
when you're talking it server.
So I'm building one app

483
00:28:30.410 --> 00:28:33.440
there, the server pick and
the client PD, I think

484
00:28:33.500 --> 00:28:38.750
Rhea services is a possible
solution to that. And, but

485
00:28:39.110 --> 00:28:42.650
certainly we see apps that
get data from other sources,

486
00:28:42.650 --> 00:28:48.410
right? That call INDB or,
you know, Amazon to go

487
00:28:48.410 --> 00:28:52.820
get data to build out
that app. And you could

488
00:28:52.880 --> 00:28:55.190
probably use RIAs surfaces on
the client to go do

489
00:28:55.280 --> 00:28:59.330
that, but maybe it wouldn't
be Okay. So I wouldn't

490
00:28:59.330 --> 00:29:02.390
use real services to write
a Twitter client. Yeah. It's

491
00:29:02.390 --> 00:29:05.540
funny. He had Mickey guitar
actually has a example of

492
00:29:05.540 --> 00:29:09.200
how to get to do
that. I would only use

493
00:29:09.200 --> 00:29:12.470
via services to write it,
to solidify it. If really

494
00:29:12.470 --> 00:29:15.830
what you're doing is you're
getting the Twitter data from

495
00:29:15.830 --> 00:29:19.760
the server. And then on
the server, you're matching it

496
00:29:19.760 --> 00:29:22.920
up with your own data.
Like you're augmenting it with

497
00:29:23.720 --> 00:29:26.600
additional information that you keep,
and then you're sending it

498
00:29:26.600 --> 00:29:28.910
down in a coherent way
down to the client. And

499
00:29:28.910 --> 00:29:31.130
then I would use via
services for that pipe between

500
00:29:31.130 --> 00:29:34.280
your server and the client,
but to get the actual

501
00:29:34.280 --> 00:29:37.700
data from Twitter now, to
be Frank, I'd probably use

502
00:29:37.730 --> 00:29:39.920
web request to getting the
data from the Twitter's web

503
00:29:39.920 --> 00:29:44.260
service. But if I was
a, You know, Brad Abrams,

504
00:29:44.260 --> 00:29:48.310
bank.com and I was switching
from a, a web based

505
00:29:48.310 --> 00:29:50.350
banking system and I was
gonna build a whole banking

506
00:29:50.350 --> 00:29:54.280
client, and we'd be talking
back to Brad aims.com. Then

507
00:29:54.280 --> 00:29:57.180
that might be something I
would just read. Yeah, absolutely.

508
00:29:58.410 --> 00:30:01.200
So one of the ones
we didn't talk about related

509
00:30:01.200 --> 00:30:03.420
to change that I wanted
to mention is the data

510
00:30:03.420 --> 00:30:06.060
validation store. I think that's
a, that's a pretty interesting

511
00:30:06.060 --> 00:30:08.940
one. That's a good point.
Some of your listeners might

512
00:30:08.940 --> 00:30:14.780
remember data annotation. Do you
know that a thing in,

513
00:30:14.880 --> 00:30:17.190
in component model, Right. And
this is something that I've

514
00:30:17.190 --> 00:30:21.540
used in asp.net MVC. Yeah,
that's right. So we originated

515
00:30:21.540 --> 00:30:26.430
it in dynamic data and
then more recently we picked

516
00:30:26.430 --> 00:30:28.860
it up with a CNBC.
So do you want to

517
00:30:28.860 --> 00:30:30.720
give the pitch on it?
Well, I don't want to

518
00:30:30.720 --> 00:30:32.550
pitch, I want to dig
into it. No, no, no,

519
00:30:32.550 --> 00:30:33.930
no, no. I want you
to give a pitch on

520
00:30:33.930 --> 00:30:39.180
it. Well, I mean on
data annotations. Yeah. Well, so

521
00:30:39.230 --> 00:30:42.450
as I understand it, the
idea is that, you know,

522
00:30:42.450 --> 00:30:44.700
as you have attributes and
we've had attributes for years,

523
00:30:44.700 --> 00:30:47.310
attributes are little posted notes
that you put on objects

524
00:30:47.820 --> 00:30:50.790
and data annotations are, I
think they're in system dot

525
00:30:50.790 --> 00:30:54.660
component model that data annotations,
which is not system dot

526
00:30:54.660 --> 00:30:57.060
web dot, this dot that,
and it's not system dot

527
00:30:57.060 --> 00:30:59.790
several light dot, whatever dot,
whatever it's system dot component

528
00:30:59.790 --> 00:31:04.710
model. So it's a, it's
a formalization of the, the

529
00:31:04.710 --> 00:31:07.800
fact that a string might
have an email address or

530
00:31:07.800 --> 00:31:09.990
a phone number or a
social security number in it,

531
00:31:11.310 --> 00:31:13.830
or a, a long might
have more meaning. And it

532
00:31:13.830 --> 00:31:15.960
might need to be within
a range of one to

533
00:31:16.390 --> 00:31:21.510
a million, that information isn't
held by the data, the

534
00:31:21.510 --> 00:31:25.470
data type. So it's, it's
data annotations that provide additional

535
00:31:25.470 --> 00:31:30.270
constraints and information that the
standard.net data type doesn't provide.

536
00:31:30.300 --> 00:31:33.360
And it's put in system
dot component model because it

537
00:31:34.020 --> 00:31:37.020
is fundamental and can be
used anywhere it's specific to

538
00:31:37.290 --> 00:31:41.970
enhancing the, the type system,
not specific to any particular

539
00:31:41.970 --> 00:31:44.460
implementation. I think people are
familiar with it because they

540
00:31:44.460 --> 00:31:46.920
saw it in asp.net dynamic
data, and they saw it

541
00:31:46.920 --> 00:31:49.650
in MVC. So you're, you're
using that to, it was

542
00:31:49.650 --> 00:31:52.590
what you're saying. Exactly, exactly.
And what I think is

543
00:31:52.650 --> 00:31:57.090
really interesting in the interior
case of that, because what

544
00:31:57.090 --> 00:32:00.690
we've done is the exact
same way you annotate your

545
00:32:00.690 --> 00:32:03.600
data model with that data
annotation stuff to say, you

546
00:32:03.600 --> 00:32:06.330
know, this field is read
only, or like you said,

547
00:32:06.330 --> 00:32:07.830
the string links on this
and it would be this

548
00:32:07.830 --> 00:32:12.840
big. And then we actually
propagate that data down to

549
00:32:12.840 --> 00:32:16.750
the client. And then we
we've augmented all the controls

550
00:32:16.790 --> 00:32:20.220
and the silver lights know
about that. And so you

551
00:32:20.220 --> 00:32:25.470
get actual night kind of
red squiggly pop up that,

552
00:32:25.560 --> 00:32:28.590
you know, we never, as
a user, you violate that

553
00:32:28.740 --> 00:32:33.480
the read only fields really
are read. Only if you

554
00:32:33.480 --> 00:32:35.340
say the struggling, can't be
more than 10 and you

555
00:32:35.340 --> 00:32:37.230
put 11 characters in there
and boom, you pop up

556
00:32:37.230 --> 00:32:40.130
a little red thing that
tells what it shows you.

557
00:32:40.130 --> 00:32:42.260
The air methods, you can
get a really nice user

558
00:32:42.260 --> 00:32:47.600
experience. But in addition, we
validate the exact thing again

559
00:32:47.600 --> 00:32:50.570
on the server. So for
example, if you didn't hit

560
00:32:50.570 --> 00:32:52.160
it with a silver like
client, if you hit it

561
00:32:52.160 --> 00:32:56.600
with a Hanselman custom client
that certainly doesn't honor all

562
00:32:56.600 --> 00:33:00.800
those rules, we want to
make sure that those data

563
00:33:00.800 --> 00:33:04.640
validation really happens. So there's
actually a pipeline that runs

564
00:33:04.640 --> 00:33:08.090
before your update method is
called. We run all the

565
00:33:08.090 --> 00:33:12.890
data, annotation validation on that
instance to ensure that it's

566
00:33:12.890 --> 00:33:15.730
a valid NC before you
get it. And that's where,

567
00:33:15.800 --> 00:33:20.170
kind of the obvious security
concerns there What's happening on

568
00:33:20.170 --> 00:33:24.610
the client or the server.
So it happens on the

569
00:33:24.610 --> 00:33:27.460
client to give you the
great UX and it happens

570
00:33:27.460 --> 00:33:30.580
on the server to give
you the security. I see.

571
00:33:30.580 --> 00:33:34.840
Okay. So someone could potentially
intercept that traffic and decide

572
00:33:34.840 --> 00:33:37.000
to push it back to
the server and then we

573
00:33:37.000 --> 00:33:41.590
catch it again. But the
idea is that for the

574
00:33:41.590 --> 00:33:44.140
best experience, you grab it
on the, on the, on

575
00:33:44.140 --> 00:33:45.610
the client side, but you
only have to write it

576
00:33:45.610 --> 00:33:48.640
once. That's right. That's right.
So we we've been talking

577
00:33:48.640 --> 00:33:52.930
about the easy case, which
is amazing Microsoft. Hasn't solved

578
00:33:52.930 --> 00:33:54.700
it up to this point,
the easy case it's just

579
00:33:55.180 --> 00:33:59.110
like Sterling or required or
whatever, but actually real business

580
00:33:59.110 --> 00:34:04.890
logic usually involve kind of
writing. And so w w

581
00:34:04.890 --> 00:34:07.930
what we've done now is
you can actually write a

582
00:34:07.930 --> 00:34:12.370
data validation role yourself, like
applying to the whole entity

583
00:34:12.370 --> 00:34:15.010
that it says, you know,
like starving, can't be before

584
00:34:15.010 --> 00:34:17.410
end date, or I guess
they could couldn't begin day,

585
00:34:17.410 --> 00:34:22.330
can't be before start date
or whatever this credit card

586
00:34:22.360 --> 00:34:25.990
number has to match this
sort of pattern. And you

587
00:34:25.990 --> 00:34:28.600
can write that as a.net
method. And we will bring

588
00:34:28.600 --> 00:34:31.270
that down to the client
and we'll execute it every

589
00:34:31.270 --> 00:34:34.300
time the user changes some
value in that entity, we

590
00:34:34.300 --> 00:34:36.580
will run your rule. And
then if it doesn't work,

591
00:34:36.580 --> 00:34:40.210
we'll lay the right UI
and then we'll run exactly

592
00:34:40.210 --> 00:34:43.840
that same code again. Okay.
At what point do you

593
00:34:43.840 --> 00:34:47.650
think that this will be
mainstream? You kept saying V

594
00:34:47.650 --> 00:34:51.430
one V one, obviously you're
setting expectations for the first

595
00:34:51.430 --> 00:34:55.090
version. Yeah, so, right. So
right now we have a

596
00:34:55.120 --> 00:34:59.470
go live license out there.
And so, you know, a

597
00:34:59.470 --> 00:35:01.720
lot of people are already
using it and kind of

598
00:35:01.780 --> 00:35:03.700
a prerelease form, kind of
the people that like to

599
00:35:03.700 --> 00:35:07.420
be on the bleeding edge.
And then we're going to

600
00:35:07.420 --> 00:35:10.300
do a beta here at
PDC. We just finished our

601
00:35:10.300 --> 00:35:14.140
code completely for that. So
people will have a beta.

602
00:35:14.170 --> 00:35:17.050
And then I think, you
know, being the typical Microsoft,

603
00:35:17.080 --> 00:35:19.960
they agrees, I think kind
of early next year, we'll,

604
00:35:20.310 --> 00:35:22.810
we'll see an RTM kind
of based on the feedback

605
00:35:22.810 --> 00:35:26.200
we get in the mix
and whatnot. I mean, PC.

606
00:35:26.410 --> 00:35:28.330
And do you think that
this will extend out to

607
00:35:28.330 --> 00:35:30.790
things like, like WPF or
what I want to use

608
00:35:30.790 --> 00:35:34.450
this in any non Silverlight
scenario? Yeah. So, yeah, I

609
00:35:34.450 --> 00:35:37.950
think there's kind of two
really interesting ways that the

610
00:35:38.430 --> 00:35:41.070
work we've done here with
Rhea services for Silverlight is

611
00:35:41.070 --> 00:35:43.590
going to extend out one
we've already touched a good

612
00:35:43.590 --> 00:35:47.490
bit on which is using
some of the stuff like

613
00:35:47.490 --> 00:35:50.010
the validation store and the,
I query we'll just in

614
00:35:50.010 --> 00:35:54.240
any WCF service. I think
that'll be super valuable kind

615
00:35:54.240 --> 00:35:57.000
of thinking as we go
happen and getting all that

616
00:35:57.000 --> 00:35:59.610
stuff into wisdom, everything's just
weren't, but that's one place

617
00:35:59.610 --> 00:36:02.100
it'll expand out over time.
And then the other place

618
00:36:02.100 --> 00:36:06.090
he likes to stand out
is other kind of programming

619
00:36:06.090 --> 00:36:10.680
model. So we've done Silverlight
today and today we've also

620
00:36:10.680 --> 00:36:15.120
done asp.net. So for example,
if you want to write

621
00:36:15.120 --> 00:36:19.140
this query, man, did this
create, update and delete all

622
00:36:19.140 --> 00:36:21.960
of that stuff, but have
the client be an asp.net

623
00:36:21.960 --> 00:36:25.080
page? You can totally go
do that. And we have

624
00:36:25.080 --> 00:36:28.590
a very efficient in proc
way to make that happen.

625
00:36:28.770 --> 00:36:34.470
So for example, if you
wanted to build a standard

626
00:36:34.470 --> 00:36:37.590
based web head, as well
as the rich Silverlight head,

627
00:36:37.740 --> 00:36:39.960
but didn't want to write
your business logic twice for

628
00:36:39.960 --> 00:36:43.220
that, you can totally go
use Rhea services. And wouldn't

629
00:36:43.220 --> 00:36:47.660
that change things in a
big way though, because asp.net

630
00:36:47.690 --> 00:36:52.010
and web applications in general
are kind of one request.

631
00:36:52.490 --> 00:36:54.920
And then, and then, you
know, tear it down, start

632
00:36:54.920 --> 00:36:56.990
it all over again, as
opposed to the persistence that

633
00:36:56.990 --> 00:36:59.900
we have in an, in
a, in a REIA application.

634
00:37:01.340 --> 00:37:05.750
It's interesting ANSI then that
has the data source pattern

635
00:37:05.930 --> 00:37:08.660
associated with it that we've
talked about before. So we've

636
00:37:08.680 --> 00:37:13.160
actually built a asp.net domain
data stores that you can

637
00:37:13.160 --> 00:37:18.290
point at our Rhea services,
domain service. And essentially what

638
00:37:18.290 --> 00:37:22.070
it does is it does
do that, builds up a

639
00:37:22.070 --> 00:37:27.080
change that, and then calls
our, our, our data source.

640
00:37:27.710 --> 00:37:29.990
So kind of in the
web forms model, I think

641
00:37:29.990 --> 00:37:33.080
it works nicely to kind
of build up a page

642
00:37:33.260 --> 00:37:36.170
that has been sent down
to the client. Does that

643
00:37:36.170 --> 00:37:40.820
make sense to think about
the dynamic data today, ESPN

644
00:37:40.820 --> 00:37:43.850
and dynamic data today? All
you can do is annotate

645
00:37:43.850 --> 00:37:46.850
the model with the match
we talked about. You're still

646
00:37:46.850 --> 00:37:49.880
accessing the database directly. What
if instead, you wanted to

647
00:37:49.880 --> 00:37:54.140
write some business logic to
return only employee salary and

648
00:37:54.140 --> 00:37:58.280
a greater than $10,000. That's
tough to do with dynamic

649
00:37:58.280 --> 00:38:02.030
data today. And if you
instead use the re the

650
00:38:02.030 --> 00:38:04.460
domain services model, you just
go put that in the

651
00:38:04.460 --> 00:38:07.910
query method. Okay. Couldn't you
do that with a story

652
00:38:07.910 --> 00:38:10.670
today, though, if you plugged
in the query interceptor. Yeah.

653
00:38:10.700 --> 00:38:13.520
So a story, I has
a query interface after model,

654
00:38:13.960 --> 00:38:15.620
and they have intersections A
story of a, sorry, a

655
00:38:15.620 --> 00:38:20.150
story of being the ado.net
data services. Yeah. I think

656
00:38:20.150 --> 00:38:22.700
a story is best for
building this kind of rest

657
00:38:22.700 --> 00:38:26.780
based services. And I think
that the, you know, we're

658
00:38:26.780 --> 00:38:29.570
talking with the story guys
too about supporting the same

659
00:38:29.570 --> 00:38:32.690
sort of cut kind of
create update, delete pattern with

660
00:38:32.720 --> 00:38:36.400
kind of specific methods for
those, because we're seeing a

661
00:38:36.400 --> 00:38:38.620
lot of people kind of
gravitate to that sort of

662
00:38:38.620 --> 00:38:43.600
model rather than the interceptor
model. You mentioned other program

663
00:38:43.600 --> 00:38:46.270
models that the other ones
on our radar, I think

664
00:38:46.300 --> 00:38:50.530
Ajax is a really natural
one. He does have all

665
00:38:50.530 --> 00:38:52.690
of the clients side batching
and whatever it needs to

666
00:38:52.690 --> 00:38:57.060
happen. So we're definitely looking
part at Ajax. And then

667
00:38:57.460 --> 00:39:01.000
as things like WPF and,
and whatnot is definitely on

668
00:39:01.000 --> 00:39:04.230
our list as well for
the future. Okay, cool. Hey,

669
00:39:04.560 --> 00:39:08.460
someone on Twitter wanted to
know how long you've been

670
00:39:08.460 --> 00:39:11.640
at Microsoft. Cause you know,
it's funny when I talk

671
00:39:11.650 --> 00:39:14.790
to different Microsoft people, again,
I've only been there. I

672
00:39:14.790 --> 00:39:17.370
think I've been there two
years now this week, they'll

673
00:39:17.370 --> 00:39:21.150
say things like super, you
know, super excited. You know,

674
00:39:21.150 --> 00:39:22.920
you can tell if someone's
been there a long time,

675
00:39:23.070 --> 00:39:25.350
how long have you been
at Microsoft? I am super

676
00:39:25.350 --> 00:39:28.170
excited to tell you that
I've been at Microsoft for

677
00:39:28.170 --> 00:39:33.600
about 12 years. Yeah. I
started out on Internet's floor

678
00:39:33.920 --> 00:39:37.260
way back in the day.
And then I moved to

679
00:39:37.260 --> 00:39:41.190
the GLR kind of way
back when, when, when we

680
00:39:41.190 --> 00:39:46.410
were fighting the Java VM,
those are good days, man.

681
00:39:46.770 --> 00:39:49.470
There's a lot of fun.
I was the first program

682
00:39:49.470 --> 00:39:53.310
manager for systems objects and
system that string that you

683
00:39:53.310 --> 00:39:56.580
can blame me for those.
Thanks for those. That was

684
00:39:56.580 --> 00:39:58.770
a lot of fun. And
then I moved on, You

685
00:39:58.770 --> 00:40:02.430
wrote the spec for system
that object, you should put

686
00:40:02.430 --> 00:40:05.520
that on a tee shirt,
walk around, just, you know,

687
00:40:05.580 --> 00:40:08.700
I'm that guy. Yeah. Yeah.
I actually have a lot

688
00:40:08.700 --> 00:40:11.280
of, you know, a lot
of, I feel like I've

689
00:40:11.280 --> 00:40:14.550
learned a lot. There's definitely
some things that we do

690
00:40:14.550 --> 00:40:17.100
differently about that. Maybe we
can have a different show

691
00:40:17.100 --> 00:40:19.140
about, you know, how would
we do it over if

692
00:40:19.140 --> 00:40:22.500
we could now, but overall,
I think it's proven to

693
00:40:22.500 --> 00:40:29.490
be pretty successful. So I
eventually moved on to asp.net

694
00:40:30.600 --> 00:40:37.170
and did ASP Ajax and
AFP, NBC ABC. And then

695
00:40:37.800 --> 00:40:40.770
more recently moved over to
work on Silverlight mix of

696
00:40:40.770 --> 00:40:43.590
light and a great for
line of business app is

697
00:40:43.590 --> 00:40:47.730
this navigation framework and a
bunch of database form data

698
00:40:47.730 --> 00:40:53.310
control like three. And then
now with resurfaces, hopefully we

699
00:40:53.310 --> 00:40:56.220
can kind of round out
the picture on how to

700
00:40:56.340 --> 00:40:58.980
build that out. How many,
I just had a curiosity

701
00:40:58.980 --> 00:41:01.860
before we go, how many
people were on the original

702
00:41:01.860 --> 00:41:04.170
team that were building.net versus
how many people are on

703
00:41:04.170 --> 00:41:07.140
the kind of the whole
thing now, Way back, like

704
00:41:07.170 --> 00:41:12.240
really originally I think it
was, they were maybe in

705
00:41:12.300 --> 00:41:17.970
people, 15 people that kind
of form the original. Now

706
00:41:18.030 --> 00:41:20.130
the thing is, I think
it's really interesting to see

707
00:41:20.130 --> 00:41:24.180
how this stuff happens at
Microsoft. What happens is other

708
00:41:24.180 --> 00:41:30.480
teams just kind of glommed
on to, for example, asp.net,

709
00:41:30.480 --> 00:41:33.950
what would later become AAP
that started not too long

710
00:41:33.950 --> 00:41:37.130
after we started the DLR
and they were a whole

711
00:41:37.130 --> 00:41:39.710
separate team that I don't,
I don't want to get

712
00:41:39.740 --> 00:41:43.670
how big, but it was
pretty small. And then they

713
00:41:44.060 --> 00:41:46.880
significantly added to kind of
what would be done that

714
00:41:46.880 --> 00:41:50.180
when they joined on kind
of, kind of partner with

715
00:41:50.180 --> 00:41:53.540
us in building, what would
be done there. And then

716
00:41:53.540 --> 00:41:56.030
the same thing happened with
visual studio and the languages

717
00:41:56.510 --> 00:42:00.290
kind of piled on. I
don't know. Does that answer

718
00:42:00.290 --> 00:42:04.630
it, it started small snowball.
Did you ever think it

719
00:42:04.630 --> 00:42:06.580
would be anything? Did you
honestly think it was going

720
00:42:06.580 --> 00:42:09.430
to be something? Oh yeah,
no. I was a huge

721
00:42:09.430 --> 00:42:14.140
believer from day one. I
was a, you have to

722
00:42:14.170 --> 00:42:16.960
do these, the one at
a big company, you have

723
00:42:16.960 --> 00:42:20.470
to have what I would
call this irrational exuberance. And

724
00:42:20.470 --> 00:42:23.410
you have to believe that
what you're doing is going

725
00:42:23.410 --> 00:42:25.750
to change the world or
where else you can keep,

726
00:42:26.270 --> 00:42:29.320
because there's, there's so much
stacked against you in making

727
00:42:29.320 --> 00:42:34.180
that happen. I mean, literally
every month we were one

728
00:42:34.180 --> 00:42:36.910
meeting away from getting killed,
you know, like this go

729
00:42:36.910 --> 00:42:39.790
to this next exact review
and they may decide to

730
00:42:39.790 --> 00:42:44.230
stop funding this thing. Right.
It was you, you, you

731
00:42:44.230 --> 00:42:47.740
had to keep a really
strong, positive, we're going to

732
00:42:47.740 --> 00:42:51.910
change the world sort of
attitude, but that's a lot

733
00:42:51.910 --> 00:42:53.440
of fun, right? I mean,
if you w what do

734
00:42:53.440 --> 00:42:54.610
you, what is it you,
I want to come to

735
00:42:54.610 --> 00:42:56.970
work every day and believe
in changing the world. And

736
00:42:57.010 --> 00:43:00.010
maybe I will. I hope
I have that amount of

737
00:43:00.010 --> 00:43:02.500
Kool-Aid after 12 years, if
I make it 12 years,

738
00:43:03.190 --> 00:43:04.630
if you don't, if you
don't have me fired until

739
00:43:04.630 --> 00:43:06.550
sometime in the next week
Now, man, you still eat.

740
00:43:06.550 --> 00:43:08.740
You gotta have the right.
Cool. Well, thanks a lot

741
00:43:08.740 --> 00:43:10.510
for chatting with me today.
I really appreciate it. And

742
00:43:10.510 --> 00:43:11.950
then where do people go
to learn about this? Do

743
00:43:11.950 --> 00:43:14.770
they just Google with being,
or how do they find

744
00:43:14.770 --> 00:43:19.780
that information? Seeing it being
a <inaudible>? I think the

745
00:43:19.780 --> 00:43:23.500
easiest thing to do is
go to silverlight.net there's forums

746
00:43:23.500 --> 00:43:25.270
on there, and we have
services as you can get

747
00:43:25.600 --> 00:43:29.800
download or lettuce. People can
find my blog and of

748
00:43:29.800 --> 00:43:34.900
course, Twitter me as well.
And we can definitely Cool.

749
00:43:34.900 --> 00:43:39.130
And your B aprons on
Twitter, right? Brad, Brad, EY.

750
00:43:39.580 --> 00:43:42.400
Alright, very cool. Thanks a
lot. This has been another

751
00:43:42.400 --> 00:43:45.010
episode of Hanselminutes and we'll
see you again next week.

