WEBVTT FILE

1
00:00:00.930 --> 00:00:04.050
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:04.050 --> 00:00:07.380
they make the show possible.
Today's show is sponsored by

3
00:00:07.380 --> 00:00:11.640
Tellerik create compelling app experiences
across any screen with the

4
00:00:11.640 --> 00:00:16.500
Tellerik platform Telerx end to
end platform, uniquely combines industry

5
00:00:16.500 --> 00:00:20.190
leading UI tools with cloud
services to simplify the entire

6
00:00:20.190 --> 00:00:24.690
app development cycle Tellerik offers
everything.net developers need to build

7
00:00:24.690 --> 00:00:34.080
quality apps faster. Try it
free at tellerik.com/platform. That's tellerik.com/platform.

8
00:00:36.660 --> 00:00:38.040
I want to take a
second to tell you about

9
00:00:38.040 --> 00:00:40.950
my sponsor Ray gun. If
you want to detect and

10
00:00:40.950 --> 00:00:44.190
diagnose errors and crashes in
your software and even find

11
00:00:44.190 --> 00:00:46.800
problems that you didn't know
existed to improve your software

12
00:00:46.890 --> 00:00:50.130
and Ray gun is likely
perfect for you. You just

13
00:00:50.130 --> 00:00:52.650
add a few lines of
code your application, and in

14
00:00:52.650 --> 00:00:55.440
minutes you get real time
error reports with all the

15
00:00:55.440 --> 00:00:58.350
information that you need to
fix bugs fast, you can

16
00:00:58.350 --> 00:01:00.480
even hook it up to
your team, chat, your bug

17
00:01:00.480 --> 00:01:04.890
tracking, and any other development
workflow tools. Reagan covers all

18
00:01:04.890 --> 00:01:09.300
major web and mobile programming
languages, including.net, the full Xamarin

19
00:01:09.300 --> 00:01:12.510
stack JavaScript, and many more.
Go check out Ray gun

20
00:01:12.510 --> 00:01:17.280
today@raygun.io. I even use it
myself on my little startup

21
00:01:17.310 --> 00:01:20.430
and I really truly recommend
this product. It's a fantastic

22
00:01:20.430 --> 00:01:42.180
product. Check it out. reagan@reagan.io.
<inaudible> from hanselminutes.com. It's Hansel

23
00:01:42.180 --> 00:01:46.470
minutes, a weekly discussion with
web developer and technologist Scott

24
00:01:46.470 --> 00:01:51.570
Hanselman. This is Lawrence Ryan announcing
show number four 89. In

25
00:01:51.570 --> 00:01:55.050
this episode, Scott talks with
note sources, VP of engineering,

26
00:01:55.230 --> 00:02:02.670
Kevin Stewart about enterprising, no JS.
Hi, this is Scott Hanselman.

27
00:02:02.670 --> 00:02:04.950
This is another episode of
Hansel minutes, and I'm here

28
00:02:04.950 --> 00:02:07.320
today talking with Kevin Stewart, who
is a VP of engineering

29
00:02:07.320 --> 00:02:09.510
at node source. How are
you, sir? I'm pretty good,

30
00:02:09.510 --> 00:02:11.580
Scott. Thanks for having me.
Thanks for chatting with me

31
00:02:11.580 --> 00:02:13.380
today. So one of the
things that I wanted to

32
00:02:13.380 --> 00:02:15.390
talk about with you is
that you've got an interesting

33
00:02:15.390 --> 00:02:18.270
background, not just in open
source, working on things like

34
00:02:18.270 --> 00:02:20.460
node node source, but then
you started in kind of

35
00:02:20.460 --> 00:02:25.350
classic commercials software at Adobe.
Yes, that's correct. I've spent

36
00:02:25.350 --> 00:02:28.100
about 10 years at Adobe
prior to note source where

37
00:02:28.100 --> 00:02:31.050
I worked on a variety
of things on Adobe creative

38
00:02:31.050 --> 00:02:36.210
suite, things from the installers
to metadata services, as we

39
00:02:36.210 --> 00:02:39.090
started to transition towards the
cloud. And then I was

40
00:02:39.090 --> 00:02:42.090
lucky enough to work on
one of the initial services

41
00:02:42.090 --> 00:02:45.900
of creative cloud, which was
became creative cloud assets. We

42
00:02:46.200 --> 00:02:49.260
focused on basically providing a
place for all of our

43
00:02:49.260 --> 00:02:53.040
customers assets to be stored
and collaborated on. And that

44
00:02:53.040 --> 00:02:56.280
evolved into things like creative
cloud libraries at around that

45
00:02:56.280 --> 00:02:58.620
time was when I was
approached by node source to

46
00:02:58.620 --> 00:03:00.790
help them grow their business.
And I decided to make

47
00:03:00.790 --> 00:03:03.810
the move. And when you
were working at Adobe, were

48
00:03:03.810 --> 00:03:06.180
they already thinking about open
source and bringing open source

49
00:03:06.180 --> 00:03:10.530
into the forefront? Absolutely. There
was the acquisition of companies

50
00:03:10.530 --> 00:03:13.590
like phone gap, which was
one of the big catalysts

51
00:03:13.600 --> 00:03:16.920
of starting to look at
how Adobe could contribute to

52
00:03:16.920 --> 00:03:21.090
an open source and participate
in it. With the Apache

53
00:03:21.090 --> 00:03:25.680
Cordova project. We started looking
at our own IP and

54
00:03:25.680 --> 00:03:29.370
seeing are there things that
the open source community would

55
00:03:29.370 --> 00:03:32.970
benefit by having Adobe donate
and participate in a more

56
00:03:32.970 --> 00:03:37.800
open manner? And internally our
CTO started driving more for

57
00:03:37.800 --> 00:03:40.920
a model of open source
style development, even on the

58
00:03:40.920 --> 00:03:44.430
commercial products. So then it
was natural to get into,

59
00:03:44.520 --> 00:03:47.310
to open source. Totally. Yeah.
We were a big consumers

60
00:03:47.310 --> 00:03:50.250
of open source for probably
the last eight years at

61
00:03:50.250 --> 00:03:54.090
Adobe. I pushed our team
to say let's use open

62
00:03:54.090 --> 00:03:57.060
source as much as possible,
where I could work with

63
00:03:57.060 --> 00:04:00.540
legal to make it happen
and contribute things back. So

64
00:04:00.570 --> 00:04:03.240
it just became second nature
after a while. And what

65
00:04:03.240 --> 00:04:05.580
does node source do? Cause
it's really about, it seems

66
00:04:05.580 --> 00:04:07.140
to me like from looking
at the website, it's about

67
00:04:08.220 --> 00:04:12.510
the enterprising of nodes. Yes.
We're trying to position ourselves

68
00:04:12.540 --> 00:04:16.350
as the enterprise node company
and working to find a

69
00:04:16.350 --> 00:04:21.060
balance between contributing to the
community while serving the needs

70
00:04:21.090 --> 00:04:26.160
of enterprise customers. And there
isn't as much overlap with

71
00:04:26.190 --> 00:04:30.930
note historically and enterprise problems,
but the enterprise has adopted

72
00:04:30.930 --> 00:04:36.060
node and there are certain
types of problems, applications, technologies

73
00:04:36.060 --> 00:04:38.670
that need to be addressed
to support their needs. And

74
00:04:38.670 --> 00:04:41.460
that's what node source is
looking to address. So like

75
00:04:41.460 --> 00:04:44.760
most open source projects, aren't
like ready for the enterprise

76
00:04:44.940 --> 00:04:47.760
out of the box, right?
Enterprise has unique kind of

77
00:04:47.760 --> 00:04:53.190
issues, Very unique or at
least different than say your

78
00:04:53.190 --> 00:04:56.490
typical open source hacker or,
you know, the five person

79
00:04:56.490 --> 00:04:59.070
team at a startup trying
to build a consumer internet

80
00:04:59.070 --> 00:05:04.470
application. There are different concerns
that enterprises have. And in

81
00:05:04.470 --> 00:05:06.780
typical open source fashion, you
tend to scratch your own

82
00:05:06.780 --> 00:05:10.620
edge. And some of those
enterprise needs aren't itches that

83
00:05:11.700 --> 00:05:14.610
the one guy in his
room coding is looking to

84
00:05:14.610 --> 00:05:17.340
solve. What is it about
the enterprise that's so like

85
00:05:17.340 --> 00:05:20.100
unique or why does the
enterprise think that it's unique?

86
00:05:20.100 --> 00:05:22.290
Like when you say like,
you know, one guy or

87
00:05:22.290 --> 00:05:25.050
one gal and they're in
their garage, they don't have

88
00:05:25.050 --> 00:05:28.020
an enterprise problem because they
don't have what smart cards.

89
00:05:28.050 --> 00:05:33.540
They don't have certificate stories.
They don't have a lot

90
00:05:33.540 --> 00:05:37.020
of compliance issues that they
need to deal with legal

91
00:05:37.020 --> 00:05:41.820
issues, international issues. So there
are so many things that

92
00:05:41.910 --> 00:05:47.460
are really the area that
enterprises have to deal with

93
00:05:47.460 --> 00:05:50.130
things that are just common
things like I've had to

94
00:05:50.130 --> 00:05:52.980
deal with localization so many
times and telling multiple countries,

95
00:05:53.490 --> 00:05:59.090
multiple currencies and multiple countries
localization versus globalization. Cause there

96
00:05:59.090 --> 00:06:04.220
is a difference export exporting
SSL, like the number of

97
00:06:04.220 --> 00:06:06.890
times that, you know, some
lawyers that are make sure

98
00:06:06.890 --> 00:06:09.920
we're not exporting cryptography. And
then having to explain that,

99
00:06:09.920 --> 00:06:13.040
well, you're not really exporting
cryptography when you're using SSL

100
00:06:13.040 --> 00:06:15.950
and things like that are
not the sort of things

101
00:06:15.950 --> 00:06:18.950
that most open source developers
typically have to deal with.

102
00:06:20.780 --> 00:06:24.050
There's also a perception issue.
I mean, I think Joel,

103
00:06:24.050 --> 00:06:26.870
Spolsky had a post years
ago about the five different

104
00:06:26.870 --> 00:06:30.710
worlds of software development and
sort of made a distinction

105
00:06:30.710 --> 00:06:36.530
between commercial software developers and
sort of corporate in house,

106
00:06:36.560 --> 00:06:41.210
you know, line of business
developers. And there's been this

107
00:06:41.660 --> 00:06:47.150
unusual and unfortunate, I believe
divide between the hipster developer,

108
00:06:47.150 --> 00:06:49.760
you know, working in San
Francisco, building the next great

109
00:06:49.760 --> 00:06:53.330
photo sharing app. And then,
you know, the lemming that's

110
00:06:53.330 --> 00:06:56.060
in, you know, the three
piece suit, which nobody wears

111
00:06:56.060 --> 00:07:02.420
anymore building yet another database
reporting application. And yet in

112
00:07:02.420 --> 00:07:05.570
reality, they all have similar
problems. I mean, we're in

113
00:07:05.570 --> 00:07:09.110
a cloud era where hosting
things on public clouds or

114
00:07:09.110 --> 00:07:13.010
we're dealing with scaling issues.
So there's a lot more

115
00:07:13.010 --> 00:07:16.550
similarities between those different worlds
of developers, but there's sort

116
00:07:16.550 --> 00:07:20.120
of a cultural gap between
the two. And that's one

117
00:07:20.120 --> 00:07:22.220
of the things that we're
hoping to sort of bridge

118
00:07:22.220 --> 00:07:24.820
the gap a little bit,
especially in the note. Right,

119
00:07:24.820 --> 00:07:27.820
right. And technology these days
are kind of standing on

120
00:07:27.820 --> 00:07:30.220
the shoulders of giants and
making things that were once

121
00:07:30.220 --> 00:07:33.010
difficult, much easier. And a
lot of people look at

122
00:07:33.010 --> 00:07:35.020
the enterprise as like, Oh,
here's a bunch of hoops

123
00:07:35.020 --> 00:07:37.090
I have to jump through.
But at the same time

124
00:07:37.090 --> 00:07:41.140
they are well understood. Oops.
Yes. There is a certain

125
00:07:41.140 --> 00:07:44.020
comfort in knowing that these
problems have been solved, so

126
00:07:44.020 --> 00:07:46.180
we don't need to go
solve them again. And I

127
00:07:46.180 --> 00:07:49.750
think that's one of the
key differentiators between enterprise development

128
00:07:49.960 --> 00:07:53.440
is that there's more focus
on solving the business problem.

129
00:07:53.770 --> 00:07:57.850
And not yet again, building
another app server or another

130
00:07:57.850 --> 00:08:02.350
ORM, you know, we, we
have more pressing needs usually

131
00:08:02.350 --> 00:08:06.940
around revenue making money. So
let's solve those problems that

132
00:08:07.210 --> 00:08:10.630
assist the business as opposed
to just trying to do

133
00:08:10.630 --> 00:08:13.420
the same thing in a
different way, using another language

134
00:08:13.420 --> 00:08:16.450
or another framework. So as
an example, I'm not trying

135
00:08:16.450 --> 00:08:18.400
to sound like a commercial,
but just as an example,

136
00:08:18.610 --> 00:08:20.920
what is a tool that
node source does that no,

137
00:08:20.920 --> 00:08:23.920
didn't do like what does
a need that was required

138
00:08:23.920 --> 00:08:27.490
to put note into the
enterprise that you filled? So

139
00:08:27.520 --> 00:08:30.820
a product in one sense,
it's just support and training

140
00:08:31.630 --> 00:08:36.250
many customers look at a
particular technology and they immediately

141
00:08:36.250 --> 00:08:39.160
want, you know, who's the
one throat to choke or

142
00:08:39.160 --> 00:08:41.500
who do I go to
when I'm having a problem

143
00:08:41.500 --> 00:08:44.770
with that? So while we
don't look at support traditionally

144
00:08:44.770 --> 00:08:47.710
as a product, by packaging
up in a certain way,

145
00:08:47.710 --> 00:08:51.910
you know, here's a tier
of support for just experimenting

146
00:08:51.910 --> 00:08:55.770
with node and, you know,
trying it on your servers,

147
00:08:55.770 --> 00:08:58.950
understanding how the technology works.
That's one level of offering.

148
00:08:59.010 --> 00:09:01.620
Then as you're sort of
graduating up to a proof

149
00:09:01.770 --> 00:09:06.000
of concept, a small application,
you'll probably want a little

150
00:09:06.000 --> 00:09:08.940
bit more support than that,
especially if you're trying to

151
00:09:08.940 --> 00:09:11.760
make a case to your
leadership team. And then finally,

152
00:09:11.760 --> 00:09:15.030
when you're really running an
application in production and you

153
00:09:15.030 --> 00:09:18.180
have a development team, but
you want some extra hands

154
00:09:18.180 --> 00:09:21.000
to help out, help you
scale, help you solve a

155
00:09:21.000 --> 00:09:24.510
particular problem. That's another offering.
So we just released and

156
00:09:24.510 --> 00:09:29.850
support, which is our commercial
node support offering. A second

157
00:09:29.850 --> 00:09:33.210
product that we have is
called <inaudible>, which is really

158
00:09:33.210 --> 00:09:38.400
taking the idea of a
deterministic build of an artifact,

159
00:09:38.460 --> 00:09:40.680
which would be your note
application. So in the Java

160
00:09:40.680 --> 00:09:43.110
world, you have something like
a jar file or a

161
00:09:43.110 --> 00:09:45.510
war file, which is your
application. And you can deploy

162
00:09:45.510 --> 00:09:48.200
that as a single unit.
Well, it's all statically built.

163
00:09:48.200 --> 00:09:51.110
So then there's always this
sense of the reliable, repeatable

164
00:09:51.110 --> 00:09:54.050
bill. Exactly. We don't really
have that in the node

165
00:09:54.050 --> 00:09:56.780
world, but there's a lot
of scenarios where that would

166
00:09:56.780 --> 00:10:00.290
be very valuable. So we
built an ship to take

167
00:10:00.290 --> 00:10:03.470
your note application, do some
sort of static analysis on

168
00:10:03.470 --> 00:10:06.470
it, like go through all
the node modules, see if

169
00:10:06.470 --> 00:10:12.950
there's any license, valid license
issues, and there's no license

170
00:10:12.950 --> 00:10:15.410
for something We as an
enterprise have decided we're going

171
00:10:15.410 --> 00:10:17.600
to use MIT. And then
Tim GPL snuck in there.

172
00:10:17.630 --> 00:10:20.630
Exactly. That's the biggest use
case of, you know, has

173
00:10:20.630 --> 00:10:23.510
any GPL snuck into the
code? Or if we say

174
00:10:23.510 --> 00:10:25.910
we're all Apache, you can
set up those sorts of

175
00:10:25.910 --> 00:10:29.510
rules. We check with the
node security project to see

176
00:10:29.510 --> 00:10:32.630
if there are any modules
in your project that have

177
00:10:32.630 --> 00:10:36.230
a known security vulnerability, flag
that and say, Hey, there's

178
00:10:36.230 --> 00:10:39.110
a newer version. And we
also built an API so

179
00:10:39.110 --> 00:10:41.960
that you can add your
own plugins to that system

180
00:10:41.960 --> 00:10:45.710
to build whatever compliance rules
that you need before you

181
00:10:45.710 --> 00:10:48.530
have a final bundle that
you can then deploy to

182
00:10:48.560 --> 00:10:52.190
your environments. And the third
product is actually one that's

183
00:10:52.190 --> 00:10:55.910
coming out and we're sort
of, we're sort of in

184
00:10:55.910 --> 00:10:58.580
ship mode. So I can't
go into too much details

185
00:10:58.580 --> 00:11:02.120
about it. Other than the
node runtime itself can be

186
00:11:02.120 --> 00:11:04.700
a bit of a black
box. So you're running a

187
00:11:04.730 --> 00:11:08.000
large node application in production
and all of a sudden

188
00:11:08.000 --> 00:11:12.290
you're seeing memory leaks and
can't really determine where, and

189
00:11:12.320 --> 00:11:14.900
I've had this problem previously
at Adobe running a node

190
00:11:14.900 --> 00:11:19.910
application where our service was
just getting hammered for some

191
00:11:19.910 --> 00:11:22.730
reason. And we couldn't find
out exactly what was going

192
00:11:22.730 --> 00:11:26.090
on with the node portion
of it because the runtime

193
00:11:26.090 --> 00:11:28.730
is just opaque. So we're
working on a way to

194
00:11:28.730 --> 00:11:30.470
sort of crack that open
a little bit and get

195
00:11:30.470 --> 00:11:33.530
more runtime visibility into what's
going on to your note

196
00:11:33.530 --> 00:11:36.530
application and then integrate that
with other people's solutions. So

197
00:11:36.530 --> 00:11:38.960
you can add it to
your dashboards and your monitoring

198
00:11:38.960 --> 00:11:41.630
solutions. Okay. So if I
use new Relic or something

199
00:11:41.630 --> 00:11:43.070
like that, I can plug
it in and get much

200
00:11:43.070 --> 00:11:45.860
more insight into what's going
on, but when you're out

201
00:11:45.860 --> 00:11:50.330
selling enterprise software and the
software that you're selling also

202
00:11:50.330 --> 00:11:54.460
happens to be built on
open source. Aren't almost selling

203
00:11:54.460 --> 00:11:56.170
open source as a concept,
as much as you are

204
00:11:56.170 --> 00:12:00.000
selling your product. Oh yeah.
And we embrace that. A

205
00:12:00.000 --> 00:12:03.780
lot of companies have sort
of turned the corner and

206
00:12:03.780 --> 00:12:06.570
understand that open source is
becoming the defacto way to

207
00:12:06.570 --> 00:12:09.540
build software or at least
a normal way. There's not

208
00:12:09.540 --> 00:12:12.540
as much fear as there
used to be. And I

209
00:12:12.540 --> 00:12:17.100
think that the growth of
cloud in one sense has

210
00:12:17.100 --> 00:12:20.640
helped that the bulk of
open source software that's really

211
00:12:20.640 --> 00:12:23.310
valuable to companies is tended
to be on the infrastructure

212
00:12:23.310 --> 00:12:27.480
level. So people have gotten
accustomed to, you know, having

213
00:12:27.480 --> 00:12:31.260
open source web servers, open
source databases, open source development

214
00:12:31.260 --> 00:12:33.900
tools, and that's made it
easier to make some of

215
00:12:33.900 --> 00:12:38.760
those sales. The real complication
has sort of been dealing

216
00:12:38.760 --> 00:12:41.610
with these customers that have
these legacy code bases and

217
00:12:41.610 --> 00:12:43.920
how do they migrate them
to a new world. And

218
00:12:43.920 --> 00:12:47.490
that's where node is actually
played a huge part and

219
00:12:47.490 --> 00:12:51.660
making that transformation because you
can't just rewrite your entire,

220
00:12:51.720 --> 00:12:55.890
you know, financial application that's
been in Java since Java

221
00:12:55.890 --> 00:12:59.850
first came out and you
have challenges like how do

222
00:12:59.850 --> 00:13:02.760
I tackle mobile? I have
all these employees that are

223
00:13:02.760 --> 00:13:05.160
not using desktops anymore, or
they're on their mobile phones

224
00:13:05.430 --> 00:13:08.580
and our applications weren't designed
with mobile in mind. So

225
00:13:08.580 --> 00:13:11.490
that's one use case where
notice played a part with

226
00:13:11.490 --> 00:13:15.660
mobile web development building these
front ends that talk to

227
00:13:15.660 --> 00:13:19.260
these legacy systems and support
their Mo mobile web applications,

228
00:13:19.680 --> 00:13:23.760
building APIs so that you
can have native apps talking

229
00:13:23.760 --> 00:13:26.040
to your backend. So Maybe
you can expand a little

230
00:13:26.040 --> 00:13:27.390
bit more on the mobile
thing. So I don't quite

231
00:13:27.390 --> 00:13:30.540
understand that, like if I'm
using something really old, like

232
00:13:30.540 --> 00:13:33.690
let's say I'm even using
God forbid classic ASP. Yeah.

233
00:13:33.840 --> 00:13:37.410
I could still produce bootstrap
HTML or I could produce

234
00:13:37.440 --> 00:13:42.030
responsive design and some decent
CSS. Where does node have

235
00:13:42.030 --> 00:13:44.040
a strength when it comes
to things like thinking about

236
00:13:44.040 --> 00:13:48.060
mobile? No, it has a
strength in terms of people

237
00:13:48.090 --> 00:13:51.240
say, if you don't have
developers with those competencies anymore,

238
00:13:51.240 --> 00:13:53.610
so you might have an
old system that was done

239
00:13:53.610 --> 00:13:55.980
in ColdFusion, but now you
no longer have any ColdFusion

240
00:13:55.980 --> 00:13:59.130
developers and nobody wants to
touch that system. That's critical

241
00:13:59.130 --> 00:14:01.740
to your business. So using
node as sort of a

242
00:14:01.770 --> 00:14:04.710
proxy layer to build the
new functionality you need on

243
00:14:04.710 --> 00:14:07.860
top talking to that older
system, that's still running and

244
00:14:07.860 --> 00:14:11.910
then generating your mobile interface.
That is a common pattern

245
00:14:11.910 --> 00:14:14.670
that we're seeing. I see.
So people are swapping out

246
00:14:14.670 --> 00:14:18.120
the brains and they're like
to doing transplants, putting a

247
00:14:18.120 --> 00:14:19.680
little note here and a
little note there. Well, they're

248
00:14:19.680 --> 00:14:23.550
sprinkling it through and using
it to support these newer

249
00:14:23.550 --> 00:14:30.090
use cases. This episode of
Hansel minutes is brought to

250
00:14:30.090 --> 00:14:34.230
you by Braintree code for
easy online payments. If you're

251
00:14:34.230 --> 00:14:36.390
building a mobile app and
you're searching for a simple

252
00:14:36.390 --> 00:14:41.490
payment solution, check out Braintree,
the brain tree v.zero SDK

253
00:14:41.520 --> 00:14:45.120
makes it easy to offer
multiple mobile payment types. So

254
00:14:45.120 --> 00:14:49.140
you can start accepting PayPal,
Apple pay Bitcoin, Venmo, credit

255
00:14:49.140 --> 00:14:53.840
cards, and more all with
a integration, one small snippet

256
00:14:53.840 --> 00:14:55.610
of code. And you're set
up in less than 10

257
00:14:55.610 --> 00:14:58.130
minutes. If you don't have
time, you can give them

258
00:14:58.130 --> 00:15:00.620
a call. They'll even handle
the integration for you and

259
00:15:00.620 --> 00:15:05.480
walk you through it. The
SDK supports seven languages.net node,

260
00:15:05.510 --> 00:15:10.910
Java, Perl, PHP, Python, and
Ruby elegant code clear documentation

261
00:15:11.420 --> 00:15:15.320
to learn more. And for
your first $50,000 in transactions

262
00:15:15.440 --> 00:15:28.610
fee free, go to Braintree
payments.com/hanselman that's Braintree payments.com/hanselman. One

263
00:15:28.610 --> 00:15:30.800
of the things that I
found frustrating about node, and

264
00:15:30.800 --> 00:15:33.140
I wonder if it has
become a problem in, in

265
00:15:33.140 --> 00:15:35.960
the enterprise space, is that
it feels just like even

266
00:15:35.960 --> 00:15:39.740
a hello world or a
non trivially sized application involves,

267
00:15:40.280 --> 00:15:43.700
you know, 70 or 80
or a hundred NPM modules.

268
00:15:44.150 --> 00:15:47.420
So, you know, hello, world's
like 80 megs and 3000

269
00:15:47.420 --> 00:15:51.560
files because of the way
NPM works. Right? And they're

270
00:15:51.560 --> 00:15:54.980
the, the versions and the
closures of versions on like,

271
00:15:54.980 --> 00:15:59.210
you know, this thing a
wants the version, something phase

272
00:15:59.210 --> 00:16:01.130
C and then thing B
wants a different version of

273
00:16:01.130 --> 00:16:05.270
see that's really overwhelming. I
mean, it's, there's no like

274
00:16:05.720 --> 00:16:08.480
again, coming from a.net person's
perspective, there's no base class

275
00:16:08.480 --> 00:16:13.480
library. That's correct. It's sort
of a double edged sword,

276
00:16:13.480 --> 00:16:16.480
right? So one of the
benefits of node is the

277
00:16:16.480 --> 00:16:19.150
fact that we have the
NPM repository and all these

278
00:16:19.150 --> 00:16:22.300
modules that cover so many
different things that you can

279
00:16:22.300 --> 00:16:25.690
tap into. The problem of
course, is discoverability. How do

280
00:16:25.690 --> 00:16:28.060
you know which is the
best OAuth module or which

281
00:16:28.070 --> 00:16:31.090
the best web framework, a
lot of them look alike.

282
00:16:31.180 --> 00:16:33.760
And there are no real
sources when you start Googling

283
00:16:33.760 --> 00:16:37.300
around, you might find outdated
references to things like this

284
00:16:37.300 --> 00:16:39.400
was great three years ago,
but it's not great now.

285
00:16:39.730 --> 00:16:41.830
So there is that problem.
That is definitely a pain

286
00:16:41.830 --> 00:16:45.850
point. And it is something
that we've been thinking about.

287
00:16:45.850 --> 00:16:49.030
How do we address that
node source? Because again, we

288
00:16:49.060 --> 00:16:53.260
do architectural evaluations with customers
and they need guidance on

289
00:16:53.260 --> 00:16:58.510
these things like prescriptions. They
absolutely want prescriptions. And that's

290
00:16:58.510 --> 00:17:01.750
again, sort of a, another
differentiator between the open source

291
00:17:01.750 --> 00:17:05.470
mindset and the enterprise mindset
open source guys, basically, you

292
00:17:05.470 --> 00:17:07.630
want, I want to do
whatever I want to do.

293
00:17:07.630 --> 00:17:10.390
Let me figure out the
best way to do things.

294
00:17:10.720 --> 00:17:12.700
Then we go to enterprise
and like, tell us what

295
00:17:12.700 --> 00:17:15.070
to do, tell us what
we should use. You know,

296
00:17:15.700 --> 00:17:19.390
we're not the experts you
are. Yeah. I find that

297
00:17:19.390 --> 00:17:22.150
very confusing in the open
source space, because it's like

298
00:17:22.570 --> 00:17:26.200
if, if moment JS or
this certain time library is

299
00:17:26.200 --> 00:17:28.810
the bomb, then I standardized
on it as an enterprise.

300
00:17:29.380 --> 00:17:32.830
And then a few months
later, the 25 year old

301
00:17:32.890 --> 00:17:35.770
that did that is decided
it's finished. I think a

302
00:17:35.770 --> 00:17:37.660
lot of people have trouble
in the open source space,

303
00:17:37.690 --> 00:17:42.670
understanding the difference between dead
and done. Like it's okay

304
00:17:42.670 --> 00:17:46.060
for a project to be
completed. Absolutely. And you can

305
00:17:46.060 --> 00:17:48.520
even see that with things
like text editors, like there

306
00:17:48.520 --> 00:17:51.840
was a time people were
greatly concerned, especially in the

307
00:17:51.840 --> 00:17:54.840
Mac world when text mate
wasn't being updated, it was

308
00:17:54.840 --> 00:17:57.450
like, this is great text
editor, but it hasn't had

309
00:17:57.450 --> 00:17:59.880
an update. And the author
was like, yeah, cause it

310
00:17:59.880 --> 00:18:02.370
works. It works for me.
Why do you feel that

311
00:18:02.460 --> 00:18:04.980
we have to constantly keep
churning on things. And I

312
00:18:04.980 --> 00:18:07.740
do see enterprise customers getting
a little bit frustrated with

313
00:18:07.740 --> 00:18:11.430
this because at some point
they want predictability. They want

314
00:18:11.550 --> 00:18:16.200
stability. They want things to
sort of stay in one

315
00:18:16.200 --> 00:18:19.530
place long enough that they
can actually build some confidence

316
00:18:19.530 --> 00:18:21.780
around it. Whereas on the
open source side of things,

317
00:18:21.780 --> 00:18:24.330
there's like constant change churn.
It's like, it's not good

318
00:18:24.330 --> 00:18:27.960
enough if it stands standing
still. And you probably saw

319
00:18:27.990 --> 00:18:30.480
a lot of that with
the fork of node that

320
00:18:30.480 --> 00:18:34.500
occurred last year between a
node and IO JS and

321
00:18:35.430 --> 00:18:38.280
neither side was right or
wrong. It's just a different

322
00:18:38.280 --> 00:18:47.040
perspective. The original node community
was really into evolution, jumping

323
00:18:47.040 --> 00:18:51.060
on the latest technology. Then
things sort of petered out

324
00:18:51.060 --> 00:18:54.960
around zero dot 10, where
we got to a point

325
00:18:54.960 --> 00:18:56.940
where node was kind of
good enough. There were still

326
00:18:56.940 --> 00:19:00.810
some issues. And there was
just a philosophical difference of,

327
00:19:01.260 --> 00:19:04.020
you know, joint being the
corporate sponsor of node and

328
00:19:04.200 --> 00:19:06.630
dealing with some of these
enterprise needs saying, Hey, we

329
00:19:06.630 --> 00:19:08.640
need to slow this down
a little bit and make

330
00:19:08.640 --> 00:19:11.100
things a little bit more
solid before we do another

331
00:19:11.100 --> 00:19:15.060
release and the original community
saying, but you know, we're

332
00:19:15.060 --> 00:19:17.520
going, getting behind on which
version of V eight we're

333
00:19:17.520 --> 00:19:20.160
on. There are all these
bugs. We want to add

334
00:19:20.160 --> 00:19:23.190
promises. We want to do
this. And there was just

335
00:19:23.190 --> 00:19:26.190
some tension there. So of
course a fork happened as

336
00:19:26.190 --> 00:19:29.790
it does in the opensource
community, but there was still

337
00:19:29.790 --> 00:19:32.220
a desire to bring node
back together and try to

338
00:19:32.220 --> 00:19:35.490
find a common middle ground
that we can all work

339
00:19:35.490 --> 00:19:38.400
on and say, let's get
some of the benefits of

340
00:19:38.400 --> 00:19:40.980
moving faster and, you know,
keeping up to date with

341
00:19:40.980 --> 00:19:44.610
certain technologies like VA, but
think about how do we

342
00:19:44.610 --> 00:19:48.750
address these concerns that enterprises
have with the pace that

343
00:19:48.750 --> 00:19:50.580
node is moving and how
do they know they'll get

344
00:19:50.580 --> 00:19:55.230
support and how do they
know? They'll just be comfortable

345
00:19:55.230 --> 00:19:58.530
knowing that their applications can
keep running on this platform.

346
00:19:58.830 --> 00:20:02.880
So now that the node
reconciliation has occurred and we're

347
00:20:02.880 --> 00:20:06.390
going to merge those two
code bases back together, one

348
00:20:06.390 --> 00:20:09.300
of the key components is
a longterm support plan and

349
00:20:09.300 --> 00:20:11.850
figuring out how do we
have LTS releases of node

350
00:20:12.060 --> 00:20:15.030
that enterprise customers can say,
I know this will be

351
00:20:15.030 --> 00:20:18.120
supported for the next 18
months, two years. I can

352
00:20:18.180 --> 00:20:20.880
standardize on this version of
node and not have the

353
00:20:20.880 --> 00:20:23.700
rug pulled out from under
me. That's a key component

354
00:20:23.700 --> 00:20:26.850
of where we're going with
node and we're definitely playing

355
00:20:26.850 --> 00:20:30.140
a key role in defining
that LTS roadmap. Yeah, I

356
00:20:30.140 --> 00:20:33.050
think that that LTS, right,
that longterm support is one

357
00:20:33.050 --> 00:20:36.110
of those great ideas that,
you know, Boone two really

358
00:20:36.140 --> 00:20:39.740
jumped on and went ran
with. And it's like, we're

359
00:20:39.740 --> 00:20:42.680
going to have tic talk
releases every six months. And

360
00:20:42.680 --> 00:20:44.360
you're going to be able
to stay with us and

361
00:20:44.360 --> 00:20:46.520
be on the cutting edge.
But then, you know, every

362
00:20:46.520 --> 00:20:48.490
once in a while year
or so year and a

363
00:20:48.490 --> 00:20:50.260
half, we'll give you one
that we can all just

364
00:20:50.590 --> 00:20:53.320
count on. And you put
that one into production while

365
00:20:53.320 --> 00:20:56.130
the rest of us mess
around on staging, Great model

366
00:20:56.340 --> 00:20:58.980
and people have definitely warm
to us. So we're trying

367
00:20:58.980 --> 00:21:02.160
to sort of steal great
ideas from the people who

368
00:21:02.160 --> 00:21:04.620
have pioneered that and do
the same thing for note.

369
00:21:05.330 --> 00:21:07.950
One of the words that
you said a couple of

370
00:21:07.950 --> 00:21:09.960
paragraphs go that I want
to come back and talk

371
00:21:09.960 --> 00:21:13.770
about was the notion of
confidence. And I realized, as

372
00:21:13.770 --> 00:21:17.310
you were saying that that
know enterprises want confidence and

373
00:21:17.310 --> 00:21:20.400
open source communities want confidence.
And the things that they

374
00:21:20.400 --> 00:21:25.890
look for that inspire confidence
are absolutely diametrically opposed. I

375
00:21:25.890 --> 00:21:29.340
visited a GitHub repo today
for something that has actually

376
00:21:29.340 --> 00:21:31.830
been built into windows 10.
And I noticed that it

377
00:21:31.830 --> 00:21:34.590
said it hadn't been touched
in two months and in

378
00:21:34.590 --> 00:21:37.740
my mind I'm mentally threw
my hands up. I got

379
00:21:38.610 --> 00:21:42.090
more abandoned where this thing
hasn't been touched in two

380
00:21:42.090 --> 00:21:47.430
months and my, my inner
open source clock was immediately

381
00:21:47.430 --> 00:21:50.520
offended. You know what I
mean? But it's the same

382
00:21:52.140 --> 00:21:53.820
two months. I mean, you
know, you don't get up,

383
00:21:53.910 --> 00:21:56.070
you don't get a, a
wreck or a statement of

384
00:21:56.070 --> 00:21:59.550
work and two months in
the enterprise, if you're lucky.

385
00:21:59.730 --> 00:22:06.150
Yeah, exactly. Yeah. It's, it
is a cultural divide change

386
00:22:06.180 --> 00:22:10.410
is constant and open source
and were accustomed to that.

387
00:22:10.890 --> 00:22:14.310
The differences that a lot
of people working open source,

388
00:22:14.580 --> 00:22:17.670
haven't worked in enterprises. So
I've had the luxury of

389
00:22:17.670 --> 00:22:21.750
working in both environments. And
I can totally understand where

390
00:22:22.260 --> 00:22:25.410
these enterprise customers are coming
from when they're saying this

391
00:22:25.410 --> 00:22:27.990
thing's changing every day. Oh
my gosh. You know, what

392
00:22:27.990 --> 00:22:30.000
do I do? But I've
also worked on the other

393
00:22:30.000 --> 00:22:32.250
side. I was like, Hey,
this project hasn't been touched

394
00:22:32.250 --> 00:22:36.930
in two months, this thing's
probably got a billion bugs

395
00:22:36.930 --> 00:22:38.310
in it. You know, let
me go look for something

396
00:22:38.310 --> 00:22:42.000
newer that's for sure. And
probably get yourself in trouble

397
00:22:42.000 --> 00:22:43.690
because it might be the
one that's more baked than

398
00:22:43.820 --> 00:22:47.770
the one you should've picked
Almost without fail. That's generally,

399
00:22:48.360 --> 00:22:50.130
You know, I know that
it would be an opinionated

400
00:22:50.130 --> 00:22:51.810
piece of software, but if
there were a thing that

401
00:22:51.810 --> 00:22:55.020
node source made that had
a confidence index or some

402
00:22:55.020 --> 00:22:58.170
kind of a number that
would express whether I as

403
00:22:58.170 --> 00:23:02.520
an enterprise, you know, should
put my confidence in this

404
00:23:02.760 --> 00:23:06.960
piece of software, I'm going
to smile and not say

405
00:23:06.960 --> 00:23:12.240
anything Good ideas have already
been thought about, see, I

406
00:23:12.240 --> 00:23:14.850
have thought up an idea
and you've coded it in

407
00:23:14.850 --> 00:23:18.210
your mind. And you're, you're
off developing this idea. All

408
00:23:18.210 --> 00:23:20.640
I will say, there may
be a keynote document or

409
00:23:20.640 --> 00:23:23.970
a PDF in the notes
or as Dropbox that might

410
00:23:24.120 --> 00:23:26.460
hint at What you just
talked about. But I think

411
00:23:26.460 --> 00:23:29.160
that when we talk about
prescriptions, that's really what that's

412
00:23:29.160 --> 00:23:32.610
really what we need, especially
with these distributed based class

413
00:23:32.610 --> 00:23:36.120
libraries. Right. But one of
the things that made Java

414
00:23:36.120 --> 00:23:40.440
succeed and made dotnet succeed
early on was here's a

415
00:23:40.620 --> 00:23:45.150
fully and completely designed by
committee 250 megs of system,

416
00:23:45.470 --> 00:23:48.230
this and that. And one
of the things that makes

417
00:23:48.770 --> 00:23:52.790
no difficult for people to
jump into is the, alright,

418
00:23:52.790 --> 00:23:54.590
I want to parse some,
I don't want to parse

419
00:23:54.590 --> 00:23:57.110
a date. All right, well,
you've got six options, you

420
00:23:57.110 --> 00:24:00.100
know, and one of them
came out yesterday. Paradox of

421
00:24:00.100 --> 00:24:05.500
choice. Exactly. Yeah, absolutely. Yeah.
It's like I said, it's

422
00:24:05.500 --> 00:24:09.880
the double edged sword, right?
Node very much falls the

423
00:24:09.880 --> 00:24:13.150
Unix philosophy of small tools,
join together to do things

424
00:24:13.150 --> 00:24:17.140
as well. And you know,
people have totally embraced that,

425
00:24:17.590 --> 00:24:21.040
but there comes a point
where that actually gets in

426
00:24:21.040 --> 00:24:22.660
the way. And you even
see this sort of playing

427
00:24:22.660 --> 00:24:26.860
out with the whole concept
of microservices again, where people

428
00:24:26.860 --> 00:24:29.830
are loving this idea of
breaking their services down into

429
00:24:29.830 --> 00:24:33.460
these really tiny components and
coordinating them. And that's why

430
00:24:33.460 --> 00:24:36.100
Docker is now sort of
the new thing that everybody's

431
00:24:36.100 --> 00:24:38.800
talking about. But as soon
as you start doing that,

432
00:24:38.800 --> 00:24:40.660
then you run into the
next level problem. I have

433
00:24:40.660 --> 00:24:44.440
all these little services, what's
orchestrating them, what's coordinating them,

434
00:24:44.440 --> 00:24:48.910
what's managing them. So you
get back into the almost

435
00:24:48.910 --> 00:24:52.450
monolithic approach where you take
all these services. You don't

436
00:24:52.450 --> 00:24:54.430
have a good plan for
orchestrating them. It becomes a

437
00:24:54.430 --> 00:24:58.210
model with again. And you
know, it's really a matter

438
00:24:58.210 --> 00:25:02.530
of understanding your problem and
coming up with the right

439
00:25:02.530 --> 00:25:04.780
solution to do it. And
same thing with node is

440
00:25:05.650 --> 00:25:08.530
they're all, are all these
modules out there, sometimes it

441
00:25:08.530 --> 00:25:10.360
makes sense to use them.
Sometimes it makes sense to

442
00:25:10.360 --> 00:25:13.300
write your own thing. I've
run into cases where people

443
00:25:13.300 --> 00:25:16.810
are just grabbing modules off
NPM, building a solution together

444
00:25:16.870 --> 00:25:20.320
and just gluing it together
is more of an effort

445
00:25:20.320 --> 00:25:22.390
than if you just wrote
the code yourself to do

446
00:25:22.390 --> 00:25:25.120
the one thing you needed
to do. Oh, you're saying

447
00:25:25.120 --> 00:25:28.960
like literally the Googling for
the library probably took more

448
00:25:28.960 --> 00:25:32.740
time than just writing the
Exactly one specific case we

449
00:25:32.740 --> 00:25:37.000
had when we were at
Adobe running a node service

450
00:25:37.270 --> 00:25:40.510
was we needed a particular
piece of functionality and it

451
00:25:40.510 --> 00:25:43.480
turned out that there was
an existing module, but all

452
00:25:43.480 --> 00:25:46.270
it did was basically run
a red jacks. And I'm

453
00:25:46.270 --> 00:25:48.940
like, so we just took
on a dependency that has

454
00:25:48.940 --> 00:25:51.400
a red jacks. That's now
breaking and production because it

455
00:25:51.400 --> 00:25:54.730
doesn't have this one pattern
that we need inside of

456
00:25:54.730 --> 00:25:58.090
it. And what are you
going to send a pull

457
00:25:58.090 --> 00:26:00.010
request to get that module
updated? I'm like, why don't

458
00:26:00.010 --> 00:26:01.660
you steal the red jacks
and put what we need

459
00:26:01.660 --> 00:26:03.970
in and have our own
code. And I see a

460
00:26:03.970 --> 00:26:07.450
lot of this copy paste
programming with NPM that's going

461
00:26:07.450 --> 00:26:11.290
on. And yes, that's good
for getting up and running

462
00:26:11.290 --> 00:26:14.680
pretty quickly. But if you
don't understand the implications of

463
00:26:14.740 --> 00:26:17.020
taking on all these dependencies
and how it's going to

464
00:26:17.020 --> 00:26:20.560
affect you downstream, it's going
to bite you. So that's

465
00:26:20.560 --> 00:26:25.270
part of our approach is
not just building products, not

466
00:26:25.270 --> 00:26:28.120
just trying to sell things
enterprise, but giving them that

467
00:26:28.120 --> 00:26:32.560
understanding of why notice the
way it is, why there's

468
00:26:32.560 --> 00:26:36.490
an asynchronous model, how NPM
works, how you build applications

469
00:26:36.490 --> 00:26:40.450
using node is as important
as just how fast you

470
00:26:40.450 --> 00:26:44.040
can develop with node. Yeah,
I was, I'm not in

471
00:26:44.040 --> 00:26:46.350
the node side, but on
the client side, we're doing

472
00:26:46.350 --> 00:26:49.050
some JavaScript with my buddy
at work, Damien Edwards. And

473
00:26:49.050 --> 00:26:51.660
we wanted to do some
interesting stuff with time. As

474
00:26:51.660 --> 00:26:54.750
soon as we mentioned time
on Twitter, everyone just goes,

475
00:26:54.780 --> 00:26:58.620
Oh moment, JS moment JS
and Damien, who is a

476
00:26:58.830 --> 00:27:02.100
pretty senior individual and a
smart individual said, Hey guys,

477
00:27:02.190 --> 00:27:04.860
just hang on a second.
I want to parse one

478
00:27:04.860 --> 00:27:09.060
date one time and do
one thing with it. And

479
00:27:09.060 --> 00:27:11.880
you've all suggested a 100
K library that I need

480
00:27:11.880 --> 00:27:14.760
to bring in. Like, let's
just settle down for a

481
00:27:14.760 --> 00:27:19.160
second. That happens internally as
well. I look at a

482
00:27:19.160 --> 00:27:21.230
lot of pork. I was
like, Whoa, you're pulling in

483
00:27:21.230 --> 00:27:23.540
what to do what? Right.
You know? And he ended

484
00:27:23.540 --> 00:27:26.360
up just parsing the string
with, you know, index of,

485
00:27:26.810 --> 00:27:29.870
and I felt kind of
gross, but you know, sometimes

486
00:27:29.870 --> 00:27:33.620
senior engineers need to feel
calm. Yes. More often than

487
00:27:33.620 --> 00:27:37.250
not unforeseen. Yeah, absolutely. Yeah.
That, that those kinds of,

488
00:27:37.460 --> 00:27:39.590
of tough decisions I think
are, are, are hard to

489
00:27:39.590 --> 00:27:42.110
make though, when you're still
introducing yourself into a community,

490
00:27:42.110 --> 00:27:45.260
it seems like to know
which module to use is

491
00:27:45.380 --> 00:27:47.990
a word of mouth. You
know, my, my friend said

492
00:27:47.990 --> 00:27:50.180
it was a good module,
so I'll use It totally

493
00:27:50.180 --> 00:27:52.070
is. It's a combination of
word of mouth, word of

494
00:27:52.070 --> 00:27:56.270
Twitter, I guess, you know,
some Googling. But I also

495
00:27:56.270 --> 00:27:59.090
know that as you come
into a community, you tend

496
00:27:59.090 --> 00:28:02.090
to bring your old habits
and patterns with you. So

497
00:28:02.090 --> 00:28:04.550
if you look at some
of the earliest node libraries,

498
00:28:05.690 --> 00:28:08.540
there's sort of the pattern
of whatever community that developer

499
00:28:08.540 --> 00:28:11.660
came from. They're trying to
recreate that in node. So

500
00:28:11.840 --> 00:28:14.450
if you came from Ruby,
you're trying to create recreate

501
00:28:14.450 --> 00:28:16.790
rails and node. Or if
you're coming from Python, you're

502
00:28:16.790 --> 00:28:20.930
trying to recreate Django in
node. And that's, it's a

503
00:28:20.930 --> 00:28:23.840
good thing to happen because
that's how people learn. You

504
00:28:23.840 --> 00:28:26.270
know, you apply what you
know to this new thing,

505
00:28:26.270 --> 00:28:29.900
and then you start discovering
exactly what was wrong with

506
00:28:29.900 --> 00:28:32.960
your thinking or why this
thing is different. I've seen

507
00:28:32.960 --> 00:28:37.010
in other communities like go,
go as very prescriptive and

508
00:28:37.010 --> 00:28:40.040
structured about, you know, how
you write code, how you

509
00:28:40.040 --> 00:28:43.400
use the standard library. They're
kind of anti framework because

510
00:28:43.400 --> 00:28:46.700
a lot of of the
standard library is provides what

511
00:28:46.700 --> 00:28:50.390
you need. And you can
see the evolution of the

512
00:28:50.390 --> 00:28:54.410
libraries and frameworks and that
community change from, okay, we

513
00:28:54.410 --> 00:28:56.900
got all the people from
the dynamic languages communities coming

514
00:28:56.900 --> 00:28:59.360
in, building these things. Then
they took a step back.

515
00:28:59.360 --> 00:29:02.000
And I think the most
famous example, there was the

516
00:29:02.000 --> 00:29:05.540
author of the martini framework,
which is a Sinatra like

517
00:29:05.870 --> 00:29:09.920
cloning go. And after enough
people said, Hey, this is

518
00:29:09.920 --> 00:29:12.890
an idiomatic go. He stepped,
stepped back and said, you're

519
00:29:12.890 --> 00:29:16.940
right. And then having that
experience of writing some go

520
00:29:16.940 --> 00:29:19.580
at that point, he wrote
a new framework called Negroni

521
00:29:19.580 --> 00:29:22.880
that actually matched the expectations
and patterns of that community.

522
00:29:23.270 --> 00:29:25.730
And we see some similar
things to note that people

523
00:29:25.730 --> 00:29:28.790
evolve, learn what the best
patterns are and then evolve

524
00:29:29.090 --> 00:29:32.270
how they build their libraries
and applications. Do you think

525
00:29:32.300 --> 00:29:35.360
that a lot of enterprises
that are starting out with

526
00:29:35.540 --> 00:29:38.840
JavaScript and node, they're trying
to write it like it's

527
00:29:38.870 --> 00:29:42.610
Java or they're trying to
drive like it's COBOL. Well,

528
00:29:42.610 --> 00:29:47.560
we haven't seen the COBOL,
but definitely Java like approaches.

529
00:29:47.920 --> 00:29:51.070
We haven't worked with too
many Microsoft shops to see,

530
00:29:51.100 --> 00:29:53.710
but I would expect, you
know, if they were.net, I'd

531
00:29:53.710 --> 00:29:55.480
see a similar pattern of
them trying to write it

532
00:29:55.600 --> 00:29:57.900
like CC, I'm envisioning a
lot of what we call

533
00:29:57.900 --> 00:30:00.990
arrow code. You know, if,
if, if, if, and then

534
00:30:00.990 --> 00:30:02.670
unrolling all the way and
not a lot of functional

535
00:30:02.670 --> 00:30:05.340
programming paradigms, There's a quite
a bit of that. Yes.

536
00:30:05.410 --> 00:30:10.620
Yeah. And again, that's, it's
an education process. So we

537
00:30:11.070 --> 00:30:14.070
will, you know, send people
for like a week work

538
00:30:14.070 --> 00:30:17.100
with their developers, understand what
their applications are and then

539
00:30:17.100 --> 00:30:19.680
teach them, you know, this
was the callback pattern in

540
00:30:19.680 --> 00:30:22.140
JavaScript. You know, this is
how the event loop works.

541
00:30:22.470 --> 00:30:26.550
Here's how timers work and
then help them sort of

542
00:30:27.030 --> 00:30:29.910
translate their mental model of
how their system currently works

543
00:30:30.240 --> 00:30:32.310
to a way that'll work
best with node and take

544
00:30:32.310 --> 00:30:35.460
advantage of its capabilities. What
do you think, is it

545
00:30:35.460 --> 00:30:39.270
about node that is causing
people to, you know, kind

546
00:30:39.270 --> 00:30:41.400
of jump in and make
these kinds of rather naive

547
00:30:41.400 --> 00:30:43.590
mistakes that you don't necessarily
see in? See, is it

548
00:30:43.590 --> 00:30:46.830
because it is a dynamic
language because it's just a

549
00:30:46.830 --> 00:30:48.930
text editor and a command
line that it makes it

550
00:30:48.930 --> 00:30:52.560
seem like it's a wild
West. I think it's a

551
00:30:52.560 --> 00:30:56.940
combination of the fact that
it is a dynamic language.

552
00:30:56.970 --> 00:31:00.810
It's accessible. People are coming
from the browser world, you

553
00:31:00.810 --> 00:31:03.600
know, so people understand the
web browser and being able

554
00:31:03.600 --> 00:31:08.190
to write JavaScript to do
things in it. And there's

555
00:31:08.340 --> 00:31:11.070
probably a lot of misconceptions.
And the biggest one I've

556
00:31:11.070 --> 00:31:13.650
always heard is they, Oh,
you know, you're using node.

557
00:31:13.650 --> 00:31:15.210
So you can write JavaScript
on the server and the

558
00:31:15.210 --> 00:31:17.490
client. And if you're a
browser developer, you can write

559
00:31:17.490 --> 00:31:20.400
service stuff. I've written enough
service stuff in my time

560
00:31:20.400 --> 00:31:21.960
to tell you that, just
because you know how to

561
00:31:21.960 --> 00:31:24.480
write JavaScript in the browser,
it's not the same thing

562
00:31:24.480 --> 00:31:26.850
on the server. So that's
a bit of a fallacy

563
00:31:26.850 --> 00:31:31.680
that's been propagated over the
years. That's a, that's a

564
00:31:31.680 --> 00:31:33.630
big statement. We should pause
on that for a second,

565
00:31:33.630 --> 00:31:36.300
because that may have been
one of the reasons that

566
00:31:36.300 --> 00:31:38.620
people jumped into node. Like
people may be listening. They

567
00:31:38.620 --> 00:31:40.950
may maybe like, wait, what?
Oh, it absolutely was. I

568
00:31:40.950 --> 00:31:43.860
mean, I've heard it so
often it's just become this

569
00:31:43.860 --> 00:31:46.590
thing where, Oh, you know,
I, you know, I've done

570
00:31:46.590 --> 00:31:48.750
web development for years. I,
I know Java script I

571
00:31:48.750 --> 00:31:50.640
can go right into. Right.
Well usually what they mean

572
00:31:50.640 --> 00:31:53.070
is they know the Dom,
They know the dumb and

573
00:31:53.070 --> 00:31:55.620
they know the syntax of
the language, right. They don't

574
00:31:55.620 --> 00:31:59.310
necessarily understand the behavior of
the system on the server

575
00:31:59.310 --> 00:32:01.650
is obviously way different than
it is in the browser.

576
00:32:02.670 --> 00:32:04.920
So that's sort of the
hook that gets them in,

577
00:32:04.920 --> 00:32:07.350
I mean, a crude way
of saying it's sort of

578
00:32:07.350 --> 00:32:09.510
like the drug dealer model,
you know, the first hits

579
00:32:09.510 --> 00:32:12.300
free, you know, little JavaScript
gets in, then you get

580
00:32:12.300 --> 00:32:14.430
a little note and then
you get really wrapped into

581
00:32:14.430 --> 00:32:18.660
it. But, you know, as
you progress, you you'll realize

582
00:32:18.660 --> 00:32:22.320
that there are certain concerns
that you have on the

583
00:32:22.320 --> 00:32:24.180
server that are fundamentally different
than they are in the

584
00:32:24.180 --> 00:32:27.900
browser. And even on the
core level of node, as

585
00:32:28.050 --> 00:32:31.770
we're IOT has started picking
up steam, we're seeing a

586
00:32:31.770 --> 00:32:34.650
lot of the pull requests
coming in. The features that

587
00:32:34.650 --> 00:32:38.310
people want to add are
very influenced by browser based

588
00:32:38.310 --> 00:32:43.220
development and don't necessarily work
or could create problems for

589
00:32:43.220 --> 00:32:46.100
server side development. So there
is, you know, that sort

590
00:32:46.100 --> 00:32:49.460
of impedance mismatch that has
to get resolved. And I

591
00:32:49.460 --> 00:32:51.740
know we have one of
the North node core developers

592
00:32:51.740 --> 00:32:54.320
on our team, you know,
he's frequently, you know, trying

593
00:32:54.320 --> 00:32:56.150
to push back on some
of these things saying, well,

594
00:32:56.490 --> 00:32:59.180
understand why you want to
do this, you know, for

595
00:32:59.180 --> 00:33:01.280
browser development. Here's why it's
going to be a problem

596
00:33:01.280 --> 00:33:03.860
on the server. And let's
not rush to just go

597
00:33:03.860 --> 00:33:07.400
and change this because you
will break applications that are

598
00:33:07.400 --> 00:33:10.700
in production right now. And
we can't have that. So

599
00:33:11.240 --> 00:33:13.900
it's definitely a real concern.
So in a, as we

600
00:33:13.900 --> 00:33:15.670
close up here, I want
to ask you kind of

601
00:33:15.670 --> 00:33:18.970
a trick question. Someone I
want to ask you about

602
00:33:18.970 --> 00:33:21.340
microservices, because that seems to
be the hot new word

603
00:33:21.340 --> 00:33:27.910
right now. And as we
are probably contemporaries, we may

604
00:33:28.000 --> 00:33:29.890
have shared opinion on this.
I saw a really great

605
00:33:29.890 --> 00:33:33.370
tweet where someone said, you
know, my in-process call doesn't

606
00:33:33.370 --> 00:33:36.310
have enough latency. So I'm
going to, you know, use

607
00:33:36.310 --> 00:33:38.710
microservices. That's a good one.
You know what I mean?

608
00:33:39.090 --> 00:33:41.950
Do you think that we're
breaking things apart that don't

609
00:33:41.950 --> 00:33:46.270
need to be broken apart?
I definitely think that that's

610
00:33:46.270 --> 00:33:49.000
probably the norm right now.
As far as microservice go,

611
00:33:49.360 --> 00:33:52.540
microservices do solve a particular
problem, but you have to

612
00:33:52.540 --> 00:33:55.420
know you have that problem.
I think there's a lot

613
00:33:55.420 --> 00:34:00.040
of people who are just
either saying, Hey, microservices is

614
00:34:00.040 --> 00:34:04.180
the new SOA. So is
that a much more service

615
00:34:04.180 --> 00:34:10.900
oriented service oriented architecture? And
microservices is a, it's a

616
00:34:10.900 --> 00:34:15.400
facet of SOA. It's not
a replacement for SOA and

617
00:34:15.550 --> 00:34:17.260
gone. In fact, we were
talking about this today at

618
00:34:17.260 --> 00:34:20.980
lunch, you know, we need
to educate customers and developers

619
00:34:20.980 --> 00:34:23.590
more about that. Like understand
the problem we're trying to

620
00:34:23.590 --> 00:34:26.650
solve. And in some cases
it may be microservices. A

621
00:34:26.650 --> 00:34:29.470
lot of cases, you're really
looking for SOA and that's

622
00:34:29.470 --> 00:34:33.100
not microservices Well, and the
problem that you might have

623
00:34:33.100 --> 00:34:35.290
in a few years may
be that you have microservices.

624
00:34:37.120 --> 00:34:39.040
That might be a good
problem to have. Yeah, I

625
00:34:39.040 --> 00:34:43.120
suppose. But I think the
bigger problem is that people

626
00:34:43.120 --> 00:34:46.390
are always looking for the
new shiny and microservices, the

627
00:34:46.390 --> 00:34:49.540
current new shiny between microservices
and Docker, you know, people

628
00:34:49.540 --> 00:34:52.690
are gravitating towards it, right.
And all we're saying is,

629
00:34:53.140 --> 00:34:56.860
understand your problem. And maybe
that's the solution. We're not

630
00:34:56.860 --> 00:34:59.500
saying it's not, we're just
saying, let's make sure you

631
00:34:59.740 --> 00:35:02.440
truly have done the work
of understanding your problem before

632
00:35:02.470 --> 00:35:05.710
you get into it. Because
once you've built it, you

633
00:35:05.710 --> 00:35:08.890
own it. And you're going
to have to pay the

634
00:35:08.890 --> 00:35:12.520
cost of maintaining it over
time. If you're not prepared

635
00:35:12.520 --> 00:35:15.100
for that, if you're not
thinking about that, then you're

636
00:35:15.100 --> 00:35:18.340
just going to basically start
yet another dev cycle and

637
00:35:18.340 --> 00:35:21.130
create a new problem for
yourself. So let's slow it

638
00:35:21.130 --> 00:35:23.470
down where it makes sense.
Do folks a little bit

639
00:35:23.470 --> 00:35:26.530
more on the design and
architecture of your solution. And

640
00:35:26.530 --> 00:35:29.290
then if Microsoft services is
the way to go, great,

641
00:35:29.620 --> 00:35:34.390
let's build some microservices. A
lot of cases it's just

642
00:35:34.810 --> 00:35:37.680
chasing after the new shiny.
Yeah. As a, as my

643
00:35:37.680 --> 00:35:41.310
dad liked To say measure
twice. Cut once. Yes. And

644
00:35:41.310 --> 00:35:43.320
then of course, maybe folks
will do that with software

645
00:35:43.320 --> 00:35:47.820
from note source. That is
the hope and help, happy

646
00:35:47.820 --> 00:35:50.100
to help them do it.
Thank you so much. Kevin Stewart

647
00:35:50.130 --> 00:35:52.350
from note source for chatting
with me today. Thank you.

648
00:35:52.350 --> 00:35:55.440
Scotsman pleasure being with you.
This has been another episode

649
00:35:55.440 --> 00:35:57.870
of Hanselminutes and we'll see
you again next week.

