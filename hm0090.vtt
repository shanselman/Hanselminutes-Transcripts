WEBVTT FILE

1
00:00:12.120 --> 00:00:17.760
From Hansel minutes.com it's Hansel
minutes, a weekly discussion with

2
00:00:17.760 --> 00:00:23.730
web developer and technologist Scott
Hanselman hosted by Carl Franklin that's

3
00:00:23.730 --> 00:00:28.260
Ryan announcing show number 90
recorded live Wednesday, November seven,

4
00:00:28.560 --> 00:00:33.360
2007. Support for a minutes
is provided by tolerant, rad

5
00:00:33.360 --> 00:00:38.430
controls, most comprehensive suite of
proponents for windows for asp.net

6
00:00:38.430 --> 00:00:46.470
web applications. Online at www
dot <inaudible> dot com. Support

7
00:00:46.470 --> 00:00:50.700
is also provided by dotnet
developers journal. The world's leading.net

8
00:00:50.700 --> 00:00:57.720
developer magazine online at www
dot <inaudible> dot com. In

9
00:00:57.720 --> 00:01:01.200
this episode, Scott talks with
author and software architect, Dan

10
00:01:01.200 --> 00:01:07.220
Appleman. This is Scott Hanselman,
and this is another episode

11
00:01:07.220 --> 00:01:09.380
of Hansel minutes. We're sitting
here in the Mandalay Bay

12
00:01:09.380 --> 00:01:12.110
resort and casino with the
legendary Dan Appleman. How are

13
00:01:12.110 --> 00:01:16.240
you today, sir? I'm feeling
particularly legendary today. Fantastic. Fantastic.

14
00:01:16.250 --> 00:01:17.600
It must be difficult to
walk around as a living

15
00:01:17.600 --> 00:01:20.600
legend. Well, how would our
listeners know you? What are

16
00:01:20.600 --> 00:01:24.020
some of your greatest hits?
My greatest hits? Well, I

17
00:01:24.020 --> 00:01:26.000
go back to the old
visual basic days in the

18
00:01:26.000 --> 00:01:29.090
component world wrote a number
of books. One of them

19
00:01:29.090 --> 00:01:33.520
is the wind 32 guide
the visual basic programmers guide

20
00:01:33.530 --> 00:01:35.450
to the wind 30 to
API. And that was a

21
00:01:35.450 --> 00:01:40.970
big hit, also moving to
vb.net. And I'm also a

22
00:01:40.970 --> 00:01:45.920
cofounder of a press publishing
company. And currently one of

23
00:01:45.920 --> 00:01:50.360
my big projects is I'm
the webmaster of search.net.com, which

24
00:01:50.360 --> 00:01:54.560
is a custom search engine
for.net developers. Ah, very cool.

25
00:01:54.560 --> 00:01:56.600
So this is filtering content.
So then when you search

26
00:01:56.600 --> 00:01:59.780
for it, you're only getting
the best editor approved.net content,

27
00:01:59.840 --> 00:02:02.750
right? It's a, it's a
custom search engine specifically for

28
00:02:02.750 --> 00:02:07.280
dotnet content and the differences
are, are really incredible in

29
00:02:07.280 --> 00:02:10.640
terms of what you can
get. For example, one of

30
00:02:10.640 --> 00:02:14.780
the sessions I did today
discussed failed software projects, and

31
00:02:14.780 --> 00:02:16.190
one of the people comes
up and he asks, well,

32
00:02:16.190 --> 00:02:18.290
how would I find out
some more case histories? And

33
00:02:18.290 --> 00:02:21.140
I say, well, you know,
you can search for failed

34
00:02:21.140 --> 00:02:24.410
software projects, but if you
search on search.net.com, you'll actually

35
00:02:24.410 --> 00:02:29.120
get.net failed software projects and
you'll get information having to

36
00:02:29.120 --> 00:02:31.910
do with, I think he
was also interested in performance.

37
00:02:32.720 --> 00:02:34.660
How would you do performance
analysis and so on and

38
00:02:34.660 --> 00:02:38.750
say, well, you would get
dotnet specific performance because we

39
00:02:38.750 --> 00:02:41.480
search all the, the dev
sites and the MVP sites

40
00:02:41.480 --> 00:02:44.630
and, and expert sites. Chances
are, you're going to get

41
00:02:44.630 --> 00:02:46.940
some pretty good information on
the first page or two.

42
00:02:47.180 --> 00:02:48.770
So it sounds like you
have a pretty extensive white

43
00:02:48.770 --> 00:02:51.860
list of sites. That's specifically
only search within this domain

44
00:02:51.860 --> 00:02:56.390
of the sub domain. It's,
it's reasonably extensive. It's less

45
00:02:56.390 --> 00:02:58.310
so than you'd think because
a lot of the sites

46
00:02:58.310 --> 00:03:01.600
you find are really aggregators
of other sites. And I

47
00:03:01.600 --> 00:03:04.150
try to stay away from
that because if you, if

48
00:03:04.150 --> 00:03:06.160
you search across all the
aggregators, you end up getting

49
00:03:06.160 --> 00:03:09.490
the same hit 20 different
times, which doesn't really do

50
00:03:09.490 --> 00:03:12.040
you much good. So if
you really look at the

51
00:03:12.040 --> 00:03:14.710
people who are generating the
original content, that's not quite

52
00:03:14.710 --> 00:03:17.140
as many as you as
you'd think, but that's a

53
00:03:17.140 --> 00:03:19.230
fair amount. And how would
this compare to something like

54
00:03:19.260 --> 00:03:21.690
Google blog search? I mean,
certainly I feel like the

55
00:03:21.690 --> 00:03:24.960
most compelling content is sitting
on blogs. Are you picking

56
00:03:24.960 --> 00:03:26.850
blogs on a one by
one basis or are you

57
00:03:26.850 --> 00:03:31.800
saying like, I want all
of a weblogs.asp.net? Both. Both.

58
00:03:31.800 --> 00:03:33.600
So I'll, I'll go to
weblogs that ASP and then

59
00:03:33.600 --> 00:03:37.530
I'll go to the, the
Microsoft dev blogs, MSDN blogs,

60
00:03:37.770 --> 00:03:41.730
but I will absolutely get
individual sites and VP sites

61
00:03:41.730 --> 00:03:43.120
and so on. I think
your site's on there too.

62
00:03:43.200 --> 00:03:47.430
Five. Very good search.net. Yeah.
Search <inaudible> dot com one

63
00:03:47.430 --> 00:03:50.220
word. Cool. Now, do you
do any consulting these days?

64
00:03:50.220 --> 00:03:52.590
I mean, are you an
independent? I, I do a

65
00:03:52.590 --> 00:03:55.710
fair amount of consulting say
half and half. I really

66
00:03:55.710 --> 00:03:58.230
almost do it for fun
just to sort of keep

67
00:03:58.740 --> 00:04:00.540
my eye on it. And
I do a lot of

68
00:04:00.540 --> 00:04:03.090
it because my sister has
become a really amazing web

69
00:04:03.090 --> 00:04:07.230
architect. She's, she's one of
those people who will go

70
00:04:07.230 --> 00:04:09.780
into a company and give
them the website that they

71
00:04:09.780 --> 00:04:13.270
actually need, not the one
they're asking for. And, and

72
00:04:13.440 --> 00:04:16.620
those are really two very
different things, you know, she

73
00:04:16.620 --> 00:04:20.070
can come in and she
will find out about their

74
00:04:20.070 --> 00:04:24.180
business. She'll find out about
their brand if necessary, help

75
00:04:24.180 --> 00:04:27.840
them develop the brand. And
then only after she's really

76
00:04:27.840 --> 00:04:30.690
figured out what they're trying
to accomplish. Will she actually

77
00:04:30.690 --> 00:04:34.830
go ahead and tell them,
you know, adjust what they

78
00:04:34.830 --> 00:04:37.350
wanted to, what is really
going to work for them?

79
00:04:38.190 --> 00:04:40.530
And I do a lot
of her backend work. So

80
00:04:40.530 --> 00:04:44.820
I'm the software architect to
actually design and implement some

81
00:04:44.820 --> 00:04:47.340
of the solutions he comes
up with. So you're acting

82
00:04:47.340 --> 00:04:49.530
as a single architect, kind
of a, a one person,

83
00:04:49.530 --> 00:04:52.800
one architect shop. What kind
of challenges are there as

84
00:04:52.800 --> 00:04:54.540
opposed to being a team
of architecture, the member of

85
00:04:54.540 --> 00:04:57.300
a larger enterprise architecture group?
Well, that, that actually was

86
00:04:57.330 --> 00:05:00.420
the subject of this morning's
talk because one of the

87
00:05:00.420 --> 00:05:03.690
things I came to realize
is that a lot of

88
00:05:03.840 --> 00:05:07.800
the talk about software architecture
is focused towards the enterprise,

89
00:05:08.310 --> 00:05:10.500
right? And you think about
teams of software developers, and

90
00:05:10.500 --> 00:05:12.870
you think about the software
architect, whose job it is

91
00:05:12.870 --> 00:05:15.720
to manage the developers and
create the specifications and develop

92
00:05:15.720 --> 00:05:18.630
the requirements and all of
that. And that's great if

93
00:05:18.630 --> 00:05:21.240
it's an enterprise and they
know what a software architect

94
00:05:21.240 --> 00:05:24.000
is, they have the money
for software architect and they

95
00:05:24.000 --> 00:05:27.180
get it. And admittedly, even
a lot of the large

96
00:05:27.180 --> 00:05:30.690
company projects fail, but, but
still at least we sort

97
00:05:30.690 --> 00:05:33.660
of know what they need,
but what about the small

98
00:05:33.660 --> 00:05:37.830
businesses? What about the small
organizations, the one person shop

99
00:05:37.860 --> 00:05:40.710
or the small business or
the startup company where they're

100
00:05:40.710 --> 00:05:42.960
busy focusing on the product,
they need a website right

101
00:05:42.960 --> 00:05:45.960
away. They don't have the
resources to do it. Who's

102
00:05:45.960 --> 00:05:49.920
going to do it for
them. What about even larger

103
00:05:49.920 --> 00:05:53.040
companies where the product team
is again, developing the product

104
00:05:53.340 --> 00:05:56.490
and the website or an
it project comes to the

105
00:05:56.490 --> 00:06:02.030
one poor marketing person or,
or, you know, it manager

106
00:06:02.030 --> 00:06:05.060
who suddenly has to have
something that's really a small

107
00:06:05.060 --> 00:06:07.850
business. And what they'll do
is they'll go out and

108
00:06:07.850 --> 00:06:13.040
hire a consultant and they'll
get garbage. And one of

109
00:06:13.040 --> 00:06:15.080
the main reasons they get
garbage is because they're asking

110
00:06:15.080 --> 00:06:17.420
for garbage, they don't have
a software architect. They don't

111
00:06:17.420 --> 00:06:19.730
know what to ask for.
So part of my message

112
00:06:19.730 --> 00:06:24.320
is to help the small
shops, the individual developers, people

113
00:06:24.320 --> 00:06:27.950
who are brought into develop
a solution to realize they

114
00:06:27.950 --> 00:06:30.710
need to do the architecture
as well. They need to

115
00:06:30.710 --> 00:06:33.310
be software architects as well.
So let me see if

116
00:06:33.310 --> 00:06:35.290
I can understand it kind
of paraphrasing. You're saying that

117
00:06:35.290 --> 00:06:38.320
in that, in a smaller
organization, when you don't have

118
00:06:38.320 --> 00:06:41.200
all that support structure that
a larger enterprise architecture organization

119
00:06:41.200 --> 00:06:45.340
would have that the general
responsibility as an architect start

120
00:06:45.340 --> 00:06:47.080
to kind of bleed into
the roles of the other

121
00:06:47.080 --> 00:06:49.000
members of that smaller team.
And everyone has to kind

122
00:06:49.000 --> 00:06:52.720
of take up that architectural.
Sometimes the small team has

123
00:06:52.720 --> 00:06:57.100
one person or two people.
And one of the things

124
00:06:57.100 --> 00:07:00.910
that I see over and
over again is that a

125
00:07:00.910 --> 00:07:02.650
company will go and they'll
go out and try to

126
00:07:02.650 --> 00:07:07.270
get something done. They need
a solution. And the project

127
00:07:07.270 --> 00:07:10.840
is a disaster. I mean,
they are taken advantage of

128
00:07:10.900 --> 00:07:13.690
it's, it's shocking the degree.
So what are the root

129
00:07:13.690 --> 00:07:15.490
causes of that? I mean,
break it down to the

130
00:07:15.670 --> 00:07:18.280
what, why does, why do
we see that so often?

131
00:07:18.400 --> 00:07:19.960
Why is it so easy
to have that happen? The

132
00:07:20.320 --> 00:07:22.630
fewer people are involved, you
would think with fewer people,

133
00:07:22.630 --> 00:07:25.060
the communication will be better.
You would think so. But

134
00:07:25.420 --> 00:07:27.730
one of the studies I
looked at a KPMG study

135
00:07:27.730 --> 00:07:32.170
showed that by their definition,
about 60% of small projects,

136
00:07:32.610 --> 00:07:37.300
any project under 12 months,
they describe fails. It's either

137
00:07:37.300 --> 00:07:40.900
way over budget or way
past deadline, or just doesn't

138
00:07:40.900 --> 00:07:43.660
meet the requirements. And there
are a number of reasons

139
00:07:43.660 --> 00:07:47.770
for it. One is there
are some consultants who frankly

140
00:07:47.770 --> 00:07:51.040
are unethical. They are not
thinking about the best interest

141
00:07:51.040 --> 00:07:53.140
of the company. You know,
they'll find out what, what's

142
00:07:53.140 --> 00:07:55.780
your budget for it? Oh,
$50,000. Okay. We can spend

143
00:07:55.780 --> 00:08:01.210
$50,000. Right? You see that
it's terrible. And one of

144
00:08:01.390 --> 00:08:04.780
the points in my session
is that a software developer

145
00:08:04.780 --> 00:08:08.860
has an ethical responsibility towards
the client. You know, our

146
00:08:08.860 --> 00:08:10.870
job is to act in
the best interest of the

147
00:08:10.870 --> 00:08:12.850
client. And I think a
lot of people don't do

148
00:08:12.850 --> 00:08:16.300
that. Another thing that happens
is that, and this is

149
00:08:16.300 --> 00:08:19.270
pretty common. The software developer
gives the customer. What they

150
00:08:19.270 --> 00:08:22.660
ask for problem is that
the customer doesn't know what

151
00:08:22.660 --> 00:08:25.240
they want. Yeah. I was
talking to a guy about

152
00:08:25.240 --> 00:08:27.310
this earlier. One of my
bosses used to say that

153
00:08:27.310 --> 00:08:29.350
a customer walks in and
he says, this cell phone

154
00:08:29.350 --> 00:08:32.170
needs a bigger antenna. And
then ultimately you have to

155
00:08:32.170 --> 00:08:34.450
dig into the issue of
does this person wants better

156
00:08:34.450 --> 00:08:37.600
cell phone reception. They may
have come in with their

157
00:08:37.600 --> 00:08:40.690
proposed solution, which may very
well be a larger antenna,

158
00:08:40.720 --> 00:08:42.760
but it could be any
one of another dozen different,

159
00:08:43.030 --> 00:08:45.520
different issues. So often the
customer will come with a

160
00:08:45.520 --> 00:08:49.270
solution, Right. And their solutions
wrong. One, one example that

161
00:08:49.270 --> 00:08:52.060
I saw as again, this
was a website, the customer

162
00:08:52.060 --> 00:08:54.370
said, I want a CMS.
I want a content management

163
00:08:54.370 --> 00:08:57.300
solution say, okay, well, why
we want to be able

164
00:08:57.300 --> 00:09:00.270
to edit the site? Okay.
Well, that's reasonable. Tell us

165
00:09:00.270 --> 00:09:02.790
about the site. How often
does it change? Oh, well,

166
00:09:03.300 --> 00:09:05.700
it's not really going to
change, you know, occasionally it

167
00:09:05.700 --> 00:09:10.560
might change say, okay, who's
going to be doing this

168
00:09:10.560 --> 00:09:13.950
content. Well, I don't really
know. Who's, who's going to

169
00:09:13.950 --> 00:09:17.940
be making the changes. And
after talking and finding out,

170
00:09:18.330 --> 00:09:21.000
we came to realize that
they didn't want a CMS

171
00:09:21.000 --> 00:09:22.580
system at all. They wanted
to site, they could have

172
00:09:22.590 --> 00:09:26.790
re occasionally changed. So we
ended up putting them on

173
00:09:26.790 --> 00:09:31.350
a static HTML site and
hooking them up with contributes

174
00:09:31.350 --> 00:09:32.940
so that they could hire
a high school student to

175
00:09:32.940 --> 00:09:35.390
go ahead and edit those
occasional things Needed to, but

176
00:09:35.390 --> 00:09:37.850
of course, no, no, no
customer would come and say,

177
00:09:37.850 --> 00:09:40.070
I want a static HTML
site. That would never be

178
00:09:40.070 --> 00:09:42.140
the solution that they would
propose. Even though that may

179
00:09:42.140 --> 00:09:45.410
be the one that they
truly needed. Sure. Because they

180
00:09:45.440 --> 00:09:48.050
thought they'd heard that a
CMS system is what allows

181
00:09:48.050 --> 00:09:50.840
you to edit your site
and handle exactly. But, but

182
00:09:50.840 --> 00:09:53.300
by doing that, by keeping
them on a static HTML

183
00:09:53.300 --> 00:09:56.930
site, we take them a
solution that's incredibly secure, very

184
00:09:56.930 --> 00:10:01.400
stable, excellent performance can be
edited to suit their needs.

185
00:10:01.550 --> 00:10:04.370
It doesn't have to be
updated with periodic security patches.

186
00:10:04.400 --> 00:10:06.590
It was exactly. And we
saved them a ton of

187
00:10:06.590 --> 00:10:09.320
money. Yeah. But not only
immediately in the short term,

188
00:10:09.320 --> 00:10:11.780
but in the long run,
Presumably pass that savings on

189
00:10:11.780 --> 00:10:13.790
to them, of course, as
opposed to doing a fixed

190
00:10:13.790 --> 00:10:15.860
bid and keeping it off
yourself. Of course. I mean,

191
00:10:16.220 --> 00:10:19.790
I, I, I have an
advantage because consulting is a

192
00:10:19.790 --> 00:10:23.000
sideline for me. Oh yeah.
So I don't need the

193
00:10:23.000 --> 00:10:26.720
work. So I have a
real freedom in terms of

194
00:10:26.870 --> 00:10:30.230
really trying to save the
customer money. And, and that's

195
00:10:30.230 --> 00:10:32.180
what I enjoy doing. I
like to find a solution

196
00:10:32.180 --> 00:10:35.630
that really is reliable, stable,
inexpensive, all those good things.

197
00:10:35.780 --> 00:10:37.520
I think that's a real
challenge though, for the independent

198
00:10:37.520 --> 00:10:39.710
consultant who, who does need
the money. You know, if

199
00:10:39.710 --> 00:10:41.510
you need to hit the
mortgage that month and you

200
00:10:41.510 --> 00:10:43.580
also need to be ethical
and provide the best possible

201
00:10:43.580 --> 00:10:46.400
experience for the client. One
of the discussions I was

202
00:10:46.400 --> 00:10:48.740
having yesterday at dinner was
a gentleman said, well, what

203
00:10:48.740 --> 00:10:51.110
if you spend many, many
years building up your consultancy

204
00:10:51.110 --> 00:10:55.100
as a single individual building
frameworks, and those frameworks enable

205
00:10:55.100 --> 00:10:58.130
you to deliver things faster
and faster and faster, maybe

206
00:10:58.130 --> 00:10:59.720
you're billing out at a
a hundred dollars an hour,

207
00:11:00.500 --> 00:11:02.720
but you, you realize that
a particular client could make

208
00:11:02.720 --> 00:11:05.180
great use of your framework.
And that might save them

209
00:11:05.570 --> 00:11:08.990
the equivalent of 40 hours,
80 hours. Do you bill

210
00:11:08.990 --> 00:11:12.530
for what you would call
value, added billing, which is

211
00:11:12.800 --> 00:11:15.200
hours not done, but hours
that they would have had

212
00:11:15.200 --> 00:11:18.410
to have paid because you
created this framework. Do you

213
00:11:18.410 --> 00:11:20.870
raise your hourly rate or
do you simply pass the

214
00:11:20.870 --> 00:11:22.610
savings on to them and
say that this is why

215
00:11:22.610 --> 00:11:24.780
you should continue to do
business with me? Well, What

216
00:11:24.860 --> 00:11:28.100
I personally do in cases
like that is, is, you

217
00:11:28.100 --> 00:11:30.260
know, again, my background is
that of a component vendor.

218
00:11:31.280 --> 00:11:33.620
So I componentize it. So
there are a number of

219
00:11:33.620 --> 00:11:36.410
pieces that are yes. And,
and you know, we're going

220
00:11:36.410 --> 00:11:38.870
to charge you the hourly
rate and $150 for this

221
00:11:38.870 --> 00:11:42.980
component. So the formalization of
that framework, rather than simply

222
00:11:42.980 --> 00:11:46.040
having a, a collection of,
of utilities and base classes

223
00:11:46.040 --> 00:11:48.200
that you've got and have
in your pocket, draw a

224
00:11:48.200 --> 00:11:50.870
dotted line around those and
drop, drop a licensing agreement,

225
00:11:50.870 --> 00:11:52.430
give it a name and
say, this is the component

226
00:11:52.430 --> 00:11:55.300
we're going to license you.
Absolutely. So everybody wins. The

227
00:11:55.300 --> 00:11:59.530
customer gets the benefit of
the amortized price of the

228
00:11:59.530 --> 00:12:01.660
component. The fact that you're
able to reuse it, you

229
00:12:01.660 --> 00:12:05.470
get to sell a product,
not just time, it's a

230
00:12:05.470 --> 00:12:08.290
win, win situation for everybody.
And it's perfectly ethical. Cause

231
00:12:08.290 --> 00:12:10.530
it's all above board. I
wonder if that would be

232
00:12:10.530 --> 00:12:12.780
harder. I would think with
these micro ISV is, cause

233
00:12:12.780 --> 00:12:15.150
it seems like a lot
of one man or one

234
00:12:15.150 --> 00:12:18.860
woman consultancy shops also have
a microwave ISV kind of

235
00:12:18.870 --> 00:12:21.840
event. And you're, you have
a certain split brain issue

236
00:12:21.840 --> 00:12:24.300
where you're trying to act
as a consultant, but you'd

237
00:12:24.300 --> 00:12:27.480
really like to get these
other, these other electrons out

238
00:12:27.480 --> 00:12:30.330
for sale because electrons are
cheaper to sell and molecules,

239
00:12:31.170 --> 00:12:33.690
you know? Well, Have you
read by any chance the

240
00:12:33.690 --> 00:12:37.470
world is flat? Yeah, I
have actually. So really what

241
00:12:37.470 --> 00:12:41.070
we're talking about is what
you described a micro ISV.

242
00:12:41.070 --> 00:12:44.280
It's how do you stay
relevant and how do you

243
00:12:44.280 --> 00:12:46.560
stay effective as a consultant
in a world where you're

244
00:12:46.560 --> 00:12:49.350
competing against render coder? You
know, these guys in Bangalore

245
00:12:49.350 --> 00:12:53.280
who will do things for
a hundred bucks. And the

246
00:12:53.280 --> 00:12:56.580
value that we provide is
not in the coding. It

247
00:12:56.580 --> 00:12:59.070
is really in the software
architecture. It is in the

248
00:12:59.070 --> 00:13:02.760
ability to really talk to
the customer, find out what

249
00:13:02.760 --> 00:13:05.670
they really need, give them
an effective solution. That's something

250
00:13:05.670 --> 00:13:08.940
that's really, really hard to
do from Bangalore, right? And

251
00:13:08.940 --> 00:13:12.120
that's the advantage we have.
And Of course, some of

252
00:13:12.120 --> 00:13:15.870
our listeners of course, listening
to this in Bangalore, That's

253
00:13:15.870 --> 00:13:18.450
fine. So you know what?
This is what you need

254
00:13:18.450 --> 00:13:21.990
to do. Componentize your solutions,
component Size your solutions and,

255
00:13:22.680 --> 00:13:27.330
and feel comfortable, really finding
out what your customer needs.

256
00:13:27.330 --> 00:13:30.090
If you can find out,
if you can solve the

257
00:13:30.090 --> 00:13:34.320
customer's problem, save the money
you will make up in

258
00:13:34.320 --> 00:13:38.310
referrals more than what you
would lose in the one

259
00:13:38.310 --> 00:13:40.800
project. Well, that's interesting. I
just had this phrase popped

260
00:13:40.800 --> 00:13:44.760
into my head architecting for
referrals is just thinking that

261
00:13:44.820 --> 00:13:47.190
as a software architect, there's
so many competing things that

262
00:13:47.190 --> 00:13:50.160
you need to balance, right?
I mean the job of

263
00:13:50.160 --> 00:13:52.530
an architect, a software architect
is definitely one of juggling.

264
00:13:53.640 --> 00:13:57.840
When you look at you
say, what is a software

265
00:13:57.840 --> 00:13:59.940
architect through? And I looked
at some of the definitions

266
00:13:59.940 --> 00:14:02.430
and what it really comes
down to is, is we're

267
00:14:02.430 --> 00:14:05.880
the people who prevent projects
from failing. I mean, that's

268
00:14:05.880 --> 00:14:08.580
the job of a software
architect cause so many projects

269
00:14:08.580 --> 00:14:11.430
do fail. In fact, if
you compare software architecture to

270
00:14:11.430 --> 00:14:14.010
other kinds of architecture and
we were here in Mandalay

271
00:14:14.010 --> 00:14:16.590
Bay, and I got to
tell you if the construction,

272
00:14:16.620 --> 00:14:19.860
the building architects had the
same track record as software

273
00:14:19.860 --> 00:14:22.440
architects, I would not feel
comfortable in the 16th floor

274
00:14:22.440 --> 00:14:25.110
of this hotel. And I
was like, there's a 20%

275
00:14:25.110 --> 00:14:30.510
chance of what? So, you
know, we're talking about preventing

276
00:14:30.510 --> 00:14:33.960
things from failing. Well, why
do software projects fail? It's

277
00:14:33.960 --> 00:14:37.290
not the technology. It's not
the coding software projects fail

278
00:14:37.380 --> 00:14:45.360
because of people issue issues.
They failed because of failure

279
00:14:45.360 --> 00:14:48.240
to get good requirements and
or to get the incorrect

280
00:14:48.300 --> 00:14:53.540
requirements. They are inadequate of
the software developers. It's poor

281
00:14:53.540 --> 00:14:58.220
design. These are what cause
software projects fail, poor management.

282
00:14:58.780 --> 00:15:01.610
You bring up, do you
bring up design? And I

283
00:15:01.630 --> 00:15:03.280
have noticed a lot of
people and I've been guilty

284
00:15:03.280 --> 00:15:06.880
of this, myself using the
word architecture and design interchangeable.

285
00:15:06.880 --> 00:15:10.000
Wait, no design is part
of architecture. Okay. A subset,

286
00:15:10.090 --> 00:15:13.540
it's a subset, a software
architects concerned with the entire

287
00:15:13.540 --> 00:15:16.060
software life cycle. And we're
trying to come up with

288
00:15:16.060 --> 00:15:18.160
a solution. First of all,
we have to define what

289
00:15:18.160 --> 00:15:21.070
are the requirements? What does
the customer really truly need?

290
00:15:21.610 --> 00:15:25.480
Okay. Then what are the
designs? What are the approaches

291
00:15:25.540 --> 00:15:28.480
that the architectures, if you
will, for solving that problem,

292
00:15:30.610 --> 00:15:36.040
then there's the actual specifications
actually formalizing W when you're

293
00:15:36.040 --> 00:15:37.360
doing a small project, how
do you like to do

294
00:15:37.360 --> 00:15:39.700
your specifications? I understand that
a lot of people who

295
00:15:39.700 --> 00:15:42.280
do one man, two man
shops like to do like,

296
00:15:42.310 --> 00:15:44.350
you know, the code is
the spec or the test

297
00:15:44.350 --> 00:15:46.890
or the spec. They use
specifications like end spec. Our

298
00:15:46.900 --> 00:15:49.540
spec sometimes I'll use screenshots.
They'll point at that and

299
00:15:49.540 --> 00:15:53.680
say, well, that mockup is
the spec is the spec

300
00:15:53.680 --> 00:15:56.320
pros. As far as you're
concerned, I like pros. I'm

301
00:15:56.320 --> 00:15:59.680
a writer. So for me,
the spec is pros the

302
00:15:59.680 --> 00:16:02.080
two big parts of the
spec, there's the feature list.

303
00:16:02.590 --> 00:16:04.510
And that might include, you
know, some graphics and so

304
00:16:04.510 --> 00:16:07.840
on. It might be just
a bulleted list in plain

305
00:16:08.260 --> 00:16:11.500
English, right? Or whatever language
you're voting in. Something that

306
00:16:12.100 --> 00:16:14.920
the user can actually understand.
It sounds like user stories

307
00:16:14.920 --> 00:16:17.140
that people would say in
the agile community You're getting

308
00:16:17.590 --> 00:16:21.250
right. Then there's the non
feature list. These are things

309
00:16:21.250 --> 00:16:24.670
you're not getting. And that's
more important. The negative space.

310
00:16:24.820 --> 00:16:30.370
Yes. Because when the customer
who isn't going to read

311
00:16:30.370 --> 00:16:34.420
the spec anyway, is barely
going to understand it. They

312
00:16:34.420 --> 00:16:36.310
sort of assume they've told
you what they want. So

313
00:16:36.310 --> 00:16:38.050
they're going to assume that
it's in the feature list,

314
00:16:38.080 --> 00:16:39.940
but when you say here's
what you're not getting, they

315
00:16:39.940 --> 00:16:43.060
might actually pay attention to
that. And it might cause

316
00:16:43.060 --> 00:16:44.380
them to step back and
say, Oh, hold on a

317
00:16:44.380 --> 00:16:47.890
minute. I want that. Or
I need that. What would

318
00:16:47.890 --> 00:16:51.400
it cost me? It also
is sort of good in

319
00:16:51.400 --> 00:16:54.430
terms of, of, of covering
your yourself in terms of

320
00:16:54.430 --> 00:16:57.220
when they come back later
and say, here's why isn't

321
00:16:57.220 --> 00:16:58.840
this here. Say, look, it's
in the list of things

322
00:16:58.840 --> 00:17:02.470
that I wasn't going to
do. Right? It's the list

323
00:17:02.470 --> 00:17:04.990
of things that you can't
have unless you spend more

324
00:17:04.990 --> 00:17:08.830
money. Right? So the, the
non feature list, and, and

325
00:17:08.830 --> 00:17:11.530
this is, this is it's
good from a design perspective,

326
00:17:11.530 --> 00:17:14.920
because you're also thinking when
you get around to designing,

327
00:17:14.920 --> 00:17:17.860
it's like, okay, where are
my limitations? What doors am

328
00:17:17.860 --> 00:17:19.900
I closing in design things
that are going to become

329
00:17:19.900 --> 00:17:22.750
very hard to do later
because of a design decision

330
00:17:22.750 --> 00:17:25.810
I make now, That's very
interesting. I think that from

331
00:17:25.810 --> 00:17:27.940
my point of view, that
there's a big difference. There's

332
00:17:27.940 --> 00:17:30.610
an explicit difference between simply
the list of stuff you're

333
00:17:30.610 --> 00:17:35.050
not getting versus the things
that this design And that

334
00:17:35.050 --> 00:17:37.990
is the critical part because
when you preclude something, it

335
00:17:37.990 --> 00:17:41.770
becomes really, really expensive to
add it later. So you

336
00:17:41.770 --> 00:17:43.690
want to, you want to
get a handle on that

337
00:17:43.690 --> 00:17:48.190
as a software architect, because
now is the time when

338
00:17:49.290 --> 00:17:51.930
you have to consider the
future as a software architect,

339
00:17:51.930 --> 00:17:53.640
you want to consider not
just what they want. Now

340
00:17:53.670 --> 00:17:56.190
you want to consider anything
they might ever possibly want,

341
00:17:56.520 --> 00:17:58.860
because now's the cheapest time
to put those hooks in,

342
00:17:58.890 --> 00:18:02.070
to make it possible, to
make the architecture enable that.

343
00:18:02.190 --> 00:18:05.130
Right. So I'm really big
on asking the customer question,

344
00:18:05.130 --> 00:18:07.320
are you ever, ever in
your wildest dreams going to

345
00:18:07.320 --> 00:18:10.730
want this? Exactly. This is
a load bearing wall. Yes.

346
00:18:10.760 --> 00:18:12.710
And if we knock it
down, it's going to cause

347
00:18:12.890 --> 00:18:15.470
the stabilization, the entire structure.
Yes. So, so my specs

348
00:18:15.470 --> 00:18:18.350
include a fair amount of,
of, you know, if you're

349
00:18:18.350 --> 00:18:20.360
ever going to want this,
it's going to cost you

350
00:18:20.360 --> 00:18:24.680
this much to make it
possible someday later. Certainly. Yeah.

351
00:18:24.680 --> 00:18:27.920
It certainly costs money to
I'm mixing my metaphors now,

352
00:18:27.950 --> 00:18:30.080
but sometimes the customer wants
to have their finger on

353
00:18:30.080 --> 00:18:31.730
the chest piece before they
make that move. And they

354
00:18:31.730 --> 00:18:33.590
just won't take their finger
off the piece and commit

355
00:18:33.590 --> 00:18:35.810
to that move. Well, I
just don't know that I

356
00:18:35.810 --> 00:18:38.270
might want that. And then
you get into, you know,

357
00:18:38.270 --> 00:18:40.550
risk mitigation. It's like, what,
how risky is it if

358
00:18:40.550 --> 00:18:43.220
we take this, this direction
or that, And, and that's

359
00:18:43.220 --> 00:18:46.040
what a lot of the
spec is. It's, you know,

360
00:18:46.280 --> 00:18:48.350
what are the risks? What
are the approaches? What are

361
00:18:48.350 --> 00:18:50.240
the trade offs? You know,
you can go this way.

362
00:18:50.240 --> 00:18:54.410
You can go this way.
That's that software architecture, the

363
00:18:54.410 --> 00:18:57.320
coding's the easiest part that,
you know, I don't even

364
00:18:57.320 --> 00:18:58.940
do a lot of the
coding. I'll find other people

365
00:18:58.940 --> 00:19:00.920
to do coding, Right? In
that context, the coding is

366
00:19:00.920 --> 00:19:04.220
the transcription, right? If you
have correctly taking their business

367
00:19:04.220 --> 00:19:06.320
need and written it into
a spec, then coding is

368
00:19:06.320 --> 00:19:09.980
just the transcription of that,
Right? We're also very concerned

369
00:19:09.980 --> 00:19:13.640
about longterm maintenance support. What
are they going to do

370
00:19:13.640 --> 00:19:18.680
when you leave? Right. One
horror story. I actually saw

371
00:19:18.680 --> 00:19:20.540
this. I was looking at
Rent-A-Car cause I wanted to

372
00:19:20.540 --> 00:19:24.920
get familiar with it. This
was somebody was requesting a

373
00:19:24.920 --> 00:19:28.760
job to unzip a file.
It seems like all of

374
00:19:28.760 --> 00:19:31.730
their source code had been
built by this consultant. And

375
00:19:31.760 --> 00:19:34.070
they had zipped up the
source code. They password protected

376
00:19:34.070 --> 00:19:37.100
it and they'd left, Oh
no, Oh no source control

377
00:19:37.100 --> 00:19:40.610
for them. Right. And they
didn't have any access to

378
00:19:40.610 --> 00:19:43.760
the code. And, and of
course, nowadays, depending on which

379
00:19:43.760 --> 00:19:47.570
the technology you use, some
of them are really very,

380
00:19:47.570 --> 00:19:51.470
very secure. And I have
total sympathy and, and I'm

381
00:19:51.470 --> 00:19:55.610
actually the tragedy is that
the lack of ethics on

382
00:19:55.610 --> 00:19:59.060
the part of the software
developer, who didn't make it,

383
00:19:59.780 --> 00:20:02.270
you know, give them the
product they bought basically. And

384
00:20:02.270 --> 00:20:04.790
it's tragic when that happens.
I've seen a number of

385
00:20:04.790 --> 00:20:08.900
cases where that happens and
it's unacceptable Because ultimately that

386
00:20:08.900 --> 00:20:11.120
individual didn't know what they
were receiving and they may

387
00:20:11.120 --> 00:20:13.130
not have been, they may
not have been educated enough

388
00:20:13.130 --> 00:20:14.930
to know that they did
in fact, need that code.

389
00:20:15.740 --> 00:20:18.440
It could be, but the
software developers responsibilities to make,

390
00:20:18.470 --> 00:20:21.230
I mean, we have a
responsibility to make sure that

391
00:20:21.230 --> 00:20:25.030
somebody can follow us and
support the code. Yeah. That's

392
00:20:25.030 --> 00:20:27.140
actually, that's actually true and
open source projects as well.

393
00:20:27.140 --> 00:20:29.450
We had an interesting discussion
this morning and the open

394
00:20:29.450 --> 00:20:33.830
source panel at about eight
this morning. And the comment

395
00:20:33.830 --> 00:20:35.810
came up that, well, what
if the entire project team

396
00:20:35.810 --> 00:20:38.270
is hit by a bus
or, you know, we're unable

397
00:20:38.270 --> 00:20:40.620
to get something to get
help, to get support on

398
00:20:40.620 --> 00:20:43.040
this because it's old. And
we all kind of refer

399
00:20:43.040 --> 00:20:45.590
to that kind of canonical
project that we've all stumbled

400
00:20:45.590 --> 00:20:48.130
upon on the net. That
looks really interesting, but you

401
00:20:48.130 --> 00:20:50.410
know, it hasn't been updated
since 2003 and that was

402
00:20:50.410 --> 00:20:53.350
like 50 years ago and
I don't really feel comfortable.

403
00:20:53.860 --> 00:20:56.560
And then when you unzip
it and you can't say

404
00:20:57.100 --> 00:20:59.590
with some projects, you can't
just say build dot bat.

405
00:21:00.490 --> 00:21:02.260
You know what I'm saying?
Right. I I've worked at

406
00:21:02.260 --> 00:21:04.900
companies where we've put source
code into escrow and, you

407
00:21:04.900 --> 00:21:07.570
know, to protect the, the
client. But ultimately we all

408
00:21:07.570 --> 00:21:08.980
knew that there was no
way that they would ever,

409
00:21:09.010 --> 00:21:10.840
they would ever be able
to get the kind of

410
00:21:10.840 --> 00:21:13.420
Rube Goldberg and build system
that we had put together

411
00:21:13.450 --> 00:21:15.700
in order to make this
thing build. So while it

412
00:21:15.700 --> 00:21:18.550
gave them comfort that this
source was an escrow, certainly

413
00:21:18.550 --> 00:21:21.090
they weren't enabled to actually
do anything about it. It's

414
00:21:21.090 --> 00:21:24.630
actually funny because that's where
with our software company, one

415
00:21:24.630 --> 00:21:28.530
of the things we did
was a large portion of

416
00:21:28.530 --> 00:21:31.440
our code. We didn't make
it open source, but we

417
00:21:31.470 --> 00:21:33.540
opened the source. We made
the source code available to

418
00:21:33.540 --> 00:21:35.910
our customers. So it's not
like open source, open source

419
00:21:35.910 --> 00:21:39.210
source, open source opened. And
the reason we did that

420
00:21:39.210 --> 00:21:41.220
is we wanted to make
sure that all of our

421
00:21:41.220 --> 00:21:44.430
customers, even though we've been
around for since, since 91,

422
00:21:44.430 --> 00:21:47.640
which is an eternity and
we still will support and

423
00:21:47.640 --> 00:21:51.060
ship stuff from back now.
Really. Wow. Yeah. I mean,

424
00:21:51.060 --> 00:21:54.510
it's quite a statement. Well,
we believe that software life

425
00:21:54.510 --> 00:21:57.960
cycles are as long as
the customer needs them, but

426
00:21:58.560 --> 00:22:01.110
we also realize that that
can't go on forever. So

427
00:22:01.110 --> 00:22:03.330
we opened up the source
and one of the projects

428
00:22:03.330 --> 00:22:06.060
we had was, okay, let's
make sure this can be

429
00:22:06.060 --> 00:22:10.830
built. And you know, one
of the techniques that we

430
00:22:10.830 --> 00:22:12.600
make sure we can build
our own software is that

431
00:22:12.630 --> 00:22:16.140
we don't upgrade machines. We
replace machines. So I have

432
00:22:16.380 --> 00:22:19.740
literally a rack of machines
that are built systems for

433
00:22:19.740 --> 00:22:22.410
old software. Wow. So we
can go back and rebuild

434
00:22:22.410 --> 00:22:24.990
stuff. Now, of course that's
much better because you have

435
00:22:24.990 --> 00:22:28.260
virtual machines. Yeah. I actually
have a windows 98 virtual

436
00:22:28.260 --> 00:22:31.380
machine that I use to
sync my Newton because I

437
00:22:31.380 --> 00:22:33.570
couldn't get my Newton to
work in 64 of it.

438
00:22:33.570 --> 00:22:36.510
Vista don't know why I
seemed like a reasonable scenario.

439
00:22:36.630 --> 00:22:39.420
Our accounting software runs on
windows, Emmy inside of a

440
00:22:39.420 --> 00:22:43.350
VM inside of a VM.
Fantastic. Right. So, so virtual

441
00:22:43.350 --> 00:22:45.690
machines really go a long
way to solving that particular

442
00:22:45.690 --> 00:22:49.210
problem for which I'm incredibly
grateful. Yeah. That's good. I

443
00:22:49.210 --> 00:22:50.790
think that's a great idea.
I think of the metaphor

444
00:22:50.790 --> 00:22:52.980
of a, if you've got
a classic car in the

445
00:22:52.980 --> 00:22:54.780
garage, you really need to
make sure that that car

446
00:22:54.780 --> 00:22:57.140
gets turned on every couple
of months. And I liked

447
00:22:57.140 --> 00:22:59.400
the idea of the formalization
of that. Let's just make

448
00:22:59.400 --> 00:23:01.830
sure we build everything, you
know, a couple of times

449
00:23:01.830 --> 00:23:04.290
a year to make sure
that something hasn't rotted, Right.

450
00:23:04.560 --> 00:23:07.170
The real problem with building
our old stuff, you know,

451
00:23:07.170 --> 00:23:09.570
for someone getting our sources,
actually not going to be

452
00:23:09.810 --> 00:23:11.490
our code, it's going to
be that they're going to

453
00:23:11.490 --> 00:23:14.400
have to get a copy
of, you know, visual basic

454
00:23:14.430 --> 00:23:20.190
3.0 or visual C plus
plus 5.1 or whatever version

455
00:23:20.190 --> 00:23:24.120
was the fixed bill version.
Because, you know, when we

456
00:23:24.750 --> 00:23:28.110
upgrade to newer versions of
the software, the new version

457
00:23:28.110 --> 00:23:29.850
gets built on the latest
C plus plus, but we

458
00:23:29.850 --> 00:23:32.310
don't go ahead and back
build old versions. I mean,

459
00:23:32.310 --> 00:23:34.380
that would be a lot
of time for no purpose.

460
00:23:34.500 --> 00:23:37.500
Right. Do you have any
formalization? This is a little

461
00:23:37.500 --> 00:23:40.740
bit off topic, but I
just thinking about configuration management,

462
00:23:40.740 --> 00:23:42.750
cause you're talking about how
the architect's job is the

463
00:23:42.750 --> 00:23:46.340
entire life cycle of the
software. And I, a friend

464
00:23:46.340 --> 00:23:49.640
of mine, Adam Kogan had
an application that he shipped.

465
00:23:49.670 --> 00:23:51.980
And when you go to
the help about menu, he

466
00:23:51.980 --> 00:23:56.360
actually shipped end unit the
gooey with his application so

467
00:23:56.360 --> 00:23:59.060
that you could run all
of his unit tests on

468
00:23:59.060 --> 00:24:02.360
the client machine. And some
people thought this was madness.

469
00:24:02.360 --> 00:24:04.070
And I thought this was
just about the coolest thing

470
00:24:04.460 --> 00:24:07.100
ever. And he would basically
let the user run a

471
00:24:07.100 --> 00:24:09.470
complete suite of unit tests,
the same one he runs

472
00:24:09.740 --> 00:24:11.960
and then send the results
to them in order to

473
00:24:11.960 --> 00:24:14.120
see the, how of the
health of this. And it

474
00:24:14.120 --> 00:24:15.470
was kind of a, it
was kind of a clever

475
00:24:15.470 --> 00:24:18.260
poor man's configuration management system.
And then they ended up

476
00:24:18.290 --> 00:24:21.350
building that into a larger
diagnostic tool, such that if

477
00:24:21.350 --> 00:24:23.480
at any client is having
trouble with their machine, you

478
00:24:23.780 --> 00:24:26.840
download this thing, check the
status quo and kind of

479
00:24:26.870 --> 00:24:28.930
upload it to them in
order to see if the

480
00:24:28.930 --> 00:24:32.230
version numbers, Of course, you're
talking about a completely different

481
00:24:32.230 --> 00:24:37.450
subject, which is instrumenting software
for most systems. And, you

482
00:24:37.450 --> 00:24:41.860
know, nowadays for all of
our debt.net development, we instrument

483
00:24:41.860 --> 00:24:46.030
the application. So it's full
of trace, trace sources and

484
00:24:46.030 --> 00:24:47.890
so on, and you can
turn them on and off

485
00:24:47.890 --> 00:24:51.580
using config file and dump
tons of information and capture

486
00:24:51.580 --> 00:24:55.390
it and have them send
it to you. So yes,

487
00:24:55.960 --> 00:24:59.950
writing software instruments. Yeah, I
guess that was a little

488
00:24:59.950 --> 00:25:01.390
bit of a tangent, but
I was just thinking that

489
00:25:01.720 --> 00:25:04.300
those are the kinds of
things that I've seen. It's

490
00:25:04.300 --> 00:25:06.850
funny, I've seen more of
those kinds of techniques in

491
00:25:06.850 --> 00:25:10.900
one and two man software
shops than in large enterprises.

492
00:25:11.560 --> 00:25:13.690
Well, you know, there's a
lot to be said for

493
00:25:13.690 --> 00:25:16.000
the one and two man
software shop. When you yourself

494
00:25:16.000 --> 00:25:18.850
mentioned it earlier, it does
cut down the communication costs.

495
00:25:19.570 --> 00:25:25.210
You don't necessarily have to
create a complex formal specification

496
00:25:25.360 --> 00:25:27.700
because you're not splitting up
the work among the dozen

497
00:25:27.700 --> 00:25:30.040
developers. And the fact of
the matter is that you

498
00:25:30.040 --> 00:25:32.110
wouldn't want to do a
complex formal specification for a

499
00:25:32.110 --> 00:25:36.370
small project that have the
scale anyway, because nobody's ever

500
00:25:36.370 --> 00:25:37.900
going to read it. I
mean, they don't read the

501
00:25:37.900 --> 00:25:41.680
documentation anyway. They don't read
the specifications anyway, it's For

502
00:25:41.680 --> 00:25:43.810
when they don't get what
they want, they refer back

503
00:25:43.810 --> 00:25:45.250
to it to make sure
because they think of the,

504
00:25:45.520 --> 00:25:47.260
I think the most average
business person thinks of a

505
00:25:47.260 --> 00:25:50.680
software specification as being a
pretty clear contract, pretty clear

506
00:25:50.680 --> 00:25:54.610
a clear relationship between the
architect and them. Right? One

507
00:25:54.610 --> 00:25:57.550
of the things that, that
I do that I don't

508
00:25:57.550 --> 00:25:59.350
know how common this is,
but I think it's really

509
00:25:59.350 --> 00:26:02.470
important is we'll often do
a proposal to do the

510
00:26:02.470 --> 00:26:06.520
proposal. I've seen a lot
of proposals, you know, people

511
00:26:06.520 --> 00:26:08.170
go on and say, we
need this and see the

512
00:26:08.170 --> 00:26:10.540
proposals come back. And, and
most of them are garbage.

513
00:26:10.990 --> 00:26:14.500
And the reason they're garbage
is because in order to

514
00:26:14.500 --> 00:26:16.690
really quote a project in
order to do a proper

515
00:26:16.690 --> 00:26:18.670
proposal, you really have to
have a lot of the

516
00:26:18.670 --> 00:26:24.550
design and requirements already done.
Otherwise you're just guessing. So

517
00:26:24.550 --> 00:26:26.050
you're, it sounds to me
like you're pretty clear to

518
00:26:26.050 --> 00:26:27.760
charge them for that. Even
if you don't end up

519
00:26:27.760 --> 00:26:32.860
doing the final work, If
it's substantial. Yeah, absolutely. So

520
00:26:32.860 --> 00:26:35.770
w we'll come in and
we'll, we'll do, we'll find

521
00:26:35.770 --> 00:26:38.710
out your requirements, we'll find
out your current status. We'll

522
00:26:38.710 --> 00:26:41.110
figure out what you need.
We'll come up with not

523
00:26:41.110 --> 00:26:44.910
a full software specification, but
at least a general architecture

524
00:26:44.910 --> 00:26:47.790
recommendations of technologies do you
use and so on. And

525
00:26:47.790 --> 00:26:49.680
then, you know, we can
build it for you or

526
00:26:49.680 --> 00:26:51.390
you can get it. Sometimes
we don't even want to

527
00:26:51.390 --> 00:26:54.420
build it. Let's say I'm
not a consulting firm. That's

528
00:26:54.420 --> 00:26:55.950
true. I mean, how often
have you done that? Have

529
00:26:55.950 --> 00:26:58.320
you gone in beginning of
the, you know, step zero,

530
00:26:58.320 --> 00:27:01.980
the request for proposal and
then said after an appropriate

531
00:27:01.980 --> 00:27:03.840
vetting, you know, I don't
think I'm interested in this

532
00:27:03.840 --> 00:27:06.600
business. Sometimes I'll go. And
even from the beginning, I

533
00:27:06.600 --> 00:27:08.100
say, this is not the
kind of job that I'll

534
00:27:08.100 --> 00:27:12.210
do, but I know what
you need done. We'll go

535
00:27:12.210 --> 00:27:14.790
ahead. We'll do the requirements.
We'll do the, give you

536
00:27:14.790 --> 00:27:18.810
a direction and we'll even
help you review the proposals

537
00:27:18.960 --> 00:27:20.700
and help you choose someone.
I think that's a really

538
00:27:20.700 --> 00:27:24.060
valuable skill that the average
individual can consultant out there

539
00:27:24.270 --> 00:27:26.270
for those who think that
they are a, a, a

540
00:27:26.280 --> 00:27:29.190
coder could be, you know,
begin to get an understanding

541
00:27:29.190 --> 00:27:31.650
of architecture and open up
a whole new practice, a

542
00:27:31.650 --> 00:27:36.180
whole new potential source of
revenue, acting as an architect,

543
00:27:36.220 --> 00:27:38.370
as a bridge between the
business and the technical. Well,

544
00:27:38.370 --> 00:27:41.550
here's the interesting thing about
it. It's not rocket science.

545
00:27:41.820 --> 00:27:44.280
I mean, you don't have
to go to architecture school

546
00:27:44.280 --> 00:27:47.180
to do this right. The
way the software architectures of

547
00:27:47.180 --> 00:27:51.240
software architects act you'd think
that it was a kind

548
00:27:51.240 --> 00:27:53.250
of a mystery. No, it's
really not. It's really more

549
00:27:53.250 --> 00:27:56.190
of a choice. It's a
willingness to look at this

550
00:27:56.190 --> 00:27:58.530
stuff. The problem is a
lot of coders. Aren't interested.

551
00:27:58.530 --> 00:27:59.940
They say, tell me what
to do and I'll build

552
00:27:59.940 --> 00:28:05.040
it right. And what it
takes is a certain mindset.

553
00:28:05.040 --> 00:28:06.990
It's just the decision to
say, you know, I want

554
00:28:06.990 --> 00:28:08.970
to come up with the
right solution for this customer.

555
00:28:08.970 --> 00:28:11.340
And I will look at
everything and talk to anyone

556
00:28:11.610 --> 00:28:15.240
to come up with that
right. Solution, I guess once

557
00:28:15.240 --> 00:28:18.030
you've built enough software, you're
ready to go ahead and

558
00:28:18.030 --> 00:28:21.450
try that. And certainly once
you've seen enough nightmares, and

559
00:28:21.450 --> 00:28:24.630
that's how I think software
architects learn at this level

560
00:28:24.990 --> 00:28:27.300
is you look at horror
stories and you figure out

561
00:28:27.300 --> 00:28:28.800
and you see what's gone
wrong. And you say, I

562
00:28:28.800 --> 00:28:30.360
can do that. I can
talk to people. I can

563
00:28:30.360 --> 00:28:35.370
ask questions. It's a choice.
It's not about a science.

564
00:28:36.180 --> 00:28:37.980
Well, Dan, I really appreciate
you taking the time out

565
00:28:37.980 --> 00:28:40.320
of your busy schedule here
at dev connections with the

566
00:28:40.320 --> 00:28:42.810
Mandalay Bay. And this has
been another episode of Hansel

567
00:28:42.810 --> 00:28:44.250
minutes. We'll see you again
next week.

