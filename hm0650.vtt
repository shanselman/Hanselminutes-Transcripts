WEBVTT FILE

1
00:00:00.630 --> 00:00:02.460
Hey friends, we have a
new sponsor today, and I

2
00:00:02.460 --> 00:00:04.650
want to make sure that
you support them because they

3
00:00:04.650 --> 00:00:09.570
make Hansel minutes possible. Raven
DB, it's a document database

4
00:00:09.570 --> 00:00:14.070
that's non-relational and fully transactional.
It's available for windows and

5
00:00:14.070 --> 00:00:18.870
Linux with official client API
APIs for.net, the JVM go

6
00:00:18.870 --> 00:00:22.710
Ruby, no JS and Python.
Raven DB is designed for

7
00:00:22.710 --> 00:00:26.310
high performance handling tens of
thousands of requests, even on

8
00:00:26.310 --> 00:00:29.610
a single node. Now, Raven
DB is capable of on

9
00:00:29.610 --> 00:00:34.110
the fly optimization, dynamic indexes,
and much more. It has

10
00:00:34.110 --> 00:00:36.900
a fully loaded gooey, which
means it's simpler to operate

11
00:00:36.930 --> 00:00:39.570
and you don't need, you
know, arcane incantations on the

12
00:00:39.570 --> 00:00:42.270
command line. It just works.
It's fast and it's right.

13
00:00:42.810 --> 00:00:48.600
Download your free community edition@ravendb.net.
That's R a V E

14
00:00:48.600 --> 00:01:05.930
N db.net. I hope you
check it out. <inaudible> Scott

15
00:01:05.930 --> 00:01:08.360
Hanselman. This is another episode
of Hansel minutes today. I'm

16
00:01:08.360 --> 00:01:11.240
talking with Mark Rendell. We
you're talking about the rise

17
00:01:11.240 --> 00:01:14.720
of global developer tools. How
are you, sir? I'm very

18
00:01:14.720 --> 00:01:17.300
well, thank you for asking,
you know, I'm sitting here

19
00:01:17.300 --> 00:01:20.270
looking at a Dropbox folder
that I made many, many,

20
00:01:20.270 --> 00:01:24.140
many years ago and it's
called utils and it used

21
00:01:24.140 --> 00:01:27.320
to be C colon backslash
utils and now it's C

22
00:01:27.320 --> 00:01:30.740
colon drop box utils and
it's just full of a

23
00:01:30.740 --> 00:01:33.050
bunch of crap that I've
been carrying around with me

24
00:01:33.050 --> 00:01:36.590
for many, many years. I
put it in my path

25
00:01:37.160 --> 00:01:39.680
and it's all of my
developer utilities and I thought

26
00:01:39.680 --> 00:01:45.170
I was quite clever. Yeah,
I'm I'm really old. So

27
00:01:45.170 --> 00:01:49.700
I remember back in the
day, working on Unix systems

28
00:01:50.240 --> 00:01:53.600
and you would have a
bin folder in your use

29
00:01:53.640 --> 00:01:56.540
directory in your home directory,
and you would add that

30
00:01:56.540 --> 00:01:58.760
to your pile. So then
anything that you found yourself

31
00:01:58.760 --> 00:02:01.970
doing a lot, you just
write a quick colon shell

32
00:02:01.970 --> 00:02:05.180
script back in those days
to repeat that for you.

33
00:02:07.670 --> 00:02:09.530
So it sounds like I've
got history. I've got history

34
00:02:09.530 --> 00:02:11.240
to back me up that
this was, was a good

35
00:02:11.240 --> 00:02:13.940
idea for a period of
time as a developer. Absolutely.

36
00:02:14.570 --> 00:02:18.860
It was very kind of
clunky sticks and sell a

37
00:02:18.860 --> 00:02:22.180
tape and string way of,
of building your own toolkit

38
00:02:22.190 --> 00:02:24.960
and carrying around with you.
Well, now I've got Uber

39
00:02:24.960 --> 00:02:28.040
Boone to on windows 10
and I just do like

40
00:02:28.070 --> 00:02:31.760
apt get install, or if
I'm running, you know, other

41
00:02:31.760 --> 00:02:35.210
operating systems, I might say
yum, or on windows, I

42
00:02:35.210 --> 00:02:38.930
could also use the chocolatey
tool, but these aren't really

43
00:02:39.140 --> 00:02:42.440
for developer tools per se,
right? Why, why are we

44
00:02:42.440 --> 00:02:48.380
separating developer tools from operating
system installation stuff? So writing

45
00:02:48.380 --> 00:02:52.580
something to go on apt
gets or a Oh, yum

46
00:02:52.580 --> 00:02:56.540
or Homebrew or any of
those things, or submitting something

47
00:02:56.540 --> 00:03:00.880
to chocolate is quite complicated.
And you've to distribute Something

48
00:03:00.880 --> 00:03:05.920
that is executable and something
that's executable on everybody's system.

49
00:03:06.370 --> 00:03:11.920
So most of those things
are written in C or

50
00:03:11.920 --> 00:03:15.250
C plus plus or rust,
or maybe go these days.

51
00:03:16.000 --> 00:03:20.230
You can assume when developers
are looking to use your

52
00:03:20.230 --> 00:03:24.490
tools, if I'm writing a
tool for a node, then

53
00:03:24.490 --> 00:03:27.070
it seems fairly safe to
assume that I, the developers

54
00:03:27.070 --> 00:03:28.630
that are going to be
using that have got node

55
00:03:28.630 --> 00:03:32.740
installed. So you can just
target node and deploy an

56
00:03:32.740 --> 00:03:36.340
NPM package, and then they
can use that. And you

57
00:03:36.340 --> 00:03:39.340
don't have to worry about
runtimes and executability and all

58
00:03:39.340 --> 00:03:42.390
that sort of stuff. Okay.
So are you saying that

59
00:03:42.510 --> 00:03:45.840
in no developer in the
course of their natural development

60
00:03:45.840 --> 00:03:49.560
of whatever there happened to
be writing might want something

61
00:03:50.010 --> 00:03:53.640
that will support their development
process. And since we already

62
00:03:53.640 --> 00:03:57.060
know that they're using node
and really that they can't

63
00:03:57.060 --> 00:03:59.460
use anything else, because they're
going to be using the

64
00:03:59.460 --> 00:04:03.930
node package installation process, we'll
just support them by allowing

65
00:04:03.930 --> 00:04:08.040
them to arbitrarily bring in
other kind of like sidecar

66
00:04:08.040 --> 00:04:13.440
tools that can sit alongside
their development plans. Yeah. I

67
00:04:13.440 --> 00:04:20.550
mean, TypeScript TypeScript has grown
way beyond Microsoft and way

68
00:04:20.550 --> 00:04:25.590
beyond being a visual studio
plugin. So the primary way

69
00:04:25.590 --> 00:04:30.120
that TypeScript is distributed is
as an MPM package. And

70
00:04:30.120 --> 00:04:36.240
do you do NPM install
minus G TypeScript, and it

71
00:04:36.240 --> 00:04:38.820
puts the TypeScript compiler onto
your system and adds a

72
00:04:38.820 --> 00:04:42.450
TSC command line tool that
you can then use in

73
00:04:42.450 --> 00:04:47.220
any directory and compile your
TypeScript. And there's, you know,

74
00:04:47.310 --> 00:04:51.360
that's just one example. There
are hundreds of these things,

75
00:04:52.350 --> 00:04:57.780
Webpack and SAS, and <inaudible>
all sorts of things distributed

76
00:04:57.780 --> 00:05:02.880
all through NPM JS Said,
that's amazing though, that using

77
00:05:02.880 --> 00:05:05.580
note as an example, that
NPM has become such a,

78
00:05:06.390 --> 00:05:08.790
I mean, it's its own,
like you said, after apt

79
00:05:08.790 --> 00:05:11.520
get of its own. And
we're looking at numbers that

80
00:05:11.520 --> 00:05:16.740
are unconscionable of TypeScript is
getting, you know, 3 million weekly

81
00:05:16.740 --> 00:05:22.080
downloads, you know, 12 million a
month. Yes. That's amazing. It

82
00:05:22.080 --> 00:05:26.880
is nuts. And the really
nice thing with that is

83
00:05:27.930 --> 00:05:31.260
the people who are writing
software, using node and who

84
00:05:31.290 --> 00:05:34.260
think I need a utility
to do something. They can

85
00:05:34.260 --> 00:05:38.940
write that utility using the
language that they know, they

86
00:05:38.940 --> 00:05:40.980
don't have to learn something
else. They don't have to

87
00:05:40.980 --> 00:05:43.590
go off and learn C
plus plus, or, or rust

88
00:05:44.100 --> 00:05:46.590
because learning Russ takes a
long time, trust me, I'm

89
00:05:46.590 --> 00:05:49.830
learning it. And they can
just use the tools that

90
00:05:49.830 --> 00:05:53.550
they already know, and they
can build something helpful. And

91
00:05:53.550 --> 00:05:56.460
then it's really easy to
create a package and upload

92
00:05:56.460 --> 00:05:58.250
it to NPM. They can
share it around them. Other

93
00:05:58.250 --> 00:06:01.810
people can contribute back to
it. Is this, is this

94
00:06:01.810 --> 00:06:04.600
a potential place for us
to install viruses or to

95
00:06:04.600 --> 00:06:07.510
have, you know, mean people
put mean stuff in and

96
00:06:07.510 --> 00:06:10.780
I accidentally install something bad.
And then since it's in

97
00:06:10.780 --> 00:06:13.900
my path, it's easy to
run. It totally is a

98
00:06:13.900 --> 00:06:17.290
very good way to do
that, which is makes it

99
00:06:17.290 --> 00:06:21.340
a good thing that I
think pretty much everything that's

100
00:06:21.340 --> 00:06:25.420
on the NPM JS is
open source. And you can

101
00:06:25.420 --> 00:06:27.220
go and have a quick
look at the source. And

102
00:06:27.220 --> 00:06:28.870
I don't know if they've
got any kind of built

103
00:06:28.870 --> 00:06:33.430
in security review or anything
like that. It seems like

104
00:06:33.430 --> 00:06:35.200
the kind of thing that
would hit all the tech

105
00:06:35.200 --> 00:06:39.190
news sites. If somebody discovered
that left pad was mining

106
00:06:39.190 --> 00:06:43.180
cryptocurrency on your machine, every
time you ran it, But

107
00:06:43.180 --> 00:06:45.430
it does allow you to
break stuff really quickly, like

108
00:06:45.460 --> 00:06:49.510
using left Pat as an
example, Yes, you can take

109
00:06:49.510 --> 00:06:53.140
things off the, off the
MPM repository. Although I think

110
00:06:53.140 --> 00:06:58.810
they have done something to
ameliorate that now, but as

111
00:06:58.810 --> 00:07:02.800
far as global tools are
concerned, once you've got that

112
00:07:02.800 --> 00:07:05.410
installed on your machine, it's
there. It's not going back

113
00:07:05.500 --> 00:07:08.440
to NPM. The reason that
left pan broke the world

114
00:07:08.440 --> 00:07:13.060
was because people's continuous integration
processes, do an NPM install

115
00:07:13.570 --> 00:07:15.880
to pull down all the
packages that are being used.

116
00:07:16.330 --> 00:07:20.470
And when left pad went
away, the NPM install failed

117
00:07:20.560 --> 00:07:25.330
and everybody's build started failing.
Hmm. And that's a problem

118
00:07:25.330 --> 00:07:28.150
though. It's a human problem.
And it's always going to

119
00:07:28.150 --> 00:07:30.340
be something that they're going
to work on. Like you

120
00:07:30.340 --> 00:07:33.370
can go up to NPMs
blog and read about their

121
00:07:33.730 --> 00:07:37.990
concerns around malware. And they're
looking for packages with names

122
00:07:37.990 --> 00:07:40.420
that are close to existing
packages so that someone might

123
00:07:40.420 --> 00:07:44.200
install something evil, but to
fault on accident, like off

124
00:07:44.200 --> 00:07:47.650
by one character, you know,
they can do static analysis

125
00:07:47.650 --> 00:07:51.640
on the tools, but ultimately,
you know, human humans are

126
00:07:51.640 --> 00:07:53.230
going to do the best
they can to make sure

127
00:07:53.230 --> 00:07:56.500
that registry stays secure and,
and evil tools don't show

128
00:07:56.500 --> 00:07:59.020
up on our machines. Yeah.
And the, and it has

129
00:07:59.020 --> 00:08:01.270
to be a human thing.
It has to be people

130
00:08:01.270 --> 00:08:04.630
being careful and policing things
and calling it out. If

131
00:08:04.690 --> 00:08:08.620
they notice something is doing
something dodgy <inaudible> Now you

132
00:08:08.620 --> 00:08:10.960
said that you're learning rust,
but you and I know

133
00:08:10.960 --> 00:08:14.860
each other from the.net community.
And for the longest time,

134
00:08:14.860 --> 00:08:19.180
we were all excited about
and trying to advocate for.net

135
00:08:19.360 --> 00:08:23.920
global tools. So we'd have
the.net equivalent of NPM dash

136
00:08:23.920 --> 00:08:27.880
G and it's finally, it's
finally happened. It has its

137
00:08:28.180 --> 00:08:32.110
with dotnet core 2.1, it's
become a real thing. So

138
00:08:32.110 --> 00:08:36.850
if you've got dotnet core
SD K K 2.1 point

139
00:08:36.850 --> 00:08:42.730
300, although you should have
2.1 point 400, cause that's

140
00:08:42.730 --> 00:08:46.300
the current version and that's
the LTS release, but yes,

141
00:08:46.300 --> 00:08:50.230
you know, have a.net tool
sub command and you can

142
00:08:50.230 --> 00:08:54.220
say.net tool, install dash dash
global, and then give it

143
00:08:54.220 --> 00:08:56.400
a new get package name,
and it'll go off and,

144
00:08:56.490 --> 00:08:58.950
and get that new get
package and then add it

145
00:08:58.950 --> 00:09:03.990
to your path with the
name that the package publisher

146
00:09:04.050 --> 00:09:07.100
chose for it. <inaudible>. Now,
if I go to the

147
00:09:07.100 --> 00:09:13.040
command line right now and
I type.net Space, Mark, it,

148
00:09:13.130 --> 00:09:17.450
We'll say, you know, can't
run.net, hyphen Mark, as if

149
00:09:17.450 --> 00:09:21.290
dotnet hyphen Mark dot exe.
It was a thing. Yeah.

150
00:09:21.920 --> 00:09:24.980
So that's the first way
that it tries to find

151
00:09:25.250 --> 00:09:29.360
something. When you say.net and
the command, you can add

152
00:09:29.420 --> 00:09:34.340
sub commands onto.net by putting
a.net dash, whatever you want

153
00:09:34.340 --> 00:09:37.610
it to be. And it
has a set of directories

154
00:09:37.610 --> 00:09:41.030
that it'll automatically scan to
see if it can find

155
00:09:41.030 --> 00:09:45.020
that. And it'll go and
look through CS proj files

156
00:09:45.020 --> 00:09:48.620
and find the thing that's
being invoked and then see

157
00:09:48.620 --> 00:09:51.100
if it can find it
in your library cache and,

158
00:09:51.100 --> 00:09:57.260
and so on, but.net tool.net
global tools, it goes a

159
00:09:57.260 --> 00:10:00.680
bit beyond that. Okay. So
it's not as simple as

160
00:10:00.680 --> 00:10:04.220
put an executable called, you
know, dotnet hyphen Scott in

161
00:10:04.220 --> 00:10:07.760
the past. It's more sophistical
No, it is more sophisticated.

162
00:10:07.760 --> 00:10:10.760
So when you publish your
new get package with your

163
00:10:10.760 --> 00:10:14.900
global tool in it, you
add a few extra parameters

164
00:10:15.170 --> 00:10:20.330
and you decide what, what
it wants to be invoked

165
00:10:20.330 --> 00:10:22.610
as, and you set a
thing to say, this is

166
00:10:22.610 --> 00:10:29.120
a parameter. And then the
dotnet tool installer, which goes

167
00:10:29.120 --> 00:10:32.060
off to new gets does
a few extra things when

168
00:10:32.060 --> 00:10:36.020
it pulls that package down.
Okay. Do we need to

169
00:10:36.020 --> 00:10:39.170
think about versioning? Is there
a dotnet tool update yet?

170
00:10:39.170 --> 00:10:42.950
Or is this just a
big, There is a.net tool

171
00:10:43.010 --> 00:10:49.610
update, which updates to the
latest stable version and by

172
00:10:49.610 --> 00:10:53.120
stable version. I mean, it
doesn't have dash preview or

173
00:10:53.120 --> 00:10:56.030
dash beater or anything on
the end of it. Okay.

174
00:10:56.030 --> 00:10:59.030
So Donna tool updates. So
I have lifecycle have gotten

175
00:10:59.030 --> 00:11:02.240
it to a list, install
and install and update, and

176
00:11:02.240 --> 00:11:05.060
I'm treating them like their
new get packages because they

177
00:11:05.060 --> 00:11:08.300
are in fact new good
packages. Yes. The name that

178
00:11:08.300 --> 00:11:10.850
you give the tool is
the name of the package

179
00:11:10.880 --> 00:11:14.360
on, on the new gate
repository. It sounds like Probably

180
00:11:14.360 --> 00:11:17.300
be a bit of a,
of a gold rush to

181
00:11:17.300 --> 00:11:19.700
try to get people to
jump in and get the,

182
00:11:19.990 --> 00:11:24.530
the short commands. Like if
I want.net tool Mark, I

183
00:11:24.530 --> 00:11:27.620
grabbed it before some other
Mark does a yes, it

184
00:11:27.620 --> 00:11:30.620
seems to be sort of
picking up slowly. And there's

185
00:11:30.620 --> 00:11:34.790
not a huge number of
tools up there just yet,

186
00:11:35.630 --> 00:11:39.140
but I can see people
wanting to get in there

187
00:11:39.140 --> 00:11:43.040
with something, if they've got
a funky, short name and

188
00:11:43.070 --> 00:11:46.280
actually while we're at it
in your sort of other

189
00:11:46.370 --> 00:11:49.790
job as a PM, whatever
you are on the ASP

190
00:11:49.790 --> 00:11:53.620
net team, could you get
them to shorten the name

191
00:11:53.620 --> 00:11:59.080
of.net ASP net dash code
generator? Because I type that

192
00:11:59.140 --> 00:12:04.120
a lot and it's a
very long word. Well, that's

193
00:12:04.120 --> 00:12:08.850
an issue Points. so.net, hyphen
ASP, net hyphen code generator

194
00:12:09.210 --> 00:12:12.840
is really long and that
is the new get package

195
00:12:12.870 --> 00:12:18.120
name, right? It is also
coincidentally the short name, which

196
00:12:18.120 --> 00:12:21.240
is ironic because it's not
short at all. And that's

197
00:12:21.240 --> 00:12:23.070
something that I think we
as a community are still

198
00:12:23.070 --> 00:12:25.860
trying to figure out, like
Another example would be the

199
00:12:25.860 --> 00:12:32.220
cake build system, which would
be cake dot tool. Unfortunately

200
00:12:32.220 --> 00:12:37.800
they made their short name.net.
Hyphen cake should just be

201
00:12:37.950 --> 00:12:41.760
regular just cake. I don't
think there was anything already

202
00:12:41.760 --> 00:12:45.240
called cake on most people's
systems. Cause obviously that's, you

203
00:12:45.240 --> 00:12:49.380
know, you're not just competing
against everybody else on the.net

204
00:12:49.380 --> 00:12:53.550
global tools. You're competing against
everything that's already available over

205
00:12:53.550 --> 00:12:57.960
apt. And anything else that
can install command line commands

206
00:12:57.960 --> 00:13:00.720
onto your system? Yeah. It's
a tough one. Like if

207
00:13:00.720 --> 00:13:04.290
you go and pick a
word like hash or script

208
00:13:04.380 --> 00:13:08.070
or depends, you could pretend
The squash, other people that

209
00:13:08.070 --> 00:13:10.590
care about that. And that
can be an issue. Yeah.

210
00:13:11.670 --> 00:13:13.590
And you have to be
aware of what's available on

211
00:13:13.590 --> 00:13:17.610
different systems as well. So
Linux boxes tend to come

212
00:13:17.640 --> 00:13:20.250
out of the box with
a base 64 command. So

213
00:13:20.250 --> 00:13:22.980
if you try to publish
a.net core global tool for

214
00:13:22.980 --> 00:13:26.310
doing base 64 things, you
would probably clash with that.

215
00:13:26.310 --> 00:13:29.220
And then it just comes
down to which comes first

216
00:13:29.220 --> 00:13:32.010
in the path as to
which one's getting invoked. So

217
00:13:32.640 --> 00:13:34.560
you need to be quite
careful when you pick these

218
00:13:34.560 --> 00:13:37.440
names. Okay. But that does
sound like it's a little

219
00:13:37.440 --> 00:13:39.240
bit of a wild West
right now, but at the

220
00:13:39.240 --> 00:13:41.820
same time, we don't want
a lot of regulation at

221
00:13:41.820 --> 00:13:44.100
this point because it will
slowly, Pete would slow people

222
00:13:44.100 --> 00:13:47.460
down. Yeah. You want to
have people get out there.

223
00:13:47.940 --> 00:13:50.130
And I actually had someone
ask me the other day,

224
00:13:50.130 --> 00:13:54.450
if I could pass over
a new, get package name

225
00:13:54.480 --> 00:13:56.910
to them because they've got
a new package that does

226
00:13:56.910 --> 00:14:00.810
something completely different. And it's
a really nice name it's

227
00:14:00.810 --> 00:14:06.210
flux, which I necked Whoa,
way back, back in the

228
00:14:06.210 --> 00:14:10.860
old windows. And yeah, he
wants to publish something called

229
00:14:10.860 --> 00:14:12.990
flux and I need to
get back to him and

230
00:14:12.990 --> 00:14:15.730
say, yes, of course you
can have that because it's

231
00:14:15.740 --> 00:14:18.930
just an experimental thing. Right?
You just, you work as

232
00:14:18.930 --> 00:14:22.140
a community, you have these
kinds. Yeah. That's it. You,

233
00:14:22.170 --> 00:14:24.690
people can get in touch
with you through new gate,

234
00:14:24.710 --> 00:14:26.940
as a website or a
way of saying contact owner.

235
00:14:28.080 --> 00:14:29.880
And he clicked that button
and sent me a very

236
00:14:29.880 --> 00:14:33.600
nice, polite message. And I
have very rudely not replied

237
00:14:33.600 --> 00:14:37.260
to it yet, but I
will. Hey folks, Intel is

238
00:14:37.260 --> 00:14:39.930
a sponsor this week and
I welcome them because they're

239
00:14:39.930 --> 00:14:43.140
bringing some high performance developer
tools for all of us

240
00:14:43.560 --> 00:14:47.820
check out Intel's parallel studio
X, E I've talked about

241
00:14:47.820 --> 00:14:50.550
parallelism before on the show
and the importance of using

242
00:14:50.550 --> 00:14:54.080
the complete set, unlocking the
power of the process or

243
00:14:54.080 --> 00:14:56.540
that your code is running
on. Now, you all might

244
00:14:56.540 --> 00:14:59.420
be writing C or C
plus plus Python or even

245
00:14:59.420 --> 00:15:02.390
Fortran, but as your code
building in such a way

246
00:15:02.420 --> 00:15:03.980
and written in such a
way that it uses the

247
00:15:03.980 --> 00:15:11.240
latest techniques for vectorization multithreading
multi-node parallelization or memory optimization,

248
00:15:11.900 --> 00:15:14.600
Intel parallel studio XE has
a lot of new stuff

249
00:15:14.630 --> 00:15:18.350
for 2018 across all these
languages, get a free download

250
00:15:18.500 --> 00:15:23.690
at <inaudible> dot com slash
parallels studio Z, or certainly

251
00:15:23.690 --> 00:15:26.420
go and Google or Google
with being for Intel parallel

252
00:15:26.420 --> 00:15:30.230
studio XC and get started
boosting your app's performance with

253
00:15:30.230 --> 00:15:34.010
smart parallel code with a
lot less effort, check them

254
00:15:34.010 --> 00:15:40.900
out. bitly.com/parallel studio X E.
Well, so we have this

255
00:15:40.900 --> 00:15:44.140
in dotnet global tools. We
had this in node, but

256
00:15:44.140 --> 00:15:46.810
it was something that happened
in the development community. Even

257
00:15:46.810 --> 00:15:49.630
before this, would you say
it was gems and Ruby

258
00:15:49.630 --> 00:15:53.350
that started this global tools
concept? I would, I think

259
00:15:53.350 --> 00:15:56.170
I might be risking the
wrath of the Python crowd

260
00:15:57.250 --> 00:16:00.820
plugs and had easy install
and PIP. Yeah. But I

261
00:16:00.820 --> 00:16:04.900
think the first thing that
I saw myself that did

262
00:16:04.900 --> 00:16:09.160
this was Ruby gems. And
you would say Jim in

263
00:16:09.160 --> 00:16:13.690
the stall global rails, for
example, and then that actually

264
00:16:13.690 --> 00:16:17.230
added, I think it was
just R or you aliased

265
00:16:17.230 --> 00:16:21.550
it or something, but yeah,
you would just say rails

266
00:16:22.060 --> 00:16:26.530
generate or R G a
and then generate a controller

267
00:16:26.530 --> 00:16:32.650
or a view over active,
active record model or whatever

268
00:16:33.160 --> 00:16:37.660
people were typing very, very
long commands with complete model

269
00:16:37.690 --> 00:16:42.430
declarations in them. But yes,
and SAS is another example

270
00:16:42.430 --> 00:16:44.470
that was originally written in
Ruby and distributed as a

271
00:16:44.470 --> 00:16:48.340
gym. And that was a
global tool. So why would

272
00:16:48.340 --> 00:16:50.500
I want a global tool
and not a project level

273
00:16:50.500 --> 00:16:52.990
tool? Why wouldn't I want
all my projects to have

274
00:16:52.990 --> 00:16:56.710
their own separate tools and
then have everything scoped that

275
00:16:56.710 --> 00:17:00.220
way. So I don't worry
about breaking global paths and

276
00:17:00.220 --> 00:17:02.260
everything would just be held
with the project. And I

277
00:17:02.260 --> 00:17:04.570
would give you the project
and you would get the

278
00:17:04.570 --> 00:17:09.100
tools that my project cared
about. So that's, that's still

279
00:17:09.100 --> 00:17:12.820
available. That's still an option
and it's a perfectly decent

280
00:17:12.820 --> 00:17:17.200
option. There are things. So
for example, the first global

281
00:17:17.200 --> 00:17:21.310
tool that I created and
published is called unpackage, a

282
00:17:21.310 --> 00:17:25.870
UN PKG. And I started
out before it was a

283
00:17:25.870 --> 00:17:28.660
global tool. It was a
project level tool. And you

284
00:17:28.660 --> 00:17:32.290
actually have to open up
the CS proj file and

285
00:17:32.470 --> 00:17:37.270
add a dotnet CLI tool
reference rather than a package

286
00:17:37.270 --> 00:17:40.630
reference. And there's no simple
command line way. There's no

287
00:17:40.630 --> 00:17:45.400
simple visual studio or running
either way of adding a.net

288
00:17:45.400 --> 00:17:48.730
CLI tool reference to a
project. You have to go

289
00:17:48.730 --> 00:17:52.380
in, edit it. So that
makes things slightly difficult. And

290
00:17:52.380 --> 00:17:54.990
then you've got that, that
only works in that one

291
00:17:55.020 --> 00:17:59.190
project and you have to
type.net space and then unpackage,

292
00:17:59.580 --> 00:18:02.160
and then the rest of
the things. So as soon

293
00:18:02.160 --> 00:18:05.280
as global tools actually became
sick, I think it was

294
00:18:05.280 --> 00:18:09.570
literally the day after they
went RTM with.net core 2.1,

295
00:18:10.020 --> 00:18:12.870
I published an updated version
of the package, which put

296
00:18:12.870 --> 00:18:15.900
it in as a global
tool, which means whatever project

297
00:18:15.900 --> 00:18:18.390
I'm in. I don't have
to start install anything. I

298
00:18:18.390 --> 00:18:22.500
can just say unpackage and
jQuery. And it does everything

299
00:18:23.130 --> 00:18:25.650
for me. So it's just
a lot more convenient than

300
00:18:25.650 --> 00:18:27.540
having to do the same
thing over and over again.

301
00:18:28.740 --> 00:18:32.000
What if you, You gave
me your project though, and

302
00:18:32.030 --> 00:18:34.460
maybe it had some associated
scripts with it, and then

303
00:18:34.460 --> 00:18:37.400
I don't have those tools.
What's the best way for

304
00:18:37.400 --> 00:18:40.490
me to get up to
speed. It's possible probably something

305
00:18:40.490 --> 00:18:44.960
in the read me saying,
run this, There, there isn't

306
00:18:44.960 --> 00:18:48.350
a, I typed dotnet build.
And this project depends on

307
00:18:48.350 --> 00:18:51.020
these five tools, go and
get them. I would say

308
00:18:51.020 --> 00:18:55.220
it would be a bad
idea to put things into

309
00:18:55.220 --> 00:18:58.790
your build scripts, into your
targets files or your CS

310
00:18:58.790 --> 00:19:02.690
props files or anything that
rely on dotnet and global

311
00:19:02.690 --> 00:19:08.900
tools to run. So again,
talking about unpackage, when it

312
00:19:08.900 --> 00:19:13.400
was a local tool build
step to do the restore

313
00:19:13.430 --> 00:19:17.330
was just execute this shell
command and it was.net unpackaged

314
00:19:17.330 --> 00:19:20.900
restore. Once I changed it
to being a global tool,

315
00:19:21.020 --> 00:19:24.290
I didn't want people to
have to have that global

316
00:19:24.290 --> 00:19:27.290
tool installed, but I still
wanted the restore on build

317
00:19:27.290 --> 00:19:32.990
functionality. And so I created
another new get package called

318
00:19:33.710 --> 00:19:38.570
rental labs.unpackaged.build, which is a
build time package that does

319
00:19:38.570 --> 00:19:42.470
the restore published that and
then added a command line

320
00:19:42.470 --> 00:19:46.940
option to unpackage to say,
add, build time restore. So

321
00:19:46.940 --> 00:19:50.470
if you clone my repository
and it's got an unpackaged

322
00:19:50.480 --> 00:19:53.870
adjacent file in it, and
then you hit build, it

323
00:19:53.870 --> 00:19:58.430
will do the restore because
it's using a package reference

324
00:19:58.430 --> 00:20:02.930
rather than a.net CLI tool
reference to handle that. I

325
00:20:02.930 --> 00:20:04.790
see. Would you call that
a best practice? Is that

326
00:20:04.790 --> 00:20:06.650
something that other people should
emulate or would you just

327
00:20:06.650 --> 00:20:09.170
call that something you've figured
out in our inner? Not

328
00:20:09.170 --> 00:20:12.200
quite sure if it's the
best I suspect it's the

329
00:20:12.200 --> 00:20:18.290
best practice. It's certainly any
more tools that I create

330
00:20:18.290 --> 00:20:21.950
that require some kind of
build time process. I will

331
00:20:21.950 --> 00:20:26.150
be doing the same thing
and I will be doing

332
00:20:26.150 --> 00:20:29.090
it now by copying and
pasting from my unpackaged doc

333
00:20:29.100 --> 00:20:32.600
build script. The first time
I did it, I copied

334
00:20:32.600 --> 00:20:38.390
and pasted from something Mads
Christensen, because writing build packages

335
00:20:38.420 --> 00:20:42.560
is really complicated and not
well documented. So I had

336
00:20:42.560 --> 00:20:44.930
fun with that. Hmm. It
does sound like a best

337
00:20:44.930 --> 00:20:47.560
practice though, because I think
we all agree that someone

338
00:20:47.620 --> 00:20:49.930
needs to be able to
go and clone a repository

339
00:20:50.410 --> 00:20:53.680
and type.net build and have
it be successful without a

340
00:20:53.680 --> 00:20:57.210
lot of initial setup and
ceremony. Yeah. And we saw

341
00:20:57.210 --> 00:21:01.890
this happen with, with mode
and NPM as well. So

342
00:21:01.920 --> 00:21:06.270
TypeScript when TypeScript 1.0, came
out, you would install it

343
00:21:06.270 --> 00:21:08.940
globally and it would have
to be installed globally for

344
00:21:08.940 --> 00:21:10.170
the bills to run and
say, you had to put

345
00:21:10.170 --> 00:21:14.220
in things saying, you have
to install TypeScript before you

346
00:21:14.220 --> 00:21:18.720
can build this project. And
because there are a lot

347
00:21:18.720 --> 00:21:21.810
of these build time things.
So you likely got TypeScript

348
00:21:21.810 --> 00:21:25.980
and SAS and a web
pack and fire and all

349
00:21:25.980 --> 00:21:31.020
these other things going on.
And so now NPM provides

350
00:21:31.080 --> 00:21:34.920
similar to the old style
of.net tool. You can install

351
00:21:34.980 --> 00:21:37.950
type script as a dependency
within the project. So it

352
00:21:37.950 --> 00:21:42.120
gets restored. And then you
can say NPM Ts or

353
00:21:42.120 --> 00:21:45.150
there's an NPX TSC. Now
I think which lets you

354
00:21:45.150 --> 00:21:48.930
run commands that are installed
in the project locally. So

355
00:21:49.260 --> 00:21:52.800
it's, it's a kind of
weird reverse thing. Dot net

356
00:21:53.160 --> 00:21:56.670
core 2.1 added a feature
that node had had for

357
00:21:56.670 --> 00:22:02.070
ages and node quite recently
added a feature that a

358
00:22:02.130 --> 00:22:04.710
dot met had out of
the box. Not that core

359
00:22:04.710 --> 00:22:06.630
had anyway, do you think,
I think that this is

360
00:22:06.630 --> 00:22:09.570
something that's going to fundamentally
change.net for the better. Do

361
00:22:09.570 --> 00:22:11.160
you think that this is
like the beginning of something

362
00:22:11.160 --> 00:22:13.140
big or does this just
a small few Teacher that

363
00:22:13.410 --> 00:22:16.200
we're enjoying right now? I
really hope it's going to

364
00:22:16.200 --> 00:22:21.090
make a difference and encourage
people to build more command

365
00:22:21.090 --> 00:22:26.130
line tools. I'm working on
a, a set of video

366
00:22:26.130 --> 00:22:31.680
training courses@themomentfor.net core 2.1 and
microservices and all sorts of

367
00:22:31.680 --> 00:22:35.040
other stuff. And that is
going to start with a

368
00:22:35.040 --> 00:22:37.440
thing saying I've written some
tools that will make this

369
00:22:37.440 --> 00:22:40.530
easier for you to follow
along with. So why don't

370
00:22:40.530 --> 00:22:43.290
you go and install those?
And it's going to be

371
00:22:43.290 --> 00:22:47.910
a very command line and
visual studio code focused way

372
00:22:47.910 --> 00:22:52.590
of building dotnet core applications.
So I want to make

373
00:22:52.590 --> 00:22:55.440
it as easy as possible
to do things from the

374
00:22:55.440 --> 00:22:59.550
command line. And there's quite
a lot of repetitive stuff.

375
00:23:00.360 --> 00:23:03.600
So for example, I want
to do something that makes

376
00:23:03.600 --> 00:23:10.530
it easy to upgrade a.net
core 2.1 templated project to

377
00:23:10.530 --> 00:23:15.030
use bootstrap four instead of
bootstrap three, to go through

378
00:23:15.030 --> 00:23:18.660
and rip through your layout
dot CSS, HTML and so

379
00:23:18.660 --> 00:23:21.570
forth. Yeah, it's tough. It's
tedious. Like that should not

380
00:23:21.570 --> 00:23:24.450
be tedious. No it shouldn't.
And I don't want people

381
00:23:24.450 --> 00:23:27.360
to be doing my video
training course, which is supposed

382
00:23:27.360 --> 00:23:30.480
to be fun and interesting
and entertaining and have me

383
00:23:30.480 --> 00:23:33.660
go, right. So delete all
the script references from your

384
00:23:33.690 --> 00:23:36.480
layout file and then replace
them with these ones here,

385
00:23:36.480 --> 00:23:38.820
which you can't even copy
and paste because this is

386
00:23:38.820 --> 00:23:41.580
a video and you know,
it's just hideous. So just

387
00:23:41.580 --> 00:23:44.070
say, download this global tool
and then just run it

388
00:23:44.070 --> 00:23:47.900
in your project. There is
a list of global tools

389
00:23:47.900 --> 00:23:52.010
at Nate McMasters get hug.
Nate McMasters works on global

390
00:23:52.010 --> 00:23:54.740
tools and he's building quite
a list of several dozen

391
00:23:54.740 --> 00:23:58.880
extremely useful. Yeah, I've got
a couple on there. So

392
00:23:59.020 --> 00:24:03.550
package is on there. It's
questionable whether unpackage is going

393
00:24:03.550 --> 00:24:08.620
to continue because the lip
matte library manager, Microsoft tool

394
00:24:08.740 --> 00:24:14.380
is providing a lot of
the same functionality now, but

395
00:24:14.380 --> 00:24:16.480
I always like it. A
lot of people get upset

396
00:24:16.480 --> 00:24:19.090
when Microsoft come along and
do a version of something

397
00:24:19.090 --> 00:24:22.570
that they were doing. And
I can understand that for

398
00:24:22.600 --> 00:24:27.670
bigger things where, you know,
maybe you're building a business

399
00:24:27.670 --> 00:24:30.130
around it and it's an
important part of that. But

400
00:24:30.130 --> 00:24:31.930
for me personally, with a
lot of these things that

401
00:24:31.930 --> 00:24:34.690
I do to scratch my
itch, if Microsoft thing come

402
00:24:34.690 --> 00:24:36.520
along and go, Hey, we've
done the same thing. I'll

403
00:24:36.520 --> 00:24:39.640
go cool, thank you. And
start using that. Hmm. Now

404
00:24:39.640 --> 00:24:42.730
you don't have to worry
about yours. Exactly. I've got

405
00:24:42.760 --> 00:24:45.340
many, many things that I
want to be working on.

406
00:24:45.340 --> 00:24:47.860
So anyone doing other stuff,
other versions of it is

407
00:24:47.860 --> 00:24:50.230
great, but the other, the
other one I've got, and

408
00:24:50.230 --> 00:24:52.390
this is the nice thing.
The thing that I think

409
00:24:52.390 --> 00:24:56.770
is really nice about this,
I use JetBrains rider and

410
00:24:56.890 --> 00:25:00.580
I install it through the
JetBrains toolbox and I have

411
00:25:00.610 --> 00:25:04.750
a nightly build that updates
itself every single day. And

412
00:25:04.750 --> 00:25:05.860
I want to be able
to start it from the

413
00:25:05.860 --> 00:25:07.930
command. I don't want to
be able to say writer,

414
00:25:08.230 --> 00:25:12.850
thingy dot SLN and on
Linux and Mac. For some

415
00:25:12.850 --> 00:25:15.560
reason, there's a tools option
in the menu to say,

416
00:25:15.580 --> 00:25:18.310
create command line and you
just click that. And then

417
00:25:18.310 --> 00:25:20.950
you can run writer from
the command line. It doesn't

418
00:25:20.950 --> 00:25:24.400
work on windows, it's not
there. And so I just

419
00:25:24.400 --> 00:25:30.010
wrote this very, very quick
console application. And all it

420
00:25:30.010 --> 00:25:32.380
does is it looks in
your toolbox folder and it

421
00:25:32.380 --> 00:25:35.290
finds the most recent version
of Ryder and it runs

422
00:25:35.290 --> 00:25:38.290
it with the SLN file.
So to put it differently,

423
00:25:38.290 --> 00:25:40.570
they have a bug on
adding themselves to the path

424
00:25:40.570 --> 00:25:42.970
on windows. And you got
tired of waiting and made

425
00:25:42.970 --> 00:25:45.760
a tool for it. Yes,
that's fine. Awesome. And it

426
00:25:45.760 --> 00:25:48.880
was really quick and it's,
you know, it's only had

427
00:25:48.890 --> 00:25:54.130
like a few dozen downloads.
I think I don't care

428
00:25:54.220 --> 00:25:57.400
it's it's for me. And
I made it cause I

429
00:25:57.400 --> 00:26:00.280
wanted it and I published
it onto new get. And

430
00:26:00.280 --> 00:26:03.040
so anytime I said, I
get a new machine or

431
00:26:03.760 --> 00:26:05.980
wants to do something on
a new machine, then I

432
00:26:05.980 --> 00:26:10.900
can just say dot that
tool I G writer and

433
00:26:11.050 --> 00:26:13.660
it brings it down and
puts it on the machine

434
00:26:13.660 --> 00:26:17.110
for me. And that's a
good reminder too, to us

435
00:26:17.140 --> 00:26:19.450
who are listening, that we
can write these tools as

436
00:26:19.450 --> 00:26:22.540
well for people who are
excited about open source. Certainly

437
00:26:22.540 --> 00:26:24.760
this is a way to
get involved, but there's no

438
00:26:24.760 --> 00:26:27.970
requirement for someone to go
and make these things public.

439
00:26:28.000 --> 00:26:30.430
They could be on your
private knew yet and they

440
00:26:30.430 --> 00:26:34.330
could be used at your
company. Absolutely. And, and I

441
00:26:34.330 --> 00:26:37.300
know a lot of companies
are doing that where they've

442
00:26:37.300 --> 00:26:41.620
got sort of paid, hosted,
might get feeds or they're

443
00:26:41.620 --> 00:26:46.290
running something like Artifactory and
they're using that to publish

444
00:26:46.290 --> 00:26:49.980
and share tools around the
place as well. And I

445
00:26:49.980 --> 00:26:52.230
think the thing that I
would really want to say

446
00:26:52.230 --> 00:26:55.200
to people who were thinking
about doing this is go

447
00:26:55.200 --> 00:26:58.570
and look on my rental
labs, get hub organization and

448
00:26:58.650 --> 00:27:03.090
find the writer thing in
there. It's tiny, it's like

449
00:27:03.090 --> 00:27:05.580
50, I think it's 50
lines of code. And most

450
00:27:05.580 --> 00:27:09.120
of those are navigating directories
and checking that things are

451
00:27:09.120 --> 00:27:11.400
in where they're supposed to
be. To be fair. I

452
00:27:11.400 --> 00:27:12.900
was looking at the code
and it could have been

453
00:27:12.900 --> 00:27:16.320
20 it's just that you
were being extremely clean about

454
00:27:16.320 --> 00:27:19.800
it. And you looked inappropriate
folders. You even supported three

455
00:27:19.800 --> 00:27:23.250
different operating systems just to
be sure. You know, it's

456
00:27:23.250 --> 00:27:25.110
pretty, but it's a pretty
great example of a good

457
00:27:25.110 --> 00:27:27.990
starting place for a simple
tool. Yes. And I think

458
00:27:27.990 --> 00:27:30.720
the first version probably was
about 20 lines because in

459
00:27:30.720 --> 00:27:33.030
that GitHub repository, you can
see issues from people going,

460
00:27:33.370 --> 00:27:36.690
I put in a, an
error message that said something

461
00:27:36.690 --> 00:27:38.910
can't be done, but if
this makes you sad and

462
00:27:38.910 --> 00:27:41.700
then have a link to
my issues page. And so

463
00:27:41.700 --> 00:27:43.410
I got lots of people,
opening issues going, this makes

464
00:27:43.410 --> 00:27:47.370
me sad. But yeah, the
point is it's so easy

465
00:27:47.370 --> 00:27:52.020
to do this. So you
literally beyond the sort of

466
00:27:52.080 --> 00:27:56.460
having to put package IUD
and description and license acceptance

467
00:27:56.460 --> 00:27:58.470
and everything else, you need
to add two properties to

468
00:27:58.470 --> 00:28:01.950
your CS proj file as
a Packers tool, true, which

469
00:28:01.950 --> 00:28:05.040
you have to put in
and then a tool command

470
00:28:05.070 --> 00:28:08.970
name attribute, which is what
people will type to invoke

471
00:28:08.970 --> 00:28:15.060
it. So it's really absolutely
minimum effort and it doesn't

472
00:28:15.060 --> 00:28:18.840
have to be this big,
long, complicated thing, like.net itself

473
00:28:18.840 --> 00:28:23.310
for like a get or
something where it supports a

474
00:28:23.310 --> 00:28:25.860
dozen sub commands on each
of those has got another

475
00:28:25.860 --> 00:28:29.070
dozen sub commands. It can
just be something that does

476
00:28:29.070 --> 00:28:33.060
one thing. And you thought
I I'm so fed up

477
00:28:33.060 --> 00:28:36.660
with typing these three commands.
Every time I do something,

478
00:28:36.960 --> 00:28:39.630
just wrap it up and
put it in as a,

479
00:28:39.630 --> 00:28:43.230
as a.net tool. And then,
you know, if it gets

480
00:28:43.230 --> 00:28:45.870
traction and people like using
it, then go back and

481
00:28:45.870 --> 00:28:48.900
make dash dash help work.
Cause that's always, but in

482
00:28:48.900 --> 00:28:50.550
the short term you do
one thing and you do

483
00:28:50.550 --> 00:28:54.300
it well. Absolutely. Which I
believe was the Unix philosophy.

484
00:28:54.790 --> 00:28:57.840
It is, isn't it well,
fantastic. I'm excited that people

485
00:28:57.840 --> 00:29:00.420
will hopefully start to learn
about and create their own

486
00:29:00.420 --> 00:29:03.000
dotnet global tools. And hopefully
they'll check yours out and

487
00:29:03.000 --> 00:29:05.640
we can go to Rendell
labs.com. I'll put a link

488
00:29:05.850 --> 00:29:07.770
in the show notes and
people can learn about your

489
00:29:08.070 --> 00:29:11.070
courseware. That's coming up soon.
Yes. Thank you. That'd be

490
00:29:11.070 --> 00:29:14.490
great. This has been another
episode of Hanselminutes and we'll

491
00:29:14.490 --> 00:29:35.970
see you again next week.
<inaudible>.

