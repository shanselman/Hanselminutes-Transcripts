WEBVTT FILE

1
00:00:00.180 --> 00:00:03.360
Hi, this is Scott. I
really appreciate our sponsors because

2
00:00:03.360 --> 00:00:06.300
they make the show possible.
Today's show is sponsored by

3
00:00:06.300 --> 00:00:10.500
developer express, become a UI
superhero with dev express controls

4
00:00:10.500 --> 00:00:15.030
and libraries. Deliver elegant.net solutions
that address customer needs today

5
00:00:15.420 --> 00:00:19.470
by leveraging your existing knowledge,
you can build next generation

6
00:00:19.500 --> 00:00:23.610
touch enabled solutions for tomorrow,
you can download your free

7
00:00:23.700 --> 00:00:45.320
30 day trial@dxdothanselminutes.com. That's dx.hanselminutes.com.
<inaudible>. Hi, this is Scott

8
00:00:45.320 --> 00:00:47.810
Hanselman. This is another episode
of Hansel minutes today. I'm

9
00:00:47.810 --> 00:00:50.360
talking with Kelsey Hightower from
Google. How's it going, sir?

10
00:00:50.600 --> 00:00:53.240
Awesome. Glad to be here.
Thanks for hanging out. So

11
00:00:53.390 --> 00:00:57.590
we work on OSCON together,
which is cool. Yes. Like

12
00:00:57.590 --> 00:01:00.260
that NAMIC duo. Yeah. And
we did pretty good last

13
00:01:00.260 --> 00:01:02.300
year. Yeah, I think so.
I learned a lot and

14
00:01:02.300 --> 00:01:04.820
we had the, we brought
hip hop to ask con,

15
00:01:04.850 --> 00:01:08.510
which was this new we
did. We had Samis come

16
00:01:08.510 --> 00:01:10.160
to Oz con you can
check her out. S a

17
00:01:10.160 --> 00:01:12.950
M M U S. Sam
has music. I think people

18
00:01:13.160 --> 00:01:14.930
may have had an idea
about who was the person

19
00:01:14.930 --> 00:01:18.680
who brought Samis. Yes. There
was a bit of concern

20
00:01:18.680 --> 00:01:21.740
that that would be Kelsey's
idea. But yet that was

21
00:01:21.740 --> 00:01:26.540
Scott's. Scott's deep integration with
the community. I liked the

22
00:01:26.540 --> 00:01:29.720
way Scott has a diverse
group of folks that he

23
00:01:29.720 --> 00:01:33.020
knows from hip hop artists,
people that make things, people

24
00:01:33.020 --> 00:01:35.150
that build things. I love
it. Well, this is why

25
00:01:35.150 --> 00:01:36.800
we're such a good team.
And why I think on

26
00:01:36.800 --> 00:01:38.630
this year will be pretty
sweet too, because we've got

27
00:01:38.630 --> 00:01:42.560
makers and you've got people
building and committing real code

28
00:01:42.560 --> 00:01:45.170
to get hub doing real
work. It also feels like

29
00:01:45.170 --> 00:01:47.870
the people we meet in
real life, we, we figure

30
00:01:47.870 --> 00:01:49.610
out, you know, Hey, you're
good at a thing. You

31
00:01:49.610 --> 00:01:51.920
should be at Ascot. And
we have a platform to

32
00:01:51.920 --> 00:01:53.900
make it happen now. No,
that's a good point. We

33
00:01:53.900 --> 00:01:56.240
don't go looking for people
that are like, Hey, you're

34
00:01:56.240 --> 00:01:59.780
a professional speaker. Come speak
professionally at OSCON. Yeah, exactly.

35
00:01:59.810 --> 00:02:02.180
You're building something. Cool. Yeah.
And you should have a

36
00:02:02.180 --> 00:02:04.100
stage. I think we always
talk about how do we

37
00:02:04.130 --> 00:02:06.860
give people the ability to
show off their craft? How

38
00:02:06.860 --> 00:02:08.630
do we give them some
spotlight? How do we share

39
00:02:08.630 --> 00:02:10.700
the stage? And I think
for the last couple of

40
00:02:10.700 --> 00:02:13.130
years, Oz con has been
that thing we could do

41
00:02:13.400 --> 00:02:15.290
to put someone on stage
for the first time. Yeah.

42
00:02:15.350 --> 00:02:16.880
That's go on. I was
gone. Of course, it's coming

43
00:02:16.880 --> 00:02:19.640
up. So go and check
that out and be sure

44
00:02:19.640 --> 00:02:21.200
to scroll down when you
get to that OSC on

45
00:02:21.200 --> 00:02:24.680
page, because there's lots of
discounts for students, for educators,

46
00:02:24.680 --> 00:02:27.950
for open source contributors, and
also check out the workshops.

47
00:02:27.950 --> 00:02:30.170
A lot of people, it's
just not a conference where

48
00:02:30.170 --> 00:02:31.910
you didn't go and watch
a bunch of talks, but

49
00:02:31.910 --> 00:02:33.830
you also learn and get
some hands on skills that

50
00:02:33.830 --> 00:02:36.350
you can take back to
work. Definitely, definitely. So what

51
00:02:36.350 --> 00:02:37.850
do you do at Google
and where did you come

52
00:02:37.850 --> 00:02:39.320
from? Because you've been at
Google for about what a

53
00:02:39.320 --> 00:02:40.910
year? About a year and
a half now. So I

54
00:02:40.910 --> 00:02:43.820
go, well, my main focus
is Google cloud, which is,

55
00:02:44.210 --> 00:02:47.180
you know, a cloud platform.
And my specialty is Kubernetes

56
00:02:47.180 --> 00:02:51.380
right now. So all things
containers, application orchestration, that whole

57
00:02:51.380 --> 00:02:54.790
distributed systems thing. And I
come from a coral S

58
00:02:54.790 --> 00:02:56.930
so before that, I was
at chorus working with similar

59
00:02:56.930 --> 00:02:59.740
technology. So you can say
I'm at the mothership now.

60
00:02:59.950 --> 00:03:02.290
Nice. That's cool. Because I
kind of went to the

61
00:03:02.290 --> 00:03:04.870
mothership too, except that I
went to the Microsoft mothership.

62
00:03:05.160 --> 00:03:07.530
Cool. We call it Microsoft.
We love what you guys

63
00:03:07.530 --> 00:03:10.980
are doing Cool because we've
got, I work in, I

64
00:03:10.980 --> 00:03:13.110
worked on Azure and right,
you work on Google cloud,

65
00:03:13.230 --> 00:03:16.350
but we got.net running on
Google cloud. That's true. Kubernetes

66
00:03:16.410 --> 00:03:18.600
running on Azure, running on
Azure. So it's, it's a

67
00:03:18.600 --> 00:03:23.170
big love Fest. High-fives we
want your for loop sells

68
00:03:23.170 --> 00:03:25.770
these cycles, right? We want
your CPU cycles. We don't

69
00:03:25.770 --> 00:03:27.420
really care where you run
them, but of course you

70
00:03:27.420 --> 00:03:30.330
should run them on Azure
and on Google cloud. And

71
00:03:30.330 --> 00:03:32.190
there's a lot of customers
who do want the ability

72
00:03:32.190 --> 00:03:34.200
and the flexibility to kind
of compete what they want

73
00:03:34.200 --> 00:03:37.200
or there's their own laptop,
their own data center or

74
00:03:37.200 --> 00:03:39.990
the cloud provider. That makes
sense. So when a couple

75
00:03:39.990 --> 00:03:42.270
of years back when, you
know, you would get kind

76
00:03:42.270 --> 00:03:43.800
of tied to a host
and we always talked about

77
00:03:43.800 --> 00:03:47.520
vendor lockin, do you think
that the rise of containers

78
00:03:47.520 --> 00:03:50.160
was as well as the
many other problems that it

79
00:03:50.160 --> 00:03:52.350
tried to solve a way
to get away from vendor

80
00:03:52.350 --> 00:03:54.000
login? Cause it seems like
you could really, if you

81
00:03:54.000 --> 00:03:57.060
want it to not be
locked in to any particular

82
00:03:57.060 --> 00:04:00.090
cloud right now. Yeah. The
VMs were just too low

83
00:04:00.090 --> 00:04:02.970
level. A lot of people
were coding apps directly towards

84
00:04:02.970 --> 00:04:05.070
the VM. And that was
really specific on where you

85
00:04:05.070 --> 00:04:07.380
were computing. And now that
we have that other layer

86
00:04:07.380 --> 00:04:10.200
of abstraction, thank you, Docker,
you know, taking the container

87
00:04:10.200 --> 00:04:12.990
image and saying, Hey, here's
my code. Let me point

88
00:04:12.990 --> 00:04:16.710
it at a runtime and
not a cloud provider. Do

89
00:04:16.710 --> 00:04:19.740
you think that Docker is
going to become like Kleenex?

90
00:04:20.040 --> 00:04:22.410
Cause we don't buy Kleenex
anymore. We buy, we buy

91
00:04:22.410 --> 00:04:25.050
Kleenex, but we get a
Costco and it's just generic

92
00:04:25.050 --> 00:04:27.360
tissue. Yeah. It happened about
a year ago. To be

93
00:04:27.360 --> 00:04:30.330
honest, you know, from my,
from my perspective, just seeing

94
00:04:30.330 --> 00:04:33.030
how things unfolded very early
on. Now we have like

95
00:04:33.030 --> 00:04:36.390
the OCI. So the open
container initiative started by Docker

96
00:04:36.720 --> 00:04:40.230
to kind of have this
container image, format, container, runtime

97
00:04:40.230 --> 00:04:41.790
standards. And a lot of
this stuff just comes from

98
00:04:41.790 --> 00:04:43.500
the OS, right? So if
you look at what's done

99
00:04:43.500 --> 00:04:46.020
on Microsoft, on the server
side, have their own container

100
00:04:46.020 --> 00:04:49.950
implementation. Lennox has theirs and
pay homage to the people

101
00:04:49.950 --> 00:04:52.830
that came before with Solaris
zones and so forth. You

102
00:04:52.830 --> 00:04:55.530
know, now those things are
codified into this open container

103
00:04:55.740 --> 00:04:58.020
standard where you can say,
Hey, here's how you package

104
00:04:58.020 --> 00:05:01.050
a nap and here's how
a runtime consume it and

105
00:05:01.050 --> 00:05:03.480
run it wherever you want.
And do you think that

106
00:05:03.480 --> 00:05:05.130
that's just going to continue,
that we're going to have,

107
00:05:05.160 --> 00:05:07.800
this will be a standard
the way that a while

108
00:05:07.800 --> 00:05:09.150
they go to the corner.
I think of other standards

109
00:05:09.150 --> 00:05:11.040
now, like an HTTP, we
just take it for granted

110
00:05:11.070 --> 00:05:13.890
nobody or In areas that
just run on line. You

111
00:05:13.890 --> 00:05:16.650
don't even think about them
anymore. EFCs or Microsoft. Yeah.

112
00:05:16.710 --> 00:05:20.010
These binaries just tend to
work wherever that platform is.

113
00:05:20.310 --> 00:05:22.140
And now you can just
go focus on building apps.

114
00:05:22.140 --> 00:05:23.850
And I think we're getting
close to that now. Right?

115
00:05:23.940 --> 00:05:26.460
And offender line libraries are
the underlying runtimes there. Then

116
00:05:26.460 --> 00:05:28.830
everything is cool. Exactly. Cause
the pace that you can

117
00:05:28.830 --> 00:05:30.990
actually move some of this
container technology, it feels like

118
00:05:30.990 --> 00:05:33.010
it's fast. But I think
what we're doing is figuring,

119
00:05:33.010 --> 00:05:35.580
going to, how do we
standardize it versus, you know,

120
00:05:35.580 --> 00:05:39.270
it's always changing. So there's,
there's there's standards that are

121
00:05:39.330 --> 00:05:42.420
arising over the last 20
years, but there's also standards

122
00:05:42.420 --> 00:05:45.450
in architecture. Should you talk
about how VMs were a

123
00:05:45.450 --> 00:05:48.330
little too low level? You
know, 20 years ago, 15

124
00:05:48.330 --> 00:05:50.220
years ago when I started
first saw my first virtual

125
00:05:50.220 --> 00:05:53.010
machine, I thought that was
a miracle. It was VMware.

126
00:05:53.040 --> 00:05:56.640
It was running windows 3.1.
Right? And then we would

127
00:05:56.640 --> 00:05:59.750
go and three tier architecture,
like that was the thing,

128
00:05:59.750 --> 00:06:04.100
right? You'd have web business
layer and database. And then

129
00:06:04.100 --> 00:06:06.560
if you were running that
in a virtual machine, then

130
00:06:06.590 --> 00:06:09.500
that was amazing. You were
ahead of the game, but

131
00:06:09.500 --> 00:06:13.310
now it's getting, we've got
web farms we take for

132
00:06:13.310 --> 00:06:18.080
granted, it's a check box,
right databases. Now there's, if

133
00:06:18.080 --> 00:06:20.360
you look at something like
zits, now the new cloud,

134
00:06:20.660 --> 00:06:23.600
I asked Guillermo Roche what
was going to be the

135
00:06:23.600 --> 00:06:25.400
backend for that? What's your
database solution? He's like, Oh,

136
00:06:25.400 --> 00:06:27.560
well that's, that's all, that's
not our problem. We could

137
00:06:27.560 --> 00:06:29.630
use Azure document DB or
we can use Mongo in

138
00:06:29.630 --> 00:06:31.370
the cloud somewhere. Like we
don't even think about that.

139
00:06:31.790 --> 00:06:33.440
So like there's a cloud
provider that doesn't even think

140
00:06:33.440 --> 00:06:36.460
about their database. You know
what I mean? And I

141
00:06:36.460 --> 00:06:38.350
think that has to be
the case. Now, you know,

142
00:06:38.380 --> 00:06:40.720
back then you could actually
fit your database on a

143
00:06:40.720 --> 00:06:43.510
single server and maybe scale
up a little bit. There

144
00:06:43.510 --> 00:06:46.450
you go. At this point,
you're at petabytes of data,

145
00:06:46.510 --> 00:06:48.850
right? You're not trying to
handle that yourself in many

146
00:06:48.850 --> 00:06:51.790
cases or you can't even
buy that much storage on

147
00:06:51.790 --> 00:06:53.560
prem for a lot of
people. So I think what

148
00:06:53.560 --> 00:06:56.710
we're starting to see now
is that your customer expectation,

149
00:06:56.830 --> 00:06:58.930
if you're like a five
day old startup, right? They

150
00:06:58.930 --> 00:07:02.620
expect you to be, you
know, global day one. So

151
00:07:02.620 --> 00:07:04.420
now it's much easier just
to say, you know what,

152
00:07:04.420 --> 00:07:06.850
we're just going to go
and start with this massively

153
00:07:06.850 --> 00:07:09.250
scaled database thing. And we're
just going to focus on

154
00:07:09.250 --> 00:07:12.070
building our app and anything
short of that. You can't

155
00:07:12.070 --> 00:07:13.630
do that and not going
to make it. Is there

156
00:07:13.690 --> 00:07:16.060
any reason to run on
prem anymore other than maybe

157
00:07:16.060 --> 00:07:18.400
data governance? I think so.
I think if you're good

158
00:07:18.400 --> 00:07:20.740
at it, you know, if
you're already good, if you're

159
00:07:20.740 --> 00:07:22.570
good at it, right? If
you're, if you're a Facebook,

160
00:07:22.600 --> 00:07:25.090
if you're a Google, if
you're a Microsoft, you're good

161
00:07:25.090 --> 00:07:27.250
at this kind of thing.
And you have some incentive

162
00:07:27.580 --> 00:07:31.000
to do investments up and
beyond what's necessary right now.

163
00:07:31.300 --> 00:07:33.910
So I think for most
people, it's probably not the

164
00:07:33.910 --> 00:07:35.560
thing you want to get
good at before you start

165
00:07:35.560 --> 00:07:38.980
making money at your core
product. It's a good point

166
00:07:39.550 --> 00:07:41.470
that there, there are, there
do seem to be some,

167
00:07:41.920 --> 00:07:45.280
some incorrect priorities where it's
like, all right, let's make

168
00:07:45.280 --> 00:07:47.620
the great new startup, but
first we need to go

169
00:07:47.620 --> 00:07:49.750
and write a new JavaScript
library or a new container

170
00:07:49.750 --> 00:07:52.420
orchestration library or whatever. Like,
is that really what our

171
00:07:52.420 --> 00:07:54.430
core competency is? Yes. I
think humans just have that

172
00:07:54.430 --> 00:07:57.220
problem, right? Like you want
to be busy. So it's

173
00:07:57.220 --> 00:07:59.560
really hard to figure out
what your customers want. That

174
00:07:59.560 --> 00:08:02.140
takes a whole different skill
set, you know, product market

175
00:08:02.140 --> 00:08:05.830
fit. Talk to customers, listen
to customers, build and test

176
00:08:05.830 --> 00:08:08.770
things. But in the meanwhile
you can just start throwing

177
00:08:08.770 --> 00:08:11.320
up infrastructure. Hey, let's try
this new tool. Let's at

178
00:08:11.320 --> 00:08:13.480
this, let's rewrite this part.
I wanted to try that

179
00:08:13.480 --> 00:08:16.240
new fancy database. And that
just keeps you busy until

180
00:08:16.240 --> 00:08:17.620
you get to the point
where you have to actually

181
00:08:17.830 --> 00:08:20.590
slow down and focus on
actual business value that you're

182
00:08:20.590 --> 00:08:22.900
selling to people. And I
think sometimes we as software

183
00:08:22.900 --> 00:08:25.990
engineers forget that we are
in the business of business,

184
00:08:26.410 --> 00:08:28.780
not the business. And you
want to Pat that resume

185
00:08:29.140 --> 00:08:31.210
and to put those new
bullet points on there. But

186
00:08:31.210 --> 00:08:33.280
that, that ends up being
like, we talked about yak

187
00:08:33.280 --> 00:08:35.140
shaving, right? It's like, what
are you doing? Well, you

188
00:08:35.140 --> 00:08:37.000
know, I gotta move to
that new fancy database that

189
00:08:37.000 --> 00:08:38.590
doesn't have anything to do
with our business. You're just

190
00:08:38.590 --> 00:08:40.750
trying to shave that yak.
And I think that's kind

191
00:08:40.750 --> 00:08:43.390
of that difference between talking
about like senior engineers, even

192
00:08:43.390 --> 00:08:45.910
though I don't like to
use like senior junior title,

193
00:08:46.240 --> 00:08:48.640
but you should kind of
tell the maturity level when,

194
00:08:48.640 --> 00:08:51.220
so, so now what do
we actually need to get

195
00:08:51.220 --> 00:08:53.470
this done? Let's get that
out of the way and

196
00:08:53.470 --> 00:08:56.280
go focus on the real
thing. So in a World

197
00:08:56.280 --> 00:08:58.440
of containers where we don't
have to think about our

198
00:08:58.440 --> 00:09:00.390
cloud as much, we don't
think about scale. We don't

199
00:09:00.390 --> 00:09:03.180
have to think about load
balancing, stuff like that. It

200
00:09:03.180 --> 00:09:06.780
seems like we're almost turning
the containers into tiny little

201
00:09:06.870 --> 00:09:11.160
services, little mini services, little
micro services that remind me

202
00:09:11.160 --> 00:09:14.670
a lot of the Java
RMI objects and the comm

203
00:09:14.670 --> 00:09:16.980
remote objects. How do we
make sure that we are

204
00:09:16.980 --> 00:09:19.590
building on and standing on
the shoulders of giants and

205
00:09:19.590 --> 00:09:22.430
not repeating the sins of
the fathers and mothers? I

206
00:09:22.430 --> 00:09:23.870
think the first thing is
too, is just to make

207
00:09:23.870 --> 00:09:26.420
sure that the, the container
movement shouldn't be tied to

208
00:09:26.420 --> 00:09:29.660
the architectural pattern. So like
microservices is a great idea

209
00:09:29.750 --> 00:09:32.750
and that's a decision you
should make independently. But you

210
00:09:32.750 --> 00:09:35.330
know, sometimes it makes sense
for a monolithic applications to

211
00:09:35.330 --> 00:09:38.420
still benefit from a container.
If you think about like

212
00:09:38.420 --> 00:09:41.630
the mobile device, you have
these large binaries that are

213
00:09:41.630 --> 00:09:44.330
self contained. So that way
some user can visit an

214
00:09:44.330 --> 00:09:48.110
app store, click the button,
download the application and not

215
00:09:48.110 --> 00:09:50.690
worry about dependencies. We just
want the same thing on

216
00:09:50.690 --> 00:09:53.180
the server side, whatever app
you're building, it should just

217
00:09:53.180 --> 00:09:56.930
be self-contained whether that's a
monolith or microservice, that doesn't

218
00:09:56.930 --> 00:09:59.810
really matter. Okay. So do
you think that people are

219
00:09:59.810 --> 00:10:03.410
conflating the terms, microservices and
containers and they just swap

220
00:10:03.410 --> 00:10:05.270
the words out whenever they
feel like it All day?

221
00:10:05.540 --> 00:10:06.920
I mean, I think that's
the number one thing you

222
00:10:06.920 --> 00:10:08.090
see a customer like, yeah.
We're going to go to

223
00:10:08.090 --> 00:10:11.360
move to microservices and this
new tool at the same

224
00:10:11.360 --> 00:10:13.490
time. And I think the
trap there is that can't

225
00:10:13.490 --> 00:10:15.800
tell which one is broken.
Is it the new tool

226
00:10:16.040 --> 00:10:18.860
or is it the wrong
architectural pattern? Okay. So then

227
00:10:18.860 --> 00:10:20.480
it makes me feel like
the question that's not being

228
00:10:20.480 --> 00:10:23.750
asked is why, if somebody
says we're moving to microservices

229
00:10:23.780 --> 00:10:26.360
and Docker and we're going
to use Kubernetes and it's

230
00:10:26.360 --> 00:10:29.030
like, well, wait a second.
You can do all or

231
00:10:29.270 --> 00:10:32.180
one or two or three
of those things, but they

232
00:10:32.180 --> 00:10:34.790
aren't all required. Like you
don't have to do microservices

233
00:10:34.820 --> 00:10:36.800
just because you go to
containers. Yeah. I think, I

234
00:10:36.800 --> 00:10:39.680
think once you go to
containers or microservices, one of

235
00:10:39.680 --> 00:10:42.380
your biggest problems is going
to be dependency management. How

236
00:10:42.380 --> 00:10:44.090
do you make sure that
each of the services can

237
00:10:44.090 --> 00:10:46.670
actually live in an independent
way? They may have common

238
00:10:46.670 --> 00:10:50.330
dependencies, some services may scale
and move on before others

239
00:10:50.330 --> 00:10:53.300
are ready. You may go
from Java one six to

240
00:10:53.300 --> 00:10:55.550
a Java, one seven for
different services. How do you

241
00:10:55.550 --> 00:10:58.370
manage that in a way
that supports the business, different

242
00:10:58.370 --> 00:11:00.500
teams are working on different
services. So this is where

243
00:11:00.500 --> 00:11:03.950
containerization does make sense, right?
But it's not a hard

244
00:11:03.950 --> 00:11:09.620
requirement that you move to
containers while adopting microservices. Do

245
00:11:09.620 --> 00:11:12.980
you think that people are
using containers to Nively? I've

246
00:11:12.980 --> 00:11:15.680
seen some people go from
one virtual machine to one

247
00:11:15.680 --> 00:11:19.370
container and they think that's
a Success. Yeah. I think

248
00:11:19.370 --> 00:11:21.590
a lot of times in
the container world, you lose

249
00:11:21.590 --> 00:11:23.540
allow the tooling that you
have in the virtual machine

250
00:11:23.540 --> 00:11:25.790
world. Like if you're on
a Lennox machine, you have

251
00:11:25.790 --> 00:11:27.980
RPM and you have the
RPM database to tell you,

252
00:11:27.980 --> 00:11:29.900
Hey, there's some things that
need to be updated on

253
00:11:29.900 --> 00:11:32.780
the server, run a command,
they're all updated. But I

254
00:11:32.780 --> 00:11:34.010
think a lot of people
are in when they go

255
00:11:34.010 --> 00:11:37.610
from like one VM to
a container, those tools aren't

256
00:11:37.610 --> 00:11:40.370
running anymore. It's just your
app. So do you really

257
00:11:40.370 --> 00:11:42.230
need to update those libraries
or not? Who's going to

258
00:11:42.230 --> 00:11:44.630
tell you that. Right. And
it's also a licensing problem.

259
00:11:44.960 --> 00:11:46.670
We don't really think about
this anymore. When you boot

260
00:11:46.670 --> 00:11:49.820
a virtual machine, it comes
with an OSTP and it's

261
00:11:49.820 --> 00:11:53.180
usually licensed appropriately by the
cloud provider or your infrastructure.

262
00:11:53.290 --> 00:11:55.330
But when you move that
to a container, you're now

263
00:11:55.330 --> 00:11:59.610
distributing that operating system with
the app. Interesting. And then

264
00:11:59.640 --> 00:12:01.890
when you think about like,
I hear a lot about

265
00:12:01.890 --> 00:12:04.860
Alpine, is that like, I
don't even know where Alpine

266
00:12:04.860 --> 00:12:07.290
comes from. Who makes it,
is it production appropriate? I

267
00:12:07.290 --> 00:12:09.990
don't know. Maybe Alpine's only
good for dev people go,

268
00:12:10.010 --> 00:12:11.850
Oh, look, it's Alpine. There's
only eight megabytes. That's a

269
00:12:11.850 --> 00:12:15.150
great, I didn't. And I'm
like, I'm just like, I

270
00:12:15.150 --> 00:12:16.320
know I thought about it
in the back of my

271
00:12:16.320 --> 00:12:17.580
mind, but now you just
brought it up to the

272
00:12:17.580 --> 00:12:19.620
front and I'm like, do
I go into production with

273
00:12:19.620 --> 00:12:22.050
that? Yeah, exactly. So I
think we're, I think I

274
00:12:22.050 --> 00:12:25.080
like the movement of pushing
more towards the developer or

275
00:12:25.090 --> 00:12:27.270
the person responsible for making
the app. Right. So they

276
00:12:27.270 --> 00:12:29.670
can self contain everything. But
when they bring in a

277
00:12:29.670 --> 00:12:32.700
bash shale that they may
or may not need dependencies

278
00:12:32.700 --> 00:12:35.610
that they don't know about,
there's a big liability cost

279
00:12:35.610 --> 00:12:38.100
there. Right. And it removes,
you know, other people in

280
00:12:38.100 --> 00:12:40.110
the org may be able
to see and have visibility

281
00:12:40.110 --> 00:12:42.540
into what did you bring
in? What is in that

282
00:12:42.540 --> 00:12:44.130
thing? And is it safe
for me to update it?

283
00:12:44.310 --> 00:12:46.140
Yeah, that is a good
point. And I think that

284
00:12:46.140 --> 00:12:48.390
when you bring in containers,
the fact that you can

285
00:12:48.390 --> 00:12:50.550
just change the, from line
of your Docker file and

286
00:12:50.550 --> 00:12:53.340
suddenly a whole extra stack
showed up can be a

287
00:12:53.340 --> 00:12:55.290
real problem. And then one
of the benefits of containers

288
00:12:55.290 --> 00:12:57.390
that people don't really talk
about is that you're only

289
00:12:57.390 --> 00:13:01.110
shipping what you need, like
from a tree trimming perspective,

290
00:13:01.110 --> 00:13:02.340
you want to shake that
tree as much as you

291
00:13:02.340 --> 00:13:06.180
can and have no bites
that are unnecessary running in

292
00:13:06.180 --> 00:13:08.100
production. And you started to
see a lot of bill

293
00:13:08.110 --> 00:13:10.350
tools help with that. So
over the last four years,

294
00:13:10.350 --> 00:13:13.230
I would say, people understand
this problem. They recognize this

295
00:13:13.230 --> 00:13:15.660
problem. Especially when we went
towards the enterprise, who was

296
00:13:15.660 --> 00:13:18.270
like, Oh, what's the license
for everything in that container.

297
00:13:18.300 --> 00:13:21.060
Right. Once you're tasked with
that question, then you start

298
00:13:21.060 --> 00:13:22.740
to say, well, we need
tools to help us with

299
00:13:22.740 --> 00:13:24.660
that. So you're starting to
see tools come up that

300
00:13:24.660 --> 00:13:27.570
show you what's inside those
containers, what needs to be

301
00:13:27.570 --> 00:13:30.030
updated and actually giving me
the tools to actually make

302
00:13:30.030 --> 00:13:32.370
it happen. Okay. So that
maturity though, isn't quite there

303
00:13:32.370 --> 00:13:34.420
the way it is with
virtual machines. Like we, we

304
00:13:34.440 --> 00:13:36.480
have tools that can tell
you everything about virtual machines

305
00:13:36.480 --> 00:13:39.540
inside and out. But with
containers, like, as someone was

306
00:13:39.540 --> 00:13:42.000
telling me about a problem
where they had some seven

307
00:13:42.000 --> 00:13:44.340
or eight container orchestration system
and they were having a

308
00:13:44.340 --> 00:13:46.470
crash in production and they
wanted to do some live

309
00:13:46.470 --> 00:13:48.360
debugging and they didn't even
know which container was having

310
00:13:48.360 --> 00:13:51.150
the problem and things were
jumping around. Yeah. So this

311
00:13:51.150 --> 00:13:54.090
is where the orchestration frameworks
come in. Okay. On the

312
00:13:54.090 --> 00:13:56.550
container front, it solves the
packaging problem. How do I

313
00:13:56.550 --> 00:14:00.300
get my app, all this
dependencies and a single deployable

314
00:14:00.300 --> 00:14:02.220
item. Once you got that,
you've got the PlayStation game

315
00:14:02.220 --> 00:14:04.260
on a CD. Yep. How
do you distribute it? How

316
00:14:04.260 --> 00:14:05.490
do you make sure that
it gets to the right

317
00:14:05.490 --> 00:14:08.880
place? And this is where
tools like Coobernetti's Docker, swarm

318
00:14:09.420 --> 00:14:11.850
marathon in may. So that's
where they come in. So

319
00:14:11.850 --> 00:14:14.190
when you do have a
problem, they tell you exactly

320
00:14:14.190 --> 00:14:17.130
what containers crashing on what
server that is crashing on

321
00:14:17.130 --> 00:14:20.160
and giving you some tools
to debug. Okay. And these,

322
00:14:20.190 --> 00:14:23.400
these orchestration systems, what are
the responsibilities of an orchestration

323
00:14:23.400 --> 00:14:26.910
system decide when it's time
to scale Out? Yeah. So

324
00:14:26.910 --> 00:14:29.040
the main, the main thing
of an orchestration system is

325
00:14:29.040 --> 00:14:32.040
to provide that abstraction. So
with virtualization, okay, we gave

326
00:14:32.040 --> 00:14:33.960
you an abstraction over the
machine. So that's not pick

327
00:14:33.960 --> 00:14:36.540
the machine anymore. Let's not
worry about the physical network

328
00:14:36.540 --> 00:14:39.390
cars or disk or virtualized
that layer. I think what

329
00:14:39.390 --> 00:14:41.490
the container runtimes do is
say, Hey, don't worry about

330
00:14:41.490 --> 00:14:44.310
the VMs or machines, focus
on the app. You tell

331
00:14:44.310 --> 00:14:46.560
me what container you have
and you tell me how

332
00:14:46.560 --> 00:14:48.480
many you want and how
much CPU and memory you

333
00:14:48.480 --> 00:14:50.490
need. And I make sure
that that stays that way.

334
00:14:50.610 --> 00:14:53.270
Okay. So if they crash
and there's only two running,

335
00:14:53.270 --> 00:14:55.190
you want a three, it
brings it back for you

336
00:14:55.460 --> 00:14:57.830
and also gives you the
visibility in terms of reporting,

337
00:14:58.250 --> 00:15:00.680
what's running. How much CPU
are you using? How much

338
00:15:00.710 --> 00:15:03.260
memory are you using collect
all the logs? So all

339
00:15:03.260 --> 00:15:05.060
of the things that we
built up over like 20

340
00:15:05.060 --> 00:15:07.190
years, all the things that
we would do with virtual

341
00:15:07.190 --> 00:15:10.970
machines, they're now just rolled
up into these management platforms.

342
00:15:11.300 --> 00:15:13.180
So they just come out
of the box. How do

343
00:15:13.180 --> 00:15:15.370
I know if you just
said how much CPU, how

344
00:15:15.370 --> 00:15:18.820
much memory? Like, I don't
know, like, like my application

345
00:15:18.820 --> 00:15:20.980
in a container runs differently
than it does in a

346
00:15:20.980 --> 00:15:24.520
VM. And I probably don't
need Four gigs. Yeah. So

347
00:15:24.520 --> 00:15:27.040
what we've seen in, in,
in my experience in production,

348
00:15:27.400 --> 00:15:29.680
whenever you are setting your
VM, that's where some people

349
00:15:29.680 --> 00:15:32.710
will start with the container,
right? Like my VM, it

350
00:15:32.710 --> 00:15:35.890
has access to four cores
and 16 gigs of Ram.

351
00:15:35.890 --> 00:15:38.500
You know what that's probably
where you should start with

352
00:15:38.500 --> 00:15:40.510
the container because you just
don't know what you don't

353
00:15:40.510 --> 00:15:42.760
know. I see. And then
you use the metrics and

354
00:15:42.760 --> 00:15:44.680
this is why it's so
important that these container runtimes

355
00:15:44.680 --> 00:15:46.690
are shipping metrics out of
the box. Okay. You can

356
00:15:46.690 --> 00:15:50.140
say, Hey, you're only using
half of that. Then these

357
00:15:50.140 --> 00:15:51.670
run times were, make it
easy to go in and

358
00:15:51.670 --> 00:15:53.740
say, all right, let's just
bump that down to half.

359
00:15:53.950 --> 00:15:57.070
I should focus on scaling
out versus up. Okay. I

360
00:15:57.070 --> 00:15:58.690
don't know how much weight
I've lost. I'll just wear

361
00:15:58.690 --> 00:16:00.610
these big pants. And then
I'll tighten my belt. As

362
00:16:00.610 --> 00:16:02.920
I learned You walk outside
and people laugh at you.

363
00:16:02.920 --> 00:16:05.320
You might want to go
into just what you're buying.

364
00:16:05.770 --> 00:16:08.410
Okay. And then I honestly,
I don't have to think

365
00:16:08.410 --> 00:16:11.980
about the real hardware, like
the, the, the, the real

366
00:16:11.980 --> 00:16:14.080
CPU. Like it's all virtual
in the sense of like,

367
00:16:14.080 --> 00:16:15.940
what if I've got, you
know, I've got a Xeon

368
00:16:15.940 --> 00:16:17.680
over here with 16 gigs
of Ram. I got an

369
00:16:17.680 --> 00:16:20.650
older server. Like, can I
put heterogeneous hardware into a

370
00:16:20.650 --> 00:16:23.780
pile? So depends on how
you write your app. Okay.

371
00:16:23.780 --> 00:16:26.530
You know, cause if you're
a performance savvy shop, you

372
00:16:26.530 --> 00:16:29.590
might be looking for this
specific Intel instruction set. Oh

373
00:16:29.590 --> 00:16:32.260
really? So you're going to
rely on that scheduler, you

374
00:16:32.260 --> 00:16:34.360
know, the thing that places
where your workload should go

375
00:16:34.360 --> 00:16:37.600
to say, Hey, I really
need this specific instruction set.

376
00:16:37.870 --> 00:16:40.060
So then that's where the
chip actually does come into

377
00:16:40.060 --> 00:16:43.240
play. Like Intel just released
Skylake not too long ago.

378
00:16:43.570 --> 00:16:46.630
And it has a new
instruction set, highly apical to

379
00:16:46.630 --> 00:16:49.240
a lot of machine learning
workloads. If you write an

380
00:16:49.240 --> 00:16:51.040
app that uses that instruction
set, it's not gonna even

381
00:16:51.040 --> 00:16:54.280
run on the current chips
available. So that does creep

382
00:16:54.280 --> 00:16:56.590
into the equation a little
bit, same thing with GPU

383
00:16:56.590 --> 00:16:59.260
workloads. But for the most
part, people try to use

384
00:16:59.260 --> 00:17:01.930
a common set of widely
deployed stuff. So you can

385
00:17:01.930 --> 00:17:04.570
go from one CPU back,
maybe five or 10 years,

386
00:17:04.570 --> 00:17:06.340
I'm going to be good,
but you got to pay

387
00:17:06.340 --> 00:17:09.760
attention to if you're hyper
optimized. Okay. And then certainly

388
00:17:09.760 --> 00:17:11.650
if you did have a
machine that was made yesterday

389
00:17:11.650 --> 00:17:13.780
and a machine that was
made five years ago, you

390
00:17:13.780 --> 00:17:16.600
might say what? Gosh, you
know, every third hit, my

391
00:17:16.600 --> 00:17:19.330
application is slow. It's because
we're hitting containers on slower

392
00:17:19.330 --> 00:17:21.790
hardware. Oh exactly. And that's
the trade off you're willing

393
00:17:21.790 --> 00:17:23.740
to make. Right? Cause you
want that ability to scale

394
00:17:23.740 --> 00:17:26.110
out. So really the goal
is to think about how

395
00:17:26.110 --> 00:17:28.000
many requests per second do
I need to do on

396
00:17:28.000 --> 00:17:30.310
this particular web app? Or
if it's a database, you

397
00:17:30.310 --> 00:17:32.080
know, how much work do
I need to be able

398
00:17:32.080 --> 00:17:35.320
to handle and scale up
a quarterly? Now it seems

399
00:17:35.320 --> 00:17:38.800
like people also forget that
the move from virtual machines

400
00:17:38.800 --> 00:17:41.770
to containers is a move
from a mutable to an

401
00:17:41.770 --> 00:17:45.460
immutable environment. And I've seen
people just start writing stuff

402
00:17:45.460 --> 00:17:48.070
to disk and then stuff
gets lost. And like, where

403
00:17:48.070 --> 00:17:50.340
did it go? Like, well,
can't, it's a read only

404
00:17:50.340 --> 00:17:52.910
world in the container world.
So I think that's kind

405
00:17:52.910 --> 00:17:56.570
of almost a misconception. In
some ways you benefit a

406
00:17:56.570 --> 00:18:00.440
lot from containers. If you
adopt this philosophy around immutability,

407
00:18:00.920 --> 00:18:03.470
meaning that if whatever you
write you're okay, would it

408
00:18:03.470 --> 00:18:06.350
be ripped out from underneath
you and you be moved

409
00:18:06.350 --> 00:18:09.050
to another machine, then you
get all the benefits. Okay.

410
00:18:09.080 --> 00:18:11.120
But if you don't do
that, it still works. If

411
00:18:11.120 --> 00:18:13.040
you think about what the
container does, it just gives

412
00:18:13.040 --> 00:18:14.810
you a bit of isolation
from other things on a

413
00:18:14.810 --> 00:18:17.420
machine. Okay. If you want
to write to dis that's

414
00:18:17.420 --> 00:18:20.420
totally fine. It's just that
by default, most of them

415
00:18:20.420 --> 00:18:23.030
are writing to these temporary
foul systems. I see. And

416
00:18:23.030 --> 00:18:25.100
that's what catches people off
guard. So if you really

417
00:18:25.100 --> 00:18:27.590
want to write to a
persistent dis things like Kubernetes,

418
00:18:27.590 --> 00:18:30.470
for example, when you launch
your container, you'll say, Hey,

419
00:18:30.620 --> 00:18:33.680
my cloud provider has this
box storage, carve out a

420
00:18:33.680 --> 00:18:36.140
hundred gigs of that and
attach it to this container

421
00:18:36.380 --> 00:18:39.350
at runtime. And at that
point, your data falls the

422
00:18:39.350 --> 00:18:42.080
container as it moves around.
Okay. Okay. So let me

423
00:18:42.080 --> 00:18:43.910
see if I understand. There's
like, let's say I'm making

424
00:18:43.910 --> 00:18:46.940
an expense reporting application. People
are gonna start uploading PDFs

425
00:18:47.330 --> 00:18:50.110
works great on my local
system. And you know, it

426
00:18:50.150 --> 00:18:54.530
drops that thing in slash
Mount slash C slash whatever

427
00:18:54.740 --> 00:18:56.390
works just fine. I throw
it into a container. I

428
00:18:56.390 --> 00:18:59.810
start losing my stuff. I
would Mount S3 or Mount

429
00:18:59.810 --> 00:19:02.630
Azure storage to the same
place. Could all of the

430
00:19:02.630 --> 00:19:04.970
containers then share that that's
a kind of a virtualized

431
00:19:04.970 --> 00:19:08.270
global file system at that.
Yeah. So I mean, one

432
00:19:08.360 --> 00:19:11.150
way to think about this
as we were all used

433
00:19:11.150 --> 00:19:14.390
to this politics world, I
have a file system and

434
00:19:14.390 --> 00:19:16.460
I can write to that
file system. Then it gets

435
00:19:16.460 --> 00:19:17.900
a little tricky. We started
to deal with things like

436
00:19:17.900 --> 00:19:20.450
NFS, where you can actually
have a shared posit type

437
00:19:20.450 --> 00:19:23.240
file system. But what we've
been migrating to over the

438
00:19:23.240 --> 00:19:25.880
years, it's like this idea
of object store, why even

439
00:19:25.880 --> 00:19:29.630
write it to slash VAR
data. The goal now is

440
00:19:29.630 --> 00:19:31.640
to say, just use an
object store. That way your

441
00:19:31.640 --> 00:19:34.790
app is decoupled from the
machine. So it's less about

442
00:19:34.850 --> 00:19:37.550
immutability is where you're storing
your state. We're used to

443
00:19:37.550 --> 00:19:39.590
this, right? This isn't a
new concept. We have a

444
00:19:39.590 --> 00:19:42.890
database throw that into SQL
server. And that's where that

445
00:19:42.890 --> 00:19:44.960
data will live. If you
get an upload of a

446
00:19:44.960 --> 00:19:48.080
file, put that in the
object store where it's going

447
00:19:48.080 --> 00:19:50.870
to be persistent and live
longer than the machine. Doesn't

448
00:19:50.870 --> 00:19:53.420
that mean though? That I'm
adding like the overhead of

449
00:19:53.420 --> 00:19:56.240
HTTP when I could just
write to the file system?

450
00:19:56.270 --> 00:19:57.710
Or is it the fact
that if I write to

451
00:19:57.710 --> 00:20:00.380
this file system, somebody else
is just going to HTTP

452
00:20:00.380 --> 00:20:03.050
that thing over to S3
anyway. So Yeah, for the

453
00:20:03.050 --> 00:20:05.060
most part you got to
back this data up. Yeah.

454
00:20:05.090 --> 00:20:06.770
You got to replicate the
data if you really want

455
00:20:06.770 --> 00:20:08.960
to see it ever again.
So I think we're getting

456
00:20:08.960 --> 00:20:10.970
like the best of both
worlds by standardizing on a

457
00:20:10.970 --> 00:20:13.490
pattern, Hey, let's take the
hit on the object store

458
00:20:13.730 --> 00:20:15.380
and there's all kind of
ways people optimize this. You

459
00:20:15.380 --> 00:20:17.030
can cash it, throw it
in the queue or in

460
00:20:17.030 --> 00:20:19.010
a queue. There's all kinds
of things you can do.

461
00:20:19.010 --> 00:20:21.170
It's just a best practice
that has evolved over time.

462
00:20:21.440 --> 00:20:24.860
Okay. How much granularity should
someone have when they're maybe

463
00:20:24.890 --> 00:20:26.930
starting to move something over?
If I've got a product

464
00:20:26.930 --> 00:20:30.020
catalog and a user identity,
and I've got a shopping

465
00:20:30.020 --> 00:20:33.740
cart, you know, there's kind
of obvious three microservices there,

466
00:20:34.280 --> 00:20:36.440
but maybe I could break
it up smaller. Maybe I

467
00:20:36.440 --> 00:20:38.420
don't need to break it
up. How do you usually

468
00:20:38.420 --> 00:20:40.850
kind of partition that? Honestly,
I tell people, move it

469
00:20:40.850 --> 00:20:44.630
as a monolith first, straight
up and then measure. If

470
00:20:44.630 --> 00:20:46.430
you tell me the app
is slow, you gotta be

471
00:20:46.430 --> 00:20:48.760
able to tell me why
you gotta say, well, the

472
00:20:48.760 --> 00:20:51.310
slowest part is the checkout
piece. And if you can

473
00:20:51.310 --> 00:20:54.280
prove that with some graph
or some, some logging, then

474
00:20:54.280 --> 00:20:56.770
I say, how about we
rip out the checkout piece

475
00:20:56.830 --> 00:20:59.590
and scale that horizontally? And
then that's just the right

476
00:20:59.590 --> 00:21:01.690
thing to do. So I
think most people just go

477
00:21:01.690 --> 00:21:05.110
with some scientific method versus
a fashion of microservices and

478
00:21:05.110 --> 00:21:07.500
you'll be in good shape.
It definitely seems like I

479
00:21:07.500 --> 00:21:10.170
hear that people are going
with their gut rather than

480
00:21:10.170 --> 00:21:12.450
just simply measuring. And if
they would just start measuring,

481
00:21:12.450 --> 00:21:14.510
they would, life would be
a lot easier. All of

482
00:21:14.520 --> 00:21:15.900
these questions we can answer.
And it makes sense to

483
00:21:15.900 --> 00:21:18.570
your colleagues, like, why'd you
do that? Why didn't we

484
00:21:18.630 --> 00:21:20.790
Break this piece out? And
why is it causing us

485
00:21:20.790 --> 00:21:23.700
pain? It will totally worth
it. So if I've got

486
00:21:23.700 --> 00:21:26.400
a large or I'm starting
to break up my large

487
00:21:26.400 --> 00:21:30.180
monolith into little pieces, how
do they know the names

488
00:21:30.180 --> 00:21:32.490
and the DNS of the
different ones? Like let's say

489
00:21:32.490 --> 00:21:34.380
that you hit the product
catalog. And then the web

490
00:21:34.380 --> 00:21:36.660
app decides that I'm going
to put something in the

491
00:21:36.660 --> 00:21:39.330
shopping cart. I could have
one shopping cart container. I

492
00:21:39.330 --> 00:21:43.530
could have six. Do I
talk cross like laterally from

493
00:21:43.530 --> 00:21:47.550
product catalog over to a
shopping cart? Do I go

494
00:21:47.550 --> 00:21:50.520
back out to web and
then back down? Like, and

495
00:21:50.520 --> 00:21:52.430
what, and how did that
work? How does that, that

496
00:21:52.560 --> 00:21:55.140
that's like orchestration for me.
Yeah. So I think that's

497
00:21:55.140 --> 00:21:58.410
a part of orchestration called
service discovery. And I think

498
00:21:58.410 --> 00:22:00.300
the first thing that most
people run into is you

499
00:22:00.300 --> 00:22:03.000
break your app into all
these distinct parts. And it's

500
00:22:03.000 --> 00:22:06.300
easy. If there's only one
copy of those distinct parts,

501
00:22:06.340 --> 00:22:08.070
then you just kind of
know where they are. But

502
00:22:08.070 --> 00:22:09.840
what happens when you start
to scale, one of those

503
00:22:09.840 --> 00:22:11.850
components may maybe five copies
and you throw a low

504
00:22:11.850 --> 00:22:14.070
bouncer on top, or maybe
you're talking point to point.

505
00:22:14.340 --> 00:22:17.160
So most of these orchestration
platforms will include service discovery.

506
00:22:17.280 --> 00:22:19.140
Okay. You say, I want
three copies of a thing.

507
00:22:19.560 --> 00:22:22.230
It places it on the
right machines gives them an

508
00:22:22.230 --> 00:22:25.440
IP address and then records
their location and presents it

509
00:22:25.440 --> 00:22:28.170
through something like DNS. So
that means use the standard

510
00:22:28.170 --> 00:22:30.780
protocols, you know, and understand,
Hey, I want the off

511
00:22:30.800 --> 00:22:33.450
service that will either return
you a list of OSS

512
00:22:33.510 --> 00:22:36.810
service, IPS, SRP record, or
maybe an IP of an

513
00:22:36.840 --> 00:22:39.480
internal low bouncer. So you
can just focus on hitting.

514
00:22:40.200 --> 00:22:43.050
Okay. So does that mean
that I'm say I'm in

515
00:22:43.050 --> 00:22:45.030
the product catalog and I'm
about to send something over

516
00:22:45.030 --> 00:22:48.990
to shopping cart. I might
have in my application, shopping

517
00:22:48.990 --> 00:22:53.790
cart.kelsey.com. That is another load
balancer. So I have like

518
00:22:53.790 --> 00:22:56.940
a series of load balancers
shopping cart, or to come

519
00:22:56.940 --> 00:23:00.960
might be internal DNS entirely
that talks to N number

520
00:23:00.960 --> 00:23:03.630
of shopping cart, Docker containers.
But I just don't even

521
00:23:03.630 --> 00:23:05.280
think about it. Yeah. Yeah.
We want to move that

522
00:23:05.280 --> 00:23:09.300
whole, how the internet works
and to your, your infrastructure,

523
00:23:09.300 --> 00:23:11.790
right? So if you go
to google.com, you don't know

524
00:23:11.790 --> 00:23:15.330
how many web servers are
serving up that search result.

525
00:23:15.540 --> 00:23:18.270
All you care about is
that there's one locator to

526
00:23:18.270 --> 00:23:20.280
make that happen. And then
that gives flexibility on the

527
00:23:20.280 --> 00:23:24.240
people managing infrastructure to re
IP, move things around, resize

528
00:23:24.240 --> 00:23:27.480
them without going and touching
a bunch of applications. That

529
00:23:27.480 --> 00:23:30.270
seems like such an obvious
clean way to do things.

530
00:23:30.270 --> 00:23:32.580
It seems like 15 years
ago, 10 years ago, we

531
00:23:32.580 --> 00:23:35.130
had like Ws start out
star. And we were doing

532
00:23:35.130 --> 00:23:37.590
service discovery and we were
looking up catalogs to get

533
00:23:37.980 --> 00:23:41.850
goods of URLs. And I'm
hearing you say, well, you

534
00:23:41.850 --> 00:23:43.950
should just use DNS because
it's a pretty good way

535
00:23:43.950 --> 00:23:46.250
to look stuff up. Yeah.
And I think a Lot

536
00:23:46.250 --> 00:23:47.690
of this that we're seeing
is that a lot of

537
00:23:47.690 --> 00:23:50.780
these tools that we've had
and proven themselves like DNS,

538
00:23:51.050 --> 00:23:52.520
the only thing that really
was missing was some, a

539
00:23:52.520 --> 00:23:55.160
little bit of automation and
glue, right? So it's not

540
00:23:55.160 --> 00:23:57.110
like we have to toss
all this stuff out. Right.

541
00:23:57.140 --> 00:24:00.140
But the patterns have started
to merge over time. These

542
00:24:00.140 --> 00:24:02.660
are pretty much the things
that have stood the test

543
00:24:02.660 --> 00:24:05.060
of time and they just
get rolled into the platform.

544
00:24:05.060 --> 00:24:06.730
So you don't have to
think about it. Yeah. When

545
00:24:06.730 --> 00:24:09.820
I, when I think about
rest and rest, I just

546
00:24:09.820 --> 00:24:14.020
feel happy about using HTTP
verbs for what they are.

547
00:24:14.500 --> 00:24:16.420
And when I explain to
people like the basics, basic,

548
00:24:16.420 --> 00:24:19.030
basic basics of, you know,
how crud maps to these

549
00:24:19.030 --> 00:24:21.220
different verbs, I kind of
go like, Oh yeah, that

550
00:24:21.220 --> 00:24:23.410
makes a lot of sense.
I'm like, in my mind,

551
00:24:23.410 --> 00:24:26.470
I'm like, why are we
tunneling verbs inside of envelopes,

552
00:24:26.470 --> 00:24:28.840
inside of bodies of other
envelopes inside of a post?

553
00:24:29.440 --> 00:24:31.060
You know what I mean?
We had this perfectly good

554
00:24:31.540 --> 00:24:36.040
protocol already out there. HTTP
was great enough. HB two

555
00:24:36.040 --> 00:24:39.040
will be better. DNS was
fine. It really seems like

556
00:24:39.040 --> 00:24:41.710
we are standing on the
shoulders of giants and starting

557
00:24:41.710 --> 00:24:43.150
to kind of tighten things
up. So is this a

558
00:24:43.150 --> 00:24:46.300
return to kind of a
minimalism? Yeah. So, you know,

559
00:24:46.300 --> 00:24:47.950
that's just one of the
things that I practice in

560
00:24:47.950 --> 00:24:51.760
general, it's this idea of
minimalism really understanding like the

561
00:24:51.760 --> 00:24:53.950
core of what you need.
Right. And I think in

562
00:24:53.950 --> 00:24:56.620
your life and in the
tech world, this is one

563
00:24:56.620 --> 00:24:59.140
of the most important things.
Like if you're storing data,

564
00:24:59.500 --> 00:25:02.980
you need a database. Right.
And for most people, standard

565
00:25:02.980 --> 00:25:05.530
SQL gets the job done.
But I think people get

566
00:25:05.530 --> 00:25:08.100
confused with the hype, right?
If you're like, Hey, we've

567
00:25:08.100 --> 00:25:10.180
got to pick a database.
Let's not pick an old

568
00:25:10.180 --> 00:25:13.810
database. Let's get to new
database. Whether the new database

569
00:25:13.810 --> 00:25:16.300
works for you or not,
most people aren't making decision

570
00:25:16.310 --> 00:25:19.060
on what you actually need.
And I think having that

571
00:25:19.060 --> 00:25:22.360
kind of sense of responsibility,
what do we need was

572
00:25:22.360 --> 00:25:24.610
the smallest thing we can
do. Let's just do that

573
00:25:24.790 --> 00:25:27.130
and then measure and then
figure out we need something

574
00:25:27.130 --> 00:25:30.520
else. Why do people say,
Oh, you know, Postgres, that's

575
00:25:30.520 --> 00:25:33.040
so 2000 and late, I
want to do no SQL.

576
00:25:33.550 --> 00:25:35.350
You know, it just seems
like you're right. They are

577
00:25:35.350 --> 00:25:38.230
picking the new hot thing.
But that is not battle-tested.

578
00:25:39.160 --> 00:25:42.070
It sounds like you recommend
maybe finding a balance, staying

579
00:25:42.070 --> 00:25:43.840
a couple of years back
on things that you have

580
00:25:43.840 --> 00:25:46.060
seen. Battle-tested especially if you're
doing a startup or Make

581
00:25:46.060 --> 00:25:49.300
sure you understand the fundamentals,
like, why are you making

582
00:25:49.300 --> 00:25:52.330
this trade off? If you
see some new technology, ask

583
00:25:52.330 --> 00:25:55.150
yourself, what problem is it
trying to solve? If their

584
00:25:55.150 --> 00:25:58.750
documentation or the project Raider
can't answer that question. You

585
00:25:58.750 --> 00:26:00.430
should be nervous because a
lot of people are building

586
00:26:00.430 --> 00:26:03.700
this stuff and they don't
know that they're reinventing the

587
00:26:03.700 --> 00:26:05.980
wheel. I want her to
saying, you know, it's like,

588
00:26:06.280 --> 00:26:09.010
let's not reinvent the wheel,
but what happens when people

589
00:26:09.010 --> 00:26:12.580
start rhyming? Right? They don't
know that they're reinventing things.

590
00:26:12.580 --> 00:26:15.370
It just looks the same
as similar start rhyming, they

591
00:26:15.370 --> 00:26:17.260
start rhyming. Right. So one
thing you don't want to

592
00:26:17.260 --> 00:26:19.870
do is repeat yourself. Right?
We have this dry principle.

593
00:26:20.230 --> 00:26:22.810
Don't repeat yourself, but what
happens when you're just rhyming?

594
00:26:23.260 --> 00:26:25.990
So you think you're saying
something different, but it's close

595
00:26:25.990 --> 00:26:28.360
enough to be in the
same thing. Oh, right. So

596
00:26:28.360 --> 00:26:30.040
if you pay attention to
what you're building is like,

597
00:26:30.070 --> 00:26:31.930
Hey, do you know what
that is? You just built

598
00:26:31.930 --> 00:26:35.050
DNS, but badly. Right? So
I think as people understand

599
00:26:35.050 --> 00:26:38.800
the foundations, they actually start
to choose the right technologies

600
00:26:38.800 --> 00:26:40.600
and know that they're on
the right path. That's interesting.

601
00:26:40.600 --> 00:26:42.760
I've never heard that referred
to as rhyming. That's cool.

602
00:26:42.940 --> 00:26:44.940
I gotta think about some
ways to express that. That's

603
00:26:44.940 --> 00:26:47.370
good. I like that. One
of the things this makes

604
00:26:47.370 --> 00:26:51.270
me think about though, is
I have been lowercase, a

605
00:26:51.300 --> 00:26:56.970
accused of ageism, mostly because
the older I get, the

606
00:26:56.970 --> 00:26:58.800
more I look back on
some of the things that

607
00:26:58.800 --> 00:27:02.460
some younger, very smart people
are doing and going, God,

608
00:27:02.460 --> 00:27:04.980
I'm pretty sure we did
that in the eighties or

609
00:27:04.980 --> 00:27:07.320
the nineties or the whatevers
or whatever. But of course

610
00:27:07.320 --> 00:27:11.610
my, can I say my
elderly, you know, opinion is

611
00:27:11.610 --> 00:27:15.270
sometimes dismissed or maybe I
inadvertently dismissed theirs. How do

612
00:27:15.270 --> 00:27:18.570
you find that balance between
that new, amazing innovation that

613
00:27:18.570 --> 00:27:21.360
we see from the defendant,
the young 20 somethings, as

614
00:27:21.360 --> 00:27:23.850
well as the, the, you
know, I'm not going to

615
00:27:23.850 --> 00:27:25.860
put you in the older
category, but certainly you have

616
00:27:25.860 --> 00:27:27.570
a lot of experience in
this space. How do you

617
00:27:27.570 --> 00:27:30.420
keep yourself from going from,
how do you find that

618
00:27:30.420 --> 00:27:33.840
balance between innovation and respecting
the powerful technologies of the

619
00:27:33.840 --> 00:27:35.570
past? I'll give you a
good example. When I joined

620
00:27:35.570 --> 00:27:37.610
Coro S this was probably
the first time I was

621
00:27:37.610 --> 00:27:40.250
dropped into the deep end
of distributed systems. Okay. So

622
00:27:40.250 --> 00:27:42.560
SED comes out and like,
what is the understood science

623
00:27:42.920 --> 00:27:45.080
well, as to sign? So
in order to get up

624
00:27:45.080 --> 00:27:46.970
to speed with this, I
just wouldn't go found the

625
00:27:46.970 --> 00:27:49.550
old white papers. I'm like,
what is the logical clock

626
00:27:49.580 --> 00:27:52.400
you search for that you're
filing like, Leslie Lamport, this

627
00:27:52.400 --> 00:27:55.220
has written, you know, a
couple of decades ago and

628
00:27:55.220 --> 00:27:57.350
they were explaining it really
clear. Right. So I think

629
00:27:57.350 --> 00:27:59.270
for me, I just learned
the respect that there are

630
00:27:59.270 --> 00:28:01.520
people who've researched this stuff.
Yeah. If you just go

631
00:28:01.520 --> 00:28:03.620
read it, you can get
a lot of the foundational

632
00:28:03.620 --> 00:28:05.660
bits. And I think it's
more of a respect thing,

633
00:28:05.690 --> 00:28:08.390
right? It's not about knowing
everything. It's about being able

634
00:28:08.390 --> 00:28:10.280
to leverage a lot of
work that other people did.

635
00:28:10.280 --> 00:28:12.110
So you can actually go
and build a new, exciting

636
00:28:12.110 --> 00:28:16.130
thing. Based on that foundation,
that's solid. I was in,

637
00:28:16.130 --> 00:28:18.320
I was at a conference,
I want to say it

638
00:28:18.320 --> 00:28:22.310
was Oslo. We were at
some dinner and I was

639
00:28:22.310 --> 00:28:24.440
sitting next to this elderly
gentleman. And we had just

640
00:28:24.440 --> 00:28:27.950
released asp.net MVC. So he
says, what do you do?

641
00:28:27.950 --> 00:28:29.420
I work for Microsoft. What
do you work on? I

642
00:28:29.420 --> 00:28:33.590
work on MVC. And he
goes, Oh, MVC. I invented

643
00:28:33.590 --> 00:28:37.760
that. And I'm like, what?
So I go and I

644
00:28:37.850 --> 00:28:41.060
Wikipedia the guy. This was
like the guy who invented

645
00:28:41.060 --> 00:28:45.320
the MVC pattern in 1976,
he was sitting next to

646
00:28:45.330 --> 00:28:48.800
he's like a famous Scandinavian
guy. And I felt like

647
00:28:48.800 --> 00:28:50.870
such a dork. Now, fortunately,
I hadn't said anything dumb

648
00:28:50.870 --> 00:28:53.240
yet, but I had just
told him how excited I

649
00:28:53.240 --> 00:28:56.840
was about shipping an MVC
pattern. And he had invented

650
00:28:56.840 --> 00:28:58.820
it when I was two.
And I think that is

651
00:28:58.910 --> 00:29:01.580
Like the superpower that if
you're in tech, if you

652
00:29:01.580 --> 00:29:04.280
understand that one part that
you go research all the

653
00:29:04.280 --> 00:29:06.500
way down to the foundation.
Yep. You'll look like a

654
00:29:06.500 --> 00:29:09.860
superhero because you're actually focused
on the right things versus

655
00:29:09.860 --> 00:29:12.950
running around, looking confused. And
there's nothing wrong with that.

656
00:29:12.950 --> 00:29:15.560
Like understanding that there may
have been people who have

657
00:29:15.560 --> 00:29:18.110
solved a problem before you,
right. Taking the time to

658
00:29:18.110 --> 00:29:21.080
study before you start any
strokes on the keyboard. This

659
00:29:21.080 --> 00:29:23.690
doesn't mean that everything has
been solved or all the

660
00:29:23.690 --> 00:29:25.910
problems have been thought about,
but you know, the gang

661
00:29:25.910 --> 00:29:28.250
of four had something they
were doing that was pretty

662
00:29:28.250 --> 00:29:29.870
thoughtful. And we should look
at their patterns and we

663
00:29:29.870 --> 00:29:32.600
should think about those things,
distributed systems. It's smart that

664
00:29:32.600 --> 00:29:36.140
you recognize that was a,
a well understood science with

665
00:29:36.170 --> 00:29:39.620
some foundational technologies that we
didn't need to reinvent. That's

666
00:29:39.620 --> 00:29:43.210
right. That's interesting. So when
people are Totally overwhelmed and

667
00:29:43.210 --> 00:29:44.980
they hear all these buzz
words and they go around

668
00:29:44.980 --> 00:29:48.430
Googling, they're going to find
whatever Google comes back with

669
00:29:48.430 --> 00:29:52.060
all due respect. It might
be some random person's loud

670
00:29:52.060 --> 00:29:54.700
blog. How do you know
what's right. And what's smart

671
00:29:54.700 --> 00:29:56.050
when you're going to go
and start getting into the

672
00:29:56.050 --> 00:29:59.140
world of containers and large
system orchestration. So for me,

673
00:29:59.140 --> 00:30:02.020
the tricks that I use,
I Google and I look

674
00:30:02.020 --> 00:30:04.450
at the names, right? You
go to the GitHub project

675
00:30:04.450 --> 00:30:06.220
and you look at the
names. And a lot of

676
00:30:06.220 --> 00:30:08.680
times these people, even though
you may think very highly

677
00:30:08.680 --> 00:30:11.320
of them, they're actually reachable,
right? You can ping them.

678
00:30:11.320 --> 00:30:14.110
You can email them usually
available on Twitter or some

679
00:30:14.110 --> 00:30:17.230
Slack channel RRC. And they're
really happy to talk about

680
00:30:17.230 --> 00:30:19.120
the thing that they're working
on. So if you want

681
00:30:19.120 --> 00:30:22.000
confirmation of like your understanding,
I will reach out to

682
00:30:22.000 --> 00:30:25.420
people and say, Hey, I'm
using your particular project. And

683
00:30:25.420 --> 00:30:27.370
here's some things that I'm
thinking about. Here's what I

684
00:30:27.370 --> 00:30:30.400
currently understand. And if you
give some well thought out

685
00:30:30.400 --> 00:30:33.490
questions, usually get well, thought
out answers and response. And

686
00:30:33.490 --> 00:30:36.250
I think people overlook that
ability that you just don't

687
00:30:36.250 --> 00:30:38.860
have to rely on search
results. You can actually dig

688
00:30:38.890 --> 00:30:41.230
deeper and do the human
thing. Yeah. And I would

689
00:30:41.230 --> 00:30:43.870
also add to that too,
if they do happen to

690
00:30:43.870 --> 00:30:45.810
be conference speakers or people
who speak at conferences, that

691
00:30:45.810 --> 00:30:50.530
yourself included, watch their videos,
watch the videos, because we're

692
00:30:50.530 --> 00:30:53.140
always anxious to give our
real world kind of a

693
00:30:53.140 --> 00:30:55.810
pain on things. And I
think that helps guide people

694
00:30:55.810 --> 00:30:58.510
to their life versus the
marketing material. Definitely. And on

695
00:30:58.510 --> 00:31:00.880
a personal note, I definitely
look up to you as

696
00:31:00.880 --> 00:31:03.130
a presenter. You have a
style that I would like

697
00:31:03.130 --> 00:31:05.950
to emulate as a presenter,
and I really enjoy watching

698
00:31:05.950 --> 00:31:09.460
you talk because you're excited.
You're kind, and you are,

699
00:31:09.460 --> 00:31:11.560
you empower the audience. So
I appreciate you as a,

700
00:31:11.560 --> 00:31:13.990
as a conference speaker. I
appreciate that Scott coming from

701
00:31:13.990 --> 00:31:16.360
a well renowned speaker that
I love to watch as

702
00:31:16.360 --> 00:31:18.370
well. Thank you. Thanks, man.
I appreciate that. Well, thanks

703
00:31:18.370 --> 00:31:20.170
for coming on the show,
man. Awesome. Thanks for being

704
00:31:20.170 --> 00:31:23.500
here. This has been another
episode of Hanselminutes and we'll

705
00:31:23.500 --> 00:31:24.670
see you again next week.

